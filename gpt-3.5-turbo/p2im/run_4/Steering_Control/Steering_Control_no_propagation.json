{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeFlag_000800f4(undefined4 inputValue)\n\n{\n  if ((char)DAT_200708a0 == '\\0') {\n    DAT_200708a0._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_data_00080164",
            "code": "\nvoid initializeData_00080164(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  FUN_000806f8(&DAT_200708e8,0x5a);\n  FUN_000806f8(&DAT_200708d4,0x5a,arg3,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_data_00080164",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_000806f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801e0": {
            "entrypoint": "0x000801e0",
            "current_name": "FUNC_000801e0",
            "code": "\nundefined8 FUNC_000801e0(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  FUN_000813dc(&DAT_20070be8,0xe100,param_3,param_4,param_4);\n  FUN_00080f0c(0xd,1);\n  FUN_00080f0c(6,1);\n  FUN_00080f0c(0x39,0);\n  FUN_00080f0c(4,0);\n  FUN_00080f0c(3,0);\n  FUN_00080f0c(2,0);\n  FUN_000806a0(&DAT_200708d4,5);\n  FUN_000806a0(&DAT_200708e8,6);\n  FUN_00080164();\n  FUNC_00080f08(1000);\n  if (DAT_200708bc == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000801e0": "FUNC_000801e0"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_000806a0",
                "FUN_00080f0c",
                "FUN_00080f08",
                "FUN_00080164",
                "FUN_000813dc"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080250": {
            "entrypoint": "0x00080250",
            "current_name": "control_system_00080250",
            "code": "\nvoid controlSystem_00080250(void)\n\n{\n  undefined4 status;\n  int count;\n  undefined *pointer;\n  undefined buffer [12];\n  \n  DAT_200708c0 = FUN_00081624(4,1,20000);\n  FUNC_00080f08(10);\n  DAT_200708c4 = DAT_200708c4 ^ 1;\n  FUN_00081014(0xd);\n  if (DAT_200708c0 < 0x641) {\n    if (DAT_200708c0 - 0x385U < 299) {\n      if (DAT_200708eb != '\\0') {\n        FUN_00080164();\n        FUN_000810e8(&DAT_20070be8,\"Entered manual control mode.\");\n        DAT_200708eb = '\\0';\n      }\n      FUNC_00080f08(10);\n      status = FUN_00081624(3,1,20000);\n      DAT_200708d8 = FUN_0008145c(0,1000,2000,0x28,0x96);\n      DAT_200708ec = FUN_0008145c(status,1000,2000,0x28,0x96);\n      while (count = FUN_00081248(&DAT_20070be8), 0 < count) {\n        FUN_00081276(&DAT_20070be8);\n        thunk_FUN_0008113a(&DAT_20070be8,DAT_200708d8,10);\n        FUN_000810c4(&DAT_20070be8,&DAT_00084b13);\n        FUN_0008117a(&DAT_20070be8,DAT_200708ec,10);\n      }\n      FUN_000806f8(&DAT_200708e8,DAT_200708ec);\n      FUN_000806f8(&DAT_200708d4,DAT_200708d8);\n    }\n    else {\n      if (DAT_200708eb == '\\0') {\n        FUN_00080164();\n        FUN_000810e8(&DAT_20070be8,\"Entered autonomous control mode.\");\n      }\n      DAT_200708eb = '\\x01';\nLAB_00080346:\n      count = FUN_00081248(&DAT_20070be8);\n      if (0 < count) {\n        FUN_00081214(buffer,&DAT_20070be8,0x2c);\n        FUN_00081560(&DAT_200708dc,buffer);\n        FUN_00081472(buffer);\n        FUN_00081214(buffer,&DAT_20070be8,10);\n        FUN_00081560(&DAT_200708c8,buffer);\n        FUN_00081472(buffer);\n        FUN_00081276(&DAT_20070be8);\n        count = FUN_000815b8(&DAT_200708dc,\"steer\");\n        if (count == 0) goto LAB_0008039c;\n        status = FUN_000815de(&DAT_200708c8);\n        pointer = &DAT_200708d4;\n        goto LAB_000803b2;\n      }\n    }\n  }\n  else {\n    FUN_00080164();\n    FUN_000810e8(&DAT_20070be8,\"error\");\n  }\n  return;\nLAB_0008039c:\n  count = FUN_000815b8(&DAT_200708dc,\"motor\");\n  if (count != 0) {\n    status = FUN_000815de(&DAT_200708c8);\n    pointer = &DAT_200708e8;\nLAB_000803b2:\n    FUN_000806f8(pointer,status);\n  }\n  goto LAB_00080346;\n}\n\n",
            "renaming": {
                "FUN_00080250": "control_system_00080250",
                "uVar1": "status",
                "iVar2": "count",
                "puVar3": "pointer",
                "auStack_1c": "buffer"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_000810c4",
                "FUN_00081472",
                "FUN_000815b8",
                "FUN_00081248",
                "FUN_000806f8",
                "FUN_00081214",
                "FUN_00080164",
                "FUN_000810e8",
                "FUN_00080f08",
                "FUN_00081276",
                "FUN_00081560",
                "FUN_00081014",
                "FUN_00081624",
                "thunk_FUN_0008113a",
                "FUN_000815de",
                "FUN_0008117a",
                "FUN_0008145c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803fc": {
            "entrypoint": "0x000803fc",
            "current_name": "initialize_tc_000803fc",
            "code": "\nvoid initializeTC_000803fc(int channelAddress,uint channelSize,undefined4 initialValue,uint bitPosition)\n\n{\n  undefined4 reserved_4;\n  undefined4 link_register;\n  undefined8 combinedParams;\n  \n  combinedParams = CONCAT44(channelSize,channelAddress);\n  FUN_00080aa8(initialValue);\n  FUN_00080b2c(channelAddress,channelSize,0xc002);\n  FUN_00080b90(channelAddress,channelSize,0xa41);\n  *(int *)((bitPosition >> 5) * 4 + -0x1fff1f00) = 1 << (bitPosition & 0x1f);\n  *(undefined4 *)(channelAddress + channelSize * 0x40 + 0x24) = 4;\n  if (2 < channelSize) {\n    combinedParams = FUN_000816f8(\"../source/tc.c\",0x5c,\"TC_Start\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\",\n                         reserved_4,link_register);\n  }\n  *(undefined4 *)((int)combinedParams + (int)((ulonglong)combinedParams >> 0x20) * 0x40) = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000803fc": "initialize_tc_000803fc",
                "param_1": "channelAddress",
                "param_2": "channelSize",
                "param_3": "initialValue",
                "param_4": "bitPosition",
                "unaff_r4": "reserved_4",
                "in_lr": "link_register",
                "uVar1": "combinedParams"
            },
            "calling": [
                "FUN_000806a0"
            ],
            "called": [
                "FUN_00080b90",
                "FUN_00080b2c",
                "FUN_00080aa8",
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008044c": {
            "entrypoint": "0x0008044c",
            "current_name": "update_data_0008044c",
            "code": "\nvoid updateData_0008044c(int index,int data,int offset)\n\n{\n  uint limit;\n  int temp;\n  \n  offset = offset * 0x40;\n  if (((&DAT_200708f1)[index] & 0x80) == 0) {\n    temp = index * 0xc;\n    if (((char)(&DAT_200708f1)[index] + temp < (int)(uint)DAT_200708f0) &&\n       ((int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + temp) * 8] << 0x19) < 0\n       )) {\n      FUN_00081014((&DAT_200708f8)[(temp + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,0);\n    }\n  }\n  else {\n    *(uint *)(data + offset) = *(uint *)(data + offset) | 4;\n  }\n  limit = (uint)DAT_200708f0;\n  (&DAT_200708f1)[index] = (&DAT_200708f1)[index] + '\\x01';\n  temp = index * 0xc;\n  if (((char)(&DAT_200708f1)[index] + temp < (int)limit) &&\n     ((char)(&DAT_200708f1)[index] < '\\f')) {\n    *(int *)(data + offset + 0x14) =\n         *(int *)(data + offset + 0x10) +\n         *(int *)(&DAT_200708fc + ((char)(&DAT_200708f1)[index] + temp) * 8);\n    if (-1 < (int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + temp) * 8] << 0x19\n                  )) {\n      return;\n    }\n    FUN_00081014((&DAT_200708f8)[(temp + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,1);\n    return;\n  }\n  data = data + offset;\n  limit = (Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * 20000 >> 5;\n  if (limit <= *(int *)(data + 0x10) + 4U) {\n    limit = *(int *)(data + 0x10) + 4;\n  }\n  *(uint *)(data + 0x14) = limit;\n  (&DAT_200708f1)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008044c": "update_data_0008044c",
                "param_1": "index",
                "param_2": "data",
                "param_3": "offset",
                "uVar1": "limit",
                "iVar2": "temp"
            },
            "calling": [],
            "called": [
                "FUN_00081014"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805a8": {
            "entrypoint": "0x000805a8",
            "current_name": "update_param_000805a8",
            "code": "\nvoid updateParam_000805a8(byte *buffer)\n\n{\n  char nextData;\n  uint dataNum;\n  \n  dataNum = (uint)DAT_200708f0;\n  if (dataNum < 0x3c) {\n    nextData = DAT_200708f0 + 1;\n    *buffer = DAT_200708f0;\n    DAT_200708f0 = nextData;\n    *(uint *)(&DAT_200708fc + dataNum * 8) =\n         (array_1[6].r_offset / 1000000) * 0x5dc >> 5;\n    return;\n  }\n  *buffer = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805a8": "update_param_000805a8",
                "param_1": "buffer",
                "cVar1": "nextData",
                "uVar2": "dataNum",
                "Elf32_Rel_ARRAY_20070000": "array_1"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806a0": {
            "entrypoint": "0x000806a0",
            "current_name": "process_data_000806a0",
            "code": "\nbyte processData_000806a0(byte *data,undefined4 param)\n\n{\n  byte byteValue;\n  undefined4 address;\n  uint dividend;\n  undefined4 constant;\n  int counter;\n  uint temp;\n  \n  if (0x3b < *data) goto endLabel;\n  FUN_00080f0c(param,1,0x220,*data,0x960);\n  temp = (uint)*data;\n  byteValue = (&DAT_200708f8)[temp * 8];\n  data[2] = 0;\n  dividend = temp / 0xc;\n  (&DAT_200708f8)[temp * 8] = byteValue & 0xc0 | (byte)param & 0x3f;\n  data[1] = 0;\n  counter = 0;\n  do {\n    if ((int)((uint)(byte)(&DAT_200708f8)[(counter + dividend * 0xc) * 8] << 0x19) < 0)\n    goto checkLabel;\n    counter = counter + 1;\n  } while (counter != 0xc);\n  if (dividend == 0) {\n    address = 0x40084000;\n    constant = 0x1e;\nLAB_0008064c:\n    FUN_000803fc(address,dividend,constant,constant);\n  }\n  else {\n    if (dividend == 1) {\n      address = 0x40084000;\n      constant = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (dividend == 2) {\n      address = 0x40084000;\n      constant = 0x20;\n      goto LAB_0008064c;\n    }\n    if (dividend == 3) {\n      address = 0x40080000;\n      dividend = 2;\n      constant = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (dividend == 4) {\n      address = 0x40080000;\n      dividend = 0;\n      constant = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\ncheckLabel:\n  (&DAT_200708f8)[(uint)*data * 8] = (&DAT_200708f8)[(uint)*data * 8] | 0x40;\nendLabel:\n  return *data;\n}\n\n",
            "renaming": {
                "FUN_000806a0": "process_data_000806a0",
                "param_1": "data",
                "param_2": "param",
                "bVar1": "byteValue",
                "uVar2": "address",
                "uVar3": "dividend",
                "uVar4": "constant",
                "iVar5": "counter",
                "uVar6": "temp",
                "LAB_00080660": "endLabel",
                "LAB_00080652": "checkLabel"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_000803fc",
                "FUN_00080f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806f8": {
            "entrypoint": "0x000806f8",
            "current_name": "calculate_relocation_000806f8",
            "code": "\nvoid calculateRelocation_000806f8(byte *dataBuffer,uint dataBufferLength)\n\n{\n  uint boundedLength;\n  \n  if ((int)dataBufferLength < 0x220) {\n    boundedLength = dataBufferLength;\n    if (0xb3 < (int)dataBufferLength) {\n      boundedLength = 0xb4;\n    }\n    dataBufferLength = FUN_0008145c(boundedLength & ~((int)boundedLength >> 0x1f),0,0xb4,(0x88 - (char)dataBuffer[1]) * 4,\n                           (600 - (char)dataBuffer[2]) * 4,dataBufferLength);\n  }\n  if (*dataBuffer < 0x3c) {\n    boundedLength = (0x88 - (char)dataBuffer[1]) * 4;\n    if (((int)(dataBufferLength + (0x88 - (char)dataBuffer[1]) * -4) < 0 == hasBorrow(dataBufferLength,boundedLength)) &&\n       (boundedLength = (600 - (char)dataBuffer[2]) * 4, (int)dataBufferLength <= (int)boundedLength)) {\n      boundedLength = dataBufferLength;\n    }\n    *(uint *)(&DAT_200708fc + (uint)*dataBuffer * 8) =\n         (Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * (boundedLength - 2) >> 5;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000806f8": "calculate_relocation_000806f8",
                "param_1": "dataBuffer",
                "param_2": "dataBufferLength",
                "uVar1": "boundedLength",
                "SBORROW4": "hasBorrow"
            },
            "calling": [
                "FUN_00080250",
                "FUN_00080164"
            ],
            "called": [
                "FUN_0008145c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008073a": {
            "entrypoint": "0x0008073a",
            "current_name": "FUNC_0008073a",
            "code": "\nvoid FUNC_0008073a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008073a": "FUNC_0008073a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080748": {
            "entrypoint": "0x00080748",
            "current_name": "FUNC_00080748",
            "code": "\nvoid FUNC_00080748(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080748": "FUNC_00080748"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074a": {
            "entrypoint": "0x0008074a",
            "current_name": "FUNC_0008074a",
            "code": "\nvoid FUNC_0008074a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074a": "FUNC_0008074a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074c": {
            "entrypoint": "0x0008074c",
            "current_name": "FUNC_0008074c",
            "code": "\nvoid FUNC_0008074c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074c": "FUNC_0008074c"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080774": {
            "entrypoint": "0x00080774",
            "current_name": "initialize_system_00080774",
            "code": "\n\n\nvoid initializeSystem_00080774(void)\n\n{\n  int index;\n  int nextIndex;\n  \n  FUN_00080b98();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  FUN_00081778();\n  index = 0;\n  do {\n    nextIndex = index + 1;\n    FUN_00081014(index,0);\n    index = nextIndex;\n  } while (nextIndex != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  FUN_00080a30(0x400e0e00,1,0x300,0);\n  FUN_00081014(0,1);\n  FUN_00080a30(0x400e0e00,1,0xc00,0);\n  FUN_00080a30(0x400e0e00,1,0x3000,0);\n  FUN_00080a30(0x400e1400,2,0x30,0);\n  FUN_00080a30(0x400e1000,1,0xc00,0);\n  FUN_00080a30(0x400e0e00,1,3,0);\n  FUN_00080a30(0x400e1000,1,0xc000,0);\n  FUN_00080aa8(0x25);\n  FUN_00080c98(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  FUN_00080d3e(0x400c0000,0,0x300000,1);\n  FUN_00080d30(0x400c0000,0,0);\n  FUN_00080d6a(0x400c0000,0xffffffff);\n  FUN_00080d62(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080774": "initialize_system_00080774",
                "iVar1": "index",
                "iVar2": "nextIndex"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00080d3e",
                "FUN_00081778",
                "FUN_00081014",
                "FUN_00080c98",
                "FUN_00080b98",
                "FUN_00080a30",
                "FUN_00080d30",
                "FUN_00080aa8",
                "FUN_00080d6a",
                "FUN_00080d62"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008089c": {
            "entrypoint": "0x0008089c",
            "current_name": "initialize_components_0008089c",
            "code": "\nvoid initializeComponents_0008089c(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  FUN_000811b0(&DAT_20070c0c);\n  FUN_000811b0(&DAT_20070b60);\n  FUN_00081348(&DAT_20070be8,0x400e0800,8,8,&DAT_20070c0c,&DAT_20070b60,arg3);\n  FUN_000811b0(&DAT_20070e6c);\n  FUN_000811b0(&DAT_20070ef4);\n  FUN_000811b0(&DAT_20070f7c);\n  FUN_000811b0(&DAT_20070ad8);\n  FUN_000811b0(&DAT_20070d0c);\n  FUN_000811b0(&DAT_20070d94);\n  FUN_00081438(&DAT_20070c94,0x40098000,0x11,0x11,&DAT_20070e6c,&DAT_20070ad8);\n  FUN_00081438(&DAT_20070cbc,0x4009c000,0x12,0x12,&DAT_20070ef4,&DAT_20070d0c);\n  FUN_00081438(&DAT_20070ce4,0x400a4000,0x14,0x14,&DAT_20070f7c,&DAT_20070d94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008089c": "initialize_components_0008089c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3"
            },
            "calling": [],
            "called": [
                "FUN_000811b0",
                "FUN_00081348",
                "FUN_00081438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080970": {
            "entrypoint": "0x00080970",
            "current_name": "check_and_execute_functions_00080970",
            "code": "\nvoid checkAndExecuteFunctions_00080970(void)\n\n{\n  int returnValue;\n  \n  returnValue = FUN_00081248(&DAT_20070be8);\n  if (returnValue != 0) {\n    FUNC_0008073a();\n  }\n  returnValue = FUN_00081248(&DAT_20070c94);\n  if (returnValue != 0) {\n    FUNC_00080748();\n  }\n  returnValue = FUN_00081248(&DAT_20070cbc);\n  if (returnValue != 0) {\n    FUNC_0008074a();\n  }\n  returnValue = FUN_00081248(&DAT_20070ce4);\n  if (returnValue != 0) {\n    FUNC_0008074c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080970": "check_and_execute_functions_00080970",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_0008074a",
                "FUN_0008073a",
                "FUN_00081248",
                "FUN_00080748",
                "FUN_0008074c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809be": {
            "entrypoint": "0x000809be",
            "current_name": "update_parameter_000809be",
            "code": "\nvoid updateParameter_000809be(int baseAddress,undefined4 actionCode,uint newValue)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(baseAddress + 0x44) = newValue;\n  switch(actionCode) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~newValue;\n    break;\n  case 2:\n    updatedValue = *(uint *)(baseAddress + 0x70) | newValue;\n    break;\n  default:\n    goto switchD_000809c4_caseD_6;\n  }\n  *(uint *)(baseAddress + 0x70) = updatedValue;\nswitchD_000809c4_caseD_6:\n  *(uint *)(baseAddress + 4) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809be": "update_parameter_000809be",
                "param_1": "baseAddress",
                "param_2": "actionCode",
                "param_3": "newValue",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809e4": {
            "entrypoint": "0x000809e4",
            "current_name": "set_values_based_on_flags_000809e4",
            "code": "\nvoid setValuesBasedOnFlags_000809e4(undefined4 *output,undefined4 value,uint flags)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(flags << 0x1f) < 0;\n  output[17] = value;\n  if (isNegative) {\n    output[25] = value;\n  }\n  if (!isNegative) {\n    output[24] = value;\n  }\n  isNegative = (flags & 10) != 0;\n  if (isNegative) {\n    output[8] = value;\n  }\n  if (!isNegative) {\n    output[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    output[32] = value;\n  }\n  output[5] = value;\n  *output = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809e4": "set_values_based_on_flags_000809e4",
                "param_1": "output",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "isNegative",
                "param_1[0x11]": "output[17]",
                "param_1[0x19]": "output[25]",
                "param_1[0x18]": "output[24]",
                "param_1[8]": "output[8]",
                "param_1[9]": "output[9]",
                "param_1[0x20]": "output[32]",
                "param_1[5]": "output[5]"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a0a": {
            "entrypoint": "0x00080a0a",
            "current_name": "update_parameters_00080a0a",
            "code": "\nvoid updateParameters_00080a0a(undefined4 *output,undefined4 newValue,int isParam3Zero,int isParam4Zero,int isParam5Zero)\n\n{\n  output[0x11] = newValue;\n  if (isParam5Zero == 0) {\n    output[0x18] = newValue;\n  }\n  else {\n    output[0x19] = newValue;\n  }\n  if (isParam4Zero == 0) {\n    output[0x15] = newValue;\n  }\n  else {\n    output[0x14] = newValue;\n  }\n  if (isParam3Zero == 0) {\n    output[0xd] = newValue;\n  }\n  else {\n    output[0xc] = newValue;\n  }\n  output[4] = newValue;\n  *output = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a0a": "update_parameters_00080a0a",
                "param_1": "output",
                "param_2": "newValue",
                "param_3": "isParam3Zero",
                "param_4": "isParam4Zero",
                "param_5": "isParam5Zero"
            },
            "calling": [
                "FUN_00081014",
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a30": {
            "entrypoint": "0x00080a30",
            "current_name": "update_configuration_00080a30",
            "code": "\nundefined4 updateConfiguration_00080a30(int deviceAddress,int configType,undefined4 configValue,uint configOffset)\n\n{\n  bool isNegativeOffset;\n  \n  switch(configType) {\n  case 1:\n  case 2:\n    FUN_000809be(deviceAddress,configType,configValue);\n    isNegativeOffset = (int)(configOffset << 0x1f) < 0;\n    *(undefined4 *)(deviceAddress + 0x44) = configValue;\n    if (isNegativeOffset) {\n      *(undefined4 *)(deviceAddress + 100) = configValue;\n    }\n    if (!isNegativeOffset) {\n      *(undefined4 *)(deviceAddress + 0x60) = configValue;\n    }\n    break;\n  case 3:\n    FUN_000809e4(deviceAddress,configValue,configOffset,0x809e5,deviceAddress);\n    break;\n  case 4:\n  case 5:\n    FUN_00080a0a(deviceAddress,configValue,configType == 5,(configOffset << 0x1d) >> 0x1f,configOffset & 1,configType,configValue)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080a30": "update_configuration_00080a30",
                "param_1": "deviceAddress",
                "param_2": "configType",
                "param_3": "configValue",
                "param_4": "configOffset",
                "bVar1": "isNegativeOffset"
            },
            "calling": [
                "FUN_00080f0c",
                "FUN_00080774"
            ],
            "called": [
                "FUN_00080a0a",
                "FUN_000809e4",
                "FUN_000809be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a94": {
            "entrypoint": "0x00080a94",
            "current_name": "check_conditions_00080a94",
            "code": "\nuint checkConditions_00080a94(int inputValue,uint maskValue)\n\n{\n  uint result;\n  \n  result = *(uint *)(inputValue + 8) & maskValue;\n  if (result != 0) {\n    if ((maskValue & *(uint *)(inputValue + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080a94": "check_conditions_00080a94",
                "param_1": "inputValue",
                "param_2": "maskValue",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081014"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "check_and_update_bit_00080aa8",
            "code": "\n\n\nundefined4 checkAndUpdateBit_00080aa8(uint inputValue)\n\n{\n  uint bitMask;\n  \n  if (inputValue < 0x2d) {\n    if (inputValue < 0x20) {\n      bitMask = 1 << (inputValue & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (inputValue - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "check_and_update_bit_00080aa8",
                "param_1": "inputValue",
                "uVar1": "bitMask"
            },
            "calling": [
                "FUN_000803fc",
                "FUN_00080f0c",
                "FUN_00080774",
                "FUN_000813dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b2c": {
            "entrypoint": "0x00080b2c",
            "current_name": "configure_tc_channel_00080b2c",
            "code": "\nvoid configureTCChannel_00080b2c(undefined4 paramOne,uint paramTwo,char *paramThree)\n\n{\n  int offset;\n  int channelAddress;\n  undefined8 combinedParams;\n  \n  combinedParams = CONCAT44(paramTwo,paramOne);\n  if (2 < paramTwo) {\n    paramThree = \"TC_Configure\";\n    combinedParams = FUN_000816f8(\"../source/tc.c\",0x40,\"TC_Configure\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  offset = (int)((ulonglong)combinedParams >> 0x20) * 0x40;\n  channelAddress = (int)combinedParams + offset;\n  *(undefined4 *)((int)combinedParams + offset) = 2;\n  *(undefined4 *)(channelAddress + 0x28) = 0xffffffff;\n  *(char **)(channelAddress + 4) = paramThree;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b2c": "configure_tc_channel_00080b2c",
                "param_1": "paramOne",
                "param_2": "paramTwo",
                "param_3": "paramThree",
                "uVar3": "combinedParams",
                "iVar1": "offset",
                "iVar2": "channelAddress"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b90": {
            "entrypoint": "0x00080b90",
            "current_name": "store_value_00080b90",
            "code": "\nvoid storeValue_00080b90(int baseAddress,int index,undefined4 value)\n\n{\n  *(undefined4 *)(baseAddress + index * 0x40 + 0x14) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b90": "store_value_00080b90",
                "param_1": "baseAddress",
                "param_2": "index",
                "param_3": "value"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b98": {
            "entrypoint": "0x00080b98",
            "current_name": "initialize_memory_00080b98",
            "code": "\n\n\nvoid initializeMemory_00080b98(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  array[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b98": "initialize_memory_00080b98",
                "Elf32_Rel_ARRAY_20070000": "array"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080c20",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080c6a) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_200708a0\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_00085878 + iVar1);\n  }\n  for (puVar2 = &DAT_200708a0; puVar2 < (undefined4 *)0x20071248; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  FUN_000815ec();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000815ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c98": {
            "entrypoint": "0x00080c98",
            "current_name": "calculate_threshold_00080c98",
            "code": "\nundefined4 calculateThreshold_00080c98(undefined4 *threshold,uint inputSize,int factor1,int factor2)\n\n{\n  uint quotient;\n  uint i;\n  uint thresholdValues [16];\n  \n  thresholdValues[0] = 0;\n  thresholdValues[1] = 8;\n  thresholdValues[2] = 0x10;\n  thresholdValues[3] = 0x18;\n  thresholdValues[4] = 0x40;\n  thresholdValues[5] = 0x50;\n  thresholdValues[6] = 0x60;\n  thresholdValues[7] = 0x70;\n  thresholdValues[8] = 0x200;\n  thresholdValues[9] = 0x240;\n  thresholdValues[10] = 0x280;\n  thresholdValues[11] = 0x2c0;\n  thresholdValues[12] = 0x300;\n  thresholdValues[13] = 0x340;\n  thresholdValues[14] = 0x380;\n  thresholdValues[15] = 0x3c0;\n  *threshold = 1;\n  threshold[1] = 0;\n  threshold[0x48] = 0x202;\n  threshold[0x41] = 0;\n  threshold[0x45] = 0;\n  quotient = inputSize / (uint)(factor1 * 2);\n  if (inputSize == factor1 * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  i = 0;\n  do {\n    if ((uint)(factor2 * (int)(((ulonglong)inputSize / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        thresholdValues[i]) {\n      threshold[1] = (i & 0xf) << 0x10 | (quotient & 0xff) << 8 | threshold[1];\n      return 0;\n    }\n    i = i + 1;\n  } while (i != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080c98": "calculate_threshold_00080c98",
                "param_1": "threshold",
                "param_2": "inputSize",
                "param_3": "factor1",
                "param_4": "factor2",
                "uVar1": "quotient",
                "uVar2": "i",
                "local_58": "thresholdValues"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d30": {
            "entrypoint": "0x00080d30",
            "current_name": "update_parameter_value_00080d30",
            "code": "\nvoid updateParameterValue_00080d30(int ptr,uint value1,uint value2)\n\n{\n  *(uint *)(ptr + 4) = value1 | *(uint *)(ptr + 4) | (value2 & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d30": "update_parameter_value_00080d30",
                "param_1": "ptr",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d3e": {
            "entrypoint": "0x00080d3e",
            "current_name": "update_values_00080d3e",
            "code": "\nvoid updateValues_00080d3e(int baseAddress,uint maskValue,uint originalValue,uint shiftValue)\n\n{\n  *(uint *)(baseAddress + 4) =\n       originalValue | *(uint *)(baseAddress + 4) | (maskValue & 0xf) << 0x18 | (shiftValue & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d3e": "update_values_00080d3e",
                "param_1": "baseAddress",
                "param_2": "maskValue",
                "param_3": "originalValue",
                "param_4": "shiftValue"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d58": {
            "entrypoint": "0x00080d58",
            "current_name": "set_bit_00080d58",
            "code": "\nvoid set_bit_00080d58(int base_address,uint bit_position)\n\n{\n  *(int *)(base_address + 0x14) = 1 << (bit_position & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d58": "set_bit_00080d58",
                "param_1": "base_address",
                "param_2": "bit_position"
            },
            "calling": [
                "FUN_00080f0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d62": {
            "entrypoint": "0x00080d62",
            "current_name": "set_default_value_00080d62",
            "code": "\nvoid setDefaultValue_00080d62(int objAddress)\n\n{\n  *(undefined4 *)(objAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d62": "set_default_value_00080d62",
                "param_1": "objAddress"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d6a": {
            "entrypoint": "0x00080d6a",
            "current_name": "set_param_00080d6a",
            "code": "\nvoid setParam_00080d6a(int baseAddress,undefined4 value)\n\n{\n  *(undefined4 *)(baseAddress + 0x28) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d6a": "set_param_00080d6a",
                "param_1": "baseAddress",
                "param_2": "value"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e80": {
            "entrypoint": "0x00080e80",
            "current_name": "get_return_value_00080e80",
            "code": "\nundefined4 getReturnValue_00080e80(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080e80": "get_return_value_00080e80"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e88": {
            "entrypoint": "0x00080e88",
            "current_name": "sum_previous_value_with_param_00080e88",
            "code": "\nint sumPreviousValueWithParam_00080e88(int inputValue)\n\n{\n  int previousValue;\n  \n  if (DAT_20071208 == 0) {\n    DAT_20071208 = 0x20071248;\n  }\n  previousValue = DAT_20071208;\n  DAT_20071208 = inputValue + DAT_20071208;\n  return previousValue;\n}\n\n",
            "renaming": {
                "FUN_00080e88": "sum_previous_value_with_param_00080e88",
                "param_1": "inputValue",
                "iVar1": "previousValue"
            },
            "calling": [
                "FUN_0008236c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eaa": {
            "entrypoint": "0x00080eaa",
            "current_name": "get_return_value_00080eaa",
            "code": "\nuint32_t getReturnValue_00080eaa(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080eaa": "get_return_value_00080eaa",
                "undefined4": "uint32_t"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eb0": {
            "entrypoint": "0x00080eb0",
            "current_name": "initialize_memory_00080eb0",
            "code": "\nundefined4 initializeMemory_00080eb0(undefined4 param,int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080eb0": "initialize_memory_00080eb0",
                "param_1": "param",
                "param_2": "memoryAddress"
            },
            "calling": [
                "FUN_00084494"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eba": {
            "entrypoint": "0x00080eba",
            "current_name": "initialize_application_00080eba",
            "code": "\nundefined4 initializeApplication_00080eba(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080eba": "initialize_application_00080eba"
            },
            "calling": [
                "FUN_000844bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ebe": {
            "entrypoint": "0x00080ebe",
            "current_name": "initialize_function_00080ebe",
            "code": "\nint initializeFunction_00080ebe(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ebe": "initialize_function_00080ebe",
                "undefined4": "int"
            },
            "calling": [
                "FUN_000844e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec2": {
            "entrypoint": "0x00080ec2",
            "current_name": "initialize_application_00080ec2",
            "code": "\nundefined4 initializeApplication_00080ec2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ec2": "initialize_application_00080ec2"
            },
            "calling": [
                "FUN_00084508"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec8": {
            "entrypoint": "0x00080ec8",
            "current_name": "process_data_00080ec8",
            "code": "\n\n\nuint processData_00080ec8(undefined4 undefined,int dataPointer,uint dataSize)\n\n{\n  int currentIndex;\n  \n  for (currentIndex = 0; currentIndex < (int)dataSize; currentIndex = currentIndex + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(dataPointer + currentIndex);\n  }\n  return dataSize & ~((int)dataSize >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_00080ec8": "process_data_00080ec8",
                "param_1": "undefined",
                "param_2": "dataPointer",
                "param_3": "dataSize",
                "iVar1": "currentIndex"
            },
            "calling": [
                "FUN_00084244"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eec": {
            "entrypoint": "0x00080eec",
            "current_name": "exit_with_status_00080eec",
            "code": "\nvoid exitWithStatus_00080eec(undefined4 status,undefined4 unchangedParam,undefined4 formatString,undefined4 unchangedParam2)\n\n{\n  FUN_000817c8(\"Exiting with status %d.\\n\",status,formatString,unchangedParam2,unchangedParam2);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "param_1": "status",
                "param_2": "unchangedParam",
                "param_3": "formatString",
                "param_4": "unchangedParam2"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_000817c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080efc": {
            "entrypoint": "0x00080efc",
            "current_name": "FUNC_00080efc",
            "code": "\nvoid FUNC_00080efc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080efc": "FUNC_00080efc"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080efe": {
            "entrypoint": "0x00080efe",
            "current_name": "get_error_code_00080efe",
            "code": "\nundefined4 getErrorCode_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080efe": "get_error_code_00080efe"
            },
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_000816d8": {
            "entrypoint": "0x00080f04",
            "current_name": "get_global_variable_thunk_000816d8",
            "code": "\nundefined4 getGlobalVariable_thunk_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "thunk_FUN_000816d8": "get_global_variable_thunk_000816d8"
            },
            "calling": [
                "FUN_000811e8"
            ],
            "called": [
                "FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f08": {
            "entrypoint": "0x00080f08",
            "current_name": "FUNC_00080f08",
            "code": "\nvoid FUNC_00080f08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f08": "FUNC_00080f08"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000801e0",
                "FUN_000815ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080f0c": {
            "entrypoint": "0x00080f0c",
            "current_name": "handle_parameter_00080f0c",
            "code": "\n\n\nint handleParameter_00080f0c(int deviceId,int parameter)\n\n{\n  int result;\n  uint tempValue;\n  undefined4 tempFlag;\n  uint tempMask;\n  byte lowerNibble;\n  byte combinedFlags;\n  int tempVar1;\n  int tempVar2;\n  \n  result = deviceId;\n  if ((&DAT_00084b50)[deviceId * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[deviceId] & 0xf) == 4) {\n      result = FUN_00080d58(0x400c0000,(&DAT_00084b5d)[deviceId * 0x1c]);\n    }\n    combinedFlags = (&DAT_20070e1c)[deviceId];\n    lowerNibble = combinedFlags & 0xf;\n    if ((lowerNibble < 3) && (combinedFlags != 0)) {\n      if (lowerNibble == 2) {\n        if (parameter == 0) {\n          return result;\n        }\n      }\n      else if (lowerNibble == 1) {\n        if (parameter == 2) {\n          return result;\n        }\n      }\n      else if (lowerNibble == 3) {\n        if (parameter == 1) {\n          return result;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (parameter != 1) {\nLAB_00080f68:\n      if (parameter == 0) {\n        result = deviceId * 0x1c;\n        FUN_00080aa8(*(undefined4 *)(&DAT_00084b4c + result));\n        result = FUN_00080a30(*(undefined4 *)(&DAT_00084b44 + result),3,\n                             *(undefined4 *)(&DAT_00084b48 + result),0);\n        combinedFlags = (&DAT_20070e1c)[deviceId] & 0xf0 | 2;\n      }\n      else {\n        if (parameter != 2) {\n          return result;\n        }\n        result = deviceId * 0x1c;\n        FUN_00080aa8(*(undefined4 *)(&DAT_00084b4c + result));\n        result = FUN_00080a30(*(undefined4 *)(&DAT_00084b44 + result),3,\n                             *(undefined4 *)(&DAT_00084b48 + result),1);\n        combinedFlags = (&DAT_20070e1c)[deviceId] & 0xf0 | 1;\n      }\n      (&DAT_20070e1c)[deviceId] = combinedFlags;\n      return result;\n    }\n    tempVar1 = deviceId * 0x1c;\n    tempVar2 = *(int *)(&DAT_00084b44 + tempVar1);\n    if (combinedFlags >> 4 == 0) {\n      tempFlag = 4;\n    }\n    else {\n      tempFlag = 5;\n    }\n    result = FUN_00080a30(tempVar2,tempFlag,*(undefined4 *)(&DAT_00084b48 + tempVar1),\n                         *(undefined4 *)(&DAT_00084b54 + tempVar1));\n    (&DAT_20070e1c)[deviceId] = (&DAT_20070e1c)[deviceId] & 0xf0 | 3;\n    if (*(int *)(tempVar2 + 0x18) == -1) {\n      tempValue = *(uint *)(&DAT_00084b4c + tempVar1);\n      if (0x2c < tempValue) {\n        return 1;\n      }\n      if (tempValue < 0x20) {\n        tempValue = 1 << (tempValue & 0xff);\n        tempMask = _DAT_400e0618 & tempValue;\n        if (tempMask == tempValue) {\n          _DAT_400e0614 = tempMask;\n        }\n      }\n      else {\n        tempValue = 1 << (tempValue - 0x20 & 0xff);\n        tempMask = _DAT_400e0708 & tempValue;\n        if (tempMask == tempValue) {\n          _DAT_400e0704 = tempMask;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080f0c": "handle_parameter_00080f0c",
                "param_1": "deviceId",
                "param_2": "parameter",
                "iVar1": "result",
                "uVar2": "tempValue",
                "uVar3": "tempFlag",
                "uVar4": "tempMask",
                "bVar5": "lowerNibble",
                "bVar6": "combinedFlags",
                "iVar7": "tempVar1",
                "iVar8": "tempVar2"
            },
            "calling": [
                "FUN_00081014",
                "FUN_000806a0",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080a30",
                "FUN_00080aa8",
                "FUN_00080d58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081014": {
            "entrypoint": "0x00081014",
            "current_name": "update_data_00081014",
            "code": "\nvoid updateData_00081014(int index,int value,undefined4 data)\n\n{\n  int result;\n  undefined4 temp;\n  int address;\n  \n  if ((&DAT_00084b50)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[index] & 0xf) == 5) {\n      FUN_00080f0c(index,1,data,5,index,value,data);\n    }\n    (&DAT_20070e1c)[index] = (&DAT_20070e1c)[index] & 0xf | (byte)(value << 4);\n    address = *(int *)(&DAT_00084b44 + index * 0x1c);\n    temp = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n    result = FUN_00080a94(address,temp);\n    if (result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(address + 100) = temp;\n        return;\n      }\n      *(undefined4 *)(address + 0x60) = temp;\n      return;\n    }\n    FUN_00080a0a(address,temp,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081014": "update_data_00081014",
                "param_1": "index",
                "param_2": "value",
                "param_3": "data",
                "iVar1": "result",
                "uVar2": "temp",
                "iVar3": "address"
            },
            "calling": [
                "FUN_00080250",
                "FUN_0008044c",
                "FUN_00080774"
            ],
            "called": [
                "FUN_00080a0a",
                "FUN_00080f0c",
                "FUN_00080a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810a6": {
            "entrypoint": "0x000810a6",
            "current_name": "handle_function_call_000810a6",
            "code": "\nvoid handleFunctionCall_000810a6(int *arrPtr,int size,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 result;\n  \n  if (size != 0) {\n    result = FUN_00082688(size);\n    (**(code **)(*arrPtr + 4))(arrPtr,size,result,*(code **)(*arrPtr + 4),param4);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810a6": "handle_function_call_000810a6",
                "param_1": "arrPtr",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000810c4",
                "FUN_000810d8",
                "FUN_000810fc",
                "FUN_000810e8"
            ],
            "called": [
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810c4": {
            "entrypoint": "0x000810c4",
            "current_name": "execute_initialization_000810c4",
            "code": "\nvoid executeInitialization_000810c4(void)\n\n{\n  FUN_000810a6();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810c4": "execute_initialization_000810c4"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810cc": {
            "entrypoint": "0x000810cc",
            "current_name": "execute_function_000810cc",
            "code": "\nvoid executeFunction_000810cc(undefined4 *functionPointer)\n\n{\n  (**(code **)*functionPointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810cc": "execute_function_000810cc",
                "param_1": "functionPointer"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810d8": {
            "entrypoint": "0x000810d8",
            "current_name": "execute_function_000810d8",
            "code": "\nvoid execute_function_000810d8(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  FUN_000810a6(param1,&DAT_00085635,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810d8": "execute_function_000810d8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_0008117a",
                "FUN_000810e8"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810e8": {
            "entrypoint": "0x000810e8",
            "current_name": "calculate_sum_000810e8",
            "code": "\nint calculateSum_000810e8(undefined4 input)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = FUN_000810a6();\n  result2 = FUN_000810d8(input);\n  return result2 + result1;\n}\n\n",
            "renaming": {
                "FUN_000810e8": "calculate_sum_000810e8",
                "param_1": "input",
                "iVar1": "result1",
                "iVar2": "result2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810a6",
                "FUN_000810d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810fc": {
            "entrypoint": "0x000810fc",
            "current_name": "convert_number_to_string_000810fc",
            "code": "\nvoid convertNumberToString_000810fc(undefined4 inputValue,uint number,uint base)\n\n{\n  char *result;\n  uint quotient;\n  char *currentChar;\n  char digitChar;\n  uint remainder;\n  char charArray [5];\n  \n  charArray[1] = 0;\n  if (base < 2) {\n    base = 10;\n  }\n  result = charArray;\n  do {\n    currentChar = result;\n    quotient = number / base;\n    remainder = number - base * quotient & 0xff;\n    digitChar = (char)remainder;\n    if (remainder < 10) {\n      digitChar = digitChar + '0';\n    }\n    else {\n      digitChar = digitChar + '7';\n    }\n    *currentChar = digitChar;\n    number = quotient;\n    result = currentChar + -1;\n  } while (quotient != 0);\n  FUN_000810a6(inputValue,currentChar);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810fc": "convert_number_to_string_000810fc",
                "param_1": "inputValue",
                "param_2": "number",
                "param_3": "base",
                "pcVar1": "result",
                "uVar2": "quotient",
                "pcVar3": "currentChar",
                "cVar4": "digitChar",
                "uVar5": "remainder",
                "local_15": "charArray"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008113a": {
            "entrypoint": "0x0008113a",
            "current_name": "convert_number_to_base_0008113a",
            "code": "\nint convertNumberToBase_0008113a(undefined4 *functionPointer,uint number,uint base,undefined4 additionalParam)\n\n{\n  int result;\n  int negativeFlag;\n  \n  if (base == 0) {\n    result = (**(code **)*functionPointer)(functionPointer,number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)number < 0) {\n      result = FUN_000810cc(functionPointer,0x2d);\n      negativeFlag = FUN_000810fc(functionPointer,-number,10);\n      return negativeFlag + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = FUN_000810fc(functionPointer,number,base,additionalParam);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008113a": "convert_number_to_base_0008113a",
                "param_1": "functionPointer",
                "param_2": "number",
                "param_3": "base",
                "param_4": "additionalParam",
                "iVar1": "result",
                "iVar2": "negativeFlag"
            },
            "calling": [
                "thunk_FUN_0008113a",
                "FUN_0008117a"
            ],
            "called": [
                "FUN_000810cc",
                "FUN_000810fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0008113a": {
            "entrypoint": "0x00081176",
            "current_name": "process_input_thunk_0008113a",
            "code": "\nint process_input_thunk_0008113a(undefined4 *input_data,uint value,uint base,undefined4 unused_param)\n\n{\n  int result;\n  int negative_value;\n  \n  if (base == 0) {\n    result = (**(code **)*input_data)(input_data,value & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)value < 0) {\n      result = FUN_000810cc(input_data,0x2d);\n      negative_value = FUN_000810fc(input_data,-value,10);\n      return negative_value + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = FUN_000810fc(input_data,value,base,unused_param);\n  return result;\n}\n\n",
            "renaming": {
                "thunk_FUN_0008113a": "process_input_thunk_0008113a",
                "param_1": "input_data",
                "param_2": "value",
                "param_3": "base",
                "param_4": "unused_param",
                "iVar1": "result",
                "iVar2": "negative_value"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008117a": {
            "entrypoint": "0x0008117a",
            "current_name": "calculate_sum_0008117a",
            "code": "\nint calculateSum_0008117a(undefined4 input)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = FUN_0008113a();\n  result2 = FUN_000810d8(input);\n  return result2 + result1;\n}\n\n",
            "renaming": {
                "FUN_0008117a": "calculate_sum_0008117a",
                "param_1": "input",
                "iVar1": "result1",
                "iVar2": "result2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081190": {
            "entrypoint": "0x00081190",
            "current_name": "execute_if_relocation_index_is_zero_00081190",
            "code": "\nvoid executeIfRelocationIndexIsZero_00081190(void)\n\n{\n  if ((relArray[6].relocationInfo != 0xffffffff) &&\n     (relArray[6].relocationInfo = relArray[6].relocationInfo - 1,\n     relArray[6].relocationInfo == 0)) {\n    (*(code *)((int)&relArray[0].relocationOffset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081190": "execute_if_relocation_index_is_zero_00081190",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "Elf32_Rel_ARRAY_20070000[6].r_info": "relArray[6].relocationInfo",
                "Elf32_Rel_ARRAY_20070000[0].r_offset": "relArray[0].relocationOffset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b0": {
            "entrypoint": "0x000811b0",
            "current_name": "initialize_memory_000811b0",
            "code": "\nint initializeMemory_000811b0(int memoryAddress)\n\n{\n  FUN_00081f00(memoryAddress,0,0x80);\n  *(undefined4 *)(memoryAddress + 0x80) = 0;\n  *(undefined4 *)(memoryAddress + 0x84) = 0;\n  return memoryAddress;\n}\n\n",
            "renaming": {
                "FUN_000811b0": "initialize_memory_000811b0",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ca": {
            "entrypoint": "0x000811ca",
            "current_name": "update_value_and_index_000811ca",
            "code": "\nvoid updateValueAndIndex_000811ca(int baseAddress,undefined newValue)\n\n{\n  uint incrementedIndex;\n  \n  incrementedIndex = *(int *)(baseAddress + 0x80) + 1U & 0x7f;\n  if (incrementedIndex != *(uint *)(baseAddress + 0x84)) {\n    *(undefined *)(baseAddress + *(int *)(baseAddress + 0x80)) = newValue;\n    *(uint *)(baseAddress + 0x80) = incrementedIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000811ca": "update_value_and_index_000811ca",
                "param_1": "baseAddress",
                "param_2": "newValue",
                "uVar1": "incrementedIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811e8": {
            "entrypoint": "0x000811e8",
            "current_name": "process_data_000811e8",
            "code": "\nint process_data_000811e8(int *data_array)\n\n{\n  int result;\n  \n  result = thunk_FUN_000816d8();\n  data_array[3] = result;\n  do {\n    result = (**(code **)(*data_array + 0xc))(data_array);\n    if (-1 < result) {\n      return result;\n    }\n    result = thunk_FUN_000816d8();\n  } while ((uint)(result - data_array[3]) < (uint)data_array[2]);\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_000811e8": "process_data_000811e8",
                "param_1": "data_array",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "thunk_FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081214": {
            "entrypoint": "0x00081214",
            "current_name": "process_data_00081214",
            "code": "\nvoid processData_00081214(undefined4 arg1,undefined4 arg2,uint targetValue)\n\n{\n  uint value;\n  \n  FUN_000814f6(arg1,&DAT_00085637);\n  while ((value = FUN_000811e8(arg2), -1 < (int)value && (value != targetValue))) {\n    FUN_0008159e(arg1,value & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081214": "process_data_00081214",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "targetValue",
                "uVar1": "value"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008159e",
                "FUN_000811e8",
                "FUN_000814f6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081248": {
            "entrypoint": "0x00081248",
            "current_name": "calculate_difference_00081248",
            "code": "\nuint calculateDifference_00081248(int inputValue)\n\n{\n  return *(int *)(*(int *)(inputValue + 0x10) + 0x80) - *(int *)(*(int *)(inputValue + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_00081248": "calculate_difference_00081248",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00080250",
                "FUN_00080970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081276": {
            "entrypoint": "0x00081276",
            "current_name": "read_byte_from_memory_00081276",
            "code": "\nuint readByteFromMemory_00081276(int memoryAddress)\n\n{\n  byte byteValue;\n  int dataBlock;\n  \n  dataBlock = *(int *)(memoryAddress + 0x10);\n  if (*(int *)(dataBlock + 0x80) != *(int *)(dataBlock + 0x84)) {\n    byteValue = *(byte *)(dataBlock + *(int *)(dataBlock + 0x84));\n    *(uint *)(dataBlock + 0x84) = *(int *)(dataBlock + 0x84) + 1U & 0x7f;\n    return (uint)byteValue;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081276": "read_byte_from_memory_00081276",
                "param_1": "memoryAddress",
                "iVar2": "dataBlock",
                "bVar1": "byteValue"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000812b8": {
            "entrypoint": "0x000812b8",
            "current_name": "update_data_000812b8",
            "code": "\nundefined4 updateData_000812b8(int dataPtr,undefined4 newValue)\n\n{\n  int ptr1;\n  uint updatedValue;\n  \n  ptr1 = *(int *)(dataPtr + 0x14);\n  if ((*(int *)(*(int *)(dataPtr + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(ptr1 + 0x84) == *(int *)(ptr1 + 0x80))) {\n    *(undefined4 *)(*(int *)(dataPtr + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    updatedValue = *(int *)(ptr1 + 0x80) + 1U & 0x8000007f;\n    if ((int)updatedValue < 0) {\n      updatedValue = (updatedValue - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(ptr1 + 0x84) == updatedValue);\n    *(char *)(ptr1 + *(int *)(ptr1 + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataPtr + 0x14) + 0x80) = updatedValue;\n    *(undefined4 *)(*(int *)(dataPtr + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000812b8": "update_data_000812b8",
                "param_1": "dataPtr",
                "param_2": "newValue",
                "iVar1": "ptr1",
                "uVar2": "updatedValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081348": {
            "entrypoint": "0x00081348",
            "current_name": "initialize_function_data_00081348",
            "code": "\nvoid initializeFunctionData_00081348(undefined4 *functionData,undefined4 value1,undefined value2,undefined4 value3,\n                 undefined4 value4,undefined4 value5)\n\n{\n  data1 = 0;\n  data2 = 1000;\n  data5 = value1;\n  *functionData = &PTR_FUN_000812b8_1_00085650;\n  *(undefined *)(functionData + 7) = value2;\n  data3 = value4;\n  data6 = value3;\n  data4 = value5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081348": "initialize_function_data_00081348",
                "param_1": "functionData",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4",
                "param_6": "value5",
                "param_1[1]": "data1",
                "param_1[2]": "data2",
                "param_1[4]": "data3",
                "param_1[5]": "data4",
                "param_1[6]": "data5",
                "param_1[8]": "data6"
            },
            "calling": [
                "FUN_00081438",
                "FUN_0008089c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813dc": {
            "entrypoint": "0x000813dc",
            "current_name": "initialize_function_000813dc",
            "code": "\nvoid initializeFunction_000813dc(int param1,uint param2)\n\n{\n  int variable1;\n  undefined4 *pointerVariable;\n  \n  FUN_00080aa8(*(undefined4 *)(param1 + 0x20));\n  pointerVariable = *(undefined4 **)(param1 + 0x18);\n  pointerVariable[0x48] = 0x202;\n  *pointerVariable = 0xac;\n  pointerVariable[1] = 0x800;\n  pointerVariable[8] = ElfRelArray[6].relativeOffset / param2 >> 4;\n  pointerVariable[3] = 0xffffffff;\n  pointerVariable[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(param1 + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(param1 + 0x1c) & 0x1f);\n  variable1 = *(int *)(param1 + 0x10);\n  *(undefined4 *)(variable1 + 0x84) = 0;\n  *(undefined4 *)(variable1 + 0x80) = 0;\n  variable1 = *(int *)(param1 + 0x14);\n  *(undefined4 *)(variable1 + 0x84) = 0;\n  *(undefined4 *)(variable1 + 0x80) = 0;\n  *pointerVariable = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813dc": "initialize_function_000813dc",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "variable1",
                "puVar2": "pointerVariable",
                "Elf32_Rel_ARRAY_20070000": "ElfRelArray",
                "r_offset": "relativeOffset"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080aa8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081438": {
            "entrypoint": "0x00081438",
            "current_name": "initialize_function_00081438",
            "code": "\nundefined4 * initializeFunction_00081438(undefined4 *outputPointer,undefined4 inputData)\n\n{\n  FUN_00081348();\n  *outputPointer = &PTR_FUN_000812b8_1_00085680;\n  outputPointer[9] = inputData;\n  return outputPointer;\n}\n\n",
            "renaming": {
                "FUN_00081438": "initialize_function_00081438",
                "param_1": "outputPointer",
                "param_2": "inputData"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008145c": {
            "entrypoint": "0x0008145c",
            "current_name": "calculate_interpolation_0008145c",
            "code": "\nint calculateInterpolation_0008145c(int startValue,int startRange,int endRange,int startInterpolation,int endInterpolation)\n\n{\n  return (uint)((startValue - startRange) * (endInterpolation - startInterpolation)) / (uint)(endRange - startRange) + startInterpolation;\n}\n\n",
            "renaming": {
                "FUN_0008145c": "calculate_interpolation_0008145c",
                "param_1": "startValue",
                "param_2": "startRange",
                "param_3": "endRange",
                "param_4": "startInterpolation",
                "param_5": "endInterpolation"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081472": {
            "entrypoint": "0x00081472",
            "current_name": "initialize_pointer_00081472",
            "code": "\nundefined4 * initializePointer_00081472(undefined4 *pointer)\n\n{\n  FUN_00081800(*pointer);\n  return pointer;\n}\n\n",
            "renaming": {
                "FUN_00081472": "initialize_pointer_00081472",
                "param_1": "pointer"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081480": {
            "entrypoint": "0x00081480",
            "current_name": "reset_and_clear_memory_00081480",
            "code": "\nvoid resetAndClearMemory_00081480(int *array)\n\n{\n  if (*array != 0) {\n    FUN_00081800();\n  }\n  *array = 0;\n  array[2] = 0;\n  array[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081480": "reset_and_clear_memory_00081480",
                "param_1": "array",
                "param_1[1]": "array[1]",
                "param_1[2]": "array[2]"
            },
            "calling": [
                "FUN_000814d0"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081496": {
            "entrypoint": "0x00081496",
            "current_name": "check_and_update_array_00081496",
            "code": "\nint checkAndUpdateArray_00081496(int *array,int length,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  \n  result = FUN_00081f9c(*array,length + 1,param3,param4,param4);\n  if (result != 0) {\n    *array = result;\n    array[1] = length;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081496": "check_and_update_array_00081496",
                "param_1": "array",
                "param_2": "length",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000814ae"
            ],
            "called": [
                "FUN_00081f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814ae": {
            "entrypoint": "0x000814ae",
            "current_name": "validate_and_update_000814ae",
            "code": "\nundefined4 validateAndUpdate_000814ae(int *array,uint limit)\n\n{\n  int result;\n  \n  if ((*array == 0) || ((uint)array[1] < limit)) {\n    result = FUN_00081496(array);\n    if (result == 0) {\n      return 0;\n    }\n    if (array[2] == 0) {\n      *(undefined *)*array = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000814ae": "validate_and_update_000814ae",
                "param_1": "array",
                "param_2": "limit",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "called": [
                "FUN_00081496"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814d0": {
            "entrypoint": "0x000814d0",
            "current_name": "process_data_000814d0",
            "code": "\nundefined4 * processData_000814d0(undefined4 *data,undefined4 value,undefined4 param)\n\n{\n  int result;\n  \n  result = FUN_000814ae(data,param);\n  if (result == 0) {\n    FUN_00081480(data);\n  }\n  else {\n    data[2] = param;\n    FUN_000825cc(*data,value);\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_000814d0": "process_data_000814d0",
                "param_1": "data",
                "param_2": "value",
                "param_3": "param",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000814f6"
            ],
            "called": [
                "FUN_00081480",
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814f6": {
            "entrypoint": "0x000814f6",
            "current_name": "initialize_and_process_data_000814f6",
            "code": "\nundefined4 * initializeAndProcessData_000814f6(undefined4 *dataArray,int inputValue)\n\n{\n  undefined4 result;\n  \n  *dataArray = 0;\n  dataElement2 = 0;\n  dataElement3 = 0;\n  if (inputValue != 0) {\n    result = FUN_00082688(inputValue);\n    FUN_000814d0(dataArray,inputValue,result);\n  }\n  return dataArray;\n}\n\n",
            "renaming": {
                "FUN_000814f6": "initialize_and_process_data_000814f6",
                "param_1": "dataArray",
                "param_2": "inputValue",
                "uVar1": "result",
                "param_1[1]": "dataElement2",
                "param_1[2]": "dataElement3"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_000814d0",
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008151c": {
            "entrypoint": "0x0008151c",
            "current_name": "update_params_0008151c",
            "code": "\nvoid updateParams_0008151c(int *destParams,int *srcParams)\n\n{\n  if (*destParams != 0) {\n    if ((*srcParams != 0) && ((uint)srcParams[2] <= (uint)destParams[1])) {\n      FUN_000825cc();\n      destParams[2] = srcParams[2];\n      goto skipAction;\n    }\n    FUN_00081800();\n  }\n  *destParams = *srcParams;\n  destParams[1] = srcParams[1];\n  destParams[2] = srcParams[2];\n  *srcParams = 0;\n  srcParams[1] = 0;\nskipAction:\n  srcParams[2] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008151c": "update_params_0008151c",
                "param_1": "destParams",
                "param_2": "srcParams",
                "LAB_00081558": "skipAction"
            },
            "calling": [
                "FUN_00081560"
            ],
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081560": {
            "entrypoint": "0x00081560",
            "current_name": "check_parameters_00081560",
            "code": "\nint check_parameters_00081560(int input_1,int input_2)\n\n{\n  if (input_1 != input_2) {\n    FUN_0008151c();\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_00081560": "check_parameters_00081560",
                "param_1": "input_1",
                "param_2": "input_2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008151c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081570": {
            "entrypoint": "0x00081570",
            "current_name": "validate_and_update_data_00081570",
            "code": "\nundefined4 validate_and_update_data_00081570(int *data_array,int array_length,int offset)\n\n{\n  int result;\n  int third_element_offset;\n  \n  third_element_offset = data_array[2];\n  if (array_length == 0) {\n    return 0;\n  }\n  if (offset != 0) {\n    result = FUN_000814ae(data_array,third_element_offset + offset);\n    if (result == 0) {\n      return 0;\n    }\n    FUN_000825cc(*data_array + data_array[2],array_length);\n    data_array[2] = third_element_offset + offset;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081570": "validate_and_update_data_00081570",
                "param_1": "data_array",
                "param_2": "array_length",
                "param_3": "offset",
                "iVar1": "result",
                "iVar2": "third_element_offset"
            },
            "calling": [
                "FUN_0008159e"
            ],
            "called": [
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008159e": {
            "entrypoint": "0x0008159e",
            "current_name": "process_data_0008159e",
            "code": "\nvoid processData_0008159e(undefined4 inputParam,undefined4 unusedParam,undefined4 outputParam)\n\n{\n  undefined4 tempVar;\n  undefined4 outputVar;\n  \n  outputVar = outputParam;\n  FUN_00081570(inputParam,&tempVar,1,0,inputParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008159e": "process_data_0008159e",
                "param_1": "inputParam",
                "param_2": "unusedParam",
                "param_3": "outputParam",
                "local_c": "tempVar",
                "uStack_8": "outputVar"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_00081570"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815b8": {
            "entrypoint": "0x000815b8",
            "current_name": "check_byte_value_000815b8",
            "code": "\nint checkByteValue_000815b8(byte **inputArray,byte *inputByte)\n\n{\n  uint inputByteValue;\n  int result;\n  \n  if (inputArray[2] == (byte *)0x0) {\n    if (inputByte == (byte *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    if (inputByte != (byte *)0x0) {\n      inputByteValue = FUN_00082390(*inputArray);\n      goto LAB_000815d4;\n    }\n    inputByte = *inputArray;\n  }\n  inputByteValue = (uint)*inputByte;\nLAB_000815d4:\n  result = 1 - inputByteValue;\n  if (1 < inputByteValue) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000815b8": "check_byte_value_000815b8",
                "param_1": "inputArray",
                "param_2": "inputByte",
                "uVar1": "inputByteValue",
                "iVar2": "result"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00082390"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815de": {
            "entrypoint": "0x000815de",
            "current_name": "parse_integer_000815de",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000827e8) */\n/* WARNING: Removing unreachable block (ram,0x000827a8) */\n/* WARNING: Removing unreachable block (ram,0x000827a0) */\n/* WARNING: Removing unreachable block (ram,0x000827da) */\n/* WARNING: Removing unreachable block (ram,0x000827ec) */\n/* WARNING: Removing unreachable block (ram,0x000827e4) */\n/* WARNING: Removing unreachable block (ram,0x000827a4) */\n/* WARNING: Removing unreachable block (ram,0x0008278a) */\n/* WARNING: Removing unreachable block (ram,0x000827c8) */\n/* WARNING: Removing unreachable block (ram,0x0008278c) */\n\nuint parseInteger_000815de(byte **input)\n\n{\n  byte currentFlag;\n  byte negateFlag;\n  uint result;\n  byte *currentChar;\n  uint tempChar;\n  byte *nextChar;\n  int digitValue;\n  int isDigit;\n  uint maxValue;\n  uint minValue;\n  \n  currentChar = *input;\n  if (*input == (byte *)0x0) {\n    return 0;\n  }\n  do {\n    nextChar = currentChar;\n    currentChar = nextChar + 1;\n    tempChar = (uint)*nextChar;\n    currentFlag = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + tempChar + 1);\n    negateFlag = currentFlag & 8;\n  } while ((currentFlag & 8) != 0);\n  if (tempChar == 0x2d) {\n    currentChar = nextChar + 2;\n    tempChar = (uint)nextChar[1];\n    negateFlag = 1;\n  }\n  else if (tempChar == 0x2b) {\n    tempChar = (uint)nextChar[1];\n    currentChar = nextChar + 2;\n  }\n  if (negateFlag == 0) {\n    minValue = 0x7fffffff;\n  }\n  else {\n    minValue = 0x80000000;\n  }\n  maxValue = minValue / 10;\n  isDigit = 0;\n  result = 0;\n  do {\n    currentFlag = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + tempChar + 1);\n    if ((currentFlag & 4) == 0) {\n      if ((currentFlag & 3) == 0) {\nLAB_0008277e:\n        if (isDigit == -1) {\n          if (negateFlag == 0) {\n            result = 0x7fffffff;\n          }\n          else {\n            result = 0x80000000;\n          }\n          *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x22;\n        }\n        else if (negateFlag != 0) {\n          result = -result;\n        }\n        return result;\n      }\n      if ((currentFlag & 3) == 1) {\n        digitValue = 0x37;\n      }\n      else {\n        digitValue = 0x57;\n      }\n      digitValue = tempChar - digitValue;\n    }\n    else {\n      digitValue = tempChar - 0x30;\n    }\n    if (9 < digitValue) goto LAB_0008277e;\n    if (isDigit != -1) {\n      if ((maxValue <= result && result != maxValue) || ((result == maxValue && ((int)(minValue % 10) < digitValue))))\n      {\n        isDigit = -1;\n      }\n      else {\n        result = result * 10 + digitValue;\n        isDigit = 1;\n      }\n    }\n    tempChar = (uint)*currentChar;\n    currentChar = currentChar + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815de": "parse_integer_000815de",
                "param_1": "input",
                "bVar1": "currentFlag",
                "bVar2": "negateFlag",
                "uVar3": "result",
                "pbVar4": "currentChar",
                "uVar5": "tempChar",
                "pbVar6": "nextChar",
                "iVar7": "digitValue",
                "iVar8": "isDigit",
                "uVar9": "maxValue",
                "uVar10": "minValue"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815e8": {
            "entrypoint": "0x000815e8",
            "current_name": "FUNC_000815e8",
            "code": "\nvoid FUNC_000815e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000815e8": "FUNC_000815e8"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000815ec": {
            "entrypoint": "0x000815ec",
            "current_name": "execute_continuous_processing_000815ec",
            "code": "\nvoid executeContinuousProcessing_000815ec(void)\n\n{\n  FUN_00081618();\n  FUN_00080774();\n  FUNC_000815e8();\n  FUNC_00080f08(1);\n  FUN_000801e0();\n  do {\n    FUN_00080250();\n    FUN_00080970();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815ec": "execute_continuous_processing_000815ec"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00080250",
                "FUN_00080970",
                "FUN_000801e0",
                "FUN_000815e8",
                "FUN_00081618",
                "FUN_00080f08",
                "FUN_00080774"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081618": {
            "entrypoint": "0x00081618",
            "current_name": "initialize_data_00081618",
            "code": "\n\n\nvoid initializeData_00081618(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081618": "initialize_data_00081618"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081624": {
            "entrypoint": "0x00081624",
            "current_name": "calculate_result_00081624",
            "code": "\nint calculateResult_00081624(int index,int flag,int multiplier,undefined4 input)\n\n{\n  int result;\n  undefined4 offset;\n  \n  offset = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n  if (flag == 0) {\n    offset = 0;\n  }\n  result = FUN_00081684(*(int *)(&DAT_00084b44 + index * 0x1c) + 0x3c,\n                       *(undefined4 *)(&DAT_00084b48 + index * 0x1c),offset,\n                       ((REL_ARRAY[6].r_offset / 1000000) * multiplier) / 0x12,input);\n  if (result != 0) {\n    result = (int)((ulonglong)(result * 18000 + 16000) /\n                 ((ulonglong)REL_ARRAY[6].r_offset / 1000));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081624": "calculate_result_00081624",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "multiplier",
                "param_4": "input",
                "iVar1": "result",
                "uVar2": "offset",
                "Elf32_Rel_ARRAY_20070000": "REL_ARRAY"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081684"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081684": {
            "entrypoint": "0x00081684",
            "current_name": "check_pattern_00081684",
            "code": "\nint checkPattern_00081684(uint *pattern,uint mask,uint expected,int count)\n\n{\n  int matchCount;\n  \n  do {\n    if ((*pattern & mask) != expected) {\n      do {\n        if ((*pattern & mask) == expected) {\n          matchCount = 0;\n          do {\n            if ((*pattern & mask) != expected) {\n              return matchCount;\n            }\n            matchCount = matchCount + 1;\n          } while (count != matchCount);\n          return 0;\n        }\n        count = count + -1;\n      } while (count != 0);\n      return 0;\n    }\n    count = count + -1;\n  } while (count != 0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081684": "check_pattern_00081684",
                "param_1": "pattern",
                "param_2": "mask",
                "param_3": "expected",
                "param_4": "count",
                "iVar1": "matchCount"
            },
            "calling": [
                "FUN_00081624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d8": {
            "entrypoint": "0x000816d8",
            "current_name": "get_global_data_000816d8",
            "code": "\nundefined4 get_global_data_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "FUN_000816d8": "get_global_data_000816d8"
            },
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816ec": {
            "entrypoint": "0x000816ec",
            "current_name": "update_relocation_entry_000816ec",
            "code": "\nvoid updateRelocationEntry_000816ec(dword address,dword data,dword offset)\n\n{\n  dword *relocEntry;\n  uint index;\n  uint bitMask;\n  code *handleError;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  relocEntry = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)index) {\n    relocEntry = (dword *)FUN_000817f0(400);\n    if (relocEntry == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*handleError)(0xffffffff);\n      return;\n    }\n    *relocEntry = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    relocEntry[1] = 0;\n    index = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)relocEntry;\n    relocEntry[0x62] = 0;\n    relocEntry[99] = 0;\n  }\n  bitMask = 1 << (index & 0xff);\n  relocEntry[index + 0x22] = address;\n  relocEntry[0x62] = relocEntry[0x62] | bitMask;\n  relocEntry[index + 0x42] = offset;\n  relocEntry[99] = bitMask | relocEntry[99];\n  relocEntry[1] = index + 1;\n  relocEntry[index + 2] = data;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*handleError)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816ec": "update_relocation_entry_000816ec",
                "param_1": "address",
                "param_2": "data",
                "param_3": "offset",
                "pdVar1": "relocEntry",
                "uVar2": "index",
                "uVar3": "bitMask",
                "UNRECOVERED_JUMPTABLE_00": "handleError"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816f8": {
            "entrypoint": "0x000816f8",
            "current_name": "print_assertion_failure_000816f8",
            "code": "\nvoid printAssertionFailure_000816f8(undefined4 sourceFile,undefined4 lineNumber,char *assertionExpression,undefined4 functionName)\n\n{\n  undefined4 relOffset;\n  undefined4 temp;\n  char *extraText;\n  undefined8 time;\n  \n  relOffset = *(undefined4 *)(array[140].offset + 0xc);\n  if (assertionExpression == (char *)0x0) goto LAB_0008171c;\n  temp = functionName;\n  extraText = \", function: \";\n  do {\n    functionName = sourceFile;\n    FUN_00081750(relOffset,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",temp,sourceFile,lineNumber,\n                 extraText,assertionExpression);\n    time = FUN_000836ec();\n    lineNumber = (undefined4)((ulonglong)time >> 0x20);\n    relOffset = (undefined4)time;\nLAB_0008171c:\n    assertionExpression = \"\";\n    temp = functionName;\n    extraText = assertionExpression;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816f8": "print_assertion_failure_000816f8",
                "param_1": "sourceFile",
                "param_2": "lineNumber",
                "param_3": "assertionExpression",
                "param_4": "functionName",
                "uVar1": "relOffset",
                "uVar2": "temp",
                "pcVar3": "extraText",
                "uVar4": "time",
                "Elf32_Rel_ARRAY_20070000": "array",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_000803fc",
                "FUN_00080b2c"
            ],
            "called": [
                "FUN_00081750",
                "FUN_000836ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081750": {
            "entrypoint": "0x00081750",
            "current_name": "apply_relocation_00081750",
            "code": "\nvoid applyRelocation_00081750(undefined4 targetAddress,undefined4 param_2,undefined4 relocationOffset,undefined4 param_4)\n\n{\n  undefined4 relocatedValue;\n  undefined4 unusedValue;\n  \n  relocatedValue = relocationOffset;\n  unusedValue = param_4;\n  FUN_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,targetAddress,param_2,&relocatedValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081750": "apply_relocation_00081750",
                "param_1": "targetAddress",
                "param_3": "relocationOffset",
                "uStack_8": "relocatedValue",
                "uStack_4": "unusedValue"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081778": {
            "entrypoint": "0x00081778",
            "current_name": "execute_function_set_00081778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081784) */\n/* WARNING: Removing unreachable block (ram,0x00081788) */\n/* WARNING: Removing unreachable block (ram,0x000817b4) */\n\nvoid executeFunctionSet_00081778(void)\n\n{\n  int counter;\n  code **functionArray;\n  \n  FUNC_00085844();\n  functionArray = (code **)0x8584c;\n  counter = 0;\n  do {\n    counter = counter + 1;\n    functionArray = functionArray + 1;\n    (**functionArray)();\n  } while (counter != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081778": "execute_function_set_00081778",
                "iVar1": "counter",
                "ppcVar2": "functionArray"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [
                "FUN_00080118",
                "FUN_00085844",
                "FUN_000836d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817c8": {
            "entrypoint": "0x000817c8",
            "current_name": "execute_relocation_000817c8",
            "code": "\nvoid executeRelocation_000817c8(undefined4 sourceAddress,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 param2Copy;\n  undefined4 param3Copy;\n  undefined4 param4Copy;\n  \n  param2Copy = param2;\n  param3Copy = param3;\n  param4Copy = param4;\n  FUN_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,\n               *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 8),sourceAddress,&param2Copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817c8": "execute_relocation_000817c8",
                "param_1": "sourceAddress",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uStack_c": "param2Copy",
                "uStack_8": "param3Copy",
                "uStack_4": "param4Copy"
            },
            "calling": [
                "FUN_00080eec"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817f0": {
            "entrypoint": "0x000817f0",
            "current_name": "execute_relocation_000817f0",
            "code": "\nvoid executeRelocation_000817f0(undefined4 data)\n\n{\n  FUN_00081810(relocationArray[140].r_offset,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817f0": "execute_relocation_000817f0",
                "param_1": "data",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081800": {
            "entrypoint": "0x00081800",
            "current_name": "load_data_and_call_function_00081800",
            "code": "\nvoid loadDataAndCallFunction_00081800(undefined4 data)\n\n{\n  FUN_00083b10(relocationTable[140].offset,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081800": "load_data_and_call_function_00081800",
                "param_1": "data",
                "Elf32_Rel_ARRAY_20070000": "relocationTable",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_0008151c",
                "FUN_00081472",
                "FUN_00081480"
            ],
            "called": [
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081810": {
            "entrypoint": "0x00081810",
            "current_name": "allocate_memory_block_00081810",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_block_00081810(undefined4 *output_ptr,uint size)\n\n{\n  dword info_offset;\n  int temp_var1;\n  uint temp_var2;\n  uint temp_var3;\n  int temp_var4;\n  uint temp_var5;\n  dword temp_var6;\n  uint temp_var7;\n  int temp_var8;\n  undefined *temp_ptr1;\n  dword temp_var9;\n  dword temp_var10;\n  int temp_var13;\n  dword *pinfo_offset4;\n  uint block_size;\n  undefined *temp_ptr2;\n  dword *temp_ptr3;\n  uint temp_var12;\n  \n  if (size + 0xb < 0x17) {\n    block_size = 0x10;\n    if (0x10 < size) goto LAB_00081876;\n  }\n  else {\n    block_size = size + 0xb & 0xfffffff8;\n    if (((int)block_size < 0) || (block_size < size)) {\nLAB_00081876:\n      *output_ptr = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00081f94(output_ptr);\n  info_offset = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (block_size < 0x1f8) {\n    temp_var13 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + block_size);\n    if ((temp_var13 != block_size + 0x20070464) ||\n       (temp_var1 = temp_var13 + 8, temp_var13 = *(int *)(temp_var13 + 0x14), temp_var1 != temp_var13)) {\n      temp_var4 = *(int *)(temp_var13 + 0xc);\n      temp_var8 = (*(uint *)(temp_var13 + 4) & 0xfffffffc) + temp_var13;\n      block_size = *(uint *)(temp_var8 + 4);\n      temp_var1 = *(int *)(temp_var13 + 8);\n      *(int *)(temp_var1 + 0xc) = temp_var4;\n      *(int *)(temp_var4 + 8) = temp_var1;\n      *(uint *)(temp_var8 + 4) = block_size | 1;\n      FUNC_00081f98(output_ptr);\n      return (int *)(temp_var13 + 8);\n    }\n    temp_var12 = (block_size >> 3) + 2;\n  }\n  else {\n    temp_var12 = block_size >> 9;\n    if (temp_var12 == 0) {\n      temp_var1 = 0x7e;\n      temp_var13 = 0x3f;\n    }\n    else if (temp_var12 < 5) {\n      temp_var13 = (block_size >> 6) + 0x38;\n      temp_var1 = temp_var13 * 2;\n    }\n    else if (temp_var12 < 0x15) {\n      temp_var13 = temp_var12 + 0x5b;\n      temp_var1 = temp_var13 * 2;\n    }\n    else if (temp_var12 < 0x55) {\n      temp_var13 = (block_size >> 0xc) + 0x6e;\n      temp_var1 = temp_var13 * 2;\n    }\n    else if (temp_var12 < 0x155) {\n      temp_var13 = (block_size >> 0xf) + 0x77;\n      temp_var1 = temp_var13 * 2;\n    }\n    else if (temp_var12 < 0x555) {\n      temp_var13 = (block_size >> 0x12) + 0x7c;\n      temp_var1 = temp_var13 * 2;\n    }\n    else {\n      temp_var1 = 0xfc;\n      temp_var13 = 0x7e;\n    }\n    for (temp_var6 = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[temp_var1]; temp_var1 * 4 + 0x20070464U != temp_var6\n        ; temp_var6 = *(dword *)(temp_var6 + 0xc)) {\n      temp_var12 = *(uint *)(temp_var6 + 4) & 0xfffffffc;\n      temp_var4 = temp_var12 - block_size;\n      if (0xf < temp_var4) {\n        temp_var13 = temp_var13 + -1;\n        break;\n      }\n      if (-1 < temp_var4) {\n        temp_var1 = temp_var12 + temp_var6;\n        block_size = *(uint *)(temp_var1 + 4);\n        temp_var4 = *(int *)(temp_var6 + 0xc);\n        temp_var13 = *(int *)(temp_var6 + 8);\n        *(int *)(temp_var13 + 0xc) = temp_var4;\n        *(int *)(temp_var4 + 8) = temp_var13;\n        *(uint *)(temp_var1 + 4) = block_size | 1;\n        FUNC_00081f98(output_ptr);\n        return (int *)(temp_var6 + 8);\n      }\n    }\n    temp_var12 = temp_var13 + 1;\n  }\n  temp_var6 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    temp_var2 = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    temp_var3 = temp_var2 & 0xfffffffc;\n    temp_var5 = temp_var3 - block_size;\n    if (0xf < (int)temp_var5) {\n      temp_var6 = block_size + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = block_size | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = temp_var6;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = temp_var6;\n      *(undefined4 *)(temp_var6 + 0xc) = 0x2007046c;\n      *(undefined4 *)(temp_var6 + 8) = 0x2007046c;\n      *(uint *)(temp_var6 + 4) = temp_var5 | 1;\n      *(uint *)(temp_var6 + temp_var5) = temp_var5;\n      FUNC_00081f98(output_ptr);\n      return (int *)(info_offset + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)temp_var5) {\n      *(uint *)(temp_var3 + info_offset + 4) = *(uint *)(temp_var3 + info_offset + 4) | 1;\n      FUNC_00081f98(output_ptr);\n      return (int *)(info_offset + 8);\n    }\n    if (temp_var3 < 0x200) {\n      temp_var3 = temp_var2 & 0xfffffff8;\n      temp_var13 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp_var3);\n      temp_var6 = 1 << ((int)(temp_var2 >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(info_offset + 8) = temp_var13;\n      *(uint *)(info_offset + 0xc) = temp_var3 + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = temp_var6;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp_var3) = info_offset;\n      *(dword *)(temp_var13 + 0xc) = info_offset;\n    }\n    else {\n      temp_var5 = temp_var2 >> 9;\n      if (temp_var5 < 5) {\n        temp_var1 = (temp_var2 >> 6) + 0x38;\n        temp_var13 = temp_var1 * 2;\n      }\n      else if (temp_var5 < 0x15) {\n        temp_var1 = temp_var5 + 0x5b;\n        temp_var13 = temp_var1 * 2;\n      }\n      else if (temp_var5 < 0x55) {\n        temp_var1 = (temp_var2 >> 0xc) + 0x6e;\n        temp_var13 = temp_var1 * 2;\n      }\n      else if (temp_var5 < 0x155) {\n        temp_var1 = (temp_var2 >> 0xf) + 0x77;\n        temp_var13 = temp_var1 * 2;\n      }\n      else if (temp_var5 < 0x555) {\n        temp_var1 = (temp_var2 >> 0x12) + 0x7c;\n        temp_var13 = temp_var1 * 2;\n      }\n      else {\n        temp_var13 = 0xfc;\n        temp_var1 = 0x7e;\n      }\n      temp_var6 = temp_var13 * 4 + 0x20070464;\n      temp_var9 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[temp_var13];\n      if (temp_var9 == temp_var6) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (temp_var1 >> 2 & 0xffU);\n        temp_var10 = temp_var9;\n      }\n      else {\n        do {\n          temp_var10 = temp_var9;\n          if ((*(uint *)(temp_var9 + 4) & 0xfffffffc) <= temp_var3) break;\n          temp_var9 = *(dword *)(temp_var9 + 8);\n          temp_var10 = temp_var9;\n        } while (temp_var6 != temp_var9);\n        temp_var9 = *(dword *)(temp_var10 + 0xc);\n      }\n      temp_var6 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(info_offset + 0xc) = temp_var9;\n      *(dword *)(info_offset + 8) = temp_var10;\n      *(dword *)(temp_var9 + 8) = info_offset;\n      *(dword *)(temp_var10 + 0xc) = info_offset;\n    }\n  }\n  info_offset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  temp_var2 = 1 << ((int)temp_var12 >> 2 & 0xffU);\n  if (temp_var2 <= temp_var6) {\n    if ((temp_var6 & temp_var2) == 0) {\n      temp_var12 = temp_var12 & 0xfffffffc;\n      do {\n        temp_var2 = temp_var2 << 1;\n        temp_var12 = temp_var12 + 4;\n      } while ((temp_var6 & temp_var2) == 0);\n    }\n    do {\n      temp_ptr3 = &Elf32_Rel_ARRAY_20070000[temp_var12 + 0x8c].r_info;\n      pinfo_offset4 = temp_ptr3;\n      temp_var3 = temp_var12;\n      do {\n        for (temp_ptr1 = (undefined *)pinfo_offset4[3]; pinfo_offset4 != (dword *)temp_ptr1;\n            temp_ptr1 = *(undefined **)(temp_ptr1 + 0xc)) {\n          temp_var5 = *(uint *)(temp_ptr1 + 4) & 0xfffffffc;\n          temp_var7 = temp_var5 - block_size;\n          if (0xf < (int)temp_var7) {\n            temp_var1 = *(int *)(temp_ptr1 + 8);\n            temp_var13 = *(int *)(temp_ptr1 + 0xc);\n            temp_ptr2 = temp_ptr1 + block_size;\n            *(uint *)(temp_ptr1 + 4) = block_size | 1;\n            *(int *)(temp_var1 + 0xc) = temp_var13;\n            *(int *)(temp_var13 + 8) = temp_var1;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)temp_ptr2;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)temp_ptr2;\n            *(undefined4 *)(temp_ptr2 + 0xc) = 0x2007046c;\n            *(undefined4 *)(temp_ptr2 + 8) = 0x2007046c;\n            *(uint *)(temp_ptr2 + 4) = temp_var7 | 1;\n            *(uint *)(temp_ptr2 + temp_var7) = temp_var7;\n            FUNC_00081f98(output_ptr);\n            return (int *)(temp_ptr1 + 8);\n          }\n          if (-1 < (int)temp_var7) {\n            temp_var13 = *(int *)(temp_ptr1 + 8);\n            temp_var1 = *(int *)(temp_ptr1 + 0xc);\n            *(uint *)(temp_ptr1 + temp_var5 + 4) = *(uint *)(temp_ptr1 + temp_var5 + 4) | 1;\n            *(int *)(temp_var13 + 0xc) = temp_var1;\n            *(int *)(temp_var1 + 8) = temp_var13;\n            FUNC_00081f98(output_ptr);\n            return (int *)(temp_ptr1 + 8);\n          }\n        }\n        temp_var3 = temp_var3 + 1;\n        pinfo_offset4 = pinfo_offset4 + 2;\n      } while ((temp_var3 & 3) != 0);\n      do {\n        temp_var5 = temp_var12 & 3;\n        temp_ptr1 = (undefined *)(temp_ptr3 + -2);\n        temp_var12 = temp_var12 - 1;\n        if (temp_var5 == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~temp_var2;\n          break;\n        }\n        temp_ptr3 = (dword *)*temp_ptr3;\n      } while (temp_ptr3 == (dword *)temp_ptr1);\n      temp_var2 = temp_var2 * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= temp_var2 &&\n           temp_var2 - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (temp_var12 = temp_var3, temp_var2 == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & temp_var2) == 0; temp_var2 = temp_var2 << 1) {\n        temp_var12 = temp_var12 + 4;\n      }\n    } while( true );\n  }\n  temp_var12 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((block_size <= temp_var12) &&\n     (temp_var2 = temp_var12 - block_size, temp_var6 = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)temp_var2))\n  goto LAB_00081b1a;\n  temp_var2 = Elf32_Rel_ARRAY_20070000[141].r_info + temp_var12;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    temp_var3 = block_size + DAT_20071218 + 0x10;\n  }\n  else {\n    temp_var3 = block_size + DAT_20071218 + 0x100f & 0xfffff000;\n  }\n  temp_var6 = FUN_0008236c(output_ptr,temp_var3);\n  if ((temp_var6 == 0xffffffff) || ((temp_var6 < temp_var2 && (info_offset != 0x20070464)))) {\n    temp_var12 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    temp_var6 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    temp_var5 = DAT_2007121c + temp_var3;\n    DAT_2007121c = temp_var5;\n    if ((temp_var2 == temp_var6) && ((temp_var2 & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp_var3 + temp_var12 | 1;\n    }\n    else {\n      temp_var9 = temp_var6;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        temp_var9 = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_2007121c = temp_var5 + (temp_var6 - temp_var2);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = temp_var9;\n      temp_var2 = temp_var6 & 7;\n      if (temp_var2 == 0) {\n        temp_var13 = 0x1000;\n      }\n      else {\n        temp_var6 = temp_var6 + (8 - temp_var2);\n        temp_var13 = 0x1008 - temp_var2;\n      }\n      temp_var13 = temp_var13 - (temp_var3 + temp_var6 & 0xfff);\n      temp_var1 = FUN_0008236c(output_ptr,temp_var13);\n      if (temp_var1 == -1) {\n        temp_var2 = 1;\n        temp_var13 = 0;\n      }\n      else {\n        temp_var2 = (temp_var1 - temp_var6) + temp_var13 | 1;\n      }\n      temp_var5 = DAT_2007121c + temp_var13;\n      Elf32_Rel_ARRAY_20070000[141].r_info = temp_var6;\n      DAT_2007121c = temp_var5;\n      *(uint *)(temp_var6 + 4) = temp_var2;\n      if (info_offset != 0x20070464) {\n        if (temp_var12 < 0x10) {\n          *(undefined4 *)(temp_var6 + 4) = 1;\n          temp_var12 = 0;\n          goto LAB_00081b04;\n        }\n        temp_var12 = temp_var12 - 0xc & 0xfffffff8;\n        *(uint *)(info_offset + 4) = temp_var12 | *(uint *)(info_offset + 4) & 1;\n        *(undefined4 *)(info_offset + temp_var12 + 4) = 5;\n        *(undefined4 *)(info_offset + temp_var12 + 8) = 5;\n        if (0xf < temp_var12) {\n          FUN_00083b10(output_ptr,info_offset + 8);\n          temp_var5 = DAT_2007121c;\n        }\n      }\n    }\n    if (DAT_20071214 < temp_var5) {\n      DAT_20071214 = temp_var5;\n    }\n    if (DAT_20071210 < temp_var5) {\n      DAT_20071210 = temp_var5;\n    }\n    temp_var12 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    temp_var6 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00081b04:\n  temp_var2 = temp_var12 - block_size;\n  if ((temp_var12 < block_size) || ((int)temp_var2 < 0x10)) {\n    FUNC_00081f98(output_ptr);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  Elf32_Rel_ARRAY_20070000[141].r_info = block_size + temp_var6;\n  *(uint *)(temp_var6 + 4) = block_size | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp_var2 | 1;\n  FUNC_00081f98(output_ptr);\n  return (int *)(temp_var6 + 8);\n}\n\n",
            "renaming": {
                "FUN_00081810": "allocate_memory_block_00081810",
                "param_1": "output_ptr",
                "param_2": "size",
                "dVar1": "info_offset",
                "iVar2": "temp_var1",
                "uVar3": "temp_var2",
                "uVar4": "temp_var3",
                "iVar5": "temp_var4",
                "uVar6": "temp_var5",
                "dVar7": "temp_var6",
                "uVar8": "temp_var7",
                "iVar9": "temp_var8",
                "puVar10": "temp_ptr1",
                "dVar11": "temp_var9",
                "dVar12": "temp_var10",
                "iVar13": "temp_var13",
                "uVar15": "block_size",
                "puVar16": "temp_ptr2",
                "pdVar17": "temp_ptr3",
                "uVar18": "temp_var12"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00084018",
                "FUN_00083ca8",
                "FUN_000817f0"
            ],
            "called": [
                "FUN_00083b10",
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_0008236c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d48": {
            "entrypoint": "0x00081d48",
            "current_name": "copy_memory_00081d48",
            "code": "\nundefined4 * copyMemory_00081d48(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *destIter;\n  undefined4 *srcIter;\n  uint remainingSize;\n  uint tempSize;\n  bool loopCondition;\n  \n  destIter = dest;\n  if ((((uint)src | (uint)dest) & 3) != 0) {\n    if (size < 8) {\n      tempSize = size - 4;\n      if (3 < size) {\n        do {\n          destPtr = src;\n          srcIter = destIter;\n          loopCondition = tempSize != 0;\n          tempSize = tempSize - 1;\n          *(undefined *)srcIter = *(undefined *)destPtr;\n          destIter = (undefined4 *)((int)srcIter + 1);\n          src = (undefined4 *)((int)destPtr + 1);\n        } while (loopCondition);\n        *(undefined *)(undefined4 *)((int)srcIter + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)srcIter + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)srcIter + 3) = *(undefined *)((int)destPtr + 3);\n        return dest;\n      }\n      goto LAB_00081dcc;\n    }\n    if ((((uint)src & 3) != 0) && (((uint)dest & 3) != 0)) {\n      tempSize = 4 - ((uint)dest & 3);\n      size = size - tempSize;\n      destPtr = dest;\n      srcIter = src;\n      if (((uint)dest & 1) != 0) {\n        srcIter = (undefined4 *)((int)src + 1);\n        destPtr = (undefined4 *)((int)dest + 1);\n        *(undefined *)dest = *(undefined *)src;\n      }\n      destIter = destPtr;\n      src = srcIter;\n      if ((tempSize & 2) != 0) {\n        src = (undefined4 *)((int)srcIter + 2);\n        destIter = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)srcIter;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *destIter = *src;\n    destIter[1] = src[1];\n    destIter[2] = src[2];\n    destIter[3] = src[3];\n    destIter[4] = src[4];\n    destIter[5] = src[5];\n    destIter[6] = src[6];\n    destIter[7] = src[7];\n    destIter[8] = src[8];\n    destIter[9] = src[9];\n    destIter[10] = src[10];\n    destIter[0xb] = src[0xb];\n    destIter[0xc] = src[0xc];\n    destIter[0xd] = src[0xd];\n    destIter[0xe] = src[0xe];\n    destIter[0xf] = src[0xf];\n    destIter = destIter + 0x10;\n    src = src + 0x10;\n    size = size - 0x40;\n  }\n  remainingSize = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *destIter = *src;\n      destIter[1] = src[1];\n      destIter[2] = src[2];\n      destIter[3] = src[3];\n      destIter = destIter + 4;\n      src = src + 4;\n      loopCondition = 0xf < remainingSize;\n      remainingSize = remainingSize - 0x10;\n    } while (loopCondition);\n  }\n  tempSize = remainingSize + 0xc;\n  srcIter = destIter;\n  destPtr = src;\n  if (0xfffffff3 < remainingSize) {\n    do {\n      src = destPtr + 1;\n      *srcIter = *destPtr;\n      loopCondition = 3 < tempSize;\n      tempSize = tempSize - 4;\n      destIter = srcIter + 1;\n      srcIter = srcIter + 1;\n      destPtr = src;\n    } while (loopCondition);\n  }\nLAB_00081dcc:\n  if (tempSize + 4 != 0) {\n    destPtr = destIter;\n    srcIter = src;\n    if ((tempSize & 1) != 0) {\n      srcIter = (undefined4 *)((int)src + 1);\n      destPtr = (undefined4 *)((int)destIter + 1);\n      *(undefined *)destIter = *(undefined *)src;\n    }\n    if ((tempSize + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)srcIter;\n    }\n  }\n  return dest;\n}\n\n",
            "renaming": {
                "FUN_00081d48": "copy_memory_00081d48",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "destIter",
                "puVar3": "srcIter",
                "uVar4": "remainingSize",
                "uVar5": "tempSize",
                "bVar6": "loopCondition"
            },
            "calling": [
                "FUN_00083ca8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e34": {
            "entrypoint": "0x00081e34",
            "current_name": "copy_reverse_00081e34",
            "code": "\nvoid copyReverse_00081e34(undefined4 *dest,undefined4 *src,uint length)\n\n{\n  int index;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *tempPtr;\n  uint remaining;\n  undefined *destEnd;\n  uint remainder;\n  \n  if ((src < dest) && (tempPtr = (undefined4 *)((int)src + length), dest < tempPtr)) {\n    destEnd = (undefined *)((int)dest + length);\n    index = length - 1;\n    if (length != 0) {\n      do {\n        tempPtr = (undefined4 *)((int)tempPtr + -1);\n        index = index + -1;\n        destEnd = destEnd + -1;\n        *destEnd = *(undefined *)tempPtr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (length < 0x10) {\n    if (length == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    tempPtr = dest;\n    srcPtr = src;\n    do {\n      destPtr = tempPtr + 4;\n      *tempPtr = *srcPtr;\n      tempPtr[1] = srcPtr[1];\n      tempPtr[2] = srcPtr[2];\n      tempPtr[3] = srcPtr[3];\n      tempPtr = destPtr;\n      srcPtr = srcPtr + 4;\n    } while (destPtr != (undefined4 *)((int)dest + (length - 0x10 & 0xfffffff0) + 0x10));\n    index = (length - 0x10 >> 4) + 1;\n    remainder = length & 0xf;\n    src = src + index * 4;\n    dest = dest + index * 4;\n    remaining = remainder;\n    tempPtr = dest;\n    srcPtr = src;\n    if (3 < remainder) {\n      do {\n        remaining = remaining - 4;\n        *tempPtr = *srcPtr;\n        tempPtr = tempPtr + 1;\n        srcPtr = srcPtr + 1;\n      } while (3 < remaining);\n      index = (remainder - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + index);\n      src = (undefined4 *)((int)src + index);\n      remainder = length & 3;\n    }\n    length = remainder;\n    if (length == 0) {\n      return;\n    }\n  }\n  tempPtr = dest;\n  do {\n    srcPtr = (undefined4 *)((int)tempPtr + 1);\n    *(undefined *)tempPtr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    tempPtr = srcPtr;\n  } while (srcPtr != (undefined4 *)(length + (int)dest));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e34": "copy_reverse_00081e34",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "iVar1": "index",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "puVar4": "tempPtr",
                "uVar5": "remaining",
                "puVar6": "destEnd",
                "uVar7": "remainder"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00083ca8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f00": {
            "entrypoint": "0x00081f00",
            "current_name": "memset_00081f00",
            "code": "\nvoid memset_00081f00(undefined4 *destination,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_dest_ptr;\n  undefined4 value_concat;\n  uint size_remaining;\n  bool is_size_zero;\n  \n  if (((uint)destination & 3) != 0) {\n    is_size_zero = size == 0;\n    dest_ptr = destination;\n    size = size - 1;\n    if (is_size_zero) {\n      return;\n    }\n    while( true ) {\n      destination = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      if (((uint)destination & 3) == 0) break;\n      is_size_zero = size == 0;\n      dest_ptr = destination;\n      size = size - 1;\n      if (is_size_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    value_concat = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    size_remaining = size;\n    dest_ptr = destination;\n    if (0xf < size) {\n      size_remaining = size - 0x10;\n      do {\n        *dest_ptr = value_concat;\n        dest_ptr[1] = value_concat;\n        dest_ptr[2] = value_concat;\n        dest_ptr[3] = value_concat;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)destination + (size_remaining & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      destination = destination + ((size_remaining >> 4) + 1) * 4;\n      size_remaining = size;\n      dest_ptr = destination;\n      if (size < 4) goto LAB_00081f7c;\n    }\n    do {\n      size = size - 4;\n      *destination = value_concat;\n      destination = destination + 1;\n    } while (3 < size);\n    destination = (undefined4 *)((int)dest_ptr + (size_remaining - 4 & 0xfffffffc) + 4);\n    size = size_remaining & 3;\n  }\nLAB_00081f7c:\n  if (size != 0) {\n    dest_ptr = destination;\n    do {\n      next_dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_dest_ptr;\n    } while (next_dest_ptr != (undefined4 *)(size + (int)destination));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f00": "memset_00081f00",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "next_dest_ptr",
                "uVar3": "value_concat",
                "uVar4": "size_remaining",
                "bVar5": "is_size_zero"
            },
            "calling": [
                "FUN_000811b0",
                "FUN_00083888"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f94": {
            "entrypoint": "0x00081f94",
            "current_name": "FUNC_00081f94",
            "code": "\nvoid FUNC_00081f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f94": "FUNC_00081f94"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00083b10",
                "FUN_00081810",
                "FUN_00083a74"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f98": {
            "entrypoint": "0x00081f98",
            "current_name": "FUNC_00081f98",
            "code": "\nvoid FUNC_00081f98(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f98": "FUNC_00081f98"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00081810",
                "FUN_00083b10",
                "FUN_00083a74"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f9c": {
            "entrypoint": "0x00081f9c",
            "current_name": "process_elf32_rel_00081f9c",
            "code": "\nvoid process_elf32_rel_00081f9c(undefined4 ptr_param_1,undefined4 ptr_param_2)\n\n{\n  FUN_00081fac(Elf32_Rel_ARRAY_20070000[140].r_offset,ptr_param_1,ptr_param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f9c": "process_elf32_rel_00081f9c",
                "param_1": "ptr_param_1",
                "param_2": "ptr_param_2"
            },
            "calling": [
                "FUN_00081496"
            ],
            "called": [
                "FUN_00081fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081fac": {
            "entrypoint": "0x00081fac",
            "current_name": "resize_memory_block_00081fac",
            "code": "\nint * resizeMemoryBlock_00081fac(undefined4 *mem_ptr,int *old_block,uint new_size)\n\n{\n  dword rel_info;\n  int *new_block;\n  uint rel_info_size;\n  int prev_block;\n  uint old_block_size;\n  int next_block;\n  int *new_rel_info;\n  uint adjusted_old_size;\n  uint adjusted_new_size;\n  int *target_block;\n  \n  if (old_block == (int *)0x0) {\n    new_block = (int *)FUN_00081810(mem_ptr,new_size);\n    return new_block;\n  }\n  FUNC_00081f94();\n  old_block_size = old_block[-1];\n  adjusted_old_size = old_block_size & 0xfffffffc;\n  new_block = old_block + -2;\n  if (new_size + 0xb < 0x17) {\n    adjusted_new_size = 0x10;\n  }\n  else {\n    adjusted_new_size = new_size + 0xb & 0xfffffff8;\n    if ((int)adjusted_new_size < 0) goto LAB_00082078;\n  }\n  if (adjusted_new_size < new_size) {\nLAB_00082078:\n    *mem_ptr = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)adjusted_old_size < (int)adjusted_new_size) {\n    rel_info = (int)new_block + adjusted_old_size;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == rel_info) {\n      rel_info_size = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      rel_info = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(adjusted_new_size + 0x10) <= (int)(rel_info_size + adjusted_old_size)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)new_block + adjusted_new_size;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (rel_info_size + adjusted_old_size) - adjusted_new_size | 1;\n        old_block[-1] = adjusted_new_size | old_block[-1] & 1U;\n        FUNC_00081f98(mem_ptr);\n        return old_block;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(rel_info + 4) & 0xfffffffe) + rel_info + 4) & 1) == 0) {\n      rel_info_size = *(uint *)(rel_info + 4) & 0xfffffffc;\n      if ((int)adjusted_new_size <= (int)(rel_info_size + adjusted_old_size)) {\n        next_block = *(int *)(rel_info + 0xc);\n        prev_block = *(int *)(rel_info + 8);\n        *(int *)(prev_block + 0xc) = next_block;\n        *(int *)(next_block + 8) = prev_block;\n        adjusted_old_size = rel_info_size + adjusted_old_size;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      rel_info_size = 0;\n      rel_info = 0;\n    }\n    if (-1 < (int)(old_block_size << 0x1f)) {\n      target_block = (int *)((int)new_block - old_block[-2]);\n      old_block_size = (target_block[1] & 0xfffffffcU) + adjusted_old_size;\n      if (rel_info != 0) {\n        if (rel_info == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(adjusted_new_size + 0x10) <= (int)(rel_info_size + old_block_size)) {\n            new_block = target_block + 2;\n            prev_block = *new_block;\n            next_block = target_block[3];\n            adjusted_old_size = adjusted_old_size - 4;\n            *(int *)(prev_block + 0xc) = next_block;\n            *(int *)(next_block + 8) = prev_block;\n            if (adjusted_old_size < 0x25) {\n              new_rel_info = new_block;\n              if (0x13 < adjusted_old_size) {\n                target_block[2] = *old_block;\n                target_block[3] = old_block[1];\n                if (adjusted_old_size < 0x1c) {\n                  old_block = old_block + 2;\n                  new_rel_info = target_block + 4;\n                }\n                else {\n                  target_block[4] = old_block[2];\n                  target_block[5] = old_block[3];\n                  if (adjusted_old_size == 0x24) {\n                    target_block[6] = old_block[4];\n                    new_rel_info = old_block + 5;\n                    old_block = old_block + 6;\n                    target_block[7] = *new_rel_info;\n                    new_rel_info = target_block + 8;\n                  }\n                  else {\n                    old_block = old_block + 4;\n                    new_rel_info = target_block + 6;\n                  }\n                }\n              }\n              *new_rel_info = *old_block;\n              new_rel_info[1] = old_block[1];\n              new_rel_info[2] = old_block[2];\n            }\n            else {\n              FUN_00081e34(new_block,old_block);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)target_block + adjusted_new_size;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (rel_info_size + old_block_size) - adjusted_new_size | 1;\n            target_block[1] = adjusted_new_size | target_block[1] & 1U;\n            FUNC_00081f98(mem_ptr);\n            return new_block;\n          }\n        }\n        else {\n          rel_info_size = rel_info_size + old_block_size;\n          if ((int)adjusted_new_size <= (int)rel_info_size) {\n            next_block = *(int *)(rel_info + 0xc);\n            prev_block = *(int *)(rel_info + 8);\n            *(int *)(prev_block + 0xc) = next_block;\n            *(int *)(next_block + 8) = prev_block;\n            new_rel_info = target_block + 2;\n            prev_block = *new_rel_info;\n            next_block = target_block[3];\n            old_block_size = adjusted_old_size - 4;\n            *(int *)(prev_block + 0xc) = next_block;\n            *(int *)(next_block + 8) = prev_block;\n            adjusted_old_size = rel_info_size;\n            if (old_block_size < 0x25) {\n              new_block = new_rel_info;\n              if (0x13 < old_block_size) {\n                target_block[2] = *old_block;\n                target_block[3] = old_block[1];\n                if (old_block_size < 0x1c) {\n                  old_block = old_block + 2;\n                  new_block = target_block + 4;\n                }\n                else {\n                  target_block[4] = old_block[2];\n                  target_block[5] = old_block[3];\n                  if (old_block_size == 0x24) {\n                    target_block[6] = old_block[4];\n                    new_block = old_block + 5;\n                    old_block = old_block + 6;\n                    target_block[7] = *new_block;\n                    new_block = target_block + 8;\n                  }\n                  else {\n                    old_block = old_block + 4;\n                    new_block = target_block + 6;\n                  }\n                }\n              }\n              *new_block = *old_block;\n              new_block[1] = old_block[1];\n              new_block[2] = old_block[2];\n              old_block_size = target_block[1];\n              new_block = target_block;\n              old_block = new_rel_info;\n            }\n            else {\n              FUN_00081e34(new_rel_info,old_block);\n              old_block_size = target_block[1];\n              new_block = target_block;\n              old_block = new_rel_info;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)adjusted_new_size <= (int)old_block_size) {\n        new_rel_info = target_block + 2;\n        prev_block = *new_rel_info;\n        next_block = target_block[3];\n        rel_info_size = adjusted_old_size - 4;\n        *(int *)(prev_block + 0xc) = next_block;\n        *(int *)(next_block + 8) = prev_block;\n        adjusted_old_size = old_block_size;\n        if (rel_info_size < 0x25) {\n          new_block = new_rel_info;\n          if (0x13 < rel_info_size) {\n            target_block[2] = *old_block;\n            target_block[3] = old_block[1];\n            if (rel_info_size < 0x1c) {\n              old_block = old_block + 2;\n              new_block = target_block + 4;\n            }\n            else {\n              target_block[4] = old_block[2];\n              target_block[5] = old_block[3];\n              if (rel_info_size == 0x24) {\n                target_block[6] = old_block[4];\n                new_block = old_block + 5;\n                old_block = old_block + 6;\n                target_block[7] = *new_block;\n                new_block = target_block + 8;\n              }\n              else {\n                old_block = old_block + 4;\n                new_block = target_block + 6;\n              }\n            }\n          }\n          *new_block = *old_block;\n          new_block[1] = old_block[1];\n          new_block[2] = old_block[2];\n          old_block_size = target_block[1];\n          new_block = target_block;\n          old_block = new_rel_info;\n        }\n        else {\n          FUN_00081e34(new_rel_info,old_block);\n          old_block_size = target_block[1];\n          new_block = target_block;\n          old_block = new_rel_info;\n        }\n        goto LAB_00082088;\n      }\n    }\n    target_block = (int *)FUN_00081810(mem_ptr,new_size);\n    if (target_block == (int *)0x0) goto LAB_000820a0;\n    old_block_size = old_block[-1];\n    if (target_block + -2 != (int *)((old_block_size & 0xfffffffe) + (int)new_block)) {\n      adjusted_old_size = adjusted_old_size - 4;\n      if (adjusted_old_size < 0x25) {\n        new_block = old_block;\n        new_rel_info = target_block;\n        if (0x13 < adjusted_old_size) {\n          *target_block = *old_block;\n          target_block[1] = old_block[1];\n          if (adjusted_old_size < 0x1c) {\n            new_block = old_block + 2;\n            new_rel_info = target_block + 2;\n          }\n          else {\n            target_block[2] = old_block[2];\n            target_block[3] = old_block[3];\n            if (adjusted_old_size == 0x24) {\n              target_block[4] = old_block[4];\n              target_block[5] = old_block[5];\n              new_block = old_block + 6;\n              new_rel_info = target_block + 6;\n            }\n            else {\n              new_block = old_block + 4;\n              new_rel_info = target_block + 4;\n            }\n          }\n        }\n        *new_rel_info = *new_block;\n        new_rel_info[1] = new_block[1];\n        new_rel_info[2] = new_block[2];\n      }\n      else {\n        FUN_00081e34(target_block,old_block);\n      }\n      FUN_00083b10(mem_ptr,old_block);\n      goto LAB_000820a0;\n    }\n    adjusted_old_size = adjusted_old_size + (target_block[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  rel_info_size = adjusted_old_size - adjusted_new_size;\n  target_block = old_block;\n  if (rel_info_size < 0x10) {\n    new_block[1] = old_block_size & 1 | adjusted_old_size;\n    *(uint *)((int)new_block + adjusted_old_size + 4) = *(uint *)((int)new_block + adjusted_old_size + 4) | 1;\n  }\n  else {\n    new_block[1] = old_block_size & 1 | adjusted_new_size;\n    *(uint *)((int)new_block + adjusted_new_size + 4) = rel_info_size | 1;\n    *(uint *)((int)new_block + rel_info_size + adjusted_new_size + 4) = *(uint *)((int)new_block + rel_info_size + adjusted_new_size + 4) | 1;\n    FUN_00083b10(mem_ptr,(int)new_block + adjusted_new_size + 8);\n  }\nLAB_000820a0:\n  FUNC_00081f98(mem_ptr);\n  return target_block;\n}\n\n",
            "renaming": {
                "FUN_00081fac": "resize_memory_block_00081fac",
                "param_1": "mem_ptr",
                "param_2": "old_block",
                "param_3": "new_size",
                "dVar1": "rel_info",
                "piVar2": "new_block",
                "uVar3": "rel_info_size",
                "iVar4": "prev_block",
                "uVar5": "old_block_size",
                "iVar6": "next_block",
                "piVar7": "new_rel_info",
                "uVar8": "adjusted_old_size",
                "uVar9": "adjusted_new_size",
                "piVar10": "target_block"
            },
            "calling": [
                "FUN_00081f9c",
                "FUN_00083ca8"
            ],
            "called": [
                "FUN_00081810",
                "FUN_00083b10",
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_00081e34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008236c": {
            "entrypoint": "0x0008236c",
            "current_name": "check_and_assign_value_0008236c",
            "code": "\nvoid checkAndAssignValue_0008236c(int *resultPointer,undefined4 inputValue)\n\n{\n  int functionResult;\n  \n  DAT_20071244 = 0;\n  functionResult = FUN_00080e88(inputValue);\n  if ((functionResult == -1) && (DAT_20071244 != 0)) {\n    *resultPointer = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008236c": "check_and_assign_value_0008236c",
                "param_1": "resultPointer",
                "param_2": "inputValue",
                "iVar1": "functionResult"
            },
            "calling": [
                "FUN_00081810",
                "FUN_00083a74"
            ],
            "called": [
                "FUN_00080e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082390": {
            "entrypoint": "0x00082390",
            "current_name": "compare_byte_arrays_00082390",
            "code": "\nint compareByteArrays_00082390(uint *array1,uint *array2)\n\n{\n  uint *ptr1;\n  int result;\n  uint *ptr2;\n  uint *ptr3;\n  uint val1;\n  uint val2;\n  uint val3;\n  uint val4;\n  uint val5;\n  \n  if ((((uint)array1 | (uint)array2) & 7) != 0) {\n    ptr1 = array1;\n    if (((uint)array1 & 3) != 0) {\n      ptr1 = (uint *)((uint)array1 & 0xfffffffc) + 1;\n      val1 = *(uint *)((uint)array1 & 0xfffffffc);\n      ptr2 = array2;\n      if (((uint)array1 & 1) == 0) {\nLAB_00082410:\n        ptr3 = (uint *)((int)ptr2 + 1);\n        val2 = val1 >> 0x10 & 0xff;\n        result = val2 - *(byte *)ptr2;\n        if (result != 0) {\n          return result;\n        }\n        if (val2 == 0) {\n          return 0;\n        }\n      }\n      else {\n        ptr3 = array2;\n        if (((uint)array1 & 2) == 0) {\n          ptr2 = (uint *)((int)array2 + 1);\n          val2 = val1 >> 8 & 0xff;\n          result = val2 - *(byte *)array2;\n          if (result != 0) {\n            return result;\n          }\n          if (val2 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      array2 = (uint *)((int)ptr3 + 1);\n      result = (val1 >> 0x18) - (uint)*(byte *)ptr3;\n      if ((result != 0) || (val1 >> 0x18 == 0)) {\n        return result;\n      }\n    }\n    val1 = (uint)array2 & 3;\n    if (val1 != 0) {\n      array2 = (uint *)((uint)array2 & 0xfffffffc);\n      if (val1 == 2) {\n        val1 = *array2;\n        do {\n          array2 = array2 + 1;\n          val3 = *ptr1;\n          val1 = val1 >> 0x10;\n          val4 = val3 + 0xfefefeff & ~val3;\n          val5 = val4 & 0x80808080;\n          val2 = val3 & 0xffff;\n          if ((val4 & 0x8080) != 0 || val2 != val1) goto LAB_0008258e;\n          val1 = *array2;\n          val2 = val2 ^ val3;\n          val3 = val1 * 0x10000;\n          ptr1 = ptr1 + 1;\n        } while (val5 == 0 && val2 == val3);\n      }\n      else if (val1 < 2) {\n        val1 = *array2;\n        do {\n          array2 = array2 + 1;\n          val3 = *ptr1;\n          val1 = val1 >> 8;\n          val4 = val3 + 0xfefefeff & ~val3;\n          val5 = val4 & 0x80808080;\n          val2 = val3 & 0xffffff;\n          if ((val4 & 0x808080) != 0 || val2 != val1) goto LAB_0008258e;\n          val1 = *array2;\n          val2 = val2 ^ val3;\n          val3 = val1 * 0x1000000;\n          ptr1 = ptr1 + 1;\n        } while (val5 == 0 && val2 == val3);\n      }\n      else {\n        val1 = *array2;\n        do {\n          array2 = array2 + 1;\n          val3 = *ptr1;\n          val1 = val1 >> 0x18;\n          val4 = val3 + 0xfefefeff & ~val3;\n          val5 = val4 & 0x80808080;\n          val2 = val3 & 0xff;\n          if ((val4 & 0x80) != 0 || val2 != val1) goto LAB_0008258e;\n          val1 = *array2;\n          val2 = val2 ^ val3;\n          val3 = val1 * 0x100;\n          ptr1 = ptr1 + 1;\n        } while (val5 == 0 && val2 == val3);\n      }\n      val2 = val2 << 0x18 | (val2 >> 8 & 0xff) << 0x10 | (val2 >> 0x10 & 0xff) << 8 |\n              val2 >> 0x18;\n      val1 = (val3 >> 8 & 0xff) << 0x10 | (val3 >> 0x10 & 0xff) << 8 | val3 >> 0x18;\n      goto LAB_0008259e;\n    }\n    array1 = ptr1;\n    ptr2 = array2;\n    if (((uint)ptr1 & 4) != 0) {\n      array1 = ptr1 + 1;\n      val1 = *ptr1;\n      ptr2 = array2 + 1;\n      val3 = *array2;\n      val5 = val1 + 0xfefefeff & ~val1 & 0x80808080;\n      if (val1 != val3 || val5 != 0) {\nLAB_0008259a:\n        val2 = val1 << 0x18 | (val1 >> 8 & 0xff) << 0x10 | (val1 >> 0x10 & 0xff) << 8 |\n                val1 >> 0x18;\n        val1 = val3 << 0x18 | (val3 >> 8 & 0xff) << 0x10 | (val3 >> 0x10 & 0xff) << 8 |\n                val3 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    array2 = ptr2;\n    if (((uint)ptr2 & 4) != 0) {\n      val1 = *ptr2;\n      ptr1 = ptr2 + 1;\n      do {\n        val2 = *array1;\n        val3 = array1[1];\n        val5 = val2 + 0xfefefeff & ~val2 & 0x80808080;\n        if (val2 != val1 || val5 != 0) goto LAB_0008258e;\n        val4 = *ptr1;\n        val1 = ptr1[1];\n        val5 = val3 + 0xfefefeff & ~val3 & 0x80808080;\n        array1 = array1 + 2;\n        ptr1 = ptr1 + 2;\n      } while (val3 == val4 && val5 == 0);\n      val2 = val3 << 0x18 | (val3 >> 8 & 0xff) << 0x10 | (val3 >> 0x10 & 0xff) << 8 |\n              val3 >> 0x18;\n      val1 = val4 << 0x18 | (val4 >> 8 & 0xff) << 0x10 | (val4 >> 0x10 & 0xff) << 8 |\n              val4 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    val1 = *array1;\n    val2 = array1[1];\n    val3 = *array2;\n    val4 = array2[1];\n    val5 = val1 + 0xfefefeff & ~val1 & 0x80808080;\n    if (val1 != val3 || val5 != 0) goto LAB_0008259a;\n    val5 = val2 + 0xfefefeff & ~val2 & 0x80808080;\n    array1 = array1 + 2;\n    array2 = array2 + 2;\n  } while (val2 == val4 && val5 == 0);\n  val2 = val2 << 0x18 | (val2 >> 8 & 0xff) << 0x10 | (val2 >> 0x10 & 0xff) << 8 | val2 >> 0x18;\n  val1 = val4 << 0x18 | (val4 >> 8 & 0xff) << 0x10 | (val4 >> 0x10 & 0xff) << 8 | val4 >> 0x18;\nLAB_0008259e:\n  val3 = val5 << 0x18 | (val5 >> 8 & 0xff) << 0x10 | (val5 >> 0x10 & 0xff) << 8 | val5 >> 0x18;\n  if (val3 != 0) {\n    val3 = 0x18 - LZCOUNT(val3);\n    val2 = val2 >> (val3 & 0xff);\n    val1 = val1 >> (val3 & 0xff);\n  }\n  result = 1;\n  if (val2 <= val1) {\n    result = -(uint)(val2 < val1);\n  }\n  return result;\nLAB_0008258e:\n  val2 = val2 << 0x18 | (val2 >> 8 & 0xff) << 0x10 | (val2 >> 0x10 & 0xff) << 8 | val2 >> 0x18;\n  val1 = val1 << 0x18 | (val1 >> 8 & 0xff) << 0x10 | (val1 >> 0x10 & 0xff) << 8 | val1 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "renaming": {
                "FUN_00082390": "compare_byte_arrays_00082390",
                "param_1": "array1",
                "param_2": "array2",
                "puVar1": "ptr1",
                "iVar2": "result",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "uVar5": "val1",
                "uVar6": "val2",
                "uVar7": "val3",
                "uVar8": "val4",
                "uVar9": "val5"
            },
            "calling": [
                "FUN_000815b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825cc": {
            "entrypoint": "0x000825cc",
            "current_name": "copy_string_000825cc",
            "code": "\nvoid copy_string_000825cc(uint *dest,uint *src)\n\n{\n  char current_char;\n  ushort current_short;\n  uint *temp_ptr;\n  uint *temp_ptr2;\n  uint current_word;\n  uint shifted_word;\n  uint *dest_ptr;\n  bool is_zero;\n  \n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    temp_ptr2 = src;\n    if (((uint)src & 1) != 0) {\n      temp_ptr2 = (uint *)((int)src + 1);\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      dest = (uint *)((int)dest + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    src = temp_ptr2;\n    if (((uint)temp_ptr2 & 2) != 0) {\n      src = (uint *)((int)temp_ptr2 + 2);\n      current_short = *(ushort *)temp_ptr2;\n      is_zero = (current_short & 0xff) == 0;\n      if (is_zero) {\n        *(char *)dest = (char)current_short;\n      }\n      else {\n        *(ushort *)dest = current_short;\n        is_zero = (current_short & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  current_word = *src;\n  temp_ptr2 = src + 1;\n  dest_ptr = dest;\n  if (((uint)src & 4) != 0) {\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) goto end_loop;\n    dest_ptr = dest + 1;\n    *dest = current_word;\n    temp_ptr2 = src + 2;\n    current_word = src[1];\n  }\n  while( true ) {\n    temp_ptr = temp_ptr2 + 1;\n    shifted_word = *temp_ptr2;\n    dest = dest_ptr;\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) break;\n    dest = dest_ptr + 1;\n    *dest_ptr = current_word;\n    current_word = shifted_word;\n    if ((shifted_word + 0xfefefeff & ~shifted_word & 0x80808080) != 0) break;\n    temp_ptr2 = temp_ptr2 + 2;\n    current_word = *temp_ptr;\n    dest_ptr = dest_ptr + 2;\n    *dest = shifted_word;\n  }\nend_loop:\n  do {\n    *(char *)dest = (char)current_word;\n    shifted_word = current_word & 0xff;\n    current_word = current_word >> 8 | current_word << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (shifted_word != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "temp_ptr",
                "puVar4": "temp_ptr2",
                "uVar5": "current_word",
                "uVar6": "shifted_word",
                "puVar7": "dest_ptr",
                "bVar8": "is_zero",
                "LAB_00082630": "end_loop"
            },
            "calling": [
                "FUN_0008151c",
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082688": {
            "entrypoint": "0x00082688",
            "current_name": "count_trailing_zeros_00082688",
            "code": "\nint countTrailingZeros_00082688(uint input)\n\n{\n  int trailingZeros;\n  uint *ptr;\n  uint value;\n  bool isZero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  trailingZeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((trailingZeros + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    trailingZeros = trailingZeros + 4;\n    value = *ptr;\n  }\n  isZero = (value & 0xff) == 0;\n  if (!isZero) {\n    trailingZeros = trailingZeros + 1;\n    isZero = (value & 0xff00) == 0;\n  }\n  if (!isZero) {\n    trailingZeros = trailingZeros + 1;\n    isZero = (value & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    trailingZeros = trailingZeros + 1;\n  }\n  return trailingZeros;\n}\n\n",
            "renaming": {
                "FUN_00082688": "count_trailing_zeros_00082688",
                "param_1": "input",
                "iVar1": "trailingZeros",
                "puVar2": "ptr",
                "uVar3": "value",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_0008289c",
                "FUN_000814f6",
                "FUN_000810a6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082824": {
            "entrypoint": "0x00082824",
            "current_name": "process_data_00082824",
            "code": "\nint processData_00082824(undefined4 value,int index,int **array)\n\n{\n  int *currentValue;\n  int result;\n  int *remainingArray;\n  uint iterationCount;\n  undefined4 *currentData;\n  uint currentArraySize;\n  uint shiftedValue;\n  \n  if (-1 < *(int *)(index + 100) << 0x12) {\n    result = FUN_00083ca8();\n    array[2] = (int *)0x0;\n    array[1] = (int *)0x0;\n    return result;\n  }\n  remainingArray = array[2];\n  currentValue = *array;\n  while (remainingArray != (int *)0x0) {\n    currentArraySize = currentValue[1];\n    shiftedValue = currentArraySize >> 2;\n    if (shiftedValue != 0) {\n      currentData = (undefined4 *)(*currentValue + -4);\n      iterationCount = 0;\n      do {\n        currentData = currentData + 1;\n        result = FUN_000839b4(value,*currentData,index);\n        iterationCount = iterationCount + 1;\n        if (result == -1) goto LAB_00082864;\n      } while (shiftedValue != iterationCount);\n      remainingArray = array[2];\n    }\n    remainingArray = (int *)((int)remainingArray - (currentArraySize & 0xfffffffc));\n    array[2] = remainingArray;\n    currentValue = currentValue + 2;\n  }\n  result = 0;\nLAB_00082864:\n  array[2] = (int *)0x0;\n  array[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082824": "process_data_00082824",
                "param_1": "value",
                "param_2": "index",
                "param_3": "array",
                "piVar1": "currentValue",
                "iVar2": "result",
                "piVar3": "remainingArray",
                "uVar4": "iterationCount",
                "puVar5": "currentData",
                "uVar6": "currentArraySize",
                "uVar7": "shiftedValue"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083ca8",
                "FUN_000839b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008289c": {
            "entrypoint": "0x0008289c",
            "current_name": "parse_format_string_0008289c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint parseFormatString_0008289c(int buffer,int format,int *******fmtStr,int **args)\n\n{\n  bool hasPlusFlag;\n  bool hasLeftJustifyFlag;\n  bool hasAlternativeFormFlag;\n  char cVar4;\n  bool hasZeroPadFlag;\n  int ********argPtrs;\n  int *argPtr1;\n  int numArgs;\n  char tempChar;\n  int *******currentChar;\n  uint digit;\n  int **argPtr2;\n  uint flagBits;\n  uint ch;\n  int iVar15;\n  int ********ppppppppiVar16;\n  int iVar17;\n  int *******remainingFmtStr;\n  int *argPtr;\n  int *******pppppppiVar20;\n  uint tempUInt;\n  int *argPtr3;\n  int *******pppppppiVar23;\n  undefined4 uVar24;\n  int ********ppppppppiVar25;\n  bool hasSignFlag;\n  longlong combinedArg;\n  int *******maxArgCount;\n  int *******remainingArgs;\n  int **argList;\n  int totalBytesWritten;\n  char *hexLowercase;\n  char currentFlagChar;\n  undefined zeroPadChar;\n  undefined hexUpperCase;\n  int ********currentArgPtr;\n  int argCount;\n  int *******argPtrList;\n  undefined formatChar;\n  char stackChar;\n  undefined local_69;\n  undefined local_68 [4];\n  int *******local_64 [16];\n  \n  if ((buffer != 0) && (*(int *)(buffer + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  flagBits = (uint)*(ushort *)(format + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(format + 0xc) << 0x12)) {\n    flagBits = flagBits | 0x2000;\n    *(short *)(format + 0xc) = (short)flagBits;\n    *(uint *)(format + 100) = *(uint *)(format + 100) & 0xffffdfff;\n  }\n  if (((int)(flagBits << 0x1c) < 0) && (*(int *)(format + 0x10) != 0)) {\n    if ((flagBits & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    numArgs = FUN_0008356c(buffer,format);\n    if (numArgs != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(format + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(format + 0xe)) {\n    numArgs = FUN_000834f0(buffer,format,fmtStr,args);\n    return numArgs;\n  }\nLAB_000828ee:\n  hexLowercase = (char *)0x0;\n  argPtrList = (int *******)0x0;\n  argCount = 0;\n  totalBytesWritten = 0;\n  argPtrs = (int ********)local_68;\n  argList = args;\n  currentArgPtr = (int ********)local_68;\nLAB_00082902:\n  currentChar = fmtStr;\n  if ((*(char *)fmtStr != '\\0') && (*(char *)fmtStr != '%')) {\n    do {\n      currentChar = (int *******)((int)currentChar + 1);\n      if (*(char *)currentChar == '\\0') break;\n    } while (*(char *)currentChar != '%');\n    pppppppiVar20 = (int *******)((int)currentChar - (int)fmtStr);\n    if (pppppppiVar20 != (int *******)0x0) {\n      argCount = argCount + 1;\n      argPtrList = (int *******)((int)argPtrList + (int)pppppppiVar20);\n      *argPtrs = fmtStr;\n      argPtrs[1] = pppppppiVar20;\n      if (argCount < 8) {\n        argPtrs = argPtrs + 2;\n      }\n      else {\n        if (argPtrList == (int *******)0x0) {\n          totalBytesWritten = totalBytesWritten + (int)pppppppiVar20;\n          argCount = 0;\n          argPtrs = (int ********)local_68;\n          goto LAB_00082952;\n        }\n        numArgs = FUN_00082824(buffer,format,&currentArgPtr);\n        argPtrs = (int ********)local_68;\n        if (numArgs != 0) goto LAB_00083142;\n      }\n      totalBytesWritten = totalBytesWritten + (int)pppppppiVar20;\n    }\n  }\nLAB_00082952:\n  if (*(char *)currentChar != '\\0') {\n    currentFlagChar = '\\0';\n    ch = (uint)*(byte *)((int)currentChar + 1);\n    flagBits = 0;\n    hasZeroPadFlag = false;\n    hasLeftJustifyFlag = false;\n    hasPlusFlag = false;\n    hasAlternativeFormFlag = false;\n    hasSignFlag = false;\n    pppppppiVar20 = (int *******)0x0;\n    remainingArgs = (int *******)0xffffffff;\n    fmtStr = (int *******)((int)currentChar + 1);\nLAB_00082976:\n    fmtStr = (int *******)((int)fmtStr + 1);\nLAB_0008297a:\n    switch(ch) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (ch != 0) {\n        maxArgCount = (int *******)0x1;\n        remainingArgs = (int *******)0x1;\n        ppppppppiVar25 = (int ********)&formatChar;\n        formatChar = (char)ch;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      hasAlternativeFormFlag = true;\n      ch = (uint)*(byte *)fmtStr;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppiVar20 = (int *******)*argList;\n      argList = argList + 1;\n      if ((int)pppppppiVar20 < 0) {\n        pppppppiVar20 = (int *******)-(int)pppppppiVar20;\n        goto switchD_00082984_caseD_2d;\n      }\n      ch = (uint)*(byte *)fmtStr;\n      goto LAB_00082976;\n    case 0x2b:\n      ch = (uint)*(byte *)fmtStr;\n      currentFlagChar = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      flagBits = flagBits | 4;\n      ch = (uint)*(byte *)fmtStr;\n      goto LAB_00082976;\n    case 0x2e:\n      ch = (uint)*(byte *)fmtStr;\n      currentChar = (int *******)((int)fmtStr + 1);\n      if (ch == 0x2a) {\n        ch = (uint)*(byte *)((int)fmtStr + 1);\n        remainingArgs = (int *******)*argList;\n        argList = argList + 1;\n        fmtStr = currentChar;\n        if ((int)remainingArgs < 0) {\n          remainingArgs = (int *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      digit = ch - 0x30;\n      if (digit < 10) {\n        tempUInt = 0;\n        do {\n          fmtStr = (int *******)((int)currentChar + 1);\n          ch = (uint)*(byte *)currentChar;\n          tempUInt = digit + tempUInt * 10;\n          digit = ch - 0x30;\n          currentChar = fmtStr;\n        } while (digit < 10);\n        remainingArgs = (int *******)(tempUInt | (int)tempUInt >> 0x1f);\n      }\n      else {\n        remainingArgs = (int *******)0x0;\n        fmtStr = currentChar;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      flagBits = flagBits | 0x80;\n      ch = (uint)*(byte *)fmtStr;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      hasLeftJustifyFlag = true;\n      if (hasPlusFlag == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      argList = (int **)((int)argList + 7U & 0xfffffff8);\n      argPtr = *argList;\n      argPtr3 = argList[1];\n      argList = argList + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      hasLeftJustifyFlag = true;\n      if (hasPlusFlag != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      numArgs = (uint)hasLeftJustifyFlag << 4;\n      iVar15 = (uint)hasPlusFlag << 5;\n      if ((hasLeftJustifyFlag == 0) && (iVar15 = (uint)hasSignFlag << 6, hasSignFlag != 0)) {\n        argPtr = (int *)(uint)*(ushort *)argList;\n        argList = argList + 1;\n        argPtr3 = (int *)0x0;\n      }\n      else {\n        numArgs = iVar15;\n        argPtr = *argList;\n        argList = argList + 1;\n        argPtr3 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      hasLeftJustifyFlag = true;\n      if (hasPlusFlag != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((hasLeftJustifyFlag) || (hasSignFlag == false)) {\n        numArgs = 1;\n        argPtr = *argList;\n        argList = argList + 1;\n        argPtr3 = (int *)0x0;\n      }\n      else {\n        argPtr3 = (int *)0x0;\n        argPtr = (int *)(uint)*(ushort *)argList;\n        argList = argList + 1;\n        numArgs = 1;\n      }\n      break;\n    case 0x58:\n      hexLowercase = \"0123456789ABCDEF\";\n      if (hasPlusFlag == false) goto LAB_00082efa;\nLAB_00082d1a:\n      argPtr2 = (int **)((int)argList + 7U & 0xfffffff8);\n      argList = argPtr2 + 2;\n      argPtr = *argPtr2;\n      argPtr3 = argPtr2[1];\n      goto LAB_00082d2e;\n    case 99:\n      argPtr = *argList;\n      argList = argList + 1;\n      maxArgCount = (int *******)0x1;\n      formatChar = SUB41(argPtr,0);\n      remainingArgs = (int *******)0x1;\n      ppppppppiVar25 = (int ********)&formatChar;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (hasPlusFlag != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((hasLeftJustifyFlag == false) && (hasSignFlag != false)) {\n        argPtr = (int *)(int)*(short *)argList;\n        argList = argList + 1;\n        argPtr3 = (int *)((int)argPtr >> 0x1f);\n      }\n      else {\n        argPtr = *argList;\n        argList = argList + 1;\n        argPtr3 = (int *)((int)argPtr >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)argPtr3 < 0) {\n        hasSignFlag = argPtr != (int *)0x0;\n        argPtr = (int *)-(int)argPtr;\n        argPtr3 = (int *)(-(int)argPtr3 - (uint)hasSignFlag);\n        currentFlagChar = '-';\n        cVar4 = '-';\n        numArgs = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)remainingArgs) {\n        flagBits = flagBits & 0xffffff7f;\n      }\n      hasZeroPadFlag = false;\n      ch = (uint)argPtr | (uint)argPtr3;\n      numArgs = 1;\n      cVar4 = currentFlagChar;\n      goto joined_r0x00082adc;\n    case 0x68:\n      hasSignFlag = true;\n      ch = (uint)*(byte *)fmtStr;\n      goto LAB_00082976;\n    case 0x6c:\n      ch = (uint)*(byte *)fmtStr;\n      if (ch == 0x6c) {\n        hasPlusFlag = true;\n        ch = (uint)*(byte *)((int)fmtStr + 1);\n        fmtStr = (int *******)((int)fmtStr + 1);\n      }\n      else {\n        hasLeftJustifyFlag = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (hasPlusFlag == false) {\n        if (hasLeftJustifyFlag == false) {\n          if (hasSignFlag) {\n            argPtr = *argList;\n            argList = argList + 1;\n            *(short *)argPtr = (short)totalBytesWritten;\n          }\n          else {\n            argPtr = *argList;\n            argList = argList + 1;\n            *argPtr = totalBytesWritten;\n          }\n        }\n        else {\n          argPtr = *argList;\n          argList = argList + 1;\n          *argPtr = totalBytesWritten;\n        }\n      }\n      else {\n        argPtr = *argList;\n        argList = argList + 1;\n        *argPtr = totalBytesWritten;\n        argPtr[1] = totalBytesWritten >> 0x1f;\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (hasPlusFlag == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      argPtr2 = (int **)((int)argList + 7U & 0xfffffff8);\n      argList = argPtr2 + 2;\n      argPtr = *argPtr2;\n      argPtr3 = argPtr2[1];\n      numArgs = 0;\n      break;\n    case 0x70:\n      argPtr = *argList;\n      argList = argList + 1;\n      hexUpperCase = 0x78;\n      hasZeroPadFlag = true;\n      argPtr3 = (int *)0x0;\n      zeroPadChar = 0x30;\n      hexLowercase = \"0123456789abcdef\";\n      numArgs = 2;\n      break;\n    case 0x71:\n      hasPlusFlag = true;\n      ch = (uint)*(byte *)fmtStr;\n      goto LAB_00082976;\n    case 0x73:\n      ppppppppiVar25 = (int ********)*argList;\n      currentFlagChar = '\\0';\n      argList = argList + 1;\n      if (ppppppppiVar25 != (int ********)0x0) {\n        if ((int)remainingArgs < 0) {\n          remainingArgs = (int *******)FUN_00082688(ppppppppiVar25);\n          currentChar = (int *******)0x0;\n          cVar4 = currentFlagChar;\n        }\n        else {\n          numArgs = FUN_000840f8(ppppppppiVar25,0,remainingArgs);\n          cVar4 = currentFlagChar;\n          if (numArgs == 0) {\n            currentChar = (int *******)0x0;\n          }\n          else {\n            remainingFmtStr = (int *******)(numArgs - (int)ppppppppiVar25);\n            if ((int)remainingArgs <= (int)(int *******)(numArgs - (int)ppppppppiVar25)) {\n              remainingFmtStr = remainingArgs;\n            }\n            currentChar = (int *******)0x0;\n            remainingArgs = remainingFmtStr;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((int *******)0x5 < remainingArgs) {\n        remainingArgs = (int *******)0x6;\n      }\n      maxArgCount = (int *******)((uint)remainingArgs & ~((int)remainingArgs >> 0x1f));\n      ppppppppiVar25 = (int ********)&UNK_00085728;\nLAB_00082d76:\n      currentFlagChar = '\\0';\n      currentChar = (int *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!hasPlusFlag) goto LAB_00082ce0;\nLAB_00082bc6:\n      argPtr2 = (int **)((int)argList + 7U & 0xfffffff8);\n      argList = argPtr2 + 2;\n      argPtr = *argPtr2;\n      argPtr3 = argPtr2[1];\n      numArgs = 1;\n      break;\n    case 0x78:\n      hexLowercase = \"0123456789abcdef\";\n      if (hasPlusFlag != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((hasLeftJustifyFlag == false) && (hasSignFlag != false)) {\n        argPtr3 = (int *)0x0;\n        argPtr = (int *)(uint)*(ushort *)argList;\n        argList = argList + 1;\n      }\n      else {\n        argPtr = *argList;\n        argList = argList + 1;\n        argPtr3 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((hasAlternativeFormFlag) && (((uint)argPtr | (uint)argPtr3) != 0)) {\n        hasZeroPadFlag = true;\n        zeroPadChar = 0x30;\n        numArgs = 2;\n        hexUpperCase = (char)ch;\n      }\n      else {\n        numArgs = 2;\n      }\n    }\n    currentFlagChar = '\\0';\n    cVar4 = '\\0';\nLAB_00082ace:\n    if (-1 < (int)remainingArgs) {\n      flagBits = flagBits & 0xffffff7f;\n    }\n    ch = (uint)argPtr | (uint)argPtr3;\njoined_r0x00082adc:\n    combinedArg = CONCAT44(argPtr3,argPtr);\n    currentChar = remainingArgs;\n    if ((ch == 0) && (remainingArgs == (int *******)0x0)) {\n      ppppppppiVar25 = (int ********)local_68;\n      if ((numArgs != 0) || (!hasAlternativeFormFlag)) goto LAB_00082b04;\n      ppppppppiVar25 = (int ********)(&stackChar + 1);\n      local_69 = '0';\n      goto LAB_00082afe;\n    }\n    if (numArgs == 1) {\n      if (argPtr3 != (int *)0x0 || (int *)0x9 < argPtr) {\n        ppppppppiVar16 = (int ********)(&stackChar + 1);\n        do {\n          ppppppppiVar25 = ppppppppiVar16;\n          uVar24 = (undefined4)((ulonglong)combinedArg >> 0x20);\n          tempChar = '\\n';\n          FUN_00084530((int)combinedArg,uVar24,10,0);\n          *(char *)ppppppppiVar25 = tempChar + '0';\n          combinedArg = FUN_00084530((int)combinedArg,uVar24,10,0);\n          ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n        } while (combinedArg != 0);\n        remainingArgs = (int *******)((int)local_68 - (int)ppppppppiVar25);\n        goto LAB_00082b04;\n      }\n      local_69 = (char)argPtr + '0';\n      ppppppppiVar25 = (int ********)(&stackChar + 1);\n      goto LAB_00083282;\n    }\n    ppppppppiVar16 = (int ********)(&stackChar + 1);\n    if (numArgs != 2) goto LAB_000830e2;\n    do {\n      ppppppppiVar25 = ppppppppiVar16;\n      ch = (uint)argPtr & 0xf;\n      argPtr = (int *)((uint)argPtr >> 4 | (int)argPtr3 << 0x1c);\n      argPtr3 = (int *)((uint)argPtr3 >> 4);\n      *(char *)ppppppppiVar25 = hexLowercase[ch];\n      ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    } while (((uint)argPtr | (uint)argPtr3) != 0);\n    remainingArgs = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (argPtrList != (int *******)0x0) {\n    FUN_00082824(buffer,format,&currentArgPtr);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(format + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return totalBytesWritten;\nLAB_000830e2:\n  do {\n    ppppppppiVar25 = ppppppppiVar16;\n    argPtr1 = (int *)((uint)argPtr >> 3 | (int)argPtr3 << 0x1d);\n    argPtr3 = (int *)((uint)argPtr3 >> 3);\n    numArgs = ((uint)argPtr & 7) + 0x30;\n    *(char *)ppppppppiVar25 = (char)numArgs;\n    ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    argPtr = argPtr1;\n  } while (((uint)argPtr1 | (uint)argPtr3) != 0);\n  if (hasAlternativeFormFlag) {\n    if (numArgs == 0x30) {\nLAB_00082afe:\n      remainingArgs = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    }\n    else {\n      *(undefined *)((int)ppppppppiVar25 + -1) = 0x30;\n      ppppppppiVar25 = ppppppppiVar16;\n      remainingArgs = (int *******)((int)local_68 - (int)ppppppppiVar16);\n    }\n  }\n  else {\nLAB_00083282:\n    remainingArgs = (int *******)((int)local_68 - (int)ppppppppiVar25);\n  }\nLAB_00082b04:\n  maxArgCount = remainingArgs;\n  if ((int)remainingArgs < (int)currentChar) {\n    maxArgCount = currentChar;\n  }\n  if (cVar4 != '\\0') {\n    maxArgCount = (int *******)((int)maxArgCount + 1);\n  }\nLAB_00082b1e:\n  if (hasZeroPadFlag) {\n    maxArgCount = (int *******)((int)maxArgCount + 2);\n  }\n  if ((flagBits == 0) &&\n     (remainingFmtStr = (int *******)((int)pppppppiVar20 - (int)maxArgCount), 0 < (int)remainingFmtStr)) {\n    if ((int)remainingFmtStr < 0x11) {\n      argCount = argCount + 1;\n    }\n    else {\n      do {\n        pppppppiVar23 = remainingFmtStr;\n        numArgs = argCount + 1;\n        argPtrList = argPtrList + 4;\n        *argPtrs = (int *******)0x856f0;\n        argPtrs[1] = (int *******)0x10;\n        if (numArgs < 8) {\n          iVar15 = argCount + 2;\n          argPtrs = argPtrs + 2;\n          argCount = numArgs;\n        }\n        else if (argPtrList == (int *******)0x0) {\n          iVar15 = 1;\n          argPtrs = (int ********)local_68;\n          argCount = 0;\n        }\n        else {\n          argCount = numArgs;\n          numArgs = FUN_00082824(buffer,format,&currentArgPtr);\n          if (numArgs != 0) goto LAB_00083142;\n          iVar15 = argCount + 1;\n          argPtrs = (int ********)local_68;\n        }\n        remainingFmtStr = pppppppiVar23 + -4;\n      } while (0x10 < (int)remainingFmtStr);\n      remainingFmtStr = pppppppiVar23 + -4;\n      argCount = iVar15;\n    }\n    argPtrList = (int *******)((int)argPtrList + (int)remainingFmtStr);\n    *argPtrs = (int *******)0x856f0;\n    argPtrs[1] = remainingFmtStr;\n    if (argCount < 8) {\n      numArgs = argCount + 1;\n      argPtrs = argPtrs + 2;\n    }\n    else if (argPtrList == (int *******)0x0) {\n      numArgs = 1;\n      argCount = 0;\n      argPtrs = (int ********)local_68;\n    }\n    else {\n      numArgs = FUN_00082824(buffer,format,&currentArgPtr);\n      if (numArgs != 0) goto LAB_00083142;\n      numArgs = argCount + 1;\n      argPtrs = (int ********)local_68;\n    }\n  }\n  else {\n    numArgs = argCount + 1;\n  }\n  iVar15 = numArgs;\n  if (currentFlagChar != '\\0') {\n    argPtrList = (int *******)((int)argPtrList + 1);\n    iVar15 = 1;\n    *argPtrs = (int *******)&currentFlagChar;\n    argPtrs[1] = (int *******)0x1;\n    argCount = numArgs;\n    if (numArgs < 8) {\n      iVar15 = numArgs + 1;\n      argPtrs = argPtrs + 2;\n    }\n    else if (argPtrList == (int *******)0x0) {\n      argCount = 0;\n      argPtrs = (int ********)local_68;\n    }\n    else {\n      numArgs = FUN_00082824(buffer,format,&currentArgPtr);\n      if (numArgs != 0) goto LAB_00083142;\n      iVar15 = argCount + 1;\n      argPtrs = (int ********)local_68;\n    }\n  }\n  numArgs = iVar15;\n  iVar17 = argCount;\n  if (hasZeroPadFlag) {\n    argPtrList = (int *******)((int)argPtrList + 2);\n    *argPtrs = (int *******)&zeroPadChar;\n    argPtrs[1] = (int *******)0x2;\n    if (iVar15 < 8) {\n      numArgs = iVar15 + 1;\n      iVar17 = iVar15;\n      argPtrs = argPtrs + 2;\n    }\n    else if (argPtrList == (int *******)0x0) {\n      numArgs = 1;\n      iVar17 = 0;\n      argPtrs = (int ********)local_68;\n    }\n    else {\n      argCount = iVar15;\n      numArgs = FUN_00082824(buffer,format,&currentArgPtr);\n      if (numArgs != 0) goto LAB_00083142;\n      numArgs = argCount + 1;\n      iVar17 = argCount;\n      argPtrs = (int ********)local_68;\n    }\n  }\n  argCount = iVar17;\n  if ((flagBits == 0x80) &&\n     (remainingFmtStr = (int *******)((int)pppppppiVar20 - (int)maxArgCount), 0 < (int)remainingFmtStr)) {\n    if (0x10 < (int)remainingFmtStr) {\n      do {\n        while( true ) {\n          pppppppiVar23 = remainingFmtStr;\n          argCount = iVar17 + 1;\n          argPtrList = argPtrList + 4;\n          *argPtrs = (int *******)\"0000000000000000\";\n          argPtrs[1] = (int *******)0x10;\n          if (7 < argCount) break;\n          numArgs = iVar17 + 2;\n          argPtrs = argPtrs + 2;\nLAB_000831f2:\n          iVar17 = argCount;\n          remainingFmtStr = pppppppiVar23 + -4;\n          if ((int)(pppppppiVar23 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (argPtrList != (int *******)0x0) {\n          numArgs = FUN_00082824(buffer,format,&currentArgPtr);\n          if (numArgs == 0) {\n            numArgs = argCount + 1;\n            argPtrs = (int ********)local_68;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        numArgs = 1;\n        iVar17 = 0;\n        remainingFmtStr = pppppppiVar23 + -4;\n        argPtrs = (int ********)local_68;\n      } while (0x10 < (int)(pppppppiVar23 + -4));\nLAB_00083218:\n      remainingFmtStr = pppppppiVar23 + -4;\n    }\n    argPtrList = (int *******)((int)argPtrList + (int)remainingFmtStr);\n    *argPtrs = (int *******)\"0000000000000000\";\n    argPtrs[1] = remainingFmtStr;\n    argCount = numArgs;\n    if (numArgs < 8) {\n      numArgs = numArgs + 1;\n      argPtrs = argPtrs + 2;\n    }\n    else if (argPtrList == (int *******)0x0) {\n      numArgs = 1;\n      argCount = 0;\n      argPtrs = (int ********)local_68;\n    }\n    else {\n      numArgs = FUN_00082824(buffer,format,&currentArgPtr);\n      if (numArgs != 0) goto LAB_00083142;\n      numArgs = argCount + 1;\n      argPtrs = (int ********)local_68;\n    }\n  }\n  currentChar = (int *******)((int)currentChar - (int)remainingArgs);\n  ppppppppiVar16 = (int ********)local_68;\n  if ((int)currentChar < 1) {\nLAB_0008302a:\n    argPtrList = (int *******)((int)argPtrList + (int)remainingArgs);\n    *argPtrs = (int *******)ppppppppiVar25;\n    argPtrs[1] = remainingArgs;\n    remainingArgs = argPtrList;\n    argCount = numArgs;\n    if (numArgs < 8) goto LAB_000831be;\n    if (argPtrList == (int *******)0x0) {\n      argCount = 0;\n    }\n    else {\n      numArgs = FUN_00082824(buffer,format,&currentArgPtr);\n      if (numArgs != 0) goto LAB_00083142;\n    }\n  }\n  else {\n    iVar15 = argCount;\n    if (0x10 < (int)currentChar) {\n      do {\n        while( true ) {\n          remainingFmtStr = currentChar;\n          argCount = iVar15 + 1;\n          argPtrList = argPtrList + 4;\n          *argPtrs = (int *******)\"0000000000000000\";\n          argPtrs[1] = (int *******)0x10;\n          if (7 < argCount) break;\n          numArgs = iVar15 + 2;\n          argPtrs = argPtrs + 2;\nLAB_00082fe6:\n          iVar15 = argCount;\n          currentChar = remainingFmtStr + -4;\n          if ((int)(remainingFmtStr + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (argPtrList != (int *******)0x0) {\n          numArgs = FUN_00082824(buffer,format,&currentArgPtr);\n          if (numArgs == 0) {\n            numArgs = argCount + 1;\n            argPtrs = (int ********)local_68;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        numArgs = 1;\n        argPtrs = (int ********)local_68;\n        iVar15 = 0;\n        currentChar = remainingFmtStr + -4;\n      } while (0x10 < (int)(remainingFmtStr + -4));\nLAB_0008300e:\n      currentChar = remainingFmtStr + -4;\n    }\n    argPtrList = (int *******)((int)argPtrList + (int)currentChar);\n    *argPtrs = (int *******)\"0000000000000000\";\n    argPtrs[1] = currentChar;\n    if (numArgs < 8) {\n      numArgs = numArgs + 1;\n      argPtrs = argPtrs + 2;\n      goto LAB_0008302a;\n    }\n    if (argPtrList != (int *******)0x0) {\n      argCount = numArgs;\n      numArgs = FUN_00082824(buffer,format,&currentArgPtr);\n      if (numArgs != 0) goto LAB_00083142;\n      numArgs = argCount + 1;\n      argPtrs = (int ********)local_68;\n      goto LAB_0008302a;\n    }\n    local_64[0] = remainingArgs;\n    argCount = 1;\n    argPtrs = (int ********)local_68;\n    local_68 = (undefined  [4])ppppppppiVar25;\nLAB_000831be:\n    ppppppppiVar16 = argPtrs + 2;\n    argPtrList = remainingArgs;\n  }\n  if (((flagBits & 4) != 0) &&\n     (currentChar = (int *******)((int)pppppppiVar20 - (int)maxArgCount), 0 < (int)currentChar)) {\n    numArgs = argCount;\n    if ((int)currentChar < 0x11) {\n      iVar15 = argCount + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          argCount = numArgs + 1;\n          argPtrList = argPtrList + 4;\n          *ppppppppiVar16 = (int *******)0x856f0;\n          ppppppppiVar16[1] = (int *******)0x10;\n          if (7 < argCount) break;\n          iVar15 = numArgs + 2;\n          ppppppppiVar16 = ppppppppiVar16 + 2;\nLAB_0008307a:\n          currentChar = currentChar + -4;\n          numArgs = argCount;\n          if ((int)currentChar < 0x11) goto LAB_000830a2;\n        }\n        if (argPtrList != (int *******)0x0) {\n          numArgs = FUN_00082824(buffer,format,&currentArgPtr);\n          if (numArgs == 0) {\n            iVar15 = argCount + 1;\n            ppppppppiVar16 = (int ********)local_68;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        currentChar = currentChar + -4;\n        iVar15 = 1;\n        numArgs = 0;\n        ppppppppiVar16 = (int ********)local_68;\n      } while (0x10 < (int)currentChar);\n    }\nLAB_000830a2:\n    argPtrList = (int *******)((int)argPtrList + (int)currentChar);\n    *ppppppppiVar16 = (int *******)0x856f0;\n    ppppppppiVar16[1] = currentChar;\n    argCount = iVar15;\n    if (7 < iVar15) {\n      if (argPtrList == (int *******)0x0) {\n        if ((int)maxArgCount < (int)pppppppiVar20) {\n          maxArgCount = pppppppiVar20;\n        }\n        totalBytesWritten = totalBytesWritten + (int)maxArgCount;\n        goto LAB_00083186;\n      }\n      numArgs = FUN_00082824(buffer,format,&currentArgPtr);\n      if (numArgs != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)maxArgCount < (int)pppppppiVar20) {\n    maxArgCount = pppppppiVar20;\n  }\n  totalBytesWritten = totalBytesWritten + (int)maxArgCount;\n  if ((argPtrList != (int *******)0x0) &&\n     (numArgs = FUN_00082824(buffer,format,&currentArgPtr), numArgs != 0)) goto LAB_00083142;\nLAB_00083186:\n  argCount = 0;\n  argPtrs = (int ********)local_68;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  digit = ch - 0x30;\n  pppppppiVar20 = (int *******)0x0;\n  currentChar = fmtStr;\n  do {\n    fmtStr = (int *******)((int)currentChar + 1);\n    ch = (uint)*(byte *)currentChar;\n    pppppppiVar20 = (int *******)(digit + (int)pppppppiVar20 * 10);\n    digit = ch - 0x30;\n    currentChar = fmtStr;\n  } while (digit < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  ch = (uint)*(byte *)fmtStr;\n  if (currentFlagChar == '\\0') {\n    currentFlagChar = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "renaming": {
                "FUN_0008289c": "parse_format_string_0008289c",
                "param_1": "buffer",
                "param_2": "format",
                "param_3": "fmtStr",
                "param_4": "args",
                "bVar1": "hasPlusFlag",
                "bVar2": "hasLeftJustifyFlag",
                "bVar3": "hasAlternativeFormFlag",
                "bVar5": "hasZeroPadFlag",
                "bVar26": "hasSignFlag",
                "ppppppppiVar6": "argPtrs",
                "piVar7": "argPtr1",
                "iVar8": "numArgs",
                "cVar9": "tempChar",
                "pppppppiVar10": "currentChar",
                "uVar11": "digit",
                "ppiVar12": "argPtr2",
                "uVar13": "flagBits",
                "uVar14": "ch",
                "pppppppiVar18": "remainingFmtStr",
                "piVar19": "argPtr",
                "uVar21": "tempUInt",
                "piVar22": "argPtr3",
                "lVar27": "combinedArg",
                "local_dc": "maxArgCount",
                "local_d4": "remainingArgs",
                "local_c8": "argList",
                "local_c4": "totalBytesWritten",
                "local_c0": "hexLowercase",
                "local_a1": "currentFlagChar",
                "local_a0": "zeroPadChar",
                "local_9f": "hexUpperCase",
                "local_9c": "currentArgPtr",
                "local_98": "argCount",
                "local_94": "argPtrList",
                "local_90": "formatChar",
                "cStack_6a": "stackChar"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_00081750",
                "FUN_000817c8"
            ],
            "called": [
                "FUN_000834f0",
                "FUN_00082824",
                "FUN_0008356c",
                "FUN_000840f8",
                "FUN_00084530",
                "FUN_00082688",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000834f0": {
            "entrypoint": "0x000834f0",
            "current_name": "decode_and_verify_data_000834f0",
            "code": "\nint decodeAndVerifyData_000834f0(undefined4 input1,int input2)\n\n{\n  int result;\n  int checkResult;\n  undefined *localPointers [2];\n  undefined4 localSize1;\n  ushort localValue1;\n  undefined2 localValue2;\n  undefined *localPointer;\n  undefined4 localSize2;\n  undefined4 localValue3;\n  undefined4 localSize3;\n  undefined4 localSize4;\n  undefined4 localSize5;\n  undefined localArray [1024];\n  \n  localSize5 = *(undefined4 *)(input2 + 100);\n  localSize3 = *(undefined4 *)(input2 + 0x1c);\n  localValue2 = *(undefined2 *)(input2 + 0xe);\n  localSize4 = *(undefined4 *)(input2 + 0x24);\n  localPointers[0] = localArray;\n  localValue1 = *(ushort *)(input2 + 0xc) & 0xfffd;\n  localSize1 = 0x400;\n  localSize2 = 0x400;\n  localValue3 = 0;\n  localPointer = localPointers[0];\n  result = FUN_0008289c(input1,localPointers);\n  if ((-1 < result) && (checkResult = FUN_00083850(input1,localPointers), checkResult != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)localValue1 << 0x19) < 0) {\n    *(ushort *)(input2 + 0xc) = *(ushort *)(input2 + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000834f0": "decode_and_verify_data_000834f0",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "result",
                "iVar2": "checkResult",
                "local_488": "localPointers",
                "local_480": "localSize1",
                "local_47c": "localValue1",
                "local_47a": "localValue2",
                "local_478": "localPointer",
                "local_474": "localSize2",
                "local_470": "localValue3",
                "local_46c": "localSize3",
                "local_464": "localSize4",
                "local_424": "localSize5",
                "auStack_420": "localArray"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_0008289c",
                "FUN_00083850"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008356c": {
            "entrypoint": "0x0008356c",
            "current_name": "decode_and_validate_0008356c",
            "code": "\nundefined4 decode_and_validate_0008356c(undefined4 *output_status,int *input_data)\n\n{\n  int var1;\n  int var2;\n  uint temp_var;\n  ushort temp_var_2;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  temp_var_2 = *(ushort *)(input_data + 3);\n  temp_var = (uint)temp_var_2;\n  if ((int)(temp_var << 0x1c) < 0) {\n    var2 = input_data[4];\n  }\n  else {\n    if (-1 < (int)(temp_var << 0x1b)) {\n      *output_status = 9;\n      *(ushort *)(input_data + 3) = temp_var_2 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(temp_var << 0x1d) < 0) {\n      if ((int *)input_data[0xc] != (int *)0x0) {\n        if ((int *)input_data[0xc] != input_data + 0x10) {\n          FUN_00083b10(output_status);\n          temp_var_2 = *(ushort *)(input_data + 3);\n        }\n        input_data[0xc] = 0;\n      }\n      var2 = input_data[4];\n      temp_var_2 = temp_var_2 & 0xffdb;\n      *input_data = var2;\n      input_data[1] = 0;\n    }\n    else {\n      var2 = input_data[4];\n    }\n    *(ushort *)(input_data + 3) = temp_var_2 | 8;\n    temp_var = (uint)(temp_var_2 | 8);\n  }\n  if ((var2 == 0) && ((temp_var & 0x280) != 0x200)) {\n    FUN_00084018(output_status,input_data);\n    temp_var = (uint)*(ushort *)(input_data + 3);\n    var2 = input_data[4];\n  }\n  if ((temp_var & 1) == 0) {\n    var1 = 0;\n    if (-1 < (int)(temp_var << 0x1e)) {\n      var1 = input_data[5];\n    }\n    input_data[2] = var1;\n  }\n  else {\n    input_data[6] = -input_data[5];\n    input_data[2] = 0;\n  }\n  if ((var2 == 0) && ((int)((uint)*(ushort *)(input_data + 3) << 0x18) < 0)) {\n    *(ushort *)(input_data + 3) = *(ushort *)(input_data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0008356c": "decode_and_validate_0008356c",
                "param_1": "output_status",
                "param_2": "input_data",
                "iVar1": "var1",
                "iVar2": "var2",
                "uVar3": "temp_var",
                "uVar4": "temp_var_2"
            },
            "calling": [
                "FUN_0008289c",
                "FUN_000842a4",
                "FUN_00083ca8"
            ],
            "called": [
                "FUN_00083b10",
                "FUN_00084018",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000836d8": {
            "entrypoint": "0x000836d8",
            "current_name": "FUNC_000836d8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x00083630) */\n/* WARNING: Removing unreachable block (ram,0x000836c4) */\n/* WARNING: Removing unreachable block (ram,0x00083642) */\n/* WARNING: Removing unreachable block (ram,0x00083648) */\n/* WARNING: Removing unreachable block (ram,0x00083654) */\n/* WARNING: Removing unreachable block (ram,0x0008366e) */\n/* WARNING: Removing unreachable block (ram,0x0008364c) */\n/* WARNING: Removing unreachable block (ram,0x00083686) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n/* WARNING: Removing unreachable block (ram,0x00083688) */\n\nvoid FUNC_000836d8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836d8": "FUNC_000836d8"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000836ec": {
            "entrypoint": "0x000836ec",
            "current_name": "initialize_function_000836ec",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n\nvoid initializeFunction_000836ec(void)\n\n{\n  dword *pointer1;\n  dword value;\n  int index;\n  code *jumpTable;\n  \n  FUN_000841e4(6);\n  jumpTable = (code *)0x836fb;\n  value = FUN_00080eec(1);\n  if (relArray[48].r_offset == 0) {\n    relArray[48].r_offset = 0x20070184;\n  }\n  index = *(int *)(relArray[48].r_offset + 4);\n  pointer1 = (dword *)relArray[48].r_offset;\n  if (0x1f < index) {\n    pointer1 = (dword *)FUN_000817f0(400);\n    if (pointer1 == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)(0xffffffff);\n      return;\n    }\n    *pointer1 = relArray[48].r_offset;\n    pointer1[1] = 0;\n    index = 0;\n    relArray[48].r_offset = (dword)pointer1;\n    pointer1[0x62] = 0;\n    pointer1[99] = 0;\n  }\n  pointer1[1] = index + 1;\n  pointer1[index + 2] = value;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836ec": "initialize_function_000836ec",
                "pdVar1": "pointer1",
                "dVar2": "value",
                "iVar3": "index",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable",
                "Elf32_Rel_ARRAY_20070000": "relArray"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_000841e4",
                "FUN_00080eec",
                "FUN_000817f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083850": {
            "entrypoint": "0x00083850",
            "current_name": "decompress_data_00083850",
            "code": "\nundefined4 decompressData_00083850(int *inputData,int *headerData)\n\n{\n  int *tempVar1;\n  int tempVar2;\n  ushort headerFlags;\n  uint tempVar4;\n  int tempVar5;\n  code *callbackFunction;\n  undefined4 returnValue;\n  int tempVar7;\n  \n  if ((inputData != (int *)0x0) && (inputData[0xe] == 0)) {\n    FUN_00083888();\n  }\n  if (*(short *)(headerData + 3) == 0) {\n    return 0;\n  }\n  headerFlags = *(ushort *)(headerData + 3);\n  if ((int)((uint)headerFlags << 0x1c) < 0) {\n    tempVar7 = headerData[4];\n    if (tempVar7 == 0) {\n      return 0;\n    }\n    tempVar2 = *headerData;\n    if ((headerFlags & 3) == 0) {\n      tempVar5 = headerData[5];\n    }\n    else {\n      tempVar5 = 0;\n    }\n    *headerData = tempVar7;\n    tempVar2 = tempVar2 - tempVar7;\n    headerData[2] = tempVar5;\n    do {\n      if (tempVar2 < 1) {\n        return 0;\n      }\n      tempVar5 = (*(code *)headerData[9])(inputData,headerData[7],tempVar7,tempVar2,returnValue);\n      tempVar2 = tempVar2 - tempVar5;\n      tempVar7 = tempVar7 + tempVar5;\n    } while (0 < tempVar5);\nLAB_000837c8:\n    *(ushort *)(headerData + 3) = *(ushort *)(headerData + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(headerData + 3) = headerFlags | 0x800;\n  if ((headerData[1] < 1) && (headerData[0xf] < 1)) {\n    return 0;\n  }\n  callbackFunction = (code *)headerData[10];\n  if (callbackFunction == (code *)0x0) {\n    return 0;\n  }\n  tempVar4 = (uint)(headerFlags | 0x800);\n  tempVar7 = *inputData;\n  *inputData = 0;\n  if ((headerFlags & 0x1000) == 0) {\n    tempVar2 = (*callbackFunction)(inputData,headerData[7],tempVar4 & 0x1000,1);\n    if ((tempVar2 == -1) && (tempVar5 = *inputData, tempVar5 != 0)) {\n      if ((tempVar5 == 0x1d) || (tempVar5 == 0x16)) {\n        *inputData = tempVar7;\n        return 0;\n      }\n      goto LAB_000837c8;\n    }\n    tempVar4 = (uint)*(ushort *)(headerData + 3);\n    callbackFunction = (code *)headerData[10];\n  }\n  else {\n    tempVar2 = headerData[0x14];\n  }\n  if (((int)(tempVar4 << 0x1d) < 0) && (tempVar2 = tempVar2 - headerData[1], headerData[0xc] != 0)) {\n    tempVar2 = tempVar2 - headerData[0xf];\n  }\n  tempVar2 = (*callbackFunction)(inputData,headerData[7],tempVar2,0);\n  if (tempVar2 == -1) {\n    tempVar5 = *inputData;\n    if (tempVar5 != 0) {\n      if ((tempVar5 != 0x1d) && (tempVar5 != 0x16)) {\n        *(ushort *)(headerData + 3) = *(ushort *)(headerData + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(headerData + 3) = *(ushort *)(headerData + 3) & 0xf7ff;\n      *headerData = headerData[4];\n      headerData[1] = 0;\n      goto LAB_00083774;\n    }\n    headerFlags = *(ushort *)(headerData + 3) & 0xf7ff;\n    headerData[1] = 0;\n    *(ushort *)(headerData + 3) = headerFlags;\n    *headerData = headerData[4];\n  }\n  else {\n    headerFlags = *(ushort *)(headerData + 3) & 0xf7ff;\n    *headerData = headerData[4];\n    *(ushort *)(headerData + 3) = headerFlags;\n    headerData[1] = 0;\n  }\n  if ((int)((uint)headerFlags << 0x13) < 0) {\n    headerData[0x14] = tempVar2;\n  }\nLAB_00083774:\n  tempVar1 = (int *)headerData[0xc];\n  *inputData = tempVar7;\n  if (tempVar1 == (int *)0x0) {\n    return 0;\n  }\n  if (tempVar1 != headerData + 0x10) {\n    FUN_00083b10(inputData);\n  }\n  headerData[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083850": "decompress_data_00083850",
                "param_1": "inputData",
                "param_2": "headerData",
                "piVar1": "tempVar1",
                "iVar2": "tempVar2",
                "uVar3": "headerFlags",
                "uVar4": "tempVar4",
                "iVar5": "tempVar5",
                "pcVar6": "callbackFunction",
                "unaff_r4": "returnValue",
                "iVar7": "tempVar7"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_00084484",
                "FUN_000842a4",
                "FUN_00083ca8"
            ],
            "called": [
                "FUN_00083b10",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083888": {
            "entrypoint": "0x00083888",
            "current_name": "initialize_data_structures_00083888",
            "code": "\nvoid initializeDataStructures_00083888(int dataStructures)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if (*(int *)(dataStructures + 0x38) == 0) {\n    ptr1 = *(undefined4 **)(dataStructures + 4);\n    *(undefined **)(dataStructures + 0x3c) = &LAB_0008387c_1;\n    *(undefined4 *)(dataStructures + 0x2e4) = 3;\n    *(int *)(dataStructures + 0x2e8) = dataStructures + 0x2ec;\n    *(undefined4 *)(dataStructures + 0x2e0) = 0;\n    *(undefined2 *)(ptr1 + 3) = 4;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    FUN_00081f00(ptr1 + 0x17,0,8);\n    ptr2 = *(undefined4 **)(dataStructures + 8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84221;\n    ptr1[9] = 0x84245;\n    ptr1[10] = 0x8427d;\n    ptr1[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\n    *(undefined2 *)(ptr2 + 3) = 9;\n    *ptr2 = 0;\n    ptr2[1] = 0;\n    ptr2[2] = 0;\n    ptr2[0x19] = 0;\n    ptr2[4] = 0;\n    ptr2[5] = 0;\n    ptr2[6] = 0;\n    FUN_00081f00(ptr2 + 0x17,0,8);\n    ptr1 = *(undefined4 **)(dataStructures + 0xc);\n    ptr2[7] = ptr2;\n    ptr2[8] = 0x84221;\n    ptr2[9] = 0x84245;\n    ptr2[10] = 0x8427d;\n    ptr2[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)(ptr1 + 3) = 0x12;\n    *(undefined2 *)((int)ptr1 + 0xe) = 2;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    FUN_00081f00(ptr1 + 0x17,0,8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84221;\n    ptr1[9] = 0x84245;\n    ptr1[10] = 0x8427d;\n    ptr1[0xb] = &LAB_0008429c_1;\n    *(undefined4 *)(dataStructures + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "dataStructures",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "calling": [
                "FUN_0008289c",
                "FUN_0008356c",
                "FUN_00083850",
                "FUN_00084484",
                "FUN_000842a4"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008397c": {
            "entrypoint": "0x0008397c",
            "current_name": "FUNC_0008397c",
            "code": "\nvoid FUNC_0008397c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008397c": "FUNC_0008397c"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083980": {
            "entrypoint": "0x00083980",
            "current_name": "FUNC_00083980",
            "code": "\nvoid FUNC_00083980(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083980": "FUNC_00083980"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000839b4": {
            "entrypoint": "0x000839b4",
            "current_name": "extract_data_from_binary_000839b4",
            "code": "\nuint extractDataFromBinary_000839b4(undefined4 param1,uint param2,byte **param3)\n\n{\n  int index;\n  uint result;\n  uint data;\n  byte *bytePointer;\n  uint counter;\n  byte byteValue;\n  byte byteArray [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(param3 + 3) << 0x12)) {\n    *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x2000;\n    param3[0x19] = (byte *)((uint)param3[0x19] | 0x2000);\n  }\n  index = FUN_0008400c();\n  if ((index == 1) && (param2 - 1 < 0xff)) {\n    data = param2 & 0xff;\n    byteValue = (byte)data;\n    result = 1;\n  }\n  else {\n    result = FUN_0008434c(param1,&byteValue,param2,param3 + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return param2;\n    }\n    data = (uint)byteValue;\n  }\n  counter = 0;\n  do {\n    bytePointer = param3[2] + -1;\n    param3[2] = bytePointer;\n    if ((int)bytePointer < 0) {\n      if ((int)param3[6] <= (int)bytePointer) {\n        **param3 = (byte)data;\n        bytePointer = *param3;\n        data = (uint)*bytePointer;\n        if (data != 10) goto LAB_00083a04;\n      }\n      index = FUN_000842a4(param1,data,param3);\n      if (index == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **param3 = (byte)data;\n      bytePointer = *param3;\nLAB_00083a04:\n      *param3 = bytePointer + 1;\n    }\n    if (result <= counter + 1) {\n      return param2;\n    }\n    data = (uint)byteArray[counter];\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000839b4": "extract_data_from_binary_000839b4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "index",
                "uVar2": "result",
                "uVar3": "data",
                "pbVar4": "bytePointer",
                "uVar5": "counter",
                "local_1c": "byteValue",
                "abStack_1b": "byteArray"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_0008434c",
                "FUN_0008400c",
                "FUN_000842a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083a74": {
            "entrypoint": "0x00083a74",
            "current_name": "update_relocation_entry_00083a74",
            "code": "\nundefined4 updateRelocationEntry_00083a74(undefined4 param_ptr,int param_offset)\n\n{\n  int result;\n  uint relEntryOffset;\n  int newOffset;\n  \n  FUNC_00081f94();\n  relEntryOffset = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  newOffset = ((relEntryOffset - param_offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < newOffset) {\n    result = FUN_0008236c(param_ptr,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + relEntryOffset) {\n      result = FUN_0008236c(param_ptr,-newOffset);\n      if (result != -1) {\n        DAT_2007121c = DAT_2007121c - newOffset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = relEntryOffset - newOffset | 1;\n        FUNC_00081f98(param_ptr);\n        return 1;\n      }\n      newOffset = FUN_0008236c(param_ptr,0);\n      if (0xf < (int)(newOffset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_2007121c = newOffset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             newOffset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_00081f98(param_ptr);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083a74": "update_relocation_entry_00083a74",
                "param_1": "param_ptr",
                "param_2": "param_offset",
                "iVar1": "result",
                "uVar2": "relEntryOffset",
                "iVar3": "newOffset"
            },
            "calling": [
                "FUN_00083b10"
            ],
            "called": [
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_0008236c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b10": {
            "entrypoint": "0x00083b10",
            "current_name": "process_function_00083b10",
            "code": "\nvoid processFunction_00083b10(undefined4 param1,int param2)\n\n{\n  int tempVar1;\n  bool isTrue;\n  uint tempVar2;\n  dword tempVar3;\n  int tempVar4;\n  uint tempVar5;\n  dword tempVar6;\n  uint tempVar7;\n  dword tempVar8;\n  \n  if (param2 == 0) {\n    return;\n  }\n  FUNC_00081f94();\n  tempVar2 = *(uint *)(param2 + -4);\n  tempVar6 = param2 - 8;\n  tempVar5 = tempVar2 & 0xfffffffe;\n  tempVar3 = tempVar6 + tempVar5;\n  tempVar7 = *(uint *)(tempVar3 + 4) & 0xfffffffc;\n  if (relArray[141].r_info == tempVar3) {\n    tempVar7 = tempVar7 + tempVar5;\n    if (-1 < (int)(tempVar2 << 0x1f)) {\n      tempVar6 = tempVar6 - *(int *)(param2 + -8);\n      tempVar4 = *(int *)(tempVar6 + 0xc);\n      tempVar1 = *(int *)(tempVar6 + 8);\n      tempVar7 = tempVar7 + *(int *)(param2 + -8);\n      *(int *)(tempVar1 + 0xc) = tempVar4;\n      *(int *)(tempVar4 + 8) = tempVar1;\n    }\n    tempVar3 = relArray[269].r_info;\n    *(uint *)(tempVar6 + 4) = tempVar7 | 1;\n    relArray[141].r_info = tempVar6;\n    if (tempVar3 <= tempVar7) {\n      FUN_00083a74(param1,DAT_20071218);\n    }\n  }\n  else {\n    *(uint *)(tempVar3 + 4) = tempVar7;\n    if ((tempVar2 & 1) == 0) {\n      tempVar6 = tempVar6 - *(int *)(param2 + -8);\n      tempVar1 = *(int *)(tempVar6 + 8);\n      tempVar5 = tempVar5 + *(int *)(param2 + -8);\n      if (tempVar1 == 0x2007046c) {\n        isTrue = true;\n      }\n      else {\n        tempVar4 = *(int *)(tempVar6 + 0xc);\n        *(int *)(tempVar1 + 0xc) = tempVar4;\n        *(int *)(tempVar4 + 8) = tempVar1;\n        isTrue = false;\n      }\n    }\n    else {\n      isTrue = false;\n    }\n    if (-1 < *(int *)(tempVar3 + tempVar7 + 4) << 0x1f) {\n      tempVar5 = tempVar5 + tempVar7;\n      tempVar1 = *(int *)(tempVar3 + 8);\n      if ((!isTrue) && (tempVar1 == 0x2007046c)) {\n        relArray[142].r_info = tempVar6;\n        relArray[143].r_offset = tempVar6;\n        *(undefined4 *)(tempVar6 + 0xc) = 0x2007046c;\n        *(undefined4 *)(tempVar6 + 8) = 0x2007046c;\n        *(uint *)(tempVar6 + 4) = tempVar5 | 1;\n        *(uint *)(tempVar6 + tempVar5) = tempVar5;\n        goto continueExecution;\n      }\n      tempVar4 = *(int *)(tempVar3 + 0xc);\n      *(int *)(tempVar1 + 0xc) = tempVar4;\n      *(int *)(tempVar4 + 8) = tempVar1;\n    }\n    *(uint *)(tempVar6 + 4) = tempVar5 | 1;\n    *(uint *)(tempVar6 + tempVar5) = tempVar5;\n    if (!isTrue) {\n      if (tempVar5 < 0x200) {\n        tempVar2 = tempVar5 & 0xfffffff8;\n        tempVar1 = *(int *)((int)&relArray[0x8d].r_info + tempVar2);\n        relArray[141].r_offset =\n             relArray[141].r_offset | 1 << ((int)(tempVar5 >> 3) >> 2 & 0xffU);\n        *(int *)(tempVar6 + 8) = tempVar1;\n        *(uint *)(tempVar6 + 0xc) = tempVar2 + 0x20070464;\n        *(dword *)((int)&relArray[0x8d].r_info + tempVar2) = tempVar6;\n        *(dword *)(tempVar1 + 0xc) = tempVar6;\n        FUNC_00081f98(param1);\n        return;\n      }\n      tempVar2 = tempVar5 >> 9;\n      if (tempVar2 < 5) {\n        tempVar1 = (tempVar5 >> 6) + 0x38;\n        tempVar4 = tempVar1 * 2;\n      }\n      else if (tempVar2 < 0x15) {\n        tempVar1 = tempVar2 + 0x5b;\n        tempVar4 = tempVar1 * 2;\n      }\n      else if (tempVar2 < 0x55) {\n        tempVar1 = (tempVar5 >> 0xc) + 0x6e;\n        tempVar4 = tempVar1 * 2;\n      }\n      else if (tempVar2 < 0x155) {\n        tempVar1 = (tempVar5 >> 0xf) + 0x77;\n        tempVar4 = tempVar1 * 2;\n      }\n      else if (tempVar2 < 0x555) {\n        tempVar1 = (tempVar5 >> 0x12) + 0x7c;\n        tempVar4 = tempVar1 * 2;\n      }\n      else {\n        tempVar4 = 0xfc;\n        tempVar1 = 0x7e;\n      }\n      tempVar8 = tempVar4 * 4 + 0x20070464;\n      tempVar3 = (&relArray[0x8d].r_info)[tempVar4];\n      if (tempVar3 == tempVar8) {\n        relArray[141].r_offset =\n             relArray[141].r_offset | 1 << (tempVar1 >> 2 & 0xffU);\n        tempVar8 = tempVar3;\n      }\n      else {\n        do {\n          if ((*(uint *)(tempVar3 + 4) & 0xfffffffc) <= tempVar5) break;\n          tempVar3 = *(dword *)(tempVar3 + 8);\n        } while (tempVar8 != tempVar3);\n        tempVar8 = *(dword *)(tempVar3 + 0xc);\n      }\n      *(dword *)(tempVar6 + 0xc) = tempVar8;\n      *(dword *)(tempVar6 + 8) = tempVar3;\n      *(dword *)(tempVar8 + 8) = tempVar6;\n      *(dword *)(tempVar3 + 0xc) = tempVar6;\n    }\n  }\ncontinueExecution:\n  FUNC_00081f98(param1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b10": "process_function_00083b10",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "tempVar1",
                "bVar2": "isTrue",
                "uVar3": "tempVar2",
                "dVar4": "tempVar3",
                "iVar5": "tempVar4",
                "uVar6": "tempVar5",
                "dVar7": "tempVar6",
                "uVar8": "tempVar7",
                "dVar9": "tempVar8",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "LAB_00083ba4": "continueExecution"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00081800",
                "FUN_00081810",
                "FUN_0008356c",
                "FUN_00083850",
                "FUN_00084484",
                "FUN_00083ca8"
            ],
            "called": [
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_00083a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083ca8": {
            "entrypoint": "0x00083ca8",
            "current_name": "reverse_and_improve_00083ca8",
            "code": "\nundefined4 reverse_and_improve_00083ca8(undefined4 *output_ptr,uint *input_ptr,uint **array_ptr)\n\n{\n  int status;\n  uint var2;\n  uint var3;\n  ushort var4;\n  uint var5;\n  uint *ptr6;\n  uint *ptr7;\n  uint var8;\n  uint var9;\n  uint var10;\n  uint var11;\n  uint var_local_2c;\n  \n  if (array_ptr[2] != (uint *)0x0) {\n    var4 = *(ushort *)(input_ptr + 3);\n    var5 = (uint)var4;\n    if (((int)(var5 << 0x1c) < 0) && (input_ptr[4] != 0)) {\n      ptr7 = *array_ptr;\n    }\n    else {\n      status = FUN_0008356c(output_ptr,input_ptr);\n      if (status != 0) {\n        return 0xffffffff;\n      }\n      var4 = *(ushort *)(input_ptr + 3);\n      var5 = (uint)var4;\n      ptr7 = *array_ptr;\n    }\n    if ((var4 & 2) == 0) {\n      var2 = var5 & 2;\n      var10 = var2;\n      var8 = var2;\n      var_local_2c = var2;\n      if ((var5 & 1) == 0) {\n        var2 = 0;\n        var10 = 0;\n        while( true ) {\n          while (var2 == 0) {\n            var10 = *ptr7;\n            ptr6 = ptr7 + 1;\n            ptr7 = ptr7 + 2;\n            var2 = *ptr6;\n          }\n          var8 = input_ptr[2];\n          if ((int)(var5 << 0x16) < 0) {\n            if (var2 < var8) {\n              var5 = *input_ptr;\n              var8 = var2;\n            }\n            else if ((var5 & 0x480) == 0) {\n              var5 = *input_ptr;\n            }\n            else {\n              status = *input_ptr - input_ptr[4];\n              var8 = status + 1 + var2;\n              var9 = (int)(input_ptr[5] * 3) / 2;\n              if (var8 <= var9) {\n                var8 = var9;\n              }\n              if ((int)(var5 << 0x15) < 0) {\n                var9 = FUN_00081810(output_ptr,var8);\n                if (var9 == 0) {\n                  *output_ptr = 0xc;\n                  var4 = *(ushort *)(input_ptr + 3);\n                  goto LAB_00083da4;\n                }\n                FUN_00081d48(var9,input_ptr[4],status);\n                *(ushort *)(input_ptr + 3) = *(ushort *)(input_ptr + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                var9 = FUN_00081fac(output_ptr);\n                if (var9 == 0) {\n                  FUN_00083b10(output_ptr,input_ptr[4]);\n                  var4 = *(ushort *)(input_ptr + 3) & 0xff7f;\n                  *output_ptr = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              var5 = var9 + status;\n              input_ptr[4] = var9;\n              input_ptr[5] = var8;\n              *input_ptr = var5;\n              input_ptr[2] = var8 - status;\n              var8 = var2;\n            }\n            FUN_00081e34(var5,var10,var8);\n            input_ptr[2] = input_ptr[2] - var8;\n            *input_ptr = *input_ptr + var8;\n            var8 = var2;\n          }\n          else if ((input_ptr[4] < *input_ptr) || (var5 = input_ptr[5], var2 < var5)) {\n            if (var2 < var8) {\n              var8 = var2;\n            }\n            FUN_00081e34(*input_ptr,var10,var8);\n            var5 = input_ptr[2];\n            input_ptr[2] = var5 - var8;\n            *input_ptr = *input_ptr + var8;\n            if ((var5 - var8 == 0) && (status = FUN_00083850(output_ptr,input_ptr), status != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            var8 = 0x7fffffff;\n            if (var2 < 0x7fffffff) {\n              var8 = var2;\n            }\n            var8 = (*(code *)input_ptr[9])(output_ptr,input_ptr[7],var10,(var8 / var5) * var5);\n            if ((int)var8 < 1) goto LAB_00083da2;\n          }\n          ptr6 = array_ptr[2];\n          var10 = var10 + var8;\n          var2 = var2 - var8;\n          array_ptr[2] = (uint *)((int)ptr6 - var8);\n          if ((uint *)((int)ptr6 - var8) == (uint *)0x0) break;\n          var5 = (uint)*(ushort *)(input_ptr + 3);\n        }\n      }\n      else {\n        do {\n          while (var2 == 0) {\n            var8 = *ptr7;\n            var2 = ptr7[1];\n            var_local_2c = 0;\n            ptr7 = ptr7 + 2;\n          }\n          if (var_local_2c == 0) {\n            status = FUN_000840f8(var8,10,var2);\n            if (status == 0) {\n              var10 = var2 + 1;\n              var_local_2c = 1;\n            }\n            else {\n              var10 = (status + 1) - var8;\n              var_local_2c = 1;\n            }\n          }\n          var9 = *input_ptr;\n          var5 = var10;\n          if (var2 <= var10) {\n            var5 = var2;\n          }\n          var3 = input_ptr[5];\n          if ((input_ptr[4] < var9) && (var11 = input_ptr[2] + var3, (int)var11 < (int)var5)) {\n            FUN_00081e34(var9,var8,var11);\n            *input_ptr = *input_ptr + var11;\n            status = FUN_00083850(output_ptr,input_ptr);\n            if (status != 0) goto LAB_00083da2;\n          }\n          else if ((int)var5 < (int)var3) {\n            FUN_00081e34(var9,var8,var5);\n            input_ptr[2] = input_ptr[2] - var5;\n            *input_ptr = var5 + *input_ptr;\n            var11 = var5;\n          }\n          else {\n            var11 = (*(code *)input_ptr[9])(output_ptr,input_ptr[7],var8,var3);\n            if ((int)var11 < 1) goto LAB_00083da2;\n          }\n          var10 = var10 - var11;\n          if (var10 == 0) {\n            status = FUN_00083850(output_ptr,input_ptr);\n            if (status != 0) goto LAB_00083da2;\n            var_local_2c = 0;\n          }\n          ptr6 = array_ptr[2];\n          var8 = var8 + var11;\n          var2 = var2 - var11;\n          array_ptr[2] = (uint *)((int)ptr6 - var11);\n        } while ((uint *)((int)ptr6 - var11) != (uint *)0x0);\n      }\n    }\n    else {\n      var2 = 0;\n      var5 = 0;\n      do {\n        while( true ) {\n          var10 = var5;\n          if (0x7ffffbff < var5) {\n            var10 = 0x7ffffc00;\n          }\n          if (var5 != 0) break;\n          var2 = *ptr7;\n          var5 = ptr7[1];\n          ptr7 = ptr7 + 2;\n        }\n        status = (*(code *)input_ptr[9])(output_ptr,input_ptr[7],var2,var10);\n        if (status < 1) {\nLAB_00083da2:\n          var4 = *(ushort *)(input_ptr + 3);\nLAB_00083da4:\n          *(ushort *)(input_ptr + 3) = var4 | 0x40;\n          return 0xffffffff;\n        }\n        ptr6 = array_ptr[2];\n        var2 = var2 + status;\n        var5 = var5 - status;\n        array_ptr[2] = (uint *)((int)ptr6 - status);\n      } while ((uint *)((int)ptr6 - status) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083ca8": "reverse_and_improve_00083ca8",
                "param_1": "output_ptr",
                "param_2": "input_ptr",
                "param_3": "array_ptr",
                "iVar1": "status",
                "uVar2": "var2",
                "uVar3": "var3",
                "uVar4": "var4",
                "uVar5": "var5",
                "puVar6": "ptr6",
                "puVar7": "ptr7",
                "uVar8": "var8",
                "uVar9": "var9",
                "uVar10": "var10",
                "uVar11": "var11",
                "local_2c": "var_local_2c"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_00081d48",
                "FUN_00081fac",
                "FUN_00083b10",
                "FUN_00081810",
                "FUN_0008356c",
                "FUN_00083850",
                "FUN_000840f8",
                "FUN_00081e34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084004": {
            "entrypoint": "0x00084004",
            "current_name": "get_memory_address_00084004",
            "code": "\nundefined4 getMemoryAddress_00084004(void)\n\n{\n  return 0x20070878;\n}\n\n",
            "renaming": {
                "FUN_00084004": "get_memory_address_00084004"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008400c": {
            "entrypoint": "0x0008400c",
            "current_name": "get_elf32_rel_offset_0008400c",
            "code": "\ndword getElf32RelOffset_0008400c(void)\n\n{\n  return elf32RelArrayindex.relocationOffset;\n}\n\n",
            "renaming": {
                "FUN_0008400c": "get_elf32_rel_offset_0008400c",
                "Elf32_Rel_ARRAY_20070000": "elf32RelArray",
                "[275]": "index",
                "r_offset": "relocationOffset"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084018": {
            "entrypoint": "0x00084018",
            "current_name": "check_access_permissions_00084018",
            "code": "\nvoid checkAccessPermissions_00084018(int param1,int *accessInfo)\n\n{\n  ushort accessFlags;\n  int result;\n  int status;\n  uint accessFlagsUint;\n  bool isSpecialAccess;\n  undefined tempBuffer [4];\n  uint localFlag;\n  \n  accessFlags = *(ushort *)(accessInfo + 3);\n  accessFlagsUint = (uint)accessFlags;\n  if ((int)(accessFlagsUint << 0x1e) < 0) {\n    *accessInfo = (int)accessInfo + 0x43;\n    accessInfo[4] = (int)accessInfo + 0x43;\n    accessInfo[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)accessInfo + 0xe)) {\n    result = FUN_00084494(param1,(int)*(short *)((int)accessInfo + 0xe),tempBuffer);\n    if (-1 < result) {\n      isSpecialAccess = (localFlag & 0xf000) == 0x2000;\n      if (((localFlag & 0xf000) == 0x8000) && (accessInfo[10] == 0x8427d)) {\n        result = 0x400;\n        *(ushort *)(accessInfo + 3) = *(ushort *)(accessInfo + 3) | 0x400;\n        accessInfo[0x13] = 0x400;\n      }\n      else {\n        result = 0x400;\n        *(ushort *)(accessInfo + 3) = *(ushort *)(accessInfo + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    accessFlags = *(ushort *)(accessInfo + 3);\n    accessFlagsUint = (uint)accessFlags;\n  }\n  *(ushort *)(accessInfo + 3) = accessFlags | 0x800;\n  if ((accessFlagsUint & 0x80) == 0) {\n    result = 0x400;\n  }\n  else {\n    result = 0x40;\n  }\n  isSpecialAccess = false;\nLAB_00084074:\n  status = FUN_00081810(param1,result);\n  accessFlags = *(ushort *)(accessInfo + 3);\n  if (status == 0) {\n    if (-1 < (int)((uint)accessFlags << 0x16)) {\n      *(ushort *)(accessInfo + 3) = accessFlags | 2;\n      *accessInfo = (int)accessInfo + 0x43;\n      accessInfo[4] = (int)accessInfo + 0x43;\n      accessInfo[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(param1 + 0x3c) = &LAB_0008387c_1;\n    *(ushort *)(accessInfo + 3) = accessFlags | 0x80;\n    *accessInfo = status;\n    accessInfo[4] = status;\n    accessInfo[5] = result;\n    if ((isSpecialAccess) && (result = FUN_000844bc(param1,(int)*(short *)((int)accessInfo + 0xe)), result != 0))\n    {\n      *(ushort *)(accessInfo + 3) = *(ushort *)(accessInfo + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084018": "check_access_permissions_00084018",
                "param_1": "param1",
                "param_2": "accessInfo",
                "uVar1": "accessFlags",
                "iVar2": "result",
                "iVar3": "status",
                "uVar4": "accessFlagsUint",
                "bVar5": "isSpecialAccess",
                "auStack_54": "tempBuffer",
                "local_50": "localFlag"
            },
            "calling": [
                "FUN_0008356c"
            ],
            "called": [
                "FUN_00081810",
                "FUN_00084494",
                "FUN_000844bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000840f8": {
            "entrypoint": "0x000840f8",
            "current_name": "search_for_byte_000840f8",
            "code": "\nuint * searchForByte_000840f8(uint *data,char target,uint size)\n\n{\n  uint xorResult;\n  int index;\n  uint *ptr;\n  bool found;\n  \n  if (((uint)data & 3) == 0) {\nLAB_00084128:\n    if (3 < size) {\n      ptr = data;\n      do {\n        xorResult = *ptr ^ CONCAT22(CONCAT11(target,target),CONCAT11(target,target));\n        data = ptr;\n        if ((xorResult + 0xfefefeff & ~xorResult & 0x80808080) != 0) break;\n        size = size - 4;\n        data = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < size);\n    }\n    if (size == 0) {\n      data = (uint *)0x0;\n    }\n    else if (*(char *)data != target) {\n      index = 0;\n      do {\n        data = (uint *)((int)data + 1);\n        found = index == size - 1;\n        index = index + 1;\n        if (found) goto LAB_00084150;\n      } while (*(char *)data != target);\n    }\n  }\n  else if (size == 0) {\nLAB_00084150:\n    data = (uint *)0x0;\n  }\n  else if (*(char *)data != target) {\n    ptr = (uint *)((int)data + 1);\n    size = size - 1;\n    do {\n      data = ptr;\n      if (((uint)data & 3) == 0) goto LAB_00084128;\n      if (size == 0) goto LAB_00084150;\n      ptr = (uint *)((int)data + 1);\n      size = size - 1;\n    } while (*(char *)data != target);\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_000840f8": "search_for_byte_000840f8",
                "param_1": "data",
                "param_2": "target",
                "param_3": "size",
                "uVar1": "xorResult",
                "iVar2": "index",
                "puVar3": "ptr",
                "bVar4": "found"
            },
            "calling": [
                "FUN_0008289c",
                "FUN_00083ca8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000841e4": {
            "entrypoint": "0x000841e4",
            "current_name": "process_parameter_000841e4",
            "code": "\nint processParameter_000841e4(uint parameter)\n\n{\n  dword offset;\n  undefined4 result;\n  int value;\n  code *functionPointer;\n  undefined4 unaffectedR4;\n  undefined4 unaffectedR5;\n  undefined4 inLinkRegister;\n  undefined4 constant;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  constant = 0x20070460;\n  if (0x1f < parameter) {\n    *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n    return -1;\n  }\n  value = *(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x2dc);\n  if ((value == 0) || (functionPointer = *(code **)(value + parameter * 4), functionPointer == (code *)0x0)) {\n    result = thunk_FUN_00080efe(Elf32_Rel_ARRAY_20070000[140].r_offset);\n    DAT_20071244 = 0;\n    value = FUNC_00080efc(result,parameter,parameter,0,constant,unaffectedR4,unaffectedR5,inLinkRegister);\n    if ((value == -1) && (DAT_20071244 != 0)) {\n      *(int *)offset = DAT_20071244;\n      return -1;\n    }\n    return value;\n  }\n  if (functionPointer == (code *)0x1) {\n    return 0;\n  }\n  if (functionPointer != (code *)0xffffffff) {\n    *(undefined4 *)(value + parameter * 4) = 0;\n    (*functionPointer)(parameter);\n    return 0;\n  }\n  *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000841e4": "process_parameter_000841e4",
                "param_1": "parameter",
                "dVar1": "offset",
                "uVar2": "result",
                "iVar3": "value",
                "pcVar4": "functionPointer",
                "unaff_r4": "unaffectedR4",
                "unaff_r5": "unaffectedR5",
                "in_lr": "inLinkRegister",
                "uVar5": "constant"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_00080efc",
                "thunk_FUN_00080efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00080efe": {
            "entrypoint": "0x0008421c",
            "current_name": "get_default_value_thunk_00080efe",
            "code": "\nundefined4 get_default_value_thunk_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "thunk_FUN_00080efe": "get_default_value_thunk_00080efe"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [
                "FUN_00080efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084220": {
            "entrypoint": "0x00084220",
            "current_name": "update_value_00084220",
            "code": "\nvoid updateValue_00084220(undefined4 value1,int value2)\n\n{\n  int result;\n  \n  result = FUN_00084508(value1,(int)*(short *)(value2 + 0xe));\n  if (-1 < result) {\n    *(int *)(value2 + 0x50) = *(int *)(value2 + 0x50) + result;\n    return;\n  }\n  *(ushort *)(value2 + 0xc) = *(ushort *)(value2 + 0xc) & 0xefff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084220": "update_value_00084220",
                "param_1": "value1",
                "param_2": "value2",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_00084508"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084244": {
            "entrypoint": "0x00084244",
            "current_name": "process_data_00084244",
            "code": "\nvoid processData_00084244(int *inputArray,int dataPtr,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  ushort value;\n  undefined4 unusedParam1;\n  undefined4 unusedParam2;\n  undefined4 unusedParam3;\n  undefined4 unusedParam4;\n  \n  value = *(ushort *)(dataPtr + 0xc);\n  if ((int)((uint)value << 0x17) < 0) {\n    FUN_000844e0(inputArray,(int)*(short *)(dataPtr + 0xe),0,2);\n    value = *(ushort *)(dataPtr + 0xc);\n  }\n  *(ushort *)(dataPtr + 0xc) = value & 0xefff;\n  DAT_20071244 = 0;\n  result = FUN_00080ec8((int)*(short *)(dataPtr + 0xe),param3,param4,param4,unusedParam1,unusedParam2,\n                       unusedParam3,unusedParam4);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *inputArray = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084244": "process_data_00084244",
                "param_1": "inputArray",
                "param_2": "dataPtr",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "value",
                "unaff_r4": "unusedParam1",
                "unaff_r5": "unusedParam2",
                "unaff_r6": "unusedParam3",
                "in_lr": "unusedParam4"
            },
            "calling": [],
            "called": [
                "FUN_00080ec8",
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008427c": {
            "entrypoint": "0x0008427c",
            "current_name": "update_flag_and_value_0008427c",
            "code": "\nvoid updateFlagAndValue_0008427c(undefined4 param1,int param2)\n\n{\n  int returnValue;\n  ushort updatedFlag;\n  \n  returnValue = FUN_000844e0(param1,(int)*(short *)(param2 + 0xe));\n  if (returnValue == -1) {\n    updatedFlag = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    updatedFlag = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (returnValue != -1) {\n    *(int *)(param2 + 0x50) = returnValue;\n  }\n  *(ushort *)(param2 + 0xc) = updatedFlag;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008427c": "update_flag_and_value_0008427c",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "returnValue",
                "uVar2": "updatedFlag"
            },
            "calling": [],
            "called": [
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_data_000842a4",
            "code": "\nuint process_data_000842a4(int input_ptr,uint output_val,undefined4 *config_ptr,undefined4 config_val)\n\n{\n  ushort config_val_cpy;\n  uint config_val_uint;\n  undefined *buffer_ptr;\n  int offset;\n  \n  if ((input_ptr != 0) && (*(int *)(input_ptr + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  config_val_cpy = *(ushort *)(config_ptr + 3);\n  config_val_uint = (uint)config_val_cpy;\n  config_ptr[2] = config_ptr[6];\n  if ((-1 < (int)(config_val_uint << 0x1c)) || (offset = config_ptr[4], offset == 0)) {\n    offset = FUN_0008356c(input_ptr,config_ptr,config_val_cpy,config_val_uint,config_val);\n    if (offset != 0) {\n      return 0xffffffff;\n    }\n    config_val_cpy = *(ushort *)(config_ptr + 3);\n    offset = config_ptr[4];\n    config_val_uint = (uint)config_val_cpy;\n  }\n  output_val = output_val & 0xff;\n  if ((int)(config_val_uint << 0x12) < 0) {\n    buffer_ptr = (undefined *)*config_ptr;\n    offset = (int)buffer_ptr - offset;\n    if (offset < (int)config_ptr[5]) {\nLAB_000842d6:\n      offset = offset + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    config_ptr[0x19] = config_ptr[0x19] & 0xffffdfff;\n    buffer_ptr = (undefined *)*config_ptr;\n    *(ushort *)(config_ptr + 3) = config_val_cpy | 0x2000;\n    offset = (int)buffer_ptr - offset;\n    if (offset < (int)config_ptr[5]) goto LAB_000842d6;\n  }\n  offset = FUN_00083850(input_ptr,config_ptr);\n  if (offset != 0) {\n    return 0xffffffff;\n  }\n  buffer_ptr = (undefined *)*config_ptr;\n  offset = 1;\nLAB_000842d8:\n  config_ptr[2] = config_ptr[2] + -1;\n  *config_ptr = buffer_ptr + 1;\n  *buffer_ptr = (char)output_val;\n  if (((config_ptr[5] == offset) ||\n      (((int)((uint)*(ushort *)(config_ptr + 3) << 0x1f) < 0 && (output_val == 10)))) &&\n     (offset = FUN_00083850(input_ptr,config_ptr), offset != 0)) {\n    return 0xffffffff;\n  }\n  return output_val;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "param_1": "input_ptr",
                "param_2": "output_val",
                "param_3": "config_ptr",
                "param_4": "config_val",
                "uVar1": "config_val_cpy",
                "uVar2": "config_val_uint",
                "puVar3": "buffer_ptr",
                "iVar4": "offset"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_0008356c",
                "FUN_00083850",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008434c": {
            "entrypoint": "0x0008434c",
            "current_name": "perform_relocation_0008434c",
            "code": "\nvoid performRelocation_0008434c(undefined4 *outputBuffer,int inputSize,undefined4 inputValue,undefined4 *result)\n\n{\n  dword relocationInfo;\n  undefined4 functionPointer;\n  int returnValue;\n  undefined tempBuffer [12];\n  \n  relocationInfo = Elf32_Rel_ARRAY_20070000[275].r_info;\n  if (inputSize == 0) {\n    functionPointer = FUN_00084004();\n    returnValue = (*(code *)relocationInfo)(outputBuffer,tempBuffer,0,functionPointer,result);\n  }\n  else {\n    functionPointer = FUN_00084004();\n    returnValue = (*(code *)relocationInfo)(outputBuffer,inputSize,inputValue,functionPointer,result);\n  }\n  if (returnValue == -1) {\n    *result = 0;\n    *outputBuffer = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008434c": "perform_relocation_0008434c",
                "param_1": "outputBuffer",
                "param_2": "inputSize",
                "param_3": "inputValue",
                "param_4": "result",
                "dVar1": "relocationInfo",
                "uVar2": "functionPointer",
                "iVar3": "returnValue",
                "auStack_24": "tempBuffer"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_0008439c",
                "FUN_00084004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008439c": {
            "entrypoint": "0x0008439c",
            "current_name": "process_data_0008439c",
            "code": "\nundefined4 process_data_0008439c(undefined4 *out_ptr,undefined *data_ptr,uint data_size)\n\n{\n  if (data_ptr == (undefined *)0x0) {\n    return 0;\n  }\n  if (data_size < 0x100) {\n    *data_ptr = (char)data_size;\n    return 1;\n  }\n  *out_ptr = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0008439c": "process_data_0008439c",
                "param_1": "out_ptr",
                "param_2": "data_ptr",
                "param_3": "data_size"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084484": {
            "entrypoint": "0x00084484",
            "current_name": "process_data_00084484",
            "code": "\nundefined4 process_data_00084484(int data)\n\n{\n  dword dOffset;\n  undefined4 result;\n  int status;\n  \n  dOffset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (data != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      FUN_00083888();\n    }\n    if (*(short *)(data + 0xc) != 0) {\n      result = FUN_00083850(dOffset,data);\n      if ((*(code **)(data + 0x2c) != (code *)0x0) &&\n         (status = (**(code **)(data + 0x2c))(dOffset,*(undefined4 *)(data + 0x1c)), status < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(data + 0xc) << 0x18) < 0) {\n        FUN_00083b10(dOffset,*(undefined4 *)(data + 0x10));\n      }\n      if (*(int *)(data + 0x30) != 0) {\n        if (*(int *)(data + 0x30) != data + 0x40) {\n          FUN_00083b10(dOffset);\n        }\n        *(undefined4 *)(data + 0x30) = 0;\n      }\n      if (*(int *)(data + 0x44) != 0) {\n        FUN_00083b10(dOffset);\n        *(undefined4 *)(data + 0x44) = 0;\n      }\n      FUNC_0008397c();\n      *(undefined2 *)(data + 0xc) = 0;\n      FUNC_00083980();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00084484": "process_data_00084484",
                "param_1": "data",
                "dVar1": "dOffset",
                "uVar2": "result",
                "iVar3": "status"
            },
            "calling": [],
            "called": [
                "FUN_00083b10",
                "FUN_00083850",
                "FUN_00083980",
                "FUN_0008397c",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084494": {
            "entrypoint": "0x00084494",
            "current_name": "process_binary_data_00084494",
            "code": "\nvoid processBinaryData_00084494(int *outputData,undefined4 inputValue1,undefined4 inputValue2,undefined4 inputValue3)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = FUN_00080eb0(inputValue1,inputValue2,inputValue2,0,inputValue3);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *outputData = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084494": "process_binary_data_00084494",
                "param_1": "outputData",
                "param_2": "inputValue1",
                "param_3": "inputValue2",
                "param_4": "inputValue3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eb0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844bc": {
            "entrypoint": "0x000844bc",
            "current_name": "check_and_set_result_000844bc",
            "code": "\nvoid checkAndSetResult_000844bc(int *result,undefined4 input)\n\n{\n  int validationResult;\n  \n  DAT_20071244 = 0;\n  validationResult = FUN_00080eba(input);\n  if ((validationResult == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844bc": "check_and_set_result_000844bc",
                "param_1": "result",
                "param_2": "input",
                "iVar1": "validationResult"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844e0": {
            "entrypoint": "0x000844e0",
            "current_name": "process_function_000844e0",
            "code": "\nvoid processFunction_000844e0(int *output,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = FUN_00080ebe(input1,input2,input3);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *output = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844e0": "process_function_000844e0",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008427c",
                "FUN_00084244"
            ],
            "called": [
                "FUN_00080ebe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084508": {
            "entrypoint": "0x00084508",
            "current_name": "extract_data_00084508",
            "code": "\nvoid extractData_00084508(int *result,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  int returnValue;\n  \n  DAT_20071244 = 0;\n  returnValue = FUN_00080ec2(value1,value2,value3);\n  if ((returnValue == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084508": "extract_data_00084508",
                "param_1": "result",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_00084220"
            ],
            "called": [
                "FUN_00080ec2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084530": {
            "entrypoint": "0x00084530",
            "current_name": "check_params_and_return_value_00084530",
            "code": "\nint checkParamsAndReturnValue_00084530(int input1,int input2,int input3,int input4)\n\n{\n  int result;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input1 = -1;\n    }\n    return input1;\n  }\n  result = FUN_0008458c();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084530": "check_params_and_return_value_00084530",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_0008458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008455c": {
            "entrypoint": "0x0008455c",
            "current_name": "subtract_param_from_result_0008455c",
            "code": "\nvoid subtract_param_from_result_0008455c(uint input_value,int int_value,undefined4 param3,undefined4 param4,int *result_array)\n\n{\n  uint converted_value;\n  longlong multiplication_result;\n  \n  multiplication_result = FUN_000845c0();\n  multiplication_result = multiplication_result * CONCAT44(param4,param3);\n  converted_value = (uint)multiplication_result;\n  *result_array = input_value - converted_value;\n  result_array[1] = (int_value - (int)((ulonglong)multiplication_result >> 0x20)) - (uint)(input_value < converted_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008455c": "subtract_param_from_result_0008455c",
                "param_1": "input_value",
                "param_2": "int_value",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "result_array",
                "uVar1": "converted_value",
                "lVar2": "multiplication_result"
            },
            "calling": [],
            "called": [
                "FUN_000845c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008458c": {
            "entrypoint": "0x0008458c",
            "current_name": "subtract_and_store_0008458c",
            "code": "\nvoid subtract_and_store_0008458c(uint input_value,int subtract_value,undefined4 first_concat_value,undefined4 second_concat_value,int *output_array)\n\n{\n  uint result_uint;\n  longlong result_longlong;\n  \n  result_longlong = FUN_00084860();\n  result_longlong = result_longlong * CONCAT44(second_concat_value,first_concat_value);\n  result_uint = (uint)result_longlong;\n  *output_array = input_value - result_uint;\n  output_array[1] = (subtract_value - (int)((ulonglong)result_longlong >> 0x20)) - (uint)(input_value < result_uint);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008458c": "subtract_and_store_0008458c",
                "param_1": "input_value",
                "param_2": "subtract_value",
                "param_3": "first_concat_value",
                "param_4": "second_concat_value",
                "param_5": "output_array",
                "uVar1": "result_uint",
                "lVar2": "result_longlong"
            },
            "calling": [
                "FUN_00084530"
            ],
            "called": [
                "FUN_00084860"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845c0": {
            "entrypoint": "0x000845c0",
            "current_name": "divide_with_remainder_000845c0",
            "code": "\nundefined8 divideWithRemainder_000845c0(uint dividend,uint dividendAbs,uint divisor,uint divisorAbs)\n\n{\n  longlong quotient;\n  uint quotientLow;\n  uint quotientHigh;\n  uint remainderLow;\n  uint remainderHigh;\n  int numLeadingZeros;\n  uint temp1;\n  uint temp2;\n  uint isDividendNegative;\n  uint isDivisorNegative;\n  uint quotientLowTmp;\n  uint quotientHighTmp;\n  bool isCarry;\n  \n  if ((int)dividendAbs < 0) {\n    isCarry = dividend != 0;\n    dividend = -dividend;\n    dividendAbs = -dividendAbs - (uint)isCarry;\n    isDividendNegative = 0xffffffff;\n  }\n  else {\n    isDividendNegative = 0;\n  }\n  if ((int)divisorAbs < 0) {\n    isDividendNegative = ~isDividendNegative;\n    isCarry = divisor != 0;\n    divisor = -divisor;\n    divisorAbs = -divisorAbs - (uint)isCarry;\n  }\n  if (divisorAbs == 0) {\n    if (dividendAbs < divisor) {\n      numLeadingZeros = LZCOUNT(divisor);\n      if (numLeadingZeros != 0) {\n        quotientHigh = dividend >> (0x20U - numLeadingZeros & 0xff);\n        divisor = divisor << numLeadingZeros;\n        dividend = dividend << numLeadingZeros;\n        dividendAbs = dividendAbs << numLeadingZeros | quotientHigh;\n      }\n      quotientLow = divisor >> 0x10;\n      remainderLow = dividendAbs / quotientLow;\n      temp1 = (divisor & 0xffff) * remainderLow;\n      isDivisorNegative = dividend >> 0x10 | (dividendAbs - quotientLow * remainderLow) * 0x10000;\n      quotientHigh = remainderLow;\n      if (isDivisorNegative <= temp1 && temp1 - isDivisorNegative != 0) {\n        isCarry = CARRY4(isDivisorNegative,divisor);\n        isDivisorNegative = isDivisorNegative + divisor;\n        quotientHigh = remainderLow - 1;\n        if ((isCarry == false) && (isDivisorNegative <= temp1 && temp1 - isDivisorNegative != 0)) {\n          quotientHigh = remainderLow - 2;\n          isDivisorNegative = isDivisorNegative + divisor;\n        }\n      }\n      temp2 = (isDivisorNegative - temp1) / quotientLow;\n      remainderLow = (divisor & 0xffff) * temp2;\n      temp1 = dividend & 0xffff | ((isDivisorNegative - temp1) - quotientLow * temp2) * 0x10000;\n      quotientLow = temp2;\n      if (temp1 <= remainderLow && remainderLow - temp1 != 0) {\n        quotientLow = temp2 - 1;\n        if ((CARRY4(temp1,divisor) == false) &&\n           (temp1 + divisor <= remainderLow && remainderLow - (temp1 + divisor) != 0)) {\n          quotientLow = temp2 - 2;\n        }\n      }\n      quotientLow = quotientLow | quotientHigh << 0x10;\n      quotientHigh = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      numLeadingZeros = LZCOUNT(divisor);\n      if (numLeadingZeros == 0) {\n        dividendAbs = dividendAbs - divisor;\n        remainderLow = divisor >> 0x10;\n        quotientHighTmp = divisor & 0xffff;\n        quotientHigh = 1;\n      }\n      else {\n        divisor = divisor << numLeadingZeros;\n        quotientHigh = dividendAbs >> (0x20U - numLeadingZeros & 0xff);\n        remainderLow = divisor >> 0x10;\n        isDivisorNegative = quotientHigh / remainderLow;\n        quotientHighTmp = divisor & 0xffff;\n        temp1 = quotientHighTmp * isDivisorNegative;\n        temp2 = dividend >> (0x20U - numLeadingZeros & 0xff) | dividendAbs << numLeadingZeros;\n        quotientHigh = temp2 >> 0x10 | (quotientHigh - remainderLow * isDivisorNegative) * 0x10000;\n        dividend = dividend << numLeadingZeros;\n        quotientLow = isDivisorNegative;\n        if (quotientHigh <= temp1 && temp1 - quotientHigh != 0) {\n          isCarry = CARRY4(quotientHigh,divisor);\n          quotientHigh = quotientHigh + divisor;\n          quotientLow = isDivisorNegative - 1;\n          if ((isCarry == false) && (quotientHigh <= temp1 && temp1 - quotientHigh != 0)) {\n            quotientLow = isDivisorNegative - 2;\n            quotientHigh = quotientHigh + divisor;\n          }\n        }\n        remainderHigh = (quotientHigh - temp1) / remainderLow;\n        isDivisorNegative = quotientHighTmp * remainderHigh;\n        dividendAbs = temp2 & 0xffff | ((quotientHigh - temp1) - remainderLow * remainderHigh) * 0x10000;\n        quotientHigh = remainderHigh;\n        if (dividendAbs <= isDivisorNegative && isDivisorNegative - dividendAbs != 0) {\n          isCarry = CARRY4(dividendAbs,divisor);\n          dividendAbs = dividendAbs + divisor;\n          quotientHigh = remainderHigh - 1;\n          if ((isCarry == false) && (dividendAbs <= isDivisorNegative && isDivisorNegative - dividendAbs != 0)) {\n            quotientHigh = remainderHigh - 2;\n            dividendAbs = dividendAbs + divisor;\n          }\n        }\n        dividendAbs = dividendAbs - isDivisorNegative;\n        quotientHigh = quotientHigh | quotientLow << 0x10;\n      }\n      quotientLow = dividendAbs / remainderLow;\n      isDivisorNegative = quotientHighTmp * quotientLow;\n      temp2 = dividend >> 0x10 | (dividendAbs - remainderLow * quotientLow) * 0x10000;\n      temp1 = quotientLow;\n      if (temp2 <= isDivisorNegative && isDivisorNegative - temp2 != 0) {\n        isCarry = CARRY4(temp2,divisor);\n        temp2 = temp2 + divisor;\n        temp1 = quotientLow - 1;\n        if ((isCarry == false) && (temp2 <= isDivisorNegative && isDivisorNegative - temp2 != 0)) {\n          temp1 = quotientLow - 2;\n          temp2 = temp2 + divisor;\n        }\n      }\n      remainderHigh = (temp2 - isDivisorNegative) / remainderLow;\n      quotientHighTmp = quotientHighTmp * remainderHigh;\n      remainderLow = dividend & 0xffff | ((temp2 - isDivisorNegative) - remainderLow * remainderHigh) * 0x10000;\n      quotientLow = remainderHigh;\n      if (remainderLow <= quotientHighTmp && quotientHighTmp - remainderLow != 0) {\n        quotientLow = remainderHigh - 1;\n        if ((CARRY4(remainderLow,divisor) == false) &&\n           (remainderLow + divisor <= quotientHighTmp && quotientHighTmp - (remainderLow + divisor) != 0)) {\n          quotientLow = remainderHigh - 2;\n        }\n      }\n      quotientLow = quotientLow | temp1 << 0x10;\n    }\n  }\n  else if (dividendAbs < divisorAbs) {\n    quotientHigh = 0;\n    quotientLow = 0;\n  }\n  else {\n    numLeadingZeros = LZCOUNT(divisorAbs);\n    if (numLeadingZeros == 0) {\n      if ((divisorAbs < dividendAbs) || (divisor <= dividend)) {\n        quotientHigh = 0;\n        quotientLow = 1;\n      }\n      else {\n        quotientLow = 0;\n        quotientHigh = 0;\n      }\n    }\n    else {\n      quotientHigh = 0x20 - numLeadingZeros;\n      remainderLow = dividendAbs >> (quotientHigh & 0xff);\n      quotientHighTmp = divisor >> (quotientHigh & 0xff) | divisorAbs << numLeadingZeros;\n      isDivisorNegative = quotientHighTmp >> 0x10;\n      quotientLow = remainderLow / isDivisorNegative;\n      temp2 = (quotientHighTmp & 0xffff) * quotientLow;\n      temp1 = dividendAbs << numLeadingZeros | dividend >> (quotientHigh & 0xff);\n      remainderLow = temp1 >> 0x10 | (remainderLow - isDivisorNegative * quotientLow) * 0x10000;\n      quotientHigh = quotientLow;\n      if (remainderLow <= temp2 && temp2 - remainderLow != 0) {\n        isCarry = CARRY4(remainderLow,quotientHighTmp);\n        remainderLow = remainderLow + quotientHighTmp;\n        quotientHigh = quotientLow - 1;\n        if ((isCarry == false) && (remainderLow <= temp2 && temp2 - remainderLow != 0)) {\n          quotientHigh = quotientLow - 2;\n          remainderLow = remainderLow + quotientHighTmp;\n        }\n      }\n      remainderHigh = (remainderLow - temp2) / isDivisorNegative;\n      quotientLowTmp = (quotientHighTmp & 0xffff) * remainderHigh;\n      remainderLow = temp1 & 0xffff | ((remainderLow - temp2) - isDivisorNegative * remainderHigh) * 0x10000;\n      quotientLow = remainderHigh;\n      if (remainderLow <= quotientLowTmp && quotientLowTmp - remainderLow != 0) {\n        isCarry = CARRY4(remainderLow,quotientHighTmp);\n        remainderLow = remainderLow + quotientHighTmp;\n        quotientLow = remainderHigh - 1;\n        if ((isCarry == false) && (remainderLow <= quotientLowTmp && quotientLowTmp - remainderLow != 0)) {\n          quotientLow = remainderHigh - 2;\n          remainderLow = remainderLow + quotientHighTmp;\n        }\n      }\n      quotientLow = quotientLow | quotientHigh << 0x10;\n      quotient = (ulonglong)quotientLow * (ulonglong)(divisor << numLeadingZeros);\n      temp1 = (uint)((ulonglong)quotient >> 0x20);\n      quotientHigh = 0;\n      if ((remainderLow - quotientLowTmp < temp1) ||\n         ((remainderLow - quotientLowTmp == temp1 && (dividend << numLeadingZeros < (uint)quotient)))) {\n        quotientLow = quotientLow - 1;\n        quotientHigh = 0;\n      }\n    }\n  }\n  if (isDividendNegative != 0) {\n    isCarry = quotientLow != 0;\n    quotientLow = -quotientLow;\n    quotientHigh = -quotientHigh - (uint)isCarry;\n  }\n  return CONCAT44(quotientHigh,quotientLow);\n}\n\n",
            "renaming": {
                "FUN_000845c0": "divide_with_remainder_000845c0",
                "param_1": "dividend",
                "param_2": "dividendAbs",
                "param_3": "divisor",
                "param_4": "divisorAbs",
                "lVar1": "quotient",
                "uVar2": "quotientLow",
                "uVar3": "quotientHigh",
                "uVar4": "remainderLow",
                "uVar5": "remainderHigh",
                "iVar6": "numLeadingZeros",
                "uVar7": "temp1",
                "uVar8": "temp2",
                "uVar9": "isDividendNegative",
                "uVar10": "isDivisorNegative",
                "uVar11": "quotientLowTmp",
                "uVar12": "quotientHighTmp",
                "bVar13": "isCarry"
            },
            "calling": [
                "FUN_0008455c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084860": {
            "entrypoint": "0x00084860",
            "current_name": "calculate_quotient_remainder_00084860",
            "code": "\nulonglong calculateQuotientRemainder_00084860(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong temp;\n  uint upperDivisorBits;\n  uint dividendBits;\n  uint mostSignificantDigit;\n  uint productLowBits;\n  uint productHighBits;\n  uint tempQuotient;\n  uint quotientDigit;\n  uint tempDividend;\n  int shiftCount;\n  bool carryFlag;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shiftCount = LZCOUNT(quotient);\n      if (shiftCount == 0) {\n        divisor = divisor - quotient;\n        dividendBits = quotient >> 0x10;\n        productLowBits = quotient & 0xffff;\n        upperDivisorBits = 1;\n      }\n      else {\n        quotient = quotient << shiftCount;\n        quotientDigit = divisor >> (0x20U - shiftCount & 0xff);\n        dividendBits = quotient >> 0x10;\n        tempDividend = quotientDigit / dividendBits;\n        productLowBits = quotient & 0xffff;\n        upperDivisorBits = productLowBits * tempDividend;\n        productHighBits = dividend >> (0x20U - shiftCount & 0xff) | divisor << shiftCount;\n        mostSignificantDigit = productHighBits >> 0x10 | (quotientDigit - dividendBits * tempDividend) * 0x10000;\n        dividend = dividend << shiftCount;\n        quotientDigit = tempDividend;\n        if (mostSignificantDigit <= upperDivisorBits && upperDivisorBits - mostSignificantDigit != 0) {\n          carryFlag = CARRY4(mostSignificantDigit,quotient);\n          mostSignificantDigit = mostSignificantDigit + quotient;\n          quotientDigit = tempDividend - 1;\n          if ((carryFlag == false) && (mostSignificantDigit <= upperDivisorBits && upperDivisorBits - mostSignificantDigit != 0)) {\n            quotientDigit = tempDividend - 2;\n            mostSignificantDigit = mostSignificantDigit + quotient;\n          }\n        }\n        tempQuotient = (mostSignificantDigit - upperDivisorBits) / dividendBits;\n        tempDividend = productLowBits * tempQuotient;\n        divisor = productHighBits & 0xffff | ((mostSignificantDigit - upperDivisorBits) - dividendBits * tempQuotient) * 0x10000;\n        upperDivisorBits = tempQuotient;\n        if (divisor <= tempDividend && tempDividend - divisor != 0) {\n          carryFlag = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          upperDivisorBits = tempQuotient - 1;\n          if ((carryFlag == false) && (divisor <= tempDividend && tempDividend - divisor != 0)) {\n            upperDivisorBits = tempQuotient - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - tempDividend;\n        upperDivisorBits = upperDivisorBits | quotientDigit << 0x10;\n      }\n      tempDividend = divisor / dividendBits;\n      mostSignificantDigit = productLowBits * tempDividend;\n      productHighBits = dividend >> 0x10 | (divisor - dividendBits * tempDividend) * 0x10000;\n      quotientDigit = tempDividend;\n      if (productHighBits <= mostSignificantDigit && mostSignificantDigit - productHighBits != 0) {\n        carryFlag = CARRY4(productHighBits,quotient);\n        productHighBits = productHighBits + quotient;\n        quotientDigit = tempDividend - 1;\n        if ((carryFlag == false) && (productHighBits <= mostSignificantDigit && mostSignificantDigit - productHighBits != 0)) {\n          quotientDigit = tempDividend - 2;\n          productHighBits = productHighBits + quotient;\n        }\n      }\n      tempDividend = (productHighBits - mostSignificantDigit) / dividendBits;\n      productLowBits = productLowBits * tempDividend;\n      productHighBits = dividend & 0xffff | ((productHighBits - mostSignificantDigit) - dividendBits * tempDividend) * 0x10000;\n      dividendBits = tempDividend;\n      if (productHighBits <= productLowBits && productLowBits - productHighBits != 0) {\n        dividendBits = tempDividend - 1;\n        if ((CARRY4(productHighBits,quotient) == false) &&\n           (productHighBits + quotient <= productLowBits && productLowBits - (productHighBits + quotient) != 0)) {\n          dividendBits = tempDividend - 2;\n        }\n      }\n      return CONCAT44(upperDivisorBits,dividendBits | quotientDigit << 0x10);\n    }\n    shiftCount = LZCOUNT(quotient);\n    if (shiftCount != 0) {\n      quotientDigit = dividend >> (0x20U - shiftCount & 0xff);\n      quotient = quotient << shiftCount;\n      dividend = dividend << shiftCount;\n      divisor = quotientDigit | divisor << shiftCount;\n    }\n    upperDivisorBits = quotient >> 0x10;\n    dividendBits = divisor / upperDivisorBits;\n    productLowBits = (quotient & 0xffff) * dividendBits;\n    tempDividend = dividend >> 0x10 | (divisor - upperDivisorBits * dividendBits) * 0x10000;\n    quotientDigit = dividendBits;\n    if (tempDividend <= productLowBits && productLowBits - tempDividend != 0) {\n      carryFlag = CARRY4(tempDividend,quotient);\n      tempDividend = tempDividend + quotient;\n      quotientDigit = dividendBits - 1;\n      if ((carryFlag == false) && (tempDividend <= productLowBits && productLowBits - tempDividend != 0)) {\n        quotientDigit = dividendBits - 2;\n        tempDividend = tempDividend + quotient;\n      }\n    }\n    productHighBits = (tempDividend - productLowBits) / upperDivisorBits;\n    dividendBits = (quotient & 0xffff) * productHighBits;\n    productLowBits = dividend & 0xffff | ((tempDividend - productLowBits) - upperDivisorBits * productHighBits) * 0x10000;\n    upperDivisorBits = productHighBits;\n    if (productLowBits <= dividendBits && dividendBits - productLowBits != 0) {\n      upperDivisorBits = productHighBits - 1;\n      if ((CARRY4(productLowBits,quotient) == false) &&\n         (productLowBits + quotient <= dividendBits && dividendBits - (productLowBits + quotient) != 0)) {\n        upperDivisorBits = productHighBits - 2;\n      }\n    }\n    upperDivisorBits = upperDivisorBits | quotientDigit << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    shiftCount = LZCOUNT(remainder);\n    if (shiftCount == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      upperDivisorBits = 0;\n    }\n    else {\n      upperDivisorBits = 0x20 - shiftCount;\n      quotientDigit = divisor >> (upperDivisorBits & 0xff);\n      dividendBits = remainder << shiftCount | quotient >> (upperDivisorBits & 0xff);\n      productLowBits = dividendBits >> 0x10;\n      mostSignificantDigit = quotientDigit / productLowBits;\n      tempDividend = (dividendBits & 0xffff) * mostSignificantDigit;\n      productHighBits = dividend >> (upperDivisorBits & 0xff) | divisor << shiftCount;\n      upperDivisorBits = productHighBits >> 0x10 | (quotientDigit - productLowBits * mostSignificantDigit) * 0x10000;\n      quotientDigit = mostSignificantDigit;\n      if (upperDivisorBits <= tempDividend && tempDividend - upperDivisorBits != 0) {\n        carryFlag = CARRY4(upperDivisorBits,dividendBits);\n        upperDivisorBits = upperDivisorBits + dividendBits;\n        quotientDigit = mostSignificantDigit - 1;\n        if ((carryFlag == false) && (upperDivisorBits <= tempDividend && tempDividend - upperDivisorBits != 0)) {\n          quotientDigit = mostSignificantDigit - 2;\n          upperDivisorBits = upperDivisorBits + dividendBits;\n        }\n      }\n      mostSignificantDigit = (upperDivisorBits - tempDividend) / productLowBits;\n      tempQuotient = (dividendBits & 0xffff) * mostSignificantDigit;\n      productLowBits = productHighBits & 0xffff | ((upperDivisorBits - tempDividend) - productLowBits * mostSignificantDigit) * 0x10000;\n      upperDivisorBits = mostSignificantDigit;\n      if (productLowBits <= tempQuotient && tempQuotient - productLowBits != 0) {\n        carryFlag = CARRY4(productLowBits,dividendBits);\n        productLowBits = productLowBits + dividendBits;\n        upperDivisorBits = mostSignificantDigit - 1;\n        if ((carryFlag == false) && (productLowBits <= tempQuotient && tempQuotient - productLowBits != 0)) {\n          upperDivisorBits = mostSignificantDigit - 2;\n          productLowBits = productLowBits + dividendBits;\n        }\n      }\n      upperDivisorBits = upperDivisorBits | quotientDigit << 0x10;\n      temp = (ulonglong)upperDivisorBits * (ulonglong)(quotient << shiftCount);\n      quotientDigit = (uint)((ulonglong)temp >> 0x20);\n      if ((productLowBits - tempQuotient < quotientDigit) || ((productLowBits - tempQuotient == quotientDigit && (dividend << shiftCount < (uint)temp)))\n         ) {\n        upperDivisorBits = upperDivisorBits - 1;\n      }\n    }\n  }\n  return (ulonglong)upperDivisorBits;\n}\n\n",
            "renaming": {
                "FUN_00084860": "calculate_quotient_remainder_00084860",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "temp",
                "uVar2": "upperDivisorBits",
                "uVar3": "dividendBits",
                "uVar4": "mostSignificantDigit",
                "uVar5": "productLowBits",
                "uVar6": "productHighBits",
                "uVar7": "tempQuotient",
                "uVar8": "quotientDigit",
                "uVar9": "tempDividend",
                "iVar10": "shiftCount",
                "bVar11": "carryFlag"
            },
            "calling": [
                "FUN_0008458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085844": {
            "entrypoint": "0x00085844",
            "current_name": "FUNC_00085844",
            "code": "\nvoid FUNC_00085844(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085844": "FUNC_00085844"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 98577,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080164",
            "FUN_000801e0",
            "FUN_00080250",
            "FUN_000803fc",
            "FUN_0008044c",
            "FUN_000805a8",
            "FUN_000806a0",
            "FUN_000806f8",
            "FUN_00080774",
            "FUN_0008089c",
            "FUN_00080970",
            "FUN_000809be",
            "FUN_000809e4",
            "FUN_00080a0a",
            "FUN_00080a30",
            "FUN_00080a94",
            "FUN_00080aa8",
            "FUN_00080b2c",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080c98",
            "FUN_00080d30",
            "FUN_00080d3e",
            "FUN_00080d58",
            "FUN_00080d62",
            "FUN_00080d6a",
            "FUN_00080e80",
            "FUN_00080e88",
            "FUN_00080eaa",
            "FUN_00080eb0",
            "FUN_00080eba",
            "FUN_00080ebe",
            "FUN_00080ec2",
            "FUN_00080ec8",
            "FUN_00080eec",
            "FUN_00080efe",
            "thunk_FUN_000816d8",
            "FUN_00080f0c",
            "FUN_00081014",
            "FUN_000810a6",
            "FUN_000810c4",
            "FUN_000810cc",
            "FUN_000810d8",
            "FUN_000810e8",
            "FUN_000810fc",
            "FUN_0008113a",
            "thunk_FUN_0008113a",
            "FUN_0008117a",
            "FUN_00081190",
            "FUN_000811b0",
            "FUN_000811ca",
            "FUN_000811e8",
            "FUN_00081214",
            "FUN_00081248",
            "FUN_00081276",
            "FUN_000812b8",
            "FUN_00081348",
            "FUN_000813dc",
            "FUN_00081438",
            "FUN_0008145c",
            "FUN_00081472",
            "FUN_00081480",
            "FUN_00081496",
            "FUN_000814ae",
            "FUN_000814d0",
            "FUN_000814f6",
            "FUN_0008151c",
            "FUN_00081560",
            "FUN_00081570",
            "FUN_0008159e",
            "FUN_000815b8",
            "FUN_000815de",
            "FUN_000815ec",
            "FUN_00081618",
            "FUN_00081624",
            "FUN_00081684",
            "FUN_000816d8",
            "FUN_000816ec",
            "FUN_000816f8",
            "FUN_00081750",
            "FUN_00081778",
            "FUN_000817c8",
            "FUN_000817f0",
            "FUN_00081800",
            "FUN_00081810",
            "FUN_00081d48",
            "FUN_00081e34",
            "FUN_00081f00",
            "FUN_00081f9c",
            "FUN_00081fac",
            "FUN_0008236c",
            "FUN_00082390",
            "FUN_000825cc",
            "FUN_00082688",
            "FUN_00082824",
            "FUN_0008289c",
            "FUN_000834f0",
            "FUN_0008356c",
            "FUN_000836ec",
            "FUN_00083850",
            "FUN_00083888",
            "FUN_000839b4",
            "FUN_00083a74",
            "FUN_00083b10",
            "FUN_00083ca8",
            "FUN_00084004",
            "FUN_0008400c",
            "FUN_00084018",
            "FUN_000840f8",
            "FUN_000841e4",
            "thunk_FUN_00080efe",
            "FUN_00084220",
            "FUN_00084244",
            "FUN_0008427c",
            "FUN_000842a4",
            "FUN_0008434c",
            "FUN_0008439c",
            "FUN_00084484",
            "FUN_00084494",
            "FUN_000844bc",
            "FUN_000844e0",
            "FUN_00084508",
            "FUN_00084530",
            "FUN_0008455c",
            "FUN_0008458c",
            "FUN_000845c0",
            "FUN_00084860"
        ]
    ],
    "locked_functions": []
}