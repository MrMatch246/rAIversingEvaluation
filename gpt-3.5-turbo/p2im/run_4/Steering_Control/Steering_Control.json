{
    "functions": {
        "FUN_000817c8": {
            "renaming": {
                "FUN_000817c8": "copy_param_to_stack_and_call_func_000817c8",
                "param_1": "function_ptr",
                "param_2": "param_1",
                "param_3": "param_2",
                "param_4": "param_3",
                "uStack_c": "stack_param_1",
                "uStack_8": "stack_param_2",
                "uStack_4": "stack_param_3"
            },
            "code": "void copy_param_to_stack_and_call_func_000817c8(void* function_ptr, void* param_1, void* param_2, void* param_3)\n{\n  void* stack_param_1;\n  void* stack_param_2;\n  void* stack_param_3;\n  stack_param_1 = param_2;\n  stack_param_2 = param_3;\n  stack_param_3 = param_4;\n  call_function_with_params(*((void**)function_ptr), *((void**)(*((void**)function_ptr) + 8)), param_1, &stack_param_1);\n  return;\n}",
            "called": [
                "FUN_0008289c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817c8",
            "calling": [
                "FUN_00080eec"
            ],
            "imported": false,
            "current_name": "copy_param_to_stack_and_call_func_000817c8"
        },
        "FUN_00081560": {
            "renaming": {
                "FUN_00081560": "compareAndCopyIfDifferent_00081560",
                "param_1": "firstValue",
                "param_2": "secondValue",
                "copyData_0008151c": "copyData"
            },
            "code": "int compareAndCopyIfDifferent_00081560(int firstValue, int secondValue)\n{\n  if (firstValue != secondValue) {\n    copyData();\n  }\n  return firstValue;\n}",
            "called": [
                "FUN_0008151c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081560",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "compareAndCopyIfDifferent_00081560"
        },
        "FUN_00083980": {
            "renaming": {
                "FUN_00083980": "do_nothing_00083980"
            },
            "code": "\nvoid do_nothing_00083980(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083980",
            "calling": [
                "FUN_00084484"
            ],
            "imported": false,
            "current_name": "do_nothing_00083980"
        },
        "FUN_00081684": {
            "renaming": {
                "FUN_00081684": "count_bits_matching_pattern_00081684",
                "param_1": "data",
                "param_2": "pattern",
                "param_3": "mask",
                "param_4": "max_iterations",
                "iVar1": "matching_bits_count",
                "*param_1": "*data",
                "iVar2": "iterations_left"
            },
            "code": "int count_bits_matching_pattern_00081684(uint *data, uint pattern, uint mask, int max_iterations) {\n  int matching_bits_count = 0;\n  while (max_iterations > 0) {\n    if ((*data & mask) != pattern) {\n      int iterations_left = max_iterations - 1;\n      while (iterations_left > 0) {\n        if ((*data & mask) == pattern) {\n          return matching_bits_count;\n        }\n        iterations_left--;\n      }\n      return 0;\n    }\n    matching_bits_count++;\n    max_iterations--;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081684",
            "calling": [
                "FUN_00081624"
            ],
            "imported": false,
            "current_name": "count_bits_matching_pattern_00081684"
        },
        "FUN_000825cc": {
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "param_1": "dst",
                "param_2": "src",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "src_ptr",
                "puVar4": "dst_ptr",
                "uVar5": "current_word",
                "uVar6": "next_word",
                "puVar7": "dst_ptr",
                "bVar8": "zero_byte_found"
            },
            "code": "void copy_string_000825cc(uint *dst, uint *src)\n{\n    char current_char;\n    ushort current_short;\n    uint *src_ptr;\n    uint *dst_ptr;\n    uint current_word;\n    uint next_word;\n    bool zero_byte_found;\n    \n    if ((((uint)dst ^ (uint)src) & 3) != 0) {\n        do {\n            current_char = *(char *)src;\n            *(char *)dst = current_char;\n            src = (uint *)((int)src + 1);\n            dst = (uint *)((int)dst + 1);\n        } while (current_char != '\\0');\n        return;\n    }\n    \n    if (((uint)src & 3) != 0) {\n        src_ptr = src;\n        if (((uint)src & 1) != 0) {\n            src_ptr = (uint *)((int)src + 1);\n            current_char = *(char *)src;\n            *(char *)dst = current_char;\n            dst = (uint *)((int)dst + 1);\n            if (current_char == '\\0') {\n                return;\n            }\n        }\n        \n        src = src_ptr;\n        if (((uint)src_ptr & 2) != 0) {\n            src = (uint *)((int)src_ptr + 2);\n            current_short = *(ushort *)src_ptr;\n            zero_byte_found = (current_short & 0xff) == 0;\n            if (zero_byte_found) {\n                *(char *)dst = (char)current_short;\n            }\n            else {\n                *(ushort *)dst = current_short;\n                zero_byte_found = (current_short & 0xff00) == 0;\n                dst = (uint *)((int)dst + 2);\n            }\n            if (zero_byte_found) {\n                return;\n            }\n        }\n    }\n    \n    current_word = *src;\n    next_word = *(src + 1);\n    dst_ptr = dst;\n    \n    if (((uint)src & 4) != 0) {\n        if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) {\n            goto LAB_00082630;\n        }\n        \n        dst_ptr = dst + 1;\n        *dst = current_word;\n        src = src + 2;\n        current_word = next_word;\n        next_word = *(src + 1);\n    }\n    \n    while (true) {\n        src_ptr = src + 1;\n        zero_byte_found = (current_word + 0xfefefeff & ~current_word & 0x80808080) != 0;\n        if (zero_byte_found) {\n            break;\n        }\n        \n        *dst_ptr = current_word;\n        current_word = next_word;\n        dst_ptr = dst_ptr + 1;\n        src = src + 2;\n        next_word = *(src + 1);\n        *dst_ptr = current_word;\n    }\n    \nLAB_00082630:\n    do {\n        *(char *)dst_ptr = (char)current_word;\n        current_word = current_word >> 8 | current_word << 0x18;\n        dst_ptr = (uint *)((int)dst_ptr + 1);\n    } while ((current_word & 0xff) != 0);\n    \n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825cc",
            "calling": [
                "FUN_00081570",
                "FUN_0008151c",
                "FUN_000814d0"
            ],
            "imported": false,
            "current_name": "copy_string_000825cc"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "execute_function_if_not_null_00080118",
                "param_1": "param_1",
                "param_2": "data_ptr",
                "param_3": "param_3",
                "param_4": "param_4",
                "DAT_00080134": "global_flag",
                "PTR_DAT_0008013c": "global_data_ptr",
                "DAT_00080140": "function_pointer",
                "DAT_00080144": "function_code"
            },
            "code": "void execute_function_if_not_null_00080118(int param_1, char* data_ptr, int param_3, int param_4)\n{\n  if (DAT_00080134 != 0) {\n    data_ptr = PTR_DAT_0008013c;\n  }\n  if ((*DAT_00080140 != 0) && (DAT_00080144 != (code *)0x0)) {\n    (*DAT_00080144)(DAT_00080140, data_ptr, param_3, DAT_00080144, param_4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "FUN_00081778"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "check_input_00080aa8",
                "param_1": "input",
                "uVar1": "bit"
            },
            "code": "int check_input_00080aa8(uint input) {\n    uint bit;\n    if (input < 45) {\n        if (input < 32) {\n            bit = 1 << (input & 0xff);\n            if ((bit & *(uint *)(DAT_00080ae8 + 0x18)) != bit) {\n                *(uint *)(DAT_00080ae8 + 0x10) = bit;\n            }\n        }\n        else {\n            bit = 1 << (input - 0x20 & 0xff);\n            if ((bit & *(uint *)(DAT_00080ae8 + 0x108)) != bit) {\n                *(uint *)(DAT_00080ae8 + 0x100) = bit;\n            }\n        }\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "FUN_000813dc",
                "FUN_00080f0c",
                "FUN_000803fc",
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "check_input_00080aa8"
        },
        "FUN_00080f0c": {
            "renaming": {
                "FUN_00080f0c": "process_input_00080f0c",
                "param_1": "input_index",
                "param_2": "input_type",
                "puVar1": "input_data_ptr",
                "puVar2": "input_flag_ptr",
                "iVar3": "output_value",
                "uVar4": "bit_mask",
                "uVar5": "process_result",
                "uVar6": "bit_check_result",
                "bVar7": "input_flag_byte",
                "bVar8": "input_flag_type",
                "iVar9": "input_data_index",
                "iVar10": "input_data_value"
            },
            "code": "int process_input_00080f0c(int input_index,int input_type)\\n{\\n  undefined *input_data_ptr;\\n  undefined *input_flag_ptr;\\n  int output_value;\\n  uint bit_mask;\\n  undefined4 process_result;\\n  uint bit_check_result;\\n  byte input_flag_byte;\\n  byte input_flag_type;\\n  int input_data_index;\\n  int input_data_value;\\n  int input_data_type;\\n\\n  input_flag_ptr = PTR_DAT_0008100c;\\n  input_data_ptr = PTR_DAT_00081008;\\n  output_value = input_index;\\n  if (PTR_DAT_00081008[input_index * 0x1c + 0xc] != \"\\0\") {\\n    if ((PTR_DAT_0008100c[input_index] & 0xf) == 4) {\\n      output_value = set_bit_in_array_00080d58(DAT_00081010,PTR_DAT_00081008[input_index * 0x1c + 0x19]);\\n    }\\n    input_flag_byte = input_flag_ptr[input_index];\\n    input_flag_type = input_flag_byte & 0xf;\\n    if ((input_flag_type < 3) && (input_flag_byte != 0)) {\\n      if (input_flag_type == 2) {\\n        if (input_type == 0) {\\n          return output_value;\\n        }\\n      }\\n      else if (input_flag_type == 1) {\\n        if (input_type == 2) {\\n          return output_value;\\n        }\\n      }\\n      else if (input_flag_type == 3) {\\n        if (input_type == 1) {\\n          return output_value;\\n        }\\n        goto PROCESS_DATA;\\n      }\\n    }\\n    if (input_type != 1) {\\nPROCESS_DATA:\\n      if (input_type == 0) {\\n        input_data_index = input_index * 0x1c;\\n        check_input_00080aa8(*(undefined4 *)(input_data_ptr + input_data_index + 8));\\n        input_data_value = *(undefined4 *)(input_data_ptr + input_data_index);\\n        input_data_type = 3;\\n        process_result = process_data_00080a30(input_data_value,input_data_type,*(undefined4 *)(input_data_ptr + input_data_index + 4),0);\\n        input_flag_byte = input_flag_ptr[input_index] & 0xf0 | 2;\\n      }\\n      else {\\n        if (input_type != 2) {\\n          return output_value;\\n        }\\n        input_data_index = input_index * 0x1c;\\n        check_input_00080aa8(*(undefined4 *)(input_data_ptr + input_data_index + 8));\\n        input_data_value = *(undefined4 *)(input_data_ptr + input_data_index);\\n        input_data_type = 3;\\n        process_result = process_data_00080a30(input_data_value,input_data_type,*(undefined4 *)(input_data_ptr + input_data_index + 4),1);\\n        input_flag_byte = input_flag_ptr[input_index] & 0xf0 | 1;\\n      }\\n      input_flag_ptr[input_index] = input_flag_byte;\\n      return process_result;\\n    }\\n    input_data_index = input_index * 0x1c;\\n    input_data_value = *(int *)(input_data_ptr + input_data_index);\\n    if (input_flag_byte >> 4 == 0) {\\n      input_data_type = 4;\\n    }\\n    else {\\n      input_data_type = 5;\\n    }\\n    process_result = process_data_00080a30(input_data_value,input_data_type,*(undefined4 *)(input_data_ptr + input_data_index + 4),*(undefined4 *)(input_data_ptr + input_data_index + 0x10));\\n    input_flag_ptr[input_index] = input_flag_ptr[input_index] & 0xf0 | 3;\\n    if (*(int *)(input_data_value + 0x18) == -1) {\\n      bit_mask = *(uint *)(input_data_ptr + input_data_index + 8);\\n      if (0x2c < bit_mask) {\\n        return 1;\\n      }\\n      if (bit_mask < 0x20) {\\n        bit_mask = 1 << (bit_mask & 0xff);\\n        bit_check_result = *(uint *)(DAT_00080b28 + 0x18) & bit_mask;\\n        if (bit_check_result == bit_mask) {\\n          *(uint *)(DAT_00080b28 + 0x14) = bit_check_result;\\n        }\\n      }\\n      else {\\n        bit_mask = 1 << (bit_mask - 0x20 & 0xff);\\n        bit_check_result = *(uint *)(DAT_00080b28 + 0x108) & bit_mask;\\n        if (bit_check_result == bit_mask) {\\n          *(uint *)(DAT_00080b28 + 0x104) = bit_check_result;\\n        }\\n      }\\n      return 0;\\n    }\\n  }\\n  return output_value;\\n}",
            "called": [
                "FUN_00080a30",
                "FUN_00080d58",
                "FUN_00080aa8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f0c",
            "calling": [
                "FUN_00081014",
                "FUN_000801e0",
                "FUN_000806a0"
            ],
            "imported": false,
            "current_name": "process_input_00080f0c"
        },
        "FUN_00083a74": {
            "renaming": {
                "FUN_00083a74": "calculate_new_size_and_update_00083a74",
                "param_1": "original_size",
                "param_2": "param_2",
                "iVar1": "data_section_address",
                "puVar2": "PTR_DAT_00083b08",
                "iVar3": "sum1",
                "uVar4": "aligned_original_size",
                "iVar5": "new_size",
                "calculate_and_set_sum_0008236c": "calculate_and_set_sum",
                "do_nothing_00081f94": "do_nothing_1",
                "do_nothing_00081f98": "do_nothing_2",
                "DAT_00083b04": "data_section_address_1",
                "PTR_DAT_00083b08": "PTR_DAT_00083b08",
                "DAT_00083b0c": "data_section_address_0"
            },
            "code": "int calculate_new_size_and_update_00083a74(int original_size, int param_2)\n{\n  int data_section_address = DAT_00083b04;\n  do_nothing_00081f94();\n  uint aligned_original_size = (*(uint *)(*(int *)(data_section_address + 8) + 4) & 0xfffffffc);\n  int new_size = ((aligned_original_size - param_2) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < new_size) {\n    int sum1 = calculate_and_set_sum_0008236c(original_size, 0);\n    if (sum1 == *(int *)(data_section_address + 8) + aligned_original_size) {\n      int sum2 = calculate_and_set_sum_0008236c(original_size, -new_size);\n      undefined *PTR_DAT_00083b08 = PTR_DAT_00083b08;\n      if (sum2 != -1) {\n        int sum3 = *(int *)PTR_DAT_00083b08;\n        *(uint *)(*(int *)(data_section_address + 8) + 4) = aligned_original_size - new_size | 1;\n        *(int *)PTR_DAT_00083b08 = sum3 - new_size;\n        do_nothing_00081f98(original_size);\n        return 1;\n      }\n      new_size = calculate_and_set_sum_0008236c(original_size, 0);\n      undefined *PTR_DAT_00083b08 = PTR_DAT_00083b08;\n      uint size_difference = new_size - *(int *)(data_section_address + 8);\n      if (0xf < (int)size_difference) {\n        int DAT_00083b0c = *DAT_00083b0c;\n        *(uint *)(*(int *)(data_section_address + 8) + 4) = size_difference | 1;\n        *(int *)PTR_DAT_00083b08 = new_size - DAT_00083b0c;\n      }\n    }\n  }\n  do_nothing_00081f98(original_size);\n  return 0;\n}",
            "called": [
                "FUN_00081f94",
                "FUN_0008236c",
                "FUN_00081f98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083a74",
            "calling": [
                "FUN_00083b10"
            ],
            "imported": false,
            "current_name": "calculate_new_size_and_update_00083a74"
        },
        "FUN_000844e0": {
            "renaming": {
                "FUN_000844e0": "get_value_from_function_000844e0",
                "param_1": "output_value",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "data_ptr",
                "iVar2": "function_output"
            },
            "code": "void get_value_from_function_000844e0(int* output_value, undefined4 arg1, undefined4 arg2, undefined4 arg3) {\n    undefined* data_ptr = PTR_DAT_00084504;\n    *(undefined4*)data_ptr = 0;\n    int function_output = returnZero_00080ebe(arg1, arg2, arg3);\n    if (function_output == -1 && *(int*)data_ptr != 0) {\n        *output_value = *(int*)data_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_00080ebe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844e0",
            "calling": [
                "FUN_00084244",
                "FUN_0008427c"
            ],
            "imported": false,
            "current_name": "get_value_from_function_000844e0"
        },
        "FUN_00083b10": {
            "renaming": {
                "FUN_00083b10": "allocate_memory_block_00083b10",
                "param_1": "param_1",
                "param_2": "size",
                "iVar1": "i",
                "uVar2": "block_size",
                "iVar3": "previous_block",
                "uVar4": "next_block",
                "iVar5": "block_address",
                "iVar6": "bit_index",
                "iVar7": "block_address",
                "iVar8": "bit_index"
            },
            "code": "void allocate_memory_block_00083b10(int memory_block_address, int size) {\n  int previous_block, next_block, block_address, block_size, i, bit_index;\n  if (size == 0) {\n    return;\n  }\n  do_nothing();\n  bit_index = DAT_00083c98;\n  block_size = *(int *)(size - 4) & 0xfffffffe;\n  previous_block = size - 8;\n  block_address = previous_block + block_size;\n  next_block = *(int *)(block_address + 4) & 0xfffffffc;\n  if (*(int *)(DAT_00083c98 + 8) == block_address) {\n    next_block += block_size;\n    if (-1 < *(int *)(size - 8) << 0x1f) {\n      previous_block -= *(int *)(size - 8);\n      i = *(int *)(previous_block + 0xc);\n      next_block += *(int *)(size - 8);\n      *(int *)(i + 8) = *(int *)(previous_block + 8);\n      *(int *)(*(int *)(previous_block + 8) + 0xc) = i;\n    }\n    block_size = *DAT_00083ca0;\n    *(int *)(previous_block + 4) = next_block | 1;\n    *(int *)(bit_index + 8) = previous_block;\n    if (block_size <= next_block) {\n      calculate_new_size_and_update(param_1,*(int *)PTR_DAT_00083ca4);\n    }\n  }\n  else {\n    block_size = *(int *)(size - 4) & 1;\n    *(int *)(block_address + 4) = next_block;\n    if (block_size == 0) {\n      previous_block -= *(int *)(size - 8);\n      i = *(int *)(previous_block + 8);\n      block_size = *(int *)(size - 8) + block_size;\n      if (i == DAT_00083c9c) {\n        block_size = 1;\n      }\n      else {\n        next_block = *(int *)(previous_block + 0xc);\n        *(int *)(i + 0xc) = next_block;\n        *(int *)(next_block + 8) = i;\n      }\n    }\n    else {\n      block_size = 0;\n    }\n    if (-1 < *(int *)(block_address + next_block + 4) << 0x1f) {\n      block_size += next_block;\n      i = *(int *)(block_address + 8);\n      if ((block_size == 0) && (i == DAT_00083c9c)) {\n        *(int *)(DAT_00083c98 + 0x14) = previous_block;\n        *(int *)(DAT_00083c98 + 0x10) = previous_block;\n        *(int *)(previous_block + 0xc) = i;\n        *(int *)(previous_block + 8) = i;\n        *(int *)(previous_block + 4) = block_size | 1;\n        *(int *)(previous_block + block_size) = block_size;\n        goto LAB_00083ba4;\n      }\n      next_block = *(int *)(block_address + 0xc);\n      *(int *)(i + 0xc) = next_block;\n      *(int *)(next_block + 8) = i;\n    }\n    *(int *)(previous_block + 4) = block_size | 1;\n    *(int *)(previous_block + block_size) = block_size;\n    if (block_size == 0) {\n      if (block_size < 0x200) {\n        block_size = *(int *)(bit_index + 4);\n        i = bit_index + (block_size & 0xfffffff8);\n        next_block = *(int *)(i + 8);\n        *(int *)(previous_block + 8) = next_block;\n        *(int *)(previous_block + 0xc) = i;\n        *(int *)(bit_index + 4) = block_size | 1 << ((block_size >> 3) >> 2 & 0xffU);\n        *(int *)(i + 8) = previous_block;\n        *(int *)(next_block + 0xc) = previous_block;\n        do_nothing_00081f98(param_1);\n        return;\n      }\n      block_size >>= 9;\n      if (block_size < 5) {\n        i = (block_size >> 6) + 0x38;\n        block_address = i * 2;\n      }\n      else if (block_size < 0x15) {\n        i = block_size + 0x5b;\n        block_address = i * 2;\n      }\n      else if (block_size < 0x55) {\n        i = (block_size >> 0xc) + 0x6e;\n        block_address = i * 2;\n      }\n      else if (block_size < 0x155) {\n        i = (block_size >> 0xf) + 0x77;\n        block_address = i * 2;\n      }\n      else if (block_size < 0x555) {\n        i = (block_size >> 0x12) + 0x7c;\n        block_address = i * 2;\n      }\n      else {\n        block_address = 0xfc;\n        i = 0x7e;\n      }\n      bit_index += block_address * 4;\n      block_address = *(int *)(bit_index + 8);\n      if (block_address == bit_index) {\n        *(int *)(DAT_00083c98 + 4) = *(int *)(DAT_00083c98 + 4) | 1 << (i >> 2 & 0xffU);\n        bit_index = block_address;\n      }\n      else {\n        do {\n          if ((*(int *)(block_address + 4) & 0xfffffffc) <= block_size) break;\n          block_address = *(int *)(block_address + 8);\n        } while (bit_index != block_address);\n        bit_index = *(int *)(block_address + 0xc);\n      }\n      *(int *)(previous_block + 0xc) = bit_index;\n      *(int *)(previous_block + 8) = block_address;\n      *(int *)(bit_index + 8) = previous_block;\n      *(int *)(block_address + 0xc) = previous_block;\n    }\n  }\nLAB_00083ba4:\n  do_nothing_00081f98(param_1);\n  return;\n}",
            "called": [
                "FUN_00081f94",
                "FUN_00081f98",
                "FUN_00083a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b10",
            "calling": [
                "FUN_00083ca8",
                "FUN_00084484",
                "FUN_00081810",
                "FUN_00081fac",
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00081800"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00083b10"
        },
        "FUN_00080e80": {
            "renaming": {
                "FUN_00080e80": "returnZero_00080e80",
                "undefined4": "int",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "int returnZero_00080e80(void) {\n  int result = 0;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e80",
            "calling": [],
            "imported": false,
            "current_name": "returnZero_00080e80"
        },
        "thunk_FUN_0008113a": {
            "renaming": {
                "thunk_FUN_0008113a": "convert_number_to_base_thunk_0008113a",
                "param_1": "data",
                "param_2": "number",
                "param_3": "base",
                "param_4": "param_4",
                "iVar1": "result",
                "iVar2": "negative"
            },
            "code": "int convert_number_to_base_thunk_0008113a(undefined4 *data, uint number, uint base, undefined4 param_4)\n{\n  int result;\n  int negative = 0;\n  if (base == 0) {\n    result = (**(code **)*data)(data, number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    if ((int)number < 0) {\n      result = execute_function_pointer(data, 0x2d);\n      negative = 1;\n      number = -number;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = convert_number_to_base_thunk_0008113a(data, number, base, param_4);\n  if (negative) {\n    result += execute_function_pointer(data, 0x2d);\n  }\n  return result;\n}",
            "called": [
                "FUN_0008113a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081176",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "convert_number_to_base_thunk_0008113a"
        },
        "FUN_0008236c": {
            "renaming": {
                "FUN_0008236c": "calculate_and_set_sum_0008236c",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "data_pointer",
                "iVar2": "sum"
            },
            "code": "void calculate_and_set_sum_0008236c(int *output, undefined4 input)\n{\n  undefined *data_pointer;\n  int sum;\n  data_pointer = PTR_DAT_0008238c;\n  *(undefined4 *)PTR_DAT_0008238c = 0;\n  sum = calculate_sum_00080e88(input);\n  if ((sum == -1) && (*(int *)data_pointer != 0)) {\n    *output = *(int *)data_pointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080e88"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008236c",
            "calling": [
                "FUN_00081810",
                "FUN_00083a74"
            ],
            "imported": false,
            "current_name": "calculate_and_set_sum_0008236c"
        },
        "FUN_00080d62": {
            "renaming": {
                "FUN_00080d62": "set_value_to_max_int_00080d62",
                "param_1": "value"
            },
            "code": "void set_value_to_max_int_00080d62(int value)\n{\n  *(int *)(value + 0x14) = 0xffff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d62",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "set_value_to_max_int_00080d62"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "process_input_000842a4",
                "param_1": "input_length",
                "param_2": "input_value",
                "param_3": "data_structures",
                "param_4": "data_value",
                "uVar1": "input_short_value",
                "uVar2": "input_uint_value",
                "puVar3": "data_pointer",
                "iVar4": "data_int_value"
            },
            "code": "uint process_input_000842a4(int input_length, uint input_value, undefined4 *data_structures, undefined4 data_value)\n{\n  ushort input_short_value;\n  uint input_uint_value;\n  undefined *data_pointer;\n  int data_int_value;\n  \n  if ((input_length != 0) && (*(int *)(input_length + 0x38) == 0)) {\n    initialize_data_structures_00083888();\n  }\n  input_short_value = *(ushort *)(data_structures + 3);\n  input_uint_value = (uint)input_short_value;\n  data_structures[2] = data_structures[6];\n  if ((-1 < (int)(input_uint_value << 0x1c)) || (data_int_value = data_structures[4], data_int_value == 0)) {\n    data_int_value = process_data_0008356c(input_length, data_structures, input_short_value, input_uint_value, data_value);\n    if (data_int_value != 0) {\n      return 0xffffffff;\n    }\n    input_short_value = *(ushort *)(data_structures + 3);\n    data_int_value = data_structures[4];\n    input_uint_value = (uint)input_short_value;\n  }\n  input_value = input_value & 0xff;\n  if ((int)(input_uint_value << 0x12) < 0) {\n    data_pointer = (undefined *)*data_structures;\n    data_int_value = (int)data_pointer - data_int_value;\n    if (data_int_value < (int)data_structures[5]) {\nLAB_000842d6:\n      data_int_value = data_int_value + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    data_structures[0x19] = data_structures[0x19] & 0xffffdfff;\n    data_pointer = (undefined *)*data_structures;\n    *(ushort *)(data_structures + 3) = input_short_value | 0x2000;\n    data_int_value = (int)data_pointer - data_int_value;\n    if (data_int_value < (int)data_structures[5]) goto LAB_000842d6;\n  }\n  data_int_value = process_data_00083850(input_length, data_structures);\n  if (data_int_value != 0) {\n    return 0xffffffff;\n  }\n  data_pointer = (undefined *)*data_structures;\n  data_int_value = 1;\nLAB_000842d8:\n  data_structures[2] = data_structures[2] + -1;\n  *data_structures = data_pointer + 1;\n  *data_pointer = (char)input_value;\n  if (((data_structures[5] == data_int_value) ||\n      (((int)((uint)*(ushort *)(data_structures + 3) << 0x1f) < 0 && (input_value == 10)))) &&\n     (data_int_value = process_data_00083850(input_length, data_structures), data_int_value != 0)) {\n    return 0xffffffff;\n  }\n  return input_value;\n}\n",
            "called": [
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00083888"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": false,
            "current_name": "process_input_000842a4"
        },
        "FUN_000814f6": {
            "renaming": {
                "FUN_000814f6": "count_nonzero_bits_and_update_memory_if_needed_000814f6",
                "param_1": "memory",
                "param_2": "data",
                "uVar1": "count_nonzero_bits"
            },
            "code": "undefined4* count_nonzero_bits_and_update_memory_if_needed_000814f6(undefined4* memory, int data) {\n    undefined4 count_nonzero_bits;\n    memory[0] = 0;\n    memory[1] = 0;\n    memory[2] = 0;\n    if (data != 0) {\n        count_nonzero_bits = count_bytes_with_nonzero_bit_00082688(data);\n        update_memory_if_needed_000814d0(memory, data, count_nonzero_bits);\n    }\n    return memory;\n}",
            "called": [
                "FUN_00082688",
                "FUN_000814d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814f6",
            "calling": [
                "FUN_00081214"
            ],
            "imported": false,
            "current_name": "count_nonzero_bits_and_update_memory_if_needed_000814f6"
        },
        "FUN_0008397c": {
            "renaming": {
                "FUN_0008397c": "do_nothing_0008397c"
            },
            "code": "\nvoid do_nothing_0008397c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008397c",
            "calling": [
                "FUN_00084484"
            ],
            "imported": false,
            "current_name": "do_nothing_0008397c"
        },
        "FUN_0008074a": {
            "renaming": {
                "FUN_0008074a": "do_nothing_0008074a"
            },
            "code": "\nvoid do_nothing_0008074a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074a",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_0008074a"
        },
        "FUN_00080e88": {
            "renaming": {
                "FUN_00080e88": "calculate_sum_00080e88",
                "param_1": "input",
                "puVar1": "pointer_to_data",
                "iVar2": "current_sum"
            },
            "code": "int calculate_sum_00080e88(int input){\n  undefined *pointer_to_data = PTR_DAT_00080e9c;\n  if (*(int *)PTR_DAT_00080e9c == 0) {\n    *(undefined4 *)PTR_DAT_00080e9c = DAT_00080ea0;\n  }\n  int current_sum = *(int *)pointer_to_data;\n  *(int *)pointer_to_data = input + current_sum;\n  return current_sum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e88",
            "calling": [
                "FUN_0008236c"
            ],
            "imported": false,
            "current_name": "calculate_sum_00080e88"
        },
        "FUN_0008074c": {
            "renaming": {
                "FUN_0008074c": "do_nothing_0008074c"
            },
            "code": "\nvoid do_nothing_0008074c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074c",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_0008074c"
        },
        "FUN_000836d8": {
            "renaming": {
                "FUN_000836d8": "process_data_000836d8",
                "puVar1": "data_ptr",
                "puVar2": "ptr1",
                "iVar3": "index1",
                "iVar4": "index2",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "PTR_DAT_000836e8": "data",
                "DAT_000836e4": "flag",
                "PTR_DAT_000836d0": "ptr_data_1",
                "FUN_000817f0": "allocate_memory",
                "DAT_000836d4": "flag_2"
            },
            "code": "void process_data_000836d8(void)\n{\n    undefined *PTR_DAT_000836e8_ptr;\n    undefined4 *ptr1;\n    int index1;\n    int index2;\n    code *jump_table;\n\n    PTR_DAT_000836e8_ptr = PTR_DAT_000836e8;\n    if (DAT_000836e4 == 0) {\n        return;\n    }\n    index2 = *(int *)PTR_DAT_000836d0;\n    ptr1 = *(undefined4 **)(index2 + 0x148);\n    if (ptr1 == (undefined4 *)0x0) {\n        ptr1 = (undefined4 *)(index2 + 0x14c);\n        *(undefined4 **)(index2 + 0x148) = ptr1;\n    }\n    index1 = ptr1[1];\n    if (0x1f < index1) {\n        if ((DAT_000836d4 == 0) || (ptr1 = (undefined4 *)allocate_memory(400), ptr1 == (undefined4 *)0x0)) {\n            call_function_ptr(0xffffffff);\n            return;\n        }\n        *ptr1 = *(undefined4 *)(index2 + 0x148);\n        ptr1[1] = 0;\n        index1 = 0;\n        *(undefined4 **)(index2 + 0x148) = ptr1;\n        ptr1[0x62] = 0;\n        ptr1[99] = 0;\n    }\n    ptr1[1] = index1 + 1;\n    ptr1[index1 + 2] = PTR_DAT_000836e8_ptr;\n    call_function_ptr(0);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836d8",
            "calling": [
                "FUN_00081778"
            ],
            "imported": false,
            "current_name": "process_data_000836d8"
        },
        "FUN_000812b8": {
            "renaming": {
                "FUN_000812b8": "write_to_buffer_000812b8",
                "param_1": "buffer_address",
                "param_2": "data",
                "iVar1": "buffer_ptr",
                "uVar2": "mask",
                "DAT_00081308": "MASK_CONSTANT",
                "*(int *)(param_1 + 0x14)": "buffer_ptr",
                "*(int *)(param_1 + 0x18)": "buffer_size",
                "*(int *)(*(int *)(param_1 + 0x18) + 0x14)": "buffer_size_ptr",
                "*(int *)(iVar1 + 0x84)": "buffer_read_ptr",
                "*(int *)(iVar1 + 0x80)": "buffer_write_ptr",
                "*(undefined4 *)(*(int *)(param_1 + 0x18) + 0x1c)": "buffer_size_data_ptr",
                "*(char *)(iVar1 + *(int *)(iVar1 + 0x80))": "buffer_write_ptr_data",
                "*(uint *)(*(int *)(param_1 + 0x14) + 0x80)": "buffer_write_ptr_ptr",
                "*(undefined4 *)(*(int *)(param_1 + 0x18) + 8)": "buffer_status_ptr"
            },
            "code": "int write_to_buffer_000812b8(int buffer_address, int data){\n  int buffer_ptr = *(int *)(buffer_address + 0x14);\n  int buffer_size = *(int *)(buffer_address + 0x18);\n  int buffer_write_ptr = *(int *)(buffer_ptr + 0x80);\n  int buffer_read_ptr = *(int *)(buffer_ptr + 0x84);\n  if ((*(int *)(buffer_size + 0x14) << 0x1e < 0) && (*(int *)(buffer_ptr + 0x84) == *(int *)(buffer_ptr + 0x80))) {\n    *(int *)(buffer_size + 0x1c) = data;\n  }\n  else {\n    uint mask = DAT_00081308 & buffer_write_ptr + 1U;\n    if ((int)mask < 0) {\n      mask = (mask - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(buffer_ptr + 0x84) == mask);\n    *(char *)(buffer_ptr + buffer_write_ptr) = (char)data;\n    *(uint *)(buffer_ptr + 0x80) = mask;\n    *(int *)(buffer_size + 8) = 2;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000812b8",
            "calling": [],
            "imported": false,
            "current_name": "write_to_buffer_000812b8"
        },
        "thunk_FUN_00080efe": {
            "renaming": {
                "thunk_FUN_00080efe": "get_default_value_thunk_00080efe"
            },
            "code": "int32_t get_default_value_thunk_00080efe(void)\n{\n    return -1;\n}",
            "called": [
                "FUN_00080efe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008421c",
            "calling": [
                "FUN_000841e4"
            ],
            "imported": false,
            "current_name": "get_default_value_thunk_00080efe"
        },
        "FUN_000839b4": {
            "renaming": {
                "FUN_000839b4": "process_input_000839b4",
                "param_1": "address",
                "param_2": "input_length",
                "param_3": "input_buffer",
                "uVar1": "data_from_address",
                "uVar3": "input",
                "pbVar4": "input_buffer_ptr",
                "uVar5": "index",
                "local_1c": "input_buffer_local",
                "abStack_1b": "input_buffer_stack"
            },
            "code": "uint process_input_000839b4(uint address, uint input_length, byte **input_buffer)\n{\n  uint data_from_address = get_data_from_address(address);\n  if(data_from_address == 1 && input_length - 1 < 0xff)\n  {\n    uint input = input_length & 0xff;\n  }\n  else\n  {\n    byte input_buffer_local;\n    uint data_processed = process_data(address, &input_buffer_local, input_length, input_buffer + 0x17);\n    if(data_processed == 0xffffffff)\n    {\n      **(ushort **)(input_buffer + 3) = **(ushort **)(input_buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if(data_processed == 0)\n    {\n      return input_length;\n    }\n    uint input = (uint)input_buffer_local;\n  }\n  uint index = 0;\n  do\n  {\n    byte *input_buffer_ptr = *input_buffer + 2;\n    *input_buffer = input_buffer_ptr;\n    if((int)input_buffer_ptr < 0)\n    {\n      if((int)*(byte *)(input_buffer + 6) <= (int)input_buffer_ptr)\n      {\n        **input_buffer = (byte)input;\n        input_buffer_ptr = *input_buffer;\n        input = (uint)*input_buffer_ptr;\n        if(input != 10) goto LAB_00083a04;\n      }\n      int processed_input = process_input_000839b4(address, input, input_buffer);\n      if(processed_input == -1)\n      {\n        return 0xffffffff;\n      }\n    }\n    else\n    {\n      **input_buffer = (byte)input;\n      input_buffer_ptr = *input_buffer;\nLAB_00083a04:\n      *input_buffer = input_buffer_ptr + 1;\n    }\n    if(data_from_address <= index + 1)\n    {\n      return input_length;\n    }\n    input = (uint)(*(byte *)(input_buffer + 0x1b + index));\n    index = index + 1;\n  } while(true);\n}",
            "called": [
                "FUN_000842a4",
                "FUN_0008434c",
                "FUN_0008400c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000839b4",
            "calling": [
                "FUN_00082824"
            ],
            "imported": false,
            "current_name": "process_input_000839b4"
        },
        "FUN_00081570": {
            "renaming": {
                "FUN_00081570": "update_string_00081570",
                "param_1": "string_ptr",
                "param_2": "string_len",
                "param_3": "update_len",
                "iVar1": "update_result",
                "iVar2": "current_len",
                "update_if_needed_000814ae": "update_if_needed",
                "copy_string_000825cc": "copy_string"
            },
            "code": "int update_string_00081570(int *string_ptr, int string_len, int update_len) {\n  int current_len = string_ptr[2];\n  if (string_len == 0) {\n    return 0;\n  }\n  if (update_len != 0) {\n    int update_result = update_if_needed(string_ptr, current_len + update_len);\n    if (update_result == 0) {\n      return 0;\n    }\n    copy_string(string_ptr[0] + current_len, string_len);\n    string_ptr[2] = current_len + update_len;\n  }\n  return 1;\n}",
            "called": [
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081570",
            "calling": [
                "FUN_0008159e"
            ],
            "imported": false,
            "current_name": "update_string_00081570"
        },
        "FUN_000803fc": {
            "renaming": {
                "FUN_000803fc": "initialize_tc_channel_000803fc",
                "param_1": "channel_number",
                "param_2": "input_frequency",
                "param_3": "output_frequency",
                "param_4": "bit_position",
                "unaff_r4": "BITMAP_BASE_ADDRESS",
                "in_lr": "TC_START_FUNCTION",
                "uVar1": "channel_id"
            },
            "code": "void initialize_tc_channel_000803fc(int channel_number, uint32_t input_frequency, uint32_t output_frequency, uint32_t bit_position) {\n  uint64_t channel_id = ((uint64_t)input_frequency << 32) | channel_number;\n  check_input_frequency(input_frequency);\n  configure_tc_channel(channel_number, input_frequency, 0xc002);\n  set_value_at_index(channel_number, input_frequency, 0xa41);\n  *(int *)(BITMAP_BASE_ADDRESS + (bit_position >> 5) * 4) = 1 << (bit_position & 0x1f);\n  *(uint32_t *)(channel_number + input_frequency * 0x40 + 0x24) = output_frequency;\n  if (input_frequency > 2) {\n    channel_id = (*TC_START_FUNCTION)(\"source_tc.c\", 0x5c, \"TC Start\", sizeof(TC_CHANNEL), channel_number, input_frequency);\n  }\n  *(uint32_t *)((int)channel_id + (int)((uint64_t)channel_id >> 0x20) * 0x40) = 5;\n}\n",
            "called": [
                "FUN_000816f8",
                "FUN_00080b2c",
                "FUN_00080aa8",
                "FUN_00080b90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803fc",
            "calling": [
                "FUN_000806a0"
            ],
            "imported": false,
            "current_name": "initialize_tc_channel_000803fc"
        },
        "FUN_00080eb0": {
            "renaming": {
                "FUN_00080eb0": "set_memory_permissions_00080eb0",
                "param_1": "address",
                "param_2": "permissions",
                "*(undefined4 *)(param_2 + 4)": "*(int *)(address + 4)"
            },
            "code": "int set_memory_permissions_00080eb0(int* address, int permissions) {\n  *(int *)(address + 4) = permissions;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eb0",
            "calling": [
                "FUN_00084494"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_00080eb0"
        },
        "FUN_00081214": {
            "renaming": {
                "FUN_00081214": "updateStringWithMaskIfValueFound_00081214",
                "param_1": "memoryAddress",
                "param_2": "searchValue",
                "param_3": "updateValue",
                "uVar1": "foundValue"
            },
            "code": "void updateStringWithMaskIfValueFound_00081214(uint32_t memoryAddress, uint32_t searchValue, uint32_t updateValue) {\n  countNonzeroBitsAndUpdateMemoryIfNeeded(memoryAddress, PTR_DAT_00081240);\n  uint32_t foundValue;\n  while ((foundValue = findValue(searchValue), foundValue != -1 && foundValue != updateValue)) {\n    updateStringWithMask(memoryAddress, foundValue & 0xff);\n  }\n  return;\n}",
            "called": [
                "FUN_000811e8",
                "FUN_000814f6",
                "FUN_0008159e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081214",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "updateStringWithMaskIfValueFound_00081214"
        },
        "FUN_0008439c": {
            "renaming": {
                "FUN_0008439c": "write_byte_to_memory_0008439c",
                "param_1": "memory_location",
                "param_2": "byte_to_write",
                "param_3": "memory_size",
                "*param_1": "*memory_location",
                "*param_2": "byte_to_write"
            },
            "code": "int write_byte_to_memory_0008439c(int* memory_location, char byte_to_write, unsigned int memory_size) {\n  if (memory_location == NULL) {\n    return 0;\n  }\n  if (memory_size < 256) {\n    *memory_location = byte_to_write;\n    return 1;\n  }\n  *memory_location = 138;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008439c",
            "calling": [
                "FUN_0008434c"
            ],
            "imported": false,
            "current_name": "write_byte_to_memory_0008439c"
        },
        "FUN_00082824": {
            "renaming": {
                "FUN_00082824": "process_input_00082824",
                "param_1": "input_param",
                "param_2": "param_2",
                "param_3": "param_3",
                "piVar1": "current_input",
                "iVar2": "result",
                "piVar3": "current_block",
                "uVar4": "num_inputs",
                "puVar5": "input_ptr",
                "uVar6": "block_size",
                "uVar7": "total_inputs"
            },
            "code": "int process_input_00082824(int input_param, int param_2, int **param_3) {\n  int *current_input;\n  int result;\n  int *current_block;\n  uint num_inputs;\n  undefined4 *input_ptr;\n  uint block_size;\n  uint total_inputs;\n  \n  if (*(int *)(param_2 + 100) << 0x12 >= -1) {\n    result = FUNC_00083ca8();\n    param_3[2] = NULL;\n    param_3[1] = NULL;\n    return result;\n  }\n  current_block = param_3[2];\n  current_input = *param_3;\n  while (current_block != NULL) {\n    block_size = current_input[1];\n    total_inputs = block_size >> 2;\n    if (total_inputs != 0) {\n      input_ptr = (undefined4 *)(*current_input - 4);\n      num_inputs = 0;\n      do {\n        input_ptr++;\n        result = process_input_00082824_000839b4(input_param, *input_ptr, param_2);\n        num_inputs++;\n        if (result == -1) goto LAB_00082864;\n      } while (total_inputs != num_inputs);\n      current_block = param_3[2];\n    }\n    current_block = (int *)((int)current_block - (block_size & 0xFFFFFFFC));\n    param_3[2] = current_block;\n    current_input = current_input + 2;\n  }\n  result = 0;\nLAB_00082864:\n  param_3[2] = NULL;\n  param_3[1] = NULL;\n  return result;\n}",
            "called": [
                "FUN_00083ca8",
                "FUN_000839b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082824",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "process_input_00082824"
        },
        "FUN_0008427c": {
            "renaming": {
                "FUN_0008427c": "process_value_and_set_flag_0008427c",
                "param_1": "data",
                "param_2": "ptr",
                "iVar1": "value",
                "uVar2": "flag"
            },
            "code": "void process_value_and_set_flag_0008427c(int data, int* ptr){\n    int value = get_value_from_function(data, (int)*(short *)(ptr + 0xe));\n    if (value == -1) {\n        *(ushort *)(ptr + 0xc) &= 0xefff;\n    }\n    else {\n        *(ushort *)(ptr + 0xc) |= 0x1000;\n    }\n    if (value != -1) {\n        *(int *)(ptr + 0x50) = value;\n    }\n    return;\n}",
            "called": [
                "FUN_000844e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008427c",
            "calling": [],
            "imported": false,
            "current_name": "process_value_and_set_flag_0008427c"
        },
        "FUN_000809be": {
            "renaming": {
                "FUN_000809be": "update_data_000809be",
                "param_1": "data_ptr",
                "param_2": "update_type",
                "param_3": "update_value",
                "uVar1": "new_value",
                "*(uint *)(param_1 + 0x44)": "*(uint32_t *)(data_ptr + 0x44)",
                "*(uint *)(param_1 + 0x70)": "*(uint32_t *)(data_ptr + 0x70)",
                "switchD_000809c4_caseD_6": "invalid_type"
            },
            "code": "void update_data_000809be(int data_ptr, uint8_t update_type, uint32_t update_value)\n{\n  uint32_t current_value;\n  uint32_t new_value;\n  \n  *(uint32_t *)(data_ptr + 0x44) = update_value;\n  \n  switch(update_type) {\n    case 0:\n    case 3:\n    case 4:\n    case 5:\n      return;\n    case 1:\n      current_value = *(uint32_t *)(data_ptr + 0x70);\n      new_value = current_value & (current_value & ~update_value);\n      break;\n    case 2:\n      current_value = *(uint32_t *)(data_ptr + 0x70);\n      new_value = current_value | update_value;\n      break;\n    default:\n      goto invalid_type;\n  }\n  *(uint32_t *)(data_ptr + 0x70) = new_value;\n  \ninvalid_type:\n  *(uint32_t *)(data_ptr + 4) = update_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809be",
            "calling": [
                "FUN_00080a30"
            ],
            "imported": false,
            "current_name": "update_data_000809be"
        },
        "FUN_00080a94": {
            "renaming": {
                "FUN_00080a94": "check_bitwise_and_00080a94",
                "param_1": "data_ptr",
                "param_2": "mask",
                "uVar1": "val1",
                "PTR_": "ptr",
                "DAT_": "val"
            },
            "code": "uint check_bitwise_and_00080a94(uint data_PTR_, uint mask) {\n  uint result;\n  uint* PTR_1 = (uint*)(data_PTR_ + 8);\n  uint* PTR_2 = (uint*)(data_PTR_ + 0x18);\n  uint DAT_1 = *PTR_1 & mask;\n  if (DAT_1 != 0) {\n    uint DAT_2 = mask & *PTR_2;\n    if (DAT_2 == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a94",
            "calling": [
                "FUN_00081014"
            ],
            "imported": false,
            "current_name": "check_bitwise_and_00080a94"
        },
        "FUN_00081618": {
            "renaming": {
                "FUN_00081618": "set_flag_00081618",
                "DAT_00081620": "flag_data"
            },
            "code": "void set_flag_00081618(void)\n{\n  int* flag_ptr = (int*)(DAT_00081620 + 4);\n  *flag_ptr = 0x8000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081618",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "set_flag_00081618"
        },
        "FUN_0008455c": {
            "renaming": {
                "FUN_0008455c": "calculate_difference_0008455c",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "param_5": "result_array",
                "uVar1": "multiplication_result",
                "lVar2": "computation_result"
            },
            "code": "void calculate_difference_0008455c(uint first_param, int second_param, undefined4 third_param, undefined4 fourth_param, int *result_array)\n{\n  uint multiplication_result;\n  long long computation_result;\n  computation_result = FUNC_000845c0();\n  computation_result = computation_result * CONCAT44(fourth_param,third_param);\n  multiplication_result = (uint)computation_result;\n  *result_array = first_param - multiplication_result;\n  result_array[1] = (second_param - (int)((ulonglong)computation_result >> 0x20)) - (uint)(first_param < multiplication_result);\n  return;\n}",
            "called": [
                "FUN_000845c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008455c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008455c"
        },
        "FUN_000840f8": {
            "renaming": {
                "FUN_000840f8": "find_first_occurrence_of_char_000840f8",
                "param_1": "string_start",
                "param_2": "target_char",
                "param_3": "string_end",
                "puVar1": "current_char_pointer",
                "uVar2": "current_char_value",
                "pcVar3": "char_pointer_start",
                "pcVar4": "char_pointer_end",
                "bVar5": "found_target_char"
            },
            "code": "uint * find_first_occurrence_of_char_000840f8(uint *string_start, char target_char, uint *string_end)\n{\n  uint *current_char_pointer;\n  uint current_char_value;\n  char *char_pointer_start;\n  char *char_pointer_end;\n  bool found_target_char;\n  \n  if (((uint)string_start & 3) == 0) {\nLAB_00084128:\n    current_char_pointer = string_start;\n    if ((uint *)0x3 < string_end) {\n      do {\n        current_char_value = *string_start ^ CONCAT22(CONCAT11(target_char,target_char),CONCAT11(target_char,target_char));\n        current_char_pointer = string_start;\n        if ((current_char_value + 0xfefefeff & ~current_char_value & 0x80808080) != 0) break;\n        string_end = string_end + -1;\n        current_char_pointer = string_start + 1;\n        string_start = string_start + 1;\n      } while ((uint *)0x3 < string_end);\n    }\n    string_start = string_end;\n    char_pointer_end = (char *)((int)string_start + -1);\n    if ((string_start != (uint *)0x0) && (string_start = current_char_pointer, *(char *)current_char_pointer != target_char)) {\n      char_pointer_start = (char *)0x0;\n      do {\n        string_start = (uint *)((int)string_start + 1);\n        found_target_char = char_pointer_start == char_pointer_end;\n        char_pointer_start = char_pointer_start + 1;\n        if (found_target_char) goto LAB_00084150;\n      } while (*(char *)string_start != target_char);\n    }\n  }\n  else if (string_end == (uint *)0x0) {\nLAB_00084150:\n    string_start = (uint *)0x0;\n  }\n  else if (*(char *)string_start != target_char) {\n    current_char_pointer = (uint *)((int)string_start + 1);\n    string_end = (uint *)((int)string_end + -1);\n    do {\n      string_start = current_char_pointer;\n      if (((uint)string_start & 3) == 0) goto LAB_00084128;\n      if (string_end == (uint *)0x0) goto LAB_00084150;\n      current_char_pointer = (uint *)((int)string_start + 1);\n      string_end = (uint *)((int)string_end + -1);\n    } while (*(char *)string_start != target_char);\n  }\n  return string_start;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000840f8",
            "calling": [
                "FUN_00083ca8",
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "find_first_occurrence_of_char_000840f8"
        },
        "FUN_0008289c": {
            "renaming": {
                "FUN_0008289c": "FUNC_0008289c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_0008289c(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********ppppppppbVar29;\n  bool bVar30;\n  longlong lVar31;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    initialize_data_structures_00083888();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    iVar11 = process_data_0008356c(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)process_data_000834f0(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_000828ee:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082902:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082952;\n        }\n        iVar11 = process_input_00082824(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_00083142;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082952:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar30 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082976:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_0008297a:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        ppppppppbVar29 = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082984_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar30 << 6, bVar30 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((bVar2) || (bVar30 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_00082e50;\n      if (bVar1 == false) goto LAB_00082efa;\nLAB_00082d1a:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082d2e;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      ppppppppbVar29 = (byte ********)&local_90;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)piVar27 < 0) {\n        bVar30 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar30);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082adc;\n    case 0x68:\n      bVar30 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar30) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x73:\n      ppppppppbVar29 = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppbVar29 != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)count_bytes_with_nonzero_bit_00082688(ppppppppbVar29);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)find_first_occurrence_of_char_000840f8(ppppppppbVar29,0,local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppbVar29 = (byte ********)PTR_s__null__000834e8;\nLAB_00082d76:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!bVar1) goto LAB_00082ce0;\nLAB_00082bc6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      if (bVar1 != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082ace:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082adc:\n    lVar31 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      ppppppppbVar29 = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082b04;\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082afe;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          ppppppppbVar29 = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar31 >> 0x20);\n          cVar13 = '\\n';\n          calculate_difference_or_return_negative_one_00084530((int)lVar31,uVar28,10,0);\n          *(char *)ppppppppbVar29 = cVar13 + '0';\n          lVar31 = calculate_difference_or_return_negative_one_00084530((int)lVar31,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n        } while (lVar31 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n        goto LAB_00082b04;\n      }\n      local_69 = (char)piVar23 + '0';\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      goto LAB_00083282;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_000830e2;\n    do {\n      ppppppppbVar29 = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)ppppppppbVar29 = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (local_94 != (byte *******)0x0) {\n    process_input_00082824(param_1,param_2,&local_9c);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_000830e2:\n  do {\n    ppppppppbVar29 = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)ppppppppbVar29 = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082afe:\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    }\n    else {\n      *(undefined *)((int)ppppppppbVar29 + -1) = 0x30;\n      ppppppppbVar29 = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_00083282:\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n  }\nLAB_00082b04:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082b1e:\n  pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00082e4c;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00083474;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = process_input_00082824(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_00083142;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = process_input_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = process_input_00082824(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_00083142;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = process_input_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_s_0000000000000000_00083470;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_000831f2:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_input_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_00083218:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = process_input_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_s_0000000000000000_0008312c;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_0008302a:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)ppppppppbVar29;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_000831be;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = process_input_00082824(param_1,param_2,&local_9c), iVar11 != 0))\n    goto LAB_00083142;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00082fe6:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_input_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_0008300e:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_0008302a;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = process_input_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_0008302a;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])ppppppppbVar29;\nLAB_000831be:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_00083130;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_000834ec;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_0008307a:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_000830a2;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_input_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_000830a2:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083186;\n      }\n      iVar11 = process_input_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = process_input_00082824(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_00083142;\nLAB_00083186:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "called": [
                "FUN_000834f0",
                "FUN_00082824",
                "FUN_000840f8",
                "FUN_00084530",
                "FUN_00082688",
                "FUN_0008356c",
                "FUN_00083888"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0008289c",
            "calling": [
                "FUN_000817c8",
                "FUN_000834f0",
                "FUN_00081750"
            ],
            "imported": false,
            "current_name": "FUNC_0008289c"
        },
        "FUN_00081f00": {
            "renaming": {
                "FUN_00081f00": "memset_word_aligned_00081f00",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_aligned",
                "puVar2": "p",
                "uVar3": "value_word",
                "uVar4": "size_aligned",
                "bVar5": "is_end_of_loop"
            },
            "code": "void memset_word_aligned_00081f00(uint32_t* dest, uint8_t value, uint32_t size) {\n    uint32_t* dest_aligned = (uint32_t*)((uint32_t)dest & ~3);\n    uint32_t value_word = (value << 24) | (value << 16) | (value << 8) | value;\n    uint32_t size_aligned = size & ~0xF;\n    \n    // Fill aligned words\n    for (uint32_t* p = dest_aligned; p < dest_aligned + size_aligned / 4; ++p) {\n        *p = value_word;\n    }\n    \n    // Fill remaining bytes\n    uint32_t remaining = size & 0xF;\n    for (uint8_t* p = (uint8_t*)dest_aligned + size_aligned; p < (uint8_t*)dest_aligned + size_aligned + remaining; ++p) {\n        *p = value;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f00",
            "calling": [
                "FUN_000811b0",
                "FUN_00083888"
            ],
            "imported": false,
            "current_name": "memset_word_aligned_00081f00"
        },
        "FUN_00080eaa": {
            "renaming": {
                "FUN_00080eaa": "returnMaxValue_00080eaa",
                "undefined4": "int",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "int returnMaxValue_00080eaa() {\n    int maxValue = -1;\n    return maxValue;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eaa",
            "calling": [],
            "imported": false,
            "current_name": "returnMaxValue_00080eaa"
        },
        "FUN_00081d48": {
            "renaming": {
                "FUN_00081d48": "copy_memory_to_destination_buffer_00081d48",
                "param_1": "destination_buffer",
                "param_2": "source_buffer",
                "param_3": "buffer_size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "puVar3": "temp_ptr",
                "uVar4": "copy_index",
                "uVar5": "remaining_size",
                "bVar6": "is_short_copy"
            },
            "code": "undefined4 *copy_memory_to_destination_buffer_00081d48(undefined4 *destination_buffer, undefined4 *source_buffer, uint buffer_size)\n{\n    undefined4 *dest_ptr;\n    undefined4 *src_ptr;\n    uint remaining_size;\n    uint copy_size;\n    bool is_short_copy;\n\n    dest_ptr = destination_buffer;\n    if ((((uint)source_buffer | (uint)destination_buffer) & 3) != 0)\n    {\n        if (buffer_size < 8)\n        {\n            remaining_size = buffer_size - 4;\n            if (3 < buffer_size)\n            {\n                do\n                {\n                    src_ptr = source_buffer;\n                    dest_ptr = destination_buffer;\n                    is_short_copy = remaining_size != 0;\n                    remaining_size--;\n                    *(undefined *)dest_ptr = *(undefined *)src_ptr;\n                    dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n                    source_buffer = (undefined4 *)((int)src_ptr + 1);\n                } while (is_short_copy);\n                *(undefined *)(undefined4 *)((int)dest_ptr + 1) = *(undefined *)(undefined4 *)((int)src_ptr + 1);\n                *(undefined *)((int)dest_ptr + 2) = *(undefined *)((int)src_ptr + 2);\n                *(undefined *)((int)dest_ptr + 3) = *(undefined *)((int)src_ptr + 3);\n                return destination_buffer;\n            }\n            goto LAB_00081dcc;\n        }\n        if ((((uint)source_buffer & 3) != 0) && (((uint)destination_buffer & 3) != 0))\n        {\n            remaining_size = 4 - ((uint)destination_buffer & 3);\n            buffer_size = buffer_size - remaining_size;\n            src_ptr = source_buffer;\n            dest_ptr = destination_buffer;\n            if (((uint)destination_buffer & 1) != 0)\n            {\n                src_ptr = (undefined4 *)((int)source_buffer + 1);\n                dest_ptr = (undefined4 *)((int)destination_buffer + 1);\n                *(undefined *)destination_buffer = *(undefined *)source_buffer;\n            }\n            destination_buffer = dest_ptr;\n            source_buffer = src_ptr;\n            if ((remaining_size & 2) != 0)\n            {\n                source_buffer = (undefined4 *)((int)src_ptr + 2);\n                destination_buffer = (undefined4 *)((int)dest_ptr + 2);\n                *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n            }\n        }\n    }\n    while (0x3f < buffer_size)\n    {\n        *destination_buffer = *source_buffer;\n        destination_buffer[1] = source_buffer[1];\n        destination_buffer[2] = source_buffer[2];\n        destination_buffer[3] = source_buffer[3];\n        destination_buffer[4] = source_buffer[4];\n        destination_buffer[5] = source_buffer[5];\n        destination_buffer[6] = source_buffer[6];\n        destination_buffer[7] = source_buffer[7];\n        destination_buffer[8] = source_buffer[8];\n        destination_buffer[9] = source_buffer[9];\n        destination_buffer[10] = source_buffer[10];\n        destination_buffer[0xb] = source_buffer[0xb];\n        destination_buffer[0xc] = source_buffer[0xc];\n        destination_buffer[0xd] = source_buffer[0xd];\n        destination_buffer[0xe] = source_buffer[0xe];\n        destination_buffer[0xf] = source_buffer[0xf];\n        destination_buffer = destination_buffer + 0x10;\n        source_buffer = source_buffer + 0x10;\n        buffer_size = buffer_size - 0x40;\n    }\n    copy_size = buffer_size - 0x10;\n    if (0xffffffcf < buffer_size - 0x40)\n    {\n        do\n        {\n            *destination_buffer = *source_buffer;\n            destination_buffer[1] = source_buffer[1];\n            destination_buffer[2] = source_buffer[2];\n            destination_buffer[3] = source_buffer[3];\n            destination_buffer = destination_buffer + 4;\n            source_buffer = source_buffer + 4;\n            is_short_copy = 0xf < copy_size;\n            copy_size = copy_size - 0x10;\n        } while (is_short_copy);\n    }\n    remaining_size = copy_size + 0xc;\n    src_ptr = source_buffer;\n    dest_ptr = destination_buffer;\n    if (0xfffffff3 < copy_size)\n    {\n        do\n        {\n            source_buffer = src_ptr + 1;\n            *dest_ptr = *src_ptr;\n            is_short_copy = 3 < remaining_size;\n            remaining_size = remaining_size - 4;\n            dest_ptr = dest_ptr + 1;\n            src_ptr = source_buffer;\n        } while (is_short_copy);\n    }\nLAB_00081dcc:\n    if (remaining_size + 4 != 0)\n    {\n        dest_ptr = dest_ptr;\n        src_ptr = source_buffer;\n        if ((remaining_size & 1) != 0)\n        {\n            src_ptr = (undefined4 *)((int)source_buffer + 1);\n            dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n            *(undefined *)dest_ptr = *(undefined *)source_buffer;\n        }\n        if ((remaining_size + 4 & 2) != 0)\n        {\n            *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n        }\n    }\n    return destination_buffer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d48",
            "calling": [
                "FUN_00083ca8"
            ],
            "imported": false,
            "current_name": "copy_memory_to_destination_buffer_00081d48"
        },
        "FUN_00084494": {
            "renaming": {
                "FUN_00084494": "set_memory_permissions_and_return_error_code_00084494",
                "param_1": "error_code",
                "param_2": "address",
                "param_3": "size",
                "param_4": "permissions",
                "puVar1": "original_address",
                "iVar2": "result"
            },
            "code": "void set_memory_permissions_and_return_error_code_00084494(int *error_code, void *address, size_t size, int permissions, int process_id)\n{\n    void *original_address = address;\n    *error_code = 0;\n    int result = set_memory_permissions(address, size, permissions, process_id);\n    if (result == -1 && *error_code != 0)\n    {\n        *error_code = *(int *)original_address;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_00080eb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084494",
            "calling": [
                "FUN_00084018"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_and_return_error_code_00084494"
        },
        "FUN_00084530": {
            "renaming": {
                "FUN_00084530": "calculate_difference_or_return_negative_one_00084530",
                "param_1": "x",
                "param_2": "y",
                "param_3": "z",
                "param_4": "w",
                "iVar1": "result"
            },
            "code": "int calculate_difference_or_return_negative_one_00084530(int x, int y, int z, int w) {\n  int result;\n  if (w == 0 && z == 0) {\n    if (y != 0 || x != 0) {\n      result = -1;\n    }\n    else {\n      result = x;\n    }\n  }\n  else {\n    result = calculate_difference_0008458c();\n  }\n  return result;\n}",
            "called": [
                "FUN_0008458c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084530",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "calculate_difference_or_return_negative_one_00084530"
        },
        "FUN_00080970": {
            "renaming": {
                "FUN_00080970": "check_differences_and_do_nothing_00080970",
                "calculate_difference_00081248": "calculate_difference",
                "do_nothing_0008073a": "do_nothing",
                "do_nothing_00080748": "do_nothing",
                "do_nothing_0008074a": "do_nothing",
                "do_nothing_0008074c": "do_nothing"
            },
            "code": "void check_differences_and_do_nothing_00080970(void)\n{\n  int difference;\n  difference = calculate_difference(PTR_DAT_000809a4);\n  if (difference != 0) {\n    do_nothing();\n  }\n  difference = calculate_difference(PTR_DAT_000809a8);\n  if (difference != 0) {\n    do_nothing();\n  }\n  difference = calculate_difference(PTR_DAT_000809ac);\n  if (difference != 0) {\n    do_nothing();\n  }\n  difference = calculate_difference(PTR_DAT_000809b0);\n  if (difference != 0) {\n    do_nothing();\n  }\n  return;\n}",
            "called": [
                "FUN_0008074c",
                "FUN_0008073a",
                "FUN_0008074a",
                "FUN_00080748",
                "FUN_00081248"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080970",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "check_differences_and_do_nothing_00080970"
        },
        "FUN_00084018": {
            "renaming": {
                "FUN_00084018": "set_permissions_and_return_error_code_00084018",
                "param_1": "process_id",
                "param_2": "region",
                "uVar1": "permissions",
                "iVar2": "error_code",
                "iVar3": "result",
                "uVar4": "permission_bits",
                "bVar5": "is_executable",
                "auStack_54": "null_pointer",
                "local_50": "unused_variable",
                "PTR_FUN_0008427c_1_000840f4": "unmodified_pointer",
                "DAT_00084494": "memory_permission_function",
                "FUNC_00081810": "set_memory_permissions_and_return_error_code",
                "PTR_LAB_0008387c_1_000840f0": "unmodified_pointer",
                "DAT_000844bc": "get_true_value_function"
            },
            "code": "void set_permissions_and_return_error_code_00084018(int process_id, int *region)\n{\n  ushort permissions = *(ushort *)(region + 3);\n  uint permission_bits = (uint)permissions;\n  if ((int)(permission_bits << 0x1e) < 0) {\n    *region = (int)region + 0x43;\n    region[4] = (int)region + 0x43;\n    region[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)region + 0xe)) {\n    int error_code = set_memory_permissions_and_return_error_code(process_id,(int)*(short *)((int)region + 0xe),NULL);\n    if (-1 < error_code) {\n      bool is_executable = (permission_bits & 0xf000) == 0x2000;\n      if (((permission_bits & 0xf000) == 0x8000) && ((void *)region[10] == PTR_FUN_0008427c_1_000840f4)) {\n        error_code = 0x400;\n        *(ushort *)(region + 3) = permissions | 0x400;\n        region[0x13] = 0x400;\n      }\n      else {\n        error_code = 0x400;\n        *(ushort *)(region + 3) = permissions | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    permissions = *(ushort *)(region + 3);\n    permission_bits = (uint)permissions;\n  }\n  *(ushort *)(region + 3) = permissions | 0x800;\n  int permission_size = (permission_bits & 0x80) == 0 ? 0x400 : 0x40;\n  bool is_executable = false;\nLAB_00084074:\n  int error_code = set_memory_permissions_and_return_error_code(process_id,permission_size);\n  permissions = *(ushort *)(region + 3);\n  if (error_code == 0) {\n    if (-1 < (int)((uint)permissions << 0x16)) {\n      *(ushort *)(region + 3) = permissions | 2;\n      *region = (int)region + 0x43;\n      region[4] = (int)region + 0x43;\n      region[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(process_id + 0x3c) = PTR_LAB_0008387c_1_000840f0;\n    *(ushort *)(region + 3) = permissions | 0x80;\n    *region = error_code;\n    region[4] = error_code;\n    region[5] = permission_size;\n    if ((is_executable) && (error_code = get_true_value_000844bc(process_id,(int)*(short *)((int)region + 0xe)), error_code != 0))\n    {\n      *(ushort *)(region + 3) = *(ushort *)(region + 3) | 1;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_000844bc",
                "FUN_00084494",
                "FUN_00081810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084018",
            "calling": [
                "FUN_0008356c"
            ],
            "imported": false,
            "current_name": "set_permissions_and_return_error_code_00084018"
        },
        "FUN_000815de": {
            "renaming": {
                "FUN_000815de": "parse_string_to_integer_000815de",
                "param_1": "string_ptr",
                "bVar1": "current_char_info",
                "bVar2": "is_negative",
                "uVar3": "result",
                "pbVar4": "current_char_ptr",
                "uVar5": "current_char_value",
                "pbVar6": "next_char_ptr",
                "iVar7": "adjustment",
                "iVar8": "has_encountered_digit",
                "uVar9": "max_div_10",
                "uVar10": "UINT_MAX"
            },
            "code": "uint parse_string_to_integer_000815de(byte **string_ptr)\n{\n  if (*string_ptr == NULL) {\n    return 0;\n  }\n  byte *current_char_ptr = *string_ptr;\n  uint current_char_value;\n  byte *next_char_ptr;\n  int is_negative = 0;\n  int has_encountered_digit = 0;\n  uint max_div_10 = UINT_MAX / 10;\n  uint result = 0;\n  do {\n    current_char_value = (uint)*current_char_ptr;\n    next_char_ptr = current_char_ptr + 1;\n    byte current_char_info = *(byte *)(*DAT_000827f8 + current_char_value + 1);\n    if ((current_char_info & 8) != 0) {\n      if (current_char_value == 0x2d) {\n        next_char_ptr = current_char_ptr + 2;\n        is_negative = 1;\n      }\n      else if (current_char_value == 0x2b) {\n        next_char_ptr = current_char_ptr + 2;\n      }\n    }\n    if ((current_char_info & 4) == 0 && (current_char_info & 3) != 0) {\n      int adjustment = 0x30;\n      if ((current_char_info & 3) == 1) {\n        adjustment = 0x37;\n      }\n      else if ((current_char_info & 3) == 2) {\n        adjustment = 0x57;\n      }\n      int digit_value = current_char_value - adjustment;\n      if (digit_value > 9) {\n        if (!has_encountered_digit) {\n          return 0;\n        }\n        else {\n          break;\n        }\n      }\n      has_encountered_digit = 1;\n      if (result > max_div_10 || (result == max_div_10 && digit_value > UINT_MAX % 10)) {\n        return is_negative ? INT_MIN : INT_MAX;\n      }\n      result = result * 10 + digit_value;\n    }\n    current_char_ptr = next_char_ptr;\n  } while (true);\n  return is_negative ? -result : result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815de",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "parse_string_to_integer_000815de"
        },
        "FUN_000834f0": {
            "renaming": {
                "FUN_000834f0": "process_data_000834f0",
                "param_1": "data",
                "param_2": "param2",
                "iVar1": "result1",
                "iVar2": "result2",
                "local_488": "stack_buffer",
                "local_480": "buffer_size",
                "local_47c": "flag1",
                "local_47a": "flag2",
                "local_478": "buffer_ptr",
                "local_474": "var1",
                "local_470": "var2",
                "local_46c": "var3",
                "local_464": "var4",
                "local_424": "var5",
                "auStack_420": "stack_memory"
            },
            "code": "int process_data_000834f0(int data, int param2)\n{\n  int result1;\n  int result2;\n  undefined *stack_buffer[2];\n  undefined4 buffer_size;\n  ushort flag1;\n  undefined2 flag2;\n  undefined *buffer_ptr;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  undefined stack_memory[1024];\n  \n  var5 = *(undefined4 *)(param2 + 100);\n  var3 = *(undefined4 *)(param2 + 0x1c);\n  flag2 = *(undefined2 *)(param2 + 0xe);\n  var4 = *(undefined4 *)(param2 + 0x24);\n  stack_buffer[0] = stack_memory;\n  flag1 = *(ushort *)(param2 + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  var1 = 0x400;\n  var2 = 0;\n  buffer_ptr = stack_buffer[0];\n  result1 = function1(data, stack_buffer);\n  if ((-1 < result1) && (result2 = function2(data, stack_buffer), result2 != 0)) {\n    result1 = -1;\n  }\n  if ((int)((uint)flag1 << 0x19) < 0) {\n    *(ushort *)(param2 + 0xc) = *(ushort *)(param2 + 0xc) | 0x40;\n  }\n  return result1;\n}",
            "called": [
                "FUN_0008289c",
                "FUN_00083850"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000834f0",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "process_data_000834f0"
        },
        "FUN_000841e4": {
            "renaming": {
                "FUN_000841e4": "process_data_000841e4",
                "param_1": "data",
                "puVar1": "temp_ptr",
                "uVar2": "default_value",
                "piVar3": "data_pointer",
                "iVar4": "function_pointer",
                "pcVar5": "function_address",
                "unaff_r4": "param_4",
                "unaff_r5": "param_5",
                "in_lr": "param_6",
                "ppiVar6": "data_array_pointer"
            },
            "code": "int process_data_000841e4(uint data)\n{\n    int *data_pointer = *data_array;\n    if (data > 31)\n    {\n        *data_pointer = 22;\n        return -1;\n    }\n    int function_pointer = data_pointer[183];\n    if ((function_pointer == 0) || (*(code **)(function_pointer + data * 4) == (code *)0))\n    {\n        int **data_array_pointer = data_array;\n        undefined4 default_value = get_default_value(data_pointer);\n        undefined *temp_ptr = temp_data_ptr;\n        *(undefined4 *)temp_data_ptr = 0;\n        int result = execute_function(default_value, data, data, 0, data_array_pointer, param_4, param_5, param_6);\n        if ((result == -1) && (*(int *)temp_ptr != 0))\n        {\n            *data_pointer = *(int *)temp_ptr;\n            return -1;\n        }\n        return result;\n    }\n    if (*(code **)(function_pointer + data * 4) == (code *)1)\n    {\n        return 0;\n    }\n    if (*(code **)(function_pointer + data * 4) != (code *)0xffffffff)\n    {\n        *(undefined4 *)(function_pointer + data * 4) = 0;\n        (**(code **)(function_pointer + data * 4))(data);\n        return 0;\n    }\n    *data_pointer = 22;\n    return 1;\n}",
            "called": [
                "thunk_FUN_00080efe",
                "FUN_00080efc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000841e4",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": false,
            "current_name": "process_data_000841e4"
        },
        "FUN_0008113a": {
            "renaming": {
                "FUN_0008113a": "convert_number_to_base_0008113a",
                "param_1": "function_pointer",
                "param_2": "number",
                "param_3": "base",
                "param_4": "param_4",
                "iVar1": "result",
                "iVar2": "negative_flag"
            },
            "code": "int convert_number_to_base_0008113a(undefined4 *function_pointer, uint number, uint base, undefined4 param_4) {\n  int result;\n  int negative_flag;\n  if (base == 0) {\n    result = (**(code **)*function_pointer)(function_pointer, number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    if ((int)number < 0) {\n      negative_flag = execute_function_pointer(function_pointer, 0x2d);\n      result = convert_number_to_base_0008113a(function_pointer, -number, 10) + negative_flag;\n      return result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = convert_number_to_base_0008113a(function_pointer, number, base, param_4);\n  return result;\n}",
            "called": [
                "FUN_000810cc",
                "FUN_000810fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008113a",
            "calling": [
                "FUN_0008117a",
                "thunk_FUN_0008113a"
            ],
            "imported": false,
            "current_name": "convert_number_to_base_0008113a"
        },
        "FUN_0008400c": {
            "renaming": {
                "FUN_0008400c": "get_data_from_address_0008400c",
                "*DAT_00084014": "data_address",
                "return": "return data;"
            },
            "code": "int get_data_from_address_0008400c(void) {\n  int **DAT_00084014 = DAT_00084014;\n  int data = **DAT_00084014;\n  return data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008400c",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": false,
            "current_name": "get_data_from_address_0008400c"
        },
        "FUN_000814d0": {
            "renaming": {
                "FUN_000814d0": "update_memory_if_needed_000814d0",
                "param_1": "memory",
                "param_2": "new_value",
                "param_3": "size",
                "iVar1": "update_result",
                "update_if_needed_000814ae": "check_for_update",
                "clear_memory_00081480": "clear_memory",
                "copy_string_000825cc": "copy_string"
            },
            "code": "undefined4 * update_memory_if_needed_000814d0(undefined4 *memory, undefined4 new_value, undefined4 size) {\n  int update_result = check_for_update(memory, size);\n  if (update_result == 0) {\n    clear_memory(memory);\n  }\n  else {\n    memory[2] = new_value;\n    copy_string(memory[0], new_value);\n  }\n  return memory;\n}",
            "called": [
                "FUN_00081480",
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814d0",
            "calling": [
                "FUN_000814f6"
            ],
            "imported": false,
            "current_name": "update_memory_if_needed_000814d0"
        },
        "FUN_00080c20": {
            "renaming": {
                "FUN_00080c20": "copy_and_clear_memory_00080c20",
                "puVar1": "rel_array",
                "puVar2": "data_array",
                "iVar3": "i",
                "puVar4": "dat_array",
                "PTR_Elf32_Rel_ARRAY_00080c7c": "rel_array",
                "DAT_00080c78": "data_array",
                "PTR_DAT_00080c80": "dat_array",
                "PTR_DAT_00080c8c": "ptr",
                "DAT_00080c90": "ptr_dat_00080c90",
                "DAT_00080c88": "dat_00080c88",
                "DAT_00080c94": "dat_00080c94"
            },
            "code": "void copy_and_clear_memory_00080c20(void)\n{\n    uint32_t* PTR_Elf32_Rel_ARRAY_00080c7c = PTR_Elf32_Rel_ARRAY_00080c7c;\n    uint8_t* DAT_00080c78 = DAT_00080c78;\n    uint32_t* PTR_DAT_00080c80 = (uint32_t*)PTR_DAT_00080c80;\n    if (DAT_00080c78 != PTR_Elf32_Rel_ARRAY_00080c7c) {\n        for (int i = 0; PTR_Elf32_Rel_ARRAY_00080c7c + i < PTR_DAT_00080c84; i += 4) {\n            *(uint32_t*)(PTR_Elf32_Rel_ARRAY_00080c7c + i) = *(uint32_t*)(DAT_00080c78 + i);\n        }\n    }\n    for (; PTR_DAT_00080c80 < DAT_00080c88; PTR_DAT_00080c80++) {\n        *PTR_DAT_00080c80 = 0;\n    }\n    uint8_t* PTR_DAT_00080c8c = PTR_DAT_00080c8c + -0x20000000;\n    *(uint32_t*)(DAT_00080c90 + 8) = (uint32_t)PTR_DAT_00080c8c & 0x1fffff80;\n    if (PTR_DAT_00080c8c < (uint8_t*)0x100000) {\n        *(uint32_t*)(DAT_00080c90 + 8) |= 0x20000000;\n    }\n    (*DAT_00080c94)();\n    while (true) {}\n}",
            "called": [
                "FUN_000815ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c20",
            "calling": [],
            "imported": false,
            "current_name": "copy_and_clear_memory_00080c20"
        },
        "FUN_00080efc": {
            "renaming": {
                "FUN_00080efc": "do_nothing_00080efc"
            },
            "code": "\nvoid do_nothing_00080efc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efc",
            "calling": [
                "FUN_000841e4"
            ],
            "imported": false,
            "current_name": "do_nothing_00080efc"
        },
        "FUN_0008044c": {
            "renaming": {
                "FUN_0008044c": "process_input_0008044c",
                "param_1": "device_id",
                "param_2": "device_data",
                "param_3": "device_index",
                "PTR_DAT_00080554": "device_input_count",
                "PTR_DAT_00080544": "device_flags_array",
                "PTR_DAT_00080548": "device_input_array"
            },
            "code": "void process_input_0008044c(int device_id, int device_data, int device_index) {\n    byte device_flags;\n    undefined *device_index_ptr;\n    undefined *device_data_ptr;\n    undefined *device_flags_ptr;\n    uint device_input_value;\n    int device_offset;\n    \n    device_data_ptr = device_data_array;\n    device_flags_ptr = PTR_DAT_00080544;\n    device_index *= 0x40;\n    \n    if ((PTR_DAT_00080544[device_id] & 0x80) == 0) {\n        device_offset = device_id * 0xc;\n        if (((char)PTR_DAT_00080544[device_id] + device_offset < (int)(uint)(byte)*device_data_ptr) && ((int)((uint)(byte)*device_flags_ptr[((char)PTR_DAT_00080544[device_id] + device_offset) * 8] << 0x19) < 0)) {\n            process_device_input(PTR_DAT_00080544[(device_offset + (char)PTR_DAT_00080544[device_id]) * 8] & 0x3f, 0);\n        }\n    }\n    else {\n        *(uint *)(device_data + device_index) = *(uint *)(device_data + device_index) | 4;\n    }\n    device_input_value = *device_flags_ptr;\n    device_data_array[device_id] = device_data_array[device_id] + '\\x01';\n    device_index_ptr = PTR_DAT_00080548;\n    device_flags_ptr = PTR_DAT_00080544;\n    device_offset = device_id * 0xc;\n    \n    if (((char)device_data_array[device_id] + device_offset < (int)(uint)device_input_value) && ((char)PTR_DAT_00080544[device_id] < '\f')) {\n        *(int *)(device_data + device_index + 0x14) = *(int *)(device_data + device_index + 0x10) + *(int *)(PTR_DAT_00080548 + ((char)*device_flags_ptr + device_offset) * 8 + 4);\n        if (-1 < (int)((uint)(byte)PTR_DAT_00080544[((char)PTR_DAT_00080544[device_id] + device_offset) * 8] << 0x19)) {\n            return;\n        }\n        process_device_input(PTR_DAT_00080544[(device_offset + (char)PTR_DAT_00080544[device_id]) * 8] & 0x3f, 1);\n        return;\n    }\n    device_data += device_index;\n    device_input_value = (*PTR_DAT_00080554 / device_input_rate) * 20000 >> 5;\n    if (device_input_value <= *(int *)(device_data + 0x10) + 4U) {\n        device_input_value = *(int *)(device_data + 0x10) + 4;\n    }\n    *(uint *)(device_data + 0x14) = device_input_value;\n    device_data_array[device_id] = 0xff;\n}",
            "called": [
                "FUN_00081014"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008044c",
            "calling": [],
            "imported": false,
            "current_name": "process_input_0008044c"
        },
        "FUN_000810d8": {
            "renaming": {
                "FUN_000810d8": "count_nonzero_bits_000810d8",
                "param_1": "data",
                "param_2": "ptr",
                "param_3": "size",
                "param_4": "param_4"
            },
            "code": "void count_nonzero_bits_000810d8(uint32_t data, uint32_t *ptr, uint32_t size, uint32_t param_4)\n{\n  count_bytes_with_nonzero_bit(data, ptr, size, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810d8",
            "calling": [
                "FUN_0008117a",
                "FUN_000810e8"
            ],
            "imported": false,
            "current_name": "count_nonzero_bits_000810d8"
        },
        "FUN_00080efe": {
            "renaming": {
                "FUN_00080efe": "get_error_code_00080efe",
                "undefined4": "int32_t",
                "0xffffffff": "ERROR_CODE"
            },
            "code": "int32_t get_error_code_00080efe(void)\n{\n  return ERROR_CODE;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efe",
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "imported": false,
            "current_name": "get_error_code_00080efe"
        },
        "FUN_00081e34": {
            "renaming": {
                "FUN_00081e34": "reverse_copy_00081e34",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "len",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "dest_ptr",
                "uVar5": "block_count",
                "puVar6": "dest_ptr",
                "uVar7": "tail_len",
                "iVar1": "i"
            },
            "code": "void reverse_copy_00081e34(uint32_t *dest, uint32_t *src, uint32_t len) {\n  if (src < dest && dest < src + len) {\n    uint8_t *dest_ptr = (uint8_t *)dest + len;\n    uint8_t *src_ptr = (uint8_t *)src + len;\n    for (uint32_t i = 0; i < len; i++) {\n      *(--dest_ptr) = *(--src_ptr);\n    }\n  } else if (len >= 16 && (((uint32_t)dest | (uint32_t)src) & 3) == 0) {\n    uint32_t *dest_ptr = dest;\n    uint32_t *src_ptr = src;\n    uint32_t block_count = len >> 4;\n    uint32_t tail_len = len & 0xF;\n    for (uint32_t i = 0; i < block_count; i++) {\n      dest_ptr[0] = src_ptr[0];\n      dest_ptr[1] = src_ptr[1];\n      dest_ptr[2] = src_ptr[2];\n      dest_ptr[3] = src_ptr[3];\n      dest_ptr += 4;\n      src_ptr += 4;\n    }\n    if (tail_len >= 4) {\n      dest_ptr[0] = src_ptr[0];\n      dest_ptr[1] = src_ptr[1];\n      dest_ptr[2] = src_ptr[2];\n      dest_ptr[3] = src_ptr[3];\n      dest_ptr += 4;\n      src_ptr += 4;\n    }\n    if (tail_len & 2) {\n      dest_ptr[0] = src_ptr[0];\n      dest_ptr[1] = src_ptr[1];\n      dest_ptr += 2;\n      src_ptr += 2;\n    }\n    if (tail_len & 1) {\n      dest_ptr[0] = src_ptr[0];\n    }\n  } else {\n    for (uint32_t i = 0; i < len; i++) {\n      *(uint8_t *)dest++ = *(uint8_t *)src++;\n    }\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e34",
            "calling": [
                "FUN_00083ca8",
                "FUN_00081fac"
            ],
            "imported": false,
            "current_name": "reverse_copy_00081e34"
        },
        "FUN_000805a8": {
            "renaming": {
                "FUN_000805a8": "update_byte_array_000805a8",
                "param_1": "byte_array",
                "bVar1": "current_byte",
                "puVar2": "data_pointer",
                "PTR_DAT_000805d8": "byte_count",
                "DAT_000805dc": "data_array",
                "PTR_DAT_000805e4": "data_array_pointer",
                "DAT_000805e0": "data_array_size"
            },
            "code": "void update_byte_array_000805a8(byte *byte_array)\n{\n  byte current_byte;\n  uint *data_pointer;\n  \n  current_byte = *PTR_DAT_000805d8;\n  if (current_byte < 0x3c) {\n    *PTR_DAT_000805d8 = current_byte + 1;\n    data_pointer = DAT_000805dc;\n    *byte_array = current_byte;\n    *(uint *)(PTR_DAT_000805e4 + (uint)current_byte * 8 + 4) = (*data_pointer / DAT_000805e0) * 0x5dc >> 5;\n    return;\n  }\n  *byte_array = 0xff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000805a8",
            "calling": [],
            "imported": false,
            "current_name": "update_byte_array_000805a8"
        },
        "FUN_00080f08": {
            "renaming": {
                "FUN_00080f08": "do_nothing_00080f08"
            },
            "code": "\nvoid do_nothing_00080f08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f08",
            "calling": [
                "FUN_00080250",
                "FUN_000815ec",
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080f08"
        },
        "FUN_000810cc": {
            "renaming": {
                "FUN_000810cc": "execute_function_pointer_000810cc",
                "*param_1": "function_pointer"
            },
            "code": "void execute_function_pointer_000810cc(void *function_pointer) {\n  (*(void (*)())function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810cc",
            "calling": [
                "FUN_0008113a"
            ],
            "imported": false,
            "current_name": "execute_function_pointer_000810cc"
        },
        "FUN_00081276": {
            "renaming": {
                "FUN_00081276": "get_byte_from_buffer_00081276",
                "param_1": "buffer_address",
                "bVar1": "byte_to_return",
                "iVar2": "buffer_info_address"
            },
            "code": "uint get_byte_from_buffer_00081276(int buffer_address)\n{\n    byte byte_to_return;\n    int buffer_info_address;\n\n    buffer_info_address = *(int *)(buffer_address + 0x10);\n\n    if (*(int *)(buffer_info_address + 0x80) != *(int *)(buffer_info_address + 0x84)) {\n        byte_to_return = *(byte *)(buffer_info_address + *(int *)(buffer_info_address + 0x84));\n        *(uint *)(buffer_info_address + 0x84) = (*(int *)(buffer_info_address + 0x84) + 1U) & 0x7f;\n        return (uint)byte_to_return;\n    }\n    return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081276",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "get_byte_from_buffer_00081276"
        },
        "FUN_000844bc": {
            "renaming": {
                "FUN_000844bc": "get_true_value_000844bc",
                "param_1": "output_value",
                "param_2": "input_value",
                "puVar1": "ptr_data",
                "iVar2": "true_value"
            },
            "code": "void get_true_value_000844bc(int *output_value, undefined4 input_value)\n{\n    undefined *ptr_data = PTR_DAT_000844dc;\n    *(undefined4 *)ptr_data = 0;\n    int true_value = get_true_value_000844bc_from_input(input_value);\n    if (true_value == -1 && *(int *)ptr_data != 0)\n    {\n        *output_value = *(int *)ptr_data;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_00080eba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844bc",
            "calling": [
                "FUN_00084018"
            ],
            "imported": false,
            "current_name": "get_true_value_000844bc"
        },
        "FUN_00083850": {
            "renaming": {
                "FUN_00083850": "process_data_00083850",
                "param_1": "data_ptr",
                "param_2": "flags_ptr",
                "piVar1": "block_ptr",
                "iVar2": "block_size",
                "uVar3": "data_size",
                "uVar4": "read_func_result",
                "iVar5": "data_start",
                "pcVar6": "read_func_ptr",
                "unaff_r4": "result",
                "iVar7": "block_start"
            },
            "code": "undefined4 process_data_00083850(int *data_ptr, int *flags_ptr)\n{\n  int *block_ptr;\n  int block_size;\n  int data_size;\n  code *read_func_ptr;\n  int read_result;\n  undefined4 result = 0;\n  \n  if ((data_ptr != NULL) && (data_ptr[0xE] == 0)) {\n    initialize_data_structures();\n  }\n  \n  if (*(short *)(flags_ptr + 3) == 0) {\n    return 0;\n  }\n  \n  data_size = *(ushort *)(flags_ptr + 3);\n  \n  if ((int)((uint)data_size << 0x1C) < 0) {\n    int block_start = flags_ptr[4];\n    if (block_start == 0) {\n      return 0;\n    }\n    int data_start = *flags_ptr;\n    if ((data_size & 3) == 0) {\n      block_size = flags_ptr[5];\n    }\n    else {\n      block_size = 0;\n    }\n    *flags_ptr = block_start;\n    data_start = data_start - block_start;\n    flags_ptr[2] = block_size;\n    do {\n      if (data_start < 1) {\n        return 0;\n      }\n      read_result = (*(code *)flags_ptr[9])(data_ptr, flags_ptr[7], block_start, data_start, result);\n      data_start = data_start - read_result;\n      block_start = block_start + read_result;\n    } while (0 < read_result);\n    *(ushort *)(flags_ptr + 3) = *(ushort *)(flags_ptr + 3) | 0x40;\n    return 0xFFFFFFFF;\n  }\n  \n  *(ushort *)(flags_ptr + 3) = data_size | 0x800;\n  if ((flags_ptr[1] < 1) && (flags_ptr[0xF] < 1)) {\n    return 0;\n  }\n  \n  read_func_ptr = (code *)flags_ptr[10];\n  if (read_func_ptr == NULL) {\n    return 0;\n  }\n  \n  int original_data_size = *data_ptr;\n  *data_ptr = 0;\n  \n  if ((data_size & 0x1000) == 0) {\n    read_result = (*read_func_ptr)(data_ptr, flags_ptr[7], (uint)(data_size | 0x800) & 0x1000, 1);\n    if ((read_result == -1) && (*data_ptr != 0)) {\n      if ((*data_ptr == 0x1D) || (*data_ptr == 0x16)) {\n        *data_ptr = original_data_size;\n        return 0;\n      }\n      *(ushort *)(flags_ptr + 3) = *(ushort *)(flags_ptr + 3) | 0x40;\n      return 0xFFFFFFFF;\n    }\n    data_size = *(ushort *)(flags_ptr + 3);\n    read_func_ptr = (code *)flags_ptr[10];\n  }\n  else {\n    block_size = flags_ptr[0x14];\n  }\n  \n  if (((int)((uint)data_size << 0x1D) < 0) && (block_size = block_size - flags_ptr[1], flags_ptr[0xC] != 0)) {\n    block_size = block_size - flags_ptr[0xF];\n  }\n  \n  read_result = (*read_func_ptr)(data_ptr, flags_ptr[7], block_size, 0);\n  if (read_result == -1) {\n    int error_code = *data_ptr;\n    if (error_code != 0) {\n      if ((error_code != 0x1D) && (error_code != 0x16)) {\n        *(ushort *)(flags_ptr + 3) = *(ushort *)(flags_ptr + 3) | 0x40;\n        return 0xFFFFFFFF;\n      }\n      *(ushort *)(flags_ptr + 3) = *(ushort *)(flags_ptr + 3) & 0xF7FF;\n      *flags_ptr = flags_ptr[4];\n      flags_ptr[1] = 0;\n      goto LAB_00083774;\n    }\n    data_size = *(ushort *)(flags_ptr + 3) & 0xF7FF;\n    flags_ptr[1] = 0;\n    *(ushort *)(flags_ptr + 3) = data_size;\n    *flags_ptr = flags_ptr[4];\n  }\n  else {\n    data_size = *(ushort *)(flags_ptr + 3) & 0xF7FF;\n    *flags_ptr = flags_ptr[4];\n    *(ushort *)(flags_ptr + 3) = data_size;\n    flags_ptr[1] = 0;\n  }\n  \nLAB_00083774:\n  block_ptr = (int *)flags_ptr[0xC];\n  *data_ptr = original_data_size;\n  if (block_ptr == NULL) {\n    return 0;\n  }\n  if (block_ptr != flags_ptr + 0x10) {\n    allocate_memory_block(data_ptr);\n  }\n  flags_ptr[0xC] = 0;\n  return 0;\n}\n",
            "called": [
                "FUN_00083b10",
                "FUN_00083888"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083850",
            "calling": [
                "FUN_00083ca8",
                "FUN_000842a4",
                "FUN_00084484",
                "FUN_000834f0"
            ],
            "imported": false,
            "current_name": "process_data_00083850"
        },
        "FUN_000815ec": {
            "renaming": {
                "FUN_000815ec": "start_system_000815ec",
                "set_flag_00081618": "set_flag",
                "initialize_and_execute_system_00080774": "initialize_and_execute",
                "do_nothing_000815e8": "do_nothing",
                "do_nothing_00080f08": "do_nothing_with_arg",
                "process_data_and_return_status_000801e0": "process_data_and_return_status",
                "processControlModes_00080250": "process_control_modes",
                "DAT_00081614": "data_flag",
                "check_differences_and_do_nothing_00080970": "check_differences_and_do_nothing"
            },
            "code": "void start_system_000815ec(void)\n{\n  set_flag();\n  initialize_and_execute();\n  do_nothing();\n  do_nothing_with_arg(1);\n  process_data_and_return_status();\n  do {\n    do {\n      process_control_modes();\n    } while (DAT_00081614 == 0);\n    check_differences_and_do_nothing();\n  } while(true);\n}",
            "called": [
                "FUN_00080970",
                "FUN_00081618",
                "FUN_00080250",
                "FUN_000801e0",
                "FUN_00080774",
                "FUN_00080f08",
                "FUN_000815e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815ec",
            "calling": [
                "FUN_00080c20"
            ],
            "imported": false,
            "current_name": "start_system_000815ec"
        },
        "FUN_00080d3e": {
            "renaming": {
                "FUN_00080d3e": "set_bits_in_uint_at_offset_00080d3e",
                "param_1": "data",
                "param_2": "mask",
                "param_3": "value",
                "param_4": "offset"
            },
            "code": "void set_bits_in_uint_at_offset_00080d3e(uint32_t *data, uint32_t offset, uint32_t mask, uint32_t value) {\n    *data = (*data & ~mask) | ((value & mask) << offset);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d3e",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "set_bits_in_uint_at_offset_00080d3e"
        },
        "FUN_00081438": {
            "renaming": {
                "FUN_00081438": "write_buffer_with_param_and_ptr_00081438",
                "param_1": "buffer",
                "param_2": "param",
                "initialize_parameters_00081348": "initialize_parameters",
                "*param_1": "*buffer",
                "PTR_PTR_write_to_buffer_000812b8_1_00081458": "PTR_PTR_write_to_buffer"
            },
            "code": "undefined4 *write_buffer_with_param_and_ptr_00081438(undefined4 *buffer, undefined4 param) {\n    initialize_parameters();\n    *buffer = PTR_PTR_write_to_buffer_000812b8_1_00081458;\n    buffer[9] = param;\n    return buffer;\n}",
            "called": [
                "FUN_00081348"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081438",
            "calling": [
                "FUN_0008089c"
            ],
            "imported": false,
            "current_name": "write_buffer_with_param_and_ptr_00081438"
        },
        "FUN_00080b90": {
            "renaming": {
                "FUN_00080b90": "set_value_at_index_00080b90",
                "param_1": "base_address",
                "param_2": "index",
                "param_3": "value",
                "(param_1 + param_2 * 0x40 + 0x14)": "offset",
                "*(undefined4 *)(param_1 + param_2 * 0x40 + 0x14)": "*address_to_set",
                "undefined4": "int",
                "*(undefined4 *)": "*(int *)",
                ")(param_1": ")(base_address",
                "+param_2": "+index",
                "*0x40": "*0x40",
                "+0x14)": "+0x14)",
                "address_to_set": "address_to_set",
                "offset": "offset"
            },
            "code": "void set_value_at_index_00080b90(int base_address, int index, int value)\n{\n  int offset = index * 0x40 + 0x14;\n  int* address_to_set = (int*)(base_address + offset);\n  *address_to_set = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b90",
            "calling": [
                "FUN_000803fc"
            ],
            "imported": false,
            "current_name": "set_value_at_index_00080b90"
        },
        "FUN_00080748": {
            "renaming": {
                "FUN_00080748": "do_nothing_00080748"
            },
            "code": "\nvoid do_nothing_00080748(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080748",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_00080748"
        },
        "FUN_0008356c": {
            "renaming": {
                "FUN_0008356c": "process_data_0008356c",
                "*param_1": "",
                "*param_2": "params",
                "uVar1": "",
                "iVar2": "result",
                "uVar3": "",
                "uVar4": "data_entry"
            },
            "code": "int process_data_0008356c(uint16_t *data, int *params) {\n  uint16_t uVar1;\n  int iVar2;\n  uint32_t uVar3;\n  uint16_t uVar4;\n  \n  if ((*data != 0) && (*(int *)(*data + 0x38) == 0)) {\n    initialize_data_structures();\n  }\n  uVar4 = *(uint16_t *)(params + 3);\n  uVar3 = (uint32_t)uVar4;\n  if ((int)(uVar3 << 0x1c) < 0) {\n    iVar2 = params[4];\n  }\n  else {\n    if (-1 < (int)(uVar3 << 0x1b)) {\n      *param_1 = 9;\n      *(uint16_t *)(params + 3) = uVar4 | 0x40;\n      return -1;\n    }\n    if ((int)(uVar3 << 0x1d) < 0) {\n      if ((int *)params[0xc] != (int *)0x0) {\n        if ((int *)params[0xc] != params + 0x10) {\n          allocate_memory_block(param_1);\n          uVar4 = *(uint16_t *)(params + 3);\n        }\n        params[0xc] = 0;\n      }\n      iVar2 = params[4];\n      uVar4 = uVar4 & 0xffdb;\n      *params = iVar2;\n      params[1] = 0;\n    }\n    else {\n      iVar2 = params[4];\n    }\n    *(uint16_t *)(params + 3) = uVar4 | 8;\n    uVar3 = (uint32_t)(uVar4 | 8);\n  }\n  if ((iVar2 == 0) && ((uVar3 & 0x280) != 0x200)) {\n    set_permissions_and_return_error_code(param_1,params);\n    uVar3 = (uint32_t)*(uint16_t *)(params + 3);\n    iVar2 = params[4];\n  }\n  uVar1 = uVar3 & 1;\n  if (uVar1 == 0) {\n    if (-1 < (int)(uVar3 << 0x1e)) {\n      uVar1 = params[5];\n    }\n    params[2] = uVar1;\n  }\n  else {\n    params[6] = -params[5];\n    params[2] = 0;\n  }\n  if ((iVar2 == 0) && ((int)((uint32_t)*(uint16_t *)(params + 3) << 0x18) < 0)) {\n    *(uint16_t *)(params + 3) = *(uint16_t *)(params + 3) | 0x40;\n    return -1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_00084018",
                "FUN_00083b10",
                "FUN_00083888"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008356c",
            "calling": [
                "FUN_00083ca8",
                "FUN_000842a4",
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "process_data_0008356c"
        },
        "FUN_00080b98": {
            "renaming": {
                "FUN_00080b98": "initialize_system_00080b98",
                "puVar1": "memory_ptr",
                "iVar2": "memory_offset",
                "DAT_00080c04": "MEMORY_START",
                "DAT_00080c08": "MEMORY_OFFSET_PTR",
                "DAT_00080c0c": "MEMORY_OFFSET_PTR_2",
                "DAT_00080c10": "MEMORY_START_PTR",
                "DAT_00080c14": "MEMORY_OFFSET_PTR_3",
                "DAT_00080c18": "MEMORY_END_VALUE",
                "DAT_00080c1c": "MEMORY_END_PTR"
            },
            "code": "void initialize_system_00080b98(void)\n{\n    uint32_t *memory_ptr;\n    int32_t memory_offset;\n    \n    memory_ptr = DAT_00080c04;\n    *memory_ptr = MEMORY_SIZE;\n    memory_ptr[MEMORY_OFFSET] = MEMORY_SIZE;\n    memory_offset = DAT_00080c08;\n    \n    if (-1 < *(int32_t *)(memory_offset + 0x20) << 7) {\n        *(uint32_t *)(memory_offset + 0x20) = DAT_00080c10;\n        while (-1 < *(int32_t *)(memory_offset + 0x68) << 0x1f);\n    }\n    *(uint32_t *)(memory_offset + 0x20) = DAT_00080c0c;\n    while (-1 < *(int32_t *)(memory_offset + 0x68) << 0xf);\n    *(uint32_t *)(memory_offset + 0x30) = *(uint32_t *)(memory_offset + 0x30) & 0xfffffffc | 1;\n    while (-1 < *(int32_t *)(memory_offset + 0x68) << 0x1c);\n    *(uint32_t *)(memory_offset + 0x28) = DAT_00080c14;\n    while (-1 < *(int32_t *)(memory_offset + 0x68) << 0x1e);\n    *(uint32_t *)(memory_offset + 0x30) = 0x11;\n    while (-1 < *(int32_t *)(memory_offset + 0x68) << 0x1c);\n    *(uint32_t *)(memory_offset + 0x30) = 0x12;\n    while (-1 < *(int32_t *)(memory_offset + 0x68) << 0x1c);\n    *DAT_00080c1c = DAT_00080c18;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b98",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "initialize_system_00080b98"
        },
        "FUN_000810e8": {
            "renaming": {
                "FUN_000810e8": "count_bits_with_nonzero_bit_and_nonzero_param_bits_000810e8",
                "param_1": "param",
                "iVar1": "count_nonzero_bits_with_nonzero_bit",
                "iVar2": "count_nonzero_bits"
            },
            "code": "int count_bits_with_nonzero_bit_and_nonzero_param_bits_000810e8(int param)\n{\n    int count_nonzero_bits = count_nonzero_bits_000810d8(param);\n    int count_nonzero_bits_with_nonzero_bit = count_bytes_with_nonzero_bit_000810a6();\n    return count_nonzero_bits + count_nonzero_bits_with_nonzero_bit;\n}",
            "called": [
                "FUN_000810d8",
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810e8",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "count_bits_with_nonzero_bit_and_nonzero_param_bits_000810e8"
        },
        "FUN_0008073a": {
            "renaming": {
                "FUN_0008073a": "do_nothing_0008073a"
            },
            "code": "\nvoid do_nothing_0008073a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008073a",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_0008073a"
        },
        "FUN_00080d58": {
            "renaming": {
                "FUN_00080d58": "set_bit_in_array_00080d58",
                "param_1": "array_index",
                "param_2": "bit_index",
                "*(int *)(param_1 + 0x14)": "int_array",
                "1 << (param_2 & 0xff)": "bit_mask"
            },
            "code": "void set_bit_in_array_00080d58(int array_index, uint bit_index) {\n    int* int_array = (int*)(array_index + 0x14);\n    int bit_mask = 1 << (bit_index & 0xff);\n    *int_array = bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d58",
            "calling": [
                "FUN_00080f0c"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_00080d58"
        },
        "FUN_00081480": {
            "renaming": {
                "FUN_00081480": "clear_memory_00081480",
                "param_1": "memory_block",
                "*param_1": "*memory_block",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void clear_memory_00081480(int *memory_block)\n{\n    if (*memory_block != 0) {\n        allocate_memory_block();\n    }\n    *memory_block = 0;\n    memory_block[2] = 0;\n    memory_block[1] = 0;\n    return;\n}",
            "called": [
                "FUN_00081800"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081480",
            "calling": [
                "FUN_000814d0"
            ],
            "imported": false,
            "current_name": "clear_memory_00081480"
        },
        "FUN_00081f9c": {
            "renaming": {
                "FUN_00081f9c": "call_function_with_params_00081f9c",
                "param_1": "param_1",
                "param_2": "param_2",
                "DAT_00081fa8": "function_ptr",
                "FUNC_00081fac": "function_ptr"
            },
            "code": "void call_function_with_params_00081f9c(void* DAT_00081fa8, int param_1, int param_2)\n{\n  DAT_00081fa8(param_1, param_2);\n  return;\n}",
            "called": [
                "FUN_00081fac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f9c",
            "calling": [
                "FUN_00081496"
            ],
            "imported": false,
            "current_name": "call_function_with_params_00081f9c"
        },
        "FUN_00085844": {
            "renaming": {
                "FUN_00085844": "do_nothing_00085844"
            },
            "code": "\nvoid do_nothing_00085844(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085844",
            "calling": [
                "FUN_00081778"
            ],
            "imported": false,
            "current_name": "do_nothing_00085844"
        },
        "FUN_00081248": {
            "renaming": {
                "FUN_00081248": "calculate_difference_00081248",
                "param_1": "input_param",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x80)": "ptr1",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x84)": "ptr2",
                "uint": "int",
                "return": "return",
                "&": "&",
                "0x7f": "0x7f"
            },
            "code": "int calculate_difference_00081248(int input_param)\n{\n    int* ptr1 = (int*)(*(int*)(input_param + 0x10) + 0x80);\n    int* ptr2 = (int*)(*(int*)(input_param + 0x10) + 0x84);\n    int difference = *ptr1 - *ptr2;\n    return difference & 0x7f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081248",
            "calling": [
                "FUN_00080970",
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "calculate_difference_00081248"
        },
        "FUN_00081800": {
            "renaming": {
                "FUN_00081800": "allocate_memory_block_00081800",
                "param_1": "block_size",
                "*DAT_0008180c": "pointer"
            },
            "code": "void allocate_memory_block_00081800(void* *DAT_0008180c, size_t block_size)\n{\n  allocate_memory_block_00081800(*DAT_0008180c, block_size);\n  return;\n}",
            "called": [
                "FUN_00083b10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081800",
            "calling": [
                "FUN_00081480",
                "FUN_00081472",
                "FUN_0008151c"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00081800"
        },
        "FUN_0008458c": {
            "renaming": {
                "FUN_0008458c": "calculate_difference_0008458c",
                "param_1": "minuend",
                "param_2": "subtrahend",
                "param_3": "multiplicand_low",
                "param_4": "multiplicand_high",
                "param_5": "difference",
                "lVar2": "product",
                "uVar1": "product_low"
            },
            "code": "void calculate_difference_0008458c(uint32_t minuend, int32_t subtrahend, uint32_t multiplicand_low, uint32_t multiplicand_high, int32_t *difference) {\n  uint64_t product = FUNC_00084860();\n  product *= ((uint64_t)multiplicand_high << 32) | multiplicand_low;\n  uint32_t product_low = (uint32_t)product;\n  difference[0] = minuend - product_low;\n  difference[1] = subtrahend - ((int32_t)(product >> 32)) - (minuend < product_low);\n}",
            "called": [
                "FUN_00084860"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008458c",
            "calling": [
                "FUN_00084530"
            ],
            "imported": false,
            "current_name": "calculate_difference_0008458c"
        },
        "FUN_0008434c": {
            "renaming": {
                "FUN_0008434c": "process_data_0008434c",
                "param_1": "data_pointer",
                "param_2": "data_length",
                "param_3": "data_value",
                "param_4": "output_pointer",
                "uVar1": "function_return_value",
                "iVar2": "function_return_code",
                "pcVar3": "function_pointer",
                "auStack_24": "stack_variable"
            },
            "code": "void process_data_0008434c(undefined4 *data_pointer, int data_length, undefined4 data_value, undefined4 *output_pointer) {\n  undefined4 function_return_value;\n  int function_return_code;\n  code *function_pointer;\n  undefined stack_variable[12];\n  \n  if (data_length == 0) {\n    function_pointer = *function_pointer_pointer;\n    function_return_value = get_data_value();\n    function_return_code = (*function_pointer)(data_pointer, stack_variable, 0, function_return_value, output_pointer);\n  }\n  else {\n    function_pointer = *function_pointer_pointer;\n    function_return_value = get_data_value();\n    function_return_code = (*function_pointer)(data_pointer, data_length, data_value, function_return_value, output_pointer);\n  }\n  if (function_return_code == -1) {\n    *output_pointer = 0;\n    *data_pointer = 0x8a;\n  }\n  return;\n}",
            "called": [
                "FUN_00084004",
                "FUN_0008439c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008434c",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": false,
            "current_name": "process_data_0008434c"
        },
        "FUN_000845c0": {
            "renaming": {
                "FUN_000845c0": "FUNC_000845c0"
            },
            "code": "\nundefined8 FUNC_000845c0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000845c0",
            "calling": [
                "FUN_0008455c"
            ],
            "imported": false,
            "current_name": "FUNC_000845c0"
        },
        "FUN_0008159e": {
            "renaming": {
                "FUN_0008159e": "update_string_with_mask_0008159e",
                "param_1": "string",
                "param_2": "mask",
                "param_3": "value",
                "local_c": "masked_value",
                "uStack_8": "updated_string"
            },
            "code": "void update_string_with_mask_0008159e(uint32_t* string, uint32_t mask, uint32_t value) {\n  uint32_t masked_value = mask & 0xffff00ff;\n  uint32_t updated_string[1] = {0};\n  updated_string[0] = *string | masked_value | (value & 0x0000ff00);\n  update_string_00081570(string, updated_string, 1, 0, string);\n  return;\n}",
            "called": [
                "FUN_00081570"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008159e",
            "calling": [
                "FUN_00081214"
            ],
            "imported": false,
            "current_name": "update_string_with_mask_0008159e"
        },
        "FUN_000806a0": {
            "renaming": {
                "FUN_000806a0": "process_input_000806a0",
                "*param_1": "input_buffer",
                "param_2": "input_length",
                "bVar1": "data_value",
                "puVar2": "data_ptr",
                "uVar3": "tc_channel_1",
                "uVar4": "index",
                "uVar5": "tc_channel_2",
                "iVar6": "i",
                "uVar7": "input_value"
            },
            "code": "byte process_input_000806a0(byte *input_buffer, undefined4 input_length)\n{\n    byte result;\n    uint input_value = *input_buffer;\n    if (input_value > 0x3b) {\n        goto exit;\n    }\n    process_input_000806a0_00080f0c(input_length, 1, 0x220, input_value, 0x960);\n    byte *data_ptr = PTR_DAT_00080694;\n    byte data_value = data_ptr[input_value * 8];\n    input_buffer[2] = 0;\n    uint index = input_value / 0xc;\n    data_ptr[input_value * 8] = data_value & 0xc0 | (byte)input_length & 0x3f;\n    input_buffer[1] = 0;\n    int i = 0;\n    do {\n        if ((int)((uint)(byte)data_ptr[(i + index * 0xc) * 8] << 0x19) < 0) {\n            goto exit;\n        }\n        i++;\n    } while (i != 0xc);\n    if (index == 0) {\n        initialize_tc_channel_000803fc(DAT_00080698, index, 0x1e, 0x1e);\n    } else if (index == 1) {\n        initialize_tc_channel_000803fc(DAT_00080698, index, 0x1f, 0x1f);\n    } else if (index == 2) {\n        initialize_tc_channel_000803fc(DAT_00080698, index, 0x20, 0x20);\n    } else if (index == 3) {\n        initialize_tc_channel_000803fc(DAT_0008069c, 2, 0x1d, 0x1d);\n    } else if (index == 4) {\n        initialize_tc_channel_000803fc(DAT_0008069c, 0, 0x1b, 0x1b);\n    }\n    data_ptr[input_value * 8] |= 0x40;\n    result = *input_buffer;\n    exit:\n    return result;\n}",
            "called": [
                "FUN_000803fc",
                "FUN_00080f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806a0",
            "calling": [
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "process_input_000806a0"
        },
        "FUN_0008151c": {
            "renaming": {
                "FUN_0008151c": "copyData_0008151c",
                "param_1": "destination",
                "param_2": "source"
            },
            "code": "void copyData_0008151c(int *destination, int *source)\n{\n    if (*source != 0) {\n        if ((*source != 0) && (PTR_DAT_0008155c != (undefined *)0x0)) {\n            if ((uint)source[2] <= (uint)destination[1]) {\n                copy_string_000825cc();\n                destination[2] = source[2];\n                goto LAB_00081558;\n            }\n        }\n        allocate_memory_block_00081800();\n    }\n    *destination = *source;\n    destination[1] = source[1];\n    destination[2] = source[2];\n    *source = 0;\n    source[1] = 0;\nLAB_00081558:\n    source[2] = 0;\n    return;\n}",
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008151c",
            "calling": [
                "FUN_00081560"
            ],
            "imported": false,
            "current_name": "copyData_0008151c"
        },
        "FUN_000816f8": {
            "renaming": {
                "FUN_000816f8": "execute_assertion_if_null_000816f8",
                "param_1": "pointer",
                "param_2": "message",
                "param_3": "null_pointer",
                "param_4": "function"
            },
            "code": "void execute_assertion_if_null_000816f8(void* pointer, char* message) {\n                      void* function = *(void**)(*DAT_00081724 + 0xc);\n                      void* null_pointer = PTR_s___function__00081728;\n                      if (pointer == NULL) {\n                          execute_function_with_params_00081750(function, PTR_s_assertion___s__failed__file___s__0008172c, \n                          null_pointer, pointer, message, null_pointer, PTR_s__00081730);\n                          process_and_exit_on_error_000836ec();\n                      }\n                  }",
            "called": [
                "FUN_00081750",
                "FUN_000836ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816f8",
            "calling": [
                "FUN_000803fc",
                "FUN_00080b2c"
            ],
            "imported": false,
            "current_name": "execute_assertion_if_null_000816f8"
        },
        "FUN_00084484": {
            "renaming": {
                "FUN_00084484": "process_data_00084484",
                "param_1": "data",
                "uVar1": "result",
                "iVar2": "result",
                "iVar3": "data_structure",
                "*DAT_00084490": "data_structure_ptr",
                "initialize_data_structures_00083888": "initialize_data_structures",
                "process_data_00083850": "process_data_helper",
                "code": "function_pointer",
                "allocate_memory_block_00083b10": "allocate_memory_block",
                "do_nothing_0008397c": "do_nothing",
                "*(int *)(param_1 + 0x30)": "*(int *)(data + 0x30)",
                "*(int *)(param_1 + 0x44)": "*(int *)(data + 0x44)"
            },
            "code": "int process_data_00084484(int data)\n{\n  int data_structure = **DAT_00084490;\n  if (data != 0) {\n    if ((data_structure != 0) && (*(int *)(data_structure + 0x38) == 0)) {\n      initialize_data_structures();\n    }\n    if (*(short *)(data + 0xc) != 0) {\n      int result = process_data_00084484_00083850(data_structure, data);\n      if ((*(code **)(data + 0x2c) != (code *)0x0) && (result = (**(code **)(data + 0x2c))(data_structure,*(undefined4 *)(data + 0x1c)), result < 0)) {\n        return -1;\n      }\n      if ((int)((uint)*(ushort *)(data + 0xc) << 0x18) < 0) {\n        allocate_memory_block(data_structure,*(undefined4 *)(data + 0x10));\n      }\n      if (*(int *)(data + 0x30) != 0) {\n        if (*(int *)(data + 0x30) != data + 0x40) {\n          allocate_memory_block(data_structure);\n        }\n        *(undefined4 *)(data + 0x30) = 0;\n      }\n      if (*(int *)(data + 0x44) != 0) {\n        allocate_memory_block(data_structure);\n        *(undefined4 *)(data + 0x44) = 0;\n      }\n      do_nothing();\n      *(undefined2 *)(data + 0xc) = 0;\n      do_nothing();\n      return result;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_00083b10",
                "FUN_00083980",
                "FUN_00083850",
                "FUN_0008397c",
                "FUN_00083888"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084484",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00084484"
        },
        "FUN_000811ca": {
            "renaming": {
                "FUN_000811ca": "update_buffer_000811ca",
                "param_1": "buffer_address",
                "param_2": "new_value",
                "uVar1": "new_index",
                "*(int *)(param_1 + 0x80)": "current_index",
                "*(uint *)(param_1 + 0x84)": "last_index",
                "*(undefined *)(param_1 + *(int *)(param_1 + 0x80))": "current_value",
                "*(uint *)(param_1 + 0x80)": "current_index"
            },
            "code": "void update_buffer_000811ca(int buffer_address, undefined new_value)\n{\n  uint new_index;\n  uint current_index = *(int *)(buffer_address + 0x80);\n  new_index = (current_index + 1U) & 0x7f;\n  if (new_index != *(uint *)(buffer_address + 0x84)) {\n    *(undefined *)(buffer_address + current_index) = new_value;\n    *(uint *)(buffer_address + 0x80) = new_index;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ca",
            "calling": [],
            "imported": false,
            "current_name": "update_buffer_000811ca"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "calculate_values_and_return_00080164",
                "param_1": "ptr1",
                "param_2": "value1",
                "param_3": "ptr2",
                "param_4": "value2",
                "calculate_value_000806f8": "calculate_value",
                "PTR_DAT_0008017c": "ptr1",
                "PTR_DAT_00080180": "ptr2"
            },
            "code": "void calculate_values_and_return_00080164(void *PTR_DAT_0008017c, int value1, void *PTR_DAT_00080180, int value2) {\n    calculate_value(PTR_DAT_0008017c, 0x5a);\n    calculate_value(PTR_DAT_00080180, 0x5a, value1, value2);\n    return;\n}",
            "called": [
                "FUN_000806f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "calculate_values_and_return_00080164"
        },
        "FUN_00084244": {
            "renaming": {
                "FUN_00084244": "process_data_00084244",
                "param_1": "output",
                "param_2": "input_value",
                "param_3": "unused_1",
                "param_4": "unused_2",
                "sVar1": "input_short",
                "puVar2": "ptr_dat",
                "iVar3": "process_result",
                "uVar4": "input_ushort"
            },
            "code": "void process_data_00084244(int* output, int input_value, int unused_1, int unused_2)\n{\n    short input_short = *(short *)(input_value + 0xe);\n    ushort input_ushort = *(ushort *)(input_value + 0xc);\n    if ((int)((uint)input_ushort << 0x17) < 0) {\n        get_value(output, input_short, 0, 2);\n        input_ushort = *(ushort *)(input_value + 0xc);\n    }\n    *(ushort *)(input_value + 0xc) = input_ushort & 0xefff;\n    undefined* ptr_dat = PTR_DAT_000843dc;\n    *(undefined4 *)PTR_DAT_000843dc = 0;\n    int process_result = process_data_00084244_00080ec8((int)input_short, unused_1, unused_2, unused_2, unaff_r4, unaff_r5, unaff_r6, in_lr);\n    if ((process_result == -1) && (*(int *)ptr_dat != 0)) {\n        *output = *(int *)ptr_dat;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_000844e0",
                "FUN_00080ec8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084244",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00084244"
        },
        "FUN_00081496": {
            "renaming": {
                "FUN_00081496": "update_value_00081496",
                "param_1": "value_ptr",
                "param_2": "new_value",
                "iVar1": "result"
            },
            "code": "int update_value_00081496(int *value_ptr, int new_value, undefined4 param_3, undefined4 param_4)\n{\n  int result = call_function_with_params(*value_ptr, new_value + 1, param_3, param_4, param_4);\n  if (result != 0) {\n    *value_ptr = result;\n    value_ptr[1] = new_value;\n    result = 1;\n  }\n  return result;\n}",
            "called": [
                "FUN_00081f9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081496",
            "calling": [
                "FUN_000814ae"
            ],
            "imported": false,
            "current_name": "update_value_00081496"
        },
        "FUN_00084004": {
            "renaming": {
                "FUN_00084004": "get_dat_value_00084004",
                "DAT_00084008": "dat_value"
            },
            "code": "int get_dat_value_00084004(void)\n{\n  return DAT_00084008;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084004",
            "calling": [
                "FUN_0008434c"
            ],
            "imported": false,
            "current_name": "get_dat_value_00084004"
        },
        "FUN_00081014": {
            "renaming": {
                "FUN_00081014": "process_device_input_00081014",
                "param_1": "device_index",
                "param_2": "input_value",
                "param_3": "param_3",
                "puVar1": "device_data_ptrs",
                "puVar2": "device_ptrs",
                "iVar3": "bitwise_and_result",
                "uVar4": "device_data_value",
                "iVar5": "device_data_ptr"
            },
            "code": "void process_device_input_00081014(int device_index, int input_value, undefined4 param_3)\\n{\\n    undefined *device_ptrs = PTR_DAT_00081080;\\n    undefined *device_data_ptrs = PTR_DAT_0008107c;\\n    if (device_data_ptrs[device_index * 0x1c + 0xc] != \"\\0\") {\\n        if ((device_ptrs[device_index] & 0xf) == 5) {\\n            process_input_00080f0c(device_index, 1, param_3, 5, device_index, input_value, param_3);\\n        }\\n        device_ptrs[device_index] = device_ptrs[device_index] & 0xf | (byte)(input_value << 4);\\n        int device_data_ptr = *(int *)(device_data_ptrs + device_index * 0x1c);\\n        undefined4 device_data_value = *(undefined4 *)(device_data_ptrs + device_index * 0x1c + 4);\\n        int bitwise_and_result = check_bitwise_and_00080a94(device_data_ptr, device_data_value);\\n        if (bitwise_and_result == 0) {\\n            if (input_value != 0) {\\n                *(undefined4 *)(device_data_ptr + 100) = device_data_value;\\n                return;\\n            }\\n            *(undefined4 *)(device_data_ptr + 0x60) = device_data_value;\\n            return;\\n        }\\n        set_params_for_device_00080a0a(device_data_ptr, device_data_value, input_value, 0, 1);\\n    }\\n    return;\\n}",
            "called": [
                "FUN_00080a94",
                "FUN_00080f0c",
                "FUN_00080a0a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081014",
            "calling": [
                "FUN_0008044c",
                "FUN_00080250",
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "process_device_input_00081014"
        },
        "FUN_000816ec": {
            "renaming": {
                "FUN_000816ec": "add_to_buffer_000816ec",
                "param_1": "data",
                "param_2": "size",
                "param_3": "index",
                "puVar1": "buffer_ptr",
                "iVar3": "buffer_address",
                "uVar2": "buffer_size",
                "uVar4": "mask",
                "UNRECOVERED_JUMPTABLE_00": "jump_table"
            },
            "code": "void add_to_buffer_000816ec(int data, int size, int index){\n  int* buffer_ptr = *(int**)buffer_address;\n  if (buffer_ptr == NULL) {\n    buffer_ptr = (int*)(buffer_address + 4);\n    *(int**)(buffer_address) = buffer_ptr;\n  }\n  int buffer_size = buffer_ptr[1];\n  if (buffer_size > 31) {\n    if ((DAT_000836d4 == 0) || (buffer_ptr = (int*)allocate_buffer(400), buffer_ptr == NULL)) {\n      exit(-1);\n    }\n    *buffer_ptr = *(int*)(buffer_address);\n    buffer_ptr[1] = 0;\n    buffer_size = 0;\n    *(int**)(buffer_address) = buffer_ptr;\n    buffer_ptr[98] = 0;\n    buffer_ptr[99] = 0;\n  }\n  int mask = 1 << (buffer_size & 0xff);\n  buffer_ptr[buffer_size + 34] = data;\n  buffer_ptr[98] |= mask;\n  buffer_ptr[buffer_size + 66] = index;\n  buffer_ptr[99] |= mask;\n  buffer_ptr[1] = buffer_size + 1;\n  buffer_ptr[buffer_size + 35] = size;\n  jump_table(0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816ec",
            "calling": [],
            "imported": false,
            "current_name": "add_to_buffer_000816ec"
        },
        "FUN_00083ca8": {
            "renaming": {
                "FUN_00083ca8": "FUNC_00083ca8"
            },
            "code": "\nundefined4 FUNC_00083ca8(undefined4 *param_1,uint *param_2,uint **param_3)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint *puVar5;\n  uint *puVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint local_2c;\n  \n  if (param_3[2] != (uint *)0x0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar4 = (uint)uVar3;\n    if (((int)(uVar4 << 0x1c) < 0) && (param_2[4] != 0)) {\n      puVar6 = *param_3;\n      uVar2 = DAT_00083fb8;\n    }\n    else {\n      iVar1 = process_data_0008356c(param_1,param_2);\n      if (iVar1 != 0) {\n        return 0xffffffff;\n      }\n      uVar3 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar3;\n      puVar6 = *param_3;\n      uVar2 = DAT_00083fb8;\n    }\n    DAT_00083fb8 = uVar2;\n    if ((uVar3 & 2) == 0) {\n      uVar2 = uVar4 & 2;\n      uVar8 = uVar4 & 1;\n      uVar7 = uVar2;\n      uVar10 = uVar2;\n      local_2c = uVar2;\n      uVar9 = uVar8;\n      if (uVar8 == 0) {\n        while( true ) {\n          while (uVar8 == 0) {\n            uVar9 = *puVar6;\n            puVar5 = puVar6 + 1;\n            puVar6 = puVar6 + 2;\n            uVar8 = *puVar5;\n          }\n          uVar2 = param_2[2];\n          if ((int)(uVar4 << 0x16) < 0) {\n            if (uVar8 < uVar2) {\n              uVar4 = *param_2;\n              uVar2 = uVar8;\n            }\n            else if ((uVar4 & 0x480) == 0) {\n              uVar4 = *param_2;\n            }\n            else {\n              iVar1 = *param_2 - param_2[4];\n              uVar2 = iVar1 + 1 + uVar8;\n              uVar7 = (int)(param_2[5] * 3) / 2;\n              if (uVar2 <= uVar7) {\n                uVar2 = uVar7;\n              }\n              if ((int)(uVar4 << 0x15) < 0) {\n                uVar7 = FUNC_00081810(param_1,uVar2);\n                if (uVar7 == 0) {\n                  *param_1 = 0xc;\n                  uVar3 = *(ushort *)(param_2 + 3);\n                  goto LAB_00083da4;\n                }\n                copy_memory_to_destination_buffer_00081d48(uVar7,param_2[4],iVar1);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                uVar7 = FUNC_00081fac(param_1);\n                if (uVar7 == 0) {\n                  allocate_memory_block_00083b10(param_1,param_2[4]);\n                  uVar3 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              uVar4 = uVar7 + iVar1;\n              param_2[4] = uVar7;\n              param_2[5] = uVar2;\n              *param_2 = uVar4;\n              param_2[2] = uVar2 - iVar1;\n              uVar2 = uVar8;\n            }\n            reverse_copy_00081e34(uVar4,uVar9,uVar2);\n            param_2[2] = param_2[2] - uVar2;\n            *param_2 = *param_2 + uVar2;\n            uVar2 = uVar8;\n          }\n          else if ((param_2[4] < *param_2) || (uVar4 = param_2[5], uVar8 < uVar4)) {\n            if (uVar8 < uVar2) {\n              uVar2 = uVar8;\n            }\n            reverse_copy_00081e34(*param_2,uVar9,uVar2);\n            uVar4 = param_2[2];\n            param_2[2] = uVar4 - uVar2;\n            *param_2 = *param_2 + uVar2;\n            if ((uVar4 - uVar2 == 0) && (iVar1 = process_data_00083850(param_1,param_2), iVar1 != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            uVar2 = 0x7fffffff;\n            if (uVar8 < 0x7fffffff) {\n              uVar2 = uVar8;\n            }\n            uVar2 = (*(code *)param_2[9])(param_1,param_2[7],uVar9,(uVar2 / uVar4) * uVar4);\n            if ((int)uVar2 < 1) goto LAB_00083da2;\n          }\n          puVar5 = param_3[2];\n          uVar8 = uVar8 - uVar2;\n          param_3[2] = (uint *)((int)puVar5 - uVar2);\n          if ((uint *)((int)puVar5 - uVar2) == (uint *)0x0) break;\n          uVar4 = (uint)*(ushort *)(param_2 + 3);\n          uVar9 = uVar9 + uVar2;\n        }\n      }\n      else {\n        do {\n          while (uVar2 == 0) {\n            uVar10 = *puVar6;\n            uVar2 = puVar6[1];\n            local_2c = 0;\n            puVar6 = puVar6 + 2;\n          }\n          if (local_2c == 0) {\n            iVar1 = find_first_occurrence_of_char_000840f8(uVar10,10,uVar2);\n            if (iVar1 == 0) {\n              uVar7 = uVar2 + 1;\n              local_2c = 1;\n            }\n            else {\n              uVar7 = (iVar1 + 1) - uVar10;\n              local_2c = 1;\n            }\n          }\n          uVar8 = *param_2;\n          uVar4 = uVar7;\n          if (uVar2 <= uVar7) {\n            uVar4 = uVar2;\n          }\n          uVar9 = param_2[5];\n          if ((param_2[4] < uVar8) && (uVar11 = param_2[2] + uVar9, (int)uVar11 < (int)uVar4)) {\n            reverse_copy_00081e34(uVar8,uVar10,uVar11);\n            *param_2 = *param_2 + uVar11;\n            iVar1 = process_data_00083850(param_1,param_2);\n            if (iVar1 != 0) goto LAB_00083da2;\n          }\n          else if ((int)uVar4 < (int)uVar9) {\n            reverse_copy_00081e34(uVar8,uVar10,uVar4);\n            param_2[2] = param_2[2] - uVar4;\n            *param_2 = uVar4 + *param_2;\n            uVar11 = uVar4;\n          }\n          else {\n            uVar11 = (*(code *)param_2[9])(param_1,param_2[7],uVar10,uVar9);\n            if ((int)uVar11 < 1) goto LAB_00083da2;\n          }\n          uVar7 = uVar7 - uVar11;\n          if ((uVar7 == 0) && (iVar1 = process_data_00083850(param_1,param_2), local_2c = uVar7, iVar1 != 0))\n          goto LAB_00083da2;\n          puVar5 = param_3[2];\n          uVar10 = uVar10 + uVar11;\n          uVar2 = uVar2 - uVar11;\n          param_3[2] = (uint *)((int)puVar5 - uVar11);\n        } while ((uint *)((int)puVar5 - uVar11) != (uint *)0x0);\n      }\n    }\n    else {\n      uVar7 = 0;\n      uVar4 = 0;\n      do {\n        while( true ) {\n          uVar10 = uVar4;\n          if (uVar2 <= uVar4) {\n            uVar10 = uVar2;\n          }\n          if (uVar4 != 0) break;\n          uVar7 = *puVar6;\n          uVar4 = puVar6[1];\n          puVar6 = puVar6 + 2;\n        }\n        iVar1 = (*(code *)param_2[9])(param_1,param_2[7],uVar7,uVar10);\n        if (iVar1 < 1) {\nLAB_00083da2:\n          uVar3 = *(ushort *)(param_2 + 3);\nLAB_00083da4:\n          *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n          return 0xffffffff;\n        }\n        puVar5 = param_3[2];\n        uVar7 = uVar7 + iVar1;\n        uVar4 = uVar4 - iVar1;\n        param_3[2] = (uint *)((int)puVar5 - iVar1);\n      } while ((uint *)((int)puVar5 - iVar1) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00081d48",
                "FUN_00081e34",
                "FUN_00083b10",
                "FUN_00081810",
                "FUN_00081fac",
                "FUN_00083850",
                "FUN_000840f8",
                "FUN_0008356c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083ca8",
            "calling": [
                "FUN_00082824"
            ],
            "imported": false,
            "current_name": "FUNC_00083ca8"
        },
        "FUN_00081810": {
            "renaming": {
                "FUN_00081810": "FUNC_00081810"
            },
            "code": "\nint * FUNC_00081810(undefined4 *param_1,uint param_2)\n\n{\n  uint uVar1;\n  uint *puVar2;\n  undefined *puVar3;\n  int iVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  int iVar9;\n  int *piVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  int *piVar14;\n  uint uVar15;\n  int *piVar16;\n  uint uVar17;\n  uint uVar18;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081876;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081876:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  do_nothing_00081f94(param_1);\n  uVar1 = DAT_00081b3c;\n  if (uVar15 < 0x1f8) {\n    iVar13 = *(int *)(DAT_00081b3c + uVar15 + 0xc);\n    if ((iVar13 != DAT_00081b3c + uVar15) ||\n       (iVar4 = iVar13 + 8, iVar13 = *(int *)(iVar13 + 0x14), iVar4 != iVar13)) {\n      iVar7 = *(int *)(iVar13 + 0xc);\n      iVar9 = (*(uint *)(iVar13 + 4) & 0xfffffffc) + iVar13;\n      uVar15 = *(uint *)(iVar9 + 4);\n      iVar4 = *(int *)(iVar13 + 8);\n      *(int *)(iVar4 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar9 + 4) = uVar15 | 1;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    uVar18 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar18 = uVar15 >> 9;\n    if (uVar18 == 0) {\n      iVar4 = 0x7e;\n      iVar13 = 0x3f;\n    }\n    else if (uVar18 < 5) {\n      iVar13 = (uVar15 >> 6) + 0x38;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x15) {\n      iVar13 = uVar18 + 0x5b;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x55) {\n      iVar13 = (uVar15 >> 0xc) + 0x6e;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x155) {\n      iVar13 = (uVar15 >> 0xf) + 0x77;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x555) {\n      iVar13 = (uVar15 >> 0x12) + 0x7c;\n      iVar4 = iVar13 * 2;\n    }\n    else {\n      iVar4 = 0xfc;\n      iVar13 = 0x7e;\n    }\n    iVar7 = DAT_00081b3c + iVar4 * 4;\n    for (iVar4 = *(int *)(iVar7 + 0xc); iVar7 != iVar4; iVar4 = *(int *)(iVar4 + 0xc)) {\n      uVar18 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n      iVar9 = uVar18 - uVar15;\n      if (0xf < iVar9) {\n        iVar13 = iVar13 + -1;\n        break;\n      }\n      if (-1 < iVar9) {\n        iVar7 = uVar18 + iVar4;\n        uVar15 = *(uint *)(iVar7 + 4);\n        iVar9 = *(int *)(iVar4 + 0xc);\n        iVar13 = *(int *)(iVar4 + 8);\n        *(int *)(iVar13 + 0xc) = iVar9;\n        *(int *)(iVar9 + 8) = iVar13;\n        *(uint *)(iVar7 + 4) = uVar15 | 1;\n        do_nothing_00081f98(param_1);\n        return (int *)(iVar4 + 8);\n      }\n    }\n    uVar18 = iVar13 + 1;\n  }\n  iVar13 = *(int *)(DAT_00081b3c + 0x10);\n  iVar4 = DAT_00081b3c + 8;\n  if (iVar13 == iVar4) {\n    uVar5 = *(uint *)(DAT_00081b3c + 4);\n  }\n  else {\n    uVar5 = *(uint *)(iVar13 + 4);\n    uVar6 = uVar5 & 0xfffffffc;\n    uVar8 = uVar6 - uVar15;\n    if (0xf < (int)uVar8) {\n      iVar7 = uVar15 + iVar13;\n      *(uint *)(iVar13 + 4) = uVar15 | 1;\n      *(int *)(uVar1 + 0x14) = iVar7;\n      *(int *)(uVar1 + 0x10) = iVar7;\n      *(int *)(iVar7 + 0xc) = iVar4;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar7 + 4) = uVar8 | 1;\n      *(uint *)(iVar7 + uVar8) = uVar8;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    *(int *)(DAT_00081b3c + 0x14) = iVar4;\n    *(int *)(uVar1 + 0x10) = iVar4;\n    if (-1 < (int)uVar8) {\n      *(uint *)(uVar6 + iVar13 + 4) = *(uint *)(uVar6 + iVar13 + 4) | 1;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    if (uVar6 < 0x200) {\n      iVar9 = uVar1 + (uVar5 & 0xfffffff8);\n      iVar7 = *(int *)(iVar9 + 8);\n      uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(uVar1 + 4);\n      *(int *)(iVar13 + 8) = iVar7;\n      *(int *)(iVar13 + 0xc) = iVar9;\n      *(uint *)(uVar1 + 4) = uVar5;\n      *(int *)(iVar9 + 8) = iVar13;\n      *(int *)(iVar7 + 0xc) = iVar13;\n    }\n    else {\n      uVar8 = uVar5 >> 9;\n      if (uVar8 < 5) {\n        iVar9 = (uVar5 >> 6) + 0x38;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x15) {\n        iVar9 = uVar8 + 0x5b;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x55) {\n        iVar9 = (uVar5 >> 0xc) + 0x6e;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x155) {\n        iVar9 = (uVar5 >> 0xf) + 0x77;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x555) {\n        iVar9 = (uVar5 >> 0x12) + 0x7c;\n        iVar7 = iVar9 * 2;\n      }\n      else {\n        iVar7 = 0xfc;\n        iVar9 = 0x7e;\n      }\n      iVar7 = uVar1 + iVar7 * 4;\n      iVar12 = *(int *)(iVar7 + 8);\n      if (iVar12 == iVar7) {\n        uVar5 = *(uint *)(DAT_00081d44 + 4) | 1 << (iVar9 >> 2 & 0xffU);\n        *(uint *)(DAT_00081d44 + 4) = uVar5;\n        iVar9 = iVar12;\n      }\n      else {\n        do {\n          iVar9 = iVar12;\n          if ((*(uint *)(iVar12 + 4) & 0xfffffffc) <= uVar6) break;\n          iVar12 = *(int *)(iVar12 + 8);\n          iVar9 = iVar12;\n        } while (iVar7 != iVar12);\n        iVar12 = *(int *)(iVar9 + 0xc);\n        uVar5 = *(uint *)(uVar1 + 4);\n      }\n      *(int *)(iVar13 + 0xc) = iVar12;\n      *(int *)(iVar13 + 8) = iVar9;\n      *(int *)(iVar12 + 8) = iVar13;\n      *(int *)(iVar9 + 0xc) = iVar13;\n    }\n  }\n  uVar6 = 1 << ((int)uVar18 >> 2 & 0xffU);\n  if (uVar6 <= uVar5) {\n    if ((uVar5 & uVar6) == 0) {\n      uVar18 = uVar18 & 0xfffffffc;\n      do {\n        uVar6 = uVar6 << 1;\n        uVar18 = uVar18 + 4;\n      } while ((uVar5 & uVar6) == 0);\n    }\n    do {\n      piVar16 = (int *)(uVar1 + uVar18 * 8);\n      piVar14 = piVar16;\n      uVar5 = uVar18;\n      do {\n        for (piVar10 = (int *)piVar14[3]; piVar14 != piVar10; piVar10 = (int *)piVar10[3]) {\n          uVar8 = piVar10[1] & 0xfffffffc;\n          uVar17 = uVar8 - uVar15;\n          if (0xf < (int)uVar17) {\n            iVar9 = piVar10[2];\n            iVar13 = piVar10[3];\n            iVar7 = uVar15 + (int)piVar10;\n            piVar10[1] = uVar15 | 1;\n            *(int *)(iVar9 + 0xc) = iVar13;\n            *(int *)(iVar13 + 8) = iVar9;\n            *(int *)(uVar1 + 0x14) = iVar7;\n            *(int *)(uVar1 + 0x10) = iVar7;\n            *(int *)(iVar7 + 0xc) = iVar4;\n            *(int *)(iVar7 + 8) = iVar4;\n            *(uint *)(iVar7 + 4) = uVar17 | 1;\n            *(uint *)(iVar7 + uVar17) = uVar17;\n            do_nothing_00081f98(param_1);\n            return piVar10 + 2;\n          }\n          if (-1 < (int)uVar17) {\n            iVar13 = piVar10[2];\n            iVar4 = piVar10[3];\n            *(uint *)((int)piVar10 + uVar8 + 4) = *(uint *)((int)piVar10 + uVar8 + 4) | 1;\n            *(int *)(iVar13 + 0xc) = iVar4;\n            *(int *)(iVar4 + 8) = iVar13;\n            do_nothing_00081f98(param_1);\n            return piVar10 + 2;\n          }\n        }\n        uVar5 = uVar5 + 1;\n        piVar14 = piVar14 + 2;\n      } while ((uVar5 & 3) != 0);\n      do {\n        uVar8 = uVar18 & 3;\n        piVar14 = piVar16 + -2;\n        uVar18 = uVar18 - 1;\n        if (uVar8 == 0) {\n          uVar8 = *(uint *)(uVar1 + 4) & ~uVar6;\n          *(uint *)(uVar1 + 4) = uVar8;\n          goto LAB_00081c5e;\n        }\n        piVar16 = (int *)*piVar16;\n      } while (piVar16 == piVar14);\n      uVar8 = *(uint *)(uVar1 + 4);\nLAB_00081c5e:\n      uVar6 = uVar6 * 2;\n      if ((uVar8 <= uVar6 && uVar6 - uVar8 != 0) || (uVar18 = uVar5, uVar6 == 0)) break;\n      for (; (uVar8 & uVar6) == 0; uVar6 = uVar6 << 1) {\n        uVar18 = uVar18 + 4;\n      }\n    } while( true );\n  }\n  puVar2 = DAT_00081b44;\n  uVar18 = *(uint *)(uVar1 + 8);\n  uVar5 = *(uint *)(uVar18 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar5) && (uVar8 = uVar5 - uVar15, uVar6 = uVar18, 0xf < (int)uVar8))\n  goto LAB_00081b1a;\n  uVar8 = uVar18 + uVar5;\n  if (*DAT_00081b44 == 0xffffffff) {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00081b40 + 0x10;\n  }\n  else {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00081b40 + 0x100f & 0xfffff000;\n  }\n  uVar6 = calculate_and_set_sum_0008236c(param_1,uVar17);\n  puVar3 = PTR_DAT_00081b50;\n  if ((uVar6 == 0xffffffff) || ((uVar6 < uVar8 && (uVar18 != uVar1)))) {\n    uVar6 = *(uint *)(uVar1 + 8);\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar11 = *(int *)PTR_DAT_00081b50 + uVar17;\n    *(uint *)PTR_DAT_00081b50 = uVar11;\n    if ((uVar8 == uVar6) && ((uVar8 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(uVar1 + 8) + 4) = uVar17 + uVar5 | 1;\n    }\n    else {\n      if (*puVar2 == 0xffffffff) {\n        *DAT_00081b44 = uVar6;\n      }\n      else {\n        *(uint *)puVar3 = uVar11 + (uVar6 - uVar8);\n      }\n      uVar8 = uVar6 & 7;\n      if (uVar8 == 0) {\n        iVar13 = 0x1000;\n      }\n      else {\n        uVar6 = uVar6 + (8 - uVar8);\n        iVar13 = 0x1008 - uVar8;\n      }\n      iVar13 = iVar13 - (uVar17 + uVar6 & 0xfff);\n      iVar4 = calculate_and_set_sum_0008236c(param_1,iVar13);\n      if (iVar4 == -1) {\n        uVar8 = 1;\n        iVar13 = 0;\n      }\n      else {\n        uVar8 = (iVar4 - uVar6) + iVar13 | 1;\n      }\n      uVar11 = *(int *)puVar3 + iVar13;\n      *(uint *)(uVar1 + 8) = uVar6;\n      *(uint *)puVar3 = uVar11;\n      *(uint *)(uVar6 + 4) = uVar8;\n      puVar3 = PTR_DAT_00081b50;\n      if (uVar18 != uVar1) {\n        if (uVar5 < 0x10) {\n          *(undefined4 *)(uVar6 + 4) = 1;\n          uVar18 = 0;\n          goto LAB_00081b04;\n        }\n        uVar5 = uVar5 - 0xc & 0xfffffff8;\n        *(uint *)(uVar18 + 4) = uVar5 | *(uint *)(uVar18 + 4) & 1;\n        *(undefined4 *)(uVar18 + uVar5 + 4) = 5;\n        *(undefined4 *)(uVar18 + uVar5 + 8) = 5;\n        if (0xf < uVar5) {\n          allocate_memory_block_00083b10(param_1,uVar18 + 8);\n          uVar11 = *(uint *)puVar3;\n        }\n      }\n    }\n    uVar6 = *(uint *)(uVar1 + 8);\n    if (*(uint *)PTR_DAT_00081b48 < uVar11) {\n      *(uint *)PTR_DAT_00081b48 = uVar11;\n    }\n    if (*(uint *)PTR_DAT_00081b4c < uVar11) {\n      *(uint *)PTR_DAT_00081b4c = uVar11;\n    }\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\nLAB_00081b04:\n  uVar8 = uVar18 - uVar15;\n  if ((uVar18 < uVar15) || ((int)uVar8 < 0x10)) {\n    do_nothing_00081f98(param_1);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  *(uint *)(uVar6 + 4) = uVar15 | 1;\n  *(uint *)(uVar1 + 8) = uVar15 + uVar6;\n  *(uint *)(uVar15 + uVar6 + 4) = uVar8 | 1;\n  do_nothing_00081f98(param_1);\n  return (int *)(uVar6 + 8);\n}\n\n",
            "called": [
                "FUN_00081f94",
                "FUN_00083b10",
                "FUN_0008236c",
                "FUN_00081f98"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081810",
            "calling": [
                "FUN_00083ca8",
                "FUN_00084018",
                "FUN_00081fac",
                "FUN_000817f0"
            ],
            "imported": false,
            "current_name": "FUNC_00081810"
        },
        "FUN_000814ae": {
            "renaming": {
                "FUN_000814ae": "update_if_needed_000814ae",
                "param_1": "ptr_value",
                "param_2": "threshold",
                "iVar1": "update_result"
            },
            "code": "int update_if_needed_000814ae(int *ptr_value, uint threshold) {\n  int current_value = *ptr_value;\n  uint next_value = (uint)ptr_value[1];\n  if ((current_value == 0) || (next_value < threshold)) {\n    int update_result = update_value(ptr_value);\n    if (update_result == 0) {\n      return 0;\n    }\n    if (ptr_value[2] == 0) {\n      *(undefined *)*ptr_value = 0;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_00081496"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814ae",
            "calling": [
                "FUN_00081570",
                "FUN_000814d0"
            ],
            "imported": false,
            "current_name": "update_if_needed_000814ae"
        },
        "FUN_00081778": {
            "renaming": {
                "FUN_00081778": "execute_functions_00081778",
                "puVar1": "start_ptr",
                "puVar2": "end_ptr",
                "iVar3": "i",
                "ppcVar4": "ppc_function_ptr",
                "iVar5": "num_functions"
            },
            "code": "void execute_functions_00081778()\n{\n  undefined *start_ptr = PTR_LAB_000817c0;\n  undefined *end_ptr = PTR_DAT_000817c4;\n  int num_functions = (int)end_ptr - (int)start_ptr >> 2;\n  if (num_functions != 0) {\n    code **ppc_function_ptr = (code **)(end_ptr + -4);\n    int i = 0;\n    do {\n      i++;\n      ppc_function_ptr++;\n      (**ppc_function_ptr)();\n    } while (num_functions != i);\n  }\n}\n",
            "called": [
                "FUN_00080118",
                "FUN_000836d8",
                "FUN_00085844"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081778",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "execute_functions_00081778"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "check_and_return_000800f4",
                "param_1": "input",
                "*PTR_DAT_0008010c": "*string_pointer",
                "DAT_00080110": "number",
                "DAT_00080114": "return_value"
            },
            "code": "int check_and_return_000800f4(int input) {\n    if (*PTR_DAT_0008010c == '\\0') {\n        if (DAT_00080110 != 0) {\n            input = DAT_00080114;\n        }\n        *PTR_DAT_0008010c = 1;\n    }\n    return input;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [],
            "imported": false,
            "current_name": "check_and_return_000800f4"
        },
        "FUN_000810c4": {
            "renaming": {
                "FUN_000810c4": "count_nonzero_bits_000810c4",
                "count_bytes_with_nonzero_bit_000810a6": "count_bytes_with_nonzero_bit"
            },
            "code": "void count_nonzero_bits_000810c4() \n{\n  count_bytes_with_nonzero_bit();\n  return;\n}",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810c4",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "count_nonzero_bits_000810c4"
        },
        "FUN_00080d30": {
            "renaming": {
                "FUN_00080d30": "update_bit_in_register_at_address_00080d30",
                "param_1": "address",
                "param_2": "value",
                "param_3": "mask",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void update_bit_in_register_at_address_00080d30(int address, uint32_t value, uint32_t mask) {\n  uint32_t* register_address = (uint32_t*)(address + 4);\n  uint32_t current_value = *register_address;\n  uint32_t masked_value = value | current_value | ((mask & 1) << 7);\n  *register_address = masked_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d30",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "update_bit_in_register_at_address_00080d30"
        },
        "FUN_00080c98": {
            "renaming": {
                "FUN_00080c98": "find_value_at_index_00080c98",
                "param_1": "result",
                "param_2": "input",
                "param_3": "factor",
                "param_4": "max_index",
                "local_58": "local_values",
                "uVar1": "num_groups",
                "uVar2": "index"
            },
            "code": "uint32_t find_value_at_index_00080c98(uint32_t *result, uint32_t input, int factor, int max_index) {\n  uint32_t local_values[16];\n  local_values[0] = *(uint32_t *)PTR_DAT_00080d28;\n  local_values[1] = *(uint32_t *)(PTR_DAT_00080d28 + 4);\n  local_values[2] = *(uint32_t *)(PTR_DAT_00080d28 + 8);\n  local_values[3] = *(uint32_t *)(PTR_DAT_00080d28 + 0xc);\n  local_values[4] = *(uint32_t *)(PTR_DAT_00080d28 + 0x10);\n  local_values[5] = *(uint32_t *)(PTR_DAT_00080d28 + 0x14);\n  local_values[6] = *(uint32_t *)(PTR_DAT_00080d28 + 0x18);\n  local_values[7] = *(uint32_t *)(PTR_DAT_00080d28 + 0x1c);\n  local_values[8] = *(uint32_t *)(PTR_DAT_00080d28 + 0x20);\n  local_values[9] = *(uint32_t *)(PTR_DAT_00080d28 + 0x24);\n  local_values[10] = *(uint32_t *)(PTR_DAT_00080d28 + 0x28);\n  local_values[11] = *(uint32_t *)(PTR_DAT_00080d28 + 0x2c);\n  local_values[12] = *(uint32_t *)(PTR_DAT_00080d28 + 0x30);\n  local_values[13] = *(uint32_t *)(PTR_DAT_00080d28 + 0x34);\n  local_values[14] = *(uint32_t *)(PTR_DAT_00080d28 + 0x38);\n  local_values[15] = *(uint32_t *)(PTR_DAT_00080d28 + 0x3c);\n  *result = 1;\n  result[1] = 0;\n  result[0x48] = 0x202;\n  result[0x41] = 0;\n  result[0x45] = 0;\n  uint32_t num_groups = input / (uint32_t)(factor * 2);\n  if (input == factor * 2 * num_groups) {\n    num_groups = num_groups - 1;\n  }\n  uint32_t index = 0;\n  do {\n    if ((uint32_t)(max_index * (int)(((uint64_t)input / (uint64_t)((num_groups + 1) * 2)) / (uint64_t)DAT_00080d2c)) <= local_values[index]) {\n      result[1] = (index & 0xf) << 0x10 | (num_groups & 0xff) << 8 | result[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c98",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "find_value_at_index_00080c98"
        },
        "FUN_00080eec": {
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "param_1": "status",
                "param_2": "N/A",
                "param_3": "N/A",
                "param_4": "N/A",
                "copy_param_to_stack_and_call_func_000817c8": "copy_params_and_call_func",
                "PTR_s_Exiting_with_status__d__00080ef8": "PTR_s_Exiting_with_status__d__00080ef8"
            },
            "code": "void exit_with_status_00080eec(int status)\n{\n  copy_params_and_call_func(PTR_s_Exiting_with_status__d__00080ef8, status);\n  while( true )\n  {\n    // Do nothing block with infinite loop\n  }\n}",
            "called": [
                "FUN_000817c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eec",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": false,
            "current_name": "exit_with_status_00080eec"
        },
        "FUN_000811e8": {
            "renaming": {
                "FUN_000811e8": "find_value_000811e8",
                "*param_1": "*arr",
                "iVar1": "current_value",
                "thunk_get_value_from_pointer_000816d8": "get_current_value"
            },
            "code": "int find_value_000811e8(int *arr){\n        int current_value = get_current_value();\n        arr[3] = current_value;\n        do{\n            current_value = (**(code **)(*arr + 0xc))(arr);\n            if(current_value >= 0){\n                return current_value;\n            }\n            current_value = get_current_value();\n        } while(current_value - arr[3] < arr[2]);\n        return -1;\n    }",
            "called": [
                "thunk_FUN_000816d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811e8",
            "calling": [
                "FUN_00081214"
            ],
            "imported": false,
            "current_name": "find_value_000811e8"
        },
        "FUN_000815e8": {
            "renaming": {
                "FUN_000815e8": "do_nothing_000815e8"
            },
            "code": "\nvoid do_nothing_000815e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815e8",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "do_nothing_000815e8"
        },
        "FUN_000806f8": {
            "renaming": {
                "FUN_000806f8": "calculate_value_000806f8",
                "param_1": "input",
                "param_2": "input_length",
                "uVar1": "length",
                "calculate_value_0008145c": "calculate_value_helper",
                "PTR_DAT_000806f4": "data_pointer",
                "*param_1": "input[0]",
                "DAT_000806ec": "data_1",
                "DAT_000806f0": "data_2"
            },
            "code": "void calculate_value_000806f8(byte *input, uint input_length) {\n  uint length = input_length;\n  if (length < 546) {\n    if (length > 179) {\n      length = 180;\n    }\n    uint value = calculate_value_000806f8_helper(input[1], input[2], length);\n    update_data(input[0], value);\n  }\n}\n\nuint calculate_value_000806f8_helper(byte input1, byte input2, uint length) {\n  uint value = (136 - input1) * 4;\n  if (length + value >= 0 && length <= (1500 - input2) * 4) {\n    return length;\n  }\n  return value;\n}\n\nvoid update_data(byte input, uint value) {\n  *(uint *)(PTR_DAT_000806f4 + (uint)input * 8 + 4) = (*DAT_000806ec / DAT_000806f0) * (value - 2) >> 5;\n}",
            "called": [
                "FUN_0008145c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806f8",
            "calling": [
                "FUN_00080250",
                "FUN_00080164"
            ],
            "imported": false,
            "current_name": "calculate_value_000806f8"
        },
        "FUN_00082390": {
            "renaming": {
                "FUN_00082390": "FUNC_00082390"
            },
            "code": "\nint FUNC_00082390(uint *param_1,uint *param_2)\n\n{\n  uint *puVar1;\n  int iVar2;\n  uint *puVar3;\n  uint *puVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  \n  if ((((uint)param_1 | (uint)param_2) & 7) != 0) {\n    puVar1 = param_1;\n    if (((uint)param_1 & 3) != 0) {\n      puVar1 = (uint *)((uint)param_1 & 0xfffffffc) + 1;\n      uVar5 = *(uint *)((uint)param_1 & 0xfffffffc);\n      puVar3 = param_2;\n      if (((uint)param_1 & 1) == 0) {\nLAB_00082410:\n        puVar4 = (uint *)((int)puVar3 + 1);\n        uVar6 = uVar5 >> 0x10 & 0xff;\n        iVar2 = uVar6 - *(byte *)puVar3;\n        if (iVar2 != 0) {\n          return iVar2;\n        }\n        if (uVar6 == 0) {\n          return 0;\n        }\n      }\n      else {\n        puVar4 = param_2;\n        if (((uint)param_1 & 2) == 0) {\n          puVar3 = (uint *)((int)param_2 + 1);\n          uVar6 = uVar5 >> 8 & 0xff;\n          iVar2 = uVar6 - *(byte *)param_2;\n          if (iVar2 != 0) {\n            return iVar2;\n          }\n          if (uVar6 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      param_2 = (uint *)((int)puVar4 + 1);\n      iVar2 = (uVar5 >> 0x18) - (uint)*(byte *)puVar4;\n      if ((iVar2 != 0) || (uVar5 >> 0x18 == 0)) {\n        return iVar2;\n      }\n    }\n    uVar5 = (uint)param_2 & 3;\n    if (uVar5 != 0) {\n      param_2 = (uint *)((uint)param_2 & 0xfffffffc);\n      if (uVar5 == 2) {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 0x10;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xffff;\n          if ((uVar8 & 0x8080) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x10000;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      else if (uVar5 < 2) {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 8;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xffffff;\n          if ((uVar8 & 0x808080) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x1000000;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      else {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 0x18;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xff;\n          if ((uVar8 & 0x80) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x100;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 |\n              uVar6 >> 0x18;\n      uVar5 = (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 | uVar7 >> 0x18;\n      goto LAB_0008259e;\n    }\n    param_1 = puVar1;\n    puVar3 = param_2;\n    if (((uint)puVar1 & 4) != 0) {\n      param_1 = puVar1 + 1;\n      uVar5 = *puVar1;\n      puVar3 = param_2 + 1;\n      uVar7 = *param_2;\n      uVar9 = uVar5 + 0xfefefeff & ~uVar5 & 0x80808080;\n      if (uVar5 != uVar7 || uVar9 != 0) {\nLAB_0008259a:\n        uVar6 = uVar5 << 0x18 | (uVar5 >> 8 & 0xff) << 0x10 | (uVar5 >> 0x10 & 0xff) << 8 |\n                uVar5 >> 0x18;\n        uVar5 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 |\n                uVar7 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    param_2 = puVar3;\n    if (((uint)puVar3 & 4) != 0) {\n      uVar5 = *puVar3;\n      puVar1 = puVar3 + 1;\n      do {\n        uVar6 = *param_1;\n        uVar7 = param_1[1];\n        uVar9 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n        if (uVar6 != uVar5 || uVar9 != 0) goto LAB_0008258e;\n        uVar8 = *puVar1;\n        uVar5 = puVar1[1];\n        uVar9 = uVar7 + 0xfefefeff & ~uVar7 & 0x80808080;\n        param_1 = param_1 + 2;\n        puVar1 = puVar1 + 2;\n      } while (uVar7 == uVar8 && uVar9 == 0);\n      uVar6 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 |\n              uVar7 >> 0x18;\n      uVar5 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 |\n              uVar8 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    uVar5 = *param_1;\n    uVar6 = param_1[1];\n    uVar7 = *param_2;\n    uVar8 = param_2[1];\n    uVar9 = uVar5 + 0xfefefeff & ~uVar5 & 0x80808080;\n    if (uVar5 != uVar7 || uVar9 != 0) goto LAB_0008259a;\n    uVar9 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n    param_1 = param_1 + 2;\n    param_2 = param_2 + 2;\n  } while (uVar6 == uVar8 && uVar9 == 0);\n  uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 | uVar6 >> 0x18;\n  uVar5 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 | uVar8 >> 0x18;\nLAB_0008259e:\n  uVar7 = uVar9 << 0x18 | (uVar9 >> 8 & 0xff) << 0x10 | (uVar9 >> 0x10 & 0xff) << 8 | uVar9 >> 0x18;\n  if (uVar7 != 0) {\n    iVar2 = count_leading_zeroes(uVar7);\n    uVar6 = uVar6 >> (0x18U - iVar2 & 0xff);\n    uVar5 = uVar5 >> (0x18U - iVar2 & 0xff);\n  }\n  iVar2 = 1;\n  if (uVar6 <= uVar5) {\n    iVar2 = -(uint)(uVar6 < uVar5);\n  }\n  return iVar2;\nLAB_0008258e:\n  uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 | uVar6 >> 0x18;\n  uVar5 = uVar5 << 0x18 | (uVar5 >> 8 & 0xff) << 0x10 | (uVar5 >> 0x10 & 0xff) << 8 | uVar5 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082390",
            "calling": [
                "FUN_000815b8"
            ],
            "imported": false,
            "current_name": "FUNC_00082390"
        },
        "FUN_000810fc": {
            "renaming": {
                "FUN_000810fc": "convert_number_to_base_000810fc",
                "param_1": "output",
                "param_2": "number",
                "param_3": "base",
                "pcVar1": "output_ptr",
                "pcVar3": "output_end",
                "uVar2": "quotient",
                "uVar5": "remainder",
                "cVar4": "digit",
                "local_15": "output_buffer"
            },
            "code": "void convert_number_to_base_000810fc(uint32_t* output, uint32_t number, uint32_t base) {\n  char* output_ptr = (char*)output;\n  char* output_end = output_ptr + 1;\n  if (base < 2) {\n    base = 10;\n  }\n  do {\n    output_end--;\n    uint32_t quotient = number / base;\n    uint32_t remainder = number - base * quotient & 0xff;\n    char digit;\n    if (remainder < 10) {\n      digit = remainder + '0';\n    }\n    else {\n      digit = remainder + '7';\n    }\n    *output_end = digit;\n    number = quotient;\n  } while (number != 0);\n  count_bytes_with_nonzero_bit_000810a6(output, output_end);\n}\n",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810fc",
            "calling": [
                "FUN_0008113a"
            ],
            "imported": false,
            "current_name": "convert_number_to_base_000810fc"
        },
        "FUN_00080250": {
            "renaming": {
                "FUN_00080250": "processControlModes_00080250",
                "uVar2": "timeDelay",
                "puVar5": "MODE_PTR",
                "PTR_DAT_000803bc": "currentMode",
                "do_nothing_00080f08": "doNothing",
                "PTR_DAT_000803c0": "STATE_PTR",
                "process_device_input_00081014": "processDeviceInput",
                "puVar1": "BIT_COUNT_PTR",
                "PTR_DAT_000803cc": "CONTROL_MODE_PTR",
                "calculate_values_and_return_00080164": "calculateValuesAndReturn",
                "count_bits_with_nonzero_bit_and_nonzero_param_bits_000810e8": "countNonzeroBits",
                "PTR_DAT_000803c8": "PARAM_PTR",
                "PTR_s_Entered_manual_control_mode__000803d0": "ENTERED_MANUAL_CONTROL_MODE_PTR",
                "calculate_time_delay_00081624": "calculateTimeDelay",
                "calculate_value_0008145c": "calculateValue",
                "PTR_DAT_000803d4": "VALUE1_PTR",
                "PTR_DAT_000803d8": "VALUE2_PTR",
                "calculate_difference_00081248": "calculateDifference",
                "get_byte_from_buffer_00081276": "getByteFromBuffer",
                "thunk_convert_number_to_base_0008113a": "convertNumberToBase",
                "count_nonzero_bits_000810c4": "countNonzeroBits",
                "calculate_bits_in_base_0008117a": "calculateBitsInBase",
                "calculate_value_000806f8": "calculateValue",
                "PTR_DAT_000803e0": "OUTPUT1_PTR",
                "PTR_DAT_000803e4": "OUTPUT2_PTR",
                "iVar4": "difference",
                "auStack_1c": "buffer",
                "updateStringWithMaskIfValueFound_00081214": "updateStringWithMaskIfValueFound",
                "compareAndCopyIfDifferent_00081560": "compareAndCopyIfDifferent",
                "allocate_memory_and_return_pointer_00081472": "allocateMemoryAndReturnPointer",
                "PTR_DAT_000803ec": "STRING1_PTR",
                "PTR_DAT_000803f0": "STRING2_PTR",
                "check_byte_000815b8": "checkByte",
                "PTR_s_steer_000803f4": "STEER_STRING",
                "parse_string_to_integer_000815de": "parseStringToInteger",
                "PTR_s_motor_000803f8": "MOTOR_STRING"
            },
            "code": "void processControlModes_00080250(void)\n{\n    unsigned int timeDelay = calculateTimeDelay(4, 1, 20000);\n    unsigned int *PTR_DAT_000803bc = MODE_PTR;\n    *PTR_DAT_000803bc = timeDelay;\n    doNothing(10);\n    *PTR_DAT_000803c0 ^= 1;\n    processDeviceInput(0xd);\n    unsigned int *bitCount = BIT_COUNT_PTR;\n    if (*PTR_DAT_000803bc < 0x641)\n    {\n        if (*PTR_DAT_000803bc - 0x385 < 299)\n        {\n            if (*PTR_DAT_000803cc != 0)\n            {\n                calculateValuesAndReturn();\n                countNonzeroBits(PTR_DAT_000803c8, PTR_s_Entered_manual_control_mode__000803d0);\n                *bitCount = 0;\n            }\n            doNothing(10);\n            unsigned int delay = calculateTimeDelay(3, 1, 20000);\n            unsigned int value1 = calculateValue(0, 1000, 2000, 0x28, 0x96);\n            unsigned int *value1Ptr = PTR_DAT_000803d4;\n            *value1Ptr = value1;\n            delay = calculateValue(delay, 1000, 2000, 0x28, 0x96);\n            unsigned int *value2Ptr = PTR_DAT_000803d8;\n            *value2Ptr = delay;\n            while (calculateDifference(PTR_DAT_000803c8) > 0)\n            {\n                getByteFromBuffer(PTR_DAT_000803c8);\n                convertNumberToBase(PTR_DAT_000803c8, *value1Ptr, 10);\n                countNonzeroBits(PTR_DAT_000803c8, BIT_COUNT_PTR);\n                calculateBitsInBase(PTR_DAT_000803c8, *value2Ptr, 10);\n            }\n            calculateValue(PTR_DAT_000803e0, *value2Ptr);\n            calculateValue(PTR_DAT_000803e4, *value1Ptr);\n        }\n        else\n        {\n            if (*PTR_DAT_000803cc == 0)\n            {\n                calculateValuesAndReturn();\n                countNonzeroBits(PTR_DAT_000803c8, ENTERED_AUTONOMOUS_PTR_DAT_000803cc);\n            }\n            *bitCount = 1;\n            while (calculateDifference(PTR_DAT_000803c8) > 0)\n            {\n                unsigned char buffer[12];\n                updateStringWithMaskIfValueFound(buffer, PTR_DAT_000803c8, 0x2c);\n                compareAndCopyIfDifferent(PTR_DAT_000803ec, buffer);\n                allocateMemoryAndReturnPointer(buffer);\n                updateStringWithMaskIfValueFound(buffer, PTR_DAT_000803c8, 10);\n                compareAndCopyIfDifferent(PTR_DAT_000803f0, buffer);\n                allocateMemoryAndReturnPointer(buffer);\n                getByteFromBuffer(PTR_DAT_000803c8);\n                if (checkByte(PTR_DAT_000803ec, PTR_s_steer_000803f4) == 0)\n                {\n                    unsigned int value = parseStringToInteger(PTR_DAT_000803f0);\n                    unsigned int *outputPtr = PTR_DAT_000803e4;\n                    calculateValue(outputPtr, value);\n                }\n                else if (checkByte(PTR_DAT_000803ec, PTR_s_motor_000803f8) != 0)\n                {\n                    unsigned int value = parseStringToInteger(PTR_DAT_000803f0);\n                    unsigned int *outputPtr = PTR_DAT_000803e0;\n                    calculateValue(outputPtr, value);\n                }\n            }\n            goto END_LOOP;\n        }\n    }\n    else\n    {\n        calculateValuesAndReturn();\n        countNonzeroBits(PTR_DAT_000803c8, ERROR_STRING);\n    }\n    return;\n\nEND_LOOP:\n    return;\n}",
            "called": [
                "FUN_0008117a",
                "FUN_00081014",
                "FUN_000815b8",
                "FUN_000810c4",
                "FUN_0008145c",
                "FUN_000810e8",
                "FUN_00080164",
                "FUN_00081214",
                "FUN_00081624",
                "FUN_00081248",
                "FUN_00081560",
                "thunk_FUN_0008113a",
                "FUN_00081276",
                "FUN_000815de",
                "FUN_00080f08",
                "FUN_000806f8",
                "FUN_00081472"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080250",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "processControlModes_00080250"
        },
        "FUN_00080d6a": {
            "renaming": {
                "FUN_00080d6a": "set_parameter_at_offset_00080d6a",
                "param_1": "base_address",
                "param_2": "value",
                "*(undefined4 *)(param_1 + 0x28)": "*(int *)(base_address + offset)"
            },
            "code": "void set_parameter_at_offset_00080d6a(int base_address, int offset, int value)\n{\n  *(int *)(base_address + offset) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d6a",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "set_parameter_at_offset_00080d6a"
        },
        "FUN_000813dc": {
            "renaming": {
                "FUN_000813dc": "initialize_components_000813dc",
                "param_1": "component_address",
                "param_2": "divisor",
                "puVar1": "component_pointer",
                "iVar2": "parent_address",
                "puVar3": "parent_pointer"
            },
            "code": "void initialize_components_000813dc(int component_address, uint divisor) {\n  uint *component_pointer;\n  int parent_address;\n  undefined4 *parent_pointer;\n  check_input(*(undefined4 *)(component_address + 0x20));\n  parent_pointer = *(undefined4 **)(component_address + 0x18);\n  parent_pointer[0x48] = 0x202;\n  *parent_pointer = 0xac;\n  component_pointer = DAT_000813d4;\n  parent_pointer[1] = 0x800;\n  parent_pointer[8] = *component_pointer / divisor >> 4;\n  parent_pointer[3] = 0xffffffff;\n  parent_pointer[2] = 0x61;\n  *(int *)(DAT_000813d8 + ((uint)(int)(char)*(byte *)(component_address + 0x1c) >> 5) * 4) = 1 << (uint)(*(byte *)(component_address + 0x1c) & 0x1f);\n  parent_address = *(int *)(component_address + 0x10);\n  *(undefined4 *)(parent_address + 0x84) = 0;\n  *(undefined4 *)(parent_address + 0x80) = 0;\n  parent_address = *(int *)(component_address + 0x14);\n  *(undefined4 *)(parent_address + 0x84) = 0;\n  *(undefined4 *)(parent_address + 0x80) = 0;\n  *parent_pointer = 0x50;\n  return;\n}\n",
            "called": [
                "FUN_00080aa8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813dc",
            "calling": [
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "initialize_components_000813dc"
        },
        "FUN_00080a0a": {
            "renaming": {
                "FUN_00080a0a": "set_params_for_device_00080a0a",
                "param_1": "params",
                "param_2": "value",
                "param_3": "is_param_1_zero",
                "param_4": "is_param_4_zero",
                "param_5": "is_param_5_zero",
                "param_1[0x11]": "params[17]",
                "param_1[0x18]": "params[24]",
                "param_1[0x19]": "params[25]",
                "param_1[0x15]": "params[21]",
                "param_1[0x14]": "params[20]",
                "param_1[0xd]": "params[13]",
                "param_1[0xc]": "params[12]"
            },
            "code": "void set_params_for_device_00080a0a(undefined4 *params, undefined4 value, int is_param_1_zero, int is_param_4_zero, int is_param_5_zero) {\n  params[0] = value;\n  params[4] = value;\n  if (is_param_1_zero == 0) {\n    params[12] = value;\n  }\n  else {\n    params[13] = value;\n  }\n  if (is_param_4_zero == 0) {\n    params[20] = value;\n  }\n  else {\n    params[21] = value;\n  }\n  if (is_param_5_zero == 0) {\n    params[24] = value;\n  }\n  else {\n    params[25] = value;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a0a",
            "calling": [
                "FUN_00080a30",
                "FUN_00081014"
            ],
            "imported": false,
            "current_name": "set_params_for_device_00080a0a"
        },
        "FUN_00080b2c": {
            "renaming": {
                "FUN_00080b2c": "configure_tc_channel_00080b2c",
                "param_1": "channel_id",
                "param_2": "channel_count",
                "param_3": "config_data",
                "PTR_s_TC_Configure_00080b58": "default_config_data",
                "PTR_s____source_tc_c_00080b54": "source_data",
                "PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b5c": "channel_size",
                "uVar3": "channel_data",
                "iVar1": "offset",
                "iVar2": "channel_address"
            },
            "code": "void configure_tc_channel_00080b2c(uint32_t channel_id, uint32_t channel_count, uint8_t *config_data)\n{\n  int offset = channel_id * 0x40;\n  int channel_address = (int)config_data + offset;\n  if (channel_count > 2) {\n    config_data = PTR_s_TC_Configure_00080b58;\n    channel_address = (int)get_channel_address(channel_id);\n  }\n  *(uint32_t *)(channel_address) = 2;\n  *(uint32_t *)(channel_address + 0x28) = 0xffffffff;\n  *(uint8_t **)(channel_address + 4) = config_data;\n  return;\n}",
            "called": [
                "FUN_000816f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b2c",
            "calling": [
                "FUN_000803fc"
            ],
            "imported": false,
            "current_name": "configure_tc_channel_00080b2c"
        },
        "FUN_00080774": {
            "renaming": {
                "FUN_00080774": "initialize_and_execute_system_00080774",
                "puVar1": "system_time_ptr",
                "puVar2": "data_ptr",
                "iVar3": "data_offset",
                "iVar4": "register_offset",
                "iVar5": "data_size",
                "iVar6": "device_input_offset",
                "iVar7": "i",
                "iVar8": "device_index"
            },
            "code": "void initialize_and_execute_system_00080774(void)\n{\n  uint *system_time_ptr;\n  undefined4 *data_ptr;\n  int device_index;\n  int device_count = 0x4f;\n  int device_input_offset;\n  int data_offset;\n  int data_size;\n  int register_offset;\n  int i;\n\n  system_time_ptr = PTR_SYSTEM_TIME;\n  initialize_system();\n  data_ptr = PTR_DATA;\n  data_ptr[1] = *system_time_ptr / 1000 - 1;\n  *(undefined *)(data_ptr + 0x23) = 0xf0;\n  data_ptr[2] = 0;\n  *data_ptr = 7;\n  execute_functions();\n\n  for (i = 0; i < device_count; i++) {\n    device_input_offset = PTR_DEVICE_INPUT + i * 0x28;\n    process_device_input(device_input_offset, 0);\n    data_offset = PTR_DATA + 0x10 + i * 0x10;\n    data_size = *(int *)(data_offset + 0x10);\n    register_offset = *(int *)(data_offset + 0xc);\n    *(int *)(register_offset + 0xa0) = -1;\n    process_data(data_offset, 1, data_size, 0);\n  }\n\n  process_device_input(PTR_DEVICE_INPUT, 1);\n  data_offset = PTR_DATA + 0x10;\n  process_data(data_offset, 1, 0xc00, 0);\n  process_data(data_offset, 1, 0x3000, 0);\n  process_data(PTR_DATA_2, 2, 0x30, 0);\n  process_data(PTR_DATA_3, 1, 0xc00, 0);\n  process_data(data_offset, 1, 3, 0);\n  process_data(PTR_DATA_3, 1, 0xc000, 0);\n  check_input(0x25);\n  find_value_at_index(PTR_DATA_4, *system_time_ptr, PTR_DATA_5, 0xc);\n  set_bits_in_uint_at_offset(PTR_DATA_4, 0, 0x300000, 1);\n  update_bit_in_register_at_address(PTR_DATA_4, 0, 0);\n  set_parameter_at_offset(PTR_DATA_4, -1);\n  set_value_to_max_int(PTR_DATA_4);\n}\n",
            "called": [
                "FUN_00080a30",
                "FUN_00081014",
                "FUN_00080d3e",
                "FUN_00081778",
                "FUN_00080d62",
                "FUN_00080aa8",
                "FUN_00080b98",
                "FUN_00080d6a",
                "FUN_00080d30",
                "FUN_00080c98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080774",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "initialize_and_execute_system_00080774"
        },
        "FUN_00080ec2": {
            "renaming": {
                "FUN_00080ec2": "return_zero_00080ec2"
            },
            "code": "int return_zero_00080ec2() {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec2",
            "calling": [
                "FUN_00084508"
            ],
            "imported": false,
            "current_name": "return_zero_00080ec2"
        },
        "FUN_00083888": {
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "data_structure",
                "puVar1": "ptr_undefined_1",
                "uVar2": "undefined_4",
                "puVar3": "ptr_undefined_2",
                "puVar4": "ptr_undefined_3",
                "puVar5": "ds1",
                "puVar6": "ds2"
            },
            "code": "void initialize_data_structures_00083888(int param_1)\n{\n    // initialize only if not already initialized\n    if (*(int *)(param_1 + 0x38) == 0) {\n        // initialize first data structure\n        undefined4 *ds1 = *(undefined4 **)(param_1 + 4);\n        *(undefined **)(param_1 + 0x3c) = ds1;\n        *(undefined4 *)(param_1 + 0x2e4) = 3;\n        *(int *)(param_1 + 0x2e8) = param_1 + 0x2ec;\n        *(undefined4 *)(param_1 + 0x2e0) = 0;\n        *(undefined2 *)(ds1 + 3) = 4;\n        *ds1 = 0;\n        ds1[1] = 0;\n        ds1[2] = 0;\n        ds1[0x19] = 0;\n        *(undefined2 *)((int)ds1 + 0xe) = 0;\n        ds1[4] = 0;\n        ds1[5] = 0;\n        ds1[6] = 0;\n        memset(ds1 + 0x17, 0, 8);\n        // initialize second data structure\n        undefined4 *ds2 = *(undefined4 **)(param_1 + 8);\n        ds1[7] = ds1;\n        ds1[8] = PTR_process_and_update_data_00084220_1_0008396c;\n        ds1[9] = DAT_00083970;\n        ds1[10] = PTR_process_value_and_set_flag_0008427c_1_00083974;\n        ds1[11] = PTR_LAB_0008429c_1_00083978;\n        *(undefined2 *)(ds2 + 3) = 9;\n        *(undefined2 *)((int)ds2 + 0xe) = 1;\n        *ds2 = 0;\n        ds2[1] = 0;\n        ds2[2] = 0;\n        ds2[0x19] = 0;\n        ds2[4] = 0;\n        ds2[5] = 0;\n        ds2[6] = 0;\n        memset(ds2 + 0x17, 0, 8);\n        ds2[7] = ds2;\n        ds2[8] = PTR_process_and_update_data_00084220_1_0008396c;\n        ds2[9] = DAT_00083970;\n        ds2[10] = PTR_process_value_and_set_flag_0008427c_1_00083974;\n        ds2[11] = PTR_LAB_0008429c_1_00083978;\n        // initialize third data structure\n        undefined4 *ds3 = *(undefined4 **)(param_1 + 0xc);\n        *(undefined2 *)(ds3 + 3) = 0x12;\n        *(undefined2 *)((int)ds3 + 0xe) = 2;\n        *ds3 = 0;\n        ds3[1] = 0;\n        ds3[2] = 0;\n        ds3[0x19] = 0;\n        ds3[4] = 0;\n        ds3[5] = 0;\n        ds3[6] = 0;\n        memset(ds3 + 0x17, 0, 8);\n        ds3[7] = ds3;\n        ds3[8] = PTR_process_and_update_data_00084220_1_0008396c;\n        ds3[9] = DAT_00083970;\n        ds3[10] = PTR_process_value_and_set_flag_0008427c_1_00083974;\n        ds3[11] = PTR_LAB_0008429c_1_00083978;\n        *(int *)(param_1 + 0x38) = 1;\n    }\n    return;\n}",
            "called": [
                "FUN_00081f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083888",
            "calling": [
                "FUN_000842a4",
                "FUN_00084484",
                "FUN_0008289c",
                "FUN_00083850",
                "FUN_0008356c"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_00083888"
        },
        "FUN_00081348": {
            "renaming": {
                "FUN_00081348": "initialize_parameters_00081348",
                "param_1": "params",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "puVar1": "function_pointer"
            },
            "code": "void initialize_parameters_00081348(undefined4 *params, undefined4 param2, undefined param3, undefined4 param4, undefined4 param5, undefined4 param6)\n{\n    undefined *function_pointer;\n    params[0] = PTR_PTR_FUN_000812b8_1_00081368;\n    params[1] = 0;\n    params[2] = 1000;\n    params[3] = param2;\n    *(undefined *)(params + 4) = param3;\n    params[5] = param5;\n    params[6] = param4;\n    params[7] = 0;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081348",
            "calling": [
                "FUN_0008089c",
                "FUN_00081438"
            ],
            "imported": false,
            "current_name": "initialize_parameters_00081348"
        },
        "FUN_00081624": {
            "renaming": {
                "FUN_00081624": "calculate_time_delay_00081624",
                "param_1": "pattern_index",
                "param_2": "is_zero",
                "param_3": "frequency",
                "param_4": "param_4",
                "puVar1": "frequency_ptr",
                "iVar2": "bit_count",
                "uVar3": "pattern_value"
            },
            "code": "int calculate_time_delay_00081624(int pattern_index, int is_zero, int frequency, undefined4 param_4)\n{\n  uint *frequency_ptr;\n  int bit_count;\n  undefined4 pattern_value;\n  \n  frequency_ptr = DAT_0008167c;\n  pattern_value = *(undefined4 *)(PTR_DAT_00081678 + pattern_index * 0x1c + 4);\n  if (is_zero == 0) {\n    pattern_value = 0;\n  }\n  bit_count = count_bits_matching_pattern_00081684(\n                  *(int *)(PTR_DAT_00081678 + pattern_index * 0x1c) + 0x3c,\n                  *(undefined4 *)(PTR_DAT_00081678 + pattern_index * 0x1c + 4),\n                  pattern_value,\n                  ((*DAT_0008167c / DAT_00081680) * frequency) / 0x12,\n                  param_4);\n  if (bit_count != 0) {\n    bit_count = (int)((ulonglong)(bit_count * 18000 + 16000) / ((ulonglong)*frequency_ptr / 1000));\n  }\n  return bit_count;\n}",
            "called": [
                "FUN_00081684"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081624",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "calculate_time_delay_00081624"
        },
        "FUN_00080ec8": {
            "renaming": {
                "FUN_00080ec8": "process_data_00080ec8",
                "param_1": "buffer",
                "param_2": "data_offset",
                "param_3": "data_length",
                "iVar1": "index"
            },
            "code": "uint process_data_00080ec8(undefined4 buffer, int data_offset, uint data_length) {\n  int index = 0;\n  for (index = 0; index < (int)data_length; index++) {\n    do {\n    } while (-1 < *(int *)(DAT_00080ee8 + 0x14) << 0x1e);\n    *(uint *)(DAT_00080ee8 + 0x1c) = (uint)*(byte *)(data_offset + index);\n  }\n  return data_length & ~((int)data_length >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec8",
            "calling": [
                "FUN_00084244"
            ],
            "imported": false,
            "current_name": "process_data_00080ec8"
        },
        "FUN_0008117a": {
            "renaming": {
                "FUN_0008117a": "calculate_bits_in_base_0008117a",
                "param_1": "number",
                "iVar1": "bits_in_base",
                "iVar2": "nonzero_bits",
                "convert_number_to_base_0008113a": "convert_number_to_base",
                "count_nonzero_bits_000810d8": "count_nonzero_bits"
            },
            "code": "int calculate_bits_in_base_0008117a(int number)\n{\n  int bits_in_base = convert_number_to_base(number);\n  int nonzero_bits = count_nonzero_bits(param_1);\n  return nonzero_bits + bits_in_base;\n}",
            "called": [
                "FUN_0008113a",
                "FUN_000810d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008117a",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "calculate_bits_in_base_0008117a"
        },
        "FUN_000801e0": {
            "renaming": {
                "FUN_000801e0": "process_data_and_return_status_000801e0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "initialize_components_000813dc": "initialize_components",
                "process_input_00080f0c": "process_input",
                "PTR_DAT_00080244": "PTR_COMPONENTS",
                "PTR_DAT_00080248": "PTR_INPUT1",
                "PTR_DAT_0008024c": "PTR_INPUT2",
                "calculate_values_and_return_00080164": "calculate_values_and_return_result",
                "do_nothing_00080f08": "wait_for_result",
                "PTR_DAT_00080160": "PTR_RESULT"
            },
            "code": "int process_data_and_return_status_000801e0(int input1, int input2, int input3, int input4)\n{\n    initialize_components(PTR_DAT_00080244, 0xe100, input3, input4, input4);\n    process_input(0xd, 1);\n    process_input(6, 1);\n    process_input(0x39, 0);\n    process_input(4, 0);\n    process_input(3, 0);\n    process_input(2, 0);\n    process_input(PTR_DAT_00080248, 5);\n    process_input(PTR_DAT_0008024c, 6);\n    calculate_values_and_return_result();\n    wait_for_result(1000);\n    if (*(int *)PTR_DAT_00080160 == 0) {\n        software_interrupt(0x3f);\n        return 1;\n    }\n    return 0;\n}",
            "called": [
                "FUN_000813dc",
                "FUN_00080f0c",
                "FUN_00080f08",
                "FUN_00080164",
                "FUN_000806a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801e0",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "process_data_and_return_status_000801e0"
        },
        "FUN_000811b0": {
            "renaming": {
                "FUN_000811b0": "clear_memory_000811b0",
                "param_1": "memory_block",
                "memset_word_aligned_00081f00": "memset",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void clear_memory_000811b0(int* memory_block){\n memset(memory_block,0,128);\n *(memory_block + 32) = 0;\n *(memory_block + 33) = 0;\n return;\n}",
            "called": [
                "FUN_00081f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b0",
            "calling": [
                "FUN_0008089c"
            ],
            "imported": false,
            "current_name": "clear_memory_000811b0"
        },
        "FUN_000817f0": {
            "renaming": {
                "FUN_000817f0": "process_data_000817f0",
                "param_1": "data",
                "FUNC_00081810": "call_function",
                "*DAT_000817fc": "data_pointer"
            },
            "code": "void process_data_000817f0(undefined4 data)\n{\n    call_function(**DAT_000817fc, data);\n    return;\n}",
            "called": [
                "FUN_00081810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817f0",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": false,
            "current_name": "process_data_000817f0"
        },
        "FUN_0008145c": {
            "renaming": {
                "FUN_0008145c": "calculate_value_0008145c",
                "param_1": "start_value",
                "param_2": "end_value",
                "param_3": "start_range",
                "param_4": "end_range",
                "param_5": "value_to_calculate",
                "uint": "unsigned int"
            },
            "code": "int calculate_value_0008145c(int start_value, int end_value, int start_range, int end_range, int value_to_calculate){\n    int range_difference = end_range - start_range;\n    int value_difference = start_value - end_value;\n    int value_range_difference = value_to_calculate - end_range;\n    int result = (value_difference * value_range_difference) / range_difference + end_range;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008145c",
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "imported": false,
            "current_name": "calculate_value_0008145c"
        },
        "FUN_00081f94": {
            "renaming": {
                "FUN_00081f94": "do_nothing_00081f94"
            },
            "code": "\nvoid do_nothing_00081f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f94",
            "calling": [
                "FUN_00083b10",
                "FUN_00081810",
                "FUN_00081fac",
                "FUN_00083a74"
            ],
            "imported": false,
            "current_name": "do_nothing_00081f94"
        },
        "FUN_00080eba": {
            "renaming": {
                "FUN_00080eba": "get_true_value_00080eba"
            },
            "code": "int get_true_value_00080eba(void)\n{\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eba",
            "calling": [
                "FUN_000844bc"
            ],
            "imported": false,
            "current_name": "get_true_value_00080eba"
        },
        "FUN_00081f98": {
            "renaming": {
                "FUN_00081f98": "do_nothing_00081f98"
            },
            "code": "\nvoid do_nothing_00081f98(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f98",
            "calling": [
                "FUN_00081810",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00083a74"
            ],
            "imported": false,
            "current_name": "do_nothing_00081f98"
        },
        "FUN_00081fac": {
            "renaming": {
                "FUN_00081fac": "FUNC_00081fac"
            },
            "code": "\nint * FUNC_00081fac(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  int iVar1;\n  int *piVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  int *piVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  int iVar10;\n  \n  if (param_2 == (int *)0x0) {\n    piVar2 = (int *)FUNC_00081810(param_1,param_3);\n    return piVar2;\n  }\n  do_nothing_00081f94();\n  iVar4 = DAT_00082368;\n  uVar5 = param_2[-1];\n  uVar7 = uVar5 & 0xfffffffc;\n  piVar2 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar8 = 0x10;\n  }\n  else {\n    uVar8 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar8 < 0) goto LAB_00082078;\n  }\n  if (uVar8 < param_3) {\nLAB_00082078:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar7 < (int)uVar8) {\n    iVar1 = (int)piVar2 + uVar7;\n    iVar10 = *(int *)(DAT_00082368 + 8);\n    if (iVar10 == iVar1) {\n      uVar3 = *(uint *)(iVar10 + 4) & 0xfffffffc;\n      iVar1 = iVar10;\n      if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar7)) {\n        *(uint *)(DAT_00082368 + 8) = (int)piVar2 + uVar8;\n        *(uint *)((int)piVar2 + uVar8 + 4) = (uVar3 + uVar7) - uVar8 | 1;\n        param_2[-1] = uVar8 | param_2[-1] & 1U;\n        do_nothing_00081f98(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar1 + 4) & 0xfffffffe) + iVar1 + 4) & 1) == 0) {\n      uVar3 = *(uint *)(iVar1 + 4) & 0xfffffffc;\n      if ((int)uVar8 <= (int)(uVar3 + uVar7)) {\n        iVar10 = *(int *)(iVar1 + 0xc);\n        iVar4 = *(int *)(iVar1 + 8);\n        *(int *)(iVar4 + 0xc) = iVar10;\n        *(int *)(iVar10 + 8) = iVar4;\n        uVar7 = uVar3 + uVar7;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      uVar3 = 0;\n      iVar1 = 0;\n    }\n    if (-1 < (int)(uVar5 << 0x1f)) {\n      piVar9 = (int *)((int)piVar2 - param_2[-2]);\n      uVar5 = (piVar9[1] & 0xfffffffcU) + uVar7;\n      if (iVar1 != 0) {\n        if (iVar1 == iVar10) {\n          if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar5)) {\n            piVar2 = piVar9 + 2;\n            iVar1 = *piVar2;\n            iVar10 = piVar9[3];\n            uVar7 = uVar7 - 4;\n            *(int *)(iVar1 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar1;\n            if (uVar7 < 0x25) {\n              piVar6 = piVar2;\n              if (0x13 < uVar7) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar7 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar6 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar7 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar6 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar6;\n                    piVar6 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar6 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar6 = *param_2;\n              piVar6[1] = param_2[1];\n              piVar6[2] = param_2[2];\n            }\n            else {\n              reverse_copy_00081e34(piVar2,param_2);\n            }\n            *(uint *)(iVar4 + 8) = (int)piVar9 + uVar8;\n            *(uint *)((int)piVar9 + uVar8 + 4) = (uVar3 + uVar5) - uVar8 | 1;\n            piVar9[1] = uVar8 | piVar9[1] & 1U;\n            do_nothing_00081f98(param_1);\n            return piVar2;\n          }\n        }\n        else {\n          uVar3 = uVar3 + uVar5;\n          if ((int)uVar8 <= (int)uVar3) {\n            iVar10 = *(int *)(iVar1 + 0xc);\n            iVar4 = *(int *)(iVar1 + 8);\n            *(int *)(iVar4 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar4;\n            piVar6 = piVar9 + 2;\n            iVar4 = *piVar6;\n            iVar1 = piVar9[3];\n            uVar5 = uVar7 - 4;\n            *(int *)(iVar4 + 0xc) = iVar1;\n            *(int *)(iVar1 + 8) = iVar4;\n            uVar7 = uVar3;\n            if (uVar5 < 0x25) {\n              piVar2 = piVar6;\n              if (0x13 < uVar5) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar2 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar5 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar2 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar2;\n                    piVar2 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar2 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar2 = *param_2;\n              piVar2[1] = param_2[1];\n              piVar2[2] = param_2[2];\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            else {\n              reverse_copy_00081e34(piVar6,param_2);\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)uVar8 <= (int)uVar5) {\n        piVar6 = piVar9 + 2;\n        iVar4 = *piVar6;\n        iVar1 = piVar9[3];\n        uVar3 = uVar7 - 4;\n        *(int *)(iVar4 + 0xc) = iVar1;\n        *(int *)(iVar1 + 8) = iVar4;\n        uVar7 = uVar5;\n        if (uVar3 < 0x25) {\n          piVar2 = piVar6;\n          if (0x13 < uVar3) {\n            piVar9[2] = *param_2;\n            piVar9[3] = param_2[1];\n            if (uVar3 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar9 + 4;\n            }\n            else {\n              piVar9[4] = param_2[2];\n              piVar9[5] = param_2[3];\n              if (uVar3 == 0x24) {\n                piVar9[6] = param_2[4];\n                piVar2 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar9[7] = *piVar2;\n                piVar2 = piVar9 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar9 + 6;\n              }\n            }\n          }\n          *piVar2 = *param_2;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        else {\n          reverse_copy_00081e34(piVar6,param_2);\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        goto LAB_00082088;\n      }\n    }\n    piVar9 = (int *)FUNC_00081810(param_1,param_3);\n    if (piVar9 == (int *)0x0) goto LAB_000820a0;\n    uVar5 = param_2[-1];\n    if (piVar9 + -2 != (int *)((uVar5 & 0xfffffffe) + (int)piVar2)) {\n      uVar7 = uVar7 - 4;\n      if (uVar7 < 0x25) {\n        piVar2 = param_2;\n        piVar6 = piVar9;\n        if (0x13 < uVar7) {\n          *piVar9 = *param_2;\n          piVar9[1] = param_2[1];\n          if (uVar7 < 0x1c) {\n            piVar2 = param_2 + 2;\n            piVar6 = piVar9 + 2;\n          }\n          else {\n            piVar9[2] = param_2[2];\n            piVar9[3] = param_2[3];\n            if (uVar7 == 0x24) {\n              piVar9[4] = param_2[4];\n              piVar9[5] = param_2[5];\n              piVar2 = param_2 + 6;\n              piVar6 = piVar9 + 6;\n            }\n            else {\n              piVar2 = param_2 + 4;\n              piVar6 = piVar9 + 4;\n            }\n          }\n        }\n        *piVar6 = *piVar2;\n        piVar6[1] = piVar2[1];\n        piVar6[2] = piVar2[2];\n      }\n      else {\n        reverse_copy_00081e34(piVar9,param_2);\n      }\n      allocate_memory_block_00083b10(param_1,param_2);\n      goto LAB_000820a0;\n    }\n    uVar7 = uVar7 + (piVar9[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  uVar3 = uVar7 - uVar8;\n  piVar9 = param_2;\n  if (uVar3 < 0x10) {\n    piVar2[1] = uVar5 & 1 | uVar7;\n    *(uint *)((int)piVar2 + uVar7 + 4) = *(uint *)((int)piVar2 + uVar7 + 4) | 1;\n  }\n  else {\n    piVar2[1] = uVar5 & 1 | uVar8;\n    *(uint *)((int)piVar2 + uVar8 + 4) = uVar3 | 1;\n    *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) = *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) | 1;\n    allocate_memory_block_00083b10(param_1,(int)piVar2 + uVar8 + 8);\n  }\nLAB_000820a0:\n  do_nothing_00081f98(param_1);\n  return piVar9;\n}\n\n",
            "called": [
                "FUN_00081f94",
                "FUN_00081e34",
                "FUN_00081810",
                "FUN_00083b10",
                "FUN_00081f98"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081fac",
            "calling": [
                "FUN_00083ca8",
                "FUN_00081f9c"
            ],
            "imported": false,
            "current_name": "FUNC_00081fac"
        },
        "FUN_00081190": {
            "renaming": {
                "FUN_00081190": "decrement_and_call_if_zero_00081190",
                "iVar1": "count"
            },
            "code": "void decrement_and_call_if_zero_00081190(void)\n{\n  int count = *DAT_000811a8;\n  if ((count != -1) && (--count == 0)) {\n    (*DAT_000811ac)();\n  }\n  *DAT_000811a8 = count;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081190",
            "calling": [],
            "imported": false,
            "current_name": "decrement_and_call_if_zero_00081190"
        },
        "FUN_000809e4": {
            "renaming": {
                "FUN_000809e4": "set_parameters_000809e4",
                "param_1": "parameter_list",
                "param_2": "parameter_value",
                "param_3": "bit_mask",
                "bVar1": "is_bit_set"
            },
            "code": "void set_parameters_000809e4(uint32_t* parameter_list, uint32_t parameter_value, uint32_t bit_mask)\n{\n    bool is_bit_set = (int)(bit_mask << 0x1f) < 0;\n    parameter_list[17] = parameter_value;\n    if (is_bit_set) {\n        parameter_list[25] = parameter_value;\n    }\n    if (!is_bit_set) {\n        parameter_list[24] = parameter_value;\n    }\n    is_bit_set = (bit_mask & 10) != 0;\n    if (is_bit_set) {\n        parameter_list[8] = parameter_value;\n    }\n    if (!is_bit_set) {\n        parameter_list[9] = parameter_value;\n    }\n    if (((int)(bit_mask << 0x1e) < 0) || ((int)(bit_mask << 0x1c) < 0)) {\n        parameter_list[32] = parameter_value;\n    }\n    parameter_list[5] = parameter_value;\n    *parameter_list = parameter_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809e4",
            "calling": [
                "FUN_00080a30"
            ],
            "imported": false,
            "current_name": "set_parameters_000809e4"
        },
        "FUN_00080ebe": {
            "renaming": {
                "FUN_00080ebe": "returnZero_00080ebe"
            },
            "code": "int returnZero_00080ebe(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ebe",
            "calling": [
                "FUN_000844e0"
            ],
            "imported": false,
            "current_name": "returnZero_00080ebe"
        },
        "thunk_FUN_000816d8": {
            "renaming": {
                "thunk_FUN_000816d8": "getValueFromPointer_thunk_000816d8",
                "undefined4": "int",
                "PTR_DAT_000816e0": "pointerToData",
                "*(undefined4 *)PTR_DAT_000816e0": "*pointerToData"
            },
            "code": "int getValueFromPointer_thunk_000816d8() {\n  int* PTR_DAT_000816e0 = (int*) PTR_DAT_000816e0;\n  int value = *(undefined4 *)PTR_DAT_000816e0;\n  return value;\n}",
            "called": [
                "FUN_000816d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f04",
            "calling": [
                "FUN_000811e8"
            ],
            "imported": false,
            "current_name": "getValueFromPointer_thunk_000816d8"
        },
        "FUN_000816d8": {
            "renaming": {
                "FUN_000816d8": "get_value_from_pointer_000816d8",
                "PTR_DAT_000816e0": "pointer_data"
            },
            "code": "get_value_from_pointer_000816d8() {\n    return *(undefined4 *)PTR_DAT_000816e0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d8",
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_000816d8"
        },
        "FUN_000815b8": {
            "renaming": {
                "FUN_000815b8": "check_byte_000815b8",
                "param_1": "byte_array",
                "param_2": "byte_val",
                "uVar1": "byte_count",
                "iVar2": "result",
                "*param_1": "*byte_array",
                "FUNC_00082390": "get_byte_count"
            },
            "code": "int check_byte_000815b8(byte **byte_array, byte *byte_val) {\n    uint8_t byte_count;\n    int result;\n    if (byte_array[2] == NULL) {\n        if (byte_val == NULL) {\n            return 1;\n        }\n    }\n    else {\n        if (byte_val != NULL) {\n            byte_count = get_byte_count(*byte_array);\n            goto LAB_000815d4;\n        }\n        byte_val = *byte_array;\n    }\n    byte_count = (uint8_t)*byte_val;\n    LAB_000815d4:\n    result = 1 - byte_count;\n    if (1 < byte_count) {\n        result = 0;\n    }\n    return result;\n}",
            "called": [
                "FUN_00082390"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815b8",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "check_byte_000815b8"
        },
        "FUN_00084220": {
            "renaming": {
                "FUN_00084220": "process_and_update_data_00084220",
                "param_1": "data",
                "param_2": "data_offset",
                "iVar1": "processed_data",
                "process_data_00084508": "process_data",
                "data_pointer": "data_pointer",
                "flag_pointer": "flag_pointer"
            },
            "code": "void process_and_update_data_00084220(undefined4 data, int data_offset) {\n  int processed_data = process_data(data, (int)*(short *)(data_offset + 0xe));\n  if (processed_data >= 0) {\n    int* data_pointer = (int *)(data_offset + 0x50);\n    *data_pointer += processed_data;\n    return;\n  }\n  ushort* flag_pointer = (ushort *)(data_offset + 0xc);\n  *flag_pointer &= 0xefff;\n  return;\n}",
            "called": [
                "FUN_00084508"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084220",
            "calling": [],
            "imported": false,
            "current_name": "process_and_update_data_00084220"
        },
        "FUN_00081472": {
            "renaming": {
                "FUN_00081472": "allocate_memory_and_return_pointer_00081472",
                "*param_1": "*memory_block_size",
                "allocate_memory_block_00081800": "allocate_memory_block"
            },
            "code": "void allocate_memory_and_return_pointer_00081472(int *memory_block_size)\n{\n  allocate_memory_block(*memory_block_size);\n  return memory_block_size;\n}",
            "called": [
                "FUN_00081800"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081472",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "allocate_memory_and_return_pointer_00081472"
        },
        "FUN_00084860": {
            "renaming": {
                "FUN_00084860": "FUNC_00084860"
            },
            "code": "\nundefined8 FUNC_00084860(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084860",
            "calling": [
                "FUN_0008458c"
            ],
            "imported": false,
            "current_name": "FUNC_00084860"
        },
        "FUN_000836ec": {
            "renaming": {
                "FUN_000836ec": "process_and_exit_on_error_000836ec",
                "uVar1": "status",
                "puVar2": "data_ptr",
                "iVar3": "data_size",
                "iVar4": "PTR_DAT_000836d0",
                "UNRECOVERED_JUMPTABLE_00": "function_pointer"
            },
            "code": "void process_and_exit_on_error_000836ec(void)\n{\n  int status = 1;\n  int *data_ptr = *(int **)PTR_DAT_000836d0 + 0x148;\n  int data_size = data_ptr[1];\n  if (data_size > 0x1f) {\n    if ((DAT_000836d4 == 0) || (allocate_memory(400) == NULL)) {\n      exit_with_status_00080eec(1);\n    }\n    int *new_data_ptr = allocate_memory(400);\n    new_data_ptr[0] = *data_ptr;\n    new_data_ptr[1] = 0;\n    data_size = 0;\n    *data_ptr = (int)new_data_ptr;\n    new_data_ptr[0x62] = 0;\n    new_data_ptr[99] = 0;\n  }\n  data_ptr[1] = data_size + 1;\n  data_ptr[data_size + 2] = status;\n  exit_with_status_00080eec(0);\n}\n",
            "called": [
                "FUN_00080eec",
                "FUN_000841e4",
                "FUN_000817f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836ec",
            "calling": [
                "FUN_000816f8"
            ],
            "imported": false,
            "current_name": "process_and_exit_on_error_000836ec"
        },
        "FUN_00081750": {
            "renaming": {
                "FUN_00081750": "execute_function_with_params_00081750",
                "param_1": "function_pointer",
                "param_2": "param_1",
                "param_3": "param_2",
                "param_4": "param_3",
                "uStack_8": "stack_param_3",
                "uStack_4": "stack_param_4",
                "*DAT_00081774": "function_pointer"
            },
            "code": "void execute_function_with_params_00081750(void* *DAT_00081774, int param_1, int param_2, int* param_3, int* param_4) {\n    int* stack_param_3 = param_3;\n    int* stack_param_4 = param_4;\n    *DAT_00081774(param_1, param_2, stack_param_3, stack_param_4);\n}",
            "called": [
                "FUN_0008289c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081750",
            "calling": [
                "FUN_000816f8"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_00081750"
        },
        "FUN_00082688": {
            "renaming": {
                "FUN_00082688": "count_bytes_with_nonzero_bit_00082688",
                "param_1": "address",
                "iVar1": "byteCount",
                "puVar2": "addressPointer",
                "uVar3": "currentValue",
                "bVar4": "isZero"
            },
            "code": "int count_bytes_with_nonzero_bit_00082688(uint address)\n{\n    int byteCount = 0;\n    uint *addressPointer;\n    uint currentValue;\n    bool isZero;\n\n    addressPointer = (uint *)(address & 0xfffffffc);\n    byteCount = -(address & 3);\n    currentValue = *addressPointer;\n    if ((address & 3) != 0) {\n        currentValue = currentValue | 0xffffffffU >> ((byteCount + 4U & 0x1f) << 3);\n    }\n    while (addressPointer = addressPointer + 1, (currentValue + 0xfefefeff & ~currentValue & 0x80808080) == 0) {\n        byteCount = byteCount + 4;\n        currentValue = *addressPointer;\n    }\n    isZero = (currentValue & 0xff) == 0;\n    if (!isZero) {\n        byteCount = byteCount + 1;\n        isZero = (currentValue & 0xff00) == 0;\n    }\n    if (!isZero) {\n        byteCount = byteCount + 1;\n        isZero = (currentValue & 0xff0000) == 0;\n    }\n    if (!isZero) {\n        byteCount = byteCount + 1;\n    }\n    return byteCount;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082688",
            "calling": [
                "FUN_000810a6",
                "FUN_000814f6",
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "count_bytes_with_nonzero_bit_00082688"
        },
        "FUN_00084508": {
            "renaming": {
                "FUN_00084508": "process_data_00084508",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr",
                "iVar2": "status"
            },
            "code": "void process_data_00084508(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n    undefined *ptr = PTR_DAT_0008452c;\n    *(undefined4 *)ptr = 0;\n    int status = return_status(arg1, arg2, arg3);\n    if (status == -1 && *(int *)ptr != 0)\n    {\n        *result = *(int *)ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_00080ec2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084508",
            "calling": [
                "FUN_00084220"
            ],
            "imported": false,
            "current_name": "process_data_00084508"
        },
        "FUN_00080a30": {
            "renaming": {
                "FUN_00080a30": "process_data_00080a30",
                "param_1": "data_ptr",
                "param_2": "data_type",
                "param_3": "data_value",
                "param_4": "data_flag",
                "bVar1": "is_negative",
                "DAT_00080a88": "data_function_1",
                "DAT_00080a8c": "data_function_2",
                "DAT_00080a90": "data_function_3"
            },
            "code": "int process_data_00080a30(int data_ptr, int data_type, int data_value, unsigned int data_flag)\n{\n    bool is_negative = (int)(data_flag << 0x1f) < 0;\n    switch(data_type) {\n    case 1:\n    case 2:\n        (*DAT_00080a88)(data_ptr, data_type, data_value);\n        *(int *)(data_ptr + 0x44) = data_value;\n        if (is_negative) {\n          *(int *)(data_ptr + 100) = data_value;\n        }\n        if (!is_negative) {\n          *(int *)(data_ptr + 0x60) = data_value;\n        }\n        break;\n    case 3:\n        (*DAT_00080a8c)(data_ptr, data_value, data_flag, DAT_00080a8c, data_ptr);\n        break;\n    case 4:\n    case 5:\n        (*DAT_00080a90)(data_ptr, data_value, data_type == 5, (data_flag << 0x1d) >> 0x1f, data_flag & 1, data_type, data_value);\n        break;\n    default:\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_000809e4",
                "FUN_00080a0a",
                "FUN_000809be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a30",
            "calling": [
                "FUN_00080f0c",
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "process_data_00080a30"
        },
        "FUN_0008089c": {
            "renaming": {
                "FUN_0008089c": "initialize_and_write_buffers_0008089c",
                "param_1": "original_parameter1",
                "param_2": "original_parameter2",
                "param_3": "original_parameter3",
                "puVar1": "original_buffer1_ptr",
                "puVar2": "original_buffer2_ptr",
                "puVar3": "original_buffer3_ptr",
                "puVar4": "original_buffer4_ptr",
                "puVar5": "original_buffer5_ptr",
                "puVar6": "original_buffer6_ptr",
                "PTR_DAT_00080930": "original_buffer1_ptr",
                "PTR_DAT_00080934": "original_buffer2_ptr",
                "PTR_DAT_0008093c": "original_buffer3_ptr",
                "PTR_DAT_00080940": "buffer4_ptr",
                "DAT_00080938": "original_parameter2",
                "PTR_DAT_00080944": "original_buffer1_ptr",
                "PTR_DAT_00080948": "original_buffer2_ptr",
                "PTR_DAT_0008094c": "original_buffer4_ptr",
                "PTR_DAT_00080954": "original_buffer7_ptr",
                "DAT_00080950": "original_parameter3",
                "PTR_DAT_0008095c": "original_buffer8_ptr",
                "DAT_00080958": "original_parameter4",
                "PTR_DAT_00080964": "original_buffer9_ptr",
                "DAT_00080960": "original_parameter5",
                "PTR_DAT_00080968": "original_buffer5_ptr",
                "PTR_DAT_0008096c": "original_buffer6_ptr"
            },
            "code": "void initialize_and_write_buffers_0008089c(undefined4 param_1, undefined4 param_2, undefined4 param_3)\n{\n  undefined *buffer1_ptr;\n  undefined *buffer2_ptr;\n  undefined *buffer3_ptr;\n  undefined *PTR_DAT_00080940;\n  undefined *buffer5_ptr;\n  undefined *buffer6_ptr;\n  \n  buffer2_ptr = PTR_DAT_00080934;\n  buffer1_ptr = PTR_DAT_00080930;\n  clear_memory(buffer1_ptr);\n  clear_memory(buffer2_ptr);\n  buffer5_ptr = PTR_DAT_00080968;\n  buffer3_ptr = PTR_DAT_0008093c;\n  initialize_parameters(PTR_DAT_00080940, DAT_00080938, 8, 8, buffer1_ptr, buffer2_ptr, param_3);\n  buffer1_ptr = PTR_DAT_00080930;\n  clear_memory(buffer5_ptr);\n  buffer6_ptr = PTR_DAT_0008096c;\n  clear_memory(buffer3_ptr);\n  buffer2_ptr = PTR_DAT_00080934;\n  clear_memory(buffer1_ptr);\n  PTR_DAT_00080940 = PTR_DAT_0008094c;\n  clear_memory(buffer6_ptr);\n  clear_memory(buffer2_ptr);\n  clear_memory(PTR_DAT_00080940);\n  write_buffer_with_param_and_ptr(PTR_DAT_00080954, DAT_00080950, 0x11, 0x11, buffer5_ptr, buffer6_ptr);\n  write_buffer_with_param_and_ptr(PTR_DAT_0008095c, DAT_00080958, 0x12, 0x12, buffer3_ptr, buffer2_ptr);\n  write_buffer_with_param_and_ptr(PTR_DAT_00080964, DAT_00080960, 0x14, 0x14, buffer1_ptr, PTR_DAT_00080940);\n  return;\n}",
            "called": [
                "FUN_00081438",
                "FUN_00081348",
                "FUN_000811b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008089c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_and_write_buffers_0008089c"
        },
        "FUN_000810a6": {
            "renaming": {
                "FUN_000810a6": "count_bytes_with_nonzero_bit_000810a6",
                "param_1": "ptr_param_array",
                "param_2": "param_array_length",
                "param_3": "ptr_count",
                "param_4": "ptr_data",
                "uVar1": "count"
            },
            "code": "void count_bytes_with_nonzero_bit_000810a6(int *ptr_param_array, int param_array_length, int *ptr_count, void (*ptr_function)(int *, int, int, void *, void *), void *ptr_data) {\n  if (param_array_length != 0) {\n    *ptr_count = count_bytes_with_nonzero_bit_000810a6_00082688(param_array_length);\n    (*ptr_function)(ptr_param_array, param_array_length, *ptr_count, ptr_function, ptr_data);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00082688"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810a6",
            "calling": [
                "FUN_000810c4",
                "FUN_000810d8",
                "FUN_000810e8",
                "FUN_000810fc"
            ],
            "imported": false,
            "current_name": "count_bytes_with_nonzero_bit_000810a6"
        }
    },
    "used_tokens": 111152,
    "layers": [
        [
            "FUN_000817c8",
            "FUN_00081684",
            "FUN_000825cc",
            "FUN_00080118",
            "FUN_00080aa8",
            "FUN_00080e80",
            "FUN_00080d62",
            "FUN_00080e88",
            "FUN_000836d8",
            "FUN_000812b8",
            "thunk_FUN_00080efe",
            "FUN_00080eb0",
            "FUN_0008439c",
            "FUN_000809be",
            "FUN_00080a94",
            "FUN_00081618",
            "FUN_0008455c",
            "FUN_000840f8",
            "FUN_00081f00",
            "FUN_00080eaa",
            "FUN_00081d48",
            "FUN_000815de",
            "FUN_0008400c",
            "FUN_00080c20",
            "FUN_00080efe",
            "FUN_00081e34",
            "FUN_000805a8",
            "FUN_000810cc",
            "FUN_00081276",
            "FUN_00080d3e",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080d58",
            "FUN_00081f9c",
            "FUN_00081248",
            "FUN_0008458c",
            "FUN_000811ca",
            "FUN_00084004",
            "FUN_000816ec",
            "FUN_00081778",
            "FUN_000800f4",
            "FUN_00080d30",
            "FUN_00080c98",
            "FUN_00080d6a",
            "FUN_00080a0a",
            "FUN_00080b2c",
            "FUN_00080ec2",
            "FUN_00081348",
            "FUN_00080ec8",
            "FUN_000817f0",
            "FUN_0008145c",
            "FUN_00080eba",
            "FUN_00081190",
            "FUN_000809e4",
            "FUN_00080ebe",
            "thunk_FUN_000816d8",
            "FUN_000816d8",
            "FUN_000815b8",
            "FUN_00081750",
            "FUN_00082688",
            "FUN_00080a30"
        ],
        [
            "FUN_00080f0c",
            "FUN_000844e0",
            "FUN_0008236c",
            "FUN_000803fc",
            "FUN_00084494",
            "FUN_00084530",
            "FUN_00080970",
            "FUN_000841e4",
            "FUN_000844bc",
            "FUN_00081438",
            "FUN_0008434c",
            "FUN_00081496",
            "FUN_00080eec",
            "FUN_000811e8",
            "FUN_000806f8",
            "FUN_000813dc",
            "FUN_00083888",
            "FUN_00081624",
            "FUN_000811b0",
            "FUN_00084508",
            "FUN_000810a6"
        ],
        [
            "FUN_00083a74",
            "FUN_0008427c",
            "FUN_00084018",
            "FUN_000810d8",
            "FUN_000806a0",
            "FUN_00080164",
            "FUN_00084244",
            "FUN_00081014",
            "FUN_000814ae",
            "FUN_000810c4",
            "FUN_000810fc",
            "FUN_00084220",
            "FUN_000836ec",
            "FUN_0008089c"
        ],
        [
            "FUN_00083b10",
            "thunk_FUN_0008113a",
            "FUN_00081570",
            "FUN_0008113a",
            "FUN_0008044c",
            "FUN_000810e8",
            "FUN_000816f8",
            "FUN_00080774",
            "FUN_000801e0"
        ],
        [
            "FUN_00083850",
            "FUN_0008356c",
            "FUN_00081800",
            "FUN_0008159e",
            "FUN_0008117a"
        ],
        [
            "FUN_000842a4",
            "FUN_000834f0",
            "FUN_00081480",
            "FUN_0008151c",
            "FUN_00084484",
            "FUN_00081472"
        ],
        [
            "FUN_00081560",
            "FUN_000839b4",
            "FUN_000814d0"
        ],
        [
            "FUN_000814f6",
            "FUN_00082824"
        ],
        [
            "FUN_00081214"
        ],
        [
            "FUN_00080250"
        ],
        [
            "FUN_000815ec"
        ]
    ],
    "locked_functions": []
}