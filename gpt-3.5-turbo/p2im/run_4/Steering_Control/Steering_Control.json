{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeFlag_000800f4(undefined4 inputParam)\n\n{\n  if ((char)DAT_200708a0 == '\\0') {\n    DAT_200708a0._0_1_ = '\\x01';\n  }\n  return inputParam;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "inputParam"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "calculate_and_store_values_00080164",
            "code": "\nvoid calculateAndStoreValues_00080164(undefined4 value1,undefined4 value2,undefined4 value3,undefined4 value4)\n\n{\n  calculate_and_store_value_000806f8(&DAT_200708e8,0x5a);\n  calculate_and_store_value_000806f8(&DAT_200708d4,0x5a,value3,value4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "calculate_and_store_values_00080164",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_000806f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801e0": {
            "entrypoint": "0x000801e0",
            "current_name": "initialize_and_calculate_000801e0",
            "code": "\nundefined8 initialize_and_calculate_000801e0(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  initialize_memory_000813dc(&DAT_20070be8,0xe100,input_param_3,input_param_4,input_param_4);\n  update_parameter_info_00080f0c(0xd,1);\n  update_parameter_info_00080f0c(6,1);\n  update_parameter_info_00080f0c(0x39,0);\n  update_parameter_info_00080f0c(4,0);\n  update_parameter_info_00080f0c(3,0);\n  update_parameter_info_00080f0c(2,0);\n  update_channel_info_000806a0(&DAT_200708d4,5);\n  update_channel_info_000806a0(&DAT_200708e8,6);\n  calculate_and_store_values();\n  FUNC_00080f08(1000);\n  if (DAT_200708bc == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000801e0": "initialize_and_calculate_000801e0",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "calculate_and_store_values_00080164": "calculate_and_store_values"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00080f0c",
                "FUN_000813dc",
                "FUN_000806a0",
                "FUN_00080164",
                "FUN_00080f08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080250": {
            "entrypoint": "0x00080250",
            "current_name": "control_system_00080250",
            "code": "\nvoid controlSystem_00080250(void)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  undefined *puVar3;\n  undefined auStack_1c [12];\n  \n  DAT_200708c0 = calculateResult(4,1,20000);\n  FUNC_00080f08(10);\n  DAT_200708c4 = DAT_200708c4 ^ 1;\n  updateParameterAndInfo(0xd);\n  if (DAT_200708c0 < 0x641) {\n    if (DAT_200708c0 - 0x385U < 299) {\n      if (DAT_200708eb != '\\0') {\n        calculateAndStoreValues();\n        calculateSum(&DAT_20070be8,\"Entered manual control mode.\");\n        DAT_200708eb = '\\0';\n      }\n      FUNC_00080f08(10);\n      uVar1 = calculateResult(3,1,20000);\n      DAT_200708d8 = calculateInterpolation(0,1000,2000,0x28,0x96);\n      DAT_200708ec = calculateInterpolation(uVar1,1000,2000,0x28,0x96);\n      while (iVar2 = calculateDifference(&DAT_20070be8), 0 < iVar2) {\n        extractData(&DAT_20070be8);\n        convertToBaseOrExecuteThunk(&DAT_20070be8,DAT_200708d8,10);\n        initializeProcess(&DAT_20070be8,&DAT_00084b13);\n        calculate_sum_0008117a(&DAT_20070be8,DAT_200708ec,10);\n      }\n      calculateAndStoreValue(&DAT_200708e8,DAT_200708ec);\n      calculateAndStoreValue(&DAT_200708d4,DAT_200708d8);\n    }\n    else {\n      if (DAT_200708eb == '\\0') {\n        calculateAndStoreValues();\n        calculateSum(&DAT_20070be8,\"Entered autonomous control mode.\");\n      }\n      DAT_200708eb = '\\x01';\nLAB_00080346:\n      iVar2 = calculateDifference(&DAT_20070be8);\n      if (0 < iVar2) {\n        processData(auStack_1c,&DAT_20070be8,0x2c);\n        checkAndUpdateParam(&DAT_200708dc,auStack_1c);\n        processAndReturnParam(auStack_1c);\n        processData(auStack_1c,&DAT_20070be8,10);\n        checkAndUpdateParam(&DAT_200708c8,auStack_1c);\n        processAndReturnParam(auStack_1c);\n        extractData(&DAT_20070be8);\n        iVar2 = checkArrayElement(&DAT_200708dc,\"steer\");\n        if (iVar2 == 0) goto LAB_0008039c;\n        uVar1 = parseIntegerFromString(&DAT_200708c8);\n        puVar3 = &DAT_200708d4;\n        goto LAB_000803b2;\n      }\n    }\n  }\n  else {\n    calculateAndStoreValues();\n    calculateSum(&DAT_20070be8,\"error\");\n  }\n  return;\nLAB_0008039c:\n  iVar2 = checkArrayElement(&DAT_200708dc,\"motor\");\n  if (iVar2 != 0) {\n    uVar1 = parseIntegerFromString(&DAT_200708c8);\n    puVar3 = &DAT_200708e8;\nLAB_000803b2:\n    calculateAndStoreValue(puVar3,uVar1);\n  }\n  goto LAB_00080346;\n}\n\n",
            "renaming": {
                "FUN_00080250": "control_system_00080250",
                "calculate_result_00081624": "calculateResult",
                "update_parameter_and_info_00081014": "updateParameterAndInfo",
                "calculate_and_store_values_00080164": "calculateAndStoreValues",
                "calculate_sum_000810e8": "calculateSum",
                "calculate_interpolation_0008145c": "calculateInterpolation",
                "calculate_difference_00081248": "calculateDifference",
                "extract_data_00081276": "extractData",
                "convert_to_base_or_execute_thunk_0008113a": "convertToBaseOrExecuteThunk",
                "initialize_process_000810c4": "initializeProcess",
                "calculate_and_store_value_000806f8": "calculateAndStoreValue",
                "process_data_00081214": "processData",
                "check_and_update_param_00081560": "checkAndUpdateParam",
                "process_and_return_param_00081472": "processAndReturnParam",
                "check_array_element_000815b8": "checkArrayElement",
                "parse_integer_from_string_000815de": "parseIntegerFromString"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00081560",
                "FUN_000815b8",
                "FUN_000815de",
                "FUN_00080164",
                "FUN_000806f8",
                "FUN_00081624",
                "FUN_00080f08",
                "FUN_00081248",
                "thunk_FUN_0008113a",
                "FUN_000810e8",
                "FUN_000810c4",
                "FUN_00081214",
                "FUN_00081276",
                "FUN_0008145c",
                "FUN_00081014",
                "FUN_0008117a",
                "FUN_00081472"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803fc": {
            "entrypoint": "0x000803fc",
            "current_name": "start_channel_000803fc",
            "code": "\nvoid startChannel_000803fc(int channelNumber,uint paramValue,undefined4 memoryAddress,uint bitPosition)\n\n{\n  undefined4 temp_r4;\n  undefined4 temp_lr;\n  undefined8 combinedValue;\n  \n  combinedValue = CONCAT44(paramValue,channelNumber);\n  set_bit_in_memory_00080aa8(memoryAddress);\n  configure_tc_channel_00080b2c(channelNumber,paramValue,0xc002);\n  store_data_00080b90(channelNumber,paramValue,0xa41);\n  *(int *)((bitPosition >> 5) * 4 + -0x1fff1f00) = 1 << (bitPosition & 0x1f);\n  *(undefined4 *)(channelNumber + paramValue * 0x40 + 0x24) = 4;\n  if (2 < paramValue) {\n    combinedValue = parse_and_process_assertion_000816f8(\"../source/tc.c\",0x5c,\"TC_Start\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\",\n                         temp_r4,temp_lr);\n  }\n  *(undefined4 *)((int)combinedValue + (int)((ulonglong)combinedValue >> 0x20) * 0x40) = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000803fc": "start_channel_000803fc",
                "param_1": "channelNumber",
                "param_2": "paramValue",
                "param_3": "memoryAddress",
                "param_4": "bitPosition",
                "unaff_r4": "temp_r4",
                "in_lr": "temp_lr",
                "uVar1": "combinedValue"
            },
            "calling": [
                "FUN_000806a0"
            ],
            "called": [
                "FUN_00080aa8",
                "FUN_00080b90",
                "FUN_00080b2c",
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008044c": {
            "entrypoint": "0x0008044c",
            "current_name": "update_parameter_and_info_0008044c",
            "code": "\nvoid updateParameterAndInfo_0008044c(int index,int data,int offset)\n\n{\n  uint maxValue;\n  int arrayIndex;\n  \n  offset = offset * 0x40;\n  if (((&DAT_200708f1)[index] & 0x80) == 0) {\n    arrayIndex = index * 0xc;\n    if (((char)(&DAT_200708f1)[index] + arrayIndex < (int)(uint)DAT_200708f0) &&\n       ((int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + arrayIndex) * 8] << 0x19) < 0\n       )) {\n      update_parameter_and_info_00081014((&DAT_200708f8)[(arrayIndex + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,0);\n    }\n  }\n  else {\n    *(uint *)(data + offset) = *(uint *)(data + offset) | 4;\n  }\n  maxValue = (uint)DAT_200708f0;\n  (&DAT_200708f1)[index] = (&DAT_200708f1)[index] + '\\x01';\n  arrayIndex = index * 0xc;\n  if (((char)(&DAT_200708f1)[index] + arrayIndex < (int)maxValue) &&\n     ((char)(&DAT_200708f1)[index] < '\\f')) {\n    *(int *)(data + offset + 0x14) =\n         *(int *)(data + offset + 0x10) +\n         *(int *)(&DAT_200708fc + ((char)(&DAT_200708f1)[index] + arrayIndex) * 8);\n    if (-1 < (int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + arrayIndex) * 8] << 0x19\n                  )) {\n      return;\n    }\n    update_parameter_and_info_00081014((&DAT_200708f8)[(arrayIndex + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,1);\n    return;\n  }\n  data = data + offset;\n  maxValue = (Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * 20000 >> 5;\n  if (maxValue <= *(int *)(data + 0x10) + 4U) {\n    maxValue = *(int *)(data + 0x10) + 4;\n  }\n  *(uint *)(data + 0x14) = maxValue;\n  (&DAT_200708f1)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008044c": "update_parameter_and_info_0008044c",
                "param_1": "index",
                "param_2": "data",
                "param_3": "offset",
                "uVar1": "maxValue",
                "iVar2": "arrayIndex"
            },
            "calling": [],
            "called": [
                "FUN_00081014"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805a8": {
            "entrypoint": "0x000805a8",
            "current_name": "update_parameter_000805a8",
            "code": "\nvoid updateParameter_000805a8(byte *outputByte)\n\n{\n  char newCurrentValue;\n  uint index;\n  \n  index = (uint)DAT_200708f0;\n  if (index < 0x3c) {\n    newCurrentValue = DAT_200708f0 + 1;\n    *outputByte = DAT_200708f0;\n    DAT_200708f0 = newCurrentValue;\n    *(uint *)(&DAT_200708fc + index * 8) =\n         (relArray[6].r_offset / 1000000) * 0x5dc >> 5;\n    return;\n  }\n  *outputByte = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805a8": "update_parameter_000805a8",
                "param_1": "outputByte",
                "cVar1": "newCurrentValue",
                "uVar2": "index",
                "Elf32_Rel_ARRAY_20070000": "relArray"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806a0": {
            "entrypoint": "0x000806a0",
            "current_name": "update_channel_info_000806a0",
            "code": "\nbyte update_channel_info_000806a0(byte *param_1,undefined4 channel_id)\n\n{\n  byte temp_byte;\n  undefined4 memory_offset;\n  uint channel_index;\n  undefined4 start_value;\n  int loop_index;\n  uint temp_value;\n  \n  if (0x3b < *param_1) goto LAB_00080660;\n  update_parameter_info_00080f0c(channel_id,1,0x220,*param_1,0x960);\n  temp_value = (uint)*param_1;\n  temp_byte = (&DAT_200708f8)[temp_value * 8];\n  param_1[2] = 0;\n  channel_index = temp_value / 0xc;\n  (&DAT_200708f8)[temp_value * 8] = temp_byte & 0xc0 | (byte)channel_id & 0x3f;\n  param_1[1] = 0;\n  loop_index = 0;\n  do {\n    if ((int)((uint)(byte)(&DAT_200708f8)[(loop_index + channel_index * 0xc) * 8] << 0x19) < 0)\n    goto LAB_00080652;\n    loop_index = loop_index + 1;\n  } while (loop_index != 0xc);\n  if (channel_index == 0) {\n    memory_offset = 0x40084000;\n    start_value = 0x1e;\nLAB_0008064c:\n    start_channel_000803fc(memory_offset,channel_index,start_value,start_value);\n  }\n  else {\n    if (channel_index == 1) {\n      memory_offset = 0x40084000;\n      start_value = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (channel_index == 2) {\n      memory_offset = 0x40084000;\n      start_value = 0x20;\n      goto LAB_0008064c;\n    }\n    if (channel_index == 3) {\n      memory_offset = 0x40080000;\n      channel_index = 2;\n      start_value = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (channel_index == 4) {\n      memory_offset = 0x40080000;\n      channel_index = 0;\n      start_value = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  (&DAT_200708f8)[(uint)*param_1 * 8] = (&DAT_200708f8)[(uint)*param_1 * 8] | 0x40;\nLAB_00080660:\n  return *param_1;\n}\n\n",
            "renaming": {
                "FUN_000806a0": "update_channel_info_000806a0",
                "param_2": "channel_id",
                "bVar1": "temp_byte",
                "uVar2": "memory_offset",
                "uVar3": "channel_index",
                "uVar4": "start_value",
                "iVar5": "loop_index",
                "uVar6": "temp_value"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_000803fc",
                "FUN_00080f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806f8": {
            "entrypoint": "0x000806f8",
            "current_name": "calculate_and_store_value_000806f8",
            "code": "\nvoid calculate_and_store_value_000806f8(byte *byte_array,uint size)\n\n{\n  uint interpolation_value;\n  \n  if ((int)size < 0x220) {\n    interpolation_value = size;\n    if (0xb3 < (int)size) {\n      interpolation_value = 0xb4;\n    }\n    size = calculate_interpolation(interpolation_value & ~((int)interpolation_value >> 0x1f),0,0xb4,(0x88 - (char)byte_array[1]) * 4,\n                           (600 - (char)byte_array[2]) * 4,size);\n  }\n  if (*byte_array < 0x3c) {\n    interpolation_value = (0x88 - (char)byte_array[1]) * 4;\n    if (((int)(size + (0x88 - (char)byte_array[1]) * -4) < 0 == check_borrow(size,interpolation_value)) &&\n       (interpolation_value = (600 - (char)byte_array[2]) * 4, (int)size <= (int)interpolation_value)) {\n      interpolation_value = size;\n    }\n    *(uint *)(&DAT_200708fc + (uint)*byte_array * 8) =\n         (rel_array[6].r_offset / 1000000) * (interpolation_value - 2) >> 5;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000806f8": "calculate_and_store_value_000806f8",
                "param_1": "byte_array",
                "param_2": "size",
                "uVar1": "interpolation_value",
                "calculate_interpolation_0008145c": "calculate_interpolation",
                "SBORROW4": "check_borrow",
                "Elf32_Rel_ARRAY_20070000": "rel_array"
            },
            "calling": [
                "FUN_00080250",
                "FUN_00080164"
            ],
            "called": [
                "FUN_0008145c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008073a": {
            "entrypoint": "0x0008073a",
            "current_name": "FUNC_0008073a",
            "code": "\nvoid FUNC_0008073a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008073a": "FUNC_0008073a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080748": {
            "entrypoint": "0x00080748",
            "current_name": "FUNC_00080748",
            "code": "\nvoid FUNC_00080748(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080748": "FUNC_00080748"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074a": {
            "entrypoint": "0x0008074a",
            "current_name": "FUNC_0008074a",
            "code": "\nvoid FUNC_0008074a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074a": "FUNC_0008074a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074c": {
            "entrypoint": "0x0008074c",
            "current_name": "FUNC_0008074c",
            "code": "\nvoid FUNC_0008074c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074c": "FUNC_0008074c"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080774": {
            "entrypoint": "0x00080774",
            "current_name": "initialize_system_00080774",
            "code": "\n\n\nvoid initializeSystem_00080774(void)\n\n{\n  int iteration;\n  int nextIteration;\n  \n  initialize_memory_00080b98();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  executeFunctionSequence();\n  iteration = 0;\n  do {\n    nextIteration = iteration + 1;\n    updateParameterAndInfo(iteration,0);\n    iteration = nextIteration;\n  } while (nextIteration != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  updateParameterInfo(0x400e0e00,1,0x300,0);\n  updateParameterAndInfo(0,1);\n  updateParameterInfo(0x400e0e00,1,0xc00,0);\n  updateParameterInfo(0x400e0e00,1,0x3000,0);\n  updateParameterInfo(0x400e1400,2,0x30,0);\n  updateParameterInfo(0x400e1000,1,0xc00,0);\n  updateParameterInfo(0x400e0e00,1,3,0);\n  updateParameterInfo(0x400e1000,1,0xc000,0);\n  setBitInMemory(0x25);\n  calculateThreshold(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  setFlagsAndShift(0x400c0000,0,0x300000,1);\n  updateParameter(0x400c0000,0,0);\n  setParameter(0x400c0000,0xffffffff);\n  initializeParameter(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080774": "initialize_system_00080774",
                "iVar1": "iteration",
                "iVar2": "nextIteration",
                "execute_function_sequence_00081778": "executeFunctionSequence",
                "update_parameter_and_info_00081014": "updateParameterAndInfo",
                "update_parameter_info_00080a30": "updateParameterInfo",
                "set_bit_in_memory_00080aa8": "setBitInMemory",
                "calculate_threshold_00080c98": "calculateThreshold",
                "set_flags_and_shift_00080d3e": "setFlagsAndShift",
                "update_parameter_00080d30": "updateParameter",
                "set_parameter_00080d6a": "setParameter",
                "initialize_parameter_00080d62": "initializeParameter"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00081778",
                "FUN_00080a30",
                "FUN_00080b98",
                "FUN_00081014",
                "FUN_00080d30",
                "FUN_00080c98",
                "FUN_00080d62",
                "FUN_00080d3e",
                "FUN_00080d6a",
                "FUN_00080aa8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008089c": {
            "entrypoint": "0x0008089c",
            "current_name": "initialize_params_0008089c",
            "code": "\nvoid initializeParams_0008089c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  initializeParam(&DAT_20070c0c);\n  initializeParam(&DAT_20070b60);\n  initializeParams_0008089cWithValues(&DAT_20070be8,0x400e0800,8,8,&DAT_20070c0c,&DAT_20070b60,param3);\n  initializeParam(&DAT_20070e6c);\n  initializeParam(&DAT_20070ef4);\n  initializeParam(&DAT_20070f7c);\n  initializeParam(&DAT_20070ad8);\n  initializeParam(&DAT_20070d0c);\n  initializeParam(&DAT_20070d94);\n  initializeAndSetParams(&DAT_20070c94,0x40098000,0x11,0x11,&DAT_20070e6c,&DAT_20070ad8);\n  initializeAndSetParams(&DAT_20070cbc,0x4009c000,0x12,0x12,&DAT_20070ef4,&DAT_20070d0c);\n  initializeAndSetParams(&DAT_20070ce4,0x400a4000,0x14,0x14,&DAT_20070f7c,&DAT_20070d94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008089c": "initialize_params_0008089c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "initialize_param_000811b0": "initializeParam",
                "initialize_params_00081348": "initializeParamsWithValues",
                "initialize_and_set_params_00081438": "initializeAndSetParams"
            },
            "calling": [],
            "called": [
                "FUN_000811b0",
                "FUN_00081438",
                "FUN_00081348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080970": {
            "entrypoint": "0x00080970",
            "current_name": "check_and_execute_operations_00080970",
            "code": "\nvoid check_and_execute_operations_00080970(void)\n\n{\n  int result;\n  \n  result = calculate_difference(&DAT_20070be8);\n  if (result != 0) {\n    FUNC_0008073a();\n  }\n  result = calculate_difference(&DAT_20070c94);\n  if (result != 0) {\n    FUNC_00080748();\n  }\n  result = calculate_difference(&DAT_20070cbc);\n  if (result != 0) {\n    FUNC_0008074a();\n  }\n  result = calculate_difference(&DAT_20070ce4);\n  if (result != 0) {\n    FUNC_0008074c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080970": "check_and_execute_operations_00080970",
                "iVar1": "result",
                "calculate_difference_00081248": "calculate_difference"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_0008074c",
                "FUN_0008074a",
                "FUN_0008073a",
                "FUN_00081248",
                "FUN_00080748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809be": {
            "entrypoint": "0x000809be",
            "current_name": "update_parameter_000809be",
            "code": "\nvoid updateParameter_000809be(int baseAddress,undefined4 actionType,uint newValue)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(baseAddress + 0x44) = newValue;\n  switch(actionType) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~newValue;\n    break;\n  case 2:\n    updatedValue = *(uint *)(baseAddress + 0x70) | newValue;\n    break;\n  default:\n    goto switchD_000809c4_caseD_6;\n  }\n  *(uint *)(baseAddress + 0x70) = updatedValue;\nswitchD_000809c4_caseD_6:\n  *(uint *)(baseAddress + 4) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809be": "update_parameter_000809be",
                "param_1": "baseAddress",
                "param_2": "actionType",
                "param_3": "newValue",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809e4": {
            "entrypoint": "0x000809e4",
            "current_name": "update_parameters_000809e4",
            "code": "\nvoid updateParameters_000809e4(undefined4 *parameterArray,undefined4 newValue,uint flags)\n\n{\n  bool isFlagSet;\n  \n  isFlagSet = (int)(flags << 0x1f) < 0;\n  parameterArray[0x11] = newValue;\n  if (isFlagSet) {\n    parameterArray[0x19] = newValue;\n  }\n  if (!isFlagSet) {\n    parameterArray[0x18] = newValue;\n  }\n  isFlagSet = (flags & 10) != 0;\n  if (isFlagSet) {\n    parameterArray[8] = newValue;\n  }\n  if (!isFlagSet) {\n    parameterArray[9] = newValue;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    parameterArray[0x20] = newValue;\n  }\n  parameterArray[5] = newValue;\n  *parameterArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809e4": "update_parameters_000809e4",
                "param_1": "parameterArray",
                "param_2": "newValue",
                "param_3": "flags",
                "bVar1": "isFlagSet"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a0a": {
            "entrypoint": "0x00080a0a",
            "current_name": "set_parameters_00080a0a",
            "code": "\nvoid setParameters_00080a0a(undefined4 *parameters,undefined4 value,int flag1,int flag2,int flag3)\n\n{\n  parameters[0x11] = value;\n  if (flag3 == 0) {\n    parameters[0x18] = value;\n  }\n  else {\n    parameters[0x19] = value;\n  }\n  if (flag2 == 0) {\n    parameters[0x15] = value;\n  }\n  else {\n    parameters[0x14] = value;\n  }\n  if (flag1 == 0) {\n    parameters[0xd] = value;\n  }\n  else {\n    parameters[0xc] = value;\n  }\n  parameters[4] = value;\n  *parameters = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a0a": "set_parameters_00080a0a",
                "param_1": "parameters",
                "param_2": "value",
                "param_3": "flag1",
                "param_4": "flag2",
                "param_5": "flag3"
            },
            "calling": [
                "FUN_00080a30",
                "FUN_00081014"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a30": {
            "entrypoint": "0x00080a30",
            "current_name": "update_parameter_info_00080a30",
            "code": "\nundefined4 updateParameterInfo_00080a30(int deviceInfo,int parameterType,undefined4 newValue,uint flags)\n\n{\n  bool isNegativeFlag;\n  \n  switch(parameterType) {\n  case 1:\n  case 2:\n    updateParameter(deviceInfo,parameterType,newValue);\n    isNegativeFlag = (int)(flags << 0x1f) < 0;\n    *(undefined4 *)(deviceInfo + 0x44) = newValue;\n    if (isNegativeFlag) {\n      *(undefined4 *)(deviceInfo + 100) = newValue;\n    }\n    if (!isNegativeFlag) {\n      *(undefined4 *)(deviceInfo + 0x60) = newValue;\n    }\n    break;\n  case 3:\n    updateParameters(deviceInfo,newValue,flags,0x809e5,deviceInfo);\n    break;\n  case 4:\n  case 5:\n    setParameters(deviceInfo,newValue,parameterType == 5,(flags << 0x1d) >> 0x1f,flags & 1,parameterType,newValue)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080a30": "update_parameter_info_00080a30",
                "param_1": "deviceInfo",
                "param_2": "parameterType",
                "param_3": "newValue",
                "param_4": "flags",
                "bVar1": "isNegativeFlag",
                "update_parameter_000809be": "updateParameter",
                "set_parameters_00080a0a": "setParameters",
                "update_parameters_000809e4": "updateParameters"
            },
            "calling": [
                "FUN_00080f0c",
                "FUN_00080774"
            ],
            "called": [
                "FUN_000809e4",
                "FUN_000809be",
                "FUN_00080a0a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a94": {
            "entrypoint": "0x00080a94",
            "current_name": "check_bitwise_and_00080a94",
            "code": "\nuint check_bitwise_and_00080a94(int input_value,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(input_value + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(input_value + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080a94": "check_bitwise_and_00080a94",
                "param_1": "input_value",
                "param_2": "mask",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081014"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "set_bit_in_memory_00080aa8",
            "code": "\n\n\nundefined4 setBitInMemory_00080aa8(uint bitPosition)\n\n{\n  uint bitValue;\n  \n  if (bitPosition < 0x2d) {\n    if (bitPosition < 0x20) {\n      bitValue = 1 << (bitPosition & 0xff);\n      if ((bitValue & _DAT_400e0618) != bitValue) {\n        _DAT_400e0610 = bitValue;\n      }\n    }\n    else {\n      bitValue = 1 << (bitPosition - 0x20 & 0xff);\n      if ((bitValue & _DAT_400e0708) != bitValue) {\n        _DAT_400e0700 = bitValue;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "set_bit_in_memory_00080aa8",
                "param_1": "bitPosition",
                "uVar1": "bitValue"
            },
            "calling": [
                "FUN_00080f0c",
                "FUN_000803fc",
                "FUN_00080774",
                "FUN_000813dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b2c": {
            "entrypoint": "0x00080b2c",
            "current_name": "configure_tc_channel_00080b2c",
            "code": "\nvoid configureTcChannel_00080b2c(undefined4 param1,uint param2,char *param3)\n\n{\n  int channelOffset;\n  int channelAddress;\n  undefined8 combinedParams;\n  \n  combinedParams = CONCAT44(param2,param1);\n  if (2 < param2) {\n    param3 = \"TC_Configure\";\n    combinedParams = parse_and_process_assertion_000816f8(\"../source/tc.c\",0x40,\"TC_Configure\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  channelOffset = (int)((ulonglong)combinedParams >> 0x20) * 0x40;\n  channelAddress = (int)combinedParams + channelOffset;\n  *(undefined4 *)((int)combinedParams + channelOffset) = 2;\n  *(undefined4 *)(channelAddress + 0x28) = 0xffffffff;\n  *(char **)(channelAddress + 4) = param3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b2c": "configure_tc_channel_00080b2c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar3": "combinedParams",
                "iVar1": "channelOffset",
                "iVar2": "channelAddress"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b90": {
            "entrypoint": "0x00080b90",
            "current_name": "store_data_00080b90",
            "code": "\nvoid storeData_00080b90(int baseAddress,int index,undefined4 value)\n\n{\n  *(undefined4 *)(baseAddress + index * 0x40 + 0x14) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b90": "store_data_00080b90",
                "param_1": "baseAddress",
                "param_2": "index",
                "param_3": "value"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b98": {
            "entrypoint": "0x00080b98",
            "current_name": "initialize_memory_00080b98",
            "code": "\n\n\nvoid initializeMemory_00080b98(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  relocationTable[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b98": "initialize_memory_00080b98",
                "Elf32_Rel_ARRAY_20070000": "relocationTable"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080c20",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080c6a) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_200708a0\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_00085878 + iVar1);\n  }\n  for (puVar2 = &DAT_200708a0; puVar2 < (undefined4 *)0x20071248; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  main_loop_000815ec();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000815ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c98": {
            "entrypoint": "0x00080c98",
            "current_name": "calculate_threshold_00080c98",
            "code": "\nundefined4 calculateThreshold_00080c98(undefined4 *outputBuffer,uint inputBufferSize,int thresholdMultiplier,int timeMultiplier)\n\n{\n  uint quotient;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *outputBuffer = 1;\n  outputBuffer[1] = 0;\n  outputBuffer[0x48] = 0x202;\n  outputBuffer[0x41] = 0;\n  outputBuffer[0x45] = 0;\n  quotient = inputBufferSize / (uint)(thresholdMultiplier * 2);\n  if (inputBufferSize == thresholdMultiplier * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(timeMultiplier * (int)(((ulonglong)inputBufferSize / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      outputBuffer[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | outputBuffer[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080c98": "calculate_threshold_00080c98",
                "param_1": "outputBuffer",
                "param_2": "inputBufferSize",
                "param_3": "thresholdMultiplier",
                "param_4": "timeMultiplier",
                "local_58": "thresholds",
                "uVar1": "quotient",
                "uVar2": "index"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d30": {
            "entrypoint": "0x00080d30",
            "current_name": "update_parameter_00080d30",
            "code": "\nvoid updateParameter_00080d30(int inputAddress,uint newData,uint mask)\n\n{\n  *(uint *)(inputAddress + 4) = newData | *(uint *)(inputAddress + 4) | (mask & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d30": "update_parameter_00080d30",
                "param_1": "inputAddress",
                "param_2": "newData",
                "param_3": "mask"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d3e": {
            "entrypoint": "0x00080d3e",
            "current_name": "set_flags_and_shift_00080d3e",
            "code": "\nvoid setFlagsAndShift_00080d3e(int dataPtr,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(dataPtr + 4) =\n       value2 | *(uint *)(dataPtr + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d3e": "set_flags_and_shift_00080d3e",
                "param_1": "dataPtr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d58": {
            "entrypoint": "0x00080d58",
            "current_name": "set_bit_00080d58",
            "code": "\nvoid setBit_00080d58(int baseAddress,uint bitPosition)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d58": "set_bit_00080d58",
                "param_1": "baseAddress",
                "param_2": "bitPosition"
            },
            "calling": [
                "FUN_00080f0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d62": {
            "entrypoint": "0x00080d62",
            "current_name": "initialize_parameter_00080d62",
            "code": "\nvoid initializeParameter_00080d62(int parameter)\n\n{\n  *(undefined4 *)(parameter + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d62": "initialize_parameter_00080d62",
                "param_1": "parameter"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d6a": {
            "entrypoint": "0x00080d6a",
            "current_name": "set_parameter_00080d6a",
            "code": "\nvoid set_parameter_00080d6a(int data,undefined4 value)\n\n{\n  *(undefined4 *)(data + 0x28) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d6a": "set_parameter_00080d6a",
                "param_1": "data",
                "param_2": "value"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e80": {
            "entrypoint": "0x00080e80",
            "current_name": "initialize_00080e80",
            "code": "\nundefined4 initialize_00080e80(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080e80": "initialize_00080e80"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e88": {
            "entrypoint": "0x00080e88",
            "current_name": "add_with_previous_00080e88",
            "code": "\nint addWithPrevious_00080e88(int inputValue)\n\n{\n  int previousValue;\n  \n  if (DAT_20071208 == 0) {\n    DAT_20071208 = 0x20071248;\n  }\n  previousValue = DAT_20071208;\n  DAT_20071208 = inputValue + DAT_20071208;\n  return previousValue;\n}\n\n",
            "renaming": {
                "FUN_00080e88": "add_with_previous_00080e88",
                "param_1": "inputValue",
                "iVar1": "previousValue"
            },
            "calling": [
                "FUN_0008236c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eaa": {
            "entrypoint": "0x00080eaa",
            "current_name": "get_error_code_00080eaa",
            "code": "\nuint32_t getErrorCode_00080eaa(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080eaa": "get_error_code_00080eaa",
                "undefined4": "uint32_t"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eb0": {
            "entrypoint": "0x00080eb0",
            "current_name": "set_memory_limit_00080eb0",
            "code": "\nundefined4 setMemoryLimit_00080eb0(undefined4 param,int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080eb0": "set_memory_limit_00080eb0",
                "param_1": "param",
                "param_2": "memoryAddress"
            },
            "calling": [
                "FUN_00084494"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eba": {
            "entrypoint": "0x00080eba",
            "current_name": "get_one_00080eba",
            "code": "\nundefined4 getOne_00080eba(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080eba": "get_one_00080eba"
            },
            "calling": [
                "FUN_000844bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ebe": {
            "entrypoint": "0x00080ebe",
            "current_name": "initialize_application_00080ebe",
            "code": "\nundefined4 initializeApplication_00080ebe(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ebe": "initialize_application_00080ebe"
            },
            "calling": [
                "FUN_000844e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec2": {
            "entrypoint": "0x00080ec2",
            "current_name": "initialize_application_00080ec2",
            "code": "\nundefined4 initializeApplication_00080ec2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ec2": "initialize_application_00080ec2"
            },
            "calling": [
                "FUN_00084508"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec8": {
            "entrypoint": "0x00080ec8",
            "current_name": "copy_bytes_00080ec8",
            "code": "\n\n\nuint copyBytes_00080ec8(undefined4 param1,int sourcePtr,uint numBytes)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)numBytes; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(sourcePtr + index);\n  }\n  return numBytes & ~((int)numBytes >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_00080ec8": "copy_bytes_00080ec8",
                "param_1": "param1",
                "param_2": "sourcePtr",
                "param_3": "numBytes",
                "iVar1": "index"
            },
            "calling": [
                "FUN_00084244"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eec": {
            "entrypoint": "0x00080eec",
            "current_name": "infinite_loop_with_status_00080eec",
            "code": "\nvoid infiniteLoopWithStatus_00080eec(undefined4 exitStatus,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  execute_relocation_000817c8(\"Exiting with status %d.\\n\",exitStatus,param3,param4,param4);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080eec": "infinite_loop_with_status_00080eec",
                "param_1": "exitStatus",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_000817c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080efc": {
            "entrypoint": "0x00080efc",
            "current_name": "FUNC_00080efc",
            "code": "\nvoid FUNC_00080efc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080efc": "FUNC_00080efc"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080efe": {
            "entrypoint": "0x00080efe",
            "current_name": "get_error_code_00080efe",
            "code": "\nundefined4 get_error_code_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080efe": "get_error_code_00080efe"
            },
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_000816d8": {
            "entrypoint": "0x00080f04",
            "current_name": "get_dat_value_thunk_000816d8",
            "code": "\nundefined4 getDATValue_thunk_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "thunk_FUN_000816d8": "get_dat_value_thunk_000816d8"
            },
            "calling": [
                "FUN_000811e8"
            ],
            "called": [
                "FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f08": {
            "entrypoint": "0x00080f08",
            "current_name": "FUNC_00080f08",
            "code": "\nvoid FUNC_00080f08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f08": "FUNC_00080f08"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000815ec",
                "FUN_000801e0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080f0c": {
            "entrypoint": "0x00080f0c",
            "current_name": "update_parameter_info_00080f0c",
            "code": "\n\n\nint updateParameterInfo_00080f0c(int index,int value)\n\n{\n  int result;\n  uint temp1;\n  undefined4 temp2;\n  uint temp3;\n  byte lowerNibble;\n  byte byteVar;\n  int temp4;\n  int temp5;\n  \n  result = index;\n  if ((&DAT_00084b50)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[index] & 0xf) == 4) {\n      result = set_bit_00080d58(0x400c0000,(&DAT_00084b5d)[index * 0x1c]);\n    }\n    byteVar = (&DAT_20070e1c)[index];\n    lowerNibble = byteVar & 0xf;\n    if ((lowerNibble < 3) && (byteVar != 0)) {\n      if (lowerNibble == 2) {\n        if (value == 0) {\n          return result;\n        }\n      }\n      else if (lowerNibble == 1) {\n        if (value == 2) {\n          return result;\n        }\n      }\n      else if (lowerNibble == 3) {\n        if (value == 1) {\n          return result;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (value != 1) {\nLAB_00080f68:\n      if (value == 0) {\n        result = index * 0x1c;\n        set_bit_in_memory_00080aa8(*(undefined4 *)(&DAT_00084b4c + result));\n        result = update_parameter_info_00080a30(*(undefined4 *)(&DAT_00084b44 + result),3,\n                             *(undefined4 *)(&DAT_00084b48 + result),0);\n        byteVar = (&DAT_20070e1c)[index] & 0xf0 | 2;\n      }\n      else {\n        if (value != 2) {\n          return result;\n        }\n        result = index * 0x1c;\n        set_bit_in_memory_00080aa8(*(undefined4 *)(&DAT_00084b4c + result));\n        result = update_parameter_info_00080a30(*(undefined4 *)(&DAT_00084b44 + result),3,\n                             *(undefined4 *)(&DAT_00084b48 + result),1);\n        byteVar = (&DAT_20070e1c)[index] & 0xf0 | 1;\n      }\n      (&DAT_20070e1c)[index] = byteVar;\n      return result;\n    }\n    temp4 = index * 0x1c;\n    temp5 = *(int *)(&DAT_00084b44 + temp4);\n    if (byteVar >> 4 == 0) {\n      temp2 = 4;\n    }\n    else {\n      temp2 = 5;\n    }\n    result = update_parameter_info_00080a30(temp5,temp2,*(undefined4 *)(&DAT_00084b48 + temp4),\n                         *(undefined4 *)(&DAT_00084b54 + temp4));\n    (&DAT_20070e1c)[index] = (&DAT_20070e1c)[index] & 0xf0 | 3;\n    if (*(int *)(temp5 + 0x18) == -1) {\n      temp1 = *(uint *)(&DAT_00084b4c + temp4);\n      if (0x2c < temp1) {\n        return 1;\n      }\n      if (temp1 < 0x20) {\n        temp1 = 1 << (temp1 & 0xff);\n        temp3 = _DAT_400e0618 & temp1;\n        if (temp3 == temp1) {\n          _DAT_400e0614 = temp3;\n        }\n      }\n      else {\n        temp1 = 1 << (temp1 - 0x20 & 0xff);\n        temp3 = _DAT_400e0708 & temp1;\n        if (temp3 == temp1) {\n          _DAT_400e0704 = temp3;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080f0c": "update_parameter_info_00080f0c",
                "param_1": "index",
                "param_2": "value",
                "iVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "bVar5": "lowerNibble",
                "bVar6": "byteVar",
                "iVar7": "temp4",
                "iVar8": "temp5"
            },
            "calling": [
                "FUN_00081014",
                "FUN_000806a0",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080a30",
                "FUN_00080aa8",
                "FUN_00080d58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081014": {
            "entrypoint": "0x00081014",
            "current_name": "update_parameter_and_info_00081014",
            "code": "\nvoid updateParameterAndInfo_00081014(int index,int value,undefined4 info)\n\n{\n  int result;\n  undefined4 data;\n  int ptr;\n  \n  if ((&DAT_00084b50)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[index] & 0xf) == 5) {\n      updateParameterInfo(index,1,info,5,index,value,info);\n    }\n    (&DAT_20070e1c)[index] = (&DAT_20070e1c)[index] & 0xf | (byte)(value << 4);\n    ptr = *(int *)(&DAT_00084b44 + index * 0x1c);\n    data = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n    result = checkBitwiseAnd(ptr,data);\n    if (result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(ptr + 100) = data;\n        return;\n      }\n      *(undefined4 *)(ptr + 0x60) = data;\n      return;\n    }\n    setParameters(ptr,data,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081014": "update_parameter_and_info_00081014",
                "param_1": "index",
                "param_2": "value",
                "param_3": "info",
                "iVar1": "result",
                "uVar2": "data",
                "iVar3": "ptr",
                "update_parameter_info_00080f0c": "updateParameterInfo",
                "check_bitwise_and_00080a94": "checkBitwiseAnd",
                "set_parameters_00080a0a": "setParameters"
            },
            "calling": [
                "FUN_00080774",
                "FUN_0008044c",
                "FUN_00080250"
            ],
            "called": [
                "FUN_00080f0c",
                "FUN_00080a94",
                "FUN_00080a0a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810a6": {
            "entrypoint": "0x000810a6",
            "current_name": "process_integer_000810a6",
            "code": "\nvoid processInteger_000810a6(int *integerList,int inputNumber,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 trailingZerosCount;\n  \n  if (inputNumber != 0) {\n    trailingZerosCount = count_trailing_zeros_00082688(inputNumber);\n    (**(code **)(*integerList + 4))(integerList,inputNumber,trailingZerosCount,*(code **)(*integerList + 4),value2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810a6": "process_integer_000810a6",
                "param_1": "integerList",
                "param_2": "inputNumber",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "trailingZerosCount"
            },
            "calling": [
                "FUN_000810e8",
                "FUN_000810c4",
                "FUN_000810fc",
                "FUN_000810d8"
            ],
            "called": [
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810c4": {
            "entrypoint": "0x000810c4",
            "current_name": "initialize_process_000810c4",
            "code": "\nvoid initializeProcess_000810c4(void)\n\n{\n  processInteger();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810c4": "initialize_process_000810c4",
                "process_integer_000810a6": "processInteger"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810cc": {
            "entrypoint": "0x000810cc",
            "current_name": "execute_code_000810cc",
            "code": "\nvoid executeCode_000810cc(undefined4 *functionPointer)\n\n{\n  (**(code **)*functionPointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810cc": "execute_code_000810cc",
                "param_1": "functionPointer"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810d8": {
            "entrypoint": "0x000810d8",
            "current_name": "process_integer_000810d8",
            "code": "\nvoid process_integer_000810d8(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  process_integer_000810d8_000810a6(input_1,&DAT_00085635,input_3,input_4,input_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810d8": "process_integer_000810d8",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_000810e8",
                "FUN_0008117a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810e8": {
            "entrypoint": "0x000810e8",
            "current_name": "calculate_sum_000810e8",
            "code": "\nint calculateSum_000810e8(undefined4 input)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = process_integer_000810a6();\n  result2 = process_integer_000810d8(input);\n  return result2 + result1;\n}\n\n",
            "renaming": {
                "FUN_000810e8": "calculate_sum_000810e8",
                "param_1": "input",
                "iVar1": "result1",
                "iVar2": "result2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810fc": {
            "entrypoint": "0x000810fc",
            "current_name": "convert_to_base_000810fc",
            "code": "\nvoid convertToBase_000810fc(undefined4 baseValue,uint inputNumber,uint base)\n\n{\n  char *convertedNumber;\n  uint quotient;\n  char *currentDigit;\n  char charValue;\n  uint remainder;\n  char baseConversion [5];\n  \n  baseConversion[1] = 0;\n  if (base < 2) {\n    base = 10;\n  }\n  convertedNumber = baseConversion;\n  do {\n    currentDigit = convertedNumber;\n    quotient = inputNumber / base;\n    remainder = inputNumber - base * quotient & 0xff;\n    charValue = (char)remainder;\n    if (remainder < 10) {\n      charValue = charValue + '0';\n    }\n    else {\n      charValue = charValue + '7';\n    }\n    *currentDigit = charValue;\n    inputNumber = quotient;\n    convertedNumber = currentDigit + -1;\n  } while (quotient != 0);\n  process_integer_000810a6(baseValue,currentDigit);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810fc": "convert_to_base_000810fc",
                "param_1": "baseValue",
                "param_2": "inputNumber",
                "param_3": "base",
                "pcVar1": "convertedNumber",
                "uVar2": "quotient",
                "pcVar3": "currentDigit",
                "cVar4": "charValue",
                "uVar5": "remainder",
                "local_15": "baseConversion"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008113a": {
            "entrypoint": "0x0008113a",
            "current_name": "convert_to_base_0008113a",
            "code": "\nint convertToBase_0008113a(undefined4 *inputArray,uint value,uint base,undefined4 param_4)\n\n{\n  int result;\n  int negativeValue;\n  \n  if (base == 0) {\n    result = (**(code **)*inputArray)(inputArray,value & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)value < 0) {\n      result = execute_code_000810cc(inputArray,0x2d);\n      negativeValue = convert_to_base_000810fc(inputArray,-value,10);\n      return negativeValue + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = convert_to_base_000810fc(inputArray,value,base,param_4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008113a": "convert_to_base_0008113a",
                "param_1": "inputArray",
                "param_2": "value",
                "param_3": "base",
                "iVar1": "result",
                "iVar2": "negativeValue"
            },
            "calling": [
                "thunk_FUN_0008113a",
                "FUN_0008117a"
            ],
            "called": [
                "FUN_000810fc",
                "FUN_000810cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0008113a": {
            "entrypoint": "0x00081176",
            "current_name": "convert_to_base_or_execute_thunk_0008113a",
            "code": "\nint convert_to_base_or_execute_thunk_0008113a(undefined4 *data_ptr,uint input_data,uint output_base,undefined4 extra_param)\n\n{\n  int result;\n  int conversion_result;\n  \n  if (output_base == 0) {\n    result = (**(code **)*data_ptr)(data_ptr,input_data & 0xff);\n    return result;\n  }\n  if (output_base == 10) {\n    output_base = 10;\n    if ((int)input_data < 0) {\n      result = execute_code_000810cc(data_ptr,0x2d);\n      conversion_result = convert_to_base_000810fc(data_ptr,-input_data,10);\n      return conversion_result + result;\n    }\n  }\n  else {\n    output_base = output_base & 0xff;\n  }\n  result = convert_to_base_000810fc(data_ptr,input_data,output_base,extra_param);\n  return result;\n}\n\n",
            "renaming": {
                "thunk_FUN_0008113a": "convert_to_base_or_execute_thunk_0008113a",
                "param_1": "data_ptr",
                "param_2": "input_data",
                "param_3": "output_base",
                "param_4": "extra_param",
                "iVar1": "result",
                "iVar2": "conversion_result"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008117a": {
            "entrypoint": "0x0008117a",
            "current_name": "calculate_sum_0008117a",
            "code": "\nint calculate_sum_0008117a(undefined4 input_value)\n\n{\n  int base_conversion_result;\n  int processed_input;\n  \n  base_conversion_result = convert_to_base();\n  processed_input = process_input(input_value);\n  return processed_input + base_conversion_result;\n}\n\n",
            "renaming": {
                "FUN_0008117a": "calculate_sum_0008117a",
                "param_1": "input_value",
                "iVar1": "base_conversion_result",
                "iVar2": "processed_input",
                "convert_to_base_0008113a": "convert_to_base",
                "process_integer_000810d8": "process_input"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081190": {
            "entrypoint": "0x00081190",
            "current_name": "execute_if_relocation_index_matches_00081190",
            "code": "\nvoid executeIfRelocationIndexMatches_00081190(void)\n\n{\n  if ((Elf32_Rel_ARRAY_20070000[6].relocationInfo != 0xffffffff) &&\n     (Elf32_Rel_ARRAY_20070000[6].relocationInfo = Elf32_Rel_ARRAY_20070000[6].relocationInfo - 1,\n     Elf32_Rel_ARRAY_20070000[6].relocationInfo == 0)) {\n    (*(code *)((int)&Elf32_Rel_ARRAY_20070000[0].relocationOffset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081190": "execute_if_relocation_index_matches_00081190",
                "r_info": "relocationInfo",
                "r_offset": "relocationOffset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b0": {
            "entrypoint": "0x000811b0",
            "current_name": "initialize_param_000811b0",
            "code": "\nint initializeParam_000811b0(int param)\n\n{\n  improve_and_expand_00081f00(param,0,0x80);\n  *(undefined4 *)(param + 0x80) = 0;\n  *(undefined4 *)(param + 0x84) = 0;\n  return param;\n}\n\n",
            "renaming": {
                "FUN_000811b0": "initialize_param_000811b0",
                "param_1": "param"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ca": {
            "entrypoint": "0x000811ca",
            "current_name": "update_buffer_000811ca",
            "code": "\nvoid updateBuffer_000811ca(int buffer,undefined data)\n\n{\n  uint newIndex;\n  \n  newIndex = *(int *)(buffer + 0x80) + 1U & 0x7f;\n  if (newIndex != *(uint *)(buffer + 0x84)) {\n    *(undefined *)(buffer + *(int *)(buffer + 0x80)) = data;\n    *(uint *)(buffer + 0x80) = newIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000811ca": "update_buffer_000811ca",
                "param_1": "buffer",
                "param_2": "data",
                "uVar1": "newIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811e8": {
            "entrypoint": "0x000811e8",
            "current_name": "check_and_update_data_value_000811e8",
            "code": "\nint check_and_update_data_value_000811e8(int *data_array)\n\n{\n  int current_value;\n  \n  current_value = get_current_data_value();\n  data_array[3] = current_value;\n  do {\n    current_value = (**(function_pointer **)(*data_array + 0xc))(data_array);\n    if (-1 < current_value) {\n      return current_value;\n    }\n    current_value = get_current_data_value();\n  } while ((uint)(current_value - data_array[3]) < (uint)data_array[2]);\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_000811e8": "check_and_update_data_value_000811e8",
                "param_1": "data_array",
                "iVar1": "current_value",
                "get_dat_value_thunk_000816d8": "get_current_data_value",
                "code": "function_pointer"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "thunk_FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081214": {
            "entrypoint": "0x00081214",
            "current_name": "process_data_00081214",
            "code": "\nvoid processData_00081214(undefined4 input1,undefined4 input2,uint targetValue)\n\n{\n  uint dataValue;\n  \n  parseAndCopyString(input1,&DAT_00085637);\n  while ((dataValue = checkAndUpdateDataValue(input2), -1 < (int)dataValue && (dataValue != targetValue))) {\n    resolveAndCopySymbols(input1,dataValue & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081214": "process_data_00081214",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "targetValue",
                "uVar1": "dataValue",
                "parse_and_copy_string_000814f6": "parseAndCopyString",
                "check_and_update_data_value_000811e8": "checkAndUpdateDataValue",
                "resolve_and_copy_symbols_0008159e": "resolveAndCopySymbols"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000811e8",
                "FUN_000814f6",
                "FUN_0008159e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081248": {
            "entrypoint": "0x00081248",
            "current_name": "calculate_difference_00081248",
            "code": "\nuint calculate_difference_00081248(int input)\n\n{\n  return *(int *)(*(int *)(input + 0x10) + 0x80) - *(int *)(*(int *)(input + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_00081248": "calculate_difference_00081248",
                "param_1": "input"
            },
            "calling": [
                "FUN_00080250",
                "FUN_00080970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081276": {
            "entrypoint": "0x00081276",
            "current_name": "extract_data_00081276",
            "code": "\nuint extract_data_00081276(int data_address)\n\n{\n  byte extracted_byte;\n  int data_pointer;\n  \n  data_pointer = *(int *)(data_address + 0x10);\n  if (*(int *)(data_pointer + 0x80) != *(int *)(data_pointer + 0x84)) {\n    extracted_byte = *(byte *)(data_pointer + *(int *)(data_pointer + 0x84));\n    *(uint *)(data_pointer + 0x84) = *(int *)(data_pointer + 0x84) + 1U & 0x7f;\n    return (uint)extracted_byte;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081276": "extract_data_00081276",
                "param_1": "data_address",
                "bVar1": "extracted_byte",
                "iVar2": "data_pointer"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000812b8": {
            "entrypoint": "0x000812b8",
            "current_name": "update_data_000812b8",
            "code": "\nundefined4 updateData_000812b8(int dataPtr,undefined4 newValue)\n\n{\n  int nestedPtr;\n  uint updatedValue;\n  \n  nestedPtr = *(int *)(dataPtr + 0x14);\n  if ((*(int *)(*(int *)(dataPtr + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(nestedPtr + 0x84) == *(int *)(nestedPtr + 0x80))) {\n    *(undefined4 *)(*(int *)(dataPtr + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    updatedValue = *(int *)(nestedPtr + 0x80) + 1U & 0x8000007f;\n    if ((int)updatedValue < 0) {\n      updatedValue = (updatedValue - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(nestedPtr + 0x84) == updatedValue);\n    *(char *)(nestedPtr + *(int *)(nestedPtr + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataPtr + 0x14) + 0x80) = updatedValue;\n    *(undefined4 *)(*(int *)(dataPtr + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000812b8": "update_data_000812b8",
                "param_1": "dataPtr",
                "param_2": "newValue",
                "iVar1": "nestedPtr",
                "uVar2": "updatedValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081348": {
            "entrypoint": "0x00081348",
            "current_name": "initialize_params_00081348",
            "code": "\nvoid initializeParams_00081348(undefined4 *params,undefined4 value1,undefined value2,undefined4 value3,\n                 undefined4 value4,undefined4 value5)\n\n{\n  params[1] = 0;\n  params[2] = 1000;\n  params[6] = value1;\n  *params = &PTR_FUN_000812b8_1_00085650;\n  *(undefined *)(params + 7) = value2;\n  params[4] = value4;\n  params[8] = value3;\n  params[5] = value5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081348": "initialize_params_00081348",
                "param_1": "params",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4",
                "param_6": "value5"
            },
            "calling": [
                "FUN_0008089c",
                "FUN_00081438"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813dc": {
            "entrypoint": "0x000813dc",
            "current_name": "initialize_memory_000813dc",
            "code": "\nvoid initializeMemory_000813dc(int memoryPointer,uint divisionFactor)\n\n{\n  int tempVar1;\n  undefined4 *pointerVar;\n  \n  set_bit_in_memory_00080aa8(*(undefined4 *)(memoryPointer + 0x20));\n  pointerVar = *(undefined4 **)(memoryPointer + 0x18);\n  pointerVar[0x48] = 0x202;\n  *pointerVar = 0xac;\n  pointerVar[1] = 0x800;\n  pointerVar[8] = replacementArray[6].offsetValue / divisionFactor >> 4;\n  pointerVar[3] = 0xffffffff;\n  pointerVar[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(memoryPointer + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(memoryPointer + 0x1c) & 0x1f);\n  tempVar1 = *(int *)(memoryPointer + 0x10);\n  *(undefined4 *)(tempVar1 + 0x84) = 0;\n  *(undefined4 *)(tempVar1 + 0x80) = 0;\n  tempVar1 = *(int *)(memoryPointer + 0x14);\n  *(undefined4 *)(tempVar1 + 0x84) = 0;\n  *(undefined4 *)(tempVar1 + 0x80) = 0;\n  *pointerVar = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813dc": "initialize_memory_000813dc",
                "param_1": "memoryPointer",
                "param_2": "divisionFactor",
                "iVar1": "tempVar1",
                "puVar2": "pointerVar",
                "Elf32_Rel_ARRAY_20070000": "replacementArray",
                "r_offset": "offsetValue"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080aa8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081438": {
            "entrypoint": "0x00081438",
            "current_name": "initialize_and_set_params_00081438",
            "code": "\nundefined4 * initializeAndSetParams_00081438(undefined4 *outputParams,undefined4 inputParam)\n\n{\n  initializeParams();\n  *outputParams = &PTR_update_data_000812b8_1_00085680;\n  outputParams[9] = inputParam;\n  return outputParams;\n}\n\n",
            "renaming": {
                "FUN_00081438": "initialize_and_set_params_00081438",
                "param_1": "outputParams",
                "param_2": "inputParam",
                "initialize_params_00081348": "initializeParams"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008145c": {
            "entrypoint": "0x0008145c",
            "current_name": "calculate_interpolation_0008145c",
            "code": "\nint calculateInterpolation_0008145c(int startValue1,int startValue2,int endValue1,int startResult,int endResult)\n\n{\n  return (uint)((startValue1 - startValue2) * (endResult - startResult)) / (uint)(endValue1 - startValue2) + startResult;\n}\n\n",
            "renaming": {
                "FUN_0008145c": "calculate_interpolation_0008145c",
                "param_1": "startValue1",
                "param_2": "startValue2",
                "param_3": "endValue1",
                "param_4": "startResult",
                "param_5": "endResult"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081472": {
            "entrypoint": "0x00081472",
            "current_name": "process_and_return_param_00081472",
            "code": "\nundefined4 * process_and_return_param_00081472(undefined4 *original_param)\n\n{\n  process_elf_relocations_00081800(*original_param);\n  return original_param;\n}\n\n",
            "renaming": {
                "FUN_00081472": "process_and_return_param_00081472",
                "param_1": "original_param"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081480": {
            "entrypoint": "0x00081480",
            "current_name": "reset_params_00081480",
            "code": "\nvoid resetParams_00081480(int *parameters)\n\n{\n  if (*parameters != 0) {\n    process_elf_relocations_00081800();\n  }\n  *parameters = 0;\n  parameters[2] = 0;\n  parameters[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081480": "reset_params_00081480",
                "param_1": "parameters",
                "param_1[2]": "parameters[2]",
                "param_1[1]": "parameters[1]"
            },
            "calling": [
                "FUN_000814d0"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081496": {
            "entrypoint": "0x00081496",
            "current_name": "relocate_and_resolve_symbols_00081496",
            "code": "\nint relocateAndResolveSymbols_00081496(int *pointer,int size,undefined4 arg1,undefined4 arg2)\n\n{\n  int result;\n  \n  result = relocate_and_resolve_symbols_00081f9c(*pointer,size + 1,arg1,arg2,arg2);\n  if (result != 0) {\n    *pointer = result;\n    pointer[1] = size;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081496": "relocate_and_resolve_symbols_00081496",
                "param_1": "pointer",
                "param_2": "size",
                "param_3": "arg1",
                "param_4": "arg2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000814ae"
            ],
            "called": [
                "FUN_00081f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814ae": {
            "entrypoint": "0x000814ae",
            "current_name": "check_and_resolve_symbols_000814ae",
            "code": "\nundefined4 checkAndResolveSymbols_000814ae(int *pointer,uint size)\n\n{\n  int result;\n  \n  if ((*pointer == 0) || ((uint)pointer[1] < size)) {\n    result = relocate_and_resolve_symbols_00081496(pointer);\n    if (result == 0) {\n      return 0;\n    }\n    if (pointer[2] == 0) {\n      *(undefined *)*pointer = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000814ae": "check_and_resolve_symbols_000814ae",
                "param_1": "pointer",
                "param_2": "size",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "called": [
                "FUN_00081496"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814d0": {
            "entrypoint": "0x000814d0",
            "current_name": "resolve_symbols_and_copy_string_000814d0",
            "code": "\nundefined4 * resolveSymbolsAndCopyString_000814d0(undefined4 *resultArray,undefined4 sourceString,undefined4 symbol)\n\n{\n  int symbolCheckResult;\n  \n  symbolCheckResult = check_and_resolve_symbols_000814ae(resultArray,symbol);\n  if (symbolCheckResult == 0) {\n    reset_params_00081480(resultArray);\n  }\n  else {\n    resultArray[2] = symbol;\n    copy_string_000825cc(*resultArray,sourceString);\n  }\n  return resultArray;\n}\n\n",
            "renaming": {
                "FUN_000814d0": "resolve_symbols_and_copy_string_000814d0",
                "param_1": "resultArray",
                "param_2": "sourceString",
                "param_3": "symbol",
                "iVar1": "symbolCheckResult"
            },
            "calling": [
                "FUN_000814f6"
            ],
            "called": [
                "FUN_00081480",
                "FUN_000825cc",
                "FUN_000814ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814f6": {
            "entrypoint": "0x000814f6",
            "current_name": "parse_and_copy_string_000814f6",
            "code": "\nundefined4 * parseAndCopyString_000814f6(undefined4 *outputArray,int inputValue)\n\n{\n  undefined4 trailingZerosCount;\n  \n  *outputArray = 0;\n  outputArray[1] = 0;\n  outputArray[2] = 0;\n  if (inputValue != 0) {\n    trailingZerosCount = count_trailing_zeros_00082688(inputValue);\n    resolve_symbols_and_copy_string_000814d0(outputArray,inputValue,trailingZerosCount);\n  }\n  return outputArray;\n}\n\n",
            "renaming": {
                "FUN_000814f6": "parse_and_copy_string_000814f6",
                "param_1": "outputArray",
                "param_2": "inputValue",
                "uVar1": "trailingZerosCount"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_000814d0",
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008151c": {
            "entrypoint": "0x0008151c",
            "current_name": "update_param_0008151c",
            "code": "\nvoid updateParam_0008151c(int *sourceParam,int *targetParam)\n\n{\n  if (*sourceParam != 0) {\n    if ((*targetParam != 0) && ((uint)targetParam[2] <= (uint)sourceParam[1])) {\n      copyString();\n      sourceParam[2] = targetParam[2];\n      goto LAB_00081558;\n    }\n    processElfRelocations();\n  }\n  *sourceParam = *targetParam;\n  sourceParam[1] = targetParam[1];\n  sourceParam[2] = targetParam[2];\n  *targetParam = 0;\n  targetParam[1] = 0;\nLAB_00081558:\n  targetParam[2] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008151c": "update_param_0008151c",
                "param_1": "sourceParam",
                "param_2": "targetParam",
                "copy_string_000825cc": "copyString",
                "process_elf_relocations_00081800": "processElfRelocations"
            },
            "calling": [
                "FUN_00081560"
            ],
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081560": {
            "entrypoint": "0x00081560",
            "current_name": "check_and_update_param_00081560",
            "code": "\nint checkAndUpdateParam_00081560(int inputParam,int comparisonParam)\n\n{\n  if (inputParam != comparisonParam) {\n    update_param_0008151c();\n  }\n  return inputParam;\n}\n\n",
            "renaming": {
                "FUN_00081560": "check_and_update_param_00081560",
                "param_1": "inputParam",
                "param_2": "comparisonParam"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008151c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081570": {
            "entrypoint": "0x00081570",
            "current_name": "resolve_and_copy_symbols_00081570",
            "code": "\nundefined4 resolveAndCopySymbols_00081570(int *symbolTable,int length,int offset)\n\n{\n  int symbolCheckResult;\n  int symbolTableIndex;\n  \n  symbolTableIndex = symbolTable[2];\n  if (length == 0) {\n    return 0;\n  }\n  if (offset != 0) {\n    symbolCheckResult = check_and_resolve_symbols_000814ae(symbolTable,symbolTableIndex + offset);\n    if (symbolCheckResult == 0) {\n      return 0;\n    }\n    copy_string_000825cc(*symbolTable + symbolTable[2],length);\n    symbolTable[2] = symbolTableIndex + offset;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081570": "resolve_and_copy_symbols_00081570",
                "param_1": "symbolTable",
                "param_2": "length",
                "param_3": "offset",
                "iVar1": "symbolCheckResult",
                "iVar2": "symbolTableIndex"
            },
            "calling": [
                "FUN_0008159e"
            ],
            "called": [
                "FUN_000825cc",
                "FUN_000814ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008159e": {
            "entrypoint": "0x0008159e",
            "current_name": "resolve_and_copy_symbols_0008159e",
            "code": "\nvoid resolve_and_copy_symbols_0008159e(undefined4 source,undefined4 destination,undefined4 value)\n\n{\n  undefined4 result;\n  undefined4 param_3;\n  \n  param_3 = value;\n  resolve_and_copy_symbols_0008159e_00081570(source,&result,1,0,source);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008159e": "resolve_and_copy_symbols_0008159e",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "value",
                "local_c": "result",
                "uStack_8": "param_3"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_00081570"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815b8": {
            "entrypoint": "0x000815b8",
            "current_name": "check_array_element_000815b8",
            "code": "\nint check_array_element_000815b8(byte **array_ptr,byte *element_ptr)\n\n{\n  uint array_comparison_result;\n  int is_element_valid;\n  \n  if (array_ptr[2] == (byte *)0x0) {\n    if (element_ptr == (byte *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    if (element_ptr != (byte *)0x0) {\n      array_comparison_result = compare_arrays_00082390(*array_ptr);\n      goto LAB_000815d4;\n    }\n    element_ptr = *array_ptr;\n  }\n  array_comparison_result = (uint)*element_ptr;\nLAB_000815d4:\n  is_element_valid = 1 - array_comparison_result;\n  if (1 < array_comparison_result) {\n    is_element_valid = 0;\n  }\n  return is_element_valid;\n}\n\n",
            "renaming": {
                "FUN_000815b8": "check_array_element_000815b8",
                "param_1": "array_ptr",
                "param_2": "element_ptr",
                "uVar1": "array_comparison_result",
                "iVar2": "is_element_valid"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00082390"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815de": {
            "entrypoint": "0x000815de",
            "current_name": "parse_integer_from_string_000815de",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000827e8) */\n/* WARNING: Removing unreachable block (ram,0x000827a8) */\n/* WARNING: Removing unreachable block (ram,0x000827a0) */\n/* WARNING: Removing unreachable block (ram,0x000827da) */\n/* WARNING: Removing unreachable block (ram,0x000827ec) */\n/* WARNING: Removing unreachable block (ram,0x000827e4) */\n/* WARNING: Removing unreachable block (ram,0x000827a4) */\n/* WARNING: Removing unreachable block (ram,0x0008278a) */\n/* WARNING: Removing unreachable block (ram,0x000827c8) */\n/* WARNING: Removing unreachable block (ram,0x0008278c) */\n\nuint parseIntegerFromString_000815de(byte **stringPtr)\n\n{\n  byte currentByte;\n  byte isNegative;\n  uint result;\n  byte *currentPtr;\n  uint currentValue;\n  byte *nextPtr;\n  int tempValue;\n  int isValueSet;\n  uint maxDivisor;\n  uint minDivisor;\n  \n  currentPtr = *stringPtr;\n  if (*stringPtr == (byte *)0x0) {\n    return 0;\n  }\n  do {\n    nextPtr = currentPtr;\n    currentPtr = nextPtr + 1;\n    currentValue = (uint)*nextPtr;\n    currentByte = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + currentValue + 1);\n    isNegative = currentByte & 8;\n  } while ((currentByte & 8) != 0);\n  if (currentValue == 0x2d) {\n    currentPtr = nextPtr + 2;\n    currentValue = (uint)nextPtr[1];\n    isNegative = 1;\n  }\n  else if (currentValue == 0x2b) {\n    currentValue = (uint)nextPtr[1];\n    currentPtr = nextPtr + 2;\n  }\n  if (isNegative == 0) {\n    minDivisor = 0x7fffffff;\n  }\n  else {\n    minDivisor = 0x80000000;\n  }\n  maxDivisor = minDivisor / 10;\n  isValueSet = 0;\n  result = 0;\n  do {\n    currentByte = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + currentValue + 1);\n    if ((currentByte & 4) == 0) {\n      if ((currentByte & 3) == 0) {\nLAB_0008277e:\n        if (isValueSet == -1) {\n          if (isNegative == 0) {\n            result = 0x7fffffff;\n          }\n          else {\n            result = 0x80000000;\n          }\n          *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x22;\n        }\n        else if (isNegative != 0) {\n          result = -result;\n        }\n        return result;\n      }\n      if ((currentByte & 3) == 1) {\n        tempValue = 0x37;\n      }\n      else {\n        tempValue = 0x57;\n      }\n      tempValue = currentValue - tempValue;\n    }\n    else {\n      tempValue = currentValue - 0x30;\n    }\n    if (9 < tempValue) goto LAB_0008277e;\n    if (isValueSet != -1) {\n      if ((maxDivisor <= result && result != maxDivisor) || ((result == maxDivisor && ((int)(minDivisor % 10) < tempValue))))\n      {\n        isValueSet = -1;\n      }\n      else {\n        result = result * 10 + tempValue;\n        isValueSet = 1;\n      }\n    }\n    currentValue = (uint)*currentPtr;\n    currentPtr = currentPtr + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815de": "parse_integer_from_string_000815de",
                "param_1": "stringPtr",
                "bVar1": "currentByte",
                "bVar2": "isNegative",
                "uVar3": "result",
                "pbVar4": "currentPtr",
                "uVar5": "currentValue",
                "pbVar6": "nextPtr",
                "iVar7": "tempValue",
                "iVar8": "isValueSet",
                "uVar9": "maxDivisor",
                "uVar10": "minDivisor"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815e8": {
            "entrypoint": "0x000815e8",
            "current_name": "FUNC_000815e8",
            "code": "\nvoid FUNC_000815e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000815e8": "FUNC_000815e8"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000815ec": {
            "entrypoint": "0x000815ec",
            "current_name": "main_loop_000815ec",
            "code": "\nvoid mainLoop_000815ec(void)\n\n{\n  initializeMemoryAddresses();\n  initializeSystem();\n  FUNC_000815e8();\n  FUNC_00080f08(1);\n  initializeAndCalculate();\n  do {\n    controlSystem();\n    checkAndExecuteOperations();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815ec": "main_loop_000815ec",
                "initialize_memory_address_00081618": "initializeMemoryAddresses",
                "initialize_system_00080774": "initializeSystem",
                "initialize_and_calculate_000801e0": "initializeAndCalculate",
                "control_system_00080250": "controlSystem",
                "check_and_execute_operations_00080970": "checkAndExecuteOperations"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_000815e8",
                "FUN_00080774",
                "FUN_00080250",
                "FUN_00080970",
                "FUN_00081618",
                "FUN_00080f08",
                "FUN_000801e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081618": {
            "entrypoint": "0x00081618",
            "current_name": "initialize_memory_address_00081618",
            "code": "\n\n\nvoid initializeMemoryAddress_00081618(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081618": "initialize_memory_address_00081618"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081624": {
            "entrypoint": "0x00081624",
            "current_name": "calculate_result_00081624",
            "code": "\nint calculate_result_00081624(int index,int flag,int multiplier,undefined4 constant)\n\n{\n  int result;\n  undefined4 offset;\n  \n  offset = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n  if (flag == 0) {\n    offset = 0;\n  }\n  result = check_bit_pattern_00081684(*(int *)(&DAT_00084b44 + index * 0x1c) + 0x3c,\n                       *(undefined4 *)(&DAT_00084b48 + index * 0x1c),offset,\n                       ((relocation_array[6].r_offset / 1000000) * multiplier) / 0x12,constant);\n  if (result != 0) {\n    result = (int)((ulonglong)(result * 18000 + 16000) /\n                 ((ulonglong)relocation_array[6].r_offset / 1000));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081624": "calculate_result_00081624",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "multiplier",
                "param_4": "constant",
                "iVar1": "result",
                "uVar2": "offset",
                "Elf32_Rel_ARRAY_20070000": "relocation_array"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081684"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081684": {
            "entrypoint": "0x00081684",
            "current_name": "check_bit_pattern_00081684",
            "code": "\nint check_bit_pattern_00081684(uint *input_array,uint bit_mask,uint expected_pattern,int max_iterations)\n\n{\n  int match_count;\n  \n  do {\n    if ((*input_array & bit_mask) != expected_pattern) {\n      do {\n        if ((*input_array & bit_mask) == expected_pattern) {\n          match_count = 0;\n          do {\n            if ((*input_array & bit_mask) != expected_pattern) {\n              return match_count;\n            }\n            match_count = match_count + 1;\n          } while (max_iterations != match_count);\n          return 0;\n        }\n        max_iterations = max_iterations + -1;\n      } while (max_iterations != 0);\n      return 0;\n    }\n    max_iterations = max_iterations + -1;\n  } while (max_iterations != 0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081684": "check_bit_pattern_00081684",
                "param_1": "input_array",
                "param_2": "bit_mask",
                "param_3": "expected_pattern",
                "param_4": "max_iterations",
                "iVar1": "match_count"
            },
            "calling": [
                "FUN_00081624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d8": {
            "entrypoint": "0x000816d8",
            "current_name": "get_data_value_000816d8",
            "code": "\nundefined4 get_data_value_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "FUN_000816d8": "get_data_value_000816d8"
            },
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816ec": {
            "entrypoint": "0x000816ec",
            "current_name": "update_relocation_entry_000816ec",
            "code": "\nvoid updateRelocationEntry_000816ec(dword newRelOffset,dword newParam2,dword newParam3)\n\n{\n  dword *relocationEntry;\n  uint index;\n  uint bitMask;\n  code *unrecoveredJumptable;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  relocationEntry = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)index) {\n    relocationEntry = (dword *)relocate_and_resolve_symbols_000817f0(400);\n    if (relocationEntry == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*unrecoveredJumptable)(0xffffffff);\n      return;\n    }\n    *relocationEntry = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    relocationEntry[1] = 0;\n    index = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)relocationEntry;\n    relocationEntry[0x62] = 0;\n    relocationEntry[99] = 0;\n  }\n  bitMask = 1 << (index & 0xff);\n  relocationEntry[index + 0x22] = newRelOffset;\n  relocationEntry[0x62] = relocationEntry[0x62] | bitMask;\n  relocationEntry[index + 0x42] = newParam3;\n  relocationEntry[99] = bitMask | relocationEntry[99];\n  relocationEntry[1] = index + 1;\n  relocationEntry[index + 2] = newParam2;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*unrecoveredJumptable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816ec": "update_relocation_entry_000816ec",
                "param_1": "newRelOffset",
                "param_2": "newParam2",
                "param_3": "newParam3",
                "pdVar1": "relocationEntry",
                "uVar2": "index",
                "uVar3": "bitMask",
                "UNRECOVERED_JUMPTABLE_00": "unrecoveredJumptable"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816f8": {
            "entrypoint": "0x000816f8",
            "current_name": "parse_and_process_assertion_000816f8",
            "code": "\nvoid parseAndProcessAssertion_000816f8(undefined4 fileName,undefined4 lineNumber,char *assertion,undefined4 function)\n\n{\n  undefined4 fileOffset;\n  undefined4 currentFunction;\n  char *extraText;\n  undefined8 executionResult;\n  \n  fileOffset = *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0xc);\n  if (assertion == (char *)0x0) goto LAB_0008171c;\n  currentFunction = function;\n  extraText = \", function: \";\n  do {\n    function = fileName;\n    process_data_00081750(fileOffset,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",currentFunction,fileName,lineNumber,\n                 extraText,assertion);\n    executionResult = execute_and_handle_infinite_loop_000836ec();\n    lineNumber = (undefined4)((ulonglong)executionResult >> 0x20);\n    fileOffset = (undefined4)executionResult;\nLAB_0008171c:\n    assertion = \"\";\n    currentFunction = function;\n    extraText = assertion;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816f8": "parse_and_process_assertion_000816f8",
                "param_1": "fileName",
                "param_2": "lineNumber",
                "param_3": "assertion",
                "param_4": "function",
                "uVar1": "fileOffset",
                "uVar2": "currentFunction",
                "pcVar3": "extraText",
                "uVar4": "executionResult"
            },
            "calling": [
                "FUN_000803fc",
                "FUN_00080b2c"
            ],
            "called": [
                "FUN_000836ec",
                "FUN_00081750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081750": {
            "entrypoint": "0x00081750",
            "current_name": "process_data_00081750",
            "code": "\nvoid processData_00081750(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 stackParam1;\n  undefined4 stackParam2;\n  \n  stackParam1 = param3;\n  stackParam2 = param4;\n  process_and_format_data_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,param1,param2,&stackParam1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081750": "process_data_00081750",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uStack_8": "stackParam1",
                "uStack_4": "stackParam2"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_00081750(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  FUNC_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,param_1,param_2,&uStack_8);\n  return;\n}\n\n"
        },
        "FUN_00081778": {
            "entrypoint": "0x00081778",
            "current_name": "execute_function_sequence_00081778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081784) */\n/* WARNING: Removing unreachable block (ram,0x00081788) */\n/* WARNING: Removing unreachable block (ram,0x000817b4) */\n\nvoid executeFunctionSequence_00081778(void)\n\n{\n  int iterationCount;\n  code **functionPointerArray;\n  \n  FUNC_00085844();\n  functionPointerArray = (code **)0x8584c;\n  iterationCount = 0;\n  do {\n    iterationCount = iterationCount + 1;\n    functionPointerArray = functionPointerArray + 1;\n    (**functionPointerArray)();\n  } while (iterationCount != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081778": "execute_function_sequence_00081778",
                "iVar1": "iterationCount",
                "ppcVar2": "functionPointerArray"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [
                "FUN_000836d8",
                "FUN_00080118",
                "FUN_00085844"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817c8": {
            "entrypoint": "0x000817c8",
            "current_name": "execute_relocation_000817c8",
            "code": "\nvoid executeRelocation_000817c8(undefined4 baseAddress,undefined4 relOffset,undefined4 relEntry,undefined4 relEntrySize)\n\n{\n  undefined4 relOffsetCopy;\n  undefined4 relEntryCopy;\n  undefined4 relEntrySizeCopy;\n  \n  relOffsetCopy = relOffset;\n  relEntryCopy = relEntry;\n  relEntrySizeCopy = relEntrySize;\n  process_and_format_data_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,\n               *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 8),baseAddress,&relOffsetCopy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817c8": "execute_relocation_000817c8",
                "param_1": "baseAddress",
                "param_2": "relOffset",
                "param_3": "relEntry",
                "param_4": "relEntrySize",
                "uStack_c": "relOffsetCopy",
                "uStack_8": "relEntryCopy",
                "uStack_4": "relEntrySizeCopy"
            },
            "calling": [
                "FUN_00080eec"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_000817c8(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  FUNC_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,\n               *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 8),param_1,&uStack_c);\n  return;\n}\n\n"
        },
        "FUN_000817f0": {
            "entrypoint": "0x000817f0",
            "current_name": "relocate_and_resolve_symbols_000817f0",
            "code": "\nvoid relocateAndResolveSymbols_000817f0(undefined4 arg)\n\n{\n  relocate_and_resolve_symbols_00081810(relocationOffset,arg);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817f0": "relocate_and_resolve_symbols_000817f0",
                "param_1": "arg",
                "Elf32_Rel_ARRAY_20070000[140].r_offset": "relocationOffset"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081800": {
            "entrypoint": "0x00081800",
            "current_name": "process_elf_relocations_00081800",
            "code": "\nvoid processElfRelocations_00081800(undefined4 inputParam)\n\n{\n  process_relocations_00083b10(relocationArray[140].relocationOffset,inputParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081800": "process_elf_relocations_00081800",
                "param_1": "inputParam",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "r_offset": "relocationOffset"
            },
            "calling": [
                "FUN_0008151c",
                "FUN_00081480",
                "FUN_00081472"
            ],
            "called": [
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081810": {
            "entrypoint": "0x00081810",
            "current_name": "relocate_and_resolve_symbols_00081810",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * relocateAndResolveSymbols_00081810(undefined4 *result,uint size)\n\n{\n  dword symbolOffset;\n  int currentRelocOffset;\n  uint relocInfo;\n  uint relocSize;\n  int nextRelocOffset;\n  uint newRelocSize;\n  dword currentRelocInfo;\n  uint newSymbolOffset;\n  int symbolIndex;\n  undefined *prevRelocInfo;\n  dword prevRelocOffset;\n  dword prevPrevRelocOffset;\n  int sectionIndex;\n  dword *relInfoPointer;\n  uint adjustedSize;\n  undefined *relocInfoLocation;\n  dword *relInfoPointerLocation;\n  uint adjustedRelocSize;\n  \n  if (size + 0xb < 0x17) {\n    adjustedSize = 0x10;\n    if (0x10 < size) goto LAB_00081876;\n  }\n  else {\n    adjustedSize = size + 0xb & 0xfffffff8;\n    if (((int)adjustedSize < 0) || (adjustedSize < size)) {\nLAB_00081876:\n      *result = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00081f94(result);\n  symbolOffset = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (adjustedSize < 0x1f8) {\n    sectionIndex = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + adjustedSize);\n    if ((sectionIndex != adjustedSize + 0x20070464) ||\n       (currentRelocOffset = sectionIndex + 8, sectionIndex = *(int *)(sectionIndex + 0x14), currentRelocOffset != sectionIndex)) {\n      nextRelocOffset = *(int *)(sectionIndex + 0xc);\n      symbolIndex = (*(uint *)(sectionIndex + 4) & 0xfffffffc) + sectionIndex;\n      adjustedSize = *(uint *)(symbolIndex + 4);\n      currentRelocOffset = *(int *)(sectionIndex + 8);\n      *(int *)(currentRelocOffset + 0xc) = nextRelocOffset;\n      *(int *)(nextRelocOffset + 8) = currentRelocOffset;\n      *(uint *)(symbolIndex + 4) = adjustedSize | 1;\n      FUNC_00081f98(result);\n      return (int *)(sectionIndex + 8);\n    }\n    adjustedRelocSize = (adjustedSize >> 3) + 2;\n  }\n  else {\n    adjustedRelocSize = adjustedSize >> 9;\n    if (adjustedRelocSize == 0) {\n      currentRelocOffset = 0x7e;\n      sectionIndex = 0x3f;\n    }\n    else if (adjustedRelocSize < 5) {\n      sectionIndex = (adjustedSize >> 6) + 0x38;\n      currentRelocOffset = sectionIndex * 2;\n    }\n    else if (adjustedRelocSize < 0x15) {\n      sectionIndex = adjustedRelocSize + 0x5b;\n      currentRelocOffset = sectionIndex * 2;\n    }\n    else if (adjustedRelocSize < 0x55) {\n      sectionIndex = (adjustedSize >> 0xc) + 0x6e;\n      currentRelocOffset = sectionIndex * 2;\n    }\n    else if (adjustedRelocSize < 0x155) {\n      sectionIndex = (adjustedSize >> 0xf) + 0x77;\n      currentRelocOffset = sectionIndex * 2;\n    }\n    else if (adjustedRelocSize < 0x555) {\n      sectionIndex = (adjustedSize >> 0x12) + 0x7c;\n      currentRelocOffset = sectionIndex * 2;\n    }\n    else {\n      currentRelocOffset = 0xfc;\n      sectionIndex = 0x7e;\n    }\n    for (currentRelocInfo = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[currentRelocOffset]; currentRelocOffset * 4 + 0x20070464U != currentRelocInfo\n        ; currentRelocInfo = *(dword *)(currentRelocInfo + 0xc)) {\n      adjustedRelocSize = *(uint *)(currentRelocInfo + 4) & 0xfffffffc;\n      nextRelocOffset = adjustedRelocSize - adjustedSize;\n      if (0xf < nextRelocOffset) {\n        sectionIndex = sectionIndex + -1;\n        break;\n      }\n      if (-1 < nextRelocOffset) {\n        currentRelocOffset = adjustedRelocSize + currentRelocInfo;\n        adjustedSize = *(uint *)(currentRelocOffset + 4);\n        nextRelocOffset = *(int *)(currentRelocInfo + 0xc);\n        sectionIndex = *(int *)(currentRelocInfo + 8);\n        *(int *)(sectionIndex + 0xc) = nextRelocOffset;\n        *(int *)(nextRelocOffset + 8) = sectionIndex;\n        *(uint *)(currentRelocOffset + 4) = adjustedSize | 1;\n        FUNC_00081f98(result);\n        return (int *)(currentRelocInfo + 8);\n      }\n    }\n    adjustedRelocSize = sectionIndex + 1;\n  }\n  currentRelocInfo = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    relocInfo = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    relocSize = relocInfo & 0xfffffffc;\n    newRelocSize = relocSize - adjustedSize;\n    if (0xf < (int)newRelocSize) {\n      currentRelocInfo = adjustedSize + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = adjustedSize | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = currentRelocInfo;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = currentRelocInfo;\n      *(undefined4 *)(currentRelocInfo + 0xc) = 0x2007046c;\n      *(undefined4 *)(currentRelocInfo + 8) = 0x2007046c;\n      *(uint *)(currentRelocInfo + 4) = newRelocSize | 1;\n      *(uint *)(currentRelocInfo + newRelocSize) = newRelocSize;\n      FUNC_00081f98(result);\n      return (int *)(symbolOffset + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)newRelocSize) {\n      *(uint *)(relocSize + symbolOffset + 4) = *(uint *)(relocSize + symbolOffset + 4) | 1;\n      FUNC_00081f98(result);\n      return (int *)(symbolOffset + 8);\n    }\n    if (relocSize < 0x200) {\n      relocSize = relocInfo & 0xfffffff8;\n      sectionIndex = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + relocSize);\n      currentRelocInfo = 1 << ((int)(relocInfo >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(symbolOffset + 8) = sectionIndex;\n      *(uint *)(symbolOffset + 0xc) = relocSize + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = currentRelocInfo;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + relocSize) = symbolOffset;\n      *(dword *)(sectionIndex + 0xc) = symbolOffset;\n    }\n    else {\n      newRelocSize = relocInfo >> 9;\n      if (newRelocSize < 5) {\n        currentRelocOffset = (relocInfo >> 6) + 0x38;\n        sectionIndex = currentRelocOffset * 2;\n      }\n      else if (newRelocSize < 0x15) {\n        currentRelocOffset = newRelocSize + 0x5b;\n        sectionIndex = currentRelocOffset * 2;\n      }\n      else if (newRelocSize < 0x55) {\n        currentRelocOffset = (relocInfo >> 0xc) + 0x6e;\n        sectionIndex = currentRelocOffset * 2;\n      }\n      else if (newRelocSize < 0x155) {\n        currentRelocOffset = (relocInfo >> 0xf) + 0x77;\n        sectionIndex = currentRelocOffset * 2;\n      }\n      else if (newRelocSize < 0x555) {\n        currentRelocOffset = (relocInfo >> 0x12) + 0x7c;\n        sectionIndex = currentRelocOffset * 2;\n      }\n      else {\n        sectionIndex = 0xfc;\n        currentRelocOffset = 0x7e;\n      }\n      currentRelocInfo = sectionIndex * 4 + 0x20070464;\n      prevRelocOffset = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[sectionIndex];\n      if (prevRelocOffset == currentRelocInfo) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (currentRelocOffset >> 2 & 0xffU);\n        prevPrevRelocOffset = prevRelocOffset;\n      }\n      else {\n        do {\n          prevPrevRelocOffset = prevRelocOffset;\n          if ((*(uint *)(prevRelocOffset + 4) & 0xfffffffc) <= relocSize) break;\n          prevRelocOffset = *(dword *)(prevRelocOffset + 8);\n          prevPrevRelocOffset = prevRelocOffset;\n        } while (currentRelocInfo != prevRelocOffset);\n        prevRelocOffset = *(dword *)(prevPrevRelocOffset + 0xc);\n      }\n      currentRelocInfo = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(symbolOffset + 0xc) = prevRelocOffset;\n      *(dword *)(symbolOffset + 8) = prevPrevRelocOffset;\n      *(dword *)(prevRelocOffset + 8) = symbolOffset;\n      *(dword *)(prevPrevRelocOffset + 0xc) = symbolOffset;\n    }\n  }\n  symbolOffset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  relocInfo = 1 << ((int)adjustedRelocSize >> 2 & 0xffU);\n  if (relocInfo <= currentRelocInfo) {\n    if ((currentRelocInfo & relocInfo) == 0) {\n      adjustedRelocSize = adjustedRelocSize & 0xfffffffc;\n      do {\n        relocInfo = relocInfo << 1;\n        adjustedRelocSize = adjustedRelocSize + 4;\n      } while ((currentRelocInfo & relocInfo) == 0);\n    }\n    do {\n      relInfoPointerLocation = &Elf32_Rel_ARRAY_20070000[adjustedRelocSize + 0x8c].r_info;\n      relInfoPointer = relInfoPointerLocation;\n      relocSize = adjustedRelocSize;\n      do {\n        for (prevRelocInfo = (undefined *)relInfoPointer[3]; relInfoPointer != (dword *)prevRelocInfo;\n            prevRelocInfo = *(undefined **)(prevRelocInfo + 0xc)) {\n          newRelocSize = *(uint *)(prevRelocInfo + 4) & 0xfffffffc;\n          newSymbolOffset = newRelocSize - adjustedSize;\n          if (0xf < (int)newSymbolOffset) {\n            currentRelocOffset = *(int *)(prevRelocInfo + 8);\n            sectionIndex = *(int *)(prevRelocInfo + 0xc);\n            relocInfoLocation = prevRelocInfo + adjustedSize;\n            *(uint *)(prevRelocInfo + 4) = adjustedSize | 1;\n            *(int *)(currentRelocOffset + 0xc) = sectionIndex;\n            *(int *)(sectionIndex + 8) = currentRelocOffset;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)relocInfoLocation;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)relocInfoLocation;\n            *(undefined4 *)(relocInfoLocation + 0xc) = 0x2007046c;\n            *(undefined4 *)(relocInfoLocation + 8) = 0x2007046c;\n            *(uint *)(relocInfoLocation + 4) = newSymbolOffset | 1;\n            *(uint *)(relocInfoLocation + newSymbolOffset) = newSymbolOffset;\n            FUNC_00081f98(result);\n            return (int *)(prevRelocInfo + 8);\n          }\n          if (-1 < (int)newSymbolOffset) {\n            sectionIndex = *(int *)(prevRelocInfo + 8);\n            currentRelocOffset = *(int *)(prevRelocInfo + 0xc);\n            *(uint *)(prevRelocInfo + newRelocSize + 4) = *(uint *)(prevRelocInfo + newRelocSize + 4) | 1;\n            *(int *)(sectionIndex + 0xc) = currentRelocOffset;\n            *(int *)(currentRelocOffset + 8) = sectionIndex;\n            FUNC_00081f98(result);\n            return (int *)(prevRelocInfo + 8);\n          }\n        }\n        relocSize = relocSize + 1;\n        relInfoPointer = relInfoPointer + 2;\n      } while ((relocSize & 3) != 0);\n      do {\n        newRelocSize = adjustedRelocSize & 3;\n        prevRelocInfo = (undefined *)(relInfoPointerLocation + -2);\n        adjustedRelocSize = adjustedRelocSize - 1;\n        if (newRelocSize == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~relocInfo;\n          break;\n        }\n        relInfoPointerLocation = (dword *)*relInfoPointerLocation;\n      } while (relInfoPointerLocation == (dword *)prevRelocInfo);\n      relocInfo = relocInfo * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= relocInfo &&\n           relocInfo - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (adjustedRelocSize = relocSize, relocInfo == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & relocInfo) == 0; relocInfo = relocInfo << 1) {\n        adjustedRelocSize = adjustedRelocSize + 4;\n      }\n    } while( true );\n  }\n  adjustedRelocSize = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((adjustedSize <= adjustedRelocSize) &&\n     (relocInfo = adjustedRelocSize - adjustedSize, currentRelocInfo = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)relocInfo))\n  goto LAB_00081b1a;\n  relocInfo = Elf32_Rel_ARRAY_20070000[141].r_info + adjustedRelocSize;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    relocSize = adjustedSize + DAT_20071218 + 0x10;\n  }\n  else {\n    relocSize = adjustedSize + DAT_20071218 + 0x100f & 0xfffff000;\n  }\n  currentRelocInfo = check_and_assign_previous_result_0008236c(result,relocSize);\n  if ((currentRelocInfo == 0xffffffff) || ((currentRelocInfo < relocInfo && (symbolOffset != 0x20070464)))) {\n    adjustedRelocSize = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    currentRelocInfo = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    newRelocSize = DAT_2007121c + relocSize;\n    DAT_2007121c = newRelocSize;\n    if ((relocInfo == currentRelocInfo) && ((relocInfo & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = relocSize + adjustedRelocSize | 1;\n    }\n    else {\n      prevRelocOffset = currentRelocInfo;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        prevRelocOffset = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_2007121c = newRelocSize + (currentRelocInfo - relocInfo);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = prevRelocOffset;\n      relocInfo = currentRelocInfo & 7;\n      if (relocInfo == 0) {\n        sectionIndex = 0x1000;\n      }\n      else {\n        currentRelocInfo = currentRelocInfo + (8 - relocInfo);\n        sectionIndex = 0x1008 - relocInfo;\n      }\n      sectionIndex = sectionIndex - (relocSize + currentRelocInfo & 0xfff);\n      currentRelocOffset = check_and_assign_previous_result_0008236c(result,sectionIndex);\n      if (currentRelocOffset == -1) {\n        relocInfo = 1;\n        sectionIndex = 0;\n      }\n      else {\n        relocInfo = (currentRelocOffset - currentRelocInfo) + sectionIndex | 1;\n      }\n      newRelocSize = DAT_2007121c + sectionIndex;\n      Elf32_Rel_ARRAY_20070000[141].r_info = currentRelocInfo;\n      DAT_2007121c = newRelocSize;\n      *(uint *)(currentRelocInfo + 4) = relocInfo;\n      if (symbolOffset != 0x20070464) {\n        if (adjustedRelocSize < 0x10) {\n          *(undefined4 *)(currentRelocInfo + 4) = 1;\n          adjustedRelocSize = 0;\n          goto LAB_00081b04;\n        }\n        adjustedRelocSize = adjustedRelocSize - 0xc & 0xfffffff8;\n        *(uint *)(symbolOffset + 4) = adjustedRelocSize | *(uint *)(symbolOffset + 4) & 1;\n        *(undefined4 *)(symbolOffset + adjustedRelocSize + 4) = 5;\n        *(undefined4 *)(symbolOffset + adjustedRelocSize + 8) = 5;\n        if (0xf < adjustedRelocSize) {\n          process_relocations_00083b10(result,symbolOffset + 8);\n          newRelocSize = DAT_2007121c;\n        }\n      }\n    }\n    if (DAT_20071214 < newRelocSize) {\n      DAT_20071214 = newRelocSize;\n    }\n    if (DAT_20071210 < newRelocSize) {\n      DAT_20071210 = newRelocSize;\n    }\n    adjustedRelocSize = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    currentRelocInfo = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00081b04:\n  relocInfo = adjustedRelocSize - adjustedSize;\n  if ((adjustedRelocSize < adjustedSize) || ((int)relocInfo < 0x10)) {\n    FUNC_00081f98(result);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  Elf32_Rel_ARRAY_20070000[141].r_info = adjustedSize + currentRelocInfo;\n  *(uint *)(currentRelocInfo + 4) = adjustedSize | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = relocInfo | 1;\n  FUNC_00081f98(result);\n  return (int *)(currentRelocInfo + 8);\n}\n\n",
            "renaming": {
                "FUN_00081810": "relocate_and_resolve_symbols_00081810",
                "param_1": "result",
                "param_2": "size",
                "dVar1": "symbolOffset",
                "iVar2": "currentRelocOffset",
                "uVar3": "relocInfo",
                "uVar4": "relocSize",
                "iVar5": "nextRelocOffset",
                "uVar6": "newRelocSize",
                "dVar7": "currentRelocInfo",
                "uVar8": "newSymbolOffset",
                "iVar9": "symbolIndex",
                "puVar10": "prevRelocInfo",
                "dVar11": "prevRelocOffset",
                "dVar12": "prevPrevRelocOffset",
                "iVar13": "sectionIndex",
                "pdVar14": "relInfoPointer",
                "uVar15": "adjustedSize",
                "puVar16": "relocInfoLocation",
                "pdVar17": "relInfoPointerLocation",
                "uVar18": "adjustedRelocSize"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00084018",
                "FUN_000817f0",
                "FUN_00081fac"
            ],
            "called": [
                "FUN_0008236c",
                "FUN_00081f94",
                "FUN_00081f98",
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d48": {
            "entrypoint": "0x00081d48",
            "current_name": "mem_copy_00081d48",
            "code": "\nundefined4 * memCopy_00081d48(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *dst;\n  undefined4 *src;\n  uint remainingSize;\n  uint copySize;\n  bool isRemainingSizeValid;\n  \n  dst = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      copySize = size - 4;\n      if (3 < size) {\n        do {\n          destPtr = source;\n          src = dst;\n          isRemainingSizeValid = copySize != 0;\n          copySize = copySize - 1;\n          *(undefined *)src = *(undefined *)destPtr;\n          dst = (undefined4 *)((int)src + 1);\n          source = (undefined4 *)((int)destPtr + 1);\n        } while (isRemainingSizeValid);\n        *(undefined *)(undefined4 *)((int)src + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)src + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)src + 3) = *(undefined *)((int)destPtr + 3);\n        return destination;\n      }\n      goto LAB_00081dcc;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      copySize = 4 - ((uint)destination & 3);\n      size = size - copySize;\n      destPtr = destination;\n      src = source;\n      if (((uint)destination & 1) != 0) {\n        src = (undefined4 *)((int)source + 1);\n        destPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      dst = destPtr;\n      source = src;\n      if ((copySize & 2) != 0) {\n        source = (undefined4 *)((int)src + 2);\n        dst = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)src;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *dst = *source;\n    dst[1] = source[1];\n    dst[2] = source[2];\n    dst[3] = source[3];\n    dst[4] = source[4];\n    dst[5] = source[5];\n    dst[6] = source[6];\n    dst[7] = source[7];\n    dst[8] = source[8];\n    dst[9] = source[9];\n    dst[10] = source[10];\n    dst[0xb] = source[0xb];\n    dst[0xc] = source[0xc];\n    dst[0xd] = source[0xd];\n    dst[0xe] = source[0xe];\n    dst[0xf] = source[0xf];\n    dst = dst + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remainingSize = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *dst = *source;\n      dst[1] = source[1];\n      dst[2] = source[2];\n      dst[3] = source[3];\n      dst = dst + 4;\n      source = source + 4;\n      isRemainingSizeValid = 0xf < remainingSize;\n      remainingSize = remainingSize - 0x10;\n    } while (isRemainingSizeValid);\n  }\n  copySize = remainingSize + 0xc;\n  src = dst;\n  destPtr = source;\n  if (0xfffffff3 < remainingSize) {\n    do {\n      source = destPtr + 1;\n      *src = *destPtr;\n      isRemainingSizeValid = 3 < copySize;\n      copySize = copySize - 4;\n      dst = src + 1;\n      src = src + 1;\n      destPtr = source;\n    } while (isRemainingSizeValid);\n  }\nLAB_00081dcc:\n  if (copySize + 4 != 0) {\n    destPtr = dst;\n    src = source;\n    if ((copySize & 1) != 0) {\n      src = (undefined4 *)((int)source + 1);\n      destPtr = (undefined4 *)((int)dst + 1);\n      *(undefined *)dst = *(undefined *)source;\n    }\n    if ((copySize + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)src;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00081d48": "mem_copy_00081d48",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "dst",
                "puVar3": "src",
                "uVar4": "remainingSize",
                "uVar5": "copySize",
                "bVar6": "isRemainingSizeValid"
            },
            "calling": [
                "FUN_00083ca8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e34": {
            "entrypoint": "0x00081e34",
            "current_name": "copy_memory_00081e34",
            "code": "\nvoid copyMemory_00081e34(undefined4 *destPtr,undefined4 *srcPtr,uint numBytes)\n\n{\n  int count;\n  undefined4 *destPtrInc;\n  undefined4 *srcPtrInc;\n  undefined4 *ptr;\n  uint numRemainBytes;\n  undefined *destEndPtr;\n  uint numRemainBytesAligned;\n  \n  if ((srcPtr < destPtr) && (ptr = (undefined4 *)((int)srcPtr + numBytes), destPtr < ptr)) {\n    destEndPtr = (undefined *)((int)destPtr + numBytes);\n    count = numBytes - 1;\n    if (numBytes != 0) {\n      do {\n        ptr = (undefined4 *)((int)ptr + -1);\n        count = count + -1;\n        destEndPtr = destEndPtr + -1;\n        *destEndPtr = *(undefined *)ptr;\n      } while (count != -1);\n    }\n    return;\n  }\n  if (numBytes < 0x10) {\n    if (numBytes == 0) {\n      return;\n    }\n  }\n  else if ((((uint)destPtr | (uint)srcPtr) & 3) == 0) {\n    ptr = destPtr;\n    srcPtrInc = srcPtr;\n    do {\n      destPtrInc = ptr + 4;\n      *ptr = *srcPtrInc;\n      ptr[1] = srcPtrInc[1];\n      ptr[2] = srcPtrInc[2];\n      ptr[3] = srcPtrInc[3];\n      ptr = destPtrInc;\n      srcPtrInc = srcPtrInc + 4;\n    } while (destPtrInc != (undefined4 *)((int)destPtr + (numBytes - 0x10 & 0xfffffff0) + 0x10));\n    count = (numBytes - 0x10 >> 4) + 1;\n    numRemainBytesAligned = numBytes & 0xf;\n    srcPtr = srcPtr + count * 4;\n    destPtr = destPtr + count * 4;\n    numRemainBytes = numRemainBytesAligned;\n    ptr = destPtr;\n    srcPtrInc = srcPtr;\n    if (3 < numRemainBytesAligned) {\n      do {\n        numRemainBytes = numRemainBytes - 4;\n        *ptr = *srcPtrInc;\n        ptr = ptr + 1;\n        srcPtrInc = srcPtrInc + 1;\n      } while (3 < numRemainBytes);\n      count = (numRemainBytesAligned - 4 & 0xfffffffc) + 4;\n      destPtr = (undefined4 *)((int)destPtr + count);\n      srcPtr = (undefined4 *)((int)srcPtr + count);\n      numRemainBytesAligned = numBytes & 3;\n    }\n    numBytes = numRemainBytesAligned;\n    if (numBytes == 0) {\n      return;\n    }\n  }\n  ptr = destPtr;\n  do {\n    srcPtrInc = (undefined4 *)((int)ptr + 1);\n    *(undefined *)ptr = *(undefined *)srcPtr;\n    srcPtr = (undefined4 *)((int)srcPtr + 1);\n    ptr = srcPtrInc;\n  } while (srcPtrInc != (undefined4 *)(numBytes + (int)destPtr));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e34": "copy_memory_00081e34",
                "param_1": "destPtr",
                "param_2": "srcPtr",
                "param_3": "numBytes",
                "iVar1": "count",
                "puVar2": "destPtrInc",
                "puVar3": "srcPtrInc",
                "puVar4": "ptr",
                "uVar5": "numRemainBytes",
                "puVar6": "destEndPtr",
                "uVar7": "numRemainBytesAligned"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00081fac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f00": {
            "entrypoint": "0x00081f00",
            "current_name": "improve_and_expand_00081f00",
            "code": "\nvoid improveAndExpand_00081f00(undefined4 *inputArray,undefined valueToFill,uint arrayLength)\n\n{\n  undefined4 *ptrTemp1;\n  undefined4 *ptrTemp2;\n  undefined4 fillValue;\n  uint remainingLength;\n  bool isZero;\n  \n  if (((uint)inputArray & 3) != 0) {\n    isZero = arrayLength == 0;\n    ptrTemp1 = inputArray;\n    arrayLength = arrayLength - 1;\n    if (isZero) {\n      return;\n    }\n    while( true ) {\n      inputArray = (undefined4 *)((int)ptrTemp1 + 1);\n      *(undefined *)ptrTemp1 = valueToFill;\n      if (((uint)inputArray & 3) == 0) break;\n      isZero = arrayLength == 0;\n      ptrTemp1 = inputArray;\n      arrayLength = arrayLength - 1;\n      if (isZero) {\n        return;\n      }\n    }\n  }\n  if (3 < arrayLength) {\n    fillValue = CONCAT22(CONCAT11(valueToFill,valueToFill),CONCAT11(valueToFill,valueToFill));\n    remainingLength = arrayLength;\n    ptrTemp1 = inputArray;\n    if (0xf < arrayLength) {\n      remainingLength = arrayLength - 0x10;\n      do {\n        *ptrTemp1 = fillValue;\n        ptrTemp1[1] = fillValue;\n        ptrTemp1[2] = fillValue;\n        ptrTemp1[3] = fillValue;\n        ptrTemp1 = ptrTemp1 + 4;\n      } while (ptrTemp1 != (undefined4 *)((int)inputArray + (remainingLength & 0xfffffff0) + 0x10));\n      arrayLength = arrayLength & 0xf;\n      inputArray = inputArray + ((remainingLength >> 4) + 1) * 4;\n      remainingLength = arrayLength;\n      ptrTemp1 = inputArray;\n      if (arrayLength < 4) goto LAB_00081f7c;\n    }\n    do {\n      arrayLength = arrayLength - 4;\n      *inputArray = fillValue;\n      inputArray = inputArray + 1;\n    } while (3 < arrayLength);\n    inputArray = (undefined4 *)((int)ptrTemp1 + (remainingLength - 4 & 0xfffffffc) + 4);\n    arrayLength = remainingLength & 3;\n  }\nLAB_00081f7c:\n  if (arrayLength != 0) {\n    ptrTemp1 = inputArray;\n    do {\n      ptrTemp2 = (undefined4 *)((int)ptrTemp1 + 1);\n      *(undefined *)ptrTemp1 = valueToFill;\n      ptrTemp1 = ptrTemp2;\n    } while (ptrTemp2 != (undefined4 *)(arrayLength + (int)inputArray));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f00": "improve_and_expand_00081f00",
                "param_1": "inputArray",
                "param_2": "valueToFill",
                "param_3": "arrayLength",
                "puVar1": "ptrTemp1",
                "puVar2": "ptrTemp2",
                "uVar3": "fillValue",
                "uVar4": "remainingLength",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_00083888",
                "FUN_000811b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f94": {
            "entrypoint": "0x00081f94",
            "current_name": "FUNC_00081f94",
            "code": "\nvoid FUNC_00081f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f94": "FUNC_00081f94"
            },
            "calling": [
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f98": {
            "entrypoint": "0x00081f98",
            "current_name": "FUNC_00081f98",
            "code": "\nvoid FUNC_00081f98(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f98": "FUNC_00081f98"
            },
            "calling": [
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f9c": {
            "entrypoint": "0x00081f9c",
            "current_name": "relocate_and_resolve_symbols_00081f9c",
            "code": "\nvoid relocateAndResolveSymbols_00081f9c(undefined4 elfOffset,undefined4 param2)\n\n{\n  relocate_and_resolve_symbols_00081fac(relocationTable[140].offset,elfOffset,param2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f9c": "relocate_and_resolve_symbols_00081f9c",
                "param_1": "elfOffset",
                "param_2": "param2",
                "Elf32_Rel_ARRAY_20070000": "relocationTable",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00081496"
            ],
            "called": [
                "FUN_00081fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081fac": {
            "entrypoint": "0x00081fac",
            "current_name": "relocate_and_resolve_symbols_00081fac",
            "code": "\nint * relocate_and_resolve_symbols_00081fac(undefined4 *param_destination,int *param_source,uint size)\n\n{\n  dword temp1;\n  int *result;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  int temp5;\n  int *temp6;\n  uint temp7;\n  uint temp8;\n  int *temp9;\n  \n  if (param_source == (int *)0x0) {\n    result = (int *)relocate_and_resolve_symbols_00081fac_00081810(param_destination,size);\n    return result;\n  }\n  FUNC_00081f94();\n  temp4 = param_source[-1];\n  temp7 = temp4 & 0xfffffffc;\n  result = param_source + -2;\n  if (size + 0xb < 0x17) {\n    temp8 = 0x10;\n  }\n  else {\n    temp8 = size + 0xb & 0xfffffff8;\n    if ((int)temp8 < 0) goto label1;\n  }\n  if (temp8 < size) {\nlabel1:\n    *param_destination = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)temp7 < (int)temp8) {\n    temp1 = (int)result + temp7;\n    if (relocation_array[141].r_info == temp1) {\n      temp2 = *(uint *)(relocation_array[141].r_info + 4) & 0xfffffffc;\n      temp1 = relocation_array[141].r_info;\n      if ((int)(temp8 + 0x10) <= (int)(temp2 + temp7)) {\n        relocation_array[141].r_info = (int)result + temp8;\n        *(uint *)(relocation_array[141].r_info + 4) = (temp2 + temp7) - temp8 | 1;\n        param_source[-1] = temp8 | param_source[-1] & 1U;\n        FUNC_00081f98(param_destination);\n        return param_source;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp1 + 4) & 0xfffffffe) + temp1 + 4) & 1) == 0) {\n      temp2 = *(uint *)(temp1 + 4) & 0xfffffffc;\n      if ((int)temp8 <= (int)(temp2 + temp7)) {\n        temp5 = *(int *)(temp1 + 0xc);\n        temp3 = *(int *)(temp1 + 8);\n        *(int *)(temp3 + 0xc) = temp5;\n        *(int *)(temp5 + 8) = temp3;\n        temp7 = temp2 + temp7;\n        goto label2;\n      }\n    }\n    else {\n      temp2 = 0;\n      temp1 = 0;\n    }\n    if (-1 < (int)(temp4 << 0x1f)) {\n      temp9 = (int *)((int)result - param_source[-2]);\n      temp4 = (temp9[1] & 0xfffffffcU) + temp7;\n      if (temp1 != 0) {\n        if (temp1 == relocation_array[141].r_info) {\n          if ((int)(temp8 + 0x10) <= (int)(temp2 + temp4)) {\n            result = temp9 + 2;\n            temp3 = *result;\n            temp5 = temp9[3];\n            temp7 = temp7 - 4;\n            *(int *)(temp3 + 0xc) = temp5;\n            *(int *)(temp5 + 8) = temp3;\n            if (temp7 < 0x25) {\n              temp6 = result;\n              if (0x13 < temp7) {\n                temp9[2] = *param_source;\n                temp9[3] = param_source[1];\n                if (temp7 < 0x1c) {\n                  param_source = param_source + 2;\n                  temp6 = temp9 + 4;\n                }\n                else {\n                  temp9[4] = param_source[2];\n                  temp9[5] = param_source[3];\n                  if (temp7 == 0x24) {\n                    temp9[6] = param_source[4];\n                    temp6 = param_source + 5;\n                    param_source = param_source + 6;\n                    temp9[7] = *temp6;\n                    temp6 = temp9 + 8;\n                  }\n                  else {\n                    param_source = param_source + 4;\n                    temp6 = temp9 + 6;\n                  }\n                }\n              }\n              *temp6 = *param_source;\n              temp6[1] = param_source[1];\n              temp6[2] = param_source[2];\n            }\n            else {\n              copy_memory(result,param_source);\n            }\n            relocation_array[141].r_info = (int)temp9 + temp8;\n            *(uint *)(relocation_array[141].r_info + 4) = (temp2 + temp4) - temp8 | 1;\n            temp9[1] = temp8 | temp9[1] & 1U;\n            FUNC_00081f98(param_destination);\n            return result;\n          }\n        }\n        else {\n          temp2 = temp2 + temp4;\n          if ((int)temp8 <= (int)temp2) {\n            temp5 = *(int *)(temp1 + 0xc);\n            temp3 = *(int *)(temp1 + 8);\n            *(int *)(temp3 + 0xc) = temp5;\n            *(int *)(temp5 + 8) = temp3;\n            temp6 = temp9 + 2;\n            temp3 = *temp6;\n            temp5 = temp9[3];\n            temp4 = temp7 - 4;\n            *(int *)(temp3 + 0xc) = temp5;\n            *(int *)(temp5 + 8) = temp3;\n            temp7 = temp2;\n            if (temp4 < 0x25) {\n              result = temp6;\n              if (0x13 < temp4) {\n                temp9[2] = *param_source;\n                temp9[3] = param_source[1];\n                if (temp4 < 0x1c) {\n                  param_source = param_source + 2;\n                  result = temp9 + 4;\n                }\n                else {\n                  temp9[4] = param_source[2];\n                  temp9[5] = param_source[3];\n                  if (temp4 == 0x24) {\n                    temp9[6] = param_source[4];\n                    result = param_source + 5;\n                    param_source = param_source + 6;\n                    temp9[7] = *result;\n                    result = temp9 + 8;\n                  }\n                  else {\n                    param_source = param_source + 4;\n                    result = temp9 + 6;\n                  }\n                }\n              }\n              *result = *param_source;\n              result[1] = param_source[1];\n              result[2] = param_source[2];\n              temp4 = temp9[1];\n              result = temp9;\n              param_source = temp6;\n            }\n            else {\n              copy_memory(temp6,param_source);\n              temp4 = temp9[1];\n              result = temp9;\n              param_source = temp6;\n            }\n            goto label2;\n          }\n        }\n      }\n      if ((int)temp8 <= (int)temp4) {\n        temp6 = temp9 + 2;\n        temp3 = *temp6;\n        temp5 = temp9[3];\n        temp2 = temp7 - 4;\n        *(int *)(temp3 + 0xc) = temp5;\n        *(int *)(temp5 + 8) = temp3;\n        temp7 = temp4;\n        if (temp2 < 0x25) {\n          result = temp6;\n          if (0x13 < temp2) {\n            temp9[2] = *param_source;\n            temp9[3] = param_source[1];\n            if (temp2 < 0x1c) {\n              param_source = param_source + 2;\n              result = temp9 + 4;\n            }\n            else {\n              temp9[4] = param_source[2];\n              temp9[5] = param_source[3];\n              if (temp2 == 0x24) {\n                temp9[6] = param_source[4];\n                result = param_source + 5;\n                param_source = param_source + 6;\n                temp9[7] = *result;\n                result = temp9 + 8;\n              }\n              else {\n                param_source = param_source + 4;\n                result = temp9 + 6;\n              }\n            }\n          }\n          *result = *param_source;\n          result[1] = param_source[1];\n          result[2] = param_source[2];\n          temp4 = temp9[1];\n          result = temp9;\n          param_source = temp6;\n        }\n        else {\n          copy_memory(temp6,param_source);\n          temp4 = temp9[1];\n          result = temp9;\n          param_source = temp6;\n        }\n        goto label2;\n      }\n    }\n    temp9 = (int *)relocate_and_resolve_symbols_00081fac_00081810(param_destination,size);\n    if (temp9 == (int *)0x0) goto LAB_000820a0;\n    temp4 = param_source[-1];\n    if (temp9 + -2 != (int *)((temp4 & 0xfffffffe) + (int)result)) {\n      temp7 = temp7 - 4;\n      if (temp7 < 0x25) {\n        result = param_source;\n        temp6 = temp9;\n        if (0x13 < temp7) {\n          *temp9 = *param_source;\n          temp9[1] = param_source[1];\n          if (temp7 < 0x1c) {\n            result = param_source + 2;\n            temp6 = temp9 + 2;\n          }\n          else {\n            temp9[2] = param_source[2];\n            temp9[3] = param_source[3];\n            if (temp7 == 0x24) {\n              temp9[4] = param_source[4];\n              temp9[5] = param_source[5];\n              result = param_source + 6;\n              temp6 = temp9 + 6;\n            }\n            else {\n              result = param_source + 4;\n              temp6 = temp9 + 4;\n            }\n          }\n        }\n        *temp6 = *result;\n        temp6[1] = result[1];\n        temp6[2] = result[2];\n      }\n      else {\n        copy_memory(temp9,param_source);\n      }\n      process_relocations(param_destination,param_source);\n      goto LAB_000820a0;\n    }\n    temp7 = temp7 + (temp9[-1] & 0xfffffffcU);\n  }\nlabel2:\n  temp2 = temp7 - temp8;\n  temp9 = param_source;\n  if (temp2 < 0x10) {\n    result[1] = temp4 & 1 | temp7;\n    *(uint *)((int)result + temp7 + 4) = *(uint *)((int)result + temp7 + 4) | 1;\n  }\n  else {\n    result[1] = temp4 & 1 | temp8;\n    *(uint *)((int)result + temp8 + 4) = temp2 | 1;\n    *(uint *)((int)result + temp2 + temp8 + 4) = *(uint *)((int)result + temp2 + temp8 + 4) | 1;\n    process_relocations(param_destination,(int)result + temp8 + 8);\n  }\nLAB_000820a0:\n  FUNC_00081f98(param_destination);\n  return temp9;\n}\n\n",
            "renaming": {
                "FUN_00081fac": "relocate_and_resolve_symbols_00081fac",
                "param_1": "param_destination",
                "param_2": "param_source",
                "param_3": "size",
                "dVar1": "temp1",
                "piVar2": "result",
                "uVar3": "temp2",
                "iVar4": "temp3",
                "uVar5": "temp4",
                "iVar6": "temp5",
                "piVar7": "temp6",
                "uVar8": "temp7",
                "uVar9": "temp8",
                "piVar10": "temp9",
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "LAB_00082078": "label1",
                "LAB_00082088": "label2",
                "copy_memory_00081e34": "copy_memory",
                "process_relocations_00083b10": "process_relocations"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00081f9c"
            ],
            "called": [
                "FUN_00081f94",
                "FUN_00081e34",
                "FUN_00081f98",
                "FUN_00083b10",
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008236c": {
            "entrypoint": "0x0008236c",
            "current_name": "check_and_assign_previous_result_0008236c",
            "code": "\nvoid checkAndAssignPreviousResult_0008236c(int *outputVariable,undefined4 inputValue)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = add_with_previous_00080e88(inputValue);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *outputVariable = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008236c": "check_and_assign_previous_result_0008236c",
                "param_1": "outputVariable",
                "param_2": "inputValue",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00083a74",
                "FUN_00081810"
            ],
            "called": [
                "FUN_00080e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082390": {
            "entrypoint": "0x00082390",
            "current_name": "compare_arrays_00082390",
            "code": "\nint compareArrays_00082390(uint *array1,uint *array2)\n\n{\n  uint *ptr1;\n  int result;\n  uint *ptr2;\n  uint *ptr3;\n  uint uint1;\n  uint uintTemp1;\n  uint uintTemp2;\n  uint uintTemp3;\n  uint uintTemp4;\n  \n  if ((((uint)array1 | (uint)array2) & 7) != 0) {\n    ptr1 = array1;\n    if (((uint)array1 & 3) != 0) {\n      ptr1 = (uint *)((uint)array1 & 0xfffffffc) + 1;\n      uint1 = *(uint *)((uint)array1 & 0xfffffffc);\n      ptr2 = array2;\n      if (((uint)array1 & 1) == 0) {\nLAB_00082410:\n        ptr3 = (uint *)((int)ptr2 + 1);\n        uintTemp1 = uint1 >> 0x10 & 0xff;\n        result = uintTemp1 - *(byte *)ptr2;\n        if (result != 0) {\n          return result;\n        }\n        if (uintTemp1 == 0) {\n          return 0;\n        }\n      }\n      else {\n        ptr3 = array2;\n        if (((uint)array1 & 2) == 0) {\n          ptr2 = (uint *)((int)array2 + 1);\n          uintTemp1 = uint1 >> 8 & 0xff;\n          result = uintTemp1 - *(byte *)array2;\n          if (result != 0) {\n            return result;\n          }\n          if (uintTemp1 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      array2 = (uint *)((int)ptr3 + 1);\n      result = (uint1 >> 0x18) - (uint)*(byte *)ptr3;\n      if ((result != 0) || (uint1 >> 0x18 == 0)) {\n        return result;\n      }\n    }\n    uint1 = (uint)array2 & 3;\n    if (uint1 != 0) {\n      array2 = (uint *)((uint)array2 & 0xfffffffc);\n      if (uint1 == 2) {\n        uint1 = *array2;\n        do {\n          array2 = array2 + 1;\n          uintTemp2 = *ptr1;\n          uint1 = uint1 >> 0x10;\n          uintTemp3 = uintTemp2 + 0xfefefeff & ~uintTemp2;\n          uintTemp4 = uintTemp3 & 0x80808080;\n          uintTemp1 = uintTemp2 & 0xffff;\n          if ((uintTemp3 & 0x8080) != 0 || uintTemp1 != uint1) goto LAB_0008258e;\n          uint1 = *array2;\n          uintTemp1 = uintTemp1 ^ uintTemp2;\n          uintTemp2 = uint1 * 0x10000;\n          ptr1 = ptr1 + 1;\n        } while (uintTemp4 == 0 && uintTemp1 == uintTemp2);\n      }\n      else if (uint1 < 2) {\n        uint1 = *array2;\n        do {\n          array2 = array2 + 1;\n          uintTemp2 = *ptr1;\n          uint1 = uint1 >> 8;\n          uintTemp3 = uintTemp2 + 0xfefefeff & ~uintTemp2;\n          uintTemp4 = uintTemp3 & 0x80808080;\n          uintTemp1 = uintTemp2 & 0xffffff;\n          if ((uintTemp3 & 0x808080) != 0 || uintTemp1 != uint1) goto LAB_0008258e;\n          uint1 = *array2;\n          uintTemp1 = uintTemp1 ^ uintTemp2;\n          uintTemp2 = uint1 * 0x1000000;\n          ptr1 = ptr1 + 1;\n        } while (uintTemp4 == 0 && uintTemp1 == uintTemp2);\n      }\n      else {\n        uint1 = *array2;\n        do {\n          array2 = array2 + 1;\n          uintTemp2 = *ptr1;\n          uint1 = uint1 >> 0x18;\n          uintTemp3 = uintTemp2 + 0xfefefeff & ~uintTemp2;\n          uintTemp4 = uintTemp3 & 0x80808080;\n          uintTemp1 = uintTemp2 & 0xff;\n          if ((uintTemp3 & 0x80) != 0 || uintTemp1 != uint1) goto LAB_0008258e;\n          uint1 = *array2;\n          uintTemp1 = uintTemp1 ^ uintTemp2;\n          uintTemp2 = uint1 * 0x100;\n          ptr1 = ptr1 + 1;\n        } while (uintTemp4 == 0 && uintTemp1 == uintTemp2);\n      }\n      uintTemp1 = uintTemp1 << 0x18 | (uintTemp1 >> 8 & 0xff) << 0x10 | (uintTemp1 >> 0x10 & 0xff) << 8 |\n              uintTemp1 >> 0x18;\n      uint1 = (uintTemp2 >> 8 & 0xff) << 0x10 | (uintTemp2 >> 0x10 & 0xff) << 8 | uintTemp2 >> 0x18;\n      goto LAB_0008259e;\n    }\n    array1 = ptr1;\n    ptr2 = array2;\n    if (((uint)ptr1 & 4) != 0) {\n      array1 = ptr1 + 1;\n      uint1 = *ptr1;\n      ptr2 = array2 + 1;\n      uintTemp2 = *array2;\n      uintTemp4 = uint1 + 0xfefefeff & ~uint1 & 0x80808080;\n      if (uint1 != uintTemp2 || uintTemp4 != 0) {\nLAB_0008259a:\n        uintTemp1 = uint1 << 0x18 | (uint1 >> 8 & 0xff) << 0x10 | (uint1 >> 0x10 & 0xff) << 8 |\n                uint1 >> 0x18;\n        uint1 = uintTemp2 << 0x18 | (uintTemp2 >> 8 & 0xff) << 0x10 | (uintTemp2 >> 0x10 & 0xff) << 8 |\n                uintTemp2 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    array2 = ptr2;\n    if (((uint)ptr2 & 4) != 0) {\n      uint1 = *ptr2;\n      ptr1 = ptr2 + 1;\n      do {\n        uintTemp1 = *array1;\n        uintTemp2 = array1[1];\n        uintTemp4 = uintTemp1 + 0xfefefeff & ~uintTemp1 & 0x80808080;\n        if (uintTemp1 != uint1 || uintTemp4 != 0) goto LAB_0008258e;\n        uintTemp3 = *ptr1;\n        uint1 = ptr1[1];\n        uintTemp4 = uintTemp2 + 0xfefefeff & ~uintTemp2 & 0x80808080;\n        array1 = array1 + 2;\n        ptr1 = ptr1 + 2;\n      } while (uintTemp2 == uintTemp3 && uintTemp4 == 0);\n      uintTemp1 = uintTemp2 << 0x18 | (uintTemp2 >> 8 & 0xff) << 0x10 | (uintTemp2 >> 0x10 & 0xff) << 8 |\n              uintTemp2 >> 0x18;\n      uint1 = uintTemp3 << 0x18 | (uintTemp3 >> 8 & 0xff) << 0x10 | (uintTemp3 >> 0x10 & 0xff) << 8 |\n              uintTemp3 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    uint1 = *array1;\n    uintTemp1 = array1[1];\n    uintTemp2 = *array2;\n    uintTemp3 = array2[1];\n    uintTemp4 = uint1 + 0xfefefeff & ~uint1 & 0x80808080;\n    if (uint1 != uintTemp2 || uintTemp4 != 0) goto LAB_0008259a;\n    uintTemp4 = uintTemp1 + 0xfefefeff & ~uintTemp1 & 0x80808080;\n    array1 = array1 + 2;\n    array2 = array2 + 2;\n  } while (uintTemp1 == uintTemp3 && uintTemp4 == 0);\n  uintTemp1 = uintTemp1 << 0x18 | (uintTemp1 >> 8 & 0xff) << 0x10 | (uintTemp1 >> 0x10 & 0xff) << 8 | uintTemp1 >> 0x18;\n  uint1 = uintTemp3 << 0x18 | (uintTemp3 >> 8 & 0xff) << 0x10 | (uintTemp3 >> 0x10 & 0xff) << 8 | uintTemp3 >> 0x18;\nLAB_0008259e:\n  uintTemp2 = uintTemp4 << 0x18 | (uintTemp4 >> 8 & 0xff) << 0x10 | (uintTemp4 >> 0x10 & 0xff) << 8 | uintTemp4 >> 0x18;\n  if (uintTemp2 != 0) {\n    uintTemp2 = 0x18 - LZCOUNT(uintTemp2);\n    uintTemp1 = uintTemp1 >> (uintTemp2 & 0xff);\n    uint1 = uint1 >> (uintTemp2 & 0xff);\n  }\n  result = 1;\n  if (uintTemp1 <= uint1) {\n    result = -(uint)(uintTemp1 < uint1);\n  }\n  return result;\nLAB_0008258e:\n  uintTemp1 = uintTemp1 << 0x18 | (uintTemp1 >> 8 & 0xff) << 0x10 | (uintTemp1 >> 0x10 & 0xff) << 8 | uintTemp1 >> 0x18;\n  uint1 = uint1 << 0x18 | (uint1 >> 8 & 0xff) << 0x10 | (uint1 >> 0x10 & 0xff) << 8 | uint1 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "renaming": {
                "FUN_00082390": "compare_arrays_00082390",
                "param_1": "array1",
                "param_2": "array2",
                "puVar1": "ptr1",
                "iVar2": "result",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "uVar5": "uint1",
                "uVar6": "uintTemp1",
                "uVar7": "uintTemp2",
                "uVar8": "uintTemp3",
                "uVar9": "uintTemp4"
            },
            "calling": [
                "FUN_000815b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825cc": {
            "entrypoint": "0x000825cc",
            "current_name": "copy_string_000825cc",
            "code": "\nvoid copyString_000825cc(uint *dest,uint *src)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *nextPtr;\n  uint *tempPtr;\n  uint currentWord;\n  uint tempWord;\n  uint *destPtr;\n  bool isZeroByte;\n  \n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      currentChar = *(char *)src;\n      *(char *)dest = currentChar;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    tempPtr = src;\n    if (((uint)src & 1) != 0) {\n      tempPtr = (uint *)((int)src + 1);\n      currentChar = *(char *)src;\n      *(char *)dest = currentChar;\n      dest = (uint *)((int)dest + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    src = tempPtr;\n    if (((uint)tempPtr & 2) != 0) {\n      src = (uint *)((int)tempPtr + 2);\n      currentShort = *(ushort *)tempPtr;\n      isZeroByte = (currentShort & 0xff) == 0;\n      if (isZeroByte) {\n        *(char *)dest = (char)currentShort;\n      }\n      else {\n        *(ushort *)dest = currentShort;\n        isZeroByte = (currentShort & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (isZeroByte) {\n        return;\n      }\n    }\n  }\n  currentWord = *src;\n  tempPtr = src + 1;\n  destPtr = dest;\n  if (((uint)src & 4) != 0) {\n    if ((currentWord + 0xfefefeff & ~currentWord & 0x80808080) != 0) goto LAB_00082630;\n    destPtr = dest + 1;\n    *dest = currentWord;\n    tempPtr = src + 2;\n    currentWord = src[1];\n  }\n  while( true ) {\n    nextPtr = tempPtr + 1;\n    tempWord = *tempPtr;\n    dest = destPtr;\n    if ((currentWord + 0xfefefeff & ~currentWord & 0x80808080) != 0) break;\n    dest = destPtr + 1;\n    *destPtr = currentWord;\n    currentWord = tempWord;\n    if ((tempWord + 0xfefefeff & ~tempWord & 0x80808080) != 0) break;\n    tempPtr = tempPtr + 2;\n    currentWord = *nextPtr;\n    destPtr = destPtr + 2;\n    *dest = tempWord;\n  }\nLAB_00082630:\n  do {\n    *(char *)dest = (char)currentWord;\n    tempWord = currentWord & 0xff;\n    currentWord = currentWord >> 8 | currentWord << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (tempWord != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "nextPtr",
                "puVar4": "tempPtr",
                "uVar5": "currentWord",
                "uVar6": "tempWord",
                "puVar7": "destPtr",
                "bVar8": "isZeroByte"
            },
            "calling": [
                "FUN_000814d0",
                "FUN_00081570",
                "FUN_0008151c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082688": {
            "entrypoint": "0x00082688",
            "current_name": "count_trailing_zeros_00082688",
            "code": "\nint countTrailingZeros_00082688(uint value)\n\n{\n  int count;\n  uint *ptr;\n  uint data;\n  bool isZero;\n  \n  ptr = (uint *)(value & 0xfffffffc);\n  count = -(value & 3);\n  data = *ptr;\n  if ((value & 3) != 0) {\n    data = data | 0xffffffffU >> ((count + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (data + 0xfefefeff & ~data & 0x80808080) == 0) {\n    count = count + 4;\n    data = *ptr;\n  }\n  isZero = (data & 0xff) == 0;\n  if (!isZero) {\n    count = count + 1;\n    isZero = (data & 0xff00) == 0;\n  }\n  if (!isZero) {\n    count = count + 1;\n    isZero = (data & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    count = count + 1;\n  }\n  return count;\n}\n\n",
            "renaming": {
                "FUN_00082688": "count_trailing_zeros_00082688",
                "param_1": "value",
                "iVar1": "count",
                "puVar2": "ptr",
                "uVar3": "data",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_000814f6",
                "FUN_000810a6",
                "FUN_0008289c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082824": {
            "entrypoint": "0x00082824",
            "current_name": "process_data_00082824",
            "code": "\nint processData_00082824(undefined4 arg1,int arg2,int **arg3)\n\n{\n  int *ptr;\n  int result;\n  int *ptr2;\n  uint count;\n  undefined4 *ptr3;\n  uint value1;\n  uint value2;\n  \n  if (-1 < *(int *)(arg2 + 100) << 0x12) {\n    result = process_data_00083ca8();\n    arg3[2] = (int *)0x0;\n    arg3[1] = (int *)0x0;\n    return result;\n  }\n  ptr2 = arg3[2];\n  ptr = *arg3;\n  while (ptr2 != (int *)0x0) {\n    value1 = ptr[1];\n    value2 = value1 >> 2;\n    if (value2 != 0) {\n      ptr3 = (undefined4 *)(*ptr + -4);\n      count = 0;\n      do {\n        ptr3 = ptr3 + 1;\n        result = relocate_data_000839b4(arg1,*ptr3,arg2);\n        count = count + 1;\n        if (result == -1) goto LAB_00082864;\n      } while (value2 != count);\n      ptr2 = arg3[2];\n    }\n    ptr2 = (int *)((int)ptr2 - (value1 & 0xfffffffc));\n    arg3[2] = ptr2;\n    ptr = ptr + 2;\n  }\n  result = 0;\nLAB_00082864:\n  arg3[2] = (int *)0x0;\n  arg3[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082824": "process_data_00082824",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "piVar1": "ptr",
                "iVar2": "result",
                "piVar3": "ptr2",
                "uVar4": "count",
                "puVar5": "ptr3",
                "uVar6": "value1",
                "uVar7": "value2"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083ca8",
                "FUN_000839b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008289c": {
            "entrypoint": "0x0008289c",
            "current_name": "process_and_format_data_0008289c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint processAndFormatData_0008289c(int data_ptr,int config_ptr,int *******format_str_ptr,int **args_ptr)\n\n{\n  bool is_signed;\n  bool is_string;\n  bool is_hash;\n  char hash_prefix;\n  bool is_padded;\n  int ********ppppppppiVar6;\n  int *param_ptr;\n  int result;\n  char char_temp;\n  int *******pppppppiVar10;\n  uint temp1;\n  int **temp_ptr;\n  uint temp2;\n  uint temp3;\n  int loop_var1;\n  int ********ppppppppiVar16;\n  int loop_var2;\n  int *******pppppppiVar18;\n  int *piVar19;\n  int *******pppppppiVar20;\n  uint uVar21;\n  int *piVar22;\n  int *******pppppppiVar23;\n  undefined4 uVar24;\n  int ********ppppppppiVar25;\n  bool is_string6;\n  longlong long_temp;\n  int *******max_output_size;\n  int *******output_size;\n  int **arg_ptr;\n  int total_output_size;\n  char *hash_charset;\n  char hash_type;\n  undefined padding_char;\n  undefined padding_type;\n  int ********output_ptr_list;\n  int output_ptr_count;\n  int *******output_ptr_array;\n  undefined temp_char;\n  char char_stack;\n  undefined padding_char_stack;\n  undefined temp_ptr_array [4];\n  int *******local_64 [16];\n  \n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x38) == 0)) {\n    initialize_data_structures_00083888();\n  }\n  temp2 = (uint)*(ushort *)(config_ptr + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(config_ptr + 0xc) << 0x12)) {\n    temp2 = temp2 | 0x2000;\n    *(short *)(config_ptr + 0xc) = (short)temp2;\n    *(uint *)(config_ptr + 100) = *(uint *)(config_ptr + 100) & 0xffffdfff;\n  }\n  if (((int)(temp2 << 0x1c) < 0) && (*(int *)(config_ptr + 0x10) != 0)) {\n    if ((temp2 & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    result = initialize_and_process_data_0008356c(data_ptr,config_ptr);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(config_ptr + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(config_ptr + 0xe)) {\n    result = process_data_000834f0(data_ptr,config_ptr,format_str_ptr,args_ptr);\n    return result;\n  }\nLAB_000828ee:\n  hash_charset = (char *)0x0;\n  output_ptr_array = (int *******)0x0;\n  output_ptr_count = 0;\n  total_output_size = 0;\n  ppppppppiVar6 = (int ********)temp_ptr_array;\n  arg_ptr = args_ptr;\n  output_ptr_list = (int ********)temp_ptr_array;\nLAB_00082902:\n  pppppppiVar10 = format_str_ptr;\n  if ((*(char *)format_str_ptr != '\\0') && (*(char *)format_str_ptr != '%')) {\n    do {\n      pppppppiVar10 = (int *******)((int)pppppppiVar10 + 1);\n      if (*(char *)pppppppiVar10 == '\\0') break;\n    } while (*(char *)pppppppiVar10 != '%');\n    pppppppiVar20 = (int *******)((int)pppppppiVar10 - (int)format_str_ptr);\n    if (pppppppiVar20 != (int *******)0x0) {\n      output_ptr_count = output_ptr_count + 1;\n      output_ptr_array = (int *******)((int)output_ptr_array + (int)pppppppiVar20);\n      *ppppppppiVar6 = format_str_ptr;\n      ppppppppiVar6[1] = pppppppiVar20;\n      if (output_ptr_count < 8) {\n        ppppppppiVar6 = ppppppppiVar6 + 2;\n      }\n      else {\n        if (output_ptr_array == (int *******)0x0) {\n          total_output_size = total_output_size + (int)pppppppiVar20;\n          output_ptr_count = 0;\n          ppppppppiVar6 = (int ********)temp_ptr_array;\n          goto LAB_00082952;\n        }\n        result = process_data_00082824(data_ptr,config_ptr,&output_ptr_list);\n        ppppppppiVar6 = (int ********)temp_ptr_array;\n        if (result != 0) goto LAB_00083142;\n      }\n      total_output_size = total_output_size + (int)pppppppiVar20;\n    }\n  }\nLAB_00082952:\n  if (*(char *)pppppppiVar10 != '\\0') {\n    hash_type = '\\0';\n    temp3 = (uint)*(byte *)((int)pppppppiVar10 + 1);\n    temp2 = 0;\n    is_padded = false;\n    is_string = false;\n    is_signed = false;\n    is_hash = false;\n    is_string6 = false;\n    pppppppiVar20 = (int *******)0x0;\n    output_size = (int *******)0xffffffff;\n    format_str_ptr = (int *******)((int)pppppppiVar10 + 1);\nLAB_00082976:\n    format_str_ptr = (int *******)((int)format_str_ptr + 1);\nLAB_0008297a:\n    switch(temp3) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (temp3 != 0) {\n        max_output_size = (int *******)0x1;\n        output_size = (int *******)0x1;\n        ppppppppiVar25 = (int ********)&temp_char;\n        temp_char = (char)temp3;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      is_hash = true;\n      temp3 = (uint)*(byte *)format_str_ptr;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppiVar20 = (int *******)*arg_ptr;\n      arg_ptr = arg_ptr + 1;\n      if ((int)pppppppiVar20 < 0) {\n        pppppppiVar20 = (int *******)-(int)pppppppiVar20;\n        goto switchD_00082984_caseD_2d;\n      }\n      temp3 = (uint)*(byte *)format_str_ptr;\n      goto LAB_00082976;\n    case 0x2b:\n      temp3 = (uint)*(byte *)format_str_ptr;\n      hash_type = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      temp2 = temp2 | 4;\n      temp3 = (uint)*(byte *)format_str_ptr;\n      goto LAB_00082976;\n    case 0x2e:\n      temp3 = (uint)*(byte *)format_str_ptr;\n      pppppppiVar10 = (int *******)((int)format_str_ptr + 1);\n      if (temp3 == 0x2a) {\n        temp3 = (uint)*(byte *)((int)format_str_ptr + 1);\n        output_size = (int *******)*arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        format_str_ptr = pppppppiVar10;\n        if ((int)output_size < 0) {\n          output_size = (int *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      temp1 = temp3 - 0x30;\n      if (temp1 < 10) {\n        uVar21 = 0;\n        do {\n          format_str_ptr = (int *******)((int)pppppppiVar10 + 1);\n          temp3 = (uint)*(byte *)pppppppiVar10;\n          uVar21 = temp1 + uVar21 * 10;\n          temp1 = temp3 - 0x30;\n          pppppppiVar10 = format_str_ptr;\n        } while (temp1 < 10);\n        output_size = (int *******)(uVar21 | (int)uVar21 >> 0x1f);\n      }\n      else {\n        output_size = (int *******)0x0;\n        format_str_ptr = pppppppiVar10;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      temp2 = temp2 | 0x80;\n      temp3 = (uint)*(byte *)format_str_ptr;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      is_string = true;\n      if (is_signed == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      arg_ptr = (int **)((int)arg_ptr + 7U & 0xfffffff8);\n      piVar19 = *arg_ptr;\n      piVar22 = arg_ptr[1];\n      arg_ptr = arg_ptr + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      is_string = true;\n      if (is_signed != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      result = (uint)is_string << 4;\n      loop_var1 = (uint)is_signed << 5;\n      if ((is_string == 0) && (loop_var1 = (uint)is_string6 << 6, is_string6 != 0)) {\n        piVar19 = (int *)(uint)*(ushort *)arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        result = loop_var1;\n        piVar19 = *arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        piVar22 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      is_string = true;\n      if (is_signed != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((is_string) || (is_string6 == false)) {\n        result = 1;\n        piVar19 = *arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      hash_charset = \"0123456789ABCDEF\";\n      if (is_signed == false) goto LAB_00082efa;\nLAB_00082d1a:\n      temp_ptr = (int **)((int)arg_ptr + 7U & 0xfffffff8);\n      arg_ptr = temp_ptr + 2;\n      piVar19 = *temp_ptr;\n      piVar22 = temp_ptr[1];\n      goto LAB_00082d2e;\n    case 99:\n      piVar19 = *arg_ptr;\n      arg_ptr = arg_ptr + 1;\n      max_output_size = (int *******)0x1;\n      temp_char = SUB41(piVar19,0);\n      output_size = (int *******)0x1;\n      ppppppppiVar25 = (int ********)&temp_char;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (is_signed != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((is_string == false) && (is_string6 != false)) {\n        piVar19 = (int *)(int)*(short *)arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\n      else {\n        piVar19 = *arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)piVar22 < 0) {\n        is_string6 = piVar19 != (int *)0x0;\n        piVar19 = (int *)-(int)piVar19;\n        piVar22 = (int *)(-(int)piVar22 - (uint)is_string6);\n        hash_type = '-';\n        hash_prefix = '-';\n        result = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)output_size) {\n        temp2 = temp2 & 0xffffff7f;\n      }\n      is_padded = false;\n      temp3 = (uint)piVar19 | (uint)piVar22;\n      result = 1;\n      hash_prefix = hash_type;\n      goto joined_r0x00082adc;\n    case 0x68:\n      is_string6 = true;\n      temp3 = (uint)*(byte *)format_str_ptr;\n      goto LAB_00082976;\n    case 0x6c:\n      temp3 = (uint)*(byte *)format_str_ptr;\n      if (temp3 == 0x6c) {\n        is_signed = true;\n        temp3 = (uint)*(byte *)((int)format_str_ptr + 1);\n        format_str_ptr = (int *******)((int)format_str_ptr + 1);\n      }\n      else {\n        is_string = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (is_signed == false) {\n        if (is_string == false) {\n          if (is_string6) {\n            piVar19 = *arg_ptr;\n            arg_ptr = arg_ptr + 1;\n            *(short *)piVar19 = (short)total_output_size;\n          }\n          else {\n            piVar19 = *arg_ptr;\n            arg_ptr = arg_ptr + 1;\n            *piVar19 = total_output_size;\n          }\n        }\n        else {\n          piVar19 = *arg_ptr;\n          arg_ptr = arg_ptr + 1;\n          *piVar19 = total_output_size;\n        }\n      }\n      else {\n        piVar19 = *arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        *piVar19 = total_output_size;\n        piVar19[1] = total_output_size >> 0x1f;\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (is_signed == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      temp_ptr = (int **)((int)arg_ptr + 7U & 0xfffffff8);\n      arg_ptr = temp_ptr + 2;\n      piVar19 = *temp_ptr;\n      piVar22 = temp_ptr[1];\n      result = 0;\n      break;\n    case 0x70:\n      piVar19 = *arg_ptr;\n      arg_ptr = arg_ptr + 1;\n      padding_type = 0x78;\n      is_padded = true;\n      piVar22 = (int *)0x0;\n      padding_char = 0x30;\n      hash_charset = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      is_signed = true;\n      temp3 = (uint)*(byte *)format_str_ptr;\n      goto LAB_00082976;\n    case 0x73:\n      ppppppppiVar25 = (int ********)*arg_ptr;\n      hash_type = '\\0';\n      arg_ptr = arg_ptr + 1;\n      if (ppppppppiVar25 != (int ********)0x0) {\n        if ((int)output_size < 0) {\n          output_size = (int *******)count_trailing_zeros_00082688(ppppppppiVar25);\n          pppppppiVar10 = (int *******)0x0;\n          hash_prefix = hash_type;\n        }\n        else {\n          result = find_char_in_buffer_000840f8(ppppppppiVar25,0,output_size);\n          hash_prefix = hash_type;\n          if (result == 0) {\n            pppppppiVar10 = (int *******)0x0;\n          }\n          else {\n            pppppppiVar18 = (int *******)(result - (int)ppppppppiVar25);\n            if ((int)output_size <= (int)(int *******)(result - (int)ppppppppiVar25)) {\n              pppppppiVar18 = output_size;\n            }\n            pppppppiVar10 = (int *******)0x0;\n            output_size = pppppppiVar18;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((int *******)0x5 < output_size) {\n        output_size = (int *******)0x6;\n      }\n      max_output_size = (int *******)((uint)output_size & ~((int)output_size >> 0x1f));\n      ppppppppiVar25 = (int ********)&UNK_00085728;\nLAB_00082d76:\n      hash_type = '\\0';\n      pppppppiVar10 = (int *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!is_signed) goto LAB_00082ce0;\nLAB_00082bc6:\n      temp_ptr = (int **)((int)arg_ptr + 7U & 0xfffffff8);\n      arg_ptr = temp_ptr + 2;\n      piVar19 = *temp_ptr;\n      piVar22 = temp_ptr[1];\n      result = 1;\n      break;\n    case 0x78:\n      hash_charset = \"0123456789abcdef\";\n      if (is_signed != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((is_string == false) && (is_string6 != false)) {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)arg_ptr;\n        arg_ptr = arg_ptr + 1;\n      }\n      else {\n        piVar19 = *arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        piVar22 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((is_hash) && (((uint)piVar19 | (uint)piVar22) != 0)) {\n        is_padded = true;\n        padding_char = 0x30;\n        result = 2;\n        padding_type = (char)temp3;\n      }\n      else {\n        result = 2;\n      }\n    }\n    hash_type = '\\0';\n    hash_prefix = '\\0';\nLAB_00082ace:\n    if (-1 < (int)output_size) {\n      temp2 = temp2 & 0xffffff7f;\n    }\n    temp3 = (uint)piVar19 | (uint)piVar22;\njoined_r0x00082adc:\n    long_temp = CONCAT44(piVar22,piVar19);\n    pppppppiVar10 = output_size;\n    if ((temp3 == 0) && (output_size == (int *******)0x0)) {\n      ppppppppiVar25 = (int ********)temp_ptr_array;\n      if ((result != 0) || (!is_hash)) goto LAB_00082b04;\n      ppppppppiVar25 = (int ********)(&char_stack + 1);\n      padding_char_stack = '0';\n      goto LAB_00082afe;\n    }\n    if (result == 1) {\n      if (piVar22 != (int *)0x0 || (int *)0x9 < piVar19) {\n        ppppppppiVar16 = (int ********)(&char_stack + 1);\n        do {\n          ppppppppiVar25 = ppppppppiVar16;\n          uVar24 = (undefined4)((ulonglong)long_temp >> 0x20);\n          char_temp = '\\n';\n          calculate_difference_or_invalid_00084530((int)long_temp,uVar24,10,0);\n          *(char *)ppppppppiVar25 = char_temp + '0';\n          long_temp = calculate_difference_or_invalid_00084530((int)long_temp,uVar24,10,0);\n          ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n        } while (long_temp != 0);\n        output_size = (int *******)((int)temp_ptr_array - (int)ppppppppiVar25);\n        goto LAB_00082b04;\n      }\n      padding_char_stack = (char)piVar19 + '0';\n      ppppppppiVar25 = (int ********)(&char_stack + 1);\n      goto LAB_00083282;\n    }\n    ppppppppiVar16 = (int ********)(&char_stack + 1);\n    if (result != 2) goto LAB_000830e2;\n    do {\n      ppppppppiVar25 = ppppppppiVar16;\n      temp3 = (uint)piVar19 & 0xf;\n      piVar19 = (int *)((uint)piVar19 >> 4 | (int)piVar22 << 0x1c);\n      piVar22 = (int *)((uint)piVar22 >> 4);\n      *(char *)ppppppppiVar25 = hash_charset[temp3];\n      ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    } while (((uint)piVar19 | (uint)piVar22) != 0);\n    output_size = (int *******)((int)temp_ptr_array - (int)ppppppppiVar25);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (output_ptr_array != (int *******)0x0) {\n    process_data_00082824(data_ptr,config_ptr,&output_ptr_list);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(config_ptr + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return total_output_size;\nLAB_000830e2:\n  do {\n    ppppppppiVar25 = ppppppppiVar16;\n    param_ptr = (int *)((uint)piVar19 >> 3 | (int)piVar22 << 0x1d);\n    piVar22 = (int *)((uint)piVar22 >> 3);\n    result = ((uint)piVar19 & 7) + 0x30;\n    *(char *)ppppppppiVar25 = (char)result;\n    ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    piVar19 = param_ptr;\n  } while (((uint)param_ptr | (uint)piVar22) != 0);\n  if (is_hash) {\n    if (result == 0x30) {\nLAB_00082afe:\n      output_size = (int *******)((int)temp_ptr_array - (int)ppppppppiVar25);\n    }\n    else {\n      *(undefined *)((int)ppppppppiVar25 + -1) = 0x30;\n      ppppppppiVar25 = ppppppppiVar16;\n      output_size = (int *******)((int)temp_ptr_array - (int)ppppppppiVar16);\n    }\n  }\n  else {\nLAB_00083282:\n    output_size = (int *******)((int)temp_ptr_array - (int)ppppppppiVar25);\n  }\nLAB_00082b04:\n  max_output_size = output_size;\n  if ((int)output_size < (int)pppppppiVar10) {\n    max_output_size = pppppppiVar10;\n  }\n  if (hash_prefix != '\\0') {\n    max_output_size = (int *******)((int)max_output_size + 1);\n  }\nLAB_00082b1e:\n  if (is_padded) {\n    max_output_size = (int *******)((int)max_output_size + 2);\n  }\n  if ((temp2 == 0) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)max_output_size), 0 < (int)pppppppiVar18)) {\n    if ((int)pppppppiVar18 < 0x11) {\n      output_ptr_count = output_ptr_count + 1;\n    }\n    else {\n      do {\n        pppppppiVar23 = pppppppiVar18;\n        result = output_ptr_count + 1;\n        output_ptr_array = output_ptr_array + 4;\n        *ppppppppiVar6 = (int *******)0x856f0;\n        ppppppppiVar6[1] = (int *******)0x10;\n        if (result < 8) {\n          loop_var1 = output_ptr_count + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\n          output_ptr_count = result;\n        }\n        else if (output_ptr_array == (int *******)0x0) {\n          loop_var1 = 1;\n          ppppppppiVar6 = (int ********)temp_ptr_array;\n          output_ptr_count = 0;\n        }\n        else {\n          output_ptr_count = result;\n          result = process_data_00082824(data_ptr,config_ptr,&output_ptr_list);\n          if (result != 0) goto LAB_00083142;\n          loop_var1 = output_ptr_count + 1;\n          ppppppppiVar6 = (int ********)temp_ptr_array;\n        }\n        pppppppiVar18 = pppppppiVar23 + -4;\n      } while (0x10 < (int)pppppppiVar18);\n      pppppppiVar18 = pppppppiVar23 + -4;\n      output_ptr_count = loop_var1;\n    }\n    output_ptr_array = (int *******)((int)output_ptr_array + (int)pppppppiVar18);\n    *ppppppppiVar6 = (int *******)0x856f0;\n    ppppppppiVar6[1] = pppppppiVar18;\n    if (output_ptr_count < 8) {\n      result = output_ptr_count + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (output_ptr_array == (int *******)0x0) {\n      result = 1;\n      output_ptr_count = 0;\n      ppppppppiVar6 = (int ********)temp_ptr_array;\n    }\n    else {\n      result = process_data_00082824(data_ptr,config_ptr,&output_ptr_list);\n      if (result != 0) goto LAB_00083142;\n      result = output_ptr_count + 1;\n      ppppppppiVar6 = (int ********)temp_ptr_array;\n    }\n  }\n  else {\n    result = output_ptr_count + 1;\n  }\n  loop_var1 = result;\n  if (hash_type != '\\0') {\n    output_ptr_array = (int *******)((int)output_ptr_array + 1);\n    loop_var1 = 1;\n    *ppppppppiVar6 = (int *******)&hash_type;\n    ppppppppiVar6[1] = (int *******)0x1;\n    output_ptr_count = result;\n    if (result < 8) {\n      loop_var1 = result + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (output_ptr_array == (int *******)0x0) {\n      output_ptr_count = 0;\n      ppppppppiVar6 = (int ********)temp_ptr_array;\n    }\n    else {\n      result = process_data_00082824(data_ptr,config_ptr,&output_ptr_list);\n      if (result != 0) goto LAB_00083142;\n      loop_var1 = output_ptr_count + 1;\n      ppppppppiVar6 = (int ********)temp_ptr_array;\n    }\n  }\n  result = loop_var1;\n  loop_var2 = output_ptr_count;\n  if (is_padded) {\n    output_ptr_array = (int *******)((int)output_ptr_array + 2);\n    *ppppppppiVar6 = (int *******)&padding_char;\n    ppppppppiVar6[1] = (int *******)0x2;\n    if (loop_var1 < 8) {\n      result = loop_var1 + 1;\n      loop_var2 = loop_var1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (output_ptr_array == (int *******)0x0) {\n      result = 1;\n      loop_var2 = 0;\n      ppppppppiVar6 = (int ********)temp_ptr_array;\n    }\n    else {\n      output_ptr_count = loop_var1;\n      result = process_data_00082824(data_ptr,config_ptr,&output_ptr_list);\n      if (result != 0) goto LAB_00083142;\n      result = output_ptr_count + 1;\n      loop_var2 = output_ptr_count;\n      ppppppppiVar6 = (int ********)temp_ptr_array;\n    }\n  }\n  output_ptr_count = loop_var2;\n  if ((temp2 == 0x80) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)max_output_size), 0 < (int)pppppppiVar18)) {\n    if (0x10 < (int)pppppppiVar18) {\n      do {\n        while( true ) {\n          pppppppiVar23 = pppppppiVar18;\n          output_ptr_count = loop_var2 + 1;\n          output_ptr_array = output_ptr_array + 4;\n          *ppppppppiVar6 = (int *******)\"0000000000000000\";\n          ppppppppiVar6[1] = (int *******)0x10;\n          if (7 < output_ptr_count) break;\n          result = loop_var2 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\nLAB_000831f2:\n          loop_var2 = output_ptr_count;\n          pppppppiVar18 = pppppppiVar23 + -4;\n          if ((int)(pppppppiVar23 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (output_ptr_array != (int *******)0x0) {\n          result = process_data_00082824(data_ptr,config_ptr,&output_ptr_list);\n          if (result == 0) {\n            result = output_ptr_count + 1;\n            ppppppppiVar6 = (int ********)temp_ptr_array;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        loop_var2 = 0;\n        pppppppiVar18 = pppppppiVar23 + -4;\n        ppppppppiVar6 = (int ********)temp_ptr_array;\n      } while (0x10 < (int)(pppppppiVar23 + -4));\nLAB_00083218:\n      pppppppiVar18 = pppppppiVar23 + -4;\n    }\n    output_ptr_array = (int *******)((int)output_ptr_array + (int)pppppppiVar18);\n    *ppppppppiVar6 = (int *******)\"0000000000000000\";\n    ppppppppiVar6[1] = pppppppiVar18;\n    output_ptr_count = result;\n    if (result < 8) {\n      result = result + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (output_ptr_array == (int *******)0x0) {\n      result = 1;\n      output_ptr_count = 0;\n      ppppppppiVar6 = (int ********)temp_ptr_array;\n    }\n    else {\n      result = process_data_00082824(data_ptr,config_ptr,&output_ptr_list);\n      if (result != 0) goto LAB_00083142;\n      result = output_ptr_count + 1;\n      ppppppppiVar6 = (int ********)temp_ptr_array;\n    }\n  }\n  pppppppiVar10 = (int *******)((int)pppppppiVar10 - (int)output_size);\n  ppppppppiVar16 = (int ********)temp_ptr_array;\n  if ((int)pppppppiVar10 < 1) {\nLAB_0008302a:\n    output_ptr_array = (int *******)((int)output_ptr_array + (int)output_size);\n    *ppppppppiVar6 = (int *******)ppppppppiVar25;\n    ppppppppiVar6[1] = output_size;\n    output_size = output_ptr_array;\n    output_ptr_count = result;\n    if (result < 8) goto LAB_000831be;\n    if (output_ptr_array == (int *******)0x0) {\n      output_ptr_count = 0;\n    }\n    else {\n      result = process_data_00082824(data_ptr,config_ptr,&output_ptr_list);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  else {\n    loop_var1 = output_ptr_count;\n    if (0x10 < (int)pppppppiVar10) {\n      do {\n        while( true ) {\n          pppppppiVar18 = pppppppiVar10;\n          output_ptr_count = loop_var1 + 1;\n          output_ptr_array = output_ptr_array + 4;\n          *ppppppppiVar6 = (int *******)\"0000000000000000\";\n          ppppppppiVar6[1] = (int *******)0x10;\n          if (7 < output_ptr_count) break;\n          result = loop_var1 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\nLAB_00082fe6:\n          loop_var1 = output_ptr_count;\n          pppppppiVar10 = pppppppiVar18 + -4;\n          if ((int)(pppppppiVar18 + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (output_ptr_array != (int *******)0x0) {\n          result = process_data_00082824(data_ptr,config_ptr,&output_ptr_list);\n          if (result == 0) {\n            result = output_ptr_count + 1;\n            ppppppppiVar6 = (int ********)temp_ptr_array;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        ppppppppiVar6 = (int ********)temp_ptr_array;\n        loop_var1 = 0;\n        pppppppiVar10 = pppppppiVar18 + -4;\n      } while (0x10 < (int)(pppppppiVar18 + -4));\nLAB_0008300e:\n      pppppppiVar10 = pppppppiVar18 + -4;\n    }\n    output_ptr_array = (int *******)((int)output_ptr_array + (int)pppppppiVar10);\n    *ppppppppiVar6 = (int *******)\"0000000000000000\";\n    ppppppppiVar6[1] = pppppppiVar10;\n    if (result < 8) {\n      result = result + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n      goto LAB_0008302a;\n    }\n    if (output_ptr_array != (int *******)0x0) {\n      output_ptr_count = result;\n      result = process_data_00082824(data_ptr,config_ptr,&output_ptr_list);\n      if (result != 0) goto LAB_00083142;\n      result = output_ptr_count + 1;\n      ppppppppiVar6 = (int ********)temp_ptr_array;\n      goto LAB_0008302a;\n    }\n    local_64[0] = output_size;\n    output_ptr_count = 1;\n    ppppppppiVar6 = (int ********)temp_ptr_array;\n    temp_ptr_array = (undefined  [4])ppppppppiVar25;\nLAB_000831be:\n    ppppppppiVar16 = ppppppppiVar6 + 2;\n    output_ptr_array = output_size;\n  }\n  if (((temp2 & 4) != 0) &&\n     (pppppppiVar10 = (int *******)((int)pppppppiVar20 - (int)max_output_size), 0 < (int)pppppppiVar10)) {\n    result = output_ptr_count;\n    if ((int)pppppppiVar10 < 0x11) {\n      loop_var1 = output_ptr_count + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          output_ptr_count = result + 1;\n          output_ptr_array = output_ptr_array + 4;\n          *ppppppppiVar16 = (int *******)0x856f0;\n          ppppppppiVar16[1] = (int *******)0x10;\n          if (7 < output_ptr_count) break;\n          loop_var1 = result + 2;\n          ppppppppiVar16 = ppppppppiVar16 + 2;\nLAB_0008307a:\n          pppppppiVar10 = pppppppiVar10 + -4;\n          result = output_ptr_count;\n          if ((int)pppppppiVar10 < 0x11) goto LAB_000830a2;\n        }\n        if (output_ptr_array != (int *******)0x0) {\n          result = process_data_00082824(data_ptr,config_ptr,&output_ptr_list);\n          if (result == 0) {\n            loop_var1 = output_ptr_count + 1;\n            ppppppppiVar16 = (int ********)temp_ptr_array;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        pppppppiVar10 = pppppppiVar10 + -4;\n        loop_var1 = 1;\n        result = 0;\n        ppppppppiVar16 = (int ********)temp_ptr_array;\n      } while (0x10 < (int)pppppppiVar10);\n    }\nLAB_000830a2:\n    output_ptr_array = (int *******)((int)output_ptr_array + (int)pppppppiVar10);\n    *ppppppppiVar16 = (int *******)0x856f0;\n    ppppppppiVar16[1] = pppppppiVar10;\n    output_ptr_count = loop_var1;\n    if (7 < loop_var1) {\n      if (output_ptr_array == (int *******)0x0) {\n        if ((int)max_output_size < (int)pppppppiVar20) {\n          max_output_size = pppppppiVar20;\n        }\n        total_output_size = total_output_size + (int)max_output_size;\n        goto LAB_00083186;\n      }\n      result = process_data_00082824(data_ptr,config_ptr,&output_ptr_list);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)max_output_size < (int)pppppppiVar20) {\n    max_output_size = pppppppiVar20;\n  }\n  total_output_size = total_output_size + (int)max_output_size;\n  if ((output_ptr_array != (int *******)0x0) &&\n     (result = process_data_00082824(data_ptr,config_ptr,&output_ptr_list), result != 0)) goto LAB_00083142;\nLAB_00083186:\n  output_ptr_count = 0;\n  ppppppppiVar6 = (int ********)temp_ptr_array;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  temp1 = temp3 - 0x30;\n  pppppppiVar20 = (int *******)0x0;\n  pppppppiVar10 = format_str_ptr;\n  do {\n    format_str_ptr = (int *******)((int)pppppppiVar10 + 1);\n    temp3 = (uint)*(byte *)pppppppiVar10;\n    pppppppiVar20 = (int *******)(temp1 + (int)pppppppiVar20 * 10);\n    temp1 = temp3 - 0x30;\n    pppppppiVar10 = format_str_ptr;\n  } while (temp1 < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  temp3 = (uint)*(byte *)format_str_ptr;\n  if (hash_type == '\\0') {\n    hash_type = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "renaming": {
                "FUN_0008289c": "process_and_format_data_0008289c",
                "param_1": "data_ptr",
                "param_2": "config_ptr",
                "param_3": "format_str_ptr",
                "param_4": "args_ptr",
                "bVar1": "is_signed",
                "bVar2": "is_string",
                "bVar3": "is_hash",
                "cVar4": "hash_prefix",
                "bVar5": "is_padded",
                "piVar7": "param_ptr",
                "iVar8": "result",
                "cVar9": "char_temp",
                "uVar11": "temp1",
                "ppiVar12": "temp_ptr",
                "uVar13": "temp2",
                "uVar14": "temp3",
                "iVar15": "loop_var1",
                "iVar17": "loop_var2",
                "lVar27": "long_temp",
                "local_dc": "max_output_size",
                "local_d4": "output_size",
                "local_c8": "arg_ptr",
                "local_c4": "total_output_size",
                "local_c0": "hash_charset",
                "local_a1": "hash_type",
                "local_a0": "padding_char",
                "local_9f": "padding_type",
                "local_9c": "output_ptr_list",
                "local_98": "output_ptr_count",
                "local_94": "output_ptr_array",
                "local_90": "temp_char",
                "cStack_6a": "char_stack",
                "local_69": "padding_char_stack",
                "local_68": "temp_ptr_array"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_00081750",
                "FUN_000817c8"
            ],
            "called": [
                "FUN_00083888",
                "FUN_000834f0",
                "FUN_0008356c",
                "FUN_000840f8",
                "FUN_00082824",
                "FUN_00082688",
                "FUN_00084530"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000834f0": {
            "entrypoint": "0x000834f0",
            "current_name": "process_data_000834f0",
            "code": "\nint processData_000834f0(undefined4 param,int data)\n\n{\n  int returnValue;\n  int result;\n  undefined *buffer [2];\n  undefined4 size1;\n  ushort value1;\n  undefined2 value2;\n  undefined *ptr1;\n  undefined4 size2;\n  undefined4 value3;\n  undefined4 ptr2;\n  undefined4 ptr3;\n  undefined4 ptr4;\n  undefined stackBuffer [1024];\n  \n  ptr4 = *(undefined4 *)(data + 100);\n  ptr2 = *(undefined4 *)(data + 0x1c);\n  value2 = *(undefined2 *)(data + 0xe);\n  ptr3 = *(undefined4 *)(data + 0x24);\n  buffer[0] = stackBuffer;\n  value1 = *(ushort *)(data + 0xc) & 0xfffd;\n  size1 = 0x400;\n  size2 = 0x400;\n  value3 = 0;\n  ptr1 = buffer[0];\n  returnValue = process_and_format_data_0008289c(param,buffer);\n  if ((-1 < returnValue) && (result = process_binary_data_00083850(param,buffer), result != 0)) {\n    returnValue = -1;\n  }\n  if ((int)((uint)value1 << 0x19) < 0) {\n    *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) | 0x40;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000834f0": "process_data_000834f0",
                "param_1": "param",
                "param_2": "data",
                "iVar1": "returnValue",
                "iVar2": "result",
                "local_488": "buffer",
                "local_480": "size1",
                "local_47c": "value1",
                "local_47a": "value2",
                "local_478": "ptr1",
                "local_474": "size2",
                "local_470": "value3",
                "local_46c": "ptr2",
                "local_464": "ptr3",
                "local_424": "ptr4",
                "auStack_420": "stackBuffer"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083850",
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint FUN_000834f0(undefined4 param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined *local_488 [2];\n  undefined4 local_480;\n  ushort local_47c;\n  undefined2 local_47a;\n  undefined *local_478;\n  undefined4 local_474;\n  undefined4 local_470;\n  undefined4 local_46c;\n  undefined4 local_464;\n  undefined4 local_424;\n  undefined auStack_420 [1024];\n  \n  local_424 = *(undefined4 *)(param_2 + 100);\n  local_46c = *(undefined4 *)(param_2 + 0x1c);\n  local_47a = *(undefined2 *)(param_2 + 0xe);\n  local_464 = *(undefined4 *)(param_2 + 0x24);\n  local_488[0] = auStack_420;\n  local_47c = *(ushort *)(param_2 + 0xc) & 0xfffd;\n  local_480 = 0x400;\n  local_474 = 0x400;\n  local_470 = 0;\n  local_478 = local_488[0];\n  iVar1 = FUNC_0008289c(param_1,local_488);\n  if ((-1 < iVar1) && (iVar2 = process_binary_data_00083850(param_1,local_488), iVar2 != 0)) {\n    iVar1 = -1;\n  }\n  if ((int)((uint)local_47c << 0x19) < 0) {\n    *(ushort *)(param_2 + 0xc) = *(ushort *)(param_2 + 0xc) | 0x40;\n  }\n  return iVar1;\n}\n\n"
        },
        "FUN_0008356c": {
            "entrypoint": "0x0008356c",
            "current_name": "initialize_and_process_data_0008356c",
            "code": "\nundefined4 initialize_and_process_data_0008356c(undefined4 *output_status,int *input_data)\n\n{\n  int condition_check;\n  int data_value;\n  uint temp_var;\n  ushort data_flags;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    initialize_data_structures_00083888();\n  }\n  data_flags = *(ushort *)(input_data + 3);\n  temp_var = (uint)data_flags;\n  if ((int)(temp_var << 0x1c) < 0) {\n    data_value = input_data[4];\n  }\n  else {\n    if (-1 < (int)(temp_var << 0x1b)) {\n      *output_status = 9;\n      *(ushort *)(input_data + 3) = data_flags | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(temp_var << 0x1d) < 0) {\n      if ((int *)input_data[0xc] != (int *)0x0) {\n        if ((int *)input_data[0xc] != input_data + 0x10) {\n          process_relocations_00083b10(output_status);\n          data_flags = *(ushort *)(input_data + 3);\n        }\n        input_data[0xc] = 0;\n      }\n      data_value = input_data[4];\n      data_flags = data_flags & 0xffdb;\n      *input_data = data_value;\n      input_data[1] = 0;\n    }\n    else {\n      data_value = input_data[4];\n    }\n    *(ushort *)(input_data + 3) = data_flags | 8;\n    temp_var = (uint)(data_flags | 8);\n  }\n  if ((data_value == 0) && ((temp_var & 0x280) != 0x200)) {\n    process_binary_function_00084018(output_status,input_data);\n    temp_var = (uint)*(ushort *)(input_data + 3);\n    data_value = input_data[4];\n  }\n  if ((temp_var & 1) == 0) {\n    condition_check = 0;\n    if (-1 < (int)(temp_var << 0x1e)) {\n      condition_check = input_data[5];\n    }\n    input_data[2] = condition_check;\n  }\n  else {\n    input_data[6] = -input_data[5];\n    input_data[2] = 0;\n  }\n  if ((data_value == 0) && ((int)((uint)*(ushort *)(input_data + 3) << 0x18) < 0)) {\n    *(ushort *)(input_data + 3) = *(ushort *)(input_data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0008356c": "initialize_and_process_data_0008356c",
                "param_1": "output_status",
                "param_2": "input_data",
                "iVar1": "condition_check",
                "iVar2": "data_value",
                "uVar3": "temp_var",
                "uVar4": "data_flags"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_000842a4",
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083888",
                "FUN_00084018",
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000836d8": {
            "entrypoint": "0x000836d8",
            "current_name": "FUNC_000836d8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x00083630) */\n/* WARNING: Removing unreachable block (ram,0x000836c4) */\n/* WARNING: Removing unreachable block (ram,0x00083642) */\n/* WARNING: Removing unreachable block (ram,0x00083648) */\n/* WARNING: Removing unreachable block (ram,0x00083654) */\n/* WARNING: Removing unreachable block (ram,0x0008366e) */\n/* WARNING: Removing unreachable block (ram,0x0008364c) */\n/* WARNING: Removing unreachable block (ram,0x00083686) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n/* WARNING: Removing unreachable block (ram,0x00083688) */\n\nvoid FUNC_000836d8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836d8": "FUNC_000836d8"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000836ec": {
            "entrypoint": "0x000836ec",
            "current_name": "execute_and_handle_infinite_loop_000836ec",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n\nvoid executeAndHandleInfiniteLoop_000836ec(void)\n\n{\n  dword *pointer;\n  dword status;\n  int index;\n  code *jumptable;\n  \n  execute_function_000841e4(6);\n  jumptable = (code *)0x836fb;\n  status = infinite_loop_with_status_00080eec(1);\n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  index = *(int *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  pointer = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < index) {\n    pointer = (dword *)relocate_and_resolve_symbols_000817f0(400);\n    if (pointer == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumptable)(0xffffffff);\n      return;\n    }\n    *pointer = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    pointer[1] = 0;\n    index = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)pointer;\n    pointer[0x62] = 0;\n    pointer[99] = 0;\n  }\n  pointer[1] = index + 1;\n  pointer[index + 2] = status;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumptable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836ec": "execute_and_handle_infinite_loop_000836ec",
                "pdVar1": "pointer",
                "dVar2": "status",
                "iVar3": "index",
                "UNRECOVERED_JUMPTABLE_00": "jumptable"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_00080eec",
                "FUN_000841e4",
                "FUN_000817f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083850": {
            "entrypoint": "0x00083850",
            "current_name": "process_binary_data_00083850",
            "code": "\nundefined4 processBinaryData_00083850(int *dataPointer,int *infoPointer)\n\n{\n  int *tempPointer;\n  int tempVar1;\n  ushort flags;\n  uint flagsCopy;\n  int tempVar2;\n  code *functionPointer;\n  undefined4 returnValue;\n  int tempVar3;\n  \n  if ((dataPointer != (int *)0x0) && (dataPointer[0xe] == 0)) {\n    initialize_data_structures_00083888();\n  }\n  if (*(short *)(infoPointer + 3) == 0) {\n    return 0;\n  }\n  flags = *(ushort *)(infoPointer + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    tempVar3 = infoPointer[4];\n    if (tempVar3 == 0) {\n      return 0;\n    }\n    tempVar1 = *infoPointer;\n    if ((flags & 3) == 0) {\n      tempVar2 = infoPointer[5];\n    }\n    else {\n      tempVar2 = 0;\n    }\n    *infoPointer = tempVar3;\n    tempVar1 = tempVar1 - tempVar3;\n    infoPointer[2] = tempVar2;\n    do {\n      if (tempVar1 < 1) {\n        return 0;\n      }\n      tempVar2 = (*(code *)infoPointer[9])(dataPointer,infoPointer[7],tempVar3,tempVar1,returnValue);\n      tempVar1 = tempVar1 - tempVar2;\n      tempVar3 = tempVar3 + tempVar2;\n    } while (0 < tempVar2);\nLAB_000837c8:\n    *(ushort *)(infoPointer + 3) = *(ushort *)(infoPointer + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(infoPointer + 3) = flags | 0x800;\n  if ((infoPointer[1] < 1) && (infoPointer[0xf] < 1)) {\n    return 0;\n  }\n  functionPointer = (code *)infoPointer[10];\n  if (functionPointer == (code *)0x0) {\n    return 0;\n  }\n  flagsCopy = (uint)(flags | 0x800);\n  tempVar3 = *dataPointer;\n  *dataPointer = 0;\n  if ((flags & 0x1000) == 0) {\n    tempVar1 = (*functionPointer)(dataPointer,infoPointer[7],flagsCopy & 0x1000,1);\n    if ((tempVar1 == -1) && (tempVar2 = *dataPointer, tempVar2 != 0)) {\n      if ((tempVar2 == 0x1d) || (tempVar2 == 0x16)) {\n        *dataPointer = tempVar3;\n        return 0;\n      }\n      goto LAB_000837c8;\n    }\n    flagsCopy = (uint)*(ushort *)(infoPointer + 3);\n    functionPointer = (code *)infoPointer[10];\n  }\n  else {\n    tempVar1 = infoPointer[0x14];\n  }\n  if (((int)(flagsCopy << 0x1d) < 0) && (tempVar1 = tempVar1 - infoPointer[1], infoPointer[0xc] != 0)) {\n    tempVar1 = tempVar1 - infoPointer[0xf];\n  }\n  tempVar1 = (*functionPointer)(dataPointer,infoPointer[7],tempVar1,0);\n  if (tempVar1 == -1) {\n    tempVar2 = *dataPointer;\n    if (tempVar2 != 0) {\n      if ((tempVar2 != 0x1d) && (tempVar2 != 0x16)) {\n        *(ushort *)(infoPointer + 3) = *(ushort *)(infoPointer + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(infoPointer + 3) = *(ushort *)(infoPointer + 3) & 0xf7ff;\n      *infoPointer = infoPointer[4];\n      infoPointer[1] = 0;\n      goto LAB_00083774;\n    }\n    flags = *(ushort *)(infoPointer + 3) & 0xf7ff;\n    infoPointer[1] = 0;\n    *(ushort *)(infoPointer + 3) = flags;\n    *infoPointer = infoPointer[4];\n  }\n  else {\n    flags = *(ushort *)(infoPointer + 3) & 0xf7ff;\n    *infoPointer = infoPointer[4];\n    *(ushort *)(infoPointer + 3) = flags;\n    infoPointer[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    infoPointer[0x14] = tempVar1;\n  }\nLAB_00083774:\n  tempPointer = (int *)infoPointer[0xc];\n  *dataPointer = tempVar3;\n  if (tempPointer == (int *)0x0) {\n    return 0;\n  }\n  if (tempPointer != infoPointer + 0x10) {\n    process_relocations_00083b10(dataPointer);\n  }\n  infoPointer[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083850": "process_binary_data_00083850",
                "param_1": "dataPointer",
                "param_2": "infoPointer",
                "piVar1": "tempPointer",
                "iVar2": "tempVar1",
                "uVar3": "flags",
                "uVar4": "flagsCopy",
                "iVar5": "tempVar2",
                "pcVar6": "functionPointer",
                "unaff_r4": "returnValue",
                "iVar7": "tempVar3"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_00084484",
                "FUN_00083ca8",
                "FUN_000842a4"
            ],
            "called": [
                "FUN_00083888",
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083888": {
            "entrypoint": "0x00083888",
            "current_name": "initialize_data_structures_00083888",
            "code": "\nvoid initializeDataStructures_00083888(int dataStructurePointer)\n\n{\n  undefined4 *array1;\n  undefined4 *array2;\n  \n  if (*(int *)(dataStructurePointer + 0x38) == 0) {\n    array1 = *(undefined4 **)(dataStructurePointer + 4);\n    *(undefined **)(dataStructurePointer + 0x3c) = &LAB_0008387c_1;\n    *(undefined4 *)(dataStructurePointer + 0x2e4) = 3;\n    *(int *)(dataStructurePointer + 0x2e8) = dataStructurePointer + 0x2ec;\n    *(undefined4 *)(dataStructurePointer + 0x2e0) = 0;\n    *(undefined2 *)(array1 + 3) = 4;\n    *array1 = 0;\n    array1[1] = 0;\n    array1[2] = 0;\n    array1[0x19] = 0;\n    *(undefined2 *)((int)array1 + 0xe) = 0;\n    array1[4] = 0;\n    array1[5] = 0;\n    array1[6] = 0;\n    improve_and_expand_00081f00(array1 + 0x17,0,8);\n    array2 = *(undefined4 **)(dataStructurePointer + 8);\n    array1[7] = array1;\n    array1[8] = 0x84221;\n    array1[9] = 0x84245;\n    array1[10] = 0x8427d;\n    array1[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)((int)array2 + 0xe) = 1;\n    *(undefined2 *)(array2 + 3) = 9;\n    *array2 = 0;\n    array2[1] = 0;\n    array2[2] = 0;\n    array2[0x19] = 0;\n    array2[4] = 0;\n    array2[5] = 0;\n    array2[6] = 0;\n    improve_and_expand_00081f00(array2 + 0x17,0,8);\n    array1 = *(undefined4 **)(dataStructurePointer + 0xc);\n    array2[7] = array2;\n    array2[8] = 0x84221;\n    array2[9] = 0x84245;\n    array2[10] = 0x8427d;\n    array2[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)(array1 + 3) = 0x12;\n    *(undefined2 *)((int)array1 + 0xe) = 2;\n    *array1 = 0;\n    array1[1] = 0;\n    array1[2] = 0;\n    array1[0x19] = 0;\n    array1[4] = 0;\n    array1[5] = 0;\n    array1[6] = 0;\n    improve_and_expand_00081f00(array1 + 0x17,0,8);\n    array1[7] = array1;\n    array1[8] = 0x84221;\n    array1[9] = 0x84245;\n    array1[10] = 0x8427d;\n    array1[0xb] = &LAB_0008429c_1;\n    *(undefined4 *)(dataStructurePointer + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "dataStructurePointer",
                "puVar1": "array1",
                "puVar2": "array2"
            },
            "calling": [
                "FUN_00084484",
                "FUN_00083850",
                "FUN_000842a4",
                "FUN_0008356c",
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008397c": {
            "entrypoint": "0x0008397c",
            "current_name": "FUNC_0008397c",
            "code": "\nvoid FUNC_0008397c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008397c": "FUNC_0008397c"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083980": {
            "entrypoint": "0x00083980",
            "current_name": "FUNC_00083980",
            "code": "\nvoid FUNC_00083980(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083980": "FUNC_00083980"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000839b4": {
            "entrypoint": "0x000839b4",
            "current_name": "relocate_data_000839b4",
            "code": "\nuint relocateData_000839b4(undefined4 param1,uint param2,byte **param3)\n\n{\n  int offset;\n  uint relocationResult;\n  uint currentByte;\n  byte *bytePtr;\n  uint index;\n  byte currentByte;\n  byte byteStack [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(param3 + 3) << 0x12)) {\n    *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x2000;\n    param3[0x19] = (byte *)((uint)param3[0x19] | 0x2000);\n  }\n  offset = get_elf32_rel_offset_0008400c();\n  if ((offset == 1) && (param2 - 1 < 0xff)) {\n    currentByte = param2 & 0xff;\n    currentByte = (byte)currentByte;\n    relocationResult = 1;\n  }\n  else {\n    relocationResult = execute_relocation_0008434c(param1,&currentByte,param2,param3 + 0x17);\n    if (relocationResult == 0xffffffff) {\n      *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (relocationResult == 0) {\n      return param2;\n    }\n    currentByte = (uint)currentByte;\n  }\n  index = 0;\n  do {\n    bytePtr = param3[2] + -1;\n    param3[2] = bytePtr;\n    if ((int)bytePtr < 0) {\n      if ((int)param3[6] <= (int)bytePtr) {\n        **param3 = (byte)currentByte;\n        bytePtr = *param3;\n        currentByte = (uint)*bytePtr;\n        if (currentByte != 10) goto LAB_00083a04;\n      }\n      offset = process_data_000842a4(param1,currentByte,param3);\n      if (offset == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **param3 = (byte)currentByte;\n      bytePtr = *param3;\nLAB_00083a04:\n      *param3 = bytePtr + 1;\n    }\n    if (relocationResult <= index + 1) {\n      return param2;\n    }\n    currentByte = (uint)byteStack[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000839b4": "relocate_data_000839b4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "offset",
                "uVar2": "relocationResult",
                "uVar3": "currentByte",
                "pbVar4": "bytePtr",
                "uVar5": "index",
                "local_1c": "currentByte",
                "abStack_1b": "byteStack"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_0008400c",
                "FUN_000842a4",
                "FUN_0008434c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083a74": {
            "entrypoint": "0x00083a74",
            "current_name": "adjust_memory_region_00083a74",
            "code": "\nundefined4 adjustMemoryRegion_00083a74(undefined4 memAddress,int memSize)\n\n{\n  int result;\n  uint info;\n  int adjustedSize;\n  \n  FUNC_00081f94();\n  info = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  adjustedSize = ((info - memSize) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjustedSize) {\n    result = check_and_assign_previous_result_0008236c(memAddress,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + info) {\n      result = check_and_assign_previous_result_0008236c(memAddress,-adjustedSize);\n      if (result != -1) {\n        DAT_2007121c = DAT_2007121c - adjustedSize;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = info - adjustedSize | 1;\n        FUNC_00081f98(memAddress);\n        return 1;\n      }\n      adjustedSize = check_and_assign_previous_result_0008236c(memAddress,0);\n      if (0xf < (int)(adjustedSize - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_2007121c = adjustedSize - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             adjustedSize - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_00081f98(memAddress);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083a74": "adjust_memory_region_00083a74",
                "param_1": "memAddress",
                "param_2": "memSize",
                "iVar1": "result",
                "uVar2": "info",
                "iVar3": "adjustedSize"
            },
            "calling": [
                "FUN_00083b10"
            ],
            "called": [
                "FUN_0008236c",
                "FUN_00081f94",
                "FUN_00081f98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b10": {
            "entrypoint": "0x00083b10",
            "current_name": "process_relocations_00083b10",
            "code": "\nvoid processRelocations_00083b10(undefined4 arg1,int arg2)\n\n{\n  int index;\n  bool isSpecialCase;\n  uint flags;\n  dword currentReloc;\n  int nextIndex;\n  uint offset;\n  dword prevReloc;\n  uint totalOffset;\n  dword specialReloc;\n  \n  if (arg2 == 0) {\n    return;\n  }\n  FUNC_00081f94();\n  flags = *(uint *)(arg2 + -4);\n  prevReloc = arg2 - 8;\n  offset = flags & 0xfffffffe;\n  currentReloc = prevReloc + offset;\n  totalOffset = *(uint *)(currentReloc + 4) & 0xfffffffc;\n  if (relocArray[141].r_info == currentReloc) {\n    totalOffset = totalOffset + offset;\n    if (-1 < (int)(flags << 0x1f)) {\n      prevReloc = prevReloc - *(int *)(arg2 + -8);\n      nextIndex = *(int *)(prevReloc + 0xc);\n      index = *(int *)(prevReloc + 8);\n      totalOffset = totalOffset + *(int *)(arg2 + -8);\n      *(int *)(index + 0xc) = nextIndex;\n      *(int *)(nextIndex + 8) = index;\n    }\n    currentReloc = relocArray[269].r_info;\n    *(uint *)(prevReloc + 4) = totalOffset | 1;\n    relocArray[141].r_info = prevReloc;\n    if (currentReloc <= totalOffset) {\n      adjustMemoryRegion(arg1,DAT_20071218);\n    }\n  }\n  else {\n    *(uint *)(currentReloc + 4) = totalOffset;\n    if ((flags & 1) == 0) {\n      prevReloc = prevReloc - *(int *)(arg2 + -8);\n      index = *(int *)(prevReloc + 8);\n      offset = offset + *(int *)(arg2 + -8);\n      if (index == 0x2007046c) {\n        isSpecialCase = true;\n      }\n      else {\n        nextIndex = *(int *)(prevReloc + 0xc);\n        *(int *)(index + 0xc) = nextIndex;\n        *(int *)(nextIndex + 8) = index;\n        isSpecialCase = false;\n      }\n    }\n    else {\n      isSpecialCase = false;\n    }\n    if (-1 < *(int *)(currentReloc + totalOffset + 4) << 0x1f) {\n      offset = offset + totalOffset;\n      index = *(int *)(currentReloc + 8);\n      if ((!isSpecialCase) && (index == 0x2007046c)) {\n        relocArray[142].r_info = prevReloc;\n        relocArray[143].r_offset = prevReloc;\n        *(undefined4 *)(prevReloc + 0xc) = 0x2007046c;\n        *(undefined4 *)(prevReloc + 8) = 0x2007046c;\n        *(uint *)(prevReloc + 4) = offset | 1;\n        *(uint *)(prevReloc + offset) = offset;\n        goto endLabel;\n      }\n      nextIndex = *(int *)(currentReloc + 0xc);\n      *(int *)(index + 0xc) = nextIndex;\n      *(int *)(nextIndex + 8) = index;\n    }\n    *(uint *)(prevReloc + 4) = offset | 1;\n    *(uint *)(prevReloc + offset) = offset;\n    if (!isSpecialCase) {\n      if (offset < 0x200) {\n        flags = offset & 0xfffffff8;\n        index = *(int *)((int)&relocArray[0x8d].r_info + flags);\n        relocArray[141].r_offset =\n             relocArray[141].r_offset | 1 << ((int)(offset >> 3) >> 2 & 0xffU);\n        *(int *)(prevReloc + 8) = index;\n        *(uint *)(prevReloc + 0xc) = flags + 0x20070464;\n        *(dword *)((int)&relocArray[0x8d].r_info + flags) = prevReloc;\n        *(dword *)(index + 0xc) = prevReloc;\n        FUNC_00081f98(arg1);\n        return;\n      }\n      flags = offset >> 9;\n      if (flags < 5) {\n        index = (offset >> 6) + 0x38;\n        nextIndex = index * 2;\n      }\n      else if (flags < 0x15) {\n        index = flags + 0x5b;\n        nextIndex = index * 2;\n      }\n      else if (flags < 0x55) {\n        index = (offset >> 0xc) + 0x6e;\n        nextIndex = index * 2;\n      }\n      else if (flags < 0x155) {\n        index = (offset >> 0xf) + 0x77;\n        nextIndex = index * 2;\n      }\n      else if (flags < 0x555) {\n        index = (offset >> 0x12) + 0x7c;\n        nextIndex = index * 2;\n      }\n      else {\n        nextIndex = 0xfc;\n        index = 0x7e;\n      }\n      specialReloc = nextIndex * 4 + 0x20070464;\n      currentReloc = (&relocArray[0x8d].r_info)[nextIndex];\n      if (currentReloc == specialReloc) {\n        relocArray[141].r_offset =\n             relocArray[141].r_offset | 1 << (index >> 2 & 0xffU);\n        specialReloc = currentReloc;\n      }\n      else {\n        do {\n          if ((*(uint *)(currentReloc + 4) & 0xfffffffc) <= offset) break;\n          currentReloc = *(dword *)(currentReloc + 8);\n        } while (specialReloc != currentReloc);\n        specialReloc = *(dword *)(currentReloc + 0xc);\n      }\n      *(dword *)(prevReloc + 0xc) = specialReloc;\n      *(dword *)(prevReloc + 8) = currentReloc;\n      *(dword *)(specialReloc + 8) = prevReloc;\n      *(dword *)(currentReloc + 0xc) = prevReloc;\n    }\n  }\nendLabel:\n  FUNC_00081f98(arg1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b10": "process_relocations_00083b10",
                "param_1": "arg1",
                "param_2": "arg2",
                "iVar1": "index",
                "bVar2": "isSpecialCase",
                "uVar3": "flags",
                "dVar4": "currentReloc",
                "iVar5": "nextIndex",
                "uVar6": "offset",
                "dVar7": "prevReloc",
                "uVar8": "totalOffset",
                "dVar9": "specialReloc",
                "Elf32_Rel_ARRAY_20070000": "relocArray",
                "adjust_memory_region_00083a74": "adjustMemoryRegion",
                "LAB_00083ba4": "endLabel"
            },
            "calling": [
                "FUN_00084484",
                "FUN_00083ca8",
                "FUN_00081800",
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "called": [
                "FUN_00083a74",
                "FUN_00081f94",
                "FUN_00081f98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083ca8": {
            "entrypoint": "0x00083ca8",
            "current_name": "process_data_00083ca8",
            "code": "\nundefined4 processData_00083ca8(undefined4 *outputBuffer,uint *inputData,uint **context)\n\n{\n  int returnValue;\n  uint tempVar1;\n  uint tempVar2;\n  ushort flag;\n  uint length;\n  uint *pointer1;\n  uint *pointer2;\n  uint size;\n  uint relocationSize;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  \n  if (context[2] != (uint *)0x0) {\n    flag = *(ushort *)(inputData + 3);\n    length = (uint)flag;\n    if (((int)(length << 0x1c) < 0) && (inputData[4] != 0)) {\n      pointer2 = *context;\n    }\n    else {\n      returnValue = initialize_and_process_data_0008356c(outputBuffer,inputData);\n      if (returnValue != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(inputData + 3);\n      length = (uint)flag;\n      pointer2 = *context;\n    }\n    if ((flag & 2) == 0) {\n      tempVar1 = length & 2;\n      tempVar3 = tempVar1;\n      size = tempVar1;\n      tempVar5 = tempVar1;\n      if ((length & 1) == 0) {\n        tempVar1 = 0;\n        tempVar3 = 0;\n        while( true ) {\n          while (tempVar1 == 0) {\n            tempVar3 = *pointer2;\n            pointer1 = pointer2 + 1;\n            pointer2 = pointer2 + 2;\n            tempVar1 = *pointer1;\n          }\n          size = inputData[2];\n          if ((int)(length << 0x16) < 0) {\n            if (tempVar1 < size) {\n              length = *inputData;\n              size = tempVar1;\n            }\n            else if ((length & 0x480) == 0) {\n              length = *inputData;\n            }\n            else {\n              returnValue = *inputData - inputData[4];\n              size = returnValue + 1 + tempVar1;\n              relocationSize = (int)(inputData[5] * 3) / 2;\n              if (size <= relocationSize) {\n                size = relocationSize;\n              }\n              if ((int)(length << 0x15) < 0) {\n                relocationSize = relocate_and_resolve_symbols_00081810(outputBuffer,size);\n                if (relocationSize == 0) {\n                  *outputBuffer = 0xc;\n                  flag = *(ushort *)(inputData + 3);\n                  goto LAB_00083da4;\n                }\n                mem_copy_00081d48(relocationSize,inputData[4],returnValue);\n                *(ushort *)(inputData + 3) = *(ushort *)(inputData + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                relocationSize = relocate_and_resolve_symbols_00081fac(outputBuffer);\n                if (relocationSize == 0) {\n                  process_relocations_00083b10(outputBuffer,inputData[4]);\n                  flag = *(ushort *)(inputData + 3) & 0xff7f;\n                  *outputBuffer = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              length = relocationSize + returnValue;\n              inputData[4] = relocationSize;\n              inputData[5] = size;\n              *inputData = length;\n              inputData[2] = size - returnValue;\n              size = tempVar1;\n            }\n            copy_memory_00081e34(length,tempVar3,size);\n            inputData[2] = inputData[2] - size;\n            *inputData = *inputData + size;\n            size = tempVar1;\n          }\n          else if ((inputData[4] < *inputData) || (length = inputData[5], tempVar1 < length)) {\n            if (tempVar1 < size) {\n              size = tempVar1;\n            }\n            copy_memory_00081e34(*inputData,tempVar3,size);\n            length = inputData[2];\n            inputData[2] = length - size;\n            *inputData = *inputData + size;\n            if ((length - size == 0) && (returnValue = process_binary_data_00083850(outputBuffer,inputData), returnValue != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            size = 0x7fffffff;\n            if (tempVar1 < 0x7fffffff) {\n              size = tempVar1;\n            }\n            size = (*(code *)inputData[9])(outputBuffer,inputData[7],tempVar3,(size / length) * length);\n            if ((int)size < 1) goto LAB_00083da2;\n          }\n          pointer1 = context[2];\n          tempVar3 = tempVar3 + size;\n          tempVar1 = tempVar1 - size;\n          context[2] = (uint *)((int)pointer1 - size);\n          if ((uint *)((int)pointer1 - size) == (uint *)0x0) break;\n          length = (uint)*(ushort *)(inputData + 3);\n        }\n      }\n      else {\n        do {\n          while (tempVar1 == 0) {\n            size = *pointer2;\n            tempVar1 = pointer2[1];\n            tempVar5 = 0;\n            pointer2 = pointer2 + 2;\n          }\n          if (tempVar5 == 0) {\n            returnValue = find_char_in_buffer_000840f8(size,10,tempVar1);\n            if (returnValue == 0) {\n              tempVar3 = tempVar1 + 1;\n              tempVar5 = 1;\n            }\n            else {\n              tempVar3 = (returnValue + 1) - size;\n              tempVar5 = 1;\n            }\n          }\n          relocationSize = *inputData;\n          length = tempVar3;\n          if (tempVar1 <= tempVar3) {\n            length = tempVar1;\n          }\n          tempVar2 = inputData[5];\n          if ((inputData[4] < relocationSize) && (tempVar4 = inputData[2] + tempVar2, (int)tempVar4 < (int)length)) {\n            copy_memory_00081e34(relocationSize,size,tempVar4);\n            *inputData = *inputData + tempVar4;\n            returnValue = process_binary_data_00083850(outputBuffer,inputData);\n            if (returnValue != 0) goto LAB_00083da2;\n          }\n          else if ((int)length < (int)tempVar2) {\n            copy_memory_00081e34(relocationSize,size,length);\n            inputData[2] = inputData[2] - length;\n            *inputData = length + *inputData;\n            tempVar4 = length;\n          }\n          else {\n            tempVar4 = (*(code *)inputData[9])(outputBuffer,inputData[7],size,tempVar2);\n            if ((int)tempVar4 < 1) goto LAB_00083da2;\n          }\n          tempVar3 = tempVar3 - tempVar4;\n          if (tempVar3 == 0) {\n            returnValue = process_binary_data_00083850(outputBuffer,inputData);\n            if (returnValue != 0) goto LAB_00083da2;\n            tempVar5 = 0;\n          }\n          pointer1 = context[2];\n          size = size + tempVar4;\n          tempVar1 = tempVar1 - tempVar4;\n          context[2] = (uint *)((int)pointer1 - tempVar4);\n        } while ((uint *)((int)pointer1 - tempVar4) != (uint *)0x0);\n      }\n    }\n    else {\n      tempVar1 = 0;\n      length = 0;\n      do {\n        while( true ) {\n          tempVar3 = length;\n          if (0x7ffffbff < length) {\n            tempVar3 = 0x7ffffc00;\n          }\n          if (length != 0) break;\n          tempVar1 = *pointer2;\n          length = pointer2[1];\n          pointer2 = pointer2 + 2;\n        }\n        returnValue = (*(code *)inputData[9])(outputBuffer,inputData[7],tempVar1,tempVar3);\n        if (returnValue < 1) {\nLAB_00083da2:\n          flag = *(ushort *)(inputData + 3);\nLAB_00083da4:\n          *(ushort *)(inputData + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        pointer1 = context[2];\n        tempVar1 = tempVar1 + returnValue;\n        length = length - returnValue;\n        context[2] = (uint *)((int)pointer1 - returnValue);\n      } while ((uint *)((int)pointer1 - returnValue) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083ca8": "process_data_00083ca8",
                "param_1": "outputBuffer",
                "param_2": "inputData",
                "param_3": "context",
                "iVar1": "returnValue",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "flag",
                "uVar5": "length",
                "puVar6": "pointer1",
                "puVar7": "pointer2",
                "uVar8": "size",
                "uVar9": "relocationSize",
                "uVar10": "tempVar3",
                "uVar11": "tempVar4",
                "local_2c": "tempVar5"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00081e34",
                "FUN_00083b10",
                "FUN_000840f8",
                "FUN_00081d48",
                "FUN_00081810",
                "FUN_00081fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084004": {
            "entrypoint": "0x00084004",
            "current_name": "get_memory_address_00084004",
            "code": "\nundefined4 getMemoryAddress_00084004(void)\n\n{\n  return 0x20070878;\n}\n\n",
            "renaming": {
                "FUN_00084004": "get_memory_address_00084004"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008400c": {
            "entrypoint": "0x0008400c",
            "current_name": "get_elf32_rel_offset_0008400c",
            "code": "\ndword getElf32RelOffset_0008400c(void)\n\n{\n  return relArrayindex.r_offset;\n}\n\n",
            "renaming": {
                "FUN_0008400c": "get_elf32_rel_offset_0008400c",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "[275]": "index"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084018": {
            "entrypoint": "0x00084018",
            "current_name": "process_binary_function_00084018",
            "code": "\nvoid processBinaryFunction_00084018(int binary_data,int *function_metadata)\n\n{\n  ushort metadata_value;\n  int memory_limit;\n  int resolved_symbol_value;\n  uint metadata_flag;\n  bool is_flag;\n  undefined stack_buffer [4];\n  uint local_flag;\n  \n  metadata_value = *(ushort *)(function_metadata + 3);\n  metadata_flag = (uint)metadata_value;\n  if ((int)(metadata_flag << 0x1e) < 0) {\n    *function_metadata = (int)function_metadata + 0x43;\n    function_metadata[4] = (int)function_metadata + 0x43;\n    function_metadata[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)function_metadata + 0xe)) {\n    memory_limit = set_and_check_memory_limit_00084494(binary_data,(int)*(short *)((int)function_metadata + 0xe),stack_buffer);\n    if (-1 < memory_limit) {\n      is_flag = (local_flag & 0xf000) == 0x2000;\n      if (((local_flag & 0xf000) == 0x8000) && (function_metadata[10] == 0x8427d)) {\n        memory_limit = 0x400;\n        *(ushort *)(function_metadata + 3) = *(ushort *)(function_metadata + 3) | 0x400;\n        function_metadata[0x13] = 0x400;\n      }\n      else {\n        memory_limit = 0x400;\n        *(ushort *)(function_metadata + 3) = *(ushort *)(function_metadata + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    metadata_value = *(ushort *)(function_metadata + 3);\n    metadata_flag = (uint)metadata_value;\n  }\n  *(ushort *)(function_metadata + 3) = metadata_value | 0x800;\n  if ((metadata_flag & 0x80) == 0) {\n    memory_limit = 0x400;\n  }\n  else {\n    memory_limit = 0x40;\n  }\n  is_flag = false;\nLAB_00084074:\n  resolved_symbol_value = relocate_and_resolve_symbols_00081810(binary_data,memory_limit);\n  metadata_value = *(ushort *)(function_metadata + 3);\n  if (resolved_symbol_value == 0) {\n    if (-1 < (int)((uint)metadata_value << 0x16)) {\n      *(ushort *)(function_metadata + 3) = metadata_value | 2;\n      *function_metadata = (int)function_metadata + 0x43;\n      function_metadata[4] = (int)function_metadata + 0x43;\n      function_metadata[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(binary_data + 0x3c) = &LAB_0008387c_1;\n    *(ushort *)(function_metadata + 3) = metadata_value | 0x80;\n    *function_metadata = resolved_symbol_value;\n    function_metadata[4] = resolved_symbol_value;\n    function_metadata[5] = memory_limit;\n    if ((is_flag) && (memory_limit = process_param_000844bc(binary_data,(int)*(short *)((int)function_metadata + 0xe)), memory_limit != 0))\n    {\n      *(ushort *)(function_metadata + 3) = *(ushort *)(function_metadata + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084018": "process_binary_function_00084018",
                "param_1": "binary_data",
                "param_2": "function_metadata",
                "uVar1": "metadata_value",
                "iVar2": "memory_limit",
                "iVar3": "resolved_symbol_value",
                "uVar4": "metadata_flag",
                "bVar5": "is_flag",
                "auStack_54": "stack_buffer",
                "local_50": "local_flag"
            },
            "calling": [
                "FUN_0008356c"
            ],
            "called": [
                "FUN_000844bc",
                "FUN_00084494",
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000840f8": {
            "entrypoint": "0x000840f8",
            "current_name": "find_char_in_buffer_000840f8",
            "code": "\nuint * find_char_in_buffer_000840f8(uint *buffer,char target_char,uint buffer_length)\n\n{\n  uint xor_result;\n  int index;\n  uint *current_element;\n  bool is_last_element;\n  \n  if (((uint)buffer & 3) == 0) {\nLAB_00084128:\n    if (3 < buffer_length) {\n      current_element = buffer;\n      do {\n        xor_result = *current_element ^ CONCAT22(CONCAT11(target_char,target_char),CONCAT11(target_char,target_char));\n        buffer = current_element;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) break;\n        buffer_length = buffer_length - 4;\n        buffer = current_element + 1;\n        current_element = current_element + 1;\n      } while (3 < buffer_length);\n    }\n    if (buffer_length == 0) {\n      buffer = (uint *)0x0;\n    }\n    else if (*(char *)buffer != target_char) {\n      index = 0;\n      do {\n        buffer = (uint *)((int)buffer + 1);\n        is_last_element = index == buffer_length - 1;\n        index = index + 1;\n        if (is_last_element) goto LAB_00084150;\n      } while (*(char *)buffer != target_char);\n    }\n  }\n  else if (buffer_length == 0) {\nLAB_00084150:\n    buffer = (uint *)0x0;\n  }\n  else if (*(char *)buffer != target_char) {\n    current_element = (uint *)((int)buffer + 1);\n    buffer_length = buffer_length - 1;\n    do {\n      buffer = current_element;\n      if (((uint)buffer & 3) == 0) goto LAB_00084128;\n      if (buffer_length == 0) goto LAB_00084150;\n      current_element = (uint *)((int)buffer + 1);\n      buffer_length = buffer_length - 1;\n    } while (*(char *)buffer != target_char);\n  }\n  return buffer;\n}\n\n",
            "renaming": {
                "FUN_000840f8": "find_char_in_buffer_000840f8",
                "param_1": "buffer",
                "param_2": "target_char",
                "param_3": "buffer_length",
                "uVar1": "xor_result",
                "iVar2": "index",
                "puVar3": "current_element",
                "bVar4": "is_last_element"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_0008289c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000841e4": {
            "entrypoint": "0x000841e4",
            "current_name": "execute_function_000841e4",
            "code": "\nint executeFunction_000841e4(uint inputValue)\n\n{\n  dword offset;\n  undefined4 error_code;\n  int functionPointer;\n  code *selectedFunction;\n  undefined4 register4;\n  undefined4 register5;\n  undefined4 linkRegister;\n  undefined4 memoryOffset;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  memoryOffset = 0x20070460;\n  if (0x1f < inputValue) {\n    *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n    return -1;\n  }\n  functionPointer = *(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x2dc);\n  if ((functionPointer == 0) || (selectedFunction = *(code **)(functionPointer + inputValue * 4), selectedFunction == (code *)0x0)) {\n    error_code = thunk_get_error_code_00080efe(Elf32_Rel_ARRAY_20070000[140].r_offset);\n    DAT_20071244 = 0;\n    functionPointer = FUNC_00080efc(error_code,inputValue,inputValue,0,memoryOffset,register4,register5,linkRegister);\n    if ((functionPointer == -1) && (DAT_20071244 != 0)) {\n      *(int *)offset = DAT_20071244;\n      return -1;\n    }\n    return functionPointer;\n  }\n  if (selectedFunction == (code *)0x1) {\n    return 0;\n  }\n  if (selectedFunction != (code *)0xffffffff) {\n    *(undefined4 *)(functionPointer + inputValue * 4) = 0;\n    (*selectedFunction)(inputValue);\n    return 0;\n  }\n  *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000841e4": "execute_function_000841e4",
                "param_1": "inputValue",
                "dVar1": "offset",
                "uVar2": "error_code",
                "iVar3": "functionPointer",
                "pcVar4": "selectedFunction",
                "uVar5": "memoryOffset",
                "unaff_r4": "register4",
                "unaff_r5": "register5",
                "in_lr": "linkRegister"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "thunk_FUN_00080efe",
                "FUN_00080efc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00080efe": {
            "entrypoint": "0x0008421c",
            "current_name": "get_error_code_thunk_00080efe",
            "code": "\nundefined4 get_error_code_thunk_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "thunk_FUN_00080efe": "get_error_code_thunk_00080efe"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [
                "FUN_00080efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084220": {
            "entrypoint": "0x00084220",
            "current_name": "update_application_00084220",
            "code": "\nvoid updateApplication_00084220(undefined4 param1,int param2)\n\n{\n  int result;\n  \n  result = initializeAndCheckApplication(param1,(int)*(short *)(param2 + 0xe));\n  if (-1 < result) {\n    *(int *)(param2 + 0x50) = *(int *)(param2 + 0x50) + result;\n    return;\n  }\n  *(ushort *)(param2 + 0xc) = *(ushort *)(param2 + 0xc) & 0xefff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084220": "update_application_00084220",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "initialize_and_check_application_00084508": "initializeAndCheckApplication"
            },
            "calling": [],
            "called": [
                "FUN_00084508"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084244": {
            "entrypoint": "0x00084244",
            "current_name": "process_data_00084244",
            "code": "\nvoid processData_00084244(int *outputData,int inputData,undefined4 paramA,undefined4 paramB)\n\n{\n  int result;\n  ushort value;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  undefined4 tempVar4;\n  \n  value = *(ushort *)(inputData + 0xc);\n  if ((int)((uint)value << 0x17) < 0) {\n    initialize_and_check_application_000844e0(outputData,(int)*(short *)(inputData + 0xe),0,2);\n    value = *(ushort *)(inputData + 0xc);\n  }\n  *(ushort *)(inputData + 0xc) = value & 0xefff;\n  DAT_20071244 = 0;\n  result = copy_bytes_00080ec8((int)*(short *)(inputData + 0xe),paramA,paramB,paramB,tempVar1,tempVar2,\n                       tempVar3,tempVar4);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *outputData = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084244": "process_data_00084244",
                "param_1": "outputData",
                "param_2": "inputData",
                "param_3": "paramA",
                "param_4": "paramB",
                "iVar1": "result",
                "uVar2": "value",
                "unaff_r4": "tempVar1",
                "unaff_r5": "tempVar2",
                "unaff_r6": "tempVar3",
                "in_lr": "tempVar4"
            },
            "calling": [],
            "called": [
                "FUN_00080ec8",
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008427c": {
            "entrypoint": "0x0008427c",
            "current_name": "initialize_and_update_application_0008427c",
            "code": "\nvoid initialize_and_update_application_0008427c(undefined4 param_1,int application_data)\n\n{\n  int result;\n  ushort updated_value;\n  \n  result = initialize_and_check_application_000844e0(param_1,(int)*(short *)(application_data + 0xe));\n  if (result == -1) {\n    updated_value = *(ushort *)(application_data + 0xc) & 0xefff;\n  }\n  else {\n    updated_value = *(ushort *)(application_data + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(application_data + 0x50) = result;\n  }\n  *(ushort *)(application_data + 0xc) = updated_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008427c": "initialize_and_update_application_0008427c",
                "param_2": "application_data",
                "iVar1": "result",
                "uVar2": "updated_value"
            },
            "calling": [],
            "called": [
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_data_000842a4",
            "code": "\nuint process_data_000842a4(int input_param,uint output_param,undefined4 *data_array,undefined4 param_value)\n\n{\n  ushort ushort_value;\n  uint uint_value;\n  undefined *ptr;\n  int index;\n  \n  if ((input_param != 0) && (*(int *)(input_param + 0x38) == 0)) {\n    initialize_data_structures_00083888();\n  }\n  ushort_value = *(ushort *)(data_array + 3);\n  uint_value = (uint)ushort_value;\n  data_array[2] = data_array[6];\n  if ((-1 < (int)(uint_value << 0x1c)) || (index = data_array[4], index == 0)) {\n    index = initialize_and_process_data_000842a4_0008356c(input_param,data_array,ushort_value,uint_value,param_value);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    ushort_value = *(ushort *)(data_array + 3);\n    index = data_array[4];\n    uint_value = (uint)ushort_value;\n  }\n  output_param = output_param & 0xff;\n  if ((int)(uint_value << 0x12) < 0) {\n    ptr = (undefined *)*data_array;\n    index = (int)ptr - index;\n    if (index < (int)data_array[5]) {\nLAB_000842d6:\n      index = index + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    data_array[0x19] = data_array[0x19] & 0xffffdfff;\n    ptr = (undefined *)*data_array;\n    *(ushort *)(data_array + 3) = ushort_value | 0x2000;\n    index = (int)ptr - index;\n    if (index < (int)data_array[5]) goto LAB_000842d6;\n  }\n  index = process_binary_data_00083850(input_param,data_array);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  ptr = (undefined *)*data_array;\n  index = 1;\nLAB_000842d8:\n  data_array[2] = data_array[2] + -1;\n  *data_array = ptr + 1;\n  *ptr = (char)output_param;\n  if (((data_array[5] == index) ||\n      (((int)((uint)*(ushort *)(data_array + 3) << 0x1f) < 0 && (output_param == 10)))) &&\n     (index = process_binary_data_00083850(input_param,data_array), index != 0)) {\n    return 0xffffffff;\n  }\n  return output_param;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "param_1": "input_param",
                "param_2": "output_param",
                "param_3": "data_array",
                "param_4": "param_value",
                "uVar1": "ushort_value",
                "uVar2": "uint_value",
                "puVar3": "ptr",
                "iVar4": "index"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_00083888",
                "FUN_00083850",
                "FUN_0008356c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008434c": {
            "entrypoint": "0x0008434c",
            "current_name": "execute_relocation_0008434c",
            "code": "\nvoid executeRelocation_0008434c(undefined4 *ptrToResult,int size,undefined4 context,undefined4 *ptrToStatus)\n\n{\n  dword relocationInfo;\n  undefined4 memoryAddress;\n  int result;\n  undefined stackBuffer [12];\n  \n  relocationInfo = Elf32_Rel_ARRAY_20070000[275].r_info;\n  if (size == 0) {\n    memoryAddress = get_memory_address_00084004();\n    result = (*(code *)relocationInfo)(ptrToResult,stackBuffer,0,memoryAddress,ptrToStatus);\n  }\n  else {\n    memoryAddress = get_memory_address_00084004();\n    result = (*(code *)relocationInfo)(ptrToResult,size,context,memoryAddress,ptrToStatus);\n  }\n  if (result == -1) {\n    *ptrToStatus = 0;\n    *ptrToResult = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008434c": "execute_relocation_0008434c",
                "param_1": "ptrToResult",
                "param_2": "size",
                "param_3": "context",
                "param_4": "ptrToStatus",
                "dVar1": "relocationInfo",
                "uVar2": "memoryAddress",
                "iVar3": "result",
                "auStack_24": "stackBuffer"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_0008439c",
                "FUN_00084004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008439c": {
            "entrypoint": "0x0008439c",
            "current_name": "copy_byte_to_pointer_0008439c",
            "code": "\nundefined4 copy_byte_to_pointer_0008439c(undefined4 *dest,undefined *src,uint value)\n\n{\n  if (src == (undefined *)0x0) {\n    return 0;\n  }\n  if (value < 0x100) {\n    *src = (char)value;\n    return 1;\n  }\n  *dest = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0008439c": "copy_byte_to_pointer_0008439c",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "value"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084484": {
            "entrypoint": "0x00084484",
            "current_name": "process_00084484",
            "code": "\nundefined4 process_00084484(int input)\n\n{\n  dword r_offset;\n  undefined4 result;\n  int returnValue;\n  \n  r_offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (input != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      initialize_data_structures_00083888();\n    }\n    if (*(short *)(input + 0xc) != 0) {\n      result = process_00084484_binary_data_00083850(r_offset,input);\n      if ((*(code **)(input + 0x2c) != (code *)0x0) &&\n         (returnValue = (**(code **)(input + 0x2c))(r_offset,*(undefined4 *)(input + 0x1c)), returnValue < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input + 0xc) << 0x18) < 0) {\n        process_00084484_relocations_00083b10(r_offset,*(undefined4 *)(input + 0x10));\n      }\n      if (*(int *)(input + 0x30) != 0) {\n        if (*(int *)(input + 0x30) != input + 0x40) {\n          process_00084484_relocations_00083b10(r_offset);\n        }\n        *(undefined4 *)(input + 0x30) = 0;\n      }\n      if (*(int *)(input + 0x44) != 0) {\n        process_00084484_relocations_00083b10(r_offset);\n        *(undefined4 *)(input + 0x44) = 0;\n      }\n      FUNC_0008397c();\n      *(undefined2 *)(input + 0xc) = 0;\n      FUNC_00083980();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00084484": "process_00084484",
                "param_1": "input",
                "dVar1": "r_offset",
                "uVar2": "result",
                "iVar3": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_0008397c",
                "FUN_00083888",
                "FUN_00083850",
                "FUN_00083b10",
                "FUN_00083980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084494": {
            "entrypoint": "0x00084494",
            "current_name": "set_and_check_memory_limit_00084494",
            "code": "\nvoid setAndCheckMemoryLimit_00084494(int *outputPtr,undefined4 limitValue,undefined4 param1,undefined4 param2)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = set_memory_limit_00080eb0(limitValue,param1,param1,0,param2);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *outputPtr = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084494": "set_and_check_memory_limit_00084494",
                "param_1": "outputPtr",
                "param_2": "limitValue",
                "param_3": "param1",
                "param_4": "param2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eb0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844bc": {
            "entrypoint": "0x000844bc",
            "current_name": "process_param_000844bc",
            "code": "\nvoid processParam_000844bc(int *result,undefined4 inputValue)\n\n{\n  int getOneReturnValue;\n  \n  DAT_20071244 = 0;\n  getOneReturnValue = get_one_00080eba(inputValue);\n  if ((getOneReturnValue == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844bc": "process_param_000844bc",
                "param_1": "result",
                "param_2": "inputValue",
                "iVar1": "getOneReturnValue"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844e0": {
            "entrypoint": "0x000844e0",
            "current_name": "initialize_and_check_application_000844e0",
            "code": "\nvoid initializeAndCheckApplication_000844e0(int *outputVariable,undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = initialize_application_00080ebe(inputParam1,inputParam2,inputParam3);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *outputVariable = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844e0": "initialize_and_check_application_000844e0",
                "param_1": "outputVariable",
                "param_2": "inputParam1",
                "param_3": "inputParam2",
                "param_4": "inputParam3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008427c",
                "FUN_00084244"
            ],
            "called": [
                "FUN_00080ebe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084508": {
            "entrypoint": "0x00084508",
            "current_name": "initialize_and_check_application_00084508",
            "code": "\nvoid initializeAndCheckApplication_00084508(int *result,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  int resultFlag;\n  \n  DAT_20071244 = 0;\n  resultFlag = initialize_application_00080ec2(arg2,arg3,arg4);\n  if ((resultFlag == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084508": "initialize_and_check_application_00084508",
                "param_1": "result",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "resultFlag"
            },
            "calling": [
                "FUN_00084220"
            ],
            "called": [
                "FUN_00080ec2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084530": {
            "entrypoint": "0x00084530",
            "current_name": "calculate_difference_or_invalid_00084530",
            "code": "\nint calculate_difference_or_invalid_00084530(int size,int count,int offset,int flag)\n\n{\n  int difference_or_invalid;\n  \n  if ((flag == 0) && (offset == 0)) {\n    if (count != 0 || size != 0) {\n      size = -1;\n    }\n    return size;\n  }\n  difference_or_invalid = calculate_difference_0008458c();\n  return difference_or_invalid;\n}\n\n",
            "renaming": {
                "FUN_00084530": "calculate_difference_or_invalid_00084530",
                "param_1": "size",
                "param_2": "count",
                "param_3": "offset",
                "param_4": "flag",
                "iVar1": "difference_or_invalid"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_0008458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008455c": {
            "entrypoint": "0x0008455c",
            "current_name": "subtract_with_product_0008455c",
            "code": "\nvoid subtractWithProduct_0008455c(uint inputValue,int subtractValue,undefined4 param3,undefined4 param4,int *resultArray)\n\n{\n  uint product;\n  longlong product64;\n  \n  product64 = divide_and_remainder_000845c0();\n  product64 = product64 * CONCAT44(param4,param3);\n  product = (uint)product64;\n  *resultArray = inputValue - product;\n  resultArray[1] = (subtractValue - (int)((ulonglong)product64 >> 0x20)) - (uint)(inputValue < product);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008455c": "subtract_with_product_0008455c",
                "param_1": "inputValue",
                "param_2": "subtractValue",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "resultArray",
                "uVar1": "product",
                "lVar2": "product64"
            },
            "calling": [],
            "called": [
                "FUN_000845c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008458c": {
            "entrypoint": "0x0008458c",
            "current_name": "calculate_difference_0008458c",
            "code": "\nvoid calculate_difference_0008458c(uint input_value,int param_value,undefined4 param_3,undefined4 param_4,int *output_array)\n\n{\n  uint result;\n  longlong division_result;\n  \n  division_result = unsigned_long_division_00084860();\n  division_result = division_result * CONCAT44(param_4,param_3);\n  result = (uint)division_result;\n  *output_array = input_value - result;\n  output_array[1] = (param_value - (int)((ulonglong)division_result >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008458c": "calculate_difference_0008458c",
                "param_1": "input_value",
                "param_2": "param_value",
                "param_5": "output_array",
                "uVar1": "result",
                "lVar2": "division_result"
            },
            "calling": [
                "FUN_00084530"
            ],
            "called": [
                "FUN_00084860"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845c0": {
            "entrypoint": "0x000845c0",
            "current_name": "divide_and_remainder_000845c0",
            "code": "\nundefined8 divideAndRemainder_000845c0(uint dividend,uint dividendSign,uint divisor,uint divisorSign)\n\n{\n  longlong quotientAndRemainder;\n  uint quotient;\n  uint quotientHigh;\n  uint quotientLow;\n  uint remainder;\n  int shiftCount;\n  uint temp1;\n  uint temp2;\n  uint signValue;\n  uint dividendScaled;\n  uint quotientRemainderHigh;\n  uint quotientRemainderLow;\n  bool hasOverflow;\n  \n  if ((int)dividendSign < 0) {\n    hasOverflow = dividend != 0;\n    dividend = -dividend;\n    dividendSign = -dividendSign - (uint)hasOverflow;\n    signValue = 0xffffffff;\n  }\n  else {\n    signValue = 0;\n  }\n  if ((int)divisorSign < 0) {\n    signValue = ~signValue;\n    hasOverflow = divisor != 0;\n    divisor = -divisor;\n    divisorSign = -divisorSign - (uint)hasOverflow;\n  }\n  if (divisorSign == 0) {\n    if (dividendSign < divisor) {\n      shiftCount = LZCOUNT(divisor);\n      if (shiftCount != 0) {\n        quotientHigh = dividend >> (0x20U - shiftCount & 0xff);\n        divisor = divisor << shiftCount;\n        dividend = dividend << shiftCount;\n        dividendSign = dividendSign << shiftCount | quotientHigh;\n      }\n      quotient = divisor >> 0x10;\n      quotientLow = dividendSign / quotient;\n      temp1 = (divisor & 0xffff) * quotientLow;\n      dividendScaled = dividend >> 0x10 | (dividendSign - quotient * quotientLow) * 0x10000;\n      quotientHigh = quotientLow;\n      if (dividendScaled <= temp1 && temp1 - dividendScaled != 0) {\n        hasOverflow = CARRY4(dividendScaled,divisor);\n        dividendScaled = dividendScaled + divisor;\n        quotientHigh = quotientLow - 1;\n        if ((hasOverflow == false) && (dividendScaled <= temp1 && temp1 - dividendScaled != 0)) {\n          quotientHigh = quotientLow - 2;\n          dividendScaled = dividendScaled + divisor;\n        }\n      }\n      temp2 = (dividendScaled - temp1) / quotient;\n      quotientLow = (divisor & 0xffff) * temp2;\n      temp1 = dividend & 0xffff | ((dividendScaled - temp1) - quotient * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp1 <= quotientLow && quotientLow - temp1 != 0) {\n        quotient = temp2 - 1;\n        if ((CARRY4(temp1,divisor) == false) &&\n           (temp1 + divisor <= quotientLow && quotientLow - (temp1 + divisor) != 0)) {\n          quotient = temp2 - 2;\n        }\n      }\n      quotient = quotient | quotientHigh << 0x10;\n      quotientHigh = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shiftCount = LZCOUNT(divisor);\n      if (shiftCount == 0) {\n        dividendSign = dividendSign - divisor;\n        quotientLow = divisor >> 0x10;\n        quotientRemainderLow = divisor & 0xffff;\n        quotientHigh = 1;\n      }\n      else {\n        divisor = divisor << shiftCount;\n        quotientHigh = dividendSign >> (0x20U - shiftCount & 0xff);\n        quotientLow = divisor >> 0x10;\n        dividendScaled = quotientHigh / quotientLow;\n        quotientRemainderLow = divisor & 0xffff;\n        temp1 = quotientRemainderLow * dividendScaled;\n        temp2 = dividend >> (0x20U - shiftCount & 0xff) | dividendSign << shiftCount;\n        quotientHigh = temp2 >> 0x10 | (quotientHigh - quotientLow * dividendScaled) * 0x10000;\n        dividend = dividend << shiftCount;\n        quotient = dividendScaled;\n        if (quotientHigh <= temp1 && temp1 - quotientHigh != 0) {\n          hasOverflow = CARRY4(quotientHigh,divisor);\n          quotientHigh = quotientHigh + divisor;\n          quotient = dividendScaled - 1;\n          if ((hasOverflow == false) && (quotientHigh <= temp1 && temp1 - quotientHigh != 0)) {\n            quotient = dividendScaled - 2;\n            quotientHigh = quotientHigh + divisor;\n          }\n        }\n        remainder = (quotientHigh - temp1) / quotientLow;\n        dividendScaled = quotientRemainderLow * remainder;\n        dividendSign = temp2 & 0xffff | ((quotientHigh - temp1) - quotientLow * remainder) * 0x10000;\n        quotientHigh = remainder;\n        if (dividendSign <= dividendScaled && dividendScaled - dividendSign != 0) {\n          hasOverflow = CARRY4(dividendSign,divisor);\n          dividendSign = dividendSign + divisor;\n          quotientHigh = remainder - 1;\n          if ((hasOverflow == false) && (dividendSign <= dividendScaled && dividendScaled - dividendSign != 0)) {\n            quotientHigh = remainder - 2;\n            dividendSign = dividendSign + divisor;\n          }\n        }\n        dividendSign = dividendSign - dividendScaled;\n        quotientHigh = quotientHigh | quotient << 0x10;\n      }\n      quotient = dividendSign / quotientLow;\n      dividendScaled = quotientRemainderLow * quotient;\n      temp2 = dividend >> 0x10 | (dividendSign - quotientLow * quotient) * 0x10000;\n      temp1 = quotient;\n      if (temp2 <= dividendScaled && dividendScaled - temp2 != 0) {\n        hasOverflow = CARRY4(temp2,divisor);\n        temp2 = temp2 + divisor;\n        temp1 = quotient - 1;\n        if ((hasOverflow == false) && (temp2 <= dividendScaled && dividendScaled - temp2 != 0)) {\n          temp1 = quotient - 2;\n          temp2 = temp2 + divisor;\n        }\n      }\n      remainder = (temp2 - dividendScaled) / quotientLow;\n      quotientRemainderLow = quotientRemainderLow * remainder;\n      quotientLow = dividend & 0xffff | ((temp2 - dividendScaled) - quotientLow * remainder) * 0x10000;\n      quotient = remainder;\n      if (quotientLow <= quotientRemainderLow && quotientRemainderLow - quotientLow != 0) {\n        quotient = remainder - 1;\n        if ((CARRY4(quotientLow,divisor) == false) &&\n           (quotientLow + divisor <= quotientRemainderLow && quotientRemainderLow - (quotientLow + divisor) != 0)) {\n          quotient = remainder - 2;\n        }\n      }\n      quotient = quotient | temp1 << 0x10;\n    }\n  }\n  else if (dividendSign < divisorSign) {\n    quotientHigh = 0;\n    quotient = 0;\n  }\n  else {\n    shiftCount = LZCOUNT(divisorSign);\n    if (shiftCount == 0) {\n      if ((divisorSign < dividendSign) || (divisor <= dividend)) {\n        quotientHigh = 0;\n        quotient = 1;\n      }\n      else {\n        quotient = 0;\n        quotientHigh = 0;\n      }\n    }\n    else {\n      quotientHigh = 0x20 - shiftCount;\n      quotientLow = dividendSign >> (quotientHigh & 0xff);\n      quotientRemainderLow = divisor >> (quotientHigh & 0xff) | divisorSign << shiftCount;\n      dividendScaled = quotientRemainderLow >> 0x10;\n      quotient = quotientLow / dividendScaled;\n      temp2 = (quotientRemainderLow & 0xffff) * quotient;\n      temp1 = dividendSign << shiftCount | dividend >> (quotientHigh & 0xff);\n      quotientLow = temp1 >> 0x10 | (quotientLow - dividendScaled * quotient) * 0x10000;\n      quotientHigh = quotient;\n      if (quotientLow <= temp2 && temp2 - quotientLow != 0) {\n        hasOverflow = CARRY4(quotientLow,quotientRemainderLow);\n        quotientLow = quotientLow + quotientRemainderLow;\n        quotientHigh = quotient - 1;\n        if ((hasOverflow == false) && (quotientLow <= temp2 && temp2 - quotientLow != 0)) {\n          quotientHigh = quotient - 2;\n          quotientLow = quotientLow + quotientRemainderLow;\n        }\n      }\n      remainder = (quotientLow - temp2) / dividendScaled;\n      quotientRemainderHigh = (quotientRemainderLow & 0xffff) * remainder;\n      quotientLow = temp1 & 0xffff | ((quotientLow - temp2) - dividendScaled * remainder) * 0x10000;\n      quotient = remainder;\n      if (quotientLow <= quotientRemainderHigh && quotientRemainderHigh - quotientLow != 0) {\n        hasOverflow = CARRY4(quotientLow,quotientRemainderLow);\n        quotientLow = quotientLow + quotientRemainderLow;\n        quotient = remainder - 1;\n        if ((hasOverflow == false) && (quotientLow <= quotientRemainderHigh && quotientRemainderHigh - quotientLow != 0)) {\n          quotient = remainder - 2;\n          quotientLow = quotientLow + quotientRemainderLow;\n        }\n      }\n      quotient = quotient | quotientHigh << 0x10;\n      quotientAndRemainder = (ulonglong)quotient * (ulonglong)(divisor << shiftCount);\n      temp1 = (uint)((ulonglong)quotientAndRemainder >> 0x20);\n      quotientHigh = 0;\n      if ((quotientLow - quotientRemainderHigh < temp1) ||\n         ((quotientLow - quotientRemainderHigh == temp1 && (dividend << shiftCount < (uint)quotientAndRemainder)))) {\n        quotient = quotient - 1;\n        quotientHigh = 0;\n      }\n    }\n  }\n  if (signValue != 0) {\n    hasOverflow = quotient != 0;\n    quotient = -quotient;\n    quotientHigh = -quotientHigh - (uint)hasOverflow;\n  }\n  return CONCAT44(quotientHigh,quotient);\n}\n\n",
            "renaming": {
                "FUN_000845c0": "divide_and_remainder_000845c0",
                "param_1": "dividend",
                "param_2": "dividendSign",
                "param_3": "divisor",
                "param_4": "divisorSign",
                "lVar1": "quotientAndRemainder",
                "uVar2": "quotient",
                "uVar3": "quotientHigh",
                "uVar4": "quotientLow",
                "uVar5": "remainder",
                "iVar6": "shiftCount",
                "uVar7": "temp1",
                "uVar8": "temp2",
                "uVar9": "signValue",
                "uVar10": "dividendScaled",
                "uVar11": "quotientRemainderHigh",
                "uVar12": "quotientRemainderLow",
                "bVar13": "hasOverflow"
            },
            "calling": [
                "FUN_0008455c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084860": {
            "entrypoint": "0x00084860",
            "current_name": "unsigned_long_division_00084860",
            "code": "\nulonglong unsignedLongDivision_00084860(uint dividend,uint divisor,uint quotientHigh,uint quotientLow)\n\n{\n  longlong product;\n  uint quotient;\n  uint quotientHighTemp;\n  uint quotientLowTemp;\n  uint remainder;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  int shiftCount;\n  bool carryFlag;\n  \n  if (quotientLow == 0) {\n    if (quotientHigh <= divisor) {\n      if (quotientHigh == 0) {\n        quotientHigh = 1 / 0;\n      }\n      shiftCount = LZCOUNT(quotientHigh);\n      if (shiftCount == 0) {\n        divisor = divisor - quotientHigh;\n        quotientHighTemp = quotientHigh >> 0x10;\n        remainder = quotientHigh & 0xffff;\n        quotient = 1;\n      }\n      else {\n        quotientHigh = quotientHigh << shiftCount;\n        temp3 = divisor >> (0x20U - shiftCount & 0xff);\n        quotientHighTemp = quotientHigh >> 0x10;\n        temp4 = temp3 / quotientHighTemp;\n        remainder = quotientHigh & 0xffff;\n        quotient = remainder * temp4;\n        temp1 = dividend >> (0x20U - shiftCount & 0xff) | divisor << shiftCount;\n        quotientLowTemp = temp1 >> 0x10 | (temp3 - quotientHighTemp * temp4) * 0x10000;\n        dividend = dividend << shiftCount;\n        temp3 = temp4;\n        if (quotientLowTemp <= quotient && quotient - quotientLowTemp != 0) {\n          carryFlag = CARRY4(quotientLowTemp,quotientHigh);\n          quotientLowTemp = quotientLowTemp + quotientHigh;\n          temp3 = temp4 - 1;\n          if ((carryFlag == false) && (quotientLowTemp <= quotient && quotient - quotientLowTemp != 0)) {\n            temp3 = temp4 - 2;\n            quotientLowTemp = quotientLowTemp + quotientHigh;\n          }\n        }\n        temp2 = (quotientLowTemp - quotient) / quotientHighTemp;\n        temp4 = remainder * temp2;\n        divisor = temp1 & 0xffff | ((quotientLowTemp - quotient) - quotientHighTemp * temp2) * 0x10000;\n        quotient = temp2;\n        if (divisor <= temp4 && temp4 - divisor != 0) {\n          carryFlag = CARRY4(divisor,quotientHigh);\n          divisor = divisor + quotientHigh;\n          quotient = temp2 - 1;\n          if ((carryFlag == false) && (divisor <= temp4 && temp4 - divisor != 0)) {\n            quotient = temp2 - 2;\n            divisor = divisor + quotientHigh;\n          }\n        }\n        divisor = divisor - temp4;\n        quotient = quotient | temp3 << 0x10;\n      }\n      temp4 = divisor / quotientHighTemp;\n      quotientLowTemp = remainder * temp4;\n      temp1 = dividend >> 0x10 | (divisor - quotientHighTemp * temp4) * 0x10000;\n      temp3 = temp4;\n      if (temp1 <= quotientLowTemp && quotientLowTemp - temp1 != 0) {\n        carryFlag = CARRY4(temp1,quotientHigh);\n        temp1 = temp1 + quotientHigh;\n        temp3 = temp4 - 1;\n        if ((carryFlag == false) && (temp1 <= quotientLowTemp && quotientLowTemp - temp1 != 0)) {\n          temp3 = temp4 - 2;\n          temp1 = temp1 + quotientHigh;\n        }\n      }\n      temp4 = (temp1 - quotientLowTemp) / quotientHighTemp;\n      remainder = remainder * temp4;\n      temp1 = dividend & 0xffff | ((temp1 - quotientLowTemp) - quotientHighTemp * temp4) * 0x10000;\n      quotientHighTemp = temp4;\n      if (temp1 <= remainder && remainder - temp1 != 0) {\n        quotientHighTemp = temp4 - 1;\n        if ((CARRY4(temp1,quotientHigh) == false) &&\n           (temp1 + quotientHigh <= remainder && remainder - (temp1 + quotientHigh) != 0)) {\n          quotientHighTemp = temp4 - 2;\n        }\n      }\n      return CONCAT44(quotient,quotientHighTemp | temp3 << 0x10);\n    }\n    shiftCount = LZCOUNT(quotientHigh);\n    if (shiftCount != 0) {\n      temp3 = dividend >> (0x20U - shiftCount & 0xff);\n      quotientHigh = quotientHigh << shiftCount;\n      dividend = dividend << shiftCount;\n      divisor = temp3 | divisor << shiftCount;\n    }\n    quotient = quotientHigh >> 0x10;\n    quotientHighTemp = divisor / quotient;\n    remainder = (quotientHigh & 0xffff) * quotientHighTemp;\n    temp4 = dividend >> 0x10 | (divisor - quotient * quotientHighTemp) * 0x10000;\n    temp3 = quotientHighTemp;\n    if (temp4 <= remainder && remainder - temp4 != 0) {\n      carryFlag = CARRY4(temp4,quotientHigh);\n      temp4 = temp4 + quotientHigh;\n      temp3 = quotientHighTemp - 1;\n      if ((carryFlag == false) && (temp4 <= remainder && remainder - temp4 != 0)) {\n        temp3 = quotientHighTemp - 2;\n        temp4 = temp4 + quotientHigh;\n      }\n    }\n    temp1 = (temp4 - remainder) / quotient;\n    quotientHighTemp = (quotientHigh & 0xffff) * temp1;\n    remainder = dividend & 0xffff | ((temp4 - remainder) - quotient * temp1) * 0x10000;\n    quotient = temp1;\n    if (remainder <= quotientHighTemp && quotientHighTemp - remainder != 0) {\n      quotient = temp1 - 1;\n      if ((CARRY4(remainder,quotientHigh) == false) &&\n         (remainder + quotientHigh <= quotientHighTemp && quotientHighTemp - (remainder + quotientHigh) != 0)) {\n        quotient = temp1 - 2;\n      }\n    }\n    quotient = quotient | temp3 << 0x10;\n  }\n  else {\n    if (divisor < quotientLow) {\n      return 0;\n    }\n    shiftCount = LZCOUNT(quotientLow);\n    if (shiftCount == 0) {\n      if ((quotientLow < divisor) || (quotientHigh <= dividend)) {\n        return 1;\n      }\n      quotient = 0;\n    }\n    else {\n      quotient = 0x20 - shiftCount;\n      temp3 = divisor >> (quotient & 0xff);\n      quotientHighTemp = quotientLow << shiftCount | quotientHigh >> (quotient & 0xff);\n      remainder = quotientHighTemp >> 0x10;\n      quotientLowTemp = temp3 / remainder;\n      temp4 = (quotientHighTemp & 0xffff) * quotientLowTemp;\n      temp1 = dividend >> (quotient & 0xff) | divisor << shiftCount;\n      quotient = temp1 >> 0x10 | (temp3 - remainder * quotientLowTemp) * 0x10000;\n      temp3 = quotientLowTemp;\n      if (quotient <= temp4 && temp4 - quotient != 0) {\n        carryFlag = CARRY4(quotient,quotientHighTemp);\n        quotient = quotient + quotientHighTemp;\n        temp3 = quotientLowTemp - 1;\n        if ((carryFlag == false) && (quotient <= temp4 && temp4 - quotient != 0)) {\n          temp3 = quotientLowTemp - 2;\n          quotient = quotient + quotientHighTemp;\n        }\n      }\n      quotientLowTemp = (quotient - temp4) / remainder;\n      temp2 = (quotientHighTemp & 0xffff) * quotientLowTemp;\n      remainder = temp1 & 0xffff | ((quotient - temp4) - remainder * quotientLowTemp) * 0x10000;\n      quotient = quotientLowTemp;\n      if (remainder <= temp2 && temp2 - remainder != 0) {\n        carryFlag = CARRY4(remainder,quotientHighTemp);\n        remainder = remainder + quotientHighTemp;\n        quotient = quotientLowTemp - 1;\n        if ((carryFlag == false) && (remainder <= temp2 && temp2 - remainder != 0)) {\n          quotient = quotientLowTemp - 2;\n          remainder = remainder + quotientHighTemp;\n        }\n      }\n      quotient = quotient | temp3 << 0x10;\n      product = (ulonglong)quotient * (ulonglong)(quotientHigh << shiftCount);\n      temp3 = (uint)((ulonglong)product >> 0x20);\n      if ((remainder - temp2 < temp3) || ((remainder - temp2 == temp3 && (dividend << shiftCount < (uint)product)))\n         ) {\n        quotient = quotient - 1;\n      }\n    }\n  }\n  return (ulonglong)quotient;\n}\n\n",
            "renaming": {
                "FUN_00084860": "unsigned_long_division_00084860",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotientHigh",
                "param_4": "quotientLow",
                "lVar1": "product",
                "uVar2": "quotient",
                "uVar3": "quotientHighTemp",
                "uVar4": "quotientLowTemp",
                "uVar5": "remainder",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "uVar8": "temp3",
                "uVar9": "temp4",
                "iVar10": "shiftCount",
                "bVar11": "carryFlag"
            },
            "calling": [
                "FUN_0008458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085844": {
            "entrypoint": "0x00085844",
            "current_name": "FUNC_00085844",
            "code": "\nvoid FUNC_00085844(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085844": "FUNC_00085844"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 104438,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_000805a8",
            "FUN_000809be",
            "FUN_000809e4",
            "FUN_00080a0a",
            "FUN_00080a94",
            "FUN_00080aa8",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080c98",
            "FUN_00080d30",
            "FUN_00080d3e",
            "FUN_00080d58",
            "FUN_00080d62",
            "FUN_00080d6a",
            "FUN_00080e80",
            "FUN_00080e88",
            "FUN_00080eaa",
            "FUN_00080eb0",
            "FUN_00080eba",
            "FUN_00080ebe",
            "FUN_00080ec2",
            "FUN_00080ec8",
            "FUN_00080efe",
            "thunk_FUN_000816d8",
            "FUN_000810cc",
            "FUN_00081190",
            "FUN_000811ca",
            "FUN_00081248",
            "FUN_00081276",
            "FUN_000812b8",
            "FUN_00081348",
            "FUN_0008145c",
            "FUN_000815de",
            "FUN_00081618",
            "FUN_00081684",
            "FUN_000816d8",
            "FUN_000816ec",
            "FUN_00081778",
            "FUN_00081d48",
            "FUN_00081e34",
            "FUN_00081f00",
            "FUN_00082390",
            "FUN_000825cc",
            "FUN_00082688",
            "FUN_00084004",
            "FUN_0008400c",
            "FUN_000840f8",
            "thunk_FUN_00080efe",
            "FUN_0008439c",
            "FUN_000845c0",
            "FUN_00084860"
        ],
        [
            "FUN_000806f8",
            "FUN_00080970",
            "FUN_00080a30",
            "FUN_000810a6",
            "FUN_000811b0",
            "FUN_000811e8",
            "FUN_000813dc",
            "FUN_00081438",
            "FUN_000815b8",
            "FUN_00081624",
            "FUN_0008236c",
            "FUN_00083888",
            "FUN_000841e4",
            "FUN_0008434c",
            "FUN_00084494",
            "FUN_000844bc",
            "FUN_000844e0",
            "FUN_00084508",
            "FUN_0008455c",
            "FUN_0008458c"
        ],
        [
            "FUN_00080164",
            "FUN_0008089c",
            "FUN_00080f0c",
            "FUN_000810c4",
            "FUN_000810d8",
            "FUN_000810fc",
            "FUN_00083a74",
            "FUN_00084220",
            "FUN_00084244",
            "FUN_0008427c",
            "FUN_00084530"
        ],
        [
            "FUN_00081014",
            "FUN_000810e8",
            "FUN_0008113a",
            "thunk_FUN_0008113a",
            "FUN_00083b10"
        ],
        [
            "FUN_0008044c",
            "FUN_00080774",
            "FUN_0008117a",
            "FUN_00081800",
            "FUN_00081810",
            "FUN_00083850"
        ],
        [
            "FUN_00081472",
            "FUN_00081480",
            "FUN_0008151c",
            "FUN_000817f0",
            "FUN_00081fac",
            "FUN_00084018",
            "FUN_00084484"
        ],
        [
            "FUN_00081560",
            "FUN_00081f9c",
            "FUN_0008356c"
        ],
        [
            "FUN_00081496",
            "FUN_00083ca8",
            "FUN_000842a4"
        ],
        [
            "FUN_000814ae",
            "FUN_000839b4"
        ],
        [
            "FUN_000814d0",
            "FUN_00081570",
            "FUN_00082824"
        ],
        [
            "FUN_000814f6",
            "FUN_0008159e"
        ],
        [
            "FUN_00081214"
        ],
        [
            "FUN_00080250"
        ],
        [
            "FUN_00081750",
            "FUN_000817c8",
            "FUN_000834f0"
        ],
        [
            "FUN_00080eec",
            "FUN_0008289c"
        ],
        [
            "FUN_000836ec"
        ],
        [
            "FUN_000816f8"
        ],
        [
            "FUN_00080b2c"
        ],
        [
            "FUN_000803fc"
        ],
        [
            "FUN_000806a0"
        ],
        [
            "FUN_000801e0"
        ],
        [
            "FUN_000815ec"
        ]
    ],
    "locked_functions": []
}