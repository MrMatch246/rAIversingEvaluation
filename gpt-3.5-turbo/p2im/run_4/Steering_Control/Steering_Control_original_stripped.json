{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "set_completed_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 setCompletedFlag_000800f4(undefined4 input)\n\n{\n  if ((char)completionFlag == '\\0') {\n    completionFlag._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "set_completed_flag_000800f4",
                "param_1": "input",
                "completed_7857": "completionFlag"
            },
            "calling": [
                "__libc_fini_array"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080148": {
            "entrypoint": "0x00080148",
            "current_name": "execute_system_interrupt_00080148",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t execute_system_interrupt_00080148(uint32_t a0,uint32_t a1,int32_t a2)\n\n{\n  software_interrupt(0x3f);\n  return a0;\n}\n\n",
            "renaming": {
                "FUN_00080148": "execute_system_interrupt_00080148"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008014c": {
            "entrypoint": "0x0008014c",
            "current_name": "execute_afl_call_0008014c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint executeAflCall_0008014c(int inputTicks)\n\n{\n  uint32_t returnValue;\n  \n  if (noHyperCall == 0) {\n    returnValue = aflCall(1,inputTicks,0);\n    return returnValue;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0008014c": "execute_afl_call_0008014c",
                "ticks": "inputTicks",
                "uVar1": "returnValue"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "servo_control_00080164",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid servoControl_00080164(void)\n\n{\n  void *data;\n  size_t size;\n  \n  Servo::write(&throttleServo,0x5a,data,size);\n  Servo::write(&steeringServo,0x5a,data,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "servo_control_00080164",
                "in_r2": "data",
                "in_r3": "size",
                "throttle": "throttleServo",
                "steering": "steeringServo"
            },
            "calling": [
                "loop",
                "setup"
            ],
            "called": [
                "write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080184": {
            "entrypoint": "0x00080184",
            "current_name": "initialize_servos_00080184",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeServos_00080184(void)\n\n{\n  undefined4 inputParameter;\n  \n  Servo::Servo(&steeringServo);\n  Servo::Servo(&throttleServo);\n  String::String(&commandString,\"\");\n  __aeabi_atexit(&commandString,0x81473,&__dso_handle);\n  String::String(&valueString,\"\");\n  __aeabi_atexit(&valueString,0x81473,&__dso_handle,inputParameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080184": "initialize_servos_00080184",
                "in_r3": "inputParameter",
                "steering": "steeringServo",
                "throttle": "throttleServo",
                "command": "commandString",
                "value": "valueString"
            },
            "calling": [],
            "called": [
                "Servo",
                "String",
                "__aeabi_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801e0": {
            "entrypoint": "0x000801e0",
            "current_name": "initialize_ports_and_devices_000801e0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializePortsAndDevices_000801e0(void)\n\n{\n  UARTClass::begin(&serialPort,0xe100);\n  pinMode(0xd,1);\n  pinMode(6,1);\n  pinMode(0x39,0);\n  pinMode(4,0);\n  pinMode(3,0);\n  pinMode(2,0);\n  Servo::attach(&steeringServo,5);\n  Servo::attach(&throttleServo,6);\n  straightAndStop();\n  delay(1000);\n  startForkserver(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000801e0": "initialize_ports_and_devices_000801e0",
                "Serial": "serialPort",
                "steering": "steeringServo",
                "throttle": "throttleServo"
            },
            "calling": [
                "main"
            ],
            "called": [
                "straightAndStop",
                "delay",
                "attach",
                "begin",
                "startForkserver",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080250": {
            "entrypoint": "0x00080250",
            "current_name": "process_control_signal_00080250",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid processControlSignal_00080250(void)\n\n{\n  uchar comparisonResult;\n  uint32_t pulseDuration;\n  int receivedMotorRaw;\n  int iterationVariable2;\n  long fileDescriptor;\n  Servo *servoInstance;\n  uint ledStatus_uVar3;\n  int fileDescriptor0;\n  int inCharge0;\n  int inCharge1;\n  int fileDescriptor1;\n  void *ptrVariable4;\n  size_t sizeVariable5;\n  String stackString1c;\n  \n  receivedMode = pulseIn(4,1,20000);\n  delay(10);\n  ledStatus_uVar3 = (uint)ledStatus;\n  ledStatus = SUB41(ledStatus_uVar3 ^ 1,0);\n  digitalWrite(0pulseDurationd,ledStatus_uVar3 ^ 1);\n  if (receivedMode < 0pulseDuration641) {\n    if (receivedMode - 0pulseDuration385U < 299) {\n      if (manualControlMode != false) {\n        straightAndStop();\n        Print::println((Print *)&serial,\"Entered manual control manualControlMode.\");\n        manualControlMode = false;\n      }\n      delay(10);\n      pulseDuration = pulseIn(3,1,20000);\n      receivedSteer = map(0,1000,2000,0pulseDuration28,0pulseDuration96);\n      ptrVariable4 = (void *)0pulseDuration7d0;\n      sizeVariable5 = 0pulseDuration28;\n      receivedMotor = map(pulseDuration,1000,2000,0pulseDuration28,0pulseDuration96);\n      while (iterationVariable2 = uart::available(&serial), 0 < iterationVariable2) {\n        uart::read(&serial,fileDescriptor0,ptrVariable4,sizeVariable5);\n        Print::print((Print *)&serial,receivedSteer,10);\n        Print::print((Print *)&serial,\",\");\n        ptrVariable4 = (void *)0pulseDurationa;\n        Print::println((Print *)&serial,receivedMotor,10);\n      }\n      Servo::write(&throttleServo,receivedMotor,ptrVariable4,sizeVariable5);\n      Servo::write(&steeringServo,receivedSteer,ptrVariable4,sizeVariable5);\n    }\n    else {\n      if (manualControlMode == false) {\n        straightAndStop();\n        Print::println((Print *)&serial,\"Entered autonomous control manualControlMode.\");\n      }\n      sizeVariable5 = 1;\n      manualControlMode = true;\nLAB_00080346:\n      iterationVariable2 = uart::available(&serial);\n      if (0 < iterationVariable2) {\n        Stream::readStringUntil((Stream *)&serial,',');\n        String::operator=(&command,&stackString1c);\n        String::~String(&stackString1c,inCharge0);\n        ptrVariable4 = (void *)0pulseDurationa;\n        Stream::readStringUntil((Stream *)&serial,'\\n');\n        String::operator=(&value,&stackString1c);\n        String::~String(&stackString1c,inCharge1);\n        uart::read(&serial,fileDescriptor1,ptrVariable4,sizeVariable5);\n        comparisonResult = String::equals(&command,\"steer\");\n        if (comparisonResult == '\\0') goto LAB_0008039c;\n        fileDescriptor = String::toInt(&value);\n        servoInstance = &steeringServo;\n        goto LAB_000803b2;\n      }\n    }\n  }\n  else {\n    straightAndStop();\n    Print::println((Print *)&serial,\"error\");\n  }\n  return;\nLAB_0008039c:\n  comparisonResult = String::equals(&command,\"motor\");\n  if (comparisonResult != '\\0') {\n    fileDescriptor = String::toInt(&value);\n    servoInstance = &throttleServo;\nLAB_000803b2:\n    Servo::write(servoInstance,fileDescriptor,ptrVariable4,sizeVariable5);\n  }\n  goto LAB_00080346;\n}\n\n",
            "renaming": {
                "FUN_00080250": "process_control_signal_00080250",
                "rxMode": "receivedMode",
                "LEDstatus": "ledStatus",
                "rxSteer": "receivedSteer",
                "mode": "manualControlMode",
                "rxMotor": "receivedMotor",
                "pvVar4": "ptrVariable4",
                "sVar5": "sizeVariable5",
                "throttle": "throttleServo",
                "steering": "steeringServo",
                "UARTClass": "uart",
                "Serial": "serial",
                "__fd_00": "fileDescriptor0",
                "__fd_01": "fileDescriptor1",
                "__in_chrg": "inCharge0",
                "__in_chrg_00": "inCharge1",
                "SStack_1c": "stackString1c",
                "x": "pulseDuration",
                "rxMotorRaw": "receivedMotorRaw",
                "iVar2": "iterationVariable2",
                "__fd": "fileDescriptor",
                "this": "servoInstance",
                "uVar1": "comparisonResult",
                "uVar3": "ledStatus_uVar3"
            },
            "calling": [
                "main"
            ],
            "called": [
                "println",
                "print",
                "write",
                "pulseIn",
                "available",
                "equals",
                "~String",
                "straightAndStop",
                "readStringUntil",
                "operator=",
                "println",
                "delay",
                "toInt",
                "digitalWrite",
                "map",
                "read",
                "print"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803fc": {
            "entrypoint": "0x000803fc",
            "current_name": "configure_timer_000803fc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoperipheralID configureTimer_000803fc(Tc *timer,uint32_t channelIndex,uint32_t peripheralID,IRQn_Type interruptNumber)\n\n{\n  pmc_enable_periph_clk(peripheralID);\n  TC_Configure(timer,channelIndex,0xc002);\n  TC_SetRA(timer,channelIndex,0xa41);\n  *(int *)(((uint)(int)interruptNumber >> 5) * 4 + -0x1fff1f00) = 1 << ((int)interruptNumber & 0x1fU);\n  timer->TC_CHANNEL[channelIndex].TC_IER = 4;\n  TC_Start(timer,channelIndex);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000803fc": "configure_timer_000803fc",
                "tc": "timer",
                "channel": "channelIndex",
                "id": "peripheralID",
                "irqn": "interruptNumber"
            },
            "calling": [
                "attach"
            ],
            "called": [
                "TC_SetRA",
                "pmc_enable_periph_clk",
                "TC_Configure",
                "TC_Start"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008044c": {
            "entrypoint": "0x0008044c",
            "current_name": "update_servo_timer_0008044c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updateServoTimer_0008044c(sequence16_Sequence_t sequence,Tc *timerControl,uint8_t servoChannel)\n\n{\n  uint timerValue;\n  uint servoCount;\n  RwReg clockValue;\n  int index;\n  \n  timerValue = (uint)sequence;\n  if ((Channel[timerValue] & 0x80U) == 0) {\n    index = timerValue * 0xc;\n    if ((Channel[timerValue] + index < (int)(uint)ServoCount) &&\n       ((int)((uint)(byte)servos[Channel[timerValue] + index].Pin << 0x19) < 0)) {\n      digitalWrite((byte)servos[index + Channel[timerValue]].Pin & 0x3f,0);\n    }\n  }\n  else {\n    timerControl->TC_CHANNEL[servoChannel].TC_CCR = timerControl->TC_CHANNEL[servoChannel].TC_CCR | 4;\n  }\n  servoCount = (uint)ServoCount;\n  Channel[timerValue] = Channel[timerValue] + '\\x01';\n  index = timerValue * 0xc;\n  if ((Channel[timerValue] + index < (int)servoCount) && (Channel[timerValue] < '\\f')) {\n    timerControl->TC_CHANNEL[servoChannel].TC_RA =\n         timerControl->TC_CHANNEL[servoChannel].TC_CV + servos[Channel[timerValue] + index].ticks;\n    if (-1 < (int)((uint)(byte)servos[Channel[timerValue] + index].Pin << 0x19)) {\n      return;\n    }\n    digitalWrite((byte)servos[index + Channel[timerValue]].Pin & 0x3f,1);\n    return;\n  }\n  clockValue = (SystemCoreClock / 1000000) * 20000 >> 5;\n  if (clockValue <= timerControl->TC_CHANNEL[servoChannel].TC_CV + 4) {\n    clockValue = timerControl->TC_CHANNEL[servoChannel].TC_CV + 4;\n  }\n  timerControl->TC_CHANNEL[servoChannel].TC_RA = clockValue;\n  Channel[timerValue] = -1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008044c": "update_servo_timer_0008044c",
                "timer": "sequence",
                "tc": "timerControl",
                "channel": "servoChannel",
                "uVar1": "timerValue",
                "uVar2": "servoCount",
                "RVar3": "clockValue",
                "iVar4": "index"
            },
            "calling": [
                "TC4_Handler",
                "TC2_Handler",
                "TC0_Handler",
                "TC3_Handler",
                "TC5_Handler"
            ],
            "called": [
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080558": {
            "entrypoint": "0x00080558",
            "current_name": "initialize_servo_handler_00080558",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeServoHandler_00080558(void)\n\n{\n  Servo_Handler(_timer1,(Tc *)0x40084000,'\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080558": "initialize_servo_handler_00080558"
            },
            "calling": [],
            "called": [
                "Servo_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080568": {
            "entrypoint": "0x00080568",
            "current_name": "initialize_servo_00080568",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeServo_00080568(void)\n\n{\n  Servo_Handler(servoTimer,(timerController *)0x40084000,'\\x01');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080568": "initialize_servo_00080568",
                "_timer2": "servoTimer",
                "Tc": "timerController"
            },
            "calling": [],
            "called": [
                "Servo_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080578": {
            "entrypoint": "0x00080578",
            "current_name": "initialize_servo_handler_00080578",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeServoHandler_00080578(void)\n\n{\n  handleServo(servoTimer,(timerControl *)0x40084000,'\\x02');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080578": "initialize_servo_handler_00080578",
                "_timer3": "servoTimer",
                "Tc": "timerControl",
                "Servo_Handler": "handleServo"
            },
            "calling": [],
            "called": [
                "Servo_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080588": {
            "entrypoint": "0x00080588",
            "current_name": "initialize_servo_handler_00080588",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeServoHandler_00080588(void)\n\n{\n  Servo_Handler(servoChannel,(Tc *)0x40080000,'\\x02');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080588": "initialize_servo_handler_00080588",
                "_timer4": "servoChannel"
            },
            "calling": [],
            "called": [
                "Servo_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080598": {
            "entrypoint": "0x00080598",
            "current_name": "initialize_servo_00080598",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeServo_00080598(void)\n\n{\n  Servo_Handler(timer,(Tc *)0x40080000,'\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080598": "initialize_servo_00080598",
                "_timer5": "timer"
            },
            "calling": [],
            "called": [
                "Servo_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805a8": {
            "entrypoint": "0x000805a8",
            "current_name": "initialize_servo_000805a8",
            "code": "\n/* DWARF original prototype: Servo *  Servo(Servo * servoObject) */\n\nServo * __servoObjectcall Servo::initializeServo_000805a8(Servo *servoObject)\n\n{\n  uint8_t newServoCount;\n  uint servoCount;\n  \n  servoCount = (uint)currentServoCount;\n  if (servoCount < 0x3c) {\n    newServoCount = currentServoCount + '\\x01';\n    servoObject->servoIndex = currentServoCount;\n    currentServoCount = newServoCount;\n    listOfServoTicks[uVar2] = (systemClockFrequency / 1000000) * 0x5dc >> 5;\n    return servoObject;\n  }\n  servoObject->servoIndex = 0xff;\n  return servoObject;\n}\n\n",
            "renaming": {
                "this": "servoObject",
                "uVar1": "newServoCount",
                "uVar2": "servoCount",
                "ServoCount": "currentServoCount",
                "servos": "listOfServos",
                "servos[uVar2].ticks": "listOfServoTicks[uVar2]",
                "SystemCoreClock": "systemClockFrequency",
                "FUN_000805a8": "initialize_servo_000805a8"
            },
            "calling": [
                "_GLOBAL__sub_I_steering"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805e8": {
            "entrypoint": "0x000805e8",
            "current_name": "attach_000805e8",
            "code": "\n/* DWARF original prototype: uint8_t  attach_000805e8(Servo * servo, int servoPin, int minimum, int maximum) */\n\nuint8_t __servocall Servo::attach_000805e8(Servo *servo,int servoPin,int minimum,int maximum)\n\n{\n  ServoPin_t servoPin_t;\n  timer16_Sequence_t16_Sequence_t timer16_Sequence_t;\n  Tc *Tc;\n  uint32_t channel;\n  uint32_t id;\n  int iteration;\n  uint index;\n  \n  if (0x3b < servo->servoIndex) goto LAB_00080660;\n  servoPinMode(servoPin,1);\n  index = (uint)servo->servoIndex;\n  servoPin_t = servos[index].Pin;\n  servo->maximum = (int8_t)((0x960U - maximum) / 4);\n  channel = index / 0xc;\n  servos[index].Pin = (ServoPin_t)((byte)servoPin_t & 0xc0 | (byte)servoPin & 0x3f);\n  servo->minimum = (int8_t)((0x220U - minimum) / 4);\n  iteration = 0;\n  do {\n    if ((int)((uint)(byte)servos[iteration + channel * 0xc].Pin << 0x19) < 0) goto LAB_00080652;\n    iteration = iteration + 1;\n  } while (iteration != 0xc);\n  if (channel == 0) {\n    Tc = (Tc *)0x40084000;\n    id = 0x1e;\nLAB_0008064c:\n    _initISR(Tc,channel,id,(IRQn_Type)id);\n  }\n  else {\n    if (channel == 1) {\n      Tc = (Tc *)0x40084000;\n      id = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (channel == 2) {\n      Tc = (Tc *)0x40084000;\n      id = 0x20;\n      goto LAB_0008064c;\n    }\n    if (channel == 3) {\n      Tc = (Tc *)0x40080000;\n      channel = 2;\n      id = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (channel == 4) {\n      Tc = (Tc *)0x40080000;\n      channel = 0;\n      id = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  servos[servo->servoIndex].Pin = (ServoPin_t)((byte)servos[servo->servoIndex].Pin | 0x40);\nLAB_00080660:\n  return servo->servoIndex;\n}\n\n",
            "renaming": {
                "FUN_000805e8": "attach_000805e8",
                "this": "servo",
                "pin": "servoPin",
                "min": "minimum",
                "max": "maximum",
                "SVar1": "servoPin_t",
                "timer": "timer16_Sequence_t",
                "tc": "Tc",
                "iVar2": "iteration",
                "uVar3": "index"
            },
            "calling": [
                "attach"
            ],
            "called": [
                "_initISR",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806a0": {
            "entrypoint": "0x000806a0",
            "current_name": "attach_servo_to_pin_000806a0",
            "code": "\n/* DWARF original prototype: uint8_t  attach(Servo * servo, int servoPin) */\n\nuint8_t __servocall Servo::attachServoToPin_000806a0(Servo *servo,int servoPin)\n\n{\n  uint8_t result;\n  \n  result = attach(servo,servoPin,0x220,0x960);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000806a0": "attach_servo_to_pin_000806a0",
                "this": "servo",
                "pin": "servoPin",
                "uVar1": "result"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "attach"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806ac": {
            "entrypoint": "0x000806ac",
            "current_name": "write_servo_microseconds_000806ac",
            "code": "\n/* DWARF original prototype: void  writeMicroseconds(Servo * servo, int microseconds) */\n\nvoid __servocall Servo::write_servo_microseconds_000806ac(Servo *servo,int microseconds)\n\n{\n  byte *servo_channel;\n  int min_diff;\n  int max_diff;\n  \n  if (servo->servoIndex < 0x3c) {\n    min_diff = 0x88 - servo->min;\n    max_diff = min_diff * 4;\n    if ((microseconds + min_diff * -4 < 0 == SBORROW4(microseconds,max_diff)) &&\n       (max_diff = (600 - servo->max) * 4, microseconds <= max_diff)) {\n      max_diff = microseconds;\n    }\n    servos[servo->servoIndex].ticks = (SystemCoreClock / 1000000) * (max_diff + -2) >> 5;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000806ac": "write_servo_microseconds_000806ac",
                "this": "servo",
                "value": "microseconds",
                "channel": "servo_channel",
                "iVar1": "min_diff",
                "iVar2": "max_diff"
            },
            "calling": [
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806f8": {
            "entrypoint": "0x000806f8",
            "current_name": "set_servo_position_000806f8",
            "code": "\n/* DWARF original prototype: void  write(Servo * servo, int value) */\n\nssize_t Servo Servo::setServoPosition_000806f8(Servo *servo,int fileDescriptor,void *buffer,size_t count)\n\n{\n  if (fileDescriptor < 0x220) {\n    if (0xb3 < fileDescriptor) {\n      fileDescriptor = 0xb4;\n    }\n    fileDescriptor = remapValue(fileDescriptor & ~(fileDescriptor >> 0x1f),0,0xb4,(0x88 - servo->min) * 4,(600 - servo->max) * 4);\n  }\n  updateServoPosition(servo,fileDescriptor);\n  return (ssize_t)servo;\n}\n\n",
            "renaming": {
                "__thiscall": "Servo",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__n": "count",
                "this": "servo",
                "map": "remapValue",
                "writeMicroseconds": "updateServoPosition",
                "FUN_000806f8": "set_servo_position_000806f8"
            },
            "calling": [
                "straightAndStop",
                "loop"
            ],
            "called": [
                "writeMicroseconds",
                "map"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008073a": {
            "entrypoint": "0x0008073a",
            "current_name": "FUNC_0008073a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0008073a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008073a": "FUNC_0008073a"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008073c": {
            "entrypoint": "0x0008073c",
            "current_name": "handle_serial_interrupt_0008073c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleSerialInterrupt_0008073c(void)\n\n{\n  UARTClass::IrqHandler(serialObject);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008073c": "handle_serial_interrupt_0008073c",
                "&Serial": "serialObject"
            },
            "calling": [],
            "called": [
                "IrqHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080748": {
            "entrypoint": "0x00080748",
            "current_name": "FUNC_00080748",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_00080748(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080748": "FUNC_00080748"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074a": {
            "entrypoint": "0x0008074a",
            "current_name": "FUNC_0008074a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0008074a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074a": "FUNC_0008074a"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074c": {
            "entrypoint": "0x0008074c",
            "current_name": "FUNC_0008074c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0008074c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074c": "FUNC_0008074c"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080750": {
            "entrypoint": "0x00080750",
            "current_name": "initialize_serial_communication_00080750",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeSerialCommunication_00080750(void)\n\n{\n  UARTClass::IrqHandler(serialPortInstance);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080750": "initialize_serial_communication_00080750",
                "&Serial1.super_UARTClass": "serialPortInstance"
            },
            "calling": [],
            "called": [
                "IrqHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008075c": {
            "entrypoint": "0x0008075c",
            "current_name": "handle_serial2_irq_0008075c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleSerial2IRQ_0008075c(void)\n\n{\n  handleUARTInterrupt(serial2Object);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008075c": "handle_serial2_irq_0008075c",
                "UARTClass::IrqHandler": "handleUARTInterrupt",
                "&Serial2.super_UARTClass": "serial2Object"
            },
            "calling": [],
            "called": [
                "IrqHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080768": {
            "entrypoint": "0x00080768",
            "current_name": "handle_serial3_interrupt_00080768",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleSerial3Interrupt_00080768(void)\n\n{\n  handleUARTInterrupt(pointerToSerial3UARTClass);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080768": "handle_serial3_interrupt_00080768",
                "UARTClass::IrqHandler": "handleUARTInterrupt",
                "&Serial3.super_UARTClass": "pointerToSerial3UARTClass"
            },
            "calling": [],
            "called": [
                "IrqHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080774": {
            "entrypoint": "0x00080774",
            "current_name": "initialize_system_00080774",
            "code": "\n\n\nint initializeSystem_00080774(EVP_PKEY_CTX *ctx)\n\n{\n  int result;\n  uint32_t pinIndex;\n  uint32_t nextPinIndex;\n  \n  SystemInit();\n  _DAT_e000e014 = SystemCoreClock / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  initializeLibraries();\n  pinIndex = 0;\n  do {\n    nextPinIndex = pinIndex + 1;\n    writeDigital(pinIndex,0);\n    pinIndex = nextPinIndex;\n  } while (nextPinIndex != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  configurePIO(&DAT_400e0e00,1,0x300,0);\n  writeDigital(0,1);\n  configurePIO(&DAT_400e0e00,1,0xc00,0);\n  configurePIO(&DAT_400e0e00,1,0x3000,0);\n  configurePIO(&DAT_400e1400,2,0x30,0);\n  configurePIO(&DAT_400e1000,1,0xc00,0);\n  configurePIO(&DAT_400e0e00,1,3,0);\n  configurePIO(&DAT_400e1000,1,0xc000,0);\n  enablePeripheralClock(0x25);\n  initializeADC(0x400c0000,SystemCoreClock,20000000,0xc);\n  configureADCTiming(0x400c0000,0,0x300000,1);\n  configureADCTrigger(0x400c0000,0,0);\n  disableADCInterrupt(0x400c0000,0xffffffff);\n  result = disableAllADCChannels(0x400c0000);\n  initializeAnalogOutput();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080774": "initialize_system_00080774",
                "ulPin": "pinIndex",
                "uVar2": "nextPinIndex",
                "__libc_init_array": "initializeLibraries",
                "PIO_Configure": "configurePIO",
                "digitalWrite": "writeDigital",
                "pmc_enable_periph_clk": "enablePeripheralClock",
                "adc_init": "initializeADC",
                "adc_configure_timing": "configureADCTiming",
                "adc_configure_trigger": "configureADCTrigger",
                "adc_disable_interrupt": "disableADCInterrupt",
                "adc_disable_all_channel": "disableAllADCChannels",
                "analogOutputInit": "initializeAnalogOutput",
                "iVar1": "result"
            },
            "calling": [
                "main"
            ],
            "called": [
                "adc_disable_all_channel",
                "SystemInit",
                "pmc_enable_periph_clk",
                "digitalWrite",
                "adc_configure_trigger",
                "adc_disable_interrupt",
                "analogOutputInit",
                "__libc_init_array",
                "adc_configure_timing",
                "adc_init",
                "PIO_Configure"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008089c": {
            "entrypoint": "0x0008089c",
            "current_name": "initialize_serial_communication_0008089c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeSerialCommunication_0008089c(void)\n\n{\n  RingBuffer::RingBuffer(rxBuffer1);\n  RingBuffer::RingBuffer(txBuffer1);\n  UARTClass::UARTClass(serialPort0,(Uart *)0x400e0800,uartInterrupt0,8,rxBuffer1,txBuffer1);\n  RingBuffer::RingBuffer(rxBuffer2);\n  RingBuffer::RingBuffer(rxBuffer3);\n  RingBuffer::RingBuffer(rxBuffer4);\n  RingBuffer::RingBuffer(txBuffer2);\n  RingBuffer::RingBuffer(txBuffer3);\n  RingBuffer::RingBuffer(txBuffer4);\n  USARTClass::USARTClass(serialPort1,(Usart *)0x40098000,usartInterrupt0,0x11,rxBuffer2,txBuffer2);\n  USARTClass::USARTClass(serialPort2,(Usart *)0x4009c000,usartInterrupt1,0x12,rxBuffer3,txBuffer3);\n  USARTClass::USARTClass(serialPort3,(Usart *)0x400a4000,usartInterrupt3,0x14,rxBuffer4,txBuffer4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008089c": "initialize_serial_communication_0008089c",
                "&rx_buffer1": "rxBuffer1",
                "&tx_buffer1": "txBuffer1",
                "&Serial": "serialPort0",
                "UART_IRQn": "uartInterrupt0",
                "&rx_buffer2": "rxBuffer2",
                "&tx_buffer2": "txBuffer2",
                "&Serial1": "serialPort1",
                "USART0_IRQn": "usartInterrupt0",
                "&rx_buffer3": "rxBuffer3",
                "&tx_buffer3": "txBuffer3",
                "&Serial2": "serialPort2",
                "USART1_IRQn": "usartInterrupt1",
                "&rx_buffer4": "rxBuffer4",
                "&tx_buffer4": "txBuffer4",
                "&Serial3": "serialPort3",
                "USART3_IRQn": "usartInterrupt3"
            },
            "calling": [],
            "called": [
                "UARTClass",
                "USARTClass",
                "RingBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080970": {
            "entrypoint": "0x00080970",
            "current_name": "check_available_serial_events_00080970",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid checkAvailableSerialEvents_00080970(void)\n\n{\n  int availableCount;\n  \n  availableCount = UARTClass::available(SerialPort);\n  if (availableCount != 0) {\n    serialEvent();\n  }\n  availableCount = UARTClass::available(SerialPort1);\n  if (availableCount != 0) {\n    serialEvent1();\n  }\n  availableCount = UARTClass::available(SerialPort2);\n  if (availableCount != 0) {\n    serialEvent2();\n  }\n  availableCount = UARTClass::available(SerialPort3);\n  if (availableCount != 0) {\n    serialEvent3();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080970": "check_available_serial_events_00080970",
                "iVar1": "availableCount",
                "&Serial": "SerialPort",
                "&Serial1.super_UARTClass": "SerialPort1",
                "&Serial2.super_UARTClass": "SerialPort2",
                "&Serial3.super_UARTClass": "SerialPort3"
            },
            "calling": [
                "main"
            ],
            "called": [
                "serialEvent",
                "serialEvent1",
                "serialEvent2",
                "available",
                "serialEvent3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809b4": {
            "entrypoint": "0x000809b4",
            "current_name": "update_value_based_on_condition_000809b4",
            "code": "\nvoid updateValueBasedOnCondition_000809b4(int baseAddress,undefined4 newValue,int condition)\n\n{\n  if (condition != 0) {\n    *(undefined4 *)(baseAddress + 100) = newValue;\n    return;\n  }\n  *(undefined4 *)(baseAddress + 0x60) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809b4": "update_value_based_on_condition_000809b4",
                "param_1": "baseAddress",
                "param_2": "newValue",
                "param_3": "condition"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809be": {
            "entrypoint": "0x000809be",
            "current_name": "update_value_000809be",
            "code": "\nvoid updateValue_000809be(int baseAddress,undefined4 type,uint newValue)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(baseAddress + 0x44) = newValue;\n  switch(type) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~newValue;\n    break;\n  case 2:\n    updatedValue = *(uint *)(baseAddress + 0x70) | newValue;\n    break;\n  default:\n    goto switchD_000809c4_caseD_6;\n  }\n  *(uint *)(baseAddress + 0x70) = updatedValue;\nswitchD_000809c4_caseD_6:\n  *(uint *)(baseAddress + 4) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809be": "update_value_000809be",
                "param_1": "baseAddress",
                "param_2": "type",
                "param_3": "newValue",
                "uVar1": "updatedValue"
            },
            "calling": [
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809e4": {
            "entrypoint": "0x000809e4",
            "current_name": "set_values_000809e4",
            "code": "\nvoid setValues_000809e4(undefined4 *array,undefined4 value,uint flags)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(flags << 0x1f) < 0;\n  array[0x11] = value;\n  if (isNegative) {\n    array[0x19] = value;\n  }\n  if (!isNegative) {\n    array[0x18] = value;\n  }\n  isNegative = (flags & 10) != 0;\n  if (isNegative) {\n    array[8] = value;\n  }\n  if (!isNegative) {\n    array[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    array[0x20] = value;\n  }\n  array[5] = value;\n  *array = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809e4": "set_values_000809e4",
                "param_1": "array",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "isNegative"
            },
            "calling": [
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a0a": {
            "entrypoint": "0x00080a0a",
            "current_name": "set_values_by_condition_00080a0a",
            "code": "\nvoid setValuesByCondition_00080a0a(undefined4 *array,undefined4 value,int condition1,int condition2,int condition3)\n\n{\n  array[0x11] = value;\n  if (condition3 == 0) {\n    array[0x18] = value;\n  }\n  else {\n    array[0x19] = value;\n  }\n  if (condition2 == 0) {\n    array[0x15] = value;\n  }\n  else {\n    array[0x14] = value;\n  }\n  if (condition1 == 0) {\n    array[0xd] = value;\n  }\n  else {\n    array[0xc] = value;\n  }\n  array[4] = value;\n  *array = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a0a": "set_values_by_condition_00080a0a",
                "param_1": "array",
                "param_2": "value",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3"
            },
            "calling": [
                "digitalWrite",
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a30": {
            "entrypoint": "0x00080a30",
            "current_name": "configure_peripheral_00080a30",
            "code": "\nundefined4 configurePeripheral_00080a30(int dev,int mode,undefined4 config,uint flags)\n\n{\n  bool isNegative;\n  \n  switch(mode) {\n  case 1:\n  case 2:\n    setPeripheral(dev,mode,config);\n    isNegative = (int)(flags << 0x1f) < 0;\n    *(undefined4 *)(dev + 0x44) = config;\n    if (isNegative) {\n      *(undefined4 *)(dev + 100) = config;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(dev + 0x60) = config;\n    }\n    break;\n  case 3:\n    setInput(dev,config,flags,0x809e5,dev);\n    break;\n  case 4:\n  case 5:\n    setOutput(dev,config,mode == 5,(flags << 0x1d) >> 0x1f,flags & 1,mode,config\n                 );\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080a30": "configure_peripheral_00080a30",
                "param_1": "dev",
                "param_2": "mode",
                "param_3": "config",
                "param_4": "flags",
                "bVar1": "isNegative",
                "PIO_SetPeripheral": "setPeripheral",
                "PIO_SetInput": "setInput",
                "PIO_SetOutput": "setOutput"
            },
            "calling": [
                "init",
                "pinMode"
            ],
            "called": [
                "PIO_SetInput",
                "PIO_SetOutput",
                "PIO_SetPeripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a94": {
            "entrypoint": "0x00080a94",
            "current_name": "check_bitwise_conditions_00080a94",
            "code": "\nuint check_bitwise_conditions_00080a94(int input_value,uint bitmask)\n\n{\n  uint result;\n  \n  result = *(uint *)(input_value + 8) & bitmask;\n  if (result != 0) {\n    if ((bitmask & *(uint *)(input_value + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080a94": "check_bitwise_conditions_00080a94",
                "param_1": "input_value",
                "param_2": "bitmask",
                "uVar1": "result"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "check_and_set_bit_00080aa8",
            "code": "\n\n\nundefined4 checkAndSetBit_00080aa8(uint value)\n\n{\n  uint bitMask;\n  \n  if (value < 0x2d) {\n    if (value < 0x20) {\n      bitMask = 1 << (value & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (value - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "check_and_set_bit_00080aa8",
                "param_1": "value",
                "uVar1": "bitMask"
            },
            "calling": [
                "init",
                "_initISR",
                "init",
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aec": {
            "entrypoint": "0x00080aec",
            "current_name": "check_bit_and_set_00080aec",
            "code": "\n\n\nundefined4 checkBitAndSet_00080aec(uint input)\n\n{\n  uint bitMask;\n  uint result;\n  \n  if (input < 0x2d) {\n    if (input < 0x20) {\n      bitMask = 1 << (input & 0xff);\n      result = _DAT_400e0618 & bitMask;\n      if (result == bitMask) {\n        _DAT_400e0614 = result;\n      }\n    }\n    else {\n      bitMask = 1 << (input - 0x20 & 0xff);\n      result = _DAT_400e0708 & bitMask;\n      if (result == bitMask) {\n        _DAT_400e0704 = result;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080aec": "check_bit_and_set_00080aec",
                "param_1": "input",
                "uVar1": "bitMask",
                "uVar2": "result"
            },
            "calling": [
                "pinMode",
                "end"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b2c": {
            "entrypoint": "0x00080b2c",
            "current_name": "configure_tc_00080b2c",
            "code": "\nvoid configureTC_00080b2c(undefined4 param1,uint param2,char *param3)\n\n{\n  int offset;\n  int address;\n  undefined8 combinedParams;\n  \n  combinedParams = CONCAT44(param2,param1);\n  if (2 < param2) {\n    param3 = \"TC_Configure\";\n    combinedParams = __assert_func(\"../source/tc.c\",0x40,\"TC_Configure\",\n                          \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  offset = (int)((ulonglong)combinedParams >> 0x20) * 0x40;\n  address = (int)combinedParams + offset;\n  *(undefined4 *)((int)combinedParams + offset) = 2;\n  *(undefined4 *)(address + 0x28) = 0xffffffff;\n  *(char **)(address + 4) = param3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b2c": "configure_tc_00080b2c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar3": "combinedParams",
                "iVar1": "offset",
                "iVar2": "address"
            },
            "calling": [
                "_initISR"
            ],
            "called": [
                "__assert_func"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b64": {
            "entrypoint": "0x00080b64",
            "current_name": "set_channel_value_00080b64",
            "code": "\nvoid setChannelValue_00080b64(undefined4 channelPointer,uint channelIndex)\n\n{\n  undefined8 combinedValue;\n  \n  combinedValue = CONCAT44(channelIndex,channelPointer);\n  if (2 < channelIndex) {\n    combinedValue = __assert_func(\"../source/tc.c\",0x5c,\"TC_Start\",\n                          \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  *(undefined4 *)((int)combinedValue + (int)((ulonglong)combinedValue >> 0x20) * 0x40) = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b64": "set_channel_value_00080b64",
                "param_1": "channelPointer",
                "param_2": "channelIndex",
                "uVar1": "combinedValue"
            },
            "calling": [
                "_initISR"
            ],
            "called": [
                "__assert_func"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b90": {
            "entrypoint": "0x00080b90",
            "current_name": "set_param_value_00080b90",
            "code": "\nvoid setParamValue_00080b90(int baseAddress,int offset,undefined4 value)\n\n{\n  *(undefined4 *)(baseAddress + offset * 0x40 + 0x14) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b90": "set_param_value_00080b90",
                "param_1": "baseAddress",
                "param_2": "offset",
                "param_3": "value"
            },
            "calling": [
                "_initISR"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b98": {
            "entrypoint": "0x00080b98",
            "current_name": "initialize_system_00080b98",
            "code": "\n\n\nvoid initializeSystem_00080b98(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  systemClock = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b98": "initialize_system_00080b98",
                "SystemCoreClock": "systemClock"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c20": {
            "entrypoint": "0x00080c20",
            "current_name": "extract_code_and_initialize_memory_00080c20",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080c6a) */\n\n\nvoid extractCodeAndInitializeMemory_00080c20(void)\n\n{\n  int index;\n  undefined4 *ptr;\n  \n  for (index = 0; sourcePtr + index < destPtr; index = index + 4) {\n    *(undefined4 *)(sourcePtr + index) = *(undefined4 *)(source + index);\n  }\n  for (ptr = destPtr; ptr < dest; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  main();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080c20": "extract_code_and_initialize_memory_00080c20",
                "iVar1": "index",
                "puVar2": "ptr",
                "banzai": "sourcePtr",
                "&completed_7857": "destPtr",
                "&_etext": "source",
                "&_ebss": "dest"
            },
            "calling": [],
            "called": [
                "banzai",
                "main"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c98": {
            "entrypoint": "0x00080c98",
            "current_name": "calculate_index_00080c98",
            "code": "\nundefined4 calculateIndex_00080c98(undefined4 *output,uint inputSize,int compressionFactor,int timeThreshold)\n\n{\n  uint divisionResult;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *output = 1;\n  output[1] = 0;\n  output[0x48] = 0x202;\n  output[0x41] = 0;\n  output[0x45] = 0;\n  divisionResult = inputSize / (uint)(compressionFactor * 2);\n  if (inputSize == compressionFactor * 2 * divisionResult) {\n    divisionResult = divisionResult - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(timeThreshold * (int)(((ulonglong)inputSize / (ulonglong)((divisionResult + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      output[1] = (index & 0xf) << 0x10 | (divisionResult & 0xff) << 8 | output[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080c98": "calculate_index_00080c98",
                "param_1": "output",
                "param_2": "inputSize",
                "param_3": "compressionFactor",
                "param_4": "timeThreshold",
                "uVar1": "divisionResult",
                "uVar2": "index",
                "local_58": "thresholds"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d30": {
            "entrypoint": "0x00080d30",
            "current_name": "update_variable_00080d30",
            "code": "\nvoid updateVariable_00080d30(int variableAddress,uint valueToSet,uint bitValue)\n\n{\n  *(uint *)(variableAddress + 4) = valueToSet | *(uint *)(variableAddress + 4) | (bitValue & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d30": "update_variable_00080d30",
                "param_1": "variableAddress",
                "param_2": "valueToSet",
                "param_3": "bitValue"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d3e": {
            "entrypoint": "0x00080d3e",
            "current_name": "set_flags_00080d3e",
            "code": "\nvoid setFlags_00080d3e(int data,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(data + 4) =\n       value2 | *(uint *)(data + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d3e": "set_flags_00080d3e",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d58": {
            "entrypoint": "0x00080d58",
            "current_name": "set_bit_at_index_00080d58",
            "code": "\nvoid setBitAtIndex_00080d58(int baseAddress,uint bitIndex)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitIndex & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d58": "set_bit_at_index_00080d58",
                "param_1": "baseAddress",
                "param_2": "bitIndex"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d62": {
            "entrypoint": "0x00080d62",
            "current_name": "initialize_value_00080d62",
            "code": "\nvoid initializeValue_00080d62(int memoryLocation)\n\n{\n  *(undefined4 *)(memoryLocation + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d62": "initialize_value_00080d62",
                "param_1": "memoryLocation"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d6a": {
            "entrypoint": "0x00080d6a",
            "current_name": "set_param_value_00080d6a",
            "code": "\nvoid setParamValue_00080d6a(int objectAddress,undefined4 newValue)\n\n{\n  *(undefined4 *)(objectAddress + 0x28) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d6a": "set_param_value_00080d6a",
                "param_1": "objectAddress",
                "param_2": "newValue"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d70": {
            "entrypoint": "0x00080d70",
            "current_name": "execute_isr_00080d70",
            "code": "\nvoid execute_isr_00080d70(void)\n\n{\n  if (isr_function != (code *)0x0) {\n    (*isr_function)();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d70": "execute_isr_00080d70",
                "gpf_isr": "isr_function"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d80": {
            "entrypoint": "0x00080d80",
            "current_name": "process_interrupts_00080d80",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid processInterrupts_00080d80(void)\n\n{\n  uint8_t leading_zeros;\n  uint32_t interruptStatus;\n  uint leadingZerosCount;\n  \n  for (interruptStatus = _DAT_400e0e4c; (uint)LZCOUNT(interruptStatus) < 0x20; interruptStatus = interruptStatus & ~(1 << leadingZerosCount)) {\n    leadingZerosCount = 0x1fU - LZCOUNT(interruptStatus) & 0xff;\n    if (pioACallbacks[leadingZerosCount] != (interruptCB)0x0) {\n      (*pioACallbacks[leadingZerosCount])();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d80": "process_interrupts_00080d80",
                "isr": "interruptStatus",
                "uVar1": "leadingZerosCount",
                "callbacksPioA": "pioACallbacks"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080db8": {
            "entrypoint": "0x00080db8",
            "current_name": "process_interrupts_00080db8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid processInterrupts_00080db8(void)\n\n{\n  uint8_t numLeadingZeros;\n  uint32_t interruptStatus;\n  uint shiftAmount;\n  \n  for (interruptStatus = _DAT_400e104c; (uint)LZCOUNT(interruptStatus) < 0x20; interruptStatus = interruptStatus & ~(1 << shiftAmount)) {\n    shiftAmount = 0x1fU - LZCOUNT(interruptStatus) & 0xff;\n    if (callbacksPioB[shiftAmount] != (interruptCB)0x0) {\n      (*callbacksPioB[shiftAmount])();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080db8": "process_interrupts_00080db8",
                "leading_zeros": "numLeadingZeros",
                "isr": "interruptStatus",
                "uVar1": "shiftAmount"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080df0": {
            "entrypoint": "0x00080df0",
            "current_name": "process_interrupts_00080df0",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid processInterrupts_00080df0(void)\n\n{\n  uint8_t zeros;\n  uint32_t interruptStatus;\n  uint shiftAmount;\n  \n  for (interruptStatus = _DAT_400e124c; (uint)LZCOUNT(interruptStatus) < 0x20; interruptStatus = interruptStatus & ~(1 << shiftAmount)) {\n    shiftAmount = 0x1fU - LZCOUNT(interruptStatus) & 0xff;\n    if (callbacksPioC[shiftAmount] != (interruptCB)0x0) {\n      (*callbacksPioC[shiftAmount])();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080df0": "process_interrupts_00080df0",
                "leading_zeros": "zeros",
                "isr": "interruptStatus",
                "uVar1": "shiftAmount"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e28": {
            "entrypoint": "0x00080e28",
            "current_name": "execute_interrupt_callbacks_00080e28",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid executeInterruptCallbacks_00080e28(void)\n\n{\n  uint8_t leading_zeros;\n  uint32_t interruptStatusReg;\n  uint leadingZerosCount;\n  \n  for (interruptStatusReg = _DAT_400e144c; (uint)LZCOUNT(interruptStatusReg) < 0x20; interruptStatusReg = interruptStatusReg & ~(1 << leadingZerosCount)) {\n    leadingZerosCount = 0x1fU - LZCOUNT(interruptStatusReg) & 0xff;\n    if (pioDInterruptCallbacks[leadingZerosCount] != (interruptCB)0x0) {\n      (*pioDInterruptCallbacks[leadingZerosCount])();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e28": "execute_interrupt_callbacks_00080e28",
                "isr": "interruptStatusReg",
                "uVar1": "leadingZerosCount",
                "callbacksPioD": "pioDInterruptCallbacks"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e60": {
            "entrypoint": "0x00080e60",
            "current_name": "loop_forever_00080e60",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid loop_forever_00080e60(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080e60": "loop_forever_00080e60"
            },
            "calling": [
                "__halt"
            ],
            "called": [
                "__halt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e62": {
            "entrypoint": "0x00080e62",
            "current_name": "infinite_loop_00080e62",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_00080e62(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080e62": "infinite_loop_00080e62"
            },
            "calling": [],
            "called": [
                "__halt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e66": {
            "entrypoint": "0x00080e66",
            "current_name": "infinite_loop_00080e66",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_00080e66(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080e66": "infinite_loop_00080e66"
            },
            "calling": [],
            "called": [
                "__halt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e6a": {
            "entrypoint": "0x00080e6a",
            "current_name": "reset_and_increment_time_tick_00080e6a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid resetAndIncrementTimeTick_00080e6a(void)\n\n{\n  int isFalse;\n  \n  isFalse = __false();\n  if (isFalse == 0) {\n    resetTick();\n    incrementTimeTick();\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e6a": "reset_and_increment_time_tick_00080e6a",
                "iVar1": "isFalse",
                "tickReset": "resetTick",
                "TimeTick_Increment": "incrementTimeTick"
            },
            "calling": [],
            "called": [
                "tickReset",
                "TimeTick_Increment",
                "__false"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e80": {
            "entrypoint": "0x00080e80",
            "current_name": "zero_00080e80",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint zero_00080e80(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080e80": "zero_00080e80"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e84": {
            "entrypoint": "0x00080e84",
            "current_name": "infinite_loop_00080e84",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_00080e84(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080e84": "infinite_loop_00080e84"
            },
            "calling": [
                "PendSV_Handler",
                "__halt",
                "SVC_Handler"
            ],
            "called": [
                "__halt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e88": {
            "entrypoint": "0x00080e88",
            "current_name": "allocate_memory_block_00080e88",
            "code": "\nvoid * allocateMemoryBlock_00080e88(intptr_t memoryBlockSize)\n\n{\n  uchar *currentHeapPointer;\n  uchar *previousHeapPointer;\n  \n  if (_sbrk::heap == (uchar *)0x0) {\n    _sbrk::heap = &_ebss;\n  }\n  currentHeapPointer = _sbrk::heap;\n  _sbrk::heap = _sbrk::heap + memoryBlockSize;\n  return currentHeapPointer;\n}\n\n",
            "renaming": {
                "FUN_00080e88": "allocate_memory_block_00080e88",
                "__delta": "memoryBlockSize",
                "puVar1": "currentHeapPointer",
                "prev_heap": "previousHeapPointer"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ea4": {
            "entrypoint": "0x00080ea4",
            "current_name": "copy_string_00080ea4",
            "code": "\nint copy_string_00080ea4(char *source_str,char *destination_str)\n\n{\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_00080ea4": "copy_string_00080ea4",
                "__from": "source_str",
                "__to": "destination_str"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eaa": {
            "entrypoint": "0x00080eaa",
            "current_name": "close_file_descriptor_00080eaa",
            "code": "\nint closeFileDescriptor_00080eaa(int fileDescriptor)\n\n{\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_00080eaa": "close_file_descriptor_00080eaa",
                "__fd": "fileDescriptor"
            },
            "calling": [
                "_close_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eb0": {
            "entrypoint": "0x00080eb0",
            "current_name": "set_device_mode_00080eb0",
            "code": "\nint setDeviceMode_00080eb0(int fileDescriptor,stat *fileStatus)\n\n{\n  *(undefined4 *)((int)&fileStatus->deviceMode + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080eb0": "set_device_mode_00080eb0",
                "__fd": "fileDescriptor",
                "__buf": "fileStatus",
                "st_dev": "deviceMode"
            },
            "calling": [
                "_fstat_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eba": {
            "entrypoint": "0x00080eba",
            "current_name": "check_file_descriptor_validity_00080eba",
            "code": "\nint checkFileDescriptorValidity_00080eba(int fileDescriptor)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080eba": "check_file_descriptor_validity_00080eba",
                "__fd": "fileDescriptor"
            },
            "calling": [
                "_isatty_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ebe": {
            "entrypoint": "0x00080ebe",
            "current_name": "get_file_offset_00080ebe",
            "code": "\n__off_t get_file_offset_00080ebe(int file_descriptor,__off_t offset,int origin)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ebe": "get_file_offset_00080ebe",
                "__fd": "file_descriptor",
                "__offset": "offset",
                "__whence": "origin"
            },
            "calling": [
                "_lseek_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec2": {
            "entrypoint": "0x00080ec2",
            "current_name": "parse_file_00080ec2",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint parseFile_00080ec2(int fileDescriptor,char *unusedPointer,int unusedLength)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ec2": "parse_file_00080ec2",
                "file_UNUSED": "fileDescriptor",
                "ptr_UNUSED": "unusedPointer",
                "len_UNUSED": "unusedLength"
            },
            "calling": [
                "_read_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec8": {
            "entrypoint": "0x00080ec8",
            "current_name": "byte_array_processing_00080ec8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nint byteArrayProcessing_00080ec8(int fileDescriptor,char *byteArray,int arrayLength)\n\n{\n  int index;\n  \n  for (index = 0; index < arrayLength; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)(byte)byteArray[index];\n  }\n  return arrayLength & ~(arrayLength >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_00080ec8": "byte_array_processing_00080ec8",
                "file_UNUSED": "fileDescriptor",
                "ptr": "byteArray",
                "len": "arrayLength",
                "iVar1": "index"
            },
            "calling": [
                "_write_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eec": {
            "entrypoint": "0x00080eec",
            "current_name": "exit_with_status_00080eec",
            "code": "\nvoid exitWithStatus_00080eec(int status)\n\n{\n  printStatus(\"Exiting with status %d.\\n\",status);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "__status": "status",
                "iprintf": "printStatus"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080efc": {
            "entrypoint": "0x00080efc",
            "current_name": "FUNC_00080efc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_00080efc(int pid_UNUSED,int sig_UNUSED)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080efc": "FUNC_00080efc"
            },
            "calling": [
                "_kill_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080efe": {
            "entrypoint": "0x00080efe",
            "current_name": "get_process_id_00080efe",
            "code": "\n\n\n__pid_t get_process_id_00080efe(void)\n\n{\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_00080efe": "get_process_id_00080efe"
            },
            "calling": [
                "_getpid_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f04": {
            "entrypoint": "0x00080f04",
            "current_name": "get_tick_count_00080f04",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getTickCount_00080f04(void)\n\n{\n  return tickCount;\n}\n\n",
            "renaming": {
                "FUN_00080f04": "get_tick_count_00080f04",
                "_dwTickCount": "tickCount"
            },
            "calling": [
                "timedRead"
            ],
            "called": [
                "GetTickCount"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f08": {
            "entrypoint": "0x00080f08",
            "current_name": "FUNC_00080f08",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_00080f08(uint32_t ms)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f08": "FUNC_00080f08"
            },
            "calling": [
                "loop",
                "setup",
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080f0a": {
            "entrypoint": "0x00080f0a",
            "current_name": "FUNC_00080f0a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_00080f0a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f0a": "FUNC_00080f0a"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080f0c": {
            "entrypoint": "0x00080f0c",
            "current_name": "configure_pin_00080f0c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configurePin_00080f0c(uint32_t pinNumber,uint32_t mode)\n\n{\n  undefined4 configType;\n  byte pinStatusLowBits;\n  byte pinStatus;\n  Pio *pinPort;\n  \n  if (pinDescriptionArr[pinNumber].pinNumberType != NO_PIN) {\n    if ((pinStatusArr[pinNumber] & 0xf) == 4) {\n      disableADCChannel(0x400c0000,pinDescriptionArr[pinNumber].ulADCChannelNumber);\n    }\n    pinStatus = pinStatusArr[pinNumber];\n    pinStatusLowBits = pinStatus & 0xf;\n    if ((pinStatusLowBits < 3) && (pinStatus != 0)) {\n      if (pinStatusLowBits == 2) {\n        if (mode == 0) {\n          return;\n        }\n      }\n      else if (pinStatusLowBits == 1) {\n        if (mode == 2) {\n          return;\n        }\n      }\n      else if (pinStatusLowBits == 3) {\n        if (mode == 1) {\n          return;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (mode != 1) {\nLAB_00080f68:\n      if (mode == 0) {\n        enablePeripheralClk(pinDescriptionArr[pinNumber].ulPeripheralId);\n        configurePIO(pinDescriptionArr[pinNumber].pPort,3,pinDescriptionArr[pinNumber].pinNumber,0);\n        pinStatus = pinStatusArr[pinNumber] & 0xf0 | 2;\n      }\n      else {\n        if (mode != 2) {\n          return;\n        }\n        enablePeripheralClk(pinDescriptionArr[pinNumber].ulPeripheralId);\n        configurePIO(pinDescriptionArr[pinNumber].pPort,3,pinDescriptionArr[pinNumber].pinNumber,1);\n        pinStatus = pinStatusArr[pinNumber] & 0xf0 | 1;\n      }\n      pinStatusArr[pinNumber] = pinStatus;\n      return;\n    }\n    pinPort = pinDescriptionArr[pinNumber].pPort;\n    if (pinStatus >> 4 == 0) {\n      configType = 4;\n    }\n    else {\n      configType = 5;\n    }\n    configurePIO(pinPort,configType,pinDescriptionArr[pinNumber].pinNumber,\n                  pinDescriptionArr[pinNumber].pinNumberConfiguration);\n    pinStatusArr[pinNumber] = pinStatusArr[pinNumber] & 0xf0 | 3;\n    if (pinPort->PIO_OSR == 0xffffffff) {\n      disablePeripheralClk(pinDescriptionArr[pinNumber].ulPeripheralId);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f0c": "configure_pin_00080f0c",
                "ulPin": "pinNumber",
                "ulMode": "mode",
                "uVar1": "configType",
                "bVar2": "pinStatusLowBits",
                "bVar3": "pinStatus",
                "pPVar4": "pinPort",
                "g_APinDescription": "pinDescriptionArr",
                "PIO_NOT_A_PIN": "NO_PIN",
                "g_pinStatus": "pinStatusArr",
                "adc_disable_channel": "disableADCChannel",
                "pmc_enable_periph_clk": "enablePeripheralClk",
                "PIO_Configure": "configurePIO",
                "pmc_disable_periph_clk": "disablePeripheralClk"
            },
            "calling": [
                "digitalWrite",
                "setup",
                "attach"
            ],
            "called": [
                "pmc_enable_periph_clk",
                "pmc_disable_periph_clk",
                "adc_disable_channel",
                "PIO_Configure"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081014": {
            "entrypoint": "0x00081014",
            "current_name": "set_pin_value_00081014",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setPinValue_00081014(uint32_t pinNumber,uint32_t pinValue)\n\n{\n  int outputDataStatus;\n  uint32_t pin;\n  Pio *port;\n  uint32_t maskedValue;\n  \n  if (g_APinDescription[pinNumber].pinNumberType != PIO_NOT_A_PIN) {\n    maskedValue = pinValue;\n    if ((g_pinStatus[pinNumber] & 0xf) == 5) {\n      pinMode(pinNumber,1);\n    }\n    g_pinStatus[pinNumber] = g_pinStatus[pinNumber] & 0xf | (byte)(pinValue << 4);\n    port = g_APinDescription[pinNumber].pPort;\n    pin = g_APinDescription[pinNumber].pinNumber;\n    outputDataStatus = PIO_GetOutputDataStatus(port,pin);\n    if (outputDataStatus == 0) {\n      PIO_PullUp(port,pin,pinValue);\n      return;\n    }\n    PIO_SetOutput(port,pin,pinValue,0,1,maskedValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081014": "set_pin_value_00081014",
                "ulPin": "pinNumber",
                "ulVal": "pinValue",
                "iVar1": "outputDataStatus",
                "uVar2": "pin",
                "uVar4": "maskedValue",
                "pPVar3": "port"
            },
            "calling": [
                "init",
                "loop",
                "Servo_Handler"
            ],
            "called": [
                "PIO_GetOutputDataStatus",
                "PIO_SetOutput",
                "pinMode",
                "PIO_PullUp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081084": {
            "entrypoint": "0x00081084",
            "current_name": "print_to_buffer_00081084",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x0008109a */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: size_t  write(Print * printObject, uint8_t * buffer, size_t size) */\n\nssize_t __printObjectcall Print::printToBuffer_00081084(Print *printObject,int fileDescriptor,void *buffer,size_t bufferSize)\n\n{\n  Print *updatedPrintObject;\n  void *currentPointer;\n  \n  currentPointer = (void *)0x0;\n  updatedPrintObject = printObject;\n  while ((currentPointer != buffer &&\n         (updatedPrintObject = (Print *)(**printObject->_vptr_Print)(updatedPrintObject,(uint)*(byte *)(fileDescriptor + (int)currentPointer)),\n         updatedPrintObject != (Print *)0x0))) {\n    currentPointer = (void *)((int)currentPointer + 1);\n  }\n  return (ssize_t)currentPointer;\n}\n\n",
            "renaming": {
                "this": "printObject",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__n": "bufferSize",
                "pvVar2": "currentPointer",
                "pPVar1": "updatedPrintObject",
                "FUN_00081084": "print_to_buffer_00081084"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810a6": {
            "entrypoint": "0x000810a6",
            "current_name": "write_to_file_descriptor_000810a6",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x000810be */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: size_t  write(Print * this, char * str) */\n\nssize_t __thiscall Print::writeToFileDescriptor_000810a6(Print *this,int fileDescriptor,void *buffer,size_t size)\n\n{\n  size_t stringLength;\n  int returnValue;\n  \n  if (fileDescriptor != 0) {\n    stringLength = strlen((char *)fileDescriptor);\n    returnValue = (*this->_vptr_Print[1])(stringLength,fileDescriptor,stringLength,this->_vptr_Print[1],size);\n    return returnValue;\n  }\n  return fileDescriptor;\n}\n\n",
            "renaming": {
                "FUN_000810a6": "write_to_file_descriptor_000810a6",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__n": "size",
                "sVar1": "stringLength",
                "iVar2": "returnValue"
            },
            "calling": [
                "println",
                "println",
                "print",
                "printNumber"
            ],
            "called": [
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810c4": {
            "entrypoint": "0x000810c4",
            "current_name": "print_string_000810c4",
            "code": "\n/* DWARF original prototype: size_t  print(Print * printer, char * string) */\n\nsize_t __printercall Print::printString_000810c4(Print *printer,char *string)\n\n{\n  size_t bytesWritten;\n  void *buffer;\n  size_t size;\n  \n  bytesWritten = write(printer,(int)string,buffer,size);\n  return bytesWritten;\n}\n\n",
            "renaming": {
                "FUN_000810c4": "print_string_000810c4",
                "this": "printer",
                "str": "string",
                "sVar1": "bytesWritten",
                "in_r2": "buffer",
                "in_r3": "size"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810cc": {
            "entrypoint": "0x000810cc",
            "current_name": "print_character_000810cc",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x000810d2 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: size_t  print(Print * printObject, char c) */\n\nsize_t __printObjectcall Print::printCharacter_000810cc(Print *printObject,char c)\n\n{\n  size_t result;\n  \n  result = (**printObject->_vptr_Print)(printObject,(int)c);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000810cc": "print_character_000810cc",
                "this": "printObject",
                "sVar1": "result"
            },
            "calling": [
                "print"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810d8": {
            "entrypoint": "0x000810d8",
            "current_name": "print_and_return_size_000810d8",
            "code": "\n/* DWARF original prototype: size_t  println(Print * printer) */\n\nsize_t __printercall Print::printAndReturnSize_000810d8(Print *printer)\n\n{\n  size_t sVar1;\n  void *buffer;\n  size_t size;\n  \n  sVar1 = writeData(printer,(int)&DAT_00085635,buffer,size);\n  return sVar1;\n}\n\n",
            "renaming": {
                "FUN_000810d8": "print_and_return_size_000810d8",
                "this": "printer",
                "in_r2": "buffer",
                "in_r3": "size",
                "write": "writeData"
            },
            "calling": [
                "println",
                "println"
            ],
            "called": [
                "write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810e8": {
            "entrypoint": "0x000810e8",
            "current_name": "print_string_and_return_total_bytes_written_000810e8",
            "code": "\n/* DWARF original prototype: size_t  println(Print * printObject, char * c) */\n\nsize_t __printObjectcall Print::printStringAndReturnTotalBytesWritten_000810e8(Print *printObject,char *c)\n\n{\n  ssize_t bytesWritten;\n  size_t totalBytesWritten;\n  void *fileDescriptor;\n  size_t length;\n  \n  bytesWritten = write(printObject,(int)c,fileDescriptor,length);\n  totalBytesWritten = println(printObject);\n  return totalBytesWritten + bytesWritten;\n}\n\n",
            "renaming": {
                "FUN_000810e8": "print_string_and_return_total_bytes_written_000810e8",
                "this": "printObject",
                "sVar1": "bytesWritten",
                "sVar2": "totalBytesWritten",
                "in_r2": "fileDescriptor",
                "in_r3": "length"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "println",
                "write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810fc": {
            "entrypoint": "0x000810fc",
            "current_name": "convert_and_print_number_000810fc",
            "code": "\n/* DWARF original prototype: size_t  printNumber(Print * printObject, ulong n, uint8_t base) */\n\nsize_t __printObjectcall Print::convertAndPrintNumber_000810fc(Print *printObject,ulong n,uint8_t base)\n\n{\n  char *pcVar1;\n  size_t sVar2;\n  void *__buf;\n  char c;\n  uint uVar3;\n  char *__fd;\n  char cVar4;\n  uint uVar5;\n  char buf [33];\n  \n  __buf = (void *)(uint)base;\n  buf[32] = '\\0';\n  if (__buf < (void *)0x2) {\n    __buf = (void *)0xa;\n  }\n  pcVar1 = buf + 0x1f;\n  do {\n    __fd = pcVar1;\n    uVar3 = n / (uint)__buf;\n    uVar5 = n - (int)__buf * uVar3 & 0xff;\n    cVar4 = (char)uVar5;\n    if (uVar5 < 10) {\n      cVar4 = cVar4 + '0';\n    }\n    else {\n      cVar4 = cVar4 + '7';\n    }\n    *__fd = cVar4;\n    n = uVar3;\n    pcVar1 = __fd + -1;\n  } while (uVar3 != 0);\n  sVar2 = write(printObject,(int)__fd,__buf,0);\n  return sVar2;\n}\n\n",
            "renaming": {
                "this": "printObject",
                "FUN_000810fc": "convert_and_print_number_000810fc"
            },
            "calling": [
                "print"
            ],
            "called": [
                "write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008113a": {
            "entrypoint": "0x0008113a",
            "current_name": "print_with_base_0008113a",
            "code": "\n/* WARNING: Heritemporaryage AFTER dead removal. Example locatemporaryionumber: r0 : 0x0008114a */\n/* WARNING: Restemporaryartemporaryed temporaryo delay deadcode eliminumberatemporaryionumber for space: registemporaryer */\n/* WARNING: Exceeded maximum restemporaryartemporarys witemporaryh more penumberdinumberg */\n/* DWARF originumberal protemporaryotemporaryype: size_temporary  prinumbertemporary(Prinumbertemporary * printInstance, lonumberg number, inumbertemporary numberBase) */\n\nsize_temporary __printInstancecall Prinumbertemporary::printWithBase_0008113a(Prinumbertemporary *printInstance,lonumberg number,inumbertemporary numberBase)\n\n{\n  size_temporary result;\n  inumbertemporary temporary;\n  size_temporary numberResult;\n  uinumbertemporary8_temporary baseAsByte;\n  \n  if (numberBase == 0) {\n    result = (**printInstance->_vptemporaryr_Prinumbertemporary)(printInstance,number & 0xff);\n    retemporaryurnumber result;\n  }\n  baseAsByte = (uinumbertemporary8_temporary)numberBase;\n  if ((numberBase == 10) && (baseAsByte = '\\number', number < 0)) {\n    result = prinumbertemporary(printInstance,'-');\n    numberResult = prinumbertemporaryNumber(printInstance,-number,(uinumbertemporary8_temporary)numberBase);\n    retemporaryurnumber numberResult + result;\n  }\n  result = prinumbertemporaryNumber(printInstance,number,baseAsByte);\n  retemporaryurnumber result;\n}\n\n",
            "renaming": {
                "this": "printInstance",
                "n": "number",
                "base": "numberBase",
                "sVar1": "result",
                "t": "temporary",
                "sVar2": "numberResult",
                "base_00": "baseAsByte",
                "FUN_0008113a": "print_with_base_0008113a"
            },
            "calling": [
                "println",
                "print"
            ],
            "called": [
                "print",
                "printNumber"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081176": {
            "entrypoint": "0x00081176",
            "current_name": "print_with_base_00081176",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example locationumber: r0 : 0x0008114a */\n/* WARNING: Restarted to delay deadcode eliminumberationumber for space: register */\n/* WARNING: Exceeded maximum restarts with more penumberdinumberg */\n/* DWARF originumberal prototype: size_t  prinumbert(Prinumbert * printInstance, inumbert number, inumbert baseNumber) */\n\nsize_t __printInstancecall Prinumbert::printWithBase_00081176(Prinumbert *printInstance,inumbert number,inumbert baseNumber)\n\n{\n  size_t returnValue1;\n  size_t returnValue2;\n  uinumbert8_t baseByte;\n  \n  if (baseNumber == 0) {\n    returnValue1 = (**printInstance->_vptr_Prinumbert)(printInstance,number & 0xff);\n    returnumber returnValue1;\n  }\n  baseByte = (uinumbert8_t)baseNumber;\n  if ((baseNumber == 10) && (baseByte = '\\number', number < 0)) {\n    returnValue1 = prinumbert(printInstance,'-');\n    returnValue2 = prinumbertNumber(printInstance,-number,(uinumbert8_t)baseNumber);\n    returnumber returnValue2 + returnValue1;\n  }\n  returnValue1 = prinumbertNumber(printInstance,number,baseByte);\n  returnumber returnValue1;\n}\n\n",
            "renaming": {
                "FUN_00081176": "print_with_base_00081176",
                "this": "printInstance",
                "n": "number",
                "base": "baseNumber",
                "sVar1": "returnValue1",
                "sVar2": "returnValue2",
                "base_00": "baseByte"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "print"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008117a": {
            "entrypoint": "0x0008117a",
            "current_name": "print_and_println_0008117a",
            "code": "\n/* DWARF original prototype: size_t  println(Print * printObject, int number, int numberBase) */\n\nsize_t __printObjectcall Print::printAndPrintln_0008117a(Print *printObject,int number,int numberBase)\n\n{\n  size_t printResult;\n  size_t printlnResult;\n  \n  printResult = print(printObject,number,numberBase);\n  printlnResult = println(printObject);\n  return printlnResult + printResult;\n}\n\n",
            "renaming": {
                "FUN_0008117a": "print_and_println_0008117a",
                "this": "printObject",
                "num": "number",
                "base": "numberBase",
                "sVar1": "printResult",
                "sVar2": "printlnResult"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "println",
                "print"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081190": {
            "entrypoint": "0x00081190",
            "current_name": "check_and_banzai_00081190",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid checkAndBanzai_00081190(void)\n\n{\n  if ((ticks != -1) && (ticks = ticks + -1, ticks == 0)) {\n    performBanzai();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081190": "check_and_banzai_00081190",
                "banzai": "performBanzai"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [
                "banzai"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b0": {
            "entrypoint": "0x000811b0",
            "current_name": "initialize_ring_buffer_000811b0",
            "code": "\n/* DWARF original prototype: RingBuffer *  RingBuffer(RingBuffer * ringBuffer) */\n\nRingBuffer * __ringBuffercall RingBuffer::initializeRingBuffer_000811b0(RingBuffer *ringBuffer)\n\n{\n  memset(ringBuffer,0,0x80);\n  ringBuffer->_iHead = 0;\n  ringBuffer->_iTail = 0;\n  return ringBuffer;\n}\n\n",
            "renaming": {
                "this": "ringBuffer",
                "FUN_000811b0": "initialize_ring_buffer_000811b0"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ca": {
            "entrypoint": "0x000811ca",
            "current_name": "store_char_000811ca",
            "code": "\n/* DWARF orhead_indexghead_indexnal prototype: vohead_indexd  store_char_000811ca(Rhead_indexngBuffer * ring_buffer, uhead_indexnt8_t c) */\n\nvohead_indexd __ring_buffercall Rhead_indexngBuffer::store_char_000811ca(Rhead_indexngBuffer *ring_buffer,uhead_indexnt8_t c)\n\n{\n  head_indexnt head_index;\n  uhead_indexnt new_head_index;\n  \n  head_index = ring_buffer->_head_indexHead;\n  new_head_index = head_index + 1U & 0x7f;\n  head_indexf (new_head_index != ring_buffer->_head_indexTahead_indexl) {\n    ring_buffer->_aucBuffer[ring_buffer->_head_indexHead] = c;\n    ring_buffer->_head_indexHead = new_head_index;\n  }\n  return;\n}\n\n",
            "renaming": {
                "this": "ring_buffer",
                "i": "head_index",
                "uVar1": "new_head_index",
                "FUN_000811ca": "store_char_000811ca"
            },
            "calling": [
                "IrqHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811e8": {
            "entrypoint": "0x000811e8",
            "current_name": "timed_read_000811e8",
            "code": "\n/* DWARF original prototype: int  timedRead_000811e8(Stream * stream) */\n\nint __streamcall Stream::timedRead_000811e8(Stream *stream)\n\n{\n  uint32_t currentMillis;\n  int result;\n  int c;\n  \n  currentMillis = millis();\n  stream->_startMillis = currentMillis;\n  do {\n    result = (*(stream->super_Print)._vptr_Print[3])();\n    if (-1 < result) {\n      return result;\n    }\n    currentMillis = millis();\n  } while (currentMillis - stream->_startMillis < stream->_timeout);\n  return -1;\n}\n\n",
            "renaming": {
                "this": "stream",
                "uVar1": "currentMillis",
                "iVar2": "result",
                "FUN_000811e8": "timed_read_000811e8"
            },
            "calling": [
                "readStringUntil"
            ],
            "called": [
                "millis"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081214": {
            "entrypoint": "0x00081214",
            "current_name": "read_string_until_00081214",
            "code": "\n/* DWARF original prototype: String  readStringUntil_00081214(Stream * stream, char endChar) */\n\nString * __streamcall Stream::readStringUntil_00081214(Stream *stream,char endChar)\n\n{\n  String *result;\n  String *result;\n  int inputChar;\n  int c;\n  \n  String::String(result,\"\");\n  while( true ) {\n    inputChar = timedRead(stream);\n    if ((inputChar < 0) || (inputChar == endChar)) break;\n    String::concat(result,(char)inputChar);\n  }\n  resulturn result;\n}\n\n",
            "renaming": {
                "this": "stream",
                "in_r0": "result",
                "ret": "result",
                "iVar1": "inputChar",
                "terminator": "endChar",
                "FUN_00081214": "read_string_until_00081214"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "timedRead",
                "String",
                "concat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081244": {
            "entrypoint": "0x00081244",
            "current_name": "is_uart_class_valid_00081244",
            "code": "\n/* DWARF original name: operator bool\n   DWARF original prototype: bool  operator_bool(UARTClass * uart_instance) */\n\nbool __uart_instancecall UARTClass::is_uart_class_valid_00081244(UARTClass *uart_instance)\n\n{\n  return true;\n}\n\n",
            "renaming": {
                "FUN_00081244": "is_uart_class_valid_00081244",
                "this": "uart_instance"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081248": {
            "entrypoint": "0x00081248",
            "current_name": "calculate_available_data_size_00081248",
            "code": "\n/* DWARF original prototype: int  available(UARTClass * uartInstance) */\n\nint __uartInstancecall UARTClass::calculateAvailableDataSize_00081248(UARTClass *uartInstance)\n\n{\n  return uartInstance->receiveBuffer->bufferHeadIndex - uartInstance->receiveBuffer->bufferTailIndex & 0x7f;\n}\n\n",
            "renaming": {
                "FUN_00081248": "calculate_available_data_size_00081248",
                "this": "uartInstance",
                "_rx_buffer": "receiveBuffer",
                "_iHead": "bufferHeadIndex",
                "_iTail": "bufferTailIndex"
            },
            "calling": [
                "loop",
                "serialEventRun"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008125a": {
            "entrypoint": "0x0008125a",
            "current_name": "peek_0008125a",
            "code": "\n/* DWARF original prototype: int  peek_0008125a(UARTClass * uartClass) */\n\nint __uartClasscall UARTClass::peek_0008125a(UARTClass *uartClass)\n\n{\n  uint value;\n  RingBuffer *ringBuffer;\n  \n  ringBuffer = uartClass->rxBuffer;\n  if (ringBuffer->headIndex == ringBuffer->tailIndex) {\n    value = 0xffffffff;\n  }\n  else {\n    value = (uint)ringBuffer->bufferData[ringBuffer->tailIndex];\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_0008125a": "peek_0008125a",
                "this": "uartClass",
                "pRVar2": "ringBuffer",
                "uVar1": "value",
                "_rx_buffer": "rxBuffer",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "_aucBuffer": "bufferData"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081276": {
            "entrypoint": "0x00081276",
            "current_name": "read_data_from_uart_00081276",
            "code": "\n/* DWARF original prototype: int  read(UARTClass * this) */\n\nssize_t UARTClass UARTClass::readDataFromUART_00081276(UARTClass *this,int fileDescriptor,void *buffer,size_t numBytes)\n\n{\n  byte bVar1;\n  uint8_t byteRead;\n  RingBuffer *ringBuffer;\n  \n  ringBuffer = this->rxBuffer;\n  if (ringBuffer->headIndex != ringBuffer->tailIndex) {\n    bVar1 = ringBuffer->bufferData[ringBuffer->tailIndex];\n    ringBuffer->tailIndex = ringBuffer->tailIndex + 1U & 0x7f;\n    return (uint)bVar1;\n  }\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_00081276": "read_data_from_uart_00081276",
                "__thiscall": "UARTClass",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__nbytes": "numBytes",
                "uc": "byteRead",
                "pRVar2": "ringBuffer",
                "_rx_buffer": "rxBuffer",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "_aucBuffer": "bufferData"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000812a0": {
            "entrypoint": "0x000812a0",
            "current_name": "wait_for_transmission_completion_000812a0",
            "code": "\n/* DWARF original prototype: void  flush(UARTClass * uartInstance) */\n\nvoid __uartInstancecall UARTClass::waitForTransmissionCompletion_000812a0(UARTClass *uartInstance)\n\n{\n  do {\n  } while (uartInstance->transmitBuffer->headIndex != uartInstance->transmitBuffer->tailIndex);\n  do {\n  } while (-1 < (int)(uartInstance->uartPeripheral->statusRegister << 0x16));\n  return;\n}\n\n",
            "renaming": {
                "FUN_000812a0": "wait_for_transmission_completion_000812a0",
                "this": "uartInstance",
                "_tx_buffer": "transmitBuffer",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "_pUart": "uartPeripheral",
                "UART_SR": "statusRegister"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000812b8": {
            "entrypoint": "0x000812b8",
            "current_name": "write_to_uart_000812b8",
            "code": "\n/* DWARF original prototype: size_t  write(UARTClass * uart_instance, uint8_t uc_data) */\n\nssize_t __uart_instancecall UARTClass::write_to_uart_000812b8(UARTClass *uart_instance,int data,void *buffer,size_t buffer_size)\n\n{\n  RingBuffer *ring_buffer;\n  uint next_head;\n  \n  ring_buffer = uart_instance->_tx_buffer;\n  if (((int)(uart_instance->_pUart->UART_SR << 0x1e) < 0) && (ring_buffer->_iTail == ring_buffer->_iHead)) {\n    uart_instance->_pUart->UART_THR = data;\n  }\n  else {\n    next_head = ring_buffer->_iHead + 1U & 0x8000007f;\n    if ((int)next_head < 0) {\n      next_head = (next_head - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (ring_buffer->_iTail == next_head);\n    ring_buffer->_aucBuffer[ring_buffer->_iHead] = (uchar)data;\n    uart_instance->_tx_buffer->_iHead = next_head;\n    uart_instance->_pUart->UART_IER = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000812b8": "write_to_uart_000812b8",
                "this": "uart_instance",
                "__fd": "data",
                "__buf": "buffer",
                "__n": "buffer_size",
                "pRVar1": "ring_buffer",
                "uVar2": "next_head"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008130c": {
            "entrypoint": "0x0008130c",
            "current_name": "end_0008130c",
            "code": "\n/* DWARF original prototype: void  end_0008130c(UARTClass * uart) */\n\nvoid __uartcall UARTClass::end_0008130c(UARTClass *uart)\n\n{\n  uart->rxBuffer->headIndex = uart->rxBuffer->tailIndex;\n  (**(code **)(*(int *)uart + 0x14))();\n  *(int *)((((uint)(int)uart->irq >> 5) + 0x20) * 4 + -0x1fff1f00) =\n       1 << (uint)(byte)(uart->irq & 0x1f);\n  pmc_disable_periph_clk(uart->id);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008130c": "end_0008130c",
                "this": "uart",
                "_rx_buffer": "rxBuffer",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "_dwIrq": "irq",
                "_dwId": "id"
            },
            "calling": [],
            "called": [
                "pmc_disable_periph_clk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081348": {
            "entrypoint": "0x00081348",
            "current_name": "initialize_uart_00081348",
            "code": "\n/* DWARF original prototype: UARTClass *  UARTClass(UARTClass * uartInstance, Uart * uartPointer, IRQn_Type interruptType,\n   uint32_t deviceId, RingBuffer * rxBuffer, RingBuffer * txBuffer) */\n\nUARTClass * __uartInstancecall\nUARTClass::initializeUART_00081348(UARTClass *uartInstance,Uart *uartPointer,IRQn_Type interruptType,uint32_t deviceId,RingBuffer *rxBuffer,\n          RingBuffer *txBuffer)\n\n{\n  *(undefined4 *)&uartInstance->field1 = 0;\n  *(undefined4 *)&uartInstance->field2 = 1000;\n  uartInstance->uart = uartPointer;\n  *(undefined ***)uartInstance = &PTR_write_1_00085650;\n  uartInstance->irq = interruptType;\n  uartInstance->rxBufferObj = rxBuffer;\n  uartInstance->id = deviceId;\n  uartInstance->txBufferObj = txBuffer;\n  return uartInstance;\n}\n\n",
            "renaming": {
                "this": "uartInstance",
                "pUart": "uartPointer",
                "dwIrq": "interruptType",
                "dwId": "deviceId",
                "pRx_buffer": "rxBuffer",
                "pTx_buffer": "txBuffer",
                "field_0x4": "field1",
                "field_0x8": "field2",
                "_pUart": "uart",
                "_dwIrq": "irq",
                "_rx_buffer": "rxBufferObj",
                "_dwId": "id",
                "_tx_buffer": "txBufferObj",
                "FUN_00081348": "initialize_uart_00081348"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription",
                "USARTClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008136c": {
            "entrypoint": "0x0008136c",
            "current_name": "initialize_uart_0008136c",
            "code": "\n/* DWARF original prototype: void  init(UARTClass * uartInstance, uint32_t dwBaudRate, uint32_t modeReg) */\n\nint __uartInstancecall UARTClass::initializeUART_0008136c(UARTClass *uartInstance,EVP_PKEY_CTX *cryptoContext)\n\n{\n  uint uVar1;\n  RingBuffer *pRVar2;\n  RwReg modeRegisterValue;\n  Uart *pUVar3;\n  \n  enablePeripheralClock(uartInstance->peripheralId);\n  pUVar3 = uartInstance->uartPointer;\n  pUVar3->PTCR_REGISTER = 0x202;\n  pUVar3->CR_REGISTER = 0xac;\n  pUVar3->MR_REGISTER = modeRegisterValue;\n  pUVar3->BRGR_REGISTER = systemClock / (uint)cryptoContext >> 4;\n  pUVar3->UART_IDR = 0xffffffff;\n  pUVar3->UART_IER = 0x61;\n  uVar1 = (uint)(int)uartInstance->irqValue >> 5;\n  *(int *)(uVar1 * 4 + -0x1fff1f00) = 1 << (uint)(byte)(uartInstance->irqValue & 0x1f);\n  pRVar2 = uartInstance->receiveBuffer;\n  pRVar2->_iTail = 0;\n  pRVar2->_iHead = 0;\n  pRVar2 = uartInstance->transmitBuffer;\n  pRVar2->_iTail = 0;\n  pRVar2->_iHead = 0;\n  pUVar3->CR_REGISTER = 0x50;\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_0008136c": "initialize_uart_0008136c",
                "this": "uartInstance",
                "ctx": "cryptoContext",
                "pmc_enable_periph_clk": "enablePeripheralClock",
                "_dwId": "peripheralId",
                "_pUart": "uartPointer",
                "UART_PTCR": "PTCR_REGISTER",
                "UART_CR": "CR_REGISTER",
                "UART_MR": "MR_REGISTER",
                "in_r2": "modeRegisterValue",
                "UART_BRGR": "BRGR_REGISTER",
                "SystemCoreClock": "systemClock",
                "_dwIrq": "irqValue",
                "_rx_buffer": "receiveBuffer",
                "_tx_buffer": "transmitBuffer"
            },
            "calling": [
                "begin",
                "begin"
            ],
            "called": [
                "pmc_enable_periph_clk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813dc": {
            "entrypoint": "0x000813dc",
            "current_name": "initialize_uart_000813dc",
            "code": "\n/* DWARF original prototype: void  begin(UARTClass * uartInstance, uint32_t baudRate) */\n\nvoid __uartInstancecall UARTClass::initializeUART_000813dc(UARTClass *uartInstance,uint32_t baudRate)\n\n{\n  init(uartInstance,(EVP_PKEY_CTX *)baudRate);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813dc": "initialize_uart_000813dc",
                "this": "uartInstance",
                "dwBaudRate": "baudRate"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "handle_irq_000813e4",
            "code": "\n/* DWARF original prototype: void  IrqHandler(UARTClass * uart) */\n\nvoid __uartcall UARTClass::handleIRQ_000813e4(UARTClass *uart)\n\n{\n  RingBuffer *txBuffer;\n  uint32_t uartStatus;\n  RoReg uartSR;\n  \n  uartSR = uart->_pUart->UART_SR;\n  if ((int)(uartSR << 0x1f) < 0) {\n    RingBuffer::store_char(uart->_rx_buffer,(uint8_t)uart->_pUart->UART_RHR);\n  }\n  if ((int)(uartSR << 0x1e) < 0) {\n    txBuffer = uart->_tx_buffer;\n    if (txBuffer->_iTail != txBuffer->_iHead) {\n      uart->_pUart->UART_THR = (uint)txBuffer->_aucBuffer[txBuffer->_iTail];\n      txBuffer->_iTail = txBuffer->_iTail + 1U & 0x7f;\n      return;\n    }\n    uart->_pUart->UART_IDR = 2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "handle_irq_000813e4",
                "this": "uart",
                "pRVar1": "txBuffer",
                "status": "uartStatus",
                "RVar2": "uartSR"
            },
            "calling": [
                "USART3_Handler",
                "USART0_Handler",
                "USART1_Handler",
                "UART_Handler"
            ],
            "called": [
                "store_char"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008142e": {
            "entrypoint": "0x0008142e",
            "current_name": "initialize_usart_0008142e",
            "code": "\n/* DWARF original prototype: void  begin(USARTClass * usart, uint32_t baudRate) */\n\nvoid __usartcall USARTClass::initializeUSART_0008142e(USARTClass *usart,uint32_t baudRate)\n\n{\n  UARTClass::init(&usart->super_UARTClass,(EVP_PKEY_CTX *)baudRate);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008142e": "initialize_usart_0008142e",
                "this": "usart",
                "dwBaudRate": "baudRate"
            },
            "calling": [],
            "called": [
                "init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081438": {
            "entrypoint": "0x00081438",
            "current_name": "initialize_usart_class_00081438",
            "code": "\n/* DWARF original prototype: USARTClass *  USARTClass(USARTClass * classInstance, usartInstance * pusartInstance, IRQn_Type\n   interruptType, uint32_t deviceId, ringBuffer * receiveBuffer, ringBuffer * transmitBuffer) */\n\nUSARTClass * __classInstancecall\nUSARTClass::initializeUSARTClass_00081438(USARTClass *classInstance,usartInstance *pusartInstance,IRQn_Type interruptType,uint32_t deviceId,ringBuffer *receiveBuffer,\n          ringBuffer *transmitBuffer)\n\n{\n  initializeUARTClass(&classInstance->super_UARTClass,(Uart *)pusartInstance,interruptType,deviceId,receiveBuffer,transmitBuffer);\n  *(undefined ***)&classInstance->super_UARTClass = &PTR_write_1_00085680;\n  classInstance->privateUsart = pusartInstance;\n  return classInstance;\n}\n\n",
            "renaming": {
                "this": "classInstance",
                "Usart": "usartInstance",
                "dwIrq": "interruptType",
                "dwId": "deviceId",
                "RingBuffer": "ringBuffer",
                "pRx_buffer": "receiveBuffer",
                "pTx_buffer": "transmitBuffer",
                "UARTClass::UARTClass": "initializeUARTClass",
                "_pUsart": "privateUsart",
                "FUN_00081438": "initialize_usart_class_00081438"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [
                "UARTClass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008145c": {
            "entrypoint": "0x0008145c",
            "current_name": "map_value_0008145c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nlong mapValue_0008145c(long inputValue,long inputMin,long inputMax,long outputMin,long outputMax)\n\n{\n  return (uint)((inputValue - inputMin) * (outputMax - outputMin)) / (uint)(inputMax - inputMin) + outputMin;\n}\n\n",
            "renaming": {
                "FUN_0008145c": "map_value_0008145c",
                "x": "inputValue",
                "in_min": "inputMin",
                "in_max": "inputMax",
                "out_min": "outputMin",
                "out_max": "outputMax"
            },
            "calling": [
                "write",
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081470": {
            "entrypoint": "0x00081470",
            "current_name": "FUNC_00081470",
            "code": "\n/* DWARF original prototype: void  StringIfHelper(String * this) */\n\nvoid __thiscall String::FUNC_00081470(String *this)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081470": "FUNC_00081470"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081472": {
            "entrypoint": "0x00081472",
            "current_name": "free_and_return_this_00081472",
            "code": "\n/* DWARF original prototype: void *  ~String(String * str, int inCharge) */\n\nvoid * __strcall String::freeAndReturnThis_00081472(String *str,int inCharge)\n\n{\n  free(str->buffer);\n  return str;\n}\n\n",
            "renaming": {
                "this": "str",
                "__in_chrg": "inCharge",
                "FUN_00081472": "free_and_return_this_00081472"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081480": {
            "entrypoint": "0x00081480",
            "current_name": "clear_string_memory_00081480",
            "code": "\n/* DWARF original prototype: void  invalidate(String * str) */\n\nvoid __strcall String::clearStringMemory_00081480(String *str)\n\n{\n  if (str->buffer != (char *)0x0) {\n    free(str->buffer);\n  }\n  str->buffer = (char *)0x0;\n  str->len = 0;\n  str->capacity = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081480": "clear_string_memory_00081480",
                "this": "str"
            },
            "calling": [
                "copy"
            ],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081496": {
            "entrypoint": "0x00081496",
            "current_name": "resize_buffer_00081496",
            "code": "\n/* DWARF original prototype: uchar  changeBuffer(String * strObj, uint newSize) */\n\nuchar __strObjcall String::resizeBuffer_00081496(String *strObj,uint newSize)\n\n{\n  char *newBuffer;\n  char *newoldBuffer;\n  \n  newBuffer = (char *)realloc(strObj->oldBuffer,newSize + 1);\n  if (newBuffer != (char *)0x0) {\n    strObj->oldBuffer = newBuffer;\n    strObj->oldSize = newSize;\n    newBuffer = (char *)0x1;\n  }\n  return (uchar)newBuffer;\n}\n\n",
            "renaming": {
                "this": "strObj",
                "maxStrLen": "newSize",
                "pcVar1": "newBuffer",
                "buffer": "oldBuffer",
                "capacity": "oldSize",
                "FUN_00081496": "resize_buffer_00081496"
            },
            "calling": [
                "reserve"
            ],
            "called": [
                "realloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814ae": {
            "entrypoint": "0x000814ae",
            "current_name": "reserve_memory_000814ae",
            "code": "\n/* DWARF original prototype: uchar  reserve(String * stringObject, uint newCapacity) */\n\nuchar __stringObjectcall String::reserveMemory_000814ae(String *stringObject,uint newCapacity)\n\n{\n  uchar result;\n  \n  if ((stringObject->buffer == (char *)0x0) || (stringObject->capacity < newCapacity)) {\n    result = modifyBuffer(stringObject,newCapacity);\n    if (result == '\\0') {\n      return '\\0';\n    }\n    if (stringObject->len == 0) {\n      *stringObject->buffer = '\\0';\n    }\n  }\n  return '\\x01';\n}\n\n",
            "renaming": {
                "this": "stringObject",
                "size": "newCapacity",
                "uVar1": "result",
                "changeBuffer": "modifyBuffer",
                "FUN_000814ae": "reserve_memory_000814ae"
            },
            "calling": [
                "copy",
                "concat"
            ],
            "called": [
                "changeBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814d0": {
            "entrypoint": "0x000814d0",
            "current_name": "copy_string_000814d0",
            "code": "\n/* DWARF original prototype: String *  copy(String * strObj, char * cstr, uint lengthgth) */\n\nint __strObjcall String::copyString_000814d0(String *strObj,EVP_PKEY_CTX *destination,EVP_PKEY_CTX *source)\n\n{\n  uchar isValid;\n  \n  isValid = checkReservation(strObj,(uint)source);\n  if (isValid == '\\0') {\n    resetString(strObj);\n  }\n  else {\n    strObj->length = (uint)source;\n    copyString_000814d0Content(strObj->buffer,(char *)destination);\n  }\n  return (int)strObj;\n}\n\n",
            "renaming": {
                "this": "strObj",
                "dst": "destination",
                "src": "source",
                "uVar1": "isValid",
                "reserve": "checkReservation",
                "invalidate": "resetString",
                "len": "length",
                "strcpy": "copyStringContent",
                "FUN_000814d0": "copy_string_000814d0"
            },
            "calling": [
                "String"
            ],
            "called": [
                "invalidate",
                "strcpy",
                "reserve"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814f6": {
            "entrypoint": "0x000814f6",
            "current_name": "initialize_string_000814f6",
            "code": "\n/* DWARF original prototype: String *  String(String * strObj, char * inputString) */\n\nString * __strObjcall String::initializeString_000814f6(String *strObj,char *inputString)\n\n{\n  EVP_PKEY_CTX *stringLength;\n  \n  strObj->buffer = (char *)0x0;\n  strObj->capacity = 0;\n  strObj->len = 0;\n  if (inputString != (char *)0x0) {\n    stringLength = (EVP_PKEY_CTX *)strlen(inputString);\n    copy(strObj,(EVP_PKEY_CTX *)inputString,stringLength);\n  }\n  return strObj;\n}\n\n",
            "renaming": {
                "this": "strObj",
                "cstr": "inputString",
                "src": "stringLength",
                "FUN_000814f6": "initialize_string_000814f6"
            },
            "calling": [
                "readStringUntil",
                "_GLOBAL__sub_I_steering"
            ],
            "called": [
                "copy",
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008151c": {
            "entrypoint": "0x0008151c",
            "current_name": "move_strings_0008151c",
            "code": "\n/* DWARF original prototype: void  move(String * destination_string, String * source_string) */\n\nvoid __destination_stringcall String::move_strings_0008151c(String *destination_string,String *source_string)\n\n{\n  char *destination_buffer;\n  \n  destination_buffer = destination_string->buffer;\n  if (destination_buffer != (char *)0x0) {\n    if ((source_string->buffer != (char *)0x0) && (source_string->len <= destination_string->capacity)) {\n      strcpy(destination_buffer,source_string->buffer);\n      destination_string->len = source_string->len;\n      goto LAB_00081558;\n    }\n    free(destination_buffer);\n  }\n  destination_string->buffer = source_string->buffer;\n  destination_string->capacity = source_string->capacity;\n  destination_string->len = source_string->len;\n  source_string->buffer = (char *)0x0;\n  source_string->capacity = 0;\nLAB_00081558:\n  source_string->len = 0;\n  return;\n}\n\n",
            "renaming": {
                "this": "destination_string",
                "rhs": "source_string",
                "__dest": "destination_buffer",
                "FUN_0008151c": "move_strings_0008151c"
            },
            "calling": [
                "operator="
            ],
            "called": [
                "free",
                "strcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081560": {
            "entrypoint": "0x00081560",
            "current_name": "assign_string_00081560",
            "code": "\n/* DWARF original prototype: String *  operator=(String * destination, String * source) */\n\nString * __destinationcall String::assignString_00081560(String *destination,String *source)\n\n{\n  if (destination != source) {\n    move(destination,source);\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "this": "destination",
                "rval": "source",
                "FUN_00081560": "assign_string_00081560"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "move"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081570": {
            "entrypoint": "0x00081570",
            "current_name": "concatenate_strings_00081570",
            "code": "\n/* DWARF original prototype: uchar  concat(String * strObj, char * inputStr, uint inputLength) */\n\nuchar __strObjcall String::concatenateStrings_00081570(String *strObj,char *inputStr,uint inputLength)\n\n{\n  uchar reserveSuccess;\n  uint newSize;\n  \n  if (inputStr == (char *)0x0) {\n    return '\\0';\n  }\n  if (inputLength != 0) {\n    newSize = strObj->len + inputLength;\n    reserveSuccess = reserve(strObj,newSize);\n    if (reserveSuccess == '\\0') {\n      return '\\0';\n    }\n    strcpy(strObj->buffer + strObj->len,inputStr);\n    strObj->len = newSize;\n  }\n  return '\\x01';\n}\n\n",
            "renaming": {
                "FUN_00081570": "concatenate_strings_00081570",
                "this": "strObj",
                "cstr": "inputStr",
                "length": "inputLength",
                "uVar1": "reserveSuccess",
                "size": "newSize"
            },
            "calling": [
                "concat"
            ],
            "called": [
                "strcpy",
                "reserve"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008159e": {
            "entrypoint": "0x0008159e",
            "current_name": "concatenate_characters_0008159e",
            "code": "\n/* DWARF original prototype: uchar  concat(String * stringObject, char c) */\n\nuchar __stringObjectcall String::concatenateCharacters_0008159e(String *stringObject,char c)\n\n{\n  uchar uVar1;\n  char buffer [2];\n  short temporaryShort;\n  \n  uVar1 = concat(stringObject,buffer,1);\n  return uVar1;\n}\n\n",
            "renaming": {
                "this": "stringObject",
                "buf": "buffer",
                "sStack_a": "temporaryShort",
                "FUN_0008159e": "concatenate_characters_0008159e"
            },
            "calling": [
                "readStringUntil"
            ],
            "called": [
                "concat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815b8": {
            "entrypoint": "0x000815b8",
            "current_name": "string_equals_000815b8",
            "code": "\n/* DWARF original prototype: uchar  equals(String * stringPointer, char * cstringPointer) */\n\nuchar __stringPointercall String::stringEquals_000815b8(String *stringPointer,char *cstringPointer)\n\n{\n  uchar result;\n  uint comparisonResult;\n  \n  if (stringPointer->len == 0) {\n    if (cstringPointer == (char *)0x0) {\n      return '\\x01';\n    }\n  }\n  else {\n    if (cstringPointer != (char *)0x0) {\n      comparisonResult = strcmp(stringPointer->buffer,cstringPointer);\n      goto LAB_000815d4;\n    }\n    cstringPointer = stringPointer->buffer;\n  }\n  comparisonResult = (uint)(byte)*cstringPointer;\nLAB_000815d4:\n  result = '\\x01' - (char)comparisonResult;\n  if (1 < comparisonResult) {\n    result = '\\0';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "this": "stringPointer",
                "cstr": "cstringPointer",
                "uVar1": "result",
                "uVar2": "comparisonResult",
                "FUN_000815b8": "string_equals_000815b8"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "strcmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815de": {
            "entrypoint": "0x000815de",
            "current_name": "convert_string_to_long_000815de",
            "code": "\n/* DWARF original prototype: long  toInt(String * stringObj) */\n\nlong __stringObjcall String::convertStringToLong_000815de(String *stringObj)\n\n{\n  long convertedValue;\n  \n  if (stringObj->buffer != (char *)0x0) {\n    convertedValue = atol(stringObj->buffer);\n    return convertedValue;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "this": "stringObj",
                "lVar1": "convertedValue",
                "FUN_000815de": "convert_string_to_long_000815de"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "atol"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815e8": {
            "entrypoint": "0x000815e8",
            "current_name": "FUNC_000815e8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_000815e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000815e8": "FUNC_000815e8"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000815ec": {
            "entrypoint": "0x000815ec",
            "current_name": "main_loop_000815ec",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint mainLoop_000815ec(void)\n\n{\n  EVP_PKEY_CTX *keyContext;\n  \n  _watchdogDefaultSetup();\n  init(keyContext);\n  initVariant();\n  delay(1);\n  setup();\n  do {\n    loop();\n    serialEventRun();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815ec": "main_loop_000815ec",
                "in_r0": "keyContext"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "delay",
                "init",
                "loop",
                "_watchdogDefaultSetup",
                "setup",
                "serialEventRun",
                "initVariant"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081618": {
            "entrypoint": "0x00081618",
            "current_name": "disable_watchdog_timer_00081618",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid disable_watchdog_timer_00081618(void)\n\n{\n  WDT_Disable(0x400e1a50);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081618": "disable_watchdog_timer_00081618"
            },
            "calling": [
                "main"
            ],
            "called": [
                "WDT_Disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081624": {
            "entrypoint": "0x00081624",
            "current_name": "measure_pulse_width_00081624",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t measurePulseWidth_00081624(uint32_t inputPin,uint32_t inputState,uint32_t measurementTimeout)\n\n{\n  uint32_t pulseWidth;\n  uint32_t calculatedWidth;\n  uint32_t pinMask;\n  uint32_t bitValue;\n  \n  pinMask = g_APinDescription[inputPin].ulPin;\n  if (inputState == 0) {\n    pinMask = 0;\n  }\n  pulseWidth = countPulseASM(&(g_APinDescription[inputPin].pPort)->PIO_PDSR,g_APinDescription[inputPin].ulPin,\n                        pinMask,((SystemCoreClock / 1000000) * measurementTimeout) / 0x12);\n  if (pulseWidth != 0) {\n    pulseWidth = (uint32_t)((ulonglong)(pulseWidth * 18000 + 16000) / ((ulonglong)SystemCoreClock / 1000));\n  }\n  return pulseWidth;\n}\n\n",
            "renaming": {
                "FUN_00081624": "measure_pulse_width_00081624",
                "pin": "inputPin",
                "state": "inputState",
                "timeout": "measurementTimeout",
                "uVar1": "pulseWidth",
                "width": "calculatedWidth",
                "stateMask": "pinMask",
                "bit": "bitValue"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "countPulseASM"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081684": {
            "entrypoint": "0x00081684",
            "current_name": "check_bit_pattern_00081684",
            "code": "\nint check_bit_pattern_00081684(uint *data_ptr,uint bit_mask,uint expected_value,int iteration_count)\n\n{\n  int matching_count;\n  \n  do {\n    if ((*data_ptr & bit_mask) != expected_value) {\n      do {\n        if ((*data_ptr & bit_mask) == expected_value) {\n          matching_count = 0;\n          do {\n            if ((*data_ptr & bit_mask) != expected_value) {\n              return matching_count;\n            }\n            matching_count = matching_count + 1;\n          } while (iteration_count != matching_count);\n          return 0;\n        }\n        iteration_count = iteration_count + -1;\n      } while (iteration_count != 0);\n      return 0;\n    }\n    iteration_count = iteration_count + -1;\n  } while (iteration_count != 0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081684": "check_bit_pattern_00081684",
                "param_1": "data_ptr",
                "param_2": "bit_mask",
                "param_3": "expected_value",
                "param_4": "iteration_count",
                "iVar1": "matching_count"
            },
            "calling": [
                "pulseIn"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816c8": {
            "entrypoint": "0x000816c8",
            "current_name": "increment_tick_count_000816c8",
            "code": "\nvoid incrementTickCount_000816c8(void)\n\n{\n  tickCount = tickCount + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816c8": "increment_tick_count_000816c8",
                "_dwTickCount": "tickCount"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d8": {
            "entrypoint": "0x000816d8",
            "current_name": "get_tick_count_000816d8",
            "code": "\nundefined4 getTickCount_000816d8(void)\n\n{\n  return tickCount;\n}\n\n",
            "renaming": {
                "FUN_000816d8": "get_tick_count_000816d8",
                "_dwTickCount": "tickCount"
            },
            "calling": [
                "millis"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816e4": {
            "entrypoint": "0x000816e4",
            "current_name": "initialize_memory_000816e4",
            "code": "\nvoid initializeMemory_000816e4(int memory.pointer)\n\n{\n  *(undefined4 *)(memory.pointer + 4) = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816e4": "initialize_memory_000816e4",
                "param_1": "memory.pointer"
            },
            "calling": [
                "_watchdogDefaultSetup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816ec": {
            "entrypoint": "0x000816ec",
            "current_name": "register_exit_handler_000816ec",
            "code": "\nvoid registerExitHandler_000816ec(undefined4 cleanupFunction,undefined4 cleanupObject)\n\n{\n  __cxa_atexit(cleanupObject,cleanupFunction);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816ec": "register_exit_handler_000816ec",
                "param_1": "cleanupFunction",
                "param_2": "cleanupObject"
            },
            "calling": [
                "_GLOBAL__sub_I_steering"
            ],
            "called": [
                "__cxa_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816f8": {
            "entrypoint": "0x000816f8",
            "current_name": "print_assertion_failed_message_000816f8",
            "code": "\nvoid printAssertionFailedMessage_000816f8(undefined4 file,undefined4 line,char *functionName,undefined4 assertion)\n\n{\n  char *messagePrefix;\n  \n  if (functionName == (char *)0x0) {\n    functionName = \"\";\n    messagePrefix = functionName;\n  }\n  else {\n    messagePrefix = \", function: \";\n  }\n  fiprintf(*(undefined4 *)(_impure_ptr + 0xc),\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",\n           assertion,file,line,messagePrefix,functionName);\n                    \n  abort();\n}\n\n",
            "renaming": {
                "FUN_000816f8": "print_assertion_failed_message_000816f8",
                "param_1": "file",
                "param_2": "line",
                "param_3": "functionName",
                "param_4": "assertion",
                "pcVar1": "messagePrefix"
            },
            "calling": [
                "TC_Configure",
                "TC_Start"
            ],
            "called": [
                "abort",
                "fiprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "convert_string_to_long_00081734",
            "code": "\nlong convertStringToLong_00081734(char *inputString)\n\n{\n  long convertedValue;\n  \n  convertedValue = strtol(inputString,(char **)0x0,10);\n  return convertedValue;\n}\n\n",
            "renaming": {
                "FUN_00081734": "convert_string_to_long_00081734",
                "__nptr": "inputString",
                "lVar1": "convertedValue"
            },
            "calling": [
                "toInt"
            ],
            "called": [
                "strtol"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008173c": {
            "entrypoint": "0x0008173c",
            "current_name": "register_exit_procedure_0008173c",
            "code": "\nvoid registerExitProcedure_0008173c(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  __register_exitproc(2,arg1,arg2,arg3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008173c": "register_exit_procedure_0008173c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3"
            },
            "calling": [
                "__aeabi_atexit"
            ],
            "called": [
                "__register_exitproc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081750": {
            "entrypoint": "0x00081750",
            "current_name": "print_formatted_output_00081750",
            "code": "\nvoid printFormattedOutput_00081750(undefined4 formatString,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 formattedArg2;\n  undefined4 formattedArg3;\n  \n  formattedArg2 = arg2;\n  formattedArg3 = arg3;\n  _vfiprintf_r(_impure_ptr,formatString,arg1,&formattedArg2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081750": "print_formatted_output_00081750",
                "param_1": "formatString",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uStack_8": "formattedArg2",
                "uStack_4": "formattedArg3"
            },
            "calling": [
                "__assert_func"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081778": {
            "entrypoint": "0x00081778",
            "current_name": "execute_init_and_functions_00081778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081784) */\n/* WARNING: Removing unreachable block (ram,0x00081788) */\n/* WARNING: Removing unreachable block (ram,0x000817b4) */\n\nvoid execute_init_and_functions_00081778(void)\n\n{\n  int iteration_count;\n  code **function_pointers;\n  \n  initialize();\n  function_pointers = (code **)0x8584c;\n  iteration_count = 0;\n  do_iteration {\n    iteration_count = iteration_count + 1;\n    function_pointers = function_pointers + 1;\n    (**function_pointers)();\n  } while_condition (iteration_count != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081778": "execute_init_and_functions_00081778",
                "iVar1": "iteration_count",
                "ppcVar2": "function_pointers",
                "_init": "initialize",
                "do": "do_iteration",
                "while": "while_condition"
            },
            "calling": [
                "init"
            ],
            "called": [
                "register_fini",
                "frame_dummy",
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817c8": {
            "entrypoint": "0x000817c8",
            "current_name": "print_formatted_message_000817c8",
            "code": "\nvoid printFormattedMessage_000817c8(undefined4 formatString,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 param2Copy;\n  undefined4 param3Copy;\n  undefined4 param4Copy;\n  \n  param2Copy = param2;\n  param3Copy = param3;\n  param4Copy = param4;\n  _vfiprintf_r(_impure_ptr,*(undefined4 *)(_impure_ptr + 8),formatString,&param2Copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817c8": "print_formatted_message_000817c8",
                "param_1": "formatString",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uStack_c": "param2Copy",
                "uStack_8": "param3Copy",
                "uStack_4": "param4Copy"
            },
            "calling": [
                "_exit"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817f0": {
            "entrypoint": "0x000817f0",
            "current_name": "allocate_memory_000817f0",
            "code": "\nvoid * allocateMemory_000817f0(size_t numBytes)\n\n{\n  void *allocatedMemory;\n  \n  allocatedMemory = (void *)_malloc_r(_impure_ptr,numBytes);\n  return allocatedMemory;\n}\n\n",
            "renaming": {
                "FUN_000817f0": "allocate_memory_000817f0",
                "__size": "numBytes",
                "pvVar1": "allocatedMemory"
            },
            "calling": [
                "__register_exitproc"
            ],
            "called": [
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081800": {
            "entrypoint": "0x00081800",
            "current_name": "deallocate_memory_00081800",
            "code": "\nvoid deallocateMemory_00081800(void *memoryAddress)\n\n{\n  _free_r(_impure_ptr,memoryAddress);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081800": "deallocate_memory_00081800",
                "__ptr": "memoryAddress"
            },
            "calling": [
                "move",
                "invalidate",
                "~String"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081810": {
            "entrypoint": "0x00081810",
            "current_name": "allocate_memory_00081810",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocateMemory_00081810(undefined4 *lock,uint size)\n\n{\n  undefined1 *pointer1;\n  int variable1;\n  uint variable2;\n  uint variable3;\n  int variable4;\n  uint variable5;\n  uint variable6;\n  uint variable7;\n  undefined4 *pointer2;\n  undefined1 *pointer3;\n  undefined1 *pointer4;\n  undefined1 *pointer5;\n  uint variable8;\n  undefined4 *pointer6;\n  undefined4 *pointer7;\n  undefined1 *pointer8;\n  \n  if (size + 0xb < 0x17) {\n    variable8 = 0x10;\n    if (0x10 < size) goto LAB_00081876;\n  }\n  else {\n    variable8 = size + 0xb & 0xfffffff8;\n    if (((int)variable8 < 0) || (variable8 < size)) {\nLAB_00081876:\n      *lock = 0xc;\n      return (int *)0x0;\n    }\n  }\n  __malloc_lock(lock);\n  pointer6 = DAT_20070474;\n  if (variable8 < 0x1f8) {\n    pointer5 = *(undefined1 **)((int)&DAT_20070470 + variable8);\n    if ((pointer5 != &__malloc_av_ + variable8) ||\n       (pointer4 = pointer5 + 8, pointer5 = *(undefined1 **)(pointer5 + 0x14), pointer4 != pointer5)) {\n      variable7 = *(uint *)(pointer5 + 4);\n      variable4 = *(int *)(pointer5 + 0xc);\n      variable8 = *(uint *)(pointer5 + (variable7 & 0xfffffffc) + 4);\n      variable1 = *(int *)(pointer5 + 8);\n      *(int *)(variable1 + 0xc) = variable4;\n      *(int *)(variable4 + 8) = variable1;\n      *(uint *)(pointer5 + (variable7 & 0xfffffffc) + 4) = variable8 | 1;\n      __malloc_unlock(lock);\n      return (int *)(pointer5 + 8);\n    }\n    variable7 = (variable8 >> 3) + 2;\n  }\n  else {\n    variable7 = variable8 >> 9;\n    if (variable7 == 0) {\n      variable4 = 0x7e;\n      variable1 = 0x3f;\n    }\n    else if (variable7 < 5) {\n      variable1 = (variable8 >> 6) + 0x38;\n      variable4 = variable1 * 2;\n    }\n    else if (variable7 < 0x15) {\n      variable1 = variable7 + 0x5b;\n      variable4 = variable1 * 2;\n    }\n    else if (variable7 < 0x55) {\n      variable1 = (variable8 >> 0xc) + 0x6e;\n      variable4 = variable1 * 2;\n    }\n    else if (variable7 < 0x155) {\n      variable1 = (variable8 >> 0xf) + 0x77;\n      variable4 = variable1 * 2;\n    }\n    else if (variable7 < 0x555) {\n      variable1 = (variable8 >> 0x12) + 0x7c;\n      variable4 = variable1 * 2;\n    }\n    else {\n      variable4 = 0xfc;\n      variable1 = 0x7e;\n    }\n    for (pointer5 = (undefined1 *)(&DAT_20070470)[variable4]; &__malloc_av_ + variable4 * 4 != pointer5;\n        pointer5 = *(undefined1 **)(pointer5 + 0xc)) {\n      variable7 = *(uint *)(pointer5 + 4) & 0xfffffffc;\n      if (0xf < (int)(variable7 - variable8)) {\n        variable1 = variable1 + -1;\n        break;\n      }\n      if (-1 < (int)(variable7 - variable8)) {\n        variable8 = *(uint *)(pointer5 + variable7 + 4);\n        variable4 = *(int *)(pointer5 + 0xc);\n        variable1 = *(int *)(pointer5 + 8);\n        *(int *)(variable1 + 0xc) = variable4;\n        *(int *)(variable4 + 8) = variable1;\n        *(uint *)(pointer5 + variable7 + 4) = variable8 | 1;\n        __malloc_unlock(lock);\n        return (int *)(pointer5 + 8);\n      }\n    }\n    variable7 = variable1 + 1;\n  }\n  variable2 = DAT_20070468;\n  if ((undefined1 **)DAT_20070474 != &DAT_2007046c) {\n    variable2 = DAT_20070474[1];\n    variable3 = variable2 & 0xfffffffc;\n    variable5 = variable3 - variable8;\n    if (0xf < (int)variable5) {\n      pointer7 = (undefined4 *)(variable8 + (int)DAT_20070474);\n      DAT_20070474[1] = variable8 | 1;\n      DAT_20070474 = pointer7;\n      DAT_20070478 = pointer7;\n      pointer7[3] = &DAT_2007046c;\n      pointer7[2] = &DAT_2007046c;\n      pointer7[1] = variable5 | 1;\n      *(uint *)((int)pointer7 + variable5) = variable5;\n      __malloc_unlock(lock);\n      return pointer6 + 2;\n    }\n    DAT_20070478 = &DAT_2007046c;\n    DAT_20070474 = &DAT_2007046c;\n    if (-1 < (int)variable5) {\n      *(uint *)((int)pointer6 + variable3 + 4) = *(uint *)((int)pointer6 + variable3 + 4) | 1;\n      __malloc_unlock(lock);\n      return pointer6 + 2;\n    }\n    if (variable3 < 0x200) {\n      variable3 = variable2 & 0xfffffff8;\n      variable1 = *(int *)((int)&DAT_2007046c + variable3);\n      variable2 = 1 << ((int)(variable2 >> 3) >> 2 & 0xffU) | DAT_20070468;\n      pointer6[2] = variable1;\n      pointer6[3] = &__malloc_av_ + variable3;\n      DAT_20070468 = variable2;\n      *(undefined4 **)((int)&DAT_2007046c + variable3) = pointer6;\n      *(undefined4 **)(variable1 + 0xc) = pointer6;\n    }\n    else {\n      variable5 = variable2 >> 9;\n      if (variable5 < 5) {\n        variable4 = (variable2 >> 6) + 0x38;\n        variable1 = variable4 * 2;\n      }\n      else if (variable5 < 0x15) {\n        variable4 = variable5 + 0x5b;\n        variable1 = variable4 * 2;\n      }\n      else if (variable5 < 0x55) {\n        variable4 = (variable2 >> 0xc) + 0x6e;\n        variable1 = variable4 * 2;\n      }\n      else if (variable5 < 0x155) {\n        variable4 = (variable2 >> 0xf) + 0x77;\n        variable1 = variable4 * 2;\n      }\n      else if (variable5 < 0x555) {\n        variable4 = (variable2 >> 0x12) + 0x7c;\n        variable1 = variable4 * 2;\n      }\n      else {\n        variable1 = 0xfc;\n        variable4 = 0x7e;\n      }\n      pointer5 = (&DAT_2007046c)[variable1];\n      if (pointer5 == &__malloc_av_ + variable1 * 4) {\n        DAT_20070468 = DAT_20070468 | 1 << (variable4 >> 2 & 0xffU);\n        pointer4 = pointer5;\n      }\n      else {\n        do {\n          pointer4 = pointer5;\n          if ((*(uint *)(pointer5 + 4) & 0xfffffffc) <= variable3) break;\n          pointer5 = *(undefined1 **)(pointer5 + 8);\n          pointer4 = pointer5;\n        } while (&__malloc_av_ + variable1 * 4 != pointer5);\n        pointer5 = *(undefined1 **)(pointer4 + 0xc);\n      }\n      variable2 = DAT_20070468;\n      pointer6[3] = pointer5;\n      pointer6[2] = pointer4;\n      *(undefined4 **)(pointer5 + 8) = pointer6;\n      *(undefined4 **)(pointer4 + 0xc) = pointer6;\n    }\n  }\n  pointer5 = DAT_2007046c;\n  variable3 = 1 << ((int)variable7 >> 2 & 0xffU);\n  if (variable3 <= variable2) {\n    if ((variable2 & variable3) == 0) {\n      variable7 = variable7 & 0xfffffffc;\n      do {\n        variable3 = variable3 << 1;\n        variable7 = variable7 + 4;\n      } while ((variable2 & variable3) == 0);\n    }\n    do {\n      pointer7 = (undefined4 *)(&__malloc_av_ + variable7 * 8);\n      pointer6 = pointer7;\n      variable2 = variable7;\n      do {\n        for (pointer2 = (undefined4 *)pointer6[3]; pointer6 != pointer2; pointer2 = (undefined4 *)pointer2[3])\n        {\n          variable5 = pointer2[1] & 0xfffffffc;\n          variable6 = variable5 - variable8;\n          if (0xf < (int)variable6) {\n            variable4 = pointer2[2];\n            variable1 = pointer2[3];\n            pointer6 = (undefined4 *)(variable8 + (int)pointer2);\n            pointer2[1] = variable8 | 1;\n            *(int *)(variable4 + 0xc) = variable1;\n            *(int *)(variable1 + 8) = variable4;\n            DAT_20070474 = pointer6;\n            DAT_20070478 = pointer6;\n            pointer6[3] = &DAT_2007046c;\n            pointer6[2] = &DAT_2007046c;\n            pointer6[1] = variable6 | 1;\n            *(uint *)((int)pointer6 + variable6) = variable6;\n            __malloc_unlock(lock);\n            return pointer2 + 2;\n          }\n          if (-1 < (int)variable6) {\n            variable1 = pointer2[2];\n            variable4 = pointer2[3];\n            *(uint *)((int)pointer2 + variable5 + 4) = *(uint *)((int)pointer2 + variable5 + 4) | 1;\n            *(int *)(variable1 + 0xc) = variable4;\n            *(int *)(variable4 + 8) = variable1;\n            __malloc_unlock(lock);\n            return pointer2 + 2;\n          }\n        }\n        variable2 = variable2 + 1;\n        pointer6 = pointer6 + 2;\n      } while ((variable2 & 3) != 0);\n      do {\n        variable5 = variable7 & 3;\n        pointer6 = pointer7 + -2;\n        variable7 = variable7 - 1;\n        if (variable5 == 0) {\n          DAT_20070468 = DAT_20070468 & ~variable3;\n          break;\n        }\n        pointer7 = (undefined4 *)*pointer7;\n      } while (pointer7 == pointer6);\n      variable3 = variable3 * 2;\n      if ((DAT_20070468 <= variable3 && variable3 - DAT_20070468 != 0) || (variable7 = variable2, variable3 == 0))\n      break;\n      for (; (DAT_20070468 & variable3) == 0; variable3 = variable3 << 1) {\n        variable7 = variable7 + 4;\n      }\n    } while( true );\n  }\n  variable7 = *(uint *)(DAT_2007046c + 4) & 0xfffffffc;\n  if ((variable8 <= variable7) && (variable2 = variable7 - variable8, pointer4 = DAT_2007046c, 0xf < (int)variable2))\n  goto LAB_00081b1a;\n  pointer8 = DAT_2007046c + variable7;\n  if (__malloc_sbrk_base == (undefined1 *)0xffffffff) {\n    variable2 = variable8 + __malloc_top_pad + 0x10;\n  }\n  else {\n    variable2 = variable8 + __malloc_top_pad + 0x100f & 0xfffff000;\n  }\n  pointer4 = (undefined1 *)_sbrk_r(lock,variable2);\n  if ((pointer4 == (undefined1 *)0xffffffff) || ((pointer4 < pointer8 && (pointer5 != &__malloc_av_))))\n  {\n    variable7 = *(uint *)(DAT_2007046c + 4) & 0xfffffffc;\n    pointer4 = DAT_2007046c;\n  }\n  else {\n    pointer3 = __malloc_current_mallinfo + variable2;\n    __malloc_current_mallinfo = pointer3;\n    if ((pointer8 == pointer4) && (((uint)pointer8 & 0xfff) == 0)) {\n      *(uint *)(DAT_2007046c + 4) = variable2 + variable7 | 1;\n    }\n    else {\n      pointer1 = pointer4;\n      if (__malloc_sbrk_base != (undefined1 *)0xffffffff) {\n        pointer1 = __malloc_sbrk_base;\n        __malloc_current_mallinfo = pointer3 + ((int)pointer4 - (int)pointer8);\n      }\n      __malloc_sbrk_base = pointer1;\n      variable3 = (uint)pointer4 & 7;\n      if (variable3 == 0) {\n        variable1 = 0x1000;\n      }\n      else {\n        pointer4 = pointer4 + (8 - variable3);\n        variable1 = 0x1008 - variable3;\n      }\n      variable1 = variable1 - ((uint)(pointer4 + variable2) & 0xfff);\n      variable4 = _sbrk_r(lock,variable1);\n      if (variable4 == -1) {\n        variable2 = 1;\n        variable1 = 0;\n      }\n      else {\n        variable2 = (variable4 - (int)pointer4) + variable1 | 1;\n      }\n      pointer3 = __malloc_current_mallinfo + variable1;\n      DAT_2007046c = pointer4;\n      __malloc_current_mallinfo = pointer3;\n      *(uint *)(pointer4 + 4) = variable2;\n      if (pointer5 != &__malloc_av_) {\n        if (variable7 < 0x10) {\n          *(undefined4 *)(pointer4 + 4) = 1;\n          variable7 = 0;\n          goto LAB_00081b04;\n        }\n        variable7 = variable7 - 0xc & 0xfffffff8;\n        *(uint *)(pointer5 + 4) = variable7 | *(uint *)(pointer5 + 4) & 1;\n        *(undefined4 *)(pointer5 + variable7 + 4) = 5;\n        *(undefined4 *)(pointer5 + variable7 + 8) = 5;\n        if (0xf < variable7) {\n          _free_r(lock,pointer5 + 8);\n          pointer3 = __malloc_current_mallinfo;\n        }\n      }\n    }\n    if (__malloc_max_sbrked_mem < pointer3) {\n      __malloc_max_sbrked_mem = pointer3;\n    }\n    if (__malloc_max_total_mem < pointer3) {\n      __malloc_max_total_mem = pointer3;\n    }\n    variable7 = *(uint *)(DAT_2007046c + 4) & 0xfffffffc;\n    pointer4 = DAT_2007046c;\n  }\nLAB_00081b04:\n  variable2 = variable7 - variable8;\n  if ((variable7 < variable8) || ((int)variable2 < 0x10)) {\n    __malloc_unlock(lock);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  DAT_2007046c = pointer4 + variable8;\n  *(uint *)(pointer4 + 4) = variable8 | 1;\n  *(uint *)(DAT_2007046c + 4) = variable2 | 1;\n  __malloc_unlock(lock);\n  return (int *)(pointer4 + 8);\n}\n\n",
            "renaming": {
                "FUN_00081810": "allocate_memory_00081810",
                "param_1": "lock",
                "param_2": "size",
                "puVar1": "pointer1",
                "iVar2": "variable1",
                "uVar3": "variable2",
                "uVar4": "variable3",
                "iVar5": "variable4",
                "uVar6": "variable5",
                "uVar7": "variable6",
                "uVar8": "variable7",
                "puVar9": "pointer2",
                "puVar10": "pointer3",
                "puVar11": "pointer4",
                "puVar12": "pointer5",
                "uVar13": "variable8",
                "puVar14": "pointer6",
                "puVar15": "pointer7",
                "puVar16": "pointer8"
            },
            "calling": [
                "malloc",
                "__smakebuf_r",
                "__sfvwrite_r",
                "_realloc_r"
            ],
            "called": [
                "__malloc_unlock",
                "_sbrk_r",
                "__malloc_lock",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d48": {
            "entrypoint": "0x00081d48",
            "current_name": "copy_memory_00081d48",
            "code": "\nvoid * copyMemory_00081d48(void *destination,void *source,size_t size)\n\n{\n  undefined *destPtr;\n  undefined4 *destPtrAligned;\n  undefined4 *destPtrAlignedIter;\n  undefined *srcPtr;\n  undefined4 *srcPtrAligned;\n  undefined *srcPtrAlignedIter;\n  uint remainingSize;\n  uint alignedSize;\n  bool carry;\n  \n  destPtrAlignedIter = (undefined4 *)destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      alignedSize = size - 4;\n      destPtr = (undefined *)destination;\n      if (3 < size) {\n        do {\n          srcPtrAlignedIter = (undefined *)source;\n          srcPtr = destPtr;\n          carry = alignedSize != 0;\n          alignedSize = alignedSize - 1;\n          *srcPtr = *srcPtrAlignedIter;\n          destPtr = srcPtr + 1;\n          source = srcPtrAlignedIter + 1;\n        } while (carry);\n        srcPtr[1] = srcPtrAlignedIter[1];\n        srcPtr[2] = srcPtrAlignedIter[2];\n        srcPtr[3] = srcPtrAlignedIter[3];\n        return destination;\n      }\n      goto LAB_00081dcc;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      alignedSize = 4 - ((uint)destination & 3);\n      size = size - alignedSize;\n      destPtrAligned = (undefined4 *)destination;\n      srcPtrAligned = (undefined4 *)source;\n                    /* WARNING: Load size is inaccurate */\n      if (((uint)destination & 1) != 0) {\n        srcPtrAligned = (undefined4 *)((int)source + 1);\n        destPtrAligned = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *source;\n      }\n      destPtrAlignedIter = destPtrAligned;\n      source = srcPtrAligned;\n      if ((alignedSize & 2) != 0) {\n        source = (void *)((int)srcPtrAligned + 2);\n        destPtrAlignedIter = (undefined4 *)((int)destPtrAligned + 2);\n        *(undefined2 *)destPtrAligned = *(undefined2 *)srcPtrAligned;\n      }\n    }\n  }\n  while (0x3f < size) {\n                    /* WARNING: Load size is inaccurate */\n    *destPtrAlignedIter = *source;\n    destPtrAlignedIter[1] = *(undefined4 *)((int)source + 4);\n    destPtrAlignedIter[2] = *(undefined4 *)((int)source + 8);\n    destPtrAlignedIter[3] = *(undefined4 *)((int)source + 0xc);\n    destPtrAlignedIter[4] = *(undefined4 *)((int)source + 0x10);\n    destPtrAlignedIter[5] = *(undefined4 *)((int)source + 0x14);\n    destPtrAlignedIter[6] = *(undefined4 *)((int)source + 0x18);\n    destPtrAlignedIter[7] = *(undefined4 *)((int)source + 0x1c);\n    destPtrAlignedIter[8] = *(undefined4 *)((int)source + 0x20);\n    destPtrAlignedIter[9] = *(undefined4 *)((int)source + 0x24);\n    destPtrAlignedIter[10] = *(undefined4 *)((int)source + 0x28);\n    destPtrAlignedIter[0xb] = *(undefined4 *)((int)source + 0x2c);\n    destPtrAlignedIter[0xc] = *(undefined4 *)((int)source + 0x30);\n    destPtrAlignedIter[0xd] = *(undefined4 *)((int)source + 0x34);\n    destPtrAlignedIter[0xe] = *(undefined4 *)((int)source + 0x38);\n    destPtrAlignedIter[0xf] = *(undefined4 *)((int)source + 0x3c);\n    destPtrAlignedIter = destPtrAlignedIter + 0x10;\n    source = (undefined4 *)((int)source + 0x40);\n    size = size - 0x40;\n  }\n  remainingSize = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n                    /* WARNING: Load size is inaccurate */\n      *destPtrAlignedIter = *source;\n      destPtrAlignedIter[1] = *(undefined4 *)((int)source + 4);\n      destPtrAlignedIter[2] = *(undefined4 *)((int)source + 8);\n      destPtrAlignedIter[3] = *(undefined4 *)((int)source + 0xc);\n      destPtrAlignedIter = destPtrAlignedIter + 4;\n      source = (void *)((int)source + 0x10);\n      carry = 0xf < remainingSize;\n      remainingSize = remainingSize - 0x10;\n    } while (carry);\n  }\n  alignedSize = remainingSize + 0xc;\n  srcPtrAligned = destPtrAlignedIter;\n  destPtrAligned = (undefined4 *)source;\n  if (0xfffffff3 < remainingSize) {\n    do {\n      source = destPtrAligned + 1;\n      *srcPtrAligned = *destPtrAligned;\n      carry = 3 < alignedSize;\n      alignedSize = alignedSize - 4;\n      destPtrAlignedIter = srcPtrAligned + 1;\n      srcPtrAligned = srcPtrAligned + 1;\n      destPtrAligned = (undefined4 *)source;\n    } while (carry);\n  }\nLAB_00081dcc:\n  if (alignedSize + 4 != 0) {\n    destPtrAligned = destPtrAlignedIter;\n    srcPtrAligned = (undefined4 *)source;\n                    /* WARNING: Load size is inaccurate */\n    if ((alignedSize & 1) != 0) {\n      srcPtrAligned = (undefined4 *)((int)source + 1);\n      destPtrAligned = (undefined4 *)((int)destPtrAlignedIter + 1);\n      *(undefined *)destPtrAlignedIter = *source;\n    }\n    if ((alignedSize + 4 & 2) != 0) {\n      *(undefined2 *)destPtrAligned = *(undefined2 *)srcPtrAligned;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00081d48": "copy_memory_00081d48",
                "__dest": "destination",
                "__src": "source",
                "__n": "size",
                "puVar1": "destPtr",
                "puVar2": "destPtrAligned",
                "puVar3": "destPtrAlignedIter",
                "puVar4": "srcPtr",
                "puVar5": "srcPtrAligned",
                "puVar6": "srcPtrAlignedIter",
                "uVar7": "remainingSize",
                "uVar8": "alignedSize",
                "bVar9": "carry"
            },
            "calling": [
                "__sfvwrite_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e34": {
            "entrypoint": "0x00081e34",
            "current_name": "copy_backward_00081e34",
            "code": "\nvoid * copy_backward_00081e34(void *destination,void *source,size_t length)\n\n{\n  int index;\n  undefined4 *dest_ptr;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined *end_of_src;\n  uint remaining_length;\n  undefined *end_of_dest;\n  uint rest_length;\n  \n  if ((source < destination) && (end_of_src = (undefined *)((int)source + length), destination < end_of_src)) {\n    end_of_dest = (undefined *)((int)destination + length);\n    index = length - 1;\n    if (length != 0) {\n      do {\n        end_of_src = end_of_src + -1;\n        index = index + -1;\n        end_of_dest = end_of_dest + -1;\n        *end_of_dest = *end_of_src;\n      } while (index != -1);\n    }\n    return destination;\n  }\n  dest_ptr = (undefined4 *)destination;\n  if (length < 0x10) {\n    if (length == 0) {\n      return destination;\n    }\n  }\n  else if ((((uint)destination | (uint)source) & 3) == 0) {\n    dest_ptr = (undefined4 *)source;\n    do {\n      src_ptr = dest_ptr + 4;\n      *dest_ptr = *dest_ptr;\n      dest_ptr[1] = dest_ptr[1];\n      dest_ptr[2] = dest_ptr[2];\n      dest_ptr[3] = dest_ptr[3];\n      dest_ptr = src_ptr;\n      dest_ptr = dest_ptr + 4;\n    } while (src_ptr != (undefined4 *)((int)destination + (length - 0x10 & 0xfffffff0) + 0x10));\n    rest_length = length & 0xf;\n    index = ((length - 0x10 >> 4) + 1) * 0x10;\n    source = (void *)((int)source + index);\n    dest_ptr = (undefined4 *)(index + (int)destination);\n    remaining_length = rest_length;\n    dest_ptr = dest_ptr;\n    src_ptr = (undefined4 *)source;\n    if (3 < rest_length) {\n      do {\n        remaining_length = remaining_length - 4;\n        *dest_ptr = *src_ptr;\n        dest_ptr = dest_ptr + 1;\n        src_ptr = src_ptr + 1;\n      } while (3 < remaining_length);\n      index = (rest_length - 4 & 0xfffffffc) + 4;\n      dest_ptr = (undefined4 *)((int)dest_ptr + index);\n      source = (void *)((int)source + index);\n      rest_length = length & 3;\n    }\n    length = rest_length;\n    if (length == 0) {\n      return destination;\n    }\n  }\n  dest_ptr = dest_ptr;\n  do {\n                    /* WARNING: Load size is inaccurate */\n    src_ptr = (undefined4 *)((int)dest_ptr + 1);\n    *(undefined *)dest_ptr = *source;\n    source = (undefined4 *)((int)source + 1);\n    dest_ptr = src_ptr;\n  } while (src_ptr != (undefined4 *)(length + (int)dest_ptr));\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00081e34": "copy_backward_00081e34",
                "__dest": "destination",
                "__src": "source",
                "__n": "length",
                "iVar1": "index",
                "puVar2": "dest_ptr",
                "puVar3": "dest_ptr",
                "puVar4": "src_ptr",
                "puVar5": "end_of_src",
                "puVar7": "end_of_dest",
                "uVar6": "remaining_length",
                "uVar8": "rest_length"
            },
            "calling": [
                "__sfvwrite_r",
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f00": {
            "entrypoint": "0x00081f00",
            "current_name": "memset_00081f00",
            "code": "\nvoid * memset_00081f00(void *buffer,int value,size_t num_bytes)\n\n{\n  uint *dest;\n  uint *src;\n  uint *next_dest;\n  uint value32;\n  uint remaining_bytes;\n  bool is_empty;\n  \n  src = (uint *)buffer;\n  if (((uint)buffer & 3) != 0) {\n    is_empty = num_bytes == 0;\n    dest = (uint *)buffer;\n    num_bytes = num_bytes - 1;\n    if (is_empty) {\n      return buffer;\n    }\n    while( true ) {\n      src = (uint *)((int)dest + 1);\n      *(char *)dest = (char)value;\n      if (((uint)src & 3) == 0) break;\n      is_empty = num_bytes == 0;\n      dest = src;\n      num_bytes = num_bytes - 1;\n      if (is_empty) {\n        return buffer;\n      }\n    }\n  }\n  if (3 < num_bytes) {\n    value32 = value & 0xffU | (value & 0xffU) << 8;\n    value32 = value32 | value32 << 0x10;\n    remaining_bytes = num_bytes;\n    dest = src;\n    if (0xf < num_bytes) {\n      remaining_bytes = num_bytes - 0x10;\n      do {\n        *dest = value32;\n        dest[1] = value32;\n        dest[2] = value32;\n        dest[3] = value32;\n        dest = dest + 4;\n      } while (dest != (uint *)((int)src + (remaining_bytes & 0xfffffff0) + 0x10));\n      num_bytes = num_bytes & 0xf;\n      src = src + ((remaining_bytes >> 4) + 1) * 4;\n      remaining_bytes = num_bytes;\n      dest = src;\n      if (num_bytes < 4) goto LAB_00081f7c;\n    }\n    do {\n      num_bytes = num_bytes - 4;\n      *src = value32;\n      src = src + 1;\n    } while (3 < num_bytes);\n    src = (uint *)((int)dest + (remaining_bytes - 4 & 0xfffffffc) + 4);\n    num_bytes = remaining_bytes & 3;\n  }\nLAB_00081f7c:\n  if (num_bytes != 0) {\n    dest = src;\n    do {\n      next_dest = (uint *)((int)dest + 1);\n      *(char *)dest = (char)value;\n      dest = next_dest;\n    } while (next_dest != (uint *)(num_bytes + (int)src));\n  }\n  return buffer;\n}\n\n",
            "renaming": {
                "FUN_00081f00": "memset_00081f00",
                "__s": "buffer",
                "__c": "value",
                "__n": "num_bytes",
                "puVar1": "dest",
                "puVar2": "src",
                "puVar3": "next_dest",
                "uVar4": "value32",
                "uVar5": "remaining_bytes",
                "bVar6": "is_empty"
            },
            "calling": [
                "__sinit",
                "RingBuffer"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f94": {
            "entrypoint": "0x00081f94",
            "current_name": "FUNC_00081f94",
            "code": "\nvoid FUNC_00081f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f94": "FUNC_00081f94"
            },
            "calling": [
                "_malloc_r",
                "_malloc_trim_r",
                "_realloc_r",
                "_free_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f98": {
            "entrypoint": "0x00081f98",
            "current_name": "FUNC_00081f98",
            "code": "\nvoid FUNC_00081f98(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f98": "FUNC_00081f98"
            },
            "calling": [
                "_malloc_r",
                "_malloc_trim_r",
                "_realloc_r",
                "_free_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f9c": {
            "entrypoint": "0x00081f9c",
            "current_name": "reallocate_memory_00081f9c",
            "code": "\nvoid * reallocateMemory_00081f9c(void *oldPointer,size_t newSize)\n\n{\n  void *newPointer;\n  \n  newPointer = (void *)_realloc_r(_impure_ptr,oldPointer,newSize);\n  return newPointer;\n}\n\n",
            "renaming": {
                "FUN_00081f9c": "reallocate_memory_00081f9c",
                "__ptr": "oldPointer",
                "__size": "newSize",
                "pvVar1": "newPointer"
            },
            "calling": [
                "changeBuffer"
            ],
            "called": [
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081fac": {
            "entrypoint": "0x00081fac",
            "current_name": "allocate_memory_00081fac",
            "code": "\nint * allocateMemory_00081fac(undefined4 *param_size,int *input_memory,uint input_size)\n\n{\n  int allocated_size;\n  int *allocated_memory;\n  uint padding;\n  size_t copy_size;\n  uint prev_size;\n  int current_block;\n  int *copy_destination;\n  uint adjusted_size;\n  uint aligned_size;\n  int *output_memory;\n  \n  if (input_memory == (int *)0x0) {\n    allocated_memory = (int *)_malloc_r(param_size,input_size);\n    return allocated_memory;\n  }\n  __malloc_lock();\n  prev_size = input_memory[-1];\n  adjusted_size = prev_size & 0xfffffffc;\n  allocated_memory = input_memory + -2;\n  if (input_size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = input_size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_00082078;\n  }\n  if (aligned_size < input_size) {\nLAB_00082078:\n    *param_size = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)adjusted_size < (int)aligned_size) {\n    allocated_size = (int)allocated_memory + adjusted_size;\n    if (DAT_2007046c == allocated_size) {\n      padding = *(uint *)(DAT_2007046c + 4) & 0xfffffffc;\n      allocated_size = DAT_2007046c;\n      if ((int)(aligned_size + 0x10) <= (int)(padding + adjusted_size)) {\n        DAT_2007046c = (int)allocated_memory + aligned_size;\n        *(uint *)(DAT_2007046c + 4) = (padding + adjusted_size) - aligned_size | 1;\n        input_memory[-1] = aligned_size | input_memory[-1] & 1U;\n        __malloc_unlock(param_size);\n        return input_memory;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(allocated_size + 4) & 0xfffffffe) + allocated_size + 4) & 1) == 0) {\n      padding = *(uint *)(allocated_size + 4) & 0xfffffffc;\n      if ((int)aligned_size <= (int)(padding + adjusted_size)) {\n        current_block = *(int *)(allocated_size + 0xc);\n        allocated_size = *(int *)(allocated_size + 8);\n        *(int *)(allocated_size + 0xc) = current_block;\n        *(int *)(current_block + 8) = allocated_size;\n        adjusted_size = padding + adjusted_size;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      padding = 0;\n      allocated_size = 0;\n    }\n    if (-1 < (int)(prev_size << 0x1f)) {\n      output_memory = (int *)((int)allocated_memory - input_memory[-2]);\n      prev_size = (output_memory[1] & 0xfffffffcU) + adjusted_size;\n      if (allocated_size != 0) {\n        if (allocated_size == DAT_2007046c) {\n          if ((int)(aligned_size + 0x10) <= (int)(padding + prev_size)) {\n            allocated_memory = output_memory + 2;\n            allocated_size = *allocated_memory;\n            current_block = output_memory[3];\n            copy_size = adjusted_size - 4;\n            *(int *)(allocated_size + 0xc) = current_block;\n            *(int *)(current_block + 8) = allocated_size;\n            if (copy_size < 0x25) {\n              copy_destination = allocated_memory;\n              if (0x13 < copy_size) {\n                output_memory[2] = *input_memory;\n                output_memory[3] = input_memory[1];\n                if (copy_size < 0x1c) {\n                  input_memory = input_memory + 2;\n                  copy_destination = output_memory + 4;\n                }\n                else {\n                  output_memory[4] = input_memory[2];\n                  output_memory[5] = input_memory[3];\n                  if (copy_size == 0x24) {\n                    output_memory[6] = input_memory[4];\n                    copy_destination = input_memory + 5;\n                    input_memory = input_memory + 6;\n                    output_memory[7] = *copy_destination;\n                    copy_destination = output_memory + 8;\n                  }\n                  else {\n                    input_memory = input_memory + 4;\n                    copy_destination = output_memory + 6;\n                  }\n                }\n              }\n              *copy_destination = *input_memory;\n              copy_destination[1] = input_memory[1];\n              copy_destination[2] = input_memory[2];\n            }\n            else {\n              memmove(allocated_memory,input_memory,copy_size);\n            }\n            DAT_2007046c = (int)output_memory + aligned_size;\n            *(uint *)(DAT_2007046c + 4) = (padding + prev_size) - aligned_size | 1;\n            output_memory[1] = aligned_size | output_memory[1] & 1U;\n            __malloc_unlock(param_size);\n            return allocated_memory;\n          }\n        }\n        else {\n          padding = padding + prev_size;\n          if ((int)aligned_size <= (int)padding) {\n            current_block = *(int *)(allocated_size + 0xc);\n            allocated_size = *(int *)(allocated_size + 8);\n            *(int *)(allocated_size + 0xc) = current_block;\n            *(int *)(current_block + 8) = allocated_size;\n            copy_destination = output_memory + 2;\n            allocated_size = *copy_destination;\n            current_block = output_memory[3];\n            copy_size = adjusted_size - 4;\n            *(int *)(allocated_size + 0xc) = current_block;\n            *(int *)(current_block + 8) = allocated_size;\n            adjusted_size = padding;\n            if (copy_size < 0x25) {\n              allocated_memory = copy_destination;\n              if (0x13 < copy_size) {\n                output_memory[2] = *input_memory;\n                output_memory[3] = input_memory[1];\n                if (copy_size < 0x1c) {\n                  input_memory = input_memory + 2;\n                  allocated_memory = output_memory + 4;\n                }\n                else {\n                  output_memory[4] = input_memory[2];\n                  output_memory[5] = input_memory[3];\n                  if (copy_size == 0x24) {\n                    output_memory[6] = input_memory[4];\n                    allocated_memory = input_memory + 5;\n                    input_memory = input_memory + 6;\n                    output_memory[7] = *allocated_memory;\n                    allocated_memory = output_memory + 8;\n                  }\n                  else {\n                    input_memory = input_memory + 4;\n                    allocated_memory = output_memory + 6;\n                  }\n                }\n              }\n              *allocated_memory = *input_memory;\n              allocated_memory[1] = input_memory[1];\n              allocated_memory[2] = input_memory[2];\n              prev_size = output_memory[1];\n              allocated_memory = output_memory;\n              input_memory = copy_destination;\n            }\n            else {\n              memmove(copy_destination,input_memory,copy_size);\n              prev_size = output_memory[1];\n              allocated_memory = output_memory;\n              input_memory = copy_destination;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)aligned_size <= (int)prev_size) {\n        copy_destination = output_memory + 2;\n        allocated_size = *copy_destination;\n        current_block = output_memory[3];\n        copy_size = adjusted_size - 4;\n        *(int *)(allocated_size + 0xc) = current_block;\n        *(int *)(current_block + 8) = allocated_size;\n        adjusted_size = prev_size;\n        if (copy_size < 0x25) {\n          allocated_memory = copy_destination;\n          if (0x13 < copy_size) {\n            output_memory[2] = *input_memory;\n            output_memory[3] = input_memory[1];\n            if (copy_size < 0x1c) {\n              input_memory = input_memory + 2;\n              allocated_memory = output_memory + 4;\n            }\n            else {\n              output_memory[4] = input_memory[2];\n              output_memory[5] = input_memory[3];\n              if (copy_size == 0x24) {\n                output_memory[6] = input_memory[4];\n                allocated_memory = input_memory + 5;\n                input_memory = input_memory + 6;\n                output_memory[7] = *allocated_memory;\n                allocated_memory = output_memory + 8;\n              }\n              else {\n                input_memory = input_memory + 4;\n                allocated_memory = output_memory + 6;\n              }\n            }\n          }\n          *allocated_memory = *input_memory;\n          allocated_memory[1] = input_memory[1];\n          allocated_memory[2] = input_memory[2];\n          prev_size = output_memory[1];\n          allocated_memory = output_memory;\n          input_memory = copy_destination;\n        }\n        else {\n          memmove(copy_destination,input_memory,copy_size);\n          prev_size = output_memory[1];\n          allocated_memory = output_memory;\n          input_memory = copy_destination;\n        }\n        goto LAB_00082088;\n      }\n    }\n    output_memory = (int *)_malloc_r(param_size,input_size);\n    if (output_memory == (int *)0x0) goto LAB_000820a0;\n    prev_size = input_memory[-1];\n    if (output_memory + -2 != (int *)((prev_size & 0xfffffffe) + (int)allocated_memory)) {\n      copy_size = adjusted_size - 4;\n      if (copy_size < 0x25) {\n        allocated_memory = input_memory;\n        copy_destination = output_memory;\n        if (0x13 < copy_size) {\n          *output_memory = *input_memory;\n          output_memory[1] = input_memory[1];\n          if (copy_size < 0x1c) {\n            allocated_memory = input_memory + 2;\n            copy_destination = output_memory + 2;\n          }\n          else {\n            output_memory[2] = input_memory[2];\n            output_memory[3] = input_memory[3];\n            if (copy_size == 0x24) {\n              output_memory[4] = input_memory[4];\n              output_memory[5] = input_memory[5];\n              allocated_memory = input_memory + 6;\n              copy_destination = output_memory + 6;\n            }\n            else {\n              allocated_memory = input_memory + 4;\n              copy_destination = output_memory + 4;\n            }\n          }\n        }\n        *copy_destination = *allocated_memory;\n        copy_destination[1] = allocated_memory[1];\n        copy_destination[2] = allocated_memory[2];\n      }\n      else {\n        memmove(output_memory,input_memory,copy_size);\n      }\n      _free_r(param_size,input_memory);\n      goto LAB_000820a0;\n    }\n    adjusted_size = adjusted_size + (output_memory[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  padding = adjusted_size - aligned_size;\n  output_memory = input_memory;\n  if (padding < 0x10) {\n    allocated_memory[1] = prev_size & 1 | adjusted_size;\n    *(uint *)((int)allocated_memory + adjusted_size + 4) = *(uint *)((int)allocated_memory + adjusted_size + 4) | 1;\n  }\n  else {\n    allocated_memory[1] = prev_size & 1 | aligned_size;\n    *(uint *)((int)allocated_memory + aligned_size + 4) = padding | 1;\n    *(uint *)((int)allocated_memory + padding + aligned_size + 4) = *(uint *)((int)allocated_memory + padding + aligned_size + 4) | 1;\n    _free_r(param_size,(int)allocated_memory + aligned_size + 8);\n  }\nLAB_000820a0:\n  __malloc_unlock(param_size);\n  return output_memory;\n}\n\n",
            "renaming": {
                "FUN_00081fac": "allocate_memory_00081fac",
                "param_1": "param_size",
                "param_2": "input_memory",
                "param_3": "input_size",
                "iVar1": "allocated_size",
                "piVar2": "allocated_memory",
                "uVar3": "padding",
                "sVar4": "copy_size",
                "uVar5": "prev_size",
                "iVar6": "current_block",
                "piVar7": "copy_destination",
                "uVar8": "adjusted_size",
                "uVar9": "aligned_size",
                "piVar10": "output_memory"
            },
            "calling": [
                "__sfvwrite_r",
                "realloc"
            ],
            "called": [
                "memmove",
                "_malloc_r",
                "__malloc_unlock",
                "__malloc_lock",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008236c": {
            "entrypoint": "0x0008236c",
            "current_name": "allocate_memory_0008236c",
            "code": "\nvoid allocateMemory_0008236c(int *errorFlag,intptr_t size)\n\n{\n  void *allocatedMemory;\n  \n  errno = 0;\n  allocatedMemory = _sbrk(size);\n  if ((allocatedMemory == (void *)0xffffffff) && (errno != 0)) {\n    *errorFlag = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008236c": "allocate_memory_0008236c",
                "param_1": "errorFlag",
                "param_2": "size",
                "pvVar1": "allocatedMemory"
            },
            "calling": [
                "_malloc_r",
                "_malloc_trim_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082390": {
            "entrypoint": "0x00082390",
            "current_name": "compare_strings_00082390",
            "code": "\nint compareStrings_00082390(char *string1,char *string2)\n\n{\n  uint *ptr1;\n  int result;\n  byte *bytePtr1;\n  byte *bytePtr2;\n  uint *ptr2;\n  uint val1;\n  uint val2;\n  uint val3;\n  uint val4;\n  uint val5;\n  \n  if ((((uint)string1 | (uint)string2) & 7) != 0) {\n    ptr1 = (uint *)string1;\n    if (((uint)string1 & 3) != 0) {\n      ptr1 = (uint *)((uint)string1 & 0xfffffffc) + 1;\n      val1 = *(uint *)((uint)string1 & 0xfffffffc);\n      bytePtr1 = (byte *)string2;\n      if (((uint)string1 & 1) == 0) {\nLAB_00082410:\n        bytePtr2 = bytePtr1 + 1;\n        val2 = val1 >> 0x10 & 0xff;\n        result = val2 - *bytePtr1;\n        if (result != 0) {\n          return result;\n        }\n        if (val2 == 0) {\n          return 0;\n        }\n      }\n      else {\n        bytePtr2 = (byte *)string2;\n        if (((uint)string1 & 2) == 0) {\n          bytePtr1 = (byte *)(string2 + 1);\n          val2 = val1 >> 8 & 0xff;\n          result = val2 - (byte)*string2;\n          if (result != 0) {\n            return result;\n          }\n          if (val2 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      string2 = (char *)(bytePtr2 + 1);\n      result = (val1 >> 0x18) - (uint)*bytePtr2;\n      if ((result != 0) || (val1 >> 0x18 == 0)) {\n        return result;\n      }\n    }\n    val1 = (uint)string2 & 3;\n    if (val1 != 0) {\n      ptr2 = (uint *)((uint)string2 & 0xfffffffc);\n      if (val1 == 2) {\n        val1 = *ptr2;\n        do {\n          ptr2 = ptr2 + 1;\n          val3 = *ptr1;\n          val1 = val1 >> 0x10;\n          val4 = val3 + 0xfefefeff & ~val3;\n          val5 = val4 & 0x80808080;\n          val2 = val3 & 0xffff;\n          if ((val4 & 0x8080) != 0 || val2 != val1) goto LAB_0008258e;\n          val1 = *ptr2;\n          val2 = val2 ^ val3;\n          val3 = val1 * 0x10000;\n          ptr1 = ptr1 + 1;\n        } while (val5 == 0 && val2 == val3);\n      }\n      else if (val1 < 2) {\n        val1 = *ptr2;\n        do {\n          ptr2 = ptr2 + 1;\n          val3 = *ptr1;\n          val1 = val1 >> 8;\n          val4 = val3 + 0xfefefeff & ~val3;\n          val5 = val4 & 0x80808080;\n          val2 = val3 & 0xffffff;\n          if ((val4 & 0x808080) != 0 || val2 != val1) goto LAB_0008258e;\n          val1 = *ptr2;\n          val2 = val2 ^ val3;\n          val3 = val1 * 0x1000000;\n          ptr1 = ptr1 + 1;\n        } while (val5 == 0 && val2 == val3);\n      }\n      else {\n        val1 = *ptr2;\n        do {\n          ptr2 = ptr2 + 1;\n          val3 = *ptr1;\n          val1 = val1 >> 0x18;\n          val4 = val3 + 0xfefefeff & ~val3;\n          val5 = val4 & 0x80808080;\n          val2 = val3 & 0xff;\n          if ((val4 & 0x80) != 0 || val2 != val1) goto LAB_0008258e;\n          val1 = *ptr2;\n          val2 = val2 ^ val3;\n          val3 = val1 * 0x100;\n          ptr1 = ptr1 + 1;\n        } while (val5 == 0 && val2 == val3);\n      }\n      val2 = val2 << 0x18 | (val2 >> 8 & 0xff) << 0x10 | (val2 >> 0x10 & 0xff) << 8 |\n              val2 >> 0x18;\n      val1 = (val3 >> 8 & 0xff) << 0x10 | (val3 >> 0x10 & 0xff) << 8 | val3 >> 0x18;\n      goto LAB_0008259e;\n    }\n    string1 = (char *)ptr1;\n    ptr2 = (uint *)string2;\n    if (((uint)ptr1 & 4) != 0) {\n      string1 = (char *)(ptr1 + 1);\n      val1 = *ptr1;\n      ptr2 = (uint *)((int)string2 + 4);\n      val3 = *(uint *)string2;\n      val5 = val1 + 0xfefefeff & ~val1 & 0x80808080;\n      if (val1 != val3 || val5 != 0) {\nLAB_0008259a:\n        val2 = val1 << 0x18 | (val1 >> 8 & 0xff) << 0x10 | (val1 >> 0x10 & 0xff) << 8 |\n                val1 >> 0x18;\n        val1 = val3 << 0x18 | (val3 >> 8 & 0xff) << 0x10 | (val3 >> 0x10 & 0xff) << 8 |\n                val3 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    string2 = (char *)ptr2;\n    if (((uint)ptr2 & 4) != 0) {\n      val1 = *ptr2;\n      ptr1 = ptr2 + 1;\n      do {\n        val2 = *(uint *)string1;\n        val3 = *(uint *)((int)string1 + 4);\n        val5 = val2 + 0xfefefeff & ~val2 & 0x80808080;\n        if (val2 != val1 || val5 != 0) goto LAB_0008258e;\n        val4 = *ptr1;\n        val1 = ptr1[1];\n        val5 = val3 + 0xfefefeff & ~val3 & 0x80808080;\n        string1 = (char *)((int)string1 + 8);\n        ptr1 = ptr1 + 2;\n      } while (val3 == val4 && val5 == 0);\n      val2 = val3 << 0x18 | (val3 >> 8 & 0xff) << 0x10 | (val3 >> 0x10 & 0xff) << 8 |\n              val3 >> 0x18;\n      val1 = val4 << 0x18 | (val4 >> 8 & 0xff) << 0x10 | (val4 >> 0x10 & 0xff) << 8 |\n              val4 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    val1 = *(uint *)string1;\n    val2 = *(uint *)((int)string1 + 4);\n    val3 = *(uint *)string2;\n    val4 = *(uint *)((int)string2 + 4);\n    val5 = val1 + 0xfefefeff & ~val1 & 0x80808080;\n    if (val1 != val3 || val5 != 0) goto LAB_0008259a;\n    val5 = val2 + 0xfefefeff & ~val2 & 0x80808080;\n    string1 = (char *)((int)string1 + 8);\n    string2 = (char *)((int)string2 + 8);\n  } while (val2 == val4 && val5 == 0);\n  val2 = val2 << 0x18 | (val2 >> 8 & 0xff) << 0x10 | (val2 >> 0x10 & 0xff) << 8 | val2 >> 0x18;\n  val1 = val4 << 0x18 | (val4 >> 8 & 0xff) << 0x10 | (val4 >> 0x10 & 0xff) << 8 | val4 >> 0x18;\nLAB_0008259e:\n  val3 = val5 << 0x18 | (val5 >> 8 & 0xff) << 0x10 | (val5 >> 0x10 & 0xff) << 8 |\n          val5 >> 0x18;\n  if (val3 != 0) {\n    val3 = 0x18 - LZCOUNT(val3);\n    val2 = val2 >> (val3 & 0xff);\n    val1 = val1 >> (val3 & 0xff);\n  }\n  result = 1;\n  if (val2 <= val1) {\n    result = -(uint)(val2 < val1);\n  }\n  return result;\nLAB_0008258e:\n  val2 = val2 << 0x18 | (val2 >> 8 & 0xff) << 0x10 | (val2 >> 0x10 & 0xff) << 8 | val2 >> 0x18;\n  val1 = val1 << 0x18 | (val1 >> 8 & 0xff) << 0x10 | (val1 >> 0x10 & 0xff) << 8 | val1 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "renaming": {
                "FUN_00082390": "compare_strings_00082390",
                "__s1": "string1",
                "__s2": "string2",
                "puVar1": "ptr1",
                "iVar2": "result",
                "pbVar3": "bytePtr1",
                "pbVar4": "bytePtr2",
                "puVar5": "ptr2",
                "uVar6": "val1",
                "uVar7": "val2",
                "uVar8": "val3",
                "uVar9": "val4",
                "uVar10": "val5"
            },
            "calling": [
                "equals"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825cc": {
            "entrypoint": "0x000825cc",
            "current_name": "copy_string_000825cc",
            "code": "\nchar * copy_string_000825cc(char *destination,char *source)\n\n{\n  char current_char;\n  ushort current_short;\n  uint *ptr_3;\n  uint *ptr_4;\n  uint current_uint;\n  uint current_uint_2;\n  uint *ptr_7;\n  uint *ptr_8;\n  char *new_dest;\n  bool is_end;\n  \n  new_dest = destination;\n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      current_char = *source;\n      *new_dest = current_char;\n      source = source + 1;\n      new_dest = new_dest + 1;\n    } while (current_char != '\\0');\n    return destination;\n  }\n  ptr_8 = (uint *)destination;\n  if (((uint)source & 3) != 0) {\n    ptr_4 = (uint *)source;\n    if (((uint)source & 1) != 0) {\n      ptr_4 = (uint *)(source + 1);\n      current_char = *source;\n      ptr_8 = (uint *)(destination + 1);\n      *destination = current_char;\n      if (current_char == '\\0') {\n        return destination;\n      }\n    }\n    source = (char *)ptr_4;\n    if (((uint)ptr_4 & 2) != 0) {\n      source = (char *)((int)ptr_4 + 2);\n      current_short = *(ushort *)ptr_4;\n      is_end = (current_short & 0xff) == 0;\n      if (is_end) {\n        *(char *)ptr_8 = (char)current_short;\n      }\n      else {\n        *(ushort *)ptr_8 = current_short;\n        is_end = (current_short & 0xff00) == 0;\n        ptr_8 = (uint *)((int)ptr_8 + 2);\n      }\n      if (is_end) {\n        return destination;\n      }\n    }\n  }\n  current_uint = *(uint *)source;\n  ptr_4 = (uint *)((int)source + 4);\n  ptr_7 = ptr_8;\n  if (((uint)source & 4) != 0) {\n    if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) goto LAB_00082630;\n    ptr_7 = ptr_8 + 1;\n    *ptr_8 = current_uint;\n    ptr_4 = (uint *)((int)source + 8);\n    current_uint = *(uint *)((int)source + 4);\n  }\n  while( true ) {\n    ptr_3 = ptr_4 + 1;\n    current_uint_2 = *ptr_4;\n    ptr_8 = ptr_7;\n    if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) break;\n    ptr_8 = ptr_7 + 1;\n    *ptr_7 = current_uint;\n    current_uint = current_uint_2;\n    if ((current_uint_2 + 0xfefefeff & ~current_uint_2 & 0x80808080) != 0) break;\n    ptr_4 = ptr_4 + 2;\n    current_uint = *ptr_3;\n    ptr_7 = ptr_7 + 2;\n    *ptr_8 = current_uint_2;\n  }\nLAB_00082630:\n  do {\n    *(char *)ptr_8 = (char)current_uint;\n    current_uint_2 = current_uint & 0xff;\n    current_uint = current_uint >> 8 | current_uint << 0x18;\n    ptr_8 = (uint *)((int)ptr_8 + 1);\n  } while (current_uint_2 != 0);\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "__dest": "destination",
                "__src": "source",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "ptr_3",
                "puVar4": "ptr_4",
                "uVar5": "current_uint",
                "uVar6": "current_uint_2",
                "puVar7": "ptr_7",
                "puVar8": "ptr_8",
                "pcVar9": "new_dest",
                "bVar10": "is_end"
            },
            "calling": [
                "copy",
                "concat",
                "move"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082688": {
            "entrypoint": "0x00082688",
            "current_name": "count_characters_00082688",
            "code": "\nsize_t count_characters_00082688(char *input_string)\n\n{\n  size_t total_count;\n  uint *aligned_pointer;\n  uint aligned_value;\n  bool is_aligned;\n  \n  aligned_pointer = (uint *)((uint)input_string & 0xfffffffc);\n  total_count = -((uint)input_string & 3);\n  aligned_value = *aligned_pointer;\n  if (((uint)input_string & 3) != 0) {\n    aligned_value = aligned_value | 0xffffffffU >> ((total_count + 4 & 0x1f) << 3);\n  }\n  while (aligned_pointer = aligned_pointer + 1, (aligned_value + 0xfefefeff & ~aligned_value & 0x80808080) == 0) {\n    total_count = total_count + 4;\n    aligned_value = *aligned_pointer;\n  }\n  is_aligned = (aligned_value & 0xff) == 0;\n  if (!is_aligned) {\n    total_count = total_count + 1;\n    is_aligned = (aligned_value & 0xff00) == 0;\n  }\n  if (!is_aligned) {\n    total_count = total_count + 1;\n    is_aligned = (aligned_value & 0xff0000) == 0;\n  }\n  if (!is_aligned) {\n    total_count = total_count + 1;\n  }\n  return total_count;\n}\n\n",
            "renaming": {
                "FUN_00082688": "count_characters_00082688",
                "__s": "input_string",
                "puVar2": "aligned_pointer",
                "uVar3": "aligned_value",
                "bVar4": "is_aligned",
                "sVar1": "total_count"
            },
            "calling": [
                "String",
                "_vfiprintf_r",
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000826e8": {
            "entrypoint": "0x000826e8",
            "current_name": "parse_unsigned_integer_000826e8",
            "code": "\nuint parse_unsigned_integer_000826e8(undefined4 *result,byte *input_string,byte **remaining_string,uint base)\n\n{\n  byte char_classification;\n  byte is_negative;\n  uint parsed_integer;\n  byte *current_char;\n  uint current_value;\n  byte *next_char;\n  int digit_offset;\n  int parse_error;\n  uint max_quotient;\n  uint min_quotient;\n  \n  current_char = input_string;\n  do {\n    next_char = current_char;\n    current_char = next_char + 1;\n    current_value = (uint)*next_char;\n    char_classification = *(byte *)(__ctype_ptr__ + current_value + 1);\n    is_negative = char_classification & 8;\n  } while ((char_classification & 8) != 0);\n  if (current_value == 0x2d) {\n    current_char = next_char + 2;\n    current_value = (uint)next_char[1];\n    is_negative = 1;\n  }\n  else if (current_value == 0x2b) {\n    current_value = (uint)next_char[1];\n    current_char = next_char + 2;\n  }\n  if ((base & 0xffffffef) == 0) {\n    if (current_value == 0x30) {\n      if ((*current_char & 0xdf) == 0x58) {\n        current_value = (uint)current_char[1];\n        base = 0x10;\n        current_char = current_char + 2;\n      }\n      else if (base == 0) {\n        base = 8;\n      }\n    }\n    else if (base == 0) {\n      base = 10;\n    }\n  }\n  if (is_negative == 0) {\n    min_quotient = 0x7fffffff;\n  }\n  else {\n    min_quotient = 0x80000000;\n  }\n  max_quotient = min_quotient / base;\n  parse_error = 0;\n  parsed_integer = 0;\n  do {\n    char_classification = *(byte *)(__ctype_ptr__ + current_value + 1);\n    if ((char_classification & 4) == 0) {\n      if ((char_classification & 3) == 0) break;\n      if ((char_classification & 3) == 1) {\n        digit_offset = 0x37;\n      }\n      else {\n        digit_offset = 0x57;\n      }\n      digit_offset = current_value - digit_offset;\n    }\n    else {\n      digit_offset = current_value - 0x30;\n    }\n    if ((int)base <= digit_offset) break;\n    if (parse_error != -1) {\n      if ((max_quotient <= parsed_integer && parsed_integer != max_quotient) ||\n         ((parsed_integer == max_quotient && ((int)(min_quotient - base * max_quotient) < digit_offset)))) {\n        parse_error = -1;\n      }\n      else {\n        parsed_integer = base * parsed_integer + digit_offset;\n        parse_error = 1;\n      }\n    }\n    current_value = (uint)*current_char;\n    current_char = current_char + 1;\n  } while( true );\n  if (parse_error == -1) {\n    if (is_negative == 0) {\n      parsed_integer = 0x7fffffff;\n    }\n    else {\n      parsed_integer = 0x80000000;\n    }\n    *result = 0x22;\n    if (remaining_string == (byte **)0x0) {\n      return parsed_integer;\n    }\n  }\n  else {\n    if (is_negative != 0) {\n      parsed_integer = -parsed_integer;\n    }\n    if (remaining_string == (byte **)0x0) {\n      return parsed_integer;\n    }\n    if (parse_error == 0) goto LAB_0008278c;\n  }\n  input_string = current_char + -1;\nLAB_0008278c:\n  *remaining_string = input_string;\n  return parsed_integer;\n}\n\n",
            "renaming": {
                "FUN_000826e8": "parse_unsigned_integer_000826e8",
                "param_1": "result",
                "param_2": "input_string",
                "param_3": "remaining_string",
                "param_4": "base",
                "bVar1": "char_classification",
                "bVar2": "is_negative",
                "uVar3": "parsed_integer",
                "pbVar4": "current_char",
                "uVar5": "current_value",
                "pbVar6": "next_char",
                "iVar7": "digit_offset",
                "iVar8": "parse_error",
                "uVar9": "max_quotient",
                "uVar10": "min_quotient"
            },
            "calling": [
                "strtol"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000827fc": {
            "entrypoint": "0x000827fc",
            "current_name": "convert_string_to_long_000827fc",
            "code": "\nlong convertStringToLong_000827fc(char *inputString,char **endPointer,int base)\n\n{\n  long convertedLong;\n  \n  convertedLong = _strtol_r(_impure_ptr,inputString,endPointer,base);\n  return convertedLong;\n}\n\n",
            "renaming": {
                "FUN_000827fc": "convert_string_to_long_000827fc",
                "__nptr": "inputString",
                "__endptr": "endPointer",
                "__base": "base",
                "lVar1": "convertedLong"
            },
            "calling": [
                "atol"
            ],
            "called": [
                "_strtol_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082814": {
            "entrypoint": "0x00082814",
            "current_name": "send_signal_00082814",
            "code": "\nint send_signal_00082814(process_id_t process_id,int signal_number)\n\n{\n  int result;\n  \n  result = _kill_r(impure_pointer,process_id,signal_number);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082814": "send_signal_00082814",
                "__pid": "process_id",
                "__sig": "signal_number",
                "_impure_ptr": "impure_pointer",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "_kill_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082824": {
            "entrypoint": "0x00082824",
            "current_name": "write_to_file_00082824",
            "code": "\nint writeToFile_00082824(undefined4 file,int numElements,int **buffer)\n\n{\n  int *currentBuffer;\n  int result;\n  int *remainingBuffer;\n  uint index;\n  undefined4 *currentElement;\n  uint currentElementSize;\n  uint numFullElements;\n  \n  if (-1 < *(int *)(numElements + 100) << 0x12) {\n    result = __sfvwrite_r();\n    buffer[2] = (int *)0x0;\n    buffer[1] = (int *)0x0;\n    return result;\n  }\n  remainingBuffer = buffer[2];\n  currentBuffer = *buffer;\n  while (remainingBuffer != (int *)0x0) {\n    currentElementSize = currentBuffer[1];\n    numFullElements = currentElementSize >> 2;\n    if (numFullElements != 0) {\n      currentElement = (undefined4 *)(*currentBuffer + -4);\n      index = 0;\n      do {\n        currentElement = currentElement + 1;\n        result = _fputwc_r(file,*currentElement,numElements);\n        index = index + 1;\n        if (result == -1) goto LAB_00082864;\n      } while (numFullElements != index);\n      remainingBuffer = buffer[2];\n    }\n    remainingBuffer = (int *)((int)remainingBuffer - (currentElementSize & 0xfffffffc));\n    buffer[2] = remainingBuffer;\n    currentBuffer = currentBuffer + 2;\n  }\n  result = 0;\nLAB_00082864:\n  buffer[2] = (int *)0x0;\n  buffer[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082824": "write_to_file_00082824",
                "param_1": "file",
                "param_2": "numElements",
                "param_3": "buffer",
                "piVar1": "currentBuffer",
                "iVar2": "result",
                "piVar3": "remainingBuffer",
                "uVar4": "index",
                "puVar5": "currentElement",
                "uVar6": "currentElementSize",
                "uVar7": "numFullElements"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "_fputwc_r",
                "__sfvwrite_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008289c": {
            "entrypoint": "0x0008289c",
            "current_name": "format_string_0008289c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint formatString_0008289c(int buffer,int format,int *******args,int **argptr)\n\n{\n  bool isSigned;\n  bool isPrintf;\n  bool isUnsigned;\n  char signChar;\n  bool isZeroPad;\n  void *ptrVar;\n  int ********intArgs;\n  int *intptr;\n  int result;\n  char charVar;\n  int *******posArg;\n  uint numVal;\n  int **pargPtr;\n  uint flags;\n  uint ch;\n  int argCount;\n  int ********pptr1;\n  int int1;\n  int *******numArg;\n  int *intptr1;\n  int *******ptr2;\n  uint multVal;\n  int *pintptr2;\n  int *******pppppppiVar24;\n  undefined4 modVal;\n  int ********strBuffer;\n  bool isLong;\n  longlong longVar;\n  int *******numPosArgs;\n  int *******numNegArgs;\n  int **argPtrs;\n  int formattedSize;\n  char *formatString_0008289cPtr;\n  char prevChar;\n  undefined formatChar;\n  undefined zeroPadChar;\n  int ********formatBufferPtr;\n  int argIndex;\n  int *******argBufferPtr;\n  undefined formatCharVar;\n  char stackChar1;\n  undefined stackChar2;\n  undefined stackBuffer [4];\n  int *******bufferArray [16];\n  \n  if ((buffer != 0) && (*(int *)(buffer + 0x38) == 0)) {\n    strBufferinit();\n  }\n  flags = (uint)*(ushort *)(format + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(format + 0xc) << 0x12)) {\n    flags = flags | 0x2000;\n    *(short *)(format + 0xc) = (short)flags;\n    *(uint *)(format + 100) = *(uint *)(format + 100) & 0xffffdfff;\n  }\n  if (((int)(flags << 0x1c) < 0) && (*(int *)(format + 0x10) != 0)) {\n    if ((flags & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    result = strBufferwsetup_r(buffer,format);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(format + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(format + 0xe)) {\n    result = strBufferbprintf(buffer,format,args,argptr);\n    return result;\n  }\nLAB_000828ee:\n  formatString_0008289cPtr = (char *)0x0;\n  argBufferPtr = (int *******)0x0;\n  argIndex = 0;\n  formattedSize = 0;\n  intArgs = (int ********)stackBuffer;\n  argPtrs = argptr;\n  formatBufferPtr = (int ********)stackBuffer;\nLAB_00082902:\n  posArg = args;\n  if ((*(char *)args != '\\0') && (*(char *)args != '%')) {\n    do {\n      posArg = (int *******)((int)posArg + 1);\n      if (*(char *)posArg == '\\0') break;\n    } while (*(char *)posArg != '%');\n    ptr2 = (int *******)((int)posArg - (int)args);\n    if (ptr2 != (int *******)0x0) {\n      argIndex = argIndex + 1;\n      argBufferPtr = (int *******)((int)argBufferPtr + (int)ptr2);\n      *intArgs = args;\n      intArgs[1] = ptr2;\n      if (argIndex < 8) {\n        intArgs = intArgs + 2;\n      }\n      else {\n        if (argBufferPtr == (int *******)0x0) {\n          formattedSize = formattedSize + (int)ptr2;\n          argIndex = 0;\n          intArgs = (int ********)stackBuffer;\n          goto LAB_00082952;\n        }\n        result = strBufferprint_r_part_0(buffer,format,&formatBufferPtr);\n        intArgs = (int ********)stackBuffer;\n        if (result != 0) goto LAB_00083142;\n      }\n      formattedSize = formattedSize + (int)ptr2;\n    }\n  }\nLAB_00082952:\n  if (*(char *)posArg != '\\0') {\n    prevChar = '\\0';\n    ch = (uint)*(byte *)((int)posArg + 1);\n    flags = 0;\n    isZeroPad = false;\n    isPrintf = false;\n    isSigned = false;\n    isUnsigned = false;\n    isLong = false;\n    ptr2 = (int *******)0x0;\n    numNegArgs = (int *******)0xffffffff;\n    args = (int *******)((int)posArg + 1);\nLAB_00082976:\n    args = (int *******)((int)args + 1);\nLAB_0008297a:\n    switch(ch) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (ch != 0) {\n        numPosArgs = (int *******)0x1;\n        numNegArgs = (int *******)0x1;\n        strBuffer = (int ********)&formatCharVar;\n        formatCharVar = (char)ch;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      isUnsigned = true;\n      ch = (uint)*(byte *)args;\n      goto LAB_00082976;\n    case 0x2a:\n      ptr2 = (int *******)*argPtrs;\n      argPtrs = argPtrs + 1;\n      if ((int)ptr2 < 0) {\n        ptr2 = (int *******)-(int)ptr2;\n        goto switchD_00082984_caseD_2d;\n      }\n      ch = (uint)*(byte *)args;\n      goto LAB_00082976;\n    case 0x2b:\n      ch = (uint)*(byte *)args;\n      prevChar = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      flags = flags | 4;\n      ch = (uint)*(byte *)args;\n      goto LAB_00082976;\n    case 0x2e:\n      ch = (uint)*(byte *)args;\n      posArg = (int *******)((int)args + 1);\n      if (ch == 0x2a) {\n        ch = (uint)*(byte *)((int)args + 1);\n        numNegArgs = (int *******)*argPtrs;\n        argPtrs = argPtrs + 1;\n        args = posArg;\n        if ((int)numNegArgs < 0) {\n          numNegArgs = (int *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      numVal = ch - 0x30;\n      if (numVal < 10) {\n        multVal = 0;\n        do {\n          args = (int *******)((int)posArg + 1);\n          ch = (uint)*(byte *)posArg;\n          multVal = numVal + multVal * 10;\n          numVal = ch - 0x30;\n          posArg = args;\n        } while (numVal < 10);\n        numNegArgs = (int *******)(multVal | (int)multVal >> 0x1f);\n      }\n      else {\n        numNegArgs = (int *******)0x0;\n        args = posArg;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      flags = flags | 0x80;\n      ch = (uint)*(byte *)args;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      isPrintf = true;\n      if (isSigned == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      argPtrs = (int **)((int)argPtrs + 7U & 0xfffffff8);\n      intptr1 = *argPtrs;\n      pintptr2 = argPtrs[1];\n      argPtrs = argPtrs + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      isPrintf = true;\n      if (isSigned != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      result = (uint)isPrintf << 4;\n      argCount = (uint)isSigned << 5;\n      if ((isPrintf == 0) && (argCount = (uint)isLong << 6, isLong != 0)) {\n        intptr1 = (int *)(uint)*(ushort *)argPtrs;\n        argPtrs = argPtrs + 1;\n        pintptr2 = (int *)0x0;\n      }\n      else {\n        result = argCount;\n        intptr1 = *argPtrs;\n        argPtrs = argPtrs + 1;\n        pintptr2 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      isPrintf = true;\n      if (isSigned != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((isPrintf) || (isLong == false)) {\n        result = 1;\n        intptr1 = *argPtrs;\n        argPtrs = argPtrs + 1;\n        pintptr2 = (int *)0x0;\n      }\n      else {\n        pintptr2 = (int *)0x0;\n        intptr1 = (int *)(uint)*(ushort *)argPtrs;\n        argPtrs = argPtrs + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      formatString_0008289cPtr = \"0123456789ABCDEF\";\n      if (isSigned == false) goto LAB_00082efa;\nLAB_00082d1a:\n      pargPtr = (int **)((int)argPtrs + 7U & 0xfffffff8);\n      argPtrs = pargPtr + 2;\n      intptr1 = *pargPtr;\n      pintptr2 = pargPtr[1];\n      goto LAB_00082d2e;\n    case 99:\n      intptr1 = *argPtrs;\n      argPtrs = argPtrs + 1;\n      numPosArgs = (int *******)0x1;\n      formatCharVar = SUB41(intptr1,0);\n      numNegArgs = (int *******)0x1;\n      strBuffer = (int ********)&formatCharVar;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (isSigned != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((isPrintf == false) && (isLong != false)) {\n        intptr1 = (int *)(int)*(short *)argPtrs;\n        argPtrs = argPtrs + 1;\n        pintptr2 = (int *)((int)intptr1 >> 0x1f);\n      }\n      else {\n        intptr1 = *argPtrs;\n        argPtrs = argPtrs + 1;\n        pintptr2 = (int *)((int)intptr1 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)pintptr2 < 0) {\n        isLong = intptr1 != (int *)0x0;\n        intptr1 = (int *)-(int)intptr1;\n        pintptr2 = (int *)(-(int)pintptr2 - (uint)isLong);\n        prevChar = '-';\n        signChar = '-';\n        result = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)numNegArgs) {\n        flags = flags & 0xffffff7f;\n      }\n      isZeroPad = false;\n      ch = (uint)intptr1 | (uint)pintptr2;\n      result = 1;\n      signChar = prevChar;\n      goto joined_r0x00082adc;\n    case 0x68:\n      isLong = true;\n      ch = (uint)*(byte *)args;\n      goto LAB_00082976;\n    case 0x6c:\n      ch = (uint)*(byte *)args;\n      if (ch == 0x6c) {\n        isSigned = true;\n        ch = (uint)*(byte *)((int)args + 1);\n        args = (int *******)((int)args + 1);\n      }\n      else {\n        isPrintf = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (isSigned == false) {\n        if (isPrintf == false) {\n          if (isLong) {\n            intptr1 = *argPtrs;\n            argPtrs = argPtrs + 1;\n            *(short *)intptr1 = (short)formattedSize;\n          }\n          else {\n            intptr1 = *argPtrs;\n            argPtrs = argPtrs + 1;\n            *intptr1 = formattedSize;\n          }\n        }\n        else {\n          intptr1 = *argPtrs;\n          argPtrs = argPtrs + 1;\n          *intptr1 = formattedSize;\n        }\n      }\n      else {\n        intptr1 = *argPtrs;\n        argPtrs = argPtrs + 1;\n        *intptr1 = formattedSize;\n        intptr1[1] = formattedSize >> 0x1f;\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (isSigned == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      pargPtr = (int **)((int)argPtrs + 7U & 0xfffffff8);\n      argPtrs = pargPtr + 2;\n      intptr1 = *pargPtr;\n      pintptr2 = pargPtr[1];\n      result = 0;\n      break;\n    case 0x70:\n      intptr1 = *argPtrs;\n      argPtrs = argPtrs + 1;\n      zeroPadChar = 0x78;\n      isZeroPad = true;\n      pintptr2 = (int *)0x0;\n      formatChar = 0x30;\n      formatString_0008289cPtr = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      isSigned = true;\n      ch = (uint)*(byte *)args;\n      goto LAB_00082976;\n    case 0x73:\n      strBuffer = (int ********)*argPtrs;\n      prevChar = '\\0';\n      argPtrs = argPtrs + 1;\n      if (strBuffer != (int ********)0x0) {\n        if ((int)numNegArgs < 0) {\n          numNegArgs = (int *******)strlen((char *)strBuffer);\n          posArg = (int *******)0x0;\n          signChar = prevChar;\n        }\n        else {\n          ptrVar = memchr(strBuffer,0,(size_t)numNegArgs);\n          signChar = prevChar;\n          if (ptrVar == (void *)0x0) {\n            posArg = (int *******)0x0;\n          }\n          else {\n            numArg = (int *******)((int)ptrVar - (int)strBuffer);\n            if ((int)numNegArgs <= (int)(int *******)((int)ptrVar - (int)strBuffer)) {\n              numArg = numNegArgs;\n            }\n            posArg = (int *******)0x0;\n            numNegArgs = numArg;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((int *******)0x5 < numNegArgs) {\n        numNegArgs = (int *******)0x6;\n      }\n      numPosArgs = (int *******)((uint)numNegArgs & ~((int)numNegArgs >> 0x1f));\n      strBuffer = (int ********)&UNK_00085728;\nLAB_00082d76:\n      prevChar = '\\0';\n      posArg = (int *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!isSigned) goto LAB_00082ce0;\nLAB_00082bc6:\n      pargPtr = (int **)((int)argPtrs + 7U & 0xfffffff8);\n      argPtrs = pargPtr + 2;\n      intptr1 = *pargPtr;\n      pintptr2 = pargPtr[1];\n      result = 1;\n      break;\n    case 0x78:\n      formatString_0008289cPtr = \"0123456789abcdef\";\n      if (isSigned != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((isPrintf == false) && (isLong != false)) {\n        pintptr2 = (int *)0x0;\n        intptr1 = (int *)(uint)*(ushort *)argPtrs;\n        argPtrs = argPtrs + 1;\n      }\n      else {\n        intptr1 = *argPtrs;\n        argPtrs = argPtrs + 1;\n        pintptr2 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((isUnsigned) && (((uint)intptr1 | (uint)pintptr2) != 0)) {\n        isZeroPad = true;\n        formatChar = 0x30;\n        result = 2;\n        zeroPadChar = (char)ch;\n      }\n      else {\n        result = 2;\n      }\n    }\n    prevChar = '\\0';\n    signChar = '\\0';\nLAB_00082ace:\n    if (-1 < (int)numNegArgs) {\n      flags = flags & 0xffffff7f;\n    }\n    ch = (uint)intptr1 | (uint)pintptr2;\njoined_r0x00082adc:\n    longVar = CONCAT44(pintptr2,intptr1);\n    posArg = numNegArgs;\n    if ((ch == 0) && (numNegArgs == (int *******)0x0)) {\n      strBuffer = (int ********)stackBuffer;\n      if ((result != 0) || (!isUnsigned)) goto LAB_00082b04;\n      strBuffer = (int ********)(&stackChar1 + 1);\n      stackChar2 = '0';\n      goto LAB_00082afe;\n    }\n    if (result == 1) {\n      if (pintptr2 != (int *)0x0 || (int *)0x9 < intptr1) {\n        pptr1 = (int ********)(&stackChar1 + 1);\n        do {\n          strBuffer = pptr1;\n          modVal = (undefined4)((ulonglong)longVar >> 0x20);\n          charVar = '\\n';\n          __aeabi_uldivmod((int)longVar,modVal,10,0);\n          *(char *)strBuffer = charVar + '0';\n          longVar = __aeabi_uldivmod((int)longVar,modVal,10,0);\n          pptr1 = (int ********)((int)strBuffer + -1);\n        } while (longVar != 0);\n        numNegArgs = (int *******)((int)stackBuffer - (int)strBuffer);\n        goto LAB_00082b04;\n      }\n      stackChar2 = (char)intptr1 + '0';\n      strBuffer = (int ********)(&stackChar1 + 1);\n      goto LAB_00083282;\n    }\n    pptr1 = (int ********)(&stackChar1 + 1);\n    if (result != 2) goto LAB_000830e2;\n    do {\n      strBuffer = pptr1;\n      ch = (uint)intptr1 & 0xf;\n      intptr1 = (int *)((uint)intptr1 >> 4 | (int)pintptr2 << 0x1c);\n      pintptr2 = (int *)((uint)pintptr2 >> 4);\n      *(char *)strBuffer = formatString_0008289cPtr[ch];\n      pptr1 = (int ********)((int)strBuffer + -1);\n    } while (((uint)intptr1 | (uint)pintptr2) != 0);\n    numNegArgs = (int *******)((int)stackBuffer - (int)strBuffer);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (argBufferPtr != (int *******)0x0) {\n    strBufferprint_r_part_0(buffer,format,&formatBufferPtr);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(format + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return formattedSize;\nLAB_000830e2:\n  do {\n    strBuffer = pptr1;\n    intptr = (int *)((uint)intptr1 >> 3 | (int)pintptr2 << 0x1d);\n    pintptr2 = (int *)((uint)pintptr2 >> 3);\n    result = ((uint)intptr1 & 7) + 0x30;\n    *(char *)strBuffer = (char)result;\n    pptr1 = (int ********)((int)strBuffer + -1);\n    intptr1 = intptr;\n  } while (((uint)intptr | (uint)pintptr2) != 0);\n  if (isUnsigned) {\n    if (result == 0x30) {\nLAB_00082afe:\n      numNegArgs = (int *******)((int)stackBuffer - (int)strBuffer);\n    }\n    else {\n      *(undefined *)((int)strBuffer + -1) = 0x30;\n      strBuffer = pptr1;\n      numNegArgs = (int *******)((int)stackBuffer - (int)pptr1);\n    }\n  }\n  else {\nLAB_00083282:\n    numNegArgs = (int *******)((int)stackBuffer - (int)strBuffer);\n  }\nLAB_00082b04:\n  numPosArgs = numNegArgs;\n  if ((int)numNegArgs < (int)posArg) {\n    numPosArgs = posArg;\n  }\n  if (signChar != '\\0') {\n    numPosArgs = (int *******)((int)numPosArgs + 1);\n  }\nLAB_00082b1e:\n  if (isZeroPad) {\n    numPosArgs = (int *******)((int)numPosArgs + 2);\n  }\n  if ((flags == 0) &&\n     (numArg = (int *******)((int)ptr2 - (int)numPosArgs), 0 < (int)numArg)) {\n    if ((int)numArg < 0x11) {\n      argIndex = argIndex + 1;\n    }\n    else {\n      do {\n        pppppppiVar24 = numArg;\n        result = argIndex + 1;\n        argBufferPtr = argBufferPtr + 4;\n        *intArgs = (int *******)0x856f0;\n        intArgs[1] = (int *******)0x10;\n        if (result < 8) {\n          argCount = argIndex + 2;\n          intArgs = intArgs + 2;\n          argIndex = result;\n        }\n        else if (argBufferPtr == (int *******)0x0) {\n          argCount = 1;\n          intArgs = (int ********)stackBuffer;\n          argIndex = 0;\n        }\n        else {\n          argIndex = result;\n          result = strBufferprint_r_part_0(buffer,format,&formatBufferPtr);\n          if (result != 0) goto LAB_00083142;\n          argCount = argIndex + 1;\n          intArgs = (int ********)stackBuffer;\n        }\n        numArg = pppppppiVar24 + -4;\n      } while (0x10 < (int)numArg);\n      numArg = pppppppiVar24 + -4;\n      argIndex = argCount;\n    }\n    argBufferPtr = (int *******)((int)argBufferPtr + (int)numArg);\n    *intArgs = (int *******)0x856f0;\n    intArgs[1] = numArg;\n    if (argIndex < 8) {\n      result = argIndex + 1;\n      intArgs = intArgs + 2;\n    }\n    else if (argBufferPtr == (int *******)0x0) {\n      result = 1;\n      argIndex = 0;\n      intArgs = (int ********)stackBuffer;\n    }\n    else {\n      result = strBufferprint_r_part_0(buffer,format,&formatBufferPtr);\n      if (result != 0) goto LAB_00083142;\n      result = argIndex + 1;\n      intArgs = (int ********)stackBuffer;\n    }\n  }\n  else {\n    result = argIndex + 1;\n  }\n  argCount = result;\n  if (prevChar != '\\0') {\n    argBufferPtr = (int *******)((int)argBufferPtr + 1);\n    argCount = 1;\n    *intArgs = (int *******)&prevChar;\n    intArgs[1] = (int *******)0x1;\n    argIndex = result;\n    if (result < 8) {\n      argCount = result + 1;\n      intArgs = intArgs + 2;\n    }\n    else if (argBufferPtr == (int *******)0x0) {\n      argIndex = 0;\n      intArgs = (int ********)stackBuffer;\n    }\n    else {\n      result = strBufferprint_r_part_0(buffer,format,&formatBufferPtr);\n      if (result != 0) goto LAB_00083142;\n      argCount = argIndex + 1;\n      intArgs = (int ********)stackBuffer;\n    }\n  }\n  result = argCount;\n  int1 = argIndex;\n  if (isZeroPad) {\n    argBufferPtr = (int *******)((int)argBufferPtr + 2);\n    *intArgs = (int *******)&formatChar;\n    intArgs[1] = (int *******)0x2;\n    if (argCount < 8) {\n      result = argCount + 1;\n      int1 = argCount;\n      intArgs = intArgs + 2;\n    }\n    else if (argBufferPtr == (int *******)0x0) {\n      result = 1;\n      int1 = 0;\n      intArgs = (int ********)stackBuffer;\n    }\n    else {\n      argIndex = argCount;\n      result = strBufferprint_r_part_0(buffer,format,&formatBufferPtr);\n      if (result != 0) goto LAB_00083142;\n      result = argIndex + 1;\n      int1 = argIndex;\n      intArgs = (int ********)stackBuffer;\n    }\n  }\n  argIndex = int1;\n  if ((flags == 0x80) &&\n     (numArg = (int *******)((int)ptr2 - (int)numPosArgs), 0 < (int)numArg)) {\n    if (0x10 < (int)numArg) {\n      do {\n        while( true ) {\n          pppppppiVar24 = numArg;\n          argIndex = int1 + 1;\n          argBufferPtr = argBufferPtr + 4;\n          *intArgs = (int *******)\"0000000000000000\";\n          intArgs[1] = (int *******)0x10;\n          if (7 < argIndex) break;\n          result = int1 + 2;\n          intArgs = intArgs + 2;\nLAB_000831f2:\n          int1 = argIndex;\n          numArg = pppppppiVar24 + -4;\n          if ((int)(pppppppiVar24 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (argBufferPtr != (int *******)0x0) {\n          result = strBufferprint_r_part_0(buffer,format,&formatBufferPtr);\n          if (result == 0) {\n            result = argIndex + 1;\n            intArgs = (int ********)stackBuffer;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        int1 = 0;\n        numArg = pppppppiVar24 + -4;\n        intArgs = (int ********)stackBuffer;\n      } while (0x10 < (int)(pppppppiVar24 + -4));\nLAB_00083218:\n      numArg = pppppppiVar24 + -4;\n    }\n    argBufferPtr = (int *******)((int)argBufferPtr + (int)numArg);\n    *intArgs = (int *******)\"0000000000000000\";\n    intArgs[1] = numArg;\n    argIndex = result;\n    if (result < 8) {\n      result = result + 1;\n      intArgs = intArgs + 2;\n    }\n    else if (argBufferPtr == (int *******)0x0) {\n      result = 1;\n      argIndex = 0;\n      intArgs = (int ********)stackBuffer;\n    }\n    else {\n      result = strBufferprint_r_part_0(buffer,format,&formatBufferPtr);\n      if (result != 0) goto LAB_00083142;\n      result = argIndex + 1;\n      intArgs = (int ********)stackBuffer;\n    }\n  }\n  posArg = (int *******)((int)posArg - (int)numNegArgs);\n  pptr1 = (int ********)stackBuffer;\n  if ((int)posArg < 1) {\nLAB_0008302a:\n    argBufferPtr = (int *******)((int)argBufferPtr + (int)numNegArgs);\n    *intArgs = (int *******)strBuffer;\n    intArgs[1] = numNegArgs;\n    numNegArgs = argBufferPtr;\n    argIndex = result;\n    if (result < 8) goto LAB_000831be;\n    if (argBufferPtr == (int *******)0x0) {\n      argIndex = 0;\n    }\n    else {\n      result = strBufferprint_r_part_0(buffer,format,&formatBufferPtr);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  else {\n    argCount = argIndex;\n    if (0x10 < (int)posArg) {\n      do {\n        while( true ) {\n          numArg = posArg;\n          argIndex = argCount + 1;\n          argBufferPtr = argBufferPtr + 4;\n          *intArgs = (int *******)\"0000000000000000\";\n          intArgs[1] = (int *******)0x10;\n          if (7 < argIndex) break;\n          result = argCount + 2;\n          intArgs = intArgs + 2;\nLAB_00082fe6:\n          argCount = argIndex;\n          posArg = numArg + -4;\n          if ((int)(numArg + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (argBufferPtr != (int *******)0x0) {\n          result = strBufferprint_r_part_0(buffer,format,&formatBufferPtr);\n          if (result == 0) {\n            result = argIndex + 1;\n            intArgs = (int ********)stackBuffer;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        intArgs = (int ********)stackBuffer;\n        argCount = 0;\n        posArg = numArg + -4;\n      } while (0x10 < (int)(numArg + -4));\nLAB_0008300e:\n      posArg = numArg + -4;\n    }\n    argBufferPtr = (int *******)((int)argBufferPtr + (int)posArg);\n    *intArgs = (int *******)\"0000000000000000\";\n    intArgs[1] = posArg;\n    if (result < 8) {\n      result = result + 1;\n      intArgs = intArgs + 2;\n      goto LAB_0008302a;\n    }\n    if (argBufferPtr != (int *******)0x0) {\n      argIndex = result;\n      result = strBufferprint_r_part_0(buffer,format,&formatBufferPtr);\n      if (result != 0) goto LAB_00083142;\n      result = argIndex + 1;\n      intArgs = (int ********)stackBuffer;\n      goto LAB_0008302a;\n    }\n    bufferArray[0] = numNegArgs;\n    argIndex = 1;\n    intArgs = (int ********)stackBuffer;\n    stackBuffer = (undefined  [4])strBuffer;\nLAB_000831be:\n    pptr1 = intArgs + 2;\n    argBufferPtr = numNegArgs;\n  }\n  if (((flags & 4) != 0) &&\n     (posArg = (int *******)((int)ptr2 - (int)numPosArgs), 0 < (int)posArg)) {\n    result = argIndex;\n    if ((int)posArg < 0x11) {\n      argCount = argIndex + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          argIndex = result + 1;\n          argBufferPtr = argBufferPtr + 4;\n          *pptr1 = (int *******)0x856f0;\n          pptr1[1] = (int *******)0x10;\n          if (7 < argIndex) break;\n          argCount = result + 2;\n          pptr1 = pptr1 + 2;\nLAB_0008307a:\n          posArg = posArg + -4;\n          result = argIndex;\n          if ((int)posArg < 0x11) goto LAB_000830a2;\n        }\n        if (argBufferPtr != (int *******)0x0) {\n          result = strBufferprint_r_part_0(buffer,format,&formatBufferPtr);\n          if (result == 0) {\n            argCount = argIndex + 1;\n            pptr1 = (int ********)stackBuffer;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        posArg = posArg + -4;\n        argCount = 1;\n        result = 0;\n        pptr1 = (int ********)stackBuffer;\n      } while (0x10 < (int)posArg);\n    }\nLAB_000830a2:\n    argBufferPtr = (int *******)((int)argBufferPtr + (int)posArg);\n    *pptr1 = (int *******)0x856f0;\n    pptr1[1] = posArg;\n    argIndex = argCount;\n    if (7 < argCount) {\n      if (argBufferPtr == (int *******)0x0) {\n        if ((int)numPosArgs < (int)ptr2) {\n          numPosArgs = ptr2;\n        }\n        formattedSize = formattedSize + (int)numPosArgs;\n        goto LAB_00083186;\n      }\n      result = strBufferprint_r_part_0(buffer,format,&formatBufferPtr);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)numPosArgs < (int)ptr2) {\n    numPosArgs = ptr2;\n  }\n  formattedSize = formattedSize + (int)numPosArgs;\n  if ((argBufferPtr != (int *******)0x0) &&\n     (result = strBufferprint_r_part_0(buffer,format,&formatBufferPtr), result != 0)) goto LAB_00083142;\nLAB_00083186:\n  argIndex = 0;\n  intArgs = (int ********)stackBuffer;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  numVal = ch - 0x30;\n  ptr2 = (int *******)0x0;\n  posArg = args;\n  do {\n    args = (int *******)((int)posArg + 1);\n    ch = (uint)*(byte *)posArg;\n    ptr2 = (int *******)(numVal + (int)ptr2 * 10);\n    numVal = ch - 0x30;\n    posArg = args;\n  } while (numVal < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  ch = (uint)*(byte *)args;\n  if (prevChar == '\\0') {\n    prevChar = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "renaming": {
                "FUN_0008289c": "format_string_0008289c",
                "param_1": "buffer",
                "param_2": "format",
                "param_3": "args",
                "param_4": "argptr",
                "bVar1": "isSigned",
                "bVar2": "isPrintf",
                "bVar3": "isUnsigned",
                "cVar4": "signChar",
                "bVar5": "isZeroPad",
                "pvVar6": "ptrVar",
                "ppppppppiVar7": "intArgs",
                "piVar8": "intptr",
                "iVar9": "result",
                "cVar10": "charVar",
                "pppppppiVar11": "posArg",
                "uVar12": "numVal",
                "piVar13": "argPtr",
                "uVar14": "flags",
                "uVar15": "ch",
                "uVar22": "multVal",
                "iVar16": "argCount",
                "pppppppiVar17": "ptr1",
                "iVar18": "int1",
                "pppppppiVar19": "numArg",
                "piVar20": "intptr1",
                "iVar23": "intptr2",
                "pppppppiVar21": "ptr2",
                "uVar25": "modVal",
                "__s": "strBuffer",
                "bVar26": "isLong",
                "lVar27": "longVar",
                "local_dc": "numPosArgs",
                "local_d4": "numNegArgs",
                "local_c8": "argPtrs",
                "local_c4": "formattedSize",
                "local_c0": "formatStringPtr",
                "local_a1": "prevChar",
                "local_a0": "formatChar",
                "local_9f": "zeroPadChar",
                "local_9c": "formatBufferPtr",
                "local_98": "argIndex",
                "local_94": "argBufferPtr",
                "local_90": "formatCharVar",
                "cStack_6a": "stackChar1",
                "local_69": "stackChar2",
                "local_68": "stackBuffer",
                "local_64": "bufferArray"
            },
            "calling": [
                "__sbprintf",
                "iprintf",
                "fiprintf"
            ],
            "called": [
                "__sprint_r.part.0",
                "memchr",
                "__sbprintf",
                "__sinit",
                "__swsetup_r",
                "strlen",
                "__aeabi_uldivmod"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000834f0": {
            "entrypoint": "0x000834f0",
            "current_name": "print_formatted_output_000834f0",
            "code": "\nint printFormattedOutput_000834f0(undefined4 param1,int param2)\n\n{\n  int result;\n  int flushResult;\n  undefined *localBuffers [2];\n  undefined4 bufferSize1;\n  ushort ushortValue;\n  undefined2 ushortValue2;\n  undefined *bufferPtr;\n  undefined4 bufferSize2;\n  undefined4 zeroValue;\n  undefined4 someValue;\n  undefined4 someOtherValue;\n  undefined4 valueFromParam2;\n  undefined additionalBuffer [1024];\n  \n  valueFromParam2 = *(undefined4 *)(param2 + 100);\n  someValue = *(undefined4 *)(param2 + 0x1c);\n  ushortValue2 = *(undefined2 *)(param2 + 0xe);\n  someOtherValue = *(undefined4 *)(param2 + 0x24);\n  localBuffers[0] = additionalBuffer;\n  ushortValue = *(ushort *)(param2 + 0xc) & 0xfffd;\n  bufferSize1 = 0x400;\n  bufferSize2 = 0x400;\n  zeroValue = 0;\n  bufferPtr = localBuffers[0];\n  result = _vfiprintf_r(param1,localBuffers);\n  if ((-1 < result) && (flushResult = _fflush_r(param1,localBuffers), flushResult != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)ushortValue << 0x19) < 0) {\n    *(ushort *)(param2 + 0xc) = *(ushort *)(param2 + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000834f0": "print_formatted_output_000834f0",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "iVar2": "flushResult",
                "local_488": "localBuffers",
                "local_480": "bufferSize1",
                "local_47c": "ushortValue",
                "local_47a": "ushortValue2",
                "local_478": "bufferPtr",
                "local_474": "bufferSize2",
                "local_470": "zeroValue",
                "local_46c": "someValue",
                "local_464": "someOtherValue",
                "local_424": "valueFromParam2",
                "auStack_420": "additionalBuffer"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "_vfiprintf_r",
                "_fflush_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008356c": {
            "entrypoint": "0x0008356c",
            "current_name": "initialize_file_stream_0008356c",
            "code": "\nundefined4 initializeFileStream_0008356c(undefined4 *streamPtr,int *fileBufferPtr)\n\n{\n  int bufferSize;\n  int fileSize;\n  uint flags;\n  ushort fileStatus;\n  \n  if ((_impure_ptr != 0) && (*(int *)(_impure_ptr + 0x38) == 0)) {\n    __sinit();\n  }\n  fileStatus = *(ushort *)(fileBufferPtr + 3);\n  flags = (uint)fileStatus;\n  if ((int)(flags << 0x1c) < 0) {\n    fileSize = fileBufferPtr[4];\n  }\n  else {\n    if (-1 < (int)(flags << 0x1b)) {\n      *streamPtr = 9;\n      *(ushort *)(fileBufferPtr + 3) = fileStatus | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(flags << 0x1d) < 0) {\n      if ((int *)fileBufferPtr[0xc] != (int *)0x0) {\n        if ((int *)fileBufferPtr[0xc] != fileBufferPtr + 0x10) {\n          _free_r(streamPtr);\n          fileStatus = *(ushort *)(fileBufferPtr + 3);\n        }\n        fileBufferPtr[0xc] = 0;\n      }\n      fileSize = fileBufferPtr[4];\n      fileStatus = fileStatus & 0xffdb;\n      *fileBufferPtr = fileSize;\n      fileBufferPtr[1] = 0;\n    }\n    else {\n      fileSize = fileBufferPtr[4];\n    }\n    *(ushort *)(fileBufferPtr + 3) = fileStatus | 8;\n    flags = (uint)(fileStatus | 8);\n  }\n  if ((fileSize == 0) && ((flags & 0x280) != 0x200)) {\n    __smakebuf_r(streamPtr,fileBufferPtr);\n    flags = (uint)*(ushort *)(fileBufferPtr + 3);\n    fileSize = fileBufferPtr[4];\n  }\n  if ((flags & 1) == 0) {\n    bufferSize = 0;\n    if (-1 < (int)(flags << 0x1e)) {\n      bufferSize = fileBufferPtr[5];\n    }\n    fileBufferPtr[2] = bufferSize;\n  }\n  else {\n    fileBufferPtr[6] = -fileBufferPtr[5];\n    fileBufferPtr[2] = 0;\n  }\n  if ((fileSize == 0) && ((int)((uint)*(ushort *)(fileBufferPtr + 3) << 0x18) < 0)) {\n    *(ushort *)(fileBufferPtr + 3) = *(ushort *)(fileBufferPtr + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0008356c": "initialize_file_stream_0008356c",
                "param_1": "streamPtr",
                "param_2": "fileBufferPtr",
                "iVar1": "bufferSize",
                "iVar2": "fileSize",
                "uVar3": "flags",
                "uVar4": "fileStatus"
            },
            "calling": [
                "_vfiprintf_r",
                "__sfvwrite_r",
                "__swbuf_r"
            ],
            "called": [
                "__smakebuf_r",
                "__sinit",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083630": {
            "entrypoint": "0x00083630",
            "current_name": "update_data_00083630",
            "code": "\nundefined4 updateData_00083630(int type,undefined4 data,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 *dataBuffer;\n  uint index;\n  uint bitMask;\n  \n  if (DAT_20070180 == (undefined4 *)0x0) {\n    DAT_20070180 = (undefined4 *)&DAT_20070184;\n  }\n  index = DAT_20070180[1];\n  dataBuffer = DAT_20070180;\n  if (0x1f < (int)index) {\n    dataBuffer = (undefined4 *)malloc(400);\n    if (dataBuffer == (undefined4 *)0x0) {\n      return 0xffffffff;\n    }\n    *dataBuffer = DAT_20070180;\n    dataBuffer[1] = 0;\n    index = 0;\n    DAT_20070180 = dataBuffer;\n    dataBuffer[0x62] = 0;\n    dataBuffer[99] = 0;\n  }\n  if (type != 0) {\n    bitMask = 1 << (index & 0xff);\n    dataBuffer[index + 0x22] = value1;\n    dataBuffer[0x62] = dataBuffer[0x62] | bitMask;\n    dataBuffer[index + 0x42] = value2;\n    if (type == 2) {\n      dataBuffer[99] = bitMask | dataBuffer[99];\n    }\n  }\n  dataBuffer[1] = index + 1;\n  dataBuffer[index + 2] = data;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083630": "update_data_00083630",
                "param_1": "type",
                "param_2": "data",
                "param_3": "value1",
                "param_4": "value2",
                "puVar1": "dataBuffer",
                "uVar2": "index",
                "uVar3": "bitMask"
            },
            "calling": [
                "atexit",
                "__cxa_atexit"
            ],
            "called": [
                "malloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000836d8": {
            "entrypoint": "0x000836d8",
            "current_name": "FUNC_000836d8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000836dc) */\n\nvoid FUNC_000836d8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836d8": "FUNC_000836d8"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "atexit"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000836ec": {
            "entrypoint": "0x000836ec",
            "current_name": "raise_and_exit_000836ec",
            "code": "\n\n\nvoid raise_and_exit_000836ec(void)\n\n{\n  raise(6);\n                    \n  _exit(1);\n}\n\n",
            "renaming": {
                "FUN_000836ec": "raise_and_exit_000836ec"
            },
            "calling": [
                "__assert_func"
            ],
            "called": [
                "_exit",
                "raise"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000836fc": {
            "entrypoint": "0x000836fc",
            "current_name": "register_exit_procedure_000836fc",
            "code": "\nint registerExitProcedure_000836fc(functionPointer *functionPointer)\n\n{\n  int returnValue;\n  \n  returnValue = __register_exitproc(0,functionPointer,0,0);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000836fc": "register_exit_procedure_000836fc",
                "__func": "functionPointer",
                "iVar1": "returnValue"
            },
            "calling": [
                "register_fini"
            ],
            "called": [
                "__register_exitproc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083708": {
            "entrypoint": "0x00083708",
            "current_name": "reverse_and_improve_binary_00083708",
            "code": "\nundefined4 reverse_and_improve_binary_00083708(int *input_array,int *output_array)\n\n{\n  int *temp_ptr;\n  int counter;\n  ushort flag;\n  uint flag2;\n  int temp_var;\n  code *callback_func;\n  int temp_var2;\n  \n  flag = *(ushort *)(output_array + 3);\n  if ((int)((uint)flag << 0x1c) < 0) {\n    temp_var2 = output_array[4];\n    if (temp_var2 == 0) {\n      return 0;\n    }\n    counter = *output_array;\n    if ((flag & 3) == 0) {\n      temp_var = output_array[5];\n    }\n    else {\n      temp_var = 0;\n    }\n    *output_array = temp_var2;\n    counter = counter - temp_var2;\n    output_array[2] = temp_var;\n    do {\n      if (counter < 1) {\n        return 0;\n      }\n      temp_var = (*(code *)output_array[9])(input_array,output_array[7],temp_var2,counter);\n      counter = counter - temp_var;\n      temp_var2 = temp_var2 + temp_var;\n    } while (0 < temp_var);\nLAB_000837c8:\n    *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(output_array + 3) = flag | 0x800;\n  if ((output_array[1] < 1) && (output_array[0xf] < 1)) {\n    return 0;\n  }\n  callback_func = (code *)output_array[10];\n  if (callback_func == (code *)0x0) {\n    return 0;\n  }\n  flag2 = (uint)(flag | 0x800);\n  temp_var2 = *input_array;\n  *input_array = 0;\n  if ((flag & 0x1000) == 0) {\n    counter = (*callback_func)(input_array,output_array[7],flag2 & 0x1000,1);\n    if ((counter == -1) && (temp_var = *input_array, temp_var != 0)) {\n      if ((temp_var == 0x1d) || (temp_var == 0x16)) {\n        *input_array = temp_var2;\n        return 0;\n      }\n      goto LAB_000837c8;\n    }\n    flag2 = (uint)*(ushort *)(output_array + 3);\n    callback_func = (code *)output_array[10];\n  }\n  else {\n    counter = output_array[0x14];\n  }\n  if (((int)(flag2 << 0x1d) < 0) && (counter = counter - output_array[1], output_array[0xc] != 0)) {\n    counter = counter - output_array[0xf];\n  }\n  counter = (*callback_func)(input_array,output_array[7],counter,0);\n  if (counter == -1) {\n    temp_var = *input_array;\n    if (temp_var != 0) {\n      if ((temp_var != 0x1d) && (temp_var != 0x16)) {\n        *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) & 0xf7ff;\n      *output_array = output_array[4];\n      output_array[1] = 0;\n      goto LAB_00083774;\n    }\n    flag = *(ushort *)(output_array + 3) & 0xf7ff;\n    output_array[1] = 0;\n    *(ushort *)(output_array + 3) = flag;\n    *output_array = output_array[4];\n  }\n  else {\n    flag = *(ushort *)(output_array + 3) & 0xf7ff;\n    *output_array = output_array[4];\n    *(ushort *)(output_array + 3) = flag;\n    output_array[1] = 0;\n  }\n  if ((int)((uint)flag << 0x13) < 0) {\n    output_array[0x14] = counter;\n  }\nLAB_00083774:\n  temp_ptr = (int *)output_array[0xc];\n  *input_array = temp_var2;\n  if (temp_ptr == (int *)0x0) {\n    return 0;\n  }\n  if (temp_ptr != output_array + 0x10) {\n    _free_r(input_array);\n  }\n  output_array[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083708": "reverse_and_improve_binary_00083708",
                "param_1": "input_array",
                "param_2": "output_array",
                "piVar1": "temp_ptr",
                "iVar2": "counter",
                "uVar3": "flag",
                "uVar4": "flag2",
                "iVar5": "temp_var",
                "pcVar6": "callback_func",
                "iVar7": "temp_var2"
            },
            "calling": [
                "_fflush_r"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083850": {
            "entrypoint": "0x00083850",
            "current_name": "initialize_if_needed_00083850",
            "code": "\nvoid initializeIfNeeded_00083850(int objectAddress,int dataAddress)\n\n{\n  if ((objectAddress != 0) && (*(int *)(objectAddress + 0x38) == 0)) {\n    __sinit();\n  }\n  if (*(short *)(dataAddress + 0xc) == 0) {\n    return;\n  }\n  __sflush_r(objectAddress);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083850": "initialize_if_needed_00083850",
                "param_1": "objectAddress",
                "param_2": "dataAddress"
            },
            "calling": [
                "__sbprintf",
                "__sfvwrite_r",
                "__swbuf_r",
                "_fclose_r"
            ],
            "called": [
                "__sflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008387c": {
            "entrypoint": "0x0008387c",
            "current_name": "initialize_file_walk_0008387c",
            "code": "\nvoid initializeFileWalk_0008387c(undefined4 fileArray)\n\n{\n  fileWalk(fileArray,0x84485);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008387c": "initialize_file_walk_0008387c",
                "param_1": "fileArray",
                "_fwalk": "fileWalk"
            },
            "calling": [],
            "called": [
                "_fwalk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083888": {
            "entrypoint": "0x00083888",
            "current_name": "initialize_data_structure_00083888",
            "code": "\nvoid initializeDataStructure_00083888(int dataStructure)\n\n{\n  undefined4 *dataArray;\n  undefined4 *secondaryArray;\n  \n  if (*(int *)(dataStructure + 0x38) == 0) {\n    dataArray = *(undefined4 **)(dataStructure + 4);\n    *(undefined4 *)(dataStructure + 0x3c) = 0x8387d;\n    *(undefined4 *)(dataStructure + 0x2e4) = 3;\n    *(int *)(dataStructure + 0x2e8) = dataStructure + 0x2ec;\n    *(undefined4 *)(dataStructure + 0x2e0) = 0;\n    *(undefined2 *)(dataArray + 3) = 4;\n    *dataArray = 0;\n    dataArray[1] = 0;\n    dataArray[2] = 0;\n    dataArray[0x19] = 0;\n    *(undefined2 *)((int)dataArray + 0xe) = 0;\n    dataArray[4] = 0;\n    dataArray[5] = 0;\n    dataArray[6] = 0;\n    memset(dataArray + 0x17,0,8);\n    secondaryArray = *(undefined4 **)(dataStructure + 8);\n    dataArray[7] = dataArray;\n    dataArray[8] = 0x84221;\n    dataArray[9] = 0x84245;\n    dataArray[10] = 0x8427d;\n    dataArray[0xb] = 0x8429d;\n    *(undefined2 *)((int)secondaryArray + 0xe) = 1;\n    *(undefined2 *)(secondaryArray + 3) = 9;\n    *secondaryArray = 0;\n    secondaryArray[1] = 0;\n    secondaryArray[2] = 0;\n    secondaryArray[0x19] = 0;\n    secondaryArray[4] = 0;\n    secondaryArray[5] = 0;\n    secondaryArray[6] = 0;\n    memset(secondaryArray + 0x17,0,8);\n    dataArray = *(undefined4 **)(dataStructure + 0xc);\n    secondaryArray[7] = secondaryArray;\n    secondaryArray[8] = 0x84221;\n    secondaryArray[9] = 0x84245;\n    secondaryArray[10] = 0x8427d;\n    secondaryArray[0xb] = 0x8429d;\n    *(undefined2 *)(dataArray + 3) = 0x12;\n    *(undefined2 *)((int)dataArray + 0xe) = 2;\n    *dataArray = 0;\n    dataArray[1] = 0;\n    dataArray[2] = 0;\n    dataArray[0x19] = 0;\n    dataArray[4] = 0;\n    dataArray[5] = 0;\n    dataArray[6] = 0;\n    memset(dataArray + 0x17,0,8);\n    dataArray[7] = dataArray;\n    dataArray[8] = 0x84221;\n    dataArray[9] = 0x84245;\n    dataArray[10] = 0x8427d;\n    dataArray[0xb] = 0x8429d;\n    *(undefined4 *)(dataStructure + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083888": "initialize_data_structure_00083888",
                "param_1": "dataStructure",
                "puVar1": "dataArray",
                "puVar2": "secondaryArray"
            },
            "calling": [
                "_vfiprintf_r",
                "__swsetup_r",
                "_fflush_r",
                "__swbuf_r",
                "_fclose_r"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008397c": {
            "entrypoint": "0x0008397c",
            "current_name": "FUNC_0008397c",
            "code": "\nvoid FUNC_0008397c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008397c": "FUNC_0008397c"
            },
            "calling": [
                "_fclose_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083980": {
            "entrypoint": "0x00083980",
            "current_name": "FUNC_00083980",
            "code": "\nvoid FUNC_00083980(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083980": "FUNC_00083980"
            },
            "calling": [
                "_fclose_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083984": {
            "entrypoint": "0x00083984",
            "current_name": "execute_destructors_00083984",
            "code": "\nvoid execute_destructors_00083984(void)\n\n{\n  int iterator;\n  code **destructor_ptr;\n  \n  iterator = 1;\n  destructor_ptr = (code **)&end_of_destructor_array;\n  do {\n    iterator = iterator + -1;\n    destructor_ptr = destructor_ptr + -1;\n    (**destructor_ptr)();\n  } while (iterator != 0);\n  _fini();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083984": "execute_destructors_00083984",
                "iVar1": "iterator",
                "ppcVar2": "destructor_ptr",
                "__fini_array_end": "end_of_destructor_array"
            },
            "calling": [],
            "called": [
                "__do_global_dtors_aux",
                "_fini"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000839b4": {
            "entrypoint": "0x000839b4",
            "current_name": "convert_and_print_string_000839b4",
            "code": "\nuint convertAndPrintString_000839b4(undefined4 locale,uint length,byte **buffer)\n\n{\n  int maxBytes;\n  uint result;\n  uint convertedChar;\n  byte *bufferPointer;\n  uint index;\n  byte localChar;\n  byte stackArray [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x12)) {\n    *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x2000;\n    buffer[0x19] = (byte *)((uint)buffer[0x19] | 0x2000);\n  }\n  maxBytes = __locale_mb_cur_max();\n  if ((maxBytes == 1) && (length - 1 < 0xff)) {\n    convertedChar = length & 0xff;\n    localChar = (byte)convertedChar;\n    result = 1;\n  }\n  else {\n    result = _wcrtomb_r(locale,&localChar,length,buffer + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return length;\n    }\n    convertedChar = (uint)localChar;\n  }\n  index = 0;\n  do {\n    bufferPointer = buffer[2] + -1;\n    buffer[2] = bufferPointer;\n    if ((int)bufferPointer < 0) {\n      if ((int)buffer[6] <= (int)bufferPointer) {\n        **buffer = (byte)convertedChar;\n        bufferPointer = *buffer;\n        convertedChar = (uint)*bufferPointer;\n        if (convertedChar != 10) goto LAB_00083a04;\n      }\n      maxBytes = __swbuf_r(locale,convertedChar,buffer);\n      if (maxBytes == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **buffer = (byte)convertedChar;\n      bufferPointer = *buffer;\nLAB_00083a04:\n      *buffer = bufferPointer + 1;\n    }\n    if (result <= index + 1) {\n      return length;\n    }\n    convertedChar = (uint)stackArray[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000839b4": "convert_and_print_string_000839b4",
                "param_1": "locale",
                "param_2": "length",
                "param_3": "buffer",
                "iVar1": "maxBytes",
                "uVar2": "result",
                "uVar3": "convertedChar",
                "pbVar4": "bufferPointer",
                "uVar5": "index",
                "local_1c": "localChar",
                "abStack_1b": "stackArray"
            },
            "calling": [
                "__sprint_r.part.0"
            ],
            "called": [
                "_wcrtomb_r",
                "__locale_mb_cur_max",
                "__swbuf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083a74": {
            "entrypoint": "0x00083a74",
            "current_name": "resize_memory_block_00083a74",
            "code": "\nundefined4 resizeMemoryBlock_00083a74(undefined4 lock,int size)\n\n{\n  int result;\n  uint headerSize;\n  int requestedSize;\n  \n  __malloc_lock();\n  headerSize = *(uint *)(DAT_2007046c + 4) & 0xfffffffc;\n  requestedSize = ((headerSize - size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < requestedSize) {\n    result = _sbrk_r(lock,0);\n    if (result == DAT_2007046c + headerSize) {\n      result = _sbrk_r(lock,-requestedSize);\n      if (result != -1) {\n        __malloc_current_mallinfo = __malloc_current_mallinfo - requestedSize;\n        *(uint *)(DAT_2007046c + 4) = headerSize - requestedSize | 1;\n        __malloc_unlock(lock);\n        return 1;\n      }\n      requestedSize = _sbrk_r(lock,0);\n      if (0xf < requestedSize - DAT_2007046c) {\n        __malloc_current_mallinfo = requestedSize - __malloc_sbrk_base;\n        *(uint *)(DAT_2007046c + 4) = requestedSize - DAT_2007046c | 1;\n      }\n    }\n  }\n  __malloc_unlock(lock);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083a74": "resize_memory_block_00083a74",
                "param_1": "lock",
                "param_2": "size",
                "iVar1": "result",
                "uVar2": "headerSize",
                "iVar3": "requestedSize"
            },
            "calling": [
                "_free_r"
            ],
            "called": [
                "__malloc_unlock",
                "_sbrk_r",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b10": {
            "entrypoint": "0x00083b10",
            "current_name": "deallocate_memory_block_00083b10",
            "code": "\nvoid deallocateMemoryBlock_00083b10(undefined4 param,int memoryBlock)\n\n{\n  undefined4 *pointer;\n  bool isHead;\n  uint blockSize;\n  int prevSize;\n  int nextSize;\n  undefined1 *currentBlock;\n  uint combinedSize;\n  undefined1 *previousBlock;\n  int blockAddress;\n  uint trimmedSize;\n  \n  if (memoryBlock == 0) {\n    return;\n  }\n  __malloc_lock();\n  blockSize = *(uint *)(memoryBlock + -4);\n  blockAddress = memoryBlock + -8;\n  combinedSize = blockSize & 0xfffffffe;\n  nextSize = blockAddress + combinedSize;\n  trimmedSize = *(uint *)(nextSize + 4) & 0xfffffffc;\n  if (DAT_2007046c == nextSize) {\n    trimmedSize = trimmedSize + combinedSize;\n    if (-1 < (int)(blockSize << 0x1f)) {\n      blockAddress = blockAddress - *(int *)(memoryBlock + -8);\n      prevSize = *(int *)(blockAddress + 0xc);\n      nextSize = *(int *)(blockAddress + 8);\n      trimmedSize = trimmedSize + *(int *)(memoryBlock + -8);\n      *(int *)(nextSize + 0xc) = prevSize;\n      *(int *)(prevSize + 8) = nextSize;\n    }\n    blockSize = __malloc_trim_threshold;\n    *(uint *)(blockAddress + 4) = trimmedSize | 1;\n    DAT_2007046c = blockAddress;\n    if (blockSize <= trimmedSize) {\n      _malloc_trim_r(param,__malloc_top_pad);\n    }\n  }\n  else {\n    *(uint *)(nextSize + 4) = trimmedSize;\n    if ((blockSize & 1) == 0) {\n      blockAddress = blockAddress - *(int *)(memoryBlock + -8);\n      pointer = *(undefined4 **)(blockAddress + 8);\n      combinedSize = combinedSize + *(int *)(memoryBlock + -8);\n      if (pointer == &DAT_2007046c) {\n        isHead = true;\n      }\n      else {\n        prevSize = *(int *)(blockAddress + 0xc);\n        pointer[3] = prevSize;\n        *(undefined4 **)(prevSize + 8) = pointer;\n        isHead = false;\n      }\n    }\n    else {\n      isHead = false;\n    }\n    if (-1 < *(int *)(nextSize + trimmedSize + 4) << 0x1f) {\n      combinedSize = combinedSize + trimmedSize;\n      pointer = *(undefined4 **)(nextSize + 8);\n      if ((!isHead) && (pointer == &DAT_2007046c)) {\n        DAT_20070474 = blockAddress;\n        DAT_20070478 = blockAddress;\n        *(int **)(blockAddress + 0xc) = &DAT_2007046c;\n        *(int **)(blockAddress + 8) = &DAT_2007046c;\n        *(uint *)(blockAddress + 4) = combinedSize | 1;\n        *(uint *)(blockAddress + combinedSize) = combinedSize;\n        goto LAB_00083ba4;\n      }\n      nextSize = *(int *)(nextSize + 0xc);\n      pointer[3] = nextSize;\n      *(undefined4 **)(nextSize + 8) = pointer;\n    }\n    *(uint *)(blockAddress + 4) = combinedSize | 1;\n    *(uint *)(blockAddress + combinedSize) = combinedSize;\n    if (!isHead) {\n      if (combinedSize < 0x200) {\n        blockSize = combinedSize & 0xfffffff8;\n        nextSize = *(int *)((int)&DAT_2007046c + blockSize);\n        DAT_20070468 = DAT_20070468 | 1 << ((int)(combinedSize >> 3) >> 2 & 0xffU);\n        *(int *)(blockAddress + 8) = nextSize;\n        *(undefined1 **)(blockAddress + 0xc) = &__malloc_av_ + blockSize;\n        *(int *)((int)&DAT_2007046c + blockSize) = blockAddress;\n        *(int *)(nextSize + 0xc) = blockAddress;\n        __malloc_unlock(param);\n        return;\n      }\n      blockSize = combinedSize >> 9;\n      if (blockSize < 5) {\n        nextSize = (combinedSize >> 6) + 0x38;\n        prevSize = nextSize * 2;\n      }\n      else if (blockSize < 0x15) {\n        nextSize = blockSize + 0x5b;\n        prevSize = nextSize * 2;\n      }\n      else if (blockSize < 0x55) {\n        nextSize = (combinedSize >> 0xc) + 0x6e;\n        prevSize = nextSize * 2;\n      }\n      else if (blockSize < 0x155) {\n        nextSize = (combinedSize >> 0xf) + 0x77;\n        prevSize = nextSize * 2;\n      }\n      else if (blockSize < 0x555) {\n        nextSize = (combinedSize >> 0x12) + 0x7c;\n        prevSize = nextSize * 2;\n      }\n      else {\n        prevSize = 0xfc;\n        nextSize = 0x7e;\n      }\n      currentBlock = (undefined1 *)(&DAT_2007046c)[prevSize];\n      if (currentBlock == &__malloc_av_ + prevSize * 4) {\n        DAT_20070468 = DAT_20070468 | 1 << (nextSize >> 2 & 0xffU);\n        previousBlock = currentBlock;\n      }\n      else {\n        do {\n          if ((*(uint *)(currentBlock + 4) & 0xfffffffc) <= combinedSize) break;\n          currentBlock = *(undefined1 **)(currentBlock + 8);\n        } while (&__malloc_av_ + prevSize * 4 != currentBlock);\n        previousBlock = *(undefined1 **)(currentBlock + 0xc);\n      }\n      *(undefined1 **)(blockAddress + 0xc) = previousBlock;\n      *(undefined1 **)(blockAddress + 8) = currentBlock;\n      *(int *)(previousBlock + 8) = blockAddress;\n      *(int *)(currentBlock + 0xc) = blockAddress;\n    }\n  }\nLAB_00083ba4:\n  __malloc_unlock(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b10": "deallocate_memory_block_00083b10",
                "param_1": "param",
                "param_2": "memoryBlock",
                "puVar1": "pointer",
                "bVar2": "isHead",
                "uVar3": "blockSize",
                "iVar4": "prevSize",
                "iVar5": "nextSize",
                "puVar6": "currentBlock",
                "uVar7": "combinedSize",
                "puVar8": "previousBlock",
                "iVar9": "blockAddress",
                "uVar10": "trimmedSize"
            },
            "calling": [
                "_malloc_r",
                "free",
                "__sflush_r",
                "__swsetup_r",
                "__sfvwrite_r",
                "_realloc_r",
                "_fclose_r"
            ],
            "called": [
                "_malloc_trim_r",
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083ca8": {
            "entrypoint": "0x00083ca8",
            "current_name": "process_data_00083ca8",
            "code": "\nundefined4 processData_00083ca8(undefined4 *error,void **input,undefined4 *length)\n\n{\n  void **ptr1;\n  int result;\n  void *dest;\n  void *temp;\n  void *src;\n  void *size;\n  ushort flag;\n  uint value;\n  int remaining;\n  void **ptr2;\n  void *buffer;\n  void *data;\n  void *n;\n  size_t n_00;\n  void *local_var;\n  \n  if (length[2] != 0) {\n    flag = *(ushort *)(input + 3);\n    value = (uint)flag;\n    if (((int)(value << 0x1c) < 0) && (input[4] != (void *)0x0)) {\n      ptr2 = (void **)*length;\n    }\n    else {\n      result = __swsetup_r(error,input);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(input + 3);\n      value = (uint)flag;\n      ptr2 = (void **)*length;\n    }\n    if ((flag & 2) == 0) {\n      src = (void *)(value & 2);\n      data = src;\n      buffer = src;\n      local_var = src;\n      if ((value & 1) == 0) {\n        src = (void *)0x0;\n        data = (void *)0x0;\n        while( true ) {\n          while (src == (void *)0x0) {\n            data = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            src = *ptr1;\n          }\n          buffer = input[2];\n          if ((int)(value << 0x16) < 0) {\n            if (src < buffer) {\n              dest = *input;\n              buffer = src;\n            }\n            else if ((value & 0x480) == 0) {\n              dest = *input;\n            }\n            else {\n              n_00 = (int)*input - (int)input[4];\n              buffer = (void *)(n_00 + 1 + (int)src);\n              dest = (void *)(((int)input[5] * 3) / 2);\n              if (buffer <= dest) {\n                buffer = dest;\n              }\n              if ((int)(value << 0x15) < 0) {\n                temp = (void *)_malloc_r(error,buffer);\n                if (temp == (void *)0x0) {\n                  *error = 0xc;\n                  flag = *(ushort *)(input + 3);\n                  goto LAB_00083da4;\n                }\n                memcpy(temp,input[4],n_00);\n                *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                temp = (void *)_realloc_r(error);\n                if (temp == (void *)0x0) {\n                  _free_r(error,input[4]);\n                  flag = *(ushort *)(input + 3) & 0xff7f;\n                  *error = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              dest = (void *)((int)temp + n_00);\n              input[4] = temp;\n              input[5] = buffer;\n              *input = dest;\n              input[2] = (void *)((int)buffer - n_00);\n              buffer = src;\n            }\n            memmove(dest,data,(size_t)buffer);\n            input[2] = (void *)((int)input[2] - (int)buffer);\n            *input = (void *)((int)*input + (int)buffer);\n            buffer = src;\n          }\n          else if ((input[4] < *input) || (dest = input[5], src < dest)) {\n            if (src < buffer) {\n              buffer = src;\n            }\n            memmove(*input,data,(size_t)buffer);\n            dest = input[2];\n            input[2] = (void *)((int)dest - (int)buffer);\n            *input = (void *)((int)*input + (int)buffer);\n            if (((void *)((int)dest - (int)buffer) == (void *)0x0) &&\n               (result = _fflush_r(error,input), result != 0)) goto LAB_00083da2;\n          }\n          else {\n            buffer = (void *)0x7fffffff;\n            if (src < (void *)0x7fffffff) {\n              buffer = src;\n            }\n            buffer = (void *)(*(code *)input[9])\n                                        (error,input[7],data,\n                                         ((uint)buffer / (uint)dest) * (int)dest);\n            if ((int)buffer < 1) goto LAB_00083da2;\n          }\n          result = length[2];\n          data = (void *)((int)data + (int)buffer);\n          src = (void *)((int)src - (int)buffer);\n          length[2] = result - (int)buffer;\n          if (result - (int)buffer == 0) break;\n          value = (uint)*(ushort *)(input + 3);\n        }\n      }\n      else {\n        do {\n          while (src == (void *)0x0) {\n            buffer = *ptr2;\n            src = ptr2[1];\n            local_var = (void *)0x0;\n            ptr2 = ptr2 + 2;\n          }\n          if (local_var == (void *)0x0) {\n            data = memchr(buffer,10,(size_t)src);\n            if (data == (void *)0x0) {\n              data = (void *)((int)src + 1);\n              local_var = (void *)0x1;\n            }\n            else {\n              data = (void *)((int)data + (1 - (int)buffer));\n              local_var = (void *)0x1;\n            }\n          }\n          temp = *input;\n          dest = data;\n          if (src <= data) {\n            dest = src;\n          }\n          size = input[5];\n          if ((input[4] < temp) &&\n             (n = (void *)((int)input[2] + (int)size), (int)n < (int)dest)) {\n            memmove(temp,buffer,(size_t)n);\n            *input = (void *)((int)*input + (int)n);\n            result = _fflush_r(error,input);\n            if (result != 0) goto LAB_00083da2;\n          }\n          else if ((int)dest < (int)size) {\n            memmove(temp,buffer,(size_t)dest);\n            input[2] = (void *)((int)input[2] - (int)dest);\n            *input = (void *)((int)dest + (int)*input);\n            n = dest;\n          }\n          else {\n            n = (void *)(*(code *)input[9])(error,input[7],buffer,size);\n            if ((int)n < 1) goto LAB_00083da2;\n          }\n          data = (void *)((int)data - (int)n);\n          if (data == (void *)0x0) {\n            result = _fflush_r(error,input);\n            if (result != 0) goto LAB_00083da2;\n            local_var = (void *)0x0;\n          }\n          result = length[2];\n          buffer = (void *)((int)buffer + (int)n);\n          src = (void *)((int)src - (int)n);\n          length[2] = result - (int)n;\n        } while (result - (int)n != 0);\n      }\n    }\n    else {\n      data = (void *)0x0;\n      src = (void *)0x0;\n      do {\n        while( true ) {\n          buffer = src;\n          if ((void *)0x7ffffbff < src) {\n            buffer = (void *)0x7ffffc00;\n          }\n          if (src != (void *)0x0) break;\n          data = *ptr2;\n          src = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)input[9])(error,input[7],data,buffer);\n        if (result < 1) {\nLAB_00083da2:\n          flag = *(ushort *)(input + 3);\nLAB_00083da4:\n          *(ushort *)(input + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        remaining = length[2];\n        data = (void *)((int)data + result);\n        src = (void *)((int)src - result);\n        length[2] = remaining - result;\n      } while (remaining - result != 0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083ca8": "process_data_00083ca8",
                "param_1": "error",
                "param_2": "input",
                "param_3": "length",
                "ppvVar1": "ptr1",
                "iVar2": "result",
                "pvVar3": "dest",
                "pvVar4": "temp",
                "pvVar5": "src",
                "pvVar6": "size",
                "uVar7": "flag",
                "uVar8": "value",
                "iVar9": "remaining",
                "ppvVar10": "ptr2",
                "pvVar11": "buffer",
                "pvVar12": "data",
                "__n": "n",
                "__n_00": "n_00",
                "local_2c": "local_var"
            },
            "calling": [
                "__sprint_r.part.0"
            ],
            "called": [
                "memchr",
                "memmove",
                "_malloc_r",
                "__swsetup_r",
                "_fflush_r",
                "_realloc_r",
                "memcpy",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083fbc": {
            "entrypoint": "0x00083fbc",
            "current_name": "process_data_00083fbc",
            "code": "\nuint process_data_00083fbc(int base_address,code *callback_function)\n\n{\n  uint result;\n  int current_struct_address;\n  int remaining_iterations;\n  uint combined_results;\n  int *ptr_to_data_structure;\n  \n  ptr_to_data_structure = (int *)(base_address + 0x2e0);\n  if (ptr_to_data_structure != (int *)0x0) {\n    combined_results = 0;\n    do {\n      current_struct_address = ptr_to_data_structure[2];\n      remaining_iterations = ptr_to_data_structure[1] + -1;\n      if (-1 < remaining_iterations) {\n        do {\n          remaining_iterations = remaining_iterations + -1;\n          if ((1 < *(ushort *)(current_struct_address + 0xc)) && (*(short *)(current_struct_address + 0xe) != -1)) {\n            result = (*callback_function)(current_struct_address);\n            combined_results = combined_results | result;\n          }\n          current_struct_address = current_struct_address + 0x68;\n        } while (remaining_iterations != -1);\n      }\n      ptr_to_data_structure = (int *)*ptr_to_data_structure;\n    } while (ptr_to_data_structure != (int *)0x0);\n    return combined_results;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083fbc": "process_data_00083fbc",
                "param_1": "base_address",
                "param_2": "callback_function",
                "uVar1": "result",
                "iVar2": "current_struct_address",
                "iVar3": "remaining_iterations",
                "uVar4": "combined_results",
                "piVar5": "ptr_to_data_structure"
            },
            "calling": [
                "_cleanup_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084004": {
            "entrypoint": "0x00084004",
            "current_name": "get_charset_00084004",
            "code": "\nchar * getCharset_00084004(void)\n\n{\n  return charset;\n}\n\n",
            "renaming": {
                "FUN_00084004": "get_charset_00084004",
                "lc_ctype_charset": "charset"
            },
            "calling": [
                "_wcrtomb_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008400c": {
            "entrypoint": "0x0008400c",
            "current_name": "get_max_multi_byte_character_size_0008400c",
            "code": "\nundefined4 getMaxMultiByteCharacterSize_0008400c(void)\n\n{\n  return maxCharacterSize;\n}\n\n",
            "renaming": {
                "FUN_0008400c": "get_max_multi_byte_character_size_0008400c",
                "__mb_cur_max": "maxCharacterSize"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084018": {
            "entrypoint": "0x00084018",
            "current_name": "initialize_file_buffer_00084018",
            "code": "\nvoid initializeFileBuffer_00084018(int fileDescriptor,int *fileBuffer)\n\n{\n  ushort fileMode;\n  int fileStatus;\n  int allocationSize;\n  uint filePermission;\n  bool isRegularFile;\n  undefined statStruct [4];\n  uint statResult;\n  \n  fileMode = *(ushort *)(fileBuffer + 3);\n  filePermission = (uint)fileMode;\n  if ((int)(filePermission << 0x1e) < 0) {\n    *fileBuffer = (int)fileBuffer + 0x43;\n    fileBuffer[4] = (int)fileBuffer + 0x43;\n    fileBuffer[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)fileBuffer + 0xe)) {\n    fileStatus = _fstat_r(fileDescriptor,(int)*(short *)((int)fileBuffer + 0xe),statStruct);\n    if (-1 < fileStatus) {\n      isRegularFile = (statResult & 0xf000) == 0x2000;\n      if (((statResult & 0xf000) == 0x8000) && (fileBuffer[10] == 0x8427d)) {\n        fileStatus = 0x400;\n        *(ushort *)(fileBuffer + 3) = *(ushort *)(fileBuffer + 3) | 0x400;\n        fileBuffer[0x13] = 0x400;\n      }\n      else {\n        fileStatus = 0x400;\n        *(ushort *)(fileBuffer + 3) = *(ushort *)(fileBuffer + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    fileMode = *(ushort *)(fileBuffer + 3);\n    filePermission = (uint)fileMode;\n  }\n  *(ushort *)(fileBuffer + 3) = fileMode | 0x800;\n  if ((filePermission & 0x80) == 0) {\n    fileStatus = 0x400;\n  }\n  else {\n    fileStatus = 0x40;\n  }\n  isRegularFile = false;\nLAB_00084074:\n  allocationSize = _malloc_r(fileDescriptor,fileStatus);\n  fileMode = *(ushort *)(fileBuffer + 3);\n  if (allocationSize == 0) {\n    if (-1 < (int)((uint)fileMode << 0x16)) {\n      *(ushort *)(fileBuffer + 3) = fileMode | 2;\n      *fileBuffer = (int)fileBuffer + 0x43;\n      fileBuffer[4] = (int)fileBuffer + 0x43;\n      fileBuffer[5] = 1;\n    }\n  }\n  else {\n    *(undefined4 *)(fileDescriptor + 0x3c) = 0x8387d;\n    *(ushort *)(fileBuffer + 3) = fileMode | 0x80;\n    *fileBuffer = allocationSize;\n    fileBuffer[4] = allocationSize;\n    fileBuffer[5] = fileStatus;\n    if ((isRegularFile) && (fileStatus = _isatty_r(fileDescriptor,(int)*(short *)((int)fileBuffer + 0xe)), fileStatus != 0)) {\n      *(ushort *)(fileBuffer + 3) = *(ushort *)(fileBuffer + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084018": "initialize_file_buffer_00084018",
                "param_1": "fileDescriptor",
                "param_2": "fileBuffer",
                "uVar1": "fileMode",
                "iVar2": "fileStatus",
                "iVar3": "allocationSize",
                "uVar4": "filePermission",
                "bVar5": "isRegularFile",
                "auStack_54": "statStruct",
                "local_50": "statResult"
            },
            "calling": [
                "__swsetup_r"
            ],
            "called": [
                "_malloc_r",
                "_fstat_r",
                "_isatty_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000840f8": {
            "entrypoint": "0x000840f8",
            "current_name": "find_first_char_000840f8",
            "code": "\nvoid * find_first_char_000840f8(void *str_ptr,int target_char,size_t str_len)\n\n{\n  uint char_mask;\n  uint xored_value;\n  int char_index;\n  uint *str_ptr_temp;\n  uint char_mask_extended;\n  bool is_last_char;\n  \n  char_mask = target_char & 0xff;\n  if (((uint)str_ptr & 3) == 0) {\nLAB_00084128:\n    if (3 < str_len) {\n      char_mask_extended = char_mask | char_mask << 8;\n      str_ptr_temp = (uint *)str_ptr;\n      do {\n        xored_value = *str_ptr_temp ^ (char_mask_extended | char_mask_extended << 0x10);\n        str_ptr = str_ptr_temp;\n        if ((xored_value + 0xfefefeff & ~xored_value & 0x80808080) != 0) break;\n        str_len = str_len - 4;\n        str_ptr = str_ptr_temp + 1;\n        str_ptr_temp = str_ptr_temp + 1;\n      } while (3 < str_len);\n    }\n    if (str_len == 0) {\n      str_ptr = (uint *)0x0;\n    }\n    else {\n                    /* WARNING: Load size is inaccurate */\n      if (*str_ptr != char_mask) {\n        char_index = 0;\n        do {\n          str_ptr = (void *)((int)str_ptr + 1);\n          is_last_char = char_index == str_len - 1;\n          char_index = char_index + 1;\n          if (is_last_char) goto LAB_00084150;\n                    /* WARNING: Load size is inaccurate */\n        } while (*str_ptr != char_mask);\n      }\n    }\n  }\n  else if (str_len == 0) {\nLAB_00084150:\n    str_ptr = (uint *)0x0;\n  }\n  else {\n                    /* WARNING: Load size is inaccurate */\n    if (*str_ptr != char_mask) {\n      str_ptr_temp = (uint *)((int)str_ptr + 1);\n      str_len = str_len - 1;\n      do {\n        str_ptr = str_ptr_temp;\n        if (((uint)str_ptr & 3) == 0) goto LAB_00084128;\n        if (str_len == 0) goto LAB_00084150;\n                    /* WARNING: Load size is inaccurate */\n        str_ptr_temp = (uint *)((int)str_ptr + 1);\n        str_len = str_len - 1;\n      } while (*str_ptr != char_mask);\n    }\n  }\n  return str_ptr;\n}\n\n",
            "renaming": {
                "FUN_000840f8": "find_first_char_000840f8",
                "__s": "str_ptr",
                "__c": "target_char",
                "__n": "str_len",
                "uVar1": "char_mask",
                "uVar2": "xored_value",
                "iVar3": "char_index",
                "puVar4": "str_ptr_temp",
                "uVar5": "char_mask_extended",
                "bVar6": "is_last_char"
            },
            "calling": [
                "_vfiprintf_r",
                "__sfvwrite_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008418c": {
            "entrypoint": "0x0008418c",
            "current_name": "handle_signal_0008418c",
            "code": "\nundefined4 handle_signal_0008418c(undefined4 *return_status,uint signal_number,undefined4 param_3,undefined4 param_4)\n\n{\n  __pid_t process_id;\n  undefined4 kill_result;\n  int ptr_array;\n  code *function_pointer;\n  \n  if (0x1f < signal_number) {\n    *return_status = 0x16;\n    return 0xffffffff;\n  }\n  ptr_array = return_status[0xb7];\n  if ((ptr_array == 0) || (function_pointer = *(code **)(ptr_array + signal_number * 4), function_pointer == (code *)0x0)) {\n    process_id = _getpid_r();\n    kill_result = _kill_r(return_status,process_id,signal_number,param_4);\n    return kill_result;\n  }\n  if (function_pointer == (code *)0x1) {\n    return 0;\n  }\n  if (function_pointer != (code *)0xffffffff) {\n    *(undefined4 *)(ptr_array + signal_number * 4) = 0;\n    (*function_pointer)(signal_number);\n    return 0;\n  }\n  *return_status = 0x16;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008418c": "handle_signal_0008418c",
                "param_1": "return_status",
                "param_2": "signal_number",
                "_Var1": "process_id",
                "uVar2": "kill_result",
                "iVar3": "ptr_array",
                "pcVar4": "function_pointer"
            },
            "calling": [
                "raise"
            ],
            "called": [
                "_kill_r",
                "_getpid_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000841e4": {
            "entrypoint": "0x000841e4",
            "current_name": "handle_signal_000841e4",
            "code": "\nint handleSignal_000841e4(int signalNumber)\n\n{\n  int result;\n  \n  result = _raise_r(_impure_ptr,signalNumber);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000841e4": "handle_signal_000841e4",
                "__sig": "signalNumber",
                "iVar1": "result"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "_raise_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000841f4": {
            "entrypoint": "0x000841f4",
            "current_name": "execute_kill_signal_000841f4",
            "code": "\nvoid executeKillSignal_000841f4(int *errorFlag,int processID,int signalNumber)\n\n{\n  errno = 0;\n  _kill(processID,signalNumber);\n  if ((processID == -1) && (errno != 0)) {\n    *errorFlag = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000841f4": "execute_kill_signal_000841f4",
                "param_1": "errorFlag",
                "param_2": "processID",
                "param_3": "signalNumber"
            },
            "calling": [
                "kill",
                "_raise_r"
            ],
            "called": [
                "_kill"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008421c": {
            "entrypoint": "0x0008421c",
            "current_name": "FUN_0008421c",
            "code": "\n\n\n__pid_t _getpid(void)\n\n{\n  return -1;\n}\n\n",
            "renaming": {},
            "calling": [
                "_raise_r"
            ],
            "called": [
                "_getpid"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084220": {
            "entrypoint": "0x00084220",
            "current_name": "update_and_check_value_00084220",
            "code": "\nvoid updateAndCheckValue_00084220(undefined4 fileDescriptor,int dataBuffer)\n\n{\n  int bytesRead;\n  \n  bytesRead = _read_r(fileDescriptor,(int)*(short *)(dataBuffer + 0xe));\n  if (-1 < bytesRead) {\n    *(int *)(dataBuffer + 0x50) = *(int *)(dataBuffer + 0x50) + bytesRead;\n    return;\n  }\n  *(ushort *)(dataBuffer + 0xc) = *(ushort *)(dataBuffer + 0xc) & 0xefff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084220": "update_and_check_value_00084220",
                "param_1": "fileDescriptor",
                "param_2": "dataBuffer",
                "iVar1": "bytesRead"
            },
            "calling": [],
            "called": [
                "_read_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084244": {
            "entrypoint": "0x00084244",
            "current_name": "update_file_and_write_00084244",
            "code": "\nvoid updateFileAndWrite_00084244(undefined4 fileDescriptor,int bufferAddress,undefined4 dataAddress,undefined4 dataSize)\n\n{\n  ushort value;\n  \n  value = *(ushort *)(bufferAddress + 0xc);\n  if ((int)((uint)value << 0x17) < 0) {\n    setFilePointer(fileDescriptor,(int)*(short *)(bufferAddress + 0xe),0,2);\n    value = *(ushort *)(bufferAddress + 0xc);\n  }\n  *(ushort *)(bufferAddress + 0xc) = value & 0xefff;\n  writeToFile(fileDescriptor,(int)*(short *)(bufferAddress + 0xe),dataAddress,dataSize);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084244": "update_file_and_write_00084244",
                "param_1": "fileDescriptor",
                "param_2": "bufferAddress",
                "param_3": "dataAddress",
                "param_4": "dataSize",
                "uVar1": "value",
                "_lseek_r": "setFilePointer",
                "_write_r": "writeToFile"
            },
            "calling": [],
            "called": [
                "_write_r",
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008427c": {
            "entrypoint": "0x0008427c",
            "current_name": "update_file_seek_position_0008427c",
            "code": "\nvoid updateFileSeekPosition_0008427c(undefined4 fileDescriptor,int structPointer)\n\n{\n  int seekResult;\n  ushort modifiedFlag;\n  \n  seekResult = _lseek_r(fileDescriptor,(int)*(short *)(structPointer + 0xe));\n  if (seekResult == -1) {\n    modifiedFlag = *(ushort *)(structPointer + 0xc) & 0xefff;\n  }\n  else {\n    modifiedFlag = *(ushort *)(structPointer + 0xc) | 0x1000;\n  }\n  if (seekResult != -1) {\n    *(int *)(structPointer + 0x50) = seekResult;\n  }\n  *(ushort *)(structPointer + 0xc) = modifiedFlag;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008427c": "update_file_seek_position_0008427c",
                "param_1": "fileDescriptor",
                "param_2": "structPointer",
                "iVar1": "seekResult",
                "uVar2": "modifiedFlag"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008429c": {
            "entrypoint": "0x0008429c",
            "current_name": "close_file_0008429c",
            "code": "\nvoid closeFile_0008429c(undefined4 fileDescriptor,int bufferAddress)\n\n{\n  closeFile_0008429cStream(fileDescriptor,(int)*(short *)(bufferAddress + 0xe));\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008429c": "close_file_0008429c",
                "param_1": "fileDescriptor",
                "param_2": "bufferAddress",
                "_close_r": "closeFileStream"
            },
            "calling": [],
            "called": [
                "_close_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "decompressed_data_transfer_000842a4",
            "code": "\nuint decompressedDataTransfer_000842a4(int inputData,uint character,undefined4 *outputBuffer,undefined4 bufferSize)\n\n{\n  ushort characterValue;\n  uint characterValueAsUint;\n  undefined *outputPointer;\n  int status;\n  \n  if ((inputData != 0) && (*(int *)(inputData + 0x38) == 0)) {\n    __sinit();\n  }\n  characterValue = *(ushort *)(outputBuffer + 3);\n  characterValueAsUint = (uint)characterValue;\n  outputBuffer[2] = outputBuffer[6];\n  if ((-1 < (int)(characterValueAsUint << 0x1c)) || (status = outputBuffer[4], status == 0)) {\n    status = __swsetup_r(inputData,outputBuffer,characterValue,characterValueAsUint,bufferSize);\n    if (status != 0) {\n      return 0xffffffff;\n    }\n    characterValue = *(ushort *)(outputBuffer + 3);\n    status = outputBuffer[4];\n    characterValueAsUint = (uint)characterValue;\n  }\n  character = character & 0xff;\n  if ((int)(characterValueAsUint << 0x12) < 0) {\n    outputPointer = (undefined *)*outputBuffer;\n    status = (int)outputPointer - status;\n    if (status < (int)outputBuffer[5]) {\nLAB_000842d6:\n      status = status + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    outputBuffer[0x19] = outputBuffer[0x19] & 0xffffdfff;\n    outputPointer = (undefined *)*outputBuffer;\n    *(ushort *)(outputBuffer + 3) = characterValue | 0x2000;\n    status = (int)outputPointer - status;\n    if (status < (int)outputBuffer[5]) goto LAB_000842d6;\n  }\n  status = _fflush_r(inputData,outputBuffer);\n  if (status != 0) {\n    return 0xffffffff;\n  }\n  outputPointer = (undefined *)*outputBuffer;\n  status = 1;\nLAB_000842d8:\n  outputBuffer[2] = outputBuffer[2] + -1;\n  *outputBuffer = outputPointer + 1;\n  *outputPointer = (char)character;\n  if (((outputBuffer[5] == status) ||\n      (((int)((uint)*(ushort *)(outputBuffer + 3) << 0x1f) < 0 && (character == 10)))) &&\n     (status = _fflush_r(inputData,outputBuffer), status != 0)) {\n    return 0xffffffff;\n  }\n  return character;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "decompressed_data_transfer_000842a4",
                "param_1": "inputData",
                "param_2": "character",
                "param_3": "outputBuffer",
                "param_4": "bufferSize",
                "uVar1": "characterValue",
                "uVar2": "characterValueAsUint",
                "puVar3": "outputPointer",
                "iVar4": "status"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [
                "__sinit",
                "__swsetup_r",
                "_fflush_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008434c": {
            "entrypoint": "0x0008434c",
            "current_name": "convert_and_set_locale_charset_0008434c",
            "code": "\nvoid convertAndSetLocaleCharset_0008434c(undefined4 *outputString,int inputSize,undefined4 additionalParam,undefined4 *status)\n\n{\n  code *conversionFunction;\n  undefined4 localeCharset;\n  int result;\n  undefined tempBuffer [12];\n  \n  conversionFunction = __wctomb;\n  if (inputSize == 0) {\n    localeCharset = __locale_charset();\n    result = (*conversionFunction)(outputString,tempBuffer,0,localeCharset,status);\n  }\n  else {\n    localeCharset = __locale_charset();\n    result = (*conversionFunction)(outputString,inputSize,additionalParam,localeCharset,status);\n  }\n  if (result == -1) {\n    *status = 0;\n    *outputString = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008434c": "convert_and_set_locale_charset_0008434c",
                "param_1": "outputString",
                "param_2": "inputSize",
                "param_3": "additionalParam",
                "param_4": "status",
                "pcVar1": "conversionFunction",
                "uVar2": "localeCharset",
                "iVar3": "result",
                "auStack_24": "tempBuffer"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [
                "__ascii_wctomb",
                "__locale_charset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008439c": {
            "entrypoint": "0x0008439c",
            "current_name": "assign_value_to_buffer_0008439c",
            "code": "\nstatus assign_value_to_buffer_0008439c(status *destination,char_pointer *buffer,uint value)\n\n{\n  if (buffer == (char_pointer *)0x0) {\n    return 0;\n  }\n  if (value < 0x100) {\n    *buffer = (char)value;\n    return 1;\n  }\n  *destination = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0008439c": "assign_value_to_buffer_0008439c",
                "param_1": "destination",
                "param_2": "buffer",
                "param_3": "value",
                "undefined4": "status",
                "undefined": "char_pointer"
            },
            "calling": [
                "_wcrtomb_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000843b8": {
            "entrypoint": "0x000843b8",
            "current_name": "write_to_file_000843b8",
            "code": "\nvoid writeToFile_000843b8(int *error,int fileDescriptor,char *buffer,int length)\n\n{\n  int writeResult;\n  \n  errorNumber = 0;\n  writeResult = _write(fileDescriptor,buffer,length);\n  if ((writeResult == -1) && (errorNumber != 0)) {\n    *error = errorNumber;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000843b8": "write_to_file_000843b8",
                "param_1": "error",
                "param_2": "fileDescriptor",
                "param_3": "buffer",
                "param_4": "length",
                "errno": "errorNumber",
                "iVar1": "writeResult"
            },
            "calling": [
                "__swrite"
            ],
            "called": [
                "_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000843e0": {
            "entrypoint": "0x000843e0",
            "current_name": "close_file_000843e0",
            "code": "\nvoid closeFile_000843e0(int *errorCode,int fileDescriptor)\n\n{\n  int closeResult;\n  \n  errno = 0;\n  closeResult = _close(fileDescriptor);\n  if ((closeResult == -1) && (errno != 0)) {\n    *errorCode = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000843e0": "close_file_000843e0",
                "param_1": "errorCode",
                "param_2": "fileDescriptor",
                "iVar1": "closeResult"
            },
            "calling": [
                "__sclose"
            ],
            "called": [
                "_close"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084404": {
            "entrypoint": "0x00084404",
            "current_name": "cleanup_and_flush_file_00084404",
            "code": "\nundefined4 cleanupAndFlushFile_00084404(int fileDescriptor,int stream)\n\n{\n  undefined4 result;\n  int returnValue;\n  \n  if (stream != 0) {\n    if ((fileDescriptor != 0) && (*(int *)(fileDescriptor + 0x38) == 0)) {\n      __sinit();\n    }\n    if (*(short *)(stream + 0xc) != 0) {\n      result = _fflush_r(fileDescriptor,stream);\n      if ((*(code **)(stream + 0x2c) != (code *)0x0) &&\n         (returnValue = (**(code **)(stream + 0x2c))(fileDescriptor,*(undefined4 *)(stream + 0x1c)), returnValue < 0)\n         ) {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(stream + 0xc) << 0x18) < 0) {\n        _free_r(fileDescriptor,*(undefined4 *)(stream + 0x10));\n      }\n      if (*(int *)(stream + 0x30) != 0) {\n        if (*(int *)(stream + 0x30) != stream + 0x40) {\n          _free_r(fileDescriptor);\n        }\n        *(undefined4 *)(stream + 0x30) = 0;\n      }\n      if (*(int *)(stream + 0x44) != 0) {\n        _free_r(fileDescriptor);\n        *(undefined4 *)(stream + 0x44) = 0;\n      }\n      __sfp_lock_acquire();\n      *(undefined2 *)(stream + 0xc) = 0;\n      __sfp_lock_release();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00084404": "cleanup_and_flush_file_00084404",
                "param_1": "fileDescriptor",
                "param_2": "stream",
                "uVar1": "result",
                "iVar2": "returnValue"
            },
            "calling": [
                "fclose"
            ],
            "called": [
                "__sfp_lock_acquire",
                "__sinit",
                "__sfp_lock_release",
                "_fflush_r",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084484": {
            "entrypoint": "0x00084484",
            "current_name": "close_file_00084484",
            "code": "\nint closeFile_00084484(FILE *file)\n\n{\n  int result;\n  \n  result = _fclose_r(_impure_ptr,file);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084484": "close_file_00084484",
                "__stream": "file",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "_fclose_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084494": {
            "entrypoint": "0x00084494",
            "current_name": "get_file_size_00084494",
            "code": "\nvoid getFileSize_00084494(int *errorCode,int fileDescriptor,stat *fileStatus)\n\n{\n  int result;\n  \n  errno = 0;\n  result = _fstat(fileDescriptor,fileStatus);\n  if ((result == -1) && (errno != 0)) {\n    *errorCode = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084494": "get_file_size_00084494",
                "param_1": "errorCode",
                "param_2": "fileDescriptor",
                "param_3": "fileStatus",
                "iVar1": "result"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844bc": {
            "entrypoint": "0x000844bc",
            "current_name": "check_is_terminal_000844bc",
            "code": "\nvoid checkIsTerminal_000844bc(int *error,int fileDescriptor)\n\n{\n  int isTerminal;\n  \n  errno = 0;\n  isTerminal = _isatty(fileDescriptor);\n  if ((isTerminal == -1) && (errno != 0)) {\n    *error = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844bc": "check_is_terminal_000844bc",
                "param_1": "error",
                "param_2": "fileDescriptor",
                "iVar1": "isTerminal"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_isatty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844e0": {
            "entrypoint": "0x000844e0",
            "current_name": "seek_file_000844e0",
            "code": "\nvoid seek_file_000844e0(int *error_code,int file_descriptor,__off_t offset,int whence)\n\n{\n  __off_t result;\n  \n  errno = 0;\n  result = _lseek(file_descriptor,offset,whence);\n  if ((result == -1) && (errno != 0)) {\n    *error_code = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844e0": "seek_file_000844e0",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "_Var1": "result"
            },
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "called": [
                "_lseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084508": {
            "entrypoint": "0x00084508",
            "current_name": "read_and_store_error_00084508",
            "code": "\nvoid readAndStoreError_00084508(int *errorPtr,int fileDescriptor,char *buffer,int bufferSize)\n\n{\n  int readResult;\n  \n  errno = 0;\n  readResult = _read(fileDescriptor,buffer,bufferSize);\n  if ((readResult == -1) && (errno != 0)) {\n    *errorPtr = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084508": "read_and_store_error_00084508",
                "param_1": "errorPtr",
                "param_2": "fileDescriptor",
                "param_3": "buffer",
                "param_4": "bufferSize",
                "iVar1": "readResult"
            },
            "calling": [
                "__sread"
            ],
            "called": [
                "_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084530": {
            "entrypoint": "0x00084530",
            "current_name": "perform_division_or_idiv0_00084530",
            "code": "\nvoid performDivisionOrIdiv0_00084530(int input1,int input2,int input3,int input4)\n\n{\n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input1 = -1;\n    }\n    __aeabi_idiv0(input1);\n    return;\n  }\n  __gnu_uldivmod_helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084530": "perform_division_or_idiv0_00084530",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__gnu_uldivmod_helper",
                "__aeabi_idiv0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008455c": {
            "entrypoint": "0x0008455c",
            "current_name": "calculate_difference_0008455c",
            "code": "\nvoid calculateDifference_0008455c(uint inputValue,int param2,undefined4 lowerBitsParam,undefined4 higherBitsParam,int *outputValuesPtr)\n\n{\n  uint resultLower;\n  longlong resultMixed;\n  \n  resultMixed = __divdi3();\n  resultMixed = resultMixed * CONCAT44(higherBitsParam,lowerBitsParam);\n  resultLower = (uint)resultMixed;\n  *outputValuesPtr = inputValue - resultLower;\n  outputValuesPtr[1] = (param2 - (int)((ulonglong)resultMixed >> 0x20)) - (uint)(inputValue < resultLower);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008455c": "calculate_difference_0008455c",
                "param_1": "inputValue",
                "param_2": "param2",
                "param_3": "lowerBitsParam",
                "param_4": "higherBitsParam",
                "param_5": "outputValuesPtr",
                "uVar1": "resultLower",
                "lVar2": "resultMixed"
            },
            "calling": [],
            "called": [
                "__divdi3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008458c": {
            "entrypoint": "0x0008458c",
            "current_name": "subtract_and_adjust_0008458c",
            "code": "\nvoid subtract_and_adjust_0008458c(uint input_value,int subtract_value,undefined4 concat_value_low,undefined4 concat_value_high,int *result_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = __udivdi3();\n  product = product * CONCAT44(concat_value_high,concat_value_low);\n  result = (uint)product;\n  *result_array = input_value - result;\n  result_array[1] = (subtract_value - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008458c": "subtract_and_adjust_0008458c",
                "param_1": "input_value",
                "param_2": "subtract_value",
                "param_3": "concat_value_low",
                "param_4": "concat_value_high",
                "param_5": "result_array",
                "uVar1": "result",
                "lVar2": "product"
            },
            "calling": [
                "__aeabi_uldivmod"
            ],
            "called": [
                "__udivdi3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "FUNC_000845bc",
            "code": "\nvoid FUNC_000845bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "FUNC_000845bc"
            },
            "calling": [
                "__aeabi_uldivmod"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000845c0": {
            "entrypoint": "0x000845c0",
            "current_name": "divide_unsigned_integers_000845c0",
            "code": "\nundefined8 divideUnsignedIntegers_000845c0(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong temp;\n  uint q1;\n  uint q2;\n  uint u1;\n  uint u2;\n  int shiftCount;\n  uint uVar7;\n  uint uVar8;\n  uint quotientBits;\n  uint sign2;\n  uint temp2;\n  uint temp3;\n  bool carry;\n  \n  if ((int)divisor < 0) {\n    carry = dividend != 0;\n    dividend = -dividend;\n    divisor = -divisor - (uint)carry;\n    quotientBits = 0xffffffff;\n  }\n  else {\n    quotientBits = 0;\n  }\n  if ((int)remainder < 0) {\n    quotientBits = ~quotientBits;\n    carry = quotient != 0;\n    quotient = -quotient;\n    remainder = -remainder - (uint)carry;\n  }\n  if (remainder == 0) {\n    if (divisor < quotient) {\n      shiftCount = LZCOUNT(quotient);\n      if (shiftCount != 0) {\n        q2 = dividend >> (0x20U - shiftCount & 0xff);\n        quotient = quotient << shiftCount;\n        dividend = dividend << shiftCount;\n        divisor = divisor << shiftCount | q2;\n      }\n      q1 = quotient >> 0x10;\n      u1 = divisor / q1;\n      uVar7 = (quotient & 0xffff) * u1;\n      sign2 = dividend >> 0x10 | (divisor - q1 * u1) * 0x10000;\n      q2 = u1;\n      if (sign2 <= uVar7 && uVar7 - sign2 != 0) {\n        carry = CARRY4(sign2,quotient);\n        sign2 = sign2 + quotient;\n        q2 = u1 - 1;\n        if ((carry == false) && (sign2 <= uVar7 && uVar7 - sign2 != 0)) {\n          q2 = u1 - 2;\n          sign2 = sign2 + quotient;\n        }\n      }\n      uVar8 = (sign2 - uVar7) / q1;\n      u1 = (quotient & 0xffff) * uVar8;\n      uVar7 = dividend & 0xffff | ((sign2 - uVar7) - q1 * uVar8) * 0x10000;\n      q1 = uVar8;\n      if (uVar7 <= u1 && u1 - uVar7 != 0) {\n        q1 = uVar8 - 1;\n        if ((CARRY4(uVar7,quotient) == false) &&\n           (uVar7 + quotient <= u1 && u1 - (uVar7 + quotient) != 0)) {\n          q1 = uVar8 - 2;\n        }\n      }\n      q1 = q1 | q2 << 0x10;\n      q2 = 0;\n    }\n    else {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shiftCount = LZCOUNT(quotient);\n      if (shiftCount == 0) {\n        divisor = divisor - quotient;\n        u1 = quotient >> 0x10;\n        temp3 = quotient & 0xffff;\n        q2 = 1;\n      }\n      else {\n        quotient = quotient << shiftCount;\n        q2 = divisor >> (0x20U - shiftCount & 0xff);\n        u1 = quotient >> 0x10;\n        sign2 = q2 / u1;\n        temp3 = quotient & 0xffff;\n        uVar7 = temp3 * sign2;\n        uVar8 = dividend >> (0x20U - shiftCount & 0xff) | divisor << shiftCount;\n        q2 = uVar8 >> 0x10 | (q2 - u1 * sign2) * 0x10000;\n        dividend = dividend << shiftCount;\n        q1 = sign2;\n        if (q2 <= uVar7 && uVar7 - q2 != 0) {\n          carry = CARRY4(q2,quotient);\n          q2 = q2 + quotient;\n          q1 = sign2 - 1;\n          if ((carry == false) && (q2 <= uVar7 && uVar7 - q2 != 0)) {\n            q1 = sign2 - 2;\n            q2 = q2 + quotient;\n          }\n        }\n        u2 = (q2 - uVar7) / u1;\n        sign2 = temp3 * u2;\n        divisor = uVar8 & 0xffff | ((q2 - uVar7) - u1 * u2) * 0x10000;\n        q2 = u2;\n        if (divisor <= sign2 && sign2 - divisor != 0) {\n          carry = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          q2 = u2 - 1;\n          if ((carry == false) && (divisor <= sign2 && sign2 - divisor != 0)) {\n            q2 = u2 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - sign2;\n        q2 = q2 | q1 << 0x10;\n      }\n      q1 = divisor / u1;\n      sign2 = temp3 * q1;\n      uVar8 = dividend >> 0x10 | (divisor - u1 * q1) * 0x10000;\n      uVar7 = q1;\n      if (uVar8 <= sign2 && sign2 - uVar8 != 0) {\n        carry = CARRY4(uVar8,quotient);\n        uVar8 = uVar8 + quotient;\n        uVar7 = q1 - 1;\n        if ((carry == false) && (uVar8 <= sign2 && sign2 - uVar8 != 0)) {\n          uVar7 = q1 - 2;\n          uVar8 = uVar8 + quotient;\n        }\n      }\n      u2 = (uVar8 - sign2) / u1;\n      temp3 = temp3 * u2;\n      u1 = dividend & 0xffff | ((uVar8 - sign2) - u1 * u2) * 0x10000;\n      q1 = u2;\n      if (u1 <= temp3 && temp3 - u1 != 0) {\n        q1 = u2 - 1;\n        if ((CARRY4(u1,quotient) == false) &&\n           (u1 + quotient <= temp3 && temp3 - (u1 + quotient) != 0)) {\n          q1 = u2 - 2;\n        }\n      }\n      q1 = q1 | uVar7 << 0x10;\n    }\n  }\n  else if (divisor < remainder) {\n    q2 = 0;\n    q1 = 0;\n  }\n  else {\n    shiftCount = LZCOUNT(remainder);\n    if (shiftCount == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        q2 = 0;\n        q1 = 1;\n      }\n      else {\n        q1 = 0;\n        q2 = 0;\n      }\n    }\n    else {\n      q2 = 0x20 - shiftCount;\n      u1 = divisor >> (q2 & 0xff);\n      temp3 = quotient >> (q2 & 0xff) | remainder << shiftCount;\n      sign2 = temp3 >> 0x10;\n      q1 = u1 / sign2;\n      uVar8 = (temp3 & 0xffff) * q1;\n      uVar7 = divisor << shiftCount | dividend >> (q2 & 0xff);\n      u1 = uVar7 >> 0x10 | (u1 - sign2 * q1) * 0x10000;\n      q2 = q1;\n      if (u1 <= uVar8 && uVar8 - u1 != 0) {\n        carry = CARRY4(u1,temp3);\n        u1 = u1 + temp3;\n        q2 = q1 - 1;\n        if ((carry == false) && (u1 <= uVar8 && uVar8 - u1 != 0)) {\n          q2 = q1 - 2;\n          u1 = u1 + temp3;\n        }\n      }\n      u2 = (u1 - uVar8) / sign2;\n      temp2 = (temp3 & 0xffff) * u2;\n      u1 = uVar7 & 0xffff | ((u1 - uVar8) - sign2 * u2) * 0x10000;\n      q1 = u2;\n      if (u1 <= temp2 && temp2 - u1 != 0) {\n        carry = CARRY4(u1,temp3);\n        u1 = u1 + temp3;\n        q1 = u2 - 1;\n        if ((carry == false) && (u1 <= temp2 && temp2 - u1 != 0)) {\n          q1 = u2 - 2;\n          u1 = u1 + temp3;\n        }\n      }\n      q1 = q1 | q2 << 0x10;\n      temp = (ulonglong)q1 * (ulonglong)(quotient << shiftCount);\n      uVar7 = (uint)((ulonglong)temp >> 0x20);\n      q2 = 0;\n      if ((u1 - temp2 < uVar7) ||\n         ((u1 - temp2 == uVar7 && (dividend << shiftCount < (uint)temp)))) {\n        q1 = q1 - 1;\n        q2 = 0;\n      }\n    }\n  }\n  if (quotientBits != 0) {\n    carry = q1 != 0;\n    q1 = -q1;\n    q2 = -q2 - (uint)carry;\n  }\n  return CONCAT44(q2,q1);\n}\n\n",
            "renaming": {
                "FUN_000845c0": "divide_unsigned_integers_000845c0",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "temp",
                "uVar2": "q1",
                "uVar3": "q2",
                "uVar4": "u1",
                "uVar5": "u2",
                "iVar6": "shiftCount",
                "uVar9": "quotientBits",
                "uVar10": "sign2",
                "uVar11": "temp2",
                "uVar12": "temp3",
                "bVar13": "carry"
            },
            "calling": [
                "__gnu_ldivmod_helper"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084860": {
            "entrypoint": "0x00084860",
            "current_name": "calculate_div_mod_00084860",
            "code": "\nulonglong calculateDivMod_00084860(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong tempDivisor;\n  uint tempQuotient;\n  uint tempQuotient1;\n  uint tempRemainder;\n  uint tempMul;\n  uint tempQuotient2;\n  uint tempRemainder1;\n  uint tempDivisorQuotient;\n  uint tempDivisorRemainder;\n  int numShifts;\n  bool carryFlag;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      numShifts = LZCOUNT(quotient);\n      if (numShifts == 0) {\n        divisor = divisor - quotient;\n        tempQuotient1 = quotient >> 0x10;\n        tempMul = quotient & 0xffff;\n        tempQuotient = 1;\n      }\n      else {\n        quotient = quotient << numShifts;\n        tempDivisorQuotient = divisor >> (0x20U - numShifts & 0xff);\n        tempQuotient1 = quotient >> 0x10;\n        tempDivisorRemainder = tempDivisorQuotient / tempQuotient1;\n        tempMul = quotient & 0xffff;\n        tempQuotient = tempMul * tempDivisorRemainder;\n        tempQuotient2 = dividend >> (0x20U - numShifts & 0xff) | divisor << numShifts;\n        tempRemainder = tempQuotient2 >> 0x10 | (tempDivisorQuotient - tempQuotient1 * tempDivisorRemainder) * 0x10000;\n        dividend = dividend << numShifts;\n        tempDivisorQuotient = tempDivisorRemainder;\n        if (tempRemainder <= tempQuotient && tempQuotient - tempRemainder != 0) {\n          carryFlag = CARRY4(tempRemainder,quotient);\n          tempRemainder = tempRemainder + quotient;\n          tempDivisorQuotient = tempDivisorRemainder - 1;\n          if ((carryFlag == false) && (tempRemainder <= tempQuotient && tempQuotient - tempRemainder != 0)) {\n            tempDivisorQuotient = tempDivisorRemainder - 2;\n            tempRemainder = tempRemainder + quotient;\n          }\n        }\n        tempRemainder1 = (tempRemainder - tempQuotient) / tempQuotient1;\n        tempDivisorRemainder = tempMul * tempRemainder1;\n        divisor = tempQuotient2 & 0xffff | ((tempRemainder - tempQuotient) - tempQuotient1 * tempRemainder1) * 0x10000;\n        tempQuotient = tempRemainder1;\n        if (divisor <= tempDivisorRemainder && tempDivisorRemainder - divisor != 0) {\n          carryFlag = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          tempQuotient = tempRemainder1 - 1;\n          if ((carryFlag == false) && (divisor <= tempDivisorRemainder && tempDivisorRemainder - divisor != 0)) {\n            tempQuotient = tempRemainder1 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - tempDivisorRemainder;\n        tempQuotient = tempQuotient | tempDivisorQuotient << 0x10;\n      }\n      tempDivisorRemainder = divisor / tempQuotient1;\n      tempRemainder = tempMul * tempDivisorRemainder;\n      tempQuotient2 = dividend >> 0x10 | (divisor - tempQuotient1 * tempDivisorRemainder) * 0x10000;\n      tempDivisorQuotient = tempDivisorRemainder;\n      if (tempQuotient2 <= tempRemainder && tempRemainder - tempQuotient2 != 0) {\n        carryFlag = CARRY4(tempQuotient2,quotient);\n        tempQuotient2 = tempQuotient2 + quotient;\n        tempDivisorQuotient = tempDivisorRemainder - 1;\n        if ((carryFlag == false) && (tempQuotient2 <= tempRemainder && tempRemainder - tempQuotient2 != 0)) {\n          tempDivisorQuotient = tempDivisorRemainder - 2;\n          tempQuotient2 = tempQuotient2 + quotient;\n        }\n      }\n      tempDivisorRemainder = (tempQuotient2 - tempRemainder) / tempQuotient1;\n      tempMul = tempMul * tempDivisorRemainder;\n      tempQuotient2 = dividend & 0xffff | ((tempQuotient2 - tempRemainder) - tempQuotient1 * tempDivisorRemainder) * 0x10000;\n      tempQuotient1 = tempDivisorRemainder;\n      if (tempQuotient2 <= tempMul && tempMul - tempQuotient2 != 0) {\n        tempQuotient1 = tempDivisorRemainder - 1;\n        if ((CARRY4(tempQuotient2,quotient) == false) &&\n           (tempQuotient2 + quotient <= tempMul && tempMul - (tempQuotient2 + quotient) != 0)) {\n          tempQuotient1 = tempDivisorRemainder - 2;\n        }\n      }\n      return CONCAT44(tempQuotient,tempQuotient1 | tempDivisorQuotient << 0x10);\n    }\n    numShifts = LZCOUNT(quotient);\n    if (numShifts != 0) {\n      tempDivisorQuotient = dividend >> (0x20U - numShifts & 0xff);\n      quotient = quotient << numShifts;\n      dividend = dividend << numShifts;\n      divisor = tempDivisorQuotient | divisor << numShifts;\n    }\n    tempQuotient = quotient >> 0x10;\n    tempQuotient1 = divisor / tempQuotient;\n    tempMul = (quotient & 0xffff) * tempQuotient1;\n    tempDivisorRemainder = dividend >> 0x10 | (divisor - tempQuotient * tempQuotient1) * 0x10000;\n    tempDivisorQuotient = tempQuotient1;\n    if (tempDivisorRemainder <= tempMul && tempMul - tempDivisorRemainder != 0) {\n      carryFlag = CARRY4(tempDivisorRemainder,quotient);\n      tempDivisorRemainder = tempDivisorRemainder + quotient;\n      tempDivisorQuotient = tempQuotient1 - 1;\n      if ((carryFlag == false) && (tempDivisorRemainder <= tempMul && tempMul - tempDivisorRemainder != 0)) {\n        tempDivisorQuotient = tempQuotient1 - 2;\n        tempDivisorRemainder = tempDivisorRemainder + quotient;\n      }\n    }\n    tempQuotient2 = (tempDivisorRemainder - tempMul) / tempQuotient;\n    tempQuotient1 = (quotient & 0xffff) * tempQuotient2;\n    tempMul = dividend & 0xffff | ((tempDivisorRemainder - tempMul) - tempQuotient * tempQuotient2) * 0x10000;\n    tempQuotient = tempQuotient2;\n    if (tempMul <= tempQuotient1 && tempQuotient1 - tempMul != 0) {\n      tempQuotient = tempQuotient2 - 1;\n      if ((CARRY4(tempMul,quotient) == false) &&\n         (tempMul + quotient <= tempQuotient1 && tempQuotient1 - (tempMul + quotient) != 0)) {\n        tempQuotient = tempQuotient2 - 2;\n      }\n    }\n    tempQuotient = tempQuotient | tempDivisorQuotient << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    numShifts = LZCOUNT(remainder);\n    if (numShifts == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      tempQuotient = 0;\n    }\n    else {\n      tempQuotient = 0x20 - numShifts;\n      tempDivisorQuotient = divisor >> (tempQuotient & 0xff);\n      tempQuotient1 = remainder << numShifts | quotient >> (tempQuotient & 0xff);\n      tempMul = tempQuotient1 >> 0x10;\n      tempRemainder = tempDivisorQuotient / tempMul;\n      tempDivisorRemainder = (tempQuotient1 & 0xffff) * tempRemainder;\n      tempQuotient2 = dividend >> (tempQuotient & 0xff) | divisor << numShifts;\n      tempQuotient = tempQuotient2 >> 0x10 | (tempDivisorQuotient - tempMul * tempRemainder) * 0x10000;\n      tempDivisorQuotient = tempRemainder;\n      if (tempQuotient <= tempDivisorRemainder && tempDivisorRemainder - tempQuotient != 0) {\n        carryFlag = CARRY4(tempQuotient,tempQuotient1);\n        tempQuotient = tempQuotient + tempQuotient1;\n        tempDivisorQuotient = tempRemainder - 1;\n        if ((carryFlag == false) && (tempQuotient <= tempDivisorRemainder && tempDivisorRemainder - tempQuotient != 0)) {\n          tempDivisorQuotient = tempRemainder - 2;\n          tempQuotient = tempQuotient + tempQuotient1;\n        }\n      }\n      tempRemainder = (tempQuotient - tempDivisorRemainder) / tempMul;\n      tempRemainder1 = (tempQuotient1 & 0xffff) * tempRemainder;\n      tempMul = tempQuotient2 & 0xffff | ((tempQuotient - tempDivisorRemainder) - tempMul * tempRemainder) * 0x10000;\n      tempQuotient = tempRemainder;\n      if (tempMul <= tempRemainder1 && tempRemainder1 - tempMul != 0) {\n        carryFlag = CARRY4(tempMul,tempQuotient1);\n        tempMul = tempMul + tempQuotient1;\n        tempQuotient = tempRemainder - 1;\n        if ((carryFlag == false) && (tempMul <= tempRemainder1 && tempRemainder1 - tempMul != 0)) {\n          tempQuotient = tempRemainder - 2;\n          tempMul = tempMul + tempQuotient1;\n        }\n      }\n      tempQuotient = tempQuotient | tempDivisorQuotient << 0x10;\n      tempDivisor = (ulonglong)tempQuotient * (ulonglong)(quotient << numShifts);\n      tempDivisorQuotient = (uint)((ulonglong)tempDivisor >> 0x20);\n      if ((tempMul - tempRemainder1 < tempDivisorQuotient) || ((tempMul - tempRemainder1 == tempDivisorQuotient && (dividend << numShifts < (uint)tempDivisor)))\n         ) {\n        tempQuotient = tempQuotient - 1;\n      }\n    }\n  }\n  return (ulonglong)tempQuotient;\n}\n\n",
            "renaming": {
                "FUN_00084860": "calculate_div_mod_00084860",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "tempDivisor",
                "uVar2": "tempQuotient",
                "uVar3": "tempQuotient1",
                "uVar4": "tempRemainder",
                "uVar5": "tempMul",
                "uVar6": "tempQuotient2",
                "uVar7": "tempRemainder1",
                "uVar8": "tempDivisorQuotient",
                "uVar9": "tempDivisorRemainder",
                "iVar10": "numShifts",
                "bVar11": "carryFlag"
            },
            "calling": [
                "__gnu_uldivmod_helper"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085844": {
            "entrypoint": "0x00085844",
            "current_name": "FUNC_00085844",
            "code": "\nvoid FUNC_00085844(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085844": "FUNC_00085844"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00085860": {
            "entrypoint": "0x00085860",
            "current_name": "FUNC_00085860",
            "code": "\nvoid FUNC_00085860(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085860": "FUNC_00085860"
            },
            "calling": [
                "__libc_fini_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_20070000": {
            "entrypoint": "0x20070000",
            "current_name": "disable_irq_interrupts_20070000",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid disableIRQInterrupts_20070000(void)\n\n{\n  disableIRQinterrupts();\n  do {\n  } while (-1 < *(int *)(DAT_2007001c + 8) << 0x1f);\n  *(undefined4 *)(DAT_2007001c + 4) = DAT_20070020;\n  do {\n  } while (-1 < *(int *)(DAT_2007001c + 8) << 0x1f);\n  *DAT_20070028 = DAT_20070024;\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_20070000": "disable_irq_interrupts_20070000"
            },
            "calling": [
                "tickReset",
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 128106,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080148",
            "FUN_0008014c",
            "FUN_00080164",
            "FUN_00080184",
            "FUN_000801e0",
            "FUN_00080250",
            "FUN_000803fc",
            "FUN_0008044c",
            "FUN_00080558",
            "FUN_00080568",
            "FUN_00080578",
            "FUN_00080588",
            "FUN_00080598",
            "FUN_000805a8",
            "FUN_000805e8",
            "FUN_000806a0",
            "FUN_000806ac",
            "FUN_000806f8",
            "FUN_0008073c",
            "FUN_00080750",
            "FUN_0008075c",
            "FUN_00080768",
            "FUN_00080774",
            "FUN_0008089c",
            "FUN_00080970",
            "FUN_000809b4",
            "FUN_000809be",
            "FUN_000809e4",
            "FUN_00080a0a",
            "FUN_00080a30",
            "FUN_00080a94",
            "FUN_00080aa8",
            "FUN_00080aec",
            "FUN_00080b2c",
            "FUN_00080b64",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080c20",
            "FUN_00080c98",
            "FUN_00080d30",
            "FUN_00080d3e",
            "FUN_00080d58",
            "FUN_00080d62",
            "FUN_00080d6a",
            "FUN_00080d70",
            "FUN_00080d80",
            "FUN_00080db8",
            "FUN_00080df0",
            "FUN_00080e28",
            "FUN_00080e60",
            "FUN_00080e62",
            "FUN_00080e66",
            "FUN_00080e6a",
            "FUN_00080e80",
            "FUN_00080e84",
            "FUN_00080e88",
            "FUN_00080ea4",
            "FUN_00080eaa",
            "FUN_00080eb0",
            "FUN_00080eba",
            "FUN_00080ebe",
            "FUN_00080ec2",
            "FUN_00080ec8",
            "FUN_00080eec",
            "FUN_00080efe",
            "FUN_00080f04",
            "FUN_00080f0c",
            "FUN_00081014",
            "FUN_00081084",
            "FUN_000810a6",
            "FUN_000810c4",
            "FUN_000810cc",
            "FUN_000810d8",
            "FUN_000810e8",
            "FUN_000810fc",
            "FUN_0008113a",
            "FUN_00081176",
            "FUN_0008117a",
            "FUN_00081190",
            "FUN_000811b0",
            "FUN_000811ca",
            "FUN_000811e8",
            "FUN_00081214",
            "FUN_00081244",
            "FUN_00081248",
            "FUN_0008125a",
            "FUN_00081276",
            "FUN_000812a0",
            "FUN_000812b8",
            "FUN_0008130c",
            "FUN_00081348",
            "FUN_0008136c",
            "FUN_000813dc",
            "FUN_000813e4",
            "FUN_0008142e",
            "FUN_00081438",
            "FUN_0008145c",
            "FUN_00081472",
            "FUN_00081480",
            "FUN_00081496",
            "FUN_000814ae",
            "FUN_000814d0",
            "FUN_000814f6",
            "FUN_0008151c",
            "FUN_00081560",
            "FUN_00081570",
            "FUN_0008159e",
            "FUN_000815b8",
            "FUN_000815de",
            "FUN_000815ec",
            "FUN_00081618",
            "FUN_00081624",
            "FUN_00081684",
            "FUN_000816c8",
            "FUN_000816d8",
            "FUN_000816e4",
            "FUN_000816ec",
            "FUN_000816f8",
            "FUN_00081734",
            "FUN_0008173c",
            "FUN_00081750",
            "FUN_00081778",
            "FUN_000817c8",
            "FUN_000817f0",
            "FUN_00081800",
            "FUN_00081810",
            "FUN_00081d48",
            "FUN_00081e34",
            "FUN_00081f00",
            "FUN_00081f9c",
            "FUN_00081fac",
            "FUN_0008236c",
            "FUN_00082390",
            "FUN_000825cc",
            "FUN_00082688",
            "FUN_000826e8",
            "FUN_000827fc",
            "FUN_00082814",
            "FUN_00082824",
            "FUN_0008289c",
            "FUN_000834f0",
            "FUN_0008356c",
            "FUN_00083630",
            "FUN_000836ec",
            "FUN_000836fc",
            "FUN_00083708",
            "FUN_00083850",
            "FUN_0008387c",
            "FUN_00083888",
            "FUN_00083984",
            "FUN_000839b4",
            "FUN_00083a74",
            "FUN_00083b10",
            "FUN_00083ca8",
            "FUN_00083fbc",
            "FUN_00084004",
            "FUN_0008400c",
            "FUN_00084018",
            "FUN_000840f8",
            "FUN_0008418c",
            "FUN_000841e4",
            "FUN_000841f4",
            "FUN_00084220",
            "FUN_00084244",
            "FUN_0008427c",
            "FUN_0008429c",
            "FUN_000842a4",
            "FUN_0008434c",
            "FUN_0008439c",
            "FUN_000843b8",
            "FUN_000843e0",
            "FUN_00084404",
            "FUN_00084484",
            "FUN_00084494",
            "FUN_000844bc",
            "FUN_000844e0",
            "FUN_00084508",
            "FUN_00084530",
            "FUN_0008455c",
            "FUN_0008458c",
            "FUN_000845c0",
            "FUN_00084860",
            "FUN_20070000"
        ]
    ],
    "locked_functions": []
}