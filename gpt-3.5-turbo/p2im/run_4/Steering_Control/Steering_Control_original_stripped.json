{
    "functions": {
        "FUN_000809b4": {
            "renaming": {
                "FUN_000809b4": "set_parameter_value_000809b4",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "parameter_index"
            },
            "code": "void set_parameter_value_000809b4(int base_address, undefined4 value, int parameter_index) {\n  if (parameter_index != 0) {\n    *(undefined4 *)(base_address + 100) = value;\n    return;\n  }\n  *(undefined4 *)(base_address + 0x60) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809b4",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "set_parameter_value_000809b4"
        },
        "FUN_00081560": {
            "renaming": {
                "__thiscall String::operator_": "MoveString",
                "this": "originalString",
                "rval": "newString",
                "move": "Move",
                "FUN_00081560": "MoveString_00081560"
            },
            "code": "String* __thiscall MoveString_00081560(String* originalString, String* newString)\n{\n  if (originalString != newString) {\n    Move(originalString, newString);\n  }\n  return originalString;\n}",
            "called": [
                "move"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081560",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "MoveString_00081560"
        },
        "FUN_00083980": {
            "renaming": {
                "FUN_00083980": "do_nothing_00083980"
            },
            "code": "\nvoid do_nothing_00083980(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083980",
            "calling": [
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00083980"
        },
        "FUN_00080e6a": {
            "renaming": {
                "FUN_00080e6a": "resetTickAndIncrementTimeTick_00080e6a",
                "iVar1": "isFalse"
            },
            "code": "void resetTickAndIncrementTimeTick_00080e6a(void)\n{\n  int isFalse = __false();\n  if (isFalse == 0) {\n    tickReset();\n    TimeTick_Increment();\n    return;\n  }\n  return;\n}",
            "called": [
                "TimeTick_Increment",
                "tickReset",
                "__false"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e6a",
            "calling": [],
            "imported": false,
            "current_name": "resetTickAndIncrementTimeTick_00080e6a"
        },
        "FUN_00081684": {
            "renaming": {
                "FUN_00081684": "find_value_00081684",
                "param_1": "values",
                "param_2": "mask",
                "param_3": "target",
                "param_4": "size",
                "iVar1": "index"
            },
            "code": "int find_value_00081684(uint* values, uint mask, uint target, int size) {\n  int index = 0;\n  while (size > 0) {\n    if ((*values & mask) != target) {\n      int i = size - 1;\n      while (i > 0) {\n        if ((*values & mask) == target) {\n          return index;\n        }\n        i--;\n      }\n      return -1;\n    }\n    index++;\n    size--;\n    values++;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081684",
            "calling": [
                "pulseIn"
            ],
            "imported": false,
            "current_name": "find_value_00081684"
        },
        "FUN_000825cc": {
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "__dest": "destination",
                "__src": "source",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "source_ptr_32_next",
                "puVar4": "source_ptr_32",
                "uVar5": "current_32bit_word",
                "uVar6": "current_byte",
                "puVar7": "destination_ptr_32_next",
                "puVar8": "destination_ptr_32",
                "pcVar9": "destination_ptr",
                "bVar10": "is_null_byte"
            },
            "code": "char* copy_string_000825cc(char* destination, char* source)\n{\n    char current_char;\n    ushort current_short;\n    uint* source_ptr_32;\n    uint* destination_ptr_32;\n    uint current_32bit_word;\n    uint* source_ptr_32_next;\n    uint* destination_ptr_32_next;\n    bool is_null_byte;\n\n    char* destination_ptr = destination;\n\n    if ((((uint)destination ^ (uint)source) & 3) != 0)\n    {\n        do\n        {\n            current_char = *source;\n            *destination_ptr = current_char;\n            source++;\n            destination_ptr++;\n        } while (current_char != '\\0');\n\n        return destination;\n    }\n\n    destination_ptr_32 = (uint*)destination;\n\n    if (((uint)source & 3) != 0)\n    {\n        source_ptr_32 = (uint*)source;\n\n        if (((uint)source & 1) != 0)\n        {\n            source_ptr_32 = (uint*)(source + 1);\n            current_char = *source;\n            destination_ptr_32 = (uint*)(destination + 1);\n            *destination = current_char;\n\n            if (current_char == '\\0')\n            {\n                return destination;\n            }\n        }\n\n        source = (char*)source_ptr_32;\n\n        if (((uint)source_ptr_32 & 2) != 0)\n        {\n            source = (char*)((int)source_ptr_32 + 2);\n            current_short = *(ushort*)source_ptr_32;\n            is_null_byte = (current_short & 0xff) == 0;\n\n            if (is_null_byte)\n            {\n                *(char*)destination_ptr_32 = (char)current_short;\n            }\n            else\n            {\n                *(ushort*)destination_ptr_32 = current_short;\n                is_null_byte = (current_short & 0xff00) == 0;\n                destination_ptr_32 = (uint*)((int)destination_ptr_32 + 2);\n            }\n\n            if (is_null_byte)\n            {\n                return destination;\n            }\n        }\n    }\n\n    current_32bit_word = *(uint*)source;\n    source_ptr_32_next = (uint*)((int)source + 4);\n    destination_ptr_32_next = destination_ptr_32;\n\n    if (((uint)source & 4) != 0)\n    {\n        if ((current_32bit_word + 0xfefefeff & ~current_32bit_word & 0x80808080) != 0)\n        {\n            goto LAB_00082630;\n        }\n\n        destination_ptr_32_next = destination_ptr_32 + 1;\n        *destination_ptr_32 = current_32bit_word;\n        source_ptr_32_next = (uint*)((int)source + 8);\n        current_32bit_word = *(uint*)((int)source + 4);\n    }\n\n    while (true)\n    {\n        source_ptr_32 = source_ptr_32_next + 1;\n        current_32bit_word = *source_ptr_32_next;\n        destination_ptr_32 = destination_ptr_32_next;\n\n        if ((current_32bit_word + 0xfefefeff & ~current_32bit_word & 0x80808080) != 0)\n        {\n            break;\n        }\n\n        destination_ptr_32_next = destination_ptr_32_next + 1;\n        *destination_ptr_32 = current_32bit_word;\n        current_32bit_word = *source_ptr_32;\n\n        if ((current_32bit_word + 0xfefefeff & ~current_32bit_word & 0x80808080) != 0)\n        {\n            break;\n        }\n\n        source_ptr_32_next = source_ptr_32_next + 2;\n        destination_ptr_32_next = destination_ptr_32_next + 2;\n        *destination_ptr_32 = current_32bit_word;\n    }\n\nLAB_00082630:\n    do\n    {\n        *(char*)destination_ptr_32 = (char)current_32bit_word;\n        uint current_byte = current_32bit_word & 0xff;\n        current_32bit_word = current_32bit_word >> 8 | current_32bit_word << 0x18;\n        destination_ptr_32 = (uint*)((int)destination_ptr_32 + 1);\n    } while (current_byte != 0);\n\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825cc",
            "calling": [
                "copy",
                "concat",
                "move"
            ],
            "imported": false,
            "current_name": "copy_string_000825cc"
        },
        "FUN_00083984": {
            "renaming": {
                "FUN_00083984": "execute_global_destructors_00083984",
                "iVar1": "num_destructors",
                "ppcVar2": "destructor"
            },
            "code": "void execute_global_destructors_00083984(void)\n{\n  int num_destructors = (int)PTR___fini_array_end_000839b0 - (int)PTR___do_global_dtors_aux_fini_array_entry_000839ac >> 2;\n  if (num_destructors != 0) {\n    code **destructor = (code **)(PTR___do_global_dtors_aux_fini_array_entry_000839ac + num_destructors * 4);\n    do {\n      num_destructors = num_destructors - 1;\n      destructor = destructor - 1;\n      (**destructor)();\n    } while (num_destructors != 0);\n  }\n  _fini();\n  return;\n}",
            "called": [
                "_fini",
                "__do_global_dtors_aux"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083984",
            "calling": [],
            "imported": false,
            "current_name": "execute_global_destructors_00083984"
        },
        "FUN_00080598": {
            "renaming": {
                "FUN_00080598": "controlServoTimer5_00080598",
                "_timer5": "timer5Pin",
                "DAT_000805a4": "servoPosition"
            },
            "code": "void controlServoTimer5_00080598(void)\\n{\\n  Servo_Handler(timer5Pin, DAT_000805a4, \"\\0\");\\n  return;\\n}",
            "called": [
                "Servo_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080598",
            "calling": [],
            "imported": false,
            "current_name": "controlServoTimer5_00080598"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "is_param_valid_00080aa8",
                "param_1": "param",
                "uVar1": "bit_mask"
            },
            "code": "int is_param_valid_00080aa8(uint param) {\n  uint bit_mask;\n  if (param < 45) {\n    if (param < 32) {\n      bit_mask = 1 << (param & 0xff);\n      if ((bit_mask & *(uint *)(DAT_00080ae8 + 0x18)) != bit_mask) {\n        *(uint *)(DAT_00080ae8 + 0x10) = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (param - 0x20 & 0xff);\n      if ((bit_mask & *(uint *)(DAT_00080ae8 + 0x108)) != bit_mask) {\n        *(uint *)(DAT_00080ae8 + 0x100) = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "pinMode",
                "init",
                "init",
                "_initISR"
            ],
            "imported": false,
            "current_name": "is_param_valid_00080aa8"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "execute_function_if_initialized_00080118",
                "param_1": "a",
                "param_2": "b",
                "param_3": "c",
                "param_4": "d",
                "DAT_00080134": "is_initialized",
                "PTR_object_7862_0008013c": "initialized_object",
                "PTR__etext_00080140": "end_of_text",
                "DAT_00080144": "function_pointer"
            },
            "code": "void execute_function_if_initialized_00080118(int a, char* b, int c, int d)\n{\n  if (DAT_00080134 != 0) {\n    b = PTR_object_7862_0008013c;\n  }\n  if ((*(int *)PTR__etext_00080140 != 0) && (DAT_00080144 != (code *)0x0)) {\n    (*DAT_00080144)(PTR__etext_00080140, b, c, DAT_00080144, d);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "execute_function_if_initialized_00080118"
        },
        "FUN_00083a74": {
            "renaming": {
                "FUN_00083a74": "allocate_memory_block_00083a74",
                "param_1": "heap_base",
                "param_2": "requested_size",
                "puVar1": "malloc_av",
                "puVar2": "mallinfo",
                "iVar3": "sbrk_r_result",
                "uVar4": "heap_size",
                "iVar5": "block_size",
                "PTR___malloc_av__00083b04": "malloc_av",
                "PTR___malloc_current_mallinfo_00083b08": "mallinfo",
                "PTR___malloc_sbrk_base_00083b0c": "sbrk_base"
            },
            "code": "int allocate_memory_block_00083a74(void* heap_base, int requested_size) {\n    void* PTR___malloc_av__00083b04 = PTR___PTR___malloc_av__00083b04__00083b04;\n    void* PTR___malloc_current_mallinfo_00083b08 = PTR___malloc_current_PTR___malloc_current_mallinfo_00083b08_00083b08;\n    void* PTR___malloc_sbrk_base_00083b0c = PTR___malloc_PTR___malloc_sbrk_base_00083b0c_00083b0c;\n    __malloc_lock();\n    uint heap_size = *(uint*)(*(int*)(PTR___malloc_av__00083b04 + 8) + 4) & 0xfffffffc;\n    int block_size = ((heap_size - requested_size) + 0xfef & 0xfffff000) - 0x1000;\n    int success = 0;\n    if (0xfff < block_size) {\n        int sbrk_r_result = _sbrk_r(heap_base, 0);\n        if (sbrk_r_result == *(int*)(PTR___malloc_av__00083b04 + 8) + heap_size) {\n            sbrk_r_result = _sbrk_r(heap_base, -block_size);\n            if (sbrk_r_result != -1) {\n                int PTR___malloc_current_mallinfo_00083b08_size = *(int*)PTR___malloc_current_mallinfo_00083b08;\n                *(uint*)(*(int*)(PTR___malloc_av__00083b04 + 8) + 4) = heap_size - block_size | 1;\n                *(int*)PTR___malloc_current_mallinfo_00083b08 = PTR___malloc_current_mallinfo_00083b08_size - block_size;\n                success = 1;\n            }\n            else {\n                int heap_end = _sbrk_r(heap_base, 0);\n                uint new_heap_size = heap_end - *(int*)(PTR___malloc_av__00083b04 + 8);\n                if (0xf < (int)new_heap_size) {\n                    int PTR___malloc_sbrk_base_00083b0c_result = *(int*)PTR___malloc_sbrk_base_00083b0c;\n                    *(uint*)(*(int*)(PTR___malloc_av__00083b04 + 8) + 4) = new_heap_size | 1;\n                    *(int*)PTR___malloc_current_mallinfo_00083b08 = heap_end - PTR___malloc_sbrk_base_00083b0c_result;\n                }\n            }\n        }\n    }\n    __malloc_unlock(heap_base);\n    return success;\n}",
            "called": [
                "__malloc_lock",
                "__malloc_unlock",
                "_sbrk_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083a74",
            "calling": [
                "_free_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00083a74"
        },
        "FUN_00080e80": {
            "renaming": {
                "FUN_00080e80": "returnZero_00080e80"
            },
            "code": "int returnZero_00080e80(void) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e80",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "returnZero_00080e80"
        },
        "FUN_00080d62": {
            "renaming": {
                "FUN_00080d62": "set_param_to_max_00080d62",
                "param_1": "param_value",
                "*(undefined4 *)(param_1 + 0x14)": "*(int *)(param_value + 0x14)"
            },
            "code": "void set_param_to_max_00080d62(int param_value)\n{\n  *(int *)(param_value + 0x14) = 65535;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d62",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_param_to_max_00080d62"
        },
        "FUN_00080e84": {
            "renaming": {
                "FUN_00080e84": "wait_indefinitely_00080e84"
            },
            "code": "void wait_indefinitely_00080e84(void)\n{\n  while(true)\n  {\n    // Do nothing\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e84",
            "calling": [
                "SVC_Handler",
                "__halt",
                "PendSV_Handler"
            ],
            "imported": false,
            "current_name": "wait_indefinitely_00080e84"
        },
        "FUN_000814f6": {
            "renaming": {
                "FUN_000814f6::FUN_000814f6": "String::String",
                "this": "this",
                "cstr": "cstr",
                "length": "str_length",
                "buffer": "buffer",
                "capacity": "capacity",
                "len": "len",
                "copy": "copy_string",
                "FUN_000814f6": "String_000814f6"
            },
            "code": "String_000814f6* __thiscall String_000814f6::String_000814f6(String_000814f6* this, char* cstr)\n{\n  size_t str_length;\n  \n  this->buffer = nullptr;\n  this->capacity = 0;\n  this->len = 0;\n  \n  if (cstr != nullptr) {\n    str_length = strlen(cstr);\n    copy_string(this, cstr, str_length);\n  }\n  return this;\n}",
            "called": [
                "copy",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814f6",
            "calling": [
                "_GLOBAL__sub_I_steering",
                "readStringUntil"
            ],
            "imported": false,
            "current_name": "String_000814f6"
        },
        "FUN_0008397c": {
            "renaming": {
                "FUN_0008397c": "do_nothing_0008397c"
            },
            "code": "\nvoid do_nothing_0008397c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008397c",
            "calling": [
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0008397c"
        },
        "FUN_00080e88": {
            "renaming": {
                "FUN_00080e88": "allocate_memory_00080e88",
                "incr": "increment",
                "puVar1": "heap_pointer",
                "pcVar2": "allocated_memory",
                "PTR_heap_00080e9c": "heap_start",
                "PTR__ebss_00080ea0": "bss_end"
            },
            "code": "caddr_t allocate_memory_00080e88(int increment) {\n  undefined *heap_pointer;\n  caddr_t allocated_memory;\n  \n  heap_pointer = PTR_heap_00080e9c;\n  if (*(int *)heap_pointer == 0) {\n    *(undefined **)heap_pointer = PTR__ebss_00080ea0;\n  }\n  allocated_memory = *(caddr_t *)heap_pointer;\n  *(caddr_t *)heap_pointer = allocated_memory + increment;\n  return allocated_memory;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e88",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_00080e88"
        },
        "FUN_000836d8": {
            "renaming": {
                "FUN_000836d8": "initializeIfNotDone_000836d8",
                "DAT_000836e4": "initializedFlag",
                "DAT_000836e8": "cleanup"
            },
            "code": "void initializeIfNotDone_000836d8(void)\n{\n  if (DAT_000836e4 != 0) {\n    atexit(DAT_000836e8);\n    return;\n  }\n  return;\n}",
            "called": [
                "atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836d8",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "initializeIfNotDone_000836d8"
        },
        "FUN_000812b8": {
            "renaming": {
                "FUN_000812b8": "sendData_000812b8",
                "this": "uart",
                "uc_data": "dataToSend",
                "pRVar1": "txBuffer",
                "uVar2": "nextHeadIndex",
                "_pUart": "_uartPeripheral",
                "UART_SR": "uartStatus",
                "_tx_buffer": "txBuffer",
                "_iTail": "tailIndex",
                "_iHead": "headIndex",
                "_aucBuffer": "buffer"
            },
            "code": "size_t __thiscall UARTClass::sendData_000812b8(UARTClass *uart,uint8_t dataToSend)\n{\n  RingBuffer *txBuffer;\n  uint32_t uartStatus;\n  uint32_t nextHeadIndex;\n  \n  txBuffer = uart->_tx_buffer;\n  uartStatus = uart->_pUart->UART_SR << 0x1e;\n  \n  if (((int)uartStatus < 0) && (txBuffer->_iTail == txBuffer->_iHead)) {\n    uart->_pUart->UART_THR = (uint32_t)dataToSend;\n  }\n  else {\n    nextHeadIndex = (DAT_00081308 & txBuffer->_iHead) + 1U;\n    if ((int)nextHeadIndex < 0) {\n      nextHeadIndex = (nextHeadIndex - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (txBuffer->_iTail == nextHeadIndex);\n    txBuffer->_aucBuffer[txBuffer->_iHead] = dataToSend;\n    txBuffer->_iHead = nextHeadIndex;\n    uart->_pUart->UART_IER = 2;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000812b8",
            "calling": [],
            "imported": false,
            "current_name": "sendData_000812b8"
        },
        "FUN_00081570": {
            "renaming": {
                "FUN_00081570": "reserve_and_append_string_00081570",
                "this": "string",
                "cstr": "new_string",
                "length": "new_string_length",
                "size": "new_length",
                "uVar1": "success_flag"
            },
            "code": "unsigned char reserve_and_append_string_00081570(String *string, char *new_string, uint new_string_length)\n{\n  unsigned char success_flag;\n  uint new_length;\n  \n  if (new_string == NULL) {\n    return 0;\n  }\n  if (new_string_length != 0) {\n    new_length = string->length + new_string_length;\n    success_flag = reserve(string,new_length);\n    if (success_flag == 0) {\n      return 0;\n    }\n    strcpy(string->data + string->length,new_string);\n    string->length = new_length;\n  }\n  return 1;\n}",
            "called": [
                "strcpy",
                "reserve"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081570",
            "calling": [
                "concat"
            ],
            "imported": false,
            "current_name": "reserve_and_append_string_00081570"
        },
        "FUN_000803fc": {
            "renaming": {
                "FUN_000803fc": "configure_timer_000803fc",
                "tc": "timer",
                "channel": "channel",
                "id": "peripheral_id",
                "irqn": "irqn",
                "pmc_enable_periph_clk": "enable_peripheral_clock",
                "TC_Configure": "configure_timer_settings",
                "TC_SetRA": "set_timer_ra_value",
                "DAT_00080448": "interrupt_register_base_address",
                "TC_IER_CPAS": "timer_interrupt_enable_bit",
                "TC_Start": "start_timer"
            },
            "code": "void configure_timer_000803fc(Tc *timer, uint32_t channel, uint32_t peripheral_id, IRQn_Type irqn) {\n  pmc_enable_periph_clk(peripheral_id);\n  TC_Configure(timer, channel, TC_CMR_TCCLKS_TIMER_CLOCK1 | TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC);\n  TC_SetRA(timer, channel, 0xa41);\n  uint32_t* interrupt_register = (uint32_t*)(DAT_00080448 + ((uint)(int)irqn >> 5) * 4);\n  *interrupt_register = 1 << ((int)irqn & 0x1fU);\n  timer->TC_CHANNEL[channel].TC_IER = TC_IER_CPAS;\n  TC_Start(timer, channel);\n  return;\n}",
            "called": [
                "TC_Start",
                "pmc_enable_periph_clk",
                "TC_Configure",
                "TC_SetRA"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803fc",
            "calling": [
                "attach"
            ],
            "imported": false,
            "current_name": "configure_timer_000803fc"
        },
        "FUN_00083630": {
            "renaming": {
                "FUN_00083630": "add_to_list_00083630",
                "param_1": "list_size",
                "param_2": "item",
                "param_3": "list",
                "param_4": "list_size_ptr",
                "puVar1": "current_list",
                "uVar2": "next_index",
                "iVar3": "impure_ptr_value",
                "uVar4": "bit_mask"
            },
            "code": "int add_to_list_00083630(int list_size, int item, int *list, int *list_size_ptr) {\n  int *current_list;\n  uint next_index;\n  int impure_ptr_value;\n  uint bit_mask;\n  \n  impure_ptr_value = *(int *)PTR__global_impure_ptr_000836d0;\n  current_list = *(int **)(impure_ptr_value + 0x148);\n  if (current_list == (int *)0x0) {\n    current_list = (int *)(impure_ptr_value + 0x14c);\n    *(int **)(impure_ptr_value + 0x148) = current_list;\n  }\n  next_index = current_list[1];\n  if (0x1f < (int)next_index) {\n    if (DAT_000836d4 != 0) {\n      current_list = (int *)malloc(400);\n      if (current_list != (int *)0x0) {\n        *current_list = *(int *)(impure_ptr_value + 0x148);\n        current_list[1] = 0;\n        next_index = 0;\n        *(int **)(impure_ptr_value + 0x148) = current_list;\n        current_list[0x62] = 0;\n        current_list[99] = 0;\n        goto LAB_00083686;\n      }\n    }\n    return -1;\n  }\nLAB_00083686:\n  if (list_size != 0) {\n    bit_mask = 1 << (next_index & 0xff);\n    current_list[next_index + 0x22] = item;\n    current_list[0x62] = current_list[0x62] | bit_mask;\n    current_list[next_index + 0x42] = *list_size_ptr;\n    if (list_size == 2) {\n      current_list[99] = bit_mask | current_list[99];\n    }\n  }\n  current_list[1] = next_index + 1;\n  current_list[next_index + 2] = *list;\n  return 0;\n}",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083630",
            "calling": [
                "__cxa_atexit",
                "atexit"
            ],
            "imported": false,
            "current_name": "add_to_list_00083630"
        },
        "FUN_00081214": {
            "renaming": {
                "FUN_00081214": "readStreamUntilTerminator_00081214",
                "this": "stream",
                "terminator": "terminator",
                "iVar1": "currentChar",
                "__return_storage_ptr__": "__return_storage_ptr__",
                "PTR_DAT_00081240": "PTR_DAT_00081240"
            },
            "code": "String * __thiscall readStreamUntilTerminator_00081214(String *__return_storage_ptr__, Stream *stream, char terminator)\n{\n  int currentChar;\n  String::String(__return_storage_ptr__, PTR_DAT_00081240);\n  while (true) {\n    currentChar = timedRead(stream);\n    if ((currentChar < 0) || (currentChar == terminator)) break;\n    String::concat(__return_storage_ptr__, (char)currentChar);\n  }\n  return __return_storage_ptr__;\n}",
            "called": [
                "concat",
                "String",
                "timedRead"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081214",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "readStreamUntilTerminator_00081214"
        },
        "FUN_0008439c": {
            "renaming": {
                "FUN_0008439c": "write_byte_to_memory_0008439c",
                "param_1": "memory",
                "param_2": "address",
                "param_3": "byte",
                "*param_1": "*memory",
                "*param_2": "*(char*)address"
            },
            "code": "int write_byte_to_memory_0008439c(unsigned int *memory, void *address, unsigned int byte) {\n  if (address == NULL) {\n    return 0;\n  }\n  if (byte < 256) {\n    *(char*)address = (char)byte;\n    return 1;\n  }\n  *memory = 138;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008439c",
            "calling": [
                "_wcrtomb_r"
            ],
            "imported": false,
            "current_name": "write_byte_to_memory_0008439c"
        },
        "FUN_0008427c": {
            "renaming": {
                "FUN_0008427c": "seek_and_update_file_pointer_0008427c",
                "param_1": "file_descriptor",
                "param_2": "ptr_param_2",
                "iVar1": "seek_position",
                "uVar2": "flag"
            },
            "code": "void seek_and_update_file_pointer_0008427c(int file_descriptor, int* ptr_param_2) {\n  int seek_position = _lseek_r(file_descriptor, (int)*(short *)(ptr_param_2 + 0xe));\n  ushort flag;\n  if (seek_position == -1) {\n    flag = *(ushort *)(ptr_param_2 + 0xc) & 0xefff;\n  }\n  else {\n    flag = *(ushort *)(ptr_param_2 + 0xc) | 0x1000;\n  }\n  if (seek_position != -1) {\n    *(int *)(ptr_param_2 + 0x50) = seek_position;\n  }\n  *(ushort *)(ptr_param_2 + 0xc) = flag;\n  return;\n}",
            "called": [
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008427c",
            "calling": [],
            "imported": false,
            "current_name": "seek_and_update_file_pointer_0008427c"
        },
        "FUN_000809be": {
            "renaming": {
                "FUN_000809be": "update_parameters_000809be",
                "param_1": "object_address",
                "param_2": "update_type",
                "param_3": "new_value",
                "uVar1": "current_value"
            },
            "code": "void update_parameters_000809be(int object_address, uint32_t update_type, uint32_t new_value)\n{\n  uint32_t current_value;\n  \n  *(uint32_t *)(object_address + 0x44) = new_value;\n  switch(update_type) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    current_value = *(uint32_t *)(object_address + 0x70) & *(uint32_t *)(object_address + 0x70) & ~new_value;\n    break;\n  case 2:\n    current_value = *(uint32_t *)(object_address + 0x70) | new_value;\n    break;\n  default:\n    goto invalid_update_type;\n  }\n  *(uint32_t *)(object_address + 0x70) = current_value;\ninvalid_update_type:\n  *(uint32_t *)(object_address + 4) = new_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809be",
            "calling": [
                "PIO_Configure"
            ],
            "imported": false,
            "current_name": "update_parameters_000809be"
        },
        "FUN_00080d70": {
            "renaming": {
                "FUN_00080d70": "execute_isr_if_registered_00080d70",
                "PTR_gpf_isr_00080d7c": "isr_ptr",
                "code": "function_ptr",
                "isr_ptr": "isr_pointer",
                "isr_func": "isr_function"
            },
            "code": "void execute_isr_if_registered_00080d70(void)\n{\n  code** PTR_gpf_isr_00080d7c = *(code**)(PTR_gpf_isr_00080d7c);\n  if (PTR_gpf_isr_00080d7c != NULL)\n  {\n    code* isr_func = *PTR_gpf_isr_00080d7c;\n    (*isr_func)();\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d70",
            "calling": [],
            "imported": false,
            "current_name": "execute_isr_if_registered_00080d70"
        },
        "FUN_000840f8": {
            "renaming": {
                "FUN_000840f8": "find_byte_000840f8",
                "__s": "data",
                "__c": "byte_to_find",
                "__n": "size",
                "puVar1": "end_uint",
                "puVar2": "current_uint",
                "uVar3": "byte_mask",
                "uVar4": "byte_masked",
                "pbVar5": "current_byte",
                "pbVar6": "end_byte",
                "uVar7": "byte_match",
                "bVar8": "found_match"
            },
            "code": "void * find_byte_000840f8(void *data, int byte_to_find, size_t size) {\n    uint *current_uint, *end_uint;\n    uint byte_mask, byte_mask_shifted;\n    byte *current_byte, *end_byte;\n    uint byte_match, byte_not_match, byte_masked;\n    bool found_match = false;\n\n    byte_mask = byte_to_find & 0xff;\n\n    if (((uint)data & 3) == 0) {\n        current_uint = (uint *)data;\n        end_uint = (uint *)(size & ~3);\n\n        byte_match = byte_mask | (byte_mask << 8) | (byte_mask << 16) | (byte_mask << 24);\n        byte_not_match = ~byte_match;\n\n        while (current_uint < end_uint) {\n            byte_masked = *current_uint ^ byte_match;\n            if ((byte_masked + 0xfefefeff & ~byte_masked & 0x80808080) != 0) {\n                found_match = true;\n                break;\n            }\n            current_uint++;\n        }\n\n        data = (void *)current_uint;\n        end_byte = (byte *)(size + (int)data - 1);\n\n        if (!found_match && (uint *)data != (uint *)0x0 && *(byte *)current_uint != byte_mask) {\n            current_byte = (byte *)data;\n            while (current_byte < end_byte) {\n                current_byte++;\n                if (*current_byte == byte_mask) {\n                    found_match = true;\n                    break;\n                }\n            }\n        }\n    }\n    else if (size != 0) {\n        current_byte = (byte *)data;\n        end_byte = current_byte + size;\n\n        if (*current_byte != byte_mask) {\n            current_byte++;\n            while ((uint)current_byte & 3 && current_byte < end_byte) {\n                if (*current_byte == byte_mask) {\n                    found_match = true;\n                    break;\n                }\n                current_byte++;\n            }\n\n            if (!found_match) {\n                current_uint = (uint *)current_byte;\n                end_uint = (uint *)(size & ~3);\n\n                byte_match = byte_mask | (byte_mask << 8) | (byte_mask << 16) | (byte_mask << 24);\n                byte_not_match = ~byte_match;\n\n                while (current_uint < end_uint) {\n                    byte_masked = *current_uint ^ byte_match;\n                    if ((byte_masked + 0xfefefeff & ~byte_masked & 0x80808080) != 0) {\n                        found_match = true;\n                        break;\n                    }\n                    current_uint++;\n                }\n\n                current_byte = (byte *)current_uint;\n            }\n        }\n\n        if (!found_match && current_byte < end_byte && *current_byte != byte_mask) {\n            while (current_byte < end_byte) {\n                current_byte++;\n                if (*current_byte == byte_mask) {\n                    found_match = true;\n                    break;\n                }\n            }\n        }\n\n        data = (void *)current_byte;\n    }\n\n    return data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000840f8",
            "calling": [
                "_vfiprintf_r",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "find_byte_000840f8"
        },
        "FUN_000813e4": {
            "renaming": {
                "FUN_000813e4": "receive_000813e4",
                "this": "self",
                "pRVar1": "tx_buffer",
                "RVar2": "uart_sr",
                "_pUart": "uart",
                "_rx_buffer": "rx_buffer",
                "_tx_buffer": "tx_buffer"
            },
            "code": "void __thiscall UARTClass::receive_000813e4(UARTClass *this)\n{\n  RingBuffer *rx_buffer = this->_rx_buffer;\n  RoReg uart_sr = this->_pUart->UART_SR;\n  if ((int)(uart_sr << 0x1f) < 0) {\n    RingBuffer::store_char(rx_buffer, (uint8_t)this->_pUart->UART_RHR);\n  }\n  if ((int)(uart_sr << 0x1e) < 0) {\n    RingBuffer *tx_buffer = this->_tx_buffer;\n    if (tx_buffer->_iTail != tx_buffer->_iHead) {\n      this->_pUart->UART_THR = (uint)tx_buffer->_aucBuffer[tx_buffer->_iTail];\n      tx_buffer->_iTail = (tx_buffer->_iTail + 1U) & 0x7f;\n      return;\n    }\n    this->_pUart->UART_IDR = 2;\n  }\n  return;\n}",
            "called": [
                "store_char"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e4",
            "calling": [
                "USART1_Handler",
                "USART3_Handler",
                "USART0_Handler",
                "UART_Handler"
            ],
            "imported": false,
            "current_name": "receive_000813e4"
        },
        "FUN_0008289c": {
            "renaming": {
                "FUN_0008289c": "FUNC_0008289c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_0008289c(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********__s;\n  bool bVar29;\n  longlong lVar30;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    __sinit();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    iVar11 = __swsetup_r(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)__sbprintf(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_000828ee:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082902:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082952;\n        }\n        iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_00083142;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082952:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar29 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082976:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_0008297a:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        __s = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082984_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar29 << 6, bVar29 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((bVar2) || (bVar29 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_00082e50;\n      if (bVar1 == false) goto LAB_00082efa;\nLAB_00082d1a:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082d2e;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      __s = (byte ********)&local_90;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((bVar2 == false) && (bVar29 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)piVar27 < 0) {\n        bVar29 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar29);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082adc;\n    case 0x68:\n      bVar29 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar29) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x73:\n      __s = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (__s != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)strlen((char *)__s);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)memchr(__s,0,(size_t)local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)__s);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)__s)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      __s = (byte ********)PTR_s__null__000834e8;\nLAB_00082d76:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!bVar1) goto LAB_00082ce0;\nLAB_00082bc6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      if (bVar1 != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((bVar2 == false) && (bVar29 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082ace:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082adc:\n    lVar30 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      __s = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082b04;\n      __s = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082afe;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          __s = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar30 >> 0x20);\n          cVar13 = '\\n';\n          __aeabi_uldivmod((int)lVar30,uVar28,10,0);\n          *(char *)__s = cVar13 + '0';\n          lVar30 = __aeabi_uldivmod((int)lVar30,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)__s + -1);\n        } while (lVar30 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)__s);\n        goto LAB_00082b04;\n      }\n      local_69 = (char)piVar23 + '0';\n      __s = (byte ********)(&cStack_6a + 1);\n      goto LAB_00083282;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_000830e2;\n    do {\n      __s = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)__s = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)__s + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)__s);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (local_94 != (byte *******)0x0) {\n    __sprint_r_part_0(param_1,param_2,&local_9c);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_000830e2:\n  do {\n    __s = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)__s = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)__s + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082afe:\n      local_d4 = (byte *******)((int)local_68 - (int)__s);\n    }\n    else {\n      *(undefined *)((int)__s + -1) = 0x30;\n      __s = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_00083282:\n    local_d4 = (byte *******)((int)local_68 - (int)__s);\n  }\nLAB_00082b04:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082b1e:\n  pppppppbVar20 = (byte *******)PTR_blanks_6717_00082e4c;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_blanks_6717_00083474;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_00083142;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_00083142;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_zeroes_6718_00083470;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_000831f2:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_00083218:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_zeroes_6718_0008312c;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_0008302a:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)__s;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_000831be;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c), iVar11 != 0\n       )) goto LAB_00083142;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00082fe6:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_0008300e:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_0008302a;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_0008302a;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])__s;\nLAB_000831be:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_blanks_6717_00083130;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_blanks_6717_000834ec;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_0008307a:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_000830a2;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_000830a2:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083186;\n      }\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_00083142;\nLAB_00083186:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "called": [
                "__sbprintf",
                "__aeabi_uldivmod",
                "__swsetup_r",
                "strlen",
                "__sprint_r.part.0",
                "memchr",
                "__sinit"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0008289c",
            "calling": [
                "__sbprintf",
                "iprintf",
                "fiprintf"
            ],
            "imported": false,
            "current_name": "FUNC_0008289c"
        },
        "FUN_00081d48": {
            "renaming": {
                "FUN_00081d48": "copy_memory_00081d48",
                "__dest": "destination",
                "__src": "source",
                "__n": "size",
                "puVar1": "dest8",
                "puVar2": "dest32",
                "puVar3": "dest32",
                "puVar4": "dest8",
                "puVar5": "src32",
                "puVar6": "src8",
                "uVar7": "i",
                "uVar8": "j",
                "bVar9": "is_remaining"
            },
            "code": "void * copy_memory_00081d48(void *destination, const void *source, size_t size)\n{\n    uint32_t *dest32 = (uint32_t *)destination;\n    const uint32_t *src32 = (const uint32_t *)source;\n    uint8_t *dest8;\n    const uint8_t *src8;\n    size_t i;\n    \n    // Copy bytes until destination is aligned to 4 bytes\n    while ((size > 0) && ((uintptr_t)dest32 & 3)) {\n        *(uint8_t *)dest32++ = *(const uint8_t *)src32++;\n        size--;\n    }\n    \n    // Copy 4 bytes at a time\n    dest8 = (uint8_t *)dest32;\n    src8 = (const uint8_t *)src32;\n    i = size / 4;\n    while (i-- > 0) {\n        *dest32++ = *src32++;\n        *dest32++ = *src32++;\n        *dest32++ = *src32++;\n        *dest32++ = *src32++;\n    }\n    \n    // Copy remaining bytes\n    dest8 = (uint8_t *)dest32;\n    src8 = (const uint8_t *)src32;\n    i = size & 3;\n    while (i-- > 0) {\n        *dest8++ = *src8++;\n    }\n    \n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d48",
            "calling": [
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "copy_memory_00081d48"
        },
        "FUN_00083fbc": {
            "renaming": {
                "FUN_00083fbc": "process_data_00083fbc",
                "param_1": "data_count",
                "param_2": "process_func",
                "uVar1": "process_result",
                "iVar2": "sub_data_ptr",
                "iVar3": "sub_data_count",
                "uVar4": "result",
                "piVar5": "data_ptr"
            },
            "code": "uint process_data_00083fbc(int data_count, code *process_func) {\n  uint result = 0;\n  int *data_ptr = (int *)(data_count + 0x2e0);\n  if (data_ptr != (int *)0x0) {\n    do {\n      int sub_data_ptr = data_ptr[2];\n      int sub_data_count = data_ptr[1] + -1;\n      if (-1 < sub_data_count) {\n        do {\n          sub_data_count = sub_data_count + -1;\n          if ((1 < *(ushort *)(sub_data_ptr + 0xc)) && (*(short *)(sub_data_ptr + 0xe) != -1)) {\n            uint process_result = (*process_func)(sub_data_ptr);\n            result = result | process_result;\n          }\n          sub_data_ptr = sub_data_ptr + 0x68;\n        } while (sub_data_count != -1);\n      }\n      data_ptr = (int *)*data_ptr;\n    } while (data_ptr != (int *)0x0);\n    return result;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083fbc",
            "calling": [
                "_cleanup_r"
            ],
            "imported": false,
            "current_name": "process_data_00083fbc"
        },
        "FUN_00084494": {
            "renaming": {
                "FUN_00084494": "get_file_status_00084494",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "file_stats",
                "puVar1": "error_ptr",
                "iVar2": "status_code"
            },
            "code": "void get_file_status_00084494(int *error_code, int file_descriptor, struct stat *file_stats)\n{\n  int status_code;\n  int *error_ptr;\n  error_ptr = PTR_errno_000844b8;\n  *(int *)PTR_errno_000844b8 = 0;\n  status_code = _fstat(file_descriptor, file_stats);\n  if ((status_code == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_fstat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084494",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "get_file_status_00084494"
        },
        "FUN_00084018": {
            "renaming": {
                "FUN_00084018": "allocate_memory_00084018",
                "param_1": "file_descriptor",
                "param_2": "memory_block",
                "uVar1": "permissions",
                "iVar2": "status",
                "iVar3": "size",
                "uVar4": "permissions_mask",
                "bVar5": "is_regular_file",
                "auStack_54": "NULL",
                "local_50": "unused",
                "DAT_000840f0": "unused",
                "DAT_000840f4": "unused"
            },
            "code": "void allocate_memory_00084018(int file_descriptor, int *memory_block){\n    ushort permissions = *(ushort *)(memory_block + 3);\n    uint permissions_mask = (uint)permissions;\n    if ((int)(permissions_mask << 0x1e) < 0) {\n        *memory_block = (int)memory_block + 0x43;\n        memory_block[4] = (int)memory_block + 0x43;\n        memory_block[5] = 1;\n        return;\n    }\n    if (-1 < *(short *)((int)memory_block + 0xe)) {\n        int status = _fstat_r(file_descriptor,(int)*(short *)((int)memory_block + 0xe),NULL);\n        if (-1 < status) {\n            bool is_regular_file = (status & 0xf000) == 0x8000;\n            if (is_regular_file && (memory_block[10] == DAT_000840f4)) {\n                int size = 0x400;\n                *(ushort *)(memory_block + 3) = permissions | 0x400;\n                memory_block[0x13] = 0x400;\n            }\n            else {\n                int size = 0x400;\n                *(ushort *)(memory_block + 3) = permissions | 0x800;\n            }\n            goto ALLOCATE_MEMORY;\n        }\n        permissions = *(ushort *)(memory_block + 3);\n        permissions_mask = (uint)permissions;\n    }\n    *(ushort *)(memory_block + 3) = permissions | 0x800;\n    int size = (permissions_mask & 0x80) == 0 ? 0x400 : 0x40;\n    bool is_terminal = false;\n    ALLOCATE_MEMORY:\n    int *allocated_memory = _malloc_r(file_descriptor,size);\n    permissions = *(ushort *)(memory_block + 3);\n    if (allocated_memory == 0) {\n        if (-1 < (int)((uint)permissions_mask << 0x16)) {\n          *(ushort *)(memory_block + 3) = permissions | 2;\n          *memory_block = (int)memory_block + 0x43;\n          memory_block[4] = (int)memory_block + 0x43;\n          memory_block[5] = 1;\n        }\n    }\n    else {\n        *(undefined4 *)(file_descriptor + 0x3c) = DAT_000840f0;\n        *(ushort *)(memory_block + 3) = permissions | 0x80;\n        *memory_block = allocated_memory;\n        memory_block[4] = allocated_memory;\n        memory_block[5] = size;\n        if ((is_regular_file) && (_isatty_r(file_descriptor,(int)*(short *)((int)memory_block + 0xe)) != 0)) {\n            *(ushort *)(memory_block + 3) = permissions | 1;\n        }\n    }\n}",
            "called": [
                "_malloc_r",
                "_isatty_r",
                "_fstat_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084018",
            "calling": [
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_00084018"
        },
        "FUN_000815de": {
            "renaming": {
                "String::FUN_000815de": "convertStringToLong",
                "this": "str",
                "lVar1": "result",
                "buffer": "buffer",
                "FUN_000815de": "convertStringToLong_000815de"
            },
            "code": "long convertStringToLong_000815de(String* str) {\n  long result = 0;\n  if (str->buffer != nullptr) {\n    result = atol(str->buffer);\n  }\n  return result;\n}",
            "called": [
                "atol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815de",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "convertStringToLong_000815de"
        },
        "FUN_00080578": {
            "renaming": {
                "FUN_00080578": "servo_timer3_handler_00080578",
                "_timer3": "timer3_instance",
                "DAT_00080584": "servo_position",
                "'\\x02'": "servo_action"
            },
            "code": "void servo_timer3_handler_00080578(void)\n{\n  Servo_Handler(timer3_instance, DAT_00080584, servo_action);\n  return;\n}",
            "called": [
                "Servo_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080578",
            "calling": [],
            "imported": false,
            "current_name": "servo_timer3_handler_00080578"
        },
        "FUN_000841e4": {
            "renaming": {
                "FUN_000841e4": "signal_handler_000841e4",
                "__sig": "signal",
                "iVar1": "result",
                "_FUN_000841e4_r": "_signal_handler_r"
            },
            "code": "int signal_handler_000841e4(int signal)\n{\n  int result = _signal_handler_000841e4_r(*(undefined4 *)PTR__impure_ptr_000841f0, signal);\n  return result;\n}",
            "called": [
                "_raise_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000841e4",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "signal_handler_000841e4"
        },
        "FUN_0008400c": {
            "renaming": {
                "FUN_0008400c": "get_mb_cur_max_0008400c",
                "PTR___mb_cur_max_00084014": "mb_cur_max_ptr"
            },
            "code": "int get_mb_cur_max_0008400c(void)\n{\n  int* PTR___mb_cur_max_00084014 = (int*)PTR___mb_cur_max_00084014;\n  int mb_cur_max = *PTR___mb_cur_max_00084014;\n  return mb_cur_max;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008400c",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "get_mb_cur_max_0008400c"
        },
        "FUN_00080e60": {
            "renaming": {
                "FUN_00080e60": "wait_forever_00080e60"
            },
            "code": "void wait_forever_00080e60(void)\n{\n  while(true) {\n    // do nothing\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e60",
            "calling": [
                "__halt"
            ],
            "imported": false,
            "current_name": "wait_forever_00080e60"
        },
        "FUN_000814d0": {
            "renaming": {
                "FUN_000814d0": "setString_000814d0",
                "this": "stringObj",
                "cstr": "str",
                "length": "length",
                "uVar1": "isReserved",
                "reserve": "reserveMemory",
                "invalidate": "invalidateString",
                "len": "length",
                "buffer": "strBuffer"
            },
            "code": "String* __thiscall String::setString_000814d0(String* this, char* str, uint length)\\n{\\n  uchar isReserved;\\n\\n  isReserved = reserveMemory(this, length);\\n  if (isReserved == \"\\0\") {\\n    invalidateString(this);\\n  }\\n  else {\\n    this->length = length;\\n    strcpy(this->strBuffer, str);\\n  }\\n  return this;\\n}",
            "called": [
                "strcpy",
                "reserve",
                "invalidate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814d0",
            "calling": [
                "String"
            ],
            "imported": false,
            "current_name": "setString_000814d0"
        },
        "FUN_00080c20": {
            "renaming": {
                "FUN_00080c20": "copy_memory_and_clear_bss_00080c20",
                "puVar1": "bss_start",
                "puVar2": "text_start",
                "iVar3": "i",
                "puVar4": "exception_table",
                "PTR_banzai_00080c7c": "bss_start",
                "PTR__etext_00080c78": "text_start",
                "PTR_completed_7857_00080c80": "bss_end",
                "DAT_00080c90": "exception_table_ptr",
                "PTR__ebss_00080c88": "bss_end",
                "PTR_exception_table_00080c8c": "exception_table",
                "PTR_exception_table_00080c8c + -0x20000000": "exception_table_offset",
                "*(undefined4 *)(puVar1 + iVar3)": "*(undefined4 *)(bss_start + i)",
                "*(undefined4 *)(puVar2 + iVar3)": "*(undefined4 *)(text_start + i)",
                "*(uint *)(DAT_00080c90 + 8)": "exception_table_base",
                "*puVar4": "*exception_table",
                "*puVar4 = 0": "*exception_table = 0",
                "*(uint *)(iVar3 + 8)": "*exception_table_ptr",
                "*(uint *)(iVar3 + 8) | 0x20000000": "*exception_table_ptr |= 0x20000000",
                "(*DAT_00080c94)()": "call to function pointed by DAT_00080c94"
            },
            "code": "void copy_memory_and_clear_bss_00080c20() {\n  undefined *PTR_banzai_00080c7c = PTR__ebss_00080c88;\n  undefined *PTR__etext_00080c78 = PTR__etext_00080c78;\n  undefined *PTR_completed_7857_00080c80 = PTR_completed_7857_00080c84;\n  undefined4 *PTR_exception_table_00080c8c = (undefined4 *)PTR_PTR_exception_table_00080c8c_00080c8c;\n  uint *DAT_00080c90 = (uint *)(DAT_00080c90 + 8);\n\n  if (PTR__etext_00080c78 != PTR_banzai_00080c7c) {\n    for (int i = 0; PTR_banzai_00080c7c + i < PTR_completed_7857_00080c80; i += 4) {\n      *(undefined4 *)(PTR_banzai_00080c7c + i) = *(undefined4 *)(PTR__etext_00080c78 + i);\n    }\n  }\n\n  while (PTR_exception_table_00080c8c < (undefined4 *)PTR__ebss_00080c88) {\n    *PTR_exception_table_00080c8c = 0;\n    PTR_exception_table_00080c8c++;\n  }\n\n  uint *(uint *)(DAT_00080c90 + 8) = (uint)PTR_PTR_exception_table_00080c8c_00080c8c & 0x1fffff80;\n  uint PTR_PTR_exception_table_00080c8c_00080c8c + -0x20000000 = (uint)(PTR_PTR_exception_table_00080c8c_00080c8c + -0x20000000);\n\n  if (PTR_PTR_exception_table_00080c8c_00080c8c + -0x20000000 < 0x100000) {\n    *DAT_00080c90 |= 0x20000000;\n  }\n\n  (*DAT_00080c94)();\n  while (true) {\n    // Do nothing\n  }\n}",
            "called": [
                "main",
                "banzai"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c20",
            "calling": [],
            "imported": false,
            "current_name": "copy_memory_and_clear_bss_00080c20"
        },
        "FUN_00080e62": {
            "renaming": {
                "FUN_00080e62": "wait_forever_00080e62"
            },
            "code": "void wait_forever_00080e62(void)\n{\n  while(true)\n  {\n    // Do nothing\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e62",
            "calling": [],
            "imported": false,
            "current_name": "wait_forever_00080e62"
        },
        "FUN_00080efc": {
            "renaming": {
                "FUN_00080efc": "do_nothing_00080efc"
            },
            "code": "\nvoid do_nothing_00080efc(int pid_UNUSED,int sig_UNUSED)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efc",
            "calling": [
                "_kill_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00080efc"
        },
        "FUN_0008044c": {
            "renaming": {
                "FUN_0008044c": "update_servo_0008044c",
                "timer": "timer_sequence",
                "tc": "timer_counter",
                "channel": "servo_channel",
                "bVar1": "servo_count_val",
                "puVar2": "servo_channel_ptr",
                "puVar3": "servo_count",
                "puVar4": "servo_data_ptr",
                "uVar5": "timer",
                "RVar6": "clock_speed",
                "iVar7": "servo_index"
            },
            "code": "void update_servo_0008044c(timer16_Sequence_t timer, Tc *timer_counter, uint8_t channel) {\n    uint8_t servo_channel = channel;\n    uint8_t *servo_count = ServoCount;\n    uint8_t *servo_channel_ptr = ServoChannel;\n    uint8_t *servo_data_ptr = ServoData;\n    uint8_t *servo_pin_ptr = ServoPin;\n    uint16_t servo_value;\n    uint32_t clock_speed = *(uint32_t *)SystemCoreClock / SERVO_CLOCK_FREQ / 5;\n\n    if ((servo_channel_ptr[timer] & SERVO_SWEEP_MODE) == 0) {\n        uint16_t servo_index = timer * SERVO_DATA_SIZE;\n        if ((servo_channel_ptr[timer] + servo_index < servo_count[timer]) && (servo_channel_ptr[timer] < SERVO_MAX_CHANNELS)) {\n            servo_value = *(uint16_t *)(servo_data_ptr + servo_channel_ptr[timer] + servo_index);\n            timer_counter->TC_CHANNEL[servo_channel].TC_RA = timer_counter->TC_CHANNEL[servo_channel].TC_CV + servo_value * clock_speed / 1000;\n            servo_channel_ptr[timer]++;\n        }\n    }\n    else {\n        timer_counter->TC_CHANNEL[servo_channel].TC_CCR = TC_CCR_SWTRG;\n    }\n}",
            "called": [
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008044c",
            "calling": [
                "TC5_Handler",
                "TC3_Handler",
                "TC4_Handler",
                "TC2_Handler",
                "TC0_Handler"
            ],
            "imported": false,
            "current_name": "update_servo_0008044c"
        },
        "FUN_00080efe": {
            "renaming": {
                "FUN_00080efe": "get_invalid_pid_00080efe"
            },
            "code": "__pid_t get_invalid_pid_00080efe(void)\n{\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efe",
            "calling": [
                "_getpid_r"
            ],
            "imported": false,
            "current_name": "get_invalid_pid_00080efe"
        },
        "FUN_00081e34": {
            "renaming": {
                "FUN_00081e34": "reverse_memcpy_00081e34",
                "__dest": "destination",
                "__src": "source",
                "__n": "numBytes",
                "iVar1": "i",
                "puVar2": "destinationAligned",
                "puVar3": "sourceAligned",
                "puVar4": "destinationEndAligned",
                "puVar5": "destinationEnd",
                "puVar7": "sourceEnd",
                "uVar6": "remainingBytes",
                "uVar8": "numUnalignedBytes"
            },
            "code": "void * reverse_memcpy_00081e34(void *destination, const void *source, size_t numBytes) {\n    int i;\n    uint remainingBytes;\n    uint *destinationAligned = (uint *)destination;\n    uint *sourceAligned = (uint *)source;\n    uint numAlignedWords = numBytes >> 4;\n    uint numUnalignedBytes = numBytes & 0xF;\n    uint *destinationEndAligned = destinationAligned + numAlignedWords;\n    uint *sourceEndAligned = sourceAligned + numAlignedWords;\n    if (source < destination && destination < (uint *)source + numBytes) {\n        char *destinationEnd = (char *)destination + numBytes;\n        char *sourceEnd = (char *)source + numBytes;\n        i = numBytes - 1;\n        while (i >= 0) {\n            *(destinationEnd - 1) = *(sourceEnd - 1);\n            destinationEnd--;\n            sourceEnd--;\n            i--;\n        }\n    } else if (numBytes >= 16 && (((uint)destinationAligned | (uint)sourceAligned) & 3) == 0) {\n        while (destinationAligned != destinationEndAligned) {\n            *destinationAligned++ = *sourceAligned++;\n            *destinationAligned++ = *sourceAligned++;\n            *destinationAligned++ = *sourceAligned++;\n            *destinationAligned++ = *sourceAligned++;\n        }\n        remainingBytes = numUnalignedBytes;\n        if (remainingBytes > 0) {\n            char *destinationEnd = (char *)destination + numBytes;\n            char *sourceEnd = (char *)source + numBytes;\n            while (remainingBytes--) {\n                *(destinationEnd - 1) = *(sourceEnd - 1);\n                destinationEnd--;\n                sourceEnd--;\n            }\n        }\n    } else {\n        while (destinationAligned != destinationEndAligned) {\n            *destinationAligned++ = *sourceAligned++;\n        }\n        if (numUnalignedBytes > 0) {\n            char *destinationEnd = (char *)destination + numBytes;\n            char *sourceEnd = (char *)source + numBytes;\n            while (numUnalignedBytes--) {\n                *(destinationEnd - 1) = *(sourceEnd - 1);\n                destinationEnd--;\n                sourceEnd--;\n            }\n        }\n    }\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e34",
            "calling": [
                "_realloc_r",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "reverse_memcpy_00081e34"
        },
        "FUN_00080e66": {
            "renaming": {
                "FUN_00080e66": "infiniteLoop_00080e66"
            },
            "code": "void infiniteLoop_00080e66() \n{\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e66",
            "calling": [],
            "imported": false,
            "current_name": "infiniteLoop_00080e66"
        },
        "FUN_000826e8": {
            "renaming": {
                "FUN_000826e8": "parse_integer_from_string_000826e8",
                "param_1": "output",
                "param_2": "input_string",
                "param_3": "endptr",
                "param_4": "base",
                "bVar1": "current_char_type",
                "bVar2": "is_negative",
                "uVar3": "result",
                "pbVar4": "current_char_ptr",
                "uVar5": "current_char_value",
                "pbVar6": "previous_char_ptr",
                "iVar7": "hex_digit_offset",
                "iVar8": "previous_op_status",
                "uVar9": "max_divisor",
                "uVar10": "max_value",
                "*PTR___ctype_ptr___000827f8": "char_types_array"
            },
            "code": "int parse_integer_from_string_000826e8(undefined4 *output, byte *input_string, byte **endptr, uint base) {\n  byte current_char;\n  byte previous_char;\n  uint current_digit_value;\n  uint max_divisor;\n  uint previous_digit_value;\n  uint result;\n  int sign = 1;\n\n  while (is_space(*input_string)) {\n    input_string++;\n  }\n\n  previous_char = *input_string;\n  if (previous_char == '-') {\n    sign = -1;\n    input_string++;\n  }\n  else if (previous_char == '+') {\n    input_string++;\n  }\n\n  if ((base & 0xffffffef) == 0) {\n    if (*input_string == '0') {\n      if (to_upper(input_string[1]) == 'X') {\n        base = 16;\n        input_string += 2;\n      }\n      else if (base == 0) {\n        base = 8;\n      }\n    }\n    else if (base == 0) {\n      base = 10;\n    }\n  }\n\n  if (sign > 0) {\n    max_divisor = 0x7fffffff / base;\n  }\n  else {\n    max_divisor = 0x80000000 / base;\n  }\n\n  previous_digit_value = 0;\n  result = 0;\n  while (1) {\n    current_char = *input_string;\n    current_digit_value = get_digit_value(current_char, base);\n    if (current_digit_value >= base) {\n      break;\n    }\n    if (previous_digit_value != -1) {\n      if ((max_divisor <= result && result != max_divisor) || ((result == max_divisor && ((int)(0 - base * max_divisor) < current_digit_value))))) {\n        previous_digit_value = -1;\n      }\n      else {\n        result = base * result + current_digit_value;\n        previous_digit_value = 1;\n      }\n    }\n    input_string++;\n  }\n\n  if (previous_digit_value == -1) {\n    if (sign > 0) {\n      result = 0x7fffffff;\n    }\n    else {\n      result = 0x80000000;\n    }\n    *output = '\"';\n    if (endptr == NULL) {\n      return result;\n    }\n  }\n  else {\n    if (sign < 0) {\n      result = -result;\n    }\n    if (endptr == NULL) {\n      return result;\n    }\n    if (previous_digit_value == 0) {\n      *endptr = input_string - 1;\n    }\n  }\n  *endptr = input_string;\n  *output = 0;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000826e8",
            "calling": [
                "strtol"
            ],
            "imported": false,
            "current_name": "parse_integer_from_string_000826e8"
        },
        "FUN_00080df0": {
            "renaming": {
                "FUN_00080df0": "execute_callbacks_00080df0",
                "uVar1": "leading_zeroes",
                "uVar2": "bit_field",
                "PTR_callbacksPioC_00080e24": "PTR_callbacks",
                "DAT_00080e20": "DAT_offset",
                "bit_mask": "bit_mask",
                "bit_field": "bit_field",
                "leading_zeroes": "leading_zeroes",
                "bit_index": "bit_index",
                "callback": "callback"
            },
            "code": "void execute_callbacks_00080df0() {\n  uint bit_mask;\n  uint bit_field = *(uint *)(DAT_00080e20 + 0x4c);\n  while( true ) {\n    uint leading_zeroes = count_leading_zeroes(bit_field);\n    if (leading_zeroes > 0x1f) break;\n    uint bit_index = 0x1f - leading_zeroes;\n    code* callback = *(code **)(PTR_callbacksPioC_00080e24PioC_00080e24 + bit_index * 4);\n    if (callback != (code *)0x0) {\n      (*callback)();\n    }\n    bit_mask = ~(1 << bit_index);\n    bit_field &= bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080df0",
            "calling": [],
            "imported": false,
            "current_name": "execute_callbacks_00080df0"
        },
        "FUN_00083850": {
            "renaming": {
                "FUN_00083850": "flush_buffer_if_not_empty_00083850",
                "param_1": "buffer_address",
                "param_2": "short_integer_address",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void flush_buffer_if_not_empty_00083850(int buffer_address,int short_integer_address)\n{\n  if ((buffer_address != 0) && (*(int *)(buffer_address + 0x38) == 0)) {\n    __sinit();\n  }\n  if (*(short *)(short_integer_address + 0xc) == 0) {\n    return;\n  }\n  __sflush_r(buffer_address);\n  return;\n}",
            "called": [
                "__sflush_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083850",
            "calling": [
                "__sbprintf",
                "__swbuf_r",
                "_fclose_r",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "flush_buffer_if_not_empty_00083850"
        },
        "FUN_000815ec": {
            "renaming": {
                "FUN_000815ec": "main_000815ec",
                "in_r0": "context",
                "init": "initialize",
                "initVariant": "initializeVariant",
                "DAT_00081614": "data"
            },
            "code": "int main_000815ec(void)\n{\n  EVP_PKEY_CTX *context;\n  _watchdogDefaultSetup();\n  initialize(context);\n  initializeVariant();\n  delay(1);\n  setup();\n  do {\n    do {\n      loop();\n    } while (DAT_00081614 == 0);\n    serialEventRun();\n  } while( true );\n}",
            "called": [
                "serialEventRun",
                "setup",
                "_watchdogDefaultSetup",
                "delay",
                "loop",
                "init",
                "initVariant"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815ec",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "main_000815ec"
        },
        "FUN_000827fc": {
            "renaming": {
                "FUN_000827fc": "convertStringToLong_000827fc",
                "__nptr": "stringToConvert",
                "__endptr": "endPointer",
                "__base": "base",
                "lVar1": "convertedValue"
            },
            "code": "long convertStringToLong_000827fc(char* stringToConvert, char** endPointer, int base)\n{\n  long convertedValue;\n  \n  convertedValue = _convertStringToLong_000827fc_r(*(undefined4 *)PTR__impure_ptr_00082810, stringToConvert, endPointer, base);\n  return convertedValue;\n}",
            "called": [
                "_strtol_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000827fc",
            "calling": [
                "atol"
            ],
            "imported": false,
            "current_name": "convertStringToLong_000827fc"
        },
        "FUN_00080588": {
            "renaming": {
                "FUN_00080588": "servoHandlerTimer4_00080588",
                "DAT_00080594": "position",
                "_timer4": "timer"
            },
            "code": "void servoHandlerTimer4_00080588(int timer, int DAT_00080594, char mode)\n{\n  Servo_Handler(timer, DAT_00080594, mode);\n  return;\n}",
            "called": [
                "Servo_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080588",
            "calling": [],
            "imported": false,
            "current_name": "servoHandlerTimer4_00080588"
        },
        "FUN_00080d3e": {
            "renaming": {
                "FUN_00080d3e": "update_flags_00080d3e",
                "param_1": "flags_address",
                "param_2": "flag_value",
                "param_3": "flag_mask",
                "param_4": "flag_shift",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void update_flags_00080d3e(int flags_address, uint32_t flag_value, uint32_t flag_mask, uint32_t flag_shift) {\n    uint32_t *flags_ptr = (uint32_t *)(flags_address + 4);\n    *flags_ptr |= flag_value | ((flag_mask & 0xf) << 0x18) | ((flag_shift & 3) << 0x1c);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d3e",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "update_flags_00080d3e"
        },
        "FUN_00081438": {
            "renaming": {
                "FUN_00081438::FUN_00081438": "constructor",
                "this": "self",
                "Usart": "uart",
                "dwIrq": "irq",
                "dwId": "id",
                "RingBuffer": "rx_buffer, tx_buffer",
                "_pUsart": "uart",
                "super_UARTClass": "uart",
                "PTR_PTR_write_1_00081458": "write_ptr",
                "FUN_00081438": "UARTClass_00081438"
            },
            "code": "UARTClass_00081438::UARTClass_00081438(Uart *uart, IRQn_Type irq, uint32_t id, RingBuffer *rx_buffer, RingBuffer *tx_buffer)\n{\n  this->super_UARTClass_00081438 = uart;\n  this->PTR_PTR_write_1_00081458 = PTR_PTR_write_1_00081458;\n  this->rx_buffer = rx_buffer;\n  this->tx_buffer = tx_buffer;\n  this->irq = irq;\n  this->id = id;\n}\n\nUARTClass_00081438 * __thiscall constructor(UARTClass_00081438 *this, Usart *uart, IRQn_Type irq, uint32_t id, RingBuffer *rx_buffer, RingBuffer *tx_buffer)\n{\n  UARTClass_00081438::UARTClass_00081438(&this->super_UARTClass_00081438, uart, irq, id, rx_buffer, tx_buffer);\n  this->_pUsart = uart;\n  return this;\n}",
            "called": [
                "UARTClass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081438",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "UARTClass_00081438"
        },
        "FUN_000841f4": {
            "renaming": {
                "FUN_000841f4": "kill_process_if_exists_and_set_error_000841f4",
                "param_1": "error_code",
                "param_2": "process_id",
                "param_3": "signal",
                "puVar1": "errno_ptr"
            },
            "code": "void kill_process_if_exists_and_set_error_000841f4(int *error_code, int process_id, int signal) {\n  undefined *errno_ptr;\n  errno_ptr = PTR_errno_00084218;\n  *(undefined4 *)PTR_errno_00084218 = 0;\n  _kill(process_id, signal);\n  if ((process_id == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_kill"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000841f4",
            "calling": [
                "_raise_r",
                "kill"
            ],
            "imported": false,
            "current_name": "kill_process_if_exists_and_set_error_000841f4"
        },
        "FUN_000812a0": {
            "renaming": {
                "FUN_000812a0": "waitForTxBufferEmpty_000812a0",
                "this": "this",
                "_tx_buffer": "txBuffer",
                "_iHead": "txBufferHead",
                "_iTail": "txBufferTail",
                "_pUart": "uart",
                "UART_SR": "uartStatusRegister"
            },
            "code": "void __thiscall UARTClass::waitForTxBufferEmpty_000812a0(UARTClass *this)\n{\n    while (this->txBufferHead != this->txBufferTail);\n    while (-1 < (int)(this->uart->UART_SR << 0x16));\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000812a0",
            "calling": [],
            "imported": false,
            "current_name": "waitForTxBufferEmpty_000812a0"
        },
        "FUN_0008130c": {
            "renaming": {
                "FUN_0008130c": "update_rx_buffer_0008130c",
                "this": "uart_obj",
                "_rx_buffer": "rx_buffer",
                "_iHead": "rx_buffer_head",
                "_iTail": "rx_buffer_tail",
                "_dwIrq": "irq_num",
                "DAT_00081344": "rx_status_reg",
                "_dwId": "peripheral_id"
            },
            "code": "void __thiscall UARTClass::update_rx_buffer_0008130c(UARTClass *uart_obj)\n{\n  uart_obj->rx_buffer_head = uart_obj->rx_buffer_tail;\n  (**(code **)(*(int *)uart_obj + 0x14))();\n  *(int *)(DAT_00081344 + (((uint)(int)uart_obj->irq_num >> 5) + 0x20) * 4) = 1 << (uint)(byte)(uart_obj->irq_num & 0x1f);\n  pmc_disable_periph_clk(uart_obj->peripheral_id);\n  return;\n}",
            "called": [
                "pmc_disable_periph_clk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008130c",
            "calling": [],
            "imported": false,
            "current_name": "update_rx_buffer_0008130c"
        },
        "FUN_0008142e": {
            "renaming": {
                "FUN_0008142e": "initialize_USART_0008142e",
                "dwBaudRate": "baud_rate",
                "super_UARTClass": "uart_class"
            },
            "code": "void __thiscall initialize_USART_0008142e(USARTClass *this, uint32_t baud_rate) {\n  UARTClass::init(&this->uart_class, baud_rate, 0x8c0);\n  return;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008142e",
            "calling": [],
            "imported": false,
            "current_name": "initialize_USART_0008142e"
        },
        "FUN_00080d58": {
            "renaming": {
                "FUN_00080d58": "set_bit_in_variable_00080d58",
                "param_1": "variable_address",
                "param_2": "bit_position",
                "*(int *)(param_1 + 0x14)": "variable_pointer",
                "1 << (param_2 & 0xff)": "bit_mask"
            },
            "code": "void set_bit_in_variable_00080d58(int variable_address, uint bit_position){\n    int* variable_pointer = (int*)(variable_address + 0x14);\n    int bit_mask = 1 << (bit_position & 0xff);\n    *variable_pointer = bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d58",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "set_bit_in_variable_00080d58"
        },
        "FUN_00081084": {
            "renaming": {
                "__thiscall Print::FUN_00081084": "print_buffer",
                "*this": "print_obj",
                "pPVar1": "current_print_obj",
                "sVar2": "bytes_written",
                "size": "buffer_size",
                "uint8_t *buffer": "uint8_t *buffer",
                "size_t": "size_t",
                "FUN_00081084": "print_buffer_00081084"
            },
            "code": "size_t __thiscall print_buffer_00081084(Print *print_obj, uint8_t *buffer, size_t buffer_size) {\n  Print *current_print_obj;\n  size_t bytes_written = 0;\n  current_print_obj = print_obj;\n  while ((bytes_written != buffer_size &&\n         (current_print_obj = (Print *)(**print_obj->_vptr_Print)(current_print_obj, (uint)buffer[bytes_written]),\n         current_print_obj != (Print *)0x0))) {\n    bytes_written = bytes_written + 1;\n  }\n  return bytes_written;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081084",
            "calling": [],
            "imported": false,
            "current_name": "print_buffer_00081084"
        },
        "FUN_00080558": {
            "renaming": {
                "FUN_00080558": "servoHandler_00080558",
                "_timer1": "timer1",
                "DAT_00080564": "servoPosition"
            },
            "code": "void servoHandler_00080558(void)\\n{\\n  Servo_Handler(timer1, DAT_00080564, \"\\0\");\\n  return;\\n}",
            "called": [
                "Servo_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080558",
            "calling": [],
            "imported": false,
            "current_name": "servoHandler_00080558"
        },
        "FUN_00083708": {
            "renaming": {
                "FUN_00083708": "process_data_00083708",
                "param_1": "data_ptr",
                "param_2": "info_ptr",
                "piVar1": "temp_ptr",
                "iVar2": "buffer_size",
                "uVar3": "info_flags",
                "uVar4": "info_flags_and_size",
                "iVar5": "data_size",
                "pcVar6": "process_func_ptr",
                "iVar7": "process_result"
            },
            "code": "undefined4 process_data_00083708(int* data_ptr, int* info_ptr)\n{\n    int* temp_ptr;\n    int buffer_size;\n    ushort info_flags;\n    uint info_flags_and_size;\n    int data_size;\n    code* process_func_ptr;\n    int process_result;\n\n    info_flags = *(ushort*)(info_ptr + 3);\n    if ((int)((uint)info_flags << 0x1c) < 0)\n    {\n        buffer_size = info_ptr[4];\n        if (buffer_size == 0)\n        {\n            return 0;\n        }\n        data_size = *info_ptr;\n        if ((info_flags & 3) == 0)\n        {\n            data_size = info_ptr[5];\n        }\n        else\n        {\n            data_size = 0;\n        }\n        *info_ptr = buffer_size;\n        data_size = data_size - buffer_size;\n        info_ptr[2] = data_size;\n        do\n        {\n            if (data_size < 1)\n            {\n                return 0;\n            }\n            process_result = (*(code*)info_ptr[9])(data_ptr, info_ptr[7], buffer_size, data_size);\n            data_size = data_size - process_result;\n            buffer_size = buffer_size + process_result;\n        } while (0 < process_result);\n    LAB_000837c8:\n        *(ushort*)(info_ptr + 3) = *(ushort*)(info_ptr + 3) | 0x40;\n        return 0xffffffff;\n    }\n    *(ushort*)(info_ptr + 3) = info_flags | 0x800;\n    if ((info_ptr[1] < 1) && (info_ptr[0xf] < 1))\n    {\n        return 0;\n    }\n    process_func_ptr = (code*)info_ptr[10];\n    if (process_func_ptr == (code*)0x0)\n    {\n        return 0;\n    }\n    info_flags_and_size = (uint)(info_flags | 0x800);\n    buffer_size = *data_ptr;\n    *data_ptr = 0;\n    if ((info_flags & 0x1000) == 0)\n    {\n        data_size = (*process_func_ptr)(data_ptr, info_ptr[7], info_flags_and_size & 0x1000, 1);\n        if ((data_size == -1) && (process_result = *data_ptr, process_result != 0))\n        {\n            if ((process_result == 0x1d) || (process_result == 0x16))\n            {\n                *data_ptr = buffer_size;\n                return 0;\n            }\n            goto LAB_000837c8;\n        }\n        info_flags_and_size = (uint)*(ushort*)(info_ptr + 3);\n        process_func_ptr = (code*)info_ptr[10];\n    }\n    else\n    {\n        data_size = info_ptr[0x14];\n    }\n    if (((int)(info_flags_and_size << 0x1d) < 0) && (data_size = data_size - info_ptr[1], info_ptr[0xc] != 0))\n    {\n        data_size = data_size - info_ptr[0xf];\n    }\n    data_size = (*process_func_ptr)(data_ptr, info_ptr[7], data_size, 0);\n    if (data_size == -1)\n    {\n        process_result = *data_ptr;\n        if (process_result != 0)\n        {\n            if ((process_result != 0x1d) && (process_result != 0x16))\n            {\n                *(ushort*)(info_ptr + 3) = *(ushort*)(info_ptr + 3) | 0x40;\n                return 0xffffffff;\n            }\n            *(ushort*)(info_ptr + 3) = *(ushort*)(info_ptr + 3) & 0xf7ff;\n            *info_ptr = info_ptr[4];\n            info_ptr[1] = 0;\n            goto LAB_00083774;\n        }\n        info_flags = *(ushort*)(info_ptr + 3) & 0xf7ff;\n        info_ptr[1] = 0;\n        *(ushort*)(info_ptr + 3) = info_flags;\n        *info_ptr = info_ptr[4];\n    }\n    else\n    {\n        info_flags = *(ushort*)(info_ptr + 3) & 0xf7ff;\n        *info_ptr = info_ptr[4];\n        *(ushort*)(info_ptr + 3) = info_flags;\n        info_ptr[1] = 0;\n    }\n    if ((int)((uint)info_flags << 0x13) < 0)\n    {\n        info_ptr[0x14] = data_size;\n    }\nLAB_00083774:\n    temp_ptr = (int*)info_ptr[0xc];\n    *data_ptr = buffer_size;\n    if (temp_ptr == (int*)0x0)\n    {\n        return 0;\n    }\n    if (temp_ptr != info_ptr + 0x10)\n    {\n        _free_r(data_ptr);\n    }\n    info_ptr[0xc] = 0;\n    return 0;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083708",
            "calling": [
                "_fflush_r"
            ],
            "imported": false,
            "current_name": "process_data_00083708"
        },
        "FUN_0008458c": {
            "renaming": {
                "FUN_0008458c": "calculate_difference_0008458c",
                "param_1": "numerator",
                "param_2": "denominator",
                "param_3": "multiplier_1",
                "param_4": "multiplier_2",
                "param_5": "difference",
                "uVar1": "product"
            },
            "code": "void calculate_difference_0008458c(uint numerator, int denominator, undefined4 multiplier_1, undefined4 multiplier_2, int *difference)\n{\n  uint product = numerator * ((uint64_t)multiplier_1 | ((uint64_t)multiplier_2 << 32));\n  difference[0] = numerator - product;\n  difference[1] = denominator - ((int)(product >> 32) + (numerator < product));\n  return;\n}",
            "called": [
                "__udivdi3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008458c",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "calculate_difference_0008458c"
        },
        "FUN_0008434c": {
            "renaming": {
                "FUN_0008434c": "convert_wchar_to_char_and_set_error_if_failed_0008434c",
                "param_1": "output",
                "param_2": "output_size",
                "param_3": "input_size",
                "param_4": "error_code",
                "uVar1": "locale_charset",
                "iVar2": "result",
                "pcVar3": "conversion_function",
                "auStack_24": "unused_buffer"
            },
            "code": "void convert_wchar_to_char_and_set_error_if_failed_0008434c(char* output, int output_size, wchar_t* input, int input_size, int* error_code) {\n  \n  code* conversion_function = *(code**)PTR___wctomb_00084398;\n  \n  undefined4 locale_charset = __locale_charset();\n  \n  int result;\n  if (input_size == 0) {\n    result = (*conversion_function)(output, (undefined*)0, 0, locale_charset, error_code);\n  }\n  else {\n    result = (*conversion_function)(output, output_size, input, locale_charset, error_code);\n  }\n  \n  if (result == -1) {\n    *error_code = 0;\n    *output = 0x8a;\n  }\n  \n  return;\n}",
            "called": [
                "__ascii_wctomb",
                "__locale_charset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008434c",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "convert_wchar_to_char_and_set_error_if_failed_0008434c"
        },
        "FUN_0008151c": {
            "renaming": {
                "FUN_0008151c": "copyFrom_0008151c",
                "this": "destinationString",
                "rhs": "sourceString",
                "__dest": "destination",
                "PTR_0008155c": "somePointer",
                "DAT_0008155c": "someData",
                "buffer": "buffer",
                "len": "length",
                "capacity": "capacity"
            },
            "code": "void __thiscall String::copyFrom_0008151c(String *this, String *source) {\n  char *destination;\n  destination = this->buffer;\n  if (destination != NULL) {\n    if (source->buffer != NULL && source->length <= this->capacity) {\n      strcpy(destination, source->buffer);\n      this->length = source->length;\n      return;\n    }\n    free(destination);\n  }\n  this->buffer = source->buffer;\n  this->capacity = source->capacity;\n  this->length = source->length;\n  source->buffer = NULL;\n  source->capacity = 0;\n  source->length = 0;\n}\n",
            "called": [
                "strcpy",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008151c",
            "calling": [
                "operator="
            ],
            "imported": false,
            "current_name": "copyFrom_0008151c"
        },
        "FUN_000816f8": {
            "renaming": {
                "FUN_000816f8": "print_assertion_failed_info_000816f8",
                "param_1": "line_number",
                "param_2": "column_number",
                "param_3": "expression",
                "param_4": "error_code",
                "puVar1": "expression_string",
                "puVar2": "file_name_string"
            },
            "code": "void print_assertion_failed_info_000816f8(undefined4 line_number, undefined4 column_number, undefined *expression, undefined4 error_code) {\n  undefined *expression_string = PTR_s__00081730;\n  undefined *file_name_string = PTR_s__00081730;\n  if (expression != (undefined *)0x0) {\n    expression_string = expression;\n    file_name_string = PTR_s___function__00081728;\n  }\n  fiprintf(*(undefined4 *)(*(int *)PTR__impure_ptr_00081724 + 0xc), PTR_s_assertion___s__failed__file___s__0008172c, error_code, line_number, column_number, file_name_string, expression_string);\n  abort();\n}",
            "called": [
                "abort",
                "fiprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816f8",
            "calling": [
                "TC_Start",
                "TC_Configure"
            ],
            "imported": false,
            "current_name": "print_assertion_failed_info_000816f8"
        },
        "FUN_00084484": {
            "renaming": {
                "FUN_00084484": "read_file_00084484",
                "__stream": "file_ptr",
                "iVar1": "result"
            },
            "code": "int read_file_00084484(FILE *file_ptr)\n{\n  int result = _read_file_00084484_r(*(undefined4 *)PTR__impure_ptr_00084490, file_ptr);\n  return result;\n}",
            "called": [
                "_fclose_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084484",
            "calling": [],
            "imported": false,
            "current_name": "read_file_00084484"
        },
        "FUN_00084244": {
            "renaming": {
                "FUN_00084244": "write_data_to_file_00084244",
                "param_1": "file",
                "param_2": "data_offset",
                "param_3": "buffer",
                "param_4": "size",
                "uVar1": "data"
            },
            "code": "void write_data_to_file_00084244(FILE* file, int data_offset, void* buffer, size_t size)\n{\n  ushort data = *(ushort *)(data_offset + 0xc);\n  \n  if ((int)((uint)data << 0x17) < 0) {\n    _lseek_r(file, (int)*(short *)(data_offset + 0xe), 0, 2);\n    data = *(ushort *)(data_offset + 0xc);\n  }\n  \n  *(ushort *)(data_offset + 0xc) = data & 0xefff;\n  \n  _write_r(file, (int)*(short *)(data_offset + 0xe), buffer, size);\n  return;\n}",
            "called": [
                "_write_r",
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084244",
            "calling": [],
            "imported": false,
            "current_name": "write_data_to_file_00084244"
        },
        "FUN_00084004": {
            "renaming": {
                "FUN_00084004": "get_charset_00084004",
                "PTR_lc_ctype_charset_00084008": "lc_ctype_charset"
            },
            "code": "const char* get_charset_00084004() {\n    return PTR_lc_ctype_charset_00084008;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084004",
            "calling": [
                "_wcrtomb_r"
            ],
            "imported": false,
            "current_name": "get_charset_00084004"
        },
        "FUN_000816ec": {
            "renaming": {
                "FUN_000816ec": "register_exit_function_000816ec",
                "param_1": "func",
                "param_2": "arg"
            },
            "code": "void register_exit_function_000816ec(void (*func)(void), void *arg)\n{\n    __cxa_atexit(func, arg);\n    return;\n}",
            "called": [
                "__cxa_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816ec",
            "calling": [
                "_GLOBAL__sub_I_steering"
            ],
            "imported": false,
            "current_name": "register_exit_function_000816ec"
        },
        "FUN_00080568": {
            "renaming": {
                "FUN_00080568": "controlServo_00080568",
                "_timer2": "timer2_pin",
                "DAT_00080574": "servo_angle"
            },
            "code": "void controlServo_00080568(void)\n{\n  Servo_Handler(timer2_pin, DAT_00080574, ENABLE);\n  return;\n}",
            "called": [
                "Servo_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080568",
            "calling": [],
            "imported": false,
            "current_name": "controlServo_00080568"
        },
        "FUN_000814ae": {
            "renaming": {
                "String::FUN_000814ae": "String::resizeBufferIfNecessary",
                "this": "this",
                "size": "requiredSize",
                "uVar1": "success",
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "buffer": "buffer",
                "capacity": "capacity",
                "changeBuffer": "changeBuffer",
                "len": "len",
                "FUN_000814ae": "resizeBufferIfNecessary_000814ae"
            },
            "code": "uchar __thiscall String::resizeBufferIfNecessary_000814ae(String *this,uint requiredSize)\\n{\\n  uchar success = 1;\\n  if ((this->buffer == nullptr) || (this->capacity < requiredSize)) {\\n    success = changeBuffer(this, requiredSize);\\n    if (success == 0) {\\n      return 0;\\n    }\\n    if (this->len == 0) {\\n      *(this->buffer) = \"\\0\";\\n    }\\n  }\\n  return success;\\n}",
            "called": [
                "changeBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814ae",
            "calling": [
                "copy",
                "concat"
            ],
            "imported": false,
            "current_name": "resizeBufferIfNecessary_000814ae"
        },
        "FUN_00081778": {
            "renaming": {
                "FUN_00081778": "execute_functions_in_array_00081778",
                "puVar1": "fini_start",
                "puVar2": "fini_end",
                "iVar3": "i",
                "ppcVar4": "function_array",
                "iVar5": "num_functions"
            },
            "code": "void execute_functions_in_array_00081778(void)\n{\n  int num_functions = (int)PTR___preinit_array_end_000817b8 - (int)PTR___preinit_array_end_000817bc >> 2;\n  if (num_functions != 0) {\n    code **function_array = (code **)(PTR___preinit_array_end_000817bc + -4);\n    int i = 0;\n    do {\n      i++;\n      function_array++;\n      (**function_array)();\n    } while (num_functions != i);\n  }\n  undefined *fini_start = PTR___preinit_array_end_000817c4;\n  undefined *fini_end = PTR__fini_000817c0;\n  _init();\n  int num_fini_functions = (int)fini_end - (int)fini_start >> 2;\n  if (num_fini_functions != 0) {\n    code **fini_function_array = (code **)(fini_start + -4);\n    int j = 0;\n    do {\n      j++;\n      fini_function_array++;\n      (**fini_function_array)();\n    } while (num_fini_functions != j);\n    return;\n  }\n  return;\n}",
            "called": [
                "_init",
                "register_fini",
                "frame_dummy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081778",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "execute_functions_in_array_00081778"
        },
        "FUN_00080d30": {
            "renaming": {
                "FUN_00080d30": "set_bit_in_register_00080d30",
                "param_1": "register_address",
                "param_2": "bit_value",
                "param_3": "bit_position",
                "*(uint *)(param_1 + 4)": "current_register_value",
                "*(uint *)(param_1 + 4) | (param_3 & 1) << 7": "new_register_value",
                "param_2 | *(uint *)(param_1 + 4)": "bit_value",
                "(param_3 & 1) << 7": "mask"
            },
            "code": "void set_bit_in_register_00080d30(uint32_t* register_address, uint32_t bit_value, uint32_t bit_position) {\n  uint32_t current_register_value = *register_address;\n  uint32_t mask = 1 << bit_position;\n  uint32_t new_register_value = current_register_value | bit_value | (mask & 1) << 7;\n  *register_address = new_register_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d30",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_bit_in_register_00080d30"
        },
        "FUN_00080eec": {
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "status": "exit_status",
                "PTR_s_Exiting_with_status__d__00080ef8": "exit_status_message"
            },
            "code": "void exit_with_status_00080eec(int status)\n{\n  iprintf(PTR_s_Exiting_with_status__d__00080ef8, status);\n  while(true) {\n    // Do nothing block with infinite loop\n  }\n}",
            "called": [
                "iprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eec",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "exit_with_status_00080eec"
        },
        "FUN_000815e8": {
            "renaming": {
                "FUN_000815e8": "do_nothing_000815e8"
            },
            "code": "\nvoid do_nothing_000815e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815e8",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_000815e8"
        },
        "FUN_000806f8": {
            "renaming": {
                "FUN_000806f8": "mapValueToMicroseconds_000806f8",
                "this": "servo",
                "value": "inputValue",
                "min": "minVal",
                "max": "maxVal"
            },
            "code": "void __thiscall Servo::mapValueToMicroseconds_000806f8(Servo *servo, int value)\n{\n  int minVal = servo->min;\n  int maxVal = servo->max;\n  \n  if (value < 546) { // 0x220\n    if (179 < value) { // 0xB3\n      value = 180; // 0xB4\n    }\n    value = map(value & ~(value >> 31), 0, 180, (136 - minVal) * 4, (600 - maxVal) * 4);\n  }\n  mapValueToMicroseconds_000806f8Microseconds(servo, value);\n  return;\n}",
            "called": [
                "map",
                "writeMicroseconds"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806f8",
            "calling": [
                "straightAndStop",
                "loop"
            ],
            "imported": false,
            "current_name": "mapValueToMicroseconds_000806f8"
        },
        "FUN_00082390": {
            "renaming": {
                "FUN_00082390": "FUNC_00082390"
            },
            "code": "\nint FUNC_00082390(char *__s1,char *__s2)\n\n{\n  uint *puVar1;\n  int iVar2;\n  byte *pbVar3;\n  byte *pbVar4;\n  uint *puVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  \n  if ((((uint)__s1 | (uint)__s2) & 7) != 0) {\n    puVar1 = (uint *)__s1;\n    if (((uint)__s1 & 3) != 0) {\n      puVar1 = (uint *)((uint)__s1 & 0xfffffffc) + 1;\n      uVar6 = *(uint *)((uint)__s1 & 0xfffffffc);\n      pbVar3 = (byte *)__s2;\n      if (((uint)__s1 & 1) == 0) {\nLAB_00082410:\n        pbVar4 = pbVar3 + 1;\n        uVar7 = uVar6 >> 0x10 & 0xff;\n        iVar2 = uVar7 - *pbVar3;\n        if (iVar2 != 0) {\n          return iVar2;\n        }\n        if (uVar7 == 0) {\n          return 0;\n        }\n      }\n      else {\n        pbVar4 = (byte *)__s2;\n        if (((uint)__s1 & 2) == 0) {\n          pbVar3 = (byte *)(__s2 + 1);\n          uVar7 = uVar6 >> 8 & 0xff;\n          iVar2 = uVar7 - (byte)*__s2;\n          if (iVar2 != 0) {\n            return iVar2;\n          }\n          if (uVar7 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      __s2 = (char *)(pbVar4 + 1);\n      iVar2 = (uVar6 >> 0x18) - (uint)*pbVar4;\n      if ((iVar2 != 0) || (uVar6 >> 0x18 == 0)) {\n        return iVar2;\n      }\n    }\n    uVar6 = (uint)__s2 & 3;\n    if (uVar6 != 0) {\n      puVar5 = (uint *)((uint)__s2 & 0xfffffffc);\n      if (uVar6 == 2) {\n        uVar6 = *puVar5;\n        do {\n          puVar5 = puVar5 + 1;\n          uVar8 = *puVar1;\n          uVar6 = uVar6 >> 0x10;\n          uVar9 = uVar8 + 0xfefefeff & ~uVar8;\n          uVar10 = uVar9 & 0x80808080;\n          uVar7 = uVar8 & 0xffff;\n          if ((uVar9 & 0x8080) != 0 || uVar7 != uVar6) goto LAB_0008258e;\n          uVar6 = *puVar5;\n          uVar7 = uVar7 ^ uVar8;\n          uVar8 = uVar6 * 0x10000;\n          puVar1 = puVar1 + 1;\n        } while (uVar10 == 0 && uVar7 == uVar8);\n      }\n      else if (uVar6 < 2) {\n        uVar6 = *puVar5;\n        do {\n          puVar5 = puVar5 + 1;\n          uVar8 = *puVar1;\n          uVar6 = uVar6 >> 8;\n          uVar9 = uVar8 + 0xfefefeff & ~uVar8;\n          uVar10 = uVar9 & 0x80808080;\n          uVar7 = uVar8 & 0xffffff;\n          if ((uVar9 & 0x808080) != 0 || uVar7 != uVar6) goto LAB_0008258e;\n          uVar6 = *puVar5;\n          uVar7 = uVar7 ^ uVar8;\n          uVar8 = uVar6 * 0x1000000;\n          puVar1 = puVar1 + 1;\n        } while (uVar10 == 0 && uVar7 == uVar8);\n      }\n      else {\n        uVar6 = *puVar5;\n        do {\n          puVar5 = puVar5 + 1;\n          uVar8 = *puVar1;\n          uVar6 = uVar6 >> 0x18;\n          uVar9 = uVar8 + 0xfefefeff & ~uVar8;\n          uVar10 = uVar9 & 0x80808080;\n          uVar7 = uVar8 & 0xff;\n          if ((uVar9 & 0x80) != 0 || uVar7 != uVar6) goto LAB_0008258e;\n          uVar6 = *puVar5;\n          uVar7 = uVar7 ^ uVar8;\n          uVar8 = uVar6 * 0x100;\n          puVar1 = puVar1 + 1;\n        } while (uVar10 == 0 && uVar7 == uVar8);\n      }\n      uVar7 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 |\n              uVar7 >> 0x18;\n      uVar6 = (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 | uVar8 >> 0x18;\n      goto LAB_0008259e;\n    }\n    __s1 = (char *)puVar1;\n    puVar5 = (uint *)__s2;\n    if (((uint)puVar1 & 4) != 0) {\n      __s1 = (char *)(puVar1 + 1);\n      uVar6 = *puVar1;\n      puVar5 = (uint *)((int)__s2 + 4);\n      uVar8 = *(uint *)__s2;\n      uVar10 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n      if (uVar6 != uVar8 || uVar10 != 0) {\nLAB_0008259a:\n        uVar7 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 |\n                uVar6 >> 0x18;\n        uVar6 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 |\n                uVar8 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    __s2 = (char *)puVar5;\n    if (((uint)puVar5 & 4) != 0) {\n      uVar6 = *puVar5;\n      puVar1 = puVar5 + 1;\n      do {\n        uVar7 = *(uint *)__s1;\n        uVar8 = *(uint *)((int)__s1 + 4);\n        uVar10 = uVar7 + 0xfefefeff & ~uVar7 & 0x80808080;\n        if (uVar7 != uVar6 || uVar10 != 0) goto LAB_0008258e;\n        uVar9 = *puVar1;\n        uVar6 = puVar1[1];\n        uVar10 = uVar8 + 0xfefefeff & ~uVar8 & 0x80808080;\n        __s1 = (char *)((int)__s1 + 8);\n        puVar1 = puVar1 + 2;\n      } while (uVar8 == uVar9 && uVar10 == 0);\n      uVar7 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 |\n              uVar8 >> 0x18;\n      uVar6 = uVar9 << 0x18 | (uVar9 >> 8 & 0xff) << 0x10 | (uVar9 >> 0x10 & 0xff) << 8 |\n              uVar9 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    uVar6 = *(uint *)__s1;\n    uVar7 = *(uint *)((int)__s1 + 4);\n    uVar8 = *(uint *)__s2;\n    uVar9 = *(uint *)((int)__s2 + 4);\n    uVar10 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n    if (uVar6 != uVar8 || uVar10 != 0) goto LAB_0008259a;\n    uVar10 = uVar7 + 0xfefefeff & ~uVar7 & 0x80808080;\n    __s1 = (char *)((int)__s1 + 8);\n    __s2 = (char *)((int)__s2 + 8);\n  } while (uVar7 == uVar9 && uVar10 == 0);\n  uVar7 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 | uVar7 >> 0x18;\n  uVar6 = uVar9 << 0x18 | (uVar9 >> 8 & 0xff) << 0x10 | (uVar9 >> 0x10 & 0xff) << 8 | uVar9 >> 0x18;\nLAB_0008259e:\n  uVar8 = uVar10 << 0x18 | (uVar10 >> 8 & 0xff) << 0x10 | (uVar10 >> 0x10 & 0xff) << 8 |\n          uVar10 >> 0x18;\n  if (uVar8 != 0) {\n    iVar2 = count_leading_zeroes(uVar8);\n    uVar7 = uVar7 >> (0x18U - iVar2 & 0xff);\n    uVar6 = uVar6 >> (0x18U - iVar2 & 0xff);\n  }\n  iVar2 = 1;\n  if (uVar7 <= uVar6) {\n    iVar2 = -(uint)(uVar7 < uVar6);\n  }\n  return iVar2;\nLAB_0008258e:\n  uVar7 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 | uVar7 >> 0x18;\n  uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 | uVar6 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082390",
            "calling": [
                "equals"
            ],
            "imported": false,
            "current_name": "FUNC_00082390"
        },
        "FUN_000816c8": {
            "renaming": {
                "FUN_000816c8": "incrementTickCount_000816c8",
                "PTR__dwTickCount_000816d4": "tickCount"
            },
            "code": "void incrementTickCount_000816c8(void)\n{\n    int* PTR__dwTickCount_000816d4 = (int*)PTR__dwTickCount_000816d4;\n    *PTR__dwTickCount_000816d4 = *PTR__dwTickCount_000816d4 + 1;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816c8",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "incrementTickCount_000816c8"
        },
        "FUN_000810fc": {
            "renaming": {
                "__thiscall Print::FUN_000810fc": "printNumber",
                "this": "printObject",
                "n": "numberToPrint",
                "base": "base",
                "pcVar1": "currentCharPtr",
                "sVar2": "writeResult",
                "uVar3": "baseValue",
                "uVar4": "quotient",
                "str": "bufferPtr",
                "cVar5": "currentCharValue",
                "uVar6": "remainder",
                "buf": "buffer",
                "FUN_000810fc": "printNumber_000810fc"
            },
            "code": "size_t __thiscall Print::printNumber_000810fc(Print *printObject, ulong numberToPrint, uint8_t base) {\n  char *currentCharPtr;\n  size_t writeResult;\n  uint baseValue;\n  uint quotient;\n  uint remainder;\n  char *bufferPtr;\n  char currentCharValue;\n  char buffer[33];\n  baseValue = (uint)base;\n  buffer[32] = '\\0';\n  if (baseValue < 2) {\n    baseValue = 10;\n  }\n  currentCharPtr = buffer + 0x1f;\n  do {\n    bufferPtr = currentCharPtr;\n    quotient = numberToPrint / baseValue;\n    remainder = numberToPrint - baseValue * quotient & 0xff;\n    currentCharValue = (char)remainder;\n    if (remainder < 10) {\n      currentCharValue = currentCharValue + '0';\n    }\n    else {\n      currentCharValue = currentCharValue + '7';\n    }\n    *bufferPtr = currentCharValue;\n    numberToPrint = quotient;\n    currentCharPtr = bufferPtr - 1;\n  } while (quotient != 0);\n  writeResult = write(printObject, bufferPtr);\n  return writeResult;\n}",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810fc",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "printNumber_000810fc"
        },
        "FUN_00080ec2": {
            "renaming": {
                "FUN_00080ec2": "process_file_00080ec2",
                "file_UNUSED": "file_descriptor",
                "ptr_UNUSED": "data_buffer",
                "len_UNUSED": "buffer_length"
            },
            "code": "int process_file_00080ec2(int file_descriptor, char *data_buffer, int buffer_length)\n{\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec2",
            "calling": [
                "_read_r"
            ],
            "imported": false,
            "current_name": "process_file_00080ec2"
        },
        "FUN_00080774": {
            "renaming": {
                "FUN_00080774": "initialize_00080774",
                "ctx": "context",
                "puVar1": "clockPointer",
                "puVar2": "dataPointer",
                "iVar3": "variable3",
                "iVar4": "variable4",
                "iVar5": "variable5",
                "iVar6": "variable6",
                "ulPin": "pin",
                "uVar7": "tempVariable",
                "DAT_0008087c": "data1",
                "DAT_00080880": "data2",
                "DAT_00080884": "pinConfig1",
                "DAT_00080888": "pinConfig2",
                "DAT_0008088c": "pinConfig3",
                "DAT_00080890": "pinConfig4",
                "DAT_00080894": "adcConfig",
                "DAT_00080898": "adcInstance",
                "SystemCoreClock": "systemClock"
            },
            "code": "int initialize_00080774(EVP_PKEY_CTX *ctx)\n{\n  uint32_t clockSpeed = *(uint *)SystemCoreClock / 1000 - 1;\n  SystemInit();\n  uint32_t pin = 0;\n  do {\n    digitalWrite(pin,0);\n    pin++;\n  } while (pin != 0x4f);\n  *(uint32_t *)(DAT_00080884 + 0xa0) = 0xffffffff;\n  *(uint32_t *)(DAT_00080888 + 0xa0) = 0xffffffff;\n  *(uint32_t *)(DAT_0008088c + 0xa0) = 0xffffffff;\n  *(uint32_t *)(DAT_00080890 + 0xa0) = 0xffffffff;\n  PIO_Configure(DAT_00080884,1,0x300,0);\n  digitalWrite(0,1);\n  PIO_Configure(DAT_00080884,1,0xc00,0);\n  PIO_Configure(DAT_00080884,1,0x3000,0);\n  PIO_Configure(DAT_0008088c,2,0x30,0);\n  PIO_Configure(DAT_00080888,1,0xc00,0);\n  PIO_Configure(DAT_00080884,1,3,0);\n  PIO_Configure(DAT_00080888,1,0xc000,0);\n  pmc_enable_periph_clk(0x25);\n  adc_initialize_00080774(DAT_00080898,clockSpeed,DAT_00080894,0xc);\n  adc_configure_timing(DAT_00080898,0,0x300000,1);\n  adc_configure_trigger(DAT_00080898,0,0);\n  adc_disable_interrupt(DAT_00080898,0xffffffff);\n  int result = adc_disable_all_channel(DAT_00080898);\n  analogOutputInit();\n  return result;\n}\n",
            "called": [
                "SystemInit",
                "adc_disable_all_channel",
                "adc_configure_timing",
                "adc_disable_interrupt",
                "PIO_Configure",
                "__libc_init_array",
                "pmc_enable_periph_clk",
                "digitalWrite",
                "adc_init",
                "analogOutputInit",
                "adc_configure_trigger"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080774",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_00080774"
        },
        "FUN_00081624": {
            "renaming": {
                "FUN_00081624": "count_pulse_00081624",
                "pin": "pin_number",
                "state": "state",
                "timeout": "timeout_ms",
                "puVar1": "system_core_clock_ptr",
                "uVar2": "pulse_count",
                "uVar3": "pin_config",
                "PTR_SystemCoreClock_0008167c": "PTR_SystemCoreClock_0008167c",
                "PTR_g_APinDescription_00081678": "PTR_g_APinDescription_00081678",
                "DAT_00081680": "DAT_00081680"
            },
            "code": "uint32_t count_pulse_00081624(uint32_t pin_number, uint32_t state, uint32_t timeout_ms) {\n  uint32_t* system_core_clock_ptr = PTR_SystemCoreClock_0008167c;\n  uint32_t* pin_description_ptr = PTR_g_APinDescription_00081678 + pin_number * 0x1c;\n  uint32_t pin_offset = *(pin_description_ptr);\n  uint32_t pin_config = *(pin_description_ptr + 1);\n  if (state == 0) {\n    pin_config = 0;\n  }\n  uint32_t pulse_count = countPulseASM(pin_offset + 0x3c, pin_config, 0, ((*system_core_clock_ptr / DAT_00081680) * timeout_ms) / 0x12);\n  if (pulse_count != 0) {\n    pulse_count = (uint32_t)((ulonglong)(pulse_count * 18000 + 16000) / ((ulonglong)*(uint *)system_core_clock_ptr / 1000));\n  }\n  return pulse_count;\n}",
            "called": [
                "countPulseASM"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081624",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "count_pulse_00081624"
        },
        "FUN_00080ec8": {
            "renaming": {
                "FUN_00080ec8": "copy_data_to_memory_00080ec8",
                "file_UNUSED": "file_descriptor",
                "ptr": "source_data",
                "len": "data_length",
                "iVar1": "index"
            },
            "code": "int copy_data_to_memory_00080ec8(int file_descriptor, char *source_data, int data_length)\n{\n  int index;\n  for (index = 0; index < data_length; index++) {\n    do {\n    } while (-1 < *(int *)(DAT_00080ee8 + 0x14) << 0x1e);\n    *(uint *)(DAT_00080ee8 + 0x1c) = (uint)(byte)source_data[index];\n  }\n  return data_length & ~(data_length >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec8",
            "calling": [
                "_write_r"
            ],
            "imported": false,
            "current_name": "copy_data_to_memory_00080ec8"
        },
        "FUN_0008117a": {
            "renaming": {
                "__thiscall Print::FUN_0008117a": "calculate_print_length",
                "this": "print_object",
                "num": "number",
                "base": "base",
                "sVar1": "length_of_printed_string",
                "sVar2": "total_length",
                "FUN_0008117a": "calculate_print_length_0008117a"
            },
            "code": "size_t calculate_print_length_0008117a(Print *print_object, int number, int base) {\n  size_t length_of_printed_string = print(print_object, number, base);\n  size_t total_length = calculate_print_length_0008117a(print_object);\n  return total_length + length_of_printed_string;\n}",
            "called": [
                "println",
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008117a",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_print_length_0008117a"
        },
        "FUN_000843e0": {
            "renaming": {
                "FUN_000843e0": "close_file_and_set_error_000843e0",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "errno_pointer",
                "iVar2": "close_result"
            },
            "code": "void close_file_and_set_error_000843e0(int *error_code, int file_descriptor) {\n    undefined *errno_pointer;\n    int close_result;\n    errno_pointer = PTR_errno_00084400;\n    *(undefined4 *)PTR_errno_00084400 = 0;\n    close_result = _close(file_descriptor);\n    if ((close_result == -1) && (*(int *)errno_pointer != 0)) {\n        *error_code = *(int *)errno_pointer;\n        return;\n    }\n    return;\n}",
            "called": [
                "_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000843e0",
            "calling": [
                "__sclose"
            ],
            "imported": false,
            "current_name": "close_file_and_set_error_000843e0"
        },
        "FUN_000817f0": {
            "renaming": {
                "FUN_000817f0": "allocate_memory_000817f0",
                "__size": "size",
                "pvVar1": "memory_address",
                "_FUN_000817f0_r": "_allocate_memory_r"
            },
            "code": "void * allocate_memory_000817f0(size_t size)\n{\n  void *memory_address;\n  memory_address = (void *)_allocate_memory_000817f0_r(*(undefined4 *)PTR__impure_ptr_000817fc,size);\n  return memory_address;\n}",
            "called": [
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817f0",
            "calling": [
                "__register_exitproc"
            ],
            "imported": false,
            "current_name": "allocate_memory_000817f0"
        },
        "FUN_00080eba": {
            "renaming": {
                "FUN_00080eba": "alwaysReturnsOne_00080eba",
                "file_UNUSED": "fileDescriptor"
            },
            "code": "int alwaysReturnsOne_00080eba(int fileDescriptor) {\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eba",
            "calling": [
                "_isatty_r"
            ],
            "imported": false,
            "current_name": "alwaysReturnsOne_00080eba"
        },
        "FUN_0008173c": {
            "renaming": {
                "FUN_0008173c": "register_exit_proc_0008173c",
                "param_1": "exit_code",
                "param_2": "func_ptr",
                "param_3": "arg_ptr",
                "__register_exitproc": "__register_exitproc"
            },
            "code": "void register_exit_proc_0008173c(int exit_code, void (*func_ptr)(void), void *arg_ptr, void *dso_handle)\n{\n  __register_exitproc(exit_code, func_ptr, arg_ptr, dso_handle);\n  return;\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008173c",
            "calling": [
                "__aeabi_atexit"
            ],
            "imported": false,
            "current_name": "register_exit_proc_0008173c"
        },
        "FUN_00081fac": {
            "renaming": {
                "FUN_00081fac": "FUNC_00081fac"
            },
            "code": "\nint * FUNC_00081fac(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  size_t sVar5;\n  uint uVar6;\n  int *piVar7;\n  uint uVar8;\n  uint uVar9;\n  int *piVar10;\n  int iVar11;\n  \n  if (param_2 == (int *)0x0) {\n    piVar3 = (int *)_malloc_r(param_1,param_3);\n    return piVar3;\n  }\n  __malloc_lock();\n  puVar1 = PTR___malloc_av__00082368;\n  uVar6 = param_2[-1];\n  uVar8 = uVar6 & 0xfffffffc;\n  piVar3 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar9 = 0x10;\n  }\n  else {\n    uVar9 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar9 < 0) goto LAB_00082078;\n  }\n  if (uVar9 < param_3) {\nLAB_00082078:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar8 < (int)uVar9) {\n    iVar2 = (int)piVar3 + uVar8;\n    iVar11 = *(int *)(PTR___malloc_av__00082368 + 8);\n    if (iVar11 == iVar2) {\n      uVar4 = *(uint *)(iVar11 + 4) & 0xfffffffc;\n      iVar2 = iVar11;\n      if ((int)(uVar9 + 0x10) <= (int)(uVar4 + uVar8)) {\n        *(uint *)(PTR___malloc_av__00082368 + 8) = (int)piVar3 + uVar9;\n        *(uint *)((int)piVar3 + uVar9 + 4) = (uVar4 + uVar8) - uVar9 | 1;\n        param_2[-1] = uVar9 | param_2[-1] & 1U;\n        __malloc_unlock(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar2 + 4) & 0xfffffffe) + iVar2 + 4) & 1) == 0) {\n      uVar4 = *(uint *)(iVar2 + 4) & 0xfffffffc;\n      if ((int)uVar9 <= (int)(uVar4 + uVar8)) {\n        iVar11 = *(int *)(iVar2 + 0xc);\n        iVar2 = *(int *)(iVar2 + 8);\n        *(int *)(iVar2 + 0xc) = iVar11;\n        *(int *)(iVar11 + 8) = iVar2;\n        uVar8 = uVar4 + uVar8;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      uVar4 = 0;\n      iVar2 = 0;\n    }\n    if (-1 < (int)(uVar6 << 0x1f)) {\n      piVar10 = (int *)((int)piVar3 - param_2[-2]);\n      uVar6 = (piVar10[1] & 0xfffffffcU) + uVar8;\n      if (iVar2 != 0) {\n        if (iVar2 == iVar11) {\n          if ((int)(uVar9 + 0x10) <= (int)(uVar4 + uVar6)) {\n            piVar3 = piVar10 + 2;\n            iVar2 = *piVar3;\n            iVar11 = piVar10[3];\n            sVar5 = uVar8 - 4;\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            if (sVar5 < 0x25) {\n              piVar7 = piVar3;\n              if (0x13 < sVar5) {\n                piVar10[2] = *param_2;\n                piVar10[3] = param_2[1];\n                if (sVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar7 = piVar10 + 4;\n                }\n                else {\n                  piVar10[4] = param_2[2];\n                  piVar10[5] = param_2[3];\n                  if (sVar5 == 0x24) {\n                    piVar10[6] = param_2[4];\n                    piVar7 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar10[7] = *piVar7;\n                    piVar7 = piVar10 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar7 = piVar10 + 6;\n                  }\n                }\n              }\n              *piVar7 = *param_2;\n              piVar7[1] = param_2[1];\n              piVar7[2] = param_2[2];\n            }\n            else {\n              memmove(piVar3,param_2,sVar5);\n            }\n            *(uint *)(puVar1 + 8) = (int)piVar10 + uVar9;\n            *(uint *)((int)piVar10 + uVar9 + 4) = (uVar4 + uVar6) - uVar9 | 1;\n            piVar10[1] = uVar9 | piVar10[1] & 1U;\n            __malloc_unlock(param_1);\n            return piVar3;\n          }\n        }\n        else {\n          uVar4 = uVar4 + uVar6;\n          if ((int)uVar9 <= (int)uVar4) {\n            iVar11 = *(int *)(iVar2 + 0xc);\n            iVar2 = *(int *)(iVar2 + 8);\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            piVar7 = piVar10 + 2;\n            iVar2 = *piVar7;\n            iVar11 = piVar10[3];\n            sVar5 = uVar8 - 4;\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            uVar8 = uVar4;\n            if (sVar5 < 0x25) {\n              piVar3 = piVar7;\n              if (0x13 < sVar5) {\n                piVar10[2] = *param_2;\n                piVar10[3] = param_2[1];\n                if (sVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar3 = piVar10 + 4;\n                }\n                else {\n                  piVar10[4] = param_2[2];\n                  piVar10[5] = param_2[3];\n                  if (sVar5 == 0x24) {\n                    piVar10[6] = param_2[4];\n                    piVar3 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar10[7] = *piVar3;\n                    piVar3 = piVar10 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar3 = piVar10 + 6;\n                  }\n                }\n              }\n              *piVar3 = *param_2;\n              piVar3[1] = param_2[1];\n              piVar3[2] = param_2[2];\n              uVar6 = piVar10[1];\n              piVar3 = piVar10;\n              param_2 = piVar7;\n            }\n            else {\n              memmove(piVar7,param_2,sVar5);\n              uVar6 = piVar10[1];\n              piVar3 = piVar10;\n              param_2 = piVar7;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)uVar9 <= (int)uVar6) {\n        piVar7 = piVar10 + 2;\n        iVar2 = *piVar7;\n        iVar11 = piVar10[3];\n        sVar5 = uVar8 - 4;\n        *(int *)(iVar2 + 0xc) = iVar11;\n        *(int *)(iVar11 + 8) = iVar2;\n        uVar8 = uVar6;\n        if (sVar5 < 0x25) {\n          piVar3 = piVar7;\n          if (0x13 < sVar5) {\n            piVar10[2] = *param_2;\n            piVar10[3] = param_2[1];\n            if (sVar5 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar3 = piVar10 + 4;\n            }\n            else {\n              piVar10[4] = param_2[2];\n              piVar10[5] = param_2[3];\n              if (sVar5 == 0x24) {\n                piVar10[6] = param_2[4];\n                piVar3 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar10[7] = *piVar3;\n                piVar3 = piVar10 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar3 = piVar10 + 6;\n              }\n            }\n          }\n          *piVar3 = *param_2;\n          piVar3[1] = param_2[1];\n          piVar3[2] = param_2[2];\n          uVar6 = piVar10[1];\n          piVar3 = piVar10;\n          param_2 = piVar7;\n        }\n        else {\n          memmove(piVar7,param_2,sVar5);\n          uVar6 = piVar10[1];\n          piVar3 = piVar10;\n          param_2 = piVar7;\n        }\n        goto LAB_00082088;\n      }\n    }\n    piVar10 = (int *)_malloc_r(param_1,param_3);\n    if (piVar10 == (int *)0x0) goto LAB_000820a0;\n    uVar6 = param_2[-1];\n    if (piVar10 + -2 != (int *)((uVar6 & 0xfffffffe) + (int)piVar3)) {\n      sVar5 = uVar8 - 4;\n      if (sVar5 < 0x25) {\n        piVar3 = param_2;\n        piVar7 = piVar10;\n        if (0x13 < sVar5) {\n          *piVar10 = *param_2;\n          piVar10[1] = param_2[1];\n          if (sVar5 < 0x1c) {\n            piVar3 = param_2 + 2;\n            piVar7 = piVar10 + 2;\n          }\n          else {\n            piVar10[2] = param_2[2];\n            piVar10[3] = param_2[3];\n            if (sVar5 == 0x24) {\n              piVar10[4] = param_2[4];\n              piVar10[5] = param_2[5];\n              piVar3 = param_2 + 6;\n              piVar7 = piVar10 + 6;\n            }\n            else {\n              piVar3 = param_2 + 4;\n              piVar7 = piVar10 + 4;\n            }\n          }\n        }\n        *piVar7 = *piVar3;\n        piVar7[1] = piVar3[1];\n        piVar7[2] = piVar3[2];\n      }\n      else {\n        memmove(piVar10,param_2,sVar5);\n      }\n      _free_r(param_1,param_2);\n      goto LAB_000820a0;\n    }\n    uVar8 = uVar8 + (piVar10[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  uVar4 = uVar8 - uVar9;\n  piVar10 = param_2;\n  if (uVar4 < 0x10) {\n    piVar3[1] = uVar6 & 1 | uVar8;\n    *(uint *)((int)piVar3 + uVar8 + 4) = *(uint *)((int)piVar3 + uVar8 + 4) | 1;\n  }\n  else {\n    piVar3[1] = uVar6 & 1 | uVar9;\n    *(uint *)((int)piVar3 + uVar9 + 4) = uVar4 | 1;\n    *(uint *)((int)piVar3 + uVar4 + uVar9 + 4) = *(uint *)((int)piVar3 + uVar4 + uVar9 + 4) | 1;\n    _free_r(param_1,(int)piVar3 + uVar9 + 8);\n  }\nLAB_000820a0:\n  __malloc_unlock(param_1);\n  return piVar10;\n}\n\n",
            "called": [
                "__malloc_lock",
                "_free_r",
                "_malloc_r",
                "__malloc_unlock",
                "memmove"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081fac",
            "calling": [
                "realloc",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "FUNC_00081fac"
        },
        "FUN_00081190": {
            "renaming": {
                "FUN_00081190": "tick_down_if_not_negative_00081190",
                "PTR_ticks_000811a8": "ticks",
                "DAT_000811ac": "callback"
            },
            "code": "void tick_down_if_not_negative_00081190() {\n  int current_PTR_ticks_000811a8 = *(int *)PTR_PTR_ticks_000811a8_000811a8;\n  if (current_PTR_ticks_000811a8 != -1) {\n    current_PTR_ticks_000811a8--;\n    *(int *)PTR_PTR_ticks_000811a8_000811a8 = current_PTR_ticks_000811a8;\n    if (current_PTR_ticks_000811a8 == 0) {\n      (*DAT_000811ac)();\n    }\n  }\n  return;\n}",
            "called": [
                "banzai"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081190",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "tick_down_if_not_negative_00081190"
        },
        "FUN_000805e8": {
            "renaming": {
                "FUN_000805e8": "attach_000805e8",
                "this": "servo_obj",
                "pin": "pin_num",
                "min": "min_pulse_width",
                "max": "max_pulse_width",
                "bVar1": "servo_config",
                "puVar2": "servo_array_ptr",
                "pTVar3": "timer_ptr",
                "channel": "channel_num",
                "id": "timer_id",
                "iVar4": "i",
                "uVar5": "pin_mask"
            },
            "code": "uint8_t __thiscall Servo::attach_000805e8(Servo *this, int pin, int min_pulse_width, int max_pulse_width) {\n  byte servo_index;\n  undefined *servo_array_ptr;\n  Tc *timer_ptr;\n  uint32_t channel_num;\n  uint32_t timer_id;\n  int i;\n  uint pin_mask;\n  \n  if (this->servoIndex > 59) goto attach_000805e8_exit;\n  pinMode(pin, OUTPUT);\n  servo_array_ptr = PTR_servos_00080694;\n  servo_index = (byte)this->servoIndex;\n  byte servo_config = PTR_servos_00080694[servo_index * 8];\n  this->max = (int8_t)((24000U - max_pulse_width) / 4);\n  channel_num = servo_index / 12;\n  pin_mask = (uint)servo_config & 0xc0 | (uint)pin & 0x3f;\n  servo_array_ptr[servo_index * 8] = pin_mask;\n  this->min = (int8_t)((8800U - min_pulse_width) / 4);\n  i = 0;\n  do {\n    if ((int)((uint)(byte)servo_array_ptr[(i + channel_num * 12) * 8] << 0x19) < 0) goto attach_000805e8_exit;\n    i++;\n  } while (i != 12);\n  timer_ptr = DAT_00080698;\n  if (channel_num == 0) {\n    timer_id = 30;\n  }\n  else if (channel_num == 1) {\n    timer_id = 31;\n  }\n  else if (channel_num == 2) {\n    timer_id = 32;\n  }\n  else if (channel_num == 3) {\n    channel_num = 2;\n    timer_id = 29;\n  }\n  else {\n    channel_num = 0;\n    timer_id = 27;\n  }\n  _initISR(timer_ptr, channel_num, timer_id, (IRQn_Type)timer_id);\n  servo_array_ptr[(uint)servo_index * 8] |= 0x40;\n  attach_000805e8_exit:\n  return this->servoIndex;\n}\n",
            "called": [
                "pinMode",
                "_initISR"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000805e8",
            "calling": [
                "attach"
            ],
            "imported": false,
            "current_name": "attach_000805e8"
        },
        "FUN_00080ebe": {
            "renaming": {
                "FUN_00080ebe": "do_nothing_00080ebe",
                "file_UNUSED": "file_descriptor_unused",
                "ptr_UNUSED": "pointer_unused",
                "dir_UNUSED": "directory_unused"
            },
            "code": "int do_nothing_00080ebe(int file_descriptor_unused, int pointer_unused, int directory_unused) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ebe",
            "calling": [
                "_lseek_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00080ebe"
        },
        "FUN_000816d8": {
            "renaming": {
                "FUN_000816d8": "getTickCount_000816d8",
                "PTR__dwTickCount_000816e0": "dwTickCount"
            },
            "code": "getTickCount_000816d8() {\n    return *(undefined4 *)PTR__dwTickCount_000816e0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d8",
            "calling": [
                "millis"
            ],
            "imported": false,
            "current_name": "getTickCount_000816d8"
        },
        "FUN_000815b8": {
            "renaming": {
                "String::FUN_000815b8": "compareStrings",
                "this": "str",
                "cstr": "cstr",
                "uVar1": "result",
                "uVar2": "cmp",
                "FUN_000815b8": "compareStrings_000815b8"
            },
            "code": "unsigned char compareStrings_000815b8(String* str, char* cstr) {\n  unsigned char result = 1;\n  if (str->len == 0) {\n    if (cstr == NULL) {\n      return result;\n    }\n  } else {\n    if (cstr != NULL) {\n      int cmp = strcmp(str->buffer, cstr);\n      if (cmp == 0) {\n        result = 1;\n      } else {\n        result = 0;\n      }\n      return result;\n    }\n    cstr = str->buffer;\n  }\n  return (result - (unsigned char)(*cstr));\n}",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815b8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "compareStrings_000815b8"
        },
        "FUN_00080e28": {
            "renaming": {
                "FUN_00080e28": "iterate_callbacks_for_set_bits_00080e28",
                "DAT_00080e58": "set_bits_ptr",
                "PTR_callbacksPioD_00080e5c": "callbacksPioD_set_bits_ptr"
            },
            "code": "void iterate_callbacks_for_set_bits_00080e28(void)\n{\n  uint32_t set_bits = *(uint32_t *)(DAT_DAT_00080e58 + 0x4c);\n  while( true ) {\n    uint32_t leading_zero_count = count_leading_zeroes(set_bits);\n    if (leading_zero_count > 0x1f) break;\n    uint32_t bit_position = 0x1f - leading_zero_count;\n    code* callback = *(code **)(PTR_PTR_callbacksPioD_00080e5c + bit_position * 4);\n    if (callback != (code *)0x0) {\n      (*callback)();\n    }\n    set_bits = set_bits & ~(1 << bit_position);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e28",
            "calling": [],
            "imported": false,
            "current_name": "iterate_callbacks_for_set_bits_00080e28"
        },
        "FUN_00084220": {
            "renaming": {
                "FUN_00084220": "read_and_update_file_00084220",
                "param_1": "file_descriptor",
                "param_2": "file_info_address",
                "iVar1": "bytes_read",
                "*(short *)(param_2 + 0xe)": "file_read_buffer",
                "*(int *)(param_2 + 0x50)": "bytes_written",
                "*(ushort *)(param_2 + 0xc)": "file_status"
            },
            "code": "void read_and_update_file_00084220(int file_descriptor, int file_info_address) {\n  int bytes_read = _read_r(file_descriptor, *(int16_t *)(file_info_address + 0xe));\n  if (bytes_read >= 0) {\n    int *bytes_written = (int *)(file_info_address + 0x50);\n    *bytes_written += bytes_read;\n    return;\n  }\n  uint16_t *file_status = (uint16_t *)(file_info_address + 0xc);\n  *file_status &= 0xefff;\n}",
            "called": [
                "_read_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084220",
            "calling": [],
            "imported": false,
            "current_name": "read_and_update_file_00084220"
        },
        "FUN_00081750": {
            "renaming": {
                "FUN_00081750": "process_data_00081750",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "data_offset",
                "param_4": "data_flags",
                "uStack_8": "offset",
                "uStack_4": "flags"
            },
            "code": "void process_data_00081750(undefined4 data_ptr, undefined4 data_size, undefined4 data_offset, undefined4 data_flags)\n{\n  undefined4 offset = data_offset;\n  undefined4 flags = data_flags;\n  _process_data_00081750_r(*(undefined4 *)PTR__impure_ptr_00081774, data_ptr, data_size, &offset);\n  return;\n}",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081750",
            "calling": [
                "__assert_func"
            ],
            "imported": false,
            "current_name": "process_data_00081750"
        },
        "FUN_00080db8": {
            "renaming": {
                "FUN_00080db8": "count_leading_zeroes_and_call_callbacks_00080db8",
                "uVar1": "leading_zeroes_count",
                "uVar2": "callbacks_pio_b_ptr",
                "bit_mask": "bit_mask",
                "PTR_callbacksPioB_00080dec": "PTR_callbacksPioB_00080dec",
                "DAT_00080de8": "DAT_00080de8",
                "bit_index": "bit_index",
                "callback_function_ptr": "callback_function_ptr"
            },
            "code": "void count_leading_zeroes_and_call_callbacks_00080db8(void)\n{\n  uint32_t bit_mask;\n  uint32_t callbacks_pio_b_ptr = *(uint32_t *)(DAT_00080de8 + 0x4c);\n  while(true) {\n    uint8_t leading_zeroes_count = count_leading_zeroes(callbacks_pio_b_ptr);\n    if (leading_zeroes_count > 0x1f) break;\n    uint8_t bit_index = 0x1f - leading_zeroes_count;\n    code *callback_function_ptr = *(code **)(PTR_callbacksPioB_00080dec + bit_index * 4);\n    if (callback_function_ptr != (code *)0x0) {\n      (*callback_function_ptr)();\n    }\n    bit_mask = ~(1 << bit_index);\n    callbacks_pio_b_ptr &= bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080db8",
            "calling": [],
            "imported": false,
            "current_name": "count_leading_zeroes_and_call_callbacks_00080db8"
        },
        "FUN_0008421c": {
            "renaming": {
                "FUN_0008421c": "getProcessID_0008421c"
            },
            "code": "__pid_t getProcessID_0008421c(void)\n{\n  return -1;\n}",
            "called": [
                "_getpid"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008421c",
            "calling": [
                "_raise_r"
            ],
            "imported": false,
            "current_name": "getProcessID_0008421c"
        },
        "FUN_0008089c": {
            "renaming": {
                "FUN_0008089c": "initializeUARTsAndBuffers_0008089c",
                "puVar1": "rxBuffer1",
                "puVar2": "txBuffer1",
                "this": "rxBuffer3",
                "this_00": "txBuffer4",
                "this_01": "rxBuffer2",
                "this_02": "txBuffer2"
            },
            "code": "void initializeUARTsAndBuffers_0008089c(void)\n{\n  RingBuffer* rxBuffer1 = (RingBuffer*)PTR_rx_buffer1_00080930;\n  RingBuffer::RingBuffer(rxBuffer1);\n  RingBuffer* txBuffer1 = (RingBuffer*)PTR_tx_buffer1_00080934;\n  RingBuffer::RingBuffer(txBuffer1);\n  RingBuffer* rxBuffer2 = (RingBuffer*)PTR_rx_buffer2_00080968;\n  RingBuffer::RingBuffer(rxBuffer2);\n  RingBuffer* rxBuffer3 = (RingBuffer*)PTR_rx_buffer3_0008093c;\n  RingBuffer::RingBuffer(rxBuffer3);\n  RingBuffer* rxBuffer4 = (RingBuffer*)PTR_rx_buffer4_00080944;\n  RingBuffer::RingBuffer(rxBuffer4);\n  RingBuffer* txBuffer2 = (RingBuffer*)PTR_tx_buffer2_0008096c;\n  RingBuffer::RingBuffer(txBuffer2);\n  RingBuffer* txBuffer3 = (RingBuffer*)PTR_tx_buffer3_00080948;\n  RingBuffer::RingBuffer(txBuffer3);\n  RingBuffer* txBuffer4 = (RingBuffer*)PTR_tx_buffer4_0008094c;\n  RingBuffer::RingBuffer(txBuffer4);\n  UARTClass::UARTClass((UARTClass*)PTR_Serial_00080940, DAT_00080938, UART_IRQn, 8, rxBuffer1, txBuffer1);\n  USARTClass::USARTClass((USARTClass*)PTR_Serial1_00080954, DAT_00080950, USART0_IRQn, 0x11, rxBuffer2, txBuffer2);\n  USARTClass::USARTClass((USARTClass*)PTR_Serial2_0008095c, DAT_00080958, USART1_IRQn, 0x12, rxBuffer3, txBuffer3);\n  USARTClass::USARTClass((USARTClass*)PTR_Serial3_00080964, DAT_00080960, USART3_IRQn, 0x14, rxBuffer4, txBuffer4);\n}",
            "called": [
                "UARTClass",
                "USARTClass",
                "RingBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008089c",
            "calling": [],
            "imported": false,
            "current_name": "initializeUARTsAndBuffers_0008089c"
        },
        "FUN_000816e4": {
            "renaming": {
                "FUN_000816e4": "set_flag_000816e4",
                "param_1": "flag_ptr",
                "*(undefined4 *)(param_1 + 4)": "*flag_ptr"
            },
            "code": "void set_flag_000816e4(int* flag_ptr)\n{\n    *flag_ptr = 0x8000;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816e4",
            "calling": [
                "_watchdogDefaultSetup"
            ],
            "imported": false,
            "current_name": "set_flag_000816e4"
        },
        "FUN_000817c8": {
            "renaming": {
                "FUN_000817c8": "process_data_000817c8",
                "param_1": "data",
                "param_2": "data_ptr",
                "param_3": "data_ptr_2",
                "param_4": "data_ptr_3",
                "uStack_c": "data_copy",
                "uStack_8": "data_copy_2",
                "uStack_4": "data_copy_3"
            },
            "code": "void process_data_000817c8(int data, int* data_ptr, int* data_ptr_2, int* data_ptr_3) {\n  int data_copy = *data_ptr;\n  int data_copy_2 = *data_ptr_2;\n  int data_copy_3 = *data_ptr_3;\n  _vfProcessData(*(int *)PTR__impure_ptr_000817ec, *(int *)(*(int *)PTR__impure_ptr_000817ec + 8), data, &data_copy);\n  return;\n}",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817c8",
            "calling": [
                "_exit"
            ],
            "imported": false,
            "current_name": "process_data_000817c8"
        },
        "FUN_00080750": {
            "renaming": {
                "FUN_00080750": "handle_UARTClass_IRQ_00080750",
                "PTR_Serial1_00080758": "serial"
            },
            "code": "void handle_UARTClass_IRQ_00080750(UARTClass* PTR_Serial1_00080758){\n  UARTClass::IrqHandler(PTR_Serial1_00080758);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080750",
            "calling": [],
            "imported": false,
            "current_name": "handle_UARTClass_IRQ_00080750"
        },
        "FUN_00080f0a": {
            "renaming": {
                "FUN_00080f0a": "do_nothing_00080f0a"
            },
            "code": "\nvoid do_nothing_00080f0a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f0a",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "do_nothing_00080f0a"
        },
        "FUN_00080ea4": {
            "renaming": {
                "FUN_00080ea4": "calculate_difference_00080ea4",
                "cOld_UNUSED": "old_string",
                "cNew_UNUSED": "new_string"
            },
            "code": "int calculate_difference_00080ea4(char *old_string, char *new_string) {\n\treturn -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ea4",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_00080ea4"
        },
        "FUN_00082814": {
            "renaming": {
                "FUN_00082814": "get_signal_pid_00082814",
                "__pid": "pid",
                "__sig": "sig",
                "iVar1": "result"
            },
            "code": "int get_signal_pid_00082814(__pid_t pid, int sig) {\n    int result = _get_signal_pid_00082814_r(*(undefined4 *)PTR__impure_ptr_00082820, pid, sig);\n    return result;\n}",
            "called": [
                "_kill_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082814",
            "calling": [],
            "imported": false,
            "current_name": "get_signal_pid_00082814"
        },
        "FUN_00080f0c": {
            "renaming": {
                "FUN_00080f0c": "configurePin_00080f0c",
                "ulPin": "pinNumber",
                "ulMode": "mode",
                "puVar1": "pinDescription",
                "puVar2": "pinStatus",
                "uVar3": "peripheralType",
                "bVar4": "pinFlags",
                "bVar5": "pinStatusFlags",
                "iVar6": "pinConfiguration",
                "iVar7": "pinDescriptionIndex"
            },
            "code": "void configurePin_00080f0c(uint32_t pinNumber, uint32_t mode) {\\n  uint8_t* pinStatus = PTR_g_pinStatus_0008100c;\\n  uint8_t* pinDescription = PTR_g_APinDescription_00081008;\\n  if (pinDescription[pinNumber * 0x1c + 0xc] != \"\\0\") {\\n    if ((pinStatus[pinNumber] & 0xf) == 4) {\\n      adc_disable_channel(DAT_00081010, pinDescription[pinNumber * 0x1c + 0x19]);\\n    }\\n    uint8_t pinFlags = pinStatus[pinNumber] & 0xf;\\n    if ((pinFlags < 3) && (pinStatus[pinNumber] != 0)) {\\n      if (pinFlags == 2 && mode == 0) {\\n        return;\\n      }\\n      else if (pinFlags == 1 && mode == 2) {\\n        return;\\n      }\\n      else if (pinFlags == 3 && mode == 1) {\\n        goto LAB_00080f68;\\n      }\\n    }\\n    if (mode != 1) {\\n      if (mode == 0) {\\n        int pinDescriptionIndex = pinNumber * 0x1c;\\n        pmc_enable_periph_clk(*(uint32_t*)(pinDescription + pinDescriptionIndex + 8));\\n        PIO_Configure(*(uint32_t*)(pinDescription + pinDescriptionIndex), 3, *(uint32_t*)(pinDescription + pinDescriptionIndex + 4), 0);\\n        pinFlags = pinStatus[pinNumber] & 0xf0 | 2;\\n      }\\n      else {\\n        if (mode != 2) {\\n          return;\\n        }\\n        int pinDescriptionIndex = pinNumber * 0x1c;\\n        pmc_enable_periph_clk(*(uint32_t*)(pinDescription + pinDescriptionIndex + 8));\\n        PIO_Configure(*(uint32_t*)(pinDescription + pinDescriptionIndex), 3, *(uint32_t*)(pinDescription + pinDescriptionIndex + 4), 1);\\n        pinFlags = pinStatus[pinNumber] & 0xf0 | 1;\\n      }\\n      pinStatus[pinNumber] = pinFlags;\\n      return;\\n    }\\n    int pinDescriptionIndex = pinNumber * 0x1c;\\n    int pinConfiguration = *(uint32_t*)(pinDescription + pinDescriptionIndex);\\n    uint8_t peripheralType = (pinStatus[pinNumber] >> 4 == 0) ? 4 : 5;\\n    PIO_Configure(pinConfiguration, peripheralType, *(uint32_t*)(pinDescription + pinDescriptionIndex + 4), *(uint32_t*)(pinDescription + pinDescriptionIndex + 0x10));\\n    pinStatus[pinNumber] = pinStatus[pinNumber] & 0xf0 | 3;\\n    if (*(int *)(pinConfiguration + 0x18) == -1) {\\n      pmc_disable_periph_clk(*(uint32_t*)(pinDescription + pinDescriptionIndex + 8));\\n      return;\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "PIO_Configure",
                "pmc_enable_periph_clk",
                "pmc_disable_periph_clk",
                "adc_disable_channel"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f0c",
            "calling": [
                "attach",
                "setup",
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "configurePin_00080f0c"
        },
        "FUN_000844e0": {
            "renaming": {
                "FUN_000844e0": "seek_file_000844e0",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "puVar1": "errno_ptr",
                "iVar2": "seek_result"
            },
            "code": "void seek_file_000844e0(int *error_code, int file_descriptor, int offset, int whence) {\n  \n  int *errno_ptr = PTR_errno_00084504;\n  * (int *) PTR_errno_00084504 = 0;\n  int seek_result = _lseek(file_descriptor, offset, whence);\n  if ((seek_result == -1) && (*errno_ptr != 0)) {\n    *error_code = *errno_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844e0",
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "imported": false,
            "current_name": "seek_file_000844e0"
        },
        "FUN_00083b10": {
            "renaming": {
                "FUN_00083b10": "FUNC_00083b10"
            },
            "code": "\nvoid FUNC_00083b10(undefined4 param_1,int param_2)\n\n{\n  undefined *puVar1;\n  uint uVar2;\n  int iVar3;\n  int iVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  undefined *puVar8;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  __malloc_lock();\n  puVar8 = PTR___malloc_av__00083c98;\n  uVar2 = *(uint *)(param_2 + -4);\n  iVar6 = param_2 + -8;\n  uVar5 = uVar2 & 0xfffffffe;\n  iVar4 = iVar6 + uVar5;\n  uVar7 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n  if (*(int *)(PTR___malloc_av__00083c98 + 8) == iVar4) {\n    uVar7 = uVar7 + uVar5;\n    if (-1 < (int)(uVar2 << 0x1f)) {\n      iVar6 = iVar6 - *(int *)(param_2 + -8);\n      iVar3 = *(int *)(iVar6 + 0xc);\n      iVar4 = *(int *)(iVar6 + 8);\n      uVar7 = uVar7 + *(int *)(param_2 + -8);\n      *(int *)(iVar4 + 0xc) = iVar3;\n      *(int *)(iVar3 + 8) = iVar4;\n    }\n    uVar2 = *(uint *)PTR___malloc_trim_threshold_00083ca0;\n    *(uint *)(iVar6 + 4) = uVar7 | 1;\n    *(int *)(puVar8 + 8) = iVar6;\n    if (uVar2 <= uVar7) {\n      _malloc_trim_r(param_1,*(undefined4 *)PTR___malloc_top_pad_00083ca4);\n    }\n  }\n  else {\n    uVar2 = uVar2 & 1;\n    *(uint *)(iVar4 + 4) = uVar7;\n    if (uVar2 == 0) {\n      iVar6 = iVar6 - *(int *)(param_2 + -8);\n      puVar1 = *(undefined **)(iVar6 + 8);\n      uVar5 = uVar5 + *(int *)(param_2 + -8);\n      if (puVar1 == puVar8 + 8) {\n        uVar2 = 1;\n      }\n      else {\n        iVar3 = *(int *)(iVar6 + 0xc);\n        *(int *)(puVar1 + 0xc) = iVar3;\n        *(undefined **)(iVar3 + 8) = puVar1;\n      }\n    }\n    else {\n      uVar2 = 0;\n    }\n    if (-1 < *(int *)(iVar4 + uVar7 + 4) << 0x1f) {\n      uVar5 = uVar5 + uVar7;\n      puVar1 = *(undefined **)(iVar4 + 8);\n      if ((uVar2 == 0) && (puVar1 == PTR_PTR___malloc_av__00083c9c)) {\n        *(int *)(puVar8 + 0x14) = iVar6;\n        *(int *)(puVar8 + 0x10) = iVar6;\n        *(undefined **)(iVar6 + 0xc) = puVar1;\n        *(undefined **)(iVar6 + 8) = puVar1;\n        *(uint *)(iVar6 + 4) = uVar5 | 1;\n        *(uint *)(iVar6 + uVar5) = uVar5;\n        goto LAB_00083ba4;\n      }\n      iVar4 = *(int *)(iVar4 + 0xc);\n      *(int *)(puVar1 + 0xc) = iVar4;\n      *(undefined **)(iVar4 + 8) = puVar1;\n    }\n    *(uint *)(iVar6 + 4) = uVar5 | 1;\n    *(uint *)(iVar6 + uVar5) = uVar5;\n    if (uVar2 == 0) {\n      if (uVar5 < 0x200) {\n        uVar2 = *(uint *)(puVar8 + 4);\n        puVar1 = puVar8 + (uVar5 & 0xfffffff8);\n        iVar4 = *(int *)(puVar1 + 8);\n        *(int *)(iVar6 + 8) = iVar4;\n        *(undefined **)(iVar6 + 0xc) = puVar1;\n        *(uint *)(puVar8 + 4) = uVar2 | 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU);\n        *(int *)(puVar1 + 8) = iVar6;\n        *(int *)(iVar4 + 0xc) = iVar6;\n        __malloc_unlock(param_1);\n        return;\n      }\n      uVar2 = uVar5 >> 9;\n      if (uVar2 < 5) {\n        iVar4 = (uVar5 >> 6) + 0x38;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x15) {\n        iVar4 = uVar2 + 0x5b;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x55) {\n        iVar4 = (uVar5 >> 0xc) + 0x6e;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x155) {\n        iVar4 = (uVar5 >> 0xf) + 0x77;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x555) {\n        iVar4 = (uVar5 >> 0x12) + 0x7c;\n        iVar3 = iVar4 * 2;\n      }\n      else {\n        iVar3 = 0xfc;\n        iVar4 = 0x7e;\n      }\n      puVar8 = puVar8 + iVar3 * 4;\n      puVar1 = *(undefined **)(puVar8 + 8);\n      if (puVar1 == puVar8) {\n        *(uint *)(PTR___malloc_av__00083c98 + 4) =\n             *(uint *)(PTR___malloc_av__00083c98 + 4) | 1 << (iVar4 >> 2 & 0xffU);\n        puVar8 = puVar1;\n      }\n      else {\n        do {\n          if ((*(uint *)(puVar1 + 4) & 0xfffffffc) <= uVar5) break;\n          puVar1 = *(undefined **)(puVar1 + 8);\n        } while (puVar8 != puVar1);\n        puVar8 = *(undefined **)(puVar1 + 0xc);\n      }\n      *(undefined **)(iVar6 + 0xc) = puVar8;\n      *(undefined **)(iVar6 + 8) = puVar1;\n      *(int *)(puVar8 + 8) = iVar6;\n      *(int *)(puVar1 + 0xc) = iVar6;\n    }\n  }\nLAB_00083ba4:\n  __malloc_unlock(param_1);\n  return;\n}\n\n",
            "called": [
                "__malloc_lock",
                "_malloc_trim_r",
                "__malloc_unlock"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083b10",
            "calling": [
                "_realloc_r",
                "__sflush_r",
                "_malloc_r",
                "__swsetup_r",
                "_fclose_r",
                "__sfvwrite_r",
                "free"
            ],
            "imported": false,
            "current_name": "FUNC_00083b10"
        },
        "FUN_0008236c": {
            "renaming": {
                "FUN_0008236c": "allocate_memory_0008236c",
                "param_1": "error_code",
                "param_2": "size",
                "puVar1": "error_ptr",
                "pcVar2": "allocated_memory"
            },
            "code": "void allocate_memory_0008236c(int *error_code, int size) {\n  undefined *error_ptr = PTR_errno_0008238c;\n  *(undefined4 *)PTR_errno_0008238c = 0;\n  caddr_t allocated_memory = _sbrk(size);\n  if ((allocated_memory == (caddr_t)0xffffffff) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008236c",
            "calling": [
                "_malloc_r",
                "_malloc_trim_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_0008236c"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "write_to_file_000842a4",
                "param_1": "file_descriptor",
                "param_2": "character",
                "param_3": "stream",
                "param_4": "flags",
                "uVar1": "character_as_ushort",
                "uVar2": "character_as_uint",
                "puVar3": "buffer_pointer",
                "iVar4": "result"
            },
            "code": "uint write_to_file_000842a4(int file_descriptor, uint character, undefined4 *stream, undefined4 flags) {\n  ushort character_as_ushort;\n  uint character_as_uint;\n  undefined *buffer_pointer;\n  int result;\n  if ((file_descriptor != 0) && (*(int *)(file_descriptor + 0x38) == 0)) {\n    __sinit();\n  }\n  character_as_ushort = *(ushort *)(stream + 3);\n  character_as_uint = (uint)character_as_ushort;\n  stream[2] = stream[6];\n  if ((-1 < (int)(character_as_uint << 0x1c)) || (result = stream[4], result == 0)) {\n    result = __swsetup_r(file_descriptor, stream, character_as_ushort, character_as_uint, flags);\n    if (result != 0) {\n      return 0xffffffff;\n    }\n    character_as_ushort = *(ushort *)(stream + 3);\n    result = stream[4];\n    character_as_uint = (uint)character_as_ushort;\n  }\n  character = character & 0xff;\n  if ((int)(character_as_uint << 0x12) < 0) {\n    buffer_pointer = (undefined *)*stream;\n    result = (int)buffer_pointer - result;\n    if (result < (int)stream[5]) {\n      LAB_000842d6:\n      result = result + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    stream[0x19] = stream[0x19] & 0xffffdfff;\n    buffer_pointer = (undefined *)*stream;\n    *(ushort *)(stream + 3) = character_as_ushort | 0x2000;\n    result = (int)buffer_pointer - result;\n    if (result < (int)stream[5]) goto LAB_000842d6;\n  }\n  result = _fflush_r(file_descriptor, stream);\n  if (result != 0) {\n    return 0xffffffff;\n  }\n  buffer_pointer = (undefined *)*stream;\n  result = 1;\n  LAB_000842d8:\n  stream[2] = stream[2] + -1;\n  *stream = buffer_pointer + 1;\n  *buffer_pointer = (char)character;\n  if (((stream[5] == result) || (((int)((uint)*(ushort *)(stream + 3) << 0x1f) < 0 && (character == 10)))) && (result = _fflush_r(file_descriptor, stream), result != 0)) {\n    return 0xffffffff;\n  }\n  return character;\n}",
            "called": [
                "_fflush_r",
                "__swsetup_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "write_to_file_000842a4"
        },
        "FUN_0008074a": {
            "renaming": {
                "FUN_0008074a": "do_nothing_0008074a"
            },
            "code": "\nvoid do_nothing_0008074a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074a",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_0008074a"
        },
        "FUN_0008074c": {
            "renaming": {
                "FUN_0008074c": "do_nothing_0008074c"
            },
            "code": "\nvoid do_nothing_0008074c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074c",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_0008074c"
        },
        "FUN_000839b4": {
            "renaming": {
                "FUN_000839b4": "convert_unicode_to_multibyte_encoding_000839b4",
                "param_1": "encoding_state",
                "param_2": "unicode_character",
                "param_3": "output_stream",
                "uVar1": "locale_max_bytes",
                "iVar2": "status",
                "uVar3": "bytes_written",
                "pbVar4": "output_stream_buffer",
                "uVar5": "bytes_left",
                "local_1c": "multibyte_character",
                "abStack_1b": "unused_buffer"
            },
            "code": "uint convert_unicode_to_multibyte_encoding_000839b4(undefined4 param_1, uint character, byte **output_stream)\n{\n  uint locale_max_bytes = __locale_mb_cur_max();\n  byte multibyte_character;\n  if ((locale_max_bytes == 1) && (character - 1 < 0xff)) {\n    multibyte_character = (byte)(character & 0xff);\n  }\n  else {\n    uint bytes_written = _wcrtomb_r(param_1, &multibyte_character, character, output_stream + 0x17);\n    if (bytes_written == 0xffffffff) {\n      *(ushort *)(output_stream + 3) = *(ushort *)(output_stream + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (bytes_written == 0) {\n      return character;\n    }\n  }\n  uint bytes_left = 0;\n  do {\n    byte *output_stream_buffer = *output_stream + -1;\n    *output_stream = output_stream_buffer;\n    if ((int)output_stream_buffer < 0) {\n      if ((int)(*output_stream)[6] <= (int)output_stream_buffer) {\n        **output_stream = (byte)multibyte_character;\n        output_stream_buffer = *output_stream;\n        multibyte_character = (uint)*output_stream_buffer;\n        if (multibyte_character != 10) {\n          goto end_of_function;\n        }\n      }\n      int status = __swbuf_r(param_1, multibyte_character, output_stream);\n      if (status == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **output_stream = (byte)multibyte_character;\n      output_stream_buffer = *output_stream;\n    }\n    if (locale_max_bytes <= bytes_left + 1) {\n      return character;\n    }\n    multibyte_character = (uint)output_stream_buffer[bytes_left];\n    bytes_left = bytes_left + 1;\n  } while (true);\n  end_of_function:\n  return character;\n}",
            "called": [
                "_wcrtomb_r",
                "__swbuf_r",
                "__locale_mb_cur_max"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000839b4",
            "calling": [
                "__sprint_r.part.0"
            ],
            "imported": false,
            "current_name": "convert_unicode_to_multibyte_encoding_000839b4"
        },
        "FUN_00081176": {
            "renaming": {
                "__thiscall Print::FUN_00081176": "size_t Print::printNumber",
                "this": "*this",
                "n": "number",
                "base": "base",
                "sVar1": "length",
                "sVar2": "length2",
                "FUN_00081176Number": "printNumber",
                "FUN_00081176": "printChar_00081176",
                "_vptr_Print": "_vptr_Print"
            },
            "code": "size_t Print::printChar_00081176(Print *this,int number,int base)\n{\n  size_t length;\n  if (base == 0) {\n    length = (**this->_vptr_Print)(this,number & 0xff);\n    return length;\n  }\n  if (base == 10) {\n    if (number < 0) {\n      length = printChar_00081176(this, '-');\n      length += printChar_00081176(this, -number, 10);\n      return length;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  length = printChar_00081176(this, number, base);\n  return length;\n}",
            "called": [
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081176",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "printChar_00081176"
        },
        "FUN_00080eb0": {
            "renaming": {
                "FUN_00080eb0": "set_file_mode_to_directory_00080eb0",
                "file_UNUSED": "unused_file",
                "st": "file_stat"
            },
            "code": "int set_file_mode_to_directory_00080eb0(stat *file_stat) {\n  file_stat->st_mode = 0x2000;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eb0",
            "calling": [
                "_fstat_r"
            ],
            "imported": false,
            "current_name": "set_file_mode_to_directory_00080eb0"
        },
        "FUN_00081734": {
            "renaming": {
                "FUN_00081734": "convert_string_to_long_00081734",
                "__nptr": "input_string",
                "lVar1": "long_value"
            },
            "code": "long convert_string_to_long_00081734(char* input_string)\n{\n  long long_value = strtol(input_string, (char **)0x0, 10);\n  return long_value;\n}",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081734",
            "calling": [
                "toInt"
            ],
            "imported": false,
            "current_name": "convert_string_to_long_00081734"
        },
        "FUN_00080768": {
            "renaming": {
                "FUN_00080768": "handleUARTInterrupt_00080768",
                "PTR_Serial3_00080770": "PTR_Serial3"
            },
            "code": "void handleUARTInterrupt_00080768(void)\n{\n  UARTClass::IrqHandler((UARTClass *)PTR_Serial3_00080770);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080768",
            "calling": [],
            "imported": false,
            "current_name": "handleUARTInterrupt_00080768"
        },
        "FUN_00082824": {
            "renaming": {
                "__sprint_r_part_0": "__write_to_stream_r",
                "param_1": "stream",
                "param_2": "buffer_address",
                "param_3": "buffer_pointer",
                "piVar1": "current_buffer",
                "iVar2": "write_result",
                "piVar3": "end_buffer",
                "uVar4": "bytes_written",
                "puVar5": "current_word",
                "uVar6": "bytes_to_write",
                "uVar7": "shifted_bytes_to_write",
                "FUN_00082824": "__write_to_stream_r_00082824"
            },
            "code": "int __write_to_stream_r_00082824(int stream, int buffer_address, int **buffer_pointer) {\n  int *current_buffer = *buffer_pointer;\n  int *end_buffer = buffer_pointer[2];\n  while (current_buffer != (int *)0x0) {\n    uint bytes_to_write = current_buffer[1] >> 2;\n    if (bytes_to_write != 0) {\n      undefined4 *current_word = (undefined4 *)(*current_buffer + -4);\n      uint bytes_written = 0;\n      do {\n        current_word++;\n        int write_result = _fputwc_r(stream, *current_word, buffer_address);\n        bytes_written++;\n        if (write_result == -1) goto write_failure;\n      } while (bytes_to_write != bytes_written);\n    }\n    current_buffer = (int *)((int)current_buffer + (current_buffer[1] & 0xfffffffc));\n  }\n  *buffer_pointer[2] = (int *)0x0;\n  *buffer_pointer[1] = (int *)0x0;\n  return __sfvwrite_r();\n\nwrite_failure:\n  *buffer_pointer[2] = (int *)0x0;\n  *buffer_pointer[1] = (int *)0x0;\n  return -1;\n}",
            "called": [
                "__sfvwrite_r",
                "_fputwc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082824",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "__write_to_stream_r_00082824"
        },
        "FUN_00080a94": {
            "renaming": {
                "FUN_00080a94": "check_bitwise_and_00080a94",
                "param_1": "ptr_param_1",
                "uVar1": "result"
            },
            "code": "uint check_bitwise_and_00080a94(uint ptr_param_1, uint param_2) {\n  uint result = *(uint *)(ptr_param_1 + 8) & param_2;\n  if (result != 0) {\n    if ((param_2 & *(uint *)(ptr_param_1 + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a94",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "check_bitwise_and_00080a94"
        },
        "FUN_00081618": {
            "renaming": {
                "FUN_00081618": "disable_watchdog_timer_00081618",
                "DAT_00081620": "watchdog_timer"
            },
            "code": "void disable_watchdog_timer_00081618(void)\n{\n    WDT_Disable(DAT_00081620);\n    return;\n}",
            "called": [
                "WDT_Disable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081618",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "disable_watchdog_timer_00081618"
        },
        "FUN_0008455c": {
            "renaming": {
                "FUN_0008455c": "calculate_difference_0008455c",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "low_bits",
                "param_4": "high_bits",
                "param_5": "difference",
                "uVar1": "quotient",
                "lVar2": "product"
            },
            "code": "void calculate_difference_0008455c(uint dividend, int divisor, uint32_t low_bits, uint32_t high_bits, int *difference)\n{\n  uint32_t product = dividend * ((uint64_t)high_bits << 32 | low_bits);\n  uint32_t quotient = (uint32_t)(product / divisor);\n  difference[0] = dividend - quotient;\n  difference[1] = divisor - (int)((uint64_t)product >> 32) - (difference[0] > dividend);\n}",
            "called": [
                "__divdi3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008455c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008455c"
        },
        "FUN_00081f00": {
            "renaming": {
                "FUN_00081f00": "fill_memory_with_char_00081f00",
                "__s": "ptr",
                "__c": "character",
                "__n": "num_bytes",
                "puVar1": "ptr_uint",
                "puVar2": "ptr_uint_2",
                "puVar3": "ptr_uint_3",
                "uVar4": "uint_var_4",
                "uVar5": "uint_var_5",
                "bVar6": "bool_var_6"
            },
            "code": "void * fill_memory_with_char_00081f00(void *ptr, int character, size_t num_bytes)\n{\n  uint *ptr_uint;\n  uint *ptr_uint_2;\n  uint *ptr_uint_3;\n  uint uint_var_4;\n  uint uint_var_5;\n  bool bool_var_6;\n  \n  ptr_uint_2 = (uint *)ptr;\n  if (((uint)ptr & 3) != 0) {\n    bool_var_6 = num_bytes == 0;\n    ptr_uint = (uint *)ptr;\n    num_bytes = num_bytes - 1;\n    if (bool_var_6) {\n      return ptr;\n    }\n    while( true ) {\n      ptr_uint_2 = (uint *)((int)ptr_uint + 1);\n      *(char *)ptr_uint = (char)character;\n      if (((uint)ptr_uint_2 & 3) == 0) break;\n      bool_var_6 = num_bytes == 0;\n      ptr_uint = ptr_uint_2;\n      num_bytes = num_bytes - 1;\n      if (bool_var_6) {\n        return ptr;\n      }\n    }\n  }\n  if (3 < num_bytes) {\n    uint_var_4 = character & 0xffU | (character & 0xffU) << 8;\n    uint_var_4 = uint_var_4 | uint_var_4 << 0x10;\n    uint_var_5 = num_bytes;\n    ptr_uint = ptr_uint_2;\n    if (0xf < num_bytes) {\n      uint_var_5 = num_bytes - 0x10;\n      do {\n        *ptr_uint = uint_var_4;\n        ptr_uint[1] = uint_var_4;\n        ptr_uint[2] = uint_var_4;\n        ptr_uint[3] = uint_var_4;\n        ptr_uint = ptr_uint + 4;\n      } while (ptr_uint != (uint *)((int)ptr_uint_2 + (uint_var_5 & 0xfffffff0) + 0x10));\n      num_bytes = num_bytes & 0xf;\n      ptr_uint_2 = ptr_uint_2 + ((uint_var_5 >> 4) + 1) * 4;\n      uint_var_5 = num_bytes;\n      ptr_uint = ptr_uint_2;\n      if (num_bytes < 4) goto LAB_00081f7c;\n    }\n    do {\n      num_bytes = num_bytes - 4;\n      *ptr_uint_2 = uint_var_4;\n      ptr_uint_2 = ptr_uint_2 + 1;\n    } while (3 < num_bytes);\n    ptr_uint_2 = (uint *)((int)ptr_uint + (uint_var_5 - 4 & 0xfffffffc) + 4);\n    num_bytes = uint_var_5 & 3;\n  }\nLAB_00081f7c:\n  if (num_bytes != 0) {\n    ptr_uint = ptr_uint_2;\n    do {\n      ptr_uint_3 = (uint *)((int)ptr_uint + 1);\n      *(char *)ptr_uint = (char)character;\n      ptr_uint = ptr_uint_3;\n    } while (ptr_uint_3 != (uint *)(num_bytes + (int)ptr_uint_2));\n  }\n  return ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f00",
            "calling": [
                "__sinit",
                "RingBuffer"
            ],
            "imported": false,
            "current_name": "fill_memory_with_char_00081f00"
        },
        "FUN_0008075c": {
            "renaming": {
                "FUN_0008075c": "handle_UART_interrupt_0008075c",
                "PTR_Serial2_00080764": "Serial2_ptr"
            },
            "code": "void handle_UART_interrupt_0008075c(void)\n{\n  UARTClass::IrqHandler((UARTClass *)PTR_Serial2_00080764);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008075c",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_0008075c"
        },
        "FUN_00080eaa": {
            "renaming": {
                "FUN_00080eaa": "file_not_found_error_00080eaa",
                "file_UNUSED": "file_descriptor"
            },
            "code": "int file_not_found_error_00080eaa(int file_descriptor) {\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eaa",
            "calling": [
                "_close_r"
            ],
            "imported": false,
            "current_name": "file_not_found_error_00080eaa"
        },
        "FUN_00084530": {
            "renaming": {
                "FUN_00084530": "divide_or_return_00084530",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void divide_or_return_00084530(int dividend, int divisor, int quotient, int remainder)\n{\n  if ((remainder == 0) && (quotient == 0)) {\n    if (divisor != 0 || dividend != 0) {\n      dividend = -1;\n    }\n    __aeabi_idiv0(dividend);\n    return;\n  }\n  __gnu_uldivmod_helper();\n  return;\n}",
            "called": [
                "__aeabi_idiv0",
                "__gnu_uldivmod_helper"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084530",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "divide_or_return_00084530"
        },
        "FUN_00085860": {
            "renaming": {
                "FUN_00085860": "do_nothing_00085860"
            },
            "code": "\nvoid do_nothing_00085860(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085860",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "do_nothing_00085860"
        },
        "FUN_00080970": {
            "renaming": {
                "FUN_00080970": "checkSerialPorts_00080970",
                "iVar1": "availableBytes"
            },
            "code": "void checkSerialPorts_00080970(void)\n{\n  int availableBytes;\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial_000809a4);\n  if (availableBytes > 0) {\n    serialEvent();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial1_000809a8);\n  if (availableBytes > 0) {\n    serialEvent1();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial2_000809ac);\n  if (availableBytes > 0) {\n    serialEvent2();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial3_000809b0);\n  if (availableBytes > 0) {\n    serialEvent3();\n  }\n  return;\n}",
            "called": [
                "serialEvent3",
                "serialEvent",
                "available",
                "serialEvent2",
                "serialEvent1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080970",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "checkSerialPorts_00080970"
        },
        "FUN_000806ac": {
            "renaming": {
                "FUN_000806ac": "setAngle_000806ac",
                "value": "angle",
                "iVar1": "angleOffset",
                "iVar2": "pulseWidth",
                "PTR_servos_000806f4": "servoPointer",
                "PTR_SystemCoreClock_000806ec": "systemCoreClockPointer",
                "DAT_000806f0": "pulseDuration"
            },
            "code": "void __thiscall Servo::setAngle_000806ac(Servo *this, int angle) \n{\n  int angleOffset = 0x88 - this->min;\n  int pulseWidth = 0;\n  int maxAngleOffset = (600 - this->max) * 4;\n  if (this->servoIndex < 0x3c && angle + (angleOffset * -4) >= 0 && angle <= maxAngleOffset) {\n    pulseWidth = angle;\n  }\n  *(uint *)(PTR_servos_000806f4 + (uint)this->servoIndex * 8 + 4) = (*(uint *)PTR_SystemCoreClock_000806ec / DAT_000806f0) * (pulseWidth + -2) >> 5;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806ac",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "setAngle_000806ac"
        },
        "FUN_20070000": {
            "renaming": {
                "FUN_20070000": "wait_until_flag_is_set_20070000",
                "DAT_2007001c": "data_ptr",
                "DAT_20070020": "flag_value_1",
                "DAT_20070024": "flag_value_2",
                "DAT_20070028": "flag_ptr"
            },
            "code": "void wait_until_flag_is_set_20070000(void)\n{\n  disableIRQinterrupts();\n  do {\n  } while (-1 < *(int *)(DAT_2007001c + 8) << 0x1f);\n  *(undefined4 *)(DAT_2007001c + 4) = DAT_20070020;\n  do {\n  } while (-1 < *(int *)(DAT_2007001c + 8) << 0x1f);\n  *DAT_20070028 = DAT_20070024;\n  do {\n  } while( true );\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x20070000",
            "calling": [
                "tickReset",
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "wait_until_flag_is_set_20070000"
        },
        "FUN_000834f0": {
            "renaming": {
                "FUN_000834f0": "print_formatted_string_000834f0",
                "param_1": "output_stream",
                "param_2": "stream_buffer_addr",
                "iVar1": "printf_result",
                "iVar2": "fflush_result",
                "local_488": "buffer_ptrs",
                "local_480": "width_ptr[0]",
                "local_47c": "flags",
                "local_47a": "length_ptr[0]",
                "local_478": "buffer_ptrs[1]",
                "local_474": "precision_ptr[0]",
                "local_470": "unused",
                "local_464": "unused",
                "local_424": "unused",
                "auStack_420": "stack_buffer",
                "*(ushort *)(param_2 + 0xc)": "*flags_ptr",
                "*(undefined2 *)(param_2 + 0xe)": "*length_ptr",
                "*(undefined4 *)(param_2 + 0x1c)": "*precision_ptr",
                "*(undefined4 *)(param_2 + 0x24)": "*width_ptr",
                "local_488[0]": "buffer_ptrs[0]"
            },
            "code": "int print_formatted_string_000834f0(FILE *output_stream, int stream_buffer_addr)\n{\n    int printf_result;\n    int fflush_result;\n    char *buffer_ptrs[2];\n    char *stack_buffer = (char*) malloc(1024);\n    uint16_t flags;\n    uint16_t *flags_ptr = (uint16_t *)(stream_buffer_addr + 0xC);\n    uint32_t *width_ptr = (uint32_t *)(stream_buffer_addr + 0x24);\n    uint32_t *precision_ptr = (uint32_t *)(stream_buffer_addr + 0x1C);\n    uint16_t *length_ptr = (uint16_t *)(stream_buffer_addr + 0xE);\n    buffer_ptrs[0] = stack_buffer;\n    flags = *flags_ptr & 0xFFFD;\n    buffer_ptrs[1] = NULL;\n    width_ptr[0] = 1024;\n    precision_ptr[0] = 1024;\n    length_ptr[0] = 0;\n    printf_result = _vfiprintf_r(output_stream, buffer_ptrs);\n    if (printf_result >= 0)\n    {\n        fflush_result = _fflush_r(output_stream, buffer_ptrs);\n        if (fflush_result != 0)\n        {\n            printf_result = -1;\n        }\n    }\n    if ((flags << 0x19) < 0)\n    {\n        *flags_ptr = *flags_ptr | 0x40;\n    }\n    free(stack_buffer);\n    return printf_result;\n}\n",
            "called": [
                "_fflush_r",
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000834f0",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "print_formatted_string_000834f0"
        },
        "FUN_0008125a": {
            "renaming": {
                "FUN_0008125a": "readByte_0008125a",
                "this": "uartObject",
                "uVar1": "byteToRead",
                "pRVar2": "rxBuffer",
                "_rx_buffer": "rxBuffer",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "_aucBuffer": "buffer"
            },
            "code": "unsigned int __thiscall UARTClass::readByte_0008125a(UARTClass *this)\n{\n  unsigned int byteToRead = 0xffffffff;\n  RingBuffer *rxBuffer = this->_rx_buffer;\n  if (rxBuffer->_iHead != rxBuffer->_iTail) {\n    byteToRead = (unsigned int)rxBuffer->_aucBuffer[rxBuffer->_iTail];\n  }\n  return byteToRead;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008125a",
            "calling": [],
            "imported": false,
            "current_name": "readByte_0008125a"
        },
        "FUN_0008113a": {
            "renaming": {
                "__thiscall Print::FUN_0008113a": "print_number",
                "this": "printer",
                "n": "number",
                "base": "base",
                "sVar1": "length",
                "sVar2": "length",
                "FUN_0008113a": "print_number_helper_0008113a",
                "uint8_t": "uint8_t",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "size_t print_number_helper_0008113a(Print *printer, long number, int base) {\n  size_t length = 0;\n  if (base == 0) {\n    length = (**printer->_vptr_Print)(printer, number & 0xff);\n    return length;\n  }\n  if (base == 10) {\n    if (number < 0) {\n      length += print_character(printer, '-');\n      number = -number;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  length += print_number_helper_0008113a_helper(printer, number, base);\n  return length;\n}\n\nsize_t print_character(Print *printer, char character) {\n  return (**printer->_vptr_Print)(printer, character);\n}\n\nsize_t print_number_helper_0008113a_helper(Print *printer, long number, uint8_t base) {\n  size_t length = 0;\n  if (number / base) {\n    length += print_number_helper_0008113a_helper(printer, number / base, base);\n  }\n  length += print_character(printer, '0' + number % base);\n  return length;\n}",
            "called": [
                "printNumber",
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008113a",
            "calling": [
                "println",
                "print"
            ],
            "imported": false,
            "current_name": "print_number_helper_0008113a"
        },
        "FUN_000810d8": {
            "renaming": {
                "__thiscall Print::FUN_000810d8": "writeMessage",
                "sVar1": "messageSize",
                "PTR_DAT_000810e4": "message",
                "FUN_000810d8": "writeMessage_000810d8"
            },
            "code": "size_t writeMessage_000810d8(Print *printObject){\n  size_t PTR_DAT_000810e4Size = write(printObject, PTR_DAT_000810e4);\n  return PTR_DAT_000810e4Size;\n}",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810d8",
            "calling": [
                "println",
                "println"
            ],
            "imported": false,
            "current_name": "writeMessage_000810d8"
        },
        "FUN_00080f04": {
            "renaming": {
                "FUN_00080f04": "getTickCount_00080f04",
                "PTR__dwTickCount_000816e0": "tickCountPtr"
            },
            "code": "uint32_t getTickCount_00080f04(void)\n{\n  uint32_t* PTR__dwTickCount_000816e0 = (uint32_t*)PTR__dwTickCount_000816e0;\n  return *PTR__dwTickCount_000816e0;\n}",
            "called": [
                "GetTickCount"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f04",
            "calling": [
                "timedRead"
            ],
            "imported": false,
            "current_name": "getTickCount_00080f04"
        },
        "FUN_000805a8": {
            "renaming": {
                "FUN_000805a8::FUN_000805a8": "initializeServo",
                "this": "servo",
                "bVar1": "servoIndex",
                "puVar2": "systemCoreClockPtr",
                "PTR_FUN_000805a8Count_000805d8": "servoCount",
                "PTR_SystemCoreClock_000805dc": "systemCoreClockPtr",
                "DAT_000805e0": "servoFrequencyDivider",
                "PTR_servos_000805e4": "servosArray",
                "FUN_000805a8": "initializeServo_000805a8"
            },
            "code": "initializeServo_000805a8 * __thiscall initializeServo_000805a8(initializeServo_000805a8 *servo)\n{\n    byte servoIndex = *PTR_initializeServo_000805a8Count_000805d8;\n    if (servoIndex < 0x3c) {\n        *PTR_initializeServo_000805a8Count_000805d8 = servoIndex + 1;\n        uint *systemCoreClock = PTR_SystemCoreClock_000805dc;\n        servo->servoIndex = servoIndex;\n        uint servoFrequency = (*systemCoreClock / DAT_000805e0) * 0x5dc >> 5;\n        *(uint *)(PTR_servos_000805e4 + servoIndex * 8 + 4) = servoFrequency; \n        return servo;\n    }\n    servo->servoIndex = 0xff;\n    return servo;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000805a8",
            "calling": [
                "_GLOBAL__sub_I_steering"
            ],
            "imported": false,
            "current_name": "initializeServo_000805a8"
        },
        "FUN_00080184": {
            "renaming": {
                "FUN_00080184": "initialize_servos_and_strings_00080184",
                "this": "command_string",
                "cstr": "PTR_DAT_000801cc",
                "uVar1": "DAT_000801d4",
                "puVar2": "PTR___dso_handle_000801d8",
                "this_00": "value_string",
                "in_r3": "in_r3"
            },
            "code": "void initialize_servos_and_strings_00080184(void)\n{\n  String command_string(PTR_DAT_000801cc);\n  Servo steering_servo(PTR_steering_000801c4);\n  Servo throttle_servo(PTR_throttle_000801d0);\n  String value_string(PTR_DAT_000801cc);\n  __aeabi_atexit(&command_string,DAT_000801d4,PTR___dso_handle_000801d8);\n  __aeabi_atexit(&value_string,DAT_000801d4,PTR___dso_handle_000801d8,in_r3);\n  return;\n}\n",
            "called": [
                "__aeabi_atexit",
                "Servo",
                "String"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080184",
            "calling": [],
            "imported": false,
            "current_name": "initialize_servos_and_strings_00080184"
        },
        "FUN_00080f08": {
            "renaming": {
                "FUN_00080f08": "do_nothing_00080f08"
            },
            "code": "\nvoid do_nothing_00080f08(uint32_t ms)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f08",
            "calling": [
                "setup",
                "main",
                "loop"
            ],
            "imported": false,
            "current_name": "do_nothing_00080f08"
        },
        "FUN_000810cc": {
            "renaming": {
                "__thiscall Print::FUN_000810cc": "size_t Print::printCharacter",
                "this": "printObject",
                "c": "character",
                "sVar1": "characterCount",
                "FUN_000810cc": "printCharacter_000810cc"
            },
            "code": "size_t Print::printCharacter_000810cc(Print *printObject,char character) {\n  size_t characterCount = (**printObject->_vptr_Print)(printObject,(int)character);\n  return characterCount;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810cc",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "printCharacter_000810cc"
        },
        "FUN_00081276": {
            "renaming": {
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__nbytes": "numBytes",
                "bVar1": "byteRead",
                "pRVar2": "rxBuffer",
                "FUN_00081276": "readByte_00081276",
                "_rx_buffer": "rxBuffer",
                "_iHead": "_headIndex",
                "_iTail": "_tailIndex",
                "_aucBuffer": "_bufferData"
            },
            "code": "ssize_t __thiscall UARTClass::readByte_00081276(UARTClass *this, int fileDescriptor, void *buffer, size_t numBytes) {\n  byte byteRead;\n  RingBuffer *rxBuffer;\n  rxBuffer = this->_rx_buffer;\n  if (rxBuffer->_iHead != rxBuffer->_iTail) {\n    byteRead = rxBuffer->_aucBuffer[rxBuffer->_iTail];\n    rxBuffer->_iTail = (rxBuffer->_iTail + 1U) & 0x7f;\n    return (uint)byteRead;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081276",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "readByte_00081276"
        },
        "FUN_000844bc": {
            "renaming": {
                "FUN_000844bc": "check_if_terminal_000844bc",
                "param_1": "error_code",
                "param_2": "fd",
                "puVar1": "errno_ptr",
                "iVar2": "is_terminal"
            },
            "code": "void check_if_terminal_000844bc(int *error_code, int fd) {\n    undefined *errno_ptr;\n    int is_terminal;\n    errno_ptr = PTR_errno_000844dc;\n    *(undefined4 *)PTR_errno_000844dc = 0;\n    is_terminal = _isatty(fd);\n    if ((is_terminal == -1) && (*(int *)errno_ptr != 0)) {\n        *error_code = *(int *)errno_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "_isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844bc",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_if_terminal_000844bc"
        },
        "FUN_00080b90": {
            "renaming": {
                "FUN_00080b90": "set_value_at_position_00080b90",
                "param_1": "base_address",
                "param_2": "offset",
                "param_3": "value",
                "*(undefined4 *)(param_1 + param_2 * 0x40 + 0x14)": "*(int *)(position)",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void set_value_at_position_00080b90(int base_address, int offset, int value) {\n    int position = base_address + offset * 0x40 + 0x14;\n    *(int *)(position) = value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b90",
            "calling": [
                "_initISR"
            ],
            "imported": false,
            "current_name": "set_value_at_position_00080b90"
        },
        "FUN_00080748": {
            "renaming": {
                "FUN_00080748": "do_nothing_00080748"
            },
            "code": "\nvoid do_nothing_00080748(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080748",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080748"
        },
        "FUN_0008356c": {
            "renaming": {
                "FUN_0008356c": "process_data_0008356c",
                "param_1": "data",
                "param_2": "status",
                "uVar1": "least_significant_bit",
                "iVar2": "result",
                "uVar3": "shifted_value",
                "uVar4": "value"
            },
            "code": "int process_data_0008356c(uint16_t *data, int *status)\n{\n  uint16_t value = *(data + 3);\n  uint32_t shifted_value = (uint32_t)value << 28;\n  int result = 0;\n  if ((*(int *)impure_ptr != 0) && (*(int *)(*(int *)impure_ptr + 0x38) == 0)) {\n    initialize_stream();\n  }\n  if ((int)shifted_value < 0) {\n    result = *(data + 4);\n  }\n  else {\n    if ((int)(value << 27) >= 0) {\n      *status = 9;\n      *(data + 3) = value | 0x40;\n      return -1;\n    }\n    if ((int)(value << 29) < 0) {\n      if ((int *)data[0xc] != (int *)0x0) {\n        if ((int *)data[0xc] != data + 0x10) {\n          free_r(status);\n          value = *(data + 3);\n        }\n        data[0xc] = 0;\n      }\n      result = data[4];\n      value &= 0xFFDB;\n      *data = result;\n      data[1] = 0;\n    }\n    else {\n      result = data[4];\n    }\n    *(data + 3) = value | 8;\n    shifted_value = (uint32_t)(value | 8);\n  }\n  if ((result == 0) && ((shifted_value & 0x280) != 0x200)) {\n    make_buffer(status, data);\n    shifted_value = (uint32_t)*(data + 3);\n    result = data[4];\n  }\n  uint32_t least_significant_bit = shifted_value & 1;\n  if (least_significant_bit == 0) {\n    if ((int)(shifted_value << 30) >= 0) {\n      least_significant_bit = data[5];\n    }\n    data[2] = least_significant_bit;\n  }\n  else {\n    data[6] = -data[5];\n    data[2] = 0;\n  }\n  if ((result == 0) && ((int)((uint32_t)*(data + 3) << 24) < 0)) {\n    *(data + 3) = *(data + 3) | 0x40;\n    return -1;\n  }\n  return 0;\n}",
            "called": [
                "_free_r",
                "__smakebuf_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008356c",
            "calling": [
                "_vfiprintf_r",
                "__swbuf_r",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "process_data_0008356c"
        },
        "FUN_00080b98": {
            "renaming": {
                "FUN_00080b98": "initializeSystemClock_00080b98",
                "DAT_00080c04": "systemCoreClockAddress",
                "DAT_00080c08": "rccCRAddress",
                "DAT_00080c10": "flashLatency",
                "DAT_00080c0c": "rccCFGR",
                "DAT_00080c08 + 0x20": "flashLatencyAddress",
                "DAT_00080c08 + 0x04": "rccCFGRAddress",
                "DAT_00080c08 + 0x1c": "rccAPB1ENRAddress",
                "DAT_00080c08 + 0x18": "rccAPB2ENRAddress",
                "DAT_00080c08 + 0x14": "rccAHBENRAddress",
                "PTR_SystemCoreClock_00080c1c": "systemCoreClockAddress",
                "*puVar1": "systemCoreClockAddress",
                "iVar2": "rccCRAddress",
                "*(int *)(DAT_00080c08 + 0x20) << 7": "flashLatency",
                "*(undefined4 *)(DAT_00080c08 + 0x20)": "flashLatency",
                "*(int *)(iVar2 + 0x68) << 0x1f": "rccCR",
                "*(uint *)(DAT_00080c08 + 0x30)": "rccCR",
                "*(uint *)(DAT_00080c08 + 0x30) & 0xfffffffc | 1": "rccCR",
                "*(int *)(iVar2 + 0x68) << 0xf": "rccAPB1ENR",
                "*(undefined4 *)(DAT_00080c08 + 0x28)": "rccAPB2ENR",
                "*(int *)(iVar2 + 0x68) << 0x1c": "rccAHBENR",
                "0x11": "rccAHBENR",
                "0x12": "rccAHBENR",
                "DAT_00080c18": "systemCoreClock"
            },
            "code": "void initializeSystemClock_00080b98(void)\n{\n  uint32_t *DAT_00080c04;\n  uint32_t *DAT_00080c08 + 0x20;\n  uint32_t *DAT_00080c08;\n  uint32_t *DAT_00080c08 + 0x04;\n  uint32_t *DAT_00080c08 + 0x1c;\n  uint32_t *DAT_00080c08 + 0x18;\n  uint32_t *DAT_00080c08 + 0x14;\n  uint32_t DAT_00080c10;\n  uint32_t DAT_00080c0c;\n  uint32_t *(uint *)(DAT_00080c08 + 0x30);\n  uint32_t rccAPB1ENR;\n  uint32_t *(undefined4 *)(DAT_00080c08 + 0x28);\n  uint32_t rccAHBENR;\n  uint32_t DAT_00080c18;\n  \n  DAT_00080c04 = PTR_SystemCoreClock_00080c1c;\n  DAT_00080c08 + 0x20 = DAT_00080c08 + 0x20;\n  DAT_00080c08 = DAT_00080c08 + 0x30;\n  DAT_00080c08 + 0x04 = DAT_00080c08 + 0x04;\n  DAT_00080c08 + 0x1c = DAT_00080c08 + 0x1c;\n  DAT_00080c08 + 0x18 = DAT_00080c08 + 0x18;\n  DAT_00080c08 + 0x14 = DAT_00080c08 + 0x14;\n  \n  *DAT_00080c08 + 0x20 = 0x400;\n  *(DAT_00080c08 + 0x20 + 0x01) = 0x400;\n  \n  DAT_00080c0c = *DAT_00080c08 + 0x04;\n  if (((DAT_00080c0c >> 0x10) & 0x03) == 0x02)\n  {\n    DAT_00080c10 = 0x01;\n  }\n  else if (((DAT_00080c0c >> 0x10) & 0x03) == 0x03)\n  {\n    DAT_00080c10 = 0x02;\n  }\n  else\n  {\n    DAT_00080c10 = 0x00;\n  }\n  \n  *(uint *)(DAT_00080c08 + 0x30) = *DAT_00080c08;\n  *(uint *)(DAT_00080c08 + 0x30) |= 0x00010000;\n  *DAT_00080c08 = *(uint *)(DAT_00080c08 + 0x30);\n  \n  rccAPB1ENR = *DAT_00080c08 + 0x1c;\n  rccAPB1ENR |= 0x00010000;\n  *DAT_00080c08 + 0x1c = rccAPB1ENR;\n  \n  *(undefined4 *)(DAT_00080c08 + 0x28) = *DAT_00080c08 + 0x18;\n  *(undefined4 *)(DAT_00080c08 + 0x28) |= 0x00000001;\n  *DAT_00080c08 + 0x18 = *(undefined4 *)(DAT_00080c08 + 0x28);\n  \n  rccAHBENR = *DAT_00080c08 + 0x14;\n  rccAHBENR |= 0x00020014;\n  *DAT_00080c08 + 0x14 = rccAHBENR;\n  \n  switch (DAT_00080c10)\n  {\n    case 0:\n      DAT_00080c18 = 16000000;\n      break;\n    case 1:\n      DAT_00080c18 = 48000000;\n      break;\n    case 2:\n      DAT_00080c18 = 72000000;\n      break;\n    default:\n      DAT_00080c18 = 16000000;\n      break;\n  }\n  \n  *DAT_00080c04 = DAT_00080c18;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b98",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "initializeSystemClock_00080b98"
        },
        "FUN_000810e8": {
            "renaming": {
                "FUN_000810e8": "print_and_get_size_000810e8",
                "this": "print_obj",
                "c": "string_to_print",
                "sVar1": "num_bytes_written",
                "sVar2": "total_num_bytes_written"
            },
            "code": "size_t __thiscall Print::print_and_get_size_000810e8(Print *print_obj, char *string_to_print)\n{\n  size_t num_bytes_written;\n  size_t total_num_bytes_written;\n  num_bytes_written = write(print_obj, string_to_print);\n  total_num_bytes_written = print_and_get_size_000810e8(print_obj);\n  return total_num_bytes_written + num_bytes_written;\n}",
            "called": [
                "write",
                "println"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810e8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "print_and_get_size_000810e8"
        },
        "FUN_000843b8": {
            "renaming": {
                "<original_function_name>": "write_to_file",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "error_ptr",
                "iVar2": "bytes_written",
                "FUN_000843b8": "write_to_file_000843b8"
            },
            "code": "void write_to_file_000843b8(int *error_code, int file_descriptor, char *buffer, int buffer_size) {\n                      undefined *error_ptr = PTR_errno_000843dc;\n                      *(undefined4 *)PTR_errno_000843dc = 0;\n                      int bytes_written = _write(file_descriptor, buffer, buffer_size);\n                      if ((bytes_written == -1) && (*(int *)error_ptr != 0)) {\n                        *error_code = *(int *)error_ptr;\n                        return;\n                      }\n                      return;\n                    }",
            "called": [
                "_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000843b8",
            "calling": [
                "__swrite"
            ],
            "imported": false,
            "current_name": "write_to_file_000843b8"
        },
        "FUN_0008073a": {
            "renaming": {
                "FUN_0008073a": "do_nothing_0008073a"
            },
            "code": "\nvoid do_nothing_0008073a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008073a",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_0008073a"
        },
        "FUN_0008073c": {
            "renaming": {
                "FUN_0008073c": "handleUARTInterrupt_0008073c",
                "UARTClass::IrqHandler": "serialPtr->IrqHandler",
                "PTR_Serial_00080744": "serialPtr"
            },
            "code": "void handleUARTInterrupt_0008073c(void)\n{\n  UARTClass* PTR_Serial_00080744 = (UARTClass*)PTR_Serial_00080744;\n  PTR_Serial_00080744->IrqHandler();\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008073c",
            "calling": [],
            "imported": false,
            "current_name": "handleUARTInterrupt_0008073c"
        },
        "FUN_00081480": {
            "renaming": {
                "FUN_00081480": "clearString_00081480",
                "this": "str",
                "buffer": "strBuffer",
                "len": "length",
                "capacity": "capacity"
            },
            "code": "void clearString_00081480(String* str) {\n  if (str->buffer != nullptr) {\n    free(str->buffer);\n  }\n  str->buffer = nullptr;\n  str->length = 0;\n  str->capacity = 0;\n  return;\n}",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081480",
            "calling": [
                "copy"
            ],
            "imported": false,
            "current_name": "clearString_00081480"
        },
        "FUN_00081f9c": {
            "renaming": {
                "FUN_00081f9c": "allocate_memory_00081f9c",
                "__ptr": "ptr",
                "__size": "size",
                "pvVar1": "new_ptr",
                "_FUN_00081f9c_r": "_allocate_memory_r"
            },
            "code": "void * allocate_memory_00081f9c(void *ptr, size_t size)\n{\n  void *new_ptr;\n  new_ptr = (void *)_allocate_memory_00081f9c_r(*(undefined4 *)PTR__impure_ptr_00081fa8, ptr, size);\n  return new_ptr;\n}",
            "called": [
                "_realloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f9c",
            "calling": [
                "changeBuffer"
            ],
            "imported": false,
            "current_name": "allocate_memory_00081f9c"
        },
        "FUN_00081244": {
            "renaming": {
                "__thiscall UARTClass::FUN_00081244": "isUARTEnabled",
                "this": "uartInstance",
                "FUN_00081244": "isUARTEnabled_00081244"
            },
            "code": "bool isUARTEnabled_00081244(UARTClass *uartInstance) { return true; }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081244",
            "calling": [],
            "imported": false,
            "current_name": "isUARTEnabled_00081244"
        },
        "FUN_000836fc": {
            "renaming": {
                "FUN_000836fc": "register_exit_process_000836fc",
                "__func": "function_name",
                "iVar1": "return_value"
            },
            "code": "int register_exit_process_000836fc(__func *function_name) {\n  int return_value;\n  return_value = __register_exitproc(0,function_name,0,0);\n  return return_value;\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836fc",
            "calling": [
                "register_fini"
            ],
            "imported": false,
            "current_name": "register_exit_process_000836fc"
        },
        "FUN_00085844": {
            "renaming": {
                "FUN_00085844": "do_nothing_00085844"
            },
            "code": "\nvoid do_nothing_00085844(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085844",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "do_nothing_00085844"
        },
        "FUN_00081248": {
            "renaming": {
                "FUN_00081248": "getReceivedDataLength_00081248",
                "this": "this",
                "_rx_buffer": "rxBuffer",
                "_iHead": "rxBufferHeadIndex",
                "_iTail": "rxBufferTailIndex"
            },
            "code": "int __thiscall UARTClass::getReceivedDataLength_00081248(UARTClass *this)\n{\n    int headIndex = this->rxBufferHeadIndex;\n    int tailIndex = this->rxBufferTailIndex;\n    int bufferLength = 0x7F;\n    return headIndex - tailIndex & bufferLength;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081248",
            "calling": [
                "serialEventRun",
                "loop"
            ],
            "imported": false,
            "current_name": "getReceivedDataLength_00081248"
        },
        "FUN_00081800": {
            "renaming": {
                "FUN_00081800": "forward_pointer_to_function_00081800",
                "__ptr": "pointer_to_data",
                "PTR__impure_ptr_0008180c": "PTR__impure_ptr_0008180c",
                "call_routine_with_pointer": "_FUN_00081800_r"
            },
            "code": "void forward_pointer_to_function_00081800(void *__ptr)\n{\n  call_routine_with_pointer(*(undefined4 *)PTR__impure_ptr_0008180c, __ptr);\n  return;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081800",
            "calling": [
                "~String",
                "invalidate",
                "move"
            ],
            "imported": false,
            "current_name": "forward_pointer_to_function_00081800"
        },
        "FUN_0008418c": {
            "renaming": {
                "FUN_0008418c": "process_signal_handler_0008418c",
                "param_1": "process_signal_handler_args",
                "param_2": "signal_number",
                "param_3": "signal_handler_function",
                "param_4": "signal_handler_argument",
                "_Var1": "process_id",
                "uVar2": "return_value",
                "iVar3": "signal_handler_address",
                "pcVar4": "signal_handler_function_pointer"
            },
            "code": "int process_signal_handler_0008418c(int *process_signal_handler_0008418c_args, uint32_t signal_number, int signal_handler_function, int signal_handler_argument)\\n\\\n{\\n\\\n  __pid_t process_id;\\n\\\n  int return_value;\\n\\\n  int signal_handler_address;\\n\\\n  \\n\\\n  if (signal_number > 31) {\\n\\\n    process_signal_handler_0008418c_args[0] = 22;\\n\\\n    return -1;\\n\\\n  }\\n\\\n  signal_handler_address = process_signal_handler_0008418c_args[183];\\n\\\n  if ((signal_handler_address == 0) || (*(int **)(signal_handler_address + signal_number * 4) == 0)) {\\n\\\n    process_id = _getpid_r();\\n\\\n    return_value = _kill_r(process_signal_handler_0008418c_args, process_id, signal_number, signal_handler_argument);\\n\\\n    return return_value;\\n\\\n  }\\n\\\n  if (*(int **)(signal_handler_address + signal_number * 4) == 1) {\\n\\\n    return 0;\\n\\\n  }\\n\\\n  if (*(int **)(signal_handler_address + signal_number * 4) != -1) {\\n\\\n    *(int **)(signal_handler_address + signal_number * 4) = 0;\\n\\\n    (*(void (*)(int))(*(int **)(signal_handler_address + signal_number * 4)))(signal_number);\\n\\\n    return 0;\\n\\\n  }\\n\\\n  process_signal_handler_0008418c_args[0] = 22;\\n\\\n  return 1;\\n\\\n}",
            "called": [
                "_getpid_r",
                "_kill_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008418c",
            "calling": [
                "raise"
            ],
            "imported": false,
            "current_name": "process_signal_handler_0008418c"
        },
        "FUN_000845c0": {
            "renaming": {
                "FUN_000845c0": "FUNC_000845c0"
            },
            "code": "\nundefined8 FUNC_000845c0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000845c0",
            "calling": [
                "__gnu_ldivmod_helper"
            ],
            "imported": false,
            "current_name": "FUNC_000845c0"
        },
        "FUN_00080b64": {
            "renaming": {
                "FUN_00080b64": "set_channel_value_00080b64",
                "param_1": "channel_value",
                "param_2": "channel_id",
                "uVar1": "combined_value",
                "PTR_s____source_tc_c_00080b80": "source_tc",
                "PTR_s_set_channel_value_00080b84": "set_channel_value_ptr",
                "PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b88": "dwChannel_ptr"
            },
            "code": "void set_channel_value_00080b64(uint32_t channel_value, uint32_t channel_id)\n{\n  uint64_t combined_value = ((uint64_t)channel_id << 32) | channel_value;\n  if (channel_id > 2) {\n    combined_value = (*DAT_00080b8c)(PTR_s____PTR_s____source_tc_c_00080b80_c_00080b80, 0x5c, PTR_s_set_channel_value_00080b64_00080b84, PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b88);\n  }\n  uint32_t* channel_address = (uint32_t*)((int)combined_value + (int)((uint64_t)combined_value >> 0x20) * 0x40);\n  *channel_address = 5;\n}",
            "called": [
                "__assert_func"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b64",
            "calling": [
                "_initISR"
            ],
            "imported": false,
            "current_name": "set_channel_value_00080b64"
        },
        "FUN_0008014c": {
            "renaming": {
                "FUN_0008014c": "execute_afl_call_0008014c",
                "ticks": "num_ticks",
                "uVar1": "result"
            },
            "code": "uint32_t execute_afl_call_0008014c(int ticks)\n{\n    uint32_t result;\n    if (*(int *)PTR_noHyperCall_00080160 == 0) {\n        result = aflCall(1, ticks, 0);\n        return result;\n    }\n    return 0;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008014c",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "execute_afl_call_0008014c"
        },
        "FUN_0008159e": {
            "renaming": {
                "String::FUN_0008159e": "calculateStringLength",
                "this": "str",
                "c": "character",
                "uVar1": "length",
                "buf": "buffer",
                "sStack_a": "stackVar",
                "FUN_0008159e": "calculateStringLength_0008159e"
            },
            "code": "uchar calculateStringLength_0008159e(String *str, char character){\n  uchar length;\n  char buffer[2];\n  short stackVar;\n  length = calculateStringLength_0008159e(str, buffer, 1);\n  return length;\n}",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008159e",
            "calling": [
                "readStringUntil"
            ],
            "imported": false,
            "current_name": "calculateStringLength_0008159e"
        },
        "FUN_000806a0": {
            "renaming": {
                "FUN_000806a0": "setPinAndRange_000806a0",
                "this": "servo",
                "pin": "pin",
                "uVar1": "result",
                "0x220": "minPulseWidth",
                "0x960": "maxPulseWidth"
            },
            "code": "uint8_t __thiscall Servo::setPinAndRange_000806a0(Servo *servo,int pin,uint16_t minPulseWidth,uint16_t maxPulseWidth)\n{\n  uint8_t result;\n  result = setPinAndRange_000806a0(servo,pin,minPulseWidth,maxPulseWidth);\n  return result;\n}",
            "called": [
                "attach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806a0",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "setPinAndRange_000806a0"
        },
        "FUN_000811ca": {
            "renaming": {
                "FUN_000811ca": "addByteToBuffer_000811ca",
                "this": "buffer",
                "c": "byteToAdd",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "_aucBuffer": "bufferArray",
                "uVar1": "newIndex"
            },
            "code": "void __thiscall RingBuffer::addByteToBuffer_000811ca(RingBuffer *buffer, uint8_t byteToAdd) {\n  uint newIndex = (buffer->headIndex + 1U) & 0x7f;\n  if (newIndex != buffer->tailIndex) {\n    buffer->bufferArray[buffer->headIndex] = byteToAdd;\n    buffer->headIndex = newIndex;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ca",
            "calling": [
                "IrqHandler"
            ],
            "imported": false,
            "current_name": "addByteToBuffer_000811ca"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "updateServos_00080164",
                "PTR_throttle_0008017c": "throttleServoPtr",
                "PTR_steering_00080180": "steeringServoPtr"
            },
            "code": "void updateServos_00080164(void)\n{\n  Servo::write((Servo *)PTR_throttle_0008017c, 90);\n  Servo::write((Servo *)PTR_steering_00080180, 90);\n  return;\n}",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "setup",
                "loop"
            ],
            "imported": false,
            "current_name": "updateServos_00080164"
        },
        "FUN_00081496": {
            "renaming": {
                "String::FUN_00081496": "allocateStringBuffer",
                "*this": "str",
                "maxStrLen": "maxStringLength",
                "pcVar1": "newBuffer",
                "FUN_00081496": "allocateStringBuffer_00081496"
            },
            "code": "uchar allocateStringBuffer_00081496(String *str, uint maxStrLen)\n{\n  char *newBuffer = (char *)realloc(str->buffer, maxStrLen + 1);\n  if (newBuffer != (char *)0x0) {\n    str->buffer = newBuffer;\n    str->capacity = maxStrLen;\n    newBuffer = (char *)0x1;\n  }\n  return (uchar)newBuffer;\n}",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081496",
            "calling": [
                "reserve"
            ],
            "imported": false,
            "current_name": "allocateStringBuffer_00081496"
        },
        "FUN_00081014": {
            "renaming": {
                "FUN_00081014": "setPinStatus_00081014",
                "ulPin": "pinNumber",
                "ulVal": "pinValue",
                "*puVar1": "APinDescription",
                "*puVar2": "pinStatus",
                "iVar3": "outputDataStatus",
                "uVar4": "port",
                "uVar5": "pin",
                "uVar6": "value"
            },
            "code": "void setPinStatus_00081014(uint32_t pinNumber, uint32_t pinValue) {\n  uint32_t *pinStatus = PTR_g_pinStatus_00081080;\n  uint32_t *APinDescription = PTR_g_APinDescription_0008107c;\n  if (APinDescription[pinNumber * 0x1c + 0xc] != 0) {\n    uint32_t value = pinValue;\n    if ((pinStatus[pinNumber] & 0xf) == 5) {\n      pinMode(pinNumber, OUTPUT);\n    }\n    pinStatus[pinNumber] = pinStatus[pinNumber] & 0xf | (byte)(pinValue << 4);\n    uint32_t port = *(uint32_t *)(APinDescription + pinNumber * 0x1c);\n    uint32_t pin = *(uint32_t *)(APinDescription + pinNumber * 0x1c + 4);\n    int outputDataStatus = PIO_GetOutputDataStatus(port, pin);\n    if (outputDataStatus == 0) {\n      PIO_PullUp(port, pin, pinValue);\n      return;\n    }\n    PIO_SetOutput(port, pin, pinValue, 0, 1, value);\n  }\n  return;\n}",
            "called": [
                "pinMode",
                "PIO_PullUp",
                "PIO_SetOutput",
                "PIO_GetOutputDataStatus"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081014",
            "calling": [
                "Servo_Handler",
                "loop",
                "init"
            ],
            "imported": false,
            "current_name": "setPinStatus_00081014"
        },
        "FUN_000845bc": {
            "renaming": {
                "FUN_000845bc": "do_nothing_000845bc"
            },
            "code": "\nvoid do_nothing_000845bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845bc",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "do_nothing_000845bc"
        },
        "FUN_00083ca8": {
            "renaming": {
                "FUN_00083ca8": "FUNC_00083ca8"
            },
            "code": "\nundefined4 FUNC_00083ca8(undefined4 *param_1,void **param_2,undefined4 *param_3)\n\n{\n  void **ppvVar1;\n  int iVar2;\n  void *pvVar3;\n  void *pvVar4;\n  ushort uVar5;\n  uint uVar6;\n  int iVar7;\n  void **ppvVar8;\n  void *pvVar9;\n  void *pvVar10;\n  void *pvVar11;\n  void *pvVar12;\n  void *__n;\n  size_t __n_00;\n  void *local_2c;\n  \n  if (param_3[2] != 0) {\n    uVar5 = *(ushort *)(param_2 + 3);\n    uVar6 = (uint)uVar5;\n    if (((int)(uVar6 << 0x1c) < 0) && (param_2[4] != (void *)0x0)) {\n      ppvVar8 = (void **)*param_3;\n      pvVar3 = DAT_00083fb8;\n    }\n    else {\n      iVar2 = __swsetup_r(param_1,param_2);\n      if (iVar2 != 0) {\n        return 0xffffffff;\n      }\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar6 = (uint)uVar5;\n      ppvVar8 = (void **)*param_3;\n      pvVar3 = DAT_00083fb8;\n    }\n    DAT_00083fb8 = pvVar3;\n    if ((uVar5 & 2) == 0) {\n      pvVar3 = (void *)(uVar6 & 2);\n      pvVar11 = (void *)(uVar6 & 1);\n      pvVar9 = pvVar3;\n      pvVar10 = pvVar3;\n      local_2c = pvVar3;\n      pvVar12 = pvVar11;\n      if (pvVar11 == (void *)0x0) {\n        while( true ) {\n          while (pvVar11 == (void *)0x0) {\n            pvVar12 = *ppvVar8;\n            ppvVar1 = ppvVar8 + 1;\n            ppvVar8 = ppvVar8 + 2;\n            pvVar11 = *ppvVar1;\n          }\n          pvVar3 = param_2[2];\n          if ((int)(uVar6 << 0x16) < 0) {\n            if (pvVar11 < pvVar3) {\n              pvVar9 = *param_2;\n              pvVar3 = pvVar11;\n            }\n            else if ((uVar6 & 0x480) == 0) {\n              pvVar9 = *param_2;\n            }\n            else {\n              __n_00 = (int)*param_2 - (int)param_2[4];\n              pvVar3 = (void *)(__n_00 + 1 + (int)pvVar11);\n              pvVar9 = (void *)(((int)param_2[5] * 3) / 2);\n              if (pvVar3 <= pvVar9) {\n                pvVar3 = pvVar9;\n              }\n              if ((int)(uVar6 << 0x15) < 0) {\n                pvVar10 = (void *)_malloc_r(param_1,pvVar3);\n                if (pvVar10 == (void *)0x0) {\n                  *param_1 = 0xc;\n                  uVar5 = *(ushort *)(param_2 + 3);\n                  goto LAB_00083da4;\n                }\n                memcpy(pvVar10,param_2[4],__n_00);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                pvVar10 = (void *)_realloc_r(param_1);\n                if (pvVar10 == (void *)0x0) {\n                  _free_r(param_1,param_2[4]);\n                  uVar5 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              pvVar9 = (void *)((int)pvVar10 + __n_00);\n              param_2[4] = pvVar10;\n              param_2[5] = pvVar3;\n              *param_2 = pvVar9;\n              param_2[2] = (void *)((int)pvVar3 - __n_00);\n              pvVar3 = pvVar11;\n            }\n            memmove(pvVar9,pvVar12,(size_t)pvVar3);\n            param_2[2] = (void *)((int)param_2[2] - (int)pvVar3);\n            *param_2 = (void *)((int)*param_2 + (int)pvVar3);\n            pvVar3 = pvVar11;\n          }\n          else if ((param_2[4] < *param_2) || (pvVar9 = param_2[5], pvVar11 < pvVar9)) {\n            if (pvVar11 < pvVar3) {\n              pvVar3 = pvVar11;\n            }\n            memmove(*param_2,pvVar12,(size_t)pvVar3);\n            pvVar9 = param_2[2];\n            param_2[2] = (void *)((int)pvVar9 - (int)pvVar3);\n            *param_2 = (void *)((int)*param_2 + (int)pvVar3);\n            if (((void *)((int)pvVar9 - (int)pvVar3) == (void *)0x0) &&\n               (iVar2 = _fflush_r(param_1,param_2), iVar2 != 0)) goto LAB_00083da2;\n          }\n          else {\n            pvVar3 = (void *)0x7fffffff;\n            if (pvVar11 < (void *)0x7fffffff) {\n              pvVar3 = pvVar11;\n            }\n            pvVar3 = (void *)(*(code *)param_2[9])\n                                       (param_1,param_2[7],pvVar12,\n                                        ((uint)pvVar3 / (uint)pvVar9) * (int)pvVar9);\n            if ((int)pvVar3 < 1) goto LAB_00083da2;\n          }\n          iVar2 = param_3[2];\n          pvVar11 = (void *)((int)pvVar11 - (int)pvVar3);\n          param_3[2] = iVar2 - (int)pvVar3;\n          if (iVar2 - (int)pvVar3 == 0) break;\n          uVar6 = (uint)*(ushort *)(param_2 + 3);\n          pvVar12 = (void *)((int)pvVar12 + (int)pvVar3);\n        }\n      }\n      else {\n        do {\n          while (pvVar3 == (void *)0x0) {\n            pvVar10 = *ppvVar8;\n            pvVar3 = ppvVar8[1];\n            local_2c = (void *)0x0;\n            ppvVar8 = ppvVar8 + 2;\n          }\n          if (local_2c == (void *)0x0) {\n            pvVar9 = memchr(pvVar10,10,(size_t)pvVar3);\n            if (pvVar9 == (void *)0x0) {\n              pvVar9 = (void *)((int)pvVar3 + 1);\n              local_2c = (void *)0x1;\n            }\n            else {\n              pvVar9 = (void *)((int)pvVar9 + (1 - (int)pvVar10));\n              local_2c = (void *)0x1;\n            }\n          }\n          pvVar12 = *param_2;\n          pvVar11 = pvVar9;\n          if (pvVar3 <= pvVar9) {\n            pvVar11 = pvVar3;\n          }\n          pvVar4 = param_2[5];\n          if ((param_2[4] < pvVar12) &&\n             (__n = (void *)((int)param_2[2] + (int)pvVar4), (int)__n < (int)pvVar11)) {\n            memmove(pvVar12,pvVar10,(size_t)__n);\n            *param_2 = (void *)((int)*param_2 + (int)__n);\n            iVar2 = _fflush_r(param_1,param_2);\n            if (iVar2 != 0) goto LAB_00083da2;\n          }\n          else if ((int)pvVar11 < (int)pvVar4) {\n            memmove(pvVar12,pvVar10,(size_t)pvVar11);\n            param_2[2] = (void *)((int)param_2[2] - (int)pvVar11);\n            *param_2 = (void *)((int)pvVar11 + (int)*param_2);\n            __n = pvVar11;\n          }\n          else {\n            __n = (void *)(*(code *)param_2[9])(param_1,param_2[7],pvVar10,pvVar4);\n            if ((int)__n < 1) goto LAB_00083da2;\n          }\n          pvVar9 = (void *)((int)pvVar9 - (int)__n);\n          if ((pvVar9 == (void *)0x0) &&\n             (iVar2 = _fflush_r(param_1,param_2), local_2c = pvVar9, iVar2 != 0)) goto LAB_00083da2;\n          iVar2 = param_3[2];\n          pvVar10 = (void *)((int)pvVar10 + (int)__n);\n          pvVar3 = (void *)((int)pvVar3 - (int)__n);\n          param_3[2] = iVar2 - (int)__n;\n        } while (iVar2 - (int)__n != 0);\n      }\n    }\n    else {\n      pvVar10 = (void *)0x0;\n      pvVar9 = (void *)0x0;\n      do {\n        while( true ) {\n          pvVar11 = pvVar9;\n          if (pvVar3 <= pvVar9) {\n            pvVar11 = pvVar3;\n          }\n          if (pvVar9 != (void *)0x0) break;\n          pvVar10 = *ppvVar8;\n          pvVar9 = ppvVar8[1];\n          ppvVar8 = ppvVar8 + 2;\n        }\n        iVar2 = (*(code *)param_2[9])(param_1,param_2[7],pvVar10,pvVar11);\n        if (iVar2 < 1) {\nLAB_00083da2:\n          uVar5 = *(ushort *)(param_2 + 3);\nLAB_00083da4:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n          return 0xffffffff;\n        }\n        iVar7 = param_3[2];\n        pvVar10 = (void *)((int)pvVar10 + iVar2);\n        pvVar9 = (void *)((int)pvVar9 - iVar2);\n        param_3[2] = iVar7 - iVar2;\n      } while (iVar7 - iVar2 != 0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "_fflush_r",
                "_realloc_r",
                "_free_r",
                "_malloc_r",
                "memcpy",
                "__swsetup_r",
                "memchr",
                "memmove"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083ca8",
            "calling": [
                "__sprint_r.part.0"
            ],
            "imported": false,
            "current_name": "FUNC_00083ca8"
        },
        "FUN_00084404": {
            "renaming": {
                "FUN_00084404": "flush_and_free_buffer_00084404",
                "param_1": "file_stream",
                "param_2": "buffer",
                "uVar1": "result",
                "iVar2": "status"
            },
            "code": "int flush_and_free_buffer_00084404(int file_stream, int buffer) {\\n\\\n  int result;\\n\\\n  if (buffer == 0)\\n\\\n    return 0;\\n\\\n  if (file_stream != 0 && *(int *)(file_stream + 0x38) == 0)\\n\\\n    __sinit();\\n\\\n  if (*(short *)(buffer + 0xc) != 0) {\\n\\\n    result = _fflush_r(file_stream, buffer);\\n\\\n    if (*(code **)(buffer + 0x2c) != (code *)0x0) {\\n\\\n      int status = (**(code **)(buffer + 0x2c))(file_stream, *(undefined4 *)(buffer + 0x1c));\\n\\\n      if (status < 0)\\n\\\n        return -1;\\n\\\n    }\\n\\\n    if ((int)((uint)*(ushort *)(buffer + 0xc) << 0x18) < 0)\\n\\\n      _free_r(file_stream, *(undefined4 *)(buffer + 0x10));\\n\\\n    if (*(int *)(buffer + 0x30) != 0) {\\n\\\n      if (*(int *)(buffer + 0x30) != buffer + 0x40)\\n\\\n        _free_r(file_stream);\\n\\\n      *(undefined4 *)(buffer + 0x30) = 0;\\n\\\n    }\\n\\\n    if (*(int *)(buffer + 0x44) != 0) {\\n\\\n      _free_r(file_stream);\\n\\\n      *(undefined4 *)(buffer + 0x44) = 0;\\n\\\n    }\\n\\\n    __sfp_lock_acquire();\\n\\\n    *(undefined2 *)(buffer + 0xc) = 0;\\n\\\n    __sfp_lock_release();\\n\\\n    return result;\\n\\\n  }\\n\\\n  return 0;\\n\\\n}",
            "called": [
                "_fflush_r",
                "__sfp_lock_acquire",
                "__sfp_lock_release",
                "_free_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084404",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "flush_and_free_buffer_00084404"
        },
        "FUN_00081810": {
            "renaming": {
                "FUN_00081810": "FUNC_00081810"
            },
            "code": "\nint * FUNC_00081810(undefined4 *param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  uint uVar3;\n  uint uVar4;\n  undefined *puVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined4 *puVar10;\n  undefined *puVar11;\n  undefined *puVar12;\n  undefined *puVar13;\n  undefined4 *puVar14;\n  uint uVar15;\n  undefined4 *puVar16;\n  undefined *puVar17;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081876;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081876:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  __malloc_lock(param_1);\n  puVar1 = PTR___malloc_av__00081b3c;\n  if (uVar15 < 0x1f8) {\n    puVar13 = *(undefined **)(PTR___malloc_av__00081b3c + uVar15 + 0xc);\n    if ((puVar13 != PTR___malloc_av__00081b3c + uVar15) ||\n       (puVar12 = puVar13 + 8, puVar13 = *(undefined **)(puVar13 + 0x14), puVar12 != puVar13)) {\n      uVar9 = *(uint *)(puVar13 + 4);\n      iVar6 = *(int *)(puVar13 + 0xc);\n      uVar15 = *(uint *)(puVar13 + (uVar9 & 0xfffffffc) + 4);\n      iVar2 = *(int *)(puVar13 + 8);\n      *(int *)(iVar2 + 0xc) = iVar6;\n      *(int *)(iVar6 + 8) = iVar2;\n      *(uint *)(puVar13 + (uVar9 & 0xfffffffc) + 4) = uVar15 | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    uVar9 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar9 = uVar15 >> 9;\n    if (uVar9 == 0) {\n      iVar6 = 0x7e;\n      iVar2 = 0x3f;\n    }\n    else if (uVar9 < 5) {\n      iVar2 = (uVar15 >> 6) + 0x38;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x15) {\n      iVar2 = uVar9 + 0x5b;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x55) {\n      iVar2 = (uVar15 >> 0xc) + 0x6e;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x155) {\n      iVar2 = (uVar15 >> 0xf) + 0x77;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x555) {\n      iVar2 = (uVar15 >> 0x12) + 0x7c;\n      iVar6 = iVar2 * 2;\n    }\n    else {\n      iVar6 = 0xfc;\n      iVar2 = 0x7e;\n    }\n    for (puVar13 = *(undefined **)(PTR___malloc_av__00081b3c + iVar6 * 4 + 0xc);\n        PTR___malloc_av__00081b3c + iVar6 * 4 != puVar13; puVar13 = *(undefined **)(puVar13 + 0xc))\n    {\n      uVar9 = *(uint *)(puVar13 + 4) & 0xfffffffc;\n      if (0xf < (int)(uVar9 - uVar15)) {\n        iVar2 = iVar2 + -1;\n        break;\n      }\n      if (-1 < (int)(uVar9 - uVar15)) {\n        uVar15 = *(uint *)(puVar13 + uVar9 + 4);\n        iVar6 = *(int *)(puVar13 + 0xc);\n        iVar2 = *(int *)(puVar13 + 8);\n        *(int *)(iVar2 + 0xc) = iVar6;\n        *(int *)(iVar6 + 8) = iVar2;\n        *(uint *)(puVar13 + uVar9 + 4) = uVar15 | 1;\n        __malloc_unlock(param_1);\n        return (int *)(puVar13 + 8);\n      }\n    }\n    uVar9 = iVar2 + 1;\n  }\n  puVar13 = *(undefined **)(PTR___malloc_av__00081b3c + 0x10);\n  puVar12 = PTR___malloc_av__00081b3c + 8;\n  if (puVar13 == puVar12) {\n    uVar3 = *(uint *)(PTR___malloc_av__00081b3c + 4);\n  }\n  else {\n    uVar3 = *(uint *)(puVar13 + 4);\n    uVar4 = uVar3 & 0xfffffffc;\n    uVar7 = uVar4 - uVar15;\n    if (0xf < (int)uVar7) {\n      puVar5 = puVar13 + uVar15;\n      *(uint *)(puVar13 + 4) = uVar15 | 1;\n      *(undefined **)(puVar1 + 0x14) = puVar5;\n      *(undefined **)(puVar1 + 0x10) = puVar5;\n      *(undefined **)(puVar5 + 0xc) = puVar12;\n      *(undefined **)(puVar5 + 8) = puVar12;\n      *(uint *)(puVar5 + 4) = uVar7 | 1;\n      *(uint *)(puVar5 + uVar7) = uVar7;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    *(undefined **)(PTR___malloc_av__00081b3c + 0x14) = puVar12;\n    *(undefined **)(puVar1 + 0x10) = puVar12;\n    if (-1 < (int)uVar7) {\n      *(uint *)(puVar13 + uVar4 + 4) = *(uint *)(puVar13 + uVar4 + 4) | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    if (uVar4 < 0x200) {\n      puVar5 = puVar1 + (uVar3 & 0xfffffff8);\n      iVar2 = *(int *)(puVar5 + 8);\n      uVar3 = 1 << ((int)(uVar3 >> 3) >> 2 & 0xffU) | *(uint *)(puVar1 + 4);\n      *(int *)(puVar13 + 8) = iVar2;\n      *(undefined **)(puVar13 + 0xc) = puVar5;\n      *(uint *)(puVar1 + 4) = uVar3;\n      *(undefined **)(puVar5 + 8) = puVar13;\n      *(undefined **)(iVar2 + 0xc) = puVar13;\n    }\n    else {\n      uVar7 = uVar3 >> 9;\n      if (uVar7 < 5) {\n        iVar6 = (uVar3 >> 6) + 0x38;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x15) {\n        iVar6 = uVar7 + 0x5b;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x55) {\n        iVar6 = (uVar3 >> 0xc) + 0x6e;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x155) {\n        iVar6 = (uVar3 >> 0xf) + 0x77;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x555) {\n        iVar6 = (uVar3 >> 0x12) + 0x7c;\n        iVar2 = iVar6 * 2;\n      }\n      else {\n        iVar2 = 0xfc;\n        iVar6 = 0x7e;\n      }\n      puVar5 = puVar1 + iVar2 * 4;\n      puVar17 = *(undefined **)(puVar5 + 8);\n      if (puVar17 == puVar5) {\n        uVar3 = *(uint *)(PTR___malloc_av__00081d44 + 4) | 1 << (iVar6 >> 2 & 0xffU);\n        *(uint *)(PTR___malloc_av__00081d44 + 4) = uVar3;\n        puVar11 = puVar17;\n      }\n      else {\n        do {\n          puVar11 = puVar17;\n          if ((*(uint *)(puVar17 + 4) & 0xfffffffc) <= uVar4) break;\n          puVar17 = *(undefined **)(puVar17 + 8);\n          puVar11 = puVar17;\n        } while (puVar5 != puVar17);\n        puVar17 = *(undefined **)(puVar11 + 0xc);\n        uVar3 = *(uint *)(puVar1 + 4);\n      }\n      *(undefined **)(puVar13 + 0xc) = puVar17;\n      *(undefined **)(puVar13 + 8) = puVar11;\n      *(undefined **)(puVar17 + 8) = puVar13;\n      *(undefined **)(puVar11 + 0xc) = puVar13;\n    }\n  }\n  uVar4 = 1 << ((int)uVar9 >> 2 & 0xffU);\n  if (uVar4 <= uVar3) {\n    if ((uVar3 & uVar4) == 0) {\n      uVar9 = uVar9 & 0xfffffffc;\n      do {\n        uVar4 = uVar4 << 1;\n        uVar9 = uVar9 + 4;\n      } while ((uVar3 & uVar4) == 0);\n    }\n    do {\n      puVar16 = (undefined4 *)(puVar1 + uVar9 * 8);\n      puVar14 = puVar16;\n      uVar3 = uVar9;\n      do {\n        for (puVar10 = (undefined4 *)puVar14[3]; puVar14 != puVar10;\n            puVar10 = (undefined4 *)puVar10[3]) {\n          uVar7 = puVar10[1] & 0xfffffffc;\n          uVar8 = uVar7 - uVar15;\n          if (0xf < (int)uVar8) {\n            iVar6 = puVar10[2];\n            iVar2 = puVar10[3];\n            puVar13 = (undefined *)(uVar15 + (int)puVar10);\n            puVar10[1] = uVar15 | 1;\n            *(int *)(iVar6 + 0xc) = iVar2;\n            *(int *)(iVar2 + 8) = iVar6;\n            *(undefined **)(puVar1 + 0x14) = puVar13;\n            *(undefined **)(puVar1 + 0x10) = puVar13;\n            *(undefined **)(puVar13 + 0xc) = puVar12;\n            *(undefined **)(puVar13 + 8) = puVar12;\n            *(uint *)(puVar13 + 4) = uVar8 | 1;\n            *(uint *)(puVar13 + uVar8) = uVar8;\n            __malloc_unlock(param_1);\n            return puVar10 + 2;\n          }\n          if (-1 < (int)uVar8) {\n            iVar2 = puVar10[2];\n            iVar6 = puVar10[3];\n            *(uint *)((int)puVar10 + uVar7 + 4) = *(uint *)((int)puVar10 + uVar7 + 4) | 1;\n            *(int *)(iVar2 + 0xc) = iVar6;\n            *(int *)(iVar6 + 8) = iVar2;\n            __malloc_unlock(param_1);\n            return puVar10 + 2;\n          }\n        }\n        uVar3 = uVar3 + 1;\n        puVar14 = puVar14 + 2;\n      } while ((uVar3 & 3) != 0);\n      do {\n        uVar7 = uVar9 & 3;\n        puVar14 = puVar16 + -2;\n        uVar9 = uVar9 - 1;\n        if (uVar7 == 0) {\n          uVar7 = *(uint *)(puVar1 + 4) & ~uVar4;\n          *(uint *)(puVar1 + 4) = uVar7;\n          goto LAB_00081c5e;\n        }\n        puVar16 = (undefined4 *)*puVar16;\n      } while (puVar16 == puVar14);\n      uVar7 = *(uint *)(puVar1 + 4);\nLAB_00081c5e:\n      uVar4 = uVar4 * 2;\n      if ((uVar7 <= uVar4 && uVar4 - uVar7 != 0) || (uVar9 = uVar3, uVar4 == 0)) break;\n      for (; (uVar7 & uVar4) == 0; uVar4 = uVar4 << 1) {\n        uVar9 = uVar9 + 4;\n      }\n    } while( true );\n  }\n  puVar13 = PTR___malloc_sbrk_base_00081b44;\n  puVar12 = *(undefined **)(puVar1 + 8);\n  uVar9 = *(uint *)(puVar12 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar9) && (uVar3 = uVar9 - uVar15, puVar5 = puVar12, 0xf < (int)uVar3))\n  goto LAB_00081b1a;\n  puVar17 = puVar12 + uVar9;\n  if (*(int *)PTR___malloc_sbrk_base_00081b44 == -1) {\n    uVar3 = uVar15 + *(int *)PTR___malloc_top_pad_00081b40 + 0x10;\n  }\n  else {\n    uVar3 = uVar15 + *(int *)PTR___malloc_top_pad_00081b40 + 0x100f & 0xfffff000;\n  }\n  puVar5 = (undefined *)_sbrk_r(param_1,uVar3);\n  puVar11 = PTR___malloc_current_mallinfo_00081b50;\n  if ((puVar5 == (undefined *)0xffffffff) || ((puVar5 < puVar17 && (puVar12 != puVar1)))) {\n    puVar5 = *(undefined **)(puVar1 + 8);\n    uVar9 = *(uint *)(puVar5 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar4 = *(int *)PTR___malloc_current_mallinfo_00081b50 + uVar3;\n    *(uint *)PTR___malloc_current_mallinfo_00081b50 = uVar4;\n    if ((puVar17 == puVar5) && (((uint)puVar17 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(puVar1 + 8) + 4) = uVar3 + uVar9 | 1;\n    }\n    else {\n      if (*(int *)puVar13 == -1) {\n        *(undefined **)PTR___malloc_sbrk_base_00081b44 = puVar5;\n      }\n      else {\n        *(undefined **)puVar11 = puVar5 + (uVar4 - (int)puVar17);\n      }\n      uVar4 = (uint)puVar5 & 7;\n      if (uVar4 == 0) {\n        iVar2 = 0x1000;\n      }\n      else {\n        puVar5 = puVar5 + (8 - uVar4);\n        iVar2 = 0x1008 - uVar4;\n      }\n      iVar2 = iVar2 - ((uint)(puVar5 + uVar3) & 0xfff);\n      iVar6 = _sbrk_r(param_1,iVar2);\n      if (iVar6 == -1) {\n        uVar3 = 1;\n        iVar2 = 0;\n      }\n      else {\n        uVar3 = (iVar6 - (int)puVar5) + iVar2 | 1;\n      }\n      uVar4 = *(int *)puVar11 + iVar2;\n      *(undefined **)(puVar1 + 8) = puVar5;\n      *(uint *)puVar11 = uVar4;\n      *(uint *)(puVar5 + 4) = uVar3;\n      puVar13 = PTR___malloc_current_mallinfo_00081b50;\n      if (puVar12 != puVar1) {\n        if (uVar9 < 0x10) {\n          *(undefined4 *)(puVar5 + 4) = 1;\n          uVar9 = 0;\n          goto LAB_00081b04;\n        }\n        uVar9 = uVar9 - 0xc & 0xfffffff8;\n        *(uint *)(puVar12 + 4) = uVar9 | *(uint *)(puVar12 + 4) & 1;\n        *(undefined4 *)(puVar12 + uVar9 + 4) = 5;\n        *(undefined4 *)(puVar12 + uVar9 + 8) = 5;\n        if (0xf < uVar9) {\n          _free_r(param_1,puVar12 + 8);\n          uVar4 = *(uint *)puVar13;\n        }\n      }\n    }\n    puVar5 = *(undefined **)(puVar1 + 8);\n    if (*(uint *)PTR___malloc_max_sbrked_mem_00081b48 < uVar4) {\n      *(uint *)PTR___malloc_max_sbrked_mem_00081b48 = uVar4;\n    }\n    if (*(uint *)PTR___malloc_max_total_mem_00081b4c < uVar4) {\n      *(uint *)PTR___malloc_max_total_mem_00081b4c = uVar4;\n    }\n    uVar9 = *(uint *)(puVar5 + 4) & 0xfffffffc;\n  }\nLAB_00081b04:\n  uVar3 = uVar9 - uVar15;\n  if ((uVar9 < uVar15) || ((int)uVar3 < 0x10)) {\n    __malloc_unlock(param_1);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  *(uint *)(puVar5 + 4) = uVar15 | 1;\n  *(undefined **)(puVar1 + 8) = puVar5 + uVar15;\n  *(uint *)(puVar5 + uVar15 + 4) = uVar3 | 1;\n  __malloc_unlock(param_1);\n  return (int *)(puVar5 + 8);\n}\n\n",
            "called": [
                "__malloc_lock",
                "_free_r",
                "__malloc_unlock",
                "_sbrk_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081810",
            "calling": [
                "_realloc_r",
                "__smakebuf_r",
                "malloc",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "FUNC_00081810"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "check_completion_status_000800f4",
                "*param_1": "param",
                "*PTR_completed_7857_0008010c": "completed",
                "DAT_00080110": "status",
                "PTR__etext_00080114": "etext"
            },
            "code": "char* check_completion_status_000800f4(char* param) {\\n    char* PTR__etext_00080114 = PTR__PTR__etext_00080114_00080114;\\n    char* *PTR_completed_7857_0008010c = PTR_*PTR_completed_7857_0008010c_7857_0008010c;\\n    char* DAT_00080110 = DAT_00080110;\\n    if (**PTR_completed_7857_0008010c == \"\\0\") {\\n        if (DAT_00080110 != 0) {\\n            param = PTR__etext_00080114;\\n        }\\n        **PTR_completed_7857_0008010c = 1;\\n    }\\n    return param;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "check_completion_status_000800f4"
        },
        "FUN_00080aec": {
            "renaming": {
                "FUN_00080aec": "check_character_00080aec",
                "param_1": "character",
                "uVar1": "mask",
                "uVar2": "bit"
            },
            "code": "int check_character_00080aec(uint character) {\n    uint mask;\n    uint bit;\n\n    if (character < 45) {\n        if (character < 32) {\n            mask = 1 << (character & 0xff);\n            bit = *(uint *)(DAT_00080b28 + 0x18) & mask;\n            if (bit == mask) {\n                *(uint *)(DAT_00080b28 + 0x14) = bit;\n            }\n        }\n        else {\n            mask = 1 << (character - 32 & 0xff);\n            bit = *(uint *)(DAT_00080b28 + 0x108) & mask;\n            if (bit == mask) {\n                *(uint *)(DAT_00080b28 + 0x104) = bit;\n            }\n        }\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aec",
            "calling": [
                "pinMode",
                "end"
            ],
            "imported": false,
            "current_name": "check_character_00080aec"
        },
        "FUN_0008136c": {
            "renaming": {
                "FUN_0008136c": "initializeUART_0008136c",
                "this": "uartClassInstance",
                "dwBaudRate": "baudRate",
                "modeReg": "modeRegister",
                "puVar1": "systemClockPointer",
                "pRVar2": "ringBufferPointer",
                "pUVar3": "uartPointer",
                "_dwId": "uartId",
                "UART_PTCR": "ptcrRegister",
                "UART_CR": "crRegister",
                "UART_MR": "mrRegister",
                "UART_BRGR": "brgrRegister",
                "UART_IDR": "idrRegister",
                "UART_IER": "ierRegister",
                "DAT_000813d8": "interruptEnableRegisterBaseAddress",
                "_dwIrq": "interruptId",
                "_rx_buffer": "rxBuffer",
                "_tx_buffer": "txBuffer",
                "_iTail": "tailIndex",
                "_iHead": "headIndex"
            },
            "code": "void __thiscall initializeUART_0008136c(UARTClass *this, uint32_t baudRate, uint32_t modeReg) {\n  pmc_enable_periph_clk(this->_dwId);\n  Uart *uart = this->_pUart;\n  uart->UART_PTCR = 0x202;\n  uart->UART_CR = 0xac;\n  uart->UART_MR = modeReg;\n  uint32_t systemClock = *(uint *)(PTR_SystemCoreClock_000813d4);\n  uart->UART_BRGR = systemClock / baudRate >> 4;\n  uart->UART_IDR = 0xffffffff;\n  uart->UART_IER = 0x61;\n  uint32_t *interruptEnableRegister = (uint32_t *)(DAT_000813d8 + ((this->_dwIrq >> 5) * 4));\n  *interruptEnableRegister = 1 << (this->_dwIrq & 0x1f);\n  RingBuffer *rxBuffer = this->_rx_buffer;\n  rxBuffer->_iTail = 0;\n  rxBuffer->_iHead = 0;\n  RingBuffer *txBuffer = this->_tx_buffer;\n  txBuffer->_iTail = 0;\n  txBuffer->_iHead = 0;\n  uart->UART_CR = 0x50;\n}",
            "called": [
                "pmc_enable_periph_clk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008136c",
            "calling": [
                "begin",
                "begin"
            ],
            "imported": false,
            "current_name": "initializeUART_0008136c"
        },
        "FUN_000810c4": {
            "renaming": {
                "__thiscall Print::FUN_000810c4": "write_string_to_buffer",
                "*this": "print_object",
                "str": "string_to_write",
                "sVar1": "bytes_written",
                "FUN_000810c4": "write_string_to_buffer_000810c4"
            },
            "code": "size_t write_string_to_buffer_000810c4(Print *print_object, char *string_to_write) {\n  size_t bytes_written = write(print_object, string_to_write);\n  return bytes_written;\n}",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810c4",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "write_string_to_buffer_000810c4"
        },
        "FUN_00080c98": {
            "renaming": {
                "FUN_00080c98": "find_index_of_value_00080c98",
                "*param_1": "*output",
                "param_2": "input_len",
                "param_3": "divisor",
                "param_4": "max_value",
                "uVar1": "quotient",
                "uVar2": "index",
                "local_58": "local_values"
            },
            "code": "uint32_t find_index_of_value_00080c98(uint32_t *output, uint32_t input_len, int divisor, int max_value) {\n    uint32_t local_values[16];\n    local_values[0] = *PTR_DAT_00080d28;\n    local_values[1] = *(uint32_t *)(PTR_DAT_00080d28 + 4);\n    local_values[2] = *(uint32_t *)(PTR_DAT_00080d28 + 8);\n    local_values[3] = *(uint32_t *)(PTR_DAT_00080d28 + 0xc);\n    local_values[4] = *(uint32_t *)(PTR_DAT_00080d28 + 0x10);\n    local_values[5] = *(uint32_t *)(PTR_DAT_00080d28 + 0x14);\n    local_values[6] = *(uint32_t *)(PTR_DAT_00080d28 + 0x18);\n    local_values[7] = *(uint32_t *)(PTR_DAT_00080d28 + 0x1c);\n    local_values[8] = *(uint32_t *)(PTR_DAT_00080d28 + 0x20);\n    local_values[9] = *(uint32_t *)(PTR_DAT_00080d28 + 0x24);\n    local_values[10] = *(uint32_t *)(PTR_DAT_00080d28 + 0x28);\n    local_values[11] = *(uint32_t *)(PTR_DAT_00080d28 + 0x2c);\n    local_values[12] = *(uint32_t *)(PTR_DAT_00080d28 + 0x30);\n    local_values[13] = *(uint32_t *)(PTR_DAT_00080d28 + 0x34);\n    local_values[14] = *(uint32_t *)(PTR_DAT_00080d28 + 0x38);\n    local_values[15] = *(uint32_t *)(PTR_DAT_00080d28 + 0x3c);\n    output[0] = 1;\n    output[1] = 0;\n    output[0x48] = 0x202;\n    output[0x41] = 0;\n    output[0x45] = 0;\n    uint32_t quotient = input_len / (uint32_t)(divisor * 2);\n    if (input_len == divisor * 2 * quotient) {\n        quotient = quotient - 1;\n    }\n    uint32_t index = 0;\n    do {\n        if ((uint32_t)(max_value * (int)(((uint64_t)input_len / (uint64_t)((quotient + 1) * 2)) / (uint64_t)DAT_00080d2c)) <= local_values[index]) {\n            output[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | output[1];\n            return 0;\n        }\n        index = index + 1;\n    } while (index != 0x10);\n    return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c98",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "find_index_of_value_00080c98"
        },
        "FUN_000811e8": {
            "renaming": {
                "FUN_000811e8": "waitForData_000811e8",
                "uVar1": "currentMillis",
                "iVar2": "data"
            },
            "code": "int __thiscall Stream::waitForData_000811e8(Stream *this)\n{\n  uint32_t currentMillis;\n  int data;\n  currentMillis = millis();\n  this->_startMillis = currentMillis;\n  do {\n    data = (*(this->super_Print)._vptr_Print[3])();\n    if (data >= 0) {\n      return data;\n    }\n    currentMillis = millis();\n  } while (currentMillis - this->_startMillis < this->_timeout);\n  return -1;\n}",
            "called": [
                "millis"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811e8",
            "calling": [
                "readStringUntil"
            ],
            "imported": false,
            "current_name": "waitForData_000811e8"
        },
        "FUN_00080250": {
            "renaming": {
                "FUN_00080250": "controlVehicle_00080250",
                "puVar2": "rxMode",
                "puVar3": "mode",
                "uVar4": "isSteerCommand",
                "uVar5": "pulseDuration",
                "lVar6": "mappedValue",
                "iVar7": "availableBytes",
                "__fd": "fileDescriptor",
                "__in_chrg": "inCharge",
                "__in_chrg_00": "inCharge0",
                "__fd_00": "fileDescriptor0",
                "pvVar8": "printableValue",
                "sVar9": "stringLength",
                "SStack_1c": "inputString",
                "this": "servo",
                "PTR_rxMode_000803bc": "rxMode",
                "PTR_LEDstatus_000803c0": "LEDstatus",
                "PTR_mode_000803cc": "mode",
                "PTR_rxSteer_000803d4": "rxSteer",
                "PTR_rxMotor_000803d8": "rxMotor",
                "PTR_Serial_000803c8": "Serial",
                "PTR_throttle_000803e0": "throttle",
                "PTR_steering_000803e4": "steering",
                "PTR_s_Entered_manual_control_mode__000803d0": "\"Entered manual control mode.\"",
                "PTR_s_Entered_autonomous_control_mode__000803e8": "\"Entered autonomous control mode.\"",
                "PTR_s_steer_000803f4": "\"steer\"",
                "PTR_s_motor_000803f8": "\"motor\"",
                "PTR_command_000803ec": "command",
                "PTR_value_000803f0": "value",
                "PTR_DAT_000803dc": "\",\"",
                "PTR_s_error_000803c4": "\"Error.\""
            },
            "code": "void controlVehicle_00080250() {\\n  uint32_t pulseDuration;\\n  bool ledStatus;\\n  String PTR_command_000803ec;\\n  String PTR_value_000803f0;\\n  int steerAngle;\\n  int motorSpeed;\\n  bool manualControlMode;\\n  bool autonomousControlMode;\\n  while (true) {\\n    pulseDuration = pulseIn(4, HIGH, 20000);\\n    PTR_rxMode_000803bc = pulseDuration;\\n    delay(10);\\n    ledStatus = !ledStatus;\\n    PTR_LEDstatus_000803c0 = ledStatus;\\n    digitalWrite(LED_BUILTIN, ledStatus);\\n    if (PTR_rxMode_000803bc < 1601) {\\n      if ((PTR_rxMode_000803bc >= 901) && (PTR_mode_000803cc != 0)) {\\n        straightAndStop();\\n        PTR_Serial_000803c8.println(\\\"Entered manual control PTR_mode_000803cc.\\\");\\n        PTR_mode_000803cc = 0;\\n      }\\n      delay(10);\\n      pulseDuration = pulseIn(3, HIGH, 20000);\\n      steerAngle = map(pulseDuration, 1000, 2000, 40, 150);\\n      PTR_rxSteer_000803d4 = steerAngle;\\n      pulseDuration = pulseIn(2, HIGH, 20000);\\n      motorSpeed = map(pulseDuration, 1000, 2000, 1000, 2000);\\n      PTR_rxMotor_000803d8 = motorSpeed;\\n      while (PTR_Serial_000803c8.available() > 0) {\\n        PTR_command_000803ec = PTR_Serial_000803c8.readStringUntil(\\\",\\\");\\n        PTR_value_000803f0 = PTR_Serial_000803c8.readStringUntil(\\\"\\n\\\");\\n        PTR_Serial_000803c8.read();\\n        if (PTR_command_000803ec == \\\"steer\\\") {\\n          steerAngle = PTR_value_000803f0.toInt();\\n          PTR_steering_000803e4.write(steerAngle);\\n        }\\n        else if (PTR_command_000803ec == \\\"motor\\\") {\\n          motorSpeed = PTR_value_000803f0.toInt();\\n          PTR_throttle_000803e0.write(motorSpeed);\\n        }\\n      }\\n      PTR_steering_000803e4.write(PTR_rxSteer_000803d4);\\n      PTR_throttle_000803e0.write(PTR_rxMotor_000803d8);\\n    }\\n    else {\\n      if (PTR_mode_000803cc == 0) {\\n        straightAndStop();\\n        PTR_Serial_000803c8.println(\\\"Entered autonomous control PTR_mode_000803cc.\\\");\\n        PTR_mode_000803cc = 1;\\n      }\\n      while (PTR_Serial_000803c8.available() > 0) {\\n        PTR_command_000803ec = PTR_Serial_000803c8.readStringUntil(\\\",\\\");\\n        PTR_value_000803f0 = PTR_Serial_000803c8.readStringUntil(\\\"\\n\\\");\\n        PTR_Serial_000803c8.read();\\n        if (PTR_command_000803ec == \\\"steer\\\") {\\n          steerAngle = PTR_value_000803f0.toInt();\\n          PTR_steering_000803e4.write(steerAngle);\\n        }\\n        else if (PTR_command_000803ec == \\\"motor\\\") {\\n          motorSpeed = PTR_value_000803f0.toInt();\\n          PTR_throttle_000803e0.write(motorSpeed);\\n        }\\n      }\\n      autonomousControlMode = true;\\n    }\\n  }\\n}",
            "called": [
                "map",
                "println",
                "pulseIn",
                "print",
                "print",
                "println",
                "delay",
                "~String",
                "toInt",
                "straightAndStop",
                "available",
                "write",
                "equals",
                "digitalWrite",
                "read",
                "readStringUntil",
                "operator="
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080250",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "controlVehicle_00080250"
        },
        "FUN_00080d6a": {
            "renaming": {
                "FUN_00080d6a": "set_parameter_00080d6a",
                "param_1": "base_address",
                "param_2": "parameter_value"
            },
            "code": "void set_parameter_00080d6a(int base_address, int parameter_value)\n{\n  *(int *)(base_address + 0x28) = parameter_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d6a",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_parameter_00080d6a"
        },
        "FUN_000813dc": {
            "renaming": {
                "FUN_000813dc": "initializeUART_000813dc",
                "this": "uart",
                "dwBaudRate": "baudRate",
                "init": "init"
            },
            "code": "void __thiscall initializeUART_000813dc(UARTClass *uart, uint32_t baudRate) {\n  init(uart, baudRate, 0x800);\n  return;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813dc",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initializeUART_000813dc"
        },
        "FUN_00080a0a": {
            "renaming": {
                "FUN_00080a0a": "set_parameters_00080a0a",
                "param_1": "params",
                "param_2": "value",
                "param_3": "is_third_param_zero",
                "param_4": "is_fourth_param_zero",
                "param_5": "is_fifth_param_zero",
                "0x11": "params[17]",
                "0x14": "params[20]",
                "0x15": "params[21]",
                "0x18": "params[24]",
                "0x19": "params[25]",
                "0xc": "params[12]",
                "0xd": "params[13]"
            },
            "code": "void set_parameters_00080a0a(undefined4 *params, undefined4 value, int is_third_param_zero, int is_fourth_param_zero, int is_fifth_param_zero) {\n  params[0] = value;\n  params[4] = value;\n  if (is_third_param_zero == 0) {\n    params[12] = value;\n  } else {\n    params[13] = value;\n  }\n  if (is_fourth_param_zero == 0) {\n    params[20] = value;\n  } else {\n    params[21] = value;\n  }\n  if (is_fifth_param_zero == 0) {\n    params[24] = value;\n  } else {\n    params[25] = value;\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a0a",
            "calling": [
                "PIO_Configure",
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "set_parameters_00080a0a"
        },
        "FUN_00080b2c": {
            "renaming": {
                "FUN_00080b2c": "initialize_channel_00080b2c",
                "param_1": "channel_id",
                "param_2": "channel_size",
                "param_3": "channel_data",
                "uVar3": "combined_id_size",
                "iVar1": "offset_1",
                "iVar2": "offset_2"
            },
            "code": "void initialize_channel_00080b2c(int channel_id, uint32_t channel_size, void *channel_data)\n{\n  int offset_1;\n  int offset_2;\n  uint64_t combined_id_size = CONCAT44(channel_size, channel_id);\n  if (channel_size > 2) {\n    channel_data = PTR___func___6792_00080b58;\n    combined_id_size = (*DAT_00080b60)(PTR_s____source_tc_c_00080b54,0x40,PTR___func___6792_00080b58,PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b5c);\n  }\n  offset_1 = (int)((ulonglong)combined_id_size >> 0x20) * 0x40;\n  offset_2 = (int)combined_id_size + offset_1;\n  *(int *)((int)combined_id_size + offset_1) = 2;\n  *(int *)(offset_2 + 0x28) = 0xffffffff;\n  *(void **)(offset_2 + 4) = channel_data;\n}\n",
            "called": [
                "__assert_func"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b2c",
            "calling": [
                "_initISR"
            ],
            "imported": false,
            "current_name": "initialize_channel_00080b2c"
        },
        "FUN_00083888": {
            "renaming": {
                "FUN_00083888": "initializeStruct_00083888",
                "param_1": "structPointer",
                "puVar5": "firstStruct",
                "puVar6": "secondStruct",
                "uVar1": "value1",
                "uVar2": "value2",
                "uVar3": "value3",
                "uVar4": "value4"
            },
            "code": "void initializeStruct_00083888(int structPointer)\n{\n  if (*(int *)(structPointer + 0x38) == 0)\n  {\n    undefined4 *firstStruct = *(undefined4 **)(structPointer + 4);\n    undefined4 *secondStruct = *(undefined4 **)(structPointer + 8);\n    undefined4 *thirdStruct = *(undefined4 **)(structPointer + 0xc);\n    firstStruct[0] = 0;\n    firstStruct[1] = 0;\n    firstStruct[2] = 0;\n    firstStruct[3] = 4;\n    firstStruct[4] = 0;\n    firstStruct[5] = 0;\n    firstStruct[6] = 0;\n    firstStruct[7] = firstStruct;\n    firstStruct[8] = *(undefined4 *)(structPointer + 0x18);\n    firstStruct[9] = *(undefined4 *)(structPointer + 0x14);\n    firstStruct[10] = *(undefined4 *)(structPointer + 0x10);\n    firstStruct[11] = *(undefined4 *)(structPointer + 0xc);\n    memset(firstStruct + 0x17, 0, 8);\n    secondStruct[0] = 0;\n    secondStruct[1] = 0;\n    secondStruct[2] = 0;\n    secondStruct[3] = 9;\n    secondStruct[4] = 0;\n    secondStruct[5] = 0;\n    secondStruct[6] = 0;\n    secondStruct[7] = secondStruct;\n    secondStruct[8] = *(undefined4 *)(structPointer + 0x18);\n    secondStruct[9] = *(undefined4 *)(structPointer + 0x14);\n    secondStruct[10] = *(undefined4 *)(structPointer + 0x10);\n    secondStruct[11] = *(undefined4 *)(structPointer + 0xc);\n    memset(secondStruct + 0x17, 0, 8);\n    thirdStruct[0] = 0;\n    thirdStruct[1] = 0;\n    thirdStruct[2] = 0;\n    thirdStruct[3] = 0x12;\n    thirdStruct[4] = 0;\n    thirdStruct[5] = 0;\n    thirdStruct[6] = 0;\n    thirdStruct[7] = thirdStruct;\n    thirdStruct[8] = *(undefined4 *)(structPointer + 0x18);\n    thirdStruct[9] = *(undefined4 *)(structPointer + 0x14);\n    thirdStruct[10] = *(undefined4 *)(structPointer + 0x10);\n    thirdStruct[11] = *(undefined4 *)(structPointer + 0xc);\n    memset(thirdStruct + 0x17, 0, 8);\n    *(undefined4 *)(structPointer + 0x38) = 1;\n  }\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083888",
            "calling": [
                "_fflush_r",
                "_vfiprintf_r",
                "__swbuf_r",
                "__swsetup_r",
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "initializeStruct_00083888"
        },
        "FUN_00081348": {
            "renaming": {
                "FUN_00081348::FUN_00081348": "UART_Controller::UART_Controller",
                "*this": "this",
                "Uart *pUart": "Uart *uart",
                "IRQn_Type dwIrq": "IRQn_Type irq",
                "uint32_t dwId": "uint32_t id",
                "RingBuffer *pRx_buffer": "RingBuffer *rx_buffer",
                "RingBuffer *pTx_buffer": "RingBuffer *tx_buffer",
                "puVar1": "puVar1",
                "FUN_00081348": "UART_Controller_00081348"
            },
            "code": "UART_Controller_00081348 * __thiscall UART_Controller_00081348::UART_Controller_00081348(UART_Controller_00081348 *this,Uart *uart,IRQn_Type irq,uint32_t id,RingBuffer *rx_buffer,RingBuffer *tx_buffer) {\n  this->field_0x4 = 0;\n  this->field_0x8 = 1000;\n  this->_pUart = uart;\n  this->_rx_buffer = rx_buffer;\n  this->_dwId = id;\n  this->_tx_buffer = tx_buffer;\n  this->_dwIrq = irq;\n  *(undefined **)this = PTR_PTR_write_1_00081368;\n  return this;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081348",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription",
                "USARTClass"
            ],
            "imported": false,
            "current_name": "UART_Controller_00081348"
        },
        "FUN_000801e0": {
            "renaming": {
                "FUN_000801e0": "initializeCar_000801e0",
                "0xe100": "57600",
                "0xd": "13",
                "0x39": "57",
                "straightAndStop": "straightenWheelsAndStop",
                "PTR_Serial_00080244": "serialPointer",
                "PTR_steering_00080248": "steeringPointer",
                "PTR_throttle_0008024c": "throttlePointer",
                "startForkserver": "startForkServer"
            },
            "code": "void initializeCar_000801e0() {\n  // Initialize UART communication with a baud rate of 57600\n  UARTClass::begin((UARTClass *)PTR_Serial_00080244, 57600);\n  // Set pin modes\n  pinMode(13, OUTPUT);\n  pinMode(6, OUTPUT);\n  pinMode(57, INPUT);\n  pinMode(4, INPUT);\n  pinMode(3, INPUT);\n  pinMode(2, INPUT);\n  // Attach servos to their respective pins\n  Servo::attach((Servo *)PTR_steering_00080248, 5);\n  Servo::attach((Servo *)PTR_throttle_0008024c, 6);\n  // Straighten the wheels and stop the car\n  straightAndStop();\n  // Wait for 1 second\n  delay(1000);\n  // Start the forkserver\n  startForkserver(0);\n  return;\n}",
            "called": [
                "pinMode",
                "straightAndStop",
                "startForkserver",
                "delay",
                "attach",
                "begin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initializeCar_000801e0"
        },
        "FUN_00080d80": {
            "renaming": {
                "FUN_00080d80": "processCallbacksOnPioA_00080d80",
                "uVar1": "leadingZeroesCount",
                "uVar2": "bitMask",
                "PTR_callbacksPioA_00080db4": "PTR_callbacksPioA",
                "DAT_00080db0": "DAT_PioA"
            },
            "code": "void processCallbacksOnPioA_00080d80(void)\n{\n  uint32_t bitMask;\n  uint32_t leadingZeroesCount;\n  uint32_t callbackIndex;\n\n  bitMask = *(uint32_t *)(DAT_00080db0 + 0x4c);\n  while( true ) {\n    leadingZeroesCount = count_leading_zeroes(bitMask);\n    if (leadingZeroesCount > 0x1f) break;\n    callbackIndex = 0x1f - leadingZeroesCount;\n    if (*(code **)(PTR_callbacksPioA_00080db4_00080db4 + callbackIndex * 4) != (code *)0x0) {\n      (**(code **)(PTR_callbacksPioA_00080db4_00080db4 + callbackIndex * 4))();\n    }\n    bitMask = bitMask & ~(1 << callbackIndex);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d80",
            "calling": [],
            "imported": false,
            "current_name": "processCallbacksOnPioA_00080d80"
        },
        "FUN_000811b0": {
            "renaming": {
                "FUN_000811b0::FUN_000811b0": "InitializeBuffer",
                "this": "buffer",
                "memset": "initializeMemory",
                "_iHead": "head_index",
                "_iTail": "tail_index",
                "FUN_000811b0": "InitializeBuffer_000811b0"
            },
            "code": "InitializeBuffer_000811b0 * __thiscall InitializeBuffer_000811b0(InitializeBuffer_000811b0 *buffer)\n{\n    memset(buffer, 0, 0x80);\n    buffer->head_index = 0;\n    buffer->tail_index = 0;\n    return buffer;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b0",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "InitializeBuffer_000811b0"
        },
        "FUN_0008387c": {
            "renaming": {
                "FUN_0008387c": "walk_and_free_memory_blocks_0008387c",
                "param_1": "ptr",
                "DAT_00083884": "size"
            },
            "code": "void walk_and_free_memory_blocks_0008387c(void* ptr, DAT_00083884_t DAT_00083884)\n{\n  _fwalk(ptr, DAT_00083884);\n  return;\n}",
            "called": [
                "_fwalk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008387c",
            "calling": [],
            "imported": false,
            "current_name": "walk_and_free_memory_blocks_0008387c"
        },
        "FUN_0008145c": {
            "renaming": {
                "FUN_0008145c": "map_0008145c",
                "x": "value",
                "in_min": "in_min",
                "in_max": "in_max",
                "out_min": "out_min",
                "out_max": "out_max",
                "uint": "long",
                "mapped_value": "mapped_value"
            },
            "code": "long map_0008145c(long value, long in_min, long in_max, long out_min, long out_max) {\n    long map_0008145cped_value = (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n    return map_0008145cped_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008145c",
            "calling": [
                "write",
                "loop"
            ],
            "imported": false,
            "current_name": "map_0008145c"
        },
        "FUN_00081f94": {
            "renaming": {
                "FUN_00081f94": "do_nothing_00081f94"
            },
            "code": "\nvoid do_nothing_00081f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f94",
            "calling": [
                "_realloc_r",
                "_free_r",
                "_malloc_r",
                "_malloc_trim_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00081f94"
        },
        "FUN_00081f98": {
            "renaming": {
                "FUN_00081f98": "do_nothing_00081f98"
            },
            "code": "\nvoid do_nothing_00081f98(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f98",
            "calling": [
                "_realloc_r",
                "_free_r",
                "_malloc_r",
                "_malloc_trim_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00081f98"
        },
        "FUN_000809e4": {
            "renaming": {
                "FUN_000809e4": "set_values_000809e4",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "bitmask",
                "bVar1": "is_bitmask_negative"
            },
            "code": "void set_values_000809e4(uint32_t *memory, uint32_t value, uint32_t bitmask) {\n  bool is_bitmask_negative = (int)(bitmask << 0x1f) < 0;\n\n  memory[17] = value;\n\n  if (is_bitmask_negative) {\n    memory[25] = value;\n  }\n\n  if (!is_bitmask_negative) {\n    memory[24] = value;\n  }\n\n  bool is_bitmask_bit_1_set = (bitmask & 0x0000000A) != 0;\n\n  if (is_bitmask_bit_1_set) {\n    memory[8] = value;\n  }\n\n  if (!is_bitmask_bit_1_set) {\n    memory[9] = value;\n  }\n\n  bool is_bitmask_bit_30_or_31_set = ((int)(bitmask << 0x1e) < 0) || ((int)(bitmask << 0x1c) < 0);\n\n  if (is_bitmask_bit_30_or_31_set) {\n    memory[32] = value;\n  }\n\n  memory[5] = value;\n  *memory = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809e4",
            "calling": [
                "PIO_Configure"
            ],
            "imported": false,
            "current_name": "set_values_000809e4"
        },
        "FUN_00081470": {
            "renaming": {
                "FUN_00081470": "do_nothing_00081470"
            },
            "code": "\nvoid __thiscall String::do_nothing_00081470(String *this)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081470",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_00081470"
        },
        "FUN_00081472": {
            "renaming": {
                "_String": "freeStringBuffer",
                "this": "string",
                "__in_chrg": "isBeingDeleted",
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "buffer": "buffer",
                "FUN_00081472": "freeStringBuffer_00081472"
            },
            "code": "void* freeStringBuffer_00081472(String* string, int isBeingDeleted) {\n\tfree(string->buffer);\n\treturn string;\n}",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081472",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "freeStringBuffer_00081472"
        },
        "FUN_00084860": {
            "renaming": {
                "FUN_00084860": "FUNC_00084860"
            },
            "code": "\nundefined8 FUNC_00084860(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084860",
            "calling": [
                "__gnu_uldivmod_helper"
            ],
            "imported": false,
            "current_name": "FUNC_00084860"
        },
        "FUN_000836ec": {
            "renaming": {
                "FUN_000836ec": "crash_and_exit_000836ec",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void crash_and_exit_000836ec(void)\n{\n    raise(SIGABRT);\n    exit(EXIT_FAILURE);\n}",
            "called": [
                "_exit",
                "raise"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836ec",
            "calling": [
                "__assert_func"
            ],
            "imported": false,
            "current_name": "crash_and_exit_000836ec"
        },
        "FUN_00080148": {
            "renaming": {
                "FUN_00080148": "performSoftwareInterruptAndReturn_00080148",
                "a0": "inputVal",
                "a1": "unusedParam",
                "a2": "unusedParam2"
            },
            "code": "uint32_t performSoftwareInterruptAndReturn_00080148(uint32_t inputVal,uint32_t unusedParam,int32_t unusedParam2)\n{\n  software_interrupt(0x3f);\n  return inputVal;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080148",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "performSoftwareInterruptAndReturn_00080148"
        },
        "FUN_00082688": {
            "renaming": {
                "FUN_00082688": "count_chars_00082688",
                "__s": "string",
                "sVar1": "offset",
                "puVar2": "word_ptr",
                "uVar3": "word",
                "bVar4": "byte_check"
            },
            "code": "size_t count_chars_00082688(char *string)\n{\n  size_t count = 0;\n  uint32_t *word_ptr = (uint32_t *)((uint32_t)string & 0xfffffffc);\n  size_t offset = -((uint32_t)string & 3);\n  uint32_t word = *word_ptr;\n  if (((uint32_t)string & 3) != 0) {\n    word = word | 0xffffffffU >> ((offset + 4 & 0x1f) << 3);\n  }\n  while (word + 0xfefefeff & ~word & 0x80808080) == 0) {\n    offset += 4;\n    word = *(++word_ptr);\n  }\n  bool byte_check = (word & 0xff) == 0;\n  if (!byte_check) {\n    offset++;\n    byte_check = (word & 0xff00) == 0;\n  }\n  if (!byte_check) {\n    offset++;\n    byte_check = (word & 0xff0000) == 0;\n  }\n  if (!byte_check) {\n    offset++;\n  }\n  count = offset;\n  return count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082688",
            "calling": [
                "write",
                "_vfiprintf_r",
                "String"
            ],
            "imported": false,
            "current_name": "count_chars_00082688"
        },
        "FUN_00084508": {
            "renaming": {
                "FUN_00084508": "read_file_00084508",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "error_ptr",
                "iVar2": "read_result"
            },
            "code": "void read_file_00084508(int *error_code, int file_descriptor, char *buffer, int buffer_size) {\n    int read_result = 0;\n    int *error_ptr = PTR_errno_0008452c;\n    *(int *)PTR_errno_0008452c = 0;\n    read_result = _read(file_descriptor, buffer, buffer_size);\n    if (read_result == -1 && *error_ptr != 0) {\n        *error_code = *error_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084508",
            "calling": [
                "__sread"
            ],
            "imported": false,
            "current_name": "read_file_00084508"
        },
        "FUN_0008429c": {
            "renaming": {
                "FUN_0008429c": "close_file_descriptor_0008429c",
                "param_1": "stream",
                "param_2": "descriptor_offset",
                "_close_r": "_close_r",
                "(int)*(short *)(param_2 + 0xe)": "file_descriptor",
                "return": "return"
            },
            "code": "void close_file_descriptor_0008429c(void* stream, int descriptor_offset) {\n    int file_descriptor = *(short *)(descriptor_offset + 0xe);\n    _close_r(stream, file_descriptor);\n    return;\n}",
            "called": [
                "_close_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008429c",
            "calling": [],
            "imported": false,
            "current_name": "close_file_descriptor_0008429c"
        },
        "FUN_00080a30": {
            "renaming": {
                "FUN_00080a30": "process_data_00080a30",
                "param_1": "data_ptr",
                "param_2": "data_type",
                "param_3": "data_value",
                "param_4": "data_flag",
                "bVar1": "is_negative_flag"
            },
            "code": "int process_data_00080a30(int data_ptr,int data_type, int data_value, uint32_t data_flag)\n{\n    bool is_negative_flag;\n    switch(data_type) {\n        case 1:\n        case 2:\n            (*data_ptr)(data_ptr, data_type, data_value);\n            is_negative_flag = (int)(data_flag << 0x1f) < 0;\n            *(int *)(data_ptr + 0x44) = data_value;\n            if (is_negative_flag) {\n                *(int *)(data_ptr + 100) = data_value;\n            }\n            if (!is_negative_flag) {\n                *(int *)(data_ptr + 0x60) = data_value;\n            }\n            break;\n        case 3:\n            (*data_ptr)(data_ptr, data_value, data_flag, data_ptr, data_ptr);\n            break;\n        case 4:\n        case 5:\n            (*data_ptr)(data_ptr, data_value, data_type == 5, (data_flag << 0x1d) >> 0x1f, data_flag & 1, data_type, data_value);\n            break;\n        default:\n            return 0;\n    }\n    return 1;\n}",
            "called": [
                "PIO_SetOutput",
                "PIO_SetInput",
                "PIO_SetPeripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a30",
            "calling": [
                "pinMode",
                "init"
            ],
            "imported": false,
            "current_name": "process_data_00080a30"
        },
        "FUN_000810a6": {
            "renaming": {
                "__thiscall Print::FUN_000810a6": "print_string",
                "this": "this",
                "str": "string",
                "sVar1": "string_length",
                "sVar2": "print_result",
                "FUN_000810a6": "print_string_000810a6"
            },
            "code": "size_t __thiscall print_string_000810a6(Print *this, char *string) {\n  size_t string_length;\n  size_t print_result;\n\n  if (string != NULL) {\n    string_length = strlen(string);\n    print_result = (*this->_vptr_Print[1])(string_length, string, string_length);\n    return print_result;\n  }\n  return (size_t)string;\n}",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810a6",
            "calling": [
                "print",
                "println",
                "println",
                "printNumber"
            ],
            "imported": false,
            "current_name": "print_string_000810a6"
        }
    },
    "used_tokens": 137793,
    "layers": [
        [
            "FUN_000809b4",
            "FUN_00080e6a",
            "FUN_00081684",
            "FUN_000825cc",
            "FUN_00083984",
            "FUN_00080598",
            "FUN_00080aa8",
            "FUN_00080118",
            "FUN_00083a74",
            "FUN_00080e80",
            "FUN_00080d62",
            "FUN_00080e84",
            "FUN_00080e88",
            "FUN_000836d8",
            "FUN_000812b8",
            "FUN_00081570",
            "FUN_000803fc",
            "FUN_00083630",
            "FUN_00081214",
            "FUN_0008439c",
            "FUN_0008427c",
            "FUN_000809be",
            "FUN_00080d70",
            "FUN_000840f8",
            "FUN_000813e4",
            "FUN_00081d48",
            "FUN_00083fbc",
            "FUN_00084494",
            "FUN_00084018",
            "FUN_000815de",
            "FUN_00080578",
            "FUN_0008400c",
            "FUN_00080e60",
            "FUN_000814d0",
            "FUN_00080c20",
            "FUN_00080e62",
            "FUN_0008044c",
            "FUN_00080efe",
            "FUN_00081e34",
            "FUN_00080e66",
            "FUN_000826e8",
            "FUN_00080df0",
            "FUN_00083850",
            "FUN_000815ec",
            "FUN_00080588",
            "FUN_00080d3e",
            "FUN_000841f4",
            "FUN_000812a0",
            "FUN_0008130c",
            "FUN_0008142e",
            "FUN_00080d58",
            "FUN_00081084",
            "FUN_00080558",
            "FUN_00083708",
            "FUN_0008458c",
            "FUN_0008434c",
            "FUN_0008151c",
            "FUN_000816f8",
            "FUN_00084244",
            "FUN_00084004",
            "FUN_000816ec",
            "FUN_00080568",
            "FUN_000814ae",
            "FUN_00081778",
            "FUN_00080d30",
            "FUN_00080eec",
            "FUN_000816c8",
            "FUN_000810fc",
            "FUN_00080ec2",
            "FUN_00081624",
            "FUN_00080ec8",
            "FUN_000843e0",
            "FUN_00080eba",
            "FUN_0008173c",
            "FUN_00081190",
            "FUN_000805e8",
            "FUN_00080ebe",
            "FUN_000816d8",
            "FUN_000815b8",
            "FUN_00080e28",
            "FUN_00084220",
            "FUN_00080db8",
            "FUN_0008421c",
            "FUN_0008089c",
            "FUN_000816e4",
            "FUN_00080750",
            "FUN_00080ea4",
            "FUN_00080f0c",
            "FUN_000844e0",
            "FUN_0008236c",
            "FUN_000842a4",
            "FUN_000839b4",
            "FUN_00080eb0",
            "FUN_00081734",
            "FUN_00080768",
            "FUN_00080a94",
            "FUN_00081618",
            "FUN_0008455c",
            "FUN_00081f00",
            "FUN_0008075c",
            "FUN_00080eaa",
            "FUN_00084530",
            "FUN_00080970",
            "FUN_000806ac",
            "FUN_20070000",
            "FUN_000834f0",
            "FUN_0008125a",
            "FUN_000810d8",
            "FUN_00080f04",
            "FUN_000805a8",
            "FUN_00080184",
            "FUN_000810cc",
            "FUN_00081276",
            "FUN_000844bc",
            "FUN_00080b90",
            "FUN_0008356c",
            "FUN_00080b98",
            "FUN_000843b8",
            "FUN_0008073c",
            "FUN_00081480",
            "FUN_00081244",
            "FUN_000836fc",
            "FUN_00081248",
            "FUN_0008418c",
            "FUN_0008014c",
            "FUN_000811ca",
            "FUN_00080164",
            "FUN_00081496",
            "FUN_00081014",
            "FUN_00084404",
            "FUN_000800f4",
            "FUN_00080aec",
            "FUN_0008136c",
            "FUN_000810c4",
            "FUN_00080c98",
            "FUN_000811e8",
            "FUN_00080250",
            "FUN_00080d6a",
            "FUN_000813dc",
            "FUN_00080a0a",
            "FUN_00080b2c",
            "FUN_00083888",
            "FUN_00081348",
            "FUN_000801e0",
            "FUN_00080d80",
            "FUN_0008387c",
            "FUN_0008145c",
            "FUN_000809e4",
            "FUN_000836ec",
            "FUN_00080148",
            "FUN_00082688",
            "FUN_00084508",
            "FUN_0008429c",
            "FUN_00080a30",
            "FUN_000810a6"
        ],
        [
            "FUN_00081560",
            "FUN_000814f6",
            "FUN_000841e4",
            "FUN_000827fc",
            "FUN_00081438",
            "FUN_00084484",
            "FUN_000806f8",
            "FUN_00080774",
            "FUN_0008117a",
            "FUN_000817f0",
            "FUN_00081750",
            "FUN_000817c8",
            "FUN_00082814",
            "FUN_00081176",
            "FUN_00082824",
            "FUN_0008113a",
            "FUN_000810e8",
            "FUN_00081f9c",
            "FUN_00081800",
            "FUN_00080b64",
            "FUN_0008159e",
            "FUN_000806a0",
            "FUN_000811b0",
            "FUN_00081472"
        ]
    ],
    "locked_functions": []
}