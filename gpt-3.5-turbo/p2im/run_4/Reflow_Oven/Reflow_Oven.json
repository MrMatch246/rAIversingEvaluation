{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "initialize_flag_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 initializeFlag_0800010c(undefined4 inputParameter)\n\n{\n  if ((char)DAT_20000160 == '\\0') {\n    DAT_20000160._0_1_ = '\\x01';\n  }\n  return inputParameter;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "initialize_flag_0800010c",
                "param_1": "inputParameter"
            },
            "calling": [],
            "called": [
                "FUN_08007328"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "determine_string_length_08000178",
            "code": "\nchar * determine_string_length_08000178(char *string)\n\n{\n  char current_character;\n  char *next_character;\n  char *current_position;\n  \n  current_position = string;\n  do {\n    next_character = current_position + 1;\n    current_character = *current_position;\n    current_position = next_character;\n  } while (current_character != '\\0');\n  return next_character + (-1 - (int)string);\n}\n\n",
            "renaming": {
                "FUN_08000178": "determine_string_length_08000178",
                "param_1": "string",
                "cVar1": "current_character",
                "pcVar2": "next_character",
                "pcVar3": "current_position"
            },
            "calling": [
                "FUN_08005c96",
                "FUN_08005ce8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000190": {
            "entrypoint": "0x08000190",
            "current_name": "perform_arithmetic_operation_08000190",
            "code": "\nulonglong performArithmeticOperation_08000190(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int iterationCount;\n  byte carryFlag;\n  uint result;\n  uint tempResult;\n  uint tempResult2;\n  uint tempVar1;\n  uint tempVar2;\n  int tempIterationCount;\n  uint operand1;\n  uint operand2;\n  uint tempOperand1;\n  uint tempOperand2;\n  bool boolean1;\n  bool boolean2;\n  bool boolean3;\n  \n  tempVar1 = input4 ^ 0x80000000;\n  operand1 = input2 << 1;\n  input4 = input4 << 1;\n  boolean1 = ((input2 ^ tempVar1) & 0x7fffffff) == 0;\n  boolean2 = boolean1 && input1 == input3;\n  if (!boolean1 || input1 != input3) {\n    boolean2 = (operand1 | input1) == 0;\n  }\n  if (!boolean2) {\n    boolean2 = (input4 | input3) == 0;\n  }\n  tempIterationCount = (int)operand1 >> 0x15;\n  if (!boolean2) {\n    boolean2 = tempIterationCount == -1;\n  }\n  iterationCount = (int)input4 >> 0x15;\n  if (!boolean2) {\n    boolean2 = iterationCount == -1;\n  }\n  if (boolean2) {\n    if (tempIterationCount == -1 || iterationCount == -1) {\n      operand1 = tempVar1;\n      tempOperand1 = input3;\n      if (tempIterationCount == -1) {\n        operand1 = input2;\n        tempOperand1 = input1;\n      }\n      if (tempIterationCount != -1 || iterationCount != -1) {\n        input3 = tempOperand1;\n        tempVar1 = operand1;\n      }\n      boolean2 = (tempOperand1 | operand1 << 0xc) == 0;\n      if (boolean2) {\n        boolean2 = (input3 | tempVar1 << 0xc) == 0;\n      }\n      if (boolean2) {\n        boolean2 = operand1 == tempVar1;\n      }\n      if (!boolean2) {\n        operand1 = operand1 | 0x80000;\n      }\n      return CONCAT44(operand1,tempOperand1);\n    }\n    if (((input2 ^ tempVar1) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((operand1 | input1) == 0) {\n        input1 = input3;\n        input2 = tempVar1;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != tempVar1) {\n      return 0;\n    }\n    if (operand1 >> 0x15 == 0) {\n      boolean2 = (input1 & 0x80000000) != 0;\n      tempVar1 = input2 * 2 + (uint)boolean2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)boolean2)) {\n        tempVar1 = tempVar1 | 0x80000000;\n      }\n      return CONCAT44(tempVar1,input1 << 1);\n    }\n    if (operand1 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  operand1 = operand1 >> 0x15;\n  input4 = input4 >> 0x15;\n  tempOperand1 = input4 - operand1;\n  boolean2 = tempOperand1 != 0;\n  if (input4 < operand1) {\n    tempOperand1 = -tempOperand1;\n  }\n  operand2 = input1;\n  tempVar2 = input2;\n  if (boolean2 && operand1 <= input4) {\n    operand1 = operand1 + tempOperand1;\n    operand2 = input3;\n    tempVar2 = tempVar1;\n    input3 = input1;\n    tempVar1 = input2;\n  }\n  if (0x36 < tempOperand1) {\n    return CONCAT44(tempVar2,operand2);\n  }\n  tempResult = tempVar2 & 0xfffff | 0x100000;\n  if ((tempVar2 & 0x80000000) != 0) {\n    boolean2 = operand2 != 0;\n    operand2 = -operand2;\n    tempResult = -tempResult - (uint)boolean2;\n  }\n  tempVar2 = tempVar1 & 0xfffff | 0x100000;\n  if ((tempVar1 & 0x80000000) != 0) {\n    boolean2 = input3 != 0;\n    input3 = -input3;\n    tempVar2 = -tempVar2 - (uint)boolean2;\n  }\n  if (operand1 == tempOperand1) {\n    tempVar2 = tempVar2 ^ 0x100000;\n    if (operand1 == 0) {\n      tempResult = tempResult ^ 0x100000;\n      operand1 = 1;\n    }\n    else {\n      tempOperand1 = tempOperand1 - 1;\n    }\n  }\n  tempVar1 = -tempOperand1 + 0x20;\n  if ((int)tempOperand1 < 0x21) {\n    tempOperand2 = input3 << (tempVar1 & 0xff);\n    input3 = input3 >> (tempOperand1 & 0xff);\n    result = operand2 + input3;\n    tempResult2 = tempVar2 << (tempVar1 & 0xff);\n    tempVar1 = result + tempResult2;\n    tempResult = tempResult + CARRY4(operand2,input3) + ((int)tempVar2 >> (tempOperand1 & 0xff)) +\n            (uint)CARRY4(result,tempResult2);\n  }\n  else {\n    tempOperand2 = tempVar2 << (-tempOperand1 + 0x40 & 0xff);\n    if (input3 != 0) {\n      tempOperand2 = tempOperand2 | 2;\n    }\n    tempVar2 = (int)tempVar2 >> (tempOperand1 - 0x20 & 0xff);\n    tempVar1 = operand2 + tempVar2;\n    tempResult = tempResult + ((int)tempVar2 >> 0x1f) + (uint)CARRY4(operand2,tempVar2);\n  }\n  input2 = tempResult & 0x80000000;\n  tempOperand1 = tempResult;\n  if ((int)tempResult < 0) {\n    boolean2 = tempOperand2 == 0;\n    tempOperand2 = -tempOperand2;\n    tempOperand1 = -tempVar1;\n    tempVar1 = -(uint)!boolean2 - tempVar1;\n    tempOperand1 = -(uint)(boolean2 <= tempOperand1) - tempResult;\n  }\n  if (0xfffff < tempOperand1) {\n    operand2 = operand1 - 1;\n    if (0x1fffff < tempOperand1) {\n      operand2 = tempOperand1 & 1;\n      tempOperand1 = tempOperand1 >> 1;\n      carryFlag = (byte)tempVar1;\n      tempVar1 = (uint)(operand2 != 0) << 0x1f | tempVar1 >> 1;\n      tempOperand2 = (uint)(carryFlag & 1) << 0x1f | tempOperand2 >> 1;\n      operand2 = operand1;\n      if (0xffbfffff < operand1 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    boolean2 = 0x7fffffff < tempOperand2;\n    if (tempOperand2 == 0x80000000) {\n      boolean2 = (tempVar1 & 1) != 0;\n    }\n    return CONCAT44(tempOperand1 + operand2 * 0x100000 + (uint)CARRY4(tempVar1,(uint)boolean2) | input2,\n                    tempVar1 + boolean2);\n  }\n  boolean1 = (tempOperand2 & 0x80000000) != 0;\n  tempOperand2 = tempOperand2 << 1;\n  operand2 = tempVar1 * 2;\n  boolean2 = CARRY4(tempVar1,tempVar1);\n  tempVar1 = tempVar1 * 2 + (uint)boolean1;\n  tempOperand1 = tempOperand1 * 2 + (uint)(boolean2 || CARRY4(operand2,(uint)boolean1));\n  operand2 = operand1 - 2;\n  if ((tempOperand1 & 0x100000) != 0) goto LAB_080002a0;\n  tempVar2 = tempVar1;\n  operand1 = tempOperand1;\n  if (tempOperand1 == 0) {\n    tempVar2 = 0;\n    operand1 = tempVar1;\n  }\n  tempIterationCount = LZCOUNT(operand1);\n  if (tempOperand1 == 0) {\n    tempIterationCount = tempIterationCount + 0x20;\n  }\n  tempOperand1 = tempIterationCount - 0xb;\n  boolean3 = SBORROW4(tempOperand1,0x20);\n  tempVar1 = tempIterationCount - 0x2b;\n  boolean2 = (int)tempVar1 < 0;\n  boolean1 = tempVar1 == 0;\n  if ((int)tempOperand1 < 0x20) {\n    boolean3 = SCARRY4(tempVar1,0xc);\n    tempIterationCount = tempIterationCount + -0x1f;\n    boolean2 = tempIterationCount < 0;\n    boolean1 = tempIterationCount == 0;\n    tempVar1 = tempOperand1;\n    if (!boolean1 && boolean2 == boolean3) {\n      tempVar2 = operand1 << (tempOperand1 & 0xff);\n      operand1 = operand1 >> (0xcU - tempIterationCount & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (boolean1 || boolean2 != boolean3) {\n    tempOperand2 = 0x20 - tempVar1;\n  }\n  operand1 = operand1 << (tempVar1 & 0xff);\n  if (boolean1 || boolean2 != boolean3) {\n    operand1 = operand1 | tempVar2 >> (tempOperand2 & 0xff);\n  }\n  if (boolean1 || boolean2 != boolean3) {\n    tempVar2 = tempVar2 << (tempVar1 & 0xff);\n  }\nLAB_08000318:\n  if ((int)tempOperand1 <= (int)operand2) {\n    return CONCAT44(operand1 + (operand2 - tempOperand1) * 0x100000 | input2,tempVar2);\n  }\n  tempVar1 = ~(operand2 - tempOperand1);\n  if ((int)tempVar1 < 0x1f) {\n    tempIterationCount = tempVar1 - 0x13;\n    if (tempIterationCount != 0 && tempIterationCount < 0 == SCARRY4(tempVar1 - 0x1f,0xc)) {\n      return CONCAT44(tempResult,tempVar2 >> (0x20 - (0xcU - tempIterationCount) & 0xff) | operand1 << (0xcU - tempIterationCount & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    tempVar1 = tempVar1 + 1;\n    return CONCAT44(input2 | operand1 >> (tempVar1 & 0xff),\n                    tempVar2 >> (tempVar1 & 0xff) | operand1 << (0x20 - tempVar1 & 0xff));\n  }\n  return CONCAT44(tempResult,operand1 >> (tempVar1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000190": "perform_arithmetic_operation_08000190",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "iterationCount",
                "bVar2": "carryFlag",
                "uVar3": "result",
                "uVar4": "tempResult",
                "uVar5": "tempResult2",
                "uVar6": "tempVar1",
                "uVar7": "tempVar2",
                "iVar8": "tempIterationCount",
                "uVar9": "operand1",
                "uVar10": "operand2",
                "uVar11": "tempOperand1",
                "uVar12": "tempOperand2",
                "bVar13": "boolean1",
                "bVar14": "boolean2",
                "bVar15": "boolean3"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001a66"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000194": {
            "entrypoint": "0x08000194",
            "current_name": "calculate_diff_08000194",
            "code": "\nulonglong calculate_diff_08000194(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int shift_amount_1;\n  byte carry_bit;\n  uint temp_var_1;\n  uint temp_var_2;\n  uint temp_var_3;\n  int shift_amount_2;\n  uint temp_var_4;\n  uint temp_var_5;\n  uint temp_var_6;\n  uint temp_var_7;\n  uint temp_var_8;\n  uint temp_var_9;\n  bool condition_1;\n  bool condition_2;\n  bool condition_3;\n  \n  temp_var_4 = input_2 << 1;\n  temp_var_6 = input_4 << 1;\n  condition_1 = ((input_2 ^ input_4) & 0x7fffffff) == 0;\n  condition_2 = condition_1 && input_1 == input_3;\n  if (!condition_1 || input_1 != input_3) {\n    condition_2 = (temp_var_4 | input_1) == 0;\n  }\n  if (!condition_2) {\n    condition_2 = (temp_var_6 | input_3) == 0;\n  }\n  shift_amount_2 = (int)temp_var_4 >> 0x15;\n  if (!condition_2) {\n    condition_2 = shift_amount_2 == -1;\n  }\n  shift_amount_1 = (int)temp_var_6 >> 0x15;\n  if (!condition_2) {\n    condition_2 = shift_amount_1 == -1;\n  }\n  if (condition_2) {\n    if (shift_amount_2 == -1 || shift_amount_1 == -1) {\n      temp_var_6 = input_4;\n      temp_var_4 = input_3;\n      if (shift_amount_2 == -1) {\n        temp_var_6 = input_2;\n        temp_var_4 = input_1;\n      }\n      if (shift_amount_2 != -1 || shift_amount_1 != -1) {\n        input_3 = temp_var_4;\n        input_4 = temp_var_6;\n      }\n      condition_2 = (temp_var_4 | temp_var_6 << 0xc) == 0;\n      if (condition_2) {\n        condition_2 = (input_3 | input_4 << 0xc) == 0;\n      }\n      if (condition_2) {\n        condition_2 = temp_var_6 == input_4;\n      }\n      if (!condition_2) {\n        temp_var_6 = temp_var_6 | 0x80000;\n      }\n      return CONCAT44(temp_var_6,temp_var_4);\n    }\n    if (((input_2 ^ input_4) & 0x7fffffff) != 0 || input_1 != input_3) {\n      if ((temp_var_4 | input_1) == 0) {\n        input_1 = input_3;\n        input_2 = input_4;\n      }\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != input_4) {\n      return 0;\n    }\n    if (temp_var_4 >> 0x15 == 0) {\n      condition_2 = (input_1 & 0x80000000) != 0;\n      temp_var_6 = input_2 * 2 + (uint)condition_2;\n      if (CARRY4(input_2,input_2) || CARRY4(input_2 * 2,(uint)condition_2)) {\n        temp_var_6 = temp_var_6 | 0x80000000;\n      }\n      return CONCAT44(temp_var_6,input_1 << 1);\n    }\n    if (temp_var_4 < 0xffc00000) {\n      return CONCAT44(input_2 + 0x100000,input_1);\n    }\n    input_2 = input_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(input_2 | 0x7ff00000) << 0x20;\n  }\n  temp_var_4 = temp_var_4 >> 0x15;\n  temp_var_6 = temp_var_6 >> 0x15;\n  temp_var_7 = temp_var_6 - temp_var_4;\n  condition_2 = temp_var_7 != 0;\n  if (temp_var_6 < temp_var_4) {\n    temp_var_7 = -temp_var_7;\n  }\n  temp_var_5 = input_1;\n  temp_var_3 = input_2;\n  if (condition_2 && temp_var_4 <= temp_var_6) {\n    temp_var_4 = temp_var_4 + temp_var_7;\n    temp_var_5 = input_3;\n    temp_var_3 = input_4;\n    input_3 = input_1;\n    input_4 = input_2;\n  }\n  if (0x36 < temp_var_7) {\n    return CONCAT44(temp_var_3,temp_var_5);\n  }\n  temp_var_6 = temp_var_3 & 0xfffff | 0x100000;\n  if ((temp_var_3 & 0x80000000) != 0) {\n    condition_2 = temp_var_5 != 0;\n    temp_var_5 = -temp_var_5;\n    temp_var_6 = -temp_var_6 - (uint)condition_2;\n  }\n  temp_var_3 = input_4 & 0xfffff | 0x100000;\n  if ((input_4 & 0x80000000) != 0) {\n    condition_2 = input_3 != 0;\n    input_3 = -input_3;\n    temp_var_3 = -temp_var_3 - (uint)condition_2;\n  }\n  if (temp_var_4 == temp_var_7) {\n    temp_var_3 = temp_var_3 ^ 0x100000;\n    if (temp_var_4 == 0) {\n      temp_var_6 = temp_var_6 ^ 0x100000;\n      temp_var_4 = 1;\n    }\n    else {\n      temp_var_7 = temp_var_7 - 1;\n    }\n  }\n  temp_var_9 = -temp_var_7 + 0x20;\n  if ((int)temp_var_7 < 0x21) {\n    temp_var_8 = input_3 << (temp_var_9 & 0xff);\n    input_3 = input_3 >> (temp_var_7 & 0xff);\n    temp_var_1 = temp_var_5 + input_3;\n    temp_var_2 = temp_var_3 << (temp_var_9 & 0xff);\n    temp_var_9 = temp_var_1 + temp_var_2;\n    temp_var_6 = temp_var_6 + CARRY4(temp_var_5,input_3) + ((int)temp_var_3 >> (temp_var_7 & 0xff)) +\n            (uint)CARRY4(temp_var_1,temp_var_2);\n  }\n  else {\n    temp_var_8 = temp_var_3 << (-temp_var_7 + 0x40 & 0xff);\n    if (input_3 != 0) {\n      temp_var_8 = temp_var_8 | 2;\n    }\n    temp_var_3 = (int)temp_var_3 >> (temp_var_7 - 0x20 & 0xff);\n    temp_var_9 = temp_var_5 + temp_var_3;\n    temp_var_6 = temp_var_6 + ((int)temp_var_3 >> 0x1f) + (uint)CARRY4(temp_var_5,temp_var_3);\n  }\n  input_2 = temp_var_6 & 0x80000000;\n  temp_var_7 = temp_var_6;\n  if ((int)temp_var_6 < 0) {\n    condition_2 = temp_var_8 == 0;\n    temp_var_8 = -temp_var_8;\n    temp_var_7 = -temp_var_9;\n    temp_var_9 = -(uint)!condition_2 - temp_var_9;\n    temp_var_7 = -(uint)(condition_2 <= temp_var_7) - temp_var_6;\n  }\n  if (0xfffff < temp_var_7) {\n    temp_var_5 = temp_var_4 - 1;\n    if (0x1fffff < temp_var_7) {\n      temp_var_6 = temp_var_7 & 1;\n      temp_var_7 = temp_var_7 >> 1;\n      carry_bit = (byte)temp_var_9;\n      temp_var_9 = (uint)(temp_var_6 != 0) << 0x1f | temp_var_9 >> 1;\n      temp_var_8 = (uint)(carry_bit & 1) << 0x1f | temp_var_8 >> 1;\n      temp_var_5 = temp_var_4;\n      if (0xffbfffff < temp_var_4 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    condition_2 = 0x7fffffff < temp_var_8;\n    if (temp_var_8 == 0x80000000) {\n      condition_2 = (temp_var_9 & 1) != 0;\n    }\n    return CONCAT44(temp_var_7 + temp_var_5 * 0x100000 + (uint)CARRY4(temp_var_9,(uint)condition_2) | input_2,\n                    temp_var_9 + condition_2);\n  }\n  condition_1 = (temp_var_8 & 0x80000000) != 0;\n  temp_var_8 = temp_var_8 << 1;\n  temp_var_5 = temp_var_9 * 2;\n  condition_2 = CARRY4(temp_var_9,temp_var_9);\n  temp_var_9 = temp_var_9 * 2 + (uint)condition_1;\n  temp_var_7 = temp_var_7 * 2 + (uint)(condition_2 || CARRY4(temp_var_5,(uint)condition_1));\n  temp_var_5 = temp_var_4 - 2;\n  if ((temp_var_7 & 0x100000) != 0) goto LAB_080002a0;\n  temp_var_3 = temp_var_9;\n  temp_var_4 = temp_var_7;\n  if (temp_var_7 == 0) {\n    temp_var_3 = 0;\n    temp_var_4 = temp_var_9;\n  }\n  shift_amount_2 = LZCOUNT(temp_var_4);\n  if (temp_var_7 == 0) {\n    shift_amount_2 = shift_amount_2 + 0x20;\n  }\n  temp_var_9 = shift_amount_2 - 0xb;\n  condition_3 = SBORROW4(temp_var_9,0x20);\n  temp_var_7 = shift_amount_2 - 0x2b;\n  condition_2 = (int)temp_var_7 < 0;\n  condition_1 = temp_var_7 == 0;\n  if ((int)temp_var_9 < 0x20) {\n    condition_3 = SCARRY4(temp_var_7,0xc);\n    shift_amount_2 = shift_amount_2 + -0x1f;\n    condition_2 = shift_amount_2 < 0;\n    condition_1 = shift_amount_2 == 0;\n    temp_var_7 = temp_var_9;\n    if (!condition_1 && condition_2 == condition_3) {\n      temp_var_3 = temp_var_4 << (temp_var_9 & 0xff);\n      temp_var_4 = temp_var_4 >> (0xcU - shift_amount_2 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (condition_1 || condition_2 != condition_3) {\n    temp_var_8 = 0x20 - temp_var_7;\n  }\n  temp_var_4 = temp_var_4 << (temp_var_7 & 0xff);\n  if (condition_1 || condition_2 != condition_3) {\n    temp_var_4 = temp_var_4 | temp_var_3 >> (temp_var_8 & 0xff);\n  }\n  if (condition_1 || condition_2 != condition_3) {\n    temp_var_3 = temp_var_3 << (temp_var_7 & 0xff);\n  }\nLAB_08000318:\n  if ((int)temp_var_9 <= (int)temp_var_5) {\n    return CONCAT44(temp_var_4 + (temp_var_5 - temp_var_9) * 0x100000 | input_2,temp_var_3);\n  }\n  temp_var_7 = ~(temp_var_5 - temp_var_9);\n  if ((int)temp_var_7 < 0x1f) {\n    shift_amount_2 = temp_var_7 - 0x13;\n    if (shift_amount_2 != 0 && shift_amount_2 < 0 == SCARRY4(temp_var_7 - 0x1f,0xc)) {\n      return CONCAT44(temp_var_6,temp_var_3 >> (0x20 - (0xcU - shift_amount_2) & 0xff) | temp_var_4 << (0xcU - shift_amount_2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp_var_7 = temp_var_7 + 1;\n    return CONCAT44(input_2 | temp_var_4 >> (temp_var_7 & 0xff),\n                    temp_var_3 >> (temp_var_7 & 0xff) | temp_var_4 << (0x20 - temp_var_7 & 0xff));\n  }\n  return CONCAT44(temp_var_6,temp_var_4 >> (temp_var_7 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000194": "calculate_diff_08000194",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "shift_amount_1",
                "bVar2": "carry_bit",
                "uVar3": "temp_var_1",
                "uVar4": "temp_var_2",
                "uVar5": "temp_var_3",
                "iVar6": "shift_amount_2",
                "uVar7": "temp_var_4",
                "uVar8": "temp_var_5",
                "uVar9": "temp_var_6",
                "uVar10": "temp_var_7",
                "uVar11": "temp_var_8",
                "uVar12": "temp_var_9",
                "bVar13": "condition_1",
                "bVar14": "condition_2",
                "bVar15": "condition_3"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_080015f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800040c": {
            "entrypoint": "0x0800040c",
            "current_name": "reverse_bits_0800040c",
            "code": "\nulonglong reverseBits_0800040c(uint input_value)\n\n{\n  uint result;\n  uint shift_amount;\n  int count;\n  uint offset;\n  uint mask;\n  bool is_negative;\n  bool is_zero;\n  bool has_overflow;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  result = 0;\n  count = LZCOUNT(input_value);\n  offset = count + 0x15;\n  has_overflow = SBORROW4(offset,0x20);\n  shift_amount = count - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (offset < 0x20) {\n    has_overflow = SCARRY4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = count + 1 == 0;\n    shift_amount = offset;\n    if (!is_zero && has_overflow == false) {\n      result = input_value << offset;\n      input_value = input_value >> (0xcU - (count + 1) & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (is_zero || is_negative != has_overflow) {\n    mask = 0x20 - shift_amount;\n  }\n  input_value = input_value << (shift_amount & 0xff);\n  if (is_zero || is_negative != has_overflow) {\n    input_value = input_value | 0U >> (mask & 0xff);\n  }\n  if (is_zero || is_negative != has_overflow) {\n    result = 0 << (shift_amount & 0xff);\n  }\nLAB_08000318:\n  if (offset < 0x433) {\n    return CONCAT44(input_value + (0x432 - offset) * 0x100000,result);\n  }\n  shift_amount = ~(0x432 - offset);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(input_value >> (shift_amount - 0x1f & 0xff));\n  }\n  count = shift_amount - 0x13;\n  if (count == 0 || count < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(input_value >> (shift_amount & 0xff),\n                    result >> (shift_amount & 0xff) | input_value << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(result >> (0x20 - (0xcU - count) & 0xff) | input_value << (0xcU - count & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800040c": "reverse_bits_0800040c",
                "param_1": "input_value",
                "uVar1": "result",
                "uVar2": "shift_amount",
                "iVar3": "count",
                "uVar4": "offset",
                "in_r12": "mask",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "has_overflow"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08000cd0",
                "FUN_08001918",
                "FUN_080015f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800042c": {
            "entrypoint": "0x0800042c",
            "current_name": "extend_unsigned_number_0800042c",
            "code": "\nulonglong extendUnsignedNumber_0800042c(uint number)\n\n{\n  uint bitCount;\n  uint absNumber;\n  uint shiftAmount;\n  int leadingZeros;\n  uint newBitCount;\n  uint signBit;\n  uint temp;\n  bool isZero;\n  bool isAbsNumberNegative;\n  bool isShiftAmountNegative;\n  \n  if (number == 0) {\n    return 0;\n  }\n  signBit = number & 0x80000000;\n  absNumber = number;\n  if ((int)signBit < 0) {\n    absNumber = -number;\n  }\n  bitCount = 0;\n  leadingZeros = countLeadingZeros(absNumber);\n  newBitCount = leadingZeros + 0x15;\n  isShiftAmountNegative = subtractWithOverflow(newBitCount,0x20);\n  shiftAmount = leadingZeros - 0xb;\n  isZero = (int)shiftAmount < 0;\n  isAbsNumberNegative = shiftAmount == 0;\n  if (newBitCount < 0x20) {\n    isShiftAmountNegative = addWithCarry(shiftAmount,0xc);\n    isZero = false;\n    isAbsNumberNegative = leadingZeros + 1 == 0;\n    shiftAmount = newBitCount;\n    if (!isAbsNumberNegative && isShiftAmountNegative == false) {\n      bitCount = absNumber << newBitCount;\n      absNumber = absNumber >> (SHIFT_AMOUNT_LIMIT - (leadingZeros + 1) & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (isAbsNumberNegative || isZero != isShiftAmountNegative) {\n    temp = 0x20 - shiftAmount;\n  }\n  absNumber = absNumber << (shiftAmount & 0xff);\n  if (isAbsNumberNegative || isZero != isShiftAmountNegative) {\n    absNumber = absNumber | zeroBits >> (temp & 0xff);\n  }\n  if (isAbsNumberNegative || isZero != isShiftAmountNegative) {\n    bitCount = 0 << (shiftAmount & 0xff);\n  }\nLAB_08000318:\n  if (newBitCount < 0x433) {\n    return CONCAT44(absNumber + (0x432 - newBitCount) * 0x100000 | signBit,bitCount);\n  }\n  shiftAmount = ~(0x432 - newBitCount);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(number,absNumber >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeros = shiftAmount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != addWithCarry(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(signBit | absNumber >> (shiftAmount & 0xff),\n                    bitCount >> (shiftAmount & 0xff) | absNumber << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(number,bitCount >> (0x20 - (SHIFT_AMOUNT_LIMIT - leadingZeros) & 0xff) | absNumber << (SHIFT_AMOUNT_LIMIT - leadingZeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800042c": "extend_unsigned_number_0800042c",
                "param_1": "number",
                "uVar1": "bitCount",
                "uVar2": "absNumber",
                "uVar3": "shiftAmount",
                "iVar4": "leadingZeros",
                "uVar5": "newBitCount",
                "uVar6": "signBit",
                "in_r12": "temp",
                "bVar7": "isZero",
                "bVar8": "isAbsNumberNegative",
                "bVar9": "isShiftAmountNegative",
                "LZCOUNT": "countLeadingZeros",
                "SBORROW4": "subtractWithOverflow",
                "SCARRY4": "addWithCarry",
                "0U": "zeroBits",
                "0xcU": "SHIFT_AMOUNT_LIMIT"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_08001918"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004f8": {
            "entrypoint": "0x080004f8",
            "current_name": "calculate_shifted_result_080004f8",
            "code": "\nulonglong calculate_shifted_result_080004f8(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong combined_inputs;\n  \n  combined_inputs = CONCAT44(input2,input1);\n  temp6 = 0x7ff;\n  temp2 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    temp5 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp5 == 0x7ff;\n  }\n  if (flag1) {\n    combined_inputs = calculate_shifted_result_080004f8_080006d4();\n  }\n  temp1 = (uint)(combined_inputs >> 0x20);\n  temp3 = temp2 + temp5;\n  temp2 = temp1 ^ input4;\n  temp1 = temp1 & ~(temp6 << 0x15);\n  input4 = input4 & ~(temp6 << 0x15);\n  flag1 = ((uint)combined_inputs | temp1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input3 | input4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (flag1) {\n    input3 = (uint)combined_inputs | input3;\n    input4 = (temp2 & 0x80000000 | temp1) ^ input4;\n    temp2 = temp6 >> 1;\n    flag3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    flag1 = temp4 == 0;\n    temp1 = temp4;\n    if (!flag1 && (int)temp2 <= temp3) {\n      flag3 = SBORROW4(temp6,temp4);\n      temp1 = temp6 - temp4;\n      flag1 = temp6 == temp4;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      input4 = input4 | temp4 * 0x100000;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp6 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    flag1 = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    result1 = (combined_inputs & 0xffffffff) * (ulonglong)input3;\n    combined_inputs = (combined_inputs & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp1 * (ulonglong)input3 + (result1 >> 0x20);\n    temp7 = (uint)combined_inputs;\n    result2 = (ulonglong)temp1 * (ulonglong)input4 + (combined_inputs >> 0x20);\n    temp6 = (uint)result2;\n    temp1 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      temp7 = temp7 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      flag1 = (temp7 & 0x80000000) != 0;\n      temp7 = temp7 << 1;\n      result2 = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp6,temp6) || CARRY4(temp6 * 2,(uint)flag1)),\n                       temp6 * 2 + (uint)flag1);\n    }\n    input4 = temp2 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    input3 = (uint)result2 << 0xb | temp7 >> 0x15;\n    temp6 = temp7 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    flag1 = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      flag1 = temp1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp6;\n      if (temp6 == 0x80000000) {\n        flag1 = (temp7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp4 * 0x100000 + (uint)CARRY4(input3,(uint)flag1),input3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  flag1 = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = input3 >> (temp1 & 0xff) | input4 << (0x20 - temp1 & 0xff);\n    temp2 = (input4 >> (temp1 & 0xff) & ~((input4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp6 | input3 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(input4,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    temp7 = input3 << (temp4 + 0x20 & 0xff);\n    temp1 = input3 >> (temp2 & 0xff) | input4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp7 >> 0x1f);\n    if ((temp6 | temp7 << 1) == 0) {\n      temp4 = temp4 & ~(temp7 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp7 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = input3 << (temp2 & 0xff);\n  temp2 = input3 >> (0x20 - temp2 & 0xff) | input4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp6 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "renaming": {
                "FUN_080004f8": "calculate_shifted_result_080004f8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "lVar2": "result2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "iVar5": "temp3",
                "uVar6": "temp4",
                "unaff_r5": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "uVar12": "combined_inputs"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_080015f8"
            ],
            "called": [
                "FUN_080006d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006d4": {
            "entrypoint": "0x080006d4",
            "current_name": "calculate_shifted_result_080006d4",
            "code": "\nulonglong calculate_shifted_result_080006d4(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint bit_1;\n  uint bit_2;\n  uint bit_2;\n  uint bit_4;\n  uint bit_5;\n  bool is_zero;\n  \n  bit_2 = bit_5 & input_4 >> 0x14;\n  if (bit_2 != bit_5 && bit_2 != bit_5) {\n    is_zero = (input_1 | input_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (bit_2 == 0) {\n      bit_4 = input_2 & 0x80000000;\n      do {\n        bit_1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(bit_1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | bit_4;\n      if (bit_2 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      bit_2 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(bit_2 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  bit_4 = input_2;\n  if (((!is_zero) && ((bit_2 != bit_5 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((bit_2 != bit_5 || (input_1 = input_3, bit_4 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit_4,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006d4": "calculate_shifted_result_080006d4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "bit_1",
                "unaff_r4": "bit_2",
                "uVar2": "bit_2",
                "uVar3": "bit_4",
                "in_r12": "bit_5",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_080004f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800074c": {
            "entrypoint": "0x0800074c",
            "current_name": "calculate_improved_double_0800074c",
            "code": "\nulonglong calculate_improved_double_0800074c(undefined4 param1,uint param2,uint param3,uint param4)\n\n{\n  uint bitShiftedResult1;\n  uint bitShiftedResult2;\n  uint shiftedValue1;\n  uint shiftedValue2;\n  uint tempValue1;\n  uint tempValue2;\n  uint tempValue3;\n  int diffResult;\n  uint exponent1;\n  uint unaff_r5;\n  uint exponent2;\n  uint mantissa1;\n  uint mantissa2;\n  uint maxValue;\n  bool isZero;\n  bool isEqual;\n  bool isCarry;\n  undefined8 result;\n  \n  result = CONCAT44(param2,param1);\n  maxValue = 0x7ff;\n  tempValue3 = param2 >> 0x14 & 0x7ff;\n  isZero = tempValue3 == 0;\n  if (!isZero) {\n    unaff_r5 = param4 >> 0x14 & 0x7ff;\n    isZero = unaff_r5 == 0;\n  }\n  if (!isZero) {\n    isZero = tempValue3 == 0x7ff;\n  }\n  if (!isZero) {\n    isZero = unaff_r5 == 0x7ff;\n  }\n  if (isZero) {\n    result = calculate_double_080008ba();\n  }\n  exponent1 = (uint)((ulonglong)result >> 0x20);\n  mantissa1 = (uint)result;\n  diffResult = tempValue3 - unaff_r5;\n  if ((param3 | param4 << 0xc) == 0) {\n    tempValue3 = (exponent1 ^ param4) & 0x80000000 | exponent1 & 0xfffff;\n    isCarry = SCARRY4(diffResult,maxValue >> 1);\n    exponent1 = diffResult + (maxValue >> 1);\n    isZero = (int)exponent1 < 0;\n    isEqual = exponent1 == 0;\n    if (!isEqual && isZero == isCarry) {\n      isCarry = SBORROW4(maxValue,exponent1);\n      isZero = (int)(maxValue - exponent1) < 0;\n      isEqual = maxValue == exponent1;\n    }\n    if (!isEqual && isZero == isCarry) {\n      tempValue3 = tempValue3 | exponent1 * 0x100000;\n    }\n    if (!isEqual && isZero == isCarry) {\n      return CONCAT44(tempValue3,mantissa1);\n    }\n    tempValue3 = tempValue3 | 0x100000;\n    maxValue = 0;\n    isEqual = SBORROW4(exponent1,1);\n    exponent1 = exponent1 - 1;\n    isZero = exponent1 == 0;\n    shiftedValue1 = exponent1;\n  }\n  else {\n    shiftedValue1 = (param4 << 0xc) >> 4 | 0x10000000 | param3 >> 0x18;\n    maxValue = param3 << 8;\n    exponent2 = (exponent1 << 0xc) >> 4 | 0x10000000 | mantissa1 >> 0x18;\n    mantissa1 = mantissa1 * 0x100;\n    tempValue3 = (exponent1 ^ param4) & 0x80000000;\n    isZero = shiftedValue1 <= exponent2;\n    if (exponent2 == shiftedValue1) {\n      isZero = maxValue <= mantissa1;\n    }\n    diffResult = diffResult + (uint)isZero;\n    exponent1 = diffResult + 0x3fd;\n    if (isZero == false) {\n      shiftedValue1 = shiftedValue1 >> 1;\n      maxValue = (uint)((param3 >> 0x18 & 1) != 0) << 0x1f | maxValue >> 1;\n    }\n    mantissa2 = mantissa1 - maxValue;\n    exponent2 = (exponent2 - shiftedValue1) - (uint)(mantissa1 < maxValue);\n    shiftedValue2 = shiftedValue1 >> 1;\n    bitShiftedResult1 = (uint)((shiftedValue1 & 1) != 0) << 0x1f | maxValue >> 1;\n    mantissa1 = 0x100000;\n    shiftedValue1 = 0x80000;\n    while( true ) {\n      isZero = bitShiftedResult1 <= mantissa2;\n      if (shiftedValue2 < exponent2 || exponent2 - shiftedValue2 < (uint)isZero) {\n        mantissa2 = mantissa2 - bitShiftedResult1;\n        mantissa1 = mantissa1 | shiftedValue1;\n        exponent2 = (exponent2 - shiftedValue2) - (uint)!isZero;\n      }\n      tempValue1 = shiftedValue2 >> 1;\n      bitShiftedResult1 = (uint)((shiftedValue2 & 1) != 0) << 0x1f | bitShiftedResult1 >> 1;\n      isEqual = bitShiftedResult1 <= mantissa2;\n      isZero = exponent2 - tempValue1 < (uint)isEqual;\n      maxValue = exponent2;\n      if (tempValue1 < exponent2 || isZero) {\n        mantissa2 = mantissa2 - bitShiftedResult1;\n        maxValue = (exponent2 - tempValue1) - (uint)!isEqual;\n      }\n      if (tempValue1 < exponent2 || isZero) {\n        mantissa1 = mantissa1 | shiftedValue1 >> 1;\n      }\n      exponent2 = shiftedValue2 >> 2;\n      bitShiftedResult2 = (uint)((tempValue1 & 1) != 0) << 0x1f | bitShiftedResult1 >> 1;\n      isEqual = bitShiftedResult2 <= mantissa2;\n      isZero = maxValue - exponent2 < (uint)isEqual;\n      tempValue1 = maxValue;\n      if (exponent2 < maxValue || isZero) {\n        mantissa2 = mantissa2 - bitShiftedResult2;\n        tempValue1 = (maxValue - exponent2) - (uint)!isEqual;\n      }\n      if (exponent2 < maxValue || isZero) {\n        mantissa1 = mantissa1 | shiftedValue1 >> 2;\n      }\n      tempValue2 = shiftedValue2 >> 3;\n      bitShiftedResult1 = (uint)((exponent2 & 1) != 0) << 0x1f | bitShiftedResult2 >> 1;\n      isEqual = bitShiftedResult1 <= mantissa2;\n      isZero = tempValue1 - tempValue2 < (uint)isEqual;\n      exponent2 = tempValue1;\n      if (tempValue2 < tempValue1 || isZero) {\n        mantissa2 = mantissa2 - bitShiftedResult1;\n        exponent2 = (tempValue1 - tempValue2) - (uint)!isEqual;\n      }\n      if (tempValue2 < tempValue1 || isZero) {\n        mantissa1 = mantissa1 | shiftedValue1 >> 3;\n      }\n      maxValue = exponent2 | mantissa2;\n      if (maxValue == 0) break;\n      exponent2 = exponent2 << 4 | mantissa2 >> 0x1c;\n      mantissa2 = mantissa2 << 4;\n      shiftedValue2 = shiftedValue2 & 0xfffffff8 | bitShiftedResult1 >> 0x1d;\n      bitShiftedResult1 = (bitShiftedResult2 >> 1) << 3;\n      shiftedValue1 = shiftedValue1 >> 4;\n      if (shiftedValue1 == 0) {\n        tempValue2 = shiftedValue2;\n        if ((tempValue3 & 0x100000) != 0) goto LAB_0800086a;\n        tempValue3 = tempValue3 | mantissa1;\n        mantissa1 = 0;\n        shiftedValue1 = 0x80000000;\n      }\n    }\n    if ((tempValue3 & 0x100000) == 0) {\n      tempValue3 = tempValue3 | mantissa1;\n      mantissa1 = 0;\n    }\nLAB_0800086a:\n    isCarry = 0xfc < exponent1;\n    isEqual = SBORROW4(exponent1,0xfd);\n    shiftedValue2 = diffResult + 0x300;\n    isZero = shiftedValue2 == 0;\n    shiftedValue1 = shiftedValue2;\n    if (isCarry && !isZero) {\n      isCarry = 0x6ff < shiftedValue2;\n      isEqual = SBORROW4(shiftedValue2,0x700);\n      shiftedValue1 = diffResult - 0x400;\n      isZero = shiftedValue2 == 0x700;\n    }\n    if (!isCarry || isZero) {\n      isZero = tempValue2 <= exponent2;\n      if (exponent2 == tempValue2) {\n        isZero = bitShiftedResult1 <= mantissa2;\n      }\n      if (exponent2 == tempValue2 && mantissa2 == bitShiftedResult1) {\n        isZero = (mantissa1 & 1) != 0;\n      }\n      return CONCAT44(tempValue3 + exponent1 * 0x100000 + (uint)CARRY4(mantissa1,(uint)isZero),mantissa1 + isZero);\n    }\n  }\n  if (!isZero && (int)shiftedValue1 < 0 == isEqual) {\n    return (ulonglong)(tempValue3 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  isCarry = SCARRY4(exponent1,0x36);\n  isZero = (int)(exponent1 + 0x36) < 0;\n  isEqual = exponent1 == 0xffffffca;\n  if (isEqual || isZero != isCarry) {\n    mantissa1 = 0;\n  }\n  if (isEqual || isZero != isCarry) {\n    tempValue3 = tempValue3 & 0x80000000;\n  }\n  if (isEqual || isZero != isCarry) {\n    return CONCAT44(tempValue3,mantissa1);\n  }\n  shiftedValue1 = -exponent1;\n  exponent2 = shiftedValue1 - 0x20;\n  if (0x1f < (int)shiftedValue1) {\n    shiftedValue1 = mantissa1 >> (exponent2 & 0xff) | tempValue3 << (0x20 - exponent2 & 0xff);\n    exponent1 = (tempValue3 >> (exponent2 & 0xff) & ~((tempValue3 & 0x80000000) >> (exponent2 & 0xff))) -\n            ((int)shiftedValue1 >> 0x1f);\n    if ((maxValue | mantissa1 << (0x20 - exponent2 & 0xff) | shiftedValue1 << 1) == 0) {\n      exponent1 = exponent1 & ~(shiftedValue1 >> 0x1f);\n    }\n    return CONCAT44(tempValue3,exponent1) & 0x80000000ffffffff;\n  }\n  diffResult = shiftedValue1 - 0x14;\n  if (diffResult != 0 && diffResult < 0 == SCARRY4(exponent2,0xc)) {\n    exponent1 = 0xc - diffResult;\n    shiftedValue1 = mantissa1 << (exponent1 & 0xff);\n    mantissa1 = mantissa1 >> (0x20 - exponent1 & 0xff) | tempValue3 << (exponent1 & 0xff);\n    exponent1 = mantissa1 + -((int)shiftedValue1 >> 0x1f);\n    if ((maxValue | shiftedValue1 << 1) == 0) {\n      exponent1 = exponent1 & ~(shiftedValue1 >> 0x1f);\n    }\n    return CONCAT44((tempValue3 & 0x80000000) + (uint)CARRY4(mantissa1,-((int)shiftedValue1 >> 0x1f)),exponent1);\n  }\n  exponent2 = mantissa1 << (exponent1 + 0x20 & 0xff);\n  mantissa1 = mantissa1 >> (shiftedValue1 & 0xff) | tempValue3 << (exponent1 + 0x20 & 0xff);\n  exponent1 = mantissa1 + -((int)exponent2 >> 0x1f);\n  if ((maxValue | exponent2 << 1) == 0) {\n    exponent1 = exponent1 & ~(exponent2 >> 0x1f);\n  }\n  return CONCAT44((tempValue3 & 0x80000000) +\n                  ((tempValue3 & 0x7fffffff) >> (shiftedValue1 & 0xff)) +\n                  (uint)CARRY4(mantissa1,-((int)exponent2 >> 0x1f)),exponent1);\n}\n\n",
            "renaming": {
                "FUN_0800074c": "calculate_improved_double_0800074c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "bitShiftedResult1",
                "uVar2": "bitShiftedResult2",
                "uVar3": "shiftedValue1",
                "uVar4": "shiftedValue2",
                "uVar5": "tempValue1",
                "uVar6": "tempValue2",
                "uVar7": "tempValue3",
                "iVar8": "diffResult",
                "uVar9": "exponent1",
                "uVar10": "exponent2",
                "uVar11": "mantissa1",
                "uVar12": "mantissa2",
                "uVar13": "maxValue",
                "bVar14": "isZero",
                "bVar15": "isEqual",
                "bVar16": "isCarry",
                "uVar17": "result"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_080015f8"
            ],
            "called": [
                "FUN_080008ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008ba": {
            "entrypoint": "0x080008ba",
            "current_name": "calculate_double_080008ba",
            "code": "\nulonglong calculateDouble_080008ba(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  bool isZero;\n  \n  tempVar3 = tempVar5 & input4 >> 0x14;\n  tempVar4 = input2;\n  if (tempVar2 != tempVar5 || tempVar3 != tempVar5) {\n    if (tempVar2 == tempVar5) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, tempVar4 = input4, tempVar3 != tempVar5)\n         ) {\nLAB_0800072c:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (tempVar3 == tempVar5) {\n      input1 = input3;\n      tempVar4 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006f0:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (input1 | input2 << 1) == 0;\n      if (!isZero) {\n        isZero = (input3 | input4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (tempVar2 == 0) {\n          tempVar4 = input2 & 0x80000000;\n          do {\n            tempVar1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(tempVar1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | tempVar4;\n          if (tempVar3 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          tempVar4 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(tempVar4 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_0800072c;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006f0;\n    }\n  }\n  return CONCAT44(tempVar4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080008ba": "calculate_double_080008ba",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "tempVar1",
                "unaff_r4": "tempVar2",
                "uVar2": "tempVar3",
                "uVar3": "tempVar4",
                "in_r12": "tempVar5",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_0800074c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800092c": {
            "entrypoint": "0x0800092c",
            "current_name": "check_params_and_conditions_0800092c",
            "code": "\nuint check_params_and_conditions_0800092c(uint value_1,uint value_2,uint value_3,uint value_4)\n\n{\n  uint result;\n  bool check_condition_1;\n  bool check_condition_2;\n  \n  if (((int)(value_2 << 1) >> 0x15 == -1 || (int)(value_4 << 1) >> 0x15 == -1) &&\n     ((((int)(value_2 << 1) >> 0x15 == -1 && ((value_1 | value_2 << 0xc) != 0)) ||\n      (((int)(value_4 << 1) >> 0x15 == -1 && ((value_3 | value_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  check_condition_1 = (value_1 | value_2 << 1) == 0;\n  if (check_condition_1) {\n    check_condition_1 = (value_3 | value_4 << 1) == 0;\n  }\n  if (!check_condition_1) {\n    check_condition_1 = value_2 == value_4;\n  }\n  if (check_condition_1) {\n    check_condition_1 = value_1 == value_3;\n  }\n  if (!check_condition_1) {\n    result = value_2 ^ value_4;\n    check_condition_1 = result == 0;\n    if (-1 < (int)result) {\n      check_condition_1 = value_2 == value_4;\n    }\n    check_condition_2 = -1 < (int)result && value_4 <= value_2;\n    if (check_condition_1) {\n      check_condition_2 = value_3 <= value_1;\n    }\n    value_4 = (int)value_4 >> 0x1f;\n    if (!check_condition_2) {\n      value_4 = ~value_4;\n    }\n    return value_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800092c": "check_params_and_conditions_0800092c",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4",
                "uVar1": "result",
                "bVar2": "check_condition_1",
                "bVar3": "check_condition_2"
            },
            "calling": [
                "FUN_080009b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a8": {
            "entrypoint": "0x080009a8",
            "current_name": "validate_and_return_param_080009a8",
            "code": "\nvoid validate_and_return_param_080009a8(undefined4 param_a,undefined4 param_b,undefined4 param_c,undefined4 param_d)\n\n{\n  validate_and_return_param_080009a8_080009b8(param_c,param_d,param_a,param_b);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080009a8": "validate_and_return_param_080009a8",
                "param_1": "param_a",
                "param_2": "param_b",
                "param_3": "param_c",
                "param_4": "param_d"
            },
            "calling": [
                "FUN_08000a04",
                "FUN_08000a18"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b8": {
            "entrypoint": "0x080009b8",
            "current_name": "validate_and_return_param_080009b8",
            "code": "\nundefined4 validate_and_return_param_080009b8(undefined4 input_param)\n\n{\n  validate_params_and_conditions();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_080009b8": "validate_and_return_param_080009b8",
                "param_1": "input_param",
                "check_params_and_conditions_0800092c": "validate_params_and_conditions"
            },
            "calling": [
                "FUN_080009dc",
                "FUN_080009c8",
                "FUN_080009a8",
                "FUN_080009f0"
            ],
            "called": [
                "FUN_0800092c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "check_input_and_return_result_080009c8",
            "code": "\nbool check_input_and_return_result_080009c8(void)\n\n{\n  char input_char;\n  \n  validate_and_return_param_080009b8();\n  return input_char != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009c8": "check_input_and_return_result_080009c8",
                "in_ZR": "input_char"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009dc": {
            "entrypoint": "0x080009dc",
            "current_name": "is_end_of_string_080009dc",
            "code": "\nbool isEndOfString_080009dc(void)\n\n{\n  char endCharacter;\n  \n  validate_and_return_param_080009b8();\n  return endCharacter == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009dc": "is_end_of_string_080009dc",
                "in_CY": "endCharacter"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08001814",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "check_parameter_conditions_080009f0",
            "code": "\nbool check_parameter_conditions_080009f0(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry_set;\n  \n  validate_and_return_param_080009b8();\n  return !(bool)is_carry_set || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_080009f0": "check_parameter_conditions_080009f0",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry_set"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "validate_and_return_param_08000a04",
            "code": "\nbool validate_and_return_param_08000a04(void)\n\n{\n  undefined is_zero_ret;\n  undefined is_carry;\n  \n  validate_and_return_param_08000a04_080009a8();\n  return !(bool)is_carry || (bool)is_zero_ret;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "validate_and_return_param_08000a04",
                "in_ZR": "is_zero_ret",
                "in_CY": "is_carry"
            },
            "calling": [
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a18": {
            "entrypoint": "0x08000a18",
            "current_name": "is_end_of_string_08000a18",
            "code": "\nbool is_end_of_string_08000a18(void)\n\n{\n  char current_character;\n  \n  validate_and_return_param_080009a8();\n  return current_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000a18": "is_end_of_string_08000a18",
                "in_CY": "current_character"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a2c": {
            "entrypoint": "0x08000a2c",
            "current_name": "check_parameters_08000a2c",
            "code": "\nundefined4 check_parameters_08000a2c(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a2c": "check_parameters_08000a2c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a58": {
            "entrypoint": "0x08000a58",
            "current_name": "calculate_signed_division_08000a58",
            "code": "\nuint calculateSignedDivision_08000a58(uint dividend,uint divisor)\n\n{\n  uint quotient;\n  int temp;\n  uint remainder;\n  \n  temp = divisor * 2 + 0x200000;\n  if (divisor * 2 < 0xffe00000) {\n    if (-1 < temp) {\n      return 0;\n    }\n    quotient = temp >> 0x15;\n    remainder = -quotient - 0x3e1;\n    if (quotient < 0xfffffc20 && remainder != 0) {\n      quotient = (divisor << 0xb | 0x80000000 | dividend >> 0x15) >> (remainder & 0xff);\n      if ((divisor & 0x80000000) != 0) {\n        quotient = -quotient;\n      }\n      return quotient;\n    }\n  }\n  else if ((dividend | divisor << 0xc) != 0) {\n    return 0;\n  }\n  divisor = divisor & 0x80000000;\n  if (divisor == 0) {\n    divisor = 0x7fffffff;\n  }\n  return divisor;\n}\n\n",
            "renaming": {
                "FUN_08000a58": "calculate_signed_division_08000a58",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "iVar2": "temp",
                "uVar3": "remainder"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "entrypoint": "0x08000aa8",
            "current_name": "check_division_feasibility_08000aa8",
            "code": "\nuint check_division_feasibility_08000aa8(uint dividend,uint divisor)\n\n{\n  int tempValue;\n  uint shiftAmount;\n  \n  if ((divisor & 0x80000000) != 0) {\n    return 0;\n  }\n  tempValue = divisor * 2 + 0x200000;\n  if (divisor * 2 < 0xffe00000) {\n    if (-1 < tempValue) {\n      return 0;\n    }\n    shiftAmount = -(tempValue >> 0x15) - 0x3e1;\n    if (-1 < (int)shiftAmount) {\n      return (divisor << 0xb | 0x80000000 | dividend >> 0x15) >> (shiftAmount & 0xff);\n    }\n  }\n  else if ((dividend | divisor << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000aa8": "check_division_feasibility_08000aa8",
                "param_1": "dividend",
                "param_2": "divisor",
                "iVar1": "tempValue",
                "uVar2": "shiftAmount"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ae8": {
            "entrypoint": "0x08000ae8",
            "current_name": "execute_system_call_08000ae8",
            "code": "\nvoid executeSystemCall_08000ae8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ae8": "execute_system_call_08000ae8"
            },
            "calling": [
                "FUN_08000aec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "execute_system_call_08000aec",
            "code": "\nundefined4 execute_system_call_08000aec(undefined4 input_param,undefined4 unused_param,undefined4 unused_param2,undefined4 output_param)\n\n{\n  undefined4 uVar1;\n  \n  if (DAT_2000017c != 0) {\n    return 0;\n  }\n  uVar1 = execute_system_call_08000aec_08000ae8(1,input_param,0,0,output_param);\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "execute_system_call_08000aec",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "unused_param2",
                "param_4": "output_param"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08000ae8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b08": {
            "entrypoint": "0x08000b08",
            "current_name": "initialize_processing_and_devices_08000b08",
            "code": "\nvoid initializeProcessingAndDevices_08000b08(int argument1,int argument2)\n\n{\n  if ((argument1 == 1) && (argument2 == 0xffff)) {\n    initializeAndReturnData(&DAT_200001c0,&DAT_20000188,&DAT_200001b8,&DAT_20000240,DAT_20000020,DAT_20000024,\n                 DAT_20000018,DAT_2000001c,DAT_20000010,DAT_20000014,0);\n    initializeProcessing(&DAT_20000194,DAT_2000005c,DAT_20000038,DAT_20000028,DAT_2000002c,DAT_20000030,\n                 DAT_20000034);\n    initializeAndProcessDevices(&DAT_2000024c,DAT_20000074,DAT_20000070,DAT_2000006c);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000b08": "initialize_processing_and_devices_08000b08",
                "param_1": "argument1",
                "param_2": "argument2",
                "initialize_and_return_08001b18": "initializeAndReturnData",
                "initialize_processing_08001510": "initializeProcessing",
                "initialize_and_process_devices_0800157c": "initializeAndProcessDevices"
            },
            "calling": [],
            "called": [
                "FUN_0800157c",
                "FUN_08001510",
                "FUN_08001b18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000bcc": {
            "entrypoint": "0x08000bcc",
            "current_name": "initialize_device_and_data_08000bcc",
            "code": "\nvoid initialize_device_and_data_08000bcc(void)\n\n{\n  process_parameter(DAT_20000064,0);\n  initialize_device_and_update_bit(DAT_20000064,1);\n  process_parameter(DAT_20000004,0);\n  initialize_device_and_update_bit(DAT_20000004,1);\n  process_parameter(DAT_20000060,0);\n  initialize_device_and_update_bit(DAT_20000060,1);\n  process_parameter(DAT_20000004,1);\n  initialize_and_process_devices(&DAT_20000194,8,2,0);\n  process_and_execute(&DAT_20000194,0,&DAT_20000008);\n  initialize_parameters(&DAT_20000194);\n  process_string(&DAT_20000194,\"Reflow\");\n  process_and_check_parameters(&DAT_20000194,0,1);\n  process_string(&DAT_20000194,\"Oven 1.2\");\n  process_parameter(DAT_20000004,0);\n  FUNC_080058e8(0x9c4);\n  initialize_parameters(&DAT_20000194);\n  configure_serial_port(&DAT_2000036c,0xe100,6);\n  process_parameter(DAT_20000060,1);\n  DAT_20000258 = 2000;\n  DAT_200001b0 = initialize_data();\n  DAT_200001b4 = initialize_data();\n  execute_system_call(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000bcc": "initialize_device_and_data_08000bcc",
                "initialize_device_and_update_bit_080057b4": "initialize_device_and_update_bit",
                "initialize_and_process_devices_080013a4": "initialize_and_process_devices",
                "process_and_execute_08001550": "process_and_execute",
                "initialize_parameters_0800135a": "initialize_parameters",
                "process_string_08005c96": "process_string",
                "process_parameter_08005848": "process_parameter",
                "process_and_check_params_08001366": "process_and_check_parameters",
                "configure_serial_port_08005a68": "configure_serial_port",
                "initialize_data_080058e0": "initialize_data",
                "execute_system_call_08000aec": "execute_system_call"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [
                "FUN_08005848",
                "FUN_08000aec",
                "FUN_08005a68",
                "FUN_08001550",
                "FUN_080057b4",
                "FUN_080058e8",
                "FUN_080058e0",
                "FUN_080013a4",
                "FUN_08005c96",
                "FUN_0800135a",
                "FUN_08001366"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cd0": {
            "entrypoint": "0x08000cd0",
            "current_name": "process_data_08000cd0",
            "code": "\nvoid process_data_08000cd0(void)\n\n{\n  uint data1;\n  undefined4 data2;\n  int result;\n  undefined4 data3;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined8 result2;\n  \n  data1 = initialize_data_080058e0();\n  if (DAT_200001b4 < data1) {\n    DAT_200001b4 = DAT_200001b4 + 1000;\n    result2 = calculate_improved_result_080015f8(&DAT_2000024c,0);\n    data3 = (undefined4)((ulonglong)result2 >> 0x20);\n    data2 = (undefined4)result2;\n    DAT_20000188 = data2;\n    DAT_2000018c = data3;\n    result = check_input_and_return_result_080009c8(data2,data3,0,0x40c38800);\n    if (((result != 0) || (result = check_input_and_return_result_080009c8(data2,data3,0,0x40c38880), result != 0)) ||\n       (result = check_input_and_return_result_080009c8(data2,data3,0,0x40c38900), result != 0)) {\n      DAT_20000238 = 7;\n      DAT_20000239 = '\\0';\n    }\n  }\n  data1 = initialize_data_080058e0();\n  data2 = DAT_20000060;\n  if (DAT_200001b0 < data1) {\n    DAT_200001b0 = DAT_200001b0 + 1000;\n    if (DAT_20000239 == '\\x01') {\n      result = check_flag_validity_08005890(DAT_20000060);\n      process_parameter_08005848(data2,result == 0);\n      DAT_20000250 = DAT_20000250 + 1;\n      convert_number_to_base_08005d82(&DAT_2000036c,DAT_20000250,10);\n      process_string_08005c96(&DAT_2000036c,&DAT_08007368);\n      process_data_08000cd0_08005f2c(&DAT_2000036c,temp1,DAT_20000240,DAT_20000244,2);\n      process_string_08005c96(&DAT_2000036c,&DAT_08007368);\n      process_data_08000cd0_08005f2c(&DAT_2000036c,temp2,DAT_20000188,DAT_2000018c,2);\n      process_string_08005c96(&DAT_2000036c,&DAT_08007368);\n      calculate_total_08005f40(&DAT_2000036c,temp3,DAT_200001b8,DAT_200001bc,2);\n    }\n    else {\n      process_parameter_08005848(DAT_20000060,1);\n    }\n    initialize_parameters_0800135a(&DAT_20000194);\n    process_string_08005c96(&DAT_20000194,(&PTR_s_Ready_2000003c)[DAT_20000238]);\n    process_and_check_params_08001366(&DAT_20000194,0,1);\n    if (DAT_20000238 == 7) {\n      process_string_08005c96(&DAT_20000194,\"TC Error!\");\n    }\n    else {\n      process_data_08000cd0_08005f2c(&DAT_20000194,2,DAT_20000188,DAT_2000018c,2);\n      initialize_and_process_parameters_0800134e(&DAT_20000194,0);\n      process_string_08005c96(&DAT_20000194,&DAT_08007378);\n    }\n  }\n  data3 = DAT_2000018c;\n  data2 = DAT_20000188;\n  switch(DAT_20000238) {\n  case 0:\n    result = validate_and_return_param_08000a04(DAT_20000188,DAT_2000018c,0,0x40490000);\n    if (result == 0) {\n      if (DAT_20000248 == '\\x01') {\n        calculate_total_08005cd4(&DAT_2000036c,\"Time Setpoint Input Output\");\n        DAT_20000250 = 0;\n        DAT_2000025c = initialize_data_080058e0();\n        DAT_20000240 = 0;\n        DAT_20000244 = 0x4062c000;\n        result2 = extend_unsigned_number_0800042c(DAT_20000258);\n        update_params_if_needed_08001960(&DAT_200001c0,(int)((ulonglong)result2 >> 0x20),0,0,result2);\n        calculate_shifted_result_and_store_08001918(&DAT_200001c0,1000);\n        update_data_flag_08001a44(&DAT_200001c0,1);\n        DAT_20000238 = 1;\n      }\n    }\n    else {\n      DAT_20000238 = 6;\n    }\n    break;\n  case 1:\n    DAT_20000239 = '\\x01';\n    result = validate_and_return_param_08000a04(DAT_20000188,DAT_2000018c,0,0x4062c000);\n    if (result != 0) {\n      result2 = initialize_data_080058e0();\n      DAT_20000254 = (int)result2 + 9000;\n      initialize_data_080018f8(&DAT_200001c0,(int)((ulonglong)result2 >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,\n                   0,0x406f4000);\n      DAT_20000240 = 0;\n      DAT_20000244 = 0x40636000;\n      DAT_20000238 = 2;\n    }\n    break;\n  case 2:\n    data1 = initialize_data_080058e0();\n    if (DAT_20000254 < data1) {\n      result = initialize_data_080058e0();\n      DAT_20000254 = result + 9000;\n      result2 = calculate_diff_08000194(DAT_20000240,DAT_20000244,0,0x40140000);\n      DAT_20000244 = (undefined4)((ulonglong)result2 >> 0x20);\n      DAT_20000240 = (undefined4)result2;\n      result2 = is_end_of_string_08000a18(DAT_20000240,DAT_20000244,0,0x40690000);\n      if ((int)result2 != 0) {\n        initialize_data_080018f8(&DAT_200001c0,(int)((ulonglong)result2 >> 0x20),0,0x4072c000,0x9999999a,\n                     0x3fa99999,0,0x4075e000);\n        DAT_20000240 = 0;\n        DAT_20000244 = 0x406f4000;\n        DAT_20000238 = 3;\n      }\n    }\n    break;\n  case 3:\n    result2 = validate_and_return_param_08000a04(DAT_20000188,DAT_2000018c,0,0x406ea000);\n    if ((int)result2 != 0) {\n      initialize_data_080018f8(&DAT_200001c0,(int)((ulonglong)result2 >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,\n                   0,0x4075e000);\n      DAT_20000240 = 0;\n      DAT_20000244 = 0x40590000;\n      DAT_20000238 = 4;\n    }\n    break;\n  case 4:\n    result = check_parameter_conditions_080009f0(DAT_20000188,DAT_2000018c,0,0x40590000);\n    if (result != 0) {\n      result = initialize_data_080058e0();\n      DAT_20000180 = result + 1000;\n      process_parameter_08005848(DAT_20000004,1);\n      DAT_20000239 = '\\0';\n      DAT_20000238 = 5;\n    }\n    break;\n  case 5:\n    data1 = initialize_data_080058e0();\n    if (DAT_20000180 < data1) {\n      process_parameter_08005848(DAT_20000004,0);\n      DAT_20000238 = 0;\n    }\n    break;\n  case 6:\n    result = is_end_of_string_080009dc(DAT_20000188,DAT_2000018c,0,0x40490000);\n    if (result != 0) {\n      DAT_20000238 = 0;\n    }\n    break;\n  case 7:\n    result = check_input_and_return_result_080009c8(DAT_20000188,DAT_2000018c,0,0x40c38800);\n    if (((result == 0) && (result = check_input_and_return_result_080009c8(data2,data3,0,0x40c38880), result == 0)) &&\n       (result = check_input_and_return_result_080009c8(data2,data3,0,0x40c38900), result == 0)) {\n      DAT_20000238 = 0;\n    }\n    else {\n      DAT_20000238 = 7;\n    }\n  }\n  if ((DAT_20000248 == '\\x01') && (DAT_20000239 == '\\x01')) {\n    DAT_20000239 = '\\0';\n    DAT_20000238 = 0;\n  }\n  if (DAT_20000184 == '\\x01') {\n    result = get_value_after_transformation_08005754(DAT_20000068);\n    if (result == 0) {\n      result = initialize_data_080058e0();\n      if (0x32 < (uint)(result - DAT_20000190)) {\n        DAT_20000184 = '\\x02';\n      }\n    }\n    else {\n      DAT_20000184 = '\\0';\n    }\n  }\n  else if (DAT_20000184 == '\\0') {\n    DAT_20000248 = '\\0';\n    result = get_value_after_transformation_08005754(DAT_20000068);\n    if (result == 0) {\n      DAT_20000190 = initialize_data_080058e0();\n      DAT_20000184 = '\\x01';\n    }\n  }\n  else if ((DAT_20000184 == '\\x02') && (result = get_value_after_transformation_08005754(DAT_20000068), result != 0)) {\n    DAT_20000248 = '\\x01';\n    DAT_20000184 = '\\0';\n  }\n  if (DAT_20000239 == '\\x01') {\n    result = initialize_data_080058e0();\n    process_data_08000cd0_080016b4(&DAT_200001c0);\n    if (DAT_20000258 < (uint)(result - DAT_2000025c)) {\n      DAT_2000025c = DAT_2000025c + DAT_20000258;\n    }\n    result2 = reverse_bits_0800040c(result - DAT_2000025c);\n    result = is_end_of_string_080009dc((int)result2,(int)((ulonglong)result2 >> 0x20),DAT_200001b8,DAT_200001bc);\n    if (result == 0) {\n      process_parameter_08005848(DAT_20000064,0);\n    }\n    else {\n      process_parameter_08005848(DAT_20000064,1);\n    }\n  }\n  else {\n    process_parameter_08005848(DAT_20000064,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000cd0": "process_data_08000cd0",
                "uVar1": "data1",
                "uVar2": "data2",
                "iVar3": "result",
                "uVar4": "data3",
                "extraout_r1": "temp1",
                "extraout_r1_00": "temp2",
                "extraout_r1_01": "temp3",
                "uVar5": "result2"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [
                "FUN_0800134e",
                "FUN_08005f2c",
                "FUN_080009dc",
                "FUN_08005d82",
                "FUN_080009c8",
                "FUN_08000a04",
                "FUN_08001918",
                "FUN_08000a18",
                "FUN_080016b4",
                "FUN_08005cd4",
                "FUN_08005848",
                "FUN_08005754",
                "FUN_080058e0",
                "FUN_0800042c",
                "FUN_08005f40",
                "FUN_08000194",
                "FUN_08005c96",
                "FUN_08005890",
                "FUN_08001366",
                "FUN_08001a44",
                "FUN_08001960",
                "FUN_080018f8",
                "FUN_080009f0",
                "FUN_080015f8",
                "FUN_0800040c",
                "FUN_0800135a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001294": {
            "entrypoint": "0x08001294",
            "current_name": "set_parameters_08001294",
            "code": "\nvoid setParameters_08001294(int objectAddress,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *(undefined *)(objectAddress + 0x18) = value1;\n  *(undefined *)(objectAddress + 0x19) = value2;\n  *(undefined *)(objectAddress + 0x1a) = value3;\n  *(undefined *)(objectAddress + 0x1b) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001294": "set_parameters_08001294",
                "param_1": "objectAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_080013a4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012a2": {
            "entrypoint": "0x080012a2",
            "current_name": "process_and_duplicate_080012a2",
            "code": "\nvoid processAndDuplicate_080012a2(int param)\n\n{\n  processData(*(undefined *)(param + 10),0);\n  processData(*(undefined *)(param + 10),1);\n  processData(*(undefined *)(param + 10),0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012a2": "process_and_duplicate_080012a2",
                "param_1": "param",
                "process_parameter_08005848": "processData"
            },
            "calling": [
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "called": [
                "FUN_08005848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012c0": {
            "entrypoint": "0x080012c0",
            "current_name": "process_parameters_080012c0",
            "code": "\nvoid process_parameters_080012c0(int data_address,int mask)\n\n{\n  uint counter;\n  \n  for (counter = 0; (int)counter < 4; counter = counter + 1) {\n    process_parameter_08005848(*(undefined *)(data_address + counter + 0xb),mask >> (counter & 0xff) & 1);\n  }\n  process_and_duplicate_080012a2(data_address);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012c0": "process_parameters_080012c0",
                "param_1": "data_address",
                "param_2": "mask",
                "uVar1": "counter"
            },
            "calling": [
                "FUN_08001310",
                "FUN_080013a4"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012e8": {
            "entrypoint": "0x080012e8",
            "current_name": "process_and_duplicate_parameter_080012e8",
            "code": "\nvoid process_and_duplicate_parameter_080012e8(int input_data,int flags)\n\n{\n  uint index;\n  \n  for (index = 0; (int)index < 8; index = index + 1) {\n    process_parameter_08005848(*(undefined *)(input_data + index + 0xb),flags >> (index & 0xff) & 1);\n  }\n  process_and_duplicate_080012a2(input_data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012e8": "process_and_duplicate_parameter_080012e8",
                "param_1": "input_data",
                "param_2": "flags",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08001310"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001310": {
            "entrypoint": "0x08001310",
            "current_name": "process_parameters_08001310",
            "code": "\nvoid processParameters_08001310(int inputArray,uint flags,undefined4 paramA,undefined4 paramB)\n\n{\n  process_parameter_08005848(*(undefined *)(inputArray + 8),paramA,paramA,paramB,paramB);\n  if (*(char *)(inputArray + 9) != -1) {\n    process_parameter_08005848(*(char *)(inputArray + 9),0);\n  }\n  if ((*(byte *)(inputArray + 0x13) & 0x10) == 0) {\n    process_parameters_080012c0(inputArray,flags >> 4);\n    process_parameters_080012c0(inputArray,flags);\n    return;\n  }\n  process_and_duplicate_parameter_080012e8(inputArray,flags);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001310": "process_parameters_08001310",
                "param_1": "inputArray",
                "param_2": "flags",
                "param_3": "paramA",
                "param_4": "paramB"
            },
            "calling": [
                "FUN_0800134e",
                "FUN_08001550",
                "FUN_0800138e",
                "FUN_080013a4",
                "FUN_0800135a",
                "FUN_08001366"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800134e": {
            "entrypoint": "0x0800134e",
            "current_name": "initialize_and_process_parameters_0800134e",
            "code": "\nundefined4 initializeAndProcessParameters_0800134e(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 output)\n\n{\n  processParameters(input1,input2,1,output,output);\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800134e": "initialize_and_process_parameters_0800134e",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "output",
                "process_parameters_08001310": "processParameters"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800135a": {
            "entrypoint": "0x0800135a",
            "current_name": "initialize_parameters_0800135a",
            "code": "\nvoid initialize_parameters_0800135a(undefined4 input_param,undefined4 unused_param,undefined4 unused_param_2,undefined4 output_param)\n\n{\n  process_parameters(input_param,1,0,output_param,output_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800135a": "initialize_parameters_0800135a",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "unused_param_2",
                "param_4": "output_param",
                "process_parameters_08001310": "process_parameters"
            },
            "calling": [
                "FUN_08000cd0",
                "FUN_080013a4",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001366": {
            "entrypoint": "0x08001366",
            "current_name": "process_and_check_params_08001366",
            "code": "\nvoid processAndCheckParams_08001366(int inputData,char flag,uint maxValue,undefined4 param4)\n\n{\n  char currentChar;\n  \n  if (3 < maxValue) {\n    maxValue = 3;\n  }\n  if ((int)(uint)*(byte *)(inputData + 0x17) <= (int)maxValue) {\n    maxValue = *(byte *)(inputData + 0x17) - 1 & 0xff;\n  }\n  currentChar = *(char *)(maxValue + inputData + 0x18);\n  process_parameters_08001310(inputData,flag + currentChar | 0x80,0,currentChar,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001366": "process_and_check_params_08001366",
                "param_1": "inputData",
                "param_2": "flag",
                "param_3": "maxValue",
                "param_4": "param4",
                "cVar1": "currentChar"
            },
            "calling": [
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800138e": {
            "entrypoint": "0x0800138e",
            "current_name": "update_parameter_and_process_0800138e",
            "code": "\nvoid updateParameterAndProcess_0800138e(int functionPointer,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte currentByte;\n  \n  currentByte = *(byte *)(functionPointer + 0x14);\n  *(byte *)(functionPointer + 0x14) = currentByte | 4;\n  process_parameters_08001310(functionPointer,currentByte | 0xc,0,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800138e": "update_parameter_and_process_0800138e",
                "param_1": "functionPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "currentByte"
            },
            "calling": [
                "FUN_080013a4"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080013a4": {
            "entrypoint": "0x080013a4",
            "current_name": "initialize_and_process_devices_080013a4",
            "code": "\nvoid initialize_and_process_devices_080013a4(int device_data,int param1_value,int param2_value,int param3_value)\n\n{\n  int iteration_counter;\n  int index;\n  \n  if (1 < param2_value) {\n    *(byte *)(device_data + 0x13) = *(byte *)(device_data + 0x13) | 8;\n  }\n  *(char *)(device_data + 0x17) = (char)param2_value;\n  set_parameters(device_data,0,0x40,param1_value,param1_value + 0x40);\n  if ((param3_value != 0) && (param2_value == 1)) {\n    *(byte *)(device_data + 0x13) = *(byte *)(device_data + 0x13) | 4;\n  }\n  initialize_and_update_device(*(undefined *)(device_data + 8),1);\n  if (*(char *)(device_data + 9) != -1) {\n    initialize_and_update_device(*(char *)(device_data + 9),1);\n  }\n  initialize_and_update_device(*(undefined *)(device_data + 10),1);\n  index = 0;\n  while( true ) {\n    if ((*(byte *)(device_data + 0x13) & 0x10) == 0) {\n      iteration_counter = 4;\n    }\n    else {\n      iteration_counter = 8;\n    }\n    if (iteration_counter <= index) break;\n    initialize_and_update_device(*(undefined *)(device_data + index + 0xb),1);\n    index = index + 1;\n  }\n  process_parameter(*(undefined *)(device_data + 8),0);\n  process_parameter(*(undefined *)(device_data + 10),0);\n  if (*(char *)(device_data + 9) != -1) {\n    process_parameter(*(char *)(device_data + 9),0);\n  }\n  if ((*(byte *)(device_data + 0x13) & 0x10) == 0) {\n    process_parameters(device_data,3);\n    process_parameters(device_data,3);\n    process_parameters(device_data,3);\n    process_parameters(device_data,2);\n  }\n  else {\n    process_parameters_with_bit(device_data,*(byte *)(device_data + 0x13) | 0x20,0);\n    process_parameters_with_bit(device_data,*(byte *)(device_data + 0x13) | 0x20,0);\n    process_parameters_with_bit(device_data,*(byte *)(device_data + 0x13) | 0x20,0);\n  }\n  process_parameters_with_bit(device_data,*(byte *)(device_data + 0x13) | 0x20,0);\n  *(undefined *)(device_data + 0x14) = 4;\n  update_parameter_and_process(device_data);\n  initialize_parameters(device_data);\n  *(undefined *)(device_data + 0x15) = 2;\n  process_parameters_with_bit(device_data,6,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080013a4": "initialize_and_process_devices_080013a4",
                "param_1": "device_data",
                "param_2": "param1_value",
                "param_3": "param2_value",
                "param_4": "param3_value",
                "iVar1": "iteration_counter",
                "iVar2": "index",
                "set_parameters_08001294": "set_parameters",
                "initialize_device_and_update_bit_080057b4": "initialize_and_update_device",
                "initialize_parameters_0800135a": "initialize_parameters",
                "process_parameter_08005848": "process_parameter",
                "process_parameters_080012c0": "process_parameters",
                "process_parameters_08001310": "process_parameters_with_bit",
                "update_parameter_and_process_0800138e": "update_parameter_and_process"
            },
            "calling": [
                "FUN_08000bcc",
                "FUN_080014ba"
            ],
            "called": [
                "FUN_08001310",
                "FUN_08005848",
                "FUN_080057b4",
                "FUN_080012c0",
                "FUN_0800138e",
                "FUN_08001294",
                "FUN_0800135a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014ba": {
            "entrypoint": "0x080014ba",
            "current_name": "set_parameters_and_initialize_080014ba",
            "code": "\nvoid setParametersAndInitialize_080014ba(int dataAddress,int isZero,undefined parameter3,undefined4 parameter4,undefined parameter5,\n                 undefined parameter6,undefined parameter7,undefined parameter8,undefined parameter9,\n                 undefined parameter10,undefined parameter11,undefined parameter12,undefined parameter13)\n\n{\n  *(undefined *)(dataAddress + 8) = parameter3;\n  *(char *)(dataAddress + 9) = (char)parameter4;\n  *(undefined *)(dataAddress + 10) = parameter5;\n  *(undefined *)(dataAddress + 0xb) = parameter6;\n  *(undefined *)(dataAddress + 0xc) = parameter7;\n  *(undefined *)(dataAddress + 0xd) = parameter8;\n  *(undefined *)(dataAddress + 0xe) = parameter9;\n  *(undefined *)(dataAddress + 0xf) = parameter10;\n  *(undefined *)(dataAddress + 0x10) = parameter11;\n  *(undefined *)(dataAddress + 0x11) = parameter12;\n  *(undefined *)(dataAddress + 0x12) = parameter13;\n  if (isZero == 0) {\n    *(undefined *)(dataAddress + 0x13) = 0x10;\n  }\n  else {\n    *(undefined *)(dataAddress + 0x13) = 0;\n  }\n  initializeAndProcessDevices(dataAddress,0x10,1,0,parameter4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080014ba": "set_parameters_and_initialize_080014ba",
                "param_1": "dataAddress",
                "param_2": "isZero",
                "param_3": "parameter3",
                "param_4": "parameter4",
                "param_5": "parameter5",
                "param_6": "parameter6",
                "param_7": "parameter7",
                "param_8": "parameter8",
                "param_9": "parameter9",
                "param_10": "parameter10",
                "param_11": "parameter11",
                "param_12": "parameter12",
                "param_13": "parameter13",
                "initialize_and_process_devices_080013a4": "initializeAndProcessDevices"
            },
            "calling": [
                "FUN_08001510"
            ],
            "called": [
                "FUN_080013a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001510": {
            "entrypoint": "0x08001510",
            "current_name": "initialize_processing_08001510",
            "code": "\nundefined4 *\ninitializeProcessing_08001510(undefined4 *outputArray,undefined4 value1,undefined4 value2,undefined4 value3,\n            undefined value4,undefined value5,undefined value6)\n\n{\n  outputArray[1] = 0;\n  *outputArray = &PTR_initialize_and_process_parameters_0800134e_1_080073f8;\n  set_parameters_and_initialize_080014ba(outputArray,1,value1,0xff,value2,value3,value4,value5,value6,0,0,0,0);\n  return outputArray;\n}\n\n",
            "renaming": {
                "FUN_08001510": "initialize_processing_08001510",
                "param_1": "outputArray",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4",
                "param_6": "value5",
                "param_7": "value6"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_080014ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001550": {
            "entrypoint": "0x08001550",
            "current_name": "process_and_execute_08001550",
            "code": "\nvoid process_and_execute_08001550(undefined4 *parameters,uint size,int data)\n\n{\n  int counter;\n  \n  process_parameters_08001310(parameters,(size & 7) << 3 | 0x40,0);\n  for (counter = 0; counter < 8; counter = counter + 1) {\n    (**(code **)*parameters)(parameters,*(undefined *)(data + counter));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001550": "process_and_execute_08001550",
                "param_1": "parameters",
                "param_2": "size",
                "param_3": "data",
                "iVar1": "counter"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800157c": {
            "entrypoint": "0x0800157c",
            "current_name": "initialize_and_process_devices_0800157c",
            "code": "\nundefined * initialize_and_process_devices_0800157c(undefined *device_data,undefined4 device_1,undefined parameter_1,undefined parameter_2)\n\n{\n  *device_data = (char)device_1;\n  device_data[1] = parameter_1;\n  device_data[2] = parameter_2;\n  initialize_device_and_update_bit(device_1,0);\n  initialize_device_and_update_bit(device_data[1],1);\n  initialize_device_and_update_bit(device_data[2],1);\n  process_parameter(device_data[1],1);\n  process_parameter(device_data[2],0);\n  return device_data;\n}\n\n",
            "renaming": {
                "FUN_0800157c": "initialize_and_process_devices_0800157c",
                "param_1": "device_data",
                "param_2": "device_1",
                "param_3": "parameter_1",
                "param_4": "parameter_2",
                "initialize_device_and_update_bit_080057b4": "initialize_device_and_update_bit",
                "process_parameter_08005848": "process_parameter",
                "param_1[1]": "device_data[1]",
                "param_1[2]": "device_data[2]"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080057b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b2": {
            "entrypoint": "0x080015b2",
            "current_name": "calculate_flag_080015b2",
            "code": "\nuint calculateFlag_080015b2(undefined *inputs)\n\n{\n  int flagValidityCheck;\n  uint bitCount;\n  uint flagResult;\n  \n  process_parameter_08005848(inputs[1],0);\n  flagResult = 0;\n  for (bitCount = 0x1f; -1 < (int)bitCount; bitCount = bitCount - 1) {\n    process_parameter_08005848(inputs[2],1);\n    flagValidityCheck = check_flag_validity_08005890(*inputs);\n    if (flagValidityCheck != 0) {\n      flagResult = flagResult | 1 << (bitCount & 0xff);\n    }\n    process_parameter_08005848(inputs[2],0);\n  }\n  process_parameter_08005848(inputs[1],1);\n  return flagResult;\n}\n\n",
            "renaming": {
                "FUN_080015b2": "calculate_flag_080015b2",
                "param_1": "inputs",
                "iVar1": "flagValidityCheck",
                "uVar2": "bitCount",
                "uVar3": "flagResult"
            },
            "calling": [
                "FUN_080015f8"
            ],
            "called": [
                "FUN_08005848",
                "FUN_08005890"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015f8": {
            "entrypoint": "0x080015f8",
            "current_name": "calculate_improved_result_080015f8",
            "code": "\nundefined8 calculateImprovedResult_080015f8(undefined4 input_flag,int option,undefined4 unused_param,undefined4 param)\n\n{\n  uint flag;\n  undefined8 result;\n  \n  flag = calculateFlag();\n  if ((flag & 0x10000) == 0) {\n    flag = flag >> 0x12;\n    result = reverseBits(flag & 0x1fff);\n    if ((flag & 0x2000) != 0) {\n      result = reverseBits(~flag & 0x1fff);\n      result = calculateDifference((int)result,(int)((ulonglong)result >> 0x20),0,0x3ff00000,param);\n      result = CONCAT44((int)((ulonglong)result >> 0x20) + -0x80000000,(int)result);\n    }\n    result = calculateShiftedResult((int)result,(int)((ulonglong)result >> 0x20),0,0x3fd00000);\n    if (option == 1) {\n      result = calculateShiftedResult((int)result,(int)((ulonglong)result >> 0x20),0,0x40220000);\n      result = calculateImprovedDouble((int)result,(int)((ulonglong)result >> 0x20),0,0x40140000);\n      result = calculateDifference((int)result,(int)((ulonglong)result >> 0x20),0,0x40400000);\n      return result;\n    }\n  }\n  else {\n    flag = flag & 7;\n    if (flag == 2) {\n      return 0x40c3888000000000;\n    }\n    if (flag == 4) {\n      return 0x40c3890000000000;\n    }\n    if (flag != 1) {\n      return 0;\n    }\n    result = 0x40c3880000000000;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080015f8": "calculate_improved_result_080015f8",
                "param_1": "input_flag",
                "param_2": "option",
                "param_3": "unused_param",
                "param_4": "param",
                "uVar1": "flag",
                "uVar2": "result",
                "calculate_flag_080015b2": "calculateFlag",
                "reverse_bits_0800040c": "reverseBits",
                "calculate_diff_08000194": "calculateDifference",
                "calculate_shifted_result_080004f8": "calculateShiftedResult",
                "calculate_improved_double_0800074c": "calculateImprovedDouble"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_0800074c",
                "FUN_08000194",
                "FUN_080015b2",
                "FUN_080004f8",
                "FUN_0800040c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016b4": {
            "entrypoint": "0x080016b4",
            "current_name": "process_data_080016b4",
            "code": "\nchar processData_080016b4(int data)\n\n{\n  char flag;\n  int dataIndex;\n  int endOfString;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  undefined4 temp7;\n  char flag1;\n  undefined4 temp8;\n  undefined4 temp9;\n  undefined4 temp10;\n  undefined8 temp11;\n  undefined8 temp12;\n  undefined8 result;\n  undefined8 temp13;\n  undefined4 temp14;\n  undefined4 temp15;\n  \n  flag1 = *(char *)(data + 0x70);\n  if (flag1 != '\\0') {\n    dataIndex = initialize_data_080058e0();\n    if ((uint)(dataIndex - *(int *)(data + 0x44)) < *(uint *)(data + 0x58)) {\n      flag1 = '\\0';\n    }\n    else {\n      temp2 = **(undefined4 **)(data + 0x38);\n      temp5 = (*(undefined4 **)(data + 0x38))[1];\n      temp11 = perform_arithmetic_operation_08000190(**(undefined4 **)(data + 0x40),(*(undefined4 **)(data + 0x40))[1])\n      ;\n      temp10 = (undefined4)((ulonglong)temp11 >> 0x20);\n      temp12 = perform_arithmetic_operation_08000190(temp2,temp5,*(undefined4 *)(data + 0x50),\n                            *(undefined4 *)(data + 0x54));\n      temp1 = (undefined4)((ulonglong)temp12 >> 0x20);\n      result = calculate_shifted_result_080004f8((int)temp11,temp10,*(undefined4 *)(data + 0x20),\n                            *(undefined4 *)(data + 0x24));\n      result = calculate_diff_08000194((int)result,(int)((ulonglong)result >> 0x20),\n                            *(undefined4 *)(data + 0x48),*(undefined4 *)(data + 0x4c));\n      *(undefined8 *)(data + 0x48) = result;\n      flag = *(char *)(data + 0x71);\n      if (flag == '\\0') {\n        temp13 = calculate_shifted_result_080004f8((int)temp12,temp1,*(undefined4 *)(data + 0x18),\n                              *(undefined4 *)(data + 0x1c));\n        result = perform_arithmetic_operation_08000190((int)result,(int)((ulonglong)result >> 0x20),(int)temp13,\n                              (int)((ulonglong)temp13 >> 0x20));\n        *(undefined8 *)(data + 0x48) = result;\n      }\n      temp3 = *(undefined4 *)(data + 0x48);\n      temp6 = *(undefined4 *)(data + 0x4c);\n      temp8 = *(undefined4 *)(undefined8 *)(data + 0x68);\n      temp9 = *(undefined4 *)(data + 0x6c);\n      result = *(undefined8 *)(data + 0x68);\n      endOfString = is_end_of_string_08000a18(temp3,temp6,temp8,temp9);\n      if (endOfString == 0) {\n        temp4 = *(undefined4 *)(data + 0x60);\n        temp7 = *(undefined4 *)(data + 100);\n        endOfString = is_end_of_string_080009dc(temp3,temp6);\n        if (endOfString != 0) {\n          *(undefined4 *)(data + 0x48) = temp4;\n          *(undefined4 *)(data + 0x4c) = temp7;\n        }\n      }\n      else {\n        *(undefined4 *)(data + 0x48) = temp8;\n        *(undefined4 *)(data + 0x4c) = temp9;\n      }\n      if (flag == '\\0') {\n        temp11 = 0;\n      }\n      else {\n        temp11 = calculate_shifted_result_080004f8((int)temp11,temp10,*(undefined4 *)(data + 0x18),\n                              *(undefined4 *)(data + 0x1c));\n      }\n      temp15 = (undefined4)((ulonglong)temp11 >> 0x20);\n      temp14 = (undefined4)temp11;\n      temp10 = *(undefined4 *)(data + 0x48);\n      temp3 = *(undefined4 *)(data + 0x4c);\n      temp11 = calculate_shifted_result_080004f8((int)temp12,temp1,*(undefined4 *)(data + 0x28),\n                            *(undefined4 *)(data + 0x2c));\n      temp11 = perform_arithmetic_operation_08000190(temp10,temp3,(int)temp11,(int)((ulonglong)temp11 >> 0x20));\n      temp11 = calculate_diff_08000194(temp14,temp15,(int)temp11,(int)((ulonglong)temp11 >> 0x20));\n      temp10 = (undefined4)((ulonglong)temp11 >> 0x20);\n      endOfString = is_end_of_string_080009dc(temp8,temp9,(int)temp11,temp10);\n      if (endOfString == 0) {\n        result = *(undefined8 *)(data + 0x60);\n        endOfString = is_end_of_string_080009dc((int)temp11,temp10,*(undefined4 *)(undefined8 *)(data + 0x60),\n                             *(undefined4 *)(data + 100));\n        if (endOfString == 0) {\n          result = temp11;\n        }\n      }\n      **(undefined8 **)(data + 0x3c) = result;\n      *(undefined4 *)(data + 0x50) = temp2;\n      *(undefined4 *)(data + 0x54) = temp5;\n      *(int *)(data + 0x44) = dataIndex;\n    }\n  }\n  return flag1;\n}\n\n",
            "renaming": {
                "FUN_080016b4": "process_data_080016b4",
                "param_1": "data",
                "cVar1": "flag",
                "iVar2": "dataIndex",
                "iVar3": "endOfString",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "temp3",
                "uVar7": "temp4",
                "uVar8": "temp5",
                "uVar9": "temp6",
                "uVar10": "temp7",
                "uVar12": "temp8",
                "uVar13": "temp9",
                "uVar14": "temp10",
                "uVar15": "temp11",
                "uVar16": "temp12",
                "uVar17": "result",
                "uVar18": "temp13",
                "local_38": "temp14",
                "uStack_34": "temp15"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_08000194",
                "FUN_080058e0",
                "FUN_080004f8",
                "FUN_08000a18",
                "FUN_08000190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001814": {
            "entrypoint": "0x08001814",
            "current_name": "initialize_data_08001814",
            "code": "\nvoid initializeData_08001814(undefined4 *outputArray,undefined4 unused1,undefined4 input1,undefined4 input2,\n                 undefined4 input3,undefined4 input4,undefined4 input5,undefined4 input6,\n                 int flag)\n\n{\n  int isEndOfStringResult;\n  undefined4 shiftedResult;\n  undefined flagValue;\n  bool isNotFlag1;\n  undefined8 doubleResult;\n  undefined8 shiftedResult2;\n  undefined8 arithmeticResult;\n  \n  isEndOfStringResult = is_end_of_string_080009dc(input1,input2,0,0);\n  if (((isEndOfStringResult == 0) && (isEndOfStringResult = is_end_of_string_080009dc(input3,input4,0,0), isEndOfStringResult == 0)) &&\n     (isEndOfStringResult = is_end_of_string_080009dc(input5,input6,0,0), isEndOfStringResult == 0)) {\n    outputArray[0xd] = flag;\n    isNotFlag1 = flag != 1;\n    if (isNotFlag1) {\n      flag = 0;\n    }\n    flagValue = (undefined)flag;\n    if (!isNotFlag1) {\n      flagValue = 1;\n    }\n    *(undefined *)((int)outputArray + 0x71) = flagValue;\n    *outputArray = input1;\n    outputArray[1] = input2;\n    outputArray[2] = input3;\n    outputArray[3] = input4;\n    outputArray[4] = input5;\n    outputArray[5] = input6;\n    doubleResult = reverse_bits_0800040c(outputArray[0x16]);\n    doubleResult = calculate_improved_double_0800074c((int)doubleResult,(int)((ulonglong)doubleResult >> 0x20),0,0x408f4000);\n    shiftedResult = (undefined4)((ulonglong)doubleResult >> 0x20);\n    outputArray[6] = input1;\n    outputArray[7] = input2;\n    shiftedResult2 = calculate_shifted_result_080004f8(input3,input4,(int)doubleResult,shiftedResult);\n    *(undefined8 *)(outputArray + 8) = shiftedResult2;\n    doubleResult = calculate_improved_double_0800074c(input5,input6,(int)doubleResult,shiftedResult);\n    *(undefined8 *)(outputArray + 10) = doubleResult;\n    if (outputArray[0xc] == 1) {\n      arithmeticResult = perform_arithmetic_operation_08000190(0,0,input1,input2);\n      *(undefined8 *)(outputArray + 6) = arithmeticResult;\n      shiftedResult2 = perform_arithmetic_operation_08000190(0,0,(int)shiftedResult2,(int)((ulonglong)shiftedResult2 >> 0x20));\n      *(undefined8 *)(outputArray + 8) = shiftedResult2;\n      doubleResult = perform_arithmetic_operation_08000190(0,0,(int)doubleResult,(int)((ulonglong)doubleResult >> 0x20));\n      *(undefined8 *)(outputArray + 10) = doubleResult;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001814": "initialize_data_08001814",
                "param_1": "outputArray",
                "param_2": "unused1",
                "param_3": "input1",
                "param_4": "input2",
                "param_5": "input3",
                "param_6": "input4",
                "param_7": "input5",
                "param_8": "input6",
                "param_9": "flag",
                "iVar1": "isEndOfStringResult",
                "uVar2": "shiftedResult",
                "uVar3": "flagValue",
                "bVar4": "isNotFlag1",
                "uVar5": "doubleResult",
                "uVar6": "shiftedResult2",
                "uVar7": "arithmeticResult"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_080018f8"
            ],
            "called": [
                "FUN_0800074c",
                "FUN_080009dc",
                "FUN_080004f8",
                "FUN_0800040c",
                "FUN_08000190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018f8": {
            "entrypoint": "0x080018f8",
            "current_name": "initialize_data_080018f8",
            "code": "\nvoid initializeData_080018f8(void)\n\n{\n  initializeData_080018f8Helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018f8": "initialize_data_080018f8",
                "initialize_data_08001814": "initializeDataHelper"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08001814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001918": {
            "entrypoint": "0x08001918",
            "current_name": "calculate_shifted_result_and_store_08001918",
            "code": "\nvoid calculateShiftedResultAndStore_08001918(int src,int length,undefined4 arg1,undefined4 arg2)\n\n{\n  undefined4 shiftedResultUpper;\n  undefined8 extendedLength;\n  undefined8 reversedBits;\n  \n  if (0 < length) {\n    extendedLength = extendUnsignedNumber(length);\n    reversedBits = reverseBits(*(undefined4 *)(src + 0x58));\n    extendedLength = calculateImprovedDouble((int)extendedLength,(int)((ulonglong)extendedLength >> 0x20),(int)reversedBits,\n                         (int)((ulonglong)reversedBits >> 0x20),arg2);\n    shiftedResultUpper = (undefined4)((ulonglong)extendedLength >> 0x20);\n    reversedBits = calculateShiftedResult((int)extendedLength,shiftedResultUpper,*(undefined4 *)(src + 0x20),\n                         *(undefined4 *)(src + 0x24));\n    *(undefined8 *)(src + 0x20) = reversedBits;\n    extendedLength = calculateImprovedDouble(*(undefined4 *)(src + 0x28),*(undefined4 *)(src + 0x2c),(int)extendedLength,\n                         shiftedResultUpper);\n    *(undefined8 *)(src + 0x28) = extendedLength;\n    *(int *)(src + 0x58) = length;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001918": "calculate_shifted_result_and_store_08001918",
                "param_1": "src",
                "param_2": "length",
                "param_3": "arg1",
                "param_4": "arg2",
                "uVar1": "shiftedResultUpper",
                "uVar2": "extendedLength",
                "uVar3": "reversedBits",
                "extend_unsigned_number_0800042c": "extendUnsignedNumber",
                "reverse_bits_0800040c": "reverseBits",
                "calculate_improved_double_0800074c": "calculateImprovedDouble",
                "calculate_shifted_result_080004f8": "calculateShiftedResult"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_0800074c",
                "FUN_080004f8",
                "FUN_0800040c",
                "FUN_0800042c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001960": {
            "entrypoint": "0x08001960",
            "current_name": "update_params_if_needed_08001960",
            "code": "\nvoid updateParamsIfNeeded_08001960(int objectAddress,undefined4 param2,undefined4 newParam1,undefined4 newParam2,\n                 undefined4 newParam3,undefined4 newParam4)\n\n{\n  int validationResult;\n  undefined4 *ptrToData;\n  undefined4 data1;\n  undefined4 tempParam1;\n  undefined4 data2;\n  undefined4 tempParam2;\n  \n  validationResult = validate_and_return_param_08000a04(newParam1,newParam2,newParam3,newParam4,newParam2);\n  if (validationResult == 0) {\n    *(undefined4 *)(objectAddress + 0x60) = newParam1;\n    *(undefined4 *)(objectAddress + 100) = newParam2;\n    *(undefined4 *)(objectAddress + 0x68) = newParam3;\n    *(undefined4 *)(objectAddress + 0x6c) = newParam4;\n    if (*(char *)(objectAddress + 0x70) != '\\0') {\n      ptrToData = *(undefined4 **)(objectAddress + 0x3c);\n      data1 = *ptrToData;\n      data2 = ptrToData[1];\n      validationResult = is_end_of_string_080009dc(newParam3,newParam4,data1,data2);\n      if (validationResult == 0) {\n        validationResult = is_end_of_string_08000a18(newParam1,newParam2,data1,data2);\n        if (validationResult != 0) {\n          *ptrToData = newParam1;\n          ptrToData[1] = newParam2;\n        }\n      }\n      else {\n        *ptrToData = newParam3;\n        ptrToData[1] = newParam4;\n      }\n      data1 = *(undefined4 *)(objectAddress + 0x48);\n      data2 = *(undefined4 *)(objectAddress + 0x4c);\n      tempParam1 = *(undefined4 *)(objectAddress + 0x68);\n      tempParam2 = *(undefined4 *)(objectAddress + 0x6c);\n      validationResult = is_end_of_string_08000a18(data1,data2,tempParam1,tempParam2);\n      if (validationResult != 0) {\n        *(undefined4 *)(objectAddress + 0x48) = tempParam1;\n        *(undefined4 *)(objectAddress + 0x4c) = tempParam2;\n        return;\n      }\n      tempParam1 = *(undefined4 *)(objectAddress + 0x60);\n      tempParam2 = *(undefined4 *)(objectAddress + 100);\n      validationResult = is_end_of_string_080009dc(data1,data2,tempParam1,tempParam2);\n      if (validationResult != 0) {\n        *(undefined4 *)(objectAddress + 0x48) = tempParam1;\n        *(undefined4 *)(objectAddress + 0x4c) = tempParam2;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001960": "update_params_if_needed_08001960",
                "param_1": "objectAddress",
                "param_2": "param2",
                "param_3": "newParam1",
                "param_4": "newParam2",
                "param_5": "newParam3",
                "param_6": "newParam4",
                "iVar1": "validationResult",
                "puVar2": "ptrToData",
                "uVar3": "data1",
                "uVar4": "tempParam1",
                "uVar5": "data2",
                "uVar6": "tempParam2"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_08000a04",
                "FUN_08000a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080019f6": {
            "entrypoint": "0x080019f6",
            "current_name": "extract_and_validate_data_080019f6",
            "code": "\nvoid extractAndValidateData_080019f6(int dataPtr)\n\n{\n  int isEndOfStringResult;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  undefined4 tempVar4;\n  \n  tempVar2 = **(undefined4 **)(dataPtr + 0x3c);\n  tempVar3 = (*(undefined4 **)(dataPtr + 0x3c))[1];\n  *(undefined4 *)(dataPtr + 0x48) = tempVar2;\n  *(undefined4 *)(dataPtr + 0x4c) = tempVar3;\n  tempVar1 = (*(undefined4 **)(dataPtr + 0x38))[1];\n  *(undefined4 *)(dataPtr + 0x50) = **(undefined4 **)(dataPtr + 0x38);\n  *(undefined4 *)(dataPtr + 0x54) = tempVar1;\n  tempVar1 = *(undefined4 *)(dataPtr + 0x68);\n  tempVar4 = *(undefined4 *)(dataPtr + 0x6c);\n  isEndOfStringResult = is_end_of_string_08000a18(tempVar2,tempVar3,tempVar1,tempVar4);\n  if (isEndOfStringResult == 0) {\n    tempVar1 = *(undefined4 *)(dataPtr + 0x60);\n    tempVar4 = *(undefined4 *)(dataPtr + 100);\n    isEndOfStringResult = is_end_of_string_080009dc(tempVar2,tempVar3,tempVar1,tempVar4);\n    if (isEndOfStringResult != 0) {\n      *(undefined4 *)(dataPtr + 0x48) = tempVar1;\n      *(undefined4 *)(dataPtr + 0x4c) = tempVar4;\n    }\n    return;\n  }\n  *(undefined4 *)(dataPtr + 0x48) = tempVar1;\n  *(undefined4 *)(dataPtr + 0x4c) = tempVar4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080019f6": "extract_and_validate_data_080019f6",
                "param_1": "dataPtr",
                "iVar1": "isEndOfStringResult",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "tempVar3",
                "uVar5": "tempVar4"
            },
            "calling": [
                "FUN_08001a44"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_08000a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a44": {
            "entrypoint": "0x08001a44",
            "current_name": "update_data_flag_08001a44",
            "code": "\nvoid updateDataFlag_08001a44(int dataObjectAddress,int updateFlag)\n\n{\n  undefined dataUpdated;\n  \n  if (updateFlag == 1) {\n    dataUpdated = 1;\n    if (*(char *)(dataObjectAddress + 0x70) == '\\0') {\n      extractAndValidateData();\n    }\n  }\n  else {\n    dataUpdated = 0;\n  }\n  *(undefined *)(dataObjectAddress + 0x70) = dataUpdated;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a44": "update_data_flag_08001a44",
                "param_1": "dataObjectAddress",
                "param_2": "updateFlag",
                "uVar1": "dataUpdated",
                "extract_and_validate_data_080019f6": "extractAndValidateData"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080019f6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a66": {
            "entrypoint": "0x08001a66",
            "current_name": "update_arithmetic_values_08001a66",
            "code": "\nvoid updateArithmeticValues_08001a66(int ptrObj,int paramValue,undefined4 unusedParam1,undefined4 unusedParam2)\n\n{\n  undefined8 result;\n  \n  if ((*(char *)(ptrObj + 0x70) != '\\0') && (*(int *)(ptrObj + 0x30) != paramValue)) {\n    result = performArithmeticOperation(0,0,*(undefined4 *)(ptrObj + 0x18),*(undefined4 *)(ptrObj + 0x1c),unusedParam2\n                        );\n    *(undefined8 *)(ptrObj + 0x18) = result;\n    result = performArithmeticOperation(0,0,*(undefined4 *)(ptrObj + 0x20),*(undefined4 *)(ptrObj + 0x24));\n    *(undefined8 *)(ptrObj + 0x20) = result;\n    result = performArithmeticOperation(0,0,*(undefined4 *)(ptrObj + 0x28),*(undefined4 *)(ptrObj + 0x2c));\n    *(undefined8 *)(ptrObj + 0x28) = result;\n  }\n  *(int *)(ptrObj + 0x30) = paramValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a66": "update_arithmetic_values_08001a66",
                "param_1": "ptrObj",
                "param_2": "paramValue",
                "param_3": "unusedParam1",
                "param_4": "unusedParam2",
                "uVar1": "result",
                "perform_arithmetic_operation_08000190": "performArithmeticOperation"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [
                "FUN_08000190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "initialize_params_08001ab0",
            "code": "\nint initialize_params_08001ab0(int data_entry,undefined4 param_ptr,undefined4 param_3,undefined4 param_4,\n                undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                undefined4 param_9,undefined4 data_entry0,undefined4 data_entry1,undefined4 data_entry2)\n\n{\n  int result;\n  undefined4 updated_param;\n  \n  *(undefined4 *)(data_entry + 0x3c) = param_3;\n  *(undefined4 *)(data_entry + 0x38) = param_ptr;\n  *(undefined4 *)(data_entry + 0x40) = param_4;\n  *(undefined *)(data_entry + 0x70) = 0;\n  update_params(data_entry,param_ptr,0,0,0,0x406fe000);\n  *(undefined4 *)(data_entry + 0x58) = 100;\n  update_arithmetic_values(data_entry,data_entry2);\n  initialize_data(data_entry,updated_param,param_5,param_6,param_7,param_8,param_9,data_entry0,data_entry1);\n  result = initialize_entry_data();\n  *(int *)(data_entry + 0x44) = result - *(int *)(data_entry + 0x58);\n  return data_entry;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "initialize_params_08001ab0",
                "param_1": "data_entry",
                "param_2": "param_ptr",
                "iVar1": "result",
                "extraout_r1": "updated_param",
                "update_params_if_needed_08001960": "update_params",
                "update_arithmetic_values_08001a66": "update_arithmetic_values",
                "initialize_data_08001814": "initialize_data",
                "initialize_data_080058e0": "initialize_entry_data"
            },
            "calling": [
                "FUN_08001b18"
            ],
            "called": [
                "FUN_08001814",
                "FUN_08001960",
                "FUN_08001a66",
                "FUN_080058e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b18": {
            "entrypoint": "0x08001b18",
            "current_name": "initialize_and_return_08001b18",
            "code": "\nundefined4 initialize_and_return_08001b18(undefined4 result)\n\n{\n  initialize_params();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001b18": "initialize_and_return_08001b18",
                "param_1": "result",
                "initialize_params_08001ab0": "initialize_params"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_08001ab0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "initialize_and_update_system_08001b48",
            "code": "\nvoid initialize_and_update_system_08001b48(void)\n\n{\n  int result;\n  uint uVar2;\n  undefined4 device_parameters [2];\n  undefined4 device_memory;\n  undefined4 memory_value_1;\n  undefined4 memory_value_2;\n  undefined4 memory_value_3;\n  undefined4 memory_value_4;\n  undefined4 memory_value_5;\n  undefined4 system_parameters [4];\n  undefined4 parameter_1;\n  undefined4 parameter_2;\n  undefined4 parameter_3;\n  undefined4 parameter_4;\n  undefined4 parameter_5;\n  \n  system_parameters[0] = 2;\n  parameter_1 = 1;\n  parameter_2 = 0x10;\n  parameter_3 = 2;\n  parameter_4 = 0;\n  parameter_5 = 0x380000;\n  result = check_and_adjust_parameters_08003688(system_parameters);\n  if (result != 0) {\n    endless_loop_08004d40(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x88);\n  }\n  memory_value_1 = 0xf;\n  memory_value_2 = 2;\n  memory_value_3 = 0;\n  memory_value_4 = 0x400;\n  memory_value_5 = 0;\n  result = initialize_memory_08003ad4(&memory_value_1);\n  if (result != 0) {\n    endless_loop_08004d40(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x95);\n  }\n  device_parameters[0] = 2;\n  device_memory = 0x8000;\n  result = initialize_device_08003c90(device_parameters);\n  if (result != 0) {\n    endless_loop_08004d40(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x9c);\n  }\n  uVar2 = get_data_value_08003c44();\n  validate_input_08002514(uVar2 / 1000);\n  update_configuration_08002560(4);\n  update_memory_08002494(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "initialize_and_update_system_08001b48",
                "local_30": "system_parameters",
                "local_20": "parameter_1",
                "local_1c": "parameter_2",
                "local_14": "parameter_3",
                "local_10": "parameter_4",
                "local_c": "parameter_5",
                "iVar1": "result",
                "local_44": "memory_value_1",
                "local_40": "memory_value_2",
                "local_3c": "memory_value_3",
                "local_38": "memory_value_4",
                "local_34": "memory_value_5",
                "local_54": "device_parameters",
                "local_4c": "device_memory"
            },
            "calling": [
                "FUN_08004c52"
            ],
            "called": [
                "FUN_08002514",
                "FUN_08004d40",
                "FUN_08002494",
                "FUN_08003c90",
                "FUN_08003ad4",
                "FUN_08003c44",
                "FUN_08003688",
                "FUN_08002560"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08001be8",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined *)(iVar1 + 0x20000000) < &DAT_2000015c; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007970);\n  }\n  for (puVar2 = &DAT_20000160; puVar2 < &DAT_200006a8; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_registers_08004d44();\n  execute_functions_08006198();\n  UNRECOVERED_JUMPTABLE = (code *)0x8001c1a;\n  continuous_data_processing_08005f6c();\n                    /* WARNING: Could not recover jumptable at 0x08001c1a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08005f6c",
                "FUN_08004d44",
                "FUN_08006198"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c32": {
            "entrypoint": "0x08001c32",
            "current_name": "initialize_system_08001c32",
            "code": "\nvoid initialize_system_08001c32(void)\n\n{\n  initialize_system_08001c32_08004c52();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c32": "initialize_system_08001c32"
            },
            "calling": [
                "FUN_08005f5e"
            ],
            "called": [
                "FUN_08004c52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c3a": {
            "entrypoint": "0x08001c3a",
            "current_name": "FUNC_08001c3a",
            "code": "\nvoid FUNC_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c3a": "FUNC_08001c3a"
            },
            "calling": [
                "FUN_08001c88"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001c3c": {
            "entrypoint": "0x08001c3c",
            "current_name": "validate_and_update_memory_08001c3c",
            "code": "\nundefined4 validateAndUpdateMemory_08001c3c(uint inputValue)\n\n{\n  int validationResult;\n  \n  validationResult = validate_input_08002514(DAT_20000084 / (1000 / DAT_20000078));\n  if (validationResult != 0) {\n    return 1;\n  }\n  if (0xf < inputValue) {\n    return 1;\n  }\n  update_memory_08002494(0xffffffff,inputValue,0);\n  DAT_2000007c = inputValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001c3c": "validate_and_update_memory_08001c3c",
                "param_1": "inputValue",
                "iVar1": "validationResult"
            },
            "calling": [
                "FUN_08003afa",
                "FUN_08001c88"
            ],
            "called": [
                "FUN_08002514",
                "FUN_08002494"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c88": {
            "entrypoint": "0x08001c88",
            "current_name": "initialize_hardware_08001c88",
            "code": "\n\n\nundefined4 initializeHardware_08001c88(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  updateParameter(3);\n  validateAndAllocateMemory(0xf);\n  FUNC_08001c3a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001c88": "initialize_hardware_08001c88",
                "update_parameter_08002470": "updateParameter",
                "validate_and_update_memory_08001c3c": "validateAndAllocateMemory"
            },
            "calling": [
                "FUN_08004c52"
            ],
            "called": [
                "FUN_08001c3a",
                "FUN_08002470",
                "FUN_08001c3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cac": {
            "entrypoint": "0x08001cac",
            "current_name": "addition_operation_08001cac",
            "code": "\nvoid additionOperation_08001cac(void)\n\n{\n  DAT_200006a0 = (uint)DAT_20000078 + DAT_200006a0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cac": "addition_operation_08001cac"
            },
            "calling": [
                "FUN_08004b9e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cc4": {
            "entrypoint": "0x08001cc4",
            "current_name": "get_data_08001cc4",
            "code": "\nundefined4 get_data_08001cc4(void)\n\n{\n  return DAT_200006a0;\n}\n\n",
            "renaming": {
                "FUN_08001cc4": "get_data_08001cc4"
            },
            "calling": [
                "FUN_080020f0",
                "FUN_08003c90",
                "FUN_08001cd0",
                "FUN_08004b94",
                "FUN_08003afa",
                "FUN_08004478",
                "FUN_08001f84",
                "FUN_08002384",
                "FUN_080043b4",
                "FUN_080053d4",
                "FUN_08003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "calculate_and_set_result_08001cd0",
            "code": "\nundefined4 calculateAndSetResult_08001cd0(uint **data,uint limit)\n\n{\n  int initialValue;\n  uint resultModifier;\n  int condition;\n  undefined4 returnValue;\n  uint *ptr;\n  uint temp;\n  uint counter;\n  \n  counter = 0;\n  initialValue = get_data_08001cc4();\n  temp = DAT_20000084;\n  ptr = *data;\n  if ((ptr[2] & 0x100) == 0) {\n    if (((ptr[1] & 0x100) == 0) && ((ptr[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**data & 2) != 0) goto LAB_08001de2;\n      } while ((limit == 0xffffffff) ||\n              ((limit != 0 && (condition = get_data_08001cc4(), (uint)(condition - initialValue) <= limit))));\n      data[10] = (uint *)((uint)data[10] | 4);\n      *(undefined *)(data + 9) = 0;\n      returnValue = 3;\n    }\n    else {\n      resultModifier = calculate_result_08003da4(2);\n      ptr = *data;\n      if (((ptr[4] & 0x24924924) == 0) && ((ptr[3] & 0x924924) == 0)) {\n        if ((ptr[4] & 0x12492492) == 0) {\n          if ((ptr[3] & 0x492492) == 0) {\n            condition = 0x14;\n          }\n          else {\n            condition = 0x29;\n          }\n        }\n        else {\n          condition = 0x29;\n        }\n      }\n      else if (((ptr[4] & 0x12492492) == 0) && ((ptr[3] & 0x492492) == 0)) {\n        condition = 0x54;\n      }\n      else if ((ptr[4] & 0x249249) == 0) {\n        if ((ptr[3] & 0x249249) == 0) {\n          condition = 0x54;\n        }\n        else {\n          condition = 0xfc;\n        }\n      }\n      else {\n        condition = 0xfc;\n      }\n      temp = (temp / resultModifier) * condition;\n      for (; counter <= temp && temp - counter != 0; counter = counter + 1) {\n        if ((limit != 0xffffffff) &&\n           ((limit == 0 || (condition = get_data_08001cc4(), limit < (uint)(condition - initialValue))))) {\n          data[10] = (uint *)((uint)data[10] | 4);\n          *(undefined *)(data + 9) = 0;\n          return 3;\n        }\n      }\nLAB_08001de2:\n      **data = 0xffffffed;\n      data[10] = (uint *)((uint)data[10] | 0x200);\n      if (((*data)[2] & 0xe0000) == 0xe0000) {\n        if (data[3] == (uint *)0x0) {\n          data[10] = (uint *)((uint)data[10] & 0xfffffeff);\n          if (((uint)data[10] & 0x1000) == 0) {\n            data[10] = (uint *)((uint)data[10] | 1);\n            returnValue = 0;\n          }\n          else {\n            returnValue = 0;\n          }\n        }\n        else {\n          returnValue = 0;\n        }\n      }\n      else {\n        returnValue = 0;\n      }\n    }\n  }\n  else {\n    data[10] = (uint *)((uint)data[10] | 0x20);\n    *(undefined *)(data + 9) = 0;\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "calculate_and_set_result_08001cd0",
                "param_1": "data",
                "param_2": "limit",
                "iVar1": "initialValue",
                "uVar2": "resultModifier",
                "iVar3": "condition",
                "uVar4": "returnValue",
                "puVar5": "ptr",
                "uVar6": "temp",
                "local_1c": "counter"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08003da4",
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e40": {
            "entrypoint": "0x08001e40",
            "current_name": "get_value_from_offset_08001e40",
            "code": "\nundefined4 get_value_from_offset_08001e40(int *input_param)\n\n{\n  return *(undefined4 *)(*input_param + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_08001e40": "get_value_from_offset_08001e40",
                "param_1": "input_param"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e48": {
            "entrypoint": "0x08001e48",
            "current_name": "update_values_08001e48",
            "code": "\nundefined4 updateValues_08001e48(int *inputArray,uint *valueArray)\n\n{\n  undefined4 returnValue;\n  uint modifiedValue;\n  int counter;\n  \n  if (*(char *)(inputArray + 9) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(inputArray + 9) = 1;\n    modifiedValue = valueArray[1];\n    if (modifiedValue < 7) {\n      modifiedValue = modifiedValue * 5 - 5;\n      *(uint *)(*inputArray + 0x34) =\n           *valueArray << (modifiedValue & 0xff) | *(uint *)(*inputArray + 0x34) & ~(0x1f << (modifiedValue & 0xff));\n    }\n    else if (modifiedValue < 0xd) {\n      modifiedValue = modifiedValue * 5 - 0x23;\n      *(uint *)(*inputArray + 0x30) =\n           *valueArray << (modifiedValue & 0xff) | *(uint *)(*inputArray + 0x30) & ~(0x1f << (modifiedValue & 0xff));\n    }\n    else {\n      modifiedValue = modifiedValue * 5 - 0x41;\n      *(uint *)(*inputArray + 0x2c) =\n           *valueArray << (modifiedValue & 0xff) | *(uint *)(*inputArray + 0x2c) & ~(0x1f << (modifiedValue & 0xff));\n    }\n    modifiedValue = *valueArray;\n    if (modifiedValue < 10) {\n      *(uint *)(*inputArray + 0x10) =\n           valueArray[2] << (modifiedValue * 3 & 0xff) |\n           *(uint *)(*inputArray + 0x10) & ~(7 << (modifiedValue * 3 & 0xff));\n    }\n    else {\n      modifiedValue = modifiedValue * 3 - 0x1e;\n      *(uint *)(*inputArray + 0xc) =\n           valueArray[2] << (modifiedValue & 0xff) | *(uint *)(*inputArray + 0xc) & ~(7 << (modifiedValue & 0xff));\n    }\n    if (*valueArray - 0x10 < 2) {\n      if (*inputArray == 0x40012400) {\n        if ((uRam40012408 & 0x800000) == 0) {\n          uRam40012408 = uRam40012408 | 0x800000;\n          if (*valueArray == 0x10) {\n            for (counter = (DAT_20000084 / 1000000) * 10; counter != 0; counter = counter + -1) {\n            }\n            returnValue = 0;\n          }\n          else {\n            returnValue = 0;\n          }\n        }\n        else {\n          returnValue = 0;\n        }\n      }\n      else {\n        inputArray[10] = inputArray[10] | 0x20;\n        returnValue = 1;\n      }\n    }\n    else {\n      returnValue = 0;\n    }\n    *(undefined *)(inputArray + 9) = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001e48": "update_values_08001e48",
                "param_1": "inputArray",
                "param_2": "valueArray",
                "uVar1": "returnValue",
                "uVar2": "modifiedValue",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f80": {
            "entrypoint": "0x08001f80",
            "current_name": "get_pointer_value_08001f80",
            "code": "\nundefined4 getPointerValue_08001f80(int pointerAddress)\n\n{\n  return *(undefined4 *)(pointerAddress + 0x28);\n}\n\n",
            "renaming": {
                "FUN_08001f80": "get_pointer_value_08001f80",
                "param_1": "pointerAddress"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f84": {
            "entrypoint": "0x08001f84",
            "current_name": "verify_and_update_data_08001f84",
            "code": "\nundefined4 verify_and_update_data_08001f84(int *data_ptr,undefined4 param)\n\n{\n  int temp_var1;\n  undefined4 result;\n  int data_value;\n  uint counter;\n  \n  data_value = *data_ptr;\n  if ((*(uint *)(data_value + 8) & 1) == 0) {\n    *(uint *)(data_value + 8) = *(uint *)(data_value + 8) | 1;\n    for (counter = DAT_20000084 / 1000000; counter != 0; counter = counter - 1) {\n    }\n    data_value = get_data_08001cc4(data_ptr,param,DAT_20000084 * 0x431bde83);\n    do {\n      if ((*(uint *)(*data_ptr + 8) & 1) != 0) {\n        return 0;\n      }\n      temp_var1 = get_data_08001cc4();\n    } while ((uint)(temp_var1 - data_value) < 3);\n    data_ptr[10] = data_ptr[10] | 0x10;\n    data_ptr[0xb] = data_ptr[0xb] | 1;\n    *(undefined *)(data_ptr + 9) = 0;\n    result = 1;\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001f84": "verify_and_update_data_08001f84",
                "param_1": "data_ptr",
                "param_2": "param",
                "iVar1": "temp_var1",
                "iVar3": "data_value",
                "uVar2": "result",
                "local_14": "counter"
            },
            "calling": [
                "FUN_08002004",
                "FUN_08002384"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002004": {
            "entrypoint": "0x08002004",
            "current_name": "update_data_08002004",
            "code": "\n\n\nint updateData_08002004(int *data)\n\n{\n  int verificationResult;\n  undefined4 *ptr;\n  int value;\n  \n  if (*(char *)(data + 9) != '\\x01') {\n    *(undefined *)(data + 9) = 1;\n    verificationResult = verifyAndUpdateData();\n    if (verificationResult == 0) {\n      data[10] = data[10] & 0xfffffcfeU | 0x100;\n      ptr = (undefined4 *)*data;\n      if ((ptr == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        data[10] = data[10] | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          data[10] = data[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        data[10] = data[10] & 0xffefffff;\n        if ((ptr[1] & 0x400) != 0) {\n          data[10] = data[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((data[10] & 0x1000U) == 0) {\n        data[0xb] = 0;\n      }\n      else {\n        data[0xb] = data[0xb] & 0xfffffff9;\n      }\n      *(undefined *)(data + 9) = 0;\n      *ptr = 0xfffffffd;\n      value = *data;\n      if (((*(uint *)(value + 8) & 0xe0000) == 0xe0000) &&\n         ((value != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(data + 9) = 0;\n    }\n    return verificationResult;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002004": "update_data_08002004",
                "param_1": "data",
                "iVar1": "verificationResult",
                "puVar2": "ptr",
                "iVar3": "value",
                "verify_and_update_data_08001f84": "verifyAndUpdateData"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08001f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080020f0": {
            "entrypoint": "0x080020f0",
            "current_name": "check_and_update_data_080020f0",
            "code": "\nundefined4 checkAndUpdateData_080020f0(int *data)\n\n{\n  int dataDiff;\n  int dataPtr;\n  \n  dataPtr = *data;\n  if ((*(uint *)(dataPtr + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(dataPtr + 8) = *(uint *)(dataPtr + 8) & 0xfffffffe;\n  dataPtr = get_data_08001cc4();\n  do {\n    if ((*(uint *)(*data + 8) & 1) == 0) {\n      return 0;\n    }\n    dataDiff = get_data_08001cc4();\n  } while ((uint)(dataDiff - dataPtr) < 3);\n  data[10] = data[10] | 0x10;\n  data[0xb] = data[0xb] | 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080020f0": "check_and_update_data_080020f0",
                "param_1": "data",
                "iVar1": "dataDiff",
                "iVar2": "dataPtr"
            },
            "calling": [
                "FUN_0800213c",
                "FUN_08002348",
                "FUN_0800224c",
                "FUN_08002384"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800213c": {
            "entrypoint": "0x0800213c",
            "current_name": "update_memory_configuration_0800213c",
            "code": "\nundefined4 updateMemoryConfiguration_0800213c(int *configuration)\n\n{\n  int result;\n  uint tempVar1;\n  uint tempVar2;\n  \n  if (configuration == (int *)0x0) {\n    return 1;\n  }\n  if (configuration[10] == 0) {\n    configuration[0xb] = 0;\n    *(undefined *)(configuration + 9) = 0;\n    update_memory_configuration_08004974();\n  }\n  result = check_and_update_data_080020f0(configuration);\n  if (((configuration[10] & 0x10U) == 0) && (result == 0)) {\n    configuration[10] = configuration[10] & 0xffffeefdU | 2;\n    tempVar1 = configuration[1] | configuration[7] | configuration[3] << 1;\n    if (configuration[2] == 0x100) {\n      tempVar2 = 0x100;\n    }\n    else {\n      tempVar2 = 0;\n      if (configuration[2] == 1) {\n        tempVar2 = 0x100;\n      }\n    }\n    if (configuration[5] == 1) {\n      if (configuration[3] == 0) {\n        tempVar2 = tempVar2 | (configuration[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        configuration[10] = configuration[10] | 0x20;\n        configuration[0xb] = configuration[0xb] | 1;\n      }\n    }\n    *(uint *)(*configuration + 4) = tempVar2 | *(uint *)(*configuration + 4) & 0xffff16ff;\n    *(uint *)(*configuration + 8) = *(uint *)(*configuration + 8) & 0xffe1f7fd | tempVar1;\n    if ((configuration[2] == 0x100) || (configuration[2] == 1)) {\n      tempVar2 = (configuration[4] + -1) * 0x100000;\n    }\n    else {\n      tempVar2 = 0;\n    }\n    *(uint *)(*configuration + 0x2c) = tempVar2 | *(uint *)(*configuration + 0x2c) & 0xff0fffff;\n    if (tempVar1 != (*(uint *)(*configuration + 8) & 0xff1f0efe)) {\n      configuration[10] = configuration[10] & 0xffffffedU | 0x10;\n      configuration[0xb] = configuration[0xb] | 1;\n      return 1;\n    }\n    configuration[0xb] = 0;\n    configuration[10] = configuration[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  configuration[10] = configuration[10] | 0x10;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800213c": "update_memory_configuration_0800213c",
                "param_1": "configuration",
                "iVar1": "result",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_080020f0",
                "FUN_08004974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800224c": {
            "entrypoint": "0x0800224c",
            "current_name": "clear_and_reset_data_0800224c",
            "code": "\nint clearAndResetData_0800224c(int *dataPointer)\n\n{\n  int result;\n  \n  if (dataPointer == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    dataPointer[10] = dataPointer[10] | 2;\n    result = checkAndUpdateData();\n    if (result == 0) {\n      *(undefined4 *)*dataPointer = 0xffffffe0;\n      *(uint *)(*dataPointer + 4) = *(uint *)(*dataPointer + 4) & 0xff3f0000;\n      *(uint *)(*dataPointer + 8) = *(uint *)(*dataPointer + 8) & 0xff0106f0;\n      *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) & 0xff000000;\n      *(uint *)(*dataPointer + 0x10) = *(uint *)(*dataPointer + 0x10) & 0xc0000000;\n      *(uint *)(*dataPointer + 0x14) = *(uint *)(*dataPointer + 0x14) & 0xfffff000;\n      *(uint *)(*dataPointer + 0x18) = *(uint *)(*dataPointer + 0x18) & 0xfffff000;\n      *(uint *)(*dataPointer + 0x1c) = *(uint *)(*dataPointer + 0x1c) & 0xfffff000;\n      *(uint *)(*dataPointer + 0x20) = *(uint *)(*dataPointer + 0x20) & 0xfffff000;\n      *(uint *)(*dataPointer + 0x24) = *(uint *)(*dataPointer + 0x24) & 0xfffff000;\n      *(uint *)(*dataPointer + 0x28) = *(uint *)(*dataPointer + 0x28) & 0xfffff000;\n      *(uint *)(*dataPointer + 0x2c) = *(uint *)(*dataPointer + 0x2c) & 0xff000000;\n      *(uint *)(*dataPointer + 0x2c) = *(uint *)(*dataPointer + 0x2c) & 0xff000000;\n      *(uint *)(*dataPointer + 0x30) = *(uint *)(*dataPointer + 0x30) & 0xc0000000;\n      *(uint *)(*dataPointer + 0x34) = *(uint *)(*dataPointer + 0x34) & 0xc0000000;\n      *(uint *)(*dataPointer + 0x38) = *(uint *)(*dataPointer + 0x38) & 0xffc00000;\n      *(uint *)(*dataPointer + 0x38) = *(uint *)(*dataPointer + 0x38) & 0xffc00000;\n      updateControlRegisters(dataPointer);\n      dataPointer[0xb] = 0;\n      dataPointer[10] = 0;\n    }\n    *(undefined *)(dataPointer + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800224c": "clear_and_reset_data_0800224c",
                "param_1": "dataPointer",
                "iVar1": "result",
                "check_and_update_data_080020f0": "checkAndUpdateData",
                "update_control_registers_080049f0": "updateControlRegisters"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_080020f0",
                "FUN_080049f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002348": {
            "entrypoint": "0x08002348",
            "current_name": "check_and_update_data_08002348",
            "code": "\nint checkAndUpdateData_08002348(int data)\n\n{\n  int result;\n  \n  if (*(char *)(data + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 0x24) = 1;\n  result = check_and_update_data_080020f0();\n  if (result == 0) {\n    *(uint *)(data + 0x28) = *(uint *)(data + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(data + 0x24) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002348": "check_and_update_data_08002348",
                "param_1": "data",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_080020f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002384": {
            "entrypoint": "0x08002384",
            "current_name": "check_and_update_data_08002384",
            "code": "\nint checkAndUpdateData_08002384(int *data)\n\n{\n  uint tempVar1;\n  int result;\n  uint tempVar2;\n  int startValue;\n  int currentValue;\n  int loopCounter;\n  \n  if (*(char *)(data + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 9) = 1;\n  result = check_and_update_data_080020f0();\n  if (result == 0) {\n    data[10] = data[10] & 0xffffeefdU | 2;\n    tempVar1 = DAT_20000084;\n    tempVar2 = calculate_result_08003da4(2);\n    for (loopCounter = tempVar1 / tempVar2 << 1; loopCounter != 0; loopCounter = loopCounter + -1) {\n    }\n    verify_and_update_data_08001f84(data);\n    *(uint *)(*data + 8) = *(uint *)(*data + 8) | 8;\n    startValue = get_data_08001cc4();\n    while (currentValue = *data, (*(uint *)(currentValue + 8) & 8) != 0) {\n      currentValue = get_data_08001cc4();\n      if (10 < (uint)(currentValue - startValue)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(currentValue + 8) = *(uint *)(currentValue + 8) | 4;\n    startValue = get_data_08001cc4();\n    while ((*(uint *)(*data + 8) & 4) != 0) {\n      currentValue = get_data_08001cc4();\n      if (10 < (uint)(currentValue - startValue)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    data[10] = data[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(data + 9) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002384": "check_and_update_data_08002384",
                "param_1": "data",
                "uVar1": "tempVar1",
                "iVar2": "result",
                "uVar3": "tempVar2",
                "iVar4": "startValue",
                "iVar5": "currentValue",
                "local_14": "loopCounter"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08003da4",
                "FUN_080020f0",
                "FUN_08001cc4",
                "FUN_08001f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002470": {
            "entrypoint": "0x08002470",
            "current_name": "update_parameter_08002470",
            "code": "\n\n\nvoid updateParameter_08002470(uint inputValue)\n\n{\n  _DAT_e000ed0c = (inputValue & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002470": "update_parameter_08002470",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08001c88",
                "FUN_08005f5e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002494": {
            "entrypoint": "0x08002494",
            "current_name": "update_memory_08002494",
            "code": "\n\n\nvoid updateMemory_08002494(uint address,uint value1,uint value2)\n\n{\n  uint shiftedBits;\n  uint remainingBits;\n  \n  shiftedBits = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  remainingBits = 7 - shiftedBits;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (shiftedBits + 4 < 7) {\n    shiftedBits = 0;\n  }\n  else {\n    shiftedBits = shiftedBits - 3;\n  }\n  shiftedBits = (value1 & (1 << (remainingBits & 0xff)) - 1U) << (shiftedBits & 0xff) |\n          (1 << (shiftedBits & 0xff)) - 1U & value2;\n  if ((int)address < 0) {\n    *(char *)((address & 0xf) + 0xe000ed14) = (char)(shiftedBits << 4);\n  }\n  else {\n    *(char *)(address + 0xe000e400) = (char)(shiftedBits << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002494": "update_memory_08002494",
                "param_1": "address",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "shiftedBits",
                "uVar2": "remainingBits"
            },
            "calling": [
                "FUN_08005510",
                "FUN_08005568",
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024f8": {
            "entrypoint": "0x080024f8",
            "current_name": "set_bit_080024f8",
            "code": "\nvoid setBit_080024f8(uint index)\n\n{\n  if (-1 < (int)index) {\n    *(int *)((index >> 5) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024f8": "set_bit_080024f8",
                "param_1": "index"
            },
            "calling": [
                "FUN_08005510",
                "FUN_08005568"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002514": {
            "entrypoint": "0x08002514",
            "current_name": "validate_input_08002514",
            "code": "\n\n\nundefined4 validate_input_08002514(int input_value)\n\n{\n  if (input_value - 1U < 0x1000000) {\n    _DAT_e000e014 = input_value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002514": "validate_input_08002514",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002540": {
            "entrypoint": "0x08002540",
            "current_name": "set_bit_in_array_08002540",
            "code": "\nvoid setBitInArray_08002540(uint index)\n\n{\n  if (-1 < (int)index) {\n    *(int *)(((index >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002540": "set_bit_in_array_08002540",
                "param_1": "index"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002560": {
            "entrypoint": "0x08002560",
            "current_name": "update_configuration_08002560",
            "code": "\n\n\nvoid updateConfiguration_08002560(int configParam)\n\n{\n  if (configParam != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002560": "update_configuration_08002560",
                "param_1": "configParam"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "FUNC_08002580",
            "code": "\nvoid FUNC_08002580(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002580": "FUNC_08002580"
            },
            "calling": [
                "FUN_08002582"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002582": {
            "entrypoint": "0x08002582",
            "current_name": "execute_initialization_08002582",
            "code": "\nvoid execute_initialization_08002582(void)\n\n{\n  FUNC_08002580();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002582": "execute_initialization_08002582"
            },
            "calling": [
                "FUN_08004b9e"
            ],
            "called": [
                "FUN_08002580"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800258c": {
            "entrypoint": "0x0800258c",
            "current_name": "initialize_data_0800258c",
            "code": "\n\n\nundefined4 initializeData_0800258c(uint **data)\n\n{\n  uint *ptrData;\n  \n  if (*(char *)((int)data + 0x21) != '\\x02') {\n    errorCode = (uint *)0x4;\n    return 1;\n  }\n  **data = **data & 0xfffffff1;\n  **data = **data & 0xfffffffe;\n  ptrData = *data;\n  if (ptrData == (uint *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (ptrData == (uint *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (ptrData == (uint *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (ptrData == (uint *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (ptrData == (uint *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (ptrData == (uint *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  *(undefined *)((int)data + 0x21) = 1;\n  *(undefined *)(data + 8) = 0;\n  if (callbackFunction != (uint *)0x0) {\n    (*(code *)callbackFunction)();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800258c": "initialize_data_0800258c",
                "param_1": "data",
                "puVar1": "ptrData",
                "param_1[0xe]": "errorCode",
                "param_1[0xd]": "callbackFunction"
            },
            "calling": [
                "FUN_0800316c",
                "FUN_080046b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002624": {
            "entrypoint": "0x08002624",
            "current_name": "update_configuration_08002624",
            "code": "\n\n\nvoid updateConfiguration_08002624(uint *configArray,uint *inputArray)\n\n{\n  uint *configPtr;\n  uint bitMask;\n  uint bitwiseResult;\n  uint index;\n  uint value;\n  uint updatedValue;\n  int tempVar1;\n  int tempVar2;\n  \n  updatedValue = 0;\n  index = 0;\n  do {\n    if (0xf < index) {\n      return;\n    }\n    bitMask = 1 << (index & 0xff);\n    bitwiseResult = *inputArray & bitMask;\n    if (bitMask == bitwiseResult) {\n      value = inputArray[1];\n      if (value == 0x12) {\n        updatedValue = inputArray[3] + 0xc;\n      }\n      else if (value < 0x13) {\n        if (value == 2) {\n          updatedValue = inputArray[3] + 8;\n        }\n        else if (value < 3) {\n          if (value == 0) goto LAB_08002776;\n          if (value == 1) {\n            updatedValue = inputArray[3];\n          }\n        }\n        else if (value == 3) {\n          updatedValue = 0;\n        }\n        else if (value == 0x11) {\n          updatedValue = inputArray[3] + 4;\n        }\n      }\n      else if (value == 0x10210000) {\nLAB_08002776:\n        if (inputArray[2] == 0) {\n          updatedValue = 4;\n        }\n        else if (inputArray[2] == 1) {\n          configArray[4] = bitMask;\n          updatedValue = 8;\n        }\n        else {\n          configArray[5] = bitMask;\n          updatedValue = 8;\n        }\n      }\n      else if (value < 0x10210001) {\n        if ((value == 0x10110000) || (value == 0x10120000)) goto LAB_08002776;\n      }\n      else if ((value == 0x10310000) || ((value == 0x10320000 || (value == 0x10220000))))\n      goto LAB_08002776;\n      bitMask = index;\n      configPtr = configArray;\n      if (0xff < bitwiseResult) {\n        bitMask = index - 8;\n        configPtr = configArray + 1;\n      }\n      *configPtr = *configPtr & ~(0xf << (bitMask << 2 & 0xff)) | updatedValue << (bitMask << 2 & 0xff);\n      if ((inputArray[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        tempVar1 = (index & 3) << 2;\n        if (configArray == (uint *)0x40010800) {\n          tempVar2 = 0;\n        }\n        else if (configArray == (uint *)0x40010c00) {\n          tempVar2 = 1;\n        }\n        else if (configArray == (uint *)0x40011000) {\n          tempVar2 = 2;\n        }\n        else if (configArray == (uint *)0x40011400) {\n          tempVar2 = 3;\n        }\n        else {\n          tempVar2 = 4;\n        }\n        *(uint *)(((index >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((index >> 2) + 2) * 4 + 0x40010000) & ~(0xf << tempVar1) | tempVar2 << tempVar1;\n        if ((inputArray[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bitwiseResult;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bitwiseResult;\n        }\n        if ((inputArray[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bitwiseResult;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bitwiseResult;\n        }\n        if ((inputArray[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bitwiseResult;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bitwiseResult;\n        }\n        if ((inputArray[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bitwiseResult;\n        }\n        else {\n          _DAT_4001040c = bitwiseResult | _DAT_4001040c;\n        }\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002624": "update_configuration_08002624",
                "param_1": "configArray",
                "param_2": "inputArray",
                "puVar1": "configPtr",
                "uVar2": "bitMask",
                "uVar3": "bitwiseResult",
                "uVar4": "index",
                "uVar5": "value",
                "uVar6": "updatedValue",
                "iVar7": "tempVar1",
                "iVar8": "tempVar2"
            },
            "calling": [
                "FUN_08004f4c",
                "FUN_08004974",
                "FUN_08004bb0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002810": {
            "entrypoint": "0x08002810",
            "current_name": "check_bit_flag_08002810",
            "code": "\nundefined4 check_bit_flag_08002810(int input_value,uint flag)\n\n{\n  if ((flag & *(uint *)(input_value + 8)) == 0) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002810": "check_bit_flag_08002810",
                "param_1": "input_value",
                "param_2": "flag"
            },
            "calling": [
                "FUN_08004c48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800281e": {
            "entrypoint": "0x0800281e",
            "current_name": "set_value_0800281e",
            "code": "\nvoid set_value_0800281e(int object_address,int new_value,int shift_flag)\n\n{\n  if (shift_flag == 0) {\n    *(int *)(object_address + 0x10) = new_value << 0x10;\n    return;\n  }\n  *(int *)(object_address + 0x10) = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800281e": "set_value_0800281e",
                "param_1": "object_address",
                "param_2": "new_value",
                "param_3": "shift_flag"
            },
            "calling": [
                "FUN_08004c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800282c": {
            "entrypoint": "0x0800282c",
            "current_name": "update_data_and_handle_0800282c",
            "code": "\n\n\nvoid update_data_and_handle_0800282c(uint data)\n\n{\n  if ((_DAT_40010414 & data) != 0) {\n    _DAT_40010414 = data;\n    process_pending_data();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800282c": "update_data_and_handle_0800282c",
                "param_1": "data",
                "check_and_handle_pending_data_080060e4": "process_pending_data"
            },
            "calling": [],
            "called": [
                "FUN_080060e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002848": {
            "entrypoint": "0x08002848",
            "current_name": "update_flags_based_on_criteria_08002848",
            "code": "\nundefined4 updateFlagsBasedOnCriteria_08002848(int *pParams)\n\n{\n  if (*(char *)((int)pParams + 0x3e) == '@') {\n    if (pParams[20] == 0) {\n      *(uint *)(*pParams + 0x10) = pParams[17] & 0xfe;\n    }\n    else {\n      *(uint *)(*pParams + 0x10) = pParams[17] & 0xffU | 1;\n    }\n  }\n  else if (pParams[4] == 0x4000) {\n    if (*(char *)((int)pParams + 0x3d) == '!') {\n      *(uint *)(*pParams + 0x10) = pParams[17] & 0xfe;\n    }\n    else {\n      *(uint *)(*pParams + 0x10) = pParams[17] & 0xffU | 1;\n    }\n  }\n  else if (pParams[20] == 0) {\n    *(uint *)(*pParams + 0x10) = (uint)(pParams[17] << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (pParams[20] == 1) {\n    *(uint *)(*pParams + 0x10) = (uint)(pParams[17] << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002848": "update_flags_based_on_criteria_08002848",
                "param_1": "pParams",
                "param_1[0x14]": "pParams[20]",
                "param_1[0x11]": "pParams[17]",
                "param_1[4]": "pParams[4]"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028d2": {
            "entrypoint": "0x080028d2",
            "current_name": "set_parameter_value_080028d2",
            "code": "\nundefined4 setParameterValue_080028d2(int *inputArray)\n\n{\n  *(uint *)(*inputArray + 0x10) = valueToSet & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028d2": "set_parameter_value_080028d2",
                "param_1": "inputArray",
                "param_1[0x11]": "valueToSet"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028de": {
            "entrypoint": "0x080028de",
            "current_name": "update_flags_080028de",
            "code": "\nundefined4 updateFlags_080028de(uint **params)\n\n{\n  uint *ptr;\n  \n  ptr = ptr8;\n  if ((*(char *)((int)params + 0x3d) == '\\\"') &&\n     ((ptr2 != (uint *)0x0 || (*(char *)((int)params + 0x3e) != '@')))) {\n    if ((ptr2 == (uint *)0x0) && (ptr3 == (uint *)0xc000)) {\n      **params = **params | 0x100;\n      ptr2 = (uint *)((int)ptr2 + 1);\n    }\n    else {\n      if (*(short *)((int)params + 0x2a) == 0) {\n        **params = **params | 0x200;\n      }\n      else if (*(short *)((int)params + 0x2a) == 1) {\n        if (ptr == (uint *)0xffff0000) {\n          **params = **params & 0xfffffbff;\n          ptr = *params;\n          if ((ptr[1] & 0x800) == 0) {\n            *ptr = *ptr | 0x200;\n          }\n          else {\n            *ptr = *ptr & 0xfffffbff;\n          }\n        }\n        else if (((ptr == (uint *)0x4) || (ptr == (uint *)0x8)) ||\n                (ptr7 == (uint *)0x12)) {\n          **params = **params & 0xfffffbff;\n          **params = **params | 0x200;\n        }\n        else if (ptr8 == (uint *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)params + 0x2a) == 2) {\n        if (ptr8 == (uint *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params | 0x800;\n          **params = **params & 0xfffffbff;\n        }\n        ptr = *params;\n        if ((ptr[1] & 0x800) != 0) {\n          ptr[1] = ptr[1] | 0x1000;\n        }\n      }\n      else {\n        **params = **params | 0x400;\n        ptr = *params;\n        if ((ptr[1] & 0x800) != 0) {\n          ptr[1] = ptr[1] | 0x1000;\n        }\n      }\n      ptr2 = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028de": "update_flags_080028de",
                "param_1": "params",
                "puVar1": "ptr",
                "param_1[0x14]": "ptr2",
                "param_1[4]": "ptr3",
                "param_1[0xc]": "ptr7",
                "param_1[0xb]": "ptr8"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ab8": {
            "entrypoint": "0x08002ab8",
            "current_name": "update_value_08002ab8",
            "code": "\nundefined4 update_value_08002ab8(int *data)\n\n{\n  byte *byte_ptr;\n  \n  if (*(short *)((int)data + 0x2a) != 0) {\n    byte_ptr = (byte *)ptr_to_data_9;\n    ptr_to_data_9 = (int)(byte_ptr + 1);\n    *(uint *)(*data + 0x10) = (uint)*byte_ptr;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ab8": "update_value_08002ab8",
                "param_1": "data",
                "pbVar1": "byte_ptr",
                "param_1[9]": "ptr_to_data_9"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "entrypoint": "0x08002ad8",
            "current_name": "update_array_element_08002ad8",
            "code": "\nundefined4 updateArrayElement_08002ad8(int *array)\n\n{\n  undefined *nextElement;\n  \n  if (*(short *)((int)array + 0x2a) != 0) {\n    nextElement = (undefined *)array[9];\n    array[9] = (int)(nextElement + 1);\n    *nextElement = (char)*(undefined4 *)(*array + 0x10);\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ad8": "update_array_element_08002ad8",
                "param_1": "array",
                "puVar1": "nextElement"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002af8": {
            "entrypoint": "0x08002af8",
            "current_name": "process_params_08002af8",
            "code": "\nundefined4 processParams_08002af8(uint **inputArray,uint *param1,int paramCount,uint *param2)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)inputArray + 0x3d) == '(') {\n    if (param1 == (uint *)0x0) {\n      result = 1;\n    }\n    else if (paramCount == 0) {\n      result = 1;\n    }\n    else if (*(char *)(inputArray + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(inputArray + 0xf) = 1;\n      ptr = *inputArray;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **inputArray = **inputArray & 0xfffff7ff;\n      *(undefined *)((int)inputArray + 0x3d) = 0x29;\n      *(undefined *)((int)inputArray + 0x3e) = 0x20;\n      result = 0;\n      outputArray = (uint *)0x0;\n      param1Array = param1;\n      *(short *)((int)inputArray + 0x2a) = (short)paramCount;\n      param2Array = param2;\n      *(undefined2 *)(inputArray + 10) = *(undefined2 *)((int)inputArray + 0x2a);\n      *(undefined *)(inputArray + 0xf) = 0;\n      (*inputArray)[1] = (*inputArray)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002af8": "process_params_08002af8",
                "param_1": "inputArray",
                "param_2": "param1",
                "param_3": "paramCount",
                "param_4": "param2",
                "uVar1": "result",
                "puVar2": "ptr",
                "param_1[0x10]": "outputArray",
                "param_1[9]": "param1Array",
                "param_1[0xb]": "param2Array"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b84": {
            "entrypoint": "0x08002b84",
            "current_name": "set_flag_and_values_08002b84",
            "code": "\nundefined4 setFlagAndValues_08002b84(uint **flagPtr,uint *paramPtr,int value,uint *dataPtr)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)flagPtr + 0x3d) == '(') {\n    if (paramPtr == (uint *)0x0) {\n      result = 1;\n    }\n    else if (value == 0) {\n      result = 1;\n    }\n    else if (*(char *)(flagPtr + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(flagPtr + 0xf) = 1;\n      ptr = *flagPtr;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **flagPtr = **flagPtr & 0xfffff7ff;\n      *(undefined *)((int)flagPtr + 0x3d) = 0x2a;\n      *(undefined *)((int)flagPtr + 0x3e) = 0x20;\n      result = 0;\n      flagPtr[0x10] = (uint *)0x0;\n      flagPtr[9] = paramPtr;\n      *(short *)((int)flagPtr + 0x2a) = (short)value;\n      flagPtr[0xb] = dataPtr;\n      *(undefined2 *)(flagPtr + 10) = *(undefined2 *)((int)flagPtr + 0x2a);\n      *(undefined *)(flagPtr + 0xf) = 0;\n      (*flagPtr)[1] = (*flagPtr)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002b84": "set_flag_and_values_08002b84",
                "param_1": "flagPtr",
                "param_2": "paramPtr",
                "param_3": "value",
                "param_4": "dataPtr",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c10": {
            "entrypoint": "0x08002c10",
            "current_name": "initialize_data_08002c10",
            "code": "\nundefined4 initializeData_08002c10(uint **dataPointer)\n\n{\n  uint *tempPointer;\n  \n  if (*(char *)((int)dataPointer + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)dataPointer + 0x3d) = 0x28;\n  tempPointer = *dataPointer;\n  if ((*tempPointer & 1) == 0) {\n    *tempPointer = *tempPointer | 1;\n  }\n  **dataPointer = **dataPointer | 0x400;\n  (*dataPointer)[1] = (*dataPointer)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002c10": "initialize_data_08002c10",
                "param_1": "dataPointer",
                "puVar1": "tempPointer"
            },
            "calling": [
                "FUN_08004ec4",
                "FUN_08004ef4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c4e": {
            "entrypoint": "0x08002c4e",
            "current_name": "FUNC_08002c4e",
            "code": "\nvoid FUNC_08002c4e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c4e": "FUNC_08002c4e"
            },
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c50": {
            "entrypoint": "0x08002c50",
            "current_name": "FUNC_08002c50",
            "code": "\nvoid FUNC_08002c50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c50": "FUNC_08002c50"
            },
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c52": {
            "entrypoint": "0x08002c52",
            "current_name": "FUNC_08002c52",
            "code": "\nvoid FUNC_08002c52(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c52": "FUNC_08002c52"
            },
            "calling": [
                "FUN_08002d1c",
                "FUN_08002c54"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c54": {
            "entrypoint": "0x08002c54",
            "current_name": "process_data_08002c54",
            "code": "\nundefined4 processData_08002c54(int *data)\n\n{\n  char character;\n  byte *bytePointer;\n  \n  character = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    bytePointer = (byte *)data[9];\n    data[9] = (int)(bytePointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*bytePointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (character == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_08002c52();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002c54": "process_data_08002c54",
                "param_1": "data",
                "cVar1": "character",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002c52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca4": {
            "entrypoint": "0x08002ca4",
            "current_name": "FUNC_08002ca4",
            "code": "\nvoid FUNC_08002ca4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ca4": "FUNC_08002ca4"
            },
            "calling": [
                "FUN_080032b4",
                "FUN_08002ca6"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca6": {
            "entrypoint": "0x08002ca6",
            "current_name": "process_data_08002ca6",
            "code": "\nundefined4 processData_08002ca6(int *dataArray)\n\n{\n  char character;\n  undefined *ptr;\n  \n  character = *(char *)((int)dataArray + 0x3d);\n  if (*(short *)((int)dataArray + 0x2a) != 0) {\n    ptr = (undefined *)dataPtr;\n    dataPtr = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*dataArray + 0x10);\n    *(short *)((int)dataArray + 0x2a) = *(short *)((int)dataArray + 0x2a) + -1;\n    if ((*(short *)((int)dataArray + 0x2a) == 0) && (character == '*')) {\n      *(uint *)(*dataArray + 4) = *(uint *)(*dataArray + 4) & 0xfffffbff;\n      intVar = 0x22;\n      *(undefined *)((int)dataArray + 0x3d) = 0x28;\n      FUNC_08002ca4();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ca6": "process_data_08002ca6",
                "param_1": "dataArray",
                "cVar1": "character",
                "puVar2": "ptr",
                "param_1[9]": "dataPtr",
                "param_1[0xc]": "intVar"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002ca4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cf2": {
            "entrypoint": "0x08002cf2",
            "current_name": "process_params_08002cf2",
            "code": "\nundefined4 processParams_08002cf2(int *paramArray,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined2 selectedValue;\n  uint valueFlag;\n  \n  valueFlag = *(uint *)(*paramArray + 0x18);\n  if ((valueFlag & 0x80) == 0) {\n    selectedValue = *(undefined2 *)(paramArray + 3);\n  }\n  else {\n    selectedValue = *(undefined2 *)(paramArray + 6);\n  }\n  process_params_function_08004e74(paramArray,(*(uint *)(*paramArray + 0x18) & 4) == 0,selectedValue,valueFlag,arg3);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002cf2": "process_params_08002cf2",
                "param_1": "paramArray",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uVar1": "selectedValue",
                "uVar2": "valueFlag"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08004e74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d1c": {
            "entrypoint": "0x08002d1c",
            "current_name": "handle_param_08002d1c",
            "code": "\nundefined4 handleParam_08002d1c(uint **parameter)\n\n{\n  if (((paramB == (uint *)0x4) || (paramB == (uint *)0x8)) &&\n     (*(char *)((int)parameter + 0x3d) == '(')) {\n    paramB = (uint *)0xffff0000;\n    (*parameter)[1] = (*parameter)[1] & 0xfffff8ff;\n    (*parameter)[5] = 0xfffffbff;\n    **parameter = **parameter & 0xfffffbff;\n    paramC = (uint *)0x0;\n    *(undefined *)((int)parameter + 0x3d) = 0x20;\n    *(undefined *)((int)parameter + 0x3e) = 0;\n    initialize_and_execute_08004ec4();\n  }\n  else if (*(char *)((int)parameter + 0x3d) == '!') {\n    paramB = (uint *)0xffff0000;\n    paramC = (uint *)0x21;\n    *(undefined *)((int)parameter + 0x3d) = 0x20;\n    *(undefined *)((int)parameter + 0x3e) = 0;\n    (*parameter)[1] = (*parameter)[1] & 0xfffff8ff;\n    (*parameter)[5] = 0xfffffbff;\n    **parameter = **parameter & 0xfffffbff;\n    FUNC_08002c52();\n  }\n  else {\n    (*parameter)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002d1c": "handle_param_08002d1c",
                "param_1": "parameter",
                "param_1[0xb]": "paramB",
                "param_1[0xc]": "paramC"
            },
            "calling": [
                "FUN_08003520"
            ],
            "called": [
                "FUN_08002c52",
                "FUN_08004ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002db0": {
            "entrypoint": "0x08002db0",
            "current_name": "FUNC_08002db0",
            "code": "\nvoid FUNC_08002db0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002db0": "FUNC_08002db0"
            },
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002db2": {
            "entrypoint": "0x08002db2",
            "current_name": "process_parameter_08002db2",
            "code": "\nundefined4 processParameter_08002db2(uint **parameter)\n\n{\n  char charValue;\n  uint *pointerValue;\n  \n  charValue = *(char *)((int)parameter + 0x3d);\n  pointerValue = parameter[0xb];\n  if ((*(short *)(parameter + 10) == 0) && (charValue == '!')) {\n    if ((pointerValue == (uint *)0x4) || ((pointerValue == (uint *)0x8 || (pointerValue == (uint *)0xffff0000)))) {\n      (*parameter)[1] = (*parameter)[1] & 0xfffff8ff;\n      **parameter = **parameter | 0x200;\n      parameter[0xc] = (uint *)0x0;\n      *(undefined *)((int)parameter + 0x3d) = 0x20;\n      if (*(char *)((int)parameter + 0x3e) == '@') {\n        *(undefined *)((int)parameter + 0x3e) = 0;\n        FUNC_08002db0();\n      }\n      else {\n        *(undefined *)((int)parameter + 0x3e) = 0;\n        FUNC_08002c4e();\n      }\n    }\n    else {\n      (*parameter)[1] = (*parameter)[1] & 0xfffff8ff;\n      parameter[0xc] = (uint *)0x11;\n      *(undefined *)((int)parameter + 0x3e) = 0;\n      *(undefined *)((int)parameter + 0x3d) = 0x20;\n      FUNC_08002c4e();\n    }\n  }\n  else if ((charValue == '!') || ((*(char *)((int)parameter + 0x3e) == '@' && (charValue == '\\\"')))) {\n    if (*(short *)((int)parameter + 0x2a) == 0) {\n      (*parameter)[1] = (*parameter)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)parameter + 0x3e) == '@') {\n      if (parameter[0x14] == (uint *)0x0) {\n        if (parameter[0x13] == (uint *)0x1) {\n          (*parameter)[4] = (uint)parameter[0x12] & 0xff;\n          parameter[0x14] = (uint *)((int)parameter[0x14] + 2);\n        }\n        else {\n          (*parameter)[4] = (uint)((int)parameter[0x12] << 0x10) >> 0x18;\n          parameter[0x14] = (uint *)((int)parameter[0x14] + 1);\n        }\n      }\n      else if (parameter[0x14] == (uint *)0x1) {\n        (*parameter)[4] = (uint)parameter[0x12] & 0xff;\n        parameter[0x14] = (uint *)((int)parameter[0x14] + 1);\n      }\n      else if (parameter[0x14] == (uint *)0x2) {\n        if (*(char *)((int)parameter + 0x3d) == '\\\"') {\n          **parameter = **parameter | 0x100;\n        }\n        else if (*(char *)((int)parameter + 0x3d) == '!') {\n          pointerValue = parameter[9];\n          parameter[9] = (uint *)((int)pointerValue + 1);\n          (*parameter)[4] = (uint)*(byte *)pointerValue;\n          *(short *)((int)parameter + 0x2a) = *(short *)((int)parameter + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      pointerValue = parameter[9];\n      parameter[9] = (uint *)((int)pointerValue + 1);\n      (*parameter)[4] = (uint)*(byte *)pointerValue;\n      *(short *)((int)parameter + 0x2a) = *(short *)((int)parameter + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002db2": "process_parameter_08002db2",
                "param_1": "parameter",
                "cVar1": "charValue",
                "puVar2": "pointerValue"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002db0",
                "FUN_08002c4e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efc": {
            "entrypoint": "0x08002efc",
            "current_name": "process_input_08002efc",
            "code": "\nundefined4 process_input_08002efc(uint **input_params)\n\n{\n  uint *pointer;\n  \n  pointer = input_params[0xb];\n  if (*(char *)((int)input_params + 0x3d) == '!') {\n    if (*(short *)((int)input_params + 0x2a) == 0) {\n      if (((pointer == (uint *)0x4) || (pointer == (uint *)0x8)) || (pointer == (uint *)0xffff0000)) {\n        (*input_params)[1] = (*input_params)[1] & 0xfffff8ff;\n        **input_params = **input_params | 0x200;\n        status = (uint *)0x0;\n        *(undefined *)((int)input_params + 0x3d) = 0x20;\n        if (*(char *)((int)input_params + 0x3e) == '@') {\n          *(undefined *)((int)input_params + 0x3e) = 0;\n          FUNC_08002db0();\n        }\n        else {\n          *(undefined *)((int)input_params + 0x3e) = 0;\n          FUNC_08002c4e();\n        }\n      }\n      else {\n        (*input_params)[1] = (*input_params)[1] & 0xfffff8ff;\n        status = (uint *)0x11;\n        *(undefined *)((int)input_params + 0x3e) = 0;\n        *(undefined *)((int)input_params + 0x3d) = 0x20;\n        FUNC_08002c4e();\n      }\n    }\n    else {\n      pointer = input_params[9];\n      input_params[9] = (uint *)((int)pointer + 1);\n      (*input_params)[4] = (uint)*(byte *)pointer;\n      *(short *)((int)input_params + 0x2a) = *(short *)((int)input_params + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002efc": "process_input_08002efc",
                "param_1": "input_params",
                "puVar1": "pointer",
                "param_1[0xc]": "status"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002db0",
                "FUN_08002c4e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f9a": {
            "entrypoint": "0x08002f9a",
            "current_name": "FUNC_08002f9a",
            "code": "\nvoid FUNC_08002f9a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f9a": "FUNC_08002f9a"
            },
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002f9c": {
            "entrypoint": "0x08002f9c",
            "current_name": "update_permissions_08002f9c",
            "code": "\nundefined4 updatePermissions_08002f9c(uint **parameters)\n\n{\n  uint *tempVar;\n  \n  if (*(char *)((int)parameters + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)parameters + 0x2a) < 4) {\n      if (*(ushort *)((int)parameters + 0x2a) - 2 < 2) {\n        if (param1Element11 == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x800;\n        }\n        (*parameters)[1] = (*parameters)[1] & 0xfffffbff;\n      }\n      else {\n        if (param1Element11 == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n        (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n        tempVar = param1Element9;\n        param1Element9 = (uint *)((int)tempVar + 1);\n        *(char *)tempVar = (char)(*parameters)[4];\n        *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        param1Element12 = (uint *)0x0;\n        if (*(char *)((int)parameters + 0x3e) == '@') {\n          *(undefined *)((int)parameters + 0x3e) = 0;\n          FUNC_08002f9a();\n        }\n        else {\n          *(undefined *)((int)parameters + 0x3e) = 0;\n          FUNC_08002c50();\n        }\n      }\n    }\n    else {\n      tempVar = param1Element9;\n      param1Element9 = (uint *)((int)tempVar + 1);\n      *(char *)tempVar = (char)(*parameters)[4];\n      *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f9c": "update_permissions_08002f9c",
                "param_1": "parameters",
                "puVar1": "tempVar",
                "param_1[0xb]": "param1Element11",
                "param_1[0xc]": "param1Element12",
                "param_1[9]": "param1Element9"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002f9a",
                "FUN_08002c50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800306c": {
            "entrypoint": "0x0800306c",
            "current_name": "update_flags_and_state_0800306c",
            "code": "\nundefined4 updateFlagsAndState_0800306c(uint **inputParams)\n\n{\n  uint *ptrVar1;\n  \n  ptrVar1 = inputParams[0xb];\n  if (*(short *)((int)inputParams + 0x2a) == 3) {\n    if (((ptrVar1 == (uint *)0x4) || (ptrVar1 == (uint *)0x8)) || (ptrVar1 == (uint *)0xffff0000)) {\n      **inputParams = **inputParams & 0xfffffbff;\n    }\n    ptrVar1 = inputParams[9];\n    inputParams[9] = (uint *)((int)ptrVar1 + 1);\n    *(char *)ptrVar1 = (char)(*inputParams)[4];\n    *(short *)((int)inputParams + 0x2a) = *(short *)((int)inputParams + 0x2a) + -1;\n  }\n  else if (*(short *)((int)inputParams + 0x2a) == 2) {\n    if (((ptrVar1 == (uint *)0x4) || (ptrVar1 == (uint *)0x8)) || (ptrVar1 == (uint *)0xffff0000)) {\n      (*inputParams)[1] = (*inputParams)[1] & 0xfffffcff;\n      **inputParams = **inputParams | 0x200;\n    }\n    else {\n      if (ptrVar1 == (uint *)0x2) {\n        **inputParams = **inputParams | 0x400;\n      }\n      else {\n        **inputParams = **inputParams & 0xfffffbff;\n      }\n      (*inputParams)[1] = (*inputParams)[1] & 0xfffffcff;\n    }\n    ptrVar1 = inputParams[9];\n    inputParams[9] = (uint *)((int)ptrVar1 + 1);\n    *(char *)ptrVar1 = (char)(*inputParams)[4];\n    *(short *)((int)inputParams + 0x2a) = *(short *)((int)inputParams + 0x2a) + -1;\n    ptrVar1 = inputParams[9];\n    inputParams[9] = (uint *)((int)ptrVar1 + 1);\n    *(char *)ptrVar1 = (char)(*inputParams)[4];\n    *(short *)((int)inputParams + 0x2a) = *(short *)((int)inputParams + 0x2a) + -1;\n    *(undefined *)((int)inputParams + 0x3d) = 0x20;\n    inputParams[0xc] = (uint *)0x0;\n    if (*(char *)((int)inputParams + 0x3e) == '@') {\n      *(undefined *)((int)inputParams + 0x3e) = 0;\n      FUNC_08002f9a();\n    }\n    else {\n      *(undefined *)((int)inputParams + 0x3e) = 0;\n      FUNC_08002c50();\n    }\n  }\n  else {\n    ptrVar1 = inputParams[9];\n    inputParams[9] = (uint *)((int)ptrVar1 + 1);\n    *(char *)ptrVar1 = (char)(*inputParams)[4];\n    *(short *)((int)inputParams + 0x2a) = *(short *)((int)inputParams + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800306c": "update_flags_and_state_0800306c",
                "param_1": "inputParams",
                "puVar1": "ptrVar1"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002f9a",
                "FUN_08002c50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800316a": {
            "entrypoint": "0x0800316a",
            "current_name": "FUNC_0800316a",
            "code": "\nvoid FUNC_0800316a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316a": "FUNC_0800316a"
            },
            "calling": [
                "FUN_0800316c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800316c": {
            "entrypoint": "0x0800316c",
            "current_name": "initialize_data_0800316c",
            "code": "\nvoid initializeData_0800316c(uint **parameter1)\n\n{\n  int returnValue;\n  uint *pointerVar2;\n  uint *pointerVar3;\n  \n  if (*(byte *)((int)parameter1 + 0x3d) - 0x29 < 2) {\n    parameter1[0xc] = (uint *)0x0;\n    *(undefined *)((int)parameter1 + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)parameter1 + 0x3d) != '`') && (((*parameter1)[1] & 0x800) == 0)) {\n      *(undefined *)((int)parameter1 + 0x3d) = 0x20;\n    }\n    parameter1[0xc] = (uint *)0x0;\n    *(undefined *)((int)parameter1 + 0x3e) = 0;\n  }\n  **parameter1 = **parameter1 & 0xfffff7ff;\n  pointerVar3 = *parameter1;\n  if ((pointerVar3[1] & 0x800) == 0) {\n    if (*(char *)((int)parameter1 + 0x3d) == '`') {\n      *(undefined *)((int)parameter1 + 0x3d) = 0x20;\n      parameter1[0x10] = (uint *)0x0;\n      if ((pointerVar3[5] & 0x40) != 0) {\n        pointerVar2 = parameter1[9];\n        parameter1[9] = (uint *)((int)pointerVar2 + 1);\n        *(char *)pointerVar2 = (char)pointerVar3[4];\n      }\n      **parameter1 = **parameter1 & 0xfffffffe;\n      FUNC_0800316a(parameter1);\n    }\n    else {\n      if ((pointerVar3[5] & 0x40) != 0) {\n        pointerVar2 = parameter1[9];\n        parameter1[9] = (uint *)((int)pointerVar2 + 1);\n        *(char *)pointerVar2 = (char)pointerVar3[4];\n      }\n      initialize_if_data_not_initialized_08004ef4(parameter1);\n    }\n  }\n  else {\n    pointerVar3[1] = pointerVar3[1] & 0xfffff7ff;\n    if (*(char *)((int)parameter1[0xd] + 0x21) == '\\x01') {\n      parameter1[0xe][0xd] = (uint)&LAB_080035fc_1;\n      returnValue = initialize_data_0800258c(parameter1[0xe]);\n      if (returnValue != 0) {\n        if (((*parameter1)[5] & 0x40) != 0) {\n          pointerVar3 = parameter1[9];\n          parameter1[9] = (uint *)((int)pointerVar3 + 1);\n          *(char *)pointerVar3 = (char)(*parameter1)[4];\n        }\n        **parameter1 = **parameter1 & 0xfffffffe;\n        *(undefined *)((int)parameter1 + 0x3d) = 0x20;\n        (*(code *)parameter1[0xe][0xd])();\n      }\n    }\n    else {\n      parameter1[0xd][0xd] = (uint)&LAB_080035fc_1;\n      returnValue = initialize_data_0800258c(parameter1[0xd]);\n      if (returnValue != 0) {\n        **parameter1 = **parameter1 & 0xfffffffe;\n        *(undefined *)((int)parameter1 + 0x3d) = 0x20;\n        (*(code *)parameter1[0xd][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)parameter1 + 0x3d) == '(') && (((uint)parameter1[0x10] & 4) != 0)) {\n    parameter1[0xb] = (uint *)0xffff0000;\n    parameter1[0xc] = (uint *)0x0;\n    *(undefined *)((int)parameter1 + 0x3d) = 0x20;\n    *(undefined *)((int)parameter1 + 0x3e) = 0;\n    initialize_and_execute_08004ec4(parameter1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316c": "initialize_data_0800316c",
                "param_1": "parameter1",
                "iVar1": "returnValue",
                "puVar2": "pointerVar2",
                "puVar3": "pointerVar3"
            },
            "calling": [
                "FUN_08003520",
                "FUN_080032b4"
            ],
            "called": [
                "FUN_08004ec4",
                "FUN_08004ef4",
                "FUN_0800258c",
                "FUN_0800316a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032b4": {
            "entrypoint": "0x080032b4",
            "current_name": "reconfigure_flags_080032b4",
            "code": "\nundefined4 reconfigureFlags_080032b4(uint **flags)\n\n{\n  char charVar;\n  uint *pointerVar1;\n  uint *pointerVar2;\n  \n  charVar = *(char *)((int)flags + 0x3d);\n  (*flags)[1] = (*flags)[1] & 0xfffff8ff;\n  **flags = **flags | 1;\n  **flags = **flags & 0xfffffbff;\n  pointerVar1 = *flags;\n  if ((pointerVar1[1] & 0x800) != 0) {\n    if ((*(char *)((int)flags + 0x3d) == '\\\"') || (*(char *)((int)flags + 0x3d) == '*')) {\n      *(short *)((int)flags + 0x2a) = (short)*(undefined4 *)(*flags[0xe] + 4);\n    }\n    else {\n      *(short *)((int)flags + 0x2a) = (short)*(undefined4 *)(*flags[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)flags + 0x2a) != 0) {\n    if ((pointerVar1[5] & 4) != 0) {\n      pointerVar2 = flags[9];\n      flags[9] = (uint *)((int)pointerVar2 + 1);\n      *(char *)pointerVar2 = (char)pointerVar1[4];\n      *(short *)((int)flags + 0x2a) = *(short *)((int)flags + 0x2a) + -1;\n    }\n    if (((*flags)[5] & 0x40) != 0) {\n      pointerVar1 = flags[9];\n      flags[9] = (uint *)((int)pointerVar1 + 1);\n      *(char *)pointerVar1 = (char)(*flags)[4];\n      *(short *)((int)flags + 0x2a) = *(short *)((int)flags + 0x2a) + -1;\n    }\n    flags[0x10] = (uint *)((uint)flags[0x10] | 4);\n  }\n  if (flags[0x10] == (uint *)0x0) {\n    if (((charVar == '(') || (charVar == '*')) || (charVar == ')')) {\n      flags[0xb] = (uint *)0xffff0000;\n      flags[0xc] = (uint *)0x0;\n      *(undefined *)((int)flags + 0x3d) = 0x20;\n      *(undefined *)((int)flags + 0x3e) = 0;\n      initialize_and_execute_08004ec4();\n    }\n    else if ((flags[0xc] == (uint *)0x22) || (charVar == '\\\"')) {\n      flags[0xc] = (uint *)0x0;\n      *(undefined *)((int)flags + 0x3d) = 0x20;\n      *(undefined *)((int)flags + 0x3e) = 0;\n      FUNC_08002ca4();\n    }\n  }\n  else {\n    initialize_data_0800316c();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080032b4": "reconfigure_flags_080032b4",
                "param_1": "flags",
                "cVar1": "charVar",
                "puVar2": "pointerVar1",
                "puVar3": "pointerVar2"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002ca4",
                "FUN_0800316c",
                "FUN_08004ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033b8": {
            "entrypoint": "0x080033b8",
            "current_name": "process_data_080033b8",
            "code": "\nvoid process_data_080033b8(int *data)\n\n{\n  int data_ptr;\n  uint flags;\n  uint criteria;\n  uint permissions;\n  \n  data_ptr = *data;\n  permissions = *(uint *)(data_ptr + 0x18);\n  flags = *(uint *)(data_ptr + 0x14);\n  criteria = *(uint *)(data_ptr + 4);\n  if ((*(char *)((int)data + 0x3e) == '\\x10') || (*(char *)((int)data + 0x3e) == '@')) {\n    if (((flags & 0x10001) == 0) || ((criteria & 0x200) == 0)) {\n      if (((flags & 0x10008) == 0) || ((criteria & 0x200) == 0)) {\n        if (((flags & 0x10002) != 0) && ((criteria & 0x200) != 0)) {\n          update_flags_080028de(data);\n        }\n      }\n      else {\n        set_parameter_value_080028d2(data);\n      }\n    }\n    else {\n      update_flags_based_on_criteria_08002848(data);\n    }\n    if ((permissions & 0x100004) == 0) {\n      if ((((flags & 0x10040) != 0) && ((criteria & 0x400) != 0)) && ((flags & 0x10004) == 0)) {\n        update_permissions_08002f9c(data);\n        return;\n      }\n      if (((flags & 0x10004) != 0) && ((criteria & 0x200) != 0)) {\n        update_flags_and_state_0800306c(data);\n        return;\n      }\n    }\n    else {\n      if ((((flags & 0x10080) != 0) && ((criteria & 0x400) != 0)) && ((flags & 0x10004) == 0)) {\n        process_parameter_08002db2(data);\n        return;\n      }\n      if (((flags & 0x10004) != 0) && ((criteria & 0x200) != 0)) {\n        process_input_08002efc(data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flags & 0x10002) != 0) && ((criteria & 0x200) != 0)) {\n      process_params_08002cf2();\n      return;\n    }\n    if (((flags & 0x10010) != 0) && ((criteria & 0x200) != 0)) {\n      reconfigure_flags_080032b4(data);\n      return;\n    }\n    if ((permissions & 0x100004) == 0) {\n      if ((((flags & 0x10040) != 0) && ((criteria & 0x400) != 0)) && ((flags & 0x10004) == 0)) {\n        process_data_080033b8_08002ca6(data);\n        return;\n      }\n      if (((flags & 0x10004) != 0) && ((criteria & 0x200) != 0)) {\n        update_array_element_08002ad8(data);\n      }\n    }\n    else {\n      if ((((flags & 0x10080) != 0) && ((criteria & 0x400) != 0)) && ((flags & 0x10004) == 0)) {\n        process_data_080033b8_08002c54(data);\n        return;\n      }\n      if (((flags & 0x10004) != 0) && ((criteria & 0x200) != 0)) {\n        update_value_08002ab8(data);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033b8": "process_data_080033b8",
                "param_1": "data",
                "iVar1": "data_ptr",
                "uVar2": "flags",
                "uVar3": "criteria",
                "uVar4": "permissions"
            },
            "calling": [],
            "called": [
                "FUN_08002db2",
                "FUN_080028de",
                "FUN_08002f9c",
                "FUN_08002c54",
                "FUN_08002cf2",
                "FUN_0800306c",
                "FUN_08002ab8",
                "FUN_08002ad8",
                "FUN_08002848",
                "FUN_08002efc",
                "FUN_080032b4",
                "FUN_080028d2",
                "FUN_08002ca6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003520": {
            "entrypoint": "0x08003520",
            "current_name": "update_status_08003520",
            "code": "\nvoid updateStatus_08003520(uint **inputParams)\n\n{\n  char charValue;\n  uint *ptrToInputParams;\n  uint value1;\n  uint value2;\n  \n  ptrToInputParams = *inputParams;\n  value1 = ptrToInputParams[5];\n  value2 = ptrToInputParams[1];\n  if (((value1 & 0x10100) != 0) && ((value2 & 0x100) != 0)) {\n    inputParams[0x10] = (uint *)((uint)inputParams[0x10] | 1);\n    ptrToInputParams[5] = 0xfffffeff;\n    **inputParams = **inputParams | 0x8000;\n  }\n  if (((value1 & 0x10200) != 0) && ((value2 & 0x100) != 0)) {\n    inputParams[0x10] = (uint *)((uint)inputParams[0x10] | 2);\n    (*inputParams)[5] = 0xfffffdff;\n  }\n  if (((value1 & 0x10400) != 0) && ((value2 & 0x100) != 0)) {\n    charValue = *(char *)((int)inputParams + 0x3d);\n    if (((*(char *)((int)inputParams + 0x3e) == ' ') && (*(short *)((int)inputParams + 0x2a) == 0)) &&\n       (((charValue == '!' || (charValue == ')')) || ((charValue == '(' && (inputParams[0xc] == (uint *)0x21)))))) {\n      handle_param_08002d1c(inputParams);\n    }\n    else {\n      inputParams[0x10] = (uint *)((uint)inputParams[0x10] | 4);\n      if (*(char *)((int)inputParams + 0x3e) == '\\x10') {\n        **inputParams = **inputParams | 0x200;\n      }\n      (*inputParams)[5] = 0xfffffbff;\n    }\n  }\n  if (((value1 & 0x10800) != 0) && ((value2 & 0x100) != 0)) {\n    inputParams[0x10] = (uint *)((uint)inputParams[0x10] | 8);\n    (*inputParams)[5] = 0xfffff7ff;\n  }\n  if (inputParams[0x10] != (uint *)0x0) {\n    initialize_data_0800316c(inputParams);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003520": "update_status_08003520",
                "param_1": "inputParams",
                "cVar1": "charValue",
                "puVar2": "ptrToInputParams",
                "uVar3": "value1",
                "uVar4": "value2"
            },
            "calling": [],
            "called": [
                "FUN_0800316c",
                "FUN_08002d1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800365c": {
            "entrypoint": "0x0800365c",
            "current_name": "delay_function_0800365c",
            "code": "\nvoid delayFunction_0800365c(int delayTime)\n\n{\n  bool continueLoop;\n  int iterationCount;\n  \n  iterationCount = delayTime * (DAT_20000084 / 8000);\n  do {\n    continueLoop = iterationCount != 0;\n    iterationCount = iterationCount + -1;\n  } while (continueLoop);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800365c": "delay_function_0800365c",
                "param_1": "delayTime",
                "local_4": "iterationCount",
                "bVar1": "continueLoop"
            },
            "calling": [
                "FUN_08003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003688": {
            "entrypoint": "0x08003688",
            "current_name": "check_and_adjust_parameters_08003688",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 check_and_adjust_parameters_08003688(uint *param_1)\n\n{\n  int start_time;\n  int current_time;\n  undefined4 result;\n  uint param_1_value;\n  bool flag;\n  \n  if ((*param_1 & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      param_1_value = param_1[1];\n      if (param_1_value == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (param_1_value == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (param_1_value == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (param_1[1] == 0) {\n        start_time = get_current_time();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          current_time = get_current_time();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        start_time = get_current_time();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          current_time = get_current_time();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | param_1[5] << 3;\n    }\n    else if (param_1[4] == 0) {\n      _DAT_42420000 = 0;\n      start_time = get_current_time();\n      while ((_DAT_40021000 & 2) != 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      start_time = get_current_time();\n      while ((_DAT_40021000 & 2) == 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | param_1[5] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      _DAT_42420480 = 0;\n      start_time = get_current_time();\n      while ((_DAT_40021024 & 2) != 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      start_time = get_current_time();\n      while ((_DAT_40021024 & 2) == 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      delay_execution(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    flag = (_DAT_4002101c & 0x10000000) == 0;\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      start_time = get_current_time();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current_time = get_current_time();\n        if (100 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    param_1_value = param_1[3];\n    if (param_1_value == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (param_1_value == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (param_1_value == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (param_1[3] == 0) {\n      start_time = get_current_time();\n      while ((_DAT_40021020 & 2) != 0) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      start_time = get_current_time();\n      while ((_DAT_40021020 & 2) == 0) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (param_1[7] == 2) {\n    _DAT_42420060 = 0;\n    start_time = get_current_time();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | param_1[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | param_1[8] | param_1[9];\n        _DAT_42420060 = 1;\n        start_time = get_current_time();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          current_time = get_current_time();\n        } while ((uint)(current_time - start_time) < 3);\n        return 3;\n      }\n      current_time = get_current_time();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    start_time = get_current_time();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      current_time = get_current_time();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003688": "check_and_adjust_parameters_08003688",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "result",
                "uVar4": "param_1_value",
                "bVar5": "flag",
                "get_data_08001cc4": "get_current_time",
                "delay_function_0800365c": "delay_execution"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_0800365c",
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a68": {
            "entrypoint": "0x08003a68",
            "current_name": "calculate_delay_08003a68",
            "code": "\n\n\nuint calculateDelay_08003a68(void)\n\n{\n  uint delayResult;\n  undefined2 delayValue;\n  undefined4 configValue;\n  undefined4 factor1;\n  undefined4 factor2;\n  undefined4 constValue;\n  \n  constValue = 0x10100f0e;\n  factor2 = 0xd0c0b0a;\n  factor1 = 0x9080706;\n  configValue = 0x5040302;\n  delayValue = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    delayResult = (uint)*(byte *)((int)&configValue + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      delayResult = delayResult * 4000000;\n    }\n    else {\n      delayResult = (delayResult * 8000000) /\n              (uint)*(byte *)((int)&delayValue - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    delayResult = 8000000;\n  }\n  return delayResult;\n}\n\n",
            "renaming": {
                "FUN_08003a68": "calculate_delay_08003a68",
                "local_1c": "delayValue",
                "uStack_18": "configValue",
                "uStack_14": "factor1",
                "uStack_10": "factor2",
                "uStack_c": "constValue",
                "uVar1": "delayResult"
            },
            "calling": [
                "FUN_08003afa"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ad4": {
            "entrypoint": "0x08003ad4",
            "current_name": "initialize_memory_08003ad4",
            "code": "\n\n\nundefined4 initializeMemory_08003ad4(uint *memoryConfig,uint configuredSize)\n\n{\n  int iVar1;\n  int iVar2;\n  uint delay;\n  \n  if ((_DAT_40022000 & 7) < configuredSize) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | configuredSize;\n    if (configuredSize != (configuredSize & 7)) {\n      return 1;\n    }\n  }\n  if ((*memoryConfig & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | memoryConfig[2];\n  }\n  if ((*memoryConfig & 1) != 0) {\n    delay = memoryConfig[1];\n    if (delay == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((delay != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = delay | _DAT_40021004 & 0xfffffffc;\n    iVar1 = getDataValue();\n    if (memoryConfig[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        iVar2 = getDataValue();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else if (memoryConfig[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        iVar2 = getDataValue();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        iVar2 = getDataValue();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (configuredSize < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | configuredSize;\n    if (configuredSize != (configuredSize & 7)) {\n      return 1;\n    }\n  }\n  if ((*memoryConfig & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | memoryConfig[3];\n  }\n  if ((*memoryConfig & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | memoryConfig[4] << 3;\n  }\n  delay = calculateDelay();\n  DAT_20000084 = delay >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c];\n  validateAndUpdateMemory(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003ad4": "initialize_memory_08003ad4",
                "param_1": "memoryConfig",
                "param_2": "configuredSize",
                "uVar3": "delay",
                "get_data_08001cc4": "getDataValue",
                "calculate_delay_08003a68": "calculateDelay",
                "validate_and_update_memory_08001c3c": "validateAndUpdateMemory"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08003afa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003afa": {
            "entrypoint": "0x08003afa",
            "current_name": "initialize_system_08003afa",
            "code": "\n\n\nundefined4 initializeSystem_08003afa(uint *systemFlags,uint memorySize)\n\n{\n  int initialValue;\n  int currentValue;\n  uint delay;\n  \n  if ((*systemFlags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | systemFlags[2];\n  }\n  if ((*systemFlags & 1) != 0) {\n    delay = systemFlags[1];\n    if (delay == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((delay != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = delay | _DAT_40021004 & 0xfffffffc;\n    initialValue = getCurrentValue();\n    if (systemFlags[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        currentValue = getCurrentValue();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else if (systemFlags[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        currentValue = getCurrentValue();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        currentValue = getCurrentValue();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (memorySize < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | memorySize;\n    if (memorySize != (memorySize & 7)) {\n      return 1;\n    }\n  }\n  if ((*systemFlags & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | systemFlags[3];\n  }\n  if ((*systemFlags & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | systemFlags[4] << 3;\n  }\n  delay = calculateDelay();\n  DAT_20000084 = delay >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c];\n  validateAndUpdateMemory(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003afa": "initialize_system_08003afa",
                "param_1": "systemFlags",
                "param_2": "memorySize",
                "iVar1": "initialValue",
                "iVar2": "currentValue",
                "uVar3": "delay",
                "get_data_08001cc4": "getCurrentValue",
                "calculate_delay_08003a68": "calculateDelay",
                "validate_and_update_memory_08001c3c": "validateAndUpdateMemory"
            },
            "calling": [
                "FUN_08003ad4"
            ],
            "called": [
                "FUN_08003a68",
                "FUN_08001cc4",
                "FUN_08001c3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c44": {
            "entrypoint": "0x08003c44",
            "current_name": "get_data_value_08003c44",
            "code": "\nundefined4 get_data_value_08003c44(void)\n\n{\n  return DAT_20000084;\n}\n\n",
            "renaming": {
                "FUN_08003c44": "get_data_value_08003c44"
            },
            "calling": [
                "FUN_08003c50",
                "FUN_08001b48",
                "FUN_08003c70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c50": {
            "entrypoint": "0x08003c50",
            "current_name": "get_shifted_data_value_08003c50",
            "code": "\n\n\nuint get_shifted_data_value_08003c50(void)\n\n{\n  uint dataValue;\n  \n  dataValue = get_data_value();\n  return dataValue >> (&DAT_0800773c)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08003c50": "get_shifted_data_value_08003c50",
                "uVar1": "dataValue",
                "get_data_value_08003c44": "get_data_value"
            },
            "calling": [
                "FUN_08004204"
            ],
            "called": [
                "FUN_08003c44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c70": {
            "entrypoint": "0x08003c70",
            "current_name": "get_shifted_data_08003c70",
            "code": "\n\n\nuint get_shifted_data_08003c70(void)\n\n{\n  uint data_value;\n  \n  data_value = get_data_value_08003c44();\n  return data_value >> (&DAT_0800773c)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08003c70": "get_shifted_data_08003c70",
                "uVar1": "data_value"
            },
            "calling": [
                "FUN_08004204",
                "FUN_08003da4"
            ],
            "called": [
                "FUN_08003c44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c90": {
            "entrypoint": "0x08003c90",
            "current_name": "initialize_device_08003c90",
            "code": "\n\n\nundefined4 initializeDevice_08003c90(uint *deviceSettings)\n\n{\n  uint tempVar1;\n  uint tempVar2;\n  int previousValue1;\n  int previousValue2;\n  bool isFlagSet;\n  \n  if ((*deviceSettings & 1) != 0) {\n    isFlagSet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      previousValue1 = get_data_08001cc4();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        previousValue2 = get_data_08001cc4();\n        if (100 < (uint)(previousValue2 - previousValue1)) {\n          return 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (deviceSettings[1] & 0x300))) {\n      tempVar2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      tempVar1 = _DAT_40021020 & 1;\n      _DAT_40021020 = tempVar2;\n      if (tempVar1 != 0) {\n        previousValue1 = get_data_08001cc4();\n        while ((_DAT_40021020 & 2) == 0) {\n          previousValue2 = get_data_08001cc4();\n          if (5000 < (uint)(previousValue2 - previousValue1)) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | deviceSettings[1];\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*deviceSettings & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | deviceSettings[2];\n  }\n  if ((*deviceSettings & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | deviceSettings[3];\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003c90": "initialize_device_08003c90",
                "param_1": "deviceSettings",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "iVar3": "previousValue1",
                "iVar4": "previousValue2",
                "bVar5": "isFlagSet"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003da4": {
            "entrypoint": "0x08003da4",
            "current_name": "calculate_result_08003da4",
            "code": "\n\n\nuint calculate_result_08003da4(int input_value)\n\n{\n  uint result;\n  undefined2 shifted_data;\n  undefined4 stack_20;\n  undefined4 stack_1c;\n  undefined4 stack_18;\n  undefined4 stack_14;\n  \n  stack_14 = 0x10100f0e;\n  stack_18 = 0xd0c0b0a;\n  stack_1c = 0x9080706;\n  stack_20 = 0x5040302;\n  shifted_data = 0x201;\n  if (input_value == 2) {\n    result = get_shifted_data_08003c70();\n    result = result / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input_value == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        result = 4000000;\n      }\n      else {\n        result = 8000000 / *(byte *)((int)&shifted_data - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      result = result * *(byte *)((int)&stack_20 + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        result = (result * 2) / 3;\n      }\n    }\n  }\n  else if (input_value == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      result = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        result = 0;\n      }\n      else {\n        result = 0xf424;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003da4": "calculate_result_08003da4",
                "param_1": "input_value",
                "uVar1": "result",
                "local_24": "shifted_data",
                "uStack_20": "stack_20",
                "uStack_1c": "stack_1c",
                "uStack_18": "stack_18",
                "uStack_14": "stack_14"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_08002384"
            ],
            "called": [
                "FUN_08003c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ea0": {
            "entrypoint": "0x08003ea0",
            "current_name": "initialize_flags_08003ea0",
            "code": "\n\n\nvoid initializeFlags_08003ea0(uint **flags)\n\n{\n  if (((**flags & 2) != 0) && (((*flags)[1] & 2) != 0)) {\n    execute_callback_if_not_null_08004d18();\n    (*flags)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(undefined *)((int)flags + 0x11) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ea0": "initialize_flags_08003ea0",
                "param_1": "flags"
            },
            "calling": [],
            "called": [
                "FUN_08004d18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ed8": {
            "entrypoint": "0x08003ed8",
            "current_name": "update_data_registers_08003ed8",
            "code": "\nvoid updateDataRegisters_08003ed8(uint **inputParams)\n\n{\n  uint *ptr;\n  \n  *(undefined *)((int)inputParams + 0x3d) = 2;\n  ptr = *inputParams;\n  if ((ptr[8] & 0x1111) == 0) {\n    if ((ptr[8] & 0x444) == 0) {\n      *ptr = *ptr & 0xfffffffe;\n    }\n  }\n  updateDataRegisters_08003ed82(inputParams);\n  *(undefined *)((int)inputParams + 0x3d) = 0;\n  *(undefined *)(inputParams + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ed8": "update_data_registers_08003ed8",
                "param_1": "inputParams",
                "puVar1": "ptr",
                "update_data_registers_08004b34": "updateDataRegisters2"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f12": {
            "entrypoint": "0x08003f12",
            "current_name": "FUNC_08003f12",
            "code": "\nvoid FUNC_08003f12(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f12": "FUNC_08003f12"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f14": {
            "entrypoint": "0x08003f14",
            "current_name": "FUNC_08003f14",
            "code": "\nvoid FUNC_08003f14(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f14": "FUNC_08003f14"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f16": {
            "entrypoint": "0x08003f16",
            "current_name": "FUNC_08003f16",
            "code": "\nvoid FUNC_08003f16(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f16": "FUNC_08003f16"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f18": {
            "entrypoint": "0x08003f18",
            "current_name": "execute_conditions_and_callbacks_08003f18",
            "code": "\nvoid execute_conditions_and_callbacks_08003f18(int *param_ptr)\n\n{\n  int param_value;\n  \n  param_value = *param_ptr;\n  if (((*(uint *)(param_value + 0x10) & 2) != 0) && ((*(uint *)(param_value + 0xc) & 2) != 0)) {\n    *(undefined4 *)(param_value + 0x10) = 0xfffffffd;\n    *(undefined *)(param_ptr + 7) = 1;\n    if ((*(uint *)(*param_ptr + 0x18) & 3) == 0) {\n      check_conditions();\n      FUNC_08003f14(param_ptr);\n    }\n    else {\n      FUNC_08003f12();\n    }\n    *(undefined *)(param_ptr + 7) = 0;\n  }\n  param_value = *param_ptr;\n  if (((*(uint *)(param_value + 0x10) & 4) != 0) && ((*(uint *)(param_value + 0xc) & 4) != 0)) {\n    *(undefined4 *)(param_value + 0x10) = 0xfffffffb;\n    *(undefined *)(param_ptr + 7) = 2;\n    if ((*(uint *)(*param_ptr + 0x18) & 0x300) == 0) {\n      check_conditions(param_ptr);\n      FUNC_08003f14(param_ptr);\n    }\n    else {\n      FUNC_08003f12(param_ptr);\n    }\n    *(undefined *)(param_ptr + 7) = 0;\n  }\n  param_value = *param_ptr;\n  if (((*(uint *)(param_value + 0x10) & 8) != 0) && ((*(uint *)(param_value + 0xc) & 8) != 0)) {\n    *(undefined4 *)(param_value + 0x10) = 0xfffffff7;\n    *(undefined *)(param_ptr + 7) = 4;\n    if ((*(uint *)(*param_ptr + 0x1c) & 3) == 0) {\n      check_conditions(param_ptr);\n      FUNC_08003f14(param_ptr);\n    }\n    else {\n      FUNC_08003f12(param_ptr);\n    }\n    *(undefined *)(param_ptr + 7) = 0;\n  }\n  param_value = *param_ptr;\n  if (((*(uint *)(param_value + 0x10) & 0x10) != 0) && ((*(uint *)(param_value + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(param_value + 0x10) = 0xffffffef;\n    *(undefined *)(param_ptr + 7) = 8;\n    if ((*(uint *)(*param_ptr + 0x1c) & 0x300) == 0) {\n      check_conditions(param_ptr);\n      FUNC_08003f14(param_ptr);\n    }\n    else {\n      FUNC_08003f12(param_ptr);\n    }\n    *(undefined *)(param_ptr + 7) = 0;\n  }\n  param_value = *param_ptr;\n  if (((*(uint *)(param_value + 0x10) & 1) != 0) && ((*(uint *)(param_value + 0xc) & 1) != 0)) {\n    *(undefined4 *)(param_value + 0x10) = 0xfffffffe;\n    execute_callback(param_ptr);\n  }\n  param_value = *param_ptr;\n  if (((*(uint *)(param_value + 0x10) & 0x80) != 0) && ((*(uint *)(param_value + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(param_value + 0x10) = 0xffffff7f;\n    FUNC_0800417a(param_ptr);\n  }\n  param_value = *param_ptr;\n  if (((*(uint *)(param_value + 0x10) & 0x40) != 0) && ((*(uint *)(param_value + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(param_value + 0x10) = 0xffffffbf;\n    FUNC_08003f16(param_ptr);\n  }\n  param_value = *param_ptr;\n  if (((*(uint *)(param_value + 0x10) & 0x20) != 0) && ((*(uint *)(param_value + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(param_value + 0x10) = 0xffffffdf;\n    FUNC_08004178(param_ptr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f18": "execute_conditions_and_callbacks_08003f18",
                "param_1": "param_ptr",
                "iVar1": "param_value",
                "execute_if_condition_met_08004df8": "check_conditions",
                "execute_callback_function_08004e12": "execute_callback"
            },
            "calling": [
                "FUN_08004e20"
            ],
            "called": [
                "FUN_0800417a",
                "FUN_08004e12",
                "FUN_08004178",
                "FUN_08004df8",
                "FUN_08003f12",
                "FUN_08003f16",
                "FUN_08003f14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004092": {
            "entrypoint": "0x08004092",
            "current_name": "update_bit_08004092",
            "code": "\nvoid updateBit_08004092(int objAddress,uint bitPosition,int bitValue)\n\n{\n  *(uint *)(objAddress + 0x20) = *(uint *)(objAddress + 0x20) bitwiseAnd bitwiseNot(1 << (bitPosition bitwiseAnd 0xff));\n  *(uint *)(objAddress + 0x20) = *(uint *)(objAddress + 0x20) | bitValue << (bitPosition bitwiseAnd 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004092": "update_bit_08004092",
                "param_1": "objAddress",
                "param_2": "bitPosition",
                "param_3": "bitValue",
                "&": "bitwiseAnd",
                "~": "bitwiseNot"
            },
            "calling": [
                "FUN_080040b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b0": {
            "entrypoint": "0x080040b0",
            "current_name": "update_and_reset_flags_080040b0",
            "code": "\nundefined4 updateAndResetFlags_080040b0(uint **inputArray,undefined4 flagValue)\n\n{\n  uint *arrayPointer;\n  \n  update_bit_08004092(*inputArray,flagValue,0);\n  if (((*inputArray == (uint *)0x40012c00) && ((uRam40012c20 & 0x1111) == 0)) &&\n     ((uRam40012c20 & 0x444) == 0)) {\n    uRam40012c44 = uRam40012c44 & 0xffff7fff;\n  }\n  arrayPointer = *inputArray;\n  if (((arrayPointer[8] & 0x1111) == 0) && ((arrayPointer[8] & 0x444) == 0)) {\n    *arrayPointer = *arrayPointer & 0xfffffffe;\n  }\n  *(undefined *)((int)inputArray + 0x3d) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040b0": "update_and_reset_flags_080040b0",
                "param_1": "inputArray",
                "param_2": "flagValue",
                "puVar1": "arrayPointer"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004092"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004110": {
            "entrypoint": "0x08004110",
            "current_name": "update_value_08004110",
            "code": "\nvoid updateValue_08004110(int address,uint bitPosition,int newValue)\n\n{\n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & ~(4 << (bitPosition & 0xff));\n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) | newValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004110": "update_value_08004110",
                "param_1": "address",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_0800412c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800412c": {
            "entrypoint": "0x0800412c",
            "current_name": "update_value_0800412c",
            "code": "\nundefined4 updateValue_0800412c(uint **data,undefined4 value)\n\n{\n  uint *dataPointer;\n  \n  update_value_08004110(*data,value,0);\n  dataPointer = *data;\n  if (((dataPointer[8] & 0x1111) == 0) && ((dataPointer[8] & 0x444) == 0)) {\n    dataPointer[0x11] = dataPointer[0x11] & 0xffff7fff;\n  }\n  dataPointer = *data;\n  if (((dataPointer[8] & 0x1111) == 0) && ((dataPointer[8] & 0x444) == 0)) {\n    *dataPointer = *dataPointer & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800412c": "update_value_0800412c",
                "param_1": "data",
                "param_2": "value",
                "puVar1": "dataPointer"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004110"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004178": {
            "entrypoint": "0x08004178",
            "current_name": "FUNC_08004178",
            "code": "\nvoid FUNC_08004178(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004178": "FUNC_08004178"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800417a": {
            "entrypoint": "0x0800417a",
            "current_name": "FUNC_0800417a",
            "code": "\nvoid FUNC_0800417a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800417a": "FUNC_0800417a"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800417c": {
            "entrypoint": "0x0800417c",
            "current_name": "clear_bits_and_set_flag_0800417c",
            "code": "\nvoid clearBitsAndSetFlag_0800417c(int *ptr)\n\n{\n  *(uint *)(*ptr + 0xc) = *(uint *)(*ptr + 0xc) & 0xfffffedf;\n  *(uint *)(*ptr + 0x14) = *(uint *)(*ptr + 0x14) & 0xfffffffe;\n  *(undefined *)((int)ptr + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800417c": "clear_bits_and_set_flag_0800417c",
                "param_1": "ptr"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004198": {
            "entrypoint": "0x08004198",
            "current_name": "process_binary_data_08004198",
            "code": "\nundefined4 processBinaryData_08004198(int *data)\n\n{\n  short remainingIterations;\n  byte *bytePointer;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)data[8] & 0x1ff;\n    if (data[4] == 0) {\n      data[8] = data[8] + 2;\n    }\n    else {\n      data[8] = data[8] + 1;\n    }\n  }\n  else {\n    bytePointer = (byte *)data[8];\n    data[8] = (int)(bytePointer + 1);\n    *(uint *)(*data + 4) = (uint)*bytePointer;\n  }\n  remainingIterations = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = remainingIterations;\n  if (remainingIterations == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004198": "process_binary_data_08004198",
                "param_1": "data",
                "sVar1": "remainingIterations",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004204": {
            "entrypoint": "0x08004204",
            "current_name": "calculate_shifted_data_value_08004204",
            "code": "\nvoid calculateShiftedDataValue_08004204(int *inputData)\n\n{\n  int value1;\n  int value2;\n  int value3;\n  int value4;\n  int value5;\n  int value6;\n  int value7;\n  int value8;\n  int value9;\n  int value10;\n  \n  *(uint *)(*inputData + 0x10) = *(uint *)(*inputData + 0x10) & 0xffffcfff | inputData[3];\n  *(uint *)(*inputData + 0xc) =\n       inputData[2] | inputData[4] | inputData[5] | *(uint *)(*inputData + 0xc) & 0xffffe9f3;\n  *(uint *)(*inputData + 0x14) = *(uint *)(*inputData + 0x14) & 0xfffffcff | inputData[6];\n  value10 = *inputData;\n  if (value10 != 0x40013800) {\n    value1 = get_shifted_data_value_08003c50();\n    value6 = inputData[1];\n    value2 = get_shifted_data_value_08003c50();\n    value7 = inputData[1];\n    value3 = get_shifted_data_value_08003c50();\n    value8 = inputData[1];\n    value4 = get_shifted_data_value_08003c50();\n    value9 = inputData[1];\n    value5 = get_shifted_data_value_08003c50();\n    *(uint *)(value10 + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(value4 * 0x19) / (uint)(value9 << 2) +\n                        (int)(((ulonglong)(uint)(value5 * 0x19) / (ulonglong)(uint)(inputData[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(value2 * 0x19) / (uint)(value7 << 2) +\n           (int)(((ulonglong)(uint)(value3 * 0x19) / (ulonglong)(uint)(value8 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(value1 * 0x19) / (ulonglong)(uint)(value6 << 2)) / 100) * 0x10;\n    return;\n  }\n  value10 = get_shifted_data_08003c70();\n  value5 = inputData[1];\n  value1 = get_shifted_data_08003c70();\n  value6 = inputData[1];\n  value2 = get_shifted_data_08003c70();\n  value7 = inputData[1];\n  value3 = get_shifted_data_08003c70();\n  value8 = inputData[1];\n  value4 = get_shifted_data_08003c70();\n  result = ((uint)((int)((ulonglong)\n                               (((uint)(value3 * 0x19) / (uint)(value8 << 2) +\n                                (int)(((ulonglong)(uint)(value4 * 0x19) /\n                                      (ulonglong)(uint)(inputData[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(value1 * 0x19) / (uint)(value6 << 2) +\n                   (int)(((ulonglong)(uint)(value2 * 0x19) / (ulonglong)(uint)(value7 << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(value10 * 0x19) / (ulonglong)(uint)(value5 << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004204": "calculate_shifted_data_value_08004204",
                "param_1": "inputData",
                "iVar1": "value1",
                "iVar2": "value2",
                "iVar3": "value3",
                "iVar4": "value4",
                "iVar5": "value5",
                "iVar6": "value6",
                "iVar7": "value7",
                "iVar8": "value8",
                "iVar9": "value9",
                "iVar10": "value10",
                "iRam40013808": "result"
            },
            "calling": [
                "FUN_0800441a"
            ],
            "called": [
                "FUN_08003c50",
                "FUN_08003c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043b4": {
            "entrypoint": "0x080043b4",
            "current_name": "check_data_and_modify_080043b4",
            "code": "\nundefined4 checkDataAndModify_080043b4(uint **dataPointer,uint mask,uint expectedResult,int comparisonValue,uint maximumDifference)\n\n{\n  int dataOffset;\n  \n  do {\n    if (((mask & ~**dataPointer) == 0) != expectedResult) {\n      return 0;\n    }\n  } while ((maximumDifference == 0xffffffff) ||\n          ((maximumDifference != 0 && (dataOffset = getDataOffset(), (uint)(dataOffset - comparisonValue) <= maximumDifference))));\n  (*dataPointer)[3] = (*dataPointer)[3] & 0xfffffe5f;\n  (*dataPointer)[5] = (*dataPointer)[5] & 0xfffffffe;\n  *(undefined *)((int)dataPointer + 0x39) = 0x20;\n  *(undefined *)((int)dataPointer + 0x3a) = 0x20;\n  *(undefined *)(dataPointer + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_080043b4": "check_data_and_modify_080043b4",
                "param_1": "dataPointer",
                "param_2": "mask",
                "param_3": "expectedResult",
                "param_4": "comparisonValue",
                "param_5": "maximumDifference",
                "iVar1": "dataOffset",
                "get_data_08001cc4": "getDataOffset"
            },
            "calling": [
                "FUN_08004478"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004418": {
            "entrypoint": "0x08004418",
            "current_name": "FUNC_08004418",
            "code": "\nvoid FUNC_08004418(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004418": "FUNC_08004418"
            },
            "calling": [
                "FUN_0800441a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800441a": {
            "entrypoint": "0x0800441a",
            "current_name": "reset_data_0800441a",
            "code": "\nundefined4 resetData_0800441a(int *data)\n\n{\n  if (data != (int *)0x0) {\n    if (*(char *)((int)data + 0x39) == '\\0') {\n      *(undefined *)(data + 0xe) = 0;\n      FUNC_08004418();\n    }\n    *(undefined *)((int)data + 0x39) = 0x24;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffdfff;\n    calculateShiftedValue(data);\n    *(uint *)(*data + 0x10) = *(uint *)(*data + 0x10) & 0xffffb7ff;\n    *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xffffffd5;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x2000;\n    count = 0;\n    *(undefined *)((int)data + 0x39) = 0x20;\n    *(undefined *)((int)data + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800441a": "reset_data_0800441a",
                "param_1": "data",
                "calculate_shifted_data_value_08004204": "calculateShiftedValue",
                "param_1[0xf]": "count"
            },
            "calling": [
                "FUN_08004f4c"
            ],
            "called": [
                "FUN_08004204",
                "FUN_08004418"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004478": {
            "entrypoint": "0x08004478",
            "current_name": "process_data_08004478",
            "code": "\nundefined4 processData_08004478(int *buffer,ushort *data,int dataSize,undefined4 param4)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  if (*(char *)((int)buffer + 0x39) == ' ') {\n    if (data == (ushort *)0x0) {\n      returnValue = 1;\n    }\n    else if (dataSize == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(buffer + 0xe) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(buffer + 0xe) = 1;\n      buffer[0xf] = 0;\n      *(undefined *)((int)buffer + 0x39) = 0x21;\n      returnValue = get_data_08001cc4();\n      *(short *)(buffer + 9) = (short)dataSize;\n      *(short *)((int)buffer + 0x26) = (short)dataSize;\n      while (*(short *)((int)buffer + 0x26) != 0) {\n        *(short *)((int)buffer + 0x26) = *(short *)((int)buffer + 0x26) + -1;\n        if (buffer[2] == 0x1000) {\n          result = check_data_and_modify_080043b4(buffer,0x80,0,returnValue,param4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*buffer + 4) = *data & 0x1ff;\n          if (buffer[4] == 0) {\n            data = data + 1;\n          }\n          else {\n            data = (ushort *)((int)data + 1);\n          }\n        }\n        else {\n          result = check_data_and_modify_080043b4(buffer,0x80,0,returnValue,param4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*buffer + 4) = (uint)*(byte *)data;\n          data = (ushort *)((int)data + 1);\n        }\n      }\n      result = check_data_and_modify_080043b4(buffer,0x40,0,returnValue,param4);\n      if (result == 0) {\n        *(undefined *)((int)buffer + 0x39) = 0x20;\n        *(undefined *)(buffer + 0xe) = 0;\n        returnValue = 0;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004478": "process_data_08004478",
                "param_1": "buffer",
                "param_2": "data",
                "param_3": "dataSize",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [
                "FUN_08001cc4",
                "FUN_080043b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800455a": {
            "entrypoint": "0x0800455a",
            "current_name": "validate_input_0800455a",
            "code": "\nundefined4 validateInput_0800455a(int *inputArray,int value1,int value2)\n\n{\n  if (*(char *)((int)inputArray + 0x39) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(inputArray + 0xe) != '\\x01') {\n    inputArray[8] = value1;\n    *(short *)(inputArray + 9) = (short)value2;\n    *(short *)((int)inputArray + 0x26) = (short)value2;\n    inputArray[15] = 0;\n    *(undefined *)((int)inputArray + 0x39) = 0x21;\n    *(undefined *)(inputArray + 0xe) = 0;\n    *(uint *)(*inputArray + 0xc) = *(uint *)(*inputArray + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_0800455a": "validate_input_0800455a",
                "param_1": "inputArray",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[8]": "inputArray[8]",
                "param_1[0xf]": "inputArray[15]"
            },
            "calling": [
                "FUN_08005568",
                "FUN_08005604"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045a2": {
            "entrypoint": "0x080045a2",
            "current_name": "validate_input_080045a2",
            "code": "\nundefined4 validate_input_080045a2(int *input_array,int length,int value)\n\n{\n  if (*(char *)((int)input_array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (length == 0) {\n    return 1;\n  }\n  if (value == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array[10] = length;\n    *(short *)(input_array + 0xb) = (short)value;\n    *(short *)((int)input_array + 0x2e) = (short)value;\n    input_array[15] = 0;\n    *(undefined *)((int)input_array + 0x3a) = 0x22;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x100;\n    *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) | 1;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_080045a2": "validate_input_080045a2",
                "param_1": "input_array",
                "param_2": "length",
                "param_3": "value",
                "param_1[10]": "input_array[10]",
                "param_1[0xf]": "input_array[15]"
            },
            "calling": [
                "FUN_08005510",
                "FUN_080054d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045fe": {
            "entrypoint": "0x080045fe",
            "current_name": "update_input_flags_080045fe",
            "code": "\nundefined4 updateInputFlags_080045fe(int *inputPtr)\n\n{\n  *(uint *)(*inputPtr + 0xc) = *(uint *)(*inputPtr + 0xc) & 0xffffffbf;\n  *(undefined *)((int)inputPtr + 0x39) = 0x20;\n  validateAndProcessInput();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080045fe": "update_input_flags_080045fe",
                "param_1": "inputPtr",
                "validate_and_process_input_08005604": "validateAndProcessInput"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [
                "FUN_08005604"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004618": {
            "entrypoint": "0x08004618",
            "current_name": "process_data_08004618",
            "code": "\nundefined4 processData_08004618(int *data)\n\n{\n  byte *bytePtr;\n  short count;\n  undefined *undefinedPtr;\n  \n  if (*(char *)((int)data + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(ushort *)data[10] = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] = data[10] + 2;\n    }\n    else {\n      *(ushort *)data[10] = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      data[10] = data[10] + 1;\n    }\n  }\n  else if (data[4] == 0) {\n    undefinedPtr = (undefined *)data[10];\n    data[10] = (int)(undefinedPtr + 1);\n    *undefinedPtr = (char)*(undefined4 *)(*data + 4);\n  }\n  else {\n    bytePtr = (byte *)data[10];\n    data[10] = (int)(bytePtr + 1);\n    *bytePtr = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n  }\n  count = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = count;\n  if (count != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffffdf;\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xfffffeff;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  execute_selected_action_080055e0();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004618": "process_data_08004618",
                "param_1": "data",
                "pbVar1": "bytePtr",
                "sVar2": "count",
                "puVar3": "undefinedPtr"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [
                "FUN_080055e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046b8": {
            "entrypoint": "0x080046b8",
            "current_name": "process_and_update_data_080046b8",
            "code": "\nvoid process_and_update_data_080046b8(uint **data_ptr)\n\n{\n  int result;\n  uint data_ptr_3;\n  uint *data_ptr;\n  uint bit_flag;\n  uint data_ptr_0;\n  \n  data_ptr = *data_ptr;\n  data_ptr_0 = *data_ptr;\n  data_ptr_3 = data_ptr[3];\n  if ((((data_ptr_0 & 0xf) == 0) && ((data_ptr_0 & 0x20) != 0)) && ((data_ptr_3 & 0x20) != 0)) {\n    process_data(data_ptr);\n    return;\n  }\n  if (((data_ptr_0 & 0xf) == 0) || ((bit_flag = data_ptr[5] & 1, bit_flag == 0 && ((data_ptr_3 & 0x120) == 0)))) {\n    if (((data_ptr_0 & 0x80) != 0) && ((data_ptr_3 & 0x80) != 0)) {\n      process_binary_data(data_ptr);\n      return;\n    }\n    if (((data_ptr_0 & 0x40) != 0) && ((data_ptr_3 & 0x40) != 0)) {\n      update_input_flags(data_ptr);\n    }\n  }\n  else {\n    if (((data_ptr_0 & 1) != 0) && ((data_ptr_3 & 0x100) != 0)) {\n      data_ptr[0xf] = (uint *)((uint)data_ptr[0xf] | 1);\n    }\n    if (((data_ptr_0 & 4) != 0) && (bit_flag != 0)) {\n      data_ptr[0xf] = (uint *)((uint)data_ptr[0xf] | 2);\n    }\n    if (((data_ptr_0 & 2) != 0) && (bit_flag != 0)) {\n      data_ptr[0xf] = (uint *)((uint)data_ptr[0xf] | 4);\n    }\n    if (((data_ptr_0 & 8) != 0) && (bit_flag != 0)) {\n      data_ptr[0xf] = (uint *)((uint)data_ptr[0xf] | 8);\n    }\n    if (data_ptr[0xf] != (uint *)0x0) {\n      if (((data_ptr_0 & 0x20) != 0) && ((data_ptr_3 & 0x20) != 0)) {\n        process_data(data_ptr);\n      }\n      if ((((uint)data_ptr[0xf] & 8) == 0) && (((*data_ptr)[5] & 0x40) == 0)) {\n        FUNC_08005650(data_ptr);\n        data_ptr[0xf] = (uint *)0x0;\n        return;\n      }\n      clear_bits_and_set_flag(data_ptr);\n      data_ptr = *data_ptr;\n      if ((data_ptr[5] & 0x40) == 0) {\n        FUNC_08005650(data_ptr);\n        return;\n      }\n      data_ptr[5] = data_ptr[5] & 0xffffffbf;\n      if (data_ptr[0xd] == (uint *)0x0) {\n        FUNC_08005650(data_ptr);\n        return;\n      }\n      data_ptr[0xd][0xd] = (uint)&LABEL_080047d8_1;\n      result = initialize_data(data_ptr[0xd]);\n      if (result != 0) {\n        (*(code *)data_ptr[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046b8": "process_and_update_data_080046b8",
                "param_1": "data_ptr",
                "iVar1": "result",
                "uVar2": "data_ptr_3",
                "puVar3": "data_ptr",
                "uVar4": "bit_flag",
                "uVar5": "data_ptr_0",
                "process_data_08004618": "process_data",
                "process_binary_data_08004198": "process_binary_data",
                "update_input_flags_080045fe": "update_input_flags",
                "clear_bits_and_set_flag_0800417c": "clear_bits_and_set_flag",
                "initialize_data_0800258c": "initialize_data",
                "LAB_080047d8_1": "LABEL_080047d8_1"
            },
            "calling": [],
            "called": [
                "FUN_0800417c",
                "FUN_08005650",
                "FUN_080045fe",
                "FUN_08004618",
                "FUN_08004198",
                "FUN_0800258c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047e8": {
            "entrypoint": "0x080047e8",
            "current_name": "combine_bytes_080047e8",
            "code": "\nbyte combine_bytes_080047e8(int input_value)\n\n{\n  return *(byte *)(input_value + 0x3a) | *(byte *)(input_value + 0x39);\n}\n\n",
            "renaming": {
                "FUN_080047e8": "combine_bytes_080047e8",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_0800548c",
                "FUN_080054b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "extract_bit_from_uint_080047f4",
            "code": "\nuint extract_bit_from_uint_080047f4(uint value,int array_address)\n\n{\n  return *(uint *)(array_address + ((value << 0x18) >> 0x1c) * 4) >> (value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "extract_bit_from_uint_080047f4",
                "param_1": "value",
                "param_2": "array_address"
            },
            "calling": [
                "FUN_08005848",
                "FUN_080057b4",
                "FUN_08005890"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800480a": {
            "entrypoint": "0x0800480a",
            "current_name": "set_bit_in_array_0800480a",
            "code": "\nvoid setBitInArray_0800480a(uint value,int array)\n\n{\n  uint index;\n  \n  index = (value << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) | 1 << (value & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800480a": "set_bit_in_array_0800480a",
                "param_1": "value",
                "param_2": "array",
                "uVar1": "index"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004828": {
            "entrypoint": "0x08004828",
            "current_name": "update_bit_08004828",
            "code": "\nvoid updateBit_08004828(uint value,int array)\n\n{\n  uint index;\n  \n  index = (value << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) & ~(1 << (value & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004828": "update_bit_08004828",
                "param_1": "value",
                "param_2": "array",
                "uVar1": "index"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004848": {
            "entrypoint": "0x08004848",
            "current_name": "map_parameter_to_address_08004848",
            "code": "\nundefined4 mapParameterToAddress_08004848(undefined4 parameter)\n\n{\n  switch(parameter) {\n  case 0:\n    return 0x40010800;\n  case 1:\n    return 0x40010c00;\n  case 2:\n    return 0x40011000;\n  case 3:\n    return 0x40011400;\n  case 4:\n    return 0x40011800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08004848": "map_parameter_to_address_08004848",
                "param_1": "parameter"
            },
            "calling": [
                "FUN_08005848",
                "FUN_08005890"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004884": {
            "entrypoint": "0x08004884",
            "current_name": "get_memory_address_08004884",
            "code": "\n\n\nundefined4 getMemoryAddress_08004884(undefined4 input)\n\n{\n  undefined4 output;\n  \n  switch(input) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    output = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    output = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    output = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    output = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    output = 0x40011800;\n    break;\n  default:\n    output = 0;\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_08004884": "get_memory_address_08004884",
                "param_1": "input",
                "uVar1": "output"
            },
            "calling": [
                "FUN_08004f4c",
                "FUN_08004974",
                "FUN_08004bb0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800492c": {
            "entrypoint": "0x0800492c",
            "current_name": "get_shifted_value_0800492c",
            "code": "\nuint getShiftedValue_0800492c(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  int result;\n  uint shiftedValue;\n  \n  result = find_value_or_default_08004cce(input1,&DAT_08007400,input3,input4,input4);\n  shiftedValue = (uint)(result << 0xc) >> 0x1b;\n  if (0x10 < shiftedValue - 1) {\n    shiftedValue = 0;\n  }\n  return shiftedValue;\n}\n\n",
            "renaming": {
                "FUN_0800492c": "get_shifted_value_0800492c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result",
                "uVar2": "shiftedValue"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08004cce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004948": {
            "entrypoint": "0x08004948",
            "current_name": "find_result_08004948",
            "code": "\nundefined4 findResult_08004948(undefined4 value,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int result;\n  uint shiftedValue;\n  \n  result = find_value_or_default_08004cce(value,&DAT_080074b4,param_3,param_4,param_4);\n  shiftedValue = (uint)(result << 0xc) >> 0x1b;\n  if (shiftedValue == 3) {\n    return 8;\n  }\n  if (shiftedValue != 4) {\n    if (shiftedValue != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_08004948": "find_result_08004948",
                "param_1": "value",
                "iVar1": "result",
                "uVar2": "shiftedValue"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004cce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004974": {
            "entrypoint": "0x08004974",
            "current_name": "update_memory_configuration_08004974",
            "code": "\n\n\nvoid update_memory_configuration_08004974(int *memory_config,undefined4 param)\n\n{\n  undefined4 memory_address;\n  uint new_value;\n  int original_value;\n  uint bit_mask;\n  undefined4 value_1;\n  undefined4 value_2;\n  \n  original_value = *memory_config;\n  if (original_value == 0x40012400) {\n    new_value = _DAT_40021018 | 0x200;\n    original_value = 0x200;\n    _DAT_40021018 = new_value;\n  }\n  else {\n    new_value = 0x40012800;\n    if (original_value == 0x40012800) {\n      new_value = _DAT_40021018 | 0x400;\n      original_value = 0x400;\n      _DAT_40021018 = new_value;\n    }\n  }\n  memory_address = get_memory_address_08004884((uint)((int)(char)DAT_20000080 << 0x18) >> 0x1c,param,new_value,original_value);\n  bit_mask = 1 << (DAT_20000080 & 0xf) & 0xffff;\n  value_1 = 3;\n  value_2 = 0;\n  update_configuration_08002624(memory_address,&bit_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004974": "update_memory_configuration_08004974",
                "param_1": "memory_config",
                "param_2": "param",
                "uVar1": "memory_address",
                "uVar2": "new_value",
                "iVar3": "original_value",
                "local_18": "bit_mask",
                "local_14": "value_1",
                "local_10": "value_2"
            },
            "calling": [
                "FUN_0800213c"
            ],
            "called": [
                "FUN_08002624",
                "FUN_08004884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049f0": {
            "entrypoint": "0x080049f0",
            "current_name": "update_control_registers_080049f0",
            "code": "\n\n\nvoid updateControlRegisters_080049f0(int *controlRegister)\n\n{\n  if (*controlRegister != 0x40012400) {\n    if (*controlRegister == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080049f0": "update_control_registers_080049f0",
                "param_1": "controlRegister"
            },
            "calling": [
                "FUN_0800224c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a4c": {
            "entrypoint": "0x08004a4c",
            "current_name": "reverse_and_update_value_08004a4c",
            "code": "\nundefined2 reverse_and_update_value_08004a4c(undefined4 input_value)\n\n{\n  int result_code;\n  uint pointer_value;\n  undefined2 result;\n  uint shifted_value;\n  undefined4 has_shifted_value;\n  undefined4 num_updates;\n  int check_result;\n  undefined4 temp_1;\n  undefined4 temp_2;\n  undefined4 temp_3;\n  undefined4 temp_4;\n  undefined4 temp_5;\n  undefined4 temp_6;\n  undefined4 temp_7;\n  undefined4 temp_8;\n  \n  fill_array_with_value_080061e0(&check_result,0,0x30);\n  shifted_value = 0;\n  has_shifted_value = 0;\n  num_updates = 0;\n  result = 0;\n  check_result = check_and_find_value_08004c78(input_value,&DAT_08007400);\n  if (check_result == 0) {\n    result = 0;\n  }\n  else {\n    temp_1 = 0;\n    temp_2 = 0;\n    temp_3 = 0;\n    temp_5 = 0;\n    temp_7 = 0xe0000;\n    temp_8 = 0;\n    temp_4 = 1;\n    temp_6 = 0;\n    DAT_20000080 = (undefined)input_value;\n    result_code = update_memory_configuration_0800213c(&check_result);\n    if (result_code == 0) {\n      shifted_value = get_shifted_value_0800492c(input_value);\n      if (shifted_value < 0x12) {\n        has_shifted_value = 1;\n        num_updates = 2;\n        result_code = update_values_08001e48(&check_result,&shifted_value);\n        if (result_code == 0) {\n          result_code = check_and_update_data_08002384(&check_result);\n          if (result_code == 0) {\n            result_code = update_data_08002004(&check_result);\n            if (result_code == 0) {\n              result_code = calculate_and_set_result_08001cd0(&check_result,10);\n              if (result_code == 0) {\n                pointer_value = get_pointer_value_08001f80(&check_result);\n                if ((pointer_value & 0x200) != 0) {\n                  result = get_value_from_offset_08001e40(&check_result);\n                }\n                result_code = check_and_update_data_08002348(&check_result);\n                if (result_code == 0) {\n                  result_code = clear_and_reset_data_0800224c(&check_result);\n                  if (result_code != 0) {\n                    result = 0;\n                  }\n                }\n                else {\n                  result = 0;\n                }\n              }\n              else {\n                result = 0;\n              }\n            }\n            else {\n              result = 0;\n            }\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004a4c": "reverse_and_update_value_08004a4c",
                "param_1": "input_value",
                "local_46": "result",
                "local_44": "shifted_value",
                "local_40": "has_shifted_value",
                "local_3c": "num_updates",
                "local_38": "check_result",
                "local_34": "temp_1",
                "local_30": "temp_2",
                "local_2c": "temp_3",
                "local_28": "temp_4",
                "local_24": "temp_5",
                "local_20": "temp_6",
                "local_1c": "temp_7",
                "local_10": "temp_8",
                "iVar1": "result_code",
                "uVar2": "pointer_value"
            },
            "calling": [
                "FUN_08005754"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08001e40",
                "FUN_08001e48",
                "FUN_0800213c",
                "FUN_080061e0",
                "FUN_08002004",
                "FUN_08002348",
                "FUN_08001cd0",
                "FUN_0800224c",
                "FUN_0800492c",
                "FUN_08002384",
                "FUN_08001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b34": {
            "entrypoint": "0x08004b34",
            "current_name": "update_data_registers_08004b34",
            "code": "\nvoid update_data_registers_08004b34(void)\n\n{\n  update_data_registers_08004b34_helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b34": "update_data_registers_08004b34",
                "update_data_registers_08004d90": "update_data_registers_helper"
            },
            "calling": [
                "FUN_08003ed8"
            ],
            "called": [
                "FUN_08004d90"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b3c": {
            "entrypoint": "0x08004b3c",
            "current_name": "process_values_08004b3c",
            "code": "\nvoid processValues_08004b3c(undefined4 input)\n\n{\n  int iVar1;\n  uint uVar2;\n  int foundValues [17];\n  \n  foundValues[0] = check_and_find_value_08004c78(input,&DAT_080074b4);\n  if ((foundValues[0] != 0) &&\n     ((((iVar1 = find_result_08004948(input), iVar1 == 0 || (iVar1 == 4)) || (iVar1 == 8)) ||\n      ((iVar1 == 0xc || (iVar1 == 0x18)))))) {\n    uVar2 = find_value_or_default_08004cce(input,&DAT_080074b4);\n    if ((uVar2 & 0x100000) == 0) {\n      update_and_reset_flags_080040b0(foundValues,iVar1);\n    }\n    else {\n      update_value_0800412c(foundValues,iVar1);\n    }\n    update_data_registers_08003ed8(foundValues);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b3c": "process_values_08004b3c",
                "param_1": "input",
                "local_50": "foundValues"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08003ed8",
                "FUN_0800412c",
                "FUN_08004948",
                "FUN_080040b0",
                "FUN_08004cce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b94": {
            "entrypoint": "0x08004b94",
            "current_name": "initialize_data_08004b94",
            "code": "\nvoid initializeData_08004b94(void)\n\n{\n  getData();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b94": "initialize_data_08004b94",
                "get_data_08001cc4": "getData"
            },
            "calling": [
                "FUN_080058e0"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b9c": {
            "entrypoint": "0x08004b9c",
            "current_name": "FUNC_08004b9c",
            "code": "\nvoid FUNC_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b9c": "FUNC_08004b9c"
            },
            "calling": [
                "FUN_08004b9e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b9e": {
            "entrypoint": "0x08004b9e",
            "current_name": "execute_setup_08004b9e",
            "code": "\nvoid execute_setup_08004b9e(void)\n\n{\n  perform_addition_operation();\n  execute_initialization();\n  FUNC_08004b9c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b9e": "execute_setup_08004b9e",
                "addition_operation_08001cac": "perform_addition_operation",
                "execute_initialization_08002582": "execute_initialization"
            },
            "calling": [],
            "called": [
                "FUN_08001cac",
                "FUN_08002582",
                "FUN_08004b9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bb0": {
            "entrypoint": "0x08004bb0",
            "current_name": "initialize_device_08004bb0",
            "code": "\n\n\nvoid initializeDevice_08004bb0(uint deviceID,undefined4 param1,undefined4 param2)\n\n{\n  undefined4 memoryAddress;\n  uint bitMask;\n  undefined4 localParam1;\n  undefined4 localParam2;\n  undefined4 localVar;\n  \n  memoryAddress = get_memory_address_08004884((deviceID << 0x18) >> 0x1c);\n  bitMask = 1 << (deviceID & 0xf) & 0xffff;\n  localVar = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((deviceID - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((deviceID == 0xf) || (deviceID == 0x13)) || (deviceID == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  localParam1 = param1;\n  localParam2 = param2;\n  update_configuration_08002624(memoryAddress,&bitMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bb0": "initialize_device_08004bb0",
                "param_1": "deviceID",
                "param_2": "param1",
                "param_3": "param2",
                "uVar1": "memoryAddress",
                "local_20": "bitMask",
                "local_1c": "localParam1",
                "local_18": "localParam2",
                "local_14": "localVar"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [
                "FUN_08002624",
                "FUN_08004884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "set_value_based_on_condition_08004c30",
            "code": "\nvoid set_value_based_on_condition_08004c30(undefined4 value_1,undefined2 value_2,int condition,undefined4 value_3)\n\n{\n  if (condition == 0) {\n    set_value(value_1,value_2,0,value_3,value_3);\n    return;\n  }\n  set_value(value_1,value_2,1,value_3,value_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "set_value_based_on_condition_08004c30",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "condition",
                "param_4": "value_3",
                "set_value_0800281e": "set_value"
            },
            "calling": [
                "FUN_08005848"
            ],
            "called": [
                "FUN_0800281e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "check_bit_flag_08004c48",
            "code": "\nvoid check_bit_flag_08004c48(undefined4 flag1,undefined2 flag2,undefined4 flag3,undefined4 flag4)\n\n{\n  check_bit_flag_08004c48_08002810(flag1,flag2,flag3,flag4,flag4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "check_bit_flag_08004c48",
                "param_1": "flag1",
                "param_2": "flag2",
                "param_3": "flag3",
                "param_4": "flag4"
            },
            "calling": [
                "FUN_08005890"
            ],
            "called": [
                "FUN_08002810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c52": {
            "entrypoint": "0x08004c52",
            "current_name": "initialize_system_08004c52",
            "code": "\nvoid initialize_system_08004c52(void)\n\n{\n  initialize_hardware();\n  initialize_and_update_system();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c52": "initialize_system_08004c52",
                "initialize_hardware_08001c88": "initialize_hardware",
                "initialize_and_update_system_08001b48": "initialize_and_update_system"
            },
            "calling": [
                "FUN_08001c32"
            ],
            "called": [
                "FUN_08001b48",
                "FUN_08001c88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c5e": {
            "entrypoint": "0x08004c5e",
            "current_name": "find_value_in_array_08004c5e",
            "code": "\nundefined4 find_value_in_array_08004c5e(int value,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (*array == value) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 4);\n}\n\n",
            "renaming": {
                "FUN_08004c5e": "find_value_in_array_08004c5e",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08004c78",
                "FUN_08004c5e"
            ],
            "called": [
                "FUN_08004c5e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c78": {
            "entrypoint": "0x08004c78",
            "current_name": "check_and_find_value_08004c78",
            "code": "\nundefined4 check_and_find_value_08004c78(int input_value)\n\n{\n  undefined4 found_value;\n  \n  if (input_value != -1) {\n    found_value = find_value_in_array_08004c5e();\n    return found_value;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004c78": "check_and_find_value_08004c78",
                "param_1": "input_value",
                "uVar1": "found_value"
            },
            "calling": [
                "FUN_08005384",
                "FUN_08004f4c",
                "FUN_080053d4",
                "FUN_08004a4c",
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004c5e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8a": {
            "entrypoint": "0x08004c8a",
            "current_name": "find_value_index_08004c8a",
            "code": "\nint find_value_index_08004c8a(int value_to_find,char *array_ptr)\n\n{\n  while( true ) {\n    if (*(int *)(array_ptr + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(array_ptr + 4) == value_to_find) break;\n    array_ptr = array_ptr + 0xc;\n  }\n  return (int)*array_ptr;\n}\n\n",
            "renaming": {
                "FUN_08004c8a": "find_value_index_08004c8a",
                "param_1": "value_to_find",
                "param_2": "array_ptr"
            },
            "calling": [
                "FUN_08004ca2",
                "FUN_08004c8a"
            ],
            "called": [
                "FUN_08004c8a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ca2": {
            "entrypoint": "0x08004ca2",
            "current_name": "find_index_or_error_08004ca2",
            "code": "\nundefined4 findIndexOrError_08004ca2(int value)\n\n{\n  undefined4 index;\n  \n  if (value != 0) {\n    index = find_value_index_08004c8a();\n    return index;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004ca2": "find_index_or_error_08004ca2",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08005384",
                "FUN_08005b54"
            ],
            "called": [
                "FUN_08004c8a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cb2": {
            "entrypoint": "0x08004cb2",
            "current_name": "find_value_in_array_08004cb2",
            "code": "\nundefined4 find_value_in_array_08004cb2(int value,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0xffffffff;\n    }\n    if (*array == value) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 8);\n}\n\n",
            "renaming": {
                "FUN_08004cb2": "find_value_in_array_08004cb2",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08004cb2",
                "FUN_08004cce"
            ],
            "called": [
                "FUN_08004cb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cce": {
            "entrypoint": "0x08004cce",
            "current_name": "find_value_or_default_08004cce",
            "code": "\nundefined4 find_value_or_default_08004cce(int value)\n\n{\n  undefined4 result;\n  \n  if (value == -1) {\n    return 0xffffffff;\n  }\n  result = find_value_in_array_08004cb2();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004cce": "find_value_or_default_08004cce",
                "param_1": "value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08004948",
                "FUN_08004f4c",
                "FUN_0800492c",
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004cb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ce2": {
            "entrypoint": "0x08004ce2",
            "current_name": "search_value_in_array_08004ce2",
            "code": "\nundefined4 search_value_in_array_08004ce2(int target_value,char *array_ptr)\n\n{\n  if (target_value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array_ptr == -1) {\n      return 0;\n    }\n    if (target_value == *array_ptr) break;\n    array_ptr = array_ptr + 0xc;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08004ce2": "search_value_in_array_08004ce2",
                "param_1": "target_value",
                "param_2": "array_ptr"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d06": {
            "entrypoint": "0x08004d06",
            "current_name": "compare_and_get_nonzero_08004d06",
            "code": "\nint compare_and_get_nonzero_08004d06(int temp,int result)\n\n{\n  if (temp != result) {\n    if (temp == 0) {\n      return result;\n    }\n    if (result == 0) {\n      return temp;\n    }\n    temp = 0;\n  }\n  return temp;\n}\n\n",
            "renaming": {
                "FUN_08004d06": "compare_and_get_nonzero_08004d06",
                "param_1": "temp",
                "param_2": "result"
            },
            "calling": [
                "FUN_08004f4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d18": {
            "entrypoint": "0x08004d18",
            "current_name": "execute_callback_if_not_null_08004d18",
            "code": "\nvoid executeCallbackIfNotNull_08004d18(void)\n\n{\n  if (DAT_20000260 != (code *)0x0) {\n    (*DAT_20000260)(DAT_20000278);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d18": "execute_callback_if_not_null_08004d18"
            },
            "calling": [
                "FUN_08003ea0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d40": {
            "entrypoint": "0x08004d40",
            "current_name": "endless_loop_08004d40",
            "code": "\nvoid endlessLoop_08004d40(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004d40": "endless_loop_08004d40"
            },
            "calling": [
                "FUN_08004d40",
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08004d40"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d44": {
            "entrypoint": "0x08004d44",
            "current_name": "initialize_registers_08004d44",
            "code": "\n\n\nvoid initialize_registers_08004d44(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d44": "initialize_registers_08004d44"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d90": {
            "entrypoint": "0x08004d90",
            "current_name": "update_data_registers_08004d90",
            "code": "\n\n\nvoid updateDataRegisters_08004d90(int *dataPointer)\n\n{\n  if (*dataPointer == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*dataPointer == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*dataPointer == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*dataPointer == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d90": "update_data_registers_08004d90",
                "param_1": "dataPointer"
            },
            "calling": [
                "FUN_08004b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004df4": {
            "entrypoint": "0x08004df4",
            "current_name": "subtract_by_four_08004df4",
            "code": "\nint subtractByFour_08004df4(int input)\n\n{\n  return input + -4;\n}\n\n",
            "renaming": {
                "FUN_08004df4": "subtract_by_four_08004df4",
                "param_1": "input"
            },
            "calling": [
                "FUN_08004e12",
                "FUN_08004df8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004df8": {
            "entrypoint": "0x08004df8",
            "current_name": "execute_if_condition_met_08004df8",
            "code": "\nvoid executeIfConditionMet_08004df8(int inputValue)\n\n{\n  int result;\n  \n  result = getOffset();\n  if ((*(functionPointer **)(result + 0x4c) != (functionPointer *)0x0) && (*(char *)(inputValue + 0x1c) == '\\x01')) {\n    (**(functionPointer **)(result + 0x4c))(result,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004df8": "execute_if_condition_met_08004df8",
                "param_1": "inputValue",
                "iVar1": "result",
                "subtract_by_four_08004df4": "getOffset",
                "code": "functionPointer"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [
                "FUN_08004df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e12": {
            "entrypoint": "0x08004e12",
            "current_name": "execute_callback_function_08004e12",
            "code": "\nvoid executeCallbackFunction_08004e12(void)\n\n{\n  int result;\n  \n  result = getFunctionPointer();\n  if (*(functionPointer **)(result + 0x48) != (functionPointer *)0x0) {\n    (**(functionPointer **)(result + 0x48))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e12": "execute_callback_function_08004e12",
                "iVar1": "result",
                "subtract_by_four_08004df4": "getFunctionPointer",
                "code": "functionPointer"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [
                "FUN_08004df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e20": {
            "entrypoint": "0x08004e20",
            "current_name": "execute_conditions_callback_08004e20",
            "code": "\nvoid execute_conditions_callback_08004e20(void)\n\n{\n  if (DAT_2000027c != 0) {\n    execute_conditions_and_callbacks_08003f18();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e20": "execute_conditions_callback_08004e20"
            },
            "calling": [],
            "called": [
                "FUN_08003f18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e70": {
            "entrypoint": "0x08004e70",
            "current_name": "subtract_four_08004e70",
            "code": "\nint subtract_four_08004e70(int input)\n\n{\n  return input + -4;\n}\n\n",
            "renaming": {
                "FUN_08004e70": "subtract_four_08004e70",
                "param_1": "input"
            },
            "calling": [
                "FUN_08004ec4",
                "FUN_08004e74",
                "FUN_08004ef4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e74": {
            "entrypoint": "0x08004e74",
            "current_name": "process_params_function_08004e74",
            "code": "\nvoid process_params_function_08004e74(int param_one,int param_two,int param_three,undefined4 param_four)\n\n{\n  int result;\n  \n  result = subtract_four();\n  if (param_three == *(int *)(param_one + 0xc)) {\n    if (param_two == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5c) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      process_params(param_one,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5c) = 1;\n    set_flag_and_values(param_one,result + 0x68,0x20,8,param_four);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e74": "process_params_function_08004e74",
                "param_1": "param_one",
                "param_2": "param_two",
                "param_3": "param_three",
                "param_4": "param_four",
                "iVar1": "result",
                "subtract_four_08004e70": "subtract_four",
                "process_params_08002af8": "process_params",
                "set_flag_and_values_08002b84": "set_flag_and_values"
            },
            "calling": [
                "FUN_08002cf2"
            ],
            "called": [
                "FUN_08004e70",
                "FUN_08002b84",
                "FUN_08002af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ec4": {
            "entrypoint": "0x08004ec4",
            "current_name": "initialize_and_execute_08004ec4",
            "code": "\nvoid initialize_and_execute_08004ec4(undefined4 input_param)\n\n{\n  int temp_var1;\n  \n  temp_var1 = subtract_four_08004e70();\n  if (((*(code **)(temp_var1 + 0x60) != (code *)0x0) && (*(char *)(temp_var1 + 0x5c) == '\\x01')) &&\n     (*(char *)(temp_var1 + 0x2c) != ' ')) {\n    (**(code **)(temp_var1 + 0x60))(temp_var1 + 0x68);\n  }\n  initialize_data_08002c10(input_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ec4": "initialize_and_execute_08004ec4",
                "param_1": "input_param",
                "iVar1": "temp_var1"
            },
            "calling": [
                "FUN_0800316c",
                "FUN_08002d1c",
                "FUN_080032b4"
            ],
            "called": [
                "FUN_08004e70",
                "FUN_08002c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ef4": {
            "entrypoint": "0x08004ef4",
            "current_name": "initialize_if_data_not_initialized_08004ef4",
            "code": "\nvoid initialize_if_data_not_initialized_08004ef4(undefined4 input_param)\n\n{\n  int result;\n  \n  result = get_offset_from_base();\n  if (*(char *)(result + 0x5d) == '\\0') {\n    initialize_data_08002c10(input_param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ef4": "initialize_if_data_not_initialized_08004ef4",
                "param_1": "input_param",
                "iVar1": "result",
                "subtract_four_08004e70": "get_offset_from_base"
            },
            "calling": [
                "FUN_0800316c"
            ],
            "called": [
                "FUN_08004e70",
                "FUN_08002c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f4c": {
            "entrypoint": "0x08004f4c",
            "current_name": "configure_uart_pins_08004f4c",
            "code": "\n\n\nvoid configure_UART_pins_08004f4c(int *UART_pins)\n\n{\n  int pin1_value;\n  int pin2_value;\n  undefined4 memory_address;\n  uint pin2_default_value;\n  uint pin1_mask;\n  uint pin1_configuration;\n  uint pin1_shift;\n  undefined4 config_value;\n  \n  if (UART_pins != (int *)0x0) {\n    pin1_value = check_and_find_value_08004c78((int)*(char *)(UART_pins + 0x16),&DAT_0800764c);\n    pin2_value = check_and_find_value_08004c78((int)*(char *)((int)UART_pins + 0x59),&DAT_08007604);\n    if ((pin2_value == 0) || (pin1_value == 0)) {\n      process_and_decode_data_080068f0(\"ERROR: at least one UART pin has no peripheral\\n\",pin2_value);\n    }\n    else {\n      pin1_value = compare_and_get_nonzero_08004d06(pin1_value);\n      *UART_pins = pin1_value;\n      if (pin1_value == 0) {\n        process_and_decode_data_080068f0(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (pin1_value == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(UART_pins + 0x11) = 0;\n          *(undefined *)((int)UART_pins + 0x5a) = 0x25;\n        }\n        else if (pin1_value == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(UART_pins + 0x11) = 1;\n          *(undefined *)((int)UART_pins + 0x5a) = 0x26;\n        }\n        else if (pin1_value == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(UART_pins + 0x11) = 2;\n          *(undefined *)((int)UART_pins + 0x5a) = 0x27;\n        }\n        memory_address = get_memory_address_08004884((uint)((int)*(char *)((int)UART_pins + 0x59) << 0x18) >> 0x1c);\n        pin2_default_value = find_value_or_default_08004cce((int)*(char *)((int)UART_pins + 0x59),&DAT_08007604);\n        pin1_mask = 1 << (*(byte *)((int)UART_pins + 0x59) & 0xf) & 0xffff;\n        pin1_configuration = (pin2_default_value >> 3 & 1) << 4 | pin2_default_value & 7;\n        pin1_shift = (pin2_default_value << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((pin2_default_value << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        config_value = 3;\n        update_configuration(memory_address,&pin1_mask);\n        memory_address = get_memory_address_08004884((uint)((int)*(char *)(UART_pins + 0x16) << 0x18) >> 0x1c);\n        pin2_default_value = find_value_or_default_08004cce((int)*(char *)(UART_pins + 0x16),&DAT_0800764c);\n        pin1_mask = 1 << (*(byte *)(UART_pins + 0x16) & 0xf) & 0xffff;\n        pin1_configuration = (pin2_default_value >> 3 & 1) << 4 | pin2_default_value & 7;\n        pin1_shift = (pin2_default_value << 0x1a) >> 0x1e;\n        update_configuration(memory_address,&pin1_mask);\n        (&DAT_2000032c)[*(byte *)(UART_pins + 0x11)] = UART_pins + 1;\n        UART_pins[1] = *UART_pins;\n        UART_pins[2] = UART_pins[0x12];\n        UART_pins[3] = UART_pins[0x13];\n        UART_pins[4] = UART_pins[0x14];\n        UART_pins[5] = UART_pins[0x15];\n        UART_pins[6] = 0xc;\n        UART_pins[7] = 0;\n        UART_pins[8] = 0;\n        reset_data(UART_pins + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f4c": "configure_uart_pins_08004f4c",
                "param_1": "UART_pins",
                "iVar1": "pin1_value",
                "iVar2": "pin2_value",
                "uVar3": "memory_address",
                "uVar4": "pin2_default_value",
                "local_20": "pin1_mask",
                "local_1c": "pin1_configuration",
                "local_18": "pin1_shift",
                "local_14": "config_value",
                "update_configuration_08002624": "update_configuration",
                "reset_data_0800441a": "reset_data"
            },
            "calling": [
                "FUN_08005a68",
                "FUN_08005384"
            ],
            "called": [
                "FUN_080068f0",
                "FUN_08004c78",
                "FUN_0800441a",
                "FUN_08004d06",
                "FUN_08004cce",
                "FUN_08002624",
                "FUN_08004884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005384": {
            "entrypoint": "0x08005384",
            "current_name": "initialize_uart_08005384",
            "code": "\nvoid initializeUART_08005384(void)\n\n{\n  int result;\n  undefined4 value;\n  \n  result = check_and_find_value_08004c78(2,&DAT_0800764c);\n  if (result != 0) {\n    value = check_and_find_value_08004c78(2,&DAT_0800764c);\n    DAT_200000e1 = find_index_or_error_08004ca2(value,&DAT_08007604);\n    DAT_200000e0 = 2;\n    DAT_200000d0 = 0x2580;\n    DAT_200000dc = 0;\n    DAT_200000d4 = 0;\n    DAT_200000d8 = 0;\n    configureUARTPins(&DAT_20000088);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005384": "initialize_uart_08005384",
                "iVar1": "result",
                "uVar2": "value",
                "configure_uart_pins_08004f4c": "configureUARTPins"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08004ca2",
                "FUN_08004f4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "process_and_validate_data_080053d4",
            "code": "\nuint process_and_validate_data_080053d4(undefined4 input_parameter_1,uint input_parameter_2)\n\n{\n  int data_1;\n  int data_2;\n  uint counter;\n  \n  data_1 = get_data();\n  data_2 = check_and_find_value_08004c78(2,&DAT_0800764c);\n  if (data_2 == 0) {\n    return 0;\n  }\n  for (counter = 0;\n      (counter < 5 &&\n      (((&DAT_2000032c)[counter] == 0 ||\n       (data_2 = check_and_find_value_08004c78(2,&DAT_0800764c), *(int *)(&DAT_2000032c)[counter] != data_2))));\n      counter = counter + 1 & 0xff) {\n  }\n  if (4 < counter) {\n    if ((4 < DAT_200000cc) && (initialize_uart(), 4 < DAT_200000cc)) {\n      return 0;\n    }\n    counter = (uint)DAT_200000cc;\n  }\n  do {\n    data_2 = process_data((&DAT_2000032c)[counter],input_parameter_1,input_parameter_2 & 0xffff,1000);\n    if (data_2 == 0) {\n      return input_parameter_2;\n    }\n    data_2 = get_data();\n  } while ((uint)(data_2 - data_1) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "process_and_validate_data_080053d4",
                "param_1": "input_parameter_1",
                "param_2": "input_parameter_2",
                "iVar1": "data_1",
                "iVar2": "data_2",
                "uVar3": "counter",
                "initialize_uart_08005384": "initialize_uart",
                "process_data_08004478": "process_data",
                "get_data_08001cc4": "get_data"
            },
            "calling": [
                "FUN_08005730"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08005384",
                "FUN_08004478",
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800548c": {
            "entrypoint": "0x0800548c",
            "current_name": "is_combined_byte_valid_0800548c",
            "code": "\nbool isCombinedByteValid_0800548c(int input)\n\n{\n  uint combinedByte;\n  \n  combinedByte = combine_bytes_080047e8((&DAT_2000032c)[*(byte *)(input + 0x44)]);\n  return (combinedByte & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_0800548c": "is_combined_byte_valid_0800548c",
                "param_1": "input",
                "uVar1": "combinedByte"
            },
            "calling": [
                "FUN_08005510",
                "FUN_080054d4"
            ],
            "called": [
                "FUN_080047e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054b0": {
            "entrypoint": "0x080054b0",
            "current_name": "check_flag_status_080054b0",
            "code": "\nbool checkFlagStatus_080054b0(int flagValue)\n\n{\n  uint combinedBytes;\n  \n  combinedBytes = combine_bytes_080047e8((&DAT_2000032c)[*(byte *)(flagValue + 0x44)]);\n  return (combinedBytes & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080054b0": "check_flag_status_080054b0",
                "param_1": "flagValue",
                "uVar1": "combinedBytes"
            },
            "calling": [],
            "called": [
                "FUN_080047e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054d4": {
            "entrypoint": "0x080054d4",
            "current_name": "validate_and_extract_byte_080054d4",
            "code": "\nundefined4 validate_and_extract_byte_080054d4(int input_length,undefined *output_byte,undefined4 byte_index,undefined4 validation_data)\n\n{\n  int is_valid_byte;\n  \n  if (input_length == 0) {\n    return 0xffffffff;\n  }\n  is_valid_byte = is_combined_byte_valid_0800548c();\n  if (is_valid_byte == 0) {\n    *output_byte = *(undefined *)(input_length + 0x45);\n    validate_input_080045a2((&DAT_2000032c)[*(byte *)(input_length + 0x44)],input_length + 0x45,1,&DAT_2000032c,validation_data);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080054d4": "validate_and_extract_byte_080054d4",
                "param_1": "input_length",
                "param_2": "output_byte",
                "param_3": "byte_index",
                "param_4": "validation_data",
                "iVar1": "is_valid_byte"
            },
            "calling": [
                "FUN_0800598a"
            ],
            "called": [
                "FUN_080045a2",
                "FUN_0800548c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005510": {
            "entrypoint": "0x08005510",
            "current_name": "process_input_08005510",
            "code": "\nvoid processInput_08005510(int inputData,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  int isValid;\n  uint index;\n  \n  if (inputData != 0) {\n    isValid = is_combined_byte_valid_0800548c();\n    if (isValid == 0) {\n      index = (uint)*(byte *)(inputData + 0x44);\n      *(undefined4 *)(&DAT_200002dc + index * 4) = value1;\n      *(int *)(&DAT_200002f0 + index * 4) = inputData;\n      update_memory_08002494((int)*(char *)(inputData + 0x5a),0,1,index,value3);\n      set_bit_080024f8((int)*(char *)(inputData + 0x5a));\n      validate_input_080045a2((&DAT_2000032c)[*(byte *)(inputData + 0x44)],inputData + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005510": "process_input_08005510",
                "param_1": "inputData",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "isValid",
                "uVar2": "index"
            },
            "calling": [
                "FUN_08005a68"
            ],
            "called": [
                "FUN_080045a2",
                "FUN_080024f8",
                "FUN_08002494",
                "FUN_0800548c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005568": {
            "entrypoint": "0x08005568",
            "current_name": "update_memory_and_validate_input_08005568",
            "code": "\nvoid updateMemoryAndValidateInput_08005568(int inputData,undefined4 newData)\n\n{\n  byte byteValue;\n  \n  if (inputData != 0) {\n    byteValue = *(byte *)(inputData + 0x44);\n    *(undefined4 *)(&DAT_20000304 + (uint)byteValue * 4) = newData;\n    *(int *)(&DAT_20000318 + (uint)byteValue * 4) = inputData;\n    updateMemory((int)*(char *)(inputData + 0x5a),0,2);\n    setBit((int)*(char *)(inputData + 0x5a));\n    validateInput((&DAT_2000032c)[*(byte *)(inputData + 0x44)],\n                 *(int *)(inputData + 100) + (uint)*(ushort *)(inputData + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005568": "update_memory_and_validate_input_08005568",
                "param_1": "inputData",
                "param_2": "newData",
                "bVar1": "byteValue",
                "update_memory_08002494": "updateMemory",
                "set_bit_080024f8": "setBit",
                "validate_input_0800455a": "validateInput"
            },
            "calling": [],
            "called": [
                "FUN_0800455a",
                "FUN_080024f8",
                "FUN_08002494"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055bc": {
            "entrypoint": "0x080055bc",
            "current_name": "find_value_index_080055bc",
            "code": "\nuint find_value_index_080055bc(int value)\n\n{\n  uint index;\n  \n  if (value == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (value == (&DAT_2000032c)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080055bc": "find_value_index_080055bc",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08005604",
                "FUN_080055e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055e0": {
            "entrypoint": "0x080055e0",
            "current_name": "execute_selected_action_080055e0",
            "code": "\nvoid executeSelectedAction_080055e0(void)\n\n{\n  uint valueIndex;\n  \n  valueIndex = findValueIndex();\n  if (valueIndex < 5) {\n    (**(code **)(&DAT_200002dc + valueIndex * 4))(*(undefined4 *)(&DAT_200002f0 + valueIndex * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080055e0": "execute_selected_action_080055e0",
                "uVar1": "valueIndex",
                "find_value_index_080055bc": "findValueIndex"
            },
            "calling": [
                "FUN_08004618"
            ],
            "called": [
                "FUN_080055bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005604": {
            "entrypoint": "0x08005604",
            "current_name": "validate_and_process_input_08005604",
            "code": "\nvoid validate_and_process_input_08005604(void)\n\n{\n  uint valueIndex;\n  int result;\n  int dataPointer;\n  \n  valueIndex = find_value_index_080055bc();\n  dataPointer = *(int *)(&DAT_20000318 + valueIndex * 4);\n  if ((valueIndex < 5) && (result = (**(code **)(&DAT_20000304 + valueIndex * 4))(dataPointer), result != -1)) {\n    validate_input_0800455a((&DAT_2000032c)[*(byte *)(dataPointer + 0x44)],\n                 *(int *)(dataPointer + 100) + (uint)*(ushort *)(dataPointer + 0x6a),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005604": "validate_and_process_input_08005604",
                "uVar1": "valueIndex",
                "iVar2": "result",
                "iVar3": "dataPointer"
            },
            "calling": [
                "FUN_080045fe"
            ],
            "called": [
                "FUN_0800455a",
                "FUN_080055bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005650": {
            "entrypoint": "0x08005650",
            "current_name": "FUNC_08005650",
            "code": "\nvoid FUNC_08005650(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005650": "FUNC_08005650"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080056d8": {
            "entrypoint": "0x080056d8",
            "current_name": "allocate_memory_080056d8",
            "code": "\nundefined * allocateMemory_080056d8(int size)\n\n{\n  undefined *allocatedMemory;\n  \n  if (DAT_20000340 == (undefined *)0x0) {\n    DAT_20000340 = &DAT_200006a8;\n  }\n  allocatedMemory = DAT_20000340;\n  if (DAT_20000340 + size <= &stackBasePointer) {\n    DAT_20000340 = DAT_20000340 + size;\n    return allocatedMemory;\n  }\n  DAT_200006a4 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080056d8": "allocate_memory_080056d8",
                "param_1": "size",
                "puVar1": "allocatedMemory",
                "&stack0x00000000": "&stackBasePointer"
            },
            "calling": [
                "FUN_08006920"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "initialize_return_value_08005714",
            "code": "\nunsignedInteger initializeReturnValue_08005714(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08005714": "initialize_return_value_08005714",
                "undefined4": "unsignedInteger"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800571a": {
            "entrypoint": "0x0800571a",
            "current_name": "set_memory_page_size_0800571a",
            "code": "\nundefined4 setMemoryPageSize_0800571a(undefined4 result,int address)\n\n{\n  *(undefined4 *)(address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800571a": "set_memory_page_size_0800571a",
                "param_1": "result",
                "param_2": "address"
            },
            "calling": [
                "FUN_08007004"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005724": {
            "entrypoint": "0x08005724",
            "current_name": "check_if_one_08005724",
            "code": "\nundefined4 checkIfOne_08005724(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08005724": "check_if_one_08005724"
            },
            "calling": [
                "FUN_08007028"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005728": {
            "entrypoint": "0x08005728",
            "current_name": "initialize_application_08005728",
            "code": "\nundefined4 initializeApplication_08005728(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005728": "initialize_application_08005728"
            },
            "calling": [
                "FUN_08007048"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800572c": {
            "entrypoint": "0x0800572c",
            "current_name": "initialize_0800572c",
            "code": "\nundefined4 initialize_0800572c(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800572c": "initialize_0800572c"
            },
            "calling": [
                "FUN_0800706c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005730": {
            "entrypoint": "0x08005730",
            "current_name": "process_and_validate_08005730",
            "code": "\nvoid process_and_validate_08005730(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_data_1,undefined4 input_data_2)\n\n{\n  process_and_validate_08005730_data_080053d4(input_param_2,input_data_1,input_data_1,input_data_2,input_data_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005730": "process_and_validate_08005730",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_data_1",
                "param_4": "input_data_2"
            },
            "calling": [
                "FUN_08006f5a"
            ],
            "called": [
                "FUN_080053d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800573c": {
            "entrypoint": "0x0800573c",
            "current_name": "infinite_loop_0800573c",
            "code": "\nvoid infiniteLoop_0800573c(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800573c": "infinite_loop_0800573c"
            },
            "calling": [
                "FUN_08006ac0",
                "FUN_0800573c"
            ],
            "called": [
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005740": {
            "entrypoint": "0x08005740",
            "current_name": "initialize_data_08005740",
            "code": "\nundefined4 initializeData_08005740(void)\n\n{\n  DAT_200006a4 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08005740": "initialize_data_08005740"
            },
            "calling": [
                "FUN_08006f00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005750": {
            "entrypoint": "0x08005750",
            "current_name": "check_initialization_08005750",
            "code": "\nundefined4 checkInitialization_08005750(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08005750": "check_initialization_08005750"
            },
            "calling": [
                "thunk_FUN_08005750"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005754": {
            "entrypoint": "0x08005754",
            "current_name": "get_value_after_transformation_08005754",
            "code": "\nuint getValueAfterTransformation_08005754(uint inputValue)\n\n{\n  bool isLessThanThreshold;\n  char characterValue;\n  uint resultValue;\n  \n  if (inputValue < 0xe) {\n    if (inputValue + 0x2e < 0x3c) {\n      isLessThanThreshold = true;\n    }\n    else {\n      isLessThanThreshold = false;\n    }\n  }\n  else {\n    isLessThanThreshold = inputValue < 0x3c;\n  }\n  if (isLessThanThreshold) {\n    if (inputValue < 0xe) {\n      inputValue = inputValue + 0x2e;\n    }\n    characterValue = (&DAT_080076f0)[inputValue];\n  }\n  else {\n    characterValue = -1;\n  }\n  if (characterValue == -1) {\n    resultValue = 0;\n  }\n  else {\n    resultValue = reverse_and_update_value_08004a4c();\n    if (DAT_200000f4 != 0xc) {\n      if (DAT_200000f4 < 0xc) {\n        return resultValue >> (0xc - DAT_200000f4 & 0xff);\n      }\n      return resultValue << (DAT_200000f4 - 0xc & 0xff);\n    }\n  }\n  return resultValue;\n}\n\n",
            "renaming": {
                "FUN_08005754": "get_value_after_transformation_08005754",
                "param_1": "inputValue",
                "uVar3": "resultValue",
                "bVar1": "isLessThanThreshold",
                "cVar2": "characterValue"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08004a4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057b4": {
            "entrypoint": "0x080057b4",
            "current_name": "initialize_device_and_update_bit_080057b4",
            "code": "\nvoid initialize_device_and_update_bit_080057b4(uint device_index,undefined4 mode,undefined4 array_index,undefined *base_address)\n\n{\n  int bit_extraction_result;\n  undefined *data_ptr;\n  int value;\n  \n  if (device_index < 0x3c) {\n    value = (int)(char)(&DAT_080076f0)[device_index];\n    data_ptr = &DAT_080076f0;\n  }\n  else {\n    value = -1;\n    data_ptr = base_address;\n  }\n  if (value != -1) {\n    bit_extraction_result = extract_bit_from_uint_080047f4(value,&DAT_20000344,array_index,data_ptr,base_address);\n    if (bit_extraction_result != 0) {\n      bit_extraction_result = search_value_in_array(value,&DAT_080074b4);\n      if (bit_extraction_result != 0) {\n        process_values(value);\n      }\n      update_bit(value,&DAT_20000344);\n    }\n    switch(mode) {\n    case 0:\n      initialize_device(value,0);\n      break;\n    case 1:\n      initialize_device(value,1,0);\n      break;\n    case 2:\n      initialize_device(value,0,1);\n      break;\n    case 3:\n      initialize_device(value,0,2);\n    }\n    set_bit(value,&DAT_20000358);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057b4": "initialize_device_and_update_bit_080057b4",
                "param_1": "device_index",
                "param_2": "mode",
                "param_3": "array_index",
                "param_4": "base_address",
                "iVar1": "bit_extraction_result",
                "puVar2": "data_ptr",
                "iVar3": "value",
                "initialize_device_08004bb0": "initialize_device",
                "search_value_in_array_08004ce2": "search_value_in_array",
                "process_values_08004b3c": "process_values",
                "update_bit_08004828": "update_bit",
                "set_bit_in_array_0800480a": "set_bit"
            },
            "calling": [
                "FUN_0800157c",
                "FUN_080013a4",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08004828",
                "FUN_080047f4",
                "FUN_08004ce2",
                "FUN_08004bb0",
                "FUN_0800480a",
                "FUN_08004b3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005848": {
            "entrypoint": "0x08005848",
            "current_name": "process_parameter_08005848",
            "code": "\nvoid processParameter_08005848(uint value,undefined4 address,undefined4 condition,undefined *data)\n\n{\n  int bitResult;\n  undefined4 mappedAddress;\n  undefined *pointer;\n  uint parameter;\n  \n  if (value < 0x3c) {\n    parameter = (uint)(char)(&DAT_080076f0)[value];\n    pointer = &DAT_080076f0;\n  }\n  else {\n    parameter = 0xffffffff;\n    pointer = data;\n  }\n  if ((parameter != 0xffffffff) &&\n     (bitResult = extract_bit_from_uint_080047f4(parameter,&DAT_20000358,condition,pointer,data), bitResult != 0)) {\n    mappedAddress = map_parameter_to_address_08004848((parameter << 0x18) >> 0x1c);\n    set_value_based_on_condition_08004c30(mappedAddress,1 << (parameter & 0xf) & 0xffff,address);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005848": "process_parameter_08005848",
                "param_1": "value",
                "param_2": "address",
                "param_3": "condition",
                "param_4": "data",
                "iVar1": "bitResult",
                "uVar2": "mappedAddress",
                "puVar3": "pointer",
                "uVar4": "parameter"
            },
            "calling": [
                "FUN_08001310",
                "FUN_0800157c",
                "FUN_080012a2",
                "FUN_080012c0",
                "FUN_08000cd0",
                "FUN_080015b2",
                "FUN_080012e8",
                "FUN_080013a4",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_080047f4",
                "FUN_08004c30",
                "FUN_08004848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005890": {
            "entrypoint": "0x08005890",
            "current_name": "check_flag_validity_08005890",
            "code": "\nchar checkFlagValidity_08005890(uint inputValue)\n\n{\n  char isValidFlag;\n  int bitResult;\n  undefined4 address;\n  uint flagIndex;\n  \n  if (inputValue < 0x3c) {\n    flagIndex = (uint)(char)(&DAT_080076f0)[inputValue];\n  }\n  else {\n    flagIndex = 0xffffffff;\n  }\n  if (flagIndex == 0xffffffff) {\n    isValidFlag = '\\0';\n  }\n  else {\n    bitResult = extract_bit_from_uint_080047f4(flagIndex,&DAT_20000358);\n    if (bitResult == 0) {\n      isValidFlag = '\\0';\n    }\n    else {\n      address = map_parameter_to_address_08004848((flagIndex << 0x18) >> 0x1c);\n      isValidFlag = check_bit_flag_08004c48(address,1 << (flagIndex & 0xf) & 0xffff);\n    }\n  }\n  if (isValidFlag != '\\0') {\n    isValidFlag = '\\x01';\n  }\n  return isValidFlag;\n}\n\n",
            "renaming": {
                "FUN_08005890": "check_flag_validity_08005890",
                "param_1": "inputValue",
                "cVar1": "isValidFlag",
                "iVar2": "bitResult",
                "uVar3": "address",
                "uVar4": "flagIndex"
            },
            "calling": [
                "FUN_08000cd0",
                "FUN_080015b2"
            ],
            "called": [
                "FUN_08004c48",
                "FUN_080047f4",
                "FUN_08004848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058e0": {
            "entrypoint": "0x080058e0",
            "current_name": "initialize_data_080058e0",
            "code": "\nvoid initializeData_080058e0(void)\n\n{\n  initializeData_080058e0_08004b94();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058e0": "initialize_data_080058e0",
                "initialize_data_08004b94": "initializeData_08004b94"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08001ab0",
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08004b94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058e8": {
            "entrypoint": "0x080058e8",
            "current_name": "FUNC_080058e8",
            "code": "\nvoid FUNC_080058e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058e8": "FUNC_080058e8"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800591e": {
            "entrypoint": "0x0800591e",
            "current_name": "calculate_result_0800591e",
            "code": "\nushort calculateResult_0800591e(int inputValue)\n\n{\n  return (*(short *)(inputValue + 0x134) + 0x40) - *(short *)(inputValue + 0x136) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_0800591e": "calculate_result_0800591e",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08005a18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800598a": {
            "entrypoint": "0x0800598a",
            "current_name": "extract_and_validate_byte_0800598a",
            "code": "\nvoid extractAndValidateByte_0800598a(int originalInput)\n\n{\n  int validationResult;\n  ushort newIndex;\n  undefined extractedByte;\n  \n  validationResult = validate_and_extract_byte_080054d4(originalInput,&extractedByte);\n  if ((validationResult == 0) &&\n     (newIndex = *(short *)(originalInput + 0x60) + 1U & 0x3f, newIndex != *(ushort *)(originalInput + 0x62))) {\n    *(undefined *)(*(int *)(originalInput + 0x5c) + (uint)*(ushort *)(originalInput + 0x60)) = extractedByte;\n    *(ushort *)(originalInput + 0x60) = newIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800598a": "extract_and_validate_byte_0800598a",
                "param_1": "originalInput",
                "iVar1": "validationResult",
                "uVar2": "newIndex",
                "local_9": "extractedByte"
            },
            "calling": [],
            "called": [
                "FUN_080054d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a18": {
            "entrypoint": "0x08005a18",
            "current_name": "FUNC_08005a18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005a1e) */\n/* WARNING: Removing unreachable block (ram,0x08005a30) */\n/* WARNING: Removing unreachable block (ram,0x08005a26) */\n/* WARNING: Removing unreachable block (ram,0x08005a38) */\n\nvoid FUNC_08005a18(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a18": "FUNC_08005a18"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [
                "FUN_0800591e"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a44": {
            "entrypoint": "0x08005a44",
            "current_name": "initialize_parameters_08005a44",
            "code": "\nvoid initializeParameters_08005a44(int baseAddress)\n\n{\n  *(int *)(baseAddress + 0x130) = baseAddress + 0x11;\n  *(undefined2 *)(baseAddress + 0x134) = 0;\n  *(undefined2 *)(baseAddress + 0x136) = 0;\n  *(int *)(baseAddress + 0x138) = baseAddress + 0x51;\n  *(undefined2 *)(baseAddress + 0x13c) = 0;\n  *(undefined2 *)(baseAddress + 0x13e) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a44": "initialize_parameters_08005a44",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_08005b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "configure_serial_port_08005a68",
            "code": "\nvoid configureSerialPort_08005a68(int serialPortAddress,undefined4 baudRate,byte controlByte)\n\n{\n  uint temp;\n  char *errorMessage;\n  byte controlFlag;\n  int configurationFlag;\n  byte *bytePointer;\n  char character;\n  int offset;\n  code *jumpTable;\n  \n  *(undefined4 *)(serialPortAddress + 0x11c) = baudRate;\n  *(byte *)(serialPortAddress + 0x140) = controlByte;\n  controlFlag = controlByte & 7;\n  if (controlFlag == 4) {\n    configurationFlag = 7;\n  }\n  else if (controlFlag == 6) {\n    configurationFlag = 8;\n  }\n  else if (controlFlag == 2) {\n    configurationFlag = 6;\n  }\n  else {\n    configurationFlag = 0;\n  }\n  if ((controlByte & 0x30) == 0x30) {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0x600;\n    configurationFlag = configurationFlag + 1;\n  }\n  else if ((controlByte & 0x20) == 0) {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0x400;\n    configurationFlag = configurationFlag + 1;\n  }\n  if ((controlByte & 8) == 0) {\n    *(undefined4 *)(serialPortAddress + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPortAddress + 0x124) = 0x2000;\n  }\n  if (configurationFlag == 8) {\n    *(undefined4 *)(serialPortAddress + 0x120) = 0;\n  }\n  else if (configurationFlag == 9) {\n    *(undefined4 *)(serialPortAddress + 0x120) = 0x1000;\n  }\n  else {\n    configurationFlag = 0;\n  }\n  if (configurationFlag != 0) {\n    configure_uart_pins_08004f4c(serialPortAddress + 0xd4);\n    process_input_08005510(serialPortAddress + 0xd4,0x800598b);\n    return;\n  }\n  errorMessage = \"void HardwareSerial::begin(long unsigned int, byte)\";\n  jumpTable = (code *)0x8005b12;\n  handle_assertion_failure_0800611c(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n  bytePointer = *(byte **)(temp + offset);\n  errorMessage[0x1e] = character;\n  *(undefined *)(*bytePointer + 0x1e) = 0;\n  if (temp < 0x3c) {\n    uRam0000012d = (&DAT_080076f0)[temp];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08005b30. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "configure_serial_port_08005a68",
                "param_1": "serialPortAddress",
                "param_2": "baudRate",
                "param_3": "controlByte",
                "extraout_r1": "temp",
                "pcVar1": "errorMessage",
                "bVar2": "controlFlag",
                "iVar3": "configurationFlag",
                "pbVar4": "bytePointer",
                "unaff_r4": "character",
                "unaff_r6": "offset",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08005510",
                "FUN_08004f4c",
                "FUN_0800611c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b24": {
            "entrypoint": "0x08005b24",
            "current_name": "set_byte_value_08005b24",
            "code": "\nvoid setByteValue_08005b24(int targetAddress,uint valueIndex)\n\n{\n  undefined byteValue;\n  code *jumpTable;\n  \n  if (valueIndex < 0x3c) {\n    byteValue = (&DAT_080076f0)[valueIndex];\n  }\n  else {\n    byteValue = 0xff;\n  }\n  *(undefined *)(targetAddress + 0x12d) = byteValue;\n                    /* WARNING: Could not recover jumptable at 0x08005b30. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b24": "set_byte_value_08005b24",
                "param_1": "targetAddress",
                "param_2": "valueIndex",
                "uVar1": "byteValue",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08005b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b3c": {
            "entrypoint": "0x08005b3c",
            "current_name": "set_byte_value_08005b3c",
            "code": "\nvoid setByteValue_08005b3c(int address,uint index)\n\n{\n  undefined value;\n  \n  if (index < 0x3c) {\n    value = (&DAT_080076f0)[index];\n  }\n  else {\n    value = 0xff;\n  }\n  *(undefined *)(address + 300) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b3c": "set_byte_value_08005b3c",
                "param_1": "address",
                "param_2": "index",
                "uVar1": "value"
            },
            "calling": [
                "FUN_08005b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b54": {
            "entrypoint": "0x08005b54",
            "current_name": "initialize_param_values_08005b54",
            "code": "\nundefined4 *\ninitialize_param_values_08005b54(undefined4 *parameters,undefined4 value_1,undefined4 value_2,undefined4 value_3)\n\n{\n  undefined index;\n  \n  parameters[1] = 0;\n  parameters[2] = 1000;\n  *parameters = &PTR_LAB_080059c8_1_08007804;\n  if (parameters == (undefined4 *)&DAT_2000036c) {\n    set_byte_value_1(&DAT_2000036c,0,value_2,&DAT_2000036c,value_3);\n    set_byte_value_2(&DAT_2000036c,1);\n  }\n  else {\n    index = find_index_or_error(value_1,&DAT_08007604);\n    *(undefined *)((int)parameters + 0x12d) = index;\n    index = find_index_or_error(value_1,&DAT_0800764c);\n    *(undefined *)(parameters + 0x4b) = index;\n  }\n  initialize_parameters(parameters);\n  return parameters;\n}\n\n",
            "renaming": {
                "FUN_08005b54": "initialize_param_values_08005b54",
                "param_1": "parameters",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3",
                "uVar1": "index",
                "set_byte_value_08005b24": "set_byte_value_1",
                "set_byte_value_08005b3c": "set_byte_value_2",
                "find_index_or_error_08004ca2": "find_index_or_error",
                "initialize_parameters_08005a44": "initialize_parameters"
            },
            "calling": [
                "FUN_08005bb0"
            ],
            "called": [
                "FUN_08005a44",
                "FUN_08004ca2",
                "FUN_08005b3c",
                "FUN_08005b24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bb0": {
            "entrypoint": "0x08005bb0",
            "current_name": "initialize_if_param_one_08005bb0",
            "code": "\nvoid initialize_if_param_one_08005bb0(int value_one,int value_two,undefined4 value_three,undefined4 value_four)\n\n{\n  if (value_one != 1) {\n    return;\n  }\n  if (value_two == 0xffff) {\n    initialize_param_values(&DAT_2000036c,0x40004400,value_three,0xffff,value_four);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bb0": "initialize_if_param_one_08005bb0",
                "param_1": "value_one",
                "param_2": "value_two",
                "param_3": "value_three",
                "param_4": "value_four",
                "initialize_param_values_08005b54": "initialize_param_values"
            },
            "calling": [],
            "called": [
                "FUN_08005b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c1c": {
            "entrypoint": "0x08005c1c",
            "current_name": "initialize_data_08005c1c",
            "code": "\nvoid initialize_data_08005c1c(undefined4 *output_ptr,undefined value_1,undefined value_2,undefined value_3,\n                 undefined value_4)\n\n{\n  *output_ptr = &DAT_08007858;\n  *(undefined *)(output_ptr + 1) = value_1;\n  *(undefined *)((int)output_ptr + 5) = value_2;\n  *(undefined *)((int)output_ptr + 6) = value_3;\n  *(undefined *)((int)output_ptr + 7) = value_4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005c1c": "initialize_data_08005c1c",
                "param_1": "output_ptr",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3",
                "param_5": "value_4"
            },
            "calling": [
                "FUN_08005c38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c38": {
            "entrypoint": "0x08005c38",
            "current_name": "check_and_initialize_data_08005c38",
            "code": "\nvoid check_and_initialize_data_08005c38(int status,int value)\n\n{\n  if ((status == 1) && (value == 0xffff)) {\n    initialize_data_08005c1c(&DAT_200004b0,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005c38": "check_and_initialize_data_08005c38",
                "param_1": "status",
                "param_2": "value"
            },
            "calling": [],
            "called": [
                "FUN_08005c1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c96": {
            "entrypoint": "0x08005c96",
            "current_name": "process_string_08005c96",
            "code": "\nundefined4 processString_08005c96(int *input,int length,undefined4 arg1,undefined4 arg2)\n\n{\n  undefined4 strLength;\n  \n  if (length != 0) {\n    strLength = determine_string_length_08000178(length);\n    strLength = (**(code **)(*input + 4))(input,length,strLength,*(code **)(*input + 4),arg2);\n    return strLength;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005c96": "process_string_08005c96",
                "param_1": "input",
                "param_2": "length",
                "param_3": "arg1",
                "param_4": "arg2",
                "uVar1": "strLength"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08005cd4",
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08000178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cb6": {
            "entrypoint": "0x08005cb6",
            "current_name": "execute_function_08005cb6",
            "code": "\nvoid execute_function_08005cb6(undefined4 *function_pointer)\n\n{\n  (**(code **)*function_pointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb6": "execute_function_08005cb6",
                "param_1": "function_pointer"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08005d42"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cc0": {
            "entrypoint": "0x08005cc0",
            "current_name": "execute_function_08005cc0",
            "code": "\nvoid executeFunction_08005cc0(int *functionPointer,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  (**(code **)(*functionPointer + 4))(functionPointer,&DAT_0800786c,2,*(code **)(*functionPointer + 4),param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cc0": "execute_function_08005cc0",
                "param_1": "functionPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08005cd4",
                "FUN_08005f40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cd4": {
            "entrypoint": "0x08005cd4",
            "current_name": "calculate_total_08005cd4",
            "code": "\nint calculateTotal_08005cd4(undefined4 inputValue)\n\n{\n  int stringResult;\n  int functionResult;\n  \n  stringResult = process_string_08005c96();\n  functionResult = execute_function_08005cc0(inputValue);\n  return functionResult + stringResult;\n}\n\n",
            "renaming": {
                "FUN_08005cd4": "calculate_total_08005cd4",
                "param_1": "inputValue",
                "iVar1": "stringResult",
                "iVar2": "functionResult"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005cc0",
                "FUN_08005c96"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005ce8": {
            "entrypoint": "0x08005ce8",
            "current_name": "convert_decimal_to_base_08005ce8",
            "code": "\nundefined4 convertDecimalToBase_08005ce8(int *outString,uint inputNumber,uint base)\n\n{\n  char convertedDigit;\n  undefined4 result;\n  uint remainder;\n  uint quotient;\n  char *currentChar;\n  char convertedString [9];\n  \n  convertedString[1] = 0;\n  if ((int)base < 2) {\n    base = 10;\n  }\n  currentChar = convertedString + 1;\n  do {\n    quotient = inputNumber / base;\n    remainder = (inputNumber & 0xff) - (quotient * base & 0xff) & 0xff;\n    currentChar = currentChar + -1;\n    convertedDigit = (char)remainder;\n    if (remainder < 10) {\n      convertedDigit = convertedDigit + '0';\n    }\n    else {\n      convertedDigit = convertedDigit + '7';\n    }\n    *currentChar = convertedDigit;\n    inputNumber = quotient;\n  } while (quotient != 0);\n  if (currentChar == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    result = determine_string_length_08000178(currentChar);\n    result = (**(code **)(*outString + 4))(outString,currentChar,result);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005ce8": "convert_decimal_to_base_08005ce8",
                "param_1": "outString",
                "param_2": "inputNumber",
                "param_3": "base",
                "cVar1": "convertedDigit",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "currentChar",
                "local_15": "convertedString"
            },
            "calling": [
                "FUN_08005d8a",
                "FUN_08005d42"
            ],
            "called": [
                "FUN_08000178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d42": {
            "entrypoint": "0x08005d42",
            "current_name": "convert_number_to_base_08005d42",
            "code": "\nint convert_number_to_base_08005d42(undefined4 *function_ptr,uint number,uint base)\n\n{\n  int result;\n  int negative_result;\n  \n  if (base == 0) {\n    result = (**(code **)*function_ptr)(function_ptr,number & 0xff);\n    return result;\n  }\n  if (base != 10) {\n    result = convert_decimal_to_base_08005ce8(function_ptr,number,base & 0xff);\n    return result;\n  }\n  if (-1 < (int)number) {\n    result = convert_decimal_to_base_08005ce8(function_ptr,number,10);\n    return result;\n  }\n  result = execute_function_08005cb6(function_ptr,0x2d);\n  negative_result = convert_decimal_to_base_08005ce8(function_ptr,-number,10);\n  return negative_result + result;\n}\n\n",
            "renaming": {
                "FUN_08005d42": "convert_number_to_base_08005d42",
                "param_1": "function_ptr",
                "param_2": "number",
                "param_3": "base",
                "iVar1": "result",
                "iVar2": "negative_result"
            },
            "calling": [
                "FUN_08005d82"
            ],
            "called": [
                "FUN_08005cb6",
                "FUN_08005ce8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d82": {
            "entrypoint": "0x08005d82",
            "current_name": "convert_number_to_base_08005d82",
            "code": "\nvoid convert_number_to_base_08005d82(void)\n\n{\n  number_to_convert();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d82": "convert_number_to_base_08005d82",
                "convert_number_to_base_08005d42": "number_to_convert"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005d42"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d8a": {
            "entrypoint": "0x08005d8a",
            "current_name": "convert_to_base_or_call_08005d8a",
            "code": "\nvoid convertToBaseOrCall_08005d8a(undefined4 *functionPointer,uint input,uint flag,undefined4 parameter)\n\n{\n  if (flag != 0) {\n    convertToBase(functionPointer,input,flag & 0xff);\n    return;\n  }\n  (**(function **)*functionPointer)(functionPointer,input & 0xff,0,*(function **)*functionPointer,parameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d8a": "convert_to_base_or_call_08005d8a",
                "param_1": "functionPointer",
                "param_2": "input",
                "param_3": "flag",
                "param_4": "parameter",
                "convert_decimal_to_base_08005ce8": "convertToBase",
                "code": "function"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [
                "FUN_08005ce8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005da8": {
            "entrypoint": "0x08005da8",
            "current_name": "process_and_calculate_08005da8",
            "code": "\nint process_and_calculate_08005da8(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,uint input_param_4,byte input_param_5)\n\n{\n  int result;\n  undefined4 temp_var_1;\n  int temp_var_2;\n  byte loop_counter;\n  undefined8 calculation_result_1;\n  undefined8 calculation_result_2;\n  \n  result = check_parameters_08000a2c(input_param_3,input_param_4,input_param_3,input_param_4);\n  if (result == 0) {\n    result = check_parameters_08000a2c(input_param_3,input_param_4 & 0x7fffffff,0xffffffff,0x7fefffff);\n    if ((result == 0) &&\n       (result = check_parameter_conditions_080009f0(input_param_3,input_param_4 & 0x7fffffff,0xffffffff,0x7fefffff), result == 0)) {\n      result = process_string_08005c96(input_param_1,&DAT_08007860);\n    }\n    else {\n      result = is_end_of_string_08000a18(input_param_3,input_param_4,0xe0000000,0x41efffff);\n      if (result == 0) {\n        result = is_end_of_string_080009dc(input_param_3,input_param_4,0xe0000000,0xc1efffff);\n        if (result == 0) {\n          result = is_end_of_string_080009dc(input_param_3,input_param_4,0,0);\n          if (result == 0) {\n            result = 0;\n          }\n          else {\n            result = execute_function_08005cb6(input_param_1,0x2d);\n            input_param_4 = input_param_4 + 0x80000000;\n          }\n          calculation_result_1 = 0x3fe0000000000000;\n          for (loop_counter = 0; temp_var_1 = (undefined4)((ulonglong)calculation_result_1 >> 0x20), loop_counter < input_param_5;\n              loop_counter = loop_counter + 1) {\n            calculation_result_1 = calculate_improved_double_0800074c((int)calculation_result_1,temp_var_1,0,0x40240000);\n          }\n          calculation_result_1 = calculate_diff_08000194(input_param_3,input_param_4,(int)calculation_result_1,temp_var_1);\n          temp_var_1 = check_division_feasibility_08000aa8();\n          calculation_result_2 = reverse_bits_0800040c();\n          calculation_result_1 = perform_arithmetic_operation_08000190((int)calculation_result_1,(int)((ulonglong)calculation_result_1 >> 0x20),(int)calculation_result_2,\n                               (int)((ulonglong)calculation_result_2 >> 0x20));\n          temp_var_2 = convert_to_base_or_call_08005d8a(input_param_1,temp_var_1,10);\n          result = result + temp_var_2;\n          if (input_param_5 != 0) {\n            temp_var_2 = process_string_08005c96(input_param_1,&DAT_08007868);\n            result = result + temp_var_2;\n          }\n          while (input_param_5 != 0) {\n            calculation_result_1 = calculate_shifted_result_080004f8((int)calculation_result_1,(int)((ulonglong)calculation_result_1 >> 0x20),0,0x40240000);\n            temp_var_1 = calculate_signed_division_08000a58();\n            temp_var_2 = convert_number_to_base_08005d82(input_param_1,temp_var_1,10);\n            result = result + temp_var_2;\n            calculation_result_2 = extend_unsigned_number_0800042c(temp_var_1);\n            calculation_result_1 = perform_arithmetic_operation_08000190((int)calculation_result_1,(int)((ulonglong)calculation_result_1 >> 0x20),(int)calculation_result_2,\n                                 (int)((ulonglong)calculation_result_2 >> 0x20));\n            input_param_5 = input_param_5 - 1;\n          }\n        }\n        else {\n          result = process_string_08005c96(input_param_1,&DAT_08007864);\n        }\n      }\n      else {\n        result = process_string_08005c96(input_param_1,&DAT_08007864);\n      }\n    }\n  }\n  else {\n    result = process_string_08005c96(input_param_1,&DAT_0800785c);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005da8": "process_and_calculate_08005da8",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "param_5": "input_param_5",
                "iVar1": "result",
                "uVar2": "temp_var_1",
                "iVar3": "temp_var_2",
                "bVar4": "loop_counter",
                "uVar5": "calculation_result_1",
                "uVar6": "calculation_result_2"
            },
            "calling": [
                "FUN_08005f2c"
            ],
            "called": [
                "FUN_08005d8a",
                "FUN_08005cb6",
                "FUN_0800074c",
                "FUN_080009dc",
                "FUN_08005d82",
                "FUN_08000a58",
                "FUN_08000194",
                "FUN_080004f8",
                "FUN_08005c96",
                "FUN_08000a2c",
                "FUN_08000a18",
                "FUN_0800040c",
                "FUN_080009f0",
                "FUN_08000aa8",
                "FUN_08000190",
                "FUN_0800042c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f2c": {
            "entrypoint": "0x08005f2c",
            "current_name": "process_data_08005f2c",
            "code": "\nvoid process_data_08005f2c(void)\n\n{\n  process_and_calculate_08005da8();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f2c": "process_data_08005f2c"
            },
            "calling": [
                "FUN_08005f40",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005da8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f40": {
            "entrypoint": "0x08005f40",
            "current_name": "calculate_total_08005f40",
            "code": "\nint calculate_total_08005f40(undefined4 input_param)\n\n{\n  int data_result;\n  int function_result;\n  \n  data_result = process_data_08005f2c();\n  function_result = execute_function_08005cc0(input_param);\n  return function_result + data_result;\n}\n\n",
            "renaming": {
                "FUN_08005f40": "calculate_total_08005f40",
                "param_1": "input_param",
                "iVar1": "data_result",
                "iVar2": "function_result"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005cc0",
                "FUN_08005f2c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f5c": {
            "entrypoint": "0x08005f5c",
            "current_name": "FUNC_08005f5c",
            "code": "\nvoid FUNC_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f5c": "FUNC_08005f5c"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005f5e": {
            "entrypoint": "0x08005f5e",
            "current_name": "initialize_system_and_update_parameters_08005f5e",
            "code": "\nvoid initialize_system_and_update_parameters_08005f5e(void)\n\n{\n  update_parameter(3);\n  initialize_system();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f5e": "initialize_system_and_update_parameters_08005f5e",
                "update_parameter_08002470": "update_parameter",
                "initialize_system_08001c32": "initialize_system"
            },
            "calling": [
                "FUN_08006198"
            ],
            "called": [
                "FUN_08001c32",
                "FUN_08002470"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f6c": {
            "entrypoint": "0x08005f6c",
            "current_name": "continuous_data_processing_08005f6c",
            "code": "\nvoid continuousDataProcessing_08005f6c(void)\n\n{\n  FUNC_08005f5c();\n  initializeDeviceAndData();\n  do {\n    processData();\n    FUNC_08005a18();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005f6c": "continuous_data_processing_08005f6c",
                "initialize_device_and_data_08000bcc": "initializeDeviceAndData",
                "process_data_08000cd0": "processData"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08005a18",
                "FUN_08000cd0",
                "FUN_08000bcc",
                "FUN_08005f5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f8c": {
            "entrypoint": "0x08005f8c",
            "current_name": "count_set_bits_08005f8c",
            "code": "\nchar countSetBits_08005f8c(uint number)\n\n{\n  char bitsCount;\n  \n  bitsCount = '\\0';\n  for (; number != 1; number = number >> 1) {\n    bitsCount = bitsCount + '\\x01';\n  }\n  return bitsCount;\n}\n\n",
            "renaming": {
                "FUN_08005f8c": "count_set_bits_08005f8c",
                "param_1": "number",
                "cVar1": "bitsCount"
            },
            "calling": [
                "FUN_080060e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005fc8": {
            "entrypoint": "0x08005fc8",
            "current_name": "initialize_data_08005fc8",
            "code": "\nvoid initializeData_08005fc8(int condition,int value,undefined4 unused1,undefined4 unused2)\n\n{\n  if (condition != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_200004b8 = 6;\n    DAT_200004c4 = 0;\n    DAT_200004cc = 7;\n    DAT_200004d8 = 0;\n    DAT_200004e0 = 8;\n    DAT_200004ec = 0;\n    DAT_200004f4 = 9;\n    DAT_20000500 = 0;\n    DAT_20000508 = 10;\n    DAT_20000514 = 0;\n    DAT_2000051c = 0x17;\n    DAT_20000528 = 0;\n    DAT_20000530 = 0x17;\n    DAT_2000053c = 0;\n    DAT_20000544 = 0x17;\n    DAT_20000550 = 0;\n    DAT_20000558 = 0x17;\n    DAT_20000564 = 0;\n    DAT_2000056c = 0x17;\n    DAT_20000578 = 0;\n    DAT_20000580 = 0x28;\n    DAT_2000058c = 0;\n    DAT_20000594 = 0x28;\n    DAT_200005a0 = 0;\n    DAT_200005a8 = 0x28;\n    DAT_200005b4 = 0;\n    DAT_200005bc = 0x28;\n    DAT_200005c8 = 0;\n    DAT_200005d0 = 0x28;\n    DAT_200005dc = 0;\n    DAT_200005e4 = 0x28;\n    DAT_200005f0 = 0;\n    shift_values_08006112(0,&LAB_08005fa0_1,&DAT_20000000,&DAT_200004b8,unused2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fc8": "initialize_data_08005fc8",
                "param_1": "condition",
                "param_2": "value",
                "param_3": "unused1",
                "param_4": "unused2"
            },
            "calling": [],
            "called": [
                "FUN_08006112"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060d4": {
            "entrypoint": "0x080060d4",
            "current_name": "handle_pending_data_080060d4",
            "code": "\nvoid handlePendingData_080060d4(int dataPointer)\n\n{\n  int bitCount;\n  \n  if (*(int *)(dataPointer + 8) != 0) {\n    (**(code **)(dataPointer + 0xc))();\n    return;\n  }\n  handleData();\n  bitCount = countSetBits();\n  if ((&DAT_200004c4)[bitCount * 5] != 0) {\n    handlePendingData_080060d4();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060d4": "handle_pending_data_080060d4",
                "param_1": "dataPointer",
                "iVar1": "bitCount",
                "handle_data_08007090": "handleData",
                "count_set_bits_08005f8c": "countSetBits"
            },
            "calling": [
                "FUN_080060e4"
            ],
            "called": [
                "FUN_08007090"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060e4": {
            "entrypoint": "0x080060e4",
            "current_name": "check_and_handle_pending_data_080060e4",
            "code": "\nvoid checkAndHandlePendingData_080060e4(void)\n\n{\n  int bitsCount;\n  \n  bitsCount = countSetBits();\n  if ((&DAT_200004c4)[bitsCount * 5] != 0) {\n    handlePendingData();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060e4": "check_and_handle_pending_data_080060e4",
                "iVar1": "bitsCount",
                "count_set_bits_08005f8c": "countSetBits",
                "handle_pending_data_080060d4": "handlePendingData"
            },
            "calling": [
                "FUN_0800282c"
            ],
            "called": [
                "FUN_08005f8c",
                "FUN_080060d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006112": {
            "entrypoint": "0x08006112",
            "current_name": "shift_values_08006112",
            "code": "\nvoid shiftValues_08006112(undefined4 value1,undefined4 value2)\n\n{\n  shift64_bit_08006158(value2,value1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006112": "shift_values_08006112",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08005fc8"
            ],
            "called": [
                "FUN_08006158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800611c": {
            "entrypoint": "0x0800611c",
            "current_name": "handle_assertion_failure_0800611c",
            "code": "\nvoid handleAssertionFailure_0800611c(undefined4 file,undefined4 line,char *assertion,undefined4 function)\n\n{\n  undefined4 ptr1;\n  char *delimiter;\n  undefined8 result;\n  undefined4 ptr4;\n  \n  ptr1 = *(undefined4 *)(DAT_200000f8 + 0xc);\n  ptr4 = function;\n  if (assertion == (char *)0x0) goto LAB_08006140;\n  delimiter = \", function: \";\n  do {\n    process_and_decode_data_08006174(ptr1,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",function,file,line\n                 ,delimiter,assertion,ptr4);\n    result = process_and_handle_data_08006ac0();\n    line = (undefined4)((ulonglong)result >> 0x20);\n    ptr1 = (undefined4)result;\nLAB_08006140:\n    assertion = \"\";\n    delimiter = assertion;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800611c": "handle_assertion_failure_0800611c",
                "param_1": "file",
                "param_2": "line",
                "param_3": "assertion",
                "param_4": "function",
                "uVar1": "ptr1",
                "pcVar2": "delimiter",
                "uVar3": "result",
                "uVar4": "ptr4"
            },
            "calling": [
                "FUN_08005a68"
            ],
            "called": [
                "FUN_08006174",
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006158": {
            "entrypoint": "0x08006158",
            "current_name": "shift64_bit_08006158",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08006160) */\n\nlonglong shift64Bit_08006158(undefined4 inputValue,uint shiftAmount)\n\n{\n  return (ulonglong)shiftAmount << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08006158": "shift64_bit_08006158",
                "param_1": "inputValue",
                "param_2": "shiftAmount"
            },
            "calling": [
                "FUN_08006112"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006174": {
            "entrypoint": "0x08006174",
            "current_name": "process_and_decode_data_08006174",
            "code": "\nvoid processAndDecodeData_08006174(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,undefined4 inputParam4)\n\n{\n  undefined4 decodedValue;\n  undefined4 temporaryValue;\n  \n  decodedValue = inputParam3;\n  temporaryValue = inputParam4;\n  process_and_decode_data_08006394(DAT_200000f8,inputParam1,inputParam2,&decodedValue,inputParam1,&decodedValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006174": "process_and_decode_data_08006174",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "uStack_8": "decodedValue",
                "uStack_4": "temporaryValue"
            },
            "calling": [
                "FUN_0800611c"
            ],
            "called": [
                "FUN_08006394"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006198": {
            "entrypoint": "0x08006198",
            "current_name": "execute_functions_08006198",
            "code": "\nvoid executeFunctions_08006198(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08007944)[index])();\n  }\n  FUNC_08007328();\n  for (index = 0; index != 10; index = index + 1) {\n    (*(code *)(&DAT_08007944)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006198": "execute_functions_08006198",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08007328",
                "FUN_08005f5e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080061e0": {
            "entrypoint": "0x080061e0",
            "current_name": "fill_array_with_value_080061e0",
            "code": "\nvoid fillArrayWithValue_080061e0(undefined *array,undefined value,int size)\n\n{\n  undefined *endPointer;\n  \n  endPointer = array + size;\n  for (; array != endPointer; array = array + 1) {\n    *array = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080061e0": "fill_array_with_value_080061e0",
                "param_1": "array",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "endPointer"
            },
            "calling": [
                "FUN_08006c88",
                "FUN_08006c40",
                "FUN_08006d14",
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080061f0": {
            "entrypoint": "0x080061f0",
            "current_name": "insert_element_at_front_080061f0",
            "code": "\nvoid insertElementAtFront_080061f0(undefined4 *result,int size,undefined4 arg3,undefined4 arg4)\n\n{\n  int **temp1;\n  int **temp2;\n  int **temp3;\n  int *temp4;\n  int **temp5;\n  int **temp6;\n  \n  if (size == 0) {\n    return;\n  }\n  temp6 = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    temp6 = (int **)((int)temp6 + *(int *)(size + -4));\n  }\n  FUNC_08006eac();\n  temp3 = (int **)&DAT_200005f8;\n  if (DAT_200005f8 == (int **)0x0) {\n    temp6[1] = (int *)0x0;\n    temp2 = temp1;\n    DAT_200005f8 = temp6;\n  }\n  else {\n    temp3 = DAT_200005f8;\n    if (temp6 < DAT_200005f8) {\n      temp2 = (int **)*temp6;\n      temp3 = (int **)((int)temp6 + (int)temp2);\n      if (DAT_200005f8 == temp3) {\n        temp4 = *DAT_200005f8;\n        DAT_200005f8 = (int **)DAT_200005f8[1];\n        temp3 = (int **)((int)temp4 + (int)temp2);\n        *temp6 = (int *)temp3;\n      }\n      temp6[1] = (int *)DAT_200005f8;\n      DAT_200005f8 = temp6;\n    }\n    else {\n      do {\n        temp5 = temp3;\n        temp3 = (int **)temp5[1];\n        if (temp3 == (int **)0x0) break;\n      } while (temp3 <= temp6);\n      temp2 = (int **)*temp5;\n      if ((int **)((int)temp5 + (int)temp2) == temp6) {\n        temp2 = (int **)((int)temp2 + (int)*temp6);\n        *temp5 = (int *)temp2;\n        if (temp3 == (int **)((int)temp5 + (int)temp2)) {\n          temp4 = *temp3;\n          temp3 = (int **)temp3[1];\n          temp2 = (int **)((int)temp2 + (int)temp4);\n          *temp5 = (int *)temp2;\n          temp5[1] = (int *)temp3;\n        }\n      }\n      else if (temp6 < (int **)((int)temp5 + (int)temp2)) {\n        *result = 0xc;\n      }\n      else {\n        temp2 = (int **)((int)temp6 + (int)*temp6);\n        if (temp3 == temp2) {\n          temp4 = *temp3;\n          temp3 = (int **)temp3[1];\n          temp2 = (int **)((int)temp4 + (int)*temp6);\n          *temp6 = (int *)temp2;\n        }\n        temp6[1] = (int *)temp3;\n        temp5[1] = (int *)temp6;\n      }\n    }\n  }\n  FUNC_08006eae(result,temp2,temp3,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080061f0": "insert_element_at_front_080061f0",
                "param_1": "result",
                "param_2": "size",
                "param_3": "arg3",
                "param_4": "arg4",
                "extraout_r1": "temp1",
                "ppiVar1": "temp2",
                "ppiVar2": "temp3",
                "piVar3": "temp4",
                "ppiVar4": "temp5",
                "ppiVar5": "temp6"
            },
            "calling": [
                "FUN_080069e4",
                "FUN_08006ac0"
            ],
            "called": [
                "FUN_08006eae",
                "FUN_08006eac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006288": {
            "entrypoint": "0x08006288",
            "current_name": "allocate_and_initialize_memory_08006288",
            "code": "\nuint allocate_and_initialize_memory_08006288(undefined4 *output,uint input_size)\n\n{\n  uint *current_block;\n  int block_difference;\n  uint *previous_block;\n  uint difference_size;\n  uint *last_block;\n  uint allocated_size;\n  \n  allocated_size = (input_size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < input_size)) {\n    *output = 0xc;\n  }\n  else {\n    FUNC_08006eac();\n    current_block = DAT_200005f8;\n    last_block = DAT_200005f8;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      difference_size = *previous_block - allocated_size;\n      if (-1 < (int)difference_size) {\n        if (difference_size < 0xc) {\n          if (last_block == previous_block) {\n            current_block = (uint *)last_block[1];\n            DAT_200005f8 = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (last_block != previous_block) {\n            last_block[1] = (uint)current_block;\n            last_block = previous_block;\n          }\n        }\n        else {\n          *previous_block = difference_size;\n          *(uint *)((int)previous_block + difference_size) = allocated_size;\n          last_block = (uint *)((int)previous_block + difference_size);\n        }\n        goto LAB_080062ec;\n      }\n      last_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_200005fc == 0) {\n      DAT_200005fc = initialize_memory(output);\n    }\n    current_block = (uint *)initialize_memory(output,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((last_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == last_block ||\n        (block_difference = initialize_memory(output,(int)last_block - (int)current_block), block_difference != -1)))) {\n      *last_block = allocated_size;\nLAB_080062ec:\n      FUNC_08006eae(output);\n      allocated_size = (int)last_block + 0xbU & 0xfffffff8;\n      block_difference = allocated_size - (int)(last_block + 1);\n      if (block_difference != 0) {\n        *(int *)((int)last_block + block_difference) = -block_difference;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *output = 0xc;\n    FUNC_08006eae(output);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006288": "allocate_and_initialize_memory_08006288",
                "param_1": "output",
                "param_2": "input_size",
                "puVar1": "current_block",
                "iVar2": "block_difference",
                "puVar3": "previous_block",
                "uVar4": "difference_size",
                "puVar5": "last_block",
                "uVar6": "allocated_size",
                "initialize_memory_08006920": "initialize_memory"
            },
            "calling": [
                "FUN_08006c88",
                "FUN_08006e10"
            ],
            "called": [
                "FUN_08006eae",
                "FUN_08006eac",
                "FUN_08006920"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006344": {
            "entrypoint": "0x08006344",
            "current_name": "process_and_reverse_08006344",
            "code": "\nuint processAndReverse_08006344(int input1,byte input2,byte **input3)\n\n{\n  int temp1;\n  byte *temp2;\n  byte *temp3;\n  uint result;\n  \n  temp2 = input3[2] + -1;\n  input3[2] = temp2;\n  if ((-1 < (int)temp2) ||\n     (((int)input3[6] <= (int)temp2 && (temp2 = (byte *)(uint)input2, temp2 != (byte *)0xa))))\n  {\n    temp2 = *input3;\n    *input3 = temp2 + 1;\n    *temp2 = input2;\n    return (uint)input2;\n  }\n  if ((input1 != 0) && (*(int *)(input1 + 0x18) == 0)) {\n    initializeParamArray();\n  }\n  if (input3 == (byte **)&DAT_08007904) {\n    input3 = *(byte ***)(input1 + 4);\n  }\n  else if (input3 == (byte **)&DAT_08007924) {\n    input3 = *(byte ***)(input1 + 8);\n  }\n  else if (input3 == (byte **)&DAT_080078e4) {\n    input3 = *(byte ***)(input1 + 0xc);\n  }\n  input3[2] = input3[6];\n  temp3 = (byte *)(uint)*(ushort *)(input3 + 3);\n  temp1 = (int)temp3 << 0x1c;\n  if (((temp1 < 0) && (temp3 = input3[4], temp3 != (byte *)0x0)) ||\n     (temp1 = processData(input1,input3,temp1,temp3,temp2), temp1 == 0)) {\n    result = (uint)input2;\n    temp1 = (int)*input3 - (int)input3[4];\n    if ((temp1 < (int)input3[5]) || (temp1 = reverseAndImprove(input1,input3), temp1 == 0)) {\n      input3[2] = input3[2] + -1;\n      temp2 = *input3;\n      *input3 = temp2 + 1;\n      *temp2 = input2;\n      if ((byte *)(temp1 + 1) != input3[5]) {\n        if (-1 < (int)((uint)*(ushort *)(input3 + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      temp1 = reverseAndImprove(input1,input3);\n      if (temp1 == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08006344": "process_and_reverse_08006344",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "iVar1": "temp1",
                "pbVar2": "temp2",
                "pbVar3": "temp3",
                "uVar4": "result",
                "initialize_param_array_08006cb4": "initializeParamArray",
                "process_data_080069e4": "processData",
                "reverse_and_improve_08006be0": "reverseAndImprove"
            },
            "calling": [
                "FUN_08006370"
            ],
            "called": [
                "FUN_080069e4",
                "FUN_08006cb4",
                "FUN_08006be0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006370": {
            "entrypoint": "0x08006370",
            "current_name": "process_array_08006370",
            "code": "\nint processArray_08006370(undefined4 param1,undefined4 param2,undefined *array,int length)\n\n{\n  int result;\n  undefined *endPtr;\n  int currentPos;\n  \n  endPtr = array + length;\n  currentPos = length;\n  do {\n    if (array == endPtr) {\n      return 0;\n    }\n    result = process_and_reverse_08006344(param1,*array,param2,length,currentPos);\n    length = result + 1;\n    array = array + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006370": "process_array_08006370",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "array",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "endPtr",
                "iVar3": "currentPos"
            },
            "calling": [
                "FUN_08006394"
            ],
            "called": [
                "FUN_08006344"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006394": {
            "entrypoint": "0x08006394",
            "current_name": "process_and_decode_data_08006394",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08006568) */\n\nint process_and_decode_data_08006394(int arg1,undefined4 *arg2,byte *arg3,int *arg4)\n\n{\n  int result;\n  int *ptrVar;\n  bool isDigit;\n  byte *bytePtr1;\n  byte *bytePtr2;\n  int unaff_r9;\n  int index;\n  int *localArray;\n  uint flags;\n  int precision;\n  undefined4 localVar1;\n  int minFieldWidth;\n  int totalLength;\n  byte ch;\n  undefined fieldWidth;\n  undefined minWidth;\n  undefined signChar;\n  undefined4 wideChar;\n  \n  localArray = arg4;\n  if ((arg1 != 0) && (*(int *)(arg1 + 0x18) == 0)) {\n    initialize_param_array_08006cb4();\n  }\n  if (arg2 == &DAT_08007904) {\n    arg2 = *(undefined4 **)(arg1 + 4);\n  }\n  else if (arg2 == (undefined4 *)&DAT_08007924) {\n    arg2 = *(undefined4 **)(arg1 + 8);\n  }\n  else if (arg2 == (undefined4 *)&DAT_080078e4) {\n    arg2 = *(undefined4 **)(arg1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(arg2 + 3) << 0x1c)) || (arg2[4] == 0)) &&\n     (index = process_data_080069e4(arg1,arg2), index != 0)) {\n    return -1;\n  }\n  totalLength = 0;\n  fieldWidth = 0x20;\n  minWidth = 0x30;\n  bytePtr1 = arg3;\nLAB_080063d6:\n  bytePtr2 = bytePtr1;\n  if (*bytePtr2 != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  bytePtr1 = bytePtr2 + 1;\n  if (*bytePtr2 != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  index = (int)bytePtr2 - (int)arg3;\n  if (index != 0) {\n    result = process_array_08006370(arg1,arg2,arg3,index);\n    if (result == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(arg2 + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return totalLength;\n    }\n    totalLength = totalLength + index;\n  }\n  if (*bytePtr2 == 0) goto LAB_08006580;\n  flags = 0;\n  minFieldWidth = 0;\n  precision = -1;\n  localVar1 = 0;\n  signChar = 0;\n  wideChar = 0;\n  bytePtr1 = bytePtr2 + 1;\n  while( true ) {\n    index = find_character_08006e90(\"#-0+ \",*bytePtr1);\n    arg3 = bytePtr1 + 1;\n    if (index == 0) break;\n    flags = 1 << (index + 0xf7ff8750U & 0xff) | flags;\n    bytePtr1 = arg3;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    signChar = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    signChar = 0x2b;\n  }\n  if (*bytePtr1 == 0x2a) {\n    ptrVar = localArray + 1;\n    index = *localArray;\n    localArray = ptrVar;\n    if (index < 0) {\n      minFieldWidth = -index;\n      flags = flags | 2;\n      goto LAB_080064be;\n    }\n  }\n  else {\n    isDigit = false;\n    index = minFieldWidth;\n    arg3 = bytePtr1;\n    while( true ) {\n      if (9 < *arg3 - 0x30) break;\n      index = index * 10 + (*arg3 - 0x30);\n      isDigit = true;\n      arg3 = arg3 + 1;\n    }\n    if (!isDigit) goto LAB_080064be;\n  }\n  minFieldWidth = index;\nLAB_080064be:\n  if (*arg3 == 0x2e) {\n    if (arg3[1] == 0x2a) {\n      arg3 = arg3 + 2;\n      ptrVar = localArray + 1;\n      precision = *localArray;\n      localArray = ptrVar;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      isDigit = false;\n      index = 0;\n      precision = 0;\n      while( true ) {\n        arg3 = arg3 + 1;\n        if (9 < *arg3 - 0x30) break;\n        index = index * 10 + (*arg3 - 0x30);\n        isDigit = true;\n      }\n      if (isDigit) {\n        precision = index;\n      }\n    }\n  }\n  index = find_character_08006e90(&DAT_080078b6,*arg3,3);\n  if (index != 0) {\n    arg3 = arg3 + 1;\n    flags = flags | 0x40 << (index + 0xf7ff874aU & 0xff);\n  }\n  ch = *arg3;\n  arg3 = arg3 + 1;\n  index = find_character_08006e90(\"efgEFG\",ch,6);\n  if (index == 0) {\n    unaff_r9 = decode_and_process_080066b0(arg1,&flags,arg2,0x8006371,&localArray);\n    if (unaff_r9 == -1) goto LAB_08006580;\n  }\n  else {\n    localArray = (int *)(((int)localArray + 7U & 0xfffffff8) + 8);\n  }\n  totalLength = totalLength + unaff_r9;\n  bytePtr1 = arg3;\n  goto LAB_080063d6;\n}\n\n",
            "renaming": {
                "FUN_08006394": "process_and_decode_data_08006394",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "result",
                "piVar2": "ptrVar",
                "bVar3": "isDigit",
                "pbVar4": "bytePtr1",
                "pbVar5": "bytePtr2",
                "iVar6": "index",
                "local_8c": "localArray",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "localVar1",
                "local_7c": "minFieldWidth",
                "local_74": "totalLength",
                "local_70": "ch",
                "local_6f": "fieldWidth",
                "local_6e": "minWidth",
                "local_45": "signChar",
                "local_30": "wideChar"
            },
            "calling": [
                "FUN_080068f0",
                "FUN_08006174"
            ],
            "called": [
                "FUN_080069e4",
                "FUN_08006370",
                "FUN_08006e90",
                "FUN_080066b0",
                "FUN_08006cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080065c0": {
            "entrypoint": "0x080065c0",
            "current_name": "decode_and_count_080065c0",
            "code": "\nundefined4\ndecode_and_count_080065c0(undefined4 input,uint *data,uint *count,undefined4 param,code *callback_fn)\n\n{\n  int index;\n  int result;\n  uint max_count;\n  uint temp_count;\n  bool is_condition_met;\n  \n  max_count = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    max_count = data[2];\n  }\n  *count = max_count;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *count = max_count + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *count = *count + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *count); index = index + 1) {\n      result = (*callback_fn)(input,param,(int)data + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_count = (uint)*(byte *)((int)data + 0x43);\n  if (max_count != 0) {\n    max_count = 1;\n  }\n  temp_count = max_count;\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + max_count + 0x43) = 0x30;\n    temp_count = max_count + 2;\n    *(undefined *)((int)data + max_count + 0x44) = *(undefined *)((int)data + 0x45);\n  }\n  index = (*callback_fn)(input,param,(int)data + 0x43,temp_count);\n  if (index != -1) {\n    max_count = data[3];\n    is_condition_met = (*data & 6) != 4;\n    if (is_condition_met) {\n      max_count = 0;\n    }\n    temp_count = 0;\n    if (!is_condition_met) {\n      max_count = max_count - *count;\n    }\n    if (!is_condition_met) {\n      max_count = max_count & ~((int)max_count >> 0x1f);\n    }\n    if ((int)data[4] < (int)data[2]) {\n      max_count = max_count + (data[2] - data[4]);\n    }\n    while( true ) {\n      if (max_count == temp_count) {\n        return 0;\n      }\n      index = (*callback_fn)(input,param,(int)data + 0x1a,1);\n      if (index == -1) break;\n      temp_count = temp_count + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080065c0": "decode_and_count_080065c0",
                "param_1": "input",
                "param_2": "data",
                "param_3": "count",
                "param_4": "param",
                "param_5": "callback_fn",
                "iVar1": "index",
                "iVar2": "result",
                "uVar3": "max_count",
                "uVar4": "temp_count",
                "bVar5": "is_condition_met"
            },
            "calling": [
                "FUN_080066b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066b0": {
            "entrypoint": "0x080066b0",
            "current_name": "decode_and_process_080066b0",
            "code": "\nuint decode_and_process_080066b0(undefined4 input_data,uint *output_data,undefined4 input_size,code *process_function,uint **buffer)\n\n{\n  byte first_byte;\n  int result;\n  uint *temp_ptr;\n  int loop_counter;\n  char *hexadecimal;\n  uint flag;\n  uint **buffer_ptr;\n  char **string_ptr;\n  uint value;\n  uint size;\n  char *character_ptr;\n  char *start_ptr;\n  uint local_buffer [2];\n  \n  first_byte = *(byte *)(output_data + 6);\n  start_ptr = (char *)((int)output_data + 0x43);\n  if (first_byte != 0x6e) {\n    if (first_byte < 0x6f) {\n      if (first_byte != 99) {\n        if (first_byte < 100) {\n          if (first_byte == 0) goto LAB_0800686a;\n          if (first_byte != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)output_data + 0x45) = 0x58;\n          hexadecimal = \"0123456789ABCDEF\";\nLAB_080067fa:\n          flag = *output_data;\n          temp_ptr = *buffer;\n          *buffer = temp_ptr + 1;\n          if (((flag & 0x80) == 0) && ((int)(flag << 0x19) < 0)) {\n            value = (uint)*(ushort *)temp_ptr;\n          }\n          else {\n            value = *temp_ptr;\n          }\n          if ((int)(flag << 0x1f) < 0) {\n            *output_data = flag | 0x20;\n          }\n          if (value == 0) {\n            *output_data = *output_data & 0xffffffdf;\n          }\n          flag = 0x10;\nLAB_08006790:\n          *(undefined *)((int)output_data + 0x43) = 0;\n        }\n        else {\n          if ((first_byte != 100) && (first_byte != 0x69)) goto LAB_080066e0;\n          value = *output_data;\n          temp_ptr = *buffer;\n          if ((value & 0x80) == 0) {\n            *buffer = temp_ptr + 1;\n            if ((value & 0x40) == 0) goto LAB_08006700;\n            value = (uint)(short)*(ushort *)temp_ptr;\n          }\n          else {\n            *buffer = temp_ptr + 1;\nLAB_08006700:\n            value = *temp_ptr;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)output_data + 0x43) = 0x2d;\n          }\n          hexadecimal = \"0123456789ABCDEF\";\n          flag = 10;\n        }\n        size = output_data[1];\n        output_data[2] = size;\n        character_ptr = start_ptr;\n        if ((int)size < 0) {\n          if (value != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(char *)((int)output_data + 0x42) = *hexadecimal;\n          character_ptr = (char *)((int)output_data + 0x42);\n        }\n        else {\n          *output_data = *output_data & 0xfffffffb;\n          if (value == 0) {\n            if (size != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              size = value / flag;\n              character_ptr = character_ptr + -1;\n              *character_ptr = hexadecimal[value - flag * size];\n              value = size;\n            } while (size != 0);\n          }\n        }\n        if (((flag == 8) && ((int)(*output_data << 0x1f) < 0)) && ((int)output_data[1] <= (int)output_data[4]))\n        {\n          character_ptr[-1] = '0';\n          character_ptr = character_ptr + -1;\n        }\n        output_data[4] = (int)start_ptr - (int)character_ptr;\n        start_ptr = character_ptr;\n        goto LAB_080067d6;\n      }\n      temp_ptr = *buffer;\n      *buffer = temp_ptr + 1;\n      *(char *)((int)output_data + 0x42) = (char)*temp_ptr;\nLAB_08006740:\n      start_ptr = (char *)((int)output_data + 0x42);\n      value = 1;\n    }\n    else {\n      if (first_byte != 0x73) {\n        if (first_byte < 0x74) {\n          if (first_byte == 0x6f) {\nLAB_08006766:\n            value = *output_data;\n            temp_ptr = *buffer;\n            if ((value & 0x80) == 0) {\n              *buffer = temp_ptr + 1;\n              if ((value & 0x40) == 0) goto LAB_08006774;\n              value = (uint)*(ushort *)temp_ptr;\n            }\n            else {\n              *buffer = temp_ptr + 1;\nLAB_08006774:\n              value = *temp_ptr;\n            }\n            if (first_byte == 0x6f) {\n              flag = 8;\n            }\n            else {\n              flag = 10;\n            }\n            hexadecimal = \"0123456789ABCDEF\";\n            goto LAB_08006790;\n          }\n          if (first_byte == 0x70) {\n            *output_data = *output_data | 0x20;\nLAB_08006726:\n            hexadecimal = \"0123456789abcdef\";\n            *(undefined *)((int)output_data + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (first_byte == 0x75) goto LAB_08006766;\n          if (first_byte == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)output_data + 0x42) = first_byte;\n        goto LAB_08006740;\n      }\n      string_ptr = (char **)*buffer;\n      *buffer = (uint *)(string_ptr + 1);\n      start_ptr = *string_ptr;\n      result = find_character_08006e90(start_ptr,0,output_data[1]);\n      if (result != 0) {\n        output_data[1] = result - (int)start_ptr;\n      }\n      value = output_data[1];\n    }\n    output_data[4] = value;\n    *(undefined *)((int)output_data + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  value = *output_data;\n  buffer_ptr = (uint **)*buffer;\n  flag = output_data[5];\n  if ((value & 0x80) == 0) {\n    *buffer = (uint *)(buffer_ptr + 1);\n    temp_ptr = *buffer_ptr;\n    if ((value & 0x40) == 0) goto LAB_08006856;\n    *(short *)temp_ptr = (short)flag;\n  }\n  else {\n    *buffer = (uint *)(buffer_ptr + 1);\n    temp_ptr = *buffer_ptr;\nLAB_08006856:\n    *temp_ptr = flag;\n  }\nLAB_0800686a:\n  output_data[4] = 0;\nLAB_080067d6:\n  result = decode_and_count_080065c0(input_data,output_data,local_buffer,input_size,process_function);\n  if ((result == -1) || (result = (*process_function)(input_data,input_size,start_ptr,output_data[4]), result == -1)) {\nLAB_080067ea:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*output_data << 0x1e) < 0) {\n      for (result = 0; result < (int)(output_data[3] - local_buffer[0]); result = result + 1) {\n        loop_counter = (*process_function)(input_data,input_size,(int)output_data + 0x19,1);\n        if (loop_counter == -1) goto LAB_080067ea;\n      }\n    }\n    value = output_data[3];\n    if ((int)output_data[3] < (int)local_buffer[0]) {\n      value = local_buffer[0];\n    }\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_080066b0": "decode_and_process_080066b0",
                "param_1": "input_data",
                "param_2": "output_data",
                "param_3": "input_size",
                "param_4": "process_function",
                "param_5": "buffer",
                "bVar1": "first_byte",
                "iVar2": "result",
                "puVar3": "temp_ptr",
                "iVar4": "loop_counter",
                "pcVar5": "hexadecimal",
                "uVar6": "flag",
                "ppuVar7": "buffer_ptr",
                "ppcVar8": "string_ptr",
                "uVar9": "value",
                "uVar10": "size",
                "pcVar11": "character_ptr",
                "pcVar12": "start_ptr",
                "local_24": "local_buffer"
            },
            "calling": [
                "FUN_08006394"
            ],
            "called": [
                "FUN_08006e90",
                "FUN_080065c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068f0": {
            "entrypoint": "0x080068f0",
            "current_name": "process_and_decode_data_080068f0",
            "code": "\nvoid processAndDecodeData_080068f0(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,undefined4 inputParam4)\n\n{\n  int ptrVar;\n  undefined4 param1Var;\n  undefined4 param2Var;\n  undefined4 param3Var;\n  undefined4 param4Var;\n  \n  ptrVar = DAT_200000f8;\n  param1Var = inputParam1;\n  param2Var = inputParam2;\n  param3Var = inputParam3;\n  param4Var = inputParam4;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    initialize_param_array_08006cb4(DAT_200000f8);\n  }\n  process_and_decode_data_08006394(ptrVar,*(undefined4 *)(ptrVar + 8),inputParam1,&param2Var,param1Var,&param2Var);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080068f0": "process_and_decode_data_080068f0",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "iVar1": "ptrVar",
                "uVar2": "param1Var",
                "uStack_c": "param2Var",
                "uStack_8": "param3Var",
                "uStack_4": "param4Var"
            },
            "calling": [
                "FUN_08004f4c"
            ],
            "called": [
                "FUN_08006cb4",
                "FUN_08006394"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006920": {
            "entrypoint": "0x08006920",
            "current_name": "initialize_memory_08006920",
            "code": "\nvoid initialize_memory_08006920(int *result,undefined4 size)\n\n{\n  int allocation_result;\n  \n  DAT_200006a4 = 0;\n  allocation_result = allocate_memory_080056d8(size);\n  if ((allocation_result == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006920": "initialize_memory_08006920",
                "param_1": "result",
                "param_2": "size",
                "iVar1": "allocation_result"
            },
            "calling": [
                "FUN_08006288"
            ],
            "called": [
                "FUN_080056d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "process_data_080069e4",
            "code": "\nuint process_data_080069e4(undefined4 *output_ptr,undefined4 *input_ptr)\n\n{\n  int data_offset;\n  uint result;\n  ushort flags;\n  \n  data_offset = DAT_200000f8;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    initialize_param_array_08006cb4(DAT_200000f8);\n  }\n  if (input_ptr == &DAT_08007904) {\n    input_ptr = *(undefined4 **)(data_offset + 4);\n  }\n  else if (input_ptr == (undefined4 *)&DAT_08007924) {\n    input_ptr = *(undefined4 **)(data_offset + 8);\n  }\n  else if (input_ptr == (undefined4 *)&DAT_080078e4) {\n    input_ptr = *(undefined4 **)(data_offset + 0xc);\n  }\n  flags = *(ushort *)(input_ptr + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output_ptr = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)input_ptr[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input_ptr[0xd] != input_ptr + 0x11) {\n          insert_element_at_front_080061f0(output_ptr);\n        }\n        input_ptr[0xd] = 0;\n      }\n      *(ushort *)(input_ptr + 3) = *(ushort *)(input_ptr + 3) & 0xffdb;\n      input_ptr[1] = 0;\n      *input_ptr = input_ptr[4];\n    }\n    *(ushort *)(input_ptr + 3) = *(ushort *)(input_ptr + 3) | 8;\n  }\n  if ((input_ptr[4] == 0) && ((*(ushort *)(input_ptr + 3) & 0x280) != 0x200)) {\n    initialize_memory_08006e10(output_ptr,input_ptr);\n  }\n  flags = *(ushort *)(input_ptr + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = input_ptr[5];\n    }\n    input_ptr[2] = result;\n  }\n  else {\n    input_ptr[2] = 0;\n    input_ptr[6] = -input_ptr[5];\n  }\n  if (input_ptr[4] == 0) {\n    flags = *(ushort *)(input_ptr + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\nLAB_08006a14:\n      *(ushort *)(input_ptr + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "process_data_080069e4",
                "param_1": "output_ptr",
                "param_2": "input_ptr",
                "iVar1": "data_offset",
                "uVar2": "result",
                "uVar3": "flags"
            },
            "calling": [
                "FUN_08006344",
                "FUN_08006394"
            ],
            "called": [
                "FUN_080061f0",
                "FUN_08006cb4",
                "FUN_08006e10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_080069e4(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_200000f8;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    FUNC_08006cb4(DAT_200000f8);\n  }\n  if (param_2 == &DAT_08007904) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_08007924) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_080078e4) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          insert_element_at_front_080061f0(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    initialize_memory_08006e10(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08006a14:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "process_and_handle_data_08006ac0",
            "code": "\nvoid processAndHandleData_08006ac0(void)\n\n{\n  uint *resultPtr;\n  int var1;\n  int *dataPtr;\n  int *var2;\n  uint var3;\n  ushort var4;\n  int var5;\n  code *var7;\n  int var6;\n  uint uVar10;\n  code *jumpTableFunc;\n  bool bVar11;\n  undefined8 uVar12;\n  \n  process_data_08006f00(6);\n  jumpTableFunc = (code *)0x8006acf;\n  uVar12 = infinite_loop_0800573c(1);\n  dataPtr = (int *)((ulonglong)uVar12 >> 0x20);\n  resultPtr = (uint *)uVar12;\n  var4 = *(ushort *)(dataPtr + 3);\n  var3 = (uint)var4;\n  if ((int)(var3 << 0x1c) < 0) {\n    var1 = dataPtr[4];\n    if (var1 != 0) {\n      var5 = var3 << 0x1e;\n      bVar11 = var5 != 0;\n      if (bVar11) {\n        var5 = 0;\n      }\n      var6 = *dataPtr;\n      if (!bVar11) {\n        var5 = dataPtr[5];\n      }\n      *dataPtr = var1;\n      dataPtr[2] = var5;\n      for (var6 = var6 - var1; 0 < var6; var6 = var6 - var5) {\n        var5 = (*(code *)dataPtr[10])(resultPtr,dataPtr[8],var1,var6);\n        if (var5 < 1) {\n          var4 = *(ushort *)(dataPtr + 3);\n          goto LAB_08006bc6;\n        }\n        var1 = var1 + var5;\n      }\n    }\n  }\n  else if (((0 < dataPtr[1]) || (0 < dataPtr[0x10])) &&\n          (var7 = (code *)dataPtr[0xb], var7 != (code *)0x0)) {\n    uVar10 = *resultPtr;\n    *resultPtr = 0;\n    if ((var4 & 0x1000) == 0) {\n      var1 = (*var7)(resultPtr,dataPtr[8],var3 & 0x1000,1);\n      if ((var1 == -1) && (var3 = *resultPtr, var3 != 0)) {\n        if ((var3 != 0x1d) && (var3 != 0x16)) {\n          *(ushort *)(dataPtr + 3) = *(ushort *)(dataPtr + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jumpTableFunc)();\n          return;\n        }\n        *resultPtr = uVar10;\n        goto LAB_08006aea;\n      }\n    }\n    else {\n      var1 = dataPtr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(dataPtr + 3) << 0x1d) < 0) &&\n       (var1 = var1 - dataPtr[1], dataPtr[0xd] != 0)) {\n      var1 = var1 - dataPtr[0x10];\n    }\n    var1 = (*(code *)dataPtr[0xb])(resultPtr,dataPtr[8],var1,0);\n    var4 = *(ushort *)(dataPtr + 3);\n    if ((var1 == -1) &&\n       ((0x1d < *resultPtr || (-1 < (int)((0x20400001U >> (*resultPtr & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n      *(ushort *)(dataPtr + 3) = var4 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTableFunc)(0xffffffff);\n      return;\n    }\n    dataPtr[1] = 0;\n    *dataPtr = dataPtr[4];\n    if (((int)((uint)var4 << 0x13) < 0) && ((var1 != -1 || (*resultPtr == 0)))) {\n      dataPtr[0x15] = var1;\n    }\n    var2 = (int *)dataPtr[0xd];\n    *resultPtr = uVar10;\n    if (var2 != (int *)0x0) {\n      if (var2 != dataPtr + 0x11) {\n        insert_element_at_front_080061f0(resultPtr);\n      }\n      dataPtr[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTableFunc)();\n      return;\n    }\n  }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTableFunc)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "process_and_handle_data_08006ac0",
                "piVar3": "dataPtr",
                "puVar1": "resultPtr",
                "iVar2": "var1",
                "piVar4": "var2",
                "uVar5": "var3",
                "uVar6": "var4",
                "iVar7": "var5",
                "iVar9": "var6",
                "pcVar8": "var7",
                "UNRECOVERED_JUMPTABLE_00": "jumpTableFunc"
            },
            "calling": [
                "FUN_08007090",
                "FUN_0800611c"
            ],
            "called": [
                "FUN_080061f0",
                "FUN_08006f00",
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006be0": {
            "entrypoint": "0x08006be0",
            "current_name": "reverse_and_improve_08006be0",
            "code": "\nundefined4 reverse_and_improve_08006be0(uint *input_array,int *param_array)\n\n{\n  undefined4 result;\n  int temp_var1;\n  int *temp_var2;\n  uint ushort_val;\n  ushort ushort_var;\n  int temp_var3;\n  undefined4 unused_var1;\n  undefined4 unused_var2;\n  code *code_ptr;\n  int loop_var1;\n  uint temp_var4;\n  code *jump_table;\n  bool bool_val;\n  \n  if (param_array[4] != 0) {\n    if ((input_array != (uint *)0x0) && (input_array[6] == 0)) {\n      initialize_param_array_08006cb4();\n    }\n    if (param_array == &DAT_08007904) {\n      param_array = (int *)input_array[1];\n    }\n    else if (param_array == (int *)&DAT_08007924) {\n      param_array = (int *)input_array[2];\n    }\n    else if (param_array == (int *)&DAT_080078e4) {\n      param_array = (int *)input_array[3];\n    }\n    if (*(short *)(param_array + 3) != 0) {\n      ushort_var = *(ushort *)(param_array + 3);\n      ushort_val = (uint)ushort_var;\n      if ((int)(ushort_val << 0x1c) < 0) {\n        temp_var1 = param_array[4];\n        if (temp_var1 != 0) {\n          temp_var3 = ushort_val << 0x1e;\n          bool_val = temp_var3 != 0;\n          if (bool_val) {\n            temp_var3 = 0;\n          }\n          loop_var1 = *param_array;\n          if (!bool_val) {\n            temp_var3 = param_array[5];\n          }\n          *param_array = temp_var1;\n          param_array[2] = temp_var3;\n          for (loop_var1 = loop_var1 - temp_var1; 0 < loop_var1; loop_var1 = loop_var1 - temp_var3) {\n            temp_var3 = (*(code *)param_array[10])(input_array,param_array[8],temp_var1,loop_var1,unused_var1,unused_var2);\n            if (temp_var3 < 1) {\n              ushort_var = *(ushort *)(param_array + 3);\n              goto LAB_08006bc6;\n            }\n            temp_var1 = temp_var1 + temp_var3;\n          }\n        }\n      }\n      else if (((0 < param_array[1]) || (0 < param_array[0x10])) &&\n              (code_ptr = (code *)param_array[0xb], code_ptr != (code *)0x0)) {\n        temp_var4 = *input_array;\n        *input_array = 0;\n        if ((ushort_var & 0x1000) == 0) {\n          temp_var1 = (*code_ptr)(input_array,param_array[8],ushort_val & 0x1000,1);\n          if ((temp_var1 == -1) && (ushort_val = *input_array, ushort_val != 0)) {\n            if ((ushort_val != 0x1d) && (ushort_val != 0x16)) {\n              *(ushort *)(param_array + 3) = *(ushort *)(param_array + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              result = (*jump_table)();\n              return result;\n            }\n            *input_array = temp_var4;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          temp_var1 = param_array[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_array + 3) << 0x1d) < 0) &&\n           (temp_var1 = temp_var1 - param_array[1], param_array[0xd] != 0)) {\n          temp_var1 = temp_var1 - param_array[0x10];\n        }\n        temp_var1 = (*(code *)param_array[0xb])(input_array,param_array[8],temp_var1,0);\n        ushort_var = *(ushort *)(param_array + 3);\n        if ((temp_var1 == -1) &&\n           ((0x1d < *input_array || (-1 < (int)((0x20400001U >> (*input_array & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(param_array + 3) = ushort_var | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*jump_table)(0xffffffff);\n          return result;\n        }\n        param_array[1] = 0;\n        *param_array = param_array[4];\n        if (((int)((uint)ushort_var << 0x13) < 0) && ((temp_var1 != -1 || (*input_array == 0)))) {\n          param_array[0x15] = temp_var1;\n        }\n        temp_var2 = (int *)param_array[0xd];\n        *input_array = temp_var4;\n        if (temp_var2 != (int *)0x0) {\n          if (temp_var2 != param_array + 0x11) {\n            insert_element_at_front_080061f0(input_array);\n          }\n          param_array[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*jump_table)();\n          return result;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      result = (*jump_table)(0);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006be0": "reverse_and_improve_08006be0",
                "param_1": "input_array",
                "param_2": "param_array",
                "uVar1": "result",
                "iVar2": "temp_var1",
                "piVar3": "temp_var2",
                "uVar4": "ushort_val",
                "uVar5": "ushort_var",
                "iVar6": "temp_var3",
                "unaff_r4": "unused_var1",
                "unaff_r5": "unused_var2",
                "pcVar7": "code_ptr",
                "iVar8": "loop_var1",
                "uVar9": "temp_var4",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar10": "bool_val"
            },
            "calling": [
                "FUN_08006344"
            ],
            "called": [
                "FUN_08006cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_08006be0(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08006cb4();\n    }\n    if (param_2 == &DAT_08007904) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_08007924) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_080078e4) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08006bc6;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            insert_element_at_front_080061f0(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08006c40": {
            "entrypoint": "0x08006c40",
            "current_name": "initialize_param_array_08006c40",
            "code": "\nvoid initializeParamArray_08006c40(undefined4 *array,undefined2 value1,undefined2 value2)\n\n{\n  *array = 0;\n  array[1] = 0;\n  array[2] = 0;\n  *(undefined2 *)(array + 3) = value1;\n  array[0x19] = 0;\n  *(undefined2 *)((int)array + 0xe) = value2;\n  array[4] = 0;\n  array[5] = 0;\n  array[6] = 0;\n  fill_array_with_value_080061e0(array + 0x17,0,8);\n  array[8] = array;\n  array[9] = 0x8006f39;\n  array[10] = 0x8006f5b;\n  array[0xb] = 0x8006f93;\n  array[0xc] = &label1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c40": "initialize_param_array_08006c40",
                "param_1": "array",
                "param_2": "value1",
                "param_3": "value2",
                "LAB_08006fb6_1": "label1"
            },
            "calling": [
                "FUN_08006cb4"
            ],
            "called": [
                "FUN_080061e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c88": {
            "entrypoint": "0x08006c88",
            "current_name": "allocate_and_initialize_memory_08006c88",
            "code": "\nundefined4 * allocate_and_initialize_memory_08006c88(undefined4 input_value,int array_length)\n\n{\n  undefined4 *allocated_memory;\n  int offset;\n  \n  offset = (array_length + -1) * 0x68;\n  allocated_memory = (undefined4 *)allocate_and_initialize_memory_08006c88_08006288(input_value,offset + 0x74);\n  if (allocated_memory != (undefined4 *)0x0) {\n    *allocated_memory = 0;\n    allocated_memory[1] = array_length;\n    allocated_memory[2] = allocated_memory + 3;\n    fill_array_with_value_080061e0(allocated_memory + 3,0,offset + 0x68);\n  }\n  return allocated_memory;\n}\n\n",
            "renaming": {
                "FUN_08006c88": "allocate_and_initialize_memory_08006c88",
                "param_1": "input_value",
                "param_2": "array_length",
                "puVar1": "allocated_memory",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_08006d14"
            ],
            "called": [
                "FUN_08006288",
                "FUN_080061e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cb4": {
            "entrypoint": "0x08006cb4",
            "current_name": "initialize_param_array_08006cb4",
            "code": "\nvoid initialize_param_array_08006cb4(undefined4 *array)\n\n{\n  undefined4 returnValue;\n  undefined4 *tempPtr;\n  \n  if (array[6] == 0) {\n    array[0x12] = 0;\n    array[0x13] = 0;\n    array[0x14] = 0;\n    tempPtr = &DAT_200000fc;\n    array[10] = &LAB_08006c34_1;\n    if (array == &DAT_200000fc) {\n      tempPtr = (undefined4 *)0x1;\n    }\n    if (array == &DAT_200000fc) {\n      array[6] = tempPtr;\n    }\n    returnValue = initialize_array_08006d14();\n    array[1] = returnValue;\n    returnValue = initialize_array_08006d14(array);\n    array[2] = returnValue;\n    returnValue = initialize_array_08006d14(array);\n    array[3] = returnValue;\n    initialize_param_array_08006cb4_08006c40(array[1],4,0);\n    initialize_param_array_08006cb4_08006c40(array[2],9,1);\n    initialize_param_array_08006cb4_08006c40(array[3],0x12,2);\n    array[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cb4": "initialize_param_array_08006cb4",
                "param_1": "array",
                "uVar1": "returnValue",
                "puVar2": "tempPtr"
            },
            "calling": [
                "FUN_080068f0",
                "FUN_080069e4",
                "FUN_08006be0",
                "FUN_08006344",
                "FUN_08006394",
                "FUN_08006d14"
            ],
            "called": [
                "FUN_08006c40",
                "FUN_08006d14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d14": {
            "entrypoint": "0x08006d14",
            "current_name": "initialize_array_08006d14",
            "code": "\nint * initializeArray_08006d14(undefined4 *output,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int *currentElement;\n  int *nextElement;\n  int **arrayPointer;\n  \n  if (DAT_20000114 == 0) {\n    initialize_param_array_08006cb4(&DAT_200000fc);\n  }\n  arrayPointer = (int **)&DAT_20000144;\n  do {\n    nextElement = arrayPointer[2];\n    currentElement = arrayPointer[1];\n    while (currentElement = (int *)((int)currentElement + -1), -1 < (int)currentElement) {\n      if (*(short *)(nextElement + 3) == 0) {\n        *(undefined2 *)((int)nextElement + 0xe) = 0xffff;\n        nextElement[0x19] = 0;\n        *(undefined2 *)(nextElement + 3) = 1;\n        *nextElement = 0;\n        nextElement[2] = 0;\n        nextElement[1] = 0;\n        nextElement[4] = 0;\n        nextElement[5] = 0;\n        nextElement[6] = 0;\n        fill_array_with_value_080061e0(nextElement + 0x17,0,8,1,input3);\n        nextElement[0xd] = 0;\n        nextElement[0xe] = 0;\n        nextElement[0x12] = 0;\n        nextElement[0x13] = 0;\n        return nextElement;\n      }\n      nextElement = nextElement + 0x1a;\n    }\n    if (*arrayPointer == (int *)0x0) {\n      currentElement = (int *)allocate_and_initialize_memory_08006c88(output,4);\n      *arrayPointer = currentElement;\n      if (currentElement == (int *)0x0) {\n        *output = 0xc;\n        return (int *)0x0;\n      }\n    }\n    arrayPointer = (int **)*arrayPointer;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006d14": "initialize_array_08006d14",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "piVar1": "currentElement",
                "piVar2": "nextElement",
                "ppiVar3": "arrayPointer"
            },
            "calling": [
                "FUN_08006cb4"
            ],
            "called": [
                "FUN_08006c88",
                "FUN_08006cb4",
                "FUN_080061e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint * FUN_08006d14(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_20000114 == 0) {\n    FUNC_08006cb4(&DAT_200000fc);\n  }\n  ppiVar3 = (int **)&DAT_20000144;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_array_with_value_080061e0(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_memory_08006c88(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n"
        },
        "FUN_08006dc8": {
            "entrypoint": "0x08006dc8",
            "current_name": "check_memory_validity_08006dc8",
            "code": "\nundefined4 checkMemoryValidity_08006dc8(undefined4 param1,int param2,undefined4 *param3,uint *param4)\n\n{\n  int result;\n  undefined4 returnValue;\n  undefined stackArray [4];\n  uint localVariable;\n  \n  if ((*(short *)(param2 + 0xe) < 0) ||\n     (result = initialize_memory_08007004(param1,(int)*(short *)(param2 + 0xe),stackArray), result < 0)) {\n    *param4 = 0;\n    if ((int)((uint)*(ushort *)(param2 + 0xc) << 0x18) < 0) {\n      returnValue = 0x40;\n      goto LAB_08006e08;\n    }\n  }\n  else {\n    *param4 = (uint)((localVariable & 0xf000) == 0x2000);\n  }\n  returnValue = 0x400;\nLAB_08006e08:\n  *param3 = returnValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006dc8": "check_memory_validity_08006dc8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "returnValue",
                "auStack_4c": "stackArray",
                "local_48": "localVariable"
            },
            "calling": [
                "FUN_08006e10"
            ],
            "called": [
                "FUN_08007004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e10": {
            "entrypoint": "0x08006e10",
            "current_name": "initialize_memory_08006e10",
            "code": "\nvoid initializeMemory_08006e10(int memoryAddress,int *memoryValues)\n\n{\n  ushort validityCheck;\n  int allocatedMemory;\n  int localMemorySize;\n  int *localMemoryValues;\n  \n  if (-1 < (int)((uint)*(ushort *)(memoryValues + 3) << 0x1e)) {\n    localMemorySize = memoryAddress;\n    localMemoryValues = memoryValues;\n    validityCheck = check_memory_validity_08006dc8(memoryAddress,memoryValues,&localMemorySize,&localMemoryValues);\n    allocatedMemory = allocate_and_initialize_memory_08006288(memoryAddress,localMemorySize);\n    if (allocatedMemory != 0) {\n      *(undefined **)(memoryAddress + 0x28) = &LAB_08006c34_1;\n      *memoryValues = allocatedMemory;\n      *(ushort *)(memoryValues + 3) = *(ushort *)(memoryValues + 3) | 0x80;\n      memoryValues[4] = allocatedMemory;\n      memoryValues[5] = localMemorySize;\n      if ((localMemoryValues != (int *)0x0) &&\n         (allocatedMemory = check_and_assign_value_08007028(memoryAddress,(int)*(short *)((int)memoryValues + 0xe)), allocatedMemory != 0)) {\n        *(ushort *)(memoryValues + 3) = *(ushort *)(memoryValues + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(memoryValues + 3) = validityCheck | *(ushort *)(memoryValues + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(memoryValues + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(memoryValues + 3) = *(ushort *)(memoryValues + 3) & 0xfffc | 2;\n  }\n  *memoryValues = (int)memoryValues + 0x47;\n  memoryValues[4] = (int)memoryValues + 0x47;\n  memoryValues[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e10": "initialize_memory_08006e10",
                "param_1": "memoryAddress",
                "param_2": "memoryValues",
                "uVar1": "validityCheck",
                "iVar2": "allocatedMemory",
                "local_18": "localMemorySize",
                "local_14": "localMemoryValues"
            },
            "calling": [
                "FUN_080069e4"
            ],
            "called": [
                "FUN_08006288",
                "FUN_08006dc8",
                "FUN_08007028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e90": {
            "entrypoint": "0x08006e90",
            "current_name": "find_character_08006e90",
            "code": "\nchar * find_character_08006e90(char *string,char target_char,int string_length)\n\n{\n  char *current_char;\n  char *next_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char;\n    if (next_char == string + string_length) {\n      return (char *)0x0;\n    }\n    current_char = next_char + 1;\n  } while (*next_char != target_char);\n  return next_char;\n}\n\n",
            "renaming": {
                "FUN_08006e90": "find_character_08006e90",
                "param_1": "string",
                "param_2": "target_char",
                "param_3": "string_length",
                "pcVar1": "current_char",
                "pcVar2": "next_char"
            },
            "calling": [
                "FUN_080066b0",
                "FUN_08006394"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006eac": {
            "entrypoint": "0x08006eac",
            "current_name": "FUNC_08006eac",
            "code": "\nvoid FUNC_08006eac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006eac": "FUNC_08006eac"
            },
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006eae": {
            "entrypoint": "0x08006eae",
            "current_name": "FUNC_08006eae",
            "code": "\nvoid FUNC_08006eae(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006eae": "FUNC_08006eae"
            },
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006f00": {
            "entrypoint": "0x08006f00",
            "current_name": "process_data_08006f00",
            "code": "\nint processData_08006f00(uint input)\n\n{\n  int *dataPointer;\n  undefined4 result;\n  int value;\n  code *functionPointer;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 *pointerArray;\n  \n  dataPointer = DAT_200000f8;\n  pointerArray = &DAT_200000f8;\n  if (0x1f < input) {\n    *DAT_200000f8 = 0x16;\n    return -1;\n  }\n  value = DAT_200000f8[0x11];\n  if ((value != 0) && (functionPointer = *(code **)(value + input * 4), functionPointer != (code *)0x0)) {\n    if (functionPointer != (code *)0x1) {\n      if (functionPointer == (code *)0xffffffff) {\n        *DAT_200000f8 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(value + input * 4) = 0;\n      (*functionPointer)(input);\n    }\n    return 0;\n  }\n  result = thunk_check_initialization_08005750(DAT_200000f8);\n  DAT_200006a4 = 0;\n  value = initialize_data_08005740(result,input,input,0,pointerArray,temp1,temp2,temp3);\n  if ((value == -1) && (DAT_200006a4 != 0)) {\n    *dataPointer = DAT_200006a4;\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_08006f00": "process_data_08006f00",
                "param_1": "input",
                "piVar1": "dataPointer",
                "uVar2": "result",
                "iVar3": "value",
                "pcVar4": "functionPointer",
                "unaff_r4": "temp1",
                "unaff_r5": "temp2",
                "in_lr": "temp3",
                "puVar5": "pointerArray"
            },
            "calling": [
                "FUN_08006ac0"
            ],
            "called": [
                "FUN_08005740",
                "thunk_FUN_08005750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08005750": {
            "entrypoint": "0x08006f34",
            "current_name": "initialize_thunk_08005750",
            "code": "\nint initialize_thunk_08005750(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_08005750": "initialize_thunk_08005750",
                "undefined4": "int"
            },
            "calling": [
                "FUN_08006f00"
            ],
            "called": [
                "FUN_08005750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f38": {
            "entrypoint": "0x08006f38",
            "current_name": "initialize_and_update_08006f38",
            "code": "\nvoid initializeAndUpdate_08006f38(undefined4 input1,int input2)\n\n{\n  int result;\n  uint newValue;\n  bool isPositive;\n  \n  result = initialize_and_check_0800706c(input1,(int)*(short *)(input2 + 0xe));\n  isPositive = -1 < result;\n  if (isPositive) {\n    newValue = *(int *)(input2 + 0x54) + result;\n  }\n  else {\n    newValue = *(ushort *)(input2 + 0xc) & 0xffffefff;\n  }\n  if (isPositive) {\n    *(uint *)(input2 + 0x54) = newValue;\n  }\n  if (!isPositive) {\n    *(short *)(input2 + 0xc) = (short)newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f38": "initialize_and_update_08006f38",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "result",
                "uVar2": "newValue",
                "bVar3": "isPositive"
            },
            "calling": [],
            "called": [
                "FUN_0800706c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f5a": {
            "entrypoint": "0x08006f5a",
            "current_name": "initialize_and_process_data_08006f5a",
            "code": "\nvoid initialize_and_process_data_08006f5a(int *result,int data,undefined4 param3,undefined4 param4)\n\n{\n  int validation_result;\n  undefined4 additional_param1;\n  undefined4 additional_param2;\n  undefined4 return_address;\n  \n  if ((int)((uint)*(ushort *)(data + 0xc) << 0x17) < 0) {\n    initialize_application_08007048(result,(int)*(short *)(data + 0xe),0,2);\n  }\n  *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) & 0xefff;\n  DAT_200006a4 = 0;\n  validation_result = process_and_validate_08005730((int)*(short *)(data + 0xe),param3,param4,param4,param4,additional_param1,\n                       additional_param2,return_address);\n  if ((validation_result == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f5a": "initialize_and_process_data_08006f5a",
                "param_1": "result",
                "param_2": "data",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "validation_result",
                "unaff_r4": "additional_param1",
                "unaff_r5": "additional_param2",
                "in_lr": "return_address"
            },
            "calling": [],
            "called": [
                "FUN_08007048",
                "FUN_08005730"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f92": {
            "entrypoint": "0x08006f92",
            "current_name": "initialize_application_08006f92",
            "code": "\nvoid initializeApplication_08006f92(undefined4 param1,int param2)\n\n{\n  int appResult;\n  ushort modifiedFlags;\n  bool isError;\n  \n  appResult = initialize_application_08007048(param1,(int)*(short *)(param2 + 0xe));\n  isError = appResult == -1;\n  if (isError) {\n    modifiedFlags = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(param2 + 0x54) = appResult;\n    modifiedFlags = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (isError) {\n    *(ushort *)(param2 + 0xc) = modifiedFlags;\n  }\n  if (!isError) {\n    *(ushort *)(param2 + 0xc) = modifiedFlags;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f92": "initialize_application_08006f92",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "appResult",
                "uVar2": "modifiedFlags",
                "bVar3": "isError"
            },
            "calling": [],
            "called": [
                "FUN_08007048"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007004": {
            "entrypoint": "0x08007004",
            "current_name": "initialize_memory_08007004",
            "code": "\nvoid initializeMemory_08007004(int *memoryPointer,undefined4 pageSize,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  \n  DAT_200006a4 = 0;\n  result = set_memory_page_size_0800571a(pageSize,param3,param3,0,param4);\n  if ((result == -1) && (DAT_200006a4 != 0)) {\n    *memoryPointer = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007004": "initialize_memory_08007004",
                "param_1": "memoryPointer",
                "param_2": "pageSize",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08006dc8"
            ],
            "called": [
                "FUN_0800571a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007028": {
            "entrypoint": "0x08007028",
            "current_name": "check_and_assign_value_08007028",
            "code": "\nvoid check_and_assign_value_08007028(int *result_ptr,undefined4 input_value)\n\n{\n  int check_result;\n  \n  DAT_200006a4 = 0;\n  check_result = check_if_one_08005724(input_value);\n  if ((check_result == -1) && (DAT_200006a4 != 0)) {\n    *result_ptr = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007028": "check_and_assign_value_08007028",
                "param_1": "result_ptr",
                "param_2": "input_value",
                "iVar1": "check_result"
            },
            "calling": [
                "FUN_08006e10"
            ],
            "called": [
                "FUN_08005724"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007048": {
            "entrypoint": "0x08007048",
            "current_name": "initialize_application_08007048",
            "code": "\nvoid initializeApplication_08007048(int *outputValue,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  \n  DAT_200006a4 = 0;\n  result = initialize_application_08005728(param2,param3,param4,param4,param4);\n  if ((result == -1) && (DAT_200006a4 != 0)) {\n    *outputValue = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007048": "initialize_application_08007048",
                "param_1": "outputValue",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08006f92",
                "FUN_08006f5a"
            ],
            "called": [
                "FUN_08005728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800706c": {
            "entrypoint": "0x0800706c",
            "current_name": "initialize_and_check_0800706c",
            "code": "\nvoid initializeAndCheck_0800706c(int *result,undefined4 paramA,undefined4 paramB,undefined4 paramC)\n\n{\n  int returnValue;\n  \n  DAT_200006a4 = 0;\n  returnValue = initialize_0800572c(paramA,paramB,paramC,paramC,paramC);\n  if ((returnValue == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800706c": "initialize_and_check_0800706c",
                "param_1": "result",
                "param_2": "paramA",
                "param_3": "paramB",
                "param_4": "paramC",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08006f38"
            ],
            "called": [
                "FUN_0800572c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007090": {
            "entrypoint": "0x08007090",
            "current_name": "handle_data_08007090",
            "code": "\nvoid handle_data_08007090(void)\n\n{\n  code *jump_table;\n  \n  jump_table = handle_data_08007090;\n  process_and_handle_data_08007090_08006ac0();\n  if (-1 < DAT_2000062c << 0x1f) {\n    DAT_2000062c = 1;\n  }\n  if (-1 < DAT_20000628 << 0x1f) {\n    DAT_20000628 = 1;\n  }\n  if (-1 < DAT_20000624 << 0x1f) {\n    DAT_20000624 = 1;\n  }\n  if (-1 < DAT_20000620 << 0x1f) {\n    DAT_20000620 = 1;\n  }\n  if (-1 < DAT_2000061c << 0x1f) {\n    DAT_2000061c = 1;\n  }\n  if (-1 < DAT_20000618 << 0x1f) {\n    DAT_20000618 = 1;\n  }\n  if (-1 < DAT_20000614 << 0x1f) {\n    DAT_20000614 = 1;\n  }\n  if (-1 < DAT_20000610 << 0x1f) {\n    DAT_20000610 = 1;\n  }\n  if (-1 < DAT_2000060c << 0x1f) {\n    DAT_2000060c = 1;\n  }\n  if (-1 < DAT_20000608 << 0x1f) {\n    DAT_20000608 = 1;\n  }\n  if (-1 < DAT_20000604 << 0x1f) {\n    DAT_20000604 = 1;\n  }\n  if (-1 < DAT_20000600 << 0x1f) {\n    DAT_20000600 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08007128. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007090": "handle_data_08007090",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "calling": [
                "FUN_080060d4"
            ],
            "called": [
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007328": {
            "entrypoint": "0x08007328",
            "current_name": "FUNC_08007328",
            "code": "\nvoid FUNC_08007328(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007328": "FUNC_08007328"
            },
            "calling": [
                "FUN_0800010c",
                "FUN_08006198"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007334": {
            "entrypoint": "0x08007334",
            "current_name": "FUNC_08007334",
            "code": "\nvoid FUNC_08007334(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007334": "FUNC_08007334"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 181313,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000190",
            "FUN_08000194",
            "FUN_0800040c",
            "FUN_0800042c",
            "FUN_080006d4",
            "FUN_080008ba",
            "FUN_0800092c",
            "FUN_08000a2c",
            "FUN_08000a58",
            "FUN_08000aa8",
            "FUN_08000ae8",
            "FUN_08001294",
            "FUN_08001cac",
            "FUN_08001cc4",
            "FUN_08001e40",
            "FUN_08001e48",
            "FUN_08001f80",
            "FUN_08002470",
            "FUN_08002494",
            "FUN_080024f8",
            "FUN_08002514",
            "FUN_08002540",
            "FUN_08002560",
            "FUN_08002582",
            "FUN_0800258c",
            "FUN_08002624",
            "FUN_08002810",
            "FUN_0800281e",
            "FUN_08002848",
            "FUN_080028d2",
            "FUN_080028de",
            "FUN_08002ab8",
            "FUN_08002ad8",
            "FUN_08002af8",
            "FUN_08002b84",
            "FUN_08002c10",
            "FUN_08002c54",
            "FUN_08002ca6",
            "FUN_08002db2",
            "FUN_08002efc",
            "FUN_08002f9c",
            "FUN_0800306c",
            "FUN_0800365c",
            "FUN_08003a68",
            "FUN_08003c44",
            "FUN_08004092",
            "FUN_08004110",
            "FUN_0800417c",
            "FUN_08004198",
            "FUN_0800455a",
            "FUN_080045a2",
            "FUN_080047e8",
            "FUN_080047f4",
            "FUN_0800480a",
            "FUN_08004828",
            "FUN_08004848",
            "FUN_08004884",
            "FUN_080049f0",
            "FUN_08004c5e",
            "FUN_08004c8a",
            "FUN_08004cb2",
            "FUN_08004ce2",
            "FUN_08004d06",
            "FUN_08004d18",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_08004d90",
            "FUN_08004df4",
            "FUN_08004e70",
            "FUN_080055bc",
            "FUN_080056d8",
            "FUN_08005714",
            "FUN_0800571a",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800572c",
            "FUN_0800573c",
            "FUN_08005740",
            "FUN_08005750",
            "FUN_0800591e",
            "FUN_08005a44",
            "FUN_08005b24",
            "FUN_08005b3c",
            "FUN_08005c1c",
            "FUN_08005cb6",
            "FUN_08005cc0",
            "FUN_08005f8c",
            "FUN_08006158",
            "FUN_08006198",
            "FUN_080061e0",
            "FUN_080061f0",
            "FUN_080065c0",
            "FUN_08006e90",
            "thunk_FUN_08005750"
        ],
        [
            "FUN_080004f8",
            "FUN_0800074c",
            "FUN_080009b8",
            "FUN_08000aec",
            "FUN_08001a66",
            "FUN_08001c3c",
            "FUN_08001f84",
            "FUN_080020f0",
            "FUN_08003688",
            "FUN_08003c50",
            "FUN_08003c70",
            "FUN_08003c90",
            "FUN_08003ea0",
            "FUN_080040b0",
            "FUN_0800412c",
            "FUN_080043b4",
            "FUN_08004974",
            "FUN_08004b34",
            "FUN_08004b94",
            "FUN_08004b9e",
            "FUN_08004bb0",
            "FUN_08004c30",
            "FUN_08004c48",
            "FUN_08004c78",
            "FUN_08004ca2",
            "FUN_08004cce",
            "FUN_08004df8",
            "FUN_08004e12",
            "FUN_08004e74",
            "FUN_08004ec4",
            "FUN_08004ef4",
            "FUN_0800548c",
            "FUN_080054b0",
            "FUN_08005568",
            "FUN_080055e0",
            "FUN_08005604",
            "FUN_08005c38",
            "FUN_08005c96",
            "FUN_08005ce8",
            "FUN_08006112",
            "FUN_080066b0",
            "FUN_08006920",
            "FUN_08006c40",
            "FUN_08006f00",
            "FUN_08007004",
            "FUN_08007028",
            "FUN_08007048",
            "FUN_0800706c"
        ],
        [
            "FUN_080009a8",
            "FUN_080009c8",
            "FUN_080009dc",
            "FUN_080009f0",
            "FUN_08001918",
            "FUN_08001c88",
            "FUN_08002004",
            "FUN_0800213c",
            "FUN_0800224c",
            "FUN_08002348",
            "FUN_08002cf2",
            "FUN_08002d1c",
            "FUN_0800316c",
            "FUN_08003ad4",
            "FUN_08003afa",
            "FUN_08003da4",
            "FUN_08003ed8",
            "FUN_08003f18",
            "FUN_08004204",
            "FUN_08004478",
            "FUN_080045fe",
            "FUN_08004618",
            "FUN_0800492c",
            "FUN_08004948",
            "FUN_080054d4",
            "FUN_08005510",
            "FUN_08005848",
            "FUN_08005890",
            "FUN_080058e0",
            "FUN_08005b54",
            "FUN_08005cd4",
            "FUN_08005d42",
            "FUN_08005d8a",
            "FUN_08005fc8",
            "FUN_08006288",
            "FUN_08006ac0",
            "FUN_08006dc8",
            "FUN_08006f38",
            "FUN_08006f92"
        ],
        [
            "FUN_08000a04",
            "FUN_08000a18",
            "FUN_080012a2",
            "FUN_080015b2",
            "FUN_08001814",
            "FUN_08001b48",
            "FUN_08001cd0",
            "FUN_08002384",
            "FUN_080032b4",
            "FUN_08003520",
            "FUN_0800441a",
            "FUN_080046b8",
            "FUN_08004b3c",
            "FUN_08004e20",
            "FUN_0800598a",
            "FUN_08005bb0",
            "FUN_08005d82",
            "FUN_08006c88",
            "FUN_08006e10"
        ],
        [
            "FUN_080012c0",
            "FUN_080012e8",
            "FUN_080015f8",
            "FUN_080016b4",
            "FUN_080018f8",
            "FUN_08001960",
            "FUN_080019f6",
            "FUN_080033b8",
            "FUN_08004a4c",
            "FUN_08004c52",
            "FUN_080057b4",
            "FUN_08005da8"
        ],
        [
            "FUN_08001310",
            "FUN_0800157c",
            "FUN_08001a44",
            "FUN_08001ab0",
            "FUN_08001c32",
            "FUN_08005754",
            "FUN_08005f2c"
        ],
        [
            "FUN_0800134e",
            "FUN_0800135a",
            "FUN_08001366",
            "FUN_0800138e",
            "FUN_08001550",
            "FUN_08001b18",
            "FUN_08005f40",
            "FUN_08005f5e"
        ],
        [
            "FUN_08000cd0",
            "FUN_080013a4"
        ],
        [
            "FUN_080014ba"
        ],
        [
            "FUN_08001510"
        ],
        [
            "FUN_08000b08"
        ],
        [
            "FUN_08007090"
        ],
        [
            "FUN_080060d4"
        ],
        [
            "FUN_080060e4"
        ],
        [
            "FUN_0800282c"
        ],
        [
            "FUN_080069e4",
            "FUN_08006be0",
            "FUN_08006d14"
        ],
        [
            "FUN_08006cb4"
        ],
        [
            "FUN_08006344"
        ],
        [
            "FUN_08006370"
        ],
        [
            "FUN_08006394"
        ],
        [
            "FUN_08006174",
            "FUN_080068f0"
        ],
        [
            "FUN_08004f4c",
            "FUN_0800611c"
        ],
        [
            "FUN_08005384",
            "FUN_08005a68"
        ],
        [
            "FUN_08000bcc",
            "FUN_080053d4"
        ],
        [
            "FUN_08005730",
            "FUN_08005f6c"
        ],
        [
            "FUN_08006f5a"
        ]
    ],
    "locked_functions": []
}