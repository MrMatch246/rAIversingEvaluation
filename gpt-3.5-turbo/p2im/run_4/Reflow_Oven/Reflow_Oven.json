{
    "functions": {
        "FUN_08002470": {
            "renaming": {
                "FUN_08002470": "update_value_08002470",
                "param_1": "value",
                "DAT_08002490": "data_location",
                "PTR_": "ptr_",
                "uint": "unsigned int",
                "mask": "bitmask",
                "new_value": "updated_value",
                "data_ptr": "data_pointer"
            },
            "code": "void update_value_08002470(uint value) {\n    uint* data_ptr = (uint*)(DAT_08002490 + 0xc);\n    uint mask = *(data_ptr) & 0xf8ff;\n    uint new_value = (value & 7) << 8 | mask | 0x5fa0000;\n    *(data_ptr) = new_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002470",
            "calling": [
                "FUN_08001c88",
                "FUN_08005f5e"
            ],
            "imported": false,
            "current_name": "update_value_08002470"
        },
        "FUN_08007004": {
            "renaming": {
                "FUN_08007004": "set_memory_flag_08007004",
                "param_1": "result",
                "param_2": "start_address",
                "param_3": "end_address",
                "param_4": "flag",
                "puVar1": "flag_pointer",
                "iVar2": "set_memory_result"
            },
            "code": "void set_memory_flag_08007004(int *result, int start_address, int end_address, int flag, int size)\n{\n    undefined *flag_pointer;\n    int set_memory_result;\n    flag_pointer = PTR_DAT_08007024;\n    *(undefined4 *)PTR_DAT_08007024 = 0;\n    set_memory_result = set_memory_flag_08007004_to_0x2000_0800571a(start_address, end_address, end_address, flag, size);\n    if ((set_memory_result == -1) && (*(int *)flag_pointer != 0)) {\n        *result = *(int *)flag_pointer;\n    }\n    return;\n}",
            "called": [
                "FUN_0800571a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007004",
            "calling": [
                "FUN_08006dc8"
            ],
            "imported": false,
            "current_name": "set_memory_flag_08007004"
        },
        "FUN_08006394": {
            "renaming": {
                "FUN_08006394": "FUNC_08006394"
            },
            "code": "\nint FUNC_08006394(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    initialize_data_08006cb4();\n  }\n  if (param_2 == PTR_DAT_080065a0) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_080065a8) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_080065ac) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = process_data_080069e4(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_080063d6:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = process_input_08006370(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08006580;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = find_character_in_string_08006e90(PTR_s___0__080065a4,*pbVar5);\n    puVar1 = PTR_DAT_080065b0;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__080065a4 & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_080064b0;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_080064b0:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar3 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar3;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar4 = false;\n      iVar7 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = find_character_in_string_08006e90(PTR_DAT_080065b0,*param_3,3);\n  if (iVar7 != 0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = find_character_in_string_08006e90(PTR_s_efgEFG_080065b4,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_080066b0(param_1,&local_88,param_2,DAT_080065bc,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_080065b8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_08006532;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08006580;\nLAB_08006532:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_080063d6;\n}\n\n",
            "called": [
                "FUN_080066b0",
                "FUN_080069e4",
                "FUN_08006e90",
                "FUN_08006cb4",
                "FUN_08006370"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006394",
            "calling": [
                "FUN_08006174",
                "FUN_080068f0"
            ],
            "imported": false,
            "current_name": "FUNC_08006394"
        },
        "FUN_08005740": {
            "renaming": {
                "FUN_08005740": "set_pointer_value_08005740",
                "PTR_DAT_0800574c": "pointer_to_dat"
            },
            "code": "void set_pointer_value_08005740(void)\n{\n    int* PTR_DAT_0800574c = PTR_DAT_0800574c;\n    *PTR_DAT_0800574c = 22;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005740",
            "calling": [
                "FUN_08006f00"
            ],
            "imported": false,
            "current_name": "set_pointer_value_08005740"
        },
        "FUN_08006158": {
            "renaming": {
                "FUN_08006158": "calculate_result_if_not_initialized_08006158",
                "param_1": "flag",
                "param_2": "input_value",
                "DAT_08006170": "initialized_flag"
            },
            "code": "longlong calculate_result_if_not_initialized_08006158(undefined4 flag, uint input_value) {\n  if (DAT_08006170 != 0) {\n    return CONCAT44(flag, 2);\n  }\n  return (ulonglong)input_value << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006158",
            "calling": [
                "FUN_08006112"
            ],
            "imported": false,
            "current_name": "calculate_result_if_not_initialized_08006158"
        },
        "FUN_08003688": {
            "renaming": {
                "FUN_08003688": "FUNC_08003688"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined4 FUNC_08003688(uint *param_1)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  bool bVar7;\n  \n  puVar1 = DAT_08003948;\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 4) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) != 0)))) {\n      if (((*DAT_08003948 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      uVar6 = param_1[1];\n      if (uVar6 == 0x10000) {\n        *DAT_08003948 = *DAT_08003948 | 0x10000;\n      }\n      else if (uVar6 == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (uVar6 == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08003948 = *DAT_08003948 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar3 = get_pointer_value_08001cc4();\n        while ((*DAT_08003948 & 0x20000) != 0) {\n          iVar4 = get_pointer_value_08001cc4();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar3 = get_pointer_value_08001cc4();\n        while ((*DAT_08003948 & 0x20000) == 0) {\n          iVar4 = get_pointer_value_08001cc4();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 0) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) == 0)))) {\n      if (((*DAT_08003948 & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | param_1[5] << 3;\n    }\n    else if (param_1[4] == 0) {\n      *DAT_0800394c = 0;\n      iVar3 = get_pointer_value_08001cc4();\n      while ((*DAT_08003948 & 2) != 0) {\n        iVar4 = get_pointer_value_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_0800394c = 1;\n      iVar3 = get_pointer_value_08001cc4();\n      while ((*DAT_08003948 & 2) == 0) {\n        iVar4 = get_pointer_value_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | param_1[5] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      *DAT_08003950 = 0;\n      iVar3 = get_pointer_value_08001cc4();\n      while ((DAT_08003948[9] & 2) != 0) {\n        iVar4 = get_pointer_value_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003950 = 1;\n      iVar3 = get_pointer_value_08001cc4();\n      while ((DAT_08003948[9] & 2) == 0) {\n        iVar4 = get_pointer_value_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      calculate_and_decrement_0800365c(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar7 = (DAT_08003948[7] & 0x10000000) == 0;\n    if (bVar7) {\n      DAT_08003948[7] = DAT_08003948[7] | 0x10000000;\n    }\n    if ((*DAT_08003954 & 0x100) == 0) {\n      *DAT_08003954 = *DAT_08003954 | 0x100;\n      iVar3 = get_pointer_value_08001cc4();\n      while ((*DAT_08003954 & 0x100) == 0) {\n        iVar4 = get_pointer_value_08001cc4();\n        if (100 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    puVar2 = DAT_08003a60;\n    puVar1 = DAT_08003948;\n    uVar6 = param_1[3];\n    if (uVar6 == 1) {\n      DAT_08003948[8] = DAT_08003948[8] | 1;\n    }\n    else if (uVar6 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (uVar6 == 5) {\n      DAT_08003a60[8] = DAT_08003a60[8] | 4;\n      puVar2[8] = puVar2[8] | 1;\n    }\n    else {\n      DAT_08003948[8] = DAT_08003948[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n    }\n    if (param_1[3] == 0) {\n      iVar3 = get_pointer_value_08001cc4();\n      while ((DAT_08003a60[8] & 2) != 0) {\n        iVar4 = get_pointer_value_08001cc4();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar3 = get_pointer_value_08001cc4();\n      while ((DAT_08003948[8] & 2) == 0) {\n        iVar4 = get_pointer_value_08001cc4();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar7) {\n      DAT_08003a60[7] = DAT_08003a60[7] & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\n    uVar5 = 0;\n  }\n  else if ((DAT_08003a60[1] & 0xc) == 8) {\n    uVar5 = 1;\n  }\n  else if (param_1[7] == 2) {\n    *DAT_08003a64 = 0;\n    iVar3 = get_pointer_value_08001cc4();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          DAT_08003a60[1] = DAT_08003a60[1] & 0xfffdffff | param_1[2];\n        }\n        DAT_08003a60[1] = DAT_08003a60[1] & 0xffc2ffff | param_1[8] | param_1[9];\n        *DAT_08003a64 = 1;\n        iVar3 = get_pointer_value_08001cc4();\n        do {\n          if ((*DAT_08003a60 & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar4 = get_pointer_value_08001cc4();\n        } while ((uint)(iVar4 - iVar3) < 3);\n        return 3;\n      }\n      iVar4 = get_pointer_value_08001cc4();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  else {\n    *DAT_08003a64 = 0;\n    iVar3 = get_pointer_value_08001cc4();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar4 = get_pointer_value_08001cc4();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  return uVar5;\n}\n\n",
            "called": [
                "FUN_0800365c",
                "FUN_08001cc4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003688",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "FUNC_08003688"
        },
        "FUN_08004ec4": {
            "renaming": {
                "FUN_08004ec4": "execute_function_on_condition_08004ec4",
                "param_1": "input",
                "iVar1": "func_ptr",
                "subtract_four_from_input_08004e70": "subtract_four_from_input",
                "code": "code_ptr",
                "condition_1": "condition_1",
                "condition_2": "condition_2",
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "modify_uint_array_08002c10": "modify_uint_array"
            },
            "code": "void execute_function_on_condition_08004ec4(int input)\n{\n    int func_ptr = subtract_four_from_input();\n    code* function = *(code**)(func_ptr + 0x60);\n    char condition_1 = *(char*)(func_ptr + 0x5c);\n    char condition_2 = *(char*)(func_ptr + 0x2c);\n    if (function != NULL && condition_1 == 1 && condition_2 != ' ')\n    {\n        (*function)(func_ptr + 0x68);\n    }\n    modify_uint_array(input);\n    return;\n}",
            "called": [
                "FUN_08002c10",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ec4",
            "calling": [
                "FUN_080032b4",
                "FUN_08002d1c",
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "execute_function_on_condition_08004ec4"
        },
        "FUN_08000178": {
            "renaming": {
                "FUN_08000178": "get_string_ending_08000178",
                "param_1": "input_string",
                "pcVar2": "current_char_pointer",
                "pcVar3": "current_char_pointer",
                "cVar1": "current_char"
            },
            "code": "char* get_string_ending_08000178(char* input_string) {\n  char current_char;\n  char* current_char_pointer = input_string;\n  while (current_char = *current_char_pointer) {\n    current_char_pointer++;\n  }\n  return current_char_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "FUN_08005ce8",
                "FUN_08005c96"
            ],
            "imported": false,
            "current_name": "get_string_ending_08000178"
        },
        "FUN_08004418": {
            "renaming": {
                "FUN_08004418": "do_nothing_08004418"
            },
            "code": "\nvoid do_nothing_08004418(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004418",
            "calling": [
                "FUN_0800441a"
            ],
            "imported": false,
            "current_name": "do_nothing_08004418"
        },
        "FUN_08006c88": {
            "renaming": {
                "FUN_08006c88": "allocate_and_initialize_block_08006c88",
                "param_1": "starting_address",
                "param_2": "num_elements",
                "puVar1": "block_start_address",
                "iVar2": "block_size"
            },
            "code": "undefined4 * allocate_and_initialize_block_08006c88(undefined4 starting_address, int num_elements)\n{\n  undefined4 *block_start_address;\n  int block_size = (num_elements - 1) * sizeof(int) + sizeof(int)*3;\n  block_start_address = (undefined4 *)allocate_memory_block_08006288(starting_address, block_size);\n  if (block_start_address != (undefined4 *)0x0) {\n    *block_start_address = 0;\n    *(block_start_address + 1) = num_elements;\n    *(block_start_address + 2) = block_start_address + 3;\n    fill_array_with_value_080061e0(block_start_address + 3,0,block_size - sizeof(int)*3);\n  }\n  return block_start_address;\n}",
            "called": [
                "FUN_080061e0",
                "FUN_08006288"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c88",
            "calling": [
                "FUN_08006d14"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_block_08006c88"
        },
        "FUN_080060e4": {
            "renaming": {
                "FUN_080060e4": "checkAndProcessResponse_080060e4",
                "iVar1": "numBitsSet",
                "count_bits_set_08005f8c": "countSetBits",
                "PTR_DAT_08006100": "responsePtr",
                "process_response_080060d4": "processResponse"
            },
            "code": "void checkAndProcessResponse_080060e4(void)\n{\n  int numBitsSet = countSetBits();\n  int* PTR_DAT_08006100 = PTR_DAT_08006100 + numBitsSet * 0x14 + 0xc;\n  if (*PTR_DAT_08006100 != 0) {\n    processResponse();\n  }\n  return;\n}",
            "called": [
                "FUN_080060d4",
                "FUN_08005f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060e4",
            "calling": [
                "FUN_0800282c"
            ],
            "imported": false,
            "current_name": "checkAndProcessResponse_080060e4"
        },
        "FUN_0800258c": {
            "renaming": {
                "FUN_0800258c": "get_value_from_param_0800258c",
                "param_1": "param",
                "uVar1": "value",
                "puVar2": "param_value"
            },
            "code": "uint get_value_from_param_0800258c(uint **param)\n{\n    uint value;\n    if (*(char *)((int)param + 0x21) != '\\x02') {\n        param[0xe] = (uint *)0x4;\n        return 1;\n    }\n    **param &= 0xfffffff1;\n    **param &= 0xfffffffe;\n    uint *param_value = *param;\n    if (param_value == PTR_DAT_0800261c) {\n        value = 1;\n    }\n    else if (param_value == (PTR_DAT_0800261c + 5)) {\n        value = 0x10;\n    }\n    else if (param_value == (PTR_DAT_0800261c + 10)) {\n        value = 0x100;\n    }\n    else if (param_value == (PTR_DAT_0800261c + 0xf)) {\n        value = 0x1000;\n    }\n    else if (param_value == (PTR_DAT_0800261c + 0x14)) {\n        value = 0x10000;\n    }\n    else if (param_value == (PTR_DAT_0800261c + 0x19)) {\n        value = 0x100000;\n    }\n    else {\n        value = 0x1000000;\n    }\n    *(undefined4 *)(PTR_DAT_08002620 + 4) = value;\n    *(undefined *)((int)param + 0x21) = 1;\n    *(undefined *)(param + 8) = 0;\n    if (param[0xd] != (uint *)0x0) {\n        (*(code *)param[0xd])();\n        return 0;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800258c",
            "calling": [
                "FUN_080046b8",
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "get_value_from_param_0800258c"
        },
        "FUN_08004e20": {
            "renaming": {
                "FUN_08004e20": "check_input_and_process_08004e20",
                "PTR_DAT_08004e30": "ptr",
                "process_input_08003f18": "process_input"
            },
            "code": "void check_input_and_process_08004e20(void)\n{\n  int *PTR_DAT_08004e30 = (int *)PTR_DAT_08004e30;\n  if (*PTR_DAT_08004e30 != 0) {\n    process_input_08003f18();\n  }\n  return;\n}",
            "called": [
                "FUN_08003f18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e20",
            "calling": [],
            "imported": false,
            "current_name": "check_input_and_process_08004e20"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "wait_infinite_loop_0800573c"
            },
            "code": "void wait_infinite_loop_0800573c(void)\n{\n  while(true)\n  {\n    // Do nothing\n  }\n}",
            "called": [
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "FUN_0800573c",
                "FUN_08006ac0"
            ],
            "imported": false,
            "current_name": "wait_infinite_loop_0800573c"
        },
        "FUN_080032b4": {
            "renaming": {
                "FUN_080032b4": "process_input_080032b4",
                "param_1": "input_data",
                "cVar1": "input_char",
                "puVar2": "data_ptr",
                "puVar3": "ptr_2"
            },
            "code": "int process_input_080032b4(uint **input_data)\n{\n    char input_char = *(char *)((int)input_data + 0x3d);\n    uint *data_ptr = *input_data;\n    uint *ptr_2 = input_data[9];\n\n    data_ptr[1] &= 0xfffff8ff;\n    *data_ptr |= 1;\n    *data_ptr &= 0xfffffbff;\n\n    if ((data_ptr[1] & 0x800) != 0) {\n        if ((input_char == '\"') || (input_char == '*')) {\n            *(short *)((int)input_data + 0x2a) = (short)*(undefined4 *)(*data_ptr[0xe] + 4);\n        }\n        else {\n            *(short *)((int)input_data + 0x2a) = (short)*(undefined4 *)(*data_ptr[0xd] + 4);\n        }\n    }\n\n    if (*(short *)((int)input_data + 0x2a) != 0) {\n        if ((data_ptr[5] & 4) != 0) {\n            ptr_2 = input_data[9];\n            input_data[9] = (uint *)((int)ptr_2 + 1);\n            *(char *)ptr_2 = (char)data_ptr[4];\n            *(short *)((int)input_data + 0x2a) -= 1;\n        }\n\n        if ((data_ptr[5] & 0x40) != 0) {\n            ptr_2 = input_data[9];\n            input_data[9] = (uint *)((int)ptr_2 + 1);\n            *(char *)ptr_2 = (char)(*data_ptr)[4];\n            *(short *)((int)input_data + 0x2a) -= 1;\n        }\n\n        input_data[0x10] = (uint *)((uint)input_data[0x10] | 4);\n    }\n\n    if (input_data[0x10] == (uint *)0x0) {\n        if (((input_char == '(') || (input_char == '*')) || (input_char == ')')) {\n            input_data[0xb] = PTR_DAT_080033b4;\n            input_data[0xc] = (uint *)0x0;\n            *(undefined *)((int)input_data + 0x3d) = 0x20;\n            *(undefined *)((int)input_data + 0x3e) = 0;\n            execute_function_on_condition_08004ec4();\n        }\n        else if ((input_data[0xc] == (uint *)0x22) || (input_char == '\"')) {\n            input_data[0xc] = (uint *)0x0;\n            *(undefined *)((int)input_data + 0x3d) = 0x20;\n            *(undefined *)((int)input_data + 0x3e) = 0;\n            do_nothing_08002ca4();\n        }\n    }\n    else {\n        execute_0800316c();\n    }\n\n    return 0;\n}",
            "called": [
                "FUN_08002ca4",
                "FUN_08004ec4",
                "FUN_0800316c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032b4",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_080032b4"
        },
        "FUN_08004d06": {
            "renaming": {
                "FUN_08004d06": "compare_and_return_08004d06",
                "param_1": "value1",
                "param_2": "value2",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int compare_and_return_08004d06(int value1, int value2) {\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d06",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "compare_and_return_08004d06"
        },
        "FUN_080056d8": {
            "renaming": {
                "FUN_080056d8": "get_offset_080056d8",
                "param_1": "offset",
                "iVar1": "current_offset",
                "puVar2": "memory_address",
                "PTR_DAT_08005708": "global_pointer_variable",
                "PTR_DAT_0800570c": "global_pointer_variable_2",
                "PTR_DAT_08005710": "global_constant_variable",
                "&stack0x00000000": "&stack_bottom"
            },
            "code": "int get_offset_080056d8(int offset)\n{\n  int current_offset;\n  undefined *memory_address;\n  \n  if (*(int *)PTR_DAT_08005708 == 0) {\n    *(undefined **)PTR_DAT_08005708 = PTR_DAT_0800570c;\n  }\n  current_offset = *(int *)PTR_DAT_08005708;\n  memory_address = (undefined *)(offset + current_offset);\n  if (memory_address <= &stack_bottom) {\n    *(undefined **)PTR_DAT_08005708 = memory_address;\n    return current_offset;\n  }\n  *(undefined4 *)PTR_DAT_08005710 = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d8",
            "calling": [
                "FUN_08006920"
            ],
            "imported": false,
            "current_name": "get_offset_080056d8"
        },
        "FUN_080019f6": {
            "renaming": {
                "FUN_080019f6": "check_input_and_string_080019f6",
                "param_1": "input_address",
                "iVar1": "is_end_of_input_reached",
                "uVar2": "input_address_60",
                "uVar3": "input_address_3c",
                "uVar4": "input_address_3c_1",
                "uVar5": "input_address_6c",
                "is_end_of_input_reached_08000a18": "is_end_of_input_reached_08000a18",
                "is_end_of_string_080009dc": "is_end_of_string_080009dc",
                "input_address_3c": "input_address_3c",
                "input_address_38": "input_address_38",
                "input_address_60": "input_address_60",
                "input_address_64": "input_address_64",
                "input_address_68": "input_address_68",
                "input_address_6c": "input_address_6c",
                "input_address_48": "input_address_48",
                "input_address_4c": "input_address_4c",
                "input_address_50": "input_address_50",
                "input_address_54": "input_address_54"
            },
            "code": "void check_input_and_string_080019f6(int input_address)\n{\n  int is_end_of_input_reached;\n  int is_end_of_string;\n  int *input_address_3c = *(int **)(input_address + 0x3c);\n  int *input_address_38 = *(int **)(input_address + 0x38);\n  int input_address_60 = *(int *)(input_address + 0x60);\n  int input_address_64 = *(int *)(input_address + 0x64);\n  int input_address_68 = *(int *)(input_address + 0x68);\n  int input_address_6c = *(int *)(input_address + 0x6c);\n\n  int input_address_48 = *input_address_3c;\n  int input_address_4c = input_address_3c[1];\n  int input_address_50 = **(int **)input_address_38;\n  int input_address_54 = input_address_38[1];\n\n  is_end_of_input_reached = is_end_of_input_reached_08000a18(input_address_48, input_address_4c, input_address_68, input_address_6c);\n\n  if (is_end_of_input_reached == 0) {\n    is_end_of_string = is_end_of_string_080009dc(input_address_48, input_address_4c, input_address_60, input_address_64);\n\n    if (is_end_of_string != 0) {\n      *(int *)(input_address + 0x48) = input_address_60;\n      *(int *)(input_address + 0x4c) = input_address_64;\n    }\n    return;\n  }\n\n  *(int *)(input_address + 0x48) = input_address_68;\n  *(int *)(input_address + 0x4c) = input_address_6c;\n  return;\n}",
            "called": [
                "FUN_08000a18",
                "FUN_080009dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019f6",
            "calling": [
                "FUN_08001a44"
            ],
            "imported": false,
            "current_name": "check_input_and_string_080019f6"
        },
        "FUN_08002f9c": {
            "renaming": {
                "FUN_08002f9c": "process_input_08002f9c",
                "param_1": "input_array",
                "puVar1": "ptr_16",
                "PTR_0000000c": "ptr_12",
                "PTR_00000010": "ptr_13",
                "PTR_00000014": "ptr_14",
                "PTR_00000018": "ptr_15",
                "PTR_0000001c": "ptr_1",
                "PTR_00000020": "ptr_2",
                "PTR_00000024": "ptr_3",
                "PTR_00000028": "ptr_4",
                "PTR_0000002c": "ptr_5",
                "PTR_00000030": "ptr_6",
                "PTR_00000034": "ptr_7",
                "PTR_00000038": "ptr_8",
                "PTR_0000003c": "ptr_9"
            },
            "code": "uint32_t process_input_08002f9c(uint32_t **input_array)\n{\n  uint32_t *PTR_0000001c = *input_array;\n  char input_char = (char)(PTR_0000001c[13] & 0xFF);\n  uint16_t input_length = (uint16_t)(PTR_0000001c[10] & 0xFFFF);\n  uint32_t *PTR_00000020 = PTR_0000001c + 1;\n  uint32_t *PTR_00000024 = PTR_0000001c + 2;\n  uint32_t *PTR_00000028 = PTR_0000001c + 3;\n  uint32_t *PTR_0000002c = PTR_0000001c + 4;\n  uint32_t *PTR_00000030 = PTR_0000001c + 5;\n  uint32_t *PTR_00000034 = PTR_0000001c + 6;\n  uint32_t *PTR_00000038 = PTR_0000001c + 7;\n  uint32_t *PTR_0000003c = PTR_0000001c + 8;\n  uint32_t *PTR_0000001c0 = PTR_0000001c + 9;\n  uint32_t *PTR_0000001c1 = PTR_0000001c + 10;\n  uint32_t *PTR_0000000c = PTR_0000001c + 11;\n  uint32_t *PTR_00000010 = PTR_0000001c + 12;\n  uint32_t *PTR_00000014 = PTR_0000001c + 13;\n  uint32_t *PTR_00000018 = PTR_0000001c + 14;\n  \n  if (input_char == '\"') {\n    if (input_length < 4) {\n      if (input_length - 2 < 2) {\n        if (PTR_0000001c1 == (uint32_t *)0x2) {\n          *PTR_0000001c = *PTR_0000001c | 0x400;\n        }\n        else {\n          *PTR_0000001c = *PTR_0000001c & 0xFFFFFBFF;\n          *PTR_0000001c = *PTR_0000001c | 0x800;\n        }\n        PTR_0000001c[1] = PTR_0000001c[1] & 0xFFFFFBFF;\n      }\n      else {\n        if (PTR_0000001c1 == (uint32_t *)0x2) {\n          *PTR_0000001c = *PTR_0000001c | 0x400;\n        }\n        else {\n          *PTR_0000001c = *PTR_0000001c & 0xFFFFFBFF;\n        }\n        PTR_0000001c[1] = PTR_0000001c[1] & 0xFFFFF8FF;\n        uint32_t *PTR_0000001c6 = PTR_0000001c0;\n        PTR_0000001c0 = (uint32_t *)((int)PTR_0000001c6 + 1);\n        *(char *)PTR_0000001c6 = (char)PTR_0000001c[4];\n        input_length--;\n        input_char = ' ';\n        PTR_0000000c = (uint32_t *)0x0;\n        if (*(char *)((int)PTR_0000001c + 0x3e) == '@') {\n          *(char *)((int)PTR_0000001c + 0x3e) = 0;\n          do_nothing_08002f9a();\n        }\n        else {\n          *(char *)((int)PTR_0000001c + 0x3e) = 0;\n          do_nothing_08002c50();\n        }\n      }\n    }\n    else {\n      uint32_t *PTR_0000001c6 = PTR_0000001c0;\n      PTR_0000001c0 = (uint32_t *)((int)PTR_0000001c6 + 1);\n      *(char *)PTR_0000001c6 = (char)PTR_0000001c[4];\n      input_length--;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c50",
                "FUN_08002f9a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9c",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_08002f9c"
        },
        "FUN_08005510": {
            "renaming": {
                "FUN_08005510": "validate_and_store_input_08005510",
                "param_1": "input_address",
                "param_2": "input_value",
                "param_3": "input_index",
                "param_4": "bit_array",
                "iVar1": "is_combination_valid",
                "uVar2": "byte_index"
            },
            "code": "void validate_and_store_input_08005510(int input_address, int input_value, int input_index, int bit_array, int memory_address) {\n  int is_combination_valid = is_combination_valid(input_address);\n  if (is_combination_valid == 0) {\n    int byte_index = *(char *)(input_address + 0x44);\n    *(int *)(input_array_address + byte_index * 4) = input_value;\n    *(int *)(input_index_address + byte_index * 4) = input_address;\n    write_to_memory(memory_address, 0, 1, byte_index, bit_array);\n    set_bit_at_index(bit_array, *(char *)(input_address + 0x5a));\n    validate_input(*(int *)(validation_array_address + byte_index * 4), input_address + 0x45, 1);\n  }\n}\n",
            "called": [
                "FUN_08002494",
                "FUN_080024f8",
                "FUN_080045a2",
                "FUN_0800548c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005510",
            "calling": [
                "FUN_08005a68"
            ],
            "imported": false,
            "current_name": "validate_and_store_input_08005510"
        },
        "FUN_08002f9a": {
            "renaming": {
                "FUN_08002f9a": "do_nothing_08002f9a"
            },
            "code": "\nvoid do_nothing_08002f9a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9a",
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "imported": false,
            "current_name": "do_nothing_08002f9a"
        },
        "FUN_08005750": {
            "renaming": {
                "FUN_08005750": "get_one_08005750"
            },
            "code": "int get_one_08005750() {\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005750",
            "calling": [
                "thunk_FUN_08005750"
            ],
            "imported": false,
            "current_name": "get_one_08005750"
        },
        "FUN_08002cf2": {
            "renaming": {
                "FUN_08002cf2": "process_input_08002cf2",
                "param_1": "input_array",
                "param_2": "input_flag",
                "param_3": "input_value",
                "param_4": "input_mask",
                "uVar1": "input_value",
                "uVar2": "input_mask_value"
            },
            "code": "int process_input_08002cf2(int *input_array, int input_flag, int input_value, int input_mask)\n{\n  int input_mask_value = *(uint *)(*input_array + 0x18);\n  if ((input_mask_value & 0x80) == 0) {\n    input_value = *(int *)(input_array + 3);\n  }\n  else {\n    input_value = *(int *)(input_array + 6);\n  }\n  process_input_08002cf2_08004e74(input_array,(input_mask_value & 4) == 0,input_value,input_mask_value,input_mask);\n  return 0;\n}",
            "called": [
                "FUN_08004e74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cf2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_08002cf2"
        },
        "FUN_08006288": {
            "renaming": {
                "FUN_08006288": "allocate_memory_block_08006288",
                "param_1": "out_ptr",
                "param_2": "size",
                "puVar1": "unused_pointer",
                "uVar2": "offset",
                "puVar3": "current_block",
                "iVar4": "remaining_space",
                "puVar5": "previous_block",
                "uVar6": "block_size",
                "puVar7": "previous_block",
                "uVar8": "rounded_size"
            },
            "code": "uint allocate_memory_block_08006288(undefined4 *out_ptr, uint size)\n{\n  uint rounded_size = (size + 3 & 0xfffffffc) + 8;\n  if (rounded_size < 0xc) {\n    rounded_size = 0xc;\n  }\n  if (((int)rounded_size < 0) || (rounded_size < size)) {\n    *out_ptr = 0xc;\n  }\n  else {\n    do_nothing_08006eac();\n    uint *current_block = *(uint **)PTR_DAT_0800633c;\n    uint *previous_block = *(uint **)PTR_DAT_0800633c;\n    while (current_block != (uint *)0x0) {\n      uint block_size = *current_block - rounded_size;\n      if (-1 < (int)block_size) {\n        if (block_size < 0xc) {\n          if (previous_block == current_block) {\n            uint next_block_offset = previous_block[1];\n            *(uint *)PTR_DAT_0800633c = next_block_offset;\n          }\n          else {\n            uint next_block_offset = current_block[1];\n          }\n          if (previous_block != current_block) {\n            previous_block[1] = next_block_offset;\n            previous_block = current_block;\n          }\n        }\n        else {\n          *current_block = block_size;\n          *(uint *)((int)current_block + block_size) = rounded_size;\n          previous_block = (uint *)((int)current_block + block_size);\n        }\n        do_nothing_08006eae(out_ptr);\n        uint block_end = (int)previous_block + 0xbU & 0xfffffff8;\n        int remaining_space = block_end - (int)(previous_block + 1);\n        if (remaining_space != 0) {\n          *(int *)((int)previous_block + remaining_space) = -remaining_space;\n          return block_end;\n        }\n        return block_end;\n      }\n      previous_block = current_block;\n      current_block = (uint *)current_block[1];\n    }\n    if (*(int *)PTR_DAT_08006340 == 0) {\n      uint offset = get_offset_and_set_value_08006920(out_ptr);\n      *(undefined4 *)PTR_DAT_08006340 = offset;\n    }\n    uint *new_block = (uint *)get_offset_and_set_value_08006920(out_ptr, rounded_size);\n    if ((new_block != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)new_block + 3U & 0xfffffffc), new_block == previous_block ||\n        (int)previous_block - (int)new_block != get_offset_and_set_value_08006920(out_ptr, (int)previous_block - (int)new_block - 4)))) {\n      *previous_block = rounded_size;\n      do_nothing_08006eae(out_ptr);\n      uint block_end = (int)previous_block + 0xbU & 0xfffffff8;\n      int remaining_space = block_end - (int)(previous_block + 1);\n      if (remaining_space != 0) {\n        *(int *)((int)previous_block + remaining_space) = -remaining_space;\n        return block_end;\n      }\n      return block_end;\n    }\n    *out_ptr = 0xc;\n    do_nothing_08006eae(out_ptr);\n  }\n  return 0;\n}",
            "called": [
                "FUN_08006eac",
                "FUN_08006eae",
                "FUN_08006920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006288",
            "calling": [
                "FUN_08006c88",
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08006288"
        },
        "FUN_08002004": {
            "renaming": {
                "FUN_08002004": "set_flag_if_not_set_08001f84_08002004",
                "param_1": "params",
                "iVar1": "result",
                "puVar2": "ptr"
            },
            "code": "int set_flag_if_not_set_08001f84_08002004(undefined4 *params) {\n  int result;\n  if (*(char *)(params + 9) != '\\x01') {\n    *(undefined *)(params + 9) = 1;\n    result = set_flag_if_not_set_08001f84_08002004();\n    if (result == 0) {\n      params[10] = params[10] & 0xfffffcfe | 0x100;\n      undefined4 *ptr = (undefined4 *)*params;\n      if ((ptr == PTR_DAT_080020e8) && ((PTR_DAT_080020e8[-0xff] & 0xf0000) != 0)) {\n        params[10] = params[10] | 0x100000;\n        if ((*(uint *)(PTR_DAT_080020ec + 4) & 0x400) != 0) {\n          params[10] = params[10] & 0xffffcfff | 0x1000;\n        }\n      }\n      else {\n        params[10] = params[10] & 0xffefffff;\n        if ((ptr[1] & 0x400) != 0) {\n          params[10] = params[10] & 0xffffcfff | 0x1000;\n        }\n      }\n      if ((params[10] & 0x1000) == 0) {\n        params[0xb] = 0;\n      }\n      else {\n        params[0xb] = params[0xb] & 0xfffffff9;\n      }\n      *(undefined *)(params + 9) = 0;\n      *ptr = 0xfffffffd;\n      params = (undefined4 *)*params;\n      if (((params[2] & 0xe0000) == 0xe0000) && ((params != PTR_DAT_080020e8 || ((PTR_DAT_080020e8[-0xff] & 0xf0000) == 0)))) {\n        params[2] = params[2] | 0x500000;\n      }\n      else {\n        params[2] = params[2] | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(params + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}",
            "called": [
                "FUN_08001f84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002004",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "set_flag_if_not_set_08001f84_08002004"
        },
        "FUN_08005754": {
            "renaming": {
                "FUN_08005754": "decode_value_08005754",
                "param_1": "value_to_decode",
                "bVar1": "is_value_valid",
                "cVar2": "decoded_char",
                "uVar3": "decoded_value",
                "uVar4": "shift_amount"
            },
            "code": "uint decode_value_08005754(uint value_to_decode)\n{\n  bool is_value_valid;\n  char decoded_char;\n  uint decoded_value;\n  uint shift_amount;\n  \n  if (value_to_decode < 0xe) {\n    if (value_to_decode + 0x2e < 0x3c) {\n      is_value_valid = true;\n    }\n    else {\n      is_value_valid = false;\n    }\n  }\n  else {\n    is_value_valid = value_to_decode < 0x3c;\n  }\n  \n  if (is_value_valid) {\n    if (value_to_decode < 0xe) {\n      value_to_decode = value_to_decode + 0x2e;\n    }\n    decoded_char = valid_chars[value_to_decode];\n  }\n  else {\n    decoded_char = -1;\n  }\n  \n  if (decoded_char == -1) {\n    decoded_value = 0;\n  }\n  else {\n    decoded_value = find_value_and_update_flags_08004a4c();\n    shift_amount = *(uint *)valid_shift_amount;\n    \n    if (shift_amount != 0xc) {\n      if (shift_amount < 0xc) {\n        return decoded_value >> (0xc - shift_amount & 0xff);\n      }\n      return decoded_value << (shift_amount - 0xc & 0xff);\n    }\n  }\n  return decoded_value;\n}",
            "called": [
                "FUN_08004a4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005754",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "decode_value_08005754"
        },
        "FUN_08005fc8": {
            "renaming": {
                "FUN_08005fc8": "initialize_result_08005fc8",
                "param_1": "input_flag",
                "param_2": "input_value",
                "param_3": "input_pointer",
                "param_4": "input_array",
                "puVar1": "result_pointer"
            },
            "code": "void initialize_result_08005fc8(int input_flag, int input_value, int input_pointer, int input_array)\n{\n  int* result_pointer;\n  result_pointer = input_pointer;\n  if (input_flag == 1)\n  {\n    if (input_value == 0xffff)\n    {\n      result_pointer[0] = 6;\n      result_pointer[3] = 0;\n      result_pointer[5] = 7;\n      result_pointer[8] = 0;\n      result_pointer[10] = 8;\n      result_pointer[13] = 0;\n      result_pointer[15] = 9;\n      result_pointer[18] = 0;\n      result_pointer[20] = 10;\n      result_pointer[23] = 0;\n      result_pointer[25] = 23;\n      result_pointer[28] = 0;\n      result_pointer[30] = 23;\n      result_pointer[33] = 0;\n      result_pointer[35] = 23;\n      result_pointer[38] = 0;\n      result_pointer[40] = 23;\n      result_pointer[43] = 0;\n      result_pointer[45] = 40;\n      result_pointer[48] = 0;\n      result_pointer[50] = 40;\n      result_pointer[53] = 0;\n      result_pointer[55] = 40;\n      result_pointer[58] = 0;\n      result_pointer[60] = 40;\n      result_pointer[63] = 0;\n      initialize_result_08005fc8_if_not_initialized(0, PTR_LAB_08005fa0_1_08006070, PTR_DAT_0800606c, result_pointer, input_array);\n    }\n  }\n}\n",
            "called": [
                "FUN_08006112"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fc8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_result_08005fc8"
        },
        "FUN_08002ab8": {
            "renaming": {
                "FUN_08002ab8": "increment_value_at_index_08002ab8",
                "param_1": "array_ptr",
                "pbVar1": "byte_ptr",
                "*pbVar1": "*byte_ptr",
                "PTR_DAT_08003a28": "*array_ptr",
                "PTR_DAT_08003a2c": "*short_ptr",
                "PTR_DAT_08003a30": "*value_ptr"
            },
            "code": "int increment_value_at_index_08002ab8(int PTR_DAT_08003a28)\n{\n  int PTR_DAT_08003a30 = array_ptr + 9;\n  short PTR_DAT_08003a2c = (short *)(array_ptr + 0x2a);\n  if (PTR_DAT_08003a2c != 0) {\n    uint8_t *byte_ptr = (uint8_t *)(PTR_DAT_08003a30);\n    PTR_DAT_08003a30 = (int)(byte_ptr + 1);\n    *(uint *)(PTR_DAT_08003a28 + 0x10) = (uint)*byte_ptr;\n    PTR_DAT_08003a2c -= 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ab8",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "increment_value_at_index_08002ab8"
        },
        "FUN_080068f0": {
            "renaming": {
                "FUN_080068f0": "process_data_080068f0",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4",
                "iVar1": "data_ptr",
                "uVar2": "param_1",
                "uStack_c": "param_2",
                "uStack_8": "param_3",
                "uStack_4": "param_4",
                "PTR_PTR_DAT_0800691c": "PTR_PTR_DAT_0800691c",
                "FUNC_08006cb4": "free_data",
                "FUNC_08006394": "process_input"
            },
            "code": "void process_data_080068f0(undefined4 data_1, undefined4 data_2, undefined4 data_3, undefined4 data_4)\n{\n  int data_ptr = *(int *)PTR_PTR_DAT_0800691c;\n  undefined4 param_1 = data_1;\n  undefined4 param_2 = data_2;\n  undefined4 param_3 = data_3;\n  undefined4 param_4 = data_4;\n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x18) == 0)) {\n    free_data(data_ptr);\n  }\n  process_input(data_ptr, *(undefined4 *)(data_ptr + 8), data_1, &param_2, param_1, &param_2);\n  return;\n}",
            "called": [
                "FUN_08006394",
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068f0",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "process_data_080068f0",
            "code_backup": "\nvoid FUN_080068f0(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  iVar1 = *(int *)PTR_PTR_DAT_0800691c;\n  uVar2 = param_1;\n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  if ((iVar1 != 0) && (*(int *)(iVar1 + 0x18) == 0)) {\n    FUNC_08006cb4(iVar1);\n  }\n  FUNC_08006394(iVar1,*(undefined4 *)(iVar1 + 8),param_1,&uStack_c,uVar2,&uStack_c);\n  return;\n}\n\n"
        },
        "FUN_080066b0": {
            "renaming": {
                "FUN_080066b0": "FUNC_080066b0"
            },
            "code": "\nuint FUNC_080066b0(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_0800686a;\n          if (bVar1 != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_080068ec;\nLAB_080067fa:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08006790:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_080066e0;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_08006700;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08006700:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_080068ec;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_080067d6;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08006740:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08006766:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_08006774;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08006774:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_080068ec;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08006790;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08006726:\n            puVar5 = PTR_s_0123456789abcdef_080068e8;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08006766;\n          if (bVar1 == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08006740;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = find_character_in_string_08006e90(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_08006856;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_08006856:\n    *puVar3 = uVar6;\n  }\nLAB_0800686a:\n  param_2[4] = 0;\nLAB_080067d6:\n  iVar2 = encode_data_080065c0(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_080067ea:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_080067ea;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08006e90",
                "FUN_080065c0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080066b0",
            "calling": [
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "FUNC_080066b0"
        },
        "FUN_08002c52": {
            "renaming": {
                "FUN_08002c52": "do_nothing_08002c52"
            },
            "code": "\nvoid do_nothing_08002c52(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c52",
            "calling": [
                "FUN_08002c54",
                "FUN_08002d1c"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c52"
        },
        "FUN_0800138e": {
            "renaming": {
                "FUN_0800138e": "set_flag_and_decode_0800138e",
                "param_1": "data_ptr",
                "param_2": "flag_ptr",
                "param_3": "param_3",
                "param_4": "param_4",
                "bVar1": "data"
            },
            "code": "void set_flag_and_decode_0800138e(int data_ptr, int flag_ptr, int param_3, int param_4)\n{\n  byte data = *(byte *)(data_ptr + 0x14);\n  *(byte *)(data_ptr + 0x14) = data | 4;\n  decode_and_print_08001310(data_ptr, data | 0xc, 0, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800138e",
            "calling": [
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "set_flag_and_decode_0800138e"
        },
        "FUN_08002c50": {
            "renaming": {
                "FUN_08002c50": "do_nothing_08002c50"
            },
            "code": "\nvoid do_nothing_08002c50(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c50",
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c50"
        },
        "FUN_0800598a": {
            "renaming": {
                "FUN_0800598a": "check_combination_and_update_0800598a",
                "param_1": "combination",
                "iVar1": "result",
                "uVar2": "index",
                "local_9": "character"
            },
            "code": "void check_combination_and_update_0800598a(int combination)\n{\n  int result;\n  ushort index;\n  undefined character;\n  result = check_combination_080054d4(combination,&character);\n  if ((result == 0) &&\n     (index = *(short *)(combination + 0x60) + 1U & 0x3f, index != *(ushort *)(combination + 0x62))) {\n    *(undefined *)(*(int *)(combination + 0x5c) + (uint)*(ushort *)(combination + 0x60)) = character;\n    *(ushort *)(combination + 0x60) = index;\n  }\n  return;\n}",
            "called": [
                "FUN_080054d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800598a",
            "calling": [],
            "imported": false,
            "current_name": "check_combination_and_update_0800598a"
        },
        "FUN_08001c88": {
            "renaming": {
                "FUN_08001c88": "set_flag_and_update_value_08001c88",
                "DAT_08001ca8": "flag",
                "update_value_08002470": "update_value",
                "validate_and_write_to_memory_08001c3c": "validate_and_write",
                "do_nothing_08001c3a": "do_nothing"
            },
            "code": "int set_flag_and_update_value_08001c88() {\n  DAT_08001ca8 = DAT_08001ca8 | 0x10;\n  update_value(3);\n  validate_and_write(0xf);\n  do_nothing();\n  return 0;\n}",
            "called": [
                "FUN_08001c3a",
                "FUN_08001c3c",
                "FUN_08002470"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c88",
            "calling": [
                "FUN_08004c52"
            ],
            "imported": false,
            "current_name": "set_flag_and_update_value_08001c88"
        },
        "FUN_08001a44": {
            "renaming": {
                "FUN_08001a44": "set_input_valid_flag_08001a44",
                "param_1": "input_address",
                "param_2": "flag_value",
                "uVar1": "flag",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void set_input_valid_flag_08001a44(int input_address, int flag_value){\\n  undefined flag;\\n  if (flag_value == 1) {\\n    flag = 1;\\n    if (*(char *)(input_address + 0x70) == \"\\0\") {\\n      check_input_and_string_080019f6();\\n    }\\n  }\\n  else {\\n    flag = 0;\\n  }\\n  *(undefined *)(input_address + 0x70) = flag;\\n  return;\\n}",
            "called": [
                "FUN_080019f6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a44",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "set_input_valid_flag_08001a44"
        },
        "FUN_08002c54": {
            "renaming": {
                "FUN_08002c54": "process_input_08002c54",
                "param_1": "input_array",
                "cVar1": "closing_parenthesis",
                "pbVar2": "byte_array"
            },
            "code": "int process_input_08002c54(int *input_array) {\n  char closing_parenthesis = *(char *)((int)input_array + 0x3d);\n  if (*(short *)((int)input_array + 0x2a) != 0) {\n    byte *byte_array = (byte *)input_array[9];\n    input_array[9] = (int)(byte_array + 1);\n    *(uint *)(*input_array + 0x10) = (uint)*byte_array;\n    *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) + -1;\n    if ((*(short *)((int)input_array + 0x2a) == 0) && (closing_parenthesis == ')')) {\n      *(uint *)(*input_array + 4) = *(uint *)(*input_array + 4) & 0xfffffbff;\n      input_array[0xc] = 0x21;\n      *(undefined *)((int)input_array + 0x3d) = 0x28;\n      do_nothing_08002c52();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c54",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_08002c54"
        },
        "FUN_080043b4": {
            "renaming": {
                "FUN_080043b4": "check_flags_080043b4",
                "param_1": "flags",
                "param_2": "flag_mask",
                "param_3": "expected_value",
                "param_4": "address",
                "param_5": "max_distance",
                "iVar1": "current_address_diff"
            },
            "code": "int check_flags_080043b4(uint **flags, uint flag_mask, bool expected_value, int address, uint max_distance) {\n  int current_address_diff;\n  do {\n    if (((flag_mask & ~**flags) == 0) != expected_value) {\n      return 0;\n    }\n  } while ((max_distance == 0xffffffff) ||\n          ((max_distance != 0 && (current_address_diff = get_pointer_value_08001cc4(), (uint)(current_address_diff - address) <= max_distance))));\n  (*flags)[3] &= 0xfffffe5f;\n  (*flags)[5] &= 0xfffffffe;\n  *(undefined *)((int)flags + 0x39) = 0x20;\n  *(undefined *)((int)flags + 0x3a) = 0x20;\n  *(undefined *)(flags + 0xe) = 0;\n  return 3;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043b4",
            "calling": [
                "FUN_08004478"
            ],
            "imported": false,
            "current_name": "check_flags_080043b4"
        },
        "FUN_0800441a": {
            "renaming": {
                "FUN_0800441a": "initialize_device_0800441a",
                "param_1": "device_data",
                "do_nothing_08004418": "do_nothing",
                "PTR_": "device_data",
                "DAT_": "constants"
            },
            "code": "int initialize_device_0800441a(int *PTR_)\n{\n    if (PTR_ != NULL)\n    {\n        if (*(char *)((int)PTR_ + 0x39) == '\\0')\n        {\n            *(undefined *)(PTR_ + 0xe) = 0;\n            do_nothing();\n        }\n        *(undefined *)((int)PTR_ + 0x39) = 0x24;\n        *(uint *)(*PTR_ + 0xc) &= 0xffffdfff;\n        calculate_value(PTR_);\n        *(uint *)(*PTR_ + 0x10) &= 0xffffb7ff;\n        *(uint *)(*PTR_ + 0x14) &= 0xffffffd5;\n        *(uint *)(*PTR_ + 0xc) |= 0x2000;\n        PTR_[0xf] = 0;\n        *(undefined *)((int)PTR_ + 0x39) = 0x20;\n        *(undefined *)((int)PTR_ + 0x3a) = 0x20;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08004204",
                "FUN_08004418"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800441a",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "initialize_device_0800441a"
        },
        "FUN_08004d18": {
            "renaming": {
                "FUN_08004d18": "execute_function_if_not_null_08004d18",
                "PTR_DAT_08004d28": "function_pointer_address",
                "PTR_DAT_08004d2c": "argument_address",
                "code": "function_pointer",
                "function_ptr": "function_pointer_ptr",
                "function": "function_pointer_value",
                "arg": "argument_value"
            },
            "code": "void execute_function_if_not_null_08004d18(void)\n{\n  code** function_ptr = *(code**)(PTR_DAT_08004d28);\n  if (function_ptr != NULL) {\n    code* function = *function_ptr;\n    int arg = *(int*)(PTR_DAT_08004d2c);\n    function(arg);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d18",
            "calling": [
                "FUN_08003ea0"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_08004d18"
        },
        "FUN_080006d4": {
            "renaming": {
                "FUN_080006d4": "calculate_bitwise_080006d4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "unaff_r4": "temp4",
                "in_r12": "mask",
                "uVar1": "temp5",
                "uVar2": "temp6",
                "uVar3": "temp7",
                "bVar4": "is_zero",
                "result1": "result1",
                "result2": "result2"
            },
            "code": "ulonglong calculate_bitwise_080006d4(uint input1, uint input2, uint input3, uint input4) {\n  uint temp1 = input1;\n  uint temp2 = input2;\n  uint temp3 = input3;\n  uint temp4 = input4;\n  uint mask = 0x80000000;\n  uint result1 = 0;\n  uint result2 = 0;\n  bool is_input1_or_input2_zero = (input1 | input2 << 1) == 0;\n  bool is_input3_or_input4_zero = (input3 | input4 << 1) == 0;\n  bool is_input4_not_equal_to_input3 = input4 != input3;\n  bool is_input4_bitwise_and_mask_equal_to_input4 = (input4 & mask) == mask;\n  bool is_input4_bitwise_and_mask_equal_to_input3 = (input4 & mask) == mask;\n  bool is_input4_bitwise_and_mask_equal_to_input2 = (input4 & mask) == mask;\n  bool is_input4_bitwise_and_mask_equal_to_input1 = (input4 & mask) == mask;\n  bool is_input4_bitwise_xor_input2_bitwise_and_mask_equal_to_input4 = ((input2 ^ input4) & mask) == mask;\n  bool is_input4_bitwise_xor_input2_bitwise_and_mask_not_equal_to_input4 = ((input2 ^ input4) & mask) != mask;\n  if (is_input4_not_equal_to_input3 && !is_input4_bitwise_and_mask_equal_to_input3 && !is_input4_bitwise_and_mask_equal_to_input2 && !is_input4_bitwise_and_mask_equal_to_input1 && !is_input4_bitwise_xor_input2_bitwise_and_mask_not_equal_to_input4 && (is_input1_or_input2_zero || is_input3_or_input4_zero)) {\n    result1 = temp2;\n    result2 = temp1;\n    result1 = result1 | 0x7ff80000;\n    return ((ulonglong)result1 << 0x20) | result2;\n  }\n  if (is_input4_not_equal_to_input3 && !is_input4_bitwise_and_mask_equal_to_input3 && !is_input4_bitwise_and_mask_equal_to_input2 && !is_input4_bitwise_and_mask_equal_to_input1 && is_input4_bitwise_xor_input2_bitwise_and_mask_equal_to_input4 && (is_input1_or_input2_zero || is_input3_or_input4_zero)) {\n    result1 = ((input2 ^ input4) & mask) | 0x7ff00000;\n    return ((ulonglong)result1 << 0x20) | result2;\n  }\n  if (is_input4_not_equal_to_input3 && is_input4_bitwise_and_mask_equal_to_input3) {\n    while ((temp4 & 0x100000) == 0) {\n      temp3 = temp3 << 1;\n      temp4 = temp4 * 2 + ((temp3 & mask) == mask);\n    }\n    result1 = temp4;\n    result2 = temp3;\n    return ((ulonglong)result1 << 0x20) | result2;\n  }\n  if (is_input4_not_equal_to_input3 && is_input4_bitwise_and_mask_equal_to_input2) {\n    while ((temp2 & 0x100000) == 0) {\n      temp1 = temp1 << 1;\n      temp2 = temp2 * 2 + ((temp1 & mask) == mask);\n    }\n    result1 = temp2 | (input2 & mask);\n    result2 = temp1;\n    return ((ulonglong)result1 << 0x20) | result2;\n  }\n  if (!is_input4_not_equal_to_input3 && !is_input4_bitwise_and_mask_equal_to_input4 && is_input1_or_input2_zero) {\n    result1 = input4;\n    result2 = input3;\n    result1 = result1 | 0x7ff80000;\n    return ((ulonglong)result1 << 0x20) | result2;\n  }\n  while ((temp1 & 0x100000) == 0) {\n    temp2 = temp2 * 2 + ((temp1 & mask) == mask);\n    temp1 = temp1 << 1;\n  }\n  result1 = temp2 | (input2 & mask);\n  while ((temp3 & 0x100000) == 0) {\n    temp4 = temp4 * 2 + ((temp3 & mask) == mask);\n    temp3 = temp3 << 1;\n  }\n  result2 = temp4;\n  return ((ulonglong)result1 << 0x20) | result2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006d4",
            "calling": [
                "FUN_080004f8"
            ],
            "imported": false,
            "current_name": "calculate_bitwise_080006d4"
        },
        "FUN_08000190": {
            "renaming": {
                "FUN_08000190": "FUNC_08000190"
            },
            "code": "\nulonglong FUNC_08000190(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_080002a0;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000190",
            "calling": [
                "FUN_08001a66",
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001814"
            ],
            "imported": false,
            "current_name": "FUNC_08000190"
        },
        "FUN_08006174": {
            "renaming": {
                "FUN_08006174": "process_data_and_call_function_08006174",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "uStack_8": "parameter3",
                "uStack_4": "parameter4"
            },
            "code": "void process_data_and_call_function_08006174(undefined4 data1, undefined4 data2, undefined4 data3, undefined4 data4)\n{\n  undefined4 parameter1;\n  undefined4 parameter2;\n  undefined4 parameter3;\n  undefined4 parameter4;\n  \n  parameter3 = data3;\n  parameter4 = data4;\n  call_function_with_parameters(*(undefined4 *)PTR_PTR_DAT_08006194, data1, data2, &parameter3, data1, &parameter3);\n  return;\n}",
            "called": [
                "FUN_08006394"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006174",
            "calling": [
                "FUN_0800611c"
            ],
            "imported": false,
            "current_name": "process_data_and_call_function_08006174"
        },
        "FUN_08007028": {
            "renaming": {
                "FUN_08007028": "return_value_if_error_08007028",
                "param_1": "output_value",
                "param_2": "input_value",
                "puVar1": "data_pointer",
                "iVar2": "function_output"
            },
            "code": "void return_value_if_error_08007028(int *output_value, undefined4 input_value) {\n  undefined *data_pointer = PTR_DAT_08007044;\n  *(undefined4 *)PTR_DAT_08007044 = 0;\n  int function_output = return_one_08005724(input_value);\n  if ((function_output == -1) && (*(int *)data_pointer != 0)) {\n    *output_value = *(int *)data_pointer;\n  }\n  return;\n}",
            "called": [
                "FUN_08005724"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007028",
            "calling": [
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "return_value_if_error_08007028"
        },
        "FUN_08000194": {
            "renaming": {
                "FUN_08000194": "FUNC_08000194"
            },
            "code": "\nulonglong FUNC_08000194(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_080002a0;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000194",
            "calling": [
                "FUN_080015f8",
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "FUNC_08000194"
        },
        "FUN_08002494": {
            "renaming": {
                "FUN_08002494": "write_to_memory_08002494",
                "param_1": "memory_address",
                "param_2": "data_to_write",
                "param_3": "bit_mask",
                "uVar1": "shift_amount",
                "uVar2": "bit_offset",
                "DAT_080024f0": "data_pointer_1",
                "DAT_080024f4": "data_pointer_2"
            },
            "code": "void write_to_memory_08002494(uint memory_address, uint data_to_write, uint bit_mask) {\n  uint shift_amount = (uint)(*(int *)(DAT_080024f0 + 0xc) << 0x15) >> 0x1d;\n  uint bit_offset = 7 - shift_amount;\n  if (bit_offset > 3) {\n    bit_offset = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount = shift_amount - 3;\n  }\n  uint data_to_write_masked = (data_to_write & ((1 << (bit_offset & 0xff)) - 1U)) << (shift_amount & 0xff) | ((1 << (shift_amount & 0xff)) - 1U & bit_mask);\n  if ((int)memory_address < 0) {\n    *(char *)(DAT_080024f4 + (memory_address & 0xf)) = (char)(data_to_write_masked << 4);\n  }\n  else {\n    *(char *)(memory_address + 0xe000e400) = (char)(data_to_write_masked << 4);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002494",
            "calling": [
                "FUN_08005568",
                "FUN_08001b48",
                "FUN_08001c3c",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "write_to_memory_08002494"
        },
        "FUN_08002c4e": {
            "renaming": {
                "FUN_08002c4e": "do_nothing_08002c4e"
            },
            "code": "\nvoid do_nothing_08002c4e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c4e",
            "calling": [
                "FUN_08002efc",
                "FUN_08002db2"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c4e"
        },
        "FUN_08004f4c": {
            "renaming": {
                "FUN_08004f4c": "FUNC_08004f4c"
            },
            "code": "\nvoid FUNC_08004f4c(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  uint local_20;\n  uint local_1c;\n  uint local_18;\n  undefined4 local_14;\n  \n  if (param_1 != (int *)0x0) {\n    iVar2 = find_value_08004c78((int)*(char *)(param_1 + 0x16),PTR_DAT_08005204);\n    iVar3 = find_value_08004c78((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08005208);\n    if ((iVar3 == 0) || (iVar2 == 0)) {\n      process_data_080068f0(PTR_s_ERROR__at_least_one_UART_pin_has_0800521c,iVar3);\n    }\n    else {\n      iVar4 = compare_and_return_08004d06(iVar2);\n      *param_1 = iVar4;\n      iVar1 = DAT_08005214;\n      iVar3 = DAT_08005210;\n      iVar2 = DAT_0800520c;\n      if (iVar4 == 0) {\n        process_data_080068f0(PTR_s_ERROR__U_S_ART_pins_mismatch_08005220);\n      }\n      else {\n        if (iVar4 == DAT_0800520c) {\n          *(uint *)(DAT_0800520c + 0xd80c) = *(uint *)(DAT_0800520c + 0xd80c) | 0x4000;\n          *(uint *)(iVar2 + 0xd80c) = *(uint *)(iVar2 + 0xd80c) & 0xffffbfff;\n          *(uint *)(iVar2 + 0xd818) = *(uint *)(iVar2 + 0xd818) | 0x4000;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)((int)param_1 + 0x5a) = 0x25;\n        }\n        else if (iVar4 == DAT_08005210) {\n          *(uint *)(DAT_08005210 + 0x1cc10) = *(uint *)(DAT_08005210 + 0x1cc10) | 0x20000;\n          *(uint *)(iVar3 + 0x1cc10) = *(uint *)(iVar3 + 0x1cc10) & 0xfffdffff;\n          *(uint *)(iVar3 + 0x1cc1c) = *(uint *)(iVar3 + 0x1cc1c) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)((int)param_1 + 0x5a) = 0x26;\n        }\n        else if (iVar4 == DAT_08005214) {\n          *(uint *)(DAT_08005214 + 0x1c810) = *(uint *)(DAT_08005214 + 0x1c810) | 0x40000;\n          *(uint *)(iVar1 + 0x1c810) = *(uint *)(iVar1 + 0x1c810) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1c81c) = *(uint *)(iVar1 + 0x1c81c) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)((int)param_1 + 0x5a) = 0x27;\n        }\n        uVar5 = setFlag_08004884((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        uVar6 = find_matching_char_08004cce((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08005208);\n        local_20 = 1 << (*(byte *)((int)param_1 + 0x59) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08005218 + 0x18) = *(uint *)(DAT_08005218 + 0x18) | 1;\n        switch((uVar6 << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x4000000;\n        }\n        local_14 = 3;\n        update_bits_08002624(uVar5,&local_20);\n        uVar5 = setFlag_08004884((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar6 = find_matching_char_08004cce((int)*(char *)(param_1 + 0x16),PTR_DAT_08005204);\n        local_20 = 1 << (*(byte *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        update_bits_08002624(uVar5,&local_20);\n        *(int **)(PTR_DAT_08005228 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        initialize_device_0800441a(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08004d06",
                "FUN_08004cce",
                "FUN_08004884",
                "FUN_08002624",
                "FUN_08004c78",
                "FUN_0800441a",
                "FUN_080068f0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004f4c",
            "calling": [
                "FUN_08005384",
                "FUN_08005a68"
            ],
            "imported": false,
            "current_name": "FUNC_08004f4c"
        },
        "FUN_080055bc": {
            "renaming": {
                "FUN_080055bc": "find_index_080055bc",
                "param_1": "search_value",
                "uVar1": "index"
            },
            "code": "uint find_index_080055bc(int search_value)\n{\n  uint index;\n  if (search_value == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while (index <= 4) {\n      if (search_value == *(int *)(PTR_DAT_080055dc + index * 4)) {\n        return index;\n      }\n      index++;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055bc",
            "calling": [
                "FUN_08005604",
                "FUN_080055e0"
            ],
            "imported": false,
            "current_name": "find_index_080055bc"
        },
        "FUN_08001960": {
            "renaming": {
                "FUN_08001960": "parse_input_08001960",
                "param_1": "input_buffer",
                "param_2": "buffer_size",
                "param_3": "end_of_input",
                "param_4": "end_of_string",
                "param_5": "start_of_string",
                "param_6": "end_of_buffer",
                "iVar1": "is_valid_input",
                "puVar2": "string",
                "uVar3": "string_start",
                "uVar4": "string_end",
                "uVar5": "buffer_start",
                "uVar6": "buffer_end"
            },
            "code": "void parse_input_08001960(int input_buffer, undefined4 buffer_size, undefined4 end_of_input, undefined4 end_of_string, undefined4 start_of_string, undefined4 end_of_buffer) {\\n  int is_valid_input;\\n  undefined4 *string;\\n  undefined4 string_start;\\n  undefined4 string_end;\\n  undefined4 buffer_start;\\n  undefined4 buffer_end;\\n  is_valid_input = should_return_false(end_of_input, end_of_string, start_of_string, end_of_buffer, buffer_size);\\n  if (is_valid_input == 0) {\\n    *(undefined4 *)(input_buffer + 0x60) = end_of_input;\\n    *(undefined4 *)(input_buffer + 100) = end_of_string;\\n    *(undefined4 *)(input_buffer + 0x68) = start_of_string;\\n    *(undefined4 *)(input_buffer + 0x6c) = end_of_buffer;\\n    if (*(char *)(input_buffer + 0x70) != \"\\0\") {\\n      string = *(undefined4 **)(input_buffer + 0x3c);\\n      string_start = *string;\\n      string_end = string[1];\\n      is_valid_input = is_end_of_string(end_of_string, start_of_string, string_start, string_end);\\n      if (is_valid_input == 0) {\\n        is_valid_input = is_end_of_input_reached(end_of_input, end_of_string, string_start, string_end);\\n        if (is_valid_input != 0) {\\n          *string = end_of_input;\\n          string[1] = end_of_string;\\n        }\\n      }\\n      else {\\n        *string = start_of_string;\\n        string[1] = end_of_buffer;\\n      }\\n      string_start = *(undefined4 *)(input_buffer + 0x48);\\n      string_end = *(undefined4 *)(input_buffer + 0x4c);\\n      buffer_start = *(undefined4 *)(input_buffer + 0x68);\\n      buffer_end = *(undefined4 *)(input_buffer + 0x6c);\\n      is_valid_input = is_end_of_input_reached(string_start, string_end, buffer_start, buffer_end);\\n      if (is_valid_input != 0) {\\n        *(undefined4 *)(input_buffer + 0x48) = buffer_start;\\n        *(undefined4 *)(input_buffer + 0x4c) = buffer_end;\\n        return;\\n      }\\n      buffer_start = *(undefined4 *)(input_buffer + 0x60);\\n      buffer_end = *(undefined4 *)(input_buffer + 100);\\n      is_valid_input = is_end_of_string(string_start, string_end, buffer_start, buffer_end);\\n      if (is_valid_input != 0) {\\n        *(undefined4 *)(input_buffer + 0x48) = buffer_start;\\n        *(undefined4 *)(input_buffer + 0x4c) = buffer_end;\\n      }\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08000a18",
                "FUN_080009dc",
                "FUN_08000a04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001960",
            "calling": [
                "FUN_08000cd0",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "parse_input_08001960"
        },
        "FUN_08004ca2": {
            "renaming": {
                "FUN_08004ca2": "findNonZeroValue_08004ca2",
                "param_1": "num",
                "uVar1": "value",
                "find_integer_in_array_08004c8a": "findIntegerInArray"
            },
            "code": "int findNonZeroValue_08004ca2(int num)\n{\n    int value;\n    if (num != 0) {\n        value = findIntegerInArray();\n        return value;\n    }\n    return -1;\n}",
            "called": [
                "FUN_08004c8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ca2",
            "calling": [
                "FUN_08005384",
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "findNonZeroValue_08004ca2"
        },
        "FUN_08002810": {
            "renaming": {
                "FUN_08002810": "is_param2_included_in_param1_08002810",
                "param_1": "ptr_param1",
                "param_2": "param2",
                "*(uint *)(param_1 + 8)": "*ptr_param1_offset"
            },
            "code": "int is_param2_included_in_param1_08002810(uint32_t* ptr_param1, uint32_t param2)\n{\n    uint32_t* ptr_param1_offset = ptr_param1 + 2;\n    uint32_t param1_mask = *ptr_param1_offset;\n    if ((param2 & param1_mask) == 0) {\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002810",
            "calling": [
                "FUN_08004c48"
            ],
            "imported": false,
            "current_name": "is_param2_included_in_param1_08002810"
        },
        "FUN_0800224c": {
            "renaming": {
                "FUN_0800224c": "check_and_update_flags_0800224c",
                "param_1": "flag_array",
                "iVar1": "result"
            },
            "code": "int check_and_update_flags_0800224c(int *flag_array)\n{\n    int result;\n    if (flag_array == NULL)\n    {\n        result = 1;\n    }\n    else\n    {\n        flag_array[10] |= 2;\n        result = check_and_update_flag_080020f0();\n        if (result == 0)\n        {\n            flag_array[0] = -32;\n            flag_array[1] &= DAT_08002340;\n            flag_array[2] &= DAT_08002344;\n            flag_array[3] &= 0xFF000000;\n            flag_array[4] &= 0xC0000000;\n            flag_array[5] &= 0xFFFFF000;\n            flag_array[6] &= 0xFFFFF000;\n            flag_array[7] &= 0xFFFFF000;\n            flag_array[8] &= 0xFFFFF000;\n            flag_array[9] &= 0xFFFFF000;\n            flag_array[10] &= 0xFFFFF000;\n            flag_array[11] &= 0xFF000000;\n            flag_array[12] &= 0xFF000000;\n            flag_array[13] &= 0xC0000000;\n            flag_array[14] &= 0xC0000000;\n            update_flags_based_on_input_080049f0(flag_array);\n            flag_array[11] = 0;\n            flag_array[10] = 0;\n        }\n        flag_array[9] = 0;\n    }\n    return result;\n}",
            "called": [
                "FUN_080020f0",
                "FUN_080049f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800224c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "check_and_update_flags_0800224c"
        },
        "FUN_080054b0": {
            "renaming": {
                "FUN_080054b0": "is_valid_input_080054b0",
                "param_1": "input_index",
                "uVar1": "combined_bytes",
                "PTR_DAT_080054d0": "data_pointer",
                "byte": "data_index"
            },
            "code": "bool is_valid_input_080054b0(int input_index){\n                      uint16_t combined_bytes = combine_bytes(get_PTR_DAT_080054d0(input_index));\n                      return (combined_bytes & 0x21) == 0x21;\n                    }",
            "called": [
                "FUN_080047e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b0",
            "calling": [],
            "imported": false,
            "current_name": "is_valid_input_080054b0"
        },
        "FUN_08006f00": {
            "renaming": {
                "FUN_08006f00": "process_data_08006f00",
                "param_1": "data",
                "puVar1": "pointer",
                "uVar2": "value",
                "piVar3": "function_pointers",
                "iVar4": "result",
                "pcVar5": "function",
                "unaff_r4": "unused_variable",
                "unaff_r5": "unused_variable",
                "in_lr": "unused_variable",
                "PTR_PTR_DAT_08006f0c": "function_pointers_pointer",
                "PTR_DAT_08006f30": "puVar1",
                "set_pointer_value_08005740": "set_pointer_value",
                "thunk_get_one_08005750": "get_value_from_function_pointer"
            },
            "code": "int process_data_08006f00(uint data) {\n    int *function_pointers = *(int **)PTR_PTR_DAT_08006f0c;\n    if (data > 31) {\n        *function_pointers = 22;\n        return -1;\n    }\n    int function_index = function_pointers[17];\n    if ((function_index != 0) && (function_pointers[data * 4 + function_index] != (code *)0x0)) {\n        code *function = *(code **)(data * 4 + function_index);\n        if (function != (code *)0x1) {\n            if (function == (code *)0xffffffff) {\n                *function_pointers = 22;\n                return 1;\n            }\n            *(undefined4 *)(data * 4 + function_index) = 0;\n            (*function)(data);\n        }\n        return 0;\n    }\n    undefined *pointer = PTR_PTR_DAT_08006f0c;\n    undefined4 value = thunk_get_one_08005750(function_pointers);\n    undefined *PTR_DAT_08006f30 = PTR_DAT_08006f30;\n    *(undefined4 *)PTR_DAT_08006f30 = 0;\n    int result = set_pointer_value_08005740(value, data, data, 0, pointer, unaff_r4, unaff_r5, in_lr);\n    if ((result == -1) && (*(int *)PTR_DAT_08006f30 != 0)) {\n        *function_pointers = *(int *)PTR_DAT_08006f30;\n    }\n    return result;\n}",
            "called": [
                "FUN_08005740",
                "thunk_FUN_08005750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f00",
            "calling": [
                "FUN_08006ac0"
            ],
            "imported": false,
            "current_name": "process_data_08006f00"
        },
        "FUN_080016b4": {
            "renaming": {
                "FUN_080016b4": "parse_input_080016b4",
                "param_1": "input_ptr",
                "cVar1": "result",
                "iVar2": "ptr1",
                "iVar3": "int1",
                "uVar4": "uint1",
                "uVar5": "uint2",
                "uVar6": "uint3",
                "uVar7": "uint6",
                "uVar8": "uint7",
                "uVar9": "uint8",
                "uVar10": "uint11",
                "uVar11": "uint12",
                "uVar12": "uint13",
                "uVar13": "uint14",
                "uVar14": "uint15",
                "uVar15": "uint64_1",
                "uVar16": "uint64_2",
                "uVar17": "uint64_3",
                "uVar18": "uint64_4",
                "local_38": "uint13",
                "uStack_34": "uint12"
            },
            "code": "char parse_input_080016b4(int input_ptr) {\n  char result = *(char *)(input_ptr + 0x70);\n  if (result != '\\0') {\n    int ptr1 = get_pointer_value_and_return_080058e0();\n    int ptr2 = *(int *)(input_ptr + 0x44);\n    uint32_t uint1 = *(uint *)(input_ptr + 0x58);\n    if ((uint)(ptr1 - ptr2) < uint1) {\n      result = '\\0';\n    }\n    else {\n      uint32_t *ptr3 = *(uint32_t **)(input_ptr + 0x38);\n      uint32_t uint2 = ptr3[0];\n      uint32_t uint3 = ptr3[1];\n      uint64_t uint64_1 = FUNC_08000190(uint2, uint3);\n      uint32_t uint4 = (uint32_t)(uint64_1 >> 0x20);\n      uint64_t uint64_2 = FUNC_08000190(ptr3[2], ptr3[3], *(uint32_t *)(input_ptr + 0x50), *(uint32_t *)(input_ptr + 0x54));\n      uint32_t uint5 = (uint32_t)(uint64_2 >> 0x20);\n      uint64_t uint64_3 = FUNC_080004f8((int)uint64_1, uint4, *(uint32_t *)(input_ptr + 0x20), *(uint32_t *)(input_ptr + 0x24));\n      uint64_t uint64_4 = FUNC_08000194((int)uint64_3, (int)(uint64_3 >> 0x20), *(uint32_t *)(input_ptr + 0x48), *(uint32_t *)(input_ptr + 0x4c));\n      *(uint64_t *)(input_ptr + 0x48) = uint64_4;\n      char char1 = *(char *)(input_ptr + 0x71);\n      if (char1 == '\\0') {\n        uint64_t uint64_5 = FUNC_080004f8((int)uint64_2, uint5, *(uint32_t *)(input_ptr + 0x18), *(uint32_t *)(input_ptr + 0x1c));\n        uint64_t uint64_6 = FUNC_08000190((int)uint64_4, (int)(uint64_4 >> 0x20), (int)uint64_5, (int)(uint64_5 >> 0x20));\n        *(uint64_t *)(input_ptr + 0x48) = uint64_6;\n      }\n      uint32_t uint6 = *(uint32_t *)(input_ptr + 0x48);\n      uint32_t uint7 = *(uint32_t *)(input_ptr + 0x4c);\n      uint32_t uint8 = *(uint32_t *)(input_ptr + 0x68);\n      uint32_t uint9 = *(uint32_t *)(input_ptr + 0x6c);\n      uint64_t uint64_7 = *(uint64_t *)(input_ptr + 0x68);\n      int int1 = is_end_of_input_reached_08000a18(uint6, uint7, uint8, uint9);\n      if (int1 == 0) {\n        uint32_t uint10 = *(uint32_t *)(input_ptr + 0x60);\n        uint32_t uint11 = *(uint32_t *)(input_ptr + 100);\n        int1 = is_end_of_string_080009dc(uint6, uint7);\n        if (int1 != 0) {\n          *(uint32_t *)(input_ptr + 0x48) = uint10;\n          *(uint32_t *)(input_ptr + 0x4c) = uint11;\n        }\n      }\n      else {\n        *(uint32_t *)(input_ptr + 0x48) = uint8;\n        *(uint32_t *)(input_ptr + 0x4c) = uint9;\n      }\n      if (char1 == '\\0') {\n        uint64_t uint64_8 = 0;\n      }\n      else {\n        uint64_t uint64_8 = FUNC_080004f8((int)uint64_1, uint4, *(uint32_t *)(input_ptr + 0x18), *(uint32_t *)(input_ptr + 0x1c));\n      }\n      uint32_t uint12 = (uint32_t)(uint64_8 >> 0x20);\n      uint32_t uint13 = (uint32_t)uint64_8;\n      uint32_t uint14 = *(uint32_t *)(input_ptr + 0x48);\n      uint32_t uint15 = *(uint32_t *)(input_ptr + 0x4c);\n      uint64_t uint64_9 = FUNC_080004f8((int)uint64_2, uint5, *(uint32_t *)(input_ptr + 0x28), *(uint32_t *)(input_ptr + 0x2c));\n      uint64_t uint64_10 = FUNC_08000190(uint14, uint15, (int)uint64_9, (int)(uint64_9 >> 0x20));\n      uint64_t uint64_11 = FUNC_08000194(uint13, uint12, (int)uint64_10, (int)(uint64_10 >> 0x20));\n      uint32_t uint16 = (uint32_t)(uint64_11 >> 0x20);\n      int1 = is_end_of_string_080009dc(uint8, uint9, (int)uint64_11, uint16);\n      if (int1 == 0) {\n        uint64_t uint64_12 = *(uint64_t *)(input_ptr + 0x60);\n        int1 = is_end_of_string_080009dc((int)uint64_11, uint16, *(uint32_t *)(input_ptr + 0x60), *(uint32_t *)(input_ptr + 100));\n        if (int1 == 0) {\n          uint64_7 = uint64_11;\n        }\n      }\n      **(uint64_t **)(input_ptr + 0x3c) = uint64_7;\n      *(uint32_t *)(input_ptr + 0x50) = uint2;\n      *(uint32_t *)(input_ptr + 0x54) = uint3;\n      *(int *)(input_ptr + 0x44) = ptr1;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08000190",
                "FUN_080004f8",
                "FUN_08000a18",
                "FUN_080058e0",
                "FUN_080009dc",
                "FUN_08000194"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016b4",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "parse_input_080016b4"
        },
        "FUN_0800074c": {
            "renaming": {
                "FUN_0800074c": "FUNC_0800074c"
            },
            "code": "\nulonglong FUNC_0800074c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = calculate_value_080008ba();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800086a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800086a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_080008ba"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800074c",
            "calling": [
                "FUN_080015f8",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918"
            ],
            "imported": false,
            "current_name": "FUNC_0800074c"
        },
        "FUN_080018f8": {
            "renaming": {
                "FUN_080018f8": "parse_input_string_and_return_080018f8",
                "parse_input_string_08001814": "parse_input_string"
            },
            "code": "void parse_input_string_and_return_080018f8(void)\n{\n  parse_input_string();\n  return;\n}",
            "called": [
                "FUN_08001814"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018f8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "parse_input_string_and_return_080018f8"
        },
        "FUN_08005890": {
            "renaming": {
                "FUN_08005890": "check_bit_at_offset_and_return_08005890",
                "param_1": "bit_offset",
                "cVar1": "result",
                "iVar2": "bit_value",
                "uVar3": "data_index",
                "uVar4": "index",
                "PTR_DAT_080058d8": "original_data",
                "PTR_DAT_080058dc": "bit_mask"
            },
            "code": "char check_bit_at_offset_and_return_08005890(char* data, uint bit_offset) {\n    char result = 0;\n    uint index = 0;\n    if (bit_offset < 0x3c) {\n        index = (uint)(char)PTR_DAT_080058d8[bit_offset];\n    }\n    if (index != 0xffffffff) {\n        int bit_value = get_bit_at_offset_080047f4(index,PTR_DAT_080058dc);\n        if (bit_value != 0) {\n            uint data_index = (index << 0x18) >> 0x1c;\n            uint mask = 1 << (index & 0xf) & 0xffff;\n            char is_included = check_if_param2_is_included_in_param1_and_return_08004c48_08004c48(get_data_at_index_08004848(data_index), mask);\n            if (is_included != 0) {\n                result = 1;\n            }\n        }\n    }\n    return result;\n}",
            "called": [
                "FUN_08004848",
                "FUN_08004c48",
                "FUN_080047f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005890",
            "calling": [
                "FUN_080015b2",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "check_bit_at_offset_and_return_08005890"
        },
        "FUN_08005da0": {
            "renaming": {
                "FUN_08005da0": "execute_conversion_08005da0",
                "convert_or_execute_08005d8a": "convert_or_execute"
            },
            "code": "void execute_conversion_08005da0(){\n  convert_or_execute();\n  return;\n}",
            "called": [
                "FUN_08005d8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da0",
            "calling": [],
            "imported": false,
            "current_name": "execute_conversion_08005da0"
        },
        "FUN_08004cb2": {
            "renaming": {
                "FUN_08004cb2": "find_matching_char_in_string_08004cb2",
                "param_1": "target_char",
                "param_2": "string",
                "*param_2": "*string",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "unsigned int find_matching_char_in_string_08004cb2(int target_char, char* string) {\n    while (*string != -1) {\n        if (*string == target_char) {\n            return *(unsigned int*)(string + 8);\n        }\n        string += 12;\n    }\n    return 0xffffffff;\n}",
            "called": [
                "FUN_08004cb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb2",
            "calling": [
                "FUN_08004cce",
                "FUN_08004cb2"
            ],
            "imported": false,
            "current_name": "find_matching_char_in_string_08004cb2"
        },
        "FUN_08004ef4": {
            "renaming": {
                "FUN_08004ef4": "check_and_modify_uint_array_08004ef4",
                "param_1": "array_index",
                "subtract_four_from_input_08004e70": "subtract_four_from_input",
                "iVar1": "input_index",
                "modify_uint_array_08002c10": "modify_uint_array"
            },
            "code": "void check_and_modify_uint_array_08004ef4(undefined4 array_index) {\\n  int input_index = subtract_four_from_input();\\n  if (*(char *)(input_index + 0x5d) == \"\\0\") {\\n    modify_uint_array(array_index);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08002c10",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef4",
            "calling": [
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "check_and_modify_uint_array_08004ef4"
        },
        "FUN_08001294": {
            "renaming": {
                "FUN_08001294": "set_values_at_offsets_08001294",
                "param_1": "struct_address",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3",
                "param_5": "value_4"
            },
            "code": "void set_values_at_offsets_08001294(int struct_address, unsigned char value_1, unsigned char value_2, unsigned char value_3, unsigned char value_4)\n{\n    *(unsigned char*)(struct_address + 0x18) = value_1;\n    *(unsigned char*)(struct_address + 0x19) = value_2;\n    *(unsigned char*)(struct_address + 0x1a) = value_3;\n    *(unsigned char*)(struct_address + 0x1b) = value_4;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001294",
            "calling": [
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "set_values_at_offsets_08001294"
        },
        "FUN_08002384": {
            "renaming": {
                "FUN_08002384": "check_and_update_08002384",
                "*param_1": "*params",
                "iVar1": "return_value",
                "uVar2": "divisor",
                "iVar3": "start_pointer",
                "iVar4": "current_pointer",
                "uVar5": "quotient",
                "local_14": "loop_counter"
            },
            "code": "int check_and_update_08002384(int *params)\n{\n    int return_value;\n    uint divisor;\n    int start_pointer;\n    int current_pointer;\n    uint quotient;\n    int loop_counter;\n    \n    if (*(char *)(params + 9) == '\\x01') {\n        return 2;\n    }\n    \n    *(undefined *)(params + 9) = 1;\n    \n    return_value = check_and_update_08002384_flag_080020f0();\n    \n    if (return_value == 0) {\n        params[10] = params[10] & 0xffffeefdU | 2;\n        divisor = *(uint *)PTR_DAT_0800246c;\n        quotient = calculate_value_08003da4(2);\n        loop_counter = divisor / quotient << 1;\n        while (loop_counter != 0) {\n            loop_counter = loop_counter + -1;\n        }\n        \n        set_flag_if_not_set_08001f84(params);\n        *(uint *)(*params + 8) = *(uint *)(*params + 8) | 8;\n        start_pointer = get_pointer_value_08001cc4();\n        \n        while (current_pointer = *params, (*(uint *)(current_pointer + 8) & 8) != 0) {\n            current_pointer = get_pointer_value_08001cc4();\n            if (10 < (uint)(current_pointer - start_pointer)) {\n                params[10] = params[10] & 0xffffffedU | 0x10;\n                *(undefined *)(params + 9) = 0;\n                return 1;\n            }\n        }\n        *(uint *)(current_pointer + 8) = *(uint *)(current_pointer + 8) | 4;\n        start_pointer = get_pointer_value_08001cc4();\n        \n        while ((*(uint *)(*params + 8) & 4) != 0) {\n            current_pointer = get_pointer_value_08001cc4();\n            if (10 < (uint)(current_pointer - start_pointer)) {\n                params[10] = params[10] & 0xffffffedU | 0x10;\n                *(undefined *)(params + 9) = 0;\n                return 1;\n            }\n        }\n        params[10] = params[10] & 0xfffffffcU | 1;\n    }\n    \n    *(undefined *)(params + 9) = 0;\n    return return_value;\n}",
            "called": [
                "FUN_080020f0",
                "FUN_08001cc4",
                "FUN_08001f84",
                "FUN_08003da4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002384",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "check_and_update_08002384"
        },
        "FUN_08005650": {
            "renaming": {
                "FUN_08005650": "do_nothing_08005650"
            },
            "code": "\nvoid do_nothing_08005650(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005650",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "do_nothing_08005650"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "increment_and_copy_08002ad8",
                "param_1": "array",
                "puVar1": "ptr_to_dest",
                "*puVar1": "*ptr_to_dest",
                "*(short *)((int)param_1 + 0x2a)": "*ptr_to_count",
                "*(char *)(PTR_DAT_08003000 + (int)*(short *)((int)param_1 + 0x10))": "*ptr_to_value"
            },
            "code": "int increment_and_copy_08002ad8(int *array) {\n  int *(char *)(PTR_DAT_08003000 + (int)*(short *)((int)param_1 + 0x10)) = array + 4;\n  short *ptr_to_count = (short *)(array + 42);\n\n  if (*ptr_to_count != 0) {\n    char *ptr_to_dest = (char *)array[9];\n    array[9] = (int)(ptr_to_dest + 1);\n    *ptr_to_dest = (char)*(char *)(PTR_DAT_08003000 + (int)*(short *)((int)param_1 + 0x10));\n    *ptr_to_count -= 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "increment_and_copy_08002ad8"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "calculate_value_08004204",
                "param_1": "input",
                "uVar1": "var_4",
                "uVar2": "var_2",
                "iVar3": "var_1",
                "iVar4": "var_5",
                "iVar5": "var_6",
                "iVar6": "var_7",
                "iVar7": "var_8",
                "iVar8": "var_9",
                "iVar9": "var_10",
                "iVar10": "var_11",
                "iVar11": "var_12",
                "iVar12": "var_13"
            },
            "code": "void calculate_value_08004204(int *input)\n{\n  // Update values in memory\n  uint *ptr_1 = (uint *)(*input + 0x10);\n  uint *ptr_2 = (uint *)(*input + 0xc);\n  uint *ptr_3 = (uint *)(*input + 0x14);\n  *ptr_1 = (*ptr_1 & 0xffffcfff) | input[3];\n  *ptr_2 = input[2] | input[4] | input[5] | (*ptr_2 & 0xffffe9f3);\n  *ptr_3 = (*ptr_3 & 0xfffffcff) | input[6];\n\n  // Calculate new value\n  int input_pointer = *input;\n  int var_1 = get_shifted_value_from_pointer_08003c50();\n  uint var_2 = DAT_080043b0;\n  int var_3 = input[1];\n  ulonglong var_4 = (ulonglong)DAT_080043b0;\n  int var_5 = get_shifted_value_from_pointer_08003c50();\n  int var_6 = input[1];\n  int var_7 = get_shifted_value_from_pointer_08003c50();\n  int var_8 = input[1];\n  int var_9 = get_shifted_value_from_pointer_08003c50();\n  int var_10 = input[1];\n  int var_11 = get_shifted_value_from_pointer_08003c50();\n  int var_12 = input[1];\n  int var_13 = get_shifted_value_from_pointer_08003c50();\n  uint *result_ptr = (uint *)(input_pointer + 8);\n  *result_ptr = (((uint)((int)((ulonglong)var_2 * (ulonglong)(((uint)(var_9 * 0x19) / (uint)(var_10 << 2)) + ((ulonglong)var_2 * ((ulonglong)(uint)(var_11 * 0x19) / (ulonglong)(uint)(var_12 << 2))) / 0x1000 + 0x32) >> 0x20) << 0x17) >> 0x1c) + ((uint)((ulonglong)var_2 * (ulonglong)(((uint)(var_5 * 0x19) / (uint)(var_6 << 2)) + ((ulonglong)var_2 * ((ulonglong)(uint)(var_7 * 0x19) / (ulonglong)(uint)(var_8 << 2))) / 0x1000 + 0x32) >> 0x25) & 0xf0) + (uint)(var_4 * ((ulonglong)(uint)(var_1 * 0x19) / (ulonglong)(uint)(var_3 << 2)) >> 0x25) * 0x10;\n}",
            "called": [
                "FUN_08003c70",
                "FUN_08003c50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "FUN_0800441a"
            ],
            "imported": false,
            "current_name": "calculate_value_08004204"
        },
        "FUN_08005da8": {
            "renaming": {
                "FUN_08005da8": "validate_input_and_convert_to_string_08005da8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "iVar1": "isValidInput",
                "iVar3": "conversionResult",
                "bVar4": "i",
                "lVar5": "temp",
                "uVar2": "shiftAmount",
                "uVar6": "temp2",
                "uVar7": "shiftedData",
                "is_valid_input_08000a2c": "is_valid_input",
                "should_return_080009f0": "should_return",
                "get_string_ending_08005c96": "get_string_ending",
                "is_end_of_input_reached_08000a18": "is_end_of_input_reached",
                "is_end_of_string_080009dc": "is_end_of_string",
                "call_function_pointer_08005cb6": "call_function_pointer",
                "FUNC_0800074c": "process_data",
                "FUNC_08000194": "convert_data",
                "calculate_shift_amount_08000aa8": "calculate_shift_amount",
                "shift_and_concatenate_0800040c": "shift_and_concatenate",
                "convert_or_execute_08005d8a": "convert_or_execute",
                "PTR_DAT_08005f20": "global_ptr_1",
                "PTR_DAT_08005f28": "global_ptr_2",
                "PTR_DAT_08005f24": "global_ptr_3",
                "PTR_DAT_08005f1c": "global_ptr_4",
                "DAT_08005f08": "global_data_1",
                "DAT_08005f0c": "global_data_2",
                "DAT_08005f10": "global_data_3",
                "DAT_08005f14": "global_data_4",
                "DAT_08005f18": "global_data_5"
            },
            "code": "int validate_input_and_convert_to_string_08005da8(undefined4 input1, undefined4 input2, undefined4 input3, uint input4, byte input5) {\n    int isValidInput = is_valid_input(input3, input4, input3, input4);\n    if (isValidInput == 0) {\n        isValidInput = is_valid_input(input3, input4 & 0x7fffffff, 0xffffffff, DAT_08005f08);\n        if ((isValidInput == 0) && (should_return(input3, input4 & 0x7fffffff, 0xffffffff, DAT_08005f08) == 0)) {\n            return get_string_ending(input1, PTR_DAT_08005f20);\n        } else {\n            if (is_end_of_input_reached(input3, input4, 0xe0000000, DAT_08005f0c) == 0) {\n                if (is_end_of_string(input3, input4, 0xe0000000, DAT_08005f10) == 0) {\n                    if (is_end_of_string(input3, input4, 0, 0) == 0) {\n                        return 0;\n                    } else {\n                        int functionPointerResult = call_function_pointer(input1, 0x2d);\n                        input4 += 0x80000000;\n                        long long temp = (long long)DAT_08005f14 << 0x20;\n                        for (byte i = 0; i < input5; i++) {\n                            temp = process_data((int)temp, (undefined4)((ulonglong)temp >> 0x20), 0, DAT_08005f18);\n                        }\n                        undefined8 temp2 = convert_data(input3, input4, (int)temp, (undefined4)((ulonglong)temp >> 0x20));\n                        undefined4 shiftAmount = calculate_shift_amount();\n                        undefined8 shiftedData = shift_and_concatenate();\n                        temp2 = convert_data((int)temp2, (int)((ulonglong)temp2 >> 0x20), (int)shiftedData, (int)((ulonglong)shiftedData >> 0x20));\n                        int conversionResult = convert_or_execute(input1, shiftAmount, 10);\n                        int result = conversionResult + functionPointerResult;\n                        if (input5 != 0) {\n                            result += get_string_ending(input1, PTR_DAT_08005f28);\n                        }\n                        while (input5 != 0) {\n                            temp2 = process_data((int)temp2, (int)((ulonglong)temp2 >> 0x20), 0, DAT_08005f18);\n                            undefined4 convertedData = convert_uint_to_int32_with_shift_and_sign();\n                            int conversionResult2 = call_base_conversion_or_function_pointer(input1, convertedData, 10);\n                            result += conversionResult2;\n                            undefined8 improvedFunctionResult = improved_function_name(convertedData);\n                            temp2 = convert_data((int)temp2, (int)((ulonglong)temp2 >> 0x20), (int)improvedFunctionResult, (int)((ulonglong)improvedFunctionResult >> 0x20));\n                            input5--;\n                        }\n                        return result;\n                    }\n                } else {\n                    return get_string_ending(input1, PTR_DAT_08005f24);\n                }\n            } else {\n                return get_string_ending(input1, PTR_DAT_08005f24);\n            }\n        }\n    } else {\n        return get_string_ending(input1, PTR_DAT_08005f1c);\n    }\n}",
            "called": [
                "FUN_0800074c",
                "FUN_08005d8a",
                "FUN_0800040c",
                "FUN_080004f8",
                "FUN_08005cb6",
                "FUN_08000a18",
                "FUN_080009dc",
                "FUN_080009f0",
                "FUN_08005d82",
                "FUN_08000190",
                "FUN_0800042c",
                "FUN_08000a58",
                "FUN_08000aa8",
                "FUN_08005c96",
                "FUN_08000194",
                "FUN_08000a2c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da8",
            "calling": [
                "FUN_08005f2c"
            ],
            "imported": false,
            "current_name": "validate_input_and_convert_to_string_08005da8"
        },
        "FUN_080045fe": {
            "renaming": {
                "FUN_080045fe": "set_device_flags_080045fe",
                "param_1": "device",
                "uint": "uint32_t",
                "initialize_device_if_index_less_than_5_08005604": "initialize_device"
            },
            "code": "int set_device_flags_080045fe(int *device) {\n    uint32_t *device_flags = (uint32_t *)(*device + 0xc);\n    *device_flags &= 0xffffffbf;\n    char *device_type = (char *)((int)device + 0x39);\n    *device_type = 0x20;\n    initialize_device_if_index_less_than_5_08005604();\n    return 0;\n}",
            "called": [
                "FUN_08005604"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045fe",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "set_device_flags_080045fe"
        },
        "FUN_08005f2c": {
            "renaming": {
                "FUN_08005f2c": "validate_and_convert_input_to_string_08005f2c",
                "validate_input_and_convert_to_string_08005da8": "validate_input_and_convert_to_string"
            },
            "code": "void validate_and_convert_input_to_string_08005f2c(void)\n{\n  validate_input();\n  convert_to_string();\n  return;\n}",
            "called": [
                "FUN_08005da8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f2c",
            "calling": [
                "FUN_08005f40",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "validate_and_convert_input_to_string_08005f2c"
        },
        "FUN_080055e0": {
            "renaming": {
                "FUN_080055e0": "execute_function_based_on_index_080055e0",
                "uVar1": "index",
                "PTR_DAT_080055fc": "function_pointer_array",
                "PTR_DAT_08005600": "parameter_array"
            },
            "code": "void execute_function_based_on_index_080055e0(void)\n{\n  uint32_t index = find_index();\n  if (index < 5) {\n    void (*function_pointer)(uint32_t) = *(void (**)(uint32_t))(PTR_DAT_080055fc + index * 4);\n    uint32_t parameter = *(uint32_t *)(PTR_DAT_08005600 + index * 4);\n    function_pointer(parameter);\n  }\n  return;\n}",
            "called": [
                "FUN_080055bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055e0",
            "calling": [
                "FUN_08004618"
            ],
            "imported": false,
            "current_name": "execute_function_based_on_index_080055e0"
        },
        "FUN_08005f40": {
            "renaming": {
                "FUN_08005f40": "calculate_result_08005f40",
                "param_1": "input_value",
                "iVar1": "converted_input",
                "iVar2": "function_result",
                "validate_and_convert_input_to_string_08005f2c": "validate_and_convert_input",
                "execute_function_08005cc0": "execute_function"
            },
            "code": "int calculate_result_08005f40(int input_value)\n{\n  int converted_input = validate_and_convert_input(input_value);\n  int function_result = execute_function(input_value);\n  return function_result + converted_input;\n}",
            "called": [
                "FUN_08005f2c",
                "FUN_08005cc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f40",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "calculate_result_08005f40"
        },
        "FUN_0800213c": {
            "renaming": {
                "FUN_0800213c": "check_and_update_flag_0800213c",
                "param_1": "flag",
                "iVar1": "check_result",
                "uVar2": "u_var_2",
                "uVar3": "u_var_3"
            },
            "code": "int check_and_update_flag_0800213c(int *flag)\n{\n  int check_result;\n  uint temp_flag = flag[10];\n\n  if (flag == NULL)\n    return 1;\n\n  if (flag[10] == 0)\n  {\n    flag[0xb] = 0;\n    *(unsigned char *)(flag + 9) = 0;\n    update_flag();\n  }\n\n  check_result = check_flag(flag);\n\n  if ((temp_flag & 0x10) == 0 && check_result == 0)\n  {\n    flag[10] = (temp_flag & 0xffffeefd) | 2;\n    uint uVar2 = flag[1] | flag[7] | (flag[3] << 1);\n    uint uVar3;\n\n    if (flag[2] == 0x100 || flag[2] == 1)\n      uVar3 = 0x100;\n    else\n      uVar3 = 0;\n\n    if (flag[5] == 1)\n    {\n      if (flag[3] == 0)\n        uVar3 |= (flag[6] - 1) * 0x2000 | 0x800;\n      else\n      {\n        flag[10] |= 0x20;\n        flag[0xb] |= 1;\n      }\n    }\n\n    *(uint *)(*flag + 4) = (*(uint *)(*flag + 4) & 0xffff16ff) | uVar3;\n    *(uint *)(*flag + 8) = (DAT_08002244 & *(uint *)(*flag + 8)) | uVar2;\n\n    if (flag[2] == 0x100 || flag[2] == 1)\n      uVar3 = (flag[4] - 1) * 0x100000;\n    else\n      uVar3 = 0;\n\n    *(uint *)(*flag + 0x2c) = (*(uint *)(*flag + 0x2c) & 0xff0fffff) | uVar3;\n\n    if (uVar2 != (DAT_08002248 & *(uint *)(*flag + 8)))\n    {\n      flag[10] = (temp_flag & 0xffffffed) | 0x10;\n      flag[0xb] |= 1;\n      return 1;\n    }\n\n    flag[0xb] = 0;\n    flag[10] = (temp_flag & 0xfffffffc) | 1;\n    return 0;\n  }\n\n  flag[10] |= 0x10;\n  return 1;\n}",
            "called": [
                "FUN_080020f0",
                "FUN_08004974"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800213c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "check_and_update_flag_0800213c"
        },
        "FUN_0800455a": {
            "renaming": {
                "FUN_0800455a": "initialize_device_0800455a",
                "param_1": "device",
                "param_2": "device_id",
                "param_3": "device_size",
                "PTR_": "device",
                "DAT_": "data"
            },
            "code": "int initialize_device_0800455a(int *PTR_, int PTR__id, int PTR__size) {\n    if (*(char *)((int)PTR_ + 0x39) != ' ') {\n        return 2;\n    }\n    if (PTR__id == 0 || PTR__size == 0) {\n        return 1;\n    }\n    if (*(char *)(PTR_ + 0xe) != '\\x01') {\n        PTR_[8] = PTR__id;\n        *(short *)(PTR_ + 9) = (short)PTR__size;\n        *(short *)((int)PTR_ + 0x26) = (short)PTR__size;\n        PTR_[0xf] = 0;\n        *(undefined *)((int)PTR_ + 0x39) = 0x21;\n        *(undefined *)(PTR_ + 0xe) = 0;\n        *(uint *)(*PTR_ + 0xc) = *(uint *)(*PTR_ + 0xc) | 0x80;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800455a",
            "calling": [
                "FUN_08005604",
                "FUN_08005568"
            ],
            "imported": false,
            "current_name": "initialize_device_0800455a"
        },
        "FUN_08001a66": {
            "renaming": {
                "FUN_08001a66": "update_data_if_necessary_08001a66",
                "param_1": "data_ptr",
                "param_2": "new_data",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "updated_value",
                "DATA_FLAG_OFFSET": "0x70",
                "DATA_VALUE_OFFSET": "0x30",
                "DATA_UPDATE_1_OFFSET": "0x18",
                "DATA_UPDATE_2_OFFSET": "0x1c",
                "DATA_UPDATE_3_OFFSET": "0x20",
                "DATA_UPDATE_4_OFFSET": "0x24",
                "DATA_UPDATE_5_OFFSET": "0x28",
                "DATA_UPDATE_6_OFFSET": "0x2c",
                "FUNC_08000190": "some_function"
            },
            "code": "void update_data_if_necessary_08001a66(int data_ptr, int new_data, undefined4 param_3, undefined4 param_4) {\\n  if ((*(char *)(data_ptr + DATA_FLAG_OFFSET) != \"\\0\") && (*(int *)(data_ptr + DATA_VALUE_OFFSET) != new_data)) {\\n    undefined8 updated_value = FUNC_08000190(0, 0, *(undefined4 *)(data_ptr + DATA_UPDATE_1_OFFSET), *(undefined4 *)(data_ptr + DATA_UPDATE_2_OFFSET), param_4);\\n    *(undefined8 *)(data_ptr + DATA_UPDATE_1_OFFSET) = updated_value;\\n    updated_value = FUNC_08000190(0, 0, *(undefined4 *)(data_ptr + DATA_UPDATE_3_OFFSET), *(undefined4 *)(data_ptr + DATA_UPDATE_4_OFFSET));\\n    *(undefined8 *)(data_ptr + DATA_UPDATE_3_OFFSET) = updated_value;\\n    updated_value = FUNC_08000190(0, 0, *(undefined4 *)(data_ptr + DATA_UPDATE_5_OFFSET), *(undefined4 *)(data_ptr + DATA_UPDATE_6_OFFSET));\\n    *(undefined8 *)(data_ptr + DATA_UPDATE_5_OFFSET) = updated_value;\\n  }\\n  *(int *)(data_ptr + DATA_VALUE_OFFSET) = new_data;\\n  return;\\n}",
            "called": [
                "FUN_08000190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a66",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "update_data_if_necessary_08001a66"
        },
        "FUN_08003c44": {
            "renaming": {
                "FUN_08003c44": "get_value_from_pointer_08003c44",
                "PTR_DAT_08003c4c": "PTR_DATA"
            },
            "code": "int get_value_from_pointer_08003c44(void)\n{\n  int* pointer_value = (int*)PTR_DAT_08003c4c;\n  return *pointer_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c44",
            "calling": [
                "FUN_08001b48",
                "FUN_08003c70",
                "FUN_08003c50"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08003c44"
        },
        "FUN_080028d2": {
            "renaming": {
                "FUN_080028d2": "set_value_from_array_080028d2",
                "param_1": "array",
                "PTR_": "ptr",
                "DAT_": "data",
                "*param_1": "*array",
                "param_1[0x11]": "array[index]",
                "param_1[0x11] & 0xff": "value",
                "*(uint *)(*param_1 + 0x10)": "*ptr",
                "uint": "unsigned int",
                "undefined4": "int",
                "return 0;": "return 0;"
            },
            "code": "int set_value_from_array_080028d2(int *array) {\n    int index = 0x11;\n    int value = array[index] & 0xff;\n    uint *PTR_ = (uint *)(array + 0x10);\n    *PTR_ = value;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "set_value_from_array_080028d2"
        },
        "FUN_08000a18": {
            "renaming": {
                "FUN_08000a18": "is_end_of_input_reached_08000a18",
                "in_CY": "current_character"
            },
            "code": "bool is_end_of_input_reached_08000a18(void)\n{\n  char current_character;\n  compare_and_return_if_end_of_input_reached();\n  return current_character == '\\0';\n}",
            "called": [
                "FUN_080009a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a18",
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "is_end_of_input_reached_08000a18"
        },
        "FUN_08005384": {
            "renaming": {
                "FUN_08005384": "process_value_08005384",
                "cVar1": "input_char",
                "puVar2": "processed_data",
                "uVar3": "processed_value",
                "iVar4": "found_value_index",
                "uVar5": "found_value"
            },
            "code": "void process_value_08005384(void)\n{\n  char input_char;\n  int found_value_index;\n  undefined4 found_value;\n  undefined processed_value;\n  undefined *processed_data = PTR_DAT_080053d0;\n\n  input_char = PTR_DAT_080053c4[1];\n  found_value_index = find_value_index(input_char, PTR_DAT_080053c8);\n\n  if (found_value_index != 0) {\n    found_value = find_value(found_value_index, PTR_DAT_080053c8);\n    processed_value = find_non_zero_value(found_value, PTR_DAT_080053cc);\n\n    processed_data[0x59] = processed_value;\n    processed_data[0x58] = input_char;\n    *(undefined4 *)(processed_data + 0x48) = 0x2580;\n    *(undefined4 *)(processed_data + 0x54) = 0;\n    *(undefined4 *)(processed_data + 0x4c) = 0;\n    *(undefined4 *)(processed_data + 0x50) = 0;\n\n    process_data(processed_data);\n  }\n  return;\n}\n",
            "called": [
                "FUN_08004ca2",
                "FUN_08004c78",
                "FUN_08004f4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005384",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": false,
            "current_name": "process_value_08005384"
        },
        "FUN_08005b3c": {
            "renaming": {
                "FUN_08005b3c": "getByteFromData_08005b3c",
                "param_1": "dataIdx",
                "param_2": "byteIdx",
                "uVar1": "byteVal",
                "PTR_DAT_08005b50": "data",
                "undefined": "byte",
                "maxDataIdx": "MAX_DATA_INDEX",
                "maxByteVal": "MAX_BYTE_VALUE",
                "byteOffset": "BYTE_OFFSET"
            },
            "code": "void getByteFromData_08005b3c(int PTR_DAT_08005b50Idx, uint byteIdx) {\n  uint maxDataIdx = 0x3c;\n  uint maxByteVal = 0xff;\n  uint byteVal = (byteIdx < maxDataIdx) ? PTR_DAT_08005b50[byteIdx] : maxByteVal;\n  uint byteOffset = 300;\n  *(undefined *)(PTR_DAT_08005b50Idx + byteOffset) = byteVal;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b3c",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "getByteFromData_08005b3c"
        },
        "FUN_080046b8": {
            "renaming": {
                "FUN_080046b8": "process_data_if_flags_set_080046b8",
                "param_1": "data",
                "iVar1": "value",
                "uVar2": "second_flags",
                "puVar3": "data_ptr",
                "uVar4": "uVar4",
                "uVar5": "flags"
            },
            "code": "void process_data_if_flags_set_080046b8(uint **data)\n{\n    uint *data_ptr = *data;\n    uint flags = *data_ptr;\n    uint second_flags = data_ptr[3];\n\n    if ((flags & 0xf) == 0 && (flags & 0x20) && (second_flags & 0x20)) {\n        process_data(data);\n        return;\n    }\n\n    if ((flags & 0xf) == 0 || ((data_ptr[5] & 1) == 0 && (second_flags & 0x120) == 0)) {\n        if ((flags & 0x80) && (second_flags & 0x80)) {\n            decode(data);\n            return;\n        }\n\n        if ((flags & 0x40) && (second_flags & 0x40)) {\n            set_device_flags(data);\n        }\n    }\n    else {\n        if ((flags & 1) && (second_flags & 0x100)) {\n            data[0xf] = (uint *)((uint)data[0xf] | 1);\n        }\n\n        uint uVar4 = data_ptr[5] & 1;\n        if ((flags & 4) && uVar4) {\n            data[0xf] = (uint *)((uint)data[0xf] | 2);\n        }\n\n        if ((flags & 2) && uVar4) {\n            data[0xf] = (uint *)((uint)data[0xf] | 4);\n        }\n\n        if ((flags & 8) && uVar4) {\n            data[0xf] = (uint *)((uint)data[0xf] | 8);\n        }\n\n        if (data[0xf] != (uint *)0x0) {\n            if ((flags & 0x20) && (second_flags & 0x20)) {\n                process_data(data);\n            }\n\n            if (!(data[0xf] & 8) && !( (*data)[5] & 0x40)) {\n                do_nothing(data);\n                data[0xf] = (uint *)0x0;\n                return;\n            }\n\n            set_flags(data);\n            data_ptr = *data;\n            if (!(data_ptr[5] & 0x40)) {\n                do_nothing(data);\n                return;\n            }\n\n            data_ptr[5] &= 0xffffffbf;\n\n            if (data[0xd] == (uint *)0x0) {\n                do_nothing(data);\n                return;\n            }\n\n            data[0xd][0xd] = (uint)PTR_LAB_080047d8_1_080047d4;\n            int value = get_value_from_param(data[0xd]);\n\n            if (value != 0) {\n                (*(code *)data[0xd][0xd])();\n                return;\n            }\n        }\n    }\n}",
            "called": [
                "FUN_080045fe",
                "FUN_08005650",
                "FUN_08004198",
                "FUN_0800258c",
                "FUN_08004618",
                "FUN_0800417c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b8",
            "calling": [],
            "imported": false,
            "current_name": "process_data_if_flags_set_080046b8"
        },
        "FUN_08004c8a": {
            "renaming": {
                "FUN_08004c8a": "find_integer_in_array_08004c8a",
                "param_1": "target_value",
                "param_2": "array_start",
                "*param_2": "*array_start"
            },
            "code": "int find_integer_in_array_08004c8a(int target_value, char *array_start) {\n  while (true) {\n    if (*(int *)(array_start + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(array_start + 4) == target_value) {\n      break;\n    }\n    array_start = array_start + 0xc;\n  }\n  return (int)*array_start;\n}",
            "called": [
                "FUN_08004c8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c8a",
            "calling": [
                "FUN_08004ca2",
                "FUN_08004c8a"
            ],
            "imported": false,
            "current_name": "find_integer_in_array_08004c8a"
        },
        "FUN_08001cd0": {
            "renaming": {
                "FUN_08001cd0": "calculate_result_08001cd0",
                "param_1": "param_list",
                "param_2": "param_count",
                "iVar1": "pointer_value_1",
                "puVar5": "current_param",
                "iVar3": "local_var_1",
                "uVar4": "result",
                "uVar2": "calculated_value",
                "uVar6": "pointer_value_2"
            },
            "code": "uint32_t calculate_result_08001cd0(uint32_t **param_list, uint32_t param_count) {\n    uint32_t pointer_value_1 = get_pointer_value();\n    uint32_t *current_param = *param_list;\n    uint32_t result = 0;\n    uint32_t local_var_1 = 0;\n    if ((current_param[2] & 0x100) == 0) {\n        if (((current_param[1] & 0x100) == 0) && ((current_param[0xb] & 0xf00000) == 0)) {\n            do {\n                if ((**param_list & 2) != 0) {\n                    goto return_result;\n                }\n            } while ((param_count == 0xffffffff) ||\n                     ((param_count != 0 && (get_pointer_value() - pointer_value_1) <= param_count)));\n            param_list[10] = (uint32_t *)((uint32_t)param_list[10] | 4);\n            *(undefined *)(param_list + 9) = 0;\n            result = 3;\n        }\n        else {\n            uint32_t pointer_value_2 = *(uint32_t *)PTR_DAT_08001e2c;\n            uint32_t calculated_value = calculate_value_08003da4(2);\n            current_param = *param_list;\n            if (((current_param[4] & DAT_08001e30) == 0) && ((current_param[3] & DAT_08001e30 + 0xdc000000) == 0)) {\n                if ((current_param[4] & DAT_08001e34) == 0) {\n                    if ((current_param[3] & DAT_08001e38) == 0) {\n                        local_var_1 = 0x14;\n                    }\n                    else {\n                        local_var_1 = 0x29;\n                    }\n                }\n                else {\n                    local_var_1 = 0x29;\n                }\n            }\n            else if (((current_param[4] & DAT_08001e34) == 0) && ((current_param[3] & DAT_08001e34 + 0xee000000) == 0)) {\n                local_var_1 = 0x54;\n            }\n            else if ((DAT_08001e3c & current_param[4]) == 0) {\n                if ((DAT_08001e3c & current_param[3]) == 0) {\n                    local_var_1 = 0x54;\n                }\n                else {\n                    local_var_1 = 0xfc;\n                }\n            }\n            else {\n                local_var_1 = 0xfc;\n            }\n            local_var_1 = (pointer_value_2 / calculated_value) * local_var_1;\n            for (; local_var_1 <= local_var_1 && local_var_1 - local_var_1 != 0; local_var_1 = local_var_1 + 1) {\n                if ((param_count != 0xffffffff) &&\n                   ((param_count == 0 || (param_count < (uint32_t)(get_pointer_value() - pointer_value_1))))) {\n                    param_list[10] = (uint32_t *)((uint32_t)param_list[10] | 4);\n                    *(undefined *)(param_list + 9) = 0;\n                    goto return_result;\n                }\n            }\n            **param_list = 0xffffffed;\n            param_list[10] = (uint32_t *)((uint32_t)param_list[10] | 0x200);\n            if (((*param_list)[2] & 0xe0000) == 0xe0000) {\n                if (param_list[3] == (uint32_t *)0x0) {\n                    param_list[10] = (uint32_t *)((uint32_t)param_list[10] & 0xfffffeff);\n                    if (((uint32_t)param_list[10] & 0x1000) == 0) {\n                        param_list[10] = (uint32_t *)((uint32_t)param_list[10] | 1);\n                        result = 0;\n                    }\n                }\n            }\n        }\n    }\n    else {\n        param_list[10] = (uint32_t *)((uint32_t)param_list[10] | 0x20);\n        *(undefined *)(param_list + 9) = 0;\n        result = 1;\n    }\n    return_result:\n    return result;\n}",
            "called": [
                "FUN_08001cc4",
                "FUN_08003da4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cd0",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "calculate_result_08001cd0"
        },
        "FUN_08004178": {
            "renaming": {
                "FUN_08004178": "do_nothing_08004178"
            },
            "code": "\nvoid do_nothing_08004178(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004178",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08004178"
        },
        "FUN_08004a4c": {
            "renaming": {
                "FUN_08004a4c": "find_value_and_update_flags_08004a4c",
                "param_1": "param",
                "local_46": "value_to_get",
                "local_44": "matching_char_index",
                "local_40": "value_to_write",
                "local_3c": "num_bytes_to_write",
                "local_38": "value_to_find",
                "local_34": "unused",
                "local_30": "unused",
                "local_2c": "unused",
                "local_28": "unused",
                "local_24": "unused",
                "local_20": "unused",
                "local_1c": "unused",
                "local_10": "unused",
                "PTR_DAT_08004b2c": "ARRAY_PTR",
                "PTR_DAT_08004b30": "unused",
                "fill_array_with_value_080061e0": "unused",
                "find_value_08004c78": "find_value",
                "check_and_update_flag_0800213c": "set_flag_if_not_set",
                "write_data_to_memory_08001e48": "write_data_to_memory",
                "check_and_update_08002384": "check_and_update_flags",
                "set_flag_if_not_set_08001f84_08002004": "set_flag_if_not_set",
                "calculate_result_08001cd0": "calculate_result",
                "get_value_from_offset_08001f80": "get_value_from_offset",
                "get_value_at_offset_4c_08001e40": "get_value_at_offset_4c",
                "checkAndUpdateFlag_08002348": "check_and_update_flags",
                "check_and_update_flags_0800224c": "check_and_update_all_flags"
            },
            "code": "int find_value_and_update_flags_08004a4c(int param) {\n    int value_to_find = find_value(param, PTR_DAT_08004b2c);\n    if (value_to_find == 0) {\n        return 0;\n    }\n    int value_to_write = 1;\n    int num_bytes_to_write = 2;\n    int write_data_success = write_data_to_memory(param, value_to_find);\n    if (write_data_success != 0) {\n        return 0;\n    }\n    int flag_not_set = set_flag_if_not_set(param);\n    if (flag_not_set != 0) {\n        return 0;\n    }\n    int result = calculate_result(param, 10);\n    if (result != 0) {\n        return 0;\n    }\n    uint32_t value_from_offset = get_value_from_offset(param);\n    int value_to_get = 0;\n    if ((value_from_offset & 0x200) != 0) {\n        value_to_get = get_value_at_offset_4c(param);\n    }\n    int flag_updated = check_and_update_flags(param);\n    if (flag_updated != 0) {\n        return 0;\n    }\n    int all_flags_updated = check_and_update_all_flags(param);\n    if (all_flags_updated != 0) {\n        return 0;\n    }\n    return value_to_get;\n}",
            "called": [
                "FUN_08002348",
                "FUN_080061e0",
                "FUN_0800213c",
                "FUN_08001cd0",
                "FUN_08001e40",
                "FUN_08002004",
                "FUN_0800224c",
                "FUN_08001e48",
                "FUN_08004c78",
                "FUN_08001f80",
                "FUN_0800492c",
                "FUN_08002384"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a4c",
            "calling": [
                "FUN_08005754"
            ],
            "imported": false,
            "current_name": "find_value_and_update_flags_08004a4c"
        },
        "FUN_08006112": {
            "renaming": {
                "FUN_08006112": "initialize_result_if_not_initialized_08006112",
                "param_1": "result",
                "param_2": "value",
                "calculate_result_if_not_initialized_08006158": "calculate_result_if_not_initialized"
            },
            "code": "void initialize_result_if_not_initialized_08006112(int* result, int* value) {\n  calculate_result_if_not_initialized(value, result);\n  return;\n}",
            "called": [
                "FUN_08006158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006112",
            "calling": [
                "FUN_08005fc8"
            ],
            "imported": false,
            "current_name": "initialize_result_if_not_initialized_08006112"
        },
        "FUN_08004974": {
            "renaming": {
                "FUN_08004974": "update_flag_08004974",
                "param_1": "flag",
                "param_2": "value",
                "puVar1": "flag_pointer",
                "iVar2": "flag_address",
                "uVar3": "flag_with_value",
                "uVar4": "updated_flag",
                "uVar5": "current_flag",
                "local_18": "bit_mask",
                "local_14": "bit_masked_value",
                "local_10": "bit_shifted_value"
            },
            "code": "void update_flag_08004974(uint *flag, undefined4 value)\n{\n  int flag_address = DAT_080049ec;\n  uint current_flag = *flag;\n  uint updated_flag;\n  uint bit_mask;\n  uint bit_value;\n  if (current_flag == DAT_080049e0) {\n    updated_flag = *(uint *)(flag_address + 0x18) | 0x200;\n    *(uint *)(flag_address + 0x18) = updated_flag;\n    bit_value = *(uint *)(flag_address + 0x18) & 0x200;\n  }\n  else {\n    updated_flag = DAT_080049e4;\n    if (current_flag == DAT_080049e4) {\n      updated_flag = *(uint *)(flag_address + 0x18) | 0x400;\n      *(uint *)(flag_address + 0x18) = updated_flag;\n      bit_value = *(uint *)(flag_address + 0x18) & 0x400;\n    }\n  }\n  uint8_t *flag_pointer = PTR_DAT_080049e8;\n  uint8_t flag_value = *flag_pointer;\n  uint flag_shifted = ((int)(char)flag_value << 0x18) >> 0x1c;\n  uint flag_with_value = set_flag_value_08004884(flag_shifted, value, updated_flag, bit_value);\n  bit_mask = 1 << (flag_value & 0xf) & 0xffff;\n  uint bit_masked_value = 3;\n  uint bit_shifted_value = 0;\n  update_bits_08002624(flag_with_value, &bit_mask);\n}\n",
            "called": [
                "FUN_08004884",
                "FUN_08002624"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004974",
            "calling": [
                "FUN_0800213c"
            ],
            "imported": false,
            "current_name": "update_flag_08004974"
        },
        "FUN_08003520": {
            "renaming": {
                "FUN_08003520": "check_and_execute_08003520",
                "param_1": "input",
                "puVar2": "data",
                "uVar3": "flags",
                "uVar4": "mask",
                "DAT_080035f8": "FLAG_1",
                "0x100": "MASK_1",
                "0x10200": "FLAG_2",
                "0x10400": "FLAG_3",
                "0x10800": "FLAG_4",
                "execute_condition_08002d1c": "execute_condition",
                "0x3d": "CHAR_PTR_1",
                "0x3e": "CHAR_PTR_2",
                "0x2a": "SHORT_PTR",
                "LEFT_PARENTHESIS": "'('",
                "RIGHT_PARENTHESIS": "')'",
                "EXCLAMATION_MARK": "'!'",
                "SPACE": "' '",
                "NEWLINE": "'\\n'"
            },
            "code": "void check_and_execute_08003520(uint **input)\n{\n  uint *data = *input;\n  uint flags = data[5];\n  uint mask = data[1];\n  if (((flags & DAT_080035f8) != 0) && ((mask & MASK_1) != 0)) {\n    input[16] = (uint *)((uint)input[16] | 1);\n    data[5] = 0xfffffeff;\n    **input = **input | 0x8000;\n  }\n  if (((flags & FLAG_2) != 0) && ((mask & MASK_1) != 0)) {\n    input[16] = (uint *)((uint)input[16] | 2);\n    (*input)[5] = 0xfffffdff;\n  }\n  if (((flags & FLAG_3) != 0) && ((mask & MASK_1) != 0)) {\n    char c = *(char *)((int)input + 0x3d);\n    if (((*(char *)((int)input + 0x3e) == SPACE) && (*(short *)((int)input + 0x2a) == 0)) && (((c == EXCLAMATION_MARK || (c == RIGHT_PARENTHESIS)) || ((c == LEFT_PARENTHESIS && (input[12] == (uint *)0x21)))))) {\n      execute_condition(input);\n    }\n    else {\n      input[16] = (uint *)((uint)input[16] | 4);\n      if (*(char *)((int)input + 0x3e) == NEWLINE) {\n        **input = **input | 0x200;\n      }\n      (*input)[5] = 0xfffffbff;\n    }\n  }\n  if (((flags & FLAG_4) != 0) && ((mask & MASK_1) != 0)) {\n    input[16] = (uint *)((uint)input[16] | 8);\n    (*input)[5] = 0xfffff7ff;\n  }\n  if (input[16] != (uint *)0x0) {\n    execute(input);\n  }\n  return;\n}",
            "called": [
                "FUN_08002d1c",
                "FUN_0800316c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003520",
            "calling": [],
            "imported": false,
            "current_name": "check_and_execute_08003520"
        },
        "FUN_08002ca6": {
            "renaming": {
                "FUN_08002ca6": "process_input_08002ca6",
                "param_1": "input_array",
                "puVar2": "ptr_to_input_9",
                "cVar1": "current_char",
                "PTR_10": "ptr_to_input_10",
                "PTR_2a": "ptr_to_input_2a",
                "PTR_3d": "ptr_to_input_3d",
                "PTR_c": "ptr_to_input_c"
            },
            "code": "int process_input_08002ca6(int *input_array)\n{\n  char current_char;\n  int *ptr_to_input = input_array;\n  int *ptr_to_input_9 = &input_array[9];\n  char *PTR_10 = (char *)(*input_array + 0x10);\n  short *PTR_2a = (short *)((int)input_array + 0x2a);\n  char *PTR_3d = (char *)((int)input_array + 0x3d);\n  int *PTR_c = &input_array[0xc];\n\n  current_char = *PTR_3d;\n  if (*PTR_2a != 0) {\n    *ptr_to_input_9 = (int)(*ptr_to_input_9 + 1);\n    **(char **)ptr_to_input_9 = *PTR_10;\n    *PTR_2a = *PTR_2a + -1;\n    if ((*PTR_2a == 0) && (current_char == '*')) {\n      *(uint *)(*input_array + 4) = *(uint *)(*input_array + 4) & 0xfffffbff;\n      *PTR_c = 0x22;\n      *PTR_3d = 0x28;\n      do_nothing_08002ca4();\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002ca4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca6",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_08002ca6"
        },
        "FUN_08002ca4": {
            "renaming": {
                "FUN_08002ca4": "do_nothing_08002ca4"
            },
            "code": "\nvoid do_nothing_08002ca4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca4",
            "calling": [
                "FUN_08002ca6",
                "FUN_080032b4"
            ],
            "imported": false,
            "current_name": "do_nothing_08002ca4"
        },
        "FUN_08007328": {
            "renaming": {
                "FUN_08007328": "do_nothing_08007328"
            },
            "code": "\nvoid do_nothing_08007328(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007328",
            "calling": [
                "FUN_08006198",
                "FUN_0800010c"
            ],
            "imported": false,
            "current_name": "do_nothing_08007328"
        },
        "FUN_08005b54": {
            "renaming": {
                "FUN_08005b54": "initialize_struct_with_values_08005b54",
                "param_1": "struct_ptr",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3",
                "uVar1": "non_zero_value",
                "PTR_PTR_LAB_080059c8_1_08005ba0": "PTR_PTR_LAB_080059c8_1_08005ba0",
                "PTR_DAT_08005ba4": "PTR_DAT_08005ba4",
                "PTR_DAT_08005ba8": "PTR_DAT_08005ba8",
                "PTR_DAT_08005bac": "PTR_DAT_08005bac"
            },
            "code": "undefined4 *initialize_struct_with_values_08005b54(undefined4 *struct_ptr, undefined4 value_1, undefined4 value_2, undefined4 value_3)\n{\n  undefined non_zero_value;\n  struct_ptr[1] = 0;\n  struct_ptr[2] = 1000;\n  *struct_ptr = PTR_PTR_LAB_080059c8_1_08005ba0;\n  if (struct_ptr == (undefined4 *)PTR_DAT_08005ba4) {\n    set_value_at_address_based_on_index(struct_ptr, 0, value_2, PTR_DAT_08005ba4, value_3);\n    get_byte_from_data(struct_ptr, 1);\n  }\n  else {\n    non_zero_value = find_non_zero_value(value_1, PTR_DAT_08005ba8);\n    *(undefined *)((int)struct_ptr + 0x12d) = non_zero_value;\n    non_zero_value = find_non_zero_value(value_1, PTR_DAT_08005bac);\n    *(undefined *)(struct_ptr + 0x4b) = non_zero_value;\n  }\n  initialize_struct(struct_ptr);\n  return struct_ptr;\n}",
            "called": [
                "FUN_08004ca2",
                "FUN_08005a44",
                "FUN_08005b3c",
                "FUN_08005b24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b54",
            "calling": [
                "FUN_08005bb0"
            ],
            "imported": false,
            "current_name": "initialize_struct_with_values_08005b54"
        },
        "FUN_08004618": {
            "renaming": {
                "FUN_08004618": "process_data_08004618",
                "param_1": "data_ptr",
                "pbVar1": "byte_ptr",
                "sVar2": "remaining_iterations",
                "puVar3": "char_ptr",
                "str_ptr": "char_ptr",
                "data_type": "data_type",
                "data_value": "data_value",
                "output_ptr": "output_ptr"
            },
            "code": "int process_data_08004618(int *data_ptr) {\n  char *str_ptr = (char *)(data_ptr + 0x3a);\n  if (*str_ptr != '\"') {\n    return 2;\n  }\n  \n  int data_type = data_ptr[2];\n  int data_value = *(int *)(*data_ptr + 4);\n  int *output_ptr = (int *)data_ptr[10];\n  \n  if (data_type == 0x1000) {\n    if (data_ptr[4] == 0) {\n      *output_ptr = (ushort)((uint)(data_value << 0x17) >> 0x17);\n      output_ptr++;\n    }\n    else {\n      *output_ptr = (ushort)data_value & 0xff;\n      output_ptr++;\n    }\n  }\n  else {\n    if (data_ptr[4] == 0) {\n      *output_ptr = (char)data_value;\n      output_ptr++;\n    }\n    else {\n      *output_ptr = (byte)data_value & 0x7f;\n      output_ptr++;\n    }\n  }\n  \n  short remaining_iterations = *(short *)(data_ptr + 0x2e) - 1;\n  *(short *)(data_ptr + 0x2e) = remaining_iterations;\n  \n  if (remaining_iterations != 0) {\n    return 0;\n  }\n  \n  *(uint *)(*data_ptr + 0xc) &= 0xffffffdf;\n  *(uint *)(*data_ptr + 0xc) &= 0xfffffeff;\n  *(uint *)(*data_ptr + 0x14) &= 0xfffffffe;\n  *str_ptr = ' ';\n  execute_function_based_on_index();\n  return 0;\n}",
            "called": [
                "FUN_080055e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004618",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "process_data_08004618"
        },
        "FUN_08006c40": {
            "renaming": {
                "FUN_08006c40": "initialize_data_structures_08006c40",
                "param_1": "data",
                "param_2": "param_2",
                "param_3": "param_3",
                "uVar1": "DAT_08006c78",
                "fill_array_with_value_080061e0": "fill_array_with_value"
            },
            "code": "void initialize_data_structures_08006c40(int* data, unsigned short param_2, unsigned short param_3)\n{\n    data[0] = 0;\n    data[1] = 0;\n    data[2] = 0;\n    *(unsigned short*)(data + 3) = param_2;\n    data[25] = 0;\n    *(unsigned short*)((int)data + 0xe) = param_3;\n    data[4] = 0;\n    data[5] = 0;\n    data[6] = 0;\n    fill_array_with_value(data + 23, 0, 8);\n    data[8] = data;\n    data[9] = DAT_08006c78;\n    data[10] = PTR_process_input_08006f5a_1_08006c7c;\n    data[11] = PTR_execute_with_result_and_store_08006f92_1_08006c80;\n    data[12] = PTR_LAB_08006fb6_1_08006c84;\n}",
            "called": [
                "FUN_080061e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c40",
            "calling": [
                "FUN_08006cb4"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_08006c40"
        },
        "FUN_0800157c": {
            "renaming": {
                "FUN_0800157c": "process_input_and_decode_0800157c",
                "param_1": "output",
                "param_2": "input_char",
                "param_3": "input_char_1",
                "param_4": "input_char_2",
                "process_input_080057b4": "process_input",
                "decode_character_08005848": "decode_character"
            },
            "code": "char* process_input_and_decode_0800157c(char* output, int input_char, char input_char_1, char input_char_2)\n{\n  *output = (char)input_char;\n  output[1] = input_char_1;\n  output[2] = input_char_2;\n  process_input(input_char,0);\n  process_input(output[1],1);\n  process_input(output[2],1);\n  decode_character(output[1],1);\n  decode_character(output[2],0);\n  return output;\n}",
            "called": [
                "FUN_08005848",
                "FUN_080057b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "process_input_and_decode_0800157c"
        },
        "FUN_080045a2": {
            "renaming": {
                "FUN_080045a2": "validate_input_080045a2",
                "param_1": "input_array",
                "param_2": "array_size",
                "param_3": "element_size",
                "*(char *)((int)param_1 + 0x3a)": "input_array[10]",
                "*(char *)(param_1 + 0xe)": "input_array[14]",
                "*(short *)(param_1 + 0xb)": "input_array[11]",
                "*(short *)((int)param_1 + 0x2e)": "input_array[12]",
                "param_1[10]": "input_array[10]",
                "param_1[11]": "input_array[11]",
                "param_1[14]": "input_array[14]",
                "param_1[15]": "input_array[15]",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*input_array + 0xc)",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(*input_array + 0x14)"
            },
            "code": "int validate_input_080045a2(int *input_array, int array_size, int element_size) {\n    int return_value = 0;\n    if (input_array[10] != ' ') {\n        return 2;\n    }\n    if (array_size == 0) {\n        return 1;\n    }\n    if (element_size == 0) {\n        return 1;\n    }\n    if (input_array[14] != 1) {\n        input_array[10] = array_size;\n        input_array[11] = (short)element_size;\n        input_array[14] = 0;\n        input_array[15] = 0x22;\n        input_array[14] = 0;\n        *(uint *)(*input_array + 0xc) |= 0x100;\n        *(uint *)(*input_array + 0x14) |= 1;\n        *(uint *)(*input_array + 0xc) |= 0x20;\n        return_value = 0;\n    } else {\n        return_value = 2;\n    }\n    return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045a2",
            "calling": [
                "FUN_080054d4",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "validate_input_080045a2"
        },
        "FUN_08001c32": {
            "renaming": {
                "FUN_08001c32": "initialize_device_and_update_value_08001c32",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void initialize_device_and_update_value_08001c32(void)\n{\n  initialize_device();\n  update_value();\n  return;\n}",
            "called": [
                "FUN_08004c52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c32",
            "calling": [
                "FUN_08005f5e"
            ],
            "imported": false,
            "current_name": "initialize_device_and_update_value_08001c32"
        },
        "FUN_080047e8": {
            "renaming": {
                "FUN_080047e8": "combine_bytes_080047e8",
                "param_1": "address",
                "*(byte *)(param_1 + 0x3a)": "byte1",
                "*(byte *)(param_1 + 0x39)": "byte2"
            },
            "code": "byte combine_bytes_080047e8(int address) {\n    byte byte1 = *(byte *)(address + 0x3a);\n    byte byte2 = *(byte *)(address + 0x39);\n    return byte1 | byte2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047e8",
            "calling": [
                "FUN_080054b0",
                "FUN_0800548c"
            ],
            "imported": false,
            "current_name": "combine_bytes_080047e8"
        },
        "FUN_080057b4": {
            "renaming": {
                "FUN_080057b4": "process_input_080057b4",
                "param_1": "input_index",
                "param_2": "bit_setting",
                "param_3": "bit_position",
                "param_4": "array",
                "iVar1": "bit_value",
                "puVar2": "data_pointer",
                "iVar3": "index_value",
                "PTR_DAT_08005838": "data_pointer_1",
                "PTR_DAT_0800583c": "data_pointer_2",
                "PTR_DAT_08005840": "data_pointer_3",
                "PTR_DAT_08005844": "data_pointer_4"
            },
            "code": "void process_input_080057b4(uint input_index, int bit_setting, int bit_position, uint8_t *array) {\n  int index_value;\n  uint8_t *data_pointer;\n  int data_index;\n  if (input_index < 0x3c) {\n    data_index = (int)(char)PTR_DAT_08005838[input_index];\n    data_pointer = PTR_DAT_08005838;\n  }\n  else {\n    data_index = -1;\n    data_pointer = array;\n  }\n  if (data_index != -1) {\n    int bit_value = get_bit_at_offset(data_index, PTR_DAT_0800583c, bit_position, data_pointer, array);\n    if (bit_value != 0) {\n      int compare_result = compare_int_with_string(data_index, PTR_DAT_08005840);\n      if (compare_result != 0) {\n        process_input_080057b4_and_set_flags(data_index);\n      }\n      set_bit_to_zero(data_index, PTR_DAT_0800583c);\n    }\n    switch(bit_setting) {\n      case 0:\n        set_bits(data_index, 0);\n        break;\n      case 1:\n        set_bits(data_index, 1, 0);\n        break;\n      case 2:\n        set_bits(data_index, 0, 1);\n        break;\n      case 3:\n        set_bits(data_index, 0, 2);\n    }\n    set_bit_in_array(data_index, PTR_DAT_08005844);\n  }\n}",
            "called": [
                "FUN_08004828",
                "FUN_0800480a",
                "FUN_08004bb0",
                "FUN_080047f4",
                "FUN_08004ce2",
                "FUN_08004b3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057b4",
            "calling": [
                "FUN_0800157c",
                "FUN_08000bcc",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "process_input_080057b4"
        },
        "FUN_08007334": {
            "renaming": {
                "FUN_08007334": "do_nothing_08007334"
            },
            "code": "\nvoid do_nothing_08007334(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007334",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08007334"
        },
        "FUN_08001b18": {
            "renaming": {
                "FUN_08001b18": "update_data_and_return_param_08001b18_08001b18",
                "param_1": "input_param"
            },
            "code": "undefined4 update_data_and_return_param_08001b18_08001b18(undefined4 input_param){\n  update_data_08001ab0();\n  return input_param;\n}",
            "called": [
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b18",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "update_data_and_return_param_08001b18_08001b18"
        },
        "thunk_FUN_08005750": {
            "renaming": {
                "thunk_FUN_08005750": "get_one_thunk_08005750"
            },
            "code": "int get_one_thunk_08005750() {\n    return 1;\n}",
            "called": [
                "FUN_08005750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f34",
            "calling": [
                "FUN_08006f00"
            ],
            "imported": false,
            "current_name": "get_one_thunk_08005750"
        },
        "FUN_0800092c": {
            "renaming": {
                "FUN_0800092c": "compare_values_0800092c",
                "param_1": "first_value",
                "param_2": "second_value",
                "param_3": "third_value",
                "param_4": "fourth_value",
                "uVar1": "xor_result",
                "bVar2": "both_zero_or_equal",
                "bVar3": "second_greater_or_third_less"
            },
            "code": "uint compare_values_0800092c(uint first_value, uint second_value, uint third_value, uint fourth_value)\n{\n  uint result;\n  bool both_negative;\n  bool values_equal;\n  \n  both_negative = (((int)(second_value << 1) >> 0x15 == -1 || (int)(fourth_value << 1) >> 0x15 == -1) &&\n     ((((int)(second_value << 1) >> 0x15 == -1 && ((first_value | second_value << 0xc) != 0)) ||\n      (((int)(fourth_value << 1) >> 0x15 == -1 && ((third_value | fourth_value << 0xc) != 0))))));\n  \n  if (both_negative) {\n    result = 1;\n  }\n  else {\n    values_equal = ((first_value | second_value << 1) == 0 && (third_value | fourth_value << 1) == 0) || (second_value == fourth_value && first_value == third_value);\n    if (values_equal) {\n      result = 0;\n    }\n    else {\n      uint xor_result = second_value ^ fourth_value;\n      bool xor_negative = -1 < (int)xor_result;\n      bool second_greater = xor_negative && fourth_value <= second_value;\n      bool third_greater = !xor_negative || third_value <= first_value;\n      uint sign = (int)fourth_value >> 0x1f;\n      if (!second_greater) {\n        sign = ~sign;\n      }\n      result = sign | 1;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800092c",
            "calling": [
                "FUN_080009b8"
            ],
            "imported": false,
            "current_name": "compare_values_0800092c"
        },
        "FUN_08005d8a": {
            "renaming": {
                "FUN_08005d8a": "convert_or_execute_08005d8a",
                "param_1": "execute",
                "param_2": "data",
                "param_3": "length",
                "param_4": "callback_data",
                "convert_base_08005ce8": "convert_base"
            },
            "code": "void convert_or_execute_08005d8a(void (*execute)(void*, uint, uint, void*, void*), void* data, uint length, void* callback_data) {\n  if (length != 0) {\n    convert_base(data, length, length & 0xff);\n    return;\n  }\n  (*execute)(data, length & 0xff, 0, execute, callback_data);\n  return;\n}",
            "called": [
                "FUN_08005ce8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d8a",
            "calling": [
                "FUN_08005da8",
                "FUN_08005da0"
            ],
            "imported": false,
            "current_name": "convert_or_execute_08005d8a"
        },
        "FUN_08002560": {
            "renaming": {
                "FUN_08002560": "set_flag_08002560",
                "param_1": "flag_value",
                "*DAT_0800257c": "*flag_ptr"
            },
            "code": "void set_flag_08002560(int flag_value) {\n  if (flag_value != 4) {\n    *DAT_0800257c = *DAT_0800257c & 0xfffffffb;\n    return;\n  }\n  *DAT_0800257c = *DAT_0800257c | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002560",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "set_flag_08002560"
        },
        "FUN_08006e90": {
            "renaming": {
                "FUN_08006e90": "find_character_in_string_08006e90",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "current_char"
            },
            "code": "char* find_character_in_string_08006e90(char* string, char character, int length) {\n  char* current_char = string;\n  while (*current_char != character && current_char != string + length) {\n    current_char++;\n  }\n  if (current_char == string + length) {\n    return NULL;\n  }\n  return current_char;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e90",
            "calling": [
                "FUN_080066b0",
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "find_character_in_string_08006e90"
        },
        "FUN_0800417a": {
            "renaming": {
                "FUN_0800417a": "do_nothing_0800417a"
            },
            "code": "\nvoid do_nothing_0800417a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417a",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_0800417a"
        },
        "FUN_08006920": {
            "renaming": {
                "FUN_08006920": "get_offset_and_set_value_08006920",
                "param_1": "value_to_set",
                "param_2": "input_value",
                "puVar1": "pointer_to_data",
                "iVar2": "offset"
            },
            "code": "void get_offset_and_set_value_08006920(int *value_to_set, undefined4 input_value) {\n  undefined *pointer_to_data = PTR_DAT_0800693c;\n  *(undefined4 *)PTR_DAT_0800693c = 0;\n  int offset = get_offset(input_value);\n  if ((offset == -1) && (*(int *)pointer_to_data != 0)) {\n    *value_to_set = *(int *)pointer_to_data;\n  }\n  return;\n}",
            "called": [
                "FUN_080056d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006920",
            "calling": [
                "FUN_08006288"
            ],
            "imported": false,
            "current_name": "get_offset_and_set_value_08006920"
        },
        "FUN_080008ba": {
            "renaming": {
                "FUN_080008ba": "calculate_value_080008ba",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_1",
                "unaff_r4": "temp_4",
                "uVar2": "temp_3",
                "uVar3": "temp_2",
                "in_r12": "temp_5",
                "bVar4": "condition_1",
                "mask": "mask",
                "exponent_mask": "exponent_mask",
                "nan_mask": "nan_mask"
            },
            "code": "ulonglong calculate_value_080008ba(uint input_1, uint input_2, uint input_3, uint input_4)\n{\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  bool condition_1;\n  bool condition_2;\n  uint mask = 0x80000000;\n  uint exponent_mask = 0x7ff00000;\n  uint nan_mask = 0x7ff8000000000000;\n  temp_1 = input_4 >> 0x14;\n  temp_2 = input_2;\n  temp_3 = input_3;\n  temp_4 = input_4;\n  temp_5 = input_1;\n  if (temp_1 != temp_4 && temp_1 != in_r12) {\n    if (temp_4 == in_r12) {\n      condition_1 = (input_1 | input_2 << 0xc) == 0;\n      if (condition_1 && temp_1 != in_r12) {\n        return (ulonglong)((input_2 ^ input_4) & mask | exponent_mask) << 0x20;\n      }\n    }\n    else if (temp_1 == in_r12) {\n      temp_5 = input_3;\n      temp_4 = input_4;\n      condition_1 = (input_3 | input_4 << 0xc) == 0;\n      if (condition_1) {\n        return (ulonglong)((input_2 ^ input_4) & mask) << 0x20;\n      }\n    }\n    else {\n      condition_1 = (input_1 | input_2 << 1) == 0;\n      if (!condition_1) {\n        condition_2 = (input_3 | input_4 << 1) == 0;\n        if (!condition_2) {\n          if (temp_4 == 0) {\n            uint temp_6 = input_2 & mask;\n            do {\n              uint temp_7 = input_1 & mask;\n              input_1 = input_1 << 1;\n              input_2 = input_2 * 2 + (uint)(temp_7 != 0);\n            } while ((input_2 & 0x100000) == 0);\n            input_2 = input_2 | temp_6;\n            if (temp_1 != 0) {\n              return CONCAT44(input_2,input_1);\n            }\n          }\n          do {\n            temp_4 = input_3 & mask;\n            input_3 = input_3 << 1;\n            input_4 = input_4 * 2 + (uint)(temp_4 != 0);\n          } while ((input_4 & 0x100000) == 0);\n          return CONCAT44(input_2,input_1);\n        }\n        if ((input_1 | input_2 << 1) != 0) {\n          return (ulonglong)((input_2 ^ input_4) & mask | exponent_mask) << 0x20;\n        }\n        if ((input_3 | input_4 << 1) != 0) {\n          return (ulonglong)((input_2 ^ input_4) & mask) << 0x20;\n        }\n      }\n      else if ((input_3 | input_4 << 1) != 0) {\n        return (ulonglong)((input_2 ^ input_4) & mask) << 0x20;\n      }\n    }\n  }\n  return CONCAT44(temp_2,temp_5) | nan_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008ba",
            "calling": [
                "FUN_0800074c"
            ],
            "imported": false,
            "current_name": "calculate_value_080008ba"
        },
        "FUN_08002d1c": {
            "renaming": {
                "FUN_08002d1c": "execute_condition_08002d1c",
                "param_1": "params",
                "param_1[0xb]": "param_b",
                "*(char *)((int)param_1 + 0x3d)": "*param_3d",
                "DAT_08002dac": "PTR_DAT_08002dac_4",
                "(uint *)0x4": "PTR_DAT_08002dac_4",
                "(uint *)0x8": "PTR_DAT_08002dac_8",
                "param_1[0xc]": "params[0xc]"
            },
            "code": "int execute_condition_08002d1c(uint **params)\\n\\\n    {\\n\\\n        uint *param_b = params[0xb];\\n\\\n        char *param_3d = (char *)((int)params + 0x3d);\\n\\\n        if ((param_b == DAT_08002dac || param_b == PTR_DAT_08002dac_8) && (*param_3d == \"(\")) {\\n\\\n            param_b = DAT_08002dac;\\n\\\n            (*params)[1] &= 0xfffff8ff;\\n\\\n            (*params)[5] = 0xfffffbff;\\n\\\n            **params &= 0xfffffbff;\\n\\\n            params[0xc] = NULL;\\n\\\n            *param_3d = \" \";\\n\\\n            *(param_3d + 1) = 0;\\n\\\n            execute_function_on_condition();\\n\\\n        }\\n\\\n        else if (*param_3d == \"!\") {\\n\\\n            param_b = DAT_08002dac;\\n\\\n            params[0xc] = (uint *)0x21;\\n\\\n            *param_3d = \" \";\\n\\\n            *(param_3d + 1) = 0;\\n\\\n            (*params)[1] &= 0xfffff8ff;\\n\\\n            (*params)[5] = 0xfffffbff;\\n\\\n            **params &= 0xfffffbff;\\n\\\n            do_nothing();\\n\\\n        }\\n\\\n        else {\\n\\\n            (*params)[5] = 0xfffffbff;\\n\\\n        }\\n\\\n        return 0;\\n\\\n    }",
            "called": [
                "FUN_08002c52",
                "FUN_08004ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d1c",
            "calling": [
                "FUN_08003520"
            ],
            "imported": false,
            "current_name": "execute_condition_08002d1c"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "get_error_code_08005714"
            },
            "code": "unsigned int get_error_code_08005714(void)\n{\n  return 0xFFFFFFFF;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [],
            "imported": false,
            "current_name": "get_error_code_08005714"
        },
        "FUN_08003da4": {
            "renaming": {
                "FUN_08003da4": "calculate_value_08003da4",
                "param_1": "input",
                "uVar1": "result",
                "local_24": "shift_value",
                "abStack_20": "stack_array",
                "uStack_1c": "stack_3",
                "uStack_18": "stack_2",
                "uStack_14": "stack_1"
            },
            "code": "uint calculate_value_08003da4(int input)\n{\n  uint result;\n  undefined2 shift_value;\n  byte stack_array[4];\n  undefined4 stack_1;\n  undefined4 stack_2;\n  undefined4 stack_3;\n  stack_3 = *(undefined4 *)(PTR_DAT_08003e8c + 8);\n  stack_2 = *(undefined4 *)(PTR_DAT_08003e8c + 4);\n  stack_1 = *(undefined4 *)PTR_DAT_08003e8c;\n  shift_value = *(undefined2 *)(PTR_DAT_08003e8c + 0x10);\n  if (input == 2) {\n    result = get_shifted_value_from_pointer_08003c70();\n    result = result / ((((DAT_08003e90[1] << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input == 0x10) {\n    if ((*DAT_08003e90 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      result = DAT_08003e9c;\n      if ((DAT_08003e90[1] & 0x10000) != 0) {\n        result = DAT_08003e94 / *(byte *)((int)&shift_value - ((int)(DAT_08003e90[1] << 0xe) >> 0x1f));\n      }\n      result = result * stack_array[(DAT_08003e90[1] << 10) >> 0x1c];\n      if ((DAT_08003e90[1] & 0x400000) == 0) {\n        result = (uint)((ulonglong)DAT_08003e98 * (ulonglong)(result * 2) >> 0x21);\n      }\n    }\n  }\n  else if (input == 1) {\n    if ((DAT_08003e90[8] & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else {\n      result = DAT_08003e90[8] & 0x300;\n      if ((result == 0x200) && ((DAT_08003e90[9] & 2) != 0)) {\n        result = 32000;\n      }\n      else if (result == 0x300) {\n        if ((*DAT_08003e90 & 0x20000) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0xf424;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08003c70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003da4",
            "calling": [
                "FUN_08001cd0",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "calculate_value_08003da4"
        },
        "FUN_08005a44": {
            "renaming": {
                "FUN_08005a44": "initialize_struct_08005a44",
                "param_1": "struct_address",
                "PTR_": "",
                "DAT_": "",
                "first_value": "pointer_to_first_value",
                "second_value": "pointer_to_second_value",
                "third_value": "pointer_to_third_value",
                "fourth_value": "pointer_to_fourth_value",
                "fifth_value": "pointer_to_fifth_value",
                "sixth_value": "pointer_to_sixth_value"
            },
            "code": "void initialize_struct_08005a44(int struct_address)\n{\n    int* first_value = (int *)(struct_address + 0x130);\n    *first_value = struct_address + 0x11;\n    short* second_value = (short *)(struct_address + 0x134);\n    *second_value = 0;\n    short* third_value = (short *)(struct_address + 0x136);\n    *third_value = 0;\n    int* fourth_value = (int *)(struct_address + 0x138);\n    *fourth_value = struct_address + 0x51;\n    short* fifth_value = (short *)(struct_address + 0x13c);\n    *fifth_value = 0;\n    short* sixth_value = (short *)(struct_address + 0x13e);\n    *sixth_value = 0;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a44",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "initialize_struct_08005a44"
        },
        "FUN_080009dc": {
            "renaming": {
                "FUN_080009dc": "is_end_of_string_080009dc",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_080009dc(void)\n{\n  char current_char;\n  compare_and_return();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009dc",
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08001814",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "is_end_of_string_080009dc"
        },
        "FUN_0800417c": {
            "renaming": {
                "FUN_0800417c": "set_flags_0800417c",
                "param_1": "pointer",
                "*param_1": "*pointer",
                "*(uint *)(*param_1 + 0xc)": "*ptr1",
                "*(uint *)(*param_1 + 0x14)": "*ptr2",
                "*(undefined *)((int)param_1 + 0x3a)": "*flag"
            },
            "code": "void set_flags_0800417c(int *pointer)\n{\n    uint *ptr1 = (uint *)(*pointer + 0xc);\n    uint *ptr2 = (uint *)(*pointer + 0x14);\n    *ptr1 &= 0xfffffedf;\n    *ptr2 &= 0xfffffffe;\n    char *flag = (char *)((int)pointer + 0x3a);\n    *flag = 0x20;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417c",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "set_flags_0800417c"
        },
        "FUN_08004b94": {
            "renaming": {
                "FUN_08004b94": "get_pointer_value_08004b94",
                "get_pointer_value_08001cc4": "get_pointer_value_helper"
            },
            "code": "void get_pointer_value_08004b94() \n{\n  get_pointer_value_08004b94_helper();\n  return;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b94",
            "calling": [
                "FUN_080058e0"
            ],
            "imported": false,
            "current_name": "get_pointer_value_08004b94"
        },
        "FUN_080058e0": {
            "renaming": {
                "FUN_080058e0": "get_pointer_value_and_return_080058e0"
            },
            "code": "void get_pointer_value_and_return_080058e0(void)\n{\n  get_pointer_value();\n  return;\n}\n",
            "called": [
                "FUN_08004b94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e0",
            "calling": [
                "FUN_080016b4",
                "FUN_08000bcc",
                "FUN_08000cd0",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "get_pointer_value_and_return_080058e0"
        },
        "FUN_08001918": {
            "renaming": {
                "FUN_08001918": "shift_and_concatenate_08001918",
                "param_1": "shifted_value",
                "param_2": "concatenated_value",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "uVar1": "high_result",
                "uVar2": "shifted",
                "uVar3": "concatenated"
            },
            "code": "void shift_and_concatenate_08001918(unsigned int *shifted_value, unsigned int *concatenated_value) { \\n\\\n  if (*concatenated_value > 0) { \\n\\\n    unsigned long long shifted = improved_function(*concatenated_value); \\n\\\n    unsigned long long concatenated = shift_and_concatenate_08001918(*shifted_value); \\n\\\n    unsigned long long result = function_2((int)shifted, (int)(shifted >> 0x20), (int)concatenated, (int)(concatenated >> 0x20), param_4); \\n\\\n    unsigned int high_result = (unsigned int)(result >> 0x20); \\n\\\n    unsigned long long final_result = function_1((int)result, high_result, *(unsigned int *)(param_1 + 0x20), *(unsigned int *)(param_1 + 0x24)); \\n\\\n    *(unsigned long long *)(param_1 + 0x20) = final_result; \\n\\\n    unsigned long long second_result = function_2(*(unsigned int *)(param_1 + 0x28), *(unsigned int *)(param_1 + 0x2c), (int)result, high_result); \\n\\\n    *(unsigned long long *)(param_1 + 0x28) = second_result; \\n\\\n    *shifted_value = *concatenated_value; \\n\\\n  } \\n\\\n  return; \\n\\\n}",
            "called": [
                "FUN_0800074c",
                "FUN_0800042c",
                "FUN_0800040c",
                "FUN_080004f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001918",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "shift_and_concatenate_08001918"
        },
        "FUN_0800611c": {
            "renaming": {
                "FUN_0800611c": "process_data_and_call_function_0800611c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "arg4",
                "uVar1": "var1",
                "puVar2": "function_name",
                "uVar3": "var3",
                "uVar4": "arg4_copy"
            },
            "code": "void process_data_and_call_function_0800611c(undefined4 arg1, undefined4 arg2, undefined *data, undefined4 arg4) {\n  undefined4 var1;\n  undefined *function_name;\n  undefined8 var3;\n  undefined4 arg4_copy;\n  var1 = *(undefined4 *)(*(int *)PTR_PTR_DAT_08006148 + 0xc);\n  function_name = PTR_s___function__0800614c;\n  arg4_copy = arg4;\n  if (data == (undefined *)0x0) {\n    goto end_of_function;\n  }\n  do {\n    process_data_and_call_function_0800611c_08006174(var1, PTR_s_assertion___s__failed__file___s__08006150, arg4, arg1, arg2, function_name, data, arg4_copy);\n    var3 = process_data_and_wait_for_response_08006ac0();\n    arg2 = (undefined4)((ulonglong)var3 >> 0x20);\n    var1 = (undefined4)var3;\n  } while (true);\n  end_of_function:\n  data = PTR_s__08006154;\n  function_name = PTR_s__08006154;\n}\n",
            "called": [
                "FUN_08006174",
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800611c",
            "calling": [
                "FUN_08005a68"
            ],
            "imported": false,
            "current_name": "process_data_and_call_function_0800611c"
        },
        "FUN_080047f4": {
            "renaming": {
                "FUN_080047f4": "get_bit_at_offset_080047f4",
                "param_1": "value",
                "param_2": "offset",
                "PTR_": "ptr",
                "DAT_": "masked_value"
            },
            "code": "unsigned int get_bit_at_offset_080047f4(unsigned int value, int offset)\n{\n    unsigned int index = (value << 0x18) >> 0x1c;\n    unsigned int *PTR_ = (unsigned int *)(offset + index * 4);\n    unsigned int DAT_ = (*PTR_) >> (value & 0xf);\n    unsigned int bit_value = DAT_ & 1;\n    return bit_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "FUN_08005890",
                "FUN_08005848",
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "get_bit_at_offset_080047f4"
        },
        "FUN_080009f0": {
            "renaming": {
                "FUN_080009f0": "should_return_080009f0",
                "in_ZR": "zero_register",
                "in_CY": "carry_flag",
                "compare_and_return_080009b8": "compare_and_return"
            },
            "code": "bool should_return_080009f0() {\n  undefined zero_register;\n  undefined carry_flag;\n  compare_and_return();\n  return !((bool)carry_flag) || ((bool)zero_register);\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009f0",
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "should_return_080009f0"
        },
        "FUN_0800134e": {
            "renaming": {
                "FUN_0800134e": "decode_and_print_0800134e",
                "param_1": "input",
                "param_2": "output",
                "param_3": "flag",
                "param_4": "size"
            },
            "code": "int decode_and_print_0800134e(int input, int output, int flag, int size) {\n  decode_and_print_0800134e_08001310(input, output, flag, size, size);\n  return 1;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800134e",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "decode_and_print_0800134e"
        },
        "FUN_08002c10": {
            "renaming": {
                "FUN_08002c10": "modify_uint_array_08002c10",
                "param_1": "uint_array_ptr",
                "puVar1": "uint_array",
                "*(char *)((int)param_1 + 0x3d)": "uint_array[15]",
                "*(undefined *)((int)param_1 + 0x3d)": "uint_array[15]",
                "*param_1": "*uint_array_ptr",
                "**param_1": "*(*uint_array_ptr)",
                "(*param_1)[1]": "uint_array[1]"
            },
            "code": "int modify_uint_array_08002c10(uint **uint_array_ptr) {\n  uint *uint_array = *uint_array_ptr;\n  if (uint_array[15] != ' ') {\n    return 2;\n  }\n  uint_array[15] = '(';\n  if ((uint_array[0] & 1) == 0) {\n    uint_array[0] = uint_array[0] | 1;\n  }\n  *uint_array = *uint_array | 0x400;\n  uint_array[1] = uint_array[1] | 0x300;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c10",
            "calling": [
                "FUN_08004ef4",
                "FUN_08004ec4"
            ],
            "imported": false,
            "current_name": "modify_uint_array_08002c10"
        },
        "FUN_08006be0": {
            "renaming": {
                "FUN_08006be0": "execute_command_08006be0",
                "param_1": "command_args",
                "param_2": "command_data",
                "uVar1": "result",
                "iVar2": "data_var_1",
                "piVar3": "data_var_2",
                "uVar4": "data_var_3",
                "uVar5": "data_var_4",
                "iVar6": "data_var_5",
                "unaff_r4": "0",
                "unaff_r5": "0",
                "pcVar7": "function_pointer_1",
                "iVar8": "data_var_7",
                "uVar9": "data_var_8",
                "bVar10": "data_var_9"
            },
            "code": "uint execute_command_08006be0(uint *command_args, int *command_data)\\n\\\n{\\n\\\n  uint result = 0;\\n\\\n  int data_var_1;\\n\\\n  int *data_var_2;\\n\\\n  uint data_var_3;\\n\\\n  ushort data_var_4;\\n\\\n  int data_var_5;\\n\\\n  bool data_var_6;\\n\\\n  code *function_pointer_1;\\n\\\n  int data_var_7;\\n\\\n  uint data_var_8;\\n\\\n  code *UNRECOVERED_JUMPTABLE_00;\\n\\\n  bool data_var_9;\\n\\\n  \\n\\\n  if (command_data[4] != 0) {\\n\\\n    if ((command_args != (uint *)0x0) && (command_args[6] == 0)) {\\n\\\n      initialize_data_08006cb4();\\n\\\n    }\\n\\\n    if (command_data == (int *)PTR_DAT_08006c28) {\\n\\\n      data_var_2 = (int *)command_args[1];\\n\\\n    }\\n\\\n    else if (command_data == (int *)PTR_DAT_08006c2c) {\\n\\\n      data_var_2 = (int *)command_args[2];\\n\\\n    }\\n\\\n    else if (command_data == (int *)PTR_DAT_08006c30) {\\n\\\n      data_var_2 = (int *)command_args[3];\\n\\\n    }\\n\\\n    if (*(short *)(data_var_2 + 3) != 0) {\\n\\\n      data_var_4 = *(ushort *)(data_var_2 + 3);\\n\\\n      data_var_3 = (uint)data_var_4;\\n\\\n      if ((int)(data_var_3 << 0x1c) < 0) {\\n\\\n        data_var_1 = command_data[4];\\n\\\n        if (data_var_1 != 0) {\\n\\\n          data_var_5 = data_var_3 << 0x1e;\\n\\\n          data_var_6 = data_var_5 != 0;\\n\\\n          if (data_var_6) {\\n\\\n            data_var_5 = 0;\\n\\\n          }\\n\\\n          data_var_7 = *data_var_2;\\n\\\n          if (!data_var_6) {\\n\\\n            data_var_5 = command_data[5];\\n\\\n          }\\n\\\n          *data_var_2 = data_var_1;\\n\\\n          command_data[2] = data_var_5;\\n\\\n          for (data_var_7 = data_var_7 - data_var_1; 0 < data_var_7; data_var_7 = data_var_7 - data_var_5) {\\n\\\n            data_var_5 = (*(code *)command_data[10])(command_args,command_data[8],data_var_1,data_var_7,0,0);\\n\\\n            if (data_var_5 < 1) {\\n\\\n              data_var_4 = *(ushort *)(data_var_2 + 3);\\n\\\n              goto LAB_08006bc6;\\n\\\n            }\\n\\\n            data_var_1 = data_var_1 + data_var_5;\\n\\\n          }\\n\\\n        }\\n\\\n      }\\n\\\n      else if (((0 < command_data[1]) || (0 < command_data[0x10])) &&\\n\\\n              (function_pointer_1 = (code *)command_data[0xb], function_pointer_1 != (code *)0x0)) {\\n\\\n        data_var_8 = *command_args;\\n\\\n        *command_args = 0;\\n\\\n        if ((data_var_4 & 0x1000) == 0) {\\n\\\n          data_var_1 = (*function_pointer_1)(command_args,command_data[8],data_var_3 & 0x1000,1);\\n\\\n          if ((data_var_1 == -1) && (data_var_3 = *command_args, data_var_3 != 0)) {\\n\\\n            if ((data_var_3 != 0x1d) && (data_var_3 != 0x16)) {\\n\\\n              *(ushort *)(data_var_2 + 3) = *(ushort *)(data_var_2 + 3) | 0x40;\\n\\\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\\n\\\n                    /* WARNING: Treating indirect jump as call */\\n\\\n              result = (*UNRECOVERED_JUMPTABLE_00)();\\n\\\n              return result;\\n\\\n            }\\n\\\n            *command_args = data_var_8;\\n\\\n            goto LAB_08006aea;\\n\\\n          }\\n\\\n        }\\n\\\n        else {\\n\\\n          data_var_1 = command_data[0x15];\\n\\\n        }\\n\\\n        if (((int)((uint)*(ushort *)(data_var_2 + 3) << 0x1d) < 0) &&\\n\\\n           (data_var_1 = data_var_1 - command_data[1], command_data[0xd] != 0)) {\\n\\\n          data_var_1 = data_var_1 - command_data[0x10];\\n\\\n        }\\n\\\n        data_var_1 = (*(code *)command_data[0xb])(command_args,command_data[8],data_var_1,0);\\n\\\n        data_var_4 = *(ushort *)(data_var_2 + 3);\\n\\\n        if ((data_var_1 == -1) &&\\n\\\n           ((0x1d < *command_args || (-1 < (int)((DAT_08006bdc >> (*command_args & 0xff)) << 0x1f))))) {\\n\\\nLAB_08006bc6:\\n\\\n          *(ushort *)(data_var_2 + 3) = data_var_4 | 0x40;\\n\\\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\\n\\\n                    /* WARNING: Treating indirect jump as call */\\n\\\n          result = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\\n\\\n          return result;\\n\\\n        }\\n\\\n        command_data[1] = 0;\\n\\\n        *data_var_2 = command_data[4];\\n\\\n        if (((int)((uint)data_var_4 << 0x13) < 0) && ((data_var_1 != -1 || (*command_args == 0)))) {\\n\\\n          command_data[0x15] = data_var_1;\\n\\\n        }\\n\\\n        data_var_2 = (int *)command_data[0xd];\\n\\\n        *command_args = data_var_8;\\n\\\n        if (data_var_2 != (int *)0x0) {\\n\\\n          if (data_var_2 != command_data + 0x11) {\\n\\\n            insert_into_linked_list_080061f0(command_args);\\n\\\n          }\\n\\\n          command_data[0xd] = 0;\\n\\\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\\n\\\n                    /* WARNING: Treating indirect jump as call */\\n\\\n          result = (*UNRECOVERED_JUMPTABLE_00)();\\n\\\n          return result;\\n\\\n        }\\n\\\n      }\\n\\\nLAB_08006aea:\\n\\\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\\n\\\n                    /* WARNING: Treating indirect jump as call */\\n\\\n      result = (*UNRECOVERED_JUMPTABLE_00)(0);\\n\\\n      return result;\\n\\\n    }\\n\\\n  }\\n\\\n  return 0;\\n\\\n}",
            "called": [
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006be0",
            "calling": [
                "FUN_08006344"
            ],
            "imported": false,
            "current_name": "execute_command_08006be0",
            "code_backup": "\nundefined4 FUN_08006be0(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08006cb4();\n    }\n    if (param_2 == (int *)PTR_DAT_08006c28) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)PTR_DAT_08006c2c) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)PTR_DAT_08006c30) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08006bc6;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((DAT_08006bdc >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            insert_into_linked_list_080061f0(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_080012e8": {
            "renaming": {
                "FUN_080012e8": "decode_and_print_080012e8",
                "param_1": "address",
                "param_2": "value",
                "uVar1": "bit_mask",
                "decode_character_08005848": "decode_character",
                "decode_and_print_char_080012a2": "decode_and_print_char"
            },
            "code": "void decode_and_print_080012e8(int address, int value) {\n  uint8_t bit_mask;\n  for (bit_mask = 0; bit_mask < 8; bit_mask++) {\n    decode_character(*(undefined *)(address + bit_mask + 0xb), value >> (bit_mask & 0xff) & 1);\n  }\n  decode_and_print_080012e8_char(address);\n  return;\n}",
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012e8",
            "calling": [
                "FUN_08001310"
            ],
            "imported": false,
            "current_name": "decode_and_print_080012e8"
        },
        "FUN_080058e8": {
            "renaming": {
                "FUN_080058e8": "do_nothing_080058e8"
            },
            "code": "\nvoid do_nothing_080058e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e8",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "do_nothing_080058e8"
        },
        "FUN_08006370": {
            "renaming": {
                "FUN_08006370": "process_input_08006370",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_string",
                "param_4": "input_length",
                "iVar1": "return_value",
                "puVar2": "end_of_input",
                "iVar3": "current_index"
            },
            "code": "int process_input_08006370(int input_param_1, int input_param_2, char *input_string, int input_length) {\n  int return_value = 0;\n  char *end_of_input = input_string + input_length;\n  int current_index = 0;\n  while (current_index != input_length) {\n    if (input_string == end_of_input) {\n      return 0;\n    }\n    return_value = process_input_08006370_08006344(input_param_1, *input_string, input_param_2, input_length, current_index);\n    input_length = return_value + 1;\n    input_string++;\n    current_index++;\n  }\n  return return_value;\n}",
            "called": [
                "FUN_08006344"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006370",
            "calling": [
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "process_input_08006370"
        },
        "FUN_080024f8": {
            "renaming": {
                "FUN_080024f8": "set_bit_at_index_080024f8",
                "param_1": "index",
                "DAT_08002510": "data_ptr",
                "<unnamed variable>": "bit_mask"
            },
            "code": "void set_bit_at_index_080024f8(uint index) {\n  if (index >= 0) {\n    int *DAT_08002510 = (int *)(DAT_08002510 + (index >> 5) * 4);\n    int bit_index = index & 0x1f;\n    int bit_mask = 1 << bit_index;\n    *DAT_08002510 = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080024f8",
            "calling": [
                "FUN_08005568",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "set_bit_at_index_080024f8"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "update_data_08001ab0",
                "param_1": "data_address",
                "param_2": "data_size",
                "param_3": "input_size",
                "param_4": "unused_param",
                "param_5": "input_str_1",
                "param_6": "input_str_2",
                "param_7": "unused_param",
                "param_8": "unused_param",
                "param_9": "unused_param",
                "param_10": "unused_param",
                "param_11": "unused_param",
                "param_12": "unused_param",
                "iVar1": "pointer_value",
                "extraout_r1": "unused_param"
            },
            "code": "int update_data_08001ab0(int data_address, int data_size, int input_address, int input_size, int input_str_1, int input_str_2){\n  int pointer_value;\n  *(int *)(data_address + 0x3c) = input_size;\n  *(int *)(data_address + 0x38) = input_address;\n  *(int *)(data_address + 0x40) = data_size;\n  *(char *)(data_address + 0x70) = 0;\n  parse_input(data_address, input_address, 0, 0, input_str_1, input_str_2);\n  *(int *)(data_address + 0x58) = 100;\n  update_data_08001ab0_if_necessary(data_address, input_str_1);\n  parse_input_string(data_address, pointer_value, input_str_1, input_str_2, input_size, data_size, input_address, input_str_1, input_str_2);\n  pointer_value = get_pointer_value_and_return();\n  *(int *)(data_address + 0x44) = pointer_value - *(int *)(data_address + 0x58);\n  return data_address;\n}",
            "called": [
                "FUN_08001a66",
                "FUN_08001960",
                "FUN_08001814",
                "FUN_080058e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08001b18"
            ],
            "imported": false,
            "current_name": "update_data_08001ab0"
        },
        "FUN_08006ac0": {
            "renaming": {
                "FUN_08006ac0": "process_data_and_wait_for_response_08006ac0",
                "puVar1": "response_ptr",
                "iVar2": "response_length",
                "piVar3": "data_ptr",
                "piVar4": "linked_list_head",
                "uVar5": "response_status",
                "uVar6": "response_flags",
                "iVar7": "data_length",
                "pcVar8": "response_handler",
                "iVar9": "data_offset",
                "uVar10": "response_opcode",
                "bVar11": "is_linked_list_head",
                "uVar12": "wait_result"
            },
            "code": "void process_data_and_wait_for_response_08006ac0()\n{\n    uint *response_ptr;\n    int response_length;\n    int *data_ptr;\n    int *linked_list_head;\n    uint response_status;\n    ushort response_flags;\n    int data_length;\n    code *response_handler;\n    int data_offset;\n    uint response_opcode;\n    bool is_linked_list_head;\n    undefined8 wait_result;\n\n    process_data(6);\n    response_handler = (code *)0x8006acf;\n    wait_result = wait_infinite_loop(1);\n    data_ptr = (int *)((ulonglong)wait_result >> 0x20);\n    response_ptr = (uint *)wait_result;\n    response_flags = *(ushort *)(data_ptr + 3);\n    response_opcode = (uint)response_flags;\n    if ((int)(response_opcode << 0x1c) < 0)\n    {\n        data_length = data_ptr[4];\n        if (data_length != 0)\n        {\n            data_offset = response_opcode << 0x1e;\n            is_linked_list_head = data_offset == 0;\n            if (is_linked_list_head)\n            {\n                data_offset = 0;\n            }\n            linked_list_head = *data_ptr;\n            if (!is_linked_list_head)\n            {\n                data_offset = data_ptr[5];\n            }\n            *data_ptr = data_length;\n            data_ptr[2] = data_offset;\n            for (linked_list_head = linked_list_head - data_length; linked_list_head > 0; linked_list_head = linked_list_head - data_offset)\n            {\n                data_offset = (*(code *)data_ptr[10])(response_ptr, data_ptr[8], data_length, linked_list_head);\n                if (data_offset < 1)\n                {\n                    response_flags = *(ushort *)(data_ptr + 3);\n                    goto LAB_08006bc6;\n                }\n                data_length = data_length + data_offset;\n            }\n        }\n    }\n    else if (((0 < data_ptr[1]) || (0 < data_ptr[0x10])) &&\n             (response_handler = (code *)data_ptr[0xb], response_handler != (code *)0x0))\n    {\n        response_status = *response_ptr;\n        *response_ptr = 0;\n        if ((response_opcode & 0x1000) == 0)\n        {\n            data_length = (*response_handler)(response_ptr, data_ptr[8], response_opcode & 0x1000, 1);\n            if ((data_length == -1) && (*response_ptr != 0))\n            {\n                if ((*response_ptr != 0x1d) && (*response_ptr != 0x16))\n                {\n                    response_flags = *(ushort *)(data_ptr + 3);\n                    *(ushort *)(data_ptr + 3) = response_flags | 0x40;\n                    (*response_handler)();\n                    return;\n                }\n                *response_ptr = response_status;\n                goto LAB_08006aea;\n            }\n        }\n        else\n        {\n            data_length = data_ptr[0x15];\n        }\n        if (((int)((uint)response_flags << 0x1d) < 0) &&\n            (data_length = data_length - data_ptr[1], data_ptr[0xd] != 0))\n        {\n            data_length = data_length - data_ptr[0x10];\n        }\n        data_length = (*(code *)data_ptr[0xb])(response_ptr, data_ptr[8], data_length, 0);\n        response_flags = *(ushort *)(data_ptr + 3);\n        if ((data_length == -1) && ((0x1d < *response_ptr) || (-1 < (int)((DAT_08006bdc >> (*response_ptr & 0xff)) << 0x1f))))\n        {\n            goto LAB_08006bc6;\n        }\n        data_ptr[1] = 0;\n        *data_ptr = data_ptr[4];\n        if (((int)((uint)response_flags << 0x13) < 0) && ((data_length != -1) || (*response_ptr == 0)))\n        {\n            data_ptr[0x15] = data_length;\n        }\n        linked_list_head = (int *)data_ptr[0xd];\n        *response_ptr = response_status;\n        if (linked_list_head != (int *)0x0)\n        {\n            if (linked_list_head != data_ptr + 0x11)\n            {\n                insert_into_linked_list(response_ptr);\n            }\n            data_ptr[0xd] = 0;\n            (*response_handler)();\n            return;\n        }\n    }\nLAB_08006aea:\n    (*response_handler)(0);\n    return;\n}\n",
            "called": [
                "FUN_080061f0",
                "FUN_08006f00",
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ac0",
            "calling": [
                "FUN_08007090",
                "FUN_0800611c"
            ],
            "imported": false,
            "current_name": "process_data_and_wait_for_response_08006ac0"
        },
        "FUN_08004198": {
            "renaming": {
                "FUN_08004198": "decode_08004198",
                "param_1": "param_array",
                "pbVar2": "byte_ptr",
                "decoded_value": "decoded_value",
                "sVar1": "short_var",
                "first_char": "first_char",
                "offset": "offset",
                "param_8": "param_8",
                "param_2": "param_2"
            },
            "code": "int decode_08004198(int *param_array)\n{\n  char first_char = *(char *)(param_array + 0x39);\n  if (first_char != '!') {\n    return 2;\n  }\n  int offset = *param_array;\n  int *param_8 = (int *)(param_array + 8);\n  int param_2 = param_array[2];\n  int *decode_08004198d_value = (int *)(offset + 4);\n  if (param_2 == 0x1000) {\n    *decode_08004198d_value = *(unsigned short *)(*param_8) & 0x1ff;\n    if (param_array[4] == 0) {\n      *param_8 += 2;\n    }\n    else {\n      *param_8 += 1;\n    }\n  }\n  else {\n    byte *byte_ptr = (byte *)(*param_8);\n    *param_8 = (int)(byte_ptr + 1);\n    *decode_08004198d_value = (unsigned int)*byte_ptr;\n  }\n  short sVar1 = *(short *)(param_array + 0x26) - 1;\n  *(short *)(param_array + 0x26) = sVar1;\n  if (sVar1 == 0) {\n    *(unsigned int *)(offset + 0xc) &= 0xffffff7f;\n    *(unsigned int *)(offset + 0xc) |= 0x40;\n    return 0;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004198",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "decode_08004198"
        },
        "FUN_08001c3c": {
            "renaming": {
                "FUN_08001c3c": "validate_and_write_to_memory_08001c3c",
                "param_1": "input_value",
                "iVar1": "result",
                "PTR_DAT_08001c80": "PTR_DAT_08001c80",
                "PTR_DAT_08001c7c": "PTR_DAT_08001c7c",
                "byte": "byte",
                "0xf": "15",
                "write_to_memory_08002494": "write_to_memory",
                "PTR_DAT_08001c84": "PTR_DAT_08001c84"
            },
            "code": "int validate_and_write_to_memory_08001c3c(uint input_value)\n{\n    int result = validate_input(input_value);\n    if (result != 0) {\n        return 1;\n    }\n    if (input_value > 15) {\n        return 1;\n    }\n    write_to_memory(0xffffffff, input_value, 0);\n    *PTR_DAT_08001c84 = input_value;\n    return 0;\n}",
            "called": [
                "FUN_08002494",
                "FUN_08002514"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3c",
            "calling": [
                "FUN_08001c88",
                "FUN_08003afa"
            ],
            "imported": false,
            "current_name": "validate_and_write_to_memory_08001c3c"
        },
        "FUN_08001c3a": {
            "renaming": {
                "FUN_08001c3a": "do_nothing_08001c3a"
            },
            "code": "\nvoid do_nothing_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3a",
            "calling": [
                "FUN_08001c88"
            ],
            "imported": false,
            "current_name": "do_nothing_08001c3a"
        },
        "FUN_08000a2c": {
            "renaming": {
                "FUN_08000a2c": "is_valid_input_08000a2c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08000a2c(uint32_t input1, int32_t input2, uint32_t input3, int32_t input4) {\n\tint32_t shifted_input2 = input2 << 1;\n\tint32_t shifted_input4 = input4 << 1;\n\tint32_t shifted_mask = -1 << 0x15;\n\n\tif (((shifted_input2 & shifted_mask) != shifted_mask || (input1 | (input2 << 0xc)) == 0) && ((shifted_input4 & shifted_mask) != shifted_mask || (input3 | (input4 << 0xc)) == 0)) {\n\t\treturn 0;\n\t}\n\treturn 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a2c",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "is_valid_input_08000a2c"
        },
        "FUN_08001366": {
            "renaming": {
                "FUN_08001366": "decode_and_print_08001366",
                "param_1": "buffer_address",
                "param_2": "character",
                "param_3": "length",
                "param_4": "param_4",
                "cVar1": "c"
            },
            "code": "void decode_and_print_08001366(int buffer_address, char character, uint length, undefined4 param_4) {\n  uint max_length = 3;\n  if (max_length < length) {\n    length = max_length;\n  }\n  uint buffer_length = (uint)*(byte *)(buffer_address + 0x17);\n  if ((int)buffer_length <= (int)length) {\n    length = buffer_length - 1 & 0xff;\n  }\n  char c = *(char *)(length + buffer_address + 0x18);\n  decode_and_print_08001366_08001310(buffer_address, character + c | 0x80, 0, c, param_4);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001366",
            "calling": [
                "FUN_08000bcc",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "decode_and_print_08001366"
        },
        "FUN_08005848": {
            "renaming": {
                "FUN_08005848": "decode_character_08005848",
                "param_1": "character_index",
                "param_2": "data_index",
                "param_3": "bit_offset",
                "param_4": "data_array",
                "uVar4": "character_value",
                "puVar3": "data_pointer",
                "iVar1": "bit_value",
                "PTR_DAT_08005888": "character_map",
                "PTR_DAT_0800588c": "bit_mask_array",
                "get_bit_at_offset_080047f4": "get_bit_at_offset",
                "get_data_at_index_08004848": "get_data_at_index",
                "set_param_based_on_value_08004c30": "set_param_based_on_value"
            },
            "code": "void decode_character_08005848(uint character_index, uint data_index, uint bit_offset, undefined *data_array)\n{\n  int bit_value;\n  uint character_value;\n  undefined *data_pointer;\n  if (character_index < 0x3c) {\n    character_value = (uint)(char)PTR_DAT_08005888[character_index];\n    data_pointer = PTR_DAT_08005888;\n  }\n  else {\n    character_value = 0xffffffff;\n    data_pointer = data_array;\n  }\n  if ((character_value != 0xffffffff) && (bit_value = get_bit_at_offset(data_pointer, bit_offset, data_array, data_pointer), bit_value != 0)) {\n    uint data_value = get_data_at_index((character_value << 0x18) >> 0x1c);\n    set_param_based_on_value(data_value, 1 << (character_value & 0xf) & 0xffff, data_index);\n  }\n  return;\n}",
            "called": [
                "FUN_08004848",
                "FUN_080047f4",
                "FUN_08004c30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005848",
            "calling": [
                "FUN_080015b2",
                "FUN_08001310",
                "FUN_080012a2",
                "FUN_0800157c",
                "FUN_08000bcc",
                "FUN_08000cd0",
                "FUN_080012c0",
                "FUN_080012e8",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "decode_character_08005848"
        },
        "FUN_08000ae8": {
            "renaming": {
                "FUN_08000ae8": "print_message_08000ae8",
                "PTR_": "PTR_ (no change)",
                "DAT_": "DAT_ (no change)"
            },
            "code": "void print_message_08000ae8(void)\n{\n  // Trigger a software interrupt to print a message to the console\n  software_interrupt(PRINT_MESSAGE);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ae8",
            "calling": [
                "FUN_08000aec"
            ],
            "imported": false,
            "current_name": "print_message_08000ae8"
        },
        "FUN_08003ed8": {
            "renaming": {
                "FUN_08003ed8": "set_flags_and_clear_bit_08003ed8",
                "param_1": "param_array",
                "puVar1": "param"
            },
            "code": "void set_flags_and_clear_bit_08003ed8(uint **param_array)\n{\n  uint *param = *param_array;\n  *(undefined *)((int)param_array + 0x3d) = 2;\n  if ((param[8] & 0x1111) == 0) {\n    if ((param[8] & 0x444) == 0) {\n      *param = *param & 0xfffffffe;\n    }\n  }\n  set_flags(param_array);\n  *(undefined *)((int)param_array + 0x3d) = 0;\n  *(undefined *)(param_array + 0xf) = 0;\n  return;\n}",
            "called": [
                "FUN_08004b34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ed8",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "set_flags_and_clear_bit_08003ed8"
        },
        "FUN_080061e0": {
            "renaming": {
                "FUN_080061e0": "fill_array_with_value_080061e0",
                "param_1": "array",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end_of_array"
            },
            "code": "void fill_array_with_value_080061e0(char *array, char value, int size) {\n  char *end_of_array;\n  end_of_array = array + size;\n  for (; array != end_of_array; array = array + 1) {\n    *array = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061e0",
            "calling": [
                "FUN_08004a4c",
                "FUN_08006c40",
                "FUN_08006d14",
                "FUN_08006c88"
            ],
            "imported": false,
            "current_name": "fill_array_with_value_080061e0"
        },
        "FUN_08005604": {
            "renaming": {
                "FUN_08005604": "initialize_device_if_index_less_than_5_08005604",
                "uVar1": "index",
                "iVar2": "status",
                "iVar3": "device_address",
                "PTR_DAT_08005644": "device_addresses",
                "PTR_DAT_08005648": "device_functions",
                "initialize_device_0800455a": "initialize_device",
                "*(undefined4 *)(PTR_DAT_0800564c + (uint)*(byte *)(iVar3 + 0x44) * 4)": "get_device_type(device_address)",
                "*(int *)(iVar3 + 100) + (uint)*(ushort *)(iVar3 + 0x6a)": "get_device_speed(device_address)"
            },
            "code": "void initialize_device_if_index_less_than_5_08005604(void)\n{\n  uint index = find_index();\n  int device_address = *(int *)(PTR_DAT_08005644 + index * 4);\n  if ((index < 5) && (device_status(device_address) != -1)) {\n    initialize_device(*(undefined4 *)(PTR_DAT_0800564c + (uint)*(byte *)(iVar3 + 0x44) * 4), get_device_speed(device_address), 1);\n  }\n  return;\n}",
            "called": [
                "FUN_0800455a",
                "FUN_080055bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "FUN_080045fe"
            ],
            "imported": false,
            "current_name": "initialize_device_if_index_less_than_5_08005604"
        },
        "FUN_08005724": {
            "renaming": {
                "FUN_08005724": "return_one_08005724"
            },
            "code": "int return_one_08005724(void) {\n    int result = 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005724",
            "calling": [
                "FUN_08007028"
            ],
            "imported": false,
            "current_name": "return_one_08005724"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "return_zero_08005728"
            },
            "code": "\n\nint return_zero_08005728(void)\n{\n  return 0;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "FUN_08007048"
            ],
            "imported": false,
            "current_name": "return_zero_08005728"
        },
        "FUN_0800135a": {
            "renaming": {
                "FUN_0800135a": "decode_and_print_data_0800135a",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "is_encoded",
                "param_4": "output_buffer"
            },
            "code": "void decode_and_print_data_0800135a(char* data, int data_size, int is_encoded, char* output_buffer){\n  decode_and_print(data, data_size, is_encoded, output_buffer, output_buffer);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800135a",
            "calling": [
                "FUN_08000bcc",
                "FUN_08000cd0",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "decode_and_print_data_0800135a"
        },
        "FUN_08005c96": {
            "renaming": {
                "FUN_08005c96": "get_string_ending_08005c96",
                "param_1": "string_pointer",
                "param_2": "max_length",
                "param_3": "unused_param",
                "param_4": "unused_param2",
                "uVar1": "string_end",
                "uVar2": "result"
            },
            "code": "int get_string_ending_08005c96(int *string_pointer, int max_length, int unused_param, int unused_param2)\n{\n    int result = 0;\n    if (max_length != 0) {\n        int string_end = get_string_ending_08005c96_08000178(max_length);\n        result = (**(code **)(*string_pointer + 4))(string_pointer, max_length, string_end, *(code **)(*string_pointer + 4), unused_param2);\n    }\n    return result;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c96",
            "calling": [
                "FUN_08005da8",
                "FUN_08005cd4",
                "FUN_08000bcc",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "get_string_ending_08005c96"
        },
        "FUN_0800571a": {
            "renaming": {
                "FUN_0800571a": "set_memory_flag_to_0x2000_0800571a",
                "param_1": "buffer",
                "param_2": "buffer_size"
            },
            "code": "void set_memory_flag_to_0x2000_0800571a(int* buffer, int buffer_size) {\n  *(int *)(buffer + 4) = 0x2000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800571a",
            "calling": [
                "FUN_08007004"
            ],
            "imported": false,
            "current_name": "set_memory_flag_to_0x2000_0800571a"
        },
        "FUN_08002efc": {
            "renaming": {
                "FUN_08002efc": "handle_input_08002efc",
                "param_1": "input_array",
                "puVar1": "temp_ptr",
                "DAT_08002db0": "do_nothing_08002db0",
                "DAT_08002c4e": "do_nothing_08002c4e"
            },
            "code": "uint32_t handle_input_08002efc(uint32_t **input_array){\\n\\\n    uint32_t *temp_ptr;\\n\\\n    uint32_t *flag_ptr;\\n\\\n    uint32_t *counter_ptr;\\n\\\n    uint8_t input_char;\\n\\\n    uint16_t input_short;\\n\\\n    \\n\\\n    temp_ptr = input_array[11];\\n\\\n    \\n\\\n    if (*(char *)((int)input_array + 0x3d) == \"!\") {\\n\\\n        input_short = *(uint16_t *)((int)input_array + 0x2a);\\n\\\n        if (input_short == 0) {\\n\\\n            flag_ptr = *input_array;\\n\\\n            if (((temp_ptr == (uint32_t *)0x4) || (temp_ptr == (uint32_t *)0x8)) || (temp_ptr == (uint32_t *)0xffff0000)) {\\n\\\n                flag_ptr[1] = flag_ptr[1] & 0xfffff8ff;\\n\\\n                *flag_ptr = *flag_ptr | 0x200;\\n\\\n                input_array[12] = (uint32_t *)0x0;\\n\\\n                *(char *)((int)input_array + 0x3d) = 0x20;\\n\\\n                if (*(char *)((int)input_array + 0x3e) == \"@\") {\\n\\\n                    *(char *)((int)input_array + 0x3e) = 0;\\n\\\n                    DAT_08002db0();\\n\\\n                }\\n\\\n                else {\\n\\\n                    *(char *)((int)input_array + 0x3e) = 0;\\n\\\n                    DAT_08002c4e();\\n\\\n                }\\n\\\n            }\\n\\\n            else {\\n\\\n                flag_ptr[1] = flag_ptr[1] & 0xfffff8ff;\\n\\\n                input_array[12] = (uint32_t *)0x11;\\n\\\n                *(char *)((int)input_array + 0x3e) = 0;\\n\\\n                *(char *)((int)input_array + 0x3d) = 0x20;\\n\\\n                DAT_08002c4e();\\n\\\n            }\\n\\\n        }\\n\\\n        else {\\n\\\n            counter_ptr = input_array[9];\\n\\\n            input_array[9] = (uint32_t *)((int)counter_ptr + 1);\\n\\\n            input_char = *(uint8_t *)counter_ptr;\\n\\\n            (*input_array)[4] = (uint32_t)input_char;\\n\\\n            input_short--;\\n\\\n            *(uint16_t *)((int)input_array + 0x2a) = input_short;\\n\\\n        }\\n\\\n    }\\n\\\n    return 0;\\n\\\n}",
            "called": [
                "FUN_08002c4e",
                "FUN_08002db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efc",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "handle_input_08002efc"
        },
        "FUN_0800365c": {
            "renaming": {
                "FUN_0800365c": "calculate_and_decrement_0800365c",
                "param_1": "input_num",
                "local_4": "result",
                "DAT_08003684": "MULTIPLIER",
                "PTR_DAT_08003680": "pointer"
            },
            "code": "void calculate_and_decrement_0800365c(int input_num)\n{\n  const uint64_t DAT_08003684 = (uint64_t)DAT_08003684 * (uint64_t)*(uint *)PTR_DAT_08003680 >> 0x29;\n  int result = input_num * DAT_08003684;\n  \n  while (result != 0) {\n    result--;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800365c",
            "calling": [
                "FUN_08003688"
            ],
            "imported": false,
            "current_name": "calculate_and_decrement_0800365c"
        },
        "FUN_080033b8": {
            "renaming": {
                "FUN_080033b8": "process_input_080033b8",
                "param_1": "input_array",
                "iVar1": "array_pointer",
                "uVar2": "bit_mask_1",
                "uVar3": "bit_mask_2",
                "uVar4": "control_bits",
                "*(uint *)(iVar1 + 0x18)": "bit_mask_1",
                "*(uint *)(iVar1 + 0x14)": "bit_mask_2",
                "*(uint *)(iVar1 + 4)": "control_bits",
                "*(char *)((int)param_1 + 0x3e)": "input_type"
            },
            "code": "void process_input_080033b8(int *input_array)\n{\n  int array_pointer = *input_array;\n  uint bit_mask_1 = *(uint *)(array_pointer + 0x18);\n  uint bit_mask_2 = *(uint *)(array_pointer + 0x14);\n  uint control_bits = *(uint *)(array_pointer + 4);\n  char input_type = *(char *)((int)input_array + 0x3e);\n  \n  if (input_type == '\\x10' || input_type == '@') {\n    if ((bit_mask_2 & 0x10001) == 0 || (control_bits & 0x200) == 0) {\n      if ((DAT_08003518 & bit_mask_2) == 0 || (control_bits & 0x200) == 0) {\n        if ((DAT_08003504 & bit_mask_2) != 0 && (control_bits & 0x200) != 0) {\n          process_input_080033b8_080028de(input_array);\n        }\n      }\n      else {\n        set_value_from_array_080028d2(input_array);\n      }\n    }\n    else {\n      set_control_bits_08002848(input_array);\n    }\n    if ((DAT_0800350c & bit_mask_1) == 0) {\n      if ((DAT_0800351c & bit_mask_2) != 0 && (control_bits & 0x400) != 0 && (DAT_08003514 & bit_mask_2) == 0) {\n        process_input_080033b8_08002f9c(input_array);\n        return;\n      }\n      if ((DAT_08003514 & bit_mask_2) != 0 && (control_bits & 0x200) != 0) {\n        process_input_080033b8_0800306c(input_array);\n        return;\n      }\n    }\n    else {\n      if ((DAT_08003510 & bit_mask_2) != 0 && (control_bits & 0x400) != 0 && (DAT_08003514 & bit_mask_2) == 0) {\n        process_input_080033b8_08002db2(input_array);\n        return;\n      }\n      if ((DAT_08003514 & bit_mask_2) != 0 && (control_bits & 0x200) != 0) {\n        handle_input_08002efc(input_array);\n        return;\n      }\n    }\n  }\n  else {\n    if ((DAT_08003504 & bit_mask_2) != 0 && (control_bits & 0x200) != 0) {\n      process_input_080033b8_08002cf2();\n      return;\n    }\n    if ((DAT_08003508 & bit_mask_2) != 0 && (control_bits & 0x200) != 0) {\n      process_input_080033b8_080032b4(input_array);\n      return;\n    }\n    if ((DAT_0800350c & bit_mask_1) == 0) {\n      if ((DAT_0800351c & bit_mask_2) != 0 && (control_bits & 0x400) != 0 && (DAT_08003514 & bit_mask_2) == 0) {\n        process_input_080033b8_08002ca6(input_array);\n        return;\n      }\n      if ((DAT_08003514 & bit_mask_2) != 0 && (control_bits & 0x200) != 0) {\n        increment_and_copy_08002ad8(input_array);\n      }\n    }\n    else {\n      if ((DAT_08003510 & bit_mask_2) != 0 && (control_bits & 0x400) != 0 && (DAT_08003514 & bit_mask_2) == 0) {\n        process_input_080033b8_08002c54(input_array);\n        return;\n      }\n      if ((DAT_08003514 & bit_mask_2) != 0 && (control_bits & 0x200) != 0) {\n        increment_value_at_index_08002ab8(input_array);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002ad8",
                "FUN_08002ab8",
                "FUN_08002db2",
                "FUN_08002c54",
                "FUN_08002f9c",
                "FUN_0800306c",
                "FUN_08002cf2",
                "FUN_08002ca6",
                "FUN_08002efc",
                "FUN_080028d2",
                "FUN_080032b4",
                "FUN_080028de",
                "FUN_08002848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033b8",
            "calling": [],
            "imported": false,
            "current_name": "process_input_080033b8"
        },
        "FUN_080069e4": {
            "renaming": {
                "FUN_080069e4": "process_data_080069e4",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "result",
                "uVar2": "flags",
                "iVar3": "linked_list_ptr"
            },
            "code": "uint process_data_080069e4(undefined4 *output, undefined4 *input) {\n  uint result;\n  ushort flags;\n  int linked_list_ptr;\n  linked_list_ptr = *(int *)PTR_PTR_DAT_08006ab0;\n  if ((linked_list_ptr != 0) && (*(int *)(linked_list_ptr + 0x18) == 0)) {\n    clean_linked_list(linked_list_ptr);\n  }\n  if (input == (undefined4 *)PTR_DAT_08006ab4) {\n    input = *(undefined4 **)(linked_list_ptr + 4);\n  }\n  else if (input == (undefined4 *)PTR_DAT_08006ab8) {\n    input = *(undefined4 **)(linked_list_ptr + 8);\n  }\n  else if (input == (undefined4 *)PTR_DAT_08006abc) {\n    input = *(undefined4 **)(linked_list_ptr + 0xc);\n  }\n  flags = *(ushort *)(input + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output = 9;\n      goto LAB_08006a14;\n    }\n    if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)input[0xd] != input + 0x11) {\n        insert_into_linked_list_080061f0(output);\n      }\n      input[0xd] = 0;\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n    input[1] = 0;\n    *input = input[4];\n  }\n  *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    allocate_memory_and_set_flags_08006e10(output, input);\n  }\n  flags = *(ushort *)(input + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = input[5];\n    }\n    input[2] = result;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] == 0) {\n    flags = *(ushort *)(input + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\n      *(ushort *)(input + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080061f0",
                "FUN_08006e10",
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069e4",
            "calling": [
                "FUN_08006344",
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "process_data_080069e4",
            "code_backup": "\nuint FUN_080069e4(undefined4 *param_1,undefined4 *param_2)\n\n{\n  uint uVar1;\n  ushort uVar2;\n  int iVar3;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08006ab0;\n  if ((iVar3 != 0) && (*(int *)(iVar3 + 0x18) == 0)) {\n    FUNC_08006cb4(iVar3);\n  }\n  if (param_2 == (undefined4 *)PTR_DAT_08006ab4) {\n    param_2 = *(undefined4 **)(iVar3 + 4);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_08006ab8) {\n    param_2 = *(undefined4 **)(iVar3 + 8);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_08006abc) {\n    param_2 = *(undefined4 **)(iVar3 + 0xc);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = (uint)uVar2;\n  if (-1 < (int)(uVar1 << 0x1c)) {\n    if (-1 < (int)(uVar1 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(uVar1 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          insert_into_linked_list_080061f0(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_memory_and_set_flags_08006e10(param_1,param_2);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = uVar2 & 1;\n  if ((uVar2 & 1) == 0) {\n    if (-1 < (int)((uint)uVar2 << 0x1e)) {\n      uVar1 = param_2[5];\n    }\n    param_2[2] = uVar1;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar2 = *(ushort *)(param_2 + 3);\n    uVar1 = (int)(short)uVar2 & 0x80;\n    if (uVar1 != 0) {\nLAB_08006a14:\n      *(ushort *)(param_2 + 3) = uVar2 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "do_nothing_08002580"
            },
            "code": "\nvoid do_nothing_08002580(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "FUN_08002582"
            ],
            "imported": false,
            "current_name": "do_nothing_08002580"
        },
        "FUN_08004b9e": {
            "renaming": {
                "FUN_08004b9e": "calculateAndUpdateSum_08004b9e",
                "calculateSumAndUpdateMemoryAddress_08001cac": "calculateSumAndUpdateMemoryAddress",
                "do_nothing_and_return_08002582": "doNothingAndReturn",
                "do_nothing_08004b9c": "doNothing"
            },
            "code": "void calculateAndUpdateSum_08004b9e(void)\n{\n  calculateSumAndUpdateMemoryAddress();\n  doNothingAndReturn();\n  doNothing();\n  return;\n}",
            "called": [
                "FUN_08004b9c",
                "FUN_08002582",
                "FUN_08001cac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9e",
            "calling": [],
            "imported": false,
            "current_name": "calculateAndUpdateSum_08004b9e"
        },
        "FUN_08004b9c": {
            "renaming": {
                "FUN_08004b9c": "do_nothing_08004b9c"
            },
            "code": "\nvoid do_nothing_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9c",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "do_nothing_08004b9c"
        },
        "FUN_08005730": {
            "renaming": {
                "FUN_08005730": "process_input_wrapper_08005730",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "code": "void process_input_wrapper_08005730(undefined4 input_1, undefined4 input_2, undefined4 input_3, undefined4 input_4)\n{\n  process_input_080053d4(input_2, input_3, input_3, input_4, input_4);\n  return;\n}",
            "called": [
                "FUN_080053d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005730",
            "calling": [
                "FUN_08006f5a"
            ],
            "imported": false,
            "current_name": "process_input_wrapper_08005730"
        },
        "FUN_08002582": {
            "renaming": {
                "FUN_08002582": "do_nothing_and_return_08002582",
                "do_nothing_08002580": "do_nothing"
            },
            "code": "void do_nothing_and_return_08002582(void)\n{\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08002580"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002582",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08002582"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "setFlag_08004884",
                "param_1": "flag",
                "DAT_08004914": "flagPtr",
                "DAT_08004918": "flag0Val",
                "DAT_0800491c": "flag1Val",
                "DAT_08004920": "flag2Val",
                "DAT_08004924": "flag3Val",
                "DAT_08004928": "flag4Val",
                "uVar1": "returnValue"
            },
            "code": "uint32_t setFlag_08004884(uint32_t flag)\n{\n  switch(flag) {\n  case 0:\n    *DAT_08004914 |= 4;\n    return DAT_08004918;\n  case 1:\n    *DAT_08004914 |= 8;\n    return DAT_0800491c;\n  case 2:\n    *DAT_08004914 |= 0x10;\n    return DAT_08004920;\n  case 3:\n    *DAT_08004914 |= 0x20;\n    return DAT_08004924;\n  case 4:\n    *DAT_08004914 |= 0x40;\n    return DAT_08004928;\n  default:\n    return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "FUN_08004bb0",
                "FUN_08004974",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "setFlag_08004884"
        },
        "FUN_08001be8": {
            "renaming": {
                "FUN_08001be8": "copy_data_and_reset_flags_08001be8",
                "iVar1": "index",
                "puVar2": "data_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "PTR_DAT_08001c28": "data_start",
                "PTR_DAT_08001c20": "data",
                "DAT_08001c24": "data_end",
                "DAT_08001c1c": "source_data",
                "set_bit_and_mask_08004d44": "set_data_flags",
                "execute_functions_08006198": "execute_functions",
                "process_data_08005f6c": "process_data"
            },
            "code": "void copy_data_and_reset_flags_08001be8(void)\n{\n  int index;\n  undefined4 *PTR_DAT_08001c20_ptr;\n  code *jump_table;\n  for (index = 0; PTR_DAT_08001c20 + index < DAT_08001c24; index += 4) {\n    *(undefined4 *)(PTR_DAT_08001c20 + index) = *(undefined4 *)(DAT_08001c1c + index);\n  }\n  for (PTR_DAT_08001c20_ptr = (undefined4 *)PTR_DAT_08001c28; PTR_DAT_08001c20_ptr < PTR_DAT_08001c2c; PTR_DAT_08001c20_ptr++) {\n    *PTR_DAT_08001c20_ptr = 0;\n  }\n  set_PTR_DAT_08001c20_flags();\n  execute_functions();\n  jump_table = (code *)0x8001c1a;\n  process_PTR_DAT_08001c20();\n  (*jump_table)();\n  return;\n}\n",
            "called": [
                "FUN_08006198",
                "FUN_08004d44",
                "FUN_08005f6c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001be8",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_and_reset_flags_08001be8"
        },
        "FUN_080061f0": {
            "renaming": {
                "FUN_080061f0": "insert_into_linked_list_080061f0",
                "param_1": "list_head",
                "param_2": "data_to_insert",
                "param_3": "error_code",
                "param_4": "unused_parameter",
                "puVar1": "pointer_to_global_variable",
                "extraout_r1": "extra_out_pp1",
                "ppiVar2": "previous_node_pp",
                "ppiVar3": "next_node_pp",
                "piVar4": "node_data_ptr",
                "ppiVar5": "head_pp",
                "ppiVar6": "current_node_pp",
                "ppiVar7": "current_node_pp"
            },
            "code": "void insert_into_linked_list_080061f0(int *list_head, int data_to_insert, int error_code, int unused_parameter) {\n  if (data_to_insert == 0) {\n    return;\n  }\n  int **current_node_pp = (int **)(data_to_insert - 4);\n  if (*(int *)(data_to_insert - 4) < 0) {\n    current_node_pp = (int **)((int)current_node_pp + *(int *)(data_to_insert - 4));\n  }\n  do_nothing_1();\n  int **head_pp = *(int ***)PTR_DAT_08006284;\n  if (head_pp == (int **)0x0) {\n    current_node_pp[1] = (int *)0x0;\n    *(int ***)PTR_DAT_08006284 = current_node_pp;\n    int **extra_out_pp1 = NULL; // Extra variable to hold the value of the second return value of the function.\n    int **previous_node_pp = (int **)PTR_DAT_08006284;\n  }\n  else if (current_node_pp < head_pp) {\n    int **previous_node_pp = (int **)*current_node_pp;\n    int **next_node_pp = (int **)((int)current_node_pp + (int)previous_node_pp);\n    if (head_pp == next_node_pp) {\n      int *node_data_ptr = *head_pp;\n      head_pp = (int **)head_pp[1];\n      next_node_pp = (int **)((int)node_data_ptr + (int)previous_node_pp);\n      *current_node_pp = (int *)next_node_pp;\n    }\n    current_node_pp[1] = (int *)head_pp;\n    *(int ***)PTR_DAT_08006284 = current_node_pp;\n    int **extra_out_pp1 = previous_node_pp;\n  }\n  else {\n    int **previous_node_pp = head_pp;\n    while (1) {\n      int **next_node_pp = (int **)previous_node_pp[1];\n      if (next_node_pp == (int **)0x0) break;\n      head_pp = next_node_pp;\n    }\n    int **next_node_pp = (int **)*previous_node_pp;\n    if ((int **)((int)previous_node_pp + (int)next_node_pp) == current_node_pp) {\n      next_node_pp = (int **)((int)next_node_pp + (int)*current_node_pp);\n      *previous_node_pp = (int *)next_node_pp;\n      if (next_node_pp == (int **)((int)previous_node_pp + (int)*next_node_pp)) {\n        int *node_data_ptr = *next_node_pp;\n        next_node_pp = (int **)next_node_pp[1];\n        next_node_pp = (int **)((int)node_data_ptr + (int)*current_node_pp);\n        *previous_node_pp = (int *)next_node_pp;\n        previous_node_pp[1] = (int *)next_node_pp;\n      }\n    }\n    else if (current_node_pp < (int **)((int)previous_node_pp + (int)next_node_pp)) {\n      *list_head = error_code;\n    }\n    else {\n      next_node_pp = (int **)((int)current_node_pp + (int)*current_node_pp);\n      if (next_node_pp == (int **)previous_node_pp[1]) {\n        int *node_data_ptr = *next_node_pp;\n        next_node_pp = (int **)next_node_pp[1];\n        next_node_pp = (int **)((int)node_data_ptr + (int)*current_node_pp);\n        *current_node_pp = (int *)next_node_pp;\n      }\n      current_node_pp[1] = (int *)next_node_pp;\n      previous_node_pp[1] = (int *)current_node_pp;\n    }\n    int **extra_out_pp1 = previous_node_pp;\n  }\n  do_nothing_2(error_code,extra_out_pp1,current_node_pp,unused_parameter);\n  return;\n}",
            "called": [
                "FUN_08006eac",
                "FUN_08006eae"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061f0",
            "calling": [
                "FUN_080069e4",
                "FUN_08006ac0"
            ],
            "imported": false,
            "current_name": "insert_into_linked_list_080061f0"
        },
        "FUN_08002348": {
            "renaming": {
                "FUN_08002348": "checkAndUpdateFlag_08002348",
                "param_1": "flag",
                "iVar1": "result"
            },
            "code": "int checkAndUpdateFlag_08002348(int flag)\n{\n  int result;\n  if (*(char *)(flag + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(flag + 0x24) = 1;\n  result = checkAndUpdateFlag_08002348_080020f0();\n  if (result == 0) {\n    *(uint *)(flag + 0x28) = *(uint *)(flag + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(flag + 0x24) = 0;\n  return result;\n}",
            "called": [
                "FUN_080020f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002348",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "checkAndUpdateFlag_08002348"
        },
        "FUN_080060d4": {
            "renaming": {
                "FUN_080060d4": "process_response_080060d4",
                "param_1": "request",
                "iVar1": "index",
                "PTR_DAT_08006100": "PTR_DAT",
                "process_and_wait_for_response_08007090": "process_and_wait_for_response",
                "count_bits_set_08005f8c": "count_bits_set",
                "PTR_DAT_08006100 + iVar1 * 0x14 + 0xc": "PTR_DAT[index]"
            },
            "code": "void process_response_080060d4(int request) {\n  int bit_count, index;\n  int* ptr = (int*)(request + 8);\n  if (*ptr != 0) {\n    (**(void (**)(void))(request + 0xc))();\n    return;\n  }\n  process_and_wait_for_response();\n  bit_count = count_bits_set();\n  index = bit_count * 0x14 + 0xc;\n  if (*(int*)(PTR_DAT_08006100_08006100 + index) != 0) {\n    process_response_080060d4(request);\n  }\n  return;\n}",
            "called": [
                "FUN_08007090"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060d4",
            "calling": [
                "FUN_080060e4"
            ],
            "imported": false,
            "current_name": "process_response_080060d4"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "process_data_08005a68",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "flags",
                "bVar1": "bits_set",
                "iVar2": "num_bits_set",
                "pbVar3": "data_ptr",
                "UNRECOVERED_JUMPTABLE": "call_function_pointer",
                "uRam08005b14": "input_validation",
                "validate_and_store_input_08005510": "validate_and_store_input",
                "FUNC_08004f4c": "initialize_data_ptr",
                "iRam08005b1c": "output_buffer",
                "uRam08005b20": "input_buffer",
                "uRam08005b18": "function_pointer",
                "uRam0000012d": "output_type"
            },
            "code": "void process_data_08005a68(int data, int data_size, byte flags) {\n  int bit_mask;\n  int num_bits_set = 0;\n  int output_format = 0;\n  int output_mode = 0;\n  int output_size = 0;\n  int output_type = 0;\n  if (flags & 7 == 4) {\n    num_bits_set = 7;\n  }\n  else if (flags & 7 == 6) {\n    num_bits_set = 8;\n  }\n  else if (flags & 7 == 2) {\n    num_bits_set = 6;\n  }\n  if ((flags & 0x30) == 0x30) {\n    output_format = 0x600;\n    num_bits_set++;\n  }\n  else if (!(flags & 0x20)) {\n    output_format = 0;\n  }\n  else {\n    output_format = 0x400;\n    num_bits_set++;\n  }\n  if (!(flags & 8)) {\n    output_mode = 0;\n  }\n  else {\n    output_mode = 0x2000;\n  }\n  if (num_bits_set == 8) {\n    output_size = 0;\n  }\n  else if (num_bits_set == 9) {\n    output_size = 0x1000;\n  }\n  if (num_bits_set != 0) {\n    initialize_data_ptr(data + 0xd4);\n    validate_and_store_input(data + 0xd4, data_size);\n    return;\n  }\n  process_data_08005a68_and_call_function(uRam08005b20, 299, iRam08005b1c, uRam08005b18);\n  byte *data_ptr = *(byte **)(extraout_r1 + unaff_r6);\n  *(undefined *)(iRam08005b1c + 0x1e) = unaff_r4;\n  *(undefined *)(*data_ptr + 0x1e) = 0;\n  if (extraout_r1 < 0x3c) {\n    uRam0000012d = PTR_DAT_08005b38[extraout_r1];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n  call_function_pointer(0x8005b12);\n  return;\n}\n",
            "called": [
                "FUN_08005510",
                "FUN_08004f4c",
                "FUN_0800611c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "process_data_08005a68"
        },
        "FUN_08001814": {
            "renaming": {
                "FUN_08001814": "parse_input_string_08001814",
                "param_1": "output_array",
                "param_2": "string1_start",
                "param_3": "string1_end",
                "param_4": "string2_start",
                "param_5": "string2_end",
                "param_6": "string3_start",
                "param_7": "string3_end",
                "param_8": "is_special_case",
                "param_9": "output_array_length",
                "iVar1": "is_string1_valid",
                "uVar2": "shift_and_concatenation_result_upper",
                "uVar3": "is_output_array_length_0_char",
                "bVar4": "is_not_special_case",
                "uVar5": "shift_and_concatenation_result",
                "uVar6": "func_080004f8_result",
                "uVar7": "func_08000190_result1"
            },
            "code": "void parse_input_string_08001814(int* output_array, int string1_start, int string1_end, int string2_start, int string2_end, int string3_start, int string3_end, int is_special_case, int output_array_length) {\n  int is_string1_valid = is_end_of_string(string1_start, string1_end, 0, 0);\n  int is_string2_valid = is_end_of_string(string2_start, string2_end, 0, 0);\n  int is_string3_valid = is_end_of_string(string3_start, string3_end, 0, 0);\n  if (!is_string1_valid && !is_string2_valid && !is_string3_valid) {\n    output_array[13] = output_array_length;\n    int is_not_special_case = output_array_length != 1;\n    int is_output_array_length_0 = 0;\n    if (is_not_special_case) {\n      is_output_array_length_0 = 1;\n    }\n    char is_output_array_length_0_char = is_output_array_length_0;\n    if (!is_not_special_case) {\n      is_output_array_length_0_char = 1;\n    }\n    *(char*)((int)output_array + 0x71) = is_output_array_length_0_char;\n    output_array[0] = string1_start;\n    output_array[1] = string1_end;\n    output_array[2] = string2_start;\n    output_array[3] = string2_end;\n    output_array[4] = string3_start;\n    output_array[5] = string3_end;\n    unsigned long long shift_and_concatenation_result = shift_and_concatenate(output_array[22]);\n    shift_and_concatenation_result = FUNC_0800074c((int)shift_and_concatenation_result, (int)((unsigned long long)shift_and_concatenation_result >> 0x20), 0, DAT_080018f4);\n    int shift_and_concatenation_result_upper = (int)((unsigned long long)shift_and_concatenation_result >> 0x20);\n    output_array[6] = string1_start;\n    output_array[7] = string1_end;\n    unsigned long long func_080004f8_result = FUNC_080004f8(string2_start, string2_end, (int)shift_and_concatenation_result, shift_and_concatenation_result_upper);\n    *(unsigned long long*)(output_array + 8) = func_080004f8_result;\n    shift_and_concatenation_result = FUNC_0800074c(string3_start, string3_end, (int)shift_and_concatenation_result, shift_and_concatenation_result_upper);\n    *(unsigned long long*)(output_array + 10) = shift_and_concatenation_result;\n    if (output_array[12] == 1) {\n      unsigned long long func_08000190_result1 = FUNC_08000190(0, 0, string1_start, string1_end);\n      *(unsigned long long*)(output_array + 6) = func_08000190_result1;\n      unsigned long long func_08000190_result2 = FUNC_08000190(0, 0, (int)func_080004f8_result, (int)((unsigned long long)func_080004f8_result >> 0x20));\n      *(unsigned long long*)(output_array + 8) = func_08000190_result2;\n      shift_and_concatenation_result = FUNC_08000190(0, 0, (int)shift_and_concatenation_result, (int)((unsigned long long)shift_and_concatenation_result >> 0x20));\n      *(unsigned long long*)(output_array + 10) = shift_and_concatenation_result;\n    }\n  }\n  return;\n}\n",
            "called": [
                "FUN_0800074c",
                "FUN_08000190",
                "FUN_0800040c",
                "FUN_080004f8",
                "FUN_080009dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001814",
            "calling": [
                "FUN_080018f8",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "parse_input_string_08001814"
        },
        "FUN_08000aec": {
            "renaming": {
                "FUN_08000aec": "print_error_if_not_initialized_08000aec",
                "param_1": "error_code",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "result"
            },
            "code": "int print_error_if_not_initialized_08000aec(int error_code, int param_2, int param_3, int param_4)\n{\n  int result = 0;\n  if (*(int *)PTR_DAT_08000b04 != 0) {\n    return result;\n  }\n  result = print_message_08000ae8(1, error_code, 0, 0, param_4);\n  return result;\n}",
            "called": [
                "FUN_08000ae8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "print_error_if_not_initialized_08000aec"
        },
        "FUN_0800572c": {
            "renaming": {
                "FUN_0800572c": "return_zero_0800572c",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int return_zero_0800572c(void)\n{\n    int result = 0;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800572c",
            "calling": [
                "FUN_0800706c"
            ],
            "imported": false,
            "current_name": "return_zero_0800572c"
        },
        "FUN_08004e12": {
            "renaming": {
                "FUN_08004e12": "execute_subtracted_input_function_08004e12",
                "iVar1": "subtracted_input",
                "subtract_four_from_input_08004df4": "subtract_four_from_input",
                "code": "code_pointer",
                "*(code**)(iVar1 + 0x48)": "function_pointer",
                "(code *)0x0": "NULL"
            },
            "code": "void execute_subtracted_input_function_08004e12(void)\n{\n  int subtracted_input = subtract_four_from_input();\n  code* function_pointer = *(code**)(subtracted_input + 0x48);\n  if (function_pointer != NULL)\n  {\n    (*function_pointer)();\n  }\n  return;\n}",
            "called": [
                "FUN_08004df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e12",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "execute_subtracted_input_function_08004e12"
        },
        "FUN_08000a58": {
            "renaming": {
                "FUN_08000a58": "convert_uint_to_int32_with_shift_and_sign_08000a58",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "abs_shifted_input_2",
                "iVar2": "shifted_input_2",
                "uVar3": "shifted_abs_shifted_input_2",
                "uVar4": "shifted_input_1",
                "uVar5": "output",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint convert_uint_to_int32_with_shift_and_sign_08000a58(uint input_1, uint input_2)\n{\n  uint output;\n  int shifted_input_2 = input_2 * 2 + 0x200000;\n  if (input_2 * 2 < 0xffe00000) {\n    if (-1 < shifted_input_2) {\n      return 0;\n    }\n    uint abs_shifted_input_2 = -shifted_input_2 >> 0x15;\n    uint shifted_abs_shifted_input_2 = abs_shifted_input_2 - 0x3e1;\n    if (abs_shifted_input_2 < 0xfffffc20 && shifted_abs_shifted_input_2 != 0) {\n      uint shifted_input_1 = input_1 >> 0x15;\n      output = (input_2 << 0xb | 0x80000000 | shifted_input_1) >> (shifted_abs_shifted_input_2 & 0xff);\n      if ((input_2 & 0x80000000) != 0) {\n        output = -output;\n      }\n      return output;\n    }\n  }\n  else if ((input_1 | input_2 << 0xc) != 0) {\n    return 0;\n  }\n  uint sign_bit = input_2 & 0x80000000;\n  if (sign_bit == 0) {\n    sign_bit = 0x7fffffff;\n  }\n  return sign_bit;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a58",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "convert_uint_to_int32_with_shift_and_sign_08000a58"
        },
        "FUN_08001b48": {
            "renaming": {
                "FUN_08001b48": "initialize_device_08001b48",
                "local_30": "multiplier",
                "local_20": "constant1",
                "local_1c": "constant2",
                "local_14": "constant3",
                "local_10": "constant4",
                "local_c": "constant5",
                "iVar1": "result",
                "PTR_s__home_bo__arduino15_packages_STM_08001be4": "infinite_loop_message",
                "local_44": "parameter1",
                "local_40": "parameter2",
                "local_3c": "parameter3",
                "local_38": "parameter4",
                "local_34": "parameter5",
                "validate_and_write_08003ad4": "validate_and_write_parameters",
                "local_54": "value1",
                "local_4c": "value2",
                "set_values_08003c90": "set_values",
                "get_value_from_pointer_08003c44": "get_value_from_pointer",
                "validate_parameter_08002514": "validate_parameter",
                "set_flag_08002560": "set_flag",
                "write_to_memory_08002494": "write_to_memory"
            },
            "code": "void initialize_device_08001b48(void)\n{\n  int result;\n  uint32_t multiplier = 2;\n  uint32_t constant1 = 1;\n  uint32_t constant2 = 16;\n  uint32_t constant3 = 2;\n  uint32_t constant4 = 0;\n  uint32_t constant5 = 9447848;\n  result = check_device(multiplier);\n  if (result != 0) {\n    trigger_infinite_loop(\"Error: Device check failed\", 0x88);\n  }\n  uint32_t parameter1 = 15;\n  uint32_t parameter2 = 2;\n  uint32_t parameter3 = 0;\n  uint32_t parameter4 = 1024;\n  uint32_t parameter5 = 0;\n  result = validate_and_write_parameters(&parameter1, &parameter2, &parameter3, &parameter4, &parameter5);\n  if (result != 0) {\n    trigger_infinite_loop(\"Error: Parameter validation failed\", 0x95);\n  }\n  uint32_t value1 = 2;\n  uint32_t value2 = 32768;\n  result = set_values(&value1, &value2);\n  if (result != 0) {\n    trigger_infinite_loop(\"Error: Setting values failed\", 0x9c);\n  }\n  uint32_t value_from_pointer = get_value_from_pointer();\n  uint32_t calculated_value = (value_from_pointer * 9447848) >> 38;\n  validate_parameter(calculated_value);\n  set_flag(4);\n  write_to_memory(0xffffffff, 0);\n}\n",
            "called": [
                "FUN_08002560",
                "FUN_08003c90",
                "FUN_08003688",
                "FUN_08002494",
                "FUN_08004d40",
                "FUN_08003ad4",
                "FUN_08003c44",
                "FUN_08002514"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "FUN_08004c52"
            ],
            "imported": false,
            "current_name": "initialize_device_08001b48"
        },
        "FUN_08004092": {
            "renaming": {
                "FUN_08004092": "set_bit_08004092",
                "param_1": "bit_array",
                "param_2": "bit_position",
                "param_3": "bit_value",
                "uint": "uint32_t",
                "*(uint *)(param_1 + 0x20)": "*bit_array",
                "1 << (param_2 & 0xff)": "mask",
                "|": "|",
                "&": "&",
                "~": "~",
                "<<": "<<"
            },
            "code": "void set_bit_08004092(uint32_t *bit_array, uint8_t bit_position, uint8_t bit_value) {\n    uint32_t mask = 1 << (bit_position & 0xff);\n    *bit_array = (*bit_array & ~mask) | (bit_value << (bit_position & 0xff));\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004092",
            "calling": [
                "FUN_080040b0"
            ],
            "imported": false,
            "current_name": "set_bit_08004092"
        },
        "FUN_08005cd4": {
            "renaming": {
                "FUN_08005cd4": "calculate_total_ending_string_length_and_execute_function_08005cd4",
                "param_1": "function_param",
                "iVar1": "string_ending_length",
                "iVar2": "function_result",
                "get_string_ending_08005c96": "get_string_ending_length",
                "execute_function_08005cc0": "execute_function"
            },
            "code": "int calculate_total_ending_string_length_and_execute_function_08005cd4(undefined4 function_param){\n                     int string_ending_length = get_string_ending_length();\n                     int function_result = execute_function(function_param);\n                     return function_result + string_ending_length;\n                   }",
            "called": [
                "FUN_08005c96",
                "FUN_08005cc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cd4",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "calculate_total_ending_string_length_and_execute_function_08005cd4"
        },
        "FUN_08005bb0": {
            "renaming": {
                "FUN_08005bb0": "initialize_struct_if_param_is_one_08005bb0",
                "param_1": "is_param_one",
                "param_2": "param_two",
                "param_3": "some_param",
                "param_4": "another_param",
                "PTR_DAT_08005bd0": "struct_ptr",
                "DAT_08005bcc": "struct_dat"
            },
            "code": "void initialize_struct_if_param_is_one_08005bb0(int param_1, int param_2, undefined4 param_3, undefined4 param_4) {\n  if (param_1 == 1) {\n    if (param_2 == 0xffff) {\n      initialize_struct_with_values_08005b54(PTR_DAT_08005bd0, DAT_08005bcc, param_3, 0xffff, param_4);\n    }\n  }\n}",
            "called": [
                "FUN_08005b54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb0",
            "calling": [],
            "imported": false,
            "current_name": "initialize_struct_if_param_is_one_08005bb0"
        },
        "FUN_080014ba": {
            "renaming": {
                "FUN_080014ba": "decode_and_print_080014ba",
                "param_1": "data_address",
                "param_2": "is_zero",
                "param_3": "char_value",
                "param_4": "param_4",
                "param_5": "unused_param_5",
                "param_6": "unused_param_6",
                "param_7": "unused_param_7",
                "param_8": "unused_param_8",
                "param_9": "unused_param_9",
                "param_10": "unused_param_10",
                "param_11": "unused_param_11",
                "param_12": "unused_param_12",
                "param_13": "unused_param_13"
            },
            "code": "void decode_and_print_080014ba(int data_address, int is_zero, char char_value, int param_4) {\n    char* data_ptr = (char*)data_address;\n    char* char_ptr = data_ptr + 1;\n    *data_ptr = (char)is_zero;\n    *char_ptr = char_value;\n    *(data_ptr + 2) = 0;\n    *(data_ptr + 3) = 0;\n    *(data_ptr + 4) = 0;\n    *(data_ptr + 5) = 0;\n    *(data_ptr + 6) = 0;\n    *(data_ptr + 7) = 0;\n    *(data_ptr + 8) = 0;\n    *(data_ptr + 9) = 0;\n    *(data_ptr + 10) = 0;\n    *(data_ptr + 11) = 0;\n    *(data_ptr + 12) = 0;\n    *(data_ptr + 13) = 0;\n    *(data_ptr + 14) = 0;\n    *(data_ptr + 15) = 0;\n    if (is_zero == 0) {\n        *(data_ptr + 16) = 0;\n    }\n    else {\n        *(data_ptr + 16) = 16;\n    }\n    decode_and_print_080014ba_data_080013a4(data_address, 16, 1, 0, char_value);\n    return;\n}",
            "called": [
                "FUN_080013a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ba",
            "calling": [
                "FUN_08001510"
            ],
            "imported": false,
            "current_name": "decode_and_print_080014ba"
        },
        "FUN_08003c90": {
            "renaming": {
                "FUN_08003c90": "set_values_08003c90",
                "param_1": "values",
                "puVar1": "data_ptr",
                "iVar2": "counter_1",
                "iVar3": "counter_2",
                "uVar4": "temp_value",
                "bVar5": "is_flag_set"
            },
            "code": "uint32_t set_values_08003c90(uint32_t *values)\n{\n  uint32_t *data_ptr;\n  int32_t counter_1;\n  int32_t counter_2;\n  uint32_t temp_value;\n  bool is_flag_set;\n  \n  if ((*values & 1) != 0) {\n    is_flag_set = (*(uint32_t *)(PTR_DAT_08003d98 + 0x1c) & 0x10000000) == 0;\n    if (is_flag_set) {\n      *(uint32_t *)(PTR_DAT_08003d98 + 0x1c) = *(uint32_t *)(PTR_DAT_08003d98 + 0x1c) | 0x10000000;\n    }\n    if ((*PTR_DAT_08003d9c & 0x100) == 0) {\n      *PTR_DAT_08003d9c = *PTR_DAT_08003d9c | 0x100;\n      counter_1 = get_pointer_value_08001cc4();\n      while ((*PTR_DAT_08003d9c & 0x100) == 0) {\n        counter_2 = get_pointer_value_08001cc4();\n        if (100 < (uint32_t)(counter_2 - counter_1)) {\n          return 3;\n        }\n      }\n    }\n    data_ptr = PTR_DAT_08003da0;\n    counter_1 = PTR_DAT_08003d98;\n    temp_value = *(uint32_t *)(PTR_DAT_08003d98 + 0x20) & 0x300;\n    if ((temp_value != 0) && (temp_value != (values[1] & 0x300))) {\n      temp_value = *(uint32_t *)(PTR_DAT_08003d98 + 0x20);\n      *data_ptr = 1;\n      *data_ptr = 0;\n      *(uint32_t *)(counter_1 + 0x20) = temp_value & 0xfffffcff;\n      if ((temp_value & 1) != 0) {\n        counter_1 = get_pointer_value_08001cc4();\n        while ((*(uint32_t *)(PTR_DAT_08003d98 + 0x20) & 2) == 0) {\n          counter_2 = get_pointer_value_08001cc4();\n          if (5000 < (uint32_t)(counter_2 - counter_1)) {\n            return 3;\n          }\n        }\n      }\n    }\n    counter_1 = PTR_DAT_08003d98;\n    *(uint32_t *)(PTR_DAT_08003d98 + 0x20) = *(uint32_t *)(PTR_DAT_08003d98 + 0x20) & 0xfffffcff | values[1];\n    if (is_flag_set) {\n      *(uint32_t *)(counter_1 + 0x1c) = *(uint32_t *)(counter_1 + 0x1c) & 0xefffffff;\n    }\n  }\n  if ((*values & 2) != 0) {\n    *(uint32_t *)(PTR_DAT_08003d98 + 4) = *(uint32_t *)(PTR_DAT_08003d98 + 4) & 0xffff3fff | values[2];\n  }\n  if ((*values & 0x10) != 0) {\n    *(uint32_t *)(PTR_DAT_08003d98 + 4) = *(uint32_t *)(PTR_DAT_08003d98 + 4) & 0xffbfffff | values[3];\n  }\n  return 0;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c90",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "set_values_08003c90"
        },
        "FUN_08002514": {
            "renaming": {
                "FUN_08002514": "validate_parameter_08002514",
                "param_1": "parameter",
                "puVar1": "data_pointer",
                "DAT_08002538": "data_pointer",
                "DAT_0800253c": "data_section"
            },
            "code": "int validate_parameter_08002514(unsigned int parameter) {\n  unsigned int *DAT_08002538;\n  DAT_08002538 = DAT_08002538;\n  if (parameter - 1U < 0x1000000) {\n    DAT_08002538[1] = parameter - 1U;\n    *(undefined *)(DAT_0800253c + 0x23) = 0xf0;\n    DAT_08002538[2] = 0;\n    *DAT_08002538 = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002514",
            "calling": [
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "imported": false,
            "current_name": "validate_parameter_08002514"
        },
        "FUN_08005c1c": {
            "renaming": {
                "FUN_08005c1c": "set_values_for_param_08005c1c",
                "param_1": "param_array",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3",
                "param_5": "value_4"
            },
            "code": "void set_values_for_param_08005c1c(undefined4 *param_array, undefined param_2, undefined param_3, undefined param_4, undefined param_5) { \n\t param_array[0] = PTR_PTR_LAB_08005be2_1_08005c34; \n\t param_array[1] = param_2; \n\t param_array[2] = param_3; \n\t param_array[3] = param_4; \n\t param_array[4] = param_5; \n\t return; \n }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c1c",
            "calling": [
                "FUN_08005c38"
            ],
            "imported": false,
            "current_name": "set_values_for_param_08005c1c"
        },
        "FUN_08006dc8": {
            "renaming": {
                "FUN_08006dc8": "set_memory_flag_08007004_and_check_08006dc8",
                "param_1": "address",
                "param_2": "size",
                "param_3": "flag",
                "param_4": "result",
                "iVar1": "set_result",
                "uVar2": "return_value",
                "auStack_4c": "stack_array",
                "local_48": "local_variable"
            },
            "code": "int set_memory_flag_08007004_and_check_08006dc8(int address, int size, int* flag, uint* result) {\\n\\\n        int set_result = set_memory_flag_08007004(address, size, flag);\\n\\\n        if (set_result < 0 || (*(short *)(size + 0xe) < 0)) {\\n\\\n            *result = 0;\\n\\\n            if ((int)((uint)*(ushort *)(size + 0xc) << 0x18) < 0) {\\n\\\n                *flag = 0x40;\\n\\\n                goto LAB_08006e08;\\n\\\n            }\\n\\\n        }\\n\\\n        else {\\n\\\n            *result = (uint)((*flag & 0xf000) == 0x2000);\\n\\\n        }\\n\\\n        *flag = 0x400;\\n\\\n        LAB_08006e08:\\n\\\n        return 0;\\n\\\n    }",
            "called": [
                "FUN_08007004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dc8",
            "calling": [
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "set_memory_flag_08007004_and_check_08006dc8"
        },
        "FUN_0800412c": {
            "renaming": {
                "FUN_0800412c": "set_bit_and_check_0800412c",
                "param_1": "bit_array",
                "param_2": "bit_position",
                "puVar1": "bit_array_ptr"
            },
            "code": "int set_bit_and_check_0800412c(uint **bit_array, uint bit_position) {\n  uint *bit_array_ptr = *bit_array;\n  set_bit(bit_array_ptr, bit_position);\n  if (((bit_array_ptr[8] & 0x1111) == 0) && ((bit_array_ptr[8] & 0x444) == 0)) {\n    bit_array_ptr[17] &= 0xffff7fff;\n  }\n  if (((bit_array_ptr[8] & 0x1111) == 0) && ((bit_array_ptr[8] & 0x444) == 0)) {\n    *bit_array_ptr &= 0xfffffffe;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800412c",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "set_bit_and_check_0800412c"
        },
        "FUN_08007090": {
            "renaming": {
                "FUN_08007090": "process_and_wait_for_response_08007090",
                "UNRECOVERED_JUMPTABLE": "jump_table_ptr"
            },
            "code": "void process_and_wait_for_response_08007090(void)\n{\n  code *jump_table_ptr;\n  jump_table_ptr = process_and_wait_for_response_08007090;\n  int *ptrs[] = {PTR_DAT_0800712c, PTR_DAT_08007130, PTR_DAT_08007134, PTR_DAT_08007138, PTR_DAT_0800713c, PTR_DAT_08007140, PTR_DAT_08007144, PTR_DAT_08007148, PTR_DAT_0800714c, PTR_DAT_08007150, PTR_DAT_08007154, PTR_DAT_08007158};\n  for(int i=0; i<12; i++)\n  {\n    if(-1 < *(int *)ptrs[i] << 0x1f)\n    {\n      *(undefined4 *)ptrs[i] = 1;\n    }\n  }\n  (*jump_table_ptr)();\n  return;\n}",
            "called": [
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007090",
            "calling": [
                "FUN_080060d4"
            ],
            "imported": false,
            "current_name": "process_and_wait_for_response_08007090"
        },
        "FUN_0800492c": {
            "renaming": {
                "FUN_0800492c": "find_matching_char_index_0800492c",
                "param_1": "search_char",
                "param_2": "search_array",
                "param_3": "array_length",
                "param_4": "start_index",
                "iVar1": "index",
                "uVar2": "shifted_index"
            },
            "code": "uint find_matching_char_index_0800492c(undefined4 search_char, undefined4 *search_array, undefined4 array_length, undefined4 start_index, undefined4 end_index) {\n  int index = find_matching_char_08004cce(search_char, search_array, array_length, start_index, end_index);\n  uint shifted_index = (uint)(index << 12) >> 27;\n  if (shifted_index > 16) {\n    shifted_index = 0;\n  }\n  return shifted_index;\n}",
            "called": [
                "FUN_08004cce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800492c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "find_matching_char_index_0800492c"
        },
        "FUN_0800480a": {
            "renaming": {
                "FUN_0800480a": "set_bit_in_array_0800480a",
                "param_1": "bit_index",
                "param_2": "array",
                "uVar1": "array_index",
                "*(uint *)(param_2 + uVar1 * 4)": "array_ptr",
                "*(uint *)(param_2 + uVar1 * 4) | 1 << (param_1 & 0xf)": "set_bit"
            },
            "code": "void set_bit_in_array_0800480a(uint bit_index, int* array){\n  uint array_index = (bit_index << 0x18) >> 0x1c;\n  uint* array_ptr = (uint*)(array + array_index * 4);\n  *array_ptr |= 1 << (bit_index & 0xf);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800480a",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_0800480a"
        },
        "FUN_080015f8": {
            "renaming": {
                "FUN_080015f8": "process_bits_080015f8",
                "param_1": "input_parameter_1",
                "param_2": "input_parameter_2",
                "param_3": "input_parameter_3",
                "param_4": "input_parameter_4",
                "uVar1": "decoded_bits",
                "uVar2": "concatenated_bits",
                "uVar3": "processed_bits",
                "DAT_0800169c": "concatenated_bits_1",
                "DAT_08001698": "concatenated_bits_2",
                "DAT_080016a0": "function_constant_1",
                "DAT_080016a4": "function_constant_2",
                "DAT_080016a8": "function_constant_3",
                "DAT_080016ac": "function_constant_4",
                "DAT_080016b0": "function_constant_5",
                "decode_and_check_bits_080015b2": "decode_and_check_bits",
                "shift_and_concatenate_0800040c": "shift_and_concatenate",
                "FUNC_08000194": "function_1",
                "FUNC_080004f8": "function_2",
                "FUNC_0800074c": "function_3",
                "DAT_0800168c": "constant_1",
                "DAT_08001688": "constant_2",
                "DAT_08001694": "constant_3",
                "DAT_08001690": "constant_4"
            },
            "code": "uint decode_and_check_bits = process_bits_080015f8();\nulonglong concatenated_bits = CONCAT44(DAT_0800169c, DAT_08001698);\nif ((decode_and_check_bits & 0x10000) == 0) {\n    uint shifted_bits = decode_and_check_bits >> 0x12;\n    ulonglong concatenated_shifted_bits = shift_and_concatenate_0800040c(shifted_bits & 0x1fff);\n    if ((shifted_bits & 0x2000) != 0) {\n        ulonglong inverted_bits = shift_and_concatenate_0800040c(~shifted_bits & 0x1fff);\n        concatenated_shifted_bits = FUNC_08000194((int)inverted_bits, (int)((ulonglong)inverted_bits >> 0x20), 0, DAT_080016a0, param_4);\n        concatenated_shifted_bits = concatenated_shifted_bits & 0xffffffff | (ulonglong)((int)(concatenated_shifted_bits >> 0x20) + 0x80000000) << 0x20;\n    }\n    ulonglong processed_bits = FUNC_080004f8((int)concatenated_shifted_bits, (int)(concatenated_shifted_bits >> 0x20), 0, DAT_080016a4);\n    if (param_2 == 1) {\n        processed_bits = FUNC_080004f8((int)processed_bits, (int)((ulonglong)processed_bits >> 0x20), 0, DAT_080016a8);\n        processed_bits = FUNC_0800074c((int)processed_bits, (int)((ulonglong)processed_bits >> 0x20), 0, DAT_080016ac);\n        processed_bits = FUNC_08000194((int)processed_bits, (int)((ulonglong)processed_bits >> 0x20), 0, DAT_080016b0);\n        return processed_bits;\n    }\n}\nelse {\n    uint masked_bits = decode_and_check_bits & 7;\n    if (masked_bits == 2) {\n        return CONCAT44(DAT_0800168c, DAT_08001688);\n    }\n    if (masked_bits == 4) {\n        return CONCAT44(DAT_08001694, DAT_08001690);\n    }\n    if (masked_bits != 1) {\n        return 0;\n    }\n}\nreturn concatenated_bits;",
            "called": [
                "FUN_0800074c",
                "FUN_080015b2",
                "FUN_0800040c",
                "FUN_080004f8",
                "FUN_08000194"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015f8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "process_bits_080015f8"
        },
        "FUN_08005c38": {
            "renaming": {
                "FUN_08005c38": "set_default_values_if_needed_08005c38",
                "param_1": "input1",
                "param_2": "input2",
                "PTR_DAT_08005c60": "PTR_DATA"
            },
            "code": "void set_default_values_if_needed_08005c38(int input1, int input2)\n{\n  if ((input1 == 1) && (input2 == 0xffff)) {\n    set_values_for_param(PTR_DAT_08005c60, 0, 0, 0, 0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08005c1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c38",
            "calling": [],
            "imported": false,
            "current_name": "set_default_values_if_needed_08005c38"
        },
        "FUN_08005f8c": {
            "renaming": {
                "FUN_08005f8c": "count_bits_set_08005f8c",
                "param_1": "num",
                "cVar1": "bit_count"
            },
            "code": "char count_bits_set_08005f8c(uint num) {\n  char bit_count = 0;\n  while (num != 1) {\n    bit_count++;\n    num = num >> 1;\n  }\n  return bit_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f8c",
            "calling": [
                "FUN_080060e4"
            ],
            "imported": false,
            "current_name": "count_bits_set_08005f8c"
        },
        "FUN_08006f5a": {
            "renaming": {
                "FUN_08006f5a": "process_input_08006f5a",
                "param_1": "output",
                "param_2": "input_address",
                "param_3": "unused1",
                "param_4": "unused2",
                "sVar1": "input_value",
                "puVar2": "unused_pointer",
                "iVar3": "result",
                "unaff_r4": "unused3",
                "unaff_r5": "unused4",
                "in_lr": "unused5"
            },
            "code": "void process_input_08006f5a(int *output, int input_address, int unused1, int unused2) {\n  short input_value = *(short *)(input_address + 0xe);\n  if ((uint)*(ushort *)(input_address + 0xc) << 0x17 < 0) {\n    execute_and_store_result(output, input_value, 0, 2);\n  }\n  *(ushort *)(input_address + 0xc) &= 0xefff;\n  int result = process_input_08006f5a_wrapper(input_value, unused1, unused2, unused2, unused2, 0, 0, 0);\n  if (result == -1 && *PTR_DAT_08006fe0 != 0) {\n    *output = *PTR_DAT_08006fe0;\n  }\n}",
            "called": [
                "FUN_08007048",
                "FUN_08005730"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f5a",
            "calling": [],
            "imported": false,
            "current_name": "process_input_08006f5a"
        },
        "FUN_08000b08": {
            "renaming": {
                "FUN_08000b08": "update_and_print_data_08000b08",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "PTR_DAT_08000b9c": "data_ptr_1",
                "PTR_DAT_08000b98": "data_ptr_2",
                "PTR_DAT_08000b94": "data_ptr_3",
                "PTR_DAT_08000b90": "data_ptr_4",
                "PTR_DAT_08000b8c": "data_ptr_5",
                "PTR_DAT_08000b88": "data_ptr_6",
                "PTR_DAT_08000b84": "data_ptr_7",
                "PTR_DAT_08000bb8": "data_ptr_8",
                "PTR_DAT_08000ba0": "data_ptr_9",
                "PTR_DAT_08000ba4": "data_ptr_10",
                "PTR_DAT_08000ba8": "data_ptr_11",
                "PTR_DAT_08000bac": "data_ptr_12",
                "PTR_DAT_08000bb0": "data_ptr_13",
                "PTR_DAT_08000bb4": "data_ptr_14",
                "PTR_DAT_08000bc8": "data_ptr_15",
                "PTR_DAT_08000bc4": "data_ptr_16",
                "PTR_DAT_08000bc0": "data_ptr_17",
                "PTR_DAT_08000bbc": "data_ptr_18"
            },
            "code": "void update_and_print_data_08000b08(int data_ptr, int data_size)\n{\n    if ((data_ptr == 1) && (data_size == 0xffff)) {\n        update_data_and_return_param_08001b18_08001b18(PTR_DAT_08000b9c, PTR_DAT_08000b98, PTR_DAT_08000b94, PTR_DAT_08000b90,\n            *(undefined4 *)PTR_DAT_08000b8c, *(undefined4 *)(PTR_DAT_08000b8c + 4),\n            *(undefined4 *)PTR_DAT_08000b88, *(undefined4 *)(PTR_DAT_08000b88 + 4),\n            *(undefined4 *)PTR_DAT_08000b84, *(undefined4 *)(PTR_DAT_08000b84 + 4), 0);\n        decode_and_print_data_08001510(PTR_DAT_08000bb8, *PTR_DAT_08000ba0, *PTR_DAT_08000ba4, *PTR_DAT_08000ba8,\n            *PTR_DAT_08000bac, *PTR_DAT_08000bb0, *PTR_DAT_08000bb4);\n        process_input_and_decode_0800157c(PTR_DAT_08000bc8, *PTR_DAT_08000bc4, *PTR_DAT_08000bc0, *PTR_DAT_08000bbc);\n    }\n}\n",
            "called": [
                "FUN_0800157c",
                "FUN_08001510",
                "FUN_08001b18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b08",
            "calling": [],
            "imported": false,
            "current_name": "update_and_print_data_08000b08"
        },
        "FUN_08006cb4": {
            "renaming": {
                "FUN_08006cb4": "initialize_data_08006cb4",
                "param_1": "block_index",
                "uVar1": "block",
                "iVar2": "index",
                "bVar3": "is_index_eq_block_index"
            },
            "code": "void initialize_data_08006cb4(int block_index) {\n    undefined4 block1;\n    undefined4 block2;\n    undefined4 block3;\n    int index;\n    bool is_index_eq_block_index;\n    \n    if (*(int *)(block_index + 0x18) == 0) {\n        *(undefined4 *)(block_index + 0x48) = 0;\n        *(undefined4 *)(block_index + 0x4c) = 0;\n        *(undefined4 *)(block_index + 0x50) = 0;\n        index = *(int *)PTR_PTR_DAT_08006d0c;\n        *(undefined **)(block_index + 0x28) = PTR_LAB_08006c34_1_08006d10;\n        is_index_eq_block_index = block_index == index;\n        if (is_index_eq_block_index) {\n            index = 1;\n        }\n        if (is_index_eq_block_index) {\n            *(int *)(block_index + 0x18) = index;\n        }\n        block1 = initialize_block_if_empty_08006d14();\n        *(undefined4 *)(block_index + 4) = block1;\n        block2 = initialize_block_if_empty_08006d14(block_index);\n        *(undefined4 *)(block_index + 8) = block2;\n        block3 = initialize_block_if_empty_08006d14(block_index);\n        *(undefined4 *)(block_index + 0xc) = block3;\n        initialize_data_08006cb4_structures_08006c40(*(undefined4 *)(block_index + 4), 4, 0);\n        initialize_data_08006cb4_structures_08006c40(*(undefined4 *)(block_index + 8), 9, 1);\n        initialize_data_08006cb4_structures_08006c40(*(undefined4 *)(block_index + 0xc), 0x12, 2);\n        *(undefined4 *)(block_index + 0x18) = 1;\n    }\n    return;\n}",
            "called": [
                "FUN_08006c40",
                "FUN_08006d14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006cb4",
            "calling": [
                "FUN_08006344",
                "FUN_08006d14",
                "FUN_08006394",
                "FUN_080069e4",
                "FUN_08006be0",
                "FUN_080068f0"
            ],
            "imported": false,
            "current_name": "initialize_data_08006cb4"
        },
        "FUN_08004c5e": {
            "renaming": {
                "FUN_08004c5e": "find_value_in_array_08004c5e",
                "param_1": "value",
                "param_2": "array",
                "*param_2": "*array"
            },
            "code": "int find_value_in_array_08004c5e(int value, char *array) {\n    while (*array != -1) {\n        if (*array == value) {\n            return *(int *)(array + 4);\n        }\n        array += 12;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004c5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c5e",
            "calling": [
                "FUN_08004c5e",
                "FUN_08004c78"
            ],
            "imported": false,
            "current_name": "find_value_in_array_08004c5e"
        },
        "FUN_08004b3c": {
            "renaming": {
                "FUN_08004b3c": "process_input_and_set_flags_08004b3c",
                "param_1": "input_value",
                "local_50": "values",
                "PTR_DAT_08004b90": "matching_data"
            },
            "code": "void process_input_and_set_flags_08004b3c(int input_value)\n{\n  int output_value;\n  uint matching_char;\n  int values[17];\n  values[0] = find_value(input_value, PTR_DAT_08004b90);\n  if ((values[0] != 0) && (((output_value = determine_output_value(input_value), output_value == 0 || output_value == 4) || output_value == 8) || (output_value == 0xc || output_value == 0x18)))) {\n    matching_char = find_matching_char(input_value, PTR_DAT_08004b90);\n    if ((matching_char & 0x100000) == 0) {\n      set_and_update_bit(values, output_value);\n    }\n    else {\n      set_bit_and_check(values, output_value);\n    }\n    set_flags_and_clear_bit(values);\n  }\n  return;\n}",
            "called": [
                "FUN_08003ed8",
                "FUN_08004cce",
                "FUN_080040b0",
                "FUN_08004948",
                "FUN_08004c78",
                "FUN_0800412c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b3c",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "process_input_and_set_flags_08004b3c"
        },
        "FUN_08001550": {
            "renaming": {
                "FUN_08001550": "print_encoded_string_08001550",
                "param_1": "string_ptr",
                "param_2": "string_length",
                "param_3": "data_ptr",
                "iVar1": "i",
                "decode_and_print_08001310": "decode_and_print"
            },
            "code": "void print_encoded_string_08001550(uint8_t *string_ptr, uint string_length, int data_ptr) {\n  uint8_t mask = (string_length & 7) << 3 | 0x40;\n  decode_and_print(string_ptr, mask, 0);\n  for (uint i = 0; i < 8; i++) {\n    (**(code **)*string_ptr)(string_ptr, *(undefined *)(data_ptr + i));\n  }\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001550",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "print_encoded_string_08001550"
        },
        "FUN_08000cd0": {
            "renaming": {
                "FUN_08000cd0": "FUNC_08000cd0"
            },
            "code": "\nvoid FUNC_08000cd0(void)\n\n{\n  char cVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  uint uVar5;\n  undefined4 uVar6;\n  int iVar7;\n  undefined4 extraout_r1;\n  undefined4 extraout_r1_00;\n  undefined4 extraout_r1_01;\n  undefined4 uVar8;\n  undefined8 uVar9;\n  \n  uVar5 = get_pointer_value_and_return_080058e0();\n  if (*(uint *)PTR_DAT_08000f50 < uVar5) {\n    *(uint *)PTR_DAT_08000f50 = *(uint *)PTR_DAT_08000f50 + 1000;\n    uVar9 = process_bits_080015f8(PTR_DAT_08000f74,0);\n    uVar8 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar6 = (undefined4)uVar9;\n    *(undefined8 *)PTR_DAT_08000f6c = uVar9;\n    iVar7 = is_character_not_null_080009c8(uVar6,uVar8,DAT_08000f18,DAT_08000f1c);\n    if (((iVar7 != 0) || (iVar7 = is_character_not_null_080009c8(uVar6,uVar8,DAT_08000f20,DAT_08000f24), iVar7 != 0))\n       || (iVar7 = is_character_not_null_080009c8(uVar6,uVar8,DAT_08000f28,DAT_08000f2c), iVar7 != 0)) {\n      *PTR_DAT_08000f64 = 7;\n      *PTR_DAT_08000f58 = 0;\n    }\n  }\n  uVar5 = get_pointer_value_and_return_080058e0();\n  if (*(uint *)PTR_DAT_08000f54 < uVar5) {\n    *(uint *)PTR_DAT_08000f54 = *(uint *)PTR_DAT_08000f54 + 1000;\n    if (*PTR_DAT_08000f58 == '\\x01') {\n      uVar8 = *(undefined4 *)PTR_DAT_08000f5c;\n      uVar6 = check_bit_at_offset_and_return_08005890(uVar8);\n      uVar5 = count_leading_zeroes(uVar6);\n      decode_character_08005848(uVar8,uVar5 >> 5);\n      iVar7 = *(int *)PTR_DAT_08000f78;\n      *(int *)PTR_DAT_08000f78 = iVar7 + 1;\n      puVar2 = PTR_DAT_08000f7c;\n      call_base_conversion_or_function_pointer_08005d82(PTR_DAT_08000f7c,iVar7 + 1,10);\n      puVar3 = PTR_DAT_08000f80;\n      get_string_ending_08005c96(puVar2,PTR_DAT_08000f80);\n      validate_and_convert_input_to_string_08005f2c(puVar2,extraout_r1,*(undefined4 *)PTR_DAT_08000f84,\n                   *(undefined4 *)(PTR_DAT_08000f84 + 4),2);\n      get_string_ending_08005c96(puVar2,puVar3);\n      validate_and_convert_input_to_string_08005f2c(puVar2,extraout_r1_00,*(undefined4 *)PTR_DAT_08000f6c,\n                   *(undefined4 *)(PTR_DAT_08000f6c + 4),2);\n      get_string_ending_08005c96(puVar2,puVar3);\n      calculate_result_08005f40(puVar2,extraout_r1_01,*(undefined4 *)PTR_DAT_08000f88,\n                   *(undefined4 *)(PTR_DAT_08000f88 + 4),2);\n    }\n    else {\n      decode_character_08005848(*(undefined4 *)PTR_DAT_08000f5c,1);\n    }\n    puVar2 = PTR_DAT_08000f60;\n    decode_and_print_data_0800135a(PTR_DAT_08000f60);\n    puVar4 = PTR_DAT_08000f64;\n    get_string_ending_08005c96(puVar2,*(undefined4 *)\n                         (PTR_PTR_s_Ready_08000f68 + (uint)(byte)*PTR_DAT_08000f64 * 4));\n    decode_and_print_08001366(puVar2,0,1);\n    puVar3 = PTR_DAT_08000f60;\n    if (*puVar4 == '\\a') {\n      get_string_ending_08005c96(puVar2,PTR_s_TC_Error__08000f8c);\n    }\n    else {\n      validate_and_convert_input_to_string_08005f2c(PTR_DAT_08000f60,2,*(undefined4 *)PTR_DAT_08000f6c,\n                   *(undefined4 *)(PTR_DAT_08000f6c + 4),2);\n      decode_and_print_0800134e(puVar3,0);\n      get_string_ending_08005c96(puVar3,PTR_DAT_08000f70);\n    }\n  }\n  if ((byte)*PTR_DAT_08000f64 < 8) {\n                    /* WARNING: Could not recover jumptable at 0x08000d5c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_08000d5c::switchdataD_08000d60 +\n              (&switchD_08000d5c::switchdataD_08000d60)[(byte)*PTR_DAT_08000f64]))();\n    return;\n  }\n  if ((*PTR_DAT_08001274 == '\\x01') && (*PTR_DAT_0800126c == '\\x01')) {\n    *PTR_DAT_0800126c = 0;\n    *PTR_DAT_08001258 = 0;\n  }\n  cVar1 = *PTR_DAT_08001278;\n  if (cVar1 == '\\x01') {\n    iVar7 = decode_value_08005754(*(undefined4 *)PTR_DAT_08001280);\n    if (iVar7 == 0) {\n      iVar7 = get_pointer_value_and_return_080058e0();\n      if (0x32 < (uint)(iVar7 - *(int *)PTR_DAT_08001284)) {\n        *PTR_DAT_08001278 = 2;\n      }\n    }\n    else {\n      *PTR_DAT_08001278 = 0;\n    }\n  }\n  else if (cVar1 == '\\0') {\n    *PTR_DAT_08001274 = 0;\n    iVar7 = decode_value_08005754(*(undefined4 *)PTR_DAT_08001280);\n    if (iVar7 == 0) {\n      uVar6 = get_pointer_value_and_return_080058e0();\n      *(undefined4 *)PTR_DAT_08001284 = uVar6;\n      *PTR_DAT_08001278 = 1;\n    }\n  }\n  else if ((cVar1 == '\\x02') && (iVar7 = decode_value_08005754(*(undefined4 *)PTR_DAT_08001280), iVar7 != 0))\n  {\n    *PTR_DAT_08001274 = 1;\n    *PTR_DAT_08001278 = 0;\n  }\n  if (*PTR_DAT_0800126c == '\\x01') {\n    iVar7 = get_pointer_value_and_return_080058e0();\n    parse_input_080016b4(PTR_DAT_08001250);\n    if (*(uint *)PTR_DAT_0800128c < (uint)(iVar7 - *(int *)PTR_DAT_08001288)) {\n      *(uint *)PTR_DAT_08001288 = *(int *)PTR_DAT_08001288 + *(uint *)PTR_DAT_0800128c;\n    }\n    uVar9 = shift_and_concatenate_0800040c(iVar7 - *(int *)PTR_DAT_08001288);\n    iVar7 = is_end_of_string_080009dc((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),*(undefined4 *)PTR_DAT_08001290,\n                         *(undefined4 *)(PTR_DAT_08001290 + 4));\n    if (iVar7 == 0) {\n      decode_character_08005848(*(undefined4 *)PTR_DAT_0800127c,0);\n    }\n    else {\n      decode_character_08005848(*(undefined4 *)PTR_DAT_0800127c,1);\n    }\n  }\n  else {\n    decode_character_08005848(*(undefined4 *)PTR_DAT_0800127c,0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800040c",
                "FUN_08005cd4",
                "FUN_080018f8",
                "FUN_080058e0",
                "FUN_08005f2c",
                "FUN_08001a44",
                "FUN_080009c8",
                "FUN_08005d82",
                "FUN_080015f8",
                "FUN_08005848",
                "FUN_0800042c",
                "FUN_08001366",
                "FUN_08005f40",
                "FUN_08000a18",
                "FUN_0800134e",
                "FUN_0800135a",
                "FUN_08005754",
                "FUN_08000a04",
                "FUN_080009dc",
                "FUN_08001918",
                "FUN_080009f0",
                "FUN_08005890",
                "FUN_080016b4",
                "FUN_08001960",
                "FUN_08005c96",
                "FUN_08000194"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cd0",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "FUNC_08000cd0"
        },
        "FUN_08001310": {
            "renaming": {
                "FUN_08001310": "decode_and_print_08001310",
                "param_1": "input_address",
                "param_2": "input_value",
                "param_3": "param_3",
                "param_4": "param_4",
                "decode_character_08005848": "decode_character",
                "decode_and_print_080012c0": "decode_and_print_helper",
                "decode_and_print_080012e8": "decode_and_print_helper2"
            },
            "code": "void decode_and_print_08001310(int input_address, uint input_value, undefined4 param_3, undefined4 param_4)\n{\n  decode_character(*(undefined *)(input_address + 8), param_3, param_3, param_4, param_4);\n  if (*(char *)(input_address + 9) != -1) {\n    decode_character(*(char *)(input_address + 9), 0);\n  }\n  if ((*(byte *)(input_address + 0x13) & 0x10) == 0) {\n    decode_and_print_08001310_helper(input_address, input_value >> 4);\n    decode_and_print_08001310_helper(input_address, input_value);\n    return;\n  }\n  decode_and_print_08001310_helper2(input_address, input_value);\n  return;\n}",
            "called": [
                "FUN_08005848",
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001310",
            "calling": [
                "FUN_08001550",
                "FUN_0800134e",
                "FUN_08001366",
                "FUN_0800135a",
                "FUN_080013a4",
                "FUN_0800138e"
            ],
            "imported": false,
            "current_name": "decode_and_print_08001310"
        },
        "FUN_080009a8": {
            "renaming": {
                "FUN_080009a8": "compare_and_return_080009a8",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param"
            },
            "code": "void compare_and_return_080009a8(int first_param, int second_param, int third_param, int fourth_param) {\n\tcompare_and_return_080009a8_080009b8(third_param, fourth_param, first_param, second_param);\n\treturn;\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009a8",
            "calling": [
                "FUN_08000a18",
                "FUN_08000a04"
            ],
            "imported": false,
            "current_name": "compare_and_return_080009a8"
        },
        "FUN_08004d90": {
            "renaming": {
                "FUN_08004d90": "set_flags_based_on_input_08004d90",
                "param_1": "input_value",
                "DAT_08004de4": "FLAG_A",
                "DAT_08004df0": "FLAG_STRUCT_PTR",
                "DAT_08004de8": "FLAG_C",
                "DAT_08004dec": "FLAG_D"
            },
            "code": "void set_flags_based_on_input_08004d90(int *input_value)\n{\n  if (*input_value == DAT_08004de4) {\n    *(uint *)(DAT_08004df0 + 0x18) = *(uint *)(DAT_08004df0 + 0x18) & 0xfffff7ff;\n  }\n  if (*input_value == FLAG_B) {\n    *(uint *)(DAT_08004df0 + 0x1c) = *(uint *)(DAT_08004df0 + 0x1c) & 0xfffffffe;\n  }\n  if (*input_value == DAT_08004de8) {\n    *(uint *)(DAT_08004df0 + 0x1c) = *(uint *)(DAT_08004df0 + 0x1c) & 0xfffffffd;\n  }\n  if (*input_value == DAT_08004dec) {\n    *(uint *)(DAT_08004df0 + 0x1c) = *(uint *)(DAT_08004df0 + 0x1c) & 0xfffffffb;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d90",
            "calling": [
                "FUN_08004b34"
            ],
            "imported": false,
            "current_name": "set_flags_based_on_input_08004d90"
        },
        "FUN_08005ce8": {
            "renaming": {
                "FUN_08005ce8": "convert_base_08005ce8",
                "param_1": "base",
                "param_2": "number",
                "param_3": "base_to_convert_to",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "output",
                "cVar1": "digit",
                "local_15": "reversed_output"
            },
            "code": "undefined4 convert_base_08005ce8(int *base, uint number, uint base_to_convert_to)\n{\n  char digit;\n  undefined4 result;\n  uint quotient;\n  uint remainder;\n  char *output;\n  char reversed_output[9];\n  reversed_output[1] = 0;\n  if ((int)base_to_convert_to < 2) {\n    base_to_convert_to = 10;\n  }\n  output = reversed_output + 1;\n  do {\n    quotient = number / base_to_convert_to;\n    remainder = (number & 0xff) - (quotient * base_to_convert_to & 0xff) & 0xff;\n    output = output + -1;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit = digit + '0';\n    }\n    else {\n      digit = digit + '7';\n    }\n    *output = digit;\n    number = quotient;\n  } while (quotient != 0);\n  if (output == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    result = get_string_ending_08000178(output);\n    result = (**(code **)(*base + 4))(base,output,result);\n  }\n  return result;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005ce8",
            "calling": [
                "FUN_08005d8a",
                "FUN_08005d42"
            ],
            "imported": false,
            "current_name": "convert_base_08005ce8"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "execute_0800316c",
                "param_1": "params",
                "iVar1": "i",
                "puVar2": "ptr1",
                "puVar3": "ptr2",
                "do_nothing_0800316a": "do_nothing",
                "check_and_modify_uint_array_08004ef4": "modify_uint_array",
                "get_value_from_param_0800258c": "get_value",
                "PTR_LAB_080035fc_1_080032ac": "PTR_LAB"
            },
            "code": "void execute_0800316c(uint **params)\n{\n  int i;\n  uint *ptr1;\n  uint *ptr2;\n\n  if (*(byte *)((int)params + 0x3d) - 0x29 < 2)) {\n    params[12] = (uint *)0x0;\n    *(undefined *)((int)params + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)params + 0x3d) != '`') && (((*params)[1] & 0x800) == 0)) {\n      *(undefined *)((int)params + 0x3d) = 0x20;\n    }\n    params[12] = (uint *)0x0;\n    *(undefined *)((int)params + 0x3e) = 0;\n  }\n  **params = **params & 0xfffff7ff;\n  ptr2 = *params;\n  if ((ptr2[1] & 0x800) == 0) {\n    if (*(char *)((int)params + 0x3d) == '`') {\n      *(undefined *)((int)params + 0x3d) = 0x20;\n      params[16] = (uint *)0x0;\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = params[9];\n        params[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      **params = **params & 0xfffffffe;\n      do_nothing(params);\n    }\n    else {\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = params[9];\n        params[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      modify_uint_array(params);\n    }\n  }\n  else {\n    ptr2[1] = ptr2[1] & 0xfffff7ff;\n    if (*(char *)((int)params[13] + 0x21) == '\\x01') {\n      params[14][13] = (uint)PTR_LAB_080035fc_1_080032ac_080035fc_1_080032ac;\n      i = get_value(params[14]);\n      if (i != 0) {\n        if (((*params)[5] & 0x40) != 0) {\n          ptr2 = params[9];\n          params[9] = (uint *)((int)ptr2 + 1);\n          *(char *)ptr2 = (char)(*params)[4];\n        }\n        **params = **params & 0xfffffffe;\n        *(undefined *)((int)params + 0x3d) = 0x20;\n        (*(code *)params[14][13])();\n      }\n    }\n    else {\n      params[13][13] = (uint)PTR_LAB_080035fc_1_080032ac_080035fc_1_080032ac;\n      i = get_value(params[13]);\n      if (i != 0) {\n        **params = **params & 0xfffffffe;\n        *(undefined *)((int)params + 0x3d) = 0x20;\n        (*(code *)params[13][13])();\n      }\n    }\n  }\n  if ((*(char *)((int)params + 0x3d) == '(') && (((uint)params[16] & 4) != 0)) {\n    params[11] = DAT_080032b0;\n    params[12] = (uint *)0x0;\n    *(undefined *)((int)params + 0x3d) = 0x20;\n    *(undefined *)((int)params + 0x3e) = 0;\n    execute_0800316c_function(params);\n  }\n  return;\n}",
            "called": [
                "FUN_08004ef4",
                "FUN_0800258c",
                "FUN_0800316a",
                "FUN_08004ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "FUN_08003520",
                "FUN_080032b4"
            ],
            "imported": false,
            "current_name": "execute_0800316c"
        },
        "FUN_08004828": {
            "renaming": {
                "FUN_08004828": "set_bit_to_zero_08004828",
                "param_1": "bit_position",
                "param_2": "array",
                "uVar1": "index",
                "*(uint *)(param_2 + uVar1 * 4)": "element",
                "mask": "mask"
            },
            "code": "void set_bit_to_zero_08004828(uint bit_position, int* array){\n                      uint index = (bit_position << 0x18) >> 0x1c;\n                      uint* element = array + index;\n                      uint mask = ~(1 << (bit_position & 0xf));\n                      *element = *element & mask;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004828",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "set_bit_to_zero_08004828"
        },
        "FUN_08003afa": {
            "renaming": {
                "FUN_08003afa": "execute_operation_08003afa",
                "param_1": "operation_flags",
                "param_2": "operation_type",
                "puVar1": "global_data_ptr",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "uVar4": "result",
                "DAT_08003c38": "global_data",
                "DAT_08003c34": "global_data_start_ptr",
                "PTR_DAT_08003c40": "global_data_output_ptr",
                "PTR_DAT_08003c3c": "operation_result_shift",
                "get_pointer_value_08001cc4": "get_current_time",
                "calculate_result_08003a68": "calculate_operation_result",
                "validate_and_write_to_memory_08001c3c": "validate_and_write_to_memory",
                "OPERATION_FLAG_1": "operation_flag_1",
                "OPERATION_FLAG_2": "operation_flag_2",
                "OPERATION_FLAG_3": "operation_flag_3",
                "OPERATION_FLAG_4": "operation_flag_4",
                "OPERATION_FLAG_4_MASK": "operation_flag_4_mask",
                "OPERATION_FLAG_5": "operation_flag_5",
                "OPERATION_SUBTYPE_1": "operation_subtype_1",
                "OPERATION_SUBTYPE_2": "operation_subtype_2",
                "OPERATION_SUBTYPE_3_COMPLETE": "operation_subtype_3_complete",
                "OPERATION_SUBTYPE_1_COMPLETE": "operation_subtype_1_complete",
                "OPERATION_SUBTYPE_2_COMPLETE": "operation_subtype_2_complete",
                "OPERATION_RESULT_SUCCESS": "operation_result_success",
                "OPERATION_RESULT_ERROR": "operation_result_error",
                "OPERATION_RESULT_TIMEOUT": "operation_result_timeout"
            },
            "code": "uint32_t execute_operation_08003afa(uint32_t *operation_flags, uint32_t operation_type) {\n  uint32_t *DAT_08003c38_ptr;\n  int32_t start_time;\n  int32_t current_time;\n  uint32_t result;\n  \n  if ((*operation_flags & OPERATION_FLAG_2) != 0) {\n    DAT_08003c38[1] = DAT_08003c38[1] & 0xffffff0f | operation_flags[2];\n  }\n  if ((*operation_flags & OPERATION_FLAG_1) != 0) {\n    uint32_t operation_subtype = operation_flags[1];\n    if (operation_subtype == OPERATION_SUBTYPE_1) {\n      if ((*DAT_08003c38 & 0x20000) == 0) {\n        return OPERATION_RESULT_ERROR;\n      }\n    }\n    else if ((operation_subtype != OPERATION_SUBTYPE_2) && ((*DAT_08003c38 & OPERATION_FLAG_2) == 0)) {\n      return OPERATION_RESULT_ERROR;\n    }\n    DAT_08003c38[1] = operation_subtype | DAT_08003c38[1] & 0xfffffffc;\n    start_time = get_current_time();\n    if (operation_subtype == OPERATION_SUBTYPE_1) {\n      while ((DAT_08003c38[1] & OPERATION_FLAG_3) != OPERATION_SUBTYPE_1_COMPLETE) {\n        current_time = get_current_time();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return OPERATION_RESULT_TIMEOUT;\n        }\n      }\n    }\n    else if (operation_subtype == OPERATION_SUBTYPE_2) {\n      while ((DAT_08003c38[1] & OPERATION_FLAG_3) != OPERATION_SUBTYPE_2_COMPLETE) {\n        current_time = get_current_time();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return OPERATION_RESULT_TIMEOUT;\n        }\n      }\n    }\n    else {\n      while ((DAT_08003c38[1] & OPERATION_FLAG_3) != OPERATION_SUBTYPE_3_COMPLETE) {\n        current_time = get_current_time();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return OPERATION_RESULT_TIMEOUT;\n        }\n      }\n    }\n  }\n  DAT_08003c38_ptr = DAT_08003c34;\n  if ((operation_type < (*DAT_08003c34 & OPERATION_FLAG_4_MASK)) &&\n     (*DAT_08003c34 = *DAT_08003c34 & 0xfffffff8 | operation_type, operation_type != (*DAT_08003c38_ptr & OPERATION_FLAG_4_MASK))) {\n    return OPERATION_RESULT_ERROR;\n  }\n  if ((*operation_flags & OPERATION_FLAG_4) != 0) {\n    DAT_08003c38[1] = DAT_08003c38[1] & 0xfffff8ff | operation_flags[3];\n  }\n  if ((*operation_flags & OPERATION_FLAG_5) != 0) {\n    DAT_08003c38[1] = DAT_08003c38[1] & 0xffffc7ff | operation_flags[4] << 3;\n  }\n  result = calculate_operation_result();\n  *(uint32_t *)PTR_DAT_08003c40 = result >> PTR_DAT_08003c3c[DAT_08003c38[1] >> 0x1c];\n  validate_and_write_to_memory(0xf);\n  return OPERATION_RESULT_SUCCESS;\n}",
            "called": [
                "FUN_08001c3c",
                "FUN_08001cc4",
                "FUN_08003a68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003afa",
            "calling": [
                "FUN_08003ad4"
            ],
            "imported": false,
            "current_name": "execute_operation_08003afa"
        },
        "FUN_08004948": {
            "renaming": {
                "FUN_08004948": "determine_output_value_08004948",
                "param_1": "target",
                "param_2": "string",
                "param_3": "starting_index",
                "param_4": "string_length",
                "iVar1": "index_of_target",
                "uVar2": "shifted_value"
            },
            "code": "int determine_output_value_08004948(char target, char *string, int starting_index, int string_length, int max_index) {\n    int i;\n    for (i = starting_index; i < max_index; i++) {\n        if (string[i] == target) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nint determine_output_value_08004948(char target, char *string, int starting_index, int string_length, int max_index) {\n    int index_of_target = determine_output_value_08004948(target, string, starting_index, string_length, max_index);\n    int shifted_value = (index_of_target << 12) >> 27;\n    if (shifted_value == 3) {\n        return 8;\n    }\n    if (shifted_value == 4) {\n        return 12;\n    }\n    if (shifted_value == 2) {\n        return 4;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004cce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004948",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "determine_output_value_08004948"
        },
        "FUN_0800316a": {
            "renaming": {
                "FUN_0800316a": "do_nothing_0800316a"
            },
            "code": "\nvoid do_nothing_0800316a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316a",
            "calling": [
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800316a"
        },
        "FUN_08005b24": {
            "renaming": {
                "FUN_08005b24": "set_value_at_address_based_on_index_08005b24",
                "param_1": "address",
                "param_2": "index",
                "uVar1": "value",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void set_value_at_address_based_on_index_08005b24(int address, uint index) {\n  undefined value;\n  code *jump_table;\n  if (index < 0x3c) {\n    value = PTR_DAT_08005b38[index];\n  }\n  else {\n    value = 0xff;\n  }\n  *(undefined *)(address + 0x12d) = value;\n  (*jump_table)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b24",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "set_value_at_address_based_on_index_08005b24"
        },
        "FUN_080049f0": {
            "renaming": {
                "FUN_080049f0": "update_flags_based_on_input_080049f0",
                "param_1": "input_value",
                "iVar1": "flags_address",
                "DAT_08004a48": "flags_address",
                "DAT_08004a40": "flag_value_1",
                "DAT_08004a44": "flag_value_2",
                "*param_1": "*input_value",
                "*(uint *)(DAT_08004a48 + 0xc)": "*flag_1",
                "*(uint *)(DAT_08004a48 + 0x18)": "*flag_2"
            },
            "code": "void update_flags_based_on_input_080049f0(int *input_value)\n{\n  int DAT_08004a48 = DAT_08004a48;\n  int DAT_08004a40 = DAT_08004a40;\n  int DAT_08004a44 = DAT_08004a44;\n  \n  if (*input_value != DAT_08004a40) {\n    if (*input_value == DAT_08004a44) {\n      uint *(uint *)(DAT_08004a48 + 0xc) = (uint *)(DAT_08004a48 + 0xc);\n      uint *(uint *)(DAT_08004a48 + 0x18) = (uint *)(DAT_08004a48 + 0x18);\n      *(uint *)(DAT_08004a48 + 0xc) = *(uint *)(DAT_08004a48 + 0xc) | 0x400;\n      *(uint *)(DAT_08004a48 + 0x18) = *(uint *)(DAT_08004a48 + 0x18) & 0xfffffbff;\n    }\n    return;\n  }\n  uint *(uint *)(DAT_08004a48 + 0xc) = (uint *)(DAT_08004a48 + 0xc);\n  uint *(uint *)(DAT_08004a48 + 0x18) = (uint *)(DAT_08004a48 + 0x18);\n  *(uint *)(DAT_08004a48 + 0xc) = *(uint *)(DAT_08004a48 + 0xc) | 0x200;\n  *(uint *)(DAT_08004a48 + 0x18) = *(uint *)(DAT_08004a48 + 0x18) & 0xfffffdff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049f0",
            "calling": [
                "FUN_0800224c"
            ],
            "imported": false,
            "current_name": "update_flags_based_on_input_080049f0"
        },
        "FUN_08001e40": {
            "renaming": {
                "FUN_08001e40": "get_value_at_offset_4c_08001e40",
                "param_1": "base_address",
                "*param_1": "*base_address"
            },
            "code": "int get_value_at_offset_4c_08001e40(int *base_address){\n  int offset = 0x4c;\n  int *address = base_address + offset;\n  int value = *address;\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e40",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_4c_08001e40"
        },
        "FUN_08003a68": {
            "renaming": {
                "FUN_08003a68": "calculate_result_08003a68",
                "uVar1": "result",
                "uVar2": "bitmask",
                "local_1c": "local_value",
                "abStack_18": "buffer"
            },
            "code": "uint calculate_result_08003a68(void)\n{\n  uint result;\n  uint bitmask;\n  undefined2 local_value;\n  byte buffer[4];\n  undefined4 uStack_c;\n  undefined4 uStack_10;\n  undefined4 uStack_14;\n  \n  uStack_c = *(undefined4 *)(PTR_DAT_08003ac4 + 8);\n  uStack_10 = *(undefined4 *)(PTR_DAT_08003ac4 + 4);\n  uStack_14 = *(undefined4 *)PTR_DAT_08003ac4;\n  local_value = *(undefined2 *)(PTR_DAT_08003ac4 + 0x10);\n  bitmask = *(uint *)(DAT_08003ac8 + 4);\n  result = DAT_08003ad0;\n  if ((bitmask & 0xc) == 8) {\n    if ((bitmask & 0x10000) == 0) {\n      result = DAT_08003acc * (uint)buffer[(bitmask << 10) >> 0x1c];\n    }\n    else {\n      result = (DAT_08003ad0 * buffer[(bitmask << 10) >> 0x1c]) / (uint)*(byte *)((int)&local_value - ((*(int *)(DAT_08003ac8 + 4) << 0xe) >> 0x1f));\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a68",
            "calling": [
                "FUN_08003afa"
            ],
            "imported": false,
            "current_name": "calculate_result_08003a68"
        },
        "FUN_080012a2": {
            "renaming": {
                "FUN_080012a2": "decode_and_print_char_080012a2",
                "param_1": "ptr_param_1",
                "*(undefined *)(param_1 + 10)": "*(char *)(ptr_param_1 + 10)",
                "decode_character_08005848": "decode_character"
            },
            "code": "void decode_and_print_char_080012a2(int ptr_param_1) {\n    char decoded_char = *(char *)(ptr_param_1 + 10);\n    decode_character_08005848(decoded_char, 0);\n    decode_character_08005848(decoded_char, 1);\n    decode_character_08005848(decoded_char, 0);\n    return;\n}",
            "called": [
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012a2",
            "calling": [
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "imported": false,
            "current_name": "decode_and_print_char_080012a2"
        },
        "FUN_08004c78": {
            "renaming": {
                "<original_function_name>": "FUN_08004c78",
                "<param_1>": "value_to_find",
                "<uVar1>": "found_value",
                "find_value_in_array_08004c5e": "find_value_in_array",
                "FUN_08004c78": "find_value_08004c78"
            },
            "code": "int find_value_08004c78(int value_to_find){\n                      int found_value = 0;\n                      if (value_to_find != -1) {\n                        found_value = find_value_08004c78_in_array();\n                      }\n                      return found_value;\n                    }",
            "called": [
                "FUN_08004c5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c78",
            "calling": [
                "FUN_08004a4c",
                "FUN_08005384",
                "FUN_080053d4",
                "FUN_08004b3c",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "find_value_08004c78"
        },
        "FUN_08001e48": {
            "renaming": {
                "FUN_08001e48": "write_data_to_memory_08001e48",
                "param_1": "memory_address",
                "param_2": "data",
                "uVar1": "result",
                "uVar2": "offset",
                "iVar3": "delay",
                "local_c": "delay_loop"
            },
            "code": "int write_data_to_memory_08001e48(int *memory_address, uint *data){\n  int result;\n  int offset;\n  int delay;\n\n  if (*(char *)(memory_address + 9) == 1) {\n    result = 2;\n  }\n  else {\n    *(undefined *)(memory_address + 9) = 1;\n    offset = data[1];\n    if (offset < 7) {\n      offset = offset * 5 - 5;\n      *(uint *)(*memory_address + 0x34) = *data << (offset & 0xff) | *(uint *)(*memory_address + 0x34) & ~(0x1f << (offset & 0xff));\n    }\n    else if (offset < 0xd) {\n      offset = offset * 5 - 0x23;\n      *(uint *)(*memory_address + 0x30) = *data << (offset & 0xff) | *(uint *)(*memory_address + 0x30) & ~(0x1f << (offset & 0xff));\n    }\n    else {\n      offset = offset * 5 - 0x41;\n      *(uint *)(*memory_address + 0x2c) = *data << (offset & 0xff) | *(uint *)(*memory_address + 0x2c) & ~(0x1f << (offset & 0xff));\n    }\n    offset = *data;\n    if (offset < 10) {\n      *(uint *)(*memory_address + 0x10) = data[2] << (offset * 3 & 0xff) | *(uint *)(*memory_address + 0x10) & ~(7 << (offset * 3 & 0xff));\n    }\n    else {\n      offset = offset * 3 - 0x1e;\n      *(uint *)(*memory_address + 0xc) = data[2] << (offset & 0xff) | *(uint *)(*memory_address + 0xc) & ~(7 << (offset & 0xff));\n    }\n    if (*data - 0x10 < 2) {\n      delay = *memory_address;\n      if (delay == DAT_08001f74) {\n        if ((*(uint *)(delay + 8) & 0x800000) == 0) {\n          *(uint *)(delay + 8) = *(uint *)(delay + 8) | 0x800000;\n          if (*data == 0x10) {\n            for (result = (uint)((ulonglong)DAT_08001f7c * (ulonglong)*(uint *)PTR_DAT_08001f78 >> 0x32) * 10; result != 0; result = result + -1) {\n            }\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        memory_address[10] = memory_address[10] | 0x20;\n        result = 1;\n      }\n    }\n    else {\n      result = 0;\n    }\n    *(undefined *)(memory_address + 9) = 0;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e48",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "write_data_to_memory_08001e48"
        },
        "FUN_080009b8": {
            "renaming": {
                "FUN_080009b8": "compare_and_return_080009b8",
                "param_1": "input",
                "compare_values_0800092c": "compare_values"
            },
            "code": "int compare_and_return_080009b8(int input) {\n  compare_values();\n  return input;\n}",
            "called": [
                "FUN_0800092c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009b8",
            "calling": [
                "FUN_080009a8",
                "FUN_080009dc",
                "FUN_080009f0",
                "FUN_080009c8"
            ],
            "imported": false,
            "current_name": "compare_and_return_080009b8"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "calculate_shift_amount_08000aa8",
                "param_1": "dividend",
                "param_2": "divisor",
                "iVar1": "intermediate_value",
                "uVar2": "quotient"
            },
            "code": "uint calculate_shift_amount_08000aa8(uint dividend, uint divisor)\n{\n  int intermediate_value;\n  uint quotient;\n  if ((divisor & 0x80000000) != 0) {\n    return 0;\n  }\n  intermediate_value = divisor * 2 + 0x200000;\n  if (divisor * 2 < 0xffe00000) {\n    if (-1 < intermediate_value) {\n      return 0;\n    }\n    quotient = -(intermediate_value >> 0x15) - 0x3e1;\n    if (-1 < (int)quotient) {\n      return (divisor << 0xb | 0x80000000 | dividend >> 0x15) >> (quotient & 0xff);\n    }\n  }\n  else if ((dividend | divisor << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aa8",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "calculate_shift_amount_08000aa8"
        },
        "FUN_08000a04": {
            "renaming": {
                "FUN_08000a04": "should_return_false_08000a04",
                "in_ZR": "zero_register",
                "in_CY": "carry_flag"
            },
            "code": "bool should_return_false_08000a04(void)\n{\n  undefined zero_register;\n  undefined carry_flag;\n  compare_and_return();\n  return !(bool)carry_flag || (bool)zero_register;\n}",
            "called": [
                "FUN_080009a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a04",
            "calling": [
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "should_return_false_08000a04"
        },
        "FUN_0800010c": {
            "renaming": {
                "FUN_0800010c": "check_if_first_call_0800010c",
                "*param_1": "*function_parameter",
                "*PTR_DAT_08000124": "*is_first_call",
                "DAT_08000128": "is_initialized",
                "PTR_FUN_0800012c": "default_function"
            },
            "code": "int *check_if_first_call_0800010c(int *function_parameter) {\\n  if (*PTR_DAT_08000124 == \"\\0\") {\\n    if (DAT_08000128 != 0) {\\n      function_parameter = PTR_FUN_0800012c;\\n    }\\n    *PTR_DAT_08000124 = 1;\\n  }\\n  return function_parameter;\\n}",
            "called": [
                "FUN_08007328"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": false,
            "current_name": "check_if_first_call_0800010c"
        },
        "FUN_08003f14": {
            "renaming": {
                "FUN_08003f14": "do_nothing_08003f14"
            },
            "code": "\nvoid do_nothing_08003f14(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f14",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f14"
        },
        "FUN_08001cac": {
            "renaming": {
                "FUN_08001cac": "calculateSumAndUpdateMemoryAddress_08001cac",
                "PTR_DAT_08001cbc": "memoryAddressPointer",
                "PTR_DAT_08001cc0": "bytePointer"
            },
            "code": "void calculateSumAndUpdateMemoryAddress_08001cac(void)\n{\n  uint8_t byteValue = *PTR_DAT_08001cc0;\n  int32_t* intPointer = (int32_t*)PTR_DAT_08001cbc;\n  *intPointer = (uint32_t)byteValue + *intPointer;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cac",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "calculateSumAndUpdateMemoryAddress_08001cac"
        },
        "FUN_08003f12": {
            "renaming": {
                "FUN_08003f12": "do_nothing_08003f12"
            },
            "code": "\nvoid do_nothing_08003f12(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f12",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f12"
        },
        "FUN_08005a18": {
            "renaming": {
                "FUN_08005a18": "calculate_value_if_not_zero_08005a18",
                "DAT_08005a3c": "data",
                "PTR_DAT_08005a40": "address",
                "calculate_value_at_offset_0800591e": "calculate_value_at_offset"
            },
            "code": "void calculate_value_if_not_zero_08005a18(void)\n{\n  if (DAT_08005a3c != 0) {\n    calculate_value_at_offset(PTR_DAT_08005a40);\n  }\n  return;\n}",
            "called": [
                "FUN_0800591e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a18",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "calculate_value_if_not_zero_08005a18"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "process_input_08003f18",
                "param_1": "input",
                "iVar1": "current_input",
                "process_input_08004df8": "process_input_helper",
                "do_nothing_08003f14": "do_nothing",
                "do_nothing_08003f12": "do_something",
                "execute_subtracted_input_function_08004e12": "execute_subtracted_input_function",
                "do_nothing_0800417a": "do_nothing",
                "do_nothing_08003f16": "do_something_else",
                "do_nothing_08004178": "do_another_thing"
            },
            "code": "void process_input_08003f18(int *input)\n{\n  int current_input = *input;\n  if (((*(uint *)(current_input + 0x10) & 2) != 0) && ((*(uint *)(current_input + 0xc) & 2) != 0)) {\n    *(undefined4 *)(current_input + 0x10) = 0xfffffffd;\n    *(undefined *)(input + 7) = 1;\n    if ((*(uint *)(*input + 0x18) & 3) == 0) {\n      process_input_08003f18_08004df8();\n      do_nothing(input);\n    }\n    else {\n      do_something(input);\n    }\n    *(undefined *)(input + 7) = 0;\n  }\n  current_input = *input;\n  if (((*(uint *)(current_input + 0x10) & 4) != 0) && ((*(uint *)(current_input + 0xc) & 4) != 0)) {\n    *(undefined4 *)(current_input + 0x10) = 0xfffffffb;\n    *(undefined *)(input + 7) = 2;\n    if ((*(uint *)(*input + 0x18) & 0x300) == 0) {\n      process_input_08003f18_08004df8(input);\n      do_nothing(input);\n    }\n    else {\n      do_something(input);\n    }\n    *(undefined *)(input + 7) = 0;\n  }\n  current_input = *input;\n  if (((*(uint *)(current_input + 0x10) & 8) != 0) && ((*(uint *)(current_input + 0xc) & 8) != 0)) {\n    *(undefined4 *)(current_input + 0x10) = 0xfffffff7;\n    *(undefined *)(input + 7) = 4;\n    if ((*(uint *)(*input + 0x1c) & 3) == 0) {\n      process_input_08003f18_08004df8(input);\n      do_nothing(input);\n    }\n    else {\n      do_something(input);\n    }\n    *(undefined *)(input + 7) = 0;\n  }\n  current_input = *input;\n  if (((*(uint *)(current_input + 0x10) & 0x10) != 0) && ((*(uint *)(current_input + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(current_input + 0x10) = 0xffffffef;\n    *(undefined *)(input + 7) = 8;\n    if ((*(uint *)(*input + 0x1c) & 0x300) == 0) {\n      process_input_08003f18_08004df8(input);\n      do_nothing(input);\n    }\n    else {\n      do_something(input);\n    }\n    *(undefined *)(input + 7) = 0;\n  }\n  current_input = *input;\n  if (((*(uint *)(current_input + 0x10) & 1) != 0) && ((*(uint *)(current_input + 0xc) & 1) != 0)) {\n    *(undefined4 *)(current_input + 0x10) = 0xfffffffe;\n    execute_subtracted_input_function(input);\n  }\n  current_input = *input;\n  if (((*(uint *)(current_input + 0x10) & 0x80) != 0) && ((*(uint *)(current_input + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(current_input + 0x10) = 0xffffff7f;\n    do_nothing(input);\n  }\n  current_input = *input;\n  if (((*(uint *)(current_input + 0x10) & 0x40) != 0) && ((*(uint *)(current_input + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(current_input + 0x10) = 0xffffffbf;\n    do_something_else(input);\n  }\n  current_input = *input;\n  if (((*(uint *)(current_input + 0x10) & 0x20) != 0) && ((*(uint *)(current_input + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(current_input + 0x10) = 0xffffffdf;\n    do_another_thing(input);\n  }\n  return;\n}\n",
            "called": [
                "FUN_08003f12",
                "FUN_0800417a",
                "FUN_08004df8",
                "FUN_08003f14",
                "FUN_08004e12",
                "FUN_08004178",
                "FUN_08003f16"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "FUN_08004e20"
            ],
            "imported": false,
            "current_name": "process_input_08003f18"
        },
        "FUN_08003f16": {
            "renaming": {
                "FUN_08003f16": "do_nothing_08003f16"
            },
            "code": "\nvoid do_nothing_08003f16(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f16",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f16"
        },
        "FUN_0800591e": {
            "renaming": {
                "FUN_0800591e": "calculate_value_at_offset_0800591e",
                "param_1": "base_address",
                "*(short *)(param_1 + 0x134)": "value_at_offset_1",
                "*(short *)(param_1 + 0x136)": "value_at_offset_2",
                "result": "result"
            },
            "code": "ushort calculate_value_at_offset_0800591e(int base_address) {\n    ushort value_at_offset_1 = *(ushort *)(base_address + 0x134);\n    ushort value_at_offset_2 = *(ushort *)(base_address + 0x136);\n    ushort result = (value_at_offset_1 + 0x40) - value_at_offset_2;\n    return result & 0x3f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800591e",
            "calling": [
                "FUN_08005a18"
            ],
            "imported": false,
            "current_name": "calculate_value_at_offset_0800591e"
        },
        "FUN_08002540": {
            "renaming": {
                "FUN_08002540": "set_bit_in_array_08002540",
                "param_1": "bit_index",
                "DAT_0800255c": "array_start"
            },
            "code": "void set_bit_in_array_08002540(uint bit_index) {\n  if (bit_index >= 0) {\n    int array_index = (bit_index >> 5) + 0x60;\n    int* array_ptr = (int*)(DAT_0800255c + array_index * 4);\n    int bit_mask = 1 << (bit_index & 0x1f);\n    *array_ptr = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002540",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_in_array_08002540"
        },
        "FUN_08006344": {
            "renaming": {
                "FUN_08006344": "process_input_08006344",
                "param_1": "input_length",
                "param_2": "input_byte",
                "param_3": "input_array",
                "iVar1": "array_index",
                "pbVar2": "current_byte",
                "pbVar3": "previous_byte",
                "uVar4": "result"
            },
            "code": "uint process_input_08006344(int input_length, byte input_byte, byte **input_array){\n    int array_index;\n    byte *current_byte;\n    byte *previous_byte;\n    uint result;\n    \n    previous_byte = input_array[2] + -1;\n    input_array[2] = previous_byte;\n    if(previous_byte >= -1 || ((int)input_array[6] <= (int)previous_byte && input_byte != 10)){\n        current_byte = *input_array;\n        *input_array = current_byte + 1;\n        *current_byte = input_byte;\n        return (uint)input_byte;\n    }\n    if(input_length != 0 && *(int *)(input_length + 0x18) == 0){\n        initialize_data_08006cb4();\n    }\n    if(input_array == (byte **)PTR_DAT_080069d8){\n        input_array = *(byte ***)(input_length + 4);\n    }\n    else if(input_array == (byte **)PTR_DAT_080069dc){\n        input_array = *(byte ***)(input_length + 8);\n    }\n    else if(input_array == (byte **)PTR_DAT_080069e0){\n        input_array = *(byte ***)(input_length + 0xc);\n    }\n    input_array[2] = input_array[6];\n    current_byte = (byte *)(uint)*(ushort *)(input_array + 3);\n    array_index = (int)current_byte << 0x1c;\n    if(((array_index < 0) && (current_byte = input_array[4], current_byte != (byte *)0x0)) || (array_index = process_data_080069e4(input_length,input_array,array_index,current_byte,previous_byte), array_index == 0)){\n        result = (uint)input_byte;\n        array_index = (int)*input_array - (int)input_array[4];\n        if(array_index < (int)input_array[5] || (array_index = execute_command_08006be0(input_length,input_array), array_index == 0)){\n            input_array[2] = input_array[2] + -1;\n            current_byte = *input_array;\n            *input_array = current_byte + 1;\n            *current_byte = input_byte;\n            if((byte *)(array_index + 1) != input_array[5]){\n                if(-1 < (int)((uint)*(ushort *)(input_array + 3) << 0x1f)){\n                    return result;\n                }\n                if(input_byte != 10){\n                    return result;\n                }\n            }\n            array_index = execute_command_08006be0(input_length,input_array);\n            if(array_index == 0){\n                return result;\n            }\n        }\n    }\n    return 0xffffffff;\n}",
            "called": [
                "FUN_080069e4",
                "FUN_08006be0",
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006344",
            "calling": [
                "FUN_08006370"
            ],
            "imported": false,
            "current_name": "process_input_08006344"
        },
        "FUN_080009c8": {
            "renaming": {
                "FUN_080009c8": "is_character_not_null_080009c8",
                "in_ZR": "character"
            },
            "code": "bool is_character_not_null_080009c8(char character) {\\n  compare_and_return();\\n  return character != \"\\0\";\\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "is_character_not_null_080009c8"
        },
        "FUN_08002db2": {
            "renaming": {
                "FUN_08002db2": "process_input_08002db2",
                "param_1": "input",
                "cVar1": "input_char",
                "puVar2": "input_ptr"
            },
            "code": "uint32_t process_input_08002db2(uint32_t **input)\n{\n  char input_char;\n  uint32_t *input_ptr;\n  input_char = *(char *)((int)input + 0x3d);\n  input_ptr = input[0xb];\n  if ((*(short *)(input + 10) == 0) && (input_char == '!')) {\n    if ((input_ptr == (uint32_t *)0x4) || ((input_ptr == (uint32_t *)0x8 || (input_ptr == (uint32_t *)0xffff0000)))) {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      **input = **input | 0x200;\n      input[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      if (*(char *)((int)input + 0x3e) == '@') {\n        *(undefined *)((int)input + 0x3e) = 0;\n        do_nothing_08002db0();\n      }\n      else {\n        *(undefined *)((int)input + 0x3e) = 0;\n        do_nothing_08002c4e();\n      }\n    }\n    else {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      input[0xc] = (uint32_t *)0x11;\n      *(undefined *)((int)input + 0x3e) = 0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      do_nothing_08002c4e();\n    }\n  }\n  else if ((input_char == '!') || ((*(char *)((int)input + 0x3e) == '@' && (input_char == '\"')))) {\n    if (*(short *)((int)input + 0x2a) == 0) {\n      (*input)[1] = (*input)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)input + 0x3e) == '@') {\n      if (input[0x14] == (uint32_t *)0x0) {\n        if (input[0x13] == (uint32_t *)0x1) {\n          (*input)[4] = (uint32_t)input[0x12] & 0xff;\n          input[0x14] = (uint32_t *)((int)input[0x14] + 2);\n        }\n        else {\n          (*input)[4] = (uint32_t)((int)input[0x12] << 0x10) >> 0x18;\n          input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n        }\n      }\n      else if (input[0x14] == (uint32_t *)0x1) {\n        (*input)[4] = (uint32_t)input[0x12] & 0xff;\n        input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n      }\n      else if (input[0x14] == (uint32_t *)0x2) {\n        if (*(char *)((int)input + 0x3d) == '\"') {\n          **input = **input | 0x100;\n        }\n        else if (*(char *)((int)input + 0x3d) == '!') {\n          input_ptr = input[9];\n          input[9] = (uint32_t *)((int)input_ptr + 1);\n          (*input)[4] = (uint32_t)*(byte *)input_ptr;\n          *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      input_ptr = input[9];\n      input[9] = (uint32_t *)((int)input_ptr + 1);\n      (*input)[4] = (uint32_t)*(byte *)input_ptr;\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c4e",
                "FUN_08002db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_08002db2"
        },
        "FUN_08001cc4": {
            "renaming": {
                "FUN_08001cc4": "get_pointer_value_08001cc4",
                "PTR_DAT_08001ccc": "pointer_data"
            },
            "code": "get_pointer_value_08001cc4() {\n    return *(undefined4 *)PTR_DAT_08001ccc;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cc4",
            "calling": [
                "FUN_08003c90",
                "FUN_080053d4",
                "FUN_08004b94",
                "FUN_08003688",
                "FUN_08001cd0",
                "FUN_08003afa",
                "FUN_08004478",
                "FUN_080043b4",
                "FUN_080020f0",
                "FUN_08001f84",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "get_pointer_value_08001cc4"
        },
        "FUN_08002db0": {
            "renaming": {
                "FUN_08002db0": "do_nothing_08002db0"
            },
            "code": "\nvoid do_nothing_08002db0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db0",
            "calling": [
                "FUN_08002efc",
                "FUN_08002db2"
            ],
            "imported": false,
            "current_name": "do_nothing_08002db0"
        },
        "FUN_08003ea0": {
            "renaming": {
                "FUN_08003ea0": "execute_if_both_flags_set_08003ea0",
                "param_1": "params",
                "**param_1": "param1",
                "(*param_1)[1]": "param2",
                "execute_function_if_not_null_08004d18()": "execute_not_null_function()",
                "(*param_1)[1] = 0xfffffffd;": "(*params)[1] = 0xfffffffd;",
                "DAT_08003ed4": "dat_ptr",
                "0x14": "offset",
                "0x20000": "value",
                "(int)param_1 + 0x11": "param_ptr_offset"
            },
            "code": "void execute_if_both_flags_set_08003ea0(uint **params){\n    uint param1 = **params;\n    uint param2 = (*params)[1];\n    if ((param1 & 2) && (param2 & 2)) {\n        execute_function_if_not_null_08004d18();\n        (*params)[1] = 0xfffffffd;\n    }\n    uint* DAT_08003ed4 = (uint*) (DAT_08003ed4 + 0x14);\n    *DAT_08003ed4 = 0x20000;\n    uint* param_ptr = (uint*) ((int)params + 0x11);\n    *param_ptr = 1;\n}",
            "called": [
                "FUN_08004d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ea0",
            "calling": [],
            "imported": false,
            "current_name": "execute_if_both_flags_set_08003ea0"
        },
        "FUN_0800306c": {
            "renaming": {
                "FUN_0800306c": "process_input_0800306c",
                "param_1": "input_data",
                "puVar1": "data_ptr",
                "PTR_DAT_0804a02c": "input_data[11]",
                "PTR_DAT_0804a024": "input_data[9]",
                "PTR_DAT_0804a030": "input_data[12]"
            },
            "code": "int process_input_0800306c(uint **input_data) {\n  uint *data_ptr;\n  data_ptr = PTR_DAT_0804a02c;\n  if (*(short *)((int)input_data + 42) == 3) {\n    if (((data_ptr == (uint *)0x4) || (data_ptr == (uint *)0x8)) || (data_ptr == (uint *)0xffff0000)) {\n      **input_data = **input_data & 0xfffffbff;\n    }\n    uint *ptr = PTR_DAT_0804a024;\n    PTR_DAT_0804a024 = (uint *)((int)ptr + 1);\n    *(char *)ptr = (char)(*input_data)[4];\n    *(short *)((int)input_data + 42) = *(short *)((int)input_data + 42) + -1;\n  }\n  else if (*(short *)((int)input_data + 42) == 2) {\n    if (((data_ptr == (uint *)0x4) || (data_ptr == (uint *)0x8)) || (data_ptr == (uint *)0xffff0000)) {\n      (*input_data)[1] = (*input_data)[1] & 0xfffffcff;\n      **input_data = **input_data | 0x200;\n    }\n    else {\n      if (data_ptr == (uint *)0x2) {\n        **input_data = **input_data | 0x400;\n      }\n      else {\n        **input_data = **input_data & 0xfffffbff;\n      }\n      (*input_data)[1] = (*input_data)[1] & 0xfffffcff;\n    }\n    uint *ptr1 = PTR_DAT_0804a024;\n    PTR_DAT_0804a024 = (uint *)((int)ptr1 + 1);\n    *(char *)ptr1 = (char)(*input_data)[4];\n    *(short *)((int)input_data + 42) = *(short *)((int)input_data + 42) + -1;\n    uint *ptr2 = PTR_DAT_0804a024;\n    PTR_DAT_0804a024 = (uint *)((int)ptr2 + 1);\n    *(char *)ptr2 = (char)(*input_data)[4];\n    *(short *)((int)input_data + 42) = *(short *)((int)input_data + 42) + -1;\n    *(undefined *)((int)input_data + 61) = 0x20;\n    PTR_DAT_0804a030 = (uint *)0x0;\n    if (*(char *)((int)input_data + 62) == '@') {\n      *(undefined *)((int)input_data + 62) = 0;\n      do_nothing_08002f9a();\n    }\n    else {\n      *(undefined *)((int)input_data + 62) = 0;\n      do_nothing_08002c50();\n    }\n  }\n  else {\n    uint *ptr = PTR_DAT_0804a024;\n    PTR_DAT_0804a024 = (uint *)((int)ptr + 1);\n    *(char *)ptr = (char)(*input_data)[4];\n    *(short *)((int)input_data + 42) = *(short *)((int)input_data + 42) + -1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c50",
                "FUN_08002f9a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800306c",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_0800306c"
        },
        "FUN_0800548c": {
            "renaming": {
                "FUN_0800548c": "is_combination_valid_0800548c",
                "param_1": "combination_index",
                "uVar1": "combined_bytes",
                "PTR_DAT_080054ac": "ptr_data",
                "byte": "index_byte",
                "DAT_080047e8": "combine_bytes"
            },
            "code": "bool is_combination_valid_0800548c(int combination_index) {\n  uint16_t combined_bytes = DAT_080047e8(get_PTR_DAT_080054ac(combination_index));\n  return (combined_bytes & 0x22) == 0x22;\n}",
            "called": [
                "FUN_080047e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800548c",
            "calling": [
                "FUN_080054d4",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "is_combination_valid_0800548c"
        },
        "FUN_08004848": {
            "renaming": {
                "FUN_08004848": "get_data_at_index_08004848",
                "param_1": "index",
                "DAT_08004870": "data_0",
                "DAT_08004880": "data_1",
                "DAT_08004874": "data_2",
                "DAT_08004878": "data_3",
                "DAT_0800487c": "data_4"
            },
            "code": "int get_data_at_index_08004848(int index) {\n  switch(index) {\n    case 0:\n      return DAT_08004870;\n    case 1:\n      return DAT_08004880;\n    case 2:\n      return DAT_08004874;\n    case 3:\n      return DAT_08004878;\n    case 4:\n      return DAT_0800487c;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004848",
            "calling": [
                "FUN_08005890",
                "FUN_08005848"
            ],
            "imported": false,
            "current_name": "get_data_at_index_08004848"
        },
        "FUN_08005d82": {
            "renaming": {
                "FUN_08005d82": "call_base_conversion_or_function_pointer_08005d82",
                "convert_base_or_call_function_pointer_08005d42": "convert_base_or_call_function_pointer"
            },
            "code": "void call_base_conversion_or_function_pointer_08005d82(void)\n{\n  convert_base_or_call_function_pointer();\n  return;\n}",
            "called": [
                "FUN_08005d42"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d82",
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "call_base_conversion_or_function_pointer_08005d82"
        },
        "FUN_08006f92": {
            "renaming": {
                "FUN_08006f92": "execute_with_result_and_store_08006f92",
                "param_1": "command",
                "param_2": "storage_address",
                "iVar1": "result",
                "uVar2": "flags",
                "bVar3": "command_failed"
            },
            "code": "void execute_with_result_and_store_08006f92(int command, int storage_address)\n{\n  int result = execute_and_store_result(command, (int)*(short *)(storage_address + 0xe));\n  bool command_failed = result == -1;\n  ushort flags = *(ushort *)(storage_address + 0xc);\n\n  if (command_failed) {\n    flags &= 0xefff;\n  }\n  else {\n    *(int *)(storage_address + 0x54) = result;\n    flags |= 0x1000;\n  }\n\n  *(ushort *)(storage_address + 0xc) = flags;\n}\n",
            "called": [
                "FUN_08007048"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f92",
            "calling": [],
            "imported": false,
            "current_name": "execute_with_result_and_store_08006f92"
        },
        "FUN_080012c0": {
            "renaming": {
                "FUN_080012c0": "decode_and_print_080012c0",
                "param_1": "address",
                "param_2": "bit_mask",
                "uVar1": "index",
                "decode_character_08005848": "decode_character",
                "decode_and_print_char_080012a2": "decode_and_print_char"
            },
            "code": "void decode_and_print_080012c0(int address, int bit_mask){\n                            uint index;\n                            for (index = 0; (int)index < 4; index++) {\n                                decode_character(*(undefined *)(address + index + 0xb), bit_mask >> (index & 0xff) & 1);\n                            }\n                            decode_and_print_080012c0_char(address);\n                            return;\n                        }",
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012c0",
            "calling": [
                "FUN_08001310",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "decode_and_print_080012c0"
        },
        "FUN_08001f80": {
            "renaming": {
                "FUN_08001f80": "get_value_from_offset_08001f80",
                "param_1": "base_address",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int get_value_from_offset_08001f80(int base_address)\n{\n    int value = *(int *)(base_address + 0x28);\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f80",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "get_value_from_offset_08001f80"
        },
        "FUN_08001f84": {
            "renaming": {
                "FUN_08001f84": "set_flag_if_not_set_08001f84",
                "param_1": "pointer_to_int",
                "param_2": "constant_value",
                "iVar1": "pointer_value_temp",
                "iVar3": "pointer_value",
                "local_14": "i"
            },
            "code": "int set_flag_if_not_set_08001f84(int *pointer_to_int, uint constant_value) {\n  int pointer_value = *pointer_to_int;\n  if ((*(uint *)(pointer_value + 8) & 1) == 0) {\n    *(uint *)(pointer_value + 8) = *(uint *)(pointer_value + 8) | 1;\n    for (uint i = (uint)((ulonglong)constant_value * (ulonglong)*(uint *)PTR_DAT_08001ffc >> 0x32); i != 0; i = i - 1) {\n    }\n    int pointer_value_new = get_pointer_value_08001cc4(pointer_to_int, constant_value, (int)((ulonglong)constant_value * (ulonglong)*(uint *)PTR_DAT_08001ffc));\n    do {\n      if ((*(uint *)(*pointer_to_int + 8) & 1) != 0) {\n        return 0;\n      }\n      int pointer_value_temp = get_pointer_value_08001cc4();\n    } while ((uint)(pointer_value_temp - pointer_value_new) < 3);\n    pointer_to_int[10] = pointer_to_int[10] | 0x10;\n    pointer_to_int[0xb] = pointer_to_int[0xb] | 1;\n    *(undefined *)(pointer_to_int + 9) = 0;\n    return 1;\n  }\n  else {\n    return 0;\n  }\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f84",
            "calling": [
                "FUN_08002004",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "set_flag_if_not_set_08001f84"
        },
        "FUN_08000bcc": {
            "renaming": {
                "FUN_08000bcc": "decode_and_process_data_08000bcc",
                "puVar1": "first_data",
                "puVar2": "second_data",
                "puVar3": "fourth_data",
                "uVar4": "pointer_value_2"
            },
            "code": "void decode_and_process_data_08000bcc() {\n  undefined *first_data = PTR_DAT_08000c90;\n  decode_character_08005848(*(undefined4 *)PTR_DAT_08000c90,0);\n  process_input_080057b4(*(undefined4 *)first_data,1);\n  \n  undefined *second_data = PTR_DAT_08000c94;\n  decode_character_08005848(*(undefined4 *)PTR_DAT_08000c94,0);\n  process_input_080057b4(*(undefined4 *)second_data,1);\n  \n  undefined *third_data = PTR_DAT_08000c98;\n  decode_character_08005848(*(undefined4 *)PTR_DAT_08000c98,0);\n  process_input_080057b4(*(undefined4 *)third_data,1);\n  \n  decode_character_08005848(*(undefined4 *)second_data,1);\n  \n  undefined *fourth_data = PTR_DAT_08000c9c;\n  decode_and_print_data_080013a4(PTR_DAT_08000c9c,8,2,0);\n  print_encoded_string_08001550(fourth_data,0,PTR_DAT_08000ca0);\n  decode_and_print_data_0800135a(fourth_data);\n  get_string_ending_08005c96(fourth_data,PTR_s_Reflow_08000ca4);\n  decode_and_print_08001366(fourth_data,0,1);\n  get_string_ending_08005c96(fourth_data,PTR_s_Oven_1_2_08000ca8);\n  decode_character_08005848(*(undefined4 *)second_data,0);\n  do_nothing_080058e8(0x9c4);\n  decode_and_print_data_0800135a(fourth_data);\n  process_data_08005a68(PTR_DAT_08000cac,0xe100,6);\n  decode_character_08005848(*(undefined4 *)third_data,1);\n  *(undefined4 *)PTR_DAT_08000cb0 = 2000;\n  undefined4 pointer_value_1 = get_pointer_value_and_return_080058e0();\n  *(undefined4 *)PTR_DAT_08000cb4 = pointer_value_1;\n  undefined4 pointer_value_2 = get_pointer_value_and_return_080058e0();\n  *(undefined4 *)PTR_DAT_08000cb8 = pointer_value_2;\n  print_error_if_not_initialized_08000aec(0);\n}",
            "called": [
                "FUN_08005848",
                "FUN_08001550",
                "FUN_080058e8",
                "FUN_08001366",
                "FUN_08005a68",
                "FUN_0800135a",
                "FUN_080058e0",
                "FUN_080057b4",
                "FUN_080013a4",
                "FUN_08005c96",
                "FUN_08000aec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000bcc",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "decode_and_process_data_08000bcc"
        },
        "FUN_0800281e": {
            "renaming": {
                "FUN_0800281e": "set_param_0800281e",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "is_shifted",
                "*(int *)(param_1 + 0x10)": "*(int *)(base_address + 0x10)"
            },
            "code": "void set_param_0800281e(int base_address, int value, int is_shifted) {\n  if (is_shifted == 0) {\n    *(int *)(base_address + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(base_address + 0x10) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800281e",
            "calling": [
                "FUN_08004c30"
            ],
            "imported": false,
            "current_name": "set_param_0800281e"
        },
        "FUN_08006198": {
            "renaming": {
                "FUN_08006198": "execute_functions_08006198"
            },
            "code": "void execute_functions_08006198(void)\n{\n  int num_functions = (int)PTR_DAT_080061d4 - (int)PTR_DAT_080061d0;\n  undefined *function_ptr = PTR_DAT_080061d0;\n  for (int i = 0; i < num_functions / 4; i++) {\n    (**(code **)(function_ptr + i * 4))();\n  }\n  do_nothing_08007328();\n  num_functions = (int)PTR_DAT_080061dc - (int)PTR_DAT_080061d8;\n  function_ptr = PTR_DAT_080061d8;\n  for (int i = 0; i < num_functions / 4; i++) {\n    (**(code **)(function_ptr + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_08007328",
                "FUN_08005f5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006198",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "execute_functions_08006198"
        },
        "FUN_08007048": {
            "renaming": {
                "FUN_08007048": "execute_and_store_result_08007048",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "data_ptr",
                "iVar2": "status"
            },
            "code": "void execute_and_store_result_08007048(int* result, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n  undefined* data_ptr = PTR_DAT_08007068;\n  *(undefined4*)PTR_DAT_08007068 = 0;\n  int status = return_zero_08005728(arg1, arg2, arg3, arg3, arg3);\n  if ((status == -1) && (*(int*)data_ptr != 0)) {\n    *result = *(int*)data_ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08005728"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007048",
            "calling": [
                "FUN_08006f5a",
                "FUN_08006f92"
            ],
            "imported": false,
            "current_name": "execute_and_store_result_08007048"
        },
        "FUN_08003c50": {
            "renaming": {
                "FUN_08003c50": "get_shifted_value_from_pointer_08003c50",
                "uVar1": "value",
                "PTR_DAT_08003c6c": "pointer_array",
                "DAT_08003c68": "data_pointer"
            },
            "code": "unsigned int get_shifted_value_from_pointer_08003c50() {\n  unsigned int value = get_value_from_pointer();\n  unsigned int shift = (*(int *)(DAT_08003c68 + 4) << 0x15) >> 0x1d;\n  unsigned int shifted_value = value >> PTR_DAT_08003c6c[shift];\n  return shifted_value;\n}",
            "called": [
                "FUN_08003c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c50",
            "calling": [
                "FUN_08004204"
            ],
            "imported": false,
            "current_name": "get_shifted_value_from_pointer_08003c50"
        },
        "FUN_080065c0": {
            "renaming": {
                "FUN_080065c0": "encode_data_080065c0",
                "param_1": "data",
                "param_2": "out_size",
                "param_3": "out_data_size",
                "param_4": "padding_char",
                "param_5": "encoder",
                "iVar1": "status",
                "uVar2": "max_size",
                "uVar3": "data_type",
                "bVar4": "is_data_type_4",
                "uVar5": "padding",
                "uVar6": "padding_size",
                "uVar7": "out_data_len",
                "encoded_data_len": "encoded_data_len"
            },
            "code": "uint32_t encode_data_080065c0(uint32_t data, uint32_t *out_size, uint32_t *out_data_size, uint32_t padding_char, code *encoder) {\n  int i = 0;\n  uint32_t max_size = out_size[2];\n  if ((int)out_size[2] < (int)out_size[0]) {\n    max_size = out_size[0];\n  }\n  *out_data_size = max_size;\n  if (*(char *)((int)out_size + 0x43) != '\\0') {\n    *out_data_size = max_size + 1;\n  }\n  if ((int)(data << 0x1a) < 0) {\n    *out_data_size = *out_data_size + 2;\n    *(undefined *)((int)out_size + 0x44) = *(undefined *)((int)out_size + 0x45);\n    *(undefined *)((int)out_size + 0x43) = 0x30;\n  }\n  uint32_t data_type = data & 6;\n  if (data_type == 0) {\n    for (; (int)data_type < (int)(out_size[1] - *out_data_size); data_type++) {\n      int status = (*encoder)(data, padding_char, (int)out_size + 0x19, 1);\n      if (status == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  uint32_t padding = (uint32_t)*(byte *)((int)out_size + 0x43);\n  if (padding != 0) {\n    padding = 1;\n  }\n  uint32_t padding_size = padding;\n  if ((int)(data << 0x1a) < 0) {\n    padding_size = padding + 2;\n  }\n  int status = (*encoder)(data, padding_char, (int)out_size + 0x43, padding_size);\n  if (status == -1) {\n    return 0xffffffff;\n  }\n  uint32_t out_data_len = out_size[1];\n  bool is_data_type_4 = (data & 6) != 4;\n  if (is_data_type_4) {\n    out_data_len = 0;\n  }\n  if (!is_data_type_4) {\n    out_data_len = out_data_len - *out_data_size;\n    out_data_len = out_data_len & ~((int)out_data_len >> 0x1f);\n  }\n  if ((int)out_size[2] < (int)out_size[0]) {\n    out_data_len = out_data_len + (out_size[0] - out_size[2]);\n  }\n  uint32_t encoded_data_len = 0;\n  while (true) {\n    if (out_data_len == encoded_data_len) {\n      return 0;\n    }\n    status = (*encoder)(data, padding_char, (int)out_size + 0x1a, 1);\n    if (status == -1) {\n      break;\n    }\n    encoded_data_len++;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080065c0",
            "calling": [
                "FUN_080066b0"
            ],
            "imported": false,
            "current_name": "encode_data_080065c0"
        },
        "FUN_080054d4": {
            "renaming": {
                "FUN_080054d4": "check_combination_080054d4",
                "param_1": "num_combinations",
                "param_2": "combination",
                "param_3": "valid_combination",
                "param_4": "validation_result",
                "iVar1": "is_valid"
            },
            "code": "int check_combination_080054d4(int num_combinations, char* combination, int valid_combination, int validation_result) {\n  \n  if (num_combinations == 0) {\n    return -1;\n  }\n  \n  int is_valid = is_combination_valid();\n  \n  if (is_valid == 0) {\n    *combination = *(char *)(num_combinations + 0x45);\n    validate_input(*(int *)(PTR_DAT_0800550c + (uint)*(byte *)(num_combinations + 0x44) * 4),num_combinations + 0x45,1,PTR_DAT_0800550c,validation_result);\n    return 0;\n  }\n  \n  return -1;\n}",
            "called": [
                "FUN_080045a2",
                "FUN_0800548c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054d4",
            "calling": [
                "FUN_0800598a"
            ],
            "imported": false,
            "current_name": "check_combination_080054d4"
        },
        "FUN_08004d40": {
            "renaming": {
                "FUN_08004d40": "infinite_loop_08004d40"
            },
            "code": "void infinite_loop_08004d40(void)\n{\n  while(true) {\n  }\n}",
            "called": [
                "FUN_08004d40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d40",
            "calling": [
                "FUN_08004d40",
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "infinite_loop_08004d40"
        },
        "FUN_08004d44": {
            "renaming": {
                "FUN_08004d44": "set_bit_and_mask_08004d44",
                "puVar1": "ptr",
                "DAT_08004d84": "data",
                "DAT_08004d88": "mask"
            },
            "code": "void set_bit_and_mask_08004d44(uint *DAT_08004d84){\n  uint *ptr = DAT_08004d84;\n  *ptr |= 1;\n  ptr[1] &= 0xff80ffff;\n  *ptr &= 0xfef6ffff;\n  *ptr &= 0xfffbffff;\n  ptr[1] &= DAT_08004d88;\n  ptr[2] = 0x9f0000;\n  *(uint *)(DAT_08004d8c + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d44",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "set_bit_and_mask_08004d44"
        },
        "FUN_0800282c": {
            "renaming": {
                "FUN_0800282c": "updateAndProcessResponse_0800282c",
                "param_1": "bitmask",
                "*(uint *)(DAT_08002844 + 0x14)": "responseFlag",
                "checkAndProcessResponse_080060e4": "checkAndProcessResponse"
            },
            "code": "void updateAndProcessResponse_0800282c(uint bitmask)\n{\n    uint **(uint *)(DAT_08002844 + 0x14) = (uint *)(DAT_08002844 + 0x14);\n    if ((**(uint *)(DAT_08002844 + 0x14) & bitmask) != 0)\n    {\n        **(uint *)(DAT_08002844 + 0x14) = bitmask;\n        checkAndProcessResponse();\n    }\n    return;\n}",
            "called": [
                "FUN_080060e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800282c",
            "calling": [],
            "imported": false,
            "current_name": "updateAndProcessResponse_0800282c"
        },
        "FUN_080015b2": {
            "renaming": {
                "FUN_080015b2": "decode_and_check_bits_080015b2",
                "*param_1": "*data",
                "uVar2": "i",
                "uVar3": "result",
                "iVar1": "bit"
            },
            "code": "uint decode_and_check_bits_080015b2(undefined *data){\n  int bit;\n  uint result = 0;\n  decode_character_08005848(data[1],0);\n  for (int i = 0x1f; -1 < i; i--){\n    decode_character_08005848(data[2],1);\n    bit = check_bit_at_offset_and_return_08005890(*data);\n    if (bit != 0){\n      result |= 1 << (i & 0xff);\n    }\n    decode_character_08005848(data[2],0);\n  }\n  decode_character_08005848(data[1],1);\n  return result;\n}",
            "called": [
                "FUN_08005890",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b2",
            "calling": [
                "FUN_080015f8"
            ],
            "imported": false,
            "current_name": "decode_and_check_bits_080015b2"
        },
        "FUN_0800040c": {
            "renaming": {
                "FUN_0800040c": "shift_and_concatenate_0800040c",
                "param_1": "input",
                "uVar1": "result_low",
                "uVar2": "shift_amount_2",
                "iVar3": "leading_zeroes",
                "uVar4": "shift_amount_1",
                "in_r12": "mask",
                "bVar5": "is_negative_1",
                "bVar6": "is_zero",
                "bVar7": "is_negative_2"
            },
            "code": "unsigned long long shift_and_concatenate_0800040c(uint input)\n{\n  unsigned int leading_zeroes = 0;\n  unsigned int shift_amount_1 = 0;\n  unsigned int shift_amount_2 = 0;\n  unsigned int mask = 0;\n  unsigned long long result = 0;\n\n  if (input == 0) {\n    return 0;\n  }\n\n  leading_zeroes = count_leading_zeroes(input);\n  shift_amount_1 = leading_zeroes + 21;\n\n  if (shift_amount_1 < 32) {\n    shift_amount_2 = shift_amount_1 - 12;\n    mask = (1 << shift_amount_1) - 1;\n    result = ((unsigned long long)input << shift_amount_1) | ((input >> shift_amount_2) & ~mask);\n  }\n  else {\n    shift_amount_2 = 32 - shift_amount_1;\n    result = ((unsigned long long)input << shift_amount_1) | (0xffffffff >> shift_amount_2);\n    result <<= shift_amount_2;\n  }\n\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800040c",
            "calling": [
                "FUN_080015f8",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08000cd0",
                "FUN_08001918"
            ],
            "imported": false,
            "current_name": "shift_and_concatenate_0800040c"
        },
        "FUN_08004df4": {
            "renaming": {
                "FUN_08004df4": "subtract_four_from_input_08004df4",
                "param_1": "input_value",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int subtract_four_from_input_08004df4(int input_value)\n{\n    int result = input_value - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df4",
            "calling": [
                "FUN_08004df8",
                "FUN_08004e12"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_08004df4"
        },
        "FUN_08004bb0": {
            "renaming": {
                "FUN_08004bb0": "set_bits_08004bb0",
                "param_1": "bit_index",
                "param_2": "val1",
                "param_3": "val2",
                "uVar1": "flag",
                "local_20": "mask",
                "local_1c": "ptr1",
                "local_18": "ptr2",
                "local_14": "mask2"
            },
            "code": "void set_bits_08004bb0(uint32_t bit_index, uint32_t val1, uint32_t val2)\n{\n  uint32_t flag = set_flag(bit_index);\n  uint32_t mask = 1 << (bit_index & 0xf) & 0xffff;\n  uint32_t mask2 = 0xf8ffffff;\n  uint32_t *ptr1 = (uint32_t *)(DAT_08004c28 + 0x18);\n  uint32_t *ptr2 = (uint32_t *)(DAT_08004c2c + 4);\n  *ptr1 |= 1;\n  if (((bit_index - 0xd) & 0xff) < 2) {\n    *ptr2 = (*ptr2 & mask2) | 0x4000000;\n  }\n  if ((bit_index == 0xf) || (bit_index == 0x13) || (bit_index == 0x14)) {\n    *ptr2 = (*ptr2 & mask2) | 0x2000000;\n  }\n  update_bits(flag, &mask);\n  return;\n}",
            "called": [
                "FUN_08004884",
                "FUN_08002624"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bb0",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "set_bits_08004bb0"
        },
        "FUN_08004df8": {
            "renaming": {
                "FUN_08004df8": "process_input_08004df8",
                "param_1": "input",
                "iVar1": "sub_result",
                "subtract_four_from_input_08004df4": "subtract_four_from_input",
                "code": "code_ptr",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void process_input_08004df8(int input) {\n  int sub_result = subtract_four_from_input();\n  code* function_ptr = *(code**)(sub_result + 0x4c);\n  char flag = *(char*)(input + 0x1c);\n  if (function_ptr != nullptr && flag == '\\x01') {\n    (*function_ptr)(sub_result, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08004df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df8",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "process_input_08004df8"
        },
        "FUN_08001510": {
            "renaming": {
                "FUN_08001510": "decode_and_print_data_08001510",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "param_2",
                "param_4": "max_value",
                "param_5": "param_4",
                "param_6": "param_5",
                "param_7": "param_6",
                "PTR_PTR_decode_and_print_0800134e_1_0800154c": "decode_and_print_value_1",
                "decode_and_print_080014ba": "decode_and_print_value_2"
            },
            "code": "void decode_and_print_data_08001510(undefined4 *data, undefined4 data_size, undefined4 param_2, undefined4 max_value, undefined4 param_4, undefined param_5, undefined param_6, undefined param_7) {\n    data[1] = 0;\n    *data = PTR_PTR_decode_and_print_0800134e_1_0800154c;\n    decode_and_print_value_2(data, 1, param_2, max_value, param_4, param_5, param_6, param_7, 0, 0, 0, 0);\n}\n",
            "called": [
                "FUN_080014ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001510",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "decode_and_print_data_08001510"
        },
        "FUN_08002af8": {
            "renaming": {
                "FUN_08002af8": "process_input_08002af8",
                "param_1": "input_ptr",
                "param_2": "input_data",
                "param_3": "data_count",
                "param_4": "output_ptr",
                "uVar1": "result",
                "puVar2": "ptr1"
            },
            "code": "int process_input_08002af8(uint **input_ptr, uint *input_data, int data_count, uint *output_ptr) {\n  int result;\n  uint *ptr1;\n\n  if (*(char *)((int)input_ptr + 0x3d) == '(') {\n    if (input_data == NULL) {\n      result = 1;\n    }\n    else if (data_count == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_ptr + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_ptr + 0xf) = 1;\n      ptr1 = *input_ptr;\n      if ((*ptr1 & 1) == 0) {\n        *ptr1 = *ptr1 | 1;\n      }\n      **input_ptr = **input_ptr & 0xfffff7ff;\n      *(undefined *)((int)input_ptr + 0x3d) = 0x29;\n      *(undefined *)((int)input_ptr + 0x3e) = 0x20;\n      result = 0;\n      input_ptr[0x10] = NULL;\n      input_ptr[9] = input_data;\n      *(short *)((int)input_ptr + 0x2a) = (short)data_count;\n      input_ptr[0xb] = output_ptr;\n      *(undefined2 *)(input_ptr + 10) = *(undefined2 *)((int)input_ptr + 0x2a);\n      *(undefined *)(input_ptr + 0xf) = 0;\n      (*input_ptr)[1] = (*input_ptr)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002af8",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": false,
            "current_name": "process_input_08002af8"
        },
        "FUN_080028de": {
            "renaming": {
                "FUN_080028de": "process_input_080028de",
                "param_1": "input",
                "puVar1": "flag_ptr"
            },
            "code": "uint32_t process_input_080028de(uint32_t **input)\n{\n  uint32_t *flag_ptr = input[11];\n  if ((*(char *)((int)input + 0x3d) == '\"') && ((input[20] != (uint32_t *)0x0 || (*(char *)((int)input + 0x3e) != '@')))) {\n    if ((input[20] == (uint32_t *)0x0) && (input[4] == (uint32_t *)0xc000)) {\n      **input = **input | 0x100;\n      input[20] = (uint32_t *)((int)input[20] + 1);\n    }\n    else {\n      if (*(short *)((int)input + 0x2a) == 0) {\n        **input = **input | 0x200;\n      }\n      else if (*(short *)((int)input + 0x2a) == 1) {\n        if (flag_ptr == (uint32_t *)0xffff0000) {\n          **input = **input & 0xfffffbff;\n          flag_ptr = *input;\n          if ((flag_ptr[1] & 0x800) == 0) {\n            *flag_ptr = *flag_ptr | 0x200;\n          }\n          else {\n            *flag_ptr = *flag_ptr & 0xfffffbff;\n          }\n        }\n        else if (((flag_ptr == (uint32_t *)0x4) || (flag_ptr == (uint32_t *)0x8)) || (input[12] == (uint32_t *)0x12)) {\n          **input = **input & 0xfffffbff;\n          **input = **input | 0x200;\n        }\n        else if (input[11] == (uint32_t *)0x2) {\n          **input = **input | 0x400;\n        }\n        else {\n          **input = **input & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)input + 0x2a) == 2) {\n        if (input[11] == (uint32_t *)0x2) {\n          **input = **input | 0x400;\n        }\n        else {\n          **input = **input | 0x800;\n          **input = **input & 0xfffffbff;\n        }\n        flag_ptr = *input;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      else {\n        **input = **input | 0x400;\n        flag_ptr = *input;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      input[20] = (uint32_t *)0x0;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028de",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_080028de"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "set_control_bits_08002848",
                "param_1": "control_data",
                "*(char *)((int)param_1 + 0x3e)": "control_char",
                "param_1[0]": "control_word",
                "param_1[0x11]": "control_bit",
                "param_1[0x14]": "control_mode",
                "*(char *)((int)param_1 + 0x3d)": "control_char_2",
                "*(uint *)(*param_1 + 0x10)": "control_bits"
            },
            "code": "int set_control_bits_08002848(int *control_data)\n{\n    char control_char = *(char *)((int)control_data + 0x3e);\n    int control_word = control_data[0];\n    int control_bit = control_data[0x11];\n    \n    if (control_char == '@') {\n        if (control_data[0x14] == 0) {\n            control_data[4] = control_bit & 0xfe;\n        }\n        else {\n            control_data[4] = control_bit & 0xffU | 1;\n        }\n    }\n    else if (control_data[4] == 0x4000) {\n        char control_char_2 = *(char *)((int)control_data + 0x3d);\n        if (control_char_2 == '!') {\n            control_data[4] = control_bit & 0xfe;\n        }\n        else {\n            control_data[4] = control_bit & 0xffU | 1;\n        }\n    }\n    else if (control_data[0x14] == 0) {\n        control_data[4] = (control_bit << 0x10) >> 0x17 & 6 | 0xf0;\n    }\n    else if (control_data[0x14] == 1) {\n        control_data[4] = (control_bit << 0x10) >> 0x17 & 6 | 0xf1;\n    }\n    \n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "set_control_bits_08002848"
        },
        "FUN_08004e70": {
            "renaming": {
                "FUN_08004e70": "subtract_four_from_input_08004e70",
                "param_1": "input",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int subtract_four_from_input_08004e70(int input){\n  int result = input - 4;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e70",
            "calling": [
                "FUN_08004ef4",
                "FUN_08004e74",
                "FUN_08004ec4"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_08004e70"
        },
        "FUN_080020f0": {
            "renaming": {
                "FUN_080020f0": "check_and_update_flag_080020f0",
                "param_1": "ptr_param_1",
                "iVar1": "ptr_iVar1",
                "iVar2": "ptr_iVar2"
            },
            "code": "int check_and_update_flag_080020f0(int *ptr_param_1)\n{\n  int ptr_iVar1;\n  int ptr_iVar2;\n  ptr_iVar2 = *ptr_param_1;\n  if ((*(uint *)(ptr_iVar2 + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(ptr_iVar2 + 8) = *(uint *)(ptr_iVar2 + 8) & 0xfffffffe;\n  ptr_iVar2 = get_pointer_value();\n  do {\n    if ((*(uint *)(*ptr_param_1 + 8) & 1) == 0) {\n      return 0;\n    }\n    ptr_iVar1 = get_pointer_value();\n  } while ((uint)(ptr_iVar1 - ptr_iVar2) < 3);\n  ptr_param_1[10] = ptr_param_1[10] | 0x10;\n  ptr_param_1[0xb] = ptr_param_1[0xb] | 1;\n  return 1;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080020f0",
            "calling": [
                "FUN_08002348",
                "FUN_0800213c",
                "FUN_0800224c",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "check_and_update_flag_080020f0"
        },
        "FUN_08006e10": {
            "renaming": {
                "FUN_08006e10": "allocate_memory_and_set_flags_08006e10",
                "param_1": "memory_address",
                "param_2": "memory_block_info",
                "uVar1": "flags",
                "iVar2": "block_size",
                "local_18": "original_memory_address",
                "local_14": "original_memory_block_info"
            },
            "code": "void allocate_memory_and_set_flags_08006e10(int memory_address, int *memory_block_info)\n{\n  ushort flags;\n  int block_size;\n  int original_memory_address;\n  int *original_memory_block_info;\n  \n  if ((int)(memory_block_info[3] << 0x1e) >= 0) {\n    original_memory_address = memory_address;\n    original_memory_block_info = memory_block_info;\n    flags = set_memory_flag_08007004_and_check_08006dc8(memory_address, memory_block_info, &original_memory_address, &original_memory_block_info);\n    block_size = allocate_memory_block_08006288(memory_address, original_memory_address);\n    if (block_size != 0) {\n      *(undefined **)(memory_address + 0x28) = PTR_LAB_08006c34_1_08006e8c;\n      *memory_block_info = block_size;\n      memory_block_info[3] |= 0x80;\n      memory_block_info[4] = block_size;\n      memory_block_info[5] = original_memory_address;\n      if ((original_memory_block_info != (int *)0x0) && (return_value_if_error_08007028(memory_address, (int)*(short *)((int)memory_block_info + 0xe)) != 0)) {\n        memory_block_info[3] &= 0xfffc | 1;\n      }\n      memory_block_info[3] |= flags;\n      return;\n    }\n    if ((short)memory_block_info[3] << 0x16 < 0) {\n      return;\n    }\n    memory_block_info[3] &= 0xfffc | 2;\n  }\n  *memory_block_info = (int)memory_block_info + 0x47;\n  memory_block_info[4] = (int)memory_block_info + 0x47;\n  memory_block_info[5] = 1;\n  return;\n}",
            "called": [
                "FUN_08006dc8",
                "FUN_08007028",
                "FUN_08006288"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e10",
            "calling": [
                "FUN_080069e4"
            ],
            "imported": false,
            "current_name": "allocate_memory_and_set_flags_08006e10"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e74": "process_input_08004e74",
                "param_1": "input_address",
                "param_2": "zero_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "iVar1": "subtracted_four"
            },
            "code": "void process_input_08004e74(int input_address, int zero_param, int third_param, undefined4 fourth_param) {\n  int subtracted_four = subtract_four_from_input();\n  if (third_param == *(int *)(input_address + 0xc)) {\n    if (zero_param == 0) {\n      *(undefined *)(subtracted_four + 0x88) = 0;\n      *(undefined *)(subtracted_four + 0x5c) = 0;\n      if (*(code **)(subtracted_four + 100) != (code *)0x0) {\n        (**(code **)(subtracted_four + 100))();\n      }\n      process_input_08004e74_08002af8(input_address, subtracted_four + 0x68, *(undefined *)(subtracted_four + 0x88), 8);\n      return;\n    }\n    *(undefined *)(subtracted_four + 0x5c) = 1;\n    check_and_set_params(input_address, subtracted_four + 0x68, 0x20, 8, fourth_param);\n  }\n  return;\n}",
            "called": [
                "FUN_08002af8",
                "FUN_08002b84",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "FUN_08002cf2"
            ],
            "imported": false,
            "current_name": "process_input_08004e74"
        },
        "FUN_08004c30": {
            "renaming": {
                "FUN_08004c30": "set_param_based_on_value_08004c30",
                "param_1": "addr",
                "param_2": "val",
                "param_3": "value",
                "param_4": "param",
                "set_param_0800281e": "set_param"
            },
            "code": "void set_param_based_on_value_08004c30(undefined4 addr, undefined2 val, int value, undefined4 param){ \\n\\\n                            if (value == 0){ \\n\\\n                                set_param_0800281e(addr, val, 0, param, param); \\n\\\n                            } \\n\\\n                            else{ \\n\\\n                                set_param_0800281e(addr, val, 1, param, param); \\n\\\n                            } \\n\\\n                        }",
            "called": [
                "FUN_0800281e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c30",
            "calling": [
                "FUN_08005848"
            ],
            "imported": false,
            "current_name": "set_param_based_on_value_08004c30"
        },
        "FUN_08006f38": {
            "renaming": {
                "FUN_08006f38": "process_input_and_update_08006f38",
                "param_1": "input_buffer",
                "param_2": "input_length",
                "iVar1": "result",
                "uVar2": "updated_value",
                "bVar3": "is_positive"
            },
            "code": "void process_input_and_update_08006f38(uint8_t *input_buffer, int input_length)\n{\n  int result = process_input(input_buffer, *(short *)(input_length + 0xe));\n  bool is_positive = result >= 0;\n  uint32_t updated_value;\n  if (is_positive) {\n    updated_value = *(uint32_t *)(input_length + 0x54) + result;\n  }\n  else {\n    updated_value = *(uint16_t *)(input_length + 0xc) & 0xffffefff;\n  }\n  if (is_positive) {\n    *(uint32_t *)(input_length + 0x54) = updated_value;\n  }\n  else {\n    *(uint16_t *)(input_length + 0xc) = (uint16_t)updated_value;\n  }\n  return;\n}\n",
            "called": [
                "FUN_0800706c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f38",
            "calling": [],
            "imported": false,
            "current_name": "process_input_and_update_08006f38"
        },
        "FUN_08004cce": {
            "renaming": {
                "FUN_08004cce": "find_matching_char_08004cce",
                "param_1": "input_char",
                "uVar1": "matching_char",
                "find_matching_char_in_string_08004cb2": "find_matching_char_in_string"
            },
            "code": "int find_matching_char_08004cce(int input_char) {\n  if (input_char == -1) {\n    return -1;\n  }\n  int matching_char = find_matching_char_08004cce_in_string();\n  return matching_char;\n}",
            "called": [
                "FUN_08004cb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cce",
            "calling": [
                "FUN_08004948",
                "FUN_0800492c",
                "FUN_08004b3c",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "find_matching_char_08004cce"
        },
        "FUN_08006eac": {
            "renaming": {
                "FUN_08006eac": "do_nothing_08006eac"
            },
            "code": "\nvoid do_nothing_08006eac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eac",
            "calling": [
                "FUN_080061f0",
                "FUN_08006288"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eac"
        },
        "FUN_08006eae": {
            "renaming": {
                "FUN_08006eae": "do_nothing_08006eae"
            },
            "code": "\nvoid do_nothing_08006eae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eae",
            "calling": [
                "FUN_080061f0",
                "FUN_08006288"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eae"
        },
        "FUN_08005f5c": {
            "renaming": {
                "FUN_08005f5c": "do_nothing_08005f5c"
            },
            "code": "\nvoid do_nothing_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5c",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "do_nothing_08005f5c"
        },
        "FUN_08003ad4": {
            "renaming": {
                "FUN_08003ad4": "validate_and_write_08003ad4",
                "param_1": "memory",
                "param_2": "memory_size",
                "puVar1": "memory_pointer",
                "iVar2": "pointer_value",
                "iVar3": "current_pointer_value",
                "uVar4": "calculated_result",
                "DAT_08003c34": "memory_pointer",
                "DAT_08003c38": "memory_value"
            },
            "code": "int validate_and_write_08003ad4(uint *memory, uint memory_size)\n{\n    uint *DAT_08003c34;\n    int time_elapsed;\n    uint calculated_result;\n\n    DAT_08003c34 = memory_size;\n    if (((*memory_size & 7) < memory) &&\n       (*memory_size = *memory_size & 0xfffffff8 | memory, memory != (*DAT_08003c34 & 7))) {\n        return 1;\n    }\n    if ((*memory & 2) != 0) {\n        DAT_08003c38[1] = DAT_08003c38[1] & 0xffffff0f | memory[2];\n    }\n    if ((*memory & 1) != 0) {\n        uint DAT_08003c38 = memory[1];\n        if (DAT_08003c38 == 1) {\n            if ((*DAT_08003c38 & 0x20000) == 0) {\n                return 1;\n            }\n        }\n        else if ((DAT_08003c38 != 2) && ((*DAT_08003c38 & 2) == 0)) {\n            return 1;\n        }\n        DAT_08003c38[1] = DAT_08003c38 | DAT_08003c38[1] & 0xfffffffc;\n        int pointer_value = get_pointer_value_08001cc4();\n        if (memory[1] == 1) {\n            while ((DAT_08003c38[1] & 0xc) != 4) {\n                int current_pointer_value = get_pointer_value_08001cc4();\n                if (5000 < (uint)(current_pointer_value - pointer_value)) {\n                    return 3;\n                }\n            }\n        }\n        else if (memory[1] == 2) {\n            while ((DAT_08003c38[1] & 0xc) != 8) {\n                int current_pointer_value = get_pointer_value_08001cc4();\n                if (5000 < (uint)(current_pointer_value - pointer_value)) {\n                    return 3;\n                }\n            }\n        }\n        else {\n            while ((DAT_08003c38[1] & 0xc) != 0) {\n                int current_pointer_value = get_pointer_value_08001cc4();\n                if (5000 < (uint)(current_pointer_value - pointer_value)) {\n                    return 3;\n                }\n            }\n        }\n    }\n    DAT_08003c34 = memory_size;\n    if ((memory < (*memory_size & 7)) &&\n       (*memory_size = *memory_size & 0xfffffff8 | memory, memory != (*DAT_08003c34 & 7))) {\n        return 1;\n    }\n    if ((*memory & 4) != 0) {\n        DAT_08003c38[1] = DAT_08003c38[1] & 0xfffff8ff | memory[3];\n    }\n    if ((*memory & 8) != 0) {\n        DAT_08003c38[1] = DAT_08003c38[1] & 0xffffc7ff | memory[4] << 3;\n    }\n    calculated_result = calculate_result_08003a68();\n    *(uint *)PTR_DAT_08003c40 = calculated_result >> PTR_DAT_08003c3c[(DAT_08003c38[1] << 0x18) >> 0x1c];\n    validate_and_write_08003ad4_to_memory_08001c3c(0xf);\n    return 0;\n}",
            "called": [
                "FUN_08003afa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ad4",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "validate_and_write_08003ad4"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "set_bit_08004110",
                "param_1": "data",
                "param_2": "bit_position",
                "param_3": "bit_value",
                "*(uint *)(param_1 + 0x20)": "*data",
                "*(uint *)(param_1 + 0x20) & ~(4 << (param_2 & 0xff))": "mask",
                "param_3 << (param_2 & 0xff)": "bit_value << (bit_position & 0xff)"
            },
            "code": "void set_bit_08004110(uint32_t *data, uint8_t bit_position, uint32_t bit_value) {\n    uint32_t mask = ~(4 << (bit_position & 0xff));\n    *data = (*data & mask) | (bit_value << (bit_position & 0xff));\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "FUN_0800412c"
            ],
            "imported": false,
            "current_name": "set_bit_08004110"
        },
        "FUN_08004ce2": {
            "renaming": {
                "FUN_08004ce2": "compare_int_with_string_08004ce2",
                "param_1": "num",
                "param_2": "str",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "int compare_int_with_string_08004ce2(int num, char *str)\n{\n    if (num == -1) {\n        return 0;\n    }\n    while (*str != -1) {\n        if (num == *str) {\n            return 1;\n        }\n        str += 12;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ce2",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "compare_int_with_string_08004ce2"
        },
        "FUN_08005568": {
            "renaming": {
                "FUN_08005568": "update_device_info_08005568",
                "param_1": "device_info_address",
                "param_2": "device_info_value",
                "bVar1": "device_index",
                "PTR_DAT_080055b0": "DEVICE_INFO_VALUES_START",
                "PTR_DAT_080055b4": "DEVICE_INFO_ADDRESSES_START",
                "PTR_DAT_080055b8": "DEVICE_INFO_REGISTER_START",
                "write_to_memory_08002494": "write_to_memory",
                "set_bit_at_index_080024f8": "set_bit_at_index",
                "initialize_device_0800455a": "initialize_device",
                "*(byte *)(param_1 + 0x44)": "*(uint8_t *)(device_info_address + DEVICE_INDEX_OFFSET)",
                "*(undefined4 *)(PTR_DAT_080055b0 + (uint)bVar1 * 4)": "*(uint32_t *)(DEVICE_INFO_VALUES_START + device_index * DEVICE_INFO_VALUE_SIZE)",
                "*(int *)(PTR_DAT_080055b4 + (uint)bVar1 * 4)": "*(int *)(DEVICE_INFO_ADDRESSES_START + device_index * DEVICE_INFO_ADDRESS_SIZE)",
                "*(char *)(param_1 + 0x5a)": "*(char *)(device_info_address + DEVICE_MEMORY_OFFSET)",
                "*(undefined4 *)(PTR_DAT_080055b8 + (uint)*(byte *)(param_1 + 0x44) * 4)": "*(uint32_t *)(DEVICE_INFO_REGISTER_START + device_index * DEVICE_INFO_REGISTER_SIZE)",
                "*(int *)(param_1 + 100) + (uint)*(ushort *)(param_1 + 0x6a)": "*(int *)(device_info_address + DEVICE_REGISTER_OFFSET) + *(uint16_t *)(device_info_address + DEVICE_OFFSET_OFFSET)"
            },
            "code": "void update_device_info_08005568(int device_info_address, uint32_t device_info_value){\n    if (device_info_address != 0) {\n        uint8_t device_index = *(uint8_t *)(device_info_address + DEVICE_INDEX_OFFSET);\n        *(undefined4 *)(PTR_DAT_080055b0 + (uint)bVar1 * 4) = device_info_value;\n        *(int *)(PTR_DAT_080055b4 + (uint)bVar1 * 4) = device_info_address;\n        write_to_memory(MEMORY_ADDRESS_START + *(char *)(device_info_address + DEVICE_MEMORY_OFFSET), 0, 2);\n        set_bit_at_index(MEMORY_ADDRESS_START + *(char *)(device_info_address + DEVICE_MEMORY_OFFSET));\n        initialize_device(*(undefined4 *)(PTR_DAT_080055b8 + (uint)*(byte *)(param_1 + 0x44) * 4),\n            *(int *)(device_info_address + DEVICE_REGISTER_OFFSET) + *(uint16_t *)(device_info_address + DEVICE_OFFSET_OFFSET), 1);\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_0800455a",
                "FUN_080024f8",
                "FUN_08002494"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005568",
            "calling": [],
            "imported": false,
            "current_name": "update_device_info_08005568"
        },
        "FUN_08004478": {
            "renaming": {
                "FUN_08004478": "process_input_08004478",
                "param_1": "input_buffer",
                "param_2": "data_buffer",
                "param_3": "data_len",
                "uVar1": "pointer_value",
                "iVar2": "result"
            },
            "code": "int process_input_08004478(int *input_buffer, ushort *data_buffer, int data_len, undefined4 param_4)\n{\n  undefined4 pointer_value;\n  int result;\n  \n  if (*(char *)((int)input_buffer + 0x39) == ' ') {\n    if (data_buffer == NULL) {\n      result = 1;\n    }\n    else if (data_len == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_buffer + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_buffer + 0xe) = 1;\n      input_buffer[0xf] = 0;\n      *(undefined *)((int)input_buffer + 0x39) = 0x21;\n      pointer_value = get_pointer_value();\n      *(short *)(input_buffer + 9) = (short)data_len;\n      *(short *)((int)input_buffer + 0x26) = (short)data_len;\n      while (*(short *)((int)input_buffer + 0x26) != 0) {\n        *(short *)((int)input_buffer + 0x26) = *(short *)((int)input_buffer + 0x26) + -1;\n        if (input_buffer[2] == 0x1000) {\n          result = check_flags(input_buffer,0x80,0,pointer_value,param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*input_buffer + 4) = *data_buffer & 0x1ff;\n          if (input_buffer[4] == 0) {\n            data_buffer = data_buffer + 1;\n          }\n          else {\n            data_buffer = (ushort *)((int)data_buffer + 1);\n          }\n        }\n        else {\n          result = check_flags(input_buffer,0x80,0,pointer_value,param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*input_buffer + 4) = (uint)*(byte *)data_buffer;\n          data_buffer = (ushort *)((int)data_buffer + 1);\n        }\n      }\n      result = check_flags(input_buffer,0x40,0,pointer_value,param_4);\n      if (result == 0) {\n        *(undefined *)((int)input_buffer + 0x39) = 0x20;\n        *(undefined *)(input_buffer + 0xe) = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [
                "FUN_080043b4",
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004478",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": false,
            "current_name": "process_input_08004478"
        },
        "FUN_08005f5e": {
            "renaming": {
                "FUN_08005f5e": "initialize_device_and_update_value_08005f5e",
                "update_value_08002470": "update_value",
                "initialize_device_and_update_value_08001c32": "initialize_device"
            },
            "code": "void initialize_device_and_update_value_08005f5e(void)\n{\n  update_value(3);\n  initialize_device();\n  return;\n}",
            "called": [
                "FUN_08002470",
                "FUN_08001c32"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5e",
            "calling": [
                "FUN_08006198"
            ],
            "imported": false,
            "current_name": "initialize_device_and_update_value_08005f5e"
        },
        "FUN_08005cb6": {
            "renaming": {
                "FUN_08005cb6": "call_function_pointer_08005cb6",
                "param_1": "function_pointer"
            },
            "code": "void call_function_pointer_08005cb6(void *function_pointer){\n  (**(void (**)(void))function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb6",
            "calling": [
                "FUN_08005da8",
                "FUN_08005d42"
            ],
            "imported": false,
            "current_name": "call_function_pointer_08005cb6"
        },
        "FUN_08003c70": {
            "renaming": {
                "FUN_08003c70": "get_shifted_value_from_pointer_08003c70",
                "uVar1": "value",
                "get_value_from_pointer_08003c44": "get_value_from_pointer",
                "PTR_DAT_08003c8c": "shift_values",
                "DAT_08003c88": "pointer_to_data"
            },
            "code": "uint get_shifted_value_from_pointer_08003c70(void)\n{\n  uint value = get_value_from_pointer();\n  uint* pointer = (uint*)(DAT_08003c88 + 4);\n  uint shifted_value = (*pointer << 0x12) >> 0x1d;\n  uint result = value >> PTR_DAT_08003c8c[shifted_value];\n  return result;\n}",
            "called": [
                "FUN_08003c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c70",
            "calling": [
                "FUN_08004204",
                "FUN_08003da4"
            ],
            "imported": false,
            "current_name": "get_shifted_value_from_pointer_08003c70"
        },
        "FUN_080053d4": {
            "renaming": {
                "FUN_080053d4": "process_input_080053d4",
                "param_1": "input_value",
                "param_2": "param_value",
                "iVar2": "pointer_value_1",
                "cVar1": "character_value",
                "iVar3": "integer_value_1",
                "uVar4": "uinteger_value_1",
                "PTR_DAT_0800547c": "data_array_1",
                "PTR_DAT_08005480": "data_array_2",
                "PTR_DAT_08005484": "data_array_3",
                "PTR_DAT_08005488": "data_array_4"
            },
            "code": "uint process_input_080053d4(uint input_value, uint param_value)\n{\n  int pointer_value_1 = get_pointer_value();\n  char character_value = PTR_DAT_0800547c[1];\n  int integer_value_1 = find_value((int)character_value, PTR_DAT_08005480);\n  if (integer_value_1 == 0) {\n    return 0;\n  }\n  uint uinteger_value_1 = 0;\n  while ((uinteger_value_1 < 5 && ((*(int *)(PTR_DAT_08005484 + uinteger_value_1 * 4) == 0 || (integer_value_1 = find_value((int)character_value,PTR_DAT_08005480), **(int **)(PTR_DAT_08005484 + uinteger_value_1 * 4) != integer_value_1))))) {\n    uinteger_value_1 = uinteger_value_1 + 1 & 0xff;\n  }\n  if (4 < uinteger_value_1) {\n    if ((4 < (byte)PTR_DAT_08005488[0x44]) && (process_value(), 4 < (byte)PTR_DAT_08005488[0x44])) {\n      return 0;\n    }\n    uinteger_value_1 = (uint)(byte)PTR_DAT_08005488[0x44];\n  }\n  do {\n    integer_value_1 = process_input_080053d4(*(undefined4 *)(PTR_DAT_08005484 + uinteger_value_1 * 4), input_value, param_value & 0xffff, 1000);\n    if (integer_value_1 == 0) {\n      return param_value;\n    }\n    integer_value_1 = get_pointer_value();\n  } while ((uint)(integer_value_1 - pointer_value_1) < 1000);\n  return 0;\n}",
            "called": [
                "FUN_08005384",
                "FUN_08004478",
                "FUN_08004c78",
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053d4",
            "calling": [
                "FUN_08005730"
            ],
            "imported": false,
            "current_name": "process_input_080053d4"
        },
        "FUN_08002b84": {
            "renaming": {
                "FUN_08002b84": "check_and_set_params_08002b84",
                "param_1": "param_list",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "result",
                "puVar2": "ptr1"
            },
            "code": "int check_and_set_params_08002b84(uint **param_list, uint *param1, int param2, uint *param3) {\n  int result;\n  uint *ptr1;\n  if (*(char *)((int)param_list + 0x3d) == '(') {\n    if (param1 == NULL) {\n      result = 1;\n    }\n    else if (param2 == 0) {\n      result = 1;\n    }\n    else if (*(char *)(param_list + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(param_list + 0xf) = 1;\n      ptr1 = *param_list;\n      if ((*ptr1 & 1) == 0) {\n        *ptr1 = *ptr1 | 1;\n      }\n      **param_list = **param_list & 0xfffff7ff;\n      *(undefined *)((int)param_list + 0x3d) = 0x2a;\n      *(undefined *)((int)param_list + 0x3e) = 0x20;\n      result = 0;\n      param_list[0x10] = NULL;\n      param_list[9] = param1;\n      *(short *)((int)param_list + 0x2a) = (short)param2;\n      param_list[0xb] = param3;\n      *(undefined2 *)(param_list + 10) = *(undefined2 *)((int)param_list + 0x2a);\n      *(undefined *)(param_list + 0xf) = 0;\n      (*param_list)[1] = (*param_list)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b84",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": false,
            "current_name": "check_and_set_params_08002b84"
        },
        "FUN_08004c48": {
            "renaming": {
                "FUN_08004c48": "check_if_param2_is_included_in_param1_and_return_08004c48_08004c48",
                "param_1": "buffer1",
                "param_2": "buffer1_len",
                "param_3": "buffer2",
                "param_4": "buffer2_len"
            },
            "code": "void check_if_param2_is_included_in_param1_and_return_08004c48_08004c48(void* buffer1, uint16_t buffer1_len, void* buffer2, uint32_t buffer2_len)\n{\n  is_param2_included_in_param1_08002810(buffer1, buffer1_len, buffer2, buffer2_len, buffer2_len);\n  return;\n}",
            "called": [
                "FUN_08002810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c48",
            "calling": [
                "FUN_08005890"
            ],
            "imported": false,
            "current_name": "check_if_param2_is_included_in_param1_and_return_08004c48_08004c48"
        },
        "FUN_0800042c": {
            "renaming": {
                "FUN_0800042c": "improved_function_name_0800042c",
                "param_1": "input",
                "uVar1": "result_hi",
                "uVar2": "result_lo",
                "uVar3": "shift_count",
                "iVar4": "count",
                "uVar5": "temp",
                "uVar6": "sign",
                "in_r12": "unused",
                "bVar7": "flag1",
                "bVar8": "flag2",
                "bVar9": "flag3",
                "count_leading_zeroes": "count_leading_zeroes",
                "0x80000000": "SIGN_BIT",
                "0xffffffff": "MASK_32_BIT",
                "0x7fe00000": "EXPONENT_BIAS"
            },
            "code": "ulonglong improved_function_name_0800042c(uint num) {\n  int count = 0;\n  while (num) {\n    num >>= 1;\n    count++;\n  }\n  return (ulonglong)count;\n}\n\nulonglong improved_function_name_0800042c(uint input) {\n  if (input == 0) {\n    return 0;\n  }\n  uint sign = input & 0x80000000;\n  uint abs_input = (sign < 0) ? -input : input;\n  uint shift_count = improved_function_name_0800042c(abs_input) + 21;\n  uint shift = (shift_count < 32) ? 12 - shift_count : 0;\n  uint result = (abs_input << shift) | ((shift == 0) ? 0 : 0xffffffff >> (32 - shift));\n  uint result_hi = (shift_count < 1075) ? (result >> 32) | (sign + ((1075 - shift_count) << 20)) : sign + 0x7fe00000;\n  uint result_lo = result << (shift_count - 1075);\n  return ((ulonglong)result_hi << 32) | result_lo;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800042c",
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_08001918"
            ],
            "imported": false,
            "current_name": "improved_function_name_0800042c"
        },
        "FUN_08005f6c": {
            "renaming": {
                "FUN_08005f6c": "process_data_08005f6c",
                "decode_and_process_data_08000bcc": "decode_and_process",
                "FUNC_08000cd0": "perform_calculation",
                "calculate_value_if_not_zero_08005a18": "calculate_value",
                "DAT_08005f88": "data_available"
            },
            "code": "void process_data_08005f6c(void)\n{\n  do_nothing();\n  decode_and_process();\n  do {\n    do {\n      perform_calculation();\n    } while (DAT_08005f88 == 0);\n    calculate_value();\n  } while(true);\n}",
            "called": [
                "FUN_08005a18",
                "FUN_08005f5c",
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f6c",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "process_data_08005f6c"
        },
        "FUN_08005cc0": {
            "renaming": {
                "FUN_08005cc0": "execute_function_08005cc0",
                "param_1": "function_ptr",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "**(code **)(*param_1 + 4)": "function",
                "PTR_DAT_08005cd0": "data_ptr"
            },
            "code": "void execute_function_08005cc0(int *function_ptr, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n  void (*function)(int *, void *, int, void *, undefined4) = *(void (**)(int *, void *, int, void *, undefined4))(*function_ptr + 4);\n  void *PTR_DAT_08005cd0 = PTR_DAT_08005cd0;\n  function(function_ptr, PTR_DAT_08005cd0, 2, function, arg3);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cc0",
            "calling": [
                "FUN_08005f40",
                "FUN_08005cd4"
            ],
            "imported": false,
            "current_name": "execute_function_08005cc0"
        },
        "FUN_0800706c": {
            "renaming": {
                "FUN_0800706c": "process_input_0800706c",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "puVar1": "data_ptr",
                "iVar2": "result"
            },
            "code": "void process_input_0800706c(int *output, undefined4 input1, undefined4 input2, undefined4 input3) {\n    undefined *data_ptr = PTR_DAT_0800708c;\n    *(undefined4 *)PTR_DAT_0800708c = 0;\n    int result = return_zero_0800572c(input1, input2, input3, input3, input3);\n    if (result == -1 && (*(int *)data_ptr != 0)) {\n        *output = *(int *)data_ptr;\n    }\n    return;\n}",
            "called": [
                "FUN_0800572c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800706c",
            "calling": [
                "FUN_08006f38"
            ],
            "imported": false,
            "current_name": "process_input_0800706c"
        },
        "FUN_08002624": {
            "renaming": {
                "FUN_08002624": "update_bits_08002624",
                "param_1": "bits",
                "param_2": "mask",
                "puVar1": "bits_ptr",
                "uVar2": "bit_mask",
                "uVar3": "mask_bit",
                "uVar4": "value",
                "uVar5": "index",
                "uVar6": "upper_range",
                "uVar7": "lower_range",
                "iVar8": "shift",
                "iVar10": "index_2"
            },
            "code": "void update_bits_08002624(uint *bits, uint *mask)\n{\n  uint *bits_ptr;\n  uint bit_mask;\n  uint mask_bit;\n  uint value;\n  uint index = 0;\n  do {\n    if (index > 0xf) {\n      return;\n    }\n    bit_mask = 1 << (index & 0xff);\n    mask_bit = *mask & bit_mask;\n    if (bit_mask == mask_bit) {\n      value = mask[1];\n      if (value == 0x12) {\n        bits_ptr = bits + 3;\n        value += 0xc;\n      }\n      else if (value < 0x13) {\n        if (value == 2) {\n          bits_ptr = bits + 3;\n          value += 8;\n        }\n        else if (value < 3) {\n          if (value == 0) goto LAB_08002776;\n          if (value == 1) {\n            bits_ptr = bits + 3;\n          }\n        }\n        else if (value == 3) {\n          value = 0;\n        }\n        else if (value == 0x11) {\n          bits_ptr = bits + 3;\n          value += 4;\n        }\n      }\n      else {\n        if (value != DAT_08002804) {\n          if (DAT_08002804 < value) {\n            if (value == DAT_08002808) goto LAB_08002776;\n            uint upper_range = DAT_08002808 + 0x10000;\n            uint lower_range = DAT_08002808;\n          }\n          else {\n            uint upper_range = DAT_08002804 - 0x100000;\n            uint lower_range = DAT_08002804;\n          }\n          if ((value != upper_range) && (value != lower_range - 0xf0000)) goto LAB_0800263a;\n        }\nLAB_08002776:\n        if (mask[2] == 0) {\n          value = 4;\n        }\n        else if (mask[2] == 1) {\n          bits[4] = bit_mask;\n          value = 8;\n        }\n        else {\n          bits[5] = bit_mask;\n          value = 8;\n        }\n      }\nLAB_0800263a:\n      uint shift = index;\n      bits_ptr = bits;\n      if (0xff < mask_bit) {\n        shift = index - 8;\n        bits_ptr = bits + 1;\n      }\n      *bits_ptr = *bits_ptr & ~(0xf << (shift << 2 & 0xff)) | value << (shift << 2 & 0xff);\n      if ((mask[1] & 0x10000000) != 0) {\n        *(uint *)(DAT_080027f8 + 0x18) = *(uint *)(DAT_080027f8 + 0x18) | 1;\n        uint shift = (index & 3) << 2;\n        if (bits == DAT_0800280c) {\n          int index_2 = 0;\n        }\n        else if (bits == DAT_0800280c + 0x100) {\n          int index_2 = 1;\n        }\n        else if (bits == DAT_0800280c + 0x200) {\n          int index_2 = 2;\n        }\n        else if (bits == DAT_0800280c + 0x300) {\n          int index_2 = 3;\n        }\n        else {\n          int index_2 = 4;\n        }\n        *(uint *)(DAT_080027fc + ((index >> 2) + 2) * 4) = *(uint *)(DAT_080027fc + ((index >> 2) + 2) * 4) & ~(0xf << shift) | index_2 << shift;\n        if ((mask[1] & 0x10000) == 0) {\n          *DAT_08002800 = *DAT_08002800 & ~mask_bit;\n        }\n        else {\n          *DAT_08002800 = *DAT_08002800 | mask_bit;\n        }\n        if ((mask[1] & 0x20000) == 0) {\n          DAT_08002800[1] = DAT_08002800[1] & ~mask_bit;\n        }\n        else {\n          DAT_08002800[1] = DAT_08002800[1] | mask_bit;\n        }\n        if ((mask[1] & 0x100000) == 0) {\n          DAT_08002800[2] = DAT_08002800[2] & ~mask_bit;\n        }\n        else {\n          DAT_08002800[2] = DAT_08002800[2] | mask_bit;\n        }\n        if ((mask[1] & 0x200000) == 0) {\n          DAT_08002800[3] = DAT_08002800[3] & ~mask_bit;\n        }\n        else {\n          DAT_08002800[3] = mask_bit | DAT_08002800[3];\n        }\n      }\n    }\n    index++;\n  } while( true );\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002624",
            "calling": [
                "FUN_08004bb0",
                "FUN_08004974",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "update_bits_08002624"
        },
        "FUN_080040b0": {
            "renaming": {
                "FUN_080040b0": "set_and_update_bit_080040b0",
                "param_1": "bit_array",
                "param_2": "bit_index",
                "puVar1": "bit_array_ptr",
                "DAT_0800410c": "global_array_ptr"
            },
            "code": "uint set_and_update_bit_080040b0(uint **bit_array, uint bit_index)\n{\n  uint *bit_array_ptr = *bit_array;\n  set_bit(bit_array_ptr, bit_index, 0);\n  if (((bit_array_ptr == DAT_0800410c) && ((bit_array_ptr[8] & 0x1111) == 0)) && ((bit_array_ptr[8] & 0x444) == 0)) {\n    bit_array_ptr[17] = bit_array_ptr[17] & 0xffff7fff;\n  }\n  if (((bit_array_ptr[8] & 0x1111) == 0) && ((bit_array_ptr[8] & 0x444) == 0)) {\n    *bit_array_ptr = *bit_array_ptr & 0xfffffffe;\n  }\n  *(uint *)((int)bit_array + 0x3d) = 1;\n  return 0;\n}",
            "called": [
                "FUN_08004092"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040b0",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "set_and_update_bit_080040b0"
        },
        "FUN_08005d42": {
            "renaming": {
                "FUN_08005d42": "convert_base_or_call_function_pointer_08005d42",
                "param_1": "function_pointer_argument",
                "param_2": "number_argument",
                "param_3": "base_argument",
                "iVar1": "result",
                "iVar2": "converted_number",
                "call_function_pointer_08005cb6": "minus_sign"
            },
            "code": "int convert_base_or_call_function_pointer_08005d42(undefined4 *function_pointer_argument,uint number_argument,uint base_argument)\n{\n  int result;\n  if (base_argument == 0) {\n    result = (**(code **)*function_pointer_argument)(function_pointer_argument,number_argument & 0xff);\n    return result;\n  }\n  if (base_argument != 10) {\n    result = convert_base_08005ce8(function_pointer_argument,number_argument,base_argument & 0xff);\n    return result;\n  }\n  if (-1 < (int)number_argument) {\n    result = convert_base_08005ce8(function_pointer_argument,number_argument,10);\n    return result;\n  }\n  int minus_sign = call_function_pointer_08005cb6(function_pointer_argument,0x2d);\n  int converted_number = convert_base_08005ce8(function_pointer_argument,-number_argument,10);\n  return converted_number + minus_sign;\n}",
            "called": [
                "FUN_08005cb6",
                "FUN_08005ce8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d42",
            "calling": [
                "FUN_08005d82"
            ],
            "imported": false,
            "current_name": "convert_base_or_call_function_pointer_08005d42"
        },
        "FUN_08004b34": {
            "renaming": {
                "FUN_08004b34": "set_flags_08004b34",
                "set_flags_based_on_input_08004d90": "set_flags_based_on_input"
            },
            "code": "void set_flags_08004b34(void)\n{\n  set_flags_08004b34_based_on_input();\n  return;\n}",
            "called": [
                "FUN_08004d90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b34",
            "calling": [
                "FUN_08003ed8"
            ],
            "imported": false,
            "current_name": "set_flags_08004b34"
        },
        "FUN_08004c52": {
            "renaming": {
                "FUN_08004c52": "initialize_device_and_update_value_08004c52",
                "set_flag_and_update_value_08001c88": "set_device_flag_and_update_value",
                "initialize_device_08001b48": "initialize_device"
            },
            "code": "void initialize_device_and_update_value_08004c52(void)\n{\n  set_device_flag_and_update_value();\n  initialize_device();\n  return;\n}",
            "called": [
                "FUN_08001c88",
                "FUN_08001b48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c52",
            "calling": [
                "FUN_08001c32"
            ],
            "imported": false,
            "current_name": "initialize_device_and_update_value_08004c52"
        },
        "FUN_080013a4": {
            "renaming": {
                "FUN_080013a4": "decode_and_print_data_080013a4",
                "param_1": "data",
                "param_2": "offset1",
                "param_3": "offset2",
                "param_4": "offset3",
                "iVar1": "i",
                "iVar2": "current_offset",
                "set_values_at_offsets_08001294": "set_values_at_offsets",
                "process_input_080057b4": "process_input",
                "decode_character_08005848": "decode_character",
                "decode_and_print_080012c0": "decode_and_print",
                "decode_and_print_08001310": "decode_and_print",
                "set_flag_and_decode_0800138e": "set_flag_and_decode"
            },
            "code": "void decode_and_print_data_080013a4(int data, int offset1, int offset2, int offset3, int flag){\n  int i;\n  if (data > 1) {\n    *(byte *)(data + offset1) |= 8;\n  }\n  *(char *)(data + offset2) = (char)data;\n  set_values_at_offsets(data, 0, 0x40, offset3, offset3 + 0x40);\n  if ((flag != 0) && (data == 1)) {\n    *(byte *)(data + offset1) |= 4;\n  }\n  process_input(*(undefined *)(data + 8), 1);\n  if (*(char *)(data + 9) != -1) {\n    process_input(*(char *)(data + 9), 1);\n  }\n  process_input(*(undefined *)(data + 10), 1);\n  i = 0;\n  while (i < 8) {\n    int current_offset = i + 0xb;\n    if ((*(byte *)(data + offset1) & 0x10) == 0){\n      decode_character(*(undefined *)(data + current_offset), 0);\n    }\n    else{\n      decode_and_print(*(undefined *)(data + current_offset), *(byte *)(data + offset1) | 0x20, 0);\n    }\n    i++;\n  }\n  decode_character(*(undefined *)(data + 8), 0);\n  decode_character(*(undefined *)(data + 10), 0);\n  if (*(char *)(data + 9) != -1) {\n    decode_character(*(char *)(data + 9), 0);\n  }\n  if ((*(byte *)(data + offset1) & 0x10) == 0) {\n    decode_and_print(data, 3);\n    decode_and_print(data, 3);\n    decode_and_print(data, 3);\n    decode_and_print(data, 2);\n  }\n  else {\n    decode_and_print(data, *(byte *)(data + offset1) | 0x20, 0);\n    decode_and_print(data, *(byte *)(data + offset1) | 0x20, 0);\n    decode_and_print(data, *(byte *)(data + offset1) | 0x20, 0);\n  }\n  decode_and_print(data, *(byte *)(data + offset1) | 0x20, 0);\n  *(undefined *)(data + offset2 + 1) = 4;\n  set_flag_and_decode(data);\n  decode_and_print_data_080013a4(data);\n  *(undefined *)(data + offset2 + 2) = 2;\n  decode_and_print(data, 6, 0);\n}",
            "called": [
                "FUN_08005848",
                "FUN_08001310",
                "FUN_080012c0",
                "FUN_08001294",
                "FUN_0800135a",
                "FUN_080057b4",
                "FUN_0800138e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080013a4",
            "calling": [
                "FUN_080014ba",
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "decode_and_print_data_080013a4"
        },
        "FUN_08006d14": {
            "renaming": {
                "FUN_08006d14": "initialize_block_if_empty_08006d14",
                "param_1": "error_code",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "piVar1": "current_block_ptr",
                "piVar2": "block_ptr",
                "iVar3": "block_header_ptr",
                "ppiVar4": "block_list_ptr"
            },
            "code": "int* initialize_block_if_empty_08006d14(undefined4* error_code, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  int* block_ptr;\n  int* current_block_ptr;\n  int block_header_ptr;\n  int** block_list_ptr;\n  block_header_ptr = *(int*)PTR_PTR_DAT_08006d88;\n  if (*(int*)(block_header_ptr + 0x18) == 0)\n  {\n    initialize_block_08006cb4(block_header_ptr);\n  }\n  block_list_ptr = (int**)(block_header_ptr + 0x48);\n  do\n  {\n    current_block_ptr = block_list_ptr[1];\n    block_ptr = block_list_ptr[2];\n    while (current_block_ptr = (int*)((int)current_block_ptr + -1), -1 < (int)current_block_ptr)\n    {\n      if (*(short*)(block_ptr + 3) == 0)\n      {\n        *(undefined2*)((int)block_ptr + 0xe) = 0xffff;\n        block_ptr[0x19] = 0;\n        *(undefined2*)(block_ptr + 3) = 1;\n        *block_ptr = 0;\n        block_ptr[2] = 0;\n        block_ptr[1] = 0;\n        block_ptr[4] = 0;\n        block_ptr[5] = 0;\n        block_ptr[6] = 0;\n        fill_array_with_value_080061e0(block_ptr + 0x17,0,8,1,param_4);\n        block_ptr[0xd] = 0;\n        block_ptr[0xe] = 0;\n        block_ptr[0x12] = 0;\n        block_ptr[0x13] = 0;\n        return block_ptr;\n      }\n      block_ptr += 0x1a;\n    }\n    if (*block_list_ptr == (int*)0x0)\n    {\n      current_block_ptr = (int*)allocate_and_initialize_block_08006c88(error_code, 4);\n      *block_list_ptr = current_block_ptr;\n      if (current_block_ptr == (int*)0x0)\n      {\n        *error_code = 0xc;\n        return (int*)0x0;\n      }\n    }\n    block_list_ptr = (int**)*block_list_ptr;\n  } while (true);\n}",
            "called": [
                "FUN_080061e0",
                "FUN_08006c88",
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d14",
            "calling": [
                "FUN_08006cb4"
            ],
            "imported": false,
            "current_name": "initialize_block_if_empty_08006d14",
            "code_backup": "\nint * FUN_08006d14(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int iVar3;\n  int **ppiVar4;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08006d88;\n  if (*(int *)(iVar3 + 0x18) == 0) {\n    FUNC_08006cb4(iVar3);\n  }\n  ppiVar4 = (int **)(iVar3 + 0x48);\n  do {\n    piVar2 = ppiVar4[2];\n    piVar1 = ppiVar4[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_array_with_value_080061e0(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar4 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_block_08006c88(param_1,4);\n      *ppiVar4 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar4 = (int **)*ppiVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_080004f8": {
            "renaming": {
                "FUN_080004f8": "FUNC_080004f8"
            },
            "code": "\nulonglong FUNC_080004f8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = calculate_bitwise_080006d4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006d4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004f8",
            "calling": [
                "FUN_080015f8",
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918"
            ],
            "imported": false,
            "current_name": "FUNC_080004f8"
        }
    },
    "used_tokens": 225373,
    "layers": [
        [
            "FUN_08002470",
            "FUN_08005740",
            "FUN_08006158",
            "FUN_08000178",
            "FUN_0800258c",
            "FUN_0800573c",
            "FUN_08004d06",
            "FUN_080056d8",
            "FUN_08002f9c",
            "FUN_08005750",
            "FUN_08002ab8",
            "FUN_08002c54",
            "FUN_08004d18",
            "FUN_080006d4",
            "FUN_08006174",
            "FUN_08002494",
            "FUN_080055bc",
            "FUN_08002810",
            "FUN_08004cb2",
            "FUN_08001294",
            "FUN_08002ad8",
            "FUN_0800455a",
            "FUN_08001a66",
            "FUN_08003c44",
            "FUN_080028d2",
            "FUN_08005b3c",
            "FUN_08004c8a",
            "FUN_08002ca6",
            "FUN_080045a2",
            "FUN_080047e8",
            "thunk_FUN_08005750",
            "FUN_0800092c",
            "FUN_08002560",
            "FUN_08006e90",
            "FUN_080008ba",
            "FUN_08005714",
            "FUN_08005a44",
            "FUN_0800417c",
            "FUN_080047f4",
            "FUN_08002c10",
            "FUN_080024f8",
            "FUN_08004198",
            "FUN_08000a2c",
            "FUN_08000ae8",
            "FUN_080061e0",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800571a",
            "FUN_08002efc",
            "FUN_0800365c",
            "FUN_08002582",
            "FUN_08004884",
            "FUN_080061f0",
            "FUN_0800572c",
            "FUN_08000a58",
            "FUN_08004092",
            "FUN_08002514",
            "FUN_08005c1c",
            "FUN_0800480a",
            "FUN_08005f8c",
            "FUN_08004c5e",
            "FUN_08004d90",
            "FUN_08004828",
            "FUN_08005b24",
            "FUN_080049f0",
            "FUN_08001e40",
            "FUN_08003a68",
            "FUN_08001e48",
            "FUN_08000aa8",
            "FUN_0800010c",
            "FUN_08001cac",
            "FUN_0800591e",
            "FUN_08002540",
            "FUN_08002db2",
            "FUN_08001cc4",
            "FUN_0800306c",
            "FUN_08004848",
            "FUN_08001f80",
            "FUN_0800281e",
            "FUN_08006198",
            "FUN_080065c0",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_0800040c",
            "FUN_08004df4",
            "FUN_08002af8",
            "FUN_080028de",
            "FUN_08002848",
            "FUN_08004e70",
            "FUN_08004110",
            "FUN_08004ce2",
            "FUN_08005cb6",
            "FUN_08002b84",
            "FUN_0800042c",
            "FUN_08005cc0",
            "FUN_08002624"
        ],
        [
            "FUN_08007004",
            "FUN_08004ec4",
            "FUN_080043b4",
            "FUN_08007028",
            "FUN_08004ca2",
            "FUN_080054b0",
            "FUN_08006f00",
            "FUN_08004ef4",
            "FUN_080055e0",
            "FUN_08006112",
            "FUN_08004974",
            "FUN_08006c40",
            "FUN_08006920",
            "FUN_08004b94",
            "FUN_08001918",
            "FUN_08001c3c",
            "FUN_08005604",
            "FUN_08005c96",
            "FUN_08004b9e",
            "FUN_08000aec",
            "FUN_08004e12",
            "FUN_08003c90",
            "FUN_0800412c",
            "FUN_08005c38",
            "FUN_08005ce8",
            "FUN_08004c78",
            "FUN_080009b8",
            "FUN_08005a18",
            "FUN_08003ea0",
            "FUN_0800548c",
            "FUN_08001f84",
            "FUN_08007048",
            "FUN_08003c50",
            "FUN_08004bb0",
            "FUN_08004df8",
            "FUN_080020f0",
            "FUN_08004e74",
            "FUN_08004c30",
            "FUN_08004cce",
            "FUN_08005568",
            "FUN_08003c70",
            "FUN_08004c48",
            "FUN_0800706c",
            "FUN_080040b0",
            "FUN_08004b34"
        ],
        [
            "FUN_08005510",
            "FUN_08002cf2",
            "FUN_08006288",
            "FUN_08002004",
            "FUN_08005fc8",
            "FUN_08001c88",
            "FUN_0800224c",
            "FUN_08005890",
            "FUN_08004204",
            "FUN_080045fe",
            "FUN_0800213c",
            "FUN_08005384",
            "FUN_08005b54",
            "FUN_08004618",
            "FUN_08005d8a",
            "FUN_08002d1c",
            "FUN_08003da4",
            "FUN_080009dc",
            "FUN_080058e0",
            "FUN_080009f0",
            "FUN_08006ac0",
            "FUN_08005848",
            "FUN_08003ed8",
            "FUN_08002348",
            "FUN_08005cd4",
            "FUN_08006dc8",
            "FUN_0800492c",
            "FUN_080009a8",
            "FUN_0800316c",
            "FUN_08003afa",
            "FUN_08004948",
            "FUN_08003f18",
            "FUN_080009c8",
            "FUN_08006f92",
            "FUN_080054d4",
            "FUN_08006f38",
            "FUN_08003ad4",
            "FUN_08004478",
            "FUN_08005d42"
        ],
        [
            "FUN_08006c88",
            "FUN_08004e20",
            "FUN_080032b4",
            "FUN_0800598a",
            "FUN_0800441a",
            "FUN_08005da0",
            "FUN_08002384",
            "FUN_08000a18",
            "FUN_080046b8",
            "FUN_08001cd0",
            "FUN_08003520",
            "FUN_0800611c",
            "FUN_08001814",
            "FUN_08001b48",
            "FUN_08005bb0",
            "FUN_08004b3c",
            "FUN_080012a2",
            "FUN_08000a04",
            "FUN_08005d82",
            "FUN_080015b2",
            "FUN_08006e10",
            "FUN_080053d4"
        ],
        [
            "FUN_080019f6",
            "FUN_08001960",
            "FUN_080016b4",
            "FUN_080018f8",
            "FUN_08005da8",
            "FUN_08004a4c",
            "FUN_080057b4",
            "FUN_080012e8",
            "FUN_080033b8",
            "FUN_08005730",
            "FUN_08005a68",
            "FUN_080015f8",
            "FUN_080012c0",
            "FUN_08004c52"
        ],
        [
            "FUN_08005754",
            "FUN_08001a44",
            "FUN_08005f2c",
            "FUN_0800157c",
            "FUN_08001c32",
            "FUN_08001ab0",
            "FUN_08006f5a",
            "FUN_08001310"
        ],
        [
            "FUN_0800138e",
            "FUN_08005f40",
            "FUN_08001b18",
            "FUN_0800134e",
            "FUN_08001366",
            "FUN_0800135a",
            "FUN_08001550",
            "FUN_08005f5e"
        ],
        [
            "FUN_080013a4"
        ],
        [
            "FUN_080014ba",
            "FUN_08000bcc"
        ],
        [
            "FUN_08001510",
            "FUN_08005f6c"
        ],
        [
            "FUN_08001be8",
            "FUN_08000b08"
        ],
        [
            "FUN_08007090"
        ],
        [
            "FUN_080060d4"
        ],
        [
            "FUN_080060e4"
        ],
        [
            "FUN_0800282c"
        ],
        [
            "FUN_080068f0",
            "FUN_08006be0",
            "FUN_080069e4",
            "FUN_08006d14"
        ],
        [
            "FUN_08006cb4"
        ],
        [
            "FUN_08006344"
        ],
        [
            "FUN_08006370"
        ]
    ],
    "locked_functions": []
}