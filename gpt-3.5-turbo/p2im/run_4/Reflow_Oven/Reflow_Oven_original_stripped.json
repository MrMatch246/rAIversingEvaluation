{
    "functions": {
        "FUN_08002470": {
            "renaming": {
                "FUN_08002470": "set_priority_group_08002470",
                "PriorityGroup": "priority_group",
                "DAT_08002490": "data_ptr",
                "uint32_t": "uint32_t",
                "uint": "uint32_t",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void set_priority_group_08002470(uint32_t priority_group) {\n    uint32_t* priority_register = (uint32_t*)(DAT_08002490 + 0xc);\n    uint32_t priority_mask = 0xf8ff;\n    uint32_t priority_value = 0x5fa0000;\n    uint32_t priority_bits = (priority_group & 7) << 8;\n    *priority_register = priority_bits | (*priority_register & priority_mask) | priority_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002470",
            "calling": [
                "HAL_Init",
                "premain"
            ],
            "imported": false,
            "current_name": "set_priority_group_08002470"
        },
        "FUN_08007004": {
            "renaming": {
                "FUN_08007004": "get_file_status_08007004",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "status_buffer",
                "puVar1": "error_ptr",
                "iVar2": "file_status"
            },
            "code": "void get_file_status_08007004(int *error_code, int file_descriptor, stat *status_buffer) {\n  undefined *error_ptr;\n  int file_status;\n  error_ptr = PTR_errno_08007024;\n  *(undefined4 *)PTR_errno_08007024 = 0;\n  file_status = _fstat(file_descriptor, status_buffer);\n  if ((file_status == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n  }\n  return;\n}",
            "called": [
                "_fstat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007004",
            "calling": [
                "__swhatbuf_r"
            ],
            "imported": false,
            "current_name": "get_file_status_08007004"
        },
        "FUN_08006394": {
            "renaming": {
                "FUN_08006394": "FUNC_08006394"
            },
            "code": "\nint FUNC_08006394(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  bool bVar1;\n  undefined *puVar2;\n  int iVar3;\n  void *pvVar4;\n  int *piVar5;\n  byte *pbVar6;\n  byte *pbVar7;\n  int unaff_r9;\n  int iVar8;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    __sinit();\n  }\n  if (param_2 == PTR___sf_fake_stdin_080065a0) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR___sf_fake_stdout_080065a8) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR___sf_fake_stderr_080065ac) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar8 = __swsetup_r(param_1,param_2), iVar8 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar6 = param_3;\nLAB_080063d6:\n  pbVar7 = pbVar6;\n  if (*pbVar7 != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  pbVar6 = pbVar7 + 1;\n  if (*pbVar7 != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  iVar8 = (int)pbVar7 - (int)param_3;\n  if (iVar8 != 0) {\n    iVar3 = __sfputs_r(param_1,param_2,param_3,iVar8);\n    if (iVar3 == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar8;\n  }\n  if (*pbVar7 == 0) goto LAB_08006580;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar6 = pbVar7 + 1;\n  while( true ) {\n    pvVar4 = memchr(PTR_s___0__080065a4,(uint)*pbVar6,5);\n    puVar2 = PTR_DAT_080065b0;\n    param_3 = pbVar6 + 1;\n    if (pvVar4 == (void *)0x0) break;\n    local_88 = 1 << ((int)pvVar4 - (int)PTR_s___0__080065a4 & 0xffU) | local_88;\n    pbVar6 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar6 == 0x2a) {\n    piVar5 = local_8c + 1;\n    iVar8 = *local_8c;\n    local_8c = piVar5;\n    if (-1 < iVar8) goto LAB_080064b0;\n    local_7c = -iVar8;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar1 = false;\n    iVar8 = local_7c;\n    param_3 = pbVar6;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar8 = iVar8 * 10 + (*param_3 - 0x30);\n      bVar1 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar1) {\nLAB_080064b0:\n      local_7c = iVar8;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar5 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar5;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar1 = false;\n      iVar8 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar8 = iVar8 * 10 + (*param_3 - 0x30);\n        bVar1 = true;\n      }\n      if (bVar1) {\n        local_84 = iVar8;\n      }\n    }\n  }\n  pvVar4 = memchr(PTR_DAT_080065b0,(uint)*param_3,3);\n  if (pvVar4 != (void *)0x0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << ((int)pvVar4 - (int)puVar2 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  pvVar4 = memchr(PTR_s_efgEFG_080065b4,(uint)local_70,6);\n  if (pvVar4 == (void *)0x0) {\n    iVar8 = _printf_i(param_1,&local_88,param_2,DAT_080065bc,&local_8c);\n  }\n  else {\n    iVar8 = param_1;\n    if (DAT_080065b8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar8 = unaff_r9;\n      goto LAB_08006532;\n    }\n  }\n  if (iVar8 == -1) goto LAB_08006580;\nLAB_08006532:\n  local_74 = local_74 + iVar8;\n  pbVar6 = param_3;\n  unaff_r9 = iVar8;\n  goto LAB_080063d6;\n}\n\n",
            "called": [
                "__sfputs_r",
                "__swsetup_r",
                "_printf_i",
                "__sinit",
                "memchr"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006394",
            "calling": [
                "fiprintf",
                "iprintf"
            ],
            "imported": false,
            "current_name": "FUNC_08006394"
        },
        "FUN_080035fc": {
            "renaming": {
                "FUN_080035fc": "i2c_dma_transfer_complete_handler_080035fc",
                "hdma": "dma_handle",
                "hi2c": "i2c_handle",
                "CR1": "control_register_1",
                "XferCount": "transfer_count",
                "hdmatx": "dma_tx_handle",
                "hdmarx": "dma_rx_handle",
                "State": "i2c_state",
                "HAL_I2C_STATE_ABORT": "i2c_state_abort",
                "HAL_I2C_STATE_READY": "i2c_state_ready",
                "Mode": "i2c_mode",
                "HAL_I2C_MODE_NONE": "i2c_mode_none",
                "ErrorCode": "i2c_error_code",
                "HAL_I2C_ErrorCallback": "i2c_error_callback",
                "HAL_I2C_AbortCpltCallback": "i2c_abort_complete_callback"
            },
            "code": "void i2c_dma_transfer_complete_handler_080035fc(DMA_HandleTypeDef *dma_handle)\n{\n  \n  I2C_HandleTypeDef *i2c_handle;\n  \n  i2c_handle = (I2C_HandleTypeDef *)dma_handle->Parent;\n  i2c_handle->Instance->CR1 &= ~(1 << 10);\n  i2c_handle->XferCount = 0;\n  i2c_handle->hdmatx->XferAbortCallback = NULL;\n  i2c_handle->hdmarx->XferAbortCallback = NULL;\n  \n  if (i2c_handle->State != HAL_I2C_STATE_ABORT) {\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->Mode = HAL_I2C_MODE_NONE;\n    i2c_handle->Instance->CR1 &= ~(1 << 0);\n    HAL_I2C_ErrorCallback(i2c_handle);\n    return;\n  }\n  i2c_handle->State = HAL_I2C_STATE_READY;\n  i2c_handle->Mode = HAL_I2C_MODE_NONE;\n  i2c_handle->ErrorCode = 0;\n  i2c_handle->Instance->CR1 &= ~(1 << 0);\n  HAL_I2C_AbortCpltCallback(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ErrorCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fc",
            "calling": [],
            "imported": false,
            "current_name": "i2c_dma_transfer_complete_handler_080035fc"
        },
        "FUN_08005740": {
            "renaming": {
                "FUN_08005740": "set_errno_to_22_08005740",
                "pid_UNUSED": "unused_pid",
                "sig_UNUSED": "unused_sig",
                "PTR_errno_0800574c": "PTR_errno"
            },
            "code": "int set_errno_to_22_08005740(int pid_UNUSED, int sig_UNUSED) {\n  *(undefined4 *)PTR_errno_0800574c_0800574c = 22;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005740",
            "calling": [
                "_kill_r"
            ],
            "imported": false,
            "current_name": "set_errno_to_22_08005740"
        },
        "FUN_08006158": {
            "renaming": {
                "FUN_08006158": "get_result_08006158",
                "param_1": "input_1",
                "param_2": "input_2",
                "DAT_08006170": "global_var"
            },
            "code": "unsigned long long get_result_08006158(uint32_t param_1, uint32_t param_2)\n{\n  if (DAT_08006170 != 0) {\n    return (unsigned long long)param_1 << 32 | 2;\n  }\n  return (unsigned long long)param_2 << 32;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006158",
            "calling": [
                "__aeabi_atexit"
            ],
            "imported": false,
            "current_name": "get_result_08006158"
        },
        "FUN_08006d8c": {
            "renaming": {
                "FUN_08006d8c": "process_data_08006d8c",
                "param_1": "data_ptr",
                "param_2": "callback_func",
                "param_3": "arg1",
                "param_4": "arg2",
                "piVar3": "current_data_ptr",
                "iVar4": "current_data_offset",
                "iVar6": "current_data_count",
                "uVar1": "callback_result",
                "uVar5": "result"
            },
            "code": "uint process_data_08006d8c(int data_ptr, code* callback_func, undefined4 arg1, undefined4 arg2) {\n  uint result = 0;\n  int* current_data_ptr;\n  int current_data_offset;\n  int current_data_count;\n  int current_data_item;\n  while (current_data_ptr = (int*)(data_ptr + 0x48), current_data_ptr != (int*)0x0) {\n    current_data_offset = current_data_ptr[2];\n    current_data_count = current_data_ptr[1];\n    while (current_data_count > 0) {\n      if (*(ushort*)(current_data_offset + 0xc) > 1) {\n        current_data_item = *(short*)(current_data_offset + 0xe) + 1;\n        if (current_data_item != 0) {\n          uint callback_result = (*callback_func)(data_ptr, current_data_offset, arg1, current_data_item, arg2);\n          result |= callback_result;\n        }\n      }\n      current_data_offset += 0x68;\n      current_data_count--;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d8c",
            "calling": [
                "_cleanup_r"
            ],
            "imported": false,
            "current_name": "process_data_08006d8c"
        },
        "FUN_08004f2c": {
            "renaming": {
                "FUN_08004f2c": "handle_I2C_event_interrupt_08004f2c",
                "PTR_i2c_handles_08004f38": "PTR_i2c_handles",
                "i2c_handle": "i2c_handle"
            },
            "code": "void handle_I2C_event_interrupt_08004f2c(I2C_HandleTypeDef *i2c_handle)\n{\n  HAL_I2C_EV_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f2c",
            "calling": [],
            "imported": false,
            "current_name": "handle_I2C_event_interrupt_08004f2c"
        },
        "FUN_08003688": {
            "renaming": {
                "FUN_08003688": "FUNC_08003688"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nHAL_StatusTypeDef_conflict FUNC_08003688(RCC_OscInitTypeDef_conflict *RCC_OscInitStruct)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  HAL_StatusTypeDef_conflict HVar3;\n  uint32_t uVar4;\n  uint32_t uVar5;\n  bool bVar6;\n  uint32_t tmpreg;\n  \n  puVar1 = DAT_08003948;\n  if ((RCC_OscInitStruct->OscillatorType & 1) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 4) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) != 0)))) {\n      if (((*DAT_08003948 & 0x20000) != 0) && (RCC_OscInitStruct->HSEState == 0)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      uVar5 = RCC_OscInitStruct->HSEState;\n      if (uVar5 == 0x10000) {\n        *DAT_08003948 = *DAT_08003948 | 0x10000;\n      }\n      else if (uVar5 == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (uVar5 == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08003948 = *DAT_08003948 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (RCC_OscInitStruct->HSEState == 0) {\n        uVar5 = HAL_GetTick();\n        while ((*DAT_08003948 & 0x20000) != 0) {\n          uVar4 = HAL_GetTick();\n          if (100 < uVar4 - uVar5) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        uVar5 = HAL_GetTick();\n        while ((*DAT_08003948 & 0x20000) == 0) {\n          uVar4 = HAL_GetTick();\n          if (100 < uVar4 - uVar5) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 2) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 0) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) == 0)))) {\n      if (((*DAT_08003948 & 2) != 0) && (RCC_OscInitStruct->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | RCC_OscInitStruct->HSICalibrationValue << 3;\n    }\n    else if (RCC_OscInitStruct->HSIState == 0) {\n      *DAT_0800394c = 0;\n      uVar5 = HAL_GetTick();\n      while ((*DAT_08003948 & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_0800394c = 1;\n      uVar5 = HAL_GetTick();\n      while ((*DAT_08003948 & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | RCC_OscInitStruct->HSICalibrationValue << 3;\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 8) != 0) {\n    if (RCC_OscInitStruct->LSIState == 0) {\n      *DAT_08003950 = 0;\n      uVar5 = HAL_GetTick();\n      while ((DAT_08003948[9] & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_08003950 = 1;\n      uVar5 = HAL_GetTick();\n      while ((DAT_08003948[9] & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n      RCC_Delay(1);\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 4) != 0) {\n    bVar6 = (DAT_08003948[7] & 0x10000000) == 0;\n    if (bVar6) {\n      DAT_08003948[7] = DAT_08003948[7] | 0x10000000;\n    }\n    if ((*DAT_08003954 & 0x100) == 0) {\n      *DAT_08003954 = *DAT_08003954 | 0x100;\n      uVar5 = HAL_GetTick();\n      while ((*DAT_08003954 & 0x100) == 0) {\n        uVar4 = HAL_GetTick();\n        if (100 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    puVar2 = DAT_08003a60;\n    puVar1 = DAT_08003948;\n    uVar5 = RCC_OscInitStruct->LSEState;\n    if (uVar5 == 1) {\n      DAT_08003948[8] = DAT_08003948[8] | 1;\n    }\n    else if (uVar5 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (uVar5 == 5) {\n      DAT_08003a60[8] = DAT_08003a60[8] | 4;\n      puVar2[8] = puVar2[8] | 1;\n    }\n    else {\n      DAT_08003948[8] = DAT_08003948[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n    }\n    if (RCC_OscInitStruct->LSEState == 0) {\n      uVar5 = HAL_GetTick();\n      while ((DAT_08003a60[8] & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (5000 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      uVar5 = HAL_GetTick();\n      while ((DAT_08003948[8] & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (5000 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (bVar6) {\n      DAT_08003a60[7] = DAT_08003a60[7] & 0xefffffff;\n    }\n  }\n  uVar5 = (RCC_OscInitStruct->PLL).PLLState;\n  if (uVar5 == 0) {\n    HVar3 = HAL_OK;\n  }\n  else if ((DAT_08003a60[1] & 0xc) == 8) {\n    HVar3 = HAL_ERROR;\n  }\n  else if (uVar5 == 2) {\n    *DAT_08003a64 = 0;\n    uVar5 = HAL_GetTick();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        if ((RCC_OscInitStruct->PLL).PLLSource == 0x10000) {\n          DAT_08003a60[1] = DAT_08003a60[1] & 0xfffdffff | RCC_OscInitStruct->HSEPredivValue;\n        }\n        DAT_08003a60[1] =\n             DAT_08003a60[1] & 0xffc2ffff |\n             (RCC_OscInitStruct->PLL).PLLSource | (RCC_OscInitStruct->PLL).PLLMUL;\n        *DAT_08003a64 = 1;\n        uVar5 = HAL_GetTick();\n        do {\n          if ((*DAT_08003a60 & 0x2000000) != 0) {\n            return HAL_OK;\n          }\n          uVar4 = HAL_GetTick();\n        } while (uVar4 - uVar5 < 3);\n        return HAL_TIMEOUT;\n      }\n      uVar4 = HAL_GetTick();\n    } while (uVar4 - uVar5 < 3);\n    HVar3 = HAL_TIMEOUT;\n  }\n  else {\n    *DAT_08003a64 = 0;\n    uVar5 = HAL_GetTick();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        return HAL_OK;\n      }\n      uVar4 = HAL_GetTick();\n    } while (uVar4 - uVar5 < 3);\n    HVar3 = HAL_TIMEOUT;\n  }\n  return HVar3;\n}\n\n",
            "called": [
                "HAL_GetTick",
                "RCC_Delay"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003688",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "FUNC_08003688"
        },
        "FUN_08004ec4": {
            "renaming": {
                "FUN_08004ec4": "handle_i2c_receive_08004ec4",
                "hi2c": "handle",
                "piVar1": "i2c_obj",
                "uVar2": "buffer_size",
                "i2c_onSlaveReceive": "on_slave_receive",
                "_func_void_uint8_t_ptr_int": "function_pointer",
                "slaveMode": "slave_mode",
                "handle": "handle_struct",
                "i2cTxRxBuffer": "tx_rx_buffer",
                "HAL_I2C_EnableListen_IT": "enable_listen_interrupt"
            },
            "code": "void handle_i2c_receive_08004ec4(I2C_HandleTypeDef *handle)\n{\n  i2c_t *i2c_obj;\n  uint8_t buffer_size;\n  \n  i2c_obj = get_i2c_obj(handle);\n  if (((i2c_obj->on_slave_receive != NULL) && (i2c_obj->slave_mode == SLAVE_MODE_ENABLED)) && ((buffer_size = 0x20 - *(uint8_t *)&(i2c_obj->handle).XferSize & 0xff) != 0)) {\n    (*i2c_obj->on_slave_receive)(i2c_obj->tx_rx_buffer, buffer_size);\n  }\n  HAL_I2C_EnableListen_IT(handle);\n  return;\n}",
            "called": [
                "get_i2c_obj",
                "HAL_I2C_EnableListen_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ec4",
            "calling": [
                "I2C_Slave_AF",
                "I2C_Slave_STOPF",
                "I2C_ITError"
            ],
            "imported": false,
            "current_name": "handle_i2c_receive_08004ec4"
        },
        "FUN_08000178": {
            "renaming": {
                "FUN_08000178": "count_characters_08000178",
                "__s": "string",
                "pcVar2": "current_position",
                "cVar1": "current_character",
                "pcVar3": "current_position"
            },
            "code": "size_t count_characters_08000178(char* string) {\n    char current_character;\n    char* current_position;\n    current_position = string;\n    do {\n        current_position++;\n        current_character = *current_position;\n    } while (current_character != \"\\0\");\n    return (size_t)(current_position + (-1 - (int)string));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "printNumber",
                "print"
            ],
            "imported": false,
            "current_name": "count_characters_08000178"
        },
        "FUN_08004418": {
            "renaming": {
                "FUN_08004418": "do_nothing_08004418"
            },
            "code": "\nvoid do_nothing_08004418(UART_HandleTypeDef *huart)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004418",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08004418"
        },
        "FUN_08006c88": {
            "renaming": {
                "FUN_08006c88": "allocate_memory_for_struct_08006c88",
                "param_1": "size_of_struct",
                "param_2": "num_of_structs",
                "puVar1": "struct_ptr",
                "iVar2": "total_size"
            },
            "code": "undefined4 * allocate_memory_for_struct_08006c88(int size_of_struct, int num_of_structs)\n{\n  undefined4 *struct_ptr;\n  int total_size = (num_of_structs - 1) * sizeof(struct) + sizeof(int) * 2;\n  struct_ptr = (undefined4 *)_malloc_r(size_of_struct, total_size);\n  if (struct_ptr != (undefined4 *)0x0) {\n    *struct_ptr = 0;\n    *(struct_ptr + 1) = num_of_structs;\n    *(struct_ptr + 2) = struct_ptr + 3;\n    memset(struct_ptr + 3, 0, total_size - sizeof(int) * 2);\n  }\n  return struct_ptr;\n}",
            "called": [
                "memset",
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c88",
            "calling": [
                "__sfp"
            ],
            "imported": false,
            "current_name": "allocate_memory_for_struct_08006c88"
        },
        "FUN_080060e4": {
            "renaming": {
                "FUN_080060e4": "handle_gpio_interrupt_080060e4",
                "GPIO_Pin": "pin",
                "bVar1": "pin_id",
                "PTR_gpio_irq_conf_08006100": "gpio_irq_conf",
                "0x14": "IRQ_CONF_SIZE",
                "0xc": "IRQ_CONF_ENABLED_OFFSET",
                "4": "IRQ_CONF_CALLBACK_OFFSET"
            },
            "code": "void handle_gpio_interrupt_080060e4(uint16_t pin)\n{\n  uint8_t pin_id = get_pin_id(pin);\n  if (*(int *)(PTR_gpio_irq_conf_08006100 + (uint)pin_id * IRQ_CONF_SIZE + IRQ_CONF_ENABLED_OFFSET) != 0) {\n    std::function<void()>::operator__ ((function_void___ *)(PTR_gpio_irq_conf_08006100 + (uint)pin_id * IRQ_CONF_SIZE + IRQ_CONF_CALLBACK_OFFSET));\n  }\n  return;\n}",
            "called": [
                "get_pin_id",
                "operator()"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060e4",
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_gpio_interrupt_080060e4"
        },
        "FUN_0800258c": {
            "renaming": {
                "FUN_0800258c": "dma_configure_0800258c",
                "*hdma": "*dma_handle",
                "hdma->State": "dma_handle->State",
                "hdma->ErrorCode": "dma_handle->ErrorCode",
                "hdma->Instance": "dma_handle->Instance",
                "DMA_Channel_TypeDef": "DMA_Channel",
                "pDVar2": "channel",
                "DAT_0800261c": "PTR_DAT_0800261c",
                "uVar1": "channel_mask",
                "DMA_HandleTypeDef": "DMA_Handle"
            },
            "code": "HAL_StatusTypeDef dma_configure_0800258c(DMA_HandleTypeDef *dma_handle)\n{\n  uint32_t channel_mask;\n  DMA_Channel_TypeDef *channel;\n  \n  if (dma_handle->State != HAL_DMA_STATE_BUSY) {\n    dma_handle->ErrorCode = 4;\n    return HAL_ERROR;\n  }\n  dma_handle->Instance->CCR &= ~(1 << 0); // Clear the EN bit\n  dma_handle->Instance->CCR &= ~(1 << 1); // Clear the TCIE bit\n  channel = dma_handle->Instance;\n  if (channel == DAT_0800261c) {\n    channel_mask = 1;\n  }\n  else if (channel == (DMA_Channel_TypeDef *)&DAT_0800261c[1].CNDTR) {\n    channel_mask = 0x10;\n  }\n  else if (channel == (DMA_Channel_TypeDef *)&DAT_0800261c[2].CPAR) {\n    channel_mask = 0x100;\n  }\n  else if (channel == (DMA_Channel_TypeDef *)&DAT_0800261c[3].CMAR) {\n    channel_mask = 0x1000;\n  }\n  else if (channel == DAT_0800261c + 5) {\n    channel_mask = 0x10000;\n  }\n  else if (channel == (DMA_Channel_TypeDef *)&DAT_0800261c[6].CNDTR) {\n    channel_mask = 0x100000;\n  }\n  else {\n    channel_mask = 0x1000000;\n  }\n  *(uint32_t *)(PTR_DAT_08002620 + 4) = channel_mask;\n  dma_handle->State = HAL_DMA_STATE_READY;\n  dma_handle->Lock = HAL_UNLOCKED;\n  if (dma_handle->XferAbortCallback != NULL) {\n    (*dma_handle->XferAbortCallback)(dma_handle);\n    return HAL_OK;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800258c",
            "calling": [
                "I2C_ITError",
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "dma_configure_0800258c"
        },
        "FUN_08004e20": {
            "renaming": {
                "FUN_08004e20": "handle_timer_interrupt_08004e20",
                "PTR_timer_handles_08004e30": "PTR_timer_handles",
                "TIM_HandleTypeDef": "TimerHandle",
                "HAL_TIM_IRQHandler": "handle_timer_interrupt_request"
            },
            "code": "void handle_timer_interrupt_08004e20(void)\n{\n    TIM_HandleTypeDef *timer_handle = *(TIM_HandleTypeDef **)PTR_timer_handles_08004e30_08004e30;\n    if (timer_handle != NULL) {\n        HAL_TIM_IRQHandler(timer_handle);\n    }\n    return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e20",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004e20"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "infiniteLoop_0800573c",
                "status_UNUSED": "unusedStatus"
            },
            "code": "void infiniteLoop_0800573c(int unusedStatus) {\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [
                "_exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "_exit",
                "abort"
            ],
            "imported": false,
            "current_name": "infiniteLoop_0800573c"
        },
        "FUN_080032b4": {
            "renaming": {
                "FUN_080032b4": "i2c_data_transfer_080032b4",
                "*hi2c": "*handle",
                "HVar1": "i2c_state",
                "pIVar2": "i2c_instance",
                "puVar3": "buffer_ptr",
                "tmpreg": "tmp_reg"
            },
            "code": "HAL_StatusTypeDef_conflict i2c_data_transfer_080032b4(I2C_HandleTypeDef *handle)\n{\n  HAL_I2C_StateTypeDef i2c_state;\n  I2C_TypeDef *i2c_instance;\n  uint8_t *buffer_ptr;\n  uint32_t tmp_reg;\n  \n  i2c_state = handle->State;\n  i2c_instance = handle->Instance;\n  i2c_instance->CR2 &= 0xfffff8ff;\n  i2c_instance->CR1 |= 1;\n  i2c_instance->CR1 &= 0xfffffbff;\n  \n  if ((i2c_instance->CR2 & 0x800) != 0) {\n    if ((handle->State == HAL_I2C_STATE_BUSY_RX) || (handle->State == HAL_I2C_STATE_BUSY_RX_LISTEN)) {\n      handle->XferCount = (uint16_t)handle->hdmarx->Instance->CNDTR;\n    }\n    else {\n      handle->XferCount = (uint16_t)handle->hdmatx->Instance->CNDTR;\n    }\n  }\n  \n  if (handle->XferCount != 0) {\n    if ((i2c_instance->SR1 & 4) != 0) {\n      buffer_ptr = handle->pBuffPtr;\n      handle->pBuffPtr = buffer_ptr + 1;\n      *buffer_ptr = (uint8_t)i2c_instance->DR;\n      handle->XferCount--;\n    }\n    if ((i2c_instance->SR1 & 0x40) != 0) {\n      buffer_ptr = handle->pBuffPtr;\n      handle->pBuffPtr = buffer_ptr + 1;\n      *buffer_ptr = (uint8_t)i2c_instance->DR;\n      handle->XferCount--;\n    }\n    handle->ErrorCode |= 4;\n  }\n  \n  if (handle->ErrorCode == 0) {\n    if (((i2c_state == HAL_I2C_STATE_LISTEN) || (i2c_state == HAL_I2C_STATE_BUSY_RX_LISTEN)) ||\n       (i2c_state == HAL_I2C_STATE_BUSY_TX_LISTEN)) {\n      handle->XferOptions = DAT_080033b4;\n      handle->PreviousState = 0;\n      handle->State = HAL_I2C_STATE_READY;\n      handle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_ListenCpltCallback(handle);\n    }\n    else if ((handle->PreviousState == 0x22) || (i2c_state == HAL_I2C_STATE_BUSY_RX)) {\n      handle->PreviousState = 0;\n      handle->State = HAL_I2C_STATE_READY;\n      handle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_SlaveRxCpltCallback(handle);\n    }\n  }\n  else {\n    I2C_ITError(handle);\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveRxCpltCallback",
                "I2C_ITError",
                "HAL_I2C_ListenCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032b4",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_data_transfer_080032b4"
        },
        "FUN_08004d06": {
            "renaming": {
                "FUN_08004d06": "returnNonNull_08004d06",
                "a": "ptr1",
                "b": "ptr2"
            },
            "code": "void * returnNonNull_08004d06(void *ptr1, void *ptr2) {\n  if (ptr1 != ptr2) {\n    if (ptr1 == NULL) {\n      return ptr2;\n    }\n    if (ptr2 == NULL) {\n      return ptr1;\n    }\n    ptr1 = NULL;\n  }\n  return ptr1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d06",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "returnNonNull_08004d06"
        },
        "FUN_080056d8": {
            "renaming": {
                "FUN_080056d8": "allocate_memory_080056d8",
                "incr": "requested_size",
                "pcVar1": "current_heap_end",
                "pcVar2": "new_heap_end"
            },
            "code": "caddr_t allocate_memory_080056d8(int requested_size)\n{\n  caddr_t current_heap_end = *(caddr_t *)PTR_heap_end_08005708;\n  caddr_t new_heap_end = current_heap_end + requested_size;\n  \n  if (*(int *)PTR_heap_end_08005708 == 0) {\n    *(undefined **)PTR_heap_end_08005708 = PTR__ebss_0800570c;\n  }\n  \n  if (new_heap_end <= &stack0x00000000) {\n    *(caddr_t *)PTR_heap_end_08005708 = new_heap_end;\n    return current_heap_end;\n  }\n  \n  *(undefined4 *)PTR_errno_08005710 = 0xc;\n  return (caddr_t)0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d8",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_080056d8"
        },
        "FUN_080019f6": {
            "renaming": {
                "__thiscall PID::FUN_080019f6": "calculate_PID_output",
                "this": "pid",
                "iVar1": "isOutputMax",
                "uVar2": "outputMax",
                "uVar3": "outputSum",
                "uVar4": "lastOutput",
                "uVar5": "outputMin",
                "myInput": "input",
                "myOutput": "output",
                "lastInput": "lastInput",
                "outMax": "outputMax",
                "outMin": "outputMin",
                "FUN_080019f6": "calculate_PID_output_080019f6"
            },
            "code": "void __thiscall calculate_PID_output_080019f6(PID *pid)\n{\n  int isOutputMax;\n  int isOutputMin;\n  float outputSum;\n  float lastInput;\n  float outputMax;\n  float outputMin;\n  float input;\n  float output;\n\n  input = *(float *)pid->myInput;\n  outputSum = *(float *)pid->myOutput;\n  lastInput = pid->lastInput;\n  outputMax = pid->outMax;\n  outputMin = pid->outMin;\n\n  if (outputSum > outputMax)\n  {\n    outputSum = outputMax;\n  }\n  else if (outputSum < outputMin)\n  {\n    outputSum = outputMin;\n  }\n\n  pid->lastInput = input;\n  pid->outputSum = outputSum;\n\n  output = pid->kp * input;\n  output += pid->ki * outputSum;\n  output -= pid->kd * (input - lastInput);\n\n  if (output > outputMax)\n  {\n    output = outputMax;\n  }\n  else if (output < outputMin)\n  {\n    output = outputMin;\n  }\n\n  *(float *)pid->myOutput = output;\n}\n",
            "called": [
                "__aeabi_dcmplt",
                "__aeabi_dcmpgt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019f6",
            "calling": [
                "SetMode"
            ],
            "imported": false,
            "current_name": "calculate_PID_output_080019f6"
        },
        "FUN_08002f9c": {
            "renaming": {
                "FUN_08002f9c": "i2c_receive_08002f9c",
                "*hi2c": "*handle",
                "puVar1": "buffer_ptr"
            },
            "code": "HAL_StatusTypeDef i2c_receive_08002f9c(I2C_HandleTypeDef *handle)\n{\n  uint8_t *buffer_ptr;\n  if (handle->State == HAL_I2C_STATE_BUSY_RX) {\n    if (handle->XferCount < 4) {\n      if (handle->XferCount - 2 < 2) {\n        if (handle->XferOptions == 2) {\n          handle->Instance->CR1 |= 0x400;\n        }\n        else {\n          handle->Instance->CR1 &= 0xfffffbff;\n          handle->Instance->CR1 |= 0x800;\n        }\n        handle->Instance->CR2 &= 0xfffffbff;\n      }\n      else {\n        if (handle->XferOptions == 2) {\n          handle->Instance->CR1 |= 0x400;\n        }\n        else {\n          handle->Instance->CR1 &= 0xfffffbff;\n        }\n        handle->Instance->CR2 &= 0xfffff8ff;\n        buffer_ptr = handle->pBuffPtr;\n        handle->pBuffPtr = buffer_ptr + 1;\n        *buffer_ptr = (uint8_t)handle->Instance->DR;\n        handle->XferCount--;\n        handle->State = HAL_I2C_STATE_READY;\n        handle->PreviousState = 0;\n        if (handle->Mode == HAL_I2C_MODE_MEM) {\n          handle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MemRxCpltCallback(handle);\n        }\n        else {\n          handle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MasterRxCpltCallback(handle);\n        }\n      }\n    }\n    else {\n      buffer_ptr = handle->pBuffPtr;\n      handle->pBuffPtr = buffer_ptr + 1;\n      *buffer_ptr = (uint8_t)handle->Instance->DR;\n      handle->XferCount--;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9c",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_receive_08002f9c"
        },
        "FUN_08005510": {
            "renaming": {
                "FUN_08005510": "set_serial_rx_callback_08005510",
                "obj": "serial",
                "callback": "rx_callback",
                "bVar1": "index",
                "uVar2": "rx_active"
            },
            "code": "void set_serial_rx_callback_08005510(serial_t *serial, _func_void_serial_t_ptr *callback) {\n    if (serial != NULL) {\n        uint8_t rx_active = serial_rx_active(serial);\n        if (rx_active == 0) {\n            uint8_t index = serial->index;\n            _func_void_serial_t_ptr **rx_callback = (_func_void_serial_t_ptr **)(PTR_rx_callback_0800555c + index * 4);\n            *rx_callback = callback;\n            serial_t **rx_callback_obj = (serial_t **)(PTR_rx_callback_obj_08005560 + index * 4);\n            *rx_callback_obj = serial;\n            HAL_NVIC_SetPriority(serial->irq, 0, 1);\n            HAL_NVIC_EnableIRQ(serial->irq);\n            UART_HandleTypeDef **uart_handlers = (UART_HandleTypeDef **)(PTR_uart_handlers_08005564 + index * 4);\n            HAL_UART_Receive_IT(*uart_handlers, &serial->recv, 1);\n        }\n    }\n}",
            "called": [
                "serial_rx_active",
                "HAL_NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority",
                "HAL_UART_Receive_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005510",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "set_serial_rx_callback_08005510"
        },
        "FUN_08002f9a": {
            "renaming": {
                "FUN_08002f9a": "do_nothing_08002f9a"
            },
            "code": "\nvoid do_nothing_08002f9a(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9a",
            "calling": [
                "I2C_MasterReceive_BTF",
                "I2C_MasterReceive_RXNE"
            ],
            "imported": false,
            "current_name": "do_nothing_08002f9a"
        },
        "FUN_08005750": {
            "renaming": {
                "FUN_08005750": "get_process_id_08005750"
            },
            "code": "__pid_t get_process_id_08005750(void)\n{\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005750",
            "calling": [
                "_getpid_r"
            ],
            "imported": false,
            "current_name": "get_process_id_08005750"
        },
        "FUN_08002cf2": {
            "renaming": {
                "FUN_08002cf2": "check_address_match_08002cf2",
                "*hi2c": "*i2c_handle",
                "AddrMatchCode": "address_match_code",
                "&(hi2c->Init).OwnAddress1": "&(i2c_handle->Init).OwnAddress1",
                "&(hi2c->Init).OwnAddress2": "&(i2c_handle->Init).OwnAddress2"
            },
            "code": "HAL_StatusTypeDef check_address_match_08002cf2(I2C_HandleTypeDef *i2c_handle)\n{\n  uint16_t address_match_code;\n  if ((i2c_handle->Instance->SR2 & 0x80) == 0) {\n    address_match_code = *(uint16_t *)&(i2c_handle->Init).OwnAddress1;\n  }\n  else {\n    address_match_code = *(uint16_t *)&(i2c_handle->Init).OwnAddress2;\n  }\n  HAL_I2C_AddrCallback(i2c_handle,(i2c_handle->Instance->SR2 & 4) == 0,address_match_code);\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_AddrCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cf2",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "check_address_match_08002cf2"
        },
        "FUN_08006288": {
            "renaming": {
                "FUN_08006288": "allocate_memory_block_08006288",
                "param_1": "mem_block_size",
                "param_2": "requested_size",
                "puVar1": "start_of_heap",
                "uVar2": "sbrk_result",
                "puVar3": "current_block",
                "iVar4": "sbrk_return_value",
                "puVar5": "previous_block",
                "uVar6": "block_size_difference",
                "puVar7": "block_to_use",
                "uVar8": "padded_requested_size",
                "__malloc_lock": "lock_memory_allocation",
                "__malloc_unlock": "unlock_memory_allocation",
                "_sbrk_r": "request_memory_from_heap",
                "PTR___malloc_sbrk_start_08006340": "start_of_heap_pointer",
                "PTR___malloc_free_list_0800633c": "free_list_pointer"
            },
            "code": "uint allocate_memory_block_08006288(undefined4 *mem_block_size, uint requested_size)\n{\n    uint *current_block;\n    uint *previous_block;\n    uint block_size;\n    uint padded_requested_size = (requested_size + 3 & 0xfffffffc) + 8;\n    if (padded_requested_size < 0xc) {\n        padded_requested_size = 0xc;\n    }\n    if (((int)padded_requested_size < 0) || (padded_requested_size < requested_size)) {\n        *mem_block_size = 0xc;\n    }\n    else {\n        __malloc_lock();\n        previous_block = *(uint **)PTR___malloc_free_list_0800633c;\n        current_block = previous_block;\n        while (current_block != (uint *)0x0) {\n            block_size = *current_block - padded_requested_size;\n            if (-1 < (int)block_size) {\n                if (block_size < 0xc) {\n                    if (previous_block == current_block) {\n                        uint next_block = previous_block[1];\n                        *(uint *)PTR___malloc_free_list_0800633c = next_block;\n                    }\n                    else {\n                        uint next_block = current_block[1];\n                    }\n                    if (previous_block != current_block) {\n                        previous_block[1] = next_block;\n                        previous_block = current_block;\n                    }\n                }\n                else {\n                    *current_block = block_size;\n                    *(uint *)((int)current_block + block_size) = padded_requested_size;\n                    previous_block = (uint *)((int)current_block + block_size);\n                }\n                goto end;\n            }\n            previous_block = current_block;\n            current_block = (uint *)current_block[1];\n        }\n        if (*(int *)PTR___malloc_sbrk_start_08006340 == 0) {\n            undefined4 sbrk_result = _sbrk_r(mem_block_size);\n            *(undefined4 *)PTR___malloc_sbrk_start_08006340 = sbrk_result;\n        }\n        current_block = (uint *)_sbrk_r(mem_block_size,padded_requested_size);\n        if ((current_block != (uint *)0xffffffff) && ((previous_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block || (_sbrk_r(mem_block_size,(int)previous_block - (int)current_block) != -1)))) {\n            *previous_block = padded_requested_size;\n            end:\n            __malloc_unlock(mem_block_size);\n            uint aligned_block_size = (int)previous_block + 0xbU & 0xfffffff8;\n            int block_padding = aligned_block_size - (int)(previous_block + 1);\n            if (block_padding != 0) {\n                *(int *)((int)previous_block + block_padding) = -block_padding;\n                return aligned_block_size;\n            }\n            return aligned_block_size;\n        }\n        *mem_block_size = 0xc;\n        __malloc_unlock(mem_block_size);\n    }\n    return 0;\n}",
            "called": [
                "__malloc_unlock",
                "_sbrk_r",
                "__malloc_lock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006288",
            "calling": [
                "__smakebuf_r",
                "__sfmoreglue"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08006288"
        },
        "FUN_08000188": {
            "renaming": {
                "FUN_08000188": "FUNC_08000188"
            },
            "code": "\nulonglong FUNC_08000188(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar4 = param_2 ^ 0x80000000;\n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((uVar4 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = uVar4;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((uVar4 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        uVar4 = param_4;\n      }\n      return CONCAT44(uVar4,param_1);\n    }\n    if (uVar4 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(uVar4,uVar4) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(uVar4 + 0x100000,param_1);\n    }\n    uVar4 = uVar4 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(uVar4 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar12 = uVar4;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar12 = param_4;\n    param_3 = param_1;\n    param_4 = uVar4;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar12,uVar8);\n  }\n  uVar9 = uVar12 & 0xfffff | 0x100000;\n  if ((uVar12 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar4 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar4 = uVar4 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar5 = uVar4 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar5;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar4 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar11 = uVar4 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar4 = (int)uVar4 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar4;\n    uVar9 = uVar9 + ((int)uVar4 >> 0x1f) + (uint)CARRY4(uVar8,uVar4);\n  }\n  uVar4 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | uVar4,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_080002a0;\n  uVar3 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar3 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar3 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar3 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar3 = uVar3 << (uVar10 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | uVar4,uVar3);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar3 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(uVar4 | uVar7 >> (uVar10 & 0xff),\n                    uVar3 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [
                "__aeabi_dadd"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000188",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08000188"
        },
        "FUN_08002004": {
            "renaming": {
                "FUN_08002004": "enable_ADC_08002004",
                "*hadc": "*ADC_Handle",
                "HVar1": "status",
                "pAVar2": "ADC_Instance"
            },
            "code": "HAL_StatusTypeDef_conflict enable_ADC_08002004(ADC_HandleTypeDef *hadc)\n{\n    HAL_StatusTypeDef_conflict status;\n    ADC_TypeDef *ADC_Instance;\n\n    if (hadc->Lock == HAL_LOCKED) {\n        return HAL_BUSY;\n    }\n    hadc->Lock = HAL_LOCKED;\n    status = ADC_Enable(hadc);\n    if (status == HAL_OK) {\n        hadc->State = (hadc->State & 0xfffffcfe) | 0x100;\n        ADC_Instance = hadc->Instance;\n        if ((ADC_Instance == PTR_DAT_080020e8) && ((PTR_DAT_080020e8[-0xd].JOFR1 & 0xf0000) != 0)) {\n            hadc->State |= 0x100000;\n            if ((*(uint *)(PTR_DAT_080020ec + 4) & 0x400) != 0) {\n                hadc->State = (hadc->State & 0xffffcfff) | 0x1000;\n            }\n        }\n        else {\n            hadc->State &= 0xffefffff;\n            if ((ADC_Instance->CR1 & 0x400) != 0) {\n                hadc->State = (hadc->State & 0xffffcfff) | 0x1000;\n            }\n        }\n        if ((hadc->State & 0x1000) == 0) {\n            hadc->ErrorCode = 0;\n        }\n        else {\n            hadc->ErrorCode &= 0xfffffff9;\n        }\n        hadc->Lock = HAL_UNLOCKED;\n        ADC_Instance->SR = 0xfffffffd;\n        ADC_Instance = hadc->Instance;\n        if (((ADC_Instance->CR2 & 0xe0000) == 0xe0000) && ((ADC_Instance != PTR_DAT_080020e8) || ((PTR_DAT_080020e8[-0xd].JOFR1 & 0xf0000) == 0))) {\n            ADC_Instance->CR2 |= 0x500000;\n        }\n        else {\n            ADC_Instance->CR2 |= 0x100000;\n        }\n    }\n    else {\n        hadc->Lock = HAL_UNLOCKED;\n    }\n    return status;\n}",
            "called": [
                "ADC_Enable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002004",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "enable_ADC_08002004"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "handle_i2c_errors_08004f3c",
                "PTR_i2c_handles_08004f48": "PTR_i2c_handles",
                "i2c_handle": "i2c_handle"
            },
            "code": "void handle_i2c_errors_08004f3c(void)\n{\n  I2C_HandleTypeDef *i2c_handle = *(I2C_HandleTypeDef **)(PTR_i2c_handles_08004f48_08004f48 + 4);\n  HAL_I2C_ER_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_errors_08004f3c"
        },
        "FUN_08005754": {
            "renaming": {
                "FUN_08005754": "read_analog_value_08005754",
                "ulPin": "pin_index",
                "bVar1": "is_valid_pin",
                "pin": "pin_name",
                "uVar2": "adc_value",
                "uVar3": "result",
                "uVar4": "resolution_bits"
            },
            "code": "uint32_t read_analog_value_08005754(uint32_t pin_index) {\n  bool is_valid_pin;\n  PinName_conflict pin_name;\n  uint16_t adc_value;\n  uint resolution_bits;\n  uint32_t result;\n  if (pin_index < 14) {\n    is_valid_pin = (pin_index + 46) < 60;\n  }\n  else {\n    is_valid_pin = pin_index < 60;\n  }\n  if (is_valid_pin) {\n    if (pin_index < 14) {\n      pin_index += 46;\n    }\n    pin_name = PTR_digitalPin_080057ac[pin_index];\n  }\n  else {\n    pin_name = NC;\n  }\n  if (pin_name == NC) {\n    result = 0;\n  }\n  else {\n    adc_value = adc_read_value(pin_name);\n    result = (uint32_t)adc_value;\n    resolution_bits = *(uint *)PTR__readResolution_080057b0;\n    if (resolution_bits != 12) {\n      if (resolution_bits < 12) {\n        return (uint)(adc_value >> (12 - resolution_bits & 0xff));\n      }\n      return result << (resolution_bits - 12 & 0xff);\n    }\n  }\n  return result;\n}",
            "called": [
                "adc_read_value"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005754",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "read_analog_value_08005754"
        },
        "FUN_08005fc8": {
            "renaming": {
                "FUN_08005fc8": "initialize_gpio_irq_configuration_08005fc8",
                "__initialize_p": "should_initialize",
                "__priority": "priority",
                "puVar1": "gpio_irq_conf"
            },
            "code": "void initialize_gpio_irq_configuration_08005fc8(int should_initialize, int priority) {\n    if (should_initialize != 1) {\n        return;\n    }\n    if (priority == 0xffff) {\n        unsigned char *gpio_irq_conf = PTR_gpio_irq_conf_08006068;\n        gpio_irq_conf[0] = 6;\n        *(unsigned int *)(gpio_irq_conf + 0xc) = 0;\n        gpio_irq_conf[0x14] = 7;\n        *(unsigned int *)(gpio_irq_conf + 0x20) = 0;\n        gpio_irq_conf[0x28] = 8;\n        *(unsigned int *)(gpio_irq_conf + 0x34) = 0;\n        gpio_irq_conf[0x3c] = 9;\n        *(unsigned int *)(gpio_irq_conf + 0x48) = 0;\n        gpio_irq_conf[0x50] = 10;\n        *(unsigned int *)(gpio_irq_conf + 0x5c) = 0;\n        gpio_irq_conf[100] = 0x17;\n        *(unsigned int *)(gpio_irq_conf + 0x70) = 0;\n        gpio_irq_conf[0x78] = 0x17;\n        *(unsigned int *)(gpio_irq_conf + 0x84) = 0;\n        gpio_irq_conf[0x8c] = 0x17;\n        *(unsigned int *)(gpio_irq_conf + 0x98) = 0;\n        gpio_irq_conf[0xa0] = 0x17;\n        *(unsigned int *)(gpio_irq_conf + 0xac) = 0;\n        gpio_irq_conf[0xb4] = 0x17;\n        *(unsigned int *)(gpio_irq_conf + 0xc0) = 0;\n        gpio_irq_conf[200] = 0x28;\n        *(unsigned int *)(gpio_irq_conf + 0xd4) = 0;\n        gpio_irq_conf[0xdc] = 0x28;\n        *(unsigned int *)(gpio_irq_conf + 0xe8) = 0;\n        gpio_irq_conf[0xf0] = 0x28;\n        *(unsigned int *)(gpio_irq_conf + 0xfc) = 0;\n        gpio_irq_conf[0x104] = 0x28;\n        *(unsigned int *)(gpio_irq_conf + 0x110) = 0;\n        gpio_irq_conf[0x118] = 0x28;\n        *(unsigned int *)(gpio_irq_conf + 0x124) = 0;\n        gpio_irq_conf[300] = 0x28;\n        *(unsigned int *)(gpio_irq_conf + 0x138) = 0;\n        __aeabi_atexit(0, DAT_08006070, PTR___dso_handle_0800606c);\n    }\n}",
            "called": [
                "__aeabi_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fc8",
            "calling": [
                "_GLOBAL__sub_I__Z22stm32_interrupt_enableP12GPIO_TypeDeftSt8functionIFvvEEm"
            ],
            "imported": false,
            "current_name": "initialize_gpio_irq_configuration_08005fc8"
        },
        "FUN_08002ab8": {
            "renaming": {
                "FUN_08002ab8": "transfer_byte_08002ab8",
                "*hi2c": "*handle",
                "pbVar1": "buffer_ptr",
                "hi2c->XferCount": "handle->XferCount",
                "hi2c->pBuffPtr": "handle->pBuffPtr",
                "hi2c->Instance->DR": "handle->Instance->DR",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef"
            },
            "code": "HAL_StatusTypeDef transfer_byte_08002ab8(I2C_HandleTypeDef *handle)\n{\n  uint8_t *buffer_ptr;\n  if (handle->XferCount != 0) {\n    buffer_ptr = handle->pBuffPtr;\n    handle->pBuffPtr = buffer_ptr + 1;\n    handle->Instance->DR = (uint8_t)*buffer_ptr;\n    handle->XferCount--;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ab8",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "transfer_byte_08002ab8"
        },
        "FUN_080068f0": {
            "renaming": {
                "FUN_080068f0": "format_string_output_080068f0",
                "__format": "format",
                "in_r1": "arg1",
                "in_r2": "arg2",
                "in_r3": "arg3",
                "iVar1": "impure_ptr",
                "pcVar2": "format_string",
                "uStack_c": "stack1",
                "uStack_8": "stack2",
                "uStack_4": "stack3"
            },
            "code": "int format_string_output_080068f0(char* format, ...)\n{\n    int impure_ptr = *(int*)PTR__impure_ptr_0800691c;\n    char* format_string = format;\n    undefined4 arg1 = in_r1;\n    undefined4 arg2 = in_r2;\n    undefined4 arg3 = in_r3;\n    undefined4 stack1 = arg1;\n    undefined4 stack2 = arg2;\n    undefined4 stack3 = arg3;\n    if ((impure_ptr != 0) && (*(int*)(impure_ptr + 0x18) == 0)) {\n        __sinit(impure_ptr);\n    }\n    int result = _vfformat_string_output_080068f0_r(impure_ptr, *(undefined4*)(impure_ptr + 8), format_string, &stack1, format_string, &stack1);\n    return result;\n}",
            "called": [
                "__sinit",
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068f0",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "format_string_output_080068f0"
        },
        "FUN_080066b0": {
            "renaming": {
                "FUN_080066b0": "FUNC_080066b0"
            },
            "code": "\nuint FUNC_080066b0(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  void *pvVar4;\n  int iVar5;\n  undefined *puVar6;\n  uint uVar7;\n  uint **ppuVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined *puVar11;\n  undefined *__s;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  __s = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_0800686a;\n          if (bVar1 != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar6 = PTR_s_0123456789ABCDEF_080068ec;\nLAB_080067fa:\n          uVar7 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar7 & 0x80) == 0) && ((int)(uVar7 << 0x19) < 0)) {\n            uVar9 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar9 = *puVar3;\n          }\n          if ((int)(uVar7 << 0x1f) < 0) {\n            *param_2 = uVar7 | 0x20;\n          }\n          if (uVar9 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar7 = 0x10;\nLAB_08006790:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_080066e0;\n          uVar9 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar9 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar9 & 0x40) == 0) goto LAB_08006700;\n            uVar9 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08006700:\n            uVar9 = *puVar3;\n          }\n          if ((int)uVar9 < 0) {\n            uVar9 = -uVar9;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar7 = 10;\n          puVar6 = PTR_s_0123456789ABCDEF_080068ec;\n        }\n        uVar10 = param_2[1];\n        param_2[2] = uVar10;\n        puVar11 = __s;\n        if ((int)uVar10 < 0) {\n          if (uVar9 != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(undefined *)((int)param_2 + 0x42) = *puVar6;\n          puVar11 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar9 == 0) {\n            if (uVar10 != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              uVar10 = uVar9 / uVar7;\n              puVar11 = puVar11 + -1;\n              *puVar11 = puVar6[uVar9 - uVar7 * uVar10];\n              uVar9 = uVar10;\n            } while (uVar10 != 0);\n          }\n        }\n        if (((uVar7 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar11[-1] = 0x30;\n          puVar11 = puVar11 + -1;\n        }\n        param_2[4] = (int)__s - (int)puVar11;\n        __s = puVar11;\n        goto LAB_080067d6;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08006740:\n      __s = (undefined *)((int)param_2 + 0x42);\n      uVar9 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08006766:\n            uVar9 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar9 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar9 & 0x40) == 0) goto LAB_08006774;\n              uVar9 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08006774:\n              uVar9 = *puVar3;\n            }\n            puVar6 = PTR_s_0123456789ABCDEF_080068ec;\n            if (bVar1 == 0x6f) {\n              uVar7 = 8;\n            }\n            else {\n              uVar7 = 10;\n            }\n            goto LAB_08006790;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08006726:\n            puVar6 = PTR_s_0123456789abcdef_080068e8;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08006766;\n          if (bVar1 == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08006740;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      __s = (undefined *)*puVar3;\n      pvVar4 = memchr(__s,0,param_2[1]);\n      if (pvVar4 != (void *)0x0) {\n        param_2[1] = (int)pvVar4 - (int)__s;\n      }\n      uVar9 = param_2[1];\n    }\n    param_2[4] = uVar9;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  uVar9 = *param_2;\n  ppuVar8 = (uint **)*param_5;\n  uVar7 = param_2[5];\n  if ((uVar9 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\n    if ((uVar9 & 0x40) == 0) goto LAB_08006856;\n    *(short *)puVar3 = (short)uVar7;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\nLAB_08006856:\n    *puVar3 = uVar7;\n  }\nLAB_0800686a:\n  param_2[4] = 0;\nLAB_080067d6:\n  iVar2 = _printf_common(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,__s,param_2[4]), iVar2 == -1)) {\nLAB_080067ea:\n    uVar9 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar5 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar5 == -1) goto LAB_080067ea;\n      }\n    }\n    uVar9 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar9 = local_24[0];\n    }\n  }\n  return uVar9;\n}\n\n",
            "called": [
                "_printf_common",
                "memchr"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080066b0",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_080066b0"
        },
        "FUN_08002c52": {
            "renaming": {
                "FUN_08002c52": "do_nothing_08002c52"
            },
            "code": "\nvoid do_nothing_08002c52(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c52",
            "calling": [
                "I2C_SlaveTransmit_TXE",
                "I2C_Slave_AF"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c52"
        },
        "FUN_0800138e": {
            "renaming": {
                "FUN_0800138e": "setControlBit_0800138e",
                "this": "lcd",
                "_FUN_0800138econtrol": "_controlByte",
                "bVar1": "controlByte",
                "send": "send"
            },
            "code": "void __thiscall LiquidCrystal::setControlBit_0800138e(LiquidCrystal *lcd) {\n                        byte controlByte = lcd->_controlByte;\n                        lcd->_controlByte = controlByte | 0b00000100;\n                        send(lcd, controlByte | 0b00001100, \"\\0\");\n                    }",
            "called": [
                "send"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800138e",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "setControlBit_0800138e"
        },
        "FUN_08002c50": {
            "renaming": {
                "FUN_08002c50": "do_nothing_08002c50"
            },
            "code": "\nvoid do_nothing_08002c50(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c50",
            "calling": [
                "I2C_MasterReceive_BTF",
                "I2C_MasterReceive_RXNE"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c50"
        },
        "FUN_0800598a": {
            "renaming": {
                "FUN_0800598a": "read_serial_data_0800598a",
                "obj": "serial_conflict",
                "iVar1": "uart_return_value",
                "uVar2": "next_head_index",
                "c": "received_character"
            },
            "code": "void read_serial_data_0800598a(serial_t_conflict *serial_conflict) {\n  int uart_return_value;\n  ushort next_head_index;\n  uchar received_character;\n  \n  uart_return_value = uart_getc((serial_t*)serial_conflict, &received_character);\n  if ((uart_return_value == 0) && (next_head_index = (serial_conflict->rx_head + 1) & 0x3f, next_head_index != serial_conflict->rx_tail)) {\n    serial_conflict->rx_buff[serial_conflict->rx_head] = received_character;\n    serial_conflict->rx_head = next_head_index;\n  }\n  return;\n}",
            "called": [
                "uart_getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800598a",
            "calling": [],
            "imported": false,
            "current_name": "read_serial_data_0800598a"
        },
        "FUN_08001c88": {
            "renaming": {
                "FUN_08001c88": "set_interrupt_priority_and_init_08001c88",
                "DAT_08001ca8": "ptr_interrupt_flag_register",
                "HAL_NVIC_SetPriorityGrouping": "HAL_NVIC_SetPriorityGrouping",
                "FUN_08001c88Tick": "trigger_interrupt",
                "HAL_MspInit": "HAL_MspInit",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef_conflict set_interrupt_priority_and_init_08001c88(void)\n{\n  *DAT_08001ca8 = *DAT_08001ca8 | 0x10;\n  HAL_NVIC_SetPriorityGrouping(3);\n  trigger_interrupt(0xf);\n  HAL_MspInit();\n  return HAL_OK;\n}",
            "called": [
                "HAL_MspInit",
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_InitTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c88",
            "calling": [
                "hw_config_init"
            ],
            "imported": false,
            "current_name": "set_interrupt_priority_and_init_08001c88"
        },
        "FUN_08004e34": {
            "renaming": {
                "FUN_08004e34": "handle_timer_interrupt_08004e34",
                "PTR_timer_handles_08004e44": "PTR_timer_handles",
                "TIM_HandleTypeDef": "Timer_HandleTypeDef",
                "HAL_TIM_IRQHandler": "handle_timer_interrupt_request",
                "timer_handle": "active_timer_handle"
            },
            "code": "void handle_timer_interrupt_08004e34(void) {\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_08004e44_08004e44 + 4);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e34",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004e34"
        },
        "FUN_08001a44": {
            "renaming": {
                "FUN_08001a44": "set_auto_mode_08001a44",
                "this": "pid",
                "Mode": "mode",
                "bVar1": "auto_mode",
                "inAuto": "in_auto",
                "Initialize": "initialize"
            },
            "code": "void __thiscall PID::set_auto_mode_08001a44(PID *pid, int mode) {\n  bool auto_mode;\n  if (mode == 1) {\n    auto_mode = true;\n    if (pid->in_auto == false) {\n      pid->initialize();\n    }\n  } else {\n    auto_mode = false;\n  }\n  pid->in_auto = auto_mode;\n  return;\n}",
            "called": [
                "Initialize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a44",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "set_auto_mode_08001a44"
        },
        "FUN_08002c54": {
            "renaming": {
                "FUN_08002c54": "send_byte_to_i2c_08002c54",
                "hi2c": "i2c_handle",
                "HVar1": "i2c_state",
                "pbVar2": "buffer_ptr"
            },
            "code": "HAL_StatusTypeDef_conflict send_byte_to_i2c_08002c54(I2C_HandleTypeDef *i2c_handle)\n{\n  HAL_I2C_StateTypeDef i2c_state;\n  uint8_t *buffer_ptr;\n  i2c_state = i2c_handle->State;\n  if (i2c_handle->XferCount != 0) {\n    buffer_ptr = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_ptr + 1;\n    i2c_handle->Instance->DR = (uint)*buffer_ptr;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n    if ((i2c_handle->XferCount == 0) && (i2c_state == HAL_I2C_STATE_BUSY_TX_LISTEN)) {\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffffbff;\n      i2c_handle->PreviousState = 0x21;\n      i2c_handle->State = HAL_I2C_STATE_LISTEN;\n      HAL_I2C_SlaveTxCpltCallback(i2c_handle);\n    }\n    return HAL_OK;\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c54",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "send_byte_to_i2c_08002c54"
        },
        "FUN_080043b4": {
            "renaming": {
                "FUN_080043b4": "check_flag_status_080043b4",
                "huart": "uart_handle",
                "Flag": "flag",
                "Status": "status",
                "Tickstart": "start_time",
                "Timeout": "timeout",
                "uVar1": "current_time"
            },
            "code": "HAL_StatusTypeDef check_flag_status_080043b4(UART_HandleTypeDef *uart_handle, uint32_t flag, FlagStatus status, uint32_t start_time, uint32_t timeout) {\n    uint32_t current_time;\n    do {\n        bool flag_not_set = (flag & ~uart_handle->Instance->SR) == 0;\n        if (flag_not_set != (bool)status) {\n            return HAL_OK;\n        }\n        current_time = HAL_GetTick();\n    } while ((timeout == 0xffffffff) || ((timeout != 0) && (current_time - start_time <= timeout)));\n    uart_handle->Instance->CR1 &= 0xfffffe5f;\n    uart_handle->Instance->CR3 &= 0xfffffffe;\n    uart_handle->gState = HAL_UART_STATE_READY;\n    uart_handle->RxState = HAL_UART_STATE_READY;\n    uart_handle->Lock = HAL_UNLOCKED;\n    return HAL_TIMEOUT;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043b4",
            "calling": [
                "HAL_UART_Transmit"
            ],
            "imported": false,
            "current_name": "check_flag_status_080043b4"
        },
        "FUN_0800441a": {
            "renaming": {
                "FUN_0800441a": "initialize_uart_0800441a",
                "*huart": "*uart",
                "HAL_UART_StateTypeDef": "HAL_StatusTypeDef",
                "huart": "uart",
                "HAL_UART_MspInit": "HAL_UART_MspInit",
                "gState": "state",
                "Lock": "lock",
                "Instance": "instance",
                "CR1": "control_register_1",
                "CR2": "control_register_2",
                "CR3": "control_register_3",
                "ErrorCode": "error_code",
                "RxState": "rx_state"
            },
            "code": "HAL_StatusTypeDef initialize_uart_0800441a(UART_HandleTypeDef *uart)\n{\n    if (uart != NULL) {\n        if (uart->gState == HAL_UART_STATE_RESET) {\n            uart->Lock = HAL_UNLOCKED;\n            HAL_UART_MspInit(uart);\n        }\n        uart->gState = HAL_UART_STATE_BUSY;\n        uart->Instance->CR1 &= ~(1 << 13);\n        UART_SetConfig(uart);\n        uart->Instance->CR2 &= ~(1 << 11);\n        uart->Instance->CR3 &= ~(1 << 2);\n        uart->Instance->CR1 |= (1 << 13);\n        uart->ErrorCode = 0;\n        uart->gState = HAL_UART_STATE_READY;\n        uart->RxState = HAL_UART_STATE_READY;\n        return HAL_OK;\n    }\n    return HAL_ERROR;\n}",
            "called": [
                "UART_SetConfig",
                "HAL_UART_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800441a",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "initialize_uart_0800441a"
        },
        "FUN_08004d18": {
            "renaming": {
                "FUN_08004d18": "execute_RTC_user_callback_08004d18",
                "hrtc": "rtc_handle",
                "PTR_RTCUserCallback_08004d28": "user_callback_ptr",
                "PTR_callbackUserData_08004d2c": "callback_user_data_ptr"
            },
            "code": "void execute_RTC_user_callback_08004d18(RTC_HandleTypeDef *rtc_handle)\n{\n  code* user_callback = *(code **)PTR_RTCUserCallback_08004d28;\n  if (user_callback != NULL) {\n    user_callback(*(undefined4 *)PTR_callbackUserData_08004d2c);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d18",
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "imported": false,
            "current_name": "execute_RTC_user_callback_08004d18"
        },
        "FUN_080006d4": {
            "renaming": {
                "FUN_080006d4": "calculate_result_080006d4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "flag_2",
                "unaff_r4": "flag_3",
                "uVar2": "temp_1",
                "uVar3": "temp_2",
                "in_r12": "flag_4",
                "bVar4": "flag_1"
            },
            "code": "ulonglong calculate_result_080006d4(uint input_1, uint input_2, uint input_3, uint input_4) {\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint flag_1;\n  uint flag_2;\n  uint flag_3;\n  uint flag_4;\n  uint flag_5;\n  uint flag_6;\n  uint flag_7;\n  uint flag_8;\n  uint flag_9;\n  uint flag_10;\n  \n  temp_1 = input_4 >> 0x14;\n  if (input_2 != input_4 && temp_1 != input_4) {\n    flag_1 = (input_1 | input_2 << 1) == 0;\n    if (!flag_1) {\n      flag_1 = (input_3 | input_4 << 1) == 0;\n    }\n    if (flag_1) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (input_2 == 0) {\n      temp_3 = input_2 & 0x80000000;\n      do {\n        flag_2 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(flag_2 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | temp_3;\n      if (temp_1 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      temp_4 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(temp_4 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  flag_3 = (input_1 | input_2 << 1) == 0;\n  if (flag_3) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!flag_3) {\n    flag_4 = (input_3 | input_4 << 1) == 0;\n  }\n  temp_2 = input_2;\n  if (((!flag_4) && ((input_2 != input_4 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((temp_1 != input_4 || (input_1 = input_3, temp_2 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp_2,input_1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006d4",
            "calling": [
                "__muldf3"
            ],
            "imported": false,
            "current_name": "calculate_result_080006d4"
        },
        "FUN_08000190": {
            "renaming": {
                "FUN_08000190": "FUNC_08000190"
            },
            "code": "\nulonglong FUNC_08000190(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_080002a0;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000190",
            "calling": [
                "SetControllerDirection",
                "Compute",
                "printFloat",
                "SetTunings"
            ],
            "imported": false,
            "current_name": "FUNC_08000190"
        },
        "FUN_08006174": {
            "renaming": {
                "FUN_08006174": "printToFile_08006174",
                "__stream": "file",
                "__format": "format",
                "iVar1": "result",
                "in_r2": "arg2",
                "in_r3": "arg3",
                "uStack_8": "args",
                "uStack_4": "unused"
            },
            "code": "int printToFile_08006174(FILE *file, char *format, ...)\n{\n  int result;\n  va_list args;\n  va_start(args, format);\n  result = vfprintf(file, format, args);\n  va_end(args);\n  return result;\n}",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006174",
            "calling": [
                "__assert_func"
            ],
            "imported": false,
            "current_name": "printToFile_08006174"
        },
        "FUN_08007028": {
            "renaming": {
                "FUN_08007028": "checkIfTerminal_08007028",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "error_ptr",
                "iVar2": "is_terminal"
            },
            "code": "void checkIfTerminal_08007028(int *error_code, int file_descriptor)\n{\n  undefined *error_ptr;\n  int is_terminal;\n  error_ptr = PTR_errno_08007044;\n  *(undefined4 *)PTR_errno_08007044 = 0;\n  is_terminal = _isatty(file_descriptor);\n  if ((is_terminal == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n  }\n  return;\n}",
            "called": [
                "_isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007028",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "checkIfTerminal_08007028"
        },
        "FUN_08000194": {
            "renaming": {
                "FUN_08000194": "FUNC_08000194"
            },
            "code": "\nulonglong FUNC_08000194(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_080002a0;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000194",
            "calling": [
                "__aeabi_drsub",
                "Compute",
                "printFloat",
                "readThermocouple",
                "loop"
            ],
            "imported": false,
            "current_name": "FUNC_08000194"
        },
        "FUN_08002494": {
            "renaming": {
                "FUN_08002494": "set_interrupt_priority_08002494",
                "IRQn_Type_conflict": "irq",
                "PreemptPriority": "preempt_priority",
                "SubPriority": "sub_priority",
                "uVar1": "irq_num",
                "uVar2": "priority_group_bits",
                "uVar3": "priority_group_size",
                "priority_group_offset": "priority_group_offset",
                "priority_mask": "priority_mask",
                "preempt_bits": "preempt_bits",
                "sub_bits": "sub_bits",
                "priority": "priority"
            },
            "code": "void set_interrupt_priority_08002494(IRQn_Type_conflict irq, uint32_t preempt_priority, uint32_t sub_priority) {\n  uint irq_num = (uint)irq;\n  uint priority_group_bits = (uint)(*(int *)(DAT_080024f0 + 0xc) << 0x15) >> 0x1d;\n  uint priority_group_size = 7 - priority_group_bits;\n  if (priority_group_size > 4) {\n    priority_group_size = 4;\n  }\n  uint priority_group_offset = (priority_group_bits + 4 < 7) ? 0 : (priority_group_bits - 3);\n  uint priority_mask = (1 << (priority_group_size & 0xff)) - 1U;\n  uint preempt_bits = (preempt_priority & priority_mask) << (priority_group_offset & 0xff);\n  uint sub_bits = (1 << (priority_group_offset & 0xff)) - 1U & sub_priority;\n  uint priority = preempt_bits | sub_bits;\n  if ((int)irq_num < 0) {\n    *(char *)(DAT_080024f4 + (irq_num & 0xf)) = (char)(priority << 4);\n  }\n  else {\n    *(char *)(irq_num + 0xe000e400) = (char)(priority << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002494",
            "calling": [
                "SystemClock_Config",
                "uart_attach_tx_callback",
                "HAL_InitTick",
                "uart_attach_rx_callback"
            ],
            "imported": false,
            "current_name": "set_interrupt_priority_08002494"
        },
        "FUN_08002c4e": {
            "renaming": {
                "FUN_08002c4e": "do_nothing_08002c4e"
            },
            "code": "\nvoid do_nothing_08002c4e(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c4e",
            "calling": [
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c4e"
        },
        "FUN_08004f4c": {
            "renaming": {
                "FUN_08004f4c": "FUNC_08004f4c"
            },
            "code": "\nvoid FUNC_08004f4c(serial_t *obj)\n\n{\n  USART_TypeDef *pUVar1;\n  USART_TypeDef *pUVar2;\n  USART_TypeDef *pUVar3;\n  void *a;\n  void *b;\n  USART_TypeDef *pUVar4;\n  GPIO_TypeDef *pGVar5;\n  uint32_t uVar6;\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_2;\n  uint32_t tmpreg_3;\n  GPIO_InitTypeDef GPIO_InitStruct;\n  \n  if (obj != (serial_t *)0x0) {\n    a = pinmap_peripheral(obj->pin_tx,(PinMap_conflict *)PTR_PinMap_UART_TX_08005204);\n    b = pinmap_peripheral(obj->pin_rx,(PinMap_conflict *)PTR_PinMap_UART_RX_08005208);\n    if ((b == (void *)0x0) || (a == (void *)0x0)) {\n      iprintf(PTR_s_ERROR__at_least_one_UART_pin_has_0800521c);\n    }\n    else {\n      pUVar4 = (USART_TypeDef *)pinmap_merge_peripheral(a,b);\n      obj->uart = pUVar4;\n      pUVar3 = DAT_08005214;\n      pUVar2 = DAT_08005210;\n      pUVar1 = DAT_0800520c;\n      if (pUVar4 == (USART_TypeDef *)0x0) {\n        iprintf(PTR_s_ERROR__U_S_ART_pins_mismatch_08005220);\n      }\n      else {\n        if (pUVar4 == DAT_0800520c) {\n          DAT_0800520c[0x7b7].BRR = DAT_0800520c[0x7b7].BRR | 0x4000;\n          pUVar1[0x7b7].BRR = pUVar1[0x7b7].BRR & 0xffffbfff;\n          pUVar1[0x7b7].CR3 = pUVar1[0x7b7].CR3 | 0x4000;\n          obj->index = '\\0';\n          obj->irq = USART1_IRQn;\n        }\n        else if (pUVar4 == DAT_08005210) {\n          DAT_08005210[0x106e].BRR = DAT_08005210[0x106e].BRR | 0x20000;\n          pUVar2[0x106e].BRR = pUVar2[0x106e].BRR & 0xfffdffff;\n          pUVar2[0x106e].CR3 = pUVar2[0x106e].CR3 | 0x20000;\n          obj->index = '\\x01';\n          obj->irq = USART2_IRQn;\n        }\n        else if (pUVar4 == DAT_08005214) {\n          DAT_08005214[0x1049].CR3 = DAT_08005214[0x1049].CR3 | 0x40000;\n          pUVar3[0x1049].CR3 = pUVar3[0x1049].CR3 & 0xfffbffff;\n          pUVar3[0x104a].DR = pUVar3[0x104a].DR | 0x40000;\n          obj->index = '\\x02';\n          obj->irq = USART3_IRQn;\n        }\n        pGVar5 = set_GPIO_Port_Clock((uint)((int)obj->pin_rx << 0x18) >> 0x1c);\n        uVar6 = pinmap_function(obj->pin_rx,(PinMap_conflict *)PTR_PinMap_UART_RX_08005208);\n        GPIO_InitStruct.Pin = 1 << (obj->pin_rx & 0xfU) & 0xffff;\n        GPIO_InitStruct.Mode = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        GPIO_InitStruct.Pull = (uVar6 << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08005218 + 0x18) = *(uint *)(DAT_08005218 + 0x18) | 1;\n        switch((uVar6 << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x4000000;\n        }\n        GPIO_InitStruct.Speed = 3;\n        HAL_GPIO_Init(pGVar5,&GPIO_InitStruct);\n        pGVar5 = set_GPIO_Port_Clock((uint)((int)obj->pin_tx << 0x18) >> 0x1c);\n        uVar6 = pinmap_function(obj->pin_tx,(PinMap_conflict *)PTR_PinMap_UART_TX_08005204);\n        GPIO_InitStruct.Pin = 1 << (obj->pin_tx & 0xfU) & 0xffff;\n        GPIO_InitStruct.Mode = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        GPIO_InitStruct.Pull = (uVar6 << 0x1a) >> 0x1e;\n        HAL_GPIO_Init(pGVar5,&GPIO_InitStruct);\n        *(UART_HandleTypeDef **)(PTR_uart_handlers_08005228 + (uint)obj->index * 4) = &obj->handle;\n        (obj->handle).Instance = obj->uart;\n        (obj->handle).Init.BaudRate = obj->baudrate;\n        (obj->handle).Init.WordLength = obj->databits;\n        (obj->handle).Init.StopBits = obj->stopbits;\n        (obj->handle).Init.Parity = obj->parity;\n        (obj->handle).Init.Mode = 0xc;\n        (obj->handle).Init.HwFlowCtl = 0;\n        (obj->handle).Init.OverSampling = 0;\n        HAL_UART_Init(&obj->handle);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "pinmap_merge_peripheral",
                "HAL_GPIO_Init",
                "pinmap_peripheral",
                "pinmap_function",
                "set_GPIO_Port_Clock",
                "iprintf",
                "HAL_UART_Init"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004f4c",
            "calling": [
                "begin",
                "uart_debug_init"
            ],
            "imported": false,
            "current_name": "FUNC_08004f4c"
        },
        "FUN_080055bc": {
            "renaming": {
                "FUN_080055bc": "get_uart_handler_index_080055bc",
                "*huart": "*uart",
                "uVar1": "index",
                "PTR_uart_handlers_080055dc": "uart_handlers"
            },
            "code": "uint8_t get_uart_handler_index_080055bc(UART_HandleTypeDef *huart)\n{\n  uint8_t index;\n  if (huart == NULL) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while (index < 5) {\n      if (huart == PTR_uart_handlers_080055dc[index]){\n        return index;\n      }\n      index++;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055bc",
            "calling": [
                "HAL_UART_TxCpltCallback",
                "HAL_UART_RxCpltCallback"
            ],
            "imported": false,
            "current_name": "get_uart_handler_index_080055bc"
        },
        "FUN_08001960": {
            "renaming": {
                "FUN_08001960": "updateOutputLimits_08001960",
                "this": "pid",
                "Min": "minOutput",
                "Max": "maxOutput",
                "pdVar2": "currentOutput",
                "in_r2": "minOutputPart1",
                "in_r3": "minOutputPart2",
                "uVar3": "outputSumPart1",
                "uVar4": "outputSumPart2",
                "uVar5": "outMaxPart1",
                "uVar6": "outMaxPart2"
            },
            "code": "void updateOutputLimits_08001960(PID *pid, double minOutput, double maxOutput) {\n  int isMinGreaterOrEqual = __aeabi_dcmpge(minOutput, maxOutput);\n  if (isMinGreaterOrEqual == 0) {\n    pid->outMin = minOutput;\n    pid->outMax = maxOutput;\n    if (pid->inAuto) {\n      double *currentOutput = pid->myOutput;\n      int isCurrentOutputLessThanMin = __aeabi_dcmplt(*currentOutput, minOutput);\n      if (isCurrentOutputLessThanMin == 0) {\n        int isCurrentOutputGreaterThanMax = __aeabi_dcmpgt(*currentOutput, maxOutput);\n        if (isCurrentOutputGreaterThanMax != 0) {\n          *currentOutput = maxOutput;\n        }\n      } else {\n        *currentOutput = minOutput;\n      }\n      double outputSum = pid->outputSum;\n      int isOutputSumGreaterThanMax = __aeabi_dcmpgt(outputSum, pid->outMax);\n      if (isOutputSumGreaterThanMax != 0) {\n        pid->outputSum = pid->outMax;\n      }\n      int isOutputSumLessThanMin = __aeabi_dcmplt(outputSum, pid->outMin);\n      if (isOutputSumLessThanMin != 0) {\n        pid->outputSum = pid->outMin;\n      }\n    }\n  }\n}",
            "called": [
                "__aeabi_dcmplt",
                "__aeabi_dcmpge",
                "__aeabi_dcmpgt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001960",
            "calling": [
                "PID",
                "loop"
            ],
            "imported": false,
            "current_name": "updateOutputLimits_08001960"
        },
        "FUN_08004ca2": {
            "renaming": {
                "FUN_08004ca2": "find_pin_08004ca2",
                "peripheral": "peripheral",
                "map": "map",
                "PVar1": "pin_name"
            },
            "code": "PinName_conflict find_pin_08004ca2(void *peripheral, PinMap_conflict *map) {\n  PinName_conflict pin_name;\n  if (peripheral != NULL) {\n    pin_name = pinmap_find_pin_08004ca2(peripheral, map);\n    return pin_name;\n  }\n  return NC;\n}",
            "called": [
                "pinmap_find_pin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ca2",
            "calling": [
                "HardwareSerial",
                "uart_debug_init"
            ],
            "imported": false,
            "current_name": "find_pin_08004ca2"
        },
        "FUN_08002810": {
            "renaming": {
                "FUN_08002810": "get_pin_state_08002810",
                "GPIOx": "port",
                "GPIO_Pin": "pin",
                "GPIO_PinState": "GPIO_PIN_STATE",
                "GPIO_PIN_RESET": "LOW",
                "GPIO_PIN_SET": "HIGH"
            },
            "code": "GPIO_PinState get_pin_state_08002810(GPIO_TypeDef *port, uint16_t pin) {\n    if ((pin & port->IDR) == 0) {\n        return GPIO_PIN_RESET;\n    }\n    return GPIO_PIN_SET;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002810",
            "calling": [
                "digital_io_read"
            ],
            "imported": false,
            "current_name": "get_pin_state_08002810"
        },
        "FUN_0800224c": {
            "renaming": {
                "FUN_0800224c": "stop_ADC_conversion_0800224c",
                "*hadc": "*hadc",
                "HVar1": "status",
                "HAL_ERROR": "HAL_ERROR",
                "ADC_ConversionStop_Disable": "ADC_ConversionStop_Disable",
                "Instance": "Instance",
                "SR": "SR",
                "CR1": "CR1",
                "CR2": "CR2",
                "SMPR1": "SMPR1",
                "SMPR2": "SMPR2",
                "JOFR1": "JOFR1",
                "JOFR2": "JOFR2",
                "JOFR3": "JOFR3",
                "JOFR4": "JOFR4",
                "HTR": "HTR",
                "LTR": "LTR",
                "SQR1": "SQR1",
                "SQR2": "SQR2",
                "SQR3": "SQR3",
                "JSQR": "JSQR",
                "HAL_ADC_MspDeInit": "HAL_ADC_MspDeInit",
                "ErrorCode": "ErrorCode",
                "State": "State",
                "HAL_UNLOCKED": "HAL_UNLOCKED"
            },
            "code": "HAL_StatusTypeDef_conflict stop_ADC_conversion_0800224c(ADC_HandleTypeDef *hadc)\n{\n  HAL_StatusTypeDef_conflict status;\n  if (hadc == NULL) {\n    status = HAL_ERROR;\n  }\n  else {\n    hadc->State |= 2;\n    status = ADC_ConversionStop_Disable(hadc);\n    if (status == HAL_OK) {\n      hadc->Instance->SR = 0xffffffe0;\n      hadc->Instance->CR1 &= DAT_08002340;\n      hadc->Instance->CR2 &= DAT_08002344;\n      hadc->Instance->SMPR1 &= 0xff000000;\n      hadc->Instance->SMPR2 &= 0xc0000000;\n      hadc->Instance->JOFR1 &= 0xfffff000;\n      hadc->Instance->JOFR2 &= 0xfffff000;\n      hadc->Instance->JOFR3 &= 0xfffff000;\n      hadc->Instance->JOFR4 &= 0xfffff000;\n      hadc->Instance->HTR &= 0xfffff000;\n      hadc->Instance->LTR &= 0xfffff000;\n      hadc->Instance->SQR1 &= 0xff000000;\n      hadc->Instance->SQR2 &= 0xc0000000;\n      hadc->Instance->SQR3 &= 0xc0000000;\n      hadc->Instance->JSQR &= 0xffc00000;\n      HAL_ADC_MspDeInit(hadc);\n      hadc->ErrorCode = 0;\n      hadc->State = 0;\n    }\n    hadc->Lock = HAL_UNLOCKED;\n  }\n  return status;\n}",
            "called": [
                "ADC_ConversionStop_Disable",
                "HAL_ADC_MspDeInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800224c",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "stop_ADC_conversion_0800224c"
        },
        "FUN_080054b0": {
            "renaming": {
                "FUN_080054b0": "is_uart_transmit_complete_080054b0",
                "obj": "serial",
                "HVar1": "uart_state"
            },
            "code": "bool is_uart_transmit_complete_080054b0(serial_t *serial) {\n  HAL_UART_StateTypeDef uart_state = HAL_UART_GetState(*((UART_HandleTypeDef **) (PTR_uart_handlers_080054d0 + (uint) serial->index * 4)));\n  return (uart_state & 0x21U) == 0x21;\n}",
            "called": [
                "HAL_UART_GetState"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b0",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "is_uart_transmit_complete_080054b0"
        },
        "FUN_08006f00": {
            "renaming": {
                "FUN_08006f00": "call_function_with_signal_handler_08006f00",
                "__sig": "signal_number",
                "iVar1": "result",
                "_FUN_08006f00_r": "_call_function_with_signal_handler_r"
            },
            "code": "int call_function_with_signal_handler_08006f00(int signal_number)\n{\n  int result = _call_function_with_signal_handler_08006f00_r(*(undefined4 *)PTR__impure_ptr_08006f0c, signal_number);\n  return result;\n}",
            "called": [
                "_raise_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f00",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "call_function_with_signal_handler_08006f00"
        },
        "FUN_080016b4": {
            "renaming": {
                "__thiscall PID::FUN_080016b4": "calculatePID",
                "this": "pid",
                "uVar2": "current_time",
                "cVar11": "in_auto",
                "myInput": "input",
                "mySetpoint": "setpoint",
                "lastInput": "last_input",
                "kp": "proportional_gain",
                "ki": "integral_gain",
                "kd": "derivative_gain",
                "outputSum": "output_sum",
                "pOnE": "proportional_on_error",
                "outMin": "output_min",
                "outMax": "output_max",
                "myOutput": "output",
                "lastTime": "last_time",
                "iVar3": "comparison_result",
                "dVar18": "constrained_output",
                "dVar19": "unconstrained_output",
                "uVar4": "error_gain",
                "uVar5": "input1",
                "uVar6": "output_sum_lower",
                "uVar7": "output_min",
                "uVar8": "input2",
                "uVar9": "output_sum_upper",
                "uVar10": "output_max",
                "uVar12": "output_max_lower",
                "uVar13": "output_max_upper",
                "uVar14": "error_upper",
                "uVar15": "error_lower",
                "uVar16": "input_diff",
                "uVar17": "output_diff",
                "FUN_080016b4": "calculatePID_080016b4"
            },
            "code": "bool __thiscall calculatePID_080016b4(PID *pid)\n{\n    bool in_auto = pid->inAuto;\n    if (in_auto != false) {\n        uint32_t current_time = millis();\n        if (current_time - pid->lastTime >= pid->SampleTime) {\n            double input = *(double *)pid->myInput;\n            double setpoint = *(double *)pid->mySetpoint;\n            double error = setpoint - input;\n            double input_diff = input - pid->lastInput;\n            double output_diff = input_diff / pid->SampleTime;\n            pid->outputSum += pid->ki * error;\n            if (!pid->pOnE) {\n                pid->outputSum -= pid->kp * output_diff;\n            }\n            pid->outputSum = constrain(pid->outputSum, pid->outMin, pid->outMax);\n            double output = pid->outputSum;\n            if (pid->pOnE) {\n                output += pid->kp * error;\n            }\n            output += pid->kd * output_diff;\n            output = constrain(output, pid->outMin, pid->outMax);\n            *(double *)pid->myOutput = output;\n            pid->lastInput = input;\n            pid->lastTime = current_time;\n        } else {\n            in_auto = false;\n        }\n    }\n    return in_auto;\n}",
            "called": [
                "__aeabi_dadd",
                "millis",
                "__subdf3",
                "__aeabi_dcmplt",
                "__muldf3",
                "__aeabi_dcmpgt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016b4",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculatePID_080016b4"
        },
        "FUN_08004e48": {
            "renaming": {
                "FUN_08004e48": "handle_timer_interrupt_08004e48",
                "PTR_timer_handles_08004e58": "PTR_timer_handles",
                "TIM_HandleTypeDef": "TimerHandle",
                "HAL_TIM_IRQHandler": "HandleTimerInterruptRequest",
                "timer_handle": "timer_handle"
            },
            "code": "void handle_timer_interrupt_08004e48(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_08004e58_08004e58 + 8);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e48",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004e48"
        },
        "FUN_0800074c": {
            "renaming": {
                "FUN_0800074c": "FUNC_0800074c"
            },
            "code": "\nulonglong FUNC_0800074c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = extract_double_080008ba();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800086a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800086a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_080008ba"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800074c",
            "calling": [
                "SetSampleTime",
                "printFloat",
                "readThermocouple",
                "SetTunings"
            ],
            "imported": false,
            "current_name": "FUNC_0800074c"
        },
        "FUN_080018f8": {
            "renaming": {
                "FUN_080018f8": "calculatePID_080018f8",
                "this": "pid",
                "Kp": "proportional_gain",
                "Ki": "integral_gain",
                "Kd": "derivative_gain",
                "in_stack_ffffffec": "on_time",
                "this->pOn": "pid->pOn",
                "double": "",
                "CONCAT44": "",
                "return": ""
            },
            "code": "void calculatePID_080018f8(PID *pid, double proportional_gain, double integral_gain, double derivative_gain) {\n    double on_time = pid->pOn;\n    double integral_term = integral_gain * pid->timeInterval;\n    double derivative_term = derivative_gain / pid->timeInterval;\n    double proportional_term = proportional_gain;\n    calculatePID_080018f8(pid, proportional_term, integral_term, derivative_term, on_time);\n    return;\n}",
            "called": [
                "SetTunings"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018f8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculatePID_080018f8"
        },
        "FUN_08005890": {
            "renaming": {
                "FUN_08005890": "read_digital_pin_08005890",
                "ulPin": "pin",
                "_Var1": "is_pin_configured",
                "port": "port",
                "uVar2": "pin_value",
                "uVar3": "pin_config_index",
                "PTR_digitalPin_080058d8": "digital_pin_config_index",
                "PTR_g_digPinConfigured_080058dc": "g_digital_pin_configured",
                "PinName_conflict": "PinName_conflict"
            },
            "code": "int read_digital_pin_08005890(uint32_t pin)\n{\n  bool is_pin_configured;\n  GPIO_TypeDef *port;\n  uint32_t pin_config_index;\n  uint32_t pin_value;\n  \n  if (pin < 0x3c) {\n    pin_config_index = (uint)(char)PTR_digitalPin_080058d8[pin];\n  }\n  else {\n    pin_config_index = 0xffffffff;\n  }\n  \n  if (pin_config_index == 0xffffffff) {\n    pin_value = 0;\n  }\n  else {\n    is_pin_configured = is_pin_configured_pin((PinName_conflict)pin_config_index, (uint32_t *)PTR_g_digPinConfigured_080058dc);\n    if (is_pin_configured) {\n      port = get_GPIO_Port((pin_config_index << 0x18) >> 0x1c);\n      pin_value = digital_io_read(port, 1 << (pin_config_index & 0xf) & 0xffff);\n      pin_value = pin_value & 0xff;\n    }\n    else {\n      pin_value = 0;\n    }\n  }\n  if (pin_value != 0) {\n    pin_value = 1;\n  }\n  return pin_value;\n}",
            "called": [
                "is_pin_configured",
                "get_GPIO_Port",
                "digital_io_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005890",
            "calling": [
                "readData",
                "loop"
            ],
            "imported": false,
            "current_name": "read_digital_pin_08005890"
        },
        "FUN_08005da0": {
            "renaming": {
                "FUN_08005da0": "print_character_08005da0",
                "this": "print_obj",
                "b": "character",
                "base": "base",
                "sVar1": "printed_characters"
            },
            "code": "size_t __thiscall print_character_08005da0(Print *print_obj, uchar character, int base)\n{\n  size_t printed_characters;\n  \n  printed_characters = print_character_08005da0(print_obj, (uint)character, base);\n  return printed_characters;\n}",
            "called": [
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da0",
            "calling": [
                "printTo"
            ],
            "imported": false,
            "current_name": "print_character_08005da0"
        },
        "FUN_08004cb2": {
            "renaming": {
                "FUN_08004cb2": "find_pin_function_08004cb2",
                "pin": "target_pin",
                "map": "pin_map"
            },
            "code": "uint32_t find_pin_function_08004cb2(PinName_conflict pin, PinMap_conflict *pin_map) {\n  while (true) {\n    if (pin_map->pin == NC) {\n      return 0xffffffff;\n    }\n    if (pin_map->pin == pin) {\n      break;\n    }\n    pin_map++;\n  }\n  return pin_map->function;\n}",
            "called": [
                "pinmap_find_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb2",
            "calling": [
                "pinmap_function",
                "pinmap_find_function"
            ],
            "imported": false,
            "current_name": "find_pin_function_08004cb2"
        },
        "FUN_08004ef4": {
            "renaming": {
                "FUN_08004ef4": "enable_i2c_listen_interrupt_08004ef4",
                "hi2c": "i2c_handler",
                "piVar1": "i2c_obj",
                "get_i2c_obj": "get_i2c_object",
                "isMaster": "is_master"
            },
            "code": "void enable_i2c_listen_interrupt_08004ef4(I2C_HandleTypeDef *i2c_handler)\\n{\\n  i2c_t *i2c_obj = get_i2c_object(i2c_handler);\\n  if (i2c_obj->is_master == \"\\0\") {\\n    HAL_I2C_EnableListen_IT(i2c_handler);\\n  }\\n  return;\\n}",
            "called": [
                "get_i2c_obj",
                "HAL_I2C_EnableListen_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef4",
            "calling": [
                "I2C_ITError",
                "I2C_DMAAbort"
            ],
            "imported": false,
            "current_name": "enable_i2c_listen_interrupt_08004ef4"
        },
        "FUN_08001294": {
            "renaming": {
                "__thiscall LiquidCrystal::FUN_08001294": "set_row_offsets",
                "this": "lcd",
                "row0": "row_offset_0",
                "row1": "row_offset_1",
                "row2": "row_offset_2",
                "row3": "row_offset_3",
                "_row_offsets": "row_offsets",
                "FUN_08001294": "set_row_offsets_08001294"
            },
            "code": "void set_row_offsets_08001294(LiquidCrystal *lcd, int row_offset_0, int row_offset_1, int row_offset_2, int row_offset_3) {\n    lcd->row_offsets[0] = (uint8_t)row_offset_0;\n    lcd->row_offsets[1] = (uint8_t)row_offset_1;\n    lcd->row_offsets[2] = (uint8_t)row_offset_2;\n    lcd->row_offsets[3] = (uint8_t)row_offset_3;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001294",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "set_row_offsets_08001294"
        },
        "FUN_08002384": {
            "renaming": {
                "FUN_08002384": "perform_adc_conversion_08002384",
                "*hadc": "*adc_handle",
                "HVar1": "status",
                "uVar2": "adc_clk_freq",
                "uVar3": "tick_now",
                "pAVar4": "adc_instance",
                "uVar5": "system_core_clock_freq",
                "wait_loop_index": "wait_loop_index"
            },
            "code": "HAL_StatusTypeDef_conflict perform_adc_conversion_08002384(ADC_HandleTypeDef *adc_handle)\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t wait_loop_index;\n  \n  if (adc_handle->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n  adc_handle->Lock = HAL_LOCKED;\n  status = ADC_ConversionStop_Disable(adc_handle);\n  if (status == HAL_OK) {\n    adc_handle->State = adc_handle->State & 0xffffeefd | 2;\n    uint32_t system_core_clock_freq = *(uint *)PTR_SystemCoreClock_0800246c;\n    uint32_t adc_clk_freq = HAL_RCCEx_GetPeriphCLKFreq(2);\n    wait_loop_index = system_core_clock_freq / adc_clk_freq << 1;\n    while (wait_loop_index != 0) {\n        wait_loop_index--;\n    }\n    ADC_Enable(adc_handle);\n    adc_handle->Instance->CR2 |= 8;\n    uint32_t tick_start = HAL_GetTick();\n    while ((adc_handle->Instance->CR2 & 8) != 0) {\n      uint32_t tick_now = HAL_GetTick();\n      if (10 < tick_now - tick_start) {\n        adc_handle->State = adc_handle->State & 0xffffffed | 0x10;\n        adc_handle->Lock = HAL_UNLOCKED;\n        return HAL_ERROR;\n      }\n    }\n    adc_handle->Instance->CR2 |= 4;\n    tick_start = HAL_GetTick();\n    while ((adc_handle->Instance->CR2 & 4) != 0) {\n      uint32_t tick_now = HAL_GetTick();\n      if (10 < tick_now - tick_start) {\n        adc_handle->State = adc_handle->State & 0xffffffed | 0x10;\n        adc_handle->Lock = HAL_UNLOCKED;\n        return HAL_ERROR;\n      }\n    }\n    adc_handle->State = adc_handle->State & 0xfffffffc | 1;\n  }\n  adc_handle->Lock = HAL_UNLOCKED;\n  return status;\n}",
            "called": [
                "ADC_ConversionStop_Disable",
                "ADC_Enable",
                "HAL_GetTick",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002384",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "perform_adc_conversion_08002384"
        },
        "FUN_08005650": {
            "renaming": {
                "FUN_08005650": "initialize_uart_08005650",
                "huart": "uart_handler",
                "tmpval": "temporary_value"
            },
            "code": "void initialize_uart_08005650(UART_HandleTypeDef *uart_handler)\n{\n  uint32_t temporary_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005650",
            "calling": [
                "HAL_UART_IRQHandler",
                "UART_DMAAbortOnError"
            ],
            "imported": false,
            "current_name": "initialize_uart_08005650"
        },
        "FUN_08006fb6": {
            "renaming": {
                "FUN_08006fb6": "close_file_descriptor_08006fb6",
                "param_1": "file_descriptor",
                "param_2": "file_descriptor_offset"
            },
            "code": "void close_file_descriptor_08006fb6(void* file_descriptor, int file_descriptor_offset) {\n  int fd = *(short *)(file_descriptor_offset + 0xe);\n  _close_r(file_descriptor, fd);\n  return;\n}",
            "called": [
                "_close_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006fb6",
            "calling": [],
            "imported": false,
            "current_name": "close_file_descriptor_08006fb6"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "transfer_byte_08002ad8",
                "hi2c": "i2c_handle",
                "puVar1": "buffer_pointer",
                "hi2c->XferCount": "i2c_handle->XferCount",
                "hi2c->pBuffPtr": "i2c_handle->pBuffPtr",
                "hi2c->Instance->DR": "i2c_handle->Instance->DR",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef"
            },
            "code": "HAL_StatusTypeDef transfer_byte_08002ad8(I2C_HandleTypeDef *i2c_handle)\n{\n  uint8_t *buffer_pointer;\n  \n  if (i2c_handle->XferCount != 0) {\n    buffer_pointer = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_pointer + 1;\n    *buffer_pointer = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "transfer_byte_08002ad8"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "set_uart_config_08004204",
                "huart": "uart_handle",
                "USART_TypeDef": "uart_instance",
                "pUVar12": "uart_instance",
                "CR1": "control_register_1",
                "CR2": "control_register_2",
                "CR3": "control_register_3",
                "Init": "uart_init_config",
                "StopBits": "stop_bits",
                "WordLength": "word_length",
                "Parity": "parity",
                "Mode": "mode",
                "HwFlowCtl": "hw_flow_control",
                "BaudRate": "baud_rate",
                "DAT_080043ac": "USART1",
                "DAT_080043b0": "16",
                "uVar1": "quotient",
                "uVar2": "dividend",
                "uVar3": "pclk_freq",
                "uVar4": "pclk_freq",
                "uVar5": "pclk_freq",
                "uVar6": "pclk_freq",
                "uVar7": "pclk_freq",
                "uVar8": "baud_rate",
                "uVar9": "baud_rate",
                "uVar10": "baud_rate",
                "uVar11": "baud_rate",
                "BRR": "baud_rate_register"
            },
            "code": "void set_uart_config_08004204(UART_HandleTypeDef *huart)\n{\n  uint32_t pclk_freq = 0;\n  uint32_t baud_rate = 0;\n  uint32_t mantissa = 0;\n  uint32_t fraction = 0;\n  USART_TypeDef *uart_instance = huart->Instance;\n  \n  // Configure stop bits\n  uart_instance->CR2 = (uart_instance->CR2 & 0xffffcfff) | (huart->Init).StopBits;\n  \n  // Configure word length, parity, mode\n  uart_instance->CR1 = (huart->Init).WordLength | (huart->Init).Parity | (huart->Init).Mode | (uart_instance->CR1 & 0xffffe9f3);\n  \n  // Configure hardware flow control\n  uart_instance->CR3 = (uart_instance->CR3 & 0xfffffcff) | (huart->Init).HwFlowCtl;\n  \n  // Calculate baud rate\n  if (uart_instance != DAT_080043ac) {\n    pclk_freq = HAL_RCC_GetPCLK1Freq();\n  } else {\n    pclk_freq = HAL_RCC_GetPCLK2Freq();\n  }\n  baud_rate = (huart->Init).BaudRate;\n  mantissa = (pclk_freq / (baud_rate << 4));\n  fraction = ((pclk_freq * 2) / (baud_rate << 4)) - (mantissa << 1);\n  uart_instance->BRR = (mantissa << 4) | fraction;\n}\n",
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "set_uart_config_08004204"
        },
        "FUN_08005da8": {
            "renaming": {
                "FUN_08005da8": "print_double_08005da8",
                "this": "printer",
                "number": "number",
                "digits": "digits",
                "iVar1": "is_nan",
                "n": "integer_part",
                "sVar2": "result",
                "sVar3": "result",
                "bVar4": "digit",
                "lVar5": "fractional_part",
                "uVar6": "integer_part",
                "uVar7": "fractional_part"
            },
            "code": "size_t print_double_08005da8(Print *printer, double number, uint8_t digits) {\n  int is_nan = isnan(number);\n  if (is_nan) {\n    return print(printer, \"NaN\");\n  }\n  int is_inf = isinf(number);\n  if (is_inf) {\n    if (number < 0) {\n      return print(printer, \"-Inf\");\n    } else {\n      return print(printer, \"Inf\");\n    }\n  }\n  if (number == 0.0) {\n    return print(printer, '0');\n  }\n  int sign = number < 0;\n  if (sign) {\n    number = -number;\n    print(printer, '-');\n  }\n  double integer_part;\n  double fractional_part = modf(number, &integer_part);\n  size_t integer_digits = integer_part == 0 ? 1 : (size_t)log10(integer_part) + 1;\n  size_t fractional_digits = digits == 0 ? 0 : digits;\n  size_t total_digits = integer_digits + fractional_digits;\n  size_t result = 0;\n  char buffer[total_digits + 1];\n  buffer[total_digits] = '\\0';\n  for (size_t i = total_digits - 1; i >= fractional_digits; --i) {\n    int digit = (int)fmod(integer_part, 10);\n    buffer[i] = digit + '0';\n    integer_part = (integer_part - digit) / 10;\n  }\n  if (fractional_digits > 0) {\n    buffer[fractional_digits - 1] = '.';\n    for (size_t i = fractional_digits - 1; i > 0; --i) {\n      fractional_part *= 10;\n      int digit = (int)fractional_part;\n      buffer[i - 1] = digit + '0';\n      fractional_part -= digit;\n    }\n  }\n  result += print(printer, buffer);\n  return result;\n}",
            "called": [
                "__unorddf2",
                "__aeabi_dadd",
                "print",
                "__floatsidf",
                "print",
                "__divdf3",
                "print",
                "__subdf3",
                "__aeabi_dcmplt",
                "__fixunsdfsi",
                "__fixdfsi",
                "__muldf3",
                "__floatunsidf",
                "__aeabi_dcmpgt",
                "print",
                "__aeabi_dcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da8",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "print_double_08005da8"
        },
        "FUN_080045fe": {
            "renaming": {
                "FUN_080045fe": "set_uart_to_ready_state_080045fe",
                "huart": "uart",
                "Instance": "instance",
                "CR1": "control_register_1",
                "gState": "global_state",
                "HAL_UART_STATE_READY": "UART_READY",
                "HAL_UART_TxCpltCallback": "UART_transmit_complete_callback",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef set_uart_to_ready_state_080045fe(UART_HandleTypeDef *uart)\n{\n  uart->Instance->CR1 &= ~(1 << 6);\n  uart->gState = HAL_UART_STATE_READY;\n  HAL_UART_TxCpltCallback(uart);\n  return HAL_OK;\n}",
            "called": [
                "HAL_UART_TxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045fe",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "set_uart_to_ready_state_080045fe"
        },
        "FUN_08005f2c": {
            "renaming": {
                "Print::FUN_08005f2c": "print_double_with_precision",
                "this": "printer",
                "n": "number",
                "digits": "precision",
                "sVar1": "result",
                "FUN_08005f2c": "print_double_with_precision_08005f2c"
            },
            "code": "size_t print_double_with_precision_08005f2c(Print* printer, double number, int precision) {\n    size_t result = print_double_with_precision_08005f2cFloat(printer, (double)CONCAT44(in_stack_fffffff4, (uint)number._0_1_), number._0_1_);\n    return result;\n}",
            "called": [
                "printFloat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f2c",
            "calling": [
                "loop",
                "println"
            ],
            "imported": false,
            "current_name": "print_double_with_precision_08005f2c"
        },
        "FUN_080055e0": {
            "renaming": {
                "FUN_080055e0": "process_uart_data_080055e0",
                "*huart": "*uart_handler",
                "bVar1": "uart_index_value",
                "uVar2": "index_value_as_uint32",
                "PTR_rx_callback_080055fc": "rx_callback_ptr_080055fc",
                "PTR_rx_callback_obj_08005600": "rx_callback_obj_ptr_08005600"
            },
            "code": "void process_uart_data_080055e0(UART_HandleTypeDef *uart_handler)\n{\n  uint8_t uart_index_value = uart_index(uart_handler);\n  uint32_t index_value_as_uint32 = (uint32_t)uart_index_value;\n  if (index_value_as_uint32 < 5) {\n    (**(code **)(PTR_rx_callback_080055fc + index_value_as_uint32 * 4))\n              (*(undefined4 *)(PTR_rx_callback_obj_08005600 + index_value_as_uint32 * 4));\n  }\n  return;\n}",
            "called": [
                "uart_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055e0",
            "calling": [
                "UART_Receive_IT"
            ],
            "imported": false,
            "current_name": "process_uart_data_080055e0"
        },
        "FUN_08005f40": {
            "renaming": {
                "FUN_08005f40": "printDouble_08005f40",
                "this": "printObj",
                "num": "num",
                "digits": "digits",
                "sVar1": "s1",
                "sVar2": "s2",
                "in_stack_ffffffec": "stackVar"
            },
            "code": "size_t Print::printDouble_08005f40(Print *printObj, double num, int digits)\n{\n    size_t s1;\n    size_t s2;\n    uint stackVar;\n  \n    stackVar = digits;\n    double convertedNum = (double)((ulonglong)num & 0xffffffff | (ulonglong)stackVar << 0x20);\n    s1 = print(printObj, convertedNum, num._0_4_);\n    s2 = printDouble_08005f40(printObj, digits);\n    return s2 + s1;\n}",
            "called": [
                "print",
                "println"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f40",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "printDouble_08005f40"
        },
        "FUN_08006f10": {
            "renaming": {
                "FUN_08006f10": "kill_process_if_running_08006f10",
                "param_1": "error_code",
                "param_2": "process_id",
                "param_3": "signal_num",
                "puVar1": "errno_ptr",
                "iVar2": "kill_result"
            },
            "code": "void kill_process_if_running_08006f10(int *error_code, int process_id, int signal_num) {\n\tint kill_result;\n\tint *errno_ptr = PTR_errno_08006f30;\n\t*(int *)PTR_errno_08006f30 = 0;\n\tkill_result = _kill(process_id, signal_num);\n\tif ((kill_result == -1) && (*(int *)errno_ptr != 0)) {\n\t\t*error_code = *(int *)errno_ptr;\n\t}\n\treturn;\n}",
            "called": [
                "_kill"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f10",
            "calling": [
                "_raise_r"
            ],
            "imported": false,
            "current_name": "kill_process_if_running_08006f10"
        },
        "FUN_0800213c": {
            "renaming": {
                "FUN_0800213c": "configure_ADC_0800213c",
                "*hadc": "*adc_handle",
                "HVar1": "status",
                "uVar2": "config_bits",
                "uVar3": "data_align_bits",
                "uVar4": "state_bit",
                "uVar5": "continuous_conv_bits"
            },
            "code": "HAL_StatusTypeDef_conflict configure_ADC_0800213c(ADC_HandleTypeDef *adc_handle)\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t state_bit;\n  uint32_t config_bits;\n  uint32_t sequence_bits;\n  uint32_t continuous_conv_bits;\n  uint32_t data_align_bits;\n\n  if (adc_handle == NULL) {\n    return HAL_ERROR;\n  }\n\n  if (adc_handle->State == 0) {\n    adc_handle->ErrorCode = 0;\n    adc_handle->Lock = HAL_UNLOCKED;\n    HAL_ADC_MspInit(adc_handle);\n  }\n\n  status = ADC_ConversionStop_Disable(adc_handle);\n  state_bit = adc_handle->State & 0x10;\n\n  if ((state_bit == 0) && (status == HAL_OK)) {\n    adc_handle->State = adc_handle->State & 0xffffeefd | 2;\n    continuous_conv_bits = (adc_handle->Init).ContinuousConvMode;\n    data_align_bits = (adc_handle->Init).DataAlign | (adc_handle->Init).ExternalTrigConv | continuous_conv_bits << 1;\n    config_bits = 0;\n    sequence_bits = 0;\n\n    if ((adc_handle->Init).ScanConvMode == 0x100 || (adc_handle->Init).ScanConvMode == 1) {\n      config_bits = ((adc_handle->Init).NbrOfConversion - 1) * 0x100000;\n    }\n\n    if ((adc_handle->Init).DiscontinuousConvMode == 1) {\n      if (continuous_conv_bits == 0) {\n        sequence_bits = ((adc_handle->Init).NbrOfDiscConversion - 1) * 0x2000 | 0x800;\n        config_bits |= sequence_bits;\n      }\n      else {\n        adc_handle->State |= 0x20;\n        adc_handle->ErrorCode |= 1;\n      }\n    }\n\n    config_bits |= sequence_bits;\n    adc_handle->Instance->CR1 = config_bits | (adc_handle->Instance->CR1 & 0xffff16ff);\n    adc_handle->Instance->CR2 = adc_handle->Instance->CR2 & DAT_08002244 | data_align_bits;\n\n    if (data_align_bits != (DAT_08002248 & adc_handle->Instance->CR2)) {\n      adc_handle->State = adc_handle->State & 0xffffffed | 0x10;\n      adc_handle->ErrorCode |= 1;\n      return HAL_ERROR;\n    }\n\n    adc_handle->ErrorCode = 0;\n    adc_handle->State = adc_handle->State & 0xfffffffc | 1;\n    return HAL_OK;\n  }\n\n  adc_handle->State |= 0x10;\n  return HAL_ERROR;\n}",
            "called": [
                "ADC_ConversionStop_Disable",
                "HAL_ADC_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800213c",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "configure_ADC_0800213c"
        },
        "FUN_0800455a": {
            "renaming": {
                "FUN_0800455a": "check_uart_ready_for_tx_0800455a",
                "*huart": "*uart_handle",
                "*pData": "*data",
                "Size": "size",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "HAL_UART_STATE_READY": "HAL_UART_STATE_READY",
                "HAL_BUSY": "HAL_BUSY",
                "uint8_t": "uint8_t",
                "NULL": "NULL",
                "HAL_ERROR": "HAL_ERROR",
                "Lock": "Lock",
                "pTxBuffPtr": "data",
                "TxXferSize": "size",
                "TxXferCount": "size",
                "ErrorCode": "ErrorCode",
                "HAL_UART_STATE_BUSY_TX": "HAL_UART_STATE_BUSY_TX",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "Instance": "Instance",
                "CR1": "CR1"
            },
            "code": "HAL_StatusTypeDef check_uart_ready_for_tx_0800455a(UART_HandleTypeDef *uart_handle, uint8_t *data, uint16_t size)\n{\n    if (uart_handle->gState != HAL_UART_STATE_READY) {\n        return HAL_BUSY;\n    }\n    if (data == NULL) {\n        return HAL_ERROR;\n    }\n    if (size == 0) {\n        return HAL_ERROR;\n    }\n    if (uart_handle->Lock != HAL_LOCKED) {\n        uart_handle->pTxBuffPtr = data;\n        uart_handle->TxXferSize = size;\n        uart_handle->TxXferCount = size;\n        uart_handle->ErrorCode = 0;\n        uart_handle->gState = HAL_UART_STATE_BUSY_TX;\n        uart_handle->Lock = HAL_UNLOCKED;\n        uart_handle->Instance->CR1 |= 0x80;\n        return HAL_OK;\n    }\n    return HAL_BUSY;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800455a",
            "calling": [
                "HAL_UART_TxCpltCallback",
                "uart_attach_tx_callback"
            ],
            "imported": false,
            "current_name": "check_uart_ready_for_tx_0800455a"
        },
        "FUN_08004d30": {
            "renaming": {
                "FUN_08004d30": "handle_rtc_alarm_08004d30",
                "PTR_RtcHandle_08004d3c": "rtc_handle",
                "HAL_RTC_AlarmIRQHandler": "handle_rtc_alarm_irq"
            },
            "code": "void handle_rtc_alarm_08004d30(void)\n{\n  RTC_HandleTypeDef* PTR_RtcHandle_08004d3c = (RTC_HandleTypeDef*)PTR_RtcHandle_08004d3c;\n  HAL_RTC_AlarmIRQHandler(PTR_RtcHandle_08004d3c);\n  return;\n}",
            "called": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d30",
            "calling": [],
            "imported": false,
            "current_name": "handle_rtc_alarm_08004d30"
        },
        "FUN_08001a66": {
            "renaming": {
                "FUN_08001a66": "pid_controller_set_direction_08001a66",
                "this": "controller",
                "Direction": "direction",
                "dVar1": "new_kp, new_ki, new_kd",
                "inAuto": "in_auto",
                "controllerDirection": "controller_direction",
                "kp": "kp",
                "ki": "ki",
                "kd": "kd"
            },
            "code": "void __thiscall pid_controller_set_direction_08001a66(PID *controller, int direction)\n{\n    double new_kp, new_ki, new_kd;\n\n    if ((controller->in_auto != false) && (controller->controller_direction != direction)) {\n        new_kp = -1 * controller->kp;\n        new_ki = -1 * controller->ki;\n        new_kd = -1 * controller->kd;\n        controller->kp = new_kp;\n        controller->ki = new_ki;\n        controller->kd = new_kd;\n    }\n    controller->controller_direction = direction;\n    return;\n}",
            "called": [
                "__subdf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a66",
            "calling": [
                "PID"
            ],
            "imported": false,
            "current_name": "pid_controller_set_direction_08001a66"
        },
        "FUN_08003c44": {
            "renaming": {
                "FUN_08003c44": "getSystemCoreClock_08003c44",
                "PTR_SystemCoreClock_08003c4c": "systemCoreClockPtr"
            },
            "code": "uint32_t getSystemCoreClock_08003c44(void)\n{\n  uint32_t* PTR_SystemCoreClock_08003c4c = (uint32_t*)PTR_SystemCoreClock_08003c4c;\n  return *PTR_SystemCoreClock_08003c4c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c44",
            "calling": [
                "SystemClock_Config",
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "imported": false,
            "current_name": "getSystemCoreClock_08003c44"
        },
        "FUN_08006074": {
            "renaming": {
                "FUN_08006074": "handle_external_interrupt_08006074",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void handle_external_interrupt_08006074(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006074",
            "calling": [],
            "imported": false,
            "current_name": "handle_external_interrupt_08006074"
        },
        "FUN_080028d2": {
            "renaming": {
                "FUN_080028d2": "set_i2c_device_address_080028d2",
                "hi2c": "i2c_handler",
                "Instance": "i2c_instance",
                "DR": "data_register",
                "Devaddress": "device_address",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef"
            },
            "code": "HAL_StatusTypeDef set_i2c_device_address_080028d2(I2C_HandleTypeDef *i2c_handler)\n{\n  uint8_t device_address = i2c_handler->Devaddress & 0xff;\n  i2c_handler->Instance->DR = device_address;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d2",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "set_i2c_device_address_080028d2"
        },
        "FUN_08000a18": {
            "renaming": {
                "FUN_08000a18": "is_end_of_string_08000a18",
                "in_CY": "character"
            },
            "code": "bool is_end_of_string_08000a18(char character){\n    __aeabi_cdrcmple();\n    return character == '\\0';\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a18",
            "calling": [
                "SetOutputLimits",
                "Compute",
                "printFloat",
                "Initialize",
                "loop"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08000a18"
        },
        "FUN_08005384": {
            "renaming": {
                "FUN_08005384": "initialize_uart_debug_08005384",
                "PinName_conflict": "PinName",
                "PTR_digitalPin_080053c4": "digitalPin_ptr",
                "void *pvVar2": "peripheral_base_address",
                "PinMap_conflict": "PinMap",
                "PTR_PinMap_UART_TX_080053c8": "UART_TX",
                "PinName_conflict PVar1": "peripheral_pin",
                "PTR_PinMap_UART_RX_080053cc": "UART_RX",
                "undefined *obj": "serial_debug_object",
                "PTR_serial_debug_080053d0": "serial_debug_object_ptr",
                "uart_init": "initialize_uart",
                "*(undefined4 *)(obj + 0x48)": "baud_rate",
                "*(undefined4 *)(obj + 0x54)": "flow_control",
                "*(undefined4 *)(obj + 0x4c)": "parity",
                "*(undefined4 *)(obj + 0x50)": "stop_bits"
            },
            "code": "void initialize_uart_debug_08005384(void)\n{\n  PinName_conflict digital_pin;\n  undefined *serial_debug_object;\n  PinName_conflict peripheral_pin;\n  void *peripheral_base_address;\n  digital_pin = digitalPin_1;\n  peripheral_base_address = pinmap_peripheral(digital_pin, (PinMap_conflict *)PTR_PinMap_UART_TX_080053c8);\n  if (peripheral_base_address != (void *)0x0) {\n    peripheral_base_address = pinmap_peripheral(digital_pin, (PinMap_conflict *)PTR_PinMap_UART_TX_080053c8);\n    peripheral_pin = pinmap_pin(peripheral_base_address, (PinMap_conflict *)PTR_PinMap_UART_RX_080053cc);\n    serial_debug_object = PTR_serial_debug_080053d0;\n    PTR_serial_debug_080053d0[0x59] = peripheral_pin;\n    PTR_serial_debug_080053d0[0x58] = digital_pin;\n    *(undefined4 *)(PTR_serial_debug_080053d0 + 0x48) = 0x2580;\n    *(undefined4 *)(PTR_serial_debug_080053d0 + 0x54) = 0;\n    *(undefined4 *)(PTR_serial_debug_080053d0 + 0x4c) = 0;\n    *(undefined4 *)(PTR_serial_debug_080053d0 + 0x50) = 0;\n    uart_init((serial_t *)serial_debug_object);\n  }\n  return;\n}",
            "called": [
                "pinmap_pin",
                "pinmap_peripheral",
                "uart_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005384",
            "calling": [
                "uart_debug_write"
            ],
            "imported": false,
            "current_name": "initialize_uart_debug_08005384"
        },
        "FUN_08005b3c": {
            "renaming": {
                "__thiscall HardwareSerial::FUN_08005b3c": "setSerialTransmitPin",
                "this": "serial",
                "_tx": "transmitPin",
                "PVar1": "pin",
                "PTR_digitalPin_08005b50": "digitalPinMapping",
                "FUN_08005b3c": "setSerialTransmitPin_08005b3c"
            },
            "code": "void __thiscall setSerialTransmitPin_08005b3c(HardwareSerial *serial, uint32_t transmitPin)\n{\n  PinName pin;\n  if (transmitPin < 0x3c) {\n    pin = PTR_digitalPin_08005b50[transmitPin];\n  }\n  else {\n    pin = NC;\n  }\n  (serial->_serial).pin_tx = pin;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b3c",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "setSerialTransmitPin_08005b3c"
        },
        "FUN_0800091c": {
            "renaming": {
                "FUN_0800091c": "compare_values_0800091c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "are_different",
                "bVar2": "is_zero1",
                "bVar3": "is_negative"
            },
            "code": "uint compare_values_0800091c(uint value1, uint value2, uint value3, uint value4)\n{\n  uint result;\n  bool is_zero1 = (value1 | value2 << 1) == 0;\n  bool is_zero2 = (value3 | value4 << 1) == 0;\n  bool are_equal1 = value1 == value3;\n  bool are_equal2 = value2 == value4;\n  bool are_different = value2 ^ value4;\n  bool is_negative = (int)are_different < 0;\n  bool is_valid = (int)(value2 << 1) >> 0x15 != -1 && (int)(value4 << 1) >> 0x15 != -1;\n  if (is_valid && ((int)(value2 << 1) >> 0x15 == -1 && !is_zero1 || (int)(value4 << 1) >> 0x15 == -1 && !is_zero2))\n  {\n    return 0xffffffff;\n  }\n  if (!is_zero1 && !is_zero2 && are_equal1 && are_equal2)\n  {\n    return 1;\n  }\n  if (!is_zero1 && !is_zero2 && !are_equal1 && !are_equal2)\n  {\n    if (is_negative)\n    {\n      result = ~(int)(value4 >> 0x1f);\n    }\n    else\n    {\n      result = (int)(value4 >> 0x1f);\n    }\n    return result | 1;\n  }\n  return 0;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800091c",
            "calling": [],
            "imported": false,
            "current_name": "compare_values_0800091c"
        },
        "FUN_080046b8": {
            "renaming": {
                "FUN_080046b8": "handle_uart_interrupt_080046b8",
                "*huart": "*uart_handle",
                "HVar1": "status",
                "uVar2": "cr1_reg",
                "pUVar3": "usart_inst",
                "uVar4": "cr3_bit",
                "uVar5": "sr_reg",
                "UART_Receive_IT": "UART_Receive_IT",
                "UART_Transmit_IT": "UART_Transmit_IT",
                "UART_EndTransmit_IT": "UART_EndTransmit_IT",
                "USART_ERROR_PE": "USART_ERROR_PE",
                "USART_ERROR_FE": "USART_ERROR_FE",
                "USART_ERROR_NE": "USART_ERROR_NE",
                "USART_ERROR_ORE": "USART_ERROR_ORE",
                "USART_SR_RXNE": "USART_SR_RXNE",
                "USART_SR_IDLE": "USART_SR_IDLE",
                "USART_CR1_IDLEIE": "USART_CR1_IDLEIE",
                "USART_CR3_EIE": "USART_CR3_EIE",
                "USART_SR_TC": "USART_SR_TC",
                "USART_CR1_TCIE": "USART_CR1_TCIE",
                "USART_SR_TXE": "USART_SR_TXE",
                "USART_CR1_TXEIE": "USART_CR1_TXEIE",
                "USART_SR_PE": "USART_SR_PE",
                "USART_CR1_PEIE": "USART_CR1_PEIE",
                "USART_SR_FE": "USART_SR_FE",
                "USART_SR_NE": "USART_SR_NE",
                "USART_SR_ORE": "USART_SR_ORE",
                "USART_CR3_DMAR": "USART_CR3_DMAR",
                "USART_CR3_DMAT": "USART_CR3_DMAT",
                "DAT_080047d4": "DAT_080047d4"
            },
            "code": "void handle_uart_interrupt_080046b8(UART_HandleTypeDef *uart_handle)\n{\n  HAL_StatusTypeDef status;\n  uint32_t sr_reg;\n  uint32_t cr1_reg;\n  uint32_t cr3_reg;\n  uint32_t error_code = 0;\n  USART_TypeDef *usart_inst = uart_handle->Instance;\n  sr_reg = usart_inst->SR;\n  cr1_reg = usart_inst->CR1;\n  cr3_reg = usart_inst->CR3;\n  if (((sr_reg & USART_SR_RXNE) == 0) && ((sr_reg & USART_SR_IDLE) != 0) && ((cr1_reg & USART_CR1_IDLEIE) != 0)) {\n    UART_Receive_IT(uart_handle);\n    return;\n  }\n  if (((sr_reg & USART_SR_RXNE) == 0) || ((cr3_reg & USART_CR3_EIE) == 0 && ((cr1_reg & (USART_CR1_RXNEIE | USART_CR1_PEIE)) == 0))) {\n    if (((sr_reg & USART_SR_TC) != 0) && ((cr1_reg & USART_CR1_TCIE) != 0)) {\n      UART_Transmit_IT(uart_handle);\n      return;\n    }\n    if (((sr_reg & USART_SR_TXE) != 0) && ((cr1_reg & USART_CR1_TXEIE) != 0)) {\n      UART_EndTransmit_IT(uart_handle);\n      return;\n    }\n  }\n  else {\n    if (((sr_reg & USART_SR_PE) != 0) && ((cr1_reg & USART_CR1_PEIE) != 0)) {\n      error_code |= USART_ERROR_PE;\n    }\n    if (((sr_reg & USART_SR_FE) != 0) && ((cr3_reg & USART_CR3_EIE) != 0)) {\n      error_code |= USART_ERROR_FE;\n    }\n    if (((sr_reg & USART_SR_NE) != 0) && ((cr3_reg & USART_CR3_EIE) != 0)) {\n      error_code |= USART_ERROR_NE;\n    }\n    if (((sr_reg & USART_SR_ORE) != 0) && ((cr3_reg & USART_CR3_EIE) != 0)) {\n      error_code |= USART_ERROR_ORE;\n    }\n    if (error_code != 0) {\n      if (((sr_reg & USART_SR_IDLE) != 0) && ((cr1_reg & USART_CR1_IDLEIE) != 0)) {\n        UART_Receive_IT(uart_handle);\n      }\n      if (((error_code & USART_ERROR_ORE) == 0) && ((cr3_reg & USART_CR3_DMAR) == 0)) {\n        HAL_UART_ErrorCallback(uart_handle);\n        error_code = 0;\n        return;\n      }\n      UART_EndRxTransfer(uart_handle);\n      usart_inst = uart_handle->Instance;\n      if ((usart_inst->CR3 & USART_CR3_DMAR) == 0) {\n        HAL_UART_ErrorCallback(uart_handle);\n        return;\n      }\n      usart_inst->CR3 = usart_inst->CR3 & ~USART_CR3_DMAR;\n      if (uart_handle->hdmarx == NULL) {\n        HAL_UART_ErrorCallback(uart_handle);\n        return;\n      }\n      uart_handle->hdmarx->XferAbortCallback = uart_handle->hdmatx->XferAbortCallback;\n      status = HAL_DMA_Abort_IT(uart_handle->hdmarx);\n      if (status != HAL_OK) {\n        (*uart_handle->hdmarx->XferAbortCallback)(uart_handle->hdmarx);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "HAL_UART_ErrorCallback",
                "UART_Receive_IT",
                "UART_EndRxTransfer",
                "UART_EndTransmit_IT",
                "HAL_DMA_Abort_IT",
                "UART_Transmit_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b8",
            "calling": [
                "USART1_IRQHandler",
                "USART3_IRQHandler",
                "USART2_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_uart_interrupt_080046b8"
        },
        "FUN_08004c8a": {
            "renaming": {
                "FUN_08004c8a": "find_pin_name_08004c8a",
                "PinName_conflict": "PinName_conflict",
                "PinMap_conflict": "PinMap_conflict",
                "void *peripheral": "void *peripheral",
                "PinMap_conflict *map": "PinMap_conflict *map",
                "NC": "NC",
                "map": "map",
                "peripheral": "peripheral"
            },
            "code": "PinName_conflict find_pin_name_08004c8a(void *peripheral, PinMap_conflict *map)\n{\n  while(true) {\n    if(map->peripheral == NULL) {\n      return NC;\n    }\n    if(map->peripheral == peripheral) {\n      break;\n    }\n    map++;\n  }\n  return map->pin;\n}",
            "called": [
                "pinmap_find_pin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c8a",
            "calling": [
                "pinmap_pin",
                "pinmap_find_pin"
            ],
            "imported": false,
            "current_name": "find_pin_name_08004c8a"
        },
        "FUN_08001cd0": {
            "renaming": {
                "FUN_08001cd0": "wait_for_adc_conversion_08001cd0",
                "*hadc": "*adc_handler",
                "HVar1": "status",
                "uVar2": "start_time",
                "uVar3": "elapsed_time",
                "iVar4": "sampling_time",
                "*pAVar5": "*adc_instance",
                "uVar6": "cpu_cycles_per_conversion",
                "Conversion_Timeout_CPU_cycles": "conversion_timeout_cycles"
            },
            "code": "HAL_StatusTypeDef_conflict wait_for_adc_conversion_08001cd0(ADC_HandleTypeDef *adc_handler, uint32_t timeout)\n{\n    HAL_StatusTypeDef_conflict status;\n    uint32_t start_time = HAL_GetTick();\n    uint32_t conversion_timeout_cycles = 0;\n    ADC_TypeDef *adc_instance = adc_handler->Instance;\n\n    if ((adc_instance->CR2 & ADC_CR2_ADON) == 0) {\n        if (((adc_instance->CR1 & ADC_CR1_EOCIE) == 0) && ((adc_instance->SQR1 & ADC_SQR1_L) == 0)) {\n            do {\n                if ((adc_handler->Instance->SR & ADC_SR_EOC) != 0) {\n                    goto conversion_complete;\n                }\n            } while ((timeout == 0xffffffff) || ((timeout != 0 && (HAL_GetTick() - start_time <= timeout))));\n\n            adc_handler->State = adc_handler->State | ADC_STATE_TIMEOUT;\n            adc_handler->Lock = HAL_UNLOCKED;\n            status = HAL_TIMEOUT;\n        }\n        else {\n            uint32_t cpu_cycles_per_conversion = (SystemCoreClock / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC)) * get_adc_sampling_time(adc_instance);\n            for (; conversion_timeout_cycles <= cpu_cycles_per_conversion && cpu_cycles_per_conversion - conversion_timeout_cycles != 0; conversion_timeout_cycles++) {\n                if ((timeout != 0xffffffff) && ((timeout == 0 || (HAL_GetTick() - start_time > timeout)))) {\n                    adc_handler->State = adc_handler->State | ADC_STATE_TIMEOUT;\n                    adc_handler->Lock = HAL_UNLOCKED;\n                    return HAL_TIMEOUT;\n                }\n            }\n            goto conversion_complete;\n        }\n    }\n    else {\n        adc_handler->State = adc_handler->State | ADC_STATE_ERROR_CONFIG;\n        adc_handler->Lock = HAL_UNLOCKED;\n        status = HAL_ERROR;\n    }\n\nconversion_complete:\n    adc_handler->Instance->SR = 0xffffffed;\n    adc_handler->State = adc_handler->State | ADC_STATE_READY;\n    if ((adc_handler->Instance->CR2 & ADC_CR2_CONT) == ADC_CR2_CONT) {\n        if ((adc_handler->Init).ContinuousConvMode == 0) {\n            adc_handler->State = adc_handler->State & ~ADC_STATE_INJECTED_BUSY;\n            if ((adc_handler->State & ADC_STATE_REG_EOC) == 0) {\n                adc_handler->State = adc_handler->State | ADC_STATE_REG_EOC;\n                status = HAL_OK;\n            }\n            else {\n                status = HAL_OK;\n            }\n        }\n        else {\n            status = HAL_OK;\n        }\n    }\n    else {\n        status = HAL_OK;\n    }\n    return status;\n}",
            "called": [
                "HAL_GetTick",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cd0",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "wait_for_adc_conversion_08001cd0"
        },
        "FUN_08004178": {
            "renaming": {
                "FUN_08004178": "do_nothing_08004178"
            },
            "code": "\nvoid do_nothing_08004178(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004178",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08004178"
        },
        "FUN_08000130": {
            "renaming": {
                "FUN_08000130": "execute_function_if_initialized_08000130",
                "PTR__edata_08000170": "edata_pointer",
                "DAT_08000164": "initialized_flag",
                "DAT_08000174": "function_pointer",
                "PTR_object_8672_0800016c": "object_pointer"
            },
            "code": "void execute_function_if_initialized_08000130(void)\n{\n    bool is_initialized = (*DAT_08000164) == 0;\n    bool is_function_defined = (*PTR__edata_08000170) != 0 && DAT_08000174 != NULL;\n    \n    if (is_initialized)\n    {\n        return;\n    }\n    \n    if (is_function_defined)\n    {\n        DAT_08000174(PTR__edata_08000170, PTR_object_8672_0800016c);\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000130",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_if_initialized_08000130"
        },
        "FUN_08004a4c": {
            "renaming": {
                "FUN_08004a4c": "readADC_08004a4c",
                "pin": "pin",
                "HVar1": "status",
                "uVar2": "value",
                "uhADCxConvertedValue": "convertedValue",
                "AdcChannelConf": "channelConfig",
                "AdcHandle": "adcHandle",
                "PTR_PinMap_ADC_08004b2c": "PinMap_ADC_08004b2c",
                "AdcHandle.Instance": "adcHandle.Instance",
                "AdcHandle.Init.DataAlign": "adcHandle.Init.DataAlign",
                "AdcHandle.Init.ScanConvMode": "adcHandle.Init.ScanConvMode",
                "AdcHandle.Init.ContinuousConvMode": "adcHandle.Init.ContinuousConvMode",
                "AdcHandle.Init.DiscontinuousConvMode": "adcHandle.Init.DiscontinuousConvMode",
                "AdcHandle.Init.ExternalTrigConv": "adcHandle.Init.ExternalTrigConv",
                "AdcHandle.State": "adcHandle.State",
                "AdcHandle.Init.NbrOfConversion": "adcHandle.Init.NbrOfConversion",
                "AdcHandle.Init.NbrOfDiscConversion": "adcHandle.Init.NbrOfDiscConversion",
                "PTR_g_current_pin_08004b30": "g_currentPin",
                "AdcChannelConf.Channel": "channelConfig.Channel",
                "AdcChannelConf.Rank": "channelConfig.Rank",
                "AdcChannelConf.SamplingTime": "channelConfig.SamplingTime",
                "HAL_ADC_Init": "HAL_ADC_Init",
                "get_adc_channel": "getADCChannel",
                "HAL_ADC_ConfigChannel": "HAL_ADC_ConfigChannel",
                "HAL_ADCEx_Calibration_Start": "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_Start": "HAL_ADC_Start",
                "HAL_ADC_PollForConversion": "HAL_ADC_PollForConversion",
                "HAL_ADC_GetState": "HAL_ADC_GetState",
                "ADC_FLAG_EOC": "ADC_FLAG_EOC",
                "HAL_ADC_GetValue": "HAL_ADC_GetValue",
                "HAL_ADC_Stop": "HAL_ADC_Stop",
                "HAL_ADC_DeInit": "HAL_ADC_DeInit"
            },
            "code": "uint16_t readADC_08004a4c(PinName_conflict pin)\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t value;\n  uint16_t convertedValue;\n  ADC_ChannelConfTypeDef channelConfig;\n  ADC_HandleTypeDef adcHandle;\n  memset(&adcHandle, 0, sizeof(adcHandle));\n  channelConfig.Channel = 0;\n  channelConfig.Rank = 0;\n  channelConfig.SamplingTime = 0;\n  convertedValue = 0;\n  adcHandle.Instance = (ADC_TypeDef *)pinmap_peripheral(pin, (PinMap_conflict *)PTR_PTR_PinMap_ADC_08004b2c);\n  if (adcHandle.Instance == (ADC_TypeDef *)0x0) {\n    convertedValue = 0;\n  }\n  else {\n    adcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;\n    adcHandle.Init.ScanConvMode = DISABLE;\n    adcHandle.Init.ContinuousConvMode = DISABLE;\n    adcHandle.Init.DiscontinuousConvMode = DISABLE;\n    adcHandle.Init.ExternalTrigConv = ADC_SOFTWARE_START;\n    adcHandle.State = 0;\n    adcHandle.Init.NbrOfConversion = 1;\n    adcHandle.Init.NbrOfDiscConversion = 0;\n    *PTR_g_current_pin_08004b30 = pin;\n    status = HAL_ADC_Init(&adcHandle);\n    if (status == HAL_OK) {\n      channelConfig.Channel = getADCChannel(pin);\n      if (channelConfig.Channel < 0x12) {\n        channelConfig.Rank = 1;\n        channelConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;\n        status = HAL_ADC_ConfigChannel(&adcHandle, &channelConfig);\n        if (status == HAL_OK) {\n          status = HAL_ADCEx_Calibration_Start(&adcHandle);\n          if (status == HAL_OK) {\n            status = HAL_ADC_Start(&adcHandle);\n            if (status == HAL_OK) {\n              status = HAL_ADC_PollForConversion(&adcHandle, 10);\n              if (status == HAL_OK) {\n                value = HAL_ADC_GetState(&adcHandle);\n                if ((value & ADC_FLAG_EOC) != 0) {\n                  value = HAL_ADC_GetValue(&adcHandle);\n                  convertedValue = (uint16_t)value;\n                }\n                status = HAL_ADC_Stop(&adcHandle);\n                if (status != HAL_OK) {\n                  convertedValue = 0;\n                }\n              }\n              else {\n                convertedValue = 0;\n              }\n            }\n            else {\n              convertedValue = 0;\n            }\n          }\n          else {\n            convertedValue = 0;\n          }\n        }\n        else {\n          convertedValue = 0;\n        }\n      }\n      else {\n        convertedValue = 0;\n      }\n      status = HAL_ADC_DeInit(&adcHandle);\n      if (status != HAL_OK) {\n        convertedValue = 0;\n      }\n    }\n    else {\n      convertedValue = 0;\n    }\n  }\n  return convertedValue;\n}",
            "called": [
                "get_adc_channel",
                "HAL_ADC_GetValue",
                "HAL_ADC_Start",
                "memset",
                "HAL_ADC_GetState",
                "pinmap_peripheral",
                "HAL_ADC_Init",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_DeInit",
                "HAL_ADC_ConfigChannel",
                "HAL_ADC_Stop",
                "HAL_ADC_PollForConversion"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a4c",
            "calling": [
                "analogRead"
            ],
            "imported": false,
            "current_name": "readADC_08004a4c"
        },
        "FUN_08006112": {
            "renaming": {
                "FUN_08006112": "register_exit_function_08006112",
                "param_1": "func_ptr",
                "param_2": "arg"
            },
            "code": "void register_exit_function_08006112(void (*func_ptr)(void), void *arg) {\n  __cxa_atexit(arg, func_ptr);\n  return;\n}",
            "called": [
                "__cxa_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006112",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "register_exit_function_08006112"
        },
        "FUN_08004974": {
            "renaming": {
                "FUN_08004974": "set_pin_mode_08004974",
                "*hadc": "*adc_handle",
                "GPIOx": "gpio_port",
                "tmpreg": "temp_reg",
                "tmpreg_1": "temp_reg_1",
                "GPIO_InitStruct": "gpio_init_struct",
                "puVar1": "current_pin"
            },
            "code": "void set_pin_mode_08004974(ADC_HandleTypeDef *adc_handle)\n{\n  uint32_t temp_reg;\n  uint32_t temp_reg_1;\n  GPIO_InitTypeDef gpio_init_struct;\n  GPIO_TypeDef *gpio_port;\n  uint8_t *current_pin = g_current_pin;\n\n  if (adc_handle->Instance == ADC1) {\n    *(uint *)(g_pin_map + 0x18) |= 0x200;\n  }\n  else if (adc_handle->Instance == ADC2) {\n    *(uint *)(g_pin_map + 0x18) |= 0x400;\n  }\n  gpio_port = set_GPIO_Port_Clock((uint)((int)(char)*current_pin << 0x18) >> 0x1c);\n  gpio_init_struct.Pin = 1 << (*current_pin & 0xf) & 0xffff;\n  gpio_init_struct.Mode = GPIO_MODE_ANALOG;\n  gpio_init_struct.Pull = GPIO_NOPULL;\n  HAL_GPIO_Init(gpio_port, &gpio_init_struct);\n  return;\n}",
            "called": [
                "HAL_GPIO_Init",
                "set_GPIO_Port_Clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004974",
            "calling": [
                "HAL_ADC_Init"
            ],
            "imported": false,
            "current_name": "set_pin_mode_08004974"
        },
        "FUN_08003520": {
            "renaming": {
                "FUN_08003520": "check_i2c_status_08003520",
                "hi2c": "i2c_handle",
                "HVar1": "current_state",
                "pIVar2": "i2c_instance",
                "uVar3": "sr1_value",
                "uVar4": "cr2_value",
                "DAT_080035f8": "I2C_SR1_ERROR_MASK",
                "0x100": "I2C_CR2_ITBUFEN",
                "HAL_I2C_MODE_SLAVE": "HAL_I2C_MODE_SLAVE",
                "HAL_I2C_MODE_MASTER": "HAL_I2C_MODE_MASTER",
                "HAL_I2C_STATE_BUSY_TX": "HAL_I2C_STATE_BUSY_TX",
                "HAL_I2C_STATE_BUSY_TX_LISTEN": "HAL_I2C_STATE_BUSY_TX_LISTEN",
                "HAL_I2C_STATE_LISTEN": "HAL_I2C_STATE_LISTEN",
                "0x21": "I2C_PREVIOUS_STATE",
                "I2C_ERROR_FLAG_1": "I2C_ERROR_FLAG_1",
                "I2C_CLEAR_ERROR_FLAG_1": "I2C_CLEAR_ERROR_FLAG_1",
                "I2C_CR1_ACK": "I2C_CR1_ACK",
                "I2C_ERROR_FLAG_2": "I2C_ERROR_FLAG_2",
                "I2C_CLEAR_ERROR_FLAG_2": "I2C_CLEAR_ERROR_FLAG_2",
                "I2C_SR1_ERROR_MASK": "I2C_SR1_ERROR_MASK",
                "I2C_ERROR_FLAG_4": "I2C_ERROR_FLAG_4",
                "I2C_CR1_STOP": "I2C_CR1_STOP",
                "I2C_CLEAR_ERROR_FLAG_4": "I2C_CLEAR_ERROR_FLAG_4",
                "I2C_SR1_ADDR_MASK": "I2C_SR1_ADDR_MASK",
                "I2C_SR1_BTF_MASK": "I2C_SR1_BTF_MASK",
                "I2C_ERROR_FLAG_8": "I2C_ERROR_FLAG_8",
                "I2C_CLEAR_ERROR_FLAG_8": "I2C_CLEAR_ERROR_FLAG_8",
                "I2C_ERROR_NONE": "I2C_ERROR_NONE",
                "I2C_ITError": "I2C_ITError",
                "Instance": "Instance",
                "ErrorCode": "ErrorCode",
                "State": "State",
                "Mode": "Mode",
                "XferCount": "XferCount",
                "PreviousState": "PreviousState",
                "I2C_HandleTypeDef": "I2C_HandleTypeDef",
                "I2C_TypeDef": "I2C_TypeDef",
                "uint": "uint16_t"
            },
            "code": "void check_i2c_status_08003520(I2C_HandleTypeDef *i2c_handle){\n    HAL_I2C_StateTypeDef current_state;\n    I2C_TypeDef *i2c_instance;\n    uint16_t sr1_value;\n    uint16_t cr2_value;\n    i2c_instance = i2c_handle->Instance;\n    sr1_value = i2c_instance->SR1;\n    cr2_value = i2c_instance->CR2;\n    if (((sr1_value & DAT_080035f8) != 0) && ((cr2_value & I2C_CR2_ITBUFEN) != 0)) {\n        i2c_handle->ErrorCode |= I2C_ERROR_FLAG_1;\n        i2c_instance->SR1 = I2C_CLEAR_ERROR_FLAG_1;\n        i2c_instance->CR1 |= I2C_CR1_ACK;\n    }\n    if (((sr1_value & I2C_SR1_ADDR_MASK) != 0) && ((cr2_value & I2C_CR2_ITBUFEN) != 0)) {\n        i2c_handle->ErrorCode |= I2C_ERROR_FLAG_2;\n        i2c_instance->SR1 = I2C_CLEAR_ERROR_FLAG_2;\n    }\n    if (((sr1_value & I2C_SR1_BTF_MASK) != 0) && ((cr2_value & I2C_CR2_ITBUFEN) != 0)) {\n        current_state = i2c_handle->State;\n        if (((i2c_handle->Mode == HAL_I2C_MODE_SLAVE) && (i2c_handle->XferCount == 0)) && (((current_state == HAL_I2C_STATE_BUSY_TX) || (current_state == HAL_I2C_STATE_BUSY_TX_LISTEN)) || ((current_state == HAL_I2C_STATE_LISTEN) && (i2c_handle->PreviousState == I2C_PREVIOUS_STATE)))) {\n            I2C_Slave_AF(i2c_handle);\n        }\n        else {\n            i2c_handle->ErrorCode |= I2C_ERROR_FLAG_4;\n            if (i2c_handle->Mode == HAL_I2C_MODE_MASTER) {\n                i2c_instance->CR1 |= I2C_CR1_STOP;\n            }\n            i2c_instance->SR1 = I2C_CLEAR_ERROR_FLAG_4;\n        }\n    }\n    if (((sr1_value & I2C_SR1_STOPF_MASK) != 0) && ((cr2_value & I2C_CR2_ITBUFEN) != 0)) {\n        i2c_handle->ErrorCode |= I2C_ERROR_FLAG_8;\n        i2c_instance->SR1 = I2C_CLEAR_ERROR_FLAG_8;\n    }\n    if (i2c_handle->ErrorCode != I2C_ERROR_NONE) {\n        I2C_ITError(i2c_handle);\n    }\n}",
            "called": [
                "I2C_Slave_AF",
                "I2C_ITError"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003520",
            "calling": [
                "I2C2_ER_IRQHandler",
                "I2C1_ER_IRQHandler"
            ],
            "imported": false,
            "current_name": "check_i2c_status_08003520"
        },
        "FUN_08002ca6": {
            "renaming": {
                "FUN_08002ca6": "handle_i2c_transfer_08002ca6",
                "hi2c": "i2c_handle",
                "HVar1": "current_state",
                "puVar2": "buffer_ptr"
            },
            "code": "HAL_StatusTypeDef_conflict handle_i2c_transfer_08002ca6(I2C_HandleTypeDef *i2c_handle)\n{\n  HAL_I2C_StateTypeDef current_state;\n  uint8_t *buffer_ptr;\n  \n  current_state = i2c_handle->State;\n  if (i2c_handle->XferCount != 0) {\n    buffer_ptr = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_ptr + 1;\n    *buffer_ptr = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n    if ((i2c_handle->XferCount == 0) && (current_state == HAL_I2C_STATE_BUSY_RX_LISTEN)) {\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffffbff;\n      i2c_handle->PreviousState = 0x22;\n      i2c_handle->State = HAL_I2C_STATE_LISTEN;\n      HAL_I2C_SlaveRxCpltCallback(i2c_handle);\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca6",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_i2c_transfer_08002ca6"
        },
        "FUN_08002ca4": {
            "renaming": {
                "FUN_08002ca4": "do_nothing_08002ca4"
            },
            "code": "\nvoid do_nothing_08002ca4(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca4",
            "calling": [
                "I2C_SlaveReceive_RXNE",
                "I2C_Slave_STOPF"
            ],
            "imported": false,
            "current_name": "do_nothing_08002ca4"
        },
        "FUN_08007328": {
            "renaming": {
                "FUN_08007328": "do_nothing_08007328"
            },
            "code": "\nvoid do_nothing_08007328(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007328",
            "calling": [
                "__libc_init_array",
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "do_nothing_08007328"
        },
        "FUN_08005b54": {
            "renaming": {
                "FUN_08005b54::FUN_08005b54": "initializeSerial",
                "this": "serialObject",
                "peripheral": "peripheral",
                "PVar1": "rxPin",
                "extraout_r1": "ctx",
                "ctx": "ctx",
                "extraout_r1_00": "ctx",
                "PTR_Serial2_08005ba4": "Serial2_ptr_08005ba4",
                "setRx": "setRx",
                "setTx": "setTx",
                "PTR_PTR_write_1_08005ba0": "write_1_ptr_ptr_08005ba0",
                "_serial": "serialObject->_serial",
                "PinMap_conflict": "PinMap_conflict",
                "PTR_PinMap_UART_RX_08005ba8": "PinMap_UART_RX_ptr_08005ba8",
                "PTR_PinMap_UART_TX_08005bac": "PinMap_UART_TX_ptr_08005bac",
                "init": "init",
                "FUN_08005b54": "initializeSerial_08005b54"
            },
            "code": "initializeSerial_08005b54* __thiscall initializeSerial_08005b54(initializeSerial_08005b54* serialObject, void* peripheral) {\n    PinName rxPin;\n    EVP_PKEY_CTX* ctx;\n    serialObject->super_Stream.super_Print.write_error = 0;\n    serialObject->super_Stream._timeout = 1000;\n    serialObject->super_Stream.super_Print._vptr_Print = (_func_int_varargs**)PTR_PTR_write_1_08005ba0;\n    if (serialObject == (initializeSerial_08005b54*)PTR_Serial2_08005ba4) {\n        setRx(serialObject, 0);\n        setTx(serialObject, 1);\n        ctx = ctx_ptr_08005ba0;\n    }\n    else {\n        rxPin = pinmap_pin(peripheral, (PinMap_conflict*)PTR_PinMap_UART_RX_08005ba8);\n        serialObject->_serial.pin_rx = rxPin;\n        serialObject->_serial.pin_tx = pinmap_pin(peripheral, (PinMap_conflict*)PTR_PinMap_UART_TX_08005bac);\n        ctx = ctx_ptr_08005b54;\n    }\n    init(serialObject, ctx);\n    return serialObject;\n}\n",
            "called": [
                "pinmap_pin",
                "setTx",
                "setRx",
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b54",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "initializeSerial_08005b54"
        },
        "FUN_08004618": {
            "renaming": {
                "FUN_08004618": "receive_data_08004618",
                "*huart": "*uart",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "pbVar1": "rx_byte_ptr",
                "uVar2": "rx_word",
                "puVar3": "rx_byte_ptr",
                "huart->RxState": "uart->RxState",
                "HAL_UART_STATE_BUSY_RX": "HAL_UART_STATE_BUSY_RX",
                "(huart->Init).WordLength": "(uart->Init).WordLength",
                "UART_WORDLENGTH_9B": "UART_WORDLENGTH_9B",
                "(huart->Init).Parity": "(uart->Init).Parity",
                "UART_PARITY_NONE": "UART_PARITY_NONE",
                "*(ushort *)huart->pRxBuffPtr": "*(uint16_t *)uart->pRxBuffPtr",
                "huart->pRxBuffPtr": "uart->pRxBuffPtr",
                "huart->Instance->DR": "uart->Instance->DR",
                "huart->RxXferCount": "uart->RxXferCount",
                "uart->RxXferCount": "uart->RxXferCount",
                "HAL_OK": "HAL_OK",
                "uart->Instance->CR1": "uart->Instance->CR1",
                "USART_CR1_RXNEIE": "USART_CR1_RXNEIE",
                "USART_CR1_PEIE": "USART_CR1_PEIE",
                "uart->Instance->CR3": "uart->Instance->CR3",
                "USART_CR3_EIE": "USART_CR3_EIE",
                "uart->RxState": "uart->RxState",
                "HAL_UART_STATE_READY": "HAL_UART_STATE_READY",
                "HAL_UART_RxCpltCallback": "HAL_UART_RxCpltCallback",
                "huart": "uart"
            },
            "code": "HAL_StatusTypeDef receive_data_08004618(UART_HandleTypeDef *uart)\n{\n  uint8_t *rx_byte_ptr;\n  uint16_t rx_word;\n  HAL_StatusTypeDef status = HAL_OK;\n  \n  if (uart->RxState != HAL_UART_STATE_BUSY_RX) {\n    return HAL_BUSY;\n  }\n  \n  if ((uart->Init).WordLength == UART_WORDLENGTH_9B) {\n    if ((uart->Init).Parity == UART_PARITY_NONE) {\n      rx_word = (uint16_t)((uart->Instance->DR << 0x17) >> 0x17);\n      *(uint16_t *)uart->pRxBuffPtr = rx_word;\n      uart->pRxBuffPtr += 2;\n    }\n    else {\n      rx_word = (uint16_t)(uart->Instance->DR & 0xff);\n      *(uint16_t *)uart->pRxBuffPtr = rx_word;\n      uart->pRxBuffPtr++;\n    }\n  }\n  else {\n    if ((uart->Init).Parity == UART_PARITY_NONE) {\n      rx_byte_ptr = uart->pRxBuffPtr;\n      *rx_byte_ptr = (uint8_t)uart->Instance->DR;\n      uart->pRxBuffPtr++;\n    }\n    else {\n      rx_byte_ptr = uart->pRxBuffPtr;\n      *rx_byte_ptr = (uint8_t)(uart->Instance->DR & 0x7f);\n      uart->pRxBuffPtr++;\n    }\n  }\n  \n  uart->RxXferCount--;\n  if (uart->RxXferCount == 0) {\n    uart->Instance->CR1 &= ~USART_CR1_RXNEIE;\n    uart->Instance->CR1 &= ~USART_CR1_PEIE;\n    uart->Instance->CR3 &= ~USART_CR3_EIE;\n    uart->RxState = HAL_UART_STATE_READY;\n    HAL_UART_RxCpltCallback(uart);\n  }\n  \n  return status;\n}",
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004618",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "receive_data_08004618"
        },
        "FUN_080060a6": {
            "renaming": {
                "FUN_080060a6": "handle_gpio_exti_irq_080060a6",
                "uVar1": "gpio_pin"
            },
            "code": "void handle_gpio_exti_irq_080060a6(void)\n{\n  uint16_t gpio_pin = 0x20;\n  while (gpio_pin < 0x201) {\n    HAL_GPIO_EXTI_IRQHandler(gpio_pin);\n    gpio_pin <<= 1;\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060a6",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_exti_irq_080060a6"
        },
        "FUN_08001c30": {
            "renaming": {
                "FUN_08001c30": "infinite_loop_08001c30"
            },
            "code": "void infinite_loop_08001c30(void) {\n    while (true) {\n        // Do nothing\n    }\n}",
            "called": [
                "USB_HP_CAN1_TX_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c30",
            "calling": [
                "USB_HP_CAN1_TX_IRQHandler"
            ],
            "imported": false,
            "current_name": "infinite_loop_08001c30"
        },
        "FUN_08005c72": {
            "renaming": {
                "__thiscall Print::FUN_08005c72": "size_t Print::printBuffer",
                "this": "printObj",
                "buffer": "buffer",
                "size": "bufferSize",
                "sVar2": "bytesWritten",
                "pPVar1": "currentObj",
                "FUN_08005c72": "printBuffer_08005c72"
            },
            "code": "size_t Print::printBuffer_08005c72(Print *printObj, uint8_t *buffer, size_t bufferSize)\n{\n  Print *currentObj;\n  size_t bytesWritten = 0;\n  \n  currentObj = printObj;\n  while(bufferSize > 0) {\n    if (bufferSize == 0) {\n      return bytesWritten;\n    }\n    currentObj = (Print *)(**printObj->_vptr_Print)(currentObj,(uint)*buffer);\n    if (currentObj == (Print *)0x0) break;\n    bytesWritten += 1;\n    buffer += 1;\n    bufferSize -= 1;\n  }\n  return bytesWritten;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c72",
            "calling": [],
            "imported": false,
            "current_name": "printBuffer_08005c72"
        },
        "FUN_08006c40": {
            "renaming": {
                "std_isra_0": "initialize_data_structure",
                "param_1": "data_structure",
                "param_2": "value1",
                "param_3": "value2",
                "*param_1": "*data_structure",
                "uVar1": "temp_var",
                "DAT_08006c78": "PTR_DAT_08006c78",
                "DAT_08006c7c": "PTR_DAT_08006c7c",
                "DAT_08006c80": "PTR_DAT_08006c80",
                "DAT_08006c84": "PTR_DAT_08006c84",
                "FUN_08006c40": "initialize_data_structure_08006c40"
            },
            "code": "void initialize_data_structure_08006c40(undefined4 *data_structure, undefined2 value1, undefined2 value2) {\n    *data_structure = 0;\n    data_structure[1] = 0;\n    data_structure[2] = 0;\n    *(undefined2 *)(data_structure + 3) = value1;\n    data_structure[25] = 0;\n    *(undefined2 *)((int)data_structure + 0xe) = value2;\n    data_structure[4] = 0;\n    data_structure[5] = 0;\n    data_structure[6] = 0;\n    memset(data_structure + 23, 0, 8);\n    data_structure[8] = data_structure;\n    data_structure[9] = DAT_08006c78;\n    data_structure[10] = DAT_08006c7c;\n    data_structure[11] = DAT_08006c80;\n    data_structure[12] = DAT_08006c84;\n    return;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c40",
            "calling": [
                "__sinit"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_08006c40"
        },
        "FUN_0800048c": {
            "renaming": {
                "FUN_0800048c": "calculate_double_precision_0800048c",
                "param_1": "input1",
                "param_2": "input2",
                "iVar7": "temp_int2",
                "uVar8": "temp_uint2",
                "uVar4": "temp1",
                "uVar6": "temp_uint1",
                "iVar5": "temp_int1",
                "bVar9": "temp_bool1",
                "bVar10": "temp_bool2",
                "bVar11": "temp_bool3",
                "bVar1": "temp_byte"
            },
            "code": "ulonglong calculate_double_precision_0800048c(uint input1, uint input2)\n{\n    byte temp_byte;\n    uint temp1, temp2, temp3, temp4, temp5;\n    int temp_int1, temp_int2;\n    uint temp_uint1, temp_uint2;\n    bool temp_bool1, temp_bool2, temp_bool3;\n    if ((input1 | input2) == 0) {\n        return CONCAT44(input2, input1);\n    }\n    temp_int2 = 0x432;\n    temp_uint2 = input2 >> 0x16;\n    if (temp_uint2 != 0) {\n        temp_int2 = 3;\n        if (input2 >> 0x19 != 0) {\n            temp_int2 = 6;\n        }\n        if (input2 >> 0x1c != 0) {\n            temp_int2 = temp_int2 + 3;\n        }\n        temp4 = temp_int2 - ((int)input2 >> 0x1f);\n        temp_uint2 = input1 << (0x20 - temp4 & 0xff);\n        input1 = input1 >> (temp4 & 0xff) | input2 << (0x20 - temp4 & 0xff);\n        input2 = input2 >> (temp4 & 0xff);\n        temp_int2 = temp4 + 0x432;\n    }\n    if (0xfffff < input2) {\n        if (0x1fffff < input2) {\n            temp4 = input2 & 1;\n            input2 = input2 >> 1;\n            temp_byte = (byte)input1;\n            input1 = (uint)(temp4 != 0) << 0x1f | input1 >> 1;\n            temp_uint2 = (uint)(temp_byte & 1) << 0x1f | temp_uint2 >> 1;\n            temp_int2 = temp_int2 + 1;\n            if (0xffbfffff < (uint)(temp_int2 * 0x200000)) {\n                return 0x7ff0000000000000;\n            }\n        }\n    LAB_080002a0:\n        temp_bool2 = 0x7fffffff < temp_uint2;\n        if (temp_uint2 == 0x80000000) {\n            temp_bool2 = (input1 & 1) != 0;\n        }\n        return CONCAT44(input2 + temp_int2 * 0x100000 + (uint)CARRY4(input1, (uint)temp_bool2), input1 + temp_bool2);\n    }\n    temp_bool1 = (temp_uint2 & 0x80000000) != 0;\n    temp_uint2 = temp_uint2 << 1;\n    temp4 = input1 * 2;\n    temp_bool2 = CARRY4(input1, input1);\n    input1 = input1 * 2 + (uint)temp_bool1;\n    input2 = input2 * 2 + (uint)(temp_bool2 || CARRY4(temp4, (uint)temp_bool1));\n    temp_int2 = temp_int2 + -1;\n    if ((input2 & 0x100000) != 0) {\n        goto LAB_080002a0;\n    }\n    temp1 = input1;\n    temp3 = input2;\n    if (input2 == 0) {\n        temp1 = 0;\n        temp3 = input1;\n    }\n    temp_int1 = count_leading_zeroes(temp3);\n    if (input2 == 0) {\n        temp_int1 = temp_int1 + 0x20;\n    }\n    temp_uint1 = temp_int1 - 0xb;\n    temp_bool3 = SBORROW4(temp_uint1, 0x20);\n    temp2 = temp_int1 - 0x2b;\n    temp_bool2 = (int)temp2 < 0;\n    temp_bool1 = temp2 == 0;\n    if ((int)temp_uint1 < 0x20) {\n        temp_bool3 = SCARRY4(temp2, 0xc);\n        temp_int1 = temp_int1 + -0x1f;\n        temp_bool2 = temp_int1 < 0;\n        temp_bool1 = temp_int1 == 0;\n        temp_uint1 = temp_uint1;\n        if (!temp_bool1 && temp_bool2 == temp_bool3) {\n            temp_uint2 = temp3 << (temp_uint1 & 0xff);\n            temp3 = temp3 >> (0xcU - temp_int1 & 0xff);\n            goto LAB_08000318;\n        }\n    }\n    if (temp_bool1 || temp_bool2 != temp_bool3) {\n        temp_uint2 = 0x20 - temp_uint1;\n    }\n    temp3 = temp3 << (temp_uint1 & 0xff);\n    if (temp_bool1 || temp_bool2 != temp_bool3) {\n        temp3 = temp3 | temp1 >> (temp_uint2 & 0xff);\n    }\n    if (temp_bool1 || temp_bool2 != temp_bool3) {\n        temp1 = temp1 << (temp_uint1 & 0xff);\n    }\nLAB_08000318:\n    if ((int)temp_uint1 <= temp_int2) {\n        return CONCAT44(temp3 + (temp_int2 - temp_uint1) * 0x100000, temp1);\n    }\n    temp_uint2 = ~(temp_int2 - temp_uint1);\n    if (0x1e < (int)temp_uint2) {\n        return (ulonglong)(temp3 >> (temp_uint2 - 0x1f & 0xff));\n    }\n    temp_int2 = temp_uint2 - 0x13;\n    if (temp_int2 == 0 || temp_int2 < 0 != SCARRY4(temp_uint2 - 0x1f, 0xc)) {\n        temp_uint2 = temp_uint2 + 1;\n        return CONCAT44(temp3 >> (temp_uint2 & 0xff), temp1 >> (temp_uint2 & 0xff) | temp3 << (0x20 - temp_uint2 & 0xff));\n    }\n    return (ulonglong)(temp1 >> (0x20 - (0xcU - temp_int2) & 0xff) | temp3 << (0xcU - temp_int2 & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800048c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_double_precision_0800048c"
        },
        "FUN_0800157c": {
            "renaming": {
                "FUN_0800157c::FUN_0800157c": "initialize_pins_and_return_instance",
                "this": "instance",
                "SO": "SO_pin",
                "CS": "CS_pin",
                "SCK": "SCK_pin",
                "FUN_0800157c": "initialize_pins_and_return_instance_0800157c"
            },
            "code": "initialize_pins_and_return_instance_0800157c * __thiscall initialize_pins_and_return_instance_0800157c(initialize_pins_and_return_instance_0800157c *instance, uchar SO_pin, uchar CS_pin, uchar SCK_pin)\n{\n  instance->SO_pin = SO_pin;\n  instance->CS_pin = CS_pin;\n  instance->SCK_pin = SCK_pin;\n  pinMode((uint)SO_pin, INPUT);\n  pinMode((uint)CS_pin, OUTPUT);\n  pinMode((uint)SCK_pin, OUTPUT);\n  digitalWrite((uint)CS_pin, HIGH);\n  digitalWrite((uint)SCK_pin, LOW);\n  return instance;\n}",
            "called": [
                "digitalWrite",
                "pinMode"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "initialize_pins_and_return_instance_0800157c"
        },
        "FUN_080045a2": {
            "renaming": {
                "FUN_080045a2": "uart_receive_080045a2",
                "*huart": "*uart_handle",
                "*pData": "*receive_data",
                "Size": "data_size",
                "pRxBuffPtr": "receive_buffer_pointer",
                "RxXferSize": "receive_transfer_size",
                "RxXferCount": "receive_transfer_count",
                "ErrorCode": "error_code",
                "RxState": "receive_state",
                "Lock": "lock_state",
                "Instance": "uart_instance",
                "CR1": "control_register_1",
                "CR3": "control_register_3",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef"
            },
            "code": "HAL_StatusTypeDef uart_receive_080045a2(UART_HandleTypeDef *uart_handle, uint8_t *receive_data, uint16_t data_size)\n{\n    if (uart_handle->RxState != HAL_UART_STATE_READY) {\n        return HAL_BUSY;\n    }\n    if (receive_data == NULL) {\n        return HAL_ERROR;\n    }\n    if (data_size == 0) {\n        return HAL_ERROR;\n    }\n    if (uart_handle->Lock != HAL_LOCKED) {\n        uart_handle->pRxBuffPtr = receive_data;\n        uart_handle->RxXferSize = data_size;\n        uart_handle->RxXferCount = data_size;\n        uart_handle->ErrorCode = 0;\n        uart_handle->RxState = HAL_UART_STATE_BUSY_RX;\n        uart_handle->Lock = HAL_UNLOCKED;\n        uart_handle->Instance->CR1 |= USART_CR1_RXNEIE;\n        uart_handle->Instance->CR3 |= USART_CR3_EIE;\n        uart_handle->Instance->CR1 |= USART_CR1_RE;\n        return HAL_OK;\n    }\n    return HAL_BUSY;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045a2",
            "calling": [
                "uart_getc",
                "uart_attach_rx_callback"
            ],
            "imported": false,
            "current_name": "uart_receive_080045a2"
        },
        "FUN_08001c32": {
            "renaming": {
                "FUN_08001c32": "initialize_EVP_PKEY_CTX_08001c32",
                "ctx": "pctx",
                "hw_config_FUN_08001c32": "initialize_hw_config"
            },
            "code": "int initialize_EVP_PKEY_CTX_08001c32(EVP_PKEY_CTX *pctx)\n{\n  initialize_hw_config();\n  return (int)pctx;\n}",
            "called": [
                "hw_config_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c32",
            "calling": [
                "premain"
            ],
            "imported": false,
            "current_name": "initialize_EVP_PKEY_CTX_08001c32"
        },
        "FUN_080047e8": {
            "renaming": {
                "FUN_080047e8": "get_uart_receive_state_080047e8",
                "huart": "uart_handle",
                "RxState": "receive_state",
                "gState": "general_state"
            },
            "code": "HAL_UART_StateTypeDef get_uart_receive_state_080047e8(UART_HandleTypeDef *uart_handle) {\n  HAL_UART_StateTypeDef receive_state = uart_handle->RxState;\n  HAL_UART_StateTypeDef general_state = uart_handle->gState;\n  return receive_state | general_state;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047e8",
            "calling": [
                "serial_rx_active",
                "serial_tx_active"
            ],
            "imported": false,
            "current_name": "get_uart_receive_state_080047e8"
        },
        "FUN_080057b4": {
            "renaming": {
                "FUN_080057b4": "configure_pin_080057b4",
                "ulPin": "pin_number",
                "ulMode": "mode",
                "_Var1": "is_pin_output",
                "pin": "pin_name",
                "PTR_digitalPin_08005838": "digitalPin_08005838",
                "NC": "NC",
                "is_pin_configured": "is_pin_configured",
                "PTR_g_anOutputPinConfigured_0800583c": "g_anOutputPinConfigured_0800583c",
                "pin_in_pinmap": "pin_in_pinmap",
                "PinMap_conflict": "PinMap_PWM_08005840",
                "pwm_stop": "pwm_stop",
                "reset_pin_configured": "reset_pin_configured",
                "digital_io_init": "digital_io_init",
                "set_pin_configured": "set_pin_configured",
                "PTR_g_digPinConfigured_08005844": "g_digPinConfigured_08005844"
            },
            "code": "void configure_pin_080057b4(uint32_t pin_number, uint32_t mode)\n{\n  bool is_pin_output = false;\n  PinName_conflict pin_name;\n\n  if (pin_number < 0x3c) {\n    pin_name = PTR_digitalPin_08005838[pin_number];\n  }\n  else {\n    pin_name = NC;\n  }\n  if (pin_name != NC) {\n    is_pin_output = is_pin_configured(pin_name, (uint32_t *)PTR_g_anOutputPinConfigured_0800583c);\n    if (is_pin_output && pin_in_pinmap(pin_name, (PinMap_conflict *)PinMap_PWM_08005840)) {\n      pwm_stop(pin_name);\n    }\n    reset_pin_configured(pin_name, (uint32_t *)PTR_g_anOutputPinConfigured_0800583c);\n    switch(mode) {\n      case 0:\n        digital_io_init(pin_name, 0, 0);\n        break;\n      case 1:\n        digital_io_init(pin_name, 1, 0);\n        break;\n      case 2:\n        digital_io_init(pin_name, 0, 1);\n        break;\n      case 3:\n        digital_io_init(pin_name, 0, 2);\n        break;\n    }\n    set_pin_configured(pin_name, (uint32_t *)PTR_g_digPinConfigured_08005844);\n  }\n  return;\n}",
            "called": [
                "digital_io_init",
                "pwm_stop",
                "is_pin_configured",
                "reset_pin_configured",
                "pin_in_pinmap",
                "set_pin_configured"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057b4",
            "calling": [
                "setup",
                "MAX31855",
                "begin"
            ],
            "imported": false,
            "current_name": "configure_pin_080057b4"
        },
        "FUN_08007334": {
            "renaming": {
                "FUN_08007334": "do_nothing_08007334"
            },
            "code": "\nvoid do_nothing_08007334(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007334",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08007334"
        },
        "FUN_08001b18": {
            "renaming": {
                "FUN_08001b18": "create_controller_08001b18",
                "this": "controller_ptr",
                "Input": "input_ptr",
                "Output": "output_ptr",
                "Setpoint": "setpoint_ptr",
                "Kp": "kp_val",
                "Ki": "ki_val",
                "Kd": "kd_val",
                "ControllerDirection": "controller_direction_val"
            },
            "code": "double* input_ptr;\ndouble* output_ptr;\ndouble* setpoint_ptr;\ndouble kp_val;\ndouble ki_val;\ndouble kd_val;\nint controller_direction_val;\n\ncreate_controller_08001b18* create_controller_08001b18::create_controller_08001b18(double* input, double* output, double* set_point, double kp, double ki, double kd, int controller_direction)\n{\n  input_ptr = input;\n  output_ptr = output;\n  setpoint_ptr = set_point;\n  kp_val = kp;\n  ki_val = ki;\n  kd_val = kd;\n  controller_direction_val = controller_direction;\n  create_controller_08001b18(this, input_ptr, output_ptr, setpoint_ptr, kp_val, ki_val, kd_val, 1, controller_direction_val);\n  return this;\n}\n",
            "called": [
                "PID"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b18",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "create_controller_08001b18"
        },
        "FUN_0800092c": {
            "renaming": {
                "FUN_0800092c": "compare_values_0800092c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "xor_result",
                "bVar2": "both_values_negative",
                "bVar3": "value4_less_than_value2",
                "bVar4": "value3_less_than_value1",
                "result": "result"
            },
            "code": "uint compare_values_0800092c(uint value1, uint value2, uint value3, uint value4)\n{\n  bool both_values_negative = ((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1);\n  bool one_value_negative = ((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) || ((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0));\n  if (both_values_negative && one_value_negative)\n  {\n    return 1;\n  }\n  bool both_values_zero = (value1 | value2 << 1) == 0 && (value3 | value4 << 1) == 0;\n  bool values_equal = value2 == value4 && value1 == value3;\n  if (!both_values_zero && !values_equal)\n  {\n    uint xor_result = value2 ^ value4;\n    bool xor_result_positive = -1 < (int)xor_result;\n    bool value4_less_than_value2 = xor_result_positive && value4 <= value2;\n    bool value3_less_than_value1 = xor_result_positive && value3 <= value1;\n    uint result = (int)value4 >> 0x1f;\n    if (!value4_less_than_value2 && !value3_less_than_value1)\n    {\n      result = ~result;\n    }\n    return result | 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800092c",
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "imported": false,
            "current_name": "compare_values_0800092c"
        },
        "FUN_08005d8a": {
            "renaming": {
                "__thiscall Print::FUN_08005d8a": "Print::printNumber",
                "this": "this",
                "n": "number",
                "base": "base",
                "sVar1": "length",
                "_vptr_Print": "_vptr_Print",
                "FUN_08005d8a": "printNumber_08005d8a"
            },
            "code": "size_t __thiscall Print::printNumber_08005d8a(Print *this, ulong number, int base)\n{\n  size_t length;\n  if (base != 0)\n  {\n    length = printNumber_08005d8a(this, number, (uint8_t)base);\n  }\n  else\n  {\n    length = (**this->_vptr_Print)(this, number & 0xff);\n  }\n  return length;\n}",
            "called": [
                "printNumber"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d8a",
            "calling": [
                "print",
                "printFloat"
            ],
            "imported": false,
            "current_name": "printNumber_08005d8a"
        },
        "FUN_08002560": {
            "renaming": {
                "FUN_08002560": "set_clock_source_08002560",
                "CLKSource": "source",
                "*DAT_0800257c": "clock_register"
            },
            "code": "void set_clock_source_08002560(uint32_t source) {\n  if (source != 4) {\n    *DAT_0800257c = *DAT_0800257c & 0xfffffffb;\n    return;\n  }\n  *DAT_0800257c = *DAT_0800257c | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002560",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "set_clock_source_08002560"
        },
        "FUN_08006e90": {
            "renaming": {
                "FUN_08006e90": "find_byte_in_memory_08006e90",
                "__s": "memory",
                "__c": "byte_to_find",
                "__n": "size",
                "pbVar1": "byte_ptr",
                "pbVar2": "current_byte"
            },
            "code": "void* find_byte_in_memory_08006e90(void* memory, int byte_to_find, size_t size)\n{\n  unsigned char* byte_ptr = (unsigned char*)memory;\n  while (byte_ptr < (unsigned char*)(size + (int)memory))\n  {\n    if (*byte_ptr == (byte_to_find & 0xff))\n    {\n      return (void*)byte_ptr;\n    }\n    byte_ptr++;\n  }\n  return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e90",
            "calling": [
                "_printf_i",
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "find_byte_in_memory_08006e90"
        },
        "FUN_0800417a": {
            "renaming": {
                "FUN_0800417a": "do_nothing_0800417a"
            },
            "code": "\nvoid do_nothing_0800417a(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417a",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_0800417a"
        },
        "FUN_08006920": {
            "renaming": {
                "FUN_08006920": "allocate_memory_08006920",
                "param_1": "error_code",
                "param_2": "size",
                "puVar1": "error_ptr",
                "pcVar2": "mem_ptr"
            },
            "code": "void allocate_memory_08006920(int *error_code, int size) {\n    undefined *error_ptr;\n    caddr_t mem_ptr;\n    \n    error_ptr = PTR_errno_0800693c;\n    *(undefined4 *)PTR_errno_0800693c = 0;\n    mem_ptr = _sbrk(size);\n    if ((mem_ptr == (caddr_t)0xffffffff) && (*(int *)error_ptr != 0)) {\n        *error_code = *(int *)error_ptr;\n    }\n    return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006920",
            "calling": [
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_08006920"
        },
        "FUN_080008ba": {
            "renaming": {
                "FUN_080008ba": "extract_double_080008ba",
                "param_1": "value",
                "param_2": "start_bit",
                "param_3": "num_bits",
                "param_4": "unused",
                "uVar1": "bit_value",
                "unaff_r4": "unused2",
                "uVar2": "mask",
                "uVar3": "masked_value",
                "in_r12": "unused3",
                "bVar4": "bits_are_zero"
            },
            "code": "ulonglong extract_double_080008ba(uint value, uint start_bit, uint num_bits) {\n  uint mask = (1 << num_bits) - 1;\n  uint masked_value = (value >> start_bit) & mask;\n  return (ulonglong) masked_value;\n}\n\nulonglong extract_sign(uint value) {\n  return (ulonglong) (value & 0x80000000) << 0x20;\n}\n\nulonglong extract_exponent(uint value) {\n  uint exponent_bits = extract_double_080008ba(value, 20, 11);\n  return (ulonglong) (exponent_bits ^ extract_sign(value)) << 0x20;\n}\n\nulonglong extract_mantissa(uint value) {\n  uint mantissa_bits = extract_double_080008ba(value, 0, 20);\n  return (ulonglong) mantissa_bits;\n}\n\nulonglong extract_double_080008ba(uint value) {\n  uint sign_bit = extract_double_080008ba(value, 31, 1);\n  if (sign_bit == 1) {\n    return 0xfff0000000000000 | extract_mantissa(value) | extract_exponent(value);\n  }\n  else {\n    return extract_sign(value) | extract_mantissa(value) | extract_exponent(value);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008ba",
            "calling": [
                "__divdf3"
            ],
            "imported": false,
            "current_name": "extract_double_080008ba"
        },
        "FUN_08002d1c": {
            "renaming": {
                "FUN_08002d1c": "handle_I2C_events_08002d1c",
                "*hi2c": "hi2c",
                "XferOptions": "transfer_options",
                "State": "state",
                "PreviousState": "previous_state",
                "Mode": "mode",
                "Instance": "instance",
                "CR1": "control_register_1",
                "CR2": "control_register_2",
                "SR1": "status_register_1",
                "HAL_I2C_STATE_LISTEN": "HAL_I2C_STATE_LISTEN",
                "HAL_I2C_STATE_BUSY_TX": "HAL_I2C_STATE_BUSY_TX",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "HAL_I2C_MODE_NONE": "HAL_I2C_MODE_NONE",
                "I2C_TRANSFER_OPTIONS_RELOAD_AND_STOP": "I2C_TRANSFER_OPTIONS_RELOAD_AND_STOP",
                "I2C_TRANSFER_OPTIONS_OTHER": "I2C_TRANSFER_OPTIONS_OTHER",
                "HAL_I2C_ListenCpltCallback": "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_SlaveTxCpltCallback": "HAL_I2C_SlaveTxCpltCallback",
                "HAL_OK": "HAL_OK",
                "PTR_DAT_08002dac": "PTR_DAT_08002dac"
            },
            "code": "HAL_StatusTypeDef_conflict handle_I2C_events_08002d1c(I2C_HandleTypeDef *hi2c) {\n    if (((hi2c->transfer_options == I2C_TRANSFER_OPTIONS_RELOAD_AND_STOP) || (hi2c->transfer_options == I2C_TRANSFER_OPTIONS_OTHER)) && (hi2c->state == HAL_I2C_STATE_LISTEN)) {\n        hi2c->transfer_options = PTR_DAT_08002dac;\n        hi2c->instance->CR2 = hi2c->instance->CR2 & 0xfffff8ff;\n        hi2c->instance->SR1 = 0xfffffbff;\n        hi2c->instance->CR1 = hi2c->instance->CR1 & 0xfffffbff;\n        hi2c->previous_state = 0;\n        hi2c->state = HAL_I2C_STATE_READY;\n        hi2c->mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_ListenCpltCallback(hi2c);\n    } else if (hi2c->state == HAL_I2C_STATE_BUSY_TX) {\n        hi2c->transfer_options = PTR_DAT_08002dac;\n        hi2c->previous_state = 0x21;\n        hi2c->state = HAL_I2C_STATE_READY;\n        hi2c->mode = HAL_I2C_MODE_NONE;\n        hi2c->instance->CR2 = hi2c->instance->CR2 & 0xfffff8ff;\n        hi2c->instance->SR1 = 0xfffffbff;\n        hi2c->instance->CR1 = hi2c->instance->CR1 & 0xfffffbff;\n        HAL_I2C_SlaveTxCpltCallback(hi2c);\n    } else {\n        hi2c->instance->SR1 = 0xfffffbff;\n    }\n    return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveTxCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d1c",
            "calling": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_I2C_events_08002d1c"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "return_error_08005714",
                "file_UNUSED": "file_unused"
            },
            "code": "int return_error_08005714(int file_unused)\n{\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [
                "_close_r"
            ],
            "imported": false,
            "current_name": "return_error_08005714"
        },
        "FUN_08003da4": {
            "renaming": {
                "FUN_08003da4": "get_peripheral_clock_frequency_08003da4",
                "PeriphClk": "peripheral_clock",
                "uVar1": "frequency",
                "uVar2": "multiplier",
                "aPredivFactorTable": "prediv_factor_table",
                "aPLLMULFactorTable": "pll_mul_factor_table"
            },
            "code": "uint32_t get_peripheral_clock_frequency_08003da4(uint32_t peripheral_clock)\n{\n  uint32_t frequency = 0;\n  uint8_t prediv_factor_table[2];\n  uint8_t pll_mul_factor_table[16];\n  pll_mul_factor_table[0] = *(uint32_t *)(PLLMUL_FACTOR_TABLE_START + 0);\n  pll_mul_factor_table[1] = *(uint32_t *)(PLLMUL_FACTOR_TABLE_START + 4);\n  pll_mul_factor_table[2] = *(uint32_t *)(PLLMUL_FACTOR_TABLE_START + 8);\n  prediv_factor_table[0] = *(uint8_t *)(PREDIV_FACTOR_TABLE_START + 0);\n  prediv_factor_table[1] = *(uint8_t *)(PREDIV_FACTOR_TABLE_START + 1);\n  if (peripheral_clock == 2)\n  {\n    frequency = HAL_RCC_GetPCLK2Freq();\n    frequency = frequency / ((((PLLMUL_FACTOR_TABLE_START[1] << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (peripheral_clock == 0x10)\n  {\n    if ((*PLLMUL_FACTOR_TABLE_START & 0x1000000) == 0)\n    {\n      frequency = 0;\n    }\n    else\n    {\n      uint32_t mul_factor = pll_mul_factor_table[(PLLMUL_FACTOR_TABLE_START[1] << 10) >> 0x1c];\n      uint32_t div_factor = prediv_factor_table[-((int)(PLLMUL_FACTOR_TABLE_START[1] << 0xe) >> 0x1f)];\n      uint32_t multiplier = DAT_08003e9c;\n      if ((PLLMUL_FACTOR_TABLE_START[1] & 0x10000) != 0)\n      {\n        multiplier = DAT_08003e94 / div_factor;\n      }\n      frequency = multiplier * mul_factor;\n      if ((PLLMUL_FACTOR_TABLE_START[1] & 0x400000) == 0)\n      {\n        frequency = (uint32_t)((uint64_t)DAT_08003e98 * (uint64_t)(frequency * 2) >> 0x21);\n      }\n    }\n  }\n  else if (peripheral_clock == 1)\n  {\n    if ((PLLMUL_FACTOR_TABLE_START[8] & 0x302) == 0x102)\n    {\n      frequency = 0x8000;\n    }\n    else\n    {\n      uint32_t uVar2 = PLLMUL_FACTOR_TABLE_START[8] & 0x300;\n      if ((uVar2 == 0x200) && ((PLLMUL_FACTOR_TABLE_START[9] & 2) != 0))\n      {\n        frequency = 32000;\n      }\n      else if (uVar2 == 0x300)\n      {\n        if ((*PLLMUL_FACTOR_TABLE_START & 0x20000) == 0)\n        {\n          frequency = 0;\n        }\n        else\n        {\n          frequency = 0xf424;\n        }\n      }\n      else\n      {\n        frequency = 0;\n      }\n    }\n  }\n  else\n  {\n    frequency = 0;\n  }\n  return frequency;\n}",
            "called": [
                "HAL_RCC_GetPCLK2Freq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003da4",
            "calling": [
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_PollForConversion"
            ],
            "imported": false,
            "current_name": "get_peripheral_clock_frequency_08003da4"
        },
        "FUN_08005a44": {
            "renaming": {
                "FUN_08005a44": "initializeSerial_08005a44",
                "this": "serial",
                "ctx": "ctx",
                "_serial": "serial",
                "_rx_buffer": "rx_buff",
                "_tx_buffer": "tx_buff",
                "rx_head": "rx_head",
                "rx_tail": "rx_tail",
                "tx_head": "tx_head",
                "tx_tail": "tx_tail"
            },
            "code": "int __thiscall initializeSerial_08005a44(HardwareSerial *serial,EVP_PKEY_CTX *ctx)\n{\n  serial->rx_buff = serial->_rx_buffer;\n  serial->rx_head = 0;\n  serial->rx_tail = 0;\n  serial->tx_buff = serial->_tx_buffer;\n  serial->tx_head = 0;\n  serial->tx_tail = 0;\n  return (int)serial;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a44",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "initializeSerial_08005a44"
        },
        "FUN_080009dc": {
            "renaming": {
                "FUN_080009dc": "is_end_of_string_080009dc",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_080009dc(char current_char) {\n    __aeabi_cdcmpeq();\n    return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009dc",
            "calling": [
                "SetOutputLimits",
                "Compute",
                "printFloat",
                "Initialize",
                "SetTunings",
                "loop"
            ],
            "imported": false,
            "current_name": "is_end_of_string_080009dc"
        },
        "FUN_0800417c": {
            "renaming": {
                "FUN_0800417c": "reset_uart_0800417c",
                "*huart": "*uart_handle",
                "CR1": "cr1_register",
                "CR3": "cr3_register",
                "RxState": "uart_handle->RxState"
            },
            "code": "void reset_uart_0800417c(UART_HandleTypeDef *uart_handle)\n{\n  uint32_t cr1_register = uart_handle->Instance->CR1;\n  cr1_register &= ~(1 << 13);\n  uart_handle->Instance->CR1 = cr1_register;\n  uint32_t cr3_register = uart_handle->Instance->CR3;\n  cr3_register &= ~(1);\n  uart_handle->Instance->CR3 = cr3_register;\n  uart_handle->RxState = HAL_UART_STATE_READY;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417c",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "reset_uart_0800417c"
        },
        "FUN_08004b94": {
            "renaming": {
                "FUN_08004b94": "get_current_tick_08004b94",
                "uVar1": "current_tick"
            },
            "code": "uint32_t get_current_tick_08004b94(void)\n{\n  uint32_t current_tick = HAL_GetTick();\n  return current_tick;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b94",
            "calling": [
                "millis"
            ],
            "imported": false,
            "current_name": "get_current_tick_08004b94"
        },
        "FUN_080058e0": {
            "renaming": {
                "FUN_080058e0": "get_current_milli_time_080058e0",
                "uVar1": "current_milli_time"
            },
            "code": "uint32_t get_current_milli_time_080058e0(void)\n{\n  uint32_t current_milli_time = GetCurrentMilli();\n  return current_milli_time;\n}",
            "called": [
                "GetCurrentMilli"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e0",
            "calling": [
                "setup",
                "Compute",
                "PID",
                "loop"
            ],
            "imported": false,
            "current_name": "get_current_milli_time_080058e0"
        },
        "FUN_08001918": {
            "renaming": {
                "FUN_08001918": "calculate_pid_coefficients_08001918",
                "this": "pid",
                "NewSampleTime": "new_sample_time",
                "uVar1": "new_kd_integer",
                "uVar2": "new_sample_time_double",
                "uVar3": "old_sample_time_double",
                "dVar4": "temp",
                "SampleTime": "sample_time",
                "ki": "ki",
                "kd": "kd"
            },
            "code": "void __thiscall calculate_pid_coefficients_08001918(PID *pid, int new_sample_time) {\n  if (new_sample_time > 0) {\n    double new_sample_time_double = (double)new_sample_time;\n    double old_sample_time_double = (double)pid->sample_time;\n    double sample_time_ratio = new_sample_time_double / old_sample_time_double;\n    double new_ki = pid->ki * sample_time_ratio;\n    double new_kd = pid->kd / sample_time_ratio;\n    pid->ki = new_ki;\n    pid->kd = new_kd;\n    pid->sample_time = new_sample_time;\n  }\n}",
            "called": [
                "__floatsidf",
                "__divdf3",
                "__muldf3",
                "__floatunsidf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001918",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_pid_coefficients_08001918"
        },
        "FUN_0800611c": {
            "renaming": {
                "FUN_0800611c": "print_assertion_failed_0800611c",
                "param_1": "file",
                "param_2": "file_name",
                "param_3": "expression",
                "param_4": "line_number",
                "puVar1": "file_name_to_print",
                "puVar2": "function_name_to_print",
                "PTR_s__08006154": "empty_string",
                "PTR_s___function__0800614c": "empty_string",
                "PTR_s_assertion___s__failed__file___s__08006150": "assertion_failed_format_string",
                "PTR__impure_ptr_08006148": "impure_ptr"
            },
            "code": "void print_assertion_failed_0800611c(FILE* file, const char* file_name, int line_number, const char* function_name, const char* expression, const char* message) {\n  const char* file_name_to_print = file_name ? file_name : \"\";\n  const char* function_name_to_print = function_name ? function_name : \"\";\n  const char* message_to_print = message ? message : \"\";\n  fprintf(file, \"Assertion failed: %s, file %s, line %d, function %s, expression %s, message %s\\n\", expression, file_name_to_print, line_number, function_name_to_print, expression, message_to_print);\n  abort();\n}",
            "called": [
                "fiprintf",
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800611c",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "print_assertion_failed_0800611c"
        },
        "FUN_0800049c": {
            "renaming": {
                "FUN_0800049c": "integer_division_0800049c",
                "param_1": "dividend",
                "param_2": "divisor",
                "bVar1": "is_quotient_high_bit_set",
                "uVar2": "quotient_low_bits",
                "uVar3": "quotient_high_bits",
                "uVar4": "divisor_copy",
                "iVar5": "quotient_sign_bit",
                "uVar6": "dividend_copy",
                "iVar7": "quotient_digits_count",
                "uVar8": "divisor_sign_bit",
                "uVar9": "quotient_sign_bit",
                "bVar10": "is_quotient_sign_bit_set",
                "bVar11": "is_quotient_low_bit_set",
                "bVar12": "is_quotient_negative"
            },
            "code": "ulonglong integer_division_0800049c(uint dividend, uint divisor)\n{\n  byte is_dividend_negative;\n  uint quotient_digits_count;\n  uint divisor_sign_bit;\n  uint dividend_copy;\n  uint quotient_high_bits;\n  uint quotient_low_bits;\n  uint divisor_copy;\n  uint quotient_sign_bit;\n  uint quotient;\n  bool is_quotient_negative;\n  bool is_quotient_high_bit_set;\n  bool is_quotient_low_bit_set;\n  bool is_quotient_sign_bit_set;\n\n  if ((dividend | divisor) == 0)\n  {\n    return CONCAT44(divisor, dividend);\n  }\n\n  divisor_sign_bit = divisor & 0x80000000;\n  dividend_copy = dividend;\n  if ((int)divisor_sign_bit < 0)\n  {\n    is_dividend_negative = dividend != 0;\n    dividend = -dividend;\n    dividend_copy = -divisor - (uint)is_dividend_negative;\n  }\n\n  quotient_digits_count = 0x432;\n  quotient_high_bits = dividend_copy >> 0x16;\n  if (quotient_high_bits != 0)\n  {\n    quotient_digits_count = 3;\n    if (dividend_copy >> 0x19 != 0)\n    {\n      quotient_digits_count = 6;\n    }\n    if (dividend_copy >> 0x1c != 0)\n    {\n      quotient_digits_count += 3;\n    }\n    quotient_sign_bit = quotient_digits_count - ((int)dividend_copy >> 0x1f);\n    quotient_high_bits = dividend << (0x20 - quotient_sign_bit & 0xff);\n    dividend = dividend >> (quotient_sign_bit & 0xff) | dividend_copy << (0x20 - quotient_sign_bit & 0xff);\n    dividend_copy = dividend_copy >> (quotient_sign_bit & 0xff);\n    quotient_digits_count = quotient_sign_bit + 0x432;\n  }\n\n  if (0xfffff < dividend_copy)\n  {\n    if (0x1fffff < dividend_copy)\n    {\n      is_quotient_low_bit_set = (dividend_copy & 1) != 0;\n      dividend_copy = dividend_copy >> 1;\n      is_quotient_high_bit_set = (byte)dividend & 1;\n      quotient_high_bits = quotient_high_bits >> 1 | (uint)is_quotient_high_bit_set << 0x1f;\n      quotient_digits_count++;\n      if (0xffbfffff < quotient_digits_count * 0x200000)\n      {\n        return (ulonglong)(divisor_sign_bit | 0x7ff00000) << 0x20;\n      }\n    }\n    is_quotient_negative = 0x7fffffff < quotient_high_bits;\n    if (quotient_high_bits == 0x80000000)\n    {\n      is_quotient_negative = (dividend & 1) != 0;\n    }\n    return CONCAT44(dividend_copy + quotient_digits_count * 0x100000 + (uint)CARRY4(dividend, (uint)is_quotient_negative) | divisor_sign_bit, dividend + (uint)is_quotient_negative);\n  }\n\n  is_quotient_low_bit_set = (quotient_high_bits & 0x80000000) != 0;\n  quotient_high_bits = quotient_high_bits << 1;\n  divisor_copy = dividend * 2;\n  is_quotient_high_bit_set = CARRY4(dividend, dividend);\n  dividend = dividend * 2 + (uint)is_quotient_low_bit_set;\n  dividend_copy = dividend_copy * 2 + (uint)(is_quotient_high_bit_set || CARRY4(divisor_copy, (uint)is_quotient_low_bit_set));\n  quotient_digits_count--;\n  if ((dividend_copy & 0x100000) != 0)\n  {\n    is_quotient_low_bit_set = (uint)is_quotient_low_bit_set | 1;\n    goto LAB_080002a0;\n  }\n\n  quotient_low_bits = dividend;\n  if (dividend_copy == 0)\n  {\n    quotient_low_bits = 0;\n    dividend_copy = dividend;\n  }\n\n  quotient_sign_bit = count_leading_zeroes(dividend_copy);\n  if (dividend_copy == 0)\n  {\n    quotient_sign_bit += 0x20;\n  }\n\n  quotient_high_bits = quotient_sign_bit - 0xb;\n  is_quotient_sign_bit_set = (int)(quotient_sign_bit - 0x2b) < 0;\n  is_quotient_low_bit_set = (quotient_sign_bit - 0x2b) == 0;\n  if ((int)quotient_high_bits < 0x20)\n  {\n    quotient_high_bits = SCARRY4(quotient_sign_bit, 0xc);\n    quotient_sign_bit = quotient_sign_bit + -0x1f;\n    is_quotient_sign_bit_set = quotient_sign_bit < 0;\n    is_quotient_low_bit_set = quotient_sign_bit == 0;\n    quotient_high_bits = quotient_high_bits & 0xff;\n    if (!is_quotient_low_bit_set && is_quotient_sign_bit_set == quotient_high_bits)\n    {\n      quotient_high_bits = dividend_copy << (quotient_sign_bit & 0xff);\n      dividend_copy = dividend_copy >> (0xcU - quotient_sign_bit & 0xff);\n      goto LAB_08000318;\n    }\n  }\n\n  if (is_quotient_low_bit_set || is_quotient_sign_bit_set != quotient_high_bits)\n  {\n    quotient_sign_bit = 0x20 - quotient_sign_bit;\n  }\n\n  quotient_high_bits = dividend_copy << (quotient_sign_bit & 0xff);\n  if (is_quotient_low_bit_set || is_quotient_sign_bit_set != quotient_high_bits)\n  {\n    quotient_high_bits |= dividend >> (quotient_sign_bit & 0xff);\n  }\n  if (is_quotient_low_bit_set || is_quotient_sign_bit_set != quotient_high_bits)\n  {\n    dividend = dividend << (quotient_sign_bit & 0xff);\n  }\n\nLAB_08000318:\n  if ((int)quotient_high_bits <= quotient_digits_count)\n  {\n    return CONCAT44(quotient_high_bits + (quotient_digits_count - quotient_high_bits) * 0x100000 | divisor_sign_bit, dividend);\n  }\n\n  quotient_sign_bit = ~(quotient_digits_count - quotient_high_bits);\n  if (0x1e < (int)quotient_sign_bit)\n  {\n    return CONCAT44(divisor, quotient_high_bits >> (quotient_sign_bit - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n\n  quotient_sign_bit = quotient_sign_bit - 0x13;\n  if (quotient_sign_bit == 0 || quotient_sign_bit < 0 != SCARRY4(quotient_sign_bit + 0x1d, 0xc))\n  {\n    quotient_sign_bit++;\n    return CONCAT44(divisor_sign_bit | quotient_high_bits >> (quotient_sign_bit & 0xff), dividend >> (quotient_sign_bit & 0xff) | quotient_high_bits << (0x20 - quotient_sign_bit & 0xff));\n  }\n\n  return CONCAT44(divisor, dividend >> (0x20 - (0xcU - quotient_sign_bit) & 0xff) | quotient_high_bits << (0xcU - quotient_sign_bit & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800049c",
            "calling": [],
            "imported": false,
            "current_name": "integer_division_0800049c"
        },
        "FUN_080047f4": {
            "renaming": {
                "FUN_080047f4": "is_pin_set_high_080047f4",
                "pin": "pin_name",
                "map": "pin_map",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "_Bool is_pin_set_high_080047f4(PinName_conflict pin, uint32_t *pin_map) {\n    uint32_t pin_index = (uint)((int)pin << 0x18) >> 0x1c;\n    uint32_t pin_mask = (1 << ((int)pin & 0xfU));\n    uint8_t pin_value = (uint8_t)(pin_map[pin_index] >> ((int)pin & 0xfU));\n    return (_Bool)(pin_value & pin_mask);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "digitalWrite",
                "digitalRead",
                "pinMode"
            ],
            "imported": false,
            "current_name": "is_pin_set_high_080047f4"
        },
        "FUN_08002c10": {
            "renaming": {
                "FUN_08002c10": "i2c_listen_mode_08002c10",
                "*hi2c": "*handle",
                "pIVar1": "i2c_instance",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_I2C_STATE_LISTEN": "HAL_I2C_STATE_LISTEN",
                "CR1": "I2C_CR1_PE",
                "CR2": "I2C_CR2_FREQ",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef i2c_listen_mode_08002c10(I2C_HandleTypeDef *handle)\n{\n  I2C_TypeDef *i2c_instance;\n  \n  if (handle->State != HAL_I2C_STATE_READY) {\n    return HAL_BUSY;\n  }\n  handle->State = HAL_I2C_STATE_LISTEN;\n  i2c_instance = handle->Instance;\n  if ((i2c_instance->CR1 & I2C_CR1_PE) == 0) {\n    i2c_instance->CR1 |= I2C_CR1_PE;\n  }\n  i2c_instance->CR1 |= I2C_CR1_ACK;\n  i2c_instance->CR2 |= I2C_CR2_FREQ;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c10",
            "calling": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "imported": false,
            "current_name": "i2c_listen_mode_08002c10"
        },
        "FUN_080009f0": {
            "renaming": {
                "FUN_080009f0": "are_both_zero_080009f0",
                "in_ZR": "is_a_zero",
                "in_CY": "is_b_zero",
                "__aeabi_cdcmpeq": "compare_two_floats"
            },
            "code": "bool are_both_zero_080009f0(float a, float b)\n{\n    bool result = false;\n    if(a == 0 && b == 0)\n    {\n        result = true;\n    }\n    return result;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009f0",
            "calling": [
                "printFloat",
                "loop"
            ],
            "imported": false,
            "current_name": "are_both_zero_080009f0"
        },
        "FUN_0800134e": {
            "renaming": {
                "__thiscall LiquidCrystal::FUN_0800134e": "sendValueToLCD",
                "*this": "lcd",
                "value": "value",
                "FUN_0800134e": "sendValueToLCD_0800134e"
            },
            "code": "size_t __thiscall LiquidCrystal::sendValueToLCD_0800134e(LiquidCrystal *lcd,uint8_t value)\n{\n  send(lcd,value,'\\x01');\n  return 1;\n}",
            "called": [
                "send"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800134e",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "sendValueToLCD_0800134e"
        },
        "FUN_08006be0": {
            "renaming": {
                "FUN_08006be0": "flush_if_buffer_full_08006be0",
                "param_1": "file_descriptor",
                "param_2": "stream_buffer",
                "param_3": "stream_buffer_size",
                "param_4": "stream_buffer_mode",
                "uVar1": "status"
            },
            "code": "int flush_if_buffer_full_08006be0(int file_descriptor, char *stream_buffer, int stream_buffer_size, int stream_buffer_mode) {\n    int status = 0;\n    if (*(int *)(stream_buffer + 0x10) != 0) {\n        if ((file_descriptor != 0) && (*(int *)(file_descriptor + 0x18) == 0)) {\n            __sinit();\n        }\n        if (stream_buffer == PTR___sf_fake_stdin_08006c28) {\n            stream_buffer = *(char **)(file_descriptor + 4);\n        }\n        else if (stream_buffer == PTR___sf_fake_stdout_08006c2c) {\n            stream_buffer = *(char **)(file_descriptor + 8);\n        }\n        else if (stream_buffer == PTR___sf_fake_stderr_08006c30) {\n            stream_buffer = *(char **)(file_descriptor + 0xc);\n        }\n        if (*(short *)(stream_buffer + 0xc) != 0) {\n            status = __sflush_r(file_descriptor, stream_buffer, stream_buffer_size, stream_buffer_mode);\n            return status;\n        }\n    }\n    return status;\n}",
            "called": [
                "__sflush_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006be0",
            "calling": [
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "flush_if_buffer_full_08006be0"
        },
        "FUN_080012e8": {
            "renaming": {
                "FUN_080012e8": "write_data_to_pins_080012e8",
                "this": "lcd",
                "value": "value",
                "uVar1": "bit_index",
                "_data_pins": "_data_pins"
            },
            "code": "void __thiscall LiquidCrystal::write_data_to_pins_080012e8(LiquidCrystal *lcd,uint8_t value)\n{\n  uint8_t bit_index;\n  for (bit_index = 0; bit_index < 8; bit_index++) {\n    digitalWrite((uint)lcd->_data_pins[bit_index],(int)(uint)value >> (bit_index & 0xff) & 1);\n  }\n  pulseEnable(lcd);\n  return;\n}",
            "called": [
                "digitalWrite",
                "pulseEnable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012e8",
            "calling": [
                "send"
            ],
            "imported": false,
            "current_name": "write_data_to_pins_080012e8"
        },
        "FUN_080058e8": {
            "renaming": {
                "FUN_080058e8": "do_nothing_080058e8"
            },
            "code": "\nvoid do_nothing_080058e8(uint32_t ms)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e8",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "do_nothing_080058e8"
        },
        "FUN_08006370": {
            "renaming": {
                "FUN_08006370": "put_chars_to_stream_08006370",
                "param_1": "file_descriptor",
                "param_2": "status",
                "param_3": "chars",
                "param_4": "num_chars",
                "iVar1": "write_result",
                "puVar2": "end_chars",
                "iVar3": "chars_written"
            },
            "code": "int put_chars_to_stream_08006370(int file_descriptor, int status, char *chars, int num_chars) {\n  int chars_written;\n  char *end_chars = chars + num_chars;\n  chars_written = num_chars;\n  do {\n    if (chars == end_chars) {\n      return 0;\n    }\n    int write_result = __sfputc_r(file_descriptor, *chars, status, num_chars, chars_written);\n    chars_written = write_result + 1;\n    chars++;\n  } while (chars_written != 0);\n  return write_result;\n}",
            "called": [
                "__sfputc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006370",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "put_chars_to_stream_08006370"
        },
        "FUN_080024f8": {
            "renaming": {
                "FUN_080024f8": "set_irq_handler_080024f8",
                "IRQn": "irq_number",
                "uVar1": "irq_index",
                "DAT_08002510": "irq_set_base",
                "word_offset": "word_offset",
                "bit_offset": "bit_offset",
                "irq_set": "irq_set"
            },
            "code": "void set_irq_handler_080024f8(IRQn_Type_conflict irq_number) {\n  uint32_t irq_index = (uint32_t)irq_number;\n  if (irq_index >= 0) {\n    uint32_t word_offset = irq_index >> 5;\n    uint32_t bit_offset = irq_index & 0x1f;\n    uint32_t* irq_set = (uint32_t*)(DAT_08002510 + word_offset * 4);\n    *irq_set = 1 << bit_offset;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080024f8",
            "calling": [
                "uart_attach_tx_callback",
                "uart_attach_rx_callback"
            ],
            "imported": false,
            "current_name": "set_irq_handler_080024f8"
        },
        "FUN_0800594e": {
            "renaming": {
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__nbytes": "bytesToRead",
                "HardwareSerial": "serial",
                "this": "serial",
                "_serial": "serialData",
                "bVar1": "receivedByte",
                "uVar2": "tailIndex",
                "FUN_0800594e": "readByte_0800594e"
            },
            "code": "ssize_t __thiscall HardwareSerial::readByte_0800594e(HardwareSerial *serial,int fileDescriptor,void *buffer,size_t bytesToRead) {\n  byte receivedByte;\n  ushort tailIndex;\n  \n  tailIndex = (serial->_serial).rx_tail;\n  if ((uint)(serial->_serial).rx_head != (uint)tailIndex) {\n    receivedByte = (serial->_serial).rx_buff[tailIndex];\n    (serial->_serial).rx_tail = (tailIndex + 1) & 0x3f;\n    return (uint)receivedByte;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800594e",
            "calling": [],
            "imported": false,
            "current_name": "readByte_0800594e"
        },
        "FUN_080056a8": {
            "renaming": {
                "FUN_080056a8": "handle_UART_interrupt_080056a8",
                "USART2_IRQn": "UART_interrupt",
                "PTR_uart_handlers_080056bc": "UART_handlers_pointer",
                "HAL_NVIC_ClearPendingIRQ": "clear_pending_UART_interrupt",
                "UART_HandleTypeDef": "UART_handler",
                "HAL_UART_IRQHandler": "handle_UART_event"
            },
            "code": "void handle_UART_interrupt_080056a8(void)\n{\n  clear_pending_UART_interrupt();\n  handle_UART_event(get_UART_handler());\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056a8",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_080056a8"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "PIDController_08001ab0",
                "this": "self",
                "Input": "input",
                "Output": "output",
                "Setpoint": "setpoint",
                "Kp": "Kp",
                "Ki": "Ki",
                "Kd": "Kd",
                "POn": "pon",
                "ControllerDirection": "controller_direction",
                "uVar1": "current_millis",
                "POn_00": "pon_00",
                "in_stack_ffffffe8": "upper_output_limit",
                "in_stack_ffffffec": "lower_output_limit",
                "in_stack_fffffff4": "Kp"
            },
            "code": "__thiscall PIDController_08001ab0::PIDController_08001ab0(PIDController_08001ab0 *this,double *input,double *output,double *setpoint,double Kp,double Ki,double Kd, int pon,int controller_direction)\n{\n  uint32_t current_millis;\n  int pon_00;\n  undefined4 upper_output_limit;\n  undefined4 lower_output_limit;\n  \n  this->my_output = output;\n  this->my_input = input;\n  this->my_setpoint = setpoint;\n  this->in_auto_mode = false;\n  set_output_limits(this, upper_output_limit, lower_output_limit);\n  this->sample_time = 100;\n  set_controller_direction(this, controller_direction);\n  set_tunings(this, Ki, Kd, Kp, pon_00);\n  current_millis = millis();\n  this->last_time = current_millis - this->sample_time;\n  return this;\n}",
            "called": [
                "SetControllerDirection",
                "millis",
                "SetOutputLimits",
                "SetTunings"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "PID"
            ],
            "imported": false,
            "current_name": "PIDController_08001ab0"
        },
        "FUN_08006ac0": {
            "renaming": {
                "FUN_08006ac0": "handle_signal_08006ac0",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void handle_signal_08006ac0(void)\n{\n  raise(SIGABRT);\n  exit(1);\n}",
            "called": [
                "raise",
                "_exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ac0",
            "calling": [
                "__assert_func",
                "__throw_bad_function_call"
            ],
            "imported": false,
            "current_name": "handle_signal_08006ac0"
        },
        "FUN_08007220": {
            "renaming": {
                "std::ctype_byname<wchar_t>::FUN_08007220": "set_ctype_flags",
                "PTR_id_08007284": "flag_1",
                "PTR_id_08007288": "flag_2",
                "PTR_id_0800728c": "flag_3",
                "PTR_id_08007290": "flag_4",
                "PTR_id_08007294": "flag_5",
                "PTR_id_08007298": "flag_6",
                "PTR_id_0800729c": "flag_7",
                "PTR_id_080072a0": "flag_8",
                "FUN_08007220": "set_ctype_flags_08007220"
            },
            "code": "void set_ctype_flags_08007220() {\n  if ( *PTR_id_08007284 < 0x80000000) {\n    *PTR_id_08007284 = 1;\n  }\n  if ( *PTR_id_08007288 < 0x80000000) {\n    *PTR_id_08007288 = 1;\n  }\n  if ( *PTR_id_0800728c < 0x80000000) {\n    *PTR_id_0800728c = 1;\n  }\n  if ( *PTR_id_08007290 < 0x80000000) {\n    *PTR_id_08007290 = 1;\n  }\n  if ( *PTR_id_08007294 < 0x80000000) {\n    *PTR_id_08007294 = 1;\n  }\n  if ( *PTR_id_08007298 < 0x80000000) {\n    *PTR_id_08007298 = 1;\n  }\n  if ( *PTR_id_0800729c < 0x80000000) {\n    *PTR_id_0800729c = 1;\n  }\n  if ( *PTR_id_080072a0 < 0x80000000) {\n    *PTR_id_080072a0 = 1;\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007220",
            "calling": [],
            "imported": false,
            "current_name": "set_ctype_flags_08007220"
        },
        "FUN_08004198": {
            "renaming": {
                "FUN_08004198": "sendUARTData_08004198",
                "huart": "uart",
                "uVar1": "data",
                "pbVar2": "bufferPtr"
            },
            "code": "HAL_StatusTypeDef sendUARTData_08004198(UART_HandleTypeDef *uart)\n{\n  uint16_t data;\n  byte *bufferPtr;\n  \n  if (uart->gState != HAL_UART_STATE_BUSY_TX) {\n    return HAL_BUSY;\n  }\n  \n  if ((uart->Init).WordLength == 0x1000) {\n    data = *(ushort *)uart->pTxBuffPtr & 0x1ff;\n    if ((uart->Init).Parity == 0) {\n      uart->pTxBuffPtr = uart->pTxBuffPtr + 2;\n    }\n    else {\n      uart->pTxBuffPtr = uart->pTxBuffPtr + 1;\n    }\n  }\n  else {\n    bufferPtr = uart->pTxBuffPtr;\n    uart->pTxBuffPtr = bufferPtr + 1;\n    data = (uint)*bufferPtr;\n  }\n  \n  uint16_t remainingData = uart->TxXferCount - 1;\n  uart->TxXferCount = remainingData;\n  \n  if (remainingData == 0) {\n    uart->Instance->CR1 = uart->Instance->CR1 & 0xffffff7f;\n    uart->Instance->CR1 = uart->Instance->CR1 | 0x40;\n    return HAL_OK;\n  }\n  \n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004198",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "sendUARTData_08004198"
        },
        "FUN_08001c3c": {
            "renaming": {
                "FUN_08001c3c": "configureSysTick_08001c3c",
                "TickPriority": "tickPriority",
                "uVar1": "systickConfig",
                "PTR_SystemCoreClock_08001c80": "clockSpeed",
                "PTR_uwTickFreq_08001c7c": "tickFreq",
                "HAL_SYSTICK_Config": "HAL_SYSTICK_Config",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_NVIC_SetPriority": "HAL_NVIC_SetPriority",
                "SysTick_IRQn": "SysTick_IRQn",
                "PTR_uwTickPrio_08001c84": "PTR_uwTickPrio_08001c84",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef configureSysTick_08001c3c(uint32_t tickPriority)\n{\n    uint32_t PTR_SystemCoreClock_08001c80 = *(uint *)PTR_SystemCoreClock_08001c80;\n    uint32_t PTR_uwTickFreq_08001c7c = (1000 / (uint32_t)(byte)*PTR_uwTickFreq_08001c7c);\n    uint32_t systickConfig = HAL_SYSTICK_Config(PTR_SystemCoreClock_08001c80 / PTR_uwTickFreq_08001c7c);\n    if (systickConfig != 0) {\n        return HAL_ERROR;\n    }\n    if (tickPriority > 0xf) {\n        return HAL_ERROR;\n    }\n    HAL_NVIC_SetPriority(SysTick_IRQn, tickPriority, 0);\n    *(uint32_t *)PTR_uwTickPrio_08001c84 = tickPriority;\n    return HAL_OK;\n}",
            "called": [
                "HAL_SYSTICK_Config",
                "HAL_NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3c",
            "calling": [
                "HAL_Init",
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "configureSysTick_08001c3c"
        },
        "FUN_08001c3a": {
            "renaming": {
                "FUN_08001c3a": "do_nothing_08001c3a"
            },
            "code": "\nvoid do_nothing_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3a",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08001c3a"
        },
        "FUN_08000a2c": {
            "renaming": {
                "FUN_08000a2c": "is_valid_input_08000a2c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08000a2c(uint32_t input1, int32_t input2, uint32_t input3, int32_t input4) {\n        if ((((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0)) && (((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0)))) {\n            return 0;\n        }\n        return 1;\n    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a2c",
            "calling": [
                "printFloat"
            ],
            "imported": false,
            "current_name": "is_valid_input_08000a2c"
        },
        "FUN_08001366": {
            "renaming": {
                "FUN_08001366": "displayAt_08001366",
                "this": "lcd",
                "col": "col",
                "row": "row",
                "uVar1": "limited_row",
                "_numlines": "_numlines",
                "_row_offsets": "_row_offsets",
                "send": "send"
            },
            "code": "void __thiscall LiquidCrystal::displayAt_08001366(LiquidCrystal *lcd, uint8_t col, uint8_t row){\n  uint8_t limited_row = min(row, 3);\n  \n  if (lcd->_numlines <= limited_row) {\n    limited_row = lcd->_numlines - 1;\n  }\n  \n  uint8_t offset_row = lcd->_row_offsets[limited_row];\n  uint8_t display_col = col + offset_row | 0x80;\n  \n  send(lcd, display_col, \"\\0\");\n  return;\n}",
            "called": [
                "send"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001366",
            "calling": [
                "setup",
                "loop"
            ],
            "imported": false,
            "current_name": "displayAt_08001366"
        },
        "FUN_08005848": {
            "renaming": {
                "FUN_08005848": "configure_and_write_digital_pin_08005848",
                "ulPin": "pin_number",
                "ulVal": "pin_value",
                "_Var1": "is_pin_configured",
                "port": "gpio_port",
                "uVar2": "pin_index"
            },
            "code": "void configure_and_write_digital_pin_08005848(uint32_t pin_number, uint32_t pin_value)\n{\n    _Bool is_pin_configured = false;\n    GPIO_TypeDef *gpio_port;\n    uint32_t pin_index;\n\n    if (pin_number < 0x3c) {\n        pin_index = (uint32_t)(char)PTR_digitalPin_08005888[pin_number];\n    }\n    else {\n        pin_index = 0xffffffff;\n    }\n    if ((pin_index != 0xffffffff) && (is_pin_configured = is_pin_configured((PinName_conflict)pin_index, (uint32_t *)PTR_g_digPinConfigured_0800588c))) {\n        gpio_port = get_GPIO_Port((pin_index << 0x18) >> 0x1c);\n        digital_io_write(gpio_port, 1 << (pin_index & 0xf) & 0xffff, pin_value);\n    }\n    return;\n}",
            "called": [
                "is_pin_configured",
                "digital_io_write",
                "get_GPIO_Port"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005848",
            "calling": [
                "readData",
                "write4bits",
                "send",
                "setup",
                "MAX31855",
                "begin",
                "write8bits",
                "pulseEnable",
                "loop"
            ],
            "imported": false,
            "current_name": "configure_and_write_digital_pin_08005848"
        },
        "FUN_08000ae8": {
            "renaming": {
                "FUN_08000ae8": "perform_system_call_08000ae8",
                "a0": "syscall_number",
                "a1": "arg",
                "a2": "error_code"
            },
            "code": "uint32_t perform_system_call_08000ae8(uint32_t syscall_number, uint32_t arg, int32_t error_code)\n{\n  software_interrupt(0x3f);\n  return syscall_number;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ae8",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "perform_system_call_08000ae8"
        },
        "FUN_08003ed8": {
            "renaming": {
                "FUN_08003ed8": "set_timer_state_to_reset_08003ed8",
                "htim": "timer_handle",
                "pTVar1": "timer_instance",
                "HAL_TIM_STATE_BUSY": "Timer_Busy",
                "HAL_TIM_STATE_RESET": "Timer_Reset",
                "HAL_UNLOCKED": "Timer_Unlocked",
                "HAL_TIM_PWM_MspDeInit": "DeInitialize_PWM"
            },
            "code": "HAL_StatusTypeDef set_timer_state_to_reset_08003ed8(TIM_HandleTypeDef *timer_handle)\n{\n  TIM_TypeDef *timer_instance;\n  timer_handle->State = HAL_TIM_STATE_BUSY;\n  timer_instance = timer_handle->Instance;\n  if (((timer_instance->CCER & 0x1111) == 0) && ((timer_instance->CCER & 0x444) == 0)) {\n    timer_instance->CR1 &= ~(1U);\n  }\n  HAL_TIM_PWM_MspDeInit(timer_handle);\n  timer_handle->State = HAL_TIM_STATE_RESET;\n  timer_handle->Lock = HAL_UNLOCKED;\n  return HAL_OK;\n}",
            "called": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ed8",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "set_timer_state_to_reset_08003ed8"
        },
        "FUN_080061e0": {
            "renaming": {
                "FUN_080061e0": "fill_memory_with_char_080061e0",
                "__s": "memory_start",
                "__c": "character",
                "__n": "size",
                "puVar1": "memory_ptr"
            },
            "code": "void * fill_memory_with_char_080061e0(void *memory_start, int character, size_t size)\n{\n  unsigned char *memory_ptr;\n  for (memory_ptr = (unsigned char *)memory_start; memory_ptr < (unsigned char *)(memory_start + size); memory_ptr++) {\n    *memory_ptr = (unsigned char)character;\n  }\n  return memory_start;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061e0",
            "calling": [
                "__sfp",
                "adc_read_value",
                "std.isra.0",
                "__sfmoreglue"
            ],
            "imported": false,
            "current_name": "fill_memory_with_char_080061e0"
        },
        "FUN_08004f0c": {
            "renaming": {
                "FUN_08004f0c": "handle_i2c_event_08004f0c",
                "PTR_i2c_handles_08004f18": "i2c_handles_ptr"
            },
            "code": "void handle_i2c_event_08004f0c(void)\n{\n  I2C_HandleTypeDef* i2c_handle = *(I2C_HandleTypeDef **)PTR_i2c_handles_08004f18;\n  HAL_I2C_EV_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f0c",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_event_08004f0c"
        },
        "FUN_08005604": {
            "renaming": {
                "FUN_08005604": "transmit_data_08005604",
                "huart": "uart_handler",
                "bVar1": "index",
                "uVar2": "handler_index",
                "iVar3": "transmit_status",
                "iVar4": "callback_ptr",
                "PTR_tx_callback_obj_08005644": "callback_ptr_array",
                "PTR_tx_callback_08005648": "callback_function_array",
                "PTR_uart_handlers_0800564c": "uart_handler_array"
            },
            "code": "void transmit_data_08005604(UART_HandleTypeDef *uart_handler)\n{\n  uint8_t index;\n  int callback_ptr;\n  int transmit_status;\n  uint8_t handler_index;\n  uint8_t *data_ptr;\n  uint16_t *data_length_ptr;\n  index = get_uart_index(uart_handler);\n  handler_index = *(uint8_t *)(PTR_uart_handlers_0800564c + (uint)*(byte *)(callback_ptr + 0x44) * 4);\n  if ((index < 5) && ((transmit_status = (**(code **)(PTR_tx_callback_08005648 + index * 4))(callback_ptr), transmit_status != -1))) {\n    data_ptr = (uint8_t *)(*(int *)(callback_ptr + 100) + (uint)*(ushort *)(callback_ptr + 0x6a));\n    data_length_ptr = (uint16_t *)(callback_ptr + 0x68);\n    HAL_UART_Transmit_IT(uart_handler, data_ptr, *data_length_ptr);\n  }\n  return;\n}",
            "called": [
                "HAL_UART_Transmit_IT",
                "uart_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "UART_EndTransmit_IT"
            ],
            "imported": false,
            "current_name": "transmit_data_08005604"
        },
        "FUN_08005724": {
            "renaming": {
                "FUN_08005724": "always_returns_one_08005724",
                "file_UNUSED": "file_not_used",
                "return value": "result"
            },
            "code": "int always_returns_one_08005724(int file_not_used)\n{\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005724",
            "calling": [
                "_isatty_r"
            ],
            "imported": false,
            "current_name": "always_returns_one_08005724"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "calculate_file_size_08005728",
                "file_UNUSED": "file_descriptor",
                "ptr_UNUSED": "pointer",
                "dir_UNUSED": "directory"
            },
            "code": "int calculate_file_size_08005728(int file_descriptor, int pointer, int directory) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "_lseek_r"
            ],
            "imported": false,
            "current_name": "calculate_file_size_08005728"
        },
        "FUN_0800135a": {
            "renaming": {
                "__thiscall LiquidCrystal::FUN_0800135a": "send_instruction_to_lcd",
                "this": "lcd",
                "'\\x01'": "instruction",
                "'\\0'": "no_data",
                "FUN_0800135a": "send_instruction_to_lcd_0800135a"
            },
            "code": "void send_instruction_to_lcd_0800135a(LiquidCrystal *lcd) {\\n  char instruction = \"\\x01\";\\n  char no_data = \"\\0\";\\n  send(lcd, instruction, no_data);\\n  return;\\n}",
            "called": [
                "send"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800135a",
            "calling": [
                "setup",
                "begin",
                "loop"
            ],
            "imported": false,
            "current_name": "send_instruction_to_lcd_0800135a"
        },
        "FUN_08005c96": {
            "renaming": {
                "__thiscall Print::FUN_08005c96": "size_t Print::printString",
                "*this": "*printObject",
                "str": "string",
                "sVar1": "stringLength",
                "sVar2": "printedLength",
                "FUN_08005c96": "printString_08005c96"
            },
            "code": "size_t Print::printString_08005c96(Print *this, char *string)\n{\n  size_t stringLength;\n  size_t printedLength;\n  if (string != NULL) {\n    stringLength = strlen(string);\n    printedLength = (*this->_vptr_Print[1])(stringLength, string, stringLength);\n    return printedLength;\n  }\n  return 0;\n}",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c96",
            "calling": [
                "setup",
                "printFloat",
                "println",
                "loop"
            ],
            "imported": false,
            "current_name": "printString_08005c96"
        },
        "FUN_0800571a": {
            "renaming": {
                "FUN_0800571a": "set_file_mode_to_directory_0800571a",
                "file_UNUSED": "unused_file",
                "st": "file_stats"
            },
            "code": "int set_file_mode_to_directory_0800571a(stat *file_stats){\n  file_stats->st_mode = 0x2000;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800571a",
            "calling": [
                "_fstat_r"
            ],
            "imported": false,
            "current_name": "set_file_mode_to_directory_0800571a"
        },
        "FUN_08002efc": {
            "renaming": {
                "FUN_08002efc": "i2c_transfer_08002efc",
                "*hi2c": "*handle",
                "uVar1": "transfer_options",
                "pbVar2": "buffer_ptr"
            },
            "code": "HAL_StatusTypeDef i2c_transfer_08002efc(I2C_HandleTypeDef *handle)\n{\n    uint32_t transfer_options = handle->XferOptions;\n    if (handle->State == HAL_I2C_STATE_BUSY_TX) {\n        if (handle->XferCount == 0) {\n            if (((transfer_options == 4) || (transfer_options == 8)) || (transfer_options == 0xffff0000)) {\n                handle->Instance->CR2 &= 0xfffff8ff;\n                handle->Instance->CR1 |= 0x200;\n                handle->PreviousState = 0;\n                handle->State = HAL_I2C_STATE_READY;\n                if (handle->Mode == HAL_I2C_MODE_MEM) {\n                    handle->Mode = HAL_I2C_MODE_NONE;\n                    HAL_I2C_MemTxCpltCallback(handle);\n                }\n                else {\n                    handle->Mode = HAL_I2C_MODE_NONE;\n                    HAL_I2C_MasterTxCpltCallback(handle);\n                }\n            }\n            else {\n                handle->Instance->CR2 &= 0xfffff8ff;\n                handle->PreviousState = 0x11;\n                handle->Mode = HAL_I2C_MODE_NONE;\n                handle->State = HAL_I2C_STATE_READY;\n                HAL_I2C_MasterTxCpltCallback(handle);\n            }\n        }\n        else {\n            uint8_t *buffer_ptr = handle->pBuffPtr;\n            handle->pBuffPtr = buffer_ptr + 1;\n            handle->Instance->DR = (uint)*buffer_ptr;\n            handle->XferCount--;\n        }\n    }\n    return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MasterTxCpltCallback",
                "HAL_I2C_MemTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efc",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_transfer_08002efc"
        },
        "FUN_0800365c": {
            "renaming": {
                "FUN_0800365c": "delay_0800365c",
                "mdelay": "milliseconds",
                "Delay": "delayCycles",
                "bVar1": "delayComplete",
                "PTR_SystemCoreClock_08003680": "PTR_SystemCoreClock",
                "DAT_08003684": "DAT_CyclesPerMillisecond"
            },
            "code": "void delay_0800365c(uint32_t milliseconds)\n{\n  bool delay_0800365cComplete;\n  uint32_t cyclesPerMillisecond = (uint)((ulonglong)DAT_08003684 * (ulonglong)*(uint *)PTR_SystemCoreClock_08003680_08003680 >> 0x29);\n  uint32_t delay_0800365cCycles = milliseconds * cyclesPerMillisecond;\n  do {\n    delay_0800365cComplete = delay_0800365cCycles == 0;\n    delay_0800365cCycles--;\n  } while (!delay_0800365cComplete);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800365c",
            "calling": [
                "HAL_RCC_OscConfig"
            ],
            "imported": false,
            "current_name": "delay_0800365c"
        },
        "FUN_08006ad0": {
            "renaming": {
                "FUN_08006ad0": "process_data_08006ad0",
                "param_1": "data_ptr",
                "param_2": "param_ptr",
                "iVar1": "initial_value",
                "piVar2": "int_ptr",
                "uVar3": "value",
                "uVar4": "flag",
                "iVar5": "increment",
                "pcVar6": "func_ptr",
                "iVar7": "current_value",
                "uVar8": "temp",
                "bVar9": "is_increment_zero"
            },
            "code": "uint32_t process_data_08006ad0(uint32_t *data_ptr, int32_t *param_ptr) {\n  int32_t initial_value = param_ptr[4];\n  uint16_t flag = *(uint16_t *)(param_ptr + 3);\n  uint32_t value = (uint32_t)flag;\n  if ((int32_t)(value << 0x1c) < 0) {\n    if (initial_value != 0) {\n      int32_t increment = value << 0x1e;\n      bool is_increment_zero = increment == 0;\n      if (is_increment_zero) {\n        increment = 0;\n      }\n      int32_t current_value = *param_ptr;\n      if (!is_increment_zero) {\n        increment = param_ptr[5];\n      }\n      *param_ptr = initial_value;\n      param_ptr[2] = increment;\n      for (current_value = current_value - initial_value; current_value > 0; current_value = current_value - increment) {\n        increment = (*(func_ptr_t)param_ptr[10])(data_ptr, param_ptr[8], initial_value, current_value);\n        if (increment < 1) {\n          flag = *(uint16_t *)(param_ptr + 3);\n          goto LAB_08006bc6;\n        }\n        initial_value = initial_value + increment;\n      }\n    }\n  }\n  else if (((param_ptr[1] > 0) || (param_ptr[0x10] > 0)) && (param_ptr[0xb] != 0)) {\n    func_ptr_t func_ptr = (func_ptr_t)param_ptr[0xb];\n    uint32_t temp = *data_ptr;\n    *data_ptr = 0;\n    if ((flag & 0x1000) == 0) {\n      int32_t result = (*func_ptr)(data_ptr, param_ptr[8], value & 0x1000, 1);\n      if ((result == -1) && (*data_ptr != 0)) {\n        if ((*data_ptr != 0x1d) && (*data_ptr != 0x16)) {\n          *(uint16_t *)(param_ptr + 3) = *(uint16_t *)(param_ptr + 3) | 0x40;\n          return 0xffffffff;\n        }\n        *data_ptr = temp;\n        return 0;\n      }\n    }\n    else {\n      int32_t result = param_ptr[0x15];\n    }\n    if (((int32_t)((uint32_t)flag << 0x1d) < 0) && (param_ptr[0xd] != 0)) {\n      int32_t decrement = initial_value - param_ptr[1];\n      if (param_ptr[0xd] != param_ptr + 0x11) {\n        _free_r(data_ptr);\n      }\n      decrement = decrement - param_ptr[0x10];\n      int32_t result = (*func_ptr)(data_ptr, param_ptr[8], decrement, 0);\n      flag = *(uint16_t *)(param_ptr + 3);\n      if ((result == -1) && ((*data_ptr > 0x1d) || (__builtin_expect((DAT_08006bdc >> (*data_ptr & 0xff)) << 0x1f, -1)) != 0)) {\n        *(uint16_t *)(param_ptr + 3) = flag | 0x40;\n        return 0xffffffff;\n      }\n    }\n    param_ptr[1] = 0;\n    *param_ptr = initial_value;\n    if (((int32_t)((uint32_t)flag << 0x13) < 0) && ((result != -1) || (*data_ptr == 0))) {\n      param_ptr[0x15] = result;\n    }\n    int32_t *int_ptr = (int32_t *)param_ptr[0xd];\n    *data_ptr = temp;\n    if (int_ptr != 0) {\n      if (int_ptr != param_ptr + 0x11) {\n        _free_r(data_ptr);\n      }\n      param_ptr[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ad0",
            "calling": [
                "_fflush_r"
            ],
            "imported": false,
            "current_name": "process_data_08006ad0"
        },
        "FUN_080033b8": {
            "renaming": {
                "FUN_080033b8": "i2c_handle_080033b8",
                "hi2c": "handle",
                "pIVar1": "instance",
                "uVar2": "sr1_reg",
                "uVar3": "cr2_reg",
                "uVar4": "sr2_reg"
            },
            "code": "void i2c_handle_080033b8(I2C_HandleTypeDef *handle)\n{\n  I2C_TypeDef *instance;\n  uint16_t sr1_reg;\n  uint16_t sr2_reg;\n  uint16_t cr2_reg;\n  instance = handle->Instance;\n  sr2_reg = instance->SR2;\n  sr1_reg = instance->SR1;\n  cr2_reg = instance->CR2;\n  if ((handle->Mode == HAL_I2C_MODE_MASTER) || (handle->Mode == HAL_I2C_MODE_MEM)) {\n    if (((sr1_reg & I2C_SR1_SB) == 0) || ((cr2_reg & I2C_CR2_ITEVTEN) == 0)) {\n      if (((I2C_SR1_ADDR & sr1_reg) == 0) || ((cr2_reg & I2C_CR2_ITEVTEN) == 0)) {\n        if (((I2C_SR1_TXE & sr1_reg) != 0) && ((cr2_reg & I2C_CR2_ITEVTEN) != 0)) {\n          I2C_MasterTransmit_TXE(handle);\n        }\n      }\n      else {\n        I2C_Master_ADD10(handle);\n      }\n    }\n    else {\n      I2C_Master_SB(handle);\n    }\n    if ((I2C_SR2_MSL & sr2_reg) == 0) {\n      if ((((I2C_SR1_RXNE & sr1_reg) != 0) && ((cr2_reg & I2C_CR2_ITBUFEN) != 0)) && ((I2C_SR1_BTF & sr1_reg) == 0)\n         ) {\n        I2C_MasterReceive_RXNE(handle);\n        return;\n      }\n      if (((I2C_SR1_BTF & sr1_reg) != 0) && ((cr2_reg & I2C_CR2_ITEVTEN) != 0)) {\n        I2C_MasterReceive_BTF(handle);\n        return;\n      }\n    }\n    else {\n      if ((((I2C_SR1_TXE & sr1_reg) != 0) && ((cr2_reg & I2C_CR2_ITBUFEN) != 0)) && ((I2C_SR1_BTF & sr1_reg) == 0)\n         ) {\n        I2C_MasterTransmit_TXE(handle);\n        return;\n      }\n      if (((I2C_SR1_BTF & sr1_reg) != 0) && ((cr2_reg & I2C_CR2_ITEVTEN) != 0)) {\n        I2C_MasterTransmit_BTF(handle);\n        return;\n      }\n    }\n  }\n  else {\n    if (((I2C_SR1_ADDR & sr1_reg) != 0) && ((cr2_reg & I2C_CR2_ITEVTEN) != 0)) {\n      I2C_Slave_ADDR(handle);\n      return;\n    }\n    if (((I2C_SR1_STOPF & sr1_reg) != 0) && ((cr2_reg & I2C_CR2_ITEVTEN) != 0)) {\n      I2C_Slave_STOPF(handle);\n      return;\n    }\n    if ((I2C_SR2_MSL & sr2_reg) == 0) {\n      if ((((I2C_SR1_RXNE & sr1_reg) != 0) && ((cr2_reg & I2C_CR2_ITBUFEN) != 0)) && ((I2C_SR1_BTF & sr1_reg) == 0)\n         ) {\n        I2C_SlaveReceive_RXNE(handle);\n        return;\n      }\n      if (((I2C_SR1_BTF & sr1_reg) != 0) && ((cr2_reg & I2C_CR2_ITEVTEN) != 0)) {\n        I2C_SlaveReceive_BTF(handle);\n        return;\n      }\n    }\n    else {\n      if ((((I2C_SR1_TXE & sr1_reg) != 0) && ((cr2_reg & I2C_CR2_ITBUFEN) != 0)) && ((I2C_SR1_BTF & sr1_reg) == 0)\n         ) {\n        I2C_SlaveTransmit_TXE(handle);\n        return;\n      }\n      if (((I2C_SR1_BTF & sr1_reg) != 0) && ((cr2_reg & I2C_CR2_ITEVTEN) != 0)) {\n        I2C_SlaveTransmit_BTF(handle);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "I2C_SlaveReceive_RXNE",
                "I2C_Slave_ADDR",
                "I2C_Slave_STOPF",
                "I2C_Master_ADD10",
                "I2C_SlaveTransmit_BTF",
                "I2C_MasterReceive_BTF",
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE",
                "I2C_SlaveReceive_BTF",
                "I2C_Master_SB",
                "I2C_SlaveTransmit_TXE",
                "I2C_Master_ADDR",
                "I2C_MasterReceive_RXNE"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033b8",
            "calling": [
                "I2C2_EV_IRQHandler",
                "I2C1_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_handle_080033b8"
        },
        "FUN_080069e4": {
            "renaming": {
                "FUN_080069e4": "read_input_080069e4",
                "param_1": "read_status",
                "param_2": "input_stream",
                "uVar1": "input_status",
                "uVar2": "input_flags",
                "iVar3": "impure_ptr"
            },
            "code": "uint read_input_080069e4(uint *read_status, uint *input_stream) {\n  uint input_status;\n  ushort input_flags;\n  int impure_ptr = *(int *)PTR__impure_ptr_08006ab0;\n  if ((impure_ptr != 0) && (*(int *)(impure_ptr + 0x18) == 0)) {\n    __sinit(impure_ptr);\n  }\n  if (input_stream == (uint *)PTR___sf_fake_stdin_08006ab4) {\n    input_stream = *(uint **)(impure_ptr + 4);\n  }\n  else if (input_stream == (uint *)PTR___sf_fake_stdout_08006ab8) {\n    input_stream = *(uint **)(impure_ptr + 8);\n  }\n  else if (input_stream == (uint *)PTR___sf_fake_stderr_08006abc) {\n    input_stream = *(uint **)(impure_ptr + 0xc);\n  }\n  input_flags = *(ushort *)(input_stream + 3);\n  input_status = (uint)input_flags;\n  if (-1 < (int)(input_status << 0x1c)) {\n    if (-1 < (int)(input_status << 0x1b)) {\n      *read_status = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(input_status << 0x1d) < 0) {\n      if ((uint *)input_stream[0xd] != (uint *)0x0) {\n        if ((uint *)input_stream[0xd] != input_stream + 0x11) {\n          _free_r(read_status);\n        }\n        input_stream[0xd] = 0;\n      }\n      *(ushort *)(input_stream + 3) = *(ushort *)(input_stream + 3) & 0xffdb;\n      input_stream[1] = 0;\n      *input_stream = input_stream[4];\n    }\n    *(ushort *)(input_stream + 3) = *(ushort *)(input_stream + 3) | 8;\n  }\n  if ((input_stream[4] == 0) && ((*(ushort *)(input_stream + 3) & 0x280) != 0x200)) {\n    __smakebuf_r(read_status,input_stream);\n  }\n  input_flags = *(ushort *)(input_stream + 3);\n  input_status = input_flags & 1;\n  if ((input_flags & 1) == 0) {\n    if (-1 < (int)((uint)input_flags << 0x1e)) {\n      input_status = input_stream[5];\n    }\n    input_stream[2] = input_status;\n  }\n  else {\n    input_stream[2] = 0;\n    input_stream[6] = -input_stream[5];\n  }\n  if (input_stream[4] == 0) {\n    input_flags = *(ushort *)(input_stream + 3);\n    input_status = (int)(short)input_flags & 0x80;\n    if (input_status != 0) {\n      *(ushort *)(input_stream + 3) = input_flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    input_status = 0;\n  }\n  return input_status;\n}",
            "called": [
                "__sinit",
                "__smakebuf_r",
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069e4",
            "calling": [
                "__swbuf_r",
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "read_input_080069e4"
        },
        "FUN_080060bc": {
            "renaming": {
                "FUN_080060bc": "handle_gpio_exti_irq_080060bc",
                "uVar1": "gpio_pin"
            },
            "code": "void handle_gpio_exti_irq_080060bc(void)\n{\n  uint16_t gpio_pin = 0x400;\n  while (gpio_pin < 0x8001) {\n    HAL_GPIO_EXTI_IRQHandler(gpio_pin);\n    gpio_pin = gpio_pin << 1;\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060bc",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_exti_irq_080060bc"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "do_nothing_08002580"
            },
            "code": "\nvoid do_nothing_08002580(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08002580"
        },
        "FUN_08004b9e": {
            "renaming": {
                "FUN_08004b9e": "incrementSystemTick_08004b9e",
                "noOsSystickHandler": "handleNoOsSystick"
            },
            "code": "void incrementSystemTick_08004b9e(void)\n{\n  HAL_IncTick();\n  HAL_SYSTICK_IRQHandler();\n  handleNoOsSystick();\n  return;\n}",
            "called": [
                "HAL_IncTick",
                "noOsSystickHandler",
                "HAL_SYSTICK_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9e",
            "calling": [],
            "imported": false,
            "current_name": "incrementSystemTick_08004b9e"
        },
        "FUN_08004b9c": {
            "renaming": {
                "FUN_08004b9c": "do_nothing_08004b9c"
            },
            "code": "\nvoid do_nothing_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9c",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "do_nothing_08004b9c"
        },
        "FUN_08006940": {
            "renaming": {
                "FUN_08006940": "send_char_to_stream_08006940",
                "param_1": "stream_id",
                "param_2": "character",
                "param_3": "stream_buffer",
                "param_4": "buffer_size",
                "iVar1": "status",
                "uVar2": "buffer_length",
                "puVar3": "buffer_pointer"
            },
            "code": "uint send_char_to_stream_08006940(int stream_id, uint character, int *stream_buffer, undefined4 buffer_size)\n{\n  int status;\n  uint buffer_length;\n  undefined *buffer_pointer;\n  if ((stream_id != 0) && (*(int *)(stream_id + 0x18) == 0)) {\n    initialize_stream();\n  }\n  if (stream_buffer == (int *)PTR___sf_fake_stdin_080069d8) {\n    stream_buffer = *(int **)(stream_id + 4);\n  }\n  else if (stream_buffer == (int *)PTR___sf_fake_stdout_080069dc) {\n    stream_buffer = *(int **)(stream_id + 8);\n  }\n  else if (stream_buffer == (int *)PTR___sf_fake_stderr_080069e0) {\n    stream_buffer = *(int **)(stream_id + 0xc);\n  }\n  stream_buffer[2] = stream_buffer[6];\n  buffer_length = (uint)*(ushort *)(stream_buffer + 3);\n  status = buffer_length << 0x1c;\n  if (((status < 0) && (buffer_length = stream_buffer[4], buffer_length != 0)) || (status = setup_stream(stream_id, stream_buffer, status, buffer_length, buffer_size), status == 0)) {\n    character = character & 0xff;\n    status = *stream_buffer - stream_buffer[4];\n    if ((status < stream_buffer[5]) || (status = flush_stream(stream_id, stream_buffer), status == 0)) {\n      stream_buffer[2] = stream_buffer[2] + -1;\n      buffer_pointer = (undefined *)*stream_buffer;\n      *stream_buffer = (int)(buffer_pointer + 1);\n      *buffer_pointer = (char)character;\n      if (status + 1 != stream_buffer[5]) {\n        if (-1 < (int)((uint)*(ushort *)(stream_buffer + 3) << 0x1f)) {\n          return character;\n        }\n        if (character != 10) {\n          return character;\n        }\n      }\n      status = flush_stream(stream_id, stream_buffer);\n      if (status == 0) {\n        return character;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "_fflush_r",
                "__swsetup_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006940",
            "calling": [
                "__sfputc_r"
            ],
            "imported": false,
            "current_name": "send_char_to_stream_08006940"
        },
        "FUN_08005730": {
            "renaming": {
                "FUN_08005730": "send_uart_debug_message_08005730",
                "file_UNUSED": "file_descriptor",
                "ptr": "message",
                "len": "message_length",
                "sVar1": "bytes_sent",
                "uart_debugFUN_08005730": "uart_debug_send_message"
            },
            "code": "size_t send_uart_debug_message_08005730(int file_descriptor, char *message, int message_length)\n{\n  size_t bytes_sent;\n  bytes_sent = uart_debug_send_message((uint8_t *)message, message_length);\n  return bytes_sent;\n}",
            "called": [
                "uart_debug_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005730",
            "calling": [
                "_write_r"
            ],
            "imported": false,
            "current_name": "send_uart_debug_message_08005730"
        },
        "FUN_080058ea": {
            "renaming": {
                "FUN_080058ea": "calculateNextTailPosition_080058ea",
                "obj": "serialObj",
                "iVar3": "nextTailPosition",
                "uVar1": "tailPositionAsUshort",
                "uVar2": "tailPositionAsUint16"
            },
            "code": "int calculateNextTailPosition_080058ea(serial_t_conflict *serialObj) {\n    int nextTailPosition = serialObj->tx_tail + 1;\n    ushort tailPositionAsUshort = (ushort)nextTailPosition;\n    uint16_t tailPositionAsUint16 = tailPositionAsUshort & 0x7f;\n    if (nextTailPosition == 0) {\n        tailPositionAsUint16 = -(-tailPositionAsUshort & 0x7f);\n    }\n    serialObj->tx_tail = tailPositionAsUint16;\n    if (serialObj->tx_head != serialObj->tx_tail) {\n        return 0;\n    }\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058ea",
            "calling": [],
            "imported": false,
            "current_name": "calculateNextTailPosition_080058ea"
        },
        "FUN_08002582": {
            "renaming": {
                "FUN_08002582": "run_systick_callback_08002582"
            },
            "code": "void run_systick_callback_08002582(void)\n{\n  HAL_SYSTICK_Callback();\n  return;\n}",
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002582",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "run_systick_callback_08002582"
        },
        "FUN_08005976": {
            "renaming": {
                "FUN_08005976": "waitForTransmissionToComplete_08005976",
                "this": "serialInstance",
                "_written": "isWritten",
                "_serial": "serialInstance",
                "tx_head": "txHead",
                "tx_tail": "txTail"
            },
            "code": "void __thiscall HardwareSerial::waitForTransmissionToComplete_08005976(HardwareSerial *serialInstance)\n{\n    if (serialInstance->isWritten) {\n        do {\n        } while ((serialInstance->txHead) != (serialInstance->txTail));\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005976",
            "calling": [],
            "imported": false,
            "current_name": "waitForTransmissionToComplete_08005976"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "get_gpio_port_08004884",
                "port_idx": "port_index",
                "pGVar1": "gpio_port",
                "tmpreg": "Not used, removed",
                "tmpreg_1": "Not used, removed",
                "tmpreg_2": "Not used, removed",
                "tmpreg_3": "Not used, removed",
                "tmpreg_4": "Not used, removed",
                "DAT_08004914": "PTR_DAT_08004914",
                "DAT_08004918": "gpio_port_0",
                "DAT_0800491c": "gpio_port_1",
                "DAT_08004920": "gpio_port_2",
                "DAT_08004924": "gpio_port_3",
                "DAT_08004928": "gpio_port_4"
            },
            "code": "GPIO_TypeDef * get_gpio_port_08004884(uint32_t port_index)\n{\n  GPIO_TypeDef *gpio_port;\n  uint32_t port_mask = 0;\n\n  switch(port_index) {\n    case 0:\n      port_mask = 4;\n      gpio_port = DAT_08004918;\n      break;\n    case 1:\n      port_mask = 8;\n      gpio_port = DAT_0800491c;\n      break;\n    case 2:\n      port_mask = 0x10;\n      gpio_port = DAT_08004920;\n      break;\n    case 3:\n      port_mask = 0x20;\n      gpio_port = DAT_08004924;\n      break;\n    case 4:\n      port_mask = 0x40;\n      gpio_port = DAT_08004928;\n      break;\n    default:\n      gpio_port = NULL;\n  }\n  *(uint *)(DAT_08004914 + 0x18) |= port_mask;\n  return gpio_port;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "digital_io_init",
                "HAL_ADC_MspInit",
                "uart_init"
            ],
            "imported": false,
            "current_name": "get_gpio_port_08004884"
        },
        "FUN_08005fa0": {
            "renaming": {
                "FUN_08005fa0": "free_gpio_irq_configurations_08005fa0",
                "param_1": "param",
                "puVar1": "current_node",
                "puVar2": "prev_node"
            },
            "code": "void free_gpio_irq_configurations_08005fa0(void *param) {\n  undefined *current_node = PTR___malloc_free_list_08005fc0;\n  while (current_node != PTR_gpio_irq_conf_08005fc4) {\n    undefined *prev_node = current_node - 0x14;\n    if (*(code **)(current_node - 8) != (code *)0x0) {\n      (**(code **)(current_node - 8))(current_node - 0x10, current_node - 0x10, 3);\n    }\n    current_node = prev_node;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fa0",
            "calling": [],
            "imported": false,
            "current_name": "free_gpio_irq_configurations_08005fa0"
        },
        "FUN_08001be8": {
            "renaming": {
                "FUN_08001be8": "initialize_program_08001be8",
                "iVar1": "i",
                "puVar2": "completed_ptr",
                "UNRECOVERED_JUMPTABLE": "UNRECOVERED_JUMPTABLE"
            },
            "code": "void initialize_program_08001be8(void)\n{\n  int i;\n  undefined4 *completed_ptr = (undefined4 *)PTR_completed_8667_08001c28;\n  undefined4 *dso_handle_ptr = (undefined4 *)PTR___dso_handle_08001c20;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (i = 0; dso_handle_ptr + i < (undefined4 *)PTR__edata_08001c24; i += sizeof(undefined4)) {\n    *(dso_handle_ptr + i) = *(undefined4 *)((undefined4 *)PTR__sidata_08001c1c + i);\n  }\n  \n  for (; completed_ptr < (undefined4 *)PTR__ebss_08001c2c; completed_ptr++) {\n    *completed_ptr = 0;\n  }\n  \n  SystemInit();\n  __libc_init_array();\n  \n  UNRECOVERED_JUMPTABLE = (code *)0x8001c1a;\n  main();\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}",
            "called": [
                "main",
                "__libc_init_array",
                "SystemInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001be8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_program_08001be8"
        },
        "FUN_080061f0": {
            "renaming": {
                "FUN_080061f0": "allocate_memory_080061f0",
                "param_1": "error_code",
                "param_2": "size",
                "param_3": "zero",
                "param_4": "zero2",
                "puVar1": "previous_block",
                "extraout_r1": "next_block",
                "ppiVar2": "next_block",
                "ppiVar3": "current_block",
                "piVar4": "block_size",
                "ppiVar5": "free_list",
                "ppiVar6": "current_block",
                "ppiVar7": "previous_block"
            },
            "code": "void allocate_memory_080061f0(int* error_code, int size, int zero, int zero2)\n{\n    int** previous_block;\n    int** current_block;\n    int** next_block;\n    int* block_size;\n    int** free_list;\n\n    if (size == 0) {\n        return;\n    }\n\n    current_block = (int**)(size - 4);\n    if (*(int*)(size - 4) < 0) {\n        current_block = (int**)((int)current_block + *(int*)(size - 4));\n    }\n\n    __malloc_lock();\n\n    previous_block = PTR___malloc_free_list_08006284;\n    free_list = *(int***)(PTR___malloc_free_list_08006284);\n\n    if (free_list == (int**)0x0) {\n        current_block[1] = (int*)0x0;\n        *(int***)previous_block = current_block;\n        next_block = error_code;\n        current_block = (int**)previous_block;\n    }\n    else if (current_block < free_list) {\n        next_block = (int**)*current_block;\n        current_block = (int**)((int)current_block + (int)next_block);\n        if (free_list == current_block) {\n            block_size = *free_list;\n            free_list = (int**)free_list[1];\n            current_block = (int**)((int)block_size + (int)next_block);\n            *current_block = (int*)current_block;\n        }\n        current_block[1] = (int*)free_list;\n        *(int***)previous_block = current_block;\n    }\n    else {\n        do {\n            next_block = free_list;\n            current_block = (int**)next_block[1];\n            if (current_block == (int**)0x0) break;\n            free_list = current_block;\n        } while (current_block <= current_block);\n\n        block_size = (int*)*next_block;\n\n        if ((int**)((int)next_block + (int)block_size) == current_block) {\n            block_size = (int*)((int)block_size + (int)*current_block);\n            *next_block = (int*)block_size;\n            if (current_block == (int**)((int)next_block + (int)block_size)) {\n                block_size = *current_block;\n                current_block = (int**)current_block[1];\n                next_block = (int**)((int)block_size + (int)*next_block);\n                *next_block = (int*)next_block;\n                next_block[1] = (int*)current_block;\n            }\n        }\n        else if (current_block < (int**)((int)next_block + (int)block_size)) {\n            *error_code = 0xc;\n        }\n        else {\n            next_block = (int**)((int)current_block + (int)*current_block);\n            if (current_block == next_block[1]) {\n                block_size = *next_block;\n                next_block = (int**)next_block[1];\n                next_block = (int**)((int)block_size + (int)*current_block);\n                *current_block = (int*)next_block;\n            }\n            current_block[1] = (int*)next_block[1];\n            next_block[1] = (int*)current_block;\n        }\n    }\n\n    __malloc_unlock(error_code, next_block, current_block, zero2);\n    return;\n}",
            "called": [
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061f0",
            "calling": [
                "__sflush_r",
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_080061f0"
        },
        "FUN_08002348": {
            "renaming": {
                "FUN_08002348": "stop_adc_conversion_08002348",
                "*hadc": "*adc_handle",
                "HVar1": "status",
                "hadc->Lock": "adc_handle->Lock",
                "HAL_LOCKED": "HAL_LOCKED",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "ADC_ConversionStop_Disable": "ADC_ConversionStop_Disable",
                "hadc->State": "adc_handle->State"
            },
            "code": "HAL_StatusTypeDef_conflict stop_adc_conversion_08002348(ADC_HandleTypeDef *adc_handle) {\n  HAL_StatusTypeDef_conflict status;\n  if (adc_handle->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n  adc_handle->Lock = HAL_LOCKED;\n  status = ADC_ConversionStop_Disable(adc_handle);\n  if (status == HAL_OK) {\n    adc_handle->State = adc_handle->State & 0xffffeefe | 1;\n  }\n  adc_handle->Lock = HAL_UNLOCKED;\n  return status;\n}",
            "called": [
                "ADC_ConversionStop_Disable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002348",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "stop_adc_conversion_08002348"
        },
        "FUN_08004f1c": {
            "renaming": {
                "FUN_08004f1c": "handle_i2c_error_08004f1c",
                "PTR_i2c_handles_08004f28": "PTR_i2c_handles",
                "i2c_handle": "i2c_handle"
            },
            "code": "void handle_i2c_error_08004f1c(void)\n{\n  I2C_HandleTypeDef* i2c_handle = *(I2C_HandleTypeDef**)PTR_i2c_handles_08004f28_08004f28;\n  HAL_I2C_ER_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f1c",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_error_08004f1c"
        },
        "FUN_080060d4": {
            "renaming": {
                "__thiscall std::function<void>::operator__": "invoke_function",
                "this": "function",
                "super__Function_base": "super_function_base",
                "_M_manager": "manager",
                "_M_invoker": "invoker",
                "_Any_data": "any_data",
                "__throw_bad_function_call": "throw_bad_function_call",
                "FUN_080060d4": "invoke_function_080060d4"
            },
            "code": "void invoke_function_080060d4(function_void___ *function) {\n  if ((function->super__Function_base)._M_manager != (_Manager_type)0x0) {\n    (*function->invoker)((_Any_data *)function);\n    return;\n  }\n  __throw_bad_function_call();\n}",
            "called": [
                "__throw_bad_function_call"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060d4",
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "imported": false,
            "current_name": "invoke_function_080060d4"
        },
        "FUN_08005a68": {
            "renaming": {
                "HardwareSerial::FUN_08005a68": "HardwareSerial::configureSerial",
                "this": "serialObj",
                "baud": "baudrate",
                "config": "config",
                "bVar1": "configMask",
                "iVar2": "dataBits",
                "_serial": "serialData",
                "_config": "serialConfig",
                "uart_init": "initUART",
                "uart_attach_rx_callback": "attachRXCallback",
                "PTR_s__home_bo__arduino15_packages_STM_08005b20": "assertMessage",
                "PTR___PRETTY_FUNCTION___08005b1c": "assertFunction",
                "PTR_s_databits__0_08005b18": "assertDatabits",
                "FUN_08005a68": "configureSerial_08005a68"
            },
            "code": "void __thiscall HardwareSerial::configureSerial_08005a68(HardwareSerial *serialObj, ulong baudrate, byte config) {\n\tbyte configMask = 7;\n\tint dataBits = 0;\n\tint parityBits = 0;\n\tint stopBits = 0;\n\t(serialObj->_serial).baudrate = baudrate;\n\tserialObj->_config = config;\n\tconfigMask = config & 7;\n\tswitch (configMask) {\n\t\tcase 4:\n\t\t\tdataBits = 7;\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tdataBits = 8;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tdataBits = 6;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\tif ((config & 0x30) == 0x30) {\n\t\tparityBits = 0x600;\n\t\tdataBits++;\n\t}\n\telse if ((config & 0x20) == 0) {\n\t\tparityBits = 0;\n\t}\n\telse {\n\t\tparityBits = 0x400;\n\t\tdataBits++;\n\t}\n\tif ((config & 8) == 0) {\n\t\tstopBits = 0;\n\t}\n\telse {\n\t\tstopBits = 0x2000;\n\t}\n\tif (dataBits == 8) {\n\t\t(serialObj->_serial).databits = 0;\n\t}\n\telse if (dataBits == 9) {\n\t\t(serialObj->_serial).databits = 0x1000;\n\t}\n\telse {\n\t\tdataBits = 0;\n\t}\n\tif (dataBits != 0) {\n\t\tuart_init((serial_t *)&serialObj->_serial);\n\t\tuart_attach_rx_callback((serial_t *)&serialObj->_serial,DAT_08005b14);\n\t\treturn;\n\t}\n\t/* WARNING: Subroutine does not return */\n\t__assert_func(PTR_s__home_bo__arduino15_packages_STM_08005b20,299,PTR___PRETTY_FUNCTION___08005b1c, PTR_s_databits__0_08005b18);\n}",
            "called": [
                "__assert_func",
                "uart_attach_rx_callback",
                "uart_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "configureSerial_08005a68"
        },
        "FUN_08001814": {
            "renaming": {
                "FUN_08001814": "set_constants_08001814",
                "this": "pid",
                "Kp": "proportional_gain",
                "Ki": "integral_gain",
                "Kd": "derivative_gain",
                "POn": "controller_direction",
                "iVar1": "is_less_than_zero",
                "uVar2": "dividend",
                "in_r2": "dividend_high",
                "in_r3": "dividend_low",
                "uVar3": "proportional_on_value",
                "bVar4": "proportional_on",
                "uVar5": "sample_time_in_seconds",
                "dVar6": "proportional_term",
                "dVar7": "integral_term",
                "dVar8": "derivative_term"
            },
            "code": "void PID::set_constants_08001814(PID *pid, double proportional_gain, double integral_gain, double derivative_gain, int controller_direction) {\n  bool proportional_on;\n  double sample_time_in_seconds = (double)pid->SampleTime / 1000.0;\n  if (proportional_gain >= 0.0 && integral_gain >= 0.0 && derivative_gain >= 0.0) {\n    pid->proportional_gain = proportional_gain;\n    pid->integral_gain = integral_gain * sample_time_in_seconds;\n    pid->derivative_gain = derivative_gain / sample_time_in_seconds;\n    proportional_on = (pid->proportional_on_value != 1);\n    pid->proportional_on = proportional_on;\n    if (!proportional_on) {\n      pid->proportional_on_value = true;\n    }\n    if (controller_direction == 1) {\n      pid->proportional_gain = -pid->proportional_gain;\n      pid->integral_gain = -pid->integral_gain;\n      pid->derivative_gain = -pid->derivative_gain;\n    }\n  }\n}\n",
            "called": [
                "__subdf3",
                "__aeabi_dcmplt",
                "__muldf3",
                "__divdf3",
                "__floatunsidf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001814",
            "calling": [
                "SetTunings",
                "PID"
            ],
            "imported": false,
            "current_name": "set_constants_08001814"
        },
        "FUN_080056c0": {
            "renaming": {
                "FUN_080056c0": "handle_UART_interrupt_080056c0",
                "USART3_IRQn": "UART_interrupt_number",
                "PTR_uart_handlers_080056d4": "uart_handler_pointer",
                "UART_HandleTypeDef": "UART_handler_type",
                "clear_pending_UART_interrupt": "HAL_NVIC_ClearPendingIRQ",
                "uart_handler_is_initialized": "UART_handler_initialized",
                "handle_UART_event": "HAL_UART_IRQHandler",
                "uart_handler": "current_UART_handler"
            },
            "code": "void handle_UART_interrupt_080056c0(void)\n{\n  clear_pending_UART_interrupt();\n  if (uart_handler_is_initialized()) {\n    handle_UART_event(uart_handler());\n  }\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056c0",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_080056c0"
        },
        "FUN_08000aec": {
            "renaming": {
                "FUN_08000aec": "execute_afl_call_08000aec",
                "ticks": "num_of_ticks",
                "uVar1": "result"
            },
            "code": "int execute_afl_call_08000aec(int num_of_ticks)\n{\n  uint32_t result;\n  if (*(int *)PTR_noHyperCall_08000b04 != 0) {\n    return 0;\n  }\n  result = aflCall(1, num_of_ticks, 0);\n  return result;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "execute_afl_call_08000aec"
        },
        "FUN_0800572c": {
            "renaming": {
                "FUN_0800572c": "count_bytes_in_file_0800572c",
                "file_UNUSED": "file_descriptor",
                "ptr_UNUSED": "buffer",
                "len_UNUSED": "buffer_size"
            },
            "code": "int count_bytes_in_file_0800572c(int file_descriptor, char *buffer, int buffer_size) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800572c",
            "calling": [
                "_read_r"
            ],
            "imported": false,
            "current_name": "count_bytes_in_file_0800572c"
        },
        "FUN_08004e12": {
            "renaming": {
                "FUN_08004e12": "handle_timer_interrupt_08004e12",
                "*htim": "*timer_handle",
                "psVar1": "timer_obj",
                "get_timer_obj": "get_timer_object",
                "irqHandle": "irq_handler"
            },
            "code": "void handle_timer_interrupt_08004e12(TIM_HandleTypeDef *timer_handle)\n{\n  stimer_t *timer_obj;\n  timer_obj = get_timer_object(timer_handle);\n  if (timer_obj->irq_handler != (_func_void_stimer_t_ptr *)0x0) {\n    (*timer_obj->irq_handler)(timer_obj);\n  }\n  return;\n}",
            "called": [
                "get_timer_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e12",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004e12"
        },
        "FUN_08000a58": {
            "renaming": {
                "FUN_08000a58": "convert_to_signed_fixed_point_08000a58",
                "param_1": "integer_part",
                "param_2": "fractional_part",
                "uVar1": "shifted_integer_part",
                "iVar2": "shifted_fractional_part",
                "uVar3": "abs_shifted_fractional_part",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint convert_to_signed_fixed_point_08000a58(uint integer_part, uint fractional_part) {\n  uint result;\n  int shifted_fractional_part = fractional_part * 2 + 0x200000;\n  if (fractional_part * 2 < 0xffe00000) {\n    if (shifted_fractional_part >= 0) {\n      return 0;\n    }\n    uint abs_shifted_fractional_part = -shifted_fractional_part - 0x3e1;\n    if (abs_shifted_fractional_part != 0 && abs_shifted_fractional_part < 0xfffffc20) {\n      uint shifted_integer_part = (fractional_part << 0xb | 0x80000000 | integer_part >> 0x15) >> (abs_shifted_fractional_part & 0xff);\n      if ((fractional_part & 0x80000000) != 0) {\n        shifted_integer_part = -shifted_integer_part;\n      }\n      result = shifted_integer_part;\n    }\n  }\n  else if ((integer_part | fractional_part << 0xc) == 0) {\n    result = 0;\n  }\n  else {\n    uint sign_bit = fractional_part & 0x80000000;\n    result = sign_bit == 0 ? 0x7fffffff : sign_bit;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a58",
            "calling": [
                "printFloat"
            ],
            "imported": false,
            "current_name": "convert_to_signed_fixed_point_08000a58"
        },
        "FUN_08001b48": {
            "renaming": {
                "FUN_08001b48": "initialize_clocks_08001b48",
                "HVar1": "status",
                "uVar2": "hclk_freq",
                "RCC_OscInitStruct": "osc_init",
                "RCC_ClkInitStruct": "clk_init",
                "PeriphClkInit": "periph_clk_init"
            },
            "code": "void initialize_clocks_08001b48(void)\n{\n  HAL_StatusTypeDef status;\n  uint32_t hclk_freq;\n  RCC_OscInitTypeDef osc_init;\n  RCC_ClkInitTypeDef clk_init;\n  RCC_PeriphCLKInitTypeDef periph_clk_init;\n  \n  osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;\n  osc_init.HSIState = RCC_HSI_ON;\n  osc_init.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;\n  osc_init.PLL.PLLState = RCC_PLL_ON;\n  osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;\n  osc_init.PLL.PLLMUL = RCC_PLL_MUL16;\n  status = HAL_RCC_OscConfig(&osc_init);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s__home_bo__arduino15_packages_STM_08001be4,0x88);\n  }\n  \n  clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;\n  clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;\n  clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;\n  clk_init.APB1CLKDivider = RCC_HCLK_DIV2;\n  clk_init.APB2CLKDivider = RCC_HCLK_DIV1;\n  status = HAL_RCC_ClockConfig(&clk_init, FLASH_LATENCY_2);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s__home_bo__arduino15_packages_STM_08001be4,0x95);\n  }\n  \n  periph_clk_init.PeriphClockSelection = RCC_PERIPHCLK_ADC;\n  periph_clk_init.AdcClockSelection = RCC_ADCPCLK2_DIV8;\n  status = HAL_RCCEx_PeriphCLKConfig(&periph_clk_init);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s__home_bo__arduino15_packages_STM_08001be4,0x9c);\n  }\n  \n  hclk_freq = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config((uint32_t)(SYSTICK_FREQUENCY_HZ * (uint64_t)hclk_freq / UINT32_MAX));\n  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);\n  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);\n}\n",
            "called": [
                "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_Config",
                "HAL_RCC_OscConfig",
                "HAL_RCCEx_PeriphCLKConfig",
                "_Error_Handler",
                "HAL_NVIC_SetPriority",
                "HAL_RCC_ClockConfig",
                "HAL_SYSTICK_CLKSourceConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "hw_config_init"
            ],
            "imported": false,
            "current_name": "initialize_clocks_08001b48"
        },
        "FUN_08004092": {
            "renaming": {
                "FUN_08004092": "set_TIMx_Channel_State_08004092",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelState": "channel_state",
                "CCER": "channel_control_register"
            },
            "code": "void set_TIMx_Channel_State_08004092(TIM_TypeDef *timer, uint32_t channel, uint32_t channel_state) {\n  uint32_t channel_mask = 1 << (channel & 0xff);\n  timer->CCER = (timer->CCER & ~channel_mask) | (channel_state << (channel & 0xff));\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004092",
            "calling": [
                "HAL_TIM_PWM_Stop"
            ],
            "imported": false,
            "current_name": "set_TIMx_Channel_State_08004092"
        },
        "FUN_08005cd4": {
            "renaming": {
                "FUN_08005cd4": "08005cd4_08005cd4",
                "this": "printObj",
                "c": "stringToPrint",
                "sVar1": "sizeOfPrintedString",
                "sVar2": "totalSize"
            },
            "code": "size_t __thiscall Print::08005cd4_08005cd4(Print *printObj, char *stringToPrint)\n{\n  size_t sizeOfPrintedString = print(printObj, stringToPrint);\n  size_t totalSize = printObj->08005cd4_08005cd4(printObj);\n  return totalSize + sizeOfPrintedString;\n}",
            "called": [
                "print",
                "println"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cd4",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "08005cd4_08005cd4"
        },
        "FUN_08000450": {
            "renaming": {
                "FUN_08000450": "calculate_08000450",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "constant1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "iVar6": "leading_zeroes",
                "uVar7": "constant2",
                "in_r12": "constant3",
                "bVar8": "condition1",
                "bVar9": "condition2",
                "bVar10": "condition3"
            },
            "code": "unsigned long long calculate_08000450(uint input1, undefined4 input2, undefined4 input3, uint input4) {\n    uint temp1, temp2, temp3, temp4, temp5, leading_zeroes;\n    uint constant1, constant2, constant3;\n    bool condition1, condition2, condition3;\n\n    temp5 = input1 << 1;\n    condition1 = temp5 == 0;\n    constant1 = (uint)((input1 & 0x80000000) != 0) << 0x1f;\n    temp4 = (uint)((int)temp5 >> 3) >> 1;\n    temp3 = constant1 | temp4;\n    input1 = input1 << 0x1d;\n\n    if (!condition1) {\n        input4 = temp5 & 0xff000000;\n        condition1 = input4 == 0;\n    }\n    if (!condition1) {\n        condition1 = input4 == 0xff000000;\n    }\n    if (!condition1) {\n        return CONCAT44(temp3, input1) ^ 0x3800000000000000;\n    }\n    if (temp5 == 0 || input4 == 0xff000000) {\n        return CONCAT44(temp3, input1);\n    }\n    temp2 = input1;\n    temp5 = temp4;\n    if (temp4 == 0) {\n        temp2 = 0;\n        temp5 = input1;\n    }\n    leading_zeroes = count_leading_zeroes(temp5);\n    if (temp4 == 0) {\n        leading_zeroes = leading_zeroes + 0x20;\n    }\n    temp1 = leading_zeroes - 0xb;\n    condition3 = SBORROW4(temp1, 0x20);\n    temp4 = leading_zeroes - 0x2b;\n    condition2 = (int)temp4 < 0;\n    condition1 = temp4 == 0;\n\n    if ((int)temp1 < 0x20) {\n        condition3 = SCARRY4(temp4, 0xc);\n        leading_zeroes = leading_zeroes + -0x1f;\n        condition2 = leading_zeroes < 0;\n        condition1 = leading_zeroes == 0;\n        temp4 = temp1;\n        if (!condition1 && condition2 == condition3) {\n            temp2 = temp5 << (temp1 & 0xff);\n            temp5 = temp5 >> (0xcU - leading_zeroes & 0xff);\n            goto LAB_08000318;\n        }\n    }\n    if (condition1 || condition2 != condition3) {\n        constant2 = 0x20 - temp4;\n    }\n    temp5 = temp5 << (temp4 & 0xff);\n    if (condition1 || condition2 != condition3) {\n        temp5 = temp5 | temp2 >> (constant2 & 0xff);\n    }\n    if (condition1 || condition2 != condition3) {\n        temp2 = temp2 << (temp4 & 0xff);\n    }\n\nLAB_08000318:\n    if ((int)temp1 < 0x381) {\n        constant3 = temp5 + (0x380 - temp1) * 0x100000 | constant1;\n        return CONCAT44(constant3, temp2);\n    }\n\n    temp4 = ~(0x380 - temp1);\n    if ((int)temp4 < 0x1f) {\n        leading_zeroes = temp4 - 0x13;\n        if (leading_zeroes != 0 && leading_zeroes < 0 == SCARRY4(temp4 - 0x1f, 0xc)) {\n            temp2 = temp2 >> (0x20 - (0xcU - leading_zeroes) & 0xff) | temp5 << (0xcU - leading_zeroes & 0xff);\n            return CONCAT44(constant1 | temp5 >> (temp4 & 0xff), temp2) & 0x80000000ffffffff;\n        }\n        temp4 = temp4 + 1;\n        return CONCAT44(constant1 | temp5 >> (temp4 & 0xff), temp2 >> (temp4 & 0xff) | temp5 << (0x20 - temp4 & 0xff));\n    }\n    return CONCAT44(temp3, temp5 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000450",
            "calling": [],
            "imported": false,
            "current_name": "calculate_08000450"
        },
        "FUN_08005bb0": {
            "renaming": {
                "FUN_08005bb0": "initialize_priority_08005bb0",
                "__initialize_p": "is_initialize",
                "__priority": "priority_level",
                "PTR_Serial2_08005bd0": "serial_ptr_08005bd0",
                "DAT_08005bcc": "data_08005bcc"
            },
            "code": "void initialize_priority_08005bb0(int is_initialize, int priority_level) {\n  if (is_initialize != 1) {\n    return;\n  }\n  if (priority_level == 0xffff) {\n    HardwareSerial::HardwareSerial((HardwareSerial *)PTR_Serial2_08005bd0, DAT_08005bcc);\n  }\n  return;\n}",
            "called": [
                "HardwareSerial"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb0",
            "calling": [
                "_GLOBAL__sub_I_Serial2"
            ],
            "imported": false,
            "current_name": "initialize_priority_08005bb0"
        },
        "FUN_080014ba": {
            "renaming": {
                "__thiscall LiquidCrystal::FUN_080014ba": "initializeLCD",
                "this": "lcd",
                "fourbitmode": "four_bit_mode",
                "rs": "rs_pin",
                "rw": "rw_pin",
                "enable": "enable_pin",
                "d0": "data_pin_0",
                "d1": "data_pin_1",
                "d2": "data_pin_2",
                "d3": "data_pin_3",
                "d4": "data_pin_4",
                "d5": "data_pin_5",
                "d6": "data_pin_6",
                "d7": "data_pin_7",
                "_rs_pin": "rs_pin",
                "_rw_pin": "rw_pin",
                "_enable_pin": "enable_pin",
                "_data_pins": "data_pins",
                "_displayfunction": "display_function",
                "begin": "begin",
                "FUN_080014ba": "initializeLCD_080014ba"
            },
            "code": "void __thiscall initializeLCD_080014ba(LiquidCrystal *lcd, uint8_t four_bit_mode, uint8_t rs_pin, uint8_t rw_pin, uint8_t enable_pin, uint8_t data_pin_0, uint8_t data_pin_1, uint8_t data_pin_2, uint8_t data_pin_3, uint8_t data_pin_4, uint8_t data_pin_5, uint8_t data_pin_6, uint8_t data_pin_7) {\n    lcd->_rs_pin = rs_pin;\n    lcd->_rw_pin = rw_pin;\n    lcd->_enable_pin = enable_pin;\n    lcd->_data_pins[0] = data_pin_0;\n    lcd->_data_pins[1] = data_pin_1;\n    lcd->_data_pins[2] = data_pin_2;\n    lcd->_data_pins[3] = data_pin_3;\n    lcd->_data_pins[4] = data_pin_4;\n    lcd->_data_pins[5] = data_pin_5;\n    lcd->_data_pins[6] = data_pin_6;\n    lcd->_data_pins[7] = data_pin_7;\n    if (four_bit_mode == 0) {\n        lcd->_display_function = 0x10;\n    }\n    else {\n        lcd->_display_function = 0;\n    }\n    begin(lcd, 0x10, 0x01, 0);\n    return;\n}",
            "called": [
                "begin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ba",
            "calling": [
                "LiquidCrystal"
            ],
            "imported": false,
            "current_name": "initializeLCD_080014ba"
        },
        "FUN_08003c90": {
            "renaming": {
                "FUN_08003c90": "configurePeriphClocks_08003c90",
                "RCC_PeriphCLKInitTypeDef_conflict": "RCC_PeriphCLKInitTypeDef",
                "PeriphClkInit": "periphClkInit",
                "iVar1": "index",
                "puVar2": "ptr",
                "uVar3": "startTick",
                "uVar4": "currentTick",
                "uVar5": "value",
                "bVar6": "isRtcClockEnabled",
                "tmpreg": "tempReg",
                "DAT_08003d98": "0x40021004",
                "DAT_08003d9c": "0x40021000",
                "DAT_08003da0": "0x40021008",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "HAL_TIMEOUT": "HAL_TIMEOUT"
            },
            "code": "HAL_StatusTypeDef configurePeriphClocks_08003c90(RCC_PeriphCLKInitTypeDef *PeriphClkInit)\n{\n    bool isRtcClockChanged = false;\n    uint32_t startTick;\n    uint32_t currentTick;\n    uint32_t *rccCfgrReg = (uint32_t *)DAT_08003d98;\n    uint32_t *rccCrReg = (uint32_t *)DAT_08003d9c;\n    uint32_t *rccCirReg = (uint32_t *)DAT_08003da0;\n    uint32_t *rccApb2enrReg = (uint32_t *)0x40021018;\n    uint32_t *rccCsrReg = (uint32_t *)0x40021024;\n\n    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) != 0)\n    {\n        if ((*rccCsrReg & RCC_CSR_RTCEN) == 0)\n        {\n            *rccCsrReg |= RCC_CSR_RTCEN;\n            startTick = HAL_GetTick();\n            while ((*rccCsrReg & RCC_CSR_RTCEN) == 0)\n            {\n                currentTick = HAL_GetTick();\n                if (currentTick - startTick > 100)\n                {\n                    return HAL_TIMEOUT;\n                }\n            }\n        }\n        if ((*rccCfgrReg & RCC_CFGR_RTCPRE) != (PeriphClkInit->RTCClockSelection & RCC_CFGR_RTCPRE))\n        {\n            isRtcClockChanged = true;\n            *rccApb2enrReg |= RCC_APB2ENR_RTCEN;\n            *rccCfgrReg &= ~RCC_CFGR_RTCPRE;\n            *rccCfgrReg |= PeriphClkInit->RTCClockSelection & RCC_CFGR_RTCPRE;\n            if ((*rccCfgrReg & RCC_CFGR_RTCPRE) != RCC_CFGR_RTCPRE)\n            {\n                startTick = HAL_GetTick();\n                while ((*rccCirReg & RCC_CIR_CSSF) == 0)\n                {\n                    currentTick = HAL_GetTick();\n                    if (currentTick - startTick > 5000)\n                    {\n                        return HAL_TIMEOUT;\n                    }\n                }\n            }\n        }\n    }\n    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) != 0)\n    {\n        *rccCfgrReg &= ~RCC_CFGR_ADCPRE;\n        *rccCfgrReg |= PeriphClkInit->AdcClockSelection & RCC_CFGR_ADCPRE;\n    }\n    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USB) != 0)\n    {\n        *rccCrReg |= RCC_CR_USBEN;\n        *rccCfgrReg &= ~RCC_CFGR_USBPRE;\n        *rccCfgrReg |= PeriphClkInit->UsbClockSelection & RCC_CFGR_USBPRE;\n    }\n    if (isRtcClockChanged)\n    {\n        *rccApb2enrReg &= ~RCC_APB2ENR_RTCEN;\n    }\n    return HAL_OK;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c90",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configurePeriphClocks_08003c90"
        },
        "FUN_08002514": {
            "renaming": {
                "FUN_08002514": "calculate_ticks_08002514",
                "TicksNumb": "ticks_number",
                "puVar1": "ticks_ptr"
            },
            "code": "uint32_t calculate_ticks_08002514(uint32_t ticks_number)\n{\n  undefined4 *ticks_ptr;\n  ticks_ptr = DAT_08002538;\n  if (ticks_number - 1 < 0x1000000) {\n    DAT_08002538[1] = ticks_number - 1;\n    *(undefined *)(DAT_0800253c + 0x23) = 0xf0;\n    ticks_ptr[2] = 0;\n    *ticks_ptr = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002514",
            "calling": [
                "SystemClock_Config",
                "HAL_InitTick"
            ],
            "imported": false,
            "current_name": "calculate_ticks_08002514"
        },
        "FUN_08005c1c": {
            "renaming": {
                "FUN_08005c1c": "create_IP_Address_08005c1c",
                "this": "ip_address",
                "first_octet": "octet_1",
                "second_octet": "octet_2",
                "third_octet": "octet_3",
                "fourth_octet": "octet_4",
                "super_Printable": "super",
                "_vptr_Printable": "_vptr",
                "_address": "address",
                "bytes": "byte_array"
            },
            "code": "typedef struct Printable Printable;\\\n\\\ntypedef struct {\\\n\\\n    Printable super;\\\n\\\n    struct {\\\n\\\n        uint8_t bytes[4];\\\n\\\n    } _address;\\\n\\\n} IP_Address;\\\n\\\n\\\nIP_Address * create_IP_Address_08005c1c(IP_Address * this, uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)\\\n\\\n{\\\n\\\n    this->super._vptr = (void **)PTR_DAT_08005c34;\\\n\\\n    this->_address.bytes[0] = first_octet;\\\n\\\n    this->_address.bytes[1] = second_octet;\\\n\\\n    this->_address.bytes[2] = third_octet;\\\n\\\n    this->_address.bytes[3] = fourth_octet;\\\n\\\n    return this;\\\n\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c1c",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "create_IP_Address_08005c1c"
        },
        "FUN_08006dc8": {
            "renaming": {
                "FUN_08006dc8": "check_file_permissions_08006dc8",
                "param_1": "file_descriptor",
                "param_2": "file_info_pointer",
                "param_3": "output_status",
                "param_4": "output_permissions",
                "iVar1": "file_status",
                "uVar2": "permissions",
                "auStack_4c": "file_status_buffer",
                "local_48": "file_mode"
            },
            "code": "int check_file_permissions_08006dc8(int file_descriptor, int file_info_pointer, int *output_status, uint *output_permissions) {\n  int file_status;\n  uint permissions;\n  if (*(short *)(file_info_pointer + 0xe) < 0 || _fstat_r(file_descriptor, (int)*(short *)(file_info_pointer + 0xe), &file_status) < 0) {\n    *output_permissions = 0;\n    if ((int)((uint)*(ushort *)(file_info_pointer + 0xc) << 0x18) < 0) {\n      permissions = 0x40;\n      goto LAB_08006e08;\n    }\n  } else {\n    *output_permissions = (uint)((file_status & 0xf000) == 0x2000);\n  }\n  permissions = 0x400;\n  LAB_08006e08:\n  *output_status = permissions;\n  return 0;\n}",
            "called": [
                "_fstat_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dc8",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_file_permissions_08006dc8"
        },
        "FUN_0800412c": {
            "renaming": {
                "FUN_0800412c": "disable_tim_channel_0800412c",
                "*htim": "*tim_handle",
                "Channel": "channel",
                "pTVar1": "tim_instance"
            },
            "code": "HAL_StatusTypeDef_conflict disable_tim_channel_0800412c(TIM_HandleTypeDef *tim_handle, uint32_t channel)\\n\\\n{\\n\\\n  TIM_TypeDef *tim_instance = tim_handle->Instance;\\n\\\n  TIM_CCxNChannelCmd(tim_instance, channel, 0);\\n\\\n  if (((tim_instance->CCER & 0x1111) == 0) && ((tim_instance->CCER & 0x444) == 0)) {\\n\\\n    tim_instance->BDTR &= 0xffff7fff;\\n\\\n  }\\n\\\n  if (((tim_instance->CCER & 0x1111) == 0) && ((tim_instance->CCER & 0x444) == 0)) {\\n\\\n    tim_instance->CR1 &= 0xfffffffe;\\n\\\n  }\\n\\\n  return HAL_OK;\\n\\\n}",
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800412c",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "disable_tim_channel_0800412c"
        },
        "FUN_08007090": {
            "renaming": {
                "std::FUN_08007090": "abort_program",
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "FUN_08007090": "abort_program_08007090"
            },
            "code": "void abort_program_08007090(void)\n{\n    abort();\n}\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007090",
            "calling": [
                "operator()"
            ],
            "imported": false,
            "current_name": "abort_program_08007090"
        },
        "FUN_0800492c": {
            "renaming": {
                "FUN_0800492c": "getADCChannelFromPin_0800492c",
                "pin": "pinName",
                "uVar1": "channelNumber",
                "PTR_PinMap_ADC_08004944": "pinMap"
            },
            "code": "uint32_t getADCChannelFromPin_0800492c(PinName_conflict pin)\n{\n  uint32_t channelNumber = pinmap_function(pin, (PinMap_conflict *)PTR_PinMap_ADC_08004944);\n  channelNumber = (channelNumber << 12) >> 27;\n  if (channelNumber > 15) {\n    channelNumber = 0;\n  }\n  return channelNumber;\n}",
            "called": [
                "pinmap_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800492c",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "getADCChannelFromPin_0800492c"
        },
        "FUN_08000cbc": {
            "renaming": {
                "FUN_08000cbc": "initialize_static_variables_08000cbc"
            },
            "code": "void initialize_static_variables_08000cbc(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000cbc",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_08000cbc"
        },
        "FUN_0800480a": {
            "renaming": {
                "FUN_0800480a": "set_pin_value_0800480a",
                "pin": "pin_name",
                "map": "pin_map",
                "uVar1": "pin_index"
            },
            "code": "void set_pin_value_0800480a(PinName_conflict pin, uint32_t *pin_map) {\n  uint32_t pin_index = (uint32_t)((int)pin << 24) >> 28;\n  pin_map[pin_index] |= 1 << ((int)pin & 0xF);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800480a",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "set_pin_value_0800480a"
        },
        "FUN_080015f8": {
            "renaming": {
                "MAX31855::FUN_080015f8": "getTemperature",
                "this": "sensor",
                "unit": "unit",
                "uVar1": "rawData",
                "uVar2": "temperatureData",
                "uVar4": "temperatureDataFloat",
                "uVar5": "tempConversion",
                "extraout_d0": "notUsed",
                "extraout_d0_00": "notUsed",
                "dVar3": "temperature",
                "FUN_080015f8": "getTemperature_080015f8"
            },
            "code": "double __thiscall getTemperature_080015f8(MAX31855 *sensor, unit_t unit) {\n  ulong rawData = readData(sensor);\n  if ((rawData & 0x10000) != 0) {\n    uint faultCode = rawData & 7;\n    if (faultCode == 2 || faultCode == 4) {\n      return 0.0;\n    }\n    return NAN;\n  }\n  uint16_t temperatureData = (rawData >> 0x12) & 0x1fff;\n  double temperature = temperatureData * 0.25;\n  if ((rawData & 0x2000) != 0) {\n    temperature *= -1.0;\n  }\n  if (unit == FAHRENHEIT) {\n    temperature = temperature * 1.8 + 32.0;\n  }\n  return temperature;\n}",
            "called": [
                "readData",
                "__aeabi_dadd",
                "__muldf3",
                "__divdf3",
                "__floatunsidf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015f8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "getTemperature_080015f8"
        },
        "FUN_08005c38": {
            "renaming": {
                "FUN_08005c38": "initializePriority_08005c38",
                "__initialize_p": "is_initialized",
                "__priority": "priority_level"
            },
            "code": "void initializePriority_08005c38(int is_initialized, int priority_level) {\n  if (is_initialized == 1 && priority_level == 0xffff) {\n    IPAddress::IPAddress((IPAddress *)PTR_INADDR_NONE_08005c60, '\\0', '\\0', '\\0', '\\0');\n    return;\n  }\n  return;\n}",
            "called": [
                "IPAddress"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c38",
            "calling": [
                "_GLOBAL__sub_I__ZN9IPAddressC2Ev"
            ],
            "imported": false,
            "current_name": "initializePriority_08005c38"
        },
        "FUN_08005f8c": {
            "renaming": {
                "FUN_08005f8c": "count_bits_set_08005f8c",
                "pin": "input",
                "uVar1": "mask",
                "uVar2": "count"
            },
            "code": "uint8_t count_bits_set_08005f8c(uint16_t input)\n{\n  uint16_t mask = 0x1;\n  uint8_t count = 0;\n  while (input > 0) {\n    if (input & mask) {\n      count++;\n    }\n    input >>= 1;\n  }\n  return count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f8c",
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "imported": false,
            "current_name": "count_bits_set_08005f8c"
        },
        "FUN_08006f5a": {
            "renaming": {
                "FUN_08006f5a": "write_to_file_if_offset_positive_08006f5a",
                "param_1": "file_descriptor",
                "param_2": "offset",
                "param_3": "buffer",
                "param_4": "size",
                "PTR_": "",
                "DAT_": "",
                "*(ushort *)(param_2 + 0xc)": "*offset_ptr",
                "*(ushort *)(param_2 + 0xe)": "*(short *)(offset + 0xe)"
            },
            "code": "void write_to_file_if_offset_positive_08006f5a(int file_descriptor, int offset, void* buffer, uint32_t size) {\n  uint16_t* offset_ptr = (uint16_t*)(offset + 0xc);\n  uint32_t shifted_offset = (uint32_t)(*offset_ptr) << 0x17;\n  if ((int)shifted_offset < 0) {\n    _lseek_r(file_descriptor, (int)*(short *)(offset + 0xe), 0, 2);\n  }\n  *offset_ptr &= 0xefff;\n  _write_r(file_descriptor, (int)*(short *)(offset + 0xe), buffer, size);\n  return;\n}",
            "called": [
                "_lseek_r",
                "_write_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f5a",
            "calling": [],
            "imported": false,
            "current_name": "write_to_file_if_offset_positive_08006f5a"
        },
        "FUN_08000b08": {
            "renaming": {
                "FUN_08000b08": "initializeReflowOven_08000b08",
                "__initialize_p": "shouldInitialize",
                "__priority": "priorityLevel",
                "PID::PID": "PID pidController",
                "PTR_reflowOvenPID_08000b9c": "PID_reflowOven",
                "PTR_input_08000b98": "input_reflowOven",
                "PTR_output_08000b94": "output_reflowOven",
                "PTR_setpoint_08000b90": "setpoint_reflowOven",
                "*(double *)PTR_kp_08000b8c": "*kp_reflowOven",
                "*(double *)PTR_ki_08000b88": "*ki_reflowOven",
                "*(double *)PTR_kd_08000b84": "*kd_reflowOven",
                "LiquidCrystal::LiquidCrystal": "LiquidCrystal lcd",
                "PTR_lcd_08000bb8": "PTR_lcd_08000bb8",
                "*PTR_lcdRsPin_08000ba0": "*lcdRsPin_08000ba0",
                "*PTR_lcdEPin_08000ba4": "*lcdEPin_08000ba4",
                "*PTR_lcdD4Pin_08000ba8": "*lcdD4Pin_08000ba8",
                "*PTR_lcdD5Pin_08000bac": "*lcdD5Pin_08000bac",
                "*PTR_lcdD6Pin_08000bb0": "*lcdD6Pin_08000bb0",
                "*PTR_lcdD7Pin_08000bb4": "*lcdD7Pin_08000bb4",
                "MAX31855::MAX31855": "MAX31855 thermocouple",
                "PTR_thermocouple_08000bc8": "PTR_thermocouple_08000bc8",
                "*PTR_thermocoupleSOPin_08000bc4": "*thermocoupleSOPin_08000bc4",
                "*PTR_thermocoupleCSPin_08000bc0": "*thermocoupleCSPin_08000bc0",
                "*PTR_thermocoupleCLKPin_08000bbc": "*thermocoupleCLKPin_08000bbc"
            },
            "code": "void initializeReflowOven_08000b08(int shouldInitialize, int priorityLevel)\n{\n  if (shouldInitialize && priorityLevel == 0xffff) {\n    PID pidController(PTR_reflowOvenPID_08000b9c, PTR_input_08000b98, PTR_output_08000b94, PTR_setpoint_08000b90, *(double *)PTR_kp_08000b8c, *(double *)PTR_ki_08000b88, *(double *)PTR_kd_08000b84, 0);\n    LiquidCrystal lcd(PTR_lcd_08000bb8, *PTR_lcdRsPin_08000ba0, *PTR_lcdEPin_08000ba4, *PTR_lcdD4Pin_08000ba8, *PTR_lcdD5Pin_08000bac, *PTR_lcdD6Pin_08000bb0, *PTR_lcdD7Pin_08000bb4);\n    MAX31855 thermocouple(PTR_thermocouple_08000bc8, *PTR_thermocoupleSOPin_08000bc4, *PTR_thermocoupleCSPin_08000bc0, *PTR_thermocoupleCLKPin_08000bbc);\n    return;\n  }\n  return;\n}",
            "called": [
                "MAX31855",
                "LiquidCrystal",
                "PID"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b08",
            "calling": [
                "_GLOBAL__sub_I_lcdMessagesReflowStatus"
            ],
            "imported": false,
            "current_name": "initializeReflowOven_08000b08"
        },
        "FUN_08006cb4": {
            "renaming": {
                "FUN_08006cb4": "initialize_data_08006cb4",
                "param_1": "data_address",
                "PTR__global_impure_ptr_08006d0c": "GLOBAL_IMPURE_PTR",
                "DAT_08006d10": "GLOBAL_CONST_VALUE",
                "uVar1": "sfp_val",
                "iVar2": "global_impure_ptr_value",
                "bVar3": "is_current_data",
                "*(undefined4 *)(param_1 + 0x18)": "*(int *)(data_address + DATA_FLAG_OFFSET)",
                "*(undefined4 *)(param_1 + 0x48)": "*(int *)(data_address + DATA_FIELD_1_OFFSET)",
                "*(undefined4 *)(param_1 + 0x4c)": "*(int *)(data_address + DATA_FIELD_2_OFFSET)",
                "*(undefined4 *)(param_1 + 0x50)": "*(int *)(data_address + DATA_FIELD_3_OFFSET)",
                "*(undefined4 *)(param_1 + 0x28)": "*(int *)(data_address + DATA_FIELD_4_OFFSET)",
                "*(undefined4 *)(param_1 + 4)": "*(int *)(data_address + DATA_FIELD_5_OFFSET)",
                "*(undefined4 *)(param_1 + 8)": "*(int *)(data_address + DATA_FIELD_6_OFFSET)",
                "*(undefined4 *)(param_1 + 0xc)": "*(int *)(data_address + DATA_FIELD_7_OFFSET)"
            },
            "code": "void initialize_data_08006cb4(int data_address)\n{\n  if (*(int *)(data_address + DATA_FLAG_OFFSET) == 0) {\n    *(int *)(data_address + DATA_FIELD_1_OFFSET) = 0;\n    *(int *)(data_address + DATA_FIELD_2_OFFSET) = 0;\n    *(int *)(data_address + DATA_FIELD_3_OFFSET) = 0;\n    int global_impure_ptr_value = *(int *)PTR__global_impure_ptr_08006d0c;\n    *(int *)(data_address + DATA_FIELD_4_OFFSET) = DAT_08006d10;\n    bool is_current_data = data_address == global_impure_ptr_value;\n    if (is_current_data) {\n      global_impure_ptr_value = 1;\n    }\n    if (is_current_data) {\n      *(int *)(data_address + DATA_FLAG_OFFSET) = global_impure_ptr_value;\n    }\n    int sfp_val = __sfp();\n    *(int *)(data_address + DATA_FIELD_5_OFFSET) = sfp_val;\n    sfp_val = __sfp(data_address);\n    *(int *)(data_address + DATA_FIELD_6_OFFSET) = sfp_val;\n    sfp_val = __sfp(data_address);\n    *(int *)(data_address + DATA_FIELD_7_OFFSET) = sfp_val;\n    std_isra_0(*(int *)(data_address + DATA_FIELD_5_OFFSET),4,0);\n    std_isra_0(*(int *)(data_address + DATA_FIELD_6_OFFSET),9,1);\n    std_isra_0(*(int *)(data_address + DATA_FIELD_7_OFFSET),0x12,2);\n    *(int *)(data_address + DATA_FLAG_OFFSET) = 1;\n  }\n  return;\n}",
            "called": [
                "__sfp",
                "std.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006cb4",
            "calling": [
                "__sfp",
                "__swbuf_r",
                "_fflush_r",
                "__swsetup_r",
                "_vfiprintf_r",
                "iprintf"
            ],
            "imported": false,
            "current_name": "initialize_data_08006cb4"
        },
        "FUN_08004c5e": {
            "renaming": {
                "FUN_08004c5e": "find_peripheral_by_pin_08004c5e",
                "pin": "target_pin",
                "map": "pin_map",
                "NC": "NoConnection",
                "peripheral": "peripheral_device"
            },
            "code": "void * find_peripheral_by_pin_08004c5e(PinName_conflict pin, PinMap_conflict *pin_map) {\n  while (true) {\n    if (pin_map->pin == NC) {\n      return (void *)0x0;\n    }\n    if (pin_map->pin == pin) {\n      break;\n    }\n    pin_map++;\n  }\n  return pin_map->peripheral;\n}",
            "called": [
                "pinmap_find_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c5e",
            "calling": [
                "pinmap_peripheral",
                "pinmap_find_peripheral"
            ],
            "imported": false,
            "current_name": "find_peripheral_by_pin_08004c5e"
        },
        "FUN_08007098": {
            "renaming": {
                "std::ctype_byname<char>::FUN_08007098": "set_ptr_values_to_one",
                "FUN_08007098": "set_ptr_values_to_one_08007098"
            },
            "code": "void set_ptr_values_to_one_08007098(void)\n{\n    if (*(int *)PTR_id_0800712c < 0) {\n        *(undefined4 *)PTR_id_0800712c = 1;\n    }\n    if (*(int *)PTR_id_08007130 < 0) {\n        *(undefined4 *)PTR_id_08007130 = 1;\n    }\n    if (*(int *)PTR_id_08007134 < 0) {\n        *(undefined4 *)PTR_id_08007134 = 1;\n    }\n    if (*(int *)PTR_id_08007138 < 0) {\n        *(undefined4 *)PTR_id_08007138 = 1;\n    }\n    if (*(int *)PTR_id_0800713c < 0) {\n        *(undefined4 *)PTR_id_0800713c = 1;\n    }\n    if (*(int *)PTR_id_08007140 < 0) {\n        *(undefined4 *)PTR_id_08007140 = 1;\n    }\n    if (*(int *)PTR_id_08007144 < 0) {\n        *(undefined4 *)PTR_id_08007144 = 1;\n    }\n    if (*(int *)PTR_id_08007148 < 0) {\n        *(undefined4 *)PTR_id_08007148 = 1;\n    }\n    if (*(int *)PTR_id_0800714c < 0) {\n        *(undefined4 *)PTR_id_0800714c = 1;\n    }\n    if (*(int *)PTR_id_08007150 < 0) {\n        *(undefined4 *)PTR_id_08007150 = 1;\n    }\n    if (*(int *)PTR_id_08007154 < 0) {\n        *(undefined4 *)PTR_id_08007154 = 1;\n    }\n    if (*(int *)PTR_id_08007158 < 0) {\n        *(undefined4 *)PTR_id_08007158 = 1;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007098",
            "calling": [],
            "imported": false,
            "current_name": "set_ptr_values_to_one_08007098"
        },
        "FUN_08004b3c": {
            "renaming": {
                "FUN_08004b3c": "stop_pwm_signal_08004b3c",
                "pin": "pin_name",
                "Channel": "channel",
                "uVar1": "function",
                "timHandle": "tim_handle",
                "PTR_PinMap_PWM_08004b90": "pin_map"
            },
            "code": "void stop_pwm_signal_08004b3c(PinName_conflict pin)\n{\n  uint32_t channel;\n  uint32_t function;\n  TIM_HandleTypeDef tim_handle;\n  tim_handle.Instance = (TIM_TypeDef *)pinmap_peripheral(pin, (PinMap_conflict *)PTR_PinMap_PWM_08004b90);\n  if ((tim_handle.Instance != (TIM_TypeDef *)0x0) && ((((channel = get_pwm_channel(pin), channel == 0 || (channel == 4)) || (channel == 8)) || ((channel == 0xc || (channel == 0x18)))))) {\n    function = pinmap_function(pin, (PinMap_conflict *)PTR_PinMap_PWM_08004b90);\n    if ((function & 0x100000) == 0) {\n      HAL_TIM_PWM_Stop(&tim_handle, channel);\n    }\n    else {\n      HAL_TIMEx_PWMN_Stop(&tim_handle, channel);\n    }\n    HAL_TIM_PWM_DeInit(&tim_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIMEx_PWMN_Stop",
                "HAL_TIM_PWM_Stop",
                "pinmap_peripheral",
                "pinmap_function",
                "HAL_TIM_PWM_DeInit",
                "get_pwm_channel"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b3c",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "stop_pwm_signal_08004b3c"
        },
        "FUN_08001550": {
            "renaming": {
                "FUN_08001550": "sendLocationAndCharMapToLiquidCrystal_08001550",
                "this": "liquidCrystal",
                "location": "location",
                "charmap": "charmap",
                "iVar1": "index",
                "send": "send",
                "byte": "byte",
                "super_Print": "super_Print",
                "_vptr_Print": "_vptr_Print",
                "uint": "uint"
            },
            "code": "void __thiscall sendLocationAndCharMapToLiquidCrystal_08001550(LiquidCrystal *liquidCrystal, uint8_t location, uint8_t *charmap) {\n\tint index;\n\tsend(liquidCrystal, (byte)((location & 7) << 3) | 0x40, '\\0');\n\tfor (index = 0; index < 8; index = index + 1) {\n\t\t(**(liquidCrystal->super_Print)._vptr_Print)(liquidCrystal, (uint)charmap[index]);\n\t}\n\treturn;\n}",
            "called": [
                "send"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001550",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "sendLocationAndCharMapToLiquidCrystal_08001550"
        },
        "FUN_08000cd0": {
            "renaming": {
                "FUN_08000cd0": "FUNC_08000cd0"
            },
            "code": "\nvoid FUNC_08000cd0(void)\n\n{\n  char cVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  uint32_t uVar4;\n  undefined *puVar5;\n  int iVar6;\n  undefined4 extraout_r1;\n  uint uVar7;\n  int digits;\n  int digits_00;\n  int digits_01;\n  undefined8 uVar8;\n  undefined4 in_stack_ffffffe4;\n  \n  uVar4 = millis();\n  if (*(uint *)PTR_nextRead_08000f50 < uVar4) {\n    *(uint *)PTR_nextRead_08000f50 = *(uint *)PTR_nextRead_08000f50 + 1000;\n    puVar5 = PTR_thermocouple_08000f74;\n    MAX31855::readThermocouple((MAX31855 *)PTR_thermocouple_08000f74,CELSIUS);\n    puVar2 = PTR_input_08000f6c;\n    *(undefined **)PTR_input_08000f6c = puVar5;\n    *(undefined4 *)(puVar2 + 4) = extraout_r1;\n    iVar6 = __aeabi_dcmpeq();\n    if (((iVar6 != 0) ||\n        (iVar6 = __aeabi_dcmpeq(puVar5,extraout_r1,DAT_08000f20,DAT_08000f24), iVar6 != 0)) ||\n       (iVar6 = __aeabi_dcmpeq(puVar5,extraout_r1,DAT_08000f28,DAT_08000f2c), iVar6 != 0)) {\n      *PTR_reflowState_08000f64 = 7;\n      *PTR_reflowStatus_08000f58 = 0;\n    }\n  }\n  uVar4 = millis();\n  if (*(uint *)PTR_nextCheck_08000f54 < uVar4) {\n    *(uint *)PTR_nextCheck_08000f54 = *(uint *)PTR_nextCheck_08000f54 + 1000;\n    if (*PTR_reflowStatus_08000f58 == '\\x01') {\n      uVar4 = *(uint32_t *)PTR_ledRedPin_08000f5c;\n      iVar6 = digitalRead(uVar4);\n      uVar7 = count_leading_zeroes(iVar6);\n      digitalWrite(uVar4,uVar7 >> 5);\n      iVar6 = *(int *)PTR_timerSeconds_08000f78;\n      *(int *)PTR_timerSeconds_08000f78 = iVar6 + 1;\n      puVar2 = PTR_Serial2_08000f7c;\n      Print::print((Print *)PTR_Serial2_08000f7c,iVar6 + 1,10);\n      puVar5 = PTR_DAT_08000f80;\n      Print::print((Print *)puVar2,PTR_DAT_08000f80);\n      Print::print((Print *)puVar2,(double)CONCAT44(in_stack_ffffffe4,2),digits);\n      Print::print((Print *)puVar2,puVar5);\n      Print::print((Print *)puVar2,(double)CONCAT44(in_stack_ffffffe4,2),digits_00);\n      Print::print((Print *)puVar2,puVar5);\n      Print::println((Print *)puVar2,(double)CONCAT44(in_stack_ffffffe4,2),digits_01);\n    }\n    else {\n      digitalWrite(*(uint32_t *)PTR_ledRedPin_08000f5c,1);\n    }\n    puVar2 = PTR_lcd_08000f60;\n    LiquidCrystal::clear((LiquidCrystal *)PTR_lcd_08000f60);\n    puVar3 = PTR_reflowState_08000f64;\n    Print::print((Print *)puVar2,\n                 *(char **)(PTR_lcdMessagesReflowStatus_08000f68 +\n                           (uint)(byte)*PTR_reflowState_08000f64 * 4));\n    LiquidCrystal::setCursor((LiquidCrystal *)puVar2,'\\0','\\x01');\n    puVar5 = PTR_lcd_08000f60;\n    if (*puVar3 == '\\a') {\n      Print::print((Print *)puVar2,PTR_s_TC_Error__08000f8c);\n    }\n    else {\n      Print::print((Print *)PTR_lcd_08000f60,(double)CONCAT44(in_stack_ffffffe4,2),2);\n      LiquidCrystal::write((LiquidCrystal *)puVar5,'\\0');\n      Print::print((Print *)puVar5,PTR_DAT_08000f70);\n    }\n  }\n  if ((byte)*PTR_reflowState_08000f64 < 8) {\n                    /* WARNING: Could not recover jumptable at 0x08000d5c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_08000d5c::switchdataD_08000d60 +\n              (&switchD_08000d5c::switchdataD_08000d60)[(byte)*PTR_reflowState_08000f64]))();\n    return;\n  }\n  if ((*PTR_switchStatus_08001274 == '\\x01') && (*PTR_reflowStatus_0800126c == '\\x01')) {\n    *PTR_reflowStatus_0800126c = 0;\n    *PTR_reflowState_08001258 = 0;\n  }\n  cVar1 = *PTR_debounceState_08001278;\n  if (cVar1 == '\\x01') {\n    uVar4 = analogRead(*(uint32_t *)PTR_switchPin_08001280);\n    if (uVar4 == 0) {\n      uVar4 = millis();\n      if (0x32 < uVar4 - *(int *)PTR_lastDebounceTime_08001284) {\n        *PTR_debounceState_08001278 = 2;\n      }\n    }\n    else {\n      *PTR_debounceState_08001278 = 0;\n    }\n  }\n  else if (cVar1 == '\\0') {\n    *PTR_switchStatus_08001274 = 0;\n    uVar4 = analogRead(*(uint32_t *)PTR_switchPin_08001280);\n    if (uVar4 == 0) {\n      uVar4 = millis();\n      *(uint32_t *)PTR_lastDebounceTime_08001284 = uVar4;\n      *PTR_debounceState_08001278 = 1;\n    }\n  }\n  else if ((cVar1 == '\\x02') &&\n          (uVar4 = analogRead(*(uint32_t *)PTR_switchPin_08001280), uVar4 != 0)) {\n    *PTR_switchStatus_08001274 = 1;\n    *PTR_debounceState_08001278 = 0;\n  }\n  if (*PTR_reflowStatus_0800126c == '\\x01') {\n    uVar4 = millis();\n    PID::Compute((PID *)PTR_reflowOvenPID_08001250);\n    if (*(uint *)PTR_windowSize_0800128c < uVar4 - *(int *)PTR_windowStartTime_08001288) {\n      *(uint *)PTR_windowStartTime_08001288 =\n           *(int *)PTR_windowStartTime_08001288 + *(uint *)PTR_windowSize_0800128c;\n    }\n    uVar8 = __floatunsidf(uVar4 - *(int *)PTR_windowStartTime_08001288);\n    iVar6 = __aeabi_dcmplt((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),\n                           *(undefined4 *)PTR_output_08001290,\n                           *(undefined4 *)(PTR_output_08001290 + 4));\n    if (iVar6 == 0) {\n      digitalWrite(*(uint32_t *)PTR_ssrPin_0800127c,0);\n    }\n    else {\n      digitalWrite(*(uint32_t *)PTR_ssrPin_0800127c,1);\n    }\n  }\n  else {\n    digitalWrite(*(uint32_t *)PTR_ssrPin_0800127c,0);\n  }\n  return;\n}\n\n",
            "called": [
                "print",
                "__aeabi_dadd",
                "millis",
                "print",
                "SetMode",
                "__aeabi_dcmpeq",
                "__aeabi_dcmpge",
                "__aeabi_dcmplt",
                "setCursor",
                "analogRead",
                "digitalRead",
                "println",
                "SetTunings",
                "__aeabi_dcmpgt",
                "__aeabi_dcmple",
                "println",
                "write",
                "SetSampleTime",
                "__floatsidf",
                "digitalWrite",
                "SetOutputLimits",
                "Compute",
                "clear",
                "print",
                "readThermocouple",
                "__floatunsidf"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cd0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUNC_08000cd0"
        },
        "FUN_08001310": {
            "renaming": {
                "FUN_08001310": "displayData_08001310",
                "this": "lcd",
                "value": "data",
                "mode": "mode"
            },
            "code": "void __thiscall LiquidCrystal::displayData_08001310(LiquidCrystal *lcd,uint8_t data,uint8_t mode) {\n  digitalWrite((uint)lcd->_rs_pin,(uint)mode);\n  if (lcd->_rw_pin != 0xff) {\n    digitalWrite((uint)lcd->_rw_pin,0);\n  }\n  if ((lcd->_displayfunction & 0x10) == 0) {\n    write4bits(lcd,data >> 4);\n    write4bits(lcd,data);\n    return;\n  }\n  write8bits(lcd,data);\n  return;\n}",
            "called": [
                "write4bits",
                "digitalWrite",
                "write8bits"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001310",
            "calling": [
                "clear",
                "createChar",
                "write",
                "display",
                "begin",
                "setCursor"
            ],
            "imported": false,
            "current_name": "displayData_08001310"
        },
        "FUN_080009a8": {
            "renaming": {
                "FUN_080009a8": "compare_double_values_080009a8",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "result1",
                "param_4": "result2"
            },
            "code": "void compare_double_values_080009a8(double value1, double value2, double result1, double result2)\n{\n  __aeabi_cdcmpeq(value1, value2, result1, result2);\n  return;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009a8",
            "calling": [
                "__aeabi_dcmpge",
                "__aeabi_dcmpgt"
            ],
            "imported": false,
            "current_name": "compare_double_values_080009a8"
        },
        "FUN_08004d90": {
            "renaming": {
                "FUN_08004d90": "disable_timer_interrupts_08004d90",
                "htim": "timer_handle",
                "DAT_08004de4": "TIM2",
                "DAT_08004de8": "TIM3",
                "DAT_08004dec": "TIM4",
                "DAT_08004df0": "TIM5_BASE",
                "uint": "uint32_t",
                "Instance": "timer_instance",
                "*(uint *)(DAT_08004df0 + 0x18)": "*control_reg",
                "*(uint *)(DAT_08004df0 + 0x1c)": "*control_reg"
            },
            "code": "void disable_timer_interrupts_08004d90(TIM_HandleTypeDef *timer_handle)\n{\n  if (timer_handle->Instance == DAT_08004de4) {\n    uint32_t *(uint *)(DAT_08004df0 + 0x18) = (uint32_t *)(DAT_08004de4_BASE + 0x18);\n    *(uint *)(DAT_08004df0 + 0x18) &= ~(1 << 11);\n  }\n  if (timer_handle->Instance == DAT_08004de8) {\n    uint32_t *(uint *)(DAT_08004df0 + 0x18) = (uint32_t *)(DAT_08004de8_BASE + 0x1C);\n    *(uint *)(DAT_08004df0 + 0x18) &= ~(1 << 0);\n  }\n  if (timer_handle->Instance == DAT_08004dec) {\n    uint32_t *(uint *)(DAT_08004df0 + 0x18) = (uint32_t *)(DAT_08004dec_BASE + 0x1C);\n    *(uint *)(DAT_08004df0 + 0x18) &= ~(1 << 1);\n  }\n  if (timer_handle->Instance == TIM5) {\n    uint32_t *(uint *)(DAT_08004df0 + 0x18) = (uint32_t *)(DAT_08004df0 + 0x1C);\n    *(uint *)(DAT_08004df0 + 0x18) &= ~(1 << 2);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d90",
            "calling": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "imported": false,
            "current_name": "disable_timer_interrupts_08004d90"
        },
        "FUN_08005ce8": {
            "renaming": {
                "__thiscall Print::FUN_08005ce8": "print_ulong",
                "this": "this",
                "n": "number",
                "base": "base",
                "cVar1": "digit",
                "sVar2": "length",
                "sVar3": "total_length",
                "uVar4": "remainder",
                "uVar5": "base_uint",
                "uVar6": "quotient",
                "__s": "current_char",
                "buf": "buffer",
                "FUN_08005ce8": "print_ulong_08005ce8"
            },
            "code": "size_t __thiscall Print::print_ulong_08005ce8(Print *this, ulong number, uint8_t base) {\n    char digit;\n    size_t length;\n    size_t total_length;\n    uint base_uint = (uint) base;\n    char buffer[33];\n    buffer[32] = '\\0';\n    if (base_uint < 2) {\n        base_uint = 10;\n    }\n    char *current_char = buffer + 0x20;\n    do {\n        uint quotient = number / base_uint;\n        uint remainder = (number & 0xff) - (quotient * base_uint & 0xff) & 0xff;\n        current_char--;\n        if (remainder < 10) {\n            digit = remainder + '0';\n        }\n        else {\n            digit = remainder + '7';\n        }\n        *current_char = digit;\n        number = quotient;\n    } while (number != 0);\n    if (current_char == (char*)0x0) {\n        total_length = 0;\n    }\n    else {\n        length = strlen(current_char);\n        total_length = (*this->_vptr_Print[1])(length, current_char, length);\n    }\n    return total_length;\n}",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005ce8",
            "calling": [
                "print",
                "print"
            ],
            "imported": false,
            "current_name": "print_ulong_08005ce8"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "i2c_handle_0800316c",
                "*hi2c": "*handle",
                "HVar1": "status",
                "*puVar2": "*buffer",
                "*pIVar3": "*instance",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "DAT_080032ac": "i2c_data_abort",
                "DAT_080032b0": "i2c_data_options"
            },
            "code": "void i2c_handle_0800316c(I2C_HandleTypeDef *handle)\n{\n  HAL_StatusTypeDef status;\n  uint8_t *buffer;\n  I2C_TypeDef *instance;\n  if ((byte)handle->State - 0x29 < 2) {\n    handle->PreviousState = 0;\n    handle->State = HAL_I2C_STATE_LISTEN;\n  }\n  else {\n    if ((handle->State != HAL_I2C_STATE_ABORT) && ((handle->Instance->CR2 & 0x800) == 0)) {\n      handle->State = HAL_I2C_STATE_READY;\n    }\n    handle->PreviousState = 0;\n    handle->Mode = HAL_I2C_MODE_NONE;\n  }\n  handle->Instance->CR1 &= 0xfffff7ff;\n  instance = handle->Instance;\n  if ((instance->CR2 & 0x800) == 0) {\n    if (handle->State == HAL_I2C_STATE_ABORT) {\n      handle->State = HAL_I2C_STATE_READY;\n      handle->ErrorCode = 0;\n      if ((instance->SR1 & 0x40) != 0) {\n        buffer = handle->pBuffPtr;\n        handle->pBuffPtr = buffer + 1;\n        *buffer = (uint8_t)instance->DR;\n      }\n      handle->Instance->CR1 &= 0xfffffffe;\n      HAL_I2C_AbortCpltCallback(handle);\n    }\n    else {\n      if ((instance->SR1 & 0x40) != 0) {\n        buffer = handle->pBuffPtr;\n        handle->pBuffPtr = buffer + 1;\n        *buffer = (uint8_t)instance->DR;\n      }\n      HAL_I2C_ErrorCallback(handle);\n    }\n  }\n  else {\n    instance->CR2 &= 0xfffff7ff;\n    if (handle->hdmatx->State == HAL_DMA_STATE_READY) {\n      handle->hdmarx->XferAbortCallback = DAT_080032ac;\n      status = HAL_DMA_Abort_IT(handle->hdmarx);\n      if (status != HAL_OK) {\n        if ((handle->Instance->SR1 & 0x40) != 0) {\n          buffer = handle->pBuffPtr;\n          handle->pBuffPtr = buffer + 1;\n          *buffer = (uint8_t)handle->Instance->DR;\n        }\n        handle->Instance->CR1 &= 0xfffffffe;\n        handle->State = HAL_I2C_STATE_READY;\n        (*handle->hdmarx->XferAbortCallback)(handle->hdmarx);\n      }\n    }\n    else {\n      handle->hdmatx->XferAbortCallback = DAT_080032ac;\n      status = HAL_DMA_Abort_IT(handle->hdmatx);\n      if (status != HAL_OK) {\n        handle->Instance->CR1 &= 0xfffffffe;\n        handle->State = HAL_I2C_STATE_READY;\n        (*handle->hdmatx->XferAbortCallback)(handle->hdmatx);\n      }\n    }\n  }\n  if ((handle->State == HAL_I2C_STATE_LISTEN) && ((handle->ErrorCode & 4) != 0)) {\n    handle->XferOptions = DAT_080032b0;\n    handle->PreviousState = 0;\n    handle->State = HAL_I2C_STATE_READY;\n    handle->Mode = HAL_I2C_MODE_NONE;\n    HAL_I2C_ListenCpltCallback(handle);\n  }\n  return;\n}",
            "called": [
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ErrorCallback",
                "HAL_DMA_Abort_IT",
                "HAL_I2C_ListenCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "HAL_I2C_ER_IRQHandler",
                "I2C_Slave_STOPF"
            ],
            "imported": false,
            "current_name": "i2c_handle_0800316c"
        },
        "FUN_08004828": {
            "renaming": {
                "FUN_08004828": "updatePinMap_08004828",
                "pin": "pinName",
                "map": "pinMap",
                "uVar1": "pinIndex",
                "mask": "mask"
            },
            "code": "void updatePinMap_08004828(PinName_conflict pin, uint32_t *pinMap) {\n  uint32_t pinIndex = (uint32_t)(((int)pin << 24) >> 28);\n  uint32_t mask = ~(1 << ((int)pin & 0xF));\n  pinMap[pinIndex] &= mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004828",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "updatePinMap_08004828"
        },
        "FUN_08004948": {
            "renaming": {
                "FUN_08004948": "map_pwm_function_08004948",
                "pin": "pin_name",
                "uVar1": "function_value",
                "uVar2": "function_index"
            },
            "code": "uint32_t map_pwm_function_08004948(PinName_conflict pin)\n{\n  uint32_t function_value;\n  uint8_t function_index;\n  function_value = pinmap_function(pin, (PinMap_conflict *)PTR_PinMap_PWM_08004970);\n  function_index = (function_value << 12) >> 27;\n  if (function_index == 3) {\n    return 8;\n  }\n  if (function_index != 4) {\n    if (function_index != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 12;\n}",
            "called": [
                "pinmap_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004948",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "map_pwm_function_08004948"
        },
        "FUN_0800316a": {
            "renaming": {
                "FUN_0800316a": "do_nothing_0800316a"
            },
            "code": "\nvoid do_nothing_0800316a(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316a",
            "calling": [
                "I2C_ITError",
                "I2C_DMAAbort"
            ],
            "imported": false,
            "current_name": "do_nothing_0800316a"
        },
        "FUN_08005b24": {
            "renaming": {
                "FUN_08005b24": "set_rx_pin_08005b24",
                "_rx": "rx_pin",
                "PVar1": "pin",
                "PTR_digitalPin_08005b38": "digitalPin"
            },
            "code": "void __thiscall HardwareSerial::set_rx_pin_08005b24(HardwareSerial *serial, uint32_t rx_pin) {\n  PinName pin;\n  if (rx_pin < 0x3c) {\n    pin = PTR_digitalPin_08005b38[rx_pin];\n  }\n  else {\n    pin = NC;\n  }\n  (serial->_serial).pin_rx = pin;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b24",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "set_rx_pin_08005b24"
        },
        "FUN_080049f0": {
            "renaming": {
                "FUN_080049f0": "set_adc_interrupt_flag_080049f0",
                "hadc": "adc_handle",
                "iVar1": "ptr_to_adc_data",
                "DAT_08004a48": "ptr_to_adc_data",
                "DAT_08004a40": "adc_instance_a",
                "DAT_08004a44": "adc_instance_b"
            },
            "code": "void set_adc_interrupt_flag_080049f0(ADC_HandleTypeDef *adc_handle)\n{\n  int DAT_08004a48 = DAT_08004a48;\n  int DAT_08004a40 = DAT_08004a40;\n  int DAT_08004a44 = DAT_08004a44;\n  \n  if (adc_handle->Instance != DAT_08004a40) {\n    if (adc_handle->Instance == DAT_08004a44) {\n      uint *DAT_08004a48_plus_c = (uint *)(DAT_08004a48 + 0xc);\n      *DAT_08004a48_plus_c = *DAT_08004a48_plus_c | 0x400;\n      uint *DAT_08004a48_plus_c_1 = (uint *)(DAT_08004a48 + 0xc);\n      *DAT_08004a48_plus_c_1 = *DAT_08004a48_plus_c_1 & 0xfffffbff;\n      uint *DAT_08004a48_plus_18 = (uint *)(DAT_08004a48 + 0x18);\n      *DAT_08004a48_plus_18 = *DAT_08004a48_plus_18 & 0xfffffbff;\n      *DAT_08004a48_plus_18 = *DAT_08004a48_plus_18 & 0xfffffbff;\n    }\n    return;\n  }\n  uint *DAT_08004a48_plus_c = (uint *)(DAT_08004a48 + 0xc);\n  *DAT_08004a48_plus_c = *DAT_08004a48_plus_c | 0x200;\n  uint *DAT_08004a48_plus_c_1 = (uint *)(DAT_08004a48 + 0xc);\n  *DAT_08004a48_plus_c_1 = *DAT_08004a48_plus_c_1 & 0xfffffdff;\n  uint *DAT_08004a48_plus_18 = (uint *)(DAT_08004a48 + 0x18);\n  *DAT_08004a48_plus_18 = *DAT_08004a48_plus_18 & 0xfffffdff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049f0",
            "calling": [
                "HAL_ADC_DeInit"
            ],
            "imported": false,
            "current_name": "set_adc_interrupt_flag_080049f0"
        },
        "FUN_08001e40": {
            "renaming": {
                "FUN_08001e40": "get_adc_value_08001e40",
                "hadc": "adc_handle",
                "Instance": "adc_instance",
                "DR": "adc_data_register"
            },
            "code": "uint32_t get_adc_value_08001e40(ADC_HandleTypeDef *adc_handle)\n{\n  return adc_handle->Instance->DR;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e40",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "get_adc_value_08001e40"
        },
        "FUN_08003a68": {
            "renaming": {
                "FUN_08003a68": "calculate_value_08003a68",
                "uVar1": "value",
                "uVar2": "flags",
                "local_1c": "local_value",
                "abStack_18": "stack_data",
                "uStack_c": "stack_1",
                "uStack_10": "stack_2",
                "uStack_14": "stack_3"
            },
            "code": "uint calculate_value_08003a68(void)\n{\n  uint value;\n  uint flags;\n  undefined2 local_value;\n  byte stack_data[4];\n  undefined4 stack_3;\n  undefined4 stack_2;\n  undefined4 stack_1;\n  stack_1 = *(undefined4 *)(PTR__etext_08003ac4 + 8);\n  stack_2 = *(undefined4 *)(PTR__etext_08003ac4 + 4);\n  stack_3 = *(undefined4 *)PTR__etext_08003ac4;\n  local_value = *(undefined2 *)(PTR__etext_08003ac4 + 0x10);\n  flags = *(uint *)(DAT_08003ac8 + 4);\n  value = DAT_08003ad0;\n  if ((flags & 0xc) == 8) {\n    if ((flags & 0x10000) == 0) {\n      value = DAT_08003acc * (uint)stack_data[(flags << 10) >> 0x1c];\n    }\n    else {\n      value = (DAT_08003ad0 * stack_data[(flags << 10) >> 0x1c]) / (uint)*(byte *)((int)&local_value - ((*(int *)(DAT_08003ac8 + 4) << 0xe) >> 0x1f));\n    }\n  }\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a68",
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "calculate_value_08003a68"
        },
        "FUN_080012a2": {
            "renaming": {
                "FUN_080012a2": "pulseEnablePin_080012a2",
                "this": "lcd",
                "_enable_pin": "_enable_pin",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void __thiscall LiquidCrystal::pulseEnablePin_080012a2(LiquidCrystal *lcd)\n{\n  digitalWrite((uint)lcd->_enable_pin, LOW);\n  digitalWrite((uint)lcd->_enable_pin, HIGH);\n  digitalWrite((uint)lcd->_enable_pin, LOW);\n  return;\n}",
            "called": [
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012a2",
            "calling": [
                "write4bits",
                "write8bits"
            ],
            "imported": false,
            "current_name": "pulseEnablePin_080012a2"
        },
        "FUN_08004c78": {
            "renaming": {
                "FUN_08004c78": "find_peripheral_08004c78",
                "pin": "pin_name",
                "map": "pin_map",
                "pvVar1": "peripheral"
            },
            "code": "void * find_peripheral_08004c78(PinName_conflict pin, PinMap_conflict *pin_map) {\n  void *peripheral;\n  if (pin != NC) {\n    peripheral = pinmap_find_peripheral_08004c78(pin, pin_map);\n    return peripheral;\n  }\n  return (void *)0x0;\n}",
            "called": [
                "pinmap_find_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c78",
            "calling": [
                "pwm_stop",
                "adc_read_value",
                "uart_debug_write",
                "uart_debug_init",
                "uart_init"
            ],
            "imported": false,
            "current_name": "find_peripheral_08004c78"
        },
        "FUN_08005bd4": {
            "renaming": {
                "FUN_08005bd4": "initialize_static_data_08005bd4"
            },
            "code": "void initialize_static_data_08005bd4(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bd4",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_data_08005bd4"
        },
        "FUN_08001e48": {
            "renaming": {
                "FUN_08001e48": "configure_ADC_channel_08001e48",
                "*hadc": "*adc_handle",
                "*sConfig": "*channel_config",
                "HVar1": "status",
                "uVar2": "rank",
                "*pAVar3": "*adc_instance",
                "wait_loop_index": "wait_loop_index",
                "PTR_SystemCoreClock_08001f78": "SYS_CLOCK_FREQ_PTR",
                "DAT_08001f74": "ADC1",
                "DAT_08001f7c": "SYS_CLOCK_FREQ",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef"
            },
            "code": "HAL_StatusTypeDef configure_ADC_channel_08001e48(ADC_HandleTypeDef *adc_handle, ADC_ChannelConfTypeDef *channel_config)\n{\n  HAL_StatusTypeDef status;\n  uint32_t rank = channel_config->Rank;\n  uint32_t channel = channel_config->Channel;\n  uint32_t sampling_time = channel_config->SamplingTime;\n  ADC_TypeDef *adc_instance = adc_handle->Instance;\n  uint32_t wait_loop_index;\n  \n  if (adc_handle->Lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    adc_handle->Lock = HAL_LOCKED;\n    if (rank < 7) {\n      rank = rank * 5 - 5;\n      adc_instance->SQR3 = channel << (rank & 0xff) | adc_instance->SQR3 & ~(0x1f << (rank & 0xff));\n    }\n    else if (rank < 0xd) {\n      rank = rank * 5 - 0x23;\n      adc_instance->SQR2 = channel << (rank & 0xff) | adc_instance->SQR2 & ~(0x1f << (rank & 0xff));\n    }\n    else {\n      rank = rank * 5 - 0x41;\n      adc_instance->SQR1 = channel << (rank & 0xff) | adc_instance->SQR1 & ~(0x1f << (rank & 0xff));\n    }\n    if (channel < 10) {\n      adc_instance->SMPR2 = sampling_time << (channel * 3 & 0xff) | adc_instance->SMPR2 & ~(7 << (channel * 3 & 0xff));\n    }\n    else {\n      channel = channel * 3 - 0x1e;\n      adc_instance->SMPR1 = sampling_time << (channel & 0xff) | adc_instance->SMPR1 & ~(7 << (channel & 0xff));\n    }\n    if (channel - 0x10 < 2) {\n      if (adc_instance == DAT_08001f74) {\n        if ((adc_instance->CR2 & 0x800000) == 0) {\n          adc_instance->CR2 |= 0x800000;\n          if (channel == 0x10) {\n            for (wait_loop_index = (uint)((ulonglong)DAT_08001f7c * (ulonglong)*(uint *)PTR_SystemCoreClock_08001f78 >> 0x32) * 10; wait_loop_index != 0; wait_loop_index--) {\n            }\n            status = HAL_OK;\n          }\n          else {\n            status = HAL_OK;\n          }\n        }\n        else {\n          status = HAL_OK;\n        }\n      }\n      else {\n        adc_handle->State |= 0x20;\n        status = HAL_ERROR;\n      }\n    }\n    else {\n      status = HAL_OK;\n    }\n    adc_handle->Lock = HAL_UNLOCKED;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e48",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "configure_ADC_channel_08001e48"
        },
        "FUN_080059c8": {
            "renaming": {
                "FUN_080059c8": "write_080059c8",
                "this": "serial",
                "c": "data",
                "_written": "is_written",
                "_serial": "serial_data",
                "tx_head": "tx_head",
                "uVar2": "tx_active",
                "bVar1": "new_tx_head_byte",
                "bVar3": "tx_head_byte",
                "iVar4": "new_tx_head",
                "uVar5": "tx_head_before"
            },
            "code": "size_t __thiscall HardwareSerial::write_080059c8(HardwareSerial *serial, uint8_t data) {\\n    bool is_written = true;\\n    uint tx_head = (uint)(serial->_serial).tx_head;\\n    int new_tx_head = tx_head + 1;\\n    byte tx_head_byte = (byte)new_tx_head & 0x7f;\\n    if (new_tx_head == 0) {\\n        tx_head_byte = -(-tx_head_byte & 0x7f);\\n    }\\n    while ((serial->_serial).tx_tail == (ushort)tx_head_byte);\\n    (serial->_serial).tx_buff[tx_head] = data;\\n    (serial->_serial).tx_head = (ushort)tx_head_byte;\\n    uint8_t tx_active = serial_tx_active((serial_t *)&serial->_serial);\\n    if (tx_active == \"\\0\") {\\n        uart_attach_tx_callback((serial_t *)&serial->_serial, tx_callback);\\n    }\\n    return 1;\\n}",
            "called": [
                "uart_attach_tx_callback",
                "serial_tx_active"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059c8",
            "calling": [],
            "imported": false,
            "current_name": "write_080059c8"
        },
        "FUN_080009b8": {
            "renaming": {
                "FUN_080009b8": "calculate_result_080009b8",
                "param_1": "input_parameter"
            },
            "code": "undefined4 calculate_result_080009b8(undefined4 input_parameter)\n{\n  __eqdf2();\n  return input_parameter;\n}",
            "called": [
                "__eqdf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009b8",
            "calling": [
                "__aeabi_dcmpeq",
                "__aeabi_dcmplt",
                "__aeabi_dcmple",
                "__aeabi_cdrcmple"
            ],
            "imported": false,
            "current_name": "calculate_result_080009b8"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "calculate_shifted_value_08000aa8",
                "param_1": "value",
                "param_2": "shift_amount",
                "iVar1": "shifted_value",
                "uVar2": "result"
            },
            "code": "uint32_t calculate_shifted_value_08000aa8(uint32_t value, uint32_t shift_amount)\n{\n  int32_t shifted_value;\n  uint32_t result;\n  if ((shift_amount & 0x80000000) != 0) {\n    return 0;\n  }\n  shifted_value = shift_amount * 2 + 0x200000;\n  if (shift_amount * 2 < 0xffe00000) {\n    if (-1 < shifted_value) {\n      return 0;\n    }\n    result = -(shifted_value >> 0x15) - 0x3e1;\n    if (-1 < (int32_t)result) {\n      return (shift_amount << 0xb | 0x80000000 | value >> 0x15) >> (result & 0xff);\n    }\n  }\n  else if ((value | shift_amount << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aa8",
            "calling": [
                "printFloat"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08000aa8"
        },
        "FUN_08000a04": {
            "renaming": {
                "FUN_08000a04": "is_less_than_or_equal_to_zero_08000a04",
                "in_ZR": "is_zero",
                "in_CY": "is_less_or_equal",
                "__aeabi_cdrcmple": "check_if_less_or_equal"
            },
            "code": "bool is_less_than_or_equal_to_zero_08000a04(float num) {\n    bool is_less_or_equal = __aeabi_cdrcmple();\n    return !is_less_or_equal || num <= 0;\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a04",
            "calling": [
                "SetOutputLimits",
                "loop"
            ],
            "imported": false,
            "current_name": "is_less_than_or_equal_to_zero_08000a04"
        },
        "FUN_0800010c": {
            "renaming": {
                "FUN_0800010c": "is_initialized_0800010c",
                "*param_1": "*init_ptr",
                "*PTR_completed_8667_08000124": "*is_completed",
                "DAT_08000128": "*init_flag",
                "PTR__init_0800012c": "init_data"
            },
            "code": "bool is_initialized_0800010c(bool *PTR_completed_8667_08000124, int DAT_08000128, char **init_ptr) {\n  if (*PTR_completed_8667_08000124 == false) {\n    if (DAT_08000128 != 0) {\n      *init_ptr = PTR__init_0800012c;\n    }\n    *PTR_completed_8667_08000124 = true;\n  }\n  return *init_ptr != NULL;\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": false,
            "current_name": "is_initialized_0800010c"
        },
        "FUN_08003f14": {
            "renaming": {
                "FUN_08003f14": "do_nothing_08003f14"
            },
            "code": "\nvoid do_nothing_08003f14(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f14",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f14"
        },
        "FUN_08001cac": {
            "renaming": {
                "FUN_08001cac": "updateTick_08001cac",
                "PTR_uwTick_08001cbc": "tickPtr",
                "PTR_uwTickFreq_08001cc0": "tickFreqByte"
            },
            "code": "void updateTick_08001cac(void)\n{\n    uint8_t PTR_uwTickFreq_08001cc0 = *(uint8_t*)PTR_uwTickFreq_08001cc0;\n    uint32_t* PTR_uwTick_08001cbc = (uint32_t*)PTR_uwTick_08001cbc;\n    *PTR_uwTick_08001cbc = PTR_uwTickFreq_08001cc0 + *PTR_uwTick_08001cbc;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cac",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "updateTick_08001cac"
        },
        "FUN_08003f12": {
            "renaming": {
                "FUN_08003f12": "do_nothing_08003f12"
            },
            "code": "\nvoid do_nothing_08003f12(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f12",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f12"
        },
        "FUN_08005a18": {
            "renaming": {
                "FUN_08005a18": "checkSerial2Availability_08005a18",
                "DAT_08005a3c": "serial2Initialized",
                "PTR_Serial2_08005a40": "&Serial2"
            },
            "code": "void checkSerial2Availability_08005a18(void)\n{\n  if (DAT_08005a3c != 0) {\n    HardwareSerial::available(PTR_Serial2_08005a40);\n  }\n  return;\n}",
            "called": [
                "available"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a18",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "checkSerial2Availability_08005a18"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "handle_timer_interrupt_08003f18",
                "htim": "timer_handle",
                "pTVar1": "timer_instance",
                "SR": "TIM_FLAG",
                "DIER": "TIM_IT",
                "Channel": "active_channel",
                "HAL_TIM_ACTIVE_CHANNEL_1": "HAL_TIM_ACTIVE_CHANNEL_1",
                "CCMR1": "TIM_CCMR1",
                "CCMR2": "TIM_CCMR2",
                "HAL_TIM_ACTIVE_CHANNEL_CLEARED": "HAL_TIM_ACTIVE_CHANNEL_CLEARED",
                "HAL_TIM_OC_DelayElapsedCallback": "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIM_PWM_PulseFinishedCallback": "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIM_IC_CaptureCallback": "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_PeriodElapsedCallback": "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIMEx_BreakCallback": "HAL_TIMEx_BreakCallback",
                "HAL_TIM_TriggerCallback": "HAL_TIM_TriggerCallback",
                "HAL_TIMEx_CommutationCallback": "HAL_TIMEx_CommutationCallback"
            },
            "code": "void handle_timer_interrupt_08003f18(TIM_HandleTypeDef *timer_handle)\n{\n    TIM_TypeDef *timer_instance = timer_handle->Instance;\n\n    if (((timer_instance->SR & TIM_FLAG_CC1) != 0) && ((timer_instance->DIER & TIM_IT_CC1) != 0)) {\n        timer_instance->SR = ~(TIM_FLAG_CC1);\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_1;\n        if ((timer_handle->Instance->CCMR1 & TIM_CCMR1_CC1S) == 0) {\n            HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n            HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n        }\n        else {\n            HAL_TIM_IC_CaptureCallback(timer_handle);\n        }\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n    }\n\n    // Repeat for other channels and events\n}\n",
            "called": [
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIMEx_BreakCallback",
                "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIM_TriggerCallback",
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIMEx_CommutationCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "TIM2_IRQHandler",
                "TIM4_IRQHandler",
                "TIM1_UP_IRQHandler",
                "TIM3_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_timer_interrupt_08003f18"
        },
        "FUN_08003f16": {
            "renaming": {
                "FUN_08003f16": "do_nothing_08003f16"
            },
            "code": "\nvoid do_nothing_08003f16(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f16",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f16"
        },
        "FUN_0800591e": {
            "renaming": {
                "FUN_0800591e": "calculateAvailableRxSpace_0800591e",
                "this": "serialInstance",
                "_serial": "serialData",
                "rx_head": "rxHead",
                "rx_tail": "rxTail",
                "availableRxSpace": "availableRxSpace"
            },
            "code": "int __thiscall calculateAvailableRxSpace_0800591e(HardwareSerial *serialInstance)\n{\n  int rxHead = serialInstance->_serial.rx_head;\n  int rxTail = serialInstance->_serial.rx_tail;\n  int availableRxSpace = (rxHead - rxTail + 0x40) & 0x3f;\n  return availableRxSpace;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800591e",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "calculateAvailableRxSpace_0800591e"
        },
        "FUN_08006104": {
            "renaming": {
                "FUN_08006104": "initialize_static_data_08006104"
            },
            "code": "void initialize_static_data_08006104(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006104",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_data_08006104"
        },
        "FUN_08002540": {
            "renaming": {
                "FUN_08002540": "set_interrupt_priority_08002540",
                "IRQn": "irq",
                "uVar1": "irq_num",
                "DAT_0800255c": "irq_reg_base",
                "irq_reg_index": "irq_reg_index",
                "irq_reg_offset": "irq_reg_offset",
                "irq_reg_ptr": "irq_reg_ptr"
            },
            "code": "void set_interrupt_priority_08002540(IRQn_Type_conflict irq) \\n\\\n{\\n\\\n  uint32_t irq_num = (uint32_t)irq;\\n\\\n  if (irq_num >= 0) {\\n\\\n    uint32_t irq_reg_index = (irq_num >> 5) + 0x60;\\n\\\n    uint32_t irq_reg_offset = irq_num & 0x1f;\\n\\\n    uint32_t *irq_reg_ptr = (uint32_t *)(DAT_0800255c + irq_reg_index * 4);\\n\\\n    *irq_reg_ptr = 1 << irq_reg_offset;\\n\\\n  }\\n\\\n  return;\\n\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002540",
            "calling": [
                "USART1_IRQHandler",
                "USART3_IRQHandler",
                "USART2_IRQHandler"
            ],
            "imported": false,
            "current_name": "set_interrupt_priority_08002540"
        },
        "FUN_08005be2": {
            "renaming": {
                "__thiscall IPAddress::FUN_08005be2": "printAddress",
                "*this": "address",
                "*p": "printer",
                "iVar3": "i",
                "iVar4": "total_bytes_printed",
                "sVar1": "bytes_printed",
                "sVar2": "dot_printed",
                "FUN_08005be2": "printAddress_08005be2"
            },
            "code": "size_t __thiscall IPAddress::printAddress_08005be2(IPAddress *this, Print *printer) {\n    size_t total_bytes_printed = 0;\n    for (int i = 0; i < 3; i++) {\n        size_t bytes_printed = Print::print(printer, (this->_address).bytes[i], 10);\n        size_t dot_printed = Print::print(printer, '.');\n        total_bytes_printed += bytes_printed + dot_printed;\n    }\n    total_bytes_printed += Print::print(printer, (this->_address).bytes[3], 10);\n    return total_bytes_printed;\n}",
            "called": [
                "print",
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005be2",
            "calling": [],
            "imported": false,
            "current_name": "printAddress_08005be2"
        },
        "FUN_08006344": {
            "renaming": {
                "FUN_08006344": "write_byte_to_buffer_08006344",
                "param_1": "buffer_address",
                "param_2": "byte_to_write",
                "param_3": "buffer_details",
                "uVar1": "result",
                "pbVar2": "end_of_buffer",
                "pbVar3": "buffer_start"
            },
            "code": "unsigned int write_byte_to_buffer_08006344(undefined4 buffer_address, byte byte_to_write, byte **buffer_details)\n{\n  unsigned int result;\n  byte *end_of_buffer = buffer_details[2] - 1;\n  buffer_details[2] = end_of_buffer;\n  if (((int)end_of_buffer < 0) && (((int)end_of_buffer < (int)buffer_details[6] || (byte_to_write == 10)))) {\n    result = __swbuf_r();\n    return result;\n  }\n  byte *buffer_start = *buffer_details;\n  *buffer_details = buffer_start + 1;\n  *buffer_start = byte_to_write;\n  return (unsigned int)byte_to_write;\n}",
            "called": [
                "__swbuf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006344",
            "calling": [
                "__sfputs_r"
            ],
            "imported": false,
            "current_name": "write_byte_to_buffer_08006344"
        },
        "FUN_080009c8": {
            "renaming": {
                "FUN_080009c8": "compare_double_080009c8",
                "in_ZR": "is_equal"
            },
            "code": "bool compare_double_080009c8(void)\n{\n  char is_equal;\n  __aeabi_cdcmpeq();\n  return is_equal != '\\0';\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "compare_double_080009c8"
        },
        "FUN_08002db2": {
            "renaming": {
                "FUN_08002db2": "handle_I2C_transfer_08002db2",
                "*hi2c": "*i2c_handle",
                "HVar1": "i2c_state",
                "pbVar2": "buffer_ptr",
                "uVar3": "transfer_options"
            },
            "code": "HAL_StatusTypeDef_conflict handle_I2C_transfer_08002db2(I2C_HandleTypeDef *i2c_handle) {\n  HAL_I2C_StateTypeDef i2c_state;\n  uint32_t transfer_options;\n  \n  i2c_state = i2c_handle->State;\n  transfer_options = i2c_handle->XferOptions;\n  if ((i2c_handle->XferSize == 0) && (i2c_state == HAL_I2C_STATE_BUSY_TX)) {\n    if ((transfer_options == 4) || ((transfer_options == 8 || (transfer_options == 0xffff0000)))) {\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffff8ff;\n      i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x200;\n      i2c_handle->PreviousState = 0;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n        i2c_handle->Mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_MemTxCpltCallback(i2c_handle);\n      }\n      else {\n        i2c_handle->Mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_MasterTxCpltCallback(i2c_handle);\n      }\n    }\n    else {\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffff8ff;\n      i2c_handle->PreviousState = 0x11;\n      i2c_handle->Mode = HAL_I2C_MODE_NONE;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      HAL_I2C_MasterTxCpltCallback(i2c_handle);\n    }\n  }\n  else if ((i2c_state == HAL_I2C_STATE_BUSY_TX) ||\n          ((i2c_handle->Mode == HAL_I2C_MODE_MEM && (i2c_state == HAL_I2C_STATE_BUSY_RX)))) {\n    if (i2c_handle->XferCount == 0) {\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffffbff;\n    }\n    else if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n      if (i2c_handle->EventCount == 0) {\n        if (i2c_handle->MemaddSize == 1) {\n          i2c_handle->Instance->DR = i2c_handle->Memaddress & 0xff;\n          i2c_handle->EventCount = i2c_handle->EventCount + 2;\n        }\n        else {\n          i2c_handle->Instance->DR = (i2c_handle->Memaddress << 0x10) >> 0x18;\n          i2c_handle->EventCount = i2c_handle->EventCount + 1;\n        }\n      }\n      else if (i2c_handle->EventCount == 1) {\n        i2c_handle->Instance->DR = i2c_handle->Memaddress & 0xff;\n        i2c_handle->EventCount = i2c_handle->EventCount + 1;\n      }\n      else if (i2c_handle->EventCount == 2) {\n        if (i2c_state == HAL_I2C_STATE_BUSY_RX) {\n          i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x100;\n        }\n        else if (i2c_state == HAL_I2C_STATE_BUSY_TX) {\n          uint8_t *buffer_ptr = i2c_handle->pBuffPtr;\n          i2c_handle->pBuffPtr = buffer_ptr + 1;\n          i2c_handle->Instance->DR = (uint8_t)*buffer_ptr;\n          i2c_handle->XferCount = i2c_handle->XferCount - 1;\n        }\n      }\n    }\n    else {\n      uint8_t *buffer_ptr = i2c_handle->pBuffPtr;\n      i2c_handle->pBuffPtr = buffer_ptr + 1;\n      i2c_handle->Instance->DR = (uint8_t)*buffer_ptr;\n      i2c_handle->XferCount = i2c_handle->XferCount - 1;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MasterTxCpltCallback",
                "HAL_I2C_MemTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db2",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_I2C_transfer_08002db2"
        },
        "FUN_08005932": {
            "renaming": {
                "FUN_08005932": "get_next_byte_from_serial_buffer_08005932",
                "this": "serial_object",
                "uVar1": "rx_tail"
            },
            "code": "int __thiscall get_next_byte_from_serial_buffer_08005932(HardwareSerial *serial_object)\n{\n  uint32_t rx_tail = (uint32_t)serial_object->_serial.rx_tail;\n  if (serial_object->_serial.rx_head != rx_tail) {\n    return (uint32_t)serial_object->_serial.rx_buff[rx_tail];\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005932",
            "calling": [],
            "imported": false,
            "current_name": "get_next_byte_from_serial_buffer_08005932"
        },
        "FUN_08001cc4": {
            "renaming": {
                "FUN_08001cc4": "get_uwTick_value_08001cc4",
                "PTR_uwTick_08001ccc": "uwTick_ptr"
            },
            "code": "uint32_t get_uwTick_value_08001cc4(void)\n{\n  uint32_t* PTR_uwTick_08001ccc = (uint32_t*)PTR_uwTick_08001ccc;\n  uint32_t uwTick_value = *PTR_uwTick_08001ccc;\n  return uwTick_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cc4",
            "calling": [
                "ADC_ConversionStop_Disable",
                "ADC_Enable",
                "uart_debug_write",
                "HAL_UART_Transmit",
                "HAL_ADCEx_Calibration_Start",
                "HAL_RCC_OscConfig",
                "UART_WaitOnFlagUntilTimeout",
                "HAL_ADC_PollForConversion",
                "HAL_RCCEx_PeriphCLKConfig",
                "GetCurrentMilli",
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "get_uwTick_value_08001cc4"
        },
        "FUN_08002db0": {
            "renaming": {
                "FUN_08002db0": "do_nothing_08002db0"
            },
            "code": "\nvoid do_nothing_08002db0(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db0",
            "calling": [
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE"
            ],
            "imported": false,
            "current_name": "do_nothing_08002db0"
        },
        "FUN_08003ea0": {
            "renaming": {
                "FUN_08003ea0": "handle_rtc_alarm_08003ea0",
                "hrtc": "rtc_handle",
                "DAT_08003ed4": "some_data",
                "is_crh_bit_set": "is_crh_bit_set",
                "is_crl_bit_set": "is_crl_bit_set"
            },
            "code": "void handle_rtc_alarm_08003ea0(RTC_HandleTypeDef *rtc_handle) {\n    bool is_crh_bit_set = (rtc_handle->Instance->CRH & 2) != 0;\n    bool is_crl_bit_set = (rtc_handle->Instance->CRL & 2) != 0;\n    if (is_crh_bit_set && is_crl_bit_set) {\n        HAL_RTC_AlarmAEventCallback(rtc_handle);\n        rtc_handle->Instance->CRL = 0xfffffffd;\n    }\n    *(uint32_t *)(DAT_08003ed4 + 0x14) = 0x20000;\n    rtc_handle->State = HAL_RTC_STATE_READY;\n    return;\n}",
            "called": [
                "HAL_RTC_AlarmAEventCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ea0",
            "calling": [
                "RTC_Alarm_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_rtc_alarm_08003ea0"
        },
        "FUN_0800306c": {
            "renaming": {
                "FUN_0800306c": "i2c_transfer_0800306c",
                "*hi2c": "*handle",
                "uVar1": "transfer_options",
                "puVar2": "buffer_ptr"
            },
            "code": "HAL_StatusTypeDef i2c_transfer_0800306c(I2C_HandleTypeDef *handle)\n{\n    uint32_t transfer_options = handle->XferOptions;\n    if (handle->XferCount == 3) {\n        if (((transfer_options == 4) || (transfer_options == 8)) || (transfer_options == 0xffff0000)) {\n            handle->Instance->CR1 = handle->Instance->CR1 & 0xfffffbff;\n        }\n        uint8_t *buffer_ptr = handle->pBuffPtr;\n        handle->pBuffPtr = buffer_ptr + 1;\n        *buffer_ptr = (uint8_t)handle->Instance->DR;\n        handle->XferCount = handle->XferCount - 1;\n    }\n    else if (handle->XferCount == 2) {\n        if (((transfer_options == 4) || (transfer_options == 8)) || (transfer_options == 0xffff0000)) {\n            handle->Instance->CR2 = handle->Instance->CR2 & 0xfffffcff;\n            handle->Instance->CR1 = handle->Instance->CR1 | 0x200;\n        }\n        else {\n            if (transfer_options == 2) {\n                handle->Instance->CR1 = handle->Instance->CR1 | 0x400;\n            }\n            else {\n                handle->Instance->CR1 = handle->Instance->CR1 & 0xfffffbff;\n            }\n            handle->Instance->CR2 = handle->Instance->CR2 & 0xfffffcff;\n        }\n        uint8_t *buffer_ptr = handle->pBuffPtr;\n        handle->pBuffPtr = buffer_ptr + 1;\n        *buffer_ptr = (uint8_t)handle->Instance->DR;\n        handle->XferCount = handle->XferCount - 1;\n        buffer_ptr = handle->pBuffPtr;\n        handle->pBuffPtr = buffer_ptr + 1;\n        *buffer_ptr = (uint8_t)handle->Instance->DR;\n        handle->XferCount = handle->XferCount - 1;\n        handle->State = HAL_I2C_STATE_READY;\n        handle->PreviousState = 0;\n        if (handle->Mode == HAL_I2C_MODE_MEM) {\n            handle->Mode = HAL_I2C_MODE_NONE;\n            HAL_I2C_MemRxCpltCallback(handle);\n        }\n        else {\n            handle->Mode = HAL_I2C_MODE_NONE;\n            HAL_I2C_MasterRxCpltCallback(handle);\n        }\n    }\n    else {\n        uint8_t *buffer_ptr = handle->pBuffPtr;\n        handle->pBuffPtr = buffer_ptr + 1;\n        *buffer_ptr = (uint8_t)handle->Instance->DR;\n        handle->XferCount = handle->XferCount - 1;\n    }\n    return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800306c",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_transfer_0800306c"
        },
        "FUN_08005c64": {
            "renaming": {
                "FUN_08005c64": "initialize_static_data_08005c64"
            },
            "code": "void initialize_static_data_08005c64()\n{\n    __static_initialization_and_destruction_0(1, 0xffff);\n    return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c64",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_data_08005c64"
        },
        "FUN_0800548c": {
            "renaming": {
                "FUN_0800548c": "is_uart_transmitting_0800548c",
                "obj": "serial",
                "HVar1": "uart_state",
                "PTR_uart_handlers_080054ac": "uart_handlers",
                "uint": "unsigned int"
            },
            "code": "bool is_uart_transmitting_0800548c(serial_t* serial) {\n    UART_HandleTypeDef* uart_handler = *(UART_HandleTypeDef**)(PTR_PTR_uart_handlers_080054ac_080054ac + (uint)serial->index * 4);\n    HAL_UART_StateTypeDef uart_state = HAL_UART_GetState(uart_handler);\n    bool is_transmitting = (uart_state & 0x22U) == 0x22;\n    return is_transmitting;\n}",
            "called": [
                "HAL_UART_GetState"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800548c",
            "calling": [
                "uart_getc",
                "uart_attach_rx_callback"
            ],
            "imported": false,
            "current_name": "is_uart_transmitting_0800548c"
        },
        "FUN_08000924": {
            "renaming": {
                "FUN_08000924": "check_parameters_08000924",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "xor_value2_value4",
                "bVar2": "is_value1_value2_zero",
                "bVar3": "is_value3_value4_zero"
            },
            "code": "uint check_parameters_08000924(uint value1, uint value2, uint value3, uint value4)\n{\n  bool is_value1_value2_zero = (value1 | value2 << 1) == 0;\n  bool is_value3_value4_zero = (value3 | value4 << 1) == 0;\n  bool are_value2_value4_equal = value2 == value4;\n  bool are_value1_value3_equal = value1 == value3;\n  uint xor_value2_value4 = value2 ^ value4;\n  bool is_xor_value2_value4_zero = xor_value2_value4 == 0;\n  bool is_xor_value2_value4_negative = -1 < (int)xor_value2_value4;\n  bool is_value4_less_than_or_equal_to_value2 = value4 <= value2;\n  bool is_value3_less_than_or_equal_to_value1 = value3 <= value1;\n  uint result = (int)value4 >> 0x1f;\n  if (!(((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) && ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) || (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 0;\n  }\n  if (!is_value1_value2_zero && !is_value3_value4_zero && !are_value2_value4_equal && !are_value1_value3_equal) {\n    if (!is_xor_value2_value4_zero) {\n      if (is_xor_value2_value4_negative && is_value4_less_than_or_equal_to_value2) {\n        if (are_value1_value3_equal) {\n          result = ~result;\n        }\n        return result | 1;\n      }\n    }\n    else if (are_value2_value4_equal && is_value3_less_than_or_equal_to_value1) {\n      return result | 1;\n    }\n  }\n  else {\n    return 1;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000924",
            "calling": [],
            "imported": false,
            "current_name": "check_parameters_08000924"
        },
        "FUN_08006c34": {
            "renaming": {
                "FUN_08006c34": "walk_reentrant_mallocs_08006c34",
                "param_1": "reent_struct_ptr",
                "DAT_08006c3c": "free"
            },
            "code": "void walk_reentrant_mallocs_08006c34(void* reent_struct_ptr){\n  _fwalk_reent(reent_struct_ptr,DAT_08006c3c);\n  return;\n}",
            "called": [
                "_fwalk_reent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c34",
            "calling": [],
            "imported": false,
            "current_name": "walk_reentrant_mallocs_08006c34"
        },
        "FUN_080072a4": {
            "renaming": {
                "std::ctype_byname<char>::FUN_080072a4": "setFlags",
                "PTR_id_08007308": "ptr_id_08007308",
                "PTR_id_0800730c": "ptr_id_0800730c",
                "PTR_id_08007310": "ptr_id_08007310",
                "PTR_id_08007314": "ptr_id_08007314",
                "PTR_id_08007318": "ptr_id_08007318",
                "PTR_id_0800731c": "ptr_id_0800731c",
                "PTR_id_08007320": "ptr_id_08007320",
                "PTR_id_08007324": "ptr_id_08007324",
                "FUN_080072a4": "setFlags_080072a4"
            },
            "code": "void setFlags_080072a4(void)\n{\n    int* PTR_id_08007308 = (int*)PTR_id_08007308;\n    int* PTR_id_0800730c = (int*)PTR_id_0800730c;\n    int* PTR_id_08007310 = (int*)PTR_id_08007310;\n    int* PTR_id_08007314 = (int*)PTR_id_08007314;\n    int* PTR_id_08007318 = (int*)PTR_id_08007318;\n    int* PTR_id_0800731c = (int*)PTR_id_0800731c;\n    int* PTR_id_08007320 = (int*)PTR_id_08007320;\n    int* PTR_id_08007324 = (int*)PTR_id_08007324;\n    \n    if (*PTR_id_08007308 < 0)\n    {\n        *PTR_id_08007308 = 1;\n    }\n    if (*PTR_id_0800730c < 0)\n    {\n        *PTR_id_0800730c = 1;\n    }\n    if (*PTR_id_08007310 < 0)\n    {\n        *PTR_id_08007310 = 1;\n    }\n    if (*PTR_id_08007314 < 0)\n    {\n        *PTR_id_08007314 = 1;\n    }\n    if (*PTR_id_08007318 < 0)\n    {\n        *PTR_id_08007318 = 1;\n    }\n    if (*PTR_id_0800731c < 0)\n    {\n        *PTR_id_0800731c = 1;\n    }\n    if (*PTR_id_08007320 < 0)\n    {\n        *PTR_id_08007320 = 1;\n    }\n    if (*PTR_id_08007324 < 0)\n    {\n        *PTR_id_08007324 = 1;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072a4",
            "calling": [],
            "imported": false,
            "current_name": "setFlags_080072a4"
        },
        "FUN_08004848": {
            "renaming": {
                "FUN_08004848": "get_gpio_port_08004848",
                "port_idx": "port_index",
                "DAT_08004870": "gpio_port_a",
                "DAT_08004880": "gpio_port_b",
                "DAT_08004874": "gpio_port_c",
                "DAT_08004878": "gpio_port_d",
                "DAT_0800487c": "gpio_port_e"
            },
            "code": "GPIO_TypeDef* get_gpio_port_08004848(uint32_t port_index) {\n  switch(port_index) {\n    case 0:\n      return DAT_08004870;\n    case 1:\n      return DAT_08004880;\n    case 2:\n      return DAT_08004874;\n    case 3:\n      return DAT_08004878;\n    case 4:\n      return DAT_0800487c;\n    default:\n      return (GPIO_TypeDef*)0x0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004848",
            "calling": [
                "digitalWrite",
                "digitalRead"
            ],
            "imported": false,
            "current_name": "get_gpio_port_08004848"
        },
        "FUN_08005d82": {
            "renaming": {
                "FUN_08005d82": "printNumber_08005d82",
                "this": "this",
                "n": "number",
                "base": "base",
                "sVar1": "result"
            },
            "code": "size_t __thiscall Print::printNumber_08005d82(Print *this,int number,int base)\n{\n  size_t result;\n  \n  result = printNumber_08005d82(this,number,base);\n  return result;\n}",
            "called": [
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d82",
            "calling": [
                "printFloat",
                "loop"
            ],
            "imported": false,
            "current_name": "printNumber_08005d82"
        },
        "FUN_08006f92": {
            "renaming": {
                "FUN_08006f92": "read_file_at_offset_08006f92",
                "param_1": "file_descriptor",
                "param_2": "file_info",
                "iVar1": "offset",
                "uVar2": "flags",
                "bVar3": "is_offset_invalid"
            },
            "code": "void read_file_at_offset_08006f92(int file_descriptor, int* file_info)\n{\n  int offset = _lseek_r(file_descriptor, (int)*(short *)(file_info + 0xe));\n  bool is_offset_invalid = offset == -1;\n  ushort flags = *(ushort *)(file_info + 0xc);\n  if (is_offset_invalid) {\n    flags &= 0xefff;\n  }\n  else {\n    *(int *)(file_info + 0x54) = offset;\n    flags |= 0x1000;\n  }\n  *(ushort *)(file_info + 0xc) = flags;\n}\n",
            "called": [
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f92",
            "calling": [],
            "imported": false,
            "current_name": "read_file_at_offset_08006f92"
        },
        "FUN_080012c0": {
            "renaming": {
                "FUN_080012c0": "writeToDataPins_080012c0",
                "this": "lcd",
                "value": "value",
                "uVar1": "i",
                "_data_pins": "_data_pins",
                "digitalWrite": "digitalWrite",
                "pulseEnable": "pulseEnable"
            },
            "code": "void __thiscall LiquidCrystal::writeToDataPins_080012c0(LiquidCrystal *lcd, uint8_t value)\n{\n    for (uint8_t i = 0; i < 4; i++) {\n        uint8_t data_pin = lcd->_data_pins[i];\n        uint8_t bit_value = (value >> i) & 1;\n        digitalWrite(data_pin, bit_value);\n    }\n    pulseEnable(lcd);\n    return;\n}",
            "called": [
                "digitalWrite",
                "pulseEnable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012c0",
            "calling": [
                "send",
                "begin"
            ],
            "imported": false,
            "current_name": "writeToDataPins_080012c0"
        },
        "FUN_08001f80": {
            "renaming": {
                "FUN_08001f80": "get_ADC_state_08001f80",
                "hadc": "adc_handle"
            },
            "code": "uint32_t get_ADC_state_08001f80(ADC_HandleTypeDef *adc_handle)\n{\n  return adc_handle->State;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f80",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "get_ADC_state_08001f80"
        },
        "FUN_08001f84": {
            "renaming": {
                "FUN_08001f84": "initialize_ADC_08001f84",
                "*hadc": "*ADC_handle",
                "HVar1": "status",
                "uVar2": "start_time",
                "uVar3": "current_time",
                "pAVar4": "ADC_instance",
                "wait_loop_index": "wait_time"
            },
            "code": "HAL_StatusTypeDef_conflict initialize_ADC_08001f84(ADC_HandleTypeDef *ADC_handle)\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t wait_time, start_time, current_time;\n  ADC_TypeDef *ADC_instance;\n  \n  ADC_instance = ADC_handle->Instance;\n  if ((ADC_instance->CR2 & 1) == 0) {\n    ADC_instance->CR2 = ADC_instance->CR2 | 1;\n    wait_time = (uint32_t)(((uint64_t)DAT_08002000) * ((uint64_t)*(uint *)PTR_SystemCoreClock_08001ffc) >> 0x32);\n    for (uint32_t i = 0; i < wait_time; i++) {\n    }\n    start_time = HAL_GetTick();\n    do {\n      if ((ADC_handle->Instance->CR2 & 1) != 0) {\n        return HAL_OK;\n      }\n      current_time = HAL_GetTick();\n    } while (current_time - start_time < 3);\n    ADC_handle->State = ADC_handle->State | 0x10;\n    ADC_handle->ErrorCode = ADC_handle->ErrorCode | 1;\n    ADC_handle->Lock = HAL_UNLOCKED;\n    status = HAL_ERROR;\n  }\n  else {\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f84",
            "calling": [
                "HAL_ADC_Start",
                "HAL_ADCEx_Calibration_Start"
            ],
            "imported": false,
            "current_name": "initialize_ADC_08001f84"
        },
        "FUN_08000bcc": {
            "renaming": {
                "FUN_08000bcc": "initializeSystem_08000bcc",
                "puVar1": "ssrPin",
                "puVar2": "ledRedPin",
                "this": "lcd",
                "uVar3": "millis()",
                "PTR_ssrPin_08000c90": "ssrPin",
                "PTR_buzzerPin_08000c94": "buzzerPin",
                "PTR_ledRedPin_08000c98": "ledRedPin",
                "PTR_lcd_08000c9c": "lcd",
                "PTR_degree_08000ca0": "degreeSymbol",
                "PTR_s_Reflow_08000ca4": "Reflow",
                "PTR_s_Oven_1_2_08000ca8": "Oven 1.2",
                "PTR_Serial2_08000cac": "Serial2",
                "PTR_windowSize_08000cb0": "windowSize",
                "PTR_nextCheck_08000cb4": "nextCheck",
                "PTR_nextRead_08000cb8": "nextRead"
            },
            "code": "void initializeSystem_08000bcc(void)\n{\n  uint32_t PTR_ssrPin_08000c90;\n  uint32_t PTR_buzzerPin_08000c94;\n  uint32_t PTR_ledRedPin_08000c98;\n  uint32_t PTR_windowSize_08000cb0 = 2000;\n  uint32_t PTR_nextCheck_08000cb4 = millis();\n  uint32_t PTR_nextRead_08000cb8 = millis();\n  LiquidCrystal PTR_lcd_08000c9c = LiquidCrystal(8, 2, 4, 5, 6, 7);\n  pinMode(PTR_ssrPin_08000c90, OUTPUT);\n  digitalWrite(PTR_ssrPin_08000c90, LOW);\n  pinMode(PTR_buzzerPin_08000c94, OUTPUT);\n  digitalWrite(PTR_buzzerPin_08000c94, LOW);\n  pinMode(PTR_ledRedPin_08000c98, OUTPUT);\n  digitalWrite(PTR_buzzerPin_08000c94, HIGH);\n  PTR_lcd_08000c9c.begin(16, 2);\n  PTR_lcd_08000c9c.createChar(0, PTR_degree_08000ca0);\n  PTR_lcd_08000c9c.clear();\n  PTR_lcd_08000c9c.print(\"PTR_s_Reflow_08000ca4\");\n  PTR_lcd_08000c9c.setCursor(0, 1);\n  PTR_lcd_08000c9c.print(\"PTR_s_Oven_1_2_08000ca8\");\n  digitalWrite(PTR_buzzerPin_08000c94, LOW);\n  delay(2500);\n  PTR_lcd_08000c9c.clear();\n  PTR_Serial2_08000cac.begin(57600);\n  digitalWrite(PTR_ledRedPin_08000c98, HIGH);\n  startForkserver(0);\n}\n",
            "called": [
                "clear",
                "createChar",
                "millis",
                "begin",
                "digitalWrite",
                "setCursor",
                "print",
                "begin",
                "pinMode",
                "startForkserver",
                "delay"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000bcc",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initializeSystem_08000bcc"
        },
        "FUN_080047d8": {
            "renaming": {
                "FUN_080047d8": "reset_uart_transfer_counts_080047d8",
                "hdma": "dma_handler",
                "huart": "uart_handler",
                "RxXferCount": "receive_transfer_count",
                "TxXferCount": "transmit_transfer_count",
                "HAL_UART_ErrorCallback": "handle_uart_error"
            },
            "code": "void reset_uart_transfer_counts_080047d8(DMA_HandleTypeDef *dma_handler)\n{\n  UART_HandleTypeDef *uart_handler;\n  uart_handler = (UART_HandleTypeDef *)dma_handler->Parent;\n  uart_handler->RxXferCount = 0;\n  uart_handler->TxXferCount = 0;\n  HAL_UART_ErrorCallback(uart_handler);\n  return;\n}",
            "called": [
                "HAL_UART_ErrorCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047d8",
            "calling": [],
            "imported": false,
            "current_name": "reset_uart_transfer_counts_080047d8"
        },
        "FUN_0800281e": {
            "renaming": {
                "FUN_0800281e": "set_GPIO_PinState_0800281e",
                "GPIOx": "GPIO_Port",
                "GPIO_Pin": "GPIO_Pin",
                "PinState": "PinState",
                "GPIO_PIN_RESET": "GPIO_PIN_RESET",
                "BSRR": "BSRR",
                "uint": "uint32_t"
            },
            "code": "void set_GPIO_PinState_0800281e(GPIO_TypeDef *GPIO_Port, uint16_t GPIO_Pin, GPIO_PinState PinState) {\n  if (PinState == GPIO_PIN_RESET) {\n    GPIO_Port->BSRR = (uint32_t)GPIO_Pin << 16;\n    return;\n  }\n  GPIO_Port->BSRR = (uint32_t)GPIO_Pin;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800281e",
            "calling": [
                "digital_io_write"
            ],
            "imported": false,
            "current_name": "set_GPIO_PinState_0800281e"
        },
        "FUN_08006198": {
            "renaming": {
                "FUN_08006198": "execute_global_constructors_and_destructors_08006198",
                "puVar1": "preinit_array_end_ptr",
                "iVar2": "preinit_array_size",
                "iVar3": "i"
            },
            "code": "void execute_global_constructors_and_destructors_08006198(void)\n{\n  undefined *preinit_array_end_ptr;\n  int preinit_array_size;\n  int i;\n  preinit_array_end_ptr = PTR___preinit_array_end_080061d0;\n  preinit_array_size = (int)PTR___preinit_array_end_080061d4 - (int)PTR___preinit_array_end_080061d0;\n  for (i = 0; i != preinit_array_size >> 2; i = i + 1) {\n    (**(code **)(preinit_array_end_ptr + i * 4))();\n  }\n  _init();\n  preinit_array_end_ptr = PTR___preinit_array_end_080061d8;\n  preinit_array_size = (int)PTR___do_global_dtors_aux_fini_array_entry_080061dc - (int)PTR___preinit_array_end_080061d8;\n  for (i = 0; i != preinit_array_size >> 2; i = i + 1) {\n    (**(code **)(preinit_array_end_ptr + i * 4))();\n  }\n  return;\n}",
            "called": [
                "premain",
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006198",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "execute_global_constructors_and_destructors_08006198"
        },
        "FUN_08006fc0": {
            "renaming": {
                "FUN_08006fc0": "write_to_file_08006fc0",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "errno_ptr",
                "iVar2": "write_result"
            },
            "code": "void write_to_file_08006fc0(int *error_code, int file_descriptor, char *buffer, int buffer_size)\n{\n  int write_result;\n  int *errno_ptr;\n  errno_ptr = PTR_errno_08006fe0;\n  *(int *)PTR_errno_08006fe0 = 0;\n  write_result = _write(file_descriptor, buffer, buffer_size);\n  if ((write_result == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006fc0",
            "calling": [
                "__swrite"
            ],
            "imported": false,
            "current_name": "write_to_file_08006fc0"
        },
        "FUN_08007048": {
            "renaming": {
                "FUN_08007048": "seek_file_08007048",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "puVar1": "error_ptr",
                "iVar2": "seek_result"
            },
            "code": "void seek_file_08007048(int *error_code, int file_descriptor, int offset, int whence) {\n    int seek_result = 0;\n    int *error_ptr = PTR_errno_08007068;\n    *(undefined4 *)PTR_errno_08007068 = 0;\n    seek_result = _lseek(file_descriptor, offset, whence);\n    if ((seek_result == -1) && (*(int *)error_ptr != 0)) {\n        *error_code = *(int *)error_ptr;\n    }\n    return;\n}",
            "called": [
                "_lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007048",
            "calling": [
                "__swrite",
                "__sseek"
            ],
            "imported": false,
            "current_name": "seek_file_08007048"
        },
        "FUN_08003c50": {
            "renaming": {
                "FUN_08003c50": "get_HCLK_frequency_divider_08003c50",
                "DAT_08003c68": "DAT_08003c68",
                "PTR_APBPrescTable_08003c6c": "PTR_APBPrescTable_08003c6c"
            },
            "code": "uint32_t get_HCLK_frequency_divider_08003c50(void)\n{\n  uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();\n  uint32_t apb_prescaler_index = (*(int *)(DAT_08003c68 + 4) << 0x15) >> 0x1d;\n  uint32_t apb_prescaler = PTR_APBPrescTable_08003c6c[apb_prescaler_index];\n  return hclk_freq >> apb_prescaler;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c50",
            "calling": [
                "UART_SetConfig"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_divider_08003c50"
        },
        "FUN_080065c0": {
            "renaming": {
                "FUN_080065c0": "decode_data_080065c0",
                "param_1": "input_param",
                "param_2": "input_data",
                "param_3": "output_size",
                "param_4": "input_param_2",
                "param_5": "process_byte",
                "iVar1": "process_byte_result",
                "uVar2": "max_output_size",
                "uVar3": "output_size_increment",
                "bVar4": "current_byte_value_is_not_4"
            },
            "code": "undefined4 decode_data_080065c0(undefined4 input_param,uint *input_data,uint *output_size,undefined4 input_param_2,code *process_byte){\\n  int current_byte_index;\\n  uint max_output_size = input_data[4];\\n  if ((int)input_data[4] < (int)input_data[2]) {\\n    max_output_size = input_data[2];\\n  }\\n  *output_size = max_output_size;\\n  if (*(char *)((int)input_data + 0x43) != \"\\0\") {\\n    *output_size = max_output_size + 1;\\n  }\\n  if ((int)(*input_data << 0x1a) < 0) {\\n    *output_size = *output_size + 2;\\n  }\\n  uint current_byte_value = *input_data & 6;\\n  if (current_byte_value == 0) {\\n    for (; (int)current_byte_value < (int)(input_data[3] - *output_size); current_byte_value = current_byte_value + 1) {\\n      int process_byte_result = (*process_byte)(input_param,input_param_2,(int)input_data + 0x19,1);\\n      if (process_byte_result == -1) {\\n        return 0xffffffff;\\n      }\\n    }\\n  }\\n  uint output_size_increment = (uint)*(byte *)((int)input_data + 0x43);\\n  if (output_size_increment != 0) {\\n    output_size_increment = 1;\\n  }\\n  uint current_output_size = output_size_increment;\\n  if ((int)(*input_data << 0x1a) < 0) {\\n    *(undefined *)((int)input_data + output_size_increment + 0x43) = 0x30;\\n    current_output_size = output_size_increment + 2;\\n    *(undefined *)((int)input_data + output_size_increment + 0x44) = *(undefined *)((int)input_data + 0x45);\\n  }\\n  int process_byte_result = (*process_byte)(input_param,input_param_2,(int)input_data + 0x43,current_output_size);\\n  if (process_byte_result != -1) {\\n    uint output_data_size = input_data[3];\\n    bool current_byte_value_is_not_4 = (*input_data & 6) != 4;\\n    if (current_byte_value_is_not_4) {\\n      output_data_size = 0;\\n    }\\n    uint output_size_difference = 0;\\n    if (!current_byte_value_is_not_4) {\\n      output_data_size = output_data_size - *output_size;\\n    }\\n    if (!current_byte_value_is_not_4) {\\n      output_data_size = output_data_size & ~((int)output_data_size >> 0x1f);\\n    }\\n    if ((int)input_data[4] < (int)input_data[2]) {\\n      output_size_difference = output_data_size + (input_data[2] - input_data[4]);\\n    }\\n    while( true ) {\\n      if (output_size_difference == current_output_size) {\\n        return 0;\\n      }\\n      int process_byte_result = (*process_byte)(input_param,input_param_2,(int)input_data + 0x1a,1);\\n      if (process_byte_result == -1) break;\\n      current_output_size = current_output_size + 1;\\n    }\\n  }\\n  return 0xffffffff;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080065c0",
            "calling": [
                "_printf_i"
            ],
            "imported": false,
            "current_name": "decode_data_080065c0"
        },
        "FUN_080054d4": {
            "renaming": {
                "FUN_080054d4": "receive_data_080054d4",
                "obj": "serial_obj",
                "c": "received_char",
                "uVar1": "is_rx_active"
            },
            "code": "int receive_data_080054d4(serial_t *serial_obj, uchar *received_char) {\n  uint8_t is_rx_active;\n  if (serial_obj == NULL) {\n    return -1;\n  }\n  is_rx_active = serial_rx_active(serial_obj);\n  if (is_rx_active == 0) {\n    *received_char = serial_obj->recv;\n    HAL_UART_Receive_IT(*(UART_HandleTypeDef **) (PTR_uart_handlers_0800550c + (uint) serial_obj->index * 4), &serial_obj->recv, 1);\n    return 0;\n  }\n  return -1;\n}",
            "called": [
                "serial_rx_active",
                "HAL_UART_Receive_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054d4",
            "calling": [
                "_rx_complete_irq"
            ],
            "imported": false,
            "current_name": "receive_data_080054d4"
        },
        "FUN_0800715c": {
            "renaming": {
                "std::ctype_byname<wchar_t>::FUN_0800715c": "set_ctype_flags",
                "PTR_id_080071f0": "ptr_id_080071f0",
                "PTR_id_080071f4": "ptr_id_080071f4",
                "PTR_id_080071f8": "ptr_id_080071f8",
                "PTR_id_080071fc": "ptr_id_080071fc",
                "PTR_id_08007200": "ptr_id_08007200",
                "PTR_id_08007204": "ptr_id_08007204",
                "PTR_id_08007208": "ptr_id_08007208",
                "PTR_id_0800720c": "ptr_id_0800720c",
                "PTR_id_08007210": "ptr_id_08007210",
                "PTR_id_08007214": "ptr_id_08007214",
                "PTR_id_08007218": "ptr_id_08007218",
                "PTR_id_0800721c": "ptr_id_0800721c",
                "FUN_0800715c": "set_ctype_flags_0800715c"
            },
            "code": "void set_ctype_flags_0800715c(void)\n{\n    int* PTR_id_080071f0 = (int*)PTR_id_080071f0;\n    int* PTR_id_080071f4 = (int*)PTR_id_080071f4;\n    int* PTR_id_080071f8 = (int*)PTR_id_080071f8;\n    int* PTR_id_080071fc = (int*)PTR_id_080071fc;\n    int* PTR_id_08007200 = (int*)PTR_id_08007200;\n    int* PTR_id_08007204 = (int*)PTR_id_08007204;\n    int* PTR_id_08007208 = (int*)PTR_id_08007208;\n    int* PTR_id_0800720c = (int*)PTR_id_0800720c;\n    int* PTR_id_08007210 = (int*)PTR_id_08007210;\n    int* PTR_id_08007214 = (int*)PTR_id_08007214;\n    int* PTR_id_08007218 = (int*)PTR_id_08007218;\n    int* PTR_id_0800721c = (int*)PTR_id_0800721c;\n    \n    for (int i = 0; i < 12; i++) {\n        if (-1 < *(PTR_id_080071f0 + i) << 0x1f) {\n            *(undefined4 *)(PTR_id_080071f0 + i) = 1;\n        }\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800715c",
            "calling": [],
            "imported": false,
            "current_name": "set_ctype_flags_0800715c"
        },
        "FUN_08004d40": {
            "renaming": {
                "FUN_08004d40": "wait_forever_08004d40",
                "msg": "message",
                "val": "value"
            },
            "code": "void wait_forever_08004d40(char *message, int value) {\n    while(true) {\n        // Do nothing\n    }\n}",
            "called": [
                "_Error_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d40",
            "calling": [
                "SystemClock_Config",
                "_Error_Handler"
            ],
            "imported": false,
            "current_name": "wait_forever_08004d40"
        },
        "FUN_08004d44": {
            "renaming": {
                "FUN_08004d44": "set_bit_and_mask_08004d44",
                "DAT_08004d84": "data",
                "DAT_08004d88": "mask",
                "DAT_08004d8c": "ptr_data"
            },
            "code": "void set_bit_and_mask_08004d44(uint *DAT_08004d84) {\n  uint *DAT_08004d8c = DAT_08004d84;\n  *DAT_08004d84 |= 1;\n  DAT_08004d8c[1] &= 0xffff80ff;\n  *DAT_08004d8c &= 0xfef6ffff;\n  *DAT_08004d8c &= 0xfffbffff;\n  DAT_08004d8c[1] &= 0xff80ffff;\n  DAT_08004d8c[2] = 0x9f0000;\n  *(uint *)(DAT_08004d84 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d44",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "set_bit_and_mask_08004d44"
        },
        "FUN_0800282c": {
            "renaming": {
                "FUN_0800282c": "update_gpio_pin_0800282c",
                "GPIO_Pin": "pin",
                "PTR_08002844": "gpio_ptr",
                "DAT_08002844": "gpio_data"
            },
            "code": "void update_gpio_pin_0800282c(uint16_t pin)\n{\n  uint* PTR_08002844 = (uint*)(DAT_08002844 + 0x14);\n  uint current_pin_state = *PTR_08002844 & (uint)pin;\n  if (current_pin_state != 0) {\n    *PTR_08002844 = (uint)pin;\n    HAL_GPIO_EXTI_Callback(pin);\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800282c",
            "calling": [
                "EXTI1_IRQHandler",
                "EXTI2_IRQHandler",
                "EXTI0_IRQHandler",
                "EXTI3_IRQHandler",
                "EXTI4_IRQHandler",
                "EXTI15_10_IRQHandler",
                "EXTI9_5_IRQHandler"
            ],
            "imported": false,
            "current_name": "update_gpio_pin_0800282c"
        },
        "FUN_080015b2": {
            "renaming": {
                "MAX31855::FUN_080015b2": "read_MAX31855_device",
                "this": "device",
                "cs": "chip_select_pin",
                "sck": "clock_pin",
                "so": "data_pin",
                "uVar2": "i",
                "uVar3": "read_register",
                "iVar1": "read_bit",
                "FUN_080015b2": "read_MAX31855_device_080015b2"
            },
            "code": "unsigned long read_MAX31855_device_080015b2(MAX31855 *device)\n{\n  int read_bit;\n  uint32_t read_register = 0;\n  digitalWrite((uint)device->chip_select_pin, LOW);\n  for (uint32_t i = 0; i < 32; i++) {\n    digitalWrite((uint)device->clock_pin, HIGH);\n    read_bit = digitalRead((uint)device->data_pin);\n    if (read_bit != 0) {\n      read_register = read_register | (1 << (i & 0xff));\n    }\n    digitalWrite((uint)device->clock_pin, LOW);\n  }\n  digitalWrite((uint)device->chip_select_pin, HIGH);\n  return read_register;\n}",
            "called": [
                "digitalWrite",
                "digitalRead"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b2",
            "calling": [
                "readThermocouple"
            ],
            "imported": false,
            "current_name": "read_MAX31855_device_080015b2"
        },
        "FUN_0800040c": {
            "renaming": {
                "FUN_0800040c": "bit_shift_0800040c",
                "param_1": "input",
                "uVar1": "shifted_input",
                "uVar2": "shift_amount",
                "iVar3": "leading_zeroes",
                "uVar4": "shift_amount_2",
                "in_r12": "shift_amount_inverse",
                "bVar5": "is_negative_shift_amount",
                "bVar6": "is_zero_shift_amount",
                "bVar7": "is_overflow_shift_amount"
            },
            "code": "ulonglong bit_shift_0800040c(uint input)\n{\n  uint leading_zeroes = count_leading_zeroes(input);\n  uint shift_amount = leading_zeroes + 21;\n  if (shift_amount < 32)\n  {\n    uint shifted_input = input << (shift_amount & 0xff);\n    shifted_input |= input >> ((12 - leading_zeroes) & 0xff);\n    return ((ulonglong)shifted_input << 32) | 0;\n  }\n  else if (shift_amount < 1075)\n  {\n    uint shifted_input = input << (shift_amount & 0xff);\n    shifted_input |= 0U >> ((32 - shift_amount) & 0xff);\n    return ((ulonglong)shifted_input << 32) | (0 << (shift_amount & 0xff));\n  }\n  else\n  {\n    uint shift_amount_inverse = ~(shift_amount - 1075);\n    if (shift_amount_inverse > 30)\n    {\n      return (ulonglong)(input >> (shift_amount_inverse - 31));\n    }\n    else\n    {\n      int shift_amount_2 = shift_amount_inverse - 19;\n      if (shift_amount_2 == 0 || (shift_amount_inverse - 31) < 0 != SCARRY4(shift_amount_inverse - 31, 12))\n      {\n        shift_amount_inverse++;\n        return ((ulonglong)input >> (shift_amount_inverse & 0xff)) | ((ulonglong)(input << ((32 - shift_amount_inverse) & 0xff)) << 32);\n      }\n      else\n      {\n        return (ulonglong)(input >> (32 - (12 - shift_amount_2))) | ((ulonglong)(input << shift_amount_2) << 32);\n      }\n    }\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800040c",
            "calling": [
                "SetSampleTime",
                "printFloat",
                "readThermocouple",
                "SetTunings",
                "loop"
            ],
            "imported": false,
            "current_name": "bit_shift_0800040c"
        },
        "FUN_08006088": {
            "renaming": {
                "FUN_08006088": "handle_external_interrupt_08006088"
            },
            "code": "void handle_external_interrupt_08006088(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(4);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006088",
            "calling": [],
            "imported": false,
            "current_name": "handle_external_interrupt_08006088"
        },
        "FUN_08006eb0": {
            "renaming": {
                "FUN_08006eb0": "execute_command_08006eb0",
                "param_1": "command_result",
                "param_2": "command_index",
                "param_3": "signal",
                "param_4": "status",
                "_Var1": "pid",
                "uVar2": "result",
                "iVar3": "command",
                "pcVar4": "command_function",
                "*(undefined4 *)(iVar3 + param_2 * 4)": "command_list[command_index]",
                "_getpid_r": "getpid",
                "_kill_r": "kill"
            },
            "code": "int execute_command_08006eb0(int* command_result, uint32_t command_index, int signal, int status) {\n  pid_t pid;\n  int result;\n  code* command;\n  if (command_index > 31) {\n    *command_result = 22;\n    return -1;\n  }\n  command = command_list[command_index];\n  if (command != NULL) {\n    if (command == (code*)1) {\n      *command_result = 22;\n      return 1;\n    }\n    if (command == (code*)-1) {\n      *command_result = 22;\n      return -1;\n    }\n    command_list[command_index] = NULL;\n    command(command_index);\n    return 0;\n  }\n  pid = getpid();\n  result = kill(pid, signal);\n  return result;\n}",
            "called": [
                "_getpid_r",
                "_kill_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eb0",
            "calling": [
                "raise"
            ],
            "imported": false,
            "current_name": "execute_command_08006eb0"
        },
        "FUN_08004e5c": {
            "renaming": {
                "FUN_08004e5c": "handle_timer_interrupt_08004e5c",
                "PTR_timer_handles_08004e6c": "PTR_timer_handles_08004e6c",
                "TIM_HandleTypeDef": "TIM_HandleTypeDef",
                "HAL_TIM_IRQHandler": "HAL_TIM_IRQHandler"
            },
            "code": "void handle_timer_interrupt_08004e5c(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef **)(PTR_timer_handles_08004e6c + 0xc);\n  if (timer_handle != NULL)\n  {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e5c",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004e5c"
        },
        "FUN_08004df4": {
            "renaming": {
                "FUN_08004df4": "get_stimer_from_timer_handle_08004df4",
                "htim": "timer_handle"
            },
            "code": "stimer_t* get_stimer_from_timer_handle_08004df4(TIM_HandleTypeDef* timer_handle)\n{\n    int timer_handle_offset = -1;\n    return (stimer_t*)&timer_handle[timer_handle_offset].Lock;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df4",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIM_OC_DelayElapsedCallback"
            ],
            "imported": false,
            "current_name": "get_stimer_from_timer_handle_08004df4"
        },
        "FUN_08004bb0": {
            "renaming": {
                "FUN_08004bb0": "set_gpio_pin_mode_08004bb0",
                "pin": "pin_name",
                "mode": "pin_mode",
                "pull": "pin_pull",
                "uVar1": "pin_index",
                "GPIOx": "gpio_port",
                "tmpreg": "unused",
                "GPIO_InitStructure": "gpio_init",
                "DAT_08004c28": "unknown_data_1",
                "DAT_08004c2c": "unknown_data_2"
            },
            "code": "void set_gpio_pin_mode_08004bb0(PinName_conflict pin, uint32_t mode, uint32_t pull)\n{\n  uint32_t pin_index = (uint32_t)pin;\n  GPIO_TypeDef *gpio_port = set_GPIO_Port_Clock((pin_index << 24) >> 28);\n  uint32_t pin_mask = 1 << (pin_index & 0xf) & 0xffff;\n  GPIO_InitTypeDef gpio_init;\n  gpio_init.Pin = pin_mask;\n  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;\n  *(uint32_t *)(DAT_08004c28 + 0x18) |= 1;\n  if ((pin_index - 0xd & 0xff) < 2) {\n    *(uint32_t *)(DAT_08004c2c + 4) &= 0xf8ffffff;\n    *(uint32_t *)(DAT_08004c2c + 4) |= 0x4000000;\n  }\n  if (((pin_index == 0xf) || (pin_index == 0x13)) || (pin_index == 0x14)) {\n    *(uint32_t *)(DAT_08004c2c + 4) &= 0xf8ffffff;\n    *(uint32_t *)(DAT_08004c2c + 4) |= 0x2000000;\n  }\n  gpio_init.Mode = mode;\n  gpio_init.Pull = pull;\n  HAL_GPIO_Init(gpio_port, &gpio_init);\n  return;\n}",
            "called": [
                "HAL_GPIO_Init",
                "set_GPIO_Port_Clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bb0",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "set_gpio_pin_mode_08004bb0"
        },
        "FUN_08004df8": {
            "renaming": {
                "FUN_08004df8": "handle_timer_interrupt_08004df8",
                "htim": "timer_handle",
                "psVar1": "timer_obj",
                "get_timer_obj": "get_timer_object",
                "irqHandleOC": "irq_handle_output_compare",
                "_func_void_stimer_t_ptr_uint32_t": "function_pointer",
                "HAL_TIM_ACTIVE_CHANNEL_1": "active_channel_1"
            },
            "code": "void handle_timer_interrupt_08004df8(TIM_HandleTypeDef *timer_handle)\n{\n  stimer_t *timer_obj;\n  \n  timer_obj = get_timer_object(timer_handle);\n  if ((timer_obj->irq_handle_output_compare != (_func_void_stimer_t_ptr_uint32_t *)0x0) &&\n     (timer_handle->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) {\n    (*timer_obj->irq_handle_output_compare)(timer_obj,0);\n  }\n  return;\n}",
            "called": [
                "get_timer_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df8",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004df8"
        },
        "FUN_08001510": {
            "renaming": {
                "FUN_08001510::FUN_08001510": "initialize_print",
                "this": "instance",
                "rs": "register_select",
                "enable": "enable_pin",
                "d0": "data_pin_0",
                "d1": "data_pin_1",
                "d2": "data_pin_2",
                "d3": "data_pin_3",
                "FUN_08001510": "initialize_print_08001510"
            },
            "code": "initialize_print_08001510 * __thiscall initialize_print_08001510(initialize_print_08001510 *this, uint8_t rs, uint8_t enable, uint8_t data_0, uint8_t data_1, uint8_t data_2, uint8_t data_3) {\\n  this->write_error = 0;\\n  this->_vptr_Print = (_func_int_varargs **)PTR_PTR_write_1_0800154c;\\n  init(this, \"\\x01\", rs, 0xff, enable, data_0, data_1, data_2, data_3, \"\\0\", \"\\0\", \"\\0\", \"\\0\");\\n  return this;\\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001510",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "initialize_print_08001510"
        },
        "FUN_08002af8": {
            "renaming": {
                "FUN_08002af8": "I2C_Configure_08002af8",
                "*hi2c": "*handle",
                "*pData": "*data",
                "Size": "size",
                "XferOptions": "transfer_options",
                "HVar1": "result",
                "pIVar2": "instance",
                "tmpreg": "control_register"
            },
            "code": "HAL_StatusTypeDef_conflict I2C_Configure_08002af8(I2C_HandleTypeDef* handle, uint8_t* data, uint16_t size, uint32_t transfer_options)\n{\n    HAL_StatusTypeDef_conflict result;\n    I2C_TypeDef* instance;\n    uint32_t control_register;\n\n    if (handle->State == HAL_I2C_STATE_LISTEN) {\n        if (data == NULL || size == 0 || handle->Lock == HAL_LOCKED) {\n            result = HAL_ERROR;\n        }\n        else {\n            handle->Lock = HAL_LOCKED;\n            instance = handle->Instance;\n            if ((instance->CR1 & 1) == 0) {\n                instance->CR1 |= 1;\n            }\n            instance->CR1 &= 0xfffff7ff;\n            handle->State = HAL_I2C_STATE_BUSY_TX_LISTEN;\n            handle->Mode = HAL_I2C_MODE_SLAVE;\n            result = HAL_OK;\n            handle->ErrorCode = 0;\n            handle->pBuffPtr = data;\n            handle->XferCount = size;\n            handle->XferOptions = transfer_options;\n            handle->XferSize = handle->XferCount;\n            handle->Lock = HAL_UNLOCKED;\n            instance->CR2 |= 0x700;\n        }\n    }\n    else {\n        result = HAL_BUSY;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002af8",
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "imported": false,
            "current_name": "I2C_Configure_08002af8"
        },
        "FUN_080028de": {
            "renaming": {
                "FUN_080028de": "handle_i2c_events_080028de",
                "*hi2c": "*i2c_handle",
                "uVar1": "transfer_options",
                "pIVar2": "i2c_instance",
                "tmpreg": "i2c_cr1",
                "tmpreg_1": "i2c_cr2",
                "tmpreg_2": "transfer_count",
                "tmpreg_3": "event_count",
                "tmpreg_4": "addressing_mode",
                "tmpreg_5": "previous_state",
                "tmpreg_6": "i2c_mode",
                "tmpreg_7": "i2c_state"
            },
            "code": "HAL_StatusTypeDef_conflict handle_i2c_events_080028de(I2C_HandleTypeDef *i2c_handle) {\n  uint32_t transfer_options = i2c_handle->XferOptions;\n  I2C_TypeDef *i2c_instance = i2c_handle->Instance;\n  uint32_t transfer_count = i2c_handle->XferCount;\n  uint32_t event_count = i2c_handle->EventCount;\n  uint32_t addressing_mode = (i2c_handle->Init).AddressingMode;\n  uint32_t i2c_cr1 = i2c_instance->CR1;\n  uint32_t i2c_cr2 = i2c_instance->CR2;\n  uint32_t previous_state = i2c_handle->PreviousState;\n  uint32_t i2c_mode = i2c_handle->Mode;\n  uint32_t i2c_state = i2c_handle->State;\n\n  if ((i2c_state == HAL_I2C_STATE_BUSY_RX) &&\n     ((event_count != 0 || (i2c_mode != HAL_I2C_MODE_MEM)))) {\n    if ((event_count == 0) && (addressing_mode == 0xc000)) {\n      i2c_cr1 |= 0x100;\n      i2c_handle->EventCount = event_count + 1;\n    }\n    else {\n      if (transfer_count == 0) {\n        i2c_cr1 |= 0x200;\n      }\n      else if (transfer_count == 1) {\n        if (transfer_options == 0xffff0000) {\n          i2c_cr1 &= 0xfffffbff;\n          if ((i2c_cr2 & 0x800) == 0) {\n            i2c_cr1 |= 0x200;\n          }\n          else {\n            i2c_cr1 &= 0xfffffbff;\n          }\n        }\n        else if (((transfer_options == 4) || (transfer_options == 8)) || (previous_state == 0x12)) {\n          i2c_cr1 &= 0xfffffbff;\n          i2c_cr1 |= 0x200;\n        }\n        else if (transfer_options == 2) {\n          i2c_cr1 |= 0x400;\n        }\n        else {\n          i2c_cr1 &= 0xfffffbff;\n        }\n      }\n      else if (transfer_count == 2) {\n        if (transfer_options == 2) {\n          i2c_cr1 |= 0x400;\n        }\n        else {\n          i2c_cr1 |= 0x800;\n          i2c_cr1 &= 0xfffffbff;\n        }\n        if ((i2c_cr2 & 0x800) != 0) {\n          i2c_cr2 |= 0x1000;\n        }\n      }\n      else {\n        i2c_cr1 |= 0x400;\n        if ((i2c_cr2 & 0x800) != 0) {\n          i2c_cr2 |= 0x1000;\n        }\n      }\n      i2c_handle->EventCount = 0;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028de",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_i2c_events_080028de"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "configure_I2C_08002848",
                "hi2c": "i2c_handle",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "Mode": "mode",
                "EventCount": "event_count",
                "Instance": "i2c_instance",
                "DR": "data_register",
                "Devaddress": "device_address",
                "Init": "i2c_init",
                "AddressingMode": "addressing_mode",
                "State": "i2c_state",
                "HAL_I2C_MODE_MEM": "HAL_I2C_MODE_MEMORY",
                "HAL_I2C_STATE_BUSY_TX": "HAL_I2C_STATE_BUSY_TRANSMITTING"
            },
            "code": "HAL_StatusTypeDef_conflict configure_I2C_08002848(I2C_HandleTypeDef *i2c_handle)\n{\n  if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n    if (i2c_handle->EventCount == 0) {\n      i2c_handle->Instance->DR = i2c_handle->Devaddress & 0xfe;\n    }\n    else {\n      i2c_handle->Instance->DR = i2c_handle->Devaddress & 0xff | 1;\n    }\n  }\n  else if ((i2c_handle->Init).AddressingMode == 0x4000) {\n    if (i2c_handle->State == HAL_I2C_STATE_BUSY_TX) {\n      i2c_handle->Instance->DR = i2c_handle->Devaddress & 0xfe;\n    }\n    else {\n      i2c_handle->Instance->DR = i2c_handle->Devaddress & 0xff | 1;\n    }\n  }\n  else if (i2c_handle->EventCount == 0) {\n    i2c_handle->Instance->DR = (i2c_handle->Devaddress << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (i2c_handle->EventCount == 1) {\n    i2c_handle->Instance->DR = (i2c_handle->Devaddress << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "configure_I2C_08002848"
        },
        "FUN_08004e70": {
            "renaming": {
                "FUN_08004e70": "get_i2c_struct_08004e70",
                "hi2c": "i2c_handle",
                "i2c_t": "i2c_struct",
                "EventCount": "event_count",
                "i2c_struct_ptr": "i2c_struct_pointer"
            },
            "code": "typedef struct i2c_struct { int EventCount; } i2c_t; \n\ni2c_t * get_i2c_struct_08004e70(I2C_HandleTypeDef *i2c_handle) { \n    i2c_t *i2c_struct_ptr = (i2c_t *)&i2c_handle[-1].EventCount; \n    return i2c_struct_ptr; \n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e70",
            "calling": [
                "HAL_I2C_AddrCallback",
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "imported": false,
            "current_name": "get_i2c_struct_08004e70"
        },
        "FUN_080020f0": {
            "renaming": {
                "FUN_080020f0": "check_adc_conversion_080020f0",
                "hadc": "adc_handle",
                "uVar1": "start_time",
                "uVar2": "current_time",
                "pAVar3": "adc_instance",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "HAL_StatusTypeDef check_adc_conversion_080020f0(ADC_HandleTypeDef *adc_handle)\n{\n  uint32_t start_time;\n  uint32_t current_time;\n  ADC_TypeDef *adc_instance;\n  adc_instance = adc_handle->Instance;\n  if ((adc_instance->CR2 & ADC_CR2_ADON) == 0) {\n    return HAL_OK;\n  }\n  adc_instance->CR2 = adc_instance->CR2 & ~(ADC_CR2_ADON);\n  start_time = HAL_GetTick();\n  do {\n    if ((adc_handle->Instance->CR2 & ADC_CR2_ADON) == 0) {\n      return HAL_OK;\n    }\n    current_time = HAL_GetTick();\n  } while (current_time - start_time < 3);\n  adc_handle->State |= ADC_STATE_ERROR_INTERNAL;\n  adc_handle->ErrorCode |= ADC_ERROR_INTERNAL;\n  return HAL_ERROR;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080020f0",
            "calling": [
                "HAL_ADC_Init",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_DeInit",
                "HAL_ADC_Stop"
            ],
            "imported": false,
            "current_name": "check_adc_conversion_080020f0"
        },
        "FUN_08006e10": {
            "renaming": {
                "FUN_08006e10": "extract_info_08006e10",
                "param_1": "process_id",
                "param_2": "info_array",
                "uVar1": "flags",
                "iVar2": "length",
                "local_18": "process_id",
                "local_14": "temp_ptr",
                "DAT_08006e8c": "ptr_DAT_08006e8c",
                "*param_2": "*info_array",
                "param_2[3]": "*(ushort *)(info_array + 3)",
                "param_2[4]": "info_array[4]",
                "param_2[5]": "info_array[5]",
                "new_ptr": "new_ptr"
            },
            "code": "void extract_info_08006e10(int process_id, int *info_array) {\n    ushort flags;\n    int length;\n    int *temp_ptr;\n\n    if (-1 < (int)((uint)*(ushort *)(info_array + 3) << 0x1e)) {\n        length = process_id;\n        temp_ptr = info_array;\n        flags = __swhatbuf_r(process_id, info_array, &length, &temp_ptr);\n        int *new_ptr = _malloc_r(process_id, length);\n        if (new_ptr != 0) {\n            *(undefined4 *)(process_id + 0x28) = DAT_08006e8c;\n            *info_array = new_ptr;\n            *(ushort *)(info_array + 3) = *(ushort *)(info_array + 3) | 0x80;\n            info_array[4] = new_ptr;\n            info_array[5] = length;\n            if ((temp_ptr != (int *)0x0) && (_isatty_r(process_id, (int)*(short *)((int)info_array + 0xe)) != 0)) {\n                *(ushort *)(info_array + 3) = *(ushort *)(info_array + 3) & 0xfffc | 1;\n            }\n            *(ushort *)(info_array + 3) = flags | *(ushort *)(info_array + 3);\n            return;\n        }\n        if ((int)(short)*(ushort *)(info_array + 3) << 0x16 < 0) {\n            return;\n        }\n        *(ushort *)(info_array + 3) = *(ushort *)(info_array + 3) & 0xfffc | 2;\n    }\n    *info_array = (int)info_array + 0x47;\n    info_array[4] = (int)info_array + 0x47;\n    info_array[5] = 1;\n    return;\n}",
            "called": [
                "_malloc_r",
                "_isatty_r",
                "__swhatbuf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e10",
            "calling": [
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "extract_info_08006e10"
        },
        "FUN_0800607e": {
            "renaming": {
                "FUN_0800607e": "handle_GPIO_interrupt_0800607e",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void handle_GPIO_interrupt_0800607e(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800607e",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_interrupt_0800607e"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e74": "i2c_transfer_08004e74",
                "hi2c": "handle",
                "TransferDirection": "transfer_direction",
                "AddrMatchCode": "addr_match_code",
                "piVar1": "i2c_obj",
                "get_i2c_obj": "get_i2c_object",
                "i2cTxRxBufferSize": "tx_rx_buffer_size",
                "slaveMode": "slave_mode",
                "i2c_onSlaveTransmit": "on_slave_transmit",
                "i2cTxRxBuffer": "tx_rx_buffer",
                "HAL_I2C_Slave_Sequential_Transmit_IT": "HAL_I2C_Slave_Sequential_Transmit_IT",
                "HAL_I2C_Slave_Sequential_Receive_IT": "HAL_I2C_Slave_Sequential_Receive_IT"
            },
            "code": "void i2c_transfer_08004e74(I2C_HandleTypeDef *handle, uint8_t transfer_direction, uint16_t addr_match_code) {\\n  i2c_t *i2c_obj = get_i2c_object(handle);\\n  if ((uint)addr_match_code == (handle->Init).OwnAddress1) {\\n    if (transfer_direction == \"\\0\") {\\n      i2c_obj->tx_rx_buffer_size = \"\\0\";\\n      i2c_obj->slave_mode = \"\\0\";\\n      if (i2c_obj->on_slave_transmit != (_func_void *)0x0) {\\n        (*i2c_obj->on_slave_transmit)();\\n      }\\n      HAL_I2C_Slave_Sequential_Transmit_IT(handle, i2c_obj->tx_rx_buffer, (ushort)i2c_obj->tx_rx_buffer_size, 8);\\n      return;\\n    }\\n    i2c_obj->slave_mode = \"\\x01\";\\n    HAL_I2C_Slave_Sequential_Receive_IT(handle, i2c_obj->tx_rx_buffer, 0x20, 8);\\n  }\\n  return;\\n}",
            "called": [
                "HAL_I2C_Slave_Sequential_Transmit_IT",
                "HAL_I2C_Slave_Sequential_Receive_IT",
                "get_i2c_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "I2C_Slave_ADDR"
            ],
            "imported": false,
            "current_name": "i2c_transfer_08004e74"
        },
        "FUN_08004c30": {
            "renaming": {
                "FUN_08004c30": "set_GPIO_pin_state_08004c30",
                "port": "gpio_port",
                "pin": "gpio_pin",
                "val": "pin_state"
            },
            "code": "void set_GPIO_pin_state_08004c30(GPIO_TypeDef *gpio_port, uint32_t gpio_pin, uint32_t pin_state) {\n  if (pin_state == 0) {\n    HAL_GPIO_WritePin(gpio_port, (uint16_t)gpio_pin, GPIO_PIN_RESET);\n    return;\n  }\n  HAL_GPIO_WritePin(gpio_port, (uint16_t)gpio_pin, GPIO_PIN_SET);\n  return;\n}",
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c30",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "set_GPIO_pin_state_08004c30"
        },
        "FUN_08006092": {
            "renaming": {
                "FUN_08006092": "handle_GPIO_interrupt_08006092"
            },
            "code": "void handle_GPIO_interrupt_08006092(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006092",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_interrupt_08006092"
        },
        "FUN_08006f38": {
            "renaming": {
                "FUN_08006f38": "read_and_update_data_08006f38",
                "param_1": "file_descriptor",
                "param_2": "data_address",
                "iVar1": "read_bytes",
                "uVar2": "updated_data",
                "bVar3": "is_read_successful"
            },
            "code": "void read_and_update_data_08006f38(undefined4 file_descriptor, int data_address)\n{\n    int read_bytes;\n    uint updated_data;\n    bool is_read_successful;\n\n    read_bytes = _read_r(file_descriptor, (int)*(short *)(data_address + 0xe));\n    is_read_successful = read_bytes >= 0;\n\n    if (is_read_successful) {\n        updated_data = *(int *)(data_address + 0x54) + read_bytes;\n        *(uint *)(data_address + 0x54) = updated_data;\n    }\n    else {\n        updated_data = *(ushort *)(data_address + 0xc) & 0xffffefff;\n        *(short *)(data_address + 0xc) = (short)updated_data;\n    }\n}",
            "called": [
                "_read_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f38",
            "calling": [],
            "imported": false,
            "current_name": "read_and_update_data_08006f38"
        },
        "FUN_08004cce": {
            "renaming": {
                "FUN_08004cce": "find_pin_function_08004cce",
                "PinName_conflict": "PinName",
                "PinMap_conflict": "PinMap",
                "uVar1": "function_index"
            },
            "code": "uint32_t find_pin_function_08004cce(PinName_conflict pin, PinMap_conflict *map)\n{\n    uint32_t function_index = 0;\n    if (pin == NC) {\n        return 0xffffffff;\n    }\n    function_index = pinmap_find_function(pin, map);\n    return function_index;\n}",
            "called": [
                "pinmap_find_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cce",
            "calling": [
                "pwm_stop",
                "get_adc_channel",
                "get_pwm_channel",
                "uart_init"
            ],
            "imported": false,
            "current_name": "find_pin_function_08004cce"
        },
        "FUN_08006eac": {
            "renaming": {
                "FUN_08006eac": "do_nothing_08006eac"
            },
            "code": "\nvoid do_nothing_08006eac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eac",
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eac"
        },
        "FUN_08006f34": {
            "renaming": {
                "FUN_08006f34": "get_process_id_08006f34"
            },
            "code": "__pid_t get_process_id_08006f34(void)\n{\n  return 1;\n}",
            "called": [
                "_getpid"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f34",
            "calling": [
                "_raise_r"
            ],
            "imported": false,
            "current_name": "get_process_id_08006f34"
        },
        "FUN_08006eae": {
            "renaming": {
                "FUN_08006eae": "do_nothing_08006eae"
            },
            "code": "\nvoid do_nothing_08006eae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eae",
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eae"
        },
        "FUN_08005f5c": {
            "renaming": {
                "FUN_08005f5c": "do_nothing_08005f5c"
            },
            "code": "\nvoid do_nothing_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_08005f5c"
        },
        "FUN_08006fe4": {
            "renaming": {
                "FUN_08006fe4": "close_file_and_handle_error_08006fe4",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "errno_ptr",
                "iVar2": "close_result"
            },
            "code": "void close_file_and_handle_error_08006fe4(int *error_code, int file_descriptor)\n{\n  undefined *errno_ptr;\n  int close_result;\n  errno_ptr = PTR_errno_08007000;\n  *(undefined4 *)PTR_errno_08007000 = 0;\n  close_result = _close(file_descriptor);\n  if ((close_result == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006fe4",
            "calling": [
                "__sclose"
            ],
            "imported": false,
            "current_name": "close_file_and_handle_error_08006fe4"
        },
        "FUN_08003ad4": {
            "renaming": {
                "FUN_08003ad4": "configureClocks_08003ad4",
                "RCC_ClkInitTypeDef_conflict": "RCC_ClkInitTypeDef",
                "RCC_ClkInitStruct_conflict": "clkInit",
                "FLatency": "flashLatency",
                "puVar1": "flashLatencyPtr",
                "uVar2": "currentTick",
                "uVar3": "currentTick",
                "uVar4": "sysclkSrc"
            },
            "code": "HAL_StatusTypeDef configureClocks_08003ad4(RCC_ClkInitTypeDef *clkInit, uint32_t flashLatency)\n{\n    uint32_t *flashLatencyPtr = DAT_08003c34;\n    if (((*flashLatencyPtr & 7) < flashLatency) && (*flashLatencyPtr = *flashLatencyPtr & 0xfffffff8 | flashLatency, flashLatency != (*flashLatencyPtr & 7))) {\n        return HAL_ERROR;\n    }\n    if ((clkInit->ClockType & RCC_CLOCKTYPE_HCLK) != 0) {\n        DAT_08003c38[1] = DAT_08003c38[1] & 0xffffff0f | clkInit->AHBCLKDivider;\n    }\n    if ((clkInit->ClockType & RCC_CLOCKTYPE_SYSCLK) != 0) {\n        uint32_t sysclkSrc = clkInit->SYSCLKSource;\n        if (sysclkSrc == RCC_SYSCLKSOURCE_PLLCLK) {\n            if ((*DAT_08003c38 & 0x20000) == 0) {\n                return HAL_ERROR;\n            }\n        }\n        else if ((sysclkSrc != RCC_SYSCLKSOURCE_HSI) && ((*DAT_08003c38 & 2) == 0)) {\n            return HAL_ERROR;\n        }\n        DAT_08003c38[1] = sysclkSrc | DAT_08003c38[1] & 0xfffffffc;\n        uint32_t startTick = HAL_GetTick();\n        if (clkInit->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {\n            while ((DAT_08003c38[1] & 0xc) != 4) {\n                uint32_t currentTick = HAL_GetTick();\n                if (5000 < currentTick - startTick) {\n                    return HAL_TIMEOUT;\n                }\n            }\n        }\n        else if (clkInit->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {\n            while ((DAT_08003c38[1] & 0xc) != 8) {\n                uint32_t currentTick = HAL_GetTick();\n                if (5000 < currentTick - startTick) {\n                    return HAL_TIMEOUT;\n                }\n            }\n        }\n        else {\n            while ((DAT_08003c38[1] & 0xc) != 0) {\n                uint32_t currentTick = HAL_GetTick();\n                if (5000 < currentTick - startTick) {\n                    return HAL_TIMEOUT;\n                }\n            }\n        }\n    }\n    flashLatencyPtr = DAT_08003c34;\n    if ((flashLatency < (*DAT_08003c34 & 7)) && (*DAT_08003c34 = *DAT_08003c34 & 0xfffffff8 | flashLatency, flashLatency != (*flashLatencyPtr & 7))) {\n        return HAL_ERROR;\n    }\n    if ((clkInit->ClockType & RCC_CLOCKTYPE_PCLK1) != 0) {\n        DAT_08003c38[1] = DAT_08003c38[1] & 0xfffff8ff | clkInit->APB1CLKDivider;\n    }\n    if ((clkInit->ClockType & RCC_CLOCKTYPE_PCLK2) != 0) {\n        DAT_08003c38[1] = DAT_08003c38[1] & 0xffffc7ff | clkInit->APB2CLKDivider << 3;\n    }\n    uint32_t sysClockFreq = HAL_RCC_GetSysClockFreq();\n    *(uint32_t*)PTR_SystemCoreClock_08003c40 = sysClockFreq >> PTR_AHBPrescTable_08003c3c[(DAT_08003c38[1] << 0x18) >> 0x1c];\n    HAL_InitTick(0xf);\n    return HAL_OK;\n}",
            "called": [
                "HAL_GetTick",
                "HAL_RCC_GetSysClockFreq",
                "HAL_InitTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ad4",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configureClocks_08003ad4"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "set_channel_state_08004110",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelNState": "channel_state",
                "CCER": "ccer"
            },
            "code": "void set_channel_state_08004110(TIM_TypeDef *timer, uint32_t channel, uint32_t channel_state) {\n  uint32_t ccer_mask = ~(4 << (channel & 0xff));\n  uint32_t ccer_value = channel_state << (channel & 0xff);\n  timer->CCER = (timer->CCER & ccer_mask) | ccer_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "HAL_TIMEx_PWMN_Stop"
            ],
            "imported": false,
            "current_name": "set_channel_state_08004110"
        },
        "FUN_08004ce2": {
            "renaming": {
                "FUN_08004ce2": "is_pin_valid_08004ce2",
                "pin": "pin_name",
                "map": "pin_map"
            },
            "code": "_Bool is_pin_valid_08004ce2(PinName_conflict pin, PinMap_conflict *pin_map) {\n    if (pin == NC) {\n        return false;\n    }\n    while (true) {\n        if (pin_map->pin == NC) {\n            return false;\n        }\n        if (pin == pin_map->pin) {\n            break;\n        }\n        pin_map++;\n    }\n    return true;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ce2",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "is_pin_valid_08004ce2"
        },
        "FUN_08005568": {
            "renaming": {
                "FUN_08005568": "initialize_serial_08005568",
                "obj": "serial_obj",
                "callback": "tx_callback",
                "bVar1": "serial_index",
                "PTR_tx_callback_080055b0": "tx_callback_ptr",
                "PTR_tx_callback_obj_080055b4": "serial_obj_ptr",
                "PTR_uart_handlers_080055b8": "uart_handler_ptr"
            },
            "code": "void initialize_serial_08005568(serial_t *serial_obj, _func_int_serial_t_ptr *tx_callback)\n{\n  if (serial_obj == NULL) return;\n\n  uint8_t serial_index = serial_obj->index;\n  _func_int_serial_t_ptr **PTR_tx_callback_080055b0 = (_func_int_serial_t_ptr **) (PTR_tx_callback_080055b0 + serial_index * 4);\n  *PTR_tx_callback_080055b0 = tx_callback;\n\n  serial_t **PTR_tx_callback_obj_080055b4 = (serial_t **) (PTR_tx_callback_obj_080055b4 + serial_index * 4);\n  *PTR_tx_callback_obj_080055b4 = serial_obj;\n\n  HAL_NVIC_SetPriority(serial_obj->irq, 0, 2);\n  HAL_NVIC_EnableIRQ(serial_obj->irq);\n\n  UART_HandleTypeDef **PTR_uart_handlers_080055b8 = (UART_HandleTypeDef **) (PTR_uart_handlers_080055b8 + serial_index * 4);\n  HAL_UART_Transmit_IT(*PTR_uart_handlers_080055b8, serial_obj->tx_buff + serial_obj->tx_tail, 1);\n}",
            "called": [
                "HAL_NVIC_EnableIRQ",
                "HAL_UART_Transmit_IT",
                "HAL_NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005568",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "initialize_serial_08005568"
        },
        "FUN_08004478": {
            "renaming": {
                "FUN_08004478": "send_data_over_uart_08004478",
                "*huart": "*uart_handle",
                "pData": "data",
                "Size": "size",
                "Timeout": "timeout",
                "HVar1": "status",
                "Tickstart": "start_time"
            },
            "code": "HAL_StatusTypeDef send_data_over_uart_08004478(UART_HandleTypeDef *uart_handle, uint8_t *data, uint16_t size, uint32_t timeout)\n{\n  HAL_StatusTypeDef status;\n  uint32_t start_time;\n  if (uart_handle->gState != HAL_UART_STATE_READY) {\n    return HAL_BUSY;\n  }\n  if (data == NULL || size == 0 || uart_handle->Lock == HAL_LOCKED) {\n    return HAL_ERROR;\n  }\n  uart_handle->Lock = HAL_LOCKED;\n  uart_handle->ErrorCode = 0;\n  uart_handle->gState = HAL_UART_STATE_BUSY_TX;\n  start_time = HAL_GetTick();\n  uart_handle->TxXferSize = size;\n  uart_handle->TxXferCount = size;\n  while (uart_handle->TxXferCount > 0) {\n    uart_handle->TxXferCount--;\n    if (uart_handle->Init.WordLength == UART_WORDLENGTH_9B) {\n      status = UART_WaitOnFlagUntilTimeout(uart_handle, UART_FLAG_TXE, RESET, start_time, timeout);\n      if (status != HAL_OK) {\n        return HAL_TIMEOUT;\n      }\n      uart_handle->Instance->DR = *(uint16_t *)data & 0x1ff;\n      if (uart_handle->Init.Parity == UART_PARITY_NONE) {\n        data += 2;\n      }\n      else {\n        data++;\n      }\n    }\n    else {\n      status = UART_WaitOnFlagUntilTimeout(uart_handle, UART_FLAG_TXE, RESET, start_time, timeout);\n      if (status != HAL_OK) {\n        return HAL_TIMEOUT;\n      }\n      uart_handle->Instance->DR = *data;\n      data++;\n    }\n  }\n  status = UART_WaitOnFlagUntilTimeout(uart_handle, UART_FLAG_TC, RESET, start_time, timeout);\n  uart_handle->gState = HAL_UART_STATE_READY;\n  uart_handle->Lock = HAL_UNLOCKED;\n  if (status != HAL_OK) {\n    return HAL_TIMEOUT;\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_GetTick",
                "UART_WaitOnFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004478",
            "calling": [
                "uart_debug_write"
            ],
            "imported": false,
            "current_name": "send_data_over_uart_08004478"
        },
        "FUN_08005f5e": {
            "renaming": {
                "FUN_08005f5e": "initialize_EVP_PKEY_context_08005f5e",
                "ctx": "context"
            },
            "code": "void initialize_EVP_PKEY_context_08005f5e(EVP_PKEY_CTX *context)\n{\n    context = (EVP_PKEY_CTX *)0x3;\n    HAL_NVIC_SetPriorityGrouping(3);\n    init(context);\n    return;\n}",
            "called": [
                "init",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5e",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "initialize_EVP_PKEY_context_08005f5e"
        },
        "FUN_08005cb6": {
            "renaming": {
                "__thiscall Print::FUN_08005cb6": "print_character",
                "this": "print_obj",
                "c": "character",
                "sVar1": "result",
                "FUN_08005cb6": "print_character_08005cb6"
            },
            "code": "size_t __thiscall print_character_08005cb6(Print *print_obj, char character) {\n  size_t result = (**print_obj->_vptr_Print)(print_obj, (int)character);\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb6",
            "calling": [
                "printTo",
                "print",
                "printFloat"
            ],
            "imported": false,
            "current_name": "print_character_08005cb6"
        },
        "FUN_08003c70": {
            "renaming": {
                "FUN_08003c70": "get_HCLK_frequency_divided_by_APB_prescaler_08003c70",
                "uVar1": "HCLK_frequency",
                "DAT_08003c88": "data_08003c88",
                "PTR_APBPrescTable_08003c8c": "APB_prescaler_table",
                "prescaler_index": "index_of_prescaler",
                "prescaler_value": "prescaler_value"
            },
            "code": "uint32_t get_HCLK_frequency_divided_by_APB_prescaler_08003c70(void) {\n  uint32_t HCLK_frequency = HAL_RCC_GetHCLKFreq();\n  uint32_t prescaler_index = (uint)(*(int *)(DAT_08003c88 + 4) << 0x12) >> 0x1d;\n  uint32_t prescaler_value = PTR_APBPrescTable_08003c8c[prescaler_index];\n  return HCLK_frequency >> prescaler_value;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c70",
            "calling": [
                "UART_SetConfig",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_divided_by_APB_prescaler_08003c70"
        },
        "FUN_080053d4": {
            "renaming": {
                "FUN_080053d4": "transmit_data_via_uart_080053d4",
                "*data": "data",
                "size": "size",
                "PinName_conflict": "PinName_conflict",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef_conflict",
                "uint32_t": "uint32_t",
                "void *": "void *",
                "uVar2": "start_time_ms",
                "PTR_digitalPin_0800547c": "digitalPin_1",
                "pvVar3": "peripheral_ptr",
                "PinMap_conflict": "PinMap_conflict",
                "PTR_PinMap_UART_TX_08005480": "PinMap_UART_TX",
                "uart_handlers": "uart_handlers",
                "uVar5": "index",
                "byte": "byte",
                "PTR_serial_debug_08005488": "serial_debug",
                "uart_debug_init()": "uart_debug_init()"
            },
            "code": "size_t transmit_data_via_uart_080053d4(uint8_t *data, uint32_t size)\n{\n  PinName_conflict pin_name;\n  HAL_StatusTypeDef_conflict hal_status;\n  uint32_t start_time_ms;\n  void *peripheral_ptr;\n  uint32_t index;\n  \n  start_time_ms = HAL_GetTick();\n  pin_name = PTR_digitalPin_0800547c;\n  peripheral_ptr = pinmap_peripheral(pin_name, (PinMap_conflict *)PTR_PinMap_UART_TX_08005480);\n  if (peripheral_ptr == (void *)0x0) {\n    return 0;\n  }\n  index = 0;\n  while ((index < 5 && ((*(int *)(uart_handlers + index * 4) == 0 || (peripheral_ptr = pinmap_peripheral(pin_name, (PinMap_conflict *)PTR_PinMap_UART_TX_08005480), **(void ***)(uart_handlers + index * 4) != peripheral_ptr))))) {\n    index = index + 1 & 0xff;\n  }\n  if (4 < (byte)PTR_serial_debug_08005488[0x44]) {\n    uart_debug_init();\n    if (4 < (byte)PTR_serial_debug_08005488[0x44]) {\n      return 0;\n    }\n    index = (uint)(byte)PTR_serial_debug_08005488[0x44];\n  }\n  do {\n    hal_status = HAL_UART_Transmit(*(UART_HandleTypeDef **)(uart_handlers + index * 4), data, (uint16_t)size, 1000);\n    if (hal_status == HAL_OK) {\n      return size;\n    }\n  } while (HAL_GetTick() - start_time_ms < 1000);\n  return 0;\n}",
            "called": [
                "HAL_GetTick",
                "HAL_UART_Transmit",
                "pinmap_peripheral",
                "uart_debug_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053d4",
            "calling": [
                "_write"
            ],
            "imported": false,
            "current_name": "transmit_data_via_uart_080053d4"
        },
        "FUN_08002b84": {
            "renaming": {
                "FUN_08002b84": "receive_data_from_i2c_slave_08002b84",
                "hi2c": "i2c_handle",
                "pData": "data_buffer",
                "Size": "data_size",
                "XferOptions": "transfer_options",
                "HVar1": "status",
                "pIVar2": "i2c_instance"
            },
            "code": "HAL_StatusTypeDef_conflict receive_data_from_i2c_slave_08002b84(I2C_HandleTypeDef *i2c_handle, uint8_t *data_buffer, uint16_t data_size, uint32_t transfer_options)\n{\n  HAL_StatusTypeDef_conflict status;\n  I2C_TypeDef *i2c_instance;\n  uint32_t tmpreg;\n  \n  if (i2c_handle->State == HAL_I2C_STATE_LISTEN) {\n    if (data_buffer == NULL) {\n      status = HAL_ERROR;\n    }\n    else if (data_size == 0) {\n      status = HAL_ERROR;\n    }\n    else if (i2c_handle->Lock == HAL_LOCKED) {\n      status = HAL_BUSY;\n    }\n    else {\n      i2c_handle->Lock = HAL_LOCKED;\n      i2c_instance = i2c_handle->Instance;\n      if ((i2c_instance->CR1 & 1) == 0) {\n        i2c_instance->CR1 |= 1;\n      }\n      i2c_handle->Instance->CR1 &= 0xfffff7ff;\n      i2c_handle->State = HAL_I2C_STATE_BUSY_RX_LISTEN;\n      i2c_handle->Mode = HAL_I2C_MODE_SLAVE;\n      status = HAL_OK;\n      i2c_handle->ErrorCode = 0;\n      i2c_handle->pBuffPtr = data_buffer;\n      i2c_handle->XferCount = data_size;\n      i2c_handle->XferOptions = transfer_options;\n      i2c_handle->XferSize = i2c_handle->XferCount;\n      i2c_handle->Lock = HAL_UNLOCKED;\n      i2c_handle->Instance->CR2 |= 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b84",
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "imported": false,
            "current_name": "receive_data_from_i2c_slave_08002b84"
        },
        "FUN_08004c48": {
            "renaming": {
                "FUN_08004c48": "read_GPIO_PinState_08004c48",
                "port": "gpio_port",
                "pin": "gpio_pin",
                "GVar1": "pin_state"
            },
            "code": "uint32_t read_GPIO_PinState_08004c48(GPIO_TypeDef *gpio_port, uint32_t gpio_pin)\n{\n  GPIO_PinState pin_state;\n  pin_state = HAL_GPIO_ReadPin(gpio_port, (uint16_t)gpio_pin);\n  return (uint32_t)pin_state;\n}",
            "called": [
                "HAL_GPIO_ReadPin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c48",
            "calling": [
                "digitalRead"
            ],
            "imported": false,
            "current_name": "read_GPIO_PinState_08004c48"
        },
        "FUN_0800042c": {
            "renaming": {
                "FUN_0800042c": "calculate_shift_amount_0800042c",
                "param_1": "param",
                "uVar1": "result_upper",
                "uVar2": "shifted_param",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeroes",
                "uVar5": "shift_amount_plus_0x15",
                "uVar6": "sign_bit",
                "bVar7": "leading_zeroes_negative",
                "bVar8": "leading_zeroes_zero",
                "bVar9": "shift_amount_overflow",
                "in_r12": "unused_register"
            },
            "code": "uint64_t calculate_shift_amount_0800042c(uint32_t x) {\n  uint64_t n = 0;\n  if (x <= 0x0000FFFF) { n += 16; x <<= 16; }\n  if (x <= 0x00FFFFFF) { n += 8; x <<= 8; }\n  if (x <= 0x0FFFFFFF) { n += 4; x <<= 4; }\n  if (x <= 0x3FFFFFFF) { n += 2; x <<= 2; }\n  if (x <= 0x7FFFFFFF) { n += 1; }\n  return n;\n}\n\nuint64_t calculate_shift_amount_0800042c(uint32_t param) {\n  if (param == 0) {\n    return 0;\n  }\n  uint32_t sign_bit = param & 0x80000000;\n  uint32_t abs_param = (sign_bit < 0) ? -param : param;\n  uint64_t shift_amount = calculate_shift_amount_0800042c(abs_param) + 0x15;\n  bool is_shift_amount_negative = shift_amount < 0x20;\n  if (is_shift_amount_negative) {\n    shift_amount = (calculate_shift_amount_0800042c(abs_param) + 0x16) & 0xff;\n  }\n  uint64_t result = 0;\n  if (shift_amount < 0x20) {\n    uint32_t shifted_param = param << (shift_amount & 0xff);\n    uint32_t shifted_param2 = param >> ((0xcU - calculate_shift_amount_0800042c(abs_param) + 1) & 0xff);\n    result = (uint64_t)shifted_param | (uint64_t)shifted_param2;\n  }\n  else {\n    uint64_t mask = ((uint64_t)1 << (0x20 - (shift_amount & 0xff))) - 1;\n    uint32_t shifted_param = param << (calculate_shift_amount_0800042c(abs_param) - 0xb);\n    result = ((uint64_t)shifted_param | mask) << (shift_amount - 0x20);\n    if (is_shift_amount_negative) {\n      result = sign_bit | (shifted_param >> (0x20 - shift_amount));\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800042c",
            "calling": [
                "SetSampleTime",
                "printFloat",
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_shift_amount_0800042c"
        },
        "FUN_08005f6c": {
            "renaming": {
                "FUN_08005f6c": "mainLoop_08005f6c",
                "initVariant": "initializeVariant",
                "setup": "setupPins",
                "loop": "loopPins",
                "serialEventRun": "runSerialEvent",
                "DAT_08005f88": "serialEventAvailable"
            },
            "code": "int mainLoop_08005f6c(void)\n{\n  initializeVariant();\n  setupPins();\n  do {\n    do {\n      loopPins();\n    } while (DAT_08005f88() == 0);\n    runSerialEvent();\n  } while( true );\n}",
            "called": [
                "setup",
                "serialEventRun",
                "initVariant",
                "loop"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f6c",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "mainLoop_08005f6c"
        },
        "FUN_08005690": {
            "renaming": {
                "FUN_08005690": "handle_UART_interrupt_08005690",
                "PTR_uart_handlers_080056a4": "PTR_uart_handlers",
                "HAL_NVIC_ClearPendingIRQ": "clear_pending_IRQ",
                "USART1_IRQn": "USART1_IRQ",
                "HAL_UART_IRQHandler": "handle_UART_IRQ",
                "UART_HandleTypeDef": "UART_handler",
                "uart_handlers_ptr": "UART_handler_ptr"
            },
            "code": "void handle_UART_interrupt_08005690(void)\n{\n  HAL_NVIC_ClearPendingIRQ(USART1_IRQn);\n  UART_HandleTypeDef* uart_handlers_ptr = *(UART_HandleTypeDef **)PTR_uart_handlers_080056a4_080056a4;\n  HAL_UART_IRQHandler(uart_handlers_ptr);\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005690",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_08005690"
        },
        "FUN_08005cc0": {
            "renaming": {
                "__thiscall Print::FUN_08005cc0": "size_t Print::printMessage",
                "this": "printObject",
                "sVar1": "messageLength",
                "FUN_08005cc0": "printMessage_08005cc0"
            },
            "code": "size_t Print::printMessage_08005cc0(Print *printObject)\n{\n  size_t messageLength;\n  messageLength = (*printObject->_vptr_Print[1])(printObject, PTR_DAT_08005cd0, 2);\n  return messageLength;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cc0",
            "calling": [
                "println",
                "println"
            ],
            "imported": false,
            "current_name": "printMessage_08005cc0"
        },
        "FUN_0800706c": {
            "renaming": {
                "FUN_0800706c": "read_file_contents_0800706c",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "error_ptr",
                "iVar2": "read_result"
            },
            "code": "void read_file_contents_0800706c(int *error_code, int file_descriptor, char *buffer, int buffer_size) {\n  undefined *error_ptr;\n  int read_result;\n  error_ptr = PTR_errno_0800708c;\n  *(undefined4 *)PTR_errno_0800708c = 0;\n  read_result = _read(file_descriptor, buffer, buffer_size);\n  if ((read_result == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n  }\n  return;\n}",
            "called": [
                "_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800706c",
            "calling": [
                "__sread"
            ],
            "imported": false,
            "current_name": "read_file_contents_0800706c"
        },
        "FUN_08002624": {
            "renaming": {
                "FUN_08002624": "configure_GPIO_pins_08002624",
                "GPIOx": "GPIO_port",
                "GPIO_Init": "GPIO_Init",
                "pGVar1": "port",
                "uVar2": "pin_mask",
                "uVar3": "mode",
                "uVar4": "pull",
                "uVar5": "pin_pos",
                "uVar6": "speed",
                "uVar7": "reg_value",
                "iVar8": "reg_offset_bit",
                "uVar9": "reg_offset_value",
                "iVar10": "reg_offset",
                "tmpreg": "reg_offset_shift",
                "DAT_080027f8": "GPIO_AFIO_MAPR",
                "DAT_08002800": "GPIO_PORT_BIT_RESET_REGISTER",
                "DAT_080027fc": "GPIO_PORT_CONFIGURATION_REGISTER",
                "DAT_08002804": "GPIO_MODE_ANALOG",
                "DAT_08002808": "GPIO_MODE_IT_RISING_FALLING",
                "DAT_0800280c": "GPIOA",
                "CRH": "CRL",
                "BSRR": "BSRR",
                "BRR": "BRR",
                "Pin": "Pin",
                "Mode": "Mode",
                "Speed": "Speed",
                "Pull": "Pull"
            },
            "code": "void configure_GPIO_pins_08002624(GPIO_TypeDef *GPIO_port, GPIO_InitTypeDef *GPIO_Init)\n{\n  GPIO_TypeDef *port;\n  uint32_t pin_mask;\n  uint32_t speed;\n  uint32_t mode;\n  uint32_t pull;\n  uint32_t pin_pos;\n  uint32_t reg_value;\n  uint32_t reg_offset;\n  uint32_t reg_offset_bit;\n  uint32_t reg_offset_mask;\n  uint32_t reg_offset_shift;\n  uint32_t reg_offset_value;\n  \n  for (pin_pos = 0; pin_pos <= 15; pin_pos++)\n  {\n    pin_mask = 1 << pin_pos;\n    if (GPIO_Init->Pin & pin_mask)\n    {\n      mode = GPIO_Init->Mode;\n      if (mode == GPIO_MODE_AF_PP || mode == GPIO_MODE_AF_OD)\n      {\n        speed = GPIO_Init->Speed;\n        if (mode == GPIO_MODE_AF_PP)\n        {\n          speed += GPIO_SPEED_FREQ_HIGH;\n        }\n        reg_offset = pin_pos >> 3;\n        reg_offset_bit = (pin_pos & 0x07) << 2;\n        reg_offset_mask = ~(0x0F << reg_offset_bit);\n        reg_offset_shift = speed << reg_offset_bit;\n        reg_offset_value = reg_offset_shift & (0x0F << reg_offset_bit);\n        port = (reg_offset == 0) ? GPIO_port : (GPIO_TypeDef *)&GPIO_port->CRH;\n        reg_value = port->CRL;\n        reg_value &= reg_offset_mask;\n        reg_value |= reg_offset_value;\n        port->CRL = reg_value;\n      }\n      else\n      {\n        if (mode == GPIO_MODE_INPUT)\n        {\n          pull = GPIO_Init->Pull;\n          if (pull == GPIO_NOPULL)\n          {\n            reg_offset_value = 0x04;\n          }\n          else if (pull == GPIO_PULLUP)\n          {\n            GPIO_port->BSRR = pin_mask;\n            reg_offset_value = 0x08;\n          }\n          else\n          {\n            GPIO_port->BRR = pin_mask;\n            reg_offset_value = 0x08;\n          }\n          reg_offset = pin_pos >> 3;\n          reg_offset_bit = (pin_pos & 0x07) << 2;\n          reg_offset_mask = ~(0x0F << reg_offset_bit);\n          reg_offset_shift = reg_offset_value << reg_offset_bit;\n          reg_offset_value = reg_offset_shift & (0x0F << reg_offset_bit);\n          port = (reg_offset == 0) ? GPIO_port : (GPIO_TypeDef *)&GPIO_port->CRH;\n          reg_value = port->CRL;\n          reg_value &= reg_offset_mask;\n          reg_value |= reg_offset_value;\n          port->CRL = reg_value;\n        }\n      }\n    }\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002624",
            "calling": [
                "digital_io_init",
                "HAL_ADC_MspInit",
                "uart_init"
            ],
            "imported": false,
            "current_name": "configure_GPIO_pins_08002624"
        },
        "FUN_0800609c": {
            "renaming": {
                "FUN_0800609c": "handle_GPIO_EXTI_0800609c",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void handle_GPIO_EXTI_0800609c(void)\n{\n  uint32_t gpio_pin = GPIO_PIN_4;\n  HAL_GPIO_EXTI_IRQHandler(gpio_pin);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800609c",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_EXTI_0800609c"
        },
        "FUN_080040b0": {
            "renaming": {
                "FUN_080040b0": "disableTimerChannel_080040b0",
                "htim": "timerHandle",
                "Channel": "channel",
                "pTVar1": "timerInstance",
                "DAT_0800410c": "PTR_DAT_0800410c",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef"
            },
            "code": "HAL_StatusTypeDef_conflict disableTimerChannel_080040b0(TIM_HandleTypeDef *timerHandle, uint32_t channel)\n{\n  TIM_TypeDef *timerInstance;\n  \n  TIM_CCxChannelCmd(timerHandle->Instance, channel, DISABLE);\n  timerInstance = timerHandle->Instance;\n  if (((timerInstance == DAT_0800410c) && ((timerInstance->CCER & 0x1111) == 0)) && ((timerInstance->CCER & 0x444) == 0))\n  {\n    timerInstance->BDTR = timerInstance->BDTR & 0xffff7fff;\n  }\n  timerInstance = timerHandle->Instance;\n  if (((timerInstance->CCER & 0x1111) == 0) && ((timerInstance->CCER & 0x444) == 0)) {\n    timerInstance->CR1 = timerInstance->CR1 & 0xfffffffe;\n  }\n  timerHandle->State = HAL_TIM_STATE_READY;\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040b0",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "disableTimerChannel_080040b0"
        },
        "FUN_08005d42": {
            "renaming": {
                "__thiscall Print::FUN_08005d42": "printNumber",
                "*this": "this",
                "n": "number",
                "base": "base",
                "sVar1": "charsPrinted",
                "sVar2": "digitsPrinted",
                "FUN_08005d42": "printNumber_08005d42"
            },
            "code": "size_t Print::printNumber_08005d42(Print *this, long number, int base) {\\n\"\n                     \"    size_t charsPrinted;\\n\"\n                     \"    if (base == 0) {\\n\"\n                     \"        charsPrinted = (**this->_vptr_Print)(this, number & 0xff);\\n\"\n                     \"        return charsPrinted;\\n\"\n                     \"    }\\n\"\n                     \"    if (base != 10) {\\n\"\n                     \"        charsPrinted = printNumber_08005d42(this, number, (uint8_t)base);\\n\"\n                     \"        return charsPrinted;\\n\"\n                     \"    }\\n\"\n                     \"    if (number >= 0) {\\n\"\n                     \"        charsPrinted = printNumber_08005d42(this, number, \"\\n\");\\n\"\n                     \"        return charsPrinted;\\n\"\n                     \"    }\\n\"\n                     \"    charsPrinted = print(this, \"-\");\\n\"\n                     \"    size_t digitsPrinted = printNumber_08005d42(this, -number, \"\\n\");\\n\"\n                     \"    return digitsPrinted + charsPrinted;\\n\"\n                     \"}",
            "called": [
                "printNumber",
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d42",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "printNumber_08005d42"
        },
        "FUN_08004b34": {
            "renaming": {
                "FUN_08004b34": "disable_timer_clock_08004b34",
                "*htim": "*timer_handle",
                "htim": "timer_handle",
                "timer_disable_clock": "disable_timer_clock"
            },
            "code": "void disable_timer_clock_08004b34(TIM_HandleTypeDef *timer_handle)\n{\n  timer_disable_clock(timer_handle);\n  return;\n}",
            "called": [
                "timer_disable_clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b34",
            "calling": [
                "HAL_TIM_PWM_DeInit"
            ],
            "imported": false,
            "current_name": "disable_timer_clock_08004b34"
        },
        "FUN_08004c52": {
            "renaming": {
                "FUN_08004c52": "initialize_system_08004c52"
            },
            "code": "void initialize_system_08004c52(void)\n{\n  HAL_Init();\n  SystemClock_Config();\n  return;\n}",
            "called": [
                "SystemClock_Config",
                "HAL_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c52",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "initialize_system_08004c52"
        },
        "FUN_080013a4": {
            "renaming": {
                "__thiscall LiquidCrystal::FUN_080013a4": "initializeLCD",
                "this": "lcd",
                "cols": "num_columns",
                "lines": "num_rows",
                "dotsize": "dot_size",
                "_displayfunction": "_display_function",
                "_numlines": "_num_rows",
                "setRowOffsets": "set_row_offsets",
                "_rs_pin": "_rs_pin",
                "_rw_pin": "_rw_pin",
                "_enable_pin": "_enable_pin",
                "_data_pins": "_data_pins",
                "write4bits": "write_4_bits",
                "send": "send_data",
                "_displaycontrol": "_display_control",
                "display": "display_data",
                "clear": "clear_display",
                "_displaymode": "_display_mode",
                "FUN_080013a4": "initializeLCD_080013a4"
            },
            "code": "void __thiscall initializeLCD_080013a4(LiquidCrystal *lcd, uint8_t cols, uint8_t rows, uint8_t dot_size) {\n  int index;\n  if (rows > 1) {\n    lcd->_display_function |= 0x08;\n  }\n  lcd->_num_rows = rows;\n  setRowOffsets(lcd, 0, 0x40, (uint)cols, cols + 0x40);\n  if ((dot_size != 0) && (rows == 1)) {\n    lcd->_display_function |= 0x04;\n  }\n  pinMode((uint)lcd->_rs_pin, OUTPUT);\n  if (lcd->_rw_pin != 0xff) {\n    pinMode((uint)lcd->_rw_pin, OUTPUT);\n  }\n  pinMode((uint)lcd->_enable_pin, OUTPUT);\n  index = 0;\n  while (index < 4) {\n    if ((lcd->_display_function & 0x10) == 0) {\n      pinMode((uint)lcd->_data_pins[index], OUTPUT);\n    }\n    index++;\n  }\n  digitalWrite((uint)lcd->_rs_pin, LOW);\n  digitalWrite((uint)lcd->_enable_pin, LOW);\n  if (lcd->_rw_pin != 0xff) {\n    digitalWrite((uint)lcd->_rw_pin, LOW);\n  }\n  if ((lcd->_display_function & 0x10) == 0) {\n    write4bits(lcd, 0x03);\n    write4bits(lcd, 0x03);\n    write4bits(lcd, 0x03);\n    write4bits(lcd, 0x02);\n  }\n  else {\n    send(lcd, lcd->_display_function | 0x20, 0);\n    send(lcd, lcd->_display_function | 0x20, 0);\n    send(lcd, lcd->_display_function | 0x20, 0);\n  }\n  send(lcd, lcd->_display_function | 0x20, 0);\n  lcd->_display_control = 0x04;\n  display(lcd);\n  clear(lcd);\n  lcd->_display_mode = 0x02;\n  send(lcd, 0x06, 0);\n  return;\n}",
            "called": [
                "clear",
                "write4bits",
                "send",
                "setRowOffsets",
                "display",
                "digitalWrite",
                "pinMode"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080013a4",
            "calling": [
                "setup",
                "init"
            ],
            "imported": false,
            "current_name": "initializeLCD_080013a4"
        },
        "FUN_08006d14": {
            "renaming": {
                "FUN_08006d14": "find_first_unused_08006d14",
                "param_1": "error_code_ptr",
                "piVar1": "inner_ptr",
                "piVar2": "outer_ptr",
                "iVar3": "global_ptr",
                "ppiVar4": "next_ptr"
            },
            "code": "int * find_first_unused_08006d14(int *param_1) {\n  int *curr_ptr;\n  int *next_ptr;\n  int global_ptr = *(int *)PTR__global_impure_ptr_08006d88;\n  if (*(int *)(global_ptr + 0x18) == 0) {\n    __sinit(global_ptr);\n  }\n  next_ptr = (int *)(global_ptr + 0x48);\n  do {\n    curr_ptr = next_ptr[2];\n    next_ptr = next_ptr[1];\n    while (curr_ptr = (int *)((int)curr_ptr - 1), -1 < (int)curr_ptr) {\n      if (*(short *)(curr_ptr + 3) == 0) {\n        *(undefined2 *)((int)curr_ptr + 0xe) = 0xffff;\n        curr_ptr[0x19] = 0;\n        *(undefined2 *)(curr_ptr + 3) = 1;\n        *curr_ptr = 0;\n        curr_ptr[2] = 0;\n        curr_ptr[1] = 0;\n        curr_ptr[4] = 0;\n        curr_ptr[5] = 0;\n        curr_ptr[6] = 0;\n        memset(curr_ptr + 0x17,0,8);\n        curr_ptr[0xd] = 0;\n        curr_ptr[0xe] = 0;\n        curr_ptr[0x12] = 0;\n        curr_ptr[0x13] = 0;\n        return curr_ptr;\n      }\n      curr_ptr = curr_ptr + 0x1a;\n    }\n    if (next_ptr == (int *)0x0) {\n      curr_ptr = (int *)__sfmoreglue(param_1,4);\n      next_ptr = curr_ptr;\n      if (curr_ptr == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n  } while( true );\n}",
            "called": [
                "memset",
                "__sinit",
                "__sfmoreglue"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d14",
            "calling": [
                "__sinit"
            ],
            "imported": false,
            "current_name": "find_first_unused_08006d14"
        },
        "FUN_080004f8": {
            "renaming": {
                "FUN_080004f8": "FUNC_080004f8"
            },
            "code": "\nulonglong FUNC_080004f8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = calculate_result_080006d4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006d4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004f8",
            "calling": [
                "SetSampleTime",
                "Compute",
                "printFloat",
                "readThermocouple",
                "SetTunings"
            ],
            "imported": false,
            "current_name": "FUNC_080004f8"
        }
    },
    "used_tokens": 255205,
    "layers": [
        [
            "FUN_08002470",
            "FUN_08007004",
            "FUN_080035fc",
            "FUN_08005740",
            "FUN_08006158",
            "FUN_08006d8c",
            "FUN_08004f2c",
            "FUN_08004ec4",
            "FUN_08000178",
            "FUN_08006c88",
            "FUN_080060e4",
            "FUN_0800258c",
            "FUN_08004e20",
            "FUN_0800573c",
            "FUN_080032b4",
            "FUN_08004d06",
            "FUN_080056d8",
            "FUN_080019f6",
            "FUN_08002f9c",
            "FUN_08005510",
            "FUN_08005750",
            "FUN_08002cf2",
            "FUN_08006288",
            "FUN_08002004",
            "FUN_08004f3c",
            "FUN_08005754",
            "FUN_08005fc8",
            "FUN_08002ab8",
            "FUN_0800598a",
            "FUN_08004e34",
            "FUN_08001a44",
            "FUN_08002c54",
            "FUN_080043b4",
            "FUN_0800441a",
            "FUN_08004d18",
            "FUN_080006d4",
            "FUN_08007028",
            "FUN_08002494",
            "FUN_080055bc",
            "FUN_08001960",
            "FUN_08004ca2",
            "FUN_08002810",
            "FUN_0800224c",
            "FUN_080054b0",
            "FUN_080016b4",
            "FUN_08004e48",
            "FUN_08005890",
            "FUN_08004cb2",
            "FUN_08004ef4",
            "FUN_08001294",
            "FUN_08002384",
            "FUN_08005650",
            "FUN_08006fb6",
            "FUN_08002ad8",
            "FUN_08004204",
            "FUN_08005da8",
            "FUN_080045fe",
            "FUN_080055e0",
            "FUN_08006f10",
            "FUN_0800213c",
            "FUN_0800455a",
            "FUN_08004d30",
            "FUN_08001a66",
            "FUN_08003c44",
            "FUN_08006074",
            "FUN_080028d2",
            "FUN_08000a18",
            "FUN_08005384",
            "FUN_08005b3c",
            "FUN_0800091c",
            "FUN_080046b8",
            "FUN_08004c8a",
            "FUN_08001cd0",
            "FUN_08000130",
            "FUN_08004a4c",
            "FUN_08006112",
            "FUN_08004974",
            "FUN_08003520",
            "FUN_08002ca6",
            "FUN_08004618",
            "FUN_080060a6",
            "FUN_08001c30",
            "FUN_08005c72",
            "FUN_0800048c",
            "FUN_080045a2",
            "FUN_080047e8",
            "FUN_080057b4",
            "FUN_0800092c",
            "FUN_08002560",
            "FUN_08006e90",
            "FUN_08006920",
            "FUN_080008ba",
            "FUN_08002d1c",
            "FUN_08005714",
            "FUN_08003da4",
            "FUN_08005a44",
            "FUN_080009dc",
            "FUN_0800417c",
            "FUN_08004b94",
            "FUN_080058e0",
            "FUN_08001918",
            "FUN_0800611c",
            "FUN_0800049c",
            "FUN_080047f4",
            "FUN_08002c10",
            "FUN_080009f0",
            "FUN_0800134e",
            "FUN_08006be0",
            "FUN_080012e8",
            "FUN_08006370",
            "FUN_080024f8",
            "FUN_0800594e",
            "FUN_080056a8",
            "FUN_08006ac0",
            "FUN_08007220",
            "FUN_08004198",
            "FUN_08001c3c",
            "FUN_08000a2c",
            "FUN_08001366",
            "FUN_08005848",
            "FUN_08000ae8",
            "FUN_08003ed8",
            "FUN_080061e0",
            "FUN_08004f0c",
            "FUN_08005604",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800135a",
            "FUN_08005c96",
            "FUN_0800571a",
            "FUN_08002efc",
            "FUN_0800365c",
            "FUN_08006ad0",
            "FUN_080033b8",
            "FUN_080069e4",
            "FUN_080060bc",
            "FUN_08004b9e",
            "FUN_08006940",
            "FUN_080058ea",
            "FUN_08002582",
            "FUN_08005976",
            "FUN_08004884",
            "FUN_08005fa0",
            "FUN_08001be8",
            "FUN_080061f0",
            "FUN_08002348",
            "FUN_08004f1c",
            "FUN_08005a68",
            "FUN_08001814",
            "FUN_080056c0",
            "FUN_08000aec",
            "FUN_0800572c",
            "FUN_08004e12",
            "FUN_08000a58",
            "FUN_08001b48",
            "FUN_08004092",
            "FUN_08000450",
            "FUN_08005bb0",
            "FUN_080014ba",
            "FUN_08003c90",
            "FUN_08002514",
            "FUN_08005c1c",
            "FUN_08006dc8",
            "FUN_0800412c",
            "FUN_0800492c",
            "FUN_08000cbc",
            "FUN_0800480a",
            "FUN_080015f8",
            "FUN_08005c38",
            "FUN_08005f8c",
            "FUN_08006f5a",
            "FUN_08000b08",
            "FUN_08006cb4",
            "FUN_08004c5e",
            "FUN_08007098",
            "FUN_08004b3c",
            "FUN_08001550",
            "FUN_08001310",
            "FUN_080009a8",
            "FUN_08004d90",
            "FUN_08005ce8",
            "FUN_0800316c",
            "FUN_08004828",
            "FUN_08004948",
            "FUN_08005b24",
            "FUN_080049f0",
            "FUN_08001e40",
            "FUN_08003a68",
            "FUN_080012a2",
            "FUN_08004c78",
            "FUN_08005bd4",
            "FUN_08001e48",
            "FUN_080059c8",
            "FUN_080009b8",
            "FUN_08000aa8",
            "FUN_08000a04",
            "FUN_0800010c",
            "FUN_08001cac",
            "FUN_08005a18",
            "FUN_08003f18",
            "FUN_0800591e",
            "FUN_08006104",
            "FUN_08002540",
            "FUN_08005be2",
            "FUN_08006344",
            "FUN_080009c8",
            "FUN_08002db2",
            "FUN_08005932",
            "FUN_08001cc4",
            "FUN_08003ea0",
            "FUN_0800306c",
            "FUN_08005c64",
            "FUN_0800548c",
            "FUN_08000924",
            "FUN_08006c34",
            "FUN_080072a4",
            "FUN_08004848",
            "FUN_08006f92",
            "FUN_080012c0",
            "FUN_08001f80",
            "FUN_08001f84",
            "FUN_08000bcc",
            "FUN_080047d8",
            "FUN_0800281e",
            "FUN_08006198",
            "FUN_08006fc0",
            "FUN_08007048",
            "FUN_08003c50",
            "FUN_080065c0",
            "FUN_080054d4",
            "FUN_0800715c",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_0800282c",
            "FUN_080015b2",
            "FUN_0800040c",
            "FUN_08006088",
            "FUN_08006eb0",
            "FUN_08004e5c",
            "FUN_08004df4",
            "FUN_08004bb0",
            "FUN_08004df8",
            "FUN_08002af8",
            "FUN_080028de",
            "FUN_08002848",
            "FUN_08004e70",
            "FUN_080020f0",
            "FUN_08006e10",
            "FUN_0800607e",
            "FUN_08004e74",
            "FUN_08004c30",
            "FUN_08006092",
            "FUN_08006f38",
            "FUN_08004cce",
            "FUN_08006f34",
            "FUN_08006fe4",
            "FUN_08003ad4",
            "FUN_08004110",
            "FUN_08004ce2",
            "FUN_08005568",
            "FUN_08004478",
            "FUN_08005f5e",
            "FUN_08005cb6",
            "FUN_08003c70",
            "FUN_080053d4",
            "FUN_08002b84",
            "FUN_08004c48",
            "FUN_0800042c",
            "FUN_08005f6c",
            "FUN_08005690",
            "FUN_08005cc0",
            "FUN_0800706c",
            "FUN_08002624",
            "FUN_0800609c",
            "FUN_080040b0",
            "FUN_08004b34",
            "FUN_08004c52",
            "FUN_080013a4",
            "FUN_08006d14"
        ],
        [
            "FUN_080068f0",
            "FUN_0800138e",
            "FUN_08001c88",
            "FUN_08006174",
            "FUN_08006f00",
            "FUN_080018f8",
            "FUN_08005da0",
            "FUN_08005f2c",
            "FUN_08005f40",
            "FUN_08005b54",
            "FUN_08006c40",
            "FUN_0800157c",
            "FUN_08001c32",
            "FUN_08001b18",
            "FUN_08005d8a",
            "FUN_08001ab0",
            "FUN_08005730",
            "FUN_080060d4",
            "FUN_08005cd4",
            "FUN_08007090",
            "FUN_08005d82",
            "FUN_08001510",
            "FUN_08005d42"
        ]
    ],
    "locked_functions": []
}