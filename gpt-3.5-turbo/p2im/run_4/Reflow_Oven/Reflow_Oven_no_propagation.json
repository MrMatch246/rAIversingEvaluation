{
    "functions": {
        "FUN_08002470": {
            "renaming": {
                "FUN_08002470": "update_registers_08002470",
                "param_1": "input_value",
                "PTR_DAT_08002490": "register_ptr",
                "DAT_08002490": "register_value",
                "mask": "mask",
                "new_value": "new_value"
            },
            "code": "void update_registers_08002470(uint input_value) {\n    uint* PTR_DAT_08002490 = (uint*)(DAT_08002490 + 0xc);\n    uint DAT_08002490 = *PTR_DAT_08002490;\n    uint mask = 0xf8ff;\n    uint new_value = (input_value & 7) << 8 | (DAT_08002490 & mask) | 0x5fa0000;\n    *PTR_DAT_08002490 = new_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002470",
            "calling": [
                "FUN_08001c88",
                "FUN_08005f5e"
            ],
            "imported": false,
            "current_name": "update_registers_08002470"
        },
        "FUN_08007004": {
            "renaming": {
                "FUN_08007004": "initialize_value_if_error_occurs_08007004",
                "param_1": "result",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "pointer_to_value",
                "iVar2": "function_result"
            },
            "code": "void initialize_value_if_error_occurs_08007004(int *result, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined *pointer_to_value = PTR_DAT_08007024;\n  *(undefined4 *)PTR_DAT_08007024 = 0;\n  int function_result = FUN_0800571a(param_2, param_3, param_3, 0, param_4);\n  if ((function_result == -1) && (*(int *)pointer_to_value != 0)) {\n    *result = *(int *)pointer_to_value;\n  }\n  return;\n}",
            "called": [
                "FUN_0800571a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007004",
            "calling": [
                "FUN_08006dc8"
            ],
            "imported": false,
            "current_name": "initialize_value_if_error_occurs_08007004"
        },
        "FUN_08006394": {
            "renaming": {
                "FUN_08006394": "FUNC_08006394"
            },
            "code": "\nint FUNC_08006394(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    FUN_08006cb4();\n  }\n  if (param_2 == PTR_DAT_080065a0) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_080065a8) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_080065ac) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = FUN_080069e4(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_080063d6:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = FUN_08006370(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08006580;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = FUN_08006e90(PTR_s___0__080065a4,*pbVar5);\n    puVar1 = PTR_DAT_080065b0;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__080065a4 & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_080064b0;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_080064b0:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar3 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar3;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar4 = false;\n      iVar7 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = FUN_08006e90(PTR_DAT_080065b0,*param_3,3);\n  if (iVar7 != 0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = FUN_08006e90(PTR_s_efgEFG_080065b4,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_080066b0(param_1,&local_88,param_2,DAT_080065bc,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_080065b8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_08006532;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08006580;\nLAB_08006532:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_080063d6;\n}\n\n",
            "called": [
                "FUN_08006e90",
                "FUN_080066b0",
                "FUN_080069e4",
                "FUN_08006cb4",
                "FUN_08006370"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006394",
            "calling": [
                "FUN_08006174",
                "FUN_080068f0"
            ],
            "imported": false,
            "current_name": "FUNC_08006394"
        },
        "FUN_08005740": {
            "renaming": {
                "FUN_08005740": "set_pointer_value_08005740",
                "PTR_DAT_0800574c": "ptr_to_set",
                "0x16": "value_to_set"
            },
            "code": "void set_pointer_value_08005740(void)\n{\n    int value_to_set = 22;\n    int* PTR_DAT_0800574c = (int*)PTR_DAT_0800574c;\n    *PTR_DAT_0800574c = value_to_set;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005740",
            "calling": [
                "FUN_08006f00"
            ],
            "imported": false,
            "current_name": "set_pointer_value_08005740"
        },
        "FUN_08006158": {
            "renaming": {
                "FUN_08006158": "calculate_result_08006158",
                "param_1": "flag",
                "param_2": "value"
            },
            "code": "longlong calculate_result_08006158(undefined4 flag, uint value){\n  if (DAT_08006170 != 0) {\n    return CONCAT44(flag,2);\n  }\n  return (ulonglong)value << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006158",
            "calling": [
                "FUN_08006112"
            ],
            "imported": false,
            "current_name": "calculate_result_08006158"
        },
        "FUN_08003688": {
            "renaming": {
                "FUN_08003688": "FUNC_08003688"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined4 FUNC_08003688(uint *param_1)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  bool bVar7;\n  \n  puVar1 = DAT_08003948;\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 4) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) != 0)))) {\n      if (((*DAT_08003948 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      uVar6 = param_1[1];\n      if (uVar6 == 0x10000) {\n        *DAT_08003948 = *DAT_08003948 | 0x10000;\n      }\n      else if (uVar6 == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (uVar6 == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08003948 = *DAT_08003948 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar3 = FUN_08001cc4();\n        while ((*DAT_08003948 & 0x20000) != 0) {\n          iVar4 = FUN_08001cc4();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar3 = FUN_08001cc4();\n        while ((*DAT_08003948 & 0x20000) == 0) {\n          iVar4 = FUN_08001cc4();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 0) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) == 0)))) {\n      if (((*DAT_08003948 & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | param_1[5] << 3;\n    }\n    else if (param_1[4] == 0) {\n      *DAT_0800394c = 0;\n      iVar3 = FUN_08001cc4();\n      while ((*DAT_08003948 & 2) != 0) {\n        iVar4 = FUN_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_0800394c = 1;\n      iVar3 = FUN_08001cc4();\n      while ((*DAT_08003948 & 2) == 0) {\n        iVar4 = FUN_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | param_1[5] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      *DAT_08003950 = 0;\n      iVar3 = FUN_08001cc4();\n      while ((DAT_08003948[9] & 2) != 0) {\n        iVar4 = FUN_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003950 = 1;\n      iVar3 = FUN_08001cc4();\n      while ((DAT_08003948[9] & 2) == 0) {\n        iVar4 = FUN_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      FUN_0800365c(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar7 = (DAT_08003948[7] & 0x10000000) == 0;\n    if (bVar7) {\n      DAT_08003948[7] = DAT_08003948[7] | 0x10000000;\n    }\n    if ((*DAT_08003954 & 0x100) == 0) {\n      *DAT_08003954 = *DAT_08003954 | 0x100;\n      iVar3 = FUN_08001cc4();\n      while ((*DAT_08003954 & 0x100) == 0) {\n        iVar4 = FUN_08001cc4();\n        if (100 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    puVar2 = DAT_08003a60;\n    puVar1 = DAT_08003948;\n    uVar6 = param_1[3];\n    if (uVar6 == 1) {\n      DAT_08003948[8] = DAT_08003948[8] | 1;\n    }\n    else if (uVar6 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (uVar6 == 5) {\n      DAT_08003a60[8] = DAT_08003a60[8] | 4;\n      puVar2[8] = puVar2[8] | 1;\n    }\n    else {\n      DAT_08003948[8] = DAT_08003948[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n    }\n    if (param_1[3] == 0) {\n      iVar3 = FUN_08001cc4();\n      while ((DAT_08003a60[8] & 2) != 0) {\n        iVar4 = FUN_08001cc4();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar3 = FUN_08001cc4();\n      while ((DAT_08003948[8] & 2) == 0) {\n        iVar4 = FUN_08001cc4();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar7) {\n      DAT_08003a60[7] = DAT_08003a60[7] & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\n    uVar5 = 0;\n  }\n  else if ((DAT_08003a60[1] & 0xc) == 8) {\n    uVar5 = 1;\n  }\n  else if (param_1[7] == 2) {\n    *DAT_08003a64 = 0;\n    iVar3 = FUN_08001cc4();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          DAT_08003a60[1] = DAT_08003a60[1] & 0xfffdffff | param_1[2];\n        }\n        DAT_08003a60[1] = DAT_08003a60[1] & 0xffc2ffff | param_1[8] | param_1[9];\n        *DAT_08003a64 = 1;\n        iVar3 = FUN_08001cc4();\n        do {\n          if ((*DAT_08003a60 & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar4 = FUN_08001cc4();\n        } while ((uint)(iVar4 - iVar3) < 3);\n        return 3;\n      }\n      iVar4 = FUN_08001cc4();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  else {\n    *DAT_08003a64 = 0;\n    iVar3 = FUN_08001cc4();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar4 = FUN_08001cc4();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  return uVar5;\n}\n\n",
            "called": [
                "FUN_0800365c",
                "FUN_08001cc4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003688",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "FUNC_08003688"
        },
        "FUN_08004ec4": {
            "renaming": {
                "FUN_08004ec4": "process_input_and_call_function_if_possible_08004ec4",
                "param_1": "input_parameter",
                "iVar1": "function_pointer"
            },
            "code": "void process_input_and_call_function_if_possible_08004ec4(undefined4 input_parameter)\n{\n  int function_pointer;\n  \n  function_pointer = get_function_pointer();\n  if (((*(code **)(function_pointer + 0x60) != (code *)0x0) && (*(char *)(function_pointer + 0x5c) == '\\x01')) &&\n     (*(char *)(function_pointer + 0x2c) != ' ')) {\n    (**(code **)(function_pointer + 0x60))(function_pointer + 0x68);\n  }\n  process_input(input_parameter);\n  return;\n}",
            "called": [
                "FUN_08002c10",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ec4",
            "calling": [
                "FUN_0800316c",
                "FUN_08002d1c",
                "FUN_080032b4"
            ],
            "imported": false,
            "current_name": "process_input_and_call_function_if_possible_08004ec4"
        },
        "FUN_08000178": {
            "renaming": {
                "FUN_08000178": "find_end_of_string_08000178",
                "param_1": "input_string",
                "pcVar3": "current_position",
                "pcVar2": "next_position",
                "cVar1": "current_char",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "char* find_end_of_string_08000178(char* input_string) {\n    char current_char;\n    char* current_position;\n    char* end_position;\n    \n    current_position = input_string;\n    do {\n        end_position = current_position;\n        current_position++;\n        current_char = *end_position;\n    } while (current_char != '\\0');\n    return end_position;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "FUN_08005c96",
                "FUN_08005ce8"
            ],
            "imported": false,
            "current_name": "find_end_of_string_08000178"
        },
        "FUN_08004418": {
            "renaming": {
                "FUN_08004418": "do_nothing_08004418"
            },
            "code": "\nvoid do_nothing_08004418(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004418",
            "calling": [
                "FUN_0800441a"
            ],
            "imported": false,
            "current_name": "do_nothing_08004418"
        },
        "FUN_08006c88": {
            "renaming": {
                "FUN_08006c88": "allocate_memory_block_08006c88",
                "param_1": "base_address",
                "param_2": "block_size",
                "puVar1": "block_pointer",
                "iVar2": "block_offset"
            },
            "code": "undefined4* allocate_memory_block_08006c88(undefined4 base_address, int block_size) {\n    undefined4* block_pointer;\n    int block_offset = (block_size - 1) * 0x68;\n    block_pointer = (undefined4*)FUN_08006288(base_address, block_offset + 0x74);\n    if (block_pointer != (undefined4*)0x0) {\n        *block_pointer = 0;\n        block_pointer[1] = block_size;\n        block_pointer[2] = block_pointer + 3;\n        FUN_080061e0(block_pointer + 3, 0, block_offset + 0x68);\n    }\n    return block_pointer;\n}",
            "called": [
                "FUN_08006288",
                "FUN_080061e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c88",
            "calling": [
                "FUN_08006d14"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08006c88"
        },
        "FUN_080060e4": {
            "renaming": {
                "FUN_080060e4": "check_if_initialized_080060e4",
                "iVar1": "index",
                "FUN_08005f8c": "get_index",
                "PTR_DAT_08006100": "data_pointer"
            },
            "code": "void check_if_initialized_080060e4(void)\n{\n  int index = get_index();\n  if (*(int *)(PTR_DAT_08006100 + index * 0x14 + 0xc) != 0) {\n    initialize();\n  }\n  return;\n}",
            "called": [
                "FUN_08005f8c",
                "FUN_080060d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060e4",
            "calling": [
                "FUN_0800282c"
            ],
            "imported": false,
            "current_name": "check_if_initialized_080060e4"
        },
        "FUN_0800258c": {
            "renaming": {
                "FUN_0800258c": "get_flag_value_0800258c",
                "param_1": "flag",
                "uVar1": "flag_value",
                "puVar2": "flag_ptr"
            },
            "code": "uint get_flag_value_0800258c(uint **flag){\n    uint flag_value;\n    if (*(char *)((int)flag + 0x21) != '\\x02') {\n        flag[0xe] = (uint *)0x4;\n        return 1;\n    }\n    **flag = **flag & 0xfffffff1;\n    **flag = **flag & 0xfffffffe;\n    uint *flag_ptr = *flag;\n    if (flag_ptr == PTR_DAT_0800261c) {\n        flag_value = 1;\n    }\n    else if (flag_ptr == PTR_DAT_0800261c + 5) {\n        flag_value = 0x10;\n    }\n    else if (flag_ptr == PTR_DAT_0800261c + 10) {\n        flag_value = 0x100;\n    }\n    else if (flag_ptr == PTR_DAT_0800261c + 0xf) {\n        flag_value = 0x1000;\n    }\n    else if (flag_ptr == PTR_DAT_0800261c + 0x14) {\n        flag_value = 0x10000;\n    }\n    else if (flag_ptr == PTR_DAT_0800261c + 0x19) {\n        flag_value = 0x100000;\n    }\n    else {\n        flag_value = 0x1000000;\n    }\n    *(undefined4 *)(PTR_DAT_08002620 + 4) = flag_value;\n    *(undefined *)((int)flag + 0x21) = 1;\n    *(undefined *)(flag + 8) = 0;\n    if (flag[0xd] != (uint *)0x0) {\n        (*(code *)flag[0xd])();\n        return 0;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800258c",
            "calling": [
                "FUN_0800316c",
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "get_flag_value_0800258c"
        },
        "FUN_08004e20": {
            "renaming": {
                "FUN_08004e20": "checkIfPointerIsNull_08004e20",
                "PTR_DAT_08004e30": "PTR_DAT_08004e30",
                "FUN_08003f18": "callFunctionToHandleNullPointer"
            },
            "code": "void checkIfPointerIsNull_08004e20(void)\n{\n  int* ptr = *(int**)PTR_DAT_08004e30;\n  if (ptr != NULL) {\n    callFunctionToHandleNullPointer();\n  }\n  return;\n}",
            "called": [
                "FUN_08003f18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e20",
            "calling": [],
            "imported": false,
            "current_name": "checkIfPointerIsNull_08004e20"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "wait_forever_0800573c"
            },
            "code": "void wait_forever_0800573c(void)\n{\n  while(true)\n  {\n    // do nothing\n  }\n}",
            "called": [
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "FUN_08006ac0",
                "FUN_0800573c"
            ],
            "imported": false,
            "current_name": "wait_forever_0800573c"
        },
        "FUN_080032b4": {
            "renaming": {
                "FUN_080032b4": "process_input_080032b4",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "ptr_input",
                "puVar3": "ptr_input_9"
            },
            "code": "uint32_t process_input_080032b4(uint32_t **input)\n{\n    char current_char = *(char *)((int)input + 0x3d);\n    (*input)[1] &= 0xfffff8ff;\n    **input |= 1;\n    **input &= 0xfffffbff;\n    uint32_t *ptr_input = *input;\n    if ((ptr_input[1] & 0x800) != 0)\n    {\n        if ((*(char *)((int)input + 0x3d) == '\"') || (*(char *)((int)input + 0x3d) == '*'))\n        {\n            *(int16_t *)((int)input + 0x2a) = (int16_t)*(uint32_t *)(*input[0xe] + 4);\n        }\n        else\n        {\n            *(int16_t *)((int)input + 0x2a) = (int16_t)*(uint32_t *)(*input[0xd] + 4);\n        }\n    }\n    if (*(int16_t *)((int)input + 0x2a) != 0)\n    {\n        if ((ptr_input[5] & 4) != 0)\n        {\n            uint8_t *ptr_input_9 = (uint8_t *)input[9];\n            input[9] = (uint32_t *)((int)ptr_input_9 + 1);\n            *(char *)ptr_input_9 = (char)ptr_input[4];\n            *(int16_t *)((int)input + 0x2a) = *(int16_t *)((int)input + 0x2a) - 1;\n        }\n        if (((*input)[5] & 0x40) != 0)\n        {\n            uint8_t *ptr_input_9 = (uint8_t *)input[9];\n            input[9] = (uint32_t *)((int)ptr_input_9 + 1);\n            *(char *)ptr_input_9 = (char)(*input)[4];\n            *(int16_t *)((int)input + 0x2a) = *(int16_t *)((int)input + 0x2a) - 1;\n        }\n        input[0x10] = (uint32_t *)((uint32_t)input[0x10] | 4);\n    }\n    if (input[0x10] == (uint32_t *)0x0)\n    {\n        if (((current_char == '(') || (current_char == '*')) || (current_char == ')'))\n        {\n            input[0xb] = PTR_080033b4;\n            input[0xc] = (uint32_t *)0x0;\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            *(undefined *)((int)input + 0x3e) = 0;\n            FUN_08004ec4();\n        }\n        else if ((input[0xc] == (uint32_t *)0x22) || (current_char == '\"'))\n        {\n            input[0xc] = (uint32_t *)0x0;\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            *(undefined *)((int)input + 0x3e) = 0;\n            do_nothing_08002ca4();\n        }\n    }\n    else\n    {\n        FUN_0800316c();\n    }\n    return 0;\n}",
            "called": [
                "FUN_0800316c",
                "FUN_08002ca4",
                "FUN_08004ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032b4",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_080032b4"
        },
        "FUN_08004d06": {
            "renaming": {
                "FUN_08004d06": "compare_and_return_08004d06",
                "param_1": "num1",
                "param_2": "num2"
            },
            "code": "int compare_and_return_08004d06(int num1, int num2) {\n  if (num1 != num2) {\n    if (num1 == 0) {\n      return num2;\n    }\n    if (num2 == 0) {\n      return num1;\n    }\n    num1 = 0;\n  }\n  return num1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d06",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "compare_and_return_08004d06"
        },
        "FUN_080056d8": {
            "renaming": {
                "FUN_080056d8": "get_offset_080056d8",
                "param_1": "offset_value",
                "iVar1": "current_offset",
                "puVar2": "memory_location"
            },
            "code": "int get_offset_080056d8(int offset_value) {\n  int current_offset = *(int *)PTR_DAT_08005708;\n  undefined *memory_location = (undefined *)(offset_value + current_offset);\n  if (memory_location <= &stack0x00000000) {\n    *(undefined **)PTR_DAT_08005708 = memory_location;\n    return current_offset;\n  }\n  *(undefined4 *)PTR_DAT_08005710 = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d8",
            "calling": [
                "FUN_08006920"
            ],
            "imported": false,
            "current_name": "get_offset_080056d8"
        },
        "FUN_080019f6": {
            "renaming": {
                "FUN_080019f6": "extract_data_080019f6",
                "param_1": "input_data",
                "uVar2": "data1",
                "uVar3": "data2",
                "uVar4": "data3",
                "uVar5": "data4",
                "iVar1": "result1",
                "iVar2": "result2"
            },
            "code": "void extract_data_080019f6(int input_data){\n  int data1;\n  int data2;\n  int data3;\n  int data4;\n  int data5;\n\n  data2 = *(int *)(input_data + 0x3c) + 4;\n  data1 = *(int *)(input_data + 0x3c);\n  *(int *)(input_data + 0x48) = *(int *)(input_data + 0x3c);\n  *(int *)(input_data + 0x4c) = data2;\n  data3 = *(int *)(input_data + 0x38) + 4;\n  data4 = *(int *)(input_data + 0x38);\n  *(int *)(input_data + 0x50) = *(int *)(input_data + 0x3c);\n  *(int *)(input_data + 0x54) = data3;\n  int result1 = FUN_08000a18(*(int *)(input_data + 0x3c), data2, *(int *)(input_data + 0x68), *(int *)(input_data + 0x6c));\n\n  if (result1 == 0) {\n    data5 = *(int *)(input_data + 0x60);\n    int data6 = *(int *)(input_data + 100);\n    int result2 = FUN_080009dc(*(int *)(input_data + 0x3c), data2, data5, data6);\n    if (result2 != 0) {\n      *(int *)(input_data + 0x48) = data5;\n      *(int *)(input_data + 0x4c) = data6;\n    }\n    return;\n  }\n  *(int *)(input_data + 0x48) = *(int *)(input_data + 0x68);\n  *(int *)(input_data + 0x4c) = *(int *)(input_data + 0x6c);\n  return;\n}",
            "called": [
                "FUN_08000a18",
                "FUN_080009dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019f6",
            "calling": [
                "FUN_08001a44"
            ],
            "imported": false,
            "current_name": "extract_data_080019f6"
        },
        "FUN_08002f9c": {
            "renaming": {
                "FUN_08002f9c": "process_string_08002f9c",
                "param_1": "input_param",
                "puVar1": "current_char",
                "**param_1": "*(*input_param)",
                "*(ushort *)((int)param_1 + 0x2a)": "*(ushort *)(((char *)input_param) + 0x2a)",
                "param_1[0xb]": "input_param[11]",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)(((char *)input_param) + 0x3d)",
                "*(ushort *)((int)param_1 + 0x2a) - 2": "*(ushort *)(((char *)input_param) + 0x2a) - 2",
                "(*param_1)[1]": "*(input_param + 1)",
                "*(undefined *)((int)param_1 + 0x3d)": "*(undefined *)(((char *)input_param) + 0x3d)",
                "*(undefined *)((int)param_1 + 0x3e)": "*(undefined *)(((char *)input_param) + 0x3e)",
                "param_1[0xc]": "input_param[12]"
            },
            "code": "int process_string_08002f9c(uint **input_param) {\n  uint *current_char; // Pointer to the current character being processed\n  uint *flag = *input_param; // Flag to be set based on input\n  uint *count = (*input_param) + 1; // Counter for the number of characters processed\n  uint *state = input_param[11]; // State of the current character processing\n  \n  // Check if the first character is a double quote\n  if (*(((char *)input_param) + 0x3d) == '\"') {\n    // Check if the string is less than 4 characters long\n    if (*(((ushort *)input_param) + 0x2a) < 4) {\n      // Check if the string is 2 characters long\n      if (*(((ushort *)input_param) + 0x2a) - 2 < 2) {\n        if (input_param[11] == (uint *)0x2) {\n          *flag |= 0x400;\n        }\n        else {\n          *flag &= 0xfffffbff;\n          *flag |= 0x800;\n        }\n        *(count) &= 0xfffffbff;\n      }\n      else {\n        if (input_param[11] == (uint *)0x2) {\n          *flag |= 0x400;\n        }\n        else {\n          *flag &= 0xfffffbff;\n        }\n        *(count) &= 0xfffff8ff;\n        current_char = input_param[9];\n        input_param[9] = (uint *)((int)current_char + 1);\n        *(char *)current_char = *((char *)(*input_param) + 4);\n        *(((ushort *)input_param) + 0x2a) += -1;\n        *(((char *)input_param) + 0x3d) = 0x20;\n        input_param[12] = (uint *)0x0;\n        if (*(((char *)input_param) + 0x3e) == '@') {\n          *(((char *)input_param) + 0x3e) = 0;\n          do_nothing_08002f9a();\n        }\n        else {\n          *(((char *)input_param) + 0x3e) = 0;\n          do_nothing_08002c50();\n        }\n      }\n    }\n    else {\n      current_char = input_param[9];\n      input_param[9] = (uint *)((int)current_char + 1);\n      *(char *)current_char = *((char *)(*input_param) + 4);\n      *(((ushort *)input_param) + 0x2a) += -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c50",
                "FUN_08002f9a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9c",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_string_08002f9c"
        },
        "FUN_08005510": {
            "renaming": {
                "FUN_08005510": "add_to_database_08005510",
                "param_1": "record_address",
                "param_2": "value",
                "param_3": "record_type",
                "param_4": "param_4",
                "iVar1": "result",
                "uVar2": "record_index",
                "PTR_DAT_08005560": "record_address_array",
                "PTR_DAT_0800555c": "value_array",
                "PTR_DAT_08005564": "record_type_array",
                "record_type_value": "record_type"
            },
            "code": "void add_to_database_08005510(int record_address, int value, int record_type, int param_4)\n{\n  int result = FUN_0800548c();\n  if (result == 0) {\n    uint record_index = (uint)*(byte *)(record_address + 0x44);\n    *(int *)(PTR_DAT_08005560 + record_index * 4) = record_address;\n    *(int *)(PTR_DAT_0800555c + record_index * 4) = value;\n    int record_type_value = *(char *)(record_address + 0x5a);\n    FUN_08002494(record_type_value, 0, 1, record_index, param_4);\n    FUN_080024f8(record_type_value);\n    FUN_080045a2(*(int *)(PTR_DAT_08005564 + record_index * 4), record_address + 0x45, 1);\n  }\n}",
            "called": [
                "FUN_080045a2",
                "FUN_08002494",
                "FUN_0800548c",
                "FUN_080024f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005510",
            "calling": [
                "FUN_08005a68"
            ],
            "imported": false,
            "current_name": "add_to_database_08005510"
        },
        "FUN_08002f9a": {
            "renaming": {
                "FUN_08002f9a": "do_nothing_08002f9a"
            },
            "code": "\nvoid do_nothing_08002f9a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9a",
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "imported": false,
            "current_name": "do_nothing_08002f9a"
        },
        "FUN_08005750": {
            "renaming": {
                "FUN_08005750": "return_one_08005750"
            },
            "code": "int return_one_08005750(void)\n{\n  int one = 1;\n  return one;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005750",
            "calling": [
                "thunk_FUN_08005750"
            ],
            "imported": false,
            "current_name": "return_one_08005750"
        },
        "FUN_08002cf2": {
            "renaming": {
                "FUN_08002cf2": "process_data_08002cf2",
                "param_1": "data_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "value",
                "uVar2": "flag"
            },
            "code": "int process_data_08002cf2(int *data_ptr, int param_2, int param_3, int param_4) {\n  int flag = *(int *)(*data_ptr + 0x18);\n  int value;\n  if ((flag & 0x80) == 0) {\n    value = *(int *)(data_ptr + 3);\n  }\n  else {\n    value = *(int *)(data_ptr + 6);\n  }\n  call_function(data_ptr, (flag & 4) == 0, value, flag, param_4);\n  return 0;\n}",
            "called": [
                "FUN_08004e74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cf2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_data_08002cf2"
        },
        "FUN_08006288": {
            "renaming": {
                "FUN_08006288": "allocate_memory_block_08006288",
                "param_1": "block_address",
                "param_2": "requested_size",
                "puVar1": "unused_pointer",
                "uVar2": "return_value",
                "puVar3": "current_block_ptr",
                "iVar4": "difference_size",
                "puVar5": "unused_pointer_2",
                "uVar6": "remainder_size",
                "puVar7": "previous_block_ptr",
                "uVar8": "aligned_requested_size",
                "PTR_DAT_08006340": "unused_pointer_3",
                "PTR_DAT_0800633c": "block_list_head"
            },
            "code": "uint allocate_memory_block_08006288(undefined4 *block_address, uint requested_size)\n{\n  uint aligned_requested_size;\n  uint *previous_block_ptr;\n  uint *current_block_ptr;\n  uint current_block_size;\n  uint remainder_size;\n  uint new_block_size;\n  \n  aligned_requested_size = (requested_size + 3 & 0xfffffffc) + 8;\n  if (aligned_requested_size < 0xc) {\n    aligned_requested_size = 0xc;\n  }\n  if (((int)aligned_requested_size < 0) || (aligned_requested_size < requested_size)) {\n    *block_address = 0xc;\n  }\n  else {\n    do_nothing_08006eac();\n    current_block_ptr = *(uint **)PTR_DAT_0800633c;\n    previous_block_ptr = *(uint **)PTR_DAT_0800633c;\n    while (current_block_size = *current_block_ptr, current_block_size != 0x0) {\n      remainder_size = current_block_size - aligned_requested_size;\n      if (-1 < (int)remainder_size) {\n        if (remainder_size < 0xc) {\n          if (previous_block_ptr == current_block_ptr) {\n            new_block_size = previous_block_ptr[1];\n            *(uint *)PTR_DAT_0800633c = new_block_size;\n          }\n          else {\n            new_block_size = current_block_ptr[1];\n          }\n          if (previous_block_ptr != current_block_ptr) {\n            previous_block_ptr[1] = new_block_size;\n            previous_block_ptr = current_block_ptr;\n          }\n        }\n        else {\n          *current_block_ptr = remainder_size;\n          *(uint *)((int)current_block_ptr + remainder_size) = aligned_requested_size;\n          previous_block_ptr = (uint *)((int)current_block_ptr + remainder_size);\n        }\n        goto LAB_080062ec;\n      }\n      previous_block_ptr = current_block_ptr;\n      current_block_ptr = (uint *)current_block_ptr[1];\n    }\n    if (*(int *)PTR_DAT_08006340 == 0) {\n      uVar2 = FUN_08006920(block_address);\n      *(undefined4 *)PTR_DAT_08006340 = uVar2;\n    }\n    current_block_ptr = (uint *)FUN_08006920(block_address,aligned_requested_size);\n    if ((current_block_ptr != (uint *)0xffffffff) &&\n       ((previous_block_ptr = (uint *)((int)current_block_ptr + 3U & 0xfffffffc), current_block_ptr == previous_block_ptr ||\n        (new_block_size = FUN_08006920(block_address,(int)previous_block_ptr - (int)current_block_ptr), new_block_size != -1)))) {\n      *previous_block_ptr = aligned_requested_size;\nLAB_080062ec:\n      do_nothing_08006eae(block_address);\n      new_block_size = (int)previous_block_ptr + 0xbU & 0xfffffff8;\n      remainder_size = new_block_size - (int)(previous_block_ptr + 1);\n      if (remainder_size != 0) {\n        *(int *)((int)previous_block_ptr + remainder_size) = -remainder_size;\n        return new_block_size;\n      }\n      return new_block_size;\n    }\n    *block_address = 0xc;\n    do_nothing_08006eae(block_address);\n  }\n  return 0;\n}",
            "called": [
                "FUN_08006920",
                "FUN_08006eac",
                "FUN_08006eae"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006288",
            "calling": [
                "FUN_08006c88",
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08006288"
        },
        "FUN_08002004": {
            "renaming": {
                "FUN_08002004": "check_and_update_flags_08002004",
                "param_1": "params",
                "iVar1": "result",
                "puVar2": "ptr",
                "DAT_080020e8": "original_ptr"
            },
            "code": "int check_and_update_flags_08002004(undefined4 *params) {\n  int result;\n  undefined4 *ptr;\n  \n  if (*(char *)(params + 9) != '\\x01') {\n    *(undefined *)(params + 9) = 1;\n    result = initialize();\n    if (result == 0) {\n      params[10] = params[10] & 0xfffffcfe | 0x100;\n      ptr = (undefined4 *)*params;\n      if ((ptr == DAT_080020e8) && ((DAT_080020e8[-0xff] & 0xf0000) != 0)) {\n        params[10] = params[10] | 0x100000;\n        if ((*(uint *)(DAT_080020e8 + 4) & 0x400) != 0) {\n          params[10] = params[10] & 0xffffcfff | 0x1000;\n        }\n      }\n      else {\n        params[10] = params[10] & 0xffefffff;\n        if ((ptr[1] & 0x400) != 0) {\n          params[10] = params[10] & 0xffffcfff | 0x1000;\n        }\n      }\n      if ((params[10] & 0x1000) == 0) {\n        params[0xb] = 0;\n      }\n      else {\n        params[0xb] = params[0xb] & 0xfffffff9;\n      }\n      *(undefined *)(params + 9) = 0;\n      *ptr = 0xfffffffd;\n      params = (undefined4 *)*params;\n      if (((params[2] & 0xe0000) == 0xe0000) && ((params != DAT_080020e8 || ((DAT_080020e8[-0xff] & 0xf0000) == 0)))) {\n        params[2] = params[2] | 0x500000;\n      }\n      else {\n        params[2] = params[2] | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(params + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}",
            "called": [
                "FUN_08001f84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002004",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "check_and_update_flags_08002004"
        },
        "FUN_08005754": {
            "renaming": {
                "FUN_08005754": "extract_bits_08005754",
                "param_1": "input",
                "bVar1": "is_valid_range",
                "cVar2": "character",
                "uVar3": "extracted_bits",
                "uVar4": "bits_to_shift"
            },
            "code": "uint extract_bits_08005754(uint input)\n{\n    bool is_valid_range;\n    char character;\n    uint extracted_bits;\n    uint bits_to_shift;\n    \n    if (input < 0xe) {\n        if (input + 0x2e < 0x3c) {\n            is_valid_range = true;\n        }\n        else {\n            is_valid_range = false;\n        }\n    }\n    else {\n        is_valid_range = input < 0x3c;\n    }\n    \n    if (is_valid_range) {\n        if (input < 0xe) {\n            input += 0x2e;\n        }\n        character = PTR_DAT_080057ac[input];\n    }\n    else {\n        character = -1;\n    }\n    \n    if (character == -1) {\n        extracted_bits = 0;\n    }\n    else {\n        extracted_bits = FUN_08004a4c();\n        bits_to_shift = *(uint *)PTR_DAT_080057b0;\n        if (bits_to_shift != 0xc) {\n            if (bits_to_shift < 0xc) {\n                extracted_bits >>= (0xc - bits_to_shift) & 0xff;\n            }\n            else {\n                extracted_bits <<= (bits_to_shift - 0xc) & 0xff;\n            }\n        }\n    }\n    \n    return extracted_bits;\n}",
            "called": [
                "FUN_08004a4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005754",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "extract_bits_08005754"
        },
        "FUN_08005fc8": {
            "renaming": {
                "FUN_08005fc8": "initialize_data_if_param_2_is_0xffff_08005fc8",
                "param_1": "is_initialized",
                "param_2": "initialization_value",
                "param_3": "unused_param",
                "param_4": "some_data",
                "puVar1": "data_ptr"
            },
            "code": "void initialize_data_if_param_2_is_0xffff_08005fc8(int param_1, int param_2, undefined4 param_3, undefined4 param_4) {\n  undefined *data_ptr = PTR_DAT_08006068;\n  if (param_1 != 1) {\n    return;\n  }\n  if (param_2 == 0xffff) {\n    *data_ptr = 6;\n    *(undefined4 *)(data_ptr + 0xc) = 0;\n    data_ptr[0x14] = 7;\n    *(undefined4 *)(data_ptr + 0x20) = 0;\n    data_ptr[0x28] = 8;\n    *(undefined4 *)(data_ptr + 0x34) = 0;\n    data_ptr[0x3c] = 9;\n    *(undefined4 *)(data_ptr + 0x48) = 0;\n    data_ptr[0x50] = 10;\n    *(undefined4 *)(data_ptr + 0x5c) = 0;\n    data_ptr[100] = 0x17;\n    *(undefined4 *)(data_ptr + 0x70) = 0;\n    data_ptr[0x78] = 0x17;\n    *(undefined4 *)(data_ptr + 0x84) = 0;\n    data_ptr[0x8c] = 0x17;\n    *(undefined4 *)(data_ptr + 0x98) = 0;\n    data_ptr[0xa0] = 0x17;\n    *(undefined4 *)(data_ptr + 0xac) = 0;\n    data_ptr[0xb4] = 0x17;\n    *(undefined4 *)(data_ptr + 0xc0) = 0;\n    data_ptr[200] = 0x28;\n    *(undefined4 *)(data_ptr + 0xd4) = 0;\n    data_ptr[0xdc] = 0x28;\n    *(undefined4 *)(data_ptr + 0xe8) = 0;\n    data_ptr[0xf0] = 0x28;\n    *(undefined4 *)(data_ptr + 0xfc) = 0;\n    data_ptr[0x104] = 0x28;\n    *(undefined4 *)(data_ptr + 0x110) = 0;\n    data_ptr[0x118] = 0x28;\n    *(undefined4 *)(data_ptr + 0x124) = 0;\n    data_ptr[300] = 0x28;\n    *(undefined4 *)(data_ptr + 0x138) = 0;\n    FUN_08006112(0, PTR_LAB_08005fa0_1_08006070, PTR_DAT_0800606c, data_ptr, param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_08006112"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fc8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_if_param_2_is_0xffff_08005fc8"
        },
        "FUN_08002ab8": {
            "renaming": {
                "FUN_08002ab8": "read_byte_from_buffer_08002ab8",
                "param_1": "buffer",
                "pbVar1": "byte_ptr",
                "short": "short_ptr",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int read_byte_from_buffer_08002ab8(int *buffer)\n{\n  short *short_ptr = (short *)(buffer + 0x2a);\n  if (*short_ptr != 0) {\n    byte *byte_ptr = (byte *)buffer[9];\n    buffer[9] = (int)(byte_ptr + 1);\n    uint *uint_ptr = (uint *)(*buffer + 0x10);\n    *uint_ptr = (uint)*byte_ptr;\n    *short_ptr -= 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ab8",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "read_byte_from_buffer_08002ab8"
        },
        "FUN_080068f0": {
            "renaming": {
                "FUN_080068f0": "process_data_080068f0",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "data_id",
                "param_4": "data_flag",
                "iVar1": "ptr_data",
                "uVar2": "data",
                "uStack_c": "size",
                "uStack_8": "id",
                "uStack_4": "flag",
                "PTR_PTR_DAT_0800691c": "PTR_PTR_DAT_0800691c",
                "FUN_08006cb4": "cleanup",
                "FUNC_08006394": "process"
            },
            "code": "void process_data_080068f0(void *data_ptr, int data_size, int data_id, int data_flag) {\n                          int ptr_data = *(int *)PTR_PTR_DAT_0800691c;\n                          void *data = data_ptr;\n                          int size = data_size;\n                          int id = data_id;\n                          int flag = data_flag;\n                          \n                          if ((ptr_data != 0) && (*(int *)(ptr_data + 0x18) == 0)) {\n                              cleanup(ptr_data);\n                          }\n                          process(ptr_data, *(void **)(ptr_data + 8), data, &size, id, &flag);\n                      }",
            "called": [
                "FUN_08006cb4",
                "FUN_08006394"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068f0",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "process_data_080068f0"
        },
        "FUN_080066b0": {
            "renaming": {
                "FUN_080066b0": "FUNC_080066b0"
            },
            "code": "\nuint FUNC_080066b0(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_0800686a;\n          if (bVar1 != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_080068ec;\nLAB_080067fa:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08006790:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_080066e0;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_08006700;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08006700:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_080068ec;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_080067d6;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08006740:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08006766:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_08006774;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08006774:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_080068ec;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08006790;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08006726:\n            puVar5 = PTR_s_0123456789abcdef_080068e8;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08006766;\n          if (bVar1 == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08006740;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = FUN_08006e90(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_08006856;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_08006856:\n    *puVar3 = uVar6;\n  }\nLAB_0800686a:\n  param_2[4] = 0;\nLAB_080067d6:\n  iVar2 = FUN_080065c0(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_080067ea:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_080067ea;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08006e90",
                "FUN_080065c0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080066b0",
            "calling": [
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "FUNC_080066b0"
        },
        "FUN_08002c52": {
            "renaming": {
                "FUN_08002c52": "do_nothing_08002c52"
            },
            "code": "\nvoid do_nothing_08002c52(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c52",
            "calling": [
                "FUN_08002d1c",
                "FUN_08002c54"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c52"
        },
        "FUN_0800138e": {
            "renaming": {
                "FUN_0800138e": "set_flag_and_call_function_0800138e",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "param1",
                "param_4": "param2",
                "bVar1": "current_flag"
            },
            "code": "void set_flag_and_call_function_0800138e(int data, int flag, int param1, int param2) {\n  byte current_flag = *(byte *)(data + 0x14);\n  *(byte *)(data + 0x14) = current_flag | flag;\n  call_function(data, current_flag | 0xc, param1, param2);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800138e",
            "calling": [
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "set_flag_and_call_function_0800138e"
        },
        "FUN_08002c50": {
            "renaming": {
                "FUN_08002c50": "do_nothing_08002c50"
            },
            "code": "\nvoid do_nothing_08002c50(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c50",
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c50"
        },
        "FUN_0800598a": {
            "renaming": {
                "FUN_0800598a": "update_data_0800598a",
                "param_1": "data_ptr",
                "iVar1": "result",
                "uVar2": "index",
                "local_9": "data"
            },
            "code": "void update_data_0800598a(int data_ptr)\n{\n  int result = 0;\n  ushort index = 0;\n  undefined data = 0;\n  result = get_data(data_ptr, &data);\n  if ((result == 0) && (index = *(short *)(data_ptr + 0x60) + 1U & 0x3f, index != *(ushort *)(data_ptr + 0x62)))) {\n    *(undefined *)(*(int *)(data_ptr + 0x5c) + (uint)*(ushort *)(data_ptr + 0x60)) = data;\n    *(ushort *)(data_ptr + 0x60) = index;\n  }\n  return;\n}",
            "called": [
                "FUN_080054d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800598a",
            "calling": [],
            "imported": false,
            "current_name": "update_data_0800598a"
        },
        "FUN_08001c88": {
            "renaming": {
                "FUN_08001c88": "set_flag_and_call_functions_08001c88",
                "FUN_08002470": "call_function1",
                "FUN_08001c3c": "call_function2",
                "do_nothing_08001c3a": "do_nothing",
                "DAT_08001ca8": "data_pointer"
            },
            "code": "int set_flag_and_call_functions_08001c88(void)\n{\n  *DAT_08001ca8 = *DAT_08001ca8 | 0x10;\n  call_function1(3);\n  call_function2(0xf);\n  do_nothing();\n  return 0;\n}",
            "called": [
                "FUN_08002470",
                "FUN_08001c3a",
                "FUN_08001c3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c88",
            "calling": [
                "FUN_08004c52"
            ],
            "imported": false,
            "current_name": "set_flag_and_call_functions_08001c88"
        },
        "FUN_08001a44": {
            "renaming": {
                "FUN_08001a44": "set_flag_if_second_param_is_one_08001a44",
                "param_1": "memory_location",
                "param_2": "value",
                "uVar1": "flag_value",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void set_flag_if_second_param_is_one_08001a44(int memory_location, int value)\\n{\\n  int flag_value;\\n  if (value == 1) {\\n    flag_value = 1;\\n    if (*(char *)(memory_location + 0x70) == \"\\0\") {\\n      initialize_flag();\\n    }\\n  }\\n  else {\\n    flag_value = 0;\\n  }\\n  *(undefined *)(memory_location + 0x70) = flag_value;\\n  return;\\n}",
            "called": [
                "FUN_080019f6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a44",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "set_flag_if_second_param_is_one_08001a44"
        },
        "FUN_08002c54": {
            "renaming": {
                "FUN_08002c54": "read_data_08002c54",
                "param_1": "data_ptr",
                "pbVar2": "data_byte_ptr",
                "cVar1": "closing_bracket"
            },
            "code": "int read_data_08002c54(int *data_ptr) {\n  char closing_bracket = *(char *)((int)data_ptr + 0x3d);\n  if (*(short *)((int)data_ptr + 0x2a) != 0) {\n    byte *data_byte_ptr = (byte *)data_ptr[9];\n    data_ptr[9] = (int)(data_byte_ptr + 1);\n    *(uint *)(*data_ptr + 0x10) = (uint)*data_byte_ptr;\n    *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n    if ((*(short *)((int)data_ptr + 0x2a) == 0) && (closing_bracket == ')')) {\n      *(uint *)(*data_ptr + 4) = *(uint *)(*data_ptr + 4) & 0xfffffbff;\n      data_ptr[0xc] = 0x21;\n      *(undefined *)((int)data_ptr + 0x3d) = 0x28;\n      do_nothing_08002c52();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c54",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "read_data_08002c54"
        },
        "FUN_080043b4": {
            "renaming": {
                "FUN_080043b4": "check_permissions_080043b4",
                "param_1": "permissions",
                "param_2": "required_permissions",
                "param_3": "is_allowed",
                "param_4": "max_attempts",
                "param_5": "timeout",
                "iVar1": "time_elapsed",
                "*param_1": "*permissions",
                "*(undefined *)((int)param_1 + 0x39)": "*(uint8_t *)((int32_t)permissions + 0x39)",
                "*(undefined *)((int)param_1 + 0x3a)": "*(uint8_t *)((int32_t)permissions + 0x3a)",
                "*(undefined *)(param_1 + 0xe)": "*(uint32_t *)(permissions + 0xe)"
            },
            "code": "uint32_t check_permissions_080043b4(uint32_t **permissions, uint32_t required_permissions, bool is_allowed, int32_t max_attempts, uint32_t timeout)\n{\n  int32_t num_attempts = 0;\n  while (timeout != 0xffffffff && (timeout != 0 && (FUN_08001cc4() - max_attempts) <= timeout)) {\n    num_attempts++;\n  }\n  if (((required_permissions & ~**permissions) == 0) != is_allowed) {\n    return 0;\n  }\n  (*permissions)[3] &= 0xfffffe5f;\n  (*permissions)[5] &= 0xfffffffe;\n  *(uint8_t *)((int32_t)permissions + 0x39) = 0x20;\n  *(uint8_t *)((int32_t)permissions + 0x3a) = 0x20;\n  *(uint32_t *)(permissions + 0xe) = 0;\n  return 3;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043b4",
            "calling": [
                "FUN_08004478"
            ],
            "imported": false,
            "current_name": "check_permissions_080043b4"
        },
        "FUN_0800441a": {
            "renaming": {
                "FUN_0800441a": "check_and_update_int_array_0800441a",
                "param_1": "int_array",
                "*(char *)((int)param_1 + 0x39)": "int_array[9]",
                "*(undefined *)(param_1 + 0xe)": "int_array[14]",
                "do_nothing_08004418()": "do_nothing()",
                "*(undefined *)((int)param_1 + 0x39)": "int_array[9]",
                "*(uint *)(*param_1 + 0xc)": "int_array[3]",
                "FUN_08004204(param_1)": "update_int_array(int_array)",
                "*(uint *)(*param_1 + 0x10)": "int_array[4]",
                "*(uint *)(*param_1 + 0x14)": "int_array[5]",
                "param_1[0xf]": "int_array[15]",
                "*(undefined *)((int)param_1 + 0x3a)": "int_array[10]"
            },
            "code": "int check_and_update_int_array_0800441a(int *int_array) {\n    if (int_array != NULL) {\n        if (int_array[9] == 0) {\n            int_array[14] = 0;\n            do_nothing();\n        }\n        int_array[9] = 0x24;\n        int_array[3] &= 0xffffdfff;\n        update_int_array(int_array);\n        int_array[4] &= 0xffffb7ff;\n        int_array[5] &= 0xffffffd5;\n        int_array[3] |= 0x2000;\n        int_array[15] = 0;\n        int_array[9] = 0x20;\n        int_array[10] = 0x20;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08004418",
                "FUN_08004204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800441a",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "check_and_update_int_array_0800441a"
        },
        "FUN_08004d18": {
            "renaming": {
                "FUN_08004d18": "execute_function_if_not_null_08004d18",
                "PTR_DAT_08004d28": "function_pointer_address",
                "PTR_DAT_08004d2c": "argument_address"
            },
            "code": "void execute_function_if_not_null_08004d18(void)\n{\n  code* function_pointer = *(code**)PTR_DAT_08004d28;\n  if (function_pointer != NULL) {\n    function_pointer(*(int*)PTR_DAT_08004d2c);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d18",
            "calling": [
                "FUN_08003ea0"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_08004d18"
        },
        "FUN_080006d4": {
            "renaming": {
                "FUN_080006d4": "calculate_080006d4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "unaff_r4": "temp2",
                "uVar2": "temp3",
                "uVar3": "temp4",
                "in_r12": "mask",
                "bVar4": "check1",
                "check4": "check2",
                "check6": "check5",
                "check7": "check6",
                "check8": "check7"
            },
            "code": "ulonglong calculate_080006d4(uint input1, uint input2, uint input3, uint input4)\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint mask = 0x80000000;\n  bool check1;\n  bool check2;\n  bool check3;\n  bool check4;\n  temp1 = input1;\n  temp2 = input2;\n  temp3 = input3;\n  temp4 = input4;\n  uint check5 = in_r12 & input4 >> 0x14;\n  if (unaff_r4 != in_r12 && check5 != in_r12) {\n    check1 = (input1 | input2 << 1) == 0;\n    if (!check1) {\n      check1 = (input3 | input4 << 1) == 0;\n    }\n    if (check1) {\n      return (ulonglong)((input2 ^ input4) & mask) << 0x20;\n    }\n    if (unaff_r4 == 0) {\n      uint check6 = input2 & mask;\n      do {\n        uint check7 = input1 & mask;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(check7 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | check6;\n      if (check5 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      uint check8 = input3 & mask;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(check8 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  check2 = (input1 | input2 << 1) == 0;\n  if (check2) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!check2) {\n    check3 = (input3 | input4 << 1) == 0;\n  }\n  temp3 = input2;\n  if (((!check3) && ((unaff_r4 != in_r12 || ((input1 | input2 << 0xc) == 0)))) && ((check5 != in_r12 || (input1 = input3, temp3 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & mask | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp3,input1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006d4",
            "calling": [
                "FUN_080004f8"
            ],
            "imported": false,
            "current_name": "calculate_080006d4"
        },
        "FUN_08000190": {
            "renaming": {
                "FUN_08000190": "FUNC_08000190"
            },
            "code": "\nulonglong FUNC_08000190(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_080002a0;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000190",
            "calling": [
                "FUN_08001a66",
                "FUN_08001814",
                "FUN_080016b4",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "FUNC_08000190"
        },
        "FUN_08006174": {
            "renaming": {
                "FUN_08006174": "execute_function_and_store_results_08006174",
                "param_1": "function_pointer",
                "param_2": "param1",
                "param_3": "param3_ptr",
                "param_4": "param4_ptr",
                "uStack_8": "result1",
                "uStack_4": "result2",
                "PTR_PTR_DAT_08006194": "function_pointer"
            },
            "code": "void execute_function_and_store_results_08006174(void* PTR_PTR_DAT_08006194, int param1, int param2, int* param3_ptr, int* param4_ptr){\n    int result1 = param1;\n    int result2 = param2;\n    void (*function)(int*, int*, int*) = (void (*)(int*, int*, int*)) PTR_PTR_DAT_08006194;\n    function(&result1, &result2, param3_ptr);\n    *param3_ptr = result1;\n    *param4_ptr = result2;\n}",
            "called": [
                "FUN_08006394"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006174",
            "calling": [
                "FUN_0800611c"
            ],
            "imported": false,
            "current_name": "execute_function_and_store_results_08006174"
        },
        "FUN_08007028": {
            "renaming": {
                "FUN_08007028": "initialize_param1_if_error_08007028",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "pointer_to_dat",
                "iVar2": "error_code"
            },
            "code": "void initialize_param1_if_error_08007028(int *output, undefined4 input)\n{\n    undefined *pointer_to_dat = PTR_DAT_08007044;\n    *(undefined4 *)pointer_to_dat = 0;\n    int error_code = FUN_08005724(input);\n    if ((error_code == -1) && (*(int *)pointer_to_dat != 0)) {\n        *output = *(int *)pointer_to_dat;\n    }\n    return;\n}",
            "called": [
                "FUN_08005724"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007028",
            "calling": [
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "initialize_param1_if_error_08007028"
        },
        "FUN_08000194": {
            "renaming": {
                "FUN_08000194": "FUNC_08000194"
            },
            "code": "\nulonglong FUNC_08000194(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_080002a0;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000194",
            "calling": [
                "FUN_080015f8",
                "FUN_08000cd0",
                "FUN_080016b4",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "FUNC_08000194"
        },
        "FUN_08002494": {
            "renaming": {
                "FUN_08002494": "encode_bits_08002494",
                "param_1": "bit_index",
                "param_2": "bit_count",
                "param_3": "bits",
                "uVar1": "shift_amount",
                "uVar2": "shift_distance",
                "uVar3": "offset",
                "uVar4": "mask",
                "uVar5": "shifted_bits"
            },
            "code": "void encode_bits_08002494(uint bit_index, uint bit_count, uint bits)\n{\n  uint shift_amount = (*(int *)(DAT_080024f0 + 0xc) << 0x15) >> 0x1d;\n  uint shift_distance = 7 - shift_amount;\n  if (shift_distance > 3) {\n    shift_distance = 4;\n  }\n  uint offset = shift_amount + 4 > 7 ? shift_amount - 3 : 0;\n  uint mask = (1 << (shift_distance & 0xff)) - 1U;\n  uint shifted_bits = (bits & mask) << (offset & 0xff) | ((1 << (offset & 0xff)) - 1U & bit_count);\n  if ((int)bit_index < 0) {\n    *(char *)(DAT_080024f4 + (bit_index & 0xf)) = (char)(shifted_bits << 4);\n  }\n  else {\n    *(char *)(bit_index + 0xe000e400) = (char)(shifted_bits << 4);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002494",
            "calling": [
                "FUN_08001b48",
                "FUN_08001c3c",
                "FUN_08005510",
                "FUN_08005568"
            ],
            "imported": false,
            "current_name": "encode_bits_08002494"
        },
        "FUN_08002c4e": {
            "renaming": {
                "FUN_08002c4e": "do_nothing_08002c4e"
            },
            "code": "\nvoid do_nothing_08002c4e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c4e",
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c4e"
        },
        "FUN_08004f4c": {
            "renaming": {
                "FUN_08004f4c": "FUNC_08004f4c"
            },
            "code": "\nvoid FUNC_08004f4c(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  uint local_20;\n  uint local_1c;\n  uint local_18;\n  undefined4 local_14;\n  \n  if (param_1 != (int *)0x0) {\n    iVar2 = FUN_08004c78((int)*(char *)(param_1 + 0x16),PTR_DAT_08005204);\n    iVar3 = FUN_08004c78((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08005208);\n    if ((iVar3 == 0) || (iVar2 == 0)) {\n      FUN_080068f0(PTR_s_ERROR__at_least_one_UART_pin_has_0800521c,iVar3);\n    }\n    else {\n      iVar4 = FUN_08004d06(iVar2);\n      *param_1 = iVar4;\n      iVar1 = DAT_08005214;\n      iVar3 = DAT_08005210;\n      iVar2 = DAT_0800520c;\n      if (iVar4 == 0) {\n        FUN_080068f0(PTR_s_ERROR__U_S_ART_pins_mismatch_08005220);\n      }\n      else {\n        if (iVar4 == DAT_0800520c) {\n          *(uint *)(DAT_0800520c + 0xd80c) = *(uint *)(DAT_0800520c + 0xd80c) | 0x4000;\n          *(uint *)(iVar2 + 0xd80c) = *(uint *)(iVar2 + 0xd80c) & 0xffffbfff;\n          *(uint *)(iVar2 + 0xd818) = *(uint *)(iVar2 + 0xd818) | 0x4000;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)((int)param_1 + 0x5a) = 0x25;\n        }\n        else if (iVar4 == DAT_08005210) {\n          *(uint *)(DAT_08005210 + 0x1cc10) = *(uint *)(DAT_08005210 + 0x1cc10) | 0x20000;\n          *(uint *)(iVar3 + 0x1cc10) = *(uint *)(iVar3 + 0x1cc10) & 0xfffdffff;\n          *(uint *)(iVar3 + 0x1cc1c) = *(uint *)(iVar3 + 0x1cc1c) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)((int)param_1 + 0x5a) = 0x26;\n        }\n        else if (iVar4 == DAT_08005214) {\n          *(uint *)(DAT_08005214 + 0x1c810) = *(uint *)(DAT_08005214 + 0x1c810) | 0x40000;\n          *(uint *)(iVar1 + 0x1c810) = *(uint *)(iVar1 + 0x1c810) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1c81c) = *(uint *)(iVar1 + 0x1c81c) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)((int)param_1 + 0x5a) = 0x27;\n        }\n        uVar5 = FUN_08004884((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        uVar6 = FUN_08004cce((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08005208);\n        local_20 = 1 << (*(byte *)((int)param_1 + 0x59) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08005218 + 0x18) = *(uint *)(DAT_08005218 + 0x18) | 1;\n        switch((uVar6 << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x4000000;\n        }\n        local_14 = 3;\n        FUN_08002624(uVar5,&local_20);\n        uVar5 = FUN_08004884((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar6 = FUN_08004cce((int)*(char *)(param_1 + 0x16),PTR_DAT_08005204);\n        local_20 = 1 << (*(byte *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        FUN_08002624(uVar5,&local_20);\n        *(int **)(PTR_DAT_08005228 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        FUN_0800441a(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800441a",
                "FUN_08004884",
                "FUN_08004d06",
                "FUN_080068f0",
                "FUN_08002624",
                "FUN_08004cce",
                "FUN_08004c78"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004f4c",
            "calling": [
                "FUN_08005a68",
                "FUN_08005384"
            ],
            "imported": false,
            "current_name": "FUNC_08004f4c"
        },
        "FUN_080055bc": {
            "renaming": {
                "FUN_080055bc": "find_index_of_value_080055bc",
                "param_1": "value_to_find",
                "uVar1": "index"
            },
            "code": "uint find_index_of_value_080055bc(int value_to_find)\n{\n  uint index = 0;\n\n  if (value_to_find == 0)\n  {\n    index = 5;\n  }\n  else\n  {\n    while (index < 5)\n    {\n      if (value_to_find == *(int *)(PTR_DAT_080055dc + index * 4))\n      {\n        return index;\n      }\n      index++;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055bc",
            "calling": [
                "FUN_080055e0",
                "FUN_08005604"
            ],
            "imported": false,
            "current_name": "find_index_of_value_080055bc"
        },
        "FUN_08001960": {
            "renaming": {
                "FUN_08001960": "set_params_08001960",
                "param_1": "obj",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "param_6": "param5",
                "iVar1": "result",
                "puVar2": "params",
                "uVar3": "param3_ptr",
                "uVar4": "param4_ptr",
                "uVar5": "param3_ptr",
                "uVar6": "param4_ptr",
                "iVar2": "result2",
                "result3": "result3",
                "result4": "result4",
                "result5": "result5",
                "uVar7": "param1_ptr",
                "uVar8": "param2_ptr",
                "uVar9": "param4_ptr2",
                "uVar10": "param5_ptr2"
            },
            "code": "void set_params_08001960(int obj, int param1, int param2, int param3, int param4, int param5) {\\n  int result = FUN_08000a04(param2, param3, param4, param5, param3);\\n  if (result == 0) {\\n    *(int *)(obj + 0x60) = param2;\\n    *(int *)(obj + 100) = param3;\\n    *(int *)(obj + 0x68) = param4;\\n    *(int *)(obj + 0x6c) = param5;\\n    if (*(char *)(obj + 0x70) != \"\\0\") {\\n      int *params = *(int **)(obj + 0x3c);\\n      int param3_ptr = *params;\\n      int param4_ptr = params[1];\\n      int result2 = FUN_080009dc(param4, param5, param3_ptr, param4_ptr);\\n      if (result2 == 0) {\\n        int result3 = FUN_08000a18(param2, param3, param3_ptr, param4_ptr);\\n        if (result3 != 0) {\\n          *params = param2;\\n          params[1] = param3;\\n        }\\n      }\\n      else {\\n        *params = param4;\\n        params[1] = param5;\\n      }\\n      int param1_ptr = *(int *)(obj + 0x48);\\n      int param2_ptr = *(int *)(obj + 0x4c);\\n      int param4_ptr2 = *(int *)(obj + 0x68);\\n      int param5_ptr2 = *(int *)(obj + 0x6c);\\n      int result4 = FUN_08000a18(param1_ptr, param2_ptr, param4_ptr2, param5_ptr2);\\n      if (result4 != 0) {\\n        *(int *)(obj + 0x48) = param4_ptr2;\\n        *(int *)(obj + 0x4c) = param5_ptr2;\\n        return;\\n      }\\n      int result5 = FUN_080009dc(param1_ptr, param2_ptr, param2, param3);\\n      if (result5 != 0) {\\n        *(int *)(obj + 0x48) = param2;\\n        *(int *)(obj + 0x4c) = param3;\\n      }\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08000a04",
                "FUN_08000a18",
                "FUN_080009dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001960",
            "calling": [
                "FUN_08001ab0",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "set_params_08001960"
        },
        "FUN_08004ca2": {
            "renaming": {
                "FUN_08004ca2": "check_param_08004ca2",
                "param_1": "input_param",
                "uVar1": "result",
                "FUN_08004c8a": "call_helper_function"
            },
            "code": "int check_param_08004ca2(int input_param){\n  int result = -1;\n  if (input_param != 0) {\n    result = call_helper_function();\n  }\n  return result;\n}",
            "called": [
                "FUN_08004c8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ca2",
            "calling": [
                "FUN_08005384",
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "check_param_08004ca2"
        },
        "FUN_08002810": {
            "renaming": {
                "FUN_08002810": "is_param2_bit_set_in_param1_08002810",
                "param_1": "ptr_param1",
                "param_2": "param2",
                "PTR_": "ptr_",
                "DAT_": "data_"
            },
            "code": "int is_param2_bit_set_in_param1_08002810(uint32_t* PTR_param1, uint32_t param2) {\n    uint32_t* PTR_param1_offset_8 = PTR_param1 + 2;\n    uint32_t param1_offset_8_dereferenced = *PTR_param1_offset_8;\n    if ((param2 & param1_offset_8_dereferenced) == 0) {\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002810",
            "calling": [
                "FUN_08004c48"
            ],
            "imported": false,
            "current_name": "is_param2_bit_set_in_param1_08002810"
        },
        "FUN_0800224c": {
            "renaming": {
                "FUN_0800224c": "check_validity_0800224c",
                "param_1": "param_array",
                "iVar1": "is_valid",
                "DAT_08002340": "MASK_1",
                "DAT_08002344": "MASK_2",
                "FUN_080020f0": "validate",
                "*(undefined4 *)*param_1": "*(int *)*param_array",
                "*(uint *)(*param_1 + 4)": "*(unsigned int *)(*param_array + 4)",
                "*(uint *)(*param_1 + 8)": "*(unsigned int *)(*param_array + 8)",
                "*(uint *)(*param_1 + 0xc)": "*(unsigned int *)(*param_array + 0xc)",
                "*(uint *)(*param_1 + 0x10)": "*(unsigned int *)(*param_array + 0x10)",
                "*(uint *)(*param_1 + 0x14)": "*(unsigned int *)(*param_array + 0x14)",
                "*(uint *)(*param_1 + 0x18)": "*(unsigned int *)(*param_array + 0x18)",
                "*(uint *)(*param_1 + 0x1c)": "*(unsigned int *)(*param_array + 0x1c)",
                "*(uint *)(*param_1 + 0x20)": "*(unsigned int *)(*param_array + 0x20)",
                "*(uint *)(*param_1 + 0x24)": "*(unsigned int *)(*param_array + 0x24)",
                "*(uint *)(*param_1 + 0x28)": "*(unsigned int *)(*param_array + 0x28)",
                "*(uint *)(*param_1 + 0x2c)": "*(unsigned int *)(*param_array + 0x2c)",
                "*(uint *)(*param_1 + 0x30)": "*(unsigned int *)(*param_array + 0x30)",
                "*(uint *)(*param_1 + 0x34)": "*(unsigned int *)(*param_array + 0x34)",
                "*(uint *)(*param_1 + 0x38)": "*(unsigned int *)(*param_array + 0x38)",
                "FUN_080049f0": "perform_action",
                "param_1[0xb]": "param_array[11]",
                "param_1[10]": "param_array[10]",
                "*(undefined *)(param_1 + 9)": "*(char *)(param_array + 9)"
            },
            "code": "int check_validity_0800224c(int *param_array)\n{\n  int is_valid = 0;\n  if (param_array == NULL) {\n    is_valid = 1;\n  }\n  else {\n    param_array[10] |= 2;\n    is_valid = validate(param_array);\n    if (is_valid == 0) {\n      *(int *)*param_array = -32;\n      *(unsigned int *)(*param_array + 4) &= DAT_08002340;\n      *(unsigned int *)(*param_array + 8) &= DAT_08002344;\n      *(unsigned int *)(*param_array + 0xc) &= 0xff000000;\n      *(unsigned int *)(*param_array + 0x10) &= 0xc0000000;\n      *(unsigned int *)(*param_array + 0x14) &= 0xfffff000;\n      *(unsigned int *)(*param_array + 0x18) &= 0xfffff000;\n      *(unsigned int *)(*param_array + 0x1c) &= 0xfffff000;\n      *(unsigned int *)(*param_array + 0x20) &= 0xfffff000;\n      *(unsigned int *)(*param_array + 0x24) &= 0xfffff000;\n      *(unsigned int *)(*param_array + 0x28) &= 0xfffff000;\n      *(unsigned int *)(*param_array + 0x2c) &= 0xff000000;\n      *(unsigned int *)(*param_array + 0x2c) &= 0xff000000;\n      *(unsigned int *)(*param_array + 0x30) &= 0xc0000000;\n      *(unsigned int *)(*param_array + 0x34) &= 0xc0000000;\n      *(unsigned int *)(*param_array + 0x38) &= 0xffc00000;\n      *(unsigned int *)(*param_array + 0x38) &= 0xffc00000;\n      perform_action(param_array);\n      param_array[11] = 0;\n      param_array[10] = 0;\n    }\n    *(char *)(param_array + 9) = 0;\n  }\n  return is_valid;\n}",
            "called": [
                "FUN_080020f0",
                "FUN_080049f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800224c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "check_validity_0800224c"
        },
        "FUN_080054b0": {
            "renaming": {
                "FUN_080054b0": "is_flag_set_080054b0",
                "param_1": "flag_index",
                "uVar1": "flag_value",
                "PTR_DAT_080054d0": "flag_data_pointer",
                "byte": "byte_value",
                "DAT_080054d0": "flag_data",
                "FUN_080047e8": "get_flag_value"
            },
            "code": "bool is_flag_set_080054b0(int flag_index)\n{\n  uint32_t flag_value = *(uint32_t *)(PTR_DAT_080054d0 + (uint32_t)*(uint8_t *)(flag_index + 0x44) * 4);\n  uint32_t masked_value = flag_value & 0x21;\n  return masked_value == 0x21;\n}",
            "called": [
                "FUN_080047e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b0",
            "calling": [],
            "imported": false,
            "current_name": "is_flag_set_080054b0"
        },
        "FUN_08006f00": {
            "renaming": {
                "FUN_08006f00": "process_input_08006f00",
                "param_1": "input_size",
                "puVar1": "ptr1",
                "uVar2": "var1",
                "piVar3": "function_pointers",
                "iVar4": "current_function",
                "pcVar5": "current_function_pointer",
                "PTR_PTR_DAT_08006f0c": "ptr_to_ptr_to_function_pointers",
                "PTR_DAT_08006f30": "ptr_to_result",
                "in_lr": "link_register",
                "unaff_r4": "register_4",
                "unaff_r5": "register_5"
            },
            "code": "int process_input_08006f00(uint input_size) {\n  int *function_pointers = *(int **)PTR_PTR_DAT_08006f0c;\n  if (input_size > 31) {\n    *function_pointers = 22;\n    return -1;\n  }\n  int current_function = function_pointers[17];\n  if ((current_function != 0) && (*(code **)(current_function + input_size * 4) != (code *)0)) {\n    if (*(code **)(current_function + input_size * 4) != (code *)1) {\n      if (*(code **)(current_function + input_size * 4) == (code *)-1) {\n        *function_pointers = 22;\n        return 1;\n      }\n      *(undefined4 *)(current_function + input_size * 4) = 0;\n      (*(code **)(current_function + input_size * 4))(input_size);\n    }\n    return 0;\n  }\n  undefined *ptr1 = PTR_PTR_DAT_08006f0c;\n  undefined4 var1 = thunk_FUN_08005750(function_pointers);\n  undefined *ptr2 = PTR_DAT_08006f30;\n  *(undefined4 *)PTR_DAT_08006f30 = 0;\n  int result = FUN_08005740(var1, input_size, input_size, 0, ptr1, unaff_r4, unaff_r5, in_lr);\n  if ((result == -1) && (*(int *)ptr2 != 0)) {\n    *function_pointers = *(int *)ptr2;\n  }\n  return result;\n}",
            "called": [
                "FUN_08005740",
                "thunk_FUN_08005750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f00",
            "calling": [
                "FUN_08006ac0"
            ],
            "imported": false,
            "current_name": "process_input_08006f00"
        },
        "FUN_080016b4": {
            "renaming": {
                "FUN_080016b4": "check_if_valid_080016b4",
                "param_1": "input",
                "cVar1": "result",
                "iVar2": "random_int_1",
                "iVar3": "random_int_2",
                "uVar4": "var_1",
                "uVar5": "var_2",
                "uVar6": "var_3",
                "uVar7": "var_4",
                "uVar8": "var_5",
                "uVar9": "var_6",
                "uVar10": "var_7",
                "cVar11": "char_1",
                "uVar12": "var_8",
                "uVar13": "var_9",
                "uVar14": "var_10",
                "uVar15": "var_11",
                "uVar16": "var_12",
                "uVar17": "var_13",
                "uVar18": "var_14",
                "local_38": "local_var_1",
                "uStack_34": "local_var_2"
            },
            "code": "char check_if_valid_080016b4(int input)\n{\n  char result;\n  int random_int_1;\n  int random_int_2;\n  undefined4 var_1;\n  undefined4 var_2;\n  undefined4 var_3;\n  undefined4 var_4;\n  undefined4 var_5;\n  undefined4 var_6;\n  undefined4 var_7;\n  char char_1;\n  undefined4 var_8;\n  undefined4 var_9;\n  undefined4 var_10;\n  undefined8 var_11;\n  undefined8 var_12;\n  undefined8 var_13;\n  undefined8 var_14;\n  undefined4 local_var_1;\n  undefined4 local_var_2;\n  \n  result = *(char *)(input + 0x70);\n  if (result != '\\0') {\n    random_int_1 = get_random_int();\n    if ((uint)(random_int_1 - *(int *)(input + 0x44)) < *(uint *)(input + 0x58)) {\n      result = '\\0';\n    }\n    else {\n      var_2 = **(undefined4 **)(input + 0x38);\n      var_5 = (*(undefined4 **)(input + 0x38))[1];\n      var_11 = get_value(**(undefined4 **)(input + 0x40),(*(undefined4 **)(input + 0x40))[1]);\n      var_10 = (undefined4)((ulonglong)var_11 >> 0x20);\n      var_12 = get_value(var_2,var_5,*(undefined4 *)(input + 0x50),*(undefined4 *)(input + 0x54));\n      var_1 = (undefined4)((ulonglong)var_12 >> 0x20);\n      var_13 = get_value((int)var_11,var_10,*(undefined4 *)(input + 0x20),*(undefined4 *)(input + 0x24));\n      var_13 = get_value((int)var_13,(int)((ulonglong)var_13 >> 0x20),*(undefined4 *)(input + 0x48),*(undefined4 *)(input + 0x4c));\n      *(undefined8 *)(input + 0x48) = var_13;\n      char_1 = *(char *)(input + 0x71);\n      if (char_1 == '\\0') {\n        var_14 = get_value((int)var_12,var_1,*(undefined4 *)(input + 0x18),*(undefined4 *)(input + 0x1c));\n        var_13 = get_value((int)var_13,(int)((ulonglong)var_13 >> 0x20),(int)var_14,(int)((ulonglong)var_14 >> 0x20));\n        *(undefined8 *)(input + 0x48) = var_13;\n      }\n      var_3 = *(undefined4 *)(input + 0x48);\n      var_6 = *(undefined4 *)(input + 0x4c);\n      var_8 = *(undefined4 *)(undefined8 *)(input + 0x68);\n      var_9 = *(undefined4 *)(input + 0x6c);\n      var_13 = *(undefined8 *)(input + 0x68);\n      random_int_2 = check_if_valid_080016b4_2(var_3,var_6,var_8,var_9);\n      if (random_int_2 == 0) {\n        var_4 = *(undefined4 *)(input + 0x60);\n        local_var_1 = *(undefined4 *)(input + 100);\n        random_int_2 = check_if_valid_080016b4_3(var_3,var_6);\n        if (random_int_2 != 0) {\n          *(undefined4 *)(input + 0x48) = var_4;\n          *(undefined4 *)(input + 0x4c) = local_var_1;\n        }\n      }\n      else {\n        *(undefined4 *)(input + 0x48) = var_8;\n        *(undefined4 *)(input + 0x4c) = var_9;\n      }\n      if (char_1 == '\\0') {\n        var_11 = 0;\n      }\n      else {\n        var_11 = get_value((int)var_11,var_10,*(undefined4 *)(input + 0x18),*(undefined4 *)(input + 0x1c));\n      }\n      local_var_2 = (undefined4)((ulonglong)var_11 >> 0x20);\n      local_var_1 = (undefined4)var_11;\n      var_10 = *(undefined4 *)(input + 0x48);\n      var_3 = *(undefined4 *)(input + 0x4c);\n      var_11 = get_value((int)var_12,var_1,*(undefined4 *)(input + 0x28),*(undefined4 *)(input + 0x2c));\n      var_11 = get_value(var_10,var_3,(int)var_11,(int)((ulonglong)var_11 >> 0x20));\n      var_11 = get_value(local_var_1,local_var_2,(int)var_11,(int)((ulonglong)var_11 >> 0x20));\n      var_10 = (undefined4)((ulonglong)var_11 >> 0x20);\n      random_int_2 = check_if_valid_080016b4_3(var_8,var_9,(int)var_11,var_10);\n      if (random_int_2 == 0) {\n        var_13 = *(undefined8 *)(input + 0x60);\n        random_int_2 = check_if_valid_080016b4_3((int)var_11,var_10,*(undefined4 *)(undefined8 *)(input + 0x60),*(undefined4 *)(input + 100));\n        if (random_int_2 == 0) {\n          var_13 = var_11;\n        }\n      }\n      **(undefined8 **)(input + 0x3c) = var_13;\n      *(undefined4 *)(input + 0x50) = var_2;\n      *(undefined4 *)(input + 0x54) = var_5;\n      *(int *)(input + 0x44) = random_int_1;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08000194",
                "FUN_08000a18",
                "FUN_080004f8",
                "FUN_080058e0",
                "FUN_08000190",
                "FUN_080009dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016b4",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "check_if_valid_080016b4"
        },
        "FUN_0800074c": {
            "renaming": {
                "FUN_0800074c": "FUNC_0800074c"
            },
            "code": "\nulonglong FUNC_0800074c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = FUN_080008ba();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800086a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800086a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_080008ba"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800074c",
            "calling": [
                "FUN_080015f8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "FUNC_0800074c"
        },
        "FUN_080018f8": {
            "renaming": {
                "FUN_080018f8": "call_function_and_return_080018f8",
                "FUN_08001814": "call_helper_function"
            },
            "code": "void call_function_and_return_080018f8(void)\n{\n  call_helper_function();\n  return;\n}",
            "called": [
                "FUN_08001814"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018f8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "call_function_and_return_080018f8"
        },
        "FUN_08005890": {
            "renaming": {
                "FUN_08005890": "get_character_from_data_08005890",
                "param_1": "index",
                "uVar4": "data_value",
                "iVar2": "data_index",
                "uVar3": "shifted_value",
                "cVar1": "result",
                "PTR_DAT_080058d8": "data_array_1",
                "PTR_DAT_080058dc": "data_array_2"
            },
            "code": "char get_character_from_data_08005890(uint index)\n{\n  char result;\n  int data_index;\n  uint data_value;\n  if (index < 60) {\n    data_value = (uint)(char)PTR_DAT_080058d8[index];\n  }\n  else {\n    data_value = 0xffffffff;\n  }\n  if (data_value == 0xffffffff) {\n    result = '\\0';\n  }\n  else {\n    data_index = find_data_index(data_value, PTR_DAT_080058dc);\n    if (data_index == 0) {\n      result = '\\0';\n    }\n    else {\n      uint shifted_value = (data_value << 0x18) >> 0x1c;\n      uint mask = 1 << (data_value & 0xf) & 0xffff;\n      uint data = get_data(shifted_value, mask);\n      result = map_data_to_char(data);\n    }\n  }\n  if (result != '\\0') {\n    result = '\\x01';\n  }\n  return result;\n}",
            "called": [
                "FUN_08004848",
                "FUN_080047f4",
                "FUN_08004c48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005890",
            "calling": [
                "FUN_08000cd0",
                "FUN_080015b2"
            ],
            "imported": false,
            "current_name": "get_character_from_data_08005890"
        },
        "FUN_08005da0": {
            "renaming": {
                "FUN_08005da0": "print_welcome_message_08005da0",
                "FUN_08005d8a": "display_logo"
            },
            "code": "void print_welcome_message_08005da0(void)\n{\n  display_logo();\n  return;\n}",
            "called": [
                "FUN_08005d8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da0",
            "calling": [],
            "imported": false,
            "current_name": "print_welcome_message_08005da0"
        },
        "FUN_08004cb2": {
            "renaming": {
                "FUN_08004cb2": "find_character_in_string_08004cb2",
                "param_1": "character_to_find",
                "param_2": "string",
                "*param_2": "*string",
                "0xffffffff": "STRING_NOT_FOUND",
                "*(undefined4 *)(param_2 + 8)": "address_of_character"
            },
            "code": "unsigned int find_character_in_string_08004cb2(int character_to_find, char *string) {\n    while(true) {\n        if(*string == -1) {\n            return 0xffffffff;\n        }\n        if(*string == character_to_find) {\n            break;\n        }\n        string += 0xc;\n    }\n    return *(unsigned int *)(string + 8);\n}",
            "called": [
                "FUN_08004cb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb2",
            "calling": [
                "FUN_08004cb2",
                "FUN_08004cce"
            ],
            "imported": false,
            "current_name": "find_character_in_string_08004cb2"
        },
        "FUN_08004ef4": {
            "renaming": {
                "FUN_08004ef4": "check_and_call_func_08004ef4",
                "param_1": "input_param",
                "iVar1": "result",
                "FUN_08004e70": "get_result",
                "*(char *)(iVar1 + 0x5d)": "*(char *)(result + 0x5d)",
                "FUN_08002c10": "call_func"
            },
            "code": "void check_and_call_func_08004ef4(undefined4 input_param)\\n{\\n  int result = get_result();\\n  if (*(char *)(result + 0x5d) == \"\\0\") {\\n    call_func(input_param);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08002c10",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef4",
            "calling": [
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "check_and_call_func_08004ef4"
        },
        "FUN_08001294": {
            "renaming": {
                "FUN_08001294": "set_data_at_offset_08001294",
                "param_1": "base_address",
                "param_2": "data_1",
                "param_3": "data_2",
                "param_4": "data_3",
                "param_5": "data_4",
                "undefined": "uint8_t"
            },
            "code": "void set_data_at_offset_08001294(int base_address, uint8_t data_1, uint8_t data_2, uint8_t data_3, uint8_t data_4)\n{\n  *(uint8_t *)(base_address + 0x18) = data_1;\n  *(uint8_t *)(base_address + 0x19) = data_2;\n  *(uint8_t *)(base_address + 0x1a) = data_3;\n  *(uint8_t *)(base_address + 0x1b) = data_4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001294",
            "calling": [
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "set_data_at_offset_08001294"
        },
        "FUN_08002384": {
            "renaming": {
                "FUN_08002384": "check_if_initialized_08002384",
                "param_1": "params",
                "iVar1": "result",
                "uVar2": "quotient",
                "iVar3": "start_time",
                "iVar4": "current_time",
                "uVar5": "divisor",
                "local_14": "i",
                "PTR_DAT_0800246c": "PTR_DAT_divisor",
                "FUN_080020f0": "generate_random_num",
                "FUN_08003da4": "get_quotient",
                "FUN_08001f84": "initialize_params",
                "FUN_08001cc4": "get_current_time"
            },
            "code": "int check_if_initialized_08002384(int *params) {\n  int result = 0;\n  if (*(char *)(params + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(params + 9) = 1;\n  int random_num = generate_random_num();\n  if (random_num == 0) {\n    params[10] = params[10] & 0xffffeefdU | 2;\n    uint divisor = *(uint *)PTR_DAT_0800246c;\n    uint quotient = FUN_08003da4(2);\n    for (int i = divisor / quotient << 1; i != 0; i--) {\n    }\n    initialize_params(params);\n    *(uint *)(*params + 8) = *(uint *)(*params + 8) | 8;\n    int start_time = get_current_time();\n    while ((*(uint *)(*params + 8) & 8) != 0) {\n      int current_time = get_current_time();\n      if (10 < (uint)(current_time - start_time)) {\n        params[10] = params[10] & 0xffffffedU | 0x10;\n        *(undefined *)(params + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(*params + 8) = *(uint *)(*params + 8) | 4;\n    int start_time_2 = get_current_time();\n    while ((*(uint *)(*params + 8) & 4) != 0) {\n      int current_time_2 = get_current_time();\n      if (10 < (uint)(current_time_2 - start_time_2)) {\n        params[10] = params[10] & 0xffffffedU | 0x10;\n        *(undefined *)(params + 9) = 0;\n        return 1;\n      }\n    }\n    params[10] = params[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(params + 9) = 0;\n  return result;\n}\n",
            "called": [
                "FUN_080020f0",
                "FUN_08003da4",
                "FUN_08001cc4",
                "FUN_08001f84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002384",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "check_if_initialized_08002384"
        },
        "FUN_08005650": {
            "renaming": {
                "FUN_08005650": "do_nothing_08005650"
            },
            "code": "\nvoid do_nothing_08005650(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005650",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "do_nothing_08005650"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "increment_and_store_char_08002ad8",
                "param_1": "arr",
                "puVar1": "char_arr",
                "*puVar1": "*char_arr",
                "PTR_00000009": "arr[9]",
                "*(short *)((int)param_1 + 0x2a)": "*counter",
                "*(short *)((int)param_1 + 0x2a) + -1": "*counter = *counter - 1",
                "(int)(puVar1 + 1)": "(int)(char_arr + 1)",
                "(char)*(undefined4 *)(*param_1 + 0x10)": "(char)*(int *)(*arr + 0x10)"
            },
            "code": "int increment_and_store_char_08002ad8(int *arr)\n{\n  short *counter = (short *)((int)arr + 0x2a);\n  if (*counter != 0) {\n    char *char_arr = (char *)PTR_00000009;\n    PTR_00000009 = (int)(char_arr + 1);\n    *char_arr = (char)*(int *)(*arr + 0x10);\n    *counter = *counter - 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "increment_and_store_char_08002ad8"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "calculate_result_08004204",
                "*param_1": "params",
                "DAT_080043ac": "DAT_080043ac",
                "DAT_080043b0": "DAT_080043b0",
                "param_1[1]": "params[1]",
                "param_1[2]": "params[2]",
                "param_1[3]": "params[3]",
                "param_1[4]": "params[4]",
                "param_1[5]": "params[5]",
                "param_1[6]": "params[6]",
                "*(uint *)(*param_1 + 0xc)": "*ptr2",
                "*(uint *)(*param_1 + 0x10)": "*ptr1",
                "*(uint *)(*param_1 + 0x14)": "*ptr3",
                "iVar3": "var1",
                "iVar4": "var2",
                "iVar5": "var3",
                "iVar6": "var4",
                "iVar7": "var5",
                "iVar8": "var6",
                "iVar9": "var7",
                "(uint)((int)((ulonglong)uVar2 * (ulonglong)(((uint)(iVar6 * 0x19) / (uint)(iVar11 << 2) + (uint)((ulonglong)uVar2 * ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 2))) >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c)": "result",
                "(uint)((ulonglong)uVar2 * (ulonglong)(((uint)(iVar4 * 0x19) / (uint)(iVar9 << 2) + (uint)((ulonglong)uVar2 * ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 2))) >> 0x25) * -100) * 0x10 + 0x32) >> 0x25)": "result",
                "(uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 2)) >> 0x25) * 0x10)": "result",
                "iVar12": "params[0]",
                "mask1": "mask1",
                "mask2": "mask2",
                "mask3": "mask3",
                "base1": "base1",
                "base2": "base2",
                "factor1": "factor1",
                "factor2": "factor2",
                "offset": "offset",
                "FUN_08003c50_or_08003c70": "FUN_08003c50_or_08003c70"
            },
            "code": "void calculate_result_08004204(int *params) {\n  const int base1 = 0x19;\n  const int base2 = 0x25;\n  const int factor1 = -100;\n  const int factor2 = 0x10;\n  const int offset = 0x32;\n  const int mask1 = 0xffffcfff;\n  const int mask2 = 0xffffe9f3;\n  const int mask3 = 0xfffffcff;\n  uint *ptr1 = (uint *)(params[0] + 0x10);\n  uint *ptr2 = (uint *)(params[0] + 0xc);\n  uint *ptr3 = (uint *)(params[0] + 0x14);\n  *ptr1 = (*ptr1 & mask1) | params[3];\n  *ptr2 = params[2] | params[4] | params[5] | (*ptr2 & mask2);\n  *ptr3 = (*ptr3 & mask3) | params[6];\n  int var1 = params[1];\n  int var2 = FUN_08003c50_or_08003c70(params[0]);\n  int var3 = FUN_08003c50_or_08003c70(params[0]);\n  int var4 = FUN_08003c50_or_08003c70(params[0]);\n  int var5 = FUN_08003c50_or_08003c70(params[0]);\n  int var6 = FUN_08003c50_or_08003c70(params[0]);\n  int var7 = FUN_08003c50_or_08003c70(params[0]);\n  uint result = (uint)((int)(((uint)var2 * base1 / (uint)(var4 << 2) + ((uint)((ulonglong)var2 * ((ulonglong)(uint)(var3 * base1) / (ulonglong)(uint)(var5 << 2)) >> base2) * factor1) * factor2 + offset) >> base2) << 0x17) >> 0x1c) + ((uint)((ulonglong)var2 * (ulonglong)(((uint)(var6 * base1) / (uint)(var7 << 2) + ((uint)((ulonglong)var2 * ((ulonglong)(uint)(var5 * base1) / (ulonglong)(uint)(var7 << 2))) >> base2) * factor1) * factor2 + offset) >> base2) & 0xf0) + (uint)(((ulonglong)params[4] * ((ulonglong)(uint)(var1 * base1) / (ulonglong)(uint)(params[1] << 2))) >> base2) * factor2;\n  *(uint *)(params[0] + 8) = result;\n}",
            "called": [
                "FUN_08003c70",
                "FUN_08003c50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "FUN_0800441a"
            ],
            "imported": false,
            "current_name": "calculate_result_08004204"
        },
        "FUN_08005da8": {
            "renaming": {
                "FUN_08005da8": "perform_operation_08005da8",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "iVar1": "result",
                "uVar2": "temp_result",
                "iVar3": "temp_result",
                "bVar4": "temp_mask",
                "lVar5": "loop_count",
                "uVar6": "temp_value",
                "uVar7": "temp_value_2"
            },
            "code": "int perform_operation_08005da8(int input_1, int input_2, int input_3, uint input_4, byte input_5) {\n  int result;\n  int temp_result;\n  long long loop_count;\n  uint temp_input_4;\n  uint temp_input_4_masked;\n  uint temp_mask;\n  long long i;\n  uint temp_value;\n  uint temp_value_2;\n  uint temp_value_3;\n  uint temp_value_4;\n\n  result = perform_sub_operation(input_3, input_4, input_3, input_4);\n  if (result == 0) {\n    temp_input_4_masked = input_4 & 0x7fffffff;\n    result = perform_sub_operation(input_3, temp_input_4_masked, 0xffffffff, 0x08005f08);\n    if ((result == 0) &&\n       ((result = perform_sub_operation(input_3, temp_input_4_masked, 0xffffffff, 0x08005f08)) == 0)) {\n      result = print_string(input_1, 0x08005f20);\n    }\n    else {\n      temp_value = 0xe0000000;\n      temp_mask = 0x08005f0c;\n      temp_result = perform_sub_operation(input_3, input_4, temp_value, temp_mask);\n      if (temp_result == 0) {\n        temp_value = 0xe0000000;\n        temp_mask = 0x08005f10;\n        temp_result = perform_sub_operation(input_3, input_4, temp_value, temp_mask);\n        if (temp_result == 0) {\n          temp_result = perform_sub_operation(input_3, input_4, 0, 0);\n          if (temp_result != 0) {\n            temp_result = print_string(input_1, 0x2d);\n            input_4 = input_4 + 0x80000000;\n          }\n          loop_count = (long long)0x08005f14 << 0x20;\n          for (i = 0; i < input_5; i = i + 1) {\n            temp_value_2 = (uint)(loop_count >> 0x20);\n            loop_count = perform_sub_operation((int)loop_count, temp_value_2, 0, 0x08005f18);\n          }\n          temp_input_4 = input_4;\n          temp_value_3 = (uint)(loop_count >> 0x20);\n          temp_result = perform_sub_operation(input_3, temp_input_4, (int)loop_count, temp_value_3);\n          temp_value_4 = get_current_time();\n          temp_value_3 = get_random_number();\n          temp_result = perform_sub_operation((int)temp_result, (int)(loop_count >> 0x20), (int)temp_value_4, (int)(temp_value_4 >> 0x20));\n          temp_result = perform_sub_operation((int)temp_result, (int)(loop_count >> 0x20), (int)temp_value_3, (int)(temp_value_3 >> 0x20));\n          temp_result = print_int(input_1, temp_result, 10);\n          result = result + temp_result;\n          if (input_5 != 0) {\n            temp_result = print_string(input_1, 0x08005f28);\n            result = result + temp_result;\n          }\n          while (input_5 != 0) {\n            temp_value_4 = (uint)(loop_count >> 0x20);\n            loop_count = perform_sub_operation((int)loop_count, temp_value_4, 0, 0x08005f18);\n            temp_value_3 = get_random_number();\n            temp_result = print_int(input_1, get_current_time(), 10);\n            result = result + temp_result;\n            temp_result = print_int(input_1, temp_value_3, 10);\n            result = result + temp_result;\n            temp_result = perform_sub_operation((int)loop_count, (int)(loop_count >> 0x20), 0, 0x08005f18);\n            input_5 = input_5 - 1;\n          }\n        }\n        else {\n          result = print_string(input_1, 0x08005f24);\n        }\n      }\n      else {\n        result = print_string(input_1, 0x08005f24);\n      }\n    }\n  }\n  else {\n    result = print_string(input_1, 0x08005f1c);\n  }\n  return result;\n}\n",
            "called": [
                "FUN_080009f0",
                "FUN_08000a18",
                "FUN_08000a58",
                "FUN_08000a2c",
                "FUN_0800074c",
                "FUN_080009dc",
                "FUN_0800040c",
                "FUN_08005c96",
                "FUN_08005cb6",
                "FUN_08000194",
                "FUN_080004f8",
                "FUN_08005d82",
                "FUN_0800042c",
                "FUN_08000aa8",
                "FUN_08005d8a",
                "FUN_08000190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da8",
            "calling": [
                "FUN_08005f2c"
            ],
            "imported": false,
            "current_name": "perform_operation_08005da8"
        },
        "FUN_080045fe": {
            "renaming": {
                "FUN_080045fe": "set_flag_and_call_function_080045fe",
                "param_1": "flag_ptr",
                "*param_1": "*flag_ptr",
                "uint": "uint32_t",
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "int": "int",
                "char": "char",
                "FUN_08005604": "call_some_function"
            },
            "code": "int set_flag_and_call_function_080045fe(int *flag_ptr) {\n    uint32_t *flag = (uint32_t *)(*flag_ptr + 0xc);\n    *flag &= 0xffffffbf;\n    char *status = (char *)((int)flag_ptr + 0x39);\n    *status = 0x20;\n    call_some_function();\n    return 0;\n}",
            "called": [
                "FUN_08005604"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045fe",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "set_flag_and_call_function_080045fe"
        },
        "FUN_08005f2c": {
            "renaming": {
                "FUN_08005f2c": "execute_function_08005f2c",
                "FUN_08005da8": "initialize_variables"
            },
            "code": "void execute_function_08005f2c(void)\n{\n  initialize_variables();\n  return;\n}",
            "called": [
                "FUN_08005da8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f2c",
            "calling": [
                "FUN_08005f40",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "execute_function_08005f2c"
        },
        "FUN_080055e0": {
            "renaming": {
                "FUN_080055e0": "execute_function_based_on_value_080055e0",
                "uVar1": "value",
                "PTR_DAT_080055fc": "PTR_FUNCTION_ARRAY",
                "PTR_DAT_08005600": "PTR_ARGUMENT_ARRAY",
                "code": "func_ptr",
                "undefined4": "uint32_t"
            },
            "code": "void execute_function_based_on_value_080055e0(void)\n{\n  uint32_t value = get_value();\n  if (value < 5) {\n    void (*func_ptr)(uint32_t) = *(void (**)(uint32_t))(PTR_DAT_080055fc + value * 4);\n    uint32_t arg = *(uint32_t*)(PTR_DAT_08005600 + value * 4);\n    func_ptr(arg);\n  }\n  return;\n}",
            "called": [
                "FUN_080055bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055e0",
            "calling": [
                "FUN_08004618"
            ],
            "imported": false,
            "current_name": "execute_function_based_on_value_080055e0"
        },
        "FUN_08005f40": {
            "renaming": {
                "FUN_08005f40": "calculate_sum_of_two_numbers_08005f40",
                "param_1": "input_number",
                "iVar1": "function_result_1",
                "iVar2": "function_result_2",
                "FUN_08005f2c": "get_first_function_result",
                "FUN_08005cc0": "get_second_function_result"
            },
            "code": "int calculate_sum_of_two_numbers_08005f40(undefined4 input_number)\n{\n  int sum_of_functions;\n  int function_result_1;\n  int function_result_2;\n\n  function_result_1 = get_first_function_result();\n  function_result_2 = get_second_function_result(input_number);\n  sum_of_functions = function_result_1 + function_result_2;\n  return sum_of_functions;\n}",
            "called": [
                "FUN_08005cc0",
                "FUN_08005f2c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f40",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "calculate_sum_of_two_numbers_08005f40"
        },
        "FUN_0800213c": {
            "renaming": {
                "FUN_0800213c": "check_params_0800213c",
                "param_1": "params",
                "iVar1": "result",
                "uVar2": "uVar1",
                "uVar3": "uVar2",
                "DAT_08002244": "DAT_08002244",
                "DAT_08002248": "DAT_08002248"
            },
            "code": "int check_params_0800213c(int *params)\n{\n    int result = 0;\n    int flags = params[10];\n    if (params == NULL) {\n        return 1;\n    }\n    if (params[10] == 0) {\n        params[11] = 0;\n        *(char *)(params + 9) = 0;\n        some_function();\n    }\n    result = check_params_0800213c_helper(params);\n    if ((flags & 0x10) == 0 && result == 0) {\n        params[10] = (flags & 0xffffeefd) | 2;\n        uint32_t uVar1 = params[1] | params[7] | (params[3] << 1);\n        uint32_t uVar2 = 0;\n        if (params[2] == 0x100 || params[2] == 1) {\n            uVar2 = (params[4] - 1) * 0x100000;\n        }\n        uint32_t uVar3 = 0;\n        if (params[2] == 0x100) {\n            uVar3 = 0x100;\n        } else if (params[2] == 1) {\n            uVar3 = 0x100;\n        }\n        if (params[5] == 1) {\n            if (params[3] == 0) {\n                uVar3 |= (params[6] - 1) * 0x2000 | 0x800;\n            } else {\n                params[10] |= 0x20;\n                params[11] |= 1;\n            }\n        }\n        *(uint32_t *)(*params + 4) = uVar3 | (*(uint32_t *)(*params + 4) & 0xffff16ff);\n        *(uint32_t *)(*params + 8) = (DAT_08002244 & *(uint32_t *)(*params + 8)) | uVar1;\n        *(uint32_t *)(*params + 0x2c) = uVar2 | (*(uint32_t *)(*params + 0x2c) & 0xff0fffff);\n        if (uVar1 != (DAT_08002248 & *(uint32_t *)(*params + 8))) {\n            params[10] = (flags & 0xffffffed) | 0x10;\n            params[11] |= 1;\n            return 1;\n        }\n        params[11] = 0;\n        params[10] = (flags & 0xfffffffc) | 1;\n        return 0;\n    }\n    params[10] |= 0x10;\n    return 1;\n}",
            "called": [
                "FUN_08004974",
                "FUN_080020f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800213c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "check_params_0800213c"
        },
        "FUN_0800455a": {
            "renaming": {
                "FUN_0800455a": "check_and_set_values_0800455a",
                "param_1": "input_array",
                "param_2": "array_size",
                "param_3": "value",
                "*(char *)((int)param_1 + 0x39)": "input_array[57]",
                "*(char *)(param_1 + 0xe)": "input_array[14]",
                "param_1[8]": "input_array[8]",
                "*(short *)(param_1 + 9)": "input_array[9]",
                "*(short *)((int)param_1 + 0x26)": "input_array[11]",
                "param_1[0xf]": "input_array[15]",
                "*(undefined *)((int)param_1 + 0x39)": "input_array[57]",
                "*(undefined *)(param_1 + 0xe)": "input_array[14]",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*input_array + 0xc)"
            },
            "code": "int check_and_set_values_0800455a(int *input_array, int array_size, int value){\n\tif (input_array[9] != ' '){\n\t\treturn 2;\n\t}\n\tif (array_size == 0){\n\t\treturn 1;\n\t}\n\tif (value == 0){\n\t\treturn 1;\n\t}\n\tif (input_array[14] != '\\x01'){\n\t\tinput_array[8] = array_size;\n\t\tinput_array[9] = (short)value;\n\t\tinput_array[11] = (short)value;\n\t\tinput_array[15] = 0;\n\t\tinput_array[57] = 0x21;\n\t\tinput_array[14] = 0;\n\t\t*(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n\t\treturn 0;\n\t}\n\treturn 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800455a",
            "calling": [
                "FUN_08005604",
                "FUN_08005568"
            ],
            "imported": false,
            "current_name": "check_and_set_values_0800455a"
        },
        "FUN_08001a66": {
            "renaming": {
                "FUN_08001a66": "update_params_if_needed_08001a66",
                "param_1": "param_ptr",
                "param_2": "new_param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "result",
                "PTR_08000190": "FUNC_08000190"
            },
            "code": "void update_params_if_needed_08001a66(int param_1, int new_param_2, undefined4 param_3, undefined4 param_4) {\n  if (*(char *)(param_1 + 0x70) != '\\0' && *(int *)(param_1 + 0x30) != new_param_2) {\n    *(undefined8 *)(param_1 + 0x18) = PTR_08000190(0, 0, *(undefined4 *)(param_1 + 0x18), *(undefined4 *)(param_1 + 0x1c), param_4);\n    *(undefined8 *)(param_1 + 0x20) = PTR_08000190(0, 0, *(undefined4 *)(param_1 + 0x20), *(undefined4 *)(param_1 + 0x24));\n    *(undefined8 *)(param_1 + 0x28) = PTR_08000190(0, 0, *(undefined4 *)(param_1 + 0x28), *(undefined4 *)(param_1 + 0x2c));\n  }\n  *(int *)(param_1 + 0x30) = new_param_2;\n  return;\n}",
            "called": [
                "FUN_08000190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a66",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "update_params_if_needed_08001a66"
        },
        "FUN_08003c44": {
            "renaming": {
                "FUN_08003c44": "get_value_from_pointer_08003c44",
                "undefined4": "int",
                "*PTR_DAT_08003c4c": "pointer_to_data",
                "*(undefined4 *)PTR_DAT_08003c4c": "*pointer_to_data",
                "PTR_DAT_08003c4c": "PTR_DAT_08003c4c",
                "value": "value"
            },
            "code": "int get_value_from_pointer_08003c44() {\n    int* *PTR_DAT_08003c4c = (int*) PTR_DAT_08003c4c;\n    int value = *(undefined4 *)PTR_DAT_08003c4c;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c44",
            "calling": [
                "FUN_08003c70",
                "FUN_08001b48",
                "FUN_08003c50"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08003c44"
        },
        "FUN_080028d2": {
            "renaming": {
                "FUN_080028d2": "set_value_at_offset_16_080028d2",
                "param_1": "pointer",
                "*param_1": "value",
                "PTR_": "pointer",
                "DAT_": "value"
            },
            "code": "int set_value_at_offset_16_080028d2(int *PTR_)\n{\n    int DAT_ = PTR_[17] & 0xff;\n    *(unsigned int *)(PTR_ + 4) = DAT_;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_16_080028d2"
        },
        "FUN_08000a18": {
            "renaming": {
                "FUN_08000a18": "is_end_of_string_08000a18",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_08000a18(void)\n{\n  char current_char;\n  FUN_080009a8();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_080009a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a18",
            "calling": [
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08000cd0",
                "FUN_080016b4",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08000a18"
        },
        "FUN_08005384": {
            "renaming": {
                "FUN_08005384": "process_data_08005384",
                "PTR_DAT_080053c4": "input_data",
                "PTR_DAT_080053c8": "data_table",
                "PTR_DAT_080053cc": "data_index_table",
                "PTR_DAT_080053d0": "output_data",
                "cVar1": "input_char",
                "puVar2": "data_ptr",
                "uVar3": "data_byte",
                "iVar4": "result",
                "uVar5": "data_address",
                "FUN_08004c78": "find_data_index",
                "FUN_08004ca2": "read_data_byte",
                "FUNC_08004f4c": "write_output_data"
            },
            "code": "void process_data_08005384(void)\n{\n  char input_char;\n  undefined *data_ptr;\n  undefined data_byte;\n  int result;\n  undefined4 data_address;\n  input_char = PTR_DAT_080053c4[1];\n  result = find_data_index((int)input_char,PTR_DAT_080053c4);\n  if (result != 0) {\n    data_address = find_data_address((int)input_char,PTR_DAT_080053c4);\n    data_byte = read_data_byte(data_address,PTR_DAT_080053c8);\n    data_ptr = PTR_DAT_080053d0;\n    PTR_DAT_080053d0[0x59] = data_byte;\n    data_ptr[0x58] = input_char;\n    *(undefined4 *)(data_ptr + 0x48) = 0x2580;\n    *(undefined4 *)(data_ptr + 0x54) = 0;\n    *(undefined4 *)(data_ptr + 0x4c) = 0;\n    *(undefined4 *)(data_ptr + 0x50) = 0;\n    write_PTR_DAT_080053d0(data_ptr);\n  }\n  return;\n}",
            "called": [
                "FUN_08004f4c",
                "FUN_08004ca2",
                "FUN_08004c78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005384",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": false,
            "current_name": "process_data_08005384"
        },
        "FUN_08005b3c": {
            "renaming": {
                "FUN_08005b3c": "get_color_from_palette_08005b3c",
                "param_1": "pixel_index",
                "param_2": "palette",
                "uVar1": "color"
            },
            "code": "void get_color_from_palette_08005b3c(int pixel_index, uint8_t palette[]) {\n  uint8_t color;\n  if (pixel_index < 0x3c) {\n    color = palette[pixel_index];\n  }\n  else {\n    color = 0xff;\n  }\n  *(uint8_t *)(pixel_index + 300) = color;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b3c",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "get_color_from_palette_08005b3c"
        },
        "FUN_080046b8": {
            "renaming": {
                "FUN_080046b8": "analyze_data_080046b8",
                "param_1": "data",
                "iVar1": "result",
                "uVar2": "fourth_word",
                "puVar3": "data_ptr",
                "uVar4": "bit_value",
                "uVar5": "first_word",
                "FUN_08004618": "call_function_1",
                "FUN_08004198": "call_function_2",
                "FUN_080045fe": "call_function_3",
                "do_nothing_08005650": "do_nothing",
                "PTR_LAB_080047d8_1_080047d4": "some_pointer"
            },
            "code": "void analyze_data_080046b8(uint **data)\n{\n  uint *data_ptr = *data;\n  uint first_word = *data_ptr;\n  uint fourth_word = data_ptr[3];\n  if ((((first_word & 0xf) == 0) && ((first_word & 0x20) != 0)) && ((fourth_word & 0x20) != 0))) {\n    call_function_1(data);\n    return;\n  }\n  if (((first_word & 0xf) == 0) || ((data_ptr[5] & 1) == 0 && ((fourth_word & 0x120) == 0)))) {\n    if (((first_word & 0x80) != 0) && ((fourth_word & 0x80) != 0))) {\n      call_function_2(data);\n      return;\n    }\n    if (((first_word & 0x40) != 0) && ((fourth_word & 0x40) != 0))) {\n      call_function_3(data);\n    }\n  }\n  else {\n    if (((first_word & 1) != 0) && ((fourth_word & 0x100) != 0))) {\n      data[15] = (uint *)((uint)data[15] | 1);\n    }\n    if (((first_word & 4) != 0) && (data_ptr[5] & 1) != 0)) {\n      data[15] = (uint *)((uint)data[15] | 2);\n    }\n    if (((first_word & 2) != 0) && (data_ptr[5] & 1) != 0)) {\n      data[15] = (uint *)((uint)data[15] | 4);\n    }\n    if (((first_word & 8) != 0) && (data_ptr[5] & 1) != 0)) {\n      data[15] = (uint *)((uint)data[15] | 8);\n    }\n    if (data[15] != (uint *)0x0) {\n      if (((first_word & 0x20) != 0) && ((fourth_word & 0x20) != 0))) {\n        call_function_1(data);\n      }\n      if ((((uint)data[15] & 8) == 0) && (((*data)[5] & 0x40) == 0)) {\n        do_nothing(data);\n        data[15] = (uint *)0x0;\n        return;\n      }\n      call_function_4(data);\n      data_ptr = *data;\n      if ((data_ptr[5] & 0x40) == 0) {\n        do_nothing(data);\n        return;\n      }\n      data_ptr[5] = data_ptr[5] & 0xffffffbf;\n      if (data[13] == (uint *)0x0) {\n        do_nothing(data);\n        return;\n      }\n      data[13][13] = (uint)PTR_LAB_080047d8_1_080047d4;\n      int result = some_function(data[13]);\n      if (result != 0) {\n        (*(code *)data[13][13])();\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08004198",
                "FUN_0800417c",
                "FUN_08004618",
                "FUN_080045fe",
                "FUN_08005650",
                "FUN_0800258c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b8",
            "calling": [],
            "imported": false,
            "current_name": "analyze_data_080046b8"
        },
        "FUN_08004c8a": {
            "renaming": {
                "FUN_08004c8a": "find_param_value_08004c8a",
                "param_1": "search_param",
                "param_2": "param_array"
            },
            "code": "int find_param_value_08004c8a(int search_param, char *param_array)\n{\n  while( true ) {\n    if (*(int *)(param_array + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(param_array + 4) == search_param) break;\n    param_array = param_array + 0xc;\n  }\n  return (int)*param_array;\n}",
            "called": [
                "FUN_08004c8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c8a",
            "calling": [
                "FUN_08004c8a",
                "FUN_08004ca2"
            ],
            "imported": false,
            "current_name": "find_param_value_08004c8a"
        },
        "FUN_08001cd0": {
            "renaming": {
                "FUN_08001cc4": "get_current_time",
                "PTR_DAT_08001e2c": "time_limit_ptr",
                "FUN_08003da4": "get_factor",
                "parameters": "parameter_array",
                "parameter_count": "parameter_count",
                "result": "return_value",
                "limit": "iteration_limit",
                "i": "index",
                "initial_time": "start_time",
                "FUN_08001cd0": "check_parameters_and_calculate_08001cd0"
            },
            "code": "uint32_t check_parameters_and_calculate_08001cd0(uint32_t **parameter_array, uint32_t parameter_count)\n{\n    uint32_t initial_time = get_current_time();\n    uint32_t *parameters = *parameter_array;\n    uint32_t result = 0;\n    uint32_t limit = *(uint32_t *)PTR_DAT_08001e2c / FUN_08003da4(2) * 0x14;\n\n    if ((parameters[2] & 0x100) == 0)\n    {\n        if (((parameters[1] & 0x100) == 0) && ((parameters[0xb] & 0xf00000) == 0))\n        {\n            while ((**parameter_array & 2) == 0)\n            {\n                if ((parameter_count != 0xffffffff) && ((parameter_count != 0) && (FUN_08001cc4() - initial_time > parameter_count)))\n                {\n                    parameter_array[10] = (uint32_t *)((uint32_t)parameter_array[10] | 4);\n                    *(undefined *)(parameter_array + 9) = 0;\n                    return 3;\n                }\n            }\n            parameter_array[10] = (uint32_t *)((uint32_t)parameter_array[10] | 4);\n            *(undefined *)(parameter_array + 9) = 0;\n            result = 3;\n        }\n        else\n        {\n            if (((parameters[4] & DAT_08001e30) == 0) && ((parameters[3] & DAT_08001e30 + 0xdc000000) == 0))\n            {\n                if ((parameters[4] & DAT_08001e34) == 0)\n                {\n                    if ((parameters[3] & DAT_08001e38) == 0)\n                    {\n                        limit = 0x14;\n                    }\n                    else\n                    {\n                        limit = 0x29;\n                    }\n                }\n                else\n                {\n                    limit = 0x29;\n                }\n            }\n            else if (((parameters[4] & DAT_08001e34) == 0) && ((parameters[3] & DAT_08001e34 + 0xee000000) == 0))\n            {\n                limit = 0x54;\n            }\n            else if ((DAT_08001e3c & parameters[4]) == 0)\n            {\n                if ((DAT_08001e3c & parameters[3]) == 0)\n                {\n                    limit = 0x54;\n                }\n                else\n                {\n                    limit = 0xfc;\n                }\n            }\n            else\n            {\n                limit = 0xfc;\n            }\n\n            for (uint32_t i = 0; i <= limit; i++)\n            {\n                if ((parameter_count != 0xffffffff) && ((parameter_count != 0) && (FUN_08001cc4() - initial_time > parameter_count)))\n                {\n                    parameter_array[10] = (uint32_t *)((uint32_t)parameter_array[10] | 4);\n                    *(undefined *)(parameter_array + 9) = 0;\n                    return 3;\n                }\n            }\n            **parameter_array = 0xffffffed;\n            parameter_array[10] = (uint32_t *)((uint32_t)parameter_array[10] | 0x200);\n            if (((*parameter_array)[2] & 0xe0000) == 0xe0000)\n            {\n                if (parameter_array[3] == (uint32_t *)0x0)\n                {\n                    parameter_array[10] = (uint32_t *)((uint32_t)parameter_array[10] & 0xfffffeff);\n                    if (((uint32_t)parameter_array[10] & 0x1000) == 0)\n                    {\n                        parameter_array[10] = (uint32_t *)((uint32_t)parameter_array[10] | 1);\n                        result = 0;\n                    }\n                }\n            }\n        }\n    }\n    else\n    {\n        parameter_array[10] = (uint32_t *)((uint32_t)parameter_array[10] | 0x20);\n        *(undefined *)(parameter_array + 9) = 0;\n        result = 1;\n    }\n    return result;\n}",
            "called": [
                "FUN_08003da4",
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cd0",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "check_parameters_and_calculate_08001cd0"
        },
        "FUN_08004178": {
            "renaming": {
                "FUN_08004178": "do_nothing_08004178"
            },
            "code": "\nvoid do_nothing_08004178(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004178",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08004178"
        },
        "FUN_08004a4c": {
            "renaming": {
                "FUN_08004a4c": "create_data_08004a4c",
                "param_1": "param",
                "local_46": "result",
                "local_44": "data_size",
                "local_40": "is_valid",
                "local_3c": "extra_data",
                "local_38": "data_ptr",
                "local_34": "var_34",
                "local_30": "var_30",
                "local_2c": "var_2c",
                "local_28": "var_28",
                "local_24": "var_24",
                "local_20": "var_20",
                "local_1c": "var_1c",
                "local_10": "var_10",
                "PTR_DAT_08004b2c": "ptr_data_08004b2c",
                "PTR_DAT_08004b30": "ptr_data_08004b30",
                "FUN_080061e0": "init_data",
                "FUN_08004c78": "validate_data",
                "FUN_0800492c": "get_data_size",
                "FUN_08001e48": "read_data",
                "FUN_08002384": "check_data",
                "FUN_08002004": "process_data",
                "FUN_08001cd0": "find_newline",
                "FUN_08001f80": "get_flags",
                "FUN_08001e40": "extract_data",
                "FUN_08002348": "check_data2",
                "FUN_0800224c": "check_data3",
                "DAT_08004b30": "data_08004b30",
                "DAT_08004b2c": "data_08004b2c"
            },
            "code": "typedef unsigned short uint16_t;\n\ntypedef struct {\n    uint16_t data[24];\n} Data;\n\nData create_data_08004a4c(uint16_t param) {\n    Data data = {0};\n    uint16_t* ptr_data = data.data;\n    *ptr_data = param;\n    return data;\n}",
            "called": [
                "FUN_08001e40",
                "FUN_08001f80",
                "FUN_08001cd0",
                "FUN_0800492c",
                "FUN_0800224c",
                "FUN_08002348",
                "FUN_0800213c",
                "FUN_08002004",
                "FUN_08002384",
                "FUN_08001e48",
                "FUN_080061e0",
                "FUN_08004c78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a4c",
            "calling": [
                "FUN_08005754"
            ],
            "imported": false,
            "current_name": "create_data_08004a4c"
        },
        "FUN_08006112": {
            "renaming": {
                "FUN_08006112": "swap_pointers_08006112",
                "param_1": "pointer1",
                "param_2": "pointer2",
                "FUN_08006158": "swap"
            },
            "code": "void swap_pointers_08006112(void* pointer1, void* pointer2) {\n  swap(pointer2, pointer1);\n  return;\n}",
            "called": [
                "FUN_08006158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006112",
            "calling": [
                "FUN_08005fc8"
            ],
            "imported": false,
            "current_name": "swap_pointers_08006112"
        },
        "FUN_08004974": {
            "renaming": {
                "FUN_08004974": "process_flags_08004974",
                "param_1": "flag",
                "param_2": "flag_value",
                "puVar1": "flag_ptr",
                "iVar2": "data",
                "uVar3": "result",
                "uVar4": "flag_1/flag_2",
                "uVar5": "current_flag",
                "local_18": "local_flag",
                "local_14": "flag_3",
                "local_10": "flag_4"
            },
            "code": "void process_flags_08004974(uint *flag, uint flag_value)\n{\n    uint *data = flag;\n    uint current_flag = *data;\n    uint flag_1 = 0x200;\n    uint flag_2 = 0x400;\n    uint flag_mask_1 = 0x200;\n    uint flag_mask_2 = 0x400;\n    uint flag_mask_3 = 0xf;\n    uint flag_shift = 0x18;\n    if (current_flag == flag_value)\n    {\n        *data |= flag_1;\n        current_flag = *(uint *)(DAT_080049ec + 0x18) & flag_mask_1;\n    }\n    else\n    {\n        if (current_flag == DAT_080049e4)\n        {\n            *data |= flag_2;\n            current_flag = *(uint *)(DAT_080049ec + 0x18) & flag_mask_2;\n        }\n    }\n    uint *flag_ptr = PTR_DAT_080049e8;\n    uint flag_value_1 = (uint)((int)(char)*flag_ptr << flag_shift) >> flag_shift;\n    uint result = FUN_08004884(flag_value_1, flag_value, current_flag, flag_mask_3);\n    uint local_flag = 1 << (flag_value_1 & flag_mask_3) & 0xffff;\n    uint flag_3 = 3;\n    uint flag_4 = 0;\n    FUN_08002624(result, &local_flag);\n    return;\n}\n",
            "called": [
                "FUN_08004884",
                "FUN_08002624"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004974",
            "calling": [
                "FUN_0800213c"
            ],
            "imported": false,
            "current_name": "process_flags_08004974"
        },
        "FUN_08003520": {
            "renaming": {
                "FUN_08003520": "check_and_set_flags_08003520",
                "param_1": "params",
                "puVar2": "ptr",
                "uVar3": "flags",
                "uVar4": "status",
                "DAT_080035f8": "STATUS_FLAG_A",
                "0x100": "STATUS_FLAG_B",
                "0x10200": "STATUS_FLAG_C",
                "0x10400": "STATUS_FLAG_D",
                "0x10800": "STATUS_FLAG_E",
                "cVar1": "c1",
                "FUN_08002d1c": "do_something",
                "0xc": "params_c",
                "FUN_0800316c": "do_something_else"
            },
            "code": "void check_and_set_flags_08003520(uint **params)\n{\n    uint *ptr = *params;\n    uint flags = ptr[5];\n    uint status = ptr[1];\n\n    if (((flags & DAT_080035f8) != 0) && ((status & STATUS_FLAG_B) != 0)) {\n        params[16] = (uint *)((uint)params[16] | 1);\n        ptr[5] = 0xfffffeff;\n        **params = **params | 0x8000;\n    }\n\n    if (((flags & STATUS_FLAG_C) != 0) && ((status & STATUS_FLAG_B) != 0)) {\n        params[16] = (uint *)((uint)params[16] | 2);\n        (*params)[5] = 0xfffffdff;\n    }\n\n    if (((flags & STATUS_FLAG_D) != 0) && ((status & STATUS_FLAG_B) != 0)) {\n        char c1 = *(char *)((int)params + 0x3d);\n        if (((*(char *)((int)params + 0x3e) == ' ') && (*(short *)((int)params + 0x2a) == 0)) && (((c1 == '!' || (c1 == ')')) || ((c1 == '(' && (params[0xc] == (uint *)0x21)))))) {\n            do_something(params);\n        }\n        else {\n            params[16] = (uint *)((uint)params[16] | 4);\n            if (*(char *)((int)params + 0x3e) == '\\x10') {\n                **params = **params | 0x200;\n            }\n            (*params)[5] = 0xfffffbff;\n        }\n    }\n\n    if (((flags & STATUS_FLAG_E) != 0) && ((status & STATUS_FLAG_B) != 0)) {\n        params[16] = (uint *)((uint)params[16] | 8);\n        (*params)[5] = 0xfffff7ff;\n    }\n\n    if (params[16] != (uint *)0x0) {\n        do_something_else(params);\n    }\n}\n",
            "called": [
                "FUN_0800316c",
                "FUN_08002d1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003520",
            "calling": [],
            "imported": false,
            "current_name": "check_and_set_flags_08003520"
        },
        "FUN_08002ca6": {
            "renaming": {
                "FUN_08002ca6": "process_input_08002ca6",
                "param_1": "input_array",
                "puVar2": "next_char_ptr",
                "cVar1": "last_char"
            },
            "code": "int process_input_08002ca6(int *input_array) {\n    char last_char = *(char *)((int)input_array + 0x3d);\n    if (*(short *)((int)input_array + 0x2a) != 0) {\n        undefined *next_char_ptr = (undefined *)input_array[9];\n        input_array[9] = (int)(next_char_ptr + 1);\n        *next_char_ptr = (char)*(undefined4 *)(*input_array + 0x10);\n        *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) + -1;\n        if ((*(short *)((int)input_array + 0x2a) == 0) && (last_char == '*')) {\n            *(uint *)(*input_array + 4) = *(uint *)(*input_array + 4) & 0xfffffbff;\n            input_array[0xc] = 0x22;\n            *(undefined *)((int)input_array + 0x3d) = 0x28;\n            do_nothing_08002ca4();\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002ca4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca6",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_08002ca6"
        },
        "FUN_08002ca4": {
            "renaming": {
                "FUN_08002ca4": "do_nothing_08002ca4"
            },
            "code": "\nvoid do_nothing_08002ca4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca4",
            "calling": [
                "FUN_08002ca6",
                "FUN_080032b4"
            ],
            "imported": false,
            "current_name": "do_nothing_08002ca4"
        },
        "FUN_08007328": {
            "renaming": {
                "FUN_08007328": "do_nothing_08007328"
            },
            "code": "\nvoid do_nothing_08007328(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007328",
            "calling": [
                "FUN_08006198",
                "FUN_0800010c"
            ],
            "imported": false,
            "current_name": "do_nothing_08007328"
        },
        "FUN_08005b54": {
            "renaming": {
                "FUN_08005b54": "process_data_08005b54",
                "param_1": "data",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "PTR_PTR_LAB_080059c8_1_08005ba0": "PTR_DATA_LABEL_1",
                "PTR_DAT_08005ba4": "PTR_DATA_1",
                "FUN_08005b24": "process_data",
                "FUN_08005b3c": "set_flag",
                "FUN_08004ca2": "get_value",
                "PTR_DAT_08005ba8": "PTR_DATA_2",
                "PTR_DAT_08005bac": "PTR_DATA_3",
                "finalize_data": "finalize_data"
            },
            "code": "undefined4* process_data_08005b54(undefined4* data, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n    undefined uVar1;\n    data[1] = 0;\n    data[2] = 1000;\n    *data = PTR_PTR_LAB_080059c8_1_08005ba0;\n    if (data == (undefined4*) PTR_DAT_08005ba4) {\n        process_data_08005b54(data, 0, arg3, PTR_DAT_08005ba4, arg4);\n        set_flag(data, 1);\n    }\n    else {\n        uVar1 = get_value(arg2, PTR_DAT_08005ba8);\n        *(undefined*)((int)data + 0x12d) = uVar1;\n        uVar1 = get_value(arg2, PTR_DAT_08005bac);\n        *(undefined*)(data + 0x4b) = uVar1;\n    }\n    finalize_data(data);\n    return data;\n}\n",
            "called": [
                "FUN_08005b3c",
                "FUN_08005a44",
                "FUN_08005b24",
                "FUN_08004ca2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b54",
            "calling": [
                "FUN_08005bb0"
            ],
            "imported": false,
            "current_name": "process_data_08005b54"
        },
        "FUN_08004618": {
            "renaming": {
                "FUN_08004618": "process_data_08004618",
                "param_1": "data",
                "pbVar1": "byte_ptr",
                "sVar2": "count",
                "puVar3": "void_ptr",
                "output_ptr": "output_location",
                "type": "data_type",
                "size": "data_size",
                "count": "loop_count",
                "*string": "string",
                "*pbVar1": "byte_value",
                "*puVar3": "void_value"
            },
            "code": "int process_data_08004618(int *data)\n{\n    char *string = (char *)(data + 0x3a);\n    if (*string != '\"') {\n        return 2;\n    }\n    int type = data[2];\n    int size = *(int *)(*data + 4);\n    int *output_ptr = (int *)(data + 10);\n    if (data[4] == 0) {\n        *output_ptr = size;\n        output_ptr++;\n    }\n    else {\n        *output_ptr = size & 0xff;\n        output_ptr++;\n    }\n    short count = *(short *)(data + 0x2e) - 1;\n    *(short *)(data + 0x2e) = count;\n    if (count != 0) {\n        return 0;\n    }\n    *(unsigned int *)(*data + 0xc) &= 0xffffffdf;\n    *(unsigned int *)(*data + 0xc) &= 0xfffffeff;\n    *(unsigned int *)(*data + 0x14) &= 0xfffffffe;\n    *string = 0x20;\n    execute_function();\n    return 0;\n}",
            "called": [
                "FUN_080055e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004618",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "process_data_08004618"
        },
        "FUN_08006c40": {
            "renaming": {
                "FUN_08006c40": "initialize_params_08006c40",
                "param_1": "params",
                "param_2": "input1",
                "param_3": "input2",
                "uVar1": "unused_var",
                "DAT_08006c78": "DAT_constant",
                "PTR_FUN_08006f5a_1_08006c7c": "PTR_FUN_1",
                "PTR_FUN_08006f92_1_08006c80": "PTR_FUN_2",
                "PTR_LAB_08006fb6_1_08006c84": "PTR_LAB"
            },
            "code": "void initialize_params_08006c40(undefined4 *params, undefined2 input1, undefined2 input2) {\n    params[0] = 0;\n    params[1] = 0;\n    params[2] = 0;\n    *(undefined2 *)(params + 3) = input1;\n    params[0x19] = 0;\n    *(undefined2 *)((int)params + 0xe) = input2;\n    params[4] = 0;\n    params[5] = 0;\n    params[6] = 0;\n    FUN_080061e0(params + 0x17, 0, 8);\n    params[8] = params;\n    params[9] = DAT_08006c78;\n    params[10] = PTR_FUN_08006f5a_1_08006c7c;\n    params[0xb] = PTR_FUN_08006f92_1_08006c80;\n    params[0xc] = PTR_LAB_08006fb6_1_08006c84_08006fb6_1_08006c84;\n}",
            "called": [
                "FUN_080061e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c40",
            "calling": [
                "FUN_08006cb4"
            ],
            "imported": false,
            "current_name": "initialize_params_08006c40"
        },
        "FUN_0800157c": {
            "renaming": {
                "FUN_0800157c": "write_data_to_buffer_0800157c",
                "param_1": "buffer",
                "param_2": "data",
                "param_3": "c1",
                "param_4": "c2",
                "FUN_080057b4": "write_data_to_port",
                "FUN_08005848": "set_flag"
            },
            "code": "char* write_data_to_buffer_0800157c(char* buffer, int data, char c1, char c2) {\n  *buffer = (char)data;\n  buffer[1] = c1;\n  buffer[2] = c2;\n  write_data_to_port(data, 0);\n  write_data_to_port(buffer[1], 1);\n  write_data_to_port(buffer[2], 1);\n  set_flag(buffer[1], 1);\n  set_flag(buffer[2], 0);\n  return buffer;\n}",
            "called": [
                "FUN_080057b4",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "write_data_to_buffer_0800157c"
        },
        "FUN_080045a2": {
            "renaming": {
                "FUN_080045a2": "validate_input_080045a2",
                "param_1": "input_array",
                "param_2": "array_size",
                "param_3": "param_3",
                "*(char *)((int)param_1 + 0x3a)": "input_array[0x3a]",
                "*(char *)(param_1 + 0xe)": "input_array[0xe]",
                "param_1[10]": "input_array[10]",
                "*(short *)(param_1 + 0xb)": "input_array[0xb]",
                "*(short *)((int)param_1 + 0x2e)": "input_array[0x2e]",
                "param_1[0xf]": "input_array[0xf]",
                "*(undefined *)((int)param_1 + 0x3a)": "input_array[0x3a]",
                "*(undefined *)(param_1 + 0xe)": "input_array[0xe]",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*input_array + 0xc)",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(*input_array + 0x14)"
            },
            "code": "int validate_input_080045a2(int *input_array, int array_size, int param_3)\n{\n    if (input_array[0x3a] != ' ')\n    {\n        return 2;\n    }\n    if (array_size == 0)\n    {\n        return 1;\n    }\n    if (param_3 == 0)\n    {\n        return 1;\n    }\n    if (input_array[0xe] != 1)\n    {\n        input_array[10] = array_size;\n        input_array[0xb] = (short)param_3;\n        input_array[0x2e] = (short)param_3;\n        input_array[0xf] = 0;\n        input_array[0x3a] = '\"';\n        input_array[0xe] = 0;\n        *(uint *)(*input_array + 0xc) |= 0x100;\n        *(uint *)(*input_array + 0x14) |= 1;\n        *(uint *)(*input_array + 0xc) |= 0x20;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045a2",
            "calling": [
                "FUN_080054d4",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "validate_input_080045a2"
        },
        "FUN_08001c32": {
            "renaming": {
                "FUN_08001c32": "call_function_and_return_08001c32",
                "FUN_08004c52": "call_another_function"
            },
            "code": "void call_function_and_return_08001c32(void)\n{\n  call_another_function();\n  return;\n}",
            "called": [
                "FUN_08004c52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c32",
            "calling": [
                "FUN_08005f5e"
            ],
            "imported": false,
            "current_name": "call_function_and_return_08001c32"
        },
        "FUN_080047e8": {
            "renaming": {
                "FUN_080047e8": "combine_bytes_080047e8",
                "param_1": "address",
                "*PTR_": "byte",
                "DAT_": "0x"
            },
            "code": "*PTR_ combine_*combine_bytes_080047e8(int address) {\n  *PTR_ first_*PTR_ = *(*PTR_ *)(address + DAT_3a);\n  *PTR_ second_*PTR_ = *(*PTR_ *)(address + DAT_39);\n  return first_*PTR_ | second_*PTR_;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047e8",
            "calling": [
                "FUN_0800548c",
                "FUN_080054b0"
            ],
            "imported": false,
            "current_name": "combine_bytes_080047e8"
        },
        "FUN_080057b4": {
            "renaming": {
                "FUN_080057b4": "process_data_080057b4",
                "param_1": "data_index",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "data",
                "iVar1": "result",
                "puVar2": "data_ptr",
                "iVar3": "index_value"
            },
            "code": "void process_data_080057b4(uint data_index, undefined4 param_2, undefined4 param_3, undefined *data)\n{\n  int index_value;\n  undefined *data_ptr;\n  int result;\n  if (data_index < 0x3c) {\n    index_value = (int)(char)PTR_DAT_08005838[data_index];\n    data_ptr = PTR_DAT_08005838;\n  }\n  else {\n    index_value = -1;\n    data_ptr = data;\n  }\n  if (index_value != -1) {\n    result = FUN_080047f4(index_value, PTR_DAT_0800583c, param_3, data_ptr, data);\n    if (result != 0) {\n      result = FUN_08004ce2(index_value, PTR_DAT_08005840);\n      if (result != 0) {\n        FUN_08004b3c(index_value);\n      }\n      FUN_08004828(index_value, PTR_DAT_0800583c);\n    }\n    switch(param_2) {\n    case 0:\n      FUN_08004bb0(index_value, 0);\n      break;\n    case 1:\n      FUN_08004bb0(index_value, 1, 0);\n      break;\n    case 2:\n      FUN_08004bb0(index_value, 0, 1);\n      break;\n    case 3:\n      FUN_08004bb0(index_value, 0, 2);\n    }\n    FUN_0800480a(index_value, PTR_DAT_08005844);\n  }\n  return;\n}",
            "called": [
                "FUN_08004b3c",
                "FUN_080047f4",
                "FUN_08004bb0",
                "FUN_08004828",
                "FUN_0800480a",
                "FUN_08004ce2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057b4",
            "calling": [
                "FUN_0800157c",
                "FUN_08000bcc",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "process_data_080057b4"
        },
        "FUN_08007334": {
            "renaming": {
                "FUN_08007334": "do_nothing_08007334"
            },
            "code": "\nvoid do_nothing_08007334(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007334",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08007334"
        },
        "FUN_08001b18": {
            "renaming": {
                "FUN_08001b18": "execute_function_08001b18",
                "param_1": "input_param",
                "FUN_08001ab0": "initialize"
            },
            "code": "undefined4 execute_function_08001b18(undefined4 input_param)\n{\n  initialize();\n  return input_param;\n}",
            "called": [
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b18",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "execute_function_08001b18"
        },
        "thunk_FUN_08005750": {
            "renaming": {
                "thunk_FUN_08005750": "return_one_thunk_08005750",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int return_one_thunk_08005750() {\n    int result = 1;\n    return result;\n}",
            "called": [
                "FUN_08005750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f34",
            "calling": [
                "FUN_08006f00"
            ],
            "imported": false,
            "current_name": "return_one_thunk_08005750"
        },
        "FUN_0800092c": {
            "renaming": {
                "FUN_0800092c": "check_collision_0800092c",
                "param_1": "x1",
                "param_2": "y1",
                "param_3": "x2",
                "param_4": "y2",
                "bVar2": "collides",
                "bVar3": "y_overlap",
                "uVar1": "x_diff"
            },
            "code": "uint check_collision_0800092c(uint x1,uint y1,uint x2,uint y2)\n{\n  bool x_overlap = (x1 == x2);\n  bool y_overlap = (y1 == y2);\n  bool collides = (x_overlap && y_overlap);\n  if (!collides) {\n    uint x_diff = (x1 > x2) ? (x1 - x2) : (x2 - x1);\n    uint y_diff = (y1 > y2) ? (y1 - y2) : (y2 - y1);\n    collides = (x_diff <= 1 && y_diff <= 1);\n  }\n  return collides;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800092c",
            "calling": [
                "FUN_080009b8"
            ],
            "imported": false,
            "current_name": "check_collision_0800092c"
        },
        "FUN_08005d8a": {
            "renaming": {
                "FUN_08005d8a": "process_data_08005d8a",
                "param_1": "data",
                "param_2": "length",
                "param_3": "flag",
                "param_4": "param",
                "FUN_08005ce8": "process_data_helper"
            },
            "code": "void process_data_08005d8a(uint32_t *data, uint32_t length, uint32_t flag, uint32_t param)\n{\n    if (flag != 0) {\n        process_data_08005d8a_helper(data, length, flag & 0xff);\n        return;\n    }\n    (**(code **)*data)(data, length & 0xff, 0, *(code **)*data, param);\n    return;\n}",
            "called": [
                "FUN_08005ce8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d8a",
            "calling": [
                "FUN_08005da0",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "process_data_08005d8a"
        },
        "FUN_08002560": {
            "renaming": {
                "FUN_08002560": "set_flag_08002560",
                "param_1": "flag_value",
                "DAT_0800257c": "flag_ptr"
            },
            "code": "void set_flag_08002560(int flag_value) {\n  if (flag_value != 4) {\n    *DAT_0800257c = *DAT_0800257c & 0xfffffffb;\n    return;\n  }\n  *DAT_0800257c = *DAT_0800257c | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002560",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "set_flag_08002560"
        },
        "FUN_08006e90": {
            "renaming": {
                "FUN_08006e90": "find_char_in_string_08006e90",
                "param_1": "str",
                "param_2": "ch",
                "param_3": "len",
                "pcVar1": "current_char",
                "pcVar2": "current_char"
            },
            "code": "char* find_char_in_string_08006e90(char* str, char ch, int len) {\n  char* current_char = str;\n  while (current_char != str + len) {\n    if (*current_char == ch) {\n      return current_char;\n    }\n    current_char++;\n  }\n  return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e90",
            "calling": [
                "FUN_080066b0",
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "find_char_in_string_08006e90"
        },
        "FUN_0800417a": {
            "renaming": {
                "FUN_0800417a": "do_nothing_0800417a"
            },
            "code": "\nvoid do_nothing_0800417a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417a",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_0800417a"
        },
        "FUN_08006920": {
            "renaming": {
                "FUN_08006920": "findValueAndUpdate_08006920",
                "param_1": "outputValue",
                "param_2": "inputValue",
                "puVar1": "ptrValue",
                "iVar2": "result"
            },
            "code": "void findValueAndUpdate_08006920(int *outputValue, undefined4 inputValue)\n{\n  undefined *ptrValue = PTR_DAT_0800693c;\n  *(undefined4 *)PTR_DAT_0800693c = 0;\n  int result = calculateValue(inputValue);\n  if ((result == -1) && (*(int *)ptrValue != 0)) {\n    *outputValue = *(int *)ptrValue;\n  }\n  return;\n}",
            "called": [
                "FUN_080056d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006920",
            "calling": [
                "FUN_08006288"
            ],
            "imported": false,
            "current_name": "findValueAndUpdate_08006920"
        },
        "FUN_080008ba": {
            "renaming": {
                "FUN_080008ba": "extract_bits_080008ba",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "in_r12": "register_r12",
                "unaff_r4": "unaffected_r4",
                "uVar1": "temp_var_1",
                "uVar2": "temp_var_2",
                "uVar3": "temp_var_3",
                "bVar4": "bool_var",
                "is_zero": "is_zero",
                "msb_mask": "msb_mask",
                "shift_amount": "shift_amount"
            },
            "code": "ulonglong extract_bits_080008ba(uint in_r12, uint unaff_r4, uint param_1, uint param_2)\n{\n  uint msb_mask = 0x80000000;\n  uint shift_amount = 0x14;\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  bool is_zero;\n  \n  uVar2 = in_r12 & (param_4 >> shift_amount);\n  uVar3 = param_2;\n  if (unaff_r4 != in_r12 || uVar2 != in_r12) {\n    if (unaff_r4 == in_r12) {\n      is_zero = ((param_1 | (param_2 << shift_amount)) == 0);\n      if (is_zero && uVar2 != in_r12) {\n        return (ulonglong)((param_2 ^ param_4) & msb_mask | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (uVar2 == in_r12) {\n      is_zero = ((param_3 | (param_4 << shift_amount)) == 0);\n      if (is_zero) {\n        return (ulonglong)((param_2 ^ param_4) & msb_mask) << 0x20;\n      }\n    }\n    else {\n      is_zero = ((param_1 | (param_2 << 1)) == 0);\n      if (!is_zero) {\n        is_zero = ((param_3 | (param_4 << 1)) == 0);\n      }\n      if (!is_zero) {\n        if (unaff_r4 == 0) {\n          uVar3 = param_2 & msb_mask;\n          do {\n            uVar1 = param_1 & msb_mask;\n            param_1 = param_1 << 1;\n            param_2 = param_2 * 2 + (uint)(uVar1 != 0);\n          } while ((param_2 & 0x100000) == 0);\n          param_2 = param_2 | uVar3;\n          if (uVar2 != 0) {\n            return CONCAT44(param_2,param_1);\n          }\n        }\n        do {\n          uVar3 = param_3 & msb_mask;\n          param_3 = param_3 << 1;\n          param_4 = param_4 * 2 + (uint)(uVar3 != 0);\n        } while ((param_4 & 0x100000) == 0);\n        return CONCAT44(param_2,param_1);\n      }\n      if ((param_1 | (param_2 << 1)) != 0) {\n        return (ulonglong)((param_2 ^ param_4) & msb_mask | 0x7ff00000) << 0x20;\n      }\n      if ((param_3 | (param_4 << 1)) != 0) {\n        return (ulonglong)((param_2 ^ param_4) & msb_mask) << 0x20;\n      }\n    }\n  }\n  return CONCAT44(uVar3,param_1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008ba",
            "calling": [
                "FUN_0800074c"
            ],
            "imported": false,
            "current_name": "extract_bits_080008ba"
        },
        "FUN_08002d1c": {
            "renaming": {
                "FUN_08002d1c": "process_input_08002d1c",
                "param_1": "input_data",
                "param_1[0xb]": "param_b",
                "*(char *)((int)param_1 + 0x3d)": "char_3d",
                "param_1[0xc]": "input_data[0xc]"
            },
            "code": "int process_input_08002d1c(uint **input_data)\n{\n    uint *param_b = input_data[0xb];\n    char *char_3d = (char *)input_data + 0x3d;\n    \n    if ((param_b == (uint *)0x4 || param_b == (uint *)0x8) && (*char_3d == '(')) {\n        param_b = PTR_DAT_08002dac;\n        (*input_data)[1] &= 0xfffff8ff;\n        (*input_data)[5] = 0xfffffbff;\n        **input_data &= 0xfffffbff;\n        input_data[0xc] = (uint *)0x0;\n        *char_3d = 0x20;\n        *(char *)((int)input_data + 0x3e) = 0;\n        FUN_08004ec4();\n    }\n    else if (*char_3d == '!') {\n        param_b = PTR_DAT_08002dac;\n        input_data[0xc] = (uint *)0x21;\n        *char_3d = 0x20;\n        *(char *)((int)input_data + 0x3e) = 0;\n        (*input_data)[1] &= 0xfffff8ff;\n        (*input_data)[5] = 0xfffffbff;\n        **input_data &= 0xfffffbff;\n        do_nothing_08002c52();\n    }\n    else {\n        (*input_data)[5] = 0xfffffbff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002c52",
                "FUN_08004ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d1c",
            "calling": [
                "FUN_08003520"
            ],
            "imported": false,
            "current_name": "process_input_08002d1c"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "return_max_integer_08005714"
            },
            "code": "int32_t return_max_integer_08005714() {\n  return INT32_MAX;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [],
            "imported": false,
            "current_name": "return_max_integer_08005714"
        },
        "FUN_08003da4": {
            "renaming": {
                "FUN_08003da4": "calculate_08003da4",
                "param_1": "input",
                "uVar1": "result",
                "local_24": "local_variable_1",
                "abStack_20": "array_variable",
                "uStack_1c": "variable_1",
                "uStack_18": "variable_2",
                "uStack_14": "variable_3"
            },
            "code": "uint calculate_08003da4(uint input)\n{\n  uint result;\n  undefined2 local_variable_1;\n  byte array_variable[4];\n  undefined4 variable_1;\n  undefined4 variable_2;\n  undefined4 variable_3;\n  variable_3 = *(undefined4 *)(PTR_DAT_08003e8c + 8);\n  variable_2 = *(undefined4 *)(PTR_DAT_08003e8c + 4);\n  variable_1 = *(undefined4 *)PTR_DAT_08003e8c;\n  local_variable_1 = *(undefined2 *)(PTR_DAT_08003e8c + 0x10);\n  if (input == 2) {\n    result = FUN_08003c70();\n    result = result / ((((DAT_08003e90[1] << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input == 0x10) {\n    if ((*DAT_08003e90 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      result = DAT_08003e9c;\n      if ((DAT_08003e90[1] & 0x10000) != 0) {\n        result = DAT_08003e94 / *(byte *)((int)&local_variable_1 - ((int)(DAT_08003e90[1] << 0xe) >> 0x1f));\n      }\n      result = result * array_variable[(DAT_08003e90[1] << 10) >> 0x1c];\n      if ((DAT_08003e90[1] & 0x400000) == 0) {\n        result = (uint)((ulonglong)DAT_08003e98 * (ulonglong)(result * 2) >> 0x21);\n      }\n    }\n  }\n  else if (input == 1) {\n    if ((DAT_08003e90[8] & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else {\n      result = DAT_08003e90[8] & 0x300;\n      if ((result == 0x200) && ((DAT_08003e90[9] & 2) != 0)) {\n        result = 32000;\n      }\n      else if (result == 0x300) {\n        if ((*DAT_08003e90 & 0x20000) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0xf424;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08003c70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003da4",
            "calling": [
                "FUN_08001cd0",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "calculate_08003da4"
        },
        "FUN_08005a44": {
            "renaming": {
                "FUN_08005a44": "initialize_struct_08005a44",
                "param_1": "struct_address",
                "PTR_": "",
                "DAT_": "",
                "*": "",
                "+": "plus",
                "int": "",
                "short": "",
                "struct_field1": "field1",
                "struct_field2": "field2",
                "struct_field3": "field3",
                "struct_field4": "field4",
                "struct_field5": "field5",
                "struct_field6": "field6"
            },
            "code": "void initialize_struct_08005a44(int struct_address) {\n  int* struct_field1 = (int*)(struct_address + 0x130);\n  *struct_field1 = struct_address + 0x11;\n  short* struct_field2 = (short*)(struct_address + 0x134);\n  *struct_field2 = 0;\n  short* struct_field3 = (short*)(struct_address + 0x136);\n  *struct_field3 = 0;\n  int* struct_field4 = (int*)(struct_address + 0x138);\n  *struct_field4 = struct_address + 0x51;\n  short* struct_field5 = (short*)(struct_address + 0x13c);\n  *struct_field5 = 0;\n  short* struct_field6 = (short*)(struct_address + 0x13e);\n  *struct_field6 = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a44",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "initialize_struct_08005a44"
        },
        "FUN_080009dc": {
            "renaming": {
                "FUN_080009dc": "is_end_of_string_080009dc",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_080009dc(void)\n{\n  char current_char;\n  FUN_080009b8();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009dc",
            "calling": [
                "FUN_080019f6",
                "FUN_08001814",
                "FUN_08001960",
                "FUN_08000cd0",
                "FUN_080016b4",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "is_end_of_string_080009dc"
        },
        "FUN_0800417c": {
            "renaming": {
                "FUN_0800417c": "clear_flags_0800417c",
                "param_1": "flag_ptr",
                "*param_1": "flag_ptr",
                "uint": "unsigned int",
                "int": "integer",
                "undefined": "char",
                "0xc": "0x0C",
                "0x14": "0x14",
                "0xfffffedf": "4294967263",
                "0xfffffffe": "4294967294",
                "(int)param_1 + 0x3a": "(flag_ptr + 0x3a)",
                "0x20": "' '"
            },
            "code": "void clear_flags_0800417c(int *flag_ptr) {\n    uint *flag1 = (uint *)(*flag_ptr + 0xc);\n    uint *flag2 = (uint *)(*flag_ptr + 0x14);\n    *flag1 &= 0xfffffedf;\n    *flag2 &= 0xfffffffe;\n    char *flag3 = (char *)(flag_ptr + 0x3a);\n    *flag3 = 0x20;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417c",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "clear_flags_0800417c"
        },
        "FUN_08004b94": {
            "renaming": {
                "FUN_08004b94": "call_initialization_function_08004b94",
                "FUN_08001cc4": "initialize_system"
            },
            "code": "void call_initialization_function_08004b94(void)\n{\n  initialize_system();\n  return;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b94",
            "calling": [
                "FUN_080058e0"
            ],
            "imported": false,
            "current_name": "call_initialization_function_08004b94"
        },
        "FUN_080058e0": {
            "renaming": {
                "FUN_080058e0": "call_initialization_function_080058e0",
                "FUN_08004b94": "initialize"
            },
            "code": "void call_initialization_function_080058e0(void)\n{\n  initialize();\n  return;\n}",
            "called": [
                "FUN_08004b94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e0",
            "calling": [
                "FUN_08001ab0",
                "FUN_08000cd0",
                "FUN_08000bcc",
                "FUN_080016b4"
            ],
            "imported": false,
            "current_name": "call_initialization_function_080058e0"
        },
        "FUN_08001918": {
            "renaming": {
                "FUN_08001918": "calculate_results_08001918",
                "param_1": "data",
                "param_2": "size",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "result_high",
                "uVar2": "data_ptr",
                "uVar3": "size_ptr",
                "FUN_0800042c": "allocate_memory",
                "FUN_0800040c": "get_size_pointer",
                "FUNC_0800074c": "compute_results",
                "FUNC_080004f8": "compute_results_2"
            },
            "code": "void calculate_results_08001918(int data, int size, undefined4 arg3, undefined4 arg4)\n{\n  if (size > 0) {\n    undefined8 data_ptr = FUN_0800042c(size);\n    undefined8 size_ptr = FUN_0800040c(*(undefined4 *)(data + 0x58));\n    undefined8 result_ptr = FUNC_0800074c((int)data_ptr, (int)((ulonglong)data_ptr >> 0x20), (int)size_ptr, (int)((ulonglong)size_ptr >> 0x20), arg4);\n    undefined4 result_high = (undefined4)((ulonglong)result_ptr >> 0x20);\n    undefined8 result2_ptr = FUNC_080004f8((int)result_ptr,result_high,*(undefined4 *)(data + 0x20), *(undefined4 *)(data + 0x24));\n    *(undefined8 *)(data + 0x20) = result2_ptr;\n    undefined8 result3_ptr = FUNC_0800074c(*(undefined4 *)(data + 0x28), *(undefined4 *)(data + 0x2c), (int)result_ptr, result_high);\n    *(undefined8 *)(data + 0x28) = result3_ptr;\n    *(int *)(data + 0x58) = size;\n  }\n  return;\n}",
            "called": [
                "FUN_0800040c",
                "FUN_080004f8",
                "FUN_0800042c",
                "FUN_0800074c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001918",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "calculate_results_08001918"
        },
        "FUN_0800611c": {
            "renaming": {
                "FUN_0800611c": "assertion_failed_0800611c",
                "param_1": "line",
                "param_2": "column",
                "param_3": "file",
                "param_4": "error_code",
                "uVar1": "error_code_copy",
                "puVar2": "column_copy",
                "uVar3": "uVar3",
                "uVar4": "uVar4",
                "PTR_PTR_DAT_08006148": "global_pointer",
                "PTR_s___function__0800614c": "s_assertion___s__failed__file___s__08006150",
                "PTR_s_assertion___s__failed__file___s__08006150": "s_assertion___s__failed__file___s__08006150",
                "PTR_s__08006154": "s__08006154",
                "FUN_08006174": "print_assertion_error",
                "FUN_08006ac0": "get_error_code",
                "line_copy": "line_copy",
                "file_copy": "file_copy"
            },
            "code": "void assertion_failed_0800611c(undefined4 line, undefined4 column, undefined *file, undefined4 error_code)\n{\n  undefined4 error_code_copy;\n  undefined *file_copy;\n  undefined4 line_copy;\n  undefined *column_copy;\n  error_code_copy = *(undefined4 *)(*(int *)PTR_PTR_DAT_08006148 + 0xc);\n  column_copy = PTR_s___function__0800614c;\n  if (file == (undefined *)0x0) goto LAB_08006140;\n  do {\n    print_assertion_error(error_code_copy, column_copy, error_code, line, column_copy, file, error_code);\n    line_copy = get_line_number();\n    error_code_copy = get_error_code();\nLAB_08006140:\n    file_copy = PTR_s__08006154;\n    column_copy = PTR_s__08006154;\n  } while(true);\n}",
            "called": [
                "FUN_08006174",
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800611c",
            "calling": [
                "FUN_08005a68"
            ],
            "imported": false,
            "current_name": "assertion_failed_0800611c"
        },
        "FUN_080047f4": {
            "renaming": {
                "FUN_080047f4": "get_bit_at_index_080047f4",
                "param_1": "num",
                "param_2": "index",
                "PTR_": "ptr",
                "DAT_": "shifted_num"
            },
            "code": "uint get_bit_at_index_080047f4(uint num, int index)\n{\n    uint* PTR_ = (uint*)(index + ((num << 0x18) >> 0x1c) * 4);\n    uint DAT_ = num & 0xf;\n    uint masked_num = *PTR_ >> DAT_;\n    return masked_num & 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "FUN_08005890",
                "FUN_080057b4",
                "FUN_08005848"
            ],
            "imported": false,
            "current_name": "get_bit_at_index_080047f4"
        },
        "FUN_080009f0": {
            "renaming": {
                "FUN_080009f0": "check_for_zero_080009f0",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag",
                "FUN_080009b8": "set_flags",
                "!": "not",
                "(bool)": "bool_cast",
                "||": "logical_or"
            },
            "code": "bool check_for_zero_080009f0(void)\n{\n  bool zero_flag = false;\n  bool carry_flag = false;\n  \n  set_flags();\n  zero_flag = is_zero(carry_flag) || is_zero(zero_flag);\n  return zero_flag;\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009f0",
            "calling": [
                "FUN_08000cd0",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "check_for_zero_080009f0"
        },
        "FUN_0800134e": {
            "renaming": {
                "FUN_0800134e": "set_param_and_return_one_0800134e",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "FUN_08001310": "set_param",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int set_param_and_return_one_0800134e(int param_1, int param_2, int param_3, int param_4)\n{\n  set_param(param_1, param_2, 1, param_4, param_4);\n  return 1;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800134e",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "set_param_and_return_one_0800134e"
        },
        "FUN_08002c10": {
            "renaming": {
                "FUN_08002c10": "set_bit_and_flags_08002c10",
                "param_1": "data_ptr",
                "puVar1": "data",
                "*puVar1": "*data",
                "**param_1": "**data_ptr"
            },
            "code": "int set_bit_and_flags_08002c10(uint **data_ptr)\n{\n  uint *data = *data_ptr;\n  if (*(char *)((int)data_ptr + 0x3d) != ' ')\n  {\n    return 2;\n  }\n  *(char *)((int)data_ptr + 0x3d) = '(';\n  if ((data[0] & 1) == 0)\n  {\n    data[0] |= 1;\n  }\n  *data |= 0x400;\n  data[1] |= 0x300;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c10",
            "calling": [
                "FUN_08004ef4",
                "FUN_08004ec4"
            ],
            "imported": false,
            "current_name": "set_bit_and_flags_08002c10"
        },
        "FUN_08006be0": {
            "renaming": {
                "FUN_08006be0": "process_data_08006be0",
                "param_1": "data",
                "param_2": "params",
                "uVar1": "result",
                "iVar2": "param1_value",
                "piVar3": "param_ptr2",
                "uVar4": "data_value",
                "uVar5": "param3_value",
                "iVar6": "param3_value_extended",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "pcVar7": "function_ptr",
                "iVar8": "param2_value",
                "uVar9": "initial_data_value",
                "UNRECOVERED_JUMPTABLE_00": "jump_table1",
                "bVar10": "flag",
                "bytes_processed": "bytes_processed",
                "status_flag": "status_flag",
                "initial_data_value": "initial_data_value",
                "initial_status_flag": "initial_status_flag",
                "temp_value": "temp_value",
                "flag2": "flag2",
                "function_ptr2": "function_ptr2",
                "param_ptr2": "param_ptr2",
                "result2": "result2"
            },
            "code": "uint32_t process_data_08006be0(uint32_t *data, int *params) {\n  uint32_t result = 0;\n  int *param_ptr;\n  uint16_t param3_value;\n  uint32_t param3_value_extended;\n  uint32_t data_value;\n  uint16_t data_value_extended;\n  bool flag;\n  code *function_ptr;\n  int param1_value;\n  int param2_value;\n  uint32_t bytes_processed;\n  uint16_t status_flag;\n  uint32_t initial_data_value;\n  uint32_t initial_status_flag;\n  uint32_t temp_value;\n  bool flag2;\n  code *function_ptr2;\n  int *param_ptr2;\n  uint32_t result2;\n\n  if (params[4] != 0) {\n    if ((data != (uint32_t *)0x0) && (data[6] == 0)) {\n      initialize_data();\n    }\n    if (params == (int *)PTR_DAT_08006c28) {\n      param_ptr = (int *)data[1];\n    }\n    else if (params == (int *)PTR_DAT_08006c2c) {\n      param_ptr = (int *)data[2];\n    }\n    else if (params == (int *)PTR_DAT_08006c30) {\n      param_ptr = (int *)data[3];\n    }\n    if (*(uint16_t *)(param_ptr + 3) != 0) {\n      param3_value = *(uint16_t *)(param_ptr + 3);\n      data_value = (uint32_t)param3_value;\n      if ((int)(data_value << 0x1c) < 0) {\n        param1_value = params[4];\n        if (param1_value != 0) {\n          param3_value_extended = data_value << 0x1e;\n          flag = param3_value_extended == 0;\n          if (flag) {\n            param3_value_extended = 0;\n          }\n          param2_value = *param_ptr;\n          if (!flag) {\n            param3_value_extended = param_ptr[5];\n          }\n          *param_ptr = param1_value;\n          param_ptr[2] = param3_value_extended;\n          bytes_processed = param2_value - param1_value;\n          while (bytes_processed > 0) {\n            temp_value = (*(code *)param_ptr[10])(data, param_ptr[8], param1_value, bytes_processed, 0, 0);\n            if (temp_value < 1) {\n              status_flag = *(uint16_t *)(param_ptr + 3);\n              goto LAB_08006bc6;\n            }\n            param1_value += temp_value;\n            bytes_processed -= temp_value;\n          }\n        }\n      }\n      else if (((params[1] > 0) || (params[0x10] > 0)) && ((function_ptr = (code *)param_ptr[0xb]) != (code *)0x0)) {\n        initial_data_value = *data;\n        *data = 0;\n        if ((param3_value & 0x1000) == 0) {\n          result2 = (*function_ptr)(data, param_ptr[8], param3_value & 0x1000, 1);\n          if ((result2 == -1) && ((data_value_extended = *data) != 0)) {\n            if ((data_value_extended != 0x1d) && (data_value_extended != 0x16)) {\n              status_flag = *(uint16_t *)(param_ptr + 3);\n              *(uint16_t *)(param_ptr + 3) = status_flag | 0x40;\n              goto LAB_08006b90;\n            }\n            *data = initial_data_value;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          result2 = params[0x15];\n        }\n        if (((int)((uint)param3_value << 0x1d) < 0) && ((result2 = result2 - params[1]), param_ptr[0xd] != 0)) {\n          result2 = result2 - params[0x10];\n        }\n        result2 = (*(code *)param_ptr[0xb])(data, param_ptr[8], result2, 0);\n        status_flag = *(uint16_t *)(param_ptr + 3);\n        if ((result2 == -1) && ((data_value_extended = *data) > 0x1d || (-1 < (int)((DAT_08006bdc >> (data_value_extended & 0xff)) << 0x1f))))) {\n          goto LAB_08006bc6;\n        }\n        params[1] = 0;\n        *param_ptr = params[4];\n        if (((int)((uint)status_flag << 0x13) < 0) && ((result2 != -1) || (*data == 0))) {\n          params[0x15] = result2;\n        }\n        param_ptr2 = (int *)param_ptr[0xd];\n        *data = initial_data_value;\n        if (param_ptr2 != (int *)0x0) {\n          if (param_ptr2 != param_ptr + 0x11) {\n            initialize_data();\n          }\n          param_ptr[0xd] = 0;\n          status_flag = *(uint16_t *)(param_ptr + 3);\n          *(uint16_t *)(param_ptr + 3) = status_flag | 0x40;\n          goto LAB_08006b66;\n        }\n      }\nLAB_08006aea:\n      result = 0;\n    }\n  }\n  return result;\n}\n",
            "called": [
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006be0",
            "calling": [
                "FUN_08006344"
            ],
            "imported": false,
            "current_name": "process_data_08006be0"
        },
        "FUN_080012e8": {
            "renaming": {
                "FUN_080012e8": "extract_bits_and_call_function_080012e8",
                "param_1": "data_address",
                "param_2": "bit_mask",
                "FUN_08005848": "call_function_with_bit",
                "FUN_080012a2": "call_cleanup_function",
                "uVar1": "bit_index"
            },
            "code": "void extract_bits_and_call_function_080012e8(int data_address, int bit_mask) {\n  uint bit_index;\n  \n  for (bit_index = 0; bit_index < 8; bit_index++) {\n    call_function_with_bit(*(undefined *)(data_address + bit_index + 0xb), bit_mask >> (bit_index & 0xff) & 1);\n  }\n  call_cleanup_function(data_address);\n  return;\n}",
            "called": [
                "FUN_080012a2",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012e8",
            "calling": [
                "FUN_08001310"
            ],
            "imported": false,
            "current_name": "extract_bits_and_call_function_080012e8"
        },
        "FUN_080058e8": {
            "renaming": {
                "FUN_080058e8": "do_nothing_080058e8"
            },
            "code": "\nvoid do_nothing_080058e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e8",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "do_nothing_080058e8"
        },
        "FUN_08006370": {
            "renaming": {
                "FUN_08006370": "process_data_08006370",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "data",
                "param_4": "data_len",
                "puVar2": "data_end_ptr",
                "iVar1": "result",
                "iVar3": "current_index",
                "*param_3": "*data"
            },
            "code": "int process_data_08006370(undefined4 input_1,undefined4 input_2,undefined *data,int data_len)\n{\n  int result = 0;\n  undefined *data_end_ptr = data + data_len;\n  int current_index = data_len;\n  do {\n    if (data == data_end_ptr) {\n      return 0;\n    }\n    result = process_byte(input_1,*data,input_2,data_len,current_index);\n    data_len = result + 1;\n    data = data + 1;\n  } while (data_len != 0);\n  return result;\n}",
            "called": [
                "FUN_08006344"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006370",
            "calling": [
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "process_data_08006370"
        },
        "FUN_080024f8": {
            "renaming": {
                "FUN_080024f8": "set_bit_in_array_080024f8",
                "param_1": "bit_index",
                "PTR_DAT_08002510": "array_start_ptr",
                "DAT_08002510": "array_start_offset"
            },
            "code": "void set_bit_in_array_080024f8(uint bit_index) {\n  if (bit_index >= 0) {\n    int array_index = bit_index >> 5;\n    int bit_position = bit_index & 0x1f;\n    int* array_ptr = (int *)(DAT_08002510 + array_index * 4);\n    *array_ptr = 1 << bit_position;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080024f8",
            "calling": [
                "FUN_08005510",
                "FUN_08005568"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_080024f8"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "update_params_08001ab0",
                "param_1": "obj_addr",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "param_6": "param5",
                "param_7": "param6",
                "param_8": "param7",
                "param_9": "param8",
                "param_10": "param9",
                "param_11": "param10",
                "param_12": "param11",
                "extraout_r1": "updated_param",
                "FUN_08001960": "initialize_obj",
                "FUN_08001a66": "set_obj_data",
                "FUN_08001814": "update_obj_data",
                "FUN_080058e0": "get_updated_value"
            },
            "code": "int update_params_08001ab0(int obj_addr, int param1, int param2, int param3, int param4, int param5, int param6, int param7, int param8, int param9, int param10, int param11)\n{\n  int updated_param;\n  updated_param = param3;\n  *(int *)(obj_addr + 0x38) = param1;\n  *(int *)(obj_addr + 0x3c) = updated_param;\n  *(int *)(obj_addr + 0x40) = param4;\n  *(char *)(obj_addr + 0x70) = 0;\n  initialize_obj(obj_addr, param1, 0, 0, DAT_08001b10, DAT_08001b14);\n  *(int *)(obj_addr + 0x58) = 100;\n  set_obj_data(obj_addr, param11);\n  update_obj_data(obj_addr, updated_param, param5, param6, param7, param8, param9, param10);\n  int updated_value = get_updated_value();\n  *(int *)(obj_addr + 0x44) = updated_value - *(int *)(obj_addr + 0x58);\n  return obj_addr;\n}",
            "called": [
                "FUN_08001a66",
                "FUN_08001814",
                "FUN_08001960",
                "FUN_080058e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08001b18"
            ],
            "imported": false,
            "current_name": "update_params_08001ab0"
        },
        "FUN_08006ac0": {
            "renaming": {
                "FUN_08006ac0": "process_data_08006ac0",
                "puVar1": "data_ptr",
                "iVar2": "data_size",
                "piVar3": "ptr1",
                "piVar4": "ptr2",
                "uVar5": "data_flag",
                "uVar6": "data_flag_ushort",
                "iVar7": "temp1",
                "pcVar8": "jump_table_ptr",
                "iVar9": "temp2",
                "uVar10": "temp3",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar11": "flag",
                "uVar12": "undefined_value"
            },
            "code": "void process_data_08006ac0(void)\n{\n  uint *data_ptr;\n  int data_size;\n  int *ptr1;\n  int *ptr2;\n  uint data_flag;\n  ushort data_flag_ushort;\n  int temp1;\n  code *jump_table_ptr;\n  int temp2;\n  uint temp3;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool flag;\n  undefined8 uVar12;\n  \n  initialize(6);\n  UNRECOVERED_JUMPTABLE_00 = (code *)0x8006acf;\n  uVar12 = get_data(1);\n  ptr1 = (int *)((ulonglong)uVar12 >> 0x20);\n  data_ptr = (uint *)uVar12;\n  data_flag_ushort = *(ushort *)(ptr1 + 3);\n  data_flag = (uint)data_flag_ushort;\n  if ((int)(data_flag << 0x1c) < 0) {\n    data_size = ptr1[4];\n    if (data_size != 0) {\n      temp2 = data_flag << 0x1e;\n      flag = temp2 != 0;\n      if (flag) {\n        temp2 = 0;\n      }\n      temp1 = *ptr1;\n      if (!flag) {\n        temp2 = ptr1[5];\n      }\n      *ptr1 = data_size;\n      ptr1[2] = temp2;\n      for (temp1 = temp1 - data_size; 0 < temp1; temp1 = temp1 - temp2) {\n        temp2 = (*(code *)ptr1[10])(data_ptr,ptr1[8],data_size,temp1);\n        if (temp2 < 1) {\n          data_flag_ushort = *(ushort *)(ptr1 + 3);\n          goto LAB_08006bc6;\n        }\n        data_size = data_size + temp2;\n      }\n    }\n  }\n  else if (((0 < ptr1[1]) || (0 < ptr1[0x10])) &&\n          (jump_table_ptr = (code *)ptr1[0xb], jump_table_ptr != (code *)0x0)) {\n    temp3 = *data_ptr;\n    *data_ptr = 0;\n    if ((data_flag_ushort & 0x1000) == 0) {\n      data_size = (*jump_table_ptr)(data_ptr,ptr1[8],data_flag & 0x1000,1);\n      if ((data_size == -1) && (temp3 = *data_ptr, temp3 != 0)) {\n        if ((temp3 != 0x1d) && (temp3 != 0x16)) {\n          *(ushort *)(ptr1 + 3) = *(ushort *)(ptr1 + 3) | 0x40;\n          (*UNRECOVERED_JUMPTABLE_00)();\n          return;\n        }\n        *data_ptr = temp3;\n        goto LAB_08006aea;\n      }\n    }\n    else {\n      data_size = ptr1[0x15];\n    }\n    if (((int)((uint)*(ushort *)(ptr1 + 3) << 0x1d) < 0) &&\n       (data_size = data_size - ptr1[1], ptr1[0xd] != 0)) {\n      data_size = data_size - ptr1[0x10];\n    }\n    data_size = (*(code *)ptr1[0xb])(data_ptr,ptr1[8],data_size,0);\n    data_flag_ushort = *(ushort *)(ptr1 + 3);\n    if ((data_size == -1) &&\n       ((0x1d < *data_ptr || (-1 < (int)((DAT_08006bdc >> (*data_ptr & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n      *(ushort *)(ptr1 + 3) = data_flag_ushort | 0x40;\n      (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n      return;\n    }\n    ptr1[1] = 0;\n    *ptr1 = ptr1[4];\n    if (((int)((uint)data_flag_ushort << 0x13) < 0) && ((data_size != -1 || (*data_ptr == 0)))) {\n      ptr1[0x15] = data_size;\n    }\n    ptr2 = (int *)ptr1[0xd];\n    *data_ptr = temp3;\n    if (ptr2 != (int *)0x0) {\n      if (ptr2 != ptr1 + 0x11) {\n        finalize_data(data_ptr);\n      }\n      ptr1[0xd] = 0;\n      (*UNRECOVERED_JUMPTABLE_00)();\n      return;\n    }\n  }\nLAB_08006aea:\n  (*UNRECOVERED_JUMPTABLE_00)(0);\n  return;\n}",
            "called": [
                "FUN_080061f0",
                "FUN_08006f00",
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ac0",
            "calling": [
                "FUN_08007090",
                "FUN_0800611c"
            ],
            "imported": false,
            "current_name": "process_data_08006ac0"
        },
        "FUN_08004198": {
            "renaming": {
                "FUN_08004198": "read_and_set_values_08004198",
                "param_1": "buffer",
                "pbVar2": "ptr",
                "sVar1": "count"
            },
            "code": "int read_and_set_values_08004198(int *buffer) {\n  short count = buffer[13] - 1;\n  if (*(char *)((int)buffer + 0x39) != '!') {\n    return 2;\n  }\n  if (buffer[8] == 0x1000) {\n    uint *ptr = (uint *)(*buffer + 4);\n    *ptr = *(ushort *)buffer[32] & 0x1ff;\n    if (buffer[16] == 0) {\n      buffer[32] += 2;\n    }\n    else {\n      buffer[32] += 1;\n    }\n  }\n  else {\n    byte *ptr = (byte *)buffer[32];\n    buffer[32] = (int)(ptr + 1);\n    uint *ptr2 = (uint *)(*buffer + 4);\n    *ptr2 = (uint)*ptr;\n  }\n  if (count == 0) {\n    uint *ptr = (uint *)(*buffer + 0xc);\n    *ptr &= 0xffffff7f;\n    *ptr |= 0x40;\n    return 0;\n  }\n  buffer[13] = count;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004198",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "read_and_set_values_08004198"
        },
        "FUN_08001c3c": {
            "renaming": {
                "FUN_08001c3c": "check_and_set_value_08001c3c",
                "param_1": "value_to_set",
                "iVar1": "result",
                "PTR_DAT_08001c80": "divisor_ptr",
                "PTR_DAT_08001c7c": "byte_ptr",
                "0xf": "max_value",
                "FUN_08002514": "check_divisor",
                "FUN_08002494": "set_value"
            },
            "code": "int check_and_set_value_08001c3c(uint value_to_set){\n  uint divisor = *(uint *)PTR_DAT_08001c80 / (1000 / (byte)*PTR_DAT_08001c7c);\n  int result = FUN_08002514(divisor);\n  if (result != 0) {\n    return 1;\n  }\n  if (0xf < value_to_set) {\n    return 1;\n  }\n  FUN_08002494(0xffffffff,value_to_set,0);\n  *(uint *)PTR_DAT_08001c84 = value_to_set;\n  return 0;\n}",
            "called": [
                "FUN_08002494",
                "FUN_08002514"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3c",
            "calling": [
                "FUN_08001c88",
                "FUN_08003afa"
            ],
            "imported": false,
            "current_name": "check_and_set_value_08001c3c"
        },
        "FUN_08001c3a": {
            "renaming": {
                "FUN_08001c3a": "do_nothing_08001c3a"
            },
            "code": "\nvoid do_nothing_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3a",
            "calling": [
                "FUN_08001c88"
            ],
            "imported": false,
            "current_name": "do_nothing_08001c3a"
        },
        "FUN_08000a2c": {
            "renaming": {
                "FUN_08000a2c": "is_parameters_valid_08000a2c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "int is_parameters_valid_08000a2c(uint32_t param1, int32_t param2, uint32_t param3, int32_t param4) {\n\tbool is_param2_valid = ((param2 << 1) >> 0x15 != -1) || ((param1 | param2 << 0xc) == 0);\n\tbool is_param4_valid = ((param4 << 1) >> 0x15 != -1) || ((param3 | param4 << 0xc) == 0);\n\tif (is_param2_valid && is_param4_valid) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a2c",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "is_parameters_valid_08000a2c"
        },
        "FUN_08001366": {
            "renaming": {
                "FUN_08001366": "read_and_print_character_08001366",
                "param_1": "file_descriptor",
                "param_2": "character_to_add",
                "param_3": "max_character_count",
                "param_4": "parameter_4",
                "cVar1": "current_character",
                "file_descriptor_17": "file_descriptor_17"
            },
            "code": "void read_and_print_character_08001366(int file_descriptor, char character_to_add, uint max_character_count, undefined4 parameter_4)\n{\n  char current_character;\n  uint max_characters = max_character_count;\n  if (max_characters > 3) {\n    max_characters = 3;\n  }\n  uint file_descriptor_17 = *(byte *)(file_descriptor + 0x17);\n  if (file_descriptor_17 <= max_characters) {\n    max_characters = file_descriptor_17 - 1 & 0xff;\n  }\n  current_character = *(char *)(max_characters + file_descriptor + 0x18);\n  add_character_to_output(file_descriptor, character_to_add + current_character | 0x80, 0, current_character, parameter_4);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001366",
            "calling": [
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "read_and_print_character_08001366"
        },
        "FUN_08005848": {
            "renaming": {
                "FUN_08005848": "parse_data_08005848",
                "param_1": "index",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "buffer",
                "iVar1": "parse_value",
                "uVar2": "parsed_value",
                "puVar3": "data_buffer",
                "uVar4": "data_value",
                "PTR_DAT_08005888": "original_data",
                "PTR_DAT_0800588c": "lookup_table"
            },
            "code": "void parse_data_08005848(uint8_t index, uint32_t value1, uint32_t value2, uint8_t* buffer)\n{\n    uint32_t data_value;\n    uint8_t* data_buffer;\n\n    if (index < 0x3c) {\n        data_value = (uint32_t)(char)PTR_DAT_08005888[index];\n        data_buffer = PTR_DAT_08005888;\n    }\n    else {\n        data_value = 0xffffffff;\n        data_buffer = buffer;\n    }\n\n    if ((data_value != 0xffffffff) &&\n        (parse_value = parse_data_08005848_value(data_value, PTR_DAT_0800588c, value2, data_buffer, buffer), parse_value != 0)) {\n        uint32_t parsed_value = parse_data_08005848_value((data_value << 0x18) >> 0x1c);\n        set_bit(parsed_value, 1 << (data_value & 0xf) & 0xffff, value1);\n    }\n    return;\n}\n",
            "called": [
                "FUN_08004c30",
                "FUN_080047f4",
                "FUN_08004848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005848",
            "calling": [
                "FUN_080012c0",
                "FUN_080012a2",
                "FUN_0800157c",
                "FUN_08000cd0",
                "FUN_080012e8",
                "FUN_08001310",
                "FUN_08000bcc",
                "FUN_080013a4",
                "FUN_080015b2"
            ],
            "imported": false,
            "current_name": "parse_data_08005848"
        },
        "FUN_08000ae8": {
            "renaming": {
                "FUN_08000ae8": "interruptSoftwareCall_08000ae8"
            },
            "code": "void interruptSoftwareCall_08000ae8(void)\n{\n  software_interrupt(0x3f);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ae8",
            "calling": [
                "FUN_08000aec"
            ],
            "imported": false,
            "current_name": "interruptSoftwareCall_08000ae8"
        },
        "FUN_08003ed8": {
            "renaming": {
                "FUN_08003ed8": "set_bits_to_zero_if_not_set_08003ed8",
                "param_1": "data_ptr",
                "puVar1": "data",
                "PTR_08003f24": "mask1",
                "PTR_08003f28": "mask2",
                "PTR_08003f2c": "ptr1",
                "PTR_08003f30": "ptr2",
                "DAT_08003f34": "0x1",
                "FUN_08004b34": "set_bits_to_zero_if_not_set_helper"
            },
            "code": "void set_bits_to_zero_if_not_set_08003ed8(uint **data_ptr)\n{\n  uint *data = *data_ptr;\n  uint PTR_08003f24 = DAT_08003f34111;\n  uint PTR_08003f28 = 0x444;\n  uint *PTR_08003f2c = &(data[8]);\n  uint *PTR_08003f30 = &(data[0]);\n  *PTR_08003f30 &= ~1;\n  if ((*PTR_08003f2c & PTR_08003f24) == 0)\n  {\n    if ((*PTR_08003f2c & PTR_08003f28) == 0)\n    {\n      *PTR_08003f30 &= ~1;\n    }\n  }\n  set_bits_to_zero_if_not_set_08003ed8_helper(data_ptr);\n  *(undefined *)((int)data_ptr + 0x3d) = 0;\n  *(undefined *)(data_ptr + 0xf) = 0;\n  return;\n}\n",
            "called": [
                "FUN_08004b34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ed8",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "set_bits_to_zero_if_not_set_08003ed8"
        },
        "FUN_080061e0": {
            "renaming": {
                "FUN_080061e0": "fill_array_with_value_080061e0",
                "param_1": "array",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "end_of_array"
            },
            "code": "void fill_array_with_value_080061e0(char *array, char value, int length) {\n  char *end_of_array = array + length;\n  for (; array != end_of_array; array++) {\n    *array = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061e0",
            "calling": [
                "FUN_08006c88",
                "FUN_08006d14",
                "FUN_08006c40",
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "fill_array_with_value_080061e0"
        },
        "FUN_08005604": {
            "renaming": {
                "FUN_08005604": "execute_function_08005604",
                "uVar1": "random_number",
                "iVar2": "function_result",
                "iVar3": "function_index",
                "PTR_DAT_08005644": "function_index_array",
                "PTR_DAT_08005648": "function_pointer_array",
                "PTR_DAT_0800564c": "argument_array"
            },
            "code": "void execute_function_08005604(void)\n{\n  uint32_t random_number = get_random_number();\n  int32_t function_index = *(int32_t *)(PTR_DAT_08005644 + random_number * 4);\n  if ((random_number < 5) && (function_result = (**(code **)(PTR_DAT_08005648 + random_number * 4))(function_index), function_result != -1)) {\n    uint32_t arg1 = *(uint32_t *)(PTR_DAT_0800564c + (uint32_t)*(uint8_t *)(function_index + 0x44) * 4);\n    int32_t arg2 = *(int32_t *)(function_index + 100) + (uint32_t)*(uint16_t *)(function_index + 0x6a);\n    FUN_0800455a(arg1, arg2, 1);\n  }\n  return;\n}",
            "called": [
                "FUN_080055bc",
                "FUN_0800455a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "FUN_080045fe"
            ],
            "imported": false,
            "current_name": "execute_function_08005604"
        },
        "FUN_08005724": {
            "renaming": {
                "FUN_08005724": "return_one_08005724"
            },
            "code": "int return_one_08005724(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005724",
            "calling": [
                "FUN_08007028"
            ],
            "imported": false,
            "current_name": "return_one_08005724"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "return_zero_08005728"
            },
            "code": "int return_zero_08005728(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "FUN_08007048"
            ],
            "imported": false,
            "current_name": "return_zero_08005728"
        },
        "FUN_0800135a": {
            "renaming": {
                "FUN_0800135a": "initialize_function_pointers_0800135a",
                "param_1": "arg_1",
                "param_2": "arg_4",
                "param_3": "arg_5",
                "param_4": "arg_8",
                "FUN_08001310": "call_function_pointer"
            },
            "code": "void initialize_function_pointers_0800135a(undefined4 arg_1, undefined4 arg_4, undefined4 arg_5, undefined4 arg_8)\n{\n  call_function_pointer(arg_1, 1, 0, arg_8, arg_8);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800135a",
            "calling": [
                "FUN_08000cd0",
                "FUN_08000bcc",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "initialize_function_pointers_0800135a"
        },
        "FUN_08005c96": {
            "renaming": {
                "FUN_08005c96": "execute_function_08005c96",
                "param_1": "function_pointer",
                "param_2": "argument_count",
                "param_3": "arg_3",
                "param_4": "arg_4",
                "uVar1": "argument_size",
                "uVar2": "result"
            },
            "code": "int execute_function_08005c96(int *function_pointer, int argument_count, undefined4 arg_3, undefined4 arg_4) {\n  if (argument_count != 0) {\n    int argument_size = FUN_08000178(argument_count);\n    int result = (**(code **)(*function_pointer + 4))(function_pointer, argument_count, argument_size, *(code **)(*function_pointer + 4), arg_4);\n    return result;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c96",
            "calling": [
                "FUN_08000cd0",
                "FUN_08005cd4",
                "FUN_08000bcc",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "execute_function_08005c96"
        },
        "FUN_0800571a": {
            "renaming": {
                "FUN_0800571a": "set_flags_at_offset_0800571a",
                "param_1": "offset",
                "param_2": "flags",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void set_flags_at_offset_0800571a(int offset, int flags) {\n    *(int *)(offset + 4) = flags;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800571a",
            "calling": [
                "FUN_08007004"
            ],
            "imported": false,
            "current_name": "set_flags_at_offset_0800571a"
        },
        "FUN_08002efc": {
            "renaming": {
                "FUN_08002efc": "process_input_08002efc",
                "param_1": "input_array",
                "puVar1": "flag_ptr",
                "DAT_0800040c": "0x3d",
                "DAT_08000400": "0x2a",
                "PTR_DAT_08000414": "0xb",
                "PTR_DAT_08000420": "0xc",
                "PTR_DAT_08000418": "0x4",
                "PTR_DAT_0800041c": "0x8",
                "PTR_DAT_08000424": "0xffff0000",
                "DAT_08000428": "0x20",
                "DAT_08000429": "0x40",
                "do_nothing_08002db0": "do_nothing_1",
                "do_nothing_08002c4e": "do_nothing_2"
            },
            "code": "uint32_t process_input_08002efc(uint32_t **input_array)\n{\n  uint32_t *flag_ptr;\n  uint32_t *count_ptr;\n  uint32_t *status_ptr;\n  uint32_t *data_ptr;\n  uint32_t *temp_ptr;\n  \n  flag_ptr = input_array[PTR_DAT_08000414];\n  \n  if (*(char *)((int)input_array + DAT_0800040c) == '!') {\n    \n    if (*(int16_t *)((int)input_array + DAT_08000400) == 0) {\n      \n      if (((flag_ptr == (uint32_t *)PTR_DAT_08000418) || (flag_ptr == (uint32_t *)PTR_DAT_0800041c)) || (flag_ptr == (uint32_t *)PTR_DAT_08000424)) {\n        (*input_array)[1] &= 0xfffff8ff;\n        **input_array |= DAT_080004280;\n        input_array[PTR_DAT_08000420] = (uint32_t *)0x0;\n        *(char *)((int)input_array + DAT_0800040c) = DAT_08000428;\n        \n        if (*(char *)((int)input_array + 0x3e) == '@') {\n          *(char *)((int)input_array + 0x3e) = 0;\n          do_nothing_08002db0();\n        }\n        else {\n          *(char *)((int)input_array + 0x3e) = 0;\n          do_nothing_08002c4e();\n        }\n      }\n      else {\n        (*input_array)[1] &= 0xfffff8ff;\n        input_array[PTR_DAT_08000420] = (uint32_t *)0x11;\n        *(char *)((int)input_array + 0x3e) = 0;\n        *(char *)((int)input_array + DAT_0800040c) = DAT_08000428;\n        do_nothing_08002c4e();\n      }\n    }\n    else {\n      temp_ptr = input_array[9];\n      input_array[9] = (uint32_t *)((int)temp_ptr + 1);\n      (*input_array)[4] = (uint32_t)*(char *)temp_ptr;\n      *(int16_t *)((int)input_array + DAT_08000400) -= 1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c4e",
                "FUN_08002db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efc",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_08002efc"
        },
        "FUN_0800365c": {
            "renaming": {
                "FUN_0800365c": "count_down_0800365c",
                "param_1": "input_num",
                "local_4": "multiplier"
            },
            "code": "void count_down_0800365c(int input_num)\n{\n  int multiplier = (uint)((ulonglong)DAT_08003684 * (ulonglong)*(uint *)PTR_DAT_08003680 >> 0x29);\n  do {\n    input_num--;\n  } while (input_num * multiplier);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800365c",
            "calling": [
                "FUN_08003688"
            ],
            "imported": false,
            "current_name": "count_down_0800365c"
        },
        "FUN_080033b8": {
            "renaming": {
                "FUN_080033b8": "process_data_080033b8",
                "param_1": "data_ptr",
                "iVar1": "data",
                "uVar2": "flag2",
                "uVar3": "flag3",
                "uVar4": "flag1",
                "DAT_08003518": "FLAG_1",
                "DAT_08003504": "FLAG_2",
                "DAT_0800350c": "FLAG_4",
                "DAT_0800351c": "FLAG_5",
                "DAT_08003514": "FLAG_6",
                "DAT_08003510": "FLAG_7",
                "FUN_080028de": "execute_action_1",
                "FUN_080028d2": "execute_action_2",
                "FUN_08002848": "execute_action_3",
                "FUN_08002f9c": "execute_action_4",
                "FUN_0800306c": "execute_action_5",
                "FUN_08002db2": "execute_action_6",
                "FUN_08002efc": "execute_action_7",
                "FUN_08002cf2": "execute_action_8",
                "FUN_080032b4": "execute_action_9",
                "FUN_08002ca6": "execute_action_10",
                "FUN_08002ad8": "execute_action_11",
                "FUN_08002c54": "execute_action_12",
                "FUN_08002ab8": "execute_action_13"
            },
            "code": "void process_data_080033b8(int *data_ptr) {\n  int data = *data_ptr;\n  uint flag1 = *(uint *)(data + 0x18);\n  uint flag2 = *(uint *)(data + 0x14);\n  uint flag3 = *(uint *)(data + 4);\n  \n  if ((*(char *)((int)data_ptr + 0x3e) == '\\x10') || (*(char *)((int)data_ptr + 0x3e) == '@')) {\n    if (((flag2 & 0x10001) == 0) || ((flag3 & 0x200) == 0)) {\n      if (((DAT_08003518 & flag2) == 0) || ((flag3 & 0x200) == 0)) {\n        if (((DAT_08003504 & flag2) != 0) && ((flag3 & 0x200) != 0)) {\n          execute_action_1(data_ptr);\n        }\n      }\n      else {\n        execute_action_2(data_ptr);\n      }\n    }\n    else {\n      execute_action_3(data_ptr);\n    }\n    if ((DAT_0800350c & flag1) == 0) {\n      if ((((DAT_0800351c & flag2) != 0) && ((flag3 & 0x400) != 0)) && ((DAT_08003514 & flag2) == 0)) {\n        execute_action_4(data_ptr);\n        return;\n      }\n      if (((DAT_08003514 & flag2) != 0) && ((flag3 & 0x200) != 0)) {\n        execute_action_5(data_ptr);\n        return;\n      }\n    }\n    else {\n      if ((((DAT_08003510 & flag2) != 0) && ((flag3 & 0x400) != 0)) && ((DAT_08003514 & flag2) == 0)) {\n        execute_action_6(data_ptr);\n        return;\n      }\n      if (((DAT_08003514 & flag2) != 0) && ((flag3 & 0x200) != 0)) {\n        execute_action_7(data_ptr);\n        return;\n      }\n    }\n  }\n  else {\n    if (((DAT_08003504 & flag2) != 0) && ((flag3 & 0x200) != 0)) {\n      execute_action_8();\n      return;\n    }\n    if (((FLAG_3 & flag2) != 0) && ((flag3 & 0x200) != 0)) {\n      execute_action_9(data_ptr);\n      return;\n    }\n    if ((DAT_0800350c & flag1) == 0) {\n      if ((((DAT_0800351c & flag2) != 0) && ((flag3 & 0x400) != 0)) && ((DAT_08003514 & flag2) == 0)) {\n        execute_action_10(data_ptr);\n        return;\n      }\n      if (((DAT_08003514 & flag2) != 0) && ((flag3 & 0x200) != 0)) {\n        execute_action_11(data_ptr);\n      }\n    }\n    else {\n      if ((((DAT_08003510 & flag2) != 0) && ((flag3 & 0x400) != 0)) && ((DAT_08003514 & flag2) == 0)) {\n        execute_action_12(data_ptr);\n        return;\n      }\n      if (((DAT_08003514 & flag2) != 0) && ((flag3 & 0x200) != 0)) {\n        execute_action_13(data_ptr);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002db2",
                "FUN_080028d2",
                "FUN_080028de",
                "FUN_08002ca6",
                "FUN_08002ab8",
                "FUN_0800306c",
                "FUN_080032b4",
                "FUN_08002f9c",
                "FUN_08002cf2",
                "FUN_08002ad8",
                "FUN_08002efc",
                "FUN_08002848",
                "FUN_08002c54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033b8",
            "calling": [],
            "imported": false,
            "current_name": "process_data_080033b8"
        },
        "FUN_080069e4": {
            "renaming": {
                "FUN_080069e4": "decode_data_080069e4",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "result",
                "uVar2": "flags",
                "iVar3": "ptr"
            },
            "code": "uint decode_data_080069e4(undefined4 *output, undefined4 *input)\n{\n  uint result;\n  ushort flags;\n  int ptr;\n  ptr = *(int *)PTR_PTR_DAT_08006ab0;\n  if ((ptr != 0) && (*(int *)(ptr + 0x18) == 0)) {\n    cleanup(ptr);\n  }\n  if (input == (undefined4 *)PTR_DAT_08006ab4) {\n    input = *(undefined4 **)(ptr + 4);\n  }\n  else if (input == (undefined4 *)PTR_DAT_08006ab8) {\n    input = *(undefined4 **)(ptr + 8);\n  }\n  else if (input == (undefined4 *)PTR_DAT_08006abc) {\n    input = *(undefined4 **)(ptr + 0xc);\n  }\n  flags = *(ushort *)(input + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input[0xd] != input + 0x11) {\n          handle_error(output);\n        }\n        input[0xd] = 0;\n      }\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = input[4];\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  }\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    handle_error(output, input);\n  }\n  flags = *(ushort *)(input + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = input[5];\n    }\n    input[2] = result;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] == 0) {\n    flags = *(ushort *)(input + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\n      *(ushort *)(input + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080061f0",
                "FUN_08006cb4",
                "FUN_08006e10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069e4",
            "calling": [
                "FUN_08006344",
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "decode_data_080069e4"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "do_nothing_08002580"
            },
            "code": "\nvoid do_nothing_08002580(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "FUN_08002582"
            ],
            "imported": false,
            "current_name": "do_nothing_08002580"
        },
        "FUN_08004b9e": {
            "renaming": {
                "FUN_08004b9e": "execute_main_function_08004b9e",
                "FUN_08001cac": "initialize_system",
                "FUN_08002582": "run_preprocessing",
                "do_nothing_08004b9c": "do_nothing"
            },
            "code": "void execute_main_function_08004b9e(void)\n{\n  initialize_system();\n  run_preprocessing();\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08002582",
                "FUN_08004b9c",
                "FUN_08001cac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9e",
            "calling": [],
            "imported": false,
            "current_name": "execute_main_function_08004b9e"
        },
        "FUN_08004b9c": {
            "renaming": {
                "FUN_08004b9c": "do_nothing_08004b9c"
            },
            "code": "\nvoid do_nothing_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9c",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "do_nothing_08004b9c"
        },
        "FUN_08005730": {
            "renaming": {
                "FUN_08005730": "print_values_to_console_08005730",
                "param_1": "first_value",
                "param_2": "second_value",
                "param_3": "third_value",
                "param_4": "fourth_value",
                "FUN_080053d4": "call_function_with_four_params"
            },
            "code": "void print_values_to_console_08005730(undefined4 first_value, undefined4 second_value, undefined4 third_value, undefined4 fourth_value)\n{\n  call_function_with_four_params(second_value, third_value, third_value, fourth_value, fourth_value);\n  return;\n}",
            "called": [
                "FUN_080053d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005730",
            "calling": [
                "FUN_08006f5a"
            ],
            "imported": false,
            "current_name": "print_values_to_console_08005730"
        },
        "FUN_08002582": {
            "renaming": {
                "FUN_08002582": "do_nothing_and_return_08002582",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void do_nothing_and_return_08002582(void)\n{\n  do_nothing_08002580();\n  return;\n}",
            "called": [
                "FUN_08002580"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002582",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08002582"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "set_flag_08004884",
                "param_1": "flag",
                "DAT_08004914": "ptr_to_flag_register",
                "DAT_08004918": "flag_0_value",
                "DAT_0800491c": "flag_1_value",
                "DAT_08004920": "flag_2_value",
                "DAT_08004924": "flag_3_value",
                "DAT_08004928": "flag_4_value"
            },
            "code": "uint32_t set_flag_08004884(uint32_t flag)\n{\n  switch(flag) {\n  case 0:\n    *DAT_08004914 |= FLAG_0;\n    return DAT_08004918;\n  case 1:\n    *DAT_08004914 |= FLAG_1;\n    return DAT_0800491c;\n  case 2:\n    *DAT_08004914 |= FLAG_2;\n    return DAT_08004920;\n  case 3:\n    *DAT_08004914 |= FLAG_3;\n    return DAT_08004924;\n  case 4:\n    *DAT_08004914 |= FLAG_4;\n    return DAT_08004928;\n  default:\n    return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "FUN_08004974",
                "FUN_08004bb0",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "set_flag_08004884"
        },
        "FUN_08001be8": {
            "renaming": {
                "FUN_08001be8": "copy_and_clear_memory_08001be8",
                "iVar1": "index",
                "puVar2": "destination_pointer",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void copy_and_clear_memory_08001be8(void)\n{\n  int index;\n  undefined4 *destination_pointer;\n  code *jump_table;\n  for (index = 0; PTR_DAT_08001c20 + index < DAT_08001c24; index += 4) {\n    *(undefined4 *)(PTR_DAT_08001c20 + index) = *(undefined4 *)(DAT_08001c1c + index);\n  }\n  for (destination_pointer = (undefined4 *)PTR_DAT_08001c28; destination_pointer < PTR_DAT_08001c2c; destination_pointer++) {\n    *destination_pointer = 0;\n  }\n  FUN_08004d44();\n  FUN_08006198();\n  jump_table = (code *)0x8001c1a;\n  FUN_08005f6c();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_08004d44",
                "FUN_08005f6c",
                "FUN_08006198"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001be8",
            "calling": [],
            "imported": false,
            "current_name": "copy_and_clear_memory_08001be8"
        },
        "FUN_080061f0": {
            "renaming": {
                "FUN_080061f0": "insert_node_080061f0",
                "param_1": "head",
                "param_2": "key",
                "param_3": "val",
                "param_4": "error_code",
                "puVar1": "ptr",
                "extraout_r1": "next_node",
                "ppiVar2": "next_node",
                "ppiVar3": "last_node",
                "piVar4": "val_ptr",
                "ppiVar5": "current_node",
                "ppiVar6": "last_node",
                "ppiVar7": "new_node"
            },
            "code": "void insert_node_080061f0(int **head, int key, int val, int *error_code) {\n  if (key == 0) {\n    return;\n  }\n  int **new_node = (int **)(key - 4);\n  if (*(int *)(key - 4) < 0) {\n    new_node = (int **)((int)new_node + *(int *)(key - 4));\n  }\n  do_nothing_1();\n  int **current_node = *(int ***)PTR_DAT_08006284;\n  if (current_node == NULL) {\n    new_node[1] = NULL;\n    *(int ***)PTR_DAT_08006284 = new_node;\n    *head = new_node;\n  }\n  else if (new_node < current_node) {\n    int **next_node = (int **)*new_node;\n    int **last_node = (int **)((int)new_node + (int)next_node);\n    if (current_node == last_node) {\n      int *val_ptr = *current_node;\n      current_node = (int **)current_node[1];\n      last_node = (int **)((int)val_ptr + (int)next_node);\n      *new_node = (int *)last_node;\n    }\n    new_node[1] = (int *)current_node;\n    *(int ***)PTR_DAT_08006284 = new_node;\n  }\n  else {\n    while (current_node != NULL && current_node < new_node) {\n      int **next_node = current_node[1];\n      if (next_node == NULL) break;\n      current_node = next_node;\n    }\n    int **next_node = (int **)*current_node;\n    if ((int **)((int)current_node + (int)next_node) == new_node) {\n      next_node = (int **)((int)next_node + (int)*new_node);\n      *current_node = (int *)next_node;\n      if (current_node[1] == (int **)((int)current_node + (int)next_node)) {\n        int *val_ptr = *current_node[1];\n        current_node[1] = (int **)current_node[1][1];\n        next_node = (int **)((int)next_node + (int)val_ptr);\n        *current_node = (int *)next_node;\n      }\n    }\n    else if (new_node < (int **)((int)current_node + (int)next_node)) {\n      *error_code = 0xc;\n    }\n    else {\n      next_node = (int **)((int)new_node + (int)*new_node);\n      if (current_node[1] == next_node) {\n        int *val_ptr = *current_node[1];\n        current_node[1] = (int **)current_node[1][1];\n        next_node = (int **)((int)val_ptr + (int)*new_node);\n        *new_node = (int *)next_node;\n      }\n      new_node[1] = (int *)current_node[1];\n      current_node[1] = (int **)new_node;\n    }\n  }\n  do_nothing_2(error_code, current_node, new_node, val);\n  return;\n}\n",
            "called": [
                "FUN_08006eac",
                "FUN_08006eae"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061f0",
            "calling": [
                "FUN_080069e4",
                "FUN_08006ac0"
            ],
            "imported": false,
            "current_name": "insert_node_080061f0"
        },
        "FUN_08002348": {
            "renaming": {
                "FUN_08002348": "check_flag_08002348",
                "param_1": "flag_address",
                "iVar1": "flag_value",
                "FUN_080020f0": "check_connection"
            },
            "code": "int check_flag_08002348(int flag_address) {\n  int flag_value;\n  if (*(char *)(flag_address + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(flag_address + 0x24) = 1;\n  flag_value = check_connection();\n  if (flag_value == 0) {\n    *(uint *)(flag_address + 0x28) = *(uint *)(flag_address + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(flag_address + 0x24) = 0;\n  return flag_value;\n}",
            "called": [
                "FUN_080020f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002348",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "check_flag_08002348"
        },
        "FUN_080060d4": {
            "renaming": {
                "FUN_080060d4": "execute_function_080060d4",
                "param_1": "function_pointer",
                "iVar1": "index",
                "PTR_DAT_08006100": "PTR_DAT_08006100"
            },
            "code": "void execute_function_080060d4(int function_pointer) {\n  int index = *(int *)(function_pointer + 8);\n  if (index != 0) {\n    (**(code **)(function_pointer + 0xc))();\n    return;\n  }\n  initialize();\n  int result = get_index();\n  if (*(int *)(PTR_DAT_08006100 + result * 0x14 + 0xc) != 0) {\n    execute_function_080060d4();\n  }\n  return;\n}",
            "called": [
                "FUN_08007090"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060d4",
            "calling": [
                "FUN_080060e4"
            ],
            "imported": false,
            "current_name": "execute_function_080060d4"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "set_flags_and_call_function_08005a68",
                "param_1": "base_address",
                "param_2": "parameter",
                "param_3": "flags",
                "bVar1": "flag_value",
                "iVar2": "increment_value",
                "pbVar3": "byte_pointer",
                "unaff_r4": "undefined_value",
                "unaff_r6": "integer_value",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void set_flags_and_call_function_08005a68(int base_address, int parameter, byte flags) {\n    uint extraout_r1;\n    byte flag_value = flags & 7;\n    int increment_value;\n    code *jump_table;\n    if (flag_value == 4) {\n        increment_value = 7;\n    }\n    else if (flag_value == 6) {\n        increment_value = 8;\n    }\n    else if (flag_value == 2) {\n        increment_value = 6;\n    }\n    else {\n        increment_value = 0;\n    }\n    if ((flags & 0x30) == 0x30) {\n        *(int *)(base_address + 0x128) = 0x600;\n        increment_value++;\n    }\n    else if ((flags & 0x20) == 0) {\n        *(int *)(base_address + 0x128) = 0;\n    }\n    else {\n        *(int *)(base_address + 0x128) = 0x400;\n        increment_value++;\n    }\n    if ((flags & 8) == 0) {\n        *(int *)(base_address + 0x124) = 0;\n    }\n    else {\n        *(int *)(base_address + 0x124) = 0x2000;\n    }\n    if (increment_value == 8) {\n        *(int *)(base_address + 0x120) = 0;\n    }\n    else if (increment_value == 9) {\n        *(int *)(base_address + 0x120) = 0x1000;\n    }\n    else {\n        increment_value = 0;\n    }\n    if (increment_value != 0) {\n        FUNC_08004f4c(base_address + 0xd4);\n        FUN_08005510(base_address + 0xd4,uRam08005b14);\n        return;\n    }\n    jump_table = (code *)0x8005b12;\n    int i = iRam08005b1c;\n    FUN_0800611c(uRam08005b20,299,iRam08005b1c,uRam08005b18);\n    byte *pbVar3 = *(byte **)(extraout_r1 + unaff_r6);\n    *(undefined *)(i + 0x1e) = unaff_r4;\n    *(undefined *)(*pbVar3 + 0x1e) = 0;\n    if (extraout_r1 < 0x3c) {\n        uRam0000012d = PTR_DAT_08005b38[extraout_r1];\n    }\n    else {\n        uRam0000012d = 0xff;\n    }\n    (*jump_table)();\n}",
            "called": [
                "FUN_0800611c",
                "FUN_08004f4c",
                "FUN_08005510"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "set_flags_and_call_function_08005a68"
        },
        "FUN_08001814": {
            "renaming": {
                "FUN_08001814": "initialize_params_08001814",
                "param_1": "params",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "param_6": "param5",
                "param_7": "param6",
                "param_8": "param7",
                "param_9": "param8",
                "iVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "bVar4": "is_param9_not_one",
                "uVar5": "param9_as_int",
                "i": "i",
                "ptr": "ptr",
                "ptr2": "ptr2",
                "ptr3": "ptr3"
            },
            "code": "void initialize_params_08001814(int *params, int param1, int param2, int param3, int param4, int param5, int param6, int param7, int param8, int param9)\n{\n  int result1;\n  int result2;\n  int result3;\n  bool is_param9_not_one;\n  int param9_as_int;\n  int i;\n  int *ptr;\n  int *ptr2;\n  int *ptr3;\n  \n  result1 = FUN_080009dc(param3, param4, 0, 0);\n  result2 = FUN_080009dc(param5, param6, 0, 0);\n  result3 = FUN_080009dc(param7, param8, 0, 0);\n  \n  if (result1 == 0 && result2 == 0 && result3 == 0) {\n    params[13] = param9;\n    is_param9_not_one = param9 != 1;\n    param9_as_int = is_param9_not_one ? 0 : 1;\n    params[17] = param9_as_int;\n    params[0] = param3;\n    params[1] = param4;\n    params[2] = param5;\n    params[3] = param6;\n    params[4] = param7;\n    params[5] = param8;\n    ptr = &params[22];\n    ptr2 = &params[16];\n    ptr3 = &params[24];\n    for (i = 0; i < 3; i++) {\n      *ptr2 = param3;\n      *ptr = param4;\n      ptr += 2;\n      ptr2 += 2;\n      ptr3 += 2;\n    }\n    result1 = FUN_0800040c(params[22]);\n    result1 = FUNC_0800074c(result1 >> 32, result1, 0, DAT_080018f4);\n    params[6] = param3;\n    params[7] = param4;\n    params[18] = result1 >> 32;\n    params[19] = result1;\n    result2 = FUNC_080004f8(param5, param6, result1 >> 32, result1);\n    params[8] = result2 >> 32;\n    params[9] = result2;\n    result1 = FUNC_0800074c(param7, param8, result1 >> 32, result1);\n    params[10] = result1 >> 32;\n    params[11] = result1;\n    if (params[12] == 1) {\n      result3 = FUNC_08000190(0, 0, param3, param4);\n      params[6] = result3 >> 32;\n      params[7] = result3;\n      result2 = FUNC_08000190(0, 0, result2 >> 32, result2);\n      params[8] = result2 >> 32;\n      params[9] = result2;\n      result1 = FUNC_08000190(0, 0, result1 >> 32, result1);\n      params[10] = result1 >> 32;\n      params[11] = result1;\n    }\n  }\n}\n",
            "called": [
                "FUN_0800040c",
                "FUN_080004f8",
                "FUN_0800074c",
                "FUN_080009dc",
                "FUN_08000190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001814",
            "calling": [
                "FUN_08001ab0",
                "FUN_080018f8"
            ],
            "imported": false,
            "current_name": "initialize_params_08001814"
        },
        "FUN_08000aec": {
            "renaming": {
                "FUN_08000aec": "check_and_execute_function_08000aec",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "result",
                "FUN_08000ae8": "execute_function"
            },
            "code": "int check_and_execute_function_08000aec(int param_1, int param_2, int param_3, int param_4)\n{\n  int result;\n  if (*(int *)PTR_DAT_08000b04 != 0) {\n    result = 0;\n  }\n  else {\n    result = execute_function(1, param_1, 0, 0, param_4);\n  }\n  return result;\n}",
            "called": [
                "FUN_08000ae8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "check_and_execute_function_08000aec"
        },
        "FUN_0800572c": {
            "renaming": {
                "FUN_0800572c": "returnZero_0800572c"
            },
            "code": "int returnZero_0800572c(void) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800572c",
            "calling": [
                "FUN_0800706c"
            ],
            "imported": false,
            "current_name": "returnZero_0800572c"
        },
        "FUN_08004e12": {
            "renaming": {
                "FUN_08004e12": "execute_function_if_present_08004e12",
                "iVar1": "function_address",
                "FUN_08004df4": "get_function_address",
                "PTR_": "",
                "DAT_": "",
                "FUNCTION_POINTER_OFFSET": "0x48",
                "code": "function_pointer"
            },
            "code": "void execute_function_if_present_08004e12(void)\n{\n  int function_address = get_function_address();\n  if (*(code **)(function_address + FUNCTION_POINTER_OFFSET) != (code *)0x0) {\n    (**(code **)(function_address + FUNCTION_POINTER_OFFSET))();\n  }\n  return;\n}",
            "called": [
                "FUN_08004df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e12",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "execute_function_if_present_08004e12"
        },
        "FUN_08000a58": {
            "renaming": {
                "FUN_08000a58": "convertToFixedPoint_08000a58",
                "param_1": "integerPart",
                "param_2": "fractionalPart",
                "uVar1": "fixedPointValue",
                "iVar2": "shiftAmount",
                "uVar3": "absShiftAmount"
            },
            "code": "uint convertToFixedPoint_08000a58(uint integerPart, uint fractionalPart) {\n  uint fixedPointValue;\n  int shiftAmount;\n  uint absShiftAmount;\n\n  shiftAmount = fractionalPart * 2 + 0x200000;\n  if (fractionalPart * 2 < 0xffe00000) {\n    if (shiftAmount >= 0) {\n      return 0;\n    }\n    absShiftAmount = -shiftAmount - 0x3e1;\n    if (shiftAmount >> 0x15 < 0xfffffc20 && absShiftAmount != 0) {\n      fixedPointValue = (fractionalPart << 0xb | 0x80000000 | integerPart >> 0x15) >> (absShiftAmount & 0xff);\n      if ((fractionalPart & 0x80000000) != 0) {\n        fixedPointValue = -fixedPointValue;\n      }\n      return fixedPointValue;\n    }\n  }\n  else if ((integerPart | fractionalPart << 0xc) != 0) {\n    return 0;\n  }\n  fractionalPart = fractionalPart & 0x80000000;\n  if (fractionalPart == 0) {\n    fractionalPart = 0x7fffffff;\n  }\n  return fractionalPart;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a58",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "convertToFixedPoint_08000a58"
        },
        "FUN_08001b48": {
            "renaming": {
                "FUN_08001b48": "initialize_system_08001b48",
                "iVar1": "result",
                "local_30": "frequency",
                "local_20": "prescaler",
                "local_1c": "period",
                "local_14": "pulse_width",
                "local_10": "duty_cycle",
                "local_c": "duty_cycle[1]",
                "PTR_s__home_bo__arduino15_packages_STM_08001be4": "error_message",
                "local_44": "period[1]",
                "local_40": "pulse_width[1]",
                "local_3c": "duty_cycle[0]",
                "local_38": "prescaler[1]",
                "local_34": "duty_cycle[0]",
                "local_54": "duty_cycle_set",
                "local_4c": "duty_cycle_set[1]",
                "FUN_08003688": "start_timer",
                "FUN_08003ad4": "configure_pwm",
                "FUN_08003c90": "set_pwm_duty_cycle",
                "FUN_08003c44": "calculate_multiplier",
                "FUN_08002514": "set_timer_counter",
                "FUN_08002560": "set_pwm_mode",
                "FUN_08002494": "set_pwm_counter"
            },
            "code": "void initialize_system_08001b48(void)\n{\n    int result;\n    uint32_t frequency[2] = {2, 1};\n    uint32_t prescaler = 0x10;\n    uint32_t period[2] = {2, 0};\n    uint32_t pulse_width[2] = {0xf, 2};\n    uint32_t duty_cycle[2] = {0, 0x380000};\n    result = start_timer(frequency);\n    if (result != 0) {\n        print_PTR_s__home_bo__arduino15_packages_STM_08001be4(\"Error: Failed to start timer.\");\n    }\n    result = configure_pwm(period, pulse_width, prescaler);\n    if (result != 0) {\n        print_PTR_s__home_bo__arduino15_packages_STM_08001be4(\"Error: Failed to configure PWM.\");\n    }\n    uint32_t duty_cycle_set[2] = {2, 0x8000};\n    result = set_pwm_duty_cycle(duty_cycle_set);\n    if (result != 0) {\n        print_PTR_s__home_bo__arduino15_packages_STM_08001be4(\"Error: Failed to set PWM duty cycle.\");\n    }\n    uint32_t multiplier = calculate_multiplier();\n    set_timer_counter((uint32_t)((uint64_t)multiplier * period[1] >> 0x26));\n    set_pwm_mode(4);\n    set_pwm_counter(0xffffffff, 0);\n}\n",
            "called": [
                "FUN_08003688",
                "FUN_08003ad4",
                "FUN_08002560",
                "FUN_08002494",
                "FUN_08004d40",
                "FUN_08002514",
                "FUN_08003c90",
                "FUN_08003c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "FUN_08004c52"
            ],
            "imported": false,
            "current_name": "initialize_system_08001b48"
        },
        "FUN_08004092": {
            "renaming": {
                "FUN_08004092": "set_bit_08004092",
                "param_1": "bit_array",
                "param_2": "bit_index",
                "param_3": "bit_value",
                "uint": "uint32_t",
                "*": "*",
                "()": "()"
            },
            "code": "void set_bit_08004092(uint32_t* bit_array, uint8_t bit_index, uint8_t bit_value) {\n    uint32_t mask = 1 << (bit_index & 0xff);\n    *bit_array = (*bit_array & ~mask) | (bit_value << (bit_index & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004092",
            "calling": [
                "FUN_080040b0"
            ],
            "imported": false,
            "current_name": "set_bit_08004092"
        },
        "FUN_08005cd4": {
            "renaming": {
                "FUN_08005cd4": "calculate_sum_of_two_values_08005cd4",
                "param_1": "param",
                "iVar1": "first_value",
                "iVar2": "second_value",
                "FUN_08005c96": "get_first_value",
                "FUN_08005cc0": "get_second_value"
            },
            "code": "int calculate_sum_of_two_values_08005cd4(int param){\n  int first_value = get_first_value();\n  int second_value = get_second_value(param);\n  return first_value + second_value;\n}",
            "called": [
                "FUN_08005cc0",
                "FUN_08005c96"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cd4",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "calculate_sum_of_two_values_08005cd4"
        },
        "FUN_08005bb0": {
            "renaming": {
                "FUN_08005bb0": "check_parameter_08005bb0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "FUN_08005b54": "execute_function"
            },
            "code": "void check_parameter_08005bb0(int param1, int param2, undefined4 param3, undefined4 param4) {\n  if (param1 != 1) {\n    return;\n  }\n  if (param2 == 0xffff) {\n    execute_function(PTR_DAT_08005bd0, DAT_08005bcc, param3, 0xffff, param4);\n  }\n  return;\n}",
            "called": [
                "FUN_08005b54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb0",
            "calling": [],
            "imported": false,
            "current_name": "check_parameter_08005bb0"
        },
        "FUN_080014ba": {
            "renaming": {
                "FUN_080014ba": "set_data_in_struct_080014ba",
                "param_1": "struct_ptr",
                "param_2": "is_zero",
                "param_3": "data_1",
                "param_4": "data_2",
                "param_5": "data_3",
                "param_6": "data_4",
                "param_7": "data_5",
                "param_8": "data_6",
                "param_9": "data_7",
                "param_10": "data_8",
                "param_11": "data_9",
                "param_12": "data_10",
                "param_13": "data_11",
                "*(undefined *)(param_1 + 8)": "data_1",
                "*(char *)(param_1 + 9)": "data_2",
                "*(undefined *)(param_1 + 10)": "data_3",
                "*(undefined *)(param_1 + 0xb)": "data_4",
                "*(undefined *)(param_1 + 0xc)": "data_5",
                "*(undefined *)(param_1 + 0xd)": "data_6",
                "*(undefined *)(param_1 + 0xe)": "data_7",
                "*(undefined *)(param_1 + 0xf)": "data_8",
                "*(undefined *)(param_1 + 0x10)": "data_9",
                "*(undefined *)(param_1 + 0x11)": "data_10",
                "*(undefined *)(param_1 + 0x12)": "data_11",
                "*(undefined *)(param_1 + 0x13)": "zero_flag",
                "FUN_080013a4": "set_data_in_struct_2"
            },
            "code": "void set_data_in_struct_080014ba(int struct_ptr, int is_zero, undefined data_1, undefined4 data_2, undefined data_3, undefined data_4, undefined data_5, undefined data_6, undefined data_7, undefined data_8, undefined data_9, undefined data_10, undefined data_11)\n{\n    *(undefined *)(struct_ptr + 8) = data_1;\n    *(char *)(struct_ptr + 9) = (char)data_2;\n    *(undefined *)(struct_ptr + 10) = data_3;\n    *(undefined *)(struct_ptr + 0xb) = data_4;\n    *(undefined *)(struct_ptr + 0xc) = data_5;\n    *(undefined *)(struct_ptr + 0xd) = data_6;\n    *(undefined *)(struct_ptr + 0xe) = data_7;\n    *(undefined *)(struct_ptr + 0xf) = data_8;\n    *(undefined *)(struct_ptr + 0x10) = data_9;\n    *(undefined *)(struct_ptr + 0x11) = data_10;\n    *(undefined *)(struct_ptr + 0x12) = data_11;\n    if (is_zero == 0) {\n        *(undefined *)(struct_ptr + 0x13) = 0x10;\n    }\n    else {\n        *(undefined *)(struct_ptr + 0x13) = 0;\n    }\n    set_data_in_struct_080014ba_2(struct_ptr, 0x10, 1, 0, data_2);\n    return;\n}\n",
            "called": [
                "FUN_080013a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ba",
            "calling": [
                "FUN_08001510"
            ],
            "imported": false,
            "current_name": "set_data_in_struct_080014ba"
        },
        "FUN_08003c90": {
            "renaming": {
                "FUN_08003c90": "set_configuration_08003c90",
                "param_1": "config",
                "puVar1": "ptr",
                "iVar2": "timeout_start",
                "iVar3": "timeout_current",
                "uVar4": "config_mask",
                "bVar5": "has_device_mode_changed",
                "DAT_08003d98": "device_config",
                "DAT_08003d9c": "device_state",
                "DAT_08003da0": "has_device_mode_changed_ptr"
            },
            "code": "int set_configuration_08003c90(uint *config) {\n  int timeout_start, timeout_current;\n  bool has_device_mode_changed;\n  if ((*config & 1) != 0) {\n    has_device_mode_changed = (*(uint *)(DAT_08003d98 + 0x1c) & 0x10000000) == 0;\n    if (has_device_mode_changed) {\n      *(uint *)(DAT_08003d98 + 0x1c) |= 0x10000000;\n    }\n    if ((*DAT_08003d9c & 0x100) == 0) {\n      *DAT_08003d9c |= 0x100;\n      timeout_start = get_current_time();\n      while ((*DAT_08003d9c & 0x100) == 0) {\n        timeout_current = get_current_time();\n        if (100 < (uint)(timeout_current - timeout_start)) {\n          return 3;\n        }\n      }\n    }\n    has_device_mode_changed = DAT_08003d98;\n    timeout_start = DAT_08003d98 + 0x20;\n    uint uVar4 = *(uint *)(DAT_08003d98 + 0x20) & 0x300;\n    if ((uVar4 != 0) && (uVar4 != (config[1] & 0x300))) {\n      uVar4 = *(uint *)(DAT_08003d98 + 0x20);\n      *has_device_mode_changed = 1;\n      *timeout_start = 0;\n      *(uint *)(timeout_start) = uVar4 & 0xfffffcff;\n      if ((uVar4 & 1) != 0) {\n        timeout_start = get_current_time();\n        while ((*(uint *)(DAT_08003d98 + 0x20) & 2) == 0) {\n          timeout_current = get_current_time();\n          if (5000 < (uint)(timeout_current - timeout_start)) {\n            return 3;\n          }\n        }\n      }\n    }\n    timeout_start = DAT_08003d98;\n    *(uint *)(DAT_08003d98 + 0x20) = *(uint *)(DAT_08003d98 + 0x20) & 0xfffffcff | config[1];\n    if (has_device_mode_changed) {\n      *(uint *)(timeout_start + 0x1c) &= 0xefffffff;\n    }\n  }\n  if ((*config & 2) != 0) {\n    *(uint *)(DAT_08003d98 + 4) &= 0xffff3fff | config[2];\n  }\n  if ((*config & 0x10) != 0) {\n    *(uint *)(DAT_08003d98 + 4) &= 0xffbfffff | config[3];\n  }\n  return 0;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c90",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "set_configuration_08003c90"
        },
        "FUN_08002514": {
            "renaming": {
                "FUN_08002514": "validate_input_08002514",
                "param_1": "input",
                "puVar1": "ptr"
            },
            "code": "int validate_input_08002514(int input) {\n    int *ptr = DAT_08002538;\n    if (input - 1U < 0x1000000) {\n        ptr[1] = input - 1U;\n        *(undefined *)(DAT_0800253c + 0x23) = 0xf0;\n        ptr[2] = 0;\n        *ptr = 7;\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002514",
            "calling": [
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "imported": false,
            "current_name": "validate_input_08002514"
        },
        "FUN_08005c1c": {
            "renaming": {
                "FUN_08005c1c": "set_data_at_address_08005c1c",
                "param_1": "address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4",
                "*param_1": "*address",
                "PTR_PTR_LAB_08005be2_1_08005c34": "PTR_PTR_LAB_08005be2_1_08005c34"
            },
            "code": "void set_data_at_address_08005c1c(unsigned int *address, unsigned char value1, unsigned char value2, unsigned char value3, unsigned char value4)\n{\n  *address = PTR_PTR_LAB_08005be2_1_08005c34;\n  *(unsigned char *)(address + 1) = value1;\n  *(unsigned char *)((int)address + 5) = value2;\n  *(unsigned char *)((int)address + 6) = value3;\n  *(unsigned char *)((int)address + 7) = value4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c1c",
            "calling": [
                "FUN_08005c38"
            ],
            "imported": false,
            "current_name": "set_data_at_address_08005c1c"
        },
        "FUN_08006dc8": {
            "renaming": {
                "FUN_08006dc8": "check_file_type_08006dc8",
                "param_1": "file_buffer",
                "param_2": "buffer_size",
                "param_3": "file_type",
                "param_4": "permissions",
                "iVar1": "read_result",
                "uVar2": "file_type_result",
                "auStack_4c": "stack_buffer",
                "local_48": "permissions_result"
            },
            "code": "int check_file_type_08006dc8(void *file_buffer, int buffer_size, int *file_type, uint *permissions)\\n\\\n    {\\n\\\n        int read_result;\\n\\\n        int file_type_result;\\n\\\n        uint permissions_result;\\n\\\n        if (*(short *)(buffer_size + 0xe) < 0 || (read_result = read_file_type(file_buffer, (int)*(short *)(buffer_size + 0xe), &file_type_result)) < 0) {\\n\\\n            *permissions = 0;\\n\\\n            if ((int)((uint)*(ushort *)(buffer_size + 0xc) << 0x18) < 0) {\\n\\\n                file_type_result = 0x40;\\n\\\n                goto LAB_08006e08;\\n\\\n            }\\n\\\n        }\\n\\\n        else {\\n\\\n            *permissions = (uint)((file_type_result & 0xf000) == 0x2000);\\n\\\n        }\\n\\\n        file_type_result = 0x400;\\n\\\n        LAB_08006e08:\\n\\\n        *file_type = file_type_result;\\n\\\n        return 0;\\n\\\n    }",
            "called": [
                "FUN_08007004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dc8",
            "calling": [
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "check_file_type_08006dc8"
        },
        "FUN_0800412c": {
            "renaming": {
                "FUN_0800412c": "clear_flags_and_bits_0800412c",
                "param_1": "data",
                "param_2": "value",
                "puVar1": "data_ptr"
            },
            "code": "int clear_flags_and_bits_0800412c(uint **data, int value) {\\n\\\n    uint *data_ptr = *data;\\n\\\n    if (((data_ptr[8] & 0x1111) == 0) && ((data_ptr[8] & 0x444) == 0)) {\\n\\\n        data_ptr[17] &= 0xffff7fff;\\n\\\n    }\\n\\\n    data_ptr = *data;\\n\\\n    if (((data_ptr[8] & 0x1111) == 0) && ((data_ptr[8] & 0x444) == 0)) {\\n\\\n        *data_ptr &= 0xfffffffe;\\n\\\n    }\\n\\\n    return 0;\\n\\\n}",
            "called": [
                "FUN_08004110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800412c",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "clear_flags_and_bits_0800412c"
        },
        "FUN_08007090": {
            "renaming": {
                "FUN_08007090": "initialize_pointers_and_call_function_08007090",
                "PTR_DAT_0800712c": "pointer_1",
                "PTR_DAT_08007130": "pointer_2",
                "PTR_DAT_08007134": "pointer_3",
                "PTR_DAT_08007138": "pointer_4",
                "PTR_DAT_0800713c": "pointer_5",
                "PTR_DAT_08007140": "pointer_6",
                "PTR_DAT_08007144": "pointer_7",
                "PTR_DAT_08007148": "pointer_8",
                "PTR_DAT_0800714c": "pointer_9",
                "PTR_DAT_08007150": "pointer_10",
                "PTR_DAT_08007154": "pointer_11",
                "PTR_DAT_08007158": "pointer_12",
                "initialize_pointer": "initialize_pointer"
            },
            "code": "void initialize_pointers_and_call_function_08007090(void)\n{\n  code *function_pointer;\n  function_pointer = initialize_pointers_and_call_function_08007090;\n  initialize_pointer(PTR_DAT_0800712c);\n  initialize_pointer(PTR_DAT_08007130);\n  initialize_pointer(PTR_DAT_08007134);\n  initialize_pointer(PTR_DAT_08007138);\n  initialize_pointer(PTR_DAT_0800713c);\n  initialize_pointer(PTR_DAT_08007140);\n  initialize_pointer(PTR_DAT_08007144);\n  initialize_pointer(PTR_DAT_08007148);\n  initialize_pointer(PTR_DAT_0800714c);\n  initialize_pointer(PTR_DAT_08007150);\n  initialize_pointer(PTR_DAT_08007154);\n  initialize_pointer(PTR_DAT_08007158);\n  function_pointer();\n}\n\nvoid initialize_pointer(int *pointer)\n{\n  if (*pointer < 0)\n  {\n    *pointer = 1;\n  }\n}",
            "called": [
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007090",
            "calling": [
                "FUN_080060d4"
            ],
            "imported": false,
            "current_name": "initialize_pointers_and_call_function_08007090"
        },
        "FUN_0800492c": {
            "renaming": {
                "FUN_0800492c": "get_shifted_integer_value_0800492c",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "iVar1": "shifted_value",
                "uVar2": "masked_value"
            },
            "code": "uint get_shifted_integer_value_0800492c(undefined4 input_param_1, undefined4 input_param_3, undefined4 input_param_4)\n{\n  int shifted_value = FUN_08004cce(input_param_1, PTR_DAT_08004944, input_param_3, input_param_4, input_param_4);\n  uint masked_value = (uint)(shifted_value << 0xc) >> 0x1b;\n  if (masked_value > 0x10) {\n    masked_value = 0;\n  }\n  return masked_value;\n}",
            "called": [
                "FUN_08004cce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800492c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "get_shifted_integer_value_0800492c"
        },
        "FUN_0800480a": {
            "renaming": {
                "FUN_0800480a": "set_bit_0800480a",
                "param_1": "bit_index",
                "param_2": "array",
                "uVar1": "index",
                "*(uint *)(param_2 + uVar1 * 4)": "target",
                "*(uint *)(param_2 + uVar1 * 4) | 1 << (param_1 & 0xf)": "*target = *target | 1 << (bit_index & 0xf)"
            },
            "code": "void set_bit_0800480a(uint bit_index, int* array){\n  uint index = (bit_index << 0x18) >> 0x1c;\n  uint* target = (uint*)(array + index * 4);\n  *target = *target | 1 << (bit_index & 0xf);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800480a",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "set_bit_0800480a"
        },
        "FUN_080015f8": {
            "renaming": {
                "FUN_080015f8": "improved_function_080015f8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result_of_FUN_080015b2",
                "uVar2": "return_value",
                "uVar3": "temp_value",
                "uVar4": "temp_value2",
                "uVar5": "temp_value3"
            },
            "code": "typedef unsigned int uint; typedef unsigned long long ulonglong; \n\nulonglong improved_function_080015f8(uint param1, int param2, uint param3, uint param4)\n{\n    uint uVar1 = FUN_080015b2();\n    ulonglong uVar2 = (ulonglong)DAT_0800169c << 0x20 | DAT_08001698;\n\n    if ((uVar1 & 0x10000) == 0)\n    {\n        uint uVar3 = uVar1 >> 0x12;\n        ulonglong uVar4 = FUN_0800040c(uVar3 & 0x1fff);\n\n        if ((uVar3 & 0x2000) != 0)\n        {\n            uint uVar5 = FUN_0800040c(~uVar3 & 0x1fff);\n            uVar4 = FUNC_08000194((int)uVar5, (int)(uVar5 >> 0x20), 0, DAT_080016a0, param4);\n            uVar4 = (uVar4 & 0xffffffff) | ((ulonglong)((int)(uVar4 >> 0x20) + 0x80000000) << 0x20);\n        }\n\n        uVar2 = FUNC_080004f8((int)uVar4, (int)(uVar4 >> 0x20), 0, DAT_080016a4);\n\n        if (param2 == 1)\n        {\n            uVar2 = FUNC_080004f8((int)uVar2, (int)(uVar2 >> 0x20), 0, DAT_080016a8);\n            uVar2 = FUNC_0800074c((int)uVar2, (int)(uVar2 >> 0x20), 0, DAT_080016ac);\n            uVar2 = FUNC_08000194((int)uVar2, (int)(uVar2 >> 0x20), 0, DAT_080016b0);\n            return uVar2;\n        }\n    }\n    else\n    {\n        uint uVar3 = uVar1 & 7;\n\n        if (uVar3 == 2)\n        {\n            return (ulonglong)DAT_0800168c << 0x20 | DAT_08001688;\n        }\n\n        if (uVar3 == 4)\n        {\n            return (ulonglong)DAT_08001694 << 0x20 | DAT_08001690;\n        }\n\n        if (uVar3 == 1)\n        {\n            return uVar2;\n        }\n\n        return 0;\n    }\n}",
            "called": [
                "FUN_0800040c",
                "FUN_08000194",
                "FUN_080004f8",
                "FUN_0800074c",
                "FUN_080015b2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015f8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "improved_function_080015f8"
        },
        "FUN_08005c38": {
            "renaming": {
                "FUN_08005c38": "check_params_and_call_function_08005c38",
                "param_1": "first_parameter",
                "param_2": "second_parameter",
                "PTR_DAT_08005c60": "PTR_FUNCTION_ADDRESS",
                "FUN_08005c1c": "call_function_with_zero_params"
            },
            "code": "void check_params_and_call_function_08005c38(int param_1, int param_2)\n{\n    if ((param_1 == 1) && (param_2 == 0xffff)) {\n        call_function_with_zero_params(PTR_DAT_08005c60, 0, 0, 0, 0);\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_08005c1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c38",
            "calling": [],
            "imported": false,
            "current_name": "check_params_and_call_function_08005c38"
        },
        "FUN_08005f8c": {
            "renaming": {
                "FUN_08005f8c": "count_bits_set_08005f8c",
                "param_1": "num",
                "cVar1": "bit_count"
            },
            "code": "char count_bits_set_08005f8c(uint num) {\n  char bit_count = 0;\n  while (num != 1) {\n    bit_count++;\n    num = num >> 1;\n  }\n  return bit_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f8c",
            "calling": [
                "FUN_080060e4"
            ],
            "imported": false,
            "current_name": "count_bits_set_08005f8c"
        },
        "FUN_08006f5a": {
            "renaming": {
                "FUN_08006f5a": "process_data_08006f5a",
                "param_1": "result",
                "param_2": "data_ptr",
                "param_3": "arg1",
                "param_4": "arg2",
                "sVar1": "data_value",
                "puVar2": "ptr",
                "iVar3": "function_result"
            },
            "code": "void process_data_08006f5a(int *result, int data_ptr, int arg1, int arg2) {\n    \n    short data_value = *(short *)(data_ptr + 0xe);\n    \n    if ((int)((uint)*(ushort *)(data_ptr + 0xc) << 0x17) < 0) {\n        FUN_08007048(result, data_value, 0, 2);\n    }\n    \n    *(ushort *)(data_ptr + 0xc) = *(ushort *)(data_ptr + 0xc) & 0xefff;\n    \n    undefined *ptr = PTR_DAT_08006fe0;\n    *(undefined4 *)PTR_DAT_08006fe0 = 0;\n    int function_result = FUN_08005730((int)data_value, arg1, arg2, arg2, arg2, unaff_r4, unaff_r5, in_lr);\n    \n    if ((function_result == -1) && (*(int *)ptr != 0)) {\n        *result = *(int *)ptr;\n    }\n    return;\n}",
            "called": [
                "FUN_08007048",
                "FUN_08005730"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f5a",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08006f5a"
        },
        "FUN_08000b08": {
            "renaming": {
                "FUN_08000b08": "initialize_08000b08",
                "param_1": "arg1",
                "param_2": "arg2",
                "PTR_DAT_08000b9c": "data_ptr1",
                "PTR_DAT_08000b98": "data_ptr2",
                "PTR_DAT_08000b94": "data_ptr3",
                "PTR_DAT_08000b90": "data_ptr4",
                "*(undefined4 *)PTR_DAT_08000b8c": "*data_ptr5",
                "*(undefined4 *)(PTR_DAT_08000b8c + 4)": "*(data_ptr5 + 4)",
                "*(undefined4 *)PTR_DAT_08000b88": "*data_ptr6",
                "*(undefined4 *)(PTR_DAT_08000b88 + 4)": "*(data_ptr6 + 4)",
                "*(undefined4 *)PTR_DAT_08000b84": "*data_ptr7",
                "*(undefined4 *)(PTR_DAT_08000b84 + 4)": "*(data_ptr7 + 4)",
                "PTR_DAT_08000bb8": "data_ptr8",
                "*PTR_DAT_08000ba0": "*data_ptr9",
                "*PTR_DAT_08000ba4": "*data_ptr10",
                "*PTR_DAT_08000ba8": "*data_ptr11",
                "*PTR_DAT_08000bac": "*data_ptr12",
                "*PTR_DAT_08000bb0": "*data_ptr13",
                "*PTR_DAT_08000bb4": "*data_ptr14",
                "PTR_DAT_08000bc8": "data_ptr15",
                "*PTR_DAT_08000bc4": "*data_ptr16",
                "*PTR_DAT_08000bc0": "*data_ptr17",
                "*PTR_DAT_08000bbc": "*data_ptr18"
            },
            "code": "void initialize_08000b08(int arg1, int arg2)\n{\n  if ((arg1 == 1) && (arg2 == 0xffff)) {\n    setup_data_structures(PTR_DAT_08000b9c, PTR_DAT_08000b98, PTR_DAT_08000b94, PTR_DAT_08000b90,\n                 *(undefined4 *)PTR_DAT_08000b8c,*(undefined4 *)(PTR_DAT_08000b8c + 4),\n                 *(undefined4 *)PTR_DAT_08000b88,*(undefined4 *)(PTR_DAT_08000b88 + 4),\n                 *(undefined4 *)PTR_DAT_08000b84,*(undefined4 *)(PTR_DAT_08000b84 + 4),0);\n    initialize_08000b08_data(PTR_DAT_08000bb8,*PTR_DAT_08000ba0,*PTR_DAT_08000ba4,*PTR_DAT_08000ba8,\n                 *PTR_DAT_08000bac,*PTR_DAT_08000bb0,*PTR_DAT_08000bb4);\n    setup_network(PTR_DAT_08000bc8,*PTR_DAT_08000bc4,*PTR_DAT_08000bc0,*PTR_DAT_08000bbc);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_0800157c",
                "FUN_08001510",
                "FUN_08001b18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b08",
            "calling": [],
            "imported": false,
            "current_name": "initialize_08000b08"
        },
        "FUN_08006cb4": {
            "renaming": {
                "FUN_08006cb4": "initialize_08006cb4",
                "param_1": "param",
                "uVar1": "result",
                "iVar2": "ptr",
                "bVar3": "isPtrEqualParam"
            },
            "code": "void initialize_08006cb4(int param)\n{\n    undefined4 result;\n    int ptr;\n    bool isPtrEqualParam;\n    \n    if (*(int *)(param + 0x18) == 0) {\n        *(undefined4 *)(param + 0x48) = 0;\n        *(undefined4 *)(param + 0x4c) = 0;\n        *(undefined4 *)(param + 0x50) = 0;\n        ptr = *(int *)PTR_PTR_DAT_08006d0c;\n        *(undefined **)(param + 0x28) = PTR_LAB_08006c34_1_08006d10;\n        isPtrEqualParam = param == ptr;\n        if (isPtrEqualParam) {\n            ptr = 1;\n        }\n        if (isPtrEqualParam) {\n            *(int *)(param + 0x18) = ptr;\n        }\n        result = FUN_08006d14();\n        *(undefined4 *)(param + 4) = result;\n        result = FUN_08006d14(param);\n        *(undefined4 *)(param + 8) = result;\n        result = FUN_08006d14(param);\n        *(undefined4 *)(param + 0xc) = result;\n        FUN_08006c40(*(undefined4 *)(param + 4),4,0);\n        FUN_08006c40(*(undefined4 *)(param + 8),9,1);\n        FUN_08006c40(*(undefined4 *)(param + 0xc),0x12,2);\n        *(undefined4 *)(param + 0x18) = 1;\n    }\n    return;\n}",
            "called": [
                "FUN_08006d14",
                "FUN_08006c40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006cb4",
            "calling": [
                "FUN_08006be0",
                "FUN_08006d14",
                "FUN_080069e4",
                "FUN_08006344",
                "FUN_080068f0",
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "initialize_08006cb4"
        },
        "FUN_08004c5e": {
            "renaming": {
                "FUN_08004c5e": "find_value_in_array_08004c5e",
                "param_1": "value_to_find",
                "param_2": "array",
                "*param_2": "*array",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "int find_value_in_array_08004c5e(int value_to_find, char* array){\n                      while(true){\n                        if(*array == -1){\n                          return 0;\n                        }\n                        if(*array == value_to_find){\n                          break;\n                        }\n                        array += 12;\n                      }\n                      return *(int*)(array + 4);\n                    }",
            "called": [
                "FUN_08004c5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c5e",
            "calling": [
                "FUN_08004c5e",
                "FUN_08004c78"
            ],
            "imported": false,
            "current_name": "find_value_in_array_08004c5e"
        },
        "FUN_08004b3c": {
            "renaming": {
                "FUN_08004b3c": "process_data_08004b3c",
                "param_1": "data",
                "local_50": "data_array",
                "FUN_08004c78": "calculate_value",
                "PTR_DAT_08004b90": "DATA_PTR_08004b90",
                "FUN_08004948": "check_data",
                "uVar2": "flags",
                "FUN_08004cce": "get_flags",
                "FUN_080040b0": "process_data_type1",
                "FUN_0800412c": "process_data_type2",
                "FUN_08003ed8": "cleanup_data",
                "iVar1": "result"
            },
            "code": "void process_data_08004b3c(int data)\n{\n  int result;\n  uint flags;\n  int data_array [17];\n  \n  data_array[0] = calculate_value(data, PTR_DAT_08004b90);\n  if ((data_array[0] != 0) &&\n     ((((result = check_data(data), result == 0 || (result == 4)) || (result == 8)) ||\n      ((result == 0xc || (result == 0x18)))))) {\n    flags = get_flags(data, PTR_DAT_08004b90);\n    if ((flags & 0x100000) == 0) {\n      process_data_08004b3c_type1(data_array, result);\n    }\n    else {\n      process_data_08004b3c_type2(data_array, result);\n    }\n    cleanup_data(data_array);\n  }\n  return;\n}",
            "called": [
                "FUN_08004948",
                "FUN_0800412c",
                "FUN_080040b0",
                "FUN_08004cce",
                "FUN_08003ed8",
                "FUN_08004c78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b3c",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "process_data_08004b3c"
        },
        "FUN_08001550": {
            "renaming": {
                "FUN_08001550": "print_bytes_at_address_08001550",
                "param_1": "address",
                "param_2": "size",
                "param_3": "offset",
                "iVar1": "i",
                "FUN_08001310": "print_hexdump",
                "byte_ptr": "byte_pointer"
            },
            "code": "void print_bytes_at_address_08001550(uint8_t *address, uint size, int offset)\n{\n  uint8_t *byte_ptr;\n  uint i;\n  byte_ptr = address;\n  print_hexdump(byte_ptr, (size & 7) << 3 | 0x40, 0);\n  for (i = 0; i < 8; i++) {\n    (**(void (**)(uint8_t *, uint8_t))(byte_ptr))(byte_ptr, *(uint8_t *)(offset + i));\n  }\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001550",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "print_bytes_at_address_08001550"
        },
        "FUN_08000cd0": {
            "renaming": {
                "FUN_08000cd0": "FUNC_08000cd0"
            },
            "code": "\nvoid FUNC_08000cd0(void)\n\n{\n  char cVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  uint uVar5;\n  undefined4 uVar6;\n  int iVar7;\n  undefined4 extraout_r1;\n  undefined4 extraout_r1_00;\n  undefined4 extraout_r1_01;\n  undefined4 uVar8;\n  undefined8 uVar9;\n  \n  uVar5 = FUN_080058e0();\n  if (*(uint *)PTR_DAT_08000f50 < uVar5) {\n    *(uint *)PTR_DAT_08000f50 = *(uint *)PTR_DAT_08000f50 + 1000;\n    uVar9 = FUN_080015f8(PTR_DAT_08000f74,0);\n    uVar8 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar6 = (undefined4)uVar9;\n    *(undefined8 *)PTR_DAT_08000f6c = uVar9;\n    iVar7 = FUN_080009c8(uVar6,uVar8,DAT_08000f18,DAT_08000f1c);\n    if (((iVar7 != 0) || (iVar7 = FUN_080009c8(uVar6,uVar8,DAT_08000f20,DAT_08000f24), iVar7 != 0))\n       || (iVar7 = FUN_080009c8(uVar6,uVar8,DAT_08000f28,DAT_08000f2c), iVar7 != 0)) {\n      *PTR_DAT_08000f64 = 7;\n      *PTR_DAT_08000f58 = 0;\n    }\n  }\n  uVar5 = FUN_080058e0();\n  if (*(uint *)PTR_DAT_08000f54 < uVar5) {\n    *(uint *)PTR_DAT_08000f54 = *(uint *)PTR_DAT_08000f54 + 1000;\n    if (*PTR_DAT_08000f58 == '\\x01') {\n      uVar8 = *(undefined4 *)PTR_DAT_08000f5c;\n      uVar6 = FUN_08005890(uVar8);\n      uVar5 = count_leading_zeroes(uVar6);\n      FUN_08005848(uVar8,uVar5 >> 5);\n      iVar7 = *(int *)PTR_DAT_08000f78;\n      *(int *)PTR_DAT_08000f78 = iVar7 + 1;\n      puVar2 = PTR_DAT_08000f7c;\n      FUN_08005d82(PTR_DAT_08000f7c,iVar7 + 1,10);\n      puVar3 = PTR_DAT_08000f80;\n      FUN_08005c96(puVar2,PTR_DAT_08000f80);\n      FUN_08005f2c(puVar2,extraout_r1,*(undefined4 *)PTR_DAT_08000f84,\n                   *(undefined4 *)(PTR_DAT_08000f84 + 4),2);\n      FUN_08005c96(puVar2,puVar3);\n      FUN_08005f2c(puVar2,extraout_r1_00,*(undefined4 *)PTR_DAT_08000f6c,\n                   *(undefined4 *)(PTR_DAT_08000f6c + 4),2);\n      FUN_08005c96(puVar2,puVar3);\n      FUN_08005f40(puVar2,extraout_r1_01,*(undefined4 *)PTR_DAT_08000f88,\n                   *(undefined4 *)(PTR_DAT_08000f88 + 4),2);\n    }\n    else {\n      FUN_08005848(*(undefined4 *)PTR_DAT_08000f5c,1);\n    }\n    puVar2 = PTR_DAT_08000f60;\n    FUN_0800135a(PTR_DAT_08000f60);\n    puVar4 = PTR_DAT_08000f64;\n    FUN_08005c96(puVar2,*(undefined4 *)\n                         (PTR_PTR_s_Ready_08000f68 + (uint)(byte)*PTR_DAT_08000f64 * 4));\n    FUN_08001366(puVar2,0,1);\n    puVar3 = PTR_DAT_08000f60;\n    if (*puVar4 == '\\a') {\n      FUN_08005c96(puVar2,PTR_s_TC_Error__08000f8c);\n    }\n    else {\n      FUN_08005f2c(PTR_DAT_08000f60,2,*(undefined4 *)PTR_DAT_08000f6c,\n                   *(undefined4 *)(PTR_DAT_08000f6c + 4),2);\n      FUN_0800134e(puVar3,0);\n      FUN_08005c96(puVar3,PTR_DAT_08000f70);\n    }\n  }\n  if ((byte)*PTR_DAT_08000f64 < 8) {\n                    /* WARNING: Could not recover jumptable at 0x08000d5c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_08000d5c::switchdataD_08000d60 +\n              (&switchD_08000d5c::switchdataD_08000d60)[(byte)*PTR_DAT_08000f64]))();\n    return;\n  }\n  if ((*PTR_DAT_08001274 == '\\x01') && (*PTR_DAT_0800126c == '\\x01')) {\n    *PTR_DAT_0800126c = 0;\n    *PTR_DAT_08001258 = 0;\n  }\n  cVar1 = *PTR_DAT_08001278;\n  if (cVar1 == '\\x01') {\n    iVar7 = FUN_08005754(*(undefined4 *)PTR_DAT_08001280);\n    if (iVar7 == 0) {\n      iVar7 = FUN_080058e0();\n      if (0x32 < (uint)(iVar7 - *(int *)PTR_DAT_08001284)) {\n        *PTR_DAT_08001278 = 2;\n      }\n    }\n    else {\n      *PTR_DAT_08001278 = 0;\n    }\n  }\n  else if (cVar1 == '\\0') {\n    *PTR_DAT_08001274 = 0;\n    iVar7 = FUN_08005754(*(undefined4 *)PTR_DAT_08001280);\n    if (iVar7 == 0) {\n      uVar6 = FUN_080058e0();\n      *(undefined4 *)PTR_DAT_08001284 = uVar6;\n      *PTR_DAT_08001278 = 1;\n    }\n  }\n  else if ((cVar1 == '\\x02') && (iVar7 = FUN_08005754(*(undefined4 *)PTR_DAT_08001280), iVar7 != 0))\n  {\n    *PTR_DAT_08001274 = 1;\n    *PTR_DAT_08001278 = 0;\n  }\n  if (*PTR_DAT_0800126c == '\\x01') {\n    iVar7 = FUN_080058e0();\n    FUN_080016b4(PTR_DAT_08001250);\n    if (*(uint *)PTR_DAT_0800128c < (uint)(iVar7 - *(int *)PTR_DAT_08001288)) {\n      *(uint *)PTR_DAT_08001288 = *(int *)PTR_DAT_08001288 + *(uint *)PTR_DAT_0800128c;\n    }\n    uVar9 = FUN_0800040c(iVar7 - *(int *)PTR_DAT_08001288);\n    iVar7 = FUN_080009dc((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),*(undefined4 *)PTR_DAT_08001290,\n                         *(undefined4 *)(PTR_DAT_08001290 + 4));\n    if (iVar7 == 0) {\n      FUN_08005848(*(undefined4 *)PTR_DAT_0800127c,0);\n    }\n    else {\n      FUN_08005848(*(undefined4 *)PTR_DAT_0800127c,1);\n    }\n  }\n  else {\n    FUN_08005848(*(undefined4 *)PTR_DAT_0800127c,0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08005f2c",
                "FUN_08000a04",
                "FUN_08000a18",
                "FUN_08005f40",
                "FUN_0800134e",
                "FUN_0800135a",
                "FUN_0800040c",
                "FUN_08005c96",
                "FUN_08005890",
                "FUN_08005d82",
                "FUN_08001960",
                "FUN_0800042c",
                "FUN_080058e0",
                "FUN_08005cd4",
                "FUN_08001a44",
                "FUN_08001918",
                "FUN_080018f8",
                "FUN_080009c8",
                "FUN_080009f0",
                "FUN_080015f8",
                "FUN_08005754",
                "FUN_08001366",
                "FUN_080009dc",
                "FUN_080016b4",
                "FUN_08000194",
                "FUN_08005848"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cd0",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "FUNC_08000cd0"
        },
        "FUN_08001310": {
            "renaming": {
                "FUN_08001310": "process_data_08001310",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "param_3",
                "param_4": "param_4",
                "FUN_08005848": "send_data",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void process_data_08001310(int data_ptr, uint32_t data_size, uint32_t param_3, uint32_t param_4)\n{\n  send_data(*(uint8_t *)(data_ptr + 8), param_3, param_3, param_4, param_4);\n  if (*(char *)(data_ptr + 9) != -1) {\n    send_data(*(char *)(data_ptr + 9), 0);\n  }\n  if ((*(uint8_t *)(data_ptr + 0x13) & 0x10) == 0) {\n    process_data_08001310_part(data_ptr, data_size >> 4);\n    process_data_08001310_part(data_ptr, data_size);\n    return;\n  }\n  process_data_08001310_whole(data_ptr, data_size);\n  return;\n}",
            "called": [
                "FUN_080012c0",
                "FUN_080012e8",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001310",
            "calling": [
                "FUN_0800138e",
                "FUN_08001550",
                "FUN_0800134e",
                "FUN_08001366",
                "FUN_0800135a",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "process_data_08001310"
        },
        "FUN_080009a8": {
            "renaming": {
                "FUN_080009a8": "swap_arguments_and_call_function_080009a8",
                "param_1": "argument_1",
                "param_2": "argument_2",
                "param_3": "argument_3",
                "param_4": "argument_4",
                "FUN_080009b8": "call_function_with_swapped_arguments"
            },
            "code": "void swap_arguments_and_call_function_080009a8(undefined4 argument_3, undefined4 argument_4, undefined4 argument_1, undefined4 argument_2) {\n  call_function_with_swapped_arguments(argument_3, argument_4, argument_1, argument_2);\n  return;\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009a8",
            "calling": [
                "FUN_08000a04",
                "FUN_08000a18"
            ],
            "imported": false,
            "current_name": "swap_arguments_and_call_function_080009a8"
        },
        "FUN_08004d90": {
            "renaming": {
                "FUN_08004d90": "set_bits_based_on_input_08004d90",
                "param_1": "input",
                "DAT_08004de4": "INPUT_A",
                "DAT_08004df0": "data_ptr",
                "DAT_08004df0 + 0x18": "data_ptr[3]",
                "DAT_08004df0 + 0x1c": "data_ptr[4]",
                "0x40000000": "INPUT_B",
                "DAT_08004de8": "INPUT_C",
                "DAT_08004dec": "INPUT_D"
            },
            "code": "void set_bits_based_on_input_08004d90(int *input)\n{\n    uint32_t *DAT_08004df0 = (uint32_t *)DAT_08004df0;\n    if (*input == DAT_08004de4)\n    {\n        DAT_08004df0 + 0x18 &= ~(1 << 11);\n    }\n    if (*input == INPUT_B)\n    {\n        DAT_08004df0 + 0x18 &= ~1;\n    }\n    if (*input == DAT_08004de8)\n    {\n        DAT_08004df0 + 0x18 &= ~2;\n    }\n    if (*input == DAT_08004dec)\n    {\n        DAT_08004df0 + 0x18 &= ~4;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d90",
            "calling": [
                "FUN_08004b34"
            ],
            "imported": false,
            "current_name": "set_bits_based_on_input_08004d90"
        },
        "FUN_08005ce8": {
            "renaming": {
                "FUN_08005ce8": "convert_base_08005ce8",
                "param_1": "number",
                "param_2": "base",
                "param_3": "digits",
                "uVar2": "converted_number",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "current_digit",
                "cVar1": "digit",
                "local_15": "reversed_digits"
            },
            "code": "int convert_base_08005ce8(int *number, uint base, uint digits)\n{\n  char digit;\n  int converted_number = 0;\n  char reversed_digits[9];\n  reversed_digits[1] = 0;\n  if ((int)digits < 2) {\n    digits = 10;\n  }\n  char *current_digit = reversed_digits + 1;\n  do {\n    uint quotient = base / digits;\n    uint remainder = (base & 0xff) - (quotient * digits & 0xff) & 0xff;\n    current_digit = current_digit + -1;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit = digit + '0';\n    }\n    else {\n      digit = digit + '7';\n    }\n    *current_digit = digit;\n    base = quotient;\n  } while (quotient != 0);\n  if (current_digit == (char *)0x0) {\n    converted_number = 0;\n  }\n  else {\n    converted_number = atoi(current_digit);\n    converted_number = (**(code **)(*number + 4))(number,current_digit,converted_number);\n  }\n  return converted_number;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005ce8",
            "calling": [
                "FUN_08005d8a",
                "FUN_08005d42"
            ],
            "imported": false,
            "current_name": "convert_base_08005ce8"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "process_data_0800316c",
                "param_1": "data",
                "iVar1": "index",
                "puVar2": "previous_data",
                "puVar3": "current_data"
            },
            "code": "void process_data_0800316c(uint **data)\n{\n  int index;\n  uint *current_data;\n  uint *previous_data;\n  \n  if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n    data[12] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)data + 0x3d) != '`') && (((*data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n    }\n    data[12] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3e) = 0;\n  }\n  **data = **data & 0xfffff7ff;\n  current_data = *data;\n  if ((current_data[1] & 0x800) == 0) {\n    if (*(char *)((int)data + 0x3d) == '`') {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[16] = (uint *)0x0;\n      if ((current_data[5] & 0x40) != 0) {\n        previous_data = data[9];\n        data[9] = (uint *)((int)previous_data + 1);\n        *(char *)previous_data = (char)current_data[4];\n      }\n      **data = **data & 0xfffffffe;\n      do_nothing(data);\n    }\n    else {\n      if ((current_data[5] & 0x40) != 0) {\n        previous_data = data[9];\n        data[9] = (uint *)((int)previous_data + 1);\n        *(char *)previous_data = (char)current_data[4];\n      }\n      process_specific_data(data);\n    }\n  }\n  else {\n    current_data[1] = current_data[1] & 0xfffff7ff;\n    if (*(char *)((int)data[13] + 0x21) == '\\x01') {\n      data[14][13] = (uint)PTR_LAB_080035fc_1_080032ac;\n      index = get_index(data[14]);\n      if (index != 0) {\n        if (((*data)[5] & 0x40) != 0) {\n          previous_data = data[9];\n          data[9] = (uint *)((int)previous_data + 1);\n          *(char *)previous_data = (char)(*data)[4];\n        }\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[14][13])();\n      }\n    }\n    else {\n      data[13][13] = (uint)PTR_LAB_080035fc_1_080032ac;\n      index = get_index(data[13]);\n      if (index != 0) {\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[13][13])();\n      }\n    }\n  }\n  if ((*(char *)((int)data + 0x3d) == '(') && (((uint)data[16] & 4) != 0)) {\n    data[11] = DAT_080032b0;\n    data[12] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    process_other_data(data);\n  }\n  return;\n}",
            "called": [
                "FUN_08004ef4",
                "FUN_0800316a",
                "FUN_0800258c",
                "FUN_08004ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "FUN_08003520",
                "FUN_080032b4"
            ],
            "imported": false,
            "current_name": "process_data_0800316c"
        },
        "FUN_08004828": {
            "renaming": {
                "FUN_08004828": "update_bit_08004828",
                "param_1": "bit_position",
                "param_2": "array",
                "uVar1": "index",
                "*(uint *)(param_2 + uVar1 * 4)": "element",
                "mask": "mask"
            },
            "code": "void update_bit_08004828(uint bit_position, int* array) {\n    uint index = (bit_position << 0x18) >> 0x1c;\n    uint* element = (uint*)(array + index * 4);\n    uint mask = ~(1 << (bit_position & 0xf));\n    *element = *element & mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004828",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "update_bit_08004828"
        },
        "FUN_08003afa": {
            "renaming": {
                "FUN_08003afa": "handle_request_08003afa",
                "param_1": "flags",
                "param_2": "num_flags",
                "puVar1": "request_reg",
                "iVar2": "time_start",
                "iVar3": "time_diff",
                "uVar4": "request_val",
                "status_reg": "DAT_08003c38",
                "request_reg": "DAT_08003c34"
            },
            "code": "uint32_t handle_request_08003afa(uint32_t *flags, uint32_t num_flags)\n{\n  uint32_t *status_reg = DAT_08003c38;\n  uint32_t *request_reg = DAT_08003c34;\n  uint32_t request_num = num_flags & 7;\n  uint32_t request_val = 0;\n  uint32_t time_start = 0;\n  uint32_t time_diff = 0;\n  \n  if ((*flags & 2) != 0) {\n    status_reg[1] = (status_reg[1] & 0xffffff0f) | flags[2];\n  }\n  if ((*flags & 1) != 0) {\n    request_val = flags[1];\n    if (request_val == 1) {\n      if ((*status_reg & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((request_val != 2) && ((*status_reg & 2) == 0)) {\n      return 1;\n    }\n    status_reg[1] = request_val | (status_reg[1] & 0xfffffffc);\n    time_start = get_time();\n    if (request_val == 1) {\n      while ((status_reg[1] & 0xc) != 4) {\n        time_diff = get_time() - time_start;\n        if (time_diff > 5000) {\n          return 3;\n        }\n      }\n    }\n    else if (request_val == 2) {\n      while ((status_reg[1] & 0xc) != 8) {\n        time_diff = get_time() - time_start;\n        if (time_diff > 5000) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((status_reg[1] & 0xc) != 0) {\n        time_diff = get_time() - time_start;\n        if (time_diff > 5000) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((request_num < (*request_reg & 7)) && (*request_reg = (*request_reg & 0xfffffff8) | request_num, request_num != (*request_reg & 7))) {\n    return 1;\n  }\n  if ((*flags & 4) != 0) {\n    status_reg[1] = (status_reg[1] & 0xfffff8ff) | flags[3];\n  }\n  if ((*flags & 8) != 0) {\n    status_reg[1] = (status_reg[1] & 0xffffc7ff) | (flags[4] << 3);\n  }\n  request_val = handle_request_08003afa_internal();\n  *(uint32_t *)PTR_DAT_08003c40 = request_val >> PTR_DAT_08003c3c[(status_reg[1] << 0x18) >> 0x1c];\n  set_status(0xf);\n  return 0;\n}",
            "called": [
                "FUN_08003a68",
                "FUN_08001c3c",
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003afa",
            "calling": [
                "FUN_08003ad4"
            ],
            "imported": false,
            "current_name": "handle_request_08003afa"
        },
        "FUN_08004948": {
            "renaming": {
                "FUN_08004948": "determine_value_based_on_input_08004948",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "result",
                "uVar2": "shifted_result"
            },
            "code": "uint8_t determine_value_based_on_input_08004948(uint32_t input_1, uint32_t input_2, uint32_t input_3, uint32_t input_4) {\n    int result = calculate_value_based_on_input(input_1, PTR_DAT_08004970, input_3, input_4, input_4);\n    uint8_t shifted_result = (uint8_t) ((result << 12) >> 27);\n    if (shifted_result == 3) {\n        return 8;\n    }\n    if (shifted_result == 4) {\n        return 0xc;\n    }\n    if (shifted_result == 2) {\n        return 4;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004cce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004948",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "determine_value_based_on_input_08004948"
        },
        "FUN_0800316a": {
            "renaming": {
                "FUN_0800316a": "do_nothing_0800316a"
            },
            "code": "\nvoid do_nothing_0800316a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316a",
            "calling": [
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800316a"
        },
        "FUN_08005b24": {
            "renaming": {
                "FUN_08005b24": "set_value_at_offset_08005b24",
                "param_1": "offset",
                "param_2": "value",
                "uVar1": "value_to_set",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void set_value_at_offset_08005b24(int offset, uint value)\n{\n  undefined value_to_set;\n  code *jump_table;\n  if (value < 0x3c) {\n    value_to_set = PTR_DAT_08005b38[value];\n  }\n  else {\n    value_to_set = 0xff;\n  }\n  *(undefined *)(offset + 0x12d) = value_to_set;\n  (*jump_table)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b24",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_08005b24"
        },
        "FUN_080049f0": {
            "renaming": {
                "FUN_080049f0": "update_flags_080049f0",
                "param_1": "flag",
                "iVar1": "data"
            },
            "code": "void update_flags_080049f0(int *flag)\n{\n  int data = DAT_08004a48;\n  if (*flag != DAT_08004a40)\n  {\n    if (*flag == DAT_08004a44)\n    {\n      *(uint *)(DAT_08004a48 + 0xc) |= 0x400;\n      *(uint *)(data + 0xc) &= 0xfffffbff;\n      *(uint *)(data + 0x18) &= 0xfffffbff;\n      *(uint *)(data + 0x18) &= 0xfffffbff;\n    }\n    return;\n  }\n  *(uint *)(DAT_08004a48 + 0xc) |= 0x200;\n  *(uint *)(data + 0xc) &= 0xfffffdff;\n  *(uint *)(data + 0x18) &= 0xfffffdff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049f0",
            "calling": [
                "FUN_0800224c"
            ],
            "imported": false,
            "current_name": "update_flags_080049f0"
        },
        "FUN_08001e40": {
            "renaming": {
                "FUN_08001e40": "get_value_from_offset_4c_08001e40",
                "param_1": "base_address",
                "*param_1": "*base_address",
                "*(undefined4 *)(*param_1 + 0x4c)": "*target_address",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int get_value_from_offset_4c_08001e40(int *base_address) {\n    int offset = 0x4c;\n    int *target_address = base_address + offset;\n    int value = *target_address;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e40",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "get_value_from_offset_4c_08001e40"
        },
        "FUN_08003a68": {
            "renaming": {
                "FUN_08003a68": "calculate_result_08003a68",
                "uVar1": "result",
                "uVar2": "flags",
                "local_1c": "local_value",
                "abStack_18": "stack_array",
                "uStack_14": "stack_value_1",
                "uStack_10": "stack_value_2",
                "uStack_c": "stack_value_3"
            },
            "code": "uint calculate_result_08003a68(void)\n{\n  uint result;\n  uint flags;\n  undefined2 local_value;\n  byte stack_array[4];\n  undefined4 stack_value_1;\n  undefined4 stack_value_2;\n  undefined4 stack_value_3;\n  \n  stack_value_3 = *(undefined4 *)(PTR_DAT_08003ac4 + 8);\n  stack_value_2 = *(undefined4 *)(PTR_DAT_08003ac4 + 4);\n  stack_value_1 = *(undefined4 *)PTR_DAT_08003ac4;\n  local_value = *(undefined2 *)(PTR_DAT_08003ac4 + 0x10);\n  flags = *(uint *)(DAT_08003ac8 + 4);\n  result = DAT_08003ad0;\n  if ((flags & 0xc) == 8) {\n    if ((flags & 0x10000) == 0) {\n      result = DAT_08003acc * (uint)stack_array[(flags << 10) >> 0x1c];\n    }\n    else {\n      result = (DAT_08003ad0 * stack_array[(flags << 10) >> 0x1c]) /\n              (uint)*(byte *)((int)&local_value - ((*(int *)(DAT_08003ac8 + 4) << 0xe) >> 0x1f));\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a68",
            "calling": [
                "FUN_08003afa"
            ],
            "imported": false,
            "current_name": "calculate_result_08003a68"
        },
        "FUN_080012a2": {
            "renaming": {
                "FUN_080012a2": "print_twice_080012a2",
                "param_1": "data",
                "*(undefined *)(param_1 + 10)": "ptr",
                "FUN_08005848": "print_string"
            },
            "code": "void print_twice_080012a2(void* data)\n{\n    char* ptr = (char*)data;\n    print_string(ptr);\n    print_string(ptr);\n}\n",
            "called": [
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012a2",
            "calling": [
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "imported": false,
            "current_name": "print_twice_080012a2"
        },
        "FUN_08004c78": {
            "renaming": {
                "FUN_08004c78": "check_valid_input_08004c78",
                "param_1": "input",
                "uVar1": "result",
                "FUN_08004c5e": "get_result"
            },
            "code": "int check_valid_input_08004c78(int input) {\n  int result;\n  if (input != -1) {\n    result = get_result();\n    return result;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004c5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c78",
            "calling": [
                "FUN_08004b3c",
                "FUN_080053d4",
                "FUN_08005384",
                "FUN_08004a4c",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "check_valid_input_08004c78"
        },
        "FUN_08001e48": {
            "renaming": {
                "FUN_08001e48": "decode_data_08001e48",
                "param_1": "data_ptr",
                "param_2": "data_array",
                "uVar1": "result",
                "uVar2": "shift_value",
                "iVar3": "temp_var",
                "local_c": "i",
                "*param_1": "*data_ptr",
                "*param_2": "*data_array",
                "*(char *)(param_1 + 9)": "*(char *)(data_ptr + 9)",
                "*(undefined *)(param_1 + 9)": "*(undefined *)(data_ptr + 9)",
                "param_2[1]": "data_array_1",
                "param_2[0]": "data_array_0",
                "*(uint *)(*param_1 + 0x34)": "*(uint *)(*data_ptr + 52)",
                "*(uint *)(*param_1 + 0x30)": "*(uint *)(*data_ptr + 48)",
                "*(uint *)(*param_1 + 0x2c)": "*(uint *)(*data_ptr + 44)",
                "*(uint *)(*param_1 + 0x10)": "*(uint *)(*data_ptr + 16)",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*data_ptr + 12)",
                "*(uint *)(iVar3 + 8)": "*(uint *)(temp_var + 8)",
                "DAT_08001f74": "DAT_08001f74",
                "*(uint *)(iVar3 + 8) & 0x800000": "*(uint *)(temp_var + 8) & 0x800000",
                "DAT_08001f7c": "DAT_08001f7c",
                "* (ulonglong) *(uint *) PTR_DAT_08001f78 >> 0x32": "(uint)((ulonglong)DAT_08001f7c * (ulonglong)*(uint *)PTR_DAT_08001f78 >> 0x32)"
            },
            "code": "int decode_data_08001e48(int *data_ptr, uint *data_array) {\n    int result;\n    uint shift_value;\n    int temp_var;\n    if (*(char *)(data_ptr + 9) == 1) {\n        result = 2;\n    }\n    else {\n        *(undefined *)(data_ptr + 9) = 1;\n        uint data_array_1 = data_array[1];\n        if (data_array_1 < 7) {\n            shift_value = data_array_1 * 5 - 5;\n            *(uint *)(*data_ptr + 52) = data_array[0] << (shift_value & 0xff) | *(uint *)(*data_ptr + 52) & ~(0x1f << (shift_value & 0xff));\n        }\n        else if (data_array_1 < 13) {\n            shift_value = data_array_1 * 5 - 35;\n            *(uint *)(*data_ptr + 48) = data_array[0] << (shift_value & 0xff) | *(uint *)(*data_ptr + 48) & ~(0x1f << (shift_value & 0xff));\n        }\n        else {\n            shift_value = data_array_1 * 5 - 65;\n            *(uint *)(*data_ptr + 44) = data_array[0] << (shift_value & 0xff) | *(uint *)(*data_ptr + 44) & ~(0x1f << (shift_value & 0xff));\n        }\n        uint data_array_0 = data_array[0];\n        if (data_array_0 < 10) {\n            *(uint *)(*data_ptr + 16) = data_array[2] << ((data_array_0 * 3) & 0xff) | *(uint *)(*data_ptr + 16) & ~(7 << ((data_array_0 * 3) & 0xff));\n        }\n        else {\n            shift_value = data_array_0 * 3 - 30;\n            *(uint *)(*data_ptr + 12) = data_array[2] << (shift_value & 0xff) | *(uint *)(*data_ptr + 12) & ~(7 << (shift_value & 0xff));\n        }\n        if (data_array[0] - 16 < 2) {\n            temp_var = *data_ptr;\n            if (temp_var == DAT_08001f74) {\n                if ((*(uint *)(temp_var + 8) & 0x800000) == 0) {\n                    *(uint *)(temp_var + 8) = *(uint *)(temp_var + 8) | 0x800000;\n                    if (data_array[0] == 16) {\n                        for (int i = * (ulonglong) *(uint *) PTR_DAT_08001f78 >> 0x32 * 10; i != 0; i = i - 1) {\n                        }\n                        result = 0;\n                    }\n                    else {\n                        result = 0;\n                    }\n                }\n                else {\n                    result = 0;\n                }\n            }\n            else {\n                data_ptr[10] = data_ptr[10] | 0x20;\n                result = 1;\n            }\n        }\n        else {\n            result = 0;\n        }\n        *(undefined *)(data_ptr + 9) = 0;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e48",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "decode_data_08001e48"
        },
        "FUN_080009b8": {
            "renaming": {
                "FUN_080009b8": "execute_function_080009b8",
                "param_1": "input_param",
                "FUN_0800092c": "initialize"
            },
            "code": "undefined4 execute_function_080009b8(undefined4 input_param)\n{\n  initialize();\n  return input_param;\n}",
            "called": [
                "FUN_0800092c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009b8",
            "calling": [
                "FUN_080009c8",
                "FUN_080009f0",
                "FUN_080009a8",
                "FUN_080009dc"
            ],
            "imported": false,
            "current_name": "execute_function_080009b8"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "convert_to_fixed_point_08000aa8",
                "param_1": "integer",
                "param_2": "fraction",
                "iVar1": "shifted_fraction",
                "uVar2": "exponent"
            },
            "code": "uint convert_to_fixed_point_08000aa8(uint integer, uint fraction){\n  int shifted_fraction = fraction * 2 + 0x200000;\n  if (fraction * 2 < 0xffe00000) {\n    if (shifted_fraction >= 0) {\n      return 0;\n    }\n    uint exponent = -(shifted_fraction >> 0x15) - 0x3e1;\n    if (exponent >= 0) {\n      return (fraction << 0xb | 0x80000000 | integer >> 0x15) >> (exponent & 0xff);\n    }\n  }\n  else if ((integer | fraction << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aa8",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "convert_to_fixed_point_08000aa8"
        },
        "FUN_08000a04": {
            "renaming": {
                "FUN_08000a04": "check_carry_or_zero_flag_08000a04",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag",
                "FUN_080009a8": "set_flags"
            },
            "code": "bool check_carry_or_zero_flag_08000a04(void)\n{\n  bool carry_flag;\n  bool zero_flag;\n  \n  set_flags();\n  return !carry_flag || zero_flag;\n}",
            "called": [
                "FUN_080009a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a04",
            "calling": [
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "check_carry_or_zero_flag_08000a04"
        },
        "FUN_0800010c": {
            "renaming": {
                "FUN_0800010c": "check_initialized_0800010c",
                "param_1": "data",
                "*PTR_DAT_08000124": "*is_initialized",
                "DAT_08000128": "global_data",
                "PTR_FUN_0800012c": "init_function_pointer"
            },
            "code": "int* check_initialized_0800010c(int* data){\n\tif (*PTR_DAT_08000124 == 0){\n\t\tif (DAT_08000128 != NULL){\n\t\t\tdata = PTR_FUN_0800012c;\n\t\t}\n\t\t*PTR_DAT_08000124 = 1;\n\t}\n\treturn data;\n}",
            "called": [
                "FUN_08007328"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": false,
            "current_name": "check_initialized_0800010c"
        },
        "FUN_08003f14": {
            "renaming": {
                "FUN_08003f14": "do_nothing_08003f14"
            },
            "code": "\nvoid do_nothing_08003f14(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f14",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f14"
        },
        "FUN_08001cac": {
            "renaming": {
                "FUN_08001cac": "calculateSumAndAssignToPtr_08001cac",
                "*PTR_DAT_08001cbc": "*ptrToSum",
                "*PTR_DAT_08001cc0": "*ptrToByte",
                "uint": "uint32_t",
                "byte": "uint8_t"
            },
            "code": "void calculateSumAndAssignToPtr_08001cac() {\n    uint8_t byteValue = *PTR_DAT_08001cc0;\n    uint32_t* ptrToInt = (uint32_t*)ptrToSum;\n    *ptrToInt = byteValue + *ptrToInt;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cac",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "calculateSumAndAssignToPtr_08001cac"
        },
        "FUN_08003f12": {
            "renaming": {
                "FUN_08003f12": "do_nothing_08003f12"
            },
            "code": "\nvoid do_nothing_08003f12(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f12",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f12"
        },
        "FUN_08005a18": {
            "renaming": {
                "FUN_08005a18": "check_and_call_function_08005a18",
                "DAT_08005a3c": "flag",
                "FUN_0800591e": "call_function",
                "PTR_DAT_08005a40": "pointer"
            },
            "code": "void check_and_call_function_08005a18(void)\n{\n  if (DAT_08005a3c != 0) {\n    call_function(PTR_DAT_08005a40);\n  }\n  return;\n}",
            "called": [
                "FUN_0800591e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a18",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "check_and_call_function_08005a18"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "check_flags_08003f18",
                "param_1": "flags",
                "iVar1": "value",
                "do_nothing_08003f14": "do_nothing",
                "do_nothing_08003f12": "do_nothing_2",
                "FUN_08004df8": "do_something_1",
                "FUN_08004e12": "do_something_3",
                "do_nothing_0800417a": "do_nothing_4",
                "do_nothing_08003f16": "do_nothing_5",
                "do_nothing_08004178": "do_nothing_6"
            },
            "code": "void check_flags_08003f18(int *flags) {\n    int value = *flags;\n    if (((*(uint *)(value + 0x10) & 2) != 0) && ((*(uint *)(value + 0xc) & 2) != 0)) {\n        *(undefined4 *)(value + 0x10) = 0xfffffffd;\n        *(undefined *)(flags + 7) = 1;\n        if ((*(uint *)(*flags + 0x18) & 3) == 0) {\n            do_something_1(flags);\n            do_nothing_08003f14(flags);\n        }\n        else {\n            do_nothing_08003f12(flags);\n        }\n        *(undefined *)(flags + 7) = 0;\n    }\n    value = *flags;\n    if (((*(uint *)(value + 0x10) & 4) != 0) && ((*(uint *)(value + 0xc) & 4) != 0)) {\n        *(undefined4 *)(value + 0x10) = 0xfffffffb;\n        *(undefined *)(flags + 7) = 2;\n        if ((*(uint *)(*flags + 0x18) & 0x300) == 0) {\n            do_something_1(flags);\n            do_nothing_08003f14(flags);\n        }\n        else {\n            do_nothing_08003f12(flags);\n        }\n        *(undefined *)(flags + 7) = 0;\n    }\n    value = *flags;\n    if (((*(uint *)(value + 0x10) & 8) != 0) && ((*(uint *)(value + 0xc) & 8) != 0)) {\n        *(undefined4 *)(value + 0x10) = 0xfffffff7;\n        *(undefined *)(flags + 7) = 4;\n        if ((*(uint *)(*flags + 0x1c) & 3) == 0) {\n            do_something_1(flags);\n            do_nothing_08003f14(flags);\n        }\n        else {\n            do_nothing_08003f12(flags);\n        }\n        *(undefined *)(flags + 7) = 0;\n    }\n    value = *flags;\n    if (((*(uint *)(value + 0x10) & 0x10) != 0) && ((*(uint *)(value + 0xc) & 0x10) != 0)) {\n        *(undefined4 *)(value + 0x10) = 0xffffffef;\n        *(undefined *)(flags + 7) = 8;\n        if ((*(uint *)(*flags + 0x1c) & 0x300) == 0) {\n            do_something_1(flags);\n            do_nothing_08003f14(flags);\n        }\n        else {\n            do_nothing_08003f12(flags);\n        }\n        *(undefined *)(flags + 7) = 0;\n    }\n    value = *flags;\n    if (((*(uint *)(value + 0x10) & 1) != 0) && ((*(uint *)(value + 0xc) & 1) != 0)) {\n        *(undefined4 *)(value + 0x10) = 0xfffffffe;\n        do_something_3(flags);\n    }\n    value = *flags;\n    if (((*(uint *)(value + 0x10) & 0x80) != 0) && ((*(uint *)(value + 0xc) & 0x80) != 0)) {\n        *(undefined4 *)(value + 0x10) = 0xffffff7f;\n        do_nothing_0800417a(flags);\n    }\n    value = *flags;\n    if (((*(uint *)(value + 0x10) & 0x40) != 0) && ((*(uint *)(value + 0xc) & 0x40) != 0)) {\n        *(undefined4 *)(value + 0x10) = 0xffffffbf;\n        do_nothing_08003f16(flags);\n    }\n    value = *flags;\n    if (((*(uint *)(value + 0x10) & 0x20) != 0) && ((*(uint *)(value + 0xc) & 0x20) != 0)) {\n        *(undefined4 *)(value + 0x10) = 0xffffffdf;\n        do_nothing_08004178(flags);\n    }\n}\n",
            "called": [
                "FUN_08003f12",
                "FUN_08004178",
                "FUN_08004df8",
                "FUN_08004e12",
                "FUN_08003f14",
                "FUN_08003f16",
                "FUN_0800417a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "FUN_08004e20"
            ],
            "imported": false,
            "current_name": "check_flags_08003f18"
        },
        "FUN_08003f16": {
            "renaming": {
                "FUN_08003f16": "do_nothing_08003f16"
            },
            "code": "\nvoid do_nothing_08003f16(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f16",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f16"
        },
        "FUN_0800591e": {
            "renaming": {
                "FUN_0800591e": "calculate_result_0800591e",
                "param_1": "input",
                "PTR_": "pointer_",
                "DAT_": "data_"
            },
            "code": "ushort calculate_result_0800591e(int input)\n{\n    ushort result = (*(ushort *)(input + 0x134) + 0x40) - (*(ushort *)(input + 0x136) & 0x3f);\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800591e",
            "calling": [
                "FUN_08005a18"
            ],
            "imported": false,
            "current_name": "calculate_result_0800591e"
        },
        "FUN_08002540": {
            "renaming": {
                "FUN_08002540": "set_bit_at_index_08002540",
                "param_1": "index",
                "DAT_0800255c": "word_base_address",
                "PTR_DAT_0800255c_00000060": "word_offset",
                "word_index": "word_index",
                "word_address": "word_address",
                "bit_index": "bit_index",
                "bit_mask": "bit_mask"
            },
            "code": "void set_bit_at_index_08002540(uint index) {\n  if (index >= 0) {\n    uint word_index = (index >> 5) + 0x60;\n    uint* word_address = (uint*)(DAT_0800255c + word_index * 4);\n    uint bit_index = index & 0x1f;\n    uint bit_mask = 1 << bit_index;\n    *word_address = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002540",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_at_index_08002540"
        },
        "FUN_08006344": {
            "renaming": {
                "FUN_08006344": "process_input_08006344",
                "param_1": "input_length",
                "param_2": "input_char",
                "param_3": "input_buffer",
                "iVar1": "index_1",
                "pbVar2": "buffer_ptr_1",
                "pbVar3": "buffer_ptr_2",
                "uVar4": "return_value"
            },
            "code": "unsigned int process_input_08006344(int input_length, unsigned char input_char, unsigned char **input_buffer)\n{\n    int index_1;\n    unsigned char *buffer_ptr_1;\n    unsigned char *buffer_ptr_2;\n    unsigned int return_value;\n\n    buffer_ptr_1 = *(input_buffer + 2) - 1;\n    *(input_buffer + 2) = buffer_ptr_1;\n    if ((buffer_ptr_1 >= 0) || ((*(input_buffer + 6) <= buffer_ptr_1) && (buffer_ptr_1 != (unsigned char *)0xa)))\n    {\n        buffer_ptr_1 = *input_buffer;\n        *input_buffer = buffer_ptr_1 + 1;\n        *buffer_ptr_1 = input_char;\n        return (unsigned int)input_char;\n    }\n    if ((input_length != 0) && (*(int *)(input_length + 0x18) == 0))\n    {\n        FUN_08006cb4();\n    }\n    if (input_buffer == (unsigned char **)PTR_DAT_080069d8)\n    {\n        input_buffer = *(unsigned char ***)(input_length + 4);\n    }\n    else if (input_buffer == (unsigned char **)PTR_DAT_080069dc)\n    {\n        input_buffer = *(unsigned char ***)(input_length + 8);\n    }\n    else if (input_buffer == (unsigned char **)PTR_DAT_080069e0)\n    {\n        input_buffer = *(unsigned char ***)(input_length + 0xc);\n    }\n    *(input_buffer + 2) = *(input_buffer + 6);\n    buffer_ptr_2 = (unsigned char *)(unsigned int)*(unsigned short *)(input_buffer + 3);\n    index_1 = (int)buffer_ptr_2 << 0x1c;\n    if (((index_1 < 0) && (buffer_ptr_2 = *(input_buffer + 4), buffer_ptr_2 != (unsigned char *)0x0)) || ((index_1 = FUN_080069e4(input_length, input_buffer, index_1, buffer_ptr_2, buffer_ptr_1), index_1 == 0)))\n    {\n        return_value = (unsigned int)input_char;\n        index_1 = (int)*input_buffer - (int)*(input_buffer + 4);\n        if ((index_1 < (int)*(input_buffer + 5)) || ((index_1 = FUN_08006be0(input_length, input_buffer), index_1 == 0)))\n        {\n            *(input_buffer + 2) = *(input_buffer + 2) - 1;\n            buffer_ptr_1 = *input_buffer;\n            *input_buffer = buffer_ptr_1 + 1;\n            *buffer_ptr_1 = input_char;\n            if ((unsigned char *)(index_1 + 1) != *(input_buffer + 5))\n            {\n                if (-1 < (int)((unsigned int)*(unsigned short *)(input_buffer + 3) << 0x1f))\n                {\n                    return return_value;\n                }\n                if (return_value != 10)\n                {\n                    return return_value;\n                }\n            }\n            index_1 = FUN_08006be0(input_length, input_buffer);\n            if (index_1 == 0)\n            {\n                return return_value;\n            }\n        }\n    }\n    return 0xffffffff;\n}\n",
            "called": [
                "FUN_08006be0",
                "FUN_080069e4",
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006344",
            "calling": [
                "FUN_08006370"
            ],
            "imported": false,
            "current_name": "process_input_08006344"
        },
        "FUN_080009c8": {
            "renaming": {
                "FUN_080009c8": "is_input_valid_080009c8",
                "in_ZR": "input_char",
                "FUN_080009b8": "call_function_to_validate_input"
            },
            "code": "bool is_input_valid_080009c8(void)\\n{\\n  char input_char;\\n  call_function_to_validate_input();\\n  return input_char != \"\\0\";\\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "is_input_valid_080009c8"
        },
        "FUN_08002db2": {
            "renaming": {
                "FUN_08002db2": "process_input_08002db2",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "ptr1"
            },
            "code": "uint32_t process_input_08002db2(uint32_t **input) {\n  char current_char;\n  uint32_t *ptr1;\n  uint32_t *ptr2;\n  \n  current_char = *(char *)((int)input + 0x3d);\n  ptr1 = input[0xb];\n  if ((*(short *)(input + 10) == 0) && (current_char == '!')) {\n    if ((ptr1 == (uint32_t *)0x4) || ((ptr1 == (uint32_t *)0x8 || (ptr1 == (uint32_t *)0xffff0000)))) {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      **input = **input | 0x200;\n      input[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      if (*(char *)((int)input + 0x3e) == '@') {\n        *(undefined *)((int)input + 0x3e) = 0;\n        do_nothing_08002db0();\n      }\n      else {\n        *(undefined *)((int)input + 0x3e) = 0;\n        do_nothing_08002c4e();\n      }\n    }\n    else {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      input[0xc] = (uint32_t *)0x11;\n      *(undefined *)((int)input + 0x3e) = 0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      do_nothing_08002c4e();\n    }\n  }\n  else if ((current_char == '!') || ((*(char *)((int)input + 0x3e) == '@' && (current_char == '\"')))) {\n    if (*(short *)((int)input + 0x2a) == 0) {\n      (*input)[1] = (*input)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)input + 0x3e) == '@') {\n      if (input[0x14] == (uint32_t *)0x0) {\n        if (input[0x13] == (uint32_t *)0x1) {\n          (*input)[4] = (uint32_t)input[0x12] & 0xff;\n          input[0x14] = (uint32_t *)((int)input[0x14] + 2);\n        }\n        else {\n          (*input)[4] = (uint32_t)((int)input[0x12] << 0x10) >> 0x18;\n          input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n        }\n      }\n      else if (input[0x14] == (uint32_t *)0x1) {\n        (*input)[4] = (uint32_t)input[0x12] & 0xff;\n        input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n      }\n      else if (input[0x14] == (uint32_t *)0x2) {\n        if (*(char *)((int)input + 0x3d) == '\"') {\n          **input = **input | 0x100;\n        }\n        else if (*(char *)((int)input + 0x3d) == '!') {\n          ptr1 = input[9];\n          input[9] = (uint32_t *)((int)ptr1 + 1);\n          (*input)[4] = (uint32_t)*(uint8_t *)ptr1;\n          *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      ptr1 = input[9];\n      input[9] = (uint32_t *)((int)ptr1 + 1);\n      (*input)[4] = (uint32_t)*(uint8_t *)ptr1;\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c4e",
                "FUN_08002db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_08002db2"
        },
        "FUN_08001cc4": {
            "renaming": {
                "FUN_08001cc4": "get_value_from_pointer_08001cc4",
                "PTR_DAT_08001ccc": "PTR_DATA_VALUE"
            },
            "code": "int get_value_from_pointer_08001cc4() {\n    int* value_pointer = (int*)PTR_DAT_08001ccc;\n    return *value_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cc4",
            "calling": [
                "FUN_080043b4",
                "FUN_080053d4",
                "FUN_08001cd0",
                "FUN_08003688",
                "FUN_08003afa",
                "FUN_080020f0",
                "FUN_08004b94",
                "FUN_08004478",
                "FUN_08002384",
                "FUN_08003c90",
                "FUN_08001f84"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08001cc4"
        },
        "FUN_08002db0": {
            "renaming": {
                "FUN_08002db0": "do_nothing_08002db0"
            },
            "code": "\nvoid do_nothing_08002db0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db0",
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "imported": false,
            "current_name": "do_nothing_08002db0"
        },
        "FUN_08003ea0": {
            "renaming": {
                "FUN_08003ea0": "handle_parameter_08003ea0",
                "param_1": "parameter",
                "**param_1": "first_parameter_dereferenced",
                "*param_1": "second_parameter_dereferenced",
                "(*param_1)[1]": "second_parameter_dereferenced_indexed",
                "DAT_08003ed4": "data_address"
            },
            "code": "void handle_parameter_08003ea0(uint **parameter) {\n    bool is_first_bit_set = (**parameter & 2) != 0;\n    bool is_second_bit_set = ((*parameter)[1] & 2) != 0;\n    if (is_first_bit_set && is_second_bit_set) {\n        call_function();\n        (*parameter)[1] = 0xfffffffd;\n    }\n    uint *data = (uint *)(DAT_08003ed4 + 0x14);\n    *data = 0x20000;\n    bool is_parameter_valid = (bool)(*parameter + 0x11);\n    is_parameter_valid = true;\n    return;\n}",
            "called": [
                "FUN_08004d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ea0",
            "calling": [],
            "imported": false,
            "current_name": "handle_parameter_08003ea0"
        },
        "FUN_0800306c": {
            "renaming": {
                "FUN_0800306c": "process_data_0800306c",
                "param_1": "data",
                "puVar1": "current_ptr",
                "param_1[0xb]": "data[11]",
                "*(short *)((int)param_1 + 0x2a)": "*(short *)((int)data + 42)",
                "uint *puVar1": "uint *current_ptr",
                "uint *)((int)puVar1 + 1)": "(uint *)((int)temp_ptr + 1)",
                "*(char *)puVar1": "*(char *)temp_ptr",
                "*(char *)((int)param_1 + 0x2a)": "*(short *)((int)data + 42)",
                "puVar1 = param_1[9]": "uint *temp_ptr = data[9]",
                "puVar1 = param_1[9];\n    param_1[9] = (uint *)((int)puVar1 + 1);\n    *(char *)puVar1 = (char)(*param_1)[4];\n    *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;": "temp_ptr = data[9];\n        data[9] = (uint *)((int)temp_ptr + 1);\n        *(char *)temp_ptr = (char)(*data)[4];\n        *(short *)((int)data + 42) = *(short *)((int)data + 42) + -1;",
                "puVar1 = param_1[9];\n    param_1[9] = (uint *)((int)puVar1 + 1);\n    *(char *)puVar1 = (char)(*param_1)[4];\n    *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n    puVar1 = param_1[9];\n    param_1[9] = (uint *)((int)puVar1 + 1);\n    *(char *)puVar1 = (char)(*param_1)[4];\n    *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n    *(undefined *)((int)param_1 + 0x3d) = 0x20;\n    param_1[0xc] = (uint *)0x0;\n    if (*(char *)((int)param_1 + 0x3e) == '@')\n    {\n        *(undefined *)((int)param_1 + 0x3e) = 0;\n        do_nothing_08002f9a();\n    }\n    else\n    {\n        *(undefined *)((int)param_1 + 0x3e) = 0;\n        do_nothing_08002c50();\n    }": "temp_ptr = data[9];\n        data[9] = (uint *)((int)temp_ptr + 1);\n        *(char *)temp_ptr = (char)(*data)[4];\n        *(short *)((int)data + 42) = *(short *)((int)data + 42) + -1;\n        temp_ptr = data[9];\n        data[9] = (uint *)((int)temp_ptr + 1);\n        *(char *)temp_ptr = (char)(*data)[4];\n        *(short *)((int)data + 42) = *(short *)((int)data + 42) + -1;\n        *(undefined *)((int)data + 61) = 0x20;\n        data[12] = (uint *)0x0;\n        if (*(char *)((int)data + 62) == '@')\n        {\n            *(undefined *)((int)data + 62) = 0;\n            do_nothing_08002f9a();\n        }\n        else\n        {\n            *(undefined *)((int)data + 62) = 0;\n            do_nothing_08002c50();\n        }"
            },
            "code": "int process_data_0800306c(uint **data)\n{\n    uint *current_ptr;\n    current_ptr = data[11];\n    if (*(short *)((int)data + 42) == 3)\n    {\n        if (((current_ptr == (uint *)0x4) || (current_ptr == (uint *)0x8)) || (current_ptr == (uint *)0xffff0000))\n        {\n            **data = **data & 0xfffffbff;\n        }\n        uint *temp_ptr = data[9];\n        data[9] = (uint *)((int)temp_ptr + 1);\n        *(char *)temp_ptr = (char)(*data)[4];\n        *(short *)((int)data + 42) = *(short *)((int)data + 42) + -1;\n    }\n    else if (*(short *)((int)data + 42) == 2)\n    {\n        if (((current_ptr == (uint *)0x4) || (current_ptr == (uint *)0x8)) || (current_ptr == (uint *)0xffff0000))\n        {\n            (*data)[1] = (*data)[1] & 0xfffffcff;\n            **data = **data | 0x200;\n        }\n        else\n        {\n            if (current_ptr == (uint *)0x2)\n            {\n                **data = **data | 0x400;\n            }\n            else\n            {\n                **data = **data & 0xfffffbff;\n            }\n            (*data)[1] = (*data)[1] & 0xfffffcff;\n        }\n        uint *temp_ptr = data[9];\n        data[9] = (uint *)((int)temp_ptr + 1);\n        *(char *)temp_ptr = (char)(*data)[4];\n        *(short *)((int)data + 42) = *(short *)((int)data + 42) + -1;\n        temp_ptr = data[9];\n        data[9] = (uint *)((int)temp_ptr + 1);\n        *(char *)temp_ptr = (char)(*data)[4];\n        *(short *)((int)data + 42) = *(short *)((int)data + 42) + -1;\n        *(undefined *)((int)data + 61) = 0x20;\n        data[12] = (uint *)0x0;\n        if (*(char *)((int)data + 62) == '@')\n        {\n            *(undefined *)((int)data + 62) = 0;\n            do_nothing_08002f9a();\n        }\n        else\n        {\n            *(undefined *)((int)data + 62) = 0;\n            do_nothing_08002c50();\n        }\n    }\n    else\n    {\n        uint *temp_ptr = data[9];\n        data[9] = (uint *)((int)temp_ptr + 1);\n        *(char *)temp_ptr = (char)(*data)[4];\n        *(short *)((int)data + 42) = *(short *)((int)data + 42) + -1;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002c50",
                "FUN_08002f9a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800306c",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_data_0800306c"
        },
        "FUN_0800548c": {
            "renaming": {
                "FUN_0800548c": "is_valid_input_0800548c",
                "param_1": "input_param",
                "uVar1": "result",
                "PTR_DAT_080054ac": "ptr_data",
                "byte": "byte_val",
                "calculate_result": "FUN_080047e8"
            },
            "code": "bool is_valid_input_0800548c(int input_param) {\n  uint32_t ptr_offset = *(uint32_t *)(PTR_DAT_080054ac + (uint32_t)*(uint8_t *)(input_param + 0x44) * 4);\n  uint32_t result = calculate_result(ptr_offset);\n  return (result & 0x22) == 0x22;\n}",
            "called": [
                "FUN_080047e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800548c",
            "calling": [
                "FUN_080054d4",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "is_valid_input_0800548c"
        },
        "FUN_08004848": {
            "renaming": {
                "FUN_08004848": "get_data_by_index_08004848",
                "param_1": "index",
                "DAT_08004870": "data_0",
                "DAT_08004880": "data_1",
                "DAT_08004874": "data_2",
                "DAT_08004878": "data_3",
                "DAT_0800487c": "data_4"
            },
            "code": "undefined4 get_data_by_index_08004848(int index) {\n  switch(index) {\n    case 0:\n      return DAT_08004870;\n    case 1:\n      return DAT_08004880;\n    case 2:\n      return DAT_08004874;\n    case 3:\n      return DAT_08004878;\n    case 4:\n      return DAT_0800487c;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004848",
            "calling": [
                "FUN_08005890",
                "FUN_08005848"
            ],
            "imported": false,
            "current_name": "get_data_by_index_08004848"
        },
        "FUN_08005d82": {
            "renaming": {
                "FUN_08005d82": "execute_function_08005d82",
                "FUN_08005d42": "call_another_function"
            },
            "code": "void execute_function_08005d82(void)\n{\n  call_another_function();\n  return;\n}",
            "called": [
                "FUN_08005d42"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d82",
            "calling": [
                "FUN_08000cd0",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "execute_function_08005d82"
        },
        "FUN_08006f92": {
            "renaming": {
                "FUN_08006f92": "checkValueAndUpdate_08006f92",
                "param_1": "value",
                "param_2": "ptrValue",
                "iVar1": "result",
                "uVar2": "updatedValue",
                "bVar3": "isResultNegative"
            },
            "code": "void checkValueAndUpdate_08006f92(int value, int* ptrValue)\n{\n  int result = computeValue(value, (int)*(short *)(ptrValue + 0xe));\n  bool isResultNegative = result == -1;\n  ushort updatedValue;\n  if (isResultNegative) {\n    updatedValue = *(ushort *)(ptrValue + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(ptrValue + 0x54) = result;\n    updatedValue = *(ushort *)(ptrValue + 0xc) | 0x1000;\n  }\n  if (isResultNegative) {\n    *(ushort *)(ptrValue + 0xc) = updatedValue;\n  }\n  else {\n    *(ushort *)(ptrValue + 0xc) = updatedValue;\n  }\n  return;\n}",
            "called": [
                "FUN_08007048"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f92",
            "calling": [],
            "imported": false,
            "current_name": "checkValueAndUpdate_08006f92"
        },
        "FUN_080012c0": {
            "renaming": {
                "FUN_080012c0": "process_bits_and_call_080012c0",
                "param_1": "data_offset",
                "param_2": "bit_mask",
                "uVar1": "bit_index",
                "FUN_08005848": "call_with_bit",
                "FUN_080012a2": "finalize_processing"
            },
            "code": "void process_bits_and_call_080012c0(int data_offset, int bit_mask) {\n  uint bit_index;\n  for (bit_index = 0; bit_index < 4; bit_index++) {\n    call_with_bit(*(undefined *)(data_offset + bit_index + 0xb), bit_mask >> (bit_index & 0xff) & 1);\n  }\n  finalize_processing(data_offset);\n  return;\n}",
            "called": [
                "FUN_080012a2",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012c0",
            "calling": [
                "FUN_08001310",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "process_bits_and_call_080012c0"
        },
        "FUN_08001f80": {
            "renaming": {
                "FUN_08001f80": "get_value_at_offset_08001f80",
                "param_1": "address"
            },
            "code": "int get_value_at_offset_08001f80(int address){\n    return *(int *)(address + 0x28);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f80",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08001f80"
        },
        "FUN_08001f84": {
            "renaming": {
                "FUN_08001f84": "set_flag_if_not_set_08001f84",
                "param_1": "data",
                "param_2": "flag",
                "iVar1": "new_result",
                "iVar3": "data_ptr",
                "local_14": "i",
                "PTR_DAT_08001ffc": "PTR_CONST",
                "DAT_08002000": "DATA_CONST"
            },
            "code": "int set_flag_if_not_set_08001f84(int* data, unsigned int flag) {\n    int data_ptr = *data;\n    if ((*(unsigned int*)(data_ptr + 8) & 1) == 0) {\n        *(unsigned int*)(data_ptr + 8) |= 1;\n        for (unsigned int i = (unsigned int)((unsigned long long)DAT_08002000 * (unsigned long long)*(unsigned int*)PTR_DAT_08001ffc >> 0x32); i != 0; i--);\n        int result = FUNC_08001cc4(data, flag, (int)((unsigned long long)DAT_08002000 * (unsigned long long)*(unsigned int*)PTR_DAT_08001ffc));\n        do {\n            if ((*(unsigned int*)(*data + 8) & 1) != 0) {\n                return 0;\n            }\n            int new_result = FUNC_08001cc4();\n        } while ((unsigned int)(new_result - result) < 3);\n        data[10] |= 0x10;\n        data[11] |= 1;\n        *(unsigned char*)(data + 9) = 0;\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f84",
            "calling": [
                "FUN_08002004",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "set_flag_if_not_set_08001f84"
        },
        "FUN_08000bcc": {
            "renaming": {
                "FUN_08000bcc": "reflow_oven_control_08000bcc",
                "PTR_DAT_08000c90": "oven_temperature_sensor",
                "PTR_DAT_08000c94": "reflow_temperature_sensor",
                "PTR_DAT_08000c98": "heater_power_output",
                "PTR_DAT_08000c9c": "sensor_readings_buffer",
                "PTR_DAT_08000ca0": "sensor_readings_buffer_length",
                "PTR_s_Reflow_08000ca4": "reflow_sensor_name",
                "PTR_s_Oven_1_2_08000ca8": "oven_sensor_name",
                "PTR_DAT_08000cac": "heater_power_calibration_values",
                "PTR_DAT_08000cb0": "heater_power_minimum",
                "PTR_DAT_08000cb4": "heater_power_calibration_value_1",
                "PTR_DAT_08000cb8": "heater_power_calibration_value_2",
                "FUN_08005848": "set_output_value",
                "FUN_080057b4": "read_sensor_value",
                "FUN_080013a4": "initialize_sensor_readings_buffer",
                "FUN_08001550": "read_sensor_values",
                "FUN_0800135a": "free_sensor_readings_buffer",
                "FUN_08005c96": "log_sensor_reading",
                "FUN_08001366": "sort_sensor_readings",
                "do_nothing_080058e8": "delay",
                "FUN_08005a68": "calibrate_heater_power",
                "FUN_080058e0": "generate_random_number"
            },
            "code": "void reflow_oven_control_08000bcc(void)\n{\n  int *oven_temperature_ptr = PTR_DAT_08000c90;\n  int *reflow_temperature_ptr = PTR_DAT_08000c94;\n  int *heater_power_ptr = PTR_DAT_08000c98;\n  int oven_temperature = read_sensor_value(*oven_temperature_ptr);\n  int reflow_temperature = read_sensor_value(*reflow_temperature_ptr);\n  set_output_value(*heater_power_ptr, calculate_heater_power(oven_temperature, reflow_temperature));\n}\n",
            "called": [
                "FUN_08005c96",
                "FUN_08005a68",
                "FUN_08001550",
                "FUN_080058e8",
                "FUN_080057b4",
                "FUN_080058e0",
                "FUN_08001366",
                "FUN_08005848",
                "FUN_0800135a",
                "FUN_080013a4",
                "FUN_08000aec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000bcc",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "reflow_oven_control_08000bcc"
        },
        "FUN_0800281e": {
            "renaming": {
                "FUN_0800281e": "set_value_0800281e",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "is_shifted",
                "*(int *)(param_1 + 0x10)": "*(int *)(base_address + 0x10)"
            },
            "code": "void set_value_0800281e(int base_address, int value, int is_shifted) {\n  if (is_shifted == 0) {\n    *(int *)(base_address + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(base_address + 0x10) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800281e",
            "calling": [
                "FUN_08004c30"
            ],
            "imported": false,
            "current_name": "set_value_0800281e"
        },
        "FUN_08006198": {
            "renaming": {
                "FUN_08006198": "execute_functions_08006198",
                "puVar1": "function_ptrs",
                "iVar2": "num_functions",
                "iVar3": "i"
            },
            "code": "void execute_functions_08006198(void)\n{\n  void **function_ptrs = PTR_DAT_080061d0;\n  int num_functions = ((int)PTR_DAT_080061d4 - (int)PTR_DAT_080061d0) / sizeof(void*);\n  for (int i = 0; i < num_functions; i++) {\n    void (*function_ptr)() = (void (*)())function_ptrs[i];\n    function_ptr();\n  }\n  do_nothing_08007328();\n  function_ptrs = PTR_DAT_080061d8;\n  num_functions = ((int)PTR_DAT_080061dc - (int)PTR_DAT_080061d8) / sizeof(void*);\n  for (int i = 0; i < num_functions; i++) {\n    void (*function_ptr)() = (void (*)())function_ptrs[i];\n    function_ptr();\n  }\n  return;\n}",
            "called": [
                "FUN_08005f5e",
                "FUN_08007328"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006198",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "execute_functions_08006198"
        },
        "FUN_08007048": {
            "renaming": {
                "FUN_08007048": "initialize_param_08007048",
                "param_1": "output",
                "param_2": "input_1",
                "param_3": "input_2",
                "param_4": "input_3",
                "puVar1": "ptr_data",
                "iVar2": "result"
            },
            "code": "void initialize_param_08007048(int *output, undefined4 param_2, undefined4 param_3, undefined4 param_4) {\n  undefined *ptr_data = PTR_DAT_08007068;\n  *(undefined4 *)PTR_DAT_08007068 = 0;\n  int result = FUN_08005728(param_2, param_3, param_4, param_4, param_4);\n  if (result == -1 && *(int *)ptr_data != 0) {\n    *output = *(int *)ptr_data;\n  }\n  return;\n}",
            "called": [
                "FUN_08005728"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007048",
            "calling": [
                "FUN_08006f92",
                "FUN_08006f5a"
            ],
            "imported": false,
            "current_name": "initialize_param_08007048"
        },
        "FUN_08003c50": {
            "renaming": {
                "FUN_08003c50": "calculate_shifted_value_08003c50",
                "uVar1": "shifted_value",
                "FUN_08003c44": "get_initial_value",
                "PTR_DAT_08003c6c": "shift_amount",
                "DAT_08003c68": "data_pointer"
            },
            "code": "unsigned int calculate_shifted_value_08003c50(void)\n{\n  unsigned int shifted_value;\n  shifted_value = get_initial_value();\n  unsigned int PTR_DAT_08003c6c = (unsigned int)(*(int *)(DAT_08003c68 + 4) << 0x15) >> 0x1d;\n  unsigned int shifted_result = shifted_value >> PTR_DAT_08003c6c;\n  return shifted_result;\n}",
            "called": [
                "FUN_08003c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c50",
            "calling": [
                "FUN_08004204"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08003c50"
        },
        "FUN_080065c0": {
            "renaming": {
                "FUN_080065c0": "process_data_080065c0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output",
                "param_4": "input3",
                "param_5": "callback",
                "iVar1": "result",
                "uVar2": "max_value",
                "uVar3": "counter",
                "bVar4": "is_valid",
                "flag": "flag",
                "flag_offset": "flag_offset",
                "length": "length",
                "offset": "offset"
            },
            "code": "int process_data_080065c0(uint32_t input1, uint32_t *input2, uint32_t *output, uint32_t input3, code *callback)\\n\\\n{\\n\\\n  int status = 0;\\n\\\n  uint32_t max_value = input2[4];\\n\\\n  if (max_value < input2[2]) {\\n\\\n    max_value = input2[2];\\n\\\n  }\\n\\\n  *output = max_value;\\n\\\n  if (*(char *)((int)input2 + 0x43) != \"\\0\") {\\n\\\n    *output = max_value + 1;\\n\\\n  }\\n\\\n  if ((int)(*input2 << 0x1a) < 0) {\\n\\\n    *output = *output + 2;\\n\\\n  }\\n\\\n  uint32_t counter = *input2 & 6;\\n\\\n  if (counter == 0) {\\n\\\n    for (; (int)counter < (int)(input2[3] - *output); counter++) {\\n\\\n      int result = (*callback)(input1, input3, (int)input2 + 0x19, 1);\\n\\\n      if (result == -1) {\\n\\\n        return -1;\\n\\\n      }\\n\\\n    }\\n\\\n  }\\n\\\n  uint32_t flag = (uint32_t)*(byte *)((int)input2 + 0x43);\\n\\\n  if (flag != 0) {\\n\\\n    flag = 1;\\n\\\n  }\\n\\\n  uint32_t flag_offset = flag;\\n\\\n  if ((int)(*input2 << 0x1a) < 0) {\\n\\\n    *(undefined *)((int)input2 + flag + 0x43) = 0x30;\\n\\\n    flag_offset = flag + 2;\\n\\\n    *(undefined *)((int)input2 + flag + 0x44) = *(undefined *)((int)input2 + 0x45);\\n\\\n  }\\n\\\n  int result = (*callback)(input1, input3, (int)input2 + 0x43, flag_offset);\\n\\\n  if (result != -1) {\\n\\\n    uint32_t length = input2[3];\\n\\\n    bool is_valid = (*input2 & 6) != 4;\\n\\\n    if (is_valid) {\\n\\\n      length = 0;\\n\\\n    }\\n\\\n    uint32_t offset = 0;\\n\\\n    if (!is_valid) {\\n\\\n      length = length - *output;\\n\\\n    }\\n\\\n    if (!is_valid) {\\n\\\n      length = length & ~((int)length >> 0x1f);\\n\\\n    }\\n\\\n    if (max_value < input2[2]) {\\n\\\n      length = length + (input2[2] - input2[4]);\\n\\\n    }\\n\\\n    while (offset != length) {\\n\\\n      result = (*callback)(input1, input3, (int)input2 + 0x1a, 1);\\n\\\n      if (result == -1) {\\n\\\n        status = -1;\\n\\\n        break;\\n\\\n      }\\n\\\n      offset++;\\n\\\n    }\\n\\\n  } else {\\n\\\n    status = -1;\\n\\\n  }\\n\\\n  return status;\\n\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080065c0",
            "calling": [
                "FUN_080066b0"
            ],
            "imported": false,
            "current_name": "process_data_080065c0"
        },
        "FUN_080054d4": {
            "renaming": {
                "FUN_080054d4": "read_and_copy_byte_080054d4",
                "param_1": "source_address",
                "param_2": "destination_buffer",
                "param_3": "buffer_size",
                "param_4": "lookup_table_address",
                "iVar1": "lookup_value",
                "*param_2": "*destination_buffer",
                "*(undefined *)(param_1 + 0x45)": "*(char*)(source_address + 0x45)",
                "FUN_0800548c": "get_lookup_value",
                "*(undefined4 *)(PTR_DAT_0800550c + (uint)*(byte *)(param_1 + 0x44) * 4)": "*(int*)(lookup_table_address + (uint)*(char*)(source_address + 0x44) * 4)",
                "param_1 + 0x45": "source_address + 0x45",
                "PTR_DAT_0800550c": "lookup_table_address",
                "return 0xffffffff;": "return -1;"
            },
            "code": "int read_and_copy_byte_080054d4(int source_address, char* destination_buffer, int buffer_size, int PTR_DAT_0800550c){\n  if (source_address == 0) {\n    return -1;\n  }\n  int lookup_value = get_lookup_value();\n  if (lookup_value == 0) {\n    *destination_buffer = *(char*)(source_address + 0x45);\n    copy_byte(*(undefined4 *)(PTR_DAT_0800550c + (uint)*(byte *)(param_1 + 0x44) * 4),\n              source_address + 0x45,1,PTR_DAT_0800550c,buffer_size);\n    return 0;\n  }\n  return -1;\n}",
            "called": [
                "FUN_080045a2",
                "FUN_0800548c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054d4",
            "calling": [
                "FUN_0800598a"
            ],
            "imported": false,
            "current_name": "read_and_copy_byte_080054d4"
        },
        "FUN_08004d40": {
            "renaming": {
                "FUN_08004d40": "wait_forever_08004d40"
            },
            "code": "void wait_forever_08004d40(void)\n{\n  while(true) {\n    // do nothing\n  }\n}",
            "called": [
                "FUN_08004d40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d40",
            "calling": [
                "FUN_08001b48",
                "FUN_08004d40"
            ],
            "imported": false,
            "current_name": "wait_forever_08004d40"
        },
        "FUN_08004d44": {
            "renaming": {
                "FUN_08004d44": "set_bits_and_masks_08004d44",
                "puVar1": "ptr_data"
            },
            "code": "void set_bits_and_masks_08004d44(void)\n{\n  uint *ptr_data = DAT_08004d84;\n  *ptr_data |= 1;\n  ptr_data[1] &= DAT_08004d88;\n  *ptr_data &= 0xfef6ffff;\n  *ptr_data &= 0xfffbffff;\n  ptr_data[1] &= 0xff80ffff;\n  ptr_data[2] = 0x9f0000;\n  *(undefined4 *)(DAT_08004d8c + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d44",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "set_bits_and_masks_08004d44"
        },
        "FUN_0800282c": {
            "renaming": {
                "FUN_0800282c": "update_param_0800282c",
                "param_1": "new_param",
                "DAT_08002844": "PTR_DAT_08002844",
                "uint": "unsigned int",
                "*param_ptr": "param_ptr",
                "call_function": "FUN_080060e4"
            },
            "code": "void update_param_0800282c(uint new_param) {\n  uint* param_ptr = (uint*)(DAT_08002844 + 0x14);\n  if ((*param_ptr & new_param) != 0) {\n    *param_ptr = new_param;\n    call_function();\n  }\n  return;\n}",
            "called": [
                "FUN_080060e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800282c",
            "calling": [],
            "imported": false,
            "current_name": "update_param_0800282c"
        },
        "FUN_080015b2": {
            "renaming": {
                "FUN_080015b2": "get_bits_set_to_one_count_080015b2",
                "*param_1": "bits",
                "iVar1": "bit",
                "uVar2": "index",
                "uVar3": "result",
                "FUN_08005848": "set_bit",
                "FUN_08005890": "get_bit_value"
            },
            "code": "uint get_bits_set_to_one_count_080015b2(bool *bits)\n{\n    int index;\n    uint result = 0;\n    set_bit(1, 0);\n    for (index = 31; index >= 0; index--)\n    {\n        set_bit(1, 1);\n        int bit = get_bit_value(bits);\n        if (bit != 0)\n        {\n            result |= 1 << index;\n        }\n        set_bit(1, 0);\n    }\n    set_bit(1, 1);\n    return result;\n}",
            "called": [
                "FUN_08005890",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b2",
            "calling": [
                "FUN_080015f8"
            ],
            "imported": false,
            "current_name": "get_bits_set_to_one_count_080015b2"
        },
        "FUN_0800040c": {
            "renaming": {
                "FUN_0800040c": "reverse_bits_0800040c",
                "param_1": "num",
                "uVar1": "result",
                "uVar2": "num_bits",
                "iVar3": "count_leading_zeroes",
                "uVar4": "temp",
                "in_r12": "unused",
                "bVar5": "is_shift_negative",
                "bVar6": "is_shift_zero",
                "bVar7": "is_negative"
            },
            "code": "ulonglong reverse_bits_0800040c(uint num) {\n  if (num == 0) {\n    return 0;\n  }\n  uint count_leading_zeroes = __builtin_clz(num);\n  uint num_bits = count_leading_zeroes + 0x15;\n  bool is_negative = num_bits < 0x20;\n  uint shift_amount = count_leading_zeroes - 0xb;\n  bool is_shift_negative = (int)shift_amount < 0;\n  bool is_shift_zero = shift_amount == 0;\n  uint result = 0;\n  if (is_negative) {\n    is_negative = (int)shift_amount < 0xc;\n    count_leading_zeroes++;\n    is_shift_negative = count_leading_zeroes < 0;\n    is_shift_zero = count_leading_zeroes == 0;\n    shift_amount = num_bits;\n    if (!is_shift_zero && is_shift_negative == is_negative) {\n      result = num << (num_bits & 0xff);\n      num = num >> (0xcU - count_leading_zeroes & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (is_shift_zero || is_shift_negative != is_negative) {\n    num_bits = 0x20 - shift_amount;\n  }\n  num = num << (shift_amount & 0xff);\n  if (is_shift_zero || is_shift_negative != is_negative) {\n    num = num | 0U >> (num_bits & 0xff);\n  }\n  if (is_shift_zero || is_shift_negative != is_negative) {\n    result = 0 << (shift_amount & 0xff);\n  }\nLAB_08000318:\n  if ((int)num_bits < 0x433) {\n    return CONCAT44(num + (0x432 - num_bits) * 0x100000,result);\n  }\n  shift_amount = ~(0x432 - num_bits);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(num >> (shift_amount - 0x1f & 0xff));\n  }\n  count_leading_zeroes = shift_amount - 0x13;\n  if (count_leading_zeroes == 0 || count_leading_zeroes < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount++;\n    return CONCAT44(num >> (shift_amount & 0xff),result >> (shift_amount & 0xff) | num << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(result >> (0x20 - (0xcU - count_leading_zeroes) & 0xff) | num << (0xcU - count_leading_zeroes & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800040c",
            "calling": [
                "FUN_080015f8",
                "FUN_08001814",
                "FUN_08000cd0",
                "FUN_08001918",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "reverse_bits_0800040c"
        },
        "FUN_08004df4": {
            "renaming": {
                "FUN_08004df4": "subtract_four_from_parameter_08004df4",
                "param_1": "input_parameter",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int subtract_four_from_parameter_08004df4(int input_parameter)\n{\n    int result = input_parameter - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df4",
            "calling": [
                "FUN_08004df8",
                "FUN_08004e12"
            ],
            "imported": false,
            "current_name": "subtract_four_from_parameter_08004df4"
        },
        "FUN_08004bb0": {
            "renaming": {
                "FUN_08004bb0": "parse_input_08004bb0",
                "param_1": "input_value",
                "local_20": "bit_mask",
                "local_1c": "function_param_2",
                "local_18": "function_param_3",
                "local_14": "flag"
            },
            "code": "void parse_input_08004bb0(uint input_value, undefined4 param_2, undefined4 param_3)\n{\n  uint bit_mask;\n  uint flag;\n  uint function_param;\n  uint function_param_2;\n  uint function_param_3;\n  \n  function_param = (input_value << 0x18) >> 0x1c;\n  bit_mask = 1 << (input_value & 0xf) & 0xffff;\n  function_param_3 = 3;\n  *(uint *)(DAT_08004c28 + 0x18) = *(uint *)(DAT_08004c28 + 0x18) | 1;\n  if ((input_value - 0xd & 0xff) < 2) {\n    *(uint *)(DAT_08004c2c + 4) = *(uint *)(DAT_08004c2c + 4) & 0xf8ffffff | 0x4000000;\n  }\n  if (((input_value == 0xf) || (input_value == 0x13)) || (input_value == 0x14)) {\n    *(uint *)(DAT_08004c2c + 4) = *(uint *)(DAT_08004c2c + 4) & 0xf8ffffff | 0x2000000;\n  }\n  function_param_2 = param_2;\n  function_param = param_3;\n  FUN_08002624(FUN_08004884(function_param),&bit_mask);\n  return;\n}",
            "called": [
                "FUN_08004884",
                "FUN_08002624"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bb0",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "parse_input_08004bb0"
        },
        "FUN_08004df8": {
            "renaming": {
                "FUN_08004df8": "execute_function_08004df8",
                "param_1": "param",
                "iVar1": "function_address",
                "FUN_08004df4": "get_function_address",
                "*(code **)(iVar1 + 0x4c)": "function_ptr",
                "*(char *)(param_1 + 0x1c)": "char_ptr",
                "(**function_ptr)(iVar1,0)": "(*function_ptr)(function_address,0)"
            },
            "code": "void execute_function_08004df8(int param){\n                        int function_address = get_function_address();\n                        code* function_ptr = *(code**)(function_address + 0x4c);\n                        char* char_ptr = (char*)(param + 0x1c);\n                        if (function_ptr != NULL && *char_ptr == 0x01) {\n                            (*function_ptr)(function_address,0);\n                        }\n                    }",
            "called": [
                "FUN_08004df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df8",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "execute_function_08004df8"
        },
        "FUN_08001510": {
            "renaming": {
                "FUN_08001510": "initialize_pointer_array_08001510",
                "param_1": "pointer_array",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "flag1",
                "param_6": "flag2",
                "param_7": "flag3"
            },
            "code": "\\\nundefined4 *initialize_pointer_array_08001510(undefined4 *pointer_array, \\\n                                      undefined4 value1, \\\n                                      undefined4 value2, \\\n                                      undefined4 value3, \\\n                                      undefined flag1, \\\n                                      undefined flag2, \\\n                                      undefined flag3) { \\\n    pointer_array[1] = 0; \\\n    *pointer_array = PTR_PTR_FUN_0800134e_1_0800154c; \\\n    FUN_080014ba(pointer_array, 1, value1, 0xff, value2, value3, flag1, flag2, flag3, 0, 0, 0, 0); \\\n    return pointer_array; \\\n}",
            "called": [
                "FUN_080014ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001510",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "initialize_pointer_array_08001510"
        },
        "FUN_08002af8": {
            "renaming": {
                "FUN_08002af8": "validate_input_08002af8",
                "param_1": "input_ptr",
                "param_2": "input_data",
                "param_3": "input_length",
                "param_4": "input_flags",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "code": "int validate_input_08002af8(uint **input_ptr, uint *input_data, int input_length, uint *input_flags) {\n    int result = 0;\n    uint *ptr = NULL;\n    if (*(char *)((int)input_ptr + 0x3d) == '(') {\n        if (input_data == NULL || input_length == 0 || *(char *)(input_ptr + 0xf) == '\\x01') {\n            result = 1;\n        } else {\n            *(undefined *)(input_ptr + 0xf) = 1;\n            ptr = *input_ptr;\n            if ((*ptr & 1) == 0) {\n                *ptr = *ptr | 1;\n            }\n            **input_ptr = **input_ptr & 0xfffff7ff;\n            *(undefined *)((int)input_ptr + 0x3d) = 0x29;\n            *(undefined *)((int)input_ptr + 0x3e) = 0x20;\n            input_ptr[0x10] = NULL;\n            input_ptr[9] = input_data;\n            *(short *)((int)input_ptr + 0x2a) = (short)input_length;\n            input_ptr[0xb] = input_flags;\n            *(undefined2 *)(input_ptr + 10) = *(undefined2 *)((int)input_ptr + 0x2a);\n            *(undefined *)(input_ptr + 0xf) = 0;\n            (*input_ptr)[1] = (*input_ptr)[1] | 0x700;\n        }\n    } else {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002af8",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": false,
            "current_name": "validate_input_08002af8"
        },
        "FUN_080028de": {
            "renaming": {
                "FUN_080028de": "update_flags_080028de",
                "param_1": "flags_ptr",
                "puVar1": "flag_ptr",
                "PTR_DAT_08002a2a": "short_val",
                "PTR_DAT_08002a2e": "char_val"
            },
            "code": "uint32_t update_flags_080028de(uint32_t **param_1)\n{\n  uint32_t *flag_ptr;\n  flag_ptr = param_1[0xb];\n  if ((*(char *)((int)param_1 + 0x3d) == '\"') &&\n     ((param_1[0x14] != NULL || (*(char *)((int)param_1 + 0x3e) != '@')))) {\n    if ((param_1[0x14] == NULL) && (param_1[4] == (uint32_t *)0xc000)) {\n      **param_1 = **param_1 | 0x100;\n      param_1[0x14] = (uint32_t *)((int)param_1[0x14] + 1);\n    }\n    else {\n      if (*(short *)((int)param_1 + 0x2a) == 0) {\n        **param_1 = **param_1 | 0x200;\n      }\n      else if (*(short *)((int)param_1 + 0x2a) == 1) {\n        if (flag_ptr == (uint32_t *)0xffff0000) {\n          **param_1 = **param_1 & 0xfffffbff;\n          flag_ptr = *param_1;\n          if ((flag_ptr[1] & 0x800) == 0) {\n            *flag_ptr = *flag_ptr | 0x200;\n          }\n          else {\n            *flag_ptr = *flag_ptr & 0xfffffbff;\n          }\n        }\n        else if (((flag_ptr == (uint32_t *)0x4) || (flag_ptr == (uint32_t *)0x8)) ||\n                (param_1[0xc] == (uint32_t *)0x12)) {\n          **param_1 = **param_1 & 0xfffffbff;\n          **param_1 = **param_1 | 0x200;\n        }\n        else if (param_1[0xb] == (uint32_t *)0x2) {\n          **param_1 = **param_1 | 0x400;\n        }\n        else {\n          **param_1 = **param_1 & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)param_1 + 0x2a) == 2) {\n        if (param_1[0xb] == (uint32_t *)0x2) {\n          **param_1 = **param_1 | 0x400;\n        }\n        else {\n          **param_1 = **param_1 | 0x800;\n          **param_1 = **param_1 & 0xfffffbff;\n        }\n        flag_ptr = *param_1;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      else {\n        **param_1 = **param_1 | 0x400;\n        flag_ptr = *param_1;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      param_1[0x14] = NULL;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028de",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "update_flags_080028de"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "decode_packet_08002848",
                "param_1": "packet",
                "*param_1": "packet[0]",
                "param_1[0x14]": "packet[0x14] (flag)",
                "param_1[0x11]": "packet[0x11] (value)",
                "*(char *)((int)param_1 + 0x3e)": "*(char *)(packet + 0x3e) (char_3e)",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)(packet + 0x3d) (char_3d)",
                "*(uint *)(*param_1 + 0x10)": "base[4]"
            },
            "code": "uint32_t decode_packet_08002848(int32_t *packet) {\n    uint32_t *base = (uint32_t *)packet[0];\n    uint32_t flag = packet[0x14];\n    uint32_t value = packet[0x11];\n    char char_3e = *(char *)(packet + 0x3e);\n    char char_3d = *(char *)(packet + 0x3d);\n\n    if (char_3e == '@') {\n        if (flag == 0) {\n            base[4] = value & 0xfe;\n        }\n        else {\n            base[4] = value & 0xff | 1;\n        }\n    }\n    else if (flag == 0x4000) {\n        if (char_3d == '!') {\n            base[4] = value & 0xfe;\n        }\n        else {\n            base[4] = value & 0xff | 1;\n        }\n    }\n    else if (flag == 0) {\n        base[4] = (value << 0x10) >> 0x17 & 6 | 0xf0;\n    }\n    else if (flag == 1) {\n        base[4] = (value << 0x10) >> 0x17 & 6 | 0xf1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "decode_packet_08002848"
        },
        "FUN_08004e70": {
            "renaming": {
                "FUN_08004e70": "subtract_four_from_input_08004e70",
                "param_1": "input"
            },
            "code": "int subtract_four_from_input_08004e70(int input){\n  return input - 4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e70",
            "calling": [
                "FUN_08004ef4",
                "FUN_08004e74",
                "FUN_08004ec4"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_08004e70"
        },
        "FUN_080020f0": {
            "renaming": {
                "FUN_080020f0": "check_and_update_data_080020f0",
                "param_1": "data_ptr",
                "iVar1": "current_time",
                "iVar2": "first_value"
            },
            "code": "int check_and_update_data_080020f0(int *data_ptr) {\n    int first_value = *data_ptr;\n    if ((*(uint *)(first_value + 8) & 1) == 0) {\n        return 0;\n    }\n    *(uint *)(first_value + 8) = *(uint *)(first_value + 8) & 0xfffffffe;\n    int start_time = FUN_08001cc4();\n    do {\n        if ((*(uint *)(*data_ptr + 8) & 1) == 0) {\n            return 0;\n        }\n        int current_time = FUN_08001cc4();\n    } while ((uint)(current_time - start_time) < 3);\n    data_ptr[10] = data_ptr[10] | 0x10;\n    data_ptr[0xb] = data_ptr[0xb] | 1;\n    return 1;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080020f0",
            "calling": [
                "FUN_0800224c",
                "FUN_08002348",
                "FUN_0800213c",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "check_and_update_data_080020f0"
        },
        "FUN_08006e10": {
            "renaming": {
                "FUN_08006e10": "process_data_08006e10",
                "param_1": "process_id",
                "param_2": "data_array",
                "uVar1": "flag",
                "iVar2": "result_1",
                "local_18": "data_1",
                "local_14": "data_ptr_1"
            },
            "code": "void process_data_08006e10(int process_id, int *data_array) {\n  ushort flag;\n  int result_1;\n  int data_1;\n  int *data_ptr_1;\n  \n  if (-1 < (int)((uint)*(ushort *)(data_array + 3) << 0x1e)) {\n    data_1 = process_id;\n    data_ptr_1 = data_array;\n    flag = calculate_flag(process_id, data_array, &data_1, &data_ptr_1);\n    result_1 = calculate_result(process_id, data_1);\n    if (result_1 != 0) {\n      *(undefined **)(process_id + 0x28) = PTR_LAB_08006c34_1_08006e8c;\n      *data_array = result_1;\n      *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) | 0x80;\n      data_array[4] = result_1;\n      data_array[5] = data_1;\n      if ((data_ptr_1 != (int *)0x0) &&\n         (result_1 = process_data_08006e10(process_id, (int)*(short *)((int)data_array + 0xe)), result_1 != 0)) {\n        *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(data_array + 3) = flag | *(ushort *)(data_array + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(data_array + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) & 0xfffc | 2;\n  }\n  *data_array = (int)data_array + 0x47;\n  data_array[4] = (int)data_array + 0x47;\n  data_array[5] = 1;\n  return;\n}",
            "called": [
                "FUN_08006288",
                "FUN_08006dc8",
                "FUN_08007028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e10",
            "calling": [
                "FUN_080069e4"
            ],
            "imported": false,
            "current_name": "process_data_08006e10"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e74": "process_data_08004e74",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "param",
                "param_4": "param_4",
                "iVar1": "result"
            },
            "code": "void process_data_08004e74(int data, int flag, int param, undefined4 param_4) {\n  int result = FUN_08004e70();\n  \n  if (param == *(int *)(data + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5c) = 0;\n      \n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      \n      FUN_08002af8(data, result + 0x68, *(undefined *)(result + 0x88), 8);\n      return;\n    }\n    \n    *(undefined *)(result + 0x5c) = 1;\n    FUN_08002b84(data, result + 0x68, 0x20, 8, param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_08004e70",
                "FUN_08002af8",
                "FUN_08002b84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "FUN_08002cf2"
            ],
            "imported": false,
            "current_name": "process_data_08004e74"
        },
        "FUN_08004c30": {
            "renaming": {
                "FUN_08004c30": "processInputAndPrintResult_08004c30",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "FUN_0800281e": "processAndPrintResult"
            },
            "code": "void processInputAndPrintResult_08004c30(undefined4 input1, undefined2 input2, int input3, undefined4 input4) {\n  if (input3 == 0) {\n    processAndPrintResult(input1, input2, 0, input4, input4);\n    return;\n  }\n  processAndPrintResult(input1, input2, 1, input4, input4);\n  return;\n}",
            "called": [
                "FUN_0800281e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c30",
            "calling": [
                "FUN_08005848"
            ],
            "imported": false,
            "current_name": "processInputAndPrintResult_08004c30"
        },
        "FUN_08006f38": {
            "renaming": {
                "FUN_08006f38": "update_value_at_offset_08006f38",
                "param_1": "base_address",
                "param_2": "offset",
                "iVar1": "value_offset",
                "uVar2": "new_value",
                "bVar3": "is_value_offset_valid"
            },
            "code": "void update_value_at_offset_08006f38(int base_address, int offset) {\n  int value_offset = get_value_offset(base_address, *(short *)(offset + 0xe));\n  bool is_value_offset_valid = value_offset >= 0;\n  uint new_value;\n  if (is_value_offset_valid) {\n    new_value = *(int *)(offset + 0x54) + value_offset;\n  }\n  else {\n    new_value = *(ushort *)(offset + 0xc) & 0xffffefff;\n  }\n  if (is_value_offset_valid) {\n    *(uint *)(offset + 0x54) = new_value;\n  }\n  if (!is_value_offset_valid) {\n    *(short *)(offset + 0xc) = (short)new_value;\n  }\n  return;\n}",
            "called": [
                "FUN_0800706c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f38",
            "calling": [],
            "imported": false,
            "current_name": "update_value_at_offset_08006f38"
        },
        "FUN_08004cce": {
            "renaming": {
                "FUN_08004cce": "get_result_08004cce",
                "param_1": "input_value",
                "uVar1": "result",
                "FUN_08004cb2": "calculate_result"
            },
            "code": "int get_result_08004cce(int input_value) {\n    int result = -1;\n    if (input_value != -1) {\n        result = calculate_result();\n    }\n    return result;\n}",
            "called": [
                "FUN_08004cb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cce",
            "calling": [
                "FUN_08004b3c",
                "FUN_08004948",
                "FUN_0800492c",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "get_result_08004cce"
        },
        "FUN_08006eac": {
            "renaming": {
                "FUN_08006eac": "do_nothing_08006eac"
            },
            "code": "\nvoid do_nothing_08006eac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eac",
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eac"
        },
        "FUN_08006eae": {
            "renaming": {
                "FUN_08006eae": "do_nothing_08006eae"
            },
            "code": "\nvoid do_nothing_08006eae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eae",
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eae"
        },
        "FUN_08005f5c": {
            "renaming": {
                "FUN_08005f5c": "do_nothing_08005f5c"
            },
            "code": "\nvoid do_nothing_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5c",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "do_nothing_08005f5c"
        },
        "FUN_08003ad4": {
            "renaming": {
                "FUN_08003ad4": "perform_operation_08003ad4",
                "param_1": "memory_address",
                "param_2": "size",
                "puVar1": "memory_address_ptr",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "uVar4": "result",
                "operation_type": "operation_type"
            },
            "code": "int perform_operation_08003ad4(uint *memory_address, uint size)\n{\n    uint *memory_address_ptr = DAT_08003c34;\n    if (((*memory_address_ptr & 7) < size) && (*memory_address_ptr = *memory_address_ptr & 0xfffffff8 | size, size != (*memory_address_ptr & 7))) {\n        return 1;\n    }\n    if ((*memory_address & 2) != 0) {\n        DAT_08003c38[1] = DAT_08003c38[1] & 0xffffff0f | memory_address[2];\n    }\n    if ((*memory_address & 1) != 0) {\n        uint operation_type = memory_address[1];\n        if (operation_type == 1) {\n            if ((*DAT_08003c38 & 0x20000) == 0) {\n                return 1;\n            }\n        }\n        else if ((operation_type != 2) && ((*DAT_08003c38 & 2) == 0)) {\n            return 1;\n        }\n        DAT_08003c38[1] = operation_type | DAT_08003c38[1] & 0xfffffffc;\n        int start_time = FUN_08001cc4();\n        if (memory_address[1] == 1) {\n            while ((DAT_08003c38[1] & 0xc) != 4) {\n                int current_time = FUN_08001cc4();\n                if (5000 < (uint)(current_time - start_time)) {\n                    return 3;\n                }\n            }\n        }\n        else if (memory_address[1] == 2) {\n            while ((DAT_08003c38[1] & 0xc) != 8) {\n                int current_time = FUN_08001cc4();\n                if (5000 < (uint)(current_time - start_time)) {\n                    return 3;\n                }\n            }\n        }\n        else {\n            while ((DAT_08003c38[1] & 0xc) != 0) {\n                int current_time = FUN_08001cc4();\n                if (5000 < (uint)(current_time - start_time)) {\n                    return 3;\n                }\n            }\n        }\n    }\n    memory_address_ptr = DAT_08003c34;\n    if ((size < (*DAT_08003c34 & 7)) && (*DAT_08003c34 = *DAT_08003c34 & 0xfffffff8 | size, size != (*memory_address_ptr & 7))) {\n        return 1;\n    }\n    if ((*memory_address & 4) != 0) {\n        DAT_08003c38[1] = DAT_08003c38[1] & 0xfffff8ff | memory_address[3];\n    }\n    if ((*memory_address & 8) != 0) {\n        DAT_08003c38[1] = DAT_08003c38[1] & 0xffffc7ff | memory_address[4] << 3;\n    }\n    uint result = FUN_08003a68();\n    *(uint *)PTR_DAT_08003c40 = result >> PTR_DAT_08003c3c[(DAT_08003c38[1] << 0x18) >> 0x1c];\n    FUN_08001c3c(0xf);\n    return 0;\n}\n",
            "called": [
                "FUN_08003afa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ad4",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "perform_operation_08003ad4"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "set_bit_08004110",
                "param_1": "data",
                "param_2": "bit_position",
                "param_3": "bit_value",
                "*(uint *)(param_1 + 0x20)": "*data",
                "4": "BIT_MASK"
            },
            "code": "void set_bit_08004110(uint32_t *data, uint8_t bit_position, uint8_t bit_value) {\n\tuint32_t mask = ~(4 << (bit_position & 0xff));\n\t*data = (*data & mask) | (bit_value << (bit_position & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "FUN_0800412c"
            ],
            "imported": false,
            "current_name": "set_bit_08004110"
        },
        "FUN_08004ce2": {
            "renaming": {
                "FUN_08004ce2": "check_value_08004ce2",
                "param_1": "value_to_check",
                "param_2": "values",
                "undefined4": "int"
            },
            "code": "int check_value_08004ce2(int value_to_check, char *values) {\n    if (value_to_check == -1) {\n        return 0;\n    }\n    while (*values != -1) {\n        if (value_to_check == *values) {\n            return 1;\n        }\n        values += 0xc;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ce2",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "check_value_08004ce2"
        },
        "FUN_08005568": {
            "renaming": {
                "FUN_08005568": "process_data_08005568",
                "param_1": "data_address",
                "param_2": "value",
                "bVar1": "index",
                "PTR_DAT_080055b0": "data_ptr_1",
                "PTR_DAT_080055b4": "data_ptr_2",
                "FUN_08002494": "send_data",
                "FUN_080024f8": "send_data",
                "FUN_0800455a": "process_value"
            },
            "code": "void process_data_08005568(int data_address, uint32_t value) {\n    if (data_address != 0) {\n        uint8_t index = *(uint8_t *)(data_address + 0x44);\n        *(uint32_t *)(PTR_DAT_080055b0 + index * 4) = value;\n        *(int *)(PTR_DAT_080055b4 + index * 4) = data_address;\n        int char_value = *(char *)(data_address + 0x5a);\n        send_data(char_value, 0, 2);\n        send_data(char_value);\n        uint32_t ptr_value = *(uint32_t *)(PTR_DAT_080055b8 + index * 4);\n        int int_value = *(int *)(data_address + 100) + *(uint16_t *)(data_address + 0x6a);\n        process_value(ptr_value, int_value, 1);\n    }\n}\n",
            "called": [
                "FUN_0800455a",
                "FUN_08002494",
                "FUN_080024f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005568",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08005568"
        },
        "FUN_08004478": {
            "renaming": {
                "FUN_08004478": "decode_and_process_08004478",
                "param_1": "input_buffer",
                "param_2": "output_buffer",
                "param_3": "output_buffer_size",
                "param_4": "param_4",
                "uVar1": "some_value",
                "iVar2": "status"
            },
            "code": "int decode_and_process_08004478(int *input_buffer, ushort *output_buffer, int output_buffer_size, undefined4 param_4) {\n  undefined4 uVar1;\n  int status = 0;\n\n  if (*(char *)((int)input_buffer + 0x39) == ' ') {\n    if (output_buffer == (ushort *)0x0 || output_buffer_size == 0) {\n      status = 1;\n    }\n    else if (*(char *)(input_buffer + 0xe) == '\\x01') {\n      status = 2;\n    }\n    else {\n      *(undefined *)(input_buffer + 0xe) = 1;\n      input_buffer[0xf] = 0;\n      *(undefined *)((int)input_buffer + 0x39) = 0x21;\n      uVar1 = get_some_value();\n      *(short *)(input_buffer + 9) = (short)output_buffer_size;\n      *(short *)((int)input_buffer + 0x26) = (short)output_buffer_size;\n\n      while (*(short *)((int)input_buffer + 0x26) != 0) {\n        *(short *)((int)input_buffer + 0x26) = *(short *)((int)input_buffer + 0x26) + -1;\n        if (input_buffer[2] == 0x1000) {\n          status = decode_and_process_08004478_helper(input_buffer, 0x80, 0, uVar1, param_4);\n          if (status != 0) {\n            return 3;\n          }\n          *(uint *)(*input_buffer + 4) = *output_buffer & 0x1ff;\n          if (input_buffer[4] == 0) {\n            output_buffer = output_buffer + 1;\n          }\n          else {\n            output_buffer = (ushort *)((int)output_buffer + 1);\n          }\n        }\n        else {\n          status = decode_and_process_08004478_helper(input_buffer, 0x80, 0, uVar1, param_4);\n          if (status != 0) {\n            return 3;\n          }\n          *(uint *)(*input_buffer + 4) = (uint)*(byte *)output_buffer;\n          output_buffer = (ushort *)((int)output_buffer + 1);\n        }\n      }\n      status = decode_and_process_08004478_helper(input_buffer, 0x40, 0, uVar1, param_4);\n      if (status == 0) {\n        *(undefined *)((int)input_buffer + 0x39) = 0x20;\n        *(undefined *)(input_buffer + 0xe) = 0;\n      }\n      else {\n        status = 3;\n      }\n    }\n  }\n  else {\n    status = 2;\n  }\n  return status;\n}",
            "called": [
                "FUN_080043b4",
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004478",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": false,
            "current_name": "decode_and_process_08004478"
        },
        "FUN_08005f5e": {
            "renaming": {
                "FUN_08005f5e": "initialize_game_08005f5e",
                "FUN_08002470": "set_difficulty",
                "FUN_08001c32": "load_game_data"
            },
            "code": "void initialize_game_08005f5e(void)\n{\n  set_difficulty(3);\n  load_game_data();\n  return;\n}",
            "called": [
                "FUN_08002470",
                "FUN_08001c32"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5e",
            "calling": [
                "FUN_08006198"
            ],
            "imported": false,
            "current_name": "initialize_game_08005f5e"
        },
        "FUN_08005cb6": {
            "renaming": {
                "FUN_08005cb6": "execute_function_pointer_08005cb6",
                "param_1": "function_pointer"
            },
            "code": "void execute_function_pointer_08005cb6(void (*function_pointer)())\n{\n  (*function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb6",
            "calling": [
                "FUN_08005d42",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "execute_function_pointer_08005cb6"
        },
        "FUN_08003c70": {
            "renaming": {
                "FUN_08003c70": "calculate_result_08003c70",
                "uVar1": "result",
                "FUN_08003c44": "get_input_value",
                "PTR_DAT_08003c8c": "lookup_table",
                "DAT_08003c88": "lookup_table"
            },
            "code": "unsigned int calculate_result_08003c70(void)\n{\n  unsigned int result;\n  result = get_input_value();\n  unsigned int index = (*(int *)(PTR_DAT_08003c8c + 4) << 0x12) >> 0x1d;\n  result = result >> PTR_DAT_08003c8c[index];\n  return result;\n}",
            "called": [
                "FUN_08003c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c70",
            "calling": [
                "FUN_08004204",
                "FUN_08003da4"
            ],
            "imported": false,
            "current_name": "calculate_result_08003c70"
        },
        "FUN_080053d4": {
            "renaming": {
                "FUN_080053d4": "find_match_index_080053d4",
                "param_1": "input_1",
                "param_2": "input_2",
                "cVar1": "target_char",
                "iVar2": "start_time",
                "iVar3": "match_index",
                "uVar4": "i",
                "PTR_DAT_0800547c": "PTR_target",
                "PTR_DAT_08005480": "PTR_match_array",
                "PTR_DAT_08005484": "PTR_match_indexes",
                "PTR_DAT_08005488": "PTR_action_data",
                "get_current_time()": "get_current_time()",
                "find_index_of_match": "find_index_of_match",
                "perform_action()": "perform_action()",
                "perform_match": "perform_match",
                "current_time": "current_time"
            },
            "code": "uint find_match_index_080053d4(undefined4 input_1, uint input_2)\n{\n  int start_time = get_current_time();\n  char target_char = PTR_DAT_0800547c[1];\n  int match_index = find_index_of_match((int)target_char,PTR_DAT_08005480);\n  if (match_index == 0) {\n    return 0;\n  }\n  uint i = 0;\n  while ((i < 5 && ((*(int *)(PTR_DAT_08005484 + i * 4) == 0 || (match_index = find_index_of_match((int)target_char,PTR_DAT_08005480), **(int **)(PTR_DAT_08005484 + i * 4) != match_index))))) {\n    i = i + 1 & 0xff;\n  }\n  if (4 < i) {\n    if ((4 < (byte)PTR_DAT_08005488[0x44]) && (perform_action(), 4 < (byte)PTR_DAT_08005488[0x44])) {\n      return 0;\n    }\n    i = (uint)(byte)PTR_DAT_08005488[0x44];\n  }\n  do {\n    match_index = perform_match(*(undefined4 *)(PTR_DAT_08005484 + i * 4),input_1,input_2 & 0xffff,1000);\n    if (match_index == 0) {\n      return input_2;\n    }\n    int current_time = get_current_time();\n  } while ((uint)(current_time - start_time) < 1000);\n  return 0;\n}\n",
            "called": [
                "FUN_08005384",
                "FUN_08004478",
                "FUN_08001cc4",
                "FUN_08004c78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053d4",
            "calling": [
                "FUN_08005730"
            ],
            "imported": false,
            "current_name": "find_match_index_080053d4"
        },
        "FUN_08002b84": {
            "renaming": {
                "FUN_08002b84": "check_and_set_08002b84",
                "param_1": "ptr_param1",
                "param_2": "ptr_param2",
                "param_3": "param3",
                "param_4": "ptr_param4",
                "uVar1": "result",
                "puVar2": "ptr_temp"
            },
            "code": "int check_and_set_08002b84(uint **ptr_param1, uint *ptr_param2, int param3, uint *ptr_param4) {\n  int result = 0;\n  uint *ptr_temp = NULL;\n  if (*(char *)((int)ptr_param1 + 0x3d) == '(') {\n    if (ptr_param2 == NULL) {\n      result = 1;\n    }\n    else if (param3 == 0) {\n      result = 1;\n    }\n    else if (*(char *)(ptr_param1 + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(ptr_param1 + 0xf) = 1;\n      ptr_temp = *ptr_param1;\n      if ((*ptr_temp & 1) == 0) {\n        *ptr_temp = *ptr_temp | 1;\n      }\n      **ptr_param1 = **ptr_param1 & 0xfffff7ff;\n      *(undefined *)((int)ptr_param1 + 0x3d) = 0x2a;\n      *(undefined *)((int)ptr_param1 + 0x3e) = 0x20;\n      result = 0;\n      ptr_param1[0x10] = NULL;\n      ptr_param1[9] = ptr_param2;\n      *(short *)((int)ptr_param1 + 0x2a) = (short)param3;\n      ptr_param1[0xb] = ptr_param4;\n      *(undefined2 *)(ptr_param1 + 10) = *(undefined2 *)((int)ptr_param1 + 0x2a);\n      *(undefined *)(ptr_param1 + 0xf) = 0;\n      (*ptr_param1)[1] = (*ptr_param1)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b84",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": false,
            "current_name": "check_and_set_08002b84"
        },
        "FUN_08004c48": {
            "renaming": {
                "FUN_08004c48": "execute_function_with_params_08004c48",
                "param_1": "function_param_1",
                "param_2": "function_param_2",
                "param_3": "function_param_3",
                "param_4": "function_param_4",
                "FUN_08002810": "execute_function"
            },
            "code": "void execute_function_with_params_08004c48(undefined4 function_param_1, undefined2 function_param_2, undefined4 function_param_3, undefined4 function_param_4)\n{\n\texecute_function(function_param_1, function_param_2, function_param_3, function_param_4, function_param_4);\n\treturn;\n}",
            "called": [
                "FUN_08002810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c48",
            "calling": [
                "FUN_08005890"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_08004c48"
        },
        "FUN_0800042c": {
            "renaming": {
                "FUN_0800042c": "calculate_result_0800042c",
                "param_1": "input",
                "uVar1": "carry",
                "uVar2": "absolute_value",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeroes",
                "uVar5": "shift_amount2",
                "uVar6": "is_negative",
                "in_r12": "shifted_zeroes",
                "bVar7": "is_negative_overflow",
                "bVar8": "is_zero",
                "bVar9": "is_carry",
                "count_leading_zeroes": "count_leading_zeroes",
                "mask": "mask",
                "i": "i",
                "shifted_value": "shifted_value",
                "shifted_remainder": "shifted_remainder",
                "shifted_zeroes": "shifted_zeroes",
                "inverted_shift_amount": "inverted_shift_amount",
                "carry": "carry"
            },
            "code": "ulonglong calculate_result_0800042c(uint num)\n{\n  uint mask = 0x80000000;\n  for (int i = 0; i < 32; i++) {\n    if ((num & mask) != 0) {\n      return i;\n    }\n    mask >>= 1;\n  }\n  return 32;\n}\n\nulonglong calculate_result_0800042c(uint input)\n{\n  uint is_negative = input & 0x80000000;\n  uint absolute_value = input;\n  if ((int)is_negative < 0) {\n    absolute_value = -input;\n  }\n  if (absolute_value == 0) {\n    return 0;\n  }\n  uint leading_zeroes = calculate_result_0800042c(absolute_value);\n  uint shift_amount = leading_zeroes + 0x15;\n  if (shift_amount < 0x20) {\n    uint carry = shift_amount + 0xc;\n    if (carry < leading_zeroes) {\n      uint shifted_value = absolute_value << (shift_amount & 0xff);\n      uint shifted_remainder = absolute_value >> (carry & 0xff);\n      return ((ulonglong)shifted_value << 32) | shifted_remainder;\n    }\n  }\n  uint shift_amount2 = 0x20 - leading_zeroes;\n  uint shifted_value = absolute_value << (leading_zeroes & 0xff);\n  uint shifted_remainder = 0;\n  if (shift_amount2 != 0) {\n    shifted_remainder = 0U >> (shift_amount2 & 0xff);\n  }\n  uint shifted_zeroes = 0;\n  if (shift_amount2 != 0) {\n    shifted_zeroes = 0 << (leading_zeroes & 0xff);\n  }\n  if (shift_amount < 0x433) {\n    return ((ulonglong)(shifted_value + (0x432 - shift_amount) * 0x100000 | is_negative) << 32) | shifted_zeroes;\n  }\n  uint inverted_shift_amount = ~(0x432 - shift_amount);\n  if (inverted_shift_amount > 0x1e) {\n    return ((ulonglong)input << 32) | (shifted_value >> (inverted_shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  uint carry = inverted_shift_amount - 0x13;\n  if (carry != 0 && (carry < 0 || inverted_shift_amount - 0x1f < 0xc)) {\n    inverted_shift_amount++;\n    return ((ulonglong)(is_negative | shifted_value >> (inverted_shift_amount & 0xff)) << 32) | (shifted_zeroes >> (inverted_shift_amount & 0xff) | shifted_value << (0x20 - inverted_shift_amount & 0xff));\n  }\n  return ((ulonglong)input << 32) | (shifted_value >> (0x20 - (0xcU - carry) & 0xff) | shifted_value << (0xcU - carry & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800042c",
            "calling": [
                "FUN_08000cd0",
                "FUN_08001918",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "calculate_result_0800042c"
        },
        "FUN_08005f6c": {
            "renaming": {
                "FUN_08005f6c": "do_nothing_and_call_another_function_08005f6c",
                "FUN_08000bcc": "call_some_function",
                "FUNC_08000cd0": "perform_another_function",
                "FUN_08005a18": "call_yet_another_function",
                "DAT_08005f88": "condition_variable"
            },
            "code": "void do_nothing_and_call_another_function_08005f6c() {\n  do_nothing();\n  call_some_function();\n  do {\n    do {\n      FUNC_08000cd0();\n    } while (DAT_08005f88 == 0);\n    call_yet_another_function();\n  } while (true);\n}",
            "called": [
                "FUN_08005f5c",
                "FUN_08005a18",
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f6c",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "do_nothing_and_call_another_function_08005f6c"
        },
        "FUN_08005cc0": {
            "renaming": {
                "FUN_08005cc0": "execute_callback_08005cc0",
                "param_1": "callback_function_ptr",
                "param_2": "callback_data_ptr",
                "param_3": "callback_data_size",
                "param_4": "callback_function_arg",
                "PTR_DAT_08005cd0": "callback_data_ptr",
                "*(code **)(*param_1 + 4)": "callback_function_ptr"
            },
            "code": "void execute_callback_08005cc0(int *callback_function_ptr, int *PTR_DAT_08005cd0, int callback_data_size, int *callback_function_arg, int callback_function_arg_size) {\n  (**(void (**)(int*, int*, int, void*, int*))(callback_function_ptr + 4))(PTR_DAT_08005cd0, callback_data_size, callback_function_arg, callback_function_arg_size);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cc0",
            "calling": [
                "FUN_08005f40",
                "FUN_08005cd4"
            ],
            "imported": false,
            "current_name": "execute_callback_08005cc0"
        },
        "FUN_0800706c": {
            "renaming": {
                "FUN_0800706c": "execute_function_with_params_0800706c",
                "param_1": "output_param",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "puVar1": "ptr_data",
                "iVar2": "result"
            },
            "code": "void execute_function_with_params_0800706c(int *output_param, int param1, int param2, int param3) {\n  undefined *ptr_data = PTR_DAT_0800708c;\n  *(undefined4 *)PTR_DAT_0800708c = 0;\n  int result = call_function(param1, param2, param3, param3, param3);\n  if ((result == -1) && (*(int *)ptr_data != 0)) {\n    *output_param = *(int *)ptr_data;\n  }\n  return;\n}",
            "called": [
                "FUN_0800572c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800706c",
            "calling": [
                "FUN_08006f38"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_0800706c"
        },
        "FUN_08002624": {
            "renaming": {
                "FUN_08002624": "update_bits_08002624",
                "param_1": "bits_to_update",
                "param_2": "bits_info",
                "puVar1": "bits_ptr",
                "uVar2": "bit_mask",
                "uVar3": "bit_info",
                "uVar4": "updated_bits",
                "uVar5": "bit_index",
                "uVar6": "index_offset",
                "uVar7": "ptr_index",
                "iVar8": "bit_offset",
                "iVar10": "ptr_index",
                "uVar9": "max_val",
                "DAT_080027f8": "PTR_DAT_080027f8",
                "DAT_080027fc": "PTR_DAT_080027fc",
                "DAT_08002800": "PTR_DAT_08002800",
                "DAT_08002804": "PTR_DAT_08002804",
                "DAT_08002808": "PTR_DAT_08002808"
            },
            "code": "void update_bits_08002624(uint *bits_to_update, uint *bits_info) {\n  uint *bits_ptr;\n  uint bit_mask;\n  uint bit_info;\n  uint updated_bits;\n  uint bit_index = 0;\n  while (bit_index <= 15) {\n    if (bit_index > 15) {\n      return;\n    }\n    bit_mask = 1 << (bit_index & 0xff);\n    if (*bits_info & bit_mask) {\n      bit_info = bits_info[1];\n      if (bit_info == 0x12) {\n        updated_bits = bits_info[3] + 0xc;\n      }\n      else if (bit_info < 0x13) {\n        if (bit_info == 2) {\n          updated_bits = bits_info[3] + 8;\n        }\n        else if (bit_info < 3) {\n          if (bit_info == 0) goto LAB_08002776;\n          if (bit_info == 1) {\n            updated_bits = bits_info[3];\n          }\n        }\n        else if (bit_info == 3) {\n          updated_bits = 0;\n        }\n        else if (bit_info == 0x11) {\n          updated_bits = bits_info[3] + 4;\n        }\n      }\n      else {\n        if (bit_info != DAT_08002804) {\n          if (DAT_08002804 < bit_info) {\n            if (bit_info == DAT_08002808) goto LAB_08002776;\n            uint max_val = DAT_08002808 + 0x10000;\n            uint min_val = DAT_08002808;\n          }\n          else {\n            uint max_val = DAT_08002804 - 0x100000;\n            uint min_val = DAT_08002804;\n          }\n          if ((bit_info != max_val) && (bit_info != min_val - 0xf0000)) goto LAB_0800263a;\n        }\nLAB_08002776:\n        if (bits_info[2] == 0) {\n          updated_bits = 4;\n        }\n        else if (bits_info[2] == 1) {\n          bits_to_update[4] = bit_mask;\n          updated_bits = 8;\n        }\n        else {\n          bits_to_update[5] = bit_mask;\n          updated_bits = 8;\n        }\n      }\nLAB_0800263a:\n      uint index_offset = bit_index;\n      bits_ptr = bits_to_update;\n      if (0xff < *bits_info & bit_mask) {\n        index_offset = bit_index - 8;\n        bits_ptr = bits_to_update + 1;\n      }\n      *bits_ptr = *bits_ptr & ~(0xf << (index_offset << 2 & 0xff)) | updated_bits << (index_offset << 2 & 0xff);\n      if ((bits_info[1] & 0x10000000) != 0) {\n        *(uint *)(DAT_080027f8 + 0x18) = *(uint *)(DAT_080027f8 + 0x18) | 1;\n        uint bit_offset = (bit_index & 3) << 2;\n        int ptr_index = 0;\n        if (bits_to_update == PTR_DAT_0800280c) {\n          ptr_index = 0;\n        }\n        else if (bits_to_update == PTR_DAT_0800280c + 0x100) {\n          ptr_index = 1;\n        }\n        else if (bits_to_update == PTR_DAT_0800280c + 0x200) {\n          ptr_index = 2;\n        }\n        else if (bits_to_update == PTR_DAT_0800280c + 0x300) {\n          ptr_index = 3;\n        }\n        else {\n          ptr_index = 4;\n        }\n        *(uint *)(DAT_080027fc + ((bit_index >> 2) + 2) * 4) = *(uint *)(DAT_080027fc + ((bit_index >> 2) + 2) * 4) & ~(0xf << bit_offset) | ptr_index << bit_offset;\n        if ((bits_info[1] & 0x10000) == 0) {\n          *DAT_08002800 = *DAT_08002800 & ~bit_mask;\n        }\n        else {\n          *DAT_08002800 = *DAT_08002800 | bit_mask;\n        }\n        if ((bits_info[1] & 0x20000) == 0) {\n          DAT_08002800[1] = DAT_08002800[1] & ~bit_mask;\n        }\n        else {\n          DAT_08002800[1] = DAT_08002800[1] | bit_mask;\n        }\n        if ((bits_info[1] & 0x100000) == 0) {\n          DAT_08002800[2] = DAT_08002800[2] & ~bit_mask;\n        }\n        else {\n          DAT_08002800[2] = DAT_08002800[2] | bit_mask;\n        }\n        if ((bits_info[1] & 0x200000) == 0) {\n          DAT_08002800[3] = DAT_08002800[3] & ~bit_mask;\n        }\n        else {\n          DAT_08002800[3] = bit_mask | DAT_08002800[3];\n        }\n      }\n    }\n    bit_index = bit_index + 1;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002624",
            "calling": [
                "FUN_08004974",
                "FUN_08004bb0",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "update_bits_08002624"
        },
        "FUN_080040b0": {
            "renaming": {
                "FUN_080040b0": "clearFlagsIfPossible_080040b0",
                "param_1": "data",
                "param_2": "flag",
                "puVar1": "dataArray",
                "DAT_0800410c": "ptr_dataArray"
            },
            "code": "int clearFlagsIfPossible_080040b0(uint **data, int flag)\n{\n  uint *dataArray = *data;\n  if (((dataArray == DAT_0800410c) && ((dataArray[8] & 0x1111) == 0)) && ((dataArray[8] & 0x444) == 0)) {\n    dataArray[17] = dataArray[17] & 0xffff7fff;\n  }\n  dataArray = *data;\n  if (((dataArray[8] & 0x1111) == 0) && ((dataArray[8] & 0x444) == 0)) {\n    *dataArray = *dataArray & 0xfffffffe;\n  }\n  *(undefined *)((int)data + 0x3d) = 1;\n  return 0;\n}",
            "called": [
                "FUN_08004092"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040b0",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "clearFlagsIfPossible_080040b0"
        },
        "FUN_08005d42": {
            "renaming": {
                "FUN_08005d42": "calculate_value_08005d42",
                "param_1": "function_pointer",
                "param_2": "input_value",
                "param_3": "base",
                "iVar1": "result",
                "iVar2": "sign",
                "FUN_08005ce8": "calculate_value",
                "FUN_08005cb6": "calculate_value"
            },
            "code": "int calculate_value_08005d42(undefined4 *function_pointer, uint input_value, uint base) {\n  int result;\n  if (base == 0) {\n    result = (**(code **)*function_pointer)(function_pointer, input_value & 0xff);\n    return result;\n  }\n  if (base != 10) {\n    result = calculate_value_08005d42(function_pointer, input_value, base & 0xff);\n    return result;\n  }\n  if (-1 < (int)input_value) {\n    result = calculate_value_08005d42(function_pointer, input_value, 10);\n    return result;\n  }\n  int sign = calculate_value_08005d42(function_pointer, 0x2d, 0);\n  int absolute_value = calculate_value_08005d42(function_pointer, -input_value, 10);\n  return absolute_value + sign;\n}",
            "called": [
                "FUN_08005cb6",
                "FUN_08005ce8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d42",
            "calling": [
                "FUN_08005d82"
            ],
            "imported": false,
            "current_name": "calculate_value_08005d42"
        },
        "FUN_08004b34": {
            "renaming": {
                "FUN_08004b34": "execute_function_08004b34",
                "FUN_08004d90": "initialize_parameters"
            },
            "code": "void execute_function_08004b34(void)\n{\n  initialize_parameters();\n  return;\n}",
            "called": [
                "FUN_08004d90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b34",
            "calling": [
                "FUN_08003ed8"
            ],
            "imported": false,
            "current_name": "execute_function_08004b34"
        },
        "FUN_08004c52": {
            "renaming": {
                "FUN_08004c52": "execute_startup_tasks_08004c52",
                "FUN_08001c88": "initialize_network",
                "FUN_08001b48": "initialize_database"
            },
            "code": "void execute_startup_tasks_08004c52(void)\n{\n  initialize_network();\n  initialize_database();\n  return;\n}",
            "called": [
                "FUN_08001c88",
                "FUN_08001b48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c52",
            "calling": [
                "FUN_08001c32"
            ],
            "imported": false,
            "current_name": "execute_startup_tasks_08004c52"
        },
        "FUN_080013a4": {
            "renaming": {
                "FUN_080013a4": "print_message_080013a4",
                "param_1": "message",
                "param_2": "length",
                "param_3": "flag1",
                "param_4": "flag2",
                "iVar1": "segment_length",
                "iVar2": "index"
            },
            "code": "void print_message_080013a4(int message, int length, int flag1, int flag2)\n{\n  int index = 0;\n  \n  if (length > 1) {\n    *(byte *)(message + 0x13) = *(byte *)(message + 0x13) | 8;\n  }\n  *(char *)(message + 0x17) = (char)length;\n  print_segment(message, 0, 0x40, flag1, flag1 + 0x40);\n  if ((flag2 != 0) && (length == 1)) {\n    *(byte *)(message + 0x13) = *(byte *)(message + 0x13) | 4;\n  }\n  print_byte(*(undefined *)(message + 8),1);\n  if (*(char *)(message + 9) != -1) {\n    print_byte(*(char *)(message + 9),1);\n  }\n  print_byte(*(undefined *)(message + 10),1);\n  while(index < 8) {\n    int segment_length = (*(byte *)(message + 0x13) & 0x10) == 0 ? 4 : 8;\n    if (segment_length <= index) break;\n    print_byte(*(undefined *)(message + index + 0xb),1);\n    index++;\n  }\n  print_segment(*(undefined *)(message + 8),0);\n  print_segment(*(undefined *)(message + 10),0);\n  if (*(char *)(message + 9) != -1) {\n    print_segment(*(char *)(message + 9),0);\n  }\n  if ((*(byte *)(message + 0x13) & 0x10) == 0) {\n    print_segment(message,3);\n    print_segment(message,3);\n    print_segment(message,3);\n    print_segment(message,2);\n  }\n  else {\n    print_segment(message,*(byte *)(message + 0x13) | 0x20,0);\n    print_segment(message,*(byte *)(message + 0x13) | 0x20,0);\n    print_segment(message,*(byte *)(message + 0x13) | 0x20,0);\n  }\n  print_segment(message,*(byte *)(message + 0x13) | 0x20,0);\n  *(undefined *)(message + 0x14) = 4;\n  print_footer(message);\n  print_header(message);\n  *(undefined *)(message + 0x15) = 2;\n  print_segment(message,6,0);\n  return;\n}",
            "called": [
                "FUN_0800138e",
                "FUN_080012c0",
                "FUN_08001294",
                "FUN_080057b4",
                "FUN_08001310",
                "FUN_0800135a",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080013a4",
            "calling": [
                "FUN_080014ba",
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "print_message_080013a4"
        },
        "FUN_08006d14": {
            "renaming": {
                "FUN_08006d14": "initialize_data_08006d14",
                "param_1": "error_code",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "piVar1": "data_ptr",
                "piVar2": "current_data_ptr",
                "iVar3": "data_structure_address",
                "ppiVar4": "current_data_structure_ptr"
            },
            "code": "int* initialize_data_08006d14(undefined4* error_code, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n    int* data_ptr;\n    int* current_data_ptr;\n    int data_structure_address = *(int*)PTR_PTR_DAT_08006d88;\n    if (*(int*)(data_structure_address + 0x18) == 0)\n    {\n        initialize_data_08006d14_structure(data_structure_address);\n    }\n    current_data_ptr = (int*)(data_structure_address + 0x48);\n    do\n    {\n        data_ptr = current_data_ptr[2];\n        current_data_ptr = current_data_ptr[1];\n        while ((int)(--data_ptr) >= 0)\n        {\n            if (*(short*)(data_ptr + 3) == 0)\n            {\n                *(undefined2*)((int)data_ptr + 0xe) = 0xffff;\n                data_ptr[0x19] = 0;\n                *(undefined2*)(data_ptr + 3) = 1;\n                *data_ptr = 0;\n                data_ptr[2] = 0;\n                data_ptr[1] = 0;\n                data_ptr[4] = 0;\n                data_ptr[5] = 0;\n                data_ptr[6] = 0;\n                initialize_data_08006d14_structure(data_ptr + 0x17, 0, 8, 1, param_4);\n                data_ptr[0xd] = 0;\n                data_ptr[0xe] = 0;\n                data_ptr[0x12] = 0;\n                data_ptr[0x13] = 0;\n                return data_ptr;\n            }\n            data_ptr += 0x1a;\n        }\n        if (*current_data_ptr == (int*)0x0)\n        {\n            data_ptr = (int*)allocate_memory(error_code, 4);\n            *current_data_ptr = data_ptr;\n            if (data_ptr == (int*)0x0)\n            {\n                *error_code = 0xc;\n                return (int*)0x0;\n            }\n        }\n        current_data_ptr = (int**)*current_data_ptr;\n    } while (true);\n}\n",
            "called": [
                "FUN_08006c88",
                "FUN_08006cb4",
                "FUN_080061e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d14",
            "calling": [
                "FUN_08006cb4"
            ],
            "imported": false,
            "current_name": "initialize_data_08006d14"
        },
        "FUN_080004f8": {
            "renaming": {
                "FUN_080004f8": "FUNC_080004f8"
            },
            "code": "\nulonglong FUNC_080004f8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = FUN_080006d4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006d4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004f8",
            "calling": [
                "FUN_080015f8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_080016b4",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "FUNC_080004f8"
        }
    },
    "used_tokens": 223731,
    "layers": [
        [
            "FUN_0800316c",
            "FUN_08003afa",
            "FUN_08003a68",
            "FUN_08001e48",
            "FUN_08003f18",
            "FUN_08002540",
            "FUN_08006344",
            "FUN_08002db2",
            "FUN_08001cc4",
            "FUN_08003ea0",
            "FUN_0800306c",
            "FUN_0800548c",
            "FUN_08004848",
            "FUN_08005d82",
            "FUN_08006f92",
            "FUN_080012c0",
            "FUN_08001f80",
            "FUN_08001f84",
            "FUN_08000bcc",
            "FUN_0800281e",
            "FUN_08006198",
            "FUN_08007048",
            "FUN_08003c50",
            "FUN_080065c0",
            "FUN_080054d4",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_0800282c",
            "FUN_080015b2",
            "FUN_0800040c",
            "FUN_08004df4",
            "FUN_08004bb0",
            "FUN_08004df8",
            "FUN_08001510",
            "FUN_08002af8",
            "FUN_080028de",
            "FUN_08002848",
            "FUN_08004e70",
            "FUN_080020f0",
            "FUN_08006e10",
            "FUN_08004e74",
            "FUN_08004c30",
            "FUN_08006f38",
            "FUN_08004cce",
            "FUN_08003ad4",
            "FUN_08004110",
            "FUN_08004ce2",
            "FUN_08005568",
            "FUN_08004478",
            "FUN_08005f5e",
            "FUN_08005cb6",
            "FUN_08003c70",
            "FUN_080053d4",
            "FUN_08002b84",
            "FUN_08004c48",
            "FUN_0800042c",
            "FUN_08005f6c",
            "FUN_08005cc0",
            "FUN_0800706c",
            "FUN_08002624",
            "FUN_080040b0",
            "FUN_08005d42",
            "FUN_08004b34",
            "FUN_08004c52",
            "FUN_080013a4",
            "FUN_08006d14"
        ]
    ],
    "locked_functions": []
}