{
    "functions": {
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "initialize_flag_08000188",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000194) */\n\nundefined4 initializeFlag_08000188(undefined4 inputParam)\n\n{\n  if ((char)DAT_2000044c == '\\0') {\n    DAT_2000044c._0_1_ = '\\x01';\n  }\n  return inputParam;\n}\n\n",
            "renaming": {
                "FUN_08000188": "initialize_flag_08000188",
                "param_1": "inputParam"
            },
            "calling": [],
            "called": [
                "FUN_0800b5b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "concatenate_and_return_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b2) */\n\nundefined8 concatenate_and_return_080001ac(undefined4 first_parameter,undefined4 second_parameter)\n\n{\n  return CONCAT44(second_parameter,first_parameter);\n}\n\n",
            "renaming": {
                "FUN_080001ac": "concatenate_and_return_080001ac",
                "param_1": "first_parameter",
                "param_2": "second_parameter"
            },
            "calling": [
                "FUN_0800b3e8"
            ],
            "called": [
                "FUN_0800b5b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001c8": {
            "entrypoint": "0x080001c8",
            "current_name": "FUNC_080001c8",
            "code": "\nvoid FUNC_080001c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001c8": "FUNC_080001c8"
            },
            "calling": [
                "FUN_08000220"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001d4": {
            "entrypoint": "0x080001d4",
            "current_name": "FUNC_080001d4",
            "code": "\nvoid FUNC_080001d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001d4": "FUNC_080001d4"
            },
            "calling": [
                "FUN_08000210"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001e0": {
            "entrypoint": "0x080001e0",
            "current_name": "FUNC_080001e0",
            "code": "\nvoid FUNC_080001e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001e0": "FUNC_080001e0"
            },
            "calling": [
                "FUN_08000220"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001ec": {
            "entrypoint": "0x080001ec",
            "current_name": "FUNC_080001ec",
            "code": "\nvoid FUNC_080001ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001ec": "FUNC_080001ec"
            },
            "calling": [
                "FUN_08000210"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001f8": {
            "entrypoint": "0x080001f8",
            "current_name": "initialize_and_reset_system_080001f8",
            "code": "\nvoid initialize_and_reset_system_080001f8(void)\n\n{\n  DAT_20000468 = 0;\n  initialize_system_08000210();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001f8": "initialize_and_reset_system_080001f8"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08000210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000210": {
            "entrypoint": "0x08000210",
            "current_name": "initialize_system_08000210",
            "code": "\nvoid initialize_system_08000210(void)\n\n{\n  FUNC_080001ec();\n  FUNC_080001d4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000210": "initialize_system_08000210"
            },
            "calling": [
                "FUN_080001f8",
                "FUN_080025e8",
                "FUN_08000220"
            ],
            "called": [
                "FUN_080001d4",
                "FUN_080001ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000220": {
            "entrypoint": "0x08000220",
            "current_name": "process_param_08000220",
            "code": "\nvoid process_param_08000220(char input_param)\n\n{\n  if (input_param != DAT_20000468) {\n    process_data();\n    if (input_param == '\\x01') {\n      FUNC_080001c8();\n      DAT_20000468 = input_param;\n    }\n    else if (input_param == '\\x02') {\n      FUNC_080001e0();\n      DAT_20000468 = input_param;\n    }\n    else {\n      initialize_system();\n      DAT_20000468 = input_param;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000220": "process_param_08000220",
                "param_1": "input_param",
                "process_data_08002fd4": "process_data",
                "initialize_system_08000210": "initialize_system"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_080001e0",
                "FUN_08002fd4",
                "FUN_08000210",
                "FUN_080001c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000268": {
            "entrypoint": "0x08000268",
            "current_name": "calculate_result_08000268",
            "code": "\n\n\nint calculate_result_08000268(void)\n\n{\n  int data_value;\n  \n  data_value = get_data_value();\n  return (data_value + 1) * 1000 - _DAT_e000e018 / 0xa8;\n}\n\n",
            "renaming": {
                "FUN_08000268": "calculate_result_08000268",
                "get_data_value_08005a84": "get_data_value",
                "iVar1": "data_value"
            },
            "calling": [
                "FUN_080002b6"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002a0": {
            "entrypoint": "0x080002a0",
            "current_name": "track_data_value_080002a0",
            "code": "\nvoid trackDataValue_080002a0(undefined4 input)\n\n{\n  trackDataValue_080002a0Helper(input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002a0": "track_data_value_080002a0",
                "param_1": "input",
                "track_data_value_08005a98": "trackDataValueHelper"
            },
            "calling": [
                "FUN_08002408"
            ],
            "called": [
                "FUN_08005a98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002b6": {
            "entrypoint": "0x080002b6",
            "current_name": "check_condition_080002b6",
            "code": "\nvoid checkCondition_080002b6(uint inputValue)\n\n{\n  uint result1;\n  uint result2;\n  bool conditionMet;\n  longlong calculationResult;\n  undefined8 tempResult;\n  \n  calculationResult = calculate_result_08000268();\n  result2 = (uint)(calculationResult + (ulonglong)inputValue >> 0x20);\n  do {\n    tempResult = calculate_result_08000268();\n    result1 = (uint)((ulonglong)tempResult >> 0x20);\n    conditionMet = result2 <= result1;\n    if (result1 == result2) {\n      conditionMet = (uint)(calculationResult + (ulonglong)inputValue) <= (uint)tempResult;\n    }\n  } while (!conditionMet);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002b6": "check_condition_080002b6",
                "param_1": "inputValue",
                "uVar1": "result1",
                "uVar2": "result2",
                "bVar3": "conditionMet",
                "lVar4": "calculationResult",
                "uVar5": "tempResult"
            },
            "calling": [],
            "called": [
                "FUN_08000268"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002f0": {
            "entrypoint": "0x080002f0",
            "current_name": "initialize_data_080002f0",
            "code": "\nvoid initializeData_080002f0(void)\n\n{\n  memset_0800b430(&DAT_20000470,0xff,4);\n  DAT_2000046c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002f0": "initialize_data_080002f0"
            },
            "calling": [
                "FUN_080003ec",
                "FUN_08000374",
                "FUN_08000310",
                "FUN_08000340"
            ],
            "called": [
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000310": {
            "entrypoint": "0x08000310",
            "current_name": "get_data_entry_08000310",
            "code": "\nundefined get_data_entry_08000310(uint entry_index)\n\n{\n  if (DAT_2000046c == 0) {\n    initialize_data();\n  }\n  return (&DAT_20000470)[entry_index & 0x3ff];\n}\n\n",
            "renaming": {
                "FUN_08000310": "get_data_entry_08000310",
                "param_1": "entry_index",
                "initialize_data_080002f0": "initialize_data"
            },
            "calling": [
                "FUN_080003ec",
                "FUN_08004dd2"
            ],
            "called": [
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000340": {
            "entrypoint": "0x08000340",
            "current_name": "update_data_08000340",
            "code": "\nvoid updateData_08000340(uint index,undefined value)\n\n{\n  if (DAT_2000046c == 0) {\n    initializeData();\n  }\n  (&DAT_20000470)[index & 0x3ff] = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000340": "update_data_08000340",
                "param_1": "index",
                "param_2": "value",
                "initialize_data_080002f0": "initializeData"
            },
            "calling": [
                "FUN_08000374",
                "FUN_08004c2a"
            ],
            "called": [
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000374": {
            "entrypoint": "0x08000374",
            "current_name": "update_data_with_checksum_08000374",
            "code": "\nvoid update_data_with_checksum_08000374(int source_index,char *source_data,int data_length)\n\n{\n  int remaining_length;\n  char *current_data;\n  int current_index;\n  char checksum;\n  \n  checksum = '\\0';\n  remaining_length = data_length;\n  current_data = source_data;\n  current_index = source_index;\n  if (DAT_2000046c == 0) {\n    initialize_data_080002f0();\n    current_data = source_data;\n    current_index = source_index;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    checksum = (checksum != '\\0') + *current_data;\n    update_data_08000340(current_index,*current_data);\n    current_data = current_data + 1;\n    current_index = current_index + 1;\n  }\n  update_data_08000340(current_index,checksum);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000374": "update_data_with_checksum_08000374",
                "param_1": "source_index",
                "param_2": "source_data",
                "param_3": "data_length",
                "local_1c": "remaining_length",
                "local_18": "current_data",
                "local_14": "current_index",
                "local_9": "checksum"
            },
            "calling": [
                "FUN_08004c2a",
                "FUN_08004bc0",
                "FUN_08004bf4"
            ],
            "called": [
                "FUN_080002f0",
                "FUN_08000340"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003ec": {
            "entrypoint": "0x080003ec",
            "current_name": "check_data_integrity_080003ec",
            "code": "\nbool check_data_integrity_080003ec(char *data_buffer,int start_index,int length)\n\n{\n  char cVar1;\n  uint uVar2;\n  int remaining_length;\n  int current_index;\n  char *current_char;\n  byte checksum;\n  \n  checksum = 0;\n  remaining_length = length;\n  current_index = start_index;\n  current_char = data_buffer;\n  if (DAT_2000046c == 0) {\n    initialize_data_080002f0();\n    current_index = start_index;\n    current_char = data_buffer;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    cVar1 = get_data_entry_08000310(current_index);\n    checksum = cVar1 + (checksum != 0);\n    *current_char = cVar1;\n    current_index = current_index + 1;\n    current_char = current_char + 1;\n  }\n  uVar2 = get_data_entry_08000310(current_index);\n  return checksum == uVar2;\n}\n\n",
            "renaming": {
                "FUN_080003ec": "check_data_integrity_080003ec",
                "param_1": "data_buffer",
                "param_2": "start_index",
                "param_3": "length",
                "local_1c": "remaining_length",
                "local_18": "current_index",
                "local_14": "current_char",
                "local_9": "checksum"
            },
            "calling": [
                "FUN_08004dd2",
                "FUN_08004d2c",
                "FUN_08004d7c"
            ],
            "called": [
                "FUN_080002f0",
                "FUN_08000310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000478": {
            "entrypoint": "0x08000478",
            "current_name": "initialize_data_08000478",
            "code": "\nvoid initializeData_08000478(undefined input1,undefined input2,undefined input3)\n\n{\n  DAT_20000e89 = input1;\n  DAT_20000e8a = input2;\n  DAT_20000e8b = input3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000478": "initialize_data_08000478",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3"
            },
            "calling": [
                "FUN_080004ac",
                "FUN_080005b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004ac": {
            "entrypoint": "0x080004ac",
            "current_name": "initialize_data_080004ac",
            "code": "\nvoid initializeData_080004ac(void)\n\n{\n  int result;\n  \n  clearMemory(&DAT_20000e70,0,0x38);\n  DAT_20000e78 = DAT_20000ecc;\n  initializeData_080004ac(0,1,2);\n  DAT_20000e74 = 1;\n  result = checkAndUpdateIntegrity(DAT_20000e8c,&DAT_20000e90);\n  if (result == 0) {\n    FUNC_08004030(10);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004ac": "initialize_data_080004ac",
                "iVar1": "result",
                "memset_0800b430": "clearMemory",
                "initialize_data_08000478": "initializeData",
                "check_and_update_data_integrity_08004d7c": "checkAndUpdateIntegrity"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004030",
                "FUN_0800b430",
                "FUN_08000478",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004fc": {
            "entrypoint": "0x080004fc",
            "current_name": "perform_floating_point_additions_080004fc",
            "code": "\nvoid performFloatingPointAdditions_080004fc(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 convertedInput;\n  \n  convertedInput = convert_unsigned_to_twos_complement_08008e44(input1);\n  DAT_20000e7c = floating_point_addition_08009054(convertedInput,DAT_20000ebc);\n  convertedInput = convert_unsigned_to_twos_complement_08008e44(input2);\n  DAT_20000e80 = floating_point_addition_08009054(convertedInput,DAT_20000ec0);\n  convertedInput = convert_unsigned_to_twos_complement_08008e44(input3);\n  DAT_20000e84 = floating_point_addition_08009054(convertedInput,DAT_20000ec4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004fc": "perform_floating_point_additions_080004fc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "convertedInput"
            },
            "calling": [
                "FUN_0800283a"
            ],
            "called": [
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800056c": {
            "entrypoint": "0x0800056c",
            "current_name": "process_data_0800056c",
            "code": "\nundefined4 processData_0800056c(undefined4 data)\n\n{\n  undefined8 decodedData;\n  \n  if (DAT_20000e73 != '\\0') {\n    decodedData = decode_and_transform_data_08008590(data);\n    decodedData = calculate_multiplication_and_addition_08008640((int)decodedData,(int)((ulonglong)decodedData >> 0x20),0x66666666,0x40396666);\n    data = reversed_binary_operation_08008c30((int)decodedData,(int)((ulonglong)decodedData >> 0x20));\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_0800056c": "process_data_0800056c",
                "param_1": "data",
                "uVar1": "decodedData"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005b4": {
            "entrypoint": "0x080005b4",
            "current_name": "process_byte_stream_080005b4",
            "code": "\nchar processByteStream_080005b4(undefined4 stream)\n\n{\n  int returnValue;\n  undefined4 value;\n  char status;\n  uint switchValue;\n  undefined4 normalizedValue;\n  undefined8 decodedValue;\n  undefined8 calculationResult1;\n  undefined8 calculationResult2;\n  undefined4 resultsArray [4];\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 buffer [6];\n  undefined4 byteValue;\n  byte byte1;\n  undefined indicator1;\n  undefined4 floatValue1;\n  undefined4 floatValue2;\n  undefined boolValue;\n  uint calculationResult3;\n  byte byte2;\n  byte byte3;\n  byte byte4;\n  byte byte5;\n  char indicator2;\n  uint parameter;\n  undefined4 value1;\n  sbyte indicator3;\n  char indicator4;\n  char indicator5;\n  undefined4 floatValue3;\n  byte byte6;\n  ushort byte7;\n  uint byte8;\n  \n  if (DAT_20000ea9 == '\\x06') {\n    status = '\\f';\n  }\n  else {\n    indicator1 = 0;\n    byte7 = 0;\n    byte6 = 0;\n    floatValue3 = 0xbf800000;\n    indicator5 = '\\0';\n    indicator4 = '\\0';\n    memset_0800b430(buffer + 3,0,0xc);\n    memset_0800b430(buffer,0,0xc);\n    DAT_20000e70 = '\\0';\n    indicator3 = 0;\n    while (returnValue = check_and_update_byte_0800184c(&byte1,buffer + 6,stream,&indicator1), returnValue != 0) {\n      decodedValue = decode_and_transform_data_08008590(byteValue);\n      decodedValue = process_unsigned_numbers_08009798((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n      byte8 = calculate_value_08008ba0((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n      if (byte1 == 0x47) {\n        switch(byte8) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          indicator3 = 2;\n          break;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          indicator3 = 1;\n          break;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          indicator3 = 3;\n          break;\n        case 0x14:\n        case 0x15:\n          indicator3 = 7;\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          indicator3 = 9;\n          break;\n        case 0x5a:\n        case 0x5b:\n          indicator3 = 4;\n          break;\n        case 0x5d:\n        case 0x5e:\n          indicator3 = 6;\n        }\n        switch(byte8) {\n        case 0:\n          DAT_20000e71 = '\\0';\n          break;\n        case 1:\n          DAT_20000e71 = '\\x01';\n          break;\n        case 2:\n          DAT_20000e71 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e71 = '\\x03';\n          break;\n        case 4:\n          indicator4 = '\\x01';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 10:\n          indicator4 = '\\x02';\n          break;\n        case 0x11:\n          initialize_data_08000478(0,1,2);\n          break;\n        case 0x12:\n          initialize_data_08000478(2,0,1);\n          break;\n        case 0x13:\n          initialize_data_08000478(1,2,0);\n          break;\n        case 0x14:\n          DAT_20000e73 = 1;\n          break;\n        case 0x15:\n          DAT_20000e73 = 0;\n          break;\n        case 0x1c:\n        case 0x1e:\n          value = calculate_normalized_float_08008eec(byteValue,0x41200000);\n          decodedValue = decode_and_transform_data_08008590(value);\n          decodedValue = process_unsigned_numbers_08009798((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n          byte8 = calculate_value_08008ba0((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n          switch(byte8) {\n          case 0x118:\n            indicator4 = '\\x03';\n            break;\n          case 0x119:\n            indicator4 = '\\x04';\n            break;\n          default:\n            DAT_20000e70 = '\\x03';\n            break;\n          case 300:\n            indicator4 = '\\x05';\n            break;\n          case 0x12d:\n            indicator4 = '\\x06';\n          }\n          break;\n        case 0x35:\n          indicator5 = '\\x01';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          DAT_20000e8c = (char)byte8 - 0x36;\n          break;\n        case 0x50:\n          DAT_20000e71 = '\\x04';\n          break;\n        case 0x5a:\n          DAT_20000e74 = '\\x01';\n          break;\n        case 0x5b:\n          DAT_20000e74 = '\\0';\n          break;\n        case 0x5c:\n          value = calculate_normalized_float_08008eec(byteValue,0x41200000);\n          decodedValue = decode_and_transform_data_08008590(value);\n          decodedValue = process_unsigned_numbers_08009798((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n          byte8 = calculate_value_08008ba0((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n          if (byte8 == 0x398) {\n            indicator4 = '\\a';\n          }\n          else if (byte8 == 0x399) {\n            indicator4 = '\\b';\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          break;\n        case 0x5d:\n          DAT_20000e72 = '\\x01';\n          break;\n        case 0x5e:\n          DAT_20000e72 = '\\0';\n        }\n      }\n      else if (byte1 == 0x4d) {\n        if (byte8 == 0x1e) {\nLAB_08000b96:\n          indicator3 = 5;\n        }\n        else if ((int)byte8 < 0x1f) {\n          if ((int)byte8 < 3) {\n            if (-1 < (int)byte8) goto LAB_08000b96;\n          }\n          else if (byte8 - 3 < 3) {\n            indicator3 = 8;\n          }\n        }\n        switch(byte8) {\n        case 0:\n          DAT_20000e75 = '\\x01';\n          break;\n        case 1:\n          break;\n        case 2:\n        case 0x1e:\n          DAT_20000e75 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e76 = '\\x01';\n          break;\n        case 4:\n          DAT_20000e76 = -1;\n          break;\n        case 5:\n          DAT_20000e76 = '\\0';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 7:\n          DAT_20000e77 = 2;\n          break;\n        case 8:\n          DAT_20000e77 = 1;\n          break;\n        case 9:\n          DAT_20000e77 = 0;\n        }\n      }\n      if (indicator3 != 0) {\n        if (((int)(uint)byte7 >> indicator3 & 1U) == 0) {\n          byte7 = byte7 | (ushort)(1 << indicator3);\n        }\n        else {\n          DAT_20000e70 = '\\x05';\n        }\n        indicator3 = 0;\n      }\n    }\n    status = DAT_20000e70;\n    if (DAT_20000e70 == '\\0') {\n      value1 = 0;\n      parameter = 0;\n      indicator2 = '\\0';\n      indicator1 = 0;\nswitchD_08000d18_caseD_47:\n      returnValue = check_and_update_byte_0800184c(&byte1,buffer + 6,stream,&indicator1);\n      if (returnValue != 0) {\n        switch(byte1) {\n        case 0x46:\n          returnValue = check_concatenated_integers_0800923c(byteValue,0);\n          if (returnValue != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e72 == '\\0') {\n            DAT_20000e78 = process_data_0800056c(byteValue);\n          }\n          else {\n            floatValue3 = process_data_0800056c(byteValue);\n          }\n          break;\n        case 0x47:\n        case 0x4d:\n        case 0x4e:\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n          switchValue = (uint)byte1;\n          value = process_data_0800056c(byteValue);\n          buffer[switchValue - 0x49] = value;\n          break;\n        case 0x4c:\n          decodedValue = decode_and_transform_data_08008590(byteValue);\n          decodedValue = process_unsigned_numbers_08009798((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n          indicator2 = calculate_shifted_value_08008bf0((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n          break;\n        case 0x50:\n          value1 = byteValue;\n          break;\n        case 0x52:\n          parameter = process_data_0800056c(byteValue);\n          break;\n        case 0x53:\n          returnValue = is_cy_null_08009228(byteValue,0);\n          if (returnValue != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case 0x54:\n          returnValue = is_cy_null_08009228(byteValue,0);\n          if (returnValue != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          decodedValue = decode_and_transform_data_08008590(byteValue);\n          decodedValue = process_unsigned_numbers_08009798((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n          DAT_20000e88 = calculate_shifted_value_08008bf0((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n          break;\n        case 0x58:\n          buffer[3] = process_data_0800056c(byteValue);\n          byte6 = byte6 | 1;\n          break;\n        case 0x59:\n          buffer[4] = process_data_0800056c(byteValue);\n          byte6 = byte6 | 2;\n          break;\n        case 0x5a:\n          buffer[5] = process_data_0800056c(byteValue);\n          byte6 = byte6 | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      status = DAT_20000e70;\n      if (DAT_20000e70 == '\\0') {\n        if (DAT_20000ea9 != '\\a') {\n          process_and_execute_0800525c((int)DAT_20000e76);\n          process_param_08000220(DAT_20000e77);\n        }\n        if ((byte7 & 0x200) != 0) {\n          returnValue = check_and_update_data_integrity_08004d7c(DAT_20000e8c,&result3);\n          if (returnValue == 0) {\n            return '\\n';\n          }\n          DAT_20000e90 = result3;\n          DAT_20000e94 = tempVar1;\n          DAT_20000e98 = tempVar2;\n        }\n        switch(indicator4) {\n        case '\\x01':\n          returnValue = is_cy_null_08009228(value1,0);\n          if (returnValue == 0) {\n            if (DAT_20000ea9 != '\\a') {\n              process_data_08002408(value1);\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case '\\x02':\n          decodedValue = decode_and_transform_data_08008590(value1);\n          decodedValue = process_unsigned_numbers_08009798((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n          byte8 = calculate_value_08008ba0((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n          if ((((indicator2 == '\\x02') || (indicator2 == '\\x14')) && (-1 < (int)byte8)) &&\n             ((int)byte8 < 7)) {\n            if ((byte6 == 0) && (indicator2 == '\\x02')) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              if ((int)byte8 < 1) {\n                byte8 = (uint)DAT_20000e8c;\n              }\n              else {\n                byte8 = byte8 - 1;\n              }\n              returnValue = check_and_update_data_integrity_08004d7c(byte8 & 0xff,resultsArray);\n              if (returnValue == 0) {\n                return '\\n';\n              }\n              for (byte5 = 0; byte5 < 3; byte5 = byte5 + 1) {\n                if (((int)(uint)byte6 >> byte5 & 1U) != 0) {\n                  if (indicator2 == '\\x14') {\n                    switchValue = (uint)byte5;\n                    value = calculate_float_08008cd8(*(undefined4 *)(&DAT_20000e74 + (byte5 + 2) * 4),\n                                         buffer[byte5 + 3]);\n                    resultsArray[switchValue] = value;\n                  }\n                  else {\n                    resultsArray[byte5] = buffer[byte5 + 3];\n                  }\n                }\n              }\n              update_data_with_checksum_08004bf4(byte8 & 0xff,resultsArray);\n              if (byte8 == DAT_20000e8c) {\n                DAT_20000e90 = resultsArray[0];\n                DAT_20000e94 = resultsArray[1];\n                DAT_20000e98 = resultsArray[2];\n              }\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          byte6 = 0;\n          break;\n        case '\\x03':\n        case '\\x05':\n          if (byte6 != 0) {\n            for (byte4 = 0; byte4 < 3; byte4 = byte4 + 1) {\n              if (((int)(uint)byte6 >> byte4 & 1U) == 0) {\n                buffer[byte4 + 3] = *(undefined4 *)(&DAT_20000e74 + (byte4 + 2) * 4);\n              }\n              else if (DAT_20000e74 == '\\0') {\n                switchValue = (uint)byte4;\n                value = calculate_floating_point_08008cdc(buffer[byte4 + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (byte4 + 2) * 4));\n                buffer[switchValue + 3] = value;\n              }\n              else {\n                normalizedValue = buffer[byte4 + 3];\n                value = calculate_floating_point_08008cdc(*(undefined4 *)(&DAT_20000e70 + (byte4 + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (byte4 + 10) * 4));\n                switchValue = (uint)byte4;\n                value = calculate_floating_point_08008cdc(normalizedValue,value);\n                buffer[switchValue + 3] = value;\n              }\n            }\n            process_alarm_data_08001e98(buffer[3],buffer[4],buffer[5],DAT_20000ed0,0);\n          }\n          if (indicator4 == '\\x05') {\n            returnValue = check_and_update_data_integrity_08004d7c(7,resultsArray + 3);\n            if (returnValue == 0) {\n              return '\\n';\n            }\n          }\n          else {\n            returnValue = check_and_update_data_integrity_08004d7c(6,resultsArray + 3);\n            if (returnValue == 0) {\n              return '\\n';\n            }\n          }\n          process_alarm_data_08001e98(resultsArray[3],result1,result2,DAT_20000ed0,0);\n          DAT_20000e7c = resultsArray[3];\n          DAT_20000e80 = result1;\n          DAT_20000e84 = result2;\n          byte6 = 0;\n          break;\n        case '\\x04':\n        case '\\x06':\n          if (indicator4 == '\\x06') {\n            update_data_with_checksum_08004bf4(7,&DAT_20000e7c);\n          }\n          else {\n            update_data_with_checksum_08004bf4(6,&DAT_20000e7c);\n          }\n          break;\n        case '\\a':\n          if (byte6 == 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          else {\n            for (byte3 = 0; byte3 < 3; byte3 = byte3 + 1) {\n              if (((int)(uint)byte6 >> byte3 & 1U) != 0) {\n                value = calculate_float_08008cd8(*(undefined4 *)(&DAT_20000e74 + (byte3 + 2) * 4),\n                                     *(undefined4 *)(&DAT_20000e70 + (byte3 + 8) * 4));\n                switchValue = (uint)byte3;\n                value = calculate_float_08008cd8(value,buffer[byte3 + 3]);\n                *(undefined4 *)(&DAT_20000e74 + (switchValue + 10) * 4) = value;\n              }\n            }\n          }\n          byte6 = 0;\n          break;\n        case '\\b':\n          memset_0800b430(&DAT_20000e9c,0,0xc);\n        }\n        if (((byte7 & 4) != 0) || (byte6 != 0)) {\n          if ((DAT_20000e72 != '\\0') &&\n             ((returnValue = is_cy_null_08009228(floatValue3,0), returnValue != 0 && (DAT_20000e71 != '\\x04')))) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (((indicator5 != '\\0') && (DAT_20000e71 != '\\0')) && (DAT_20000e71 != '\\x01')) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          for (byte2 = 0; byte2 < 3; byte2 = byte2 + 1) {\n            if (((int)(uint)byte6 >> byte2 & 1U) == 0) {\n              buffer[byte2 + 3] = *(undefined4 *)(&DAT_20000e74 + (byte2 + 2) * 4);\n            }\n            else if (indicator5 == '\\0') {\n              if (DAT_20000e74 == '\\0') {\n                switchValue = (uint)byte2;\n                value = calculate_floating_point_08008cdc(buffer[byte2 + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (byte2 + 2) * 4));\n                buffer[switchValue + 3] = value;\n              }\n              else {\n                normalizedValue = buffer[byte2 + 3];\n                value = calculate_floating_point_08008cdc(*(undefined4 *)(&DAT_20000e70 + (byte2 + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (byte2 + 10) * 4));\n                switchValue = (uint)byte2;\n                value = calculate_floating_point_08008cdc(normalizedValue,value);\n                buffer[switchValue + 3] = value;\n              }\n            }\n          }\n          switch(DAT_20000e71) {\n          case '\\0':\n            if (byte6 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              process_alarm_data_08001e98(buffer[3],buffer[4],buffer[5],DAT_20000ed0,0);\n            }\n            break;\n          case '\\x01':\n            if (byte6 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              value = floatValue3;\n              if (DAT_20000e72 == '\\0') {\n                value = DAT_20000e78;\n              }\n              process_alarm_data_08001e98(buffer[3],buffer[4],buffer[5],value,DAT_20000e72);\n            }\n            break;\n          case '\\x02':\n          case '\\x03':\n            byte6 = byte6 & ~(byte)(1 << DAT_20000e8b);\n            if ((byte6 == 0) ||\n               (((returnValue = check_concatenation_result_08009214(parameter,0), returnValue != 0 &&\n                 (returnValue = check_concatenation_result_08009214(buffer[DAT_20000e89],0), returnValue != 0)) &&\n                (returnValue = check_concatenation_result_08009214(buffer[DAT_20000e8a],0), returnValue != 0)))) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              returnValue = check_concatenation_result_08009214(parameter,0);\n              if (returnValue == 0) {\n                floatValue2 = calculate_float_08008cd8(buffer[DAT_20000e89 + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e89 + 2) * 4));\n                floatValue1 = calculate_float_08008cd8(buffer[DAT_20000e8a + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e8a + 2) * 4));\n                memset_0800b430(buffer,0,0xc);\n                value = calculate_normalized_float_08008eec(parameter,0x40800000);\n                value = calculate_normalized_float_08008eec(value,parameter);\n                normalizedValue = calculate_normalized_float_08008eec(floatValue2,floatValue2);\n                value = calculate_float_08008cd8(value,normalizedValue);\n                normalizedValue = calculate_normalized_float_08008eec(floatValue1,floatValue1);\n                calculationResult3 = calculate_float_08008cd8(value,normalizedValue);\n                returnValue = is_cy_null_08009228(calculationResult3,0);\n                if (returnValue != 0) {\n                  DAT_20000e70 = 4;\n                  return '\\x04';\n                }\n                decodedValue = decode_and_transform_data_08008590(calculationResult3);\n                decodedValue = start_application_080098d0((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n                calculationResult1 = decode_and_transform_data_08008590(floatValue2);\n                calculationResult2 = decode_and_transform_data_08008590(floatValue1);\n                calculationResult1 = calculate_hypotenuse_0800981c((int)calculationResult1,(int)((ulonglong)calculationResult1 >> 0x20),(int)calculationResult2,\n                                     (int)((ulonglong)calculationResult2 >> 0x20));\n                decodedValue = calculate_floating_point_08008894((int)decodedValue,(uint)((ulonglong)decodedValue >> 0x20) ^ 0x80000000,\n                                     (int)calculationResult1,(int)((ulonglong)calculationResult1 >> 0x20));\n                calculationResult3 = reversed_binary_operation_08008c30((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n                if (DAT_20000e71 == '\\x03') {\n                  calculationResult3 = calculationResult3 ^ 0x80000000;\n                }\n                returnValue = is_cy_null_08009228(parameter,0);\n                if (returnValue != 0) {\n                  calculationResult3 = calculationResult3 ^ 0x80000000;\n                  parameter = parameter ^ 0x80000000;\n                }\n                value = calculate_normalized_float_08008eec(floatValue1,calculationResult3);\n                value = calculate_float_08008cd8(floatValue2,value);\n                switchValue = (uint)DAT_20000e89;\n                value = calculate_normalized_float_08008eec(value,0x3f000000);\n                buffer[switchValue] = value;\n                value = calculate_normalized_float_08008eec(floatValue2,calculationResult3);\n                value = calculate_floating_point_08008cdc(value,floatValue1);\n                switchValue = (uint)DAT_20000e8a;\n                value = calculate_normalized_float_08008eec(value,0x3f000000);\n                buffer[switchValue] = value;\n              }\n              else {\n                decodedValue = decode_and_transform_data_08008590(buffer[DAT_20000e89]);\n                calculationResult1 = decode_and_transform_data_08008590(buffer[DAT_20000e8a]);\n                decodedValue = calculate_hypotenuse_0800981c((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20),(int)calculationResult1,\n                                     (int)((ulonglong)calculationResult1 >> 0x20));\n                parameter = reversed_binary_operation_08008c30((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n              }\n              boolValue = DAT_20000e71 == '\\x02';\n              value = floatValue3;\n              if (DAT_20000e72 == '\\0') {\n                value = DAT_20000e78;\n              }\n              process_alarm_data_08001f00(&DAT_20000e7c,buffer + 3,buffer,DAT_20000e89,DAT_20000e8a,\n                           DAT_20000e8b,value,DAT_20000e72,parameter,boolValue);\n            }\n            break;\n          case '\\x04':\n            if (byte6 != 0) {\n              DAT_20000e70 = '\\x06';\n            }\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          DAT_20000e7c = buffer[3];\n          DAT_20000e80 = buffer[4];\n          DAT_20000e84 = buffer[5];\n        }\n        status = DAT_20000e70;\n        if (DAT_20000e75 != '\\0') {\n          process_data_08002fd4();\n          DAT_20000eb8 = 0;\n          if (DAT_20000e75 == '\\x02') {\n            initialize_and_check_system_080025e8();\n            status = DAT_20000e70;\n          }\n          else {\n            DAT_20000e75 = '\\0';\n            status = DAT_20000e70;\n          }\n        }\n      }\n    }\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080005b4": "process_byte_stream_080005b4",
                "param_1": "stream",
                "iVar1": "returnValue",
                "uVar2": "value",
                "cVar3": "status",
                "uVar4": "switchValue",
                "uVar5": "normalizedValue",
                "uVar6": "decodedValue",
                "uVar7": "calculationResult1",
                "uVar8": "calculationResult2",
                "local_94": "resultsArray",
                "local_84": "result1",
                "local_80": "result2",
                "local_7c": "result3",
                "uStack_78": "tempVar1",
                "uStack_74": "tempVar2",
                "auStack_70": "buffer",
                "local_58": "byteValue",
                "local_52": "byte1",
                "local_51": "indicator1",
                "local_50": "floatValue1",
                "local_4c": "floatValue2",
                "local_45": "boolValue",
                "local_44": "calculationResult3",
                "local_3d": "byte2",
                "local_3c": "byte3",
                "local_3b": "byte4",
                "local_3a": "byte5",
                "local_39": "indicator2",
                "local_38": "parameter",
                "local_34": "value1",
                "local_2f": "indicator3",
                "local_2e": "indicator4",
                "local_2d": "indicator5",
                "local_2c": "floatValue3",
                "local_27": "byte6",
                "local_26": "byte7",
                "local_24": "byte8"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008bf0",
                "FUN_08009798",
                "FUN_08000478",
                "FUN_0800184c",
                "FUN_08008eec",
                "FUN_08009228",
                "FUN_08008c30",
                "FUN_0800b430",
                "FUN_0800923c",
                "FUN_0800056c",
                "FUN_08004d7c",
                "FUN_08001f00",
                "FUN_08008cd8",
                "FUN_080025e8",
                "FUN_08004bf4",
                "FUN_08001e98",
                "FUN_08002408",
                "FUN_08008590",
                "FUN_0800525c",
                "FUN_08002fd4",
                "FUN_08009214",
                "FUN_0800981c",
                "FUN_080098d0",
                "FUN_08008894",
                "FUN_08008ba0",
                "FUN_08000220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800184c": {
            "entrypoint": "0x0800184c",
            "current_name": "check_and_update_byte_0800184c",
            "code": "\nundefined4 checkAndUpdateByte_0800184c(byte *output,undefined4 bufferSize,int dataPtr,byte *index)\n\n{\n  int parseResult;\n  undefined4 successFlag;\n  \n  if (*(char *)(dataPtr + (uint)*index) == '\\0') {\n    successFlag = 0;\n  }\n  else {\n    *output = *(byte *)(dataPtr + (uint)*index);\n    if ((*output < 0x41) || (0x5a < *output)) {\n      DAT_20000e70 = 2;\n      successFlag = 0;\n    }\n    else {\n      *index = *index + 1;\n      parseResult = parse_integer_string_08002638(dataPtr,index,bufferSize);\n      if (parseResult == 0) {\n        DAT_20000e70 = 1;\n        successFlag = 0;\n      }\n      else {\n        successFlag = 1;\n      }\n    }\n  }\n  return successFlag;\n}\n\n",
            "renaming": {
                "FUN_0800184c": "check_and_update_byte_0800184c",
                "param_1": "output",
                "param_2": "bufferSize",
                "param_3": "dataPtr",
                "param_4": "index",
                "iVar1": "parseResult",
                "uVar2": "successFlag"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08002638"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018cc": {
            "entrypoint": "0x080018cc",
            "current_name": "update_config_data_080018cc",
            "code": "\n\n\nvoid updateConfigData_080018cc(uint configUpdate)\n\n{\n  _DAT_40021014 = configUpdate | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018cc": "update_config_data_080018cc",
                "param_1": "configUpdate"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018fc": {
            "entrypoint": "0x080018fc",
            "current_name": "update_permissions_080018fc",
            "code": "\n\n\nvoid updatePermissions_080018fc(uint newPermissions)\n\n{\n  _DAT_40021014 = newPermissions | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018fc": "update_permissions_080018fc",
                "param_1": "newPermissions"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800192c": {
            "entrypoint": "0x0800192c",
            "current_name": "update_flag_from_data_0800192c",
            "code": "\nvoid updateFlagFromData_0800192c(void)\n\n{\n  DAT_20000e4c = (uint)((DAT_20000ee4 & 8) != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800192c": "update_flag_from_data_0800192c"
            },
            "calling": [
                "FUN_08001ddc",
                "FUN_08004e30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800195c": {
            "entrypoint": "0x0800195c",
            "current_name": "initialize_and_check_system_0800195c",
            "code": "\nvoid initialize_and_check_system_0800195c(void)\n\n{\n  if ((DAT_20000ea9 != '\\x06') && ((DAT_20000eaa & 0x20) == 0)) {\n    initialize_and_check_system_0800195c_080025e8();\n    DAT_20000eaa = DAT_20000eaa | 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800195c": "initialize_and_check_system_0800195c"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001994": {
            "entrypoint": "0x08001994",
            "current_name": "calculate_and_update_config_data_08001994",
            "code": "\nvoid calculateAndUpdateConfigData_08001994(byte flags,char condition,char toggle,undefined4 data)\n\n{\n  undefined4 result1;\n  uint result2;\n  undefined8 result3;\n  undefined8 result4;\n  byte counter;\n  uint product1;\n  uint product2;\n  uint product3;\n  ushort config1;\n  uint product4;\n  int shiftedValue;\n  undefined4 reversedBinaryOp;\n  uint maxProduct;\n  uint bitwiseOr;\n  ushort config2;\n  uint time;\n  uint total;\n  int difference;\n  int count1;\n  int count2;\n  int count3;\n  ushort config3;\n  uint minProduct;\n  char increment;\n  \n  increment = '\\0';\n  memset_0800b430(&product1,0,0xc);\n  if ((flags & 1) != 0) {\n    increment = increment + '\\x01';\n    result3 = decode_and_transform_data_08008590(DAT_20000ebc);\n    product1 = calculate_product_080095b8((int)result3,(int)((ulonglong)result3 >> 0x20));\n  }\n  if ((flags & 2) != 0) {\n    increment = increment + '\\x01';\n    result3 = decode_and_transform_data_08008590(DAT_20000ec0);\n    product2 = calculate_product_080095b8((int)result3,(int)((ulonglong)result3 >> 0x20));\n  }\n  if ((flags & 4) != 0) {\n    increment = increment + '\\x01';\n    result3 = decode_and_transform_data_08008590(DAT_20000ec4);\n    product3 = calculate_product_080095b8((int)result3,(int)((ulonglong)result3 >> 0x20));\n  }\n  result2 = product3;\n  if (product3 < product2) {\n    result2 = product2;\n  }\n  maxProduct = product1;\n  if (product1 < result2) {\n    maxProduct = result2;\n  }\n  result3 = bitwise_shift_0800854c(maxProduct);\n  result4 = bitwise_shift_0800854c(increment);\n  result4 = start_application_080098d0((int)result4,(int)((ulonglong)result4 >> 0x20));\n  result3 = calculate_floating_point_08008894((int)result3,(int)((ulonglong)result3 >> 0x20),(int)result4,\n                       (int)((ulonglong)result4 >> 0x20));\n  reversedBinaryOp = reversed_binary_operation_08008c30((int)result3,(int)((ulonglong)result3 >> 0x20));\n  result1 = calculate_normalized_float_08008eec(DAT_20000edc,reversedBinaryOp);\n  result1 = floating_point_addition_08009054(result1,0x453b8000);\n  result3 = decode_and_transform_data_08008590(result1);\n  result3 = improved_calculation_08009318((int)result3,(int)((ulonglong)result3 >> 0x20));\n  shiftedValue = calculate_shifted_value_08008bf0((int)result3,(int)((ulonglong)result3 >> 0x20));\n  result3 = bitwise_shift_0800854c(increment);\n  result3 = start_application_080098d0((int)result3,(int)((ulonglong)result3 >> 0x20));\n  result4 = decode_and_transform_data_08008590(data);\n  result3 = calculate_multiplication_and_addition_08008640((int)result3,(int)((ulonglong)result3 >> 0x20),(int)result4,\n                       (int)((ulonglong)result4 >> 0x20));\n  result1 = reversed_binary_operation_08008c30((int)result3,(int)((ulonglong)result3 >> 0x20));\n  result1 = calculate_normalized_float_08008eec(reversedBinaryOp,result1);\n  result1 = floating_point_addition_08009054(0x4c64e1c0,result1);\n  result3 = decode_and_transform_data_08008590(result1);\n  product4 = calculate_product_080095b8((int)result3,(int)((ulonglong)result3 >> 0x20));\n  minProduct = 75000;\n  if (product4 < 75000) {\n    minProduct = product4;\n  }\n  config1 = DAT_20000ed4;\n  config3 = DAT_20000ed6 ^ DAT_20000ee6 & 0xaa0;\n  if (condition == '\\0') {\n    config3 = config3 ^ 0xaa0;\n  }\n  update_permissions_080018fc(config3);\n  update_config_data_080018cc(config1);\n  count1 = -(maxProduct >> 1);\n  difference = minProduct - DAT_20000ec9;\n  total = 0;\n  time = 10000;\n  counter = flags;\n  count2 = count1;\n  count3 = count1;\n  while( true ) {\n    config2 = config1;\n    bitwiseOr = calculate_bitwise_or_080078f4();\n    if (toggle == '\\0') {\n      bitwiseOr = bitwiseOr ^ 0x1e;\n    }\n    if (((counter & 1) != 0) && (count3 = count3 + product1, 0 < count3)) {\n      if ((bitwiseOr & 0x10) == 0) {\n        counter = counter & 0xfe;\n      }\n      else {\n        config2 = config2 ^ 0x10;\n      }\n      count3 = count3 - maxProduct;\n    }\n    if (((counter & 2) != 0) && (count2 = count2 + product2, 0 < count2)) {\n      if ((bitwiseOr & 8) == 0) {\n        counter = counter & 0xfd;\n      }\n      else {\n        config2 = config2 ^ 0x440;\n      }\n      count2 = count2 - maxProduct;\n    }\n    if (((counter & 4) != 0) && (count1 = count1 + product3, 0 < count1)) {\n      if ((bitwiseOr & 4) == 0) {\n        counter = counter & 0xfb;\n      }\n      else {\n        config2 = config2 ^ 0x100;\n      }\n      count1 = count1 - maxProduct;\n    }\n    if ((counter == 0) || ((DAT_20000eaa & 0x10) != 0)) break;\n    update_config_data_080018cc(config2);\n    FUNC_08002828(DAT_20000ec9);\n    update_config_data_080018cc(config1);\n    FUNC_08002828(difference);\n    if ((product4 < minProduct) && (time = minProduct + time, 20000 < time)) {\n      time = time - 20000;\n      total = shiftedValue + total;\n      minProduct = 60000000 / total;\n      if (minProduct < product4) {\n        minProduct = product4;\n      }\n      difference = minProduct - DAT_20000ec9;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001994": "calculate_and_update_config_data_08001994",
                "param_1": "flags",
                "param_2": "condition",
                "param_3": "toggle",
                "param_4": "data",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "local_61": "counter",
                "local_5c": "product1",
                "local_58": "product2",
                "local_54": "product3",
                "local_4e": "config1",
                "local_4c": "product4",
                "local_48": "shiftedValue",
                "local_44": "reversedBinaryOp",
                "local_40": "maxProduct",
                "local_3c": "bitwiseOr",
                "local_36": "config2",
                "local_34": "time",
                "local_30": "total",
                "local_2c": "difference",
                "local_28": "count1",
                "local_24": "count2",
                "local_20": "count3",
                "local_1a": "config3",
                "local_18": "minProduct",
                "local_11": "increment"
            },
            "calling": [
                "FUN_08001d4c"
            ],
            "called": [
                "FUN_080095b8",
                "FUN_08008bf0",
                "FUN_0800854c",
                "FUN_08009054",
                "FUN_08009318",
                "FUN_080078f4",
                "FUN_08008eec",
                "FUN_080018cc",
                "FUN_08002828",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30",
                "FUN_080098d0",
                "FUN_080018fc",
                "FUN_0800b430",
                "FUN_08008894"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d4c": {
            "entrypoint": "0x08001d4c",
            "current_name": "initialize_and_update_config_data_08001d4c",
            "code": "\nvoid initialize_and_update_config_data_08001d4c(void)\n\n{\n  char temp;\n  char loop_count;\n  \n  initialize_global_variables_08005790();\n  calculate_and_update_config_data_08001994(4,1,0,DAT_20000eec);\n  calculate_and_update_config_data_08001994(3,1,0,DAT_20000eec);\n  FUNC_08002814(DAT_20000ef0);\n  loop_count = '\\x02';\n  while( true ) {\n    temp = loop_count + -1;\n    if (loop_count == '\\0') break;\n    calculate_and_update_config_data_08001994(7,0,1,DAT_20000ee8);\n    FUNC_08002814(DAT_20000ef0);\n    loop_count = temp;\n    if ('\\0' < temp) {\n      calculate_and_update_config_data_08001994(7,1,0,DAT_20000ee8);\n      FUNC_08002814(DAT_20000ef0);\n    }\n  }\n  clear_flags_and_check_condition_080057e4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d4c": "initialize_and_update_config_data_08001d4c",
                "cVar1": "temp",
                "local_9": "loop_count"
            },
            "calling": [
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_08001994",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ddc": {
            "entrypoint": "0x08001ddc",
            "current_name": "initialize_system_08001ddc",
            "code": "\nvoid initialize_system_08001ddc(void)\n\n{\n  FUNC_08008244();\n  initialize_and_configure();\n  initialize_and_check_flags();\n  clear_data(&DAT_20000ea8,0,0x14);\n  DAT_20000ea8 = '\\x01';\n  DAT_20000ea9 = '\\x01';\n  do {\n    if (DAT_20000ea8 != '\\0') {\n      FUNC_080082ba();\n      initialize_and_reset_data();\n      initialize_data();\n      initialize_grbl();\n      initialize_setup();\n      initialize_and_reset_system();\n      update_flag_from_data();\n      initialize_data();\n      initialize_and_perform_floating_point_additions();\n      DAT_20000ea8 = '\\0';\n      DAT_20000eaa = 0;\n      if ((DAT_20000ee4 & 2) != 0) {\n        DAT_20000eb8 = 1;\n      }\n      if ((DAT_20000ea9 == '\\x01') && ((DAT_20000ee4 & 0x10) != 0)) {\n        DAT_20000ea9 = '\\x06';\n      }\n      if (DAT_20000ea9 == '\\x06') {\n        display_message(2);\n      }\n      else {\n        DAT_20000ea9 = '\\0';\n        process_data();\n      }\n    }\n    process_alarms();\n    process_and_initialize_input();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001ddc": "initialize_system_08001ddc",
                "initialize_and_configure_080051b4": "initialize_and_configure",
                "initialize_and_check_flags_0800583c": "initialize_and_check_flags",
                "memset_0800b430": "clear_data",
                "initialize_and_reset_data_08002f24": "initialize_and_reset_data",
                "initialize_data_080004ac": "initialize_data",
                "initialize_grbl_080039a0": "initialize_grbl",
                "initialize_setup_08005238": "initialize_setup",
                "initialize_and_reset_system_080001f8": "initialize_and_reset_system",
                "update_flag_from_data_0800192c": "update_flag_from_data",
                "initialize_data_08005814": "initialize_data",
                "initialize_and_perform_floating_point_additions_0800283a": "initialize_and_perform_floating_point_additions",
                "display_message_080041a0": "display_message",
                "process_data_080039bc": "process_data",
                "process_alarms_08003a74": "process_alarms",
                "process_and_initialize_input_08003f34": "process_and_initialize_input"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800583c",
                "FUN_08005814",
                "FUN_080001f8",
                "FUN_080082ba",
                "FUN_08003a74",
                "FUN_08008244",
                "FUN_08002f24",
                "FUN_080004ac",
                "FUN_08003f34",
                "FUN_0800283a",
                "FUN_080039a0",
                "FUN_08005238",
                "FUN_080041a0",
                "FUN_0800b430",
                "FUN_080039bc",
                "FUN_0800192c",
                "FUN_080051b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e98": {
            "entrypoint": "0x08001e98",
            "current_name": "process_alarm_data_08001e98",
            "code": "\nvoid processAlarmData_08001e98(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined param5)\n\n{\n  int isEqual;\n  \n  if (DAT_20000ea9 != '\\a') {\n    do {\n      process_alarms_08003a74();\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n      isEqual = check_equality_08002fac();\n    } while (isEqual != 0);\n    calculate_product_and_update_data_08003004(param1,param2,param3,param4,param5);\n    if (DAT_20000ea9 == '\\0') {\n      DAT_20000ea9 = '\\x02';\n    }\n    if (DAT_20000eb8 != '\\0') {\n      initialize_if_needed_0800585c();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e98": "process_alarm_data_08001e98",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "isEqual"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08003004",
                "FUN_0800585c",
                "FUN_08003a74",
                "FUN_08002fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f00": {
            "entrypoint": "0x08001f00",
            "current_name": "process_alarm_data_08001f00",
            "code": "\nvoid processAlarmData_08001f00(int param1,undefined4 *param2,int param3,byte param4,byte param5,byte param6\n                 ,undefined4 param7,char param8,undefined4 param9,char param10)\n\n{\n  undefined4 normalizedFloat1;\n  undefined4 normalizedFloat2;\n  int checkResult;\n  uint floatResult;\n  undefined8 decodedResult1;\n  undefined8 decodedResult2;\n  uint floatingPointArray [4];\n  undefined4 localVariable1;\n  undefined4 localVariable2;\n  undefined4 localVariable3;\n  undefined4 localVariable4;\n  undefined4 localVariable5;\n  undefined4 localVariable6;\n  ushort localVariable7;\n  undefined4 localVariable8;\n  undefined4 localVariable9;\n  undefined4 localVariable10;\n  uint localVariable11;\n  undefined4 localVariable12;\n  undefined4 localVariable13;\n  char localVariable14;\n  ushort localVariable15;\n  undefined4 localVariable16;\n  uint localVariable17;\n  uint localVariable18;\n  \n  localVariable13 = calculate_floating_point_08008cdc(*(undefined4 *)((uint)param4 * 4 + param1),\n                          *(undefined4 *)((uint)param4 * 4 + param3));\n  localVariable12 = calculate_floating_point_08008cdc(*(undefined4 *)((uint)param5 * 4 + param1),\n                          *(undefined4 *)((uint)param5 * 4 + param3));\n  localVariable11 = calculate_float_08008cd8(param2[param6],*(undefined4 *)((uint)param6 * 4 + param1));\n  localVariable18 = *(uint *)((uint)param4 * 4 + param3) ^ 0x80000000;\n  localVariable17 = *(uint *)((uint)param5 * 4 + param3) ^ 0x80000000;\n  localVariable10 = calculate_float_08008cd8(param2[param4],localVariable13);\n  localVariable9 = calculate_float_08008cd8(param2[param5],localVariable12);\n  normalizedFloat1 = calculate_normalized_float_08008eec(localVariable18,localVariable9);\n  normalizedFloat2 = calculate_normalized_float_08008eec(localVariable17,localVariable10);\n  normalizedFloat1 = calculate_float_08008cd8(normalizedFloat1,normalizedFloat2);\n  decodedResult1 = decode_and_transform_data_08008590(normalizedFloat1);\n  normalizedFloat1 = calculate_normalized_float_08008eec(localVariable18,localVariable10);\n  normalizedFloat2 = calculate_normalized_float_08008eec(localVariable17,localVariable9);\n  normalizedFloat1 = calculate_floating_point_08008cdc(normalizedFloat1,normalizedFloat2);\n  decodedResult2 = decode_and_transform_data_08008590(normalizedFloat1);\n  decodedResult1 = compute_floating_point_value_thunk_08009990((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20),(int)decodedResult2,\n                             (int)((ulonglong)decodedResult2 >> 0x20));\n  localVariable16 = reversed_binary_operation_08008c30((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n  if (param10 == '\\0') {\n    checkResult = check_concatenated_integers_0800923c(localVariable16,0);\n    if (checkResult != 0) {\n      decodedResult1 = decode_and_transform_data_08008590(localVariable16);\n      decodedResult1 = perform_unsigned_integer_operation_080082d4((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20),0x54442d18,0x401921fb);\n      localVariable16 = reversed_binary_operation_08008c30((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n    }\n  }\n  else {\n    checkResult = check_concatenation_result_08009250(localVariable16,0);\n    if (checkResult != 0) {\n      decodedResult1 = decode_and_transform_data_08008590(localVariable16);\n      decodedResult1 = perform_operation_080082d0((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20),0x54442d18,0x401921fb);\n      localVariable16 = reversed_binary_operation_08008c30((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n    }\n  }\n  normalizedFloat1 = calculate_normalized_float_08008eec(localVariable16,param9);\n  decodedResult1 = decode_and_transform_data_08008590(normalizedFloat1);\n  decodedResult2 = decode_and_transform_data_08008590(localVariable11 & 0x7fffffff);\n  decodedResult1 = calculate_hypotenuse_0800981c((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20),(int)decodedResult2,\n                       (int)((ulonglong)decodedResult2 >> 0x20));\n  localVariable8 = reversed_binary_operation_08008c30((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n  checkResult = check_concatenation_result_08009214(localVariable8,0);\n  if (checkResult == 0) {\n    normalizedFloat1 = floating_point_addition_08009054(localVariable8,DAT_20000ed8);\n    decodedResult1 = decode_and_transform_data_08008590(normalizedFloat1);\n    decodedResult1 = calculate_result_080094c0((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n    localVariable7 = calculate_shifted_value_08008bf0((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n    if (param8 != '\\0') {\n      normalizedFloat1 = convert_unsigned_to_twos_complement_08008e44(localVariable7);\n      param7 = calculate_normalized_float_08008eec(param7,normalizedFloat1);\n    }\n    normalizedFloat1 = convert_unsigned_to_twos_complement_08008e44(localVariable7);\n    localVariable6 = floating_point_addition_08009054(localVariable16,normalizedFloat1);\n    normalizedFloat1 = convert_unsigned_to_twos_complement_08008e44(localVariable7);\n    localVariable5 = floating_point_addition_08009054(localVariable11,normalizedFloat1);\n    decodedResult1 = decode_and_transform_data_08008590(localVariable6);\n    decodedResult1 = calculate_multiplication_and_addition_08008640((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20),0,0x3fe00000);\n    decodedResult2 = decode_and_transform_data_08008590(localVariable6);\n    decodedResult1 = calculate_multiplication_and_addition_08008640((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20),(int)decodedResult2,\n                         (int)((ulonglong)decodedResult2 >> 0x20));\n    decodedResult1 = perform_operation_080082d0(0,0x3ff00000,(int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n    localVariable4 = reversed_binary_operation_08008c30((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n    localVariable3 = localVariable6;\n    localVariable14 = '\\0';\n    floatingPointArray[param6] = *(uint *)(param1 + (uint)param6 * 4);\n    for (localVariable15 = 1; localVariable15 < localVariable7; localVariable15 = localVariable15 + 1) {\n      if ((int)localVariable14 < (int)(uint)DAT_20000efa) {\n        normalizedFloat1 = calculate_normalized_float_08008eec(localVariable18,localVariable3);\n        normalizedFloat2 = calculate_normalized_float_08008eec(localVariable17,localVariable4);\n        floatingPointArray[3] = calculate_floating_point_08008cdc(normalizedFloat1,normalizedFloat2);\n        normalizedFloat1 = calculate_normalized_float_08008eec(localVariable18,localVariable4);\n        normalizedFloat2 = calculate_normalized_float_08008eec(localVariable17,localVariable3);\n        localVariable18 = calculate_float_08008cd8(normalizedFloat1,normalizedFloat2);\n        localVariable17 = floatingPointArray[3];\n        localVariable14 = localVariable14 + '\\x01';\n      }\n      else {\n        normalizedFloat1 = convert_unsigned_to_twos_complement_08008e44(localVariable15);\n        normalizedFloat1 = calculate_normalized_float_08008eec(normalizedFloat1,localVariable6);\n        decodedResult1 = decode_and_transform_data_08008590(normalizedFloat1);\n        decodedResult1 = process_result_08009410((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n        localVariable2 = reversed_binary_operation_08008c30((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n        normalizedFloat1 = convert_unsigned_to_twos_complement_08008e44(localVariable15);\n        normalizedFloat1 = calculate_normalized_float_08008eec(normalizedFloat1,localVariable6);\n        decodedResult1 = decode_and_transform_data_08008590(normalizedFloat1);\n        decodedResult1 = process_floating_point_080096e8((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n        localVariable1 = reversed_binary_operation_08008c30((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n        normalizedFloat1 = calculate_normalized_float_08008eec(*(uint *)((uint)param4 * 4 + param3) ^ 0x80000000,localVariable2);\n        normalizedFloat2 = calculate_normalized_float_08008eec(*(undefined4 *)((uint)param5 * 4 + param3),localVariable1);\n        localVariable18 = calculate_floating_point_08008cdc(normalizedFloat1,normalizedFloat2);\n        normalizedFloat1 = calculate_normalized_float_08008eec(*(uint *)((uint)param4 * 4 + param3) ^ 0x80000000,localVariable1);\n        normalizedFloat2 = calculate_normalized_float_08008eec(*(undefined4 *)((uint)param5 * 4 + param3),localVariable2);\n        localVariable17 = calculate_float_08008cd8(normalizedFloat1,normalizedFloat2);\n        localVariable14 = '\\0';\n      }\n      floatResult = calculate_floating_point_08008cdc(localVariable13,localVariable18);\n      floatingPointArray[param4] = floatResult;\n      floatResult = calculate_floating_point_08008cdc(localVariable12,localVariable17);\n      floatingPointArray[param5] = floatResult;\n      floatResult = calculate_floating_point_08008cdc(floatingPointArray[param6],localVariable5);\n      floatingPointArray[param6] = floatResult;\n      process_alarm_data_08001e98(floatingPointArray[0],floatingPointArray[1],floatingPointArray[2],param7,param8);\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n    }\n    process_alarm_data_08001e98(*param2,param2[1],param2[2],param7,param8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001f00": "process_alarm_data_08001f00",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "param_10": "param10",
                "uVar1": "normalizedFloat1",
                "uVar2": "normalizedFloat2",
                "iVar3": "checkResult",
                "uVar4": "floatResult",
                "uVar5": "decodedResult1",
                "uVar6": "decodedResult2",
                "local_6c": "floatingPointArray",
                "local_5c": "localVariable1",
                "local_58": "localVariable2",
                "local_54": "localVariable3",
                "local_50": "localVariable4",
                "local_4c": "localVariable5",
                "local_48": "localVariable6",
                "local_42": "localVariable7",
                "local_40": "localVariable8",
                "local_3c": "localVariable9",
                "local_38": "localVariable10",
                "local_34": "localVariable11",
                "local_30": "localVariable12",
                "local_2c": "localVariable13",
                "local_27": "localVariable14",
                "local_26": "localVariable15",
                "local_24": "localVariable16",
                "local_20": "localVariable17",
                "local_1c": "localVariable18"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_080082d4",
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_080096e8",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_080082d0",
                "FUN_08001e98",
                "FUN_08008eec",
                "thunk_FUN_08009990",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_08009410",
                "FUN_08008c30",
                "FUN_08009214",
                "FUN_0800981c",
                "FUN_0800923c",
                "FUN_08009250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002408": {
            "entrypoint": "0x08002408",
            "current_name": "process_data_08002408",
            "code": "\nvoid process_data_08002408(undefined4 data)\n\n{\n  undefined2 result;\n  undefined4 normalizedFloat1;\n  undefined4 twosComplement;\n  undefined8 decodedData;\n  ushort shiftedValue;\n  \n  normalizedFloat1 = calculate_normalized_float_08008eec(data,0x41a00000);\n  decodedData = decode_and_transform_data_08008590(normalizedFloat1);\n  decodedData = calculate_result_080094c0((int)decodedData,(int)((ulonglong)decodedData >> 0x20));\n  shiftedValue = calculate_shifted_value_08008bf0((int)decodedData,(int)((ulonglong)decodedData >> 0x20));\n  process_data_08002408_08002fd4();\n  normalizedFloat1 = calculate_normalized_float_08008eec(data,0x447a0000);\n  twosComplement = convert_unsigned_to_twos_complement_08008e44((uint)shiftedValue * 0x32);\n  normalizedFloat1 = calculate_float_08008cd8(normalizedFloat1,twosComplement);\n  decodedData = decode_and_transform_data_08008590(normalizedFloat1);\n  decodedData = calculate_result_080094c0((int)decodedData,(int)((ulonglong)decodedData >> 0x20));\n  result = calculate_shifted_value_08008bf0((int)decodedData,(int)((ulonglong)decodedData >> 0x20));\n  FUNC_08002814(result);\n  while ((shiftedValue != 0 && (process_alarms_08003a74(), DAT_20000ea8 == '\\0'))) {\n    track_data_value_080002a0(0x32);\n    shiftedValue = shiftedValue - 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002408": "process_data_08002408",
                "param_1": "data",
                "uVar1": "result",
                "uVar2": "normalizedFloat1",
                "uVar3": "twosComplement",
                "uVar4": "decodedData",
                "local_12": "shiftedValue"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_08002fd4",
                "FUN_08003a74",
                "FUN_080002a0",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024c4": {
            "entrypoint": "0x080024c4",
            "current_name": "initialize_system_080024c4",
            "code": "\nvoid initialize_system_080024c4(void)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  char isAlarm3Enabled;\n  char isAlarm2Enabled;\n  char isAlarm1Enabled;\n  \n  DAT_20000ea9 = 5;\n  DAT_20000e4c = 0;\n  initialize_and_update_config_data_08001d4c();\n  process_alarms_08003a74();\n  if (DAT_20000ea8 == '\\0') {\n    memset_0800b430(&DAT_20000eac,0,0xc);\n    initialize_and_perform_floating_point_additions_0800283a();\n    DAT_20000ea9 = 0;\n    if ((DAT_20000ee6 & 0x20) == 0) {\n      isAlarm1Enabled = -1;\n    }\n    else {\n      isAlarm1Enabled = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x80) == 0) {\n      isAlarm2Enabled = -1;\n    }\n    else {\n      isAlarm2Enabled = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x200) == 0) {\n      isAlarm3Enabled = -1;\n    }\n    else {\n      isAlarm3Enabled = '\\x01';\n    }\n    uVar1 = convert_unsigned_to_twos_complement_08008e44((int)isAlarm1Enabled);\n    uVar1 = calculate_normalized_float_08008eec(uVar1,DAT_20000ef4);\n    uVar2 = convert_unsigned_to_twos_complement_08008e44((int)isAlarm2Enabled);\n    uVar2 = calculate_normalized_float_08008eec(uVar2,DAT_20000ef4);\n    uVar3 = convert_unsigned_to_twos_complement_08008e44((int)isAlarm3Enabled);\n    uVar3 = calculate_normalized_float_08008eec(uVar3,DAT_20000ef4);\n    process_alarm_data_08001e98(uVar1,uVar2,uVar3,DAT_20000eec,0);\n    initialize_if_needed_0800585c();\n    process_data_08002fd4();\n    initialize_and_perform_floating_point_additions_0800283a();\n    if ((DAT_20000ee4 & 8) != 0) {\n      DAT_20000e4c = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024c4": "initialize_system_080024c4",
                "local_13": "isAlarm3Enabled",
                "local_12": "isAlarm2Enabled",
                "local_11": "isAlarm1Enabled"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08001e98",
                "FUN_08008eec",
                "FUN_0800585c",
                "FUN_08008e44",
                "FUN_08001d4c",
                "FUN_0800283a",
                "FUN_08002fd4",
                "FUN_08003a74",
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "initialize_and_check_system_080025e8",
            "code": "\nvoid initialize_and_check_system_080025e8(void)\n\n{\n  if ((DAT_20000eaa & 0x10) == 0) {\n    DAT_20000eaa = DAT_20000eaa | 0x10;\n    execute_initial_setup();\n    initialize_system();\n    if (DAT_20000ea9 - 3 < 3) {\n      DAT_20000eaa = DAT_20000eaa | 0x20;\n      clear_flags_and_check_condition();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "initialize_and_check_system_080025e8",
                "execute_initial_setup_08005250": "execute_initial_setup",
                "initialize_system_08000210": "initialize_system",
                "clear_flags_and_check_condition_080057e4": "clear_flags_and_check_condition"
            },
            "calling": [
                "FUN_08003a18",
                "FUN_08003b98",
                "FUN_08005900",
                "FUN_080005b4",
                "FUN_0800195c"
            ],
            "called": [
                "FUN_080057e4",
                "FUN_08005250",
                "FUN_08000210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002638": {
            "entrypoint": "0x08002638",
            "current_name": "parse_integer_string_08002638",
            "code": "\nundefined4 parse_integer_string_08002638(int start_index,byte *byte_array,uint *result)\n\n{\n  byte digit;\n  bool is_negative;\n  bool is_concatenation;\n  int concatenation_result;\n  char *current_char;\n  char *next_char;\n  undefined4 status;\n  undefined8 temp_value;\n  uint new_value;\n  byte digit_count;\n  char double_dot_count;\n  int parsed_value;\n  char current_symbol;\n  char *next_symbol;\n  \n  next_char = (char *)(start_index + (uint)*byte_array);\n  current_char = next_char + 1;\n  current_symbol = *next_char;\n  is_negative = false;\n  if (current_symbol == '-') {\n    is_negative = true;\n    current_symbol = *current_char;\n    next_symbol = next_char + 2;\n  }\n  else {\n    next_symbol = current_char;\n    if (current_symbol == '+') {\n      next_symbol = next_char + 2;\n      current_symbol = *current_char;\n    }\n  }\n  parsed_value = 0;\n  double_dot_count = '\\0';\n  digit_count = 0;\n  is_concatenation = false;\n  do {\n    digit = current_symbol - 0x30;\n    if (digit < 10) {\n      digit_count = digit_count + 1;\n      if (digit_count < 9) {\n        if (is_concatenation) {\n          double_dot_count = double_dot_count + -1;\n        }\n        parsed_value = (uint)digit + parsed_value * 10;\n      }\n      else if (!is_concatenation) {\n        double_dot_count = double_dot_count + '\\x01';\n      }\n    }\n    else {\n      if ((digit != 0xfe) || (is_concatenation)) {\n        if (digit_count == 0) {\n          status = 0;\n        }\n        else {\n          new_value = calculate_new_value_08008e3c(parsed_value);\n          concatenation_result = check_concatenation_result_08009214(new_value,0);\n          if (concatenation_result == 0) {\n            for (; double_dot_count < -1; double_dot_count = double_dot_count + '\\x02') {\n              temp_value = decode_and_transform_data_08008590(new_value);\n              temp_value = calculate_multiplication_and_addition_08008640((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0x47ae147b,0x3f847ae1)\n              ;\n              new_value = reversed_binary_operation_08008c30((int)temp_value,(int)((ulonglong)temp_value >> 0x20));\n            }\n            if (double_dot_count < '\\0') {\n              temp_value = decode_and_transform_data_08008590(new_value);\n              temp_value = calculate_multiplication_and_addition_08008640((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0x9999999a,0x3fb99999)\n              ;\n              new_value = reversed_binary_operation_08008c30((int)temp_value,(int)((ulonglong)temp_value >> 0x20));\n            }\n            else {\n              for (; '\\0' < double_dot_count; double_dot_count = double_dot_count + -1) {\n                new_value = calculate_normalized_float_08008eec(new_value,0x41200000);\n              }\n            }\n          }\n          if (is_negative) {\n            *result = new_value ^ 0x80000000;\n          }\n          else {\n            *result = new_value;\n          }\n          *byte_array = ((char)next_symbol - (char)start_index) - 1;\n          status = 1;\n        }\n        return status;\n      }\n      is_concatenation = true;\n    }\n    current_symbol = *next_symbol;\n    next_symbol = next_symbol + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002638": "parse_integer_string_08002638",
                "param_1": "start_index",
                "param_2": "byte_array",
                "param_3": "result",
                "bVar1": "digit",
                "bVar2": "is_negative",
                "bVar3": "is_concatenation",
                "iVar4": "concatenation_result",
                "pcVar5": "current_char",
                "pcVar6": "next_char",
                "uVar7": "status",
                "uVar8": "temp_value",
                "local_1c": "new_value",
                "local_16": "digit_count",
                "local_15": "double_dot_count",
                "local_14": "parsed_value",
                "local_d": "current_symbol",
                "local_c": "next_symbol"
            },
            "calling": [
                "FUN_0800184c",
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e3c",
                "FUN_08009214",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002814": {
            "entrypoint": "0x08002814",
            "current_name": "FUNC_08002814",
            "code": "\nvoid FUNC_08002814(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002814": "FUNC_08002814"
            },
            "calling": [
                "FUN_08002408",
                "FUN_08001d4c",
                "FUN_08004148"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002828": {
            "entrypoint": "0x08002828",
            "current_name": "FUNC_08002828",
            "code": "\nvoid FUNC_08002828(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002828": "FUNC_08002828"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800283a": {
            "entrypoint": "0x0800283a",
            "current_name": "initialize_and_perform_floating_point_additions_0800283a",
            "code": "\nvoid initializeAndPerformFloatingPointAdditions_0800283a(void)\n\n{\n  initialize_parameters_080035ec(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  perform_floating_point_additions_080004fc(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800283a": "initialize_and_perform_floating_point_additions_0800283a"
            },
            "calling": [
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_080035ec",
                "FUN_080004fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002870": {
            "entrypoint": "0x08002870",
            "current_name": "increment_and_check_limit_08002870",
            "code": "\nchar incrementAndCheckLimit_08002870(char input)\n\n{\n  char result;\n  \n  result = input + '\\x01';\n  if (result == '\\x12') {\n    result = '\\0';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002870": "increment_and_check_limit_08002870",
                "param_1": "input",
                "local_9": "result"
            },
            "calling": [
                "FUN_08002ba8",
                "FUN_08003004",
                "FUN_08002f40",
                "FUN_08002e08",
                "FUN_08002ef0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002896": {
            "entrypoint": "0x08002896",
            "current_name": "subtract_one_and_set_default_08002896",
            "code": "\nchar subtract_one_and_set_default_08002896(char input_value)\n\n{\n  char result;\n  \n  result = input_value;\n  if (input_value == '\\0') {\n    result = '\\x12';\n  }\n  return result + -1;\n}\n\n",
            "renaming": {
                "FUN_08002896": "subtract_one_and_set_default_08002896",
                "param_1": "input_value",
                "local_9": "result"
            },
            "calling": [
                "FUN_08002a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028bc": {
            "entrypoint": "0x080028bc",
            "current_name": "calculate_normalized_floats_080028bc",
            "code": "\nundefined4 calculate_normalized_floats_080028bc(undefined4 first_float,undefined4 second_float,undefined4 third_float)\n\n{\n  undefined4 normalized_first;\n  undefined4 normalized_second;\n  \n  normalized_first = calculate_normalized_float_08008eec(second_float,second_float);\n  normalized_second = calculate_normalized_float_08008eec(first_float,first_float);\n  normalized_first = calculate_float_08008cd8(normalized_first,normalized_second);\n  normalized_second = calculate_floating_point_08008cdc(third_float,third_float);\n  normalized_first = floating_point_addition_08009054(normalized_first,normalized_second);\n  return normalized_first;\n}\n\n",
            "renaming": {
                "FUN_080028bc": "calculate_normalized_floats_080028bc",
                "param_1": "first_float",
                "param_2": "second_float",
                "param_3": "third_float",
                "uVar1": "normalized_first",
                "uVar2": "normalized_second"
            },
            "calling": [
                "FUN_08002c18"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008cd8",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002908": {
            "entrypoint": "0x08002908",
            "current_name": "calculate_sum_with_normalization_08002908",
            "code": "\nundefined4 calculate_sum_with_normalization_08002908(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 normalized_input)\n\n{\n  undefined4 intermediate_result1;\n  undefined4 intermediate_result2;\n  \n  intermediate_result1 = calculate_floating_point_08008cdc(input3,input3);\n  intermediate_result1 = calculate_normalized_float_08008eec(intermediate_result1,normalized_input);\n  intermediate_result2 = calculate_normalized_float_08008eec(input1,input1);\n  intermediate_result1 = calculate_float_08008cd8(intermediate_result1,intermediate_result2);\n  intermediate_result2 = calculate_normalized_float_08008eec(input2,input2);\n  intermediate_result1 = calculate_floating_point_08008cdc(intermediate_result1,intermediate_result2);\n  intermediate_result2 = calculate_normalized_float_08008eec(input3,0x40800000);\n  intermediate_result1 = floating_point_addition_08009054(intermediate_result1,intermediate_result2);\n  return intermediate_result1;\n}\n\n",
            "renaming": {
                "FUN_08002908": "calculate_sum_with_normalization_08002908",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "normalized_input",
                "uVar1": "intermediate_result1",
                "uVar2": "intermediate_result2"
            },
            "calling": [
                "FUN_08002c18"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008cd8",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002978": {
            "entrypoint": "0x08002978",
            "current_name": "process_binary_data_08002978",
            "code": "\nundefined4 processBinaryData_08002978(undefined4 inputData,undefined4 floatParam,undefined4 normalizeParam)\n\n{\n  undefined4 normalizedFloat;\n  undefined4 floatingPoint;\n  undefined8 transformedData;\n  \n  normalizedFloat = calculate_normalized_float_08008eec(floatParam,floatParam);\n  floatingPoint = calculate_floating_point_08008cdc(inputData,inputData);\n  floatingPoint = calculate_normalized_float_08008eec(floatingPoint,normalizeParam);\n  normalizedFloat = calculate_float_08008cd8(normalizedFloat,floatingPoint);\n  transformedData = decode_and_transform_data_08008590(normalizedFloat);\n  transformedData = start_application_080098d0((int)transformedData,(int)((ulonglong)transformedData >> 0x20));\n  normalizedFloat = reversed_binary_operation_08008c30((int)transformedData,(int)((ulonglong)transformedData >> 0x20));\n  return normalizedFloat;\n}\n\n",
            "renaming": {
                "FUN_08002978": "process_binary_data_08002978",
                "param_1": "inputData",
                "param_2": "floatParam",
                "param_3": "normalizeParam",
                "uVar1": "normalizedFloat",
                "uVar2": "floatingPoint",
                "uVar3": "transformedData"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8",
                "FUN_08002afc"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008cd8",
                "FUN_08008c30",
                "FUN_080098d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029d8": {
            "entrypoint": "0x080029d8",
            "current_name": "update_parameters_080029d8",
            "code": "\nvoid updateParameters_080029d8(undefined4 param1,int param2,int param3)\n\n{\n  int result;\n  undefined4 binaryData1;\n  undefined4 binaryData2;\n  \n  if (((param2 != 0) && (param3 != 0)) &&\n     (result = check_concatenation_result_08009214(*(undefined4 *)(param2 + 0x18),*(undefined4 *)(param2 + 0x1c)),\n     result == 0)) {\n    if ((*(char *)(param2 + 0x25) == '\\0') &&\n       (result = check_concatenation_result_08009264(*(undefined4 *)(param2 + 0x1c),*(undefined4 *)(param3 + 0x18)),\n       result != 0)) {\n      binaryData2 = *(undefined4 *)(param2 + 0x1c);\n      binaryData1 = process_binary_data_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(param3 + 0x18),\n                           *(undefined4 *)(param2 + 0x20));\n      result = is_cy_null_08009228(binaryData2,binaryData1);\n      if (result == 0) {\n        binaryData1 = process_binary_data_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(param3 + 0x18),\n                             *(undefined4 *)(param2 + 0x20));\n      }\n      else {\n        binaryData1 = *(undefined4 *)(param2 + 0x1c);\n      }\n      *(undefined4 *)(param2 + 0x18) = binaryData1;\n    }\n    else {\n      *(undefined4 *)(param2 + 0x18) = *(undefined4 *)(param2 + 0x1c);\n    }\n    *(undefined *)(param2 + 0x24) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029d8": "update_parameters_080029d8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "result",
                "uVar2": "binaryData1",
                "uVar3": "binaryData2"
            },
            "calling": [
                "FUN_08002a94"
            ],
            "called": [
                "FUN_08002978",
                "FUN_08009228",
                "FUN_08009214",
                "FUN_08009264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a94": {
            "entrypoint": "0x08002a94",
            "current_name": "update_parameters_08002a94",
            "code": "\nvoid update_parameters_08002a94(void)\n\n{\n  undefined *previous_parameter_copy;\n  undefined *previous_parameter;\n  undefined *current_parameter;\n  byte default_value;\n  \n  default_value = DAT_20000cf0;\n  previous_parameter = (undefined *)0x0;\n  current_parameter = (undefined *)0x0;\n  while (previous_parameter_copy = current_parameter, default_value != DAT_20000cf1) {\n    default_value = subtract_one_and_set_default_08002896(default_value);\n    current_parameter = previous_parameter;\n    update_parameters_08002a94_080029d8(&DAT_20000870 + (uint)default_value * 0x40,previous_parameter,previous_parameter_copy);\n    previous_parameter = &DAT_20000870 + (uint)default_value * 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a94": "update_parameters_08002a94",
                "local_18": "previous_parameter",
                "local_14": "current_parameter",
                "local_9": "default_value",
                "puVar1": "previous_parameter_copy"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_080029d8",
                "FUN_08002896"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002afc": {
            "entrypoint": "0x08002afc",
            "current_name": "process_data_08002afc",
            "code": "\nvoid process_data_08002afc(int data_ptr1,int data_ptr2)\n\n{\n  int is_cy_null_result;\n  undefined4 processed_data_1;\n  undefined4 processed_data_2;\n  \n  if (((data_ptr1 != 0) && (*(char *)(data_ptr1 + 0x25) == '\\0')) &&\n     (is_cy_null_result = is_cy_null_08009228(*(undefined4 *)(data_ptr1 + 0x18),*(undefined4 *)(data_ptr2 + 0x18)),\n     is_cy_null_result != 0)) {\n    processed_data_2 = *(undefined4 *)(data_ptr2 + 0x18);\n    processed_data_1 = process_binary_data_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(data_ptr1 + 0x18),\n                         *(undefined4 *)(data_ptr1 + 0x20));\n    is_cy_null_result = is_cy_null_08009228(processed_data_2,processed_data_1);\n    if (is_cy_null_result == 0) {\n      processed_data_1 = process_binary_data_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(data_ptr1 + 0x18),\n                           *(undefined4 *)(data_ptr1 + 0x20));\n    }\n    else {\n      processed_data_1 = *(undefined4 *)(data_ptr2 + 0x18);\n    }\n    is_cy_null_result = check_concatenation_result_08009214(processed_data_1,*(undefined4 *)(data_ptr2 + 0x18));\n    if (is_cy_null_result == 0) {\n      *(undefined4 *)(data_ptr2 + 0x18) = processed_data_1;\n      *(undefined *)(data_ptr2 + 0x24) = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002afc": "process_data_08002afc",
                "param_1": "data_ptr1",
                "param_2": "data_ptr2",
                "iVar1": "is_cy_null_result",
                "uVar2": "processed_data_1",
                "uVar3": "processed_data_2"
            },
            "calling": [
                "FUN_08002ba8"
            ],
            "called": [
                "FUN_08002978",
                "FUN_08009228",
                "FUN_08009214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ba8": {
            "entrypoint": "0x08002ba8",
            "current_name": "process_and_increment_data_08002ba8",
            "code": "\nvoid process_and_increment_data_08002ba8(void)\n\n{\n  uint data_value;\n  undefined *previous_data;\n  undefined *previous_data_backup;\n  undefined *current_data;\n  undefined *next_data;\n  byte data_index;\n  \n  current_data = (undefined *)0x0;\n  next_data = (undefined *)0x0;\n  data_index = DAT_20000cf1;\n  previous_data_backup = (undefined *)0x0;\n  while (previous_data = current_data, data_index != DAT_20000cf0) {\n    current_data = next_data;\n    data_value = (uint)data_index;\n    process_data_08002afc(previous_data,next_data,&DAT_20000870 + data_value * 0x40);\n    data_index = increment_and_check_limit_08002870(data_index);\n    previous_data_backup = previous_data;\n    next_data = &DAT_20000870 + data_value * 0x40;\n  }\n  process_data_08002afc(current_data,next_data,0,current_data,previous_data_backup);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ba8": "process_and_increment_data_08002ba8",
                "puVar2": "previous_data",
                "puVar3": "previous_data_backup",
                "local_14": "current_data",
                "local_10": "next_data",
                "local_9": "data_index",
                "uVar1": "data_value"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_08002870",
                "FUN_08002afc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c18": {
            "entrypoint": "0x08002c18",
            "current_name": "calculate_shifted_sum_08002c18",
            "code": "\nvoid calculate_shifted_sum_08002c18(int param,undefined4 float_param_1,undefined4 float_param_2)\n\n{\n  undefined4 new_value;\n  int transformed_value_1;\n  undefined4 new_value_2;\n  undefined4 twos_complement;\n  undefined4 twos_complement_2;\n  uint result;\n  undefined8 decoded_data;\n  int difference;\n  uint value_1;\n  \n  new_value = calculate_new_value(*(undefined4 *)(param + 0x3c));\n  new_value = calculate_normalized_float(new_value,float_param_1);\n  decoded_data = decode_and_transform_data(new_value);\n  decoded_data = improved_calculation((int)decoded_data,(int)((ulonglong)decoded_data >> 0x20));\n  new_value = calculate_shifted_value((int)decoded_data,(int)((ulonglong)decoded_data >> 0x20));\n  *(undefined4 *)(param + 0x28) = new_value;\n  new_value = calculate_new_value(*(undefined4 *)(param + 0x3c));\n  new_value = calculate_normalized_float(new_value,float_param_2);\n  decoded_data = decode_and_transform_data(new_value);\n  decoded_data = improved_calculation((int)decoded_data,(int)((ulonglong)decoded_data >> 0x20));\n  new_value = calculate_shifted_value((int)decoded_data,(int)((ulonglong)decoded_data >> 0x20));\n  *(undefined4 *)(param + 0x2c) = new_value;\n  decoded_data = shift_and_merge(*(int *)(param + 0x30) * 0x32);\n  decoded_data = calculate_multiplication_and_addition((int)decoded_data,(int)((ulonglong)decoded_data >> 0x20),0,0x404e0000);\n  transformed_value_1 = calculate_value((int)decoded_data,(int)((ulonglong)decoded_data >> 0x20));\n  new_value = calculate_new_value(*(undefined4 *)(param + 0x28));\n  new_value_2 = calculate_new_value(*(undefined4 *)(param + 0x3c));\n  twos_complement = convert_unsigned_to_twos_complement(transformed_value_1);\n  new_value = calculate_normalized_floats(new_value,new_value_2,twos_complement);\n  decoded_data = decode_and_transform_data(new_value);\n  decoded_data = improved_calculation((int)decoded_data,(int)((ulonglong)decoded_data >> 0x20));\n  value_1 = calculate_value((int)decoded_data,(int)((ulonglong)decoded_data >> 0x20));\n  new_value = calculate_new_value(*(undefined4 *)(param + 0x3c));\n  new_value_2 = calculate_new_value(*(undefined4 *)(param + 0x2c));\n  twos_complement = convert_unsigned_to_twos_complement(-transformed_value_1);\n  new_value = calculate_normalized_floats(new_value,new_value_2,twos_complement);\n  decoded_data = decode_and_transform_data(new_value);\n  decoded_data = calculate_result((int)decoded_data,(int)((ulonglong)decoded_data >> 0x20));\n  difference = calculate_value((int)decoded_data,(int)((ulonglong)decoded_data >> 0x20));\n  difference = (*(int *)(param + 0x10) - value_1) - difference;\n  if (difference < 0) {\n    new_value = calculate_new_value(*(undefined4 *)(param + 0x28));\n    new_value_2 = calculate_new_value(*(undefined4 *)(param + 0x2c));\n    twos_complement = convert_unsigned_to_twos_complement(transformed_value_1);\n    twos_complement_2 = convert_unsigned_to_twos_complement(*(undefined4 *)(param + 0x10));\n    new_value = calculate_sum_with_normalization(new_value,new_value_2,twos_complement,twos_complement_2);\n    decoded_data = decode_and_transform_data(new_value);\n    decoded_data = improved_calculation((int)decoded_data,(int)((ulonglong)decoded_data >> 0x20));\n    result = calculate_value((int)decoded_data,(int)((ulonglong)decoded_data >> 0x20));\n    result = result & ~((int)result >> 0x1f);\n    value_1 = *(uint *)(param + 0x10);\n    if ((int)result <= (int)*(uint *)(param + 0x10)) {\n      value_1 = result;\n    }\n    difference = 0;\n  }\n  *(uint *)(param + 0x34) = value_1;\n  *(uint *)(param + 0x38) = difference + value_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c18": "calculate_shifted_sum_08002c18",
                "param_1": "param",
                "param_2": "float_param_1",
                "param_3": "float_param_2",
                "uVar1": "new_value",
                "iVar2": "transformed_value_1",
                "uVar3": "new_value_2",
                "uVar4": "twos_complement",
                "uVar5": "twos_complement_2",
                "uVar6": "result",
                "uVar7": "decoded_data",
                "local_20": "difference",
                "local_1c": "value_1",
                "calculate_new_value_08008e3c": "calculate_new_value",
                "calculate_normalized_float_08008eec": "calculate_normalized_float",
                "decode_and_transform_data_08008590": "decode_and_transform_data",
                "improved_calculation_08009318": "improved_calculation",
                "calculate_shifted_value_08008bf0": "calculate_shifted_value",
                "shift_and_merge_0800856c": "shift_and_merge",
                "calculate_multiplication_and_addition_08008640": "calculate_multiplication_and_addition",
                "calculate_value_08008ba0": "calculate_value",
                "convert_unsigned_to_twos_complement_08008e44": "convert_unsigned_to_twos_complement",
                "calculate_normalized_floats_080028bc": "calculate_normalized_floats",
                "calculate_result_080094c0": "calculate_result",
                "calculate_sum_with_normalization_08002908": "calculate_sum_with_normalization"
            },
            "calling": [
                "FUN_08002e08"
            ],
            "called": [
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_0800856c",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_08008e3c",
                "FUN_080028bc",
                "FUN_08008ba0",
                "FUN_08002908",
                "FUN_08009318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e08": {
            "entrypoint": "0x08002e08",
            "current_name": "calculate_shifted_sums_08002e08",
            "code": "\nvoid calculate_shifted_sums_08002e08(void)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  int array_index;\n  undefined *data_pointer;\n  byte loop_index;\n  \n  data_pointer = (undefined *)0x0;\n  loop_index = DAT_20000cf1;\n  while (loop_index != DAT_20000cf0) {\n    array_index = (uint)loop_index * 0x40;\n    if ((data_pointer != (undefined *)0x0) &&\n       ((data_pointer[0x24] != '\\0' || ((&DAT_20000894)[array_index] != '\\0')))) {\n      result_1 = floating_point_addition_08009054(*(undefined4 *)(data_pointer + 0x18),*(undefined4 *)(data_pointer + 0x14));\n      result_2 = floating_point_addition_08009054(*(undefined4 *)(&DAT_20000888 + array_index),*(undefined4 *)(data_pointer + 0x14));\n      calculate_shifted_sum_08002c18(data_pointer,result_1,result_2);\n      data_pointer[0x24] = 0;\n    }\n    loop_index = increment_and_check_limit_08002870(loop_index);\n    data_pointer = &DAT_20000870 + array_index;\n  }\n  result_1 = floating_point_addition_08009054(*(undefined4 *)(data_pointer + 0x18),*(undefined4 *)(data_pointer + 0x14));\n  result_2 = floating_point_addition_08009054(0,*(undefined4 *)(data_pointer + 0x14));\n  calculate_shifted_sum_08002c18(data_pointer,result_1,result_2);\n  data_pointer[0x24] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e08": "calculate_shifted_sums_08002e08",
                "local_18": "data_pointer",
                "local_11": "loop_index",
                "iVar3": "array_index",
                "uVar1": "result_1",
                "uVar2": "result_2"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_08002870",
                "FUN_08002c18",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002edc": {
            "entrypoint": "0x08002edc",
            "current_name": "update_and_process_data_08002edc",
            "code": "\nvoid update_and_process_data_08002edc(void)\n\n{\n  update_parameters();\n  process_and_increment_data();\n  calculate_shifted_sums();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002edc": "update_and_process_data_08002edc",
                "update_parameters_08002a94": "update_parameters",
                "process_and_increment_data_08002ba8": "process_and_increment_data",
                "calculate_shifted_sums_08002e08": "calculate_shifted_sums"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08003618"
            ],
            "called": [
                "FUN_08002ba8",
                "FUN_08002e08",
                "FUN_08002a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef0": {
            "entrypoint": "0x08002ef0",
            "current_name": "initialize_data_08002ef0",
            "code": "\nvoid initializeData_08002ef0(void)\n\n{\n  DAT_20000cf1 = DAT_20000cf0;\n  DAT_20000cf2 = incrementAndCheckLimit(DAT_20000cf0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef0": "initialize_data_08002ef0",
                "increment_and_check_limit_08002870": "incrementAndCheckLimit"
            },
            "calling": [
                "FUN_08002f24"
            ],
            "called": [
                "FUN_08002870"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f24": {
            "entrypoint": "0x08002f24",
            "current_name": "initialize_and_reset_data_08002f24",
            "code": "\nvoid initializeAndResetData_08002f24(void)\n\n{\n  initializeData();\n  clearMemory(&DAT_20000cf4,0,0x1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f24": "initialize_and_reset_data_08002f24",
                "initialize_data_08002ef0": "initializeData",
                "memset_0800b430": "clearMemory"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08002ef0",
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f40": {
            "entrypoint": "0x08002f40",
            "current_name": "check_and_increment_limit_08002f40",
            "code": "\nvoid check_and_increment_limit_08002f40(void)\n\n{\n  if (DAT_20000cf0 != DAT_20000cf1) {\n    DAT_20000cf1 = increment_and_check_limit_08002870(DAT_20000cf1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f40": "check_and_increment_limit_08002f40"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08002870"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f74": {
            "entrypoint": "0x08002f74",
            "current_name": "get_data_ptr_08002f74",
            "code": "\nundefined * get_data_ptr_08002f74(void)\n\n{\n  undefined *puVar1;\n  \n  if (DAT_20000cf0 == DAT_20000cf1) {\n    puVar1 = (undefined *)0x0;\n  }\n  else {\n    puVar1 = &DAT_20000870 + (uint)DAT_20000cf1 * 0x40;\n  }\n  return puVar1;\n}\n\n",
            "renaming": {
                "FUN_08002f74": "get_data_ptr_08002f74"
            },
            "calling": [
                "FUN_08002fd4",
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fac": {
            "entrypoint": "0x08002fac",
            "current_name": "check_equality_08002fac",
            "code": "\nbool checkEquality_08002fac(void)\n\n{\n  return DAT_20000cf1 == DAT_20000cf2;\n}\n\n",
            "renaming": {
                "FUN_08002fac": "check_equality_08002fac"
            },
            "calling": [
                "FUN_08001e98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fd4": {
            "entrypoint": "0x08002fd4",
            "current_name": "process_data_08002fd4",
            "code": "\nvoid process_data_08002fd4(void)\n\n{\n  int data_ptr;\n  \n  while ((data_ptr = get_data_pointer(), data_ptr != 0 || (DAT_20000ea9 == '\\x03'))) {\n    process_alarms();\n    if (DAT_20000ea8 != '\\0') {\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fd4": "process_data_08002fd4",
                "iVar1": "data_ptr",
                "get_data_ptr_08002f74": "get_data_pointer",
                "process_alarms_08003a74": "process_alarms"
            },
            "calling": [
                "FUN_08002408",
                "FUN_0800525c",
                "FUN_080005b4",
                "FUN_080024c4",
                "FUN_08000220"
            ],
            "called": [
                "FUN_08002f74",
                "FUN_08003a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003004": {
            "entrypoint": "0x08003004",
            "current_name": "calculate_product_and_update_data_08003004",
            "code": "\nvoid calculateProductAndUpdateData_08003004(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 char isInputFloat)\n\n{\n  undefined4 normalizedInput1;\n  int product1;\n  int product2;\n  int product3;\n  undefined4 normalizedInput2;\n  undefined4 normalizedInput3;\n  undefined4 normalizedInput4;\n  undefined4 normalizedProduct;\n  uint maxValue;\n  int offset;\n  ushort *dataPointer;\n  int difference;\n  uint maxDifference;\n  undefined8 decodedData;\n  undefined8 shiftedValue;\n  undefined8 operationResult;\n  undefined4 concatenationResult;\n  undefined4 modifiedInput;\n  \n  offset = (uint)DAT_20000cf0 * 0x40;\n  dataPointer = (ushort *)(&DAT_20000870 + offset);\n  normalizedInput1 = calculate_normalized_float_08008eec(DAT_20000ebc,input1);\n  decodedData = decode_and_transform_data_08008590(normalizedInput1);\n  product1 = calculate_product_080095b8((int)decodedData,(int)((ulonglong)decodedData >> 0x20));\n  normalizedInput1 = calculate_normalized_float_08008eec(DAT_20000ec0,input2);\n  decodedData = decode_and_transform_data_08008590(normalizedInput1);\n  product2 = calculate_product_080095b8((int)decodedData,(int)((ulonglong)decodedData >> 0x20));\n  normalizedInput1 = calculate_normalized_float_08008eec(DAT_20000ec4,input3);\n  decodedData = decode_and_transform_data_08008590(normalizedInput1);\n  product3 = calculate_product_080095b8((int)decodedData,(int)((ulonglong)decodedData >> 0x20));\n  *dataPointer = 0;\n  if (product1 < DAT_20000cf4) {\n    *dataPointer = *dataPointer | 0x20;\n  }\n  if (product2 < DAT_20000cf8) {\n    *dataPointer = *dataPointer | 0x880;\n  }\n  if (product3 < DAT_20000cfc) {\n    *dataPointer = *dataPointer | 0x200;\n  }\n  difference = product1 - DAT_20000cf4;\n  if (difference < 0) {\n    difference = -difference;\n  }\n  *(int *)(&DAT_20000874 + offset) = difference;\n  difference = product2 - DAT_20000cf8;\n  if (difference < 0) {\n    difference = -difference;\n  }\n  *(int *)(&DAT_20000878 + offset) = difference;\n  difference = product3 - DAT_20000cfc;\n  if (difference < 0) {\n    difference = -difference;\n  }\n  *(int *)(&DAT_2000087c + offset) = difference;\n  maxValue = *(uint *)(&DAT_2000087c + offset);\n  if (*(uint *)(&DAT_2000087c + offset) < *(uint *)(&DAT_20000878 + offset)) {\n    maxValue = *(uint *)(&DAT_20000878 + offset);\n  }\n  maxDifference = *(uint *)(&DAT_20000874 + offset);\n  if (*(uint *)(&DAT_20000874 + offset) < maxValue) {\n    maxDifference = maxValue;\n  }\n  *(uint *)(&DAT_20000880 + offset) = maxDifference;\n  if (*(int *)(&DAT_20000880 + offset) != 0) {\n    normalizedInput1 = convert_unsigned_to_twos_complement_08008e44(product1 - DAT_20000cf4);\n    normalizedInput1 = floating_point_addition_08009054(normalizedInput1,DAT_20000ebc);\n    normalizedInput2 = convert_unsigned_to_twos_complement_08008e44(product2 - DAT_20000cf8);\n    normalizedInput2 = floating_point_addition_08009054(normalizedInput2,DAT_20000ec0);\n    normalizedInput3 = convert_unsigned_to_twos_complement_08008e44(product3 - DAT_20000cfc);\n    normalizedInput3 = floating_point_addition_08009054(normalizedInput3,DAT_20000ec4);\n    normalizedInput4 = calculate_normalized_float_08008eec(normalizedInput1,normalizedInput1);\n    normalizedProduct = calculate_normalized_float_08008eec(normalizedInput2,normalizedInput2);\n    normalizedInput4 = calculate_floating_point_08008cdc(normalizedInput4,normalizedProduct);\n    normalizedProduct = calculate_normalized_float_08008eec(normalizedInput3,normalizedInput3);\n    normalizedInput4 = calculate_floating_point_08008cdc(normalizedInput4,normalizedProduct);\n    decodedData = decode_and_transform_data_08008590(normalizedInput4);\n    decodedData = start_application_080098d0((int)decodedData,(int)((ulonglong)decodedData >> 0x20));\n    normalizedInput4 = reversed_binary_operation_08008c30((int)decodedData,(int)((ulonglong)decodedData >> 0x20));\n    *(undefined4 *)(&DAT_20000890 + offset) = normalizedInput4;\n    normalizedInput4 = floating_point_addition_08009054(0x3f800000,*(undefined4 *)(&DAT_20000890 + offset));\n    if (isInputFloat == '\\0') {\n      modifiedInput = calculate_normalized_float_08008eec(input4,normalizedInput4);\n    }\n    else {\n      modifiedInput = floating_point_addition_08009054(0x3f800000,input4);\n    }\n    normalizedProduct = calculate_normalized_float_08008eec(*(undefined4 *)(&DAT_20000890 + offset),modifiedInput);\n    *(undefined4 *)(&DAT_20000884 + offset) = normalizedProduct;\n    normalizedProduct = convert_unsigned_to_twos_complement_08008e44(*(undefined4 *)(&DAT_20000880 + offset));\n    normalizedProduct = calculate_normalized_float_08008eec(normalizedProduct,modifiedInput);\n    decodedData = decode_and_transform_data_08008590(normalizedProduct);\n    decodedData = improved_calculation_08009318((int)decodedData,(int)((ulonglong)decodedData >> 0x20));\n    normalizedProduct = calculate_shifted_value_08008bf0((int)decodedData,(int)((ulonglong)decodedData >> 0x20));\n    *(undefined4 *)(&DAT_200008ac + offset) = normalizedProduct;\n    normalizedProduct = convert_unsigned_to_twos_complement_08008e44(*(undefined4 *)(&DAT_20000880 + offset));\n    normalizedProduct = calculate_normalized_float_08008eec(normalizedProduct,normalizedInput4);\n    normalizedProduct = calculate_normalized_float_08008eec(normalizedProduct,DAT_20000edc);\n    normalizedProduct = floating_point_addition_08009054(normalizedProduct,0x453b8000);\n    decodedData = decode_and_transform_data_08008590(normalizedProduct);\n    decodedData = improved_calculation_08009318((int)decodedData,(int)((ulonglong)decodedData >> 0x20));\n    normalizedProduct = calculate_value_08008ba0((int)decodedData,(int)((ulonglong)decodedData >> 0x20));\n    *(undefined4 *)(&DAT_200008a0 + offset) = normalizedProduct;\n    maxValue = calculate_normalized_float_08008eec(normalizedInput1,normalizedInput4);\n    normalizedInput1 = calculate_normalized_float_08008eec(normalizedInput2,normalizedInput4);\n    normalizedInput2 = calculate_normalized_float_08008eec(normalizedInput3,normalizedInput4);\n    concatenationResult = 0;\n    if ((DAT_20000cf0 != DAT_20000cf1) && (difference = check_concatenation_result_08009264(DAT_20000d0c,0), difference != 0)) {\n      normalizedInput3 = calculate_normalized_float_08008eec(DAT_20000d00 ^ 0x80000000,maxValue);\n      normalizedInput4 = calculate_normalized_float_08008eec(DAT_20000d04,normalizedInput1);\n      normalizedInput3 = calculate_float_08008cd8(normalizedInput3,normalizedInput4);\n      normalizedInput4 = calculate_normalized_float_08008eec(DAT_20000d08,normalizedInput2);\n      normalizedInput3 = calculate_float_08008cd8(normalizedInput3,normalizedInput4);\n      decodedData = decode_and_transform_data_08008590(normalizedInput3);\n      difference = is_null_terminator_08008b24((int)decodedData,(int)((ulonglong)decodedData >> 0x20),0x66666666,0x3fee6666);\n      if (difference != 0) {\n        difference = is_cy_null_08009228(DAT_20000d0c,*(undefined4 *)(&DAT_20000884 + offset));\n        concatenationResult = DAT_20000d0c;\n        if (difference == 0) {\n          concatenationResult = *(undefined4 *)(&DAT_20000884 + offset);\n        }\n        decodedData = decode_and_transform_data_08008590(normalizedInput3);\n        difference = check_null_termination_08008b60((int)decodedData,(int)((ulonglong)decodedData >> 0x20),0x66666666,0xbfee6666);\n        if (difference != 0) {\n          decodedData = decode_and_transform_data_08008590(normalizedInput3);\n          decodedData = perform_operation_080082d0(0,0x3ff00000,(int)decodedData,(int)((ulonglong)decodedData >> 0x20));\n          decodedData = calculate_multiplication_and_addition_08008640((int)decodedData,(int)((ulonglong)decodedData >> 0x20),0,0x3fe00000);\n          decodedData = start_application_080098d0((int)decodedData,(int)((ulonglong)decodedData >> 0x20));\n          normalizedInput3 = reversed_binary_operation_08008c30((int)decodedData,(int)((ulonglong)decodedData >> 0x20));\n          decodedData = decode_and_transform_data_08008590(concatenationResult);\n          normalizedInput4 = calculate_normalized_float_08008eec(DAT_20000edc,DAT_20000ee0);\n          normalizedInput4 = calculate_normalized_float_08008eec(normalizedInput4,normalizedInput3);\n          shiftedValue = decode_and_transform_data_08008590(normalizedInput4);\n          operationResult = decode_and_transform_data_08008590(normalizedInput3);\n          operationResult = perform_operation_080082d0(0,0x3ff00000,(int)operationResult,(int)((ulonglong)operationResult >> 0x20));\n          shiftedValue = calculate_floating_point_08008894((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20),(int)operationResult,\n                                (int)((ulonglong)operationResult >> 0x20));\n          shiftedValue = start_application_080098d0((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20));\n          difference = is_null_terminator_08008b24((int)decodedData,(int)((ulonglong)decodedData >> 0x20),(int)shiftedValue,\n                                (int)((ulonglong)shiftedValue >> 0x20));\n          if (difference == 0) {\n            normalizedInput4 = calculate_normalized_float_08008eec(DAT_20000edc,DAT_20000ee0);\n            normalizedInput4 = calculate_normalized_float_08008eec(normalizedInput4,normalizedInput3);\n            decodedData = decode_and_transform_data_08008590(normalizedInput4);\n            shiftedValue = decode_and_transform_data_08008590(normalizedInput3);\n            shiftedValue = perform_operation_080082d0(0,0x3ff00000,(int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20));\n            decodedData = calculate_floating_point_08008894((int)decodedData,(int)((ulonglong)decodedData >> 0x20),(int)shiftedValue,\n                                  (int)((ulonglong)shiftedValue >> 0x20));\n            decodedData = start_application_080098d0((int)decodedData,(int)((ulonglong)decodedData >> 0x20));\n            concatenationResult = reversed_binary_operation_08008c30((int)decodedData,(int)((ulonglong)decodedData >> 0x20));\n          }\n        }\n      }\n    }\n    *(undefined4 *)(&DAT_2000088c + offset) = concatenationResult;\n    normalizedInput4 = process_binary_data_08002978(DAT_20000edc ^ 0x80000000,0,*(undefined4 *)(&DAT_20000890 + offset));\n    difference = is_cy_null_08009228(concatenationResult,normalizedInput4);\n    normalizedInput3 = normalizedInput4;\n    if (difference != 0) {\n      normalizedInput3 = concatenationResult;\n    }\n    *(undefined4 *)(&DAT_20000888 + offset) = normalizedInput3;\n    difference = check_concatenation_result_08009250(normalizedInput4,*(undefined4 *)(&DAT_20000884 + offset));\n    if (difference == 0) {\n      (&DAT_20000895)[offset] = 0;\n    }\n    else {\n      (&DAT_20000895)[offset] = 1;\n    }\n    (&DAT_20000894)[offset] = 1;\n    DAT_20000d0c = *(undefined4 *)(&DAT_20000884 + offset);\n    DAT_20000cf0 = DAT_20000cf2;\n    DAT_20000d00 = maxValue;\n    DAT_20000d04 = normalizedInput1;\n    DAT_20000d08 = normalizedInput2;\n    DAT_20000cf2 = increment_and_check_limit_08002870(DAT_20000cf2);\n    DAT_20000cf4 = product1;\n    DAT_20000cf8 = product2;\n    DAT_20000cfc = product3;\n    update_and_process_data_08002edc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003004": "calculate_product_and_update_data_08003004",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "isInputFloat",
                "uVar1": "normalizedInput1",
                "iVar2": "product1",
                "iVar3": "product2",
                "iVar4": "product3",
                "uVar5": "normalizedInput2",
                "uVar6": "normalizedInput3",
                "uVar7": "normalizedInput4",
                "uVar8": "normalizedProduct",
                "uVar9": "maxValue",
                "iVar10": "offset",
                "puVar11": "dataPointer",
                "iVar12": "difference",
                "uVar13": "maxDifference",
                "uVar14": "decodedData",
                "uVar15": "shiftedValue",
                "uVar16": "operationResult",
                "local_20": "concatenationResult",
                "local_1c": "modifiedInput"
            },
            "calling": [
                "FUN_08001e98"
            ],
            "called": [
                "FUN_080095b8",
                "FUN_08008cdc",
                "FUN_08008bf0",
                "FUN_08008b24",
                "FUN_08002edc",
                "FUN_08002978",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_080082d0",
                "FUN_08009318",
                "FUN_08008b60",
                "FUN_08002870",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e44",
                "FUN_08008c30",
                "FUN_08009228",
                "FUN_080098d0",
                "FUN_08008894",
                "FUN_08009264",
                "FUN_08008ba0",
                "FUN_08009250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035ec": {
            "entrypoint": "0x080035ec",
            "current_name": "initialize_parameters_080035ec",
            "code": "\nvoid initializeParameters_080035ec(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3)\n\n{\n  DAT_20000cf4 = inputParam1;\n  DAT_20000cf8 = inputParam2;\n  DAT_20000cfc = inputParam3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035ec": "initialize_parameters_080035ec",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3"
            },
            "calling": [
                "FUN_0800283a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003618": {
            "entrypoint": "0x08003618",
            "current_name": "update_and_process_data_08003618",
            "code": "\nvoid updateAndProcessData_08003618(undefined4 inputValue)\n\n{\n  undefined4 convertedInput;\n  int index;\n  undefined4 value;\n  \n  index = (uint)DAT_20000cf1 * 0x40;\n  value = *(undefined4 *)(&DAT_20000890 + index);\n  convertedInput = convertToTwosComplement(inputValue);\n  convertedInput = normalizeFloat(value,convertedInput);\n  value = convertToTwosComplement(*(undefined4 *)(&DAT_20000880 + index));\n  convertedInput = performFloatingPointAddition(convertedInput,value);\n  *(undefined4 *)(&DAT_20000890 + index) = convertedInput;\n  *(undefined4 *)(&DAT_20000880 + index) = inputValue;\n  *(undefined4 *)(&DAT_20000888 + index) = 0;\n  *(undefined4 *)(&DAT_2000088c + index) = 0;\n  (&DAT_20000895)[index] = 0;\n  (&DAT_20000894)[index] = 1;\n  updateAndProcessData_08003618();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003618": "update_and_process_data_08003618",
                "param_1": "inputValue",
                "uVar1": "convertedInput",
                "iVar2": "index",
                "uVar3": "value",
                "convert_unsigned_to_twos_complement_08008e44": "convertToTwosComplement",
                "calculate_normalized_float_08008eec": "normalizeFloat",
                "floating_point_addition_08009054": "performFloatingPointAddition",
                "update_and_process_data_08002edc": "updateAndProcessData"
            },
            "calling": [
                "FUN_080058a0"
            ],
            "called": [
                "FUN_08002edc",
                "FUN_08008eec",
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800369c": {
            "entrypoint": "0x0800369c",
            "current_name": "wait_for_character_set_0800369c",
            "code": "\nvoid wait_for_character_set_0800369c(char *input_string)\n\n{\n  char *current_character;\n  \n  current_character = input_string;\n  while (*current_character != '\\0') {\n    wait_for_bit_set_08008250(*current_character);\n    current_character = current_character + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800369c": "wait_for_character_set_0800369c",
                "param_1": "input_string",
                "local_c": "current_character"
            },
            "calling": [
                "FUN_08004900",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036c6": {
            "entrypoint": "0x080036c6",
            "current_name": "wait_for_characters_080036c6",
            "code": "\nvoid waitForCharacters_080036c6(char *characters)\n\n{\n  char *currentCharacter;\n  \n  currentCharacter = characters;\n  while (*currentCharacter != '\\0') {\n    wait_for_bit_set_08008250(*currentCharacter);\n    currentCharacter = currentCharacter + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036c6": "wait_for_characters_080036c6",
                "param_1": "characters",
                "local_c": "currentCharacter"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_0800423c",
                "FUN_08004250",
                "FUN_08004900",
                "FUN_08004030",
                "FUN_080041a0",
                "FUN_08004228",
                "FUN_08004940",
                "FUN_08004148"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f0": {
            "entrypoint": "0x080036f0",
            "current_name": "check_and_wait_bits_080036f0",
            "code": "\nvoid check_and_wait_bits_080036f0(uint input_value,int num_bits)\n\n{\n  undefined4 output_value;\n  int bit_index;\n  uint bit_mask;\n  \n  bit_mask = 1 << (num_bits - 1U & 0xff);\n  for (bit_index = 0; bit_index < num_bits; bit_index = bit_index + 1) {\n    if ((bit_mask & input_value) == 0) {\n      output_value = 0x30;\n    }\n    else {\n      output_value = 0x31;\n    }\n    wait_for_bit_set_08008250(output_value);\n    bit_mask = bit_mask >> 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f0": "check_and_wait_bits_080036f0",
                "param_1": "input_value",
                "param_2": "num_bits",
                "uVar1": "output_value",
                "local_10": "bit_index",
                "local_c": "bit_mask"
            },
            "calling": [
                "FUN_0800375c",
                "FUN_08003740"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003740": {
            "entrypoint": "0x08003740",
            "current_name": "wait_for_bits_08003740",
            "code": "\nvoid wait_for_bits_08003740(undefined data)\n\n{\n  check_and_wait_bits(data,8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003740": "wait_for_bits_08003740",
                "param_1": "data",
                "check_and_wait_bits_080036f0": "check_and_wait_bits"
            },
            "calling": [],
            "called": [
                "FUN_080036f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800375c": {
            "entrypoint": "0x0800375c",
            "current_name": "check_and_wait_bits_0800375c",
            "code": "\nvoid check_and_wait_bits_0800375c(undefined2 input_value)\n\n{\n  verify_and_wait_bits(input_value,0x10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800375c": "check_and_wait_bits_0800375c",
                "param_1": "input_value",
                "check_and_wait_bits_080036f0": "verify_and_wait_bits"
            },
            "calling": [
                "FUN_08004250"
            ],
            "called": [
                "FUN_080036f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003778": {
            "entrypoint": "0x08003778",
            "current_name": "convert_and_send_digits_08003778",
            "code": "\nvoid convertAndSendDigits_08003778(uint inputNumber)\n\n{\n  uint tempVar1;\n  uint remainingNumber;\n  char digitArray [12];\n  byte digitCount;\n  \n  digitCount = 0;\n  remainingNumber = inputNumber;\n  if (inputNumber == 0) {\n    wait_for_bit_set_08008250(0x30);\n  }\n  else {\n    for (; remainingNumber != 0; remainingNumber = remainingNumber / 10) {\n      tempVar1 = (uint)digitCount;\n      digitCount = digitCount + 1;\n      digitArray[tempVar1 + 1] = (char)(remainingNumber % 10) + '0';\n    }\n    for (; digitCount != 0; digitCount = digitCount - 1) {\n      wait_for_bit_set_08008250(digitArray[digitCount]);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003778": "convert_and_send_digits_08003778",
                "param_1": "inputNumber",
                "uVar1": "tempVar1",
                "local_1c": "remainingNumber",
                "acStack_15": "digitArray",
                "local_9": "digitCount"
            },
            "calling": [
                "FUN_080037fc"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080037fc": {
            "entrypoint": "0x080037fc",
            "current_name": "send_digits_080037fc",
            "code": "\nvoid sendDigits_080037fc(int inputValue)\n\n{\n  int convertedValue;\n  \n  convertedValue = inputValue;\n  if (inputValue < 0) {\n    wait_for_bit_set_08008250(0x2d);\n    convertedValue = -inputValue;\n  }\n  convert_and_send_digits_08003778(convertedValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080037fc": "send_digits_080037fc",
                "param_1": "inputValue",
                "local_c": "convertedValue"
            },
            "calling": [
                "FUN_080046d0",
                "FUN_08004250",
                "FUN_08004900"
            ],
            "called": [
                "FUN_08003778",
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003826": {
            "entrypoint": "0x08003826",
            "current_name": "convert_and_send_float_value_08003826",
            "code": "\nvoid convertAndSendFloatValue_08003826(uint inputValue)\n\n{\n  int isCyanideNull;\n  undefined4 normalizedFloat;\n  byte tempByte;\n  uint tempUint;\n  uint inputValueCopy;\n  char floatString [13];\n  uint intValue;\n  byte index;\n  byte loopCounter;\n  \n  isCyanideNull = is_cy_null_08009228(inputValue,0);\n  inputValueCopy = inputValue;\n  if (isCyanideNull != 0) {\n    wait_for_bit_set_08008250(0x2d);\n    inputValueCopy = inputValue ^ 0x80000000;\n  }\n  for (loopCounter = DAT_20000ef9; 1 < loopCounter; loopCounter = loopCounter - 2) {\n    inputValueCopy = calculate_normalized_float_08008eec(inputValueCopy,0x42c80000);\n  }\n  if (loopCounter != 0) {\n    inputValueCopy = calculate_normalized_float_08008eec(inputValueCopy,0x41200000);\n  }\n  normalizedFloat = calculate_floating_point_08008cdc(inputValueCopy,0x3f000000);\n  index = 0;\n  intValue = convert_to_signed_int_08009278(normalizedFloat);\n  floatString[DAT_20000ef9 + 1] = '.';\n  for (; intValue != 0; intValue = intValue / 10) {\n    if (index == DAT_20000ef9) {\n      index = index + 1;\n    }\n    tempUint = (uint)index;\n    index = index + 1;\n    floatString[tempUint + 1] = (char)(intValue % 10) + '0';\n  }\n  while (index < DAT_20000ef9) {\n    tempUint = (uint)index;\n    index = index + 1;\n    floatString[tempUint + 1] = '0';\n  }\n  if (index == DAT_20000ef9) {\n    tempByte = index + 1;\n    index = index + 2;\n    floatString[tempByte + 1] = '0';\n  }\n  for (; index != 0; index = index - 1) {\n    wait_for_bit_set_08008250(floatString[index]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003826": "convert_and_send_float_value_08003826",
                "param_1": "inputValue",
                "iVar1": "isCyanideNull",
                "uVar2": "normalizedFloat",
                "bVar3": "tempByte",
                "uVar4": "tempUint",
                "local_24": "inputValueCopy",
                "acStack_1d": "floatString",
                "local_10": "intValue",
                "local_a": "index",
                "local_9": "loopCounter"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_08004250",
                "FUN_08004940"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08009278",
                "FUN_08009228",
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003980": {
            "entrypoint": "0x08003980",
            "current_name": "initialize_data_08003980",
            "code": "\nvoid initializeData_08003980(void)\n\n{\n  DAT_20000e10 = 0;\n  DAT_20000e11 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003980": "initialize_data_08003980"
            },
            "calling": [
                "FUN_08003f34",
                "FUN_080039a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039a0": {
            "entrypoint": "0x080039a0",
            "current_name": "initialize_grbl_080039a0",
            "code": "\nvoid initialize_grbl_080039a0(void)\n\n{\n  initialize_data();\n  display_version();\n  DAT_20000e50 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039a0": "initialize_grbl_080039a0",
                "initialize_data_08003980": "initialize_data",
                "display_grbl_version_08004228": "display_version"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08003980",
                "FUN_08004228"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039bc": {
            "entrypoint": "0x080039bc",
            "current_name": "process_data_080039bc",
            "code": "\nvoid process_data_080039bc(void)\n\n{\n  int result;\n  undefined4 processed_value;\n  byte counter;\n  \n  for (counter = 0; counter < 2; counter = counter + 1) {\n    result = check_and_update_data_08004d2c(counter,&DAT_20000d10);\n    if (result == 0) {\n      FUNC_08004030(10);\n    }\n    else if (DAT_20000d10 != '\\0') {\n      wait_for_character_set_0800369c(&DAT_20000d10);\n      processed_value = process_byte_stream_080005b4(&DAT_20000d10);\n      FUNC_08004030(processed_value);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039bc": "process_data_080039bc",
                "iVar1": "result",
                "uVar2": "processed_value",
                "local_9": "counter"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004030",
                "FUN_080005b4",
                "FUN_08004d2c",
                "FUN_0800369c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a18": {
            "entrypoint": "0x08003a18",
            "current_name": "check_system_flag_08003a18",
            "code": "\nvoid checkSystemFlag_08003a18(uint inputFlag)\n\n{\n  if ((inputFlag & 0x80) == 0) {\n    if ((inputFlag & 0x40) == 0) {\n      if ((inputFlag & 0x20) != 0) {\n        DAT_20000eaa = DAT_20000eaa | 2;\n      }\n    }\n    else {\n      DAT_20000eaa = DAT_20000eaa | 8;\n    }\n  }\n  else {\n    initializeCheckSystem();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a18": "check_system_flag_08003a18",
                "param_1": "inputFlag",
                "initialize_and_check_system_080025e8": "initializeCheckSystem"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a74": {
            "entrypoint": "0x08003a74",
            "current_name": "process_alarms_08003a74",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08003ad2) */\n\nvoid process_alarms_08003a74(void)\n\n{\n  byte temp_byte;\n  \n  temp_byte = DAT_20000eaa;\n  if (DAT_20000eaa != 0) {\n    if ((DAT_20000eaa & 0x60) != 0) {\n      DAT_20000ea9 = 6;\n      if ((DAT_20000eaa & 0x40) != 0) {\n        display_alarm_message(0xffffffff);\n        display_message(1);\n        do {\n        } while( true );\n      }\n      display_alarm_message(0xfffffffe);\n      DAT_20000eaa = DAT_20000eaa & 0x9f;\n    }\n    if ((temp_byte & 0x10) == 0) {\n      if ((temp_byte & 1) != 0) {\n        update_status_1();\n        DAT_20000eaa = DAT_20000eaa & 0xfe;\n      }\n      if ((temp_byte & 8) != 0) {\n        update_status_2();\n        DAT_20000eaa = DAT_20000eaa & 0xf7;\n      }\n      if ((temp_byte & 4) != 0) {\n        process_data();\n        DAT_20000eaa = DAT_20000eaa & 0xfb;\n      }\n      if ((temp_byte & 2) != 0) {\n        initialize_if_needed();\n        if ((DAT_20000ee4 & 2) != 0) {\n          DAT_20000eb8 = 1;\n        }\n        DAT_20000eaa = DAT_20000eaa & 0xfd;\n      }\n    }\n    else {\n      DAT_20000ea8 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a74": "process_alarms_08003a74",
                "bVar1": "temp_byte",
                "display_alarm_message_08004148": "display_alarm_message",
                "display_message_080041a0": "display_message",
                "update_status_08004940": "update_status_1",
                "update_status_0800587c": "update_status_2",
                "process_data_080058a0": "process_data",
                "initialize_if_needed_0800585c": "initialize_if_needed"
            },
            "calling": [
                "FUN_08003f34",
                "FUN_08001e98",
                "FUN_08002408",
                "FUN_08002fd4",
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_0800585c",
                "FUN_0800587c",
                "FUN_080041a0",
                "FUN_08004940",
                "FUN_080058a0",
                "FUN_08004148"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b98": {
            "entrypoint": "0x08003b98",
            "current_name": "process_data_08003b98",
            "code": "\nuint processData_08003b98(char *inputData)\n\n{\n  byte currentByte;\n  int checkResult;\n  undefined4 convertedValue;\n  uint returnValue;\n  undefined8 transformedData;\n  undefined4 parsedValue;\n  undefined4 parsedIndex;\n  byte currentIndex;\n  byte loopIndex;\n  \n  if (*inputData != '$') {\n    returnValue = process_byte_stream_080005b4(inputData);\n    return returnValue;\n  }\n  currentIndex = 1;\n  loopIndex = '\\0';\n  currentByte = inputData[1];\n  if (currentByte == 0) {\n    view_grbl_settings_0800423c();\n    return 0;\n  }\n  if ((0x58 < currentByte) || (currentByte < 0x23)) goto switchD_08003bdc_caseD_25;\n  switch(currentByte) {\n  case 0x23:\n    currentIndex = 2;\n    if (inputData[2] != '\\0') {\n      return 3;\n    }\n    process_data_080044e8();\n    break;\n  case 0x24:\n    currentIndex = 2;\n    if (inputData[2] != '\\0') {\n      return 3;\n    }\n    configure_cnc_settings_08004250();\n    break;\n  case 0x43:\n    currentIndex = 2;\n    if (inputData[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\a') {\n      initialize_and_check_system_080025e8();\n      display_message_080041a0(5);\n    }\n    else {\n      if (DAT_20000ea9 != '\\0') {\n        return 0xb;\n      }\n      DAT_20000ea9 = '\\a';\n      display_message_080041a0(4);\n    }\n    break;\n  case 0x47:\n    currentIndex = 2;\n    if (inputData[2] != '\\0') {\n      return 3;\n    }\n    send_data_080046d0();\n    break;\n  case 0x48:\n    if ((DAT_20000ee4 & 0x10) == 0) {\n      return 7;\n    }\n    if ((DAT_20000ea9 != '\\0') && (DAT_20000ea9 != '\\x06')) {\n      return 0xb;\n    }\n    initialize_system_080024c4();\n    if (DAT_20000ea8 == '\\0') {\n      process_data_080039bc();\n    }\n    break;\n  case 0x4e:\n    currentIndex = 2;\n    if (inputData[2] == '\\0') {\n      for (loopIndex = 0; loopIndex < 2; loopIndex = loopIndex + 1) {\n        checkResult = check_and_update_data_08004d2c(loopIndex,inputData);\n        if (checkResult == 0) {\n          FUNC_08004030(10);\n        }\n        else {\n          initialize_communication_08004900(loopIndex,inputData);\n        }\n      }\n      return 0;\n    }\n    loopIndex = '\\x01';\n  default:\nswitchD_08003bdc_caseD_25:\n    checkResult = parse_integer_string_08002638(inputData,&currentIndex,&parsedIndex);\n    if (checkResult == 0) {\n      return 1;\n    }\n    currentByte = currentIndex + 1;\n    if (inputData[currentIndex] != '=') {\n      return 3;\n    }\n    currentIndex = currentByte;\n    if (loopIndex == '\\0') {\n      checkResult = parse_integer_string_08002638(inputData,&currentIndex,&parsedValue);\n      if (checkResult == 0) {\n        return 1;\n      }\n      if (inputData[currentIndex] == '\\0') {\n        convertedValue = convert_to_signed_int_08009278(parsedIndex);\n        returnValue = initialize_data_08004e30(convertedValue,parsedValue);\n        return returnValue;\n      }\n      return 3;\n    }\n    do {\n      inputData[(uint)currentIndex - (uint)currentByte] = inputData[currentIndex];\n      returnValue = (uint)currentIndex;\n      currentIndex = currentIndex + 1;\n    } while (inputData[returnValue] != '\\0');\n    loopIndex = currentByte;\n    loopIndex = process_byte_stream_080005b4(inputData);\n    if (loopIndex != 0) {\n      return (uint)loopIndex;\n    }\n    transformedData = decode_and_transform_data_08008590(parsedIndex);\n    transformedData = process_unsigned_numbers_08009798((int)transformedData,(int)((ulonglong)transformedData >> 0x20));\n    loopIndex = calculate_shifted_value_08008bf0((int)transformedData,(int)((ulonglong)transformedData >> 0x20));\n    update_data_08004bc0(loopIndex,inputData);\n    break;\n  case 0x58:\n    currentIndex = 2;\n    if (inputData[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\x06') {\n      display_message_080041a0(3);\n      DAT_20000ea9 = '\\0';\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003b98": "process_data_08003b98",
                "param_1": "inputData",
                "uVar3": "convertedValue",
                "uVar4": "returnValue",
                "uVar5": "transformedData",
                "local_14": "parsedValue",
                "local_10": "parsedIndex",
                "local_a": "currentIndex",
                "local_9": "loopIndex",
                "bVar1": "currentByte",
                "iVar2": "checkResult"
            },
            "calling": [
                "FUN_08003f34"
            ],
            "called": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08008bf0",
                "FUN_0800423c",
                "FUN_08004250",
                "FUN_08004030",
                "FUN_08009798",
                "FUN_08004e30",
                "FUN_080025e8",
                "FUN_080024c4",
                "FUN_08004bc0",
                "FUN_080044e8",
                "FUN_08008590",
                "FUN_08004900",
                "FUN_08009278",
                "FUN_080005b4",
                "FUN_080041a0",
                "FUN_08004d2c",
                "FUN_080039bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f34": {
            "entrypoint": "0x08003f34",
            "current_name": "process_and_initialize_input_08003f34",
            "code": "\nvoid process_and_initialize_input_08003f34(void)\n\n{\n  byte data_byte;\n  undefined4 result;\n  uint index;\n  \n  while( true ) {\n    while( true ) {\n      data_byte = get_next_byte_from_input();\n      if (data_byte == 0xff) {\n        return;\n      }\n      if ((data_byte == 10) || (data_byte == 0xd)) break;\n      if (DAT_20000e11 == '\\0') {\n        if ((0x20 < data_byte) && (data_byte != 0x2f)) {\n          if (data_byte == 0x28) {\n            DAT_20000e11 = '\\x01';\n          }\n          else if (DAT_20000e10 == 0xff) {\n            FUNC_08004030(0xd);\n            initialize_data();\n          }\n          else if ((data_byte < 0x61) || (0x7a < data_byte)) {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = data_byte;\n          }\n          else {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = data_byte - 0x20;\n          }\n        }\n      }\n      else if (data_byte == 0x29) {\n        DAT_20000e11 = '\\0';\n      }\n    }\n    process_alarms();\n    if (DAT_20000ea8 != '\\0') break;\n    if (DAT_20000e10 == 0) {\n      FUNC_08004030(0);\n    }\n    else {\n      (&DAT_20000d10)[DAT_20000e10] = 0;\n      result = process_data(&DAT_20000d10);\n      FUNC_08004030(result);\n    }\n    initialize_data();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f34": "process_and_initialize_input_08003f34",
                "bVar1": "data_byte",
                "uVar2": "result",
                "uVar3": "index",
                "process_data_08008286": "get_next_byte_from_input",
                "initialize_data_08003980": "initialize_data",
                "process_alarms_08003a74": "process_alarms",
                "process_data_08003b98": "process_data"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08008286",
                "FUN_08003b98",
                "FUN_08004030",
                "FUN_08003980",
                "FUN_08003a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004030": {
            "entrypoint": "0x08004030",
            "current_name": "FUNC_08004030",
            "code": "\nvoid FUNC_08004030(char param_1)\n\n{\n  if (param_1 == '\\0') {\n    wait_for_characters_080036c6(&DAT_0800b5c8);\n  }\n  else {\n    wait_for_characters_080036c6(\"error: \");\n    switch(param_1) {\n    case '\\x01':\n      wait_for_characters_080036c6(\"Bad number format\");\n      break;\n    case '\\x02':\n      wait_for_characters_080036c6(\"Expected command letter\");\n      break;\n    case '\\x03':\n      wait_for_characters_080036c6(\"Unsupported statement\");\n      break;\n    case '\\x04':\n      wait_for_characters_080036c6(\"Invalid radius\");\n      break;\n    case '\\x05':\n      wait_for_characters_080036c6(\"Modal group violation\");\n      break;\n    case '\\x06':\n      wait_for_characters_080036c6(\"Invalid statement\");\n      break;\n    case '\\a':\n      wait_for_characters_080036c6(\"Setting disabled\");\n      break;\n    case '\\b':\n      wait_for_characters_080036c6(\"Value < 0.0\");\n      break;\n    case '\\t':\n      wait_for_characters_080036c6(\"Value < 3 usec\");\n      break;\n    case '\\n':\n      wait_for_characters_080036c6(\"EEPROM read fail. Using defaults\");\n      break;\n    case '\\v':\n      wait_for_characters_080036c6(\"Busy or queued\");\n      break;\n    case '\\f':\n      wait_for_characters_080036c6(\"Alarm lock\");\n      break;\n    case '\\r':\n      wait_for_characters_080036c6(\"Line overflow\");\n    }\n    wait_for_characters_080036c6(&DAT_0800b6d8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004030": "FUNC_08004030"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080004ac",
                "FUN_08003f34",
                "FUN_08003b98",
                "FUN_080039bc",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004148": {
            "entrypoint": "0x08004148",
            "current_name": "display_alarm_message_08004148",
            "code": "\nvoid displayAlarmMessage_08004148(char errorCode)\n\n{\n  waitForCharacters(\"ALARM: \");\n  if (errorCode == -2) {\n    waitForCharacters(\"Abort during cycle\");\n  }\n  else if (errorCode == -1) {\n    waitForCharacters(\"Hard limit\");\n  }\n  waitForCharacters(\". MPos?\\r\\n\");\n  FUNC_08002814(500);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004148": "display_alarm_message_08004148",
                "param_1": "errorCode",
                "wait_for_characters_080036c6": "waitForCharacters"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a0": {
            "entrypoint": "0x080041a0",
            "current_name": "display_message_080041a0",
            "code": "\nvoid displayMessage_080041a0(undefined messageType)\n\n{\n  waitForCharacters(&DAT_0800b710);\n  switch(messageType) {\n  case 1:\n    waitForCharacters(\"Reset to continue\");\n    break;\n  case 2:\n    waitForCharacters(\"\\'$H\\'|\\'$X\\' to unlock\");\n    break;\n  case 3:\n    waitForCharacters(\"Caution: Unlocked\");\n    break;\n  case 4:\n    waitForCharacters(\"Enabled\");\n    break;\n  case 5:\n    waitForCharacters(\"Disabled\");\n  }\n  waitForCharacters(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a0": "display_message_080041a0",
                "param_1": "messageType",
                "wait_for_characters_080036c6": "waitForCharacters"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08001ddc",
                "FUN_08003a74"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004228": {
            "entrypoint": "0x08004228",
            "current_name": "display_grbl_version_08004228",
            "code": "\nvoid displayGrblVersion_08004228(void)\n\n{\n  waitForCharacters(\"\\r\\nGrbl 0.8c [\\'$\\' for help]\\r\\n\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004228": "display_grbl_version_08004228",
                "wait_for_characters_080036c6": "waitForCharacters"
            },
            "calling": [
                "FUN_080039a0"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800423c": {
            "entrypoint": "0x0800423c",
            "current_name": "view_grbl_settings_0800423c",
            "code": "\nvoid viewGrblSettings_0800423c(void)\n\n{\n  wait_for_characters_080036c6(\n              \"viewSettingsCommand (view Grbl settings)\\r\\nviewParametersCommand (view # parameters)\\r\\nviewParserStateCommand (view parser state)\\r\\nviewStartupBlocksCommand (view startup blocks)\\r\\nsaveGrblSettingCommand (save Grbl setting)\\r\\nsaveStartupBlockCommand (save startup block)\\r\\ncheckGcodeModeCommand (check gcode mode)\\r\\nkillAlarmLockCommand (kill alarm lock)\\r\\nrunHomingCycleCommand (run homing cycle)\\r\\ncycleStartCommand (cycle start)\\r\\nfeedHoldCommand (feed hold)\\r\\n? (current status)\\r\\nresetGrblCommand (reset Grbl)\\r\\n\"\n              );\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800423c": "view_grbl_settings_0800423c",
                "$$": "viewSettingsCommand",
                "$#": "viewParametersCommand",
                "$G": "viewParserStateCommand",
                "$N": "viewStartupBlocksCommand",
                "$x=value": "saveGrblSettingCommand",
                "$Nx=line": "saveStartupBlockCommand",
                "$C": "checkGcodeModeCommand",
                "$X": "killAlarmLockCommand",
                "$H": "runHomingCycleCommand",
                "~": "cycleStartCommand",
                "!": "feedHoldCommand",
                "ctrl-x": "resetGrblCommand"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004250": {
            "entrypoint": "0x08004250",
            "current_name": "configure_cnc_settings_08004250",
            "code": "\nvoid configureCNCSettings_08004250(void)\n\n{\n  undefined4 uVar1;\n  \n  wait_for_characters_080036c6(&DAT_0800b8b8);\n  convert_and_send_float_value_08003826(DAT_20000ebc);\n  wait_for_characters_080036c6(\" (x, step/mm)\\r\\n$1=\");\n  convert_and_send_float_value_08003826(DAT_20000ec0);\n  wait_for_characters_080036c6(\" (y, step/mm)\\r\\n$2=\");\n  convert_and_send_float_value_08003826(DAT_20000ec4);\n  wait_for_characters_080036c6(\" (z, step/mm)\\r\\n$3=\");\n  send_digits_080037fc(DAT_20000ec9);\n  wait_for_characters_080036c6(\" (step pulse, usec)\\r\\n$4=\");\n  convert_and_send_float_value_08003826(DAT_20000ecc);\n  wait_for_characters_080036c6(\" (default feed, mm/min)\\r\\n$5=\");\n  convert_and_send_float_value_08003826(DAT_20000ed0);\n  wait_for_characters_080036c6(\" (default seek, mm/min)\\r\\n$6=\");\n  send_digits_080037fc(DAT_20000ed4);\n  wait_for_characters_080036c6(\" (step port invert mask, int:\");\n  check_and_wait_bits_0800375c(DAT_20000ed4);\n  wait_for_characters_080036c6(\")\\r\\n$7=\");\n  send_digits_080037fc(DAT_20000ef8);\n  wait_for_characters_080036c6(\" (step idle delay, msec)\\r\\n$8=\");\n  uVar1 = floating_point_addition_08009054(DAT_20000edc,0x45610000);\n  convert_and_send_float_value_08003826(uVar1);\n  wait_for_characters_080036c6(\" (acceleration, mm/sec^2)\\r\\n$9=\");\n  convert_and_send_float_value_08003826(DAT_20000ee0);\n  wait_for_characters_080036c6(\" (junction deviation, mm)\\r\\n$10=\");\n  convert_and_send_float_value_08003826(DAT_20000ed8);\n  wait_for_characters_080036c6(\" (arc, mm/segment)\\r\\n$11=\");\n  send_digits_080037fc(DAT_20000efa);\n  wait_for_characters_080036c6(\" (n-arc correction, int)\\r\\n$12=\");\n  send_digits_080037fc(DAT_20000ef9);\n  wait_for_characters_080036c6(\" (n-decimals, int)\\r\\n$13=\");\n  send_digits_080037fc((DAT_20000ee4 & 1) != 0);\n  wait_for_characters_080036c6(\" (report inches, bool)\\r\\n$14=\");\n  send_digits_080037fc((DAT_20000ee4 & 2) != 0);\n  wait_for_characters_080036c6(\" (auto start, bool)\\r\\n$15=\");\n  send_digits_080037fc((DAT_20000ee4 & 4) != 0);\n  wait_for_characters_080036c6(\" (invert step enable, bool)\\r\\n$16=\");\n  send_digits_080037fc((DAT_20000ee4 & 8) != 0);\n  wait_for_characters_080036c6(\" (hard limits, bool)\\r\\n$17=\");\n  send_digits_080037fc((DAT_20000ee4 & 0x10) != 0);\n  wait_for_characters_080036c6(\" (homing cycle, bool)\\r\\n$18=\");\n  send_digits_080037fc(DAT_20000ee6);\n  wait_for_characters_080036c6(\" (homing dir invert mask, int:\");\n  check_and_wait_bits_0800375c(DAT_20000ee6);\n  wait_for_characters_080036c6(\")\\r\\n$19=\");\n  convert_and_send_float_value_08003826(DAT_20000ee8);\n  wait_for_characters_080036c6(\" (homing feed, mm/min)\\r\\n$20=\");\n  convert_and_send_float_value_08003826(DAT_20000eec);\n  wait_for_characters_080036c6(\" (homing seek, mm/min)\\r\\n$21=\");\n  send_digits_080037fc(DAT_20000ef0);\n  wait_for_characters_080036c6(\" (homing debounce, msec)\\r\\n$22=\");\n  convert_and_send_float_value_08003826(DAT_20000ef4);\n  wait_for_characters_080036c6(\" (homing pull-off, mm)\\r\\n$23=\");\n  send_digits_080037fc(DAT_20000ed6);\n  wait_for_characters_080036c6(\" (dir port invert mask, int:\");\n  check_and_wait_bits_0800375c(DAT_20000ed6);\n  wait_for_characters_080036c6(&DAT_0800bb94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004250": "configure_cnc_settings_08004250"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_0800375c",
                "FUN_08009054",
                "FUN_08003826"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044e8": {
            "entrypoint": "0x080044e8",
            "current_name": "process_data_080044e8",
            "code": "\nvoid processData_080044e8(void)\n\n{\n  int dataIntegrityResult;\n  undefined4 convertedValue;\n  undefined8 transformedValue;\n  undefined4 dataBuffer [3];\n  byte index;\n  byte counter;\n  \n  counter = 0;\n  while( true ) {\n    if (7 < counter) {\n      waitForCharacters(\"[G92:\");\n      for (index = 0; index < 3; index = index + 1) {\n        if ((DAT_20000ee4 & 1) == 0) {\n          convertAndSendFloat(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n        }\n        else {\n          transformedValue = decodeAndTransformData(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n          transformedValue = calculateMultiplicationAndAddition((int)transformedValue,(int)((ulonglong)transformedValue >> 0x20),0x57e16865,0x3fa42851);\n          convertedValue = reversedBinaryOperation((int)transformedValue,(int)((ulonglong)transformedValue >> 0x20));\n          convertAndSendFloat(convertedValue);\n        }\n        if (index < 2) {\n          waitForCharacters(&DAT_0800bbbc);\n        }\n        else {\n          waitForCharacters(&DAT_0800b764);\n        }\n      }\n      return;\n    }\n    dataIntegrityResult = checkAndUpdateDataIntegrity(counter,dataBuffer);\n    if (dataIntegrityResult == 0) break;\n    waitForCharacters(&DAT_0800bb98);\n    switch(counter) {\n    case 0:\n      waitForCharacters(&DAT_0800bb9c);\n      break;\n    case 1:\n      waitForCharacters(&DAT_0800bba0);\n      break;\n    case 2:\n      waitForCharacters(&DAT_0800bba4);\n      break;\n    case 3:\n      waitForCharacters(&DAT_0800bba8);\n      break;\n    case 4:\n      waitForCharacters(&DAT_0800bbac);\n      break;\n    case 5:\n      waitForCharacters(&DAT_0800bbb0);\n      break;\n    case 6:\n      waitForCharacters(&DAT_0800bbb4);\n      break;\n    case 7:\n      waitForCharacters(&DAT_0800bbb8);\n    }\n    for (index = 0; index < 3; index = index + 1) {\n      if ((DAT_20000ee4 & 1) == 0) {\n        convertAndSendFloat(dataBuffer[index]);\n      }\n      else {\n        transformedValue = decodeAndTransformData(dataBuffer[index]);\n        transformedValue = calculateMultiplicationAndAddition((int)transformedValue,(int)((ulonglong)transformedValue >> 0x20),0x57e16865,0x3fa42851);\n        convertedValue = reversedBinaryOperation((int)transformedValue,(int)((ulonglong)transformedValue >> 0x20));\n        convertAndSendFloat(convertedValue);\n      }\n      if (index < 2) {\n        waitForCharacters(&DAT_0800bbbc);\n      }\n      else {\n        waitForCharacters(&DAT_0800b764);\n      }\n    }\n    counter = counter + 1;\n  }\n  FUNC_08004030(10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044e8": "process_data_080044e8",
                "iVar1": "dataIntegrityResult",
                "uVar2": "convertedValue",
                "uVar3": "transformedValue",
                "auStack_18": "dataBuffer",
                "local_a": "index",
                "local_9": "counter",
                "wait_for_characters_080036c6": "waitForCharacters",
                "convert_and_send_float_value_08003826": "convertAndSendFloat",
                "decode_and_transform_data_08008590": "decodeAndTransformData",
                "calculate_multiplication_and_addition_08008640": "calculateMultiplicationAndAddition",
                "reversed_binary_operation_08008c30": "reversedBinaryOperation",
                "check_and_update_data_integrity_08004d7c": "checkAndUpdateDataIntegrity"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08004030",
                "FUN_08008c30",
                "FUN_08003826",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046d0": {
            "entrypoint": "0x080046d0",
            "current_name": "send_data_080046d0",
            "code": "\nvoid send_data_080046d0(void)\n\n{\n  undefined4 uVar1;\n  undefined8 uVar2;\n  \n  switch(DAT_20000e71) {\n  case 0:\n    wait_for_characters(&DAT_0800bbc8);\n    break;\n  case 1:\n    wait_for_characters(&DAT_0800bbcc);\n    break;\n  case 2:\n    wait_for_characters(&DAT_0800bbd0);\n    break;\n  case 3:\n    wait_for_characters(&DAT_0800bbd4);\n    break;\n  case 4:\n    wait_for_characters(&DAT_0800bbd8);\n  }\n  wait_for_characters(&DAT_0800bbe0);\n  send_digits(DAT_20000e8c + 0x36);\n  if (DAT_20000e89 == '\\0') {\n    if (DAT_20000e8a == '\\x01') {\n      wait_for_characters(&DAT_0800bbe4);\n    }\n    else {\n      wait_for_characters(&DAT_0800bbec);\n    }\n  }\n  else {\n    wait_for_characters(&DAT_0800bbf4);\n  }\n  if (DAT_20000e73 == '\\0') {\n    wait_for_characters(&DAT_0800bc04);\n  }\n  else {\n    wait_for_characters(&DAT_0800bbfc);\n  }\n  if (DAT_20000e74 == '\\0') {\n    wait_for_characters(&DAT_0800bc14);\n  }\n  else {\n    wait_for_characters(&DAT_0800bc0c);\n  }\n  if (DAT_20000e72 == '\\0') {\n    wait_for_characters(&DAT_0800bc24);\n  }\n  else {\n    wait_for_characters(&DAT_0800bc1c);\n  }\n  if (DAT_20000e75 == 2) {\n    wait_for_characters(&DAT_0800bc34);\n  }\n  else if (DAT_20000e75 < 3) {\n    if (DAT_20000e75 == 0) {\n      wait_for_characters(&DAT_0800bc2c);\n    }\n    else if (DAT_20000e75 == 1) {\n      wait_for_characters(&DAT_0800bc30);\n    }\n  }\n  if (DAT_20000e76 == '\\x01') {\n    wait_for_characters(&DAT_0800bc38);\n  }\n  else if (DAT_20000e76 < '\\x02') {\n    if (DAT_20000e76 == -1) {\n      wait_for_characters(&DAT_0800bc3c);\n    }\n    else if (DAT_20000e76 == '\\0') {\n      wait_for_characters(&DAT_0800bc40);\n    }\n  }\n  if (DAT_20000e77 == 2) {\n    wait_for_characters(&DAT_0800bc4c);\n  }\n  else if (DAT_20000e77 < 3) {\n    if (DAT_20000e77 == 0) {\n      wait_for_characters(&DAT_0800bc44);\n    }\n    else if (DAT_20000e77 == 1) {\n      wait_for_characters(&DAT_0800bc48);\n    }\n  }\n  wait_for_characters(&DAT_0800bc50);\n  send_digits(DAT_20000e88);\n  wait_for_characters(&DAT_0800bc54);\n  if (DAT_20000e73 == '\\0') {\n    convert_and_send_float_value(DAT_20000e78);\n  }\n  else {\n    uVar2 = decode_and_transform_data(DAT_20000e78);\n    uVar2 = calculate_multiplication_and_addition((int)uVar2,(int)((ulonglong)uVar2 >> 0x20),0x57e16865,0x3fa42851);\n    uVar1 = reversed_binary_operation((int)uVar2,(int)((ulonglong)uVar2 >> 0x20));\n    convert_and_send_float_value(uVar1);\n  }\n  wait_for_characters(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046d0": "send_data_080046d0",
                "wait_for_characters_080036c6": "wait_for_characters",
                "send_digits_080037fc": "send_digits",
                "decode_and_transform_data_08008590": "decode_and_transform_data",
                "calculate_multiplication_and_addition_08008640": "calculate_multiplication_and_addition",
                "reversed_binary_operation_08008c30": "reversed_binary_operation",
                "convert_and_send_float_value_08003826": "convert_and_send_float_value"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30",
                "FUN_08003826"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004900": {
            "entrypoint": "0x08004900",
            "current_name": "initialize_communication_08004900",
            "code": "\nvoid initializeCommunication_08004900(undefined data,undefined4 errorCode)\n\n{\n  waitForCharacters(&DAT_0800bc58);\n  sendData(data);\n  waitForCharacters(&DAT_0800bc5c);\n  waitForCharacter(errorCode);\n  waitForCharacters(&DAT_0800b6d8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004900": "initialize_communication_08004900",
                "param_1": "data",
                "param_2": "errorCode",
                "wait_for_characters_080036c6": "waitForCharacters",
                "send_digits_080037fc": "sendData",
                "wait_for_character_set_0800369c": "waitForCharacter"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_0800369c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004940": {
            "entrypoint": "0x08004940",
            "current_name": "update_status_08004940",
            "code": "\nvoid updateStatus_08004940(void)\n\n{\n  undefined4 convertedValue;\n  uint tempIndex;\n  undefined4 tempValue;\n  undefined8 decodedValue;\n  undefined8 decodedValue2;\n  undefined4 statusValues [6];\n  byte index;\n  \n  statusValues[3] = DAT_20000eac;\n  statusValues[4] = DAT_20000eb0;\n  statusValues[5] = DAT_20000eb4;\n  switch(DAT_20000ea9) {\n  case 0:\n    wait_for_characters_080036c6(\"<Idle\");\n    break;\n  case 2:\n    wait_for_characters_080036c6(\"<Queue\");\n    break;\n  case 3:\n    wait_for_characters_080036c6(&DAT_0800bc70);\n    break;\n  case 4:\n    wait_for_characters_080036c6(\"<Hold\");\n    break;\n  case 5:\n    wait_for_characters_080036c6(\"<Home\");\n    break;\n  case 6:\n    wait_for_characters_080036c6(\"<Alarm\");\n    break;\n  case 7:\n    wait_for_characters_080036c6(\"<Check\");\n  }\n  wait_for_characters_080036c6(\",MPos:\");\n  for (index = 0; index < 3; index = index + 1) {\n    convertedValue = convert_unsigned_to_twos_complement_08008e44(statusValues[index + 3]);\n    tempIndex = (uint)index;\n    convertedValue = floating_point_addition_08009054(convertedValue,(&DAT_20000ebc)[index]);\n    statusValues[tempIndex] = convertedValue;\n    if ((DAT_20000ee4 & 1) != 0) {\n      decodedValue = decode_and_transform_data_08008590(statusValues[index]);\n      decodedValue = calculate_multiplication_and_addition_08008640((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20),0x57e16865,0x3fa42851);\n      tempIndex = (uint)index;\n      convertedValue = reversed_binary_operation_08008c30((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n      statusValues[tempIndex] = convertedValue;\n    }\n    convert_and_send_float_value_08003826(statusValues[index]);\n    wait_for_characters_080036c6(&DAT_0800bbbc);\n  }\n  wait_for_characters_080036c6(\"WPos:\");\n  for (index = 0; index < 3; index = index + 1) {\n    if ((DAT_20000ee4 & 1) == 0) {\n      tempValue = statusValues[index];\n      convertedValue = calculate_floating_point_08008cdc(*(undefined4 *)(&DAT_20000e70 + (index + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n      tempIndex = (uint)index;\n      convertedValue = calculate_float_08008cd8(tempValue,convertedValue);\n      statusValues[tempIndex] = convertedValue;\n    }\n    else {\n      decodedValue = decode_and_transform_data_08008590(statusValues[index]);\n      convertedValue = calculate_floating_point_08008cdc(*(undefined4 *)(&DAT_20000e70 + (index + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n      decodedValue2 = decode_and_transform_data_08008590(convertedValue);\n      decodedValue2 = calculate_multiplication_and_addition_08008640((int)decodedValue2,(int)((ulonglong)decodedValue2 >> 0x20),0x57e16865,0x3fa42851);\n      decodedValue = perform_operation_080082d0((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20),(int)decodedValue2,\n                           (int)((ulonglong)decodedValue2 >> 0x20));\n      tempIndex = (uint)index;\n      convertedValue = reversed_binary_operation_08008c30((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n      statusValues[tempIndex] = convertedValue;\n    }\n    convert_and_send_float_value_08003826(statusValues[index]);\n    if (index < 2) {\n      wait_for_characters_080036c6(&DAT_0800bbbc);\n    }\n  }\n  wait_for_characters_080036c6(&DAT_0800bca8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004940": "update_status_08004940",
                "auStack_2c": "statusValues",
                "local_11": "index",
                "uVar1": "convertedValue",
                "uVar2": "tempIndex",
                "uVar3": "tempValue",
                "uVar4": "decodedValue",
                "uVar5": "decodedValue2"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_080036c6",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_08008c30",
                "FUN_08009054",
                "FUN_08003826",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bc0": {
            "entrypoint": "0x08004bc0",
            "current_name": "update_data_08004bc0",
            "code": "\nvoid update_data_08004bc0(byte data_byte,undefined4 data_length)\n\n{\n  update_data_08004bc0_with_checksum_08000374((updated_data)data_byte * 0x101 + 0x300,data_length,0x100);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bc0": "update_data_08004bc0",
                "param_1": "data_byte",
                "param_2": "data_length",
                "ushort": "updated_data"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08004d2c"
            ],
            "called": [
                "FUN_08000374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bf4": {
            "entrypoint": "0x08004bf4",
            "current_name": "update_data_with_checksum_08004bf4",
            "code": "\nvoid update_data_with_checksum_08004bf4(byte input_byte,undefined4 input_value)\n\n{\n  update_data_with_checksum_08004bf4_08000374((ushort)input_byte * 0xd + 0x200,input_value,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bf4": "update_data_with_checksum_08004bf4",
                "param_1": "input_byte",
                "param_2": "input_value"
            },
            "calling": [
                "FUN_080005b4",
                "FUN_08004d7c"
            ],
            "called": [
                "FUN_08000374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c2a": {
            "entrypoint": "0x08004c2a",
            "current_name": "initialize_data_08004c2a",
            "code": "\nvoid initialize_data_08004c2a(void)\n\n{\n  update_data(0,5);\n  update_data_with_checksum(1,&DAT_20000ebc,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c2a": "initialize_data_08004c2a",
                "update_data_08000340": "update_data",
                "update_data_with_checksum_08000374": "update_data_with_checksum"
            },
            "calling": [
                "FUN_08004e30",
                "FUN_08004c48"
            ],
            "called": [
                "FUN_08000374",
                "FUN_08000340"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "initialize_data_08004c48",
            "code": "\nvoid initialize_data_08004c48(char input_char)\n\n{\n  if (input_char != '\\0') {\n    DAT_20000ebc = 0x431d7af6;\n    DAT_20000ec0 = 0x431d7af6;\n    DAT_20000ec4 = 0x431d7af6;\n    DAT_20000ec9 = 10;\n    DAT_20000ecc = 0x437a0000;\n    DAT_20000ed0 = 0x43fa0000;\n    DAT_20000edc = 0x470ca000;\n    DAT_20000ed8 = 0x3dcccccd;\n    DAT_20000ed4 = 0;\n    DAT_20000ed6 = 0xa80;\n    DAT_20000ee0 = 0x3d4ccccd;\n  }\n  DAT_20000ee4 = 0x12;\n  DAT_20000ee6 = 0;\n  DAT_20000ee8 = 0x41c80000;\n  DAT_20000eec = 0x437a0000;\n  DAT_20000ef0 = 100;\n  DAT_20000ef4 = 0x3f800000;\n  DAT_20000ef8 = 0x19;\n  DAT_20000ef9 = 3;\n  DAT_20000efa = 0x19;\n  initialize_data_08004c48_08004c2a();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "initialize_data_08004c48",
                "param_1": "input_char"
            },
            "calling": [
                "FUN_08004dd2",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_08004c2a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d2c": {
            "entrypoint": "0x08004d2c",
            "current_name": "check_and_update_data_08004d2c",
            "code": "\nbool checkAndUpdateData_08004d2c(byte byteParam,undefined *dataPtr)\n\n{\n  int integrityCheckResult;\n  \n  integrityCheckResult = check_data_integrity_080003ec(dataPtr,(ushort)byteParam * 0x101 + 0x300,0x100);\n  if (integrityCheckResult == 0) {\n    *dataPtr = 0;\n    update_data_08004bc0(byteParam,dataPtr);\n  }\n  return integrityCheckResult != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d2c": "check_and_update_data_08004d2c",
                "param_1": "byteParam",
                "param_2": "dataPtr",
                "iVar1": "integrityCheckResult"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_08004bc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d7c": {
            "entrypoint": "0x08004d7c",
            "current_name": "check_and_update_data_integrity_08004d7c",
            "code": "\nbool checkAndUpdateDataIntegrity_08004d7c(byte byteValue,undefined4 dataPointer)\n\n{\n  int integrityCheckResult;\n  \n  integrityCheckResult = check_data_integrity_080003ec(dataPointer,(ushort)byteValue * 0xd + 0x200,0xc);\n  if (integrityCheckResult == 0) {\n    memset_0800b430(dataPointer,0,0xc);\n    update_data_with_checksum_08004bf4(byteValue,dataPointer);\n  }\n  return integrityCheckResult != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d7c": "check_and_update_data_integrity_08004d7c",
                "param_1": "byteValue",
                "param_2": "dataPointer",
                "iVar1": "integrityCheckResult"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080004ac",
                "FUN_080005b4",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_0800b430",
                "FUN_08004bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004dd2": {
            "entrypoint": "0x08004dd2",
            "current_name": "check_data_integrity_and_initialize_08004dd2",
            "code": "\nundefined4 check_data_integrity_and_initialize_08004dd2(void)\n\n{\n  byte data_entry;\n  int integrity_check_result;\n  \n  data_entry = get_data_entry_08000310(0);\n  if (data_entry == 5) {\n    integrity_check_result = check_data_integrity_080003ec(&DAT_20000ebc,1,0x40);\n    if (integrity_check_result == 0) {\n      return 0;\n    }\n  }\n  else {\n    if (4 < data_entry) {\n      return 0;\n    }\n    integrity_check_result = check_data_integrity_080003ec(&DAT_20000ebc,1,0x28);\n    if (integrity_check_result == 0) {\n      return 0;\n    }\n    initialize_data_08004c48(0);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08004dd2": "check_data_integrity_and_initialize_08004dd2",
                "bVar1": "data_entry",
                "iVar2": "integrity_check_result"
            },
            "calling": [
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_08004c48",
                "FUN_08000310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e30": {
            "entrypoint": "0x08004e30",
            "current_name": "initialize_data_08004e30",
            "code": "\nundefined4 initialize_data_08004e30(int operation,uint input_value)\n\n{\n  undefined4 result;\n  int error;\n  undefined8 decoded_value;\n  \n  switch(operation) {\n  case 0:\n  case 1:\n  case 2:\n    error = check_concatenated_integers_0800923c(input_value,0);\n    if (error != 0) {\n      return 8;\n    }\n    (&DAT_20000ebc)[operation] = input_value;\n    break;\n  case 3:\n    error = is_cy_null_08009228(input_value,0x40400000);\n    if (error != 0) {\n      return 9;\n    }\n    decoded_value = decode_and_transform_data_08008590(input_value);\n    decoded_value = convert_to_double_08009654((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    DAT_20000ec9 = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    break;\n  case 4:\n    DAT_20000ecc = input_value;\n    break;\n  case 5:\n    DAT_20000ed0 = input_value;\n    break;\n  case 6:\n    decoded_value = decode_and_transform_data_08008590(input_value);\n    decoded_value = process_unsigned_numbers_08009798((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    DAT_20000ed4 = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    break;\n  case 7:\n    decoded_value = decode_and_transform_data_08008590(input_value);\n    decoded_value = convert_to_double_08009654((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    DAT_20000ef8 = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    break;\n  case 8:\n    result = calculate_normalized_float_08008eec(input_value,0x42700000);\n    DAT_20000edc = calculate_normalized_float_08008eec(result,0x42700000);\n    break;\n  case 9:\n    DAT_20000ee0 = input_value & 0x7fffffff;\n    break;\n  case 10:\n    DAT_20000ed8 = input_value;\n    break;\n  case 0xb:\n    decoded_value = decode_and_transform_data_08008590(input_value);\n    decoded_value = convert_to_double_08009654((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    DAT_20000efa = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    break;\n  case 0xc:\n    decoded_value = decode_and_transform_data_08008590(input_value);\n    decoded_value = convert_to_double_08009654((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    DAT_20000ef9 = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    break;\n  case 0xd:\n    error = check_concatenation_result_08009214(input_value,0);\n    if (error == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 1;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfe;\n    }\n    break;\n  case 0xe:\n    error = check_concatenation_result_08009214(input_value,0);\n    if (error == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 2;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfd;\n    }\n    break;\n  case 0xf:\n    error = check_concatenation_result_08009214(input_value,0);\n    if (error == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 4;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfb;\n    }\n    break;\n  case 0x10:\n    error = check_concatenation_result_08009214(input_value,0);\n    if (error == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 8;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xf7;\n    }\n    update_flag_from_data_0800192c();\n    break;\n  case 0x11:\n    error = check_concatenation_result_08009214(input_value,0);\n    if (error == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 0x10;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xef;\n    }\n    break;\n  case 0x12:\n    decoded_value = decode_and_transform_data_08008590(input_value);\n    decoded_value = process_unsigned_numbers_08009798((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    DAT_20000ee6 = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    break;\n  case 0x13:\n    DAT_20000ee8 = input_value;\n    break;\n  case 0x14:\n    DAT_20000eec = input_value;\n    break;\n  case 0x15:\n    decoded_value = decode_and_transform_data_08008590(input_value);\n    decoded_value = convert_to_double_08009654((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    DAT_20000ef0 = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    break;\n  case 0x16:\n    DAT_20000ef4 = input_value;\n    break;\n  case 0x17:\n    decoded_value = decode_and_transform_data_08008590(input_value);\n    decoded_value = process_unsigned_numbers_08009798((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    DAT_20000ed6 = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    break;\n  default:\n    return 6;\n  }\n  initialize_data_08004e30_08004c2a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e30": "initialize_data_08004e30",
                "param_1": "operation",
                "param_2": "input_value",
                "uVar1": "result",
                "iVar2": "error",
                "uVar3": "decoded_value"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08009654",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08009214",
                "FUN_08009228",
                "FUN_08009798",
                "FUN_08004c2a",
                "FUN_0800923c",
                "FUN_0800192c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080051b4": {
            "entrypoint": "0x080051b4",
            "current_name": "initialize_and_configure_080051b4",
            "code": "\nvoid initializeAndConfigure_080051b4(void)\n\n{\n  int result;\n  undefined buffer [15];\n  byte counter;\n  \n  result = check_data_integrity_and_initialize_08004dd2();\n  if (result == 0) {\n    FUNC_08004030(10);\n    initialize_data_08004c48(1);\n    configure_cnc_settings_08004250();\n  }\n  for (counter = 0; counter < 8; counter = counter + 1) {\n    result = check_and_update_data_integrity_08004d7c(counter,buffer);\n    if (result == 0) {\n      FUNC_08004030(10);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051b4": "initialize_and_configure_080051b4",
                "auStack_18": "buffer",
                "local_9": "counter",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004dd2",
                "FUN_08004250",
                "FUN_08004030",
                "FUN_08004c48",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005208": {
            "entrypoint": "0x08005208",
            "current_name": "FUNC_08005208",
            "code": "\nvoid FUNC_08005208(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005208": "FUNC_08005208"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005214": {
            "entrypoint": "0x08005214",
            "current_name": "FUNC_08005214",
            "code": "\nvoid FUNC_08005214(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005214": "FUNC_08005214"
            },
            "calling": [
                "FUN_08005250"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005220": {
            "entrypoint": "0x08005220",
            "current_name": "FUNC_08005220",
            "code": "\nvoid FUNC_08005220(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005220": "FUNC_08005220"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800522c": {
            "entrypoint": "0x0800522c",
            "current_name": "FUNC_0800522c",
            "code": "\nvoid FUNC_0800522c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800522c": "FUNC_0800522c"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005238": {
            "entrypoint": "0x08005238",
            "current_name": "initialize_setup_08005238",
            "code": "\nvoid initialize_setup_08005238(void)\n\n{\n  DAT_20000e12 = 0;\n  execute_initial_setup();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005238": "initialize_setup_08005238",
                "execute_initial_setup_08005250": "execute_initial_setup"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08005250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005250": {
            "entrypoint": "0x08005250",
            "current_name": "execute_initial_setup_08005250",
            "code": "\nvoid executeInitialSetup_08005250(void)\n\n{\n  FUNC_08005214();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005250": "execute_initial_setup_08005250"
            },
            "calling": [
                "FUN_0800525c",
                "FUN_08005238",
                "FUN_080025e8"
            ],
            "called": [
                "FUN_08005214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800525c": {
            "entrypoint": "0x0800525c",
            "current_name": "process_and_execute_0800525c",
            "code": "\nvoid processAndExecute_0800525c(byte input)\n\n{\n  if ((int)(char)input != (uint)DAT_20000e12) {\n    process_data_08002fd4();\n    if (input == 0) {\n      execute_initial_setup_08005250();\n      DAT_20000e12 = input;\n    }\n    else {\n      if ((char)input < '\\x01') {\n        FUNC_0800522c();\n      }\n      else {\n        FUNC_08005220();\n      }\n      FUNC_08005208();\n      DAT_20000e12 = input;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800525c": "process_and_execute_0800525c",
                "param_1": "input"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_0800522c",
                "FUN_08005250",
                "FUN_08002fd4",
                "FUN_08005220",
                "FUN_08005208"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052ac": {
            "entrypoint": "0x080052ac",
            "current_name": "update_parameter_and_data_080052ac",
            "code": "\n\n\nvoid updateParameterAndData_080052ac(uint parameter)\n\n{\n  _DAT_40021014 = parameter | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052ac": "update_parameter_and_data_080052ac",
                "param_1": "parameter"
            },
            "calling": [
                "FUN_08005760",
                "FUN_0800583c",
                "FUN_08005778"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052dc": {
            "entrypoint": "0x080052dc",
            "current_name": "update_data_080052dc",
            "code": "\n\n\nvoid updateData_080052dc(uint newValue)\n\n{\n  _DAT_40021014 = newValue | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052dc": "update_data_080052dc",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800530c": {
            "entrypoint": "0x0800530c",
            "current_name": "FUNC_0800530c",
            "code": "\nvoid FUNC_0800530c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800530c": "FUNC_0800530c"
            },
            "calling": [
                "FUN_080057e4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005318": {
            "entrypoint": "0x08005318",
            "current_name": "FUNC_08005318",
            "code": "\nvoid FUNC_08005318(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005318": "FUNC_08005318"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005324": {
            "entrypoint": "0x08005324",
            "current_name": "calculate_data_rate_08005324",
            "code": "\nvoid calculateDataRate_08005324(uint inputValue)\n\n{\n  uint adjustedValue;\n  \n  adjustedValue = inputValue;\n  if (inputValue < 800) {\n    adjustedValue = 800;\n  }\n  DAT_20000e28 = 1260000000 / adjustedValue;\n  update_data_08007bf0(DAT_20000e28);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005324": "calculate_data_rate_08005324",
                "param_1": "inputValue",
                "local_14": "adjustedValue"
            },
            "calling": [
                "FUN_08005814",
                "FUN_080058a0",
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08007bf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005360": {
            "entrypoint": "0x08005360",
            "current_name": "accumulate_and_check_threshold_08005360",
            "code": "\nbool accumulateAndCheckThreshold_08005360(void)\n\n{\n  bool thresholdExceeded;\n  \n  DAT_20000e2c = DAT_20000e28 + DAT_20000e2c;\n  thresholdExceeded = 420000 < DAT_20000e2c;\n  if (thresholdExceeded) {\n    DAT_20000e2c = DAT_20000e2c - 420000;\n  }\n  return thresholdExceeded;\n}\n\n",
            "renaming": {
                "FUN_08005360": "accumulate_and_check_threshold_08005360",
                "bVar1": "thresholdExceeded"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "update_data_080053a0",
            "code": "\nvoid updateData_080053a0(void)\n\n{\n  int accumulationResult;\n  \n  update_data_080052dc(DAT_20000e3e);\n  DAT_20000e40 = DAT_20000e3c;\n  if (DAT_20000e38 == (ushort *)0x0) {\n    DAT_20000e38 = (ushort *)get_data_ptr_08002f74();\n    if (DAT_20000e38 == (ushort *)0x0) {\n      clear_flags_and_check_condition_080057e4();\n      DAT_20000eaa = DAT_20000eaa | 4;\n    }\n    else {\n      if (DAT_20000ea9 == '\\x03') {\n        DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x14);\n        calculate_data_rate_08005324(DAT_20000e30);\n        DAT_20000e2c = 210000;\n      }\n      DAT_20000e34 = (*(int *)(DAT_20000e38 + 0x18) >> 1) + *(int *)(DAT_20000e38 + 0x18);\n      DAT_20000e14 = -(*(int *)(DAT_20000e38 + 8) >> 1);\n      DAT_20000e20 = *(int *)(DAT_20000e38 + 8);\n      DAT_20000e24 = 0;\n      DAT_20000e18 = DAT_20000e14;\n      DAT_20000e1c = DAT_20000e14;\n    }\n  }\n  if (DAT_20000e38 != (ushort *)0x0) {\n    DAT_20000e3e = *DAT_20000e38;\n    DAT_20000e3c = 0;\n    DAT_20000e14 = *(int *)(DAT_20000e38 + 2) + DAT_20000e14;\n    if (0 < DAT_20000e14) {\n      DAT_20000e3c = 0x10;\n      DAT_20000e14 = DAT_20000e14 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x20) == 0) {\n        DAT_20000eac = DAT_20000eac + 1;\n      }\n      else {\n        DAT_20000eac = DAT_20000eac + -1;\n      }\n    }\n    DAT_20000e18 = *(int *)(DAT_20000e38 + 4) + DAT_20000e18;\n    if (0 < DAT_20000e18) {\n      DAT_20000e3c = DAT_20000e3c | 0x440;\n      DAT_20000e18 = DAT_20000e18 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x80) == 0) {\n        DAT_20000eb0 = DAT_20000eb0 + 1;\n      }\n      else {\n        DAT_20000eb0 = DAT_20000eb0 + -1;\n      }\n    }\n    DAT_20000e1c = *(int *)(DAT_20000e38 + 6) + DAT_20000e1c;\n    if (0 < DAT_20000e1c) {\n      DAT_20000e3c = DAT_20000e3c | 0x100;\n      DAT_20000e1c = DAT_20000e1c - DAT_20000e20;\n      if ((DAT_20000e3e & 0x200) == 0) {\n        DAT_20000eb4 = DAT_20000eb4 + 1;\n      }\n      else {\n        DAT_20000eb4 = DAT_20000eb4 + -1;\n      }\n    }\n    DAT_20000e24 = DAT_20000e24 + 1;\n    if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 8)) {\n      if (DAT_20000ea9 == '\\x04') {\n        accumulationResult = accumulate_and_check_threshold_08005360();\n        if (accumulationResult != 0) {\n          if (*(uint *)(DAT_20000e38 + 0x18) < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n            calculate_data_rate_08005324(DAT_20000e30);\n          }\n          else {\n            clear_flags_and_check_condition_080057e4();\n            DAT_20000eaa = DAT_20000eaa | 4;\n          }\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1a)) {\n        accumulationResult = accumulate_and_check_threshold_08005360();\n        if (accumulationResult != 0) {\n          DAT_20000e30 = DAT_20000e30 + *(int *)(DAT_20000e38 + 0x18);\n          if (*(uint *)(DAT_20000e38 + 0x1e) <= DAT_20000e30) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          }\n          calculate_data_rate_08005324(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 != *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          calculate_data_rate_08005324(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 == *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 == *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e2c = 210000;\n        }\n        else {\n          DAT_20000e2c = 420000 - DAT_20000e2c;\n        }\n      }\n      else {\n        accumulationResult = accumulate_and_check_threshold_08005360();\n        if (accumulationResult != 0) {\n          if (DAT_20000e34 < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n          }\n          else {\n            DAT_20000e30 = DAT_20000e30 >> 1;\n          }\n          if (DAT_20000e30 < *(uint *)(DAT_20000e38 + 0x16)) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x16);\n          }\n          calculate_data_rate_08005324(DAT_20000e30);\n        }\n      }\n    }\n    else {\n      DAT_20000e3c = 0;\n      DAT_20000e38 = (ushort *)0x0;\n      check_and_increment_limit_08002f40();\n    }\n  }\n  DAT_20000e3c = DAT_20000e3c ^ DAT_20000ed4;\n  DAT_20000e3e = DAT_20000e3e ^ DAT_20000ed6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "update_data_080053a0",
                "iVar1": "accumulationResult"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_08002f40",
                "FUN_080057e4",
                "FUN_08002f74",
                "FUN_08005360",
                "FUN_080052dc",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "update_parameter_and_data_08005760",
            "code": "\nvoid updateParameterAndData_08005760(void)\n\n{\n  update_parameter_and_data_080052ac(DAT_20000ed4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "update_parameter_and_data_08005760"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005778": {
            "entrypoint": "0x08005778",
            "current_name": "initialize_data_08005778",
            "code": "\nvoid initializeData_08005778(void)\n\n{\n  updateDataParameter(DAT_20000e40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005778": "initialize_data_08005778",
                "update_parameter_and_data_080052ac": "updateDataParameter"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005790": {
            "entrypoint": "0x08005790",
            "current_name": "initialize_global_variables_08005790",
            "code": "\nvoid initialize_global_variables_08005790(void)\n\n{\n  FUNC_08005318();\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000e3c = DAT_20000ed4;\n    DAT_20000e3e = DAT_20000ed6;\n    setGlobalVariable(0x69);\n    initializeGlobalVariable((DAT_20000ec9 + 5) * 0x15);\n    setFlags();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005790": "initialize_global_variables_08005790",
                "set_global_variable_08007c40": "setGlobalVariable",
                "initialize_global_variable_08007c5e": "initializeGlobalVariable",
                "set_flags_08007b70": "setFlags"
            },
            "calling": [
                "FUN_0800583c",
                "FUN_0800585c",
                "FUN_08001d4c"
            ],
            "called": [
                "FUN_08007c40",
                "FUN_08007c5e",
                "FUN_08005318",
                "FUN_08007b70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057e4": {
            "entrypoint": "0x080057e4",
            "current_name": "clear_flags_and_check_condition_080057e4",
            "code": "\nvoid clearFlagsAndCheckCondition_080057e4(void)\n\n{\n  clear_flags_08007bc2();\n  if ((DAT_20000ef8 != -1) || ((DAT_20000eaa & 0x20) != 0)) {\n    FUNC_0800530c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057e4": "clear_flags_and_check_condition_080057e4"
            },
            "calling": [
                "FUN_0800583c",
                "FUN_08001d4c",
                "FUN_080025e8",
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08007bc2",
                "FUN_0800530c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005814": {
            "entrypoint": "0x08005814",
            "current_name": "initialize_data_08005814",
            "code": "\nvoid initializeData_08005814(void)\n\n{\n  memset_0800b430(&DAT_20000e14,0,0x24);\n  calculateDataRate(800);\n  DAT_20000e38 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005814": "initialize_data_08005814",
                "calculate_data_rate_08005324": "calculateDataRate"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_0800b430",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "initialize_and_check_flags_0800583c",
            "code": "\nvoid initialize_and_check_flags_0800583c(void)\n\n{\n  update_parameter_and_data(DAT_20000ed4);\n  initialize_global_variables();\n  clear_flags_and_check_condition();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "initialize_and_check_flags_0800583c",
                "update_parameter_and_data_080052ac": "update_parameter_and_data",
                "initialize_global_variables_08005790": "initialize_global_variables",
                "clear_flags_and_check_condition_080057e4": "clear_flags_and_check_condition"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800585c": {
            "entrypoint": "0x0800585c",
            "current_name": "initialize_if_needed_0800585c",
            "code": "\nvoid initialize_if_needed_0800585c(void)\n\n{\n  if (DAT_20000ea9 == '\\x02') {\n    DAT_20000ea9 = '\\x03';\n    initialize_global_variables_08005790();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800585c": "initialize_if_needed_0800585c"
            },
            "calling": [
                "FUN_08001e98",
                "FUN_08003a74",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800587c": {
            "entrypoint": "0x0800587c",
            "current_name": "update_status_0800587c",
            "code": "\nvoid updateStatus_0800587c(void)\n\n{\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000ea9 = '\\x04';\n    DAT_20000eb8 = 0;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800587c": "update_status_0800587c"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058a0": {
            "entrypoint": "0x080058a0",
            "current_name": "process_data_080058a0",
            "code": "\nvoid processData_080058a0(void)\n\n{\n  if (DAT_20000e38 == 0) {\n    DAT_20000ea9 = 0;\n  }\n  else {\n    update_and_process_data_08003618(*(int *)(DAT_20000e38 + 0x10) - DAT_20000e24);\n    DAT_20000e30 = 0;\n    calculate_data_rate_08005324(0);\n    DAT_20000e2c = 210000;\n    DAT_20000e24 = 0;\n    DAT_20000ea9 = 2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058a0": "process_data_080058a0"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_08003618",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "process_byte_08005900",
            "code": "\nundefined4 process_byte_08005900(byte byte_value)\n\n{\n  if (byte_value == 0x7e) {\n    DAT_20000eaa = DAT_20000eaa | 2;\n    return 1;\n  }\n  if (byte_value < 0x7f) {\n    if (byte_value == 0x3f) {\n      DAT_20000eaa = DAT_20000eaa | 1;\n      return 1;\n    }\n    if (byte_value < 0x40) {\n      if (byte_value == 0x18) {\n        initialize_and_check_system();\n        return 1;\n      }\n      if (byte_value == 0x21) {\n        DAT_20000eaa = DAT_20000eaa | 8;\n        return 1;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005900": "process_byte_08005900",
                "param_1": "byte_value",
                "initialize_and_check_system_080025e8": "initialize_and_check_system"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800597c": {
            "entrypoint": "0x0800597c",
            "current_name": "execute_software_interrupt_0800597c",
            "code": "\nvoid executeSoftwareInterrupt_0800597c(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800597c": "execute_software_interrupt_0800597c"
            },
            "calling": [
                "FUN_08005984"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005984": {
            "entrypoint": "0x08005984",
            "current_name": "execute_or_skip_interrupt_08005984",
            "code": "\nundefined4 execute_or_skip_interrupt_08005984(undefined4 interrupt_type)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000e44 == 0) {\n    result = execute_software_interrupt_0800597c(1,interrupt_type,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005984": "execute_or_skip_interrupt_08005984",
                "param_1": "interrupt_type",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800597c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059b4": {
            "entrypoint": "0x080059b4",
            "current_name": "initialize_program_080059b4",
            "code": "\n\n\nundefined4 initialize_program_080059b4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  process_data(16000);\n  set_control_bits(3);\n  FUNC_08005a50();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059b4": "initialize_program_080059b4",
                "process_data_08006d72": "process_data",
                "set_control_bits_08006ce0": "set_control_bits"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08006ce0",
                "FUN_08005a50",
                "FUN_08006d72"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "initialize_data_080059f8",
            "code": "\n\n\nundefined4 initializeData_080059f8(void)\n\n{\n  _DAT_40023820 = 0;\n  _DAT_40023824 = 0;\n  _DAT_40023810 = 0;\n  _DAT_40023814 = 0;\n  _DAT_40023818 = 0;\n  FUNC_08005a5c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "initialize_data_080059f8"
            },
            "calling": [],
            "called": [
                "FUN_08005a5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a50": {
            "entrypoint": "0x08005a50",
            "current_name": "FUNC_08005a50",
            "code": "\nvoid FUNC_08005a50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a50": "FUNC_08005a50"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a5c": {
            "entrypoint": "0x08005a5c",
            "current_name": "FUNC_08005a5c",
            "code": "\nvoid FUNC_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a5c": "FUNC_08005a5c"
            },
            "calling": [
                "FUN_080059f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "increment_data_counter_08005a68",
            "code": "\nvoid incrementDataCounter_08005a68(void)\n\n{\n  DAT_20000e48 = DAT_20000e48 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "increment_data_counter_08005a68"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a84": {
            "entrypoint": "0x08005a84",
            "current_name": "get_data_value_08005a84",
            "code": "\nundefined4 get_data_value_08005a84(void)\n\n{\n  return DAT_20000e48;\n}\n\n",
            "renaming": {
                "FUN_08005a84": "get_data_value_08005a84"
            },
            "calling": [
                "FUN_08000268",
                "FUN_0800618c",
                "FUN_08007756",
                "FUN_08005cec",
                "FUN_08005a98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a98": {
            "entrypoint": "0x08005a98",
            "current_name": "track_data_value_08005a98",
            "code": "\nvoid trackDataValue_08005a98(int param)\n\n{\n  int initialValue;\n  uint currentValue;\n  \n  initialValue = get_data_value_08005a84();\n  do {\n    currentValue = get_data_value_08005a84();\n  } while (currentValue < (uint)(param + initialValue));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a98": "track_data_value_08005a98",
                "param_1": "param",
                "iVar1": "initialValue",
                "uVar2": "currentValue"
            },
            "calling": [
                "FUN_080002a0"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bdc": {
            "entrypoint": "0x08005bdc",
            "current_name": "update_memory_08005bdc",
            "code": "\nvoid updateMemory_08005bdc(byte input,uint value)\n\n{\n  if ((char)input < '\\0') {\n    *(char *)((input & 0xf) + 0xe000ed14) = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)input + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bdc": "update_memory_08005bdc",
                "param_1": "input",
                "param_2": "value"
            },
            "calling": [
                "FUN_08005c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c30": {
            "entrypoint": "0x08005c30",
            "current_name": "check_and_update_memory_range_08005c30",
            "code": "\n\n\nbool checkAndUpdateMemoryRange_08005c30(int inputVal)\n\n{\n  bool isInRange;\n  \n  isInRange = inputVal - 1U < 0x1000000;\n  if (isInRange) {\n    _DAT_e000e014 = inputVal + -1;\n    updateMemory(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isInRange;\n}\n\n",
            "renaming": {
                "FUN_08005c30": "check_and_update_memory_range_08005c30",
                "param_1": "inputVal",
                "bVar1": "isInRange",
                "update_memory_08005bdc": "updateMemory"
            },
            "calling": [
                "FUN_0800618c"
            ],
            "called": [
                "FUN_08005bdc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "check_parameters_08005cec",
            "code": "\n\n\nundefined4 checkParameters_08005cec(uint *parameters)\n\n{\n  int value1;\n  uint value2;\n  \n  if ((*parameters & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0x400000)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (parameters[1] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      _DAT_40023800 = (uint3)_DAT_40023800;\n      value1 = get_data_value_08005a84();\n      while ((_DAT_40023800 & 0x20000) != 0) {\n        value2 = get_data_value_08005a84();\n        if (value1 + 5000U <= value2) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = CONCAT13(DAT_40023800_3,CONCAT12((char)parameters[1],_DAT_40023800));\n      if (parameters[1] == 1) {\n        value1 = get_data_value_08005a84();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          value2 = get_data_value_08005a84();\n          if (value1 + 5000U <= value2) {\n            return 3;\n          }\n        }\n      }\n      else {\n        value1 = get_data_value_08005a84();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          value2 = get_data_value_08005a84();\n          if (value1 + 5000U <= value2) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*parameters & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (parameters[3] != 1)) {\n        return 1;\n      }\n    }\n    else if (parameters[3] == 0) {\n      _DAT_42470000 = 0;\n      value1 = get_data_value_08005a84();\n      while ((_DAT_40023800 & 2) != 0) {\n        value2 = get_data_value_08005a84();\n        if (value1 + 100U <= value2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      value1 = get_data_value_08005a84();\n      while ((_DAT_40023800 & 2) == 0) {\n        value2 = get_data_value_08005a84();\n        if (value1 + 100U <= value2) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = parameters[4] << 3 | _DAT_40023800 & 0xffffff07;\n    }\n  }\n  if ((*parameters & 8) != 0) {\n    if (parameters[5] == 0) {\n      _DAT_42470e80 = 0;\n      value1 = get_data_value_08005a84();\n      while ((_DAT_40023874 & 2) != 0) {\n        value2 = get_data_value_08005a84();\n        if (value1 + 100U <= value2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      value1 = get_data_value_08005a84();\n      while ((_DAT_40023874 & 2) == 0) {\n        value2 = get_data_value_08005a84();\n        if (value1 + 100U <= value2) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*parameters & 4) != 0) {\n    _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    _DAT_40007000 = _DAT_40007000 | 0x100;\n    value1 = get_data_value_08005a84();\n    while ((_DAT_40007000 & 0x100) == 0) {\n      value2 = get_data_value_08005a84();\n      if (value1 + 100U <= value2) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = _DAT_40023870 & 0xffffff00;\n    value1 = get_data_value_08005a84();\n    while ((_DAT_40023870 & 2) != 0) {\n      value2 = get_data_value_08005a84();\n      if (value1 + 5000U <= value2) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = CONCAT31(DAT_40023870_1,(char)parameters[2]);\n    if (parameters[2] == 1) {\n      value1 = get_data_value_08005a84();\n      while ((_DAT_40023870 & 2) == 0) {\n        value2 = get_data_value_08005a84();\n        if (value1 + 5000U <= value2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      value1 = get_data_value_08005a84();\n      while ((_DAT_40023870 & 2) != 0) {\n        value2 = get_data_value_08005a84();\n        if (value1 + 5000U <= value2) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (parameters[6] != 0) {\n    if ((_DAT_40023808 & 0xc) == 8) {\n      return 1;\n    }\n    if (parameters[6] == 2) {\n      _DAT_42470060 = 0;\n      value1 = get_data_value_08005a84();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        value2 = get_data_value_08005a84();\n        if (value1 + 100U <= value2) {\n          return 3;\n        }\n      }\n      _DAT_40023804 =\n           parameters[0xb] << 0x18 |\n           parameters[8] | parameters[9] << 6 | ((parameters[10] >> 1) - 1) * 0x10000 | parameters[7] |\n           0x20000000;\n      _DAT_42470060 = 1;\n      value1 = get_data_value_08005a84();\n      while ((_DAT_40023800 & 0x2000000) == 0) {\n        value2 = get_data_value_08005a84();\n        if (value1 + 100U <= value2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470060 = 0;\n      value1 = get_data_value_08005a84();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        value2 = get_data_value_08005a84();\n        if (value1 + 100U <= value2) {\n          return 3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "check_parameters_08005cec",
                "param_1": "parameters",
                "iVar1": "value1",
                "uVar2": "value2"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800618c": {
            "entrypoint": "0x0800618c",
            "current_name": "update_clock_frequency_and_memory_range_0800618c",
            "code": "\n\n\nundefined4 updateClockFrequencyAndMemoryRange_0800618c(uint *dataParams,uint paramCount)\n\n{\n  int dataValue;\n  uint currentValue;\n  uint thresholdValue;\n  undefined8 clockFrequency;\n  \n  if ((_DAT_40023c00 & 0xf) < paramCount) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)paramCount);\n    if (paramCount != (paramCount & 0xf)) {\n      return 1;\n    }\n    if ((*dataParams & 1) != 0) {\n      if (dataParams[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((dataParams[1] != 2) && ((_DAT_40023800 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40023808 = dataParams[1] | _DAT_40023808 & 0xfffffffc;\n      dataValue = getDataValue();\n      thresholdValue = dataValue + 5000;\n      if (dataParams[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          currentValue = getDataValue();\n          if (thresholdValue <= currentValue) {\n            return 3;\n          }\n        }\n      }\n      else if (dataParams[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          currentValue = getDataValue();\n          if (thresholdValue <= currentValue) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          currentValue = getDataValue();\n          if (thresholdValue <= currentValue) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  else {\n    if ((*dataParams & 1) != 0) {\n      if (dataParams[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if (dataParams[1] == 2) {\n        if ((_DAT_40023800 & 0x2000000) == 0) {\n          return 1;\n        }\n      }\n      else if ((_DAT_40023800 & 2) == 0) {\n        return 1;\n      }\n      _DAT_40023808 = dataParams[1] | _DAT_40023808 & 0xfffffffc;\n      dataValue = getDataValue();\n      thresholdValue = dataValue + 5000;\n      if (dataParams[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          currentValue = getDataValue();\n          if (thresholdValue <= currentValue) {\n            return 3;\n          }\n        }\n      }\n      else if (dataParams[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          currentValue = getDataValue();\n          if (thresholdValue <= currentValue) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          currentValue = getDataValue();\n          if (thresholdValue <= currentValue) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)paramCount);\n    if (paramCount != (paramCount & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*dataParams & 2) != 0) {\n    _DAT_40023808 = dataParams[2] | _DAT_40023808 & 0xffffff0f;\n  }\n  if ((*dataParams & 4) != 0) {\n    _DAT_40023808 = dataParams[3] | _DAT_40023808 & 0xffffe3ff;\n  }\n  if ((*dataParams & 8) != 0) {\n    _DAT_40023808 = dataParams[4] << 3 | _DAT_40023808 & 0xffff1fff;\n  }\n  clockFrequency = calculateClockFrequency();\n  checkAndUpdateMemoryRange((uint)clockFrequency / 1000,(int)((ulonglong)clockFrequency >> 0x20),(uint)clockFrequency * 0x10624dd3);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800618c": "update_clock_frequency_and_memory_range_0800618c",
                "param_1": "dataParams",
                "param_2": "paramCount",
                "iVar1": "dataValue",
                "uVar2": "currentValue",
                "uVar3": "thresholdValue",
                "uVar4": "clockFrequency",
                "get_data_value_08005a84": "getDataValue",
                "calculate_clock_frequency_08006628": "calculateClockFrequency",
                "check_and_update_memory_range_08005c30": "checkAndUpdateMemoryRange"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [
                "FUN_08005a84",
                "FUN_08006628",
                "FUN_08005c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800640c": {
            "entrypoint": "0x0800640c",
            "current_name": "update_memory_map_0800640c",
            "code": "\n\n\nvoid updateMemoryMap_0800640c(int flag,uint value1,uint value2)\n\n{\n  undefined4 blockSize;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  undefined4 localVar4;\n  \n  if (flag == 0) {\n    _DAT_40023830 = _DAT_40023830 | 1;\n    blockSize = 0x100;\n    localVar1 = 2;\n    localVar3 = 3;\n    localVar2 = 0;\n    localVar4 = 0;\n    update_memory_map_08006e88(0x40020000,&blockSize);\n    _DAT_40023808 = value2 | value1 | _DAT_40023808 & 0xf89fffff;\n  }\n  else {\n    _DAT_40023830 = _DAT_40023830 | 4;\n    blockSize = 0x200;\n    localVar1 = 2;\n    localVar3 = 3;\n    localVar2 = 0;\n    localVar4 = 0;\n    update_memory_map_08006e88(0x40020800,&blockSize);\n    _DAT_40023808 = value1 | value2 << 3 | _DAT_40023808 & 0x7ffffff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800640c": "update_memory_map_0800640c",
                "param_1": "flag",
                "param_2": "value1",
                "param_3": "value2",
                "local_1c": "blockSize",
                "local_18": "localVar1",
                "local_14": "localVar2",
                "local_10": "localVar3",
                "local_c": "localVar4"
            },
            "calling": [],
            "called": [
                "FUN_08006e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ec": {
            "entrypoint": "0x080064ec",
            "current_name": "calculate_clock_frequency_080064ec",
            "code": "\n\n\nuint calculateClockFrequency_080064ec(void)\n\n{\n  uint clockMode;\n  uint clockFrequency;\n  \n  clockMode = _DAT_40023808 & 0xc;\n  if (clockMode == 8) {\n    if ((_DAT_40023804 & 0x400000) == 0) {\n      clockFrequency = ((_DAT_40023804 & 0x7fc0) >> 6) * (16000000 / (_DAT_40023804 & 0x3f));\n    }\n    else {\n      clockFrequency = ((_DAT_40023804 & 0x7fc0) >> 6) * (8000000 / (_DAT_40023804 & 0x3f));\n    }\n    return clockFrequency / ((((_DAT_40023804 & 0x30000) >> 0x10) + 1) * 2);\n  }\n  if (clockMode < 9) {\n    if (clockMode == 0) {\n      return 16000000;\n    }\n    if (clockMode == 4) {\n      return 8000000;\n    }\n  }\n  return 16000000;\n}\n\n",
            "renaming": {
                "FUN_080064ec": "calculate_clock_frequency_080064ec",
                "uVar1": "clockMode",
                "local_c": "clockFrequency"
            },
            "calling": [
                "FUN_08006628"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006628": {
            "entrypoint": "0x08006628",
            "current_name": "calculate_clock_frequency_08006628",
            "code": "\n\n\nuint calculateClockFrequency_08006628(void)\n\n{\n  uint clockFrequency;\n  \n  clockFrequency = calculate_clock_frequency_080064ec();\n  DAT_20000000 = clockFrequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n  return clockFrequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n}\n\n",
            "renaming": {
                "FUN_08006628": "calculate_clock_frequency_08006628",
                "uVar1": "clockFrequency"
            },
            "calling": [
                "FUN_0800618c",
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "called": [
                "FUN_080064ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006680": {
            "entrypoint": "0x08006680",
            "current_name": "calculate_clock_frequency_08006680",
            "code": "\n\n\nuint calculateClockFrequency_08006680(void)\n\n{\n  uint clockFrequency;\n  \n  clockFrequency = calculate_clock_frequency_08006628();\n  return clockFrequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0x1c00) >> 10];\n}\n\n",
            "renaming": {
                "FUN_08006680": "calculate_clock_frequency_08006680",
                "uVar1": "clockFrequency"
            },
            "calling": [
                "FUN_08007f54"
            ],
            "called": [
                "FUN_08006628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066cc": {
            "entrypoint": "0x080066cc",
            "current_name": "calculate_clock_frequency_080066cc",
            "code": "\n\n\nuint calculateClockFrequency_080066cc(void)\n\n{\n  uint clockFrequency;\n  \n  clockFrequency = calculate_clock_frequency_08006628();\n  return clockFrequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xe000) >> 0xd];\n}\n\n",
            "renaming": {
                "FUN_080066cc": "calculate_clock_frequency_080066cc",
                "uVar1": "clockFrequency"
            },
            "calling": [
                "FUN_08007f54"
            ],
            "called": [
                "FUN_08006628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006950": {
            "entrypoint": "0x08006950",
            "current_name": "set_control_bits_08006950",
            "code": "\n\n\nvoid setControlBits_08006950(uint controlBits)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (controlBits & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006950": "set_control_bits_08006950",
                "param_1": "controlBits"
            },
            "calling": [
                "FUN_08006ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006998": {
            "entrypoint": "0x08006998",
            "current_name": "extract_bits_from_register_08006998",
            "code": "\n\n\nuint extractBitsFromRegister_08006998(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_08006998": "extract_bits_from_register_08006998"
            },
            "calling": [
                "FUN_08006d8a",
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069b4": {
            "entrypoint": "0x080069b4",
            "current_name": "set_bit_value_080069b4",
            "code": "\nvoid setBitValue_080069b4(byte byteValue)\n\n{\n  *(integer *)(((unsignedInteger)(integer)(character)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue bitwiseAnd 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069b4": "set_bit_value_080069b4",
                "param_1": "byteValue",
                "int": "integer",
                "uint": "unsignedInteger",
                "char": "character",
                "&": "bitwiseAnd"
            },
            "calling": [
                "FUN_08006d2e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "set_bit_in_memory_080069e4",
            "code": "\nvoid setBitInMemory_080069e4(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "set_bit_in_memory_080069e4",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006d4a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a18": {
            "entrypoint": "0x08006a18",
            "current_name": "is_bit_set_08006a18",
            "code": "\nbool isBitSet_08006a18(byte byteToCheck)\n\n{\n  return (*(uint *)((((uint)(int)(char)byteToCheck >> 5) + 0x40) * 4 + -0x1fff1f00) &\n         1 << (byteToCheck & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006a18": "is_bit_set_08006a18",
                "param_1": "byteToCheck"
            },
            "calling": [
                "FUN_08006de0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a58": {
            "entrypoint": "0x08006a58",
            "current_name": "set_bit_in_memory_08006a58",
            "code": "\nvoid setBitInMemory_08006a58(byte byteToSet)\n\n{\n  *(int *)((((uint)(int)(char)byteToSet >> 5) + 0x40) * 4 + -0x1fff1f00) = 1 << (byteToSet & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a58": "set_bit_in_memory_08006a58",
                "param_1": "byteToSet"
            },
            "calling": [
                "FUN_08006dc4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a8c": {
            "entrypoint": "0x08006a8c",
            "current_name": "set_bit_in_memory_08006a8c",
            "code": "\nvoid setBitInMemory_08006a8c(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a8c": "set_bit_in_memory_08006a8c",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006dfe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "check_bit_set_08006ac0",
            "code": "\nbool checkBitSet_08006ac0(byte inputByte)\n\n{\n  return (*(uint *)((((uint)(int)(char)inputByte >> 5) + 0x80) * 4 + -0x1fff1f00) &\n         1 << (inputByte & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "check_bit_set_08006ac0",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006e1a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b00": {
            "entrypoint": "0x08006b00",
            "current_name": "store_data_08006b00",
            "code": "\nvoid storeData_08006b00(byte inputByte,uint inputValue)\n\n{\n  if ((char)inputByte < '\\0') {\n    *(char *)((inputByte & 0xf) + 0xe000ed14) = (char)((inputValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputByte + -0x1fff1c00) = (char)((inputValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b00": "store_data_08006b00",
                "param_1": "inputByte",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_08006c9c",
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b54": {
            "entrypoint": "0x08006b54",
            "current_name": "extracted_byte_08006b54",
            "code": "\nbyte extractedByte_08006b54(byte inputByte)\n\n{\n  byte resultByte;\n  \n  if ((char)inputByte < '\\0') {\n    resultByte = *(byte *)((inputByte & 0xf) + 0xe000ed14);\n  }\n  else {\n    resultByte = *(byte *)((char)inputByte + -0x1fff1c00);\n  }\n  return resultByte >> 4;\n}\n\n",
            "renaming": {
                "FUN_08006b54": "extracted_byte_08006b54",
                "param_1": "inputByte",
                "bVar1": "resultByte"
            },
            "calling": [
                "FUN_08006d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ba0": {
            "entrypoint": "0x08006ba0",
            "current_name": "apply_bit_mask_08006ba0",
            "code": "\nuint applyBitMask_08006ba0(uint input1,uint input2,uint bitMask)\n\n{\n  uint bitsToClear;\n  \n  input1 = input1 & 7;\n  bitsToClear = 7 - input1;\n  if (3 < bitsToClear) {\n    bitsToClear = 4;\n  }\n  if (input1 + 4 < 7) {\n    input1 = 0;\n  }\n  else {\n    input1 = input1 - 3;\n  }\n  return bitMask & (1 << (input1 & 0xff)) - 1U |\n         ((1 << (bitsToClear & 0xff)) - 1U & input2) << (input1 & 0xff);\n}\n\n",
            "renaming": {
                "FUN_08006ba0": "apply_bit_mask_08006ba0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "bitMask",
                "uVar1": "bitsToClear"
            },
            "calling": [
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c04": {
            "entrypoint": "0x08006c04",
            "current_name": "extract_bits_08006c04",
            "code": "\nvoid extract_bits_08006c04(uint data,uint num_bits,uint *result1,uint *result2)\n\n{\n  uint shift_amount;\n  \n  num_bits = num_bits & 7;\n  shift_amount = 7 - num_bits;\n  if (3 < shift_amount) {\n    shift_amount = 4;\n  }\n  if (num_bits + 4 < 7) {\n    num_bits = 0;\n  }\n  else {\n    num_bits = num_bits - 3;\n  }\n  *result1 = (1 << (shift_amount & 0xff)) - 1U & data >> (num_bits & 0xff);\n  *result2 = (1 << (num_bits & 0xff)) - 1U & data;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c04": "extract_bits_08006c04",
                "param_1": "data",
                "param_2": "num_bits",
                "param_3": "result1",
                "param_4": "result2",
                "uVar1": "shift_amount"
            },
            "calling": [
                "FUN_08006d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c70": {
            "entrypoint": "0x08006c70",
            "current_name": "run_infinite_loop_08006c70",
            "code": "\nvoid runInfiniteLoop_08006c70(void)\n\n{\n  DataSynchronizationBarrier(0xf);\n  DataSynchronizationBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006c70": "run_infinite_loop_08006c70"
            },
            "calling": [
                "FUN_08006d66"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c9c": {
            "entrypoint": "0x08006c9c",
            "current_name": "check_and_set_data_08006c9c",
            "code": "\n\n\nbool checkAndSetData_08006c9c(int input)\n\n{\n  bool isInputValid;\n  \n  isInputValid = input - 1U < 0x1000000;\n  if (isInputValid) {\n    _DAT_e000e014 = input + -1;\n    store_data_08006b00(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isInputValid;\n}\n\n",
            "renaming": {
                "FUN_08006c9c": "check_and_set_data_08006c9c",
                "param_1": "input",
                "bVar1": "isInputValid"
            },
            "calling": [
                "FUN_08006d72"
            ],
            "called": [
                "FUN_08006b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ce0": {
            "entrypoint": "0x08006ce0",
            "current_name": "set_control_bits_08006ce0",
            "code": "\nvoid setControlBits_08006ce0(undefined4 param)\n\n{\n  setControlBits_08006ce0Helper(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ce0": "set_control_bits_08006ce0",
                "param_1": "param",
                "set_control_bits_08006950": "setControlBitsHelper"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [
                "FUN_08006950"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cf6": {
            "entrypoint": "0x08006cf6",
            "current_name": "store_extracted_bits_08006cf6",
            "code": "\nvoid storeExtractedBits_08006cf6(char character,undefined4 mask1,undefined4 mask2)\n\n{\n  undefined4 extractedBits;\n  \n  extractedBits = extract_bits_from_register_08006998();\n  extractedBits = apply_bit_mask_08006ba0(extractedBits,mask1,mask2);\n  store_data_08006b00((int)character,extractedBits);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cf6": "store_extracted_bits_08006cf6",
                "param_1": "character",
                "param_2": "mask1",
                "param_3": "mask2",
                "uVar1": "extractedBits"
            },
            "calling": [
                "FUN_08007a70"
            ],
            "called": [
                "FUN_08006998",
                "FUN_08006b00",
                "FUN_08006ba0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d2e": {
            "entrypoint": "0x08006d2e",
            "current_name": "set_bit_value_08006d2e",
            "code": "\nvoid setBitValue_08006d2e(char input)\n\n{\n  setBitValue_08006d2eHelper((int)input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d2e": "set_bit_value_08006d2e",
                "param_1": "input",
                "set_bit_value_080069b4": "setBitValueHelper"
            },
            "calling": [],
            "called": [
                "FUN_080069b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d4a": {
            "entrypoint": "0x08006d4a",
            "current_name": "set_bit_in_memory_08006d4a",
            "code": "\nvoid setBitInMemory_08006d4a(char input)\n\n{\n  setBitInMemory_08006d4aHelper((int)input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d4a": "set_bit_in_memory_08006d4a",
                "param_1": "input",
                "set_bit_in_memory_080069e4": "setBitInMemoryHelper"
            },
            "calling": [],
            "called": [
                "FUN_080069e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d66": {
            "entrypoint": "0x08006d66",
            "current_name": "start_infinite_loop_08006d66",
            "code": "\nvoid startInfiniteLoop_08006d66(void)\n\n{\n  infiniteLoop();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d66": "start_infinite_loop_08006d66",
                "run_infinite_loop_08006c70": "infiniteLoop"
            },
            "calling": [],
            "called": [
                "FUN_08006c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d72": {
            "entrypoint": "0x08006d72",
            "current_name": "process_data_08006d72",
            "code": "\nundefined4 process_data_08006d72(undefined4 input_data)\n\n{\n  undefined4 result;\n  \n  result = check_and_set_data_08006c9c(input_data);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006d72": "process_data_08006d72",
                "param_1": "input_data",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [
                "FUN_08006c9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d8a": {
            "entrypoint": "0x08006d8a",
            "current_name": "extract_bits_08006d8a",
            "code": "\nundefined4 extractBits_08006d8a(void)\n\n{\n  undefined4 bitsExtracted;\n  \n  bitsExtracted = extract_bits_from_register_08006998();\n  return bitsExtracted;\n}\n\n",
            "renaming": {
                "FUN_08006d8a": "extract_bits_08006d8a",
                "uVar1": "bitsExtracted"
            },
            "calling": [],
            "called": [
                "FUN_08006998"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d98": {
            "entrypoint": "0x08006d98",
            "current_name": "decode_and_extract_bits_08006d98",
            "code": "\nvoid decode_and_extract_bits_08006d98(char input,undefined4 output_param1,undefined4 output_param2,undefined4 output_param3)\n\n{\n  undefined4 extracted_byte;\n  \n  extracted_byte = get_extracted_byte((int)input);\n  extract_bits(extracted_byte,output_param1,output_param2,output_param3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d98": "decode_and_extract_bits_08006d98",
                "param_1": "input",
                "param_2": "output_param1",
                "param_3": "output_param2",
                "param_4": "output_param3",
                "uVar1": "extracted_byte",
                "extracted_byte_08006b54": "get_extracted_byte",
                "extract_bits_08006c04": "extract_bits"
            },
            "calling": [],
            "called": [
                "FUN_08006c04",
                "FUN_08006b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dc4": {
            "entrypoint": "0x08006dc4",
            "current_name": "set_bit_in_memory_08006dc4",
            "code": "\nvoid setBitInMemory_08006dc4(char bitToSet)\n\n{\n  set_bit_in_memory_08006a58((int)bitToSet);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dc4": "set_bit_in_memory_08006dc4",
                "param_1": "bitToSet"
            },
            "calling": [],
            "called": [
                "FUN_08006a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006de0": {
            "entrypoint": "0x08006de0",
            "current_name": "check_if_bit_set_08006de0",
            "code": "\nundefined4 checkIfBitSet_08006de0(char inputByte)\n\n{\n  undefined4 isBitSet;\n  \n  isBitSet = is_bit_set_08006a18((int)inputByte);\n  return isBitSet;\n}\n\n",
            "renaming": {
                "FUN_08006de0": "check_if_bit_set_08006de0",
                "param_1": "inputByte",
                "uVar1": "isBitSet"
            },
            "calling": [],
            "called": [
                "FUN_08006a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dfe": {
            "entrypoint": "0x08006dfe",
            "current_name": "set_bit_in_memory_08006dfe",
            "code": "\nvoid setBitInMemory_08006dfe(char inputParam)\n\n{\n  setBitInMemory_08006dfeHelper((int)inputParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dfe": "set_bit_in_memory_08006dfe",
                "param_1": "inputParam",
                "set_bit_in_memory_08006a8c": "setBitInMemoryHelper"
            },
            "calling": [],
            "called": [
                "FUN_08006a8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e1a": {
            "entrypoint": "0x08006e1a",
            "current_name": "check_bit_set_08006e1a",
            "code": "\nundefined4 checkBitSet_08006e1a(char input)\n\n{\n  undefined4 bitSet;\n  \n  bitSet = check_bit_set_08006ac0((int)input);\n  return bitSet;\n}\n\n",
            "renaming": {
                "FUN_08006e1a": "check_bit_set_08006e1a",
                "param_1": "input",
                "uVar1": "bitSet"
            },
            "calling": [],
            "called": [
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e88": {
            "entrypoint": "0x08006e88",
            "current_name": "update_memory_map_08006e88",
            "code": "\n\n\nvoid updateMemoryMap_08006e88(uint *memoryMap,uint *data)\n\n{\n  uint bitMask;\n  uint bitValue;\n  int index;\n  uint bitPosition;\n  \n  for (bitPosition = 0; bitPosition < 0x10; bitPosition = bitPosition + 1) {\n    bitMask = 1 << (bitPosition & 0xff);\n    bitValue = *data & bitMask;\n    if (bitValue == bitMask) {\n      if ((data[1] == 2) || (data[1] == 0x12)) {\n        bitMask = data[4];\n        memoryMap[(bitPosition >> 3) + 8] = memoryMap[(bitPosition >> 3) + 8] & ~(0xf << ((bitPosition & 7) << 2));\n        memoryMap[(bitPosition >> 3) + 8] = memoryMap[(bitPosition >> 3) + 8] | bitMask << ((bitPosition & 7) << 2);\n      }\n      *memoryMap = *memoryMap & ~(3 << ((bitPosition & 0x7f) << 1));\n      *memoryMap = *memoryMap | (data[1] & 3) << ((bitPosition & 0x7f) << 1);\n      if ((((data[1] == 1) || (data[1] == 2)) || (data[1] == 0x11)) || (data[1] == 0x12)\n         ) {\n        memoryMap[2] = memoryMap[2] & ~(3 << ((bitPosition & 0x7f) << 1));\n        memoryMap[2] = memoryMap[2] | data[3] << ((bitPosition & 0x7f) << 1);\n        memoryMap[1] = memoryMap[1] & ~(1 << (bitPosition & 0xff));\n        memoryMap[1] = memoryMap[1] | (data[1] >> 4 & 1) << (bitPosition & 0xff);\n      }\n      memoryMap[3] = memoryMap[3] & ~(3 << ((bitPosition & 0x7f) << 1));\n      memoryMap[3] = memoryMap[3] | data[2] << ((bitPosition & 0x7f) << 1);\n      if ((data[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        *(uint *)(((bitPosition >> 2) + 2) * 4 + 0x40013800) =\n             ~(0xf << ((bitPosition & 3) << 2)) & *(uint *)(((bitPosition >> 2) + 2) * 4 + 0x40013800);\n        if (memoryMap == (uint *)0x40020000) {\n          index = 0;\n        }\n        else if (memoryMap == (uint *)0x40020400) {\n          index = 1;\n        }\n        else if (memoryMap == (uint *)0x40020800) {\n          index = 2;\n        }\n        else if (memoryMap == (uint *)0x40020c00) {\n          index = 3;\n        }\n        else if (memoryMap == (uint *)0x40021000) {\n          index = 4;\n        }\n        else if (memoryMap == (uint *)0x40021400) {\n          index = 5;\n        }\n        else if (memoryMap == (uint *)0x40021800) {\n          index = 6;\n        }\n        else if (memoryMap == (uint *)0x40021c00) {\n          index = 7;\n        }\n        else if (memoryMap == (uint *)0x40022000) {\n          index = 8;\n        }\n        else if (memoryMap == (uint *)0x40022400) {\n          index = 9;\n        }\n        else {\n          index = 10;\n        }\n        *(uint *)(((bitPosition >> 2) + 2) * 4 + 0x40013800) =\n             index << ((bitPosition & 3) << 2) | *(uint *)(((bitPosition >> 2) + 2) * 4 + 0x40013800);\n        _DAT_40013c00 = ~bitValue & _DAT_40013c00;\n        _DAT_40013c04 = ~bitValue & _DAT_40013c04;\n        if ((data[1] & 0x10000) != 0) {\n          _DAT_40013c00 = bitValue | _DAT_40013c00;\n        }\n        if ((data[1] & 0x20000) != 0) {\n          _DAT_40013c04 = bitValue | _DAT_40013c04;\n        }\n        _DAT_40013c08 = ~bitValue & _DAT_40013c08;\n        _DAT_40013c0c = ~bitValue & _DAT_40013c0c;\n        if ((data[1] & 0x100000) != 0) {\n          _DAT_40013c08 = bitValue | _DAT_40013c08;\n        }\n        if ((data[1] & 0x200000) != 0) {\n          _DAT_40013c0c = bitValue | _DAT_40013c0c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e88": "update_memory_map_08006e88",
                "param_1": "memoryMap",
                "param_2": "data",
                "uVar1": "bitMask",
                "uVar2": "bitValue",
                "iVar3": "index",
                "local_c": "bitPosition"
            },
            "calling": [
                "FUN_0800640c",
                "FUN_0800778c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800733e": {
            "entrypoint": "0x0800733e",
            "current_name": "update_data_0800733e",
            "code": "\nvoid updateData_0800733e(int dataPointer,undefined2 newValue,char isNull)\n\n{\n  if (isNull == '\\0') {\n    *(undefined2 *)(dataPointer + 0x1a) = newValue;\n  }\n  else {\n    *(undefined2 *)(dataPointer + 0x18) = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800733e": "update_data_0800733e",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "param_3": "isNull"
            },
            "calling": [
                "FUN_0800778c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738e": {
            "entrypoint": "0x0800738e",
            "current_name": "update_param_and_call_function_0800738e",
            "code": "\n\n\nvoid updateParamAndCallFunction_0800738e(ushort inputValue)\n\n{\n  if ((inputValue & _DAT_40013c14) != 0) {\n    _DAT_40013c14 = (uint)inputValue;\n    FUNC_080073c0(inputValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800738e": "update_param_and_call_function_0800738e",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_080073c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "FUNC_080073c0",
            "code": "\nvoid FUNC_080073c0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "FUNC_080073c0"
            },
            "calling": [
                "FUN_0800738e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080073d4": {
            "entrypoint": "0x080073d4",
            "current_name": "set_bit_value_080073d4",
            "code": "\nvoid setBitValue_080073d4(uint inputNumber)\n\n{\n  *(short *)(((int)inputNumber >> 4) * 0x400 + 0x4002001a) = (short)(1 << (inputNumber & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073d4": "set_bit_value_080073d4",
                "param_1": "inputNumber"
            },
            "calling": [
                "FUN_08007520"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007402": {
            "entrypoint": "0x08007402",
            "current_name": "set_bit_in_memory_08007402",
            "code": "\nvoid setBitInMemory_08007402(uint inputValue)\n\n{\n  *(short *)(((int)inputValue >> 4) * 0x400 + 0x40020018) = (short)(1 << (inputValue & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007402": "set_bit_in_memory_08007402",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007430": {
            "entrypoint": "0x08007430",
            "current_name": "infinite_loop_08007430",
            "code": "\nvoid infiniteLoop_08007430(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08007430": "infinite_loop_08007430"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007436": {
            "entrypoint": "0x08007436",
            "current_name": "initialize_system_08007436",
            "code": "\n\n\nvoid initializeSystem_08007436(void)\n\n{\n  int iVar1;\n  undefined4 parameter1;\n  undefined4 parameter2;\n  undefined4 parameter3;\n  undefined4 parameter4;\n  undefined4 parameter5;\n  undefined4 parameter6;\n  undefined4 parameter7;\n  undefined4 parameter8;\n  undefined4 parameter9;\n  undefined4 parameter10;\n  undefined4 parameter11;\n  undefined4 parameter12;\n  undefined4 parameter13;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  parameter1 = 1;\n  parameter2 = 1;\n  parameter3 = 2;\n  parameter4 = 0x400000;\n  parameter5 = 8;\n  parameter6 = 0x150;\n  parameter7 = 2;\n  parameter8 = 7;\n  iVar1 = check_parameters_08005cec(&parameter1);\n  if (iVar1 != 0) {\n    infinite_loop_08007430();\n  }\n  parameter9 = 0xf;\n  parameter10 = 2;\n  parameter11 = 0;\n  parameter12 = 0x1400;\n  parameter13 = 0x1000;\n  iVar1 = update_clock_frequency_and_memory_range_0800618c(&parameter9,5);\n  if (iVar1 != 0) {\n    infinite_loop_08007430();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007436": "initialize_system_08007436",
                "local_4c": "parameter1",
                "local_48": "parameter2",
                "local_34": "parameter3",
                "local_30": "parameter4",
                "local_2c": "parameter5",
                "local_28": "parameter6",
                "local_24": "parameter7",
                "local_20": "parameter8",
                "local_1c": "parameter9",
                "local_18": "parameter10",
                "local_14": "parameter11",
                "local_10": "parameter12",
                "local_c": "parameter13"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800618c",
                "FUN_08007430",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074c8": {
            "entrypoint": "0x080074c8",
            "current_name": "handle_system_parameters_080074c8",
            "code": "\nvoid handleSystemParameters_080074c8(uint systemFlags)\n\n{\n  if ((systemFlags & 1) != 0) {\n    setMemoryBit(0x3e);\n  }\n  if ((DAT_20000e4c != 0) && ((systemFlags & 0x1e) != 0)) {\n    initializeAndCheckSystem();\n  }\n  if ((DAT_20000e50 != 0) && ((systemFlags & 0x80) != 0)) {\n    checkSystemFlag(systemFlags);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074c8": "handle_system_parameters_080074c8",
                "param_1": "systemFlags",
                "set_bit_in_memory_08007402": "setMemoryBit",
                "initialize_and_check_system_0800195c": "initializeAndCheckSystem",
                "check_system_flag_08003a18": "checkSystemFlag"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_08003a18",
                "FUN_08007402",
                "FUN_0800195c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007520": {
            "entrypoint": "0x08007520",
            "current_name": "set_bit_value_if_one_08007520",
            "code": "\nvoid setBitValueIfOne_08007520(uint inputValue)\n\n{\n  if ((inputValue & 1) != 0) {\n    setBitValue(0x3e);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007520": "set_bit_value_if_one_08007520",
                "param_1": "inputValue",
                "set_bit_value_080073d4": "setBitValue"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_080073d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007540": {
            "entrypoint": "0x08007540",
            "current_name": "initialize_program_08007540",
            "code": "\nundefined4 initialize_program_08007540(void)\n\n{\n  initialize_program_08007540();\n  initialize_system();\n  update_memory_and_data();\n  initialize_system();\n  initialize_data();\n  initialize_memory_flags();\n  execute_or_skip_interrupt(0);\n  initialize_system();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007540": "initialize_program_08007540",
                "initialize_program_080059b4": "initialize_program",
                "initialize_system_08007436": "initialize_system",
                "update_memory_and_data_0800778c": "update_memory_and_data",
                "initialize_system_08007e08": "initialize_system",
                "initialize_data_080079c0": "initialize_data",
                "initialize_memory_flags_08008190": "initialize_memory_flags",
                "execute_or_skip_interrupt_08005984": "execute_or_skip_interrupt",
                "initialize_system_08001ddc": "initialize_system"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08005984",
                "FUN_08007436",
                "FUN_08007e08",
                "FUN_080079c0",
                "FUN_080059b4",
                "FUN_08001ddc",
                "FUN_0800778c",
                "FUN_08008190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800756c": {
            "entrypoint": "0x0800756c",
            "current_name": "initialize_device_0800756c",
            "code": "\n\n\nvoid initializeDevice_0800756c(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800756c": "initialize_device_0800756c"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076c8": {
            "entrypoint": "0x080076c8",
            "current_name": "update_bit_value_080076c8",
            "code": "\nvoid updateBitValue_080076c8(uint inputValue)\n\n{\n  *(uint *)(((int)inputValue >> 4) * 0x400 + 0x40020014) =\n       *(uint *)(((int)inputValue >> 4) * 0x400 + 0x40020014) ^ 1 << (inputValue & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076c8": "update_bit_value_080076c8",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007756": {
            "entrypoint": "0x08007756",
            "current_name": "check_and_update_data_08007756",
            "code": "\nvoid checkAndUpdateData_08007756(void)\n\n{\n  uint dataValue;\n  \n  dataValue = getDataValue();\n  if ((dataValue & 0x1ff) == 0) {\n    updateBitValue(0x3c);\n  }\n  if ((dataValue & 0xf) == 0) {\n    updateBitValues();\n  }\n  incrementDataCounter();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007756": "check_and_update_data_08007756",
                "get_data_value_08005a84": "getDataValue",
                "update_bit_value_080076c8": "updateBitValue",
                "update_bit_values_08007930": "updateBitValues",
                "increment_data_counter_08005a68": "incrementDataCounter",
                "uVar1": "dataValue"
            },
            "calling": [],
            "called": [
                "FUN_08005a84",
                "FUN_08005a68",
                "FUN_08007930",
                "FUN_080076c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800778c": {
            "entrypoint": "0x0800778c",
            "current_name": "update_memory_and_data_0800778c",
            "code": "\n\n\nvoid update_memory_and_data_0800778c(void)\n\n{\n  int index;\n  int memory_flag;\n  undefined4 data_1;\n  undefined4 data_2;\n  undefined4 data_3;\n  undefined4 data_4;\n  uint *memory_ptr;\n  uint counter;\n  \n  for (counter = 0; counter < 0x11; counter = counter + 1) {\n    index = counter * 0x18;\n    memory_ptr = (uint *)(&DAT_0800bcbc + index);\n    _DAT_40023830 = _DAT_40023830 | 1 << (*memory_ptr >> 4 & 0xff);\n    memory_flag = 1 << (*memory_ptr & 0xf);\n    data_1 = *(undefined4 *)(&DAT_0800bcc0 + index);\n    data_2 = *(undefined4 *)(&DAT_0800bcc4 + index);\n    data_3 = *(undefined4 *)(&DAT_0800bcc8 + index);\n    data_4 = *(undefined4 *)(&DAT_0800bccc + index);\n    update_memory_map_08006e88(((*memory_ptr >> 4) + 0x100080) * 0x400,&memory_flag);\n    if (-1 < (int)memory_ptr[5]) {\n      update_data_0800733e(((*memory_ptr >> 4) + 0x100080) * 0x400,1 << (*memory_ptr & 0xf) & 0xffff,\n                   memory_ptr[5] & 0xff);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800778c": "update_memory_and_data_0800778c",
                "local_24": "memory_flag",
                "local_20": "data_1",
                "local_1c": "data_2",
                "local_18": "data_3",
                "local_14": "data_4",
                "local_10": "memory_ptr",
                "local_c": "counter",
                "iVar1": "index"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800733e",
                "FUN_08006e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007854": {
            "entrypoint": "0x08007854",
            "current_name": "check_bit_value_08007854",
            "code": "\nuint check_bit_value_08007854(uint input_value)\n\n{\n  return *(uint *)(((int)input_value >> 4) * 0x400 + 0x40020010) >> (input_value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08007854": "check_bit_value_08007854",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08007884"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007884": {
            "entrypoint": "0x08007884",
            "current_name": "get_bit_values_08007884",
            "code": "\nuint get_bit_values_08007884(void)\n\n{\n  int bit_value_54;\n  int bit_value_55;\n  int bit_value_56;\n  int bit_value_57;\n  int bit_value_15;\n  uint bit_value_0;\n  \n  bit_value_54 = check_bit_value_08007854(0x36);\n  bit_value_55 = check_bit_value_08007854(0x37);\n  bit_value_56 = check_bit_value_08007854(0x38);\n  bit_value_57 = check_bit_value_08007854(0x39);\n  bit_value_15 = check_bit_value_08007854(0xf);\n  bit_value_0 = check_bit_value_08007854(0);\n  return bit_value_0 | bit_value_54 << 4 | bit_value_55 << 3 | bit_value_56 << 2 | bit_value_57 << 1 | bit_value_15 << 7;\n}\n\n",
            "renaming": {
                "FUN_08007884": "get_bit_values_08007884",
                "iVar1": "bit_value_54",
                "iVar2": "bit_value_55",
                "iVar3": "bit_value_56",
                "iVar4": "bit_value_57",
                "iVar5": "bit_value_15",
                "uVar6": "bit_value_0"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_08007854"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080078f4": {
            "entrypoint": "0x080078f4",
            "current_name": "calculate_bitwise_or_080078f4",
            "code": "\nuint calculateBitwiseOR_080078f4(void)\n\n{\n  int index;\n  uint result;\n  \n  result = 0;\n  for (index = 0; index < 4; index = index + 1) {\n    result = *(uint *)(&DAT_20000e54 + index * 4) | result;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080078f4": "calculate_bitwise_or_080078f4",
                "local_10": "index",
                "local_c": "result"
            },
            "calling": [
                "FUN_08001994",
                "FUN_08007930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007930": {
            "entrypoint": "0x08007930",
            "current_name": "update_bit_values_08007930",
            "code": "\nvoid updateBitValues_08007930(void)\n\n{\n  int index;\n  uint previousValue;\n  undefined4 bitValues;\n  uint newBitwiseOr;\n  uint changedBits;\n  \n  index = DAT_20000e68;\n  previousValue = DAT_20000e64;\n  if (DAT_20000e6c != 0) {\n    bitValues = get_bit_values_08007884();\n    *(undefined4 *)(&DAT_20000e54 + index * 4) = bitValues;\n    if (DAT_20000e68 == 3) {\n      DAT_20000e68 = 0;\n    }\n    else {\n      DAT_20000e68 = DAT_20000e68 + 1;\n    }\n    newBitwiseOr = calculate_bitwise_or_080078f4();\n    previousValue = DAT_20000e64;\n    if (newBitwiseOr != DAT_20000e64) {\n      changedBits = ~newBitwiseOr & DAT_20000e64;\n      if ((~DAT_20000e64 & newBitwiseOr) != 0) {\n        handle_system_parameters_080074c8(~DAT_20000e64 & newBitwiseOr);\n      }\n      previousValue = newBitwiseOr;\n      if (changedBits != 0) {\n        set_bit_value_if_one_08007520(changedBits);\n      }\n    }\n  }\n  DAT_20000e64 = previousValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007930": "update_bit_values_08007930",
                "iVar1": "index",
                "uVar2": "previousValue",
                "uVar3": "bitValues",
                "uVar4": "newBitwiseOr",
                "uVar5": "changedBits"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [
                "FUN_080078f4",
                "FUN_08007520",
                "FUN_080074c8",
                "FUN_08007884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079c0": {
            "entrypoint": "0x080079c0",
            "current_name": "initialize_data_080079c0",
            "code": "\nvoid initializeData_080079c0(void)\n\n{\n  memset_0800b430(&DAT_20000e54,0,0x18);\n  DAT_20000e6c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079c0": "initialize_data_080079c0"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e0": {
            "entrypoint": "0x080079e0",
            "current_name": "set_bit_value_080079e0",
            "code": "\nvoid setBitValue_080079e0(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079e0": "set_bit_value_080079e0",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08007a70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a10": {
            "entrypoint": "0x08007a10",
            "current_name": "set_flag_based_on_param_08007a10",
            "code": "\n\n\nvoid setFlagBasedOnParam_08007a10(undefined *param)\n\n{\n  if (param == (undefined *)0x40000000) {\n    _DAT_40023840 = _DAT_40023840 | 1;\n  }\n  else if (param == (undefined *)0x40000400) {\n    _DAT_40023840 = _DAT_40023840 | 2;\n  }\n  else if (param == &DAT_40000800) {\n    _DAT_40023840 = _DAT_40023840 | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a10": "set_flag_based_on_param_08007a10",
                "param_1": "param"
            },
            "calling": [
                "FUN_08007d08",
                "FUN_08007ad0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a70": {
            "entrypoint": "0x08007a70",
            "current_name": "handle_extracted_bits_08007a70",
            "code": "\nvoid handleExtractedBits_08007a70(undefined *ptr,undefined4 value1,undefined4 value2)\n\n{\n  undefined bitValue;\n  \n  if (ptr == (undefined *)0x40000000) {\n    bitValue = 0x1c;\n  }\n  else if (ptr == (undefined *)0x40000400) {\n    bitValue = 0x1d;\n  }\n  else {\n    if (ptr != &DAT_40000800) {\n      return;\n    }\n    bitValue = 0x1e;\n  }\n  store_extracted_bits_08006cf6(bitValue,value1,value2);\n  set_bit_value_080079e0(bitValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a70": "handle_extracted_bits_08007a70",
                "param_1": "ptr",
                "param_2": "value1",
                "param_3": "value2",
                "local_c": "bitValue"
            },
            "calling": [
                "FUN_08007ad0"
            ],
            "called": [
                "FUN_08006cf6",
                "FUN_080079e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ad0": {
            "entrypoint": "0x08007ad0",
            "current_name": "initialize_flags_08007ad0",
            "code": "\n\n\nvoid initialize_flags_08007ad0(void)\n\n{\n  set_flag_based_on_parameter(0x40000000);\n  _DAT_40000000 = 0;\n  _DAT_40000004 = 0;\n  _DAT_40000008 = 0;\n  _DAT_4000000c = 0;\n  _DAT_40000010 = 0;\n  _DAT_40000018 = 0;\n  _DAT_4000001c = 0;\n  _DAT_40000020 = 0;\n  _DAT_40000024 = 0;\n  _DAT_40000028 = DAT_20000000 / 42000000 - 1;\n  _DAT_4000002c = 0;\n  _DAT_40000034 = 0;\n  _DAT_40000038 = 0;\n  _DAT_4000003c = 0;\n  _DAT_40000040 = 0;\n  _DAT_40000048 = 0;\n  _DAT_4000004c = 0;\n  handle_extracted_bits(0x40000000,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ad0": "initialize_flags_08007ad0",
                "set_flag_based_on_param_08007a10": "set_flag_based_on_parameter",
                "handle_extracted_bits_08007a70": "handle_extracted_bits"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [
                "FUN_08007a10",
                "FUN_08007a70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007b70": {
            "entrypoint": "0x08007b70",
            "current_name": "set_flags_08007b70",
            "code": "\n\n\nvoid setFlags_08007b70(void)\n\n{\n  uint flags;\n  \n  flags = 1;\n  if (_DAT_40000034 != 0) {\n    flags = 3;\n  }\n  if (_DAT_40000038 != 0) {\n    flags = flags | 4;\n  }\n  _DAT_4000000c = _DAT_4000000c | flags;\n  _DAT_40000000 = _DAT_40000000 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007b70": "set_flags_08007b70",
                "local_c": "flags"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bc2": {
            "entrypoint": "0x08007bc2",
            "current_name": "clear_flags_08007bc2",
            "code": "\n\n\nvoid clearFlags_08007bc2(void)\n\n{\n  _DAT_40000000 = _DAT_40000000 & 0xfffffffe;\n  _DAT_4000000c = _DAT_4000000c & 0xfffffff8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bc2": "clear_flags_08007bc2"
            },
            "calling": [
                "FUN_080057e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bf0": {
            "entrypoint": "0x08007bf0",
            "current_name": "update_data_08007bf0",
            "code": "\n\n\nvoid updateData_08007bf0(uint newData)\n\n{\n  _DAT_4000002c = newData;\n  if (newData <= _DAT_40000024) {\n    _DAT_40000024 = newData;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bf0": "update_data_08007bf0",
                "param_1": "newData"
            },
            "calling": [
                "FUN_08005324"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c40": {
            "entrypoint": "0x08007c40",
            "current_name": "set_global_variable_08007c40",
            "code": "\n\n\nvoid setGlobalVariable_08007c40(undefined4 value)\n\n{\n  _DAT_40000034 = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c40": "set_global_variable_08007c40",
                "param_1": "value"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c5e": {
            "entrypoint": "0x08007c5e",
            "current_name": "initialize_global_variable_08007c5e",
            "code": "\n\n\nvoid initializeGlobalVariable_08007c5e(undefined4 value)\n\n{\n  _DAT_40000038 = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c5e": "initialize_global_variable_08007c5e",
                "param_1": "value"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c7c": {
            "entrypoint": "0x08007c7c",
            "current_name": "check_and_update_flags_08007c7c",
            "code": "\n\n\nvoid checkAndUpdateFlags_08007c7c(void)\n\n{\n  if (((_DAT_40000010 & 2) != 0) && ((_DAT_4000000c & 2) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffd;\n    initialize_data_08005778();\n  }\n  if (((_DAT_40000010 & 4) != 0) && ((_DAT_4000000c & 4) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffb;\n    update_parameter_and_data_08005760();\n  }\n  if (((_DAT_40000010 & 1) != 0) && ((_DAT_4000000c & 1) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffe;\n    update_data_080053a0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c7c": "check_and_update_flags_08007c7c"
            },
            "calling": [],
            "called": [
                "FUN_08005760",
                "FUN_08005778",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007d08": {
            "entrypoint": "0x08007d08",
            "current_name": "initialize_system_08007d08",
            "code": "\n\n\nvoid initialize_system_08007d08(void)\n\n{\n  set_flag_based_on_param_08007a10(&DAT_40000800);\n  _DAT_40000800 = 0x80;\n  _DAT_40000804 = 0;\n  _DAT_40000808 = 0;\n  _DAT_4000080c = 0;\n  _DAT_40000810 = 0;\n  _DAT_40000818 = 0x6800;\n  _DAT_4000081c = 0;\n  _DAT_40000820 = 0;\n  _DAT_40000824 = 0;\n  _DAT_40000828 = DAT_20000000 / 4800000 - 1;\n  _DAT_4000082c = 199;\n  _DAT_40000834 = 0;\n  _DAT_40000838 = 100;\n  _DAT_4000083c = 0;\n  _DAT_40000840 = 0;\n  _DAT_40000848 = 0;\n  _DAT_4000084c = 0;\n  _DAT_40000814 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007d08": "initialize_system_08007d08"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [
                "FUN_08007a10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007da8": {
            "entrypoint": "0x08007da8",
            "current_name": "set_flags_08007da8",
            "code": "\n\n\nvoid setFlags_08007da8(void)\n\n{\n  _DAT_40000820 = _DAT_40000820 | 0x10;\n  _DAT_40000800 = _DAT_40000800 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007da8": "set_flags_08007da8"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e08": {
            "entrypoint": "0x08007e08",
            "current_name": "initialize_system_08007e08",
            "code": "\nvoid initialize_system_08007e08(void)\n\n{\n  initialize_flags();\n  initialize_system_08007e08();\n  set_flags();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e08": "initialize_system_08007e08",
                "initialize_flags_08007ad0": "initialize_flags",
                "initialize_system_08007d08": "initialize_system",
                "set_flags_08007da8": "set_flags"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08007d08",
                "FUN_08007ad0",
                "FUN_08007da8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e1c": {
            "entrypoint": "0x08007e1c",
            "current_name": "wait_for_bit_set_08007e1c",
            "code": "\n\n\nvoid waitForBitSet_08007e1c(byte inputByte)\n\n{\n  do {\n  } while ((_DAT_40004400 & 0x80) == 0);\n  _DAT_40004404 = (uint)inputByte;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e1c": "wait_for_bit_set_08007e1c",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_0800826a",
                "FUN_08008250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e58": {
            "entrypoint": "0x08007e58",
            "current_name": "is_bit_mask_set_08007e58",
            "code": "\n\n\nbool isBitMaskSet_08007e58(void)\n\n{\n  return (_DAT_40004400 & 0x20) != 0;\n}\n\n",
            "renaming": {
                "FUN_08007e58": "is_bit_mask_set_08007e58"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e84": {
            "entrypoint": "0x08007e84",
            "current_name": "get_lowest_byte_08007e84",
            "code": "\n\n\nuint get_lowest_byte_08007e84(void)\n\n{\n  return _DAT_40004404 & 0xff;\n}\n\n",
            "renaming": {
                "FUN_08007e84": "get_lowest_byte_08007e84"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ea4": {
            "entrypoint": "0x08007ea4",
            "current_name": "update_memory_flags_08007ea4",
            "code": "\n\n\nvoid updateMemoryFlags_08007ea4(undefined *address)\n\n{\n  if (address == (undefined *)0x40011000) {\n    _DAT_40023844 = _DAT_40023844 | 0x10;\n  }\n  else if (address == &DAT_40004400) {\n    _DAT_40023840 = _DAT_40023840 | 0x20000;\n  }\n  else if (address == (undefined *)0x40004800) {\n    _DAT_40023840 = _DAT_40023840 | 0x40000;\n  }\n  else if (address == (undefined *)0x40004c00) {\n    _DAT_40023840 = _DAT_40023840 | 0x80000;\n  }\n  else if (address == (undefined *)0x40005000) {\n    _DAT_40023840 = _DAT_40023840 | 0x100000;\n  }\n  else if (address == (undefined *)0x40011400) {\n    _DAT_40023844 = _DAT_40023844 | 0x20;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ea4": "update_memory_flags_08007ea4",
                "param_1": "address"
            },
            "calling": [
                "FUN_08008190"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f54": {
            "entrypoint": "0x08007f54",
            "current_name": "calculate_clock_frequency_and_set_08007f54",
            "code": "\nvoid calculateClockFrequencyAndSet_08007f54(int baseAddress,int paramValue)\n\n{\n  ulonglong clockFrequency1;\n  int clockFrequency2;\n  int clockFrequency3;\n  undefined8 frequencyCalculation;\n  \n  if ((*(uint *)(baseAddress + 0xc) & 0x8000) == 0) {\n    if ((baseAddress != 0x40011000) && (baseAddress != 0x40011400)) {\n      frequencyCalculation = calculateClockFrequency1();\n      clockFrequency1 = (ulonglong)(uint)((int)frequencyCalculation * 0x19) / (ulonglong)(uint)(paramValue << 2);\n      clockFrequency2 = calculateClockFrequency1((int)frequencyCalculation,(int)((ulonglong)frequencyCalculation >> 0x20),(int)(clockFrequency1 * 0x51eb851f));\n      clockFrequency3 = calculateClockFrequency1();\n      *(uint *)(baseAddress + 8) =\n           (int)(clockFrequency1 / 100) << 4 |\n           (((uint)(clockFrequency2 * 0x19) / (uint)(paramValue << 2) +\n            (int)(((ulonglong)(uint)(clockFrequency3 * 0x19) / (ulonglong)(uint)(paramValue << 2)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    frequencyCalculation = calculateClockFrequency2();\n    clockFrequency1 = (ulonglong)(uint)((int)frequencyCalculation * 0x19) / (ulonglong)(uint)(paramValue << 2);\n    clockFrequency2 = calculateClockFrequency2((int)frequencyCalculation,(int)((ulonglong)frequencyCalculation >> 0x20),(int)(clockFrequency1 * 0x51eb851f));\n    clockFrequency3 = calculateClockFrequency2();\n    *(uint *)(baseAddress + 8) =\n         (int)(clockFrequency1 / 100) << 4 |\n         (((uint)(clockFrequency2 * 0x19) / (uint)(paramValue << 2) +\n          (int)(((ulonglong)(uint)(clockFrequency3 * 0x19) / (ulonglong)(uint)(paramValue << 2)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  else {\n    if ((baseAddress != 0x40011000) && (baseAddress != 0x40011400)) {\n      frequencyCalculation = calculateClockFrequency1();\n      clockFrequency1 = (ulonglong)(uint)((int)frequencyCalculation * 0x19) / (ulonglong)(uint)(paramValue << 1);\n      clockFrequency2 = calculateClockFrequency1((int)frequencyCalculation,(int)((ulonglong)frequencyCalculation >> 0x20),(int)(clockFrequency1 * 0x51eb851f));\n      clockFrequency3 = calculateClockFrequency1();\n      *(uint *)(baseAddress + 8) =\n           (int)(clockFrequency1 / 100) << 4 |\n           (((uint)(clockFrequency2 * 0x19) / (uint)(paramValue << 1) +\n            (int)(((ulonglong)(uint)(clockFrequency3 * 0x19) / (ulonglong)(uint)(paramValue << 1)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    frequencyCalculation = calculateClockFrequency2();\n    clockFrequency1 = (ulonglong)(uint)((int)frequencyCalculation * 0x19) / (ulonglong)(uint)(paramValue << 1);\n    clockFrequency2 = calculateClockFrequency2((int)frequencyCalculation,(int)((ulonglong)frequencyCalculation >> 0x20),(int)(clockFrequency1 * 0x51eb851f));\n    clockFrequency3 = calculateClockFrequency2();\n    *(uint *)(baseAddress + 8) =\n         (int)(clockFrequency1 / 100) << 4 |\n         (((uint)(clockFrequency2 * 0x19) / (uint)(paramValue << 1) +\n          (int)(((ulonglong)(uint)(clockFrequency3 * 0x19) / (ulonglong)(uint)(paramValue << 1)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f54": "calculate_clock_frequency_and_set_08007f54",
                "param_1": "baseAddress",
                "param_2": "paramValue",
                "uVar1": "clockFrequency1",
                "iVar2": "clockFrequency2",
                "iVar3": "clockFrequency3",
                "uVar4": "frequencyCalculation",
                "calculate_clock_frequency_08006680": "calculateClockFrequency1",
                "calculate_clock_frequency_080066cc": "calculateClockFrequency2"
            },
            "calling": [
                "FUN_08008190"
            ],
            "called": [
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008190": {
            "entrypoint": "0x08008190",
            "current_name": "initialize_memory_flags_08008190",
            "code": "\n\n\nvoid initializeMemoryFlags_08008190(void)\n\n{\n  update_memory_flags_08007ea4(&DAT_40004400);\n  _DAT_4000440c = _DAT_4000440c & 0xffff400c | 0xc;\n  _DAT_40004410 = _DAT_40004410 & 0xffff8090;\n  _DAT_40004414 = _DAT_40004414 & 0xfffff000;\n  _DAT_40004400 = _DAT_40004400 & 0xfffffc00;\n  calculateClockFrequencyAndSet(&DAT_40004400,0x1c200);\n  _DAT_4000440c = _DAT_4000440c | 0x2000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008190": "initialize_memory_flags_08008190",
                "calculate_clock_frequency_and_set_08007f54": "calculateClockFrequencyAndSet"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08007ea4",
                "FUN_08007f54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008244": {
            "entrypoint": "0x08008244",
            "current_name": "FUNC_08008244",
            "code": "\nvoid FUNC_08008244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008244": "FUNC_08008244"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008250": {
            "entrypoint": "0x08008250",
            "current_name": "wait_for_bit_set_08008250",
            "code": "\nvoid waitForBitSet_08008250(undefined param)\n\n{\n  waitForBitSet_08008250_08007e1c(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008250": "wait_for_bit_set_08008250",
                "param_1": "param",
                "wait_for_bit_set_08007e1c": "waitForBitSet_08007e1c"
            },
            "calling": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_08003778",
                "FUN_0800369c",
                "FUN_08003826",
                "FUN_080036f0"
            ],
            "called": [
                "FUN_08007e1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800826a": {
            "entrypoint": "0x0800826a",
            "current_name": "wait_for_bit_set_0800826a",
            "code": "\nundefined4 waitForBitSet_0800826a(undefined param)\n\n{\n  waitForBitSet_0800826aInternal(param);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800826a": "wait_for_bit_set_0800826a",
                "param_1": "param",
                "wait_for_bit_set_08007e1c": "waitForBitSetInternal"
            },
            "calling": [],
            "called": [
                "FUN_08007e1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008286": {
            "entrypoint": "0x08008286",
            "current_name": "process_data_08008286",
            "code": "\nundefined processData_08008286(void)\n\n{\n  undefined lowestByte;\n  int bitMaskSet;\n  \n  bitMaskSet = checkBitMaskSet();\n  if (bitMaskSet != 0) {\n    lowestByte = retrieveLowestByte();\n    bitMaskSet = processByte(lowestByte);\n    if (bitMaskSet == 0) {\n      return lowestByte;\n    }\n  }\n  return 0xff;\n}\n\n",
            "renaming": {
                "FUN_08008286": "process_data_08008286",
                "iVar2": "bitMaskSet",
                "uVar1": "lowestByte",
                "is_bit_mask_set_08007e58": "checkBitMaskSet",
                "get_lowest_byte_08007e84": "retrieveLowestByte",
                "process_byte_08005900": "processByte"
            },
            "calling": [
                "FUN_08003f34"
            ],
            "called": [
                "FUN_08005900",
                "FUN_08007e58",
                "FUN_08007e84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082ba": {
            "entrypoint": "0x080082ba",
            "current_name": "FUNC_080082ba",
            "code": "\nvoid FUNC_080082ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080082ba": "FUNC_080082ba"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080082d0": {
            "entrypoint": "0x080082d0",
            "current_name": "perform_operation_080082d0",
            "code": "\nulonglong perform_operation_080082d0(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int temp_1;\n  byte temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  uint temp_6;\n  uint temp_7;\n  int temp_8;\n  uint temp_9;\n  uint temp_10;\n  uint temp_11;\n  uint temp_12;\n  bool bool_1;\n  bool bool_2;\n  bool bool_3;\n  \n  temp_6 = input_4 ^ 0x80000000;\n  temp_9 = input_2 << 1;\n  input_4 = input_4 << 1;\n  bool_1 = ((input_2 ^ temp_6) & 0x7fffffff) == 0;\n  bool_2 = bool_1 && input_1 == input_3;\n  if (!bool_1 || input_1 != input_3) {\n    bool_2 = (temp_9 | input_1) == 0;\n  }\n  if (!bool_2) {\n    bool_2 = (input_4 | input_3) == 0;\n  }\n  temp_8 = (int)temp_9 >> 0x15;\n  if (!bool_2) {\n    bool_2 = temp_8 == -1;\n  }\n  temp_1 = (int)input_4 >> 0x15;\n  if (!bool_2) {\n    bool_2 = temp_1 == -1;\n  }\n  if (bool_2) {\n    if (temp_8 == -1 || temp_1 == -1) {\n      temp_9 = temp_6;\n      temp_11 = input_3;\n      if (temp_8 == -1) {\n        temp_9 = input_2;\n        temp_11 = input_1;\n      }\n      if (temp_8 != -1 || temp_1 != -1) {\n        input_3 = temp_11;\n        temp_6 = temp_9;\n      }\n      bool_2 = (temp_11 | temp_9 << 0xc) == 0;\n      if (bool_2) {\n        bool_2 = (input_3 | temp_6 << 0xc) == 0;\n      }\n      if (bool_2) {\n        bool_2 = temp_9 == temp_6;\n      }\n      if (!bool_2) {\n        temp_9 = temp_9 | 0x80000;\n      }\n      return CONCAT44(temp_9,temp_11);\n    }\n    if (((input_2 ^ temp_6) & 0x7fffffff) != 0 || input_1 != input_3) {\n      if ((temp_9 | input_1) == 0) {\n        input_1 = input_3;\n        input_2 = temp_6;\n      }\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != temp_6) {\n      return 0;\n    }\n    if (temp_9 >> 0x15 == 0) {\n      bool_2 = (input_1 & 0x80000000) != 0;\n      temp_6 = input_2 * 2 + (uint)bool_2;\n      if (CARRY4(input_2,input_2) || CARRY4(input_2 * 2,(uint)bool_2)) {\n        temp_6 = temp_6 | 0x80000000;\n      }\n      return CONCAT44(temp_6,input_1 << 1);\n    }\n    if (temp_9 < 0xffc00000) {\n      return CONCAT44(input_2 + 0x100000,input_1);\n    }\n    input_2 = input_2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input_2 | 0x7ff00000) << 0x20;\n  }\n  temp_9 = temp_9 >> 0x15;\n  input_4 = input_4 >> 0x15;\n  temp_11 = input_4 - temp_9;\n  bool_2 = temp_11 != 0;\n  if (input_4 < temp_9) {\n    temp_11 = -temp_11;\n  }\n  temp_10 = input_1;\n  temp_7 = input_2;\n  if (bool_2 && temp_9 <= input_4) {\n    temp_9 = temp_9 + temp_11;\n    temp_10 = input_3;\n    temp_7 = temp_6;\n    input_3 = input_1;\n    temp_6 = input_2;\n  }\n  if (0x36 < temp_11) {\n    return CONCAT44(temp_7,temp_10);\n  }\n  temp_4 = temp_7 & 0xfffff | 0x100000;\n  if ((temp_7 & 0x80000000) != 0) {\n    bool_2 = temp_10 != 0;\n    temp_10 = -temp_10;\n    temp_4 = -temp_4 - (uint)bool_2;\n  }\n  temp_7 = temp_6 & 0xfffff | 0x100000;\n  if ((temp_6 & 0x80000000) != 0) {\n    bool_2 = input_3 != 0;\n    input_3 = -input_3;\n    temp_7 = -temp_7 - (uint)bool_2;\n  }\n  if (temp_9 == temp_11) {\n    temp_7 = temp_7 ^ 0x100000;\n    if (temp_9 == 0) {\n      temp_4 = temp_4 ^ 0x100000;\n      temp_9 = 1;\n    }\n    else {\n      temp_11 = temp_11 - 1;\n    }\n  }\n  temp_6 = -temp_11 + 0x20;\n  if ((int)temp_11 < 0x21) {\n    temp_12 = input_3 << (temp_6 & 0xff);\n    input_3 = input_3 >> (temp_11 & 0xff);\n    temp_3 = temp_10 + input_3;\n    temp_5 = temp_7 << (temp_6 & 0xff);\n    temp_6 = temp_3 + temp_5;\n    temp_4 = temp_4 + CARRY4(temp_10,input_3) + ((int)temp_7 >> (temp_11 & 0xff)) +\n            (uint)CARRY4(temp_3,temp_5);\n  }\n  else {\n    temp_12 = temp_7 << (-temp_11 + 0x40 & 0xff);\n    if (input_3 != 0) {\n      temp_12 = temp_12 | 2;\n    }\n    temp_7 = (int)temp_7 >> (temp_11 - 0x20 & 0xff);\n    temp_6 = temp_10 + temp_7;\n    temp_4 = temp_4 + ((int)temp_7 >> 0x1f) + (uint)CARRY4(temp_10,temp_7);\n  }\n  input_2 = temp_4 & 0x80000000;\n  temp_11 = temp_4;\n  if ((int)temp_4 < 0) {\n    bool_2 = temp_12 == 0;\n    temp_12 = -temp_12;\n    temp_11 = -temp_6;\n    temp_6 = -(uint)!bool_2 - temp_6;\n    temp_11 = -(uint)(bool_2 <= temp_11) - temp_4;\n  }\n  if (0xfffff < temp_11) {\n    temp_10 = temp_9 - 1;\n    if (0x1fffff < temp_11) {\n      temp_10 = temp_11 & 1;\n      temp_11 = temp_11 >> 1;\n      temp_2 = (byte)temp_6;\n      temp_6 = (uint)(temp_10 != 0) << 0x1f | temp_6 >> 1;\n      temp_12 = (uint)(temp_2 & 1) << 0x1f | temp_12 >> 1;\n      temp_10 = temp_9;\n      if (0xffbfffff < temp_9 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    bool_2 = 0x7fffffff < temp_12;\n    if (temp_12 == 0x80000000) {\n      bool_2 = (temp_6 & 1) != 0;\n    }\n    return CONCAT44(temp_11 + temp_10 * 0x100000 + (uint)CARRY4(temp_6,(uint)bool_2) | input_2,\n                    temp_6 + bool_2);\n  }\n  bool_1 = (temp_12 & 0x80000000) != 0;\n  temp_12 = temp_12 << 1;\n  temp_10 = temp_6 * 2;\n  bool_2 = CARRY4(temp_6,temp_6);\n  temp_6 = temp_6 * 2 + (uint)bool_1;\n  temp_11 = temp_11 * 2 + (uint)(bool_2 || CARRY4(temp_10,(uint)bool_1));\n  temp_10 = temp_9 - 2;\n  if (temp_9 - 1 != 0 && 0xfffff < temp_11) goto LAB_080083e0;\n  temp_7 = temp_6;\n  temp_9 = temp_11;\n  if (temp_11 == 0) {\n    temp_7 = 0;\n    temp_9 = temp_6;\n  }\n  temp_8 = LZCOUNT(temp_9);\n  if (temp_11 == 0) {\n    temp_8 = temp_8 + 0x20;\n  }\n  temp_11 = temp_8 - 0xb;\n  bool_3 = SBORROW4(temp_11,0x20);\n  temp_6 = temp_8 - 0x2b;\n  bool_2 = (int)temp_6 < 0;\n  bool_1 = temp_6 == 0;\n  if ((int)temp_11 < 0x20) {\n    bool_3 = SCARRY4(temp_6,0xc);\n    temp_8 = temp_8 + -0x1f;\n    bool_2 = temp_8 < 0;\n    bool_1 = temp_8 == 0;\n    temp_6 = temp_11;\n    if (!bool_1 && bool_2 == bool_3) {\n      temp_7 = temp_9 << (temp_11 & 0xff);\n      temp_9 = temp_9 >> (0xcU - temp_8 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (bool_1 || bool_2 != bool_3) {\n    temp_12 = 0x20 - temp_6;\n  }\n  temp_9 = temp_9 << (temp_6 & 0xff);\n  if (bool_1 || bool_2 != bool_3) {\n    temp_9 = temp_9 | temp_7 >> (temp_12 & 0xff);\n  }\n  if (bool_1 || bool_2 != bool_3) {\n    temp_7 = temp_7 << (temp_6 & 0xff);\n  }\nLAB_08008458:\n  if ((int)temp_11 <= (int)temp_10) {\n    return CONCAT44(temp_9 + (temp_10 - temp_11) * 0x100000 | input_2,temp_7);\n  }\n  temp_6 = ~(temp_10 - temp_11);\n  if ((int)temp_6 < 0x1f) {\n    temp_8 = temp_6 - 0x13;\n    if (temp_8 != 0 && temp_8 < 0 == SCARRY4(temp_6 - 0x1f,0xc)) {\n      return CONCAT44(temp_4,temp_7 >> (0x20 - (0xcU - temp_8) & 0xff) | temp_9 << (0xcU - temp_8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp_6 = temp_6 + 1;\n    return CONCAT44(input_2 | temp_9 >> (temp_6 & 0xff),\n                    temp_7 >> (temp_6 & 0xff) | temp_9 << (0x20 - temp_6 & 0xff));\n  }\n  return CONCAT44(temp_4,temp_9 >> (temp_6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d0": "perform_operation_080082d0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "temp_1",
                "bVar2": "temp_2",
                "uVar3": "temp_3",
                "uVar4": "temp_4",
                "uVar5": "temp_5",
                "uVar6": "temp_6",
                "uVar7": "temp_7",
                "iVar8": "temp_8",
                "uVar9": "temp_9",
                "uVar10": "temp_10",
                "uVar11": "temp_11",
                "uVar12": "temp_12",
                "bVar13": "bool_1",
                "bVar14": "bool_2",
                "bVar15": "bool_3"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_080096e8",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_08009990",
                "FUN_08009410",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082d4": {
            "entrypoint": "0x080082d4",
            "current_name": "perform_unsigned_integer_operation_080082d4",
            "code": "\nulonglong performUnsignedIntegerOperation_080082d4(uint x,uint y,uint param_3,uint param_4)\n\n{\n  int shiftValue1;\n  byte bit0;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shiftValue2;\n  uint shifted_y;\n  uint shifted_a;\n  uint shifted_b;\n  uint difference;\n  uint multiplied_y;\n  uint multiplied_a;\n  bool check1;\n  bool check2;\n  bool subtractionFlag;\n  \n  shifted_y = y << 1;\n  shifted_b = param_4 << 1;\n  check1 = ((y ^ param_4) & 0x7fffffff) == 0;\n  check2 = check1 && x == param_3;\n  if (!check1 || x != param_3) {\n    check2 = (shifted_y | x) == 0;\n  }\n  if (!check2) {\n    check2 = (shifted_b | param_3) == 0;\n  }\n  shiftValue2 = (int)shifted_y >> 0x15;\n  if (!check2) {\n    check2 = shiftValue2 == -1;\n  }\n  shiftValue1 = (int)shifted_b >> 0x15;\n  if (!check2) {\n    check2 = shiftValue1 == -1;\n  }\n  if (check2) {\n    if (shiftValue2 == -1 || shiftValue1 == -1) {\n      shifted_b = param_4;\n      shifted_y = param_3;\n      if (shiftValue2 == -1) {\n        shifted_b = y;\n        shifted_y = x;\n      }\n      if (shiftValue2 != -1 || shiftValue1 != -1) {\n        param_3 = shifted_y;\n        param_4 = shifted_b;\n      }\n      check2 = (shifted_y | shifted_b << 0xc) == 0;\n      if (check2) {\n        check2 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (check2) {\n        check2 = shifted_b == param_4;\n      }\n      if (!check2) {\n        shifted_b = shifted_b | 0x80000;\n      }\n      return CONCAT44(shifted_b,shifted_y);\n    }\n    if (((y ^ param_4) & 0x7fffffff) != 0 || x != param_3) {\n      if ((shifted_y | x) == 0) {\n        x = param_3;\n        y = param_4;\n      }\n      return CONCAT44(y,x);\n    }\n    if (y != param_4) {\n      return 0;\n    }\n    if (shifted_y >> 0x15 == 0) {\n      check2 = (x & 0x80000000) != 0;\n      shifted_b = y * 2 + (uint)check2;\n      if (CARRY4(y,y) || CARRY4(y * 2,(uint)check2)) {\n        shifted_b = shifted_b | 0x80000000;\n      }\n      return CONCAT44(shifted_b,x << 1);\n    }\n    if (shifted_y < 0xffc00000) {\n      return CONCAT44(y + 0x100000,x);\n    }\n    y = y & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(y | 0x7ff00000) << 0x20;\n  }\n  shifted_y = shifted_y >> 0x15;\n  shifted_b = shifted_b >> 0x15;\n  difference = shifted_b - shifted_y;\n  check2 = difference != 0;\n  if (shifted_b < shifted_y) {\n    difference = -difference;\n  }\n  shifted_a = x;\n  temp3 = y;\n  if (check2 && shifted_y <= shifted_b) {\n    shifted_y = shifted_y + difference;\n    shifted_a = param_3;\n    temp3 = param_4;\n    param_3 = x;\n    param_4 = y;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(temp3,shifted_a);\n  }\n  shifted_b = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    check2 = shifted_a != 0;\n    shifted_a = -shifted_a;\n    shifted_b = -shifted_b - (uint)check2;\n  }\n  temp3 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    check2 = param_3 != 0;\n    param_3 = -param_3;\n    temp3 = -temp3 - (uint)check2;\n  }\n  if (shifted_y == difference) {\n    temp3 = temp3 ^ 0x100000;\n    if (shifted_y == 0) {\n      shifted_b = shifted_b ^ 0x100000;\n      shifted_y = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  multiplied_a = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    multiplied_y = param_3 << (multiplied_a & 0xff);\n    param_3 = param_3 >> (difference & 0xff);\n    temp1 = shifted_a + param_3;\n    temp2 = temp3 << (multiplied_a & 0xff);\n    multiplied_a = temp1 + temp2;\n    shifted_b = shifted_b + CARRY4(shifted_a,param_3) + ((int)temp3 >> (difference & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    multiplied_y = temp3 << (-difference + 0x40 & 0xff);\n    if (param_3 != 0) {\n      multiplied_y = multiplied_y | 2;\n    }\n    temp3 = (int)temp3 >> (difference - 0x20 & 0xff);\n    multiplied_a = shifted_a + temp3;\n    shifted_b = shifted_b + ((int)temp3 >> 0x1f) + (uint)CARRY4(shifted_a,temp3);\n  }\n  y = shifted_b & 0x80000000;\n  difference = shifted_b;\n  if ((int)shifted_b < 0) {\n    check2 = multiplied_y == 0;\n    multiplied_y = -multiplied_y;\n    difference = -multiplied_a;\n    multiplied_a = -(uint)!check2 - multiplied_a;\n    difference = -(uint)(check2 <= difference) - shifted_b;\n  }\n  if (0xfffff < difference) {\n    shifted_a = shifted_y - 1;\n    if (0x1fffff < difference) {\n      shifted_b = difference & 1;\n      difference = difference >> 1;\n      bit0 = (byte)multiplied_a;\n      multiplied_a = (uint)(shifted_b != 0) << 0x1f | multiplied_a >> 1;\n      multiplied_y = (uint)(bit0 & 1) << 0x1f | multiplied_y >> 1;\n      shifted_a = shifted_y;\n      if (0xffbfffff < shifted_y * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    check2 = 0x7fffffff < multiplied_y;\n    if (multiplied_y == 0x80000000) {\n      check2 = (multiplied_a & 1) != 0;\n    }\n    return CONCAT44(difference + shifted_a * 0x100000 + (uint)CARRY4(multiplied_a,(uint)check2) | y,\n                    multiplied_a + check2);\n  }\n  check1 = (multiplied_y & 0x80000000) != 0;\n  multiplied_y = multiplied_y << 1;\n  shifted_a = multiplied_a * 2;\n  check2 = CARRY4(multiplied_a,multiplied_a);\n  multiplied_a = multiplied_a * 2 + (uint)check1;\n  difference = difference * 2 + (uint)(check2 || CARRY4(shifted_a,(uint)check1));\n  shifted_a = shifted_y - 2;\n  if (shifted_y - 1 != 0 && 0xfffff < difference) goto LAB_080083e0;\n  temp3 = multiplied_a;\n  shifted_y = difference;\n  if (difference == 0) {\n    temp3 = 0;\n    shifted_y = multiplied_a;\n  }\n  shiftValue2 = LZCOUNT(shifted_y);\n  if (difference == 0) {\n    shiftValue2 = shiftValue2 + 0x20;\n  }\n  multiplied_a = shiftValue2 - 0xb;\n  subtractionFlag = SBORROW4(multiplied_a,0x20);\n  difference = shiftValue2 - 0x2b;\n  check2 = (int)difference < 0;\n  check1 = difference == 0;\n  if ((int)multiplied_a < 0x20) {\n    subtractionFlag = SCARRY4(difference,0xc);\n    shiftValue2 = shiftValue2 + -0x1f;\n    check2 = shiftValue2 < 0;\n    check1 = shiftValue2 == 0;\n    difference = multiplied_a;\n    if (!check1 && check2 == subtractionFlag) {\n      temp3 = shifted_y << (multiplied_a & 0xff);\n      shifted_y = shifted_y >> (0xcU - shiftValue2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (check1 || check2 != subtractionFlag) {\n    multiplied_y = 0x20 - difference;\n  }\n  shifted_y = shifted_y << (difference & 0xff);\n  if (check1 || check2 != subtractionFlag) {\n    shifted_y = shifted_y | temp3 >> (multiplied_y & 0xff);\n  }\n  if (check1 || check2 != subtractionFlag) {\n    temp3 = temp3 << (difference & 0xff);\n  }\nLAB_08008458:\n  if ((int)multiplied_a <= (int)shifted_a) {\n    return CONCAT44(shifted_y + (shifted_a - multiplied_a) * 0x100000 | y,temp3);\n  }\n  difference = ~(shifted_a - multiplied_a);\n  if ((int)difference < 0x1f) {\n    shiftValue2 = difference - 0x13;\n    if (shiftValue2 != 0 && shiftValue2 < 0 == SCARRY4(difference - 0x1f,0xc)) {\n      return CONCAT44(shifted_b,temp3 >> (0x20 - (0xcU - shiftValue2) & 0xff) | shifted_y << (0xcU - shiftValue2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference = difference + 1;\n    return CONCAT44(y | shifted_y >> (difference & 0xff),\n                    temp3 >> (difference & 0xff) | shifted_y << (0x20 - difference & 0xff));\n  }\n  return CONCAT44(shifted_b,shifted_y >> (difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d4": "perform_unsigned_integer_operation_080082d4",
                "param_1": "x",
                "param_2": "y",
                "iVar1": "shiftValue1",
                "bVar2": "bit0",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "shiftValue2",
                "uVar7": "shifted_y",
                "uVar8": "shifted_a",
                "uVar9": "shifted_b",
                "uVar10": "difference",
                "uVar11": "multiplied_y",
                "uVar12": "multiplied_a",
                "bVar13": "check1",
                "bVar14": "check2",
                "bVar15": "subtractionFlag"
            },
            "calling": [
                "FUN_080094c0",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08009798",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_08009318",
                "FUN_08009990",
                "FUN_08009654",
                "FUN_0800b2e8",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800854c": {
            "entrypoint": "0x0800854c",
            "current_name": "bitwise_shift_0800854c",
            "code": "\nulonglong bitwiseShift_0800854c(uint input)\n\n{\n  uint shifted_output;\n  uint shift_amount;\n  int count;\n  uint adjusted_count;\n  uint remaining_shift;\n  bool is_negative;\n  bool is_zero;\n  bool is_overflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  shifted_output = 0;\n  count = LZCOUNT(input);\n  adjusted_count = count + 0x15;\n  is_overflow = SBORROW4(adjusted_count,0x20);\n  shift_amount = count - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (adjusted_count < 0x20) {\n    is_overflow = SCARRY4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = count + 1 == 0;\n    shift_amount = adjusted_count;\n    if (!is_zero && is_overflow == false) {\n      shifted_output = input << adjusted_count;\n      input = input >> (0xcU - (count + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_zero || is_negative != is_overflow) {\n    remaining_shift = 0x20 - shift_amount;\n  }\n  input = input << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_overflow) {\n    input = input | 0U >> (remaining_shift & 0xff);\n  }\n  if (is_zero || is_negative != is_overflow) {\n    shifted_output = 0 << (shift_amount & 0xff);\n  }\nLAB_08008458:\n  if (adjusted_count < 0x433) {\n    return CONCAT44(input + (0x432 - adjusted_count) * 0x100000,shifted_output);\n  }\n  shift_amount = ~(0x432 - adjusted_count);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(input >> (shift_amount - 0x1f & 0xff));\n  }\n  count = shift_amount - 0x13;\n  if (count == 0 || count < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(input >> (shift_amount & 0xff),\n                    shifted_output >> (shift_amount & 0xff) | input << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(shifted_output >> (0x20 - (0xcU - count) & 0xff) | input << (0xcU - count & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800854c": "bitwise_shift_0800854c",
                "param_1": "input",
                "uVar1": "shifted_output",
                "uVar2": "shift_amount",
                "iVar3": "count",
                "uVar4": "adjusted_count",
                "in_r12": "remaining_shift",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_overflow"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800856c": {
            "entrypoint": "0x0800856c",
            "current_name": "shift_and_merge_0800856c",
            "code": "\nulonglong shift_and_merge_0800856c(uint input)\n\n{\n  uint upper_bits;\n  uint absolute_value;\n  uint shift_amount;\n  int leading_zeros;\n  uint shifted_length;\n  uint sign_bit;\n  uint reversed_shift;\n  bool shift_negative;\n  bool shift_zero;\n  bool carry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  sign_bit = input & 0x80000000;\n  absolute_value = input;\n  if ((int)sign_bit < 0) {\n    absolute_value = -input;\n  }\n  upper_bits = 0;\n  leading_zeros = leading_zeros_count(absolute_value);\n  shifted_length = leading_zeros + 0x15;\n  carry = subtract_borrow(shifted_length,0x20);\n  shift_amount = leading_zeros - 0xb;\n  shift_negative = (int)shift_amount < 0;\n  shift_zero = shift_amount == 0;\n  if (shifted_length < 0x20) {\n    carry = subtract_carry(shift_amount,0xc);\n    shift_negative = false;\n    shift_zero = leading_zeros + 1 == 0;\n    shift_amount = shifted_length;\n    if (!shift_zero && carry == false) {\n      upper_bits = absolute_value << shifted_length;\n      absolute_value = absolute_value >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (shift_zero || shift_negative != carry) {\n    reversed_shift = 0x20 - shift_amount;\n  }\n  absolute_value = absolute_value << (shift_amount & 0xff);\n  if (shift_zero || shift_negative != carry) {\n    absolute_value = absolute_value | 0U >> (reversed_shift & 0xff);\n  }\n  if (shift_zero || shift_negative != carry) {\n    upper_bits = 0 << (shift_amount & 0xff);\n  }\nLAB_08008458:\n  if (shifted_length < 0x433) {\n    return CONCAT44(absolute_value + (0x432 - shifted_length) * 0x100000 | sign_bit,upper_bits);\n  }\n  shift_amount = ~(0x432 - shifted_length);\n  if (0x1e < (int)shift_amount) {\n    return CONCAT44(input,absolute_value >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != subtract_carry(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(sign_bit | absolute_value >> (shift_amount & 0xff),\n                    upper_bits >> (shift_amount & 0xff) | absolute_value << (0x20 - shift_amount & 0xff));\n  }\n  return CONCAT44(input,upper_bits >> (0x20 - (0xcU - leading_zeros) & 0xff) | absolute_value << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800856c": "shift_and_merge_0800856c",
                "param_1": "input",
                "uVar1": "upper_bits",
                "uVar2": "absolute_value",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeros",
                "uVar5": "shifted_length",
                "uVar6": "sign_bit",
                "in_r12": "reversed_shift",
                "bVar7": "shift_negative",
                "bVar8": "shift_zero",
                "bVar9": "carry",
                "LZCOUNT": "leading_zeros_count",
                "SBORROW4": "subtract_borrow",
                "SCARRY4": "subtract_carry"
            },
            "calling": [
                "FUN_08002c18",
                "FUN_0800a5a0",
                "FUN_08009d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008590": {
            "entrypoint": "0x08008590",
            "current_name": "decode_and_transform_data_08008590",
            "code": "\nulonglong decodeAndTransformData_08008590(uint inputValue,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  uint msb;\n  uint temp1;\n  uint result;\n  uint shiftedValue;\n  uint shiftedInput;\n  int bitCount;\n  uint shiftCount;\n  uint constantValue;\n  bool cond1;\n  bool cond2;\n  bool cond3;\n  \n  shiftedInput = inputValue << 1;\n  cond2 = shiftedInput == 0;\n  msb = (uint)((inputValue & 0x80000000) != 0) << 0x1f;\n  shiftedValue = (uint)((int)shiftedInput >> 3) >> 1;\n  result = msb | shiftedValue;\n  inputValue = inputValue << 0x1d;\n  if (!cond2) {\n    param4 = shiftedInput & 0xff000000;\n    cond2 = param4 == 0;\n  }\n  if (!cond2) {\n    cond2 = param4 == 0xff000000;\n  }\n  if (!cond2) {\n    return CONCAT44(result,inputValue) ^ 0x3800000000000000;\n  }\n  if ((shiftedInput & 0xffffff) == 0) {\n    return CONCAT44(result,inputValue);\n  }\n  if (param4 == 0xff000000) {\n    return CONCAT44(result,inputValue) | 0x8000000000000;\n  }\n  temp1 = inputValue;\n  shiftedInput = shiftedValue;\n  if (shiftedValue == 0) {\n    temp1 = 0;\n    shiftedInput = inputValue;\n  }\n  bitCount = LZCOUNT(shiftedInput);\n  if (shiftedValue == 0) {\n    bitCount = bitCount + 0x20;\n  }\n  shiftCount = bitCount - 0xb;\n  cond3 = SBORROW4(shiftCount,0x20);\n  shiftedValue = bitCount - 0x2b;\n  cond2 = (int)shiftedValue < 0;\n  cond1 = shiftedValue == 0;\n  if ((int)shiftCount < 0x20) {\n    cond3 = SCARRY4(shiftedValue,0xc);\n    bitCount = bitCount + -0x1f;\n    cond2 = bitCount < 0;\n    cond1 = bitCount == 0;\n    shiftedValue = shiftCount;\n    if (!cond1 && cond2 == cond3) {\n      temp1 = shiftedInput << (shiftCount & 0xff);\n      shiftedInput = shiftedInput >> (0xcU - bitCount & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (cond1 || cond2 != cond3) {\n    constantValue = 0x20 - shiftedValue;\n  }\n  shiftedInput = shiftedInput << (shiftedValue & 0xff);\n  if (cond1 || cond2 != cond3) {\n    shiftedInput = shiftedInput | temp1 >> (constantValue & 0xff);\n  }\n  if (cond1 || cond2 != cond3) {\n    temp1 = temp1 << (shiftedValue & 0xff);\n  }\nLAB_08008458:\n  if ((int)shiftCount < 0x381) {\n    return CONCAT44(shiftedInput + (0x380 - shiftCount) * 0x100000 | msb,temp1);\n  }\n  shiftedValue = ~(0x380 - shiftCount);\n  if (0x1e < (int)shiftedValue) {\n    return CONCAT44(result,shiftedInput >> (shiftedValue - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  bitCount = shiftedValue - 0x13;\n  if (bitCount == 0 || bitCount < 0 != SCARRY4(shiftedValue - 0x1f,0xc)) {\n    shiftedValue = shiftedValue + 1;\n    return CONCAT44(msb | shiftedInput >> (shiftedValue & 0xff),\n                    temp1 >> (shiftedValue & 0xff) | shiftedInput << (0x20 - shiftedValue & 0xff));\n  }\n  return CONCAT44(result,temp1 >> (0x20 - (0xcU - bitCount) & 0xff) | shiftedInput << (0xcU - bitCount & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008590": "decode_and_transform_data_08008590",
                "param_1": "inputValue",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "msb",
                "uVar2": "temp1",
                "uVar3": "result",
                "uVar4": "shiftedValue",
                "uVar5": "shiftedInput",
                "iVar6": "bitCount",
                "uVar7": "shiftCount",
                "in_r12": "constantValue",
                "bVar8": "cond1",
                "bVar9": "cond2",
                "bVar10": "cond3"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08004940",
                "FUN_08004e30",
                "FUN_080044e8",
                "FUN_08003b98",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_0800056c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008640": {
            "entrypoint": "0x08008640",
            "current_name": "calculate_multiplication_and_addition_08008640",
            "code": "\nulonglong calculateMultiplicationAndAddition_08008640(undefined4 firstParameter,uint secondParameter,uint thirdParameter,uint fourthParameter)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong combinedParamsResult;\n  \n  combinedParamsResult = CONCAT44(secondParameter,firstParameter);\n  temp6 = 0x7ff;\n  temp2 = secondParameter >> 0x14 & 0x7ff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    temp5 = fourthParameter >> 0x14 & 0x7ff;\n    flag1 = temp5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp5 == 0x7ff;\n  }\n  if (flag1) {\n    combinedParamsResult = bitwise_operation_0800881c();\n  }\n  temp1 = (uint)(combinedParamsResult >> 0x20);\n  temp3 = temp2 + temp5;\n  temp2 = temp1 ^ fourthParameter;\n  temp1 = temp1 & ~(temp6 << 0x15);\n  fourthParameter = fourthParameter & ~(temp6 << 0x15);\n  flag1 = ((uint)combinedParamsResult | temp1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (thirdParameter | fourthParameter << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  fourthParameter = fourthParameter | 0x100000;\n  if (flag1) {\n    thirdParameter = (uint)combinedParamsResult | thirdParameter;\n    fourthParameter = (temp2 & 0x80000000 | temp1) ^ fourthParameter;\n    temp2 = temp6 >> 1;\n    flag3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    flag1 = temp4 == 0;\n    temp1 = temp4;\n    if (!flag1 && (int)temp2 <= temp3) {\n      flag3 = SBORROW4(temp6,temp4);\n      temp1 = temp6 - temp4;\n      flag1 = temp6 == temp4;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      fourthParameter = fourthParameter | temp4 * 0x100000;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      return CONCAT44(fourthParameter,thirdParameter);\n    }\n    fourthParameter = fourthParameter | 0x100000;\n    temp6 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    flag1 = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    result1 = (combinedParamsResult & 0xffffffff) * (ulonglong)thirdParameter;\n    combinedParamsResult = (combinedParamsResult & 0xffffffff) * (ulonglong)fourthParameter +\n             (ulonglong)temp1 * (ulonglong)thirdParameter + (result1 >> 0x20);\n    temp7 = (uint)combinedParamsResult;\n    result2 = (ulonglong)temp1 * (ulonglong)fourthParameter + (combinedParamsResult >> 0x20);\n    temp6 = (uint)result2;\n    temp1 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      temp7 = temp7 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      flag1 = (temp7 & 0x80000000) != 0;\n      temp7 = temp7 << 1;\n      result2 = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp6,temp6) || CARRY4(temp6 * 2,(uint)flag1)),\n                       temp6 * 2 + (uint)flag1);\n    }\n    fourthParameter = temp2 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    thirdParameter = (uint)result2 << 0xb | temp7 >> 0x15;\n    temp6 = temp7 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    flag1 = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      flag1 = temp1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp6;\n      if (temp6 == 0x80000000) {\n        flag1 = (temp7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(fourthParameter + temp4 * 0x100000 + (uint)CARRY4(thirdParameter,(uint)flag1),thirdParameter + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(fourthParameter & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  flag1 = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    thirdParameter = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    fourthParameter = fourthParameter & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(fourthParameter,thirdParameter);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = thirdParameter >> (temp1 & 0xff) | fourthParameter << (0x20 - temp1 & 0xff);\n    temp2 = (fourthParameter >> (temp1 & 0xff) & ~((fourthParameter & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp6 | thirdParameter << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(fourthParameter,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    temp7 = thirdParameter << (temp4 + 0x20 & 0xff);\n    temp1 = thirdParameter >> (temp2 & 0xff) | fourthParameter << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp7 >> 0x1f);\n    if ((temp6 | temp7 << 1) == 0) {\n      temp4 = temp4 & ~(temp7 >> 0x1f);\n    }\n    return CONCAT44((fourthParameter & 0x80000000) +\n                    ((fourthParameter & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp7 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = thirdParameter << (temp2 & 0xff);\n  temp2 = thirdParameter >> (0x20 - temp2 & 0xff) | fourthParameter << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp6 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((fourthParameter & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "renaming": {
                "FUN_08008640": "calculate_multiplication_and_addition_08008640",
                "param_1": "firstParameter",
                "param_2": "secondParameter",
                "param_3": "thirdParameter",
                "param_4": "fourthParameter",
                "uVar1": "result1",
                "lVar2": "result2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "iVar5": "temp3",
                "uVar6": "temp4",
                "unaff_r5": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "uVar12": "combinedParamsResult"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_080044e8",
                "FUN_0800b2e8",
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_0800056c",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [
                "FUN_0800881c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800881c": {
            "entrypoint": "0x0800881c",
            "current_name": "bitwise_operation_0800881c",
            "code": "\nulonglong bitwiseOperation_0800881c(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool isZero;\n  \n  bit3 = bit5 & value4 >> 0x14;\n  if (bit2 != bit5 && bit3 != bit5) {\n    isZero = (value1 | value2 << 1) == 0;\n    if (!isZero) {\n      isZero = (value3 | value4 << 1) == 0;\n    }\n    if (isZero) {\n      return (ulonglong)((value2 ^ value4) & 0x80000000) << 0x20;\n    }\n    if (bit2 == 0) {\n      bit4 = value2 & 0x80000000;\n      do {\n        bit1 = value1 & 0x80000000;\n        value1 = value1 << 1;\n        value2 = value2 * 2 + (uint)(bit1 != 0);\n      } while ((value2 & 0x100000) == 0);\n      value2 = value2 | bit4;\n      if (bit3 != 0) {\n        return CONCAT44(value2,value1);\n      }\n    }\n    do {\n      bit3 = value3 & 0x80000000;\n      value3 = value3 << 1;\n      value4 = value4 * 2 + (uint)(bit3 != 0);\n    } while ((value4 & 0x100000) == 0);\n    return CONCAT44(value2,value1);\n  }\n  isZero = (value1 | value2 << 1) == 0;\n  if (isZero) {\n    value2 = value4;\n    value1 = value3;\n  }\n  if (!isZero) {\n    isZero = (value3 | value4 << 1) == 0;\n  }\n  bit4 = value2;\n  if (((!isZero) && ((bit2 != bit5 || ((value1 | value2 << 0xc) == 0)))) &&\n     ((bit3 != bit5 || (value1 = value3, bit4 = value4, (value3 | value4 << 0xc) == 0)))) {\n    return (ulonglong)((value2 ^ value4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit4,value1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800881c": "bitwise_operation_0800881c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "in_r12": "bit5",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_08008640"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008894": {
            "entrypoint": "0x08008894",
            "current_name": "calculate_floating_point_08008894",
            "code": "\nulonglong calculateFloatingPoint_08008894(undefined4 fractional_portion,uint exponent_and_fraction,uint float1,uint float2)\n\n{\n  uint u1;\n  uint u2;\n  uint u3;\n  uint u4;\n  uint u5;\n  uint u6;\n  uint u7;\n  int diff;\n  uint value1;\n  uint value2;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint check;\n  bool isEqual;\n  bool isZero;\n  bool isNegative;\n  undefined8 result;\n  \n  result = CONCAT44(exponent_and_fraction,fractional_portion);\n  check = 0x7ff;\n  u7 = exponent_and_fraction >> 0x14 & 0x7ff;\n  isEqual = u7 == 0;\n  if (!isEqual) {\n    value2 = float2 >> 0x14 & 0x7ff;\n    isEqual = value2 == 0;\n  }\n  if (!isEqual) {\n    isEqual = u7 == 0x7ff;\n  }\n  if (!isEqual) {\n    isEqual = value2 == 0x7ff;\n  }\n  if (isEqual) {\n    result = decompiled_function_08008a02();\n  }\n  value1 = (uint)((ulonglong)result >> 0x20);\n  temp2 = (uint)result;\n  diff = u7 - value2;\n  if ((float1 | float2 << 0xc) == 0) {\n    u7 = (value1 ^ float2) & 0x80000000 | value1 & 0xfffff;\n    isNegative = SCARRY4(diff,check >> 1);\n    value1 = diff + (check >> 1);\n    isEqual = (int)value1 < 0;\n    isZero = value1 == 0;\n    if (!isZero && isEqual == isNegative) {\n      isNegative = SBORROW4(check,value1);\n      isEqual = (int)(check - value1) < 0;\n      isZero = check == value1;\n    }\n    if (!isZero && isEqual == isNegative) {\n      u7 = u7 | value1 * 0x100000;\n    }\n    if (!isZero && isEqual == isNegative) {\n      return CONCAT44(u7,temp2);\n    }\n    u7 = u7 | 0x100000;\n    check = 0;\n    isZero = SBORROW4(value1,1);\n    value1 = value1 - 1;\n    isEqual = value1 == 0;\n    u3 = value1;\n  }\n  else {\n    u3 = (float2 << 0xc) >> 4 | 0x10000000 | float1 >> 0x18;\n    check = float1 << 8;\n    temp1 = (value1 << 0xc) >> 4 | 0x10000000 | temp2 >> 0x18;\n    temp2 = temp2 * 0x100;\n    u7 = (value1 ^ float2) & 0x80000000;\n    isEqual = u3 <= temp1;\n    if (temp1 == u3) {\n      isEqual = check <= temp2;\n    }\n    diff = diff + (uint)isEqual;\n    value1 = diff + 0x3fd;\n    if (isEqual == false) {\n      u3 = u3 >> 1;\n      check = (uint)((float1 >> 0x18 & 1) != 0) << 0x1f | check >> 1;\n    }\n    temp3 = temp2 - check;\n    temp1 = (temp1 - u3) - (uint)(temp2 < check);\n    u4 = u3 >> 1;\n    u1 = (uint)((u3 & 1) != 0) << 0x1f | check >> 1;\n    temp2 = 0x100000;\n    u3 = 0x80000;\n    while( true ) {\n      isEqual = u1 <= temp3;\n      if (u4 < temp1 || temp1 - u4 < (uint)isEqual) {\n        temp3 = temp3 - u1;\n        temp2 = temp2 | u3;\n        temp1 = (temp1 - u4) - (uint)!isEqual;\n      }\n      u5 = u4 >> 1;\n      u1 = (uint)((u4 & 1) != 0) << 0x1f | u1 >> 1;\n      isZero = u1 <= temp3;\n      isEqual = temp1 - u5 < (uint)isZero;\n      check = temp1;\n      if (u5 < temp1 || isEqual) {\n        temp3 = temp3 - u1;\n        check = (temp1 - u5) - (uint)!isZero;\n      }\n      if (u5 < temp1 || isEqual) {\n        temp2 = temp2 | u3 >> 1;\n      }\n      temp1 = u4 >> 2;\n      u2 = (uint)((u5 & 1) != 0) << 0x1f | u1 >> 1;\n      isZero = u2 <= temp3;\n      isEqual = check - temp1 < (uint)isZero;\n      u5 = check;\n      if (temp1 < check || isEqual) {\n        temp3 = temp3 - u2;\n        u5 = (check - temp1) - (uint)!isZero;\n      }\n      if (temp1 < check || isEqual) {\n        temp2 = temp2 | u3 >> 2;\n      }\n      u6 = u4 >> 3;\n      u1 = (uint)((temp1 & 1) != 0) << 0x1f | u2 >> 1;\n      isZero = u1 <= temp3;\n      isEqual = u5 - u6 < (uint)isZero;\n      temp1 = u5;\n      if (u6 < u5 || isEqual) {\n        temp3 = temp3 - u1;\n        temp1 = (u5 - u6) - (uint)!isZero;\n      }\n      if (u6 < u5 || isEqual) {\n        temp2 = temp2 | u3 >> 3;\n      }\n      check = temp1 | temp3;\n      if (check == 0) break;\n      temp1 = temp1 << 4 | temp3 >> 0x1c;\n      temp3 = temp3 << 4;\n      u4 = u4 & 0xfffffff8 | u1 >> 0x1d;\n      u1 = (u2 >> 1) << 3;\n      u3 = u3 >> 4;\n      if (u3 == 0) {\n        u6 = u4;\n        if ((u7 & 0x100000) != 0) goto LAB_080089b2;\n        u7 = u7 | temp2;\n        temp2 = 0;\n        u3 = 0x80000000;\n      }\n    }\n    if ((u7 & 0x100000) == 0) {\n      u7 = u7 | temp2;\n      temp2 = 0;\n    }\nLAB_080089b2:\n    isNegative = 0xfc < value1;\n    isZero = SBORROW4(value1,0xfd);\n    u4 = diff + 0x300;\n    isEqual = u4 == 0;\n    u3 = u4;\n    if (isNegative && !isEqual) {\n      isNegative = 0x6ff < u4;\n      isZero = SBORROW4(u4,0x700);\n      u3 = diff - 0x400;\n      isEqual = u4 == 0x700;\n    }\n    if (!isNegative || isEqual) {\n      isEqual = u6 <= temp1;\n      if (temp1 == u6) {\n        isEqual = u1 <= temp3;\n      }\n      if (temp1 == u6 && temp3 == u1) {\n        isEqual = (temp2 & 1) != 0;\n      }\n      return CONCAT44(u7 + value1 * 0x100000 + (uint)CARRY4(temp2,(uint)isEqual),temp2 + isEqual);\n    }\n  }\n  if (!isEqual && (int)u3 < 0 == isZero) {\n    return (ulonglong)(u7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  isNegative = SCARRY4(value1,0x36);\n  isEqual = (int)(value1 + 0x36) < 0;\n  isZero = value1 == 0xffffffca;\n  if (isZero || isEqual != isNegative) {\n    temp2 = 0;\n  }\n  if (isZero || isEqual != isNegative) {\n    u7 = u7 & 0x80000000;\n  }\n  if (isZero || isEqual != isNegative) {\n    return CONCAT44(u7,temp2);\n  }\n  u3 = -value1;\n  temp1 = u3 - 0x20;\n  if (0x1f < (int)u3) {\n    u3 = temp2 >> (temp1 & 0xff) | u7 << (0x20 - temp1 & 0xff);\n    value1 = (u7 >> (temp1 & 0xff) & ~((u7 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)u3 >> 0x1f);\n    if ((check | temp2 << (0x20 - temp1 & 0xff) | u3 << 1) == 0) {\n      value1 = value1 & ~(u3 >> 0x1f);\n    }\n    return CONCAT44(u7,value1) & 0x80000000ffffffff;\n  }\n  diff = u3 - 0x14;\n  if (diff != 0 && diff < 0 == SCARRY4(temp1,0xc)) {\n    value1 = 0xc - diff;\n    u3 = temp2 << (value1 & 0xff);\n    temp2 = temp2 >> (0x20 - value1 & 0xff) | u7 << (value1 & 0xff);\n    value1 = temp2 + -((int)u3 >> 0x1f);\n    if ((check | u3 << 1) == 0) {\n      value1 = value1 & ~(u3 >> 0x1f);\n    }\n    return CONCAT44((u7 & 0x80000000) + (uint)CARRY4(temp2,-((int)u3 >> 0x1f)),value1);\n  }\n  temp1 = temp2 << (value1 + 0x20 & 0xff);\n  temp2 = temp2 >> (u3 & 0xff) | u7 << (value1 + 0x20 & 0xff);\n  value1 = temp2 + -((int)temp1 >> 0x1f);\n  if ((check | temp1 << 1) == 0) {\n    value1 = value1 & ~(temp1 >> 0x1f);\n  }\n  return CONCAT44((u7 & 0x80000000) +\n                  ((u7 & 0x7fffffff) >> (u3 & 0xff)) +\n                  (uint)CARRY4(temp2,-((int)temp1 >> 0x1f)),value1);\n}\n\n",
            "renaming": {
                "FUN_08008894": "calculate_floating_point_08008894",
                "param_1": "fractional_portion",
                "param_2": "exponent_and_fraction",
                "param_3": "float1",
                "param_4": "float2",
                "uVar1": "u1",
                "uVar2": "u2",
                "uVar3": "u3",
                "uVar4": "u4",
                "uVar5": "u5",
                "uVar6": "u6",
                "uVar7": "u7",
                "iVar8": "diff",
                "uVar9": "value1",
                "unaff_r5": "value2",
                "uVar10": "temp1",
                "uVar11": "temp2",
                "uVar12": "temp3",
                "uVar13": "check",
                "bVar14": "isEqual",
                "bVar15": "isZero",
                "bVar16": "isNegative",
                "uVar17": "result"
            },
            "calling": [
                "FUN_08009990",
                "FUN_08003004",
                "FUN_0800af78",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_080098d0",
                "FUN_0800a1bc"
            ],
            "called": [
                "FUN_08008a02"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a02": {
            "entrypoint": "0x08008a02",
            "current_name": "decompiled_function_08008a02",
            "code": "\nulonglong decompiled_function_08008a02(uint input_param1,uint input_param2,uint input_param3,uint input_param4)\n\n{\n  uint temp_var1;\n  uint temp_var2;\n  uint temp_var3;\n  uint temp_var4;\n  uint temp_var5;\n  bool temp_var6;\n  \n  temp_var3 = temp_var5 & input_param4 >> 0x14;\n  temp_var4 = input_param2;\n  if (temp_var2 != temp_var5 || temp_var3 != temp_var5) {\n    if (temp_var2 == temp_var5) {\n      if (((input_param1 | input_param2 << 0xc) == 0) && (input_param1 = input_param3, temp_var4 = input_param4, temp_var3 != temp_var5)\n         ) {\nLAB_08008874:\n        return (ulonglong)((input_param2 ^ input_param4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (temp_var3 == temp_var5) {\n      input_param1 = input_param3;\n      temp_var4 = input_param4;\n      if ((input_param3 | input_param4 << 0xc) == 0) {\nLAB_08008838:\n        return (ulonglong)((input_param2 ^ input_param4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      temp_var6 = (input_param1 | input_param2 << 1) == 0;\n      if (!temp_var6) {\n        temp_var6 = (input_param3 | input_param4 << 1) == 0;\n      }\n      if (!temp_var6) {\n        if (temp_var2 == 0) {\n          temp_var4 = input_param2 & 0x80000000;\n          do {\n            temp_var1 = input_param1 & 0x80000000;\n            input_param1 = input_param1 << 1;\n            input_param2 = input_param2 * 2 + (uint)(temp_var1 != 0);\n          } while ((input_param2 & 0x100000) == 0);\n          input_param2 = input_param2 | temp_var4;\n          if (temp_var3 != 0) {\n            return CONCAT44(input_param2,input_param1);\n          }\n        }\n        do {\n          temp_var4 = input_param3 & 0x80000000;\n          input_param3 = input_param3 << 1;\n          input_param4 = input_param4 * 2 + (uint)(temp_var4 != 0);\n        } while ((input_param4 & 0x100000) == 0);\n        return CONCAT44(input_param2,input_param1);\n      }\n      if ((input_param1 | input_param2 << 1) != 0) goto LAB_08008874;\n      if ((input_param3 | input_param4 << 1) != 0) goto LAB_08008838;\n    }\n  }\n  return CONCAT44(temp_var4,input_param1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08008a02": "decompiled_function_08008a02",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "uVar1": "temp_var1",
                "unaff_r4": "temp_var2",
                "uVar2": "temp_var3",
                "uVar3": "temp_var4",
                "in_r12": "temp_var5",
                "bVar4": "temp_var6"
            },
            "calling": [
                "FUN_08008894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a74": {
            "entrypoint": "0x08008a74",
            "current_name": "check_parameters_08008a74",
            "code": "\nuint check_parameters_08008a74(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint result;\n  bool isZero;\n  bool isNegative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (value1 | value2 << 1) == 0;\n  if (isZero) {\n    isZero = (value3 | value4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = value2 == value4;\n  }\n  if (isZero) {\n    isZero = value1 == value3;\n  }\n  if (!isZero) {\n    result = value2 ^ value4;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = value2 == value4;\n    }\n    isNegative = -1 < (int)result && value4 <= value2;\n    if (isZero) {\n      isNegative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!isNegative) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008a74": "check_parameters_08008a74",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isNegative"
            },
            "calling": [
                "FUN_08008b00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "verify_and_return_parameter_08008af0",
            "code": "\nvoid verify_and_return_parameter_08008af0(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  verify_and_return_parameter_08008af0_08008b00(param_3,param_4,param_1,param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "verify_and_return_parameter_08008af0"
            },
            "calling": [
                "FUN_08008b60",
                "FUN_08008b4c"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b00": {
            "entrypoint": "0x08008b00",
            "current_name": "verify_and_return_parameter_08008b00",
            "code": "\nundefined4 verify_and_return_parameter_08008b00(undefined4 input_parameter)\n\n{\n  verify_input_parameters();\n  return input_parameter;\n}\n\n",
            "renaming": {
                "FUN_08008b00": "verify_and_return_parameter_08008b00",
                "param_1": "input_parameter",
                "check_parameters_08008a74": "verify_input_parameters"
            },
            "calling": [
                "FUN_08008b24",
                "FUN_08008b10",
                "FUN_08008af0"
            ],
            "called": [
                "FUN_08008a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b10": {
            "entrypoint": "0x08008b10",
            "current_name": "check_parameter_and_return_08008b10",
            "code": "\nbool check_parameter_and_return_08008b10(void)\n\n{\n  char is_not_null;\n  \n  verify_and_return_parameter_08008b00();\n  return is_not_null != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b10": "check_parameter_and_return_08008b10",
                "in_ZR": "is_not_null"
            },
            "calling": [
                "FUN_0800a5a0",
                "FUN_08009d78"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b24": {
            "entrypoint": "0x08008b24",
            "current_name": "is_null_terminator_08008b24",
            "code": "\nbool is_null_terminator_08008b24(void)\n\n{\n  char input_character;\n  \n  verify_and_return_parameter_08008b00();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b24": "is_null_terminator_08008b24",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08009b24",
                "FUN_080098d0"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b4c": {
            "entrypoint": "0x08008b4c",
            "current_name": "check_verification_status_08008b4c",
            "code": "\nbool check_verification_status_08008b4c(void)\n\n{\n  undefined parameter_ZR;\n  undefined parameter_CY;\n  \n  verify_and_return_parameter_08008af0();\n  return !(bool)parameter_CY || (bool)parameter_ZR;\n}\n\n",
            "renaming": {
                "FUN_08008b4c": "check_verification_status_08008b4c",
                "in_ZR": "parameter_ZR",
                "in_CY": "parameter_CY"
            },
            "calling": [
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b60": {
            "entrypoint": "0x08008b60",
            "current_name": "check_null_termination_08008b60",
            "code": "\nbool check_null_termination_08008b60(void)\n\n{\n  char input_character;\n  \n  verify_and_return_parameter_08008af0();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b60": "check_null_termination_08008b60",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_080094c0",
                "FUN_08003004",
                "FUN_0800af78",
                "FUN_08009318"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b74": {
            "entrypoint": "0x08008b74",
            "current_name": "check_params_08008b74",
            "code": "\nundefined4 checkParams_08008b74(uint input1,int input2,uint input3,int input4)\n\n{\n  if ((((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0)) &&\n     (((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008b74": "check_params_08008b74",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "calling": [
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ba0": {
            "entrypoint": "0x08008ba0",
            "current_name": "calculate_value_08008ba0",
            "code": "\nuint calculate_value_08008ba0(uint input_value1,uint input_value2)\n\n{\n  uint shifted_value;\n  int computed_value;\n  uint modified_value;\n  \n  computed_value = input_value2 * 2 + 0x200000;\n  if (input_value2 * 2 < 0xffe00000) {\n    if (-1 < computed_value) {\n      return 0;\n    }\n    shifted_value = computed_value >> 0x15;\n    modified_value = -shifted_value - 0x3e1;\n    if (shifted_value < 0xfffffc20 && modified_value != 0) {\n      shifted_value = (input_value2 << 0xb | 0x80000000 | input_value1 >> 0x15) >> (modified_value & 0xff);\n      if ((input_value2 & 0x80000000) != 0) {\n        shifted_value = -shifted_value;\n      }\n      return shifted_value;\n    }\n  }\n  else if ((input_value1 | input_value2 << 0xc) != 0) {\n    return 0;\n  }\n  input_value2 = input_value2 & 0x80000000;\n  if (input_value2 == 0) {\n    input_value2 = 0x7fffffff;\n  }\n  return input_value2;\n}\n\n",
            "renaming": {
                "FUN_08008ba0": "calculate_value_08008ba0",
                "param_1": "input_value1",
                "param_2": "input_value2",
                "uVar1": "shifted_value",
                "iVar2": "computed_value",
                "uVar3": "modified_value"
            },
            "calling": [
                "FUN_080095b8",
                "FUN_08003004",
                "FUN_0800adf0",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_0800a348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf0": {
            "entrypoint": "0x08008bf0",
            "current_name": "calculate_shifted_value_08008bf0",
            "code": "\nuint calculateShiftedValue_08008bf0(uint inputValue,uint shiftAmount)\n\n{\n  int multipliedValue;\n  uint shiftCount;\n  \n  if ((shiftAmount & 0x80000000) != 0) {\n    return 0;\n  }\n  multipliedValue = shiftAmount * 2 + 0x200000;\n  if (shiftAmount * 2 < 0xffe00000) {\n    if (-1 < multipliedValue) {\n      return 0;\n    }\n    shiftCount = -(multipliedValue >> 0x15) - 0x3e1;\n    if (-1 < (int)shiftCount) {\n      return (shiftAmount << 0xb | 0x80000000 | inputValue >> 0x15) >> (shiftCount & 0xff);\n    }\n  }\n  else if ((inputValue | shiftAmount << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008bf0": "calculate_shifted_value_08008bf0",
                "param_1": "inputValue",
                "param_2": "shiftAmount",
                "iVar1": "multipliedValue",
                "uVar2": "shiftCount"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08003b98",
                "FUN_08002408",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08002c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c30": {
            "entrypoint": "0x08008c30",
            "current_name": "reversed_binary_operation_08008c30",
            "code": "\nuint reversed_binary_operation_08008c30(uint input_value_1,uint input_value_2)\n\n{\n  uint result;\n  uint twice_input_value_2;\n  uint modified_input_value_2;\n  uint tmp_var;\n  bool check_var1;\n  bool check_var2;\n  \n  twice_input_value_2 = input_value_2 * 2;\n  check_var2 = twice_input_value_2 < 0x70000000;\n  modified_input_value_2 = twice_input_value_2 + 0x90000000;\n  result = modified_input_value_2;\n  if (!check_var2) {\n    tmp_var = twice_input_value_2 + 0x8fe00000;\n    result = tmp_var;\n  }\n  check_var1 = result == 0;\n  if (!check_var2 && modified_input_value_2 >= 0x200000) {\n    check_var1 = tmp_var == 0x1fc00000;\n  }\n  if (((check_var2 || modified_input_value_2 < 0x200000) || 0x1fc00000 < tmp_var) || check_var1) {\n    if ((input_value_2 & 0x40000000) != 0) {\n      if (((int)twice_input_value_2 >> 0x15 == -1) && ((input_value_1 | input_value_2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input_value_2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(twice_input_value_2 + 0x92e00000) < 0 != SCARRY4(modified_input_value_2,0x2e00000)) {\n      return input_value_2 & 0x80000000;\n    }\n    twice_input_value_2 = 0x18 - (twice_input_value_2 + 0x92e00000 >> 0x15);\n    result = input_value_1 >> (twice_input_value_2 & 0xff);\n    if (input_value_1 << (0x20 - twice_input_value_2 & 0xff) != 0) {\n      result = result | 1;\n    }\n    modified_input_value_2 = input_value_2 & 0x1fffff | 0x100000;\n    input_value_1 = result | modified_input_value_2 << (0x20 - twice_input_value_2 & 0xff);\n    modified_input_value_2 = (modified_input_value_2 >> (twice_input_value_2 & 0xff)) << 1;\n  }\n  result = (input_value_2 & 0x80000000 | input_value_1 >> 0x1d) + modified_input_value_2 * 4 + (uint)(0x7fffffff < input_value_1 * 8);\n  if (input_value_1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008c30": "reversed_binary_operation_08008c30",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "uVar1": "result",
                "uVar2": "twice_input_value_2",
                "uVar3": "modified_input_value_2",
                "in_r12": "tmp_var",
                "bVar4": "check_var1",
                "bVar5": "check_var2"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_0800056c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cd8": {
            "entrypoint": "0x08008cd8",
            "current_name": "calculate_float_08008cd8",
            "code": "\nuint calculate_float_08008cd8(uint inputFloat,uint inputInt,undefined4 unknown,uint result)\n\n{\n  int shiftRight;\n  int shiftRight2;\n  uint maskedInputInt;\n  uint maskedInputFloat;\n  uint shiftedInputFloat;\n  uint adjustedShiftRight;\n  uint difference;\n  bool isEqual;\n  \n  maskedInputInt = inputInt ^ 0x80000000;\n  shiftedInputFloat = inputFloat << 1;\n  isEqual = shiftedInputFloat == 0;\n  if (!isEqual) {\n    result = inputInt << 1;\n    isEqual = result == 0;\n  }\n  if (!isEqual) {\n    isEqual = shiftedInputFloat == result;\n  }\n  shiftRight = (int)shiftedInputFloat >> 0x18;\n  if (!isEqual) {\n    isEqual = shiftRight == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)result >> 0x18 == -1;\n  }\n  if (isEqual) {\n    shiftRight2 = (int)(inputInt << 1) >> 0x18;\n    if (shiftRight == -1 || shiftRight2 == -1) {\n      shiftedInputFloat = maskedInputInt;\n      if (shiftRight == -1) {\n        shiftedInputFloat = inputFloat;\n      }\n      if (shiftRight != -1 || shiftRight2 != -1) {\n        maskedInputInt = shiftedInputFloat;\n      }\n      isEqual = (shiftedInputFloat & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (maskedInputInt & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = shiftedInputFloat == maskedInputInt;\n      }\n      if (!isEqual) {\n        shiftedInputFloat = shiftedInputFloat | 0x400000;\n      }\n      return shiftedInputFloat;\n    }\n    if (((inputFloat ^ maskedInputInt) & 0x7fffffff) != 0) {\n      if (shiftedInputFloat == 0) {\n        inputFloat = maskedInputInt;\n      }\n      return inputFloat;\n    }\n    if (inputFloat != maskedInputInt) {\n      return 0;\n    }\n    if ((shiftedInputFloat & 0xff000000) == 0) {\n      maskedInputInt = inputFloat << 1;\n      if ((inputFloat & 0x80000000) != 0) {\n        maskedInputInt = maskedInputInt | 0x80000000;\n      }\n      return maskedInputInt;\n    }\n    if (shiftedInputFloat < 0xfe000000) {\n      return inputFloat + 0x800000;\n    }\n    inputFloat = inputFloat & 0x80000000;\nLAB_08008e12:\n    return inputFloat | 0x7f800000;\n  }\n  shiftedInputFloat = shiftedInputFloat >> 0x18;\n  result = result >> 0x18;\n  difference = result - shiftedInputFloat;\n  isEqual = difference != 0;\n  adjustedShiftRight = shiftedInputFloat;\n  if (isEqual && shiftedInputFloat <= result) {\n    adjustedShiftRight = shiftedInputFloat + difference;\n  }\n  if (isEqual && shiftedInputFloat <= result) {\n    maskedInputInt = maskedInputInt ^ inputFloat;\n  }\n  if (isEqual && shiftedInputFloat <= result) {\n    inputFloat = inputFloat ^ maskedInputInt;\n  }\n  if (isEqual && shiftedInputFloat <= result) {\n    maskedInputInt = maskedInputInt ^ inputFloat;\n  }\n  if (result < shiftedInputFloat) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return inputFloat;\n  }\n  shiftedInputFloat = inputFloat & 0xffffff | 0x800000;\n  if ((inputFloat & 0x80000000) != 0) {\n    shiftedInputFloat = -shiftedInputFloat;\n  }\n  maskedInputFloat = maskedInputInt & 0xffffff | 0x800000;\n  if ((maskedInputInt & 0x80000000) != 0) {\n    maskedInputFloat = -maskedInputFloat;\n  }\n  if (adjustedShiftRight == difference) {\n    maskedInputFloat = maskedInputFloat ^ 0x800000;\n    if (adjustedShiftRight == 0) {\n      shiftedInputFloat = shiftedInputFloat ^ 0x800000;\n      adjustedShiftRight = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shiftedInputFloat = shiftedInputFloat + ((int)maskedInputFloat >> (difference & 0xff));\n  maskedInputFloat = maskedInputFloat << (0x20 - difference & 0xff);\n  inputFloat = shiftedInputFloat & 0x80000000;\n  if ((int)shiftedInputFloat < 0) {\n    isEqual = maskedInputFloat != 0;\n    maskedInputFloat = -maskedInputFloat;\n    shiftedInputFloat = -shiftedInputFloat - (uint)isEqual;\n  }\n  if (shiftedInputFloat < 0x800000) {\n    maskedInputInt = maskedInputFloat & 0x80000000;\n    maskedInputFloat = maskedInputFloat << 1;\n    shiftedInputFloat = shiftedInputFloat * 2 + (uint)(maskedInputInt != 0);\n    maskedInputInt = adjustedShiftRight - 2;\n    if (adjustedShiftRight - 1 == 0 || shiftedInputFloat < 0x800000) {\n      difference = LZCOUNT(shiftedInputFloat) - 8;\n      shiftedInputFloat = shiftedInputFloat << (difference & 0xff);\n      if ((int)maskedInputInt < (int)difference) {\n        shiftedInputFloat = shiftedInputFloat >> (-(maskedInputInt - difference) & 0xff);\n      }\n      else {\n        shiftedInputFloat = shiftedInputFloat + (maskedInputInt - difference) * 0x800000;\n      }\n      return shiftedInputFloat | inputFloat;\n    }\n  }\n  else {\n    maskedInputInt = adjustedShiftRight - 1;\n    if (0xffffff < shiftedInputFloat) {\n      maskedInputInt = shiftedInputFloat & 1;\n      shiftedInputFloat = shiftedInputFloat >> 1;\n      maskedInputFloat = (uint)(maskedInputInt != 0) << 0x1f | maskedInputFloat >> 1;\n      maskedInputInt = adjustedShiftRight;\n      if (0xfd < adjustedShiftRight) goto LAB_08008e12;\n    }\n  }\n  shiftedInputFloat = shiftedInputFloat + maskedInputInt * 0x800000 + (uint)(0x7fffffff < maskedInputFloat);\n  if (maskedInputFloat == 0x80000000) {\n    shiftedInputFloat = shiftedInputFloat & 0xfffffffe;\n  }\n  return shiftedInputFloat | inputFloat;\n}\n\n",
            "renaming": {
                "FUN_08008cd8": "calculate_float_08008cd8",
                "param_1": "inputFloat",
                "param_2": "inputInt",
                "param_3": "unknown",
                "param_4": "result",
                "iVar1": "shiftRight",
                "iVar2": "shiftRight2",
                "uVar3": "maskedInputInt",
                "uVar4": "maskedInputFloat",
                "uVar5": "shiftedInputFloat",
                "uVar6": "adjustedShiftRight",
                "uVar7": "difference",
                "bVar8": "isEqual"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cdc": {
            "entrypoint": "0x08008cdc",
            "current_name": "calculate_floating_point_08008cdc",
            "code": "\nuint calculateFloatingPoint_08008cdc(uint numA,uint numB,undefined4 varC,uint varD)\n\n{\n  int intA;\n  int intB;\n  uint result;\n  uint tempA;\n  uint tempB;\n  uint tempC;\n  bool isZero;\n  \n  tempA = numA << 1;\n  isZero = tempA == 0;\n  if (!isZero) {\n    varD = numB << 1;\n    isZero = varD == 0;\n  }\n  if (!isZero) {\n    isZero = tempA == varD;\n  }\n  intA = (int)tempA >> 0x18;\n  if (!isZero) {\n    isZero = intA == -1;\n  }\n  if (!isZero) {\n    isZero = (int)varD >> 0x18 == -1;\n  }\n  if (isZero) {\n    intB = (int)(numB << 1) >> 0x18;\n    if (intA == -1 || intB == -1) {\n      tempA = numB;\n      if (intA == -1) {\n        tempA = numA;\n      }\n      if (intA != -1 || intB != -1) {\n        numB = tempA;\n      }\n      isZero = (tempA & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (numB & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = tempA == numB;\n      }\n      if (!isZero) {\n        tempA = tempA | 0x400000;\n      }\n      return tempA;\n    }\n    if (((numA ^ numB) & 0x7fffffff) != 0) {\n      if (tempA == 0) {\n        numA = numB;\n      }\n      return numA;\n    }\n    if (numA != numB) {\n      return 0;\n    }\n    if ((tempA & 0xff000000) == 0) {\n      tempA = numA << 1;\n      if ((numA & 0x80000000) != 0) {\n        tempA = tempA | 0x80000000;\n      }\n      return tempA;\n    }\n    if (tempA < 0xfe000000) {\n      return numA + 0x800000;\n    }\n    numA = numA & 0x80000000;\nLAB_08008e12:\n    return numA | 0x7f800000;\n  }\n  tempA = tempA >> 0x18;\n  varD = varD >> 0x18;\n  tempC = varD - tempA;\n  isZero = tempC != 0;\n  tempB = tempA;\n  if (isZero && tempA <= varD) {\n    tempB = tempA + tempC;\n  }\n  if (isZero && tempA <= varD) {\n    numB = numB ^ numA;\n  }\n  if (isZero && tempA <= varD) {\n    numA = numA ^ numB;\n  }\n  if (isZero && tempA <= varD) {\n    numB = numB ^ numA;\n  }\n  if (varD < tempA) {\n    tempC = -tempC;\n  }\n  if (0x19 < tempC) {\n    return numA;\n  }\n  tempA = numA & 0xffffff | 0x800000;\n  if ((numA & 0x80000000) != 0) {\n    tempA = -tempA;\n  }\n  result = numB & 0xffffff | 0x800000;\n  if ((numB & 0x80000000) != 0) {\n    result = -result;\n  }\n  if (tempB == tempC) {\n    result = result ^ 0x800000;\n    if (tempB == 0) {\n      tempA = tempA ^ 0x800000;\n      tempB = 1;\n    }\n    else {\n      tempC = tempC - 1;\n    }\n  }\n  tempA = tempA + ((int)result >> (tempC & 0xff));\n  result = result << (0x20 - tempC & 0xff);\n  numA = tempA & 0x80000000;\n  if ((int)tempA < 0) {\n    isZero = result != 0;\n    result = -result;\n    tempA = -tempA - (uint)isZero;\n  }\n  if (tempA < 0x800000) {\n    tempC = result & 0x80000000;\n    result = result << 1;\n    tempA = tempA * 2 + (uint)(tempC != 0);\n    tempC = tempB - 2;\n    if (tempB - 1 == 0 || tempA < 0x800000) {\n      tempB = LZCOUNT(tempA) - 8;\n      tempA = tempA << (tempB & 0xff);\n      if ((int)tempC < (int)tempB) {\n        tempA = tempA >> (-(tempC - tempB) & 0xff);\n      }\n      else {\n        tempA = tempA + (tempC - tempB) * 0x800000;\n      }\n      return tempA | numA;\n    }\n  }\n  else {\n    tempC = tempB - 1;\n    if (0xffffff < tempA) {\n      tempC = tempA & 1;\n      tempA = tempA >> 1;\n      result = (uint)(tempC != 0) << 0x1f | result >> 1;\n      tempC = tempB;\n      if (0xfd < tempB) goto LAB_08008e12;\n    }\n  }\n  tempA = tempA + tempC * 0x800000 + (uint)(0x7fffffff < result);\n  if (result == 0x80000000) {\n    tempA = tempA & 0xfffffffe;\n  }\n  return tempA | numA;\n}\n\n",
            "renaming": {
                "FUN_08008cdc": "calculate_floating_point_08008cdc",
                "param_1": "numA",
                "param_2": "numB",
                "param_3": "varC",
                "param_4": "varD",
                "iVar1": "intA",
                "iVar2": "intB",
                "uVar3": "result",
                "uVar4": "tempA",
                "uVar5": "tempB",
                "uVar6": "tempC",
                "bVar7": "isZero"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08003826",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e3c": {
            "entrypoint": "0x08008e3c",
            "current_name": "calculate_new_value_08008e3c",
            "code": "\nuint calculateNewValue_08008e3c(uint value)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int offset;\n  uint mask;\n  \n  if (value == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(value);\n  shiftAmount = leadingZeros - 8;\n  offset = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    mask = 0 << (shiftAmount & 0xff);\n    leadingZeros = offset + (value << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = value << leadingZeros + 0x18;\n  leadingZeros = offset + ((value >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_08008e3c": "calculate_new_value_08008e3c",
                "param_1": "value",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "offset",
                "uVar4": "mask"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08002c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e44": {
            "entrypoint": "0x08008e44",
            "current_name": "convert_unsigned_to_twos_complement_08008e44",
            "code": "\nuint convertUnsignedToTwosComplement_08008e44(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  uint signBit;\n  int result;\n  \n  signBit = input & 0x80000000;\n  if ((int)signBit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = countLeadingZeros(input);\n  shiftAmount = leadingZeros - 8;\n  result = ((signBit | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftAmount & 0xff);\n    signBit = result + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftAmount = input << leadingZeros + 0x18;\n  signBit = result + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftAmount >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_08008e44": "convert_unsigned_to_twos_complement_08008e44",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "uVar3": "signBit",
                "iVar4": "result",
                "LZCOUNT": "countLeadingZeros"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_080004fc",
                "FUN_08004940",
                "FUN_08002c18",
                "FUN_080024c4",
                "FUN_08003618"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008eec": {
            "entrypoint": "0x08008eec",
            "current_name": "calculate_normalized_float_08008eec",
            "code": "\nuint calculate_normalized_float_08008eec(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  longlong temp1;\n  uint result;\n  uint exponent1;\n  int sum_exponents;\n  int shift_amount;\n  uint temp2;\n  int temp3;\n  uint mantissa1;\n  bool is_zero1;\n  bool overflow;\n  \n  exponent1 = input1 >> 0x17 & 0xff;\n  is_zero1 = exponent1 == 0;\n  if (!is_zero1) {\n    input4 = input2 >> 0x17 & 0xff;\n    is_zero1 = input4 == 0;\n  }\n  if (!is_zero1) {\n    is_zero1 = exponent1 == 0xff;\n  }\n  if (!is_zero1) {\n    is_zero1 = input4 == 0xff;\n  }\n  if (is_zero1) {\n    input4 = input2 >> 0x17 & 0xff;\n    if (exponent1 == 0xff || input4 == 0xff) {\n      is_zero1 = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        is_zero1 = input2 == 0;\n        result = input1;\n      }\n      if (!is_zero1) {\n        is_zero1 = input2 == 0x80000000;\n      }\n      mantissa1 = result;\n      if (((is_zero1) || ((exponent1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((input4 == 0xff && (mantissa1 = input2, (input2 & 0x7fffff) != 0)))) {\n        return mantissa1 | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_0800903c;\n    }\n    is_zero1 = (input1 & 0x7fffffff) == 0;\n    if (!is_zero1) {\n      is_zero1 = (input2 & 0x7fffffff) == 0;\n    }\n    if (is_zero1) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    is_zero1 = exponent1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (is_zero1) {\n        input1 = input1 << 1;\n        is_zero1 = (input1 & 0x800000) == 0;\n      }\n      if (!is_zero1) break;\n      exponent1 = exponent1 - 1;\n    }\n    input1 = input1 | result;\n    is_zero1 = input4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (is_zero1) {\n        input2 = input2 << 1;\n        is_zero1 = (input2 & 0x800000) == 0;\n      }\n      if (!is_zero1) break;\n      input4 = input4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum_exponents = exponent1 + input4;\n  mantissa1 = input1 ^ input2;\n  exponent1 = input1 << 9;\n  is_zero1 = exponent1 == 0;\n  if (!is_zero1) {\n    input2 = input2 << 9;\n    is_zero1 = input2 == 0;\n  }\n  if (is_zero1) {\n    if (exponent1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = mantissa1 & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    overflow = subtraction_overflow(sum_exponents,0x7f);\n    shift_amount = sum_exponents + -0x7f;\n    is_zero1 = shift_amount == 0;\n    temp3 = shift_amount;\n    if (!is_zero1 && 0x7e < sum_exponents) {\n      overflow = subtraction_overflow(0xff,shift_amount);\n      temp3 = 0xff - shift_amount;\n      is_zero1 = shift_amount == 0xff;\n    }\n    if (!is_zero1 && temp3 < 0 == overflow) {\n      result = result | shift_amount * 0x800000;\n    }\n    if (!is_zero1 && temp3 < 0 == overflow) {\n      return result;\n    }\n    result = result | 0x800000;\n    temp2 = 0;\n    overflow = subtraction_overflow(shift_amount,1);\n    mantissa1 = sum_exponents - 0x80;\n    is_zero1 = mantissa1 == 0;\n    exponent1 = mantissa1;\n  }\n  else {\n    temp1 = (ulonglong)(exponent1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    temp2 = (uint)temp1;\n    result = (uint)((ulonglong)temp1 >> 0x20);\n    is_zero1 = result < 0x800000;\n    if (is_zero1) {\n      result = result << 1;\n    }\n    if (is_zero1) {\n      result = result | temp2 >> 0x1f;\n      temp2 = temp2 << 1;\n    }\n    result = mantissa1 & 0x80000000 | result;\n    mantissa1 = (sum_exponents + -0x7f) - (uint)is_zero1;\n    overflow = subtraction_overflow(mantissa1,0xfd);\n    is_zero1 = mantissa1 == 0xfd;\n    exponent1 = mantissa1 - 0xfd;\n    if (mantissa1 < 0xfe) {\n      result = result + mantissa1 * 0x800000 + (uint)(0x7fffffff < temp2);\n      if (temp2 == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (is_zero1 || (int)exponent1 < 0 != overflow) {\n    is_zero1 = (int)(mantissa1 + 0x19) < 0;\n    if (mantissa1 == 0xffffffe7 || is_zero1 != subtraction_carry(mantissa1,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (mantissa1 != 0xffffffe7 && is_zero1 == subtraction_carry(mantissa1,0x19)) {\n      exponent1 = (result << 1) >> (-mantissa1 & 0xff);\n      mantissa1 = result << (mantissa1 + 0x20 & 0xff);\n      exponent1 = ((uint)((result & 0x80000000) != 0) << 0x1f | exponent1 >> 1) + (uint)((byte)exponent1 & 1);\n      if ((temp2 | mantissa1 << 1) == 0) {\n        exponent1 = exponent1 & ~(mantissa1 >> 0x1f);\n      }\n      return exponent1;\n    }\n    return result;\n  }\nLAB_0800903c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08008eec": "calculate_normalized_float_08008eec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "lVar1": "temp1",
                "uVar2": "result",
                "uVar3": "exponent1",
                "iVar4": "sum_exponents",
                "iVar5": "shift_amount",
                "uVar6": "temp2",
                "iVar7": "temp3",
                "uVar8": "mantissa1",
                "bVar9": "is_zero1",
                "bVar10": "overflow",
                "SBORROW4": "subtraction_overflow",
                "SCARRY4": "subtraction_carry"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08004e30",
                "FUN_080024c4",
                "FUN_08003826",
                "FUN_08002408",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_080028bc",
                "FUN_08003618",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009054": {
            "entrypoint": "0x08009054",
            "current_name": "floating_point_addition_08009054",
            "code": "\nuint floatingPointAddition_08009054(uint operand1,uint operand2,undefined4 operationFlag,uint carry)\n\n{\n  uint normalizedOperand1;\n  uint normalizedOperand2;\n  int normalizedDiff;\n  uint shiftedDiff;\n  int offset;\n  uint result;\n  bool isZero;\n  bool isNegativeOffset;\n  bool isBorrow;\n  \n  normalizedOperand2 = operand1 >> 0x17 & 0xff;\n  isZero = normalizedOperand2 == 0;\n  if (!isZero) {\n    carry = operand2 >> 0x17 & 0xff;\n    isZero = carry == 0;\n  }\n  if (!isZero) {\n    isZero = normalizedOperand2 == 0xff;\n  }\n  if (!isZero) {\n    isZero = carry == 0xff;\n  }\n  if (isZero) {\n    carry = operand2 >> 0x17 & 0xff;\n    result = operand1;\n    if (normalizedOperand2 == 0xff) {\n      if (((operand1 & 0x7fffff) != 0) || (result = operand2, carry == 0xff)) {\nLAB_0800904a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (carry == 0xff) {\n        result = operand2;\n        if ((operand2 & 0x7fffff) == 0) {\nLAB_08009000:\n          return (operand1 ^ operand2) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      isZero = (operand1 & 0x7fffffff) == 0;\n      if (!isZero) {\n        isZero = (operand2 & 0x7fffffff) == 0;\n      }\n      if (!isZero) {\n        isZero = normalizedOperand2 == 0;\n        result = operand1 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            operand1 = operand1 << 1;\n            isZero = (operand1 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          normalizedOperand2 = normalizedOperand2 - 1;\n        }\n        operand1 = operand1 | result;\n        isZero = carry == 0;\n        result = operand2 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            operand2 = operand2 << 1;\n            isZero = (operand2 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          carry = carry - 1;\n        }\n        operand2 = operand2 | result;\n        goto LAB_0800906c;\n      }\n      if ((operand1 & 0x7fffffff) == 0) {\n        if ((operand2 & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    operand1 = operand1 ^ operand2;\n  }\n  else {\nLAB_0800906c:\n    normalizedDiff = normalizedOperand2 - carry;\n    if (operand2 << 9 == 0) {\n      operand1 = (operand1 ^ operand2) & 0x80000000 | operand1 & 0x7fffff;\n      isBorrow = signedCarry(normalizedDiff,0x7f);\n      offset = normalizedDiff + 0x7f;\n      isZero = offset < 0;\n      isNegativeOffset = offset == 0;\n      if (!isNegativeOffset && isZero == isBorrow) {\n        isBorrow = signedBorrow(0xff,offset);\n        isZero = 0xff - offset < 0;\n        isNegativeOffset = offset == 0xff;\n      }\n      if (!isNegativeOffset && isZero == isBorrow) {\n        operand1 = operand1 | offset * 0x800000;\n      }\n      if (!isNegativeOffset && isZero == isBorrow) {\n        return operand1;\n      }\n      operand1 = operand1 | 0x800000;\n      normalizedOperand2 = 0;\n      isNegativeOffset = signedBorrow(offset,1);\n      shiftedDiff = normalizedDiff + 0x7e;\n      isZero = shiftedDiff == 0;\n      result = shiftedDiff;\n    }\n    else {\n      normalizedOperand1 = (operand2 << 9) >> 4 | 0x10000000;\n      normalizedOperand2 = (operand1 << 9) >> 4 | 0x10000000;\n      operand1 = (operand1 ^ operand2) & 0x80000000;\n      isZero = normalizedOperand1 <= normalizedOperand2;\n      if (!isZero) {\n        normalizedOperand2 = normalizedOperand2 << 1;\n      }\n      shiftedDiff = normalizedDiff + 0x7d + (uint)isZero;\n      result = 0x800000;\n      do {\n        if (normalizedOperand1 <= normalizedOperand2) {\n          normalizedOperand2 = normalizedOperand2 - normalizedOperand1;\n          operand1 = operand1 | result;\n        }\n        isZero = normalizedOperand1 >> 1 <= normalizedOperand2;\n        if (isZero) {\n          normalizedOperand2 = normalizedOperand2 - (normalizedOperand1 >> 1);\n        }\n        if (isZero) {\n          operand1 = operand1 | result >> 1;\n        }\n        isZero = normalizedOperand1 >> 2 <= normalizedOperand2;\n        if (isZero) {\n          normalizedOperand2 = normalizedOperand2 - (normalizedOperand1 >> 2);\n        }\n        if (isZero) {\n          operand1 = operand1 | result >> 2;\n        }\n        isZero = normalizedOperand1 >> 3 <= normalizedOperand2;\n        if (isZero) {\n          normalizedOperand2 = normalizedOperand2 - (normalizedOperand1 >> 3);\n        }\n        if (isZero) {\n          operand1 = operand1 | result >> 3;\n        }\n        normalizedOperand2 = normalizedOperand2 * 0x10;\n        isZero = normalizedOperand2 == 0;\n        if (!isZero) {\n          result = result >> 4;\n          isZero = result == 0;\n        }\n      } while (!isZero);\n      isNegativeOffset = signedBorrow(shiftedDiff,0xfd);\n      isZero = shiftedDiff == 0xfd;\n      result = shiftedDiff - 0xfd;\n      if (shiftedDiff < 0xfe) {\n        operand1 = operand1 + shiftedDiff * 0x800000 + (uint)(normalizedOperand1 <= normalizedOperand2);\n        if (normalizedOperand2 - normalizedOperand1 == 0) {\n          operand1 = operand1 & 0xfffffffe;\n        }\n        return operand1;\n      }\n    }\n    if (isZero || (int)result < 0 != isNegativeOffset) {\n      isZero = (int)(shiftedDiff + 0x19) < 0;\n      if (shiftedDiff == 0xffffffe7 || isZero != signedCarry(shiftedDiff,0x19)) {\n        operand1 = operand1 & 0x80000000;\n      }\n      if (shiftedDiff == 0xffffffe7 || isZero != signedCarry(shiftedDiff,0x19)) {\n        return operand1;\n      }\n      result = (operand1 << 1) >> (-shiftedDiff & 0xff);\n      shiftedDiff = operand1 << (shiftedDiff + 0x20 & 0xff);\n      result = ((uint)((operand1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((normalizedOperand2 | shiftedDiff << 1) == 0) {\n        result = result & ~(shiftedDiff >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return operand1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08009054": "floating_point_addition_08009054",
                "param_1": "operand1",
                "param_2": "operand2",
                "param_3": "operationFlag",
                "param_4": "carry",
                "uVar1": "normalizedOperand1",
                "uVar2": "normalizedOperand2",
                "iVar3": "normalizedDiff",
                "uVar4": "shiftedDiff",
                "iVar5": "offset",
                "uVar6": "result",
                "bVar7": "isZero",
                "bVar8": "isNegativeOffset",
                "bVar9": "isBorrow",
                "SCARRY4": "signedCarry",
                "SBORROW4": "signedBorrow"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_080004fc",
                "FUN_08004250",
                "FUN_08002e08",
                "FUN_08001994",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08003618",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800919c": {
            "entrypoint": "0x0800919c",
            "current_name": "calculate_bitwise_operations_0800919c",
            "code": "\nuint calculate_bitwise_operations_0800919c(uint input_1,uint input_2)\n\n{\n  bool is_negative_xor;\n  uint doubled_input_1;\n  uint doubled_input_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  doubled_input_1 = input_1 * 2;\n  doubled_input_2 = input_2 * 2;\n  if (((int)doubled_input_1 >> 0x18 == -1 || (int)doubled_input_2 >> 0x18 == -1) &&\n     ((((int)doubled_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)doubled_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_inputs = doubled_input_1 | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative_xor = -1 < (int)combined_inputs;\n  if (is_negative_xor) {\n    input_1 = doubled_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative_xor && doubled_input_2 <= doubled_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative_xor || doubled_input_2 > doubled_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  result input_1;\n}\n\n",
            "renaming": {
                "FUN_0800919c": "calculate_bitwise_operations_0800919c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "doubled_input_1",
                "uVar3": "doubled_input_2",
                "uVar4": "combined_inputs",
                "bVar1": "is_negative_xor",
                "bVar5": "is_zero",
                "return": "result"
            },
            "calling": [
                "FUN_08009204"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091fc": {
            "entrypoint": "0x080091fc",
            "current_name": "concatenate_integers_080091fc",
            "code": "\nvoid concatenateIntegers_080091fc(undefined4 firstInteger,undefined4 secondInteger)\n\n{\n  concatenate_integers_08009204(secondInteger,firstInteger);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091fc": "concatenate_integers_080091fc",
                "param_1": "firstInteger",
                "param_2": "secondInteger"
            },
            "calling": [
                "FUN_08009264",
                "FUN_08009250"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009204": {
            "entrypoint": "0x08009204",
            "current_name": "concatenate_integers_08009204",
            "code": "\nundefined8 concatenateIntegers_08009204(undefined4 firstInteger,undefined4 secondInteger)\n\n{\n  performBitwiseOperations();\n  return CONCAT44(secondInteger,firstInteger);\n}\n\n",
            "renaming": {
                "FUN_08009204": "concatenate_integers_08009204",
                "param_1": "firstInteger",
                "param_2": "secondInteger",
                "calculate_bitwise_operations_0800919c": "performBitwiseOperations"
            },
            "calling": [
                "FUN_080091fc",
                "FUN_08009214",
                "FUN_08009228",
                "FUN_0800923c"
            ],
            "called": [
                "FUN_0800919c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009214": {
            "entrypoint": "0x08009214",
            "current_name": "check_concatenation_result_08009214",
            "code": "\nbool check_concatenation_result_08009214(void)\n\n{\n  char result;\n  \n  concatenate_integers();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009214": "check_concatenation_result_08009214",
                "in_ZR": "result",
                "concatenate_integers_08009204": "concatenate_integers"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08001f00",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002afc",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009228": {
            "entrypoint": "0x08009228",
            "current_name": "is_cy_null_08009228",
            "code": "\nbool is_CY_null_08009228(void)\n\n{\n  char char_input;\n  \n  concatenate_integers_08009204();\n  return char_input == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009228": "is_cy_null_08009228",
                "in_CY": "char_input"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002afc",
                "FUN_08004e30",
                "FUN_08003826"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800923c": {
            "entrypoint": "0x0800923c",
            "current_name": "check_concatenated_integers_0800923c",
            "code": "\nbool check_concatenated_integers_0800923c(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry_set;\n  \n  concatenate_integers_08009204();\n  return !(bool)is_carry_set || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_0800923c": "check_concatenated_integers_0800923c",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry_set"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009250": {
            "entrypoint": "0x08009250",
            "current_name": "check_concatenation_result_08009250",
            "code": "\nbool check_concatenation_result_08009250(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry_over;\n  \n  concatenate_integers_080091fc();\n  return !(bool)is_carry_over || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_08009250": "check_concatenation_result_08009250",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry_over"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00"
            ],
            "called": [
                "FUN_080091fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009264": {
            "entrypoint": "0x08009264",
            "current_name": "check_concatenation_result_08009264",
            "code": "\nbool check_concatenation_result_08009264(void)\n\n{\n  char result;\n  \n  concatenate_integers_080091fc();\n  return result == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009264": "check_concatenation_result_08009264",
                "in_CY": "result"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8"
            ],
            "called": [
                "FUN_080091fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009278": {
            "entrypoint": "0x08009278",
            "current_name": "convert_to_signed_int_08009278",
            "code": "\nuint convertToSignedInt_08009278(uint input)\n\n{\n  uint shiftCount;\n  uint difference;\n  \n  if (input << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftCount = (input << 1) >> 0x18;\n  difference = 0x9e - shiftCount;\n  if (shiftCount < 0x9f && difference != 0) {\n    shiftCount = (input << 8 | 0x80000000) >> (difference & 0xff);\n    if ((input & 0x80000000) != 0) {\n      shiftCount = -shiftCount;\n    }\n    return shiftCount;\n  }\n  if ((difference == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input = input & 0x80000000;\n  if (input == 0) {\n    input = 0x7fffffff;\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08009278": "convert_to_signed_int_08009278",
                "param_1": "input",
                "uVar1": "shiftCount",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08003826"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x080092c4",
            "current_name": "entry",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_2000044c; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800c0c0);\n  }\n  for (puVar2 = &DAT_2000044c; puVar2 < &DAT_20000f20; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_device_0800756c();\n  execute_functions_0800b3e8();\n  UNRECOVERED_JUMPTABLE = (code *)0x80092fa;\n  initialize_program_08007540();\n                    /* WARNING: Could not recover jumptable at 0x080092fa. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_0800756c",
                "FUN_08007540",
                "FUN_0800b3e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009318": {
            "entrypoint": "0x08009318",
            "current_name": "improved_calculation_08009318",
            "code": "\nlonglong improved_calculation_08009318(uint input1,uint input2,undefined4 constant1,undefined4 constant2)\n\n{\n  int result;\n  uint shift_value;\n  uint mask;\n  bool carry_flag;\n  undefined8 result_value;\n  longlong output;\n  \n  mask = (input2 << 1) >> 0x15;\n  shift_value = mask - 0x3ff;\n  if ((int)shift_value < 0x14) {\n    if ((int)shift_value < 0) {\n      result_value = perform_unsigned_integer_operation_080082d4(input1,input2,0x8800759c,0x7e37e43c,constant2);\n      result = check_null_termination_08008b60((int)result_value,(int)((ulonglong)result_value >> 0x20),0,0);\n      output = CONCAT44(input2,input1);\n      if (result != 0) {\n        if ((int)input2 < 0) {\n          output = -0x8000000000000000;\n        }\n        else if ((input1 | input2) == 0) {\n          output = 0;\n        }\n        else {\n          output = 0x3ff0000000000000;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (shift_value & 0xff);\n      output = CONCAT44(input2,input1);\n      if ((input2 & mask | input1) != 0) {\n        result_value = perform_unsigned_integer_operation_080082d4(input1,input2,0x8800759c,0x7e37e43c,constant2);\n        result = check_null_termination_08008b60((int)result_value,(int)((ulonglong)result_value >> 0x20),0,0);\n        output = CONCAT44(input2,input1);\n        if (result != 0) {\n          if (0 < (int)input2) {\n            input2 = input2 + (0x100000 >> (shift_value & 0xff));\n          }\n          output = (ulonglong)(input2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shift_value < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    output = CONCAT44(input2,input1);\n    if ((mask & input1) != 0) {\n      result_value = perform_unsigned_integer_operation_080082d4(input1,input2,0x8800759c,0x7e37e43c,constant2);\n      result = check_null_termination_08008b60((int)result_value,(int)((ulonglong)result_value >> 0x20),0,0);\n      output = CONCAT44(input2,input1);\n      if (result != 0) {\n        if (0 < (int)input2) {\n          if (shift_value == 0x14) {\n            input2 = input2 + 1;\n          }\n          else {\n            shift_value = 1 << (0x34 - shift_value & 0xff);\n            carry_flag = CARRY4(shift_value,input1);\n            input1 = shift_value + input1;\n            if (carry_flag != false) {\n              input2 = input2 + 1;\n            }\n          }\n        }\n        output = CONCAT44(input2,input1 & ~mask);\n      }\n    }\n  }\n  else {\n    output = CONCAT44(input2,input1);\n    if (shift_value == 0x400) {\n      output = perform_unsigned_integer_operation_080082d4();\n    }\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_08009318": "improved_calculation_08009318",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "constant1",
                "param_4": "constant2",
                "iVar1": "result",
                "uVar2": "shift_value",
                "uVar3": "mask",
                "bVar4": "carry_flag",
                "uVar5": "result_value",
                "lVar6": "output"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001994",
                "FUN_08002c18"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009410": {
            "entrypoint": "0x08009410",
            "current_name": "process_result_08009410",
            "code": "\nundefined4 processResult_08009410(undefined4 input1,uint input2)\n\n{\n  undefined4 result;\n  uint flag;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  \n  if (0x3fe921fb < (input2 & 0x7fffffff)) {\n    if ((input2 & 0x7fffffff) < 0x7ff00000) {\n      flag = calculate_result_08009d78(input1,input2,&value1);\n      flag = flag & 3;\n      if (flag == 1) {\n        result = calculate_result_0800adf0(value1,value2,value3,value4,1);\n      }\n      else if (flag == 2) {\n        result = calculate_result_0800a348(value1,value2,value3,value4);\n      }\n      else if (flag == 0) {\n        result = calculate_result_0800a348(value1,value2,value3,value4);\n      }\n      else {\n        result = calculate_result_0800adf0(value1,value2,value3,value4,1);\n      }\n    }\n    else {\n      result = perform_operation_080082d0(input1,input2,input1,input2);\n    }\n    return result;\n  }\n  result = calculate_result_0800a348(input1,input2,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009410": "process_result_08009410",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "flag",
                "local_28": "value1",
                "uStack_24": "value2",
                "local_20": "value3",
                "uStack_1c": "value4"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_0800adf0",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094c0": {
            "entrypoint": "0x080094c0",
            "current_name": "calculate_result_080094c0",
            "code": "\nlonglong calculateResult_080094c0(uint input1,uint input2,undefined4 param3,undefined4 param4)\n\n{\n  int result1;\n  uint shiftedBits;\n  uint shiftedMask;\n  bool carryFlag;\n  undefined8 result2;\n  longlong output;\n  \n  shiftedMask = (input2 << 1) >> 0x15;\n  shiftedBits = shiftedMask - 0x3ff;\n  if ((int)shiftedBits < 0x14) {\n    if ((int)shiftedBits < 0) {\n      result2 = perform_unsigned_integer_operation_080082d4(input1,input2,0x8800759c,0x7e37e43c,param4);\n      result1 = check_null_termination_08008b60((int)result2,(int)((ulonglong)result2 >> 0x20),0,0);\n      output = CONCAT44(input2,input1);\n      if (result1 != 0) {\n        if ((int)input2 < 0) {\n          if ((input1 | input2 & 0x7fffffff) != 0) {\n            input2 = 0xbff00000;\n          }\n          output = (ulonglong)input2 << 0x20;\n        }\n        else {\n          output = 0;\n        }\n      }\n    }\n    else {\n      shiftedMask = 0xfffff >> (shiftedBits & 0xff);\n      output = CONCAT44(input2,input1);\n      if ((input2 & shiftedMask | input1) != 0) {\n        result2 = perform_unsigned_integer_operation_080082d4(input1,input2,0x8800759c,0x7e37e43c,param4);\n        result1 = check_null_termination_08008b60((int)result2,(int)((ulonglong)result2 >> 0x20),0,0);\n        output = CONCAT44(input2,input1);\n        if (result1 != 0) {\n          if ((int)input2 < 0) {\n            input2 = input2 + (0x100000 >> (shiftedBits & 0xff));\n          }\n          output = (ulonglong)(input2 & ~shiftedMask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shiftedBits < 0x34) {\n    shiftedMask = 0xffffffff >> (shiftedMask - 0x413 & 0xff);\n    output = CONCAT44(input2,input1);\n    if ((shiftedMask & input1) != 0) {\n      result2 = perform_unsigned_integer_operation_080082d4(input1,input2,0x8800759c,0x7e37e43c,param4);\n      result1 = check_null_termination_08008b60((int)result2,(int)((ulonglong)result2 >> 0x20),0,0);\n      output = CONCAT44(input2,input1);\n      if (result1 != 0) {\n        if ((int)input2 < 0) {\n          if (shiftedBits == 0x14) {\n            input2 = input2 + 1;\n          }\n          else {\n            shiftedBits = 1 << (0x34 - shiftedBits & 0xff);\n            carryFlag = CARRY4(shiftedBits,input1);\n            input1 = shiftedBits + input1;\n            if (carryFlag != false) {\n              input2 = input2 + 1;\n            }\n          }\n        }\n        output = CONCAT44(input2,input1 & ~shiftedMask);\n      }\n    }\n  }\n  else {\n    output = CONCAT44(input2,input1);\n    if (shiftedBits == 0x400) {\n      output = perform_unsigned_integer_operation_080082d4();\n    }\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_080094c0": "calculate_result_080094c0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result1",
                "uVar2": "shiftedBits",
                "uVar3": "shiftedMask",
                "bVar4": "carryFlag",
                "uVar5": "result2",
                "lVar6": "output"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_08002c18",
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_08008b60",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095b8": {
            "entrypoint": "0x080095b8",
            "current_name": "calculate_product_080095b8",
            "code": "\nint calculate_product_080095b8(uint input_1,uint input_2)\n\n{\n  uint bit_mask;\n  uint shift_bits;\n  uint result;\n  int sign;\n  uint shifted_bits;\n  \n  shift_bits = (input_2 << 1) >> 0x15;\n  shifted_bits = shift_bits - 0x3ff;\n  if ((int)input_2 < 0) {\n    sign = -1;\n  }\n  else {\n    sign = 1;\n  }\n  result = input_2 & 0xfffff | 0x100000;\n  if ((int)shifted_bits < 0x14) {\n    if ((int)shifted_bits < 0) {\n      if (shifted_bits != 0xffffffff) {\n        sign = 0;\n      }\n      return sign;\n    }\n    result = result + (0x80000 >> (shifted_bits & 0xff)) >> (0x14 - shifted_bits & 0xff);\n  }\n  else {\n    if (0x1e < shifted_bits) {\n      sign = calculate_value_08008ba0();\n      return sign;\n    }\n    if ((int)shifted_bits < 0x34) {\n      bit_mask = 0x80000000 >> (shift_bits - 0x413 & 0xff);\n      if (CARRY4(bit_mask,input_1) != false) {\n        result = result + 1;\n      }\n      result = result << (shift_bits - 0x413 & 0xff);\n      if (shifted_bits != 0x14) {\n        result = result | bit_mask + input_1 >> (0x34 - shifted_bits & 0xff);\n      }\n    }\n    else {\n      result = result << (shift_bits - 0x413 & 0xff) | input_1 << (shift_bits - 0x433 & 0xff);\n    }\n  }\n  return result * sign;\n}\n\n",
            "renaming": {
                "FUN_080095b8": "calculate_product_080095b8",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "bit_mask",
                "uVar2": "shift_bits",
                "uVar3": "result",
                "iVar4": "sign",
                "uVar5": "shifted_bits"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001994"
            ],
            "called": [
                "FUN_08008ba0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009654": {
            "entrypoint": "0x08009654",
            "current_name": "convert_to_double_08009654",
            "code": "\nlonglong convertToDouble_08009654(uint input1,uint input2)\n\n{\n  uint exponentDiff;\n  uint shiftedExponent;\n  longlong result;\n  \n  result = CONCAT44(input2,input1);\n  shiftedExponent = (input2 << 1) >> 0x15;\n  exponentDiff = shiftedExponent - 0x3ff;\n  if ((int)exponentDiff < 0x14) {\n    if ((int)exponentDiff < 0) {\n      input2 = input2 & 0x80000000;\n      if (exponentDiff == 0xffffffff) {\n        input2 = input2 | 0x3ff00000;\n      }\n      result = (ulonglong)input2 << 0x20;\n    }\n    else {\n      shiftedExponent = 0xfffff >> (exponentDiff & 0xff);\n      result = CONCAT44(input2,input1);\n      if ((input2 & shiftedExponent | input1) != 0) {\n        result = (ulonglong)(input2 + (0x80000 >> (exponentDiff & 0xff)) & ~shiftedExponent) << 0x20;\n      }\n    }\n  }\n  else if ((int)exponentDiff < 0x34) {\n    shiftedExponent = 0xffffffff >> (shiftedExponent - 0x413 & 0xff);\n    if ((input1 & shiftedExponent) != 0) {\n      exponentDiff = 1 << (0x33 - exponentDiff & 0xff);\n      if (checkCarry(input1,exponentDiff) != false) {\n        input2 = input2 + 1;\n      }\n      result = CONCAT44(input2,input1 + exponentDiff & ~shiftedExponent);\n    }\n  }\n  else {\n    result = CONCAT44(input2,input1);\n    if (exponentDiff == 0x400) {\n      result = performUnsignedIntegerOperation();\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009654": "convert_to_double_08009654",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "exponentDiff",
                "uVar2": "shiftedExponent",
                "lVar3": "result",
                "CARRY4": "checkCarry",
                "perform_unsigned_integer_operation_080082d4": "performUnsignedIntegerOperation"
            },
            "calling": [
                "FUN_08004e30"
            ],
            "called": [
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e8": {
            "entrypoint": "0x080096e8",
            "current_name": "process_floating_point_080096e8",
            "code": "\nundefined4 processFloatingPoint_080096e8(undefined4 value,uint bits)\n\n{\n  undefined4 result;\n  uint operand;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  \n  if (0x3fe921fb < (bits & 0x7fffffff)) {\n    if ((bits & 0x7fffffff) < 0x7ff00000) {\n      operand = calculate_result_08009d78(value,bits,&temp1);\n      operand = operand & 3;\n      if (operand == 1) {\n        result = calculate_result_0800a348(temp1,temp2,temp3,temp4);\n      }\n      else if (operand == 2) {\n        result = calculate_result_0800adf0(temp1,temp2,temp3,temp4,1);\n      }\n      else if (operand == 0) {\n        result = calculate_result_0800adf0(temp1,temp2,temp3,temp4,1);\n      }\n      else {\n        result = calculate_result_0800a348(temp1,temp2,temp3,temp4);\n      }\n    }\n    else {\n      result = perform_operation_080082d0(value,bits,value,bits);\n    }\n    return result;\n  }\n  result = calculate_result_0800adf0(value,bits,0,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080096e8": "process_floating_point_080096e8",
                "param_1": "value",
                "param_2": "bits",
                "uVar1": "result",
                "uVar2": "operand",
                "local_28": "temp1",
                "uStack_24": "temp2",
                "local_20": "temp3",
                "uStack_1c": "temp4"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_0800adf0",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009798": {
            "entrypoint": "0x08009798",
            "current_name": "process_unsigned_numbers_08009798",
            "code": "\nlonglong processUnsignedNumbers_08009798(uint input1,uint input2,undefined4 flag1,undefined4 flag2)\n\n{\n  uint shiftedAmount1;\n  uint shiftedAmount2;\n  longlong result;\n  \n  shiftedAmount2 = (input2 << 1) >> 0x15;\n  shiftedAmount1 = shiftedAmount2 - 0x3ff;\n  if ((int)shiftedAmount1 < 0x14) {\n    if ((int)shiftedAmount1 < 0) {\n      return ((ulonglong)input2 & 0x80000000) << 0x20;\n    }\n    result = (ulonglong)(input2 & ~(0xfffff >> (shiftedAmount1 & 0xff))) << 0x20;\n  }\n  else {\n    if ((int)shiftedAmount1 < 0x34) {\n      return CONCAT44(input2,input1 & ~(0xffffffffU >> (shiftedAmount2 - 0x413 & 0xff)));\n    }\n    if (shiftedAmount1 != 0x400) {\n      return CONCAT44(input2,input1);\n    }\n    result = perform_unsigned_integer_operation_080082d4(input1,input2,input1,input2,flag2);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009798": "process_unsigned_numbers_08009798",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "flag1",
                "param_4": "flag2",
                "uVar1": "shiftedAmount1",
                "uVar2": "shiftedAmount2",
                "lVar3": "result"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08009990": {
            "entrypoint": "0x08009818",
            "current_name": "compute_floating_point_value_thunk_08009990",
            "code": "\nuint computeFloatingPointValue_thunk_08009990(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int temp1;\n  undefined4 temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  undefined8 temp6;\n  \n  temp4 = input4 & 0x7fffffff;\n  if (((temp4 | (-input3 | input3) >> 0x1f) < 0x7ff00001) &&\n     (temp5 = input2 & 0x7fffffff, (temp5 | (-input1 | input1) >> 0x1f) < 0x7ff00001)) {\n    if ((input4 + 0xc0100000 | input3) == 0) {\n      temp4 = calculate_value_0800af78();\n      return temp4;\n    }\n    temp3 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n    if ((temp5 | input1) == 0) {\n      if (temp3 == 2) {\n        input1 = 0x54442d18;\n      }\n      else if (temp3 == 3) {\n        input1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((temp4 | input3) != 0) {\n        if (temp4 == 0x7ff00000) {\n          temp3 = temp3 - 1;\n          if (temp5 == 0x7ff00000) {\n            if (temp3 < 3) {\n              return *(uint *)(&DAT_0800be68 + temp3 * 8);\n            }\n            return 0x54442d18;\n          }\n          if (temp3 < 3) {\n            return *(uint *)(&DAT_0800be80 + temp3 * 8);\n          }\n          return 0;\n        }\n        if (temp5 != 0x7ff00000) {\n          temp1 = (int)(temp5 - temp4) >> 0x14;\n          if ((int)(temp5 - temp4) < 0x3d00000) {\n            if (((int)input4 < 0) && (temp1 + 0x3c < 0 != SCARRY4(temp1,0x3c))) {\n              temp6 = 0;\n            }\n            else {\n              calculate_floating_point_08008894(input1,input2,input3,input4,input4);\n              FUNC_0800b2cc();\n              temp6 = calculate_value_0800af78();\n            }\n          }\n          else {\n            temp6 = 0x3ff921fb54442d18;\n          }\n          temp2 = (undefined4)((ulonglong)temp6 >> 0x20);\n          temp4 = (uint)temp6;\n          if (temp3 == 1) {\n            return temp4;\n          }\n          if (temp3 == 2) {\n            temp6 = perform_operation_080082d0(temp4,temp2,0x33145c07,0x3ca1a626);\n            temp4 = perform_operation_080082d0(0x54442d18,0x400921fb,(int)temp6,(int)((ulonglong)temp6 >> 0x20));\n            return temp4;\n          }\n          if (temp3 == 0) {\n            return temp4;\n          }\n          temp6 = perform_operation_080082d0(temp4,temp2,0x33145c07,0x3ca1a626);\n          temp4 = perform_operation_080082d0((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x54442d18,0x400921fb);\n          return temp4;\n        }\n      }\n      if ((int)input2 < 0) {\n        input1 = 0x54442d18;\n      }\n      else {\n        input1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    input1 = perform_unsigned_integer_operation_080082d4(input3,input4,input1,input2);\n  }\n  return input1;\n}\n\n",
            "renaming": {
                "thunk_FUN_08009990": "compute_floating_point_value_thunk_08009990",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_08009990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800981c": {
            "entrypoint": "0x0800981c",
            "current_name": "calculate_hypotenuse_0800981c",
            "code": "\nundefined8 calculateHypotenuse_0800981c(undefined4 sideA,undefined4 sideB,undefined4 sideC,undefined4 sideD)\n\n{\n  int result;\n  undefined4 *globalDataPtr;\n  int *globalDataIntPtr;\n  undefined8 returnValue;\n  undefined4 operationType;\n  char *operationName;\n  undefined4 param_1;\n  undefined4 param_2;\n  undefined4 param_3;\n  undefined4 param_4;\n  undefined4 minValue;\n  undefined4 maxValue;\n  int msbResult;\n  \n  returnValue = perform_unsigned_integer_operation_08009b24();\n  if (DAT_20000014 == -1) {\n    return returnValue;\n  }\n  msbResult = set_msb_0800b2d4();\n  if (msbResult != 0) {\n    return returnValue;\n  }\n  result = set_msb_0800b2d4(sideA,sideB);\n  if (result == 0) {\n    return returnValue;\n  }\n  result = set_msb_0800b2d4(sideC,sideD);\n  if (result == 0) {\n    return returnValue;\n  }\n  operationType = 3;\n  operationName = \"hypot\";\n  param_1 = sideA;\n  param_2 = sideB;\n  param_3 = sideC;\n  param_4 = sideD;\n  if (DAT_20000014 == '\\0') {\n    minValue = 0xe0000000;\n    maxValue = 0x47efffff;\nLAB_080098aa:\n    result = initialize_application_0800b2e0(&operationType);\n    if (result != 0) goto LAB_08009896;\n  }\n  else {\n    minValue = 0;\n    maxValue = 0x7ff00000;\n    if (DAT_20000014 != '\\x02') goto LAB_080098aa;\n  }\n  globalDataPtr = (undefined4 *)get_global_data_0800b3dc();\n  *globalDataPtr = 0x22;\nLAB_08009896:\n  returnValue = CONCAT44(maxValue,minValue);\n  if (msbResult != 0) {\n    globalDataIntPtr = (int *)get_global_data_0800b3dc();\n    returnValue = CONCAT44(maxValue,minValue);\n    *globalDataIntPtr = msbResult;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800981c": "calculate_hypotenuse_0800981c",
                "param_1": "sideA",
                "param_2": "sideB",
                "param_3": "sideC",
                "param_4": "sideD",
                "iVar1": "result",
                "puVar2": "globalDataPtr",
                "piVar3": "globalDataIntPtr",
                "uVar4": "returnValue",
                "local_50": "operationType",
                "pcStack_4c": "operationName",
                "local_48": "param_1",
                "uStack_44": "param_2",
                "local_40": "param_3",
                "uStack_3c": "param_4",
                "local_38": "minValue",
                "uStack_34": "maxValue",
                "local_30": "msbResult"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08009b24",
                "FUN_0800b3dc",
                "FUN_0800b2d4",
                "FUN_0800b2e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d0": {
            "entrypoint": "0x080098d0",
            "current_name": "start_application_080098d0",
            "code": "\nundefined4 startApplication_080098d0(undefined4 inputParam1,undefined4 inputParam2)\n\n{\n  char cVar1;\n  undefined4 result;\n  int checkResult;\n  undefined4 *globalDataPtr;\n  int *globalDataInt;\n  undefined4 flag;\n  undefined *stringPtr;\n  undefined4 savedParam1;\n  undefined4 savedParam2;\n  undefined4 tempParam1;\n  undefined4 tempParam2;\n  undefined8 floatingPointValue;\n  int isNotNullTerminated;\n  \n  result = perform_calculations_0800a1bc();\n  cVar1 = DAT_20000014;\n  if (((DAT_20000014 == -1) ||\n      (isNotNullTerminated = check_params_08008b74(inputParam1,inputParam2,inputParam1,inputParam2), isNotNullTerminated != 0)) ||\n     (checkResult = is_null_terminator_08008b24(inputParam1,inputParam2,0,0), checkResult == 0)) {\n    return result;\n  }\n  flag = 1;\n  stringPtr = &DAT_0800be5c;\n  savedParam1 = inputParam1;\n  savedParam2 = inputParam2;\n  tempParam1 = inputParam1;\n  tempParam2 = inputParam2;\n  if (cVar1 == '\\0') {\n    floatingPointValue = 0;\nLAB_0800996c:\n    checkResult = initialize_application_0800b2e0(&flag);\n    if (checkResult != 0) goto joined_r0x0800997a;\n  }\n  else {\n    floatingPointValue = calculate_floating_point_08008894(0,0,0,0);\n    if (cVar1 != '\\x02') goto LAB_0800996c;\n  }\n  globalDataPtr = (undefined4 *)get_global_data_0800b3dc();\n  *globalDataPtr = 0x21;\njoined_r0x0800997a:\n  if (isNotNullTerminated != 0) {\n    globalDataInt = (int *)get_global_data_0800b3dc();\n    *globalDataInt = isNotNullTerminated;\n  }\n  return (undefined4)floatingPointValue;\n}\n\n",
            "renaming": {
                "FUN_080098d0": "start_application_080098d0",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "uVar2": "result",
                "iVar3": "checkResult",
                "puVar4": "globalDataPtr",
                "piVar5": "globalDataInt",
                "local_50": "flag",
                "local_4c": "stringPtr",
                "local_48": "savedParam1",
                "uStack_44": "savedParam2",
                "local_40": "tempParam1",
                "uStack_3c": "tempParam2",
                "local_38": "floatingPointValue",
                "local_30": "isNotNullTerminated"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008b24",
                "FUN_0800b3dc",
                "FUN_08008b74",
                "FUN_08008894",
                "FUN_0800b2e0",
                "FUN_0800a1bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009990": {
            "entrypoint": "0x08009990",
            "current_name": "calculate_result_08009990",
            "code": "\nuint calculate_result_08009990(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int temp_var2;\n  undefined4 temp_var;\n  uint shifted_input_4;\n  uint modified_input_4;\n  uint modified_input_2;\n  undefined8 floating_point_result;\n  \n  modified_input_4 = input_4 & 0x7fffffff;\n  if (((modified_input_4 | (-input_3 | input_3) >> 0x1f) < 0x7ff00001) &&\n     (modified_input_2 = input_2 & 0x7fffffff, (modified_input_2 | (-input_1 | input_1) >> 0x1f) < 0x7ff00001)) {\n    if ((input_4 + 0xc0100000 | input_3) == 0) {\n      modified_input_4 = calculate_value_0800af78();\n      return modified_input_4;\n    }\n    shifted_input_4 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n    if ((modified_input_2 | input_1) == 0) {\n      if (shifted_input_4 == 2) {\n        input_1 = 0x54442d18;\n      }\n      else if (shifted_input_4 == 3) {\n        input_1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((modified_input_4 | input_3) != 0) {\n        if (modified_input_4 == 0x7ff00000) {\n          shifted_input_4 = shifted_input_4 - 1;\n          if (modified_input_2 == 0x7ff00000) {\n            if (shifted_input_4 < 3) {\n              return *(uint *)(&DAT_0800be68 + shifted_input_4 * 8);\n            }\n            return 0x54442d18;\n          }\n          if (shifted_input_4 < 3) {\n            return *(uint *)(&DAT_0800be80 + shifted_input_4 * 8);\n          }\n          return 0;\n        }\n        if (modified_input_2 != 0x7ff00000) {\n          temp_var2 = (int)(modified_input_2 - modified_input_4) >> 0x14;\n          if ((int)(modified_input_2 - modified_input_4) < 0x3d00000) {\n            if (((int)input_4 < 0) && (temp_var2 + 0x3c < 0 != SCARRY4(temp_var2,0x3c))) {\n              floating_point_result = 0;\n            }\n            else {\n              calculate_floating_point_08008894(input_1,input_2,input_3,input_4,input_4);\n              FUNC_0800b2cc();\n              floating_point_result = calculate_value_0800af78();\n            }\n          }\n          else {\n            floating_point_result = 0x3ff921fb54442d18;\n          }\n          temp_var = (undefined4)((ulonglong)floating_point_result >> 0x20);\n          modified_input_4 = (uint)floating_point_result;\n          if (shifted_input_4 == 1) {\n            return modified_input_4;\n          }\n          if (shifted_input_4 == 2) {\n            floating_point_result = perform_operation_080082d0(modified_input_4,temp_var,0x33145c07,0x3ca1a626);\n            modified_input_4 = perform_operation_080082d0(0x54442d18,0x400921fb,(int)floating_point_result,(int)((ulonglong)floating_point_result >> 0x20));\n            return modified_input_4;\n          }\n          if (shifted_input_4 == 0) {\n            return modified_input_4;\n          }\n          floating_point_result = perform_operation_080082d0(modified_input_4,temp_var,0x33145c07,0x3ca1a626);\n          modified_input_4 = perform_operation_080082d0((int)floating_point_result,(int)((ulonglong)floating_point_result >> 0x20),0x54442d18,0x400921fb);\n          return modified_input_4;\n        }\n      }\n      if ((int)input_2 < 0) {\n        input_1 = 0x54442d18;\n      }\n      else {\n        input_1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    input_1 = perform_unsigned_integer_operation_080082d4(input_3,input_4,input_1,input_2);\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_08009990": "calculate_result_08009990",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar4": "modified_input_4",
                "uVar3": "shifted_input_4",
                "uVar5": "modified_input_2",
                "uVar6": "floating_point_result",
                "uVar2": "temp_var",
                "iVar1": "temp_var2"
            },
            "calling": [
                "thunk_FUN_08009990"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_0800af78",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009b24": {
            "entrypoint": "0x08009b24",
            "current_name": "perform_unsigned_integer_operation_08009b24",
            "code": "\nuint performUnsignedIntegerOperation_08009b24(uint inputNumber1,uint inputNumber2,uint inputNumber3,uint inputNumber4)\n\n{\n  undefined4 resultVar1;\n  int resultVar2;\n  uint tempVar1;\n  int resultVar3;\n  undefined4 tempVar2;\n  int resultVar4;\n  uint tempVar3;\n  undefined4 tempVar4;\n  undefined4 tempVar5;\n  undefined8 tempVar6;\n  undefined8 tempVar7;\n  undefined8 tempVar8;\n  undefined8 tempVar9;\n  int localVar;\n  \n  inputNumber2 = inputNumber2 & 0x7fffffff;\n  inputNumber4 = inputNumber4 & 0x7fffffff;\n  tempVar1 = inputNumber1;\n  tempVar3 = inputNumber2;\n  if (inputNumber2 < inputNumber4) {\n    tempVar1 = inputNumber3;\n    inputNumber3 = inputNumber1;\n    tempVar3 = inputNumber4;\n    inputNumber4 = inputNumber2;\n  }\n  if (0x3c00000 < (int)(tempVar3 - inputNumber4)) {\n    tempVar1 = perform_unsigned_integer_operation_080082d4(tempVar1,tempVar3,inputNumber3,inputNumber4);\n    return tempVar1;\n  }\n  if (tempVar3 < 0x5f300001) {\n    localVar = 0;\n  }\n  else {\n    if (0x7fefffff < tempVar3) {\n      if ((tempVar3 & 0xfffff | tempVar1) != 0) {\n        tempVar1 = perform_unsigned_integer_operation_080082d4(tempVar1,tempVar3,inputNumber3,inputNumber4);\n      }\n      if ((inputNumber4 ^ 0x7ff00000 | inputNumber3) != 0) {\n        return tempVar1;\n      }\n      return inputNumber3;\n    }\n    tempVar3 = tempVar3 + 0xda800000;\n    inputNumber4 = inputNumber4 + 0xda800000;\n    localVar = 600;\n  }\n  tempVar7 = CONCAT44(tempVar3,tempVar1);\n  tempVar6 = CONCAT44(inputNumber4,inputNumber3);\n  if ((int)inputNumber4 < 0x20b00000) {\n    if ((int)inputNumber4 < 0x100000) {\n      if ((inputNumber4 | inputNumber3) == 0) {\n        return tempVar1;\n      }\n      tempVar6 = calculate_multiplication_and_addition_08008640(inputNumber3,inputNumber4,0,0x7fd00000);\n      tempVar7 = calculate_multiplication_and_addition_08008640(tempVar1,tempVar3,0,0x7fd00000);\n      localVar = localVar + -0x3fe;\n    }\n    else {\n      tempVar3 = tempVar3 + 0x25800000;\n      tempVar7 = CONCAT44(tempVar3,tempVar1);\n      inputNumber4 = inputNumber4 + 0x25800000;\n      tempVar6 = CONCAT44(inputNumber4,inputNumber3);\n      localVar = localVar + -600;\n    }\n  }\n  tempVar5 = (undefined4)((ulonglong)tempVar7 >> 0x20);\n  tempVar4 = (undefined4)tempVar7;\n  resultVar4 = (int)((ulonglong)tempVar6 >> 0x20);\n  tempVar2 = (undefined4)tempVar6;\n  tempVar6 = perform_operation_080082d0(tempVar4,tempVar5,tempVar2,resultVar4);\n  resultVar3 = (int)((ulonglong)tempVar6 >> 0x20);\n  resultVar1 = (undefined4)tempVar6;\n  resultVar2 = is_null_terminator_08008b24(tempVar2,resultVar4,resultVar1,resultVar3);\n  if (resultVar2 == 0) {\n    tempVar6 = calculate_multiplication_and_addition_08008640(0,inputNumber4,0);\n    tempVar7 = calculate_multiplication_and_addition_08008640(resultVar1,resultVar3 + -0x80000000,resultVar1,resultVar3);\n    tempVar8 = perform_unsigned_integer_operation_080082d4(tempVar4,tempVar5,tempVar4,tempVar5);\n    tempVar8 = perform_operation_080082d0((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),0,tempVar3 + 0x100000);\n    tempVar8 = calculate_multiplication_and_addition_08008640((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),tempVar2,resultVar4);\n    tempVar9 = perform_operation_080082d0(tempVar2,resultVar4,0,inputNumber4);\n    tempVar9 = calculate_multiplication_and_addition_08008640((int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20),0,tempVar3 + 0x100000);\n    tempVar8 = perform_unsigned_integer_operation_080082d4((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),(int)tempVar9,\n                          (int)((ulonglong)tempVar9 >> 0x20));\n    tempVar7 = perform_operation_080082d0((int)tempVar7,(int)((ulonglong)tempVar7 >> 0x20),(int)tempVar8,\n                          (int)((ulonglong)tempVar8 >> 0x20));\n    perform_operation_080082d0((int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20),(int)tempVar7,\n                 (int)((ulonglong)tempVar7 >> 0x20));\n    tempVar6 = perform_calculations_0800a1bc();\n  }\n  else {\n    tempVar6 = calculate_multiplication_and_addition_08008640(0,tempVar3,0,tempVar3);\n    tempVar7 = calculate_multiplication_and_addition_08008640(tempVar2,resultVar4 + -0x80000000,tempVar2,resultVar4);\n    tempVar8 = perform_unsigned_integer_operation_080082d4(tempVar4,tempVar5,0,tempVar3);\n    tempVar9 = perform_operation_080082d0(tempVar4,tempVar5,0,tempVar3);\n    tempVar8 = calculate_multiplication_and_addition_08008640((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),(int)tempVar9,\n                          (int)((ulonglong)tempVar9 >> 0x20));\n    tempVar7 = perform_operation_080082d0((int)tempVar7,(int)((ulonglong)tempVar7 >> 0x20),(int)tempVar8,\n                          (int)((ulonglong)tempVar8 >> 0x20));\n    perform_operation_080082d0((int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20),(int)tempVar7,\n                 (int)((ulonglong)tempVar7 >> 0x20));\n    tempVar6 = perform_calculations_0800a1bc();\n  }\n  tempVar1 = (uint)tempVar6;\n  if (localVar != 0) {\n    tempVar1 = calculate_multiplication_and_addition_08008640(tempVar1,(int)((ulonglong)tempVar6 >> 0x20),0,localVar * 0x100000 + 0x3ff00000);\n  }\n  return tempVar1;\n}\n\n",
            "renaming": {
                "FUN_08009b24": "perform_unsigned_integer_operation_08009b24",
                "param_1": "inputNumber1",
                "param_2": "inputNumber2",
                "param_3": "inputNumber3",
                "param_4": "inputNumber4",
                "uVar1": "resultVar1",
                "iVar2": "resultVar2",
                "uVar3": "tempVar1",
                "iVar4": "resultVar3",
                "uVar5": "tempVar2",
                "iVar6": "resultVar4",
                "uVar7": "tempVar3",
                "uVar8": "tempVar4",
                "uVar9": "tempVar5",
                "uVar10": "tempVar6",
                "uVar11": "tempVar7",
                "uVar12": "tempVar8",
                "uVar13": "tempVar9",
                "local_3c": "localVar"
            },
            "calling": [
                "FUN_0800981c"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b24",
                "FUN_08008640",
                "FUN_0800a1bc",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d78": {
            "entrypoint": "0x08009d78",
            "current_name": "calculate_result_08009d78",
            "code": "\nint calculateResult_08009d78(undefined4 inputValue,uint inputFlag,undefined8 *resultArray)\n\n{\n  undefined4 tempValue1;\n  undefined4 tempValue2;\n  undefined4 tempValue3;\n  undefined4 tempValue4;\n  undefined4 tempValue5;\n  undefined4 tempValue6;\n  undefined4 tempValue7;\n  uint positiveFlag;\n  int calculationResult;\n  undefined8 tempResult1;\n  undefined8 tempResult2;\n  undefined8 tempResult3;\n  undefined4 localVariable1;\n  undefined4 localVariable2;\n  undefined8 localVariable3;\n  undefined8 localVariable4;\n  undefined8 localVariable5;\n  \n  positiveFlag = inputFlag & 0x7fffffff;\n  if (positiveFlag < 0x3fe921fc) {\n    *(undefined4 *)resultArray = inputValue;\n    *(uint *)((int)resultArray + 4) = inputFlag;\n    *(undefined4 *)(resultArray + 1) = 0;\n    *(undefined4 *)((int)resultArray + 0xc) = 0;\n    return 0;\n  }\n  if (positiveFlag < 0x4002d97c) {\n    if ((int)inputFlag < 1) {\n      tempResult1 = perform_unsigned_integer_operation_080082d4(inputValue,inputFlag,0x54400000,0x3ff921fb);\n      tempValue3 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n      tempValue1 = (undefined4)tempResult1;\n      if (positiveFlag != 0x3ff921fb) {\n        tempResult1 = perform_unsigned_integer_operation_080082d4(tempValue1,tempValue3,0x1a626331,0x3dd0b461);\n        *resultArray = tempResult1;\n        tempResult1 = perform_operation_080082d0(tempValue1,tempValue3);\n        tempResult1 = perform_unsigned_integer_operation_080082d4((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),0x1a626331,0x3dd0b461);\n        resultArray[1] = tempResult1;\n        return -1;\n      }\n      tempResult1 = perform_unsigned_integer_operation_080082d4(tempValue1,tempValue3,0x1a600000,0x3dd0b461);\n      tempValue1 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n      tempResult2 = perform_unsigned_integer_operation_080082d4((int)tempResult1,tempValue1,0x2e037073,0x3ba3198a);\n      *resultArray = tempResult2;\n      tempResult1 = perform_operation_080082d0((int)tempResult1,tempValue1);\n      tempResult1 = perform_unsigned_integer_operation_080082d4((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),0x2e037073,0x3ba3198a);\n      resultArray[1] = tempResult1;\n      return -1;\n    }\n    tempResult1 = perform_operation_080082d0();\n    tempValue3 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n    tempValue1 = (undefined4)tempResult1;\n    if (positiveFlag != 0x3ff921fb) {\n      tempResult1 = perform_operation_080082d0(tempValue1,tempValue3,0x1a626331,0x3dd0b461);\n      *resultArray = tempResult1;\n      tempResult1 = perform_operation_080082d0(tempValue1,tempValue3);\n      tempResult1 = perform_operation_080082d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),0x1a626331,0x3dd0b461);\n      resultArray[1] = tempResult1;\n      return 1;\n    }\n    tempResult1 = perform_operation_080082d0(tempValue1,tempValue3,0x1a600000,0x3dd0b461);\n    tempValue1 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n    tempResult2 = perform_operation_080082d0((int)tempResult1,tempValue1,0x2e037073,0x3ba3198a);\n    *resultArray = tempResult2;\n    tempResult1 = perform_operation_080082d0((int)tempResult1,tempValue1);\n    tempResult1 = perform_operation_080082d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),0x2e037073,0x3ba3198a);\n    resultArray[1] = tempResult1;\n    return 1;\n  }\n  if (0x413921fb < positiveFlag) {\n    if (0x7fefffff < positiveFlag) {\n      tempResult1 = perform_operation_080082d0(inputValue,inputFlag,inputValue,inputFlag);\n      resultArray[1] = tempResult1;\n      *resultArray = tempResult1;\n      return 0;\n    }\n    calculationResult = ((int)positiveFlag >> 0x14) + -0x416;\n    calculate_value_08008ba0();\n    localVariable3 = shift_and_merge_0800856c();\n    tempResult1 = perform_operation_080082d0(inputValue,positiveFlag + calculationResult * -0x100000,(int)localVariable3,\n                          (int)((ulonglong)localVariable3 >> 0x20));\n    tempResult1 = calculate_multiplication_and_addition_08008640((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),0,0x41700000);\n    calculate_value_08008ba0();\n    localVariable4 = shift_and_merge_0800856c();\n    tempResult1 = perform_operation_080082d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20));\n    localVariable5 = calculate_multiplication_and_addition_08008640((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),0,0x41700000);\n    check_parameter_and_return_08008b10((int)localVariable5,(int)((ulonglong)localVariable5 >> 0x20),0,0);\n    calculationResult = calculate_verification_result_0800a5a0(&localVariable3,resultArray,calculationResult);\n    if (-1 < (int)inputFlag) {\n      return calculationResult;\n    }\n    *(int *)((int)resultArray + 4) = *(int *)((int)resultArray + 4) + -0x80000000;\n    *(int *)((int)resultArray + 0xc) = *(int *)((int)resultArray + 0xc) + -0x80000000;\n    return -calculationResult;\n  }\n  tempResult1 = FUNC_0800b2cc();\n  tempValue3 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n  tempResult2 = calculate_multiplication_and_addition_08008640((int)tempResult1,tempValue3,0x6dc9c883,0x3fe45f30);\n  perform_unsigned_integer_operation_080082d4((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),0,0x3fe00000);\n  calculationResult = calculate_value_08008ba0();\n  tempResult2 = shift_and_merge_0800856c();\n  tempValue4 = (undefined4)((ulonglong)tempResult2 >> 0x20);\n  tempValue1 = (undefined4)tempResult2;\n  tempResult2 = calculate_multiplication_and_addition_08008640(tempValue1,tempValue4,0x54400000,0x3ff921fb);\n  tempResult1 = perform_operation_080082d0((int)tempResult1,tempValue3,(int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20));\n  tempValue5 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n  tempValue3 = (undefined4)tempResult1;\n  tempResult2 = calculate_multiplication_and_addition_08008640(tempValue1,tempValue4,0x1a626331,0x3dd0b461);\n  if ((0x1f < calculationResult) || (*(uint *)(&DAT_0800be98 + (calculationResult + -1) * 4) == positiveFlag)) {\n    tempResult3 = perform_operation_080082d0(tempValue3,tempValue5,(int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20));\n    if ((int)((positiveFlag >> 0x14) - ((uint)((int)((ulonglong)tempResult3 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    tempResult2 = calculate_multiplication_and_addition_08008640(tempValue1,tempValue4,0x1a600000,0x3dd0b461);\n    tempValue6 = (undefined4)((ulonglong)tempResult2 >> 0x20);\n    tempResult1 = perform_operation_080082d0(tempValue3,tempValue5,(int)tempResult2,tempValue6);\n    tempValue7 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n    tempValue2 = (undefined4)tempResult1;\n    tempResult3 = perform_operation_080082d0(tempValue3,tempValue5,tempValue2,tempValue7);\n    tempResult2 = perform_operation_080082d0((int)tempResult3,(int)((ulonglong)tempResult3 >> 0x20),(int)tempResult2,tempValue6);\n    tempResult3 = calculate_multiplication_and_addition_08008640(tempValue1,tempValue4,0x2e037073,0x3ba3198a);\n    tempResult2 = perform_operation_080082d0((int)tempResult3,(int)((ulonglong)tempResult3 >> 0x20),(int)tempResult2,\n                          (int)((ulonglong)tempResult2 >> 0x20));\n    tempResult3 = perform_operation_080082d0(tempValue2,tempValue7,(int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20));\n    if ((int)(((int)positiveFlag >> 0x14) - ((uint)((int)((ulonglong)tempResult3 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    tempResult2 = calculate_multiplication_and_addition_08008640(tempValue1,tempValue4,0x2e000000,0x3ba3198a);\n    tempValue3 = (undefined4)((ulonglong)tempResult2 >> 0x20);\n    tempResult1 = perform_operation_080082d0(tempValue2,tempValue7,(int)tempResult2,tempValue3);\n    tempResult3 = perform_operation_080082d0(tempValue2,tempValue7);\n    tempResult2 = perform_operation_080082d0((int)tempResult3,(int)((ulonglong)tempResult3 >> 0x20),(int)tempResult2,tempValue3);\n    tempResult3 = calculate_multiplication_and_addition_08008640(tempValue1,tempValue4,0x252049c1,0x397b839a);\n    tempResult2 = perform_operation_080082d0((int)tempResult3,(int)((ulonglong)tempResult3 >> 0x20),(int)tempResult2,\n                          (int)((ulonglong)tempResult2 >> 0x20));\n  }\n  tempResult3 = perform_operation_080082d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),(int)tempResult2,\n                        (int)((ulonglong)tempResult2 >> 0x20));\nLAB_0800a0ce:\n  localVariable2 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n  localVariable1 = (undefined4)tempResult1;\n  *resultArray = tempResult3;\n  tempResult1 = perform_operation_080082d0(localVariable1,localVariable2);\n  tempResult1 = perform_operation_080082d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),(int)tempResult2,\n                        (int)((ulonglong)tempResult2 >> 0x20));\n  resultArray[1] = tempResult1;\n  if ((int)inputFlag < 0) {\n    *(int *)resultArray = (int)tempResult3;\n    *(int *)((int)resultArray + 4) = (int)((ulonglong)tempResult3 >> 0x20) + -0x80000000;\n    *(int *)(resultArray + 1) = (int)tempResult1;\n    *(int *)((int)resultArray + 0xc) = (int)((ulonglong)tempResult1 >> 0x20) + -0x80000000;\n    calculationResult = -calculationResult;\n  }\n  return calculationResult;\n}\n\n",
            "renaming": {
                "FUN_08009d78": "calculate_result_08009d78",
                "param_1": "inputValue",
                "param_2": "inputFlag",
                "param_3": "resultArray",
                "uVar1": "tempValue1",
                "uVar2": "tempValue2",
                "uVar3": "tempValue3",
                "uVar4": "tempValue4",
                "uVar5": "tempValue5",
                "uVar6": "tempValue6",
                "uVar7": "tempValue7",
                "uVar8": "positiveFlag",
                "iVar9": "calculationResult",
                "uVar10": "tempResult1",
                "uVar11": "tempResult2",
                "uVar12": "tempResult3",
                "local_50": "localVariable1",
                "uStack_4c": "localVariable2",
                "local_40": "localVariable3",
                "local_38": "localVariable4",
                "local_30": "localVariable5"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_0800856c",
                "FUN_08008640",
                "FUN_08008b10",
                "FUN_0800b2cc",
                "FUN_0800a5a0",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a1bc": {
            "entrypoint": "0x0800a1bc",
            "current_name": "perform_calculations_0800a1bc",
            "code": "\nuint performCalculations_0800a1bc(uint input1,uint input2)\n\n{\n  uint mask1;\n  int temp1;\n  uint mask2;\n  undefined4 temp2;\n  uint mask3;\n  uint mask4;\n  uint variable1;\n  uint variable2;\n  uint variable3;\n  int temp3;\n  uint result1;\n  uint shift;\n  undefined8 result2;\n  \n  if ((~input2 & 0x7ff00000) == 0) {\n    result2 = calculate_multiplication_and_addition_08008640(input1,input2,input1,input2);\n    variable1 = perform_unsigned_integer_operation_080082d4((int)result2,(int)((ulonglong)result2 >> 0x20),input1,input2);\n    return variable1;\n  }\n  if ((int)input2 < 1) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return input1;\n    }\n    if (input2 != 0) {\n      result2 = perform_operation_080082d0(input1,input2,input1);\n      temp2 = (undefined4)((ulonglong)result2 >> 0x20);\n      variable1 = calculate_floating_point_08008894((int)result2,temp2,(int)result2,temp2);\n      return variable1;\n    }\n    do {\n      variable3 = input1;\n      variable1 = variable3 >> 0xb;\n      input2 = input2 - 0x15;\n      input1 = variable3 << 0x15;\n    } while (variable1 == 0);\n    mask1 = input2;\n    if (-1 < (int)variable3) goto LAB_0800a290;\n    shift = 0x20;\n    mask3 = 0xffffffff;\n    variable3 = input1;\n  }\n  else {\n    mask1 = (int)input2 >> 0x14;\n    variable1 = input2;\n    variable3 = input1;\n    if (mask1 != 0) goto LAB_0800a1da;\nLAB_0800a290:\n    variable3 = 0;\n    shift = variable1;\n    do {\n      mask3 = variable3;\n      variable1 = shift << 1;\n      temp3 = shift << 0xc;\n      variable3 = mask3 + 1;\n      shift = variable1;\n    } while (-1 < temp3);\n    shift = 0x20 - variable3;\n    input2 = mask1;\n    variable3 = input1 << (variable3 & 0xff);\n  }\n  variable1 = input1 >> (shift & 0xff) | variable1;\n  mask1 = input2 - mask3;\nLAB_0800a1da:\n  variable1 = variable1 & 0xfffff | 0x100000;\n  if (-1 < (int)(mask1 << 0x1f)) {\n    variable1 = variable1 * 2 - ((int)variable3 >> 0x1f);\n    variable3 = variable3 << 1;\n  }\n  shift = 0;\n  variable1 = variable1 * 2 - ((int)variable3 >> 0x1f);\n  variable3 = variable3 << 1;\n  mask1 = 0;\n  temp3 = 0x16;\n  mask3 = 0x200000;\n  do {\n    temp1 = mask1 + mask3;\n    if (temp1 <= (int)variable1) {\n      variable1 = variable1 - temp1;\n      mask1 = temp1 + mask3;\n      shift = shift + mask3;\n    }\n    temp3 = temp3 + -1;\n    variable1 = variable1 * 2 - ((int)variable3 >> 0x1f);\n    mask3 = mask3 >> 1;\n    variable3 = variable3 << 1;\n  } while (temp3 != 0);\n  temp1 = 0x20;\n  mask4 = 0x80000000;\n  temp3 = 0;\n  mask3 = 0;\n  do {\n    mask2 = mask4 + temp3;\n    result1 = mask1;\n    if ((int)mask1 < (int)variable1) {\n      if ((int)mask2 < 0) {\nLAB_0800a26a:\n        if (-1 < (int)(mask2 + mask4)) {\n          result1 = mask1 + 1;\n        }\n      }\n      variable2 = variable1 - mask1;\n      mask1 = result1;\n      if (variable3 < mask2) {\n        variable2 = variable2 - 1;\n      }\nLAB_0800a262:\n      temp3 = mask2 + mask4;\n      variable3 = variable3 - mask2;\n      mask3 = mask3 + mask4;\n      variable1 = variable2;\n    }\n    else if ((variable1 == mask1) && (mask2 <= variable3)) {\n      if ((int)mask2 < 0) goto LAB_0800a26a;\n      variable2 = 0;\n      mask1 = variable1;\n      goto LAB_0800a262;\n    }\n    temp1 = temp1 + -1;\n    mask4 = mask4 >> 1;\n    variable1 = variable1 * 2 - ((int)variable3 >> 0x1f);\n    variable3 = variable3 << 1;\n    if (temp1 == 0) {\n      if ((variable1 | variable3) == 0) {\n        mask3 = mask3 >> 1;\n      }\n      else if (mask3 == 0xffffffff) {\n        shift = shift + 1;\n        mask3 = 0;\n      }\n      else {\n        mask3 = mask3 + 1 >> 1;\n      }\n      if ((shift & 1) != 0) {\n        mask3 = mask3 | 0x80000000;\n      }\n      return mask3;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800a1bc": "perform_calculations_0800a1bc",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "mask1",
                "iVar2": "temp1",
                "uVar3": "mask2",
                "uVar4": "temp2",
                "uVar5": "mask3",
                "uVar6": "mask4",
                "uVar7": "variable1",
                "uVar8": "variable2",
                "uVar9": "variable3",
                "iVar10": "temp3",
                "uVar11": "result1",
                "uVar12": "shift",
                "uVar13": "result2"
            },
            "calling": [
                "FUN_08009b24",
                "FUN_080098d0"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a348": {
            "entrypoint": "0x0800a348",
            "current_name": "calculate_result_0800a348",
            "code": "\nundefined4 calculate_result_0800a348(undefined4 input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  int result1;\n  undefined4 result2;\n  undefined4 result3;\n  uint normalizedInput2;\n  undefined8 multipliedResult;\n  undefined8 finalResult;\n  undefined8 calculatedResult;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  undefined4 tempVar4;\n  \n  normalizedInput2 = input2 & 0x7fffffff;\n  if (normalizedInput2 < 0x3e400000) {\n    result1 = calculate_value_08008ba0();\n    if (result1 == 0) {\n      return 0;\n    }\n    multipliedResult = calculate_multiplication_and_addition_08008640(input1,input2,input1,input2);\n    result3 = (undefined4)((ulonglong)multipliedResult >> 0x20);\n    result2 = (undefined4)multipliedResult;\n    finalResult = calculate_multiplication_and_addition_08008640(result2,result3,0xbe8838d4,0xbda8fae9);\n    finalResult = perform_unsigned_integer_operation_080082d4((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    finalResult = calculate_multiplication_and_addition_08008640((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result2,result3);\n    finalResult = perform_operation_080082d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0x809c52ad,0x3e927e4f);\n    finalResult = calculate_multiplication_and_addition_08008640((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result2,result3);\n    finalResult = perform_unsigned_integer_operation_080082d4((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0x19cb1590,0x3efa01a0);\n    finalResult = calculate_multiplication_and_addition_08008640((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result2,result3);\n    finalResult = perform_operation_080082d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0x16c15177,0x3f56c16c);\n    finalResult = calculate_multiplication_and_addition_08008640((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result2,result3);\n    finalResult = perform_unsigned_integer_operation_080082d4((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0x5555554c,0x3fa55555);\n    finalResult = calculate_multiplication_and_addition_08008640((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result2,result3);\n  }\n  else {\n    multipliedResult = calculate_multiplication_and_addition_08008640(input1,input2,input1,input2);\n    result3 = (undefined4)((ulonglong)multipliedResult >> 0x20);\n    result2 = (undefined4)multipliedResult;\n    finalResult = calculate_multiplication_and_addition_08008640(result2,result3,0xbe8838d4,0xbda8fae9);\n    finalResult = perform_unsigned_integer_operation_080082d4((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    finalResult = calculate_multiplication_and_addition_08008640((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result2,result3);\n    finalResult = perform_operation_080082d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0x809c52ad,0x3e927e4f);\n    finalResult = calculate_multiplication_and_addition_08008640((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result2,result3);\n    finalResult = perform_unsigned_integer_operation_080082d4((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0x19cb1590,0x3efa01a0);\n    finalResult = calculate_multiplication_and_addition_08008640((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result2,result3);\n    finalResult = perform_operation_080082d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0x16c15177,0x3f56c16c);\n    finalResult = calculate_multiplication_and_addition_08008640((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result2,result3);\n    finalResult = perform_unsigned_integer_operation_080082d4((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0x5555554c,0x3fa55555);\n    finalResult = calculate_multiplication_and_addition_08008640((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result2,result3);\n    if (0x3fd33332 < normalizedInput2) {\n      if (normalizedInput2 < 0x3fe90001) {\n        result1 = normalizedInput2 - 0x200000;\n        multipliedResult = perform_operation_080082d0(0,0x3ff00000,0,result1);\n      }\n      else {\n        result1 = 0x3fd20000;\n        multipliedResult = 0x3fe7000000000000;\n      }\n      tempVar4 = (undefined4)((ulonglong)multipliedResult >> 0x20);\n      tempVar3 = (undefined4)multipliedResult;\n      multipliedResult = calculate_multiplication_and_addition_08008640(result2,result3,0,0x3fe00000);\n      multipliedResult = perform_operation_080082d0((int)multipliedResult,(int)((ulonglong)multipliedResult >> 0x20),0,result1);\n      finalResult = calculate_multiplication_and_addition_08008640(result2,result3,(int)finalResult,(int)((ulonglong)finalResult >> 0x20));\n      calculatedResult = calculate_multiplication_and_addition_08008640(input1,input2,input3,input4);\n      finalResult = perform_operation_080082d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)calculatedResult,\n                           (int)((ulonglong)calculatedResult >> 0x20));\n      multipliedResult = perform_operation_080082d0((int)multipliedResult,(int)((ulonglong)multipliedResult >> 0x20),(int)finalResult,\n                           (int)((ulonglong)finalResult >> 0x20));\n      result2 = perform_operation_080082d0(tempVar3,tempVar4,(int)multipliedResult,(int)((ulonglong)multipliedResult >> 0x20));\n      return result2;\n    }\n  }\n  tempVar2 = (undefined4)((ulonglong)finalResult >> 0x20);\n  tempVar1 = (undefined4)finalResult;\n  result2 = (undefined4)((ulonglong)multipliedResult >> 0x20);\n  finalResult = calculate_multiplication_and_addition_08008640((int)multipliedResult,result2,0,0x3fe00000);\n  multipliedResult = calculate_multiplication_and_addition_08008640((int)multipliedResult,result2,tempVar1,tempVar2);\n  calculatedResult = calculate_multiplication_and_addition_08008640(input1,input2,input3,input4);\n  multipliedResult = perform_operation_080082d0((int)multipliedResult,(int)((ulonglong)multipliedResult >> 0x20),(int)calculatedResult,\n                       (int)((ulonglong)calculatedResult >> 0x20));\n  multipliedResult = perform_operation_080082d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)multipliedResult,\n                       (int)((ulonglong)multipliedResult >> 0x20));\n  result2 = perform_operation_080082d0(0,0x3ff00000,(int)multipliedResult,(int)((ulonglong)multipliedResult >> 0x20));\n  return result2;\n}\n\n",
            "renaming": {
                "FUN_0800a348": "calculate_result_0800a348",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "normalizedInput2",
                "uVar5": "multipliedResult",
                "uVar6": "finalResult",
                "uVar7": "calculatedResult",
                "local_30": "tempVar1",
                "uStack_2c": "tempVar2",
                "local_28": "tempVar3",
                "uStack_24": "tempVar4"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a5a0": {
            "entrypoint": "0x0800a5a0",
            "current_name": "calculate_verification_result_0800a5a0",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nuint calculateVerificationResult_0800a5a0(int input,undefined8 *output,int inputLength,int segmentSize,int operationType,int operationData)\n\n{\n  undefined4 *ptr1;\n  uint result;\n  uint temp1;\n  int index;\n  uint *ptr2;\n  undefined4 temp2;\n  uint **ptrArray;\n  undefined4 temp3;\n  int counter;\n  undefined4 *ptr3;\n  undefined4 temp4;\n  uint temp5;\n  uint *ptr4;\n  int counter2;\n  int segmentIndex;\n  undefined8 *ptr16;\n  int counter3;\n  undefined4 *ptr18;\n  undefined8 *ptr19;\n  undefined4 result0;\n  int temp6;\n  undefined8 *presult2;\n  undefined4 *presult3;\n  bool bVar24;\n  undefined8 temp7;\n  undefined8 accumulatedValue;\n  undefined8 temp8;\n  undefined8 *tempArray;\n  int tempLength;\n  int tempLength2;\n  int segments;\n  uint *segmentArray [2];\n  uint verificationArray [20];\n  undefined8 temp9;\n  undefined8 operationResult;\n  int tempArray2 [38];\n  undefined8 temp10;\n  \n  segmentIndex = *(int *)(&DAT_0800c060 + operationType * 4);\n  counter = segmentSize + -1;\n  segmentArray[1] = (uint *)output;\n  if (inputLength + 0x14 < 0 == SCARRY4(inputLength,0x14)) {\n    segments = (inputLength + -3) / 0x18;\n    tempLength2 = (segments + 1) * -0x18;\n  }\n  else {\n    tempLength2 = -0x18;\n    segments = 0;\n  }\n  tempLength2 = inputLength + tempLength2;\n  counter3 = segments - counter;\n  if (-1 < segmentIndex + counter) {\n    temp6 = segmentIndex + counter + 1 + counter3;\n    ptr16 = &temp9;\n    do {\n      while (counter3 < 0) {\n        counter3 = counter3 + 1;\n        *(undefined4 *)ptr16 = 0;\n        *(undefined4 *)((int)ptr16 + 4) = 0;\n        ptr16 = ptr16 + 1;\n        if (counter3 == temp6) goto LAB_0800a626;\n      }\n      accumulatedValue = shift_and_merge_0800856c(*(undefined4 *)(operationData + counter3 * 4));\n      counter3 = counter3 + 1;\n      *ptr16 = accumulatedValue;\n      ptr16 = ptr16 + 1;\n    } while (counter3 != temp6);\n  }\nLAB_0800a626:\n  ptr3 = (undefined4 *)(input + -8);\n  if (-1 < segmentIndex) {\n    presult2 = &temp9 + segmentSize;\n    counter3 = counter;\n    ptr16 = &temp10;\n    do {\n      if (counter < 0) {\n        accumulatedValue = 0;\n      }\n      else {\n        accumulatedValue = 0;\n        presult3 = ptr3;\n        ptr19 = presult2;\n        do {\n          ptr18 = presult3 + 2;\n          temp7 = calculate_multiplication_and_addition_08008640(*ptr18,presult3[3],*(undefined4 *)(ptr19 + -1),\n                                *(undefined4 *)((int)ptr19 + -4));\n          accumulatedValue = perform_unsigned_integer_operation_080082d4((int)accumulatedValue,(int)((ulonglong)accumulatedValue >> 0x20),(int)temp7,\n                                (int)((ulonglong)temp7 >> 0x20));\n          presult3 = ptr18;\n          ptr19 = ptr19 + -1;\n        } while (ptr18 != ptr3 + segmentSize * 2);\n      }\n      counter3 = counter3 + 1;\n      *ptr16 = accumulatedValue;\n      presult2 = presult2 + 1;\n      ptr16 = ptr16 + 1;\n    } while (counter3 != segmentIndex + segmentSize);\n  }\n  segmentArray[0] = verificationArray + segmentIndex + -1;\n  counter3 = segmentIndex;\n  do {\n    accumulatedValue = CONCAT44(*(undefined4 *)((int)&temp10 + counter3 * 8 + 4),\n                      *(undefined4 *)(&temp10 + counter3));\n    if (0 < counter3) {\n      ptr16 = &temp10 + counter3;\n      ptr2 = verificationArray;\n      do {\n        temp2 = (undefined4)((ulonglong)accumulatedValue >> 0x20);\n        calculate_multiplication_and_addition_08008640((int)accumulatedValue,temp2,0,0x3e700000);\n        calculate_value_08008ba0();\n        temp7 = shift_and_merge_0800856c();\n        temp3 = (undefined4)((ulonglong)temp7 >> 0x20);\n        temp8 = calculate_multiplication_and_addition_08008640((int)temp7,temp3,0,0x41700000);\n        perform_operation_080082d0((int)accumulatedValue,temp2,(int)temp8,(int)((ulonglong)temp8 >> 0x20));\n        result = calculate_value_08008ba0();\n        presult2 = ptr16 + -1;\n        temp2 = *(undefined4 *)presult2;\n        temp4 = *(undefined4 *)((int)ptr16 + -4);\n        *ptr2 = result;\n        accumulatedValue = perform_unsigned_integer_operation_080082d4((int)temp7,temp3,temp2,temp4);\n        ptr16 = presult2;\n        ptr2 = ptr2 + 1;\n      } while (presult2 != &temp10);\n    }\n    accumulatedValue = perform_arithmetic_operation_0800b2e8((int)accumulatedValue,(int)((ulonglong)accumulatedValue >> 0x20),tempLength2);\n    temp3 = (undefined4)((ulonglong)accumulatedValue >> 0x20);\n    calculate_multiplication_and_addition_08008640((int)accumulatedValue,temp3,0,0x3fc00000);\n    temp7 = calculate_result_080094c0();\n    temp7 = calculate_multiplication_and_addition_08008640((int)temp7,(int)((ulonglong)temp7 >> 0x20),0,0x40200000);\n    accumulatedValue = perform_operation_080082d0((int)accumulatedValue,temp3,(int)temp7,(int)((ulonglong)temp7 >> 0x20));\n    result = calculate_value_08008ba0();\n    temp7 = shift_and_merge_0800856c();\n    accumulatedValue = perform_operation_080082d0((int)accumulatedValue,(int)((ulonglong)accumulatedValue >> 0x20),(int)temp7,\n                          (int)((ulonglong)temp7 >> 0x20));\n    temp2 = (undefined4)((ulonglong)accumulatedValue >> 0x20);\n    temp3 = (undefined4)accumulatedValue;\n    if (tempLength2 < 1) {\n      if (tempLength2 == 0) {\n        temp6 = (int)verificationArray[counter3 + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      temp6 = check_verification_status_08008b4c(temp3,temp2,0,0x3fe00000);\n      if (temp6 != 0) {\n        result = result + 1;\n        if (counter3 < 1) {\n          accumulatedValue = perform_operation_080082d0(0,0x3ff00000,temp3,temp2);\n          temp6 = 2;\n          goto LAB_0800a7a4;\n        }\n        temp6 = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      index = (int)verificationArray[counter3 + -1] >> (0x18U - tempLength2 & 0xff);\n      temp5 = verificationArray[counter3 + -1] - (index << (0x18U - tempLength2 & 0xff));\n      temp6 = (int)temp5 >> (0x17U - tempLength2 & 0xff);\n      verificationArray[counter3 + -1] = temp5;\n      result = result + index;\njoined_r0x0800a8b8:\n      if (0 < temp6) {\n        result = result + 1;\n        if (counter3 < 1) {\n          bVar24 = false;\n        }\n        else {\nLAB_0800a8c8:\n          if (verificationArray[0] == 0) {\n            bVar24 = false;\n            if (counter3 != 1) {\n              ptr2 = verificationArray;\n              index = 1;\n              do {\n                ptr2 = ptr2 + 1;\n                if (*ptr2 != 0) {\n                  counter2 = index + 1;\n                  temp5 = *ptr2;\n                  goto LAB_0800a8e2;\n                }\n                index = index + 1;\n              } while (index != counter3);\n              bVar24 = false;\n            }\n          }\n          else {\n            counter2 = 1;\n            index = 0;\n            temp5 = verificationArray[0];\nLAB_0800a8e2:\n            verificationArray[index] = 0x1000000 - temp5;\n            if (counter2 < counter3) {\n              temp5 = verificationArray[counter2];\n              ptr2 = verificationArray + counter2;\n              while( true ) {\n                ptr4 = ptr2 + 1;\n                *ptr2 = 0xffffff - temp5;\n                if (ptr4 == verificationArray + counter3) break;\n                temp5 = *ptr4;\n                ptr2 = ptr4;\n              }\n            }\n            bVar24 = true;\n          }\n        }\n        if (0 < tempLength2) {\n          if (tempLength2 == 1) {\n            verificationArray[counter3 + -1] = verificationArray[counter3 + -1] & 0x7fffff;\n          }\n          else if (tempLength2 == 2) {\n            verificationArray[counter3 + -1] = verificationArray[counter3 + -1] & 0x3fffff;\n          }\n        }\n        if (temp6 == 2) {\n          accumulatedValue = perform_operation_080082d0(0,0x3ff00000,temp3,temp2);\n          if (bVar24) {\n            temp7 = perform_arithmetic_operation_0800b2e8(0,0x3ff00000,tempLength2);\n            accumulatedValue = perform_operation_080082d0((int)accumulatedValue,(int)((ulonglong)accumulatedValue >> 0x20),(int)temp7,\n                                  (int)((ulonglong)temp7 >> 0x20));\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    temp3 = (undefined4)((ulonglong)accumulatedValue >> 0x20);\n    index = check_parameter_and_return_08008b10((int)accumulatedValue,temp3,0,0);\n    if (index == 0) {\n      accumulatedValue = perform_arithmetic_operation_0800b2e8((int)accumulatedValue,temp3,-tempLength2);\n      temp2 = (undefined4)((ulonglong)accumulatedValue >> 0x20);\n      temp3 = (undefined4)accumulatedValue;\n      counter = check_verification_status_08008b4c(temp3,temp2,0,0x41700000);\n      if (counter == 0) {\n        temp5 = calculate_value_08008ba0(temp3,temp2);\n        verificationArray[counter3] = temp5;\n        index = counter3;\n      }\n      else {\n        calculate_multiplication_and_addition_08008640(temp3,temp2,0,0x3e700000);\n        temp5 = calculate_value_08008ba0();\n        accumulatedValue = shift_and_merge_0800856c();\n        accumulatedValue = calculate_multiplication_and_addition_08008640((int)accumulatedValue,(int)((ulonglong)accumulatedValue >> 0x20),0,0x41700000);\n        perform_operation_080082d0(temp3,temp2,(int)accumulatedValue,(int)((ulonglong)accumulatedValue >> 0x20));\n        temp1 = calculate_value_08008ba0();\n        tempLength2 = tempLength2 + 0x18;\n        verificationArray[counter3] = temp1;\n        verificationArray[counter3 + 1] = temp5;\n        index = counter3 + 1;\n      }\n      goto LAB_0800a9f6;\n    }\n    index = counter3 + -1;\n    if (segmentIndex <= index) {\n      temp5 = 0;\n      ptr2 = verificationArray + counter3 + 0x3fffffff;\n      do {\n        ptr4 = ptr2 + -1;\n        temp5 = temp5 | *ptr2;\n        ptr2 = ptr4;\n      } while (ptr4 != segmentArray[0]);\n      if (temp5 != 0) break;\n    }\n    if (verificationArray[segmentIndex + -1] == 0) {\n      tempLength = 1;\n      ptrArray = segmentArray + segmentIndex;\n      do {\n        ptr2 = *ptrArray;\n        tempLength = tempLength + 1;\n        ptrArray = ptrArray + -1;\n      } while (ptr2 == (uint *)0x0);\n      tempLength = counter3 + tempLength;\n    }\n    else {\n      tempLength = counter3 + 1;\n    }\n    temp6 = counter3 + 1;\n    presult3 = (undefined4 *)(operationData + (temp6 + segments + 0x3fffffff) * 4);\n    ptr16 = &temp9 + counter3 + segmentSize;\n    tempArray = &temp10 + temp6;\n    do {\n      presult3 = presult3 + 1;\n      accumulatedValue = shift_and_merge_0800856c(*presult3);\n      *ptr16 = accumulatedValue;\n      presult2 = ptr16 + 1;\n      if (counter < 0) {\n        temp7 = 0;\n      }\n      else {\n        temp7 = 0;\n        ptr18 = ptr3;\n        while( true ) {\n          ptr16 = ptr16 + -1;\n          ptr1 = ptr18 + 2;\n          accumulatedValue = calculate_multiplication_and_addition_08008640((int)accumulatedValue,(int)((ulonglong)accumulatedValue >> 0x20),*ptr1,ptr18[3]);\n          temp7 = perform_unsigned_integer_operation_080082d4((int)temp7,(int)((ulonglong)temp7 >> 0x20),(int)accumulatedValue,\n                                (int)((ulonglong)accumulatedValue >> 0x20));\n          if (ptr1 == ptr3 + segmentSize * 2) break;\n          accumulatedValue = *ptr16;\n          ptr18 = ptr1;\n        }\n      }\n      *tempArray = temp7;\n      temp6 = temp6 + 1;\n      counter3 = tempLength;\n      ptr16 = presult2;\n      tempArray = tempArray + 1;\n    } while (temp6 <= tempLength);\n  } while( true );\n  tempLength2 = tempLength2 + -0x18;\n  if (verificationArray[index] == 0) {\n    ptr2 = verificationArray + counter3 + 0x3ffffffe;\n    do {\n      temp5 = *ptr2;\n      index = index + -1;\n      tempLength2 = tempLength2 + -0x18;\n      ptr2 = ptr2 + -1;\n    } while (temp5 == 0);\n  }\nLAB_0800a9f6:\n  accumulatedValue = perform_arithmetic_operation_0800b2e8(0,0x3ff00000,tempLength2);\n  if (index < 0) {\n    if (2 < operationType) {\n      if (operationType == 3) {\n        accumulatedValue = 0;\nLAB_0800abe4:\n        if (temp6 == 0) {\n          *segmentArray[1] = (undefined4)operationResult;\n          *(int *)((int)segmentArray[1] + 4) = operationResult._4_4_;\n          *(undefined8 *)((int)segmentArray[1] + 0x10) = accumulatedValue;\n          *(int *)((int)segmentArray[1] + 8) = tempArray2[0];\n          *(int *)((int)segmentArray[1] + 0xc) = tempArray2[1];\n          return result & 7;\n        }\n        *(int *)((int)segmentArray[1] + 0x10) = (int)accumulatedValue;\n        *(int *)((int)segmentArray[1] + 8) = tempArray2[0];\n        *(int *)((int)segmentArray[1] + 0x14) = (int)((ulonglong)accumulatedValue >> 0x20) + -0x80000000;\n        *(int *)((int)segmentArray[1] + 4) = operationResult._4_4_ + -0x80000000;\n        *(int *)((int)segmentArray[1] + 0xc) = tempArray2[1] + -0x80000000;\n        *segmentArray[1] = (undefined4)operationResult;\n        return result & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (operationType < 1) {\n      if (operationType != 0) goto LAB_0800ab0e;\n      accumulatedValue = 0;\nLAB_0800aafc:\n      counter = (int)((ulonglong)accumulatedValue >> 0x20);\n      if (temp6 != 0) {\n        counter = counter + -0x80000000;\n      }\n      *segmentArray[1] = (int)accumulatedValue;\n      *(int *)((int)segmentArray[1] + 4) = counter;\nLAB_0800ab0e:\n      return result & 7;\n    }\n    accumulatedValue = 0;\n  }\n  else {\n    presult2 = &temp10 + index;\n    ptr2 = verificationArray + index + 1;\n    ptr16 = &temp10 + index + 1;\n    do {\n      temp3 = (undefined4)((ulonglong)accumulatedValue >> 0x20);\n      ptr2 = ptr2 + -1;\n      temp7 = shift_and_merge_0800856c(*ptr2);\n      temp7 = calculate_multiplication_and_addition_08008640((int)temp7,(int)((ulonglong)temp7 >> 0x20),(int)accumulatedValue,temp3);\n      ptr16 = ptr16 + -1;\n      *ptr16 = temp7;\n      accumulatedValue = calculate_multiplication_and_addition_08008640((int)accumulatedValue,temp3,0,0x3e700000);\n    } while (ptr2 != verificationArray);\n    counter = 0;\n    do {\n      if (segmentIndex < 0) {\n        accumulatedValue = 0;\n      }\n      else {\n        temp3 = 0x40000000;\n        temp2 = 0x3ff921fb;\n        accumulatedValue = 0;\n        counter3 = 0;\n        ptr16 = presult2;\n        ptr3 = &DAT_0800c028;\n        while( true ) {\n          temp7 = calculate_multiplication_and_addition_08008640(*(undefined4 *)ptr16,*(undefined4 *)((int)ptr16 + 4),temp3,temp2\n                               );\n          accumulatedValue = perform_unsigned_integer_operation_080082d4((int)accumulatedValue,(int)((ulonglong)accumulatedValue >> 0x20),(int)temp7,\n                                (int)((ulonglong)temp7 >> 0x20));\n          counter3 = counter3 + 1;\n          if ((segmentIndex < counter3) || (counter < counter3)) break;\n          temp3 = *ptr3;\n          temp2 = ptr3[1];\n          ptr16 = ptr16 + 1;\n          ptr3 = ptr3 + 2;\n        }\n      }\n      bVar24 = counter != index;\n      *(int *)(&operationResult + counter) = (int)accumulatedValue;\n      *(int *)((int)&operationResult + (counter * 2 + 1) * 4) = (int)((ulonglong)accumulatedValue >> 0x20);\n      presult2 = presult2 + -1;\n      counter = counter + 1;\n    } while (bVar24);\n    if (2 < operationType) {\n      if (operationType == 3) {\n        if (index != 0) {\n          ptr16 = &operationResult + index;\n          accumulatedValue = CONCAT44(*(undefined4 *)((int)&operationResult + (index * 2 + 1) * 4),\n                            *(undefined4 *)ptr16);\n          do {\n            temp2 = (undefined4)((ulonglong)accumulatedValue >> 0x20);\n            temp3 = (undefined4)accumulatedValue;\n            temp4 = *(undefined4 *)(ptr16 + -1);\n            result0 = *(undefined4 *)((int)ptr16 + -4);\n            accumulatedValue = perform_unsigned_integer_operation_080082d4(temp3,temp2,temp4,result0);\n            temp7 = perform_operation_080082d0(temp4,result0,(int)accumulatedValue,(int)((ulonglong)accumulatedValue >> 0x20));\n            temp7 = perform_unsigned_integer_operation_080082d4((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp3,temp2);\n            *ptr16 = temp7;\n            ptr16 = ptr16 + -1;\n            *ptr16 = accumulatedValue;\n          } while (&operationResult != ptr16);\n          if (1 < index) {\n            ptr16 = &operationResult + index;\n            accumulatedValue = CONCAT44(*(undefined4 *)((int)&operationResult + (index * 2 + 1) * 4),\n                              *(undefined4 *)ptr16);\n            do {\n              temp2 = (undefined4)((ulonglong)accumulatedValue >> 0x20);\n              temp3 = (undefined4)accumulatedValue;\n              temp4 = *(undefined4 *)(ptr16 + -1);\n              result0 = *(undefined4 *)((int)ptr16 + -4);\n              accumulatedValue = perform_unsigned_integer_operation_080082d4(temp3,temp2,temp4,result0);\n              temp7 = perform_operation_080082d0(temp4,result0,(int)accumulatedValue,(int)((ulonglong)accumulatedValue >> 0x20));\n              temp7 = perform_unsigned_integer_operation_080082d4((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp3,temp2);\n              *ptr16 = temp7;\n              ptr16 = ptr16 + -1;\n              *ptr16 = accumulatedValue;\n            } while (&operationResult + 1 != ptr16);\n            accumulatedValue = 0;\n            ptr16 = &operationResult + index + 1;\n            do {\n              presult2 = ptr16 + -1;\n              accumulatedValue = perform_unsigned_integer_operation_080082d4((int)accumulatedValue,(int)((ulonglong)accumulatedValue >> 0x20),\n                                    *(undefined4 *)presult2,*(undefined4 *)((int)ptr16 + -4));\n              ptr16 = presult2;\n            } while (&operationResult + 2 != presult2);\n            goto LAB_0800abe4;\n          }\n        }\n        accumulatedValue = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (operationType < 1) {\n      if (operationType != 0) goto LAB_0800ab0e;\n      accumulatedValue = 0;\n      ptr16 = &operationResult + index + 1;\n      do {\n        presult2 = ptr16 + -1;\n        accumulatedValue = perform_unsigned_integer_operation_080082d4((int)accumulatedValue,(int)((ulonglong)accumulatedValue >> 0x20),*(undefined4 *)presult2,\n                              *(undefined4 *)((int)ptr16 + -4));\n        ptr16 = presult2;\n      } while (&operationResult != presult2);\n      goto LAB_0800aafc;\n    }\n    accumulatedValue = 0;\n    ptr16 = &operationResult + index + 1;\n    do {\n      presult2 = ptr16 + -1;\n      accumulatedValue = perform_unsigned_integer_operation_080082d4((int)accumulatedValue,(int)((ulonglong)accumulatedValue >> 0x20),*(undefined4 *)presult2,\n                            *(undefined4 *)((int)ptr16 + -4));\n      ptr16 = presult2;\n    } while (&operationResult != presult2);\n  }\n  counter = (int)((ulonglong)accumulatedValue >> 0x20);\n  temp3 = (undefined4)accumulatedValue;\n  if (temp6 == 0) {\n    *(undefined8 *)segmentArray[1] = accumulatedValue;\n    accumulatedValue = perform_operation_080082d0((undefined4)operationResult,operationResult._4_4_,temp3,counter);\n    if (index < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    counter = 1;\n    ptr16 = &operationResult;\n    do {\n      accumulatedValue = perform_unsigned_integer_operation_080082d4((int)accumulatedValue,(int)((ulonglong)accumulatedValue >> 0x20),\n                            *(undefined4 *)(ptr16 + 1),*(undefined4 *)((int)ptr16 + 0xc));\n      counter = counter + 1;\n      ptr16 = ptr16 + 1;\n    } while (counter <= index);\n    if (temp6 == 0) goto LAB_0800ad26;\n  }\n  else {\n    *segmentArray[1] = temp3;\n    *(int *)((int)segmentArray[1] + 4) = counter + -0x80000000;\n    accumulatedValue = perform_operation_080082d0((undefined4)operationResult,operationResult._4_4_,temp3,counter);\n    if (0 < index) goto LAB_0800ad04;\n  }\n  accumulatedValue = CONCAT44((int)((ulonglong)accumulatedValue >> 0x20) + -0x80000000,(int)accumulatedValue);\nLAB_0800ad26:\n  *(undefined8 *)((int)segmentArray[1] + 8) = accumulatedValue;\n  return result & 7;\n}\n\n",
            "renaming": {
                "FUN_0800a5a0": "calculate_verification_result_0800a5a0",
                "param_1": "input",
                "param_2": "output",
                "param_3": "inputLength",
                "param_4": "segmentSize",
                "param_5": "operationType",
                "param_6": "operationData",
                "puVar1": "ptr1",
                "uVar2": "result",
                "uVar3": "temp1",
                "iVar4": "index",
                "puVar5": "ptr2",
                "uVar6": "temp2",
                "ppuVar7": "ptrArray",
                "uVar8": "temp3",
                "iVar9": "counter",
                "puVar10": "ptr3",
                "uVar11": "temp4",
                "uVar12": "temp5",
                "puVar13": "ptr4",
                "iVar14": "counter2",
                "iVar15": "segmentIndex",
                "iVar17": "counter3",
                "iVar21": "temp6",
                "uVar25": "temp7",
                "uVar26": "accumulatedValue",
                "uVar27": "temp8",
                "local_284": "tempArray",
                "local_280": "tempLength",
                "local_270": "tempLength2",
                "local_26c": "segments",
                "local_260": "segmentArray",
                "local_258": "verificationArray",
                "uStack_208": "temp9",
                "local_168": "operationResult",
                "local_160": "tempArray2",
                "uStack_c8": "temp10"
            },
            "calling": [
                "FUN_08009d78"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_080094c0",
                "FUN_0800856c",
                "FUN_08008640",
                "FUN_0800b2e8",
                "FUN_08008b10",
                "FUN_08008b4c",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800adf0": {
            "entrypoint": "0x0800adf0",
            "current_name": "calculate_result_0800adf0",
            "code": "\nundefined4\ncalculate_result_0800adf0(undefined4 input_value,uint input_mask,undefined4 operand_1,undefined4 operand_2,int is_operation_required)\n\n{\n  int result;\n  undefined4 result_low;\n  undefined4 result_high;\n  undefined4 result_low_temp;\n  undefined4 result_high_temp;\n  undefined4 result_low_temp2;\n  undefined8 result_temp;\n  undefined8 result_temp2;\n  \n  if (((input_mask & 0x7fffffff) < 0x3e400000) && (result = calculate_value_08008ba0(), result == 0)) {\n    return input_value;\n  }\n  result_temp = calculate_multiplication_and_addition_08008640(input_value,input_mask,input_value);\n  result_low_temp = (undefined4)((ulonglong)result_temp >> 0x20);\n  result_high = (undefined4)result_temp;\n  result_temp = calculate_multiplication_and_addition_08008640(input_value,input_mask,result_high,result_low_temp);\n  result_high_temp = (undefined4)((ulonglong)result_temp >> 0x20);\n  result_low = (undefined4)result_temp;\n  result_temp = calculate_multiplication_and_addition_08008640(result_high,result_low_temp,0x5acfd57c,0x3de5d93a);\n  result_temp = perform_operation_080082d0((int)result_temp,(int)((ulonglong)result_temp >> 0x20),0x8a2b9ceb,0x3e5ae5e6);\n  result_temp = calculate_multiplication_and_addition_08008640((int)result_temp,(int)((ulonglong)result_temp >> 0x20),result_high,result_low_temp);\n  result_temp = perform_unsigned_integer_operation_080082d4((int)result_temp,(int)((ulonglong)result_temp >> 0x20),0x57b1fe7d,0x3ec71de3);\n  result_temp = calculate_multiplication_and_addition_08008640((int)result_temp,(int)((ulonglong)result_temp >> 0x20),result_high,result_low_temp);\n  result_temp = perform_operation_080082d0((int)result_temp,(int)((ulonglong)result_temp >> 0x20),0x19c161d5,0x3f2a01a0);\n  result_temp = calculate_multiplication_and_addition_08008640((int)result_temp,(int)((ulonglong)result_temp >> 0x20),result_high,result_low_temp);\n  result_temp = perform_unsigned_integer_operation_080082d4((int)result_temp,(int)((ulonglong)result_temp >> 0x20),0x1110f8a6,0x3f811111);\n  result_low_temp2 = (undefined4)((ulonglong)result_temp >> 0x20);\n  if (is_operation_required != 0) {\n    result_temp2 = calculate_multiplication_and_addition_08008640(operand_1,operand_2,0,0x3fe00000);\n    result_temp = calculate_multiplication_and_addition_08008640(result_low,result_high_temp,(int)result_temp,result_low_temp2);\n    result_temp = perform_operation_080082d0((int)result_temp2,(int)((ulonglong)result_temp2 >> 0x20),(int)result_temp,\n                         (int)((ulonglong)result_temp >> 0x20));\n    result_temp = calculate_multiplication_and_addition_08008640((int)result_temp,(int)((ulonglong)result_temp >> 0x20),result_high,result_low_temp);\n    result_temp = perform_operation_080082d0((int)result_temp,(int)((ulonglong)result_temp >> 0x20),operand_1,operand_2);\n    result_temp2 = calculate_multiplication_and_addition_08008640(result_low,result_high_temp,0x55555549,0x3fc55555);\n    result_temp = perform_unsigned_integer_operation_080082d4((int)result_temp,(int)((ulonglong)result_temp >> 0x20),(int)result_temp2,\n                         (int)((ulonglong)result_temp2 >> 0x20));\n    result_high = perform_operation_080082d0(input_value,input_mask,(int)result_temp,(int)((ulonglong)result_temp >> 0x20));\n    return result_high;\n  }\n  result_temp = calculate_multiplication_and_addition_08008640(result_high,result_low_temp,(int)result_temp,result_low_temp2);\n  result_temp = perform_operation_080082d0((int)result_temp,(int)((ulonglong)result_temp >> 0x20),0x55555549,0x3fc55555);\n  result_temp = calculate_multiplication_and_addition_08008640((int)result_temp,(int)((ulonglong)result_temp >> 0x20),result_low,result_high_temp);\n  result_high = perform_unsigned_integer_operation_080082d4((int)result_temp,(int)((ulonglong)result_temp >> 0x20),input_value,input_mask);\n  return result_high;\n}\n\n",
            "renaming": {
                "FUN_0800adf0": "calculate_result_0800adf0",
                "param_1": "input_value",
                "param_2": "input_mask",
                "param_3": "operand_1",
                "param_4": "operand_2",
                "param_5": "is_operation_required",
                "iVar1": "result",
                "uVar2": "result_low",
                "uVar3": "result_high",
                "uVar4": "result_low_temp",
                "uVar5": "result_high_temp",
                "uVar6": "result_low_temp2",
                "uVar7": "result_temp",
                "uVar8": "result_temp2"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800af78": {
            "entrypoint": "0x0800af78",
            "current_name": "calculate_value_0800af78",
            "code": "\nint calculateValue_0800af78(int value1,uint value2)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  int result;\n  undefined4 temp1;\n  uint temp2;\n  undefined8 temp3;\n  undefined8 temp4;\n  undefined4 localVariable;\n  \n  temp3 = CONCAT44(value2,value1);\n  temp2 = value2 & 0x7fffffff;\n  if (temp2 < 0x44100000) {\n    if (temp2 < 0x3fdc0000) {\n      if (temp2 < 0x3e200000) {\n        temp4 = perform_unsigned_integer_operation_080082d4(value1,value2,0x8800759c,0x7e37e43c);\n        result = check_null_termination_08008b60((int)temp4,(int)((ulonglong)temp4 >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return value1;\n        }\n      }\n      result = -1;\n    }\n    else {\n      temp3 = FUNC_0800b2cc();\n      result4 = (undefined4)((ulonglong)temp3 >> 0x20);\n      result1 = (undefined4)temp3;\n      if (temp2 < 0x3ff30000) {\n        if (temp2 < 0x3fe60000) {\n          temp3 = perform_unsigned_integer_operation_080082d4(result1,result4,result1,result4);\n          temp3 = perform_operation_080082d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),0,0x3ff00000);\n          temp4 = perform_unsigned_integer_operation_080082d4(result1,result4,0,0x40000000);\n          temp3 = calculate_floating_point_08008894((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp4,\n                               (int)((ulonglong)temp4 >> 0x20));\n          result = 0;\n        }\n        else {\n          temp3 = perform_operation_080082d0(result1,result4,0,0x3ff00000);\n          temp4 = perform_unsigned_integer_operation_080082d4(result1,result4,0,0x3ff00000);\n          temp3 = calculate_floating_point_08008894((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp4,\n                               (int)((ulonglong)temp4 >> 0x20));\n          result = 1;\n        }\n      }\n      else if (temp2 < 0x40038000) {\n        temp3 = perform_operation_080082d0(result1,result4,0,0x3ff80000);\n        temp4 = calculate_multiplication_and_addition_08008640(result1,result4,0,0x3ff80000);\n        temp4 = perform_unsigned_integer_operation_080082d4((int)temp4,(int)((ulonglong)temp4 >> 0x20),0,0x3ff00000);\n        temp3 = calculate_floating_point_08008894((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp4,\n                             (int)((ulonglong)temp4 >> 0x20));\n        result = 2;\n      }\n      else {\n        temp3 = calculate_floating_point_08008894(0,0xbff00000,result1,result4);\n        result = 3;\n      }\n    }\n    localVariable = (undefined4)((ulonglong)temp3 >> 0x20);\n    temp1 = (undefined4)temp3;\n    temp3 = calculate_multiplication_and_addition_08008640(temp1,localVariable,temp1);\n    result2 = (undefined4)((ulonglong)temp3 >> 0x20);\n    result1 = (undefined4)temp3;\n    temp3 = calculate_multiplication_and_addition_08008640(result1,result2,result1,result2);\n    result3 = (undefined4)((ulonglong)temp3 >> 0x20);\n    result4 = (undefined4)temp3;\n    temp3 = calculate_multiplication_and_addition_08008640(result4,result3,0xe322da11,0x3f90ad3a);\n    temp3 = perform_unsigned_integer_operation_080082d4((int)temp3,(int)((ulonglong)temp3 >> 0x20),0x24760deb,0x3fa97b4b);\n    temp3 = calculate_multiplication_and_addition_08008640((int)temp3,(int)((ulonglong)temp3 >> 0x20),result4,result3);\n    temp3 = perform_unsigned_integer_operation_080082d4((int)temp3,(int)((ulonglong)temp3 >> 0x20),0xa0d03d51,0x3fb10d66);\n    temp3 = calculate_multiplication_and_addition_08008640((int)temp3,(int)((ulonglong)temp3 >> 0x20),result4,result3);\n    temp3 = perform_unsigned_integer_operation_080082d4((int)temp3,(int)((ulonglong)temp3 >> 0x20),0xc54c206e,0x3fb745cd);\n    temp3 = calculate_multiplication_and_addition_08008640((int)temp3,(int)((ulonglong)temp3 >> 0x20),result4,result3);\n    temp3 = perform_unsigned_integer_operation_080082d4((int)temp3,(int)((ulonglong)temp3 >> 0x20),0x920083ff,0x3fc24924);\n    temp3 = calculate_multiplication_and_addition_08008640((int)temp3,(int)((ulonglong)temp3 >> 0x20),result4,result3);\n    temp3 = perform_unsigned_integer_operation_080082d4((int)temp3,(int)((ulonglong)temp3 >> 0x20),0x5555550d,0x3fd55555);\n    temp3 = calculate_multiplication_and_addition_08008640((int)temp3,(int)((ulonglong)temp3 >> 0x20),result1,result2);\n    result1 = (undefined4)((ulonglong)temp3 >> 0x20);\n    temp4 = calculate_multiplication_and_addition_08008640(result4,result3,0x2c6a6c2f,0xbfa2b444);\n    temp4 = perform_operation_080082d0((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x52defd9a,0x3fadde2d);\n    temp4 = calculate_multiplication_and_addition_08008640((int)temp4,(int)((ulonglong)temp4 >> 0x20),result4,result3);\n    temp4 = perform_operation_080082d0((int)temp4,(int)((ulonglong)temp4 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp4 = calculate_multiplication_and_addition_08008640((int)temp4,(int)((ulonglong)temp4 >> 0x20),result4,result3);\n    temp4 = perform_operation_080082d0((int)temp4,(int)((ulonglong)temp4 >> 0x20),0xfe231671,0x3fbc71c6);\n    temp4 = calculate_multiplication_and_addition_08008640((int)temp4,(int)((ulonglong)temp4 >> 0x20),result4,result3);\n    temp4 = perform_operation_080082d0((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x9998ebc4,0x3fc99999);\n    temp4 = calculate_multiplication_and_addition_08008640((int)temp4,(int)((ulonglong)temp4 >> 0x20),result4,result3);\n    result4 = (undefined4)((ulonglong)temp4 >> 0x20);\n    if (result == -1) {\n      temp3 = perform_unsigned_integer_operation_080082d4((int)temp3,result1,(int)temp4,result4);\n      temp3 = calculate_multiplication_and_addition_08008640((int)temp3,(int)((ulonglong)temp3 >> 0x20),temp1,localVariable);\n      result = perform_operation_080082d0(temp1,localVariable,(int)temp3,(int)((ulonglong)temp3 >> 0x20));\n      return result;\n    }\n    temp3 = perform_unsigned_integer_operation_080082d4((int)temp3,result1,(int)temp4,result4);\n    temp3 = calculate_multiplication_and_addition_08008640((int)temp3,(int)((ulonglong)temp3 >> 0x20),temp1,localVariable);\n    temp3 = perform_operation_080082d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),\n                         *(undefined4 *)(&UNK_0800c090 + result * 8),\n                         *(undefined4 *)(&UNK_0800c094 + result * 8));\n    temp3 = perform_operation_080082d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),temp1,localVariable);\n    result = perform_operation_080082d0(*(undefined4 *)(&UNK_0800c070 + result * 8),\n                         *(undefined4 *)(&UNK_0800c074 + result * 8),(int)temp3,\n                         (int)((ulonglong)temp3 >> 0x20));\n    if ((int)value2 < 0) {\n      return result;\n    }\n  }\n  else {\n    if ((0x7ff00000 < temp2) || ((temp2 == 0x7ff00000 && (value1 != 0)))) {\n      result = perform_unsigned_integer_operation_080082d4(value1,value2,value1);\n      return result;\n    }\n    result = 0x54442d18;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800af78": "calculate_value_0800af78",
                "param_1": "value1",
                "param_2": "value2",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "iVar5": "result",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "uVar8": "temp3",
                "uVar9": "temp4",
                "local_2c": "localVariable"
            },
            "calling": [
                "FUN_08009990"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b60",
                "FUN_08008640",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2cc": {
            "entrypoint": "0x0800b2cc",
            "current_name": "FUNC_0800b2cc",
            "code": "\nvoid FUNC_0800b2cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b2cc": "FUNC_0800b2cc"
            },
            "calling": [
                "FUN_08009990",
                "FUN_0800af78",
                "FUN_08009d78"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2d4": {
            "entrypoint": "0x0800b2d4",
            "current_name": "set_msb_0800b2d4",
            "code": "\nuint setMSB_0800b2d4(undefined4 arg1,uint arg2)\n\n{\n  return (arg2 | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_0800b2d4": "set_msb_0800b2d4",
                "param_1": "arg1",
                "param_2": "arg2"
            },
            "calling": [
                "FUN_0800981c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e0": {
            "entrypoint": "0x0800b2e0",
            "current_name": "initialize_application_0800b2e0",
            "code": "\nundefined4 initializeApplication_0800b2e0(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800b2e0": "initialize_application_0800b2e0"
            },
            "calling": [
                "FUN_0800981c",
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e8": {
            "entrypoint": "0x0800b2e8",
            "current_name": "perform_arithmetic_operation_0800b2e8",
            "code": "\nuint performArithmeticOperation_0800b2e8(uint inputValue1,uint inputValue2,int shiftAmount,undefined4 additionalParameter)\n\n{\n  uint shiftedValue;\n  int shiftedSum;\n  uint highBits;\n  undefined8 combinedValue;\n  \n  combinedValue = CONCAT44(inputValue2,inputValue1);\n  shiftedValue = (inputValue2 << 1) >> 0x15;\n  if (shiftedValue == 0) {\n    if ((inputValue1 | inputValue2 & 0x7fffffff) == 0) {\n      return inputValue1;\n    }\n    combinedValue = calculate_multiplication_and_addition_08008640(inputValue1,inputValue2,0,0x43500000);\n    if (shiftAmount < -50000) goto LAB_0800b34a;\n    shiftedValue = ((uint)((int)((ulonglong)combinedValue >> 0x20) << 1) >> 0x15) - 0x36;\n  }\n  else if (shiftedValue == 0x7ff) {\n    shiftedValue = perform_unsigned_integer_operation_080082d4(inputValue1,inputValue2,inputValue1,inputValue2,additionalParameter);\n    return shiftedValue;\n  }\n  highBits = (uint)((ulonglong)combinedValue >> 0x20);\n  shiftedSum = shiftedValue + shiftAmount;\n  if (shiftedSum < 0x7ff) {\n    if (0 < shiftedSum) {\n      return (uint)combinedValue;\n    }\n    if (shiftedSum + 0x35 < 0 == SCARRY4(shiftedSum,0x35)) {\n      shiftedValue = calculate_multiplication_and_addition_08008640((uint)combinedValue,highBits & 0x800fffff | (shiftedSum + 0x36) * 0x100000,0,0x3c900000);\n      return shiftedValue;\n    }\n    if (shiftAmount < 0xc351) {\n      combinedValue = CONCAT44(highBits & 0x80000000 | 0x1a56e1f,0xc2f8f359);\nLAB_0800b34a:\n      shiftedValue = calculate_multiplication_and_addition_08008640((int)combinedValue,(int)((ulonglong)combinedValue >> 0x20),0xc2f8f359,0x1a56e1f);\n      return shiftedValue;\n    }\n  }\n  shiftedValue = calculate_multiplication_and_addition_08008640(0x8800759c,highBits & 0x80000000 | 0x7e37e43c,0x8800759c,0x7e37e43c);\n  return shiftedValue;\n}\n\n",
            "renaming": {
                "FUN_0800b2e8": "perform_arithmetic_operation_0800b2e8",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "shiftAmount",
                "param_4": "additionalParameter",
                "uVar1": "shiftedValue",
                "iVar2": "shiftedSum",
                "uVar3": "highBits",
                "uVar4": "combinedValue"
            },
            "calling": [
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3dc": {
            "entrypoint": "0x0800b3dc",
            "current_name": "get_global_data_0800b3dc",
            "code": "\nundefined4 getGlobalData_0800b3dc(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_0800b3dc": "get_global_data_0800b3dc"
            },
            "calling": [
                "FUN_0800981c",
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3e8": {
            "entrypoint": "0x0800b3e8",
            "current_name": "execute_functions_0800b3e8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b3f4) */\n/* WARNING: Removing unreachable block (ram,0x0800b3f6) */\n\nvoid executeFunctions_0800b3e8(void)\n\n{\n  int count;\n  code **functionList;\n  \n  FUNC_0800b5b0();\n  count = 0;\n  functionList = (code **)&DAT_0800c0b4;\n  do {\n    count = count + 1;\n    (**functionList)();\n    functionList = functionList + 1;\n  } while (count != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b3e8": "execute_functions_0800b3e8",
                "iVar1": "count",
                "ppcVar2": "functionList"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800b4d0",
                "FUN_0800b5b0",
                "FUN_080001ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b430": {
            "entrypoint": "0x0800b430",
            "current_name": "memset_0800b430",
            "code": "\nvoid memset_0800b430(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  undefined4 value_concat;\n  bool end_reached;\n  \n  if (((uint)dest & 3) != 0) {\n    remaining_size = size - 1;\n    dest_ptr = dest;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      size = remaining_size;\n      if (((uint)dest & 3) == 0) break;\n      end_reached = remaining_size == 0;\n      remaining_size = remaining_size - 1;\n      dest_ptr = dest;\n      if (end_reached) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    value_concat = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    if (0xf < size) {\n      dest_ptr = dest + 4;\n      do {\n        dest_ptr[-4] = value_concat;\n        dest_ptr[-3] = value_concat;\n        dest_ptr[-2] = value_concat;\n        dest_ptr[-1] = value_concat;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x20));\n      remaining_size = size & 0xc;\n      dest = dest + ((size - 0x10 >> 4) + 1) * 4;\n      size = size & 0xf;\n      if (remaining_size == 0) goto joined_r0x0800b4a8;\n    }\n    dest_ptr = (undefined4 *)((size - 4 & 0xfffffffc) + 4 + (int)dest);\n    do {\n      src_ptr = dest + 1;\n      *dest = value_concat;\n      dest = src_ptr;\n    } while (dest_ptr != src_ptr);\n    size = size & 3;\n    dest = dest_ptr;\n  }\njoined_r0x0800b4a8:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      src_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = src_ptr;\n    } while ((undefined4 *)(size + (int)dest) != src_ptr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b430": "memset_0800b430",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "uVar3": "remaining_size",
                "uVar4": "value_concat",
                "bVar5": "end_reached"
            },
            "calling": [
                "FUN_080004ac",
                "FUN_08005814",
                "FUN_080079c0",
                "FUN_080005b4",
                "FUN_08001994",
                "FUN_08001ddc",
                "FUN_080002f0",
                "FUN_080024c4",
                "FUN_08002f24",
                "FUN_08004d7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b4d0": {
            "entrypoint": "0x0800b4d0",
            "current_name": "FUNC_0800b4d0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b4d4) */\n\nvoid FUNC_0800b4d0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b4d0": "FUNC_0800b4d0"
            },
            "calling": [
                "FUN_0800b3e8"
            ],
            "called": [
                "FUN_0800b524"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b51c": {
            "entrypoint": "0x0800b51c",
            "current_name": "FUNC_0800b51c",
            "code": "\nvoid FUNC_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b51c": "FUNC_0800b51c"
            },
            "calling": [
                "FUN_0800b524"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b520": {
            "entrypoint": "0x0800b520",
            "current_name": "FUNC_0800b520",
            "code": "\nvoid FUNC_0800b520(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b520": "FUNC_0800b520"
            },
            "calling": [
                "FUN_0800b524"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b524": {
            "entrypoint": "0x0800b524",
            "current_name": "function_name_0800b524",
            "code": "\nundefined4 functionName_0800b524(int inputParam1,undefined4 inputParam2,undefined4 inputParam3,undefined4 inputParam4)\n\n{\n  undefined *pointerVar1;\n  undefined4 returnValue;\n  uint bitMask;\n  uint counter;\n  \n  FUNC_0800b51c(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  pointerVar1 = DAT_20000168;\n  counter = *(uint *)(DAT_20000168 + 4);\n  if ((int)counter < 0x20) {\n    if (inputParam1 != 0) {\n      *(undefined4 *)(DAT_20000168 + counter * 4 + 0x88) = inputParam3;\n      bitMask = 1 << (counter & 0xff);\n      *(uint *)(pointerVar1 + 0x188) = *(uint *)(pointerVar1 + 0x188) | bitMask;\n      *(undefined4 *)(pointerVar1 + counter * 4 + 0x108) = inputParam4;\n      if (inputParam1 == 2) {\n        *(uint *)(pointerVar1 + 0x18c) = bitMask | *(uint *)(pointerVar1 + 0x18c);\n      }\n    }\n    returnValue = DAT_20000448;\n    *(uint *)(pointerVar1 + 4) = counter + 1;\n    *(undefined4 *)(pointerVar1 + (counter + 2) * 4) = inputParam2;\n    FUNC_0800b520(returnValue);\n    returnValue = 0;\n  }\n  else {\n    FUNC_0800b520(DAT_20000448);\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800b524": "function_name_0800b524",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "puVar1": "pointerVar1",
                "uVar2": "returnValue",
                "uVar3": "bitMask",
                "uVar4": "counter"
            },
            "calling": [
                "FUN_0800b4d0"
            ],
            "called": [
                "FUN_0800b51c",
                "FUN_0800b520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5b0": {
            "entrypoint": "0x0800b5b0",
            "current_name": "FUNC_0800b5b0",
            "code": "\nvoid FUNC_0800b5b0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5b0": "FUNC_0800b5b0"
            },
            "calling": [
                "FUN_0800b3e8",
                "FUN_080001ac",
                "FUN_08000188"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5bc": {
            "entrypoint": "0x0800b5bc",
            "current_name": "FUNC_0800b5bc",
            "code": "\nvoid FUNC_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5bc": "FUNC_0800b5bc"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 195065,
    "layers": [
        [
            "FUN_08000188",
            "FUN_080001ac",
            "FUN_08000210",
            "FUN_08000478",
            "FUN_080018cc",
            "FUN_080018fc",
            "FUN_0800192c",
            "FUN_08002870",
            "FUN_08002896",
            "FUN_08002f74",
            "FUN_08002fac",
            "FUN_080035ec",
            "FUN_08003980",
            "FUN_08005250",
            "FUN_080052ac",
            "FUN_080052dc",
            "FUN_08005360",
            "FUN_0800587c",
            "FUN_0800597c",
            "FUN_080059f8",
            "FUN_08005a68",
            "FUN_08005a84",
            "FUN_08005bdc",
            "FUN_080064ec",
            "FUN_08006950",
            "FUN_08006998",
            "FUN_080069b4",
            "FUN_080069e4",
            "FUN_08006a18",
            "FUN_08006a58",
            "FUN_08006a8c",
            "FUN_08006ac0",
            "FUN_08006b00",
            "FUN_08006b54",
            "FUN_08006ba0",
            "FUN_08006c04",
            "FUN_08006c70",
            "FUN_08006e88",
            "FUN_0800733e",
            "FUN_0800738e",
            "FUN_080073d4",
            "FUN_08007402",
            "FUN_08007430",
            "FUN_0800756c",
            "FUN_080076c8",
            "FUN_08007854",
            "FUN_080078f4",
            "FUN_080079e0",
            "FUN_08007a10",
            "FUN_08007b70",
            "FUN_08007bc2",
            "FUN_08007bf0",
            "FUN_08007c40",
            "FUN_08007c5e",
            "FUN_08007da8",
            "FUN_08007e1c",
            "FUN_08007e58",
            "FUN_08007e84",
            "FUN_08007ea4",
            "FUN_080082d0",
            "FUN_080082d4",
            "FUN_0800854c",
            "FUN_0800856c",
            "FUN_08008590",
            "FUN_0800881c",
            "FUN_08008a02",
            "FUN_08008a74",
            "FUN_08008b74",
            "FUN_08008ba0",
            "FUN_08008bf0",
            "FUN_08008c30",
            "FUN_08008cd8",
            "FUN_08008cdc",
            "FUN_08008e3c",
            "FUN_08008e44",
            "FUN_08008eec",
            "FUN_08009054",
            "FUN_0800919c",
            "FUN_08009278",
            "FUN_0800b2d4",
            "FUN_0800b2e0",
            "FUN_0800b3dc",
            "FUN_0800b3e8",
            "FUN_0800b430",
            "FUN_0800b524"
        ],
        [
            "FUN_080001f8",
            "FUN_08000268",
            "FUN_080002f0",
            "FUN_080004fc",
            "FUN_080028bc",
            "FUN_08002908",
            "FUN_08002ef0",
            "FUN_08002f40",
            "FUN_08005238",
            "FUN_08005324",
            "FUN_08005760",
            "FUN_08005778",
            "FUN_08005790",
            "FUN_080057e4",
            "FUN_08005984",
            "FUN_08005a98",
            "FUN_08005c30",
            "FUN_08005cec",
            "FUN_0800640c",
            "FUN_08006628",
            "FUN_08006c9c",
            "FUN_08006ce0",
            "FUN_08006cf6",
            "FUN_08006d2e",
            "FUN_08006d4a",
            "FUN_08006d66",
            "FUN_08006d8a",
            "FUN_08006d98",
            "FUN_08006dc4",
            "FUN_08006de0",
            "FUN_08006dfe",
            "FUN_08006e1a",
            "FUN_08007520",
            "FUN_0800778c",
            "FUN_08007884",
            "FUN_080079c0",
            "FUN_08007d08",
            "FUN_08008250",
            "FUN_0800826a",
            "FUN_08008640",
            "FUN_08008894",
            "FUN_08008b00",
            "FUN_08009204",
            "FUN_080095b8",
            "FUN_08009654",
            "FUN_08009798"
        ],
        [
            "FUN_080002a0",
            "FUN_080002b6",
            "FUN_08000310",
            "FUN_08000340",
            "FUN_0800056c",
            "FUN_080025e8",
            "FUN_0800283a",
            "FUN_08002f24",
            "FUN_0800369c",
            "FUN_080036c6",
            "FUN_080036f0",
            "FUN_08003778",
            "FUN_080053a0",
            "FUN_08005814",
            "FUN_0800583c",
            "FUN_0800585c",
            "FUN_0800618c",
            "FUN_08006680",
            "FUN_080066cc",
            "FUN_08006d72",
            "FUN_08007a70",
            "FUN_08008af0",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_080091fc",
            "FUN_08009214",
            "FUN_08009228",
            "FUN_0800923c",
            "FUN_0800a1bc",
            "FUN_0800a348",
            "FUN_0800adf0",
            "FUN_0800b2e8"
        ],
        [
            "FUN_08000374",
            "FUN_080003ec",
            "FUN_0800195c",
            "FUN_08002638",
            "FUN_08003740",
            "FUN_0800375c",
            "FUN_080037fc",
            "FUN_08003826",
            "FUN_08003a18",
            "FUN_08004030",
            "FUN_08004148",
            "FUN_080041a0",
            "FUN_08004228",
            "FUN_0800423c",
            "FUN_08005900",
            "FUN_080059b4",
            "FUN_08007436",
            "FUN_08007ad0",
            "FUN_08007c7c",
            "FUN_08007f54",
            "FUN_08008b4c",
            "FUN_08008b60",
            "FUN_08009250",
            "FUN_08009264",
            "FUN_080098d0",
            "FUN_08009b24"
        ],
        [
            "FUN_0800184c",
            "FUN_08002978",
            "FUN_080039a0",
            "FUN_08004250",
            "FUN_080046d0",
            "FUN_08004900",
            "FUN_08004940",
            "FUN_08004bc0",
            "FUN_08004bf4",
            "FUN_08004c2a",
            "FUN_080074c8",
            "FUN_08007e08",
            "FUN_08008190",
            "FUN_08008286",
            "FUN_08009318",
            "FUN_080094c0",
            "FUN_0800981c",
            "FUN_0800af78"
        ],
        [
            "FUN_08001994",
            "FUN_080029d8",
            "FUN_08002afc",
            "FUN_08002c18",
            "FUN_08004c48",
            "FUN_08004d2c",
            "FUN_08004d7c",
            "FUN_08004e30",
            "FUN_08007930",
            "thunk_FUN_08009990",
            "FUN_08009990",
            "FUN_0800a5a0"
        ],
        [
            "FUN_080004ac",
            "FUN_08001d4c",
            "FUN_08002a94",
            "FUN_08002ba8",
            "FUN_08002e08",
            "FUN_080044e8",
            "FUN_08004dd2",
            "FUN_08007756",
            "FUN_08009d78"
        ],
        [
            "FUN_08002edc",
            "FUN_080051b4",
            "FUN_08009410",
            "FUN_080096e8"
        ],
        [
            "FUN_08003004",
            "FUN_08003618"
        ],
        [
            "FUN_080058a0"
        ],
        [
            "FUN_08003a74"
        ],
        [
            "FUN_08001e98",
            "FUN_08002fd4"
        ],
        [
            "FUN_08000220",
            "FUN_08001f00",
            "FUN_08002408",
            "FUN_080024c4",
            "FUN_0800525c"
        ],
        [
            "FUN_080005b4"
        ],
        [
            "FUN_080039bc"
        ],
        [
            "FUN_08003b98"
        ],
        [
            "FUN_08003f34"
        ],
        [
            "FUN_08001ddc"
        ],
        [
            "FUN_08007540"
        ]
    ],
    "locked_functions": []
}