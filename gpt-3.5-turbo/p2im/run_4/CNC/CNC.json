{
    "functions": {
        "FUN_0800192c": {
            "renaming": {
                "FUN_0800192c": "check_bitwise_flag_0800192c",
                "PTR_DAT_08001954": "flag_array",
                "PTR_DAT_08001958": "result_array"
            },
            "code": "void check_bitwise_flag_0800192c(void)\n{\n  if ((PTR_DAT_08001954[0x28] & 8) == 0) {\n    *(int *)PTR_DAT_08001958 = 0;\n  }\n  else {\n    *(int *)PTR_DAT_08001958 = 1;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800192c",
            "calling": [
                "FUN_08004e30",
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "check_bitwise_flag_0800192c"
        },
        "FUN_08006950": {
            "renaming": {
                "FUN_08006950": "setBitsInMemory_08006950",
                "param_1": "inputBit",
                "*(uint *)(DAT_08006994 + 0xc)": "memoryLocation",
                "uint": "unsigned int",
                "mask": "0xf8ff",
                "input": "inputBitMasked",
                "shiftedInput": "inputBitShifted",
                "constantValue": "memoryConstant"
            },
            "code": "void setBitsInMemory_08006950(uint inputBit){\n    uint* *(uint *)(DAT_08006994 + 0xc) = (uint*)(DAT_08006994 + 0xc);\n    uint mask = 0xf8ff;\n    uint input = inputBit & 7;\n    uint shiftedInput = input << 8;\n    uint constantValue = 0x5fa0000;\n    **(uint *)(DAT_08006994 + 0xc) = (**(uint *)(DAT_08006994 + 0xc) & mask) | shiftedInput | constantValue;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006950",
            "calling": [
                "FUN_08006ce0"
            ],
            "imported": false,
            "current_name": "setBitsInMemory_08006950"
        },
        "FUN_08008ba0": {
            "renaming": {
                "FUN_08008ba0": "ConvertToSignedFixedPoint_08008ba0",
                "param_1": "integerPart",
                "param_2": "fractionalPart",
                "uVar1": "shiftCount",
                "iVar2": "shiftAmount",
                "uVar3": "unused",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint ConvertToSignedFixedPoint_08008ba0(uint integerPart, uint fractionalPart) {\n  uint result = 0;\n  int shiftAmount = fractionalPart * 2 + 0x200000;\n  if (fractionalPart * 2 < 0xffe00000) {\n    if (-1 < shiftAmount) {\n      return 0;\n    }\n    uint shiftCount = -shiftAmount - 0x3e1;\n    if (shiftAmount >> 0x15 < 0xfffffc20 && shiftCount != 0) {\n      result = (fractionalPart << 0xb | 0x80000000 | integerPart >> 0x15) >> (shiftCount & 0xff);\n      if ((fractionalPart & 0x80000000) != 0) {\n        result = -result;\n      }\n      return result;\n    }\n  }\n  else if ((integerPart | fractionalPart << 0xc) != 0) {\n    return 0;\n  }\n  fractionalPart = fractionalPart & 0x80000000;\n  if (fractionalPart == 0) {\n    fractionalPart = 0x7fffffff;\n  }\n  return fractionalPart;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ba0",
            "calling": [
                "FUN_0800a348",
                "FUN_080005b4",
                "FUN_08009d78",
                "FUN_0800a5a0",
                "FUN_08003004",
                "FUN_0800adf0",
                "FUN_080095b8",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "ConvertToSignedFixedPoint_08008ba0"
        },
        "FUN_08005a5c": {
            "renaming": {
                "FUN_08005a5c": "do_nothing_08005a5c"
            },
            "code": "\nvoid do_nothing_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a5c",
            "calling": [
                "FUN_080059f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08005a5c"
        },
        "FUN_08005984": {
            "renaming": {
                "FUN_08005984": "send_interrupt_if_not_sent_before_08005984",
                "param_1": "input_param",
                "uVar1": "return_value",
                "PTR_DAT_080059b0": "ptr_to_dat",
                "dat_val": "dat_value"
            },
            "code": "int send_interrupt_if_not_sent_before_08005984(int input_param)\n{\n  int* PTR_DAT_080059b0 = (int*)PTR_DAT_080059b0;\n  int dat_val = *PTR_DAT_080059b0;\n  if (dat_val == 0) {\n    return send_software_interrupt_0800597c(1, input_param, 0);\n  }\n  else {\n    return 0;\n  }\n}",
            "called": [
                "FUN_0800597c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005984",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "send_interrupt_if_not_sent_before_08005984"
        },
        "FUN_08007a10": {
            "renaming": {
                "FUN_08007a10": "set_flag_08007a10",
                "param_1": "flag_value",
                "DAT_08007a64": "flag_ptr"
            },
            "code": "void set_flag_08007a10(int flag_value)\n{\n    uint *DAT_08007a64 = (uint *)(DAT_08007a64 + 0x40);\n    if (flag_value == 0x40000000) {\n        *DAT_08007a64 |= 1;\n    }\n    else if (flag_value == DAT_08007a68) {\n        *DAT_08007a64 |= 2;\n    }\n    else if (flag_value == DAT_08007a6c) {\n        *DAT_08007a64 |= 4;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007a10",
            "calling": [
                "FUN_08007ad0",
                "FUN_08007d08"
            ],
            "imported": false,
            "current_name": "set_flag_08007a10"
        },
        "FUN_0800856c": {
            "renaming": {
                "FUN_0800856c": "calculate_shifted_value_0800856c",
                "param_1": "value",
                "uVar1": "shifted_value",
                "uVar2": "absolute_value",
                "uVar3": "shift_amount",
                "iVar4": "count_leading_zeroes_result",
                "uVar5": "shift_amount_plus_0x15",
                "uVar6": "sign_bit",
                "in_r12": "in_r12",
                "bVar7": "is_shift_amount_negative",
                "bVar8": "is_shift_amount_zero",
                "bVar9": "is_carry",
                "zero_padded_value": "zero_padded_value",
                "difference": "difference",
                "inverse_shift_amount": "inverse_shift_amount"
            },
            "code": "ulonglong calculate_shifted_value_0800856c(uint value)\n{\n  uint absolute_value = value;\n  uint sign_bit = value & 0x80000000;\n  if (value == 0) {\n    return 0;\n  }\n  if ((int)sign_bit < 0) {\n    absolute_value = -value;\n  }\n  uint shift_amount = count_leading_zeroes(absolute_value) + 0x15;\n  bool is_shift_amount_negative = (int)(shift_amount - 0xb) < 0;\n  bool is_shift_amount_zero = shift_amount == 0;\n  bool is_carry = SBORROW4(shift_amount,0x20);\n  if ((int)shift_amount < 0x20) {\n    is_carry = SCARRY4(shift_amount,0xc);\n    shift_amount = shift_amount + 1;\n    is_shift_amount_negative = shift_amount < 0;\n    is_shift_amount_zero = shift_amount == 0;\n    if (!is_shift_amount_zero && is_shift_amount_negative == is_carry) {\n      uint shifted_value = absolute_value << (shift_amount & 0xff);\n      absolute_value = absolute_value >> (0xcU - shift_amount & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  uint in_r12 = 0;\n  if (is_shift_amount_zero || is_shift_amount_negative != is_carry) {\n    in_r12 = 0x20 - shift_amount;\n  }\n  uint shifted_value = absolute_value << (shift_amount & 0xff);\n  if (is_shift_amount_zero || is_shift_amount_negative != is_carry) {\n    shifted_value = shifted_value | 0U >> (in_r12 & 0xff);\n  }\n  uint zero_padded_value = 0;\n  if (is_shift_amount_zero || is_shift_amount_negative != is_carry) {\n    zero_padded_value = 0 << (shift_amount & 0xff);\n  }\n  LAB_08008458:\n  if ((int)shift_amount < 0x433) {\n    return CONCAT44(shifted_value + (0x432 - shift_amount) * 0x100000 | sign_bit, zero_padded_value);\n  }\n  uint inverse_shift_amount = ~(0x432 - shift_amount);\n  if (0x1e < (int)inverse_shift_amount) {\n    return CONCAT44(value, shifted_value >> (inverse_shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  int difference = inverse_shift_amount - 0x13;\n  if (difference == 0 || difference < 0 != SCARRY4(inverse_shift_amount - 0x1f,0xc)) {\n    inverse_shift_amount = inverse_shift_amount + 1;\n    return CONCAT44(sign_bit | shifted_value >> (inverse_shift_amount & 0xff), zero_padded_value >> (inverse_shift_amount & 0xff) | shifted_value << (0x20 - inverse_shift_amount & 0xff));\n  }\n  return CONCAT44(value, zero_padded_value >> (0x20 - (0xcU - difference) & 0xff) | shifted_value << (0xcU - difference & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800856c",
            "calling": [
                "FUN_08009d78",
                "FUN_0800a5a0",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_0800856c"
        },
        "FUN_08008b00": {
            "renaming": {
                "FUN_08008b00": "check_and_return_param_08008b00",
                "param_1": "input_param",
                "check_params_08008a74": "check_input_params"
            },
            "code": "undefined4 check_and_return_param_08008b00(undefined4 input_param)\n{\n  check_input_params();\n  return input_param;\n}",
            "called": [
                "FUN_08008a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b00",
            "calling": [
                "FUN_08008b24",
                "FUN_08008af0",
                "FUN_08008b10"
            ],
            "imported": false,
            "current_name": "check_and_return_param_08008b00"
        },
        "FUN_0800585c": {
            "renaming": {
                "FUN_0800585c": "check_and_process_data_0800585c",
                "PTR_DAT_08005878": "data_pointer",
                "process_data_08005790": "process_data",
                "second_element": "data_element"
            },
            "code": "void check_and_process_data_0800585c(void)\n{\n    char second_element = PTR_DAT_08005878[1];\n    if (second_element == '\\x02') {\n        PTR_DAT_08005878[1] = 3;\n        process_data_08005790();\n    }\n    return;\n}",
            "called": [
                "FUN_08005790"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800585c",
            "calling": [
                "FUN_08001e98",
                "FUN_080024c4",
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "check_and_process_data_0800585c"
        },
        "FUN_0800597c": {
            "renaming": {
                "FUN_0800597c": "send_software_interrupt_0800597c",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void send_software_interrupt_0800597c(void)\n{\n  software_interrupt(SYSTEM_CALL_INTERRUPT);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800597c",
            "calling": [
                "FUN_08005984"
            ],
            "imported": false,
            "current_name": "send_software_interrupt_0800597c"
        },
        "FUN_08009798": {
            "renaming": {
                "FUN_08009798": "calculate_double_to_longlong_08009798",
                "param_1": "double_low",
                "param_2": "double_high",
                "uVar1": "exponent_bias",
                "uVar2": "exponent",
                "lVar3": "result",
                "DAT_08009814": "mask"
            },
            "code": "long long calculate_double_to_longlong_08009798(uint32_t double_low, uint32_t double_high, undefined4 param_3, undefined4 param_4)\n{\n    uint32_t exponent = (double_high << 1) >> 0x15;\n    uint32_t exponent_bias = exponent - 0x3ff;\n    long long result;\n    if ((int)exponent_bias < 0x14) {\n        if ((int)exponent_bias < 0) {\n            return ((unsigned long long)double_high & 0x80000000) << 0x20;\n        }\n        uint32_t DAT_08009814 = ~(DAT_08009814 >> (exponent_bias & 0xff));\n        result = (unsigned long long)(double_high & DAT_08009814) << 0x20;\n    }\n    else {\n        if ((int)exponent_bias < 0x34) {\n            uint32_t DAT_08009814 = ~(0xffffffffU >> (exponent - 0x413 & 0xff));\n            result = CONCAT44(double_high, double_low & DAT_08009814);\n        }\n        else {\n            if (exponent_bias != 0x400) {\n                result = CONCAT44(double_high, double_low);\n            }\n            else {\n                result = FUNC_080082d4(double_low, double_high, double_low, double_high, param_4);\n            }\n        }\n    }\n    return result;\n}",
            "called": [
                "FUN_080082d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009798",
            "calling": [
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "calculate_double_to_longlong_08009798"
        },
        "FUN_08008cd8": {
            "renaming": {
                "FUN_08008cd8": "FUNC_08008cd8"
            },
            "code": "\nuint FUNC_08008cd8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08008e12:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if (uVar5 - 1 == 0 || uVar4 < 0x800000) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_08008e12;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008cd8",
            "calling": [
                "FUN_08004940",
                "FUN_080005b4",
                "FUN_08002908",
                "FUN_080028bc",
                "FUN_08003004",
                "FUN_08002978",
                "FUN_08002408",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "FUNC_08008cd8"
        },
        "FUN_08007930": {
            "renaming": {
                "FUN_08007930": "process_data_08007930",
                "PTR_DAT_080079b8": "data_pointer",
                "PTR_DAT_080079bc": "data_pointer_2",
                "get_bits_at_positions_08007884": "get_bits_at_positions",
                "calculate_sum_of_four_values_080078f4": "calculate_sum_of_four_values",
                "set_bits_based_on_input_080074c8": "set_bits_based_on_input",
                "set_bit_in_short_array_08007520": "set_bit_in_short_array"
            },
            "code": "void process_data_08007930()\n{\n  uint32_t *data_ptr = PTR_DAT_080079b8;\n  if (*data_ptr != 0) {\n    int current_index = *(int *)(data_ptr + 0x14);\n    uint32_t bits = get_bits_at_positions_08007884();\n    *(uint32_t *)(data_ptr + current_index * 4) = bits;\n    if (*(int *)(data_ptr + 0x14) == 3) {\n      current_index = 0;\n    }\n    else {\n      current_index = *(int *)(data_ptr + 0x14) + 1;\n    }\n    *(int *)(data_ptr + 0x14) = current_index;\n    uint32_t sum = calculate_sum_of_four_values_080078f4();\n    if (sum != *(uint32_t *)(data_ptr + 0x10)) {\n      uint32_t old_sum = *(uint32_t *)(data_ptr + 0x10);\n      if ((~old_sum & sum) != 0) {\n        set_bits_based_on_input_080074c8(~old_sum & sum);\n      }\n      if ((~sum & old_sum) != 0) {\n        set_bit_in_short_array_08007520(~sum & old_sum);\n      }\n      *(uint32_t *)(data_ptr + 0x10) = sum;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08007520",
                "FUN_080074c8",
                "FUN_080078f4",
                "FUN_08007884"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007930",
            "calling": [
                "FUN_08007756"
            ],
            "imported": false,
            "current_name": "process_data_08007930"
        },
        "FUN_080082ba": {
            "renaming": {
                "FUN_080082ba": "do_nothing_080082ba"
            },
            "code": "\nvoid do_nothing_080082ba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080082ba",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "do_nothing_080082ba"
        },
        "FUN_08000188": {
            "renaming": {
                "FUN_08000188": "check_initialized_08000188",
                "*param_1": "*data_ptr",
                "*PTR_DAT_080001a0": "*flag_ptr",
                "DAT_080001a4": "count",
                "PTR_FUN_080001a8": "init_ptr"
            },
            "code": "int *check_initialized_08000188(int *data_ptr) {\n    if (*PTR_DAT_080001a0 == 0) {\n        if (DAT_080001a4 != 0) {\n            data_ptr = PTR_FUN_080001a8;\n        }\n        *PTR_DAT_080001a0 = 1;\n    }\n    return data_ptr;\n}",
            "called": [
                "FUN_0800b5b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000188",
            "calling": [],
            "imported": false,
            "current_name": "check_initialized_08000188"
        },
        "FUN_080082d0": {
            "renaming": {
                "FUN_080082d0": "FUNC_080082d0"
            },
            "code": "\nulonglong FUNC_080082d0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if (uVar9 - 1 != 0 && 0xfffff < uVar11) goto LAB_080083e0;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_08008458:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080082d0",
            "calling": [
                "FUN_08009410",
                "FUN_08009990",
                "FUN_080096e8",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_08009d78",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800a1bc",
                "FUN_0800a348",
                "FUN_0800a5a0",
                "FUN_0800adf0"
            ],
            "imported": false,
            "current_name": "FUNC_080082d0"
        },
        "FUN_08009318": {
            "renaming": {
                "FUN_08009318": "calculate_result_08009318",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "is_end",
                "uVar2": "shift_difference",
                "uVar3": "shift_amount",
                "bVar4": "carry",
                "uVar5": "temp",
                "lVar6": "result"
            },
            "code": "longlong calculate_result_08009318(uint input1, uint input2, undefined4 param_3, undefined4 param_4)\n{\n  int shift_amount = (input2 << 1) >> 0x15;\n  int shift_difference = shift_amount - 0x3ff;\n  longlong result = CONCAT44(input2,input1);\n  if (shift_difference < 0x14) {\n    if (shift_difference < 0) {\n      undefined8 temp = FUNC_080082d4(input1, input2, DAT_08009400, DAT_08009404, param_4);\n      int is_end = is_end_of_string_08008b60((int)temp, (int)((ulonglong)temp >> 0x20), 0, 0);\n      if (is_end != 0) {\n        if ((int)input2 < 0) {\n          result = -0x8000000000000000;\n        }\n        else {\n          input1 = input1 | input2;\n          result = CONCAT44(input1, input1);\n          if (input1 != 0) {\n            result = (ulonglong)DAT_0800940c << 0x20;\n          }\n        }\n      }\n    }\n    else {\n      uint mask = DAT_08009408 >> (shift_difference & 0xff);\n      if ((input2 & mask | input1) != 0) {\n        undefined8 temp = FUNC_080082d4(input1, input2, DAT_08009400, DAT_08009404, param_4);\n        int is_end = is_end_of_string_08008b60((int)temp, (int)((ulonglong)temp >> 0x20), 0, 0);\n        if (is_end != 0) {\n          if (0 < (int)input2) {\n            input2 = input2 + (0x100000 >> (shift_difference & 0xff));\n          }\n          result = (ulonglong)(input2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if (shift_difference < 0x34) {\n    uint mask = 0xffffffff >> (shift_amount - 0x413 & 0xff);\n    if ((mask & input1) != 0) {\n      undefined8 temp = FUNC_080082d4(input1, input2, DAT_08009400, DAT_08009404, param_4);\n      int is_end = is_end_of_string_08008b60((int)temp, (int)((ulonglong)temp >> 0x20), 0, 0);\n      if (is_end != 0) {\n        if (0 < (int)input2) {\n          if (shift_difference == 0x14) {\n            input2 = input2 + 1;\n          }\n          else {\n            uint carry = CARRY4((1 << (0x34 - shift_difference & 0xff)), input1);\n            input1 = (1 << (0x34 - shift_difference & 0xff)) + input1;\n            if (carry != 0) {\n              input2 = input2 + 1;\n            }\n          }\n        }\n        result = CONCAT44(input2, input1 & ~mask);\n      }\n    }\n  }\n  else {\n    if (shift_difference == 0x400) {\n      result = FUNC_080082d4();\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_080082d4",
                "FUN_08008b60"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009318",
            "calling": [
                "FUN_08001994",
                "FUN_08003004",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_result_08009318"
        },
        "FUN_080018cc": {
            "renaming": {
                "FUN_080018cc": "set_param_080018cc",
                "param_1": "parameter",
                "DAT_080018f8": "data_address",
                "mask": "mask"
            },
            "code": "void set_param_080018cc(uint parameter)\n{\n    uint* DAT_080018f8 = (uint*)(DAT_080018f8 + 0x14);\n    uint mask = 0xfffffaaf;\n    *DAT_080018f8 = parameter | (*DAT_080018f8 & mask);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018cc",
            "calling": [
                "FUN_08001994"
            ],
            "imported": false,
            "current_name": "set_param_080018cc"
        },
        "FUN_080079e0": {
            "renaming": {
                "FUN_080079e0": "set_bit_in_array_080079e0",
                "param_1": "bit",
                "DAT_08007a0c": "array"
            },
            "code": "void set_bit_in_array_080079e0(int bit, int* DAT_08007a0c) {\n    int index = bit >> 5;\n    int offset = bit & 0x1f;\n    int* ptr = DAT_08007a0c + index;\n    *ptr |= 1 << offset;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080079e0",
            "calling": [
                "FUN_08007a70"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_080079e0"
        },
        "FUN_08006a58": {
            "renaming": {
                "FUN_08006a58": "set_bit_in_array_08006a58",
                "param_1": "bit_position",
                "DAT_08006a88": "array_ptr",
                "shifted_position": "shifted_position",
                "array_index": "array_index",
                "bit_mask": "bit_mask"
            },
            "code": "void set_bit_in_array_08006a58(byte bit_position)\n{\n    int* DAT_08006a88 = DAT_08006a88;\n    uint shifted_position = (uint) bit_position >> 5;\n    uint array_index = shifted_position + 0x40;\n    uint bit_mask = 1 << (bit_position & 0x1f);\n    DAT_08006a88[array_index] = bit_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006a58",
            "calling": [
                "FUN_08006dc4"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08006a58"
        },
        "FUN_08005a84": {
            "renaming": {
                "FUN_08005a84": "get_data_from_pointer_08005a84",
                "PTR_DAT_08005a94": "PTR_DATA"
            },
            "code": "int get_data_from_pointer_08005a84() {\n    int* data_ptr = (int*)PTR_DAT_08005a94;\n    return *data_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a84",
            "calling": [
                "FUN_08005a98",
                "FUN_0800618c",
                "FUN_08005cec",
                "FUN_08000268",
                "FUN_08007756"
            ],
            "imported": false,
            "current_name": "get_data_from_pointer_08005a84"
        },
        "FUN_08008b10": {
            "renaming": {
                "FUN_08008b10": "is_param_not_null_08008b10",
                "in_ZR": "user_input",
                "check_and_return_param_08008b00": "check_and_return_param"
            },
            "code": "bool is_param_not_null_08008b10(void)\\n{\\n  char user_input;\\n  check_and_return_param();\\n  return user_input != \"\\0\";\\n}",
            "called": [
                "FUN_08008b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b10",
            "calling": [
                "FUN_08009d78",
                "FUN_0800a5a0"
            ],
            "imported": false,
            "current_name": "is_param_not_null_08008b10"
        },
        "FUN_08004e30": {
            "renaming": {
                "FUN_08004e30": "FUNC_08004e30"
            },
            "code": "\nundefined4 FUNC_08004e30(int param_1,uint param_2)\n\n{\n  undefined uVar1;\n  undefined2 uVar2;\n  undefined4 uVar3;\n  int iVar4;\n  undefined8 uVar5;\n  \n  switch(param_1) {\n  case 0:\n  case 1:\n  case 2:\n    iVar4 = check_results_are_zero_or_negative_0800923c(param_2,0);\n    if (iVar4 != 0) {\n      return 8;\n    }\n    *(uint *)(PTR_DAT_080051a8 + param_1 * 4) = param_2;\n    break;\n  case 3:\n    iVar4 = is_input_empty_08009228(param_2,DAT_080051ac);\n    if (iVar4 != 0) {\n      return 9;\n    }\n    uVar5 = calculate_hash_08008590(param_2);\n    uVar5 = calculate_double_precision_value_08009654((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar1 = calculate_shift_amount_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    PTR_DAT_080051a8[0xd] = uVar1;\n    break;\n  case 4:\n    *(uint *)(PTR_DAT_080051a8 + 0x10) = param_2;\n    break;\n  case 5:\n    *(uint *)(PTR_DAT_080051a8 + 0x14) = param_2;\n    break;\n  case 6:\n    uVar5 = calculate_hash_08008590(param_2);\n    uVar5 = calculate_double_to_longlong_08009798((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar2 = calculate_shift_amount_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    *(undefined2 *)(PTR_DAT_080051a8 + 0x18) = uVar2;\n    break;\n  case 7:\n    uVar5 = calculate_hash_08008590(param_2);\n    uVar5 = calculate_double_precision_value_08009654((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar1 = calculate_shift_amount_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    PTR_DAT_080051a8[0x3c] = uVar1;\n    break;\n  case 8:\n    uVar3 = FUNC_08008eec(param_2,DAT_080051b0);\n    uVar3 = FUNC_08008eec(uVar3,DAT_080051b0);\n    *(undefined4 *)(PTR_DAT_080051a8 + 0x20) = uVar3;\n    break;\n  case 9:\n    *(uint *)(PTR_DAT_080051a8 + 0x24) = param_2 & 0x7fffffff;\n    break;\n  case 10:\n    *(uint *)(PTR_DAT_080051a8 + 0x1c) = param_2;\n    break;\n  case 0xb:\n    uVar5 = calculate_hash_08008590(param_2);\n    uVar5 = calculate_double_precision_value_08009654((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar1 = calculate_shift_amount_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    PTR_DAT_080051a8[0x3e] = uVar1;\n    break;\n  case 0xc:\n    uVar5 = calculate_hash_08008590(param_2);\n    uVar5 = calculate_double_precision_value_08009654((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar1 = calculate_shift_amount_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    PTR_DAT_080051a8[0x3d] = uVar1;\n    break;\n  case 0xd:\n    iVar4 = check_if_input_is_valid_08009214(param_2,0);\n    if (iVar4 == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 1;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xfe;\n    }\n    break;\n  case 0xe:\n    iVar4 = check_if_input_is_valid_08009214(param_2,0);\n    if (iVar4 == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 2;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xfd;\n    }\n    break;\n  case 0xf:\n    iVar4 = check_if_input_is_valid_08009214(param_2,0);\n    if (iVar4 == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 4;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xfb;\n    }\n    break;\n  case 0x10:\n    iVar4 = check_if_input_is_valid_08009214(param_2,0);\n    if (iVar4 == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 8;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xf7;\n    }\n    check_bitwise_flag_0800192c();\n    break;\n  case 0x11:\n    iVar4 = check_if_input_is_valid_08009214(param_2,0);\n    if (iVar4 == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 0x10;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xef;\n    }\n    break;\n  case 0x12:\n    uVar5 = calculate_hash_08008590(param_2);\n    uVar5 = calculate_double_to_longlong_08009798((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar2 = calculate_shift_amount_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    *(undefined2 *)(PTR_DAT_080051a8 + 0x2a) = uVar2;\n    break;\n  case 0x13:\n    *(uint *)(PTR_DAT_080051a8 + 0x2c) = param_2;\n    break;\n  case 0x14:\n    *(uint *)(PTR_DAT_080051a8 + 0x30) = param_2;\n    break;\n  case 0x15:\n    uVar5 = calculate_hash_08008590(param_2);\n    uVar5 = calculate_double_precision_value_08009654((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar2 = calculate_shift_amount_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    *(undefined2 *)(PTR_DAT_080051a8 + 0x34) = uVar2;\n    break;\n  case 0x16:\n    *(uint *)(PTR_DAT_080051a8 + 0x38) = param_2;\n    break;\n  case 0x17:\n    uVar5 = calculate_hash_08008590(param_2);\n    uVar5 = calculate_double_to_longlong_08009798((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar2 = calculate_shift_amount_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    *(undefined2 *)(PTR_DAT_080051a8 + 0x1a) = uVar2;\n    break;\n  default:\n    return 6;\n  }\n  write_to_buffer_and_sum_if_empty_08004c2a();\n  return 0;\n}\n\n",
            "called": [
                "FUN_08008590",
                "FUN_0800192c",
                "FUN_08009214",
                "FUN_08009798",
                "FUN_08008bf0",
                "FUN_08009228",
                "FUN_08004c2a",
                "FUN_0800923c",
                "FUN_08009654",
                "FUN_08008eec"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004e30",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "FUNC_08004e30"
        },
        "FUN_08008c30": {
            "renaming": {
                "FUN_08008c30": "calculate_float_bits_08008c30",
                "param_1": "float_bits",
                "param_2": "exponent_bits",
                "uVar1": "result",
                "uVar2": "exponent_bits_times_two",
                "uVar3": "adjusted_exponent_bits",
                "in_r12": "adjusted_exponent_bits_r12",
                "bVar4": "is_result_zero",
                "bVar5": "is_exponent_bits_small",
                "SCARRY4": "SCARRY4",
                "shift_amount": "shift_amount",
                "mantissa_bits": "mantissa_bits",
                "adjusted_mantissa_bits": "adjusted_mantissa_bits"
            },
            "code": "uint calculate_float_bits_08008c30(uint float_bits, uint exponent_bits)\n{\n    uint exponent_bits_times_two = exponent_bits * 2;\n    bool is_exponent_bits_small = exponent_bits_times_two < 0x70000000;\n    uint adjusted_exponent_bits = exponent_bits_times_two + 0x90000000;\n    uint result = adjusted_exponent_bits;\n    if (!is_exponent_bits_small) {\n        uint adjusted_exponent_bits_r12 = exponent_bits_times_two + 0x8fe00000;\n        result = adjusted_exponent_bits_r12;\n    }\n    bool is_result_zero = result == 0;\n    if (!is_exponent_bits_small && adjusted_exponent_bits >= 0x200000) {\n        is_result_zero = adjusted_exponent_bits_r12 == 0x1fc00000;\n    }\n    if (((is_exponent_bits_small || adjusted_exponent_bits < 0x200000) || 0x1fc00000 < adjusted_exponent_bits_r12) || is_result_zero) {\n        if ((exponent_bits & 0x40000000) != 0) {\n            if (((int)exponent_bits_times_two >> 0x15 == -1) && ((float_bits | exponent_bits << 0xc) != 0)) {\n                return 0x7fc00000;\n            }\n            return exponent_bits & 0x80000000 | 0x7f800000;\n        }\n        if ((int)(exponent_bits_times_two + 0x92e00000) < 0 != SCARRY4(adjusted_exponent_bits,0x2e00000)) {\n            return exponent_bits & 0x80000000;\n        }\n        uint shift_amount = 0x18 - (exponent_bits_times_two + 0x92e00000 >> 0x15);\n        uint mantissa_bits = float_bits >> (shift_amount & 0xff);\n        if (float_bits << (0x20 - shift_amount & 0xff) != 0) {\n            mantissa_bits = mantissa_bits | 1;\n        }\n        uint adjusted_mantissa_bits = exponent_bits & 0x1fffff | 0x100000;\n        float_bits = mantissa_bits | adjusted_mantissa_bits << (0x20 - shift_amount & 0xff);\n        adjusted_mantissa_bits = (adjusted_mantissa_bits >> (shift_amount & 0xff)) << 1;\n    }\n    result = (exponent_bits & 0x80000000 | float_bits >> 0x1d) + adjusted_mantissa_bits * 4 + (uint)(0x7fffffff < float_bits * 8);\n    if (float_bits * 8 == 0x80000000) {\n        result = result & 0xfffffffe;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c30",
            "calling": [
                "FUN_08001994",
                "FUN_080046d0",
                "FUN_08004940",
                "FUN_080005b4",
                "FUN_08003004",
                "FUN_0800056c",
                "FUN_08002638",
                "FUN_08002978",
                "FUN_080044e8",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "calculate_float_bits_08008c30"
        },
        "FUN_080082d4": {
            "renaming": {
                "FUN_080082d4": "FUNC_080082d4"
            },
            "code": "\nulonglong FUNC_080082d4(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if (uVar7 - 1 != 0 && 0xfffff < uVar10) goto LAB_080083e0;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_08008458:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080082d4",
            "calling": [
                "FUN_08009318",
                "FUN_080094c0",
                "FUN_08009990",
                "FUN_0800af78",
                "FUN_08009d78",
                "FUN_0800b2e8",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800a1bc",
                "FUN_0800a348",
                "FUN_0800a5a0",
                "FUN_08009798",
                "FUN_0800adf0",
                "FUN_08009654"
            ],
            "imported": false,
            "current_name": "FUNC_080082d4"
        },
        "FUN_08007bf0": {
            "renaming": {
                "FUN_08007bf0": "set_param_08007bf0",
                "param_1": "new_param",
                "_DAT_4000002c": "PTR_DAT_4000002c",
                "_DAT_40000024": "PTR_DAT_40000024"
            },
            "code": "void set_param_08007bf0(uint32_t new_param) {\n  _DAT_4000002c = new_param;\n  if (new_param <= _DAT_40000024) {\n    _DAT_40000024 = new_param;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007bf0",
            "calling": [
                "FUN_08005324"
            ],
            "imported": false,
            "current_name": "set_param_08007bf0"
        },
        "FUN_08008590": {
            "renaming": {
                "FUN_08008590": "calculate_hash_08008590",
                "param_1": "input",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "msb_shift_input",
                "uVar2": "shifted_input_2",
                "uVar3": "shifted_input",
                "uVar4": "shift_amount_2",
                "uVar5": "shift_input",
                "uVar7": "shift_amount",
                "bVar8": "shift_amount_2_is_zero",
                "bVar9": "is_shift_input_zero",
                "bVar10": "shift_amount_is_negative",
                "iVar6": "leading_zeroes",
                "in_r12": "shift_amount_3"
            },
            "code": "ulonglong calculate_hash_08008590(uint input, undefined4 param_2, undefined4 param_3, uint param_4) {\n  uint shift_input = input << 1;\n  bool is_shift_input_zero = shift_input == 0;\n  uint msb_shift_input = (uint)((input & 0x80000000) != 0) << 0x1f;\n  uint shifted_input = (uint)((int)shift_input >> 3) >> 1 | msb_shift_input;\n  input = input << 0x1d;\n  if (!is_shift_input_zero) {\n    uint mask = shift_input & 0xff000000;\n    is_shift_input_zero = mask == 0;\n    if (!is_shift_input_zero) {\n      is_shift_input_zero = mask == 0xff000000;\n    }\n    if (!is_shift_input_zero) {\n      return CONCAT44(shifted_input, input) ^ 0x3800000000000000;\n    }\n  }\n  if ((shift_input & 0xffffff) == 0) {\n    return CONCAT44(shifted_input, input);\n  }\n  if (mask == 0xff000000) {\n    return CONCAT44(shifted_input, input) | 0x8000000000000;\n  }\n  uint shifted_input_2 = shifted_input;\n  uint input_2 = input;\n  if (shifted_input == 0) {\n    input_2 = 0;\n    shifted_input_2 = input;\n  }\n  int leading_zeroes = count_leading_zeroes(shifted_input_2);\n  if (shifted_input == 0) {\n    leading_zeroes = leading_zeroes + 0x20;\n  }\n  uint shift_amount = leading_zeroes - 0xb;\n  bool shift_amount_is_negative = SBORROW4(shift_amount, 0x20);\n  uint shift_amount_2 = leading_zeroes - 0x2b;\n  bool shift_amount_2_is_negative = (int)shift_amount_2 < 0;\n  bool shift_amount_2_is_zero = shift_amount_2 == 0;\n  if ((int)shift_amount < 0x20) {\n    shift_amount_is_negative = SCARRY4(shift_amount_2, 0xc);\n    leading_zeroes = leading_zeroes + -0x1f;\n    shift_amount_2_is_negative = leading_zeroes < 0;\n    shift_amount_2_is_zero = leading_zeroes == 0;\n    shifted_input_2 = shifted_input_2 << (shift_amount & 0xff);\n    input_2 = shifted_input_2 >> (0xcU - leading_zeroes & 0xff) | shifted_input_2 << (leading_zeroes & 0xff);\n  }\n  if (shift_amount_2_is_zero || shift_amount_2_is_negative != shift_amount_is_negative) {\n    uint shift_amount_3 = 0x20 - shift_amount;\n    shifted_input_2 = shifted_input_2 << (shift_amount & 0xff) | input_2 >> (shift_amount_3 & 0xff);\n    input_2 = input_2 << (shift_amount & 0xff);\n  }\n  if ((int)shift_amount < 0x381) {\n    return CONCAT44(shifted_input_2 + (0x380 - shift_amount) * 0x100000 | msb_shift_input, input_2);\n  }\n  uint shifted_amount_2 = ~(0x380 - shift_amount);\n  if (0x1e < (int)shifted_amount_2) {\n    return CONCAT44(shifted_input, shifted_input_2 >> (shifted_amount_2 - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  int shifted_amount_3 = shifted_amount_2 - 0x13;\n  if (shifted_amount_3 == 0 || shifted_amount_3 < 0 != SCARRY4(shifted_amount_2 - 0x1f, 0xc)) {\n    shifted_amount_2 = shifted_amount_2 + 1;\n    return CONCAT44(msb_shift_input | shifted_input_2 >> (shifted_amount_2 & 0xff), input_2 >> (shifted_amount_2 & 0xff) | shifted_input_2 << (0x20 - shifted_amount_2 & 0xff));\n  }\n  return CONCAT44(shifted_input, input_2 >> (0x20 - (0xcU - shifted_amount_3) & 0xff) | shifted_input_2 << (0xcU - shifted_amount_3 & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008590",
            "calling": [
                "FUN_080046d0",
                "FUN_08004940",
                "FUN_08003004",
                "FUN_0800056c",
                "FUN_08002638",
                "FUN_08002978",
                "FUN_08004e30",
                "FUN_08001f00",
                "FUN_08003b98",
                "FUN_08002c18",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_080044e8",
                "FUN_08002408"
            ],
            "imported": false,
            "current_name": "calculate_hash_08008590"
        },
        "FUN_08007ad0": {
            "renaming": {
                "FUN_08007ad0": "initialize_data_section_08007ad0",
                "set_flag_08007a10": "set_flag",
                "_DAT_40000000": "data_0x40000000",
                "_DAT_40000004": "data_0x40000004",
                "_DAT_40000008": "data_0x40000008",
                "_DAT_4000000c": "data_0x4000000c",
                "_DAT_40000010": "data_0x40000010",
                "_DAT_40000018": "data_0x40000018",
                "_DAT_4000001c": "data_0x4000001c",
                "_DAT_40000020": "data_0x40000020",
                "_DAT_40000024": "data_0x40000024",
                "_DAT_40000028": "data_0x40000028",
                "DAT_08007b6c": "data_0x08007b6c",
                "PTR_DAT_08007b68": "ptr_data_0x08007b68",
                "_DAT_4000002c": "data_0x4000002c",
                "_DAT_40000034": "data_0x40000034",
                "_DAT_40000038": "data_0x40000038",
                "_DAT_4000003c": "data_0x4000003c",
                "_DAT_40000040": "data_0x40000040",
                "_DAT_40000048": "data_0x40000048",
                "_DAT_4000004c": "data_0x4000004c",
                "set_value_and_bit_08007a70": "set_value_and_bit"
            },
            "code": "void initialize_data_section_08007ad0(void)\n{\n    set_flag(0x40000000);\n    uint32_t* data_start = (uint32_t*)0x40000000;\n    uint32_t* data_end = (uint32_t*)0x4000004c;\n    for(uint32_t* ptr = data_start; ptr <= data_end; ptr++)\n    {\n        *ptr = 0;\n    }\n    set_value_and_bit(0x40000000, 0, 0);\n    return;\n}",
            "called": [
                "FUN_08007a70",
                "FUN_08007a10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ad0",
            "calling": [
                "FUN_08007e08"
            ],
            "imported": false,
            "current_name": "initialize_data_section_08007ad0"
        },
        "FUN_080005b4": {
            "renaming": {
                "FUN_080005b4": "FUNC_080005b4"
            },
            "code": "\nuint FUNC_080005b4(undefined4 param_1)\n\n{\n  undefined *puVar1;\n  undefined uVar2;\n  int iVar3;\n  undefined4 uVar4;\n  uint uVar5;\n  undefined4 uVar6;\n  undefined8 uVar7;\n  undefined4 local_94 [4];\n  undefined4 local_84;\n  undefined4 local_80;\n  undefined4 local_7c;\n  undefined4 uStack_78;\n  undefined4 uStack_74;\n  undefined4 auStack_70 [6];\n  undefined4 local_58;\n  byte local_52;\n  undefined local_51 [20];\n  byte local_3d;\n  byte local_3c;\n  byte local_3b;\n  byte local_3a;\n  char local_39;\n  undefined4 local_38;\n  undefined4 local_34;\n  sbyte local_2f;\n  char local_2e;\n  char local_2d;\n  undefined4 local_2c;\n  byte local_27;\n  ushort local_26;\n  uint local_24;\n  \n  if (PTR_DAT_08000808[1] == '\\x06') {\n    uVar5 = 0xc;\n  }\n  else {\n    local_51[0] = 0;\n    local_26 = 0;\n    local_27 = 0;\n    local_2c = DAT_0800080c;\n    local_2d = '\\0';\n    local_2e = '\\0';\n    write_buffer_0800b430(auStack_70 + 3,0,0xc);\n    write_buffer_0800b430(auStack_70,0,0xc);\n    *PTR_DAT_08000810 = 0;\n    local_2f = 0;\n    while (iVar3 = validate_input_0800184c(&local_52,auStack_70 + 6,param_1,local_51), iVar3 != 0) {\n      uVar7 = calculate_hash_08008590(local_58);\n      uVar7 = calculate_double_to_longlong_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n      local_24 = ConvertToSignedFixedPoint_08008ba0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n      if (local_52 == 0x47) {\n        switch(local_24) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          local_2f = 2;\n          break;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          local_2f = 1;\n          break;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          local_2f = 3;\n          break;\n        case 0x14:\n        case 0x15:\n          local_2f = 7;\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          local_2f = 9;\n          break;\n        case 0x5a:\n        case 0x5b:\n          local_2f = 4;\n          break;\n        case 0x5d:\n        case 0x5e:\n          local_2f = 6;\n        }\n        switch(local_24) {\n        case 0:\n          PTR_DAT_08000ca0[1] = 0;\n          break;\n        case 1:\n          PTR_DAT_08000ca0[1] = 1;\n          break;\n        case 2:\n          PTR_DAT_08000ca0[1] = 2;\n          break;\n        case 3:\n          PTR_DAT_08000ca0[1] = 3;\n          break;\n        case 4:\n          local_2e = '\\x01';\n          break;\n        default:\n          *PTR_DAT_08000ca0 = 3;\n          break;\n        case 10:\n          local_2e = '\\x02';\n          break;\n        case 0x11:\n          set_params_to_array_08000478(0,1,2);\n          break;\n        case 0x12:\n          set_params_to_array_08000478(2,0,1);\n          break;\n        case 0x13:\n          set_params_to_array_08000478(1,2,0);\n          break;\n        case 0x14:\n          PTR_DAT_08000ca0[3] = 1;\n          break;\n        case 0x15:\n          PTR_DAT_08000ca0[3] = 0;\n          break;\n        case 0x1c:\n        case 0x1e:\n          uVar4 = FUNC_08008eec(local_58,DAT_08000ca4);\n          uVar7 = calculate_hash_08008590(uVar4);\n          uVar7 = calculate_double_to_longlong_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          local_24 = ConvertToSignedFixedPoint_08008ba0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          switch(local_24) {\n          case 0x118:\n            local_2e = '\\x03';\n            break;\n          case 0x119:\n            local_2e = '\\x04';\n            break;\n          default:\n            *PTR_DAT_08000ca0 = 3;\n            break;\n          case 300:\n            local_2e = '\\x05';\n            break;\n          case 0x12d:\n            local_2e = '\\x06';\n          }\n          break;\n        case 0x35:\n          local_2d = '\\x01';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          PTR_DAT_08000ca0[0x1c] = (char)local_24 + -0x36;\n          break;\n        case 0x50:\n          PTR_DAT_08000ca0[1] = 4;\n          break;\n        case 0x5a:\n          PTR_DAT_08000ca0[4] = 1;\n          break;\n        case 0x5b:\n          PTR_DAT_08000ca0[4] = 0;\n          break;\n        case 0x5c:\n          uVar4 = FUNC_08008eec(local_58,DAT_08000ca4);\n          uVar7 = calculate_hash_08008590(uVar4);\n          uVar7 = calculate_double_to_longlong_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          local_24 = ConvertToSignedFixedPoint_08008ba0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          if (local_24 == 0x398) {\n            local_2e = '\\a';\n          }\n          else if (local_24 == 0x399) {\n            local_2e = '\\b';\n          }\n          else {\n            *PTR_DAT_08000ca0 = 3;\n          }\n          break;\n        case 0x5d:\n          PTR_DAT_08000ca0[2] = 1;\n          break;\n        case 0x5e:\n          PTR_DAT_08000ca0[2] = 0;\n        }\n      }\n      else if (local_52 == 0x4d) {\n        if (local_24 == 0x1e) {\nLAB_08000b96:\n          local_2f = 5;\n        }\n        else if ((int)local_24 < 0x1f) {\n          if ((int)local_24 < 3) {\n            if (-1 < (int)local_24) goto LAB_08000b96;\n          }\n          else if (local_24 - 3 < 3) {\n            local_2f = 8;\n          }\n        }\n        switch(local_24) {\n        case 0:\n          PTR_DAT_08000ca0[5] = 1;\n          break;\n        case 1:\n          break;\n        case 2:\n        case 0x1e:\n          PTR_DAT_08000ca0[5] = 2;\n          break;\n        case 3:\n          PTR_DAT_08000ca0[6] = 1;\n          break;\n        case 4:\n          PTR_DAT_08000ca0[6] = 0xff;\n          break;\n        case 5:\n          PTR_DAT_08000ca0[6] = 0;\n          break;\n        default:\n          *PTR_DAT_08000ca0 = 3;\n          break;\n        case 7:\n          PTR_DAT_08000ca0[7] = 2;\n          break;\n        case 8:\n          PTR_DAT_08000ca0[7] = 1;\n          break;\n        case 9:\n          PTR_DAT_08000ca0[7] = 0;\n        }\n      }\n      if (local_2f != 0) {\n        if (((int)(uint)local_26 >> local_2f & 1U) == 0) {\n          local_26 = local_26 | (ushort)(1 << local_2f);\n        }\n        else {\n          *PTR_DAT_08000ca0 = 5;\n        }\n        local_2f = 0;\n      }\n    }\n    if (*PTR_DAT_08000ff0 == '\\0') {\n      local_34 = 0;\n      local_38 = 0;\n      local_39 = '\\0';\n      local_51[0] = 0;\nswitchD_08000d18_caseD_47:\n      iVar3 = validate_input_0800184c(&local_52,auStack_70 + 6,param_1,local_51);\n      if (iVar3 != 0) {\n        switch(local_52) {\n        case 0x46:\n          iVar3 = check_results_are_zero_or_negative_0800923c(local_58,0);\n          if (iVar3 != 0) {\n            *PTR_DAT_08000ff0 = 6;\n          }\n          if (PTR_DAT_08000ff0[2] == '\\0') {\n            uVar4 = calculate_hash_and_bits_0800056c(local_58);\n            *(undefined4 *)(PTR_DAT_08000ff0 + 8) = uVar4;\n          }\n          else {\n            local_2c = calculate_hash_and_bits_0800056c(local_58);\n          }\n          break;\n        case 0x47:\n        case 0x4d:\n        case 0x4e:\n          break;\n        default:\n          *PTR_DAT_08000ff0 = 3;\n          break;\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n          uVar5 = (uint)local_52;\n          uVar4 = calculate_hash_and_bits_0800056c(local_58);\n          auStack_70[uVar5 - 0x49] = uVar4;\n          break;\n        case 0x4c:\n          uVar7 = calculate_hash_08008590(local_58);\n          uVar7 = calculate_double_to_longlong_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          local_39 = calculate_shift_amount_08008bf0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          break;\n        case 0x50:\n          local_34 = local_58;\n          break;\n        case 0x52:\n          local_38 = calculate_hash_and_bits_0800056c(local_58);\n          break;\n        case 0x53:\n          iVar3 = is_input_empty_08009228(local_58,0);\n          if (iVar3 != 0) {\n            *PTR_DAT_08000ff0 = 6;\n          }\n          break;\n        case 0x54:\n          iVar3 = is_input_empty_08009228(local_58,0);\n          if (iVar3 != 0) {\n            *PTR_DAT_08000ff0 = 6;\n          }\n          uVar7 = calculate_hash_08008590(local_58);\n          uVar7 = calculate_double_to_longlong_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          uVar2 = calculate_shift_amount_08008bf0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          PTR_DAT_08000ff0[0x18] = uVar2;\n          break;\n        case 0x58:\n          auStack_70[3] = calculate_hash_and_bits_0800056c(local_58);\n          local_27 = local_27 | 1;\n          break;\n        case 0x59:\n          auStack_70[4] = calculate_hash_and_bits_0800056c(local_58);\n          local_27 = local_27 | 2;\n          break;\n        case 0x5a:\n          auStack_70[5] = calculate_hash_and_bits_0800056c(local_58);\n          local_27 = local_27 | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      if (*PTR_DAT_08000ff0 == '\\0') {\n        if (PTR_DAT_08000ff4[1] != '\\a') {\n          check_and_update_data_0800525c((int)(char)PTR_DAT_08000ff0[6]);\n          process_command_08000220(PTR_DAT_08000ff0[7]);\n        }\n        if ((local_26 & 0x200) != 0) {\n          iVar3 = validate_and_write_buffer_08004d7c(PTR_DAT_08000ff0[0x1c],&local_7c);\n          puVar1 = PTR_DAT_08000ff0;\n          if (iVar3 == 0) {\n            return 10;\n          }\n          *(undefined4 *)(PTR_DAT_08000ff0 + 0x20) = local_7c;\n          *(undefined4 *)(puVar1 + 0x24) = uStack_78;\n          *(undefined4 *)(puVar1 + 0x28) = uStack_74;\n        }\n        switch(local_2e) {\n        case '\\x01':\n          iVar3 = is_input_empty_08009228(local_34,0);\n          if (iVar3 == 0) {\n            if (PTR_DAT_08000ff4[1] != '\\a') {\n              calculate_data_hash_and_shift_amount_08002408(local_34);\n            }\n          }\n          else {\n            *PTR_DAT_08000ff0 = 6;\n          }\n          break;\n        case '\\x02':\n          uVar7 = calculate_hash_08008590(local_34);\n          uVar7 = calculate_double_to_longlong_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          local_24 = ConvertToSignedFixedPoint_08008ba0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          if ((((local_39 == '\\x02') || (local_39 == '\\x14')) && (-1 < (int)local_24)) &&\n             ((int)local_24 < 7)) {\n            if ((local_27 == 0) && (local_39 == '\\x02')) {\n              *PTR_DAT_08000ff0 = 6;\n            }\n            else {\n              if ((int)local_24 < 1) {\n                local_24 = (uint)(byte)PTR_DAT_08001304[0x1c];\n              }\n              else {\n                local_24 = local_24 - 1;\n              }\n              iVar3 = validate_and_write_buffer_08004d7c(local_24 & 0xff,local_94);\n              if (iVar3 == 0) {\n                return 10;\n              }\n              for (local_3a = 0; local_3a < 3; local_3a = local_3a + 1) {\n                if (((int)(uint)local_27 >> local_3a & 1U) != 0) {\n                  if (local_39 == '\\x14') {\n                    uVar5 = (uint)local_3a;\n                    uVar4 = FUNC_08008cd8(*(undefined4 *)(PTR_DAT_08001304 + (local_3a + 2) * 4 + 4),\n                                         auStack_70[local_3a + 3]);\n                    local_94[uVar5] = uVar4;\n                  }\n                  else {\n                    local_94[local_3a] = auStack_70[local_3a + 3];\n                  }\n                }\n              }\n              write_to_buffer_with_sum_and_offset_08004bf4(local_24 & 0xff,local_94);\n              puVar1 = PTR_DAT_08001304;\n              if (local_24 == (byte)PTR_DAT_08001304[0x1c]) {\n                *(undefined4 *)(PTR_DAT_08001304 + 0x20) = local_94[0];\n                *(undefined4 *)(puVar1 + 0x24) = local_94[1];\n                *(undefined4 *)(puVar1 + 0x28) = local_94[2];\n              }\n            }\n          }\n          else {\n            *PTR_DAT_08000ff0 = 3;\n          }\n          local_27 = 0;\n          break;\n        case '\\x03':\n        case '\\x05':\n          if (local_27 != 0) {\n            for (local_3b = 0; local_3b < 3; local_3b = local_3b + 1) {\n              if (((int)(uint)local_27 >> local_3b & 1U) == 0) {\n                auStack_70[local_3b + 3] =\n                     *(undefined4 *)(PTR_DAT_08001304 + (local_3b + 2) * 4 + 4);\n              }\n              else if (PTR_DAT_08001304[4] == '\\0') {\n                uVar5 = (uint)local_3b;\n                uVar4 = FUNC_08008cdc(auStack_70[local_3b + 3],\n                                     *(undefined4 *)(PTR_DAT_08001304 + (local_3b + 2) * 4 + 4));\n                auStack_70[uVar5 + 3] = uVar4;\n              }\n              else {\n                uVar6 = auStack_70[local_3b + 3];\n                uVar4 = FUNC_08008cdc(*(undefined4 *)(PTR_DAT_08001304 + (local_3b + 8) * 4),\n                                     *(undefined4 *)(PTR_DAT_08001304 + (local_3b + 10) * 4 + 4));\n                uVar5 = (uint)local_3b;\n                uVar4 = FUNC_08008cdc(uVar6,uVar4);\n                auStack_70[uVar5 + 3] = uVar4;\n              }\n            }\n            process_data_and_update_status_flags_08001e98(auStack_70[3],auStack_70[4],auStack_70[5],\n                         *(undefined4 *)(PTR_DAT_08001308 + 0x14),0);\n          }\n          if (local_2e == '\\x05') {\n            iVar3 = validate_and_write_buffer_08004d7c(7,local_94 + 3);\n            if (iVar3 == 0) {\n              return 10;\n            }\n          }\n          else {\n            iVar3 = validate_and_write_buffer_08004d7c(6,local_94 + 3);\n            if (iVar3 == 0) {\n              return 10;\n            }\n          }\n          process_data_and_update_status_flags_08001e98(local_94[3],local_84,local_80,*(undefined4 *)(PTR_DAT_08001308 + 0x14),0);\n          puVar1 = PTR_DAT_08001304;\n          *(undefined4 *)(PTR_DAT_08001304 + 0xc) = local_94[3];\n          *(undefined4 *)(puVar1 + 0x10) = local_84;\n          *(undefined4 *)(puVar1 + 0x14) = local_80;\n          local_27 = 0;\n          break;\n        case '\\x04':\n        case '\\x06':\n          if (local_2e == '\\x06') {\n            write_to_buffer_with_sum_and_offset_08004bf4(7,PTR_DAT_0800130c);\n          }\n          else {\n            write_to_buffer_with_sum_and_offset_08004bf4(6,PTR_DAT_0800130c);\n          }\n          break;\n        case '\\a':\n          if (local_27 == 0) {\n            *PTR_DAT_08001304 = 6;\n          }\n          else {\n            for (local_3c = 0; local_3c < 3; local_3c = local_3c + 1) {\n              if (((int)(uint)local_27 >> local_3c & 1U) != 0) {\n                uVar4 = FUNC_08008cd8(*(undefined4 *)(PTR_DAT_08001304 + (local_3c + 2) * 4 + 4),\n                                     *(undefined4 *)(PTR_DAT_08001304 + (local_3c + 8) * 4));\n                uVar5 = (uint)local_3c;\n                uVar4 = FUNC_08008cd8(uVar4,auStack_70[local_3c + 3]);\n                *(undefined4 *)(PTR_DAT_08001304 + (uVar5 + 10) * 4 + 4) = uVar4;\n              }\n            }\n          }\n          local_27 = 0;\n          break;\n        case '\\b':\n          write_buffer_0800b430(PTR_DAT_08001310,0,0xc);\n        }\n        if (((local_26 & 4) != 0) || (local_27 != 0)) {\n          if ((PTR_DAT_08001574[2] != '\\0') &&\n             ((iVar3 = is_input_empty_08009228(local_2c,0), iVar3 != 0 && (PTR_DAT_08001574[1] != '\\x04')))) {\n            *PTR_DAT_08001574 = 6;\n          }\n          if (((local_2d != '\\0') && (PTR_DAT_08001574[1] != '\\0')) &&\n             (PTR_DAT_08001574[1] != '\\x01')) {\n            *PTR_DAT_08001574 = 6;\n          }\n          if (*PTR_DAT_08001574 != '\\0') {\n            return (uint)(byte)*PTR_DAT_08001574;\n          }\n          for (local_3d = 0; puVar1 = PTR_DAT_08001840, local_3d < 3; local_3d = local_3d + 1) {\n            if (((int)(uint)local_27 >> local_3d & 1U) == 0) {\n              auStack_70[local_3d + 3] = *(undefined4 *)(PTR_DAT_08001574 + (local_3d + 2) * 4 + 4);\n            }\n            else if (local_2d == '\\0') {\n              if (PTR_DAT_08001574[4] == '\\0') {\n                uVar5 = (uint)local_3d;\n                uVar4 = FUNC_08008cdc(auStack_70[local_3d + 3],\n                                     *(undefined4 *)(PTR_DAT_08001574 + (local_3d + 2) * 4 + 4));\n                auStack_70[uVar5 + 3] = uVar4;\n              }\n              else {\n                uVar6 = auStack_70[local_3d + 3];\n                uVar4 = FUNC_08008cdc(*(undefined4 *)(PTR_DAT_08001574 + (local_3d + 8) * 4),\n                                     *(undefined4 *)(PTR_DAT_08001574 + (local_3d + 10) * 4 + 4));\n                uVar5 = (uint)local_3d;\n                uVar4 = FUNC_08008cdc(uVar6,uVar4);\n                auStack_70[uVar5 + 3] = uVar4;\n              }\n            }\n          }\n          if ((byte)PTR_DAT_08001574[1] < 5) {\n                    /* WARNING: Could not recover jumptable at 0x08001474. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n            uVar5 = (*(code *)(&switchD_08001474::switchdataD_08001478)[(byte)PTR_DAT_08001574[1]])\n                              ();\n            return uVar5;\n          }\n          if (*PTR_DAT_08001840 != '\\0') {\n            return (uint)(byte)*PTR_DAT_08001840;\n          }\n          *(undefined4 *)(PTR_DAT_08001840 + 0xc) = auStack_70[3];\n          *(undefined4 *)(puVar1 + 0x10) = auStack_70[4];\n          *(undefined4 *)(puVar1 + 0x14) = auStack_70[5];\n        }\n        if (PTR_DAT_08001840[5] != '\\0') {\n          process_until_data_pointer_is_zero_or_status_flag_is_true_08002fd4();\n          PTR_DAT_08001848[0x10] = 0;\n          if (PTR_DAT_08001840[5] == '\\x02') {\n            set_flag_and_check_080025e8();\n          }\n          else {\n            PTR_DAT_08001840[5] = 0;\n          }\n        }\n        uVar5 = (uint)(byte)*PTR_DAT_08001840;\n      }\n      else {\n        uVar5 = (uint)(byte)*PTR_DAT_08000ff0;\n      }\n    }\n    else {\n      uVar5 = (uint)(byte)*PTR_DAT_08000ff0;\n    }\n  }\n  return uVar5;\n}\n\n",
            "called": [
                "FUN_08002fd4",
                "FUN_08008590",
                "FUN_08008bf0",
                "FUN_08000220",
                "FUN_08004d7c",
                "FUN_0800b430",
                "FUN_08001f00",
                "FUN_080025e8",
                "FUN_08001e98",
                "FUN_08000478",
                "FUN_08009798",
                "FUN_08009214",
                "FUN_08008cd8",
                "FUN_0800981c",
                "FUN_08008eec",
                "FUN_0800525c",
                "FUN_08004bf4",
                "FUN_080098d0",
                "FUN_08009228",
                "FUN_0800056c",
                "FUN_08008cdc",
                "FUN_08008c30",
                "FUN_08008ba0",
                "FUN_0800184c",
                "FUN_0800923c",
                "FUN_08008894",
                "FUN_08002408"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080005b4",
            "calling": [
                "FUN_080039bc",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "FUNC_080005b4"
        },
        "FUN_080039a0": {
            "renaming": {
                "FUN_080039a0": "initialize_program_080039a0",
                "PTR_DAT_080039b8": "program_initialized",
                "clear_data_08003980": "clear_data",
                "print_help_message_08004228": "print_help_message",
                "undefined4": "int"
            },
            "code": "void initialize_program_080039a0(void)\n{\n  clear_data_08003980();\n  print_help_message_08004228();\n  *(int *)PTR_DAT_080039b8 = 1;\n  return;\n}",
            "called": [
                "FUN_08003980",
                "FUN_08004228"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080039a0",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "initialize_program_080039a0"
        },
        "FUN_08009204": {
            "renaming": {
                "FUN_08009204": "calculate_and_concatenate_results_08009204",
                "param_1": "input_1",
                "param_2": "input_2",
                "calculate_result_0800919c": "calculate_result"
            },
            "code": "undefined8 calculate_and_concatenate_results_08009204(undefined4 input_1, undefined4 input_2) {\n  calculate_result();\n  return CONCAT44(input_2, input_1);\n}",
            "called": [
                "FUN_0800919c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009204",
            "calling": [
                "FUN_08009214",
                "FUN_08009228",
                "FUN_080091fc",
                "FUN_0800923c"
            ],
            "imported": false,
            "current_name": "calculate_and_concatenate_results_08009204"
        },
        "FUN_080029d8": {
            "renaming": {
                "FUN_080029d8": "validate_input_and_set_flag_080029d8",
                "param_1": "input_param",
                "param_2": "input_data",
                "param_3": "input_data2",
                "iVar1": "is_valid_input",
                "uVar2": "float_bits",
                "uVar3": "input_data1"
            },
            "code": "void validate_input_and_set_flag_080029d8(int input_param, int input_data, int input_data2)\n{\n  int is_valid_input;\n  if ((input_data != 0) && (input_data2 != 0))\n  {\n    is_valid_input = check_if_input_is_valid(input_data + 0x18, input_data + 0x1c);\n    if (is_valid_input == 0)\n    {\n      if (*(char *)(input_data + 0x25) == '\\0')\n      {\n        if (is_input_null(input_data2 + 0x18, input_data + 0x1c) != 0)\n        {\n          undefined4 float_bits = calculate_float_bits(PTR_DAT_08002a90[0x20] ^ 0x80000000, input_data2 + 0x18, input_data + 0x20);\n          if (is_input_empty(input_data + 0x1c, float_bits) == 0)\n          {\n            *(undefined4 *)(input_data + 0x18) = float_bits;\n          }\n          else\n          {\n            *(undefined4 *)(input_data + 0x18) = *(undefined4 *)(input_data + 0x1c);\n          }\n        }\n        else\n        {\n          *(undefined4 *)(input_data + 0x18) = *(undefined4 *)(input_data + 0x1c);\n        }\n      }\n      *(undefined *)(input_data + 0x24) = 1;\n    }\n  }\n}\n",
            "called": [
                "FUN_08009214",
                "FUN_08009264",
                "FUN_08009228",
                "FUN_08002978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080029d8",
            "calling": [
                "FUN_08002a94"
            ],
            "imported": false,
            "current_name": "validate_input_and_set_flag_080029d8"
        },
        "FUN_08007c5e": {
            "renaming": {
                "FUN_08007c5e": "set_global_variable_08007c5e",
                "param_1": "value",
                "_DAT_40000038": "global_variable"
            },
            "code": "void set_global_variable_08007c5e(undefined4 value)\n{\n    _DAT_40000038 = value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007c5e",
            "calling": [
                "FUN_08005790"
            ],
            "imported": false,
            "current_name": "set_global_variable_08007c5e"
        },
        "FUN_08005760": {
            "renaming": {
                "FUN_08005760": "update_parameter_from_pointer_08005760",
                "PTR_DAT_08005774": "PTR_DATA",
                "update_parameter_080052ac": "update_parameter"
            },
            "code": "void update_parameter_from_pointer_08005760(void)\n{\n  uint16_t value = *(uint16_t *)(PTR_DAT_08005774 + 0x18);\n  update_parameter(value);\n  return;\n}",
            "called": [
                "FUN_080052ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005760",
            "calling": [
                "FUN_08007c7c"
            ],
            "imported": false,
            "current_name": "update_parameter_from_pointer_08005760"
        },
        "FUN_08008b24": {
            "renaming": {
                "FUN_08008b24": "is_end_of_input_08008b24",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_input_08008b24(void)\n{\n    char current_char;\n    check_and_return_param();\n    return current_char == '\\0';\n}",
            "called": [
                "FUN_08008b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b24",
            "calling": [
                "FUN_080098d0",
                "FUN_08003004",
                "FUN_08009b24"
            ],
            "imported": false,
            "current_name": "is_end_of_input_08008b24"
        },
        "FUN_08002814": {
            "renaming": {
                "FUN_08002814": "do_nothing_08002814"
            },
            "code": "\nvoid do_nothing_08002814(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002814",
            "calling": [
                "FUN_08001d4c",
                "FUN_08004148",
                "FUN_08002408"
            ],
            "imported": false,
            "current_name": "do_nothing_08002814"
        },
        "FUN_0800587c": {
            "renaming": {
                "FUN_0800587c": "update_data_if_condition_met_0800587c",
                "PTR_DAT_0800589c": "data_array"
            },
            "code": "void update_data_if_condition_met_0800587c(void)\n{\n  if (PTR_DAT_0800589c[1] == '\\x03') {\n    PTR_DAT_0800589c[1] = 4;\n    PTR_DAT_0800589c[0x10] = 0;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800587c",
            "calling": [
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "update_data_if_condition_met_0800587c"
        },
        "FUN_08008a02": {
            "renaming": {
                "FUN_08008a02": "calculate_result_08008a02",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_7",
                "unaff_r4": "temp_3",
                "uVar2": "temp_5",
                "uVar3": "temp_2",
                "in_r12": "temp_4",
                "bVar4": "is_input_1_zero"
            },
            "code": "unsigned long long calculate_result_08008a02(uint32_t input_1, uint32_t input_2, uint32_t input_3, uint32_t input_4) {\n  uint32_t temp_1 = input_1;\n  uint32_t temp_2 = input_2;\n  uint32_t temp_3 = input_3;\n  uint32_t temp_4 = input_4;\n  uint32_t mask = 0x80000000;\n  uint32_t shift_mask = 0x100000;\n  uint32_t exponent_mask = 0x7ff00000;\n  uint32_t sign_mask = 0x80000000;\n  uint32_t nan_mask = 0x7ff80000;\n  \n  uint32_t temp_5 = input_4 >> 0x14;\n  \n  if (input_3 != input_4 || temp_5 != input_4) {\n    if (input_3 == input_4) {\n      if ((input_1 | (input_2 << 0xc)) == 0) {\n        temp_1 = input_3;\n        temp_2 = input_4;\n        if (temp_5 != input_4) {\n          return ((unsigned long long)((input_2 ^ input_4) & mask | exponent_mask)) << 0x20;\n        }\n      }\n    }\n    else if (temp_5 == input_4) {\n      temp_1 = input_3;\n      temp_2 = input_4;\n      if ((input_3 | (input_4 << 0xc)) == 0) {\n        return ((unsigned long long)((input_2 ^ input_4) & mask)) << 0x20;\n      }\n    }\n    else {\n      bool is_input_1_zero = (input_1 | (input_2 << 1)) == 0;\n      bool is_input_3_zero = (input_3 | (input_4 << 1)) == 0;\n      if (!is_input_1_zero || !is_input_3_zero) {\n        if (input_3 == 0) {\n          uint32_t temp_6 = input_2 & mask;\n          do {\n            uint32_t temp_7 = input_1 & mask;\n            input_1 = input_1 << 1;\n            input_2 = input_2 * 2 + (uint32_t)(temp_7 != 0);\n          } while ((input_2 & shift_mask) == 0);\n          input_2 = input_2 | temp_6;\n          if (temp_5 != 0) {\n            return ((unsigned long long)input_2) << 0x20 | input_1;\n          }\n        }\n        do {\n          uint32_t temp_8 = input_3 & mask;\n          input_3 = input_3 << 1;\n          input_4 = input_4 * 2 + (uint32_t)(temp_8 != 0);\n        } while ((input_4 & shift_mask) == 0);\n        return ((unsigned long long)input_2) << 0x20 | input_1;\n      }\n      if ((input_1 | (input_2 << 1)) != 0) {\n        return ((unsigned long long)((input_2 ^ input_4) & mask | exponent_mask)) << 0x20;\n      }\n      if ((input_3 | (input_4 << 1)) != 0) {\n        return ((unsigned long long)((input_2 ^ input_4) & mask)) << 0x20;\n      }\n    }\n  }\n  return ((unsigned long long)temp_2) << 0x20 | temp_1 | nan_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a02",
            "calling": [
                "FUN_08008894"
            ],
            "imported": false,
            "current_name": "calculate_result_08008a02"
        },
        "FUN_0800369c": {
            "renaming": {
                "FUN_0800369c": "wait_for_characters_0800369c",
                "param_1": "string_to_wait_for",
                "local_c": "current_char"
            },
            "code": "void wait_for_characters_0800369c(char *string_to_wait_for)\n{\n  char *current_char;\n  current_char = string_to_wait_for;\n  while (*current_char != '\\0') {\n    wait_for_flag_to_set_08008250(*current_char);\n    current_char++;\n  }\n  return;\n}",
            "called": [
                "FUN_08008250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800369c",
            "calling": [
                "FUN_080039bc",
                "FUN_08004900"
            ],
            "imported": false,
            "current_name": "wait_for_characters_0800369c"
        },
        "FUN_08005a98": {
            "renaming": {
                "FUN_08005a98": "check_data_08005a98",
                "param_1": "limit",
                "iVar1": "data",
                "uVar2": "current_data",
                "get_data_from_pointer_08005a84": "get_data_from_pointer"
            },
            "code": "void check_data_08005a98(int limit)\n{\n  int data = get_data_from_pointer();\n  do {\n    uint current_data = get_data_from_pointer();\n  } while (current_data < (uint)(limit + data));\n  return;\n}",
            "called": [
                "FUN_08005a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a98",
            "calling": [
                "FUN_080002a0"
            ],
            "imported": false,
            "current_name": "check_data_08005a98"
        },
        "FUN_08008cdc": {
            "renaming": {
                "FUN_08008cdc": "FUNC_08008cdc"
            },
            "code": "\nuint FUNC_08008cdc(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08008e12:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if (uVar4 - 1 == 0 || uVar3 < 0x800000) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_08008e12;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008cdc",
            "calling": [
                "FUN_08004940",
                "FUN_080005b4",
                "FUN_08003826",
                "FUN_08002908",
                "FUN_080028bc",
                "FUN_08003004",
                "FUN_08002978",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "FUNC_08008cdc"
        },
        "FUN_080044e8": {
            "renaming": {
                "FUN_080044e8": "process_data_and_print_results_080044e8",
                "auStack_18": "buffer_values",
                "local_a": "i",
                "local_9": "data_index",
                "PTR_s__G92__080046c8": "Results:",
                "PTR_DAT_080046bc": "data",
                "PTR_DAT_08004690": "some_constant",
                "PTR_DAT_08004694": "another_constant",
                "PTR_DAT_08004698": "Data:",
                "PTR_DAT_0800469c": "X",
                "PTR_DAT_080046a0": "Y",
                "PTR_DAT_080046a4": "Z",
                "PTR_DAT_080046a8": "W",
                "PTR_DAT_080046ac": "A",
                "PTR_DAT_080046b0": "B",
                "PTR_DAT_080046b4": "C",
                "PTR_DAT_080046b8": "D",
                "PTR_DAT_080046c0": "\", \"",
                "PTR_DAT_080046c4": "\"\\n\"",
                "PTR_DAT_080046cc": "buffer",
                "print_float_08003826": "print_float",
                "calculate_hash_08008590": "calculate_hash",
                "calculate_float_bits_08008c30": "calculate_float_bits",
                "process_string_080036c6": "process_string",
                "validate_and_write_buffer_08004d7c": "validate_and_write_buffer",
                "print_error_message_08004030": "print_error_message"
            },
            "code": "void process_data_and_print_results_080044e8(void)\n{\n  int PTR_PTR_DAT_080046b8PTR_PTR_DAT_080046b8AT_080046acT_080046cc_index;\n  undefined4 PTR_PTR_DAT_080046b8PTR_PTR_DAT_080046b8AT_080046acT_080046cc_values[3];\n  byte PTR_PTR_DAT_080046b8PTR_PTR_DAT_080046b8AT_080046acT_080046bc_index = 0;\n  while( true ) {\n    if (7 < PTR_PTR_DAT_080046b8PTR_PTR_DAT_080046b8AT_080046acT_080046bc_index) {\n      UPTR_DAT_080046a0PTR_DAT_080046a0JPTR_PTR_DAT_080046b8AT_080046acJPTR_DAT_080046a0QSI(\"PTR_s__G92__080046c8\");\n      for (byte i = 0; i < 3; i++) {\n        if ((PTR_PTR_DAT_080046b8PTR_PTR_DAT_080046b8AT_080046acT_080046bc[0x28] & 1) == 0) {\n          print_float(PTR_PTR_DAT_080046b8PTR_PTR_DAT_080046b8AT_080046acT_080046cc_values[i]);\n        }\n        else {\n          undefined8 hash = MPTR_PTR_DAT_080046b8AT_080046b0PTR_DAT_080046a0RPTR_DAT_080046a0UMEFP(PTR_PTR_DAT_080046b8PTR_PTR_DAT_080046b8AT_080046acT_080046cc_values[i]);\n          hash = FUNPTR_PTR_DAT_080046b8AT_080046b4_08008640((int)hash,(int)((ulonglong)hash >> 0x20),PTR_DAT_080046b8PTR_PTR_DAT_080046b8AT_080046acT_08004690,PTR_DAT_080046b8PTR_PTR_DAT_080046b8AT_080046acT_08004694);\n          undefined4 bits = RPTR_DAT_0800469cPTR_PTR_DAT_080046b8AT_080046b0UKFPTR_DAT_080046a0NTE((int)hash,(int)((ulonglong)hash >> 0x20));\n          print_float(bits);\n        }\n        if (i < 2) {\n          UPTR_DAT_080046a0PTR_DAT_080046a0JPTR_PTR_DAT_080046b8AT_080046acJPTR_DAT_080046a0QSI(PTR_PTR_DAT_080046b8PTR_PTR_DAT_080046b8AT_080046acT_080046c0);\n        }\n        else {\n          UPTR_DAT_080046a0PTR_DAT_080046a0JPTR_PTR_DAT_080046b8AT_080046acJPTR_DAT_080046a0QSI(PTR_PTR_DAT_080046b8PTR_PTR_DAT_080046b8AT_080046acT_080046c4);\n        }\n      }\n      return;\n    }\n    PTR_PTR_DAT_080046b8PTR_PTR_DAT_080046b8AT_080046acT_080046cc_index = validate_and_write_PTR_PTR_DAT_080046b8PTR_PTR_DAT_080046b8AT_080046acT_080046cc(PTR_PTR_DAT_080046b8PTR_PTR_DAT_080046b8AT_080046acT_080046bc_index,PTR_PTR_DAT_080046b8PTR_PTR_DAT_080046b8AT_080046acT_080046cc_values);\n    if (PTR_PTR_DAT_080046b8PTR_PTR_DAT_080046b8AT_080046acT_080046cc_index == 0) break;\n    UPTR_DAT_080046a0PTR_DAT_080046a0JPTR_PTR_DAT_080046b8AT_080046acJPTR_DAT_080046a0QSI(\"PTR_PTR_DAT_080046b8PTR_PTR_DAT_080046b8AT_080046acT_08004698\");\n    switch(PTR_PTR_DAT_080046b8PTR_PTR_DAT_080046b8AT_080046acT_080046bc_index) {\n    case 0:\n      UPTR_DAT_080046a0PTR_DAT_080046a0JPTR_PTR_DAT_080046b8AT_080046acJPTR_DAT_080046a0QSI(\"PTR_DAT_0800469c\");\n      break;\n    case 1:\n      UPTR_DAT_080046a0PTR_DAT_080046a0JPTR_PTR_DAT_080046b8AT_080046acJPTR_DAT_080046a0QSI(\"PTR_DAT_080046a0\");\n      break;\n    case 2:\n      UPTR_DAT_080046a0PTR_DAT_080046a0JPTR_PTR_DAT_080046b8AT_080046acJPTR_DAT_080046a0QSI(\"PTR_DAT_080046a4\");\n      break;\n    case 3:\n      UPTR_DAT_080046a0PTR_DAT_080046a0JPTR_PTR_DAT_080046b8AT_080046acJPTR_DAT_080046a0QSI(\"PTR_DAT_080046a8\");\n      break;\n    case 4:\n      UPTR_DAT_080046a0PTR_DAT_080046a0JPTR_PTR_DAT_080046b8AT_080046acJPTR_DAT_080046a0QSI(\"PTR_PTR_DAT_080046b8AT_080046ac\");\n      break;\n    case 5:\n      UPTR_DAT_080046a0PTR_DAT_080046a0JPTR_PTR_DAT_080046b8AT_080046acJPTR_DAT_080046a0QSI(\"PTR_PTR_DAT_080046b8AT_080046b0\");\n      break;\n    case 6:\n      UPTR_DAT_080046a0PTR_DAT_080046a0JPTR_PTR_DAT_080046b8AT_080046acJPTR_DAT_080046a0QSI(\"PTR_PTR_DAT_080046b8AT_080046b4\");\n      break;\n    case 7:\n      UPTR_DAT_080046a0PTR_DAT_080046a0JPTR_PTR_DAT_080046b8AT_080046acJPTR_DAT_080046a0QSI(\"PTR_DAT_080046b8\");\n    }\n    for (byte i = 0; i < 3; i++) {\n      if ((PTR_PTR_DAT_080046b8PTR_PTR_DAT_080046b8AT_080046acT_080046bc[0x28] & 1) == 0) {\n        print_float(PTR_PTR_DAT_080046b8PTR_PTR_DAT_080046b8AT_080046acT_080046cc_values[i]);\n      }\n      else {\n        undefined8 hash = MPTR_PTR_DAT_080046b8AT_080046b0PTR_DAT_080046a0RPTR_DAT_080046a0UMEFP(PTR_PTR_DAT_080046b8PTR_PTR_DAT_080046b8AT_080046acT_080046cc_values[i]);\n        hash = FUNPTR_PTR_DAT_080046b8AT_080046b4_08008640((int)hash,(int)((ulonglong)hash >> 0x20),PTR_DAT_080046b8PTR_PTR_DAT_080046b8AT_080046acT_08004690,PTR_DAT_080046b8PTR_PTR_DAT_080046b8AT_080046acT_08004694);\n        undefined4 bits = RPTR_DAT_0800469cPTR_PTR_DAT_080046b8AT_080046b0UKFPTR_DAT_080046a0NTE((int)hash,(int)((ulonglong)hash >> 0x20));\n        print_float(bits);\n      }\n      if (i < 2) {\n        UPTR_DAT_080046a0PTR_DAT_080046a0JPTR_PTR_DAT_080046b8AT_080046acJPTR_DAT_080046a0QSI(PTR_PTR_DAT_080046b8PTR_PTR_DAT_080046b8AT_080046acT_080046c0);\n      }\n      else {\n        UPTR_DAT_080046a0PTR_DAT_080046a0JPTR_PTR_DAT_080046b8AT_080046acJPTR_DAT_080046a0QSI(PTR_PTR_DAT_080046b8PTR_PTR_DAT_080046b8AT_080046acT_080046c4);\n      }\n    }\n    PTR_PTR_DAT_080046b8PTR_PTR_DAT_080046b8AT_080046acT_080046bc_index++;\n  }\n  PTR_PTR_DAT_080046b8AT_080046b4EVPTR_PTR_DAT_080046b8AT_080046acQPTR_DAT_0800469cPTR_PTR_DAT_080046b8AT_080046acVVO(10);\n  return;\n}",
            "called": [
                "FUN_08008590",
                "FUN_08008c30",
                "FUN_08003826",
                "FUN_08008640",
                "FUN_08004d7c",
                "FUN_08004030",
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044e8",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "process_data_and_print_results_080044e8"
        },
        "FUN_08006c9c": {
            "renaming": {
                "FUN_08006c9c": "is_valid_input_08006c9c",
                "param_1": "input",
                "bVar1": "is_valid",
                "DAT_08006cdc": "data",
                "set_value_08006b00": "set_all_to_ones"
            },
            "code": "bool is_valid_input_08006c9c(int input) {\n  bool is_valid = input - 1U < 0x1000000;\n  if (is_valid) {\n    DAT_08006cdc[1] = input - 1;\n    set_all_to_ones(0xffffffff, 0xf);\n    DAT_08006cdc[2] = 0;\n    *DAT_08006cdc = 7;\n  }\n  return !is_valid;\n}",
            "called": [
                "FUN_08006b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c9c",
            "calling": [
                "FUN_08006d72"
            ],
            "imported": false,
            "current_name": "is_valid_input_08006c9c"
        },
        "FUN_0800a5a0": {
            "renaming": {
                "FUN_0800a5a0": "FUNC_0800a5a0"
            },
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nuint FUNC_0800a5a0(int param_1,undefined8 *param_2,int param_3,int param_4,int param_5,int param_6)\n\n{\n  undefined4 *puVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  uint *puVar5;\n  undefined4 uVar6;\n  uint **ppuVar7;\n  undefined4 uVar8;\n  int iVar9;\n  undefined4 *puVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  uint *puVar13;\n  int iVar14;\n  int iVar15;\n  undefined8 *puVar16;\n  int iVar17;\n  undefined4 *puVar18;\n  undefined8 *puVar19;\n  undefined4 uVar20;\n  int iVar21;\n  undefined8 *puVar22;\n  undefined4 *puVar23;\n  bool bVar24;\n  undefined8 uVar25;\n  undefined8 uVar26;\n  undefined8 uVar27;\n  undefined8 uVar28;\n  ulonglong uVar29;\n  undefined8 *local_284;\n  int local_280;\n  int local_270;\n  int local_26c;\n  uint *local_260 [2];\n  uint local_258 [20];\n  undefined8 uStack_208;\n  undefined8 local_168;\n  int local_160 [38];\n  undefined8 uStack_c8;\n  \n  uVar28 = CONCAT44(param_5,param_5);\n  iVar15 = *(int *)(PTR_DAT_0800a894 + param_5 * 4);\n  iVar9 = param_4 + -1;\n  local_260[1] = (uint *)param_2;\n  if (param_3 + 0x14 < 0 == SCARRY4(param_3,0x14)) {\n    local_26c = (int)((longlong)DAT_0800a898 * (longlong)(param_3 + -3) >> 0x22) -\n                (param_3 + -3 >> 0x1f);\n    local_270 = (local_26c + 1) * -0x18;\n  }\n  else {\n    local_270 = -0x18;\n    local_26c = 0;\n  }\n  local_270 = param_3 + local_270;\n  iVar17 = local_26c - iVar9;\n  if (-1 < iVar15 + iVar9) {\n    iVar21 = iVar15 + iVar9 + 1 + iVar17;\n    puVar16 = &uStack_208;\n    do {\n      while (iVar17 < 0) {\n        iVar17 = iVar17 + 1;\n        *(undefined4 *)puVar16 = 0;\n        *(undefined4 *)((int)puVar16 + 4) = 0;\n        puVar16 = puVar16 + 1;\n        if (iVar17 == iVar21) goto LAB_0800a626;\n      }\n      uVar26 = calculate_shifted_value_0800856c(*(undefined4 *)(param_6 + iVar17 * 4));\n      iVar17 = iVar17 + 1;\n      *puVar16 = uVar26;\n      puVar16 = puVar16 + 1;\n    } while (iVar17 != iVar21);\n  }\nLAB_0800a626:\n  puVar10 = (undefined4 *)(param_1 + -8);\n  if (-1 < iVar15) {\n    puVar22 = &uStack_208 + param_4;\n    iVar17 = iVar9;\n    puVar16 = &uStack_c8;\n    do {\n      if (iVar9 < 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        puVar23 = puVar10;\n        puVar19 = puVar22;\n        do {\n          puVar18 = puVar23 + 2;\n          uVar25 = FUNC_08008640(*puVar18,puVar23[3],*(undefined4 *)(puVar19 + -1),\n                                *(undefined4 *)((int)puVar19 + -4));\n          uVar26 = FUNC_080082d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                                (int)((ulonglong)uVar25 >> 0x20));\n          puVar23 = puVar18;\n          puVar19 = puVar19 + -1;\n        } while (puVar18 != puVar10 + param_4 * 2);\n      }\n      iVar17 = iVar17 + 1;\n      *puVar16 = uVar26;\n      puVar22 = puVar22 + 1;\n      puVar16 = puVar16 + 1;\n    } while (iVar17 != iVar15 + param_4);\n  }\n  local_260[0] = local_258 + iVar15 + -1;\n  iVar17 = iVar15;\n  do {\n    uVar26 = CONCAT44(*(undefined4 *)((int)&uStack_c8 + iVar17 * 8 + 4),\n                      *(undefined4 *)(&uStack_c8 + iVar17));\n    if (0 < iVar17) {\n      puVar16 = &uStack_c8 + iVar17;\n      puVar5 = local_258;\n      do {\n        uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n        FUNC_08008640((int)uVar26,uVar6,0,DAT_0800a89c);\n        ConvertToSignedFixedPoint_08008ba0();\n        uVar25 = calculate_shifted_value_0800856c();\n        uVar8 = (undefined4)((ulonglong)uVar25 >> 0x20);\n        uVar27 = FUNC_08008640((int)uVar25,uVar8,0,DAT_0800a8a0);\n        FUNC_080082d0((int)uVar26,uVar6,(int)uVar27,(int)((ulonglong)uVar27 >> 0x20));\n        uVar2 = ConvertToSignedFixedPoint_08008ba0();\n        puVar22 = puVar16 + -1;\n        uVar6 = *(undefined4 *)puVar22;\n        uVar11 = *(undefined4 *)((int)puVar16 + -4);\n        *puVar5 = uVar2;\n        uVar26 = FUNC_080082d4((int)uVar25,uVar8,uVar6,uVar11);\n        puVar16 = puVar22;\n        puVar5 = puVar5 + 1;\n      } while (puVar22 != &uStack_c8);\n    }\n    uVar26 = calculate_0800b2e8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),local_270);\n    uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    FUNC_08008640((int)uVar26,uVar8,0,0x3fc00000);\n    uVar25 = calculate_longlong_080094c0();\n    uVar25 = FUNC_08008640((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),0,DAT_0800a8a4);\n    uVar26 = FUNC_080082d0((int)uVar26,uVar8,(int)uVar25,(int)((ulonglong)uVar25 >> 0x20));\n    uVar2 = ConvertToSignedFixedPoint_08008ba0();\n    uVar25 = calculate_shifted_value_0800856c();\n    uVar26 = FUNC_080082d0((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                          (int)((ulonglong)uVar25 >> 0x20));\n    uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    uVar8 = (undefined4)uVar26;\n    if (local_270 < 1) {\n      if (local_270 == 0) {\n        iVar21 = (int)local_258[iVar17 + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      iVar21 = check_params_and_return_08008b4c(uVar8,uVar6,0,DAT_0800ac3c);\n      if (iVar21 != 0) {\n        uVar2 = uVar2 + 1;\n        if (iVar17 < 1) {\n          uVar26 = FUNC_080082d0(0,DAT_0800ac38,uVar8,uVar6);\n          iVar21 = 2;\n          goto LAB_0800a7a4;\n        }\n        iVar21 = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      iVar4 = (int)local_258[iVar17 + -1] >> (0x18U - local_270 & 0xff);\n      uVar12 = local_258[iVar17 + -1] - (iVar4 << (0x18U - local_270 & 0xff));\n      iVar21 = (int)uVar12 >> (0x17U - local_270 & 0xff);\n      local_258[iVar17 + -1] = uVar12;\n      uVar2 = uVar2 + iVar4;\njoined_r0x0800a8b8:\n      if (0 < iVar21) {\n        uVar2 = uVar2 + 1;\n        if (iVar17 < 1) {\n          uVar12 = 0;\n        }\n        else {\nLAB_0800a8c8:\n          uVar12 = local_258[0];\n          if (local_258[0] == 0) {\n            if (iVar17 != 1) {\n              puVar5 = local_258;\n              iVar4 = 1;\n              do {\n                puVar5 = puVar5 + 1;\n                uVar12 = *puVar5;\n                if (uVar12 != 0) {\n                  iVar14 = iVar4 + 1;\n                  goto LAB_0800a8e2;\n                }\n                iVar4 = iVar4 + 1;\n              } while (iVar4 != iVar17);\n            }\n          }\n          else {\n            iVar14 = 1;\n            iVar4 = 0;\nLAB_0800a8e2:\n            local_258[iVar4] = 0x1000000 - uVar12;\n            if (iVar14 < iVar17) {\n              uVar12 = local_258[iVar14];\n              puVar5 = local_258 + iVar14;\n              while( true ) {\n                puVar13 = puVar5 + 1;\n                *puVar5 = 0xffffff - uVar12;\n                if (puVar13 == local_258 + iVar17) break;\n                uVar12 = *puVar13;\n                puVar5 = puVar13;\n              }\n            }\n            uVar12 = 1;\n          }\n        }\n        if (0 < local_270) {\n          if (local_270 == 1) {\n            local_258[iVar17 + -1] = local_258[iVar17 + -1] & 0x7fffff;\n          }\n          else if (local_270 == 2) {\n            local_258[iVar17 + -1] = local_258[iVar17 + -1] & 0x3fffff;\n          }\n        }\n        if (iVar21 == 2) {\n          uVar26 = FUNC_080082d0(0,DAT_0800ac38,uVar8,uVar6);\n          if (uVar12 != 0) {\n            uVar25 = calculate_0800b2e8(0,DAT_0800ac38,local_270);\n            uVar26 = FUNC_080082d0((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                                  (int)((ulonglong)uVar25 >> 0x20));\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    iVar4 = is_param_not_null_08008b10((int)uVar26,uVar8,0,0);\n    if (iVar4 == 0) {\n      uVar26 = calculate_0800b2e8((int)uVar26,uVar8,-local_270);\n      uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n      uVar8 = (undefined4)uVar26;\n      iVar9 = check_params_and_return_08008b4c(uVar8,uVar6,0,DAT_0800ade4);\n      if (iVar9 == 0) {\n        uVar12 = ConvertToSignedFixedPoint_08008ba0(uVar8,uVar6);\n        local_258[iVar17] = uVar12;\n        iVar4 = iVar17;\n      }\n      else {\n        FUNC_08008640(uVar8,uVar6,0,DAT_0800ade8);\n        uVar12 = ConvertToSignedFixedPoint_08008ba0();\n        uVar26 = calculate_shifted_value_0800856c();\n        uVar26 = FUNC_08008640((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,DAT_0800ade4);\n        FUNC_080082d0(uVar8,uVar6,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n        uVar3 = ConvertToSignedFixedPoint_08008ba0();\n        local_270 = local_270 + 0x18;\n        local_258[iVar17] = uVar3;\n        local_258[iVar17 + 1] = uVar12;\n        iVar4 = iVar17 + 1;\n      }\n      goto LAB_0800a9f6;\n    }\n    iVar4 = iVar17 + -1;\n    if (iVar15 <= iVar4) {\n      uVar12 = 0;\n      puVar5 = local_258 + iVar17 + 0x3fffffff;\n      do {\n        puVar13 = puVar5 + -1;\n        uVar12 = uVar12 | *puVar5;\n        puVar5 = puVar13;\n      } while (puVar13 != local_260[0]);\n      if (uVar12 != 0) break;\n    }\n    if (local_258[iVar15 + -1] == 0) {\n      local_280 = 1;\n      ppuVar7 = local_260 + iVar15;\n      do {\n        puVar5 = *ppuVar7;\n        local_280 = local_280 + 1;\n        ppuVar7 = ppuVar7 + -1;\n      } while (puVar5 == (uint *)0x0);\n      local_280 = iVar17 + local_280;\n    }\n    else {\n      local_280 = iVar17 + 1;\n    }\n    iVar21 = iVar17 + 1;\n    puVar23 = (undefined4 *)(param_6 + (iVar21 + local_26c + 0x3fffffff) * 4);\n    puVar16 = &uStack_208 + iVar17 + param_4;\n    local_284 = &uStack_c8 + iVar21;\n    do {\n      puVar23 = puVar23 + 1;\n      uVar26 = calculate_shifted_value_0800856c(*puVar23);\n      *puVar16 = uVar26;\n      puVar22 = puVar16 + 1;\n      if (iVar9 < 0) {\n        uVar25 = 0;\n      }\n      else {\n        uVar25 = 0;\n        puVar18 = puVar10;\n        while( true ) {\n          puVar16 = puVar16 + -1;\n          puVar1 = puVar18 + 2;\n          uVar26 = FUNC_08008640((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*puVar1,puVar18[3]);\n          uVar25 = FUNC_080082d4((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),(int)uVar26,\n                                (int)((ulonglong)uVar26 >> 0x20));\n          if (puVar1 == puVar10 + param_4 * 2) break;\n          uVar26 = *puVar16;\n          puVar18 = puVar1;\n        }\n      }\n      *local_284 = uVar25;\n      iVar21 = iVar21 + 1;\n      iVar17 = local_280;\n      puVar16 = puVar22;\n      local_284 = local_284 + 1;\n    } while (iVar21 <= local_280);\n  } while( true );\n  local_270 = local_270 + -0x18;\n  if (local_258[iVar4] == 0) {\n    puVar5 = local_258 + iVar17 + 0x3ffffffe;\n    do {\n      uVar12 = *puVar5;\n      iVar4 = iVar4 + -1;\n      local_270 = local_270 + -0x18;\n      puVar5 = puVar5 + -1;\n    } while (uVar12 == 0);\n  }\nLAB_0800a9f6:\n  uVar26 = calculate_0800b2e8(0,DAT_0800ac38,local_270);\n  if (iVar4 < 0) {\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        uVar28 = 0;\nLAB_0800abe4:\n        if (iVar21 == 0) {\n          *local_260[1] = (undefined4)local_168;\n          *(int *)((int)local_260[1] + 4) = local_168._4_4_;\n          *(undefined8 *)((int)local_260[1] + 0x10) = uVar28;\n          *(int *)((int)local_260[1] + 8) = local_160[0];\n          *(int *)((int)local_260[1] + 0xc) = local_160[1];\n          return uVar2 & 7;\n        }\n        *(int *)((int)local_260[1] + 0x10) = (int)uVar28;\n        *(int *)((int)local_260[1] + 8) = local_160[0];\n        *(int *)((int)local_260[1] + 0x14) = (int)((ulonglong)uVar28 >> 0x20) + -0x80000000;\n        *(int *)((int)local_260[1] + 4) = local_168._4_4_ + -0x80000000;\n        *(int *)((int)local_260[1] + 0xc) = local_160[1] + -0x80000000;\n        *local_260[1] = (undefined4)local_168;\n        return uVar2 & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\nLAB_0800aafc:\n      iVar9 = (int)((ulonglong)uVar28 >> 0x20);\n      if (iVar21 != 0) {\n        iVar9 = iVar9 + -0x80000000;\n      }\n      *local_260[1] = (int)uVar28;\n      *(int *)((int)local_260[1] + 4) = iVar9;\nLAB_0800ab0e:\n      return uVar2 & 7;\n    }\n    uVar28 = 0;\n  }\n  else {\n    puVar22 = &uStack_c8 + iVar4;\n    puVar5 = local_258 + iVar4 + 1;\n    puVar16 = &uStack_c8 + iVar4 + 1;\n    do {\n      uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n      puVar5 = puVar5 + -1;\n      uVar25 = calculate_shifted_value_0800856c(*puVar5);\n      uVar25 = FUNC_08008640((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),(int)uVar26,uVar8);\n      puVar16 = puVar16 + -1;\n      *puVar16 = uVar25;\n      uVar26 = FUNC_08008640((int)uVar26,uVar8,0,DAT_0800ac40);\n    } while (puVar5 != local_258);\n    iVar9 = 0;\n    uVar8 = DAT_0800ac30;\n    uVar6 = DAT_0800ac34;\n    do {\n      DAT_0800ac30 = uVar8;\n      DAT_0800ac34 = uVar6;\n      if (iVar15 < 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        iVar17 = 0;\n        puVar16 = puVar22;\n        puVar10 = (undefined4 *)PTR_DAT_0800ac44;\n        while( true ) {\n          uVar25 = FUNC_08008640(*(undefined4 *)puVar16,*(undefined4 *)((int)puVar16 + 4),uVar8,uVar6\n                               );\n          uVar26 = FUNC_080082d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                                (int)((ulonglong)uVar25 >> 0x20));\n          iVar17 = iVar17 + 1;\n          if ((iVar15 < iVar17) || (iVar9 < iVar17)) break;\n          uVar8 = *puVar10;\n          uVar6 = puVar10[1];\n          puVar16 = puVar16 + 1;\n          puVar10 = puVar10 + 2;\n        }\n      }\n      bVar24 = iVar9 != iVar4;\n      *(int *)(&local_168 + iVar9) = (int)uVar26;\n      *(int *)((int)&local_168 + (iVar9 * 2 + 1) * 4) = (int)((ulonglong)uVar26 >> 0x20);\n      puVar22 = puVar22 + -1;\n      iVar9 = iVar9 + 1;\n      uVar8 = DAT_0800ac30;\n      uVar6 = DAT_0800ac34;\n    } while (bVar24);\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        if (iVar4 != 0) {\n          puVar16 = &local_168 + iVar4;\n          uVar28 = CONCAT44(*(undefined4 *)((int)&local_168 + (iVar4 * 2 + 1) * 4),\n                            *(undefined4 *)puVar16);\n          do {\n            uVar6 = (undefined4)((ulonglong)uVar28 >> 0x20);\n            uVar8 = (undefined4)uVar28;\n            uVar11 = *(undefined4 *)(puVar16 + -1);\n            uVar20 = *(undefined4 *)((int)puVar16 + -4);\n            uVar28 = FUNC_080082d4(uVar8,uVar6,uVar11,uVar20);\n            uVar26 = FUNC_080082d0(uVar11,uVar20,(int)uVar28,(int)((ulonglong)uVar28 >> 0x20));\n            uVar26 = FUNC_080082d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),uVar8,uVar6);\n            *puVar16 = uVar26;\n            puVar16 = puVar16 + -1;\n            *puVar16 = uVar28;\n          } while (&local_168 != puVar16);\n          if (1 < iVar4) {\n            puVar16 = &local_168 + iVar4;\n            uVar28 = CONCAT44(*(undefined4 *)((int)&local_168 + (iVar4 * 2 + 1) * 4),\n                              *(undefined4 *)puVar16);\n            do {\n              uVar6 = (undefined4)((ulonglong)uVar28 >> 0x20);\n              uVar8 = (undefined4)uVar28;\n              uVar11 = *(undefined4 *)(puVar16 + -1);\n              uVar20 = *(undefined4 *)((int)puVar16 + -4);\n              uVar28 = FUNC_080082d4(uVar8,uVar6,uVar11,uVar20);\n              uVar26 = FUNC_080082d0(uVar11,uVar20,(int)uVar28,(int)((ulonglong)uVar28 >> 0x20));\n              uVar26 = FUNC_080082d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),uVar8,uVar6);\n              *puVar16 = uVar26;\n              puVar16 = puVar16 + -1;\n              *puVar16 = uVar28;\n            } while (&local_168 + 1 != puVar16);\n            uVar28 = 0;\n            puVar16 = &local_168 + iVar4 + 1;\n            do {\n              puVar22 = puVar16 + -1;\n              uVar28 = FUNC_080082d4((int)uVar28,(int)((ulonglong)uVar28 >> 0x20),\n                                    *(undefined4 *)puVar22,*(undefined4 *)((int)puVar16 + -4));\n              puVar16 = puVar22;\n            } while (&local_168 + 2 != puVar22);\n            goto LAB_0800abe4;\n          }\n        }\n        uVar28 = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\n      puVar16 = &local_168 + iVar4 + 1;\n      do {\n        puVar22 = puVar16 + -1;\n        uVar28 = FUNC_080082d4((int)uVar28,(int)((ulonglong)uVar28 >> 0x20),*(undefined4 *)puVar22,\n                              *(undefined4 *)((int)puVar16 + -4));\n        puVar16 = puVar22;\n      } while (&local_168 != puVar22);\n      goto LAB_0800aafc;\n    }\n    uVar28 = 0;\n    puVar16 = &local_168 + iVar4 + 1;\n    do {\n      puVar22 = puVar16 + -1;\n      uVar28 = FUNC_080082d4((int)uVar28,(int)((ulonglong)uVar28 >> 0x20),*(undefined4 *)puVar22,\n                            *(undefined4 *)((int)puVar16 + -4));\n      puVar16 = puVar22;\n    } while (&local_168 != puVar22);\n  }\n  iVar9 = (int)((ulonglong)uVar28 >> 0x20);\n  uVar8 = (undefined4)uVar28;\n  if (iVar21 == 0) {\n    *(undefined8 *)local_260[1] = uVar28;\n    uVar29 = FUNC_080082d0((undefined4)local_168,local_168._4_4_,uVar8,iVar9);\n    if (iVar4 < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    iVar9 = 1;\n    puVar16 = &local_168;\n    do {\n      uVar29 = FUNC_080082d4((int)uVar29,(int)(uVar29 >> 0x20),*(undefined4 *)(puVar16 + 1),\n                            *(undefined4 *)((int)puVar16 + 0xc));\n      iVar9 = iVar9 + 1;\n      puVar16 = puVar16 + 1;\n    } while (iVar9 <= iVar4);\n    if (iVar21 == 0) goto LAB_0800ad26;\n  }\n  else {\n    *local_260[1] = uVar8;\n    *(int *)((int)local_260[1] + 4) = iVar9 + -0x80000000;\n    uVar29 = FUNC_080082d0((undefined4)local_168,local_168._4_4_,uVar8,iVar9);\n    if (0 < iVar4) goto LAB_0800ad04;\n  }\n  uVar29 = uVar29 & 0xffffffff | (ulonglong)((int)(uVar29 >> 0x20) + 0x80000000) << 0x20;\nLAB_0800ad26:\n  *(ulonglong *)((int)local_260[1] + 8) = uVar29;\n  return uVar2 & 7;\n}\n\n",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_080094c0",
                "FUN_0800856c",
                "FUN_08008b4c",
                "FUN_08008ba0",
                "FUN_08008640",
                "FUN_0800b2e8",
                "FUN_08008b10"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800a5a0",
            "calling": [
                "FUN_08009d78"
            ],
            "imported": false,
            "current_name": "FUNC_0800a5a0"
        },
        "FUN_0800195c": {
            "renaming": {
                "FUN_0800195c": "check_flag_and_set_bit_0800195c",
                "PTR_DAT_08001990": "ptr_data",
                "set_flag_and_check_080025e8": "set_flag_and_check"
            },
            "code": "void check_flag_and_set_bit_0800195c(void)\n{\n  bool is_flag_set = (PTR_DAT_08001990[1] == '\\x06');\n  bool is_bit_set = ((PTR_DAT_08001990[2] & 0x20) == 0);\n  if (!is_flag_set && is_bit_set) {\n    set_flag_and_check_080025e8();\n    PTR_DAT_08001990[2] |= 0x40;\n  }\n  return;\n}",
            "called": [
                "FUN_080025e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800195c",
            "calling": [
                "FUN_080074c8"
            ],
            "imported": false,
            "current_name": "check_flag_and_set_bit_0800195c"
        },
        "FUN_08009214": {
            "renaming": {
                "FUN_08009214": "check_if_input_is_valid_08009214",
                "in_ZR": "input",
                "calculate_and_concatenate_results_08009204": "calculate_and_concatenate_results"
            },
            "code": "bool check_if_input_is_valid_08009214(void)\n{\n  char input;\n  calculate_and_concatenate_results();\n  return input != '\\0';\n}",
            "called": [
                "FUN_08009204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009214",
            "calling": [
                "FUN_08002afc",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002638",
                "FUN_08004e30",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "check_if_input_is_valid_08009214"
        },
        "FUN_08004dd2": {
            "renaming": {
                "FUN_08004dd2": "validate_input_08004dd2",
                "bVar1": "buffer_value",
                "iVar2": "validation_result",
                "PTR_DAT_08004e2c": "PTR_DAT_08004e2c",
                "validate_buffer_080003ec": "validate_buffer",
                "initialize_data_08004c48": "initialize_data"
            },
            "code": "int validate_input_08004dd2() {\n  byte buffer_value = get_buffer_value(0);\n  if (buffer_value == 5) {\n    int validation_result = validate_buffer_080003ec(PTR_DAT_08004e2c, 1, 0x40);\n    if (validation_result == 0) {\n      return 0;\n    }\n  }\n  else {\n    if (buffer_value > 4) {\n      return 0;\n    }\n    int validation_result = validate_buffer_080003ec(PTR_DAT_08004e2c, 1, 0x28);\n    if (validation_result == 0) {\n      return 0;\n    }\n    initialize_data(0);\n  }\n  return 1;\n}",
            "called": [
                "FUN_08000310",
                "FUN_08004c48",
                "FUN_080003ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004dd2",
            "calling": [
                "FUN_080051b4"
            ],
            "imported": false,
            "current_name": "validate_input_08004dd2"
        },
        "FUN_08008244": {
            "renaming": {
                "FUN_08008244": "do_nothing_08008244"
            },
            "code": "\nvoid do_nothing_08008244(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008244",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "do_nothing_08008244"
        },
        "FUN_08005778": {
            "renaming": {
                "FUN_08005778": "update_parameter_from_pointer_08005778",
                "PTR_DAT_0800578c": "parameter_pointer_address",
                "update_parameter_080052ac": "update_parameter"
            },
            "code": "void update_parameter_from_pointer_08005778(void)\n{\n  int16_t* parameter_pointer = (int16_t*)PTR_DAT_0800578c;\n  int16_t parameter_value = *parameter_pointer;\n  update_parameter(parameter_value);\n  return;\n}",
            "called": [
                "FUN_080052ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005778",
            "calling": [
                "FUN_08007c7c"
            ],
            "imported": false,
            "current_name": "update_parameter_from_pointer_08005778"
        },
        "FUN_080028bc": {
            "renaming": {
                "FUN_080028bc": "calculate_result_080028bc",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "uVar1": "result1",
                "uVar2": "result2",
                "FUNC_08008eec": "square",
                "FUNC_08008cd8": "add",
                "FUNC_08008cdc": "square",
                "FUNC_08009054": "add"
            },
            "code": "int calculate_result_080028bc(int num1, int num2, int num3) {\n  int result1 = square(num2);\n  int result2 = square(num1);\n  int result3 = add(result1, result2);\n  int result4 = square(num3);\n  int result5 = add(result3, result4);\n  return result5;\n}",
            "called": [
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_08008cdc",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028bc",
            "calling": [
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_result_080028bc"
        },
        "FUN_08006628": {
            "renaming": {
                "FUN_08006628": "calculate_shifted_value_08006628",
                "calculate_080064ec": "calculate_first_value",
                "count_leading_zeroes": "count_leading_zeroes",
                "PTR_DAT_0800667c": "result_pointer",
                "PTR_DAT_08006678": "data_pointer",
                "DAT_08006674": "unknown_data"
            },
            "code": "uint32_t calculate_shifted_value_08006628() {\n  uint32_t value = calculate_first_value();\n  uint32_t leading_zeroes = count_leading_zeroes(0xf000000);\n  uint32_t shift_amount = (*(uint32_t *)(PTR_DAT_08006678 + 8) & 0xf0) >> (leading_zeroes & 0xff);\n  *(uint32_t *)PTR_DAT_0800667c = value >> shift_amount;\n  return *(uint32_t *)PTR_DAT_0800667c;\n}",
            "called": [
                "FUN_080064ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006628",
            "calling": [
                "FUN_0800618c",
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08006628"
        },
        "FUN_0800738e": {
            "renaming": {
                "FUN_0800738e": "validate_param_0800738e",
                "param_1": "input_param",
                "DAT_080073bc": "data_address",
                "do_nothing_080073c0": "do_nothing",
                "PTR_": "ptr_",
                "mask": "mask",
                "data_ptr": "data_ptr"
            },
            "code": "void validate_param_0800738e(ushort input_param) {\n  uint* data_ptr = (uint*)(DAT_080073bc + 0x14);\n  uint mask = *data_ptr;\n  if (((uint)input_param & mask) != 0) {\n    *data_ptr = (uint)input_param;\n    do_nothing_080073c0(input_param);\n  }\n  return;\n}",
            "called": [
                "FUN_080073c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800738e",
            "calling": [],
            "imported": false,
            "current_name": "validate_param_0800738e"
        },
        "FUN_08002828": {
            "renaming": {
                "FUN_08002828": "do_nothing_08002828"
            },
            "code": "\nvoid do_nothing_08002828(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002828",
            "calling": [
                "FUN_08001994"
            ],
            "imported": false,
            "current_name": "do_nothing_08002828"
        },
        "FUN_080053a0": {
            "renaming": {
                "FUN_080053a0": "FUNC_080053a0"
            },
            "code": "\nvoid FUNC_080053a0(void)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  \n  set_parameter_080052dc(*(undefined2 *)PTR_DAT_080055f0);\n  *(undefined2 *)PTR_DAT_080055f8 = *(undefined2 *)PTR_DAT_080055f4;\n  if (*(int *)PTR_DAT_080055fc == 0) {\n    uVar1 = get_data_pointer_08002f74();\n    *(undefined4 *)PTR_DAT_080055fc = uVar1;\n    if (*(int *)PTR_DAT_080055fc == 0) {\n      clear_bits_and_check_flag_080057e4();\n      PTR_DAT_08005600[2] = PTR_DAT_08005600[2] | 4;\n    }\n    else {\n      if (PTR_DAT_08005600[1] == '\\x03') {\n        *(undefined4 *)(PTR_DAT_08005604 + 0x1c) = *(undefined4 *)(*(int *)PTR_DAT_080055fc + 0x28);\n        calculate_local_param_08005324(*(undefined4 *)(PTR_DAT_08005604 + 0x1c));\n        *(undefined4 *)(PTR_DAT_08005604 + 0x18) = DAT_08005608;\n      }\n      *(int *)(PTR_DAT_08005604 + 0x20) =\n           (*(int *)(*(int *)PTR_DAT_080055fc + 0x30) >> 1) +\n           *(int *)(*(int *)PTR_DAT_080055fc + 0x30);\n      *(int *)PTR_DAT_08005604 = -(*(int *)(*(int *)PTR_DAT_080055fc + 0x10) >> 1);\n      *(undefined4 *)(PTR_DAT_08005604 + 4) = *(undefined4 *)PTR_DAT_08005604;\n      *(undefined4 *)(PTR_DAT_08005604 + 8) = *(undefined4 *)PTR_DAT_08005604;\n      *(undefined4 *)(PTR_DAT_08005604 + 0xc) = *(undefined4 *)(*(int *)PTR_DAT_080055fc + 0x10);\n      *(undefined4 *)(PTR_DAT_08005604 + 0x10) = 0;\n    }\n  }\n  if (*(int *)PTR_DAT_080055fc != 0) {\n    *(undefined2 *)PTR_DAT_080055f0 = **(undefined2 **)PTR_DAT_080055fc;\n    *(undefined2 *)PTR_DAT_080055f4 = 0;\n    *(int *)PTR_DAT_08005604 = *(int *)(*(int *)PTR_DAT_080055fc + 4) + *(int *)PTR_DAT_08005604;\n    if (0 < *(int *)PTR_DAT_08005604) {\n      *(ushort *)PTR_DAT_080055f4 = *(ushort *)PTR_DAT_080055f4 | 0x10;\n      *(int *)PTR_DAT_08005604 = *(int *)PTR_DAT_08005604 - *(int *)(PTR_DAT_08005604 + 0xc);\n      if ((*(ushort *)PTR_DAT_080055f0 & 0x20) == 0) {\n        *(int *)(PTR_DAT_08005600 + 4) = *(int *)(PTR_DAT_08005600 + 4) + 1;\n      }\n      else {\n        *(int *)(PTR_DAT_08005600 + 4) = *(int *)(PTR_DAT_08005600 + 4) + -1;\n      }\n    }\n    *(int *)(PTR_DAT_08005604 + 4) =\n         *(int *)(*(int *)PTR_DAT_080055fc + 8) + *(int *)(PTR_DAT_08005604 + 4);\n    if (0 < *(int *)(PTR_DAT_08005604 + 4)) {\n      *(ushort *)PTR_DAT_080055f4 = *(ushort *)PTR_DAT_080055f4 | 0x440;\n      *(int *)(PTR_DAT_08005604 + 4) =\n           *(int *)(PTR_DAT_08005604 + 4) - *(int *)(PTR_DAT_08005604 + 0xc);\n      if ((*(ushort *)PTR_DAT_080055f0 & 0x80) == 0) {\n        *(int *)(PTR_DAT_08005600 + 8) = *(int *)(PTR_DAT_08005600 + 8) + 1;\n      }\n      else {\n        *(int *)(PTR_DAT_08005600 + 8) = *(int *)(PTR_DAT_08005600 + 8) + -1;\n      }\n    }\n    *(int *)(PTR_DAT_08005604 + 8) =\n         *(int *)(*(int *)PTR_DAT_080055fc + 0xc) + *(int *)(PTR_DAT_08005604 + 8);\n    if (0 < *(int *)(PTR_DAT_08005604 + 8)) {\n      *(ushort *)PTR_DAT_080055f4 = *(ushort *)PTR_DAT_080055f4 | 0x100;\n      *(int *)(PTR_DAT_08005604 + 8) =\n           *(int *)(PTR_DAT_08005604 + 8) - *(int *)(PTR_DAT_08005604 + 0xc);\n      if ((*(ushort *)PTR_DAT_080055f0 & 0x200) == 0) {\n        *(int *)(PTR_DAT_08005600 + 0xc) = *(int *)(PTR_DAT_08005600 + 0xc) + 1;\n      }\n      else {\n        *(int *)(PTR_DAT_08005600 + 0xc) = *(int *)(PTR_DAT_08005600 + 0xc) + -1;\n      }\n    }\n    *(int *)(PTR_DAT_08005604 + 0x10) = *(int *)(PTR_DAT_08005604 + 0x10) + 1;\n    if (*(uint *)(PTR_DAT_08005604 + 0x10) < *(uint *)(*(int *)PTR_DAT_080055fc + 0x10)) {\n      if (PTR_DAT_08005600[1] == '\\x04') {\n        iVar2 = check_if_threshold_exceeded_08005360();\n        if (iVar2 != 0) {\n          if (*(uint *)(*(int *)PTR_DAT_080055fc + 0x30) < *(uint *)(PTR_DAT_08005604 + 0x1c)) {\n            *(int *)(PTR_DAT_08005604 + 0x1c) =\n                 *(int *)(PTR_DAT_08005604 + 0x1c) - *(int *)(*(int *)PTR_DAT_080055fc + 0x30);\n            calculate_local_param_08005324(*(undefined4 *)(PTR_DAT_08005604 + 0x1c));\n          }\n          else {\n            clear_bits_and_check_flag_080057e4();\n            PTR_DAT_08005600[2] = PTR_DAT_08005600[2] | 4;\n          }\n        }\n      }\n      else if (*(uint *)(PTR_DAT_08005748 + 0x10) < *(uint *)(*(int *)PTR_DAT_0800574c + 0x34)) {\n        iVar2 = check_if_threshold_exceeded_08005360();\n        if (iVar2 != 0) {\n          *(int *)(PTR_DAT_08005748 + 0x1c) =\n               *(int *)(PTR_DAT_08005748 + 0x1c) + *(int *)(*(int *)PTR_DAT_0800574c + 0x30);\n          if (*(uint *)(*(int *)PTR_DAT_0800574c + 0x3c) <= *(uint *)(PTR_DAT_08005748 + 0x1c)) {\n            *(undefined4 *)(PTR_DAT_08005748 + 0x1c) =\n                 *(undefined4 *)(*(int *)PTR_DAT_0800574c + 0x3c);\n          }\n          calculate_local_param_08005324(*(undefined4 *)(PTR_DAT_08005748 + 0x1c));\n        }\n      }\n      else if (*(uint *)(PTR_DAT_08005748 + 0x10) < *(uint *)(*(int *)PTR_DAT_0800574c + 0x38)) {\n        if (*(int *)(PTR_DAT_08005748 + 0x1c) != *(int *)(*(int *)PTR_DAT_0800574c + 0x3c)) {\n          *(undefined4 *)(PTR_DAT_08005748 + 0x1c) =\n               *(undefined4 *)(*(int *)PTR_DAT_0800574c + 0x3c);\n          calculate_local_param_08005324(*(undefined4 *)(PTR_DAT_08005748 + 0x1c));\n        }\n      }\n      else if (*(int *)(PTR_DAT_08005748 + 0x10) == *(int *)(*(int *)PTR_DAT_0800574c + 0x38)) {\n        if (*(int *)(PTR_DAT_08005748 + 0x1c) == *(int *)(*(int *)PTR_DAT_0800574c + 0x3c)) {\n          *(undefined4 *)(PTR_DAT_08005748 + 0x18) = DAT_08005750;\n        }\n        else {\n          *(int *)(PTR_DAT_08005748 + 0x18) = 420000 - *(int *)(PTR_DAT_08005748 + 0x18);\n        }\n      }\n      else {\n        iVar2 = check_if_threshold_exceeded_08005360();\n        if (iVar2 != 0) {\n          if (*(uint *)(PTR_DAT_08005748 + 0x20) < *(uint *)(PTR_DAT_08005748 + 0x1c)) {\n            *(int *)(PTR_DAT_08005748 + 0x1c) =\n                 *(int *)(PTR_DAT_08005748 + 0x1c) - *(int *)(*(int *)PTR_DAT_0800574c + 0x30);\n          }\n          else {\n            *(uint *)(PTR_DAT_08005748 + 0x1c) = *(uint *)(PTR_DAT_08005748 + 0x1c) >> 1;\n          }\n          if (*(uint *)(PTR_DAT_08005748 + 0x1c) < *(uint *)(*(int *)PTR_DAT_0800574c + 0x2c)) {\n            *(undefined4 *)(PTR_DAT_08005748 + 0x1c) =\n                 *(undefined4 *)(*(int *)PTR_DAT_0800574c + 0x2c);\n          }\n          calculate_local_param_08005324(*(undefined4 *)(PTR_DAT_08005748 + 0x1c));\n        }\n      }\n    }\n    else {\n      *(undefined2 *)PTR_DAT_08005754 = 0;\n      *(undefined4 *)PTR_DAT_0800574c = 0;\n      check_and_wrap_around_08002f40();\n    }\n  }\n  *(ushort *)PTR_DAT_08005754 = *(ushort *)PTR_DAT_08005754 ^ *(ushort *)(PTR_DAT_08005758 + 0x18);\n  *(ushort *)PTR_DAT_0800575c = *(ushort *)PTR_DAT_0800575c ^ *(ushort *)(PTR_DAT_08005758 + 0x1a);\n  return;\n}\n\n",
            "called": [
                "FUN_080052dc",
                "FUN_08005324",
                "FUN_08002f40",
                "FUN_080057e4",
                "FUN_08005360",
                "FUN_08002f74"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080053a0",
            "calling": [
                "FUN_08007c7c"
            ],
            "imported": false,
            "current_name": "FUNC_080053a0"
        },
        "FUN_080092c4": {
            "renaming": {
                "FUN_080092c4": "copy_data_and_clear_memory_080092c4",
                "iVar1": "index",
                "puVar2": "data_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void copy_data_and_clear_memory_080092c4(void)\n{\n  int index;\n  undefined4 *data_ptr;\n  code *jump_table;\n  for (index = 0; index < PTR_DAT_08009308 - PTR_DAT_08009304; index += 4) {\n    *(undefined4 *)(PTR_DAT_08009304 + index) = *(undefined4 *)(DAT_08009300 + index);\n  }\n  for (data_ptr = (undefined4 *)PTR_DAT_0800930c; data_ptr < PTR_DAT_08009310; data_ptr++) {\n    *data_ptr = 0;\n  }\n  set_bit_and_clear_other_bits();\n  execute_functions();\n  jump_table = (code *)0x80092fa;\n  processDataAndUpdateFlags();\n  (*jump_table)();\n  return;\n}\n",
            "called": [
                "FUN_08007540",
                "FUN_0800756c",
                "FUN_0800b3e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080092c4",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_and_clear_memory_080092c4"
        },
        "FUN_08008250": {
            "renaming": {
                "FUN_08008250": "wait_for_flag_to_set_08008250",
                "param_1": "flag_ptr"
            },
            "code": "void wait_for_flag_to_set_08008250(void* flag_ptr)\n{\n  wait_for_flag_to_set_08008250_08007e1c(flag_ptr);\n  return;\n}",
            "called": [
                "FUN_08007e1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008250",
            "calling": [
                "FUN_0800369c",
                "FUN_08003826",
                "FUN_080036f0",
                "FUN_080037fc",
                "FUN_08003778",
                "FUN_080036c6"
            ],
            "imported": false,
            "current_name": "wait_for_flag_to_set_08008250"
        },
        "FUN_0800184c": {
            "renaming": {
                "FUN_0800184c": "validate_input_0800184c",
                "param_1": "output",
                "param_2": "max_length",
                "param_3": "base",
                "param_4": "input",
                "uVar2": "status",
                "iVar1": "converted"
            },
            "code": "int validate_input_0800184c(byte *output, int max_length, int base, byte *input) {\n  int status = 0;\n  if (*(char *)(base + (uint)*input) == '\\0') {\n    status = 0;\n  }\n  else {\n    *output = *(byte *)(base + (uint)*input);\n    if ((*output < 'A') || ('Z' < *output)) {\n      *PTR_DAT_080018c8 = 2;\n      status = 0;\n    }\n    else {\n      *input = *input + 1;\n      int converted = convert_string_to_uint32_08002638(base, input, max_length);\n      if (converted == 0) {\n        *PTR_DAT_080018c8 = 1;\n        status = 0;\n      }\n      else {\n        status = 1;\n      }\n    }\n  }\n  return status;\n}",
            "called": [
                "FUN_08002638"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800184c",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "validate_input_0800184c"
        },
        "FUN_08001f00": {
            "renaming": {
                "FUN_08001f00": "FUNC_08001f00"
            },
            "code": "\nvoid FUNC_08001f00(int param_1,undefined4 *param_2,int param_3,byte param_4,byte param_5,byte param_6\n                 ,undefined4 param_7,char param_8,undefined4 param_9,char param_10)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  int iVar3;\n  uint uVar4;\n  undefined8 uVar5;\n  undefined8 uVar6;\n  uint local_6c [4];\n  undefined4 local_5c;\n  undefined4 local_58;\n  undefined4 local_54;\n  undefined4 local_50;\n  undefined4 local_4c;\n  undefined4 local_48;\n  ushort local_42;\n  undefined4 local_40;\n  undefined4 local_3c;\n  undefined4 local_38;\n  uint local_34;\n  undefined4 local_30;\n  undefined4 local_2c;\n  char local_27;\n  ushort local_26;\n  undefined4 local_24;\n  uint local_20;\n  uint local_1c;\n  \n  local_2c = FUNC_08008cdc(*(undefined4 *)((uint)param_4 * 4 + param_1),\n                          *(undefined4 *)((uint)param_4 * 4 + param_3));\n  local_30 = FUNC_08008cdc(*(undefined4 *)((uint)param_5 * 4 + param_1),\n                          *(undefined4 *)((uint)param_5 * 4 + param_3));\n  local_34 = FUNC_08008cd8(param_2[param_6],*(undefined4 *)((uint)param_6 * 4 + param_1));\n  local_1c = *(uint *)((uint)param_4 * 4 + param_3) ^ 0x80000000;\n  local_20 = *(uint *)((uint)param_5 * 4 + param_3) ^ 0x80000000;\n  local_38 = FUNC_08008cd8(param_2[param_4],local_2c);\n  local_3c = FUNC_08008cd8(param_2[param_5],local_30);\n  uVar1 = FUNC_08008eec(local_1c,local_3c);\n  uVar2 = FUNC_08008eec(local_20,local_38);\n  uVar1 = FUNC_08008cd8(uVar1,uVar2);\n  uVar5 = calculate_hash_08008590(uVar1);\n  uVar1 = FUNC_08008eec(local_1c,local_38);\n  uVar2 = FUNC_08008eec(local_20,local_3c);\n  uVar1 = FUNC_08008cdc(uVar1,uVar2);\n  uVar6 = calculate_hash_08008590(uVar1);\n  uVar5 = calculate_result_thunk_08009990((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),(int)uVar6,\n                             (int)((ulonglong)uVar6 >> 0x20));\n  local_24 = calculate_float_bits_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n  if (param_10 == '\\0') {\n    iVar3 = check_results_are_zero_or_negative_0800923c(local_24,0);\n    if (iVar3 != 0) {\n      uVar5 = calculate_hash_08008590(local_24);\n      uVar5 = FUNC_080082d4((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),DAT_08002240,DAT_08002244);\n      local_24 = calculate_float_bits_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    }\n  }\n  else {\n    iVar3 = validate_results_08009250(local_24,0);\n    if (iVar3 != 0) {\n      uVar5 = calculate_hash_08008590(local_24);\n      uVar5 = FUNC_080082d0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),DAT_08002240,DAT_08002244);\n      local_24 = calculate_float_bits_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    }\n  }\n  uVar1 = FUNC_08008eec(local_24,param_9);\n  uVar5 = calculate_hash_08008590(uVar1);\n  uVar6 = calculate_hash_08008590(local_34 & 0x7fffffff);\n  uVar5 = calculate_hypotenuse_0800981c((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),(int)uVar6,\n                       (int)((ulonglong)uVar6 >> 0x20));\n  local_40 = calculate_float_bits_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n  iVar3 = check_if_input_is_valid_08009214(local_40,0);\n  if (iVar3 == 0) {\n    uVar1 = FUNC_08009054(local_40,*(undefined4 *)(PTR_DAT_08002248 + 0x1c));\n    uVar5 = calculate_hash_08008590(uVar1);\n    uVar5 = calculate_longlong_080094c0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    local_42 = calculate_shift_amount_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    if (param_8 != '\\0') {\n      uVar1 = calculate_hash_08008e44(local_42);\n      param_7 = FUNC_08008eec(param_7,uVar1);\n    }\n    uVar1 = calculate_hash_08008e44(local_42);\n    local_48 = FUNC_08009054(local_24,uVar1);\n    uVar1 = calculate_hash_08008e44(local_42);\n    local_4c = FUNC_08009054(local_34,uVar1);\n    uVar5 = calculate_hash_08008590(local_48);\n    uVar5 = FUNC_08008640((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),0,DAT_0800224c);\n    uVar6 = calculate_hash_08008590(local_48);\n    uVar5 = FUNC_08008640((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),(int)uVar6,\n                         (int)((ulonglong)uVar6 >> 0x20));\n    uVar5 = FUNC_080082d0(0,DAT_08002250,(int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    local_50 = calculate_float_bits_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    local_54 = local_48;\n    local_27 = '\\0';\n    local_6c[param_6] = *(uint *)(param_1 + (uint)param_6 * 4);\n    for (local_26 = 1; local_26 < local_42; local_26 = local_26 + 1) {\n      if ((int)local_27 < (int)(uint)(byte)PTR_DAT_08002248[0x3e]) {\n        uVar1 = FUNC_08008eec(local_1c,local_54);\n        uVar2 = FUNC_08008eec(local_20,local_50);\n        local_6c[3] = FUNC_08008cdc(uVar1,uVar2);\n        uVar1 = FUNC_08008eec(local_1c,local_50);\n        uVar2 = FUNC_08008eec(local_20,local_54);\n        local_1c = FUNC_08008cd8(uVar1,uVar2);\n        local_20 = local_6c[3];\n        local_27 = local_27 + '\\x01';\n      }\n      else {\n        uVar1 = calculate_hash_08008e44(local_26);\n        uVar1 = FUNC_08008eec(uVar1,local_48);\n        uVar5 = calculate_hash_08008590(uVar1);\n        uVar5 = calculate_result_08009410((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n        local_58 = calculate_float_bits_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n        uVar1 = calculate_hash_08008e44(local_26);\n        uVar1 = FUNC_08008eec(uVar1,local_48);\n        uVar5 = calculate_hash_08008590(uVar1);\n        uVar5 = calculateResult_080096e8((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n        local_5c = calculate_float_bits_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n        uVar1 = FUNC_08008eec(*(uint *)((uint)param_4 * 4 + param_3) ^ 0x80000000,local_58);\n        uVar2 = FUNC_08008eec(*(undefined4 *)((uint)param_5 * 4 + param_3),local_5c);\n        local_1c = FUNC_08008cdc(uVar1,uVar2);\n        uVar1 = FUNC_08008eec(*(uint *)((uint)param_4 * 4 + param_3) ^ 0x80000000,local_5c);\n        uVar2 = FUNC_08008eec(*(undefined4 *)((uint)param_5 * 4 + param_3),local_58);\n        local_20 = FUNC_08008cd8(uVar1,uVar2);\n        local_27 = '\\0';\n      }\n      uVar4 = FUNC_08008cdc(local_2c,local_1c);\n      local_6c[param_4] = uVar4;\n      uVar4 = FUNC_08008cdc(local_30,local_20);\n      local_6c[param_5] = uVar4;\n      uVar4 = FUNC_08008cdc(local_6c[param_6],local_4c);\n      local_6c[param_6] = uVar4;\n      process_data_and_update_status_flags_08001e98(local_6c[0],local_6c[1],local_6c[2],param_7,param_8);\n      if (*PTR_DAT_08002404 != '\\0') {\n        return;\n      }\n    }\n    process_data_and_update_status_flags_08001e98(*param_2,param_2[1],param_2[2],param_7,param_8);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08009250",
                "FUN_08009410",
                "FUN_080094c0",
                "FUN_08008590",
                "FUN_080096e8",
                "FUN_08008640",
                "FUN_08008bf0",
                "thunk_FUN_08009990",
                "FUN_08008cdc",
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_08008c30",
                "FUN_08008e44",
                "FUN_08001e98",
                "FUN_08009214",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_0800923c",
                "FUN_0800981c",
                "FUN_08008eec"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001f00",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "FUNC_08001f00"
        },
        "FUN_08006ce0": {
            "renaming": {
                "FUN_08006ce0": "set_bits_in_memory_08006ce0",
                "param_1": "memory_address",
                "setBitsInMemory_08006950": "set_bits_in_memory_08006950"
            },
            "code": "void set_bits_in_memory_08006ce0(undefined4 memory_address)\n{\n  set_bits_in_memory_08006ce0_08006950(memory_address);\n  return;\n}",
            "called": [
                "FUN_08006950"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ce0",
            "calling": [
                "FUN_080059b4"
            ],
            "imported": false,
            "current_name": "set_bits_in_memory_08006ce0"
        },
        "FUN_08006d4a": {
            "renaming": {
                "FUN_08006d4a": "set_bit_at_position_08006d4a",
                "param_1": "position"
            },
            "code": "void set_bit_at_position_08006d4a(int position){\n\tset_bit_at_position_08006d4a_080069e4(position);\n\treturn;\n}",
            "called": [
                "FUN_080069e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d4a",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_at_position_08006d4a"
        },
        "FUN_08008894": {
            "renaming": {
                "FUN_08008894": "FUNC_08008894"
            },
            "code": "\nulonglong FUNC_08008894(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = calculate_result_08008a02();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_080089b2;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_080089b2:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_08008a02"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008894",
            "calling": [
                "FUN_08001994",
                "FUN_0800a1bc",
                "FUN_080098d0",
                "FUN_08009990",
                "FUN_0800af78",
                "FUN_080005b4",
                "FUN_08003004"
            ],
            "imported": false,
            "current_name": "FUNC_08008894"
        },
        "FUN_08000374": {
            "renaming": {
                "FUN_08000374": "write_to_buffer_with_sum_08000374",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "local_1c": "remaining_size",
                "local_18": "current_char",
                "local_14": "dest",
                "local_9": "sum"
            },
            "code": "void write_to_buffer_with_sum_08000374(int dest, char *src, int size) {\n  int remaining_size = size;\n  char *current_char = src;\n  char sum = '\\0';\n  if (*(int *)PTR_DAT_080003e8 == 0) {\n    write_to_buffer_080002f0();\n    current_char = src;\n    dest = size;\n  }\n  while (remaining_size != 0) {\n    sum = (sum != '\\0') + *current_char;\n    write_to_buffer_if_empty_08000340(dest, *current_char);\n    current_char++;\n    dest++;\n    remaining_size--;\n  }\n  write_to_buffer_if_empty_08000340(dest, sum);\n  return;\n}",
            "called": [
                "FUN_080002f0",
                "FUN_08000340"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000374",
            "calling": [
                "FUN_08004bf4",
                "FUN_08004bc0",
                "FUN_08004c2a"
            ],
            "imported": false,
            "current_name": "write_to_buffer_with_sum_08000374"
        },
        "FUN_080037fc": {
            "renaming": {
                "FUN_080037fc": "calculate_and_wait_for_absolute_value_080037fc",
                "param_1": "value",
                "local_c": "absolute_value",
                "wait_for_flag_to_set_08008250": "wait_for_flag_to_set",
                "calculate_and_wait_for_digits_08003778": "calculate_and_wait_for_digits"
            },
            "code": "void calculate_and_wait_for_absolute_value_080037fc(int value)\n{\n  int absolute_value;\n  absolute_value = value;\n  if (value < 0) {\n    wait_for_flag_to_set(0x2d);\n    absolute_value = -value;\n  }\n  calculate_and_wait_for_digits(absolute_value);\n  return;\n}",
            "called": [
                "FUN_08008250",
                "FUN_08003778"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037fc",
            "calling": [
                "FUN_08004250",
                "FUN_080046d0",
                "FUN_08004900"
            ],
            "imported": false,
            "current_name": "calculate_and_wait_for_absolute_value_080037fc"
        },
        "FUN_0800a1bc": {
            "renaming": {
                "FUN_0800a1bc": "calculate_result_0800a1bc",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "uVar2": "divisor_bits",
                "iVar3": "temp_int",
                "uVar4": "temp_var",
                "uVar5": "temp_uint",
                "uVar6": "dividend_mask",
                "uVar7": "divisor_mask",
                "uVar8": "dividend_copy",
                "uVar9": "dividend_diff",
                "uVar10": "remainder",
                "uVar11": "quotient_bits",
                "uVar12": "divisor_copy",
                "uVar13": "shifted_bits",
                "uVar14": "temp",
                "uVar15": "bit",
                "DAT_0800a340": "divisor_mask"
            },
            "code": "uint calculate_result_0800a1bc(uint dividend, uint divisor)\n{\n  uint quotient = 0;\n  uint remainder = 0;\n  uint bit = 0;\n  uint DAT_0800a340 = 0x80000000;\n  uint dividend_mask = 0xffffffff;\n  uint divisor_bits = 0;\n  uint quotient_bits = 0x16;\n  uint divisor_shift = 0x1f;\n  uint dividend_shift = 0x1f;\n  uint divisor_copy = divisor;\n  uint dividend_copy = dividend;\n  if ((DAT_0800a340 & ~divisor) == 0) {\n    uint64_t temp = FUNC_08008640(dividend, divisor, dividend, divisor);\n    quotient = FUNC_080082d4((int)temp, (int)((uint64_t)temp >> 0x20), dividend, divisor);\n    return quotient;\n  }\n  if ((int)divisor < 1) {\n    if ((divisor & 0x7fffffff | dividend) == 0) {\n      return dividend;\n    }\n    if (divisor != 0) {\n      uint64_t temp = FUNC_080082d0(dividend, divisor, dividend);\n      uint32_t temp_high = (uint32_t)((uint64_t)temp >> 0x20);\n      quotient = FUNC_08008894((int)temp, temp_high, (int)temp, temp_high);\n      return quotient;\n    }\n    do {\n      uint dividend_high = dividend >> 0xb;\n      divisor_shift -= 0x15;\n      dividend_shift += 0x15;\n      dividend = dividend << 0x15;\n    } while (dividend_high == 0);\n    divisor_bits = divisor_shift;\n    if (-1 < (int)dividend) {\n      goto LAB_0800a290;\n    }\n    divisor_bits = 0x20;\n    dividend_mask = 0xffffffff;\n    divisor_copy = dividend;\n  }\n  else {\n    divisor_bits = (int)divisor >> 0x14;\n    divisor_copy = dividend;\n    dividend_mask = 0x7fffffff;\n    if (divisor_bits != 0) {\n      goto LAB_0800a1da;\n    }\n    divisor_shift = 0x1f;\n    dividend_shift = 0x1f;\n    dividend_copy = dividend;\n  }\n  DAT_0800a340 = DAT_0800a340 >> divisor_bits;\n  quotient_bits -= divisor_bits;\n  divisor_copy = divisor_copy << divisor_shift;\n  while (divisor_bits != 0x80000000) {\n    bit = divisor_copy >> 0x1f;\n    divisor_copy = divisor_copy << 1;\n    divisor_bits--;\n    if (bit == 0) {\n      continue;\n    }\n    remainder |= DAT_0800a340;\n    quotient |= DAT_0800a340;\n  LAB_0800a1da:\n    DAT_0800a340 = DAT_0800a340 >> 1;\n    quotient_bits--;\n    divisor_copy = divisor_copy >> 1;\n    dividend_copy = dividend_copy << 1;\n    remainder = remainder << 1;\n    if ((dividend_copy & dividend_mask) != 0) {\n      remainder |= 1;\n    }\n    if (divisor_copy <= remainder) {\n      quotient |= DAT_0800a340;\n      remainder -= divisor_copy;\n    }\n  }\n  return quotient;\n}",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008894"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a1bc",
            "calling": [
                "FUN_080098d0",
                "FUN_08009b24"
            ],
            "imported": false,
            "current_name": "calculate_result_0800a1bc"
        },
        "FUN_0800525c": {
            "renaming": {
                "FUN_0800525c": "check_and_update_data_0800525c",
                "param_1": "data",
                "*PTR_DAT_080052a8": "data_pointer",
                "process_until_data_pointer_is_zero_or_status_flag_is_true_08002fd4": "process_until_data_pointer_is_zero_or_status_flag_is_true",
                "do_nothing_and_return_08005250": "do_nothing_and_return",
                "do_nothing_0800522c": "do_nothing",
                "do_nothing_08005220": "do_something",
                "do_nothing_08005208": "do_something_else"
            },
            "code": "void check_and_update_data_0800525c(char data)\n{\n    int current_data = (int)data;\n    int* *PTR_DAT_080052a8 = (int*)0x080052a8;\n\n    if (current_data != (uint)(byte)**PTR_DAT_080052a8) {\n        process_until_*PTR_DAT_080052a8_is_zero_or_status_flag_is_true();\n        if (data == '\\0') {\n            do_nothing_and_return_08005250();\n        }\n        else {\n            if (data < '\\x01') {\n                do_nothing_0800522c();\n            }\n            else {\n                do_nothing_08005220();\n            }\n            do_nothing_08005208();\n        }\n        **PTR_DAT_080052a8 = current_data;\n    }\n    return;\n}",
            "called": [
                "FUN_08005250",
                "FUN_08002fd4",
                "FUN_0800522c",
                "FUN_08005220",
                "FUN_08005208"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800525c",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "check_and_update_data_0800525c"
        },
        "FUN_080073d4": {
            "renaming": {
                "FUN_080073d4": "set_bit_in_short_array_080073d4",
                "param_1": "bit_position",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void set_bit_in_short_array_080073d4(uint bit_position)\n{\n    uint index = (bit_position >> 4) * 0x400 + 0x4002001a;\n    short* array_ptr = (short*)index;\n    uint bit_offset = bit_position & 0xf;\n    short bit_mask = (short)(1 << bit_offset);\n    *array_ptr = bit_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073d4",
            "calling": [
                "FUN_08007520"
            ],
            "imported": false,
            "current_name": "set_bit_in_short_array_080073d4"
        },
        "FUN_08006dfe": {
            "renaming": {
                "FUN_08006dfe": "set_bit_08006dfe",
                "param_1": "bit_to_set",
                "set_bit_in_array_08006a8c": "set_bit_in_array"
            },
            "code": "void set_bit_08006dfe(char bit_to_set) {\n  set_bit_08006dfe_in_array(bit_to_set);\n  return;\n}",
            "called": [
                "FUN_08006a8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dfe",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_08006dfe"
        },
        "FUN_08006d66": {
            "renaming": {
                "FUN_08006d66": "synchronize_data_and_return_08006d66",
                "synchronize_data_08006c70": "synchronize_data"
            },
            "code": "void synchronize_data_and_return_08006d66(void)\n{\n  synchronize_data();\n  return;\n}",
            "called": [
                "FUN_08006c70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d66",
            "calling": [],
            "imported": false,
            "current_name": "synchronize_data_and_return_08006d66"
        },
        "FUN_08006e88": {
            "renaming": {
                "FUN_08006e88": "set_bits_08006e88",
                "param_1": "bitfield",
                "param_2": "flags",
                "uVar1": "bit",
                "uVar2": "flag",
                "iVar3": "i",
                "local_c": "i"
            },
            "code": "void set_bits_08006e88(uint *bitfield, uint *flags) {\n  uint flag;\n  uint bit;\n  int i;\n\n  for (i = 0; i < 16; i++) {\n    bit = 1 << (i & 0xff);\n    flag = *flags & bit;\n    if (flag == bit) {\n      if ((flags[1] == 2) || (flags[1] == 0x12)) {\n        uint value = flags[4];\n        bitfield[(i >> 3) + 8] &= ~(0xf << ((i & 7) << 2));\n        bitfield[(i >> 3) + 8] |= value << ((i & 7) << 2);\n      }\n      *bitfield &= ~(3 << ((i & 0x7f) << 1));\n      *bitfield |= (flags[1] & 3) << ((i & 0x7f) << 1);\n      if ((((flags[1] == 1) || (flags[1] == 2)) || (flags[1] == 0x11)) || (flags[1] == 0x12)) {\n        bitfield[2] &= ~(3 << ((i & 0x7f) << 1));\n        bitfield[2] |= flags[3] << ((i & 0x7f) << 1);\n        bitfield[1] &= ~(1 << (i & 0xff));\n        bitfield[1] |= (flags[1] >> 4 & 1) << (i & 0xff);\n      }\n      bitfield[3] &= ~(3 << ((i & 0x7f) << 1));\n      bitfield[3] |= flags[2] << ((i & 0x7f) << 1);\n      if ((flags[1] & 0x10000000) != 0) {\n        *(uint *)(PTR_DAT_0800719c + 0x44) |= 0x4000;\n        *(uint *)(PTR_DAT_080071a0 + ((i >> 2) + 2) * 4) &= ~(0xf << ((i & 3) << 2));\n        if (bitfield == PTR_DAT_080071a4) {\n          i = 0;\n        }\n        else if (bitfield == PTR_DAT_080071a8) {\n          i = 1;\n        }\n        else if (bitfield == PTR_DAT_080071ac) {\n          i = 2;\n        }\n        else if (bitfield == PTR_DAT_080071b0) {\n          i = 3;\n        }\n        else if (bitfield == PTR_DAT_080071b4) {\n          i = 4;\n        }\n        else if (bitfield == PTR_DAT_080071b8) {\n          i = 5;\n        }\n        else if (bitfield == PTR_DAT_080071bc) {\n          i = 6;\n        }\n        else if (bitfield == PTR_DAT_080071c0) {\n          i = 7;\n        }\n        else if (bitfield == PTR_DAT_080071c4) {\n          i = 8;\n        }\n        else {\n          i = 10;\n        }\n        *(uint *)(PTR_DAT_080071a0 + ((i >> 2) + 2) * 4) = i << ((i & 3) << 2) | *(uint *)(PTR_DAT_080071a0 + ((i >> 2) + 2) * 4);\n        *PTR_DAT_080071cc &= ~flag;\n        PTR_DAT_080071cc[1] &= ~flag;\n        if ((flags[1] & 0x10000) != 0) {\n          *PTR_DAT_080071cc |= flag;\n        }\n        if ((flags[1] & 0x20000) != 0) {\n          PTR_DAT_080071cc[1] |= flag;\n        }\n        PTR_DAT_080071cc[2] &= ~flag;\n        PTR_DAT_080071cc[3] &= ~flag;\n        if ((flags[1] & 0x100000) != 0) {\n          PTR_DAT_080071cc[2] |= flag;\n        }\n        if ((flags[1] & 0x200000) != 0) {\n          PTR_DAT_080071cc[3] |= flag;\n        }\n      }\n    }\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e88",
            "calling": [
                "FUN_0800640c",
                "FUN_0800778c"
            ],
            "imported": false,
            "current_name": "set_bits_08006e88"
        },
        "FUN_080001e0": {
            "renaming": {
                "FUN_080001e0": "do_nothing_080001e0"
            },
            "code": "\nvoid do_nothing_080001e0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001e0",
            "calling": [
                "FUN_08000220"
            ],
            "imported": false,
            "current_name": "do_nothing_080001e0"
        },
        "FUN_080036f0": {
            "renaming": {
                "FUN_080036f0": "print_binary_representation_080036f0",
                "param_1": "number",
                "param_2": "num_bits",
                "local_10": "i",
                "local_c": "mask",
                "uVar1": "character"
            },
            "code": "void print_binary_representation_080036f0(uint number, int num_bits) {\n    uint mask = 1 << (num_bits - 1);\n    for (int i = 0; i < num_bits; i++) {\n        if ((number & mask) == 0) {\n            print_character('0');\n        }\n        else {\n            print_character('1');\n        }\n        mask = mask >> 1;\n    }\n}",
            "called": [
                "FUN_08008250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036f0",
            "calling": [
                "FUN_0800375c",
                "FUN_08003740"
            ],
            "imported": false,
            "current_name": "print_binary_representation_080036f0"
        },
        "FUN_08002edc": {
            "renaming": {
                "FUN_08002edc": "process_input_and_calculate_hashes_08002edc",
                "process_input_and_set_flag_08002a94": "process_input",
                "parse_float_inputs_08002ba8": "parse_float_inputs",
                "calculate_and_shift_hashes_08002e08": "calculate_and_shift_hashes"
            },
            "code": "void process_input_and_calculate_hashes_08002edc(void)\n{\n  process_input();\n  parse_float_inputs();\n  calculate_and_shift_hashes();\n  return;\n}",
            "called": [
                "FUN_08002e08",
                "FUN_08002ba8",
                "FUN_08002a94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002edc",
            "calling": [
                "FUN_08003004",
                "FUN_08003618"
            ],
            "imported": false,
            "current_name": "process_input_and_calculate_hashes_08002edc"
        },
        "FUN_0800375c": {
            "renaming": {
                "FUN_0800375c": "print_binary_representation_0800375c",
                "param_1": "number",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void print_binary_representation_0800375c(unsigned short number, int num_bits){\n    print_binary_representation_0800375c_080036f0(number, num_bits);\n    return;\n}",
            "called": [
                "FUN_080036f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800375c",
            "calling": [
                "FUN_08004250"
            ],
            "imported": false,
            "current_name": "print_binary_representation_0800375c"
        },
        "FUN_08009990": {
            "renaming": {
                "FUN_08009990": "calculate_result_08009990",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "difference",
                "uVar2": "high_bits",
                "uVar3": "result",
                "uVar4": "sign_bits",
                "uVar5": "concat_result"
            },
            "code": "uint calculate_result_08009990(uint input1, uint input2, uint input3, uint input4) {\n  int difference;\n  undefined4 high_bits;\n  uint result;\n  uint sign_bits;\n  undefined8 concat_result;\n  concat_result = CONCAT44(DAT_08009b04, DAT_08009b00);\n  input4 = input4 & 0x7fffffff;\n  if ((DAT_08009b18 < (input4 | (-input3 | input3) >> 0x1f)) || (sign_bits = input2 & 0x7fffffff, DAT_08009b18 < (sign_bits | (-input1 | input1) >> 0x1f))) {\n    result = FUNC_080082d4(input3, input4, input1, input2);\n  }\n  else {\n    if ((input4 + 0xc0100000 | input3) == 0) {\n      result = FUNC_0800af78();\n      return result;\n    }\n    high_bits = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n    if ((sign_bits | input1) == 0) {\n      result = DAT_08009af0;\n      if ((high_bits != 2) && (result = input1, high_bits == 3)) {\n        result = DAT_08009af8;\n      }\n    }\n    else {\n      if ((input4 | input3) != 0) {\n        if (input4 == DAT_08009b18) {\n          high_bits = high_bits - 1;\n          if (sign_bits == input4) {\n            if (2 < high_bits) {\n              return DAT_08009b10;\n            }\n            return *(uint *)(PTR_DAT_08009b20 + high_bits * 8);\n          }\n          if (high_bits < 3) {\n            return *(uint *)(PTR_DAT_08009b1c + high_bits * 8);\n          }\n          return 0;\n        }\n        if (sign_bits != DAT_08009b18) {\n          difference = (int)(sign_bits - input4) >> 0x14;\n          if ((int)(sign_bits - input4) < 0x3d00000) {\n            if (((int)input4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference, 0x3c))) {\n              concat_result = 0;\n            }\n            else {\n              FUNC_08008894(input1, input2, input3, input4, input4);\n              do_nothing_0800b2cc();\n              concat_result = FUNC_0800af78();\n            }\n          }\n          high_bits = (undefined4)((ulonglong)concat_result >> 0x20);\n          result = (uint)concat_result;\n          if (high_bits == 1) {\n            return result;\n          }\n          if (high_bits == 2) {\n            concat_result = FUNC_080082d0(result, high_bits, DAT_08009ae8, DAT_08009aec);\n            result = FUNC_080082d0(DAT_08009af0, DAT_08009af4, (int)concat_result, (int)((ulonglong)concat_result >> 0x20));\n            return result;\n          }\n          if (high_bits == 0) {\n            return result;\n          }\n          concat_result = FUNC_080082d0(result, high_bits, DAT_08009ae8, DAT_08009aec);\n          result = FUNC_080082d0((int)concat_result, (int)((ulonglong)concat_result >> 0x20), DAT_08009af0, DAT_08009af4);\n          return result;\n        }\n      }\n      result = DAT_08009b08;\n      if (-1 < (int)input2) {\n        result = DAT_08009b00;\n      }\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_0800af78",
                "FUN_0800b2cc",
                "FUN_08008894"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009990",
            "calling": [
                "thunk_FUN_08009990"
            ],
            "imported": false,
            "current_name": "calculate_result_08009990"
        },
        "FUN_08007e58": {
            "renaming": {
                "FUN_08007e58": "is_bit_set_08007e58",
                "*DAT_08007e80": "data_pointer",
                "masked_value": "masked_value"
            },
            "code": "bool is_bit_set_08007e58(void)\n{\n    const uint8_t* *DAT_08007e80 = DAT_08007e80;\n    uint8_t masked_value = **DAT_08007e80 & 0x20;\n    return masked_value != 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e58",
            "calling": [
                "FUN_08008286"
            ],
            "imported": false,
            "current_name": "is_bit_set_08007e58"
        },
        "FUN_080059f8": {
            "renaming": {
                "FUN_080059f8": "initialize_data_080059f8",
                "DAT_08005a4c": "data",
                "PTR_08005a50": "ptr_data"
            },
            "code": "\nvoid initialize_data_080059f8()\n{\n    int* PTR_08005a50 = (int*)(DAT_08005a4c);\n    *(PTR_08005a50 + 0x20) = 0;\n    *(PTR_08005a50 + 0x24) = 0;\n    *(PTR_08005a50 + 0x10) = 0;\n    *(PTR_08005a50 + 0x14) = 0;\n    *(PTR_08005a50 + 0x18) = 0;\n    do_nothing_08005a5c();\n}\n",
            "called": [
                "FUN_08005a5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059f8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_080059f8"
        },
        "FUN_08003f34": {
            "renaming": {
                "FUN_08003f34": "process_input_string_08003f34",
                "bVar1": "index",
                "bVar2": "special_character",
                "uVar3": "command_result",
                "PTR_DAT_08004028": "IN_PARENTHESIS",
                "PTR_DAT_08004020": "CURRENT_INDEX",
                "PTR_DAT_08004024": "INPUT_DATA",
                "PTR_DAT_0800401c": "CURRENT_ERROR_CODE",
                "check_for_special_character_08008286": "check_for_special_character",
                "print_error_message_08004030": "print_error_message",
                "clear_data_08003980": "clear_input_data",
                "process_data_and_update_status_flags_08003a74": "process_input_data_and_update_status_flags",
                "process_command_08003b98": "process_command"
            },
            "code": "void process_input_string_08003f34(void)\\n{\\n  char current_character;\\n  char special_character;\\n  int error_code;\\n  int index;\\n  int command_result;\\n  while( true ) {\\n    while( true ) {\\n      special_character = check_for_special_character_08008286();\\n      if (special_character == 0xff) {\\n        return;\\n      }\\n      if ((special_character == 10) || (special_character == 0xd)) break;\\n      if (*INPUT_STRING_START == \"\\0\") {\\n        if ((0x20 < special_character) && (special_character != 0x2f)) {\\n          if (special_character == 0x28) {\\n            *PTR_DAT_08004028 = 1;\\n          }\\n          else if (*PTR_DAT_0800401c == -1) {\\n            print_error_message_08004030(0xd);\\n            clear_data_08003980();\\n          }\\n          else if ((special_character < 0x61) || (0x7a < special_character)) {\\n            index = *PTR_DAT_08004020;\\n            *PTR_DAT_08004020 = index + 1;\\n            PTR_DAT_08004024[index] = special_character;\\n          }\\n          else {\\n            index = *PTR_DAT_08004020;\\n            *PTR_DAT_08004020 = index + 1;\\n            PTR_DAT_08004024[index] = special_character - 0x20;\\n          }\\n        }\\n      }\\n      else if (special_character == 0x29) {\\n        *PTR_DAT_08004028 = 0;\\n      }\\n    }\\n    process_input_data_and_update_status_flags();\\n    if (*PTR_DAT_0800401c != \"\\0\") break;\\n    if (*PTR_DAT_08004020 == \"\\0\") {\\n      print_error_message_08004030(0);\\n    }\\n    else {\\n      PTR_DAT_08004024[(byte)*PTR_DAT_08004020] = 0;\\n      command_result = process_command(PTR_DAT_08004024);\\n      print_error_message_08004030(command_result);\\n    }\\n    clear_data_08003980();\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08008286",
                "FUN_08003980",
                "FUN_08004030",
                "FUN_08003b98",
                "FUN_08003a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f34",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "process_input_string_08003f34"
        },
        "FUN_080095b8": {
            "renaming": {
                "FUN_080095b8": "convert_to_signed_fixed_point_080095b8",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "carry",
                "uVar2": "shift_amount",
                "uVar3": "normalized_input_2",
                "iVar4": "sign",
                "uVar5": "temp"
            },
            "code": "int convert_to_signed_fixed_point_080095b8(uint input_1, uint input_2)\n{\n  uint shift_amount;\n  uint normalized_input_2;\n  int sign;\n  uint result;\n  \n  shift_amount = (input_2 << 1) >> 0x15;\n  normalized_input_2 = (input_2 & 0xfffff) | 0x100000;\n  sign = (int)input_2 < 0 ? -1 : 1;\n  \n  if ((int)(shift_amount - 0x3ff) < 0x14)\n  {\n    if ((int)(shift_amount - 0x3ff) < 0)\n    {\n      if (shift_amount != 0xffffffff)\n      {\n        sign = 0;\n      }\n      return sign;\n    }\n    normalized_input_2 = normalized_input_2 + (0x80000 >> (shift_amount & 0xff)) >> (0x14 - shift_amount & 0xff);\n  }\n  else\n  {\n    if (shift_amount > 0x1e)\n    {\n      return convert_to_signed_fixed_point_080095b8_08008ba0();\n    }\n    if ((int)shift_amount < 0x34)\n    {\n      uint carry = (0x80000000 >> (shift_amount - 0x413 & 0xff));\n      if (CARRY4(carry, input_1))\n      {\n        normalized_input_2 = normalized_input_2 + 1;\n      }\n      normalized_input_2 = (normalized_input_2 << (shift_amount - 0x413 & 0xff)) | (carry + input_1 >> (0x34 - shift_amount & 0xff));\n    }\n    else\n    {\n      normalized_input_2 = (normalized_input_2 << (shift_amount - 0x413 & 0xff)) | (input_1 << (shift_amount - 0x433 & 0xff));\n    }\n  }\n  return normalized_input_2 * sign;\n}",
            "called": [
                "FUN_08008ba0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080095b8",
            "calling": [
                "FUN_08001994",
                "FUN_08003004"
            ],
            "imported": false,
            "current_name": "convert_to_signed_fixed_point_080095b8"
        },
        "FUN_08006cf6": {
            "renaming": {
                "FUN_08006cf6": "set_value_08006cf6",
                "param_1": "value",
                "param_2": "bitmask",
                "param_3": "bits",
                "uVar1": "bits_from_uint",
                "get_bits_from_uint_08006998": "get_bits_from_uint",
                "apply_bitmask_08006ba0": "apply_bitmask",
                "set_value_08006b00": "set_value_to_address"
            },
            "code": "void set_value_08006cf6(char value, uint32_t bitmask, uint32_t bits)\n{\n  uint32_t bits_from_uint = get_bits_from_uint();\n  uint32_t masked_bits = apply_bitmask(bits_from_uint, bitmask, bits);\n  set_value_08006cf6_to_address((int)value, masked_bits);\n  return;\n}",
            "called": [
                "FUN_08006998",
                "FUN_08006ba0",
                "FUN_08006b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006cf6",
            "calling": [
                "FUN_08007a70"
            ],
            "imported": false,
            "current_name": "set_value_08006cf6"
        },
        "FUN_08002ef0": {
            "renaming": {
                "FUN_08002ef0": "copy_and_wrap_around_08002ef0",
                "uVar1": "wrapped_value",
                "*PTR_DAT_08002f1c": "*previous_ptr",
                "*PTR_DAT_08002f18": "*current_ptr",
                "*PTR_DAT_08002f20": "N/A",
                "increment_and_wrap_around_08002870": "increment_and_wrap_around"
            },
            "code": "void copy_and_wrap_around_08002ef0(void)\n{\n  int current_value = *PTR_DAT_08002f18;\n  *PTR_DAT_08002f1c = current_value;\n  int wrapped_value = increment_and_wrap_around(current_value);\n  *PTR_DAT_08002f18 = wrapped_value;\n  return;\n}",
            "called": [
                "FUN_08002870"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ef0",
            "calling": [
                "FUN_08002f24"
            ],
            "imported": false,
            "current_name": "copy_and_wrap_around_08002ef0"
        },
        "FUN_08001d4c": {
            "renaming": {
                "FUN_08001d4c": "process_and_clear_data_08001d4c",
                "local_9": "flag",
                "cVar1": "current_char",
                "process_data_08005790": "process_data",
                "FUNC_08001994": "send_command",
                "PTR_DAT_08001dd8": "PTR_DAT",
                "do_nothing_08002814": "do_nothing",
                "clear_bits_and_check_flag_080057e4": "clear_bits_and_check_flag"
            },
            "code": "void process_and_clear_data_08001d4c(void)\\n{\\n  char current_char;\\n  char flag = \"\\x02\";\\n  process_data();\\n  send_command(4, 1, 0, *(undefined4 *)(PTR_DAT_08001dd8_08001dd8 + 0x30));\\n  send_command(3, 1, 0, *(undefined4 *)(PTR_DAT_08001dd8_08001dd8 + 0x30));\\n  do_nothing(*(undefined2 *)(PTR_DAT_08001dd8_08001dd8 + 0x34));\\n  while( flag != \"\\0\" ) {\\n    current_char = flag - 1;\\n    send_command(7, 0, 1, *(undefined4 *)(PTR_DAT_08001dd8_08001dd8 + 0x2c));\\n    do_nothing(*(undefined2 *)(PTR_DAT_08001dd8_08001dd8 + 0x34));\\n    flag = current_char;\\n    if (current_char > \"\\0\") {\\n      send_command(7, 1, 0, *(undefined4 *)(PTR_DAT_08001dd8_08001dd8 + 0x2c));\\n      do_nothing(*(undefined2 *)(PTR_DAT_08001dd8_08001dd8 + 0x34));\\n    }\\n  }\\n  clear_bits_and_check_flag();\\n  return;\\n}",
            "called": [
                "FUN_08001994",
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_08002814"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001d4c",
            "calling": [
                "FUN_080024c4"
            ],
            "imported": false,
            "current_name": "process_and_clear_data_08001d4c"
        },
        "FUN_08000268": {
            "renaming": {
                "FUN_08000268": "calculate_value_from_pointer_08000268",
                "iVar1": "data",
                "DAT_0800029c": "global_data",
                "*(uint *)(DAT_08000298 + 8) >> 3": "temp",
                "PTR_08005a84": "pointer_data"
            },
            "code": "int calculate_value_from_pointer_08000268(void)\n{\n  int data = get_data_from_pointer();\n  int result = (data + 1) * 1000;\n  int *(uint *)(DAT_08000298 + 8) >> 3 = *(uint *)(PTR_08005a84 + 8) >> 3;\n  uint64_t multiplication_result = (uint64_t)DAT_0800029c * (uint64_t)*(uint *)(DAT_08000298 + 8) >> 3;\n  result -= (uint)(multiplication_result >> 0x21);\n  return result;\n}",
            "called": [
                "FUN_08005a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000268",
            "calling": [
                "FUN_080002b6"
            ],
            "imported": false,
            "current_name": "calculate_value_from_pointer_08000268"
        },
        "FUN_08003778": {
            "renaming": {
                "FUN_08003778": "calculate_and_wait_for_digits_08003778",
                "param_1": "input_number",
                "local_1c": "remainder",
                "acStack_15": "digit_stack",
                "local_9": "stack_pointer"
            },
            "code": "void calculate_and_wait_for_digits_08003778(uint input_number)\n{\n  uint multiplier = DAT_080037f8;\n  uint remainder;\n  char digit_stack[12];\n  byte stack_pointer = 0;\n  if (input_number == 0) {\n    wait_for_flag_to_set_08008250(0x30);\n  }\n  else {\n    remainder = input_number;\n    while (remainder != 0) {\n      uint quotient = (multiplier * remainder) >> 0x23;\n      remainder = quotient;\n      digit_stack[stack_pointer + 1] = (char)(remainder + (quotient * -10)) + '0';\n      stack_pointer++;\n    }\n    while (stack_pointer != 0) {\n      wait_for_flag_to_set_08008250(digit_stack[stack_pointer]);\n      stack_pointer--;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08008250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003778",
            "calling": [
                "FUN_080037fc"
            ],
            "imported": false,
            "current_name": "calculate_and_wait_for_digits_08003778"
        },
        "FUN_0800b3dc": {
            "renaming": {
                "FUN_0800b3dc": "get_value_from_pointer_to_pointer_0800b3dc",
                "PTR_PTR_DAT_0800b3e4": "ptr_ptr_data"
            },
            "code": "int get_value_from_pointer_to_pointer_0800b3dc() {\n  int* pointer_to_value = *(int**)PTR_PTR_DAT_0800b3e4;\n  int value = *pointer_to_value;\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b3dc",
            "calling": [
                "FUN_080098d0",
                "FUN_0800981c"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_to_pointer_0800b3dc"
        },
        "FUN_080046d0": {
            "renaming": {
                "FUN_080046d0": "process_data_080046d0",
                "bVar1": "byte_variable_1",
                "cVar2": "char_variable",
                "uVar3": "undefined_4_variable",
                "uVar4": "undefined_8_variable",
                "index": "byte_index",
                "wait_time": "byte_wait_time",
                "float_bits": "float_bits_variable",
                "hash": "hash_variable",
                "PTR_DAT_08004890": "PTR_DAT_08004890",
                "PTR_DAT_080048a8": "PTR_DAT_080048a8",
                "PTR_DAT_080048ac": "PTR_DAT_080048ac",
                "PTR_DAT_080048b0": "PTR_DAT_080048b0",
                "PTR_DAT_080048b4": "PTR_DAT_080048b4",
                "PTR_DAT_080048b8": "PTR_DAT_080048b8",
                "PTR_DAT_080048bc": "PTR_DAT_080048bc",
                "PTR_DAT_080048c0": "PTR_DAT_080048c0",
                "PTR_DAT_080048c4": "PTR_DAT_080048c4",
                "PTR_DAT_080048c8": "PTR_DAT_080048c8",
                "PTR_DAT_080048cc": "PTR_DAT_080048cc",
                "PTR_DAT_080048d0": "PTR_DAT_080048d0",
                "PTR_DAT_080048d4": "PTR_DAT_080048d4",
                "PTR_DAT_080048d8": "PTR_DAT_080048d8",
                "PTR_DAT_080048dc": "PTR_DAT_080048dc",
                "PTR_DAT_080048e0": "PTR_DAT_080048e0",
                "PTR_DAT_080048e4": "PTR_DAT_080048e4",
                "PTR_DAT_080048e8": "PTR_DAT_080048e8",
                "PTR_DAT_080048ec": "PTR_DAT_080048ec",
                "PTR_DAT_080048f0": "PTR_DAT_080048f0",
                "PTR_DAT_080048f4": "PTR_DAT_080048f4",
                "PTR_DAT_080048f8": "PTR_DAT_080048f8",
                "PTR_DAT_080048fc": "PTR_DAT_080048fc",
                "calculate_and_wait_for_absolute_value_080037fc": "calculate_and_wait_for_absolute_value",
                "process_string_080036c6": "process_string",
                "print_float_08003826": "print_float",
                "calculate_hash_08008590": "calculate_hash",
                "FUNC_08008640": "FUNC_08008640",
                "calculate_float_bits_08008c30": "calculate_float_bits",
                "DAT_08004888": "DAT_08004888",
                "DAT_0800488c": "DAT_0800488c",
                "byte bVar1": "byte_variable_1",
                "char cVar2": "char_variable",
                "undefined4 uVar3": "undefined_4_variable",
                "undefined8 uVar4": "undefined_8_variable",
                "byte index": "byte_index",
                "byte wait_time": "byte_wait_time",
                "undefined4 float_bits": "float_bits_variable",
                "undefined8 hash": "hash_variable"
            },
            "code": "void process_data_080046d0() {\n  byte index = PTR_DAT_08004890[1];\n  if (index > 4) {\n    process_string_080036c6(PTR_DAT_080048a8);\n    calculate_and_wait_for_absolute_value_080037fc(PTR_DAT_08004890[0x1c] + 0x36);\n    if (PTR_DAT_08004890[0x19] == '\\0') {\n      if (PTR_DAT_08004890[0x1a] == 1) {\n        process_string_080036c6(PTR_DAT_080048ac);\n      }\n      else {\n        process_string_080036c6(PTR_DAT_080048b0);\n      }\n    }\n    else {\n      process_string_080036c6(PTR_DAT_080048b4);\n    }\n    if (PTR_DAT_08004890[3] == '\\0') {\n      process_string_080036c6(PTR_DAT_080048bc);\n    }\n    else {\n      process_string_080036c6(PTR_DAT_080048b8);\n    }\n    if (PTR_DAT_08004890[4] == '\\0') {\n      process_string_080036c6(PTR_DAT_080048c4);\n    }\n    else {\n      process_string_080036c6(PTR_DAT_080048c0);\n    }\n    if (PTR_DAT_08004890[2] == '\\0') {\n      process_string_080036c6(PTR_DAT_080048cc);\n    }\n    else {\n      process_string_080036c6(PTR_DAT_080048c8);\n    }\n    byte bVar1 = PTR_DAT_08004890[5];\n    if (bVar1 == 2) {\n      process_string_080036c6(PTR_DAT_080048d8);\n    }\n    else if (bVar1 < 3) {\n      if (bVar1 == 0) {\n        process_string_080036c6(PTR_DAT_080048d0);\n      }\n      else if (bVar1 == 1) {\n        process_string_080036c6(PTR_DAT_080048d4);\n      }\n    }\n    char cVar2 = PTR_DAT_08004890[6];\n    if (cVar2 == 1) {\n      process_string_080036c6(PTR_DAT_080048dc);\n    }\n    else if (cVar2 < 2) {\n      if (cVar2 == -1) {\n        process_string_080036c6(PTR_DAT_080048e0);\n      }\n      else if (cVar2 == '\\0') {\n        process_string_080036c6(PTR_DAT_080048e4);\n      }\n    }\n    byte bVar2 = PTR_DAT_08004890[7];\n    if (bVar2 == 2) {\n      process_string_080036c6(PTR_DAT_080048f0);\n    }\n    else if (bVar2 < 3) {\n      if (bVar2 == 0) {\n        process_string_080036c6(PTR_DAT_080048e8);\n      }\n      else if (bVar2 == 1) {\n        process_string_080036c6(PTR_DAT_080048ec);\n      }\n    }\n    process_string_080036c6(PTR_DAT_080048f4);\n    byte wait_time = PTR_DAT_08004890[0x18];\n    calculate_and_wait_for_absolute_value_080037fc(wait_time);\n    process_string_080036c6(PTR_DAT_080048f8);\n    if (PTR_DAT_08004890[3] == '\\0') {\n      print_float_08003826(*(undefined4 *)(PTR_DAT_08004890 + 8));\n    }\n    else {\n      undefined8 hash = calculate_hash_08008590(*(undefined4 *)(PTR_DAT_08004890 + 8));\n      hash = FUNC_08008640((int)hash,(int)((ulonglong)hash >> 0x20),DAT_08004888,DAT_0800488c);\n      undefined4 float_bits = calculate_float_bits_08008c30((int)hash,(int)((ulonglong)hash >> 0x20));\n      print_float_08003826(float_bits);\n    }\n    process_string_080036c6(PTR_DAT_080048fc);\n    return;\n  }\n  else {\n    (*(code *)(&switchD_080046de::switchdataD_080046e4)[index])();\n    return;\n  }\n}",
            "called": [
                "FUN_08008590",
                "FUN_08008c30",
                "FUN_080037fc",
                "FUN_08003826",
                "FUN_08008640",
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046d0",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "process_data_080046d0"
        },
        "FUN_08006d72": {
            "renaming": {
                "FUN_08006d72": "is_input_valid_08006d72",
                "param_1": "input_str",
                "uVar1": "is_valid"
            },
            "code": "bool is_input_valid_08006d72(const char* input_str) {\n  bool is_valid = is_valid_input_08006c9c(input_str);\n  return is_valid;\n}",
            "called": [
                "FUN_08006c9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d72",
            "calling": [
                "FUN_080059b4"
            ],
            "imported": false,
            "current_name": "is_input_valid_08006d72"
        },
        "FUN_0800756c": {
            "renaming": {
                "FUN_0800756c": "set_bit_and_clear_other_bits_0800756c",
                "DAT_080075bc": "data_ptr",
                "DAT_080075c0": "data_c0",
                "DAT_080075c4": "data_c4_ptr"
            },
            "code": "void set_bit_and_clear_other_bits_0800756c(void)\n{\n  unsigned int *DAT_080075bc = DAT_080075bc;\n  *DAT_080075bc |= 1;\n  DAT_080075bc[2] = 0;\n  *DAT_080075bc &= 0xfef6ffff;\n  DAT_080075bc[1] = DAT_080075c0;\n  *DAT_080075bc &= 0xfffbffff;\n  DAT_080075bc[3] = 0;\n  unsigned int *DAT_080075c4 = (unsigned int *)(DAT_080075c4 + 8);\n  *DAT_080075c4 = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800756c",
            "calling": [
                "FUN_080092c4"
            ],
            "imported": false,
            "current_name": "set_bit_and_clear_other_bits_0800756c"
        },
        "FUN_080001f8": {
            "renaming": {
                "FUN_080001f8": "reset_pointer_080001f8",
                "PTR_DAT_0800020c": "pointer_to_reset",
                "do_nothing_twice_08000210": "do_nothing_twice"
            },
            "code": "void reset_pointer_080001f8(void)\n{\n  *PTR_DAT_0800020c = 0;\n  do_nothing_twice();\n  return;\n}",
            "called": [
                "FUN_08000210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001f8",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "reset_pointer_080001f8"
        },
        "FUN_08002f74": {
            "renaming": {
                "FUN_08002f74": "get_data_pointer_08002f74",
                "puVar1": "data_pointer",
                "*PTR_DAT_08002fa0": "data_start",
                "*PTR_DAT_08002fa4": "data_end",
                "PTR_DAT_08002fa8": "data_table"
            },
            "code": "undefined* get_data_pointer_08002f74(void)\n{\n    undefined* data_pointer;\n\n    if (**PTR_DAT_08002fa0 == **PTR_DAT_08002fa4)\n    {\n        data_pointer = (undefined*)0x0;\n    }\n    else\n    {\n        data_pointer = PTR_DAT_08002fa8 + (uint)(byte)**PTR_DAT_08002fa4 * 0x40;\n    }\n\n    return data_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f74",
            "calling": [
                "FUN_080053a0",
                "FUN_08002fd4"
            ],
            "imported": false,
            "current_name": "get_data_pointer_08002f74"
        },
        "FUN_0800b3e8": {
            "renaming": {
                "FUN_0800b3e8": "execute_functions_0800b3e8",
                "iVar1": "i",
                "ppcVar2": "function_pointer",
                "iVar3": "num_functions",
                "do_nothing_0800b5b0": "do_nothing",
                "PTR_DAT_0800b420": "PTR_FUNCTIONS_END",
                "PTR_DAT_0800b424": "PTR_FUNCTIONS_START",
                "PTR_DAT_0800b428": "PTR_OTHER_FUNCTIONS_END",
                "PTR_DAT_0800b42c": "PTR_OTHER_FUNCTIONS_START"
            },
            "code": "void execute_functions_0800b3e8(void)\n{\n  int num_functions = (int)PTR_DAT_0800b420 - (int)PTR_DAT_0800b424 >> 2;\n  if (num_functions != 0) {\n    int i = 0;\n    code **function_pointer = (code **)PTR_DAT_0800b424;\n    do {\n      i++;\n      (**function_pointer)();\n      function_pointer++;\n    } while (num_functions != i);\n  }\n  function_pointer = (code **)PTR_DAT_0800b42c;\n  int num_other_functions = (int)PTR_DAT_0800b428 - (int)PTR_DAT_0800b42c;\n  do_nothing();\n  num_other_functions = num_other_functions >> 2;\n  if (num_other_functions != 0) {\n    int i = 0;\n    do {\n      i++;\n      (**function_pointer)();\n      function_pointer++;\n    } while (num_other_functions != i);\n  }\n  return;\n}",
            "called": [
                "FUN_080001ac",
                "FUN_0800b5b0",
                "FUN_0800b4d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b3e8",
            "calling": [
                "FUN_080092c4"
            ],
            "imported": false,
            "current_name": "execute_functions_0800b3e8"
        },
        "FUN_080096e8": {
            "renaming": {
                "FUN_080096e8": "calculateResult_080096e8",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "uVar2",
                "local_28": "localVariable1",
                "uStack_24": "localVariable2",
                "local_20": "localVariable3",
                "uStack_1c": "localVariable4"
            },
            "code": "uint32_t calculateResult_080096e8(uint32_t input1, uint32_t input2)\n{\n  uint32_t result;\n  uint32_t input2_unsigned = input2 & 0x7fffffff;\n  if (DAT_08009790 < input2_unsigned) {\n    if (DAT_08009794 < input2_unsigned) {\n      result = FUNC_080082d0(input1, input2, input1, input2);\n    }\n    else {\n      uint32_t uVar2 = FUNC_08009d78(input1, input2, &local_28);\n      uVar2 = uVar2 & 3;\n      if (uVar2 == 1) {\n        result = FUNC_0800a348(local_28, uStack_24, local_20, uStack_1c);\n      }\n      else if (uVar2 == 2 || uVar2 == 0) {\n        result = calculateResult_080096e8FromInputs_0800adf0(local_28, uStack_24, local_20, uStack_1c, 1);\n      }\n      else {\n        result = FUNC_0800a348(local_28, uStack_24, local_20, uStack_1c);\n      }\n    }\n    return result;\n  }\n  result = calculateResult_080096e8FromInputs_0800adf0(input1, input2, 0, 0, 0);\n  return result;\n}\n",
            "called": [
                "FUN_080082d0",
                "FUN_0800a348",
                "FUN_08009d78",
                "FUN_0800adf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080096e8",
            "calling": [
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "calculateResult_080096e8"
        },
        "FUN_08006a18": {
            "renaming": {
                "FUN_08006a18": "check_bit_08006a18",
                "param_1": "input_byte",
                "DAT_08006a54": "data_start"
            },
            "code": "bool check_bit_08006a18(byte input_byte) {\n    uint* data_ptr = (uint*)(DAT_08006a54 + (((uint)(int)(char)input_byte >> 5) + 0x40) * 4);\n    uint bit_mask = 1 << (input_byte & 0x1f);\n    return ((*data_ptr) & bit_mask) != 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006a18",
            "calling": [
                "FUN_08006de0"
            ],
            "imported": false,
            "current_name": "check_bit_08006a18"
        },
        "FUN_08002c18": {
            "renaming": {
                "FUN_08002c18": "calculate_hash_and_shift_08002c18",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "hash1",
                "iVar2": "shifted_value",
                "uVar3": "hash2",
                "uVar4": "result1",
                "uVar5": "result2",
                "uVar6": "fixed_point3",
                "uVar7": "temp_result",
                "local_20": "fixed_point2",
                "local_1c": "fixed_point1"
            },
            "code": "void calculate_hash_and_shift_08002c18(int input, int* output1, int* output2) {\n    int hash1 = calculate_hash(input + 0x3c);\n    int hash2 = calculate_hash(input + 0x3c);\n    int shift_amount1 = calculate_shift_amount(calculate_result(calculate_hash(hash1), param2), param3);\n    int shift_amount2 = calculate_shift_amount(calculate_result(calculate_hash(hash2), param3), param2);\n    int shifted_value = calculate_shifted_value(*(int *)(input + 0x30) * 0x32);\n    int fixed_point_value = convert_to_fixed_point(shifted_value);\n    int result1 = calculate_result(calculate_hash(*(int *)(input + 0x28)), calculate_hash(input + 0x3c), calculate_hash(fixed_point_value));\n    int result2 = calculate_result(calculate_hash(input + 0x3c), calculate_hash(*(int *)(input + 0x2c)), calculate_hash(-fixed_point_value));\n    int fixed_point1 = convert_to_fixed_point(calculate_longlong(calculate_hash(result1)));\n    int fixed_point2 = convert_to_fixed_point(*(int *)(input + 0x10) - fixed_point1 - convert_to_fixed_point(calculate_longlong(calculate_hash(result2))));\n    if (fixed_point2 < 0) {\n        int result3 = calculate_result(calculate_hash(*(int *)(input + 0x28)), calculate_hash(*(int *)(input + 0x2c)), calculate_hash(fixed_point_value), calculate_hash(*(int *)(input + 0x10)));\n        int fixed_point3 = convert_to_fixed_point(calculate_result(calculate_hash(result3)));\n        *output1 = fixed_point3 & ~((int)fixed_point3 >> 0x1f);\n        *output2 = *(int *)(input + 0x10);\n    } else {\n        *output1 = *(int *)(input + 0x10);\n        *output2 = fixed_point2 + *(int *)(input + 0x10);\n    }\n}",
            "called": [
                "FUN_08009318",
                "FUN_080094c0",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008ba0",
                "FUN_0800856c",
                "FUN_08002908",
                "FUN_080028bc",
                "FUN_08008640",
                "FUN_08008bf0",
                "FUN_08008e3c",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c18",
            "calling": [
                "FUN_08002e08"
            ],
            "imported": false,
            "current_name": "calculate_hash_and_shift_08002c18"
        },
        "FUN_08006ac0": {
            "renaming": {
                "FUN_08006ac0": "isBitSet_08006ac0",
                "param_1": "bitIndex",
                "uint": "uint32_t",
                "DAT_08006afc": "dataStart"
            },
            "code": "bool isBitSet_08006ac0(uint8_t bitIndex){\n\n    uint32_t* data = (uint32_t*)(DAT_08006afc + (((uint32_t)bitIndex >> 5) + 0x80) * 4);\n    uint32_t mask = 1 << (bitIndex & 0x1f);\n    return ((*data & mask) != 0);\n    \n    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ac0",
            "calling": [
                "FUN_08006e1a"
            ],
            "imported": false,
            "current_name": "isBitSet_08006ac0"
        },
        "FUN_080001ec": {
            "renaming": {
                "FUN_080001ec": "do_nothing_080001ec"
            },
            "code": "\nvoid do_nothing_080001ec(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ec",
            "calling": [
                "FUN_08000210"
            ],
            "imported": false,
            "current_name": "do_nothing_080001ec"
        },
        "FUN_08005a50": {
            "renaming": {
                "FUN_08005a50": "do_nothing_08005a50"
            },
            "code": "\nvoid do_nothing_08005a50(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a50",
            "calling": [
                "FUN_080059b4"
            ],
            "imported": false,
            "current_name": "do_nothing_08005a50"
        },
        "FUN_08002ba8": {
            "renaming": {
                "FUN_08002ba8": "parse_float_inputs_08002ba8",
                "*PTR_DAT_08002c0c": "input_index_start",
                "*PTR_DAT_08002c14": "input_index_end",
                "PTR_DAT_08002c10": "input_data_start",
                "local_14": "start_input",
                "local_10": "last_input",
                "puVar3": "previous_input",
                "puVar2": "previous_input",
                "puVar1": "current_input",
                "local_9": "current_index"
            },
            "code": "void parse_float_inputs_08002ba8()\n{\n    float *current_input;\n    float *previous_input;\n    float *start_input;\n    float *last_input;\n    byte current_index;\n    \n    current_index = **PTR_DAT_08002c0c;\n    last_input = (float *)0x0;\n    start_input = (float *)0x0;\n    previous_input = (float *)0x0;\n    while (previous_input != *PTR_DAT_08002c14) {\n        start_input = last_input;\n        current_input = PTR_DAT_08002c10 + (uint)current_index * 0x40;\n        validate_and_set_float_input(current_input, start_input, current_input);\n        current_index = increment_and_wrap_around(current_index);\n        previous_input = start_input;\n        last_input = current_input;\n    }\n    validate_and_set_float_input(start_input, last_input, (float *)0x0, start_input, previous_input);\n    return;\n}",
            "called": [
                "FUN_08002afc",
                "FUN_08002870"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ba8",
            "calling": [
                "FUN_08002edc"
            ],
            "imported": false,
            "current_name": "parse_float_inputs_08002ba8"
        },
        "FUN_0800919c": {
            "renaming": {
                "FUN_0800919c": "calculate_result_0800919c",
                "param_1": "input_1",
                "param_2": "input_2",
                "bVar1": "is_negative_2",
                "uVar2": "doubled_input_1",
                "uVar3": "doubled_input_2",
                "uVar4": "result_1",
                "bVar5": "is_zero"
            },
            "code": "uint calculate_result_0800919c(uint input_1, uint input_2)\n{\n  bool is_negative_1;\n  uint doubled_input_1;\n  uint doubled_input_2;\n  uint result_1;\n  bool is_zero;\n  \n  doubled_input_1 = input_1 * 2;\n  doubled_input_2 = input_2 * 2;\n  is_negative_1 = ((int)doubled_input_1 >> 0x18 == -1 || (int)doubled_input_2 >> 0x18 == -1) && ((((int)doubled_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) || (((int)doubled_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))));\n  if (is_negative_1) {\n    return 1;\n  }\n  result_1 = doubled_input_1 | input_2 & 0x7fffffff;\n  is_zero = result_1 == 0;\n  if (!is_zero) {\n    result_1 = input_1 ^ input_2;\n    is_zero = result_1 == 0;\n  }\n  if (-1 < (int)result_1) {\n    result_1 = doubled_input_1 + input_2 * -2;\n    is_zero = result_1 == 0;\n  }\n  if (-1 < (int)result_1 && doubled_input_2 <= doubled_input_1 && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (-1 >= (int)result_1 || doubled_input_2 > doubled_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800919c",
            "calling": [
                "FUN_08009204"
            ],
            "imported": false,
            "current_name": "calculate_result_0800919c"
        },
        "FUN_0800b2cc": {
            "renaming": {
                "FUN_0800b2cc": "do_nothing_0800b2cc"
            },
            "code": "\nvoid do_nothing_0800b2cc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2cc",
            "calling": [
                "FUN_08009990",
                "FUN_0800af78",
                "FUN_08009d78"
            ],
            "imported": false,
            "current_name": "do_nothing_0800b2cc"
        },
        "FUN_0800854c": {
            "renaming": {
                "FUN_0800854c": "calculate_shifted_value_0800854c",
                "param_1": "input",
                "uVar1": "result_high",
                "uVar2": "shift_amount",
                "iVar3": "leading_zeroes",
                "uVar4": "shift_amount_overflow",
                "in_r12": "shift_amount_underflow",
                "bVar5": "shift_amount_negative",
                "bVar6": "shift_amount_zero",
                "bVar7": "shift_amount_overflowed"
            },
            "code": "ulonglong calculate_shifted_value_0800854c(uint input)\n{\n    uint leading_zeroes = count_leading_zeroes(input);\n    uint shift_amount = leading_zeroes + 21;\n    uint shift_amount_overflow = 0;\n    bool shift_amount_overflowed = false;\n    bool shift_amount_negative = (int)(leading_zeroes - 11) < 0;\n\n    if (input == 0) {\n        return 0;\n    }\n\n    if (shift_amount >= 32) {\n        shift_amount_overflow = 32 - shift_amount;\n        shift_amount_overflowed = shift_amount_overflow < 0;\n        shift_amount = leading_zeroes - 11;\n    }\n\n    uint shifted_input = input << (shift_amount & 0xff);\n\n    if (shift_amount_overflowed) {\n        shifted_input |= 0U >> ((32 - shift_amount) & 0xff);\n    }\n\n    ulonglong result = 0;\n\n    if (shift_amount_negative) {\n        result = 0 << (shift_amount & 0xff);\n    } else {\n        result = shifted_input;\n        shifted_input = input >> ((12 - leading_zeroes) & 0xff);\n    }\n\n    if (shift_amount < 1075) {\n        result += (ulonglong)(shifted_input + (1074 - shift_amount) * 0x100000) << 32;\n    } else {\n        uint shift_amount_underflow = ~(1074 - shift_amount);\n\n        if (shift_amount_underflow > 30) {\n            result = shifted_input >> ((shift_amount_underflow - 31) & 0xff);\n        } else {\n            int shift_amount_overflow2 = shift_amount_underflow - 19;\n\n            if (shift_amount_overflow2 == 0 || (shift_amount_overflow2 < 0) != SCARRY4(shift_amount_underflow - 31, 12)) {\n                shift_amount_underflow += 1;\n                result = (shifted_input >> (shift_amount_underflow & 0xff)) | ((ulonglong)shifted_input << ((32 - shift_amount_underflow) & 0xff));\n            } else {\n                result = (ulonglong)(shifted_input >> (32 - (12 - shift_amount_overflow2))) | ((ulonglong)input << (shift_amount_overflow2 & 0xff));\n            }\n        }\n    }\n\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800854c",
            "calling": [
                "FUN_08001994"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_0800854c"
        },
        "FUN_08008e44": {
            "renaming": {
                "FUN_08008e44": "calculate_hash_08008e44",
                "param_1": "input",
                "iVar1": "leading_zeroes_count",
                "uVar2": "high_bit_shift",
                "iVar4": "hash_value",
                "uVar3": "is_negative_mask",
                "uVar5": "is_carry",
                "is_overflow": "is_overflow",
                "count_leading_zeroes": "count_leading_zeroes"
            },
            "code": "uint calculate_hash_08008e44(uint input)\n{\n  int leading_zeroes_count;\n  uint is_negative_mask;\n  uint hash_value;\n  uint is_high_bit_set_mask;\n  uint high_bit_shift;\n  uint is_overflow;\n\n  is_negative_mask = input & 0x80000000;\n  if ((int)is_negative_mask < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeroes_count = count_leading_zeroes(input);\n  high_bit_shift = leading_zeroes_count - 8;\n  is_high_bit_set_mask = 0x4b000000;\n  is_overflow = 0x7fffffff;\n  hash_value = ((is_negative_mask | is_high_bit_set_mask) - 0x800000) + high_bit_shift * -0x800000;\n  if (leading_zeroes_count > 7) {\n    uint shift = high_bit_shift & 0xff;\n    uint is_carry = (0U >> (0x20 - shift & 0xff)) + (uint)(is_overflow < (0 << shift));\n    hash_value = hash_value + (input << shift) + is_carry;\n    if ((0U << shift) == 0x80000000) {\n      hash_value = hash_value & 0xfffffffe;\n    }\n    return hash_value;\n  }\n  uint low_bits_shift = leading_zeroes_count + 0x18U & 0xff;\n  uint high_bits_shift = 0x20 - low_bits_shift & 0xff;\n  uint low_bits = input << low_bits_shift;\n  uint high_bits = (input >> high_bits_shift) - ((int)low_bits >> 0x1f);\n  if ((low_bits & 0x7fffffff) == 0) {\n    hash_value = hash_value & ~(low_bits >> 0x1f);\n  }\n  hash_value = hash_value + high_bits;\n  return hash_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e44",
            "calling": [
                "FUN_080004fc",
                "FUN_08004940",
                "FUN_08003004",
                "FUN_08003618",
                "FUN_080024c4",
                "FUN_08002408",
                "FUN_08001f00",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_hash_08008e44"
        },
        "FUN_0800733e": {
            "renaming": {
                "FUN_0800733e": "set_parameter_value_0800733e",
                "param_1": "object_address",
                "param_2": "value",
                "param_3": "is_second_parameter"
            },
            "code": "void set_parameter_value_0800733e(int object_address, undefined2 value, char is_second_parameter) {\n  if (is_second_parameter == '\\0') {\n    *(undefined2 *)(object_address + 0x1a) = value;\n  }\n  else {\n    *(undefined2 *)(object_address + 0x18) = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800733e",
            "calling": [
                "FUN_0800778c"
            ],
            "imported": false,
            "current_name": "set_parameter_value_0800733e"
        },
        "FUN_0800583c": {
            "renaming": {
                "FUN_0800583c": "process_data_and_clear_bits_0800583c_0800583c",
                "PTR_DAT_08005858": "ptr_dat_08005858",
                "update_parameter_080052ac": "update_parameter",
                "process_data_08005790": "process_data",
                "clear_bits_and_check_flag_080057e4": "clear_bits_and_check_flag"
            },
            "code": "void process_data_and_clear_bits_0800583c_0800583c(void)\n{\n  uint16_t parameter = *(uint16_t *)(PTR_DAT_08005858 + 0x18);\n  update_parameter_080052ac(parameter);\n  process_data_08005790();\n  clear_bits_and_check_flag_080057e4();\n  return;\n}",
            "called": [
                "FUN_080052ac",
                "FUN_08005790",
                "FUN_080057e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583c",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "process_data_and_clear_bits_0800583c_0800583c"
        },
        "FUN_08001e98": {
            "renaming": {
                "FUN_08001e98": "process_data_and_update_status_flags_08001e98",
                "param_1": "data",
                "param_2": "length",
                "param_3": "flag1",
                "param_4": "flag2",
                "param_5": "status",
                "iVar1": "equal_pointers",
                "PTR_DAT_08001efc": "data"
            },
            "code": "void process_data_and_update_status_flags_08001e98(void* PTR_DAT_08001efc, int length, int flag1, int flag2, char status)\\n{\\n  int equal_pointers;\\n  if (PTR_DAT_08001efc[1] != \"\\a\") {\\n    do {\\n      process_data_and_update_status_flags_08001e98();\\n      if (*PTR_DAT_08001efc != \"\\0\") {\\n        return;\\n      }\\n      equal_pointers = check_if_ptrs_equal();\\n    } while (equal_pointers != 0);\\n    update_PTR_DAT_08001efc(PTR_DAT_08001efc,length,flag1,flag2,status);\\n    if (PTR_DAT_08001efc[1] == \"\\0\") {\\n      PTR_DAT_08001efc[1] = 2;\\n    }\\n    if (PTR_DAT_08001efc[0x10] != \"\\0\") {\\n      check_and_process_PTR_DAT_08001efc();\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08002fac",
                "FUN_08003004",
                "FUN_0800585c",
                "FUN_08003a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e98",
            "calling": [
                "FUN_080005b4",
                "FUN_080024c4",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "process_data_and_update_status_flags_08001e98"
        },
        "FUN_080069e4": {
            "renaming": {
                "FUN_080069e4": "set_bit_at_position_080069e4",
                "param_1": "bit_position",
                "PTR_DAT_08006a14": "ptr",
                "uint": "uint32_t",
                "int": "int32_t",
                "char": "int8_t",
                "DAT_08006a14": "data",
                "mask": "mask"
            },
            "code": "void set_bit_at_position_080069e4(uint8_t bit_position) {\n    uint32_t* PTR_DAT_08006a14 = (uint32_t*)(DAT_08006a14 + ((bit_position >> 5) + 0x20) * 4);\n    uint32_t mask = 1 << (bit_position & 0x1f);\n    *PTR_DAT_08006a14 = mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069e4",
            "calling": [
                "FUN_08006d4a"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_080069e4"
        },
        "FUN_0800b2d4": {
            "renaming": {
                "FUN_0800b2d4": "set_high_bit_and_shift_0800b2d4",
                "param_1": "value",
                "param_2": "shift_amount"
            },
            "code": "uint32_t set_high_bit_and_shift_0800b2d4(uint32_t value, uint32_t shift_amount) {\n    uint32_t shifted_value = (value | 0x80000000) + 0x100000;\n    uint32_t result = shifted_value >> 0x1f;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2d4",
            "calling": [
                "FUN_0800981c"
            ],
            "imported": false,
            "current_name": "set_high_bit_and_shift_0800b2d4"
        },
        "FUN_08008e3c": {
            "renaming": {
                "FUN_08008e3c": "calculate_hash_08008e3c",
                "param_1": "input",
                "iVar1": "leading_zeros",
                "uVar2": "shift",
                "iVar3": "constant",
                "uVar4": "carry",
                "shifted_input": "shifted_input",
                "shifted_zeroes": "shifted_zeroes",
                "result": "result",
                "shifted_constant": "shifted_constant"
            },
            "code": "uint calculate_hash_08008e3c(uint input)\n{\n  if (input == 0) {\n    return 0;\n  }\n  int leading_zeros = count_leading_zeroes(input);\n  int shift = leading_zeros - 8;\n  int constant = shift * -0x800000 + 0x4a800000;\n  if (leading_zeros > 7) {\n    uint shifted_input = input << (shift & 0xff);\n    uint shifted_zeroes = 0U >> (0x20 - shift & 0xff);\n    uint carry = (uint)(0x7fffffff < 0);\n    uint result = constant + shifted_input + shifted_zeroes + carry;\n    if (shifted_zeroes == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shifted_input = input << (leading_zeros + 0x18U & 0xff);\n  uint shifted_constant = constant + ((input >> (0x20 - (leading_zeros + 0x18U) & 0xff)) - ((int)shifted_input >> 0x1f));\n  if ((shifted_input & 0x7fffffff) == 0) {\n    shifted_constant = shifted_constant & ~(shifted_input >> 0x1f);\n  }\n  return shifted_constant;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e3c",
            "calling": [
                "FUN_08002638",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_hash_08008e3c"
        },
        "FUN_08009654": {
            "renaming": {
                "FUN_08009654": "calculate_double_precision_value_08009654",
                "param_1": "first_param",
                "param_2": "second_param",
                "uVar1": "difference",
                "uVar2": "shifted_second_param",
                "lVar3": "result",
                "temp": "temp",
                "temp2": "temp2"
            },
            "code": "longlong calculate_double_precision_value_08009654(uint first_param, uint second_param) {\n  longlong result = CONCAT44(second_param, first_param);\n  uint shifted_second_param = (second_param << 1) >> 0x15;\n  uint difference = shifted_second_param - 0x3ff;\n  if ((int)difference < 0x14) {\n    if ((int)difference < 0) {\n      second_param = second_param & 0x80000000;\n      if (difference == 0xffffffff) {\n        second_param = second_param | 0x3ff00000;\n      }\n      result = (ulonglong)second_param << 0x20;\n    }\n    else {\n      uint temp = DAT_080096e4 >> (difference & 0xff);\n      result = CONCAT44(second_param, first_param);\n      if ((second_param & temp | first_param) != 0) {\n        result = (ulonglong)(second_param + (0x80000 >> (difference & 0xff)) & ~temp) << 0x20;\n      }\n    }\n  }\n  else if ((int)difference < 0x34) {\n    uint temp = 0xffffffff >> (shifted_second_param - 0x413 & 0xff);\n    if ((first_param & temp) != 0) {\n      uint temp2 = 1 << (0x33 - difference & 0xff);\n      if (CARRY4(first_param, temp2) != false) {\n        second_param = second_param + 1;\n      }\n      result = CONCAT44(second_param, first_param + temp2 & ~temp);\n    }\n  }\n  else {\n    result = CONCAT44(second_param, first_param);\n    if (difference == 0x400) {\n      result = FUNC_080082d4();\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_080082d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009654",
            "calling": [
                "FUN_08004e30"
            ],
            "imported": false,
            "current_name": "calculate_double_precision_value_08009654"
        },
        "FUN_08007bc2": {
            "renaming": {
                "FUN_08007bc2": "clear_bits_08007bc2",
                "_DAT_40000000": "PTR_DATA_40000000",
                "_DAT_4000000c": "PTR_DATA_4000000c"
            },
            "code": "void clear_bits_08007bc2(void)\n{\n  _DAT_40000000 = _DAT_40000000 & 0xfffffffe;\n  _DAT_4000000c = _DAT_4000000c & 0xfffffff8;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007bc2",
            "calling": [
                "FUN_080057e4"
            ],
            "imported": false,
            "current_name": "clear_bits_08007bc2"
        },
        "FUN_08009410": {
            "renaming": {
                "FUN_08009410": "calculate_result_08009410",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "result",
                "uVar2": "operation_result",
                "local_28": "local_1",
                "uStack_24": "local_2",
                "local_20": "local_3",
                "uStack_1c": "local_4",
                "DAT_080094b4": "MAX_INPUT_1",
                "DAT_080094b8": "MAX_INPUT_2",
                "FUNC_080082d0": "calculate_result",
                "FUNC_08009d78": "perform_operation",
                "calculateResultFromInputs_0800adf0": "calculate_result_from_inputs",
                "FUNC_0800a348": "perform_operation"
            },
            "code": "int calculate_result_08009410(int input_1, unsigned int input_2)\n{\n    int result;\n    unsigned int input_2_capped = input_2 & 0x7fffffff;\n\n    if (DAT_080094b4 < input_2_capped) {\n        if (DAT_080094b8 < input_2_capped) {\n            result = calculate_result_08009410(input_1, input_2_capped, input_1, input_2_capped);\n        }\n        else {\n            int operation_result = perform_operation(input_1, input_2_capped, &local_1, &local_2);\n            switch (operation_result & 3) {\n                case 1:\n                    result = calculate_result_08009410_from_inputs(local_1, local_2, local_3, local_4, 1);\n                    break;\n                case 2:\n                case 0:\n                    result = perform_operation(local_1, local_2, local_3, local_4);\n                    break;\n                default:\n                    result = calculate_result_08009410_from_inputs(local_1, local_2, local_3, local_4, 1);\n                    break;\n            }\n        }\n    }\n    else {\n        result = perform_operation(input_1, input_2_capped, 0, 0);\n    }\n    return result;\n}",
            "called": [
                "FUN_080082d0",
                "FUN_0800a348",
                "FUN_08009d78",
                "FUN_0800adf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009410",
            "calling": [
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "calculate_result_08009410"
        },
        "FUN_080035ec": {
            "renaming": {
                "FUN_080035ec": "set_params_in_memory_080035ec",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "PTR_DAT_08003614": "MEMORY_POINTER_08003614"
            },
            "code": "void set_params_in_memory_080035ec(int param1, int param2, int param3) {\n  *(int *)PTR_DAT_08003614 = param1;\n  *(int *)(PTR_DAT_08003614 + 4) = param2;\n  *(int *)(PTR_DAT_08003614 + 8) = param3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035ec",
            "calling": [
                "FUN_0800283a"
            ],
            "imported": false,
            "current_name": "set_params_in_memory_080035ec"
        },
        "FUN_08006c70": {
            "renaming": {
                "FUN_08006c70": "synchronize_data_08006c70",
                "DAT_08006c94": "PTR_DATA_08006c94",
                "DAT_08006c98": "PTR_DATA_08006c98",
                "DataSynchronizationBarrier": "synchronize_data_barrier",
                "uint": "unsigned_int",
                "*": "pointer_to"
            },
            "code": "void synchronize_data_08006c70(void)\n{\n    DataSynchronizationBarrier(0xf);\n    uint* ptr1 = (uint*)(DAT_08006c94 + 0xc);\n    *ptr1 = DAT_08006c98 | (*ptr1 & 0x700);\n    DataSynchronizationBarrier(0xf);\n    while(true)\n    {\n        // Do nothing block with infinite loop\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c70",
            "calling": [
                "FUN_08006d66"
            ],
            "imported": false,
            "current_name": "synchronize_data_08006c70"
        },
        "FUN_08006d98": {
            "renaming": {
                "FUN_08006d98": "extract_bits_from_data_08006d98",
                "param_1": "data",
                "param_2": "bit_offset",
                "param_3": "num_bits",
                "param_4": "destination",
                "uVar1": "extracted_data",
                "get_data_08006b54": "get_data",
                "extract_bits_08006c04": "extract_bits"
            },
            "code": "void extract_bits_from_data_08006d98(char data, int bit_offset, int num_bits, int destination) {\n  \n  int extracted_data = get_data(data);\n  extract_bits(extracted_data, bit_offset, num_bits, destination);\n  return;\n}",
            "called": [
                "FUN_08006b54",
                "FUN_08006c04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d98",
            "calling": [],
            "imported": false,
            "current_name": "extract_bits_from_data_08006d98"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "increment_pointer_value_08005a68",
                "PTR_DAT_08005a80": "pointer_value"
            },
            "code": "void increment_pointer_value_08005a68(void)\n{\n  int* PTR_DAT_08005a80 = (int*)PTR_DAT_08005a80;\n  *PTR_DAT_08005a80 = *PTR_DAT_08005a80 + 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_08007756"
            ],
            "imported": false,
            "current_name": "increment_pointer_value_08005a68"
        },
        "FUN_080079c0": {
            "renaming": {
                "FUN_080079c0": "write_data_to_buffer_080079c0",
                "PTR_DAT_080079d8": "PTR_DATA_BUFFER",
                "PTR_DAT_080079dc": "PTR_FLAG"
            },
            "code": "void write_data_to_buffer_080079c0(void)\n{\n  write_buffer(PTR_DAT_080079d8, 0, 24);\n  *(uint32_t *)PTR_DAT_080079dc = 1;\n  return;\n}",
            "called": [
                "FUN_0800b430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080079c0",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "write_data_to_buffer_080079c0"
        },
        "FUN_0800b2e0": {
            "renaming": {
                "FUN_0800b2e0": "returnZero_0800b2e0"
            },
            "code": "int returnZero_0800b2e0(void) { \n  return 0; \n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2e0",
            "calling": [
                "FUN_080098d0",
                "FUN_0800981c"
            ],
            "imported": false,
            "current_name": "returnZero_0800b2e0"
        },
        "FUN_08002908": {
            "renaming": {
                "FUN_08002908": "calculate_result_08002908",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result1",
                "uVar2": "result2"
            },
            "code": "float calculate_result_08002908(float value1, float value2, float value3, float value4) {\n    float result1 = square(value3);\n    result1 = multiply(result1, value4);\n    float result2 = square(value1);\n    result1 = add(result1, result2);\n    float result3 = square(value2);\n    result1 = multiply(result1, result3);\n    float result4 = power(value3, 3.0);\n    result1 = divide(result1, result4);\n    return result1;\n}",
            "called": [
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_08008cdc",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002908",
            "calling": [
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_result_08002908"
        },
        "FUN_08007c40": {
            "renaming": {
                "FUN_08007c40": "set_global_variable_08007c40",
                "param_1": "value",
                "_DAT_40000034": "global_variable"
            },
            "code": "void set_global_variable_08007c40(int value)\n{\n  _DAT_40000034 = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007c40",
            "calling": [
                "FUN_08005790"
            ],
            "imported": false,
            "current_name": "set_global_variable_08007c40"
        },
        "FUN_080094c0": {
            "renaming": {
                "FUN_080094c0": "calculate_longlong_080094c0",
                "param_1": "first_parameter",
                "param_2": "second_parameter",
                "param_3": "third_parameter",
                "param_4": "fourth_parameter",
                "iVar1": "end_of_string",
                "uVar2": "difference",
                "uVar3": "shifted_value",
                "bVar4": "carry",
                "uVar5": "result",
                "lVar6": "final_result"
            },
            "code": "longlong calculate_longlong_080094c0(uint param_1, uint param_2, undefined4 param_3, undefined4 param_4)\n{\n    int end_of_string;\n    uint uVar2;\n    uint uVar3;\n    uint carry_bit;\n    bool is_negative;\n    undefined8 result;\n    uVar3 = (param_2 << 1) >> 0x15;\n    uVar2 = uVar3 - 0x3ff;\n    if ((int)uVar2 < 0x14) {\n        if ((int)uVar2 < 0) {\n            result = calculate_undefined8(param_1, param_2, DAT_080095a8, DAT_080095ac, param_4);\n            end_of_string = is_end_of_string_08008b60((int)result, (int)((ulonglong)result >> 0x20), 0, 0);\n            result = CONCAT44(param_2, param_1);\n            if (end_of_string != 0) {\n                is_negative = ((int)param_2 < 0) && ((param_1 | param_2 & 0x7fffffff) != 0);\n                if (is_negative) {\n                    param_2 = DAT_080095b4;\n                    result = (ulonglong)param_2 << 0x20;\n                }\n                else {\n                    result = 0;\n                }\n            }\n        }\n        else {\n            uVar3 = DAT_080095b0 >> (uVar2 & 0xff);\n            result = CONCAT44(param_2, param_1);\n            if ((param_2 & uVar3 | param_1) != 0) {\n                result = calculate_undefined8(param_1, param_2, DAT_080095a8, DAT_080095ac, param_4);\n                end_of_string = is_end_of_string_08008b60((int)result, (int)((ulonglong)result >> 0x20), 0, 0);\n                result = CONCAT44(param_2, param_1);\n                if (end_of_string != 0) {\n                    is_negative = (int)param_2 < 0;\n                    if (is_negative) {\n                        param_2 = param_2 + (0x100000 >> (uVar2 & 0xff));\n                    }\n                    carry_bit = 1 << (0x34 - uVar2 & 0xff);\n                    carry_bit = CARRY4(carry_bit, param_1);\n                    param_1 = carry_bit + param_1;\n                    if (carry_bit != false) {\n                        param_2 = param_2 + 1;\n                    }\n                    result = CONCAT44(param_2, param_1 & ~uVar3);\n                }\n            }\n        }\n    }\n    else if ((int)uVar2 < 0x34) {\n        uVar3 = 0xffffffff >> (uVar3 - 0x413 & 0xff);\n        result = CONCAT44(param_2, param_1);\n        if ((uVar3 & param_1) != 0) {\n            result = calculate_undefined8(param_1, param_2, DAT_080095a8, DAT_080095ac, param_4);\n            end_of_string = is_end_of_string_08008b60((int)result, (int)((ulonglong)result >> 0x20), 0, 0);\n            result = CONCAT44(param_2, param_1);\n            if (end_of_string != 0) {\n                is_negative = ((int)param_2 < 0) && (uVar2 == 0x14);\n                if (is_negative) {\n                    param_2 = param_2 + 1;\n                }\n                else {\n                    carry_bit = 1 << (0x34 - uVar2 & 0xff);\n                    carry_bit = CARRY4(carry_bit, param_1);\n                    param_1 = carry_bit + param_1;\n                    if (carry_bit != false) {\n                        param_2 = param_2 + 1;\n                    }\n                    result = CONCAT44(param_2, param_1 & ~uVar3);\n                }\n            }\n        }\n    }\n    else {\n        result = CONCAT44(param_2, param_1);\n        if (uVar2 == 0x400) {\n            result = calculate_undefined8();\n        }\n    }\n    return result;\n}",
            "called": [
                "FUN_080082d4",
                "FUN_08008b60"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080094c0",
            "calling": [
                "FUN_0800a5a0",
                "FUN_08002408",
                "FUN_08001f00",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_longlong_080094c0"
        },
        "FUN_08008eec": {
            "renaming": {
                "FUN_08008eec": "FUNC_08008eec"
            },
            "code": "\nuint FUNC_08008eec(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_0800903c;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_0800903c:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008eec",
            "calling": [
                "FUN_08003004",
                "FUN_08003618",
                "FUN_08002638",
                "FUN_08002978",
                "FUN_08004e30",
                "FUN_08001f00",
                "FUN_08002c18",
                "FUN_08001994",
                "FUN_08003826",
                "FUN_080005b4",
                "FUN_08002908",
                "FUN_080028bc",
                "FUN_080024c4",
                "FUN_08002408"
            ],
            "imported": false,
            "current_name": "FUNC_08008eec"
        },
        "FUN_08006b54": {
            "renaming": {
                "FUN_08006b54": "get_data_08006b54",
                "param_1": "input",
                "bVar1": "output",
                "DAT_08006b98": "data_ptr_1",
                "DAT_08006b9c": "data_ptr_2"
            },
            "code": "byte get_data_08006b54(byte input) {\\n  byte output;\\n  if ((char)input < \"\\0\") {\\n    output = *(byte *)((input & 0xf) + DAT_08006b98 + 0x14);\\n  }\\n  else {\\n    output = *(byte *)((char)input + DAT_08006b9c + 0x300);\\n  }\\n  return output >> 4;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b54",
            "calling": [
                "FUN_08006d98"
            ],
            "imported": false,
            "current_name": "get_data_08006b54"
        },
        "FUN_08007e84": {
            "renaming": {
                "FUN_08007e84": "get_second_byte_08007e84",
                "PTR_08007ea0": "ptr",
                "uint": "unsigned int",
                "DAT_08007ea0": "data"
            },
            "code": "uint get_second_byte_08007e84(void)\n{\n    uint* PTR_08007ea0 = (uint*)(DAT_08007ea0 + 4);\n    uint value = *PTR_08007ea0 & 0xff;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e84",
            "calling": [
                "FUN_08008286"
            ],
            "imported": false,
            "current_name": "get_second_byte_08007e84"
        },
        "FUN_080057e4": {
            "renaming": {
                "FUN_080057e4": "clear_bits_and_check_flag_080057e4",
                "clear_bits_08007bc2": "clear_bits",
                "do_nothing_0800530c": "do_nothing"
            },
            "code": "void clear_bits_and_check_flag_080057e4() {\n  clear_bits();\n  if ((PTR_DAT_0800580c[0x3c] != -1) || ((PTR_DAT_08005810[2] & 0x20) != 0)) {\n    do_nothing();\n  }\n  return;\n}",
            "called": [
                "FUN_08007bc2",
                "FUN_0800530c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057e4",
            "calling": [
                "FUN_080025e8",
                "FUN_080053a0",
                "FUN_08001d4c",
                "FUN_0800583c"
            ],
            "imported": false,
            "current_name": "clear_bits_and_check_flag_080057e4"
        },
        "FUN_08006d8a": {
            "renaming": {
                "FUN_08006d8a": "get_bits_08006d8a",
                "uVar1": "bits",
                "get_bits_from_uint_08006998": "get_bits_from_uint"
            },
            "code": "uint32_t get_bits_08006d8a(void)\n{\n  uint32_t bits;\n  bits = get_bits_08006d8a_from_uint();\n  return bits;\n}",
            "called": [
                "FUN_08006998"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d8a",
            "calling": [],
            "imported": false,
            "current_name": "get_bits_08006d8a"
        },
        "FUN_0800b2e8": {
            "renaming": {
                "FUN_0800b2e8": "calculate_0800b2e8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "shift",
                "iVar2": "temp1",
                "uVar3": "result2",
                "uVar4": "temp2"
            },
            "code": "uint calculate_0800b2e8(uint input1, uint input2, int input3, undefined4 input4)\n{\n  uint result1;\n  int temp1;\n  uint result2;\n  ulonglong temp2;\n  temp2 = CONCAT44(input2,input1);\n  uint shift = (input2 << 1) >> 0x15;\n  if (shift == 0) {\n    if ((input1 | input2 & 0x7fffffff) == 0) {\n      return input1;\n    }\n    temp2 = calculate_0800b2e8(input1,input2,0,DAT_0800b3c8);\n    if (input3 < DAT_0800b3cc) goto LAB_0800b34a;\n    shift = ((uint)((int)(temp2 >> 0x20) << 1) >> 0x15) - 0x36;\n  }\n  else if (shift == 0x7ff) {\n    result1 = calculate_0800b2e8(input1,input2,input1,input2,input4);\n    return result1;\n  }\n  result2 = (uint)(temp2 >> 0x20);\n  temp1 = shift + input3;\n  if (temp1 < 0x7ff) {\n    if (0 < temp1) {\n      return (uint)temp2;\n    }\n    if (temp1 + 0x35 < 0 == SCARRY4(temp1,0x35)) {\n      result1 = calculate_0800b2e8((uint)temp2,result2 & 0x800fffff | (temp1 + 0x36) * 0x100000,0,DAT_0800b3d8);\n      return result1;\n    }\n    if (input3 < 0xc351) {\n      temp2 = temp2 & 0x8000000000000000 | (ulonglong)DAT_0800b3d0 | 0x1a56e1f00000000;\n      goto LAB_0800b34a;\n    }\n  }\n  result1 = calculate_0800b2e8(DAT_0800b3d4,result2 & 0x80000000 | 0x7e37e43c,DAT_0800b3c0,DAT_0800b3c4);\n  return result1;\n}",
            "called": [
                "FUN_080082d4",
                "FUN_08008640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2e8",
            "calling": [
                "FUN_0800a5a0"
            ],
            "imported": false,
            "current_name": "calculate_0800b2e8"
        },
        "FUN_08005220": {
            "renaming": {
                "FUN_08005220": "do_nothing_08005220"
            },
            "code": "\nvoid do_nothing_08005220(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005220",
            "calling": [
                "FUN_0800525c"
            ],
            "imported": false,
            "current_name": "do_nothing_08005220"
        },
        "FUN_08007520": {
            "renaming": {
                "FUN_08007520": "set_bit_in_short_array_08007520",
                "param_1": "index",
                "set_bit_in_short_array_080073d4": "array"
            },
            "code": "void set_bit_in_short_array_08007520(uint16_t* array, uint16_t index) {\n  if ((index & 1) != 0) {\n    array[0x3e] |= 1 << (index >> 1);\n  }\n  return;\n}",
            "called": [
                "FUN_080073d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007520",
            "calling": [
                "FUN_08007930"
            ],
            "imported": false,
            "current_name": "set_bit_in_short_array_08007520"
        },
        "FUN_08007884": {
            "renaming": {
                "FUN_08007884": "get_bits_at_positions_08007884",
                "iVar1": "first_bit",
                "iVar2": "second_bit",
                "iVar3": "third_bit",
                "iVar4": "fourth_bit",
                "iVar5": "fifth_bit",
                "uVar6": "zeroth_bit"
            },
            "code": "uint get_bits_at_positions_08007884(void)\n{\n  int first_bit = get_bit_at_position(0x36);\n  int second_bit = get_bit_at_position(0x37);\n  int third_bit = get_bit_at_position(0x38);\n  int fourth_bit = get_bit_at_position(0x39);\n  int fifth_bit = get_bit_at_position(0xf);\n  uint zeroth_bit = get_bit_at_position(0);\n  return zeroth_bit | (first_bit << 4) | (second_bit << 3) | (third_bit << 2) | (fourth_bit << 1) | (fifth_bit << 7);\n}",
            "called": [
                "FUN_08007854"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007884",
            "calling": [
                "FUN_08007930"
            ],
            "imported": false,
            "current_name": "get_bits_at_positions_08007884"
        },
        "FUN_08004250": {
            "renaming": {
                "FUN_08004250": "print_configurations_08004250",
                "PTR_DAT_08004474": "configurations",
                "PTR_s___x__step_mm___1__08004478": "x_step_mm_string",
                "PTR_s___y__step_mm___2__0800447c": "y_step_mm_string",
                "PTR_s___z__step_mm___3__08004480": "z_step_mm_string",
                "PTR_s___step_pulse__usec___4__08004484": "step_pulse_usec_string",
                "PTR_s___default_feed__mm_min___5__08004488": "default_feed_mm_min_string",
                "PTR_s___default_seek__mm_min___6__0800448c": "default_seek_mm_min_string",
                "PTR_s___step_port_invert_mask__int__08004490": "step_port_invert_mask_string",
                "PTR_s___step_idle_delay__msec___8__08004498": "homing_feed_mm_min_string",
                "PTR_s___acceleration__mm_sec_2___9__080044a0": "acceleration_mm_sec_2_string",
                "PTR_s___junction_deviation__mm___10__080044a4": "junction_deviation_mm_string",
                "PTR_s___arc__mm_segment___11__080044a8": "arc_mm_segment_string",
                "PTR_s___n_arc_correction__int___12__080044ac": "n_arc_correction_string",
                "PTR_s___n_decimals__int___13__080044b0": "n_decimals_string",
                "PTR_s___report_inches__bool___14__080044b4": "report_inches_string",
                "PTR_s___auto_start__bool___15__080044b8": "auto_start_string",
                "PTR_s___invert_step_enable__bool___16__080044bc": "invert_step_enable_string",
                "PTR_s___hard_limits__bool___17__080044c0": "hard_limits_string",
                "PTR_s___homing_cycle__bool___18__080044c4": "homing_cycle_string",
                "PTR_s___homing_dir_invert_mask__int__080044c8": "homing_dir_invert_mask_string",
                "PTR_s____19__080044cc": "arc_mm_segment_string_2",
                "PTR_s___homing_feed__mm_min___20__080044d0": "homing_feed_mm_min_string_2",
                "PTR_s___homing_seek__mm_min___21__080044d4": "homing_seek_mm_min_string",
                "PTR_s___homing_debounce__msec___22__080044d8": "homing_debounce_msec_string",
                "PTR_s___homing_pull_off__mm___23__080044dc": "homing_pull_off_mm_string",
                "PTR_s___dir_port_invert_mask__int__080044e0": "dir_port_invert_mask_string",
                "PTR_DAT_08004470": "configurations_string"
            },
            "code": "void print_configurations_08004250(void)\n{\n  float x_step_mm = *(float*)PTR_DAT_08004474;\n  float y_step_mm = *(float*)(PTR_DAT_08004474 + 8);\n  float z_step_mm = *(float*)(PTR_DAT_08004474 + 0x10);\n  float step_pulse_usec = *(float*)(PTR_DAT_08004474 + 0x18);\n  float default_feed_mm_min = *(float*)(PTR_DAT_08004474 + 0x1C);\n  float default_seek_mm_min = *(float*)(PTR_DAT_08004474 + 0x20);\n  float acceleration_mm_sec_2 = *(float*)(PTR_DAT_08004474 + 0x24);\n  float junction_deviation_mm = *(float*)(PTR_DAT_08004474 + 0x28);\n  float arc_mm_segment = *(float*)(PTR_DAT_08004474 + 0x2C);\n  float homing_feed_mm_min = *(float*)(PTR_DAT_08004474 + 0x30);\n  float homing_pull_off_mm = *(float*)(PTR_DAT_08004474 + 0x34);\n  float homing_debounce_msec = *(float*)(PTR_DAT_08004474 + 0x38);\n  uint16_t homing_dir_invert_mask = *(uint16_t*)(PTR_DAT_08004474 + 0x2A);\n  uint16_t dir_port_invert_mask = *(uint16_t*)(PTR_DAT_08004474 + 0x1A);\n\n  process_string_080036c6(PTR_DAT_08004470);\n  print_float_08003826(x_step_mm);\n  process_string_080036c6(PTR_s___x__step_mm___1__08004478);\n  print_float_08003826(y_step_mm);\n  process_string_080036c6(PTR_s___y__step_mm___2__0800447c);\n  print_float_08003826(z_step_mm);\n  process_string_080036c6(PTR_s___z__step_mm___3__08004480);\n  calculate_and_wait_for_absolute_value_080037fc(PTR_DAT_08004474[0xD]);\n  process_string_080036c6(PTR_s___step_pulse__usec___4__08004484);\n  print_float_08003826(step_pulse_usec);\n  process_string_080036c6(PTR_s___default_feed__mm_min___5__08004488);\n  print_float_08003826(default_feed_mm_min);\n  process_string_080036c6(PTR_s___default_seek__mm_min___6__0800448c);\n  calculate_and_wait_for_absolute_value_080037fc(*(uint16_t*)(PTR_DAT_08004474 + 0x18));\n  process_string_080036c6(PTR_s___step_port_invert_mask__int__08004490);\n  print_binary_representation_0800375c(*(uint16_t*)(PTR_DAT_08004474 + 0x18));\n  process_string_080036c6(PTR_s____7__08004494);\n  calculate_and_wait_for_absolute_value_080037fc(PTR_DAT_08004474[0x3C]);\n  process_string_080036c6(PTR_s___step_idle_delay__msec___8__08004498);\n  print_float_08003826(homing_feed_mm_min);\n  process_string_080036c6(PTR_s___acceleration__mm_sec_2___9__080044a0);\n  print_float_08003826(acceleration_mm_sec_2);\n  process_string_080036c6(PTR_s___junction_deviation__mm___10__080044a4);\n  print_float_08003826(junction_deviation_mm);\n  process_string_080036c6(PTR_s___arc__mm_segment___11__080044a8);\n  calculate_and_wait_for_absolute_value_080037fc(PTR_DAT_08004474[0x3E]);\n  process_string_080036c6(PTR_s___n_arc_correction__int___12__080044ac);\n  calculate_and_wait_for_absolute_value_080037fc(PTR_DAT_08004474[0x3D]);\n  process_string_080036c6(PTR_s___n_decimals__int___13__080044b0);\n  calculate_and_wait_for_absolute_value_080037fc((PTR_DAT_08004474[0x28] & 1) != 0);\n  process_string_080036c6(PTR_s___report_inches__bool___14__080044b4);\n  calculate_and_wait_for_absolute_value_080037fc((PTR_DAT_08004474[0x28] & 2) != 0);\n  process_string_080036c6(PTR_s___auto_start__bool___15__080044b8);\n  calculate_and_wait_for_absolute_value_080037fc((PTR_DAT_08004474[0x28] & 4) != 0);\n  process_string_080036c6(PTR_s___invert_step_enable__bool___16__080044bc);\n  calculate_and_wait_for_absolute_value_080037fc((PTR_DAT_08004474[0x28] & 8) != 0);\n  process_string_080036c6(PTR_s___hard_limits__bool___17__080044c0);\n  calculate_and_wait_for_absolute_value_080037fc((PTR_DAT_08004474[0x28] & 0x10) != 0);\n  process_string_080036c6(PTR_s___homing_cycle__bool___18__080044c4);\n  calculate_and_wait_for_absolute_value_080037fc(homing_dir_invert_mask);\n  process_string_080036c6(PTR_s___homing_dir_invert_mask__int__080044c8);\n  print_binary_representation_0800375c(homing_dir_invert_mask);\n  process_string_080036c6(PTR_s____19__080044cc);\n  print_float_08003826(arc_mm_segment);\n  process_string_080036c6(PTR_s___homing_feed__mm_min___20__080044d0);\n  print_float_08003826(homing_feed_mm_min);\n  process_string_080036c6(PTR_s___homing_seek__mm_min___21__080044d4);\n  calculate_and_wait_for_absolute_value_080037fc(*(uint16_t*)(PTR_DAT_08004474 + 0x34));\n  process_string_080036c6(PTR_s___homing_debounce__msec___22__080044d8);\n  print_float_08003826(homing_debounce_msec);\n  process_string_080036c6(PTR_s___homing_pull_off__mm___23__080044dc);\n  calculate_and_wait_for_absolute_value_080037fc(homing_pull_off_mm);\n  process_string_080036c6(PTR_s___dir_port_invert_mask__int__080044e0);\n  print_binary_representation_0800375c(dir_port_invert_mask);\n  process_string_080036c6(PTR_DAT_080044e4);\n}\n",
            "called": [
                "FUN_0800375c",
                "FUN_08003826",
                "FUN_080037fc",
                "FUN_08009054",
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004250",
            "calling": [
                "FUN_080051b4",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "print_configurations_08004250"
        },
        "FUN_08006dc4": {
            "renaming": {
                "FUN_08006dc4": "set_bit_in_array_08006dc4",
                "param_1": "character",
                "set_bit_in_array_08006a58": "set_bit_in_array_helper"
            },
            "code": "void set_bit_in_array_08006dc4(char character){\n    set_bit_in_array_08006dc4_helper((int)character);\n    return;\n}\n",
            "called": [
                "FUN_08006a58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dc4",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_in_array_08006dc4"
        },
        "FUN_08007402": {
            "renaming": {
                "FUN_08007402": "set_bit_in_short_array_08007402",
                "param_1": "bit_index",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void set_bit_in_short_array_08007402(uint bit_index)\n{\n    uint short_array_index = bit_index >> 4;\n    uint short_array_offset = short_array_index * 0x400 + 0x40020018;\n    short bit_mask = 1 << (bit_index & 0xf);\n    *(short *)short_array_offset = bit_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007402",
            "calling": [
                "FUN_080074c8"
            ],
            "imported": false,
            "current_name": "set_bit_in_short_array_08007402"
        },
        "FUN_08002870": {
            "renaming": {
                "FUN_08002870": "increment_and_wrap_around_08002870",
                "param_1": "input_char",
                "local_9": "incremented_char"
            },
            "code": "char increment_and_wrap_around_08002870(char input_char)\n{\n  char incremented_char = input_char + 1;\n  if (incremented_char == 0x12) {\n    incremented_char = 0;\n  }\n  return incremented_char;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002870",
            "calling": [
                "FUN_08002ef0",
                "FUN_08002ba8",
                "FUN_08002e08",
                "FUN_08003004",
                "FUN_08002f40"
            ],
            "imported": false,
            "current_name": "increment_and_wrap_around_08002870"
        },
        "FUN_08000210": {
            "renaming": {
                "FUN_08000210": "do_nothing_twice_08000210"
            },
            "code": "void do_nothing_twice_08000210(void)\n{\n  do_nothing_080001ec();\n  do_nothing_080001d4();\n  return;\n}",
            "called": [
                "FUN_080001d4",
                "FUN_080001ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000210",
            "calling": [
                "FUN_080025e8",
                "FUN_080001f8",
                "FUN_08000220"
            ],
            "imported": false,
            "current_name": "do_nothing_twice_08000210"
        },
        "FUN_08005900": {
            "renaming": {
                "FUN_08005900": "check_special_character_08005900",
                "param_1": "character",
                "PTR_DAT_08005978": "special_flags",
                "set_flag_and_check_080025e8": "set_cancel_flag_and_check",
                "0x7e": "TILDE_ASCII_VALUE",
                "0x7f": "DELETE_ASCII_VALUE",
                "0x3f": "QUESTION_MARK_ASCII_VALUE",
                "0x40": "AT_ASCII_VALUE",
                "0x18": "CANCEL_ASCII_VALUE",
                "0x21": "EXCLAMATION_MARK_ASCII_VALUE",
                "2": "SECOND_BIT_MASK",
                "1": "FIRST_BIT_MASK",
                "8": "EIGHTH_BIT_MASK"
            },
            "code": "int check_special_character_08005900(byte character) {\n  if (character == TILDE_ASCII_VALUE) {\n    PTR_DAT_08005978[2] |= SECOND_BIT_MASK;\n    return 1;\n  }\n  if (character < DELETE_ASCII_VALUE) {\n    if (character == QUESTION_MARK_ASCII_VALUE) {\n      PTR_DAT_08005978[2] |= FIRST_BIT_MASK;\n      return 1;\n    }\n    if (character < AT_ASCII_VALUE) {\n      if (character == CANCEL_ASCII_VALUE) {\n        set_cancel_flag_and_check();\n        return 1;\n      }\n      if (character == EXCLAMATION_MARK_ASCII_VALUE) {\n        PTR_DAT_08005978[2] |= EIGHTH_BIT_MASK;\n        return 1;\n      }\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080025e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005900",
            "calling": [
                "FUN_08008286"
            ],
            "imported": false,
            "current_name": "check_special_character_08005900"
        },
        "FUN_08002638": {
            "renaming": {
                "FUN_08002638": "convert_string_to_uint32_08002638",
                "param_1": "base_address",
                "param_2": "string",
                "param_3": "output",
                "bVar1": "char_value",
                "bVar2": "is_negative",
                "bVar3": "is_decimal",
                "iVar4": "is_input_valid_result",
                "pcVar5": "next_char_ptr",
                "pcVar6": "current_char_ptr",
                "uVar7": "result",
                "uVar8": "hash64",
                "local_1c": "hash",
                "local_16": "decimal_places",
                "local_15": "decimal_point_char",
                "local_14": "integer_part",
                "local_d": "current_char",
                "local_c": "current_char_ptr"
            },
            "code": "uint32_t convert_string_to_uint32_08002638(int base_address, char *string, uint32_t *output)\n{\n  char current_char;\n  bool is_negative = false;\n  bool is_decimal = false;\n  int integer_part = 0;\n  int decimal_part = 0;\n  int decimal_places = 0;\n  char *current_char_ptr = (char *)(base_address + (uint32_t)*string);\n  char *next_char_ptr = current_char_ptr + 1;\n  current_char = *current_char_ptr;\n  if (current_char == '-') {\n    is_negative = true;\n    current_char = *next_char_ptr;\n    current_char_ptr += 2;\n  }\n  else {\n    if (current_char == '+') {\n      current_char_ptr += 2;\n      current_char = *next_char_ptr;\n    }\n  }\n  while (true) {\n    uint8_t char_value = current_char - '0';\n    if (char_value < 10) {\n      decimal_places++;\n      if (decimal_places < 9) {\n        if (is_decimal) {\n          decimal_places--;\n        }\n        integer_part = char_value + integer_part * 10;\n      }\n      else if (!is_decimal) {\n        decimal_places++;\n      }\n    }\n    else {\n      if ((char_value != 254) || (is_decimal)) {\n        if (decimal_places == 0) {\n          *output = 0;\n        }\n        else {\n          uint32_t hash = calculate_hash(integer_part);\n          if (is_input_valid(hash, 0) == 0) {\n            for (; decimal_places < -1; decimal_places += 2) {\n              uint64_t hash64 = calculate_hash(hash);\n              hash64 = calculate_hash_with_constants(hash64, DAT_08002800, DAT_08002804);\n              hash = calculate_float_bits(hash64);\n            }\n            if (decimal_places < 0) {\n              uint64_t hash64 = calculate_hash(hash);\n              hash64 = calculate_hash_with_constants(hash64, DAT_08002808, DAT_0800280c);\n              hash = calculate_float_bits(hash64);\n            }\n            else {\n              for (; decimal_places > 0; decimal_places--) {\n                hash = calculate_hash_with_constant(hash, DAT_08002810);\n              }\n            }\n          }\n          if (is_negative) {\n            *output = hash ^ 0x80000000;\n          }\n          else {\n            *output = hash;\n          }\n          *string = (char)current_char_ptr - (char)base_address - 1;\n          return 1;\n        }\n      }\n      is_decimal = true;\n    }\n    current_char = *current_char_ptr;\n    current_char_ptr++;\n  }\n}",
            "called": [
                "FUN_08008590",
                "FUN_08008c30",
                "FUN_08008640",
                "FUN_08009214",
                "FUN_08008e3c",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002638",
            "calling": [
                "FUN_0800184c",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "convert_string_to_uint32_08002638"
        },
        "FUN_080051b4": {
            "renaming": {
                "FUN_080051b4": "validate_inputs_and_write_buffers_080051b4",
                "iVar1": "input_validation_result",
                "auStack_18": "buffer",
                "local_9": "buffer_index",
                "validate_input_08004dd2": "validate_input",
                "print_error_message_08004030": "print_error_message",
                "initialize_data_08004c48": "initialize_data",
                "print_configurations_08004250": "print_configurations",
                "validate_and_write_buffer_08004d7c": "validate_and_write_buffer"
            },
            "code": "void validate_inputs_and_write_buffers_080051b4() {\n  int input_validation_result;\n  undefined buffer[15];\n  byte buffer_index;\n\n  input_validation_result = validate_input();\n  if (input_validation_result == 0) {\n    print_error_message_08004030(10);\n    initialize_data(1);\n    print_configurations();\n  }\n  for (buffer_index = 0; buffer_index < 8; buffer_index++) {\n    input_validation_result = validate_and_write_buffer(buffer_index, buffer);\n    if (input_validation_result == 0) {\n      print_error_message_08004030(10);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08004250",
                "FUN_08004c48",
                "FUN_08004d7c",
                "FUN_08004030",
                "FUN_08004dd2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051b4",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "validate_inputs_and_write_buffers_080051b4"
        },
        "FUN_080098d0": {
            "renaming": {
                "FUN_080098d0": "process_input_080098d0",
                "param_1": "x",
                "param_2": "y",
                "cVar1": "input_type",
                "uVar2": "result",
                "iVar3": "input_validity",
                "puVar4": "pointer_value",
                "piVar5": "int_pointer_value",
                "local_50": "one",
                "local_4c": "pointer",
                "local_48": "x_copy",
                "uStack_44": "y_copy",
                "local_40": "x_copy",
                "uStack_3c": "y_copy",
                "local_38": "long_zero",
                "local_30": "input_validity"
            },
            "code": "undefined4 process_input_080098d0(undefined4 x, undefined4 y)\n{\n  char input_type;\n  undefined4 result;\n  int input_validity;\n  undefined4 *pointer_value;\n  int *int_pointer_value;\n  undefined4 one = 1;\n  undefined *pointer = PTR_DAT_0800998c;\n  undefined4 x_copy = x;\n  undefined4 y_copy = y;\n  undefined4 zero = 0;\n  undefined8 long_zero = 0;\n\n  result = calculate_result_0800a1bc();\n  input_type = *PTR_DAT_08009988;\n\n  if (input_type == -1 || (input_validity = is_valid_input_08008b74(x, y, x_copy, y_copy), input_validity != 0) || (input_validity = is_end_of_input_08008b24(x, y, zero, zero), input_validity == 0)) {\n    return result;\n  }\n\n  if (input_type == '\\0') {\n    long_zero = 0;\n    goto LAB_0800996c;\n  }\n  else {\n    long_zero = FUNC_08008894(zero, zero, zero, zero);\n    if (input_type != '\\x02') {\n      goto LAB_0800996c;\n    }\n  }\n\n  pointer_value = (undefined4 *)get_value_from_pointer_to_pointer_0800b3dc();\n  *pointer_value = 0x21;\n\njoined_r0x0800997a:\n  if (input_validity != 0) {\n    int_pointer_value = (int *)get_value_from_pointer_to_pointer_0800b3dc();\n    *int_pointer_value = input_validity;\n  }\n\n  return (undefined4)long_zero;\n}\n",
            "called": [
                "FUN_08008b74",
                "FUN_0800a1bc",
                "FUN_08008b24",
                "FUN_0800b2e0",
                "FUN_08008894",
                "FUN_0800b3dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098d0",
            "calling": [
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08003004",
                "FUN_08002978"
            ],
            "imported": false,
            "current_name": "process_input_080098d0"
        },
        "FUN_08005c30": {
            "renaming": {
                "FUN_08005c30": "is_param_valid_08005c30",
                "param_1": "input_param",
                "bVar1": "is_valid",
                "DAT_08005c70": "PTR_DAT_08005c70",
                "update_value_08005bdc": "update_value"
            },
            "code": "bool is_param_valid_08005c30(int input_param) {\n  bool is_valid = input_param < 0x1000000;\n  if (is_valid) {\n    DAT_08005c70[1] = input_param - 1;\n    update_value_08005bdc(0xffffffff, 0xf);\n    DAT_08005c70[2] = 0;\n    *DAT_08005c70 = 7;\n  }\n  return !is_valid;\n}",
            "called": [
                "FUN_08005bdc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c30",
            "calling": [
                "FUN_0800618c"
            ],
            "imported": false,
            "current_name": "is_param_valid_08005c30"
        },
        "FUN_0800b51c": {
            "renaming": {
                "FUN_0800b51c": "do_nothing_0800b51c"
            },
            "code": "\nvoid do_nothing_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b51c",
            "calling": [
                "FUN_0800b524"
            ],
            "imported": false,
            "current_name": "do_nothing_0800b51c"
        },
        "FUN_0800056c": {
            "renaming": {
                "FUN_0800056c": "calculate_hash_and_bits_0800056c",
                "param_1": "input",
                "uVar1": "hash",
                "calculate_hash_08008590": "calculate_hash",
                "FUNC_08008640": "hash_input",
                "DAT_080005a8": "data_a8",
                "DAT_080005ac": "data_ac",
                "calculate_float_bits_08008c30": "calculate_float_bits"
            },
            "code": "float calculate_hash_and_bits_0800056c(float input)\\n{\\n    if (PTR_DAT_080005b0[3] != \"\\0\") {\\n        float hash = calculate_hash(input);\\n        float hashed_input = FUNC_08008640((int)hash,(int)((ulonglong)hash >> 0x20),DAT_080005a8,DAT_080005ac);\\n        input = calculate_float_bits((int)hashed_input,(int)((ulonglong)hashed_input >> 0x20));\\n    }\\n    return input;\\n}",
            "called": [
                "FUN_08008590",
                "FUN_08008c30",
                "FUN_08008640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800056c",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "calculate_hash_and_bits_0800056c"
        },
        "FUN_08002f24": {
            "renaming": {
                "FUN_08002f24": "copy_and_wrap_around_buffer_08002f24",
                "write_buffer_0800b430": "write_to_buffer"
            },
            "code": "void copy_and_wrap_around_buffer_08002f24(void)\n{\n  copy_and_wrap_around();\n  write_to_buffer(PTR_DAT_08002f3c, 0, 0x1c);\n  return;\n}",
            "called": [
                "FUN_08002ef0",
                "FUN_0800b430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f24",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "copy_and_wrap_around_buffer_08002f24"
        },
        "FUN_0800981c": {
            "renaming": {
                "FUN_0800981c": "calculate_hypotenuse_0800981c",
                "param_1": "x1",
                "param_2": "y1",
                "param_3": "x2",
                "param_4": "y2",
                "cVar1": "hypotenuse_type",
                "puVar2": "HYPOTENUSE_TYPE_PTR",
                "iVar3": "high_bit_shift_result",
                "puVar4": "hypotenuse_value_ptr",
                "piVar5": "hypotenuse_value_ptr",
                "uVar6": "result",
                "local_50": "local_variable_1",
                "puStack_4c": "local_variable_2",
                "local_48": "local_variable_3",
                "uStack_44": "local_variable_4",
                "local_40": "local_variable_5",
                "uStack_3c": "local_variable_6",
                "local_38": "local_variable_7",
                "uStack_34": "local_variable_8",
                "local_30": "local_variable_9",
                "PTR_DAT_080098cc": "HYPOTENUSE_TYPE_PTR",
                "PTR_s_hypot_080098c0": "HYPOTENUSE_VALUE_PTR_1",
                "DAT_080098c8": "HYPOTENUSE_TYPE_1",
                "DAT_080098c4": "HYPOTENUSE_TYPE_2",
                "get_value_from_pointer_to_pointer_0800b3dc": "get_value_from_pointer_to_pointer",
                "set_high_bit_and_shift_0800b2d4": "set_high_bit_and_shift",
                "returnZero_0800b2e0": "returnZero"
            },
            "code": "uint64_t calculate_hypotenuse_0800981c(uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2)\n{\n  char hypotenuse_type;\n  uint32_t *hypotenuse_value_ptr;\n  int high_bit_shift_result;\n  uint64_t result;\n  uint32_t hypotenuse_value_1 = x1 * x1 + y1 * y1;\n  uint32_t hypotenuse_value_2 = x2 * x2 + y2 * y2;\n  hypotenuse_type = *PTR_DAT_080098cc;\n  if (hypotenuse_type == -1)\n  {\n    return 0;\n  }\n  high_bit_shift_result = set_high_bit_and_shift(hypotenuse_value_1);\n  if (high_bit_shift_result != 0)\n  {\n    return 0;\n  }\n  high_bit_shift_result = set_high_bit_and_shift(x1, y1);\n  if (high_bit_shift_result == 0)\n  {\n    return 0;\n  }\n  high_bit_shift_result = set_high_bit_and_shift(x2, y2);\n  if (high_bit_shift_result == 0)\n  {\n    return 0;\n  }\n  if (hypotenuse_type == '\\0')\n  {\n    hypotenuse_value_ptr = PTR_s_hypot_080098c0;\n    *hypotenuse_value_ptr = hypotenuse_value_1;\n    result = CONCAT_64(*DAT_080098c8, HYPOTENUSE_VALUE_1);\n  }\n  else\n  {\n    hypotenuse_value_ptr = HYPOTENUSE_VALUE_PTR_2;\n    *hypotenuse_value_ptr = hypotenuse_value_2;\n    result = CONCAT_64(*DAT_080098c4, HYPOTENUSE_VALUE_2);\n  }\n  if (high_bit_shift_result != 0)\n  {\n    hypotenuse_value_ptr = HYPOTENUSE_VALUE_PTR_3;\n    *hypotenuse_value_ptr = high_bit_shift_result;\n  }\n  return result;\n}\n",
            "called": [
                "FUN_0800b2d4",
                "FUN_0800b2e0",
                "FUN_0800b3dc",
                "FUN_08009b24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800981c",
            "calling": [
                "FUN_080005b4",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "calculate_hypotenuse_0800981c"
        },
        "FUN_080059b4": {
            "renaming": {
                "FUN_080059b4": "set_bits_and_validate_input_080059b4",
                "is_input_valid_08006d72": "is_input_valid",
                "set_bits_in_memory_08006ce0": "set_bits_in_memory",
                "do_nothing_08005a50": "do_nothing",
                "DAT_080059f4": "data_ptr"
            },
            "code": "int set_bits_and_validate_input_080059b4(void)\n{\n    int* DAT_080059f4 = DAT_080059f4;\n    *DAT_080059f4 |= 0x200;\n    *DAT_080059f4 |= 0x400;\n    *DAT_080059f4 |= 0x100;\n    is_input_valid(16000);\n    set_bits_in_memory(3);\n    do_nothing();\n    return 0;\n}",
            "called": [
                "FUN_08005a50",
                "FUN_08006d72",
                "FUN_08006ce0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059b4",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "set_bits_and_validate_input_080059b4"
        },
        "FUN_08006c04": {
            "renaming": {
                "FUN_08006c04": "extract_bits_08006c04",
                "param_1": "input",
                "param_2": "num_bits_to_extract",
                "param_3": "extracted_bits",
                "param_4": "remaining_bits",
                "uVar1": "num_bits_remaining"
            },
            "code": "void extract_bits_08006c04(uint input, uint num_bits_to_extract, uint *extracted_bits, uint *remaining_bits)\n{\n  uint num_bits_remaining = 7 - (num_bits_to_extract & 7);\n  if (num_bits_remaining > 3) {\n    num_bits_remaining = 4;\n  }\n  if ((num_bits_to_extract + 4) < 7) {\n    num_bits_to_extract = 0;\n  }\n  else {\n    num_bits_to_extract -= 3;\n  }\n  *extracted_bits = (1 << (num_bits_remaining & 0xff)) - 1U & input >> (num_bits_to_extract & 0xff);\n  *remaining_bits = (1 << (num_bits_to_extract & 0xff)) - 1U & input;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c04",
            "calling": [
                "FUN_08006d98"
            ],
            "imported": false,
            "current_name": "extract_bits_08006c04"
        },
        "FUN_08002e08": {
            "renaming": {
                "FUN_08002e08": "calculate_and_shift_hashes_08002e08",
                "uVar1": "first_param",
                "uVar2": "second_param",
                "puVar3": "current_ptr",
                "local_18": "previous_ptr",
                "local_11": "current_index"
            },
            "code": "void calculate_and_shift_hashes_08002e08(void)\n{\n  undefined4 first_param;\n  undefined4 second_param;\n  undefined *current_ptr;\n  undefined *previous_ptr;\n  byte current_index;\n  \n  current_index = *PTR_DAT_08002ed0;\n  previous_ptr = (undefined *)0x0;\n  while (current_index != *PTR_DAT_08002ed8) {\n    current_ptr = PTR_DAT_08002ed4 + (uint)current_index * 0x40;\n    if ((previous_ptr != (undefined *)0x0) && ((previous_ptr[0x24] != '\\0' || (current_ptr[0x24] != '\\0')))) {\n      first_param = FUNC_08009054(*(undefined4 *)(previous_ptr + 0x18),*(undefined4 *)(previous_ptr + 0x14));\n      second_param = FUNC_08009054(*(undefined4 *)(current_ptr + 0x18),*(undefined4 *)(previous_ptr + 0x14));\n      calculate_hash_and_shift_08002c18(previous_ptr,first_param,second_param);\n      previous_ptr[0x24] = 0;\n    }\n    current_index = increment_and_wrap_around_08002870(current_index);\n    previous_ptr = current_ptr;\n  }\n  first_param = FUNC_08009054(*(undefined4 *)(previous_ptr + 0x18),*(undefined4 *)(previous_ptr + 0x14));\n  second_param = FUNC_08009054(0,*(undefined4 *)(previous_ptr + 0x14));\n  calculate_hash_and_shift_08002c18(previous_ptr,first_param,second_param);\n  previous_ptr[0x24] = 0;\n  return;\n}",
            "called": [
                "FUN_08009054",
                "FUN_08002870",
                "FUN_08002c18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e08",
            "calling": [
                "FUN_08002edc"
            ],
            "imported": false,
            "current_name": "calculate_and_shift_hashes_08002e08"
        },
        "FUN_08006680": {
            "renaming": {
                "FUN_08006680": "calculate_shifted_value_and_count_leading_zeroes_08006680",
                "uVar1": "shifted_value",
                "uVar2": "leading_zeroes_count",
                "PTR_DAT_080066c8": "shift_amounts",
                "DAT_080066c4": "data_pointer"
            },
            "code": "uint calculate_shifted_value_and_count_leading_zeroes_08006680(void)\n{\n  uint shifted_value = calculate_shifted_value();\n  uint leading_zeroes_count = count_leading_zeroes(0x380000);\n  uint index = (*(uint *)(DAT_080066c4 + 8) & 0x1c00) >> (leading_zeroes_count & 0xff);\n  return shifted_value >> PTR_DAT_080066c8[index];\n}",
            "called": [
                "FUN_08006628"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006680",
            "calling": [
                "FUN_08007f54"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_and_count_leading_zeroes_08006680"
        },
        "FUN_08000340": {
            "renaming": {
                "FUN_08000340": "write_to_buffer_if_empty_08000340",
                "param_1": "index",
                "param_2": "value",
                "PTR_DAT_0800036c": "buffer_empty",
                "write_to_buffer_080002f0": "write_to_buffer",
                "PTR_DAT_08000370": "buffer_data"
            },
            "code": "void write_to_buffer_if_empty_08000340(int index, undefined value)\n{\n  if (*(int *)PTR_DAT_0800036c == 0) {\n    write_to_buffer();\n  }\n  PTR_DAT_08000370[index & 0x3ff] = value;\n  return;\n}",
            "called": [
                "FUN_080002f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000340",
            "calling": [
                "FUN_08000374",
                "FUN_08004c2a"
            ],
            "imported": false,
            "current_name": "write_to_buffer_if_empty_08000340"
        },
        "thunk_FUN_08009990": {
            "renaming": {
                "thunk_FUN_08009990": "calculate_result_thunk_08009990",
                "param_1": "parameter_1",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "iVar1": "difference",
                "uVar2": "temp_result",
                "uVar3": "temp_result_2",
                "uVar4": "result",
                "uVar5": "sign_bit",
                "uVar6": "sign_bit_2",
                "uVar7": "temp_result_3",
                "uVar8": "temp_result_4",
                "uVar9": "temp_result_5",
                "uVar10": "temp_result_6",
                "uVar11": "temp_result_7",
                "uVar12": "temp_result_8",
                "uVar13": "temp_result_9",
                "uVar14": "temp_result_10"
            },
            "code": "uint calculate_result_thunk_08009990(uint parameter_1, uint parameter_2, uint parameter_3, uint parameter_4)\n{\n  int difference;\n  uint result;\n  uint sign_bit;\n  uint sign_bit_2;\n  uint temp_result;\n  uint temp_result_2;\n  uint temp_result_3;\n  uint temp_result_4;\n  uint temp_result_5;\n  uint temp_result_6;\n  uint temp_result_7;\n  uint temp_result_8;\n  uint temp_result_9;\n  uint temp_result_10;\n  \n  sign_bit_2 = parameter_4 & 0x7fffffff;\n  if (DAT_08009b18 < (sign_bit_2 | (-parameter_3 | parameter_3) >> 0x1f) || DAT_08009b18 < ((parameter_2 & 0x7fffffff) | (-parameter_1 | parameter_1) >> 0x1f)) {\n    result = calculate_thunk(parameter_3, parameter_4, parameter_1, parameter_2);\n  }\n  else {\n    if ((parameter_4 + 0xc0100000 | parameter_3) == 0) {\n      result = FUNC_0800af78();\n      return result;\n    }\n    sign_bit = (int)parameter_4 >> 0x1e & 2U | parameter_2 >> 0x1f;\n    if ((parameter_2 | parameter_1) == 0) {\n      temp_result_3 = DAT_08009af0;\n      if (sign_bit != 2) {\n        temp_result_3 = parameter_1;\n        if (sign_bit == 3) {\n          temp_result_3 = DAT_08009af8;\n        }\n      }\n      result = temp_result_3;\n    }\n    else {\n      if ((sign_bit_2 | parameter_3) != 0) {\n        if (sign_bit_2 == DAT_08009b18) {\n          sign_bit = sign_bit - 1;\n          if ((int)parameter_2 == sign_bit_2) {\n            if (2 < sign_bit) {\n              result = DAT_08009b10;\n              return result;\n            }\n            result = *(uint *)(PTR_DAT_08009b20 + sign_bit * 8);\n            return result;\n          }\n          if (sign_bit < 3) {\n            result = *(uint *)(PTR_DAT_08009b1c + sign_bit * 8);\n            return result;\n          }\n          result = 0;\n        }\n        else {\n          if ((int)parameter_2 != DAT_08009b18) {\n            difference = (int)(parameter_2 - sign_bit_2) >> 0x14;\n            if ((int)(parameter_2 - sign_bit_2) < 0x3d00000) {\n              if (((int)parameter_4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference, 0x3c))) {\n                temp_result_4 = 0;\n              }\n              else {\n                calculate_thunk(parameter_1, parameter_2, parameter_3, parameter_4, parameter_4);\n                do_nothing_0800b2cc();\n                temp_result_4 = FUNC_0800af78();\n              }\n            }\n            temp_result_5 = (uint)((ulonglong)temp_result_4 >> 0x20);\n            temp_result_6 = (uint)temp_result_4;\n            if (sign_bit == 1) {\n              result = temp_result_6;\n              return result;\n            }\n            if (sign_bit == 2) {\n              temp_result_7 = calculate_thunk(temp_result_6, temp_result_5, DAT_08009ae8, DAT_08009aec);\n              temp_result_8 = calculate_thunk(DAT_08009af0, DAT_08009af4, (int)temp_result_7, (int)((ulonglong)temp_result_7 >> 0x20));\n              result = temp_result_8;\n              return result;\n            }\n            if (sign_bit == 0) {\n              result = temp_result_6;\n              return result;\n            }\n            temp_result_9 = calculate_thunk(temp_result_6, temp_result_5, DAT_08009ae8, DAT_08009aec);\n            temp_result_10 = calculate_thunk((int)temp_result_9, (int)((ulonglong)temp_result_9 >> 0x20), DAT_08009af0, DAT_08009af4);\n            result = temp_result_10;\n          }\n        }\n      }\n      else {\n        result = DAT_08009b08;\n        if ((int)parameter_2 >= 0) {\n          result = DAT_08009b00;\n        }\n      }\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08009990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009818",
            "calling": [
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "calculate_result_thunk_08009990"
        },
        "FUN_08004bf4": {
            "renaming": {
                "FUN_08004bf4": "write_to_buffer_with_sum_and_offset_08004bf4",
                "param_1": "offset_multiplier",
                "param_2": "data",
                "write_to_buffer_with_sum_08000374": "write_to_buffer_with_sum",
                "DAT_080004b0": "buffer",
                "PTR_DAT_080004b4": "buffer_sum",
                "PTR_DAT_080004b8": "buffer_size"
            },
            "code": "void write_to_buffer_with_sum_and_offset_08004bf4(ushort offset, undefined4 data, int size)\n{\n  write_to_DAT_080004b0_with_sum_08000374(offset, data, size);\n  return;\n}",
            "called": [
                "FUN_08000374"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bf4",
            "calling": [
                "FUN_080005b4",
                "FUN_08004d7c"
            ],
            "imported": false,
            "current_name": "write_to_buffer_with_sum_and_offset_08004bf4"
        },
        "FUN_08004d7c": {
            "renaming": {
                "FUN_08004d7c": "validate_and_write_buffer_08004d7c",
                "param_1": "buffer_size",
                "param_2": "buffer_address",
                "iVar1": "validation_result",
                "validate_buffer_080003ec": "validate_buffer",
                "write_buffer_0800b430": "write_buffer",
                "write_to_buffer_with_sum_and_offset_08004bf4": "write_to_buffer_with_sum_and_offset"
            },
            "code": "bool validate_and_write_buffer_08004d7c(byte buffer_size, undefined4 buffer_address) {\n    int validation_result = validate_buffer_080003ec(buffer_address, (ushort)buffer_size * 0xd + 0x200, 0xc);\n    if (validation_result == 0) {\n        write_buffer_0800b430(buffer_address, 0, 0xc);\n        write_to_buffer_with_sum_and_offset_08004bf4(buffer_size, buffer_address);\n    }\n    return validation_result != 0;\n}",
            "called": [
                "FUN_08004bf4",
                "FUN_0800b430",
                "FUN_080003ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d7c",
            "calling": [
                "FUN_080005b4",
                "FUN_080004ac",
                "FUN_080051b4",
                "FUN_080044e8"
            ],
            "imported": false,
            "current_name": "validate_and_write_buffer_08004d7c"
        },
        "FUN_08009278": {
            "renaming": {
                "FUN_08009278": "convert_to_signed_int_08009278",
                "param_1": "input",
                "uVar1": "shift_amount",
                "uVar2": "shift_result",
                "shifted_input": "shifted_input",
                "shifted_input2": "shifted_input2",
                "shifted_input3": "shifted_input3"
            },
            "code": "uint convert_to_signed_int_08009278(uint input) {\n    uint shifted_input = input << 1;\n    if (shifted_input < 0x7f000000) {\n        return 0;\n    }\n    uint shift_amount = (shifted_input >> 0x18);\n    uint shift_result = 0x9e - shift_amount;\n    if (shift_amount < 0x9f && shift_result != 0) {\n        uint shifted_input2 = (input << 8) | 0x80000000;\n        uint shifted_input3 = shifted_input2 >> (shift_result & 0xff);\n        if ((input & 0x80000000) != 0) {\n            shifted_input3 = -shifted_input3;\n        }\n        return shifted_input3;\n    }\n    if (shift_result == 0xffffff9f && (input & 0x7fffff) != 0) {\n        return 0;\n    }\n    if ((input & 0x80000000) == 0) {\n        input = 0x7fffffff;\n    }\n    return input;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009278",
            "calling": [
                "FUN_08003826",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "convert_to_signed_int_08009278"
        },
        "FUN_080004fc": {
            "renaming": {
                "FUN_080004fc": "calculate_and_store_hashes_080004fc",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "uVar1": "hash1, hash2, hash3",
                "calculate_hash_08008e44": "calculate_hash",
                "FUNC_08009054": "apply_hash_function",
                "PTR_DAT_08000564": "pointer1",
                "PTR_DAT_08000568": "pointer2"
            },
            "code": "void calculate_and_store_hashes_080004fc(unsigned int first_param, unsigned int second_param, unsigned int third_param) {\n    unsigned int hash1 = calculate_hash(first_param);\n    unsigned int hash2 = calculate_hash(second_param);\n    unsigned int hash3 = calculate_hash(third_param);\n    *(unsigned int *)(PTR_DAT_08000568 + 0xc) = FUNC_08009054(hash1,*(unsigned int *)PTR_DAT_08000564);\n    *(unsigned int *)(PTR_DAT_08000568 + 0x10) = FUNC_08009054(hash2,*(unsigned int *)(PTR_DAT_08000564 + 4));\n    *(unsigned int *)(PTR_DAT_08000568 + 0x14) = FUNC_08009054(hash3,*(unsigned int *)(PTR_DAT_08000564 + 8));\n}",
            "called": [
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004fc",
            "calling": [
                "FUN_0800283a"
            ],
            "imported": false,
            "current_name": "calculate_and_store_hashes_080004fc"
        },
        "FUN_08000220": {
            "renaming": {
                "FUN_08000220": "process_command_08000220",
                "param_1": "command",
                "*PTR_DAT_08000264": "*data_pointer",
                "process_until_data_pointer_is_zero_or_status_flag_is_true_08002fd4": "reset_data_pointer_or_check_status_flag",
                "do_nothing_080001c8": "do_nothing",
                "do_nothing_twice_08000210": "do_something_else",
                "do_nothing_080001e0": "do_something"
            },
            "code": "void process_command_08000220(char command) {\n  if (command != *PTR_DAT_08000264) {\n    reset_data_pointer_or_check_status_flag();\n    if (command == 'A') {\n      do_nothing_080001c8();\n    }\n    else if (command == 'B') {\n      do_nothing_080001e0();\n    }\n    else {\n      do_nothing_twice_08000210();\n    }\n    *PTR_DAT_08000264 = command;\n  }\n  return;\n}",
            "called": [
                "FUN_08002fd4",
                "FUN_080001c8",
                "FUN_08000210",
                "FUN_080001e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000220",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "process_command_08000220"
        },
        "FUN_08005238": {
            "renaming": {
                "FUN_08005238": "clear_pointer_08005238",
                "PTR_DAT_0800524c": "pointer_data",
                "do_nothing_and_return_08005250": "do_nothing_and_return"
            },
            "code": "void clear_pointer_08005238(void)\n{\n  *PTR_DAT_0800524c = 0;\n  do_nothing_and_return();\n  return;\n}",
            "called": [
                "FUN_08005250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005238",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "clear_pointer_08005238"
        },
        "FUN_08007da8": {
            "renaming": {
                "FUN_08007da8": "set_data_ready_flag_and_enable_interrupts_08007da8",
                "puVar1": "data_ready_flag_ptr",
                "DAT_08007dd4": "data_ready_flag"
            },
            "code": "void set_data_ready_flag_and_enable_interrupts_08007da8(void)\n{\n  uint *DAT_08007dd4_ptr;\n  DAT_08007dd4_ptr = DAT_08007dd4;\n  DAT_08007dd4[8] |= 0x10;\n  *DAT_08007dd4_ptr |= 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007da8",
            "calling": [
                "FUN_08007e08"
            ],
            "imported": false,
            "current_name": "set_data_ready_flag_and_enable_interrupts_08007da8"
        },
        "FUN_08004148": {
            "renaming": {
                "FUN_08004148": "printAlarmMessage_08004148",
                "param_1": "alarmType",
                "PTR_s_ALARM__08004190": "ALARM_MESSAGE",
                "PTR_s_Abort_during_cycle_08004198": "ABORT_MESSAGE",
                "PTR_s_Hard_limit_08004194": "HARD_LIMIT_MESSAGE",
                "PTR_s___MPos__0800419c": "MPOS_MESSAGE",
                "do_nothing_08002814": "delay"
            },
            "code": "void printAlarmMessage_08004148(char alarmType)\n{\n    printString(PTR_s_ALARM__08004190);\n    if (alarmType == ABORT_CYCLE) {\n        printString(PTR_s_Abort_during_cycle_08004198);\n    }\n    else if (alarmType == HARD_LIMIT) {\n        printString(PTR_s_Hard_limit_08004194);\n    }\n    printString(PTR_s___MPos__0800419c);\n    delay(500);\n    return;\n}",
            "called": [
                "FUN_08002814",
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004148",
            "calling": [
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "printAlarmMessage_08004148"
        },
        "FUN_08004940": {
            "renaming": {
                "FUN_08004940": "print_float_values_08004940",
                "uVar1": "hash_value_1",
                "uVar2": "index_1",
                "uVar3": "hash_value_2",
                "uVar4": "temp_value",
                "uVar5": "temp_value_2",
                "auStack_2c": "stack_array",
                "local_11": "counter_1"
            },
            "code": "void print_float_values_08004940(void)\n{\n  undefined4 hash_value_1;\n  uint index_1;\n  undefined4 hash_value_2;\n  undefined8 temp_value;\n  undefined8 temp_value_2;\n  undefined4 stack_array[6];\n  byte counter_1;\n  \n  stack_array[3] = *(undefined4 *)(PTR_DAT_08004b88 + 4);\n  stack_array[4] = *(undefined4 *)(PTR_DAT_08004b88 + 8);\n  stack_array[5] = *(undefined4 *)(PTR_DAT_08004b88 + 0xc);\n  if ((byte)PTR_DAT_08004b88[1] < 8) {\n                    /* WARNING: Could not recover jumptable at 0x0800495e. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_0800495e::switchdataD_08004964)[(byte)PTR_DAT_08004b88[1]])();\n    return;\n  }\n  process_string_080036c6(PTR_s__MPos__08004ba8);\n  for (counter_1 = 0; counter_1 < 3; counter_1 = counter_1 + 1) {\n    hash_value_1 = calculate_hash_08008e44(stack_array[counter_1 + 3]);\n    index_1 = (uint)counter_1;\n    hash_value_1 = FUNC_08009054(hash_value_1,*(undefined4 *)(PTR_DAT_08004bac + (uint)counter_1 * 4));\n    stack_array[index_1] = hash_value_1;\n    if ((PTR_DAT_08004bac[0x28] & 1) != 0) {\n      temp_value = calculate_hash_08008590(stack_array[counter_1]);\n      temp_value = FUNC_08008640((int)temp_value,(int)((ulonglong)temp_value >> 0x20),DAT_08004b80,DAT_08004b84);\n      index_1 = (uint)counter_1;\n      hash_value_1 = calculate_float_bits_08008c30((int)temp_value,(int)((ulonglong)temp_value >> 0x20));\n      stack_array[index_1] = hash_value_1;\n    }\n    print_float_08003826(stack_array[counter_1]);\n    process_string_080036c6(PTR_DAT_08004bb0);\n  }\n  process_string_080036c6(PTR_s_WPos__08004bb4);\n  for (counter_1 = 0; counter_1 < 3; counter_1 = counter_1 + 1) {\n    if ((PTR_DAT_08004bac[0x28] & 1) == 0) {\n      hash_value_2 = stack_array[counter_1];\n      hash_value_1 = FUNC_08008cdc(*(undefined4 *)(PTR_DAT_08004bb8 + (counter_1 + 8) * 4),\n                           *(undefined4 *)(PTR_DAT_08004bb8 + (counter_1 + 10) * 4 + 4));\n      index_1 = (uint)counter_1;\n      hash_value_1 = FUNC_08008cd8(hash_value_2,hash_value_1);\n      stack_array[index_1] = hash_value_1;\n    }\n    else {\n      temp_value = calculate_hash_08008590(stack_array[counter_1]);\n      hash_value_1 = FUNC_08008cdc(*(undefined4 *)(PTR_DAT_08004bb8 + (counter_1 + 8) * 4),\n                           *(undefined4 *)(PTR_DAT_08004bb8 + (counter_1 + 10) * 4 + 4));\n      temp_value_2 = calculate_hash_08008590(hash_value_1);\n      temp_value_2 = FUNC_08008640((int)temp_value_2,(int)((ulonglong)temp_value_2 >> 0x20),DAT_08004b80,DAT_08004b84);\n      temp_value = FUNC_080082d0((int)temp_value,(int)((ulonglong)temp_value >> 0x20),(int)temp_value_2,\n                           (int)((ulonglong)temp_value_2 >> 0x20));\n      index_1 = (uint)counter_1;\n      hash_value_1 = calculate_float_bits_08008c30((int)temp_value,(int)((ulonglong)temp_value >> 0x20));\n      stack_array[index_1] = hash_value_1;\n    }\n    print_float_08003826(stack_array[counter_1]);\n    if (counter_1 < 2) {\n      process_string_080036c6(PTR_DAT_08004bb0);\n    }\n  }\n  process_string_080036c6(PTR_DAT_08004bbc);\n  return;\n}",
            "called": [
                "FUN_080082d0",
                "FUN_08008590",
                "FUN_08008c30",
                "FUN_08008e44",
                "FUN_08003826",
                "FUN_08008640",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_08008cdc",
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004940",
            "calling": [
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "print_float_values_08004940"
        },
        "FUN_08008a74": {
            "renaming": {
                "FUN_08008a74": "check_params_08008a74",
                "param_1": "x",
                "param_2": "y",
                "param_3": "z",
                "param_4": "w",
                "uVar1": "xor_y_w",
                "bVar2": "is_x_and_y_zero",
                "bVar3": "is_negative_xor_y_w"
            },
            "code": "uint check_params_08008a74(uint x, uint y, uint z, uint w)\n{\n  uint result;\n  bool is_x_and_y_zero = (x | (y << 1)) == 0;\n  bool is_z_and_w_zero = (z | (w << 1)) == 0;\n  if (is_x_and_y_zero && is_z_and_w_zero) {\n    result = 1;\n  } else if (y == w && x == z) {\n    result = 0;\n  } else {\n    uint xor_y_w = y ^ w;\n    bool is_xor_y_w_zero = xor_y_w == 0;\n    if (is_xor_y_w_zero) {\n      result = x <= z;\n    } else {\n      bool is_negative_xor_y_w = (int)xor_y_w < 0;\n      bool is_w_less_than_y = w <= y;\n      if (is_negative_xor_y_w && is_w_less_than_y) {\n        result = 1;\n      } else {\n        result = ~is_w_less_than_y + 1;\n      }\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a74",
            "calling": [
                "FUN_08008b00"
            ],
            "imported": false,
            "current_name": "check_params_08008a74"
        },
        "FUN_08002fd4": {
            "renaming": {
                "FUN_08002fd4": "process_until_data_pointer_is_zero_or_status_flag_is_true_08002fd4",
                "iVar1": "data_pointer",
                "get_data_pointer_08002f74": "get_data_pointer",
                "process_data_and_update_status_flags_08003a74": "process_data_and_update_status_flags",
                "*PTR_DAT_08003000": "*status_flag",
                "PTR_DAT_08003000": "status_flag"
            },
            "code": "void process_until_data_pointer_is_zero_or_status_flag_is_true_08002fd4(void)\\n{\\n  int data_pointer;\\n  while ((data_pointer = get_data_pointer_08002f74(), data_pointer != 0 || (PTR_DAT_08003000[1] == \"\\x03\"))) {\\n    process_data_and_update_PTR_DAT_08003000s();\\n    if (*PTR_DAT_08003000 != \"\\0\") {\\n      return;\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08002f74",
                "FUN_08003a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fd4",
            "calling": [
                "FUN_0800525c",
                "FUN_080005b4",
                "FUN_08000220",
                "FUN_080024c4",
                "FUN_08002408"
            ],
            "imported": false,
            "current_name": "process_until_data_pointer_is_zero_or_status_flag_is_true_08002fd4"
        },
        "FUN_08002408": {
            "renaming": {
                "FUN_08002408": "calculate_data_hash_and_shift_amount_08002408",
                "param_1": "data",
                "uVar1": "shift_amount_2",
                "uVar2": "data_hash_2",
                "uVar3": "hash_offset",
                "uVar4": "data_hash_64",
                "local_12": "data_length"
            },
            "code": "void calculate_data_hash_and_shift_amount_08002408(void* data) {\\n  uint32_t data_hash = FUNC_08008eec(data, DAT_080024b8);\\n  uint64_t data_hash_64 = calculate_hash_08008590(data_hash);\\n  data_hash_64 = calculate_longlong_080094c0((int)data_hash_64, (int)(data_hash_64 >> 0x20));\\n  uint16_t shift_amount = calculate_shift_amount_08008bf0((int)data_hash_64, (int)(data_hash_64 >> 0x20));\\n  process_until_data_pointer_is_zero_or_status_flag_is_true_08002fd4();\\n  uint32_t data_hash_2 = FUNC_08008eec(data, DAT_080024bc);\\n  uint32_t hash_offset = calculate_hash_08008e44((uint)shift_amount * 0x32);\\n  data_hash_2 = FUNC_08008cd8(data_hash_2, hash_offset);\\n  data_hash_64 = calculate_hash_08008590(data_hash_2);\\n  data_hash_64 = calculate_longlong_080094c0((int)data_hash_64, (int)(data_hash_64 >> 0x20));\\n  uint16_t shift_amount_2 = calculate_shift_amount_08008bf0((int)data_hash_64, (int)(data_hash_64 >> 0x20));\\n  do_nothing_08002814(shift_amount_2);\\n  ushort local_12 = calculate_data_length_08008bf0();\\n  while (local_12 != 0 && (process_data_and_update_status_flags_08003a74(), *PTR_DAT_080024c0 == \"\\0\")) {\\n    validate_data_080002a0(0x32);\\n    local_12 = local_12 - 1;\\n  }\\n}",
            "called": [
                "FUN_080094c0",
                "FUN_080002a0",
                "FUN_08008590",
                "FUN_08002fd4",
                "FUN_08008e44",
                "FUN_08008bf0",
                "FUN_08008cd8",
                "FUN_08002814",
                "FUN_08008eec",
                "FUN_08003a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002408",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "calculate_data_hash_and_shift_amount_08002408"
        },
        "FUN_08002a94": {
            "renaming": {
                "FUN_08002a94": "process_input_and_set_flag_08002a94",
                "*PTR_DAT_08002af0": "*input_pointer_1",
                "*PTR_DAT_08002af8": "*input_pointer_2",
                "replace_null_with_0x12_08002896": "replace_null_with_0x12",
                "*PTR_DAT_08002af4": "data_start_pointer",
                "local_9": "current_byte",
                "local_18": "previous_data",
                "local_14": "current_data"
            },
            "code": "void process_input_and_set_flag_08002a94(void)\n{\n  uint8_t current_byte;\n  uint8_t *previous_data = NULL;\n  uint8_t *current_data = NULL;\n  \n  current_byte = *PTR_DAT_08002af0;\n  while (current_byte != *PTR_DAT_08002af8) {\n    current_byte = replace_null_with_0x12_08002896(current_byte);\n    current_data = previous_data;\n    uint8_t *data_pointer = *PTR_DAT_08002af4 + (uint)current_byte * 0x40;\n    validate_input_and_set_flag(data_pointer, previous_data, current_data);\n    previous_data = data_pointer;\n  }\n  return;\n}",
            "called": [
                "FUN_08002896",
                "FUN_080029d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a94",
            "calling": [
                "FUN_08002edc"
            ],
            "imported": false,
            "current_name": "process_input_and_set_flag_08002a94"
        },
        "FUN_08003618": {
            "renaming": {
                "FUN_08003618": "calculate_and_update_hashes_08003618",
                "param_1": "input",
                "bVar1": "current_index",
                "puVar2": "hash_table",
                "uVar3": "current_hash",
                "uVar4": "input_hash",
                "PTR_DAT_08003698": "hash_table",
                "PTR_DAT_08003694": "current_index",
                "calculate_hash_08008e44": "calculate_hash",
                "FUNC_08008eec": "combine_hashes",
                "calculate_hash_08008e44_1": "calculate_hash",
                "FUNC_08009054": "combine_hashes",
                "process_input_and_calculate_hashes_08002edc": "process_input_and_calculate_hashes"
            },
            "code": "void calculate_and_update_hashes_08003618(undefined4 input)\n{\n  byte PTR_DAT_08003694;\n  undefined *PTR_DAT_08003698 = PTR_DAT_08003698;\n  PTR_DAT_08003694 = *PTR_DAT_08003694;\n  undefined4 current_hash = *(undefined4 *)(PTR_DAT_08003698 + (uint)PTR_DAT_08003694 * 0x40 + 0x20);\n  undefined4 input_hash = calculate_hash_08008e44(input);\n  current_hash = FUNC_08008eec(current_hash, input_hash);\n  undefined4 previous_input = *(undefined4 *)(PTR_DAT_08003698 + (uint)PTR_DAT_08003694 * 0x40 + 0x10);\n  undefined4 previous_hash = calculate_hash_08008e44(previous_input);\n  current_hash = FUNC_08009054(current_hash, previous_hash);\n  *(undefined4 *)(PTR_DAT_08003698 + (uint)PTR_DAT_08003694 * 0x40 + 0x20) = current_hash;\n  *(undefined4 *)(PTR_DAT_08003698 + (uint)PTR_DAT_08003694 * 0x40 + 0x10) = input;\n  *(undefined4 *)(PTR_DAT_08003698 + (uint)PTR_DAT_08003694 * 0x40 + 0x18) = 0;\n  *(undefined4 *)(PTR_DAT_08003698 + (uint)PTR_DAT_08003694 * 0x40 + 0x1c) = 0;\n  PTR_DAT_08003698[(uint)PTR_DAT_08003694 * 0x40 + 0x25] = 0;\n  PTR_DAT_08003698[(uint)PTR_DAT_08003694 * 0x40 + 0x24] = 1;\n  process_input_and_calculate_hashes_08002edc();\n  return;\n}",
            "called": [
                "FUN_08008e44",
                "FUN_08009054",
                "FUN_08002edc",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003618",
            "calling": [
                "FUN_080058a0"
            ],
            "imported": false,
            "current_name": "calculate_and_update_hashes_08003618"
        },
        "FUN_0800522c": {
            "renaming": {
                "FUN_0800522c": "do_nothing_0800522c"
            },
            "code": "\nvoid do_nothing_0800522c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800522c",
            "calling": [
                "FUN_0800525c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800522c"
        },
        "FUN_0800af78": {
            "renaming": {
                "FUN_0800af78": "FUNC_0800af78"
            },
            "code": "\nint FUNC_0800af78(int param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  undefined8 uVar9;\n  undefined8 uVar10;\n  undefined4 local_2c;\n  \n  uVar9 = CONCAT44(param_2,param_1);\n  uVar8 = param_2 & 0x7fffffff;\n  if (DAT_0800b298 < (int)uVar8) {\n    if ((uVar8 != DAT_0800b29c && (int)DAT_0800b29c <= (int)uVar8) ||\n       ((iVar2 = DAT_0800b2a8, uVar8 == DAT_0800b29c && (param_1 != 0)))) {\n      iVar2 = FUNC_080082d4(param_1,param_2,param_1);\n      return iVar2;\n    }\n  }\n  else {\n    if (DAT_0800b2ac < (int)uVar8) {\n      uVar9 = do_nothing_0800b2cc();\n      uVar6 = (undefined4)((ulonglong)uVar9 >> 0x20);\n      uVar3 = (undefined4)uVar9;\n      if (DAT_0800b2bc < (int)uVar8) {\n        if ((int)uVar8 < DAT_0800b2c0) {\n          uVar9 = FUNC_080082d0(uVar3,uVar6,0,DAT_0800b2c4);\n          uVar10 = FUNC_08008640(uVar3,uVar6,0,DAT_0800b2c4);\n          uVar10 = FUNC_080082d4((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_0800b2b8);\n          uVar9 = FUNC_08008894((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                               (int)((ulonglong)uVar10 >> 0x20));\n          iVar2 = 2;\n        }\n        else {\n          uVar9 = FUNC_08008894(0,DAT_0800b2c8,uVar3,uVar6);\n          iVar2 = 3;\n        }\n      }\n      else if (DAT_0800b2bc + -0xd0000 < (int)uVar8) {\n        uVar9 = FUNC_080082d0(uVar3,uVar6,0,DAT_0800b2b8);\n        uVar10 = FUNC_080082d4(uVar3,uVar6,0,DAT_0800b2b8);\n        uVar9 = FUNC_08008894((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                             (int)((ulonglong)uVar10 >> 0x20));\n        iVar2 = 1;\n      }\n      else {\n        uVar9 = FUNC_080082d4(uVar3,uVar6,uVar3,uVar6);\n        uVar9 = FUNC_080082d0((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),0,DAT_0800b2b8);\n        uVar10 = FUNC_080082d4(uVar3,uVar6,0,0x40000000);\n        uVar9 = FUNC_08008894((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                             (int)((ulonglong)uVar10 >> 0x20));\n        iVar2 = 0;\n      }\n    }\n    else {\n      if ((int)uVar8 <= DAT_0800b2ac + -0x1bc0000) {\n        uVar10 = FUNC_080082d4(param_1,param_2,DAT_0800b290,DAT_0800b294);\n        iVar2 = is_end_of_string_08008b60((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_0800b2b8);\n        if (iVar2 != 0) {\n          return param_1;\n        }\n      }\n      iVar2 = -1;\n    }\n    local_2c = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar7 = (undefined4)uVar9;\n    uVar9 = FUNC_08008640(uVar7,local_2c,uVar7);\n    uVar4 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar3 = (undefined4)uVar9;\n    uVar9 = FUNC_08008640(uVar3,uVar4,uVar3,uVar4);\n    uVar5 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar6 = (undefined4)uVar9;\n    uVar9 = FUNC_08008640(uVar6,uVar5,DAT_0800b238,DAT_0800b23c);\n    uVar9 = FUNC_080082d4((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b240,DAT_0800b244);\n    uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar6,uVar5);\n    uVar9 = FUNC_080082d4((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b248,DAT_0800b24c);\n    uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar6,uVar5);\n    uVar9 = FUNC_080082d4((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b250,DAT_0800b254);\n    uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar6,uVar5);\n    uVar9 = FUNC_080082d4((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b258,DAT_0800b25c);\n    uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar6,uVar5);\n    uVar9 = FUNC_080082d4((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b260,DAT_0800b264);\n    uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar3,uVar4);\n    uVar3 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar10 = FUNC_08008640(uVar6,uVar5,DAT_0800b268,DAT_0800b26c);\n    uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800b270,DAT_0800b274);\n    uVar10 = FUNC_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar6,uVar5);\n    uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800b278,DAT_0800b27c);\n    uVar10 = FUNC_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar6,uVar5);\n    uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800b280,DAT_0800b284);\n    uVar10 = FUNC_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar6,uVar5);\n    uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800b288,DAT_0800b28c);\n    uVar10 = FUNC_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar6,uVar5);\n    uVar6 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    if (iVar2 == -1) {\n      uVar9 = FUNC_080082d4((int)uVar9,uVar3,(int)uVar10,uVar6);\n      uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar7,local_2c);\n      iVar2 = FUNC_080082d0(uVar7,local_2c,(int)uVar9,(int)((ulonglong)uVar9 >> 0x20));\n      return iVar2;\n    }\n    uVar9 = FUNC_080082d4((int)uVar9,uVar3,(int)uVar10,uVar6);\n    puVar1 = PTR_DAT_0800b2b0;\n    uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar7,local_2c);\n    uVar9 = FUNC_080082d0((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),\n                         *(undefined4 *)(PTR_DAT_0800b2b4 + iVar2 * 8),\n                         *(undefined4 *)((int)(PTR_DAT_0800b2b4 + iVar2 * 8) + 4));\n    uVar9 = FUNC_080082d0((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar7,local_2c);\n    iVar2 = FUNC_080082d0(*(undefined4 *)(puVar1 + iVar2 * 8),\n                         *(undefined4 *)((int)(puVar1 + iVar2 * 8) + 4),(int)uVar9,\n                         (int)((ulonglong)uVar9 >> 0x20));\n    if ((int)param_2 < 0) {\n      return iVar2;\n    }\n  }\n  return iVar2;\n}\n\n",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_08008b60",
                "FUN_0800b2cc",
                "FUN_08008640",
                "FUN_08008894"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800af78",
            "calling": [
                "FUN_08009990"
            ],
            "imported": false,
            "current_name": "FUNC_0800af78"
        },
        "FUN_08007d08": {
            "renaming": {
                "FUN_08007d08": "initialize_flag_08007d08",
                "puVar1": "flag",
                "DAT_08007d9c": "flag_data",
                "set_flag_08007a10": "set_flag",
                "PTR_DAT_08007da0": "flag_pointer",
                "DAT_08007da4": "flag_multiplier"
            },
            "code": "void initialize_flag_08007d08()\n{\n  uint32_t *flag = DAT_08007d9c;\n  set_flag(DAT_08007d9c);\n  *flag = 0x80;\n  flag[1] = 0;\n  flag[2] = 0;\n  flag[3] = 0;\n  flag[4] = 0;\n  flag[6] = 0x6800;\n  flag[7] = 0;\n  flag[8] = 0;\n  flag[9] = 0;\n  flag[10] = (uint32_t)((uint64_t)DAT_08007da4 * (uint64_t)*PTR_DAT_08007da0 >> 0x35) - 1;\n  flag[0xb] = 199;\n  flag[0xd] = 0;\n  flag[0xe] = 100;\n  flag[0xf] = 0;\n  flag[0x10] = 0;\n  flag[0x12] = 0;\n  flag[0x13] = 0;\n  flag[5] = 1;\n  return;\n}",
            "called": [
                "FUN_08007a10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007d08",
            "calling": [
                "FUN_08007e08"
            ],
            "imported": false,
            "current_name": "initialize_flag_08007d08"
        },
        "FUN_080091fc": {
            "renaming": {
                "FUN_080091fc": "calculate_and_concatenate_results_080091fc",
                "param_1": "data_ptr",
                "param_2": "result_ptr",
                "calculate_and_concatenate_results_08009204": "concatenate_results",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void calculate_and_concatenate_results_080091fc(void* data_ptr, void* result_ptr)\n{\n  calculate(data_ptr);\n  concatenate_results(data_ptr, result_ptr);\n  return;\n}",
            "called": [
                "FUN_08009204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091fc",
            "calling": [
                "FUN_08009250",
                "FUN_08009264"
            ],
            "imported": false,
            "current_name": "calculate_and_concatenate_results_080091fc"
        },
        "FUN_080058a0": {
            "renaming": {
                "FUN_080058a0": "update_hashes_if_not_zero_080058a0",
                "PTR_DAT_080058f0": "ptr_dat_f0",
                "PTR_DAT_080058f4": "ptr_dat_f4",
                "PTR_DAT_080058fc": "ptr_dat_fc",
                "DAT_080058f8": "hash_value"
            },
            "code": "void update_hashes_if_not_zero_080058a0(void)\n{\n  int* PTR_DAT_080058f0 = (int*)PTR_DAT_080058f0;\n  int* PTR_DAT_080058f4 = (int*)PTR_DAT_080058f4;\n  int* PTR_DAT_080058fc = (int*)PTR_DAT_080058fc;\n  \n  if (*PTR_DAT_080058f0 == 0)\n  {\n    PTR_DAT_080058fc[1] = 0;\n  }\n  else\n  {\n    int hash_diff = *(int *)(*(int *)PTR_DAT_080058f0 + 0x10) - *(int *)(PTR_DAT_080058f4 + 0x10);\n    calculate_and_update_hashes_08003618(hash_diff);\n    PTR_DAT_080058f4[7] = 0;\n    calculate_local_param_08005324(PTR_DAT_080058f4[7]);\n    PTR_DAT_080058f4[6] = DAT_080058f8;\n    PTR_DAT_080058f4[4] = 0;\n    PTR_DAT_080058fc[1] = 2;\n  }\n  return;\n}",
            "called": [
                "FUN_08005324",
                "FUN_08003618"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058a0",
            "calling": [
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "update_hashes_if_not_zero_080058a0"
        },
        "FUN_080036c6": {
            "renaming": {
                "FUN_080036c6": "process_string_080036c6",
                "param_1": "input_string",
                "local_c": "current_char",
                "wait_for_flag_to_set_08008250": "wait_for_flag_to_set"
            },
            "code": "void process_string_080036c6(char *input_string) {\n  char *current_char = input_string;\n  while (*current_char != '\\0') {\n    wait_for_flag_to_set(*current_char);\n    current_char++;\n  }\n  return;\n}",
            "called": [
                "FUN_08008250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036c6",
            "calling": [
                "FUN_08004250",
                "FUN_080046d0",
                "FUN_08004148",
                "FUN_08004940",
                "FUN_0800423c",
                "FUN_08004030",
                "FUN_080041a0",
                "FUN_08004228",
                "FUN_080044e8",
                "FUN_08004900"
            ],
            "imported": false,
            "current_name": "process_string_080036c6"
        },
        "FUN_08008190": {
            "renaming": {
                "FUN_08008190": "set_flags_and_update_data_08008190",
                "puVar1": "data_ptr",
                "DAT_08008240": "PTR_DATA"
            },
            "code": "void set_flags_and_update_data_08008190(void)\n{\n  uint *data_ptr;\n  data_ptr = DAT_08008240;\n  set_flags(data_ptr);\n  data_ptr[3] = data_ptr[3] & 0xffffdfff;\n  data_ptr[3] = data_ptr[3] & 0xffff400c | 0xc;\n  data_ptr[4] = data_ptr[4] & 0xffff8090;\n  data_ptr[5] = data_ptr[5] & 0xfffff000;\n  *data_ptr = *data_ptr & 0xfffffc00;\n  calculate_data(data_ptr, 0x1c200);\n  data_ptr[6] = data_ptr[6];\n  data_ptr[3] = data_ptr[3] | 0x2000;\n  return;\n}",
            "called": [
                "FUN_08007f54",
                "FUN_08007ea4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008190",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "set_flags_and_update_data_08008190"
        },
        "FUN_080074c8": {
            "renaming": {
                "FUN_080074c8": "set_bits_based_on_input_080074c8",
                "param_1": "input",
                "set_bit_in_short_array_08007402": "set_bit_in_short_array",
                "check_flag_and_set_bit_0800195c": "check_flag_and_set_bit",
                "set_flags_08003a18": "set_flags_based_on_input"
            },
            "code": "void set_bits_based_on_input_080074c8(uint input)\n{\n  if ((input & 1) != 0) {\n    set_bit_in_short_array_08007402(0x3e);\n  }\n  if ((*(int *)PTR_DAT_08007518 != 0) && ((input & 0x1e) != 0)) {\n    check_flag_and_set_bit_0800195c();\n  }\n  if ((*(int *)PTR_DAT_0800751c != 0) && ((input & 0x80) != 0)) {\n    set_flags_08003a18(input);\n  }\n  return;\n}",
            "called": [
                "FUN_08007402",
                "FUN_0800195c",
                "FUN_08003a18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080074c8",
            "calling": [
                "FUN_08007930"
            ],
            "imported": false,
            "current_name": "set_bits_based_on_input_080074c8"
        },
        "FUN_0800b430": {
            "renaming": {
                "FUN_0800b430": "write_buffer_0800b430",
                "param_1": "buffer",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "current_word",
                "puVar2": "last_word",
                "uVar3": "remaining_size",
                "uVar4": "fill_value",
                "bVar5": "is_last",
                "is_aligned": "is_aligned"
            },
            "code": "void write_buffer_0800b430(uint32_t *buffer, uint8_t value, uint32_t size)\n{\n  uint32_t *current_word;\n  uint32_t *last_word;\n  uint32_t remaining_size;\n  uint32_t fill_value;\n  bool is_aligned;\n\n  is_aligned = ((uint32_t)buffer & 3) == 0;\n  if (!is_aligned) {\n    remaining_size = size - 1;\n    current_word = buffer;\n    if (size == 0) {\n      return;\n    }\n    while (true) {\n      buffer = (uint32_t *)((int)current_word + 1);\n      *(uint8_t *)current_word = value;\n      size = remaining_size;\n      if (((uint32_t)buffer & 3) == 0) break;\n      bool is_last = remaining_size == 0;\n      remaining_size = remaining_size - 1;\n      current_word = buffer;\n      if (is_last) {\n        return;\n      }\n    }\n  }\n  if (size > 3) {\n    fill_value = value | (value << 8) | (value << 16) | (value << 24);\n    if (size > 15) {\n      last_word = (uint32_t *)((int)buffer + (size - 16 & 0xfffffff0) + 0x20);\n      do {\n        last_word[-4] = fill_value;\n        last_word[-3] = fill_value;\n        last_word[-2] = fill_value;\n        last_word[-1] = fill_value;\n        last_word = last_word + 4;\n      } while (last_word != (uint32_t *)((int)buffer + ((size - 16) >> 4 + 1) * 4));\n      remaining_size = size & 0xc;\n      buffer = buffer + ((size - 16 >> 4) + 1) * 4;\n      size = size & 0xf;\n      if (remaining_size == 0) goto joined_r0x0800b4a8;\n    }\n    last_word = (uint32_t *)((size - 4 & 0xfffffffc) + 4 + (int)buffer);\n    do {\n      current_word = buffer + 1;\n      *buffer = fill_value;\n      buffer = current_word;\n    } while (last_word != current_word);\n    size = size & 3;\n    buffer = last_word;\n  }\njoined_r0x0800b4a8:\n  if (size != 0) {\n    current_word = buffer;\n    do {\n      last_word = (uint32_t *)((int)current_word + 1);\n      *(uint8_t *)current_word = value;\n      current_word = last_word;\n    } while ((uint32_t *)(size + (int)buffer) != last_word);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b430",
            "calling": [
                "FUN_080079c0",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_080002f0",
                "FUN_080004ac",
                "FUN_08004d7c",
                "FUN_08005814",
                "FUN_080024c4",
                "FUN_08002f24",
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "write_buffer_0800b430"
        },
        "FUN_08004030": {
            "renaming": {
                "FUN_08004030": "print_error_message_08004030",
                "param_1": "error_code"
            },
            "code": "void print_error_message_08004030(char error_code)\n{\n    if (error_code == '\\0') {\n        print_string(PTR_DAT_08004108);\n    }\n    else {\n        print_string(PTR_s_error__0800410c);\n        switch(error_code) {\n            case '\\x01':\n                print_string(PTR_s_Bad_number_format_08004110);\n                break;\n            case '\\x02':\n                print_string(PTR_s_Expected_command_letter_08004114);\n                break;\n            case '\\x03':\n                print_string(PTR_s_Unsupported_statement_08004118);\n                break;\n            case '\\x04':\n                print_string(PTR_s_Invalid_radius_0800411c);\n                break;\n            case '\\x05':\n                print_string(PTR_s_Modal_group_violation_08004120);\n                break;\n            case '\\x06':\n                print_string(PTR_s_Invalid_statement_08004124);\n                break;\n            case '\\a':\n                print_string(PTR_s_Setting_disabled_08004128);\n                break;\n            case '\\b':\n                print_string(PTR_s_Value___0_0_0800412c);\n                break;\n            case '\\t':\n                print_string(PTR_s_Value___3_usec_08004130);\n                break;\n            case '\\n':\n                print_string(PTR_s_EEPROM_read_fail__Using_defaults_08004134);\n                break;\n            case '\\v':\n                print_string(PTR_s_Busy_or_queued_08004138);\n                break;\n            case '\\f':\n                print_string(PTR_s_Alarm_lock_0800413c);\n                break;\n            case '\\r':\n                print_string(PTR_s_Line_overflow_08004140);\n        }\n        print_string(PTR_DAT_08004144);\n    }\n}",
            "called": [
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004030",
            "calling": [
                "FUN_08003f34",
                "FUN_080039bc",
                "FUN_080004ac",
                "FUN_080051b4",
                "FUN_080044e8",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "print_error_message_08004030"
        },
        "FUN_08005360": {
            "renaming": {
                "FUN_08005360": "check_if_threshold_exceeded_08005360",
                "DAT_0800539c": "max_threshold",
                "PTR_DAT_08005398": "data_ptr",
                "*(int *)(PTR_DAT_08005398 + 0x14)": "current_value",
                "*(int *)(PTR_DAT_08005398 + 0x18)": "threshold"
            },
            "code": "check_if_threshold_exceeded_08005360bcheck_if_threshold_exceeded_08005360ocheck_if_threshold_exceeded_08005360ocheck_if_threshold_exceeded_08005360lcheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360ccheck_if_threshold_exceeded_08005360hcheck_if_threshold_exceeded_08005360echeck_if_threshold_exceeded_08005360ccheck_if_threshold_exceeded_08005360kcheck_if_threshold_exceeded_08005360_check_if_threshold_exceeded_08005360icheck_if_threshold_exceeded_08005360fcheck_if_threshold_exceeded_08005360_check_if_threshold_exceeded_08005360*check_if_threshold_exceeded_08005360(check_if_threshold_exceeded_08005360icheck_if_threshold_exceeded_08005360ncheck_if_threshold_exceeded_08005360tcheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360*check_if_threshold_exceeded_08005360)check_if_threshold_exceeded_08005360(check_if_threshold_exceeded_08005360Pcheck_if_threshold_exceeded_08005360Tcheck_if_threshold_exceeded_08005360Rcheck_if_threshold_exceeded_08005360_check_if_threshold_exceeded_08005360Dcheck_if_threshold_exceeded_08005360Acheck_if_threshold_exceeded_08005360Tcheck_if_threshold_exceeded_08005360_check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053608check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053605check_if_threshold_exceeded_080053603check_if_threshold_exceeded_080053609check_if_threshold_exceeded_080053608check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360+check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_080053600check_if_threshold_exceeded_08005360xcheck_if_threshold_exceeded_080053601check_if_threshold_exceeded_080053608check_if_threshold_exceeded_08005360)check_if_threshold_exceeded_08005360_check_if_threshold_exceeded_08005360echeck_if_threshold_exceeded_08005360xcheck_if_threshold_exceeded_08005360ccheck_if_threshold_exceeded_08005360echeck_if_threshold_exceeded_08005360echeck_if_threshold_exceeded_08005360dcheck_if_threshold_exceeded_08005360echeck_if_threshold_exceeded_08005360dcheck_if_threshold_exceeded_08005360(check_if_threshold_exceeded_08005360vcheck_if_threshold_exceeded_08005360ocheck_if_threshold_exceeded_08005360icheck_if_threshold_exceeded_08005360dcheck_if_threshold_exceeded_08005360)check_if_threshold_exceeded_08005360\ncheck_if_threshold_exceeded_08005360{check_if_threshold_exceeded_08005360\ncheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360icheck_if_threshold_exceeded_08005360ncheck_if_threshold_exceeded_08005360tcheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360*check_if_threshold_exceeded_08005360(check_if_threshold_exceeded_08005360icheck_if_threshold_exceeded_08005360ncheck_if_threshold_exceeded_08005360tcheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360*check_if_threshold_exceeded_08005360)check_if_threshold_exceeded_08005360(check_if_threshold_exceeded_08005360Pcheck_if_threshold_exceeded_08005360Tcheck_if_threshold_exceeded_08005360Rcheck_if_threshold_exceeded_08005360_check_if_threshold_exceeded_08005360Dcheck_if_threshold_exceeded_08005360Acheck_if_threshold_exceeded_08005360Tcheck_if_threshold_exceeded_08005360_check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053608check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053605check_if_threshold_exceeded_080053603check_if_threshold_exceeded_080053609check_if_threshold_exceeded_080053608check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360+check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_080053600check_if_threshold_exceeded_08005360xcheck_if_threshold_exceeded_080053601check_if_threshold_exceeded_080053604check_if_threshold_exceeded_08005360)check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360=check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360*check_if_threshold_exceeded_08005360(check_if_threshold_exceeded_08005360icheck_if_threshold_exceeded_08005360ncheck_if_threshold_exceeded_08005360tcheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360*check_if_threshold_exceeded_08005360)check_if_threshold_exceeded_08005360(check_if_threshold_exceeded_08005360Pcheck_if_threshold_exceeded_08005360Tcheck_if_threshold_exceeded_08005360Rcheck_if_threshold_exceeded_08005360_check_if_threshold_exceeded_08005360Dcheck_if_threshold_exceeded_08005360Acheck_if_threshold_exceeded_08005360Tcheck_if_threshold_exceeded_08005360_check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053608check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053605check_if_threshold_exceeded_080053603check_if_threshold_exceeded_080053609check_if_threshold_exceeded_080053608check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360+check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_080053600check_if_threshold_exceeded_08005360xcheck_if_threshold_exceeded_080053601check_if_threshold_exceeded_080053604check_if_threshold_exceeded_08005360)check_if_threshold_exceeded_08005360;check_if_threshold_exceeded_08005360\ncheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360icheck_if_threshold_exceeded_08005360ncheck_if_threshold_exceeded_08005360tcheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360*check_if_threshold_exceeded_08005360(check_if_threshold_exceeded_08005360icheck_if_threshold_exceeded_08005360ncheck_if_threshold_exceeded_08005360tcheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360*check_if_threshold_exceeded_08005360)check_if_threshold_exceeded_08005360(check_if_threshold_exceeded_08005360Pcheck_if_threshold_exceeded_08005360Tcheck_if_threshold_exceeded_08005360Rcheck_if_threshold_exceeded_08005360_check_if_threshold_exceeded_08005360Dcheck_if_threshold_exceeded_08005360Acheck_if_threshold_exceeded_08005360Tcheck_if_threshold_exceeded_08005360_check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053608check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053605check_if_threshold_exceeded_080053603check_if_threshold_exceeded_080053609check_if_threshold_exceeded_080053608check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360+check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_080053600check_if_threshold_exceeded_08005360xcheck_if_threshold_exceeded_080053601check_if_threshold_exceeded_080053608check_if_threshold_exceeded_08005360)check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360=check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360*check_if_threshold_exceeded_08005360(check_if_threshold_exceeded_08005360icheck_if_threshold_exceeded_08005360ncheck_if_threshold_exceeded_08005360tcheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360*check_if_threshold_exceeded_08005360)check_if_threshold_exceeded_08005360(check_if_threshold_exceeded_08005360Pcheck_if_threshold_exceeded_08005360Tcheck_if_threshold_exceeded_08005360Rcheck_if_threshold_exceeded_08005360_check_if_threshold_exceeded_08005360Dcheck_if_threshold_exceeded_08005360Acheck_if_threshold_exceeded_08005360Tcheck_if_threshold_exceeded_08005360_check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053608check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053605check_if_threshold_exceeded_080053603check_if_threshold_exceeded_080053609check_if_threshold_exceeded_080053608check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360+check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_080053600check_if_threshold_exceeded_08005360xcheck_if_threshold_exceeded_080053601check_if_threshold_exceeded_080053608check_if_threshold_exceeded_08005360)check_if_threshold_exceeded_08005360;check_if_threshold_exceeded_08005360\ncheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360*check_if_threshold_exceeded_08005360(check_if_threshold_exceeded_08005360icheck_if_threshold_exceeded_08005360ncheck_if_threshold_exceeded_08005360tcheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360*check_if_threshold_exceeded_08005360)check_if_threshold_exceeded_08005360(check_if_threshold_exceeded_08005360Pcheck_if_threshold_exceeded_08005360Tcheck_if_threshold_exceeded_08005360Rcheck_if_threshold_exceeded_08005360_check_if_threshold_exceeded_08005360Dcheck_if_threshold_exceeded_08005360Acheck_if_threshold_exceeded_08005360Tcheck_if_threshold_exceeded_08005360_check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053608check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053605check_if_threshold_exceeded_080053603check_if_threshold_exceeded_080053609check_if_threshold_exceeded_080053608check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360+check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_080053600check_if_threshold_exceeded_08005360xcheck_if_threshold_exceeded_080053601check_if_threshold_exceeded_080053608check_if_threshold_exceeded_08005360)check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360+check_if_threshold_exceeded_08005360=check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360*check_if_threshold_exceeded_08005360(check_if_threshold_exceeded_08005360icheck_if_threshold_exceeded_08005360ncheck_if_threshold_exceeded_08005360tcheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360*check_if_threshold_exceeded_08005360)check_if_threshold_exceeded_08005360(check_if_threshold_exceeded_08005360Pcheck_if_threshold_exceeded_08005360Tcheck_if_threshold_exceeded_08005360Rcheck_if_threshold_exceeded_08005360_check_if_threshold_exceeded_08005360Dcheck_if_threshold_exceeded_08005360Acheck_if_threshold_exceeded_08005360Tcheck_if_threshold_exceeded_08005360_check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053608check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053605check_if_threshold_exceeded_080053603check_if_threshold_exceeded_080053609check_if_threshold_exceeded_080053608check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360+check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_080053600check_if_threshold_exceeded_08005360xcheck_if_threshold_exceeded_080053601check_if_threshold_exceeded_080053604check_if_threshold_exceeded_08005360)check_if_threshold_exceeded_08005360;check_if_threshold_exceeded_08005360\ncheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360ucheck_if_threshold_exceeded_08005360icheck_if_threshold_exceeded_08005360ncheck_if_threshold_exceeded_08005360tcheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360Dcheck_if_threshold_exceeded_08005360Acheck_if_threshold_exceeded_08005360Tcheck_if_threshold_exceeded_08005360_check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053608check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053605check_if_threshold_exceeded_080053603check_if_threshold_exceeded_080053609check_if_threshold_exceeded_08005360ccheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360=check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360Dcheck_if_threshold_exceeded_08005360Acheck_if_threshold_exceeded_08005360Tcheck_if_threshold_exceeded_08005360_check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053608check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053605check_if_threshold_exceeded_080053603check_if_threshold_exceeded_080053609check_if_threshold_exceeded_08005360ccheck_if_threshold_exceeded_08005360;check_if_threshold_exceeded_08005360\ncheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360icheck_if_threshold_exceeded_08005360fcheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360(check_if_threshold_exceeded_08005360Dcheck_if_threshold_exceeded_08005360Acheck_if_threshold_exceeded_08005360Tcheck_if_threshold_exceeded_08005360_check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053608check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053605check_if_threshold_exceeded_080053603check_if_threshold_exceeded_080053609check_if_threshold_exceeded_08005360ccheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360<check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360*check_if_threshold_exceeded_08005360(check_if_threshold_exceeded_08005360icheck_if_threshold_exceeded_08005360ncheck_if_threshold_exceeded_08005360tcheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360*check_if_threshold_exceeded_08005360)check_if_threshold_exceeded_08005360(check_if_threshold_exceeded_08005360Pcheck_if_threshold_exceeded_08005360Tcheck_if_threshold_exceeded_08005360Rcheck_if_threshold_exceeded_08005360_check_if_threshold_exceeded_08005360Dcheck_if_threshold_exceeded_08005360Acheck_if_threshold_exceeded_08005360Tcheck_if_threshold_exceeded_08005360_check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053608check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053605check_if_threshold_exceeded_080053603check_if_threshold_exceeded_080053609check_if_threshold_exceeded_080053608check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360+check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_080053600check_if_threshold_exceeded_08005360xcheck_if_threshold_exceeded_080053601check_if_threshold_exceeded_080053608check_if_threshold_exceeded_08005360)check_if_threshold_exceeded_08005360)check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360{check_if_threshold_exceeded_08005360\ncheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360*check_if_threshold_exceeded_08005360(check_if_threshold_exceeded_08005360icheck_if_threshold_exceeded_08005360ncheck_if_threshold_exceeded_08005360tcheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360*check_if_threshold_exceeded_08005360)check_if_threshold_exceeded_08005360(check_if_threshold_exceeded_08005360Pcheck_if_threshold_exceeded_08005360Tcheck_if_threshold_exceeded_08005360Rcheck_if_threshold_exceeded_08005360_check_if_threshold_exceeded_08005360Dcheck_if_threshold_exceeded_08005360Acheck_if_threshold_exceeded_08005360Tcheck_if_threshold_exceeded_08005360_check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053608check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053605check_if_threshold_exceeded_080053603check_if_threshold_exceeded_080053609check_if_threshold_exceeded_080053608check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360+check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_080053600check_if_threshold_exceeded_08005360xcheck_if_threshold_exceeded_080053601check_if_threshold_exceeded_080053608check_if_threshold_exceeded_08005360)check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360-check_if_threshold_exceeded_08005360=check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_080053604check_if_threshold_exceeded_080053602check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053600check_if_threshold_exceeded_08005360;check_if_threshold_exceeded_08005360\ncheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360}check_if_threshold_exceeded_08005360\ncheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360rcheck_if_threshold_exceeded_08005360echeck_if_threshold_exceeded_08005360tcheck_if_threshold_exceeded_08005360ucheck_if_threshold_exceeded_08005360rcheck_if_threshold_exceeded_08005360ncheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360Dcheck_if_threshold_exceeded_08005360Acheck_if_threshold_exceeded_08005360Tcheck_if_threshold_exceeded_08005360_check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053608check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053605check_if_threshold_exceeded_080053603check_if_threshold_exceeded_080053609check_if_threshold_exceeded_08005360ccheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360<check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360*check_if_threshold_exceeded_08005360(check_if_threshold_exceeded_08005360icheck_if_threshold_exceeded_08005360ncheck_if_threshold_exceeded_08005360tcheck_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360*check_if_threshold_exceeded_08005360)check_if_threshold_exceeded_08005360(check_if_threshold_exceeded_08005360Pcheck_if_threshold_exceeded_08005360Tcheck_if_threshold_exceeded_08005360Rcheck_if_threshold_exceeded_08005360_check_if_threshold_exceeded_08005360Dcheck_if_threshold_exceeded_08005360Acheck_if_threshold_exceeded_08005360Tcheck_if_threshold_exceeded_08005360_check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053608check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053600check_if_threshold_exceeded_080053605check_if_threshold_exceeded_080053603check_if_threshold_exceeded_080053609check_if_threshold_exceeded_080053608check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_08005360+check_if_threshold_exceeded_08005360 check_if_threshold_exceeded_080053600check_if_threshold_exceeded_08005360xcheck_if_threshold_exceeded_080053601check_if_threshold_exceeded_080053608check_if_threshold_exceeded_08005360)check_if_threshold_exceeded_08005360;check_if_threshold_exceeded_08005360\ncheck_if_threshold_exceeded_08005360}check_if_threshold_exceeded_08005360",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005360",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "check_if_threshold_exceeded_08005360"
        },
        "FUN_08003980": {
            "renaming": {
                "FUN_08003980": "clear_data_08003980",
                "PTR_DAT_08003998": "data_ptr_1",
                "PTR_DAT_0800399c": "data_ptr_2"
            },
            "code": "void clear_data_08003980(void)\n{\n  *PTR_DAT_08003998 = 0;\n  *PTR_DAT_0800399c = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003980",
            "calling": [
                "FUN_080039a0",
                "FUN_08003f34"
            ],
            "imported": false,
            "current_name": "clear_data_08003980"
        },
        "FUN_08006de0": {
            "renaming": {
                "FUN_08006de0": "check_bit_08006de0",
                "param_1": "bit_position",
                "uVar1": "result"
            },
            "code": "int check_bit_08006de0(int bit_position)\n{\n  int bit_value = 1 << (bit_position % 8);\n  int byte_position = bit_position / 8;\n  int *byte_ptr = PTR_DAT_08006a18 + byte_position;\n  int byte_value = *byte_ptr;\n  int result = byte_value & bit_value;\n  return result;\n}",
            "called": [
                "FUN_08006a18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006de0",
            "calling": [],
            "imported": false,
            "current_name": "check_bit_08006de0"
        },
        "FUN_08007540": {
            "renaming": {
                "FUN_08007540": "processDataAndUpdateFlags_08007540",
                "set_bits_and_validate_input_080059b4": "setBitsAndValidateInput",
                "set_flags_and_validate_inputs_08007436": "setFlagsAndValidateInputs",
                "set_bits_and_parameter_values_0800778c": "setBitsAndParameterValues",
                "initialize_and_enable_data_ready_interrupt_08007e08": "initializeAndEnableDataReadyInterrupt",
                "write_data_to_buffer_080079c0": "writeDataToBuffer",
                "set_flags_and_update_data_08008190": "setFlagsAndUpdateData",
                "send_interrupt_if_not_sent_before_08005984": "sendInterruptIfNotSentBefore",
                "process_data_and_update_flags_08001ddc": "processAndUpdateFlags"
            },
            "code": "int processDataAndUpdateFlags_08007540(void) {\n  set_bits_and_validate_input_080059b4();\n  set_flags_and_validate_inputs_08007436();\n  set_bits_and_parameter_values_0800778c();\n  initialize_and_enable_data_ready_interrupt_08007e08();\n  write_data_to_buffer_080079c0();\n  setFlagsAndUpdateData();\n  send_interrupt_if_not_sent_before_08005984(0);\n  processAndUpdateFlags();\n  return 0;\n}",
            "called": [
                "FUN_08008190",
                "FUN_080079c0",
                "FUN_08007436",
                "FUN_080059b4",
                "FUN_08007e08",
                "FUN_08005984",
                "FUN_0800778c",
                "FUN_08001ddc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007540",
            "calling": [
                "FUN_080092c4"
            ],
            "imported": false,
            "current_name": "processDataAndUpdateFlags_08007540"
        },
        "FUN_080052dc": {
            "renaming": {
                "FUN_080052dc": "set_parameter_080052dc",
                "param_1": "new_param",
                "DAT_08005308": "data_start",
                "PTR_0800531c": "ptr",
                "mask": "bit_mask"
            },
            "code": "void set_parameter_080052dc(uint new_param)\n{\n    uint* PTR_0800531c = (uint*)(DAT_08005308 + 0x14);\n    uint mask = 0xfffff55f;\n    *PTR_0800531c = (*PTR_0800531c & mask) | new_param;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052dc",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "set_parameter_080052dc"
        },
        "FUN_080064ec": {
            "renaming": {
                "FUN_080064ec": "calculate_080064ec",
                "uVar1": "flags",
                "uVar2": "divisor",
                "local_c": "result",
                "DAT_0800661c": "data",
                "count_leading_zeroes": "count_leading_zeros"
            },
            "code": "uint calculate_080064ec(uint *DAT_0800661c) {\n    uint flags = *(DAT_0800661c + 2) & 0xc;\n    uint result;\n    if (flags == 8) {\n        uint divisor = *(DAT_0800661c + 1) & 0x3f;\n        uint leading_zeroes = count_leading_zeroes(0x200);\n        if ((*(DAT_0800661c + 1) & 0x400000) >> (leading_zeroes & 0xff) == 0) {\n            leading_zeroes = count_leading_zeroes(0x3fe0000);\n            result = ((*(DAT_0800661c + 1) & 0x7fc0) >> (leading_zeroes & 0xff)) * (DAT_08006620 / divisor);\n        }\n        else {\n            leading_zeroes = count_leading_zeroes(0x3fe0000);\n            result = ((*(DAT_0800661c + 1) & 0x7fc0) >> (leading_zeroes & 0xff)) * (DAT_08006624 / divisor);\n        }\n        leading_zeroes = count_leading_zeroes(0xc000);\n        return result / ((((*(DAT_0800661c + 1) & 0x30000) >> (leading_zeroes & 0xff)) + 1) * 2);\n    }\n    if (flags < 9) {\n        if (flags == 0) {\n            return DAT_08006620;\n        }\n        if (flags == 4) {\n            return DAT_08006624;\n        }\n    }\n    return DAT_08006620;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ec",
            "calling": [
                "FUN_08006628"
            ],
            "imported": false,
            "current_name": "calculate_080064ec"
        },
        "FUN_08006ba0": {
            "renaming": {
                "FUN_08006ba0": "apply_bitmask_08006ba0",
                "param_1": "bitmask",
                "param_2": "shift_amount",
                "param_3": "value",
                "uVar1": "num_bits_to_shift",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "uint apply_bitmask_08006ba0(uint bitmask, uint shift_amount, uint value) {\n  uint num_bits_to_keep = bitmask & 7;\n  uint num_bits_to_shift = 7 - num_bits_to_keep;\n  if (num_bits_to_shift > 3) {\n    num_bits_to_shift = 4;\n  }\n  if (num_bits_to_keep + 4 < 7) {\n    num_bits_to_keep = 0;\n  }\n  else {\n    num_bits_to_keep = num_bits_to_keep - 3;\n  }\n  return value & (1 << (num_bits_to_keep & 0xff)) - 1U |\n         ((1 << (num_bits_to_shift & 0xff)) - 1U & shift_amount) << (num_bits_to_keep & 0xff);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ba0",
            "calling": [
                "FUN_08006cf6"
            ],
            "imported": false,
            "current_name": "apply_bitmask_08006ba0"
        },
        "FUN_080003ec": {
            "renaming": {
                "FUN_080003ec": "validate_buffer_080003ec",
                "param_1": "buffer",
                "param_2": "buffer_length",
                "param_3": "buffer_index",
                "cVar1": "current_char",
                "uVar2": "expected_sum",
                "local_1c": "remaining_length",
                "local_18": "current_index",
                "local_14": "current_buffer",
                "local_9": "buffer_sum"
            },
            "code": "bool validate_buffer_080003ec(char *buffer, int buffer_length, int buffer_index) {\n  char current_char;\n  uint8_t buffer_sum = 0;\n  int remaining_length = buffer_length;\n  int current_index = buffer_index;\n  char *current_buffer = buffer;\n  if (*(int *)PTR_DAT_08000470 == 0) {\n    write_to_buffer_080002f0();\n    current_index = buffer_index;\n    current_buffer = buffer;\n  }\n  while (remaining_length != 0) {\n    current_char = get_buffer_value_08000310(current_index);\n    buffer_sum = current_char + (buffer_sum != 0);\n    *current_buffer = current_char;\n    current_index++;\n    current_buffer++;\n    remaining_length--;\n  }\n  uint8_t expected_sum = get_buffer_value_08000310(current_index);\n  return buffer_sum == expected_sum;\n}",
            "called": [
                "FUN_08000310",
                "FUN_080002f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003ec",
            "calling": [
                "FUN_08004d2c",
                "FUN_08004d7c",
                "FUN_08004dd2"
            ],
            "imported": false,
            "current_name": "validate_buffer_080003ec"
        },
        "FUN_08002896": {
            "renaming": {
                "FUN_08002896": "replace_null_with_0x12_08002896",
                "param_1": "character",
                "local_9": "result"
            },
            "code": "char replace_null_with_0x12_08002896(char character) {\n  char result = character;\n  if (character == '\\0') {\n    result = '\\x12';\n  }\n  return result - 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002896",
            "calling": [
                "FUN_08002a94"
            ],
            "imported": false,
            "current_name": "replace_null_with_0x12_08002896"
        },
        "FUN_0800a348": {
            "renaming": {
                "FUN_0800a348": "FUNC_0800a348"
            },
            "code": "\nundefined4 FUNC_0800a348(undefined4 param_1,uint param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  uint uVar4;\n  undefined8 uVar5;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  longlong lVar8;\n  undefined4 local_30;\n  undefined4 uStack_2c;\n  undefined4 local_28;\n  undefined4 uStack_24;\n  \n  uVar4 = param_2 & 0x7fffffff;\n  if (uVar4 < 0x3e400000) {\n    iVar1 = ConvertToSignedFixedPoint_08008ba0();\n    if (iVar1 == 0) {\n      return 0;\n    }\n    uVar5 = FUNC_08008640(param_1,param_2,param_1,param_2);\n    uVar3 = (undefined4)((ulonglong)uVar5 >> 0x20);\n    uVar2 = (undefined4)uVar5;\n    uVar6 = FUNC_08008640(uVar2,uVar3,DAT_0800a558,DAT_0800a55c);\n    uVar6 = FUNC_080082d4((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a560,DAT_0800a564);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a568,DAT_0800a56c);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d4((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a570,DAT_0800a574);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a578,DAT_0800a57c);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d4((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a580,DAT_0800a584);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n  }\n  else {\n    uVar5 = FUNC_08008640(param_1,param_2,param_1,param_2);\n    uVar3 = (undefined4)((ulonglong)uVar5 >> 0x20);\n    uVar2 = (undefined4)uVar5;\n    uVar6 = FUNC_08008640(uVar2,uVar3,DAT_0800a558,DAT_0800a55c);\n    uVar6 = FUNC_080082d4((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a560,DAT_0800a564);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a568,DAT_0800a56c);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d4((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a570,DAT_0800a574);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a578,DAT_0800a57c);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d4((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a580,DAT_0800a584);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    if (DAT_0800a590 < (int)uVar4) {\n      if (DAT_0800a594 < (int)uVar4) {\n        lVar8 = (ulonglong)DAT_0800a598 << 0x20;\n        iVar1 = DAT_0800a59c;\n      }\n      else {\n        lVar8 = FUNC_080082d0(0,DAT_0800a58c,0,uVar4 - 0x200000);\n        iVar1 = uVar4 - 0x200000;\n      }\n      uStack_24 = (undefined4)((ulonglong)lVar8 >> 0x20);\n      local_28 = (undefined4)lVar8;\n      uVar5 = FUNC_08008640(uVar2,uVar3,0,DAT_0800a588);\n      uVar5 = FUNC_080082d0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),0,iVar1);\n      uVar6 = FUNC_08008640(uVar2,uVar3,(int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n      uVar7 = FUNC_08008640(param_1,param_2,param_3,param_4);\n      uVar6 = FUNC_080082d0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),(int)uVar7,\n                           (int)((ulonglong)uVar7 >> 0x20));\n      uVar5 = FUNC_080082d0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),(int)uVar6,\n                           (int)((ulonglong)uVar6 >> 0x20));\n      uVar2 = FUNC_080082d0(local_28,uStack_24,(int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n      return uVar2;\n    }\n  }\n  uStack_2c = (undefined4)((ulonglong)uVar6 >> 0x20);\n  local_30 = (undefined4)uVar6;\n  uVar2 = (undefined4)((ulonglong)uVar5 >> 0x20);\n  uVar6 = FUNC_08008640((int)uVar5,uVar2,0,DAT_0800a588);\n  uVar5 = FUNC_08008640((int)uVar5,uVar2,local_30,uStack_2c);\n  uVar7 = FUNC_08008640(param_1,param_2,param_3,param_4);\n  uVar5 = FUNC_080082d0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),(int)uVar7,\n                       (int)((ulonglong)uVar7 >> 0x20));\n  uVar5 = FUNC_080082d0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),(int)uVar5,\n                       (int)((ulonglong)uVar5 >> 0x20));\n  uVar2 = FUNC_080082d0(0,DAT_0800a58c,(int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n  return uVar2;\n}\n\n",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_08008ba0",
                "FUN_08008640"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800a348",
            "calling": [
                "FUN_08009410",
                "FUN_080096e8"
            ],
            "imported": false,
            "current_name": "FUNC_0800a348"
        },
        "FUN_080001ac": {
            "renaming": {
                "FUN_080001ac": "concatenate_values_080001ac",
                "param_1": "value1",
                "param_2": "value2",
                "DAT_080001bc": "data_variable",
                "PTR_FUN_080001c4": "function_pointer",
                "PTR_DAT_080001c0": "data_pointer"
            },
            "code": "typedef unsigned long long uint64_t; \n\nuint64_t concatenate_values_080001ac(uint64_t value1, uint64_t value2) {\n    if (DAT_080001bc != 0) {\n        value1 = PTR_PTR_FUN_080001c4;\n        value2 = PTR_PTR_DAT_080001c0;\n    }\n    return ((uint64_t)value2 << 32) | value1;\n}",
            "called": [
                "FUN_0800b5b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ac",
            "calling": [
                "FUN_0800b3e8"
            ],
            "imported": false,
            "current_name": "concatenate_values_080001ac"
        },
        "FUN_08003740": {
            "renaming": {
                "FUN_08003740": "print_binary_representation_08003740",
                "param_1": "data"
            },
            "code": "void print_binary_representation_08003740(void* data, int num_bits) {\n  print_binary_representation_08003740_080036f0(data, num_bits);\n  return;\n}",
            "called": [
                "FUN_080036f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003740",
            "calling": [],
            "imported": false,
            "current_name": "print_binary_representation_08003740"
        },
        "FUN_08000478": {
            "renaming": {
                "FUN_08000478": "set_params_to_array_08000478",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "PTR_DAT_080004a8": "array"
            },
            "code": "void set_params_to_array_08000478(void* param_1, void* param_2, void* param_3) {\n  PTR_DAT_080004a8[25] = param_1;\n  PTR_DAT_080004a8[26] = param_2;\n  PTR_DAT_080004a8[27] = param_3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000478",
            "calling": [
                "FUN_080005b4",
                "FUN_080004ac"
            ],
            "imported": false,
            "current_name": "set_params_to_array_08000478"
        },
        "FUN_08006d2e": {
            "renaming": {
                "FUN_08006d2e": "set_bit_in_array_08006d2e",
                "param_1": "character",
                "set_bit_in_array_080069b4": "set_bit_in_array_helper"
            },
            "code": "void set_bit_in_array_08006d2e(char character) {\n    set_bit_in_array_08006d2e_helper((int)character);\n}\n",
            "called": [
                "FUN_080069b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d2e",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_in_array_08006d2e"
        },
        "FUN_08007e1c": {
            "renaming": {
                "FUN_08007e1c": "wait_for_flag_to_set_08007e1c",
                "param_1": "flag",
                "DAT_08007e48": "status_flag"
            },
            "code": "void wait_for_flag_to_set_08007e1c(byte flag) {\n  do {\n  } while ((*DAT_08007e48 & 0x80) == 0);\n  DAT_08007e48[1] = (uint)flag;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e1c",
            "calling": [
                "FUN_08008250",
                "FUN_0800826a"
            ],
            "imported": false,
            "current_name": "wait_for_flag_to_set_08007e1c"
        },
        "FUN_0800adf0": {
            "renaming": {
                "FUN_0800adf0": "calculateResultFromInputs_0800adf0",
                "param_1": "inputValue",
                "param_2": "inputThreshold",
                "param_3": "inputParam1",
                "param_4": "inputParam2",
                "param_5": "inputFlag",
                "iVar1": "conversionResult",
                "uVar2": "resultVar1",
                "uVar3": "resultVar2",
                "uVar4": "resultVar3",
                "uVar5": "resultVar4",
                "uVar6": "resultVar5",
                "uVar7": "resultVar6",
                "uVar8": "resultVar7"
            },
            "code": "undefined4 calculateResultFromInputs_0800adf0(undefined4 inputValue,uint inputThreshold,undefined4 inputParam1,undefined4 inputParam2,int inputFlag)\\n\\\n    {\\n\\\n        int conversionResult;\\n\\\n        undefined4 resultVar1;\\n\\\n        undefined4 resultVar2;\\n\\\n        undefined4 resultVar3;\\n\\\n        undefined4 resultVar4;\\n\\\n        undefined4 resultVar5;\\n\\\n        undefined8 resultVar6;\\n\\\n        undefined8 resultVar7;\\n\\\n        \\n\\\n        if (((inputThreshold & 0x7fffffff) < 0x3e400000) && (conversionResult = ConvertToSignedFixedPoint_08008ba0(), conversionResult == 0)) {\\n\\\n            return inputValue;\\n\\\n        }\\n\\\n        \\n\\\n        resultVar6 = FUNC_08008640(inputValue,inputThreshold,inputValue);\\n\\\n        resultVar3 = (undefined4)((ulonglong)resultVar6 >> 0x20);\\n\\\n        resultVar2 = (undefined4)resultVar6;\\n\\\n        resultVar6 = FUNC_08008640(inputValue,inputThreshold,resultVar2,resultVar3);\\n\\\n        resultVar4 = (undefined4)((ulonglong)resultVar6 >> 0x20);\\n\\\n        resultVar1 = (undefined4)resultVar6;\\n\\\n        resultVar6 = FUNC_08008640(resultVar2,resultVar3,DAT_0800af40,DAT_0800af44);\\n\\\n        resultVar6 = FUNC_080082d0((int)resultVar6,(int)((ulonglong)resultVar6 >> 0x20),DAT_0800af48,DAT_0800af4c);\\n\\\n        resultVar6 = FUNC_08008640((int)resultVar6,(int)((ulonglong)resultVar6 >> 0x20),resultVar2,resultVar3);\\n\\\n        resultVar6 = FUNC_080082d4((int)resultVar6,(int)((ulonglong)resultVar6 >> 0x20),DAT_0800af50,DAT_0800af54);\\n\\\n        resultVar6 = FUNC_08008640((int)resultVar6,(int)((ulonglong)resultVar6 >> 0x20),resultVar2,resultVar3);\\n\\\n        resultVar6 = FUNC_080082d0((int)resultVar6,(int)((ulonglong)resultVar6 >> 0x20),DAT_0800af58,DAT_0800af5c);\\n\\\n        resultVar6 = FUNC_08008640((int)resultVar6,(int)((ulonglong)resultVar6 >> 0x20),resultVar2,resultVar3);\\n\\\n        resultVar6 = FUNC_080082d4((int)resultVar6,(int)((ulonglong)resultVar6 >> 0x20),DAT_0800af60,DAT_0800af64);\\n\\\n        resultVar5 = (undefined4)((ulonglong)resultVar6 >> 0x20);\\n\\\n        if (inputFlag != 0) {\\n\\\n            resultVar7 = FUNC_08008640(inputParam1,inputParam2,0,DAT_0800af70);\\n\\\n            resultVar6 = FUNC_08008640(resultVar1,resultVar4,(int)resultVar6,resultVar5);\\n\\\n            resultVar6 = FUNC_080082d0((int)resultVar7,(int)((ulonglong)resultVar7 >> 0x20),(int)resultVar6,\\n\\\n                                     (int)((ulonglong)resultVar6 >> 0x20));\\n\\\n            resultVar6 = FUNC_08008640((int)resultVar6,(int)((ulonglong)resultVar6 >> 0x20),resultVar2,resultVar3);\\n\\\n            resultVar6 = FUNC_080082d0((int)resultVar6,(int)((ulonglong)resultVar6 >> 0x20),inputParam1,inputParam2);\\n\\\n            resultVar7 = FUNC_08008640(resultVar1,resultVar4,DAT_0800af68,DAT_0800af6c);\\n\\\n            resultVar6 = FUNC_080082d4((int)resultVar6,(int)((ulonglong)resultVar6 >> 0x20),(int)resultVar7,\\n\\\n                                     (int)((ulonglong)resultVar7 >> 0x20));\\n\\\n            resultVar2 = FUNC_080082d0(inputValue,inputThreshold,(int)resultVar6,(int)((ulonglong)resultVar6 >> 0x20));\\n\\\n            return resultVar2;\\n\\\n        }\\n\\\n        resultVar6 = FUNC_08008640(resultVar2,resultVar3,(int)resultVar6,resultVar5);\\n\\\n        resultVar6 = FUNC_080082d0((int)resultVar6,(int)((ulonglong)resultVar6 >> 0x20),DAT_0800af68,DAT_0800af6c);\\n\\\n        resultVar6 = FUNC_08008640((int)resultVar6,(int)((ulonglong)resultVar6 >> 0x20),resultVar1,resultVar4);\\n\\\n        resultVar2 = FUNC_080082d4((int)resultVar6,(int)((ulonglong)resultVar6 >> 0x20),inputValue,inputThreshold);\\n\\\n        return resultVar2;\\n\\\n    }",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_08008ba0",
                "FUN_08008640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800adf0",
            "calling": [
                "FUN_08009410",
                "FUN_080096e8"
            ],
            "imported": false,
            "current_name": "calculateResultFromInputs_0800adf0"
        },
        "FUN_08003a74": {
            "renaming": {
                "FUN_08003a74": "process_data_and_update_status_flags_08003a74",
                "bVar1": "alarm_flag",
                "printAlarmMessage_08004148": "print_alarm_message",
                "print_status_message_080041a0": "print_status_message",
                "update_data_if_condition_met_0800587c": "update_data_if_condition_met",
                "update_hashes_if_not_zero_080058a0": "update_hashes_if_not_zero",
                "check_and_process_data_0800585c": "check_and_process_data"
            },
            "code": "void process_data_and_update_status_flags_08003a74(void)\n{\n  byte alarm_flags = PTR_DAT_08003b90[2];\n  if (alarm_flags != 0)\n  {\n    if ((alarm_flags & 0x60) != 0)\n    {\n      PTR_DAT_08003b90[1] = 6;\n      if ((alarm_flags & 0x40) == 0)\n      {\n        printAlarmMessage_08004148(0xfffffffe);\n      }\n      else\n      {\n        printAlarmMessage_08004148(0xffffffff);\n        print_status_message_080041a0(1);\n        PTR_DAT_08003b90[2] &= 0xef;\n        while ((PTR_DAT_08003b90[2] & 0x10) == 0);\n      }\n      PTR_DAT_08003b90[2] &= 0x9f;\n    }\n    if ((alarm_flags & 0x10) == 0)\n    {\n      if ((alarm_flags & 1) != 0)\n      {\n        print_float_values();\n        PTR_DAT_08003b90[2] &= 0xfe;\n      }\n      if ((alarm_flags & 8) != 0)\n      {\n        update_data_if_condition_met_0800587c();\n        PTR_DAT_08003b90[2] &= 0xf7;\n      }\n      if ((alarm_flags & 4) != 0)\n      {\n        update_hashes_if_not_zero();\n        PTR_DAT_08003b90[2] &= 0xfb;\n      }\n      if ((alarm_flags & 2) != 0)\n      {\n        check_and_process_data_0800585c();\n        if ((PTR_DAT_08003b94[0x28] & 2) != 0)\n        {\n          PTR_DAT_08003b90[0x10] = 1;\n        }\n        PTR_DAT_08003b90[2] &= 0xfd;\n      }\n    }\n    else\n    {\n      *PTR_DAT_08003b90 = 1;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_080058a0",
                "FUN_08004940",
                "FUN_08004148",
                "FUN_0800587c",
                "FUN_0800585c",
                "FUN_080041a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a74",
            "calling": [
                "FUN_08002fd4",
                "FUN_08003f34",
                "FUN_08001e98",
                "FUN_080024c4",
                "FUN_08002408",
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "process_data_and_update_status_flags_08003a74"
        },
        "FUN_08005cec": {
            "renaming": {
                "FUN_08005cec": "FUNC_08005cec"
            },
            "code": "\nundefined4 FUNC_08005cec(uint *param_1)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  \n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08005fac[2] & 0xc) == 4) ||\n       (((DAT_08005fac[2] & 0xc) == 8 && ((DAT_08005fac[1] & 0x400000) == 0x400000)))) {\n      if (((*DAT_08005fac & 0x20000) != 0) && (param_1[1] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      *DAT_08005fb0 = 0;\n      iVar1 = get_data_from_pointer_08005a84();\n      while ((*DAT_08005fac & 0x20000) != 0) {\n        uVar2 = get_data_from_pointer_08005a84();\n        if (iVar1 + 5000U <= uVar2) {\n          return 3;\n        }\n      }\n      *DAT_08005fb0 = (char)param_1[1];\n      if (param_1[1] == 1) {\n        iVar1 = get_data_from_pointer_08005a84();\n        while ((*DAT_08005fac & 0x20000) == 0) {\n          uVar2 = get_data_from_pointer_08005a84();\n          if (iVar1 + 5000U <= uVar2) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar1 = get_data_from_pointer_08005a84();\n        while ((*DAT_08005fac & 0x20000) != 0) {\n          uVar2 = get_data_from_pointer_08005a84();\n          if (iVar1 + 5000U <= uVar2) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08005fac[2] & 0xc) == 0) ||\n       (((DAT_08005fac[2] & 0xc) == 8 && ((DAT_08005fac[1] & 0x400000) == 0)))) {\n      if (((*DAT_08005fac & 2) != 0) && (param_1[3] != 1)) {\n        return 1;\n      }\n    }\n    else if (param_1[3] == 0) {\n      *DAT_08005fb4 = 0;\n      iVar1 = get_data_from_pointer_08005a84();\n      while ((*DAT_08005fac & 2) != 0) {\n        uVar2 = get_data_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005fb4 = 1;\n      iVar1 = get_data_from_pointer_08005a84();\n      while ((*DAT_08005fac & 2) == 0) {\n        uVar2 = get_data_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n      uVar2 = count_leading_zeroes(0x1f000000);\n      *DAT_08005fac = param_1[4] << (uVar2 & 0xff) | *DAT_08005fac & 0xffffff07;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[5] == 0) {\n      *DAT_08005fb8 = 0;\n      iVar1 = get_data_from_pointer_08005a84();\n      while ((DAT_08005fac[0x1d] & 2) != 0) {\n        uVar2 = get_data_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005fb8 = 1;\n      iVar1 = get_data_from_pointer_08005a84();\n      while ((DAT_08005fac[0x1d] & 2) == 0) {\n        uVar2 = get_data_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    DAT_08005fac[0x10] = DAT_08005fac[0x10] | 0x10000000;\n    *DAT_08005fbc = *DAT_08005fbc | 0x100;\n    iVar1 = get_data_from_pointer_08005a84();\n    while ((*DAT_08005fbc & 0x100) == 0) {\n      uVar2 = get_data_from_pointer_08005a84();\n      if (iVar1 + 100U <= uVar2) {\n        return 3;\n      }\n    }\n    *DAT_08005fc0 = 0;\n    iVar1 = get_data_from_pointer_08005a84();\n    while ((DAT_08006180[0x1c] & 2) != 0) {\n      uVar2 = get_data_from_pointer_08005a84();\n      if (iVar1 + 5000U <= uVar2) {\n        return 3;\n      }\n    }\n    *DAT_08006184 = (char)param_1[2];\n    if (param_1[2] == 1) {\n      iVar1 = get_data_from_pointer_08005a84();\n      while ((DAT_08006180[0x1c] & 2) == 0) {\n        uVar2 = get_data_from_pointer_08005a84();\n        if (iVar1 + 5000U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar1 = get_data_from_pointer_08005a84();\n      while ((DAT_08006180[0x1c] & 2) != 0) {\n        uVar2 = get_data_from_pointer_08005a84();\n        if (iVar1 + 5000U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (param_1[6] != 0) {\n    if ((DAT_08006180[2] & 0xc) == 8) {\n      return 1;\n    }\n    if (param_1[6] == 2) {\n      *DAT_08006188 = 0;\n      iVar1 = get_data_from_pointer_08005a84();\n      while ((*DAT_08006180 & 0x2000000) != 0) {\n        uVar2 = get_data_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n      uVar2 = count_leading_zeroes(0x3fe0000);\n      uVar3 = count_leading_zeroes(0xc000);\n      uVar4 = count_leading_zeroes(0xf0);\n      DAT_08006180[1] =\n           param_1[0xb] << (uVar4 & 0xff) |\n           param_1[8] | param_1[9] << (uVar2 & 0xff) | (param_1[10] >> 1) - 1 << (uVar3 & 0xff) |\n           param_1[7] | 0x20000000;\n      *DAT_08006188 = 1;\n      iVar1 = get_data_from_pointer_08005a84();\n      while ((*DAT_08006180 & 0x2000000) == 0) {\n        uVar2 = get_data_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08006188 = 0;\n      iVar1 = get_data_from_pointer_08005a84();\n      while ((*DAT_08006180 & 0x2000000) != 0) {\n        uVar2 = get_data_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_08005a84"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005cec",
            "calling": [
                "FUN_08007436"
            ],
            "imported": false,
            "current_name": "FUNC_08005cec"
        },
        "FUN_08006b00": {
            "renaming": {
                "FUN_08006b00": "set_value_08006b00",
                "param_1": "input_value",
                "param_2": "data_value",
                "DAT_08006b4c": "data_ptr_1",
                "DAT_08006b50": "data_ptr_2"
            },
            "code": "void set_value_08006b00(byte input_value, uint8_t data_value) {\n  if (input_value < 0) {\n    *(char *)((input_value & 0xf) + DAT_08006b4c + 0x14) = (char)((data_value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)input_value + DAT_08006b50 + 0x300) = (char)((data_value & 0xff) << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b00",
            "calling": [
                "FUN_08006cf6",
                "FUN_08006c9c"
            ],
            "imported": false,
            "current_name": "set_value_08006b00"
        },
        "FUN_0800b4d0": {
            "renaming": {
                "FUN_0800b4d0": "check_and_add_to_list_0800b4d0",
                "DAT_0800b4dc": "is_list_empty",
                "add_to_list_0800b524": "add_item_to_list",
                "PTR_LAB_0800b4f0_1_0800b4e0": "list_label_ptr"
            },
            "code": "void check_and_add_to_list_0800b4d0(void)\n{\n  if (DAT_0800b4dc != 0) {\n    add_item_to_list(0, PTR_LAB_0800b4f0_1_0800b4e0, 0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_0800b524"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b4d0",
            "calling": [
                "FUN_0800b3e8"
            ],
            "imported": false,
            "current_name": "check_and_add_to_list_0800b4d0"
        },
        "FUN_08007f54": {
            "renaming": {
                "FUN_08007f54": "calculate_08007f54",
                "param_1": "output_array",
                "param_2": "input_value",
                "calculate_shifted_value_and_count_leading_zeroes_08006680": "calculate_shifted_value_and_count_leading_zeroes",
                "calculate_shifted_value_080066cc": "calculate_shifted_value",
                "DAT_0800818c": "constant",
                "PTR_DAT_08008184": "pointer_1",
                "PTR_DAT_08008188": "pointer_2"
            },
            "code": "void calculate_08007f54(int value, int shift, int count) {\n  long long shifted_value;\n  int leading_zeroes;\n  shifted_value = (long long)value << shift;\n  if (shifted_value == 0) {\n    leading_zeroes = 32 - count;\n  }\n  else {\n    leading_zeroes = calculate_08007f54_leading_zeroes((unsigned int)shifted_value);\n  }\n}\n\nvoid calculate_08007f54_shifted_value_080066cc(int value, int shift) {\n  long long shifted_value;\n  shifted_value = (long long)value << shift;\n  if (shifted_value == 0) {\n    return 0;\n  }\n  return calculate_08007f54_leading_zeroes((unsigned int)shifted_value);\n}\n\nvoid calculate_08007f54_leading_zeroes(unsigned int value) {\n  int count = 0;\n  while ((value & 0x80000000) == 0) {\n    count++;\n    value <<= 1;\n  }\n  return count;\n}\n\nvoid calculate_08007f54(uint32_t* param_1, uint32_t param_2) {\n  if ((*param_1 & 0x8000) == 0) {\n    if ((param_1 != PTR_DAT_08008184) && (param_1 != PTR_DAT_08008188)) {\n      int shifted_value = calculate_08007f54(param_2, 2, 5);\n      long long lVar1 = (long long)DAT_0800818c * ((long long)shifted_value * 25 / (long long)(param_2 << 2));\n      int iVar2 = calculate_08007f54(shifted_value, (int)(lVar1 >> 32), (int)lVar1);\n      int iVar3 = calculate_08007f54(0, 0, 0);\n      *param_1 = ((uint32_t)lVar1 >> 37) << 4 | ((uint32_t)DAT_0800818c * ((iVar2 * 25 / (param_2 << 2)) + ((uint32_t)DAT_0800818c * ((iVar3 * 25 / (param_2 << 2)) >> 37) * -100) * 16 + 50) >> 37) & 0xf;\n    }\n    else {\n      int shifted_value = calculate_08007f54_shifted_value_080066cc(param_2, 2);\n      long long lVar1 = (long long)DAT_0800818c * ((long long)shifted_value * 25 / (long long)(param_2 << 2));\n      int iVar2 = calculate_08007f54_shifted_value_080066cc(shifted_value, (int)(lVar1 >> 32));\n      int iVar3 = calculate_08007f54_shifted_value_080066cc(0, 0);\n      *param_1 = ((uint32_t)lVar1 >> 37) << 4 | ((uint32_t)DAT_0800818c * ((iVar2 * 25 / (param_2 << 2)) + ((uint32_t)DAT_0800818c * ((iVar3 * 25 / (param_2 << 2)) >> 37) * -100) * 16 + 50) >> 37) & 0xf;\n    }\n  }\n  else {\n    if ((param_1 != PTR_DAT_08008184) && (param_1 != PTR_DAT_08008188)) {\n      int shifted_value = calculate_08007f54(param_2, 1, 5);\n      long long lVar1 = (long long)DAT_0800818c * ((long long)shifted_value * 25 / (long long)(param_2 << 1));\n      int iVar2 = calculate_08007f54(shifted_value, (int)(lVar1 >> 32), (int)lVar1);\n      int iVar3 = calculate_08007f54(0, 0, 0);\n      *param_1 = ((uint32_t)lVar1 >> 37) << 4 | ((uint32_t)DAT_0800818c * ((iVar2 * 25 / (param_2 << 1)) + ((uint32_t)DAT_0800818c * ((iVar3 * 25 / (param_2 << 1)) >> 37) * -100) * 16 + 50) >> 37) & 0xf;\n    }\n    else {\n      int shifted_value = calculate_08007f54_shifted_value_080066cc(param_2, 1);\n      long long lVar1 = (long long)DAT_0800818c * ((long long)shifted_value * 25 / (long long)(param_2 << 1));\n      int iVar2 = calculate_08007f54_shifted_value_080066cc(shifted_value, (int)(lVar1 >> 32));\n      int iVar3 = calculate_08007f54_shifted_value_080066cc(0, 0);\n      *param_1 = ((uint32_t)lVar1 >> 37) << 4 | ((uint32_t)DAT_0800818c * ((iVar2 * 25 / (param_2 << 1)) + ((uint32_t)DAT_0800818c * ((iVar3 * 25 / (param_2 << 1)) >> 37) * -100) * 16 + 50) >> 37) & 0xf;\n    }\n  }\n}",
            "called": [
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f54",
            "calling": [
                "FUN_08008190"
            ],
            "imported": false,
            "current_name": "calculate_08007f54"
        },
        "FUN_08003b98": {
            "renaming": {
                "FUN_08003b98": "process_command_08003b98",
                "param_1": "command",
                "bVar1": "first_char",
                "iVar2": "index",
                "uVar3": "value",
                "uVar4": "result",
                "uVar5": "hash",
                "local_14": "second_value",
                "local_10": "length",
                "local_a": "index",
                "local_9": "buffer_index",
                "PTR_DAT_08003f2c": "flag_ptr",
                "PTR_DAT_08003f30": "config",
                "execute_standard_command": "execute_standard_command",
                "process_grbl_settings_view_0800423c": "process_grbl_settings_view",
                "process_data_and_print_results_080044e8": "process_data_and_print_results",
                "print_configurations_08004250": "print_configurations",
                "set_flag_and_check_080025e8": "set_flag_and_check",
                "print_status_message_080041a0": "print_status_message",
                "process_data_080046d0": "process_data",
                "validate_buffer_and_write_to_08004d2c_08004d2c": "validate_buffer_and_write_to",
                "process_data_and_wait_for_input_08004900": "process_data_and_wait_for_input",
                "convert_string_to_uint32_08002638": "convert_string_to_uint32",
                "convert_to_signed_int_08009278": "convert_to_signed_int",
                "execute_custom_command": "execute_custom_command",
                "execute_custom_command_with_buffer": "execute_custom_command_with_buffer",
                "calculate_hash_08008590": "calculate_hash",
                "calculate_double_to_longlong_08009798": "calculate_double_to_longlong",
                "calculate_shift_amount_08008bf0": "calculate_shift_amount",
                "write_to_buffer_with_sum_and_offset_08004bc0": "write_to_buffer_with_sum_and_offset"
            },
            "code": "uint process_command_08003b98(char *command)\n{\n  uint status = 0;\n  byte first_char = command[0];\n  if (first_char != '$') {\n    status = execute_standard_command(command);\n  }\n  else {\n    byte second_char = command[1];\n    if (second_char == 0) {\n      process_grbl_settings_view_0800423c();\n    }\n    else {\n      switch(second_char) {\n        case 0x23:\n          if (command[2] != '\\0') {\n            status = 3;\n          }\n          else {\n            process_data_and_print_results();\n          }\n          break;\n        case 0x24:\n          if (command[2] != '\\0') {\n            status = 3;\n          }\n          else {\n            print_PTR_DAT_08003f30urations();\n          }\n          break;\n        case 0x43:\n          if (command[2] != '\\0') {\n            status = 3;\n          }\n          else {\n            if (flag == 7) {\n              set_flag_and_check_080025e8();\n              print_status_message_080041a0(5);\n            }\n            else {\n              if (flag != 0) {\n                status = 11;\n              }\n              else {\n                flag = 7;\n                print_status_message_080041a0(4);\n              }\n            }\n          }\n          break;\n        case 0x47:\n          if (command[2] != '\\0') {\n            status = 3;\n          }\n          else {\n            process_data();\n          }\n          break;\n        case 0x48:\n          if ((PTR_DAT_08003f30[0x28] & 0x10) == 0) {\n            status = 7;\n          }\n          else {\n            if ((flag != 0) && (flag != 6)) {\n              status = 11;\n            }\n            else {\n              process_data_and_set_status_flags();\n              if (*PTR_DAT_08003f2c == '\\0') {\n                validate_and_write_to_buffer();\n              }\n            }\n          }\n          break;\n        case 0x4e:\n          if (command[2] == '\\0') {\n            for (byte i = 0; i < 2; i++) {\n              uint validate_status = validate_buffer_and_write_to(i, command);\n              if (validate_status == 0) {\n                print_error_message(10);\n              }\n              else {\n                process_data_and_wait_for_input_08004900(i, command);\n              }\n            }\n          }\n          else {\n            status = 3;\n          }\n          break;\n        case 0x58:\n          if (command[2] != '\\0') {\n            status = 3;\n          }\n          else {\n            if (flag == 6) {\n              print_status_message_080041a0(3);\n              flag = 0;\n            }\n          }\n          break;\n        default:\n          uint value;\n          uint index = 0;\n          uint length = convert_string_to_uint32(command, &index, &value);\n          if (length == 0) {\n            status = 1;\n          }\n          else {\n            if (command[index] != '=') {\n              status = 3;\n            }\n            else {\n              index++;\n              if (flag == 0) {\n                uint second_value;\n                uint second_length = convert_string_to_uint32(command, &index, &second_value);\n                if (second_length == 0) {\n                  status = 1;\n                }\n                else {\n                  if (command[index] == '\\0') {\n                    int signed_value = convert_to_signed_int_08009278(value);\n                    uint result = execute_custom_command(signed_value, second_value);\n                    return result;\n                  }\n                  else {\n                    status = 3;\n                  }\n                }\n              }\n              else {\n                for (uint i = index; command[i] != '\\0'; i++) {\n                  command[i - index] = command[i];\n                }\n                length = length - index;\n                index = 0;\n                status = execute_custom_command_with_buffer(length, command);\n                if (status == 0) {\n                  uint hash = calculate_hash_08008590(value);\n                  uint shifted = calculate_shift_amount_08008bf0(hash);\n                  write_to_buffer_with_sum_and_offset_08004bc0(shifted, command);\n                }\n              }\n            }\n          }\n      }\n    }\n  }\n  return status;\n}",
            "called": [
                "FUN_080046d0",
                "FUN_08008590",
                "FUN_08004bc0",
                "FUN_080039bc",
                "FUN_08008bf0",
                "FUN_0800423c",
                "FUN_08004030",
                "FUN_08009278",
                "FUN_08002638",
                "FUN_08004e30",
                "FUN_080025e8",
                "FUN_08004250",
                "FUN_08004d2c",
                "FUN_080005b4",
                "FUN_08009798",
                "FUN_080024c4",
                "FUN_080041a0",
                "FUN_08004900",
                "FUN_080044e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003b98",
            "calling": [
                "FUN_08003f34"
            ],
            "imported": false,
            "current_name": "process_command_08003b98"
        },
        "FUN_080024c4": {
            "renaming": {
                "FUN_080024c4": "process_data_and_set_status_flags_080024c4",
                "local_13": "isFlagEnabled3",
                "local_12": "isFlagEnabled2",
                "local_11": "isFlagEnabled1",
                "uVar1": "flag1",
                "uVar2": "flag2",
                "uVar3": "flag3",
                "PTR_DAT_080025d8": "dataPointer",
                "PTR_DAT_080025dc": "statusFlag",
                "PTR_DAT_080025e0": "bufferPointer",
                "PTR_DAT_080025e4": "dataPointer2"
            },
            "code": "void process_data_and_set_status_flags_080024c4()\\n{\\n  int flag1;\\n  int flag2;\\n  int flag3;\\n  char isFlagEnabled1;\\n  char isFlagEnabled2;\\n  char isFlagEnabled3;\\n  \\n  PTR_DAT_080025d8[1] = 5;\\n  *(undefined4 *)PTR_DAT_080025dc = 0;\\n  process_and_clear_data();\\n  process_data_and_update_status_flags();\\n  if (*PTR_DAT_080025d8 == \"\\0\") {\\n    write_buffer_0800b430(PTR_DAT_080025e0,0,0xc);\\n    set_params_and_calculate_hashes();\\n    PTR_DAT_080025d8[1] = 0;\\n    isFlagEnabled1 = (*(ushort *)(PTR_DAT_080025e4 + 0x2a) & 0x20) == 0 ? -1 : 1;\\n    isFlagEnabled2 = (*(ushort *)(PTR_DAT_080025e4 + 0x2a) & 0x80) == 0 ? -1 : 1;\\n    isFlagEnabled3 = (*(ushort *)(PTR_DAT_080025e4 + 0x2a) & 0x200) == 0 ? -1 : 1;\\n    flag1 = calculate_hash_with_flag(isFlagEnabled1);\\n    flag1 = FUNC_08008eec(flag1,*(undefined4 *)(PTR_DAT_080025e4 + 0x38));\\n    flag2 = calculate_hash_with_flag(isFlagEnabled2);\\n    flag2 = FUNC_08008eec(flag2,*(undefined4 *)(PTR_DAT_080025e4 + 0x38));\\n    flag3 = calculate_hash_with_flag(isFlagEnabled3);\\n    flag3 = FUNC_08008eec(flag3,*(undefined4 *)(PTR_DAT_080025e4 + 0x38));\\n    process_data_and_update_status_flags_08001e98(flag1,flag2,flag3,*(undefined4 *)(PTR_DAT_080025e4 + 0x30),0);\\n    check_and_process_data();\\n    process_until_data_pointer_is_zero_or_status_flag_is_true();\\n    set_params_and_calculate_hashes();\\n    if ((PTR_DAT_080025e4[0x28] & 8) != 0) {\\n      *(undefined4 *)PTR_DAT_080025dc = 1;\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08002fd4",
                "FUN_08001d4c",
                "FUN_0800283a",
                "FUN_08008e44",
                "FUN_08001e98",
                "FUN_0800585c",
                "FUN_0800b430",
                "FUN_08008eec",
                "FUN_08003a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080024c4",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "process_data_and_set_status_flags_080024c4"
        },
        "FUN_08002f40": {
            "renaming": {
                "FUN_08002f40": "check_and_wrap_around_08002f40",
                "*PTR_DAT_08002f6c": "*current_value",
                "*PTR_DAT_08002f70": "*max_value",
                "uVar1": "wrapped_value",
                "increment_and_wrap_around_08002870": "increment_and_wrap_around"
            },
            "code": "void check_and_wrap_around_08002f40(void)\n{\n  if (*PTR_DAT_08002f6c != *PTR_DAT_08002f70) {\n    undefined wrapped_value = increment_and_wrap_around(*PTR_DAT_08002f70);\n    *PTR_DAT_08002f70 = wrapped_value;\n  }\n  return;\n}",
            "called": [
                "FUN_08002870"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f40",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "check_and_wrap_around_08002f40"
        },
        "FUN_08009054": {
            "renaming": {
                "FUN_08009054": "FUNC_08009054"
            },
            "code": "\nuint FUNC_08009054(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_0800904a:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_08009000:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_0800906c;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_0800906c:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009054",
            "calling": [
                "FUN_08004250",
                "FUN_08001994",
                "FUN_080004fc",
                "FUN_08004940",
                "FUN_08002908",
                "FUN_08002e08",
                "FUN_080028bc",
                "FUN_08003004",
                "FUN_08003618",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "FUNC_08009054"
        },
        "FUN_080025e8": {
            "renaming": {
                "FUN_080025e8": "set_flag_and_check_080025e8",
                "PTR_DAT_08002634": "status_flags",
                "do_nothing_and_return_08005250": "do_nothing_and_return",
                "do_nothing_twice_08000210": "do_nothing_twice",
                "byte": "byte",
                "clear_bits_and_check_flag_080057e4": "clear_bits_and_check_flag"
            },
            "code": "void set_flag_and_check_080025e8(void)\n{\n  if ((PTR_DAT_08002634[2] & 0x10) == 0) {\n    PTR_DAT_08002634[2] |= 0x10;\n    do_nothing_and_return();\n    do_nothing_twice();\n    if ((byte)PTR_DAT_08002634[1] - 3 < 3) {\n      PTR_DAT_08002634[2] |= 0x20;\n      clear_bits_and_check_flag();\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08005250",
                "FUN_080057e4",
                "FUN_08000210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e8",
            "calling": [
                "FUN_08005900",
                "FUN_080005b4",
                "FUN_08003b98",
                "FUN_0800195c",
                "FUN_08003a18"
            ],
            "imported": false,
            "current_name": "set_flag_and_check_080025e8"
        },
        "FUN_080001c8": {
            "renaming": {
                "FUN_080001c8": "do_nothing_080001c8"
            },
            "code": "\nvoid do_nothing_080001c8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001c8",
            "calling": [
                "FUN_08000220"
            ],
            "imported": false,
            "current_name": "do_nothing_080001c8"
        },
        "FUN_08005250": {
            "renaming": {
                "FUN_08005250": "do_nothing_and_return_08005250",
                "do_nothing_08005214": "do_nothing"
            },
            "code": "void do_nothing_and_return_08005250(void)\n{\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08005214"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005250",
            "calling": [
                "FUN_080025e8",
                "FUN_0800525c",
                "FUN_08005238"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08005250"
        },
        "FUN_08007430": {
            "renaming": {
                "FUN_08007430": "infinite_loop_08007430"
            },
            "code": "void infinite_loop_08007430(void)\n{\n  while( true )\n  {\n    // Do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007430",
            "calling": [
                "FUN_08007436"
            ],
            "imported": false,
            "current_name": "infinite_loop_08007430"
        },
        "FUN_08008640": {
            "renaming": {
                "FUN_08008640": "FUNC_08008640"
            },
            "code": "\nulonglong FUNC_08008640(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = calculate_hash_0800881c();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_0800881c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008640",
            "calling": [
                "FUN_080046d0",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_08009d78",
                "FUN_08003004",
                "FUN_0800056c",
                "FUN_0800b2e8",
                "FUN_08002638",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_08002c18",
                "FUN_08001994",
                "FUN_0800a1bc",
                "FUN_0800a348",
                "FUN_0800a5a0",
                "FUN_0800adf0",
                "FUN_080044e8"
            ],
            "imported": false,
            "current_name": "FUNC_08008640"
        },
        "FUN_08007436": {
            "renaming": {
                "FUN_08007436": "set_flags_and_validate_inputs_08007436",
                "local_4c": "var_1",
                "local_48": "var_2",
                "local_34": "var_3",
                "local_30": "var_4",
                "local_2c": "var_5",
                "local_28": "var_6",
                "local_24": "var_7",
                "local_20": "var_8",
                "local_1c": "var_9",
                "local_18": "var_10",
                "local_14": "var_11",
                "local_10": "var_12",
                "local_c": "var_13",
                "DAT_080074c0": "flag_ptr_1",
                "DAT_080074c4": "flag_ptr_2",
                "PTR_FUN_08005cec": "FUNC_08005cec",
                "PTR_FUN_0800618c": "validate_and_shift_0800618c"
            },
            "code": "void set_flags_and_validate_inputs_08007436(void)\n{\n  int validation_result;\n  uint *DAT_080074c0 = (uint *)(DAT_080074c0 + 0x40);\n  ushort *DAT_080074c4 = (ushort *)DAT_080074c4;\n  uint flag_value_1 = 0x10000000;\n  ushort flag_value_2 = 0xc000;\n  uint var_1 = 1;\n  uint var_2 = 1;\n  uint var_3 = 2;\n  uint var_4 = 0x400000;\n  uint var_5 = 8;\n  uint var_6 = 0x150;\n  uint var_7 = 2;\n  uint var_8 = 7;\n  uint var_9 = 0xf;\n  uint var_10 = 2;\n  uint var_11 = 0;\n  uint var_12 = 0x1400;\n  uint var_13 = 0x1000;\n  *DAT_080074c0 = *DAT_080074c0 | flag_value_1;\n  *DAT_080074c4 = *DAT_080074c4 | flag_value_2;\n  validation_result = PTR_FUN_08005cec(&var_1);\n  if (validation_result != 0) {\n    infinite_loop_08007430();\n  }\n  validation_result = PTR_FUN_0800618c(&var_9, 5);\n  if (validation_result != 0) {\n    infinite_loop_08007430();\n  }\n}\n",
            "called": [
                "FUN_0800618c",
                "FUN_08005cec",
                "FUN_08007430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007436",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "set_flags_and_validate_inputs_08007436"
        },
        "FUN_08005814": {
            "renaming": {
                "FUN_08005814": "write_and_calculate_08005814",
                "PTR_DAT_08005834": "PTR_MESSAGE",
                "calculate_local_param_08005324": "calculate_local_param",
                "800": "PARAMETER_VALUE",
                "PTR_DAT_08005838": "PTR_FLAG"
            },
            "code": "void write_and_calculate_08005814(void)\n{\n  write_buffer(PTR_DAT_08005834, 0, MESSAGE_LENGTH);\n  calculate_local_param(PARAMETER_VALUE);\n  *(undefined4 *)PTR_DAT_08005838 = 0;\n  return;\n}",
            "called": [
                "FUN_08005324",
                "FUN_0800b430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005814",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "write_and_calculate_08005814"
        },
        "FUN_08005bdc": {
            "renaming": {
                "FUN_08005bdc": "update_value_08005bdc",
                "param_1": "value",
                "param_2": "number",
                "DAT_08005c28": "data_array_1",
                "DAT_08005c2c": "data_array_2"
            },
            "code": "void update_value_08005bdc(byte value, uint number)\n{\n    if (value < 0)\n    {\n        *(char *)((value & 0xf) + DAT_08005c28 + 0x14) = (char)((number & 0xff) << 4);\n    }\n    else\n    {\n        *(char *)((char)value + DAT_08005c2c + 0x300) = (char)((number & 0xff) << 4);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bdc",
            "calling": [
                "FUN_08005c30"
            ],
            "imported": false,
            "current_name": "update_value_08005bdc"
        },
        "FUN_080002f0": {
            "renaming": {
                "FUN_080002f0": "write_to_buffer_080002f0",
                "PTR_DAT_08000308": "buffer",
                "PTR_DAT_0800030c": "data_ptr",
                "uint8_t": "uint8_t",
                "uint32_t": "uint32_t",
                "write_buffer_0800b430": "write_buffer_0800b430"
            },
            "code": "void write_to_buffer_080002f0(void)\n{\n    uint8_t data = 0xff;\n    uint8_t size = 4;\n    char* PTR_DAT_08000308 = PTR_DAT_08000308;\n    write_PTR_DAT_08000308_0800b430(PTR_DAT_08000308, data, size);\n    *(uint32_t*)PTR_DAT_0800030c = 1;\n    return;\n}",
            "called": [
                "FUN_0800b430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002f0",
            "calling": [
                "FUN_08000374",
                "FUN_08000310",
                "FUN_08000340",
                "FUN_080003ec"
            ],
            "imported": false,
            "current_name": "write_to_buffer_080002f0"
        },
        "FUN_080073c0": {
            "renaming": {
                "FUN_080073c0": "do_nothing_080073c0"
            },
            "code": "\nvoid do_nothing_080073c0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073c0",
            "calling": [
                "FUN_0800738e"
            ],
            "imported": false,
            "current_name": "do_nothing_080073c0"
        },
        "FUN_0800778c": {
            "renaming": {
                "FUN_0800778c": "set_bits_and_parameter_values_0800778c",
                "local_24": "bit_shift",
                "local_20": "address_1",
                "local_1c": "address_2",
                "local_18": "address_3",
                "local_14": "address_4",
                "local_10": "data_pointer",
                "local_c": "loop_counter",
                "set_bits_08006e88": "set_bits",
                "set_parameter_value_0800733e": "set_parameter_value",
                "PTR_DAT_0800784c": "data_pointer_table",
                "DAT_08007850": "data_table"
            },
            "code": "void set_bits_and_parameter_values_0800778c() {\n  int bit_shift;\n  uint mask;\n  uint address_1;\n  uint address_2;\n  uint address_3;\n  uint address_4;\n  uint *data_pointer;\n  uint loop_counter;\n  uint parameter_value;\n  for (loop_counter = 0; loop_counter < 0x11; loop_counter++) {\n    data_pointer = (uint *)(PTR_DAT_0800784c + loop_counter * 0x18);\n    mask = 1 << (*data_pointer >> 4 & 0xff);\n    *(uint *)(DAT_08007850 + 0x30) |= mask;\n    bit_shift = *data_pointer & 0xf;\n    address_1 = data_pointer[1];\n    address_2 = data_pointer[2];\n    address_3 = data_pointer[3];\n    address_4 = data_pointer[4];\n    set_bits_08006e88(((*data_pointer >> 4) + 0x100080) * 0x400, &(1 << bit_shift));\n    if ((int)data_pointer[5] >= -1) {\n      parameter_value = 1 << bit_shift & 0xffff;\n      set_parameter_value_0800733e(((*data_pointer >> 4) + 0x100080) * 0x400, parameter_value, data_pointer[5] & 0xff);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_0800733e",
                "FUN_08006e88"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800778c",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "set_bits_and_parameter_values_0800778c"
        },
        "FUN_080001d4": {
            "renaming": {
                "FUN_080001d4": "do_nothing_080001d4"
            },
            "code": "\nvoid do_nothing_080001d4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001d4",
            "calling": [
                "FUN_08000210"
            ],
            "imported": false,
            "current_name": "do_nothing_080001d4"
        },
        "FUN_08001ddc": {
            "renaming": {
                "FUN_08001ddc": "process_data_and_update_flags_08001ddc",
                "validate_inputs_and_write_buffers_080051b4": "validate_inputs_and_write_buffers",
                "process_data_and_clear_bits_0800583c_0800583c": "clear_data_bits",
                "write_buffer_0800b430": "write_to_buffer",
                "PTR_DAT_08001e90": "PTR_DATA",
                "PTR_DAT_08001e94": "PTR_DATA2",
                "do_nothing_08008244": "do_nothing",
                "do_nothing_080082ba": "do_nothing",
                "copy_and_wrap_around_buffer_08002f24": "copy_and_wrap_around_buffer",
                "write_data_to_buffer_080004ac": "write_data_to_buffer",
                "initialize_program_080039a0": "initialize_program",
                "clear_pointer_08005238": "clear_pointer",
                "reset_pointer_080001f8": "reset_pointer",
                "check_bitwise_flag_0800192c": "check_bitwise_flag",
                "write_and_calculate_08005814": "write_and_calculate",
                "set_params_and_calculate_hashes_0800283a": "set_params_and_calculate_hashes",
                "print_status_message_080041a0": "print_status_message",
                "validate_and_write_to_buffer_080039bc": "validate_and_write_to_buffer",
                "process_data_and_update_status_flags_08003a74": "process_data_and_update_status_flags",
                "process_input_string_08003f34": "process_input_string"
            },
            "code": "void process_data_and_update_flags_08001ddc(void)\n{\n  do_nothing_08008244();\n  validate_inputs_and_write_buffers();\n  process_data_and_clear_bits_0800583c_0800583c();\n  write_buffer_0800b430(PTR_DAT_08001e90, 0, 0x14);\n  *PTR_DAT_08001e90 = 1;\n  PTR_DAT_08001e90[1] = 1;\n  do {\n    if (*PTR_DAT_08001e90 != '\\0') {\n      do_nothing_080082ba();\n      copy_and_wrap_around_buffer_08002f24();\n      write_data_to_buffer();\n      initialize_program_080039a0();\n      clear_pointer_08005238();\n      reset_pointer_080001f8();\n      check_bitwise_flag_0800192c();\n      write_and_calculate_08005814();\n      set_params_and_calculate_hashes_0800283a();\n      *PTR_DAT_08001e90 = 0;\n      PTR_DAT_08001e90[2] = 0;\n      if ((PTR_DAT_08001e94[0x28] & 2) != 0) {\n        PTR_DAT_08001e90[0x10] = 1;\n      }\n      if ((PTR_DAT_08001e90[1] == '\\x01') && ((PTR_DAT_08001e94[0x28] & 0x10) != 0)) {\n        PTR_DAT_08001e90[1] = 6;\n      }\n      if (PTR_DAT_08001e90[1] == '\\x06') {\n        print_status_message_080041a0(2);\n      }\n      else {\n        PTR_DAT_08001e90[1] = 0;\n        validate_and_write_buffer_0800b430();\n      }\n    }\n    process_data_and_update_status_flags();\n    process_input_string();\n  } while( true );\n}",
            "called": [
                "FUN_080039a0",
                "FUN_0800283a",
                "FUN_080039bc",
                "FUN_0800583c",
                "FUN_080001f8",
                "FUN_080004ac",
                "FUN_080051b4",
                "FUN_08005814",
                "FUN_0800b430",
                "FUN_08002f24",
                "FUN_080082ba",
                "FUN_08003a74",
                "FUN_08008244",
                "FUN_08003f34",
                "FUN_08005238",
                "FUN_0800192c",
                "FUN_080041a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ddc",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "process_data_and_update_flags_08001ddc"
        },
        "FUN_080069b4": {
            "renaming": {
                "FUN_080069b4": "set_bit_in_array_080069b4",
                "param_1": "bit_position",
                "PTR_DAT_080069e0": "array_ptr",
                "DAT_080069e0": "array_start"
            },
            "code": "void set_bit_in_array_080069b4(uint8_t bit_position)\n{\n    uint32_t* PTR_DAT_080069e0 = (uint32_t*)(DAT_080069e0 + (bit_position >> 5) * 4);\n    uint32_t bit_mask = 1 << (bit_position & 0x1f);\n    *PTR_DAT_080069e0 = bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069b4",
            "calling": [
                "FUN_08006d2e"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_080069b4"
        },
        "FUN_08009228": {
            "renaming": {
                "FUN_08009228": "is_input_empty_08009228",
                "in_CY": "input_char"
            },
            "code": "bool is_input_empty_08009228(void)\n{\n  char input_char;\n  calculate_and_concatenate_results();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_08009204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009228",
            "calling": [
                "FUN_08002afc",
                "FUN_080005b4",
                "FUN_08003826",
                "FUN_080029d8",
                "FUN_08003004",
                "FUN_08004e30"
            ],
            "imported": false,
            "current_name": "is_input_empty_08009228"
        },
        "FUN_08007c7c": {
            "renaming": {
                "FUN_08007c7c": "update_parameters_if_set_08007c7c",
                "_DAT_40000010": "config_register",
                "_DAT_4000000c": "control_register",
                "update_parameter_from_pointer_08005778": "update_parameter_from_pointer",
                "update_parameter_from_pointer_08005760": "update_parameter_from_pointer",
                "FUNC_080053a0": "execute_control_function"
            },
            "code": "void update_parameters_if_set_08007c7c(void)\n{\n  if (((_DAT_40000010 & 0x2) != 0) && ((_DAT_4000000c & 0x2) != 0)) {\n    _DAT_40000010 &= 0xfffffffd;\n    update_parameter_from_pointer();\n  }\n  if (((_DAT_40000010 & 0x4) != 0) && ((_DAT_4000000c & 0x4) != 0)) {\n    _DAT_40000010 &= 0xfffffffb;\n    update_parameter_from_pointer();\n  }\n  if (((_DAT_40000010 & 0x1) != 0) && ((_DAT_4000000c & 0x1) != 0)) {\n    _DAT_40000010 &= 0xfffffffe;\n    execute_control_function();\n  }\n  return;\n}",
            "called": [
                "FUN_080053a0",
                "FUN_08005778",
                "FUN_08005760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007c7c",
            "calling": [],
            "imported": false,
            "current_name": "update_parameters_if_set_08007c7c"
        },
        "FUN_08007b70": {
            "renaming": {
                "FUN_08007b70": "update_flags_08007b70",
                "_DAT_40000034": "ptr_flag1",
                "_DAT_40000038": "ptr_flag2",
                "_DAT_4000000c": "ptr_flags",
                "_DAT_40000000": "ptr_control",
                "local_c": "local_flag"
            },
            "code": "void update_flags_08007b70(void)\n{\n  uint8_t local_flag = 1;\n  if (_DAT_40000034 != 0) {\n    local_flag = 3;\n  }\n  if (_DAT_40000038 != 0) {\n    local_flag |= 4;\n  }\n  _DAT_4000000c |= local_flag;\n  _DAT_40000000 |= 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007b70",
            "calling": [
                "FUN_08005790"
            ],
            "imported": false,
            "current_name": "update_flags_08007b70"
        },
        "FUN_08004d2c": {
            "renaming": {
                "FUN_08004d2c": "validate_buffer_and_write_to_08004d2c_08004d2c",
                "param_1": "buffer_size",
                "param_2": "buffer_data",
                "iVar1": "is_valid"
            },
            "code": "bool validate_buffer_and_write_to_08004d2c_08004d2c(int buffer_size, byte* buffer_data)\n{\n  int is_valid = validate_buffer_080003ec(buffer_data, (ushort)buffer_size * 0x101 + 0x300, 0x100);\n  if (is_valid == 0) {\n    *buffer_data = 0;\n    write_to_buffer_with_sum_and_offset_08004bc0(buffer_size, buffer_data);\n  }\n  return is_valid != 0;\n}",
            "called": [
                "FUN_08004bc0",
                "FUN_080003ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d2c",
            "calling": [
                "FUN_080039bc",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "validate_buffer_and_write_to_08004d2c_08004d2c"
        },
        "FUN_08003004": {
            "renaming": {
                "FUN_08003004": "FUNC_08003004"
            },
            "code": "\nvoid FUNC_08003004(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 char param_5)\n\n{\n  undefined *puVar1;\n  undefined uVar2;\n  undefined4 uVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  undefined4 uVar9;\n  undefined4 uVar10;\n  uint uVar11;\n  ushort *puVar12;\n  int iVar13;\n  uint uVar14;\n  undefined8 uVar15;\n  undefined8 uVar16;\n  undefined8 uVar17;\n  undefined4 local_20;\n  undefined4 local_1c;\n  \n  puVar12 = (ushort *)(PTR_DAT_08003234 + (uint)(byte)*PTR_DAT_08003230 * 0x40);\n  uVar3 = FUNC_08008eec(*(undefined4 *)PTR_DAT_08003238,param_1);\n  uVar15 = calculate_hash_08008590(uVar3);\n  iVar4 = convert_to_signed_fixed_point_080095b8((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n  uVar3 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08003238 + 4),param_2);\n  uVar15 = calculate_hash_08008590(uVar3);\n  iVar5 = convert_to_signed_fixed_point_080095b8((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n  uVar3 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08003238 + 8),param_3);\n  uVar15 = calculate_hash_08008590(uVar3);\n  iVar6 = convert_to_signed_fixed_point_080095b8((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n  *puVar12 = 0;\n  if (iVar4 < *(int *)PTR_DAT_0800323c) {\n    *puVar12 = *puVar12 | 0x20;\n  }\n  if (iVar5 < *(int *)(PTR_DAT_0800323c + 4)) {\n    *puVar12 = *puVar12 | 0x880;\n  }\n  if (iVar6 < *(int *)(PTR_DAT_0800323c + 8)) {\n    *puVar12 = *puVar12 | 0x200;\n  }\n  iVar13 = iVar4 - *(int *)PTR_DAT_0800323c;\n  if (iVar13 < 0) {\n    iVar13 = -iVar13;\n  }\n  *(int *)(puVar12 + 2) = iVar13;\n  iVar13 = iVar5 - *(int *)(PTR_DAT_0800323c + 4);\n  if (iVar13 < 0) {\n    iVar13 = -iVar13;\n  }\n  *(int *)(puVar12 + 4) = iVar13;\n  iVar13 = iVar6 - *(int *)(PTR_DAT_0800323c + 8);\n  if (iVar13 < 0) {\n    iVar13 = -iVar13;\n  }\n  *(int *)(puVar12 + 6) = iVar13;\n  uVar11 = *(uint *)(puVar12 + 6);\n  if (*(uint *)(puVar12 + 6) < *(uint *)(puVar12 + 4)) {\n    uVar11 = *(uint *)(puVar12 + 4);\n  }\n  uVar14 = *(uint *)(puVar12 + 2);\n  if (*(uint *)(puVar12 + 2) < uVar11) {\n    uVar14 = uVar11;\n  }\n  *(uint *)(puVar12 + 8) = uVar14;\n  if (*(int *)(puVar12 + 8) != 0) {\n    uVar3 = calculate_hash_08008e44(iVar4 - *(int *)PTR_DAT_0800323c);\n    uVar3 = FUNC_08009054(uVar3,*(undefined4 *)PTR_DAT_08003238);\n    uVar7 = calculate_hash_08008e44(iVar5 - *(int *)(PTR_DAT_0800323c + 4));\n    uVar7 = FUNC_08009054(uVar7,*(undefined4 *)(PTR_DAT_08003238 + 4));\n    uVar8 = calculate_hash_08008e44(iVar6 - *(int *)(PTR_DAT_0800323c + 8));\n    uVar8 = FUNC_08009054(uVar8,*(undefined4 *)(PTR_DAT_08003238 + 8));\n    uVar9 = FUNC_08008eec(uVar3,uVar3);\n    uVar10 = FUNC_08008eec(uVar7,uVar7);\n    uVar9 = FUNC_08008cdc(uVar9,uVar10);\n    uVar10 = FUNC_08008eec(uVar8,uVar8);\n    uVar9 = FUNC_08008cdc(uVar9,uVar10);\n    uVar15 = calculate_hash_08008590(uVar9);\n    uVar15 = process_input_080098d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n    uVar9 = calculate_float_bits_08008c30((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n    *(undefined4 *)(puVar12 + 0x10) = uVar9;\n    uVar9 = FUNC_08009054(0x3f800000,*(undefined4 *)(puVar12 + 0x10));\n    if (param_5 == '\\0') {\n      local_1c = FUNC_08008eec(param_4,uVar9);\n    }\n    else {\n      local_1c = FUNC_08009054(0x3f800000,param_4);\n    }\n    uVar10 = FUNC_08008eec(*(undefined4 *)(puVar12 + 0x10),local_1c);\n    *(undefined4 *)(puVar12 + 10) = uVar10;\n    uVar10 = calculate_hash_08008e44(*(undefined4 *)(puVar12 + 8));\n    uVar10 = FUNC_08008eec(uVar10,local_1c);\n    uVar15 = calculate_hash_08008590(uVar10);\n    uVar15 = calculate_result_08009318((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n    uVar10 = calculate_shift_amount_08008bf0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n    *(undefined4 *)(puVar12 + 0x1e) = uVar10;\n    uVar10 = calculate_hash_08008e44(*(undefined4 *)(puVar12 + 8));\n    uVar10 = FUNC_08008eec(uVar10,uVar9);\n    uVar10 = FUNC_08008eec(uVar10,*(undefined4 *)(PTR_DAT_08003560 + 0x20));\n    uVar10 = FUNC_08009054(uVar10,DAT_08003564);\n    uVar15 = calculate_hash_08008590(uVar10);\n    uVar15 = calculate_result_08009318((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n    uVar10 = ConvertToSignedFixedPoint_08008ba0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n    *(undefined4 *)(puVar12 + 0x18) = uVar10;\n    uVar3 = FUNC_08008eec(uVar3,uVar9);\n    uVar7 = FUNC_08008eec(uVar7,uVar9);\n    uVar8 = FUNC_08008eec(uVar8,uVar9);\n    local_20 = 0;\n    if ((*PTR_DAT_08003568 != *PTR_DAT_0800356c) &&\n       (iVar13 = is_input_null_08009264_08009264(*(undefined4 *)(PTR_DAT_08003570 + 0x18),0), iVar13 != 0)) {\n      uVar9 = FUNC_08008eec(*(uint *)(PTR_DAT_08003570 + 0xc) ^ 0x80000000,uVar3);\n      uVar10 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08003570 + 0x10),uVar7);\n      uVar9 = FUNC_08008cd8(uVar9,uVar10);\n      uVar10 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08003570 + 0x14),uVar8);\n      uVar9 = FUNC_08008cd8(uVar9,uVar10);\n      uVar15 = calculate_hash_08008590(uVar9);\n      iVar13 = is_end_of_input_08008b24((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08003550,DAT_08003554);\n      if (iVar13 != 0) {\n        iVar13 = is_input_empty_08009228(*(undefined4 *)(PTR_DAT_08003570 + 0x18),*(undefined4 *)(puVar12 + 10)\n                             );\n        if (iVar13 == 0) {\n          local_20 = *(undefined4 *)(puVar12 + 10);\n        }\n        else {\n          local_20 = *(undefined4 *)(PTR_DAT_08003570 + 0x18);\n        }\n        uVar15 = calculate_hash_08008590(uVar9);\n        iVar13 = is_end_of_string_08008b60((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08003558,DAT_0800355c\n                             );\n        if (iVar13 != 0) {\n          uVar15 = calculate_hash_08008590(uVar9);\n          uVar15 = FUNC_080082d0(0,DAT_08003574,(int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n          uVar15 = FUNC_08008640((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),0,DAT_08003578);\n          uVar15 = process_input_080098d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n          uVar9 = calculate_float_bits_08008c30((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n          uVar15 = calculate_hash_08008590(local_20);\n          uVar10 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08003560 + 0x20),\n                                *(undefined4 *)(PTR_DAT_08003560 + 0x24));\n          uVar10 = FUNC_08008eec(uVar10,uVar9);\n          uVar16 = calculate_hash_08008590(uVar10);\n          uVar17 = calculate_hash_08008590(uVar9);\n          uVar17 = FUNC_080082d0(0,DAT_08003574,(int)uVar17,(int)((ulonglong)uVar17 >> 0x20));\n          uVar16 = FUNC_08008894((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar17,\n                                (int)((ulonglong)uVar17 >> 0x20));\n          uVar16 = process_input_080098d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20));\n          iVar13 = is_end_of_input_08008b24((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                (int)((ulonglong)uVar16 >> 0x20));\n          if (iVar13 == 0) {\n            uVar10 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08003560 + 0x20),\n                                  *(undefined4 *)(PTR_DAT_08003560 + 0x24));\n            uVar10 = FUNC_08008eec(uVar10,uVar9);\n            uVar15 = calculate_hash_08008590(uVar10);\n            uVar16 = calculate_hash_08008590(uVar9);\n            uVar16 = FUNC_080082d0(0,DAT_08003574,(int)uVar16,(int)((ulonglong)uVar16 >> 0x20));\n            uVar15 = FUNC_08008894((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                  (int)((ulonglong)uVar16 >> 0x20));\n            uVar15 = process_input_080098d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n            local_20 = calculate_float_bits_08008c30((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n          }\n        }\n      }\n    }\n    *(undefined4 *)(puVar12 + 0xe) = local_20;\n    uVar10 = calculate_float_bits_08002978(*(uint *)(PTR_DAT_08003560 + 0x20) ^ 0x80000000,0,\n                          *(undefined4 *)(puVar12 + 0x10));\n    iVar13 = is_input_empty_08009228(local_20,uVar10);\n    uVar9 = uVar10;\n    if (iVar13 != 0) {\n      uVar9 = local_20;\n    }\n    *(undefined4 *)(puVar12 + 0xc) = uVar9;\n    iVar13 = validate_results_08009250(uVar10,*(undefined4 *)(puVar12 + 10));\n    if (iVar13 == 0) {\n      *(undefined *)((int)puVar12 + 0x25) = 0;\n    }\n    else {\n      *(undefined *)((int)puVar12 + 0x25) = 1;\n    }\n    *(undefined *)(puVar12 + 0x12) = 1;\n    puVar1 = PTR_DAT_080035e0;\n    *(undefined4 *)(PTR_DAT_080035e0 + 0xc) = uVar3;\n    *(undefined4 *)(puVar1 + 0x10) = uVar7;\n    *(undefined4 *)(puVar1 + 0x14) = uVar8;\n    *(undefined4 *)(PTR_DAT_080035e0 + 0x18) = *(undefined4 *)(puVar12 + 10);\n    *PTR_DAT_080035e8 = *PTR_DAT_080035e4;\n    uVar2 = increment_and_wrap_around_08002870(*PTR_DAT_080035e8);\n    *PTR_DAT_080035e4 = uVar2;\n    puVar1 = PTR_DAT_080035e0;\n    *(int *)PTR_DAT_080035e0 = iVar4;\n    *(int *)(puVar1 + 4) = iVar5;\n    *(int *)(puVar1 + 8) = iVar6;\n    process_input_and_calculate_hashes_08002edc();\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08009318",
                "FUN_08009250",
                "FUN_080098d0",
                "FUN_08008590",
                "FUN_08008b60",
                "FUN_08008640",
                "FUN_08008b24",
                "FUN_08008bf0",
                "FUN_08009264",
                "FUN_08009228",
                "FUN_08002870",
                "FUN_08002978",
                "FUN_08008cdc",
                "FUN_08002edc",
                "FUN_080082d0",
                "FUN_08008c30",
                "FUN_08008e44",
                "FUN_08008ba0",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_08008894",
                "FUN_080095b8",
                "FUN_08008eec"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003004",
            "calling": [
                "FUN_08001e98"
            ],
            "imported": false,
            "current_name": "FUNC_08003004"
        },
        "FUN_080066cc": {
            "renaming": {
                "FUN_080066cc": "calculate_shifted_value_080066cc",
                "uVar1": "shifted_value",
                "uVar2": "leading_zeroes_count",
                "PTR_DAT_08006714": "pointer_data",
                "DAT_08006710": "data"
            },
            "code": "uint calculate_shifted_value_080066cc(void)\n{\n  uint shifted_value = calculate_shifted_value_080066cc_08006628();\n  uint leading_zeroes_count = count_leading_zeroes(0x70000);\n  uint shifted_amount = (*(uint *)(DAT_08006710 + 8) & 0xe000) >> (leading_zeroes_count & 0xff);\n  uint result = shifted_value >> PTR_DAT_08006714[shifted_amount];\n  return result;\n}",
            "called": [
                "FUN_08006628"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080066cc",
            "calling": [
                "FUN_08007f54"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_080066cc"
        },
        "FUN_080018fc": {
            "renaming": {
                "FUN_080018fc": "set_param_080018fc",
                "param_1": "new_param_val",
                "DAT_08001928": "data_block_ptr"
            },
            "code": "void set_param_080018fc(uint new_param_val)\n{\n    uint* param_ptr = (uint*)(DAT_08001928 + 0x14);\n    uint current_param_val = *param_ptr;\n    uint mask = 0xfffff55f;\n    uint masked_current_param_val = current_param_val & mask;\n    uint new_param_val_with_mask = new_param_val | masked_current_param_val;\n    *param_ptr = new_param_val_with_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018fc",
            "calling": [
                "FUN_08001994"
            ],
            "imported": false,
            "current_name": "set_param_080018fc"
        },
        "FUN_080039bc": {
            "renaming": {
                "FUN_080039bc": "validate_and_write_to_buffer_080039bc",
                "iVar1": "result",
                "uVar2": "error_code",
                "local_9": "buffer_index"
            },
            "code": "void validate_and_write_to_buffer_080039bc(void)\n{\n  int result;\n  undefined4 error_code;\n  byte buffer_index;\n\n  for (buffer_index = 0; buffer_index < 2; buffer_index++) {\n    result = validate_buffer_and_write_to_08004d2c_08004d2c(buffer_index, PTR_DAT_08003a14);\n    if (result == 0) {\n      print_error_message_08004030(10);\n    }\n    else if (*PTR_DAT_08003a14 != '\\0') {\n      wait_for_characters_0800369c(PTR_DAT_08003a14);\n      error_code = FUNC_080005b4(PTR_DAT_08003a14);\n      print_error_message_08004030(error_code);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08004d2c",
                "FUN_0800369c",
                "FUN_080005b4",
                "FUN_08004030"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080039bc",
            "calling": [
                "FUN_08001ddc",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "validate_and_write_to_buffer_080039bc"
        },
        "FUN_0800618c": {
            "renaming": {
                "FUN_0800618c": "validate_and_shift_0800618c",
                "param_1": "validation_info",
                "param_2": "validation_info_size",
                "lVar1": "product",
                "iVar2": "i",
                "uVar3": "status",
                "uVar4": "limit",
                "uVar5": "shifted_value",
                "get_data_from_pointer_08005a84": "get_data",
                "calculate_shifted_value_08006628": "calculate_shifted_value",
                "is_param_valid_08005c30": "is_param_valid",
                "DAT_08006400": "PTR_DAT_08006400",
                "DAT_08006404": "PTR_DAT_08006404",
                "DAT_08006408": "PTR_DAT_08006408"
            },
            "code": "int validate_and_shift_0800618c(uint *validation_info, uint validation_info_size)\\n\\\n    {\\n\\\n        long long product;\\n\\\n        int i, data, limit;\\n\\\n        uint status;\\n\\\n        \\n\\\n        if ((*DAT_08006400 & 0xf) < validation_info_size) {\\n\\\n            *(char *)DAT_08006400 = (char)validation_info_size;\\n\\\n            if (validation_info_size != (*DAT_08006400 & 0xf)) {\\n\\\n                return 1;\\n\\\n            }\\n\\\n            if ((*validation_info & 1) != 0) {\\n\\\n                if (validation_info[1] == 1) {\\n\\\n                    if ((*DAT_08006404 & 0x20000) == 0) {\\n\\\n                        return 1;\\n\\\n                    }\\n\\\n                }\\n\\\n                else if ((validation_info[1] != 2) && ((*DAT_08006404 & 2) == 0)) {\\n\\\n                    return 1;\\n\\\n                }\\n\\\n                DAT_08006404[2] = validation_info[1] | DAT_08006404[2] & 0xfffffffc;\\n\\\n                limit = get_data_from_pointer_08005a84() + 5000;\\n\\\n                if (validation_info[1] == 1) {\\n\\\n                    while ((DAT_08006404[2] & 0xc) != 4) {\\n\\\n                        data = get_data_from_pointer_08005a84();\\n\\\n                        if (limit <= data) {\\n\\\n                            return 3;\\n\\\n                        }\\n\\\n                    }\\n\\\n                }\\n\\\n                else if (validation_info[1] == 2) {\\n\\\n                    while ((DAT_08006404[2] & 0xc) != 8) {\\n\\\n                        data = get_data_from_pointer_08005a84();\\n\\\n                        if (limit <= data) {\\n\\\n                            return 3;\\n\\\n                        }\\n\\\n                    }\\n\\\n                }\\n\\\n                else {\\n\\\n                    while ((DAT_08006404[2] & 0xc) != 0) {\\n\\\n                        data = get_data_from_pointer_08005a84();\\n\\\n                        if (limit <= data) {\\n\\\n                            return 3;\\n\\\n                        }\\n\\\n                    }\\n\\\n                }\\n\\\n            }\\n\\\n        }\\n\\\n        else {\\n\\\n            if ((*validation_info & 1) != 0) {\\n\\\n                if (validation_info[1] == 1) {\\n\\\n                    if ((*DAT_08006404 & 0x20000) == 0) {\\n\\\n                        return 1;\\n\\\n                    }\\n\\\n                }\\n\\\n                else if (validation_info[1] == 2) {\\n\\\n                    if ((*DAT_08006404 & 0x2000000) == 0) {\\n\\\n                        return 1;\\n\\\n                    }\\n\\\n                }\\n\\\n                else if ((*DAT_08006404 & 2) == 0) {\\n\\\n                    return 1;\\n\\\n                }\\n\\\n                DAT_08006404[2] = validation_info[1] | DAT_08006404[2] & 0xfffffffc;\\n\\\n                limit = get_data_from_pointer_08005a84() + 5000;\\n\\\n                if (validation_info[1] == 1) {\\n\\\n                    while ((DAT_08006404[2] & 0xc) != 4) {\\n\\\n                        data = get_data_from_pointer_08005a84();\\n\\\n                        if (limit <= data) {\\n\\\n                            return 3;\\n\\\n                        }\\n\\\n                    }\\n\\\n                }\\n\\\n                else if (validation_info[1] == 2) {\\n\\\n                    while ((DAT_08006404[2] & 0xc) != 8) {\\n\\\n                        data = get_data_from_pointer_08005a84();\\n\\\n                        if (limit <= data) {\\n\\\n                            return 3;\\n\\\n                        }\\n\\\n                    }\\n\\\n                }\\n\\\n                else {\\n\\\n                    while ((DAT_08006404[2] & 0xc) != 0) {\\n\\\n                        data = get_data_from_pointer_08005a84();\\n\\\n                        if (limit <= data) {\\n\\\n                            return 3;\\n\\\n                        }\\n\\\n                    }\\n\\\n                }\\n\\\n            }\\n\\\n            *(char *)DAT_08006400 = (char)validation_info_size;\\n\\\n            if (validation_info_size != (*DAT_08006400 & 0xf)) {\\n\\\n                return 1;\\n\\\n            }\\n\\\n        }\\n\\\n        if ((*validation_info & 2) != 0) {\\n\\\n            DAT_08006404[2] = validation_info[2] | DAT_08006404[2] & 0xffffff0f;\\n\\\n        }\\n\\\n        if ((*validation_info & 4) != 0) {\\n\\\n            DAT_08006404[2] = validation_info[3] | DAT_08006404[2] & 0xffffe3ff;\\n\\\n        }\\n\\\n        if ((*validation_info & 8) != 0) {\\n\\\n            DAT_08006404[2] = validation_info[4] << 3 | DAT_08006404[2] & 0xffff1fff;\\n\\\n        }\\n\\\n        product = (long long)DAT_08006408 * ((ulong long)calculate_shifted_value_08006628() & 0xffffffff);\\n\\\n        status = (uint)(product >> 0x26);\\n\\\n        status = is_param_valid_08005c30(status, (int)(calculate_shifted_value_08006628() >> 0x20), (int)product);\\n\\\n        return 0;\\n\\\n    }",
            "called": [
                "FUN_08006628",
                "FUN_08005c30",
                "FUN_08005a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800618c",
            "calling": [
                "FUN_08007436"
            ],
            "imported": false,
            "current_name": "validate_and_shift_0800618c"
        },
        "FUN_08006998": {
            "renaming": {
                "FUN_08006998": "get_bits_from_uint_08006998",
                "DAT_080069b0": "PTR_data"
            },
            "code": "uint get_bits_from_uint_08006998(void)\n{\n    uint data = *(uint *)(DAT_080069b0 + 0xc);\n    uint shifted_data = data >> 8;\n    uint masked_data = shifted_data & 7;\n    return masked_data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006998",
            "calling": [
                "FUN_08006cf6",
                "FUN_08006d8a"
            ],
            "imported": false,
            "current_name": "get_bits_from_uint_08006998"
        },
        "FUN_080004ac": {
            "renaming": {
                "FUN_080004ac": "write_data_to_buffer_080004ac",
                "PTR_DAT_080004f0": "PTR_DATA_BUFFER",
                "PTR_DAT_080004f4": "PTR_DATA",
                "write_buffer_0800b430": "write_buffer",
                "set_params_to_array_08000478": "set_params_to_array",
                "validate_and_write_buffer_08004d7c": "validate_and_write_data",
                "iVar1": "validation_result",
                "print_error_message_08004030": "print_error_message"
            },
            "code": "void write_data_to_buffer_080004ac(void)\n{\n  int validation_result;\n  write_buffer_0800b430(PTR_DAT_080004f0, 0, 0x38);\n  *(undefined4 *)(PTR_DAT_080004f0 + 8) = *(undefined4 *)(PTR_DAT_080004f4 + 0x10);\n  set_params_to_array_08000478(0, 1, 2);\n  PTR_DAT_080004f0[4] = 1;\n  validation_result = validate_and_write_data(PTR_DAT_080004f0[0x1c], PTR_DAT_080004f4);\n  if (validation_result == 0) {\n    print_error_message_08004030(10);\n  }\n  return;\n}",
            "called": [
                "FUN_08000478",
                "FUN_08004d7c",
                "FUN_0800b430",
                "FUN_08004030"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004ac",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "write_data_to_buffer_080004ac"
        },
        "FUN_080078f4": {
            "renaming": {
                "FUN_080078f4": "calculate_sum_of_four_values_080078f4",
                "local_10": "index",
                "local_c": "sum"
            },
            "code": "uint calculate_sum_of_four_values_080078f4(void)\n{\n  int index;\n  uint sum = 0;\n  for (index = 0; index < 4; index++) {\n    sum = *(uint *)(PTR_DAT_0800792c + index * 4) | sum;\n  }\n  return sum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078f4",
            "calling": [
                "FUN_08001994",
                "FUN_08007930"
            ],
            "imported": false,
            "current_name": "calculate_sum_of_four_values_080078f4"
        },
        "FUN_080041a0": {
            "renaming": {
                "FUN_080041a0": "print_status_message_080041a0",
                "param_1": "status",
                "process_string_080036c6": "print_string",
                "PTR_DAT_0800420c": "status_message_header",
                "PTR_s_Reset_to_continue_08004210": "status_message_1",
                "PTR_s___H____X__to_unlock_08004214": "status_message_2",
                "PTR_s_Caution__Unlocked_08004218": "status_message_3",
                "PTR_s_Enabled_0800421c": "status_message_4",
                "PTR_s_Disabled_08004220": "status_message_5",
                "PTR_DAT_08004224": "continue_message"
            },
            "code": "void print_status_message_080041a0(int status)\n{\n    print_string(\"System Status: \");\n    switch(status) {\n        case 1:\n            print_string(\"Reset to continue\\n\");\n            break;\n        case 2:\n            print_string(\"Press 'X' to unlock\\n\");\n            break;\n        case 3:\n            print_string(\"Caution: Unlocked\\n\");\n            break;\n        case 4:\n            print_string(\"System Enabled\\n\");\n            break;\n        case 5:\n            print_string(\"System Disabled\\n\");\n            break;\n    }\n    print_string(\"Press any key to continue...\\n\");\n}\n",
            "called": [
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041a0",
            "calling": [
                "FUN_08001ddc",
                "FUN_08003b98",
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "print_status_message_080041a0"
        },
        "FUN_08008bf0": {
            "renaming": {
                "FUN_08008bf0": "calculate_shift_amount_08008bf0",
                "param_1": "dividend",
                "param_2": "divisor",
                "iVar1": "temp_var_1",
                "uVar2": "temp_var_2"
            },
            "code": "uint calculate_shift_amount_08008bf0(uint dividend, uint divisor)\n{\n    int temp_var_1;\n    uint temp_var_2;\n\n    if ((divisor & 0x80000000) != 0) {\n        return 0;\n    }\n    temp_var_1 = divisor * 2 + 0x200000;\n    if (divisor * 2 < 0xffe00000) {\n        if (-1 < temp_var_1) {\n            return 0;\n        }\n        temp_var_2 = -(temp_var_1 >> 0x15) - 0x3e1;\n        if (-1 < (int)temp_var_2) {\n            return (divisor << 0xb | 0x80000000 | dividend >> 0x15) >> (temp_var_2 & 0xff);\n        }\n    }\n    else if ((dividend | divisor << 0xc) != 0) {\n        return 0;\n    }\n    return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008bf0",
            "calling": [
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08003004",
                "FUN_08004e30",
                "FUN_08002408",
                "FUN_08001f00",
                "FUN_08003b98",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_shift_amount_08008bf0"
        },
        "FUN_08003a18": {
            "renaming": {
                "FUN_08003a18": "set_flags_08003a18",
                "param_1": "flag"
            },
            "code": "void set_flags_08003a18(uint8_t flag)\n{\n    if (!(flag & 0x80))\n    {\n        if (!(flag & 0x40))\n        {\n            if (flag & 0x20)\n            {\n                PTR_DAT_08003a70[2] |= 2;\n            }\n        }\n        else\n        {\n            PTR_DAT_08003a70[2] |= 8;\n        }\n    }\n    else\n    {\n        set_flag_and_check_080025e8();\n    }\n    return;\n}",
            "called": [
                "FUN_080025e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a18",
            "calling": [
                "FUN_080074c8"
            ],
            "imported": false,
            "current_name": "set_flags_08003a18"
        },
        "FUN_08005790": {
            "renaming": {
                "FUN_08005790": "process_data_08005790",
                "PTR_DAT_080057d4": "data_array",
                "PTR_DAT_080057dc": "data_array[0x0C]",
                "PTR_DAT_080057e0": "data_array[0x10]",
                "set_global_variable_08007c40": "set_mode",
                "set_global_variable_08007c5e": "set_timeout",
                "update_flags_08007b70": "update_flags"
            },
            "code": "void process_data_08005790(void)\n{\n  do_nothing();\n  if (PTR_DAT_080057d4[1] == 0x03) {\n    *(uint16_t *)PTR_DAT_080057dc = *(uint16_t *)(PTR_DAT_080057d4 + 0x18);\n    *(uint16_t *)PTR_DAT_080057e0 = *(uint16_t *)(PTR_DAT_080057d4 + 0x1A);\n    set_mode(0x69);\n    set_timeout(((uint8_t)PTR_DAT_080057d4[0x0D] + 5) * 0x15);\n    update_flags();\n  }\n  return;\n}",
            "called": [
                "FUN_08007b70",
                "FUN_08007c5e",
                "FUN_08005318",
                "FUN_08007c40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005790",
            "calling": [
                "FUN_08001d4c",
                "FUN_0800583c",
                "FUN_0800585c"
            ],
            "imported": false,
            "current_name": "process_data_08005790"
        },
        "FUN_08001994": {
            "renaming": {
                "FUN_08001994": "FUNC_08001994"
            },
            "code": "\nvoid FUNC_08001994(byte param_1,char param_2,char param_3,undefined4 param_4)\n\n{\n  undefined4 uVar1;\n  uint uVar2;\n  undefined8 uVar3;\n  undefined8 uVar4;\n  byte local_61;\n  uint local_5c;\n  uint local_58;\n  uint local_54;\n  ushort local_4e;\n  uint local_4c;\n  int local_48;\n  undefined4 local_44;\n  uint local_40;\n  uint local_3c;\n  ushort local_36;\n  uint local_34;\n  uint local_30;\n  int local_2c;\n  int local_28;\n  int local_24;\n  int local_20;\n  ushort local_1a;\n  uint local_18;\n  char local_11;\n  \n  local_11 = '\\0';\n  write_buffer_0800b430(&local_5c,0,0xc);\n  if ((param_1 & 1) != 0) {\n    local_11 = local_11 + '\\x01';\n    uVar3 = calculate_hash_08008590(*(undefined4 *)PTR_DAT_08001c90);\n    local_5c = convert_to_signed_fixed_point_080095b8((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  }\n  if ((param_1 & 2) != 0) {\n    local_11 = local_11 + '\\x01';\n    uVar3 = calculate_hash_08008590(*(undefined4 *)(PTR_DAT_08001c90 + 4));\n    local_58 = convert_to_signed_fixed_point_080095b8((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  }\n  if ((param_1 & 4) != 0) {\n    local_11 = local_11 + '\\x01';\n    uVar3 = calculate_hash_08008590(*(undefined4 *)(PTR_DAT_08001c90 + 8));\n    local_54 = convert_to_signed_fixed_point_080095b8((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  }\n  uVar2 = local_54;\n  if (local_54 < local_58) {\n    uVar2 = local_58;\n  }\n  local_40 = local_5c;\n  if (local_5c < uVar2) {\n    local_40 = uVar2;\n  }\n  uVar3 = calculate_shifted_value_0800854c(local_40);\n  uVar4 = calculate_shifted_value_0800854c(local_11);\n  uVar4 = process_input_080098d0((int)uVar4,(int)((ulonglong)uVar4 >> 0x20));\n  uVar3 = FUNC_08008894((int)uVar3,(int)((ulonglong)uVar3 >> 0x20),(int)uVar4,\n                       (int)((ulonglong)uVar4 >> 0x20));\n  local_44 = calculate_float_bits_08008c30((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  uVar1 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08001c90 + 0x20),local_44);\n  uVar1 = FUNC_08009054(uVar1,DAT_08001c94);\n  uVar3 = calculate_hash_08008590(uVar1);\n  uVar3 = calculate_result_08009318((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  local_48 = calculate_shift_amount_08008bf0((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  uVar3 = calculate_shifted_value_0800854c(local_11);\n  uVar3 = process_input_080098d0((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  uVar4 = calculate_hash_08008590(param_4);\n  uVar3 = FUNC_08008640((int)uVar3,(int)((ulonglong)uVar3 >> 0x20),(int)uVar4,\n                       (int)((ulonglong)uVar4 >> 0x20));\n  uVar1 = calculate_float_bits_08008c30((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  uVar1 = FUNC_08008eec(local_44,uVar1);\n  uVar1 = FUNC_08009054(DAT_08001c98,uVar1);\n  uVar3 = calculate_hash_08008590(uVar1);\n  local_4c = convert_to_signed_fixed_point_080095b8((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  local_18 = DAT_08001c9c;\n  if (local_4c < DAT_08001c9c) {\n    local_18 = local_4c;\n  }\n  local_4e = *(ushort *)(PTR_DAT_08001c90 + 0x18);\n  local_1a = *(ushort *)(PTR_DAT_08001c90 + 0x1a) ^ *(ushort *)(PTR_DAT_08001c90 + 0x2a) & 0xaa0;\n  if (param_2 == '\\0') {\n    local_1a = local_1a ^ 0xaa0;\n  }\n  set_param_080018fc(local_1a);\n  set_param_080018cc(local_4e);\n  local_28 = -(local_40 >> 1);\n  local_2c = local_18 - (byte)PTR_DAT_08001c90[0xd];\n  local_30 = 0;\n  local_34 = 10000;\n  local_61 = param_1;\n  local_24 = local_28;\n  local_20 = local_28;\n  while( true ) {\n    local_36 = local_4e;\n    local_3c = calculate_sum_of_four_values_080078f4();\n    if (param_3 == '\\0') {\n      local_3c = local_3c ^ 0x1e;\n    }\n    if (((local_61 & 1) != 0) && (local_20 = local_20 + local_5c, 0 < local_20)) {\n      if ((local_3c & 0x10) == 0) {\n        local_61 = local_61 & 0xfe;\n      }\n      else {\n        local_36 = local_36 ^ 0x10;\n      }\n      local_20 = local_20 - local_40;\n    }\n    if (((local_61 & 2) != 0) && (local_24 = local_24 + local_58, 0 < local_24)) {\n      if ((local_3c & 8) == 0) {\n        local_61 = local_61 & 0xfd;\n      }\n      else {\n        local_36 = local_36 ^ 0x440;\n      }\n      local_24 = local_24 - local_40;\n    }\n    if (((local_61 & 4) != 0) && (local_28 = local_28 + local_54, 0 < local_28)) {\n      if ((local_3c & 4) == 0) {\n        local_61 = local_61 & 0xfb;\n      }\n      else {\n        local_36 = local_36 ^ 0x100;\n      }\n      local_28 = local_28 - local_40;\n    }\n    if ((local_61 == 0) || ((PTR_DAT_08001d40[2] & 0x10) != 0)) break;\n    set_param_080018cc(local_36);\n    do_nothing_08002828(PTR_DAT_08001d44[0xd]);\n    set_param_080018cc(local_4e);\n    do_nothing_08002828(local_2c);\n    if ((local_4c < local_18) && (local_34 = local_18 + local_34, 20000 < local_34)) {\n      local_34 = local_34 - 20000;\n      local_30 = local_48 + local_30;\n      local_18 = DAT_08001d48 / local_30;\n      if (local_18 < local_4c) {\n        local_18 = local_4c;\n      }\n      local_2c = local_18 - (byte)PTR_DAT_08001d44[0xd];\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08009318",
                "FUN_08008590",
                "FUN_080098d0",
                "FUN_08008640",
                "FUN_080078f4",
                "FUN_08008bf0",
                "FUN_0800b430",
                "FUN_080018fc",
                "FUN_08008c30",
                "FUN_080018cc",
                "FUN_08002828",
                "FUN_08009054",
                "FUN_08008894",
                "FUN_080095b8",
                "FUN_0800854c",
                "FUN_08008eec"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001994",
            "calling": [
                "FUN_08001d4c"
            ],
            "imported": false,
            "current_name": "FUNC_08001994"
        },
        "FUN_08007854": {
            "renaming": {
                "FUN_08007854": "get_bit_at_position_08007854",
                "param_1": "num",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "uint get_bit_at_position_08007854(uint num, uint pos) {\n    uint base_address = ((int)num >> 4) * 0x400 + 0x40020010;\n    uint bit_mask = 1;\n    uint shifted_num = *(uint *)base_address >> (pos & 0xf);\n    return shifted_num & bit_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007854",
            "calling": [
                "FUN_08007884"
            ],
            "imported": false,
            "current_name": "get_bit_at_position_08007854"
        },
        "FUN_08004900": {
            "renaming": {
                "FUN_08004900": "process_data_and_wait_for_input_08004900",
                "param_1": "data",
                "param_2": "input",
                "PTR_DAT_08004934": "PTR_DATA_STRING_1",
                "PTR_DAT_08004938": "PTR_DATA_STRING_2",
                "PTR_DAT_0800493c": "PTR_DATA_STRING_3",
                "process_string_080036c6": "process_string",
                "calculate_and_wait_for_absolute_value_080037fc": "calculate_and_wait_for_absolute_value",
                "wait_for_characters_0800369c": "wait_for_input"
            },
            "code": "void process_data_and_wait_for_input_08004900(void* data, int input){\n\tprocess_string_080036c6(PTR_DAT_08004934);\n\tcalculate_and_wait_for_absolute_value_080037fc(data);\n\tprocess_string_080036c6(PTR_DAT_08004938);\n\twait_for_characters_0800369c(input);\n\tprocess_string_080036c6(PTR_DAT_0800493c);\n\treturn;\n}",
            "called": [
                "FUN_0800369c",
                "FUN_080037fc",
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004900",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "process_data_and_wait_for_input_08004900"
        },
        "FUN_08005318": {
            "renaming": {
                "FUN_08005318": "do_nothing_08005318"
            },
            "code": "\nvoid do_nothing_08005318(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005318",
            "calling": [
                "FUN_08005790"
            ],
            "imported": false,
            "current_name": "do_nothing_08005318"
        },
        "FUN_08004228": {
            "renaming": {
                "FUN_08004228": "print_help_message_08004228",
                "PTR_s__Grbl_0_8c______for_help__08004238": "help_message",
                "process_string_080036c6": "process_string_for_help"
            },
            "code": "void print_help_message_08004228(void)\n{\n  process_string_for_help(PTR_s__Grbl_0_8c______for_help__08004238);\n  return;\n}",
            "called": [
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004228",
            "calling": [
                "FUN_080039a0"
            ],
            "imported": false,
            "current_name": "print_help_message_08004228"
        },
        "FUN_08009b24": {
            "renaming": {
                "FUN_08009b24": "FUNC_08009b24"
            },
            "code": "\nuint FUNC_08009b24(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  uint uVar3;\n  int iVar4;\n  undefined4 uVar5;\n  int iVar6;\n  uint uVar7;\n  undefined4 uVar8;\n  undefined4 uVar9;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  undefined8 uVar12;\n  undefined8 uVar13;\n  int local_3c;\n  \n  uVar1 = DAT_08009d70;\n  param_2 = param_2 & 0x7fffffff;\n  param_4 = param_4 & 0x7fffffff;\n  uVar3 = param_1;\n  uVar7 = param_2;\n  if (param_2 < param_4) {\n    uVar3 = param_3;\n    param_3 = param_1;\n    uVar7 = param_4;\n    param_4 = param_2;\n  }\n  if (0x3c00000 < (int)(uVar7 - param_4)) {\n    uVar3 = FUNC_080082d4(uVar3,uVar7,param_3,param_4);\n    return uVar3;\n  }\n  if (DAT_08009d68 < (int)uVar7) {\n    if (DAT_08009d74 < (int)uVar7) {\n      if ((uVar7 & 0xfffff | uVar3) != 0) {\n        uVar3 = FUNC_080082d4(uVar3,uVar7,param_3,param_4);\n      }\n      if ((param_4 ^ 0x7ff00000 | param_3) != 0) {\n        return uVar3;\n      }\n      return param_3;\n    }\n    uVar7 = uVar7 + 0xda800000;\n    param_4 = param_4 + 0xda800000;\n    local_3c = 600;\n  }\n  else {\n    local_3c = 0;\n  }\n  uVar11 = CONCAT44(uVar7,uVar3);\n  uVar10 = CONCAT44(param_4,param_3);\n  if ((int)param_4 <= DAT_08009d6c) {\n    if ((int)param_4 < 0x100000) {\n      if ((param_4 | param_3) == 0) {\n        return uVar3;\n      }\n      uVar10 = FUNC_08008640(param_3,param_4,0,DAT_08009d70);\n      uVar11 = FUNC_08008640(uVar3,uVar7,0,uVar1);\n      local_3c = local_3c + -0x3fe;\n    }\n    else {\n      uVar7 = uVar7 + 0x25800000;\n      uVar11 = CONCAT44(uVar7,uVar3);\n      param_4 = param_4 + 0x25800000;\n      uVar10 = CONCAT44(param_4,param_3);\n      local_3c = local_3c + -600;\n    }\n  }\n  uVar9 = (undefined4)((ulonglong)uVar11 >> 0x20);\n  uVar8 = (undefined4)uVar11;\n  iVar6 = (int)((ulonglong)uVar10 >> 0x20);\n  uVar5 = (undefined4)uVar10;\n  uVar10 = FUNC_080082d0(uVar8,uVar9,uVar5,iVar6);\n  iVar4 = (int)((ulonglong)uVar10 >> 0x20);\n  uVar1 = (undefined4)uVar10;\n  iVar2 = is_end_of_input_08008b24(uVar5,iVar6,uVar1,iVar4);\n  if (iVar2 == 0) {\n    uVar10 = FUNC_08008640(0,param_4,0);\n    uVar11 = FUNC_08008640(uVar1,iVar4 + -0x80000000,uVar1,iVar4);\n    uVar12 = FUNC_080082d4(uVar8,uVar9,uVar8,uVar9);\n    uVar12 = FUNC_080082d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),0,uVar7 + 0x100000);\n    uVar12 = FUNC_08008640((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),uVar5,iVar6);\n    uVar13 = FUNC_080082d0(uVar5,iVar6,0,param_4);\n    uVar13 = FUNC_08008640((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),0,uVar7 + 0x100000);\n    uVar12 = FUNC_080082d4((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar13,\n                          (int)((ulonglong)uVar13 >> 0x20));\n    uVar11 = FUNC_080082d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar12,\n                          (int)((ulonglong)uVar12 >> 0x20));\n    FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                 (int)((ulonglong)uVar11 >> 0x20));\n    uVar10 = calculate_result_0800a1bc();\n  }\n  else {\n    uVar10 = FUNC_08008640(0,uVar7,0,uVar7);\n    uVar11 = FUNC_08008640(uVar5,iVar6 + -0x80000000,uVar5,iVar6);\n    uVar12 = FUNC_080082d4(uVar8,uVar9,0,uVar7);\n    uVar13 = FUNC_080082d0(uVar8,uVar9,0,uVar7);\n    uVar12 = FUNC_08008640((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar13,\n                          (int)((ulonglong)uVar13 >> 0x20));\n    uVar11 = FUNC_080082d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar12,\n                          (int)((ulonglong)uVar12 >> 0x20));\n    FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                 (int)((ulonglong)uVar11 >> 0x20));\n    uVar10 = calculate_result_0800a1bc();\n  }\n  uVar3 = (uint)uVar10;\n  if (local_3c != 0) {\n    uVar3 = FUNC_08008640(uVar3,(int)((ulonglong)uVar10 >> 0x20),0,local_3c * 0x100000 + 0x3ff00000);\n  }\n  return uVar3;\n}\n\n",
            "called": [
                "FUN_080082d0",
                "FUN_0800a1bc",
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008b24"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009b24",
            "calling": [
                "FUN_0800981c"
            ],
            "imported": false,
            "current_name": "FUNC_08009b24"
        },
        "FUN_080076c8": {
            "renaming": {
                "FUN_080076c8": "set_bit_in_array_080076c8",
                "param_1": "array_index",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void set_bit_in_array_080076c8(uint array_index)\n{\n    uint* array_ptr = (uint*)( ((int)array_index >> 4) * 0x400 + 0x40020014 );\n    uint bit_mask = 1 << (array_index & 0xf);\n    *array_ptr = (*array_ptr) ^ bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080076c8",
            "calling": [
                "FUN_08007756"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_080076c8"
        },
        "FUN_0800530c": {
            "renaming": {
                "FUN_0800530c": "do_nothing_0800530c"
            },
            "code": "\nvoid do_nothing_0800530c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800530c",
            "calling": [
                "FUN_080057e4"
            ],
            "imported": false,
            "current_name": "do_nothing_0800530c"
        },
        "FUN_08006a8c": {
            "renaming": {
                "FUN_08006a8c": "set_bit_in_array_08006a8c",
                "param_1": "bit_position",
                "DAT_08006abc": "array_ptr"
            },
            "code": "void set_bit_in_array_08006a8c(byte bit_position) {\n    int* DAT_08006abc = DAT_08006abc;\n    uint index = ((uint)(int)(char)bit_position >> 5) + 0x60;\n    uint bit_mask = 1 << (bit_position & 0x1f);\n    *(DAT_08006abc + index * 4) = bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006a8c",
            "calling": [
                "FUN_08006dfe"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08006a8c"
        },
        "FUN_0800283a": {
            "renaming": {
                "FUN_0800283a": "set_params_and_calculate_hashes_0800283a",
                "PTR_DAT_08002868": "ptr_dat",
                "set_params_in_memory_080035ec": "set_params_in_memory",
                "calculate_and_store_hashes_080004fc": "calculate_and_store_hashes"
            },
            "code": "void set_params_and_calculate_hashes_0800283a(void)\n{\n  int param1 = *(int *)(PTR_DAT_08002868 + 4);\n  int param2 = *(int *)(PTR_DAT_08002868 + 8);\n  int param3 = *(int *)(PTR_DAT_08002868 + 0xc);\n  set_params_in_memory_080035ec(param1, param2, param3);\n  calculate_and_store_hashes_080004fc(param1, param2, param3);\n  return;\n}",
            "called": [
                "FUN_080004fc",
                "FUN_080035ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800283a",
            "calling": [
                "FUN_080024c4",
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "set_params_and_calculate_hashes_0800283a"
        },
        "FUN_0800881c": {
            "renaming": {
                "FUN_0800881c": "calculate_hash_0800881c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "unaff_r4": "temp2",
                "uVar2": "temp3",
                "uVar3": "temp4",
                "in_r12": "mask",
                "bVar4": "check1",
                "check1": "check1",
                "check2": "check2",
                "result1": "result1",
                "result2": "result2"
            },
            "code": "ulonglong calculate_hash_0800881c(uint input1, uint input2, uint input3, uint input4) {\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint mask = 0x80000000;\n  bool check1 = (input1 | input2 << 1) == 0;\n  bool check2 = (input3 | input4 << 1) == 0;\n  bool check3 = (input4 & mask) != 0;\n  bool check4 = (input2 & mask) != 0;\n  uint result1;\n  uint result2;\n  if (input3 != input4 && ((input4 & 0xC000000) != input4)) {\n    if (!check1) {\n      if (!check2) {\n        result1 = (input2 ^ input4) & mask;\n        return (ulonglong)(result1) << 0x20;\n      }\n      if (input3 == 0) {\n        temp1 = input2 & mask;\n        do {\n          temp2 = input1 & mask;\n          input1 = input1 << 1;\n          input2 = input2 * 2 + (uint)(temp2 != 0);\n        } while ((input2 & 0x100000) == 0);\n        input2 = input2 | temp1;\n        if ((input4 & mask) != 0) {\n          result1 = input1;\n          result2 = input2;\n          return CONCAT44(result2, result1);\n        }\n      }\n    }\n    do {\n      temp3 = input3 & mask;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(temp3 != 0);\n    } while ((input4 & 0x100000) == 0);\n    result1 = input1;\n    result2 = input2;\n    return CONCAT44(result2, result1);\n  }\n  if (check1) {\n    temp2 = input4;\n    temp1 = input3;\n  }\n  if (!check1) {\n    if (!check2) {\n      result1 = (input2 ^ input4) & mask;\n      return (ulonglong)(result1 | 0x7ff00000) << 0x20;\n    }\n    if (input3 != input4 || (input1 | input2 << 0xc) != 0) {\n      result1 = input2;\n      result2 = input1;\n      return CONCAT44(result1, result2) | 0x7ff8000000000000;\n    }\n    temp1 = input3;\n    temp2 = input4;\n  }\n  if (input4 & mask) {\n    result1 = temp1;\n    result2 = temp2;\n    return CONCAT44(result2, result1) | 0x7ff8000000000000;\n  }\n  result1 = temp2;\n  result2 = temp1;\n  return CONCAT44(result2, result1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800881c",
            "calling": [
                "FUN_08008640"
            ],
            "imported": false,
            "current_name": "calculate_hash_0800881c"
        },
        "FUN_08004bc0": {
            "renaming": {
                "FUN_08004bc0": "write_to_buffer_with_sum_and_offset_08004bc0",
                "param_1": "offset",
                "param_2": "data",
                "ushort": "unsigned short",
                "write_to_buffer_with_sum_08000374": "write_to_buffer_with_sum",
                "0x101": "BUFFER_SIZE_MULTIPLIER",
                "0x300": "BUFFER_OFFSET"
            },
            "code": "void write_to_buffer_with_sum_and_offset_08004bc0(ushort offset, undefined4 data, ushort size) {\n  ushort new_offset = offset * 0x101 + 0x300;\n  write_to_buffer_with_sum_08000374(new_offset, data, size);\n  return;\n}",
            "called": [
                "FUN_08000374"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bc0",
            "calling": [
                "FUN_08004d2c",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "write_to_buffer_with_sum_and_offset_08004bc0"
        },
        "FUN_08008b4c": {
            "renaming": {
                "FUN_08008b4c": "check_params_and_return_08008b4c",
                "in_ZR": "zero_register",
                "in_CY": "carry_flag",
                "check_params_and_return_08008af0": "check_parameters"
            },
            "code": "bool check_params_and_return_08008b4c() {\n  undefined zero_register;\n  undefined carry_flag;\n  \n  check_parameters();\n  return !(bool)carry_flag || (bool)zero_register;\n}",
            "called": [
                "FUN_08008af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b4c",
            "calling": [
                "FUN_0800a5a0"
            ],
            "imported": false,
            "current_name": "check_params_and_return_08008b4c"
        },
        "FUN_08004c2a": {
            "renaming": {
                "FUN_08004c2a": "write_to_buffer_and_sum_if_empty_08004c2a",
                "write_to_buffer_if_empty_08000340": "write_to_buffer_if_empty",
                "write_to_buffer_with_sum_08000374": "write_to_buffer_with_sum",
                "PTR_DAT_08004c44": "buffer_data"
            },
            "code": "void write_to_buffer_and_sum_if_empty_08004c2a(void)\n{\n  write_to_buffer_if_empty_08000340(0,5);\n  write_to_buffer_with_sum_08000374(1,PTR_DAT_08004c44,0x40);\n  return;\n}",
            "called": [
                "FUN_08000374",
                "FUN_08000340"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c2a",
            "calling": [
                "FUN_08004c48",
                "FUN_08004e30"
            ],
            "imported": false,
            "current_name": "write_to_buffer_and_sum_if_empty_08004c2a"
        },
        "FUN_0800826a": {
            "renaming": {
                "FUN_0800826a": "wait_for_flag_and_return_zero_0800826a",
                "param_1": "flag_ptr",
                "wait_for_flag_to_set_08007e1c": "wait_for_flag_to_set"
            },
            "code": "int wait_for_flag_and_return_zero_0800826a(int* flag_ptr)\n{\n    wait_for_flag_to_set(flag_ptr);\n    return 0;\n}",
            "called": [
                "FUN_08007e1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800826a",
            "calling": [],
            "imported": false,
            "current_name": "wait_for_flag_and_return_zero_0800826a"
        },
        "FUN_08008b60": {
            "renaming": {
                "FUN_08008b60": "is_end_of_string_08008b60",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_08008b60(void)\n{\n  char current_char;\n  check_params_and_return();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_08008af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b60",
            "calling": [
                "FUN_08009318",
                "FUN_080094c0",
                "FUN_0800af78",
                "FUN_08003004"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08008b60"
        },
        "FUN_08005324": {
            "renaming": {
                "FUN_08005324": "calculate_local_param_08005324",
                "param_1": "input_param",
                "local_14": "local_param",
                "DAT_08005358": "constant_divisor",
                "PTR_DAT_0800535c": "pointer_to_data",
                "set_param_08007bf0": "set_result_parameter"
            },
            "code": "void calculate_local_param_08005324(uint input_param)\n{\n  uint local_param;\n  if(input_param < 800) {\n    local_param = 800;\n  }\n  else {\n    local_param = input_param;\n  }\n  uint result = DAT_08005358 / local_param;\n  *(uint *)(PTR_DAT_0800535c + 0x14) = result;\n  set_param_08007bf0(result);\n  return;\n}",
            "called": [
                "FUN_08007bf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005324",
            "calling": [
                "FUN_080058a0",
                "FUN_080053a0",
                "FUN_08005814"
            ],
            "imported": false,
            "current_name": "calculate_local_param_08005324"
        },
        "FUN_08000310": {
            "renaming": {
                "FUN_08000310": "get_buffer_value_08000310",
                "param_1": "index"
            },
            "code": "uint16_t get_buffer_value_08000310(uint16_t index) {\n  int* ptr = (int*)PTR_DAT_08000338;\n  if (*ptr == 0) {\n    write_to_buffer_080002f0();\n  }\n  return PTR_DAT_0800033c[index & 0x3ff];\n}",
            "called": [
                "FUN_080002f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000310",
            "calling": [
                "FUN_080003ec",
                "FUN_08004dd2"
            ],
            "imported": false,
            "current_name": "get_buffer_value_08000310"
        },
        "FUN_08005208": {
            "renaming": {
                "FUN_08005208": "do_nothing_08005208"
            },
            "code": "\nvoid do_nothing_08005208(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005208",
            "calling": [
                "FUN_0800525c"
            ],
            "imported": false,
            "current_name": "do_nothing_08005208"
        },
        "FUN_08007a70": {
            "renaming": {
                "FUN_08007a70": "set_value_and_bit_08007a70",
                "param_1": "value",
                "param_2": "param2",
                "param_3": "param3",
                "local_c": "local_value"
            },
            "code": "void set_value_and_bit_08007a70(int value, int param2, int param3) {\n    int local_value;\n    if (value == 0x40000000) {\n        local_value = 0x1c;\n    }\n    else if (value == DAT_08007ac8) {\n        local_value = 0x1d;\n    }\n    else {\n        if (value != DAT_08007acc) {\n            return;\n        }\n        local_value = 0x1e;\n    }\n    set_value_08006cf6(local_value, param2, param3);\n    set_bit_in_array_080079e0(local_value);\n}",
            "called": [
                "FUN_080079e0",
                "FUN_08006cf6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007a70",
            "calling": [
                "FUN_08007ad0"
            ],
            "imported": false,
            "current_name": "set_value_and_bit_08007a70"
        },
        "FUN_0800b5b0": {
            "renaming": {
                "FUN_0800b5b0": "do_nothing_0800b5b0"
            },
            "code": "\nvoid do_nothing_0800b5b0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b5b0",
            "calling": [
                "FUN_080001ac",
                "FUN_0800b3e8",
                "FUN_08000188"
            ],
            "imported": false,
            "current_name": "do_nothing_0800b5b0"
        },
        "FUN_08002978": {
            "renaming": {
                "FUN_08002978": "calculate_float_bits_08002978",
                "param_1": "hash_val_1",
                "param_2": "hash_val_2",
                "param_3": "hash_val_3",
                "uVar1": "val1",
                "uVar2": "val2",
                "uVar3": "hash",
                "calculate_hash_08008590": "calculate_hash",
                "process_input_080098d0": "process_input",
                "calculate_float_bits_08008c30": "calculate_float_bits"
            },
            "code": "float calculate_float_bits_08002978(float hash) {\n    float val1 = FUNC_08008eec(hash, hash);\n    float val2 = FUNC_08008cdc(PTR_param_1, PTR_param_1);\n    val2 = FUNC_08008eec(val2, PTR_param_3);\n    float result = FUNC_08008cd8(val1, val2);\n    float hash_val = calculate_hash_08008590(result);\n    float processed_input = process_input_080098d0((int)hash_val, (int)((unsigned long long)hash_val >> 0x20));\n    float float_bits = calculate_float_bits_08002978((int)processed_input, (int)((unsigned long long)processed_input >> 0x20));\n    return float_bits;\n}",
            "called": [
                "FUN_080098d0",
                "FUN_08008590",
                "FUN_08008c30",
                "FUN_08008cd8",
                "FUN_08008cdc",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002978",
            "calling": [
                "FUN_08002afc",
                "FUN_080029d8",
                "FUN_08003004"
            ],
            "imported": false,
            "current_name": "calculate_float_bits_08002978"
        },
        "FUN_08009d78": {
            "renaming": {
                "FUN_08009d78": "FUNC_08009d78"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nint FUNC_08009d78(undefined4 param_1,uint param_2,undefined8 *param_3)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  int iVar9;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  undefined8 uVar12;\n  undefined4 local_50;\n  undefined4 uStack_4c;\n  undefined8 local_40;\n  undefined8 local_38;\n  undefined8 local_30;\n  \n  uVar8 = param_2 & 0x7fffffff;\n  if ((int)uVar8 <= DAT_08009fb0) {\n    *(undefined4 *)param_3 = param_1;\n    *(uint *)((int)param_3 + 4) = param_2;\n    *(undefined4 *)(param_3 + 1) = 0;\n    *(undefined4 *)((int)param_3 + 0xc) = 0;\n    return 0;\n  }\n  if ((int)uVar8 <= DAT_08009fb4) {\n    if ((int)param_2 < 1) {\n      uVar10 = FUNC_080082d4(param_1,param_2,DAT_08009f88,DAT_08009f8c);\n      uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n      uVar1 = (undefined4)uVar10;\n      if (uVar8 != DAT_0800a1b8) {\n        uVar10 = FUNC_080082d4(uVar1,uVar3,DAT_0800a1b0,DAT_0800a1b4);\n        *param_3 = uVar10;\n        uVar10 = FUNC_080082d0(uVar1,uVar3);\n        uVar10 = FUNC_080082d4((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800a1b0,DAT_0800a1b4\n                             );\n        param_3[1] = uVar10;\n        return -1;\n      }\n      uVar10 = FUNC_080082d4(uVar1,uVar3,DAT_0800a190,DAT_0800a194);\n      uVar1 = (undefined4)((ulonglong)uVar10 >> 0x20);\n      uVar11 = FUNC_080082d4((int)uVar10,uVar1,DAT_0800a198,DAT_0800a19c);\n      *param_3 = uVar11;\n      uVar10 = FUNC_080082d0((int)uVar10,uVar1);\n      uVar10 = FUNC_080082d4((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800a198,DAT_0800a19c);\n      param_3[1] = uVar10;\n      return -1;\n    }\n    uVar10 = FUNC_080082d0();\n    uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar1 = (undefined4)uVar10;\n    if (uVar8 != DAT_08009fb8) {\n      uVar10 = FUNC_080082d0(uVar1,uVar3,DAT_08009f90,DAT_08009f94);\n      *param_3 = uVar10;\n      uVar10 = FUNC_080082d0(uVar1,uVar3);\n      uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08009f90,DAT_08009f94);\n      param_3[1] = uVar10;\n      return 1;\n    }\n    uVar10 = FUNC_080082d0(uVar1,uVar3,DAT_08009f98,DAT_08009f9c);\n    uVar1 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar11 = FUNC_080082d0((int)uVar10,uVar1,DAT_08009fa0,DAT_08009fa4);\n    *param_3 = uVar11;\n    uVar10 = FUNC_080082d0((int)uVar10,uVar1);\n    uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08009fa0,DAT_08009fa4);\n    param_3[1] = uVar10;\n    return 1;\n  }\n  if (DAT_08009fbc < (int)uVar8) {\n    if (DAT_08009fc0 < (int)uVar8) {\n      uVar10 = FUNC_080082d0(param_1,param_2,param_1,param_2);\n      param_3[1] = uVar10;\n      *param_3 = uVar10;\n      return 0;\n    }\n    iVar9 = ((int)uVar8 >> 0x14) + -0x416;\n    ConvertToSignedFixedPoint_08008ba0();\n    local_40 = calculate_shifted_value_0800856c();\n    uVar10 = FUNC_080082d0(param_1,uVar8 + iVar9 * -0x100000,(int)local_40,\n                          (int)((ulonglong)local_40 >> 0x20));\n    uVar10 = FUNC_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08009fc4);\n    ConvertToSignedFixedPoint_08008ba0();\n    local_38 = calculate_shifted_value_0800856c();\n    uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20));\n    local_30 = FUNC_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08009fc4);\n    is_param_not_null_08008b10((int)local_30,(int)((ulonglong)local_30 >> 0x20),0,0);\n    iVar9 = FUNC_0800a5a0(&local_40,param_3,iVar9);\n    if (-1 < (int)param_2) {\n      return iVar9;\n    }\n    *(int *)((int)param_3 + 4) = *(int *)((int)param_3 + 4) + -0x80000000;\n    *(int *)((int)param_3 + 0xc) = *(int *)((int)param_3 + 0xc) + -0x80000000;\n    return -iVar9;\n  }\n  uVar10 = do_nothing_0800b2cc();\n  uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n  uVar11 = FUNC_08008640((int)uVar10,uVar3,DAT_08009fa8,DAT_08009fac);\n  FUNC_080082d4((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08009fcc);\n  iVar9 = ConvertToSignedFixedPoint_08008ba0();\n  uVar11 = calculate_shifted_value_0800856c();\n  uVar4 = (undefined4)((ulonglong)uVar11 >> 0x20);\n  uVar1 = (undefined4)uVar11;\n  uVar11 = FUNC_08008640(uVar1,uVar4,DAT_08009f88,DAT_08009f8c);\n  uVar10 = FUNC_080082d0((int)uVar10,uVar3,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n  uVar5 = (undefined4)((ulonglong)uVar10 >> 0x20);\n  uVar3 = (undefined4)uVar10;\n  uVar11 = FUNC_08008640(uVar1,uVar4,DAT_08009f90,DAT_08009f94);\n  if ((0x1f < iVar9) || (*(uint *)(PTR_DAT_08009fd0 + (iVar9 + -1) * 4) == uVar8)) {\n    uVar12 = FUNC_080082d0(uVar3,uVar5,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n    if ((int)((uVar8 >> 0x14) - ((uint)((int)((ulonglong)uVar12 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    uVar11 = FUNC_08008640(uVar1,uVar4,DAT_0800a190,DAT_0800a194);\n    uVar6 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar10 = FUNC_080082d0(uVar3,uVar5,(int)uVar11,uVar6);\n    uVar7 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar2 = (undefined4)uVar10;\n    uVar12 = FUNC_080082d0(uVar3,uVar5,uVar2,uVar7);\n    uVar11 = FUNC_080082d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,uVar6);\n    uVar12 = FUNC_08008640(uVar1,uVar4,DAT_0800a198,DAT_0800a19c);\n    uVar11 = FUNC_080082d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n    uVar12 = FUNC_080082d0(uVar2,uVar7,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n    if ((int)(((int)uVar8 >> 0x14) - ((uint)((int)((ulonglong)uVar12 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    uVar11 = FUNC_08008640(uVar1,uVar4,DAT_0800a1a0,DAT_0800a1a4);\n    uVar3 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar10 = FUNC_080082d0(uVar2,uVar7,(int)uVar11,uVar3);\n    uVar12 = FUNC_080082d0(uVar2,uVar7);\n    uVar11 = FUNC_080082d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,uVar3);\n    uVar12 = FUNC_08008640(uVar1,uVar4,DAT_0800a1a8,DAT_0800a1ac);\n    uVar11 = FUNC_080082d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n  }\n  uVar12 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                        (int)((ulonglong)uVar11 >> 0x20));\nLAB_0800a0ce:\n  uStack_4c = (undefined4)((ulonglong)uVar10 >> 0x20);\n  local_50 = (undefined4)uVar10;\n  *param_3 = uVar12;\n  uVar10 = FUNC_080082d0(local_50,uStack_4c);\n  uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                        (int)((ulonglong)uVar11 >> 0x20));\n  param_3[1] = uVar10;\n  if ((int)param_2 < 0) {\n    *(int *)param_3 = (int)uVar12;\n    *(int *)((int)param_3 + 4) = (int)((ulonglong)uVar12 >> 0x20) + -0x80000000;\n    *(int *)(param_3 + 1) = (int)uVar10;\n    *(int *)((int)param_3 + 0xc) = (int)((ulonglong)uVar10 >> 0x20) + -0x80000000;\n    iVar9 = -iVar9;\n  }\n  return iVar9;\n}\n\n",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_0800b2cc",
                "FUN_0800856c",
                "FUN_08008ba0",
                "FUN_0800a5a0",
                "FUN_08008640",
                "FUN_08008b10"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009d78",
            "calling": [
                "FUN_08009410",
                "FUN_080096e8"
            ],
            "imported": false,
            "current_name": "FUNC_08009d78"
        },
        "FUN_08003826": {
            "renaming": {
                "FUN_08003826": "print_float_08003826",
                "param_1": "input",
                "iVar1": "is_empty",
                "local_24": "modified_input",
                "local_9": "num_digits",
                "PTR_DAT_08003970": "digit_masks",
                "FUNC_08008eec": "apply_mask",
                "DAT_08003974": "MASK1",
                "DAT_08003978": "MASK2",
                "FUNC_08008cdc": "convert_input",
                "local_a": "num_zeros",
                "local_10": "converted_input",
                "acStack_1d": "output",
                "PTR_DAT_08003970[0x3d]": "num_digits"
            },
            "code": "void print_float_08003826(uint input)\n{\n  int is_empty = is_input_empty(input, 0);\n  uint modified_input = input;\n  if (is_empty != 0) {\n    wait_for_flag_to_set(0x2d);\n    modified_input = input ^ 0x80000000;\n  }\n  for (int i = PTR_DAT_08003970[0x3d] - 1; i > 0; i -= 2) {\n    modified_input = FUNC_08008eec(modified_input, DAT_08003974);\n  }\n  if (PTR_DAT_08003970[0x3d] % 2 != 0) {\n    modified_input = FUNC_08008eec(modified_input, DAT_08003978);\n  }\n  uint converted_input = FUNC_08008cdc(modified_input);\n  int num_zeros = PTR_DAT_08003970[0x3d] - count_digits(converted_input);\n  char output[PTR_DAT_08003970[0x3d] + 2];\n  output[PTR_DAT_08003970[0x3d] - num_zeros + 1] = '.';\n  for (int i = PTR_DAT_08003970[0x3d] - num_zeros; converted_input != 0; i++) {\n    int digit = converted_input % 10;\n    output[i + 1] = digit + '0';\n    converted_input /= 10;\n  }\n  for (int i = PTR_DAT_08003970[0x3d] - num_zeros + 1; i <= PTR_DAT_08003970[0x3d] + 1; i++) {\n    if (i == PTR_DAT_08003970[0x3d]) {\n      output[i + 1] = '0';\n      break;\n    }\n    wait_for_flag_to_set(output[i]);\n  }\n}\n",
            "called": [
                "FUN_08008250",
                "FUN_08009228",
                "FUN_08009278",
                "FUN_08008cdc",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003826",
            "calling": [
                "FUN_08004250",
                "FUN_080046d0",
                "FUN_08004940",
                "FUN_080044e8"
            ],
            "imported": false,
            "current_name": "print_float_08003826"
        },
        "FUN_0800923c": {
            "renaming": {
                "FUN_0800923c": "check_results_are_zero_or_negative_0800923c",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag",
                "calculate_and_concatenate_results_08009204": "calculate_and_concatenate_results"
            },
            "code": "bool check_results_are_zero_or_negative_0800923c(void)\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  calculate_and_concatenate_results();\n  return !(bool)carry_flag || (bool)zero_flag;\n}",
            "called": [
                "FUN_08009204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800923c",
            "calling": [
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "check_results_are_zero_or_negative_0800923c"
        },
        "FUN_08002afc": {
            "renaming": {
                "FUN_08002afc": "validate_and_set_float_input_08002afc",
                "param_1": "input1_address",
                "param_2": "input2_address",
                "iVar1": "is_input1_empty",
                "uVar2": "calculated_bits",
                "uVar3": "input2_value",
                "is_input2_empty": "is_input2_empty",
                "is_input_valid": "is_input_valid"
            },
            "code": "void validate_and_set_float_input_08002afc(int input1_address, int input2_address)\\n{\\n  int is_input1_empty;\\n  undefined4 calculated_bits;\\n  undefined4 input2_value;\\n  int is_input2_empty;\\n  \\n  if (((input1_address != 0) && (*(char *)(input1_address + 0x25) == \"\\0\")) &&\\n     (is_input1_empty = is_input_empty_08009228(*(undefined4 *)(input1_address + 0x18),*(undefined4 *)(input2_address + 0x18)),\\n     is_input1_empty != 0)) {\\n    input2_value = *(undefined4 *)(input2_address + 0x18);\\n    calculated_bits = calculate_float_bits_08002978(*(uint *)(PTR_DAT_08002ba4 + 0x20) ^ 0x80000000,\\n                         *(undefined4 *)(input1_address + 0x18),*(undefined4 *)(input1_address + 0x20));\\n    is_input2_empty = is_input_empty_08009228(input2_value,calculated_bits);\\n    if (is_input2_empty == 0) {\\n      calculated_bits = calculate_float_bits_08002978(*(uint *)(PTR_DAT_08002ba4 + 0x20) ^ 0x80000000,\\n                           *(undefined4 *)(input1_address + 0x18),*(undefined4 *)(input1_address + 0x20));\\n    }\\n    else {\\n      calculated_bits = *(undefined4 *)(input2_address + 0x18);\\n    }\\n    int is_input_valid = check_if_input_is_valid_08009214(calculated_bits,*(undefined4 *)(input2_address + 0x18));\\n    if (is_input_valid == 0) {\\n      *(undefined4 *)(input2_address + 0x18) = calculated_bits;\\n      *(undefined *)(input2_address + 0x24) = 1;\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08009214",
                "FUN_08009228",
                "FUN_08002978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002afc",
            "calling": [
                "FUN_08002ba8"
            ],
            "imported": false,
            "current_name": "validate_and_set_float_input_08002afc"
        },
        "FUN_08004c48": {
            "renaming": {
                "FUN_08004c48": "initialize_data_08004c48",
                "param_1": "input_char",
                "PTR_DAT_08004d0c": "data_ptr",
                "DAT_08004d10": "data_value",
                "PTR_DAT_08004d0c + 4": "data_ptr[1]",
                "PTR_DAT_08004d0c + 8": "data_ptr[2]",
                "PTR_DAT_08004d0c + 0x10": "data_ptr[4]",
                "PTR_DAT_08004d0c + 0x14": "data_ptr[5]",
                "PTR_DAT_08004d0c + 0x1c": "data_ptr[7]",
                "PTR_DAT_08004d0c + 0x18": "*(short *)(data_ptr + 6)",
                "PTR_DAT_08004d0c + 0x1a": "*(short *)(data_ptr + 7)",
                "PTR_DAT_08004d0c + 0x20": "data_ptr[8]",
                "PTR_DAT_08004d0c + 0x24": "data_ptr[10]",
                "PTR_DAT_08004d0c + 0x28": "PTR_DAT_08004d0c[40]",
                "PTR_DAT_08004d0c + 0x2a": "*(short *)(PTR_DAT_08004d0c + 42)",
                "PTR_DAT_08004d0c + 0x2c": "PTR_DAT_08004d0c[44]",
                "PTR_DAT_08004d0c + 0x30": "PTR_DAT_08004d0c[48]",
                "PTR_DAT_08004d0c + 0x34": "*(short *)(PTR_DAT_08004d0c + 52)",
                "PTR_DAT_08004d0c + 0x38": "PTR_DAT_08004d0c[56]",
                "PTR_DAT_08004d0c + 0x3c": "PTR_DAT_08004d0c[60]",
                "PTR_DAT_08004d0c + 0x3d": "PTR_DAT_08004d0c[61]",
                "PTR_DAT_08004d0c + 0x3e": "PTR_DAT_08004d0c[62]"
            },
            "code": "void initialize_data_08004c48(char input_char) {\n  if (input_char != '\\0') {\n    int *PTR_DAT_08004d0c = PTR_DAT_08004d0c;\n    int DAT_08004d10 = DAT_08004d10;\n    PTR_DAT_08004d0c[0] = DAT_08004d10;\n    PTR_DAT_08004d0c + 4 = DAT_08004d10;\n    PTR_DAT_08004d0c + 8 = DAT_08004d10;\n    PTR_DAT_08004d0c[13] = 10;\n    PTR_DAT_08004d0c + 0x10 = DAT_08004d14;\n    PTR_DAT_08004d0c + 0x14 = DAT_08004d18;\n    PTR_DAT_08004d0c + 0x20 = DAT_08004d1c;\n    PTR_DAT_08004d0c + 0x1c = DAT_08004d20;\n    PTR_DAT_08004d0c + 0x18 = 0;\n    PTR_DAT_08004d0c + 0x1a = 2688;\n    PTR_DAT_08004d0c + 0x24 = DAT_08004d24;\n  }\n  PTR_DAT_08004d0c + 0x28 |= 2;\n  PTR_DAT_08004d0c + 0x28 |= 16;\n  PTR_DAT_08004d0c + 0x2a = 0;\n  PTR_DAT_08004d0c + 0x2c = DAT_08004d28;\n  PTR_DAT_08004d0c + 0x30 = DAT_08004d14;\n  PTR_DAT_08004d0c + 0x34 = 100;\n  PTR_DAT_08004d0c[54] = 63;\n  PTR_DAT_08004d0c[55] = 3;\n  PTR_DAT_08004d0c + 0x38 = 25;\n  write_to_buffer_and_sum_if_empty_08004c2a();\n  return;\n}",
            "called": [
                "FUN_08004c2a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c48",
            "calling": [
                "FUN_080051b4",
                "FUN_08004dd2"
            ],
            "imported": false,
            "current_name": "initialize_data_08004c48"
        },
        "FUN_080002a0": {
            "renaming": {
                "FUN_080002a0": "validate_data_080002a0",
                "param_1": "data",
                "check_data_08005a98": "check_data"
            },
            "code": "void validate_data_080002a0(void* data) {\n  check_data(data);\n  return;\n}",
            "called": [
                "FUN_08005a98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002a0",
            "calling": [
                "FUN_08002408"
            ],
            "imported": false,
            "current_name": "validate_data_080002a0"
        },
        "FUN_08009250": {
            "renaming": {
                "FUN_08009250": "validate_results_08009250",
                "in_ZR": "in_zero",
                "in_CY": "in_carry",
                "calculate_and_concatenate_results_080091fc": "calculate_and_concatenate_results"
            },
            "code": "bool validate_results_08009250(void)\n{\n    undefined in_zero;\n    undefined in_carry;\n\n    calculate_and_concatenate_results();\n    return !(bool)in_carry || (bool)in_zero;\n}",
            "called": [
                "FUN_080091fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009250",
            "calling": [
                "FUN_08003004",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "validate_results_08009250"
        },
        "FUN_0800640c": {
            "renaming": {
                "FUN_0800640c": "set_bits_based_on_param_0800640c",
                "param_1": "param",
                "param_2": "first_bits",
                "param_3": "second_bits",
                "local_1c": "local_var1",
                "local_18": "local_var2",
                "local_14": "local_var3",
                "local_10": "local_var4",
                "local_c": "local_var5"
            },
            "code": "void set_bits_based_on_param_0800640c(int param, uint32_t first_bits, uint32_t second_bits)\n{\n    uint32_t* ptr_local_var1 = (uint32_t*)(DAT_080064b0 + 0x30);\n    uint32_t* ptr_local_var2 = (uint32_t*)(DAT_080064b0 + 8);\n    uint32_t local_var1;\n    uint32_t local_var2;\n    uint32_t local_var3;\n    uint32_t local_var4;\n    uint32_t local_var5;\n    if (param == 0) {\n        *ptr_local_var1 |= 1;\n        local_var1 = 0x100;\n        local_var2 = 2;\n        local_var3 = 3;\n        local_var4 = 0;\n        local_var5 = 0;\n        set_bits_08006e88(DAT_080064b4, &local_var1);\n        *ptr_local_var2 = second_bits | first_bits | (*ptr_local_var2 & 0xf89fffff);\n    }\n    else {\n        *ptr_local_var1 |= 4;\n        local_var1 = 0x200;\n        local_var2 = 2;\n        local_var3 = 3;\n        local_var4 = 0;\n        local_var5 = 0;\n        set_bits_08006e88(DAT_080064b8, &local_var1);\n        *ptr_local_var2 = first_bits | (second_bits << 3) | (*ptr_local_var2 & 0x7ffffff);\n    }\n}",
            "called": [
                "FUN_08006e88"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800640c",
            "calling": [],
            "imported": false,
            "current_name": "set_bits_based_on_param_0800640c"
        },
        "FUN_08008af0": {
            "renaming": {
                "FUN_08008af0": "check_params_and_return_08008af0",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "check_and_return_param_08008b00": "check_and_return_param"
            },
            "code": "void check_params_and_return_08008af0(undefined4 first_param, undefined4 second_param, undefined4 third_param, undefined4 fourth_param)\n{\n    check_and_return_param_08008b00(third_param, fourth_param, first_param, second_param);\n    return;\n}",
            "called": [
                "FUN_08008b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af0",
            "calling": [
                "FUN_08008b60",
                "FUN_08008b4c"
            ],
            "imported": false,
            "current_name": "check_params_and_return_08008af0"
        },
        "FUN_08006e1a": {
            "renaming": {
                "FUN_08006e1a": "is_param_bit_set_08006e1a",
                "param_1": "param",
                "uVar1": "result",
                "isBitSet_08006ac0": "is_bit_set"
            },
            "code": "int is_param_bit_set_08006e1a(int param) {\n    int result = is_bit_set(param);\n    return result;\n}",
            "called": [
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e1a",
            "calling": [],
            "imported": false,
            "current_name": "is_param_bit_set_08006e1a"
        },
        "FUN_080052ac": {
            "renaming": {
                "FUN_080052ac": "update_parameter_080052ac",
                "param_1": "new_param",
                "PTR_DAT_080052d8": "ptr",
                "DAT_080052d8": "offset",
                "current_value": "current_value",
                "mask": "mask"
            },
            "code": "void update_parameter_080052ac(uint new_param) {\n    uint* PTR_DAT_080052d8 = (uint*)(DAT_080052d8 + 0x14);\n    uint current_value = *PTR_DAT_080052d8;\n    uint mask = 0xfffffaaf;\n    *PTR_DAT_080052d8 = (new_param | (current_value & mask));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052ac",
            "calling": [
                "FUN_0800583c",
                "FUN_08005778",
                "FUN_08005760"
            ],
            "imported": false,
            "current_name": "update_parameter_080052ac"
        },
        "FUN_08008286": {
            "renaming": {
                "FUN_08008286": "check_for_special_character_08008286",
                "uVar1": "second_byte",
                "iVar2": "is_bit_set",
                "is_bit_set_08007e58": "check_bit_set",
                "get_second_byte_08007e84": "get_second_byte",
                "check_special_character_08005900": "check_special_character"
            },
            "code": "uint8_t check_for_special_character_08008286(void)\n{\n  uint8_t second_byte = get_second_byte_08007e84();\n  int is_bit_set = is_bit_set_08007e58();\n  if (is_bit_set) {\n    int is_special_char = check_special_character_08005900(second_byte);\n    if (!is_special_char) {\n      return second_byte;\n    }\n  }\n  return 0xff;\n}",
            "called": [
                "FUN_08005900",
                "FUN_08007e84",
                "FUN_08007e58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008286",
            "calling": [
                "FUN_08003f34"
            ],
            "imported": false,
            "current_name": "check_for_special_character_08008286"
        },
        "FUN_0800b5bc": {
            "renaming": {
                "FUN_0800b5bc": "do_nothing_0800b5bc"
            },
            "code": "\nvoid do_nothing_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b5bc",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_0800b5bc"
        },
        "FUN_08008b74": {
            "renaming": {
                "FUN_08008b74": "is_valid_input_08008b74",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08008b74(uint32_t input1, int input2, uint32_t input3, int input4) {\n    int is_input2_valid = ((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0);\n    int is_input4_valid = ((input4 << 1) >> 0x15 != -1) || ((input3 | input4 << 0xc) == 0);\n    if (is_input2_valid && is_input4_valid) {\n        return 1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b74",
            "calling": [
                "FUN_080098d0"
            ],
            "imported": false,
            "current_name": "is_valid_input_08008b74"
        },
        "FUN_0800b524": {
            "renaming": {
                "FUN_0800b524": "add_to_list_0800b524",
                "param_1": "type",
                "param_2": "value",
                "param_3": "flag",
                "param_4": "flag_value",
                "puVar1": "HEAD_PTR_PTR",
                "uVar2": "return_value",
                "uVar3": "bitmap",
                "iVar4": "node_array_address",
                "iVar5": "node_count",
                "uVar6": "bitmap_index"
            },
            "code": "int add_to_list_0800b524(int type, int value, int flag, int flag_value) {\n  Node *current_node;\n  int node_count;\n  int node_array_address;\n  uint32_t bitmap;\n  \n  current_node = HEAD_PTR_PTR;\n  do_nothing(HEAD_PTR_PTR->data);\n  node_array_address = *(int *)NODE_ARRAY_PTR_PTR;\n  node_count = *(int *)(node_array_address + NODE_COUNT_OFFSET);\n  if (node_count == 0) {\n    node_count = node_array_address + NODE_ARRAY_START_OFFSET;\n    *(int *)(node_array_address + NODE_COUNT_OFFSET) = node_count;\n  }\n  bitmap = *(uint32_t *)(node_count + NODE_BITMAP_OFFSET);\n  if ((int)bitmap < NODE_ARRAY_SIZE) {\n    if (type != 0) {\n      node_array_address = node_count + bitmap * NODE_SIZE;\n      *(int *)(node_array_address + NODE_VALUE_OFFSET) = value;\n      bitmap = 1 << (bitmap & 0xff);\n      *(uint32_t *)(node_count + NODE_BITMAP_OFFSET) = *(uint32_t *)(node_count + NODE_BITMAP_OFFSET) | bitmap;\n      *(int *)(node_array_address + NODE_FLAG_OFFSET) = flag_value;\n      if (type == 2) {\n        *(uint32_t *)(node_count + NODE_FLAG_BITMAP_OFFSET) = bitmap | *(uint32_t *)(node_count + NODE_FLAG_BITMAP_OFFSET);\n      }\n    }\n    do_nothing(*(int *)HEAD_PTR_PTR);\n    *(uint32_t *)(node_count + NODE_BITMAP_OFFSET) = bitmap + 1;\n    *(int *)(node_count + (bitmap + 2) * NODE_SIZE) = flag;\n    do_nothing(*(int *)HEAD_PTR_PTR->data);\n    return 0;\n  }\n  else {\n    do_nothing(*(int *)HEAD_PTR_PTR->data);\n    return -1;\n  }\n}",
            "called": [
                "FUN_0800b51c",
                "FUN_0800b520"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b524",
            "calling": [
                "FUN_0800b4d0"
            ],
            "imported": false,
            "current_name": "add_to_list_0800b524"
        },
        "FUN_08005214": {
            "renaming": {
                "FUN_08005214": "do_nothing_08005214"
            },
            "code": "\nvoid do_nothing_08005214(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005214",
            "calling": [
                "FUN_08005250"
            ],
            "imported": false,
            "current_name": "do_nothing_08005214"
        },
        "FUN_08007ea4": {
            "renaming": {
                "DAT_08007f38": "FLAG_A",
                "DAT_08007f40": "FLAG_B",
                "DAT_08007f44": "FLAG_C",
                "DAT_08007f48": "FLAG_D",
                "DAT_08007f4c": "FLAG_E",
                "DAT_08007f50": "FLAG_F",
                "FUN_08007ea4": "set_flags_08007ea4",
                "param_1": "flag",
                "DAT_08007f3c": "flags_memory",
                "uint": "unsigned int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void set_flags_08007ea4(int flag){\n                    uint* flags_ptr = (uint*)(DAT_08007f3c + 0x40);\n                    uint* other_flags_ptr = (uint*)(DAT_08007f3c + 0x44);\n                    switch(flag){\n                        case DAT_08007f38:\n                            *other_flags_ptr |= 0x10;\n                            break;\n                        case DAT_08007f40:\n                            *flags_ptr |= 0x20000;\n                            break;\n                        case DAT_08007f44:\n                            *flags_ptr |= 0x40000;\n                            break;\n                        case DAT_08007f48:\n                            *flags_ptr |= 0x80000;\n                            break;\n                        case DAT_08007f4c:\n                            *flags_ptr |= 0x100000;\n                            break;\n                        case DAT_08007f50:\n                            *other_flags_ptr |= 0x20;\n                            break;\n                        default:\n                            break;\n                    }\n                }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ea4",
            "calling": [
                "FUN_08008190"
            ],
            "imported": false,
            "current_name": "set_flags_08007ea4"
        },
        "FUN_08007756": {
            "renaming": {
                "FUN_08007756": "check_data_and_process_08007756",
                "uVar1": "data",
                "get_data_from_pointer_08005a84": "get_data_from_pointer",
                "set_bit_in_array_080076c8": "set_bit_in_array",
                "process_data_08007930": "process_data",
                "increment_pointer_value_08005a68": "increment_pointer_value"
            },
            "code": "void check_data_and_process_08007756() {\n  uint32_t data = get_data_from_pointer_08005a84();\n  if ((data & 0x1ff) == 0) {\n    set_bit_in_array_080076c8(0x3c);\n  }\n  if ((data & 0xf) == 0) {\n    process_data();\n  }\n  increment_pointer_value_08005a68();\n  return;\n}",
            "called": [
                "FUN_08007930",
                "FUN_080076c8",
                "FUN_08005a68",
                "FUN_08005a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007756",
            "calling": [],
            "imported": false,
            "current_name": "check_data_and_process_08007756"
        },
        "FUN_0800b520": {
            "renaming": {
                "FUN_0800b520": "do_nothing_0800b520"
            },
            "code": "\nvoid do_nothing_0800b520(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b520",
            "calling": [
                "FUN_0800b524"
            ],
            "imported": false,
            "current_name": "do_nothing_0800b520"
        },
        "FUN_0800423c": {
            "renaming": {
                "FUN_0800423c": "process_grbl_settings_view_0800423c",
                "process_string_080036c6": "process_string_view_settings"
            },
            "code": "void process_grbl_settings_view_0800423c(void)\n{\n  process_string_view_settings(PTR_s_____view_Grbl_settings______view_0800424c);\n  return;\n}",
            "called": [
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800423c",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "process_grbl_settings_view_0800423c"
        },
        "FUN_08009264": {
            "renaming": {
                "FUN_08009264": "is_input_null_08009264_08009264",
                "in_CY": "input_char"
            },
            "code": "bool is_input_null_08009264_08009264(void)\n{\n  char input_char;\n  calculate_and_concatenate_results_080091fc();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_080091fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009264",
            "calling": [
                "FUN_080029d8",
                "FUN_08003004"
            ],
            "imported": false,
            "current_name": "is_input_null_08009264_08009264"
        },
        "FUN_08007e08": {
            "renaming": {
                "FUN_08007e08": "initialize_and_enable_data_ready_interrupt_08007e08",
                "initialize_data_section_08007ad0": "initialize_data_section",
                "initialize_flag_08007d08": "initialize_flag",
                "set_data_ready_flag_and_enable_interrupts_08007da8": "set_data_ready_flag_and_enable_interrupts"
            },
            "code": "void initialize_and_enable_data_ready_interrupt_08007e08(void)\n{\n  initialize_data_section_08007ad0();\n  initialize_flag_08007d08();\n  set_data_ready_flag_and_enable_interrupts_08007da8();\n  return;\n}",
            "called": [
                "FUN_08007ad0",
                "FUN_08007d08",
                "FUN_08007da8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e08",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "initialize_and_enable_data_ready_interrupt_08007e08"
        },
        "FUN_08002fac": {
            "renaming": {
                "FUN_08002fac": "check_if_ptrs_equal_08002fac",
                "*PTR_DAT_08002fcc": "*ptr1",
                "*PTR_DAT_08002fd0": "*ptr2"
            },
            "code": "bool check_if_ptrs_equal_08002fac(void)\n{\n  return *PTR_DAT_08002fcc == *PTR_DAT_08002fd0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fac",
            "calling": [
                "FUN_08001e98"
            ],
            "imported": false,
            "current_name": "check_if_ptrs_equal_08002fac"
        },
        "FUN_080002b6": {
            "renaming": {
                "FUN_080002b6": "find_matching_value_080002b6",
                "param_1": "target_value",
                "uVar1": "current_high_bits",
                "uVar2": "high_bits",
                "bVar3": "found_match",
                "lVar4": "pointer_value",
                "uVar5": "current_value"
            },
            "code": "void find_matching_value_080002b6(uint target_value) {\n  longlong pointer_value = get_pointer_value();\n  uint high_bits = (uint)(pointer_value + (ulonglong)target_value >> 0x20);\n  bool found_match = false;\n  do {\n    longlong current_value = get_pointer_value();\n    uint current_high_bits = (uint)((ulonglong)current_value >> 0x20);\n    if (current_high_bits == high_bits) {\n      found_match = (uint)(pointer_value + (ulonglong)target_value) <= (uint)current_value;\n    }\n    else {\n      found_match = current_high_bits > high_bits;\n    }\n  } while (!found_match);\n}",
            "called": [
                "FUN_08000268"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002b6",
            "calling": [],
            "imported": false,
            "current_name": "find_matching_value_080002b6"
        }
    },
    "used_tokens": 194171,
    "layers": [
        [
            "FUN_0800192c",
            "FUN_08006950",
            "FUN_08008ba0",
            "FUN_08007a10",
            "FUN_0800856c",
            "FUN_0800597c",
            "FUN_08009798",
            "FUN_08000188",
            "FUN_080018cc",
            "FUN_080079e0",
            "FUN_08006a58",
            "FUN_08005a84",
            "FUN_08008c30",
            "FUN_08007bf0",
            "FUN_08008590",
            "FUN_08007c5e",
            "FUN_0800587c",
            "FUN_08008a02",
            "FUN_080028bc",
            "FUN_0800738e",
            "FUN_0800a1bc",
            "FUN_080073d4",
            "FUN_08006e88",
            "FUN_08009990",
            "FUN_08007e58",
            "FUN_080059f8",
            "FUN_0800b3dc",
            "FUN_0800756c",
            "FUN_08002f74",
            "FUN_0800b3e8",
            "FUN_08006a18",
            "FUN_08006ac0",
            "FUN_0800919c",
            "FUN_0800854c",
            "FUN_08008e44",
            "FUN_0800733e",
            "FUN_080069e4",
            "FUN_0800b2d4",
            "FUN_08008e3c",
            "FUN_08009654",
            "FUN_08007bc2",
            "FUN_080035ec",
            "FUN_08006c70",
            "FUN_08005a68",
            "FUN_0800b2e0",
            "FUN_08002908",
            "FUN_08007c40",
            "FUN_08006b54",
            "FUN_08007e84",
            "FUN_0800b2e8",
            "FUN_08007402",
            "FUN_08002870",
            "FUN_08000210",
            "FUN_08006c04",
            "thunk_FUN_08009990",
            "FUN_08009278",
            "FUN_08007da8",
            "FUN_08008a74",
            "FUN_0800b430",
            "FUN_08005360",
            "FUN_08003980",
            "FUN_080052dc",
            "FUN_080064ec",
            "FUN_08006ba0",
            "FUN_08002896",
            "FUN_080001ac",
            "FUN_08000478",
            "FUN_08007e1c",
            "FUN_08006b00",
            "FUN_08005250",
            "FUN_08007430",
            "FUN_08005bdc",
            "FUN_080069b4",
            "FUN_08007b70",
            "FUN_080018fc",
            "FUN_08006998",
            "FUN_080078f4",
            "FUN_08008bf0",
            "FUN_08007854",
            "FUN_080076c8",
            "FUN_08006a8c",
            "FUN_0800881c",
            "FUN_080052ac",
            "FUN_08008b74",
            "FUN_0800b524",
            "FUN_08007ea4",
            "FUN_08002fac"
        ],
        [
            "FUN_08005984",
            "FUN_08008b00",
            "FUN_08009204",
            "FUN_08005760",
            "FUN_08005a98",
            "FUN_08006c9c",
            "FUN_08005778",
            "FUN_08006628",
            "FUN_08008250",
            "FUN_08006ce0",
            "FUN_08006d4a",
            "FUN_08006dfe",
            "FUN_08006d66",
            "FUN_080095b8",
            "FUN_08006cf6",
            "FUN_08002ef0",
            "FUN_08000268",
            "FUN_080001f8",
            "FUN_08006d98",
            "FUN_080079c0",
            "FUN_080057e4",
            "FUN_08006d8a",
            "FUN_08007520",
            "FUN_08007884",
            "FUN_08006dc4",
            "FUN_08005c30",
            "FUN_0800056c",
            "FUN_0800981c",
            "FUN_080004fc",
            "FUN_08005238",
            "FUN_08007d08",
            "FUN_08006de0",
            "FUN_08006d2e",
            "FUN_0800adf0",
            "FUN_0800b4d0",
            "FUN_08002f40",
            "FUN_080002f0",
            "FUN_0800778c",
            "FUN_08005790",
            "FUN_0800826a",
            "FUN_08005324",
            "FUN_0800640c",
            "FUN_08006e1a"
        ],
        [
            "FUN_0800585c",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_0800369c",
            "FUN_08009214",
            "FUN_080036f0",
            "FUN_08001d4c",
            "FUN_08003778",
            "FUN_08006d72",
            "FUN_080096e8",
            "FUN_0800583c",
            "FUN_08009410",
            "FUN_08002f24",
            "FUN_08006680",
            "FUN_08000340",
            "FUN_080091fc",
            "FUN_080036c6",
            "FUN_080025e8",
            "FUN_08005814",
            "FUN_08009228",
            "FUN_08007c7c",
            "FUN_080066cc",
            "FUN_0800618c",
            "FUN_0800283a",
            "FUN_08000310",
            "FUN_08007a70",
            "FUN_0800923c",
            "FUN_080002a0",
            "FUN_08008af0",
            "FUN_080002b6"
        ],
        [
            "FUN_08007930",
            "FUN_08009318",
            "FUN_080029d8",
            "FUN_080094c0",
            "FUN_08002638",
            "FUN_08004d7c",
            "FUN_08007f54",
            "FUN_08004d2c",
            "FUN_08003826",
            "FUN_08002afc",
            "FUN_08004c48"
        ],
        [
            "FUN_080044e8",
            "FUN_08004dd2",
            "FUN_0800184c",
            "FUN_080046d0",
            "FUN_08002c18",
            "FUN_08002ba8",
            "FUN_08004250",
            "FUN_08004940",
            "FUN_08002a94",
            "FUN_08008190",
            "FUN_080039bc",
            "FUN_080004ac",
            "FUN_08007756"
        ],
        [
            "FUN_080051b4",
            "FUN_08002e08"
        ],
        [
            "FUN_08002edc"
        ],
        [
            "FUN_08003618"
        ],
        [
            "FUN_080058a0"
        ],
        [
            "FUN_08003a74"
        ],
        [
            "FUN_08001e98",
            "FUN_08002fd4"
        ],
        [
            "FUN_0800525c",
            "FUN_08000220",
            "FUN_08002408",
            "FUN_080024c4"
        ],
        [
            "FUN_08003b98"
        ],
        [
            "FUN_08003f34"
        ],
        [
            "FUN_08001ddc"
        ],
        [
            "FUN_08007540"
        ],
        [
            "FUN_080092c4"
        ]
    ],
    "locked_functions": []
}