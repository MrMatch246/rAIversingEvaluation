{
    "functions": {
        "FUN_00000410": {
            "entrypoint": "0x00000410",
            "current_name": "initialize_system_00000410",
            "code": "\nvoid initialize_system_00000410(void)\n\n{\n  initialize_system_00000410_00000df4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000410": "initialize_system_00000410"
            },
            "calling": [
                "FUN_0000459c"
            ],
            "called": [
                "FUN_00000df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000428": {
            "entrypoint": "0x00000428",
            "current_name": "update_elf_relocation_00000428",
            "code": "\ndword update_elf_relocation_00000428(undefined4 *output_address,int input_offset)\n\n{\n  undefined4 irq_interrupts_enabled;\n  dword result;\n  \n  irq_interrupts_enabled = check_irq_interrupts_enabled_00000cd0();\n  result = relocation_array[0].r_offset;\n  if ((input_offset + relocation_array[0].r_offset < 0x20030001) &&\n     (0x1fff0def < input_offset + relocation_array[0].r_offset)) {\n    relocation_array[0].r_offset = input_offset + relocation_array[0].r_offset;\n  }\n  else {\n    *output_address = 0xc;\n    result = 0xffffffff;\n  }\n  enable_ir_qinterrupts_if_privileged_00000d0c(irq_interrupts_enabled);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000428": "update_elf_relocation_00000428",
                "param_1": "output_address",
                "param_2": "input_offset",
                "uVar1": "irq_interrupts_enabled",
                "local_c": "result",
                "Elf32_Rel_ARRAY_1fff0200": "relocation_array"
            },
            "calling": [
                "FUN_00004bd0"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000490": {
            "entrypoint": "0x00000490",
            "current_name": "process_and_return_interrupt_00000490",
            "code": "\nundefined4 process_and_return_interrupt_00000490(undefined4 input_param1,undefined4 input_param2,undefined4 interrupt_param1,undefined4 interrupt_param2)\n\n{\n  undefined4 interrupt_result;\n  \n  interrupt_result = process_interrupt_and_return_00000e14(interrupt_param1,interrupt_param2);\n  return interrupt_result;\n}\n\n",
            "renaming": {
                "FUN_00000490": "process_and_return_interrupt_00000490",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "interrupt_param1",
                "param_4": "interrupt_param2",
                "uVar1": "interrupt_result"
            },
            "calling": [
                "FUN_00004dc8"
            ],
            "called": [
                "FUN_00000e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000004f2": {
            "entrypoint": "0x000004f2",
            "current_name": "initialize_value_and_return_000004f2",
            "code": "\nundefined4 initializeValueAndReturn_000004f2(undefined4 *valuePtr)\n\n{\n  *valuePtr = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000004f2": "initialize_value_and_return_000004f2",
                "param_1": "valuePtr"
            },
            "calling": [
                "FUN_00004e26",
                "FUN_00004dee"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000514": {
            "entrypoint": "0x00000514",
            "current_name": "initialize_value_and_return_00000514",
            "code": "\nundefined4 initializeValueAndReturn_00000514(undefined4 *outputPointer)\n\n{\n  *outputPointer = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00000514": "initialize_value_and_return_00000514",
                "param_1": "outputPointer"
            },
            "calling": [
                "FUN_000056b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000534": {
            "entrypoint": "0x00000534",
            "current_name": "check_param_00000534",
            "code": "\nundefined4 checkParam_00000534(undefined4 *result,int input)\n\n{\n  undefined4 isValid;\n  \n  *result = 0;\n  if (((input == 0) || (input == 1)) || (input == 2)) {\n    isValid = 1;\n  }\n  else {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_00000534": "check_param_00000534",
                "param_1": "result",
                "param_2": "input",
                "uVar1": "isValid"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000566": {
            "entrypoint": "0x00000566",
            "current_name": "reverse_byte_order_00000566",
            "code": "\nint reverseByteOrder_00000566(int input)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  byte byte4;\n  int reversedByteOrder;\n  \n  byte2 = (byte)input;\n  byte3 = (byte)((uint)input >> 8);\n  byte4 = (byte)((uint)input >> 0x10);\n  byte1 = (byte)((uint)input >> 0x18);\n  reversedByteOrder = LZCOUNT((uint)(byte)((((((((byte2 & 1) << 1 | byte2 >> 1 & 1) << 1 | byte2 >> 2 & 1) << 1\n                                  | byte2 >> 3 & 1) << 1 | byte2 >> 4 & 1) << 1 | byte2 >> 5 & 1) <<\n                                1 | byte2 >> 6 & 1) << 1 | byte2 >> 7) << 0x18 |\n                  (uint)(byte)((((((((byte3 & 1) << 1 | byte3 >> 1 & 1) << 1 | byte3 >> 2 & 1) << 1\n                                  | byte3 >> 3 & 1) << 1 | byte3 >> 4 & 1) << 1 | byte3 >> 5 & 1) <<\n                                1 | byte3 >> 6 & 1) << 1 | byte3 >> 7) << 0x10 |\n                  (uint)(byte)((((((((byte4 & 1) << 1 | byte4 >> 1 & 1) << 1 | byte4 >> 2 & 1) << 1\n                                  | byte4 >> 3 & 1) << 1 | byte4 >> 4 & 1) << 1 | byte4 >> 5 & 1) <<\n                                1 | byte4 >> 6 & 1) << 1 | byte4 >> 7) << 8 |\n                  (uint)(byte)((((((((byte1 & 1) << 1 | byte1 >> 1 & 1) << 1 | byte1 >> 2 & 1) << 1\n                                  | byte1 >> 3 & 1) << 1 | byte1 >> 4 & 1) << 1 | byte1 >> 5 & 1) <<\n                                1 | byte1 >> 6 & 1) << 1 | byte1 >> 7));\n  if (input == 0) {\n    reversedByteOrder = -1;\n  }\n  return reversedByteOrder;\n}\n\n",
            "renaming": {
                "FUN_00000566": "reverse_byte_order_00000566",
                "param_1": "input",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "bVar4": "byte4",
                "iVar5": "reversedByteOrder"
            },
            "calling": [
                "FUN_00000610"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000058e": {
            "entrypoint": "0x0000058e",
            "current_name": "update_pointer_0000058e",
            "code": "\nvoid updatePointer_0000058e(int *ptrToUpdate,undefined4 *newPointer)\n\n{\n  if (*ptrToUpdate == 0) {\n    *newPointer = newPointer;\n  }\n  else {\n    *newPointer = *(undefined4 *)*ptrToUpdate;\n    *(undefined4 **)*ptrToUpdate = newPointer;\n  }\n  *ptrToUpdate = (int)newPointer;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000058e": "update_pointer_0000058e",
                "param_1": "ptrToUpdate",
                "param_2": "newPointer"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000005ca": {
            "entrypoint": "0x000005ca",
            "current_name": "extract_element_from_pointer_000005ca",
            "code": "\nundefined4 * extractElementFromPointer_000005ca(int *inputPointer)\n\n{\n  undefined4 *extractedElement;\n  \n  if (*inputPointer == 0) {\n    extractedElement = (undefined4 *)0x0;\n  }\n  else {\n    extractedElement = *(undefined4 **)*inputPointer;\n    if (extractedElement == (undefined4 *)*inputPointer) {\n      *inputPointer = 0;\n    }\n    else {\n      *(undefined4 *)*inputPointer = *extractedElement;\n    }\n  }\n  return extractedElement;\n}\n\n",
            "renaming": {
                "FUN_000005ca": "extract_element_from_pointer_000005ca",
                "param_1": "inputPointer",
                "puVar1": "extractedElement"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000610": {
            "entrypoint": "0x00000610",
            "current_name": "process_data_00000610",
            "code": "\nundefined4 processData_00000610(void)\n\n{\n  int inputPointer;\n  int reversedValue;\n  undefined4 result;\n  \n  inputPointer = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  reversedValue = reverse_byte_order_00000566(DAT_1fff0424);\n  reversedValue = **(int **)(&DAT_1fff03e4 + reversedValue * 4);\n  if (inputPointer == reversedValue + -8) {\n    result = 0;\n  }\n  else {\n    if ((inputPointer != 0) && (*(char *)(inputPointer + 4) == '\\t')) {\n      *(undefined *)(inputPointer + 4) = 10;\n    }\n    *(undefined *)(reversedValue + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(reversedValue + -2);\n    result = 1;\n    DAT_1fff03dc = reversedValue + -8;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000610": "process_data_00000610",
                "iVar1": "inputPointer",
                "iVar2": "reversedValue",
                "uVar3": "result"
            },
            "calling": [],
            "called": [
                "FUN_00000566"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000698": {
            "entrypoint": "0x00000698",
            "current_name": "update_pointer_and_flag_00000698",
            "code": "\nvoid updatePointerAndFlag_00000698(int inputParam,uint elementToUpdate)\n\n{\n  if (elementToUpdate < 9) {\n    if ((8 < *(byte *)(inputParam + 4)) &&\n       (extract_element_from_pointer_000005ca(&DAT_1fff03e4 + (uint)*(byte *)(inputParam + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(byte *)(inputParam + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(sbyte *)(inputParam + 5));\n    }\n  }\n  else if (*(byte *)(inputParam + 4) < 9) {\n    update_pointer_0000058e(&DAT_1fff03e4 + (uint)*(byte *)(inputParam + 5) * 4,inputParam + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(sbyte *)(inputParam + 5);\n  }\n  *(char *)(inputParam + 4) = (char)elementToUpdate;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000698": "update_pointer_and_flag_00000698",
                "param_1": "inputParam",
                "param_2": "elementToUpdate"
            },
            "calling": [
                "FUN_00000794",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_000005ca",
                "FUN_0000058e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000738": {
            "entrypoint": "0x00000738",
            "current_name": "check_exception_and_set_flag_00000738",
            "code": "\nvoid checkExceptionAndSetFlag_00000738(ushort input_value)\n\n{\n  int iVar1;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (input_value < *(byte *)(DAT_1fff03dc + 5))) {\n    iVar1 = getExceptionNumber();\n    if (iVar1 == 0) {\n      setFlagBit();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000738": "check_exception_and_set_flag_00000738",
                "param_1": "input_value",
                "get_exception_number_00000d2a": "getExceptionNumber",
                "set_flag_bit_0000093c": "setFlagBit"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_0000093c",
                "FUN_00000d2a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000794": {
            "entrypoint": "0x00000794",
            "current_name": "initialize_int_array_00000794",
            "code": "\nint * initializeIntArray_00000794(void)\n\n{\n  int returnValue;\n  int loopCounter;\n  undefined4 *pointer;\n  uint alignedAddress;\n  int outerLoopCounter;\n  int innerLoopCounter;\n  int *arrayPointer;\n  \n  check_irq_interrupts_enabled_00000cd0();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  update_pointer_and_flag_00000698(DAT_1fff03dc,0);\n  pointer = &DAT_1fff03dc;\n  loopCounter = 0;\n  DAT_1fff03dc = 0;\n  handle_qinterrupts_00000930();\n  alignedAddress = (int)pointer + loopCounter & 0xfffffffc;\n  arrayPointer = (int *)(alignedAddress - 4);\n  *arrayPointer = 0x77777777;\n  if (((uint)arrayPointer & 7) != 0) {\n    arrayPointer = (int *)(alignedAddress - 8);\n    *arrayPointer = 0x88888888;\n  }\n  arrayPointer[-1] = 0x1000000;\n  arrayPointer[-2] = loopCounter << 0xd;\n  arrayPointer[-3] = 0x795;\n  arrayPointer = arrayPointer + -4;\n  *arrayPointer = 0;\n  for (innerLoopCounter = 3; 0 < innerLoopCounter; innerLoopCounter = innerLoopCounter + -1) {\n    arrayPointer = arrayPointer + -1;\n    *arrayPointer = innerLoopCounter;\n  }\n  arrayPointer = arrayPointer + -1;\n  *arrayPointer = returnValue;\n  for (outerLoopCounter = 0xb; 3 < outerLoopCounter; outerLoopCounter = outerLoopCounter + -1) {\n    arrayPointer = arrayPointer + -1;\n    *arrayPointer = outerLoopCounter;\n  }\n  arrayPointer[-1] = -3;\n  return arrayPointer + -1;\n}\n\n",
            "renaming": {
                "FUN_00000794": "initialize_int_array_00000794",
                "extraout_r1": "returnValue",
                "iVar1": "loopCounter",
                "puVar2": "pointer",
                "uVar3": "alignedAddress",
                "iStack_1c": "outerLoopCounter",
                "iStack_18": "innerLoopCounter",
                "piStack_14": "arrayPointer"
            },
            "calling": [],
            "called": [
                "FUN_00000cd0",
                "FUN_00000698",
                "FUN_00000930"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000007dc": {
            "entrypoint": "0x000007dc",
            "current_name": "init_memory_000007dc",
            "code": "\nint * initMemory_000007dc(undefined4 handle,int value,int size1,int size2)\n\n{\n  uint alignedSize;\n  int index1;\n  int index2;\n  int *ptr;\n  \n  alignedSize = size2 + size1 & 0xfffffffc;\n  ptr = (int *)(alignedSize - 4);\n  *ptr = 0x77777777;\n  if (((uint)ptr & 7) != 0) {\n    ptr = (int *)(alignedSize - 8);\n    *ptr = 0x88888888;\n  }\n  ptr[-1] = 0x1000000;\n  ptr[-2] = handle;\n  ptr[-3] = 0x795;\n  ptr = ptr + -4;\n  *ptr = 0;\n  for (index2 = 3; 0 < index2; index2 = index2 + -1) {\n    ptr = ptr + -1;\n    *ptr = index2;\n  }\n  ptr = ptr + -1;\n  *ptr = value;\n  for (index1 = 0xb; 3 < index1; index1 = index1 + -1) {\n    ptr = ptr + -1;\n    *ptr = index1;\n  }\n  ptr[-1] = -3;\n  return ptr + -1;\n}\n\n",
            "renaming": {
                "FUN_000007dc": "init_memory_000007dc",
                "param_1": "handle",
                "param_2": "value",
                "param_3": "size1",
                "param_4": "size2",
                "uVar1": "alignedSize",
                "local_14": "index1",
                "local_10": "index2",
                "local_c": "ptr"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000008b8": {
            "entrypoint": "0x000008b8",
            "current_name": "find_last_offset_000008b8",
            "code": "\nint find_last_offset_000008b8(void)\n\n{\n  Elf32_Rel *current_rel_entry;\n  \n  for (current_rel_entry = (Elf32_Rel *)&DAT_1fff0000;\n      (current_rel_entry->r_offset == 0xe7fee7fe && (current_rel_entry < Elf32_Rel_ARRAY_1fff0200));\n      current_rel_entry = (Elf32_Rel *)&current_rel_entry->r_info) {\n  }\n  return ((int)Elf32_Rel_ARRAY_1fff0200 - (int)current_rel_entry >> 2) << 2;\n}\n\n",
            "renaming": {
                "FUN_000008b8": "find_last_offset_000008b8",
                "local_c": "current_rel_entry"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000900": {
            "entrypoint": "0x00000900",
            "current_name": "get_main_stack_pointer_00000900",
            "code": "\nundefined4 getMainStackPointer_00000900(void)\n\n{\n  undefined4 mainStackPointer;\n  \n  mainStackPointer = getMainStackPointer_00000900();\n  return mainStackPointer;\n}\n\n",
            "renaming": {
                "FUN_00000900": "get_main_stack_pointer_00000900",
                "uVar1": "mainStackPointer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000091c": {
            "entrypoint": "0x0000091c",
            "current_name": "get_maximum_value_0000091c",
            "code": "\nunsigned_integer getMaximumValue_0000091c(void)\n\n{\n  return 0x1fff0000;\n}\n\n",
            "renaming": {
                "FUN_0000091c": "get_maximum_value_0000091c",
                "undefined4": "unsigned_integer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000930": {
            "entrypoint": "0x00000930",
            "current_name": "handle_qinterrupts_00000930",
            "code": "\nvoid handle_qinterrupts_00000930(void)\n\n{\n  check_irq_enabled();\n  trigger_interrupt(1);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000930": "handle_qinterrupts_00000930",
                "check_ir_qinterrupts_enabled_00000cf0": "check_irq_enabled",
                "software_interrupt": "trigger_interrupt"
            },
            "calling": [
                "FUN_00000794",
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000093c": {
            "entrypoint": "0x0000093c",
            "current_name": "set_flag_bit_0000093c",
            "code": "\n\n\nvoid set_flag_bit_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000093c": "set_flag_bit_0000093c"
            },
            "calling": [
                "FUN_00000738",
                "FUN_00001348",
                "FUN_00002798",
                "FUN_00001cf0",
                "FUN_00002434"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000990": {
            "entrypoint": "0x00000990",
            "current_name": "FUNC_00000990",
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x0000099c",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  undefined4 uStack_18;\n  undefined4 *local_14;\n  dword *local_10;\n  Elf32_Rel *local_c;\n  \n  local_14 = &uStack_18;\n  local_10 = (dword *)&DAT_00007c60;\n  initialize_and_clear_memory_00000db0();\n  local_c = (Elf32_Rel *)&DAT_1fff0000;\n  while (local_c < &uStack_18) {\n    local_c->r_offset = 0xe7fee7fe;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  local_c = Elf32_Rel_ARRAY_1fff0200;\n  while (local_c < (Elf32_Rel *)&DAT_1fff0350) {\n    local_c->r_offset = *local_10;\n    local_10 = local_10 + 1;\n    local_c = (Elf32_Rel *)&local_c->r_info;\n  }\n  local_c = (Elf32_Rel *)&DAT_1fff0350;\n  while (local_c < (undefined4 *)0x1fff0df0) {\n    local_c->r_offset = 0;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  FUNC_00000990();\n  initialize_and_configure_peripherals_00000e64();\n  initialize_system_and_execute_callbacks_0000459c();\n  initialize_system_00000f8c();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_00000db0",
                "FUN_0000459c",
                "FUN_00000e64",
                "FUN_00000990",
                "FUN_00000f8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000a30": {
            "entrypoint": "0x00000a30",
            "current_name": "initialize_nmi_handler_00000a30",
            "code": "\nundefined * initialize_nmi_handler_00000a30(void)\n\n{\n  int input_value;\n  \n  initialize_riot_system(4,\"NMI HANDLER\");\n  return stack_base + -*(int *)(input_value + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_00000a30": "initialize_nmi_handler_00000a30",
                "in_r3": "input_value",
                "initialize_riot_system_00000f04": "initialize_riot_system",
                "&stack0xe000ffe0": "stack_base"
            },
            "calling": [],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "entrypoint": "0x00000cc0",
            "current_name": "initialize_and_check_interrupts_00000cc0",
            "code": "\nundefined4 initialize_and_check_interrupts_00000cc0(void)\n\n{\n  bool privileged_mode;\n  undefined4 interrupts_enabled;\n  \n  initialize_riot_system_00000f04(10,\"DUMMY HANDLER\");\n  interrupts_enabled = 0;\n  privileged_mode = (bool)check_privileged_mode();\n  if (privileged_mode) {\n    interrupts_enabled = check_interrupts_enabled();\n  }\n  disable_interrupts();\n  return interrupts_enabled;\n}\n\n",
            "renaming": {
                "FUN_00000cc0": "initialize_and_check_interrupts_00000cc0",
                "uVar2": "interrupts_enabled",
                "bVar1": "privileged_mode",
                "isCurrentModePrivileged": "check_privileged_mode",
                "isIRQinterruptsEnabled": "check_interrupts_enabled",
                "disableIRQinterrupts": "disable_interrupts"
            },
            "calling": [
                "FUN_00000dc0"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "entrypoint": "0x00000cd0",
            "current_name": "check_irq_interrupts_enabled_00000cd0",
            "code": "\nundefined4 checkIRQInterruptsEnabled_00000cd0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabled;\n  \n  interruptsEnabled = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cd0": "check_irq_interrupts_enabled_00000cd0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "interruptsEnabled"
            },
            "calling": [
                "FUN_00000e58",
                "FUN_00001c84",
                "FUN_00000794",
                "FUN_00000f04",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_00000428",
                "FUN_000024bc",
                "FUN_00000f8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "entrypoint": "0x00000cf0",
            "current_name": "check_ir_qinterrupts_enabled_00000cf0",
            "code": "\nundefined4 checkIRQinterruptsEnabled_00000cf0(void)\n\n{\n  bool isModePrivileged;\n  undefined4 interruptsEnabled;\n  \n  enableIRQinterrupts();\n  interruptsEnabled = 0;\n  isModePrivileged = (bool)isCurrentModePrivileged();\n  if (isModePrivileged) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cf0": "check_ir_qinterrupts_enabled_00000cf0",
                "bVar1": "isModePrivileged",
                "uVar2": "interruptsEnabled"
            },
            "calling": [
                "FUN_00000930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "entrypoint": "0x00000d0c",
            "current_name": "enable_ir_qinterrupts_if_privileged_00000d0c",
            "code": "\nvoid enableIRQinterruptsIfPrivileged_00000d0c(uint inputVal)\n\n{\n  bool isPrivilegedMode;\n  \n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    enableIRQinterrupts((inputVal & 1) == 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d0c": "enable_ir_qinterrupts_if_privileged_00000d0c",
                "param_1": "inputVal",
                "bVar1": "isPrivilegedMode"
            },
            "calling": [
                "FUN_00001c84",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_00000428",
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "entrypoint": "0x00000d2a",
            "current_name": "get_exception_number_00000d2a",
            "code": "\nuint getExceptionNumber_00000d2a(void)\n\n{\n  bool isPrivilegedMode;\n  uint exceptionNumber;\n  \n  exceptionNumber = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    exceptionNumber = getCurrentExceptionNumber();\n    exceptionNumber = exceptionNumber & 0x1f;\n  }\n  return exceptionNumber;\n}\n\n",
            "renaming": {
                "FUN_00000d2a": "get_exception_number_00000d2a",
                "bVar1": "isPrivilegedMode",
                "uVar2": "exceptionNumber"
            },
            "calling": [
                "FUN_00000738"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d44": {
            "entrypoint": "0x00000d44",
            "current_name": "calculate_value_00000d44",
            "code": "\nint calculate_value_00000d44(uint num1,int num2)\n\n{\n  return num2 * 4 + (num1 & 0xf0000000 | (num1 & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00000d44": "calculate_value_00000d44",
                "param_1": "num1",
                "param_2": "num2"
            },
            "calling": [
                "FUN_00000d76"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d76": {
            "entrypoint": "0x00000d76",
            "current_name": "clear_value_00000d76",
            "code": "\nvoid clearValue_00000d76(undefined4 inputValue,undefined data)\n\n{\n  undefined4 *resultPtr;\n  \n  resultPtr = (undefined4 *)calculate_value_00000d44(inputValue,data);\n  *resultPtr = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d76": "clear_value_00000d76",
                "param_1": "inputValue",
                "param_2": "data",
                "puVar1": "resultPtr"
            },
            "calling": [
                "FUN_00000d9c"
            ],
            "called": [
                "FUN_00000d44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "entrypoint": "0x00000d9c",
            "current_name": "clear_register_bits_00000d9c",
            "code": "\nvoid clear_register_bits_00000d9c(void)\n\n{\n  clear_value_00000d76(0x40048040,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d9c": "clear_register_bits_00000d9c"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [
                "FUN_00000d76"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000db0": {
            "entrypoint": "0x00000db0",
            "current_name": "initialize_and_clear_memory_00000db0",
            "code": "\nvoid initializeAndClearMemory_00000db0(void)\n\n{\n  initializeMemory();\n  clearRegisterBits();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000db0": "initialize_and_clear_memory_00000db0",
                "initialize_memory_00000dcc": "initializeMemory",
                "clear_register_bits_00000d9c": "clearRegisterBits"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000d9c",
                "FUN_00000dcc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "entrypoint": "0x00000dc0",
            "current_name": "initialize_and_check_interrupts_00000dc0",
            "code": "\nvoid initialize_and_check_interrupts_00000dc0(void)\n\n{\n  initialize_and_check_interrupts_00000dc0_00000cc0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dc0": "initialize_and_check_interrupts_00000dc0"
            },
            "calling": [],
            "called": [
                "FUN_00000cc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "entrypoint": "0x00000dcc",
            "current_name": "initialize_memory_00000dcc",
            "code": "\n\n\nvoid initializeMemory_00000dcc(void)\n\n{\n  _DAT_4005200e = 0xd928;\n  _DAT_40052000 = 0xd2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dcc": "initialize_memory_00000dcc"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000df4": {
            "entrypoint": "0x00000df4",
            "current_name": "initialize_system_00000df4",
            "code": "\nvoid initialize_system_00000df4(void)\n\n{\n  initialize_system_00000df4_000013b8(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000df4": "initialize_system_00000df4"
            },
            "calling": [
                "FUN_00000410"
            ],
            "called": [
                "FUN_000013b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e14": {
            "entrypoint": "0x00000e14",
            "current_name": "process_interrupt_and_return_00000e14",
            "code": "\nundefined4 process_interrupt_and_return_00000e14(undefined4 input_param1,undefined4 input_param2)\n\n{\n  undefined4 result;\n  \n  result = process_interrupt_000012e2(0x1fff0204,input_param1,input_param2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000e14": "process_interrupt_and_return_00000e14",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00000490"
            ],
            "called": [
                "FUN_000012e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e38": {
            "entrypoint": "0x00000e38",
            "current_name": "copy_and_return_data_00000e38",
            "code": "\nundefined4 copy_and_return_data_00000e38(undefined4 source_address,undefined4 destination_address)\n\n{\n  copy_data_000015d0(0,source_address,destination_address);\n  return destination_address;\n}\n\n",
            "renaming": {
                "FUN_00000e38": "copy_and_return_data_00000e38",
                "param_1": "source_address",
                "param_2": "destination_address"
            },
            "calling": [
                "FUN_00004dee"
            ],
            "called": [
                "FUN_000015d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e58": {
            "entrypoint": "0x00000e58",
            "current_name": "run_infinite_loop_00000e58",
            "code": "\nvoid runInfiniteLoop_00000e58(void)\n\n{\n  checkInterruptsEnabled();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000e58": "run_infinite_loop_00000e58",
                "check_irq_interrupts_enabled_00000cd0": "checkInterruptsEnabled"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e64": {
            "entrypoint": "0x00000e64",
            "current_name": "initialize_and_configure_peripherals_00000e64",
            "code": "\n\n\nvoid initialize_and_configure_peripherals_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  initialize_peripheral_system();\n  set_filter_value(0x2056,0x80);\n  set_filter_value(0x511a,0x80);\n  set_filter_value(0x2055,0x80);\n  set_filter_bit(0x2056);\n  set_filter_bit(0x511a);\n  set_filter_bit(0x2055);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000e64": "initialize_and_configure_peripherals_00000e64",
                "initialize_peripheral_system_00001274": "initialize_peripheral_system",
                "set_filter_value_00001eea": "set_filter_value",
                "set_filter_bit_00001ff6": "set_filter_bit"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00001ff6",
                "FUN_00001eea",
                "FUN_00001274"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "entrypoint": "0x00000ed8",
            "current_name": "initialize_data_00000ed8",
            "code": "\nvoid initializeData_00000ed8(void)\n\n{\n  undefined4 prevLR;\n  \n  process_data_from_binary_00004c84(&DAT_00006f58,prevLR);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ed8": "initialize_data_00000ed8",
                "in_lr": "prevLR"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_00000ed8(void)\n\n{\n  undefined4 in_lr;\n  \n  FUNC_00004c84(&DAT_00006f58,in_lr);\n  return;\n}\n\n"
        },
        "FUN_00000ef8": {
            "entrypoint": "0x00000ef8",
            "current_name": "FUNC_00000ef8",
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000f04": {
            "entrypoint": "0x00000f04",
            "current_name": "initialize_riot_system_00000f04",
            "code": "\nvoid initialize_riot_system_00000f04(char input_param,undefined4 config_param)\n\n{\n  undefined4 stack_var;\n  code *jumptable_ptr;\n  undefined4 config_var;\n  char input_var;\n  \n  config_var = config_param;\n  input_var = input_param;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (input_param == '\\x03') {\n      initialize_data_00000ed8();\n    }\n    process_data_from_binary_00004c84(\"*** RIOT kernel panic:\\n%s\\n\\n\",config_var);\n    display_process_information_0000211c();\n    process_data_from_binary_00004c84(&DAT_00006f78);\n    process_data_from_binary_00004c84(\"*** halted.\\n\\n\");\n  }\n  check_irq_interrupts_enabled_00000cd0();\n  FUNC_00000ef8();\n  jumptable_ptr = (code *)0xf4d;\n  run_infinite_loop_00000e58();\n  stack_var = (int)&stack_var + 1;\n  FUNC_00002400();\n  process_data_from_binary_00004c84(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  initialize_system_000023a4();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumptable_ptr)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f04": "initialize_riot_system_00000f04",
                "param_1": "input_param",
                "param_2": "config_param",
                "uStack_18": "stack_var",
                "UNRECOVERED_JUMPTABLE": "jumptable_ptr",
                "local_10": "config_var",
                "local_9": "input_var"
            },
            "calling": [
                "FUN_00000fec",
                "FUN_00000cc0",
                "FUN_00003ec4",
                "FUN_000013b8",
                "FUN_00001034",
                "FUN_00000a30"
            ],
            "called": [
                "FUN_0000211c",
                "FUN_00000e58",
                "FUN_00000ed8",
                "FUN_00002400",
                "FUN_00000cd0",
                "FUN_00004c84",
                "FUN_00000ef8",
                "FUN_000023a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "entrypoint": "0x00000f8c",
            "current_name": "initialize_system_00000f8c",
            "code": "\nvoid initializeSystem_00000f8c(void)\n\n{\n  uint irqShifted;\n  undefined4 *arrayPointer;\n  uint blockIndex;\n  int interruptIndex;\n  int *interruptPointer;\n  undefined4 functionId;\n  undefined4 blockSize;\n  undefined4 offsetValue;\n  dword rInfoValue;\n  \n  check_irq_interrupts_enabled_00000cd0();\n  rInfoValue = Elf32_Rel_ARRAY_1fff0200[3].r_info;\n  offsetValue = 0;\n  blockSize = 0xf81;\n  initialize_memory_block_000010d4(&DAT_1fff0a6c,0x100,0xf,0xc);\n  rInfoValue = Elf32_Rel_ARRAY_1fff0200[3].r_offset;\n  offsetValue = 0;\n  blockSize = 0xf5d;\n  blockIndex = 0xc;\n  initialize_memory_block_000010d4(&DAT_1fff046c,0x600,7);\n  functionId = 0xfd3;\n  irqShifted = handle_qinterrupts_00000930();\n  irqShifted = irqShifted >> 0x1e;\n  arrayPointer = (undefined4 *)(blockIndex * 0x100);\n  interruptIndex = (blockIndex >> 0x1d) << 0x11;\n  interruptPointer = &interruptIndex;\n  if ((irqShifted & irqShifted - 1) != 0) {\n    initialize_riot_system_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *arrayPointer = 0;\n  arrayPointer[1] = 0;\n  arrayPointer[2] = irqShifted - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f8c": "initialize_system_00000f8c",
                "uVar1": "irqShifted",
                "puVar2": "arrayPointer",
                "uVar3": "blockIndex",
                "iStack_24": "interruptIndex",
                "piStack_20": "interruptPointer",
                "uStack_1c": "functionId",
                "local_18": "blockSize",
                "local_14": "offsetValue",
                "local_10": "rInfoValue"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_000010d4",
                "FUN_00000930"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000fec": {
            "entrypoint": "0x00000fec",
            "current_name": "initialize_riot_array_00000fec",
            "code": "\nvoid initialize_riot_array_00000fec(undefined4 *riot_array,uint array_size)\n\n{\n  if ((array_size & array_size - 1) != 0) {\n    initialize_riot_system_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *riot_array = 0;\n  riot_array[1] = 0;\n  riot_array[2] = array_size - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000fec": "initialize_riot_array_00000fec",
                "param_1": "riot_array",
                "param_2": "array_size",
                "param_1[1]": "riot_array[1]",
                "param_1[2]": "riot_array[2]"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001034": {
            "entrypoint": "0x00001034",
            "current_name": "find_max_pointer_00001034",
            "code": "\nvoid findMaxPointer_00001034(int **pointerList,int size)\n\n{\n  int **currentPointer;\n  \n  if (8 < *(byte *)(size + 4)) {\n    initialize_riot_system_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  for (currentPointer = pointerList;\n      (*currentPointer != (int *)0x0 && (*(byte *)((int)*currentPointer + -3) <= *(byte *)(size + 5)));\n      currentPointer = (int **)*currentPointer) {\n  }\n  *(int **)(size + 8) = *currentPointer;\n  *currentPointer = (int *)(int **)(size + 8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001034": "find_max_pointer_00001034",
                "param_1": "pointerList",
                "param_2": "size",
                "local_1c": "currentPointer"
            },
            "calling": [
                "FUN_00002434"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010a0": {
            "entrypoint": "0x000010a0",
            "current_name": "find_offset_000010a0",
            "code": "\nint find_offset_000010a0(int *array)\n\n{\n  int *current_element;\n  \n  for (current_element = array; (int *)*current_element == current_element; current_element = current_element + 1) {\n  }\n  return (int)current_element - (int)array;\n}\n\n",
            "renaming": {
                "FUN_000010a0": "find_offset_000010a0",
                "param_1": "array",
                "local_c": "current_element"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010d4": {
            "entrypoint": "0x000010d4",
            "current_name": "initialize_memory_block_000010d4",
            "code": "\nint initialize_memory_block_000010d4(uint start_address,int block_size,byte num_bytes,uint flags,undefined4 param_5,\n                undefined4 param_6,undefined4 param_7)\n\n{\n  undefined4 irq_interrupts_enabled;\n  undefined4 memory_init_result;\n  int result;\n  uint aligned_block_size;\n  undefined4 *block_header_ptr;\n  int aligned_block_size_offset;\n  uint aligned_start_address;\n  uint loop_counter;\n  short array_index;\n  short first_free_slot;\n  \n  if (num_bytes < 0x10) {\n    aligned_block_size_offset = block_size;\n    aligned_start_address = start_address;\n    if ((start_address & 3) != 0) {\n      aligned_block_size_offset = 4 - (start_address & 3);\n      aligned_start_address = aligned_block_size_offset + start_address;\n      aligned_block_size_offset = block_size - aligned_block_size_offset;\n    }\n    aligned_block_size = aligned_block_size_offset - 0x30U & 0xfffffffc;\n    block_header_ptr = (undefined4 *)(aligned_block_size + aligned_start_address);\n    if ((flags & 8) == 0) {\n      *(uint *)aligned_start_address = aligned_start_address;\n    }\n    else {\n      for (loop_counter = aligned_start_address; loop_counter < aligned_block_size + aligned_start_address; loop_counter = loop_counter + 4) {\n        *(uint *)loop_counter = loop_counter;\n      }\n    }\n    irq_interrupts_enabled = check_irq_interrupts_enabled_00000cd0();\n    first_free_slot = 0;\n    for (array_index = 1; array_index < 0x21; array_index = array_index + 1) {\n      if (*(int *)(&DAT_1fff0358 + array_index * 4) == 0) {\n        first_free_slot = array_index;\n        break;\n      }\n    }\n    if (first_free_slot == 0) {\n      enable_ir_qinterrupts_if_privileged_00000d0c(irq_interrupts_enabled);\n      result = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + first_free_slot * 4) = block_header_ptr;\n      *(short *)((int)block_header_ptr + 6) = first_free_slot;\n      memory_init_result = init_memory_000007dc(param_5,param_6,aligned_start_address,aligned_block_size);\n      *block_header_ptr = memory_init_result;\n      block_header_ptr[9] = aligned_start_address;\n      block_header_ptr[0xb] = block_size;\n      block_header_ptr[10] = param_7;\n      *(byte *)((int)block_header_ptr + 5) = num_bytes;\n      *(undefined *)(block_header_ptr + 1) = 0;\n      block_header_ptr[2] = 0;\n      block_header_ptr[3] = 0;\n      block_header_ptr[4] = 0;\n      initialize_riot_array_00000fec(block_header_ptr + 5,0);\n      block_header_ptr[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((flags & 1) == 0) {\n        update_pointer_and_flag_00000698(block_header_ptr,10);\n        if ((flags & 4) == 0) {\n          enable_ir_qinterrupts_if_privileged_00000d0c(irq_interrupts_enabled);\n          check_exception_and_set_flag_00000738(num_bytes);\n          return (int)first_free_slot;\n        }\n      }\n      else {\n        update_pointer_and_flag_00000698(block_header_ptr,1);\n      }\n      enable_ir_qinterrupts_if_privileged_00000d0c(irq_interrupts_enabled);\n      result = (int)first_free_slot;\n    }\n  }\n  else {\n    result = -0x16;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000010d4": "initialize_memory_block_000010d4",
                "param_1": "start_address",
                "param_2": "block_size",
                "param_3": "num_bytes",
                "param_4": "flags",
                "uVar1": "irq_interrupts_enabled",
                "uVar2": "memory_init_result",
                "iVar3": "result",
                "uVar4": "aligned_block_size",
                "puVar5": "block_header_ptr",
                "local_30": "aligned_block_size_offset",
                "local_2c": "aligned_start_address",
                "local_10": "loop_counter",
                "local_c": "array_index",
                "local_a": "first_free_slot"
            },
            "calling": [
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000fec",
                "FUN_00000738",
                "FUN_00000cd0",
                "FUN_000007dc",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001274": {
            "entrypoint": "0x00001274",
            "current_name": "initialize_peripheral_system_00001274",
            "code": "\nvoid initialize_peripheral_system_00001274(void)\n\n{\n  initialize_peripheral_registers();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  initialize_system_1();\n  initialize_system_2();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001274": "initialize_peripheral_system_00001274",
                "initialize_peripheral_registers_0000258c": "initialize_peripheral_registers",
                "initialize_system_00001c84": "initialize_system_1",
                "initialize_system_00002396": "initialize_system_2"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001c84",
                "FUN_00002396",
                "FUN_0000258c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000129c": {
            "entrypoint": "0x0000129c",
            "current_name": "handle_interrupt_and_return_0000129c",
            "code": "\nvoid handle_interrupt_and_return_0000129c(undefined4 interrupt_handle)\n\n{\n  interrupt_handler(interrupt_handle,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000129c": "handle_interrupt_and_return_0000129c",
                "param_1": "interrupt_handle",
                "handle_interrupt_00002434": "interrupt_handler"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012b4": {
            "entrypoint": "0x000012b4",
            "current_name": "update_and_check_value_000012b4",
            "code": "\nundefined4 updateAndCheckValue_000012b4(int originalValue,undefined originalParam)\n\n{\n  undefined4 updatedValue;\n  \n  updatedValue = checkAndUpdateValue(originalValue + 4,originalParam);\n  updateIRQInterrupts(originalValue);\n  return updatedValue;\n}\n\n",
            "renaming": {
                "FUN_000012b4": "update_and_check_value_000012b4",
                "param_1": "originalValue",
                "param_2": "originalParam",
                "uVar1": "updatedValue",
                "check_and_update_value_00002364": "checkAndUpdateValue",
                "update_irq_interrupts_000024bc": "updateIRQInterrupts"
            },
            "calling": [],
            "called": [
                "FUN_00002364",
                "FUN_000024bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012e2": {
            "entrypoint": "0x000012e2",
            "current_name": "process_interrupt_000012e2",
            "code": "\nint processInterrupt_000012e2(int inputAddress,undefined4 param2,undefined4 param3)\n\n{\n  int result;\n  \n  while( true ) {\n    result = copy_and_decrement_0000231c(inputAddress + 4,param2,param3);\n    if (result != 0) break;\n    handle_interrupt_and_return_0000129c(inputAddress);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012e2": "process_interrupt_000012e2",
                "param_1": "inputAddress",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00000e14"
            ],
            "called": [
                "FUN_0000129c",
                "FUN_0000231c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001318": {
            "entrypoint": "0x00001318",
            "current_name": "set_bit_in_memory_00001318",
            "code": "\nvoid setBitInMemory_00001318(byte input)\n\n{\n  *(memoryAddress *)(((unsignedInt)(memoryAddress)(byteValue)input >> 5) * 4 + -0x1fff1f00) = 1 << (input bitwiseAnd 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001318": "set_bit_in_memory_00001318",
                "param_1": "input",
                "char": "byteValue",
                "int": "memoryAddress",
                "uint": "unsignedInt",
                "&": "bitwiseAnd"
            },
            "calling": [
                "FUN_000014c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001348": {
            "entrypoint": "0x00001348",
            "current_name": "check_and_set_flag_bit_00001348",
            "code": "\nvoid checkAndSetFlagBit_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    set_flag_bit_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001348": "check_and_set_flag_bit_00001348"
            },
            "calling": [
                "FUN_00001628"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001360": {
            "entrypoint": "0x00001360",
            "current_name": "calculate_result_00001360",
            "code": "\nint calculateResult_00001360(uint input,int multiplier)\n\n{\n  return multiplier * 4 + (input & 0xf0000000 | (input & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001360": "calculate_result_00001360",
                "param_1": "input",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001392"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001392": {
            "entrypoint": "0x00001392",
            "current_name": "initialize_result_00001392",
            "code": "\nvoid initializeResult_00001392(undefined4 inputParameter1,undefined inputParameter2)\n\n{\n  undefined4 *resultPointer;\n  \n  resultPointer = (undefined4 *)calculate_result_00001360(inputParameter1,inputParameter2);\n  *resultPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001392": "initialize_result_00001392",
                "param_1": "inputParameter1",
                "param_2": "inputParameter2",
                "puVar1": "resultPointer"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000013b8": {
            "entrypoint": "0x000013b8",
            "current_name": "initialize_system_000013b8",
            "code": "\nundefined4 initializeSystem_000013b8(int errorCode,undefined4 param2,undefined4 data1,undefined4 data2)\n\n{\n  undefined4 result;\n  \n  if (errorCode != 0) {\n    initializeRiotSystem(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + errorCode * 8) = data1;\n  *(undefined4 *)(&DAT_1fff0b70 + errorCode * 8) = data2;\n  updateValues(errorCode);\n  initializeResult(*(undefined4 *)(&DAT_00006ffc + errorCode * 0x20),\n               *(undefined *)(errorCode * 0x20 + 0x7000));\n  if ((&DAT_00007002)[errorCode * 0x20] == '\\0') {\n    updateMemory(errorCode,param2);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000013b8": "initialize_system_000013b8",
                "param_1": "errorCode",
                "param_2": "param2",
                "param_3": "data1",
                "param_4": "data2",
                "uVar1": "result",
                "initialize_riot_system_00000f04": "initializeRiotSystem",
                "update_values_00001448": "updateValues",
                "initialize_result_00001392": "initializeResult",
                "update_memory_000014c4": "updateMemory"
            },
            "calling": [
                "FUN_00000df4"
            ],
            "called": [
                "FUN_000014c4",
                "FUN_00000f04",
                "FUN_00001392",
                "FUN_00001448"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001448": {
            "entrypoint": "0x00001448",
            "current_name": "update_values_00001448",
            "code": "\nvoid updateValues_00001448(int index)\n\n{\n  if (*(short *)(&DAT_00006fec + index * 0x20) != -1) {\n    updateValue(*(undefined2 *)(&DAT_00006fec + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff0 + index * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + index * 0x20) != -1) {\n    updateValue(*(undefined2 *)(&DAT_00006fee + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff4 + index * 0x20));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001448": "update_values_00001448",
                "param_1": "index",
                "update_value_00001f80": "updateValue"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000014c4": {
            "entrypoint": "0x000014c4",
            "current_name": "update_memory_000014c4",
            "code": "\nvoid updateMemory_000014c4(int index,uint value)\n\n{\n  byte *bytePointer;\n  uint uintVar1;\n  uint uintVar2;\n  \n  bytePointer = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  uintVar1 = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  bytePointer[3] = bytePointer[3] & 0xf3;\n  bytePointer[2] = (&DAT_00007001)[index * 0x20];\n  uintVar2 = uintVar1 / (value << 4);\n  *bytePointer = (byte)(uintVar2 >> 8) & 0x1f;\n  bytePointer[1] = (byte)uintVar2;\n  bytePointer[10] = (byte)((uintVar1 << 2) / value + 1 >> 1) & 0x1f;\n  bytePointer[0x10] = bytePointer[0x10] | 0x88;\n  if ((bytePointer[0x10] & 0x70) == 0) {\n    bytePointer[0x13] = 0;\n  }\n  else {\n    bytePointer[0x13] = (char)(2 << (bytePointer[0x10] >> 4 & 7)) - 1;\n  }\n  bytePointer[0x15] = 1;\n  bytePointer[0x11] = 0xc0;\n  bytePointer[3] = bytePointer[3] | 0x2c;\n  set_bit_in_memory_00001318((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000014c4": "update_memory_000014c4",
                "param_1": "index",
                "param_2": "value",
                "pbVar1": "bytePointer",
                "uVar2": "uintVar1",
                "uVar3": "uintVar2"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000015d0": {
            "entrypoint": "0x000015d0",
            "current_name": "copy_data_000015d0",
            "code": "\nvoid copyData_000015d0(int offset,int source,uint count)\n\n{\n  int dataPtr;\n  uint index;\n  \n  dataPtr = *(int *)(&DAT_00006fe4 + offset * 0x20);\n  for (index = 0; index < count; index = index + 1) {\n    do {\n    } while (-1 < *(char *)(dataPtr + 4));\n    *(undefined *)(dataPtr + 7) = *(undefined *)(index + source);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000015d0": "copy_data_000015d0",
                "param_1": "offset",
                "param_2": "source",
                "param_3": "count",
                "iVar1": "dataPtr",
                "local_c": "index"
            },
            "calling": [
                "FUN_00000e38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001628": {
            "entrypoint": "0x00001628",
            "current_name": "execute_function_if_condition_met_00001628",
            "code": "\nvoid executeFunctionIfConditionMet_00001628(int index)\n\n{\n  if (((*(byte *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20) != 0) &&\n     (*(int *)(&DAT_1fff0b6c + index * 8) != 0)) {\n    (**(code **)(&DAT_1fff0b6c + index * 8))\n              (*(undefined4 *)(&DAT_1fff0b70 + index * 8),\n               *(undefined *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 7));\n  }\n  checkAndSetFlagBit();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001628": "execute_function_if_condition_met_00001628",
                "param_1": "index",
                "check_and_set_flag_bit_00001348": "checkAndSetFlagBit"
            },
            "calling": [
                "FUN_00001688"
            ],
            "called": [
                "FUN_00001348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001688": {
            "entrypoint": "0x00001688",
            "current_name": "execute_function_if_condition_met_00001688",
            "code": "\nvoid execute_function_if_condition_met_00001688(void)\n\n{\n  execute_function_if_condition_met_00001688_00001628(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001688": "execute_function_if_condition_met_00001688"
            },
            "calling": [],
            "called": [
                "FUN_00001628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001696": {
            "entrypoint": "0x00001696",
            "current_name": "calculate_offset_00001696",
            "code": "\nint calculate_offset_00001696(uint address,int multiplier)\n\n{\n  return multiplier * 4 + (address & 0xf0000000 | (address & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001696": "calculate_offset_00001696",
                "param_1": "address",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_000016ec",
                "FUN_00001710",
                "FUN_000016c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016c8": {
            "entrypoint": "0x000016c8",
            "current_name": "set_offset_to_value_000016c8",
            "code": "\nvoid setOffsetToValue_000016c8(undefined4 baseAddress,undefined offset)\n\n{\n  undefined4 *resultPointer;\n  \n  resultPointer = (undefined4 *)calculate_offset_00001696(baseAddress,offset);\n  *resultPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016c8": "set_offset_to_value_000016c8",
                "param_1": "baseAddress",
                "param_2": "offset",
                "puVar1": "resultPointer"
            },
            "calling": [
                "FUN_000017dc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016ec": {
            "entrypoint": "0x000016ec",
            "current_name": "set_offset_to_one_000016ec",
            "code": "\nvoid setOffsetToOne_000016ec(undefined4 offset,undefined data)\n\n{\n  undefined *offsetPtr;\n  \n  offsetPtr = (undefined *)calculate_offset_00001696(offset,data);\n  *offsetPtr = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016ec": "set_offset_to_one_000016ec",
                "param_1": "offset",
                "param_2": "data",
                "puVar1": "offsetPtr"
            },
            "calling": [
                "FUN_00001a18",
                "FUN_0000182c",
                "FUN_00001778",
                "FUN_00001a3c",
                "FUN_00001a60"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001710": {
            "entrypoint": "0x00001710",
            "current_name": "clear_memory_00001710",
            "code": "\nvoid clearMemory_00001710(undefined4 memoryAddress,undefined value)\n\n{\n  undefined *pointer;\n  \n  pointer = (undefined *)calculate_offset_00001696(memoryAddress,value);\n  *pointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001710": "clear_memory_00001710",
                "param_1": "memoryAddress",
                "param_2": "value",
                "puVar1": "pointer"
            },
            "calling": [
                "FUN_00001960",
                "FUN_00001bb8",
                "FUN_0000182c",
                "FUN_00001778",
                "FUN_00001a60",
                "FUN_000018bc",
                "FUN_000019c0",
                "FUN_00001734"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001734": {
            "entrypoint": "0x00001734",
            "current_name": "clear_memory_00001734",
            "code": "\nvoid clearMemory_00001734(void)\n\n{\n  clear_memory_00001710(&DAT_40064005,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001734": "clear_memory_00001734"
            },
            "calling": [
                "FUN_00001a18",
                "FUN_00001a3c",
                "FUN_000019c0"
            ],
            "called": [
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001748": {
            "entrypoint": "0x00001748",
            "current_name": "combine_and_mask_bytes_00001748",
            "code": "\nvoid combineAndMaskBytes_00001748(byte inputByte)\n\n{\n  DAT_40064003 = inputByte | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001748": "combine_and_mask_bytes_00001748",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_0000191c",
                "FUN_00001960",
                "FUN_00001bb8",
                "FUN_000018bc",
                "FUN_000019c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001778": {
            "entrypoint": "0x00001778",
            "current_name": "update_flags_and_clear_memory_00001778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid updateFlagsAndClearMemory_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  clearMemory(&DAT_40064001,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001778": "update_flags_and_clear_memory_00001778",
                "clear_memory_00001710": "clearMemory"
            },
            "calling": [
                "FUN_0000191c",
                "FUN_000019c0"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000017dc": {
            "entrypoint": "0x000017dc",
            "current_name": "initialize_hardware_000017dc",
            "code": "\n\n\nvoid initializeHardware_000017dc(void)\n\n{\n  setOffsetToValue(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000017dc": "initialize_hardware_000017dc",
                "set_offset_to_value_000016c8": "setOffsetToValue"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000182c": {
            "entrypoint": "0x0000182c",
            "current_name": "clear_memory_and_set_offset_0000182c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid clearMemoryAndSetOffset_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  set_offset_to_one_000016ec(&DAT_40064001,0);\n  clear_memory_00001710(&DAT_40064000,1);\n  clear_memory_00001710(&DAT_40064000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000182c": "clear_memory_and_set_offset_0000182c"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000018bc": {
            "entrypoint": "0x000018bc",
            "current_name": "initialize_memory_000018bc",
            "code": "\nvoid initializeMemory_000018bc(void)\n\n{\n  combineAndMaskBytes(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  clearMemory(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000018bc": "initialize_memory_000018bc",
                "combine_and_mask_bytes_00001748": "combineAndMaskBytes",
                "clear_memory_00001710": "clearMemory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000191c": {
            "entrypoint": "0x0000191c",
            "current_name": "initialize_memory_0000191c",
            "code": "\nvoid initializeMemory_0000191c(void)\n\n{\n  update_flags_and_clear_memory_00001778();\n  combine_and_mask_bytes_00001748(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000191c": "initialize_memory_0000191c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001960": {
            "entrypoint": "0x00001960",
            "current_name": "initialize_memory_00001960",
            "code": "\nvoid initializeMemory_00001960(void)\n\n{\n  combineAndMaskBytes(0xa0);\n  clearMemory(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001960": "initialize_memory_00001960",
                "combine_and_mask_bytes_00001748": "combineAndMaskBytes",
                "clear_memory_00001710": "clearMemory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000019c0": {
            "entrypoint": "0x000019c0",
            "current_name": "initialize_memory_000019c0",
            "code": "\nvoid initializeMemory_000019c0(void)\n\n{\n  update_flags_and_clear_memory_00001778();\n  combine_and_mask_bytes_00001748(0x40);\n  clear_memory_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  clear_memory_00001734();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000019c0": "initialize_memory_000019c0"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001778",
                "FUN_00001748",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a18": {
            "entrypoint": "0x00001a18",
            "current_name": "initialize_memory_00001a18",
            "code": "\nvoid initializeMemory_00001a18(void)\n\n{\n  set_offset_to_one_000016ec(&DAT_40064001,1);\n  clear_memory_00001734();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a18": "initialize_memory_00001a18"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "entrypoint": "0x00001a3c",
            "current_name": "initialize_memory_00001a3c",
            "code": "\nvoid initializeMemory_00001a3c(void)\n\n{\n  set_offset_to_one_000016ec(&DAT_40064001,1);\n  clear_memory_00001734();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a3c": "initialize_memory_00001a3c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a60": {
            "entrypoint": "0x00001a60",
            "current_name": "initialize_memory_00001a60",
            "code": "\nvoid initializeMemory_00001a60(void)\n\n{\n  clearMemory(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  setOffsetToOne(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a60": "initialize_memory_00001a60",
                "clear_memory_00001710": "clearMemory",
                "set_offset_to_one_000016ec": "setOffsetToOne"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "entrypoint": "0x00001ad4",
            "current_name": "clear_data_bits_00001ad4",
            "code": "\nvoid clearDataBits_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ad4": "clear_data_bits_00001ad4"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001b10": {
            "entrypoint": "0x00001b10",
            "current_name": "initialize_memory_loop_00001b10",
            "code": "\nundefined4 initialize_memory_loop_00001b10(byte input_index)\n\n{\n  undefined4 result;\n  \n  if (input_index < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)input_index + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        initialize_memory_000018bc();\n        break;\n      case 1:\n        initialize_memory_0000191c();\n        break;\n      case 2:\n        initialize_memory_00001960();\n        break;\n      case 3:\n        initialize_memory_000019c0();\n        break;\n      case 4:\n        initialize_memory_00001a18();\n        break;\n      case 5:\n        initialize_memory_00001a3c();\n        break;\n      case 6:\n        initialize_memory_00001a60();\n        break;\n      case 7:\n        clear_data_bits_00001ad4();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (input_index != DAT_1fff0b74);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00001b10": "initialize_memory_loop_00001b10",
                "param_1": "input_index",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001a18",
                "FUN_0000191c",
                "FUN_00001ad4",
                "FUN_00001960",
                "FUN_00001a3c",
                "FUN_00001a60",
                "FUN_000019c0",
                "FUN_000018bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "entrypoint": "0x00001bb8",
            "current_name": "initialize_memory_00001bb8",
            "code": "\nvoid initializeMemory_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    clear_memory_00001710(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    clear_memory_00001710(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  combine_and_mask_bytes_00001748(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001bb8": "initialize_memory_00001bb8"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001c84": {
            "entrypoint": "0x00001c84",
            "current_name": "initialize_system_00001c84",
            "code": "\n\n\nvoid initializeSystem_00001c84(void)\n\n{\n  undefined4 irqInterruptsEnabled;\n  \n  irqInterruptsEnabled = check_irq_interrupts_enabled_00000cd0();\n  initializeMemory();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  clearMemoryAndSetOffset();\n  initializeHardware();\n  initializeMemoryLoop(7);\n  enableIRQInterruptsIfPrivileged(irqInterruptsEnabled);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "uVar1": "irqInterruptsEnabled",
                "initialize_memory_00001bb8": "initializeMemory",
                "clear_memory_and_set_offset_0000182c": "clearMemoryAndSetOffset",
                "initialize_hardware_000017dc": "initializeHardware",
                "initialize_memory_loop_00001b10": "initializeMemoryLoop",
                "enable_ir_qinterrupts_if_privileged_00000d0c": "enableIRQInterruptsIfPrivileged"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00001bb8",
                "FUN_0000182c",
                "FUN_000017dc",
                "FUN_00001b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "entrypoint": "0x00001cf0",
            "current_name": "check_and_set_flag_00001cf0",
            "code": "\nvoid checkAndSetFlag_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    set_flag_bit_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001cf0": "check_and_set_flag_00001cf0"
            },
            "calling": [
                "FUN_00002028"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d08": {
            "entrypoint": "0x00001d08",
            "current_name": "calculate_updated_value_00001d08",
            "code": "\nint calculateUpdatedValue_00001d08(uint value,int multiplier)\n\n{\n  return multiplier * 4 + (value & 0xf0000000 | (value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001d08": "calculate_updated_value_00001d08",
                "param_1": "value",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001d3a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "entrypoint": "0x00001d3a",
            "current_name": "update_value_00001d3a",
            "code": "\nvoid updateValue_00001d3a(undefined4 inputValue,undefined additionalData)\n\n{\n  undefined4 *updatedValuePtr;\n  \n  updatedValuePtr = (undefined4 *)calculate_updated_value_00001d08(inputValue,additionalData);\n  *updatedValuePtr = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001d3a": "update_value_00001d3a",
                "param_1": "inputValue",
                "param_2": "additionalData",
                "puVar1": "updatedValuePtr"
            },
            "calling": [
                "FUN_00001ddc"
            ],
            "called": [
                "FUN_00001d08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "entrypoint": "0x00001d5e",
            "current_name": "combine_bits_with_mask_00001d5e",
            "code": "\nuint combineBitsWithMask_00001d5e(ushort inputValue)\n\n{\n  return inputValue & 0x7000 | 0x40048000;\n}\n\n",
            "renaming": {
                "FUN_00001d5e": "combine_bits_with_mask_00001d5e",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d80": {
            "entrypoint": "0x00001d80",
            "current_name": "apply_filter_00001d80",
            "code": "\nuint applyFilter_00001d80(ushort inputValue)\n\n{\n  return inputValue & 0x1c0 | 0x400ff000;\n}\n\n",
            "renaming": {
                "FUN_00001d80": "apply_filter_00001d80",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001ff6",
                "FUN_00001eea"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001da2": {
            "entrypoint": "0x00001da2",
            "current_name": "extract_three_least_significant_bits_00001da2",
            "code": "\nushort extractThreeLeastSignificantBits_00001da2(ushort inputValue)\n\n{\n  return inputValue >> 6 & 7;\n}\n\n",
            "renaming": {
                "FUN_00001da2": "extract_three_least_significant_bits_00001da2",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "entrypoint": "0x00001dc0",
            "current_name": "extract_least_significant_bits_00001dc0",
            "code": "\nushort extractLeastSignificantBits_00001dc0(ushort input)\n\n{\n  return input & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_00001dc0": "extract_least_significant_bits_00001dc0",
                "param_1": "input"
            },
            "calling": [
                "FUN_00001ff6",
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "entrypoint": "0x00001ddc",
            "current_name": "update_value_with_least_significant_bits_00001ddc",
            "code": "\nvoid updateValueWithLeastSignificantBits_00001ddc(undefined2 inputValue)\n\n{\n  char leastSignificantBits;\n  \n  leastSignificantBits = extractLeastSignificantBits(inputValue);\n  updateValue(&DAT_40048038,leastSignificantBits + '\\t');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ddc": "update_value_with_least_significant_bits_00001ddc",
                "param_1": "inputValue",
                "cVar1": "leastSignificantBits",
                "extract_three_least_significant_bits_00001da2": "extractLeastSignificantBits",
                "update_value_00001d3a": "updateValue"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001da2",
                "FUN_00001d3a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "entrypoint": "0x00001e0c",
            "current_name": "extract_bits_and_mask_00001e0c",
            "code": "\nuint extract_bits_and_mask_00001e0c(int index,uint bit_value)\n\n{\n  return *(uint *)(&DAT_1fff0bd8 + (((int)bit_value >> 3) + index * 4) * 4) >> ((bit_value & 7) << 2)\n         & 0xf;\n}\n\n",
            "renaming": {
                "FUN_00001e0c": "extract_bits_and_mask_00001e0c",
                "param_1": "index",
                "param_2": "bit_value"
            },
            "calling": [
                "FUN_00002028",
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e44": {
            "entrypoint": "0x00001e44",
            "current_name": "update_bits_00001e44",
            "code": "\nvoid updateBits_00001e44(int baseIndex,uint bitPosition,int newValue)\n\n{\n  int shiftedIndex;\n  \n  shiftedIndex = (int)bitPosition >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (shiftedIndex + baseIndex * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftedIndex + baseIndex * 4) * 4) & ~(0xf << ((bitPosition & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (shiftedIndex + baseIndex * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftedIndex + baseIndex * 4) * 4) | newValue << ((bitPosition & 7) << 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001e44": "update_bits_00001e44",
                "param_1": "baseIndex",
                "param_2": "bitPosition",
                "param_3": "newValue",
                "iVar1": "shiftedIndex"
            },
            "calling": [
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "entrypoint": "0x00001ec4",
            "current_name": "update_bits_00001ec4",
            "code": "\nvoid updateBits_00001ec4(undefined4 input1,undefined4 input2)\n\n{\n  undefined4 bits;\n  \n  bits = extract_bits_and_mask_00001e0c(input1,input2);\n  update_bits_00001e44(input1,input2,bits);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ec4": "update_bits_00001ec4",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "bits"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001e44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001eea": {
            "entrypoint": "0x00001eea",
            "current_name": "set_filter_value_00001eea",
            "code": "\nundefined4 setFilterValue_00001eea(undefined2 param,byte value)\n\n{\n  uint extractedBits;\n  int filterPtr;\n  int bitsPtr;\n  \n  update_value_00001f80(param,0);\n  if ((char)value < '\\0') {\n    extractedBits = extract_least_significant_bits_00001dc0(param);\n    filterPtr = apply_filter_00001d80(param);\n    *(uint *)(filterPtr + 0x14) = *(uint *)(filterPtr + 0x14) | 1 << (extractedBits & 0xff);\n  }\n  else {\n    extractedBits = extract_least_significant_bits_00001dc0(param);\n    filterPtr = apply_filter_00001d80(param);\n    *(uint *)(filterPtr + 0x14) = *(uint *)(filterPtr + 0x14) & ~(1 << (extractedBits & 0xff));\n  }\n  filterPtr = combine_bits_with_mask_00001d5e(param);\n  bitsPtr = extract_least_significant_bits_00001dc0(param);\n  *(uint *)(filterPtr + bitsPtr * 4) = value & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00001eea": "set_filter_value_00001eea",
                "param_1": "param",
                "param_2": "value",
                "uVar1": "extractedBits",
                "iVar2": "filterPtr",
                "iVar3": "bitsPtr"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001f80",
                "FUN_00001d5e",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001f80": {
            "entrypoint": "0x00001f80",
            "current_name": "update_value_00001f80",
            "code": "\nvoid updateValue_00001f80(undefined2 inputParam,undefined4 newValue)\n\n{\n  int combinedBits;\n  int extractedBits;\n  undefined4 extractedBits3;\n  undefined4 extractedBits4;\n  uint updatedValue;\n  \n  update_value_with_least_significant_bits_00001ddc(inputParam);\n  combinedBits = combine_bits_with_mask_00001d5e(inputParam);\n  extractedBits = extract_least_significant_bits_00001dc0(inputParam);\n  updatedValue = *(uint *)(combinedBits + extractedBits * 4);\n  combinedBits = combine_bits_with_mask_00001d5e(inputParam);\n  extractedBits = extract_least_significant_bits_00001dc0(inputParam);\n  *(undefined4 *)(combinedBits + extractedBits * 4) = newValue;\n  if ((updatedValue & 0xf0000) != 0) {\n    extractedBits3 = extract_three_least_significant_bits_00001da2(inputParam);\n    extractedBits4 = extract_least_significant_bits_00001dc0(inputParam);\n    update_bits_00001ec4(extractedBits3,extractedBits4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001f80": "update_value_00001f80",
                "param_1": "inputParam",
                "param_2": "newValue",
                "iVar1": "combinedBits",
                "iVar2": "extractedBits",
                "uVar3": "extractedBits3",
                "uVar4": "extractedBits4",
                "uVar5": "updatedValue"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001448"
            ],
            "called": [
                "FUN_00001da2",
                "FUN_00001ec4",
                "FUN_00001dc0",
                "FUN_00001d5e",
                "FUN_00001ddc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "entrypoint": "0x00001ff6",
            "current_name": "set_filter_bit_00001ff6",
            "code": "\nvoid setFilterBit_00001ff6(undefined2 inputValue)\n\n{\n  uint leastSignificantBits;\n  int filterResult;\n  \n  leastSignificantBits = extract_least_significant_bits_00001dc0(inputValue);\n  filterResult = apply_filter_00001d80(inputValue);\n  *(int *)(filterResult + 4) = 1 << (leastSignificantBits & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ff6": "set_filter_bit_00001ff6",
                "param_1": "inputValue",
                "uVar1": "leastSignificantBits",
                "iVar2": "filterResult"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002028": {
            "entrypoint": "0x00002028",
            "current_name": "process_flags_00002028",
            "code": "\nvoid processFlags_00002028(int param1,undefined4 param2)\n\n{\n  int extractedValue;\n  uint flag;\n  uint counter;\n  \n  flag = *(uint *)(param1 + 0xa0);\n  for (counter = 0; (int)counter < 0x20; counter = counter + 1) {\n    if (((flag & 1 << (counter & 0xff)) != 0) &&\n       ((*(uint *)(param1 + counter * 4) & 0xf0000) != 0)) {\n      *(int *)(param1 + 0xa0) = 1 << (counter & 0xff);\n      extractedValue = extract_bits_and_mask_00001e0c(param2,counter);\n      (**(code **)(&DAT_1fff0b78 + extractedValue * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + extractedValue * 0xc));\n    }\n  }\n  check_and_set_flag_00001cf0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002028": "process_flags_00002028",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "extractedValue",
                "uVar2": "flag",
                "local_c": "counter"
            },
            "calling": [
                "FUN_000020b8",
                "FUN_00002108",
                "FUN_000020cc",
                "FUN_000020e0",
                "FUN_000020f4"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020b8": {
            "entrypoint": "0x000020b8",
            "current_name": "initialize_process_000020b8",
            "code": "\nvoid initializeProcess_000020b8(void)\n\n{\n  setProcessFlags(0x40049000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020b8": "initialize_process_000020b8",
                "process_flags_00002028": "setProcessFlags"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020cc": {
            "entrypoint": "0x000020cc",
            "current_name": "initialize_process_flags_000020cc",
            "code": "\nvoid initializeProcessFlags_000020cc(void)\n\n{\n  process_flags_00002028(0x4004a000,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020cc": "initialize_process_flags_000020cc"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020e0": {
            "entrypoint": "0x000020e0",
            "current_name": "initialize_process_flags_000020e0",
            "code": "\nvoid initializeProcessFlags_000020e0(void)\n\n{\n  setProcessFlags(0x4004b000,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020e0": "initialize_process_flags_000020e0",
                "process_flags_00002028": "setProcessFlags"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020f4": {
            "entrypoint": "0x000020f4",
            "current_name": "initialize_process_flags_000020f4",
            "code": "\nvoid initializeProcessFlags_000020f4(void)\n\n{\n  setProcessFlags(0x4004c000,3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020f4": "initialize_process_flags_000020f4",
                "process_flags_00002028": "setProcessFlags"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002108": {
            "entrypoint": "0x00002108",
            "current_name": "initialize_process_flags_00002108",
            "code": "\nvoid initializeProcessFlags_00002108(void)\n\n{\n  setProcessFlags(0x4004d000,4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002108": "initialize_process_flags_00002108",
                "process_flags_00002028": "setProcessFlags"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000211c": {
            "entrypoint": "0x0000211c",
            "current_name": "display_process_information_0000211c",
            "code": "\nvoid displayProcessInformation_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 column1;\n  int processStackUsage;\n  int stackOffset;\n  dword baseAddress;\n  uint queueLength;\n  undefined4 *currentProcess;\n  undefined4 mainStackPointer;\n  undefined4 maximumValue;\n  int lastOffset;\n  short processIndex;\n  int totalStackUsage;\n  int stackUsed;\n  \n  column1 = 0x515f;\n  stackUsed = 0;\n  totalStackUsage = 0;\n  process_data_from_binary_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  lastOffset = find_last_offset_000008b8();\n  maximumValue = get_maximum_value_0000091c();\n  mainStackPointer = get_main_stack_pointer_00000900();\n  process_data_from_binary_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               lastOffset,maximumValue,mainStackPointer);\n  stackUsed = stackUsed + 0x200;\n  if (0 < lastOffset) {\n    totalStackUsage = lastOffset + totalStackUsage;\n  }\n  for (processIndex = 1; processIndex < 0x21; processIndex = processIndex + 1) {\n    currentProcess = *(undefined4 **)(&DAT_1fff0358 + processIndex * 4);\n    if (currentProcess != (undefined4 *)0x0) {\n      queueLength = (uint)*(byte *)(currentProcess + 1);\n      baseAddress = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[queueLength];\n      stackOffset = (int)&column1 + (uint)(8 < queueLength);\n      processStackUsage = currentProcess[0xb];\n      stackUsed = processStackUsage + stackUsed;\n      iVar1 = find_offset_000010a0(currentProcess[9]);\n      processStackUsage = processStackUsage - iVar1;\n      totalStackUsage = processStackUsage + totalStackUsage;\n      process_data_from_binary_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)currentProcess + 6),currentProcess[10],baseAddress,stackOffset,\n                   *(undefined *)((int)currentProcess + 5),currentProcess[0xb],processStackUsage,currentProcess[9],*currentProcess);\n    }\n  }\n  process_data_from_binary_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,stackUsed,totalStackUsage);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000211c": "display_process_information_0000211c",
                "local_40": "column1",
                "local_3c": "processStackUsage",
                "local_38": "stackOffset",
                "local_34": "baseAddress",
                "local_30": "queueLength",
                "local_2c": "currentProcess",
                "local_28": "mainStackPointer",
                "local_24": "maximumValue",
                "local_20": "lastOffset",
                "local_1a": "processIndex",
                "local_18": "totalStackUsage",
                "local_14": "stackUsed"
            },
            "calling": [
                "FUN_00002eb4",
                "FUN_00000f04"
            ],
            "called": [
                "FUN_000010a0",
                "FUN_00004c84",
                "FUN_000008b8",
                "FUN_00000900",
                "FUN_0000091c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 local_40;\n  int local_3c;\n  int local_38;\n  dword local_34;\n  uint local_30;\n  undefined4 *local_2c;\n  undefined4 local_28;\n  undefined4 local_24;\n  int local_20;\n  short local_1a;\n  int local_18;\n  int local_14;\n  \n  local_40 = 0x515f;\n  local_14 = 0;\n  local_18 = 0;\n  FUNC_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  local_20 = find_last_offset_000008b8();\n  local_24 = get_maximum_value_0000091c();\n  local_28 = get_main_stack_pointer_00000900();\n  FUNC_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               local_20,local_24,local_28);\n  local_14 = local_14 + 0x200;\n  if (0 < local_20) {\n    local_18 = local_20 + local_18;\n  }\n  for (local_1a = 1; local_1a < 0x21; local_1a = local_1a + 1) {\n    local_2c = *(undefined4 **)(&DAT_1fff0358 + local_1a * 4);\n    if (local_2c != (undefined4 *)0x0) {\n      local_30 = (uint)*(byte *)(local_2c + 1);\n      local_34 = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[local_30];\n      local_38 = (int)&local_40 + (uint)(8 < local_30);\n      local_3c = local_2c[0xb];\n      local_14 = local_3c + local_14;\n      iVar1 = find_offset_000010a0(local_2c[9]);\n      local_3c = local_3c - iVar1;\n      local_18 = local_3c + local_18;\n      FUNC_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)local_2c + 6),local_2c[10],local_34,local_38,\n                   *(undefined *)((int)local_2c + 5),local_2c[0xb],local_3c,local_2c[9],*local_2c);\n    }\n  }\n  FUNC_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,local_14,local_18);\n  return;\n}\n\n"
        },
        "FUN_00002270": {
            "entrypoint": "0x00002270",
            "current_name": "check_if_equal_00002270",
            "code": "\nundefined checkIfEqual_00002270(int input)\n\n{\n  undefined result;\n  int value;\n  bool isSame;\n  \n  value = *(int *)(input + 0xc);\n  isSame = *(int *)(input + 8) == value;\n  if (isSame) {\n    value = 1;\n  }\n  result = (undefined)value;\n  if (!isSame) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002270": "check_if_equal_00002270",
                "param_1": "input",
                "iVar2": "value",
                "bVar3": "isSame",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002294": {
            "entrypoint": "0x00002294",
            "current_name": "check_difference_and_return_value_00002294",
            "code": "\nundefined checkDifferenceAndReturnValue_00002294(int memoryAddress)\n\n{\n  undefined returnValue;\n  int difference;\n  bool isDifferenceValid;\n  \n  difference = *(int *)(memoryAddress + 4);\n  isDifferenceValid = *(int *)(memoryAddress + 0xc) - *(int *)(memoryAddress + 8) == difference;\n  if (isDifferenceValid) {\n    difference = 1;\n  }\n  returnValue = (undefined)difference;\n  if (!isDifferenceValid) {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00002294": "check_difference_and_return_value_00002294",
                "param_1": "memoryAddress",
                "iVar2": "difference",
                "bVar3": "isDifferenceValid",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022be": {
            "entrypoint": "0x000022be",
            "current_name": "increment_and_store_000022be",
            "code": "\nvoid increment_and_store_000022be(int *array,undefined value)\n\n{\n  uint previous_count;\n  \n  previous_count = count;\n  count = previous_count + 1;\n  *(undefined *)((previous_count & array_length - 1U) + *array) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000022be": "increment_and_store_000022be",
                "param_1": "array",
                "param_2": "value",
                "uVar1": "previous_count",
                "param_1[3]": "count",
                "param_1[1]": "array_length"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022f0": {
            "entrypoint": "0x000022f0",
            "current_name": "increment_and_return_element_000022f0",
            "code": "\nundefined incrementAndReturnElement_000022f0(int *array)\n\n{\n  uint currentValue;\n  \n  currentValue = array[2];\n  array[2] = currentValue + 1;\n  return *(undefined *)((currentValue & array[1] - 1U) + *array);\n}\n\n",
            "renaming": {
                "FUN_000022f0": "increment_and_return_element_000022f0",
                "param_1": "array",
                "uVar1": "currentValue"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000231c": {
            "entrypoint": "0x0000231c",
            "current_name": "copy_and_decrement_0000231c",
            "code": "\nint copyAndDecrement_0000231c(undefined4 input,undefined *output,int size)\n\n{\n  undefined element;\n  int isEqual;\n  undefined *outputPointer;\n  int remainingSize;\n  \n  outputPointer = output;\n  remainingSize = size;\n  while ((remainingSize != 0 && (isEqual = check_if_equal_00002270(input), isEqual == 0))) {\n    element = increment_and_return_element_000022f0(input);\n    *outputPointer = element;\n    remainingSize = remainingSize + -1;\n    outputPointer = outputPointer + 1;\n  }\n  return size - remainingSize;\n}\n\n",
            "renaming": {
                "FUN_0000231c": "copy_and_decrement_0000231c",
                "param_1": "input",
                "param_2": "output",
                "param_3": "size",
                "uVar1": "element",
                "iVar2": "isEqual",
                "local_20": "outputPointer",
                "local_14": "remainingSize"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002270",
                "FUN_000022f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002364": {
            "entrypoint": "0x00002364",
            "current_name": "check_and_update_value_00002364",
            "code": "\nundefined4 checkAndUpdateValue_00002364(undefined4 inputValue,undefined additionalValue)\n\n{\n  int differenceCheckResult;\n  undefined4 returnValue;\n  \n  differenceCheckResult = check_difference_and_return_value_00002294(inputValue);\n  if (differenceCheckResult == 0) {\n    increment_and_store_000022be(inputValue,additionalValue);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00002364": "check_and_update_value_00002364",
                "param_1": "inputValue",
                "param_2": "additionalValue",
                "iVar1": "differenceCheckResult",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_000022be",
                "FUN_00002294"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002396": {
            "entrypoint": "0x00002396",
            "current_name": "initialize_system_00002396",
            "code": "\nvoid initialize_system_00002396(void)\n\n{\n  initialize_system_00002396_000025f4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002396": "initialize_system_00002396"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_000025f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023a4": {
            "entrypoint": "0x000023a4",
            "current_name": "initialize_system_000023a4",
            "code": "\nundefined4 initializeSystem_000023a4(void)\n\n{\n  undefined4 uVar1;\n  undefined buffer [128];\n  \n  handleInterrupts(0);\n  displayMessage(\"Welcome to RIOT!\");\n  uVar1 = processDataLoop(0,buffer,0x80);\n  triggerSoftwareInterrupt(0x3f);\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_000023a4": "initialize_system_000023a4",
                "auStack_88": "buffer",
                "execute_or_return_on_interrupt_000023d0": "handleInterrupts",
                "process_binary_data_00004db8": "displayMessage",
                "process_data_loop_00002e6c": "processDataLoop",
                "software_interrupt": "triggerSoftwareInterrupt"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002e6c",
                "FUN_000023d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023c8": {
            "entrypoint": "0x000023c8",
            "current_name": "execute_software_interrupt_000023c8",
            "code": "\nvoid executeSoftwareInterrupt_000023c8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000023c8": "execute_software_interrupt_000023c8"
            },
            "calling": [
                "FUN_000023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023d0": {
            "entrypoint": "0x000023d0",
            "current_name": "execute_or_return_on_interrupt_000023d0",
            "code": "\nundefined4 execute_or_return_on_interrupt_000023d0(undefined4 input_value)\n\n{\n  undefined4 result;\n  \n  if (DAT_1fff0d98 == 0) {\n    result = execute_software_interrupt_000023c8(1,input_value,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000023d0": "execute_or_return_on_interrupt_000023d0",
                "param_1": "input_value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000023c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002400": {
            "entrypoint": "0x00002400",
            "current_name": "FUNC_00002400",
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000240c": {
            "entrypoint": "0x0000240c",
            "current_name": "copy_value_and_return_0000240c",
            "code": "\nundefined4 * copyValueAndReturn_0000240c(undefined4 *inputPointer)\n\n{\n  undefined4 *valuePointer;\n  \n  valuePointer = (undefined4 *)*inputPointer;\n  if (valuePointer != (undefined4 *)0x0) {\n    *inputPointer = *valuePointer;\n  }\n  return valuePointer;\n}\n\n",
            "renaming": {
                "FUN_0000240c": "copy_value_and_return_0000240c",
                "param_1": "inputPointer",
                "puVar1": "valuePointer"
            },
            "calling": [
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002434": {
            "entrypoint": "0x00002434",
            "current_name": "handle_interrupt_00002434",
            "code": "\nundefined4 handleInterrupt_00002434(int *interruptFlag,int privilegedMode)\n\n{\n  int initialValue;\n  undefined4 returnValue;\n  \n  returnValue = check_irq_interrupts_enabled_00000cd0();\n  initialValue = DAT_1fff03dc;\n  if (*interruptFlag == 0) {\n    *interruptFlag = -1;\n    enable_ir_qinterrupts_if_privileged_00000d0c(returnValue);\n    returnValue = 1;\n  }\n  else if (privilegedMode == 0) {\n    enable_ir_qinterrupts_if_privileged_00000d0c(returnValue);\n    returnValue = 0;\n  }\n  else {\n    update_pointer_and_flag_00000698(DAT_1fff03dc,2);\n    if (*interruptFlag == -1) {\n      *interruptFlag = initialValue + 8;\n      *(undefined4 *)*interruptFlag = 0;\n    }\n    else {\n      find_max_pointer_00001034(interruptFlag,initialValue);\n    }\n    enable_ir_qinterrupts_if_privileged_00000d0c(returnValue);\n    set_flag_bit_0000093c();\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00002434": "handle_interrupt_00002434",
                "param_1": "interruptFlag",
                "param_2": "privilegedMode",
                "iVar1": "initialValue",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_0000129c"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00001034",
                "FUN_0000093c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000024bc": {
            "entrypoint": "0x000024bc",
            "current_name": "update_irq_interrupts_000024bc",
            "code": "\nvoid updateIRQInterrupts_000024bc(int *interruptFlag)\n\n{\n  undefined exceptionFlag;\n  undefined4 irqInterruptsEnabled;\n  int copiedValue;\n  \n  irqInterruptsEnabled = check_irq_interrupts_enabled_00000cd0();\n  if (*interruptFlag == 0) {\n    enable_ir_qinterrupts_if_privileged_00000d0c(irqInterruptsEnabled);\n  }\n  else if (*interruptFlag == -1) {\n    *interruptFlag = 0;\n    enable_ir_qinterrupts_if_privileged_00000d0c(irqInterruptsEnabled);\n  }\n  else {\n    copiedValue = copy_value_and_return_0000240c(interruptFlag);\n    update_pointer_and_flag_00000698(copiedValue + -8,10);\n    if (*interruptFlag == 0) {\n      *interruptFlag = -1;\n    }\n    exceptionFlag = *(undefined *)(copiedValue + -3);\n    enable_ir_qinterrupts_if_privileged_00000d0c(irqInterruptsEnabled);\n    check_exception_and_set_flag_00000738(exceptionFlag);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000024bc": "update_irq_interrupts_000024bc",
                "param_1": "interruptFlag",
                "uVar1": "exceptionFlag",
                "uVar2": "irqInterruptsEnabled",
                "iVar3": "copiedValue"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000cd0",
                "FUN_0000240c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002538": {
            "entrypoint": "0x00002538",
            "current_name": "set_byte_value_00002538",
            "code": "\nvoid setByteValue_00002538(byte byteIndex,uint newValue)\n\n{\n  if ((char)byteIndex < '\\0') {\n    (&DAT_e000ed14)[byteIndex & 0xf] = (char)((newValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)byteIndex + -0x1fff1c00) = (char)((newValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002538": "set_byte_value_00002538",
                "param_1": "byteIndex",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_0000258c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000258c": {
            "entrypoint": "0x0000258c",
            "current_name": "initialize_peripheral_registers_0000258c",
            "code": "\n\n\nvoid initializePeripheralRegisters_0000258c(void)\n\n{\n  uint counter;\n  \n  _DAT_e000ed08 = 0;\n  setRegisterValue(0xfffffffe,1);\n  setRegisterValue(0xfffffffb,1);\n  for (counter = 0; counter < 0x66; counter = counter + 1) {\n    setRegisterValue((int)(char)counter,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000258c": "initialize_peripheral_registers_0000258c",
                "local_c": "counter",
                "set_byte_value_00002538": "setRegisterValue"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000025f4": {
            "entrypoint": "0x000025f4",
            "current_name": "initialize_system_000025f4",
            "code": "\nvoid initialize_system_000025f4(void)\n\n{\n  initialize_system_000025f4_000027b0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000025f4": "initialize_system_000025f4"
            },
            "calling": [
                "FUN_00002396"
            ],
            "called": [
                "FUN_000027b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002600": {
            "entrypoint": "0x00002600",
            "current_name": "process_date_00002600",
            "code": "\nundefined4 processDate_00002600(undefined4 inputDate)\n\n{\n  undefined4 adjustedDate;\n  \n  adjustedDate = calculate_adjusted_date_000047e4(inputDate);\n  set_data_and_flag_0000285c(adjustedDate);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002600": "process_date_00002600",
                "param_1": "inputDate",
                "uVar1": "adjustedDate"
            },
            "calling": [
                "FUN_00003478"
            ],
            "called": [
                "FUN_0000285c",
                "FUN_000047e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002624": {
            "entrypoint": "0x00002624",
            "current_name": "process_data_00002624",
            "code": "\nundefined4 processData_00002624(undefined4 inputData)\n\n{\n  undefined4 dataFromMemory;\n  undefined4 counter;\n  \n  dataFromMemory = get_data_from_memory_0000281c();\n  counter = 0;\n  calculate_date_time_0000443c(&dataFromMemory,inputData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002624": "process_data_00002624",
                "param_1": "inputData",
                "local_10": "dataFromMemory",
                "uStack_c": "counter"
            },
            "calling": [
                "FUN_00003444"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002654": {
            "entrypoint": "0x00002654",
            "current_name": "initialize_adjusted_date_00002654",
            "code": "\nundefined4 initializeAdjustedDate_00002654(undefined4 originalDate,undefined4 adjustedDate,undefined4 additionalData)\n\n{\n  undefined4 adjustedDateValue;\n  \n  adjustedDateValue = calculate_adjusted_date_000047e4(originalDate);\n  DAT_1fff0d9c = adjustedDate;\n  initialize_data_00002894(adjustedDateValue,0x26f1,additionalData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002654": "initialize_adjusted_date_00002654",
                "param_1": "originalDate",
                "param_2": "adjustedDate",
                "param_3": "additionalData",
                "uVar1": "adjustedDateValue"
            },
            "calling": [
                "FUN_000033f4"
            ],
            "called": [
                "FUN_000047e4",
                "FUN_00002894"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002690": {
            "entrypoint": "0x00002690",
            "current_name": "process_data_00002690",
            "code": "\nundefined4 processData_00002690(undefined4 inputData)\n\n{\n  undefined4 dataPointer;\n  undefined4 initialValue;\n  \n  dataPointer = increment_data_pointer_000028f0();\n  initialValue = 0;\n  calculate_date_time_0000443c(&dataPointer,inputData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002690": "process_data_00002690",
                "param_1": "inputData",
                "local_10": "dataPointer",
                "uStack_c": "initialValue"
            },
            "calling": [
                "FUN_000033c0"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_000028f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026c0": {
            "entrypoint": "0x000026c0",
            "current_name": "clear_system_flags_000026c0",
            "code": "\nvoid clear_system_flags_000026c0(void)\n\n{\n  clear_system_flags_000026c0_00002910();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026c0": "clear_system_flags_000026c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002910"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026d8": {
            "entrypoint": "0x000026d8",
            "current_name": "initialize_flag_000026d8",
            "code": "\nvoid initialize_flag_000026d8(void)\n\n{\n  set_flag();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026d8": "initialize_flag_000026d8",
                "set_flag_0000294c": "set_flag"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026e4": {
            "entrypoint": "0x000026e4",
            "current_name": "clear_interrupt_flag_000026e4",
            "code": "\nvoid clearInterruptFlag_000026e4(void)\n\n{\n  clearInterruptFlag_000026e4Helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026e4": "clear_interrupt_flag_000026e4",
                "clear_interrupt_flag_00002970": "clearInterruptFlagHelper"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026f0": {
            "entrypoint": "0x000026f0",
            "current_name": "execute_callback_000026f0",
            "code": "\nvoid executeCallback_000026f0(undefined4 argument)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(argument);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026f0": "execute_callback_000026f0",
                "param_1": "argument"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002714": {
            "entrypoint": "0x00002714",
            "current_name": "set_bit_at_position_00002714",
            "code": "\nvoid setBitAtPosition_00002714(byte byteValue)\n\n{\n  *(int *)(((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002714": "set_bit_at_position_00002714",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002744": {
            "entrypoint": "0x00002744",
            "current_name": "set_byte_value_00002744",
            "code": "\nvoid setByteValue_00002744(byte byteIndex,uint value)\n\n{\n  if ((char)byteIndex < '\\0') {\n    (&DAT_e000ed14)[byteIndex & 0xf] = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)byteIndex + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002744": "set_byte_value_00002744",
                "param_1": "byteIndex",
                "param_2": "value"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002798": {
            "entrypoint": "0x00002798",
            "current_name": "check_flag_and_set_00002798",
            "code": "\nvoid check_flag_and_set_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    set_flag_bit();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002798": "check_flag_and_set_00002798",
                "set_flag_bit_0000093c": "set_flag_bit"
            },
            "calling": [
                "FUN_00002994"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000027b0": {
            "entrypoint": "0x000027b0",
            "current_name": "initialize_system_000027b0",
            "code": "\n\n\nvoid initializeSystem_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  setFlag();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000027b0": "initialize_system_000027b0",
                "set_flag_0000294c": "setFlag"
            },
            "calling": [
                "FUN_000025f4"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000281c": {
            "entrypoint": "0x0000281c",
            "current_name": "get_data_from_memory_0000281c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nundefined4 get_data_from_memory_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "renaming": {
                "FUN_0000281c": "get_data_from_memory_0000281c"
            },
            "calling": [
                "FUN_00002624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000285c": {
            "entrypoint": "0x0000285c",
            "current_name": "set_data_and_flag_0000285c",
            "code": "\n\n\nvoid set_data_and_flag_0000285c(undefined4 data)\n\n{\n  _DAT_4003d000 = data;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000285c": "set_data_and_flag_0000285c",
                "param_1": "data"
            },
            "calling": [
                "FUN_00002600"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002894": {
            "entrypoint": "0x00002894",
            "current_name": "initialize_data_00002894",
            "code": "\n\n\nvoid initializeData_00002894(int dataSize,undefined4 param2Value,undefined4 param3Value)\n\n{\n  _DAT_4003d008 = dataSize + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = param2Value;\n  DAT_1fff0da4 = param3Value;\n  set_byte_value_00002744(0x2e,10);\n  set_bit_at_position_00002714(0x2e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002894": "initialize_data_00002894",
                "param_1": "dataSize",
                "param_2": "param2Value",
                "param_3": "param3Value"
            },
            "calling": [
                "FUN_00002654"
            ],
            "called": [
                "FUN_00002714",
                "FUN_00002744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000028f0": {
            "entrypoint": "0x000028f0",
            "current_name": "increment_data_pointer_000028f0",
            "code": "\n\n\nint increment_data_pointer_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "renaming": {
                "FUN_000028f0": "increment_data_pointer_000028f0"
            },
            "calling": [
                "FUN_00002690"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002910": {
            "entrypoint": "0x00002910",
            "current_name": "clear_system_flags_00002910",
            "code": "\n\n\nvoid clearSystemFlags_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002910": "clear_system_flags_00002910"
            },
            "calling": [
                "FUN_000026c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000294c": {
            "entrypoint": "0x0000294c",
            "current_name": "set_flag_0000294c",
            "code": "\n\n\nvoid set_flag_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000294c": "set_flag_0000294c"
            },
            "calling": [
                "FUN_000026d8",
                "FUN_000027b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002970": {
            "entrypoint": "0x00002970",
            "current_name": "clear_interrupt_flag_00002970",
            "code": "\n\n\nvoid clearInterruptFlag_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002970": "clear_interrupt_flag_00002970"
            },
            "calling": [
                "FUN_000026e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002994": {
            "entrypoint": "0x00002994",
            "current_name": "execute_callbacks_00002994",
            "code": "\n\n\nvoid executeCallbacks_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (code *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (code *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  checkAndSetFlag();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002994": "execute_callbacks_00002994",
                "check_flag_and_set_00002798": "checkAndSetFlag"
            },
            "calling": [],
            "called": [
                "FUN_00002798"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a00": {
            "entrypoint": "0x00002a00",
            "current_name": "process_data_wrapper_00002a00",
            "code": "\nvoid processDataWrapper_00002a00(undefined4 data)\n\n{\n  processData(data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a00": "process_data_wrapper_00002a00",
                "param_1": "data",
                "process_data_00004cb4": "processData"
            },
            "calling": [
                "FUN_00002d94",
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a18": {
            "entrypoint": "0x00002a18",
            "current_name": "find_matching_value_00002a18",
            "code": "\nint findMatchingValue_00002a18(int *array,undefined4 targetValue)\n\n{\n  int iVar1;\n  int *currentArray;\n  undefined **rebootString;\n  uint index;\n  int *currentElement;\n  \n  currentArray = array;\n  rebootString = &PTR_s_reboot_00007300;\n  index = 0;\n  do {\n    if (1 < index) {\n      return 0;\n    }\n    currentElement = (&currentArray)[index];\n    if (currentElement != (int *)0x0) {\n      for (; *currentElement != 0; currentElement = currentElement + 3) {\n        iVar1 = compare_bytes_00004e52(*currentElement,targetValue);\n        if (iVar1 == 0) {\n          return currentElement[2];\n        }\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002a18": "find_matching_value_00002a18",
                "param_1": "array",
                "param_2": "targetValue",
                "local_18": "currentArray",
                "local_14": "rebootString",
                "local_10": "index",
                "local_c": "currentElement"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a88": {
            "entrypoint": "0x00002a88",
            "current_name": "print_command_descriptions_00002a88",
            "code": "\nvoid printCommandDescriptions_00002a88(int *commandArray)\n\n{\n  int *paramPointer;\n  undefined **descriptionPointer;\n  uint index;\n  int *currentCommand;\n  \n  process_data_from_binary_00004c84(\"%-20s %s\\n\",\"Command\",\"Description\");\n  process_binary_data_00004db8(\"---------------------------------------\");\n  paramPointer = commandArray;\n  descriptionPointer = &PTR_s_reboot_00007300;\n  for (index = 0; index < 2; index = index + 1) {\n    currentCommand = (&paramPointer)[index];\n    if (currentCommand != (int *)0x0) {\n      for (; *currentCommand != 0; currentCommand = currentCommand + 3) {\n        process_data_from_binary_00004c84(\"%-20s %s\\n\",*currentCommand,currentCommand[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a88": "print_command_descriptions_00002a88",
                "param_1": "commandArray",
                "local_18": "paramPointer",
                "local_14": "descriptionPointer",
                "local_10": "index",
                "local_c": "currentCommand"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002b10": {
            "entrypoint": "0x00002b10",
            "current_name": "process_command_00002b10",
            "code": "\nvoid processCommand_00002b10(undefined4 commandIndex,byte *commandString)\n\n{\n  int comparisonResult;\n  byte *nextByte;\n  byte *inputBuffers [3];\n  code *matchingFunction;\n  char **commandArgs;\n  uint argCount;\n  byte quoteCharacter;\n  char *currentChar;\n  char *innerChar;\n  char **commandPtrs;\n  uint argIndex;\n  int backslashCount;\n  uint quoteCount;\n  byte *currentByte;\n  \n  quoteCount = 0;\n  backslashCount = 0;\n  currentByte = commandString;\n  while( true ) {\n    inputBuffers[0] = commandString;\n    inputBuffers[1] = (byte *)commandIndex;\n    if (0x20 < *currentByte) {\n      if ((*currentByte == 0x22) || (*currentByte == 0x27)) {\n        quoteCharacter = *currentByte;\n        do {\n          nextByte = currentByte + 1;\n          if (*nextByte == 0) {\n            currentByte = nextByte;\n            process_binary_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n          if (*nextByte == 0x5c) {\n            backslashCount = backslashCount + 1;\n            currentByte = currentByte + 2;\n            nextByte = currentByte;\n            if (*currentByte == 0) {\n              process_binary_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentByte = nextByte;\n        } while (quoteCharacter != *currentByte);\n        if (0x20 < currentByte[1]) {\n          process_binary_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*currentByte == 0x5c) {\n            backslashCount = backslashCount + 1;\n            currentByte = currentByte + 1;\n            if (*currentByte == 0) {\n              process_binary_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentByte = currentByte + 1;\n          if (*currentByte == 0x22) {\n            process_binary_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n        } while (0x20 < *currentByte);\n      }\n      quoteCount = quoteCount + 1;\n    }\n    if (*currentByte == 0) break;\n    *currentByte = 0;\n    currentByte = currentByte + 1;\n  }\n  if (quoteCount != 0) {\n    argCount = quoteCount;\n    commandArgs = (char **)((int)inputBuffers - ((quoteCount + 1) * 4 + 7 & 0xfffffff8));\n    commandArgs[quoteCount] = (char *)0x0;\n    currentByte = commandString;\n    for (argIndex = 0; commandPtrs = commandArgs, argIndex < quoteCount; argIndex = argIndex + 1) {\n      for (; *currentByte == 0; currentByte = currentByte + 1) {\n      }\n      if ((*currentByte == 0x22) || (*currentByte == 0x27)) {\n        currentByte = currentByte + 1;\n      }\n      commandArgs[argIndex] = (char *)currentByte;\n      for (; *currentByte != 0; currentByte = currentByte + 1) {\n      }\n    }\n    for (; (backslashCount != 0 && (*commandPtrs != (char *)0x0)); commandPtrs = commandPtrs + 1) {\n      for (innerChar = *commandPtrs; *innerChar != '\\0'; innerChar = innerChar + 1) {\n        if (*innerChar == '\\') {\n          for (currentChar = innerChar; *currentChar != '\\0'; currentChar = currentChar + 1) {\n            *currentChar = currentChar[1];\n          }\n          backslashCount = backslashCount + -1;\n          if (backslashCount == 0) break;\n        }\n      }\n    }\n    matchingFunction = (code *)find_matching_value_00002a18(commandIndex,*commandArgs);\n    if (matchingFunction == (code *)0x0) {\n      comparisonResult = compare_bytes_00004e52(&DAT_00007214,*commandArgs);\n      if (comparisonResult == 0) {\n        print_command_descriptions_00002a88(inputBuffers[1]);\n      }\n      else {\n        process_data_from_binary_00004c84(\"shell: command not found: %s\\n\",*commandArgs);\n      }\n    }\n    else {\n      (*matchingFunction)(quoteCount,commandArgs);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002b10": "process_command_00002b10",
                "param_1": "commandIndex",
                "param_2": "commandString",
                "iVar1": "comparisonResult",
                "pbVar2": "nextByte",
                "local_48": "inputBuffers",
                "local_3c": "matchingFunction",
                "local_38": "commandArgs",
                "local_34": "argCount",
                "local_2d": "quoteCharacter",
                "local_2c": "currentChar",
                "local_28": "innerChar",
                "local_24": "commandPtrs",
                "local_20": "argIndex",
                "local_1c": "backslashCount",
                "local_18": "quoteCount",
                "local_14": "currentByte"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002a18",
                "FUN_00004e52",
                "FUN_00004c84",
                "FUN_00002a88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002d94": {
            "entrypoint": "0x00002d94",
            "current_name": "process_data_00002d94",
            "code": "\nuint processData_00002d94(undefined *dataPointer,int dataLength)\n\n{\n  int result;\n  byte byteValue;\n  bool isFirstByte;\n  undefined *currentByte;\n  \n  currentByte = dataPointer;\n  while( true ) {\n    if (dataLength + -1 <= (int)currentByte - (int)dataPointer) {\n      return 0xffffffff;\n    }\n    result = process_data_00004418();\n    if (result < 0) break;\n    if ((result == 0xd) || (result == 10)) {\n      *currentByte = 0;\n      process_data_wrapper_00002a00(0xd);\n      process_data_wrapper_00002a00(10);\n      isFirstByte = currentByte == dataPointer;\n      if (isFirstByte) {\n        dataPointer = (undefined *)0x1;\n      }\n      byteValue = (byte)dataPointer;\n      if (!isFirstByte) {\n        byteValue = 0;\n      }\n      return (uint)byteValue;\n    }\n    if ((result == 8) || (result == 0x7f)) {\n      if (currentByte != dataPointer) {\n        currentByte = currentByte + -1;\n        *currentByte = 0;\n        process_data_wrapper_00002a00(8);\n        process_data_wrapper_00002a00(0x20);\n        process_data_wrapper_00002a00(8);\n      }\n    }\n    else {\n      *currentByte = (char)result;\n      process_data_wrapper_00002a00(result);\n      currentByte = currentByte + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00002d94": "process_data_00002d94",
                "param_1": "dataPointer",
                "param_2": "dataLength",
                "iVar1": "result",
                "bVar2": "byteValue",
                "bVar3": "isFirstByte",
                "local_c": "currentByte"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004418",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e48": {
            "entrypoint": "0x00002e48",
            "current_name": "process_data_00002e48",
            "code": "\nvoid process_data_00002e48(void)\n\n{\n  process_data_00002e48_wrapper_00002a00(0x3e);\n  process_data_00002e48_wrapper_00002a00(0x20);\n  process_data_00002e48_and_validate(*(undefined4 *)(Elf32_Rel_ARRAY[16].r_offset + 8));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002e48": "process_data_00002e48",
                "Elf32_Rel_ARRAY_1fff0200": "Elf32_Rel_ARRAY",
                "process_data_and_validate_000041d0": "process_data_and_validate"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_000041d0",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "entrypoint": "0x00002e6c",
            "current_name": "process_data_loop_00002e6c",
            "code": "\nvoid process_data_loop_00002e6c(undefined4 command_param,undefined4 input_param,undefined4 output_param)\n\n{\n  int result;\n  \n  initialize_data_processing();\n  do {\n    result = process_data(input_param,output_param);\n    if (result == 0) {\n      execute_command(command_param,input_param);\n    }\n    initialize_data_processing();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002e6c": "process_data_loop_00002e6c",
                "param_1": "command_param",
                "param_2": "input_param",
                "param_3": "output_param",
                "iVar1": "result",
                "process_data_00002e48": "initialize_data_processing",
                "process_data_00002d94": "process_data",
                "process_command_00002b10": "execute_command"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_00002d94",
                "FUN_00002b10",
                "FUN_00002e48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "entrypoint": "0x00002e9c",
            "current_name": "execute_continuous_loop_00002e9c",
            "code": "\nundefined4 execute_continuous_loop_00002e9c(void)\n\n{\n  execute_continuous_loop_00002e9c_00003688();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002e9c": "execute_continuous_loop_00002e9c"
            },
            "calling": [],
            "called": [
                "FUN_00003688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "entrypoint": "0x00002eb4",
            "current_name": "display_process_information_00002eb4",
            "code": "\nundefined4 display_process_information_00002eb4(void)\n\n{\n  display_process_information_00002eb4_0000211c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002eb4": "display_process_information_00002eb4"
            },
            "calling": [],
            "called": [
                "FUN_0000211c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "entrypoint": "0x00002ecc",
            "current_name": "read_from_device_00002ecc",
            "code": "\nvoid readFromDevice_00002ecc(undefined4 deviceNumber,int deviceInfo)\n\n{\n  undefined4 className;\n  undefined4 data;\n  undefined buffer [8];\n  uint readSize;\n  \n  readSize = execute_function_00003d64(deviceInfo,buffer);\n  if ((int)readSize < 1) {\n    process_data_from_binary_00004c84(\"error: failed to read from device #%i\\n\",deviceNumber);\n  }\n  else {\n    data = *(undefined4 *)(deviceInfo + 8);\n    className = get_class_name_000039e8(*(undefined *)(*(int *)(deviceInfo + 0xc) + 8));\n    process_data_from_binary_00004c84(\"Reading from #%i (%s|%s)\\n\",deviceNumber,data,className);\n    display_data_00003694(buffer,readSize & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002ecc": "read_from_device_00002ecc",
                "param_1": "deviceNumber",
                "param_2": "deviceInfo",
                "uVar1": "className",
                "uVar2": "data",
                "auStack_1c": "buffer",
                "local_14": "readSize"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_000039e8",
                "FUN_00003694",
                "FUN_00003d64",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f30": {
            "entrypoint": "0x00002f30",
            "current_name": "process_device_data_00002f30",
            "code": "\nvoid process_device_data_00002f30(void)\n\n{\n  int iteration_count;\n  undefined4 *current_data_ptr;\n  \n  iteration_count = 0;\n  for (current_data_ptr = DAT_1fff0db0; current_data_ptr != (undefined4 *)0x0; current_data_ptr = (undefined4 *)*current_data_ptr) {\n    read_from_device_00002ecc(iteration_count,current_data_ptr);\n    process_binary_data_00004db8(&DAT_00007380);\n    iteration_count = iteration_count + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f30": "process_device_data_00002f30",
                "local_10": "iteration_count",
                "local_c": "current_data_ptr"
            },
            "calling": [
                "FUN_00002fe0"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f74": {
            "entrypoint": "0x00002f74",
            "current_name": "print_device_information_00002f74",
            "code": "\nvoid printDeviceInformation_00002f74(void)\n\n{\n  undefined4 className;\n  int deviceCount;\n  undefined4 *deviceList;\n  \n  deviceList = DAT_1fff0db0;\n  deviceCount = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    process_binary_data_00004db8(\"No devices found\");\n  }\n  else {\n    process_binary_data_00004db8(\"ID\\tClass\\t\\tName\");\n  }\n  for (; deviceList != (undefined4 *)0x0; deviceList = (undefined4 *)*deviceList) {\n    className = get_class_name_000039e8(*(undefined *)(deviceList[3] + 8));\n    process_data_from_binary_00004c84(\"#%i\\t%s\\t%s\\n\",deviceCount,className,deviceList[2]);\n    deviceCount = deviceCount + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f74": "print_device_information_00002f74",
                "local_18": "deviceCount",
                "local_14": "deviceList",
                "uVar1": "className"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_000039e8",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "entrypoint": "0x00002fe0",
            "current_name": "process_device_data_00002fe0",
            "code": "\nvoid processDeviceData_00002fe0(int numArgs,undefined4 *args)\n\n{\n  int comparisonResult;\n  undefined4 parsedInteger;\n  \n  if (numArgs < 3) {\n    process_data_from_binary_00004c84(\"usage: %s %s <device id>|all\\n\",*args,args[1]);\n  }\n  else {\n    comparisonResult = compare_bytes_00004e52(args[2],&DAT_000073d4);\n    if (comparisonResult == 0) {\n      process_device_data_00002f30();\n    }\n    else {\n      parsedInteger = parse_and_print_unsigned_integers_00004042(args[2]);\n      comparisonResult = find_nth_element_00003d24(parsedInteger);\n      if (comparisonResult == 0) {\n        process_binary_data_00004db8(\"error: undefined device id given\");\n      }\n      else {\n        read_from_device_00002ecc(parsedInteger,comparisonResult);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002fe0": "process_device_data_00002fe0",
                "param_1": "numArgs",
                "param_2": "args",
                "iVar1": "comparisonResult",
                "uVar2": "parsedInteger"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00004e52",
                "FUN_00003d24",
                "FUN_00002ecc",
                "FUN_00002f30",
                "FUN_00004c84",
                "FUN_00004042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000305c": {
            "entrypoint": "0x0000305c",
            "current_name": "write_to_device_0000305c",
            "code": "\nvoid writeToDevice_0000305c(int argc,undefined4 *argv)\n\n{\n  undefined2 value;\n  undefined2 valuesArray [4];\n  uint numValues;\n  int deviceIndex;\n  undefined4 deviceId;\n  int loopIndex;\n  \n  if (argc < 4) {\n    process_data_from_binary_00004c84(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*argv,argv[1]);\n  }\n  else {\n    deviceId = parse_and_print_unsigned_integers_00004042(argv[2]);\n    deviceIndex = find_nth_element_00003d24(deviceId);\n    if (deviceIndex == 0) {\n      process_binary_data_00004db8(\"error: undefined device given\");\n    }\n    else {\n      fill_memory_00004622(valuesArray,0,8);\n      if (5 < argc) {\n        argc = 6;\n      }\n      numValues = argc - 3;\n      for (loopIndex = 0; loopIndex < (int)numValues; loopIndex = loopIndex + 1) {\n        value = parse_and_print_unsigned_integers_00004042(argv[loopIndex + 3]);\n        valuesArray[loopIndex] = value;\n      }\n      process_data_from_binary_00004c84(\"Writing to device #%i - %s\\n\",deviceId,*(undefined4 *)(deviceIndex + 8));\n      display_data_00003694(valuesArray,numValues & 0xff);\n      numValues = execute_function_00003d94(deviceIndex,valuesArray);\n      if ((int)numValues < 1) {\n        if (numValues == -0x86) {\n          process_data_from_binary_00004c84(\"error: device #%i is not writable\\n\",deviceId);\n        }\n        else {\n          process_data_from_binary_00004c84(\"error: failure to write to device #%i\\n\",deviceId);\n        }\n      }\n      else {\n        process_data_from_binary_00004c84(\"data successfully written to device #%i\\n\",deviceId);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000305c": "write_to_device_0000305c",
                "param_1": "argc",
                "param_2": "argv",
                "uVar1": "value",
                "auStack_20": "valuesArray",
                "local_18": "numValues",
                "local_14": "deviceIndex",
                "local_10": "deviceId",
                "local_c": "loopIndex"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00003694",
                "FUN_00003d94",
                "FUN_00003d24",
                "FUN_00004622",
                "FUN_00004c84",
                "FUN_00004042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000316c": {
            "entrypoint": "0x0000316c",
            "current_name": "process_device_command_0000316c",
            "code": "\nundefined4 processDeviceCommand_0000316c(int commandType,undefined4 *arguments)\n\n{\n  int comparisonResult;\n  \n  if (commandType < 2) {\n    print_device_information_00002f74();\n  }\n  else {\n    comparisonResult = compare_bytes_00004e52(arguments[1],&DAT_000074ec);\n    if (comparisonResult == 0) {\n      process_device_data_00002fe0(commandType,arguments);\n    }\n    else {\n      comparisonResult = compare_bytes_00004e52(arguments[1],\"write\");\n      if (comparisonResult == 0) {\n        write_to_device_0000305c(commandType,arguments);\n      }\n      else {\n        process_data_from_binary_00004c84(\"usage: %s read|write\\n\",*arguments);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000316c": "process_device_command_0000316c",
                "param_1": "commandType",
                "param_2": "arguments",
                "iVar1": "comparisonResult"
            },
            "calling": [],
            "called": [
                "FUN_00002f74",
                "FUN_00002fe0",
                "FUN_00004e52",
                "FUN_00004c84",
                "FUN_0000305c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031e0": {
            "entrypoint": "0x000031e0",
            "current_name": "ring_alarm_000031e0",
            "code": "\nvoid ringAlarm_000031e0(void)\n\n{\n  process_binary_data_00004db8(\"The alarm rang\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_000031e0": "ring_alarm_000031e0"
            },
            "calling": [],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_000031e0(void)\n\n{\n  FUNC_00004db8(\"The alarm rang\");\n  return;\n}\n\n"
        },
        "FUN_000031fc": {
            "entrypoint": "0x000031fc",
            "current_name": "calculate_weekday_000031fc",
            "code": "\nint calculateWeekday_000031fc(int year,int month,int day)\n\n{\n  byte weekdayOffset;\n  int adjustedMonth;\n  \n  adjustedMonth = month;\n  if (month < 3) {\n    adjustedMonth = 1;\n  }\n  weekdayOffset = (byte)adjustedMonth;\n  if (2 < month) {\n    weekdayOffset = 0;\n  }\n  year = year - (uint)weekdayOffset;\n  adjustedMonth = year;\n  if (year < 0) {\n    adjustedMonth = year + 3;\n  }\n  return ((((adjustedMonth >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)weekdayLookupTable + (month + -1) * 4 + 0x50) + day) % 7;\n}\n\n",
            "renaming": {
                "FUN_000031fc": "calculate_weekday_000031fc",
                "param_1": "year",
                "param_2": "month",
                "param_3": "day",
                "bVar1": "weekdayOffset",
                "iVar2": "adjustedMonth",
                "Elf32_Rel_ARRAY_1fff0200": "weekdayLookupTable"
            },
            "calling": [
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000328c": {
            "entrypoint": "0x0000328c",
            "current_name": "parse_and_calculate_weekday_0000328c",
            "code": "\nundefined4 parseAndCalculateWeekday_0000328c(undefined4 *inputArray,int *outputArray)\n\n{\n  int weekday;\n  int currentOffset;\n  short parsedValue;\n  \n  parsedValue = parse_unsigned_integer_00004f84(*inputArray,&currentOffset,10);\n  outputArray[5] = parsedValue + -0x76c;\n  parsedValue = parse_unsigned_integer_00004f84(currentOffset + 1,&currentOffset,10);\n  outputArray[4] = parsedValue + -1;\n  parsedValue = parse_unsigned_integer_00004f84(currentOffset + 1,&currentOffset,10);\n  outputArray[3] = (int)parsedValue;\n  parsedValue = parse_unsigned_integer_00004f84(inputArray[1],&currentOffset,10);\n  outputArray[2] = (int)parsedValue;\n  parsedValue = parse_unsigned_integer_00004f84(currentOffset + 1,&currentOffset,10);\n  outputArray[1] = (int)parsedValue;\n  parsedValue = parse_unsigned_integer_00004f84(currentOffset + 1,&currentOffset,10);\n  *outputArray = (int)parsedValue;\n  weekday = calculate_weekday_000031fc(outputArray[5] + 0x76c,outputArray[4] + 1,outputArray[3]);\n  outputArray[6] = weekday;\n  outputArray[8] = -1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000328c": "parse_and_calculate_weekday_0000328c",
                "param_1": "inputArray",
                "param_2": "outputArray",
                "iVar1": "weekday",
                "local_10": "currentOffset",
                "local_a": "parsedValue"
            },
            "calling": [
                "FUN_000033f4",
                "FUN_00003478"
            ],
            "called": [
                "FUN_000031fc",
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003378": {
            "entrypoint": "0x00003378",
            "current_name": "print_date_time_00003378",
            "code": "\nundefined4 printDateTime_00003378(undefined4 *dateTimeArray)\n\n{\n  process_data_from_binary_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",year + 0x76c,month + 1,day,\n               hour,minute,*dateTimeArray);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00003378": "print_date_time_00003378",
                "param_1": "dateTimeArray",
                "param_1[5]": "year",
                "param_1[4]": "month",
                "param_1[3]": "day",
                "param_1[2]": "hour",
                "param_1[1]": "minute"
            },
            "calling": [
                "FUN_00003444",
                "FUN_000033c0"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00003378(undefined4 *param_1)\n\n{\n  FUNC_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",param_1[5] + 0x76c,param_1[4] + 1,param_1[3],\n               param_1[2],param_1[1],*param_1);\n  return 0;\n}\n\n"
        },
        "FUN_000033c0": {
            "entrypoint": "0x000033c0",
            "current_name": "get_date_time_or_print_error_message_000033c0",
            "code": "\nbool getDateTimeOrPrintErrorMessage_000033c0(void)\n\n{\n  int error;\n  undefined dateAndTime [36];\n  \n  error = processData(dateAndTime);\n  if (error != 0) {\n    logErrorMessage(\"rtc: error getting alarm\");\n  }\n  else {\n    printDateTime(dateAndTime);\n  }\n  return error != 0;\n}\n\n",
            "renaming": {
                "FUN_000033c0": "get_date_time_or_print_error_message_000033c0",
                "auStack_2c": "dateAndTime",
                "iVar1": "error",
                "process_data_00002690": "processData",
                "process_binary_data_00004db8": "logErrorMessage",
                "print_date_time_00003378": "printDateTime"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002690",
                "FUN_00003378"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033f4": {
            "entrypoint": "0x000033f4",
            "current_name": "handle_alarm_setting_000033f4",
            "code": "\nundefined4 handleAlarmSetting_000033f4(undefined4 inputData)\n\n{\n  int parseResult;\n  undefined4 returnValue;\n  undefined stackData [36];\n  \n  parseResult = parse_and_calculate_weekday_0000328c(inputData,stackData);\n  if (parseResult == 0) {\n    parseResult = initialize_adjusted_date_00002654(stackData,0x31e1,0);\n    if (parseResult == -1) {\n      process_binary_data_00004db8(\"rtc: error setting alarm\");\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000033f4": "handle_alarm_setting_000033f4",
                "param_1": "inputData",
                "iVar1": "parseResult",
                "uVar2": "returnValue",
                "auStack_2c": "stackData"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002654",
                "FUN_0000328c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_000033f4(undefined4 param_1)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined auStack_2c [36];\n  \n  iVar1 = parse_and_calculate_weekday_0000328c(param_1,auStack_2c);\n  if (iVar1 == 0) {\n    iVar1 = initialize_adjusted_date_00002654(auStack_2c,0x31e1,0);\n    if (iVar1 == -1) {\n      FUNC_00004db8(\"rtc: error setting alarm\");\n      uVar2 = 1;\n    }\n    else {\n      uVar2 = 0;\n    }\n  }\n  else {\n    uVar2 = 1;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_00003444": {
            "entrypoint": "0x00003444",
            "current_name": "get_time_or_print_date_time_00003444",
            "code": "\nbool getTimeOrPrintDateTime_00003444(void)\n\n{\n  int result;\n  undefined dataBuffer [36];\n  \n  result = process_data_00002624(dataBuffer);\n  if (result != 0) {\n    process_binary_data_00004db8(\"rtc: error getting time\");\n  }\n  else {\n    print_date_time_00003378(dataBuffer);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_00003444": "get_time_or_print_date_time_00003444",
                "iVar1": "result",
                "auStack_2c": "dataBuffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002624",
                "FUN_00003378"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003478": {
            "entrypoint": "0x00003478",
            "current_name": "process_weekday_00003478",
            "code": "\nundefined4 processWeekday_00003478(undefined4 input)\n\n{\n  int result;\n  undefined4 success;\n  undefined dateBuffer [36];\n  \n  result = parse_and_calculate_weekday_0000328c(input,dateBuffer);\n  if (result == 0) {\n    result = process_date_00002600(dateBuffer);\n    if (result == -1) {\n      process_binary_data_00004db8(\"rtc: error setting time\");\n      success = 1;\n    }\n    else {\n      success = 0;\n    }\n  }\n  else {\n    success = 1;\n  }\n  return success;\n}\n\n",
            "renaming": {
                "FUN_00003478": "process_weekday_00003478",
                "param_1": "input",
                "iVar1": "result",
                "uVar2": "success",
                "auStack_2c": "dateBuffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002600",
                "FUN_0000328c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00003478(undefined4 param_1)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined auStack_2c [36];\n  \n  iVar1 = parse_and_calculate_weekday_0000328c(param_1,auStack_2c);\n  if (iVar1 == 0) {\n    iVar1 = process_date_00002600(auStack_2c);\n    if (iVar1 == -1) {\n      FUNC_00004db8(\"rtc: error setting time\");\n      uVar2 = 1;\n    }\n    else {\n      uVar2 = 0;\n    }\n  }\n  else {\n    uVar2 = 1;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_000034c0": {
            "entrypoint": "0x000034c0",
            "current_name": "print_rtc_usage_000034c0",
            "code": "\nundefined4 printRtcUsage_000034c0(void)\n\n{\n  process_binary_data_00004db8(\"usage: rtc <command> [arguments]\");\n  process_binary_data_00004db8(\"commands:\");\n  process_binary_data_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  process_binary_data_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  process_binary_data_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  process_binary_data_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  process_binary_data_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  process_binary_data_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  process_binary_data_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000034c0": "print_rtc_usage_000034c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_000034c0(void)\n\n{\n  FUNC_00004db8(\"usage: rtc <command> [arguments]\");\n  FUNC_00004db8(\"commands:\");\n  FUNC_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  FUNC_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  FUNC_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  FUNC_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  FUNC_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  FUNC_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  FUNC_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n"
        },
        "FUN_00003524": {
            "entrypoint": "0x00003524",
            "current_name": "process_rtc_command_00003524",
            "code": "\nundefined4 process_rtc_command_00003524(int num_arguments,int cmd_arguments)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  if (num_arguments < 2) {\n    print_rtc_usage_000034c0();\n    return_value = 1;\n  }\n  else {\n    result = calculate_difference_00004e66(*(undefined4 *)(cmd_arguments + 4),\"poweron\",7);\n    if (result == 0) {\n      initialize_flag_000026d8();\n    }\n    else {\n      result = calculate_difference_00004e66(*(undefined4 *)(cmd_arguments + 4),\"poweroff\",8);\n      if (result == 0) {\n        clear_interrupt_flag_000026e4();\n      }\n      else {\n        result = calculate_difference_00004e66(*(undefined4 *)(cmd_arguments + 4),\"clearalarm\",8);\n        if (result == 0) {\n          clear_system_flags_000026c0();\n        }\n        else {\n          result = calculate_difference_00004e66(*(undefined4 *)(cmd_arguments + 4),\"getalarm\",8);\n          if (result == 0) {\n            get_date_time_or_print_error_message_000033c0();\n          }\n          else {\n            result = calculate_difference_00004e66(*(undefined4 *)(cmd_arguments + 4),\"setalarm\",8);\n            if ((result == 0) && (num_arguments == 4)) {\n              handle_alarm_setting_000033f4(cmd_arguments + 8);\n            }\n            else {\n              result = calculate_difference_00004e66(*(undefined4 *)(cmd_arguments + 4),\"gettime\",7);\n              if (result == 0) {\n                get_time_or_print_date_time_00003444();\n              }\n              else {\n                result = calculate_difference_00004e66(*(undefined4 *)(cmd_arguments + 4),\"settime\",7);\n                if ((result != 0) || (num_arguments != 4)) {\n                  process_data_from_binary_00004c84(\"unknown command or missing parameters: %s\\n\\n\",\n                               *(undefined4 *)(cmd_arguments + 4));\n                  print_rtc_usage_000034c0();\n                  return 1;\n                }\n                process_weekday_00003478(cmd_arguments + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00003524": "process_rtc_command_00003524",
                "param_1": "num_arguments",
                "param_2": "cmd_arguments",
                "iVar1": "result",
                "uVar2": "return_value"
            },
            "calling": [],
            "called": [
                "FUN_000034c0",
                "FUN_000033f4",
                "FUN_00003478",
                "FUN_00003444",
                "FUN_00004e66",
                "FUN_00004c84",
                "FUN_000026d8",
                "FUN_000026e4",
                "FUN_000033c0",
                "FUN_000026c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003658": {
            "entrypoint": "0x00003658",
            "current_name": "continuous_loop_00003658",
            "code": "\nvoid continuousLoop_00003658(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00003658": "continuous_loop_00003658",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "FUN_00003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003688": {
            "entrypoint": "0x00003688",
            "current_name": "execute_continuous_loop_00003688",
            "code": "\nvoid execute_continuous_loop_00003688(void)\n\n{\n  continuous_loop();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003688": "execute_continuous_loop_00003688",
                "continuous_loop_00003658": "continuous_loop"
            },
            "calling": [
                "FUN_00002e9c"
            ],
            "called": [
                "FUN_00003658"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003694": {
            "entrypoint": "0x00003694",
            "current_name": "display_data_00003694",
            "code": "\nvoid displayData_00003694(int dataAddress,byte dataSize)\n\n{\n  undefined4 memoryAddress;\n  char bitFlag;\n  uint bitMask;\n  bool isSet;\n  undefined decimalString [8];\n  int stringLength;\n  char character;\n  byte index;\n  \n  if ((dataAddress == 0) || (3 < dataSize)) {\n    process_binary_data_00004db8(\"Unable to display data object\");\n  }\n  else {\n    process_data_from_binary_00004c84(\"Data:\");\n    for (index = 0; index < dataSize; index = index + 1) {\n      if (*(byte *)(dataAddress + 6) < 0x14) {\n        bitMask = 1 << (uint)*(byte *)(dataAddress + 6) & 0x8018f;\n        isSet = bitMask != 0;\n        if (isSet) {\n          bitMask = 1;\n        }\n        bitFlag = (char)bitMask;\n        if (!isSet) {\n          bitFlag = '\\0';\n        }\n        if (bitFlag == '\\0') goto LAB_000036ee;\n        character = '\\0';\n      }\n      else {\nLAB_000036ee:\n        character = get_char_from_param_00003918((int)*(char *)(dataAddress + 7));\n      }\n      process_data_from_binary_00004c84(&DAT_000077bc);\n      if (dataSize < 2) {\n        process_data_from_binary_00004c84(\"     \");\n      }\n      else {\n        process_data_from_binary_00004c84(\"[%u] \",index);\n      }\n      if (character == '\\0') {\n        if (*(char *)(dataAddress + 7) == '\\0') {\n          process_data_from_binary_00004c84(&DAT_000077d8,(int)*(short *)(dataAddress + (uint)index * 2));\n        }\n        else if ((*(char *)(dataAddress + 7) + 4 < 0 == SCARRY4((int)*(char *)(dataAddress + 7),4)) &&\n                (*(char *)(dataAddress + 7) < '\\0')) {\n          stringLength = convert_number_to_decimal_string_00003e9e(decimalString,(int)*(short *)(dataAddress + (uint)index * 2),\n                                  (int)*(char *)(dataAddress + 7));\n          decimalString[stringLength] = 0;\n          process_data_from_binary_00004c84(&DAT_000077dc,decimalString);\n        }\n        else {\n          process_data_from_binary_00004c84(\"%iE%i\",(int)*(short *)(dataAddress + (uint)index * 2),\n                       (int)*(char *)(dataAddress + 7));\n        }\n      }\n      else {\n        process_data_from_binary_00004c84(\"%6d %c\",(int)*(short *)(dataAddress + (uint)index * 2),character);\n      }\n      memoryAddress = get_memory_address_00003810(*(undefined *)(dataAddress + 6));\n      process_data_from_binary_00004c84(&DAT_000077e8,memoryAddress);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003694": "display_data_00003694",
                "param_1": "dataAddress",
                "param_2": "dataSize",
                "uVar1": "memoryAddress",
                "cVar2": "bitFlag",
                "uVar3": "bitMask",
                "bVar4": "isSet",
                "auStack_18": "decimalString",
                "local_10": "stringLength",
                "local_a": "character",
                "local_9": "index"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00003e9e",
                "FUN_00003918",
                "FUN_00003810",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003810": {
            "entrypoint": "0x00003810",
            "current_name": "get_memory_address_00003810",
            "code": "\nundefined * getMemoryAddress_00003810(undefined inputValue)\n\n{\n  undefined *result;\n  \n  switch(inputValue) {\n  case 2:\n    result = &DAT_000077ec;\n    break;\n  case 3:\n    result = &DAT_000077f0;\n    break;\n  case 4:\n    result = &DAT_000077f4;\n    break;\n  case 5:\n    result = &DAT_000077f8;\n    break;\n  case 6:\n    result = &DAT_000077fc;\n    break;\n  case 7:\n    result = (undefined *)0x7800;\n    break;\n  case 8:\n    result = &DAT_00007804;\n    break;\n  case 9:\n    result = &DAT_00007808;\n    break;\n  case 10:\n    result = &DAT_0000780c;\n    break;\n  case 0xb:\n    result = &DAT_00007810;\n    break;\n  case 0xc:\n    result = &DAT_00007814;\n    break;\n  case 0xd:\n    result = &DAT_00007818;\n    break;\n  case 0xe:\n    result = &DAT_0000781c;\n    break;\n  case 0xf:\n    result = &DAT_00007820;\n    break;\n  case 0x10:\n    result = &DAT_00007824;\n    break;\n  case 0x11:\n    result = &DAT_0000782c;\n    break;\n  default:\n    result = &DAT_00007834;\n    break;\n  case 0x13:\n    result = &DAT_00007830;\n    break;\n  case 0x15:\n    result = &DAT_00007828;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003810": "get_memory_address_00003810",
                "param_1": "inputValue",
                "puVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003918": {
            "entrypoint": "0x00003918",
            "current_name": "get_char_from_param_00003918",
            "code": "\nundefined4 getCharFromParam_00003918(undefined input)\n\n{\n  undefined4 character;\n  \n  switch(input) {\n  case 2:\n    character = 0x68;\n    break;\n  case 3:\n    character = 0x6b;\n    break;\n  case 6:\n    character = 0x4d;\n    break;\n  case 9:\n    character = 0x47;\n    break;\n  case 0xc:\n    character = 0x54;\n    break;\n  case 0xf:\n    character = 0x50;\n    break;\n  case 0xf1:\n    character = 0x66;\n    break;\n  default:\n    character = 0;\n    break;\n  case 0xf4:\n    character = 0x70;\n    break;\n  case 0xf7:\n    character = 0x6e;\n    break;\n  case 0xfa:\n    character = 0x75;\n    break;\n  case 0xfd:\n    character = 0x6d;\n  }\n  return character;\n}\n\n",
            "renaming": {
                "FUN_00003918": "get_char_from_param_00003918",
                "param_1": "input",
                "uVar1": "character"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000039e8": {
            "entrypoint": "0x000039e8",
            "current_name": "get_class_name_000039e8",
            "code": "\nchar * getClassName_000039e8(char classId)\n\n{\n  char *className;\n  \n  switch(classId) {\n  case '\\0':\n    className = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    className = \"ACT_ANY\";\n    break;\n  case 'B':\n    className = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    className = \"ACT_SERVO\";\n    break;\n  case 'D':\n    className = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    className = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    className = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    className = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    className = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    className = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    className = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    className = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    className = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    className = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    className = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    className = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    className = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    className = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    className = \"SENSE_UV\";\n    break;\n  case -0x74:\n    className = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    className = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    className = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    className = \"SENSE_CO2\";\n    break;\n  default:\n    if (classId == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    className = \"CLASS_UNKNOWN\";\n  }\n  return className;\n}\n\n",
            "renaming": {
                "FUN_000039e8": "get_class_name_000039e8",
                "param_1": "classId",
                "pcVar1": "className"
            },
            "calling": [
                "FUN_00002f74",
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d24": {
            "entrypoint": "0x00003d24",
            "current_name": "find_nth_element_00003d24",
            "code": "\nundefined4 * find_nth_element_00003d24(int n)\n\n{\n  int count;\n  undefined4 *current_element;\n  \n  count = 0;\n  for (current_element = DAT_1fff0db0; (count < n && (current_element != (undefined4 *)0x0));\n      current_element = (undefined4 *)*current_element) {\n    count = count + 1;\n  }\n  return current_element;\n}\n\n",
            "renaming": {
                "FUN_00003d24": "find_nth_element_00003d24",
                "param_1": "n",
                "local_10": "count",
                "local_c": "current_element"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d64": {
            "entrypoint": "0x00003d64",
            "current_name": "execute_function_00003d64",
            "code": "\nundefined4 executeFunction_00003d64(int functionPointer,undefined4 inputParam)\n\n{\n  undefined4 returnValue;\n  \n  if (functionPointer == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (***(code ***)(functionPointer + 0xc))(*(undefined4 *)(functionPointer + 4),inputParam);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d64": "execute_function_00003d64",
                "param_1": "functionPointer",
                "param_2": "inputParam",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d94": {
            "entrypoint": "0x00003d94",
            "current_name": "execute_function_00003d94",
            "code": "\nundefined4 executeFunction_00003d94(int input,undefined4 param)\n\n{\n  undefined4 result;\n  \n  if (input == 0) {\n    result = 0xffffffed;\n  }\n  else {\n    result = (**(code **)(*(int *)(input + 0xc) + 4))(*(undefined4 *)(input + 4),param);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003d94": "execute_function_00003d94",
                "param_1": "input",
                "param_2": "param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "entrypoint": "0x00003dc4",
            "current_name": "count_digits_00003dc4",
            "code": "\nint countDigits_00003dc4(int offset,uint number)\n\n{\n  uint remainder;\n  char *charPtr;\n  uint multiplier;\n  int digitCount;\n  \n  digitCount = 1;\n  if (number < 1000000000) {\n    for (multiplier = 10; multiplier <= number; multiplier = multiplier * 10) {\n      digitCount = digitCount + 1;\n    }\n  }\n  else {\n    digitCount = 10;\n  }\n  if (offset != 0) {\n    charPtr = (char *)(digitCount + offset);\n    remainder = number;\n    do {\n      charPtr = charPtr + -1;\n      *charPtr = (char)(remainder % 10) + '0';\n      remainder = remainder / 10;\n    } while (remainder != 0);\n  }\n  return digitCount;\n}\n\n",
            "renaming": {
                "FUN_00003dc4": "count_digits_00003dc4",
                "param_1": "offset",
                "param_2": "number",
                "local_20": "remainder",
                "local_14": "charPtr",
                "local_10": "multiplier",
                "local_c": "digitCount"
            },
            "calling": [
                "FUN_00003e58"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e58": {
            "entrypoint": "0x00003e58",
            "current_name": "calculate_digit_count_00003e58",
            "code": "\nint calculateDigitCount_00003e58(undefined *inputArray,int inputNumber)\n\n{\n  int digitCount;\n  int absoluteValue;\n  undefined *modifiedArray;\n  \n  absoluteValue = inputNumber;\n  modifiedArray = inputArray;\n  if (-(inputNumber >> 0x1f) != 0) {\n    if (inputArray != (undefined *)0x0) {\n      modifiedArray = inputArray + 1;\n      *inputArray = 0x2d;\n    }\n    absoluteValue = -inputNumber;\n  }\n  digitCount = count_digits_00003dc4(modifiedArray,absoluteValue);\n  return -(inputNumber >> 0x1f) + digitCount;\n}\n\n",
            "renaming": {
                "FUN_00003e58": "calculate_digit_count_00003e58",
                "param_1": "inputArray",
                "param_2": "inputNumber",
                "iVar1": "digitCount",
                "local_18": "absoluteValue",
                "local_14": "modifiedArray"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_00003dc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "entrypoint": "0x00003e9e",
            "current_name": "convert_number_to_decimal_string_00003e9e",
            "code": "\nundefined4 convertNumberToDecimalString_00003e9e(undefined4 inputNumber,short inputShort,undefined4 additionalParameter)\n\n{\n  undefined4 result;\n  \n  result = convert_number_to_decimal_string_00003ec4(inputNumber,(int)inputShort,additionalParameter);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003e9e": "convert_number_to_decimal_string_00003e9e",
                "param_1": "inputNumber",
                "param_2": "inputShort",
                "param_3": "additionalParameter",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [
                "FUN_00003ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "entrypoint": "0x00003ec4",
            "current_name": "convert_number_to_decimal_string_00003ec4",
            "code": "\nint convertNumberToDecimalString_00003ec4(undefined *outputBuffer,uint inputNumber,int decimalPlaces)\n\n{\n  int digitCount;\n  undefined4 digitCount;\n  uint quotient;\n  int remainder;\n  int totalDigits;\n  \n  if (decimalPlaces + 7 < 0 != SCARRY4(decimalPlaces,7)) {\n    initialize_riot_system_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  totalDigits = 0;\n  if (decimalPlaces == 0) {\n    totalDigits = calculate_digit_count_00003e58(outputBuffer,inputNumber);\n  }\n  else if (decimalPlaces < 1) {\n    quotient = inputNumber / *(uint *)(&DAT_00007978 + decimalPlaces * -4);\n    remainder = inputNumber - *(uint *)(&DAT_00007978 + decimalPlaces * -4) * quotient;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((quotient == 0) && ((int)inputNumber < 0)) {\n      if (outputBuffer != (undefined *)0x0) {\n        *outputBuffer = 0x2d;\n      }\n      totalDigits = 1;\n    }\n    if (outputBuffer == (undefined *)0x0) {\n      digitCount = calculate_digit_count_00003e58(0,quotient);\n      totalDigits = digitCount + 1 + totalDigits;\n    }\n    else {\n      digitCount = calculate_digit_count_00003e58(outputBuffer + totalDigits,quotient);\n      digitCount = totalDigits + digitCount;\n      totalDigits = digitCount + 1;\n      outputBuffer[digitCount] = 0x2e;\n      digitCount = calculate_digit_count_00003e58(outputBuffer + totalDigits,remainder);\n      copy_and_fill_memory_00003ff4(outputBuffer + totalDigits,digitCount,-decimalPlaces,0x30);\n    }\n    totalDigits = -decimalPlaces + totalDigits;\n  }\n  else {\n    totalDigits = calculate_digit_count_00003e58(outputBuffer,inputNumber);\n    if (outputBuffer != (undefined *)0x0) {\n      fill_memory_00004622(outputBuffer + totalDigits,0x30,decimalPlaces);\n    }\n    totalDigits = decimalPlaces + totalDigits;\n  }\n  return totalDigits;\n}\n\n",
            "renaming": {
                "FUN_00003ec4": "convert_number_to_decimal_string_00003ec4",
                "param_1": "outputBuffer",
                "param_2": "inputNumber",
                "param_3": "decimalPlaces",
                "iVar1": "digitCount",
                "uVar2": "digitCount",
                "uVar3": "quotient",
                "local_10": "remainder",
                "local_c": "totalDigits"
            },
            "calling": [
                "FUN_00003e9e"
            ],
            "called": [
                "FUN_00003e58",
                "FUN_00004622",
                "FUN_00000f04",
                "FUN_00003ff4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "entrypoint": "0x00003ff4",
            "current_name": "copy_and_fill_memory_00003ff4",
            "code": "\nuint copyAndFillMemory_00003ff4(int destination,uint sourceStart,uint sourceEnd,undefined fillValue)\n\n{\n  uint newEnd;\n  \n  newEnd = sourceStart;\n  if ((sourceStart < sourceEnd) && (newEnd = sourceEnd, destination != 0)) {\n    copy_memory_000045ee((sourceEnd - sourceStart) + destination,destination,sourceStart);\n    fill_memory_00004622(destination,fillValue,sourceEnd - sourceStart);\n  }\n  return newEnd;\n}\n\n",
            "renaming": {
                "FUN_00003ff4": "copy_and_fill_memory_00003ff4",
                "param_1": "destination",
                "param_2": "sourceStart",
                "param_3": "sourceEnd",
                "param_4": "fillValue",
                "uVar1": "newEnd"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_000045ee",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004042": {
            "entrypoint": "0x00004042",
            "current_name": "parse_and_print_unsigned_integers_00004042",
            "code": "\nvoid parseAndPrintUnsignedIntegers_00004042(undefined4 input)\n\n{\n  parseUnsignedInteger(input,0,10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004042": "parse_and_print_unsigned_integers_00004042",
                "param_1": "input",
                "parse_unsigned_integer_00004f84": "parseUnsignedInteger"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000404c": {
            "entrypoint": "0x0000404c",
            "current_name": "process_data_0000404c",
            "code": "\nundefined4 processData_0000404c(uint *inputArray,int *outputArray)\n\n{\n  int tempVar1;\n  int *tempVar2;\n  uint ushortValue;\n  ushort flagValue;\n  int tempVar3;\n  code *functionPointer;\n  int tempVar4;\n  uint tempVar5;\n  bool isZero;\n  \n  flagValue = *(ushort *)(outputArray + 3);\n  ushortValue = (uint)flagValue;\n  if ((int)(ushortValue << 0x1c) < 0) {\n    tempVar1 = outputArray[4];\n    if (tempVar1 != 0) {\n      tempVar3 = ushortValue << 0x1e;\n      isZero = tempVar3 == 0;\n      tempVar4 = *outputArray;\n      if (isZero) {\n        tempVar3 = outputArray[5];\n      }\n      *outputArray = tempVar1;\n      if (!isZero) {\n        tempVar3 = 0;\n      }\n      outputArray[2] = tempVar3;\n      for (tempVar4 = tempVar4 - tempVar1; 0 < tempVar4; tempVar4 = tempVar4 - tempVar3) {\n        tempVar3 = (*(code *)outputArray[10])(inputArray,outputArray[8],tempVar1,tempVar4);\n        if (tempVar3 < 1) {\n          *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) | 0x40;\n          return 0xffffffff;\n        }\n        tempVar1 = tempVar1 + tempVar3;\n      }\n    }\n  }\n  else {\n    if ((outputArray[1] < 1) && (outputArray[0x10] < 1)) {\n      return 0;\n    }\n    functionPointer = (code *)outputArray[0xb];\n    if (functionPointer == (code *)0x0) {\n      return 0;\n    }\n    tempVar5 = *inputArray;\n    *inputArray = 0;\n    if ((flagValue & 0x1000) == 0) {\n      tempVar1 = (*functionPointer)(inputArray,outputArray[8],ushortValue & 0x1000,1);\n      if ((tempVar1 == -1) && (ushortValue = *inputArray, ushortValue != 0)) {\n        if ((ushortValue == 0x1d) || (ushortValue == 0x16)) {\n          *inputArray = tempVar5;\n          return 0;\n        }\n        flagValue = *(ushort *)(outputArray + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      tempVar1 = outputArray[0x15];\n    }\n    if (((int)((uint)*(ushort *)(outputArray + 3) << 0x1d) < 0) &&\n       (tempVar1 = tempVar1 - outputArray[1], outputArray[0xd] != 0)) {\n      tempVar1 = tempVar1 - outputArray[0x10];\n    }\n    tempVar1 = (*(code *)outputArray[0xb])(inputArray,outputArray[8],tempVar1,0);\n    flagValue = *(ushort *)(outputArray + 3);\n    if ((tempVar1 == -1) &&\n       ((0x1d < *inputArray || (-1 < (int)((0x20400001U >> (*inputArray & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(outputArray + 3) = flagValue | 0x40;\n      return 0xffffffff;\n    }\n    outputArray[1] = 0;\n    *outputArray = outputArray[4];\n    if (((int)((uint)flagValue << 0x13) < 0) && ((tempVar1 != -1 || (*inputArray == 0)))) {\n      outputArray[0x15] = tempVar1;\n    }\n    tempVar2 = (int *)outputArray[0xd];\n    *inputArray = tempVar5;\n    if (tempVar2 != (int *)0x0) {\n      if (tempVar2 != outputArray + 0x11) {\n        initialize_linked_list_00004b34(inputArray);\n      }\n      outputArray[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000404c": "process_data_0000404c",
                "param_1": "inputArray",
                "param_2": "outputArray",
                "iVar1": "tempVar1",
                "piVar2": "tempVar2",
                "uVar3": "ushortValue",
                "uVar4": "flagValue",
                "iVar5": "tempVar3",
                "pcVar6": "functionPointer",
                "iVar7": "tempVar4",
                "uVar8": "tempVar5",
                "bVar9": "isZero"
            },
            "calling": [
                "FUN_00004158",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004158": {
            "entrypoint": "0x00004158",
            "current_name": "process_and_validate_data_00004158",
            "code": "\nundefined4 processAndValidateData_00004158(int dataPointer,undefined4 *infoArray)\n\n{\n  undefined4 returnValue;\n  \n  if (infoArray[4] != 0) {\n    if ((dataPointer != 0) && (*(int *)(dataPointer + 0x18) == 0)) {\n      initialize_and_process_data_000042a4();\n    }\n    if (infoArray == &DAT_000079b8) {\n      infoArray = *(undefined4 **)(dataPointer + 4);\n    }\n    else if (infoArray == (undefined4 *)&DAT_000079d8) {\n      infoArray = *(undefined4 **)(dataPointer + 8);\n    }\n    else if (infoArray == (undefined4 *)&DAT_00007998) {\n      infoArray = *(undefined4 **)(dataPointer + 0xc);\n    }\n    if (*(short *)(infoArray + 3) != 0) {\n      if ((-1 < (int)(infoArray[0x19] << 0x1f)) && (-1 < (int)*(short *)(infoArray + 3) << 0x16)) {\n        FUNC_000045e8(infoArray[0x16]);\n      }\n      returnValue = process_data_0000404c(dataPointer,infoArray);\n      if ((int)(infoArray[0x19] << 0x1f) < 0) {\n        return returnValue;\n      }\n      if ((int)((uint)*(ushort *)(infoArray + 3) << 0x16) < 0) {\n        return returnValue;\n      }\n      FUNC_000045ec(infoArray[0x16]);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004158": "process_and_validate_data_00004158",
                "param_1": "dataPointer",
                "param_2": "infoArray",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_000041d0",
                "FUN_00005404",
                "FUN_00006768"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_0000404c",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00004158(int param_1,undefined4 *param_2)\n\n{\n  undefined4 uVar1;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n      FUNC_000042a4();\n    }\n    if (param_2 == &DAT_000079b8) {\n      param_2 = *(undefined4 **)(param_1 + 4);\n    }\n    else if (param_2 == (undefined4 *)&DAT_000079d8) {\n      param_2 = *(undefined4 **)(param_1 + 8);\n    }\n    else if (param_2 == (undefined4 *)&DAT_00007998) {\n      param_2 = *(undefined4 **)(param_1 + 0xc);\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      if ((-1 < (int)(param_2[0x19] << 0x1f)) && (-1 < (int)*(short *)(param_2 + 3) << 0x16)) {\n        FUNC_000045e8(param_2[0x16]);\n      }\n      uVar1 = process_data_0000404c(param_1,param_2);\n      if ((int)(param_2[0x19] << 0x1f) < 0) {\n        return uVar1;\n      }\n      if ((int)((uint)*(ushort *)(param_2 + 3) << 0x16) < 0) {\n        return uVar1;\n      }\n      FUNC_000045ec(param_2[0x16]);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_000041d0": {
            "entrypoint": "0x000041d0",
            "current_name": "process_data_and_validate_000041d0",
            "code": "\nuint process_data_and_validate_000041d0(int input_param,undefined4 unused_param,undefined4 context_param)\n\n{\n  uint result;\n  int data_length;\n  dword *rel_ptr;\n  int rel_offset;\n  uint combined_result;\n  int remaining_count;\n  undefined4 *validation_data_ptr;\n  \n  if (input_param == 0) {\n    validation_data_ptr = &DAT_000079f8;\n    rel_ptr = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    combined_result = 0;\n    do {\n      remaining_count = rel_ptr[1];\n      rel_offset = rel_ptr[2];\n      while (remaining_count = remaining_count + -1, -1 < remaining_count) {\n        if ((1 < *(ushort *)(rel_offset + 0xc)) && (data_length = *(short *)(rel_offset + 0xe) + 1, data_length != 0)) {\n          result = process_and_validate_data_00004158(0x1fff0284,rel_offset,context_param,data_length,validation_data_ptr);\n          combined_result = combined_result | result;\n        }\n        rel_offset = rel_offset + 0x68;\n      }\n      rel_ptr = (dword *)*rel_ptr;\n    } while (rel_ptr != (dword *)0x0);\n    return combined_result;\n  }\n  combined_result = process_and_validate_data_00004158(Elf32_Rel_ARRAY_1fff0200[16].r_offset,input_param);\n  return combined_result;\n}\n\n",
            "renaming": {
                "FUN_000041d0": "process_data_and_validate_000041d0",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "context_param",
                "uVar1": "result",
                "iVar2": "data_length",
                "pdVar3": "rel_ptr",
                "iVar4": "rel_offset",
                "uVar5": "combined_result",
                "iVar6": "remaining_count",
                "puVar7": "validation_data_ptr"
            },
            "calling": [
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041f4": {
            "entrypoint": "0x000041f4",
            "current_name": "initialize_params_000041f4",
            "code": "\nvoid initializeParams_000041f4(undefined4 *paramsArray,undefined2 value1,undefined2 value2)\n\n{\n  *paramsArray = 0;\n  paramsArray[1] = 0;\n  paramsArray[4] = 0;\n  paramsArray[5] = 0;\n  paramsArray[2] = 0;\n  *(undefined2 *)(paramsArray + 3) = value1;\n  paramsArray[25] = 0;\n  *(undefined2 *)((int)paramsArray + 0xe) = value2;\n  paramsArray[6] = 0;\n  fill_memory_00004622(paramsArray + 0x17,0,8);\n  paramsArray[9] = 0x4dc9;\n  paramsArray[10] = 0x4def;\n  paramsArray[11] = 0x4e27;\n  paramsArray[8] = paramsArray;\n  paramsArray[12] = &labFunction;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000041f4": "initialize_params_000041f4",
                "param_1": "paramsArray",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[1]": "paramsArray[1]",
                "param_1[4]": "paramsArray[4]",
                "param_1[5]": "paramsArray[5]",
                "param_1[2]": "paramsArray[2]",
                "param_1[0x19]": "paramsArray[25]",
                "param_1[6]": "paramsArray[6]",
                "param_1[9]": "paramsArray[9]",
                "param_1[10]": "paramsArray[10]",
                "param_1[0xb]": "paramsArray[11]",
                "param_1[8]": "paramsArray[8]",
                "param_1[0xc]": "paramsArray[12]",
                "&LAB_00004e4a_1": "&labFunction"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004248": {
            "entrypoint": "0x00004248",
            "current_name": "allocate_and_initialize_memory_00004248",
            "code": "\nundefined4 * allocate_and_initialize_memory_00004248(undefined4 initial_memory,int num_elements)\n\n{\n  undefined4 *allocated_memory;\n  int allocated_memory_size;\n  \n  allocated_memory_size = (num_elements + -1) * 0x68;\n  allocated_memory = (undefined4 *)allocate_memory_00004bd0(initial_memory,allocated_memory_size + 0x74);\n  if (allocated_memory != (undefined4 *)0x0) {\n    *allocated_memory = 0;\n    allocated_memory[1] = num_elements;\n    allocated_memory[2] = allocated_memory + 3;\n    fill_memory_00004622(allocated_memory + 3,0,allocated_memory_size + 0x68);\n  }\n  return allocated_memory;\n}\n\n",
            "renaming": {
                "FUN_00004248": "allocate_and_initialize_memory_00004248",
                "param_1": "initial_memory",
                "param_2": "num_elements",
                "puVar1": "allocated_memory",
                "iVar2": "allocated_memory_size"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004274": {
            "entrypoint": "0x00004274",
            "current_name": "initialize_data_00004274",
            "code": "\nvoid initializeData_00004274(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004274": "initialize_data_00004274"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004280": {
            "entrypoint": "0x00004280",
            "current_name": "initialize_data_00004280",
            "code": "\nvoid initializeData_00004280(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004280": "initialize_data_00004280"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000428c": {
            "entrypoint": "0x0000428c",
            "current_name": "initialize_data_processing_0000428c",
            "code": "\nvoid initializeDataProcessing_0000428c(void)\n\n{\n  FUNC_000045e8(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000428c": "initialize_data_processing_0000428c"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000042a4": {
            "entrypoint": "0x000042a4",
            "current_name": "initialize_and_process_data_000042a4",
            "code": "\nvoid initializeAndProcessData_000042a4(int dataAddress)\n\n{\n  undefined4 returnValue;\n  \n  initializeDataProcessing();\n  if (*(int *)(dataAddress + 0x18) == 0) {\n    *(undefined4 *)(dataAddress + 0x48) = 0;\n    *(undefined4 *)(dataAddress + 0x4c) = 0;\n    *(undefined4 *)(dataAddress + 0x50) = 0;\n    returnValue = 0x1fff0284;\n    *(undefined **)(dataAddress + 0x28) = &DAT_0000423d;\n    if (dataAddress == 0x1fff0284) {\n      returnValue = 1;\n    }\n    if (dataAddress == 0x1fff0284) {\n      *(undefined4 *)(dataAddress + 0x18) = returnValue;\n    }\n    returnValue = reverseAndInitializeData(dataAddress);\n    *(undefined4 *)(dataAddress + 4) = returnValue;\n    returnValue = reverseAndInitializeData(dataAddress);\n    *(undefined4 *)(dataAddress + 8) = returnValue;\n    returnValue = reverseAndInitializeData(dataAddress);\n    *(undefined4 *)(dataAddress + 0xc) = returnValue;\n    initializeParams(*(undefined4 *)(dataAddress + 4),4,0);\n    initializeParams(*(undefined4 *)(dataAddress + 8),9,1);\n    initializeParams(*(undefined4 *)(dataAddress + 0xc),0x12,2);\n    *(undefined4 *)(dataAddress + 0x18) = 1;\n  }\n  FUNC_000045ec(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000042a4": "initialize_and_process_data_000042a4",
                "param_1": "dataAddress",
                "uVar1": "returnValue",
                "initialize_data_processing_0000428c": "initializeDataProcessing",
                "reverse_and_initialize_data_00004314": "reverseAndInitializeData",
                "initialize_params_000041f4": "initializeParams"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_00004158",
                "FUN_00005404",
                "FUN_00005e10",
                "FUN_000054a8",
                "FUN_00006768",
                "FUN_00004c84",
                "FUN_00004cb4",
                "FUN_00004314",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000041f4",
                "FUN_000045ec",
                "FUN_0000428c",
                "FUN_00004314"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004314": {
            "entrypoint": "0x00004314",
            "current_name": "reverse_and_initialize_data_00004314",
            "code": "\nundefined4 * reverse_and_initialize_data_00004314(undefined4 *param_pointer)\n\n{\n  dword allocated_memory;\n  int loop_counter;\n  undefined4 *data_pointer;\n  dword *rel_info_pointer;\n  \n  initialize_data_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    initialize_and_process_data_000042a4(0x1fff0284);\n  }\n  rel_info_pointer = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    loop_counter = rel_info_pointer[1];\n    data_pointer = (undefined4 *)rel_info_pointer[2];\n    while (loop_counter = loop_counter + -1, -1 < loop_counter) {\n      if (*(short *)(data_pointer + 3) == 0) {\n        data_pointer[3] = 0xffff0001;\n        data_pointer[0x19] = 0;\n        FUNC_000045e4(data_pointer + 0x16);\n        initialize_data_00004280();\n        data_pointer[1] = 0;\n        data_pointer[2] = 0;\n        data_pointer[4] = 0;\n        data_pointer[5] = 0;\n        *data_pointer = 0;\n        data_pointer[6] = 0;\n        fill_memory_00004622(data_pointer + 0x17,0,8);\n        data_pointer[0xd] = 0;\n        data_pointer[0xe] = 0;\n        data_pointer[0x12] = 0;\n        data_pointer[0x13] = 0;\n        return data_pointer;\n      }\n      data_pointer = data_pointer + 0x1a;\n    }\n    if (*rel_info_pointer == 0) {\n      allocated_memory = allocate_and_initialize_memory_00004248(param_pointer,4);\n      *rel_info_pointer = allocated_memory;\n      if (allocated_memory == 0) {\n        initialize_data_00004280();\n        *param_pointer = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    rel_info_pointer = (dword *)*rel_info_pointer;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00004314": "reverse_and_initialize_data_00004314",
                "param_1": "param_pointer",
                "dVar1": "allocated_memory",
                "iVar2": "loop_counter",
                "puVar3": "data_pointer",
                "pdVar4": "rel_info_pointer"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004622",
                "FUN_000045e4",
                "FUN_00004280",
                "FUN_00004248",
                "FUN_00004274"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 * FUN_00004314(undefined4 *param_1)\n\n{\n  dword dVar1;\n  int iVar2;\n  undefined4 *puVar3;\n  dword *pdVar4;\n  \n  initialize_data_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    FUNC_000042a4(0x1fff0284);\n  }\n  pdVar4 = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    iVar2 = pdVar4[1];\n    puVar3 = (undefined4 *)pdVar4[2];\n    while (iVar2 = iVar2 + -1, -1 < iVar2) {\n      if (*(short *)(puVar3 + 3) == 0) {\n        puVar3[3] = 0xffff0001;\n        puVar3[0x19] = 0;\n        FUNC_000045e4(puVar3 + 0x16);\n        initialize_data_00004280();\n        puVar3[1] = 0;\n        puVar3[2] = 0;\n        puVar3[4] = 0;\n        puVar3[5] = 0;\n        *puVar3 = 0;\n        puVar3[6] = 0;\n        fill_memory_00004622(puVar3 + 0x17,0,8);\n        puVar3[0xd] = 0;\n        puVar3[0xe] = 0;\n        puVar3[0x12] = 0;\n        puVar3[0x13] = 0;\n        return puVar3;\n      }\n      puVar3 = puVar3 + 0x1a;\n    }\n    if (*pdVar4 == 0) {\n      dVar1 = allocate_and_initialize_memory_00004248(param_1,4);\n      *pdVar4 = dVar1;\n      if (dVar1 == 0) {\n        initialize_data_00004280();\n        *param_1 = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    pdVar4 = (dword *)*pdVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_000043a0": {
            "entrypoint": "0x000043a0",
            "current_name": "find_and_execute_function_000043a0",
            "code": "\nuint find_and_execute_function_000043a0(int source_address,code *callback_function)\n\n{\n  uint uVar1;\n  int *function_list;\n  int function_address;\n  uint result;\n  int loop_counter;\n  \n  function_list = (int *)(source_address + 0x48);\n  result = 0;\n  do {\n    loop_counter = function_list[1];\n    function_address = function_list[2];\n    while (loop_counter = loop_counter + -1, -1 < loop_counter) {\n      if ((1 < *(ushort *)(function_address + 0xc)) && (*(short *)(function_address + 0xe) != -1)) {\n        uVar1 = (*callback_function)(function_address);\n        result = result | uVar1;\n      }\n      function_address = function_address + 0x68;\n    }\n    function_list = (int *)*function_list;\n  } while (function_list != (int *)0x0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000043a0": "find_and_execute_function_000043a0",
                "param_1": "source_address",
                "param_2": "callback_function",
                "piVar2": "function_list",
                "iVar3": "function_address",
                "uVar4": "result",
                "iVar5": "loop_counter"
            },
            "calling": [
                "FUN_00006768"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004418": {
            "entrypoint": "0x00004418",
            "current_name": "process_data_00004418",
            "code": "\nuint process_data_00004418(void)\n\n{\n  dword rel_offset;\n  uint result;\n  byte **data_pointer;\n  byte *byte_pointer;\n  \n  rel_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_and_process_data_00004418_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  data_pointer = *(byte ***)(rel_offset + 4);\n  if ((rel_offset != 0) && (*(int *)(rel_offset + 0x18) == 0)) {\n    initialize_and_process_data_00004418_000042a4();\n  }\n  if (data_pointer == (byte **)&DAT_000079b8) {\n    data_pointer = *(byte ***)(rel_offset + 4);\n  }\n  else if (data_pointer == (byte **)&DAT_000079d8) {\n    data_pointer = *(byte ***)(rel_offset + 8);\n  }\n  else if (data_pointer == (byte **)&DAT_00007998) {\n    data_pointer = *(byte ***)(rel_offset + 0xc);\n  }\n  if ((-1 < (int)data_pointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(data_pointer + 3) << 0x16))) {\n    FUNC_000045e8(data_pointer[0x16]);\n  }\n  byte_pointer = data_pointer[1];\n  data_pointer[1] = byte_pointer + -1;\n  if ((int)(byte_pointer + -1) < 0) {\n    result = process_data_00004418_00005e10(rel_offset,data_pointer);\n  }\n  else {\n    byte_pointer = *data_pointer;\n    *data_pointer = byte_pointer + 1;\n    result = (uint)*byte_pointer;\n  }\n  if ((-1 < (int)data_pointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(data_pointer + 3) << 0x16))) {\n    FUNC_000045ec(data_pointer[0x16]);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004418": "process_data_00004418",
                "dVar1": "rel_offset",
                "uVar2": "result",
                "ppbVar3": "data_pointer",
                "pbVar4": "byte_pointer"
            },
            "calling": [
                "FUN_00002d94"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005e10",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000443c": {
            "entrypoint": "0x0000443c",
            "current_name": "calculate_date_time_0000443c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * calculateDateTime_0000443c(undefined4 *dateTimeParams,uint *dateTimeResult)\n\n{\n  int range;\n  uint totalDays;\n  uint days;\n  uint leapYears;\n  uint totalYears;\n  undefined4 daysRemainder;\n  undefined4 currentYearDays;\n  uint weekdayOffset;\n  bool isNegative;\n  \n  daysRemainder = *dateTimeParams;\n  currentYearDays = dateTimeParams[1];\n  range = calculate_range_00006974(daysRemainder,currentYearDays,0x15180,0);\n  days = 0x15180;\n  calculate_range_00006974(daysRemainder,currentYearDays,0x15180,0);\n  isNegative = (int)days < 0;\n  if (isNegative) {\n    days = days + 0x15180;\n  }\n  if (isNegative) {\n    totalDays = range + 0xafa6b;\n  }\n  else {\n    totalDays = range + 0xafa6c;\n  }\n  dateTimeResult[2] = days / 0xe10;\n  dateTimeResult[1] = (days % 0xe10) / 0x3c;\n  *dateTimeResult = (days % 0xe10) % 0x3c;\n  dateTimeResult[6] = (totalDays + 3) % 7;\n  days = totalDays;\n  if ((int)totalDays < 0) {\n    days = totalDays - 0x23ab0;\n  }\n  totalDays = (days / 0x23ab1) * -0x23ab1 + totalDays;\n  leapYears = ((totalDays / 0x8eac + totalDays) - totalDays / 0x5b4) - totalDays / 0x23ab0;\n  totalYears = leapYears / 0x16d;\n  totalDays = (totalYears / 100 - leapYears / 0x5b4) + totalDays + totalYears * -0x16d;\n  weekdayOffset = totalDays * 5 + 2;\n  leapYears = weekdayOffset / 0x99;\n  if (weekdayOffset < 0x5fa) {\n    range = 2;\n  }\n  else {\n    range = -10;\n  }\n  weekdayOffset = leapYears + range;\n  range = (days / 0x23ab1) * 400 + totalYears;\n  if (weekdayOffset < 2) {\n    range = range + 1;\n  }\n  if (totalDays < 0x132) {\n    if (((totalYears & 3) == 0) && (totalYears != (totalYears / 100) * 100)) {\n      days = 1;\n    }\n    else {\n      days = (uint)(totalYears % 400 == 0);\n    }\n    days = totalDays + 0x3b + days;\n  }\n  else {\n    days = totalDays - 0x132;\n  }\n  dateTimeResult[7] = days;\n  dateTimeResult[3] = (totalDays + 1) - (leapYears * 0x99 + 2) / 5;\n  dateTimeResult[4] = weekdayOffset;\n  dateTimeResult[5] = range - 0x76c;\n  dateTimeResult[8] = 0;\n  return dateTimeResult;\n}\n\n",
            "renaming": {
                "FUN_0000443c": "calculate_date_time_0000443c",
                "param_1": "dateTimeParams",
                "param_2": "dateTimeResult",
                "iVar1": "range",
                "uVar2": "totalDays",
                "uVar3": "days",
                "uVar4": "leapYears",
                "uVar5": "totalYears",
                "uVar6": "daysRemainder",
                "uVar7": "currentYearDays",
                "uVar8": "weekdayOffset",
                "bVar9": "isNegative"
            },
            "calling": [
                "FUN_00002624",
                "FUN_00002690"
            ],
            "called": [
                "FUN_00006974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000459c": {
            "entrypoint": "0x0000459c",
            "current_name": "initialize_system_and_execute_callbacks_0000459c",
            "code": "\nvoid initialize_system_and_execute_callbacks_0000459c(void)\n\n{\n  code **callback_pointer;\n  int callback_index;\n  \n  callback_pointer = (code **)&DAT_00007c58;\n  for (callback_index = 0; callback_index != 0; callback_index = callback_index + 1) {\n    (**callback_pointer)();\n    callback_pointer = callback_pointer + 1;\n  }\n  initialize_system_00000410();\n  callback_pointer = (code **)&DAT_00007c58;\n  for (callback_index = 0; callback_index != 0; callback_index = callback_index + 1) {\n    (**callback_pointer)();\n    callback_pointer = callback_pointer + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000459c": "initialize_system_and_execute_callbacks_0000459c",
                "ppcVar1": "callback_pointer",
                "iVar2": "callback_index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000410"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000045e4": {
            "entrypoint": "0x000045e4",
            "current_name": "FUNC_000045e4",
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045e8": {
            "entrypoint": "0x000045e8",
            "current_name": "FUNC_000045e8",
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_00004158",
                "FUN_00005790",
                "FUN_00004cb4",
                "FUN_0000428c",
                "FUN_00005fec",
                "FUN_000057f8",
                "FUN_00004274"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ec": {
            "entrypoint": "0x000045ec",
            "current_name": "FUNC_000045ec",
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_000042a4",
                "FUN_00004158",
                "FUN_00005ff8",
                "FUN_00004cb4",
                "FUN_00004280",
                "FUN_000057f8",
                "FUN_0000579c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ee": {
            "entrypoint": "0x000045ee",
            "current_name": "copy_memory_000045ee",
            "code": "\nvoid copyMemory_000045ee(undefined *dest,undefined *src,int size)\n\n{\n  undefined *destPtr;\n  undefined *srcPtr;\n  \n  srcPtr = src + size;\n  if ((src < dest) && (dest < srcPtr)) {\n    destPtr = dest + size;\n    while (destPtr != dest) {\n      srcPtr = srcPtr + -1;\n      destPtr = destPtr + -1;\n      *destPtr = *srcPtr;\n    }\n  }\n  else {\n    dest = dest + -1;\n    for (; src != srcPtr; src = src + 1) {\n      dest = dest + 1;\n      *dest = *src;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ee": "copy_memory_000045ee",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "srcPtr"
            },
            "calling": [
                "FUN_00003ff4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004622": {
            "entrypoint": "0x00004622",
            "current_name": "fill_memory_00004622",
            "code": "\nvoid fillMemory_00004622(undefined *memory,undefined value,int size)\n\n{\n  undefined *endAddress;\n  \n  endAddress = memory + size;\n  for (; memory != endAddress; memory = memory + 1) {\n    *memory = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004622": "fill_memory_00004622",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "endAddress"
            },
            "calling": [
                "FUN_00003ec4",
                "FUN_000041f4",
                "FUN_00003ff4",
                "FUN_0000305c",
                "FUN_00004314",
                "FUN_00004248"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004634": {
            "entrypoint": "0x00004634",
            "current_name": "update_date_time_00004634",
            "code": "\nvoid updateDateTime_00004634(uint *dateTime,uint daysToAdd,undefined4 leapYear)\n\n{\n  int daysInMonth;\n  uint dayOfWeek;\n  uint year;\n  int daysInYear;\n  bool negative;\n  uint *quotientAndRemainder;\n  uint days;\n  undefined4 leapYearFlag;\n  \n  quotientAndRemainder = dateTime;\n  days = daysToAdd;\n  leapYearFlag = leapYear;\n  if (0x3b < *dateTime) {\n    divide_and_remainder_00005584(&quotientAndRemainder,*dateTime,0x3c);\n    dayOfWeek = dateTime[1] + (int)quotientAndRemainder;\n    dateTime[1] = dayOfWeek;\n    if ((int)days < 0) {\n      dayOfWeek = dayOfWeek - 1;\n      *dateTime = days + 0x3c;\n    }\n    else {\n      *dateTime = days;\n    }\n    if ((int)days < 0) {\n      dateTime[1] = dayOfWeek;\n    }\n  }\n  if (0x3b < dateTime[1]) {\n    divide_and_remainder_00005584(&quotientAndRemainder,dateTime[1],0x3c);\n    negative = (int)days < 0;\n    year = dateTime[2] + (int)quotientAndRemainder;\n    dateTime[2] = year;\n    dayOfWeek = days;\n    if (negative) {\n      dayOfWeek = days + 0x3c;\n      year = year - 1;\n    }\n    if (!negative) {\n      dateTime[1] = dayOfWeek;\n    }\n    if (negative) {\n      dateTime[1] = dayOfWeek;\n    }\n    if (negative) {\n      dateTime[2] = year;\n    }\n  }\n  if (0x17 < dateTime[2]) {\n    divide_and_remainder_00005584(&quotientAndRemainder,dateTime[2],0x18);\n    negative = (int)days < 0;\n    year = dateTime[3] + (int)quotientAndRemainder;\n    dateTime[3] = year;\n    dayOfWeek = days;\n    if (negative) {\n      dayOfWeek = days + 0x18;\n      year = year - 1;\n    }\n    if (!negative) {\n      dateTime[2] = dayOfWeek;\n    }\n    if (negative) {\n      dateTime[2] = dayOfWeek;\n    }\n    if (negative) {\n      dateTime[3] = year;\n    }\n  }\n  if (0xb < dateTime[4]) {\n    divide_and_remainder_00005584(&quotientAndRemainder,dateTime[4],0xc);\n    negative = (int)days < 0;\n    dayOfWeek = dateTime[5] + (int)quotientAndRemainder;\n    dateTime[5] = dayOfWeek;\n    if (negative) {\n      days = days + 0xc;\n      dayOfWeek = dayOfWeek - 1;\n    }\n    if (!negative) {\n      dateTime[4] = days;\n    }\n    if (negative) {\n      dateTime[4] = days;\n    }\n    if (negative) {\n      dateTime[5] = dayOfWeek;\n    }\n  }\n  dayOfWeek = dateTime[5];\n  if ((dayOfWeek & 3) == 0) {\n    if (dayOfWeek == (dayOfWeek / 100) * 100) {\n      if ((dayOfWeek + 0x76c) % 400 == 0) {\n        daysInYear = 0x1d;\n      }\n      else {\n        daysInYear = 0x1c;\n      }\n    }\n    else {\n      daysInYear = 0x1d;\n    }\n  }\n  else {\n    daysInYear = 0x1c;\n  }\n  if ((int)dateTime[3] < 1) {\n    while ((int)dateTime[3] < 1) {\n      dayOfWeek = dateTime[4];\n      dateTime[4] = dayOfWeek - 1;\n      if (dayOfWeek - 1 == 0xffffffff) {\n        year = dateTime[5];\n        dayOfWeek = year - 1;\n        dateTime[4] = 0xb;\n        dateTime[5] = dayOfWeek;\n        if ((dayOfWeek & 3) == 0) {\n          if (dayOfWeek == (dayOfWeek / 100) * 100) {\n            if ((year + 0x76b) % 400 == 0) {\n              daysInYear = 0x1d;\n            }\n            else {\n              daysInYear = 0x1c;\n            }\n          }\n          else {\n            daysInYear = 0x1d;\n          }\n        }\n        else {\n          daysInYear = 0x1c;\n        }\n      }\n      daysInMonth = daysInYear;\n      if (dateTime[4] != 1) {\n        daysInMonth = (&DAT_000079fc)[dateTime[4]];\n      }\n      dateTime[3] = daysInMonth + dateTime[3];\n    }\n  }\n  else {\n    while( true ) {\n      dayOfWeek = dateTime[4];\n      daysInMonth = daysInYear;\n      if (dayOfWeek != 1) {\n        daysInMonth = (&DAT_000079fc)[dayOfWeek];\n      }\n      if ((int)dateTime[3] <= daysInMonth) break;\n      dateTime[3] = dateTime[3] - daysInMonth;\n      dateTime[4] = dayOfWeek + 1;\n      if (dayOfWeek + 1 == 0xc) {\n        year = dateTime[5];\n        dayOfWeek = year + 1;\n        dateTime[4] = 0;\n        dateTime[5] = dayOfWeek;\n        if ((dayOfWeek & 3) == 0) {\n          if (dayOfWeek % 100 == 0) {\n            if ((year + 0x76d) % 400 == 0) {\n              daysInYear = 0x1d;\n            }\n            else {\n              daysInYear = 0x1c;\n            }\n          }\n          else {\n            daysInYear = 0x1d;\n          }\n        }\n        else {\n          daysInYear = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004634": "update_date_time_00004634",
                "param_1": "dateTime",
                "param_2": "daysToAdd",
                "param_3": "leapYear",
                "iVar1": "daysInMonth",
                "uVar2": "dayOfWeek",
                "uVar3": "year",
                "iVar4": "daysInYear",
                "bVar5": "negative",
                "local_20": "quotientAndRemainder",
                "local_1c": "days",
                "uStack_18": "leapYearFlag"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005584"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000047e4": {
            "entrypoint": "0x000047e4",
            "current_name": "calculate_adjusted_date_000047e4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculateAdjustedDate_000047e4(int *date)\n\n{\n  longlong daysSinceEpoch;\n  longlong adjustedDaysSinceEpoch;\n  int *baseAddress;\n  uint year;\n  int leapYears;\n  int i;\n  int adjustedDayOfWeek;\n  uint baseYear;\n  uint upperLimitYear;\n  uint lowerLimitYear;\n  int numDaysToAdd;\n  uint baseDays;\n  uint isNegative;\n  uint numYears;\n  uint daysSinceEpochLower;\n  bool isLeapYear;\n  \n  baseAddress = (int *)get_base_address_000056b0();\n  update_date_time_00004634(date);\n  baseDays = date[5];\n  numDaysToAdd = date[3] + -1 + *(int *)(&DAT_00007a2c + date[4] * 4);\n  if (((1 < date[4]) && ((baseDays & 3) == 0)) &&\n     ((baseDays != (baseDays / 100) * 100 || (baseDays + 0x76c == ((baseDays + 0x76c) / 400) * 400)))) {\n    numDaysToAdd = numDaysToAdd + 1;\n  }\n  date[7] = numDaysToAdd;\n  if (20000 < (int)&DAT_00002710 + baseDays) {\n    adjustedDayOfWeek = -1;\n    leapYears = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)baseDays < 0x47) {\n    if (baseDays != 0x46) {\n      for (upperLimitYear = 0x45; (int)baseDays < (int)upperLimitYear; upperLimitYear = upperLimitYear - 1) {\n        if ((upperLimitYear & 3) == 0) {\n          if (upperLimitYear == (upperLimitYear / 100) * 100) {\n            if ((upperLimitYear + 0x76c) % 400 == 0) {\n              adjustedDayOfWeek = 0x16e;\n            }\n            else {\n              adjustedDayOfWeek = 0x16d;\n            }\n          }\n          else {\n            adjustedDayOfWeek = 0x16e;\n          }\n        }\n        else {\n          adjustedDayOfWeek = 0x16d;\n        }\n        numDaysToAdd = numDaysToAdd - adjustedDayOfWeek;\n      }\n      if ((upperLimitYear & 3) == 0) {\n        if (baseDays == (baseDays / 100) * 100) {\n          adjustedDayOfWeek = 0x16d;\n          if ((baseDays + 0x76c) % 400 == 0) {\n            adjustedDayOfWeek = 0x16e;\n          }\n        }\n        else {\n          adjustedDayOfWeek = 0x16e;\n        }\n      }\n      else {\n        adjustedDayOfWeek = 0x16d;\n      }\n      numDaysToAdd = numDaysToAdd - adjustedDayOfWeek;\n    }\n  }\n  else {\n    upperLimitYear = 0x46;\n    do {\n      if ((upperLimitYear & 3) == 0) {\n        if (upperLimitYear % 100 == 0) {\n          if ((upperLimitYear + 0x76c) % 400 == 0) {\n            adjustedDayOfWeek = 0x16e;\n          }\n          else {\n            adjustedDayOfWeek = 0x16d;\n          }\n        }\n        else {\n          adjustedDayOfWeek = 0x16e;\n        }\n      }\n      else {\n        adjustedDayOfWeek = 0x16d;\n      }\n      upperLimitYear = upperLimitYear + 1;\n      numDaysToAdd = numDaysToAdd + adjustedDayOfWeek;\n    } while (baseDays != upperLimitYear);\n  }\n  daysSinceEpoch = (longlong)numDaysToAdd * 0x15180 + (longlong)(date[2] * 0xe10 + date[1] * 0x3c + *date)\n  ;\n  daysSinceEpochLower = (uint)daysSinceEpoch;\n  adjustedDayOfWeek = (int)((ulonglong)daysSinceEpoch >> 0x20);\n  get_data_pointer_000050e8();\n  initialize_data_00005100();\n  upperLimitYear = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    baseDays = baseAddress[10];\n    adjustedDayOfWeek = (uint)daysSinceEpoch + baseDays;\n    leapYears = (int)((ulonglong)daysSinceEpoch >> 0x20) +\n            ((int)baseDays >> 0x1f) + (uint)CARRY4((uint)daysSinceEpoch,baseDays);\n  }\n  else {\n    numYears = date[8];\n    isNegative = numYears;\n    if (0 < (int)numYears) {\n      isNegative = 1;\n    }\n    if ((baseAddress[1] == date[5] + 0x76c) || (leapYears = calculate_day_of_week_00004f98(), leapYears != 0)) {\n      lowerLimitYear = baseAddress[0x14];\n      year = baseAddress[0x12];\n      baseYear = baseAddress[10];\n      upperLimitYear = year - baseYear;\n      leapYears = (baseAddress[0x13] - ((int)baseYear >> 0x1f)) - (uint)(year < baseYear);\n      if (((int)((adjustedDayOfWeek - leapYears) - (uint)(daysSinceEpochLower < upperLimitYear)) < 0 ==\n           (SBORROW4(adjustedDayOfWeek,leapYears) != SBORROW4(adjustedDayOfWeek - leapYears,(uint)(daysSinceEpochLower < upperLimitYear)))) &&\n         (i = (baseAddress[0x13] - ((int)lowerLimitYear >> 0x1f)) - (uint)(year < lowerLimitYear),\n         isLeapYear = daysSinceEpochLower < year - lowerLimitYear,\n         (int)((adjustedDayOfWeek - i) - (uint)isLeapYear) < 0 !=\n         (SBORROW4(adjustedDayOfWeek,i) != SBORROW4(adjustedDayOfWeek - i,(uint)isLeapYear)))) goto LAB_00004a88;\n      year = baseAddress[8] - lowerLimitYear;\n      i = (baseAddress[9] - ((int)lowerLimitYear >> 0x1f)) - (uint)((uint)baseAddress[8] < lowerLimitYear);\n      if (*baseAddress != 0) {\n        if ((int)((adjustedDayOfWeek - i) - (uint)(daysSinceEpochLower < year)) < 0 ==\n            (SBORROW4(adjustedDayOfWeek,i) != SBORROW4(adjustedDayOfWeek - i,(uint)(daysSinceEpochLower < year))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        upperLimitYear = 0;\n        if ((int)numYears < 0) goto LAB_00004934;\nLAB_00004a14:\n        daysSinceEpochLower = isNegative ^ upperLimitYear;\n        isNegative = upperLimitYear;\n        if (daysSinceEpochLower == 1) {\n          if (upperLimitYear == 0) {\n            adjustedDayOfWeek = lowerLimitYear - baseYear;\n          }\n          else {\n            adjustedDayOfWeek = baseYear - lowerLimitYear;\n          }\n          leapYears = date[3];\n          *date = *date + adjustedDayOfWeek;\n          adjustedDaysSinceEpoch = daysSinceEpoch + adjustedDayOfWeek;\n          update_date_time_00004634(date);\n          leapYears = date[3] - leapYears;\n          daysSinceEpoch = daysSinceEpoch + adjustedDayOfWeek;\n          if (leapYears != 0) {\n            if (leapYears < 2) {\n              if (leapYears == -2 || leapYears + 2 < 0 != SCARRY4(leapYears,2)) {\n                leapYears = 1;\n              }\n            }\n            else {\n              leapYears = -1;\n            }\n            adjustedDayOfWeek = leapYears + date[7];\n            numDaysToAdd = numDaysToAdd + leapYears;\n            if (adjustedDayOfWeek < 0) {\n              upperLimitYear = baseDays - 1;\n              if ((upperLimitYear & 3) == 0) {\n                if (upperLimitYear == (upperLimitYear / 100) * 100) {\n                  adjustedDayOfWeek = 0x16d;\n                  if ((baseDays + 0x76b) % 400 != 0) {\n                    adjustedDayOfWeek = 0x16c;\n                  }\n                }\n                else {\n                  adjustedDayOfWeek = 0x16d;\n                }\n              }\n              else {\n                adjustedDayOfWeek = 0x16c;\n              }\n            }\n            else {\n              if ((baseDays & 3) == 0) {\n                if (baseDays == (baseDays / 100) * 100) {\n                  leapYears = 0x16d;\n                  if ((baseDays + 0x76c) % 400 == 0) {\n                    leapYears = 0x16e;\n                  }\n                }\n                else {\n                  leapYears = 0x16e;\n                }\n              }\n              else {\n                leapYears = 0x16d;\n              }\n              if (leapYears <= adjustedDayOfWeek) {\n                adjustedDayOfWeek = adjustedDayOfWeek - leapYears;\n              }\n            }\n            date[7] = adjustedDayOfWeek;\n            daysSinceEpoch = adjustedDaysSinceEpoch;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((adjustedDayOfWeek - i) - (uint)(daysSinceEpochLower < year)) < 0 !=\n          (SBORROW4(adjustedDayOfWeek,i) != SBORROW4(adjustedDayOfWeek - i,(uint)(daysSinceEpochLower < year)))) {\nLAB_0000491e:\n        if ((int)((adjustedDayOfWeek - leapYears) - (uint)(daysSinceEpochLower < upperLimitYear)) < 0 ==\n            (SBORROW4(adjustedDayOfWeek,leapYears) != SBORROW4(adjustedDayOfWeek - leapYears,(uint)(daysSinceEpochLower < upperLimitYear))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)numYears) {\n        upperLimitYear = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      upperLimitYear = isNegative;\n      if (isNegative != 1) goto LAB_00004934;\n    }\n    baseDays = baseAddress[0x14];\n    adjustedDayOfWeek = (uint)daysSinceEpoch + baseDays;\n    leapYears = (int)((ulonglong)daysSinceEpoch >> 0x20) +\n            ((int)baseDays >> 0x1f) + (uint)CARRY4((uint)daysSinceEpoch,baseDays);\n    upperLimitYear = 1;\n  }\n  get_memory_address_000050f4();\n  date[8] = upperLimitYear;\n  date[6] = (numDaysToAdd + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(leapYears,adjustedDayOfWeek);\n}\n\n",
            "renaming": {
                "FUN_000047e4": "calculate_adjusted_date_000047e4",
                "param_1": "date",
                "lVar1": "daysSinceEpoch",
                "lVar2": "adjustedDaysSinceEpoch",
                "piVar3": "baseAddress",
                "uVar4": "year",
                "iVar5": "leapYears",
                "iVar6": "i",
                "iVar7": "adjustedDayOfWeek",
                "uVar8": "baseYear",
                "uVar9": "upperLimitYear",
                "uVar10": "lowerLimitYear",
                "iVar11": "numDaysToAdd",
                "uVar12": "baseDays",
                "uVar13": "isNegative",
                "uVar14": "numYears",
                "uVar15": "daysSinceEpochLower",
                "bVar16": "isLeapYear"
            },
            "calling": [
                "FUN_00002600",
                "FUN_00002654"
            ],
            "called": [
                "FUN_00005100",
                "FUN_000050e8",
                "FUN_00004f98",
                "FUN_000050f4",
                "FUN_00004634",
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004b34": {
            "entrypoint": "0x00004b34",
            "current_name": "initialize_linked_list_00004b34",
            "code": "\nvoid initializeLinkedList_00004b34(undefined4 *result,int size,undefined4 param_3,undefined4 param_4)\n\n{\n  int *prevPtr;\n  int **nextPtr;\n  int **currentPtr;\n  int **headPtr;\n  int **tempPtr;\n  int **newNodePtr;\n  bool isEnd;\n  \n  if (size == 0) {\n    return;\n  }\n  newNodePtr = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    newNodePtr = (int **)((int)newNodePtr + *(int *)(size + -4));\n  }\n  initialize_data_00005790();\n  headPtr = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    newNodePtr[1] = (int *)0x0;\n    currentPtr = nextPtr;\n    DAT_1fff0db4 = newNodePtr;\n  }\n  else {\n    tempPtr = DAT_1fff0db4;\n    if (newNodePtr < DAT_1fff0db4) {\n      currentPtr = (int **)*newNodePtr;\n      headPtr = (int **)((int)newNodePtr + (int)currentPtr);\n      isEnd = DAT_1fff0db4 == headPtr;\n      if (isEnd) {\n        headPtr = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      newNodePtr[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = newNodePtr;\n      if (isEnd) {\n        headPtr = (int **)((int)headPtr + (int)currentPtr);\n        *newNodePtr = (int *)headPtr;\n      }\n    }\n    else {\n      do {\n        headPtr = tempPtr;\n        tempPtr = (int **)headPtr[1];\n        if (tempPtr == (int **)0x0) break;\n      } while (tempPtr <= newNodePtr);\n      currentPtr = (int **)*headPtr;\n      if ((int **)((int)headPtr + (int)currentPtr) == newNodePtr) {\n        currentPtr = (int **)((int)currentPtr + (int)*newNodePtr);\n        *headPtr = (int *)currentPtr;\n        if (tempPtr == (int **)((int)headPtr + (int)currentPtr)) {\n          prevPtr = *tempPtr;\n          headPtr[1] = tempPtr[1];\n          currentPtr = (int **)((int)currentPtr + (int)prevPtr);\n          *headPtr = (int *)currentPtr;\n        }\n      }\n      else if (newNodePtr < (int **)((int)headPtr + (int)currentPtr)) {\n        *result = 0xc;\n      }\n      else {\n        currentPtr = (int **)((int)newNodePtr + (int)*newNodePtr);\n        isEnd = tempPtr == currentPtr;\n        if (isEnd) {\n          currentPtr = (int **)*tempPtr;\n          tempPtr = (int **)tempPtr[1];\n        }\n        newNodePtr[1] = (int *)tempPtr;\n        if (isEnd) {\n          currentPtr = (int **)((int)currentPtr + (int)*newNodePtr);\n          *newNodePtr = (int *)currentPtr;\n        }\n        headPtr[1] = (int *)newNodePtr;\n      }\n    }\n  }\n  initialize_data_0000579c(result,currentPtr,headPtr,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004b34": "initialize_linked_list_00004b34",
                "param_1": "result",
                "param_2": "size",
                "piVar1": "prevPtr",
                "extraout_r1": "nextPtr",
                "ppiVar2": "currentPtr",
                "ppiVar3": "headPtr",
                "ppiVar4": "tempPtr",
                "ppiVar5": "newNodePtr",
                "bVar6": "isEnd"
            },
            "calling": [
                "FUN_0000404c",
                "FUN_00006192",
                "FUN_00005780",
                "FUN_000054a8",
                "FUN_00006768",
                "FUN_000060cc"
            ],
            "called": [
                "FUN_00005790",
                "FUN_0000579c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "entrypoint": "0x00004bd0",
            "current_name": "allocate_memory_00004bd0",
            "code": "\nuint allocate_memory_00004bd0(undefined4 *output_ptr,uint size,undefined4 param_3,undefined4 param_4)\n\n{\n  uint *current_block;\n  int difference;\n  uint offset;\n  uint *previous_block;\n  uint block_size;\n  \n  block_size = (size + 3 & 0xfffffffc) + 8;\n  if (block_size < 0xc) {\n    block_size = 0xc;\n  }\n  if (((int)block_size < 0) || (block_size < size)) {\n    *output_ptr = 0xc;\n  }\n  else {\n    initialize_data_00005790();\n    current_block = DAT_1fff0db4;\n    for (previous_block = DAT_1fff0db4; previous_block != (uint *)0x0; previous_block = (uint *)previous_block[1]) {\n      offset = *previous_block - block_size;\n      if (-1 < (int)offset) {\n        if (0xb < offset) {\n          *previous_block = offset;\n          previous_block = (uint *)((int)previous_block + offset);\n          goto LAB_00004c34;\n        }\n        if (current_block == previous_block) {\n          DAT_1fff0db4 = (uint *)previous_block[1];\n        }\n        if (current_block != previous_block) {\n          current_block[1] = (uint)(uint *)previous_block[1];\n        }\n        goto LAB_00004c42;\n      }\n      current_block = previous_block;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = update_elf_relocation_00000428(output_ptr,0,current_block,0,param_4);\n    }\n    current_block = (uint *)update_elf_relocation_00000428(output_ptr,block_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block ||\n        (difference = update_elf_relocation_00000428(output_ptr,(int)previous_block - (int)current_block), difference != -1)))) {\nLAB_00004c34:\n      *previous_block = block_size;\nLAB_00004c42:\n      initialize_data_0000579c(output_ptr);\n      block_size = (int)previous_block + 0xbU & 0xfffffff8;\n      difference = block_size - (int)(previous_block + 1);\n      if (difference == 0) {\n        return block_size;\n      }\n      *(uint *)((int)previous_block + difference) = (int)(previous_block + 1) - block_size;\n      return block_size;\n    }\n    *output_ptr = 0xc;\n    initialize_data_0000579c(output_ptr);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004bd0": "allocate_memory_00004bd0",
                "param_1": "output_ptr",
                "param_2": "size",
                "puVar1": "current_block",
                "iVar2": "difference",
                "uVar3": "offset",
                "puVar4": "previous_block",
                "uVar5": "block_size"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000068f0",
                "FUN_000060cc",
                "FUN_00005700",
                "FUN_00004248"
            ],
            "called": [
                "FUN_00005790",
                "FUN_00000428",
                "FUN_0000579c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004c84": {
            "entrypoint": "0x00004c84",
            "current_name": "process_data_from_binary_00004c84",
            "code": "\nvoid process_data_from_binary_00004c84(undefined4 data_param,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  dword offset;\n  undefined4 data_var;\n  undefined4 param_c;\n  undefined4 param_8;\n  undefined4 param_4;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  data_var = data_param;\n  param_c = param_2;\n  param_8 = param_3;\n  param_4 = param_4;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_and_process_data_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  process_data_000057f8(offset,*(undefined4 *)(offset + 8),data_param,&param_c,data_var,&param_c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004c84": "process_data_from_binary_00004c84",
                "param_1": "data_param",
                "dVar1": "offset",
                "uVar2": "data_var",
                "uStack_c": "param_c",
                "uStack_8": "param_8",
                "uStack_4": "param_4"
            },
            "calling": [
                "FUN_00000ed8",
                "FUN_00003694",
                "FUN_00002fe0",
                "FUN_00002b10",
                "FUN_00002a88",
                "FUN_0000211c",
                "FUN_00002f74",
                "FUN_00003524",
                "FUN_00002ecc",
                "FUN_0000316c",
                "FUN_00000f04",
                "FUN_00003378",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "entrypoint": "0x00004cb4",
            "current_name": "process_data_00004cb4",
            "code": "\nuint process_data_00004cb4(uint input_data)\n\n{\n  dword offset;\n  undefined4 *pointer;\n  uint count;\n  undefined *byte_pointer;\n  undefined4 arg4;\n  undefined4 arg5;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_and_process_data_00004cb4_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  pointer = *(undefined4 **)(offset + 8);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    initialize_and_process_data_00004cb4_000042a4();\n  }\n  if (pointer == &DAT_000079b8) {\n    pointer = *(undefined4 **)(offset + 4);\n  }\n  else if (pointer == (undefined4 *)&DAT_000079d8) {\n    pointer = *(undefined4 **)(offset + 8);\n  }\n  else if (pointer == (undefined4 *)&DAT_00007998) {\n    pointer = *(undefined4 **)(offset + 0xc);\n  }\n  if ((-1 < (int)(pointer[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(pointer + 3) << 0x16))) {\n    FUNC_000045e8(pointer[0x16]);\n  }\n  count = pointer[2] - 1;\n  pointer[2] = count;\n  if (((int)count < 0) && (((int)count < (int)pointer[6] || (count = input_data & 0xff, count == 10))))\n  {\n    input_data = process_data_00004cb4_00005404(offset,input_data,pointer,count,arg4,arg5);\n  }\n  else {\n    byte_pointer = (undefined *)*pointer;\n    *pointer = byte_pointer + 1;\n    *byte_pointer = (char)input_data;\n    input_data = input_data & 0xff;\n  }\n  if ((-1 < (int)(pointer[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(pointer + 3) << 0x16))) {\n    FUNC_000045ec(pointer[0x16]);\n  }\n  return input_data;\n}\n\n",
            "renaming": {
                "FUN_00004cb4": "process_data_00004cb4",
                "param_1": "input_data",
                "dVar1": "offset",
                "puVar2": "pointer",
                "uVar3": "count",
                "puVar4": "byte_pointer",
                "unaff_r4": "arg4",
                "unaff_r5": "arg5"
            },
            "calling": [
                "FUN_00002a00"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005404",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004db8": {
            "entrypoint": "0x00004db8",
            "current_name": "process_binary_data_00004db8",
            "code": "\nundefined4 processBinaryData_00004db8(int input_data)\n\n{\n  char current_char;\n  dword data_offset;\n  int result;\n  char *string_ptr;\n  char **data_array_ptr;\n  undefined4 return_value;\n  char *string_ptr_2;\n  \n  data_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_and_process_data_000042a4();\n  }\n  data_array_ptr = *(char ***)(data_offset + 8);\n  if (*(int *)(data_offset + 0x18) == 0) {\n    initialize_and_process_data_000042a4(data_offset);\n  }\n  if (data_array_ptr == (char **)&DAT_000079b8) {\n    data_array_ptr = *(char ***)(data_offset + 4);\n  }\n  else if (data_array_ptr == (char **)&DAT_000079d8) {\n    data_array_ptr = *(char ***)(data_offset + 8);\n  }\n  else if (data_array_ptr == (char **)&DAT_00007998) {\n    data_array_ptr = *(char ***)(data_offset + 0xc);\n  }\n  if ((-1 < (int)data_array_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(data_array_ptr + 3) << 0x16))) {\n    FUNC_000045e8(data_array_ptr[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(data_array_ptr + 3) << 0x1c) < 0) && (data_array_ptr[4] != (char *)0x0)) ||\n     (result = update_data_000054a8(data_offset,data_array_ptr), result == 0)) {\n    string_ptr_2 = (char *)(input_data + -1);\n    do {\n      while( true ) {\n        string_ptr_2 = string_ptr_2 + 1;\n        current_char = *string_ptr_2;\n        string_ptr = data_array_ptr[2] + -1;\n        data_array_ptr[2] = string_ptr;\n        if (current_char == '\\0') {\n          if (-1 < (int)string_ptr) {\n            string_ptr_2 = *data_array_ptr;\n            return_value = 10;\n            *data_array_ptr = string_ptr_2 + 1;\n            *string_ptr_2 = '\\n';\n            goto LAB_00004d64;\n          }\n          result = process_data_00005404(data_offset,10,data_array_ptr);\n          if (result != -1) {\n            return_value = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)string_ptr < 0) && (((int)string_ptr < (int)data_array_ptr[6] || (current_char == '\\n')))) break;\n        string_ptr = *data_array_ptr;\n        *data_array_ptr = string_ptr + 1;\n        *string_ptr = current_char;\n      }\n      result = process_data_00005404(data_offset,current_char,data_array_ptr);\n    } while (result != -1);\n  }\nLAB_00004d60:\n  return_value = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)data_array_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(data_array_ptr + 3) << 0x16))) {\n    FUNC_000045ec(data_array_ptr[0x16]);\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00004db8": "process_binary_data_00004db8",
                "param_1": "input_data",
                "cVar1": "current_char",
                "dVar2": "data_offset",
                "iVar3": "result",
                "pcVar4": "string_ptr",
                "ppcVar5": "data_array_ptr",
                "uVar6": "return_value",
                "pcVar7": "string_ptr_2"
            },
            "calling": [
                "FUN_00003694",
                "FUN_00003478",
                "FUN_00002fe0",
                "FUN_000031e0",
                "FUN_00002b10",
                "FUN_00002a88",
                "FUN_000033f4",
                "FUN_00002f74",
                "FUN_000034c0",
                "FUN_00003444",
                "FUN_00002f30",
                "FUN_0000305c",
                "FUN_000033c0",
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005404",
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "entrypoint": "0x00004dc8",
            "current_name": "update_values_00004dc8",
            "code": "\nvoid updateValues_00004dc8(undefined4 input,int ptr)\n\n{\n  int result;\n  uint newValue;\n  bool isPositive;\n  \n  result = process_and_return_interrupt_00000490(input,(int)*(short *)(ptr + 0xe));\n  isPositive = -1 < result;\n  if (isPositive) {\n    newValue = *(int *)(ptr + 0x54) + result;\n  }\n  else {\n    newValue = *(ushort *)(ptr + 0xc) & 0xffffefff;\n  }\n  if (isPositive) {\n    *(uint *)(ptr + 0x54) = newValue;\n  }\n  if (!isPositive) {\n    *(short *)(ptr + 0xc) = (short)newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004dc8": "update_values_00004dc8",
                "param_1": "input",
                "param_2": "ptr",
                "iVar1": "result",
                "uVar2": "newValue",
                "bVar3": "isPositive"
            },
            "calling": [],
            "called": [
                "FUN_00000490"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dee": {
            "entrypoint": "0x00004dee",
            "current_name": "copy_data_and_return_00004dee",
            "code": "\nundefined4 copy_data_and_return_00004dee(undefined4 output,int input,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 result;\n  \n  if ((int)((uint)*(ushort *)(input + 0xc) << 0x17) < 0) {\n    initialize_value_and_return(output,(int)*(short *)(input + 0xe),0,2);\n  }\n  *(ushort *)(input + 0xc) = *(ushort *)(input + 0xc) & 0xefff;\n  result = copy_and_return_data(param3,param4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004dee": "copy_data_and_return_00004dee",
                "param_1": "output",
                "param_2": "input",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "initialize_value_and_return_000004f2": "initialize_value_and_return",
                "copy_and_return_data_00000e38": "copy_and_return_data"
            },
            "calling": [],
            "called": [
                "FUN_000004f2",
                "FUN_00000e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e26": {
            "entrypoint": "0x00004e26",
            "current_name": "update_value_00004e26",
            "code": "\nvoid updateValue_00004e26(undefined4 param1,int param2)\n\n{\n  int initializedValue;\n  ushort updatedValue;\n  bool isError;\n  \n  initializedValue = initialize_value_and_return_000004f2(param1,(int)*(short *)(param2 + 0xe));\n  isError = initializedValue == -1;\n  if (isError) {\n    updatedValue = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(param2 + 0x54) = initializedValue;\n    updatedValue = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (isError) {\n    *(ushort *)(param2 + 0xc) = updatedValue;\n  }\n  if (!isError) {\n    *(ushort *)(param2 + 0xc) = updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004e26": "update_value_00004e26",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "initializedValue",
                "uVar2": "updatedValue",
                "bVar3": "isError"
            },
            "calling": [],
            "called": [
                "FUN_000004f2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e52": {
            "entrypoint": "0x00004e52",
            "current_name": "compare_bytes_00004e52",
            "code": "\nint compareBytes_00004e52(byte *input1,byte *input2)\n\n{\n  byte currentByte;\n  uint byte1;\n  bool isEqual;\n  \n  do {\n    byte1 = (uint)*input1;\n    currentByte = *input2;\n    isEqual = byte1 == 1;\n    if (byte1 != 0) {\n      isEqual = byte1 == currentByte;\n    }\n    input1 = input1 + 1;\n    input2 = input2 + 1;\n  } while (isEqual);\n  return byte1 - currentByte;\n}\n\n",
            "renaming": {
                "FUN_00004e52": "compare_bytes_00004e52",
                "param_1": "input1",
                "param_2": "input2",
                "bVar1": "currentByte",
                "uVar2": "byte1",
                "bVar3": "isEqual"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00002a18",
                "FUN_00004e52",
                "FUN_00002fe0",
                "FUN_0000316c",
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e66": {
            "entrypoint": "0x00004e66",
            "current_name": "calculate_difference_00004e66",
            "code": "\nint calculate_difference_00004e66(byte *data,int start_index,int length)\n\n{\n  byte *current_byte;\n  int difference;\n  byte *next_byte;\n  uint current_byte_value;\n  \n  if (length == 0) {\n    difference = 0;\n  }\n  else {\n    next_byte = (byte *)(start_index + -1);\n    current_byte = data;\n    do {\n      current_byte_value = (uint)*current_byte;\n      next_byte = next_byte + 1;\n      if ((current_byte_value != *next_byte) || (current_byte + 1 == data + length)) break;\n      current_byte = current_byte + 1;\n    } while (current_byte_value != 0);\n    difference = current_byte_value - *next_byte;\n  }\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_00004e66": "calculate_difference_00004e66",
                "param_1": "data",
                "param_2": "start_index",
                "param_3": "length",
                "pbVar1": "current_byte",
                "iVar2": "difference",
                "pbVar3": "next_byte",
                "uVar4": "current_byte_value"
            },
            "calling": [
                "FUN_00003524",
                "FUN_0000562c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f84": {
            "entrypoint": "0x00004f84",
            "current_name": "parse_unsigned_integer_00004f84",
            "code": "\nuint parseUnsignedInteger_00004f84(byte *inputString,byte **outputPointer,uint base)\n\n{\n  uint result;\n  uint currentChar;\n  uint isNegative;\n  uint digitValue;\n  int state;\n  uint maxValue;\n  uint quotient;\n  byte *currentByte;\n  byte *nextByte;\n  \n  nextByte = inputString;\n  do {\n    currentByte = nextByte;\n    nextByte = currentByte + 1;\n    currentChar = (uint)*currentByte;\n    isNegative = (byte)(&DAT_00007a99)[currentChar] & 8;\n  } while (((&DAT_00007a99)[currentChar] & 8) != 0);\n  if (currentChar == 0x2d) {\n    currentChar = (uint)*nextByte;\n    isNegative = 1;\n    nextByte = currentByte + 2;\n  }\n  else if (currentChar == 0x2b) {\n    currentChar = (uint)*nextByte;\n    nextByte = currentByte + 2;\n  }\n  if (base == 0) {\n    if (currentChar != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (currentChar != 0x30)) goto LAB_00004ed6;\n  if ((*nextByte & 0xdf) == 0x58) {\n    currentChar = (uint)nextByte[1];\n    base = 0x10;\n    nextByte = nextByte + 2;\n  }\n  else {\n    currentChar = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  maxValue = isNegative + 0x7fffffff;\n  state = 0;\n  quotient = maxValue / base;\n  result = 0;\n  do {\n    digitValue = currentChar - 0x30;\n    if (9 < digitValue) {\n      if (currentChar - 0x41 < 0x1a) {\n        digitValue = currentChar - 0x37;\n      }\n      else {\n        if (0x19 < currentChar - 0x61) break;\n        digitValue = currentChar - 0x57;\n      }\n    }\n    if ((int)base <= (int)digitValue) break;\n    if (state != -1) {\n      if ((quotient < result) || ((quotient == result && ((int)(maxValue - base * quotient) < (int)digitValue)))) {\n        state = -1;\n      }\n      else {\n        result = result * base + digitValue;\n        state = 1;\n      }\n    }\n    currentChar = (uint)*nextByte;\n    nextByte = nextByte + 1;\n  } while( true );\n  if (state == -1) {\n    *(undefined4 *)Elf32_Rel_ARRAY_1fff0200[16].r_offset = 0x22;\n    result = maxValue;\n    if (outputPointer == (byte **)0x0) {\n      return maxValue;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      result = -result;\n    }\n    if (outputPointer == (byte **)0x0) {\n      return result;\n    }\n    if (state == 0) goto LAB_00004f64;\n  }\n  inputString = nextByte + -1;\nLAB_00004f64:\n  *outputPointer = inputString;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004f84": "parse_unsigned_integer_00004f84",
                "param_1": "inputString",
                "param_2": "outputPointer",
                "param_3": "base",
                "uVar1": "result",
                "uVar2": "currentChar",
                "uVar3": "isNegative",
                "uVar4": "digitValue",
                "uVar6": "maxValue",
                "uVar7": "quotient",
                "pbVar8": "currentByte",
                "pbVar9": "nextByte",
                "iVar5": "state"
            },
            "calling": [
                "FUN_00004042",
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f98": {
            "entrypoint": "0x00004f98",
            "current_name": "calculate_day_of_week_00004f98",
            "code": "\nundefined4 calculate_day_of_week_00004f98(uint year)\n\n{\n  uint *base_address;\n  undefined4 is_leap_year;\n  uint day_of_week;\n  int extra_days;\n  uint *ptr;\n  int total_days;\n  uint is_leap_year_check;\n  int counter;\n  int day_offset;\n  uint is_divisible;\n  \n  base_address = (uint *)get_base_address_000056b0();\n  if ((int)year < 0x7b2) {\n    is_leap_year = 0;\n  }\n  else {\n    total_days = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    base_address[1] = year;\n    is_divisible = (uint)(year % 400 == 0);\n    ptr = base_address;\n    do {\n      day_of_week = ptr[5];\n      if (*(char *)(ptr + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)day_of_week < 0x3c) {\n            extra_days = 0;\n          }\n          else {\n            extra_days = 1;\n          }\n        }\n        else {\n          extra_days = 0;\n        }\n        extra_days = extra_days + total_days + day_of_week + -1;\n      }\n      else if (*(char *)(ptr + 2) == 'D') {\n        extra_days = total_days + day_of_week;\n      }\n      else {\n        is_leap_year_check = is_divisible;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          is_leap_year_check = 1;\n        }\n        counter = 0;\n        extra_days = total_days;\n        while( true ) {\n          counter = counter + 1;\n          if ((int)ptr[3] <= counter) break;\n          extra_days = extra_days + *(int *)(&UNK_00007b98 + counter * 4 + is_leap_year_check * 0x30);\n        }\n        day_offset = day_of_week - (extra_days + 4U) % 7;\n        if (day_offset < 0) {\n          day_offset = day_offset + 7;\n        }\n        for (day_offset = (ptr[4] - 1) * 7 + day_offset;\n            *(int *)(&UNK_00007b98 + counter * 4 + is_leap_year_check * 0x30) <= day_offset; day_offset = day_offset + -7) {\n        }\n        extra_days = extra_days + day_offset;\n      }\n      day_of_week = ptr[10] + extra_days * 0x15180 + ptr[6];\n      ptr[8] = day_of_week;\n      ptr[9] = (int)day_of_week >> 0x1f;\n      ptr = ptr + 10;\n    } while (base_address + 0x14 != ptr);\n    day_of_week = base_address[9];\n    is_divisible = base_address[0x13];\n    *base_address = (uint)((int)((day_of_week - is_divisible) - (uint)(base_address[8] < base_address[0x12])) < 0 !=\n                    (SBORROW4(day_of_week,is_divisible) !=\n                    SBORROW4(day_of_week - is_divisible,(uint)(base_address[8] < base_address[0x12]))));\n    is_leap_year = 1;\n  }\n  return is_leap_year;\n}\n\n",
            "renaming": {
                "FUN_00004f98": "calculate_day_of_week_00004f98",
                "param_1": "year",
                "puVar1": "base_address",
                "uVar2": "is_leap_year",
                "uVar3": "day_of_week",
                "iVar4": "extra_days",
                "puVar5": "ptr",
                "iVar6": "total_days",
                "uVar7": "is_leap_year_check",
                "iVar8": "counter",
                "iVar9": "day_offset",
                "uVar10": "is_divisible"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050e8": {
            "entrypoint": "0x000050e8",
            "current_name": "get_data_pointer_000050e8",
            "code": "\nundefined * get_data_pointer_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050e8": "get_data_pointer_000050e8"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050f4": {
            "entrypoint": "0x000050f4",
            "current_name": "get_memory_address_000050f4",
            "code": "\nundefined * get_memory_address_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050f4": "get_memory_address_000050f4"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005100": {
            "entrypoint": "0x00005100",
            "current_name": "initialize_data_00005100",
            "code": "\nvoid initializeData_00005100(void)\n\n{\n  dword offset;\n  int baseAddress;\n  char *matchingOffset;\n  int comparisonResult;\n  int processResult;\n  undefined dataType;\n  char *dataPointer;\n  bool isFirstEntry;\n  ushort *firstValuePointer;\n  int *firstOffsetPointer;\n  ushort *secondValuePointer;\n  int *secondOffsetPointer;\n  ushort value1;\n  ushort value2;\n  ushort value3;\n  ushort value4;\n  ushort value5;\n  ushort value6;\n  int tempValue;\n  char *tempPointer [2];\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  baseAddress = get_base_address_000056b0();\n  matchingOffset = (char *)find_matching_offset_000056a0(offset,&DAT_00007a5c);\n  if (matchingOffset == (char *)0x0) {\n    Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_00007a5f;\n    Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = matchingOffset;\n    DAT_1fff0ddc = matchingOffset;\n    initialize_linked_list_00005780(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (comparisonResult = compare_bytes_00004e52(), comparisonResult != 0)) {\n    initialize_linked_list_00005780(DAT_1fff0dd4);\n    comparisonResult = find_end_of_string_00005ecc(matchingOffset);\n    DAT_1fff0dd4 = allocate_memory_00004bd0(offset,comparisonResult + 1);\n    if (DAT_1fff0dd4 != 0) {\n      copy_string_00005ebc(DAT_1fff0dd4,matchingOffset);\n    }\n    if (*matchingOffset == ':') {\n      matchingOffset = matchingOffset + 1;\n    }\n    comparisonResult = process_data_00005e68(matchingOffset,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&tempValue);\n    if (0 < comparisonResult) {\n      dataPointer = matchingOffset + tempValue;\n      if (matchingOffset[tempValue] == '-') {\n        dataPointer = dataPointer + 1;\n        comparisonResult = -1;\n      }\n      else {\n        if (matchingOffset[tempValue] == '+') {\n          dataPointer = dataPointer + 1;\n        }\n        comparisonResult = 1;\n      }\n      value2 = 0;\n      value3 = 0;\n      firstValuePointer = &value2;\n      firstOffsetPointer = &tempValue;\n      secondValuePointer = &value3;\n      secondOffsetPointer = &tempValue;\n      processResult = process_data_00005e68(dataPointer,\"%hu%n:%hu%n:%hu%n\",&value1,&tempValue,&value2,&tempValue,\n                           &value3,&tempValue);\n      if (0 < processResult) {\n        *(uint *)(baseAddress + 0x28) =\n             ((uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)value3) * comparisonResult;\n        Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_1fff0dc7;\n        dataPointer = dataPointer + tempValue;\n        comparisonResult = process_data_00005e68(dataPointer,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&tempValue,firstValuePointer,firstOffsetPointer,secondValuePointer,\n                             secondOffsetPointer);\n        if (comparisonResult < 1) {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = Elf32_Rel_ARRAY_1fff0200[28].r_info;\n          DAT_1fff0ddc = *(char **)(baseAddress + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_1fff0dbc;\n          matchingOffset = dataPointer + tempValue;\n          if (dataPointer[tempValue] == '-') {\n            matchingOffset = matchingOffset + 1;\n            comparisonResult = -1;\n          }\n          else {\n            if (dataPointer[tempValue] == '+') {\n              matchingOffset = matchingOffset + 1;\n            }\n            comparisonResult = 1;\n          }\n          value1 = 0;\n          value2 = 0;\n          value3 = 0;\n          tempValue = 0;\n          processResult = process_data_00005e68(matchingOffset,\"%hu%n:%hu%n:%hu%n\",&value1,&tempValue,&value2,&tempValue,\n                               &value3,&tempValue);\n          if (processResult < 1) {\n            comparisonResult = *(int *)(baseAddress + 0x28) + -0xe10;\n          }\n          else {\n            comparisonResult = ((uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)value3) * comparisonResult;\n          }\n          *(int *)(baseAddress + 0x50) = comparisonResult;\n          matchingOffset = matchingOffset + tempValue;\n          isFirstEntry = false;\n          comparisonResult = baseAddress;\n          while( true ) {\n            if (*matchingOffset == ',') {\n              matchingOffset = matchingOffset + 1;\n            }\n            if (*matchingOffset == 'M') {\n              processResult = process_data_00005e68(matchingOffset,\"M%hu%n.%hu%n.%hu%n\",&value4,&tempValue,&value5,\n                                   &tempValue,&value6,&tempValue);\n              if (processResult != 3) {\n                return;\n              }\n              if (0xb < value4 - 1) {\n                return;\n              }\n              if (4 < value5 - 1) {\n                return;\n              }\n              if (6 < value6) {\n                return;\n              }\n              *(uint *)(comparisonResult + 0xc) = (uint)value4;\n              *(uint *)(comparisonResult + 0x10) = (uint)value5;\n              *(undefined *)(comparisonResult + 8) = 0x4d;\n              *(uint *)(comparisonResult + 0x14) = (uint)value6;\n              dataPointer = matchingOffset + tempValue;\n            }\n            else {\n              if (*matchingOffset == 'J') {\n                matchingOffset = matchingOffset + 1;\n                dataType = 0x4a;\n              }\n              else {\n                dataType = 0x44;\n              }\n              value6 = parse_integer_and_process_00005fd8(matchingOffset,tempPointer,10);\n              dataPointer = tempPointer[0];\n              if (tempPointer[0] == matchingOffset) {\n                if (isFirstEntry) {\n                  *(undefined *)(baseAddress + 0x30) = 0x4d;\n                  *(undefined4 *)(baseAddress + 0x34) = 0xb;\n                  *(undefined4 *)(baseAddress + 0x38) = 1;\n                  *(undefined4 *)(baseAddress + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(baseAddress + 8) = 0x4d;\n                  *(undefined4 *)(baseAddress + 0xc) = 3;\n                  *(undefined4 *)(baseAddress + 0x10) = 2;\n                  *(undefined4 *)(baseAddress + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(comparisonResult + 8) = dataType;\n                *(uint *)(comparisonResult + 0x14) = (uint)value6;\n              }\n            }\n            value1 = 2;\n            value2 = 0;\n            value3 = 0;\n            tempValue = 0;\n            if (*dataPointer == '/') {\n              process_data_00005e68(dataPointer,&DAT_00007a85,&value1,&tempValue,&value2,&tempValue,&value3,\n                           &tempValue);\n            }\n            *(uint *)(comparisonResult + 0x18) =\n                 (uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)value3;\n            comparisonResult = comparisonResult + 0x28;\n            matchingOffset = dataPointer + tempValue;\n            if (isFirstEntry) break;\n            isFirstEntry = true;\n          }\n          calculate_day_of_week_00004f98(*(undefined4 *)(baseAddress + 4));\n          DAT_1fff0ddc = *(char **)(baseAddress + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(baseAddress + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005100": "initialize_data_00005100",
                "dVar1": "offset",
                "iVar2": "baseAddress",
                "pcVar3": "matchingOffset",
                "iVar4": "comparisonResult",
                "iVar5": "processResult",
                "uVar6": "dataType",
                "pcVar7": "dataPointer",
                "bVar8": "isFirstEntry",
                "puVar9": "firstValuePointer",
                "piVar10": "firstOffsetPointer",
                "puVar11": "secondValuePointer",
                "piVar12": "secondOffsetPointer",
                "local_3c": "value1",
                "local_3a": "value2",
                "local_38": "value3",
                "local_36": "value4",
                "local_34": "value5",
                "local_32": "value6",
                "local_30": "tempValue",
                "local_2c": "tempPointer"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_00004e52",
                "FUN_00005e68",
                "FUN_00004bd0",
                "FUN_00005780",
                "FUN_00004f98",
                "FUN_00005fd8",
                "FUN_00005ebc",
                "FUN_000056b0",
                "FUN_000056a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005404": {
            "entrypoint": "0x00005404",
            "current_name": "process_data_00005404",
            "code": "\nuint processData_00005404(int inputPointer,uint inputValue,int *dataPointer,undefined4 paramValue)\n\n{\n  int index;\n  uint ushortValue;\n  undefined *outputPointer;\n  \n  if ((inputPointer != 0) && (*(int *)(inputPointer + 0x18) == 0)) {\n    initialize_and_process_data_000042a4();\n  }\n  if (dataPointer == &DAT_000079b8) {\n    dataPointer = *(int **)(inputPointer + 4);\n  }\n  else if (dataPointer == (int *)&DAT_000079d8) {\n    dataPointer = *(int **)(inputPointer + 8);\n  }\n  else if (dataPointer == (int *)&DAT_00007998) {\n    dataPointer = *(int **)(inputPointer + 0xc);\n  }\n  dataPointer[2] = dataPointer[6];\n  ushortValue = (uint)*(ushort *)(dataPointer + 3);\n  index = ushortValue << 0x1c;\n  if (((index < 0) && (ushortValue = dataPointer[4], ushortValue != 0)) ||\n     (index = update_data_000054a8(inputPointer,dataPointer,index,ushortValue,paramValue), index == 0)) {\n    index = *dataPointer - dataPointer[4];\n    inputValue = inputValue & 0xff;\n    if ((index < dataPointer[5]) || (index = process_and_validate_data_00004158(inputPointer,dataPointer), index == 0)) {\n      dataPointer[2] = dataPointer[2] + -1;\n      outputPointer = (undefined *)*dataPointer;\n      *dataPointer = (int)(outputPointer + 1);\n      *outputPointer = (char)inputValue;\n      if (dataPointer[5] != index + 1) {\n        if (-1 < (int)((uint)*(ushort *)(dataPointer + 3) << 0x1f)) {\n          return inputValue;\n        }\n        if (inputValue != 10) {\n          return inputValue;\n        }\n      }\n      index = process_and_validate_data_00004158(inputPointer,dataPointer);\n      if (index == 0) {\n        return inputValue;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00005404": "process_data_00005404",
                "param_1": "inputPointer",
                "param_2": "inputValue",
                "param_3": "dataPointer",
                "param_4": "paramValue",
                "iVar1": "index",
                "uVar2": "ushortValue",
                "puVar3": "outputPointer"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_000057a8",
                "FUN_00004cb4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004158",
                "FUN_000054a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000054a8": {
            "entrypoint": "0x000054a8",
            "current_name": "update_data_000054a8",
            "code": "\nuint updateData_000054a8(undefined4 *outputParam,undefined4 *inputParam)\n\n{\n  ushort ushortVal1;\n  dword dwordVal;\n  ushort ushortVal2;\n  uint uintVal1;\n  uint uintVal2;\n  \n  dwordVal = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_and_process_data_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (inputParam == &DAT_000079b8) {\n    inputParam = *(undefined4 **)(dwordVal + 4);\n  }\n  else if (inputParam == (undefined4 *)&DAT_000079d8) {\n    inputParam = *(undefined4 **)(dwordVal + 8);\n  }\n  else if (inputParam == (undefined4 *)&DAT_00007998) {\n    inputParam = *(undefined4 **)(dwordVal + 0xc);\n  }\n  uintVal1 = (uint)*(ushort *)(inputParam + 3);\n  ushortVal2 = *(ushort *)(inputParam + 3);\n  if (-1 < (int)(uintVal1 << 0x1c)) {\n    if (-1 < (int)(uintVal1 << 0x1b)) {\n      *outputParam = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(uintVal1 << 0x1d) < 0) {\n      if ((undefined4 *)inputParam[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)inputParam[0xd] != inputParam + 0x11) {\n          initialize_linked_list_00004b34(outputParam);\n        }\n        inputParam[0xd] = 0;\n      }\n      *(ushort *)(inputParam + 3) = *(ushort *)(inputParam + 3) & 0xffdb;\n      inputParam[1] = 0;\n      *inputParam = inputParam[4];\n    }\n    *(ushort *)(inputParam + 3) = *(ushort *)(inputParam + 3) | 8;\n  }\n  if ((inputParam[4] == 0) && ((*(ushort *)(inputParam + 3) & 0x280) != 0x200)) {\n    initialize_memory_allocation_00005700(outputParam,inputParam);\n  }\n  ushortVal1 = *(ushort *)(inputParam + 3);\n  uintVal1 = (uint)ushortVal1;\n  ushortVal2 = *(ushort *)(inputParam + 3);\n  uintVal2 = uintVal1 & 1;\n  if ((ushortVal1 & 1) == 0) {\n    if (-1 < (int)(uintVal1 << 0x1e)) {\n      uintVal2 = inputParam[5];\n    }\n    inputParam[2] = uintVal2;\n  }\n  else {\n    inputParam[2] = 0;\n    inputParam[6] = -inputParam[5];\n  }\n  if (inputParam[4] != 0) {\n    return 0;\n  }\n  if ((ushortVal1 & 0x80) == 0) {\n    return uintVal1 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(inputParam + 3) = ushortVal2 | 0x40;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000054a8": "update_data_000054a8",
                "param_1": "outputParam",
                "param_2": "inputParam",
                "uVar1": "ushortVal1",
                "dVar2": "dwordVal",
                "uVar3": "ushortVal2",
                "uVar4": "uintVal1",
                "uVar5": "uintVal2"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00005404",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004b34",
                "FUN_00005700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_000054a8(undefined4 *param_1,undefined4 *param_2)\n\n{\n  ushort uVar1;\n  dword dVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint uVar5;\n  \n  dVar2 = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUNC_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (param_2 == &DAT_000079b8) {\n    param_2 = *(undefined4 **)(dVar2 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_000079d8) {\n    param_2 = *(undefined4 **)(dVar2 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_00007998) {\n    param_2 = *(undefined4 **)(dVar2 + 0xc);\n  }\n  uVar4 = (uint)*(ushort *)(param_2 + 3);\n  uVar3 = *(ushort *)(param_2 + 3);\n  if (-1 < (int)(uVar4 << 0x1c)) {\n    if (-1 < (int)(uVar4 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(uVar4 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          initialize_linked_list_00004b34(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    initialize_memory_allocation_00005700(param_1,param_2);\n  }\n  uVar1 = *(ushort *)(param_2 + 3);\n  uVar4 = (uint)uVar1;\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar5 = uVar4 & 1;\n  if ((uVar1 & 1) == 0) {\n    if (-1 < (int)(uVar4 << 0x1e)) {\n      uVar5 = param_2[5];\n    }\n    param_2[2] = uVar5;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] != 0) {\n    return 0;\n  }\n  if ((uVar1 & 0x80) == 0) {\n    return uVar4 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n  return 0xffffffff;\n}\n\n"
        },
        "FUN_00005584": {
            "entrypoint": "0x00005584",
            "current_name": "divide_and_remainder_00005584",
            "code": "\nvoid divideAndRemainder_00005584(uint *quotientAndRemainder,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *quotientAndRemainder = quotient;\n  quotientAndRemainder[1] = remainder;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005584": "divide_and_remainder_00005584",
                "param_1": "quotientAndRemainder",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "calling": [
                "FUN_00004634"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000562c": {
            "entrypoint": "0x0000562c",
            "current_name": "find_matching_offset_0000562c",
            "code": "\nint findMatchingOffset_0000562c(undefined4 input,char *string,int *result)\n\n{\n  char currentCharacter;\n  int *offsetPointer;\n  int difference;\n  char *currentPosition;\n  int *currentOffsetPointer;\n  int stringOffset;\n  \n  initialize_memory_00005fec();\n  currentPosition = string;\n  if (Elf32_Rel_ARRAY_1fff0200[41].r_offset != 0) {\n    do {\n      currentCharacter = *currentPosition;\n      if (currentCharacter == '\\0') {\n        stringOffset = (int)currentPosition - (int)string;\n        offsetPointer = (int *)Elf32_Rel_ARRAY_1fff0200[41].r_offset;\n        while( true ) {\n          currentOffsetPointer = offsetPointer;\n          if (*currentOffsetPointer == 0) break;\n          difference = calculate_difference_00004e66(*currentOffsetPointer,string,stringOffset);\n          offsetPointer = currentOffsetPointer + 1;\n          if ((difference == 0) && (difference = *currentOffsetPointer, *(char *)(difference + stringOffset) == '=')) {\n            *result = (int)((int)currentOffsetPointer - Elf32_Rel_ARRAY_1fff0200[41].r_offset) >> 2;\n            initialize_memory_00005ff8(input);\n            return difference + stringOffset + 1;\n          }\n        }\n        break;\n      }\n      currentPosition = currentPosition + 1;\n    } while (currentCharacter != '=');\n  }\n  initialize_memory_00005ff8(input);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000562c": "find_matching_offset_0000562c",
                "param_1": "input",
                "param_2": "string",
                "param_3": "result",
                "cVar1": "currentCharacter",
                "piVar2": "offsetPointer",
                "iVar3": "difference",
                "pcVar4": "currentPosition",
                "piVar5": "currentOffsetPointer",
                "iVar6": "stringOffset"
            },
            "calling": [
                "FUN_000056a0"
            ],
            "called": [
                "FUN_00005ff8",
                "FUN_00004e66",
                "FUN_00005fec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056a0": {
            "entrypoint": "0x000056a0",
            "current_name": "find_matching_offset_000056a0",
            "code": "\nvoid findMatchingOffset_000056a0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 output1;\n  undefined4 output2;\n  \n  output1 = input2;\n  output2 = input3;\n  find_matching_offset_0000562c(input1,input2,&output1,input4,input1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000056a0": "find_matching_offset_000056a0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uStack_c": "output1",
                "uStack_8": "output2"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_0000562c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b0": {
            "entrypoint": "0x000056b0",
            "current_name": "get_base_address_000056b0",
            "code": "\nundefined4 getBaseAddress_000056b0(void)\n\n{\n  return 0x1fff02f0;\n}\n\n",
            "renaming": {
                "FUN_000056b0": "get_base_address_000056b0"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4",
                "FUN_00004f98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b8": {
            "entrypoint": "0x000056b8",
            "current_name": "check_and_initialize_value_000056b8",
            "code": "\nundefined4 checkAndInitializeValue_000056b8(undefined4 inputValue_1,int inputValue_2,undefined4 *outputValue_1,uint *outputValue_2)\n\n{\n  int result;\n  undefined4 returnValue;\n  undefined tempArray [4];\n  uint localValue;\n  \n  if ((*(short *)(inputValue_2 + 0xe) < 0) ||\n     (result = initialize_value_and_return_00000514(inputValue_1,(int)*(short *)(inputValue_2 + 0xe),tempArray), result < 0)) {\n    *outputValue_2 = 0;\n    if ((int)((uint)*(ushort *)(inputValue_2 + 0xc) << 0x18) < 0) {\n      returnValue = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *outputValue_2 = (uint)((localValue & 0xf000) == 0x2000);\n  }\n  returnValue = 0x400;\nLAB_000056f8:\n  *outputValue_1 = returnValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000056b8": "check_and_initialize_value_000056b8",
                "param_1": "inputValue_1",
                "param_2": "inputValue_2",
                "param_3": "outputValue_1",
                "param_4": "outputValue_2",
                "iVar1": "result",
                "uVar2": "returnValue",
                "auStack_68": "tempArray",
                "local_64": "localValue"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [
                "FUN_00000514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005700": {
            "entrypoint": "0x00005700",
            "current_name": "initialize_memory_allocation_00005700",
            "code": "\nvoid initializeMemoryAllocation_00005700(int dataIndex,int *dataPtr)\n\n{\n  ushort value;\n  int memoryAllocationResult;\n  int size;\n  int *paramPtr;\n  \n  if (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x1e)) {\n    size = dataIndex;\n    paramPtr = dataPtr;\n    value = check_and_initialize_value_000056b8(dataIndex,dataPtr,&size,&paramPtr);\n    memoryAllocationResult = allocate_memory_00004bd0(dataIndex,size);\n    if (memoryAllocationResult != 0) {\n      *(undefined **)(dataIndex + 0x28) = &DAT_0000423d;\n      *dataPtr = memoryAllocationResult;\n      *(ushort *)(dataPtr + 3) = *(ushort *)(dataPtr + 3) | 0x80;\n      dataPtr[5] = size;\n      dataPtr[4] = memoryAllocationResult;\n      if ((paramPtr != (int *)0x0) &&\n         (memoryAllocationResult = check_param_00000534(dataIndex,(int)*(short *)((int)dataPtr + 0xe)), memoryAllocationResult != 0)) {\n        *(ushort *)(dataPtr + 3) = *(ushort *)(dataPtr + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(dataPtr + 3) = value | *(ushort *)(dataPtr + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(dataPtr + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(dataPtr + 3) = *(ushort *)(dataPtr + 3) & 0xfffc | 2;\n  }\n  *dataPtr = (int)dataPtr + 0x47;\n  dataPtr[4] = (int)dataPtr + 0x47;\n  dataPtr[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005700": "initialize_memory_allocation_00005700",
                "param_1": "dataIndex",
                "param_2": "dataPtr",
                "uVar1": "value",
                "iVar2": "memoryAllocationResult",
                "local_18": "size",
                "local_14": "paramPtr"
            },
            "calling": [
                "FUN_000054a8",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_000056b8",
                "FUN_00000534"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005780": {
            "entrypoint": "0x00005780",
            "current_name": "initialize_linked_list_00005780",
            "code": "\nvoid initializeLinkedList_00005780(undefined4 newParam)\n\n{\n  initialize_linked_list_00004b34(linkedArray[16].offset,newParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005780": "initialize_linked_list_00005780",
                "param_1": "newParam",
                "Elf32_Rel_ARRAY_1fff0200": "linkedArray",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005790": {
            "entrypoint": "0x00005790",
            "current_name": "initialize_data_00005790",
            "code": "\nvoid initializeData_00005790(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005790": "initialize_data_00005790"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000579c": {
            "entrypoint": "0x0000579c",
            "current_name": "initialize_data_0000579c",
            "code": "\nvoid initializeData_0000579c(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000579c": "initialize_data_0000579c"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057a8": {
            "entrypoint": "0x000057a8",
            "current_name": "process_data_000057a8",
            "code": "\nint process_data_000057a8(undefined4 input_status,int data,undefined4 *data_array)\n\n{\n  int array_index;\n  undefined *current_byte;\n  \n  array_index = data_array[2] + -1;\n  data_array[2] = array_index;\n  if ((array_index < 0) && ((array_index < (int)data_array[6] || (data == 10)))) {\n    array_index = process_data_000057a8_00005404();\n    return array_index;\n  }\n  current_byte = (undefined *)*data_array;\n  *data_array = current_byte + 1;\n  *current_byte = (char)data;\n  return data;\n}\n\n",
            "renaming": {
                "FUN_000057a8": "process_data_000057a8",
                "param_1": "input_status",
                "param_2": "data",
                "param_3": "data_array",
                "iVar1": "array_index",
                "puVar2": "current_byte"
            },
            "calling": [
                "FUN_000057d2"
            ],
            "called": [
                "FUN_00005404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057d2": {
            "entrypoint": "0x000057d2",
            "current_name": "process_data_000057d2",
            "code": "\nint process_data_000057d2(undefined4 input1,undefined4 input2,undefined *data,int size)\n\n{\n  int result;\n  undefined *end_ptr;\n  int count;\n  \n  end_ptr = data + size;\n  count = size;\n  do {\n    if (data == end_ptr) {\n      return 0;\n    }\n    result = process_data_000057d2_000057a8(input1,*data,input2,size,count);\n    size = result + 1;\n    data = data + 1;\n  } while (size != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000057d2": "process_data_000057d2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "param_4": "size",
                "iVar1": "result",
                "puVar2": "end_ptr",
                "iVar3": "count"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000057a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057f8": {
            "entrypoint": "0x000057f8",
            "current_name": "process_data_000057f8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint processData_000057f8(int input,undefined4 *dataPtr,byte *inputData,int *outputPtr)\n\n{\n  int result;\n  int numBytes;\n  int *outputPtrTemp;\n  bool isDigit;\n  byte *currentByte;\n  int unaff_r7;\n  byte *nextByte;\n  int *outputPtr;\n  uint flags;\n  int precision;\n  undefined4 unusedStackVar;\n  int output;\n  int totalBytes;\n  byte formatSpecifier;\n  undefined spaceFlag;\n  undefined plusFlag;\n  undefined hashFlag;\n  undefined4 unusedVar;\n  \n  if ((input != 0) && (*(int *)(input + 0x18) == 0)) {\n    initialize_and_process_data_000042a4();\n  }\n  if (dataPtr == &DAT_000079b8) {\n    dataPtr = *(undefined4 **)(input + 4);\n  }\n  else if (dataPtr == (undefined4 *)&DAT_000079d8) {\n    dataPtr = *(undefined4 **)(input + 8);\n  }\n  else if (dataPtr == (undefined4 *)&DAT_00007998) {\n    dataPtr = *(undefined4 **)(input + 0xc);\n  }\n  if ((-1 < (int)(dataPtr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x16))) {\n    FUNC_000045e8(dataPtr[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x1c)) || (dataPtr[4] == 0)) &&\n     (result = update_data_000054a8(input,dataPtr), result != 0)) {\n    if ((-1 < (int)(dataPtr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x16)))\n    {\n      FUNC_000045ec(dataPtr[0x16]);\n    }\n    return -1;\n  }\n  totalBytes = 0;\n  spaceFlag = 0x20;\n  plusFlag = 0x30;\n  nextByte = inputData;\n  outputPtr = outputPtr;\nLAB_0000588e:\n  currentByte = nextByte;\n  if (*currentByte != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  nextByte = currentByte + 1;\n  if (*currentByte == 0x25) {\nLAB_0000589a:\n    result = (int)currentByte - (int)inputData;\n    if (result != 0) {\n      numBytes = process_data_000057d2(input,dataPtr,inputData,result);\n      if (numBytes == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(dataPtr[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x16))) {\n          FUNC_000045ec(dataPtr[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(dataPtr + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return totalBytes;\n      }\n      totalBytes = totalBytes + result;\n    }\n    if (*currentByte == 0) goto LAB_00005a06;\n    precision = -1;\n    unusedStackVar = 0;\n    flags = 0;\n    output = 0;\n    hashFlag = 0;\n    unusedVar = 0;\n    nextByte = currentByte + 1;\n    while( true ) {\n      currentByte = nextByte + 1;\n      result = find_byte_sequence_00006010(\"#-0+ \",*nextByte,5);\n      if (result == 0) break;\n      flags = 1 << (result - 0x7bfcU & 0xff) | flags;\n      nextByte = currentByte;\n    }\n    if ((int)(flags << 0x1b) < 0) {\n      hashFlag = 0x20;\n    }\n    if ((int)(flags << 0x1c) < 0) {\n      hashFlag = 0x2b;\n    }\n    if (*nextByte == 0x2a) {\n      outputPtrTemp = outputPtr + 1;\n      output = *outputPtr;\n      outputPtr = outputPtrTemp;\n      if (output < 0) {\n        output = -output;\n        flags = flags | 2;\n      }\n    }\n    else {\n      isDigit = false;\n      result = output;\n      currentByte = nextByte;\n      while( true ) {\n        if (9 < *currentByte - 0x30) break;\n        result = result * 10 + (*currentByte - 0x30);\n        isDigit = true;\n        currentByte = currentByte + 1;\n      }\n      if (isDigit) {\n        output = result;\n      }\n    }\n    if (*currentByte == 0x2e) {\n      if (currentByte[1] == 0x2a) {\n        precision = *outputPtr;\n        if (precision < 0) {\n          precision = -1;\n        }\n        currentByte = currentByte + 2;\n        outputPtr = outputPtr + 1;\n      }\n      else {\n        isDigit = false;\n        precision = 0;\n        result = 0;\n        while( true ) {\n          currentByte = currentByte + 1;\n          if (9 < *currentByte - 0x30) break;\n          result = result * 10 + (*currentByte - 0x30);\n          isDigit = true;\n        }\n        if (isDigit) {\n          precision = result;\n        }\n      }\n    }\n    result = find_byte_sequence_00006010(&DAT_00007c02,*currentByte,3);\n    if (result != 0) {\n      flags = flags | 0x40 << (result - 0x7c02U & 0xff);\n      currentByte = currentByte + 1;\n    }\n    inputData = currentByte + 1;\n    formatSpecifier = *currentByte;\n    result = find_byte_sequence_00006010(\"efgEFG\",formatSpecifier,6);\n    if (result == 0) {\n      unaff_r7 = format_data_00005b34(input,&flags,dataPtr,0x57d3,&outputPtr);\n      if (unaff_r7 == -1) goto LAB_00005a06;\n    }\n    else {\n      outputPtr = (int *)(((int)outputPtr + 7U & 0xfffffff8) + 8);\n    }\n    totalBytes = totalBytes + unaff_r7;\n    nextByte = inputData;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "renaming": {
                "FUN_000057f8": "process_data_000057f8",
                "param_1": "input",
                "param_2": "dataPtr",
                "param_3": "inputData",
                "param_4": "outputPtr",
                "iVar1": "result",
                "iVar2": "numBytes",
                "piVar3": "outputPtrTemp",
                "bVar4": "isDigit",
                "pbVar5": "currentByte",
                "pbVar6": "nextByte",
                "local_8c": "outputPtr",
                "local_88": "flags",
                "local_84": "precision",
                "uStack_80": "unusedStackVar",
                "local_7c": "output",
                "local_74": "totalBytes",
                "local_70": "formatSpecifier",
                "local_6f": "spaceFlag",
                "local_6e": "plusFlag",
                "local_45": "hashFlag",
                "local_30": "unusedVar"
            },
            "calling": [
                "FUN_00004c84"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057d2",
                "FUN_00005b34",
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_00006010",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005a58": {
            "entrypoint": "0x00005a58",
            "current_name": "process_data_00005a58",
            "code": "\nundefined4\nprocessData_00005a58(undefined4 input,uint *data,uint *output,undefined4 param,code *callback)\n\n{\n  int index;\n  undefined4 result;\n  int temp1;\n  uint temp2;\n  uint temp3;\n  bool check;\n  \n  temp2 = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    temp2 = data[2];\n  }\n  *output = temp2;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output = temp2 + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *output); index = index + 1) {\n      temp1 = (*callback)(input,param,(int)data + 0x19,1);\n      if (temp1 == -1) goto LAB_00005afc;\n    }\n  }\n  temp2 = (uint)*(byte *)((int)data + 0x43);\n  if (temp2 != 0) {\n    temp2 = 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + temp2 + 0x43) = 0x30;\n    *(undefined *)((int)data + temp2 + 0x44) = *(undefined *)((int)data + 0x45);\n    temp2 = temp2 + 2;\n  }\n  index = (*callback)(input,param,(int)data + 0x43,temp2);\n  if (index == -1) {\nLAB_00005afc:\n    result = 0xffffffff;\n  }\n  else {\n    temp2 = data[3];\n    check = (*data & 6) == 4;\n    if (check) {\n      temp2 = temp2 - *output;\n    }\n    if (check) {\n      temp2 = temp2 & ~((int)temp2 >> 0x1f);\n    }\n    else {\n      temp2 = 0;\n    }\n    if ((int)data[4] < (int)data[2]) {\n      temp2 = temp2 + (data[2] - data[4]);\n    }\n    for (temp3 = 0; temp2 != temp3; temp3 = temp3 + 1) {\n      index = (*callback)(input,param,(int)data + 0x1a,1);\n      if (index == -1) goto LAB_00005afc;\n    }\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00005a58": "process_data_00005a58",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "index",
                "uVar2": "result",
                "iVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "bVar6": "check"
            },
            "calling": [
                "FUN_00005b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005b34": {
            "entrypoint": "0x00005b34",
            "current_name": "format_data_00005b34",
            "code": "\ncode * formatData_00005b34(undefined4 inputVariable1,uint *inputVariable2,undefined4 inputVariable3,code *inputVariable4,uint **inputVariable5\n                   )\n\n{\n  bool isPositive;\n  byte byteValue;\n  int intValue1;\n  code *outputFunction;\n  char *hexCharacters;\n  int intValue2;\n  char *stringValue;\n  uint uintValue1;\n  uint *ptrInputVar;\n  uint uintValue2;\n  uint **ptrPtrInputVar;\n  char **ptrPtrCharVar;\n  uint uintValue3;\n  char *ptrCharVar1;\n  code *localFunctionVar;\n  \n  byteValue = *(byte *)(inputVariable2 + 6);\n  stringValue = (char *)((int)inputVariable2 + 0x43);\n  localFunctionVar = inputVariable4;\n  if (0x78 < byteValue) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)inputVariable2 + 0x42) = byteValue;\nLAB_00005bdc:\n    stringValue = (char *)((int)inputVariable2 + 0x42);\n    uintValue1 = 1;\nLAB_00005d28:\n    inputVariable2[4] = uintValue1;\n    *(undefined *)((int)inputVariable2 + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (byteValue < 99) {\n    if (byteValue == 0) goto LAB_00005d06;\n    if (byteValue == 0x58) {\n      hexCharacters = \"0123456789ABCDEF\";\n      *(undefined *)((int)inputVariable2 + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(byteValue) {\n  case 99:\n    uintValue1 = **inputVariable5;\n    *inputVariable5 = *inputVariable5 + 1;\n    *(char *)((int)inputVariable2 + 0x42) = (char)uintValue1;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    uintValue2 = *inputVariable2;\n    ptrInputVar = *inputVariable5;\n    if ((int)(uintValue2 << 0x18) < 0) {\n      uintValue1 = *ptrInputVar;\n      *inputVariable5 = ptrInputVar + 1;\n    }\n    else {\n      uintValue1 = *ptrInputVar;\n      *inputVariable5 = ptrInputVar + 1;\n      if ((uintValue2 & 0x40) != 0) {\n        uintValue1 = (uint)(short)uintValue1;\n      }\n    }\n    if ((int)uintValue1 < 0) {\n      uintValue1 = -uintValue1;\n      *(undefined *)((int)inputVariable2 + 0x43) = 0x2d;\n    }\n    hexCharacters = \"0123456789ABCDEF\";\n    uintValue2 = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    ptrPtrInputVar = (uint **)*inputVariable5;\n    uintValue2 = *inputVariable2;\n    uintValue1 = inputVariable2[5];\n    *inputVariable5 = (uint *)(ptrPtrInputVar + 1);\n    ptrInputVar = *ptrPtrInputVar;\n    if (((int)(uintValue2 << 0x18) < 0) || (-1 < (int)(uintValue2 << 0x19))) {\n      *ptrInputVar = uintValue1;\n    }\n    else {\n      *(short *)ptrInputVar = (short)uintValue1;\n    }\nLAB_00005d06:\n    inputVariable2[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    ptrInputVar = *inputVariable5;\n    uintValue1 = *inputVariable2;\n    *inputVariable5 = ptrInputVar + 1;\n    if (((int)(uintValue1 << 0x18) < 0) || (-1 < (int)(uintValue1 << 0x19))) {\n      uintValue1 = *ptrInputVar;\n    }\n    else {\n      uintValue1 = (uint)*(ushort *)ptrInputVar;\n    }\n    hexCharacters = \"0123456789ABCDEF\";\n    if (byteValue == 0x6f) {\n      uintValue2 = 8;\n    }\n    else {\n      uintValue2 = 10;\n    }\n    break;\n  case 0x70:\n    *inputVariable2 = *inputVariable2 | 0x20;\n  case 0x78:\n    hexCharacters = \"0123456789abcdef\";\n    *(undefined *)((int)inputVariable2 + 0x45) = 0x78;\nLAB_00005ca8:\n    uintValue2 = *inputVariable2;\n    uintValue1 = **inputVariable5;\n    *inputVariable5 = *inputVariable5 + 1;\n    if ((-1 < (int)(uintValue2 << 0x18)) && ((int)(uintValue2 << 0x19) < 0)) {\n      uintValue1 = uintValue1 & 0xffff;\n    }\n    if ((int)(uintValue2 << 0x1f) < 0) {\n      *inputVariable2 = uintValue2 | 0x20;\n    }\n    if (uintValue1 == 0) {\n      *inputVariable2 = *inputVariable2 & 0xffffffdf;\n    }\n    uintValue2 = 0x10;\n    break;\n  case 0x73:\n    ptrPtrCharVar = (char **)*inputVariable5;\n    *inputVariable5 = (uint *)(ptrPtrCharVar + 1);\n    stringValue = *ptrPtrCharVar;\n    intValue1 = find_byte_sequence_00006010(stringValue,0,inputVariable2[1],ptrPtrCharVar,inputVariable1,inputVariable2,inputVariable3);\n    if (intValue1 != 0) {\n      inputVariable2[1] = intValue1 - (int)stringValue;\n    }\n    uintValue1 = inputVariable2[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)inputVariable2 + 0x43) = 0;\nLAB_00005c36:\n  uintValue3 = inputVariable2[1];\n  inputVariable2[2] = uintValue3;\n  if (-1 < (int)uintValue3) {\n    *inputVariable2 = *inputVariable2 & 0xfffffffb;\n  }\n  ptrCharVar1 = stringValue;\n  if ((uintValue1 != 0) || (uintValue3 != 0)) {\n    do {\n      ptrCharVar1 = ptrCharVar1 + -1;\n      *ptrCharVar1 = hexCharacters[uintValue1 - uintValue2 * (uintValue1 / uintValue2)];\n      isPositive = uintValue2 <= uintValue1;\n      uintValue1 = uintValue1 / uintValue2;\n    } while (isPositive);\n  }\n  if (((uintValue2 == 8) && ((int)(*inputVariable2 << 0x1f) < 0)) && ((int)inputVariable2[1] <= (int)inputVariable2[4])) {\n    ptrCharVar1[-1] = '0';\n    ptrCharVar1 = ptrCharVar1 + -1;\n  }\n  inputVariable2[4] = (int)stringValue - (int)ptrCharVar1;\n  stringValue = ptrCharVar1;\nLAB_00005c84:\n  intValue1 = process_data_00005a58(inputVariable1,inputVariable2,&localFunctionVar,inputVariable3,inputVariable4);\n  if ((intValue1 == -1) || (intValue1 = (*inputVariable4)(inputVariable1,inputVariable3,stringValue,inputVariable2[4]), intValue1 == -1)) {\nLAB_00005c98:\n    outputFunction = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*inputVariable2 << 0x1e) < 0) {\n      for (intValue1 = 0; intValue1 < (int)(inputVariable2[3] - (int)localFunctionVar); intValue1 = intValue1 + 1) {\n        intValue2 = (*inputVariable4)(inputVariable1,inputVariable3,(int)inputVariable2 + 0x19,1);\n        if (intValue2 == -1) goto LAB_00005c98;\n      }\n    }\n    outputFunction = (code *)inputVariable2[3];\n    if ((int)(code *)inputVariable2[3] < (int)localFunctionVar) {\n      outputFunction = localFunctionVar;\n    }\n  }\n  return outputFunction;\n}\n\n",
            "renaming": {
                "FUN_00005b34": "format_data_00005b34",
                "param_1": "inputVariable1",
                "param_2": "inputVariable2",
                "param_3": "inputVariable3",
                "param_4": "inputVariable4",
                "param_5": "inputVariable5",
                "bVar1": "isPositive",
                "bVar2": "byteValue",
                "iVar3": "intValue1",
                "pcVar4": "outputFunction",
                "pcVar5": "hexCharacters",
                "iVar6": "intValue2",
                "pcVar7": "stringValue",
                "puVar9": "ptrInputVar",
                "uVar8": "uintValue1",
                "uVar10": "uintValue2",
                "uVar13": "uintValue3",
                "ppuVar11": "ptrPtrInputVar",
                "ppcVar12": "ptrPtrCharVar",
                "pcVar14": "ptrCharVar1",
                "local_24": "localFunctionVar"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00006010",
                "FUN_00005a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e10": {
            "entrypoint": "0x00005e10",
            "current_name": "process_data_00005e10",
            "code": "\nuint processData_00005e10(int inputPtr,byte **dataPtr)\n\n{\n  int result;\n  uint output;\n  byte *bytePtr;\n  \n  if ((inputPtr != 0) && (*(int *)(inputPtr + 0x18) == 0)) {\n    initialize_and_process_data_000042a4();\n  }\n  if (dataPtr == (byte **)&DAT_000079b8) {\n    dataPtr = *(byte ***)(inputPtr + 4);\n  }\n  else if (dataPtr == (byte **)&DAT_000079d8) {\n    dataPtr = *(byte ***)(inputPtr + 8);\n  }\n  else if (dataPtr == (byte **)&DAT_00007998) {\n    dataPtr = *(byte ***)(inputPtr + 0xc);\n  }\n  result = process_data_00006768(inputPtr,dataPtr);\n  if (result == 0) {\n    dataPtr[1] = dataPtr[1] + -1;\n    bytePtr = *dataPtr;\n    *dataPtr = bytePtr + 1;\n    output = (uint)*bytePtr;\n  }\n  else {\n    output = 0xffffffff;\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_00005e10": "process_data_00005e10",
                "param_1": "inputPtr",
                "param_2": "dataPtr",
                "iVar1": "result",
                "uVar2": "output",
                "pbVar3": "bytePtr"
            },
            "calling": [
                "FUN_00004418"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00006768"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e68": {
            "entrypoint": "0x00005e68",
            "current_name": "process_data_00005e68",
            "code": "\nvoid processData_00005e68(undefined4 inputParam,undefined4 outputParam,undefined4 dataParam1,undefined4 dataParam2)\n\n{\n  undefined4 inputVar1;\n  undefined4 stringEnd;\n  undefined2 stringLength;\n  undefined2 constantValue;\n  undefined4 inputVar2;\n  undefined4 inputVar3;\n  undefined *stringPointer;\n  undefined4 counterVar1;\n  undefined4 counterVar2;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  stringLength = 0x204;\n  inputVar1 = inputParam;\n  inputVar2 = inputParam;\n  uStack_8 = dataParam1;\n  uStack_4 = dataParam2;\n  stringEnd = find_end_of_string_00005ecc();\n  stringPointer = &LAB_00004dea_1;\n  counterVar1 = 0;\n  counterVar2 = 0;\n  constantValue = 0xffff;\n  inputVar3 = stringEnd;\n  process_data_000061cc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,&inputVar1,outputParam,&uStack_8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005e68": "process_data_00005e68",
                "param_1": "inputParam",
                "param_2": "outputParam",
                "param_3": "dataParam1",
                "param_4": "dataParam2",
                "local_80": "inputVar1",
                "local_7c": "stringEnd",
                "local_74": "stringLength",
                "local_72": "constantValue",
                "local_70": "inputVar2",
                "local_6c": "inputVar3",
                "local_5c": "stringPointer",
                "local_4c": "counterVar1",
                "local_38": "counterVar2"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_000061cc",
                "FUN_00005ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "entrypoint": "0x00005ebc",
            "current_name": "copy_string_00005ebc",
            "code": "\nvoid copyString_00005ebc(char *destination,char *source)\n\n{\n  char currentChar;\n  \n  do {\n    currentChar = *source;\n    *destination = currentChar;\n    source = source + 1;\n    destination = destination + 1;\n  } while (currentChar != '\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "entrypoint": "0x00005ecc",
            "current_name": "find_end_of_string_00005ecc",
            "code": "\nchar * find_end_of_string_00005ecc(char *input_string)\n\n{\n  char current_char_value;\n  char *next_char;\n  char *current_char;\n  \n  current_char = input_string;\n  do {\n    next_char = current_char + 1;\n    current_char_value = *current_char;\n    current_char = next_char;\n  } while (current_char_value != '\\0');\n  return next_char + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_00005ecc": "find_end_of_string_00005ecc",
                "param_1": "input_string",
                "pcVar3": "current_char",
                "pcVar2": "next_char",
                "cVar1": "current_char_value"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00005e68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005edc": {
            "entrypoint": "0x00005edc",
            "current_name": "parse_integer_00005edc",
            "code": "\nuint parseInteger_00005edc(undefined4 *result,byte *input,byte **endPtr,uint base)\n\n{\n  uint value;\n  uint ch;\n  byte negative;\n  int isValid;\n  uint digit;\n  uint maxDigit;\n  byte *ptr;\n  byte *current;\n  \n  current = input;\n  do {\n    ptr = current;\n    current = ptr + 1;\n    ch = (uint)*ptr;\n    negative = (&DAT_00007a99)[ch] & 8;\n  } while (((&DAT_00007a99)[ch] & 8) != 0);\n  if (ch == 0x2d) {\n    ch = (uint)*current;\n    negative = 1;\n    current = ptr + 2;\n  }\n  else if (ch == 0x2b) {\n    ch = (uint)*current;\n    current = ptr + 2;\n  }\n  if (base == 0) {\n    if (ch != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (ch != 0x30)) goto LAB_00005f26;\n  if ((*current & 0xdf) == 0x58) {\n    ch = (uint)current[1];\n    base = 0x10;\n    current = current + 2;\n  }\n  else {\n    ch = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  isValid = 0;\n  maxDigit = 0xffffffff / base;\n  value = 0;\n  do {\n    digit = ch - 0x30;\n    if (9 < digit) {\n      if (ch - 0x41 < 0x1a) {\n        digit = ch - 0x37;\n      }\n      else {\n        if (0x19 < ch - 0x61) break;\n        digit = ch - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit) break;\n    if (((isValid < 0) || (maxDigit < value)) ||\n       ((maxDigit == value && ((int)~(base * maxDigit) < (int)digit)))) {\n      isValid = -1;\n    }\n    else {\n      value = value * base + digit;\n      isValid = 1;\n    }\n    ch = (uint)*current;\n    current = current + 1;\n  } while( true );\n  if (isValid < 0) {\n    *result = 0x22;\n    value = 0xffffffff;\n    if (endPtr == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (negative != 0) {\n      value = -value;\n    }\n    if (endPtr == (byte **)0x0) {\n      return value;\n    }\n    if (isValid == 0) goto LAB_00005fb8;\n  }\n  input = current + -1;\nLAB_00005fb8:\n  *endPtr = input;\n  return value;\n}\n\n",
            "renaming": {
                "FUN_00005edc": "parse_integer_00005edc",
                "param_1": "result",
                "param_2": "input",
                "param_3": "endPtr",
                "param_4": "base",
                "uVar1": "value",
                "uVar2": "ch",
                "bVar3": "negative",
                "iVar4": "isValid",
                "uVar5": "digit",
                "uVar6": "maxDigit",
                "pbVar7": "ptr",
                "pbVar8": "current"
            },
            "calling": [
                "FUN_00005fd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "entrypoint": "0x00005fd8",
            "current_name": "parse_integer_and_process_00005fd8",
            "code": "\nvoid parseIntegerAndProcess_00005fd8(undefined4 offset,undefined4 param1,undefined4 param2)\n\n{\n  parse_integer_00005edc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,offset,param1,param2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fd8": "parse_integer_and_process_00005fd8",
                "param_1": "offset",
                "param_2": "param1",
                "param_3": "param2"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005edc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fec": {
            "entrypoint": "0x00005fec",
            "current_name": "initialize_memory_00005fec",
            "code": "\nvoid initializeMemory_00005fec(void)\n\n{\n  FUNC_000045e8(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fec": "initialize_memory_00005fec"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "entrypoint": "0x00005ff8",
            "current_name": "initialize_memory_00005ff8",
            "code": "\nvoid initializeMemory_00005ff8(void)\n\n{\n  FUNC_000045ec(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ff8": "initialize_memory_00005ff8"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006010": {
            "entrypoint": "0x00006010",
            "current_name": "find_byte_sequence_00006010",
            "code": "\nbyte * find_byte_sequence_00006010(uint *data,uint target_byte,uint length)\n\n{\n  byte current_byte;\n  char flag0;\n  char flag1;\n  char flag2;\n  char flag3;\n  byte *result;\n  uint *data_ptr;\n  byte *next_byte;\n  uint remainder;\n  uint aligned_length;\n  uint xor_result0;\n  uint xor_result1;\n  bool xor_flag0;\n  bool xor_flag1;\n  bool xor_flag2;\n  bool xor_flag3;\n  \n  target_byte = target_byte & 0xff;\n  if ((int)length < 0x10) {\njoined_r0x00006070:\n    do {\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n      data_ptr = (uint *)((int)data + 1);\n      current_byte = *(byte *)data;\n      length = length - 1;\n      data = data_ptr;\n    } while (current_byte != target_byte);\n  }\n  else {\n    remainder = (uint)data & 7;\n    while( true ) {\n      if (remainder == 0) {\n        remainder = target_byte | target_byte << 8;\n        remainder = remainder | remainder << 0x10;\n        aligned_length = length & 0xfffffff8;\n        do {\n          data_ptr = data + 2;\n          aligned_length = aligned_length - 8;\n          xor_result0 = *data ^ remainder;\n          xor_result1 = data[1] ^ remainder;\n          flag0 = -((char)xor_result0 == '\\0');\n          flag1 = -((char)(xor_result0 >> 8) == '\\0');\n          flag2 = -((char)(xor_result0 >> 0x10) == '\\0');\n          flag3 = -((char)(xor_result0 >> 0x18) == '\\0');\n          xor_result0 = CONCAT13(flag3,CONCAT12(flag2,CONCAT11(flag1,flag0)));\n          xor_flag0 = (char)xor_result1 != '\\0';\n          xor_flag1 = (char)(xor_result1 >> 8) != '\\0';\n          xor_flag2 = (char)(xor_result1 >> 0x10) != '\\0';\n          xor_flag3 = (char)(xor_result1 >> 0x18) != '\\0';\n          xor_result1 = CONCAT13(xor_flag3 * flag3 - !xor_flag3,\n                            CONCAT12(xor_flag2 * flag2 - !xor_flag2,\n                                     CONCAT11(xor_flag1 * flag1 - !xor_flag1,xor_flag0 * flag0 - !xor_flag0)));\n          if (xor_result1 != 0) {\n            if (xor_result0 == 0) {\n              next_byte = (byte *)((int)data + 5);\n              xor_result0 = xor_result1;\n            }\n            else {\n              next_byte = (byte *)((int)data + 1);\n            }\n            if ((xor_result0 & 1) == 0) {\n              xor_flag0 = (xor_result0 & 0x100) == 0;\n              result = next_byte + 1;\n              if (xor_flag0) {\n                xor_flag0 = (xor_result0 & 0x18000) == 0;\n                result = next_byte + 2;\n              }\n              next_byte = result;\n              if (xor_flag0) {\n                next_byte = next_byte + 1;\n              }\n            }\n            return next_byte + -1;\n          }\n          data = data_ptr;\n        } while (aligned_length != 0);\n        length = length & 7;\n        goto joined_r0x00006070;\n      }\n      data_ptr = (uint *)((int)data + 1);\n      length = length - 1;\n      if (*(byte *)data == target_byte) break;\n      remainder = (uint)data_ptr & 7;\n      data = data_ptr;\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)data_ptr + -1);\n}\n\n",
            "renaming": {
                "FUN_00006010": "find_byte_sequence_00006010",
                "param_1": "data",
                "param_2": "target_byte",
                "param_3": "length",
                "bVar1": "current_byte",
                "cVar2": "flag0",
                "cVar3": "flag1",
                "cVar4": "flag2",
                "cVar5": "flag3",
                "pbVar6": "result",
                "puVar7": "data_ptr",
                "pbVar8": "next_byte",
                "uVar9": "remainder",
                "uVar10": "aligned_length",
                "uVar11": "xor_result0",
                "uVar12": "xor_result1",
                "bVar13": "xor_flag0",
                "bVar14": "xor_flag1",
                "bVar15": "xor_flag2",
                "bVar16": "xor_flag3"
            },
            "calling": [
                "FUN_000061cc",
                "FUN_00005b34",
                "FUN_0000656c",
                "FUN_000057f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060b0": {
            "entrypoint": "0x000060b0",
            "current_name": "copy_data_000060b0",
            "code": "\nvoid copy_data_000060b0(int dest_addr,undefined *src_addr,int size)\n\n{\n  undefined *src_ptr;\n  undefined *src_end;\n  undefined *dest_ptr;\n  \n  src_end = src_addr + size;\n  dest_ptr = (undefined *)(dest_addr + -1);\n  if (src_addr != src_end) {\n    do {\n      src_ptr = src_addr + 1;\n      dest_ptr = dest_ptr + 1;\n      *dest_ptr = *src_addr;\n      src_addr = src_ptr;\n    } while (src_ptr != src_end);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000060b0": "copy_data_000060b0",
                "param_1": "dest_addr",
                "param_2": "src_addr",
                "param_3": "size",
                "puVar1": "src_ptr",
                "puVar2": "src_end",
                "puVar3": "dest_ptr"
            },
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060cc": {
            "entrypoint": "0x000060cc",
            "current_name": "allocate_memory_or_copy_data_000060cc",
            "code": "\nint allocateMemoryOrCopyData_000060cc(undefined4 arg1,int size,uint totalSize,undefined4 arg2)\n\n{\n  int result;\n  uint sum;\n  \n  if (size != 0) {\n    if (totalSize == 0) {\n      initializeLinkedList();\n      result = 0;\n    }\n    else {\n      sum = calculateSumOfValues();\n      result = size;\n      if ((sum < totalSize) && (result = allocateMemory(arg1,totalSize), result != 0)) {\n        copyData(result,size,totalSize);\n        initializeLinkedList(arg1,size);\n      }\n    }\n    return result;\n  }\n  result = allocateMemory(arg1,totalSize,totalSize,arg2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000060cc": "allocate_memory_or_copy_data_000060cc",
                "param_1": "arg1",
                "param_2": "size",
                "param_3": "totalSize",
                "param_4": "arg2",
                "iVar1": "result",
                "uVar2": "sum",
                "initialize_linked_list_00004b34": "initializeLinkedList",
                "sum_of_values_00006964": "calculateSumOfValues",
                "allocate_memory_00004bd0": "allocateMemory",
                "copy_data_000060b0": "copyData"
            },
            "calling": [
                "FUN_000068f0"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00006964",
                "FUN_00004b34",
                "FUN_000060b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006192": {
            "entrypoint": "0x00006192",
            "current_name": "initialize_linked_list_00006192",
            "code": "\nundefined4 initializeLinkedList_00006192(undefined4 arg1,undefined4 *arg2)\n\n{\n  if ((undefined4 *)arg2[13] != (undefined4 *)0x0) {\n    if ((undefined4 *)arg2[13] != arg2 + 0x11) {\n      initialize_linked_list_00004b34();\n    }\n    arg2[1] = arg2[16];\n    arg2[13] = 0;\n    if (arg2[16] != 0) {\n      *arg2 = arg2[15];\n      return 0;\n    }\n  }\n  *arg2 = arg2[4];\n  arg2[1] = 0;\n  *(ushort *)(arg2 + 3) = *(ushort *)(arg2 + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006192": "initialize_linked_list_00006192",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_2[0xd]": "arg2[13]",
                "param_2[1]": "arg2[1]",
                "param_2[0x10]": "arg2[16]",
                "param_2[0xf]": "arg2[15]"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000061cc": {
            "entrypoint": "0x000061cc",
            "current_name": "process_data_000061cc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint processData_000061cc(undefined4 param1,byte **param2,byte *param3,int **param4)\n\n{\n  int returnValue;\n  uint firstByte;\n  byte *currentByte;\n  uint secondByte;\n  int **outputData;\n  undefined localData [256];\n  uint flag1;\n  undefined4 flag2;\n  uint tempFlag;\n  int result;\n  int counter;\n  undefined *tempData;\n  int length;\n  undefined *functionPointer;\n  code *initializeFunction;\n  \n  result = 0;\n  counter = 0;\n  functionPointer = &LAB_00006118_1;\n  initializeFunction = initialize_linked_list_00006192 + 1;\n  outputData = param4;\n  tempData = localData;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      secondByte = (uint)*param3;\n      if (secondByte == 0) {\n        return result;\n      }\n      firstByte = (byte)(&DAT_00007a99)[secondByte] & 8;\n      currentByte = param3 + 1;\n      if (((&DAT_00007a99)[secondByte] & 8) == 0) break;\n      while (((param3 = currentByte, 0 < (int)param2[1] ||\n              (returnValue = (*initializeFunction)(param1,param2), returnValue == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0))) {\n        counter = counter + 1;\n        param2[1] = param2[1] + -1;\n        *param2 = *param2 + 1;\n      }\n    }\n    if (secondByte == 0x25) break;\nLAB_00006352:\n    if (((int)param2[1] < 1) && (returnValue = (*initializeFunction)(param1,param2), returnValue != 0))\n    goto LAB_00006380;\n    if (**param2 != secondByte) {\n      return result;\n    }\n    *param2 = *param2 + 1;\n    counter = counter + 1;\n    param2[1] = param2[1] + -1;\n    param3 = currentByte;\n  }\n  tempFlag = firstByte;\n  flag1 = firstByte;\n  if (param3[1] == 0x2a) {\n    currentByte = param3 + 2;\n    flag1 = 0x10;\n  }\n  while( true ) {\n    firstByte = (uint)*currentByte;\n    if (9 < firstByte - 0x30) break;\n    currentByte = currentByte + 1;\n    tempFlag = (tempFlag * 10 + firstByte) - 0x30;\n  }\n  returnValue = find_byte_sequence_00006010(&DAT_00007c02,firstByte,3);\n  if (returnValue != 0) {\n    flag1 = 1 << (returnValue - 0x7c02U & 0xff) | flag1;\n    currentByte = currentByte + 1;\n  }\n  param3 = currentByte + 1;\n  firstByte = (uint)*currentByte;\n  if (firstByte < 0x79) {\n    if (0x57 < firstByte) {\n      switch(firstByte) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        param3 = (byte *)decode_function_0000687c(localData,param3);\n        flag1 = flag1 | 0x40;\n        length = 1;\n        break;\n      case 99:\n        flag1 = flag1 | 0x40;\n        length = 0;\n        break;\n      case 100:\n      case 0x75:\n        flag2 = 10;\nLAB_000063a0:\n        if (firstByte < 0x6f) {\n          length = 3;\n        }\n        else {\n          length = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        length = 5;\n        break;\n      case 0x69:\n        flag2 = 0;\n        length = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(flag1 << 0x1b)) {\n          if ((int)(flag1 << 0x1f) < 0) {\n            *(short *)*outputData = (short)counter;\n            outputData = outputData + 1;\n          }\n          else {\n            **outputData = counter;\n            outputData = outputData + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        flag2 = 8;\n        length = 4;\n        break;\n      case 0x70:\n        flag1 = flag1 | 0x20;\n      case 0x58:\n      case 0x78:\n        flag1 = flag1 | 0x200;\n        flag2 = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        length = 2;\n      }\nLAB_000063ac:\n      if (((int)param2[1] < 1) && (returnValue = (*initializeFunction)(param1,param2), returnValue != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(flag1 << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0) {\n          counter = counter + 1;\n          currentByte = param2[1];\n          param2[1] = currentByte + -1;\n          if ((int)(currentByte + -1) < 1) {\n            returnValue = (*initializeFunction)(param1,param2);\n            if (returnValue != 0) goto LAB_00006380;\n          }\n          else {\n            *param2 = *param2 + 1;\n          }\n        }\n      }\n      if (length < 3) {\n        returnValue = process_data_000064bc(param1,&flag1,param2,&outputData);\n      }\n      else {\n        if (4 < length) goto LAB_000061f6;\n        returnValue = decode_and_process_data_0000656c(param1,&flag1,param2,&outputData);\n      }\n      if (returnValue == 1) {\n        return result;\n      }\n      if (returnValue == 2) {\nLAB_00006380:\n        if (result == 0) {\nLAB_00006388:\n          result = -1;\n        }\n        else if ((*(ushort *)(param2 + 3) & 0x40) != 0) {\n          result = -1;\n        }\n        return result;\n      }\n      goto LAB_000061f6;\n    }\n    currentByte = param3;\n    if (firstByte == 0x25) goto LAB_00006352;\n    if (firstByte < 0x26) {\n      if (firstByte != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (firstByte - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  length = 3;\n  flag2 = 10;\n  goto LAB_000063ac;\n}\n\n",
            "renaming": {
                "FUN_000061cc": "process_data_000061cc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "returnValue",
                "uVar2": "firstByte",
                "pbVar3": "currentByte",
                "uVar4": "secondByte",
                "local_2b0": "outputData",
                "auStack_2ac": "localData",
                "local_1ac": "flag1",
                "local_1a8": "flag2",
                "local_1a4": "tempFlag",
                "local_1a0": "result",
                "local_19c": "counter",
                "local_198": "tempData",
                "local_194": "length",
                "local_30": "functionPointer",
                "local_2c": "initializeFunction"
            },
            "calling": [
                "FUN_00005e68"
            ],
            "called": [
                "FUN_0000687c",
                "FUN_00006192",
                "FUN_000064bc",
                "FUN_00006010",
                "FUN_0000656c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000064bc": {
            "entrypoint": "0x000064bc",
            "current_name": "process_data_000064bc",
            "code": "\nundefined4 process_data_000064bc(undefined4 input_param,uint *data_array,byte **byte_array,undefined4 *output_param)\n\n{\n  int result;\n  uint temp_var;\n  byte **byte_ptr_array;\n  byte *byte_ptr_1;\n  byte *byte_ptr_2;\n  byte *byte_ptr_3;\n  int iteration_counter;\n  \n  if (data_array[2] == 0) {\n    if (data_array[6] == 0) {\n      temp_var = 1;\n    }\n    else {\n      temp_var = 0xffffffff;\n    }\n    data_array[2] = temp_var;\n  }\n  if (-1 < (int)(*data_array << 0x1b)) {\n    byte_ptr_array = (byte **)*output_param;\n    *output_param = byte_ptr_array + 1;\n    byte_ptr_2 = *byte_ptr_array;\n  }\n  iteration_counter = 0;\n  do {\n    temp_var = data_array[6];\n    if (temp_var != 0) {\n      if (temp_var == 1) {\n        if (*(char *)(data_array[5] + (uint)**byte_array) == '\\0') {\n          if (iteration_counter == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*data_array & 0x10) == 0) && (data_array[3] = data_array[3] + 1, data_array[6] != 0)) {\n            *byte_ptr_2 = 0;\n          }\n          data_array[4] = iteration_counter + data_array[4];\n          return 0;\n        }\n      }\n      else if ((temp_var != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**byte_array] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    byte_ptr_3 = byte_ptr_2;\n    if (-1 < (int)(*data_array << 0x1b)) {\n      byte_ptr_3 = byte_ptr_2 + 1;\n      *byte_ptr_2 = **byte_array;\n    }\n    byte_ptr_1 = byte_array[1];\n    *byte_array = *byte_array + 1;\n    temp_var = data_array[2] - 1;\n    byte_array[1] = byte_ptr_1 + -1;\n    iteration_counter = iteration_counter + 1;\n    data_array[2] = temp_var;\n    byte_ptr_2 = byte_ptr_3;\n    if ((temp_var == 0) ||\n       (((int)(byte_ptr_1 + -1) < 1 &&\n        (result = (*(code *)data_array[0x60])(input_param,byte_array,temp_var,(code *)data_array[0x60],output_param),\n        result != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "input_param",
                "param_2": "data_array",
                "param_3": "byte_array",
                "param_4": "output_param",
                "iVar1": "result",
                "uVar2": "temp_var",
                "ppbVar3": "byte_ptr_array",
                "pbVar4": "byte_ptr_1",
                "unaff_r6": "byte_ptr_2",
                "pbVar5": "byte_ptr_3",
                "iVar6": "iteration_counter"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000656c": {
            "entrypoint": "0x0000656c",
            "current_name": "decode_and_process_data_0000656c",
            "code": "\nundefined4 decode_and_process_data_0000656c(undefined4 input_param,uint *flags,byte **data_ptr,undefined4 *output_ptr)\n\n{\n  int result;\n  undefined4 return_value;\n  code *process_function;\n  uint count;\n  byte *byte_ptr;\n  uint original_count;\n  undefined4 *output_ptr_casted;\n  uint *updated_data_ptr;\n  uint *temp_ptr_1;\n  uint *temp_ptr_2;\n  int temp_var;\n  int loop_counter;\n  undefined *lookup_table [4];\n  \n  lookup_table[0] = &DAT_00007c2f;\n  lookup_table[1] = &DAT_00007c32;\n  lookup_table[2] = &DAT_00007c35;\n  process_function = (code *)&UNK_00004f81;\n  if (flags[6] != 3) {\n    process_function = (code *)&UNK_00005fd5;\n  }\n  original_count = flags[2];\n  count = original_count - 1;\n  if (0x15c < count) {\n    temp_var = original_count - 0x15d;\n    original_count = 0x15d;\n  }\n  if (0x15c < count) {\n    flags[2] = original_count;\n  }\n  temp_ptr_2 = flags + 7;\n  if (count < 0x15d) {\n    temp_var = 0;\n  }\n  *flags = *flags | 0xd00;\n  loop_counter = 0;\n  temp_ptr_1 = temp_ptr_2;\n  do {\n    result = find_byte_sequence_00006010(lookup_table[loop_counter],**data_ptr,2);\n    if (result != 0) {\n      if (loop_counter == 1) {\n        if (flags[1] == 0) {\n          flags[1] = 8;\n          *flags = *flags | 0x200;\n        }\n        count = *flags & 0xfffffaff;\nLAB_000065f4:\n        *flags = count;\n      }\n      else if (loop_counter == 2) {\n        if ((*flags & 0x600) != 0x200) goto LAB_00006624;\n        flags[1] = 0x10;\n        count = *flags | 0x100;\n        goto LAB_000065f4;\n      }\n      count = flags[2];\n      flags[2] = count - 1;\n      if (count != 0) {\n        byte_ptr = *data_ptr;\n        *data_ptr = byte_ptr + 1;\n        updated_data_ptr = (uint *)((int)temp_ptr_1 + 1);\n        *(byte *)temp_ptr_1 = *byte_ptr;\n        byte_ptr = data_ptr[1];\n        data_ptr[1] = byte_ptr + -1;\n        temp_ptr_1 = updated_data_ptr;\n        if (((int)(byte_ptr + -1) < 1) &&\n           (result = (*(code *)flags[0x60])(input_param,data_ptr), result != 0)) {\n          loop_counter = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    loop_counter = loop_counter + 1;\n  } while (loop_counter != 3);\n  if (flags[1] == 0) {\n    flags[1] = 10;\n  }\n  decode_function_0000687c(flags[5],\"01234567]\" + (8 - flags[1]));\n  loop_counter = 0;\n  while( true ) {\n    updated_data_ptr = temp_ptr_1;\n    if (flags[2] == 0) break;\n    byte_ptr = *data_ptr;\n    count = (uint)*byte_ptr;\n    if (*(char *)(flags[5] + count) == '\\0') break;\n    if ((count == 0x30) && ((int)(*flags << 0x14) < 0)) {\n      loop_counter = loop_counter + 1;\n      if (temp_var != 0) {\n        temp_var = temp_var + -1;\n        flags[2] = flags[2] + 1;\n      }\n    }\n    else {\n      *flags = *flags & 0xfffff6ff;\n      updated_data_ptr = (uint *)((int)temp_ptr_1 + 1);\n      *(byte *)temp_ptr_1 = *byte_ptr;\n    }\n    byte_ptr = data_ptr[1];\n    data_ptr[1] = byte_ptr + -1;\n    if ((int)(byte_ptr + -1) < 1) {\n      result = (*(code *)flags[0x60])(input_param,data_ptr);\n      if (result != 0) break;\n    }\n    else {\n      *data_ptr = *data_ptr + 1;\n    }\n    flags[2] = flags[2] - 1;\n    temp_ptr_1 = updated_data_ptr;\n  }\nLAB_000066ca:\n  if ((int)(*flags << 0x17) < 0) {\n    if (temp_ptr_2 < updated_data_ptr) {\n      (*(code *)flags[0x5f])(input_param,*(byte *)((int)updated_data_ptr + -1),data_ptr);\n      updated_data_ptr = (uint *)((int)updated_data_ptr + -1);\n    }\n    if (updated_data_ptr == temp_ptr_2) {\n      return 1;\n    }\n  }\n  if ((*flags & 0x10) == 0) {\n    *(byte *)updated_data_ptr = 0;\n    return_value = (*process_function)(input_param,temp_ptr_2,0,flags[1]);\n    output_ptr_casted = (undefined4 *)*output_ptr;\n    count = *flags;\n    *output_ptr = output_ptr_casted + 1;\n    output_ptr_casted = (undefined4 *)*output_ptr_casted;\n    if ((count & 0x20) == 0) {\n      if ((int)(count << 0x1f) < 0) {\n        *(short *)output_ptr_casted = (short)return_value;\n      }\n      else {\n        *output_ptr_casted = return_value;\n      }\n    }\n    else {\n      *output_ptr_casted = return_value;\n    }\n    flags[3] = flags[3] + 1;\n  }\n  flags[4] = (uint)((int)updated_data_ptr + flags[4] + (loop_counter - (int)temp_ptr_2));\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000656c": "decode_and_process_data_0000656c",
                "param_1": "input_param",
                "param_2": "flags",
                "param_3": "data_ptr",
                "param_4": "output_ptr",
                "iVar1": "result",
                "uVar2": "return_value",
                "pcVar3": "process_function",
                "uVar4": "count",
                "pbVar5": "byte_ptr",
                "uVar6": "original_count",
                "puVar7": "output_ptr_casted",
                "puVar8": "updated_data_ptr",
                "puVar9": "temp_ptr_1",
                "puVar10": "temp_ptr_2",
                "unaff_r9": "temp_var",
                "iVar11": "loop_counter",
                "local_34": "lookup_table"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_0000687c",
                "FUN_00006010"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006768": {
            "entrypoint": "0x00006768",
            "current_name": "process_data_00006768",
            "code": "\nundefined4\nprocessData_00006768(undefined4 *inputPtr,undefined4 *dataPtr,undefined4 value1,undefined4 value2)\n\n{\n  undefined2 tempValue1;\n  int tempValue2;\n  undefined4 tempValue3;\n  ushort flags;\n  uint tempValue4;\n  \n  if ((inputPtr != (undefined4 *)0x0) && (inputPtr[6] == 0)) {\n    initialize_and_process_data_000042a4();\n  }\n  if (dataPtr == &DAT_000079b8) {\n    dataPtr = (undefined4 *)inputPtr[1];\n  }\n  else if (dataPtr == (undefined4 *)&DAT_000079d8) {\n    dataPtr = (undefined4 *)inputPtr[2];\n  }\n  else if (dataPtr == (undefined4 *)&DAT_00007998) {\n    dataPtr = (undefined4 *)inputPtr[3];\n  }\n  flags = *(ushort *)(dataPtr + 3);\n  dataPtr[1] = 0;\n  tempValue4 = (uint)*(ushort *)(dataPtr + 3);\n  if ((int)(tempValue4 << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(tempValue4 << 0x1d) < 0) {\n    if ((undefined4 *)dataPtr[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)dataPtr[0xd] != dataPtr + 0x11) {\n        initialize_linked_list_00004b34(inputPtr);\n      }\n      dataPtr[1] = dataPtr[0x10];\n      dataPtr[0xd] = 0;\n      if (dataPtr[0x10] != 0) {\n        *dataPtr = dataPtr[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(tempValue4 << 0x1b)) {\n      *inputPtr = 9;\n      flags = flags | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(tempValue4 << 0x1c) < 0) {\n      tempValue2 = process_and_validate_data_00004158(inputPtr,dataPtr,tempValue4 << 0x1c,tempValue4,value2);\n      if (tempValue2 != 0) {\n        return 0xffffffff;\n      }\n      dataPtr[2] = 0;\n      *(ushort *)(dataPtr + 3) = *(ushort *)(dataPtr + 3) & 0xfff7;\n      dataPtr[6] = 0;\n    }\n    *(ushort *)(dataPtr + 3) = *(ushort *)(dataPtr + 3) | 4;\n  }\n  if (dataPtr[4] == 0) {\n    initialize_memory_allocation_00005700(inputPtr,dataPtr);\n  }\n  flags = *(ushort *)(dataPtr + 3);\n  tempValue1 = *(undefined2 *)(dataPtr + 3);\n  if ((flags & 3) != 0) {\n    *(undefined2 *)(dataPtr + 3) = 1;\n    find_and_execute_function_000043a0(0x1fff0284,&LAB_00006754_1);\n    *(undefined2 *)(dataPtr + 3) = tempValue1;\n    if ((flags & 9) == 9) {\n      process_data_0000404c(inputPtr,dataPtr);\n    }\n  }\n  tempValue3 = dataPtr[4];\n  *dataPtr = tempValue3;\n  tempValue2 = (*(code *)dataPtr[9])(inputPtr,dataPtr[8],tempValue3,dataPtr[5]);\n  dataPtr[1] = tempValue2;\n  if (0 < tempValue2) {\n    return 0;\n  }\n  flags = *(ushort *)(dataPtr + 3);\n  if (tempValue2 != 0) {\n    tempValue3 = 0;\n  }\n  else {\n    flags = flags | 0x20;\n  }\n  if (tempValue2 != 0) {\n    dataPtr[1] = tempValue3;\n    flags = flags | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(dataPtr + 3) = flags;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "param_1": "inputPtr",
                "param_2": "dataPtr",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "tempValue1",
                "iVar2": "tempValue2",
                "uVar3": "tempValue3",
                "uVar4": "flags",
                "uVar5": "tempValue4"
            },
            "calling": [
                "FUN_00005e10"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_0000404c",
                "FUN_00004158",
                "FUN_000043a0",
                "FUN_00004b34",
                "FUN_00005700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000687c": {
            "entrypoint": "0x0000687c",
            "current_name": "decode_function_0000687c",
            "code": "\nbyte * decode_function_0000687c(int output_length,byte *input_data)\n\n{\n  byte *output_data;\n  uint next_input_byte;\n  int index;\n  uint current_byte;\n  uint start_index;\n  uint end_index;\n  bool is_repeating_byte;\n  \n  current_byte = (uint)*input_data;\n  is_repeating_byte = current_byte == 0x5e;\n  if (is_repeating_byte) {\n    current_byte = (uint)input_data[1];\n    input_data = input_data + 2;\n  }\n  else {\n    input_data = input_data + 1;\n  }\n  index = output_length + -1;\n  do {\n    index = index + 1;\n    *(bool *)index = is_repeating_byte;\n  } while (index != output_length + 0xff);\n  if (current_byte == 0) {\n    output_data = input_data + -1;\n  }\n  else {\nLAB_000068aa:\n    do {\n      start_index = current_byte;\n      *(bool *)(output_length + start_index) = !is_repeating_byte;\n      input_data = input_data + 1;\n      while( true ) {\n        current_byte = (uint)input_data[-1];\n        if (current_byte != 0x2d) break;\n        end_index = (uint)*input_data;\n        if ((end_index == 0x5d) || (next_input_byte = start_index, (int)end_index < (int)start_index)) goto LAB_000068aa;\n        do {\n          next_input_byte = next_input_byte + 1;\n          *(bool *)(output_length + next_input_byte) = !is_repeating_byte;\n        } while ((int)next_input_byte < (int)end_index);\n        index = ~start_index + end_index;\n        if ((int)end_index <= (int)start_index) {\n          index = 0;\n        }\n        start_index = start_index + 1 + index;\n        input_data = input_data + 2;\n      }\n      output_data = input_data;\n    } while ((current_byte != 0x5d) && (output_data = input_data + -1, current_byte != 0));\n  }\n  return output_data;\n}\n\n",
            "renaming": {
                "FUN_0000687c": "decode_function_0000687c",
                "param_1": "output_length",
                "param_2": "input_data",
                "pbVar1": "output_data",
                "uVar2": "next_input_byte",
                "iVar3": "index",
                "uVar4": "current_byte",
                "uVar5": "start_index",
                "uVar6": "end_index",
                "bVar7": "is_repeating_byte"
            },
            "calling": [
                "FUN_000061cc",
                "FUN_0000656c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000068f0": {
            "entrypoint": "0x000068f0",
            "current_name": "allocate_or_extend_memory_000068f0",
            "code": "\nundefined4 allocate_or_extend_memory_000068f0(undefined4 param_address,int *array)\n\n{\n  int memory_address;\n  int previous_size;\n  \n  if ((int *)array[0xd] == array + 0x11) {\n    memory_address = allocate_memory(param_address,0x400);\n    if (memory_address != 0) {\n      array[0xe] = 0x400;\n      array[0xd] = memory_address;\n      *(undefined *)(memory_address + 0x3ff) = *(undefined *)((int)array + 0x46);\n      *(undefined *)(memory_address + 0x3fe) = *(undefined *)((int)array + 0x45);\n      *(undefined *)(memory_address + 0x3fd) = *(undefined *)(array + 0x11);\n      *array = memory_address + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    previous_size = array[0xe];\n    memory_address = allocate_or_copy_data(param_address,(int *)array[0xd],previous_size << 1);\n    if (memory_address != 0) {\n      copy_data(memory_address + previous_size,memory_address,previous_size);\n      array[0xd] = memory_address;\n      array[0xe] = previous_size << 1;\n      *array = memory_address + previous_size;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000068f0": "allocate_or_extend_memory_000068f0",
                "param_1": "param_address",
                "param_2": "array",
                "iVar1": "memory_address",
                "iVar2": "previous_size",
                "allocate_memory_00004bd0": "allocate_memory",
                "allocate_memory_or_copy_data_000060cc": "allocate_or_copy_data",
                "copy_data_000060b0": "copy_data"
            },
            "calling": [],
            "called": [
                "FUN_00004bd0",
                "FUN_000060cc",
                "FUN_000060b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006964": {
            "entrypoint": "0x00006964",
            "current_name": "sum_of_values_00006964",
            "code": "\nint sum_of_values_00006964(undefined4 sum,int array)\n\n{\n  int index;\n  \n  index = *(int *)(array + -4) + -4;\n  if (*(int *)(array + -4) < 0) {\n    index = index + *(int *)(array + index);\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_00006964": "sum_of_values_00006964",
                "param_1": "sum",
                "param_2": "array",
                "iVar1": "index"
            },
            "calling": [
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006974": {
            "entrypoint": "0x00006974",
            "current_name": "calculate_range_00006974",
            "code": "\nundefined8 calculateRange_00006974(int value1,int value2,int value3,int value4)\n\n{\n  int temp1;\n  undefined8 result;\n  undefined temp2 [8];\n  \n  if ((value4 == 0) && (value3 == 0)) {\n    if (value2 < 0) {\n      value1 = 0;\n      value2 = -0x80000000;\n    }\n    else if (value2 != 0 || value1 != 0) {\n      value2 = 0x7fffffff;\n      value1 = -1;\n    }\n    return CONCAT44(value2,value1);\n  }\n  if (value2 < 0) {\n    temp1 = -value2 - (uint)(value1 != 0);\n    if (value4 < 0) {\n      result = improved_calculation_00006a14(-value1,temp1,-value3,-value4 - (uint)(value3 != 0),temp2);\n      return result;\n    }\n    result = improved_calculation_00006a14(-value1,temp1,value3,value4,temp2);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (value4 < 0) {\n    result = improved_calculation_00006a14(value1,value2,-value3,-value4 - (uint)(value3 != 0),temp2);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = improved_calculation_00006a14();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006974": "calculate_range_00006974",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "iVar1": "temp1",
                "uVar2": "result",
                "local_8": "temp2"
            },
            "calling": [
                "FUN_0000443c"
            ],
            "called": [
                "FUN_00006a14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006a14": {
            "entrypoint": "0x00006a14",
            "current_name": "improved_calculation_00006a14",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong improvedCalculation_00006a14(uint input1,uint input2,uint divisor,uint limit,uint *output)\n\n{\n  code *jumpTable;\n  uint quotient;\n  int shift;\n  uint temp1;\n  uint quotient1;\n  uint remainder1;\n  uint quotient2;\n  uint remainder2;\n  uint quotient3;\n  uint remainder3;\n  bool carryFlag;\n  ulonglong result;\n  \n  if (limit == 0) {\n    if (input2 < divisor) {\n      shift = LZCOUNT(divisor);\n      remainder1 = divisor;\n      if (shift != 0) {\n        remainder1 = divisor << shift;\n        input2 = input1 >> (0x20U - shift & 0xff) | input2 << shift;\n        input1 = input1 << shift;\n      }\n      quotient2 = remainder1 >> 0x10;\n      quotient3 = input2 / quotient2;\n      temp1 = input1 >> 0x10 | (input2 - quotient2 * quotient3) * 0x10000;\n      quotient = quotient3 * (remainder1 & 0xffff);\n      quotient1 = quotient3;\n      if (temp1 <= quotient && quotient - temp1 != 0) {\n        carryFlag = CARRY4(remainder1,temp1);\n        temp1 = remainder1 + temp1;\n        quotient1 = quotient3 - 1;\n        if ((carryFlag == false) && (temp1 <= quotient && quotient - temp1 != 0)) {\n          quotient1 = quotient3 - 2;\n          temp1 = temp1 + remainder1;\n        }\n      }\n      quotient3 = (temp1 - quotient) / quotient2;\n      quotient2 = input1 & 0xffff | ((temp1 - quotient) - quotient2 * quotient3) * 0x10000;\n      temp1 = quotient3 * (remainder1 & 0xffff);\n      quotient = quotient3;\n      if (quotient2 <= temp1 && temp1 - quotient2 != 0) {\n        carryFlag = CARRY4(remainder1,quotient2);\n        quotient2 = remainder1 + quotient2;\n        quotient = quotient3 - 1;\n        if ((carryFlag == false) && (quotient2 <= temp1 && temp1 - quotient2 != 0)) {\n          quotient = quotient3 - 2;\n          quotient2 = quotient2 + remainder1;\n        }\n      }\n      quotient2 = quotient2 - temp1;\n      quotient = quotient | quotient1 << 0x10;\n      remainder1 = 0;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jumpTable = (code *)software_udf(0xff,0x6abc);\n        result = (*jumpTable)();\n        return result;\n      }\n      shift = LZCOUNT(divisor);\n      if (shift == 0) {\n        input2 = input2 - divisor;\n        remainder3 = divisor >> 0x10;\n        remainder2 = divisor & 0xffff;\n        remainder1 = 1;\n        quotient1 = divisor;\n      }\n      else {\n        quotient1 = divisor << shift;\n        remainder3 = quotient1 >> 0x10;\n        quotient = input2 >> (0x20U - shift & 0xff);\n        remainder1 = input1 >> (0x20U - shift & 0xff) | input2 << shift;\n        temp1 = quotient / remainder3;\n        remainder2 = quotient1 & 0xffff;\n        quotient3 = remainder1 >> 0x10 | (quotient - remainder3 * temp1) * 0x10000;\n        quotient2 = temp1 * remainder2;\n        input1 = input1 << shift;\n        quotient = temp1;\n        if (quotient3 <= quotient2 && quotient2 - quotient3 != 0) {\n          carryFlag = CARRY4(quotient1,quotient3);\n          quotient3 = quotient1 + quotient3;\n          quotient = temp1 - 1;\n          if ((carryFlag == false) && (quotient3 <= quotient2 && quotient2 - quotient3 != 0)) {\n            quotient = temp1 - 2;\n            quotient3 = quotient3 + quotient1;\n          }\n        }\n        temp1 = (quotient3 - quotient2) / remainder3;\n        input2 = remainder1 & 0xffff | ((quotient3 - quotient2) - remainder3 * temp1) * 0x10000;\n        quotient2 = temp1 * remainder2;\n        remainder1 = temp1;\n        if (input2 <= quotient2 && quotient2 - input2 != 0) {\n          carryFlag = CARRY4(quotient1,input2);\n          input2 = quotient1 + input2;\n          remainder1 = temp1 - 1;\n          if ((carryFlag == false) && (input2 <= quotient2 && quotient2 - input2 != 0)) {\n            remainder1 = temp1 - 2;\n            input2 = input2 + quotient1;\n          }\n        }\n        input2 = input2 - quotient2;\n        remainder1 = remainder1 | quotient << 0x10;\n      }\n      quotient3 = input2 / remainder3;\n      quotient2 = input1 >> 0x10 | (input2 - remainder3 * quotient3) * 0x10000;\n      quotient = remainder2 * quotient3;\n      temp1 = quotient3;\n      if (quotient2 <= quotient && quotient - quotient2 != 0) {\n        carryFlag = CARRY4(quotient1,quotient2);\n        quotient2 = quotient1 + quotient2;\n        temp1 = quotient3 - 1;\n        if ((carryFlag == false) && (quotient2 <= quotient && quotient - quotient2 != 0)) {\n          temp1 = quotient3 - 2;\n          quotient2 = quotient2 + quotient1;\n        }\n      }\n      quotient3 = (quotient2 - quotient) / remainder3;\n      quotient2 = input1 & 0xffff | ((quotient2 - quotient) - remainder3 * quotient3) * 0x10000;\n      remainder2 = remainder2 * quotient3;\n      quotient = quotient3;\n      if (quotient2 <= remainder2 && remainder2 - quotient2 != 0) {\n        carryFlag = CARRY4(quotient1,quotient2);\n        quotient2 = quotient1 + quotient2;\n        quotient = quotient3 - 1;\n        if ((carryFlag == false) && (quotient2 <= remainder2 && remainder2 - quotient2 != 0)) {\n          quotient = quotient3 - 2;\n          quotient2 = quotient2 + quotient1;\n        }\n      }\n      quotient2 = quotient2 - remainder2;\n      quotient = quotient | temp1 << 0x10;\n    }\n    if (output != (uint *)0x0) {\n      *output = quotient2 >> LZCOUNT(divisor);\n      output[1] = 0;\n    }\n  }\n  else if (input2 < limit) {\n    if (output != (uint *)0x0) {\n      *output = input1;\n      output[1] = input2;\n      return 0;\n    }\n    quotient = 0;\n    remainder1 = 0;\n  }\n  else {\n    shift = LZCOUNT(limit);\n    if (shift != 0) {\n      remainder2 = 0x20 - shift;\n      temp1 = divisor >> (remainder2 & 0xff) | limit << shift;\n      remainder3 = temp1 >> 0x10;\n      quotient = input2 >> (remainder2 & 0xff);\n      remainder1 = input1 >> (remainder2 & 0xff) | input2 << shift;\n      quotient2 = quotient / remainder3;\n      quotient1 = remainder1 >> 0x10 | (quotient - remainder3 * quotient2) * 0x10000;\n      quotient3 = quotient2 * (temp1 & 0xffff);\n      input1 = input1 << shift;\n      quotient = quotient2;\n      if (quotient1 <= quotient3 && quotient3 - quotient1 != 0) {\n        carryFlag = CARRY4(temp1,quotient1);\n        quotient1 = temp1 + quotient1;\n        quotient = quotient2 - 1;\n        if ((carryFlag == false) && (quotient1 <= quotient3 && quotient3 - quotient1 != 0)) {\n          quotient = quotient2 - 2;\n          quotient1 = quotient1 + temp1;\n        }\n      }\n      quotient2 = (quotient1 - quotient3) / remainder3;\n      quotient1 = remainder1 & 0xffff | ((quotient1 - quotient3) - remainder3 * quotient2) * 0x10000;\n      quotient3 = quotient2 * (temp1 & 0xffff);\n      remainder1 = quotient2;\n      if (quotient1 <= quotient3 && quotient3 - quotient1 != 0) {\n        carryFlag = CARRY4(temp1,quotient1);\n        quotient1 = temp1 + quotient1;\n        remainder1 = quotient2 - 1;\n        if ((carryFlag == false) && (quotient1 <= quotient3 && quotient3 - quotient1 != 0)) {\n          remainder1 = quotient2 - 2;\n          quotient1 = quotient1 + temp1;\n        }\n      }\n      remainder1 = remainder1 | quotient << 0x10;\n      result = (ulonglong)remainder1 * (ulonglong)(divisor << shift);\n      if (CONCAT44(quotient1 - quotient3,input1) < result) {\n        result = result - CONCAT44(temp1,divisor << shift);\n        remainder1 = remainder1 - 1;\n      }\n      if (output != (uint *)0x0) {\n        quotient = ((quotient1 - quotient3) - (int)(result >> 0x20)) - (uint)(input1 < (uint)result);\n        *output = quotient << (remainder2 & 0xff) | input1 - (uint)result >> shift;\n        output[1] = quotient >> shift;\n      }\n      return (ulonglong)remainder1;\n    }\n    if ((limit < input2) || (divisor <= input1)) {\n      carryFlag = input1 < divisor;\n      input1 = input1 - divisor;\n      input2 = (input2 - limit) - (uint)carryFlag;\n      quotient = 1;\n    }\n    else {\n      quotient = 0;\n    }\n    remainder1 = 0;\n    if (output != (uint *)0x0) {\n      *output = input1;\n      output[1] = input2;\n    }\n  }\n  return CONCAT44(remainder1,quotient);\n}\n\n",
            "renaming": {
                "FUN_00006a14": "improved_calculation_00006a14",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "divisor",
                "param_4": "limit",
                "param_5": "output",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "uVar1": "quotient",
                "iVar2": "shift",
                "uVar3": "temp1",
                "uVar4": "quotient1",
                "uVar5": "remainder1",
                "uVar6": "quotient2",
                "uVar7": "remainder2",
                "uVar8": "quotient3",
                "uVar9": "remainder3",
                "bVar10": "carryFlag",
                "uVar11": "result"
            },
            "calling": [
                "FUN_00006974"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 135061,
    "layers": [
        [
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_0000093c",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000dcc",
            "FUN_000010a0",
            "FUN_00001318",
            "FUN_00001360",
            "FUN_000015d0",
            "FUN_00001696",
            "FUN_00001748",
            "FUN_00001ad4",
            "FUN_00001d08",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_000023c8",
            "FUN_0000240c",
            "FUN_00002538",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_000031fc",
            "FUN_00003658",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000043a0",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005584",
            "FUN_000056b0",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_00005a58",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000064bc",
            "FUN_0000687c",
            "FUN_00006964",
            "FUN_00006a14"
        ],
        [
            "FUN_00000428",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000930",
            "FUN_00000d76",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00001348",
            "FUN_00001392",
            "FUN_000014c4",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00001cf0",
            "FUN_00001d3a",
            "FUN_00001ec4",
            "FUN_00001ff6",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_000023d0",
            "FUN_0000258c",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_00002894",
            "FUN_00002a18",
            "FUN_0000328c",
            "FUN_00003688",
            "FUN_00003e58",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_000041f4",
            "FUN_00004634",
            "FUN_00004b34",
            "FUN_00004e26",
            "FUN_00004f98",
            "FUN_0000562c",
            "FUN_000056b8",
            "FUN_00005b34",
            "FUN_00005fd8",
            "FUN_0000656c",
            "FUN_00006974"
        ],
        [
            "FUN_00000794",
            "FUN_00000d9c",
            "FUN_00001628",
            "FUN_00001734",
            "FUN_00001778",
            "FUN_000017dc",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_00001960",
            "FUN_00001a60",
            "FUN_00001bb8",
            "FUN_00001ddc",
            "FUN_00002028",
            "FUN_000024bc",
            "FUN_000025f4",
            "FUN_00002994",
            "FUN_00002e9c",
            "FUN_0000404c",
            "FUN_0000443c",
            "FUN_00004bd0",
            "FUN_00004dee",
            "FUN_000056a0",
            "FUN_00005780",
            "FUN_00006192"
        ],
        [
            "FUN_00000db0",
            "FUN_000012b4",
            "FUN_00001688",
            "FUN_0000191c",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001f80",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_00002396",
            "FUN_00002624",
            "FUN_00002690",
            "FUN_00004248",
            "FUN_00005700",
            "FUN_000060cc",
            "FUN_000061cc"
        ],
        [
            "FUN_00001448",
            "FUN_00001b10",
            "FUN_00001eea",
            "FUN_00005e68",
            "FUN_000068f0"
        ],
        [
            "FUN_00001c84",
            "FUN_00005100"
        ],
        [
            "FUN_00001274",
            "FUN_000047e4"
        ],
        [
            "FUN_00000e64",
            "FUN_00002600",
            "FUN_00002654"
        ],
        [
            "FUN_000031e0",
            "FUN_000033f4",
            "FUN_00003478",
            "FUN_000034c0"
        ],
        [
            "FUN_00000ed8",
            "FUN_0000211c",
            "FUN_00003378"
        ],
        [
            "FUN_00002eb4"
        ],
        [
            "FUN_00004158",
            "FUN_00004314",
            "FUN_000054a8"
        ],
        [
            "FUN_000041d0",
            "FUN_000042a4"
        ],
        [
            "FUN_00005404",
            "FUN_00006768"
        ],
        [
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_000057a8",
            "FUN_00005e10"
        ],
        [
            "FUN_00002a00",
            "FUN_000033c0",
            "FUN_00003444",
            "FUN_00004418",
            "FUN_000057d2"
        ],
        [
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_000057f8"
        ],
        [
            "FUN_00004c84"
        ],
        [
            "FUN_00002a88",
            "FUN_00002f74",
            "FUN_00003524"
        ],
        [
            "FUN_00002b10"
        ],
        [
            "FUN_00002e6c"
        ],
        [
            "FUN_000023a4"
        ],
        [
            "FUN_00000f04"
        ],
        [
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000013b8",
            "FUN_00003ec4"
        ],
        [
            "FUN_00000dc0",
            "FUN_00000df4",
            "FUN_000010d4",
            "FUN_00002434",
            "FUN_00003e9e"
        ],
        [
            "FUN_00000410",
            "FUN_00000f8c",
            "FUN_0000129c",
            "FUN_00003694"
        ],
        [
            "FUN_000012e2",
            "FUN_00002ecc",
            "FUN_0000305c",
            "FUN_0000459c"
        ],
        [
            "FUN_00000e14",
            "FUN_00002f30"
        ],
        [
            "FUN_00000490",
            "FUN_00002fe0"
        ],
        [
            "FUN_0000316c",
            "FUN_00004dc8"
        ]
    ],
    "locked_functions": []
}