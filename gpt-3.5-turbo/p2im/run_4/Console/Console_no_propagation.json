{
    "functions": {
        "FUN_000026c0": {
            "renaming": {
                "FUN_000026c0": "initializeData_000026c0",
                "FUN_00002910": "callFunction",
                "PTR_DAT_000026d4": "pointerData"
            },
            "code": "void initializeData_000026c0(void)\n{\n  callFunction();\n  *(undefined4 *)PTR_DAT_000026d4 = 0;\n  return;\n}",
            "called": [
                "FUN_00002910"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000026c0",
            "calling": [
                "FUN_00003524"
            ],
            "imported": false,
            "current_name": "initializeData_000026c0"
        },
        "FUN_00004bd0": {
            "renaming": {
                "FUN_00004bd0": "allocate_memory_block_00004bd0",
                "param_1": "out_ptr",
                "param_2": "size",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "heap_ptr",
                "uVar2": "result",
                "puVar3": "current_block_ptr",
                "iVar4": "difference",
                "uVar5": "difference",
                "puVar6": "previous_block_ptr",
                "uVar7": "aligned_size"
            },
            "code": "uint allocate_memory_block_00004bd0(undefined4 *out_ptr, uint size, undefined4 param_3, undefined4 param_4)\n{\n  uint aligned_size = (size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < size)) {\n    *out_ptr = 0xc;\n  }\n  else {\n    initialize_heap();\n    uint *current_block_ptr = *(uint **)HEAP_START_PTR;\n    uint *previous_block_ptr = current_block_ptr;\n    while (current_block_ptr != (uint *)0x0) {\n      uint difference = *current_block_ptr - aligned_size;\n      if (-1 < (int)difference) {\n        if (0xb < difference) {\n          *current_block_ptr = difference;\n          current_block_ptr = (uint *)((int)current_block_ptr + difference);\n          goto LAB_00004c34;\n        }\n        uint next_block_ptr = current_block_ptr[1];\n        if (previous_block_ptr == current_block_ptr) {\n          *(uint **)HEAP_START_PTR = (uint *)next_block_ptr;\n        }\n        if (previous_block_ptr != current_block_ptr) {\n          previous_block_ptr[1] = next_block_ptr;\n        }\n        goto LAB_00004c42;\n      }\n      previous_block_ptr = current_block_ptr;\n      current_block_ptr = (uint *)current_block_ptr[1];\n    }\n    if (*(int *)HEAP_START_PTR == 0) {\n      uint result = allocate_memory_block_00004bd0(out_ptr, 0, previous_block_ptr, 0, param_4);\n      *(undefined4 *)HEAP_START_PTR = result;\n    }\n    current_block_ptr = (uint *)allocate_memory_block_00004bd0(out_ptr, aligned_size);\n    if ((current_block_ptr != (uint *)0xffffffff) &&\n       ((uint *)(((int)current_block_ptr + 3U) & 0xfffffffc) == current_block_ptr ||\n        (int)allocate_memory_block_00004bd0(out_ptr, (int)((uint *)((int)current_block_ptr + 3U & 0xfffffffc) - current_block_ptr)) != -1))) {\nLAB_00004c34:\n      *(((uint *)((int)current_block_ptr + 3U & 0xfffffff8)) + 1) = (int)current_block_ptr + 0xbU & 0xfffffff8 - (int)(current_block_ptr + 1);\nLAB_00004c42:\n      finalize_heap();\n      uint result = (int)((uint *)((int)current_block_ptr + 0xbU & 0xfffffff8)) - (int)current_block_ptr;\n      if (result == 0) {\n        return (int)((uint *)((int)current_block_ptr + 0xbU & 0xfffffff8));\n      }\n      *(((uint *)((int)current_block_ptr + 0xbU & 0xfffffff8)) + result) = (int)(current_block_ptr + 1) - (int)((uint *)((int)current_block_ptr + 0xbU & 0xfffffff8));\n      return (int)((uint *)((int)current_block_ptr + 0xbU & 0xfffffff8));\n    }\n    *out_ptr = 0xc;\n    finalize_heap();\n  }\n  return 0;\n}",
            "called": [
                "FUN_00000428",
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004bd0",
            "calling": [
                "FUN_000068f0",
                "FUN_00005100",
                "FUN_00004248",
                "FUN_000060cc",
                "FUN_00005700"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00004bd0"
        },
        "FUN_00000794": {
            "renaming": {
                "FUN_00000794": "allocate_memory_00000794",
                "extraout_r1": "extraout_param",
                "iVar1": "size",
                "puVar2": "memory_ptr",
                "uVar3": "aligned_size",
                "iStack_1c": "index_2",
                "iStack_18": "index_1",
                "piStack_14": "stack_ptr"
            },
            "code": "int * allocate_memory_00000794(void)\n{\n  int extraout_param;\n  int size = 0;\n  undefined4 *memory_ptr;\n  uint aligned_size;\n  int index_1;\n  int index_2;\n  int *stack_ptr;\n\n  initialize_memory();\n  *(undefined4 *)(iRam000007d0 + *psRam000007cc * 4) = 0;\n  *piRam000007d4 = *piRam000007d4 - 1;\n  initialize_variable(*puRam000007d8,0);\n  memory_ptr = puRam000007d8;\n  *puRam000007d8 = 0;\n  calculate_size(&size);\n  aligned_size = (int)memory_ptr + size & 0xfffffffc;\n  stack_ptr = (int *)(aligned_size - 4);\n  *stack_ptr = 0x77777777;\n  if (((uint)stack_ptr & 7) != 0) {\n    stack_ptr = (int *)(aligned_size - 8);\n    *stack_ptr = 0x88888888;\n  }\n  stack_ptr[-1] = 0x1000000;\n  stack_ptr[-2] = size << 0xd;\n  stack_ptr[-3] = PTR_DAT_000008b4;\n  stack_ptr = stack_ptr - 4;\n  *stack_ptr = 0;\n  for (index_1 = 3; 0 < index_1; index_1 = index_1 - 1) {\n    stack_ptr = stack_ptr - 1;\n    *stack_ptr = index_1;\n  }\n  stack_ptr = stack_ptr - 1;\n  *stack_ptr = extraout_param;\n  for (index_2 = 0xb; 3 < index_2; index_2 = index_2 - 1) {\n    stack_ptr = stack_ptr - 1;\n    *stack_ptr = index_2;\n  }\n  stack_ptr[-1] = -3;\n  return stack_ptr - 1;\n}\n",
            "called": [
                "FUN_00000cd0",
                "FUN_00000930",
                "FUN_00000698"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000794",
            "calling": [],
            "imported": false,
            "current_name": "allocate_memory_00000794"
        },
        "FUN_000064bc": {
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "data_size",
                "param_2": "flags",
                "param_3": "data",
                "param_4": "callback_param",
                "puVar1": "byte_array",
                "iVar2": "callback_result",
                "iVar7": "num_processed_bytes",
                "uVar3": "temp_var",
                "ppbVar4": "byte_ptr_array",
                "pbVar5": "data_ptr",
                "unaff_r6": "byte_ptr",
                "pbVar6": "byte_ptr_2",
                "PTR_DAT_00006568": "byte_array_2",
                "LAB_0000654a": "loop_end"
            },
            "code": "int process_data_000064bc(uint32_t data_size, uint32_t *flags, uint8_t **data, uint32_t *callback_param)\n{\n  uint8_t *byte_ptr;\n  uint8_t *byte_ptr_2;\n  uint8_t *byte_ptr_3;\n  uint32_t callback_result = 0;\n  uint32_t num_processed_bytes = 0;\n  uint32_t data_flag = flags[2];\n  if (data_flag == 0) {\n    if (flags[6] == 0) {\n      data_flag = 1;\n    }\n    else {\n      data_flag = 0xFFFFFFFF;\n    }\n    flags[2] = data_flag;\n  }\n  if (-1 < (int32_t)(*flags << 0x1b)) {\n    byte_ptr_2 = (uint8_t *)*callback_param;\n    *callback_param = byte_ptr_2 + 1;\n    byte_ptr = *byte_ptr_2;\n  }\n  uint32_t loop_count = 0;\n  do {\n    uint32_t data_flag_2 = flags[6];\n    if (data_flag_2 != 0) {\n      if (data_flag_2 == 1) {\n        if (*(char *)(flags[5] + (uint)*data) == '\\0') {\n          if (num_processed_bytes == 0) {\n            return 1;\n          }\n          if (((*flags & 0x10) == 0) && (flags[3] = flags[3] + 1, flags[6] != 0)) {\n            *byte_ptr = 0;\n          }\n          flags[4] = num_processed_bytes + flags[4];\n          return 0;\n        }\n      }\n      else if ((data_flag_2 != 2) || ((int32_t)((uint32_t)(byte)PTR_DAT_00006568[**data] << 0x1c) < 0)) {\n        goto LAB_0000654a;\n      }\n    }\n    byte_ptr_3 = byte_ptr;\n    if (-1 < (int32_t)(*flags << 0x1b)) {\n      byte_ptr_3 = byte_ptr + 1;\n      *byte_ptr = **data;\n    }\n    uint8_t *data_ptr_2 = *(data + 1);\n    *data = *data + 1;\n    uint32_t data_flag_3 = flags[2] - 1;\n    *(data + 1) = data_ptr_2 + -1;\n    num_processed_bytes = num_processed_bytes + 1;\n    flags[2] = data_flag_3;\n    byte_ptr = byte_ptr_3;\n    if ((data_flag_3 == 0) || (((int32_t)(data_ptr_2 + -1) < 1 && ((int32_t)((* (code **) (flags + 0x60))(data_size, data, data_flag_3, (code *) flags[0x60], callback_param)) != 0)))) {\n      goto LAB_0000654a;\n    }\n    loop_count++;\n  } while(true);\n  LAB_0000654a:\n  if (((*flags & 0x10) == 0) && (flags[3] = flags[3] + 1, flags[6] != 0)) {\n    *byte_ptr = 0;\n  }\n  flags[4] = num_processed_bytes + flags[4];\n  return callback_result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000064bc",
            "calling": [
                "FUN_000061cc"
            ],
            "imported": false,
            "current_name": "process_data_000064bc"
        },
        "FUN_00002970": {
            "renaming": {
                "FUN_00002970": "clear_bit_in_uint_array_00002970",
                "DAT_00002990": "uint_array_ptr",
                "PTR_000029a0": "current_value",
                "PTR_000029a4": "cleared_bit_value"
            },
            "code": "void clear_bit_in_uint_array_00002970(void)\n{\n    uint* DAT_00002990 = (uint*)(DAT_00002990 + 0x14);\n    uint PTR_000029a0 = *DAT_00002990;\n    uint PTR_000029a4 = PTR_000029a0 & 0xffffffef;\n    *DAT_00002990 = PTR_000029a4;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002970",
            "calling": [
                "FUN_000026e4"
            ],
            "imported": false,
            "current_name": "clear_bit_in_uint_array_00002970"
        },
        "FUN_00000dc0": {
            "renaming": {
                "FUN_00000dc0": "call_function_00000dc0",
                "FUN_00000cc0": "execute_function"
            },
            "code": "void call_function_00000dc0(void)\n{\n  execute_function();\n  return;\n}",
            "called": [
                "FUN_00000cc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000dc0",
            "calling": [],
            "imported": false,
            "current_name": "call_function_00000dc0"
        },
        "FUN_00000d0c": {
            "renaming": {
                "FUN_00000d0c": "enable_irq_interrupts_if_privileged_00000d0c",
                "param_1": "interrupt_mode_bit",
                "bVar1": "is_privileged_mode"
            },
            "code": "void enable_irq_interrupts_if_privileged_00000d0c(uint interrupt_mode_bit)\n{\n  bool is_privileged_mode = (bool)isCurrentModePrivileged();\n  if (is_privileged_mode) {\n    enableIRQinterrupts((interrupt_mode_bit & 1) == 1);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000d0c",
            "calling": [
                "FUN_00001c84",
                "FUN_00000428",
                "FUN_000024bc",
                "FUN_000010d4",
                "FUN_00002434"
            ],
            "imported": false,
            "current_name": "enable_irq_interrupts_if_privileged_00000d0c"
        },
        "FUN_00003d94": {
            "renaming": {
                "FUN_00003d94": "execute_function_00003d94",
                "param_1": "function_address",
                "param_2": "arg2",
                "uVar1": "result"
            },
            "code": "int execute_function_00003d94(int function_address, int arg1, int arg2) {\n  int result;\n  if (function_address == 0) {\n    result = -19;\n  }\n  else {\n    result = (**(void (**)(void))(function_address + 0xc))(arg1, arg2);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003d94",
            "calling": [
                "FUN_0000305c"
            ],
            "imported": false,
            "current_name": "execute_function_00003d94"
        },
        "FUN_0000579c": {
            "renaming": {
                "FUN_0000579c": "do_nothing_with_pointer_0000579c",
                "PTR_DAT_000057a4": "PTR_data"
            },
            "code": "void do_nothing_with_pointer_0000579c(void)\n{\n  do_nothing(PTR_DAT_000057a4);\n  return;\n}",
            "called": [
                "FUN_000045ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000579c",
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "imported": false,
            "current_name": "do_nothing_with_pointer_0000579c"
        },
        "FUN_000015d0": {
            "renaming": {
                "FUN_000015d0": "copy_data_to_ptr_000015d0",
                "param_1": "ptr_index",
                "param_2": "data_index",
                "param_3": "data_length",
                "iVar1": "ptr_value",
                "local_c": "i"
            },
            "code": "void copy_data_to_ptr_000015d0(int ptr_index, int data_index, uint data_length)\n{\n  int ptr_value = *(int *)(PTR_DAT_00001624 + ptr_index * 0x20);\n  for (uint i = 0; i < data_length; i++) {\n    do {\n    } while (-1 < *(char *)(ptr_value + 4));\n    *(undefined *)(ptr_value + 7) = *(undefined *)(i + data_index);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000015d0",
            "calling": [
                "FUN_00000e38"
            ],
            "imported": false,
            "current_name": "copy_data_to_ptr_000015d0"
        },
        "FUN_00005e68": {
            "renaming": {
                "FUN_00005e68": "process_data_00005e68",
                "param_1": "data",
                "param_2": "size",
                "param_3": "arg1",
                "param_4": "arg2",
                "local_80": "local_var1",
                "local_7c": "local_var2",
                "local_74": "local_var3",
                "local_72": "local_var4",
                "local_70": "local_var5",
                "local_6c": "local_var6",
                "local_5c": "local_var7",
                "local_4c": "local_var8",
                "local_38": "local_var9",
                "uStack_8": "uStack_arg1",
                "uStack_4": "uStack_arg2"
            },
            "code": "void process_data_00005e68(undefined4 data, undefined4 size, undefined4 arg1, undefined4 arg2)\n{\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined2 local_var3;\n  undefined2 local_var4;\n  undefined4 local_var5;\n  undefined4 local_var6;\n  undefined *local_var7;\n  undefined4 local_var8;\n  undefined4 local_var9;\n  undefined4 uStack_arg1;\n  undefined4 uStack_arg2;\n  local_var3 = 0x204;\n  local_var1 = data;\n  local_var5 = data;\n  uStack_arg1 = arg1;\n  uStack_arg2 = arg2;\n  local_var2 = FUN_00005ecc();\n  local_var7 = PTR_LAB_00004dea_1_00005eb4;\n  local_var8 = 0;\n  local_var9 = 0;\n  local_var4 = 0xffff;\n  local_var6 = local_var2;\n  FUNC_000061cc(*DAT_00005eb8,&local_var1,size,&uStack_arg1);\n  return;\n}",
            "called": [
                "FUN_00005ecc",
                "FUN_000061cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005e68",
            "calling": [
                "FUN_00005100"
            ],
            "imported": false,
            "current_name": "process_data_00005e68"
        },
        "FUN_00000dcc": {
            "renaming": {
                "FUN_00000dcc": "set_values_00000dcc",
                "DAT_00000df0": "data_pointer"
            },
            "code": "void set_values_00000dcc(void)\n{\n    int* DAT_00000df0 = DAT_00000df0;\n    *(DAT_00000df0 + 7) = 0xc520;\n    *(DAT_00000df0 + 7) = 0xd928;\n    *DAT_00000df0 = 0xd2;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000dcc",
            "calling": [
                "FUN_00000db0"
            ],
            "imported": false,
            "current_name": "set_values_00000dcc"
        },
        "FUN_0000285c": {
            "renaming": {
                "FUN_0000285c": "set_flag_and_store_value_0000285c",
                "param_1": "value",
                "puVar1": "data_pointer"
            },
            "code": "void set_flag_and_store_value_0000285c(int value) {\n  int* data_pointer = DAT_00002890;\n  data_pointer[5] &= 0xFFFFFFEF;\n  *data_pointer = value;\n  data_pointer[5] |= 0x10;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000285c",
            "calling": [
                "FUN_00002600"
            ],
            "imported": false,
            "current_name": "set_flag_and_store_value_0000285c"
        },
        "FUN_00000e58": {
            "renaming": {
                "FUN_00000e58": "run_infinite_loop_00000e58",
                "FUN_00000cd0": "initialize_system"
            },
            "code": "void run_infinite_loop_00000e58(void)\n{\n  initialize_system();\n  while(true) {\n    // Infinite loop\n  }\n}",
            "called": [
                "FUN_00000cd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000e58",
            "calling": [
                "FUN_00000f04"
            ],
            "imported": false,
            "current_name": "run_infinite_loop_00000e58"
        },
        "FUN_00001778": {
            "renaming": {
                "FUN_00001778": "set_bit_in_byte_after_third_bit_00001778",
                "DAT_000017d0": "data",
                "DAT_000017d8": "data_offset",
                "byte": "byte",
                "*": "byte_ptr",
                "&": "bitwise_and",
                "|": "bitwise_or",
                "0xcf": "clear_third_and_sixth_bits_mask",
                "0x20": "third_bit_set_mask",
                "FUN_00001710": "set_two_bytes_at_data_offset"
            },
            "code": "void set_bit_in_byte_after_third_bit_00001778(byte *DAT_000017d0) {\n  byte *byte_ptr = DAT_000017d0 + 1;\n  *byte_ptr = (*byte_ptr & 0xcf) | 0x20;\n  set_two_bytes_at_DAT_000017d8(DAT_000017d0 + 8, 2);\n  return;\n}",
            "called": [
                "FUN_00001710",
                "FUN_000016ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001778",
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c"
            ],
            "imported": false,
            "current_name": "set_bit_in_byte_after_third_bit_00001778"
        },
        "FUN_000026d8": {
            "renaming": {
                "FUN_000026d8": "execute_main_function_000026d8",
                "FUN_0000294c": "initialize_system"
            },
            "code": "void execute_main_function_000026d8(void)\n{\n  initialize_system();\n  return;\n}",
            "called": [
                "FUN_0000294c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000026d8",
            "calling": [
                "FUN_00003524"
            ],
            "imported": false,
            "current_name": "execute_main_function_000026d8"
        },
        "FUN_00000566": {
            "renaming": {
                "FUN_00000566": "improved_function_00000566",
                "param_1": "input",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "bVar4": "byte4",
                "count_leading_zeroes": "count_leading_zeroes_32",
                "uVar5": "result"
            },
            "code": "uint32_t improved_function_00000566(uint32_t x) {\n    uint32_t result = 0;\n    if ((x & 0xFFFF0000) == 0) { result += 16; x <<= 16; }\n    if ((x & 0xFF000000) == 0) { result += 8; x <<= 8; }\n    if ((x & 0xF0000000) == 0) { result += 4; x <<= 4; }\n    if ((x & 0xC0000000) == 0) { result += 2; x <<= 2; }\n    if ((x & 0x80000000) == 0) { result += 1; }\n    return result;\n}\n\nuint32_t improved_function_00000566_32(uint32_t x) {\n    return x ? improved_function_00000566(x) : 32;\n}\n\nuint32_t improved_function_00000566(uint32_t input) {\n    uint32_t b1 = input & 0xFF;\n    uint32_t b2 = (input >> 8) & 0xFF;\n    uint32_t b3 = (input >> 16) & 0xFF;\n    uint32_t b4 = (input >> 24) & 0xFF;\n\n    uint32_t result = improved_function_00000566_32((b1 << 24) | (b2 << 16) | (b3 << 8) | b4);\n\n    if (input == 0) {\n        result = 0xFFFFFFFF;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000566",
            "calling": [
                "FUN_00000610"
            ],
            "imported": false,
            "current_name": "improved_function_00000566"
        },
        "FUN_00001d08": {
            "renaming": {
                "FUN_00001d08": "calculate_result_00001d08",
                "param_1": "input_value",
                "param_2": "multiplier",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int calculate_result_00001d08(uint32_t input_value, int multiplier) {\n    uint32_t masked_value = input_value & 0xf0000000;\n    uint32_t shifted_value = (input_value & 0xfffff) << 5;\n    int result = multiplier * 4 + masked_value + shifted_value + 0x2000000;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001d08",
            "calling": [
                "FUN_00001d3a"
            ],
            "imported": false,
            "current_name": "calculate_result_00001d08"
        },
        "FUN_000031fc": {
            "renaming": {
                "FUN_000031fc": "calculate_result_000031fc",
                "param_1": "input_value",
                "param_2": "input_range",
                "param_3": "initial_value",
                "iVar2": "range_limit",
                "bVar1": "range_byte",
                "value": "value",
                "result": "result"
            },
            "code": "int calculate_result_000031fc(int input_value, int input_range, int initial_value)\n{\n    int range_limit = input_range;\n    if (input_range < 3) {\n        range_limit = 1;\n    }\n    byte range_byte = (byte)range_limit;\n    if (2 < input_range) {\n        range_byte = 0;\n    }\n    input_value = input_value - (uint)range_byte;\n    int value = input_value;\n    if (input_value < 0) {\n        value = input_value + 3;\n    }\n    int result = (((value >> 2) + input_value) - (int)((longlong)DAT_00003280 * (longlong)input_value >> 0x25)) + (int)((longlong)DAT_00003280 * (longlong)input_value >> 0x27) + *(int *)(DAT_00003284 + (input_range + -1) * 4) + initial_value;\n    return result + (((int)((ulonglong)((longlong)DAT_00003288 * (longlong)result) >> 0x20) + result >> 2) - (result >> 0x1f)) * -7;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000031fc",
            "calling": [
                "FUN_0000328c"
            ],
            "imported": false,
            "current_name": "calculate_result_000031fc"
        },
        "FUN_000016ec": {
            "renaming": {
                "FUN_000016ec": "set_flag_to_true_000016ec",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "flag_ptr",
                "*puVar1": "*flag_ptr",
                "FUN_00001696": "get_flag_address"
            },
            "code": "void set_flag_to_true_000016ec(int input1, char input2) {\n  char *flag_ptr;\n  flag_ptr = (char *)get_flag_address(input1, input2);\n  *flag_ptr = 1;\n  return;\n}",
            "called": [
                "FUN_00001696"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000016ec",
            "calling": [
                "FUN_0000182c",
                "FUN_00001a18",
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_00001a3c"
            ],
            "imported": false,
            "current_name": "set_flag_to_true_000016ec"
        },
        "FUN_00005100": {
            "renaming": {
                "FUN_00005100": "FUNC_00005100"
            },
            "code": "\nvoid FUNC_00005100(void)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined4 *puVar3;\n  undefined4 uVar4;\n  int iVar5;\n  char *pcVar6;\n  int iVar7;\n  int iVar8;\n  char cVar9;\n  char *pcVar10;\n  bool bVar11;\n  ushort *puVar12;\n  int *piVar13;\n  ushort *puVar14;\n  int *piVar15;\n  ushort local_3c;\n  ushort local_3a;\n  ushort local_38;\n  ushort local_36;\n  ushort local_34;\n  ushort local_32;\n  int local_30;\n  char *local_2c [2];\n  \n  uVar4 = *DAT_00005108;\n  iVar5 = FUN_000056b0();\n  puVar1 = PTR_DAT_000053d8;\n  pcVar6 = (char *)FUN_000056a0(uVar4,PTR_DAT_000053d4);\n  puVar2 = PTR_DAT_000053e0;\n  if (pcVar6 == (char *)0x0) {\n    *(undefined4 *)PTR_DAT_000053dc = 0;\n    *(undefined4 *)PTR_DAT_000053e4 = 0;\n    puVar3 = DAT_000053e8;\n    uVar4 = *(undefined4 *)puVar1;\n    *DAT_000053e8 = puVar2;\n    puVar3[1] = puVar2;\n    FUN_00005780(uVar4);\n    *(undefined4 *)puVar1 = 0;\n  }\n  else if ((*(int *)puVar1 == 0) || (iVar7 = FUN_00004e52(), iVar7 != 0)) {\n    FUN_00005780(*(undefined4 *)puVar1);\n    iVar7 = FUN_00005ecc(pcVar6);\n    iVar7 = FUN_00004bd0(uVar4,iVar7 + 1);\n    *(int *)puVar1 = iVar7;\n    if (iVar7 != 0) {\n      FUN_00005ebc(iVar7,pcVar6);\n    }\n    if (*pcVar6 == ':') {\n      pcVar6 = pcVar6 + 1;\n    }\n    iVar7 = FUN_00005e68(pcVar6,PTR_s__10__0_9_____n_000053f0,PTR_DAT_000053ec,&local_30);\n    if (0 < iVar7) {\n      pcVar10 = pcVar6 + local_30;\n      if (pcVar6[local_30] == '-') {\n        pcVar10 = pcVar10 + 1;\n        iVar7 = -1;\n      }\n      else {\n        if (pcVar6[local_30] == '+') {\n          pcVar10 = pcVar10 + 1;\n        }\n        iVar7 = 1;\n      }\n      local_3a = 0;\n      local_38 = 0;\n      puVar12 = &local_3a;\n      piVar13 = &local_30;\n      puVar14 = &local_38;\n      piVar15 = &local_30;\n      iVar8 = FUN_00005e68(pcVar10,PTR_s__hu_n__hu_n__hu_n_000053f4,&local_3c,&local_30,&local_3a,\n                           &local_30,&local_38,&local_30);\n      puVar1 = PTR_DAT_00005400;\n      if (0 < iVar8) {\n        *(uint *)(iVar5 + 0x28) =\n             ((uint)local_3c * 0xe10 + (uint)local_3a * 0x3c + (uint)local_38) * iVar7;\n        puVar3 = DAT_000053e8;\n        *DAT_000053e8 = PTR_DAT_000053ec;\n        pcVar10 = pcVar10 + local_30;\n        iVar7 = FUN_00005e68(pcVar10,PTR_s__10__0_9_____n_000053f0,puVar1,&local_30,puVar12,piVar13,\n                             puVar14,piVar15);\n        if (iVar7 < 1) {\n          puVar3[1] = *puVar3;\n          *(undefined4 *)PTR_DAT_000053dc = *(undefined4 *)(iVar5 + 0x28);\n          *(undefined4 *)PTR_DAT_000053e4 = 0;\n        }\n        else {\n          puVar3[1] = puVar1;\n          pcVar6 = pcVar10 + local_30;\n          if (pcVar10[local_30] == '-') {\n            pcVar6 = pcVar6 + 1;\n            iVar7 = -1;\n          }\n          else {\n            if (pcVar10[local_30] == '+') {\n              pcVar6 = pcVar6 + 1;\n            }\n            iVar7 = 1;\n          }\n          local_3c = 0;\n          local_3a = 0;\n          local_38 = 0;\n          local_30 = 0;\n          iVar8 = FUN_00005e68(pcVar6,PTR_s__hu_n__hu_n__hu_n_000053f4,&local_3c,&local_30,&local_3a\n                               ,&local_30,&local_38,&local_30);\n          if (iVar8 < 1) {\n            iVar7 = *(int *)(iVar5 + 0x28) + -0xe10;\n          }\n          else {\n            iVar7 = ((uint)local_3c * 0xe10 + (uint)local_3a * 0x3c + (uint)local_38) * iVar7;\n          }\n          *(int *)(iVar5 + 0x50) = iVar7;\n          pcVar6 = pcVar6 + local_30;\n          bVar11 = false;\n          iVar7 = iVar5;\n          while( true ) {\n            if (*pcVar6 == ',') {\n              pcVar6 = pcVar6 + 1;\n            }\n            cVar9 = *pcVar6;\n            if (cVar9 == 'M') {\n              iVar8 = FUN_00005e68(pcVar6,PTR_s_M_hu_n__hu_n__hu_n_000053f8,&local_36,&local_30,\n                                   &local_34,&local_30,&local_32,&local_30);\n              if (iVar8 != 3) {\n                return;\n              }\n              if (0xb < local_36 - 1) {\n                return;\n              }\n              if (4 < local_34 - 1) {\n                return;\n              }\n              if (6 < local_32) {\n                return;\n              }\n              *(uint *)(iVar7 + 0xc) = (uint)local_36;\n              *(uint *)(iVar7 + 0x10) = (uint)local_34;\n              *(undefined *)(iVar7 + 8) = 0x4d;\n              *(uint *)(iVar7 + 0x14) = (uint)local_32;\n              pcVar10 = pcVar6 + local_30;\n            }\n            else {\n              if (cVar9 == 'J') {\n                pcVar6 = pcVar6 + 1;\n              }\n              else {\n                cVar9 = 'D';\n              }\n              local_32 = FUN_00005fd8(pcVar6,local_2c,10);\n              pcVar10 = local_2c[0];\n              if (local_2c[0] == pcVar6) {\n                if (bVar11) {\n                  *(undefined *)(iVar5 + 0x30) = 0x4d;\n                  *(undefined4 *)(iVar5 + 0x34) = 0xb;\n                  *(undefined4 *)(iVar5 + 0x38) = 1;\n                  *(undefined4 *)(iVar5 + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(iVar5 + 8) = 0x4d;\n                  *(undefined4 *)(iVar5 + 0xc) = 3;\n                  *(undefined4 *)(iVar5 + 0x10) = 2;\n                  *(undefined4 *)(iVar5 + 0x14) = 0;\n                }\n              }\n              else {\n                *(char *)(iVar7 + 8) = cVar9;\n                *(uint *)(iVar7 + 0x14) = (uint)local_32;\n              }\n            }\n            local_3c = 2;\n            local_3a = 0;\n            local_38 = 0;\n            local_30 = 0;\n            if (*pcVar10 == '/') {\n              FUN_00005e68(pcVar10,PTR_DAT_000053fc,&local_3c,&local_30,&local_3a,&local_30,\n                           &local_38,&local_30);\n            }\n            *(uint *)(iVar7 + 0x18) =\n                 (uint)local_3c * 0xe10 + (uint)local_3a * 0x3c + (uint)local_38;\n            iVar7 = iVar7 + 0x28;\n            pcVar6 = pcVar10 + local_30;\n            if (bVar11) break;\n            bVar11 = true;\n          }\n          FUN_00004f98(*(undefined4 *)(iVar5 + 4));\n          iVar7 = *(int *)(iVar5 + 0x28);\n          *(int *)PTR_DAT_000053dc = iVar7;\n          iVar7 = *(int *)(iVar5 + 0x50) - iVar7;\n          if (iVar7 != 0) {\n            iVar7 = 1;\n          }\n          *(int *)PTR_DAT_000053e4 = iVar7;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00005780",
                "FUN_00005ecc",
                "FUN_00004bd0",
                "FUN_00005e68",
                "FUN_00004e52",
                "FUN_00005fd8",
                "FUN_000056b0",
                "FUN_00005ebc",
                "FUN_00004f98",
                "FUN_000056a0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00005100",
            "calling": [
                "FUN_000047e4"
            ],
            "imported": false,
            "current_name": "FUNC_00005100"
        },
        "FUN_00005584": {
            "renaming": {
                "FUN_00005584": "divide_and_remainder_00005584",
                "param_1": "result",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "code": "void divide_and_remainder_00005584(uint *result, uint dividend, uint divisor)\n{\n  uint quotient;\n  uint remainder;\n  quotient = dividend / divisor;\n  remainder = dividend % divisor;\n  if ((int)dividend < 0 && remainder != 0) {\n    quotient--;\n    remainder += divisor;\n  }\n  else if ((int)remainder < 0) {\n    quotient++;\n    remainder -= divisor;\n  }\n  *result = quotient;\n  result[1] = remainder;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005584",
            "calling": [
                "FUN_00004634"
            ],
            "imported": false,
            "current_name": "divide_and_remainder_00005584"
        },
        "FUN_00004248": {
            "renaming": {
                "FUN_00004248": "initialize_thing_00004248",
                "param_1": "base_address",
                "param_2": "thing_count",
                "puVar1": "thing_ptr",
                "iVar2": "thing_offset"
            },
            "code": "undefined4 * initialize_thing_00004248(undefined4 base_address, int thing_count)\n{\n  undefined4 *thing_ptr;\n  int thing_offset = (thing_count - 1) * 0x68;\n  thing_ptr = (undefined4 *)FUN_00004bd0(base_address, thing_offset + 0x74);\n  if (thing_ptr != (undefined4 *)0x0) {\n    *thing_ptr = 0;\n    thing_ptr[1] = thing_count;\n    thing_ptr[2] = thing_ptr + 3;\n    FUN_00004622(thing_ptr + 3, 0, thing_offset + 0x68);\n  }\n  return thing_ptr;\n}",
            "called": [
                "FUN_00004bd0",
                "FUN_00004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004248",
            "calling": [
                "FUN_00004314"
            ],
            "imported": false,
            "current_name": "initialize_thing_00004248"
        },
        "FUN_00001da2": {
            "renaming": {
                "FUN_00001da2": "getBitsFromRight_00001da2",
                "param_1": "input",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "ushort getBitsFromRight_00001da2(ushort input)\n{\n    ushort bitsToGet = 7;\n    ushort shiftedInput = input >> 6;\n    ushort result = shiftedInput & bitsToGet;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001da2",
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "imported": false,
            "current_name": "getBitsFromRight_00001da2"
        },
        "FUN_00001ec4": {
            "renaming": {
                "FUN_00001ec4": "calculate_and_store_result_00001ec4",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "FUN_00001e0c": "calculate",
                "FUN_00001e44": "store_result"
            },
            "code": "void calculate_and_store_result_00001ec4(int input1, int input2)\n{\n  int result = calculate(input1, input2);\n  store_result(input1, input2, result);\n  return;\n}",
            "called": [
                "FUN_00001e44",
                "FUN_00001e0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001ec4",
            "calling": [
                "FUN_00001f80"
            ],
            "imported": false,
            "current_name": "calculate_and_store_result_00001ec4"
        },
        "FUN_00002744": {
            "renaming": {
                "FUN_00002744": "write_data_00002744",
                "param_1": "data",
                "param_2": "value",
                "DAT_00002790": "data_array_ptr",
                "DAT_00002794": "data_array_ptr_2"
            },
            "code": "void write_data_00002744(byte data, uint value) {\n  if (data < 0) {\n    *(char *)((data & 0xf) + DAT_00002790 + 0x14) = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)data + DAT_00002794 + 0x300) = (char)((value & 0xff) << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002744",
            "calling": [
                "FUN_00002894"
            ],
            "imported": false,
            "current_name": "write_data_00002744"
        },
        "FUN_00002624": {
            "renaming": {
                "FUN_00002624": "process_data_00002624",
                "param_1": "input_data",
                "local_10": "data_from_function",
                "uStack_c": "stack_variable",
                "FUN_0000281c": "get_data_from_function",
                "FUN_0000443c": "copy_data"
            },
            "code": "int process_data_00002624(undefined4 input_data)\n{\n    undefined4 data_from_function;\n    undefined4 stack_variable;\n\n    data_from_function = get_data_from_function();\n    stack_variable = 0;\n    copy_data(&data_from_function, input_data);\n    return 0;\n}",
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002624",
            "calling": [
                "FUN_00003444"
            ],
            "imported": false,
            "current_name": "process_data_00002624"
        },
        "FUN_00001e0c": {
            "renaming": {
                "FUN_00001e0c": "get_bits_at_position_00001e0c",
                "param_1": "starting_position",
                "param_2": "value",
                "PTR_DAT_00001e40": "data_pointer"
            },
            "code": "uint get_bits_at_position_00001e0c(int starting_position, uint value) {\n    int index = ((int)value >> 3) + starting_position * 4;\n    uint* ptr = (uint *)(PTR_DAT_00001e40 + index * 4);\n    uint shifted_value = (value & 7) << 2;\n    uint masked_value = *ptr >> shifted_value & 0xf;\n    return masked_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001e0c",
            "calling": [
                "FUN_00002028",
                "FUN_00001ec4"
            ],
            "imported": false,
            "current_name": "get_bits_at_position_00001e0c"
        },
        "FUN_00000ef8": {
            "renaming": {
                "FUN_00000ef8": "do_nothing_00000ef8"
            },
            "code": "\nvoid do_nothing_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000ef8",
            "calling": [
                "FUN_00000f04"
            ],
            "imported": false,
            "current_name": "do_nothing_00000ef8"
        },
        "FUN_000041d0": {
            "renaming": {
                "FUN_000041d0": "process_data_000041d0",
                "param_1": "data_length",
                "pcVar1": "data_processor",
                "iVar2": "data_ptr",
                "uVar3": "item_result",
                "iVar4": "item_length",
                "iVar8": "item_count",
                "piVar5": "list_ptr",
                "iVar6": "list_item_ptr",
                "uVar7": "result",
                "puVar9": "data_ptr_start"
            },
            "code": "uint process_data_000041d0(int data_length, undefined4 param_2, undefined4 param_3)\n{\n  code *data_processor;\n  int data_ptr;\n  uint result = 0;\n  int *list_ptr;\n  int list_item_ptr;\n  int item_count;\n  undefined *data_ptr_start;\n  \n  data_processor = DAT_000041ec;\n  if (data_length == 0) {\n    data_ptr = *(int *)PTR_DAT_000041e8;\n    list_ptr = (int *)(data_ptr + 0x48);\n    data_ptr_start = PTR_DAT_000041e8;\n    do {\n      item_count = list_ptr[1];\n      list_item_ptr = list_ptr[2];\n      while (item_count = item_count + -1, -1 < item_count) {\n        if ((1 < *(ushort *)(list_item_ptr + 0xc)) && (*(short *)(list_item_ptr + 0xe) + 1 != 0)) {\n          uint item_result = (*data_processor)(data_ptr,list_item_ptr,param_3,*(short *)(list_item_ptr + 0xe) + 1,data_ptr_start);\n          result = result | item_result;\n        }\n        list_item_ptr = list_item_ptr + 0x68;\n      }\n      list_ptr = (int *)*list_ptr;\n    } while (list_ptr != (int *)0x0);\n    return result;\n  }\n  result = FUN_00004158(*DAT_000041f0,data_length);\n  return result;\n}",
            "called": [
                "FUN_00004158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000041d0",
            "calling": [
                "FUN_00002e48"
            ],
            "imported": false,
            "current_name": "process_data_000041d0"
        },
        "FUN_0000459c": {
            "renaming": {
                "FUN_0000459c": "execute_functions_in_range_0000459c",
                "puVar1": "start_ptr",
                "puVar2": "end_ptr",
                "iVar3": "num_functions",
                "ppcVar4": "function_ptr_array",
                "iVar5": "i"
            },
            "code": "void execute_functions_in_range_0000459c(void)\n{\n  undefined *start_ptr = PTR_DAT_000045d4;\n  undefined *end_ptr = PTR_DAT_000045e0;\n  int num_functions = (int)end_ptr - (int)start_ptr;\n  code **function_ptr_array = (code **)start_ptr;\n  for (int i = 0; i < num_functions; i++) {\n    (**function_ptr_array)();\n    function_ptr_array++;\n  }\n  FUN_00000410();\n  function_ptr_array = (code **)PTR_DAT_000045dc;\n  num_functions = (int)PTR_DAT_000045e0 - (int)PTR_DAT_000045dc;\n  for (int i = 0; i < num_functions; i++) {\n    (**function_ptr_array)();\n    function_ptr_array++;\n  }\n  return;\n}",
            "called": [
                "FUN_00000410"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000459c",
            "calling": [
                "FUN_0000099c"
            ],
            "imported": false,
            "current_name": "execute_functions_in_range_0000459c"
        },
        "FUN_000014c4": {
            "renaming": {
                "FUN_000014c4": "set_data_000014c4",
                "param_1": "index",
                "param_2": "value",
                "pbVar1": "data",
                "uVar2": "data_length",
                "uVar3": "calculated_value"
            },
            "code": "void set_data_000014c4(int index, uint32_t value)\n    {\n        byte *data = *(byte **)(PTR_DAT_000015cc + index * 0x20);\n        uint32_t data_length = *(uint32_t *)(PTR_DAT_000015cc + index * 0x20 + 4);\n        \n        data[3] &= 0xf3;\n        data[2] = PTR_DAT_000015cc[index * 0x20 + 0x1d];\n        \n        uint32_t calculated_value = data_length / (value << 4);\n        data[0] = (byte)(calculated_value >> 8) & 0x1f;\n        data[1] = (byte)calculated_value;\n        data[10] = (byte)((data_length << 2) / value + 1 >> 1) & 0x1f;\n        data[0x10] |= 0x88;\n        \n        if ((data[0x10] & 0x70) == 0) {\n            data[0x13] = 0;\n        }\n        else {\n            data[0x13] = (char)(2 << (data[0x10] >> 4 & 7)) - 1;\n        }\n        \n        data[0x15] = 1;\n        data[0x11] = 0xc0;\n        data[3] |= 0x2c;\n        \n        FUN_00001318((int)(char)PTR_DAT_000015cc[index * 0x20 + 0x14]);\n    }",
            "called": [
                "FUN_00001318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000014c4",
            "calling": [
                "FUN_000013b8"
            ],
            "imported": false,
            "current_name": "set_data_000014c4"
        },
        "FUN_00004b34": {
            "renaming": {
                "FUN_00004b34": "add_item_to_list_00004b34",
                "param_1": "list_start",
                "param_2": "item_size",
                "param_3": "item_value",
                "param_4": "error_code",
                "puVar1": "ptr",
                "piVar2": "prev_ptr",
                "extraout_r1": "next_ptr",
                "ppiVar3": "prev_ptr",
                "ppiVar4": "next_ptr",
                "ppiVar5": "list_ptr",
                "ppiVar6": "item_ptr",
                "bVar7": "is_last_item"
            },
            "code": "void add_item_to_list_00004b34(int *list_start, int item_size, int item_value, int error_code)\n{\n    // Check if list is empty\n    if (item_size == 0) {\n        return;\n    }\n    \n    int **item_ptr = (int **)(item_size - 4);\n    if (*(int *)(item_size - 4) < 0) {\n        item_ptr = (int **)((int)item_ptr + *(int *)(item_size - 4));\n    }\n    \n    // Add item to list\n    add_item_to_list_00004b34_helper(&list_start, item_ptr, item_value);\n    \n    // Call function to handle errors\n    handle_errors(error_code, item_ptr, list_start);\n}\n\nvoid add_item_to_list_00004b34_helper(int ***list_start, int **item_ptr, int item_value)\n{\n    int **list_ptr = **list_start;\n    if (list_ptr == (int **)0x0) {\n        item_ptr[1] = (int *)0x0;\n        ***list_start = item_ptr;\n        list_ptr = *extraout_r1;\n        item_ptr = **list_start;\n    }\n    else if (item_ptr < list_ptr) {\n        int **prev_ptr = *item_ptr;\n        int **next_ptr = (int **)((int)item_ptr + (int)prev_ptr);\n        bool is_last_item = list_ptr == next_ptr;\n        if (is_last_item) {\n            next_ptr = *list_ptr;\n            list_ptr = (int **)list_ptr[1];\n        }\n        item_ptr[1] = (int *)list_ptr;\n        if (is_last_item) {\n            next_ptr = (int **)((int)next_ptr + (int)prev_ptr);\n            *item_ptr = (int *)next_ptr;\n        }\n        ***list_start = item_ptr;\n    }\n    else {\n        do {\n            int **prev_ptr = list_ptr;\n            list_ptr = (int **)prev_ptr[1];\n            if (list_ptr == (int **)0x0) break;\n        } while (list_ptr <= item_ptr);\n        int **prev_ptr = *list_ptr;\n        if ((int **)((int)list_ptr + (int)prev_ptr) == item_ptr) {\n            prev_ptr = (int **)((int)prev_ptr + (int)*item_ptr);\n            *list_ptr = (int *)prev_ptr;\n            if (next_ptr == (int **)((int)list_ptr + (int)prev_ptr)) {\n                int *next_item_ptr = *next_ptr;\n                list_ptr[1] = next_ptr[1];\n                prev_ptr = (int **)((int)prev_ptr + (int)next_item_ptr);\n                *list_ptr = (int *)prev_ptr;\n            }\n        }\n        else if (item_ptr < (int **)((int)list_ptr + (int)prev_ptr)) {\n            *param_1 = 0xc;\n        }\n        else {\n            int **next_ptr = (int **)((int)item_ptr + (int)*item_ptr);\n            bool is_last_item = list_ptr == next_ptr;\n            if (is_last_item) {\n                next_ptr = *list_ptr;\n                list_ptr = (int **)list_ptr[1];\n            }\n            item_ptr[1] = (int *)list_ptr;\n            if (is_last_item) {\n                next_ptr = (int **)((int)next_ptr + (int)*item_ptr);\n                *item_ptr = (int *)next_ptr;\n            }\n            prev_ptr[1] = (int *)item_ptr;\n        }\n    }\n}\n\nvoid handle_errors(int error_code, int **item_ptr, int *list_start)\n{\n    if (error_code == 0) {\n        return;\n    }\n    \n    if (item_ptr == (int **)list_start) {\n        *list_start = (int *)item_ptr[1];\n    }\n    else {\n        int **prev_ptr = *item_ptr;\n        int **next_ptr = (int **)((int)item_ptr + (int)prev_ptr);\n        if (list_start == next_ptr) {\n            next_ptr = *list_start;\n            list_start = (int *)list_start[1];\n        }\n        prev_ptr[1] = (int *)next_ptr;\n    }\n    \n    free(item_ptr);\n}\n",
            "called": [
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004b34",
            "calling": [
                "FUN_00005780",
                "FUN_00006192",
                "FUN_0000404c",
                "FUN_00006768",
                "FUN_000054a8",
                "FUN_000060cc"
            ],
            "imported": false,
            "current_name": "add_item_to_list_00004b34"
        },
        "FUN_000004f2": {
            "renaming": {
                "FUN_000004f2": "set_param_to_19_000004f2",
                "*param_1": "*param",
                "0x13": "19"
            },
            "code": "int set_param_to_19_000004f2(int *param)\n{\n    int value_to_set = 19;\n    *param = value_to_set;\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000004f2",
            "calling": [
                "FUN_00004e26",
                "FUN_00004dee"
            ],
            "imported": false,
            "current_name": "set_param_to_19_000004f2"
        },
        "FUN_00004e66": {
            "renaming": {
                "FUN_00004e66": "compare_strings_00004e66",
                "param_1": "string1",
                "param_2": "length1",
                "param_3": "length2",
                "pbVar1": "current_char1",
                "pbVar2": "current_char2",
                "uVar3": "char_code1",
                "PTR_00000008": "string2",
                "DAT_0000000c": "difference"
            },
            "code": "int compare_strings_00004e66(byte *string1, int length1, byte *PTR_00000008, int length2)\n{\n  byte *current_char1;\n  byte *current_char2;\n  uint char_code1;\n  uint char_code2;\n  int DAT_0000000c = 0;\n\n  if (length1 != 0 && length2 != 0)\n  {\n    current_char1 = string1;\n    current_char2 = PTR_00000008;\n    do\n    {\n      char_code1 = (uint)*current_char1;\n      char_code2 = (uint)*current_char2;\n      if (char_code1 != char_code2 || current_char1 + 1 == string1 + length1)\n      {\n        break;\n      }\n      current_char1++;\n      current_char2++;\n    } while (char_code1 != 0);\n    DAT_0000000c = char_code1 - char_code2;\n  }\n  return DAT_0000000c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004e66",
            "calling": [
                "FUN_00003524",
                "FUN_0000562c"
            ],
            "imported": false,
            "current_name": "compare_strings_00004e66"
        },
        "FUN_00005ecc": {
            "renaming": {
                "FUN_00005ecc": "find_end_of_string_00005ecc",
                "param_1": "input_string",
                "pcVar1": "current_char",
                "pcVar2": "current_position",
                "pcVar3": "current_position"
            },
            "code": "char* find_end_of_string_00005ecc(char* input_string) {\n  char current_char;\n  char* current_position = input_string;\n  do {\n    current_position++;\n    current_char = *current_position;\n  } while (current_char != '\\0');\n  return current_position + (-1 - (int)input_string);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005ecc",
            "calling": [
                "FUN_00005100",
                "FUN_00005e68"
            ],
            "imported": false,
            "current_name": "find_end_of_string_00005ecc"
        },
        "FUN_0000129c": {
            "renaming": {
                "FUN_0000129c": "initialize_ptr_0000129c",
                "param_1": "ptr",
                "FUN_00002434": "set_ptr_value"
            },
            "code": "void initialize_ptr_0000129c(void* ptr)\n{\n  set_ptr_value(ptr, 1);\n  return;\n}",
            "called": [
                "FUN_00002434"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000129c",
            "calling": [
                "FUN_000012e2"
            ],
            "imported": false,
            "current_name": "initialize_ptr_0000129c"
        },
        "FUN_00001628": {
            "renaming": {
                "FUN_00001628": "check_and_execute_function_00001628",
                "param_1": "index",
                "PTR_DAT_00001680": "flags_data_ptr",
                "PTR_DAT_00001684": "function_data_ptr",
                "FUN_00001348": "perform_cleanup"
            },
            "code": "void check_and_execute_function_00001628(int index) {\n\tint* function_ptr = *(int*)(PTR_DAT_00001684 + index * 8);\n\tbyte* flags_ptr = *(byte*)(*(int*)(PTR_DAT_00001680 + index * 0x20) + 4);\n\tbyte flags = *flags_ptr;\n\tif ((flags & 0x20) != 0 && function_ptr != 0) {\n\t\tcode* function = *(code**)function_ptr;\n\t\tint arg1 = *(int*)(PTR_DAT_00001684 + index * 8 + 4);\n\t\tbyte arg2 = *(byte*)(*(int*)(PTR_DAT_00001680 + index * 0x20) + 7);\n\t\tfunction(arg1, arg2);\n\t}\n\tperform_cleanup();\n\treturn;\n}",
            "called": [
                "FUN_00001348"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001628",
            "calling": [
                "FUN_00001688"
            ],
            "imported": false,
            "current_name": "check_and_execute_function_00001628"
        },
        "FUN_00001748": {
            "renaming": {
                "FUN_00001748": "set_flag_00001748",
                "param_1": "flag_value",
                "*(byte *)(DAT_00001774 + 3)": "flag_ptr",
                "current_flag_value": "current_flag_value",
                "masked_flag_value": "masked_flag_value",
                "new_flag_value": "new_flag_value"
            },
            "code": "void set_flag_00001748(byte flag_value){\n  byte* *(byte *)(DAT_00001774 + 3) = (byte *)(DAT_00001774 + 3);\n  byte current_flag_value = **(byte *)(DAT_00001774 + 3);\n  byte masked_flag_value = current_flag_value & 0x1f;\n  byte new_flag_value = flag_value | masked_flag_value;\n  **(byte *)(DAT_00001774 + 3) = new_flag_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001748",
            "calling": [
                "FUN_000019c0",
                "FUN_00001bb8",
                "FUN_000018bc",
                "FUN_00001960",
                "FUN_0000191c"
            ],
            "imported": false,
            "current_name": "set_flag_00001748"
        },
        "FUN_0000294c": {
            "renaming": {
                "FUN_0000294c": "set_flag_for_data_0000294c",
                "DAT_0000296c": "data_ptr"
            },
            "code": "void set_flag_for_data_0000294c(void)\n{\n  uint32_t* DAT_0000296c = (uint32_t*)(DAT_0000296c + 0x14);\n  uint32_t flag = 0x10;\n  *DAT_0000296c |= flag;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000294c",
            "calling": [
                "FUN_000027b0",
                "FUN_000026d8"
            ],
            "imported": false,
            "current_name": "set_flag_for_data_0000294c"
        },
        "FUN_00005790": {
            "renaming": {
                "FUN_00005790": "do_nothing_with_pointer_00005790",
                "PTR_DAT_00005798": "PTR_DATA"
            },
            "code": "void do_nothing_with_pointer_00005790(void)\n{\n  do_nothing(PTR_DAT_00005798);\n  return;\n}",
            "called": [
                "FUN_000045e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005790",
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "imported": false,
            "current_name": "do_nothing_with_pointer_00005790"
        },
        "FUN_00000534": {
            "renaming": {
                "FUN_00000534": "is_valid_input_00000534",
                "param_1": "input",
                "param_2": "input_length",
                "uVar1": "is_valid"
            },
            "code": "int is_valid_input_00000534(int *input, int input_length)\n{\n    int is_valid = 0;\n    if (input_length >= 0 && input_length <= 2)\n    {\n        is_valid = 1;\n    }\n    *input = 0;\n    return is_valid;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000534",
            "calling": [
                "FUN_00005700"
            ],
            "imported": false,
            "current_name": "is_valid_input_00000534"
        },
        "FUN_000017dc": {
            "renaming": {
                "FUN_000017dc": "initialize_device_settings_000017dc",
                "FUN_000016c8": "set_device_settings",
                "DAT_00001820": "DAT_device_settings",
                "DAT_00001824": "PTR_device_config",
                "DAT_00001828": "PTR_device_state"
            },
            "code": "void initialize_device_settings_000017dc(void)\n{\n  set_device_settings(DAT_00001820, 29);\n  if ((*(uint *)(DAT_00001820 + 16) & 0x100) == 0) {\n    *(undefined4 *)(DAT_00001820 + 16) = 0x104;\n  }\n  *DAT_00001824 = *DAT_00001824 & 0xfff3ffff | 0x80000;\n  return;\n}",
            "called": [
                "FUN_000016c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000017dc",
            "calling": [
                "FUN_00001c84"
            ],
            "imported": false,
            "current_name": "initialize_device_settings_000017dc"
        },
        "FUN_00000410": {
            "renaming": {
                "FUN_00000410": "initialize_system_00000410",
                "FUN_00000df4": "initialize_components"
            },
            "code": "void initialize_system_00000410(void)\n{\n  initialize_components();\n  return;\n}",
            "called": [
                "FUN_00000df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000410",
            "calling": [
                "FUN_0000459c"
            ],
            "imported": false,
            "current_name": "initialize_system_00000410"
        },
        "FUN_000005ca": {
            "renaming": {
                "FUN_000005ca": "get_next_item_000005ca",
                "param_1": "item_ptr",
                "puVar1": "next_item_ptr"
            },
            "code": "undefined4* get_next_item_000005ca(int* item_ptr) {\n  undefined4* next_item_ptr;\n  \n  if (*item_ptr == 0) {\n    next_item_ptr = NULL;\n  }\n  else {\n    next_item_ptr = *(undefined4**)*item_ptr;\n    if (next_item_ptr == (undefined4*)*item_ptr) {\n      *item_ptr = 0;\n    }\n    else {\n      *(undefined4*)*item_ptr = *next_item_ptr;\n    }\n  }\n  return next_item_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000005ca",
            "calling": [
                "FUN_00000698"
            ],
            "imported": false,
            "current_name": "get_next_item_000005ca"
        },
        "FUN_00005ff8": {
            "renaming": {
                "FUN_00005ff8": "do_nothing_with_data_00005ff8",
                "DAT_00006000": "PTR_data"
            },
            "code": "void do_nothing_with_data_00005ff8(void)\n{\n  do_nothing_with_data_00005ff8(DAT_00006000);\n  return;\n}",
            "called": [
                "FUN_000045ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005ff8",
            "calling": [
                "FUN_0000562c"
            ],
            "imported": false,
            "current_name": "do_nothing_with_data_00005ff8"
        },
        "FUN_00002714": {
            "renaming": {
                "FUN_00002714": "set_bit_at_index_00002714",
                "param_1": "bit_index",
                "DAT_00002740": "data_ptr"
            },
            "code": "void set_bit_at_index_00002714(uint8_t bit_index){\n                    uint32_t* ptr = (uint32_t*)(DAT_00002740 + ((uint32_t)bit_index >> 5) * 4);\n                    uint32_t bit_mask = 1 << (bit_index & 0x1f);\n                    *ptr = bit_mask;\n                  }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002714",
            "calling": [
                "FUN_00002894"
            ],
            "imported": false,
            "current_name": "set_bit_at_index_00002714"
        },
        "FUN_000020e0": {
            "renaming": {
                "FUN_000020e0": "initialize_data_000020e0",
                "FUN_00002028": "initialize_array",
                "DAT_000020f0": "PTR_data_array"
            },
            "code": "void initialize_data_000020e0(void)\n{\n  initialize_array(DAT_000020f0, 2);\n  return;\n}",
            "called": [
                "FUN_00002028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000020e0",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_000020e0"
        },
        "FUN_00005fec": {
            "renaming": {
                "FUN_00005fec": "do_nothing_with_data_00005fec",
                "DAT_00005ff4": "DAT_data",
                "do_nothing_000045e8": "do_nothing"
            },
            "code": "void do_nothing_with_data_00005fec(void)\n{\n  do_nothing(DAT_00005ff4);\n  return;\n}",
            "called": [
                "FUN_000045e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005fec",
            "calling": [
                "FUN_0000562c"
            ],
            "imported": false,
            "current_name": "do_nothing_with_data_00005fec"
        },
        "FUN_00004f84": {
            "renaming": {
                "FUN_00004f84": "parse_number_00004f84",
                "param_1": "input_string",
                "param_2": "end_ptr",
                "param_3": "base",
                "uVar1": "result",
                "uVar2": "digit",
                "uVar3": "flag",
                "uVar4": "digit_value",
                "iVar5": "state",
                "uVar6": "max_value",
                "uVar7": "max_quotient",
                "pbVar8": "previous_char_ptr",
                "pbVar9": "current_char_ptr",
                "PTR_DAT_00004f7c": "DIGIT_VALUES",
                "DAT_00004f94": "ERROR_CODE"
            },
            "code": "uint parse_number_00004f84(byte* input_string, byte** end_ptr, uint base) {\n  uint result = 0;\n  bool is_negative = false;\n  byte* current_char = input_string;\n  while (isspace(*current_char)) {\n    current_char++;\n  }\n  if (*current_char == '-') {\n    is_negative = true;\n    current_char++;\n  }\n  else if (*current_char == '+') {\n    current_char++;\n  }\n  if (base == 0) {\n    if (*current_char == '0') {\n      if (*(current_char + 1) == 'x' || *(current_char + 1) == 'X') {\n        base = 16;\n        current_char += 2;\n      }\n      else {\n        base = 8;\n      }\n    }\n    else {\n      base = 10;\n    }\n  }\n  while (true) {\n    uint digit_value;\n    if (*current_char >= '0' && *current_char <= '9') {\n      digit_value = *current_char - '0';\n    }\n    else if (*current_char >= 'a' && *current_char <= 'z') {\n      digit_value = *current_char - 'a' + 10;\n    }\n    else if (*current_char >= 'A' && *current_char <= 'Z') {\n      digit_value = *current_char - 'A' + 10;\n    }\n    else {\n      break;\n    }\n    if (digit_value >= base) {\n      break;\n    }\n    result = result * base + digit_value;\n    current_char++;\n  }\n  if (end_ptr != NULL) {\n    *end_ptr = current_char;\n  }\n  if (is_negative) {\n    return -result;\n  }\n  else {\n    return result;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004f84",
            "calling": [
                "FUN_0000328c",
                "FUN_00004042"
            ],
            "imported": false,
            "current_name": "parse_number_00004f84"
        },
        "FUN_000028f0": {
            "renaming": {
                "FUN_000028f0": "get_dat_offset_and_add_one_000028f0",
                "DAT_0000290c": "data_offset"
            },
            "code": "int get_dat_offset_and_add_one_000028f0(){\n    int* data_pointer = (int*)(DAT_0000290c + 8);\n    int data_value = *data_pointer;\n    int result = data_value + 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000028f0",
            "calling": [
                "FUN_00002690"
            ],
            "imported": false,
            "current_name": "get_dat_offset_and_add_one_000028f0"
        },
        "FUN_00004f98": {
            "renaming": {
                "FUN_00004f98": "calculate_weekday_of_year_00004f98",
                "param_1": "year",
                "puVar1": "calendar_data",
                "uVar2": "result",
                "uVar3": "temp1",
                "iVar4": "temp2",
                "puVar5": "month_data_ptr",
                "iVar6": "days_since_1900",
                "uVar7": "leap_year",
                "iVar8": "temp3",
                "iVar9": "temp4",
                "uVar10": "leading_zeroes",
                "PTR_DAT_000050e4": "month_offsets",
                "DAT_000050e0": "days_per_week"
            },
            "code": "uint32_t calculate_weekday_of_year_00004f98(uint32_t year)\n{\n  uint32_t *calendar_data = (uint32_t *)FUN_000056b0();\n  if (year < 0x7b2)\n  {\n    return 0;\n  }\n  else\n  {\n    uint32_t leading_zeroes = count_leading_zeroes(year % 400);\n    uint32_t days_since_1900 = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) + (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    calendar_data[1] = year;\n    do\n    {\n      uint32_t month_data = calendar_data[5];\n      if (*(char *)(calendar_data + 2) == 'J')\n      {\n        uint32_t leap_year = (((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0);\n        uint32_t days_in_month = (int)month_data < 0x3c ? 0 : 1;\n        days_in_month += days_since_1900 + month_data + -1;\n        days_in_month += leap_year;\n        days_since_1900 = days_in_month;\n      }\n      else if (*(char *)(calendar_data + 2) == 'D')\n      {\n        days_since_1900 += month_data;\n      }\n      else\n      {\n        uint32_t leap_year = ((year & 3) == 0) && (year % 100 != 0);\n        uint32_t month_index = leading_zeroes >> 5;\n        month_index = leap_year ? 1 : month_index;\n        uint32_t month_offset = 0;\n        for (int i = 1; i <= calendar_data[3]; i++)\n        {\n          month_offset += *(int *)(PTR_DAT_000050e4 + (i * 4) + (month_index * 0x30) + -4);\n        }\n        uint32_t days_in_month = month_offset + month_data;\n        uint32_t weekday_offset = (days_since_1900 + 4U) % 7;\n        weekday_offset = (calendar_data[4] - 1) * 7 + weekday_offset;\n        while (*(int *)(PTR_DAT_000050e4 + (calendar_data[3] * 4) + (month_index * 0x30) + -4) <= weekday_offset)\n        {\n          weekday_offset -= 7;\n        }\n        days_since_1900 = days_since_1900 + days_in_month + weekday_offset;\n      }\n      uint32_t week_number = calendar_data[10] + DAT_000050e0 * days_since_1900 + calendar_data[6];\n      calendar_data[8] = week_number;\n      calendar_data[9] = (int)week_number >> 0x1f;\n      calendar_data += 10;\n    }\n    while (calendar_data != (uint32_t *)FUN_000056c8());\n    uint32_t days_since_1970 = calendar_data[9];\n    uint32_t leap_seconds = calendar_data[0x13];\n    *calendar_data = (uint32_t)((int)((days_since_1970 - leap_seconds) - (uint32_t)(calendar_data[8] < calendar_data[0x12])) < 0 != (SBORROW4(days_since_1970,leap_seconds) != SBORROW4(days_since_1970 - leap_seconds,(uint32_t)(calendar_data[8] < calendar_data[0x12]))));\n    return 1;\n  }\n}",
            "called": [
                "FUN_000056b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004f98",
            "calling": [
                "FUN_000047e4",
                "FUN_00005100"
            ],
            "imported": false,
            "current_name": "calculate_weekday_of_year_00004f98"
        },
        "FUN_00004dee": {
            "renaming": {
                "FUN_00004dee": "calculate_result_and_print_if_negative_00004dee",
                "param_1": "result",
                "param_2": "data",
                "param_3": "size",
                "param_4": "constant",
                "uVar1": "new_result"
            },
            "code": "int calculate_result_and_print_if_negative_00004dee(int result, int *data, int size, int constant){\n    int is_negative = ((uint16_t)*(data + 0xc) << 0x17) < 0;\n    if (is_negative) {\n        print_result(result, *(int16_t *)(data + 0xe), 0, 2);\n    }\n    *(uint16_t *)(data + 0xc) &= 0xefff;\n    int new_result = calculate_new_result(size, constant);\n    return new_result;\n}",
            "called": [
                "FUN_00000e38",
                "FUN_000004f2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004dee",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_and_print_if_negative_00004dee"
        },
        "FUN_00000fec": {
            "renaming": {
                "FUN_00000fec": "initialize_memory_block_00000fec",
                "param_1": "memory_block",
                "param_2": "block_size",
                "*param_1": "memory_block[0]",
                "param_1[1]": "memory_block[1]",
                "param_1[2]": "memory_block[2]",
                "PTR_s_FAILED_ASSERTION__00001030": "\"Block size must be a power of 2\""
            },
            "code": "void initialize_memory_block_00000fec(uint32_t *memory_block, uint32_t block_size)\n{\n  if ((block_size & (block_size - 1)) != 0) {\n    assert(0 && PTR_s_FAILED_ASSERTION__00001030);\n  }\n  memory_block[0] = 0;\n  memory_block[1] = 0;\n  memory_block[2] = block_size - 1;\n  return;\n}",
            "called": [
                "FUN_00000f04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000fec",
            "calling": [
                "FUN_000010d4"
            ],
            "imported": false,
            "current_name": "initialize_memory_block_00000fec"
        },
        "FUN_00000428": {
            "renaming": {
                "FUN_00000428": "calculate_offset_00000428",
                "*param_1": "*result",
                "param_2": "size",
                "local_c": "current_offset",
                "PTR_Elf32_Rel_ARRAY_00000484": "PTR_Elf32_Rel_ARRAY",
                "DAT_0000048c": "max_offset",
                "DAT_00000488": "min_offset",
                "uVar1": "elf_constant"
            },
            "code": "uint32_t calculate_offset_00000428(uint32_t *result, uint32_t size)\n{\n  uint32_t current_offset = *(uint32_t *)PTR_Elf32_Rel_ARRAY_00000484_00000484;\n  uint32_t DAT_0000048c = DAT_0000048c;\n  uint32_t DAT_00000488 = DAT_00000488;\n  uint32_t elf_constant = FUN_00000cd0();\n  \n  if ((DAT_0000048c < (size + current_offset)) || ((size + current_offset) < DAT_00000488)) {\n    *result = 0xc;\n    current_offset = 0xffffffff;\n  }\n  else {\n    *(uint32_t *)PTR_Elf32_Rel_ARRAY_00000484_00000484 = size + current_offset;\n  }\n  FUN_00000d0c(elf_constant);\n  return current_offset;\n}",
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000428",
            "calling": [
                "FUN_00004bd0"
            ],
            "imported": false,
            "current_name": "calculate_offset_00000428"
        },
        "FUN_000039e8": {
            "renaming": {
                "FUN_000039e8": "get_class_000039e8",
                "param_1": "class_char",
                "puVar1": "result",
                "PTR_s_CLASS_UNKNOWN_00003d20": "CLASS_LOOKUP",
                "DAT_00003cc0": "CLASS_ANY",
                "DAT_00003cc4": "ACT_SERVO",
                "DAT_00003cc8": "ACT_MOTOR",
                "PTR_s_ACT_SERVO_00003ccc": "ACT_SERVO",
                "PTR_s_ACT_MOTOR_00003cd0": "ACT_MOTOR",
                "PTR_s_ACT_SWITCH_00003cd4": "ACT_SWITCH",
                "PTR_s_ACT_DIMMER_00003cd8": "ACT_DIMMER",
                "PTR_s_SENSE_ANY_00003cdc": "SENSE_ANY",
                "PTR_s_SENSE_BTN_00003ce0": "SENSE_BTN",
                "PTR_s_SENSE_TEMP_00003ce4": "SENSE_TEMP",
                "PTR_s_SENSE_HUM_00003ce8": "SENSE_HUM",
                "PTR_s_SENSE_LIGHT_00003cec": "SENSE_LIGHT",
                "PTR_s_SENSE_ACCEL_00003cf0": "SENSE_ACCEL",
                "PTR_s_SENSE_MAG_00003cf4": "SENSE_MAG",
                "PTR_s_SENSE_GYRO_00003cf8": "SENSE_GYRO",
                "PTR_s_SENSE_COLOR_00003cfc": "SENSE_COLOR",
                "PTR_s_SENSE_PRESS_00003d00": "SENSE_PRESS",
                "PTR_s_SENSE_ANALOG_00003d04": "SENSE_ANALOG",
                "PTR_s_SENSE_UV_00003d08": "SENSE_UV",
                "PTR_s_SENSE_OBJTEMP_00003d0c": "SENSE_OBJTEMP",
                "PTR_s_SENSE_PULSE_COUNT_00003d10": "SENSE_PULSE_COUNT",
                "PTR_s_SENSE_DISTANCE_00003d14": "SENSE_DISTANCE",
                "PTR_s_SENSE_CO2_00003d18": "SENSE_CO2"
            },
            "code": "typedef enum {\n    CLASS_UNKNOWN,\n    DAT_00003cc0,\n    DAT_00003cc4,\n    DAT_00003cc8,\n    PTR_s_ACT_SWITCH_00003cd4,\n    PTR_s_ACT_DIMMER_00003cd8,\n    PTR_s_SENSE_ANY_00003cdc,\n    PTR_s_SENSE_BTN_00003ce0,\n    PTR_s_SENSE_TEMP_00003ce4,\n    PTR_s_SENSE_HUM_00003ce8,\n    PTR_s_SENSE_LIGHT_00003cec,\n    PTR_s_SENSE_ACCEL_00003cf0,\n    PTR_s_SENSE_MAG_00003cf4,\n    PTR_s_SENSE_GYRO_00003cf8,\n    PTR_s_SENSE_COLOR_00003cfc,\n    PTR_s_SENSE_PRESS_00003d00,\n    PTR_s_SENSE_ANALOG_00003d04,\n    PTR_s_SENSE_UV_00003d08,\n    PTR_s_SENSE_OBJTEMP_00003d0c,\n    PTR_s_SENSE_PULSE_COUNT_00003d10,\n    PTR_s_SENSE_DISTANCE_00003d14,\n    PTR_s_SENSE_CO2_00003d18\n} class_t;\n\nconst class_t PTR_s_CLASS_UNKNOWN_00003d20[] = {\n    CLASS_UNKNOWN, // 0\n    DAT_00003cc0, // 1\n    DAT_00003cc4, // 2\n    DAT_00003cc8, // 3\n    PTR_s_ACT_SWITCH_00003cd4, // 4\n    PTR_s_ACT_DIMMER_00003cd8, // 5\n    PTR_s_SENSE_ANY_00003cdc, // 6\n    PTR_s_SENSE_BTN_00003ce0, // 7\n    PTR_s_SENSE_TEMP_00003ce4, // 8\n    PTR_s_SENSE_HUM_00003ce8, // 9\n    PTR_s_SENSE_LIGHT_00003cec, // 10\n    PTR_s_SENSE_ACCEL_00003cf0, // 11\n    PTR_s_SENSE_MAG_00003cf4, // 12\n    PTR_s_SENSE_GYRO_00003cf8, // 13\n    PTR_s_SENSE_COLOR_00003cfc, // 14\n    PTR_s_SENSE_PRESS_00003d00, // 15\n    PTR_s_SENSE_ANALOG_00003d04, // 16\n    PTR_s_SENSE_UV_00003d08, // 17\n    PTR_s_SENSE_OBJTEMP_00003d0c, // 18\n    PTR_s_SENSE_PULSE_COUNT_00003d10, // 19\n    PTR_s_SENSE_DISTANCE_00003d14, // 20\n    PTR_s_SENSE_CO2_00003d18 // 21\n};\n\nclass_t get_class_000039e8(char class_char) {\n    class_t result = CLASS_UNKNOWN;\n    if (class_char == -1) {\n        result = DAT_00003cc0;\n    }\n    else if (class_char >= 0 && class_char <= 127) {\n        result = PTR_s_CLASS_UNKNOWN_00003d20[(int)class_char];\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000039e8",
            "calling": [
                "FUN_00002ecc",
                "FUN_00002f74"
            ],
            "imported": false,
            "current_name": "get_class_000039e8"
        },
        "FUN_00000e38": {
            "renaming": {
                "FUN_00000e38": "calculate_result_00000e38",
                "param_1": "input_1",
                "param_2": "input_2",
                "FUN_000015d0": "perform_calculation"
            },
            "code": "int32_t calculate_result_00000e38(int32_t input_1, int32_t input_2) {\n  perform_calculation(0, input_1, input_2);\n  return input_2;\n}",
            "called": [
                "FUN_000015d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000e38",
            "calling": [
                "FUN_00004dee"
            ],
            "imported": false,
            "current_name": "calculate_result_00000e38"
        },
        "FUN_00002294": {
            "renaming": {
                "FUN_00002294": "is_difference_equal_to_third_00002294",
                "param_1": "ptr_param_1",
                "iVar2": "third_value",
                "bVar3": "is_equal",
                "uVar1": "return_value"
            },
            "code": "bool is_difference_equal_to_third_00002294(int ptr_param_1)\n{\n    int difference = *(int *)(ptr_param_1 + 0xC) - *(int *)(ptr_param_1 + 0x8);\n    int third_value = *(int *)(ptr_param_1 + 0x4);\n    bool is_equal = difference == third_value;\n    if (is_equal) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002294",
            "calling": [
                "FUN_00002364"
            ],
            "imported": false,
            "current_name": "is_difference_equal_to_third_00002294"
        },
        "FUN_00003e9e": {
            "renaming": {
                "FUN_00003e9e": "perform_operation_on_data_00003e9e",
                "param_1": "data_pointer",
                "param_2": "data_length",
                "param_3": "operation_pointer",
                "uVar1": "result"
            },
            "code": "int perform_operation_on_data_00003e9e(void* data_pointer, int data_length, void* operation_pointer) {\n    int result;\n    result = perform_operation(data_pointer, data_length, operation_pointer);\n    return result;\n}",
            "called": [
                "FUN_00003ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003e9e",
            "calling": [
                "FUN_00003694"
            ],
            "imported": false,
            "current_name": "perform_operation_on_data_00003e9e"
        },
        "FUN_00003378": {
            "renaming": {
                "FUN_00003378": "send_data_to_server_00003378",
                "param_1": "data",
                "PTR_s__04i__02i__02i__02i__02i__02i_000033bc": "port",
                "param_1[5]": "data[5]",
                "param_1[4]": "data[4]",
                "param_1[3]": "data[3]",
                "param_1[2]": "data[2]",
                "param_1[1]": "data[1]",
                "*param_1": "data[0]"
            },
            "code": "int send_data_to_server_00003378(unsigned int *data)\n{\n    unsigned int PTR_s__04i__02i__02i__02i__02i__02i_000033bc = data[5] + 0x76C;\n    unsigned int size = data[4] + 1;\n    unsigned int param3 = data[3];\n    unsigned int param2 = data[2];\n    unsigned int param1 = data[1];\n    unsigned int param0 = *data;\n    send(PTR_s__04i__02i__02i__02i__02i__02i_000033bc, size, param3, param2, param1, param0);\n    return 0;\n}",
            "called": [
                "FUN_00004c84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003378",
            "calling": [
                "FUN_000033c0",
                "FUN_00003444"
            ],
            "imported": false,
            "current_name": "send_data_to_server_00003378"
        },
        "FUN_00006768": {
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "param_1": "data",
                "param_2": "ptr",
                "param_3": "size",
                "param_4": "param_4",
                "uVar1": "flag",
                "iVar2": "result",
                "uVar3": "func_res",
                "uVar4": "ushort_var",
                "uVar5": "uint_var"
            },
            "code": "undefined4 process_data_00006768(undefined4 *data, undefined4 *ptr, undefined4 size, undefined4 param_4)\n{\n  undefined2 flag;\n  int result;\n  undefined4 func_res;\n  ushort ushort_var;\n  uint uint_var;\n  \n  if ((data != NULL) && (data[6] == 0)) {\n    init_data();\n  }\n  if (ptr == (undefined4 *)PTR_DAT_00006868) {\n    ptr = (undefined4 *)data[1];\n  }\n  else if (ptr == (undefined4 *)PTR_DAT_0000686c) {\n    ptr = (undefined4 *)data[2];\n  }\n  else if (ptr == (undefined4 *)PTR_DAT_00006870) {\n    ptr = (undefined4 *)data[3];\n  }\n  ushort_var = *(ushort *)(ptr + 3);\n  ptr[1] = 0;\n  uint_var = (uint)*(ushort *)(ptr + 3);\n  if ((int)(uint_var << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(uint_var << 0x1d) < 0) {\n    if ((undefined4 *)ptr[0xd] != NULL) {\n      if ((undefined4 *)ptr[0xd] != ptr + 0x11) {\n        terminate_process(data);\n      }\n      ptr[1] = ptr[0x10];\n      ptr[0xd] = 0;\n      if (ptr[0x10] != 0) {\n        *ptr = ptr[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(uint_var << 0x1b)) {\n      *data = 9;\n      ushort_var |= 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(uint_var << 0x1c) < 0) {\n      result = process_data_00006768(data, ptr, uint_var << 0x1c, uint_var, param_4);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      ptr[2] = 0;\n      *(ushort *)(ptr + 3) &= 0xfff7;\n      ptr[6] = 0;\n    }\n    *(ushort *)(ptr + 3) |= 4;\n  }\n  if (ptr[4] == 0) {\n    process_data_00006768(data, ptr);\n  }\n  ushort_var = *(ushort *)(ptr + 3);\n  flag = *(undefined2 *)(ptr + 3);\n  if ((ushort_var & 3) != 0) {\n    *(undefined2 *)(ptr + 3) = 1;\n    handle_error(*(undefined4 *)PTR_DAT_00006874,PTR_LAB_00006754_1_00006878);\n    *(undefined2 *)(ptr + 3) = flag;\n    if ((ushort_var & 9) == 9) {\n      terminate_process(data, ptr);\n    }\n  }\n  func_res = ptr[4];\n  *ptr = func_res;\n  result = (*(code *)ptr[9])(data, ptr[8], func_res, ptr[5]);\n  ptr[1] = result;\n  if (0 < result) {\n    return 0;\n  }\n  ushort_var = *(ushort *)(ptr + 3);\n  if (result != 0) {\n    func_res = 0;\n  }\n  else {\n    ushort_var |= 0x20;\n  }\n  if (result != 0) {\n    ptr[1] = func_res;\n    ushort_var |= 0x40;\n  }\n  LAB_000067b8:\n  *(ushort *)(ptr + 3) = ushort_var;\n  return 0xffffffff;\n}",
            "called": [
                "FUN_00004158",
                "FUN_0000404c",
                "FUN_00004b34",
                "FUN_000043a0",
                "FUN_000042a4",
                "FUN_00005700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00006768",
            "calling": [
                "FUN_00005e10"
            ],
            "imported": false,
            "current_name": "process_data_00006768"
        },
        "FUN_00000db0": {
            "renaming": {
                "FUN_00000db0": "execute_function_00000db0",
                "FUN_00000dcc": "call_function1",
                "FUN_00000d9c": "call_function2"
            },
            "code": "void execute_function_00000db0(void)\n{\n  call_function1();\n  call_function2();\n  return;\n}",
            "called": [
                "FUN_00000d9c",
                "FUN_00000dcc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000db0",
            "calling": [
                "FUN_0000099c"
            ],
            "imported": false,
            "current_name": "execute_function_00000db0"
        },
        "FUN_00002600": {
            "renaming": {
                "FUN_00002600": "process_data_and_return_zero_00002600",
                "param_1": "input",
                "uVar1": "processed_data",
                "FUNC_000047e4": "process_data",
                "FUN_0000285c": "print_processed_data"
            },
            "code": "int process_data_and_return_zero_00002600(int input) {\n    int processed_data = process_data(input);\n    print_processed_data(processed_data);\n    return 0;\n}",
            "called": [
                "FUN_000047e4",
                "FUN_0000285c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002600",
            "calling": [
                "FUN_00003478"
            ],
            "imported": false,
            "current_name": "process_data_and_return_zero_00002600"
        },
        "FUN_00003810": {
            "renaming": {
                "FUN_00003810": "get_label_by_id_00003810",
                "param_1": "id",
                "puVar1": "label"
            },
            "code": "undefined* get_label_by_id_00003810(int id) {\n  undefined* label;\n  switch(id) {\n    case 2:\n      label = PTR_LAB_000038cc;\n      break;\n    case 3:\n      label = PTR_LAB_000038d0;\n      break;\n    case 4:\n      label = PTR_LAB_000038d4;\n      break;\n    case 5:\n      label = PTR_LAB_000038d8;\n      break;\n    case 6:\n      label = PTR_LAB_000038dc;\n      break;\n    case 7:\n      label = PTR_LAB_000038e0;\n      break;\n    case 8:\n      label = PTR_LAB_000038e4;\n      break;\n    case 9:\n      label = PTR_LAB_000038e8;\n      break;\n    case 10:\n      label = PTR_LAB_000038ec;\n      break;\n    case 0xb:\n      label = PTR_LAB_000038f0;\n      break;\n    case 0xc:\n      label = PTR_LAB_000038f4;\n      break;\n    case 0xd:\n      label = PTR_LAB_000038f8;\n      break;\n    case 0xe:\n      label = PTR_LAB_000038fc;\n      break;\n    case 0xf:\n      label = PTR_LAB_00003900;\n      break;\n    case 0x10:\n      label = PTR_LAB_00003904;\n      break;\n    case 0x11:\n      label = PTR_LAB_0000390c;\n      break;\n    case 0x13:\n      label = PTR_LAB_00003910;\n      break;\n    case 0x15:\n      label = PTR_LAB_00003908;\n      break;\n    default:\n      label = PTR_LAB_00003914;\n      break;\n  }\n  return label;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003810",
            "calling": [
                "FUN_00003694"
            ],
            "imported": false,
            "current_name": "get_label_by_id_00003810"
        },
        "FUN_00000ed8": {
            "renaming": {
                "FUN_00000ed8": "execute_function_00000ed8",
                "in_lr": "return_address",
                "FUN_00004c84": "call_another_function",
                "PTR_DAT_00000ef4": "PTR_function_data"
            },
            "code": "void execute_function_00000ed8(void)\n{\n  undefined4 return_address;\n  call_another_function(PTR_DAT_00000ef4, return_address);\n  return;\n}",
            "called": [
                "FUN_00004c84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000ed8",
            "calling": [
                "FUN_00000f04"
            ],
            "imported": false,
            "current_name": "execute_function_00000ed8"
        },
        "FUN_000031e0": {
            "renaming": {
                "FUN_000031e0": "print_alarm_message_000031e0",
                "PTR_s_The_alarm_rang_000031f8": "alarm_message",
                "FUN_00004db8": "print_message"
            },
            "code": "void print_alarm_message_000031e0(void)\n{\n  print_message(PTR_s_The_alarm_rang_000031f8);\n  return;\n}",
            "called": [
                "FUN_00004db8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000031e0",
            "calling": [],
            "imported": false,
            "current_name": "print_alarm_message_000031e0"
        },
        "FUN_000020f4": {
            "renaming": {
                "FUN_000020f4": "print_array_000020f4",
                "DAT_00002104": "PTR_DAT_00002104",
                "FUN_00002028": "print_elements"
            },
            "code": "void print_array_000020f4(void)\n{\n  int* array = DAT_00002104;\n  int array_size = 3;\n  print_elements(array, array_size);\n  return;\n}",
            "called": [
                "FUN_00002028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000020f4",
            "calling": [],
            "imported": false,
            "current_name": "print_array_000020f4"
        },
        "FUN_0000687c": {
            "renaming": {
                "FUN_0000687c": "reverse_and_copy_0000687c",
                "param_1": "length",
                "param_2": "input",
                "pbVar1": "output",
                "uVar2": "dash_end",
                "iVar3": "i",
                "uVar4": "current_char",
                "uVar5": "next_char",
                "uVar6": "dash_end",
                "bVar7": "is_caret"
            },
            "code": "byte * reverse_and_copy_0000687c(int length, byte *input)\n{\n    byte *output;\n    uint current_char;\n    bool is_caret;\n    uint next_char;\n    uint end_char;\n    uint start_char;\n    uint i;\n    bool is_dash;\n    uint dash_end;\n\n    current_char = (uint)*input;\n    is_caret = current_char == 0x5e;\n    if (is_caret)\n    {\n        current_char = (uint)input[1];\n        input = input + 2;\n    }\n    else\n    {\n        input = input + 1;\n    }\n    i = length - 1;\n    do\n    {\n        i = i + 1;\n        *(bool *)i = is_caret;\n    } while (i != length + 0xff);\n    if (current_char == 0)\n    {\n        output = input + -1;\n    }\n    else\n    {\n        do\n        {\n            next_char = current_char;\n            *(bool *)(length + next_char) = !is_caret;\n            input = input + 1;\n            do\n            {\n                is_dash = false;\n                current_char = (uint)input[-1];\n                if (current_char == 0x2d)\n                {\n                    is_dash = true;\n                    dash_end = (uint)*input;\n                    if ((dash_end == 0x5d) || ((int)dash_end < (int)next_char))\n                    {\n                        goto LAB_000068aa;\n                    }\n                    do\n                    {\n                        next_char = next_char + 1;\n                        *(bool *)(length + next_char) = !is_caret;\n                    } while ((int)next_char < (int)dash_end);\n                    start_char = ~current_char + dash_end;\n                    if ((int)dash_end <= (int)current_char)\n                    {\n                        start_char = 0;\n                    }\n                    next_char = next_char + 1 + start_char;\n                    input = input + 2;\n                }\n                output = input;\n            } while ((current_char != 0x5d) && (output = input + -1, current_char != 0));\n        } while (current_char != 0x5d);\n    }\n    return output;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000687c",
            "calling": [
                "FUN_0000656c",
                "FUN_000061cc"
            ],
            "imported": false,
            "current_name": "reverse_and_copy_0000687c"
        },
        "FUN_00005edc": {
            "renaming": {
                "FUN_00005edc": "parse_number_00005edc",
                "param_1": "out",
                "param_2": "str",
                "param_3": "end",
                "param_4": "base",
                "uVar1": "value",
                "uVar2": "digit",
                "bVar3": "sign",
                "iVar4": "result",
                "uVar5": "temp",
                "uVar6": "max_value",
                "pbVar7": "p",
                "pbVar8": "p",
                "PTR_DAT_00005fd0": "PTR_DAT_00005fd0"
            },
            "code": "uint parse_number_00005edc(uint *out, byte *str, byte **end, uint base) {\n  uint digit;\n  uint value = 0;\n  int sign = 1;\n  uint max_value = UINT_MAX / base;\n  byte *p = str;\n  while (isspace(*p)) { p++; }\n  if (*p == '-') {\n    sign = -1;\n    p++;\n  }\n  else if (*p == '+') {\n    p++;\n  }\n  if (!base) {\n    if (*p != '0') {\n      base = 10;\n    }\n    else if (toupper(*(p + 1)) == 'X') {\n      base = 16;\n      p += 2;\n    }\n    else {\n      base = 8;\n    }\n  }\n  while (true) {\n    if (isdigit(*p)) {\n      digit = *p - '0';\n    }\n    else if (isalpha(*p)) {\n      digit = toupper(*p) - 'A' + 10;\n    }\n    else {\n      break;\n    }\n    if (digit >= base) {\n      break;\n    }\n    if (value > max_value || (value == max_value && digit > UINT_MAX % base)) {\n      sign = 0;\n      break;\n    }\n    value = value * base + digit;\n    p++;\n  }\n  if (end != NULL) {\n    *end = p;\n  }\n  if (out != NULL) {\n    *out = sign * value;\n  }\n  return sign ? 0 : UINT_MAX;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005edc",
            "calling": [
                "FUN_00005fd8"
            ],
            "imported": false,
            "current_name": "parse_number_00005edc"
        },
        "FUN_00001eea": {
            "renaming": {
                "FUN_00001eea": "update_flags_and_values_00001eea",
                "param_1": "flag",
                "param_2": "value",
                "uVar1": "flag_bitmask",
                "iVar2": "value_index",
                "iVar3": "flags_index",
                "FUN_00001f80": "set_all_flags_to_zero",
                "FUN_00001dc0": "get_flag_bitmask",
                "FUN_00001d80": "get_flags_index",
                "FUN_00001d5e": "get_value_index"
            },
            "code": "int update_flags_and_values_00001eea(unsigned short flag, unsigned char value) {\n  unsigned int flag_bitmask;\n  int value_index;\n  int flags_index;\n  set_all_flags_to_zero();\n  if ((char)value < 0) {\n    flag_bitmask = get_flag_bitmask();\n    flags_index = get_flags_index();\n    *(unsigned int *)(flags_index + 0x14) = *(unsigned int *)(flags_index + 0x14) | 1 << (flag_bitmask & 0xff);\n  }\n  else {\n    flag_bitmask = get_flag_bitmask();\n    flags_index = get_flags_index();\n    *(unsigned int *)(flags_index + 0x14) = *(unsigned int *)(flags_index + 0x14) & ~(1 << (flag_bitmask & 0xff));\n  }\n  value_index = get_value_index();\n  flags_index = get_flags_index();\n  *(unsigned int *)(value_index + flag * 4) = value & 0x23 | 0x100;\n  return 0;\n}\n",
            "called": [
                "FUN_00001d5e",
                "FUN_00001f80",
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001eea",
            "calling": [
                "FUN_00000e64"
            ],
            "imported": false,
            "current_name": "update_flags_and_values_00001eea"
        },
        "FUN_000023a4": {
            "renaming": {
                "FUN_000023a4": "perform_system_call_000023a4",
                "uVar1": "result",
                "auStack_88": "buffer",
                "FUN_000023d0": "set_up_system_call_environment",
                "FUN_00004db8": "prepare_data_for_system_call",
                "FUN_00002e6c": "execute_system_call",
                "software_interrupt": "trigger_system_call_interrupt"
            },
            "code": "  \nint32_t perform_system_call_000023a4(void)\n{\n  int32_t result;\n  uint8_t buffer[128];\n  \n  set_up_system_call_environment(0);\n  prepare_data_for_system_call(uRam000023c4);\n  result = execute_system_call(0, buffer, 0x80);\n  trigger_system_call_interrupt(0x3f);\n  return result;\n}\n",
            "called": [
                "FUN_00004db8",
                "FUN_00002e6c",
                "FUN_000023d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000023a4",
            "calling": [
                "FUN_00000f04"
            ],
            "imported": false,
            "current_name": "perform_system_call_000023a4"
        },
        "FUN_0000240c": {
            "renaming": {
                "FUN_0000240c": "get_next_item_0000240c",
                "param_1": "current_item",
                "puVar1": "next_item"
            },
            "code": "undefined4* get_next_item_0000240c(undefined4 *current_item)\n{\n  undefined4 *next_item = (undefined4 *)*current_item;\n  if (next_item != (undefined4 *)0x0) {\n    *current_item = *next_item;\n  }\n  return next_item;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000240c",
            "calling": [
                "FUN_000024bc"
            ],
            "imported": false,
            "current_name": "get_next_item_0000240c"
        },
        "FUN_00004280": {
            "renaming": {
                "FUN_00004280": "do_nothing_with_pointer_00004280",
                "PTR_DAT_00004288": "PTR_POINTER",
                "do_nothing_000045ec": "do_nothing"
            },
            "code": "void do_nothing_with_pointer_00004280(void)\n{\n  do_nothing(PTR_DAT_00004288);\n  return;\n}",
            "called": [
                "FUN_000045ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004280",
            "calling": [
                "FUN_00004314"
            ],
            "imported": false,
            "current_name": "do_nothing_with_pointer_00004280"
        },
        "FUN_00001448": {
            "renaming": {
                "FUN_00001448": "process_data_at_index_00001448",
                "param_1": "index",
                "PTR_DAT_000014c0": "data_pointer",
                "short": "short_value",
                "first_value": "first_short_value",
                "second_value": "second_short_value",
                "first_param": "first_parameter",
                "second_param": "second_parameter"
            },
            "code": "void process_data_at_index_00001448(int index)\n{\n    short first_value = *(short *)(PTR_DAT_000014c0 + index * 0x20 + 8);\n    short second_value = *(short *)(PTR_DAT_000014c0 + index * 0x20 + 10);\n    if (first_value != -1) {\n        int first_param = *(int *)(PTR_DAT_000014c0 + index * 0x20 + 0xc);\n        FUN_00001f80(first_value, first_param);\n    }\n    if (second_value != -1) {\n        int second_param = *(int *)(PTR_DAT_000014c0 + index * 0x20 + 0x10);\n        FUN_00001f80(second_value, second_param);\n    }\n    return;\n}",
            "called": [
                "FUN_00001f80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001448",
            "calling": [
                "FUN_000013b8"
            ],
            "imported": false,
            "current_name": "process_data_at_index_00001448"
        },
        "FUN_00001688": {
            "renaming": {
                "FUN_00001688": "initialize_data_00001688",
                "FUN_00001628": "initialize_pointer"
            },
            "code": "void initialize_data_00001688(void)\n{\n  initialize_pointer(0);\n  return;\n}",
            "called": [
                "FUN_00001628"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001688",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_00001688"
        },
        "FUN_00004042": {
            "renaming": {
                "FUN_00004042": "print_numbers_00004042",
                "param_1": "number",
                "FUN_00004f84": "print_range"
            },
            "code": "void print_numbers_00004042(undefined4 number)\n{\n  print_range(number,0,10);\n  return;\n}",
            "called": [
                "FUN_00004f84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004042",
            "calling": [
                "FUN_0000305c",
                "FUN_00002fe0"
            ],
            "imported": false,
            "current_name": "print_numbers_00004042"
        },
        "FUN_00000cf0": {
            "renaming": {
                "FUN_00000cf0": "is_irq_interrupts_enabled_in_privileged_mode_00000cf0",
                "uVar2": "is_irq_enabled",
                "bVar1": "is_privileged_mode"
            },
            "code": "bool is_irq_interrupts_enabled_in_privileged_mode_00000cf0(void)\n{\n  bool is_privileged_mode;\n  bool is_irq_enabled = false;\n  enable_irq_interrupts();\n  is_privileged_mode = (bool)is_current_mode_privileged();\n  if (is_privileged_mode) {\n    is_irq_enabled = is_irq_interrupts_enabled();\n  }\n  return is_irq_enabled;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000cf0",
            "calling": [
                "FUN_00000930"
            ],
            "imported": false,
            "current_name": "is_irq_interrupts_enabled_in_privileged_mode_00000cf0"
        },
        "FUN_00000f8c": {
            "renaming": {
                "FUN_00000f8c": "initializeDataStructure_00000f8c",
                "uVar1": "randomValue",
                "puVar2": "dataPointer",
                "uVar3": "index",
                "iStack_24": "stackValue1",
                "piStack_20": "stackPointer",
                "uStack_1c": "stackValue2",
                "local_18": "memoryLocation1",
                "local_14": "memoryLocation2",
                "local_10": "memoryLocation3",
                "*puRam00000fd4": "pointerToMemoryLocation1",
                "uRam00000fd8": "memoryLocation4",
                "FUN_000010d4": "initializeFunction",
                "*puRam00000fe0": "pointerToMemoryLocation4",
                "uRam00000fe4": "memoryLocation5",
                "uRam00000fe8": "memoryLocation6",
                "FUN_00000930": "generateRandomNumber",
                "PTR_s_FAILED_ASSERTION__00001030": "assertionErrorMessage"
            },
            "code": "void initializeDataStructure_00000f8c(void)\n{\n  uint randomValue;\n  undefined4 *dataPointer;\n  uint index;\n  int stackValue1;\n  int *stackPointer;\n  undefined4 stackValue2;\n  undefined4 localValue1;\n  undefined4 localValue2;\n  undefined4 localValue3;\n  \n  initializeMemory();\n  localValue3 = *pointerToMemoryLocation1;\n  localValue2 = 0;\n  localValue1 = memoryLocation2;\n  initializeFunction(memoryLocation3, 0x100, 0xf, 0xc);\n  localValue3 = *pointerToMemoryLocation4;\n  localValue2 = 0;\n  localValue1 = memoryLocation5;\n  index = 0xc;\n  initializeFunction(memoryLocation6, 0x600, 7);\n  stackValue2 = 0xfd3;\n  randomValue = generateRandomNumber();\n  randomValue = randomValue >> 0x1e;\n  dataPointer = (undefined4 *)(index * 0x100);\n  stackValue1 = (index >> 0x1d) << 0x11;\n  stackPointer = &stackValue1;\n  if ((randomValue & randomValue - 1) != 0) {\n    assertionFailure(3, PTR_s_FAILED_ASSERTION__00001030);\n  }\n  *dataPointer = 0;\n  dataPointer[1] = 0;\n  dataPointer[2] = randomValue - 1;\n  return;\n}",
            "called": [
                "FUN_00000cd0",
                "FUN_000010d4",
                "FUN_00000930"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000f8c",
            "calling": [
                "FUN_0000099c"
            ],
            "imported": false,
            "current_name": "initializeDataStructure_00000f8c"
        },
        "FUN_00002894": {
            "renaming": {
                "FUN_00002894": "set_parameter_00002894",
                "param_1": "parameter_value",
                "DAT_000028e8": "data_address",
                "data_address": "data_address",
                "PTR_DAT_000028ec": "PTR_DAT_000028ec",
                "param_2": "param_2",
                "param_3": "param_3",
                "data_address_1c": "data_address_1c",
                "data_address_8": "data_address_8"
            },
            "code": "void set_parameter_00002894(int parameter_value, undefined4 param_2, undefined4 param_3)\n{\n  int DAT_000028e8 = DAT_000028e8;\n  uint* DAT_000028e8_1c = (uint*)(DAT_000028e8 + 0x1c);\n  *DAT_000028e8_1c = *DAT_000028e8_1c & 0xfffffffb;\n  int* DAT_000028e8_8 = (int*)(DAT_000028e8 + 8);\n  *DAT_000028e8_8 = parameter_value - 1;\n  *(undefined4 *)PTR_DAT_000028ec = param_2;\n  *(undefined4 *)(PTR_DAT_000028ec + 4) = param_3;\n  *DAT_000028e8_1c = *DAT_000028e8_1c | 4;\n  FUN_00002744(0x2e,10);\n  FUN_00002714(0x2e);\n  return;\n}",
            "called": [
                "FUN_00002744",
                "FUN_00002714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002894",
            "calling": [
                "FUN_00002654"
            ],
            "imported": false,
            "current_name": "set_parameter_00002894"
        },
        "FUN_00004158": {
            "renaming": {
                "FUN_00004158": "process_data_00004158",
                "param_1": "data_size",
                "param_2": "data",
                "PTR_DAT_000041c4": "original_data_ptr",
                "PTR_DAT_000041c8": "updated_data_ptr",
                "PTR_DAT_000041cc": "latest_data_ptr",
                "uVar1": "result",
                "FUN_000042a4": "initialize_data",
                "do_nothing_000045e8": "perform_action",
                "FUN_0000404c": "process_data_helper",
                "do_nothing_000045ec": "finalize_action"
            },
            "code": "int process_data_00004158(int data_size, void *data) {\n    int result;\n    if (*(int *)(data + 0x10) != 0) {\n        if ((data_size != 0) && (*(int *)(data_size + 0x18) == 0)) {\n            initialize_data();\n        }\n        if (data == PTR_DAT_000041c4) {\n            data = *(void **)(data_size + 4);\n        }\n        else if (data == PTR_DAT_000041c8) {\n            data = *(void **)(data_size + 8);\n        }\n        else if (data == PTR_DAT_000041cc) {\n            data = *(void **)(data_size + 0xc);\n        }\n        if (*(short *)(data + 0xc) != 0) {\n            if ((-1 < *(int *)(data + 100) << 0x1f) && (-1 < (int)*(short *)(data + 0xc) << 0x16)) {\n                perform_action(*(int *)(data + 0x58));\n            }\n            result = process_data_00004158_helper(data_size, data);\n            if (*(int *)(data + 100) << 0x1f < 0) {\n                return result;\n            }\n            if ((int)((uint)*(ushort *)(data + 0xc) << 0x16) < 0) {\n                return result;\n            }\n            finalize_action(*(int *)(data + 0x58));\n            return result;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_0000404c",
                "FUN_000045ec",
                "FUN_000045e8",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004158",
            "calling": [
                "FUN_000041d0",
                "FUN_00006768",
                "FUN_00005404"
            ],
            "imported": false,
            "current_name": "process_data_00004158"
        },
        "FUN_00002654": {
            "renaming": {
                "FUN_00002654": "process_data_00002654",
                "param_1": "input",
                "param_2": "output",
                "param_3": "size",
                "uVar1": "processed_data",
                "PTR_DAT_00002688": "data_pointer",
                "FUN_00002894": "perform_another_operation",
                "PTR_FUN_000026f0_1_0000268c": "function_pointer"
            },
            "code": "int process_data_00002654(int input, int output, int size)\n{\n  int processed_data = perform_operation(input);\n  *(int *)PTR_DAT_00002688 = output;\n  perform_another_operation(processed_data, PTR_FUN_000026f0_1_0000268c, size);\n  return 0;\n}",
            "called": [
                "FUN_00002894",
                "FUN_000047e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002654",
            "calling": [
                "FUN_000033f4"
            ],
            "imported": false,
            "current_name": "process_data_00002654"
        },
        "FUN_00002538": {
            "renaming": {
                "FUN_00002538": "set_byte_in_memory_00002538",
                "param_1": "byte_value",
                "param_2": "parameter_value",
                "DAT_00002584": "data_pointer_1",
                "DAT_00002588": "data_pointer_2"
            },
            "code": "void set_byte_in_memory_00002538(byte byte_value, uint parameter_value) {\n  if (byte_value < 0) {\n    *(char *)((byte_value & 0xf) + DAT_00002584 + 0x14) = (char)((parameter_value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)byte_value + DAT_00002588 + 0x300) = (char)((parameter_value & 0xff) << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002538",
            "calling": [
                "FUN_0000258c"
            ],
            "imported": false,
            "current_name": "set_byte_in_memory_00002538"
        },
        "FUN_00004c84": {
            "renaming": {
                "FUN_00004c84": "initialize_data_structure_00004c84",
                "param_1": "data",
                "param_2": "size",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "data_ptr",
                "uVar2": "input_data",
                "uStack_c": "param_2_ptr",
                "uStack_8": "param_3_ptr",
                "uStack_4": "param_4_ptr",
                "*DAT_00004cb0": "*PTR_00004cb0",
                "FUN_000042a4": "clear_data_structure",
                "FUNC_000057f8": "process_data"
            },
            "code": "void initialize_data_structure_00004c84(int* data, int size, int* param_3, int* param_4)\n{\n  int* data_ptr = *DAT_00004cb0;\n  int input_data = *data;\n  int* param_2_ptr = param_3;\n  int* param_3_ptr = param_4;\n  int* param_4_ptr = &size;\n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x18) == 0)) {\n    clear_data_structure(data_ptr);\n  }\n  process_data(data_ptr, *(int *)(data_ptr + 8), input_data, param_2_ptr, &input_data, param_3_ptr);\n  return;\n}",
            "called": [
                "FUN_000057f8",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004c84",
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c",
                "FUN_00003524",
                "FUN_00003694",
                "FUN_00002fe0",
                "FUN_00000f04",
                "FUN_00002a88",
                "FUN_0000211c",
                "FUN_00003378",
                "FUN_00002f74",
                "FUN_0000316c",
                "FUN_00000ed8",
                "FUN_00002b10"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00004c84"
        },
        "FUN_0000305c": {
            "renaming": {
                "FUN_0000305c": "write_data_to_device_0000305c",
                "param_1": "num_args",
                "param_2": "args",
                "uVar1": "data",
                "auStack_20": "data_buffer",
                "local_18": "num_data_bytes",
                "local_14": "device_id",
                "local_10": "device_info",
                "local_c": "i"
            },
            "code": "void write_data_to_device_0000305c(int num_args, undefined4 *args) {\n  undefined2 data_buffer[4];\n  uint num_data_bytes;\n  int device_id;\n  undefined4 device_info;\n  int i;\n\n  if (num_args < 4) {\n    print_error_message(PTR_s_usage___s__s__device_id___value_0_00003154, *args, args[1]);\n  }\n  else {\n    device_info = FUN_00004042(args[2]);\n    device_id = FUN_00003d24(device_info);\n    if (device_id == 0) {\n      print_error_message(PTR_s_error__undefined_device_given_00003158);\n    }\n    else {\n      memset(data_buffer, 0, 8);\n      if (num_args > 5) {\n        num_args = 6;\n      }\n      num_data_bytes = num_args - 3;\n      for (i = 0; i < num_data_bytes; i++) {\n        data_buffer[i] = FUN_00004042(args[i + 3]);\n      }\n      print_message(PTR_s_Writing_to_device___i____s_0000315c, device_info, *(undefined4 *)(device_id + 8));\n      write_data(device_id, data_buffer, num_data_bytes & 0xff);\n      int write_result = FUN_00003d94(device_id, data_buffer);\n      if (write_result < 1) {\n        if (write_result == -0x86) {\n          print_error_message(PTR_s_error__device___i_is_not_writabl_00003160, device_info);\n        }\n        else {\n          print_error_message(PTR_s_error__failure_to_write_to_devic_00003164, device_info);\n        }\n      }\n      else {\n        print_message(PTR_s_data_successfully_written_to_dev_00003168, device_info);\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_00003d24",
                "FUN_00004db8",
                "FUN_00004042",
                "FUN_00004c84",
                "FUN_00003d94",
                "FUN_00003694",
                "FUN_00004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000305c",
            "calling": [
                "FUN_0000316c"
            ],
            "imported": false,
            "current_name": "write_data_to_device_0000305c"
        },
        "FUN_000012b4": {
            "renaming": {
                "FUN_000012b4": "process_data_000012b4",
                "param_1": "data_pointer",
                "param_2": "data_type",
                "uVar1": "processed_data",
                "FUN_00002364": "process_data_helper",
                "FUN_000024bc": "clear_data"
            },
            "code": "int process_data_000012b4(int data_pointer, undefined data_type){\n  int processed_data = process_data_000012b4_helper(data_pointer + 4, data_type);\n  clear_data(data_pointer);\n  return processed_data;\n}",
            "called": [
                "FUN_000024bc",
                "FUN_00002364"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000012b4",
            "calling": [],
            "imported": false,
            "current_name": "process_data_000012b4"
        },
        "FUN_00005b34": {
            "renaming": {
                "FUN_00005b34": "FUNC_00005b34"
            },
            "code": "\ncode * FUNC_00005b34(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5\n                   )\n\n{\n  bool bVar1;\n  byte bVar2;\n  undefined *puVar3;\n  int iVar4;\n  code *pcVar5;\n  int iVar6;\n  undefined *puVar7;\n  uint uVar8;\n  uint *puVar9;\n  uint uVar10;\n  uint **ppuVar11;\n  uint uVar12;\n  undefined *puVar13;\n  code *local_24;\n  \n  puVar3 = PTR_s_0123456789ABCDEF_00005d78;\n  bVar2 = *(byte *)(param_2 + 6);\n  puVar7 = (undefined *)((int)param_2 + 0x43);\n  local_24 = param_4;\n  if (0x78 < bVar2) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)param_2 + 0x42) = bVar2;\nLAB_00005bdc:\n    puVar7 = (undefined *)((int)param_2 + 0x42);\n    uVar8 = 1;\nLAB_00005d28:\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (bVar2 < 99) {\n    if (bVar2 == 0) goto LAB_00005d06;\n    if (bVar2 == 0x58) {\n      *(undefined *)((int)param_2 + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(bVar2) {\n  case 99:\n    uVar8 = **param_5;\n    *param_5 = *param_5 + 1;\n    *(char *)((int)param_2 + 0x42) = (char)uVar8;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    uVar10 = *param_2;\n    puVar9 = *param_5;\n    if ((int)(uVar10 << 0x18) < 0) {\n      uVar8 = *puVar9;\n      *param_5 = puVar9 + 1;\n    }\n    else {\n      uVar8 = *puVar9;\n      *param_5 = puVar9 + 1;\n      if ((uVar10 & 0x40) != 0) {\n        uVar8 = (uint)(short)uVar8;\n      }\n    }\n    if ((int)uVar8 < 0) {\n      uVar8 = -uVar8;\n      *(undefined *)((int)param_2 + 0x43) = 0x2d;\n    }\n    uVar10 = 10;\n    puVar3 = PTR_s_0123456789ABCDEF_00005d78;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    ppuVar11 = (uint **)*param_5;\n    uVar10 = *param_2;\n    uVar8 = param_2[5];\n    *param_5 = (uint *)(ppuVar11 + 1);\n    puVar9 = *ppuVar11;\n    if (((int)(uVar10 << 0x18) < 0) || (-1 < (int)(uVar10 << 0x19))) {\n      *puVar9 = uVar8;\n    }\n    else {\n      *(short *)puVar9 = (short)uVar8;\n    }\nLAB_00005d06:\n    param_2[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    puVar9 = *param_5;\n    uVar8 = *param_2;\n    *param_5 = puVar9 + 1;\n    if (((int)(uVar8 << 0x18) < 0) || (-1 < (int)(uVar8 << 0x19))) {\n      uVar8 = *puVar9;\n    }\n    else {\n      uVar8 = (uint)*(ushort *)puVar9;\n    }\n    puVar3 = PTR_s_0123456789ABCDEF_00005d78;\n    if (bVar2 == 0x6f) {\n      uVar10 = 8;\n    }\n    else {\n      uVar10 = 10;\n    }\n    break;\n  case 0x70:\n    *param_2 = *param_2 | 0x20;\n  case 0x78:\n    puVar3 = PTR_s_0123456789abcdef_00005d7c;\n    *(undefined *)((int)param_2 + 0x45) = 0x78;\nLAB_00005ca8:\n    uVar10 = *param_2;\n    uVar8 = **param_5;\n    *param_5 = *param_5 + 1;\n    if ((-1 < (int)(uVar10 << 0x18)) && ((int)(uVar10 << 0x19) < 0)) {\n      uVar8 = uVar8 & 0xffff;\n    }\n    if ((int)(uVar10 << 0x1f) < 0) {\n      *param_2 = uVar10 | 0x20;\n    }\n    if (uVar8 == 0) {\n      *param_2 = *param_2 & 0xffffffdf;\n    }\n    uVar10 = 0x10;\n    break;\n  case 0x73:\n    puVar9 = *param_5;\n    *param_5 = puVar9 + 1;\n    puVar7 = (undefined *)*puVar9;\n    iVar4 = FUN_00006010(puVar7,0,param_2[1],puVar9,param_1,param_2,param_3);\n    if (iVar4 != 0) {\n      param_2[1] = iVar4 - (int)puVar7;\n    }\n    uVar8 = param_2[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)param_2 + 0x43) = 0;\nLAB_00005c36:\n  uVar12 = param_2[1];\n  param_2[2] = uVar12;\n  if (-1 < (int)uVar12) {\n    *param_2 = *param_2 & 0xfffffffb;\n  }\n  puVar13 = puVar7;\n  if ((uVar8 != 0) || (uVar12 != 0)) {\n    do {\n      puVar13 = puVar13 + -1;\n      *puVar13 = puVar3[uVar8 - uVar10 * (uVar8 / uVar10)];\n      bVar1 = uVar10 <= uVar8;\n      uVar8 = uVar8 / uVar10;\n    } while (bVar1);\n  }\n  if (((uVar10 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4])) {\n    puVar13[-1] = 0x30;\n    puVar13 = puVar13 + -1;\n  }\n  param_2[4] = (int)puVar7 - (int)puVar13;\n  puVar7 = puVar13;\nLAB_00005c84:\n  iVar4 = FUN_00005a58(param_1,param_2,&local_24,param_3,param_4);\n  if ((iVar4 == -1) || (iVar4 = (*param_4)(param_1,param_3,puVar7,param_2[4]), iVar4 == -1)) {\nLAB_00005c98:\n    pcVar5 = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar4 = 0; iVar4 < (int)(param_2[3] - (int)local_24); iVar4 = iVar4 + 1) {\n        iVar6 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar6 == -1) goto LAB_00005c98;\n      }\n    }\n    pcVar5 = (code *)param_2[3];\n    if ((int)(code *)param_2[3] < (int)local_24) {\n      pcVar5 = local_24;\n    }\n  }\n  return pcVar5;\n}\n\n",
            "called": [
                "FUN_00006010",
                "FUN_00005a58"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00005b34",
            "calling": [
                "FUN_000057f8"
            ],
            "imported": false,
            "current_name": "FUNC_00005b34"
        },
        "FUN_0000058e": {
            "renaming": {
                "FUN_0000058e": "update_pointer_0000058e",
                "param_1": "pointer_to_update",
                "param_2": "new_value",
                "*param_1": "*pointer_to_update",
                "*param_2": "*new_value"
            },
            "code": "void update_pointer_0000058e(int *pointer_to_update, undefined4 *new_value){\n    if (*pointer_to_update == 0) {\n        *new_value = new_value;\n    }\n    else {\n        *new_value = *(undefined4 *)*pointer_to_update;\n        *(undefined4 **) *pointer_to_update = new_value;\n    }\n    *pointer_to_update = (int)new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000058e",
            "calling": [
                "FUN_00000698"
            ],
            "imported": false,
            "current_name": "update_pointer_0000058e"
        },
        "FUN_0000656c": {
            "renaming": {
                "FUN_0000656c": "FUNC_0000656c"
            },
            "code": "\nundefined4 FUNC_0000656c(undefined4 param_1,uint *param_2,byte **param_3,undefined4 *param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  code *pcVar3;\n  uint uVar4;\n  byte *pbVar5;\n  uint uVar6;\n  undefined4 *puVar7;\n  uint *puVar8;\n  uint *puVar9;\n  uint *puVar10;\n  int unaff_r9;\n  int iVar11;\n  undefined4 local_34 [4];\n  \n  local_34[0] = *(undefined4 *)PTR_PTR_DAT_00006744;\n  local_34[1] = *(undefined4 *)(PTR_PTR_DAT_00006744 + 4);\n  local_34[2] = *(undefined4 *)(PTR_PTR_DAT_00006744 + 8);\n  pcVar3 = (code *)PTR_LAB_00004f80_1_0000674c;\n  if (param_2[6] != 3) {\n    pcVar3 = (code *)PTR_LAB_00005fd4_1_00006748;\n  }\n  uVar6 = param_2[2];\n  uVar4 = uVar6 - 1;\n  if (0x15c < uVar4) {\n    unaff_r9 = uVar6 - 0x15d;\n    uVar6 = 0x15d;\n  }\n  if (0x15c < uVar4) {\n    param_2[2] = uVar6;\n  }\n  puVar10 = param_2 + 7;\n  if (uVar4 < 0x15d) {\n    unaff_r9 = 0;\n  }\n  *param_2 = *param_2 | 0xd00;\n  iVar11 = 0;\n  puVar9 = puVar10;\n  do {\n    iVar1 = FUN_00006010(local_34[iVar11],**param_3,2);\n    if (iVar1 != 0) {\n      if (iVar11 == 1) {\n        if (param_2[1] == 0) {\n          param_2[1] = 8;\n          *param_2 = *param_2 | 0x200;\n        }\n        uVar4 = *param_2 & 0xfffffaff;\nLAB_000065f4:\n        *param_2 = uVar4;\n      }\n      else if (iVar11 == 2) {\n        if ((*param_2 & 0x600) != 0x200) goto LAB_00006624;\n        param_2[1] = 0x10;\n        uVar4 = *param_2 | 0x100;\n        goto LAB_000065f4;\n      }\n      uVar4 = param_2[2];\n      param_2[2] = uVar4 - 1;\n      if (uVar4 != 0) {\n        pbVar5 = *param_3;\n        *param_3 = pbVar5 + 1;\n        puVar8 = (uint *)((int)puVar9 + 1);\n        *(byte *)puVar9 = *pbVar5;\n        pbVar5 = param_3[1];\n        param_3[1] = pbVar5 + -1;\n        puVar9 = puVar8;\n        if (((int)(pbVar5 + -1) < 1) &&\n           (iVar1 = (*(code *)param_2[0x60])(param_1,param_3), iVar1 != 0)) {\n          iVar11 = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    iVar11 = iVar11 + 1;\n  } while (iVar11 != 3);\n  if (param_2[1] == 0) {\n    param_2[1] = 10;\n  }\n  FUN_0000687c(param_2[5],(int)PTR_DAT_00006750 - param_2[1]);\n  iVar11 = 0;\n  while( true ) {\n    puVar8 = puVar9;\n    if (param_2[2] == 0) break;\n    pbVar5 = *param_3;\n    uVar4 = (uint)*pbVar5;\n    if (*(char *)(param_2[5] + uVar4) == '\\0') break;\n    if ((uVar4 == 0x30) && ((int)(*param_2 << 0x14) < 0)) {\n      iVar11 = iVar11 + 1;\n      if (unaff_r9 != 0) {\n        unaff_r9 = unaff_r9 + -1;\n        param_2[2] = param_2[2] + 1;\n      }\n    }\n    else {\n      *param_2 = *param_2 & 0xfffff6ff;\n      puVar8 = (uint *)((int)puVar9 + 1);\n      *(byte *)puVar9 = *pbVar5;\n    }\n    pbVar5 = param_3[1];\n    param_3[1] = pbVar5 + -1;\n    if ((int)(pbVar5 + -1) < 1) {\n      iVar1 = (*(code *)param_2[0x60])(param_1,param_3);\n      if (iVar1 != 0) break;\n    }\n    else {\n      *param_3 = *param_3 + 1;\n    }\n    param_2[2] = param_2[2] - 1;\n    puVar9 = puVar8;\n  }\nLAB_000066ca:\n  if ((int)(*param_2 << 0x17) < 0) {\n    if (puVar10 < puVar8) {\n      (*(code *)param_2[0x5f])(param_1,*(byte *)((int)puVar8 + -1),param_3);\n      puVar8 = (uint *)((int)puVar8 + -1);\n    }\n    if (puVar8 == puVar10) {\n      return 1;\n    }\n  }\n  if ((*param_2 & 0x10) == 0) {\n    *(byte *)puVar8 = 0;\n    uVar2 = (*pcVar3)(param_1,puVar10,0,param_2[1]);\n    puVar7 = (undefined4 *)*param_4;\n    uVar4 = *param_2;\n    *param_4 = puVar7 + 1;\n    puVar7 = (undefined4 *)*puVar7;\n    if ((uVar4 & 0x20) == 0) {\n      if ((int)(uVar4 << 0x1f) < 0) {\n        *(short *)puVar7 = (short)uVar2;\n      }\n      else {\n        *puVar7 = uVar2;\n      }\n    }\n    else {\n      *puVar7 = uVar2;\n    }\n    param_2[3] = param_2[3] + 1;\n  }\n  param_2[4] = (uint)((int)puVar8 + param_2[4] + (iVar11 - (int)puVar10));\n  return 0;\n}\n\n",
            "called": [
                "FUN_0000687c",
                "FUN_00006010"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0000656c",
            "calling": [
                "FUN_000061cc"
            ],
            "imported": false,
            "current_name": "FUNC_0000656c"
        },
        "FUN_000025f4": {
            "renaming": {
                "FUN_000025f4": "initialize_system_000025f4",
                "FUN_000027b0": "call_system_initialization"
            },
            "code": "void initialize_system_000025f4(void)\n{\n  call_system_initialization();\n  return;\n}",
            "called": [
                "FUN_000027b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000025f4",
            "calling": [
                "FUN_00002396"
            ],
            "imported": false,
            "current_name": "initialize_system_000025f4"
        },
        "FUN_00001ddc": {
            "renaming": {
                "FUN_00001ddc": "print_char_with_tabulation_00001ddc",
                "param_1": "input_char",
                "cVar1": "char_to_print",
                "FUN_00001da2": "get_input_char",
                "FUN_00001d3a": "print_to_output_buffer",
                "DAT_00001e08": "output_buffer"
            },
            "code": "void print_char_with_tabulation_00001ddc(undefined2 input_char){\n  char char_to_print = get_input_char(input_char);\n  print_to_DAT_00001e08(DAT_00001e08, char_to_print + '\t');\n  return;\n}",
            "called": [
                "FUN_00001d3a",
                "FUN_00001da2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001ddc",
            "calling": [
                "FUN_00001f80"
            ],
            "imported": false,
            "current_name": "print_char_with_tabulation_00001ddc"
        },
        "FUN_00002ecc": {
            "renaming": {
                "FUN_00002ecc": "read_from_device_and_print_result_00002ecc",
                "param_1": "device_address",
                "param_2": "device_info_address",
                "uVar1": "result1",
                "uVar2": "result2",
                "auStack_1c": "buffer",
                "local_14": "buffer_length"
            },
            "code": "void read_from_device_and_print_result_00002ecc(undefined4 device_address, int device_info_address)\n{\n    undefined4 result1;\n    undefined4 result2;\n    undefined buffer[8];\n    uint8_t buffer_length = read_from_device(device_info_address, buffer);\n\n    if (buffer_length < 1) {\n        print_error_message(PTR_s_error__failed_to_read_from_device_00002f28, device_address);\n    }\n    else {\n        result2 = *(undefined4 *)(device_info_address + 8);\n        result1 = get_info(*(undefined *)(*(int *)(device_info_address + 0xc) + 8));\n        print_reading_result(PTR_s_Reading_from___i___s__s__00002f2c, device_address, result2, result1);\n        print_buffer(buffer, buffer_length & 0xff);\n    }\n    return;\n}",
            "called": [
                "FUN_00003d64",
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00003694"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002ecc",
            "calling": [
                "FUN_00002f30",
                "FUN_00002fe0"
            ],
            "imported": false,
            "current_name": "read_from_device_and_print_result_00002ecc"
        },
        "FUN_00000d76": {
            "renaming": {
                "FUN_00000d76": "clearMemoryBlock_00000d76",
                "param_1": "blockStartAddress",
                "param_2": "blockSize",
                "puVar1": "memoryBlockEndAddress",
                "*puVar1": "*memoryBlockEndAddress",
                "FUN_00000d44": "calculateMemoryBlockEndAddress"
            },
            "code": "void clearMemoryBlock_00000d76(void* blockStartAddress, size_t blockSize) {\n  undefined4 *memoryBlockEndAddress = (undefined4 *)calculateMemoryBlockEndAddress(blockStartAddress, blockSize);\n  *memoryBlockEndAddress = 0;\n  return;\n}",
            "called": [
                "FUN_00000d44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000d76",
            "calling": [
                "FUN_00000d9c"
            ],
            "imported": false,
            "current_name": "clearMemoryBlock_00000d76"
        },
        "FUN_000057a8": {
            "renaming": {
                "FUN_000057a8": "count_down_and_store_char_000057a8",
                "param_1": "undefined_param",
                "param_2": "input_char",
                "param_3": "buffer",
                "iVar1": "count",
                "puVar2": "buffer_ptr"
            },
            "code": "int count_down_and_store_char_000057a8(undefined4 param_1, int input_char, undefined4 *buffer){\n  int count = buffer[2] - 1;\n  buffer[2] = count;\n  if ((count < 0) && ((count < (int)buffer[6] || (input_char == 10)))) {\n    int result = FUN_00005404();\n    return result;\n  }\n  undefined *buffer_ptr = (undefined *)*buffer;\n  *buffer = buffer_ptr + 1;\n  *buffer_ptr = (char)input_char;\n  return input_char;\n}",
            "called": [
                "FUN_00005404"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000057a8",
            "calling": [
                "FUN_000057d2"
            ],
            "imported": false,
            "current_name": "count_down_and_store_char_000057a8"
        },
        "FUN_00001696": {
            "renaming": {
                "FUN_00001696": "calculate_result_00001696",
                "param_1": "input_value",
                "param_2": "scalar"
            },
            "code": "int calculate_result_00001696(uint32_t input_value, int scalar) {\n    uint32_t high_bits = input_value & 0xf0000000;\n    uint32_t low_bits = input_value & 0xfffff;\n    uint32_t shifted_low_bits = low_bits << 5;\n    uint32_t result = scalar * 4 + high_bits + shifted_low_bits + 0x2000000;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001696",
            "calling": [
                "FUN_00001710",
                "FUN_000016c8",
                "FUN_000016ec"
            ],
            "imported": false,
            "current_name": "calculate_result_00001696"
        },
        "FUN_000008b8": {
            "renaming": {
                "FUN_000008b8": "count_elf32_rel_entries_000008b8",
                "local_c": "current_entry_pointer",
                "PTR_DAT_000008f4": "elf32_rel_array_start_pointer",
                "DAT_000008f8": "elf32_rel_entry_type",
                "PTR_Elf32_Rel_ARRAY_000008fc": "elf32_rel_array_end_pointer"
            },
            "code": "int count_elf32_rel_entries_000008b8(void)\n{\n  int *current_entry_pointer;\n  for (current_entry_pointer = (int *)PTR_DAT_000008f4; (*current_entry_pointer == DAT_000008f8 && (current_entry_pointer < PTR_Elf32_Rel_ARRAY_000008fc)); current_entry_pointer++)\n  {\n  }\n  return ((int)PTR_Elf32_Rel_ARRAY_000008fc - (int)current_entry_pointer) / sizeof(int);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000008b8",
            "calling": [
                "FUN_0000211c"
            ],
            "imported": false,
            "current_name": "count_elf32_rel_entries_000008b8"
        },
        "FUN_000024bc": {
            "renaming": {
                "FUN_000024bc": "set_or_reset_value_000024bc",
                "param_1": "value_ptr",
                "uVar1": "undefined_value",
                "uVar2": "random_value",
                "iVar3": "value_index"
            },
            "code": "void set_or_reset_value_000024bc(int *value_ptr)\n{\n  undefined uVar1;\n  undefined4 random_value = get_random_value();\n  if (*value_ptr == 0) {\n    set_value(random_value);\n  }\n  else if (*value_ptr == -1) {\n    *value_ptr = 0;\n    set_value(random_value);\n  }\n  else {\n    int value_index = get_value_index(value_ptr);\n    print_value(value_index - 8, 10);\n    if (*value_ptr == 0) {\n      *value_ptr = -1;\n    }\n    uVar1 = *(undefined *)(value_index - 3);\n    set_value(random_value);\n    print_uVar1(uVar1);\n  }\n  return;\n}",
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_0000240c",
                "FUN_00000738",
                "FUN_00000698"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000024bc",
            "calling": [
                "FUN_000012b4"
            ],
            "imported": false,
            "current_name": "set_or_reset_value_000024bc"
        },
        "FUN_00000490": {
            "renaming": {
                "FUN_00000490": "calculate_result_of_operation_00000490",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result",
                "FUN_00000e14": "perform_operation"
            },
            "code": "int calculate_result_of_operation_00000490(int input1, int input2, int input3, int input4) {\n  int result = perform_operation(input3, input4);\n  return result;\n}",
            "called": [
                "FUN_00000e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000490",
            "calling": [
                "FUN_00004dc8"
            ],
            "imported": false,
            "current_name": "calculate_result_of_operation_00000490"
        },
        "FUN_0000091c": {
            "renaming": {
                "FUN_0000091c": "get_pointer_data_0000091c",
                "PTR_DAT_0000092c": "pointer_data"
            },
            "code": "const void* get_pointer_data_0000091c() {\n  return PTR_DAT_0000092c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000091c",
            "calling": [
                "FUN_0000211c"
            ],
            "imported": false,
            "current_name": "get_pointer_data_0000091c"
        },
        "FUN_00001f80": {
            "renaming": {
                "FUN_00001f80": "update_data_in_memory_block_00001f80",
                "param_1": "block_id",
                "param_2": "new_data",
                "iVar1": "index_of_block",
                "iVar2": "offset_in_block",
                "uVar3": "param_1",
                "uVar4": "offset_in_block",
                "uVar5": "old_data",
                "FUN_00001ddc": "get_index_of_memory_block",
                "FUN_00001d5e": "get_index_of_memory_block",
                "FUN_00001dc0": "get_offset_in_memory_block",
                "FUN_00001da2": "get_param_1",
                "FUN_00001ec4": "execute_some_function"
            },
            "code": "void update_data_in_memory_block_00001f80(uint16_t block_id, uint32_t new_data)\n{\n  int index_of_block;\n  int offset_in_block;\n  uint32_t old_data;\n  \n  get_index_of_memory_block(block_id);\n  index_of_block = get_index_of_memory_block(block_id);\n  offset_in_block = get_offset_in_memory_block(block_id);\n  old_data = *(uint32_t *)(index_of_block + offset_in_block * 4);\n  *(uint32_t *)(index_of_block + offset_in_block * 4) = new_data;\n  if ((old_data & 0xf0000) != 0) {\n    uint32_t param_1 = get_param_1();\n    uint32_t offset_in_block = get_offset_in_memory_block(block_id);\n    execute_some_function(param_1, offset_in_block);\n  }\n  return;\n}",
            "called": [
                "FUN_00001d5e",
                "FUN_00001ec4",
                "FUN_00001da2",
                "FUN_00001ddc",
                "FUN_00001dc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001f80",
            "calling": [
                "FUN_00001eea",
                "FUN_00001448"
            ],
            "imported": false,
            "current_name": "update_data_in_memory_block_00001f80"
        },
        "FUN_00000e64": {
            "renaming": {
                "FUN_00000e64": "set_flags_and_call_functions_00000e64",
                "DAT_00000ed0": "data_offset",
                "DAT_00000ed4": "data_address",
                "FUN_00001034": "function_address",
                "FUN_00001274": "function_call_1",
                "FUN_00001eea": "function_call_2",
                "FUN_00001ff6": "function_call_3"
            },
            "code": "void set_flags_and_call_functions_00000e64(void)\n{\n    uint* ptr1 = (uint*)(FUN_00001034 + DAT_00000ed0 + 4);\n    uint* ptr2 = (uint*)(DAT_00000ed4 + 0x48);\n    *ptr1 |= 0x200;\n    *ptr2 &= 0xfefff8ff;\n    FUN_00001274();\n    FUN_00001eea(0x2056, 0x80);\n    FUN_00001eea(0x511a, 0x80);\n    FUN_00001eea(0x2055, 0x80);\n    FUN_00001ff6(0x2056);\n    FUN_00001ff6(0x511a);\n    FUN_00001ff6(0x2055);\n    return;\n}",
            "called": [
                "FUN_00001eea",
                "FUN_00001274",
                "FUN_00001ff6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000e64",
            "calling": [
                "FUN_0000099c"
            ],
            "imported": false,
            "current_name": "set_flags_and_call_functions_00000e64"
        },
        "FUN_000026e4": {
            "renaming": {
                "FUN_000026e4": "initialize_system_000026e4",
                "FUN_00002970": "setup_hardware"
            },
            "code": "void initialize_system_000026e4(void)\n{\n  setup_hardware();\n  return;\n}",
            "called": [
                "FUN_00002970"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000026e4",
            "calling": [
                "FUN_00003524"
            ],
            "imported": false,
            "current_name": "initialize_system_000026e4"
        },
        "FUN_00000d44": {
            "renaming": {
                "FUN_00000d44": "calculate_result_00000d44",
                "param_1": "input_value",
                "param_2": "input_multiplier",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int calculate_result_00000d44(uint32_t input_value, int input_multiplier) {\n    uint32_t masked_input = input_value & 0xf0000000;\n    uint32_t shifted_input = (input_value & 0xfffff) << 5;\n    int result = (input_multiplier * 4) + masked_input + shifted_input + 0x2000000;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000d44",
            "calling": [
                "FUN_00000d76"
            ],
            "imported": false,
            "current_name": "calculate_result_00000d44"
        },
        "FUN_00000698": {
            "renaming": {
                "FUN_00000698": "update_status_00000698",
                "param_1": "status",
                "param_2": "index",
                "PTR_DAT_00000730": "PTR_STATUS",
                "PTR_DAT_00000734": "PTR_STATUS_FLAG"
            },
            "code": "void update_status_00000698(int status, uint8_t index)\n{\n\tif (index < 9) {\n\t\tif ((8 < *(byte *)(status + 4)) && (check_status(PTR_DAT_00000730 + (uint)*(byte *)(status + 5) * 4), *(int *)(PTR_DAT_00000730 + (uint)*(byte *)(status + 5) * 4) == 0)) {\n\t\t\t*(uint *)PTR_DAT_00000734 = *(uint *)PTR_DAT_00000734 & ~(1 << *(sbyte *)(status + 5));\n\t\t}\n\t}\n\telse if (*(byte *)(status + 4) < 9) {\n\t\tupdate_status_00000698_flag(PTR_DAT_00000730 + (uint)*(byte *)(status + 5) * 4,status + 8);\n\t\t*(uint *)PTR_DAT_00000734 = *(uint *)PTR_DAT_00000734 | 1 << *(sbyte *)(status + 5);\n\t}\n\t*(char *)(status + 4) = (char)index;\n\treturn;\n}",
            "called": [
                "FUN_0000058e",
                "FUN_000005ca"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000698",
            "calling": [
                "FUN_000024bc",
                "FUN_00000794",
                "FUN_000010d4",
                "FUN_00002434"
            ],
            "imported": false,
            "current_name": "update_status_00000698"
        },
        "FUN_00000cd0": {
            "renaming": {
                "FUN_00000cd0": "checkIRQInterruptsEnabled_00000cd0",
                "uVar2": "are_interrupts_enabled",
                "bVar1": "is_privileged_mode"
            },
            "code": "bool is_privileged_mode = checkIRQInterruptsEnabled_00000cd0();\nbool are_interrupts_enabled = false;\nif (is_privileged_mode) {\n\tare_interrupts_enabled = isIRQinterruptsEnabled();\n}\ndisableIRQinterrupts();\nreturn are_interrupts_enabled;",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000cd0",
            "calling": [
                "FUN_00001c84",
                "FUN_00000f04",
                "FUN_00000f8c",
                "FUN_00000e58",
                "FUN_00000428",
                "FUN_000024bc",
                "FUN_00000794",
                "FUN_000010d4",
                "FUN_00002434"
            ],
            "imported": false,
            "current_name": "checkIRQInterruptsEnabled_00000cd0"
        },
        "FUN_00000cc0": {
            "renaming": {
                "FUN_00000cc0": "get_IRQ_interrupts_enabled_status_00000cc0",
                "uVar2": "is_IRQ_interrupts_enabled",
                "bVar1": "is_privileged_mode"
            },
            "code": "bool is_IRQ_interrupts_enabled = false;\nbool is_privileged_mode = get_IRQ_interrupts_enabled_status_00000cc0();\nif (is_privileged_mode) {\n  is_IRQ_interrupts_enabled = isIRQinterruptsEnabled();\n}\ndisableIRQinterrupts();\nreturn is_IRQ_interrupts_enabled;",
            "called": [
                "FUN_00000f04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000cc0",
            "calling": [
                "FUN_00000dc0"
            ],
            "imported": false,
            "current_name": "get_IRQ_interrupts_enabled_status_00000cc0"
        },
        "FUN_00002994": {
            "renaming": {
                "FUN_00002994": "process_data_00002994",
                "DAT_000029f8": "data_pointer",
                "PTR_DAT_000029fc": "data_callback_pointer",
                "DATA_FLAG_OFFSET": "0x14",
                "DATA_READY_FLAG": "4",
                "DATA_PROCESS_FLAG_OFFSET": "0x1c",
                "CLEAR_DATA_PROCESS_FLAG": "0xfffffffb",
                "code": "function_pointer",
                "DATA_CALLBACK_PARAM_OFFSET": "4",
                "DATA_ERROR_FLAG": "2",
                "DATA_CALLBACK_ERROR_OFFSET": "8",
                "DATA_CALLBACK_ERROR_PARAM_OFFSET": "0xc",
                "FUN_00002798": "perform_cleanup"
            },
            "code": "void process_data_00002994(void)\n{\n  int data = DAT_0000DATA_ERROR_FLAG9fDATA_CALLBACK_ERROR_OFFSET;\n  if (((*(uint *)(DAT_0000DATA_ERROR_FLAG9fDATA_CALLBACK_ERROR_OFFSET + DATA_FLAG_OFFSET) & DATA_READY_FLAG) != 0) && (*(int *)PTR_DAT_0000DATA_ERROR_FLAG9fc != 0)) {\n    *(uint *)(DAT_0000DATA_ERROR_FLAG9fDATA_CALLBACK_ERROR_OFFSET + DATA_PROCESS_FLAG_OFFSET) = *(uint *)(DAT_0000DATA_ERROR_FLAG9fDATA_CALLBACK_ERROR_OFFSET + DATA_PROCESS_FLAG_OFFSET) & CLEAR_DATA_PROCESS_FLAG;\n    (**(code **)PTR_DAT_0000DATA_ERROR_FLAG9fc)(*(undefinedDATA_READY_FLAG *)(PTR_DAT_0000DATA_ERROR_FLAG9fc + DATA_CALLBACK_PARAM_OFFSET));\n  }\n  if (((*(uint *)(data + DATA_FLAG_OFFSET) & DATA_ERROR_FLAG) != 0) && (*(int *)(PTR_DAT_0000DATA_ERROR_FLAG9fc + DATA_CALLBACK_ERROR_OFFSET) != 0)) {\n    (**(code **)(PTR_DAT_0000DATA_ERROR_FLAG9fc + DATA_CALLBACK_ERROR_OFFSET))(*(undefinedDATA_READY_FLAG *)(PTR_DAT_0000DATA_ERROR_FLAG9fc + DATA_CALLBACK_ERROR_PARAM_OFFSET));\n  }\n  perform_cleanup();\n  return;\n}",
            "called": [
                "FUN_00002798"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002994",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00002994"
        },
        "FUN_00000d2a": {
            "renaming": {
                "FUN_00000d2a": "get_exception_number_if_privileged_mode_00000d2a",
                "bVar1": "is_privileged_mode",
                "uVar2": "exception_number"
            },
            "code": "uint get_exception_number_if_privileged_mode_00000d2a()\n{\n  bool is_privileged_mode = (bool)isCurrentModePrivileged();\n  uint exception_number = 0;\n  if (is_privileged_mode) {\n    exception_number = getCurrentExceptionNumber();\n    exception_number &= 0x1f;\n  }\n  return exception_number;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000d2a",
            "calling": [
                "FUN_00000738"
            ],
            "imported": false,
            "current_name": "get_exception_number_if_privileged_mode_00000d2a"
        },
        "FUN_00001ff6": {
            "renaming": {
                "FUN_00001ff6": "set_bit_at_position_00001ff6",
                "param_1": "position",
                "uVar1": "bit_position",
                "iVar2": "memory_location"
            },
            "code": "void set_bit_at_position_00001ff6(undefined2 position)\n{\n  uint bit_position = get_bit_position(position);\n  int memory_location = get_memory_location(position);\n  *(int *)(memory_location + 4) = 1 << (bit_position & 0xff);\n  return;\n}",
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001ff6",
            "calling": [
                "FUN_00000e64"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_00001ff6"
        },
        "FUN_000013b8": {
            "renaming": {
                "FUN_000013b8": "set_param_value_000013b8",
                "param_1": "index",
                "param_2": "value",
                "param_3": "is_valid",
                "param_4": "assertion_msg",
                "uVar1": "ret_val",
                "PTR_s_FAILED_ASSERTION__0000143c": "assertion_msg",
                "PTR_DAT_00001440": "data_ptr",
                "PTR_DAT_00001444": "func_ptr",
                "FUN_00000f04": "assert",
                "FUN_00001448": "call_func_1",
                "FUN_00001392": "call_func_2"
            },
            "code": "int set_param_value_000013b8(int index, int value, int is_valid, char* PTR_s_FAILED_ASSERTION__0000143c) {\\n\\\n  if (index != 0) {\\n\\\n    assert(0 && PTR_s_FAILED_ASSERTION__0000143c);\\n\\\n  }\\n\\\n  int* PTR_DAT_00001440 = (int*)(PTR_DAT_00001440 + index * 8);\\n\\\n  *PTR_DAT_00001440 = value;\\n\\\n  *(PTR_DAT_00001440 + 1) = is_valid;\\n\\\n  call_func_1(PTR_DAT_00001444[index * 0x20 + 0x18], PTR_DAT_00001444[index * 0x20 + 0x1c]);\\n\\\n  if (PTR_DAT_00001444[index * 0x20 + 0x1e] == \"\\0\") {\\n\\\n    call_func_2(index, value);\\n\\\n    return 0;\\n\\\n  }\\n\\\n  else {\\n\\\n    return -1;\\n\\\n  }\\n\\\n}",
            "called": [
                "FUN_00000f04",
                "FUN_00001392",
                "FUN_00001448",
                "FUN_000014c4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000013b8",
            "calling": [
                "FUN_00000df4"
            ],
            "imported": false,
            "current_name": "set_param_value_000013b8"
        },
        "FUN_00002a88": {
            "renaming": {
                "FUN_00002a88": "print_commands_00002a88",
                "param_1": "command_list",
                "local_18": "command_info",
                "local_10": "command_index",
                "local_c": "current_command",
                "FUN_00004c84": "print_command",
                "PTR_s___20s__s_00002b04": "header",
                "PTR_s_Command_00002b00": "command",
                "PTR_s_Description_00002afc": "description",
                "FUN_00004db8": "print_separator",
                "PTR_s__________________________________00002b08": "separator",
                "PTR_PTR_s_reboot_00002b0c": "reboot"
            },
            "code": "void print_commands_00002a88(int *PTR_s_Command_00002b00_list)\n{\n  int *PTR_s_Command_00002b00_info [2];\n  uint PTR_s_Command_00002b00_index;\n  int *current_PTR_s_Command_00002b00;\n\n  print_PTR_s___20s__s_00002b04(PTR_s___20s__s_00002b04,PTR_s_Command_00002b00,PTR_s_Description_00002afc);\n  print_PTR_s__________________________________00002b08(PTR_s__________________________________00002b08);\n  PTR_s_Command_00002b00_info[0] = PTR_s_Command_00002b00_list;\n  PTR_s_Command_00002b00_info[1] = (int *)PTR_PTR_s_PTR_PTR_s_reboot_00002b0c_00002b0c;\n  for (PTR_s_Command_00002b00_index = 0; PTR_s_Command_00002b00_index < 2; PTR_s_Command_00002b00_index++) {\n    current_PTR_s_Command_00002b00 = PTR_s_Command_00002b00_info[PTR_s_Command_00002b00_index];\n    if (current_PTR_s_Command_00002b00 != (int *)0x0) {\n      for (; *current_PTR_s_Command_00002b00 != 0; current_PTR_s_Command_00002b00 += 3) {\n        print_PTR_s_Command_00002b00(PTR_s___20s__s_00002b04,*current_PTR_s_Command_00002b00,current_PTR_s_Command_00002b00[1]);\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_00004db8",
                "FUN_00004c84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002a88",
            "calling": [
                "FUN_00002b10"
            ],
            "imported": false,
            "current_name": "print_commands_00002a88"
        },
        "FUN_00002f30": {
            "renaming": {
                "FUN_00002f30": "iterate_list_of_pointers_00002f30",
                "local_10": "index",
                "local_c": "current_pointer",
                "FUN_00002ecc": "perform_operation_on_pointer",
                "FUN_00004db8": "print_list"
            },
            "code": "void iterate_list_of_pointers_00002f30(void)\n{\n  int index = 0;\n  undefined4 *current_pointer = *(undefined4 **)PTR_DAT_00002f6c;\n  while (current_pointer != (undefined4 *)0x0) {\n    perform_operation_on_pointer(index, current_pointer);\n    print_list(PTR_DAT_00002f70);\n    index++;\n    current_pointer = (undefined4 *)*current_pointer;\n  }\n  return;\n}",
            "called": [
                "FUN_00002ecc",
                "FUN_00004db8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002f30",
            "calling": [
                "FUN_00002fe0"
            ],
            "imported": false,
            "current_name": "iterate_list_of_pointers_00002f30"
        },
        "FUN_00001e44": {
            "renaming": {
                "FUN_00001e44": "set_bits_in_uint_at_index_00001e44",
                "param_1": "data",
                "param_2": "index",
                "param_3": "value",
                "iVar1": "byte_index",
                "PTR_DAT_00001ec0": "data"
            },
            "code": "void set_bits_in_uint_at_index_00001e44(uint32_t *PTR_DAT_00001ec0, uint32_t index, uint32_t value) {\n\tuint32_t byte_index = index >> 3;\n\tuint32_t bit_index = index & 7;\n\tuint32_t mask = ~(0xf << (bit_index << 2));\n\tPTR_DAT_00001ec0[byte_index] = (PTR_DAT_00001ec0[byte_index] & mask) | (value << (bit_index << 2));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001e44",
            "calling": [
                "FUN_00001ec4"
            ],
            "imported": false,
            "current_name": "set_bits_in_uint_at_index_00001e44"
        },
        "FUN_00001318": {
            "renaming": {
                "FUN_00001318": "set_bit_at_index_00001318",
                "param_1": "bit_index",
                "DAT_00001344": "data_array"
            },
            "code": "void set_bit_at_index_00001318(uint8_t bit_index)\n{\n    uint32_t* data_ptr = (uint32_t*)(DAT_00001344 + ((uint32_t)bit_index >> 5) * 4);\n    uint32_t bit_mask = 1 << (bit_index & 0x1f);\n    *data_ptr = bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001318",
            "calling": [
                "FUN_000014c4"
            ],
            "imported": false,
            "current_name": "set_bit_at_index_00001318"
        },
        "FUN_00000900": {
            "renaming": {
                "FUN_00000900": "get_main_stack_pointer_00000900",
                "uVar1": "main_stack_pointer"
            },
            "code": "unsigned int get_main_stack_pointer_00000900() {\n  unsigned int main_stack_pointer = 0;\n  main_stack_pointer = getMainStackPointer();\n  return main_stack_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000900",
            "calling": [
                "FUN_0000211c"
            ],
            "imported": false,
            "current_name": "get_main_stack_pointer_00000900"
        },
        "FUN_00004274": {
            "renaming": {
                "FUN_00004274": "do_nothing_with_pointer_00004274",
                "PTR_DAT_0000427c": "PTR_DATA"
            },
            "code": "void do_nothing_with_pointer_00004274(void)\n{\n  do_nothing_with_pointer_00004274(PTR_DAT_0000427c);\n  return;\n}",
            "called": [
                "FUN_000045e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004274",
            "calling": [
                "FUN_00004314"
            ],
            "imported": false,
            "current_name": "do_nothing_with_pointer_00004274"
        },
        "FUN_00002fe0": {
            "renaming": {
                "FUN_00002fe0": "processDeviceId_00002fe0",
                "param_1": "deviceIdCount",
                "param_2": "deviceIds",
                "iVar1": "deviceIdIndex",
                "uVar2": "deviceId"
            },
            "code": "void processDeviceId_00002fe0(int deviceIdCount, undefined4 *deviceIds)\n{\n  int deviceIdIndex;\n  undefined4 deviceId;\n  if (deviceIdCount < 3) {\n    printUsage(PTR_s_usage___s__s__device_id__all_00003050, *deviceIds, deviceIds[1]);\n  }\n  else {\n    deviceIdIndex = getDeviceIdIndex(deviceIds[2], PTR_DAT_00003054);\n    if (deviceIdIndex == 0) {\n      handleUndefinedDeviceId();\n    }\n    else {\n      deviceId = getDeviceId(deviceIds[2]);\n      deviceIdIndex = findDeviceIndex(deviceId);\n      if (deviceIdIndex == 0) {\n        printError(PTR_s_error__undefined_device_id_given_00003058);\n      }\n      else {\n        processDevice(deviceId, deviceIdIndex);\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_00002ecc",
                "FUN_00003d24",
                "FUN_00004db8",
                "FUN_00004042",
                "FUN_00004c84",
                "FUN_00002f30",
                "FUN_00004e52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002fe0",
            "calling": [
                "FUN_0000316c"
            ],
            "imported": false,
            "current_name": "processDeviceId_00002fe0"
        },
        "FUN_00001dc0": {
            "renaming": {
                "FUN_00001dc0": "extract_bits_00001dc0",
                "param_1": "input_value",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "ushort extract_bits_00001dc0(ushort input_value)\n{\n    const ushort MASK = 0x3f;\n    ushort extracted_bits = input_value & MASK;\n    return extracted_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001dc0",
            "calling": [
                "FUN_00001eea",
                "FUN_00001f80",
                "FUN_00001ff6"
            ],
            "imported": false,
            "current_name": "extract_bits_00001dc0"
        },
        "FUN_00000df4": {
            "renaming": {
                "FUN_00000df4": "initialize_00000df4",
                "FUN_000013b8": "set_configuration",
                "PTR_FUN_000012b4_1_00000e10": "function_pointer",
                "DAT_00000e0c": "data"
            },
            "code": "void initialize_00000df4(void)\n{\n  set_configuration(0, 0x1c200, PTR_FUN_000012b4_1_00000e10, DAT_00000e0c);\n  return;\n}",
            "called": [
                "FUN_000013b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000df4",
            "calling": [
                "FUN_00000410"
            ],
            "imported": false,
            "current_name": "initialize_00000df4"
        },
        "FUN_00002400": {
            "renaming": {
                "FUN_00002400": "do_nothing_00002400"
            },
            "code": "\nvoid do_nothing_00002400(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002400",
            "calling": [
                "FUN_00000f04"
            ],
            "imported": false,
            "current_name": "do_nothing_00002400"
        },
        "FUN_00002eb4": {
            "renaming": {
                "FUN_00002eb4": "initialize_program_00002eb4",
                "FUN_0000211c": "setup_environment"
            },
            "code": "int initialize_program_00002eb4(void)\n{\n    setup_environment();\n    return 0;\n}",
            "called": [
                "FUN_0000211c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002eb4",
            "calling": [],
            "imported": false,
            "current_name": "initialize_program_00002eb4"
        },
        "FUN_0000328c": {
            "renaming": {
                "FUN_0000328c": "decode_and_compute_checksum_0000328c",
                "param_1": "input_array",
                "param_2": "output_array",
                "local_10": "temp1",
                "local_a": "decoded_char",
                "FUN_00004f84": "decode_char",
                "iVar1": "checksum"
            },
            "code": "int decode_and_compute_checksum_0000328c(int *input_array, int *output_array){\n  int temp1;\n  int temp2;\n  short decoded_char;\n  decoded_char = decode_char(*input_array,&temp1,10);\n  output_array[5] = decoded_char - 0x76c;\n  decoded_char = decode_char(temp1 + 1,&temp2,10);\n  output_array[4] = decoded_char - 1;\n  decoded_char = decode_char(temp2 + 1,&temp1,10);\n  output_array[3] = (int)decoded_char;\n  decoded_char = decode_char(input_array[1],&temp2,10);\n  output_array[2] = (int)decoded_char;\n  decoded_char = decode_char(temp2 + 1,&temp1,10);\n  output_array[1] = (int)decoded_char;\n  decoded_char = decode_char(temp1 + 1,&temp2,10);\n  *output_array = (int)decoded_char;\n  int checksum = compute_checksum(output_array[5] + 0x76c,output_array[4] + 1,output_array[3]);\n  output_array[6] = checksum;\n  output_array[8] = -1;\n  return 0;\n}",
            "called": [
                "FUN_000031fc",
                "FUN_00004f84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000328c",
            "calling": [
                "FUN_00003478",
                "FUN_000033f4"
            ],
            "imported": false,
            "current_name": "decode_and_compute_checksum_0000328c"
        },
        "FUN_000041f4": {
            "renaming": {
                "FUN_000041f4": "initialize_data_structure_000041f4",
                "param_1": "data_structure",
                "param_2": "initial_value_1",
                "param_3": "initial_value_2",
                "puVar1": "pointer_to_label",
                "PTR_FUN_00004dc8_1_0000422c": "PTR_FUN_00004dc8_1_0000422c",
                "DAT_00004230": "DAT_00004230",
                "PTR_FUN_00004e26_1_00004234": "PTR_FUN_00004e26_1_00004234",
                "PTR_LAB_00004e4a_1_00004238": "PTR_LAB_00004e4a_1_00004238"
            },
            "code": "void initialize_data_structure_000041f4(undefined4 *data_structure, undefined2 initial_value_1, undefined2 initial_value_2)\n{\n  data_structure[0] = 0;\n  data_structure[1] = 0;\n  data_structure[2] = 0;\n  data_structure[3] = initial_value_1;\n  data_structure[4] = 0;\n  data_structure[5] = 0;\n  data_structure[6] = 0;\n  data_structure[7] = 0;\n  data_structure[8] = data_structure;\n  data_structure[9] = PTR_FUN_00004dc8_1_0000422c;\n  data_structure[10] = DAT_00004230;\n  data_structure[11] = PTR_FUN_00004e26_1_00004234;\n  data_structure[12] = PTR_LAB_00004e4a_1_00004238;\n}\n",
            "called": [
                "FUN_00004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000041f4",
            "calling": [
                "FUN_000042a4"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_000041f4"
        },
        "FUN_0000316c": {
            "renaming": {
                "FUN_0000316c": "validate_input_0000316c",
                "param_1": "num_args",
                "param_2": "args",
                "iVar1": "result",
                "FUN_00002f74": "print_error",
                "FUN_00004e52": "compare_string",
                "FUN_00002fe0": "process_input",
                "FUN_0000305c": "process_output",
                "FUN_00004c84": "print_usage"
            },
            "code": "int validate_input_0000316c(int num_args, int *args)\n{\n    int result;\n    if (num_args < 2) {\n        print_error();\n    }\n    else {\n        result = compare_string(args[1], PTR_DAT_000031d4);\n        if (result == 0) {\n            process_input(num_args, args);\n        }\n        else {\n            result = compare_string(args[1], PTR_s_write_000031d8);\n            if (result == 0) {\n                process_output(num_args, args);\n            }\n            else {\n                print_usage(PTR_s_usage___s_read_write_000031dc, *args);\n            }\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_0000305c",
                "FUN_00004c84",
                "FUN_00004e52",
                "FUN_00002f74",
                "FUN_00002fe0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000316c",
            "calling": [],
            "imported": false,
            "current_name": "validate_input_0000316c"
        },
        "FUN_000026f0": {
            "renaming": {
                "FUN_000026f0": "execute_function_if_not_null_000026f0",
                "param_1": "function_pointer",
                "PTR_DAT_00002710": "function_pointer"
            },
            "code": "void execute_function_if_not_null_000026f0(int* PTR_DAT_00002710){\n  if (*PTR_DAT_00002710 != 0) {\n    (**(void (**)())PTR_DAT_00002710)();\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000026f0",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_if_not_null_000026f0"
        },
        "FUN_000057d2": {
            "renaming": {
                "FUN_000057d2": "process_data_000057d2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "data",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "end_of_data",
                "iVar3": "current_index"
            },
            "code": "int process_data_000057d2(undefined4 param1, undefined4 param2, undefined *data, int length)\n{\n  int index = 0;\n  int result = 0;\n  while (index < length)\n  {\n    result = FUN_000057a8(param1, data[index], param2, length, index);\n    index++;\n  }\n  return result;\n}",
            "called": [
                "FUN_000057a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000057d2",
            "calling": [
                "FUN_000057f8"
            ],
            "imported": false,
            "current_name": "process_data_000057d2"
        },
        "FUN_000056b8": {
            "renaming": {
                "FUN_000056b8": "check_permissions_and_set_flag_000056b8",
                "param_1": "fd",
                "param_2": "flags",
                "param_3": "result",
                "param_4": "mask",
                "iVar1": "res",
                "uVar2": "perm",
                "auStack_68": "buffer",
                "local_64": "unused"
            },
            "code": "int check_permissions_and_set_flag_000056b8(int fd, int flags, int *result, unsigned int *mask) {\n  int res;\n  unsigned int perm;\n  unsigned char buffer[4];\n  if ((*(short *)(flags + 0xe) < 0) || ((res = ioctl(fd, *(short *)(flags + 0xe), buffer)) < 0)) {\n    *mask = 0;\n    if ((int)((uint)*(ushort *)(flags + 0xc) << 0x18) < 0) {\n      *result = 0x40;\n      return 0;\n    }\n  }\n  else {\n    perm = *(unsigned int *)buffer;\n    *mask = (perm & 0xf000) == 0x2000;\n  }\n  *result = 0x400;\n  return 0;\n}",
            "called": [
                "FUN_00000514"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000056b8",
            "calling": [
                "FUN_00005700"
            ],
            "imported": false,
            "current_name": "check_permissions_and_set_flag_000056b8"
        },
        "FUN_00001a18": {
            "renaming": {
                "FUN_00001a18": "initialize_data_00001a18",
                "FUN_000016ec": "set_data_value",
                "FUN_00001734": "clear_flags",
                "DAT_00001a34": "data_ptr",
                "PTR_DAT_00001a38": "data_flag_ptr"
            },
            "code": "void initialize_data_00001a18(void)\n{\n  set_data_value(DAT_00001a34, 1);\n  clear_flags();\n  *PTR_DAT_00001a38 = 4;\n  return;\n}",
            "called": [
                "FUN_00001734",
                "FUN_000016ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001a18",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": false,
            "current_name": "initialize_data_00001a18"
        },
        "FUN_00000d9c": {
            "renaming": {
                "FUN_00000d9c": "initialize_data_00000d9c",
                "FUN_00000d76": "set_data_to_zero",
                "DAT_00000dac": "data_ptr"
            },
            "code": "void initialize_data_00000d9c(void)\n{\n  set_data_to_zero(DAT_00000dac, 0);\n  return;\n}",
            "called": [
                "FUN_00000d76"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000d9c",
            "calling": [
                "FUN_00000db0"
            ],
            "imported": false,
            "current_name": "initialize_data_00000d9c"
        },
        "FUN_00003ff4": {
            "renaming": {
                "FUN_00003ff4": "find_maximum_distance_00003ff4",
                "param_1": "start_index",
                "param_2": "current_max_distance",
                "param_3": "end_index",
                "param_4": "param_4",
                "uVar1": "max_distance",
                "FUN_000045ee": "calculate_distance",
                "FUN_00004622": "update_max_distance"
            },
            "code": "uint find_maximum_distance_00003ff4(int start_index, uint current_max_distance, uint end_index, undefined param_4)\n{\n  uint max_distance = current_max_distance;\n  if ((current_max_distance < end_index) && (start_index != 0)) {\n    calculate_distance((end_index - current_max_distance) + start_index, start_index, current_max_distance);\n    update_max_distance(start_index, param_4, end_index - current_max_distance);\n  }\n  return max_distance;\n}",
            "called": [
                "FUN_000045ee",
                "FUN_00004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003ff4",
            "calling": [
                "FUN_00003ec4"
            ],
            "imported": false,
            "current_name": "find_maximum_distance_00003ff4"
        },
        "FUN_00004634": {
            "renaming": {
                "FUN_00004634": "FUNC_00004634"
            },
            "code": "\nvoid FUNC_00004634(uint *param_1,uint param_2,undefined4 param_3)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  bool bVar6;\n  uint *local_20;\n  uint local_1c;\n  undefined4 uStack_18;\n  \n  local_20 = param_1;\n  local_1c = param_2;\n  uStack_18 = param_3;\n  if (0x3b < *param_1) {\n    FUN_00005584(&local_20,*param_1,0x3c);\n    uVar3 = param_1[1] + (int)local_20;\n    param_1[1] = uVar3;\n    if ((int)local_1c < 0) {\n      uVar3 = uVar3 - 1;\n      *param_1 = local_1c + 0x3c;\n    }\n    else {\n      *param_1 = local_1c;\n    }\n    if ((int)local_1c < 0) {\n      param_1[1] = uVar3;\n    }\n  }\n  if (0x3b < param_1[1]) {\n    FUN_00005584(&local_20,param_1[1],0x3c);\n    bVar6 = (int)local_1c < 0;\n    uVar4 = param_1[2] + (int)local_20;\n    param_1[2] = uVar4;\n    uVar3 = local_1c;\n    if (bVar6) {\n      uVar3 = local_1c + 0x3c;\n      uVar4 = uVar4 - 1;\n    }\n    if (!bVar6) {\n      param_1[1] = uVar3;\n    }\n    if (bVar6) {\n      param_1[1] = uVar3;\n    }\n    if (bVar6) {\n      param_1[2] = uVar4;\n    }\n  }\n  if (0x17 < param_1[2]) {\n    FUN_00005584(&local_20,param_1[2],0x18);\n    bVar6 = (int)local_1c < 0;\n    uVar4 = param_1[3] + (int)local_20;\n    param_1[3] = uVar4;\n    uVar3 = local_1c;\n    if (bVar6) {\n      uVar3 = local_1c + 0x18;\n      uVar4 = uVar4 - 1;\n    }\n    if (!bVar6) {\n      param_1[2] = uVar3;\n    }\n    if (bVar6) {\n      param_1[2] = uVar3;\n    }\n    if (bVar6) {\n      param_1[3] = uVar4;\n    }\n  }\n  if (0xb < param_1[4]) {\n    FUN_00005584(&local_20,param_1[4],0xc);\n    bVar6 = (int)local_1c < 0;\n    uVar3 = param_1[5] + (int)local_20;\n    param_1[5] = uVar3;\n    if (bVar6) {\n      local_1c = local_1c + 0xc;\n      uVar3 = uVar3 - 1;\n    }\n    if (!bVar6) {\n      param_1[4] = local_1c;\n    }\n    if (bVar6) {\n      param_1[4] = local_1c;\n    }\n    if (bVar6) {\n      param_1[5] = uVar3;\n    }\n  }\n  puVar1 = PTR_DAT_000047e0;\n  uVar3 = param_1[5];\n  if ((uVar3 & 3) == 0) {\n    if (uVar3 == (uVar3 / 100) * 100) {\n      if ((uVar3 + 0x76c) % 400 == 0) {\n        iVar5 = 0x1d;\n      }\n      else {\n        iVar5 = 0x1c;\n      }\n    }\n    else {\n      iVar5 = 0x1d;\n    }\n  }\n  else {\n    iVar5 = 0x1c;\n  }\n  if ((int)param_1[3] < 1) {\n    while ((int)param_1[3] < 1) {\n      uVar3 = param_1[4];\n      param_1[4] = uVar3 - 1;\n      if (uVar3 - 1 == 0xffffffff) {\n        uVar4 = param_1[5];\n        uVar3 = uVar4 - 1;\n        param_1[4] = 0xb;\n        param_1[5] = uVar3;\n        if ((uVar3 & 3) == 0) {\n          if (uVar3 == (uVar3 / 100) * 100) {\n            if ((uVar4 + 0x76b) % 400 == 0) {\n              iVar5 = 0x1d;\n            }\n            else {\n              iVar5 = 0x1c;\n            }\n          }\n          else {\n            iVar5 = 0x1d;\n          }\n        }\n        else {\n          iVar5 = 0x1c;\n        }\n      }\n      iVar2 = iVar5;\n      if (param_1[4] != 1) {\n        iVar2 = *(int *)(puVar1 + param_1[4] * 4);\n      }\n      param_1[3] = iVar2 + param_1[3];\n    }\n  }\n  else {\n    while( true ) {\n      uVar3 = param_1[4];\n      iVar2 = iVar5;\n      if (uVar3 != 1) {\n        iVar2 = *(int *)(puVar1 + uVar3 * 4);\n      }\n      if ((int)param_1[3] <= iVar2) break;\n      param_1[3] = param_1[3] - iVar2;\n      param_1[4] = uVar3 + 1;\n      if (uVar3 + 1 == 0xc) {\n        uVar4 = param_1[5];\n        uVar3 = uVar4 + 1;\n        param_1[4] = 0;\n        param_1[5] = uVar3;\n        if ((uVar3 & 3) == 0) {\n          if (uVar3 % 100 == 0) {\n            if ((uVar4 + 0x76d) % 400 == 0) {\n              iVar5 = 0x1d;\n            }\n            else {\n              iVar5 = 0x1c;\n            }\n          }\n          else {\n            iVar5 = 0x1d;\n          }\n        }\n        else {\n          iVar5 = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00005584"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00004634",
            "calling": [
                "FUN_000047e4"
            ],
            "imported": false,
            "current_name": "FUNC_00004634"
        },
        "FUN_00001d5e": {
            "renaming": {
                "FUN_00001d5e": "extract_bits_from_param_00001d5e",
                "param_1": "param"
            },
            "code": "uint16_t extract_bits_from_param_00001d5e(ushort param)\n{\n    uint16_t extracted_bits = param & 0x7000;\n    uint16_t result = extracted_bits | 0x40048000;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001d5e",
            "calling": [
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "imported": false,
            "current_name": "extract_bits_from_param_00001d5e"
        },
        "FUN_0000191c": {
            "renaming": {
                "FUN_0000191c": "initialize_system_0000191c",
                "FUN_00001778": "enable_interrupts",
                "FUN_00001748": "set_timer",
                "*DAT_00001958": "*data_reg",
                "*PTR_DAT_0000195c": "*status_reg_ptr"
            },
            "code": "void initialize_system_0000191c(void)\n{\n  enable_interrupts();\n  set_timer(64);\n  *DAT_00001958 = *DAT_00001958 & 0x3b;\n  while ((data_reg[6] & 0xc) != 0);\n  *PTR_DAT_0000195c = 1;\n  return;\n}",
            "called": [
                "FUN_00001748",
                "FUN_00001778"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000191c",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": false,
            "current_name": "initialize_system_0000191c"
        },
        "FUN_000050f4": {
            "renaming": {
                "FUN_000050f4": "get_data_pointer_000050f4",
                "PTR_DAT_000050fc": "data_pointer"
            },
            "code": "const char* get_data_pointer_000050f4() {\n  return PTR_DAT_000050fc;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000050f4",
            "calling": [
                "FUN_000047e4"
            ],
            "imported": false,
            "current_name": "get_data_pointer_000050f4"
        },
        "FUN_00005a58": {
            "renaming": {
                "FUN_00005a58": "encode_string_00005a58",
                "param_1": "input_parameter",
                "param_2": "string_ptr",
                "param_3": "encoded_string_ptr",
                "param_4": "unused_parameter",
                "param_5": "encoder_function",
                "iVar1": "status",
                "uVar2": "return_value",
                "uVar3": "byte_offset",
                "uVar4": "i",
                "bVar5": "is_offset_4",
                "string_length": "string_length",
                "remaining_length": "remaining_length"
            },
            "code": "undefined4 encode_string_00005a58(undefined4 param_1, uint *string_ptr, uint *encoded_string_ptr, undefined4 param_4, code *encoder_function) {\n    int string_length = string_ptr[4];\n    if (string_length < string_ptr[2]) {\n        string_length = string_ptr[2];\n    }\n    *encoded_string_ptr = string_length;\n    if (*(char *)((int)string_ptr + 0x43) != '\\0') {\n        *encoded_string_ptr = string_length + 1;\n    }\n    if ((int)(*string_ptr << 0x1a) < 0) {\n        *encoded_string_ptr += 2;\n    }\n    uint byte_offset = *string_ptr & 6;\n    if (byte_offset == 0) {\n        for (; byte_offset < (string_ptr[3] - *encoded_string_ptr); byte_offset++) {\n            int status = (*encoder_function)(param_1, param_4, (int)string_ptr + 0x19, 1);\n            if (status == -1) {\n                return 0xffffffff;\n            }\n        }\n    }\n    byte_offset = (uint)*(byte *)((int)string_ptr + 0x43);\n    if (byte_offset != 0) {\n        byte_offset = 1;\n    }\n    if ((int)(*string_ptr << 0x1a) < 0) {\n        *(undefined *)((int)string_ptr + byte_offset + 0x43) = 0x30;\n        *(undefined *)((int)string_ptr + byte_offset + 0x44) = *(undefined *)((int)string_ptr + 0x45);\n        byte_offset += 2;\n    }\n    int status = (*encoder_function)(param_1, param_4, (int)string_ptr + 0x43, byte_offset);\n    if (status == -1) {\n        return 0xffffffff;\n    }\n    uint remaining_length = string_ptr[3];\n    bool is_offset_4 = (*string_ptr & 6) == 4;\n    if (is_offset_4) {\n        remaining_length = remaining_length - *encoded_string_ptr;\n    }\n    if (is_offset_4) {\n        remaining_length = remaining_length & ~((int)remaining_length >> 0x1f);\n    }\n    else {\n        remaining_length = 0;\n    }\n    if (string_ptr[4] < string_ptr[2]) {\n        remaining_length += (string_ptr[2] - string_ptr[4]);\n    }\n    for (uint i = 0; i != remaining_length; i++) {\n        status = (*encoder_function)(param_1, param_4, (int)string_ptr + 0x1a, 1);\n        if (status == -1) {\n            return 0xffffffff;\n        }\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005a58",
            "calling": [
                "FUN_00005b34"
            ],
            "imported": false,
            "current_name": "encode_string_00005a58"
        },
        "FUN_000056b0": {
            "renaming": {
                "FUN_000056b0": "get_data_000056b0",
                "DAT_000056b4": "data"
            },
            "code": "int get_data_000056b0() {\n    return DAT_000056b4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000056b0",
            "calling": [
                "FUN_000047e4",
                "FUN_00005100",
                "FUN_00004f98"
            ],
            "imported": false,
            "current_name": "get_data_000056b0"
        },
        "FUN_00003d24": {
            "renaming": {
                "FUN_00003d24": "find_element_at_index_00003d24",
                "param_1": "index",
                "local_10": "current_index",
                "local_c": "list_head"
            },
            "code": "undefined4 * find_element_at_index_00003d24(int index)\n{\n  undefined4 *list_head = *(undefined4 **)PTR_DAT_00003d60;\n  int current_index = 0;\n  while (current_index < index && list_head != (undefined4 *)0x0) {\n    list_head = (undefined4 *)*list_head;\n    current_index++;\n  }\n  return list_head;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003d24",
            "calling": [
                "FUN_0000305c",
                "FUN_00002fe0"
            ],
            "imported": false,
            "current_name": "find_element_at_index_00003d24"
        },
        "FUN_000060cc": {
            "renaming": {
                "FUN_000060cc": "calculateValueIfValid_000060cc",
                "param_1": "data",
                "param_2": "min",
                "param_3": "max",
                "param_4": "extraData",
                "uVar1": "calculatedValue",
                "uVar2": "currentValue",
                "FUN_00004b34": "logInfo",
                "FUN_00006964": "getCurrentValue",
                "FUN_00004bd0": "calculateNewValue",
                "FUN_000060b0": "performAction"
            },
            "code": "uint calculateValueIfValid_000060cc(uint data, uint min, uint max, uint extraData){\n  uint calculatedValue;\n  uint currentValue;\n  if (min != 0) {\n    if (max == 0) {\n      logError();\n      calculatedValue = max;\n    }\n    else {\n      currentValue = getCurrentValue();\n      calculatedValue = min;\n      if ((currentValue < max) && (calculatedValue = calculateNewValue(data, max), calculatedValue != 0)) {\n        performAction(calculatedValue, min, max);\n        logInfo(data, min);\n      }\n    }\n    return calculatedValue;\n  }\n  calculatedValue = calculateNewValue(data, max, max, extraData);\n  return calculatedValue;\n}",
            "called": [
                "FUN_00004bd0",
                "FUN_00004b34",
                "FUN_000060b0",
                "FUN_00006964"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000060cc",
            "calling": [
                "FUN_000068f0"
            ],
            "imported": false,
            "current_name": "calculateValueIfValid_000060cc"
        },
        "FUN_00003dc4": {
            "renaming": {
                "FUN_00003dc4": "calculate_number_of_digits_00003dc4",
                "param_1": "starting_address",
                "param_2": "number",
                "local_20": "remainder",
                "local_14": "current_position",
                "local_10": "digits_count",
                "local_c": "result"
            },
            "code": "int calculate_number_of_digits_00003dc4(int starting_address, uint number)\n{\n  uint remainder;\n  char *current_position;\n  uint digits_count;\n  int result;\n\n  result = 1;\n  if (DAT_00003e50 < number) {\n    result = 10;\n  }\n  else {\n    for (digits_count = 10; digits_count <= number; digits_count = digits_count * 10) {\n      result = result + 1;\n    }\n  }\n  if (starting_address != 0) {\n    current_position = (char *)(result + starting_address);\n    remainder = number;\n    do {\n      current_position = current_position + -1;\n      *current_position = (char)remainder +\n                  (char)(uint)((ulonglong)DAT_00003e54 * (ulonglong)remainder >> 0x23) * -10 + '0';\n      remainder = (uint)((ulonglong)DAT_00003e54 * (ulonglong)remainder >> 0x23);\n    } while (remainder != 0);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003dc4",
            "calling": [
                "FUN_00003e58"
            ],
            "imported": false,
            "current_name": "calculate_number_of_digits_00003dc4"
        },
        "FUN_000022be": {
            "renaming": {
                "FUN_000022be": "increment_and_set_value_at_offset_000022be",
                "param_1": "memory_block",
                "param_2": "value",
                "uVar1": "offset",
                "PTR_": "pointer_",
                "DAT_": "data_"
            },
            "code": "void increment_and_set_value_at_offset_000022be(int *memory_block, undefined value) {\n  uint offset = memory_block[3];\n  memory_block[3] = offset + 1;\n  uint base_address = *memory_block;\n  uint mask = memory_block[1] - 1U;\n  uint address_to_write = (offset & mask) + base_address;\n  *(undefined *)address_to_write = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000022be",
            "calling": [
                "FUN_00002364"
            ],
            "imported": false,
            "current_name": "increment_and_set_value_at_offset_000022be"
        },
        "FUN_00002108": {
            "renaming": {
                "FUN_00002108": "initialize_data_buffer_00002108",
                "FUN_00002028": "write_data_buffer",
                "DAT_00002118": "data_buffer"
            },
            "code": "void initialize_data_buffer_00002108(void)\n{\n  write_DAT_00002118(DAT_00002118, 4);\n  return;\n}",
            "called": [
                "FUN_00002028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002108",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_buffer_00002108"
        },
        "FUN_00001d80": {
            "renaming": {
                "FUN_00001d80": "calculateValueFromParam_00001d80",
                "param_1": "parameter",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "uint16_t calculateValueFromParam_00001d80(ushort parameter) {\n    uint16_t value = parameter & 0x1c0;\n    value |= 0x400ff000;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001d80",
            "calling": [
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "imported": false,
            "current_name": "calculateValueFromParam_00001d80"
        },
        "FUN_000033c0": {
            "renaming": {
                "FUN_000033c0": "check_alarm_set_000033c0",
                "iVar1": "alarm_status",
                "auStack_2c": "alarm_info",
                "FUN_00002690": "get_alarm_info",
                "FUN_00004db8": "log_error",
                "FUN_00003378": "process_alarm_info"
            },
            "code": "bool check_alarm_set_000033c0(void)\n{\n  int alarm_status;\n  undefined alarm_info [36];\n  alarm_status = get_alarm_info(alarm_info);\n  if (alarm_status != 0) {\n    log_error(PTR_s_rtc__error_getting_alarm_000033f0);\n  }\n  else {\n    process_alarm_info(alarm_info);\n  }\n  return alarm_status != 0;\n}",
            "called": [
                "FUN_00004db8",
                "FUN_00003378",
                "FUN_00002690"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000033c0",
            "calling": [
                "FUN_00003524"
            ],
            "imported": false,
            "current_name": "check_alarm_set_000033c0"
        },
        "FUN_00002b10": {
            "renaming": {
                "FUN_00002b10": "execute_shell_command_00002b10",
                "param_1": "command",
                "param_2": "args",
                "local_48": "args_copy",
                "local_3c": "command_func",
                "local_38": "arg_ptrs",
                "local_34": "arg_count",
                "local_2d": "quote_char",
                "local_2c": "escape_char",
                "local_28": "current_char",
                "local_24": "current_arg",
                "local_20": "arg_index",
                "local_1c": "escape_count",
                "local_18": "quote_count",
                "local_14": "current_arg_ptr"
            },
            "code": "void execute_shell_command_00002b10(byte *command, byte *args[]) {\n  int arg_count = 0;\n  int escape_count = 0;\n  byte *current_arg = args[0];\n  while (*current_arg != 0) {\n    if (*current_arg > 0x20) {\n      if ((*current_arg == 0x22) || (*current_arg == 0x27)) {\n        byte quote_char = *current_arg;\n        do {\n          current_arg++;\n          if (*current_arg == 0) {\n            print_error(\"Unexpected end of argument\");\n            return;\n          }\n          if (*current_arg == 0x5c) {\n            escape_count++;\n            current_arg++;\n            if (*current_arg == 0) {\n              print_error(\"Unexpected end of argument\");\n              return;\n            }\n          }\n        } while (quote_char != *current_arg);\n        if (*(current_arg + 1) > 0x20) {\n          print_error(\"Unexpected argument after quote\");\n          return;\n        }\n      }\n      else {\n        do {\n          if (*current_arg == 0x5c) {\n            escape_count++;\n            current_arg++;\n            if (*current_arg == 0) {\n              print_error(\"Unexpected end of argument\");\n              return;\n            }\n          }\n          current_arg++;\n          if (*current_arg == 0x22) {\n            print_error(\"Unexpected quote character\");\n            return;\n          }\n        } while (*current_arg > 0x20);\n      }\n      arg_count++;\n    }\n    *current_arg = 0;\n    current_arg++;\n  }\n  if (arg_count > 0) {\n    args[arg_count] = NULL;\n    remove_escape_chars(args, escape_count);\n    code *command_func = (code *)get_command_function(command, args);\n    if (command_func == NULL) {\n      int exit_code = execute_external_command(command, args);\n      if (exit_code == 0) {\n        return;\n      }\n      else {\n        print_error(\"Command not found: %s\", command);\n      }\n    }\n    else {\n      (*command_func)(arg_count, args);\n    }\n  }\n}\n",
            "called": [
                "FUN_00002a18",
                "FUN_00004db8",
                "FUN_00002a88",
                "FUN_00004c84",
                "FUN_00004e52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002b10",
            "calling": [
                "FUN_00002e6c"
            ],
            "imported": false,
            "current_name": "execute_shell_command_00002b10"
        },
        "FUN_00001b10": {
            "renaming": {
                "FUN_00001b10": "process_input_data_00001b10",
                "param_1": "input_size",
                "uVar1": "result",
                "PTR_DAT_00001bb4": "input_data",
                "PTR_DAT_00001bb0": "input_data_pointer"
            },
            "code": "uint32_t process_input_data_00001b10(uint8_t input_size)\n{\n  uint32_t result;\n  if (input_size < 8) {\n    do {\n      switch(PTR_DAT_00001bb4[(uint32_t)input_size + (uint32_t)(byte)*PTR_DAT_00001bb0 * 8]) {\n      case 0:\n        perform_operation_0();\n        break;\n      case 1:\n        perform_operation_1();\n        break;\n      case 2:\n        perform_operation_2();\n        break;\n      case 3:\n        perform_operation_3();\n        break;\n      case 4:\n        perform_operation_4();\n        break;\n      case 5:\n        perform_operation_5();\n        break;\n      case 6:\n        perform_operation_6();\n        break;\n      case 7:\n        perform_operation_7();\n        break;\n      default:\n        return 0xFFFFFFFF;\n      }\n    } while (input_size != *PTR_DAT_00001bb0);\n    result = 0;\n  }\n  else {\n    result = 0xFFFFFFFF;\n  }\n  return result;\n}",
            "called": [
                "FUN_00001a18",
                "FUN_00001ad4",
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_00001960",
                "FUN_000018bc",
                "FUN_00001a3c",
                "FUN_0000191c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001b10",
            "calling": [
                "FUN_00001c84"
            ],
            "imported": false,
            "current_name": "process_input_data_00001b10"
        },
        "FUN_000047e4": {
            "renaming": {
                "FUN_000047e4": "FUNC_000047e4"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 FUNC_000047e4(int *param_1)\n\n{\n  longlong lVar1;\n  longlong lVar2;\n  int *piVar3;\n  uint uVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  int iVar11;\n  uint uVar12;\n  uint uVar13;\n  uint uVar14;\n  uint uVar15;\n  bool bVar16;\n  \n  piVar3 = (int *)FUN_000056b0();\n  FUNC_00004634(param_1);\n  uVar12 = param_1[5];\n  iVar11 = param_1[3] + -1 + *(int *)(PTR_DAT_00004adc + param_1[4] * 4);\n  if (((1 < param_1[4]) && ((uVar12 & 3) == 0)) &&\n     ((uVar12 != (uVar12 / 100) * 100 || (uVar12 + 0x76c == ((uVar12 + 0x76c) / 400) * 400)))) {\n    iVar11 = iVar11 + 1;\n  }\n  param_1[7] = iVar11;\n  if (20000 < (int)&PTR_DAT_00002710 + uVar12) {\n    iVar7 = -1;\n    iVar5 = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)uVar12 < 0x47) {\n    if (uVar12 != 0x46) {\n      for (uVar9 = 0x45; (int)uVar12 < (int)uVar9; uVar9 = uVar9 - 1) {\n        if ((uVar9 & 3) == 0) {\n          if (uVar9 == (uVar9 / 100) * 100) {\n            if ((uVar9 + 0x76c) % 400 == 0) {\n              iVar7 = 0x16e;\n            }\n            else {\n              iVar7 = 0x16d;\n            }\n          }\n          else {\n            iVar7 = 0x16e;\n          }\n        }\n        else {\n          iVar7 = 0x16d;\n        }\n        iVar11 = iVar11 - iVar7;\n      }\n      if ((uVar9 & 3) == 0) {\n        if (uVar12 == (uVar12 / 100) * 100) {\n          iVar7 = 0x16d;\n          if ((uVar12 + 0x76c) % 400 == 0) {\n            iVar7 = 0x16e;\n          }\n        }\n        else {\n          iVar7 = 0x16e;\n        }\n      }\n      else {\n        iVar7 = 0x16d;\n      }\n      iVar11 = iVar11 - iVar7;\n    }\n  }\n  else {\n    uVar9 = 0x46;\n    do {\n      if ((uVar9 & 3) == 0) {\n        if (uVar9 % 100 == 0) {\n          if ((uVar9 + 0x76c) % 400 == 0) {\n            iVar7 = 0x16e;\n          }\n          else {\n            iVar7 = 0x16d;\n          }\n        }\n        else {\n          iVar7 = 0x16e;\n        }\n      }\n      else {\n        iVar7 = 0x16d;\n      }\n      uVar9 = uVar9 + 1;\n      iVar11 = iVar11 + iVar7;\n    } while (uVar12 != uVar9);\n  }\n  lVar1 = (longlong)DAT_00004ae0 * (longlong)iVar11 +\n          (longlong)(param_1[2] * 0xe10 + param_1[1] * 0x3c + *param_1);\n  uVar15 = (uint)lVar1;\n  iVar7 = (int)((ulonglong)lVar1 >> 0x20);\n  FUN_000050e8();\n  FUNC_00005100();\n  uVar9 = *(uint *)PTR_DAT_00004ae4;\n  if (*(uint *)PTR_DAT_00004ae4 == 0) {\nLAB_00004934:\n    uVar12 = piVar3[10];\n    iVar7 = (uint)lVar1 + uVar12;\n    iVar5 = (int)((ulonglong)lVar1 >> 0x20) +\n            ((int)uVar12 >> 0x1f) + (uint)CARRY4((uint)lVar1,uVar12);\n  }\n  else {\n    uVar14 = param_1[8];\n    uVar13 = uVar14;\n    if (0 < (int)uVar14) {\n      uVar13 = 1;\n    }\n    if ((piVar3[1] == param_1[5] + 0x76c) || (iVar5 = FUN_00004f98(), iVar5 != 0)) {\n      uVar10 = piVar3[0x14];\n      uVar4 = piVar3[0x12];\n      uVar8 = piVar3[10];\n      uVar9 = uVar4 - uVar8;\n      iVar5 = (piVar3[0x13] - ((int)uVar8 >> 0x1f)) - (uint)(uVar4 < uVar8);\n      if (((int)((iVar7 - iVar5) - (uint)(uVar15 < uVar9)) < 0 ==\n           (SBORROW4(iVar7,iVar5) != SBORROW4(iVar7 - iVar5,(uint)(uVar15 < uVar9)))) &&\n         (iVar6 = (piVar3[0x13] - ((int)uVar10 >> 0x1f)) - (uint)(uVar4 < uVar10),\n         bVar16 = uVar15 < uVar4 - uVar10,\n         (int)((iVar7 - iVar6) - (uint)bVar16) < 0 !=\n         (SBORROW4(iVar7,iVar6) != SBORROW4(iVar7 - iVar6,(uint)bVar16)))) goto LAB_00004a88;\n      uVar4 = piVar3[8] - uVar10;\n      iVar6 = (piVar3[9] - ((int)uVar10 >> 0x1f)) - (uint)((uint)piVar3[8] < uVar10);\n      if (*piVar3 != 0) {\n        if ((int)((iVar7 - iVar6) - (uint)(uVar15 < uVar4)) < 0 ==\n            (SBORROW4(iVar7,iVar6) != SBORROW4(iVar7 - iVar6,(uint)(uVar15 < uVar4))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        uVar9 = 0;\n        if ((int)uVar14 < 0) goto LAB_00004934;\nLAB_00004a14:\n        uVar15 = uVar13 ^ uVar9;\n        uVar13 = uVar9;\n        if (uVar15 == 1) {\n          if (uVar9 == 0) {\n            iVar7 = uVar10 - uVar8;\n          }\n          else {\n            iVar7 = uVar8 - uVar10;\n          }\n          iVar5 = param_1[3];\n          *param_1 = *param_1 + iVar7;\n          lVar2 = lVar1 + iVar7;\n          FUNC_00004634(param_1);\n          iVar5 = param_1[3] - iVar5;\n          lVar1 = lVar1 + iVar7;\n          if (iVar5 != 0) {\n            if (iVar5 < 2) {\n              if (iVar5 == -2 || iVar5 + 2 < 0 != SCARRY4(iVar5,2)) {\n                iVar5 = 1;\n              }\n            }\n            else {\n              iVar5 = -1;\n            }\n            iVar7 = iVar5 + param_1[7];\n            iVar11 = iVar11 + iVar5;\n            if (iVar7 < 0) {\n              uVar9 = uVar12 - 1;\n              if ((uVar9 & 3) == 0) {\n                if (uVar9 == (uVar9 / 100) * 100) {\n                  iVar7 = 0x16d;\n                  if ((uVar12 + 0x76b) % 400 != 0) {\n                    iVar7 = 0x16c;\n                  }\n                }\n                else {\n                  iVar7 = 0x16d;\n                }\n              }\n              else {\n                iVar7 = 0x16c;\n              }\n            }\n            else {\n              if ((uVar12 & 3) == 0) {\n                if (uVar12 == (uVar12 / 100) * 100) {\n                  iVar5 = 0x16d;\n                  if ((uVar12 + 0x76c) % 400 == 0) {\n                    iVar5 = 0x16e;\n                  }\n                }\n                else {\n                  iVar5 = 0x16e;\n                }\n              }\n              else {\n                iVar5 = 0x16d;\n              }\n              if (iVar5 <= iVar7) {\n                iVar7 = iVar7 - iVar5;\n              }\n            }\n            param_1[7] = iVar7;\n            lVar1 = lVar2;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((iVar7 - iVar6) - (uint)(uVar15 < uVar4)) < 0 !=\n          (SBORROW4(iVar7,iVar6) != SBORROW4(iVar7 - iVar6,(uint)(uVar15 < uVar4)))) {\nLAB_0000491e:\n        if ((int)((iVar7 - iVar5) - (uint)(uVar15 < uVar9)) < 0 ==\n            (SBORROW4(iVar7,iVar5) != SBORROW4(iVar7 - iVar5,(uint)(uVar15 < uVar9))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)uVar14) {\n        uVar9 = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      uVar9 = uVar13;\n      if (uVar13 != 1) goto LAB_00004934;\n    }\n    uVar12 = piVar3[0x14];\n    iVar7 = (uint)lVar1 + uVar12;\n    iVar5 = (int)((ulonglong)lVar1 >> 0x20) +\n            ((int)uVar12 >> 0x1f) + (uint)CARRY4((uint)lVar1,uVar12);\n    uVar9 = 1;\n  }\n  FUN_000050f4();\n  param_1[8] = uVar9;\n  param_1[6] = (iVar11 + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(iVar5,iVar7);\n}\n\n",
            "called": [
                "FUN_00005100",
                "FUN_00004634",
                "FUN_000050f4",
                "FUN_000050e8",
                "FUN_000056b0",
                "FUN_00004f98"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000047e4",
            "calling": [
                "FUN_00002600",
                "FUN_00002654"
            ],
            "imported": false,
            "current_name": "FUNC_000047e4"
        },
        "FUN_000023c8": {
            "renaming": {
                "FUN_000023c8": "trigger_software_interrupt_000023c8",
                "0x3f": "SWI_SYSTEM_RESET"
            },
            "code": "void trigger_software_interrupt_000023c8(void)\n{\n  software_interrupt(SWI_SYSTEM_RESET);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000023c8",
            "calling": [
                "FUN_000023d0"
            ],
            "imported": false,
            "current_name": "trigger_software_interrupt_000023c8"
        },
        "FUN_00002e48": {
            "renaming": {
                "FUN_00002e48": "print_data_00002e48",
                "FUN_00002a00": "print_value",
                "DAT_00002e68": "data_ptr",
                "PTR_DAT_00002e68": "data_ptr_pointer"
            },
            "code": "void print_data_00002e48(void)\n{\n    int first_value = 0x3e;\n    int second_value = 0x20;\n    int* data_address = *PTR_DAT_00002e68 + 8;\n    int data_value = *data_address;\n    print_value(first_value);\n    print_value(second_value);\n    print_data_00002e48(data_value);\n    return;\n}",
            "called": [
                "FUN_000041d0",
                "FUN_00002a00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002e48",
            "calling": [
                "FUN_00002e6c"
            ],
            "imported": false,
            "current_name": "print_data_00002e48"
        },
        "FUN_00000930": {
            "renaming": {
                "FUN_00000930": "run_interrupt_and_loop_00000930",
                "FUN_00000cf0": "run_interrupt",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void run_interrupt_and_loop_00000930(void)\n{\n  run_interrupt();\n  software_interrupt(1);\n  while(true) {}\n}",
            "called": [
                "FUN_00000cf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000930",
            "calling": [
                "FUN_00000f8c",
                "FUN_00000794"
            ],
            "imported": false,
            "current_name": "run_interrupt_and_loop_00000930"
        },
        "FUN_00001348": {
            "renaming": {
                "FUN_00001348": "checkPtrDataValidity_00001348",
                "PTR_DAT_0000135c": "ptrData",
                "FUN_0000093c": "performDataCheck"
            },
            "code": "void checkPtrDataValidity_00001348(void)\n{\n  int* PTR_DAT_0000135c = (int*)PTR_DAT_0000135c;\n  if (*PTR_DAT_0000135c != 0) {\n    performDataCheck();\n  }\n  return;\n}",
            "called": [
                "FUN_0000093c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001348",
            "calling": [
                "FUN_00001628"
            ],
            "imported": false,
            "current_name": "checkPtrDataValidity_00001348"
        },
        "FUN_00001d3a": {
            "renaming": {
                "FUN_00001d3a": "set_value_to_1_and_return_00001d3a",
                "param_1": "memory_address",
                "param_2": "size",
                "puVar1": "integer_pointer",
                "*puVar1": "*integer_pointer",
                "FUN_00001d08": "get_memory_address"
            },
            "code": "void set_value_to_1_and_return_00001d3a(void* memory_address, int size)\n{\n  int* integer_pointer;\n  integer_pointer = (int*)get_memory_address(memory_address, size);\n  *integer_pointer = 1;\n  return;\n}",
            "called": [
                "FUN_00001d08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001d3a",
            "calling": [
                "FUN_00001ddc"
            ],
            "imported": false,
            "current_name": "set_value_to_1_and_return_00001d3a"
        },
        "FUN_00002434": {
            "renaming": {
                "FUN_00002434": "initialize_or_update_00002434",
                "param_1": "status",
                "param_2": "param2",
                "uVar1": "result",
                "iVar2": "temp"
            },
            "code": "int initialize_or_update_00002434(int *status, int param2) {\n  int result = FUN_00000cd0();\n  if (*status == 0) {\n    *status = -1;\n    FUN_00000d0c(result);\n    result = 1;\n  }\n  else if (param2 == 0) {\n    FUN_00000d0c(result);\n    result = 0;\n  }\n  else {\n    int temp = *(int *)PTR_DAT_000024b8;\n    FUN_00000698(temp,2);\n    if (*status == -1) {\n      *status = temp + 8;\n      *(int *)(*status) = 0;\n    }\n    else {\n      FUN_00001034(status,temp);\n    }\n    FUN_00000d0c(result);\n    FUN_0000093c();\n    result = 1;\n  }\n  return result;\n}",
            "called": [
                "FUN_00000d0c",
                "FUN_0000093c",
                "FUN_00000cd0",
                "FUN_00001034",
                "FUN_00000698"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002434",
            "calling": [
                "FUN_0000129c"
            ],
            "imported": false,
            "current_name": "initialize_or_update_00002434"
        },
        "FUN_00005700": {
            "renaming": {
                "FUN_00005700": "process_data_00005700",
                "param_1": "data_size",
                "param_2": "data_ptr",
                "uVar1": "flag",
                "iVar2": "result",
                "local_18": "size",
                "local_14": "temp_ptr"
            },
            "code": "void process_data_00005700(int data_size, int *data_ptr) {\n  ushort flag;\n  int size;\n  int result;\n  int *temp_ptr;\n  \n  if ((int)((uint)*(ushort *)(data_ptr + 3) << 0x1e) >= 0) {\n    size = data_size;\n    temp_ptr = data_ptr;\n    flag = calculate_flag(data_size, data_ptr, &size, &temp_ptr);\n    result = check_data(data_size, size);\n    if (result != 0) {\n      *(undefined **)(data_size + 0x28) = PTR_DAT_0000577c;\n      *data_ptr = result;\n      *(ushort *)(data_ptr + 3) = *(ushort *)(data_ptr + 3) | 0x80;\n      data_ptr[5] = size;\n      data_ptr[4] = result;\n      if ((temp_ptr != (int *)0x0) &&\n         (result = get_data(data_size, (int)*(short *)((int)data_ptr + 0xe)), result != 0)) {\n        *(ushort *)(data_ptr + 3) = *(ushort *)(data_ptr + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(data_ptr + 3) = flag | *(ushort *)(data_ptr + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(data_ptr + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(data_ptr + 3) = *(ushort *)(data_ptr + 3) & 0xfffc | 2;\n  }\n  *data_ptr = (int)data_ptr + 0x47;\n  data_ptr[4] = (int)data_ptr + 0x47;\n  data_ptr[5] = 1;\n  return;\n}",
            "called": [
                "FUN_00004bd0",
                "FUN_00000534",
                "FUN_000056b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005700",
            "calling": [
                "FUN_00006768",
                "FUN_000054a8"
            ],
            "imported": false,
            "current_name": "process_data_00005700"
        },
        "FUN_00002798": {
            "renaming": {
                "FUN_00002798": "checkAndExecuteFunction_00002798",
                "FUN_0000093c": "executeFunction",
                "PTR_DAT_000027ac": "dataPointer"
            },
            "code": "void checkAndExecuteFunction_00002798(void)\n{\n  int* PTR_DAT_000027ac = (int*)PTR_DAT_000027ac;\n  if (*PTR_DAT_000027ac != 0) {\n    executeFunction();\n  }\n  return;\n}",
            "called": [
                "FUN_0000093c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002798",
            "calling": [
                "FUN_00002994"
            ],
            "imported": false,
            "current_name": "checkAndExecuteFunction_00002798"
        },
        "FUN_00003524": {
            "renaming": {
                "FUN_00003524": "execute_command_00003524",
                "param_1": "command_id",
                "param_2": "command_args_ptr",
                "iVar1": "command_result",
                "uVar2": "result",
                "FUN_000034c0": "print_error",
                "FUN_000026d8": "print_error",
                "FUN_000026e4": "print_error",
                "FUN_000026c0": "print_error",
                "FUN_000033c0": "print_error",
                "FUN_000033f4": "print_alarm",
                "FUN_00003444": "print_error",
                "FUN_00004c84": "print_unknown_command_or_missing_param_error",
                "PTR_s_poweron_00003638": "PTR_s_poweron_00003638",
                "PTR_s_poweroff_0000363c": "PTR_s_poweroff_0000363c",
                "PTR_s_clearalarm_00003640": "PTR_s_clearalarm_00003640",
                "PTR_s_getalarm_00003644": "PTR_s_getalarm_00003644",
                "PTR_s_setalarm_00003648": "PTR_s_setalarm_00003648",
                "PTR_s_gettime_0000364c": "PTR_s_gettime_0000364c",
                "PTR_s_settime_00003650": "PTR_s_settime_00003650",
                "PTR_s_unknown_command_or_missing_param_00003654": "PTR_s_unknown_command_or_missing_param_00003654"
            },
            "code": "int execute_command_00003524(int command_id, int command_args_ptr)\n{\n    int result;\n    if (command_id < 2) {\n        print_error();\n        result = 1;\n    }\n    else {\n        int command_result = execute_command_00003524_by_id(*(int *)(command_args_ptr + 4), PTR_s_poweron_00003638, 7);\n        if (command_result == 0) {\n            print_error();\n        }\n        else {\n            command_result = execute_command_00003524_by_id(*(int *)(command_args_ptr + 4), PTR_s_poweroff_0000363c, 8);\n            if (command_result == 0) {\n                print_error();\n            }\n            else {\n                command_result = execute_command_00003524_by_id(*(int *)(command_args_ptr + 4), PTR_s_clearalarm_00003640, 8);\n                if (command_result == 0) {\n                    print_error();\n                }\n                else {\n                    command_result = execute_command_00003524_by_id(*(int *)(command_args_ptr + 4), PTR_s_getalarm_00003644, 8);\n                    if (command_result == 0) {\n                        print_error();\n                    }\n                    else {\n                        command_result = execute_command_00003524_by_id(*(int *)(command_args_ptr + 4), PTR_s_setalarm_00003648, 8);\n                        if ((command_result == 0) && (command_id == 4)) {\n                            print_alarm(command_args_ptr + 8);\n                        }\n                        else {\n                            command_result = execute_command_00003524_by_id(*(int *)(command_args_ptr + 4), PTR_s_gettime_0000364c, 7);\n                            if (command_result == 0) {\n                                print_error();\n                            }\n                            else {\n                                command_result = execute_command_00003524_by_id(*(int *)(command_args_ptr + 4), PTR_s_settime_00003650, 7);\n                                if ((command_result != 0) || (command_id != 4)) {\n                                    print_unknown_command_or_missing_param_error(PTR_s_unknown_command_or_missing_param_00003654, *(int *)(command_args_ptr + 4));\n                                    print_error();\n                                    return 1;\n                                }\n                                print_time(command_args_ptr + 8);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        result = 0;\n    }\n    return result;\n}",
            "called": [
                "FUN_000026e4",
                "FUN_000026c0",
                "FUN_000033c0",
                "FUN_000034c0",
                "FUN_00004e66",
                "FUN_00004c84",
                "FUN_000026d8",
                "FUN_00003444",
                "FUN_00003478",
                "FUN_000033f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003524",
            "calling": [],
            "imported": false,
            "current_name": "execute_command_00003524"
        },
        "FUN_00001bb8": {
            "renaming": {
                "FUN_00001bb8": "check_and_set_flags_00001bb8",
                "DAT_00001c74": "data_array",
                "DAT_00001c78": "data_array_1",
                "DAT_00001c7c": "data_array_2",
                "PTR_DAT_00001c80": "pointer_data"
            },
            "code": "void check_and_set_flags_00001bb8(void)\n{\n  bool flag1 = DAT_00001c74[1] & 2;\n  bool flag2 = DAT_00001c74[5] & 0x40;\n\n  if (flag1) {\n    FUN_00001710(DAT_00001c78, 1);\n  }\n\n  if (flag2) {\n    bool condition = (*DAT_00001c74 & 0xc0) == 0;\n    if (condition) {\n      *DAT_00001c74 = (*DAT_00001c74 & 0x3f) | 0x80;\n      while ((DAT_00001c74[6] & 0xc) != 8);\n    }\n    FUN_00001710(DAT_00001c7c, 6);\n    while ((DAT_00001c74[6] & 0x20) != 0);\n  }\n\n  FUN_00001748(0);\n  *DAT_00001c74 = (*DAT_00001c74 & 0x3b) | 4;\n  while ((DAT_00001c74[6] & 0x10) == 0);\n  while ((DAT_00001c74[6] & 0xc) != 0);\n  *PTR_DAT_00001c80 = 0;\n}",
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001bb8",
            "calling": [
                "FUN_00001c84"
            ],
            "imported": false,
            "current_name": "check_and_set_flags_00001bb8"
        },
        "FUN_0000428c": {
            "renaming": {
                "FUN_0000428c": "do_nothing_with_data_0000428c",
                "DAT_00004294": "DAT_data",
                "do_nothing_000045e8": "do_nothing"
            },
            "code": "void do_nothing_with_data_0000428c(void)\n{\n  do_nothing(DAT_00004294);\n  return;\n}",
            "called": [
                "FUN_000045e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000428c",
            "calling": [
                "FUN_000042a4"
            ],
            "imported": false,
            "current_name": "do_nothing_with_data_0000428c"
        },
        "FUN_0000404c": {
            "renaming": {
                "FUN_0000404c": "process_data_0000404c",
                "param_1": "data",
                "param_2": "params",
                "iVar1": "result",
                "piVar2": "ptr1",
                "uVar3": "param3",
                "uVar4": "flag",
                "iVar5": "param5",
                "pcVar6": "func_ptr",
                "iVar7": "param6",
                "uVar8": "param4",
                "bVar9": "flag2"
            },
            "code": "int process_data_0000404c(uint *data, int *params) {\n  int result = 0;\n  int *ptr1 = NULL;\n  int *ptr2 = NULL;\n  uint param3 = 0;\n  uint flag = *(ushort *)(params + 3);\n  if ((int)(flag << 0x1c) < 0) {\n    ptr1 = params + 4;\n    if (*ptr1 != 0) {\n      int param5 = (uint)*(ushort *)(params + 3) << 0x1e;\n      bool flag2 = param5 == 0;\n      int param6 = *params;\n      if (flag2) {\n        param5 = params[5];\n      }\n      *params = *ptr1;\n      if (!flag2) {\n        param5 = 0;\n      }\n      params[2] = param5;\n      for (param6 = param6 - *ptr1; param6 > 0; param6 = param6 - param5) {\n        int param7 = (*(code *)params[10])(data, params[8], *ptr1, param6);\n        if (param7 < 1) {\n          *(ushort *)(params + 3) = *(ushort *)(params + 3) | 0x40;\n          return -1;\n        }\n        *ptr1 = *ptr1 + param7;\n      }\n    }\n  }\n  else {\n    if ((params[1] < 1) && (params[0x10] < 1)) {\n      return 0;\n    }\n    code *func_ptr = (code *)params[0xb];\n    if (func_ptr == NULL) {\n      return 0;\n    }\n    param3 = *data;\n    *data = 0;\n    if ((flag & 0x1000) == 0) {\n      int param4 = (*func_ptr)(data, params[8], (uint)(flag & 0x1000), 1);\n      if ((param4 == -1) && (*data != 0)) {\n        if ((*data == 0x1d) || (*data == 0x16)) {\n          *data = param3;\n          return 0;\n        }\n        flag = *(ushort *)(params + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      ptr2 = params + 0x15;\n      result = *ptr2;\n    }\n    if (((int)((uint)*(ushort *)(params + 3) << 0x1d) < 0) && (ptr1 = params[0xd], result = result - params[1], ptr1 != 0)) {\n      result = result - params[0x10];\n    }\n    result = (*(code *)params[0xb])(data, params[8], result, 0);\n    flag = *(ushort *)(params + 3);\n    if ((result == -1) && ((0x1d < *data) || (-1 < (int)((DAT_00004154 >> (*data & 0xff)) << 0x1f)))) {\n      *(ushort *)(params + 3) = flag | 0x40;\n      return result;\n    }\n    params[1] = 0;\n    *params = *ptr1;\n    if (((int)((uint)flag << 0x13) < 0) && ((result != -1) || (*data == 0))) {\n      *ptr2 = result;\n    }\n    int *ptr3 = (int *)params[0xd];\n    *data = param3;\n    if (ptr3 != NULL) {\n      if (ptr3 != params + 0x11) {\n        FUN_00004b34(data);\n      }\n      params[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_00004b34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000404c",
            "calling": [
                "FUN_00004158",
                "FUN_00006768"
            ],
            "imported": false,
            "current_name": "process_data_0000404c"
        },
        "FUN_00002f74": {
            "renaming": {
                "FUN_00002f74": "print_devices_00002f74",
                "local_14": "device_list",
                "local_18": "device_count",
                "uVar1": "device_info",
                "FUN_000039e8": "get_device_info",
                "FUN_00004c84": "print_string"
            },
            "code": "void print_devices_00002f74(void) {\n  undefined4 device_info;\n  int device_count = 0;\n  undefined4 *device_list = *(undefined4 **)PTR_DAT_00002fd0;\n  if (device_list == (undefined4 *)0x0) {\n    print_string(PTR_s_No_devices_found_00002fd8);\n  }\n  else {\n    print_string(PTR_s_ID_Class_Name_00002fd4);\n  }\n  for (; device_list != (undefined4 *)0x0; device_list = (undefined4 *)*device_list) {\n    device_info = get_device_info(*(undefined *)(device_list[3] + 8));\n    print_string(PTR_s___i__s__s_00002fdc, device_count, device_info, device_list[2]);\n    device_count++;\n  }\n  return;\n}",
            "called": [
                "FUN_00004db8",
                "FUN_00004c84",
                "FUN_000039e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002f74",
            "calling": [
                "FUN_0000316c"
            ],
            "imported": false,
            "current_name": "print_devices_00002f74"
        },
        "FUN_000010a0": {
            "renaming": {
                "FUN_000010a0": "count_elements_until_mismatch_000010a0",
                "param_1": "elements",
                "local_c": "current_element"
            },
            "code": "int count_elements_until_mismatch_000010a0(int *elements) {\n  int *current_element;\n  for (current_element = elements; (int *)*current_element == current_element; current_element++) {\n  }\n  return (int)current_element - (int)elements;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000010a0",
            "calling": [
                "FUN_0000211c"
            ],
            "imported": false,
            "current_name": "count_elements_until_mismatch_000010a0"
        },
        "FUN_000012e2": {
            "renaming": {
                "FUN_000012e2": "find_valid_value_000012e2",
                "param_1": "base_address",
                "param_2": "offset_1",
                "param_3": "offset_2",
                "iVar1": "result",
                "FUN_0000231c": "check_value",
                "FUN_0000129c": "reset_value"
            },
            "code": "int find_valid_value_000012e2(int base_address, int offset_1, int offset_2)\n{\n  int result;\n  while (true) {\n    result = check_value(base_address + 4, offset_1, offset_2);\n    if (result != 0) break;\n    reset_value(base_address);\n  }\n  return result;\n}",
            "called": [
                "FUN_0000231c",
                "FUN_0000129c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000012e2",
            "calling": [
                "FUN_00000e14"
            ],
            "imported": false,
            "current_name": "find_valid_value_000012e2"
        },
        "FUN_000056a0": {
            "renaming": {
                "FUN_000056a0": "process_data_000056a0",
                "param_1": "data_start",
                "param_2": "data_end",
                "param_3": "data_ptr",
                "param_4": "data_size",
                "uStack_c": "data_ptr_start",
                "uStack_8": "data_ptr_end",
                "FUN_0000562c": "process_data_helper"
            },
            "code": "void process_data_000056a0(undefined4 data_start, undefined4 data_end, undefined4* data_ptr, undefined4 data_size) {\n  undefined4* data_ptr_start = data_ptr;\n  undefined4* data_ptr_end = data_ptr + data_size;\n  process_data_000056a0_helper(data_start, data_ptr, data_ptr_end, data_end, data_start);\n  return;\n}",
            "called": [
                "FUN_0000562c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000056a0",
            "calling": [
                "FUN_00005100"
            ],
            "imported": false,
            "current_name": "process_data_000056a0"
        },
        "FUN_0000231c": {
            "renaming": {
                "FUN_0000231c": "copy_string_0000231c",
                "param_1": "source_length",
                "param_2": "source_string",
                "param_3": "max_length",
                "local_20": "destination",
                "local_14": "length",
                "iVar2": "check_string_end",
                "FUN_00002270": "check_string_end",
                "FUN_000022f0": "get_next_char"
            },
            "code": "int copy_string_0000231c(int source_length, char* source_string, int max_length)\n{\n  char* destination = source_string;\n  int length = max_length;\n  while ((length != 0 && (iVar2 = check_string_end(source_string), iVar2 == 0))) {\n    char next_char = get_next_char(source_string);\n    *destination = next_char;\n    length = length - 1;\n    destination = destination + 1;\n  }\n  return max_length - length;\n}",
            "called": [
                "FUN_00002270",
                "FUN_000022f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000231c",
            "calling": [
                "FUN_000012e2"
            ],
            "imported": false,
            "current_name": "copy_string_0000231c"
        },
        "FUN_000061cc": {
            "renaming": {
                "FUN_000061cc": "FUNC_000061cc"
            },
            "code": "\nint FUNC_000061cc(int param_1,byte **param_2,byte *param_3,int **param_4)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  uint uVar6;\n  int **local_2b0;\n  undefined auStack_2ac [256];\n  uint local_1ac;\n  undefined4 local_1a8;\n  uint local_1a4;\n  int local_1a0;\n  int local_19c;\n  undefined *local_198;\n  int local_194;\n  undefined *local_30;\n  code *local_2c;\n  \n  puVar2 = PTR_DAT_000064b4;\n  puVar1 = PTR_DAT_000064b0;\n  local_1a0 = 0;\n  local_19c = 0;\n  local_30 = PTR_LAB_00006118_1_000064a8;\n  local_2c = DAT_000064ac;\n  local_2b0 = param_4;\n  local_198 = auStack_2ac;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      uVar6 = (uint)*param_3;\n      if (uVar6 == 0) {\n        return local_1a0;\n      }\n      uVar4 = (byte)puVar1[uVar6] & 8;\n      pbVar5 = param_3 + 1;\n      if ((puVar1[uVar6] & 8) == 0) break;\n      while (((param_3 = pbVar5, 0 < (int)param_2[1] ||\n              (iVar3 = (*local_2c)(param_1,param_2), iVar3 == 0)) &&\n             ((int)((uint)(byte)puVar1[**param_2] << 0x1c) < 0))) {\n        local_19c = local_19c + 1;\n        param_2[1] = param_2[1] + -1;\n        *param_2 = *param_2 + 1;\n      }\n    }\n    if (uVar6 == 0x25) break;\nLAB_00006352:\n    if (((int)param_2[1] < 1) && (iVar3 = (*local_2c)(param_1,param_2), iVar3 != 0))\n    goto LAB_00006380;\n    if (**param_2 != uVar6) {\n      return local_1a0;\n    }\n    *param_2 = *param_2 + 1;\n    local_19c = local_19c + 1;\n    param_2[1] = param_2[1] + -1;\n    param_3 = pbVar5;\n  }\n  local_1a4 = uVar4;\n  local_1ac = uVar4;\n  if (param_3[1] == 0x2a) {\n    pbVar5 = param_3 + 2;\n    local_1ac = 0x10;\n  }\n  while( true ) {\n    uVar4 = (uint)*pbVar5;\n    if (9 < uVar4 - 0x30) break;\n    pbVar5 = pbVar5 + 1;\n    local_1a4 = (local_1a4 * 10 + uVar4) - 0x30;\n  }\n  iVar3 = FUN_00006010(PTR_DAT_000064b4,uVar4,3);\n  if (iVar3 != 0) {\n    local_1ac = 1 << (iVar3 - (int)puVar2 & 0xffU) | local_1ac;\n    pbVar5 = pbVar5 + 1;\n  }\n  param_3 = pbVar5 + 1;\n  uVar4 = (uint)*pbVar5;\n  if (uVar4 < 0x79) {\n    if (0x57 < uVar4) {\n      switch(uVar4) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        param_3 = (byte *)FUN_0000687c(auStack_2ac,param_3);\n        local_1ac = local_1ac | 0x40;\n        local_194 = 1;\n        break;\n      case 99:\n        local_1ac = local_1ac | 0x40;\n        local_194 = 0;\n        break;\n      case 100:\n      case 0x75:\n        local_1a8 = 10;\nLAB_000063a0:\n        if (uVar4 < 0x6f) {\n          local_194 = 3;\n        }\n        else {\n          local_194 = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        local_194 = 5;\n        break;\n      case 0x69:\n        local_1a8 = 0;\n        local_194 = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(local_1ac << 0x1b)) {\n          if ((int)(local_1ac << 0x1f) < 0) {\n            *(short *)*local_2b0 = (short)local_19c;\n            local_2b0 = local_2b0 + 1;\n          }\n          else {\n            **local_2b0 = local_19c;\n            local_2b0 = local_2b0 + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        local_1a8 = 8;\n        local_194 = 4;\n        break;\n      case 0x70:\n        local_1ac = local_1ac | 0x20;\n      case 0x58:\n      case 0x78:\n        local_1ac = local_1ac | 0x200;\n        local_1a8 = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        local_194 = 2;\n      }\nLAB_000063ac:\n      if (((int)param_2[1] < 1) && (iVar3 = (*local_2c)(param_1,param_2), iVar3 != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(local_1ac << 0x19)) {\n        while ((int)((uint)(byte)puVar1[**param_2] << 0x1c) < 0) {\n          local_19c = local_19c + 1;\n          pbVar5 = param_2[1];\n          param_2[1] = pbVar5 + -1;\n          if ((int)(pbVar5 + -1) < 1) {\n            iVar3 = (*local_2c)(param_1,param_2);\n            if (iVar3 != 0) goto LAB_00006380;\n          }\n          else {\n            *param_2 = *param_2 + 1;\n          }\n        }\n      }\n      if (local_194 < 3) {\n        iVar3 = FUN_000064bc(param_1,&local_1ac,param_2,&local_2b0);\n      }\n      else if (local_194 < 5) {\n        iVar3 = FUNC_0000656c(param_1,&local_1ac,param_2,&local_2b0);\n      }\n      else {\n        iVar3 = param_1;\n        if (DAT_000064b8 == 0) goto LAB_000061f6;\n      }\n      if (iVar3 == 1) {\n        return local_1a0;\n      }\n      if (iVar3 == 2) {\nLAB_00006380:\n        if (local_1a0 == 0) {\nLAB_00006388:\n          local_1a0 = -1;\n        }\n        else if ((*(ushort *)(param_2 + 3) & 0x40) != 0) {\n          local_1a0 = -1;\n        }\n        return local_1a0;\n      }\n      goto LAB_000061f6;\n    }\n    pbVar5 = param_3;\n    if (uVar4 == 0x25) goto LAB_00006352;\n    if (uVar4 < 0x26) {\n      if (uVar4 != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (uVar4 - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  local_194 = 3;\n  local_1a8 = 10;\n  goto LAB_000063ac;\n}\n\n",
            "called": [
                "FUN_0000687c",
                "FUN_00006192",
                "FUN_00006010",
                "FUN_0000656c",
                "FUN_000064bc"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000061cc",
            "calling": [
                "FUN_00005e68"
            ],
            "imported": false,
            "current_name": "FUNC_000061cc"
        },
        "FUN_00002690": {
            "renaming": {
                "FUN_00002690": "process_data_00002690",
                "param_1": "input_data",
                "local_10": "data_ptr",
                "uStack_c": "counter",
                "FUN_000028f0": "get_data_pointer",
                "FUN_0000443c": "copy_data"
            },
            "code": "int process_data_00002690(undefined4 input_data)\n{\n  undefined4 data_ptr;\n  undefined4 counter;\n  data_ptr = get_data_pointer();\n  counter = 0;\n  copy_data(&data_ptr, input_data);\n  return 0;\n}",
            "called": [
                "FUN_0000443c",
                "FUN_000028f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002690",
            "calling": [
                "FUN_000033c0"
            ],
            "imported": false,
            "current_name": "process_data_00002690"
        },
        "FUN_00006010": {
            "renaming": {
                "FUN_00006010": "find_byte_sequence_00006010",
                "param_1": "data",
                "param_2": "length",
                "param_3": "value_to_find",
                "bVar1": "value",
                "cVar2": "byte_matches",
                "cVar3": "bit_matches",
                "cVar4": "bit_matches2",
                "cVar5": "bit_matches3",
                "pbVar6": "result",
                "puVar7": "ptr",
                "pbVar8": "result",
                "uVar9": "uVar",
                "uVar10": "remaining_length",
                "uVar11": "bit_pattern",
                "uVar12": "bit_pattern2",
                "bVar13": "byte_matches",
                "bVar14": "bit_matches",
                "bVar15": "bit_matches2",
                "bVar16": "bit_matches3"
            },
            "code": "byte* find_byte_sequence_00006010(uint* data, uint length, uint value_to_find) {\\n\\\n  byte* result = NULL;\\n\\\n  uint* ptr = data;\\n\\\n  uint remaining_length = length;\\n\\\n  byte value;\\n\\\n  uint uVar9;\\n\\\n  uint uVar10;\\n\\\n  uint uVar11;\\n\\\n  uint uVar12;\\n\\\n  bool byte_matches;\\n\\\n  bool bit_matches;\\n\\\n  bool bit_matches2;\\n\\\n  bool bit_matches3;\\n\\\n  if (length < 0x10) {\\n\\\n    while (remaining_length > 0) {\\n\\\n      value = *(byte*)ptr;\\n\\\n      if (value == value_to_find) {\\n\\\n        result = (byte*)ptr;\\n\\\n        break;\\n\\\n      }\\n\\\n      ptr++;\\n\\\n      remaining_length--;\\n\\\n    }\\n\\\n  } else {\\n\\\n    uint alignment_offset = (uint)data & 7;\\n\\\n    if (alignment_offset != 0) {\\n\\\n      remaining_length -= 8 - alignment_offset;\\n\\\n      while (alignment_offset > 0) {\\n\\\n        value = *(byte*)ptr;\\n\\\n        if (value == value_to_find) {\\n\\\n          result = (byte*)ptr;\\n\\\n          goto end;\\n\\\n        }\\n\\\n        ptr++;\\n\\\n        alignment_offset--;\\n\\\n        remaining_length--;\\n\\\n      }\\n\\\n    }\\n\\\n    uVar9 = value_to_find | value_to_find << 8;\\n\\\n    uVar9 = uVar9 | uVar9 << 0x10;\\n\\\n    uVar10 = remaining_length & 0xfffffff8;\\n\\\n    while (uVar10 > 0) {\\n\\\n      uVar10 -= 8;\\n\\\n      uVar11 = *ptr ^ uVar9;\\n\\\n      uVar12 = ptr[1] ^ uVar9;\\n\\\n      byte_matches = (char)uVar11 == 0;\\n\\\n      bit_matches = (char)(uVar11 >> 8) == 0;\\n\\\n      bit_matches2 = (char)(uVar11 >> 0x10) == 0;\\n\\\n      bit_matches3 = (char)(uVar11 >> 0x18) == 0;\\n\\\n      uVar11 = CONCAT13(bit_matches3, CONCAT12(bit_matches2, CONCAT11(bit_matches, byte_matches)));\\n\\\n      byte_matches = (char)uVar12 == 0;\\n\\\n      bit_matches = (char)(uVar12 >> 8) == 0;\\n\\\n      bit_matches2 = (char)(uVar12 >> 0x10) == 0;\\n\\\n      bit_matches3 = (char)(uVar12 >> 0x18) == 0;\\n\\\n      uVar12 = CONCAT13(bit_matches3, CONCAT12(bit_matches2, CONCAT11(bit_matches, byte_matches)));\\n\\\n      if (uVar11 == 0) {\\n\\\n        result = (byte*)ptr + 5;\\n\\\n        if (uVar12 != 0) {\\n\\\n          goto end;\\n\\\n        }\\n\\\n      } else {\\n\\\n        if (uVar12 != 0) {\\n\\\n          result = (byte*)ptr + 1;\\n\\\n          goto end;\\n\\\n        }\\n\\\n      }\\n\\\n      ptr += 2;\\n\\\n    }\\n\\\n    remaining_length &= 7;\\n\\\n    while (remaining_length > 0) {\\n\\\n      value = *(byte*)ptr;\\n\\\n      if (value == value_to_find) {\\n\\\n        result = (byte*)ptr;\\n\\\n        break;\\n\\\n      }\\n\\\n      ptr++;\\n\\\n      remaining_length--;\\n\\\n    }\\n\\\n  }\\n\\\n  end:\\n\\\n  return result;\\n\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00006010",
            "calling": [
                "FUN_000061cc",
                "FUN_0000656c",
                "FUN_000057f8",
                "FUN_00005b34"
            ],
            "imported": false,
            "current_name": "find_byte_sequence_00006010"
        },
        "FUN_00001cf0": {
            "renaming": {
                "FUN_00001cf0": "checkAndCallFunction_00001cf0",
                "PTR_DAT_00001d04": "ptr",
                "FUN_0000093c": "callFunction"
            },
            "code": "void checkAndCallFunction_00001cf0() {\n  int* PTR_DAT_00001d04 = (int*)PTR_DAT_00001d04;\n  if (*PTR_DAT_00001d04 != 0) {\n    callFunction();\n  }\n  return;\n}",
            "called": [
                "FUN_0000093c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001cf0",
            "calling": [
                "FUN_00002028"
            ],
            "imported": false,
            "current_name": "checkAndCallFunction_00001cf0"
        },
        "FUN_00003ec4": {
            "renaming": {
                "FUN_00003ec4": "convert_number_to_string_00003ec4",
                "param_1": "output_string",
                "param_2": "input_number",
                "param_3": "num_decimal_places",
                "iVar1": "string_length",
                "uVar2": "decimal_string_length",
                "uVar3": "integer_division_result",
                "local_10": "decimal_part_integer",
                "local_c": "string_index",
                "PTR_s_FAILED_ASSERTION__00003fec": "Failed assertion in convert_number_to_string.",
                "PTR_DAT_00003ff0": "array_of_powers_of_10"
            },
            "code": "int convert_number_to_string_00003ec4(char *output_string, uint32_t input_number, int num_decimal_places)\n{\n    int string_index = 0;\n    int negative_number = 0;\n    uint32_t integer_part = 0;\n    uint32_t decimal_part = 0;\n    int num_digits_in_integer_part = 0;\n\n    if (num_decimal_places + 7 < 0 != SCARRY4(num_decimal_places, 7)) {\n        handle_error(3, \"PTR_s_FAILED_ASSERTION__00003fec\");\n    }\n\n    if (num_decimal_places == 0) {\n        string_index = convert_integer_to_string(output_string, input_number);\n    }\n    else if (num_decimal_places < 1) {\n        integer_part = input_number / *(uint32_t *)(DAT_00003ff0 + num_decimal_places * -4);\n        decimal_part = input_number - *(uint32_t *)(DAT_00003ff0 + num_decimal_places * -4) * integer_part;\n        if (decimal_part < 0) {\n            decimal_part = -decimal_part;\n        }\n        if ((integer_part == 0) && ((int)input_number < 0)) {\n            if (output_string != NULL) {\n                *output_string = \"-\";\n            }\n            string_index = 1;\n        }\n        if (output_string == NULL) {\n            num_digits_in_integer_part = convert_integer_to_string(NULL, integer_part);\n            string_index = num_digits_in_integer_part + 1 + string_index;\n        }\n        else {\n            num_digits_in_integer_part = convert_integer_to_string(output_string + string_index, integer_part);\n            string_index = string_index + num_digits_in_integer_part;\n            string_index = string_index + 1;\n            output_string[string_index - 1] = \".\";\n            uint32_t decimal_string_length = convert_integer_to_string(output_string + string_index, decimal_part);\n            handle_padding(output_string + string_index, decimal_string_length, -num_decimal_places, \"0\");\n            string_index = string_index + decimal_string_length;\n        }\n        string_index = -num_decimal_places + string_index;\n    }\n    else {\n        string_index = convert_integer_to_string(output_string, input_number);\n        if (output_string != NULL) {\n            handle_padding(output_string + string_index, 0, num_decimal_places, \"0\");\n        }\n        string_index = num_decimal_places + string_index;\n    }\n    return string_index;\n}",
            "called": [
                "FUN_00003e58",
                "FUN_00000f04",
                "FUN_00003ff4",
                "FUN_00004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003ec4",
            "calling": [
                "FUN_00003e9e"
            ],
            "imported": false,
            "current_name": "convert_number_to_string_00003ec4"
        },
        "FUN_00001360": {
            "renaming": {
                "FUN_00001360": "calculate_address_00001360",
                "param_1": "address",
                "param_2": "offset",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int calculate_address_00001360(uint address, int offset){\n                    int shifted_address = (address & 0xfffff) << 5;\n                    int masked_address = address & 0xf0000000;\n                    int result = offset * 4 + masked_address + shifted_address + 0x2000000;\n                    return result;\n                }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001360",
            "calling": [
                "FUN_00001392"
            ],
            "imported": false,
            "current_name": "calculate_address_00001360"
        },
        "FUN_00004622": {
            "renaming": {
                "FUN_00004622": "fill_array_with_value_00004622",
                "param_1": "array",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "end_of_array",
                "*puVar1": "*end_of_array"
            },
            "code": "void fill_array_with_value_00004622(unsigned char* array, unsigned char value, int length)\n{\n  unsigned char* end_of_array = array + length;\n  for (; array != end_of_array; array++)\n  {\n    *array = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004622",
            "calling": [
                "FUN_00004314",
                "FUN_0000305c",
                "FUN_00003ff4",
                "FUN_00003ec4",
                "FUN_00004248",
                "FUN_000041f4"
            ],
            "imported": false,
            "current_name": "fill_array_with_value_00004622"
        },
        "FUN_0000093c": {
            "renaming": {
                "FUN_0000093c": "set_flag_on_0000093c",
                "DAT_00000954": "flag_address"
            },
            "code": "void set_flag_on_0000093c(void)\n{\n    uint32_t* flag_ptr = (uint32_t*)(DAT_00000954 + 4);\n    *flag_ptr |= 0x10000000;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000093c",
            "calling": [
                "FUN_00002434",
                "FUN_00002798",
                "FUN_00000738",
                "FUN_00001cf0",
                "FUN_00001348"
            ],
            "imported": false,
            "current_name": "set_flag_on_0000093c"
        },
        "FUN_00003658": {
            "renaming": {
                "FUN_00003658": "synchronize_data_00003658",
                "DAT_00003680": "PTR_data_start",
                "DAT_00003684": "PTR_data_end",
                "DataSynchronizationBarrier": "synchronize_data_barrier",
                "uint": "unsigned_int",
                "*ptr": "ptr",
                "val": "value"
            },
            "code": "void synchronize_data_00003658(void)\n{\n    DataSynchronizationBarrier(0xf);\n    uint* ptr = (uint*)(DAT_00003680 + 0xc);\n    uint val = *ptr & 0x700;\n    *ptr = DAT_00003684 | val;\n    DataSynchronizationBarrier(0xf);\n    while(true)\n    {\n        // Do nothing loop\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003658",
            "calling": [
                "FUN_00003688"
            ],
            "imported": false,
            "current_name": "synchronize_data_00003658"
        },
        "FUN_000019c0": {
            "renaming": {
                "FUN_000019c0": "initialize_device_000019c0",
                "FUN_00001778": "enable_clocks",
                "FUN_00001748": "configure_pin",
                "FUN_00001710": "set_device_mode",
                "DAT_00001a0c": "device_mode",
                "*DAT_00001a10": "device_status",
                "PTR_DAT_00001a14": "interrupt_control"
            },
            "code": "void initialize_device_000019c0(void) {\n  enable_clocks();\n  configure_pin(0x40);\n  set_DAT_00001a0c(DAT_00001a0c, 1);\n  *DAT_00001a10 = (*DAT_00001a10 & 0x3b) | 0x80;\n  while ((DAT_00001a10[6] & 0xc) != 8);\n  clear_interrupt();\n  *PTR_DAT_00001a14 = 3;\n  return;\n}",
            "called": [
                "FUN_00001710",
                "FUN_00001748",
                "FUN_00001734",
                "FUN_00001778"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000019c0",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": false,
            "current_name": "initialize_device_000019c0"
        },
        "FUN_000060b0": {
            "renaming": {
                "FUN_000060b0": "copy_data_000060b0",
                "param_1": "dest_start",
                "param_2": "src_start",
                "param_3": "num_bytes",
                "puVar1": "next_src",
                "puVar2": "src_end",
                "puVar3": "dest_end"
            },
            "code": "void copy_data_000060b0(int dest_start, undefined *src_start, int num_bytes)\n{\n  undefined *src_end = src_start + num_bytes;\n  undefined *dest_end = (undefined *)(dest_start - 1);\n  if (src_start != src_end) {\n    do {\n      undefined *next_src = src_start + 1;\n      dest_end = dest_end + 1;\n      *dest_end = *src_start;\n      src_start = next_src;\n    } while (next_src != src_end);\n    return;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000060b0",
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "imported": false,
            "current_name": "copy_data_000060b0"
        },
        "FUN_00006a14": {
            "renaming": {
                "FUN_00006a14": "FUNC_00006a14"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong FUNC_00006a14(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  uint uVar1;\n  uint *puVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar4 = count_leading_zeroes(param_3);\n      if (uVar4 != 0) {\n        param_3 = param_3 << (uVar4 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar4 & 0xff) | param_2 << (uVar4 & 0xff);\n        param_1 = param_1 << (uVar4 & 0xff);\n      }\n      uVar7 = param_3 >> 0x10;\n      uVar9 = param_2 / uVar7;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar7 * uVar9) * 0x10000;\n      uVar1 = uVar9 * (param_3 & 0xffff);\n      uVar6 = uVar9;\n      if (uVar5 <= uVar1 && uVar1 - uVar5 != 0) {\n        bVar11 = CARRY4(param_3,uVar5);\n        uVar5 = param_3 + uVar5;\n        uVar6 = uVar9 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar1 && uVar1 - uVar5 != 0)) {\n          uVar6 = uVar9 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar9 = (uVar5 - uVar1) / uVar7;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar1) - uVar7 * uVar9) * 0x10000;\n      uVar7 = uVar9 * (param_3 & 0xffff);\n      uVar1 = uVar9;\n      if (uVar5 <= uVar7 && uVar7 - uVar5 != 0) {\n        bVar11 = CARRY4(param_3,uVar5);\n        uVar5 = param_3 + uVar5;\n        uVar1 = uVar9 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar7 && uVar7 - uVar5 != 0)) {\n          uVar1 = uVar9 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar5 = uVar5 - uVar7;\n      puVar2 = (uint *)(uVar1 | uVar6 << 0x10);\n      puVar3 = (uint *)0x0;\n    }\n    else {\n      if (param_3 == 0) {\n                    /* WARNING: Could not recover jumptable at 0x00006abc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x6abc);\n        uVar12 = (*UNRECOVERED_JUMPTABLE)();\n        return uVar12;\n      }\n      uVar4 = count_leading_zeroes(param_3);\n      if (uVar4 == 0) {\n        param_2 = param_2 - param_3;\n        uVar10 = param_3 >> 0x10;\n        uVar8 = param_3 & 0xffff;\n        puVar3 = (uint *)0x1;\n      }\n      else {\n        param_3 = param_3 << (uVar4 & 0xff);\n        uVar10 = param_3 >> 0x10;\n        uVar6 = param_2 >> (0x20 - uVar4 & 0xff);\n        uVar1 = param_1 >> (0x20 - uVar4 & 0xff) | param_2 << (uVar4 & 0xff);\n        uVar5 = uVar6 / uVar10;\n        uVar8 = param_3 & 0xffff;\n        uVar9 = uVar1 >> 0x10 | (uVar6 - uVar10 * uVar5) * 0x10000;\n        uVar7 = uVar5 * uVar8;\n        param_1 = param_1 << (uVar4 & 0xff);\n        uVar6 = uVar5;\n        if (uVar9 <= uVar7 && uVar7 - uVar9 != 0) {\n          bVar11 = CARRY4(param_3,uVar9);\n          uVar9 = param_3 + uVar9;\n          uVar6 = uVar5 - 1;\n          if ((bVar11 == false) && (uVar9 <= uVar7 && uVar7 - uVar9 != 0)) {\n            uVar6 = uVar5 - 2;\n            uVar9 = uVar9 + param_3;\n          }\n        }\n        uVar5 = (uVar9 - uVar7) / uVar10;\n        param_2 = uVar1 & 0xffff | ((uVar9 - uVar7) - uVar10 * uVar5) * 0x10000;\n        uVar7 = uVar5 * uVar8;\n        uVar1 = uVar5;\n        if (param_2 <= uVar7 && uVar7 - param_2 != 0) {\n          bVar11 = CARRY4(param_3,param_2);\n          param_2 = param_3 + param_2;\n          uVar1 = uVar5 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar7 && uVar7 - param_2 != 0)) {\n            uVar1 = uVar5 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar7;\n        puVar3 = (uint *)(uVar1 | uVar6 << 0x10);\n      }\n      uVar7 = param_2 / uVar10;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar10 * uVar7) * 0x10000;\n      uVar1 = uVar8 * uVar7;\n      uVar6 = uVar7;\n      if (uVar5 <= uVar1 && uVar1 - uVar5 != 0) {\n        bVar11 = CARRY4(param_3,uVar5);\n        uVar5 = param_3 + uVar5;\n        uVar6 = uVar7 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar1 && uVar1 - uVar5 != 0)) {\n          uVar6 = uVar7 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar7 = (uVar5 - uVar1) / uVar10;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar1) - uVar10 * uVar7) * 0x10000;\n      uVar8 = uVar8 * uVar7;\n      uVar1 = uVar7;\n      if (uVar5 <= uVar8 && uVar8 - uVar5 != 0) {\n        bVar11 = CARRY4(param_3,uVar5);\n        uVar5 = param_3 + uVar5;\n        uVar1 = uVar7 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar8 && uVar8 - uVar5 != 0)) {\n          uVar1 = uVar7 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar5 = uVar5 - uVar8;\n      puVar2 = (uint *)(uVar1 | uVar6 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar5 >> (uVar4 & 0xff);\n      param_5[1] = 0;\n    }\n  }\n  else if (param_2 < param_4) {\n    puVar2 = param_5;\n    puVar3 = param_5;\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return 0;\n    }\n  }\n  else {\n    puVar3 = (uint *)count_leading_zeroes(param_4);\n    if (puVar3 != (uint *)0x0) {\n      uVar8 = 0x20 - (int)puVar3;\n      uVar5 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar3 & 0xff);\n      uVar10 = uVar5 >> 0x10;\n      uVar4 = param_2 >> (uVar8 & 0xff);\n      uVar6 = param_1 >> (uVar8 & 0xff) | param_2 << ((uint)puVar3 & 0xff);\n      uVar7 = uVar4 / uVar10;\n      uVar1 = uVar6 >> 0x10 | (uVar4 - uVar10 * uVar7) * 0x10000;\n      uVar9 = uVar7 * (uVar5 & 0xffff);\n      param_3 = param_3 << ((uint)puVar3 & 0xff);\n      param_1 = param_1 << ((uint)puVar3 & 0xff);\n      uVar4 = uVar7;\n      if (uVar1 <= uVar9 && uVar9 - uVar1 != 0) {\n        bVar11 = CARRY4(uVar5,uVar1);\n        uVar1 = uVar5 + uVar1;\n        uVar4 = uVar7 - 1;\n        if ((bVar11 == false) && (uVar1 <= uVar9 && uVar9 - uVar1 != 0)) {\n          uVar4 = uVar7 - 2;\n          uVar1 = uVar1 + uVar5;\n        }\n      }\n      uVar7 = (uVar1 - uVar9) / uVar10;\n      uVar1 = uVar6 & 0xffff | ((uVar1 - uVar9) - uVar10 * uVar7) * 0x10000;\n      uVar9 = uVar7 * (uVar5 & 0xffff);\n      uVar6 = uVar7;\n      if (uVar1 <= uVar9 && uVar9 - uVar1 != 0) {\n        bVar11 = CARRY4(uVar5,uVar1);\n        uVar1 = uVar5 + uVar1;\n        uVar6 = uVar7 - 1;\n        if ((bVar11 == false) && (uVar1 <= uVar9 && uVar9 - uVar1 != 0)) {\n          uVar6 = uVar7 - 2;\n          uVar1 = uVar1 + uVar5;\n        }\n      }\n      uVar6 = uVar6 | uVar4 << 0x10;\n      uVar12 = (ulonglong)uVar6 * (ulonglong)param_3;\n      if (CONCAT44(uVar1 - uVar9,param_1) < uVar12) {\n        uVar12 = uVar12 - CONCAT44(uVar5,param_3);\n        uVar6 = uVar6 - 1;\n      }\n      if (param_5 != (uint *)0x0) {\n        uVar4 = ((uVar1 - uVar9) - (int)(uVar12 >> 0x20)) - (uint)(param_1 < (uint)uVar12);\n        *param_5 = uVar4 << (uVar8 & 0xff) | param_1 - (uint)uVar12 >> ((uint)puVar3 & 0xff);\n        param_5[1] = uVar4 >> ((uint)puVar3 & 0xff);\n      }\n      return (ulonglong)uVar6;\n    }\n    if ((param_4 < param_2) || (puVar2 = puVar3, param_3 <= param_1)) {\n      bVar11 = param_1 < param_3;\n      param_1 = param_1 - param_3;\n      param_2 = (param_2 - param_4) - (uint)bVar11;\n      puVar2 = (uint *)0x1;\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n    }\n  }\n  return CONCAT44(puVar3,puVar2);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00006a14",
            "calling": [
                "FUN_00006974"
            ],
            "imported": false,
            "current_name": "FUNC_00006a14"
        },
        "FUN_000023d0": {
            "renaming": {
                "FUN_000023d0": "check_initialized_and_call_function_000023d0",
                "param_1": "param",
                "uVar1": "result",
                "PTR_DAT_000023fc": "PTR_DATA",
                "FUN_000023c8": "call_function"
            },
            "code": "int check_initialized_and_call_function_000023d0(int param)\n{\n  int result;\n  if (*(int *)PTR_DAT_000023fc == 0) {\n    result = call_function(1, param, 0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_000023c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000023d0",
            "calling": [
                "FUN_000023a4"
            ],
            "imported": false,
            "current_name": "check_initialized_and_call_function_000023d0"
        },
        "FUN_00000a30": {
            "renaming": {
                "FUN_00000a30": "calculateStackPointer_00000a30",
                "in_r3": "stackOffset",
                "auStack_20": "stackPointer",
                "PTR_DAT_00000a60": "stackOffsetPointer",
                "*(int *)(in_r3 + 0x4c)": "stackOffset"
            },
            "code": "char* calculateStackPointer_00000a30(void)\n{\n  int stackOffset;\n  char* stackPointer;\n  stackOffset = 0x4c;\n  stackPointer = (char*)(&stackOffset - PTR_DAT_00000a60);\n  FUN_00000f04(4, uRam00000a3c);\n  return stackPointer;\n}",
            "called": [
                "FUN_00000f04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000a30",
            "calling": [],
            "imported": false,
            "current_name": "calculateStackPointer_00000a30"
        },
        "FUN_000034c0": {
            "renaming": {
                "FUN_000034c0": "initialize_rtc_commands_000034c0",
                "FUN_00004db8": "initialize_rtc_command"
            },
            "code": "int initialize_rtc_commands_000034c0(void)\n{\n  initialize_rtc_command(PTR_s_usage__rtc__command___arguments__00003500);\n  initialize_rtc_command(PTR_s_commands__00003504);\n  initialize_rtc_command(PTR_s__poweron_power_the_interface_on_00003508);\n  initialize_rtc_command(PTR_s__poweroff_power_the_interface_of_0000350c);\n  initialize_rtc_command(PTR_s__clearalarm_deactivate_the_curre_00003510);\n  initialize_rtc_command(PTR_s__getalarm_print_the_currently_al_00003514);\n  initialize_rtc_command(PTR_s__setalarm_YYYY_MM_DD_HH_MM_SS_se_00003518);\n  initialize_rtc_command(PTR_s__gettime_print_the_current_time_0000351c);\n  initialize_rtc_command(PTR_s__settime_YYYY_MM_DD_HH_MM_SS_set_00003520);\n  return 0;\n}",
            "called": [
                "FUN_00004db8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000034c0",
            "calling": [
                "FUN_00003524"
            ],
            "imported": false,
            "current_name": "initialize_rtc_commands_000034c0"
        },
        "FUN_000050e8": {
            "renaming": {
                "FUN_000050e8": "get_pointer_data_000050e8",
                "PTR_DAT_000050f0": "pointer_data"
            },
            "code": "const void* get_pointer_data_000050e8() {\n  return PTR_DAT_000050f0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000050e8",
            "calling": [
                "FUN_000047e4"
            ],
            "imported": false,
            "current_name": "get_pointer_data_000050e8"
        },
        "FUN_000042a4": {
            "renaming": {
                "FUN_000042a4": "initialize_parameters_000042a4",
                "param_1": "parameter_1",
                "undefined4": "result_1",
                "int": "parameter_value_1",
                "bool": "is_equal_1",
                "PTR_DAT_0000430c": "original_parameter_1",
                "PTR_DAT_00004310": "original_parameter_2",
                "DAT_000042a0": "data_1",
                "FUN_0000428c": "initialize",
                "FUN_00004314": "get_value",
                "FUN_000041f4": "set_value"
            },
            "code": "void initialize_parameters_000042a4(int param_1)\n{\n    undefined4 result_1;\n    int parameter_value_1;\n    bool is_equal_1;\n    \n    initialize();\n    if (*(int *)(param_1 + 0x18) == 0) {\n        *(undefined4 *)(param_1 + 0x48) = 0;\n        *(undefined4 *)(param_1 + 0x4c) = 0;\n        *(undefined4 *)(param_1 + 0x50) = 0;\n        parameter_value_1 = *(int *)PTR_DAT_0000430c;\n        *(undefined **)(param_1 + 0x28) = PTR_DAT_00004310;\n        is_equal_1 = parameter_value_1 == param_1;\n        if (is_equal_1) {\n            parameter_value_1 = 1;\n        }\n        if (is_equal_1) {\n            *(int *)(param_1 + 0x18) = parameter_value_1;\n        }\n        result_1 = get_value(param_1);\n        *(undefined4 *)(param_1 + 4) = result_1;\n        result_1 = get_value(param_1);\n        *(undefined4 *)(param_1 + 8) = result_1;\n        result_1 = get_value(param_1);\n        *(undefined4 *)(param_1 + 0xc) = result_1;\n        set_value(*(undefined4 *)(param_1 + 4), 4, 0);\n        set_value(*(undefined4 *)(param_1 + 8), 9, 1);\n        set_value(*(undefined4 *)(param_1 + 0xc), 0x12, 2);\n        *(undefined4 *)(param_1 + 0x18) = 1;\n    }\n    do_nothing(DAT_000042a0);\n    return;\n}",
            "called": [
                "FUN_00004314",
                "FUN_000045ec",
                "FUN_0000428c",
                "FUN_000041f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000042a4",
            "calling": [
                "FUN_00004158",
                "FUN_00004418",
                "FUN_00004314",
                "FUN_00004db8",
                "FUN_000057f8",
                "FUN_00006768",
                "FUN_00004c84",
                "FUN_000054a8",
                "FUN_00005404",
                "FUN_00005e10",
                "FUN_00004cb4"
            ],
            "imported": false,
            "current_name": "initialize_parameters_000042a4"
        },
        "FUN_00000514": {
            "renaming": {
                "FUN_00000514": "set_value_to_19_00000514",
                "param_1": "value_ptr",
                "*param_1": "*value_ptr"
            },
            "code": "int set_value_to_19_00000514(int *value_ptr)\n{\n  *value_ptr = 19;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000514",
            "calling": [
                "FUN_000056b8"
            ],
            "imported": false,
            "current_name": "set_value_to_19_00000514"
        },
        "FUN_00002e9c": {
            "renaming": {
                "FUN_00002e9c": "execute_program_00002e9c",
                "FUN_00003688": "call_setup_function"
            },
            "code": "int execute_program_00002e9c() {\n  call_setup_function();\n  return 0;\n}",
            "called": [
                "FUN_00003688"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002e9c",
            "calling": [],
            "imported": false,
            "current_name": "execute_program_00002e9c"
        },
        "FUN_00001960": {
            "renaming": {
                "FUN_00001960": "initialize_system_00001960",
                "FUN_00001748": "set_mode",
                "FUN_00001710": "enable_interrupt",
                "DAT_000019b4": "interrupt_source",
                "*DAT_000019b8": "control_register",
                "*PTR_DAT_000019bc": "system_status"
            },
            "code": "void initialize_system_00001960(void)\n{\n  set_mode(0xa0);\n  enable_interrupt(DAT_000019b4, 1);\n  *DAT_000019b8 = (*DAT_000019b8 & 0x3b) | 0x44;\n  while ((DAT_000019b8[6] & 0xc) != 4);\n  while ((DAT_000019b8[6] & 0x10) == 0);\n  *PTR_DAT_000019bc = 2;\n  return;\n}",
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001960",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": false,
            "current_name": "initialize_system_00001960"
        },
        "FUN_00000990": {
            "renaming": {
                "FUN_00000990": "do_nothing_00000990"
            },
            "code": "\nvoid do_nothing_00000990(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000990",
            "calling": [
                "FUN_0000099c"
            ],
            "imported": false,
            "current_name": "do_nothing_00000990"
        },
        "FUN_00001a3c": {
            "renaming": {
                "FUN_00001a3c": "initialize_data_00001a3c",
                "FUN_000016ec": "set_data_value",
                "FUN_00001734": "initialize_system",
                "DAT_00001a58": "data_value_ptr",
                "PTR_DAT_00001a5c": "data_status_ptr"
            },
            "code": "void initialize_data_00001a3c(void)\n{\n  set_data_value(DAT_00001a58, 1);\n  initialize_system();\n  *PTR_DAT_00001a5c = 5;\n  return;\n}",
            "called": [
                "FUN_00001734",
                "FUN_000016ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001a3c",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": false,
            "current_name": "initialize_data_00001a3c"
        },
        "FUN_000045ee": {
            "renaming": {
                "FUN_000045ee": "reverse_copy_bytes_000045ee",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "num_bytes",
                "puVar1": "dest_end",
                "puVar2": "src_end"
            },
            "code": "void reverse_copy_bytes_000045ee(unsigned char *dest, unsigned char *src, int num_bytes) {\n  unsigned char *src_end = src + num_bytes;\n  if ((src < dest) && (dest < src_end)) {\n    unsigned char *dest_end = dest + num_bytes;\n    while (dest_end != dest) {\n      src_end--;\n      dest_end--;\n      *dest_end = *src_end;\n    }\n  }\n  else {\n    dest--;\n    for (; src != src_end; src++) {\n      dest++;\n      *dest = *src;\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000045ee",
            "calling": [
                "FUN_00003ff4"
            ],
            "imported": false,
            "current_name": "reverse_copy_bytes_000045ee"
        },
        "FUN_00005404": {
            "renaming": {
                "FUN_00005404": "process_data_00005404",
                "param_1": "data_length",
                "param_2": "data",
                "param_3": "data_array",
                "param_4": "param_4",
                "iVar1": "array_index",
                "uVar2": "data_value",
                "puVar3": "data_pointer"
            },
            "code": "uint process_data_00005404(int data_length, uint data, int *data_array, undefined4 param_4)\n{\n  int array_index;\n  uint data_value;\n  undefined *data_pointer;\n  \n  if ((data_length != 0) && (*(int *)(data_length + 0x18) == 0)) {\n    call_function_1();\n  }\n  if (data_array == (int *)PTR_DAT_0000549c) {\n    data_array = *(int **)(data_length + 4);\n  }\n  else if (data_array == (int *)PTR_DAT_000054a0) {\n    data_array = *(int **)(data_length + 8);\n  }\n  else if (data_array == (int *)PTR_DAT_000054a4) {\n    data_array = *(int **)(data_length + 0xc);\n  }\n  data_array[2] = data_array[6];\n  data_value = (uint)*(ushort *)(data_array + 3);\n  array_index = data_value << 0x1c;\n  if (((array_index < 0) && (data_value = data_array[4], data_value != 0)) ||\n     (array_index = call_function_2(data_length, data_array, array_index, data_value, param_4), array_index == 0)) {\n    array_index = *data_array - data_array[4];\n    data = data & 0xff;\n    if ((array_index < data_array[5]) || (array_index = call_function_3(data_length, data_array), array_index == 0)) {\n      data_array[2] = data_array[2] + -1;\n      data_pointer = (undefined *)*data_array;\n      *data_array = (int)(data_pointer + 1);\n      *data_pointer = (char)data;\n      if (data_array[5] != array_index + 1) {\n        if (-1 < (int)((uint)*(ushort *)(data_array + 3) << 0x1f)) {\n          return data;\n        }\n        if (data != 10) {\n          return data;\n        }\n      }\n      array_index = call_function_3(data_length, data_array);\n      if (array_index == 0) {\n        return data;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_00004158",
                "FUN_000054a8",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005404",
            "calling": [
                "FUN_00004db8",
                "FUN_000057a8",
                "FUN_00004cb4"
            ],
            "imported": false,
            "current_name": "process_data_00005404"
        },
        "FUN_00006974": {
            "renaming": {
                "FUN_00006974": "calculate_result_00006974",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "iVar1": "quotient_upper_limit",
                "uVar2": "result",
                "local_8": "local_array"
            },
            "code": "undefined8 calculate_result_00006974(int dividend, int divisor, int quotient, int remainder)\n    {\n        int quotient_upper_limit;\n        int remainder_lower_limit;\n        undefined8 result;\n        undefined local_array[8];\n\n        if ((remainder == 0) && (quotient == 0)) {\n            if (divisor < 0) {\n                dividend = 0;\n                divisor = -0x80000000;\n            }\n            else if (divisor != 0 || dividend != 0) {\n                divisor = 0x7fffffff;\n                dividend = -1;\n            }\n            return CONCAT44(divisor, dividend);\n        }\n\n        quotient_upper_limit = 0;\n        remainder_lower_limit = 0;\n\n        if (divisor < 0) {\n            quotient_upper_limit = -divisor - (uint)(dividend != 0);\n            if (remainder < 0) {\n                result = FUNC_00006a14(-dividend, quotient_upper_limit, -quotient, -remainder - (uint)(quotient != 0), local_array);\n                return result;\n            }\n            result = FUNC_00006a14(-dividend, quotient_upper_limit, quotient, remainder, local_array);\n            return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0), -(int)result);\n        }\n\n        if (remainder < 0) {\n            result = FUNC_00006a14(dividend, divisor, -quotient, -remainder - (uint)(quotient != 0), local_array);\n            return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0), -(int)result);\n        }\n\n        result = FUNC_00006a14();\n        return result;\n    }",
            "called": [
                "FUN_00006a14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00006974",
            "calling": [
                "FUN_0000443c"
            ],
            "imported": false,
            "current_name": "calculate_result_00006974"
        },
        "FUN_00004314": {
            "renaming": {
                "FUN_00004314": "find_and_initialize_data_00004314",
                "param_1": "error_code_ptr",
                "piVar1": "data_ptr",
                "piVar2": "next_data_ptr",
                "iVar3": "data_struct_size",
                "ppiVar4": "data_list_ptr_ptr"
            },
            "code": "int * find_and_initialize_data_00004314(int *error_code_ptr)\n{\n  int *data_ptr;\n  int *next_data_ptr;\n  int data_struct_size;\n  int **data_list_ptr_ptr;\n  \n  initialize_system();\n  data_struct_size = *(int *)DATA_PTR_00004398;\n  if (*(int *)(data_struct_size + 0x18) == 0) {\n    initialize_data(data_struct_size);\n  }\n  data_list_ptr_ptr = (int **)(data_struct_size + 0x48);\n  do {\n    data_ptr = data_list_ptr_ptr[1];\n    next_data_ptr = data_list_ptr_ptr[2];\n    while (data_ptr = (int *)((int)data_ptr + -1), -1 < (int)data_ptr) {\n      if (*(short *)(next_data_ptr + 3) == 0) {\n        next_data_ptr[3] = DEFAULT_VALUE_0000439c;\n        next_data_ptr[0x19] = 0;\n        do_nothing_000045e4(next_data_ptr + 0x16);\n        finalize_system();\n        next_data_ptr[1] = 0;\n        next_data_ptr[2] = 0;\n        next_data_ptr[4] = 0;\n        next_data_ptr[5] = 0;\n        *next_data_ptr = 0;\n        next_data_ptr[6] = 0;\n        initialize_data_block(next_data_ptr + 0x17,0,8);\n        next_data_ptr[0xd] = 0;\n        next_data_ptr[0xe] = 0;\n        next_data_ptr[0x12] = 0;\n        next_data_ptr[0x13] = 0;\n        return next_data_ptr;\n      }\n      next_data_ptr = next_data_ptr + 0x1a;\n    }\n    if (*data_list_ptr_ptr == (int *)0x0) {\n      data_ptr = (int *)allocate_memory(error_code_ptr,4);\n      *data_list_ptr_ptr = data_ptr;\n      if (data_ptr == (int *)0x0) {\n        finalize_system();\n        *error_code_ptr = 0xc;\n        return (int *)0x0;\n      }\n    }\n    data_list_ptr_ptr = (int **)*data_list_ptr_ptr;\n  } while( true );\n}",
            "called": [
                "FUN_00004274",
                "FUN_00004280",
                "FUN_000045e4",
                "FUN_00004248",
                "FUN_00004622",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004314",
            "calling": [
                "FUN_000042a4"
            ],
            "imported": false,
            "current_name": "find_and_initialize_data_00004314"
        },
        "FUN_00004dc8": {
            "renaming": {
                "FUN_00004dc8": "update_value_based_on_condition_00004dc8",
                "param_1": "value",
                "param_2": "data",
                "iVar1": "index",
                "uVar2": "updated_value",
                "bVar3": "is_index_valid"
            },
            "code": "void update_value_based_on_condition_00004dc8(int value, int* data)\n{\n    int index = get_index(value, (int)*(short *)(data + 0xe));\n    bool is_index_valid = index >= 0;\n    if (is_index_valid) {\n        uint updated_value = *(int *)(data + 0x54) + index;\n        *(uint *)(data + 0x54) = updated_value;\n    }\n    else {\n        uint updated_value = *(ushort *)(data + 0xc) & 0xffffefff;\n        *(short *)(data + 0xc) = (short)updated_value;\n    }\n}",
            "called": [
                "FUN_00000490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004dc8",
            "calling": [],
            "imported": false,
            "current_name": "update_value_based_on_condition_00004dc8"
        },
        "FUN_00005fd8": {
            "renaming": {
                "FUN_00005fd8": "execute_function_with_params_00005fd8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "DAT_00005fe8": "data",
                "FUN_00005edc": "execute"
            },
            "code": "void execute_function_with_params_00005fd8(int* DAT_00005fe8, int param1, int param2, int param3){\n  execute(*DAT_00005fe8, param1, param2, param3);\n  return;\n}",
            "called": [
                "FUN_00005edc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005fd8",
            "calling": [
                "FUN_00005100"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_00005fd8"
        },
        "FUN_00005e10": {
            "renaming": {
                "FUN_00005e10": "read_byte_from_param_00005e10",
                "param_1": "param",
                "param_2": "buffer",
                "iVar1": "status",
                "uVar2": "byte_read",
                "pbVar3": "byte_ptr",
                "initialize": "initialize_function",
                "FUN_000042a4": "initialize_function",
                "PTR_DAT_00005e5c": "ptr_1",
                "PTR_DAT_00005e60": "ptr_2",
                "PTR_DAT_00005e64": "ptr_3",
                "FUN_00006768": "read_byte",
                "buffer[1]": "buffer_offset",
                "*buffer": "buffer_ptr"
            },
            "code": "uint read_byte_from_param_00005e10(int param, byte **buffer) {\n  int offset = 0;\n  uint byte_read = 0xffffffff;\n  if ((param != 0) && (*(int *)(param + 0x18) == 0)) {\n    initialize();\n  }\n  if (buffer == (byte **)PTR_DAT_00005e5c) {\n    buffer = *(byte ***)(param + 4);\n  }\n  else if (buffer == (byte **)PTR_DAT_00005e60) {\n    buffer = *(byte ***)(param + 8);\n  }\n  else if (buffer == (byte **)PTR_DAT_00005e64) {\n    buffer = *(byte ***)(param + 0xc);\n  }\n  int status = read_byte(param, buffer, &offset, &byte_read);\n  if (status == 0) {\n    buffer[1] = buffer[1] - 1;\n    *buffer = *buffer + 1;\n  }\n  else {\n    byte_read = 0xffffffff;\n  }\n  return byte_read;\n}",
            "called": [
                "FUN_00006768",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005e10",
            "calling": [
                "FUN_00004418"
            ],
            "imported": false,
            "current_name": "read_byte_from_param_00005e10"
        },
        "FUN_000033f4": {
            "renaming": {
                "FUN_000033f4": "set_alarm_000033f4",
                "param_1": "alarm_time",
                "iVar1": "result",
                "uVar2": "result",
                "auStack_2c": "alarm_buffer",
                "FUN_0000328c": "get_alarm_time",
                "PTR_FUN_000031e0_1_0000343c": "RTC_ALARM_CONFIG",
                "FUN_00002654": "set_rtc_alarm",
                "PTR_s_rtc__error_setting_alarm_00003440": "rtc_error_setting_alarm"
            },
            "code": "int set_alarm_000033f4(int alarm_time)\n{\n    int result;\n    char alarm_buffer[36];\n    result = get_alarm_time(alarm_time, alarm_buffer);\n    if (result == 0) {\n        result = set_rtc_alarm(alarm_buffer, PTR_FUN_000031e0_1_0000343c, 0);\n        if (result == -1) {\n            log_error(PTR_s_rtc__error_setting_alarm_00003440);\n            result = 1;\n        }\n        else {\n            result = 0;\n        }\n    }\n    else {\n        result = 1;\n    }\n    return result;\n}",
            "called": [
                "FUN_0000328c",
                "FUN_00004db8",
                "FUN_00002654"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000033f4",
            "calling": [
                "FUN_00003524"
            ],
            "imported": false,
            "current_name": "set_alarm_000033f4"
        },
        "FUN_0000443c": {
            "renaming": {
                "FUN_0000443c": "calculate_date_from_seconds_0000443c",
                "param_1": "seconds_since_1970",
                "param_2": "date_array",
                "iVar1": "days_since_1970",
                "uVar2": "seconds_in_day",
                "uVar3": "days_since_1900",
                "uVar4": "weekday",
                "uVar5": "year",
                "uVar6": "month",
                "uVar7": "day",
                "uVar8": "century",
                "bVar9": "is_negative_days_since_1900",
                "DAT_0000458c": "DAYS_SINCE_1900_01_01",
                "DAT_00004590": "DAYS_IN_4_YEARS",
                "DAT_00004594": "SECONDS_IN_DAY",
                "DAT_00004598": "DAYS_IN_100_YEARS"
            },
            "code": "uint * calculate_date_from_seconds_0000443c(undefined4 *seconds_since_1970, uint *date_array)\n{\n  int days_since_1970;\n  uint days_since_1900;\n  uint seconds_in_day;\n  uint weekday;\n  uint year;\n  uint month;\n  uint day;\n  uint century;\n  uint leap_years;\n  uint days_in_year;\n  uint days_in_month;\n  uint days_in_month_array[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n  days_since_1970 = FUN_00006974(*seconds_since_1970, seconds_since_1970[1], DAT_0000458c, 0);\n  days_since_1900 = DAT_0000458c;\n  FUN_00006974(*seconds_since_1970, seconds_since_1970[1], DAT_0000458c, 0);\n  if (days_since_1900 < 0) {\n    days_since_1900 += 0x15180;\n  }\n  if (days_since_1900 < 0) {\n    seconds_in_day = days_since_1970 + 0xafa6b;\n  }\n  else {\n    seconds_in_day = days_since_1970 + 0xafa6c;\n  }\n  weekday = (seconds_in_day + 3) % 7;\n  if (days_since_1900 < 0) {\n    days_since_1900 -= 0x23ab0;\n  }\n  year = DAT_00004594 * (days_since_1900 / DAT_00004590) + seconds_in_day;\n  leap_years = (year - 1) / 4 - (year - 1) / 100 + (year - 1) / 400;\n  days_in_year = days_since_1900 - leap_years;\n  if (days_in_year < 0) {\n    century = (year - 1) / 100;\n    days_in_year += century - century / 4 + 1;\n  }\n  else {\n    century = year / 100;\n    days_in_year += century - century / 4;\n  }\n  year += 1900;\n  days_in_month_array[1] = 28 + (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));\n  for (month = 0; days_in_year >= days_in_month_array[month]; month++) {\n    days_in_year -= days_in_month_array[month];\n  }\n  month++;\n  day = days_in_year + 1;\n  days_in_month = days_in_month_array[month - 1];\n  date_array[0] = day;\n  date_array[1] = month;\n  date_array[2] = year % 100;\n  date_array[3] = weekday;\n  date_array[4] = year / 100;\n  date_array[5] = year - 1900;\n  date_array[6] = 0;\n  return date_array;\n}\n",
            "called": [
                "FUN_00006974"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000443c",
            "calling": [
                "FUN_00002624",
                "FUN_00002690"
            ],
            "imported": false,
            "current_name": "calculate_date_from_seconds_0000443c"
        },
        "FUN_000027b0": {
            "renaming": {
                "FUN_000027b0": "set_data_to_zero_000027b0",
                "puVar1": "data_ptr"
            },
            "code": "void set_data_to_zero_000027b0(void)\n{\n  uint32_t *data_ptr = DAT_00002814;\n  data_ptr[0x40E] |= 0x20000000;\n  data_ptr[4] = 1;\n  data_ptr[4] = 0;\n  if ((data_ptr[5] & 1) != 0) {\n    *data_ptr = 0;\n  }\n  data_ptr[4] = 0x104;\n  data_ptr[2] = 0xffffff42;\n  data_ptr[7] = 0;\n  call_another_function();\n  return;\n}",
            "called": [
                "FUN_0000294c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000027b0",
            "calling": [
                "FUN_000025f4"
            ],
            "imported": false,
            "current_name": "set_data_to_zero_000027b0"
        },
        "FUN_00005ebc": {
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "current_char"
            },
            "code": "void copy_string_00005ebc(char *destination, char *source)\n{\n  char current_char;\n  do {\n    current_char = *source;\n    *destination = current_char;\n    source++;\n    destination++;\n  } while (current_char != '\\0');\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005ebc",
            "calling": [
                "FUN_00005100"
            ],
            "imported": false,
            "current_name": "copy_string_00005ebc"
        },
        "FUN_00006192": {
            "renaming": {
                "FUN_00006192": "set_param_value_00006192",
                "param_1": "value",
                "param_2": "params",
                "param_2[0xd]": "params[13]",
                "(undefined4 *)0x0": "NULL",
                "param_2 + 0x11": "params + 17",
                "FUN_00004b34": "log_error",
                "param_2[1]": "params[1]",
                "param_2[0x10]": "params[16]",
                "params[0xf]": "params[15]",
                "*(ushort *)(param_2 + 3)": "*(unsigned short *)(params + 6)",
                "0x20": "0x20",
                "0xffffffff": "-1"
            },
            "code": "int set_param_value_00006192(int value, int *params)\n{\n    int *param_13 = (int *)params[13];\n    if (param_13 != NULL)\n    {\n        if (param_13 != params + 17)\n        {\n            log_error();\n        }\n        params[1] = params[16];\n        params[13] = NULL;\n        if (params[16] != 0)\n        {\n            *params = params[15];\n            return 0;\n        }\n    }\n    *params = params[4];\n    params[1] = 0;\n    *(unsigned short *)(params + 6) |= 0x20;\n    return -1;\n}",
            "called": [
                "FUN_00004b34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00006192",
            "calling": [
                "FUN_000061cc"
            ],
            "imported": false,
            "current_name": "set_param_value_00006192"
        },
        "FUN_00001734": {
            "renaming": {
                "FUN_00001734": "print_six_chars_00001734",
                "FUN_00001710": "print",
                "DAT_00001744": "data"
            },
            "code": "void print_six_chars_00001734(const char* DAT_00001744)\n{\n    print(DAT_00001744, 6);\n    return;\n}",
            "called": [
                "FUN_00001710"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001734",
            "calling": [
                "FUN_00001a18",
                "FUN_000019c0",
                "FUN_00001a3c"
            ],
            "imported": false,
            "current_name": "print_six_chars_00001734"
        },
        "FUN_00000e14": {
            "renaming": {
                "FUN_00000e14": "calculate_result_00000e14",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "result"
            },
            "code": "int calculate_result_00000e14(int input_1, int input_2) {\n  int result = calculate(DAT_00000e34, input_1, input_2);\n  return result;\n}",
            "called": [
                "FUN_000012e2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000e14",
            "calling": [
                "FUN_00000490"
            ],
            "imported": false,
            "current_name": "calculate_result_00000e14"
        },
        "FUN_0000281c": {
            "renaming": {
                "FUN_0000281c": "find_first_matching_value_0000281c",
                "local_10": "num_iterations",
                "local_c": "current_value",
                "PTR_00002858": "data_pointer",
                "DAT_00002858": "target_value"
            },
            "code": "int find_first_matching_value_0000281c(void)\n{\n  int num_iterations = 0;\n  int current_value;\n  int *PTR_00002858 = PTR_00002858;\n  int DAT_00002858 = *PTR_00002858;\n  \n  while (num_iterations < 3 && (current_value = *PTR_00002858, current_value != DAT_00002858)) {\n    num_iterations++;\n  }\n  \n  return current_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000281c",
            "calling": [
                "FUN_00002624"
            ],
            "imported": false,
            "current_name": "find_first_matching_value_0000281c"
        },
        "FUN_00002270": {
            "renaming": {
                "FUN_00002270": "is_pointer_equal_00002270",
                "param_1": "pointer_address",
                "iVar2": "pointer_value",
                "bVar3": "is_equal",
                "uVar1": "result"
            },
            "code": "bool is_pointer_equal_00002270(int pointer_address) {\n  int pointer_value = *(int *)(pointer_address + 0xc);\n  bool is_equal = *(int *)(pointer_address + 8) == pointer_value;\n  if (is_equal) {\n    return true;\n  }\n  else {\n    return false;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002270",
            "calling": [
                "FUN_0000231c"
            ],
            "imported": false,
            "current_name": "is_pointer_equal_00002270"
        },
        "FUN_00005780": {
            "renaming": {
                "FUN_00005780": "execute_function_with_param_00005780",
                "param_1": "parameter",
                "*DAT_0000578c": "function_pointer"
            },
            "code": "void execute_function_with_param_00005780(void* *DAT_0000578c, int parameter) {\n  *DAT_0000578c(parameter);\n  return;\n}",
            "called": [
                "FUN_00004b34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005780",
            "calling": [
                "FUN_00005100"
            ],
            "imported": false,
            "current_name": "execute_function_with_param_00005780"
        },
        "FUN_000020cc": {
            "renaming": {
                "FUN_000020cc": "execute_function_000020cc",
                "FUN_00002028": "call_another_function",
                "DAT_000020dc": "data_pointer"
            },
            "code": "void execute_function_000020cc(void)\n{\n  call_another_function(DAT_000020dc, 1);\n  return;\n}",
            "called": [
                "FUN_00002028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000020cc",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_000020cc"
        },
        "FUN_00002396": {
            "renaming": {
                "FUN_00002396": "initialize_system_00002396",
                "FUN_000025f4": "initialize_components"
            },
            "code": "void initialize_system_00002396(void)\n{\n  initialize_components();\n  return;\n}",
            "called": [
                "FUN_000025f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002396",
            "calling": [
                "FUN_00001274"
            ],
            "imported": false,
            "current_name": "initialize_system_00002396"
        },
        "FUN_00004cb4": {
            "renaming": {
                "FUN_00004cb4": "count_down_00004cb4",
                "param_1": "input",
                "puVar1": "counter_ptr",
                "uVar2": "counter_value",
                "puVar3": "data_address_ptr",
                "unaff_r4": "unaff_r4",
                "iVar4": "data_address",
                "unaff_r5": "unaff_r5",
                "data_ptr": "data_ptr",
                "PTR_DAT_00005e04": "PTR_DAT_00005e04",
                "PTR_DAT_00005e08": "PTR_DAT_00005e08",
                "PTR_DAT_00005e0c": "PTR_DAT_00005e0c"
            },
            "code": "uint count_down_00004cb4(uint input)\n{\n  uint *counter_ptr;\n  uint counter_value;\n  uint *data_ptr;\n  uint data_value;\n  int data_address;\n  int *data_address_ptr;\n  int *counter_address_ptr;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  \n  data_address = *DAT_00004cd8;\n  if ((data_address != 0) && (*(int *)(data_address + 0x18) == 0)) {\n    FUN_000042a4(data_address);\n  }\n  counter_address_ptr = (int *)(data_address + 8);\n  if ((data_address != 0) && (*(int *)(data_address + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  data_ptr = *(uint **)(data_address + 8);\n  if (data_ptr == (uint *)PTR_DAT_00005e04) {\n    data_ptr = *(uint **)(data_address + 4);\n  }\n  else if (data_ptr == (uint *)PTR_DAT_00005e08) {\n    data_ptr = *(uint **)(data_address + 8);\n  }\n  else if (data_ptr == (uint *)PTR_DAT_00005e0c) {\n    data_ptr = *(uint **)(data_address + 0xc);\n  }\n  if ((-1 < (int)(data_ptr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    do_nothing_000045e8(data_ptr[0x16]);\n  }\n  counter_value = data_ptr[2] - 1;\n  data_ptr[2] = counter_value;\n  if (((int)counter_value < 0) && (((int)counter_value < (int)data_ptr[6] || (data_value = input & 0xff, data_value == 10))))\n  {\n    input = FUN_00005404(data_address, input, data_ptr, data_value, unaff_r4, unaff_r5);\n  }\n  else {\n    data_address_ptr = (int *)*data_ptr;\n    *data_ptr = (uint)data_address_ptr + 1;\n    *(char *)data_address_ptr = (char)input;\n    input = input & 0xff;\n  }\n  if ((-1 < (int)(data_ptr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    do_nothing_000045ec(data_ptr[0x16]);\n  }\n  return input;\n}",
            "called": [
                "FUN_000045ec",
                "FUN_000045e8",
                "FUN_00005404",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004cb4",
            "calling": [
                "FUN_00002a00"
            ],
            "imported": false,
            "current_name": "count_down_00004cb4"
        },
        "FUN_00003478": {
            "renaming": {
                "FUN_00003478": "set_time_and_return_error_flag_00003478",
                "param_1": "time_to_set",
                "iVar1": "set_time_result",
                "uVar2": "error_flag",
                "auStack_2c": "time_buffer",
                "FUN_0000328c": "get_time_buffer",
                "FUN_00002600": "check_time",
                "PTR_s_rtc__error_setting_time_000034bc": "error_message"
            },
            "code": "int set_time_and_return_error_flag_00003478(int time_to_set)\n{\n  int set_time_result;\n  char time_buffer[36];\n  set_time_result = get_time_buffer(time_to_set, time_buffer);\n  if (set_time_result == 0) {\n    int check_time_result = check_time(time_buffer);\n    if (check_time_result == -1) {\n      log_error(PTR_s_rtc__error_setting_time_000034bc);\n      return 1;\n    }\n    else {\n      return 0;\n    }\n  }\n  else {\n    return 1;\n  }\n}",
            "called": [
                "FUN_00002600",
                "FUN_0000328c",
                "FUN_00004db8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003478",
            "calling": [
                "FUN_00003524"
            ],
            "imported": false,
            "current_name": "set_time_and_return_error_flag_00003478"
        },
        "FUN_00002028": {
            "renaming": {
                "FUN_00002028": "check_and_call_function_00002028",
                "param_1": "data",
                "param_2": "mask",
                "iVar1": "index",
                "uVar2": "bit_mask",
                "local_c": "i"
            },
            "code": "void check_and_call_function_00002028(int data, uint32_t mask) {\n    uint32_t bit_mask = *(uint32_t *)(data + 0xa0);\n    for (uint32_t i = 0; i < 0x20; i++) {\n        if ((bit_mask & (1 << (i & 0xff))) && (*(uint32_t *)(data + i * 4) & 0xf0000)) {\n            *(uint32_t *)(data + 0xa0) = 1 << (i & 0xff);\n            uint32_t index = get_function_index(mask);\n            (**(code **)(PTR_DAT_000020b4 + index * 0xc))(*(uint32_t *)(PTR_DAT_000020b4 + index * 0xc + 4));\n        }\n    }\n    finalize_check();\n}\n",
            "called": [
                "FUN_00001e0c",
                "FUN_00001cf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002028",
            "calling": [
                "FUN_000020b8",
                "FUN_00002108",
                "FUN_000020f4",
                "FUN_000020cc",
                "FUN_000020e0"
            ],
            "imported": false,
            "current_name": "check_and_call_function_00002028"
        },
        "FUN_000016c8": {
            "renaming": {
                "FUN_000016c8": "set_value_to_one_000016c8",
                "param_1": "data",
                "param_2": "size",
                "puVar1": "value_ptr",
                "FUN_00001696": "allocate_memory"
            },
            "code": "void set_value_to_one_000016c8(void* data, unsigned char size)\n{\n  unsigned int* value_ptr;\n  value_ptr = (unsigned int*)allocate_memory(data, size);\n  *value_ptr = 1;\n  return;\n}",
            "called": [
                "FUN_00001696"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000016c8",
            "calling": [
                "FUN_000017dc"
            ],
            "imported": false,
            "current_name": "set_value_to_one_000016c8"
        },
        "FUN_00001a60": {
            "renaming": {
                "FUN_00001a60": "send_data_00001a60",
                "DAT_00001ac4": "DAT_buffer",
                "*DAT_00001ac8": "*DAT_buffer",
                "DAT_00001acc": "DAT_buffer",
                "*PTR_DAT_00001ad0": "*PTR_result"
            },
            "code": "void send_data_00001a60(void)\n{\n  set_data_mode(DAT_00001ac4, 1);\n  *DAT_00001ac8 = *DAT_00001ac8 & 0x3f | 0x80;\n  while ((DAT_00001ac4[6] & 0xc) != 8);\n  set_data_mode(DAT_00001ac4, 6);\n  while ((DAT_00001ac4[6] & 0x20) == 0);\n  while ((DAT_00001ac4[6] & 0x40) == 0);\n  *PTR_DAT_00001ad0 = 6;\n  return;\n}",
            "called": [
                "FUN_00001710",
                "FUN_000016ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001a60",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": false,
            "current_name": "send_data_00001a60"
        },
        "FUN_0000099c": {
            "renaming": {
                "FUN_0000099c": "initialize_program_0000099c",
                "local_14": "stack_pointer",
                "local_10": "data_pointer",
                "local_c": "relocation_pointer",
                "uStack_18": "uStack_top",
                "DAT_00000a14": "data_array",
                "FUN_00000db0": "initialize_data",
                "PTR_DAT_00000a18": "relocation_array_start",
                "DAT_00000a1c": "data_array_default_value",
                "PTR_Elf32_Rel_ARRAY_00000a20": "relocation_array",
                "PTR_DAT_00000a24": "relocation_array_end",
                "PTR_DAT_00000a28": "bss_start",
                "DAT_00000a2c": "bss_end",
                "do_nothing_00000990": "do_nothing",
                "FUN_00000e64": "initialize_subsystems",
                "FUN_0000459c": "initialize_hardware",
                "FUN_00000f8c": "initialize_finalization"
            },
            "code": "void initialize_program_0000099c(void)\n{\n  undefined4 uStack_top;\n  undefined4 *stack_pointer = &uStack_top;\n  undefined4 *data_pointer = DAT_00000a14;\n  initialize_data();\n  undefined4 *relocation_pointer = (undefined4 *)PTR_DAT_00000a18;\n  while (relocation_pointer < &uStack_top) {\n    *relocation_pointer = DAT_00000a1c;\n    relocation_pointer++;\n  }\n  relocation_pointer = (undefined4 *)PTR_Elf32_Rel_ARRAY_00000a20;\n  while (relocation_pointer < (undefined4 *)PTR_DAT_00000a24) {\n    *relocation_pointer = *data_pointer;\n    relocation_pointer++;\n    data_pointer++;\n  }\n  undefined4 *bss_pointer = (undefined4 *)PTR_DAT_00000a28;\n  while (bss_pointer < DAT_00000a2c) {\n    *bss_pointer = 0;\n    bss_pointer++;\n  }\n  do_nothing();\n  initialize_subsystems();\n  initialize_hardware();\n  initialize_finalization();\n  return;\n}",
            "called": [
                "FUN_0000459c",
                "FUN_00000f8c",
                "FUN_00000e64",
                "FUN_00000990",
                "FUN_00000db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000099c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_program_0000099c"
        },
        "FUN_00002d94": {
            "renaming": {
                "FUN_00002d94": "process_input_string_00002d94",
                "param_1": "input_string_start",
                "param_2": "string_length",
                "iVar1": "character_code",
                "bVar2": "byte_value",
                "bVar3": "is_first_char",
                "local_c": "current_char_ptr",
                "FUN_00004418": "get_next_character",
                "FUN_00002a00": "output_character"
            },
            "code": "uint process_input_string_00002d94(undefined *input_string, int string_length)\n{\n  int character_code;\n  byte byte_value;\n  bool is_first_char;\n  undefined *current_char_ptr;\n  undefined *input_string_start = input_string;\n  current_char_ptr = input_string_start;\n  while (true) {\n    if ((int)current_char_ptr - (int)input_string_start >= string_length - 1) {\n      return 0xffffffff;\n    }\n    character_code = get_next_character();\n    if (character_code < 0) {\n      break;\n    }\n    if (character_code == 0xd || character_code == 10) {\n      *current_char_ptr = 0;\n      output_character(0xd);\n      output_character(10);\n      is_first_char = current_char_ptr == input_string_start;\n      if (is_first_char) {\n        input_string_start = (undefined *)0x1;\n      }\n      byte_value = (byte)input_string_start;\n      if (!is_first_char) {\n        byte_value = 0;\n      }\n      return (uint)byte_value;\n    }\n    if (character_code == 8 || character_code == 0x7f) {\n      if (current_char_ptr != input_string_start) {\n        current_char_ptr = current_char_ptr - 1;\n        *current_char_ptr = 0;\n        output_character(8);\n        output_character(0x20);\n        output_character(8);\n      }\n    }\n    else {\n      *current_char_ptr = (char)character_code;\n      output_character(character_code);\n      current_char_ptr = current_char_ptr + 1;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_00004418",
                "FUN_00002a00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002d94",
            "calling": [
                "FUN_00002e6c"
            ],
            "imported": false,
            "current_name": "process_input_string_00002d94"
        },
        "FUN_00003918": {
            "renaming": {
                "FUN_00003918": "get_ascii_code_00003918",
                "param_1": "input",
                "uVar1": "ascii_code"
            },
            "code": "int get_ascii_code_00003918(int input) {\n  int ascii_code;\n  switch(input) {\n    case 2:\n      ascii_code = 104;\n      break;\n    case 3:\n      ascii_code = 107;\n      break;\n    case 6:\n      ascii_code = 77;\n      break;\n    case 9:\n      ascii_code = 71;\n      break;\n    case 12:\n      ascii_code = 84;\n      break;\n    case 15:\n      ascii_code = 80;\n      break;\n    case 241:\n      ascii_code = 102;\n      break;\n    case 244:\n      ascii_code = 112;\n      break;\n    case 247:\n      ascii_code = 110;\n      break;\n    case 250:\n      ascii_code = 117;\n      break;\n    case 253:\n      ascii_code = 109;\n      break;\n    default:\n      ascii_code = 0;\n      break;\n  }\n  return ascii_code;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003918",
            "calling": [
                "FUN_00003694"
            ],
            "imported": false,
            "current_name": "get_ascii_code_00003918"
        },
        "FUN_00003d64": {
            "renaming": {
                "FUN_00003d64": "execute_function_00003d64",
                "param_1": "function_ptr",
                "param_2": "arg1",
                "uVar1": "result"
            },
            "code": "int execute_function_00003d64(int function_ptr, int arg1) {\n  int result;\n  if (function_ptr == 0) {\n    result = -19;\n  }\n  else {\n    result = (***(void (***)(void))(function_ptr + 12))(*(int *)(function_ptr + 4), arg1);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003d64",
            "calling": [
                "FUN_00002ecc"
            ],
            "imported": false,
            "current_name": "execute_function_00003d64"
        },
        "FUN_00004e52": {
            "renaming": {
                "FUN_00004e52": "compare_bytes_00004e52",
                "param_1": "first_byte",
                "param_2": "second_byte",
                "uVar2": "byte_index",
                "bVar1": "current_byte_second",
                "bVar3": "bytes_match"
            },
            "code": "int compare_bytes_00004e52(byte *first_byte, byte *second_byte) {\n  byte current_byte_first, current_byte_second;\n  uint byte_index;\n  bool bytes_match;\n  do {\n    current_byte_first = *first_byte;\n    current_byte_second = *second_byte;\n    bytes_match = current_byte_first == 1;\n    if (current_byte_first != 0) {\n      bytes_match = current_byte_first == current_byte_second;\n    }\n    first_byte++;\n    second_byte++;\n  } while (bytes_match);\n  return current_byte_first - current_byte_second;\n}",
            "called": [
                "FUN_00004e52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004e52",
            "calling": [
                "FUN_00002a18",
                "FUN_00005100",
                "FUN_00004e52",
                "FUN_00002fe0",
                "FUN_0000316c",
                "FUN_00002b10"
            ],
            "imported": false,
            "current_name": "compare_bytes_00004e52"
        },
        "FUN_000010d4": {
            "renaming": {
                "FUN_000010d4": "initialize_data_structure_000010d4",
                "param_1": "start_address",
                "param_2": "size",
                "param_3": "alignment",
                "param_4": "flags",
                "param_5": "param_5",
                "param_6": "param_6",
                "param_7": "param_7",
                "uVar1": "memory_allocation_result",
                "uVar2": "function_result",
                "iVar3": "return_value",
                "uVar4": "aligned_size",
                "puVar5": "end_address_ptr",
                "local_30": "aligned_size",
                "local_2c": "aligned_start_address",
                "local_10": "current_address",
                "local_c": "loop_variable_1",
                "local_a": "loop_variable_2",
                "PTR_DAT_0000126c": "array_of_end_address_pointers",
                "PTR_DAT_00001270": "number_of_data_structures_initialized"
            },
            "code": "int initialize_data_structure_000010d4(uint32_t start_address, int size, byte alignment, uint32_t flags, undefined4 param_5, undefined4 param_6, undefined4 param_7)\n{\n    undefined4 uVar1;\n    undefined4 uVar2;\n    int return_value;\n    uint32_t aligned_start_address;\n    int aligned_size;\n    uint32_t *end_address_ptr;\n    uint32_t *current_address_ptr;\n    short index_of_free_slot = 0;\n    short max_index_of_free_slot = 0x20;\n\n    if (alignment >= 0x10) {\n        return -0x16;\n    }\n\n    aligned_start_address = start_address;\n    aligned_size = size;\n\n    if ((start_address & 3) != 0) {\n        aligned_size = 4 - (start_address & 3);\n        aligned_start_address = aligned_size + start_address;\n        aligned_size = size - aligned_size;\n    }\n\n    aligned_size = (aligned_size - 0x30U) & 0xfffffffc;\n    end_address_ptr = (uint32_t *)(aligned_size + aligned_start_address);\n\n    if ((flags & 8) == 0) {\n        *(uint32_t *)aligned_start_address = aligned_start_address;\n    }\n    else {\n        current_address_ptr = (uint32_t *)aligned_start_address;\n        while ((uint32_t)current_address_ptr < aligned_size + aligned_start_address) {\n            *current_address_ptr = (uint32_t)current_address_ptr;\n            current_address_ptr = current_address_ptr + 1;\n        }\n    }\n\n    uVar1 = FUN_00000cd0();\n\n    for (short i = 1; i < max_index_of_free_slot; i++) {\n        if (*(int *)(PTR_DAT_0000126c + i * 4) == 0) {\n            index_of_free_slot = i;\n            break;\n        }\n    }\n\n    if (index_of_free_slot == 0) {\n        FUN_00000d0c(uVar1);\n        return_value = -0x8b;\n    }\n    else {\n        *(uint32_t **)(PTR_DAT_0000126c + index_of_free_slot * 4) = end_address_ptr;\n        *(short *)((int)end_address_ptr + 6) = index_of_free_slot;\n\n        uVar2 = FUN_000007dc(param_5, param_6, aligned_start_address, aligned_size);\n        *end_address_ptr = uVar2;\n        end_address_ptr[9] = aligned_start_address;\n        end_address_ptr[0xb] = size;\n        end_address_ptr[10] = param_7;\n        *(byte *)((int)end_address_ptr + 5) = alignment;\n        *(undefined *)(end_address_ptr + 1) = 0;\n        end_address_ptr[2] = 0;\n        end_address_ptr[3] = 0;\n        end_address_ptr[4] = 0;\n        FUN_00000fec(end_address_ptr + 5, 0);\n        end_address_ptr[8] = 0;\n        *(int *)PTR_DAT_00001270 = *(int *)PTR_DAT_00001270 + 1;\n\n        if ((flags & 1) == 0) {\n            FUN_00000698(end_address_ptr, 10);\n            if ((flags & 4) == 0) {\n                FUN_00000d0c(uVar1);\n                FUN_00000738(alignment);\n                return_value = (int)index_of_free_slot;\n            }\n        }\n        else {\n            FUN_00000698(end_address_ptr, 1);\n        }\n\n        FUN_00000d0c(uVar1);\n        return_value = (int)index_of_free_slot;\n    }\n\n    return return_value;\n}",
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00000fec",
                "FUN_000007dc",
                "FUN_00000738",
                "FUN_00000698"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000010d4",
            "calling": [
                "FUN_00000f8c"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_000010d4"
        },
        "FUN_000045e4": {
            "renaming": {
                "FUN_000045e4": "do_nothing_000045e4"
            },
            "code": "\nvoid do_nothing_000045e4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000045e4",
            "calling": [
                "FUN_00004314"
            ],
            "imported": false,
            "current_name": "do_nothing_000045e4"
        },
        "FUN_00000738": {
            "renaming": {
                "FUN_00000738": "check_param_range_00000738",
                "param_1": "param",
                "iVar1": "check_result",
                "byte_count": "byte_count",
                "param_min": "param_min"
            },
            "code": "void check_param_range_00000738(ushort param)\n{\n  int byte_count = *(byte *)(*(int *)PTR_DAT_0000078c + 4);\n  int param_min = *(byte *)(*(int *)PTR_DAT_0000078c + 5);\n  if (byte_count < 9 || param < param_min) {\n    int check_result = FUN_00000d2a();\n    if (check_result == 0) {\n      FUN_0000093c();\n    }\n    else {\n      *(undefined4 *)PTR_DAT_00000790 = 1;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_00000d2a",
                "FUN_0000093c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000738",
            "calling": [
                "FUN_000024bc",
                "FUN_000010d4"
            ],
            "imported": false,
            "current_name": "check_param_range_00000738"
        },
        "FUN_00003e58": {
            "renaming": {
                "FUN_00003e58": "reverse_integer_00003e58",
                "*param_1": "string",
                "param_2": "length",
                "iVar1": "reversed_value",
                "local_18": "absolute_value",
                "local_14": "string_ptr"
            },
            "code": "int reverse_integer_00003e58(char *string, int length)\n{\n    int is_negative = length >> 0x1f;\n    int absolute_value = length;\n    char *string_ptr = string;\n    if (-is_negative != 0) {\n        if (string != NULL) {\n            string_ptr = string + 1;\n            *string = '-';\n        }\n        absolute_value = -length;\n    }\n    int reversed_value = reverse_string(string_ptr, absolute_value);\n    return -is_negative + reversed_value;\n}",
            "called": [
                "FUN_00003dc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003e58",
            "calling": [
                "FUN_00003ec4"
            ],
            "imported": false,
            "current_name": "reverse_integer_00003e58"
        },
        "FUN_00004e26": {
            "renaming": {
                "FUN_00004e26": "validate_and_set_value_00004e26",
                "param_1": "input_value",
                "param_2": "data_block_ptr",
                "iVar1": "value",
                "uVar2": "flags",
                "bVar3": "is_value_invalid"
            },
            "code": "void validate_and_set_value_00004e26(undefined4 param_1, int data_block_ptr)\n{\n  int value = FUN_000004f2(param_1, (int)*(short *)(data_block_ptr + 0xe));\n  bool is_value_invalid = value == -1;\n  ushort flags = *(ushort *)(data_block_ptr + 0xc);\n  if (is_value_invalid) {\n    flags &= 0xefff;\n  }\n  else {\n    *(int *)(data_block_ptr + 0x54) = value;\n    flags |= 0x1000;\n  }\n  *(ushort *)(data_block_ptr + 0xc) = flags;\n}\n",
            "called": [
                "FUN_000004f2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004e26",
            "calling": [],
            "imported": false,
            "current_name": "validate_and_set_value_00004e26"
        },
        "FUN_000045e8": {
            "renaming": {
                "FUN_000045e8": "do_nothing_000045e8"
            },
            "code": "\nvoid do_nothing_000045e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000045e8",
            "calling": [
                "FUN_00004274",
                "FUN_00004158",
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_000057f8",
                "FUN_00005fec",
                "FUN_0000428c",
                "FUN_00005790",
                "FUN_00004cb4"
            ],
            "imported": false,
            "current_name": "do_nothing_000045e8"
        },
        "FUN_000057f8": {
            "renaming": {
                "FUN_000057f8": "FUNC_000057f8"
            },
            "code": "\nint FUNC_000057f8(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  int iVar3;\n  int iVar4;\n  int *piVar5;\n  bool bVar6;\n  byte *pbVar7;\n  int unaff_r7;\n  byte *pbVar8;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 uStack_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (param_2 == PTR_DAT_00005a38) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_00005a3c) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_00005a40) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if ((-1 < *(int *)(param_2 + 100) << 0x1f) &&\n     (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x16))) {\n    do_nothing_000045e8(*(undefined4 *)(param_2 + 0x58));\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar3 = FUN_000054a8(param_1,param_2), iVar3 != 0)) {\n    if ((-1 < *(int *)(param_2 + 100) << 0x1f) &&\n       (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x16))) {\n      do_nothing_000045ec(*(undefined4 *)(param_2 + 0x58));\n    }\n    return -1;\n  }\n  puVar1 = PTR_s___0__00005a44;\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar8 = param_3;\n  local_8c = param_4;\nLAB_0000588e:\n  pbVar7 = pbVar8;\n  if (*pbVar7 != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  pbVar8 = pbVar7 + 1;\n  if (*pbVar7 != 0x25) goto LAB_0000588e;\nLAB_0000589a:\n  iVar3 = (int)pbVar7 - (int)param_3;\n  if (iVar3 != 0) {\n    iVar4 = FUN_000057d2(param_1,param_2,param_3,iVar3);\n    if (iVar4 == -1) {\nLAB_00005a06:\n      if ((-1 < *(int *)(param_2 + 100) << 0x1f) &&\n         (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x16))) {\n        do_nothing_000045ec(*(undefined4 *)(param_2 + 0x58));\n      }\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar3;\n  }\n  if (*pbVar7 == 0) goto LAB_00005a06;\n  local_84 = -1;\n  uStack_80 = 0;\n  local_88 = 0;\n  local_7c = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar8 = pbVar7 + 1;\n  while( true ) {\n    pbVar7 = pbVar8 + 1;\n    iVar3 = FUN_00006010(PTR_s___0__00005a44,*pbVar8,5);\n    puVar2 = PTR_DAT_00005a54;\n    if (iVar3 == 0) break;\n    local_88 = 1 << (iVar3 - (int)puVar1 & 0xffU) | local_88;\n    pbVar8 = pbVar7;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar8 == 0x2a) {\n    piVar5 = local_8c + 1;\n    local_7c = *local_8c;\n    local_8c = piVar5;\n    if (local_7c < 0) {\n      local_7c = -local_7c;\n      local_88 = local_88 | 2;\n    }\n  }\n  else {\n    bVar6 = false;\n    iVar3 = local_7c;\n    pbVar7 = pbVar8;\n    while( true ) {\n      if (9 < *pbVar7 - 0x30) break;\n      iVar3 = iVar3 * 10 + (*pbVar7 - 0x30);\n      bVar6 = true;\n      pbVar7 = pbVar7 + 1;\n    }\n    if (bVar6) {\n      local_7c = iVar3;\n    }\n  }\n  if (*pbVar7 == 0x2e) {\n    if (pbVar7[1] == 0x2a) {\n      local_84 = *local_8c;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n      pbVar7 = pbVar7 + 2;\n      local_8c = local_8c + 1;\n    }\n    else {\n      bVar6 = false;\n      local_84 = 0;\n      iVar3 = 0;\n      while( true ) {\n        pbVar7 = pbVar7 + 1;\n        if (9 < *pbVar7 - 0x30) break;\n        iVar3 = iVar3 * 10 + (*pbVar7 - 0x30);\n        bVar6 = true;\n      }\n      if (bVar6) {\n        local_84 = iVar3;\n      }\n    }\n  }\n  iVar3 = FUN_00006010(PTR_DAT_00005a54,*pbVar7,3);\n  if (iVar3 != 0) {\n    local_88 = local_88 | 0x40 << (iVar3 - (int)puVar2 & 0xffU);\n    pbVar7 = pbVar7 + 1;\n  }\n  param_3 = pbVar7 + 1;\n  local_70 = *pbVar7;\n  iVar3 = FUN_00006010(PTR_s_efgEFG_00005a48,local_70,6);\n  if (iVar3 == 0) {\n    iVar3 = FUNC_00005b34(param_1,&local_88,param_2,DAT_00005a50,&local_8c);\n  }\n  else {\n    iVar3 = param_1;\n    if (DAT_00005a4c == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar3 = unaff_r7;\n      goto LAB_000059b4;\n    }\n  }\n  if (iVar3 == -1) goto LAB_00005a06;\nLAB_000059b4:\n  local_74 = local_74 + iVar3;\n  pbVar8 = param_3;\n  unaff_r7 = iVar3;\n  goto LAB_0000588e;\n}\n\n",
            "called": [
                "FUN_00006010",
                "FUN_000057d2",
                "FUN_000045ec",
                "FUN_000054a8",
                "FUN_00005b34",
                "FUN_000045e8",
                "FUN_000042a4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000057f8",
            "calling": [
                "FUN_00004c84"
            ],
            "imported": false,
            "current_name": "FUNC_000057f8"
        },
        "FUN_000018bc": {
            "renaming": {
                "FUN_000018bc": "initialize_system_000018bc",
                "FUN_00001748": "set_mode",
                "DAT_00001910": "status_register",
                "FUN_00001710": "delay",
                "PTR_DAT_00001918": "flag_register"
            },
            "code": "void initialize_system_000018bc(void)\n{\n  set_mode(0xa0);\n  *DAT_00001910 = *DAT_00001910 & 0x3b | 4;\n  delay(1);\n  while ((DAT_00001910[6] & 0x10) == 0);\n  while ((DAT_00001910[6] & 0xc) != 0);\n  *PTR_DAT_00001918 = 0;\n  return;\n}",
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000018bc",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": false,
            "current_name": "initialize_system_000018bc"
        },
        "FUN_00000f04": {
            "renaming": {
                "FUN_00000f04": "initialize_00000f04",
                "param_1": "input_char",
                "param_2": "input_val",
                "*piRam00000f4c": "*DAT_00000f4c",
                "FUN_00000ed8": "print_hello",
                "FUN_00004c84": "initialize_memory",
                "FUN_0000211c": "initialize_1",
                "uRam00000f50": "uMemory_1",
                "FUN_00004c84_1": "initialize_memory",
                "uRam00000f54": "uMemory_2",
                "uRam00000f58": "uMemory_3",
                "FUN_00000cd0": "initialize_2",
                "do_nothing_00000ef8": "do_nothing_1",
                "FUN_00000e58": "initialize_3",
                "do_nothing_00002400": "do_nothing_2",
                "PTR_s_main____This_is_RIOT___Version__2_00000f7c": "main_string",
                "FUN_000023a4": "initialize_4",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "local_10": "local_var",
                "local_9": "local_char",
                "uStack_18": "stack_var"
            },
            "code": "void initialize_00000f04(char input_char, undefined4 input_val) {\n                undefined4 stack_var;\n                code *jump_table;\n                undefined4 local_var;\n                char local_char;\n\n                local_var = input_val;\n                local_char = input_char;\n                if (*DAT_00000f4c == 0) {\n                    *DAT_00000f4c = 1;\n                    if (input_char == '\\x03') {\n                        print_hello();\n                    }\n                    initialize_00000f04_memory(uRam00000f50, local_var);\n                    initialize_00000f04_1();\n                    initialize_00000f04_memory(uRam00000f54);\n                    initialize_00000f04_memory(uRam00000f58);\n                }\n                initialize_00000f04_2();\n                do_nothing_1();\n                jump_table = (code *)0xf4d;\n                initialize_00000f04_3();\n                stack_var = (int)&stack_var + 1;\n                do_nothing_2();\n                initialize_00000f04_memory(PTR_s_main____This_is_RIOT___Version__2_00000f7c);\n                initialize_00000f04_4();\n                /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                /* WARNING: Treating indirect jump as call */\n                (*jump_table)(0);\n                return;\n            }",
            "called": [
                "FUN_00000e58",
                "FUN_00000ef8",
                "FUN_00000cd0",
                "FUN_0000211c",
                "FUN_000023a4",
                "FUN_00002400",
                "FUN_00004c84",
                "FUN_00000ed8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000f04",
            "calling": [
                "FUN_000013b8",
                "FUN_00000fec",
                "FUN_00003ec4",
                "FUN_00000cc0",
                "FUN_00000a30",
                "FUN_00001034"
            ],
            "imported": false,
            "current_name": "initialize_00000f04"
        },
        "FUN_00000610": {
            "renaming": {
                "FUN_00000610": "check_if_valid_00000610",
                "iVar1": "index",
                "iVar2": "current_index",
                "uVar3": "result",
                "value": "value_at_index"
            },
            "code": "int check_if_valid_00000610() {\n  int current_index = *(int *)PTR_DAT_00000688;\n  int index = FUN_00000566(*(undefined4 *)PTR_DAT_0000068c);\n  int value = **(int **)(PTR_DAT_00000690 + index * 4);\n  if (current_index == value - 8) {\n    return 0;\n  }\n  else {\n    if ((current_index != 0) && (*(char *)(current_index + 4) == '\t')) {\n      *(undefined *)(current_index + 4) = 10;\n    }\n    *(undefined *)(value - 4) = 9;\n    *(undefined2 *)PTR_DAT_00000694 = *(undefined2 *)(value - 2);\n    *(int *)PTR_DAT_00000688 = value - 8;\n    return 1;\n  }\n}",
            "called": [
                "FUN_00000566"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000610",
            "calling": [],
            "imported": false,
            "current_name": "check_if_valid_00000610"
        },
        "FUN_00003694": {
            "renaming": {
                "FUN_00003694": "display_data_object_00003694",
                "param_1": "data_object_address",
                "param_2": "data_object_size",
                "uVar1": "bit_mask_type",
                "cVar2": "bit_value",
                "uVar3": "bit_mask",
                "bVar4": "bit_set",
                "auStack_18": "stack_buffer",
                "local_10": "string_length",
                "local_a": "string_type",
                "local_9": "byte_value"
            },
            "code": "void display_data_object_00003694(int data_object_address, byte data_object_size) {\n  undefined4 uVar1;\n  char bit_value;\n  uint bit_mask;\n  bool bit_set;\n  undefined stack_buffer[8];\n  int string_length;\n  char string_type;\n  byte byte_value;\n  if ((data_object_address == 0) || (3 < data_object_size)) {\n    display_error_message(PTR_s_Unable_to_display_data_object_00003694_000037e4);\n  }\n  else {\n    display_message(PTR_s_Data__000037e8);\n    for (byte_value = 0; byte_value < data_object_size; byte_value++) {\n      if (*(byte *)(data_object_address + 6) < 0x14) {\n        bit_mask = DAT_000037ec & 1 << (uint)*(byte *)(data_object_address + 6);\n        bit_set = bit_mask != 0;\n        if (bit_set) {\n          bit_mask = 1;\n        }\n        bit_value = (char)bit_mask;\n        if (!bit_set) {\n          bit_value = '\\0';\n        }\n        if (bit_value == '\\0') goto LAB_000036ee;\n        string_type = '\\0';\n      }\n      else {\nLAB_000036ee:\n        string_type = get_string_type((int)*(char *)(data_object_address + 7));\n      }\n      display_message(PTR_LAB_000037f0);\n      if (data_object_size < 2) {\n        display_message(PTR_s__000037f8);\n      }\n      else {\n        display_message(PTR_s___u__000037f4, byte_value);\n      }\n      if (string_type == '\\0') {\n        if (*(char *)(data_object_address + 7) == '\\0') {\n          display_message(PTR_LAB_00003800, (int)*(short *)(data_object_address + (uint)byte_value * 2));\n        }\n        else if ((*(char *)(data_object_address + 7) + 4 < 0 == SCARRY4((int)*(char *)(data_object_address + 7),4)) && (*(char *)(data_object_address + 7) < '\\0')) {\n          string_length = get_string_length(stack_buffer, (int)*(short *)(data_object_address + (uint)byte_value * 2), (int)*(char *)(data_object_address + 7));\n          stack_buffer[string_length] = 0;\n          display_message(PTR_LAB_00003804, stack_buffer);\n        }\n        else {\n          display_message(PTR_s__iE_i_00003808, (int)*(short *)(data_object_address + (uint)byte_value * 2), (int)*(char *)(data_object_address + 7));\n        }\n      }\n      else {\n        display_message(PTR_s__6d__c_000037fc, (int)*(short *)(data_object_address + (uint)byte_value * 2), string_type);\n      }\n      uVar1 = get_bit_mask_type(*(undefined *)(data_object_address + 6));\n      display_message(PTR_LAB_0000380c, uVar1);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_00004db8",
                "FUN_00003810",
                "FUN_00003e9e",
                "FUN_00004c84",
                "FUN_00003918"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003694",
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "imported": false,
            "current_name": "display_data_object_00003694"
        },
        "FUN_00002364": {
            "renaming": {
                "FUN_00002364": "validate_parameter_00002364",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "uVar2": "return_value",
                "FUN_00002294": "validate",
                "FUN_000022be": "update"
            },
            "code": "int validate_parameter_00002364(int param1, undefined param2) {\n  int result = validate(param1);\n  if (result == 0) {\n    update(param1, param2);\n    return 0;\n  }\n  else {\n    return -1;\n  }\n}",
            "called": [
                "FUN_00002294",
                "FUN_000022be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002364",
            "calling": [
                "FUN_000012b4"
            ],
            "imported": false,
            "current_name": "validate_parameter_00002364"
        },
        "FUN_00001ad4": {
            "renaming": {
                "FUN_00001ad4": "reset_and_wait_for_flag_00001ad4",
                "DAT_00001b08": "data_pointer",
                "PTR_DAT_00001b0c": "pointer_to_data_pointer"
            },
            "code": "void reset_and_wait_for_flag_00001ad4(void)\n{\n    unsigned char *DAT_00001b08 = DAT_00001b08;\n    unsigned char *PTR_DAT_00001b0c = PTR_DAT_00001b0c;\n    *DAT_00001b08 &= 0x3f;\n    while((*DAT_00001b08 & 0xc) != 0xc)\n    {\n        // Wait for flag to be set\n    }\n    *PTR_DAT_00001b0c = 7;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001ad4",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": false,
            "current_name": "reset_and_wait_for_flag_00001ad4"
        },
        "FUN_00001274": {
            "renaming": {
                "FUN_00001274": "initialize_system_00001274",
                "FUN_0000258c": "initialize_network",
                "FUN_00001c84": "initialize_graphics",
                "FUN_00002396": "initialize_audio",
                "DAT_00001298": "data_register"
            },
            "code": "void initialize_system_00001274(void)\n{\n  initialize_network();\n  *DAT_00001298 = *DAT_00001298 | 0x28;\n  initialize_graphics();\n  initialize_audio();\n  return;\n}",
            "called": [
                "FUN_00001c84",
                "FUN_0000258c",
                "FUN_00002396"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001274",
            "calling": [
                "FUN_00000e64"
            ],
            "imported": false,
            "current_name": "initialize_system_00001274"
        },
        "FUN_00002e6c": {
            "renaming": {
                "FUN_00002e6c": "check_and_call_function_00002e6c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "iVar1": "result",
                "FUN_00002e48": "call_function1",
                "FUN_00002d94": "check_input",
                "FUN_00002b10": "call_function2"
            },
            "code": "void check_and_call_function_00002e6c(int input1, int input2, int input3)\n{\n  int result;\n  call_function1();\n  do {\n    result = check_input(input2, input3);\n    if (result == 0) {\n      call_function2(input1, input2);\n    }\n    call_function1();\n  } while(true);\n}",
            "called": [
                "FUN_00002e48",
                "FUN_00002d94",
                "FUN_00002b10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002e6c",
            "calling": [
                "FUN_000023a4"
            ],
            "imported": false,
            "current_name": "check_and_call_function_00002e6c"
        },
        "FUN_00003444": {
            "renaming": {
                "FUN_00003444": "check_rtc_time_00003444",
                "iVar1": "error_code",
                "auStack_2c": "rtc_data",
                "FUN_00002624": "get_rtc_data",
                "FUN_00004db8": "log_error",
                "FUN_00003378": "update_rtc_time"
            },
            "code": "bool check_rtc_time_00003444(void)\n{\n  int error_code;\n  uint8_t rtc_data[36];\n  error_code = get_rtc_data(rtc_data);\n  if (error_code != 0) {\n    log_error(PTR_s_rtc__error_getting_time_00003474);\n  }\n  else {\n    update_rtc_time(rtc_data);\n  }\n  return error_code != 0;\n}",
            "called": [
                "FUN_00002624",
                "FUN_00004db8",
                "FUN_00003378"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003444",
            "calling": [
                "FUN_00003524"
            ],
            "imported": false,
            "current_name": "check_rtc_time_00003444"
        },
        "FUN_00003688": {
            "renaming": {
                "FUN_00003688": "execute_function_00003688",
                "FUN_00003658": "call_another_function"
            },
            "code": "void execute_function_00003688(void)\n{\n  call_another_function();\n  return;\n}",
            "called": [
                "FUN_00003658"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003688",
            "calling": [
                "FUN_00002e9c"
            ],
            "imported": false,
            "current_name": "execute_function_00003688"
        },
        "FUN_00001392": {
            "renaming": {
                "FUN_00001392": "set_value_to_one_00001392",
                "param_1": "data",
                "param_2": "size",
                "puVar1": "value_ptr",
                "*puVar1": "*value_ptr",
                "FUN_00001360": "get_data_pointer"
            },
            "code": "void set_value_to_one_00001392(void* data, int size)\n{\n  int* value_ptr;\n  value_ptr = (int*)get_data_pointer(data, size);\n  *value_ptr = 1;\n  return;\n}",
            "called": [
                "FUN_00001360"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001392",
            "calling": [
                "FUN_000013b8"
            ],
            "imported": false,
            "current_name": "set_value_to_one_00001392"
        },
        "FUN_00002910": {
            "renaming": {
                "FUN_00002910": "clear_flags_00002910",
                "DAT_00002944": "DATA_ADDRESS",
                "PTR_DAT_00002948": "PTR_DATA_ADDRESS",
                "iVar1": "data_address",
                "*(uint *)(DAT_00002944 + 0x1c)": "*flag_address",
                "*(undefined4 *)(iVar1 + 8)": "*(undefined4 *)(data_address + 8)",
                "*(undefined4 *)PTR_DAT_00002948": "*(undefined4 *)PTR_DATA_ADDRESS",
                "*(undefined4 *)(PTR_DAT_00002948 + 4)": "*(undefined4 *)(PTR_DATA_ADDRESS + 4)"
            },
            "code": "void clear_flags_00002910(void)\n{\n  int data_address = DAT_00002944;\n  uint* flag_address = (uint*)(data_address + 0x1c);\n  *(uint *)(DAT_00002944 + 0x1c) &= 0xfffffffb;\n  *(undefined4 *)(data_address + 8) = 0;\n  *(undefined4 *)PTR_DAT_00002948 = 0;\n  *(undefined4 *)(PTR_DAT_00002948 + 4) = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002910",
            "calling": [
                "FUN_000026c0"
            ],
            "imported": false,
            "current_name": "clear_flags_00002910"
        },
        "FUN_00004418": {
            "renaming": {
                "FUN_00004418": "get_value_from_buffer_00004418",
                "uVar1": "value",
                "ppbVar2": "buffer_pointer",
                "pbVar3": "current_byte",
                "iVar4": "buffer_start_address",
                "DAT_00004438": "buffer_start_address_ptr",
                "PTR_DAT_00005620": "buffer_type_1",
                "PTR_DAT_00005624": "buffer_type_2",
                "PTR_DAT_00005628": "buffer_type_3",
                "do_nothing_000045e8": "do_nothing_1",
                "do_nothing_000045ec": "do_nothing_2"
            },
            "code": "uint get_value_from_buffer_00004418(void)\n{\n  uint value;\n  byte **buffer_pointer;\n  byte *current_byte;\n  int buffer_start_address = *DAT_00004438;\n  if ((buffer_start_address != 0) && (*(int *)(buffer_start_address + 0x18) == 0)) {\n    free_buffer(buffer_start_address);\n  }\n  buffer_pointer = *(byte ***)(buffer_start_address + 4);\n  if ((buffer_start_address != 0) && (*(int *)(buffer_start_address + 0x18) == 0)) {\n    free_buffer(buffer_start_address);\n  }\n  if (buffer_pointer == (byte **)PTR_DAT_00005620) {\n    buffer_pointer = *(byte ***)(buffer_start_address + 4);\n  }\n  else if (buffer_pointer == (byte **)PTR_DAT_00005624) {\n    buffer_pointer = *(byte ***)(buffer_start_address + 8);\n  }\n  else if (buffer_pointer == (byte **)PTR_DAT_00005628) {\n    buffer_pointer = *(byte ***)(buffer_start_address + 0xc);\n  }\n  if ((-1 < (int)buffer_pointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(buffer_pointer + 3) << 0x16))) {\n    do_nothing_1(buffer_pointer[0x16]);\n  }\n  current_byte = buffer_pointer[1];\n  buffer_pointer[1] = current_byte - 1;\n  if ((int)(current_byte - 1) < 0) {\n    value = process_buffer(buffer_start_address, buffer_pointer);\n  }\n  else {\n    current_byte = *buffer_pointer;\n    *buffer_pointer = current_byte + 1;\n    value = (uint)*current_byte;\n  }\n  if ((-1 < (int)buffer_pointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(buffer_pointer + 3) << 0x16))) {\n    do_nothing_2(buffer_pointer[0x16]);\n  }\n  return value;\n}",
            "called": [
                "FUN_000045ec",
                "FUN_000045e8",
                "FUN_000042a4",
                "FUN_00005e10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004418",
            "calling": [
                "FUN_00002d94"
            ],
            "imported": false,
            "current_name": "get_value_from_buffer_00004418"
        },
        "FUN_0000258c": {
            "renaming": {
                "FUN_0000258c": "initialize_device_0000258c",
                "local_c": "counter",
                "FUN_00002538": "enable_device_feature",
                "DAT_000025ec": "PTR_device_data",
                "DAT_000025f0": "PTR_device_config"
            },
            "code": "void initialize_device_0000258c(void)\n{\n  uint32_t counter;\n  *(uint32_t *)(DAT_000025ec + 8) = DAT_000025f0;\n  enable_device_feature(0xfffffffe, 1);\n  enable_device_feature(0xfffffffb, 1);\n  for (counter = 0; counter < 0x66; counter++) {\n    enable_device_feature((int32_t)(char)counter, 1);\n  }\n  *(uint32_t *)(DAT_000025ec + 0x10) |= 0x10;\n  *(uint32_t *)(DAT_000025ec + 0x14) |= 0x200;\n  return;\n}",
            "called": [
                "FUN_00002538"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000258c",
            "calling": [
                "FUN_00001274"
            ],
            "imported": false,
            "current_name": "initialize_device_0000258c"
        },
        "FUN_00002a00": {
            "renaming": {
                "FUN_00002a00": "print_message_on_screen_00002a00",
                "param_1": "message",
                "FUN_00004cb4": "display_message"
            },
            "code": "void print_message_on_screen_00002a00(char* message) {\n  display_message(message);\n  return;\n}",
            "called": [
                "FUN_00004cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002a00",
            "calling": [
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "imported": false,
            "current_name": "print_message_on_screen_00002a00"
        },
        "FUN_000043a0": {
            "renaming": {
                "FUN_000043a0": "process_data_000043a0",
                "param_1": "data_size",
                "param_2": "callback_function",
                "piVar2": "data_ptr",
                "uVar4": "result",
                "iVar5": "inner_data_size",
                "iVar3": "inner_data_ptr",
                "uVar1": "callback_result"
            },
            "code": "uint process_data_000043a0(int data_size, code *callback_function) {\n  uint result = 0;\n  int *data_ptr = (int *)(data_size + 0x48);\n  do {\n    int inner_data_size = data_ptr[1];\n    int inner_data_ptr = data_ptr[2];\n    while (inner_data_size-- > 0) {\n      if ((*(ushort *)(inner_data_ptr + 0xc) > 1) && (*(short *)(inner_data_ptr + 0xe) != -1)) {\n        uint callback_result = (*callback_function)(inner_data_ptr);\n        result |= callback_result;\n      }\n      inner_data_ptr += 0x68;\n    }\n    data_ptr = (int *)*data_ptr;\n  } while (data_ptr != (int *)0x0);\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000043a0",
            "calling": [
                "FUN_00006768"
            ],
            "imported": false,
            "current_name": "process_data_000043a0"
        },
        "FUN_0000211c": {
            "renaming": {
                "FUN_0000211c": "process_data_0000211c",
                "local_40": "header",
                "local_3c": "size",
                "local_38": "type",
                "local_34": "value",
                "local_30": "index",
                "local_2c": "data",
                "local_28": "heap_size",
                "local_24": "bss_size",
                "local_20": "stack_size",
                "local_1a": "i",
                "local_18": "count",
                "local_14": "sum",
                "PTR_s__pid_____21s____9sQ___pri___stac_00002250": "data_table",
                "PTR_DAT_0000224c": "value_table",
                "PTR_s_state_00002248": "state",
                "PTR_s______isr_stack______________6i___00002254": "get_stack_size",
                "DAT_0000225c": "value_table",
                "PTR_s___3hi_____20s_____8s___1s____3i___00002260": "print_data",
                "PTR_s___5s___21s__13s_6s__6i___5i__0000226c": "print",
                "PTR_DAT_00002264": "pid",
                "PTR_DAT_00002268": "state"
            },
            "code": "void process_data_0000211c(void)\n{\n    int sum = 0;\n    int count = 0;\n    char header[] = \"PTR_DAT_00002264\\t    priority\\tPTR_s_PTR_DAT_00002268_00002248\\n\";\n    int stack_size = PTR_s______isr_stack______________6i___00002254();\n    int heap_size = get_heap_size();\n    int bss_size = get_bss_size();\n    PTR_s___5s___21s__13s_6s__6i___5i__0000226c(header);\n    PTR_s___3hi_____20s_____8s___1s____3i___00002260(\"PTR_DAT_00002264\\t%d\\t%s\\n\", PTR_DAT_00002264, PTR_s_PTR_DAT_00002268_00002248);\n    sum += stack_size + heap_size;\n    if (stack_size > 0) {\n        count++;\n    }\n    for (int i = 1; i < 0x21; i++) {\n        void *data = *(void **)(PTR_s__PTR_DAT_00002264_____21s____9sQ___pri___stac_00002250 + i * 4);\n        if (data != NULL) {\n            uint8_t index = *(uint8_t *)(data + 1);\n            void *value = *(void **)(PTR_DAT_0000224c + index * 4);\n            char *name = (index > 8) ? \"heap\" : \"stack\";\n            int size = *(int *)(data + 0xb);\n            sum += size;\n            int diff = size - get_func_size(data);\n            count += diff;\n            PTR_s___3hi_____20s_____8s___1s____3i___00002260(\"%d\\t%.*s\\t%p\\t%s\\t%d\\t%d\\n\", i, 20, data + 6, value, name, size, diff);\n        }\n    }\n    PTR_s___3hi_____20s_____8s___1s____3i___00002260(\"Total: stack=%d, heap=%d, bss=%d, sum=%d, count=%d\\n\", stack_size, heap_size, bss_size, sum, count);\n}\n",
            "called": [
                "FUN_0000091c",
                "FUN_00000900",
                "FUN_000010a0",
                "FUN_00004c84",
                "FUN_000008b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000211c",
            "calling": [
                "FUN_00000f04",
                "FUN_00002eb4"
            ],
            "imported": false,
            "current_name": "process_data_0000211c"
        },
        "FUN_0000562c": {
            "renaming": {
                "FUN_0000562c": "find_value_in_string_0000562c",
                "param_1": "param_1",
                "param_2": "search_string",
                "param_3": "index_of_match",
                "cVar1": "current_char",
                "ppiVar2": "list_of_strings",
                "piVar3": "current_string",
                "iVar4": "current_match_index",
                "pcVar5": "current_string_char",
                "piVar6": "current_match_string",
                "iVar7": "current_index"
            },
            "code": "int find_value_in_string_0000562c(int param_1, char *search_string, int *index_of_match) {\n  char current_char;\n  int **list_of_strings;\n  int *current_string;\n  int current_index;\n  char *current_string_char;\n  int *current_match_string;\n  int current_match_index;\n  \n  initialize_search();\n  list_of_strings = DAT_0000569c;\n  current_string_char = search_string;\n  if (*DAT_0000569c != (int *)0x0) {\n    do {\n      current_char = *current_string_char;\n      if (current_char == '\\0') {\n        current_index = (int)current_string_char - (int)search_string;\n        current_string = *DAT_0000569c;\n        while (true) {\n          current_match_string = current_string;\n          if (*current_match_string == 0) break;\n          current_match_index = find_match_index(*current_match_string, search_string, current_index);\n          current_string = current_match_string + 1;\n          if ((current_match_index == 0) && (current_match_index = *current_match_string, *(char *)(current_match_index + current_index) == '=')) {\n            *index_of_match = (int)current_match_string - (int)*list_of_strings >> 2;\n            finalize_search(param_1);\n            return current_match_index + current_index + 1;\n          }\n        }\n        break;\n      }\n      current_string_char = current_string_char + 1;\n    } while (current_char != '=');\n  }\n  finalize_search(param_1);\n  return 0;\n}",
            "called": [
                "FUN_00005ff8",
                "FUN_00004e66",
                "FUN_00005fec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000562c",
            "calling": [
                "FUN_000056a0"
            ],
            "imported": false,
            "current_name": "find_value_in_string_0000562c"
        },
        "FUN_000020b8": {
            "renaming": {
                "FUN_000020b8": "initialize_data_000020b8",
                "FUN_00002028": "clear_data_buffer",
                "DAT_000020c8": "data_buffer"
            },
            "code": "void initialize_data_000020b8(void)\n{\n  clear_DAT_000020c8(DAT_000020c8, 0);\n  return;\n}",
            "called": [
                "FUN_00002028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000020b8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_000020b8"
        },
        "FUN_00002a18": {
            "renaming": {
                "FUN_00002a18": "find_matching_value_00002a18",
                "param_1": "array_ptr",
                "param_2": "search_value",
                "iVar1": "matching_index",
                "local_18": "arrays",
                "local_10": "index",
                "local_c": "current_array_ptr"
            },
            "code": "int find_matching_value_00002a18(int *array_ptr, int search_value) {\n    int index;\n    int *current_array_ptr;\n    int *arrays[2] = {array_ptr, PTR_PTR_s_reboot_00002a84};\n    for (index = 0; index < 2; index++) {\n        current_array_ptr = arrays[index];\n        if (current_array_ptr != NULL) {\n            while (*current_array_ptr != 0) {\n                if (FUN_00004e52(*current_array_ptr, search_value) == 0) {\n                    return current_array_ptr[2];\n                }\n                current_array_ptr += 3;\n            }\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_00004e52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002a18",
            "calling": [
                "FUN_00002b10"
            ],
            "imported": false,
            "current_name": "find_matching_value_00002a18"
        },
        "FUN_000054a8": {
            "renaming": {
                "FUN_000054a8": "get_value_from_param_000054a8",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "input_value",
                "uVar2": "original_input_value",
                "uVar3": "return_value",
                "uVar4": "data_ptr_2",
                "iVar5": "data_ptr",
                "*DAT_00005574": "global_variable",
                "PTR_DAT_00005578": "constant_ptr_1",
                "PTR_DAT_0000557c": "constant_ptr_2",
                "PTR_DAT_00005580": "constant_ptr_3"
            },
            "code": "uint16_t get_value_from_param_000054a8(uint16_t *output, uint16_t *input)\n{\n    uint16_t input_value = *(input + 3);\n    uint16_t original_input_value = input_value;\n    uint16_t *data_ptr = NULL;\n    uint32_t return_value = 0;\n    int32_t *data_ptr_2 = NULL;\n\n    if (*DAT_00005574 != 0 && *(int *)(*DAT_00005574 + 0x18) == 0)\n    {\n        FUN_000042a4(*DAT_00005574);\n    }\n\n    if (input == (uint16_t *)PTR_DAT_00005578)\n    {\n        data_ptr = *(uint16_t **)(*DAT_00005574 + 4);\n    }\n    else if (input == (uint16_t *)PTR_DAT_0000557c)\n    {\n        data_ptr = *(uint16_t **)(*DAT_00005574 + 8);\n    }\n    else if (input == (uint16_t *)PTR_DAT_00005580)\n    {\n        data_ptr = *(uint16_t **)(*DAT_00005574 + 0xc);\n    }\n\n    if (input_value << 0x1c >= 0xffffffff)\n    {\n        if (input_value << 0x1b < 0)\n        {\n            if ((uint16_t *)input[0xd] != NULL && (uint16_t *)input[0xd] != input + 0x11)\n            {\n                FUN_00004b34(output);\n            }\n\n            input[0xd] = 0;\n            *(input + 3) &= 0xffdb;\n            input[1] = 0;\n            *input = input[4];\n        }\n        else\n        {\n            *output = 9;\n            return_value = 0xffffffff;\n        }\n    }\n    else\n    {\n        *(input + 3) |= 8;\n    }\n\n    if (input[4] == 0 && (*(input + 3) & 0x280) != 0x200)\n    {\n        FUN_00005700(output, input);\n    }\n\n    if ((original_input_value & 1) == 0)\n    {\n        if (original_input_value << 0x1e < 0xffffffff)\n        {\n            data_ptr_2 = input + 5;\n        }\n\n        input[2] = *data_ptr_2;\n    }\n    else\n    {\n        input[2] = 0;\n        input[6] = -input[5];\n    }\n\n    if (input[4] != 0)\n    {\n        return_value = 0;\n    }\n    else if ((*(input + 3) & 0x80) == 0)\n    {\n        return_value = original_input_value & 0x80;\n    }\n    else\n    {\n        *(input + 3) |= 0x40;\n        return_value = 0xffffffff;\n    }\n\n    return return_value;\n}",
            "called": [
                "FUN_00004b34",
                "FUN_000042a4",
                "FUN_00005700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000054a8",
            "calling": [
                "FUN_00004db8",
                "FUN_000057f8",
                "FUN_00005404"
            ],
            "imported": false,
            "current_name": "get_value_from_param_000054a8"
        },
        "FUN_000007dc": {
            "renaming": {
                "FUN_000007dc": "allocate_memory_block_000007dc",
                "param_1": "block_size",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "aligned_block_size",
                "local_14": "i",
                "local_10": "i",
                "local_c": "block_ptr"
            },
            "code": "int * allocate_memory_block_000007dc(undefined4 block_size, int arg2, int arg3, int arg4) {\n  uint aligned_block_size = (block_size + arg3) & 0xfffffffc;\n  int *block_ptr = (int *)(aligned_block_size - 4);\n  *block_ptr = 0x77777777;\n  if (((uint)block_ptr & 7) != 0) {\n    block_ptr = (int *)(aligned_block_size - 8);\n    *block_ptr = 0x88888888;\n  }\n  block_ptr[-1] = 0x1000000;\n  block_ptr[-2] = arg2;\n  block_ptr[-3] = DAT_000008b4;\n  block_ptr = block_ptr - 4;\n  *block_ptr = 0;\n  for (int i = 3; i > 0; i--) {\n    block_ptr--;\n    *block_ptr = i;\n  }\n  block_ptr--;\n  *block_ptr = arg4;\n  for (int i = 0xb; i > 3; i--) {\n    block_ptr--;\n    *block_ptr = i;\n  }\n  block_ptr[-1] = -3;\n  return block_ptr - 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000007dc",
            "calling": [
                "FUN_000010d4"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_000007dc"
        },
        "FUN_00001710": {
            "renaming": {
                "FUN_00001710": "set_null_terminator_at_returned_address_00001710",
                "param_1": "address",
                "param_2": "size",
                "puVar1": "returned_address",
                "*puVar1": "*returned_address",
                "FUN_00001696": "get_returned_address"
            },
            "code": "void set_null_terminator_at_returned_address_00001710(void *address, int size)\n{\n  void *returned_address = (void*)get_returned_address(address, size);\n  *returned_address = '\\0';\n  return;\n}",
            "called": [
                "FUN_00001696"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001710",
            "calling": [
                "FUN_0000182c",
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_00001734",
                "FUN_00001bb8",
                "FUN_000018bc",
                "FUN_00001778",
                "FUN_00001960"
            ],
            "imported": false,
            "current_name": "set_null_terminator_at_returned_address_00001710"
        },
        "FUN_000045ec": {
            "renaming": {
                "FUN_000045ec": "do_nothing_000045ec"
            },
            "code": "\nvoid do_nothing_000045ec(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000045ec",
            "calling": [
                "FUN_00004280",
                "FUN_00005ff8",
                "FUN_00004158",
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_000057f8",
                "FUN_0000579c",
                "FUN_000042a4",
                "FUN_00004cb4"
            ],
            "imported": false,
            "current_name": "do_nothing_000045ec"
        },
        "FUN_00001034": {
            "renaming": {
                "FUN_00001034": "find_and_insert_00001034",
                "param_1": "list",
                "param_2": "index",
                "local_1c": "current_node",
                "PTR_s_FAILED_ASSERTION__0000109c": "FAILED_ASSERTION_MSG"
            },
            "code": "void find_and_insert_00001034(int **list, int index)\n{\n  int **current_node;\n  if (index > 8)\n  {\n    print_error_message(3, PTR_s_FAILED_ASSERTION__0000109c);\n  }\n  for (current_node = list; (*current_node != NULL && (get_node_priority(*current_node) <= get_node_priority(index))); current_node = (int **)*current_node)\n  {\n  }\n  *(int **)(index + 8) = *current_node;\n  *current_node = (int *)(int **)(index + 8);\n  return;\n}",
            "called": [
                "FUN_00000f04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001034",
            "calling": [
                "FUN_00002434"
            ],
            "imported": false,
            "current_name": "find_and_insert_00001034"
        },
        "FUN_00006964": {
            "renaming": {
                "FUN_00006964": "calculate_new_value_00006964",
                "param_1": "current_value",
                "param_2": "data_array",
                "iVar1": "new_value",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int calculate_new_value_00006964(int current_value, int* data_array){\n  int new_value;\n  int array_index = current_value - 4;\n  \n  if (current_value < 0) {\n    array_index += data_array[array_index];\n  }\n  \n  new_value = array_index - 4;\n  \n  return new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00006964",
            "calling": [
                "FUN_000060cc"
            ],
            "imported": false,
            "current_name": "calculate_new_value_00006964"
        },
        "FUN_0000182c": {
            "renaming": {
                "FUN_0000182c": "set_byte_value_0000182c",
                "DAT_000018b4": "data_pointer",
                "DAT_000018b8": "data_pointer_2"
            },
            "code": "void set_byte_value_0000182c(void)\n{\n  byte* byte_pointer = DAT_000018b4 + 8;\n  *byte_pointer = (*byte_pointer) & 0xd0;\n  set_value(DAT_000018b8,0);\n  set_flag(DAT_000018b4,1);\n  set_flag(DAT_000018b4,0);\n  return;\n}",
            "called": [
                "FUN_00001710",
                "FUN_000016ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000182c",
            "calling": [
                "FUN_00001c84"
            ],
            "imported": false,
            "current_name": "set_byte_value_0000182c"
        },
        "FUN_00004db8": {
            "renaming": {
                "FUN_00004db8": "process_input_00004db8",
                "param_1": "input",
                "cVar1": "current_char",
                "iVar2": "result",
                "iVar3": "data_section_ptr",
                "pcVar4": "output_ptr",
                "pcVar7": "input_ptr",
                "ppcVar5": "string_ptr_ptr",
                "uVar6": "return_value",
                "PTR_DAT_00004dac": "original_string_ptr",
                "PTR_DAT_00004db0": "modified_string_ptr",
                "PTR_DAT_00004db4": "alternate_string_ptr"
            },
            "code": "int process_input_00004db8(int input) {\n  int data_section_ptr = *data_section_ptr_ptr;\n  if ((data_section_ptr != 0) && (*(int *)(data_section_ptr + 0x18) == 0)) {\n    initialize_data_section();\n  }\n  char **string_ptr_ptr = *(char ***)(data_section_ptr + 8);\n  if (*(int *)(data_section_ptr + 0x18) == 0) {\n    initialize_data_section(data_section_ptr);\n  }\n  if (string_ptr_ptr == PTR_DAT_00004dac) {\n    string_ptr_ptr = *(char ***)(data_section_ptr + 4);\n  }\n  else if (string_ptr_ptr == PTR_DAT_00004db0) {\n    string_ptr_ptr = *(char ***)(data_section_ptr + 8);\n  }\n  else if (string_ptr_ptr == PTR_DAT_00004db4) {\n    string_ptr_ptr = *(char ***)(data_section_ptr + 0xc);\n  }\n  if ((-1 < (int)string_ptr_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(string_ptr_ptr + 3) << 0x16))) {\n    do_nothing(string_ptr_ptr[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(string_ptr_ptr + 3) << 0x1c) < 0) && (string_ptr_ptr[4] != (char *)0x0)) || (FUN_000054a8(data_section_ptr,string_ptr_ptr) == 0)) {\n    char *input_ptr = (char *)(input - 1);\n    do {\n      while (true) {\n        input_ptr = input_ptr + 1;\n        char current_char = *input_ptr;\n        char *output_ptr = string_ptr_ptr[2] + -1;\n        string_ptr_ptr[2] = output_ptr;\n        if (current_char == '\\0') {\n          if (-1 < (int)output_ptr) {\n            char *string_start_ptr = *string_ptr_ptr;\n            int newline_char = 10;\n            *string_ptr_ptr = string_start_ptr + 1;\n            *string_start_ptr = '\\n';\n            goto EXIT;\n          }\n          int result = FUN_00005404(data_section_ptr, 10, string_ptr_ptr);\n          if (result != -1) {\n            goto EXIT;\n          }\n          else {\n            goto FAILURE_EXIT;\n          }\n        }\n        if (((int)output_ptr < 0) && (((int)output_ptr < (int)string_ptr_ptr[6] || (current_char == '\\n')))) {\n          break;\n        }\n        char *output_start_ptr = *string_ptr_ptr;\n        *string_ptr_ptr = output_start_ptr + 1;\n        *output_start_ptr = current_char;\n      }\n    } while (FUN_00005404(data_section_ptr,current_char,string_ptr_ptr) != -1);\n  }\nFAILURE_EXIT:\n  return -1;\nEXIT:\n  return 0;\n}",
            "called": [
                "FUN_000045ec",
                "FUN_000054a8",
                "FUN_00005404",
                "FUN_000045e8",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004db8",
            "calling": [
                "FUN_000034c0",
                "FUN_0000305c",
                "FUN_000023a4",
                "FUN_00003444",
                "FUN_00003694",
                "FUN_000031e0",
                "FUN_00003478",
                "FUN_00002fe0",
                "FUN_000033c0",
                "FUN_00002a88",
                "FUN_00002f30",
                "FUN_00002f74",
                "FUN_000033f4",
                "FUN_00002b10"
            ],
            "imported": false,
            "current_name": "process_input_00004db8"
        },
        "FUN_000022f0": {
            "renaming": {
                "FUN_000022f0": "increment_value_000022f0",
                "param_1": "array",
                "uVar1": "value",
                "index": "index",
                "offset": "offset"
            },
            "code": "undefined increment_value_000022f0(int *array)\n{\n  int index = 2;\n  int value = array[index];\n  array[index] = value + 1;\n  int offset = value & (array[1] - 1U);\n  return *(undefined *)((offset) + *array);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000022f0",
            "calling": [
                "FUN_0000231c"
            ],
            "imported": false,
            "current_name": "increment_value_000022f0"
        },
        "FUN_00001c84": {
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "FUN_00000cd0": "get_initial_value",
                "FUN_00001bb8": "setup_gpio",
                "DAT_00001ce8": "system_data",
                "DAT_00001cec": "communication_data",
                "FUN_0000182c": "setup_timer",
                "FUN_000017dc": "setup_interrupt",
                "FUN_00001b10": "setup_communication",
                "FUN_00000d0c": "start_system",
                "uVar1": "result"
            },
            "code": "void initialize_system_00001c84(void)\n{\n    undefined4 result = get_initial_value();\n    setup_gpio();\n    *(undefined4 *)(DAT_00001ce8 + 0x1044) = 0x220000;\n    DAT_00001ce8[0xc] = 0;\n    *DAT_00001ce8 = *DAT_00001ce8 & 199 | 0x38;\n    DAT_00001ce8[4] = 0x13;\n    DAT_00001ce8[5] = 0;\n    setup_timer();\n    setup_interrupt();\n    setup_communication(7);\n    start_system(result);\n    return;\n}",
            "called": [
                "FUN_00000d0c",
                "FUN_0000182c",
                "FUN_00001b10",
                "FUN_00000cd0",
                "FUN_000017dc",
                "FUN_00001bb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001c84",
            "calling": [
                "FUN_00001274"
            ],
            "imported": false,
            "current_name": "initialize_system_00001c84"
        },
        "FUN_000068f0": {
            "renaming": {
                "FUN_000068f0": "allocate_memory_000068f0",
                "param_1": "size",
                "param_2": "memory",
                "iVar1": "allocated_memory",
                "iVar2": "current_memory_size"
            },
            "code": "int allocate_memory_000068f0(int size, int* memory){\n  int allocated_memory;\n  int current_memory_size;\n  if(memory[13] == memory + 17){\n    allocated_memory = allocate_memory_000068f0_internal(size);\n    if(allocated_memory != 0){\n      memory[14] = size;\n      memory[13] = allocated_memory;\n      *(unsigned char*)(allocated_memory + 1023) = *(unsigned char*)(memory + 70);\n      *(unsigned char*)(allocated_memory + 1022) = *(unsigned char*)(memory + 69);\n      *(int*)(allocated_memory + 1021) = *(int*)(memory + 17);\n      *memory = allocated_memory + 1021;\n      return 0;\n    }\n  }\n  else{\n    current_memory_size = memory[14];\n    allocated_memory = allocate_memory_000068f0_internal(memory[13], current_memory_size * 2);\n    if(allocated_memory != 0){\n      copy_memory(allocated_memory + current_memory_size, allocated_memory, current_memory_size);\n      memory[13] = allocated_memory;\n      memory[14] = current_memory_size * 2;\n      *memory = allocated_memory + current_memory_size;\n      return 0;\n    }\n  }\n  return -1;\n}",
            "called": [
                "FUN_00004bd0",
                "FUN_000060b0",
                "FUN_000060cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000068f0",
            "calling": [],
            "imported": false,
            "current_name": "allocate_memory_000068f0"
        }
    },
    "used_tokens": 185711,
    "layers": [
        [
            "FUN_000026c0",
            "FUN_00004bd0",
            "FUN_00000794",
            "FUN_000064bc",
            "FUN_00002970",
            "FUN_00000dc0",
            "FUN_00000d0c",
            "FUN_00003d94",
            "FUN_0000579c",
            "FUN_000015d0",
            "FUN_00005e68",
            "FUN_00000dcc",
            "FUN_0000285c",
            "FUN_00000e58",
            "FUN_00001778",
            "FUN_000026d8",
            "FUN_00000566",
            "FUN_00001d08",
            "FUN_000031fc",
            "FUN_000016ec",
            "FUN_00005584",
            "FUN_00004248",
            "FUN_00001da2",
            "FUN_00001ec4",
            "FUN_00002744",
            "FUN_00002624",
            "FUN_00001e0c",
            "FUN_000041d0",
            "FUN_0000459c",
            "FUN_000014c4",
            "FUN_00004b34",
            "FUN_000004f2",
            "FUN_00004e66",
            "FUN_00005ecc",
            "FUN_0000129c",
            "FUN_00001628",
            "FUN_00001748",
            "FUN_0000294c",
            "FUN_00005790",
            "FUN_00000534",
            "FUN_000017dc",
            "FUN_00000410",
            "FUN_000005ca",
            "FUN_00005ff8",
            "FUN_00002714",
            "FUN_000020e0",
            "FUN_00005fec",
            "FUN_00004f84",
            "FUN_000028f0",
            "FUN_00004f98",
            "FUN_00004dee",
            "FUN_00000fec",
            "FUN_00000428",
            "FUN_000039e8",
            "FUN_00000e38",
            "FUN_00002294",
            "FUN_00003e9e",
            "FUN_00003378",
            "FUN_00006768",
            "FUN_00000db0",
            "FUN_00002600",
            "FUN_00003810",
            "FUN_00000ed8",
            "FUN_000031e0",
            "FUN_000020f4",
            "FUN_0000687c",
            "FUN_00005edc",
            "FUN_00001eea",
            "FUN_000023a4",
            "FUN_0000240c",
            "FUN_00004280",
            "FUN_00001448",
            "FUN_00001688",
            "FUN_00004042",
            "FUN_00000cf0",
            "FUN_00000f8c",
            "FUN_00002894",
            "FUN_00004158",
            "FUN_00002654",
            "FUN_00002538",
            "FUN_00004c84",
            "FUN_0000305c",
            "FUN_000012b4",
            "FUN_0000058e",
            "FUN_000025f4",
            "FUN_00001ddc",
            "FUN_00002ecc",
            "FUN_00000d76",
            "FUN_000057a8",
            "FUN_00001696",
            "FUN_000008b8",
            "FUN_000024bc",
            "FUN_00000490",
            "FUN_0000091c",
            "FUN_00001f80",
            "FUN_00000e64",
            "FUN_000026e4",
            "FUN_00000d44",
            "FUN_00000698",
            "FUN_00000cd0",
            "FUN_00000cc0",
            "FUN_00002994",
            "FUN_00000d2a",
            "FUN_00001ff6",
            "FUN_000013b8",
            "FUN_00002a88",
            "FUN_00002f30",
            "FUN_00001e44",
            "FUN_00001318",
            "FUN_00000900",
            "FUN_00004274",
            "FUN_00002fe0",
            "FUN_00001dc0",
            "FUN_00000df4",
            "FUN_00002eb4",
            "FUN_0000328c",
            "FUN_000041f4",
            "FUN_0000316c",
            "FUN_000026f0",
            "FUN_000057d2",
            "FUN_000056b8",
            "FUN_00001a18",
            "FUN_00000d9c",
            "FUN_00003ff4",
            "FUN_00001d5e",
            "FUN_0000191c",
            "FUN_000050f4",
            "FUN_00005a58",
            "FUN_000056b0",
            "FUN_00003d24",
            "FUN_000060cc",
            "FUN_00003dc4",
            "FUN_000022be",
            "FUN_00002108",
            "FUN_00001d80",
            "FUN_000033c0",
            "FUN_00002b10",
            "FUN_00001b10",
            "FUN_000023c8",
            "FUN_00002e48",
            "FUN_00000930",
            "FUN_00001348",
            "FUN_00001d3a",
            "FUN_00002434",
            "FUN_00005700",
            "FUN_00002798",
            "FUN_00003524",
            "FUN_00001bb8",
            "FUN_0000428c",
            "FUN_0000404c",
            "FUN_00002f74",
            "FUN_000010a0",
            "FUN_000012e2",
            "FUN_000056a0",
            "FUN_0000231c",
            "FUN_00002690",
            "FUN_00006010",
            "FUN_00001cf0",
            "FUN_00003ec4",
            "FUN_00001360",
            "FUN_00004622",
            "FUN_0000093c",
            "FUN_00003658",
            "FUN_000019c0",
            "FUN_000060b0",
            "FUN_000023d0",
            "FUN_00000a30",
            "FUN_000034c0",
            "FUN_000050e8",
            "FUN_000042a4",
            "FUN_00000514",
            "FUN_00002e9c",
            "FUN_00001960",
            "FUN_00001a3c",
            "FUN_000045ee",
            "FUN_00005404",
            "FUN_00006974",
            "FUN_00004314",
            "FUN_00004dc8",
            "FUN_00005fd8",
            "FUN_00005e10",
            "FUN_000033f4",
            "FUN_0000443c",
            "FUN_000027b0",
            "FUN_00005ebc",
            "FUN_00006192",
            "FUN_00001734",
            "FUN_00000e14",
            "FUN_0000281c",
            "FUN_00002270",
            "FUN_00005780",
            "FUN_000020cc",
            "FUN_00002396",
            "FUN_00004cb4",
            "FUN_00003478",
            "FUN_00002028",
            "FUN_000016c8",
            "FUN_00001a60",
            "FUN_0000099c",
            "FUN_00002d94",
            "FUN_00003918",
            "FUN_00003d64",
            "FUN_00004e52",
            "FUN_000010d4",
            "FUN_00000738",
            "FUN_00003e58",
            "FUN_00004e26",
            "FUN_000018bc",
            "FUN_00000f04",
            "FUN_00000610",
            "FUN_00003694",
            "FUN_00002364",
            "FUN_00001ad4",
            "FUN_00001274",
            "FUN_00002e6c",
            "FUN_00003444",
            "FUN_00003688",
            "FUN_00001392",
            "FUN_00002910",
            "FUN_00004418",
            "FUN_0000258c",
            "FUN_00002a00",
            "FUN_000043a0",
            "FUN_0000211c",
            "FUN_0000562c",
            "FUN_000020b8",
            "FUN_00002a18",
            "FUN_000054a8",
            "FUN_000007dc",
            "FUN_00001710",
            "FUN_00001034",
            "FUN_00006964",
            "FUN_0000182c",
            "FUN_00004db8",
            "FUN_000022f0",
            "FUN_00001c84",
            "FUN_000068f0"
        ]
    ],
    "locked_functions": []
}