{
    "functions": {
        "FUN_00000410": {
            "entrypoint": "0x00000410",
            "current_name": "initialize_system_00000410",
            "code": "\nvoid initializeSystem_00000410(void)\n\n{\n  FUN_00000df4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000410": "initialize_system_00000410"
            },
            "calling": [
                "FUN_0000459c"
            ],
            "called": [
                "FUN_00000df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000428": {
            "entrypoint": "0x00000428",
            "current_name": "check_and_update_offset_00000428",
            "code": "\ndword checkAndUpdateOffset_00000428(undefined4 *result,int offset)\n\n{\n  undefined4 returnValue;\n  dword updatedOffset;\n  \n  returnValue = FUN_00000cd0();\n  updatedOffset = Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  if ((offset + Elf32_Rel_ARRAY_1fff0200[0].r_offset < 0x20030001) &&\n     (0x1fff0def < offset + Elf32_Rel_ARRAY_1fff0200[0].r_offset)) {\n    Elf32_Rel_ARRAY_1fff0200[0].r_offset = offset + Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  }\n  else {\n    *result = 0xc;\n    updatedOffset = 0xffffffff;\n  }\n  FUN_00000d0c(returnValue);\n  return updatedOffset;\n}\n\n",
            "renaming": {
                "FUN_00000428": "check_and_update_offset_00000428",
                "param_1": "result",
                "param_2": "offset",
                "uVar1": "returnValue",
                "local_c": "updatedOffset"
            },
            "calling": [
                "FUN_00004bd0"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000490": {
            "entrypoint": "0x00000490",
            "current_name": "calculate_result_00000490",
            "code": "\nundefined4 calculateResult_00000490(undefined4 input1,undefined4 input2,undefined4 arg1,undefined4 arg2)\n\n{\n  undefined4 result;\n  \n  result = FUN_00000e14(arg1,arg2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000490": "calculate_result_00000490",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "arg1",
                "param_4": "arg2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00004dc8"
            ],
            "called": [
                "FUN_00000e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000004f2": {
            "entrypoint": "0x000004f2",
            "current_name": "initialize_value_and_return_000004f2",
            "code": "\nundefined4 initializeValueAndReturn_000004f2(undefined4 *resultPointer)\n\n{\n  *resultPointer = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000004f2": "initialize_value_and_return_000004f2",
                "param_1": "resultPointer"
            },
            "calling": [
                "FUN_00004dee",
                "FUN_00004e26"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000514": {
            "entrypoint": "0x00000514",
            "current_name": "initialize_params_00000514",
            "code": "\nundefined4 initializeParams_00000514(undefined4 *outputValue)\n\n{\n  *outputValue = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00000514": "initialize_params_00000514",
                "param_1": "outputValue"
            },
            "calling": [
                "FUN_000056b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000534": {
            "entrypoint": "0x00000534",
            "current_name": "check_valid_input_00000534",
            "code": "\nundefined4 checkValidInput_00000534(undefined4 *result,int inputValue)\n\n{\n  undefined4 isValid;\n  \n  *result = 0;\n  if (((inputValue == 0) || (inputValue == 1)) || (inputValue == 2)) {\n    isValid = 1;\n  }\n  else {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_00000534": "check_valid_input_00000534",
                "param_1": "result",
                "param_2": "inputValue",
                "uVar1": "isValid"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000566": {
            "entrypoint": "0x00000566",
            "current_name": "unpack_integer_00000566",
            "code": "\nint unpackInteger_00000566(int packedInteger)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  byte byte4;\n  int unpackedInteger;\n  \n  byte2 = (byte)packedInteger;\n  byte3 = (byte)((uint)packedInteger >> 8);\n  byte4 = (byte)((uint)packedInteger >> 0x10);\n  byte1 = (byte)((uint)packedInteger >> 0x18);\n  unpackedInteger = LZCOUNT((uint)(byte)((((((((byte2 & 1) << 1 | byte2 >> 1 & 1) << 1 | byte2 >> 2 & 1) << 1\n                                  | byte2 >> 3 & 1) << 1 | byte2 >> 4 & 1) << 1 | byte2 >> 5 & 1) <<\n                                1 | byte2 >> 6 & 1) << 1 | byte2 >> 7) << 0x18 |\n                  (uint)(byte)((((((((byte3 & 1) << 1 | byte3 >> 1 & 1) << 1 | byte3 >> 2 & 1) << 1\n                                  | byte3 >> 3 & 1) << 1 | byte3 >> 4 & 1) << 1 | byte3 >> 5 & 1) <<\n                                1 | byte3 >> 6 & 1) << 1 | byte3 >> 7) << 0x10 |\n                  (uint)(byte)((((((((byte4 & 1) << 1 | byte4 >> 1 & 1) << 1 | byte4 >> 2 & 1) << 1\n                                  | byte4 >> 3 & 1) << 1 | byte4 >> 4 & 1) << 1 | byte4 >> 5 & 1) <<\n                                1 | byte4 >> 6 & 1) << 1 | byte4 >> 7) << 8 |\n                  (uint)(byte)((((((((byte1 & 1) << 1 | byte1 >> 1 & 1) << 1 | byte1 >> 2 & 1) << 1\n                                  | byte1 >> 3 & 1) << 1 | byte1 >> 4 & 1) << 1 | byte1 >> 5 & 1) <<\n                                1 | byte1 >> 6 & 1) << 1 | byte1 >> 7));\n  if (packedInteger == 0) {\n    unpackedInteger = -1;\n  }\n  return unpackedInteger;\n}\n\n",
            "renaming": {
                "FUN_00000566": "unpack_integer_00000566",
                "param_1": "packedInteger",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "bVar4": "byte4",
                "iVar5": "unpackedInteger"
            },
            "calling": [
                "FUN_00000610"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000058e": {
            "entrypoint": "0x0000058e",
            "current_name": "update_pointer_0000058e",
            "code": "\nvoid updatePointer_0000058e(int *source,undefined4 *destination)\n\n{\n  if (*source == 0) {\n    *destination = destination;\n  }\n  else {\n    *destination = *(undefined4 *)*source;\n    *(undefined4 **)*source = destination;\n  }\n  *source = (int)destination;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000058e": "update_pointer_0000058e",
                "param_1": "source",
                "param_2": "destination"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000005ca": {
            "entrypoint": "0x000005ca",
            "current_name": "extract_pointer_value_000005ca",
            "code": "\nundefined4 * extractPointerValue_000005ca(int *ptr)\n\n{\n  undefined4 *result;\n  \n  if (*ptr == 0) {\n    result = (undefined4 *)0x0;\n  }\n  else {\n    result = *(undefined4 **)*ptr;\n    if (result == (undefined4 *)*ptr) {\n      *ptr = 0;\n    }\n    else {\n      *(undefined4 *)*ptr = *result;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000005ca": "extract_pointer_value_000005ca",
                "param_1": "ptr",
                "puVar1": "result"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000610": {
            "entrypoint": "0x00000610",
            "current_name": "check_and_update_data_00000610",
            "code": "\nundefined4 checkAndUpdateData_00000610(void)\n\n{\n  int dataAddress;\n  int index;\n  undefined4 returnValue;\n  \n  dataAddress = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  index = FUN_00000566(DAT_1fff0424);\n  index = **(int **)(&DAT_1fff03e4 + index * 4);\n  if (dataAddress == index + -8) {\n    returnValue = 0;\n  }\n  else {\n    if ((dataAddress != 0) && (*(char *)(dataAddress + 4) == '\\t')) {\n      *(undefined *)(dataAddress + 4) = 10;\n    }\n    *(undefined *)(index + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(index + -2);\n    returnValue = 1;\n    DAT_1fff03dc = index + -8;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00000610": "check_and_update_data_00000610",
                "iVar1": "dataAddress",
                "iVar2": "index",
                "uVar3": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_00000566"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000698": {
            "entrypoint": "0x00000698",
            "current_name": "update_status_00000698",
            "code": "\nvoid updateStatus_00000698(int statusPointer,uint newStatus)\n\n{\n  if (newStatus < 9) {\n    if ((8 < *(byte *)(statusPointer + 4)) &&\n       (FUN_000005ca(&DAT_1fff03e4 + (uint)*(byte *)(statusPointer + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(byte *)(statusPointer + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(sbyte *)(statusPointer + 5));\n    }\n  }\n  else if (*(byte *)(statusPointer + 4) < 9) {\n    FUN_0000058e(&DAT_1fff03e4 + (uint)*(byte *)(statusPointer + 5) * 4,statusPointer + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(sbyte *)(statusPointer + 5);\n  }\n  *(char *)(statusPointer + 4) = (char)newStatus;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000698": "update_status_00000698",
                "param_1": "statusPointer",
                "param_2": "newStatus"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc",
                "FUN_00002434",
                "FUN_00000794"
            ],
            "called": [
                "FUN_000005ca",
                "FUN_0000058e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000738": {
            "entrypoint": "0x00000738",
            "current_name": "check_validity_00000738",
            "code": "\nvoid checkValidity_00000738(ushort inputValue)\n\n{\n  int result;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (inputValue < *(byte *)(DAT_1fff03dc + 5))) {\n    result = FUN_00000d2a();\n    if (result == 0) {\n      FUN_0000093c();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000738": "check_validity_00000738",
                "param_1": "inputValue",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_00000d2a",
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000794": {
            "entrypoint": "0x00000794",
            "current_name": "initialize_memory_00000794",
            "code": "\nint * initializeMemory_00000794(void)\n\n{\n  int result;\n  int index;\n  undefined4 *pointer;\n  uint alignedAddress;\n  int countDown_1;\n  int countDown_2;\n  int *currentPointer;\n  \n  FUN_00000cd0();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  FUN_00000698(DAT_1fff03dc,0);\n  pointer = &DAT_1fff03dc;\n  index = 0;\n  DAT_1fff03dc = 0;\n  FUN_00000930();\n  alignedAddress = (int)pointer + index & 0xfffffffc;\n  currentPointer = (int *)(alignedAddress - 4);\n  *currentPointer = 0x77777777;\n  if (((uint)currentPointer & 7) != 0) {\n    currentPointer = (int *)(alignedAddress - 8);\n    *currentPointer = 0x88888888;\n  }\n  currentPointer[-1] = 0x1000000;\n  currentPointer[-2] = index << 0xd;\n  currentPointer[-3] = 0x795;\n  currentPointer = currentPointer + -4;\n  *currentPointer = 0;\n  for (countDown_2 = 3; 0 < countDown_2; countDown_2 = countDown_2 + -1) {\n    currentPointer = currentPointer + -1;\n    *currentPointer = countDown_2;\n  }\n  currentPointer = currentPointer + -1;\n  *currentPointer = result;\n  for (countDown_1 = 0xb; 3 < countDown_1; countDown_1 = countDown_1 + -1) {\n    currentPointer = currentPointer + -1;\n    *currentPointer = countDown_1;\n  }\n  currentPointer[-1] = -3;\n  return currentPointer + -1;\n}\n\n",
            "renaming": {
                "FUN_00000794": "initialize_memory_00000794",
                "extraout_r1": "result",
                "iVar1": "index",
                "puVar2": "pointer",
                "uVar3": "alignedAddress",
                "iStack_1c": "countDown_1",
                "iStack_18": "countDown_2",
                "piStack_14": "currentPointer"
            },
            "calling": [],
            "called": [
                "FUN_00000cd0",
                "FUN_00000930",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000007dc": {
            "entrypoint": "0x000007dc",
            "current_name": "initialize_memory_000007dc",
            "code": "\nint * initializeMemory_000007dc(undefined4 param1,int param2,int param3,int param4)\n\n{\n  uint alignedSize;\n  int counter;\n  int loopCounter;\n  int *ptr;\n  \n  alignedSize = param4 + param3 & 0xfffffffc;\n  ptr = (int *)(alignedSize - 4);\n  *ptr = 0x77777777;\n  if (((uint)ptr & 7) != 0) {\n    ptr = (int *)(alignedSize - 8);\n    *ptr = 0x88888888;\n  }\n  ptr[-1] = 0x1000000;\n  ptr[-2] = param1;\n  ptr[-3] = 0x795;\n  ptr = ptr + -4;\n  *ptr = 0;\n  for (loopCounter = 3; 0 < loopCounter; loopCounter = loopCounter + -1) {\n    ptr = ptr + -1;\n    *ptr = loopCounter;\n  }\n  ptr = ptr + -1;\n  *ptr = param2;\n  for (counter = 0xb; 3 < counter; counter = counter + -1) {\n    ptr = ptr + -1;\n    *ptr = counter;\n  }\n  ptr[-1] = -3;\n  return ptr + -1;\n}\n\n",
            "renaming": {
                "FUN_000007dc": "initialize_memory_000007dc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "alignedSize",
                "local_14": "counter",
                "local_10": "loopCounter",
                "local_c": "ptr"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000008b8": {
            "entrypoint": "0x000008b8",
            "current_name": "calculate_remaining_size_000008b8",
            "code": "\nint calculateRemainingSize_000008b8(void)\n\n{\n  RelEntry *relPtr;\n  \n  for (relPtr = (RelEntry *)&DAT_1fff0000;\n      (relPtr->offset == 0xe7fee7fe && (relPtr < relArray));\n      relPtr = (RelEntry *)&relPtr->info) {\n  }\n  return ((int)relArray - (int)relPtr >> 2) << 2;\n}\n\n",
            "renaming": {
                "FUN_000008b8": "calculate_remaining_size_000008b8",
                "local_c": "relPtr",
                "Elf32_Rel": "RelEntry",
                "r_offset": "offset",
                "r_info": "info",
                "Elf32_Rel_ARRAY_1fff0200": "relArray"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000900": {
            "entrypoint": "0x00000900",
            "current_name": "get_main_stack_pointer_00000900",
            "code": "\nundefined4 get_main_stack_pointer_00000900(void)\n\n{\n  undefined4 main_stack_pointer;\n  \n  main_stack_pointer = getMainStackPointer();\n  return main_stack_pointer;\n}\n\n",
            "renaming": {
                "FUN_00000900": "get_main_stack_pointer_00000900",
                "uVar1": "main_stack_pointer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000091c": {
            "entrypoint": "0x0000091c",
            "current_name": "get_default_value_0000091c",
            "code": "\nundefined4 get_default_value_0000091c(void)\n\n{\n  return 0x1fff0000;\n}\n\n",
            "renaming": {
                "FUN_0000091c": "get_default_value_0000091c"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000930": {
            "entrypoint": "0x00000930",
            "current_name": "run_infinite_loop_00000930",
            "code": "\nvoid run_infinite_loop_00000930(void)\n\n{\n  FUN_00000cf0();\n  software_interrupt(1);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000930": "run_infinite_loop_00000930"
            },
            "calling": [
                "FUN_00000f8c",
                "FUN_00000794"
            ],
            "called": [
                "FUN_00000cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000093c": {
            "entrypoint": "0x0000093c",
            "current_name": "enable_interrupt_0000093c",
            "code": "\n\n\nvoid enable_interrupt_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000093c": "enable_interrupt_0000093c"
            },
            "calling": [
                "FUN_00002798",
                "FUN_00001cf0",
                "FUN_00000738",
                "FUN_00002434",
                "FUN_00001348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000990": {
            "entrypoint": "0x00000990",
            "current_name": "FUNC_00000990",
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x0000099c",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  undefined4 uStack_18;\n  undefined4 *local_14;\n  dword *local_10;\n  Elf32_Rel *local_c;\n  \n  local_14 = &uStack_18;\n  local_10 = (dword *)&DAT_00007c60;\n  FUN_00000db0();\n  local_c = (Elf32_Rel *)&DAT_1fff0000;\n  while (local_c < &uStack_18) {\n    local_c->r_offset = 0xe7fee7fe;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  local_c = Elf32_Rel_ARRAY_1fff0200;\n  while (local_c < (Elf32_Rel *)&DAT_1fff0350) {\n    local_c->r_offset = *local_10;\n    local_10 = local_10 + 1;\n    local_c = (Elf32_Rel *)&local_c->r_info;\n  }\n  local_c = (Elf32_Rel *)&DAT_1fff0350;\n  while (local_c < (undefined4 *)0x1fff0df0) {\n    local_c->r_offset = 0;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  FUNC_00000990();\n  FUN_00000e64();\n  FUN_0000459c();\n  FUN_00000f8c();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_00000f8c",
                "FUN_00000990",
                "FUN_0000459c",
                "FUN_00000e64",
                "FUN_00000db0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000a30": {
            "entrypoint": "0x00000a30",
            "current_name": "get_nmi_handler_address_00000a30",
            "code": "\nundefined * getNMIHandlerAddress_00000a30(void)\n\n{\n  int param;\n  \n  FUN_00000f04(4,\"NMI HANDLER\");\n  return stackPointer + -*(int *)(param + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_00000a30": "get_nmi_handler_address_00000a30",
                "in_r3": "param",
                "&stack0xe000ffe0": "stackPointer"
            },
            "calling": [],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "entrypoint": "0x00000cc0",
            "current_name": "disable_ir_qinterrupts_and_return_irq_status_00000cc0",
            "code": "\nundefined4 disableIRQinterruptsAndReturnIRQStatus_00000cc0(void)\n\n{\n  bool isCurrentModePrivileged;\n  undefined4 isIRQinterruptsEnabled;\n  \n  FUN_00000f04(10,\"DUMMY HANDLER\");\n  isIRQinterruptsEnabled = 0;\n  isCurrentModePrivileged = (bool)isCurrentModePrivileged();\n  if (isCurrentModePrivileged) {\n    isIRQinterruptsEnabled = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return isIRQinterruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cc0": "disable_ir_qinterrupts_and_return_irq_status_00000cc0",
                "bVar1": "isCurrentModePrivileged",
                "uVar2": "isIRQinterruptsEnabled"
            },
            "calling": [
                "FUN_00000dc0"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "entrypoint": "0x00000cd0",
            "current_name": "check_ir_qinterrupts_enabled_00000cd0",
            "code": "\nundefined4 checkIRQinterruptsEnabled_00000cd0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabled;\n  \n  interruptsEnabled = 0;\n  isPrivilegedMode = (bool)checkCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cd0": "check_ir_qinterrupts_enabled_00000cd0",
                "uVar2": "interruptsEnabled",
                "bVar1": "isPrivilegedMode",
                "isCurrentModePrivileged": "checkCurrentModePrivileged"
            },
            "calling": [
                "FUN_00000428",
                "FUN_00000f8c",
                "FUN_00000f04",
                "FUN_000010d4",
                "FUN_00001c84",
                "FUN_000024bc",
                "FUN_00002434",
                "FUN_00000e58",
                "FUN_00000794"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "entrypoint": "0x00000cf0",
            "current_name": "check_irq_interrupts_enabled_00000cf0",
            "code": "\nundefined4 checkIRQInterruptsEnabled_00000cf0(void)\n\n{\n  bool isCurrentModePrivileged;\n  undefined4 interruptsEnabled;\n  \n  enableIRQinterrupts();\n  interruptsEnabled = 0;\n  isCurrentModePrivileged = (bool)isCurrentModePrivileged();\n  if (isCurrentModePrivileged) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cf0": "check_irq_interrupts_enabled_00000cf0",
                "bVar1": "isCurrentModePrivileged",
                "uVar2": "interruptsEnabled"
            },
            "calling": [
                "FUN_00000930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "entrypoint": "0x00000d0c",
            "current_name": "enable_interrupts_if_privileged_00000d0c",
            "code": "\nvoid enableInterruptsIfPrivileged_00000d0c(uint input)\n\n{\n  bool isPrivileged;\n  \n  isPrivileged = (bool)checkPrivilegedMode();\n  if (isPrivileged) {\n    enableInterrupts((input & 1) == 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d0c": "enable_interrupts_if_privileged_00000d0c",
                "param_1": "input",
                "bVar1": "isPrivileged",
                "isCurrentModePrivileged": "checkPrivilegedMode",
                "enableIRQinterrupts": "enableInterrupts"
            },
            "calling": [
                "FUN_00000428",
                "FUN_000010d4",
                "FUN_00001c84",
                "FUN_000024bc",
                "FUN_00002434"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "entrypoint": "0x00000d2a",
            "current_name": "get_exception_number_00000d2a",
            "code": "\nuint getExceptionNumber_00000d2a(void)\n\n{\n  bool isPrivilegedMode;\n  uint exceptionNumber;\n  \n  exceptionNumber = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    exceptionNumber = getCurrentExceptionNumber();\n    exceptionNumber = exceptionNumber & 0x1f;\n  }\n  return exceptionNumber;\n}\n\n",
            "renaming": {
                "FUN_00000d2a": "get_exception_number_00000d2a",
                "uVar2": "exceptionNumber",
                "bVar1": "isPrivilegedMode"
            },
            "calling": [
                "FUN_00000738"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d44": {
            "entrypoint": "0x00000d44",
            "current_name": "calculate_offset_00000d44",
            "code": "\nint calculate_offset_00000d44(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00000d44": "calculate_offset_00000d44",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00000d76"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d76": {
            "entrypoint": "0x00000d76",
            "current_name": "clear_memory_00000d76",
            "code": "\nvoid clearMemory_00000d76(undefined4 inputPtr,undefined inputData)\n\n{\n  undefined4 *outputPtr;\n  \n  outputPtr = (undefined4 *)FUN_00000d44(inputPtr,inputData);\n  *outputPtr = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d76": "clear_memory_00000d76",
                "param_1": "inputPtr",
                "param_2": "inputData",
                "puVar1": "outputPtr"
            },
            "calling": [
                "FUN_00000d9c"
            ],
            "called": [
                "FUN_00000d44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "entrypoint": "0x00000d9c",
            "current_name": "initialize_device_00000d9c",
            "code": "\nvoid initializeDevice_00000d9c(void)\n\n{\n  FUN_00000d76(0x40048040,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d9c": "initialize_device_00000d9c"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [
                "FUN_00000d76"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000db0": {
            "entrypoint": "0x00000db0",
            "current_name": "initialize_system_00000db0",
            "code": "\nvoid initialize_system_00000db0(void)\n\n{\n  FUN_00000dcc();\n  FUN_00000d9c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000db0": "initialize_system_00000db0"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000d9c",
                "FUN_00000dcc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "entrypoint": "0x00000dc0",
            "current_name": "initialize_00000dc0",
            "code": "\nvoid initialize_00000dc0(void)\n\n{\n  FUN_00000cc0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dc0": "initialize_00000dc0"
            },
            "calling": [],
            "called": [
                "FUN_00000cc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "entrypoint": "0x00000dcc",
            "current_name": "initialize_data_00000dcc",
            "code": "\n\n\nvoid initializeData_00000dcc(void)\n\n{\n  _DAT_4005200e = 0xd928;\n  _DAT_40052000 = 0xd2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dcc": "initialize_data_00000dcc"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000df4": {
            "entrypoint": "0x00000df4",
            "current_name": "initialize_hardware_00000df4",
            "code": "\nvoid initializeHardware_00000df4(void)\n\n{\n  FUN_000013b8(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000df4": "initialize_hardware_00000df4"
            },
            "calling": [
                "FUN_00000410"
            ],
            "called": [
                "FUN_000013b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e14": {
            "entrypoint": "0x00000e14",
            "current_name": "decompile_and_execute_00000e14",
            "code": "\nundefined4 decompile_and_execute_00000e14(undefined4 input_param,undefined4 context_param)\n\n{\n  undefined4 result;\n  \n  result = FUN_000012e2(0x1fff0204,input_param,context_param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000e14": "decompile_and_execute_00000e14",
                "param_1": "input_param",
                "param_2": "context_param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00000490"
            ],
            "called": [
                "FUN_000012e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e38": {
            "entrypoint": "0x00000e38",
            "current_name": "execute_function_00000e38",
            "code": "\nundefined4 execute_function_00000e38(undefined4 input_param,undefined4 output_param)\n\n{\n  FUN_000015d0(0,input_param,output_param);\n  return output_param;\n}\n\n",
            "renaming": {
                "FUN_00000e38": "execute_function_00000e38",
                "param_1": "input_param",
                "param_2": "output_param"
            },
            "calling": [
                "FUN_00004dee"
            ],
            "called": [
                "FUN_000015d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e58": {
            "entrypoint": "0x00000e58",
            "current_name": "FUNC_00000e58",
            "code": "\nvoid FUNC_00000e58(void)\n\n{\n  FUN_00000cd0();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000e58": "FUNC_00000e58"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00000cd0"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000e64": {
            "entrypoint": "0x00000e64",
            "current_name": "initialize_device_00000e64",
            "code": "\n\n\nvoid initializeDevice_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  FUN_00001274();\n  FUN_00001eea(0x2056,0x80);\n  FUN_00001eea(0x511a,0x80);\n  FUN_00001eea(0x2055,0x80);\n  FUN_00001ff6(0x2056);\n  FUN_00001ff6(0x511a);\n  FUN_00001ff6(0x2055);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000e64": "initialize_device_00000e64"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00001eea",
                "FUN_00001274",
                "FUN_00001ff6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "entrypoint": "0x00000ed8",
            "current_name": "initialize_data_00000ed8",
            "code": "\nvoid initializeData_00000ed8(void)\n\n{\n  undefined4 inputReturn;\n  \n  FUN_00004c84(&DAT_00006f58,inputReturn);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ed8": "initialize_data_00000ed8",
                "in_lr": "inputReturn"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ef8": {
            "entrypoint": "0x00000ef8",
            "current_name": "FUNC_00000ef8",
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000f04": {
            "entrypoint": "0x00000f04",
            "current_name": "handle_kernel_panic_00000f04",
            "code": "\nvoid handleKernelPanic_00000f04(char panicType,undefined4 panicMessage)\n\n{\n  undefined4 stackVar;\n  code *jumptable;\n  undefined4 message;\n  char type;\n  \n  message = panicMessage;\n  type = panicType;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (panicType == '\\x03') {\n      FUN_00000ed8();\n    }\n    FUN_00004c84(\"*** RIOT kernel panic:\\n%s\\n\\n\",message);\n    FUN_0000211c();\n    FUN_00004c84(&DAT_00006f78);\n    FUN_00004c84(\"*** halted.\\n\\n\");\n  }\n  FUN_00000cd0();\n  FUNC_00000ef8();\n  jumptable = (code *)0xf4d;\n  FUN_00000e58();\n  stackVar = (int)&stackVar + 1;\n  FUNC_00002400();\n  FUN_00004c84(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  FUN_000023a4();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumptable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f04": "handle_kernel_panic_00000f04",
                "param_1": "panicType",
                "param_2": "panicMessage",
                "uStack_18": "stackVar",
                "UNRECOVERED_JUMPTABLE": "jumptable",
                "local_10": "message",
                "local_9": "type"
            },
            "calling": [
                "FUN_00000a30",
                "FUN_000013b8",
                "FUN_00000cc0",
                "FUN_00003ec4",
                "FUN_00001034",
                "FUN_00000fec"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00004c84",
                "FUN_000023a4",
                "FUN_00000ef8",
                "FUN_00002400",
                "FUN_00000ed8",
                "FUN_0000211c",
                "FUN_00000e58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "entrypoint": "0x00000f8c",
            "current_name": "initialize_memory_00000f8c",
            "code": "\nvoid initializeMemory_00000f8c(void)\n\n{\n  uint upperBits;\n  undefined4 *pointer;\n  uint loopCounter;\n  int stackVariable1;\n  int *stackPointer;\n  undefined4 stackVariable2;\n  undefined4 constant1;\n  undefined4 constant2;\n  dword localVariable;\n  \n  FUN_00000cd0();\n  localVariable = arrayOfStructures[3].r_info;\n  constant2 = 0;\n  constant1 = 0xf81;\n  FUN_000010d4(&DAT_1fff0a6c,0x100,0xf,0xc);\n  localVariable = arrayOfStructures[3].r_offset;\n  constant2 = 0;\n  constant1 = 0xf5d;\n  loopCounter = 0xc;\n  FUN_000010d4(&DAT_1fff046c,0x600,7);\n  stackVariable2 = 0xfd3;\n  upperBits = FUN_00000930();\n  upperBits = upperBits >> 0x1e;\n  pointer = (undefined4 *)(loopCounter * 0x100);\n  stackVariable1 = (loopCounter >> 0x1d) << 0x11;\n  stackPointer = &stackVariable1;\n  if ((upperBits & upperBits - 1) != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *pointer = 0;\n  pointer[1] = 0;\n  pointer[2] = upperBits - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f8c": "initialize_memory_00000f8c",
                "uVar1": "upperBits",
                "puVar2": "pointer",
                "uVar3": "loopCounter",
                "iStack_24": "stackVariable1",
                "piStack_20": "stackPointer",
                "uStack_1c": "stackVariable2",
                "local_18": "constant1",
                "local_14": "constant2",
                "local_10": "localVariable",
                "Elf32_Rel_ARRAY_1fff0200": "arrayOfStructures"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000930",
                "FUN_000010d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000fec": {
            "entrypoint": "0x00000fec",
            "current_name": "initialize_array_00000fec",
            "code": "\nvoid initializeArray_00000fec(undefined4 *array,uint size)\n\n{\n  if ((size & size - 1) != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *array = 0;\n  array[1] = 0;\n  array[2] = size - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000fec": "initialize_array_00000fec",
                "param_1": "array",
                "param_2": "size",
                "param_1[1]": "array[1]",
                "param_1[2]": "array[2]"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001034": {
            "entrypoint": "0x00001034",
            "current_name": "find_suitable_element_00001034",
            "code": "\nvoid findSuitableElement_00001034(int **elementList,int itemIndex)\n\n{\n  int **currentElement;\n  \n  if (8 < *(byte *)(itemIndex + 4)) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  for (currentElement = elementList;\n      (*currentElement != (int *)0x0 && (*(byte *)((int)*currentElement + -3) <= *(byte *)(itemIndex + 5)));\n      currentElement = (int **)*currentElement) {\n  }\n  *(int **)(itemIndex + 8) = *currentElement;\n  *currentElement = (int *)(int **)(itemIndex + 8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001034": "find_suitable_element_00001034",
                "param_1": "elementList",
                "param_2": "itemIndex",
                "local_1c": "currentElement"
            },
            "calling": [
                "FUN_00002434"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010a0": {
            "entrypoint": "0x000010a0",
            "current_name": "find_offset_000010a0",
            "code": "\nint find_offset_000010a0(int *array)\n\n{\n  int *current_ptr;\n  \n  for (current_ptr = array; (int *)*current_ptr == current_ptr; current_ptr = current_ptr + 1) {\n  }\n  return (int)current_ptr - (int)array;\n}\n\n",
            "renaming": {
                "FUN_000010a0": "find_offset_000010a0",
                "param_1": "array",
                "local_c": "current_ptr"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010d4": {
            "entrypoint": "0x000010d4",
            "current_name": "initialize_data_structure_000010d4",
            "code": "\nint initializeDataStructure_000010d4(uint dataStartAddress,int dataLength,byte byteCount,uint options,undefined4 param5,\n                undefined4 param6,undefined4 param7)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int returnValue;\n  uint size;\n  undefined4 *dataPtr;\n  int adjustedLength;\n  uint adjustedStartAddress;\n  uint loopVar;\n  short index;\n  short availableIndex;\n  \n  if (byteCount < 0x10) {\n    adjustedLength = dataLength;\n    adjustedStartAddress = dataStartAddress;\n    if ((dataStartAddress & 3) != 0) {\n      adjustedLength = 4 - (dataStartAddress & 3);\n      adjustedStartAddress = adjustedLength + dataStartAddress;\n      adjustedLength = dataLength - adjustedLength;\n    }\n    size = adjustedLength - 0x30U & 0xfffffffc;\n    dataPtr = (undefined4 *)(size + adjustedStartAddress);\n    if ((options & 8) == 0) {\n      *(uint *)adjustedStartAddress = adjustedStartAddress;\n    }\n    else {\n      for (loopVar = adjustedStartAddress; loopVar < size + adjustedStartAddress; loopVar = loopVar + 4) {\n        *(uint *)loopVar = loopVar;\n      }\n    }\n    result1 = FUN_00000cd0();\n    availableIndex = 0;\n    for (index = 1; index < 0x21; index = index + 1) {\n      if (*(int *)(&DAT_1fff0358 + index * 4) == 0) {\n        availableIndex = index;\n        break;\n      }\n    }\n    if (availableIndex == 0) {\n      FUN_00000d0c(result1);\n      returnValue = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + availableIndex * 4) = dataPtr;\n      *(short *)((int)dataPtr + 6) = availableIndex;\n      result2 = FUN_000007dc(param5,param6,adjustedStartAddress,size);\n      *dataPtr = result2;\n      dataPtr[9] = adjustedStartAddress;\n      dataPtr[0xb] = dataLength;\n      dataPtr[10] = param7;\n      *(byte *)((int)dataPtr + 5) = byteCount;\n      *(undefined *)(dataPtr + 1) = 0;\n      dataPtr[2] = 0;\n      dataPtr[3] = 0;\n      dataPtr[4] = 0;\n      FUN_00000fec(dataPtr + 5,0);\n      dataPtr[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((options & 1) == 0) {\n        FUN_00000698(dataPtr,10);\n        if ((options & 4) == 0) {\n          FUN_00000d0c(result1);\n          FUN_00000738(byteCount);\n          return (int)availableIndex;\n        }\n      }\n      else {\n        FUN_00000698(dataPtr,1);\n      }\n      FUN_00000d0c(result1);\n      returnValue = (int)availableIndex;\n    }\n  }\n  else {\n    returnValue = -0x16;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000010d4": "initialize_data_structure_000010d4",
                "param_1": "dataStartAddress",
                "param_2": "dataLength",
                "param_3": "byteCount",
                "param_4": "options",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "returnValue",
                "uVar4": "size",
                "puVar5": "dataPtr",
                "local_30": "adjustedLength",
                "local_2c": "adjustedStartAddress",
                "local_10": "loopVar",
                "local_c": "index",
                "local_a": "availableIndex"
            },
            "calling": [
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_000007dc",
                "FUN_00000738",
                "FUN_00000fec",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001274": {
            "entrypoint": "0x00001274",
            "current_name": "initialize_system_00001274",
            "code": "\nvoid initializeSystem_00001274(void)\n\n{\n  FUN_0000258c();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  FUN_00001c84();\n  FUN_00002396();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001274": "initialize_system_00001274"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_0000258c",
                "FUN_00001c84",
                "FUN_00002396"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000129c": {
            "entrypoint": "0x0000129c",
            "current_name": "initialize_system_0000129c",
            "code": "\nvoid initializeSystem_0000129c(undefined4 systemParam)\n\n{\n  FUN_00002434(systemParam,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000129c": "initialize_system_0000129c",
                "param_1": "systemParam"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012b4": {
            "entrypoint": "0x000012b4",
            "current_name": "process_data_000012b4",
            "code": "\nundefined4 processData_000012b4(int inputValue,undefined extraParam)\n\n{\n  undefined4 result;\n  \n  result = FUN_00002364(inputValue + 4,extraParam);\n  FUN_000024bc(inputValue);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012b4": "process_data_000012b4",
                "param_1": "inputValue",
                "param_2": "extraParam",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000024bc",
                "FUN_00002364"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012e2": {
            "entrypoint": "0x000012e2",
            "current_name": "find_non_zero_return_000012e2",
            "code": "\nint findNonZeroReturn_000012e2(int inputVar,undefined4 param2,undefined4 param3)\n\n{\n  int returnValue;\n  \n  while( true ) {\n    returnValue = FUN_0000231c(inputVar + 4,param2,param3);\n    if (returnValue != 0) break;\n    FUN_0000129c(inputVar);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000012e2": "find_non_zero_return_000012e2",
                "param_1": "inputVar",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_00000e14"
            ],
            "called": [
                "FUN_0000231c",
                "FUN_0000129c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001318": {
            "entrypoint": "0x00001318",
            "current_name": "set_bit_in_memory_00001318",
            "code": "\nvoid setBitInMemory_00001318(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001318": "set_bit_in_memory_00001318",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_000014c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001348": {
            "entrypoint": "0x00001348",
            "current_name": "check_and_execute_00001348",
            "code": "\nvoid check_and_execute_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001348": "check_and_execute_00001348"
            },
            "calling": [
                "FUN_00001628"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001360": {
            "entrypoint": "0x00001360",
            "current_name": "calculate_modified_value_00001360",
            "code": "\nint calculateModifiedValue_00001360(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001360": "calculate_modified_value_00001360",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001392"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001392": {
            "entrypoint": "0x00001392",
            "current_name": "set_flag_00001392",
            "code": "\nvoid setFlag_00001392(undefined4 inputParam1,undefined inputParam2)\n\n{\n  undefined4 *resultPointer;\n  \n  resultPointer = (undefined4 *)FUN_00001360(inputParam1,inputParam2);\n  *resultPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001392": "set_flag_00001392",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "puVar1": "resultPointer"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000013b8": {
            "entrypoint": "0x000013b8",
            "current_name": "write_data_to_memory_000013b8",
            "code": "\nundefined4 writeDataToMemory_000013b8(int index,undefined4 value,undefined4 data1,undefined4 data2)\n\n{\n  undefined4 result;\n  \n  if (index != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + index * 8) = data1;\n  *(undefined4 *)(&DAT_1fff0b70 + index * 8) = data2;\n  FUN_00001448(index);\n  FUN_00001392(*(undefined4 *)(&DAT_00006ffc + index * 0x20),\n               *(undefined *)(index * 0x20 + 0x7000));\n  if ((&DAT_00007002)[index * 0x20] == '\\0') {\n    FUN_000014c4(index,value);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000013b8": "write_data_to_memory_000013b8",
                "param_1": "index",
                "param_2": "value",
                "param_3": "data1",
                "param_4": "data2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00000df4"
            ],
            "called": [
                "FUN_00000f04",
                "FUN_00001448",
                "FUN_000014c4",
                "FUN_00001392"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001448": {
            "entrypoint": "0x00001448",
            "current_name": "process_param_00001448",
            "code": "\nvoid processParam_00001448(int index)\n\n{\n  if (*(short *)(&DAT_00006fec + index * 0x20) != -1) {\n    FUN_00001f80(*(undefined2 *)(&DAT_00006fec + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff0 + index * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + index * 0x20) != -1) {\n    FUN_00001f80(*(undefined2 *)(&DAT_00006fee + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff4 + index * 0x20));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001448": "process_param_00001448",
                "param_1": "index"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000014c4": {
            "entrypoint": "0x000014c4",
            "current_name": "update_configuration_000014c4",
            "code": "\nvoid updateConfiguration_000014c4(int index,uint divider)\n\n{\n  byte *configPtr;\n  uint value1;\n  uint value2;\n  \n  configPtr = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  value1 = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  configPtr[3] = configPtr[3] & 0xf3;\n  configPtr[2] = (&DAT_00007001)[index * 0x20];\n  value2 = value1 / (divider << 4);\n  *configPtr = (byte)(value2 >> 8) & 0x1f;\n  configPtr[1] = (byte)value2;\n  configPtr[10] = (byte)((value1 << 2) / divider + 1 >> 1) & 0x1f;\n  configPtr[0x10] = configPtr[0x10] | 0x88;\n  if ((configPtr[0x10] & 0x70) == 0) {\n    configPtr[0x13] = 0;\n  }\n  else {\n    configPtr[0x13] = (char)(2 << (configPtr[0x10] >> 4 & 7)) - 1;\n  }\n  configPtr[0x15] = 1;\n  configPtr[0x11] = 0xc0;\n  configPtr[3] = configPtr[3] | 0x2c;\n  FUN_00001318((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000014c4": "update_configuration_000014c4",
                "param_1": "index",
                "param_2": "divider",
                "pbVar1": "configPtr",
                "uVar2": "value1",
                "uVar3": "value2"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000015d0": {
            "entrypoint": "0x000015d0",
            "current_name": "copy_data_to_array_000015d0",
            "code": "\nvoid copyDataToArray_000015d0(int index,int sourceStartIndex,uint sourceLength)\n\n{\n  int destinationIndex;\n  uint sourceIndex;\n  \n  destinationIndex = *(int *)(&DAT_00006fe4 + index * 0x20);\n  for (sourceIndex = 0; sourceIndex < sourceLength; sourceIndex = sourceIndex + 1) {\n    do {\n    } while (-1 < *(char *)(destinationIndex + 4));\n    *(undefined *)(destinationIndex + 7) = *(undefined *)(sourceIndex + sourceStartIndex);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000015d0": "copy_data_to_array_000015d0",
                "param_1": "index",
                "param_2": "sourceStartIndex",
                "param_3": "sourceLength",
                "iVar1": "destinationIndex",
                "local_c": "sourceIndex"
            },
            "calling": [
                "FUN_00000e38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001628": {
            "entrypoint": "0x00001628",
            "current_name": "check_and_execute_callback_00001628",
            "code": "\nvoid checkAndExecuteCallback_00001628(int index)\n\n{\n  if (((*(byte *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20) != 0) &&\n     (*(int *)(&DAT_1fff0b6c + index * 8) != 0)) {\n    (**(code **)(&DAT_1fff0b6c + index * 8))\n              (*(undefined4 *)(&DAT_1fff0b70 + index * 8),\n               *(undefined *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 7));\n  }\n  FUN_00001348();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001628": "check_and_execute_callback_00001628",
                "param_1": "index"
            },
            "calling": [
                "FUN_00001688"
            ],
            "called": [
                "FUN_00001348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001688": {
            "entrypoint": "0x00001688",
            "current_name": "initialize_device_00001688",
            "code": "\nvoid initializeDevice_00001688(void)\n\n{\n  FUN_00001628(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001688": "initialize_device_00001688"
            },
            "calling": [],
            "called": [
                "FUN_00001628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001696": {
            "entrypoint": "0x00001696",
            "current_name": "calculate_offset_00001696",
            "code": "\nint calculateOffset_00001696(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001696": "calculate_offset_00001696",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_000016ec",
                "FUN_000016c8",
                "FUN_00001710"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016c8": {
            "entrypoint": "0x000016c8",
            "current_name": "initialize_pointer_000016c8",
            "code": "\nvoid initializePointer_000016c8(undefined4 valuePointer,undefined dataValue)\n\n{\n  undefined4 *pointerToValue;\n  \n  pointerToValue = (undefined4 *)FUN_00001696(valuePointer,dataValue);\n  *pointerToValue = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016c8": "initialize_pointer_000016c8",
                "param_1": "valuePointer",
                "param_2": "dataValue",
                "puVar1": "pointerToValue"
            },
            "calling": [
                "FUN_000017dc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016ec": {
            "entrypoint": "0x000016ec",
            "current_name": "set_flag_to_true_000016ec",
            "code": "\nvoid setFlagToTrue_000016ec(undefined4 input1,undefined input2)\n\n{\n  undefined *resultPtr;\n  \n  resultPtr = (undefined *)FUN_00001696(input1,input2);\n  *resultPtr = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016ec": "set_flag_to_true_000016ec",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "resultPtr"
            },
            "calling": [
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_0000182c",
                "FUN_00001a3c",
                "FUN_00001a18"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001710": {
            "entrypoint": "0x00001710",
            "current_name": "clear_memory_00001710",
            "code": "\nvoid clearMemory_00001710(undefined4 input1,undefined input2)\n\n{\n  undefined *memoryAddress;\n  \n  memoryAddress = (undefined *)FUN_00001696(input1,input2);\n  *memoryAddress = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001710": "clear_memory_00001710",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "memoryAddress"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_0000182c",
                "FUN_00001734",
                "FUN_00001bb8",
                "FUN_00001960",
                "FUN_000018bc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001734": {
            "entrypoint": "0x00001734",
            "current_name": "initialize_memory_00001734",
            "code": "\nvoid initializeMemory_00001734(void)\n\n{\n  FUN_00001710(&DAT_40064005,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001734": "initialize_memory_00001734"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_00001a3c",
                "FUN_00001a18"
            ],
            "called": [
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001748": {
            "entrypoint": "0x00001748",
            "current_name": "update_flags_00001748",
            "code": "\nvoid updateFlags_00001748(byte newValue)\n\n{\n  DAT_40064003 = newValue | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001748": "update_flags_00001748",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c",
                "FUN_00001bb8",
                "FUN_00001960",
                "FUN_000018bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001778": {
            "entrypoint": "0x00001778",
            "current_name": "set_bit_in_data_00001778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid setBitInData_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  FUN_00001710(&DAT_40064001,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001778": "set_bit_in_data_00001778"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000017dc": {
            "entrypoint": "0x000017dc",
            "current_name": "initialize_memory_000017dc",
            "code": "\n\n\nvoid initializeMemory_000017dc(void)\n\n{\n  FUN_000016c8(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000017dc": "initialize_memory_000017dc"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000182c": {
            "entrypoint": "0x0000182c",
            "current_name": "initialize_data_0000182c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid initializeData_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  FUN_000016ec(&DAT_40064001,0);\n  FUN_00001710(&DAT_40064000,1);\n  FUN_00001710(&DAT_40064000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000182c": "initialize_data_0000182c"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000018bc": {
            "entrypoint": "0x000018bc",
            "current_name": "initialize_hardware_000018bc",
            "code": "\nvoid initializeHardware_000018bc(void)\n\n{\n  FUN_00001748(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  FUN_00001710(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000018bc": "initialize_hardware_000018bc"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000191c": {
            "entrypoint": "0x0000191c",
            "current_name": "initialize_data_0000191c",
            "code": "\nvoid initializeData_0000191c(void)\n\n{\n  FUN_00001778();\n  FUN_00001748(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000191c": "initialize_data_0000191c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001960": {
            "entrypoint": "0x00001960",
            "current_name": "initialize_hardware_00001960",
            "code": "\nvoid initializeHardware_00001960(void)\n\n{\n  FUN_00001748(0xa0);\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001960": "initialize_hardware_00001960"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000019c0": {
            "entrypoint": "0x000019c0",
            "current_name": "initialize_device_000019c0",
            "code": "\nvoid initializeDevice_000019c0(void)\n\n{\n  FUN_00001778();\n  FUN_00001748(0x40);\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  FUN_00001734();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000019c0": "initialize_device_000019c0"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748",
                "FUN_00001734",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a18": {
            "entrypoint": "0x00001a18",
            "current_name": "initialize_system_state_00001a18",
            "code": "\nvoid initializeSystemState_00001a18(void)\n\n{\n  FUN_000016ec(&DAT_40064001,1);\n  FUN_00001734();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a18": "initialize_system_state_00001a18"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "entrypoint": "0x00001a3c",
            "current_name": "initialize_data_00001a3c",
            "code": "\nvoid initialize_data_00001a3c(void)\n\n{\n  FUN_000016ec(&DAT_40064001,1);\n  FUN_00001734();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a3c": "initialize_data_00001a3c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a60": {
            "entrypoint": "0x00001a60",
            "current_name": "initialize_hardware_00001a60",
            "code": "\nvoid initializeHardware_00001a60(void)\n\n{\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  FUN_000016ec(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a60": "initialize_hardware_00001a60"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "entrypoint": "0x00001ad4",
            "current_name": "initialize_data_00001ad4",
            "code": "\nvoid initializeData_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ad4": "initialize_data_00001ad4"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001b10": {
            "entrypoint": "0x00001b10",
            "current_name": "process_data_00001b10",
            "code": "\nundefined4 process_data_00001b10(byte input_byte)\n\n{\n  undefined4 result;\n  \n  if (input_byte < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)input_byte + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        FUN_000018bc();\n        break;\n      case 1:\n        FUN_0000191c();\n        break;\n      case 2:\n        FUN_00001960();\n        break;\n      case 3:\n        FUN_000019c0();\n        break;\n      case 4:\n        FUN_00001a18();\n        break;\n      case 5:\n        FUN_00001a3c();\n        break;\n      case 6:\n        FUN_00001a60();\n        break;\n      case 7:\n        FUN_00001ad4();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (input_byte != DAT_1fff0b74);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00001b10": "process_data_00001b10",
                "param_1": "input_byte",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001ad4",
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_0000191c",
                "FUN_00001a3c",
                "FUN_00001960",
                "FUN_00001a18",
                "FUN_000018bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "entrypoint": "0x00001bb8",
            "current_name": "process_data_00001bb8",
            "code": "\nvoid processData_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    FUN_00001710(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    FUN_00001710(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  FUN_00001748(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001bb8": "process_data_00001bb8"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001c84": {
            "entrypoint": "0x00001c84",
            "current_name": "initialize_system_00001c84",
            "code": "\n\n\nvoid initializeSystem_00001c84(void)\n\n{\n  undefined4 result;\n  \n  result = FUN_00000cd0();\n  FUN_00001bb8();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  FUN_0000182c();\n  FUN_000017dc();\n  FUN_00001b10(7);\n  FUN_00000d0c(result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_000017dc",
                "FUN_00000d0c",
                "FUN_0000182c",
                "FUN_00001bb8",
                "FUN_00001b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "entrypoint": "0x00001cf0",
            "current_name": "check_data_and_call_function_00001cf0",
            "code": "\nvoid checkDataAndCallFunction_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001cf0": "check_data_and_call_function_00001cf0"
            },
            "calling": [
                "FUN_00002028"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d08": {
            "entrypoint": "0x00001d08",
            "current_name": "calculate_offset_00001d08",
            "code": "\nint calculate_offset_00001d08(uint input,int multiplier)\n\n{\n  return multiplier * 4 + (input & 0xf0000000 | (input & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001d08": "calculate_offset_00001d08",
                "param_1": "input",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001d3a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "entrypoint": "0x00001d3a",
            "current_name": "set_flag_00001d3a",
            "code": "\nvoid setFlag_00001d3a(undefined4 flagPointer,undefined undefinedValue)\n\n{\n  undefined4 *flagPtr;\n  \n  flagPtr = (undefined4 *)FUN_00001d08(flagPointer,undefinedValue);\n  *flagPtr = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001d3a": "set_flag_00001d3a",
                "param_1": "flagPointer",
                "param_2": "undefinedValue",
                "puVar1": "flagPtr"
            },
            "calling": [
                "FUN_00001ddc"
            ],
            "called": [
                "FUN_00001d08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "entrypoint": "0x00001d5e",
            "current_name": "apply_mask_and_set_default_value_00001d5e",
            "code": "\nuint applyMaskAndSetDefaultValue_00001d5e(ushort inputValue)\n\n{\n  return inputValue & 0x7000 | 0x40048000;\n}\n\n",
            "renaming": {
                "FUN_00001d5e": "apply_mask_and_set_default_value_00001d5e",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001eea"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d80": {
            "entrypoint": "0x00001d80",
            "current_name": "mask_and_combine_00001d80",
            "code": "\nuint maskAndCombine_00001d80(ushort input)\n\n{\n  return input & 0x1c0 | 0x400ff000;\n}\n\n",
            "renaming": {
                "FUN_00001d80": "mask_and_combine_00001d80",
                "param_1": "input"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001da2": {
            "entrypoint": "0x00001da2",
            "current_name": "extract_bits_from_param_00001da2",
            "code": "\nushort extractBitsFromParam_00001da2(ushort inputValue)\n\n{\n  return inputValue >> 6 & 7;\n}\n\n",
            "renaming": {
                "FUN_00001da2": "extract_bits_from_param_00001da2",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "entrypoint": "0x00001dc0",
            "current_name": "clip_to_six_bits_00001dc0",
            "code": "\nushort clipToSixBits_00001dc0(ushort inputValue)\n\n{\n  return inputValue & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_00001dc0": "clip_to_six_bits_00001dc0",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "entrypoint": "0x00001ddc",
            "current_name": "update_data_00001ddc",
            "code": "\nvoid updateData_00001ddc(undefined2 data)\n\n{\n  char newData;\n  \n  newData = FUN_00001da2(data);\n  FUN_00001d3a(&DAT_40048038,newData + '\\t');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ddc": "update_data_00001ddc",
                "param_1": "data",
                "cVar1": "newData"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001d3a",
                "FUN_00001da2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "entrypoint": "0x00001e0c",
            "current_name": "extract_bits_00001e0c",
            "code": "\nuint extractBits_00001e0c(int offset,uint data)\n\n{\n  return *(uint *)(&DAT_1fff0bd8 + (((int)data >> 3) + offset * 4) * 4) >> ((data & 7) << 2)\n         & 0xf;\n}\n\n",
            "renaming": {
                "FUN_00001e0c": "extract_bits_00001e0c",
                "param_1": "offset",
                "param_2": "data"
            },
            "calling": [
                "FUN_00002028",
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e44": {
            "entrypoint": "0x00001e44",
            "current_name": "update_bitmask_00001e44",
            "code": "\nvoid updateBitmask_00001e44(int offset,uint position,int value)\n\n{\n  int shift;\n  \n  shift = (int)position >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (shift + offset * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shift + offset * 4) * 4) & ~(0xf << ((position & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (shift + offset * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shift + offset * 4) * 4) | value << ((position & 7) << 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001e44": "update_bitmask_00001e44",
                "param_1": "offset",
                "param_2": "position",
                "param_3": "value",
                "iVar1": "shift"
            },
            "calling": [
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "entrypoint": "0x00001ec4",
            "current_name": "process_data_00001ec4",
            "code": "\nvoid processData_00001ec4(undefined4 input1,undefined4 input2)\n\n{\n  undefined4 result;\n  \n  result = FUN_00001e0c(input1,input2);\n  FUN_00001e44(input1,input2,result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ec4": "process_data_00001ec4",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001e44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001eea": {
            "entrypoint": "0x00001eea",
            "current_name": "set_flag_and_store_byte_00001eea",
            "code": "\nundefined4 setFlagAndStoreByte_00001eea(undefined2 input,byte byteValue)\n\n{\n  uint bitPosition;\n  int ptrData;\n  int index;\n  \n  FUN_00001f80(input,0);\n  if ((char)byteValue < '\\0') {\n    bitPosition = FUN_00001dc0(input);\n    ptrData = FUN_00001d80(input);\n    *(uint *)(ptrData + 0x14) = *(uint *)(ptrData + 0x14) | 1 << (bitPosition & 0xff);\n  }\n  else {\n    bitPosition = FUN_00001dc0(input);\n    ptrData = FUN_00001d80(input);\n    *(uint *)(ptrData + 0x14) = *(uint *)(ptrData + 0x14) & ~(1 << (bitPosition & 0xff));\n  }\n  ptrData = FUN_00001d5e(input);\n  index = FUN_00001dc0(input);\n  *(uint *)(ptrData + index * 4) = byteValue & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00001eea": "set_flag_and_store_byte_00001eea",
                "param_1": "input",
                "param_2": "byteValue",
                "uVar1": "bitPosition",
                "iVar2": "ptrData",
                "iVar3": "index"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001f80",
                "FUN_00001d80",
                "FUN_00001d5e",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001f80": {
            "entrypoint": "0x00001f80",
            "current_name": "update_variable_00001f80",
            "code": "\nvoid updateVariable_00001f80(undefined2 inputParam,undefined4 newData)\n\n{\n  int var1;\n  int var2;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  uint dataValue;\n  \n  FUN_00001ddc(inputParam);\n  var1 = FUN_00001d5e(inputParam);\n  var2 = FUN_00001dc0(inputParam);\n  dataValue = *(uint *)(var1 + var2 * 4);\n  var1 = FUN_00001d5e(inputParam);\n  var2 = FUN_00001dc0(inputParam);\n  *(undefined4 *)(var1 + var2 * 4) = newData;\n  if ((dataValue & 0xf0000) != 0) {\n    tempVar1 = FUN_00001da2(inputParam);\n    tempVar2 = FUN_00001dc0(inputParam);\n    FUN_00001ec4(tempVar1,tempVar2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001f80": "update_variable_00001f80",
                "param_1": "inputParam",
                "param_2": "newData",
                "iVar1": "var1",
                "iVar2": "var2",
                "uVar3": "tempVar1",
                "uVar4": "tempVar2",
                "uVar5": "dataValue"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001448"
            ],
            "called": [
                "FUN_00001ddc",
                "FUN_00001d5e",
                "FUN_00001ec4",
                "FUN_00001da2",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "entrypoint": "0x00001ff6",
            "current_name": "set_bit_at_index_00001ff6",
            "code": "\nvoid setBitAtIndex_00001ff6(undefined2 input)\n\n{\n  uint result1;\n  int result2;\n  \n  result1 = FUN_00001dc0(input);\n  result2 = FUN_00001d80(input);\n  *(int *)(result2 + 4) = 1 << (result1 & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ff6": "set_bit_at_index_00001ff6",
                "param_1": "input",
                "uVar1": "result1",
                "iVar2": "result2"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002028": {
            "entrypoint": "0x00002028",
            "current_name": "check_and_execute_functions_00002028",
            "code": "\nvoid checkAndExecuteFunctions_00002028(int functionData,undefined4 additionalData)\n\n{\n  int functionIndex;\n  uint bitmask;\n  uint bitNumber;\n  \n  bitmask = *(uint *)(functionData + 0xa0);\n  for (bitNumber = 0; (int)bitNumber < 0x20; bitNumber = bitNumber + 1) {\n    if (((bitmask & 1 << (bitNumber & 0xff)) != 0) &&\n       ((*(uint *)(functionData + bitNumber * 4) & 0xf0000) != 0)) {\n      *(int *)(functionData + 0xa0) = 1 << (bitNumber & 0xff);\n      functionIndex = FUN_00001e0c(additionalData,bitNumber);\n      (**(code **)(&DAT_1fff0b78 + functionIndex * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + functionIndex * 0xc));\n    }\n  }\n  FUN_00001cf0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002028": "check_and_execute_functions_00002028",
                "param_1": "functionData",
                "param_2": "additionalData",
                "iVar1": "functionIndex",
                "uVar2": "bitmask",
                "local_c": "bitNumber"
            },
            "calling": [
                "FUN_000020e0",
                "FUN_00002108",
                "FUN_000020cc",
                "FUN_000020f4",
                "FUN_000020b8"
            ],
            "called": [
                "FUN_00001cf0",
                "FUN_00001e0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020b8": {
            "entrypoint": "0x000020b8",
            "current_name": "initialize_memory_000020b8",
            "code": "\nvoid initializeMemory_000020b8(void)\n\n{\n  FUN_00002028(0x40049000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020b8": "initialize_memory_000020b8"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020cc": {
            "entrypoint": "0x000020cc",
            "current_name": "initialize_memory_000020cc",
            "code": "\nvoid initializeMemory_000020cc(void)\n\n{\n  FUN_00002028(0x4004a000,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020cc": "initialize_memory_000020cc"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020e0": {
            "entrypoint": "0x000020e0",
            "current_name": "initialize_memory_000020e0",
            "code": "\nvoid initializeMemory_000020e0(void)\n\n{\n  FUN_00002028(0x4004b000,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020e0": "initialize_memory_000020e0"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020f4": {
            "entrypoint": "0x000020f4",
            "current_name": "initialize_hardware_000020f4",
            "code": "\nvoid initializeHardware_000020f4(void)\n\n{\n  FUN_00002028(0x4004c000,3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020f4": "initialize_hardware_000020f4"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002108": {
            "entrypoint": "0x00002108",
            "current_name": "initialize_memory_00002108",
            "code": "\nvoid initializeMemory_00002108(void)\n\n{\n  FUN_00002028(0x4004d000,4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002108": "initialize_memory_00002108"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000211c": {
            "entrypoint": "0x0000211c",
            "current_name": "print_process_info_0000211c",
            "code": "\nvoid printProcessInfo_0000211c(void)\n\n{\n  int currentOffset;\n  undefined2 formatString;\n  int stackSize;\n  int stackOffset;\n  dword baseAddress;\n  uint index;\n  undefined4 *symbol;\n  undefined4 currentStack;\n  undefined4 baseStack;\n  int totalStack;\n  short iteration;\n  int totalMemory;\n  int totalUsedMemory;\n  \n  formatString = 0x515f;\n  totalUsedMemory = 0;\n  totalMemory = 0;\n  FUN_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  totalStack = FUN_000008b8();\n  baseStack = FUN_0000091c();\n  currentStack = FUN_00000900();\n  FUN_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               totalStack,baseStack,currentStack);\n  totalUsedMemory = totalUsedMemory + 0x200;\n  if (0 < totalStack) {\n    totalMemory = totalStack + totalMemory;\n  }\n  for (iteration = 1; iteration < 0x21; iteration = iteration + 1) {\n    symbol = *(undefined4 **)(&DAT_1fff0358 + iteration * 4);\n    if (symbol != (undefined4 *)0x0) {\n      index = (uint)*(byte *)(symbol + 1);\n      baseAddress = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[index];\n      stackOffset = (int)&formatString + (uint)(8 < index);\n      stackSize = symbol[0xb];\n      totalUsedMemory = stackSize + totalUsedMemory;\n      currentOffset = FUN_000010a0(symbol[9]);\n      stackSize = stackSize - currentOffset;\n      totalMemory = stackSize + totalMemory;\n      FUN_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)symbol + 6),symbol[10],baseAddress,stackOffset,\n                   *(undefined *)((int)symbol + 5),symbol[0xb],stackSize,symbol[9],*symbol);\n    }\n  }\n  FUN_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,totalUsedMemory,totalMemory);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000211c": "print_process_info_0000211c",
                "iVar1": "currentOffset",
                "local_40": "formatString",
                "local_3c": "stackSize",
                "local_38": "stackOffset",
                "local_34": "baseAddress",
                "local_30": "index",
                "local_2c": "symbol",
                "local_28": "currentStack",
                "local_24": "baseStack",
                "local_20": "totalStack",
                "local_1a": "iteration",
                "local_18": "totalMemory",
                "local_14": "totalUsedMemory"
            },
            "calling": [
                "FUN_00000f04",
                "FUN_00002eb4"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_0000091c",
                "FUN_000010a0",
                "FUN_00000900",
                "FUN_000008b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002270": {
            "entrypoint": "0x00002270",
            "current_name": "check_equality_00002270",
            "code": "\nundefined checkEquality_00002270(int inputValue)\n\n{\n  undefined result;\n  int ptrValue;\n  bool isEqual;\n  \n  ptrValue = *(int *)(inputValue + 0xc);\n  isEqual = *(int *)(inputValue + 8) == ptrValue;\n  if (isEqual) {\n    ptrValue = 1;\n  }\n  result = (undefined)ptrValue;\n  if (!isEqual) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002270": "check_equality_00002270",
                "param_1": "inputValue",
                "uVar1": "result",
                "iVar2": "ptrValue",
                "bVar3": "isEqual"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002294": {
            "entrypoint": "0x00002294",
            "current_name": "check_difference_00002294",
            "code": "\nundefined checkDifference_00002294(int input)\n\n{\n  undefined result;\n  int difference;\n  bool isDifferenceEqual;\n  \n  difference = *(int *)(input + 4);\n  isDifferenceEqual = *(int *)(input + 0xc) - *(int *)(input + 8) == difference;\n  if (isDifferenceEqual) {\n    difference = 1;\n  }\n  result = (undefined)difference;\n  if (!isDifferenceEqual) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002294": "check_difference_00002294",
                "param_1": "input",
                "iVar2": "difference",
                "bVar3": "isDifferenceEqual",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022be": {
            "entrypoint": "0x000022be",
            "current_name": "increment_and_store_value_000022be",
            "code": "\nvoid incrementAndStoreValue_000022be(int *array,undefined value)\n\n{\n  uint previousCounter;\n  \n  previousCounter = array[3];\n  array[3] = previousCounter + 1;\n  *(undefined *)((previousCounter & array[1] - 1U) + *array) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000022be": "increment_and_store_value_000022be",
                "param_1": "array",
                "param_2": "value",
                "uVar1": "previousCounter"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022f0": {
            "entrypoint": "0x000022f0",
            "current_name": "access_memory_000022f0",
            "code": "\nundefined accessMemory_000022f0(int *memory)\n\n{\n  uint value;\n  \n  value = memory[2];\n  memory[2] = value + 1;\n  return *(undefined *)((value & memory[1] - 1U) + *memory);\n}\n\n",
            "renaming": {
                "FUN_000022f0": "access_memory_000022f0",
                "param_1": "memory",
                "uVar1": "value"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000231c": {
            "entrypoint": "0x0000231c",
            "current_name": "copy_and_decrement_0000231c",
            "code": "\nint copyAndDecrement_0000231c(undefined4 input,undefined *destination,int size)\n\n{\n  undefined temp;\n  int successFlag;\n  undefined *destPtr;\n  int remainingSize;\n  \n  destPtr = destination;\n  remainingSize = size;\n  while ((remainingSize != 0 && (successFlag = FUN_00002270(input), successFlag == 0))) {\n    temp = FUN_000022f0(input);\n    *destPtr = temp;\n    remainingSize = remainingSize + -1;\n    destPtr = destPtr + 1;\n  }\n  return size - remainingSize;\n}\n\n",
            "renaming": {
                "FUN_0000231c": "copy_and_decrement_0000231c",
                "param_1": "input",
                "param_2": "destination",
                "param_3": "size",
                "uVar1": "temp",
                "iVar2": "successFlag",
                "local_20": "destPtr",
                "local_14": "remainingSize"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002270",
                "FUN_000022f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002364": {
            "entrypoint": "0x00002364",
            "current_name": "check_function_result_00002364",
            "code": "\nundefined4 check_function_result_00002364(undefined4 input_param,undefined output_param)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  result = FUN_00002294(input_param);\n  if (result == 0) {\n    FUN_000022be(input_param,output_param);\n    return_value = 0;\n  }\n  else {\n    return_value = 0xffffffff;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00002364": "check_function_result_00002364",
                "param_1": "input_param",
                "param_2": "output_param",
                "iVar1": "result",
                "uVar2": "return_value"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00002294",
                "FUN_000022be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002396": {
            "entrypoint": "0x00002396",
            "current_name": "initialize_system_00002396",
            "code": "\nvoid initialize_system_00002396(void)\n\n{\n  FUN_000025f4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002396": "initialize_system_00002396"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_000025f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023a4": {
            "entrypoint": "0x000023a4",
            "current_name": "initialize_000023a4",
            "code": "\nundefined4 initialize_000023a4(void)\n\n{\n  undefined4 uVar1;\n  undefined buffer [128];\n  \n  FUN_000023d0(0);\n  FUN_00004db8(\"Welcome to RIOT!\");\n  uVar1 = FUN_00002e6c(0,buffer,0x80);\n  executeInterrupt(0x3f);\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_000023a4": "initialize_000023a4",
                "auStack_88": "buffer",
                "software_interrupt": "executeInterrupt"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_000023d0",
                "FUN_00002e6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023c8": {
            "entrypoint": "0x000023c8",
            "current_name": "invoke_software_interrupt_000023c8",
            "code": "\nvoid invokeSoftwareInterrupt_000023c8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000023c8": "invoke_software_interrupt_000023c8"
            },
            "calling": [
                "FUN_000023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023d0": {
            "entrypoint": "0x000023d0",
            "current_name": "check_first_time_execution_000023d0",
            "code": "\nundefined4 checkFirstTimeExecution_000023d0(undefined4 inputValue)\n\n{\n  undefined4 returnValue;\n  \n  if (DAT_1fff0d98 == 0) {\n    returnValue = FUN_000023c8(1,inputValue,0);\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000023d0": "check_first_time_execution_000023d0",
                "param_1": "inputValue",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000023c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002400": {
            "entrypoint": "0x00002400",
            "current_name": "FUNC_00002400",
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000240c": {
            "entrypoint": "0x0000240c",
            "current_name": "extract_data_0000240c",
            "code": "\nundefined4 * extractData_0000240c(undefined4 *dataPointer)\n\n{\n  undefined4 *extractedData;\n  \n  extractedData = (undefined4 *)*dataPointer;\n  if (extractedData != (undefined4 *)0x0) {\n    *dataPointer = *extractedData;\n  }\n  return extractedData;\n}\n\n",
            "renaming": {
                "FUN_0000240c": "extract_data_0000240c",
                "param_1": "dataPointer",
                "puVar1": "extractedData"
            },
            "calling": [
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002434": {
            "entrypoint": "0x00002434",
            "current_name": "update_value_00002434",
            "code": "\nundefined4 updateValue_00002434(int *valuePtr,int condition)\n\n{\n  int tempVar;\n  undefined4 returnValue;\n  \n  returnValue = FUN_00000cd0();\n  tempVar = DAT_1fff03dc;\n  if (*valuePtr == 0) {\n    *valuePtr = -1;\n    FUN_00000d0c(returnValue);\n    returnValue = 1;\n  }\n  else if (condition == 0) {\n    FUN_00000d0c(returnValue);\n    returnValue = 0;\n  }\n  else {\n    FUN_00000698(DAT_1fff03dc,2);\n    if (*valuePtr == -1) {\n      *valuePtr = tempVar + 8;\n      *(undefined4 *)*valuePtr = 0;\n    }\n    else {\n      FUN_00001034(valuePtr,tempVar);\n    }\n    FUN_00000d0c(returnValue);\n    FUN_0000093c();\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00002434": "update_value_00002434",
                "param_1": "valuePtr",
                "param_2": "condition",
                "iVar1": "tempVar",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_0000129c"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_00001034",
                "FUN_0000093c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000024bc": {
            "entrypoint": "0x000024bc",
            "current_name": "process_param_000024bc",
            "code": "\nvoid processParam_000024bc(int *param)\n\n{\n  undefined temp1;\n  undefined4 temp2;\n  int temp3;\n  \n  temp2 = FUN_00000cd0();\n  if (*param == 0) {\n    FUN_00000d0c(temp2);\n  }\n  else if (*param == -1) {\n    *param = 0;\n    FUN_00000d0c(temp2);\n  }\n  else {\n    temp3 = FUN_0000240c(param);\n    FUN_00000698(temp3 + -8,10);\n    if (*param == 0) {\n      *param = -1;\n    }\n    temp1 = *(undefined *)(temp3 + -3);\n    FUN_00000d0c(temp2);\n    FUN_00000738(temp1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000024bc": "process_param_000024bc",
                "param_1": "param",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "temp3"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000698",
                "FUN_0000240c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002538": {
            "entrypoint": "0x00002538",
            "current_name": "update_memory_00002538",
            "code": "\nvoid updateMemory_00002538(byte byteValue,uint uintValue)\n\n{\n  if ((char)byteValue < '\\0') {\n    (&DAT_e000ed14)[byteValue & 0xf] = (char)((uintValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)byteValue + -0x1fff1c00) = (char)((uintValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002538": "update_memory_00002538",
                "param_1": "byteValue",
                "param_2": "uintValue"
            },
            "calling": [
                "FUN_0000258c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000258c": {
            "entrypoint": "0x0000258c",
            "current_name": "initialize_hardware_0000258c",
            "code": "\n\n\nvoid initializeHardware_0000258c(void)\n\n{\n  uint counter;\n  \n  _DAT_e000ed08 = 0;\n  FUN_00002538(0xfffffffe,1);\n  FUN_00002538(0xfffffffb,1);\n  for (counter = 0; counter < 0x66; counter = counter + 1) {\n    FUN_00002538((int)(char)counter,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000258c": "initialize_hardware_0000258c",
                "local_c": "counter"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000025f4": {
            "entrypoint": "0x000025f4",
            "current_name": "initialize_system_000025f4",
            "code": "\nvoid initialize_system_000025f4(void)\n\n{\n  FUN_000027b0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000025f4": "initialize_system_000025f4"
            },
            "calling": [
                "FUN_00002396"
            ],
            "called": [
                "FUN_000027b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002600": {
            "entrypoint": "0x00002600",
            "current_name": "initialize_system_00002600",
            "code": "\nundefined4 initializeSystem_00002600(undefined4 inputParam)\n\n{\n  undefined4 outputVar;\n  \n  outputVar = FUN_000047e4(inputParam);\n  FUN_0000285c(outputVar);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002600": "initialize_system_00002600",
                "param_1": "inputParam",
                "uVar1": "outputVar"
            },
            "calling": [
                "FUN_00003478"
            ],
            "called": [
                "FUN_000047e4",
                "FUN_0000285c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002624": {
            "entrypoint": "0x00002624",
            "current_name": "initialize_function_00002624",
            "code": "\nundefined4 initializeFunction_00002624(undefined4 inputParam)\n\n{\n  undefined4 initializedVar;\n  undefined4 stackVar;\n  \n  initializedVar = FUN_0000281c();\n  stackVar = 0;\n  FUN_0000443c(&initializedVar,inputParam);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002624": "initialize_function_00002624",
                "param_1": "inputParam",
                "local_10": "initializedVar",
                "uStack_c": "stackVar"
            },
            "calling": [
                "FUN_00003444"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002654": {
            "entrypoint": "0x00002654",
            "current_name": "initialize_data_00002654",
            "code": "\nundefined4 initializeData_00002654(undefined4 data,undefined4 value,undefined4 size)\n\n{\n  undefined4 result;\n  \n  result = FUN_000047e4(data);\n  DAT_1fff0d9c = value;\n  FUN_00002894(result,0x26f1,size);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002654": "initialize_data_00002654",
                "param_1": "data",
                "param_2": "value",
                "param_3": "size",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000033f4"
            ],
            "called": [
                "FUN_00002894",
                "FUN_000047e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002690": {
            "entrypoint": "0x00002690",
            "current_name": "initialize_data_00002690",
            "code": "\nundefined4 initializeData_00002690(undefined4 inputData)\n\n{\n  undefined4 result;\n  undefined4 stackVariable;\n  \n  result = FUN_000028f0();\n  stackVariable = 0;\n  FUN_0000443c(&result,inputData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002690": "initialize_data_00002690",
                "param_1": "inputData",
                "local_10": "result",
                "uStack_c": "stackVariable"
            },
            "calling": [
                "FUN_000033c0"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_000028f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026c0": {
            "entrypoint": "0x000026c0",
            "current_name": "initialize_function_000026c0",
            "code": "\nvoid initializeFunction_000026c0(void)\n\n{\n  FUN_00002910();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026c0": "initialize_function_000026c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002910"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026d8": {
            "entrypoint": "0x000026d8",
            "current_name": "initialize_system_000026d8",
            "code": "\nvoid initializeSystem_000026d8(void)\n\n{\n  FUN_0000294c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026d8": "initialize_system_000026d8"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026e4": {
            "entrypoint": "0x000026e4",
            "current_name": "initialize_system_000026e4",
            "code": "\nvoid initializeSystem_000026e4(void)\n\n{\n  FUN_00002970();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026e4": "initialize_system_000026e4"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026f0": {
            "entrypoint": "0x000026f0",
            "current_name": "execute_function_if_non_null_000026f0",
            "code": "\nvoid executeFunctionIfNonNull_000026f0(undefined4 argument)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(argument);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026f0": "execute_function_if_non_null_000026f0",
                "param_1": "argument"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002714": {
            "entrypoint": "0x00002714",
            "current_name": "set_bit_at_index_00002714",
            "code": "\nvoid setBitAtIndex_00002714(byte byteValue)\n\n{\n  *(int *)(((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002714": "set_bit_at_index_00002714",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002744": {
            "entrypoint": "0x00002744",
            "current_name": "FUNC_00002744",
            "code": "\nvoid FUNC_00002744(byte param_1,uint param_2)\n\n{\n  if ((char)param_1 < '\\0') {\n    (&DAT_e000ed14)[param_1 & 0xf] = (char)((param_2 & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)param_1 + -0x1fff1c00) = (char)((param_2 & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002744": "FUNC_00002744"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00002798": {
            "entrypoint": "0x00002798",
            "current_name": "check_and_call_function_if_data_exists_00002798",
            "code": "\nvoid checkAndCallFunctionIfDataExists_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002798": "check_and_call_function_if_data_exists_00002798"
            },
            "calling": [
                "FUN_00002994"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000027b0": {
            "entrypoint": "0x000027b0",
            "current_name": "initialize_peripheral_000027b0",
            "code": "\n\n\nvoid initializePeripheral_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  FUN_0000294c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000027b0": "initialize_peripheral_000027b0"
            },
            "calling": [
                "FUN_000025f4"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000281c": {
            "entrypoint": "0x0000281c",
            "current_name": "get_data_address_0000281c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nundefined4 get_data_address_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "renaming": {
                "FUN_0000281c": "get_data_address_0000281c"
            },
            "calling": [
                "FUN_00002624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000285c": {
            "entrypoint": "0x0000285c",
            "current_name": "set_dat_and_reserve_bit_0000285c",
            "code": "\n\n\nvoid setDatAndReserveBit_0000285c(undefined4 newValue)\n\n{\n  _DAT_4003d000 = newValue;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000285c": "set_dat_and_reserve_bit_0000285c",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_00002600"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002894": {
            "entrypoint": "0x00002894",
            "current_name": "initialize_data_00002894",
            "code": "\n\n\nvoid initializeData_00002894(int dataSize,undefined4 parameterA,undefined4 parameterB)\n\n{\n  _DAT_4003d008 = dataSize + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = parameterA;\n  DAT_1fff0da4 = parameterB;\n  FUNC_00002744(0x2e,10);\n  FUN_00002714(0x2e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002894": "initialize_data_00002894",
                "param_1": "dataSize",
                "param_2": "parameterA",
                "param_3": "parameterB"
            },
            "calling": [
                "FUN_00002654"
            ],
            "called": [
                "FUN_00002714",
                "FUN_00002744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000028f0": {
            "entrypoint": "0x000028f0",
            "current_name": "increment_data_value_000028f0",
            "code": "\n\n\nint incrementDataValue_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "renaming": {
                "FUN_000028f0": "increment_data_value_000028f0"
            },
            "calling": [
                "FUN_00002690"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002910": {
            "entrypoint": "0x00002910",
            "current_name": "clear_data_00002910",
            "code": "\n\n\nvoid clearData_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002910": "clear_data_00002910"
            },
            "calling": [
                "FUN_000026c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000294c": {
            "entrypoint": "0x0000294c",
            "current_name": "set_flag_0000294c",
            "code": "\n\n\nvoid setFlag_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000294c": "set_flag_0000294c"
            },
            "calling": [
                "FUN_000027b0",
                "FUN_000026d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002970": {
            "entrypoint": "0x00002970",
            "current_name": "clear_interrupt_flag_00002970",
            "code": "\n\n\nvoid clearInterruptFlag_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002970": "clear_interrupt_flag_00002970"
            },
            "calling": [
                "FUN_000026e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002994": {
            "entrypoint": "0x00002994",
            "current_name": "check_and_execute_callbacks_00002994",
            "code": "\n\n\nvoid checkAndExecuteCallbacks_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (code *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (code *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  FUN_00002798();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002994": "check_and_execute_callbacks_00002994"
            },
            "calling": [],
            "called": [
                "FUN_00002798"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a00": {
            "entrypoint": "0x00002a00",
            "current_name": "initialize_function_00002a00",
            "code": "\nvoid initializeFunction_00002a00(undefined4 data)\n\n{\n  FUN_00004cb4(data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a00": "initialize_function_00002a00",
                "param_1": "data"
            },
            "calling": [
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "called": [
                "FUN_00004cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a18": {
            "entrypoint": "0x00002a18",
            "current_name": "find_reboot_option_00002a18",
            "code": "\nint find_reboot_option_00002a18(int *options,undefined4 reboot_type)\n\n{\n  int result;\n  int *current_option;\n  undefined **reboot_strings;\n  uint option_index;\n  int *current_reboot_string;\n  \n  current_option = options;\n  reboot_strings = &PTR_s_reboot_00007300;\n  option_index = 0;\n  do {\n    if (1 < option_index) {\n      return 0;\n    }\n    current_reboot_string = (&current_option)[option_index];\n    if (current_reboot_string != (int *)0x0) {\n      for (; *current_reboot_string != 0; current_reboot_string = current_reboot_string + 3) {\n        result = FUN_00004e52(*current_reboot_string,reboot_type);\n        if (result == 0) {\n          return current_reboot_string[2];\n        }\n      }\n    }\n    option_index = option_index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002a18": "find_reboot_option_00002a18",
                "param_1": "options",
                "param_2": "reboot_type",
                "iVar1": "result",
                "local_18": "current_option",
                "local_14": "reboot_strings",
                "local_10": "option_index",
                "local_c": "current_reboot_string"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a88": {
            "entrypoint": "0x00002a88",
            "current_name": "print_command_descriptions_00002a88",
            "code": "\nvoid printCommandDescriptions_00002a88(int *commandList)\n\n{\n  int *currentCommand;\n  undefined **commandPtr;\n  uint index;\n  int *currentParam;\n  \n  FUN_00004c84(\"%-20s %s\\n\",\"Command\",\"Description\");\n  FUN_00004db8(\"---------------------------------------\");\n  currentCommand = commandList;\n  commandPtr = &PTR_s_reboot_00007300;\n  for (index = 0; index < 2; index = index + 1) {\n    currentParam = (&currentCommand)[index];\n    if (currentParam != (int *)0x0) {\n      for (; *currentParam != 0; currentParam = currentParam + 3) {\n        FUN_00004c84(\"%-20s %s\\n\",*currentParam,currentParam[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a88": "print_command_descriptions_00002a88",
                "param_1": "commandList",
                "local_18": "currentCommand",
                "local_14": "commandPtr",
                "local_10": "index",
                "local_c": "currentParam"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002b10": {
            "entrypoint": "0x00002b10",
            "current_name": "process_strings_00002b10",
            "code": "\nvoid processStrings_00002b10(undefined4 param,byte *strings)\n\n{\n  int iVar1;\n  byte *pbVar2;\n  byte *stringPointers [3];\n  code *functionPointer;\n  char **commandArgs;\n  uint numArgs;\n  byte quoteChar;\n  char *currentChar;\n  char *currentArg;\n  char **argPointers;\n  uint argIndex;\n  int numEscapes;\n  uint numQuotes;\n  byte *currentString;\n  \n  numQuotes = 0;\n  numEscapes = 0;\n  currentString = strings;\n  while( true ) {\n    stringPointers[0] = strings;\n    stringPointers[1] = (byte *)param;\n    if (0x20 < *currentString) {\n      if ((*currentString == 0x22) || (*currentString == 0x27)) {\n        quoteChar = *currentString;\n        do {\n          pbVar2 = currentString + 1;\n          if (*pbVar2 == 0) {\n            currentString = pbVar2;\n            FUN_00004db8(unknownArray[9].r_info);\n            return;\n          }\n          if (*pbVar2 == 0x5c) {\n            numEscapes = numEscapes + 1;\n            currentString = currentString + 2;\n            pbVar2 = currentString;\n            if (*currentString == 0) {\n              FUN_00004db8(unknownArray[9].r_info);\n              return;\n            }\n          }\n          currentString = pbVar2;\n        } while (quoteChar != *currentString);\n        if (0x20 < currentString[1]) {\n          FUN_00004db8(unknownArray[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*currentString == 0x5c) {\n            numEscapes = numEscapes + 1;\n            currentString = currentString + 1;\n            if (*currentString == 0) {\n              FUN_00004db8(unknownArray[9].r_info);\n              return;\n            }\n          }\n          currentString = currentString + 1;\n          if (*currentString == 0x22) {\n            FUN_00004db8(unknownArray[9].r_info);\n            return;\n          }\n        } while (0x20 < *currentString);\n      }\n      numQuotes = numQuotes + 1;\n    }\n    if (*currentString == 0) break;\n    *currentString = 0;\n    currentString = currentString + 1;\n  }\n  if (numQuotes != 0) {\n    numArgs = numQuotes;\n    commandArgs = (char **)((int)stringPointers - ((numQuotes + 1) * 4 + 7 & 0xfffffff8));\n    commandArgs[numQuotes] = (char *)0x0;\n    currentString = strings;\n    for (argIndex = 0; argPointers = commandArgs, argIndex < numQuotes; argIndex = argIndex + 1) {\n      for (; *currentString == 0; currentString = currentString + 1) {\n      }\n      if ((*currentString == 0x22) || (*currentString == 0x27)) {\n        currentString = currentString + 1;\n      }\n      commandArgs[argIndex] = (char *)currentString;\n      for (; *currentString != 0; currentString = currentString + 1) {\n      }\n    }\n    for (; (numEscapes != 0 && (*argPointers != (char *)0x0)); argPointers = argPointers + 1) {\n      for (currentArg = *argPointers; *currentArg != '\\0'; currentArg = currentArg + 1) {\n        if (*currentArg == '\\') {\n          for (currentChar = currentArg; *currentChar != '\\0'; currentChar = currentChar + 1) {\n            *currentChar = currentChar[1];\n          }\n          numEscapes = numEscapes + -1;\n          if (numEscapes == 0) break;\n        }\n      }\n    }\n    functionPointer = (code *)FUN_00002a18(param,*commandArgs);\n    if (functionPointer == (code *)0x0) {\n      iVar1 = FUN_00004e52(&DAT_00007214,*commandArgs);\n      if (iVar1 == 0) {\n        FUN_00002a88(stringPointers[1]);\n      }\n      else {\n        FUN_00004c84(\"shell: command not found: %s\\n\",*commandArgs);\n      }\n    }\n    else {\n      (*functionPointer)(numQuotes,commandArgs);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002b10": "process_strings_00002b10",
                "param_1": "param",
                "param_2": "strings",
                "local_48": "stringPointers",
                "local_3c": "functionPointer",
                "local_38": "commandArgs",
                "local_34": "numArgs",
                "local_2d": "quoteChar",
                "local_2c": "currentChar",
                "local_28": "currentArg",
                "local_24": "argPointers",
                "local_20": "argIndex",
                "local_1c": "numEscapes",
                "local_18": "numQuotes",
                "local_14": "currentString",
                "Elf32_Rel_ARRAY_1fff0200": "unknownArray"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00002a88",
                "FUN_00004e52",
                "FUN_00002a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002d94": {
            "entrypoint": "0x00002d94",
            "current_name": "extract_string_from_binary_00002d94",
            "code": "\nuint extractStringFromBinary_00002d94(undefined *inputString,int maxLength)\n\n{\n  int character;\n  byte firstByte;\n  bool isFirstByte;\n  undefined *currentPointer;\n  \n  currentPointer = inputString;\n  while( true ) {\n    if (maxLength + -1 <= (int)currentPointer - (int)inputString) {\n      return 0xffffffff;\n    }\n    character = FUN_00004418();\n    if (character < 0) break;\n    if ((character == 0xd) || (character == 10)) {\n      *currentPointer = 0;\n      FUN_00002a00(0xd);\n      FUN_00002a00(10);\n      isFirstByte = currentPointer == inputString;\n      if (isFirstByte) {\n        inputString = (undefined *)0x1;\n      }\n      firstByte = (byte)inputString;\n      if (!isFirstByte) {\n        firstByte = 0;\n      }\n      return (uint)firstByte;\n    }\n    if ((character == 8) || (character == 0x7f)) {\n      if (currentPointer != inputString) {\n        currentPointer = currentPointer + -1;\n        *currentPointer = 0;\n        FUN_00002a00(8);\n        FUN_00002a00(0x20);\n        FUN_00002a00(8);\n      }\n    }\n    else {\n      *currentPointer = (char)character;\n      FUN_00002a00(character);\n      currentPointer = currentPointer + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00002d94": "extract_string_from_binary_00002d94",
                "param_1": "inputString",
                "param_2": "maxLength",
                "iVar1": "character",
                "bVar2": "firstByte",
                "bVar3": "isFirstByte",
                "local_c": "currentPointer"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004418",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e48": {
            "entrypoint": "0x00002e48",
            "current_name": "initialize_components_00002e48",
            "code": "\nvoid initializeComponents_00002e48(void)\n\n{\n  FUN_00002a00(0x3e);\n  FUN_00002a00(0x20);\n  FUN_000041d0(*(undefined4 *)(relocationTable[16].offset + 8));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002e48": "initialize_components_00002e48",
                "Elf32_Rel_ARRAY_1fff0200": "relocationTable",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00002a00",
                "FUN_000041d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "entrypoint": "0x00002e6c",
            "current_name": "process_loop_00002e6c",
            "code": "\nvoid processLoop_00002e6c(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  FUN_00002e48();\n  do {\n    result = FUN_00002d94(input2,input3);\n    if (result == 0) {\n      FUN_00002b10(input1,input2);\n    }\n    FUN_00002e48();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002e6c": "process_loop_00002e6c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_00002b10",
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "entrypoint": "0x00002e9c",
            "current_name": "execute_initialization_00002e9c",
            "code": "\nundefined4 execute_initialization_00002e9c(void)\n\n{\n  FUN_00003688();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002e9c": "execute_initialization_00002e9c"
            },
            "calling": [],
            "called": [
                "FUN_00003688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "entrypoint": "0x00002eb4",
            "current_name": "initialize_system_00002eb4",
            "code": "\nundefined4 initializeSystem_00002eb4(void)\n\n{\n  FUN_0000211c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002eb4": "initialize_system_00002eb4"
            },
            "calling": [],
            "called": [
                "FUN_0000211c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "entrypoint": "0x00002ecc",
            "current_name": "read_from_device_00002ecc",
            "code": "\nvoid readFromDevice_00002ecc(undefined4 deviceNumber,int deviceInfo)\n\n{\n  undefined4 deviceData;\n  undefined4 deviceType;\n  undefined buffer [8];\n  uint readResult;\n  \n  readResult = FUN_00003d64(deviceInfo,buffer);\n  if ((int)readResult < 1) {\n    FUN_00004c84(\"error: failed to read from device #%i\\n\",deviceNumber);\n  }\n  else {\n    deviceType = *(undefined4 *)(deviceInfo + 8);\n    deviceData = FUN_000039e8(*(undefined *)(*(int *)(deviceInfo + 0xc) + 8));\n    FUN_00004c84(\"Reading from #%i (%s|%s)\\n\",deviceNumber,deviceType,deviceData);\n    FUN_00003694(buffer,readResult & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002ecc": "read_from_device_00002ecc",
                "param_1": "deviceNumber",
                "param_2": "deviceInfo",
                "uVar1": "deviceData",
                "uVar2": "deviceType",
                "auStack_1c": "buffer",
                "local_14": "readResult"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_00003d64",
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00003694"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f30": {
            "entrypoint": "0x00002f30",
            "current_name": "process_data_00002f30",
            "code": "\nvoid processData_00002f30(void)\n\n{\n  int counter;\n  undefined4 *current_ptr;\n  \n  counter = 0;\n  for (current_ptr = DAT_1fff0db0; current_ptr != (undefined4 *)0x0; current_ptr = (undefined4 *)*current_ptr) {\n    FUN_00002ecc(counter,current_ptr);\n    FUN_00004db8(&DAT_00007380);\n    counter = counter + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f30": "process_data_00002f30",
                "local_10": "counter",
                "local_c": "current_ptr"
            },
            "calling": [
                "FUN_00002fe0"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f74": {
            "entrypoint": "0x00002f74",
            "current_name": "print_device_info_00002f74",
            "code": "\nvoid printDeviceInfo_00002f74(void)\n\n{\n  undefined4 uVar1;\n  int deviceCount;\n  undefined4 *deviceList;\n  \n  deviceList = DAT_1fff0db0;\n  deviceCount = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    FUN_00004db8(\"No devices found\");\n  }\n  else {\n    FUN_00004db8(\"ID\\tClass\\t\\tName\");\n  }\n  for (; deviceList != (undefined4 *)0x0; deviceList = (undefined4 *)*deviceList) {\n    uVar1 = FUN_000039e8(*(undefined *)(deviceList[3] + 8));\n    FUN_00004c84(\"#%i\\t%s\\t%s\\n\",deviceCount,uVar1,deviceList[2]);\n    deviceCount = deviceCount + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f74": "print_device_info_00002f74",
                "local_18": "deviceCount",
                "local_14": "deviceList"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "entrypoint": "0x00002fe0",
            "current_name": "validate_and_process_device_id_00002fe0",
            "code": "\nvoid validateAndProcessDeviceId_00002fe0(int argumentCount,undefined4 *arguments)\n\n{\n  int result;\n  undefined4 deviceID;\n  \n  if (argumentCount < 3) {\n    FUN_00004c84(\"usage: %s %s <device id>|all\\n\",*arguments,arguments[1]);\n  }\n  else {\n    result = FUN_00004e52(arguments[2],&DAT_000073d4);\n    if (result == 0) {\n      FUN_00002f30();\n    }\n    else {\n      deviceID = FUN_00004042(arguments[2]);\n      result = FUN_00003d24(deviceID);\n      if (result == 0) {\n        FUN_00004db8(\"error: undefined device id given\");\n      }\n      else {\n        FUN_00002ecc(deviceID,result);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002fe0": "validate_and_process_device_id_00002fe0",
                "param_1": "argumentCount",
                "param_2": "arguments",
                "iVar1": "result",
                "uVar2": "deviceID"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00002ecc",
                "FUN_00004042",
                "FUN_00003d24",
                "FUN_00004e52",
                "FUN_00002f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000305c": {
            "entrypoint": "0x0000305c",
            "current_name": "write_to_device_0000305c",
            "code": "\nvoid writeToDevice_0000305c(int argc,undefined4 *argv)\n\n{\n  undefined2 deviceValue;\n  undefined2 deviceValues [4];\n  uint numValues;\n  int deviceIndex;\n  undefined4 deviceID;\n  int index;\n  \n  if (argc < 4) {\n    FUN_00004c84(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*argv,argv[1]);\n  }\n  else {\n    deviceID = FUN_00004042(argv[2]);\n    deviceIndex = FUN_00003d24(deviceID);\n    if (deviceIndex == 0) {\n      FUN_00004db8(\"error: undefined device given\");\n    }\n    else {\n      FUN_00004622(deviceValues,0,8);\n      if (5 < argc) {\n        argc = 6;\n      }\n      numValues = argc - 3;\n      for (index = 0; index < (int)numValues; index = index + 1) {\n        deviceValue = FUN_00004042(argv[index + 3]);\n        deviceValues[index] = deviceValue;\n      }\n      FUN_00004c84(\"Writing to device #%i - %s\\n\",deviceID,*(undefined4 *)(deviceIndex + 8));\n      FUN_00003694(deviceValues,numValues & 0xff);\n      numValues = FUN_00003d94(deviceIndex,deviceValues);\n      if ((int)numValues < 1) {\n        if (numValues == -0x86) {\n          FUN_00004c84(\"error: device #%i is not writable\\n\",deviceID);\n        }\n        else {\n          FUN_00004c84(\"error: failure to write to device #%i\\n\",deviceID);\n        }\n      }\n      else {\n        FUN_00004c84(\"data successfully written to device #%i\\n\",deviceID);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000305c": "write_to_device_0000305c",
                "param_1": "argc",
                "param_2": "argv",
                "uVar1": "deviceValue",
                "auStack_20": "deviceValues",
                "local_18": "numValues",
                "local_14": "deviceIndex",
                "local_10": "deviceID",
                "local_c": "index"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00003694",
                "FUN_00004042",
                "FUN_00003d24",
                "FUN_00003d94",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000316c": {
            "entrypoint": "0x0000316c",
            "current_name": "handle_operation_0000316c",
            "code": "\nundefined4 handleOperation_0000316c(int operationType,undefined4 *args)\n\n{\n  int result;\n  \n  if (operationType < 2) {\n    FUN_00002f74();\n  }\n  else {\n    result = FUN_00004e52(args[1],&DAT_000074ec);\n    if (result == 0) {\n      FUN_00002fe0(operationType,args);\n    }\n    else {\n      result = FUN_00004e52(args[1],\"write\");\n      if (result == 0) {\n        FUN_0000305c(operationType,args);\n      }\n      else {\n        FUN_00004c84(\"usage: %s read|write\\n\",*args);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000316c": "handle_operation_0000316c",
                "param_1": "operationType",
                "param_2": "args",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_00004c84",
                "FUN_00002fe0",
                "FUN_0000305c",
                "FUN_00004e52",
                "FUN_00002f74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031e0": {
            "entrypoint": "0x000031e0",
            "current_name": "ring_alarm_000031e0",
            "code": "\nvoid ring_alarm_000031e0(void)\n\n{\n  FUN_00004db8(\"The alarm rang\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_000031e0": "ring_alarm_000031e0"
            },
            "calling": [],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031fc": {
            "entrypoint": "0x000031fc",
            "current_name": "calculate_day_of_week_000031fc",
            "code": "\nint calculateDayOfWeek_000031fc(int year,int month,int day)\n\n{\n  byte isLeapYear;\n  int adjustedMonth;\n  \n  adjustedMonth = month;\n  if (month < 3) {\n    adjustedMonth = 1;\n  }\n  isLeapYear = (byte)adjustedMonth;\n  if (2 < month) {\n    isLeapYear = 0;\n  }\n  year = year - (uint)isLeapYear;\n  adjustedMonth = year;\n  if (year < 0) {\n    adjustedMonth = year + 3;\n  }\n  return ((((adjustedMonth >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)daysToMonthArray + (month + -1) * 4 + 0x50) + day) % 7;\n}\n\n",
            "renaming": {
                "FUN_000031fc": "calculate_day_of_week_000031fc",
                "param_1": "year",
                "param_2": "month",
                "param_3": "day",
                "bVar1": "isLeapYear",
                "iVar2": "adjustedMonth",
                "Elf32_Rel_ARRAY_1fff0200": "daysToMonthArray"
            },
            "calling": [
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000328c": {
            "entrypoint": "0x0000328c",
            "current_name": "extract_and_process_data_0000328c",
            "code": "\nundefined4 extractAndProcessData_0000328c(undefined4 *inputArray,int *outputArray)\n\n{\n  int result;\n  int index;\n  short value;\n  \n  value = FUN_00004f84(*inputArray,&index,10);\n  outputArray[5] = value + -0x76c;\n  value = FUN_00004f84(index + 1,&index,10);\n  outputArray[4] = value + -1;\n  value = FUN_00004f84(index + 1,&index,10);\n  outputArray[3] = (int)value;\n  value = FUN_00004f84(inputArray[1],&index,10);\n  outputArray[2] = (int)value;\n  value = FUN_00004f84(index + 1,&index,10);\n  outputArray[1] = (int)value;\n  value = FUN_00004f84(index + 1,&index,10);\n  *outputArray = (int)value;\n  result = FUN_000031fc(outputArray[5] + 0x76c,outputArray[4] + 1,outputArray[3]);\n  outputArray[6] = result;\n  outputArray[8] = -1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000328c": "extract_and_process_data_0000328c",
                "param_1": "inputArray",
                "param_2": "outputArray",
                "iVar1": "result",
                "local_10": "index",
                "local_a": "value"
            },
            "calling": [
                "FUN_000033f4",
                "FUN_00003478"
            ],
            "called": [
                "FUN_00004f84",
                "FUN_000031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003378": {
            "entrypoint": "0x00003378",
            "current_name": "print_date_time_00003378",
            "code": "\nundefined4 printDateTime_00003378(undefined4 *dateTimeParams)\n\n{\n  FUN_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",year + 0x76c,month + 1,day,\n               hour,minute,*dateTimeParams);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00003378": "print_date_time_00003378",
                "param_1": "dateTimeParams",
                "param_1[5]": "year",
                "param_1[4]": "month",
                "param_1[3]": "day",
                "param_1[2]": "hour",
                "param_1[1]": "minute"
            },
            "calling": [
                "FUN_00003444",
                "FUN_000033c0"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033c0": {
            "entrypoint": "0x000033c0",
            "current_name": "check_alarm_status_000033c0",
            "code": "\nbool checkAlarmStatus_000033c0(void)\n\n{\n  int result;\n  undefined alarmBuffer [36];\n  \n  result = FUN_00002690(alarmBuffer);\n  if (result != 0) {\n    FUN_00004db8(\"rtc: error getting alarm\");\n  }\n  else {\n    FUN_00003378(alarmBuffer);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_000033c0": "check_alarm_status_000033c0",
                "auStack_2c": "alarmBuffer",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002690",
                "FUN_00003378",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033f4": {
            "entrypoint": "0x000033f4",
            "current_name": "set_alarm_000033f4",
            "code": "\nundefined4 setAlarm_000033f4(undefined4 inputParam)\n\n{\n  int result;\n  undefined4 returnValue;\n  undefined buffer [36];\n  \n  result = FUN_0000328c(inputParam,buffer);\n  if (result == 0) {\n    result = FUN_00002654(buffer,0x31e1,0);\n    if (result == -1) {\n      FUN_00004db8(\"rtc: error setting alarm\");\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000033f4": "set_alarm_000033f4",
                "param_1": "inputParam",
                "iVar1": "result",
                "uVar2": "returnValue",
                "auStack_2c": "buffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000328c",
                "FUN_00002654",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003444": {
            "entrypoint": "0x00003444",
            "current_name": "get_rtc_time_and_handle_error_00003444",
            "code": "\nbool getRtcTimeAndHandleError_00003444(void)\n\n{\n  int result;\n  undefined rtcData [36];\n  \n  result = FUN_00002624(rtcData);\n  if (result != 0) {\n    FUN_00004db8(\"rtc: error getting time\");\n  }\n  else {\n    FUN_00003378(rtcData);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_00003444": "get_rtc_time_and_handle_error_00003444",
                "iVar1": "result",
                "auStack_2c": "rtcData"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00003378",
                "FUN_00004db8",
                "FUN_00002624"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003478": {
            "entrypoint": "0x00003478",
            "current_name": "set_time_00003478",
            "code": "\nundefined4 setTime_00003478(undefined4 input)\n\n{\n  int result;\n  undefined4 status;\n  undefined buffer [36];\n  \n  result = FUN_0000328c(input,buffer);\n  if (result == 0) {\n    result = FUN_00002600(buffer);\n    if (result == -1) {\n      FUN_00004db8(\"rtc: error setting time\");\n      status = 1;\n    }\n    else {\n      status = 0;\n    }\n  }\n  else {\n    status = 1;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_00003478": "set_time_00003478",
                "param_1": "input",
                "iVar1": "result",
                "uVar2": "status",
                "auStack_2c": "buffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000328c",
                "FUN_00002600",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000034c0": {
            "entrypoint": "0x000034c0",
            "current_name": "print_rtc_command_usage_000034c0",
            "code": "\nundefined4 printRtcCommandUsage_000034c0(void)\n\n{\n  FUN_00004db8(\"usage: rtc <command> [arguments]\");\n  FUN_00004db8(\"commands:\");\n  FUN_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  FUN_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  FUN_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  FUN_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  FUN_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  FUN_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  FUN_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000034c0": "print_rtc_command_usage_000034c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003524": {
            "entrypoint": "0x00003524",
            "current_name": "handle_alarm_command_00003524",
            "code": "\nundefined4 handleAlarmCommand_00003524(int numParams,int commandParams)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  if (numParams < 2) {\n    FUN_000034c0();\n    returnValue = 1;\n  }\n  else {\n    result = FUN_00004e66(*(undefined4 *)(commandParams + 4),\"poweron\",7);\n    if (result == 0) {\n      FUN_000026d8();\n    }\n    else {\n      result = FUN_00004e66(*(undefined4 *)(commandParams + 4),\"poweroff\",8);\n      if (result == 0) {\n        FUN_000026e4();\n      }\n      else {\n        result = FUN_00004e66(*(undefined4 *)(commandParams + 4),\"clearalarm\",8);\n        if (result == 0) {\n          FUN_000026c0();\n        }\n        else {\n          result = FUN_00004e66(*(undefined4 *)(commandParams + 4),\"getalarm\",8);\n          if (result == 0) {\n            FUN_000033c0();\n          }\n          else {\n            result = FUN_00004e66(*(undefined4 *)(commandParams + 4),\"setalarm\",8);\n            if ((result == 0) && (numParams == 4)) {\n              FUN_000033f4(commandParams + 8);\n            }\n            else {\n              result = FUN_00004e66(*(undefined4 *)(commandParams + 4),\"gettime\",7);\n              if (result == 0) {\n                FUN_00003444();\n              }\n              else {\n                result = FUN_00004e66(*(undefined4 *)(commandParams + 4),\"settime\",7);\n                if ((result != 0) || (numParams != 4)) {\n                  FUN_00004c84(\"unknown command or missing parameters: %s\\n\\n\",\n                               *(undefined4 *)(commandParams + 4));\n                  FUN_000034c0();\n                  return 1;\n                }\n                FUN_00003478(commandParams + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003524": "handle_alarm_command_00003524",
                "param_1": "numParams",
                "param_2": "commandParams",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_000034c0",
                "FUN_00004c84",
                "FUN_00004e66",
                "FUN_000026c0",
                "FUN_000033f4",
                "FUN_00003444",
                "FUN_000033c0",
                "FUN_000026d8",
                "FUN_00003478",
                "FUN_000026e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003658": {
            "entrypoint": "0x00003658",
            "current_name": "wait_for_data_sync_00003658",
            "code": "\nvoid waitForDataSync_00003658(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00003658": "wait_for_data_sync_00003658",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "FUN_00003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003688": {
            "entrypoint": "0x00003688",
            "current_name": "initialize_application_00003688",
            "code": "\nvoid initialize_application_00003688(void)\n\n{\n  FUN_00003658();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003688": "initialize_application_00003688"
            },
            "calling": [
                "FUN_00002e9c"
            ],
            "called": [
                "FUN_00003658"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003694": {
            "entrypoint": "0x00003694",
            "current_name": "display_data_object_00003694",
            "code": "\nvoid displayDataObject_00003694(int dataObjectAddress,byte dataObjectSize)\n\n{\n  undefined4 dataType;\n  char isTypeValid;\n  uint bitMask;\n  bool isBitSet;\n  undefined stringBuffer [8];\n  int stringLength;\n  char dataTypeChar;\n  byte index;\n  \n  if ((dataObjectAddress == 0) || (3 < dataObjectSize)) {\n    FUN_00004db8(\"Unable to display data object\");\n  }\n  else {\n    FUN_00004c84(\"Data:\");\n    for (index = 0; index < dataObjectSize; index = index + 1) {\n      if (*(byte *)(dataObjectAddress + 6) < 0x14) {\n        bitMask = 1 << (uint)*(byte *)(dataObjectAddress + 6) & 0x8018f;\n        isBitSet = bitMask != 0;\n        if (isBitSet) {\n          bitMask = 1;\n        }\n        isTypeValid = (char)bitMask;\n        if (!isBitSet) {\n          isTypeValid = '\\0';\n        }\n        if (isTypeValid == '\\0') goto LAB_000036ee;\n        dataTypeChar = '\\0';\n      }\n      else {\nLAB_000036ee:\n        dataTypeChar = FUN_00003918((int)*(char *)(dataObjectAddress + 7));\n      }\n      FUN_00004c84(&DAT_000077bc);\n      if (dataObjectSize < 2) {\n        FUN_00004c84(\"     \");\n      }\n      else {\n        FUN_00004c84(\"[%u] \",index);\n      }\n      if (dataTypeChar == '\\0') {\n        if (*(char *)(dataObjectAddress + 7) == '\\0') {\n          FUN_00004c84(&DAT_000077d8,(int)*(short *)(dataObjectAddress + (uint)index * 2));\n        }\n        else if ((*(char *)(dataObjectAddress + 7) + 4 < 0 == SCARRY4((int)*(char *)(dataObjectAddress + 7),4)) &&\n                (*(char *)(dataObjectAddress + 7) < '\\0')) {\n          stringLength = FUN_00003e9e(stringBuffer,(int)*(short *)(dataObjectAddress + (uint)index * 2),\n                                  (int)*(char *)(dataObjectAddress + 7));\n          stringBuffer[stringLength] = 0;\n          FUN_00004c84(&DAT_000077dc,stringBuffer);\n        }\n        else {\n          FUN_00004c84(\"%iE%i\",(int)*(short *)(dataObjectAddress + (uint)index * 2),\n                       (int)*(char *)(dataObjectAddress + 7));\n        }\n      }\n      else {\n        FUN_00004c84(\"%6d %c\",(int)*(short *)(dataObjectAddress + (uint)index * 2),dataTypeChar);\n      }\n      dataType = FUN_00003810(*(undefined *)(dataObjectAddress + 6));\n      FUN_00004c84(&DAT_000077e8,dataType);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003694": "display_data_object_00003694",
                "param_1": "dataObjectAddress",
                "param_2": "dataObjectSize",
                "uVar1": "dataType",
                "cVar2": "isTypeValid",
                "uVar3": "bitMask",
                "bVar4": "isBitSet",
                "auStack_18": "stringBuffer",
                "local_10": "stringLength",
                "local_a": "dataTypeChar",
                "local_9": "index"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00003918",
                "FUN_00003e9e",
                "FUN_00003810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003810": {
            "entrypoint": "0x00003810",
            "current_name": "get_memory_address_00003810",
            "code": "\nundefined * getMemoryAddress_00003810(undefined input)\n\n{\n  undefined *memoryAddress;\n  \n  switch(input) {\n  case 2:\n    memoryAddress = &DAT_000077ec;\n    break;\n  case 3:\n    memoryAddress = &DAT_000077f0;\n    break;\n  case 4:\n    memoryAddress = &DAT_000077f4;\n    break;\n  case 5:\n    memoryAddress = &DAT_000077f8;\n    break;\n  case 6:\n    memoryAddress = &DAT_000077fc;\n    break;\n  case 7:\n    memoryAddress = (undefined *)0x7800;\n    break;\n  case 8:\n    memoryAddress = &DAT_00007804;\n    break;\n  case 9:\n    memoryAddress = &DAT_00007808;\n    break;\n  case 10:\n    memoryAddress = &DAT_0000780c;\n    break;\n  case 0xb:\n    memoryAddress = &DAT_00007810;\n    break;\n  case 0xc:\n    memoryAddress = &DAT_00007814;\n    break;\n  case 0xd:\n    memoryAddress = &DAT_00007818;\n    break;\n  case 0xe:\n    memoryAddress = &DAT_0000781c;\n    break;\n  case 0xf:\n    memoryAddress = &DAT_00007820;\n    break;\n  case 0x10:\n    memoryAddress = &DAT_00007824;\n    break;\n  case 0x11:\n    memoryAddress = &DAT_0000782c;\n    break;\n  default:\n    memoryAddress = &DAT_00007834;\n    break;\n  case 0x13:\n    memoryAddress = &DAT_00007830;\n    break;\n  case 0x15:\n    memoryAddress = &DAT_00007828;\n  }\n  return memoryAddress;\n}\n\n",
            "renaming": {
                "FUN_00003810": "get_memory_address_00003810",
                "param_1": "input",
                "puVar1": "memoryAddress"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003918": {
            "entrypoint": "0x00003918",
            "current_name": "get_mapped_value_00003918",
            "code": "\nundefined4 getMappedValue_00003918(undefined inputValue)\n\n{\n  undefined4 result;\n  \n  switch(inputValue) {\n  case 2:\n    result = 0x68;\n    break;\n  case 3:\n    result = 0x6b;\n    break;\n  case 6:\n    result = 0x4d;\n    break;\n  case 9:\n    result = 0x47;\n    break;\n  case 0xc:\n    result = 0x54;\n    break;\n  case 0xf:\n    result = 0x50;\n    break;\n  case 0xf1:\n    result = 0x66;\n    break;\n  default:\n    result = 0;\n    break;\n  case 0xf4:\n    result = 0x70;\n    break;\n  case 0xf7:\n    result = 0x6e;\n    break;\n  case 0xfa:\n    result = 0x75;\n    break;\n  case 0xfd:\n    result = 0x6d;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003918": "get_mapped_value_00003918",
                "param_1": "inputValue",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000039e8": {
            "entrypoint": "0x000039e8",
            "current_name": "get_class_name_000039e8",
            "code": "\nchar * getClassName_000039e8(char classCode)\n\n{\n  char *className;\n  \n  switch(classCode) {\n  case '\\0':\n    className = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    className = \"ACT_ANY\";\n    break;\n  case 'B':\n    className = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    className = \"ACT_SERVO\";\n    break;\n  case 'D':\n    className = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    className = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    className = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    className = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    className = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    className = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    className = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    className = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    className = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    className = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    className = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    className = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    className = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    className = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    className = \"SENSE_UV\";\n    break;\n  case -0x74:\n    className = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    className = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    className = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    className = \"SENSE_CO2\";\n    break;\n  default:\n    if (classCode == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    className = \"CLASS_UNKNOWN\";\n  }\n  return className;\n}\n\n",
            "renaming": {
                "FUN_000039e8": "get_class_name_000039e8",
                "param_1": "classCode",
                "pcVar1": "className"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_00002f74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d24": {
            "entrypoint": "0x00003d24",
            "current_name": "find_element_by_index_00003d24",
            "code": "\nundefined4 * find_element_by_index_00003d24(int index)\n\n{\n  int count;\n  undefined4 *current_element;\n  \n  count = 0;\n  for (current_element = DAT_1fff0db0; (count < index && (current_element != (undefined4 *)0x0));\n      current_element = (undefined4 *)*current_element) {\n    count = count + 1;\n  }\n  return current_element;\n}\n\n",
            "renaming": {
                "FUN_00003d24": "find_element_by_index_00003d24",
                "param_1": "index",
                "local_10": "count",
                "local_c": "current_element"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d64": {
            "entrypoint": "0x00003d64",
            "current_name": "execute_function_00003d64",
            "code": "\nundefined4 executeFunction_00003d64(int functionPointer,undefined4 param)\n\n{\n  undefined4 returnValue;\n  \n  if (functionPointer == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (***(code ***)(functionPointer + 0xc))(*(undefined4 *)(functionPointer + 4),param);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d64": "execute_function_00003d64",
                "param_1": "functionPointer",
                "param_2": "param",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d94": {
            "entrypoint": "0x00003d94",
            "current_name": "execute_function_00003d94",
            "code": "\nundefined4 executeFunction_00003d94(int argument1,undefined4 argument2)\n\n{\n  undefined4 returnValue;\n  \n  if (argument1 == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (**(code **)(*(int *)(argument1 + 0xc) + 4))(*(undefined4 *)(argument1 + 4),argument2);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d94": "execute_function_00003d94",
                "param_1": "argument1",
                "param_2": "argument2",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "entrypoint": "0x00003dc4",
            "current_name": "count_digits_and_fill_array_00003dc4",
            "code": "\nint countDigitsAndFillArray_00003dc4(int array,uint number)\n\n{\n  uint remainder;\n  char *currentDigit;\n  uint counter;\n  int digitCount;\n  \n  digitCount = 1;\n  if (number < 1000000000) {\n    for (counter = 10; counter <= number; counter = counter * 10) {\n      digitCount = digitCount + 1;\n    }\n  }\n  else {\n    digitCount = 10;\n  }\n  if (array != 0) {\n    currentDigit = (char *)(digitCount + array);\n    remainder = number;\n    do {\n      currentDigit = currentDigit + -1;\n      *currentDigit = (char)(remainder % 10) + '0';\n      remainder = remainder / 10;\n    } while (remainder != 0);\n  }\n  return digitCount;\n}\n\n",
            "renaming": {
                "FUN_00003dc4": "count_digits_and_fill_array_00003dc4",
                "param_1": "array",
                "param_2": "number",
                "local_20": "remainder",
                "local_14": "currentDigit",
                "local_10": "counter",
                "local_c": "digitCount"
            },
            "calling": [
                "FUN_00003e58"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e58": {
            "entrypoint": "0x00003e58",
            "current_name": "reverse_integer_00003e58",
            "code": "\nint reverse_integer_00003e58(undefined *input_array,int input_number)\n\n{\n  int result;\n  int abs_number;\n  undefined *modified_array;\n  \n  abs_number = input_number;\n  modified_array = input_array;\n  if (-(input_number >> 0x1f) != 0) {\n    if (input_array != (undefined *)0x0) {\n      modified_array = input_array + 1;\n      *input_array = 0x2d;\n    }\n    abs_number = -input_number;\n  }\n  result = FUN_00003dc4(modified_array,abs_number);\n  return -(input_number >> 0x1f) + result;\n}\n\n",
            "renaming": {
                "FUN_00003e58": "reverse_integer_00003e58",
                "param_1": "input_array",
                "param_2": "input_number",
                "iVar1": "result",
                "local_18": "abs_number",
                "local_14": "modified_array"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_00003dc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "entrypoint": "0x00003e9e",
            "current_name": "process_data_00003e9e",
            "code": "\nundefined4 processData_00003e9e(undefined4 inputParam,short count,undefined4 config)\n\n{\n  undefined4 result;\n  \n  result = FUN_00003ec4(inputParam,(int)count,config);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003e9e": "process_data_00003e9e",
                "param_1": "inputParam",
                "param_2": "count",
                "param_3": "config",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [
                "FUN_00003ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "entrypoint": "0x00003ec4",
            "current_name": "parse_number_00003ec4",
            "code": "\nint parseNumber_00003ec4(undefined *outputBuffer,uint inputNumber,int decimalPlaces)\n\n{\n  int bufferLength;\n  undefined4 numericLength;\n  uint quotient;\n  int remainder;\n  int totalLength;\n  \n  if (decimalPlaces + 7 < 0 != SCARRY4(decimalPlaces,7)) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  totalLength = 0;\n  if (decimalPlaces == 0) {\n    totalLength = FUN_00003e58(outputBuffer,inputNumber);\n  }\n  else if (decimalPlaces < 1) {\n    quotient = inputNumber / *(uint *)(&DAT_00007978 + decimalPlaces * -4);\n    remainder = inputNumber - *(uint *)(&DAT_00007978 + decimalPlaces * -4) * quotient;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((quotient == 0) && ((int)inputNumber < 0)) {\n      if (outputBuffer != (undefined *)0x0) {\n        *outputBuffer = 0x2d;\n      }\n      totalLength = 1;\n    }\n    if (outputBuffer == (undefined *)0x0) {\n      bufferLength = FUN_00003e58(0,quotient);\n      totalLength = bufferLength + 1 + totalLength;\n    }\n    else {\n      bufferLength = FUN_00003e58(outputBuffer + totalLength,quotient);\n      bufferLength = totalLength + bufferLength;\n      totalLength = bufferLength + 1;\n      outputBuffer[bufferLength] = 0x2e;\n      numericLength = FUN_00003e58(outputBuffer + totalLength,remainder);\n      FUN_00003ff4(outputBuffer + totalLength,numericLength,-decimalPlaces,0x30);\n    }\n    totalLength = -decimalPlaces + totalLength;\n  }\n  else {\n    totalLength = FUN_00003e58(outputBuffer,inputNumber);\n    if (outputBuffer != (undefined *)0x0) {\n      FUN_00004622(outputBuffer + totalLength,0x30,decimalPlaces);\n    }\n    totalLength = decimalPlaces + totalLength;\n  }\n  return totalLength;\n}\n\n",
            "renaming": {
                "FUN_00003ec4": "parse_number_00003ec4",
                "param_1": "outputBuffer",
                "param_2": "inputNumber",
                "param_3": "decimalPlaces",
                "iVar1": "bufferLength",
                "uVar2": "numericLength",
                "uVar3": "quotient",
                "local_10": "remainder",
                "local_c": "totalLength"
            },
            "calling": [
                "FUN_00003e9e"
            ],
            "called": [
                "FUN_00000f04",
                "FUN_00003e58",
                "FUN_00003ff4",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "entrypoint": "0x00003ff4",
            "current_name": "calculate_minimum_00003ff4",
            "code": "\nuint calculateMinimum_00003ff4(int offset,uint start,uint end,undefined undefinedParam)\n\n{\n  uint minimum;\n  \n  minimum = start;\n  if ((start < end) && (minimum = end, offset != 0)) {\n    FUN_000045ee((end - start) + offset,offset,start);\n    FUN_00004622(offset,undefinedParam,end - start);\n  }\n  return minimum;\n}\n\n",
            "renaming": {
                "FUN_00003ff4": "calculate_minimum_00003ff4",
                "param_1": "offset",
                "param_2": "start",
                "param_3": "end",
                "param_4": "undefinedParam",
                "uVar1": "minimum"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_000045ee",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004042": {
            "entrypoint": "0x00004042",
            "current_name": "set_range_to_ten_00004042",
            "code": "\nvoid setRangeToTen_00004042(undefined4 input)\n\n{\n  FUN_00004f84(input,0,10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004042": "set_range_to_ten_00004042",
                "param_1": "input"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000404c": {
            "entrypoint": "0x0000404c",
            "current_name": "process_0000404c",
            "code": "\nundefined4 process_0000404c(uint *input_data,int *state)\n\n{\n  int num_iterations;\n  int *temp_pointer;\n  uint flag;\n  ushort status;\n  int temp_var;\n  code *function_pointer;\n  int temp_var2;\n  uint temp_var3;\n  bool is_zero;\n  \n  status = *(ushort *)(state + 3);\n  flag = (uint)status;\n  if ((int)(flag << 0x1c) < 0) {\n    num_iterations = state[4];\n    if (num_iterations != 0) {\n      temp_var = flag << 0x1e;\n      is_zero = temp_var == 0;\n      temp_var2 = *state;\n      if (is_zero) {\n        temp_var = state[5];\n      }\n      *state = num_iterations;\n      if (!is_zero) {\n        temp_var = 0;\n      }\n      state[2] = temp_var;\n      for (temp_var2 = temp_var2 - num_iterations; 0 < temp_var2; temp_var2 = temp_var2 - temp_var) {\n        temp_var = (*(code *)state[10])(input_data,state[8],num_iterations,temp_var2);\n        if (temp_var < 1) {\n          *(ushort *)(state + 3) = *(ushort *)(state + 3) | 0x40;\n          return 0xffffffff;\n        }\n        num_iterations = num_iterations + temp_var;\n      }\n    }\n  }\n  else {\n    if ((state[1] < 1) && (state[0x10] < 1)) {\n      return 0;\n    }\n    function_pointer = (code *)state[0xb];\n    if (function_pointer == (code *)0x0) {\n      return 0;\n    }\n    temp_var3 = *input_data;\n    *input_data = 0;\n    if ((status & 0x1000) == 0) {\n      num_iterations = (*function_pointer)(input_data,state[8],flag & 0x1000,1);\n      if ((num_iterations == -1) && (flag = *input_data, flag != 0)) {\n        if ((flag == 0x1d) || (flag == 0x16)) {\n          *input_data = temp_var3;\n          return 0;\n        }\n        status = *(ushort *)(state + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      num_iterations = state[0x15];\n    }\n    if (((int)((uint)*(ushort *)(state + 3) << 0x1d) < 0) &&\n       (num_iterations = num_iterations - state[1], state[0xd] != 0)) {\n      num_iterations = num_iterations - state[0x10];\n    }\n    num_iterations = (*(code *)state[0xb])(input_data,state[8],num_iterations,0);\n    status = *(ushort *)(state + 3);\n    if ((num_iterations == -1) &&\n       ((0x1d < *input_data || (-1 < (int)((0x20400001U >> (*input_data & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(state + 3) = status | 0x40;\n      return 0xffffffff;\n    }\n    state[1] = 0;\n    *state = state[4];\n    if (((int)((uint)status << 0x13) < 0) && ((num_iterations != -1 || (*input_data == 0)))) {\n      state[0x15] = num_iterations;\n    }\n    temp_pointer = (int *)state[0xd];\n    *input_data = temp_var3;\n    if (temp_pointer != (int *)0x0) {\n      if (temp_pointer != state + 0x11) {\n        FUN_00004b34(input_data);\n      }\n      state[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000404c": "process_0000404c",
                "param_1": "input_data",
                "param_2": "state",
                "iVar1": "num_iterations",
                "piVar2": "temp_pointer",
                "uVar3": "flag",
                "uVar4": "status",
                "iVar5": "temp_var",
                "pcVar6": "function_pointer",
                "iVar7": "temp_var2",
                "uVar8": "temp_var3",
                "bVar9": "is_zero"
            },
            "calling": [
                "FUN_00004158",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004158": {
            "entrypoint": "0x00004158",
            "current_name": "validate_and_process_data_00004158",
            "code": "\nundefined4 validateAndProcessData_00004158(int buffer,undefined4 *config)\n\n{\n  undefined4 result;\n  \n  if (config[4] != 0) {\n    if ((buffer != 0) && (*(int *)(buffer + 0x18) == 0)) {\n      FUN_000042a4();\n    }\n    if (config == &DAT_000079b8) {\n      config = *(undefined4 **)(buffer + 4);\n    }\n    else if (config == (undefined4 *)&DAT_000079d8) {\n      config = *(undefined4 **)(buffer + 8);\n    }\n    else if (config == (undefined4 *)&DAT_00007998) {\n      config = *(undefined4 **)(buffer + 0xc);\n    }\n    if (*(short *)(config + 3) != 0) {\n      if ((-1 < (int)(config[0x19] << 0x1f)) && (-1 < (int)*(short *)(config + 3) << 0x16)) {\n        FUNC_000045e8(config[0x16]);\n      }\n      result = FUN_0000404c(buffer,config);\n      if ((int)(config[0x19] << 0x1f) < 0) {\n        return result;\n      }\n      if ((int)((uint)*(ushort *)(config + 3) << 0x16) < 0) {\n        return result;\n      }\n      FUNC_000045ec(config[0x16]);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004158": "validate_and_process_data_00004158",
                "param_1": "buffer",
                "param_2": "config",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000041d0",
                "FUN_00005404",
                "FUN_00006768"
            ],
            "called": [
                "FUN_0000404c",
                "FUN_000045ec",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041d0": {
            "entrypoint": "0x000041d0",
            "current_name": "process_relocations_000041d0",
            "code": "\nuint processRelocations_000041d0(int baseAddress,undefined4 size,undefined4 param_3)\n\n{\n  uint totalRelocations;\n  int numRelocations;\n  dword *relocationTable;\n  int currentRelocation;\n  uint result;\n  int numIterations;\n  undefined4 *sourceArray;\n  \n  if (baseAddress == 0) {\n    sourceArray = &DAT_000079f8;\n    relocationTable = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    result = 0;\n    do {\n      numIterations = relocationTable[1];\n      currentRelocation = relocationTable[2];\n      while (numIterations = numIterations + -1, -1 < numIterations) {\n        if ((1 < *(ushort *)(currentRelocation + 0xc)) && (numRelocations = *(short *)(currentRelocation + 0xe) + 1, numRelocations != 0)) {\n          totalRelocations = FUN_00004158(0x1fff0284,currentRelocation,param_3,numRelocations,sourceArray);\n          result = result | totalRelocations;\n        }\n        currentRelocation = currentRelocation + 0x68;\n      }\n      relocationTable = (dword *)*relocationTable;\n    } while (relocationTable != (dword *)0x0);\n    return result;\n  }\n  result = FUN_00004158(Elf32_Rel_ARRAY_1fff0200[16].r_offset,baseAddress);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000041d0": "process_relocations_000041d0",
                "param_1": "baseAddress",
                "param_2": "size",
                "uVar1": "totalRelocations",
                "iVar2": "numRelocations",
                "pdVar3": "relocationTable",
                "iVar4": "currentRelocation",
                "uVar5": "result",
                "iVar6": "numIterations",
                "puVar7": "sourceArray"
            },
            "calling": [
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041f4": {
            "entrypoint": "0x000041f4",
            "current_name": "initialize_param_000041f4",
            "code": "\nvoid initializeParam_000041f4(undefined4 *paramArray,undefined2 value1,undefined2 value2)\n\n{\n  *paramArray = 0;\n  paramArray[1] = 0;\n  paramArray[4] = 0;\n  paramArray[5] = 0;\n  paramArray[2] = 0;\n  *(undefined2 *)(paramArray + 3) = value1;\n  paramArray[0x19] = 0;\n  *(undefined2 *)((int)paramArray + 0xe) = value2;\n  paramArray[6] = 0;\n  FUN_00004622(paramArray + 0x17,0,8);\n  paramArray[9] = 0x4dc9;\n  paramArray[10] = 0x4def;\n  paramArray[0xb] = 0x4e27;\n  paramArray[8] = paramArray;\n  paramArray[0xc] = addressLAB00004e4a_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000041f4": "initialize_param_000041f4",
                "param_1": "paramArray",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[1]": "paramArray[1]",
                "param_1[4]": "paramArray[4]",
                "param_1[5]": "paramArray[5]",
                "param_1[2]": "paramArray[2]",
                "param_1[0x19]": "paramArray[0x19]",
                "param_1[6]": "paramArray[6]",
                "param_1[9]": "paramArray[9]",
                "param_1[10]": "paramArray[10]",
                "param_1[0xb]": "paramArray[0xb]",
                "param_1[8]": "paramArray[8]",
                "param_1[0xc]": "paramArray[0xc]",
                "&LAB_00004e4a_1": "addressLAB00004e4a_1"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004248": {
            "entrypoint": "0x00004248",
            "current_name": "initialize_data_structure_00004248",
            "code": "\nundefined4 * initializeDataStructure_00004248(undefined4 data,int size)\n\n{\n  undefined4 *pointer;\n  int offset;\n  \n  offset = (size + -1) * 0x68;\n  pointer = (undefined4 *)FUN_00004bd0(data,offset + 0x74);\n  if (pointer != (undefined4 *)0x0) {\n    *pointer = 0;\n    pointer[1] = size;\n    pointer[2] = pointer + 3;\n    FUN_00004622(pointer + 3,0,offset + 0x68);\n  }\n  return pointer;\n}\n\n",
            "renaming": {
                "FUN_00004248": "initialize_data_structure_00004248",
                "param_1": "data",
                "param_2": "size",
                "puVar1": "pointer",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004274": {
            "entrypoint": "0x00004274",
            "current_name": "initialize_data_00004274",
            "code": "\nvoid initializeData_00004274(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004274": "initialize_data_00004274"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004280": {
            "entrypoint": "0x00004280",
            "current_name": "initialize_data_00004280",
            "code": "\nvoid initializeData_00004280(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004280": "initialize_data_00004280"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000428c": {
            "entrypoint": "0x0000428c",
            "current_name": "initialize_memory_0000428c",
            "code": "\nvoid initializeMemory_0000428c(void)\n\n{\n  FUNC_000045e8(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000428c": "initialize_memory_0000428c"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000042a4": {
            "entrypoint": "0x000042a4",
            "current_name": "initialize_device_000042a4",
            "code": "\nvoid initializeDevice_000042a4(int device)\n\n{\n  undefined4 status;\n  \n  FUN_0000428c();\n  if (*(int *)(device + 0x18) == 0) {\n    *(undefined4 *)(device + 0x48) = 0;\n    *(undefined4 *)(device + 0x4c) = 0;\n    *(undefined4 *)(device + 0x50) = 0;\n    status = 0x1fff0284;\n    *(undefined **)(device + 0x28) = &DAT_0000423d;\n    if (device == 0x1fff0284) {\n      status = 1;\n    }\n    if (device == 0x1fff0284) {\n      *(undefined4 *)(device + 0x18) = status;\n    }\n    status = FUN_00004314(device);\n    *(undefined4 *)(device + 4) = status;\n    status = FUN_00004314(device);\n    *(undefined4 *)(device + 8) = status;\n    status = FUN_00004314(device);\n    *(undefined4 *)(device + 0xc) = status;\n    FUN_000041f4(*(undefined4 *)(device + 4),4,0);\n    FUN_000041f4(*(undefined4 *)(device + 8),9,1);\n    FUN_000041f4(*(undefined4 *)(device + 0xc),0x12,2);\n    *(undefined4 *)(device + 0x18) = 1;\n  }\n  FUNC_000045ec(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000042a4": "initialize_device_000042a4",
                "param_1": "device",
                "uVar1": "status"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004c84",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00005e10",
                "FUN_000054a8",
                "FUN_00004314",
                "FUN_00004cb4",
                "FUN_00005404",
                "FUN_00006768",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000041f4",
                "FUN_000045ec",
                "FUN_00004314",
                "FUN_0000428c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004314": {
            "entrypoint": "0x00004314",
            "current_name": "parse_relocations_00004314",
            "code": "\nundefined4 * parseRelocations_00004314(undefined4 *result)\n\n{\n  dword dynamicValue;\n  int numRelocations;\n  undefined4 *relocationEntry;\n  dword *currentEntry;\n  \n  FUN_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    FUN_000042a4(0x1fff0284);\n  }\n  currentEntry = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    numRelocations = currentEntry[1];\n    relocationEntry = (undefined4 *)currentEntry[2];\n    while (numRelocations = numRelocations + -1, -1 < numRelocations) {\n      if (*(short *)(relocationEntry + 3) == 0) {\n        relocationEntry[3] = 0xffff0001;\n        relocationEntry[0x19] = 0;\n        FUNC_000045e4(relocationEntry + 0x16);\n        FUN_00004280();\n        relocationEntry[1] = 0;\n        relocationEntry[2] = 0;\n        relocationEntry[4] = 0;\n        relocationEntry[5] = 0;\n        *relocationEntry = 0;\n        relocationEntry[6] = 0;\n        FUN_00004622(relocationEntry + 0x17,0,8);\n        relocationEntry[0xd] = 0;\n        relocationEntry[0xe] = 0;\n        relocationEntry[0x12] = 0;\n        relocationEntry[0x13] = 0;\n        return relocationEntry;\n      }\n      relocationEntry = relocationEntry + 0x1a;\n    }\n    if (*currentEntry == 0) {\n      dynamicValue = FUN_00004248(result,4);\n      *currentEntry = dynamicValue;\n      if (dynamicValue == 0) {\n        FUN_00004280();\n        *result = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    currentEntry = (dword *)*currentEntry;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00004314": "parse_relocations_00004314",
                "param_1": "result",
                "dVar1": "dynamicValue",
                "iVar2": "numRelocations",
                "puVar3": "relocationEntry",
                "pdVar4": "currentEntry"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004248",
                "FUN_00004274",
                "FUN_000042a4",
                "FUN_00004280",
                "FUN_00004622",
                "FUN_000045e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000043a0": {
            "entrypoint": "0x000043a0",
            "current_name": "calculate_checksum_000043a0",
            "code": "\nuint calculateChecksum_000043a0(int baseAddress,code *callbackFunction)\n\n{\n  uint checksum;\n  int *currentPointer;\n  int structOffset;\n  uint result;\n  int loopCounter;\n  \n  currentPointer = (int *)(baseAddress + 0x48);\n  result = 0;\n  do {\n    loopCounter = currentPointer[1];\n    structOffset = currentPointer[2];\n    while (loopCounter = loopCounter + -1, -1 < loopCounter) {\n      if ((1 < *(ushort *)(structOffset + 0xc)) && (*(short *)(structOffset + 0xe) != -1)) {\n        checksum = (*callbackFunction)(structOffset);\n        result = result | checksum;\n      }\n      structOffset = structOffset + 0x68;\n    }\n    currentPointer = (int *)*currentPointer;\n  } while (currentPointer != (int *)0x0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000043a0": "calculate_checksum_000043a0",
                "param_1": "baseAddress",
                "param_2": "callbackFunction",
                "uVar1": "checksum",
                "piVar2": "currentPointer",
                "iVar3": "structOffset",
                "uVar4": "result",
                "iVar5": "loopCounter"
            },
            "calling": [
                "FUN_00006768"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004418": {
            "entrypoint": "0x00004418",
            "current_name": "decode_data_00004418",
            "code": "\nuint decode_data_00004418(void)\n\n{\n  dword offset;\n  uint result;\n  byte **data_ptr;\n  byte *byte_ptr;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  data_ptr = *(byte ***)(offset + 4);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (data_ptr == (byte **)&DAT_000079b8) {\n    data_ptr = *(byte ***)(offset + 4);\n  }\n  else if (data_ptr == (byte **)&DAT_000079d8) {\n    data_ptr = *(byte ***)(offset + 8);\n  }\n  else if (data_ptr == (byte **)&DAT_00007998) {\n    data_ptr = *(byte ***)(offset + 0xc);\n  }\n  if ((-1 < (int)data_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045e8(data_ptr[0x16]);\n  }\n  byte_ptr = data_ptr[1];\n  data_ptr[1] = byte_ptr + -1;\n  if ((int)(byte_ptr + -1) < 0) {\n    result = FUN_00005e10(offset,data_ptr);\n  }\n  else {\n    byte_ptr = *data_ptr;\n    *data_ptr = byte_ptr + 1;\n    result = (uint)*byte_ptr;\n  }\n  if ((-1 < (int)data_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045ec(data_ptr[0x16]);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004418": "decode_data_00004418",
                "dVar1": "offset",
                "uVar2": "result",
                "ppbVar3": "data_ptr",
                "pbVar4": "byte_ptr"
            },
            "calling": [
                "FUN_00002d94"
            ],
            "called": [
                "FUN_00005e10",
                "FUN_000045ec",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000443c": {
            "entrypoint": "0x0000443c",
            "current_name": "calculate_date_time_values_0000443c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * calculateDateTimeValues_0000443c(undefined4 *dateTimeValues,uint *result)\n\n{\n  int tempVar1;\n  uint tempVar2;\n  uint totalMinutes;\n  uint divisor;\n  uint quotient;\n  undefined4 var1;\n  undefined4 var2;\n  uint tempVar5;\n  bool isNegative;\n  \n  var1 = *dateTimeValues;\n  var2 = dateTimeValues[1];\n  tempVar1 = FUN_00006974(var1,var2,0x15180,0);\n  totalMinutes = 0x15180;\n  FUN_00006974(var1,var2,0x15180,0);\n  isNegative = (int)totalMinutes < 0;\n  if (isNegative) {\n    totalMinutes = totalMinutes + 0x15180;\n  }\n  if (isNegative) {\n    tempVar2 = tempVar1 + 0xafa6b;\n  }\n  else {\n    tempVar2 = tempVar1 + 0xafa6c;\n  }\n  result[2] = totalMinutes / 0xe10;\n  result[1] = (totalMinutes % 0xe10) / 0x3c;\n  *result = (totalMinutes % 0xe10) % 0x3c;\n  result[6] = (tempVar2 + 3) % 7;\n  totalMinutes = tempVar2;\n  if ((int)tempVar2 < 0) {\n    totalMinutes = tempVar2 - 0x23ab0;\n  }\n  tempVar2 = (totalMinutes / 0x23ab1) * -0x23ab1 + tempVar2;\n  divisor = ((tempVar2 / 0x8eac + tempVar2) - tempVar2 / 0x5b4) - tempVar2 / 0x23ab0;\n  quotient = divisor / 0x16d;\n  tempVar2 = (quotient / 100 - divisor / 0x5b4) + tempVar2 + quotient * -0x16d;\n  tempVar5 = tempVar2 * 5 + 2;\n  divisor = tempVar5 / 0x99;\n  if (tempVar5 < 0x5fa) {\n    tempVar1 = 2;\n  }\n  else {\n    tempVar1 = -10;\n  }\n  tempVar5 = divisor + tempVar1;\n  tempVar1 = (totalMinutes / 0x23ab1) * 400 + quotient;\n  if (tempVar5 < 2) {\n    tempVar1 = tempVar1 + 1;\n  }\n  if (tempVar2 < 0x132) {\n    if (((quotient & 3) == 0) && (quotient != (quotient / 100) * 100)) {\n      totalMinutes = 1;\n    }\n    else {\n      totalMinutes = (uint)(quotient % 400 == 0);\n    }\n    totalMinutes = tempVar2 + 0x3b + totalMinutes;\n  }\n  else {\n    totalMinutes = tempVar2 - 0x132;\n  }\n  result[7] = totalMinutes;\n  result[3] = (tempVar2 + 1) - (divisor * 0x99 + 2) / 5;\n  result[4] = tempVar5;\n  result[5] = tempVar1 - 0x76c;\n  result[8] = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0000443c": "calculate_date_time_values_0000443c",
                "param_1": "dateTimeValues",
                "param_2": "result",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "totalMinutes",
                "uVar4": "divisor",
                "uVar5": "quotient",
                "uVar6": "var1",
                "uVar7": "var2",
                "uVar8": "tempVar5",
                "bVar9": "isNegative"
            },
            "calling": [
                "FUN_00002690",
                "FUN_00002624"
            ],
            "called": [
                "FUN_00006974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000459c": {
            "entrypoint": "0x0000459c",
            "current_name": "execute_all_code_blocks_0000459c",
            "code": "\nvoid executeAllCodeBlocks_0000459c(void)\n\n{\n  code **codeBlockPointer;\n  int codeBlockIndex;\n  \n  codeBlockPointer = (code **)&DAT_00007c58;\n  for (codeBlockIndex = 0; codeBlockIndex != 0; codeBlockIndex = codeBlockIndex + 1) {\n    (**codeBlockPointer)();\n    codeBlockPointer = codeBlockPointer + 1;\n  }\n  FUN_00000410();\n  codeBlockPointer = (code **)&DAT_00007c58;\n  for (codeBlockIndex = 0; codeBlockIndex != 0; codeBlockIndex = codeBlockIndex + 1) {\n    (**codeBlockPointer)();\n    codeBlockPointer = codeBlockPointer + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000459c": "execute_all_code_blocks_0000459c",
                "ppcVar1": "codeBlockPointer",
                "iVar2": "codeBlockIndex"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000410"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000045e4": {
            "entrypoint": "0x000045e4",
            "current_name": "FUNC_000045e4",
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045e8": {
            "entrypoint": "0x000045e8",
            "current_name": "FUNC_000045e8",
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00004274",
                "FUN_00005fec",
                "FUN_00004cb4",
                "FUN_0000428c",
                "FUN_000057f8",
                "FUN_00005790"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ec": {
            "entrypoint": "0x000045ec",
            "current_name": "FUNC_000045ec",
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00005ff8",
                "FUN_0000579c",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00004cb4",
                "FUN_000042a4",
                "FUN_000057f8",
                "FUN_00004280"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ee": {
            "entrypoint": "0x000045ee",
            "current_name": "copy_and_reverse_000045ee",
            "code": "\nvoid copyAndReverse_000045ee(undefined *source,undefined *destination,int length)\n\n{\n  undefined *source_end;\n  undefined *destination_end;\n  \n  destination_end = destination + length;\n  if ((destination < source) && (source < destination_end)) {\n    source_end = source + length;\n    while (source_end != source) {\n      destination_end = destination_end + -1;\n      source_end = source_end + -1;\n      *source_end = *destination_end;\n    }\n  }\n  else {\n    source = source + -1;\n    for (; destination != destination_end; destination = destination + 1) {\n      source = source + 1;\n      *source = *destination;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ee": "copy_and_reverse_000045ee",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "length",
                "puVar1": "source_end",
                "puVar2": "destination_end"
            },
            "calling": [
                "FUN_00003ff4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004622": {
            "entrypoint": "0x00004622",
            "current_name": "fill_array_with_value_00004622",
            "code": "\nvoid fillArrayWithValue_00004622(undefined *array,undefined value,int length)\n\n{\n  undefined *endPointer;\n  \n  endPointer = array + length;\n  for (; array != endPointer; array = array + 1) {\n    *array = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004622": "fill_array_with_value_00004622",
                "param_1": "array",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "endPointer"
            },
            "calling": [
                "FUN_00004248",
                "FUN_000041f4",
                "FUN_00004314",
                "FUN_00003ec4",
                "FUN_00003ff4",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004634": {
            "entrypoint": "0x00004634",
            "current_name": "update_date_00004634",
            "code": "\nvoid updateDate_00004634(uint *dateArray,uint day,undefined4 var3)\n\n{\n  int monthIndex;\n  uint dayValue;\n  uint yearValue;\n  int daysInMonth;\n  bool isNegative;\n  uint *localArray;\n  uint monthValue;\n  undefined4 varStack;\n  \n  localArray = dateArray;\n  monthValue = day;\n  varStack = var3;\n  if (0x3b < *dateArray) {\n    FUN_00005584(&localArray,*dateArray,0x3c);\n    dayValue = dateArray[1] + (int)localArray;\n    dateArray[1] = dayValue;\n    if ((int)monthValue < 0) {\n      dayValue = dayValue - 1;\n      *dateArray = monthValue + 0x3c;\n    }\n    else {\n      *dateArray = monthValue;\n    }\n    if ((int)monthValue < 0) {\n      dateArray[1] = dayValue;\n    }\n  }\n  if (0x3b < dateArray[1]) {\n    FUN_00005584(&localArray,dateArray[1],0x3c);\n    isNegative = (int)monthValue < 0;\n    yearValue = dateArray[2] + (int)localArray;\n    dateArray[2] = yearValue;\n    dayValue = monthValue;\n    if (isNegative) {\n      dayValue = monthValue + 0x3c;\n      yearValue = yearValue - 1;\n    }\n    if (!isNegative) {\n      dateArray[1] = dayValue;\n    }\n    if (isNegative) {\n      dateArray[1] = dayValue;\n    }\n    if (isNegative) {\n      dateArray[2] = yearValue;\n    }\n  }\n  if (0x17 < dateArray[2]) {\n    FUN_00005584(&localArray,dateArray[2],0x18);\n    isNegative = (int)monthValue < 0;\n    yearValue = dateArray[3] + (int)localArray;\n    dateArray[3] = yearValue;\n    dayValue = monthValue;\n    if (isNegative) {\n      dayValue = monthValue + 0x18;\n      yearValue = yearValue - 1;\n    }\n    if (!isNegative) {\n      dateArray[2] = dayValue;\n    }\n    if (isNegative) {\n      dateArray[2] = dayValue;\n    }\n    if (isNegative) {\n      dateArray[3] = yearValue;\n    }\n  }\n  if (0xb < dateArray[4]) {\n    FUN_00005584(&localArray,dateArray[4],0xc);\n    isNegative = (int)monthValue < 0;\n    dayValue = dateArray[5] + (int)localArray;\n    dateArray[5] = dayValue;\n    if (isNegative) {\n      monthValue = monthValue + 0xc;\n      dayValue = dayValue - 1;\n    }\n    if (!isNegative) {\n      dateArray[4] = monthValue;\n    }\n    if (isNegative) {\n      dateArray[4] = monthValue;\n    }\n    if (isNegative) {\n      dateArray[5] = dayValue;\n    }\n  }\n  dayValue = dateArray[5];\n  if ((dayValue & 3) == 0) {\n    if (dayValue == (dayValue / 100) * 100) {\n      if ((dayValue + 0x76c) % 400 == 0) {\n        daysInMonth = 0x1d;\n      }\n      else {\n        daysInMonth = 0x1c;\n      }\n    }\n    else {\n      daysInMonth = 0x1d;\n    }\n  }\n  else {\n    daysInMonth = 0x1c;\n  }\n  if ((int)dateArray[3] < 1) {\n    while ((int)dateArray[3] < 1) {\n      dayValue = dateArray[4];\n      dateArray[4] = dayValue - 1;\n      if (dayValue - 1 == 0xffffffff) {\n        yearValue = dateArray[5];\n        dayValue = yearValue - 1;\n        dateArray[4] = 0xb;\n        dateArray[5] = dayValue;\n        if ((dayValue & 3) == 0) {\n          if (dayValue == (dayValue / 100) * 100) {\n            if ((yearValue + 0x76b) % 400 == 0) {\n              daysInMonth = 0x1d;\n            }\n            else {\n              daysInMonth = 0x1c;\n            }\n          }\n          else {\n            daysInMonth = 0x1d;\n          }\n        }\n        else {\n          daysInMonth = 0x1c;\n        }\n      }\n      monthIndex = daysInMonth;\n      if (dateArray[4] != 1) {\n        monthIndex = (&DAT_000079fc)[dateArray[4]];\n      }\n      dateArray[3] = monthIndex + dateArray[3];\n    }\n  }\n  else {\n    while( true ) {\n      dayValue = dateArray[4];\n      monthIndex = daysInMonth;\n      if (dayValue != 1) {\n        monthIndex = (&DAT_000079fc)[dayValue];\n      }\n      if ((int)dateArray[3] <= monthIndex) break;\n      dateArray[3] = dateArray[3] - monthIndex;\n      dateArray[4] = dayValue + 1;\n      if (dayValue + 1 == 0xc) {\n        yearValue = dateArray[5];\n        dayValue = yearValue + 1;\n        dateArray[4] = 0;\n        dateArray[5] = dayValue;\n        if ((dayValue & 3) == 0) {\n          if (dayValue % 100 == 0) {\n            if ((yearValue + 0x76d) % 400 == 0) {\n              daysInMonth = 0x1d;\n            }\n            else {\n              daysInMonth = 0x1c;\n            }\n          }\n          else {\n            daysInMonth = 0x1d;\n          }\n        }\n        else {\n          daysInMonth = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004634": "update_date_00004634",
                "param_1": "dateArray",
                "param_2": "day",
                "param_3": "var3",
                "iVar1": "monthIndex",
                "uVar2": "dayValue",
                "uVar3": "yearValue",
                "iVar4": "daysInMonth",
                "bVar5": "isNegative",
                "local_20": "localArray",
                "local_1c": "monthValue",
                "uStack_18": "varStack"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005584"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000047e4": {
            "entrypoint": "0x000047e4",
            "current_name": "calculate_date_time_000047e4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculateDateTime_000047e4(int *dateTime)\n\n{\n  longlong totalSeconds;\n  longlong newTotalSeconds;\n  int *returnValue;\n  uint temp1;\n  int temp2;\n  int temp3;\n  int temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int extraDays;\n  uint days;\n  uint isNegative;\n  uint threshold;\n  uint seconds;\n  bool isLeapYear;\n  \n  returnValue = (int *)FUN_000056b0();\n  FUN_00004634(dateTime);\n  days = dateTime[5];\n  extraDays = dateTime[3] + -1 + *(int *)(&DAT_00007a2c + dateTime[4] * 4);\n  if (((1 < dateTime[4]) && ((days & 3) == 0)) &&\n     ((days != (days / 100) * 100 || (days + 0x76c == ((days + 0x76c) / 400) * 400)))) {\n    extraDays = extraDays + 1;\n  }\n  dateTime[7] = extraDays;\n  if (20000 < (int)&DAT_00002710 + days) {\n    temp4 = -1;\n    temp2 = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)days < 0x47) {\n    if (days != 0x46) {\n      for (temp6 = 0x45; (int)days < (int)temp6; temp6 = temp6 - 1) {\n        if ((temp6 & 3) == 0) {\n          if (temp6 == (temp6 / 100) * 100) {\n            if ((temp6 + 0x76c) % 400 == 0) {\n              temp4 = 0x16e;\n            }\n            else {\n              temp4 = 0x16d;\n            }\n          }\n          else {\n            temp4 = 0x16e;\n          }\n        }\n        else {\n          temp4 = 0x16d;\n        }\n        extraDays = extraDays - temp4;\n      }\n      if ((temp6 & 3) == 0) {\n        if (days == (days / 100) * 100) {\n          temp4 = 0x16d;\n          if ((days + 0x76c) % 400 == 0) {\n            temp4 = 0x16e;\n          }\n        }\n        else {\n          temp4 = 0x16e;\n        }\n      }\n      else {\n        temp4 = 0x16d;\n      }\n      extraDays = extraDays - temp4;\n    }\n  }\n  else {\n    temp6 = 0x46;\n    do {\n      if ((temp6 & 3) == 0) {\n        if (temp6 % 100 == 0) {\n          if ((temp6 + 0x76c) % 400 == 0) {\n            temp4 = 0x16e;\n          }\n          else {\n            temp4 = 0x16d;\n          }\n        }\n        else {\n          temp4 = 0x16e;\n        }\n      }\n      else {\n        temp4 = 0x16d;\n      }\n      temp6 = temp6 + 1;\n      extraDays = extraDays + temp4;\n    } while (days != temp6);\n  }\n  totalSeconds = (longlong)extraDays * 0x15180 + (longlong)(dateTime[2] * 0xe10 + dateTime[1] * 0x3c + *dateTime)\n  ;\n  seconds = (uint)totalSeconds;\n  temp4 = (int)((ulonglong)totalSeconds >> 0x20);\n  FUN_000050e8();\n  FUN_00005100();\n  temp6 = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    days = returnValue[10];\n    temp4 = (uint)totalSeconds + days;\n    temp2 = (int)((ulonglong)totalSeconds >> 0x20) +\n            ((int)days >> 0x1f) + (uint)CARRY4((uint)totalSeconds,days);\n  }\n  else {\n    threshold = dateTime[8];\n    isNegative = threshold;\n    if (0 < (int)threshold) {\n      isNegative = 1;\n    }\n    if ((returnValue[1] == dateTime[5] + 0x76c) || (temp2 = FUN_00004f98(), temp2 != 0)) {\n      temp7 = returnValue[0x14];\n      temp1 = returnValue[0x12];\n      temp5 = returnValue[10];\n      temp6 = temp1 - temp5;\n      temp2 = (returnValue[0x13] - ((int)temp5 >> 0x1f)) - (uint)(temp1 < temp5);\n      if (((int)((temp4 - temp2) - (uint)(seconds < temp6)) < 0 ==\n           (SBORROW4(temp4,temp2) != SBORROW4(temp4 - temp2,(uint)(seconds < temp6)))) &&\n         (temp3 = (returnValue[0x13] - ((int)temp7 >> 0x1f)) - (uint)(temp1 < temp7),\n         isLeapYear = seconds < temp1 - temp7,\n         (int)((temp4 - temp3) - (uint)isLeapYear) < 0 !=\n         (SBORROW4(temp4,temp3) != SBORROW4(temp4 - temp3,(uint)isLeapYear)))) goto LAB_00004a88;\n      temp1 = returnValue[8] - temp7;\n      temp3 = (returnValue[9] - ((int)temp7 >> 0x1f)) - (uint)((uint)returnValue[8] < temp7);\n      if (*returnValue != 0) {\n        if ((int)((temp4 - temp3) - (uint)(seconds < temp1)) < 0 ==\n            (SBORROW4(temp4,temp3) != SBORROW4(temp4 - temp3,(uint)(seconds < temp1))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        temp6 = 0;\n        if ((int)threshold < 0) goto LAB_00004934;\nLAB_00004a14:\n        seconds = isNegative ^ temp6;\n        isNegative = temp6;\n        if (seconds == 1) {\n          if (temp6 == 0) {\n            temp4 = temp7 - temp5;\n          }\n          else {\n            temp4 = temp5 - temp7;\n          }\n          temp2 = dateTime[3];\n          *dateTime = *dateTime + temp4;\n          newTotalSeconds = totalSeconds + temp4;\n          FUN_00004634(dateTime);\n          temp2 = dateTime[3] - temp2;\n          totalSeconds = totalSeconds + temp4;\n          if (temp2 != 0) {\n            if (temp2 < 2) {\n              if (temp2 == -2 || temp2 + 2 < 0 != SCARRY4(temp2,2)) {\n                temp2 = 1;\n              }\n            }\n            else {\n              temp2 = -1;\n            }\n            temp4 = temp2 + dateTime[7];\n            extraDays = extraDays + temp2;\n            if (temp4 < 0) {\n              temp6 = days - 1;\n              if ((temp6 & 3) == 0) {\n                if (temp6 == (temp6 / 100) * 100) {\n                  temp4 = 0x16d;\n                  if ((days + 0x76b) % 400 != 0) {\n                    temp4 = 0x16c;\n                  }\n                }\n                else {\n                  temp4 = 0x16d;\n                }\n              }\n              else {\n                temp4 = 0x16c;\n              }\n            }\n            else {\n              if ((days & 3) == 0) {\n                if (days == (days / 100) * 100) {\n                  temp2 = 0x16d;\n                  if ((days + 0x76c) % 400 == 0) {\n                    temp2 = 0x16e;\n                  }\n                }\n                else {\n                  temp2 = 0x16e;\n                }\n              }\n              else {\n                temp2 = 0x16d;\n              }\n              if (temp2 <= temp4) {\n                temp4 = temp4 - temp2;\n              }\n            }\n            dateTime[7] = temp4;\n            totalSeconds = newTotalSeconds;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((temp4 - temp3) - (uint)(seconds < temp1)) < 0 !=\n          (SBORROW4(temp4,temp3) != SBORROW4(temp4 - temp3,(uint)(seconds < temp1)))) {\nLAB_0000491e:\n        if ((int)((temp4 - temp2) - (uint)(seconds < temp6)) < 0 ==\n            (SBORROW4(temp4,temp2) != SBORROW4(temp4 - temp2,(uint)(seconds < temp6))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)threshold) {\n        temp6 = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      temp6 = isNegative;\n      if (isNegative != 1) goto LAB_00004934;\n    }\n    days = returnValue[0x14];\n    temp4 = (uint)totalSeconds + days;\n    temp2 = (int)((ulonglong)totalSeconds >> 0x20) +\n            ((int)days >> 0x1f) + (uint)CARRY4((uint)totalSeconds,days);\n    temp6 = 1;\n  }\n  FUN_000050f4();\n  dateTime[8] = temp6;\n  dateTime[6] = (extraDays + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(temp2,temp4);\n}\n\n",
            "renaming": {
                "FUN_000047e4": "calculate_date_time_000047e4",
                "param_1": "dateTime",
                "lVar1": "totalSeconds",
                "lVar2": "newTotalSeconds",
                "piVar3": "returnValue",
                "uVar4": "temp1",
                "iVar5": "temp2",
                "iVar6": "temp3",
                "iVar7": "temp4",
                "uVar8": "temp5",
                "uVar9": "temp6",
                "uVar10": "temp7",
                "iVar11": "extraDays",
                "uVar12": "days",
                "uVar13": "isNegative",
                "uVar14": "threshold",
                "uVar15": "seconds",
                "bVar16": "isLeapYear"
            },
            "calling": [
                "FUN_00002654",
                "FUN_00002600"
            ],
            "called": [
                "FUN_00004f98",
                "FUN_00005100",
                "FUN_000050e8",
                "FUN_000050f4",
                "FUN_00004634",
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004b34": {
            "entrypoint": "0x00004b34",
            "current_name": "update_data_structure_00004b34",
            "code": "\nvoid updateDataStructure_00004b34(undefined4 *result,int size,undefined4 param3,undefined4 param4)\n\n{\n  int *tempPtr;\n  int **extraOutput;\n  int **tempPtr1;\n  int **currPtr;\n  int **nextPtr;\n  int **newPtr;\n  bool isMatch;\n  \n  if (size == 0) {\n    return;\n  }\n  newPtr = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    newPtr = (int **)((int)newPtr + *(int *)(size + -4));\n  }\n  FUN_00005790();\n  currPtr = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    newPtr[1] = (int *)0x0;\n    tempPtr1 = extraOutput;\n    DAT_1fff0db4 = newPtr;\n  }\n  else {\n    nextPtr = DAT_1fff0db4;\n    if (newPtr < DAT_1fff0db4) {\n      tempPtr1 = (int **)*newPtr;\n      currPtr = (int **)((int)newPtr + (int)tempPtr1);\n      isMatch = DAT_1fff0db4 == currPtr;\n      if (isMatch) {\n        currPtr = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      newPtr[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = newPtr;\n      if (isMatch) {\n        currPtr = (int **)((int)currPtr + (int)tempPtr1);\n        *newPtr = (int *)currPtr;\n      }\n    }\n    else {\n      do {\n        currPtr = nextPtr;\n        nextPtr = (int **)currPtr[1];\n        if (nextPtr == (int **)0x0) break;\n      } while (nextPtr <= newPtr);\n      tempPtr1 = (int **)*currPtr;\n      if ((int **)((int)currPtr + (int)tempPtr1) == newPtr) {\n        tempPtr1 = (int **)((int)tempPtr1 + (int)*newPtr);\n        *currPtr = (int *)tempPtr1;\n        if (nextPtr == (int **)((int)currPtr + (int)tempPtr1)) {\n          tempPtr = *nextPtr;\n          currPtr[1] = nextPtr[1];\n          tempPtr1 = (int **)((int)tempPtr1 + (int)tempPtr);\n          *currPtr = (int *)tempPtr1;\n        }\n      }\n      else if (newPtr < (int **)((int)currPtr + (int)tempPtr1)) {\n        *result = 0xc;\n      }\n      else {\n        tempPtr1 = (int **)((int)newPtr + (int)*newPtr);\n        isMatch = nextPtr == tempPtr1;\n        if (isMatch) {\n          tempPtr1 = (int **)*nextPtr;\n          nextPtr = (int **)nextPtr[1];\n        }\n        newPtr[1] = (int *)nextPtr;\n        if (isMatch) {\n          tempPtr1 = (int **)((int)tempPtr1 + (int)*newPtr);\n          *newPtr = (int *)tempPtr1;\n        }\n        currPtr[1] = (int *)newPtr;\n      }\n    }\n  }\n  FUN_0000579c(result,tempPtr1,currPtr,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004b34": "update_data_structure_00004b34",
                "param_1": "result",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "tempPtr",
                "extraout_r1": "extraOutput",
                "ppiVar2": "tempPtr1",
                "ppiVar3": "currPtr",
                "ppiVar4": "nextPtr",
                "ppiVar5": "newPtr",
                "bVar6": "isMatch"
            },
            "calling": [
                "FUN_0000404c",
                "FUN_000054a8",
                "FUN_00006192",
                "FUN_00006768",
                "FUN_000060cc",
                "FUN_00005780"
            ],
            "called": [
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "entrypoint": "0x00004bd0",
            "current_name": "resize_memory_block_00004bd0",
            "code": "\nuint resizeMemoryBlock_00004bd0(undefined4 *memoryBlock,uint originalSize,undefined4 param3,undefined4 param4)\n\n{\n  uint *previousBlock;\n  int iVar2;\n  uint blockDiff;\n  uint *currentBlock;\n  uint newSize;\n  \n  newSize = (originalSize + 3 & 0xfffffffc) + 8;\n  if (newSize < 0xc) {\n    newSize = 0xc;\n  }\n  if (((int)newSize < 0) || (newSize < originalSize)) {\n    *memoryBlock = 0xc;\n  }\n  else {\n    FUN_00005790();\n    previousBlock = DAT_1fff0db4;\n    for (currentBlock = DAT_1fff0db4; currentBlock != (uint *)0x0; currentBlock = (uint *)currentBlock[1]) {\n      blockDiff = *currentBlock - newSize;\n      if (-1 < (int)blockDiff) {\n        if (0xb < blockDiff) {\n          *currentBlock = blockDiff;\n          currentBlock = (uint *)((int)currentBlock + blockDiff);\n          goto LAB_00004c34;\n        }\n        if (previousBlock == currentBlock) {\n          DAT_1fff0db4 = (uint *)currentBlock[1];\n        }\n        if (previousBlock != currentBlock) {\n          previousBlock[1] = (uint)(uint *)currentBlock[1];\n        }\n        goto LAB_00004c42;\n      }\n      previousBlock = currentBlock;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = FUN_00000428(memoryBlock,0,previousBlock,0,param4);\n    }\n    previousBlock = (uint *)FUN_00000428(memoryBlock,newSize);\n    if ((previousBlock != (uint *)0xffffffff) &&\n       ((currentBlock = (uint *)((int)previousBlock + 3U & 0xfffffffc), previousBlock == currentBlock ||\n        (iVar2 = FUN_00000428(memoryBlock,(int)currentBlock - (int)previousBlock), iVar2 != -1)))) {\nLAB_00004c34:\n      *currentBlock = newSize;\nLAB_00004c42:\n      FUN_0000579c(memoryBlock);\n      newSize = (int)currentBlock + 0xbU & 0xfffffff8;\n      iVar2 = newSize - (int)(currentBlock + 1);\n      if (iVar2 == 0) {\n        return newSize;\n      }\n      *(uint *)((int)currentBlock + iVar2) = (int)(currentBlock + 1) - newSize;\n      return newSize;\n    }\n    *memoryBlock = 0xc;\n    FUN_0000579c(memoryBlock);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004bd0": "resize_memory_block_00004bd0",
                "param_1": "memoryBlock",
                "param_2": "originalSize",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "previousBlock",
                "puVar4": "currentBlock",
                "uVar3": "blockDiff",
                "uVar5": "newSize"
            },
            "calling": [
                "FUN_00005700",
                "FUN_00004248",
                "FUN_00005100",
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [
                "FUN_00000428",
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004c84": {
            "entrypoint": "0x00004c84",
            "current_name": "process_relocation_00004c84",
            "code": "\nvoid processRelocation_00004c84(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,undefined4 inputParam4)\n\n{\n  dword relocationOffset;\n  undefined4 param1Copy;\n  undefined4 param2Copy;\n  undefined4 param3Copy;\n  undefined4 param4Copy;\n  \n  relocationOffset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  param1Copy = inputParam1;\n  param2Copy = inputParam2;\n  param3Copy = inputParam3;\n  param4Copy = inputParam4;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  FUN_000057f8(relocationOffset,*(undefined4 *)(relocationOffset + 8),inputParam1,&param2Copy,param1Copy,&param2Copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004c84": "process_relocation_00004c84",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "dVar1": "relocationOffset",
                "uVar2": "param1Copy",
                "uStack_c": "param2Copy",
                "uStack_8": "param3Copy",
                "uStack_4": "param4Copy"
            },
            "calling": [
                "FUN_00003694",
                "FUN_00002b10",
                "FUN_00000ed8",
                "FUN_0000211c",
                "FUN_0000305c",
                "FUN_00002a88",
                "FUN_00002f74",
                "FUN_00000f04",
                "FUN_00003378",
                "FUN_00002ecc",
                "FUN_00002fe0",
                "FUN_00003524",
                "FUN_0000316c"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "entrypoint": "0x00004cb4",
            "current_name": "process_input_00004cb4",
            "code": "\nuint processInput_00004cb4(uint inputValue)\n\n{\n  dword offset;\n  undefined4 *pointer;\n  uint decrementedValue;\n  undefined *bytePointer;\n  undefined4 unknownVar1;\n  undefined4 unknownVar2;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  pointer = *(undefined4 **)(offset + 8);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (pointer == &DAT_000079b8) {\n    pointer = *(undefined4 **)(offset + 4);\n  }\n  else if (pointer == (undefined4 *)&DAT_000079d8) {\n    pointer = *(undefined4 **)(offset + 8);\n  }\n  else if (pointer == (undefined4 *)&DAT_00007998) {\n    pointer = *(undefined4 **)(offset + 0xc);\n  }\n  if ((-1 < (int)(pointer[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(pointer + 3) << 0x16))) {\n    FUNC_000045e8(pointer[0x16]);\n  }\n  decrementedValue = pointer[2] - 1;\n  pointer[2] = decrementedValue;\n  if (((int)decrementedValue < 0) && (((int)decrementedValue < (int)pointer[6] || (decrementedValue = inputValue & 0xff, decrementedValue == 10))))\n  {\n    inputValue = FUN_00005404(offset,inputValue,pointer,decrementedValue,unknownVar1,unknownVar2);\n  }\n  else {\n    bytePointer = (undefined *)*pointer;\n    *pointer = bytePointer + 1;\n    *bytePointer = (char)inputValue;\n    inputValue = inputValue & 0xff;\n  }\n  if ((-1 < (int)(pointer[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(pointer + 3) << 0x16))) {\n    FUNC_000045ec(pointer[0x16]);\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_00004cb4": "process_input_00004cb4",
                "param_1": "inputValue",
                "dVar1": "offset",
                "puVar2": "pointer",
                "uVar3": "decrementedValue",
                "puVar4": "bytePointer",
                "unaff_r4": "unknownVar1",
                "unaff_r5": "unknownVar2"
            },
            "calling": [
                "FUN_00002a00"
            ],
            "called": [
                "FUN_000045ec",
                "FUN_00005404",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004db8": {
            "entrypoint": "0x00004db8",
            "current_name": "reverse_binary_00004db8",
            "code": "\nundefined4 reverseBinary_00004db8(int input)\n\n{\n  char character;\n  dword offset;\n  int result;\n  char *pointer;\n  char **stringArray;\n  undefined4 returnValue;\n  char *currentCharacter;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  stringArray = *(char ***)(offset + 8);\n  if (*(int *)(offset + 0x18) == 0) {\n    FUN_000042a4(offset);\n  }\n  if (stringArray == (char **)&DAT_000079b8) {\n    stringArray = *(char ***)(offset + 4);\n  }\n  else if (stringArray == (char **)&DAT_000079d8) {\n    stringArray = *(char ***)(offset + 8);\n  }\n  else if (stringArray == (char **)&DAT_00007998) {\n    stringArray = *(char ***)(offset + 0xc);\n  }\n  if ((-1 < (int)stringArray[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(stringArray + 3) << 0x16))) {\n    FUNC_000045e8(stringArray[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(stringArray + 3) << 0x1c) < 0) && (stringArray[4] != (char *)0x0)) ||\n     (result = FUN_000054a8(offset,stringArray), result == 0)) {\n    currentCharacter = (char *)(input + -1);\n    do {\n      while( true ) {\n        currentCharacter = currentCharacter + 1;\n        character = *currentCharacter;\n        pointer = stringArray[2] + -1;\n        stringArray[2] = pointer;\n        if (character == '\\0') {\n          if (-1 < (int)pointer) {\n            currentCharacter = *stringArray;\n            returnValue = 10;\n            *stringArray = currentCharacter + 1;\n            *currentCharacter = '\\n';\n            goto LAB_00004d64;\n          }\n          result = FUN_00005404(offset,10,stringArray);\n          if (result != -1) {\n            returnValue = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)pointer < 0) && (((int)pointer < (int)stringArray[6] || (character == '\\n')))) break;\n        pointer = *stringArray;\n        *stringArray = pointer + 1;\n        *pointer = character;\n      }\n      result = FUN_00005404(offset,character,stringArray);\n    } while (result != -1);\n  }\nLAB_00004d60:\n  returnValue = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)stringArray[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(stringArray + 3) << 0x16))) {\n    FUNC_000045ec(stringArray[0x16]);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00004db8": "reverse_binary_00004db8",
                "param_1": "input",
                "cVar1": "character",
                "dVar2": "offset",
                "iVar3": "result",
                "pcVar4": "pointer",
                "ppcVar5": "stringArray",
                "uVar6": "returnValue",
                "pcVar7": "currentCharacter"
            },
            "calling": [
                "FUN_000023a4",
                "FUN_00003694",
                "FUN_00002b10",
                "FUN_000033c0",
                "FUN_0000305c",
                "FUN_00002a88",
                "FUN_00003478",
                "FUN_00002f74",
                "FUN_000034c0",
                "FUN_000033f4",
                "FUN_00003444",
                "FUN_00002fe0",
                "FUN_000031e0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_00005404",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "entrypoint": "0x00004dc8",
            "current_name": "update_value_00004dc8",
            "code": "\nvoid updateValue_00004dc8(undefined4 inputData,int dataAddress)\n\n{\n  int result;\n  uint newValue;\n  bool isPositive;\n  \n  result = FUN_00000490(inputData,(int)*(short *)(dataAddress + 0xe));\n  isPositive = -1 < result;\n  if (isPositive) {\n    newValue = *(int *)(dataAddress + 0x54) + result;\n  }\n  else {\n    newValue = *(ushort *)(dataAddress + 0xc) & 0xffffefff;\n  }\n  if (isPositive) {\n    *(uint *)(dataAddress + 0x54) = newValue;\n  }\n  if (!isPositive) {\n    *(short *)(dataAddress + 0xc) = (short)newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004dc8": "update_value_00004dc8",
                "param_1": "inputData",
                "param_2": "dataAddress",
                "iVar1": "result",
                "uVar2": "newValue",
                "bVar3": "isPositive"
            },
            "calling": [],
            "called": [
                "FUN_00000490"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dee": {
            "entrypoint": "0x00004dee",
            "current_name": "process_data_00004dee",
            "code": "\nundefined4 processData_00004dee(undefined4 output,int data,undefined4 input1,undefined4 input2)\n\n{\n  undefined4 result;\n  \n  if ((int)((uint)*(ushort *)(data + 0xc) << 0x17) < 0) {\n    FUN_000004f2(output,(int)*(short *)(data + 0xe),0,2);\n  }\n  *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) & 0xefff;\n  result = FUN_00000e38(input1,input2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004dee": "process_data_00004dee",
                "param_1": "output",
                "param_2": "data",
                "param_3": "input1",
                "param_4": "input2",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000004f2",
                "FUN_00000e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e26": {
            "entrypoint": "0x00004e26",
            "current_name": "update_data_00004e26",
            "code": "\nvoid updateData_00004e26(undefined4 arg1,int arg2)\n\n{\n  int result;\n  ushort updatedValue;\n  bool isNegative;\n  \n  result = FUN_000004f2(arg1,(int)*(short *)(arg2 + 0xe));\n  isNegative = result == -1;\n  if (isNegative) {\n    updatedValue = *(ushort *)(arg2 + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(arg2 + 0x54) = result;\n    updatedValue = *(ushort *)(arg2 + 0xc) | 0x1000;\n  }\n  if (isNegative) {\n    *(ushort *)(arg2 + 0xc) = updatedValue;\n  }\n  if (!isNegative) {\n    *(ushort *)(arg2 + 0xc) = updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004e26": "update_data_00004e26",
                "param_1": "arg1",
                "param_2": "arg2",
                "iVar1": "result",
                "uVar2": "updatedValue",
                "bVar3": "isNegative"
            },
            "calling": [],
            "called": [
                "FUN_000004f2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e52": {
            "entrypoint": "0x00004e52",
            "current_name": "compare_byte_arrays_00004e52",
            "code": "\nint compareByteArrays_00004e52(byte *array1,byte *array2)\n\n{\n  byte byteFromArray2;\n  uint byteFromArray1;\n  bool isEqual;\n  \n  do {\n    byteFromArray1 = (uint)*array1;\n    byteFromArray2 = *array2;\n    isEqual = byteFromArray1 == 1;\n    if (byteFromArray1 != 0) {\n      isEqual = byteFromArray1 == byteFromArray2;\n    }\n    array1 = array1 + 1;\n    array2 = array2 + 1;\n  } while (isEqual);\n  return byteFromArray1 - byteFromArray2;\n}\n\n",
            "renaming": {
                "FUN_00004e52": "compare_byte_arrays_00004e52",
                "param_1": "array1",
                "param_2": "array2",
                "bVar1": "byteFromArray2",
                "uVar2": "byteFromArray1",
                "bVar3": "isEqual"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00002fe0",
                "FUN_00002b10",
                "FUN_0000316c",
                "FUN_00004e52",
                "FUN_00002a18"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e66": {
            "entrypoint": "0x00004e66",
            "current_name": "calculate_difference_00004e66",
            "code": "\nint calculate_difference_00004e66(byte *data,int start_index,int length)\n\n{\n  byte *current_byte;\n  int difference;\n  byte *next_byte;\n  uint byte_value;\n  \n  if (length == 0) {\n    difference = 0;\n  }\n  else {\n    next_byte = (byte *)(start_index + -1);\n    current_byte = data;\n    do {\n      byte_value = (uint)*current_byte;\n      next_byte = next_byte + 1;\n      if ((byte_value != *next_byte) || (current_byte + 1 == data + length)) break;\n      current_byte = current_byte + 1;\n    } while (byte_value != 0);\n    difference = byte_value - *next_byte;\n  }\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_00004e66": "calculate_difference_00004e66",
                "param_1": "data",
                "param_2": "start_index",
                "param_3": "length",
                "pbVar1": "current_byte",
                "iVar2": "difference",
                "pbVar3": "next_byte",
                "uVar4": "byte_value"
            },
            "calling": [
                "FUN_0000562c",
                "FUN_00003524"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f84": {
            "entrypoint": "0x00004f84",
            "current_name": "parse_number_00004f84",
            "code": "\nuint parseNumber_00004f84(byte *input,byte **remainder,uint base)\n\n{\n  uint number;\n  uint ch;\n  uint isNegative;\n  uint digit;\n  int isValid;\n  uint maxDivisible;\n  uint divisor;\n  byte *ptr;\n  byte *nextPtr;\n  \n  nextPtr = input;\n  do {\n    ptr = nextPtr;\n    nextPtr = ptr + 1;\n    ch = (uint)*ptr;\n    isNegative = (byte)(&DAT_00007a99)[ch] & 8;\n  } while (((&DAT_00007a99)[ch] & 8) != 0);\n  if (ch == 0x2d) {\n    ch = (uint)*nextPtr;\n    isNegative = 1;\n    nextPtr = ptr + 2;\n  }\n  else if (ch == 0x2b) {\n    ch = (uint)*nextPtr;\n    nextPtr = ptr + 2;\n  }\n  if (base == 0) {\n    if (ch != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (ch != 0x30)) goto LAB_00004ed6;\n  if ((*nextPtr & 0xdf) == 0x58) {\n    ch = (uint)nextPtr[1];\n    base = 0x10;\n    nextPtr = nextPtr + 2;\n  }\n  else {\n    ch = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  maxDivisible = isNegative + 0x7fffffff;\n  isValid = 0;\n  divisor = maxDivisible / base;\n  number = 0;\n  do {\n    digit = ch - 0x30;\n    if (9 < digit) {\n      if (ch - 0x41 < 0x1a) {\n        digit = ch - 0x37;\n      }\n      else {\n        if (0x19 < ch - 0x61) break;\n        digit = ch - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit) break;\n    if (isValid != -1) {\n      if ((divisor < number) || ((divisor == number && ((int)(maxDivisible - base * divisor) < (int)digit)))) {\n        isValid = -1;\n      }\n      else {\n        number = number * base + digit;\n        isValid = 1;\n      }\n    }\n    ch = (uint)*nextPtr;\n    nextPtr = nextPtr + 1;\n  } while( true );\n  if (isValid == -1) {\n    *(undefined4 *)Elf32_Rel_ARRAY_1fff0200[16].r_offset = 0x22;\n    number = maxDivisible;\n    if (remainder == (byte **)0x0) {\n      return maxDivisible;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      number = -number;\n    }\n    if (remainder == (byte **)0x0) {\n      return number;\n    }\n    if (isValid == 0) goto LAB_00004f64;\n  }\n  input = nextPtr + -1;\nLAB_00004f64:\n  *remainder = input;\n  return number;\n}\n\n",
            "renaming": {
                "FUN_00004f84": "parse_number_00004f84",
                "param_1": "input",
                "param_2": "remainder",
                "param_3": "base",
                "uVar1": "number",
                "uVar2": "ch",
                "uVar3": "isNegative",
                "uVar4": "digit",
                "iVar5": "isValid",
                "uVar6": "maxDivisible",
                "uVar7": "divisor",
                "pbVar8": "ptr",
                "pbVar9": "nextPtr"
            },
            "calling": [
                "FUN_0000328c",
                "FUN_00004042"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f98": {
            "entrypoint": "0x00004f98",
            "current_name": "calculate_day_of_week_00004f98",
            "code": "\nundefined4 calculate_day_of_week_00004f98(uint year)\n\n{\n  uint *result_array;\n  undefined4 is_leap_year;\n  uint day_of_week;\n  int day_adjustment;\n  uint *result_array_iterator;\n  int index;\n  uint is_leap_year_adjustment;\n  int loop_counter;\n  int day_of_month;\n  uint is_leap_year_bool;\n  \n  result_array = (uint *)FUN_000056b0();\n  if ((int)year < 0x7b2) {\n    is_leap_year = 0;\n  }\n  else {\n    index = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    result_array[1] = year;\n    is_leap_year_bool = (uint)(year % 400 == 0);\n    result_array_iterator = result_array;\n    do {\n      day_of_week = result_array_iterator[5];\n      if (*(char *)(result_array_iterator + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)day_of_week < 0x3c) {\n            day_adjustment = 0;\n          }\n          else {\n            day_adjustment = 1;\n          }\n        }\n        else {\n          day_adjustment = 0;\n        }\n        day_adjustment = day_adjustment + index + day_of_week + -1;\n      }\n      else if (*(char *)(result_array_iterator + 2) == 'D') {\n        day_adjustment = index + day_of_week;\n      }\n      else {\n        is_leap_year_adjustment = is_leap_year_bool;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          is_leap_year_adjustment = 1;\n        }\n        loop_counter = 0;\n        day_adjustment = index;\n        while( true ) {\n          loop_counter = loop_counter + 1;\n          if ((int)result_array_iterator[3] <= loop_counter) break;\n          day_adjustment = day_adjustment + *(int *)(&UNK_00007b98 + loop_counter * 4 + is_leap_year_adjustment * 0x30);\n        }\n        day_of_month = day_of_week - (day_adjustment + 4U) % 7;\n        if (day_of_month < 0) {\n          day_of_month = day_of_month + 7;\n        }\n        for (day_of_month = (result_array_iterator[4] - 1) * 7 + day_of_month;\n            *(int *)(&UNK_00007b98 + loop_counter * 4 + is_leap_year_adjustment * 0x30) <= day_of_month; day_of_month = day_of_month + -7) {\n        }\n        day_adjustment = day_adjustment + day_of_month;\n      }\n      day_of_week = result_array_iterator[10] + day_adjustment * 0x15180 + result_array_iterator[6];\n      result_array_iterator[8] = day_of_week;\n      result_array_iterator[9] = (int)day_of_week >> 0x1f;\n      result_array_iterator = result_array_iterator + 10;\n    } while (result_array + 0x14 != result_array_iterator);\n    day_of_week = result_array[9];\n    is_leap_year_bool = result_array[0x13];\n    *result_array = (uint)((int)((day_of_week - is_leap_year_bool) - (uint)(result_array[8] < result_array[0x12])) < 0 !=\n                    (SBORROW4(day_of_week,is_leap_year_bool) !=\n                    SBORROW4(day_of_week - is_leap_year_bool,(uint)(result_array[8] < result_array[0x12]))));\n    is_leap_year = 1;\n  }\n  return is_leap_year;\n}\n\n",
            "renaming": {
                "FUN_00004f98": "calculate_day_of_week_00004f98",
                "param_1": "year",
                "puVar1": "result_array",
                "uVar2": "is_leap_year",
                "uVar3": "day_of_week",
                "iVar4": "day_adjustment",
                "puVar5": "result_array_iterator",
                "iVar6": "index",
                "uVar7": "is_leap_year_adjustment",
                "iVar8": "loop_counter",
                "iVar9": "day_of_month",
                "uVar10": "is_leap_year_bool"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050e8": {
            "entrypoint": "0x000050e8",
            "current_name": "get_memory_address_000050e8",
            "code": "\nundefined * get_memory_address_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050e8": "get_memory_address_000050e8"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050f4": {
            "entrypoint": "0x000050f4",
            "current_name": "get_initial_data_pointer_000050f4",
            "code": "\nundefined * get_initial_data_pointer_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050f4": "get_initial_data_pointer_000050f4"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005100": {
            "entrypoint": "0x00005100",
            "current_name": "parse_configuration_00005100",
            "code": "\nvoid parseConfiguration_00005100(void)\n\n{\n  dword offset;\n  int result;\n  char *configString;\n  int status;\n  int count;\n  undefined type;\n  char *str;\n  bool isFirst;\n  ushort *p1;\n  int *p2;\n  ushort *p3;\n  int *p4;\n  ushort hour;\n  ushort minute;\n  ushort second;\n  ushort local_36;\n  ushort local_34;\n  ushort local_32;\n  int len;\n  char *local_2c [2];\n  \n  offset = relocationArray[16].r_relocationOffset;\n  result = FUN_000056b0();\n  configString = (char *)FUN_000056a0(offset,&DAT_00007a5c);\n  if (configString == (char *)0x0) {\n    relocationArray[28].r_info = (dword)&DAT_00007a5f;\n    relocationArray[29].r_relocationOffset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = configString;\n    DAT_1fff0ddc = configString;\n    FUN_00005780(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (status = FUN_00004e52(), status != 0)) {\n    FUN_00005780(DAT_1fff0dd4);\n    status = FUN_00005ecc(configString);\n    DAT_1fff0dd4 = FUN_00004bd0(offset,status + 1);\n    if (DAT_1fff0dd4 != 0) {\n      FUN_00005ebc(DAT_1fff0dd4,configString);\n    }\n    if (*configString == ':') {\n      configString = configString + 1;\n    }\n    status = FUN_00005e68(configString,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&len);\n    if (0 < status) {\n      str = configString + len;\n      if (configString[len] == '-') {\n        str = str + 1;\n        status = -1;\n      }\n      else {\n        if (configString[len] == '+') {\n          str = str + 1;\n        }\n        status = 1;\n      }\n      minute = 0;\n      second = 0;\n      p1 = &minute;\n      p2 = &len;\n      p3 = &second;\n      p4 = &len;\n      count = FUN_00005e68(str,\"%hu%n:%hu%n:%hu%n\",&hour,&len,&minute,&len,\n                           &second,&len);\n      if (0 < count) {\n        *(uint *)(result + 0x28) =\n             ((uint)hour * 0xe10 + (uint)minute * 0x3c + (uint)second) * status;\n        relocationArray[28].r_info = (dword)&DAT_1fff0dc7;\n        str = str + len;\n        status = FUN_00005e68(str,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&len,p1,p2,p3,\n                             p4);\n        if (status < 1) {\n          relocationArray[29].r_relocationOffset = relocationArray[28].r_info;\n          DAT_1fff0ddc = *(char **)(result + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          relocationArray[29].r_relocationOffset = (dword)&DAT_1fff0dbc;\n          configString = str + len;\n          if (str[len] == '-') {\n            configString = configString + 1;\n            status = -1;\n          }\n          else {\n            if (str[len] == '+') {\n              configString = configString + 1;\n            }\n            status = 1;\n          }\n          hour = 0;\n          minute = 0;\n          second = 0;\n          len = 0;\n          count = FUN_00005e68(configString,\"%hu%n:%hu%n:%hu%n\",&hour,&len,&minute,&len,\n                               &second,&len);\n          if (count < 1) {\n            status = *(int *)(result + 0x28) + -0xe10;\n          }\n          else {\n            status = ((uint)hour * 0xe10 + (uint)minute * 0x3c + (uint)second) * status;\n          }\n          *(int *)(result + 0x50) = status;\n          configString = configString + len;\n          isFirst = false;\n          status = result;\n          while( true ) {\n            if (*configString == ',') {\n              configString = configString + 1;\n            }\n            if (*configString == 'M') {\n              count = FUN_00005e68(configString,\"M%hu%n.%hu%n.%hu%n\",&local_36,&len,&local_34,\n                                   &len,&local_32,&len);\n              if (count != 3) {\n                return;\n              }\n              if (0xb < local_36 - 1) {\n                return;\n              }\n              if (4 < local_34 - 1) {\n                return;\n              }\n              if (6 < local_32) {\n                return;\n              }\n              *(uint *)(status + 0xc) = (uint)local_36;\n              *(uint *)(status + 0x10) = (uint)local_34;\n              *(undefined *)(status + 8) = 0x4d;\n              *(uint *)(status + 0x14) = (uint)local_32;\n              str = configString + len;\n            }\n            else {\n              if (*configString == 'J') {\n                configString = configString + 1;\n                type = 0x4a;\n              }\n              else {\n                type = 0x44;\n              }\n              local_32 = FUN_00005fd8(configString,local_2c,10);\n              str = local_2c[0];\n              if (local_2c[0] == configString) {\n                if (isFirst) {\n                  *(undefined *)(result + 0x30) = 0x4d;\n                  *(undefined4 *)(result + 0x34) = 0xb;\n                  *(undefined4 *)(result + 0x38) = 1;\n                  *(undefined4 *)(result + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(result + 8) = 0x4d;\n                  *(undefined4 *)(result + 0xc) = 3;\n                  *(undefined4 *)(result + 0x10) = 2;\n                  *(undefined4 *)(result + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(status + 8) = type;\n                *(uint *)(status + 0x14) = (uint)local_32;\n              }\n            }\n            hour = 2;\n            minute = 0;\n            second = 0;\n            len = 0;\n            if (*str == '/') {\n              FUN_00005e68(str,&DAT_00007a85,&hour,&len,&minute,&len,&second,\n                           &len);\n            }\n            *(uint *)(status + 0x18) =\n                 (uint)hour * 0xe10 + (uint)minute * 0x3c + (uint)second;\n            status = status + 0x28;\n            configString = str + len;\n            if (isFirst) break;\n            isFirst = true;\n          }\n          FUN_00004f98(*(undefined4 *)(result + 4));\n          DAT_1fff0ddc = *(char **)(result + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(result + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005100": "parse_configuration_00005100",
                "dVar1": "offset",
                "iVar2": "result",
                "pcVar3": "configString",
                "iVar4": "status",
                "iVar5": "count",
                "uVar6": "type",
                "pcVar7": "str",
                "bVar8": "isFirst",
                "puVar9": "p1",
                "piVar10": "p2",
                "puVar11": "p3",
                "piVar12": "p4",
                "local_3c": "hour",
                "local_3a": "minute",
                "local_38": "second",
                "local_30": "len",
                "Elf32_Rel_ARRAY_1fff0200": "relocationArray",
                "offset": "relocationOffset"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_00005fd8",
                "FUN_00004f98",
                "FUN_00005ebc",
                "FUN_00004bd0",
                "FUN_00005e68",
                "FUN_000056b0",
                "FUN_00005780",
                "FUN_000056a0",
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005404": {
            "entrypoint": "0x00005404",
            "current_name": "process_data_00005404",
            "code": "\nuint processData_00005404(int dataPtr,uint param,int *array,undefined4 param4)\n\n{\n  int tempVar1;\n  uint tempVar2;\n  undefined *tempPtr;\n  \n  if ((dataPtr != 0) && (*(int *)(dataPtr + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (array == &DAT_000079b8) {\n    array = *(int **)(dataPtr + 4);\n  }\n  else if (array == (int *)&DAT_000079d8) {\n    array = *(int **)(dataPtr + 8);\n  }\n  else if (array == (int *)&DAT_00007998) {\n    array = *(int **)(dataPtr + 0xc);\n  }\n  array[2] = array[6];\n  tempVar2 = (uint)*(ushort *)(array + 3);\n  tempVar1 = tempVar2 << 0x1c;\n  if (((tempVar1 < 0) && (tempVar2 = array[4], tempVar2 != 0)) ||\n     (tempVar1 = FUN_000054a8(dataPtr,array,tempVar1,tempVar2,param4), tempVar1 == 0)) {\n    tempVar1 = *array - array[4];\n    param = param & 0xff;\n    if ((tempVar1 < array[5]) || (tempVar1 = FUN_00004158(dataPtr,array), tempVar1 == 0)) {\n      array[2] = array[2] + -1;\n      tempPtr = (undefined *)*array;\n      *array = (int)(tempPtr + 1);\n      *tempPtr = (char)param;\n      if (array[5] != tempVar1 + 1) {\n        if (-1 < (int)((uint)*(ushort *)(array + 3) << 0x1f)) {\n          return param;\n        }\n        if (param != 10) {\n          return param;\n        }\n      }\n      tempVar1 = FUN_00004158(dataPtr,array);\n      if (tempVar1 == 0) {\n        return param;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00005404": "process_data_00005404",
                "param_1": "dataPtr",
                "param_2": "param",
                "param_3": "array",
                "param_4": "param4",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "puVar3": "tempPtr"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00004cb4",
                "FUN_000057a8"
            ],
            "called": [
                "FUN_00004158",
                "FUN_000054a8",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000054a8": {
            "entrypoint": "0x000054a8",
            "current_name": "process_relocation_000054a8",
            "code": "\nuint processRelocation_000054a8(undefined4 *output,undefined4 *input)\n\n{\n  ushort temp1;\n  dword temp2;\n  ushort temp3;\n  uint temp4;\n  uint temp5;\n  \n  temp2 = relocations[16].r_offset;\n  if ((relocations[16].r_offset != 0) &&\n     (*(int *)(relocations[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(relocations[16].r_offset);\n  }\n  if (input == &DAT_000079b8) {\n    input = *(undefined4 **)(temp2 + 4);\n  }\n  else if (input == (undefined4 *)&DAT_000079d8) {\n    input = *(undefined4 **)(temp2 + 8);\n  }\n  else if (input == (undefined4 *)&DAT_00007998) {\n    input = *(undefined4 **)(temp2 + 0xc);\n  }\n  temp4 = (uint)*(ushort *)(input + 3);\n  temp3 = *(ushort *)(input + 3);\n  if (-1 < (int)(temp4 << 0x1c)) {\n    if (-1 < (int)(temp4 << 0x1b)) {\n      *output = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(temp4 << 0x1d) < 0) {\n      if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input[0xd] != input + 0x11) {\n          FUN_00004b34(output);\n        }\n        input[0xd] = 0;\n      }\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = input[4];\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  }\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    FUN_00005700(output,input);\n  }\n  temp1 = *(ushort *)(input + 3);\n  temp4 = (uint)temp1;\n  temp3 = *(ushort *)(input + 3);\n  temp5 = temp4 & 1;\n  if ((temp1 & 1) == 0) {\n    if (-1 < (int)(temp4 << 0x1e)) {\n      temp5 = input[5];\n    }\n    input[2] = temp5;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] != 0) {\n    return 0;\n  }\n  if ((temp1 & 0x80) == 0) {\n    return temp4 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(input + 3) = temp3 | 0x40;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000054a8": "process_relocation_000054a8",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "temp1",
                "dVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "Elf32_Rel_ARRAY_1fff0200": "relocations"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00005404",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00005700",
                "FUN_00004b34",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005584": {
            "entrypoint": "0x00005584",
            "current_name": "division_remainder_00005584",
            "code": "\nvoid divisionRemainder_00005584(uint *quotientAndRemainder,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *quotientAndRemainder = quotient;\n  quotientAndRemainder[1] = remainder;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005584": "division_remainder_00005584",
                "param_1": "quotientAndRemainder",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "calling": [
                "FUN_00004634"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000562c": {
            "entrypoint": "0x0000562c",
            "current_name": "find_equal_sign_0000562c",
            "code": "\nint find_equal_sign_0000562c(undefined4 param1,char *string,int *result_index)\n\n{\n  char current_char;\n  int *ptr_array;\n  int index;\n  char *str_ptr;\n  int *current_ptr;\n  int str_offset;\n  \n  FUN_00005fec();\n  str_ptr = string;\n  if (Elf32_Rel_ARRAY_1fff0200[41].r_offset != 0) {\n    do {\n      current_char = *str_ptr;\n      if (current_char == '\\0') {\n        str_offset = (int)str_ptr - (int)string;\n        ptr_array = (int *)Elf32_Rel_ARRAY_1fff0200[41].r_offset;\n        while( true ) {\n          current_ptr = ptr_array;\n          if (*current_ptr == 0) break;\n          index = FUN_00004e66(*current_ptr,string,str_offset);\n          ptr_array = current_ptr + 1;\n          if ((index == 0) && (index = *current_ptr, *(char *)(index + str_offset) == '=')) {\n            *result_index = (int)((int)current_ptr - Elf32_Rel_ARRAY_1fff0200[41].r_offset) >> 2;\n            FUN_00005ff8(param1);\n            return index + str_offset + 1;\n          }\n        }\n        break;\n      }\n      str_ptr = str_ptr + 1;\n    } while (current_char != '=');\n  }\n  FUN_00005ff8(param1);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000562c": "find_equal_sign_0000562c",
                "param_1": "param1",
                "param_2": "string",
                "param_3": "result_index",
                "cVar1": "current_char",
                "piVar2": "ptr_array",
                "iVar3": "index",
                "pcVar4": "str_ptr",
                "piVar5": "current_ptr",
                "iVar6": "str_offset"
            },
            "calling": [
                "FUN_000056a0"
            ],
            "called": [
                "FUN_00005ff8",
                "FUN_00004e66",
                "FUN_00005fec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056a0": {
            "entrypoint": "0x000056a0",
            "current_name": "extract_and_process_data_000056a0",
            "code": "\nvoid extractAndProcessData_000056a0(undefined4 inputData,undefined4 dataSegment1,undefined4 dataSegment2,undefined4 outputData)\n\n{\n  undefined4 tempDataSegment1;\n  undefined4 tempDataSegment2;\n  \n  tempDataSegment1 = dataSegment1;\n  tempDataSegment2 = dataSegment2;\n  FUN_0000562c(inputData,dataSegment1,&tempDataSegment1,outputData,inputData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000056a0": "extract_and_process_data_000056a0",
                "param_1": "inputData",
                "param_2": "dataSegment1",
                "param_3": "dataSegment2",
                "param_4": "outputData",
                "uStack_c": "tempDataSegment1",
                "uStack_8": "tempDataSegment2"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_0000562c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b0": {
            "entrypoint": "0x000056b0",
            "current_name": "get_memory_address_000056b0",
            "code": "\nundefined4 getMemoryAddress_000056b0(void)\n\n{\n  return 0x1fff02f0;\n}\n\n",
            "renaming": {
                "FUN_000056b0": "get_memory_address_000056b0"
            },
            "calling": [
                "FUN_00004f98",
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b8": {
            "entrypoint": "0x000056b8",
            "current_name": "check_memory_segment_000056b8",
            "code": "\nundefined4 checkMemorySegment_000056b8(undefined4 param_1,int memorySegment,undefined4 *outputStatus,uint *outputValue)\n\n{\n  int result;\n  undefined4 status;\n  undefined stackBuffer [4];\n  uint localValue;\n  \n  if ((*(short *)(memorySegment + 0xe) < 0) ||\n     (result = FUN_00000514(param_1,(int)*(short *)(memorySegment + 0xe),stackBuffer), result < 0)) {\n    *outputValue = 0;\n    if ((int)((uint)*(ushort *)(memorySegment + 0xc) << 0x18) < 0) {\n      status = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *outputValue = (uint)((localValue & 0xf000) == 0x2000);\n  }\n  status = 0x400;\nLAB_000056f8:\n  *outputStatus = status;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000056b8": "check_memory_segment_000056b8",
                "param_2": "memorySegment",
                "param_3": "outputStatus",
                "param_4": "outputValue",
                "iVar1": "result",
                "uVar2": "status",
                "auStack_68": "stackBuffer",
                "local_64": "localValue"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [
                "FUN_00000514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005700": {
            "entrypoint": "0x00005700",
            "current_name": "process_data_00005700",
            "code": "\nvoid processData_00005700(int data,int *result)\n\n{\n  ushort status;\n  int errorCode;\n  int tempData;\n  int *tempResult;\n  \n  if (-1 < (int)((uint)*(ushort *)(result + 3) << 0x1e)) {\n    tempData = data;\n    tempResult = result;\n    status = FUN_000056b8(data,result,&tempData,&tempResult);\n    errorCode = FUN_00004bd0(data,tempData);\n    if (errorCode != 0) {\n      *(undefined **)(data + 0x28) = &DAT_0000423d;\n      *result = errorCode;\n      *(ushort *)(result + 3) = *(ushort *)(result + 3) | 0x80;\n      result[5] = tempData;\n      result[4] = errorCode;\n      if ((tempResult != (int *)0x0) &&\n         (errorCode = FUN_00000534(data,(int)*(short *)((int)result + 0xe)), errorCode != 0)) {\n        *(ushort *)(result + 3) = *(ushort *)(result + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(result + 3) = status | *(ushort *)(result + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(result + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(result + 3) = *(ushort *)(result + 3) & 0xfffc | 2;\n  }\n  *result = (int)result + 0x47;\n  result[4] = (int)result + 0x47;\n  result[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005700": "process_data_00005700",
                "param_1": "data",
                "param_2": "result",
                "uVar1": "status",
                "iVar2": "errorCode",
                "local_18": "tempData",
                "local_14": "tempResult"
            },
            "calling": [
                "FUN_000054a8",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00000534",
                "FUN_00004bd0",
                "FUN_000056b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005780": {
            "entrypoint": "0x00005780",
            "current_name": "resolve_relocation_00005780",
            "code": "\nvoid resolve_relocation_00005780(undefined4 data)\n\n{\n  FUN_00004b34(relocation_array[16].r_offset,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005780": "resolve_relocation_00005780",
                "param_1": "data",
                "Elf32_Rel_ARRAY_1fff0200": "relocation_array"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005790": {
            "entrypoint": "0x00005790",
            "current_name": "initialize_data_00005790",
            "code": "\nvoid initializeData_00005790(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005790": "initialize_data_00005790"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000579c": {
            "entrypoint": "0x0000579c",
            "current_name": "initialize_data_0000579c",
            "code": "\nvoid initializeData_0000579c(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000579c": "initialize_data_0000579c"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057a8": {
            "entrypoint": "0x000057a8",
            "current_name": "process_input_000057a8",
            "code": "\nint process_input_000057a8(undefined4 status,int input_value,undefined4 *data_array)\n\n{\n  int element_index;\n  undefined *current_element;\n  \n  element_index = data_array[2] + -1;\n  data_array[2] = element_index;\n  if ((element_index < 0) && ((element_index < (int)data_array[6] || (input_value == 10)))) {\n    element_index = FUN_00005404();\n    return element_index;\n  }\n  current_element = (undefined *)*data_array;\n  *data_array = current_element + 1;\n  *current_element = (char)input_value;\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_000057a8": "process_input_000057a8",
                "param_1": "status",
                "param_2": "input_value",
                "param_3": "data_array",
                "iVar1": "element_index",
                "puVar2": "current_element"
            },
            "calling": [
                "FUN_000057d2"
            ],
            "called": [
                "FUN_00005404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057d2": {
            "entrypoint": "0x000057d2",
            "current_name": "process_data_000057d2",
            "code": "\nint process_data_000057d2(undefined4 arg1,undefined4 arg2,undefined *data,int size)\n\n{\n  int result;\n  undefined *end;\n  int current_index;\n  \n  end = data + size;\n  current_index = size;\n  do {\n    if (data == end) {\n      return 0;\n    }\n    result = FUN_000057a8(arg1,*data,arg2,size,current_index);\n    size = result + 1;\n    data = data + 1;\n  } while (size != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000057d2": "process_data_000057d2",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "size",
                "iVar1": "result",
                "puVar2": "end",
                "iVar3": "current_index"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000057a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057f8": {
            "entrypoint": "0x000057f8",
            "current_name": "parse_data_000057f8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint parseData_000057f8(int dataPtr,undefined4 *paramPtr,byte *byteArray,int *intArray)\n\n{\n  int index;\n  int returnValue;\n  int *intPointer;\n  bool isDigit;\n  byte *bytePointer;\n  int tempVar;\n  byte *currentByte;\n  int *outputArray;\n  uint flags;\n  int dotValue;\n  undefined4 unusedVar;\n  int currentNum;\n  int totalSize;\n  byte currentChar;\n  undefined const1;\n  undefined const2;\n  undefined sign;\n  undefined4 unusedVar2;\n  \n  if ((dataPtr != 0) && (*(int *)(dataPtr + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (paramPtr == &DAT_000079b8) {\n    paramPtr = *(undefined4 **)(dataPtr + 4);\n  }\n  else if (paramPtr == (undefined4 *)&DAT_000079d8) {\n    paramPtr = *(undefined4 **)(dataPtr + 8);\n  }\n  else if (paramPtr == (undefined4 *)&DAT_00007998) {\n    paramPtr = *(undefined4 **)(dataPtr + 0xc);\n  }\n  if ((-1 < (int)(paramPtr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(paramPtr + 3) << 0x16))) {\n    FUNC_000045e8(paramPtr[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(paramPtr + 3) << 0x1c)) || (paramPtr[4] == 0)) &&\n     (index = FUN_000054a8(dataPtr,paramPtr), index != 0)) {\n    if ((-1 < (int)(paramPtr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(paramPtr + 3) << 0x16)))\n    {\n      FUNC_000045ec(paramPtr[0x16]);\n    }\n    return -1;\n  }\n  totalSize = 0;\n  const1 = 0x20;\n  const2 = 0x30;\n  currentByte = byteArray;\n  outputArray = intArray;\nLAB_0000588e:\n  bytePointer = currentByte;\n  if (*bytePointer != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  currentByte = bytePointer + 1;\n  if (*bytePointer == 0x25) {\nLAB_0000589a:\n    index = (int)bytePointer - (int)byteArray;\n    if (index != 0) {\n      returnValue = FUN_000057d2(dataPtr,paramPtr,byteArray,index);\n      if (returnValue == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(paramPtr[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(paramPtr + 3) << 0x16))) {\n          FUNC_000045ec(paramPtr[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(paramPtr + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return totalSize;\n      }\n      totalSize = totalSize + index;\n    }\n    if (*bytePointer == 0) goto LAB_00005a06;\n    dotValue = -1;\n    unusedVar = 0;\n    flags = 0;\n    currentNum = 0;\n    sign = 0;\n    unusedVar2 = 0;\n    currentByte = bytePointer + 1;\n    while( true ) {\n      bytePointer = currentByte + 1;\n      index = FUN_00006010(\"#-0+ \",*currentByte,5);\n      if (index == 0) break;\n      flags = 1 << (index - 0x7bfcU & 0xff) | flags;\n      currentByte = bytePointer;\n    }\n    if ((int)(flags << 0x1b) < 0) {\n      sign = 0x20;\n    }\n    if ((int)(flags << 0x1c) < 0) {\n      sign = 0x2b;\n    }\n    if (*currentByte == 0x2a) {\n      intPointer = outputArray + 1;\n      currentNum = *outputArray;\n      outputArray = intPointer;\n      if (currentNum < 0) {\n        currentNum = -currentNum;\n        flags = flags | 2;\n      }\n    }\n    else {\n      isDigit = false;\n      index = currentNum;\n      bytePointer = currentByte;\n      while( true ) {\n        if (9 < *bytePointer - 0x30) break;\n        index = index * 10 + (*bytePointer - 0x30);\n        isDigit = true;\n        bytePointer = bytePointer + 1;\n      }\n      if (isDigit) {\n        currentNum = index;\n      }\n    }\n    if (*bytePointer == 0x2e) {\n      if (bytePointer[1] == 0x2a) {\n        dotValue = *outputArray;\n        if (dotValue < 0) {\n          dotValue = -1;\n        }\n        bytePointer = bytePointer + 2;\n        outputArray = outputArray + 1;\n      }\n      else {\n        isDigit = false;\n        dotValue = 0;\n        index = 0;\n        while( true ) {\n          bytePointer = bytePointer + 1;\n          if (9 < *bytePointer - 0x30) break;\n          index = index * 10 + (*bytePointer - 0x30);\n          isDigit = true;\n        }\n        if (isDigit) {\n          dotValue = index;\n        }\n      }\n    }\n    index = FUN_00006010(&DAT_00007c02,*bytePointer,3);\n    if (index != 0) {\n      flags = flags | 0x40 << (index - 0x7c02U & 0xff);\n      bytePointer = bytePointer + 1;\n    }\n    byteArray = bytePointer + 1;\n    currentChar = *bytePointer;\n    index = FUN_00006010(\"efgEFG\",currentChar,6);\n    if (index == 0) {\n      tempVar = FUN_00005b34(dataPtr,&flags,paramPtr,0x57d3,&outputArray);\n      if (tempVar == -1) goto LAB_00005a06;\n    }\n    else {\n      outputArray = (int *)(((int)outputArray + 7U & 0xfffffff8) + 8);\n    }\n    totalSize = totalSize + tempVar;\n    currentByte = byteArray;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "renaming": {
                "FUN_000057f8": "parse_data_000057f8",
                "param_1": "dataPtr",
                "param_2": "paramPtr",
                "param_3": "byteArray",
                "param_4": "intArray",
                "iVar1": "index",
                "iVar2": "returnValue",
                "piVar3": "intPointer",
                "bVar4": "isDigit",
                "pbVar5": "bytePointer",
                "unaff_r7": "tempVar",
                "pbVar6": "currentByte",
                "local_8c": "outputArray",
                "local_88": "flags",
                "local_84": "dotValue",
                "uStack_80": "unusedVar",
                "local_7c": "currentNum",
                "local_74": "totalSize",
                "local_70": "currentChar",
                "local_6f": "const1",
                "local_6e": "const2",
                "local_45": "sign",
                "local_30": "unusedVar2"
            },
            "calling": [
                "FUN_00004c84"
            ],
            "called": [
                "FUN_00005b34",
                "FUN_000045ec",
                "FUN_000054a8",
                "FUN_000042a4",
                "FUN_000057d2",
                "FUN_00006010",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005a58": {
            "entrypoint": "0x00005a58",
            "current_name": "reverse_and_count_00005a58",
            "code": "\nundefined4\nreverse_and_count_00005a58(undefined4 input_param,uint *data_array,uint *output_count,undefined4 unused_param,code *callback_function)\n\n{\n  int loop_index;\n  undefined4 result;\n  int callback_result;\n  uint max_count;\n  uint current_count;\n  bool flag;\n  \n  max_count = data_array[4];\n  if ((int)data_array[4] < (int)data_array[2]) {\n    max_count = data_array[2];\n  }\n  *output_count = max_count;\n  if (*(char *)((int)data_array + 0x43) != '\\0') {\n    *output_count = max_count + 1;\n  }\n  if ((int)(*data_array << 0x1a) < 0) {\n    *output_count = *output_count + 2;\n  }\n  if ((*data_array & 6) == 0) {\n    for (loop_index = 0; loop_index < (int)(data_array[3] - *output_count); loop_index = loop_index + 1) {\n      callback_result = (*callback_function)(input_param,unused_param,(int)data_array + 0x19,1);\n      if (callback_result == -1) goto error_label;\n    }\n  }\n  max_count = (uint)*(byte *)((int)data_array + 0x43);\n  if (max_count != 0) {\n    max_count = 1;\n  }\n  if ((int)(*data_array << 0x1a) < 0) {\n    *(undefined *)((int)data_array + max_count + 0x43) = 0x30;\n    *(undefined *)((int)data_array + max_count + 0x44) = *(undefined *)((int)data_array + 0x45);\n    max_count = max_count + 2;\n  }\n  loop_index = (*callback_function)(input_param,unused_param,(int)data_array + 0x43,max_count);\n  if (loop_index == -1) {\nerror_label:\n    result = 0xffffffff;\n  }\n  else {\n    max_count = data_array[3];\n    flag = (*data_array & 6) == 4;\n    if (flag) {\n      max_count = max_count - *output_count;\n    }\n    if (flag) {\n      max_count = max_count & ~((int)max_count >> 0x1f);\n    }\n    else {\n      max_count = 0;\n    }\n    if ((int)data_array[4] < (int)data_array[2]) {\n      max_count = max_count + (data_array[2] - data_array[4]);\n    }\n    for (current_count = 0; max_count != current_count; current_count = current_count + 1) {\n      loop_index = (*callback_function)(input_param,unused_param,(int)data_array + 0x1a,1);\n      if (loop_index == -1) goto error_label;\n    }\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00005a58": "reverse_and_count_00005a58",
                "param_1": "input_param",
                "param_2": "data_array",
                "param_3": "output_count",
                "param_4": "unused_param",
                "param_5": "callback_function",
                "iVar1": "loop_index",
                "uVar2": "result",
                "iVar3": "callback_result",
                "uVar4": "max_count",
                "uVar5": "current_count",
                "bVar6": "flag",
                "LAB_00005afc": "error_label"
            },
            "calling": [
                "FUN_00005b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005b34": {
            "entrypoint": "0x00005b34",
            "current_name": "format_number_to_string_00005b34",
            "code": "\ncode * formatNumberToString_00005b34(undefined4 format,uint *number,undefined4 formatFlag,code *outputFunction,uint **input\n                   )\n\n{\n  bool isPositive;\n  byte formatCharacter;\n  int result;\n  code *outputResult;\n  char *digitString;\n  int status;\n  char *formatString;\n  uint value;\n  uint *inputPosition;\n  uint base;\n  uint **inputCopy;\n  char **formatStringCopy;\n  uint formattedLength;\n  char *formattedString;\n  code *outputFunctionCopy;\n  \n  formatCharacter = *(byte *)(number + 6);\n  formatString = (char *)((int)number + 0x43);\n  outputFunctionCopy = outputFunction;\n  if (0x78 < formatCharacter) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)number + 0x42) = formatCharacter;\nLAB_00005bdc:\n    formatString = (char *)((int)number + 0x42);\n    value = 1;\nLAB_00005d28:\n    number[4] = value;\n    *(undefined *)((int)number + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (formatCharacter < 99) {\n    if (formatCharacter == 0) goto LAB_00005d06;\n    if (formatCharacter == 0x58) {\n      digitString = \"0123456789ABCDEF\";\n      *(undefined *)((int)number + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(formatCharacter) {\n  case 99:\n    value = **input;\n    *input = *input + 1;\n    *(char *)((int)number + 0x42) = (char)value;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    base = *number;\n    inputPosition = *input;\n    if ((int)(base << 0x18) < 0) {\n      value = *inputPosition;\n      *input = inputPosition + 1;\n    }\n    else {\n      value = *inputPosition;\n      *input = inputPosition + 1;\n      if ((base & 0x40) != 0) {\n        value = (uint)(short)value;\n      }\n    }\n    if ((int)value < 0) {\n      value = -value;\n      *(undefined *)((int)number + 0x43) = 0x2d;\n    }\n    digitString = \"0123456789ABCDEF\";\n    base = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    inputCopy = (uint **)*input;\n    base = *number;\n    value = number[5];\n    *input = (uint *)(inputCopy + 1);\n    inputPosition = *inputCopy;\n    if (((int)(base << 0x18) < 0) || (-1 < (int)(base << 0x19))) {\n      *inputPosition = value;\n    }\n    else {\n      *(short *)inputPosition = (short)value;\n    }\nLAB_00005d06:\n    number[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    inputPosition = *input;\n    value = *number;\n    *input = inputPosition + 1;\n    if (((int)(value << 0x18) < 0) || (-1 < (int)(value << 0x19))) {\n      value = *inputPosition;\n    }\n    else {\n      value = (uint)*(ushort *)inputPosition;\n    }\n    digitString = \"0123456789ABCDEF\";\n    if (formatCharacter == 0x6f) {\n      base = 8;\n    }\n    else {\n      base = 10;\n    }\n    break;\n  case 0x70:\n    *number = *number | 0x20;\n  case 0x78:\n    digitString = \"0123456789abcdef\";\n    *(undefined *)((int)number + 0x45) = 0x78;\nLAB_00005ca8:\n    base = *number;\n    value = **input;\n    *input = *input + 1;\n    if ((-1 < (int)(base << 0x18)) && ((int)(base << 0x19) < 0)) {\n      value = value & 0xffff;\n    }\n    if ((int)(base << 0x1f) < 0) {\n      *number = base | 0x20;\n    }\n    if (value == 0) {\n      *number = *number & 0xffffffdf;\n    }\n    base = 0x10;\n    break;\n  case 0x73:\n    formatStringCopy = (char **)*input;\n    *input = (uint *)(formatStringCopy + 1);\n    formatString = *formatStringCopy;\n    result = FUN_00006010(formatString,0,number[1],formatStringCopy,format,number,formatFlag);\n    if (result != 0) {\n      number[1] = result - (int)formatString;\n    }\n    value = number[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)number + 0x43) = 0;\nLAB_00005c36:\n  formattedLength = number[1];\n  number[2] = formattedLength;\n  if (-1 < (int)formattedLength) {\n    *number = *number & 0xfffffffb;\n  }\n  formattedString = formatString;\n  if ((value != 0) || (formattedLength != 0)) {\n    do {\n      formattedString = formattedString + -1;\n      *formattedString = digitString[value - base * (value / base)];\n      isPositive = base <= value;\n      value = value / base;\n    } while (isPositive);\n  }\n  if (((base == 8) && ((int)(*number << 0x1f) < 0)) && ((int)number[1] <= (int)number[4])) {\n    formattedString[-1] = '0';\n    formattedString = formattedString + -1;\n  }\n  number[4] = (int)formatString - (int)formattedString;\n  formatString = formattedString;\nLAB_00005c84:\n  result = FUN_00005a58(format,number,&outputFunctionCopy,formatFlag,outputFunction);\n  if ((result == -1) || (result = (*outputFunction)(format,formatFlag,formatString,number[4]), result == -1)) {\nLAB_00005c98:\n    outputResult = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*number << 0x1e) < 0) {\n      for (result = 0; result < (int)(number[3] - (int)outputFunctionCopy); result = result + 1) {\n        status = (*outputFunction)(format,formatFlag,(int)number + 0x19,1);\n        if (status == -1) goto LAB_00005c98;\n      }\n    }\n    outputResult = (code *)number[3];\n    if ((int)(code *)number[3] < (int)outputFunctionCopy) {\n      outputResult = outputFunctionCopy;\n    }\n  }\n  return outputResult;\n}\n\n",
            "renaming": {
                "FUN_00005b34": "format_number_to_string_00005b34",
                "param_1": "format",
                "param_2": "number",
                "param_3": "formatFlag",
                "param_4": "outputFunction",
                "param_5": "input",
                "bVar1": "isPositive",
                "bVar2": "formatCharacter",
                "iVar3": "result",
                "pcVar4": "outputResult",
                "pcVar5": "digitString",
                "iVar6": "status",
                "pcVar7": "formatString",
                "uVar8": "value",
                "puVar9": "inputPosition",
                "uVar10": "base",
                "uVar13": "formattedLength",
                "pcVar14": "formattedString",
                "local_24": "outputFunctionCopy",
                "ppuVar11": "inputCopy",
                "ppcVar12": "formatStringCopy"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00005a58",
                "FUN_00006010"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e10": {
            "entrypoint": "0x00005e10",
            "current_name": "extract_byte_from_data_00005e10",
            "code": "\nuint extract_byte_from_data_00005e10(int data_ptr,byte **byte_array_ptr)\n\n{\n  int result;\n  uint extracted_byte;\n  byte *current_byte;\n  \n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (byte_array_ptr == (byte **)&DAT_000079b8) {\n    byte_array_ptr = *(byte ***)(data_ptr + 4);\n  }\n  else if (byte_array_ptr == (byte **)&DAT_000079d8) {\n    byte_array_ptr = *(byte ***)(data_ptr + 8);\n  }\n  else if (byte_array_ptr == (byte **)&DAT_00007998) {\n    byte_array_ptr = *(byte ***)(data_ptr + 0xc);\n  }\n  result = FUN_00006768(data_ptr,byte_array_ptr);\n  if (result == 0) {\n    byte_array_ptr[1] = byte_array_ptr[1] + -1;\n    current_byte = *byte_array_ptr;\n    *byte_array_ptr = current_byte + 1;\n    extracted_byte = (uint)*current_byte;\n  }\n  else {\n    extracted_byte = 0xffffffff;\n  }\n  return extracted_byte;\n}\n\n",
            "renaming": {
                "FUN_00005e10": "extract_byte_from_data_00005e10",
                "param_1": "data_ptr",
                "param_2": "byte_array_ptr",
                "iVar1": "result",
                "uVar2": "extracted_byte",
                "pbVar3": "current_byte"
            },
            "calling": [
                "FUN_00004418"
            ],
            "called": [
                "FUN_00006768",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e68": {
            "entrypoint": "0x00005e68",
            "current_name": "process_data_00005e68",
            "code": "\nvoid processData_00005e68(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined2 constant1;\n  undefined2 constant2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined *pointer1;\n  undefined4 counter1;\n  undefined4 counter2;\n  undefined4 temp5;\n  undefined4 temp6;\n  \n  constant1 = 0x204;\n  temp1 = input1;\n  temp3 = input1;\n  temp5 = input3;\n  temp6 = input4;\n  temp2 = FUN_00005ecc();\n  pointer1 = &LAB_00004dea_1;\n  counter1 = 0;\n  counter2 = 0;\n  constant2 = 0xffff;\n  temp4 = temp2;\n  FUN_000061cc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,&temp1,input2,&temp5);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005e68": "process_data_00005e68",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "local_80": "temp1",
                "local_7c": "temp2",
                "local_74": "constant1",
                "local_72": "constant2",
                "local_70": "temp3",
                "local_6c": "temp4",
                "local_5c": "pointer1",
                "local_4c": "counter1",
                "local_38": "counter2",
                "uStack_8": "temp5",
                "uStack_4": "temp6"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_000061cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "entrypoint": "0x00005ebc",
            "current_name": "copy_string_00005ebc",
            "code": "\nvoid copyString_00005ebc(char *destination,char *source)\n\n{\n  char currentCharacter;\n  \n  do {\n    currentCharacter = *source;\n    *destination = currentCharacter;\n    source = source + 1;\n    destination = destination + 1;\n  } while (currentCharacter != '\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentCharacter"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "entrypoint": "0x00005ecc",
            "current_name": "find_string_length_00005ecc",
            "code": "\nchar * find_string_length_00005ecc(char *input_string)\n\n{\n  char current_char;\n  char *next_char;\n  char *current_ptr;\n  \n  current_ptr = input_string;\n  do {\n    next_char = current_ptr + 1;\n    current_char = *current_ptr;\n    current_ptr = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_00005ecc": "find_string_length_00005ecc",
                "param_1": "input_string",
                "cVar1": "current_char",
                "pcVar2": "next_char",
                "pcVar3": "current_ptr"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00005e68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005edc": {
            "entrypoint": "0x00005edc",
            "current_name": "convert_to_u_int_00005edc",
            "code": "\nuint convertToUInt_00005edc(undefined4 *result,byte *input,byte **output,uint base)\n\n{\n  uint convertedValue;\n  uint currentChar;\n  byte isNegative;\n  int status;\n  uint digitValue;\n  uint maxValue;\n  byte *currentPointer;\n  byte *nextPointer;\n  \n  nextPointer = input;\n  do {\n    currentPointer = nextPointer;\n    nextPointer = currentPointer + 1;\n    currentChar = (uint)*currentPointer;\n    isNegative = (&DAT_00007a99)[currentChar] & 8;\n  } while (((&DAT_00007a99)[currentChar] & 8) != 0);\n  if (currentChar == 0x2d) {\n    currentChar = (uint)*nextPointer;\n    isNegative = 1;\n    nextPointer = currentPointer + 2;\n  }\n  else if (currentChar == 0x2b) {\n    currentChar = (uint)*nextPointer;\n    nextPointer = currentPointer + 2;\n  }\n  if (base == 0) {\n    if (currentChar != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (currentChar != 0x30)) goto LAB_00005f26;\n  if ((*nextPointer & 0xdf) == 0x58) {\n    currentChar = (uint)nextPointer[1];\n    base = 0x10;\n    nextPointer = nextPointer + 2;\n  }\n  else {\n    currentChar = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  status = 0;\n  maxValue = 0xffffffff / base;\n  convertedValue = 0;\n  do {\n    digitValue = currentChar - 0x30;\n    if (9 < digitValue) {\n      if (currentChar - 0x41 < 0x1a) {\n        digitValue = currentChar - 0x37;\n      }\n      else {\n        if (0x19 < currentChar - 0x61) break;\n        digitValue = currentChar - 0x57;\n      }\n    }\n    if ((int)base <= (int)digitValue) break;\n    if (((status < 0) || (maxValue < convertedValue)) ||\n       ((maxValue == convertedValue && ((int)~(base * maxValue) < (int)digitValue)))) {\n      status = -1;\n    }\n    else {\n      convertedValue = convertedValue * base + digitValue;\n      status = 1;\n    }\n    currentChar = (uint)*nextPointer;\n    nextPointer = nextPointer + 1;\n  } while( true );\n  if (status < 0) {\n    *result = 0x22;\n    convertedValue = 0xffffffff;\n    if (output == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      convertedValue = -convertedValue;\n    }\n    if (output == (byte **)0x0) {\n      return convertedValue;\n    }\n    if (status == 0) goto LAB_00005fb8;\n  }\n  input = nextPointer + -1;\nLAB_00005fb8:\n  *output = input;\n  return convertedValue;\n}\n\n",
            "renaming": {
                "FUN_00005edc": "convert_to_u_int_00005edc",
                "param_1": "result",
                "param_2": "input",
                "param_3": "output",
                "param_4": "base",
                "uVar1": "convertedValue",
                "uVar2": "currentChar",
                "bVar3": "isNegative",
                "iVar4": "status",
                "uVar5": "digitValue",
                "uVar6": "maxValue",
                "pbVar7": "currentPointer",
                "pbVar8": "nextPointer"
            },
            "calling": [
                "FUN_00005fd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "entrypoint": "0x00005fd8",
            "current_name": "apply_relocation_00005fd8",
            "code": "\nvoid applyRelocation_00005fd8(undefined4 inputOffset,undefined4 param_2,undefined4 param_3)\n\n{\n  FUN_00005edc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,inputOffset,param_2,param_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fd8": "apply_relocation_00005fd8",
                "param_1": "inputOffset"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005edc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fec": {
            "entrypoint": "0x00005fec",
            "current_name": "initialize_memory_00005fec",
            "code": "\nvoid initializeMemory_00005fec(void)\n\n{\n  FUNC_000045e8(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fec": "initialize_memory_00005fec"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "entrypoint": "0x00005ff8",
            "current_name": "initialize_hardware_00005ff8",
            "code": "\nvoid initializeHardware_00005ff8(void)\n\n{\n  FUNC_000045ec(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ff8": "initialize_hardware_00005ff8"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006010": {
            "entrypoint": "0x00006010",
            "current_name": "find_last_occurrence_00006010",
            "code": "\nbyte * find_last_occurrence_00006010(uint *array,uint target,uint length)\n\n{\n  byte current_byte;\n  char first_byte_match;\n  char second_byte_match;\n  char third_byte_match;\n  char fourth_byte_match;\n  byte *next_byte_ptr;\n  uint *current_ptr;\n  byte *result_ptr;\n  uint ptr_remainder;\n  uint length_remainder;\n  uint first_comparison;\n  uint second_comparison;\n  bool first_comparison_result;\n  bool second_comparison_result;\n  bool third_comparison_result;\n  bool fourth_comparison_result;\n  \n  target = target & 0xff;\n  if ((int)length < 0x10) {\njoined_r0x00006070:\n    do {\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n      current_ptr = (uint *)((int)array + 1);\n      current_byte = *(byte *)array;\n      length = length - 1;\n      array = current_ptr;\n    } while (current_byte != target);\n  }\n  else {\n    ptr_remainder = (uint)array & 7;\n    while( true ) {\n      if (ptr_remainder == 0) {\n        ptr_remainder = target | target << 8;\n        ptr_remainder = ptr_remainder | ptr_remainder << 0x10;\n        length_remainder = length & 0xfffffff8;\n        do {\n          current_ptr = array + 2;\n          length_remainder = length_remainder - 8;\n          first_comparison = *array ^ ptr_remainder;\n          second_comparison = array[1] ^ ptr_remainder;\n          first_byte_match = -((char)first_comparison == '\\0');\n          second_byte_match = -((char)(first_comparison >> 8) == '\\0');\n          third_byte_match = -((char)(first_comparison >> 0x10) == '\\0');\n          fourth_byte_match = -((char)(first_comparison >> 0x18) == '\\0');\n          first_comparison = CONCAT13(fourth_byte_match,CONCAT12(third_byte_match,CONCAT11(second_byte_match,first_byte_match)));\n          first_comparison_result = (char)second_comparison != '\\0';\n          second_comparison_result = (char)(second_comparison >> 8) != '\\0';\n          third_comparison_result = (char)(second_comparison >> 0x10) != '\\0';\n          fourth_comparison_result = (char)(second_comparison >> 0x18) != '\\0';\n          second_comparison = CONCAT13(fourth_comparison_result * fourth_byte_match - !fourth_comparison_result,\n                            CONCAT12(third_comparison_result * third_byte_match - !third_comparison_result,\n                                     CONCAT11(second_comparison_result * second_byte_match - !second_comparison_result,first_comparison_result * first_byte_match - !first_comparison_result)));\n          if (second_comparison != 0) {\n            if (first_comparison == 0) {\n              result_ptr = (byte *)((int)array + 5);\n              first_comparison = second_comparison;\n            }\n            else {\n              result_ptr = (byte *)((int)array + 1);\n            }\n            if ((first_comparison & 1) == 0) {\n              first_comparison_result = (first_comparison & 0x100) == 0;\n              next_byte_ptr = result_ptr + 1;\n              if (first_comparison_result) {\n                first_comparison_result = (first_comparison & 0x18000) == 0;\n                next_byte_ptr = result_ptr + 2;\n              }\n              result_ptr = next_byte_ptr;\n              if (first_comparison_result) {\n                result_ptr = result_ptr + 1;\n              }\n            }\n            return result_ptr + -1;\n          }\n          array = current_ptr;\n        } while (length_remainder != 0);\n        length = length & 7;\n        goto joined_r0x00006070;\n      }\n      current_ptr = (uint *)((int)array + 1);\n      length = length - 1;\n      if (*(byte *)array == target) break;\n      ptr_remainder = (uint)current_ptr & 7;\n      array = current_ptr;\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)current_ptr + -1);\n}\n\n",
            "renaming": {
                "FUN_00006010": "find_last_occurrence_00006010",
                "param_1": "array",
                "param_2": "target",
                "param_3": "length",
                "bVar1": "current_byte",
                "cVar2": "first_byte_match",
                "cVar3": "second_byte_match",
                "cVar4": "third_byte_match",
                "cVar5": "fourth_byte_match",
                "pbVar6": "next_byte_ptr",
                "puVar7": "current_ptr",
                "pbVar8": "result_ptr",
                "uVar9": "ptr_remainder",
                "uVar10": "length_remainder",
                "uVar11": "first_comparison",
                "uVar12": "second_comparison",
                "bVar13": "first_comparison_result",
                "bVar14": "second_comparison_result",
                "bVar15": "third_comparison_result",
                "bVar16": "fourth_comparison_result"
            },
            "calling": [
                "FUN_00005b34",
                "FUN_0000656c",
                "FUN_000057f8",
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060b0": {
            "entrypoint": "0x000060b0",
            "current_name": "copy_array_000060b0",
            "code": "\nvoid copyArray_000060b0(int dstIndex,undefined *srcArray,int arrayLength)\n\n{\n  undefined *srcIndex;\n  undefined *endIndex;\n  undefined *dstArray;\n  \n  endIndex = srcArray + arrayLength;\n  dstArray = (undefined *)(dstIndex + -1);\n  if (srcArray != endIndex) {\n    do {\n      srcIndex = srcArray + 1;\n      dstArray = dstArray + 1;\n      *dstArray = *srcArray;\n      srcArray = srcIndex;\n    } while (srcIndex != endIndex);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000060b0": "copy_array_000060b0",
                "param_1": "dstIndex",
                "param_2": "srcArray",
                "param_3": "arrayLength",
                "puVar1": "srcIndex",
                "puVar2": "endIndex",
                "puVar3": "dstArray"
            },
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060cc": {
            "entrypoint": "0x000060cc",
            "current_name": "process_data_000060cc",
            "code": "\nint processData_000060cc(undefined4 data,int length,uint threshold,undefined4 additionalParam)\n\n{\n  int result;\n  uint compareValue;\n  \n  if (length != 0) {\n    if (threshold == 0) {\n      FUN_00004b34();\n      result = 0;\n    }\n    else {\n      compareValue = FUN_00006964();\n      result = length;\n      if ((compareValue < threshold) && (result = FUN_00004bd0(data,threshold), result != 0)) {\n        FUN_000060b0(result,length,threshold);\n        FUN_00004b34(data,length);\n      }\n    }\n    return result;\n  }\n  result = FUN_00004bd0(data,threshold,threshold,additionalParam);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000060cc": "process_data_000060cc",
                "param_1": "data",
                "param_2": "length",
                "param_3": "threshold",
                "param_4": "additionalParam",
                "iVar1": "result",
                "uVar2": "compareValue"
            },
            "calling": [
                "FUN_000068f0"
            ],
            "called": [
                "FUN_000060b0",
                "FUN_00004bd0",
                "FUN_00004b34",
                "FUN_00006964"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006192": {
            "entrypoint": "0x00006192",
            "current_name": "reset_and_check_param_00006192",
            "code": "\nundefined4 resetAndCheckParam_00006192(undefined4 param,undefined4 *paramsArray)\n\n{\n  if ((undefined4 *)paramsArray[13] != (undefined4 *)0x0) {\n    if ((undefined4 *)paramsArray[13] != paramsArray + 0x11) {\n      FUN_00004b34();\n    }\n    paramsArray[1] = paramsArray[16];\n    paramsArray[13] = 0;\n    if (paramsArray[16] != 0) {\n      *paramsArray = paramsArray[15];\n      return 0;\n    }\n  }\n  *paramsArray = paramsArray[4];\n  paramsArray[1] = 0;\n  *(ushort *)(paramsArray + 3) = *(ushort *)(paramsArray + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006192": "reset_and_check_param_00006192",
                "param_1": "param",
                "param_2": "paramsArray",
                "param_2[0xd]": "paramsArray[13]",
                "param_2[1]": "paramsArray[1]",
                "param_2[0x10]": "paramsArray[16]",
                "param_2[0xf]": "paramsArray[15]"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000061cc": {
            "entrypoint": "0x000061cc",
            "current_name": "parse_input_000061cc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint parseInput_000061cc(undefined4 param1,byte **param2,byte *param3,int **param4)\n\n{\n  int result;\n  uint charValue;\n  byte *nextChar;\n  uint byteValue;\n  int **resultArray;\n  undefined stack [256];\n  uint flag1;\n  undefined4 flag2;\n  uint tempFlag;\n  int returnValue;\n  int counter;\n  undefined *localArray;\n  int flag3;\n  undefined *funcPointer;\n  code *subFunction;\n  \n  returnValue = 0;\n  counter = 0;\n  funcPointer = &LAB_00006118_1;\n  subFunction = FUN_00006192 + 1;\n  resultArray = param4;\n  localArray = stack;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      byteValue = (uint)*param3;\n      if (byteValue == 0) {\n        return returnValue;\n      }\n      charValue = (byte)(&DAT_00007a99)[byteValue] & 8;\n      nextChar = param3 + 1;\n      if (((&DAT_00007a99)[byteValue] & 8) == 0) break;\n      while (((param3 = nextChar, 0 < (int)param2[1] ||\n              (result = (*subFunction)(param1,param2), result == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0))) {\n        counter = counter + 1;\n        param2[1] = param2[1] + -1;\n        *param2 = *param2 + 1;\n      }\n    }\n    if (byteValue == 0x25) break;\nLAB_00006352:\n    if (((int)param2[1] < 1) && (result = (*subFunction)(param1,param2), result != 0))\n    goto LAB_00006380;\n    if (**param2 != byteValue) {\n      return returnValue;\n    }\n    *param2 = *param2 + 1;\n    counter = counter + 1;\n    param2[1] = param2[1] + -1;\n    param3 = nextChar;\n  }\n  tempFlag = charValue;\n  flag1 = charValue;\n  if (param3[1] == 0x2a) {\n    nextChar = param3 + 2;\n    flag1 = 0x10;\n  }\n  while( true ) {\n    charValue = (uint)*nextChar;\n    if (9 < charValue - 0x30) break;\n    nextChar = nextChar + 1;\n    tempFlag = (tempFlag * 10 + charValue) - 0x30;\n  }\n  result = FUN_00006010(&DAT_00007c02,charValue,3);\n  if (result != 0) {\n    flag1 = 1 << (result - 0x7c02U & 0xff) | flag1;\n    nextChar = nextChar + 1;\n  }\n  param3 = nextChar + 1;\n  charValue = (uint)*nextChar;\n  if (charValue < 0x79) {\n    if (0x57 < charValue) {\n      switch(charValue) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        param3 = (byte *)FUN_0000687c(stack,param3);\n        flag1 = flag1 | 0x40;\n        flag3 = 1;\n        break;\n      case 99:\n        flag1 = flag1 | 0x40;\n        flag3 = 0;\n        break;\n      case 100:\n      case 0x75:\n        flag2 = 10;\nLAB_000063a0:\n        if (charValue < 0x6f) {\n          flag3 = 3;\n        }\n        else {\n          flag3 = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        flag3 = 5;\n        break;\n      case 0x69:\n        flag2 = 0;\n        flag3 = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(flag1 << 0x1b)) {\n          if ((int)(flag1 << 0x1f) < 0) {\n            *(short *)*resultArray = (short)counter;\n            resultArray = resultArray + 1;\n          }\n          else {\n            **resultArray = counter;\n            resultArray = resultArray + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        flag2 = 8;\n        flag3 = 4;\n        break;\n      case 0x70:\n        flag1 = flag1 | 0x20;\n      case 0x58:\n      case 0x78:\n        flag1 = flag1 | 0x200;\n        flag2 = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        flag3 = 2;\n      }\nLAB_000063ac:\n      if (((int)param2[1] < 1) && (result = (*subFunction)(param1,param2), result != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(flag1 << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0) {\n          counter = counter + 1;\n          nextChar = param2[1];\n          param2[1] = nextChar + -1;\n          if ((int)(nextChar + -1) < 1) {\n            result = (*subFunction)(param1,param2);\n            if (result != 0) goto LAB_00006380;\n          }\n          else {\n            *param2 = *param2 + 1;\n          }\n        }\n      }\n      if (flag3 < 3) {\n        result = FUN_000064bc(param1,&flag1,param2,&resultArray);\n      }\n      else {\n        if (4 < flag3) goto LAB_000061f6;\n        result = FUN_0000656c(param1,&flag1,param2,&resultArray);\n      }\n      if (result == 1) {\n        return returnValue;\n      }\n      if (result == 2) {\nLAB_00006380:\n        if (returnValue == 0) {\nLAB_00006388:\n          returnValue = -1;\n        }\n        else if ((*(ushort *)(param2 + 3) & 0x40) != 0) {\n          returnValue = -1;\n        }\n        return returnValue;\n      }\n      goto LAB_000061f6;\n    }\n    nextChar = param3;\n    if (charValue == 0x25) goto LAB_00006352;\n    if (charValue < 0x26) {\n      if (charValue != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (charValue - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  flag3 = 3;\n  flag2 = 10;\n  goto LAB_000063ac;\n}\n\n",
            "renaming": {
                "FUN_000061cc": "parse_input_000061cc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "charValue",
                "pbVar3": "nextChar",
                "uVar4": "byteValue",
                "local_2b0": "resultArray",
                "auStack_2ac": "stack",
                "local_1ac": "flag1",
                "local_1a8": "flag2",
                "local_1a4": "tempFlag",
                "local_1a0": "returnValue",
                "local_19c": "counter",
                "local_198": "localArray",
                "local_194": "flag3",
                "local_30": "funcPointer",
                "local_2c": "subFunction"
            },
            "calling": [
                "FUN_00005e68"
            ],
            "called": [
                "FUN_000064bc",
                "FUN_0000656c",
                "FUN_00006192",
                "FUN_00006010",
                "FUN_0000687c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000064bc": {
            "entrypoint": "0x000064bc",
            "current_name": "process_data_000064bc",
            "code": "\nundefined4 process_data_000064bc(undefined4 input,uint *data,byte **buffer,undefined4 *result)\n\n{\n  int status;\n  uint value;\n  byte **pointer;\n  byte *next_byte;\n  byte *current_byte;\n  byte *previous_byte;\n  int count;\n  \n  if (data[2] == 0) {\n    if (data[6] == 0) {\n      value = 1;\n    }\n    else {\n      value = 0xffffffff;\n    }\n    data[2] = value;\n  }\n  if (-1 < (int)(*data << 0x1b)) {\n    pointer = (byte **)*result;\n    *result = pointer + 1;\n    current_byte = *pointer;\n  }\n  count = 0;\n  do {\n    value = data[6];\n    if (value != 0) {\n      if (value == 1) {\n        if (*(char *)(data[5] + (uint)**buffer) == '\\0') {\n          if (count == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*data & 0x10) == 0) && (data[3] = data[3] + 1, data[6] != 0)) {\n            *current_byte = 0;\n          }\n          data[4] = count + data[4];\n          return 0;\n        }\n      }\n      else if ((value != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**buffer] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    previous_byte = current_byte;\n    if (-1 < (int)(*data << 0x1b)) {\n      previous_byte = current_byte + 1;\n      *current_byte = **buffer;\n    }\n    next_byte = buffer[1];\n    *buffer = *buffer + 1;\n    value = data[2] - 1;\n    buffer[1] = next_byte + -1;\n    count = count + 1;\n    data[2] = value;\n    current_byte = previous_byte;\n    if ((value == 0) ||\n       (((int)(next_byte + -1) < 1 &&\n        (status = (*(code *)data[0x60])(input,buffer,value,(code *)data[0x60],result),\n        status != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "input",
                "param_2": "data",
                "param_3": "buffer",
                "param_4": "result",
                "iVar1": "status",
                "uVar2": "value",
                "ppbVar3": "pointer",
                "pbVar4": "next_byte",
                "unaff_r6": "current_byte",
                "pbVar5": "previous_byte",
                "iVar6": "count"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000656c": {
            "entrypoint": "0x0000656c",
            "current_name": "reverse_and_improve_code_0000656c",
            "code": "\nundefined4 reverseAndImproveCode_0000656c(undefined4 input,uint *params,byte **data,undefined4 *result)\n\n{\n  int returnValue;\n  undefined4 processedData;\n  code *functionPointer;\n  uint temp1;\n  byte *temp2;\n  uint temp3;\n  undefined4 *resultPointer1;\n  uint *resultPointer2;\n  uint *tempPointer1;\n  uint *tempPointer2;\n  int additionalCount;\n  int loopCounter;\n  undefined *localDataArray [4];\n  \n  localDataArray[0] = &DAT_00007c2f;\n  localDataArray[1] = &DAT_00007c32;\n  localDataArray[2] = &DAT_00007c35;\n  functionPointer = (code *)&UNK_00004f81;\n  if (params[6] != 3) {\n    functionPointer = (code *)&UNK_00005fd5;\n  }\n  temp3 = params[2];\n  temp1 = temp3 - 1;\n  if (0x15c < temp1) {\n    additionalCount = temp3 - 0x15d;\n    temp3 = 0x15d;\n  }\n  if (0x15c < temp1) {\n    params[2] = temp3;\n  }\n  tempPointer2 = params + 7;\n  if (temp1 < 0x15d) {\n    additionalCount = 0;\n  }\n  *params = *params | 0xd00;\n  loopCounter = 0;\n  tempPointer1 = tempPointer2;\n  do {\n    returnValue = FUN_00006010(localDataArray[loopCounter],**data,2);\n    if (returnValue != 0) {\n      if (loopCounter == 1) {\n        if (params[1] == 0) {\n          params[1] = 8;\n          *params = *params | 0x200;\n        }\n        temp1 = *params & 0xfffffaff;\nLAB_000065f4:\n        *params = temp1;\n      }\n      else if (loopCounter == 2) {\n        if ((*params & 0x600) != 0x200) goto LAB_00006624;\n        params[1] = 0x10;\n        temp1 = *params | 0x100;\n        goto LAB_000065f4;\n      }\n      temp1 = params[2];\n      params[2] = temp1 - 1;\n      if (temp1 != 0) {\n        temp2 = *data;\n        *data = temp2 + 1;\n        resultPointer2 = (uint *)((int)tempPointer1 + 1);\n        *(byte *)tempPointer1 = *temp2;\n        temp2 = data[1];\n        data[1] = temp2 + -1;\n        tempPointer1 = resultPointer2;\n        if (((int)(temp2 + -1) < 1) &&\n           (returnValue = (*(code *)params[0x60])(input,data), returnValue != 0)) {\n          loopCounter = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    loopCounter = loopCounter + 1;\n  } while (loopCounter != 3);\n  if (params[1] == 0) {\n    params[1] = 10;\n  }\n  FUN_0000687c(params[5],\"01234567]\" + (8 - params[1]));\n  loopCounter = 0;\n  while( true ) {\n    resultPointer2 = tempPointer1;\n    if (params[2] == 0) break;\n    temp2 = *data;\n    temp1 = (uint)*temp2;\n    if (*(char *)(params[5] + temp1) == '\\0') break;\n    if ((temp1 == 0x30) && ((int)(*params << 0x14) < 0)) {\n      loopCounter = loopCounter + 1;\n      if (additionalCount != 0) {\n        additionalCount = additionalCount + -1;\n        params[2] = params[2] + 1;\n      }\n    }\n    else {\n      *params = *params & 0xfffff6ff;\n      resultPointer2 = (uint *)((int)tempPointer1 + 1);\n      *(byte *)tempPointer1 = *temp2;\n    }\n    temp2 = data[1];\n    data[1] = temp2 + -1;\n    if ((int)(temp2 + -1) < 1) {\n      returnValue = (*(code *)params[0x60])(input,data);\n      if (returnValue != 0) break;\n    }\n    else {\n      *data = *data + 1;\n    }\n    params[2] = params[2] - 1;\n    tempPointer1 = resultPointer2;\n  }\nLAB_000066ca:\n  if ((int)(*params << 0x17) < 0) {\n    if (tempPointer2 < resultPointer2) {\n      (*(code *)params[0x5f])(input,*(byte *)((int)resultPointer2 + -1),data);\n      resultPointer2 = (uint *)((int)resultPointer2 + -1);\n    }\n    if (resultPointer2 == tempPointer2) {\n      return 1;\n    }\n  }\n  if ((*params & 0x10) == 0) {\n    *(byte *)resultPointer2 = 0;\n    processedData = (*functionPointer)(input,tempPointer2,0,params[1]);\n    resultPointer1 = (undefined4 *)*result;\n    temp1 = *params;\n    *result = resultPointer1 + 1;\n    resultPointer1 = (undefined4 *)*resultPointer1;\n    if ((temp1 & 0x20) == 0) {\n      if ((int)(temp1 << 0x1f) < 0) {\n        *(short *)resultPointer1 = (short)processedData;\n      }\n      else {\n        *resultPointer1 = processedData;\n      }\n    }\n    else {\n      *resultPointer1 = processedData;\n    }\n    params[3] = params[3] + 1;\n  }\n  params[4] = (uint)((int)resultPointer2 + params[4] + (loopCounter - (int)tempPointer2));\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000656c": "reverse_and_improve_code_0000656c",
                "param_1": "input",
                "param_2": "params",
                "param_3": "data",
                "param_4": "result",
                "iVar1": "returnValue",
                "uVar2": "processedData",
                "pcVar3": "functionPointer",
                "uVar4": "temp1",
                "pbVar5": "temp2",
                "uVar6": "temp3",
                "puVar7": "resultPointer1",
                "puVar8": "resultPointer2",
                "puVar9": "tempPointer1",
                "puVar10": "tempPointer2",
                "unaff_r9": "additionalCount",
                "iVar11": "loopCounter",
                "local_34": "localDataArray"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00006010",
                "FUN_0000687c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006768": {
            "entrypoint": "0x00006768",
            "current_name": "process_data_00006768",
            "code": "\nundefined4\nprocessData_00006768(undefined4 *inputArray,undefined4 *dataPtr,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 temp1;\n  int temp2;\n  undefined4 temp3;\n  ushort flags;\n  uint value;\n  \n  if ((inputArray != (undefined4 *)0x0) && (inputArray[6] == 0)) {\n    FUN_000042a4();\n  }\n  if (dataPtr == &DAT_000079b8) {\n    dataPtr = (undefined4 *)inputArray[1];\n  }\n  else if (dataPtr == (undefined4 *)&DAT_000079d8) {\n    dataPtr = (undefined4 *)inputArray[2];\n  }\n  else if (dataPtr == (undefined4 *)&DAT_00007998) {\n    dataPtr = (undefined4 *)inputArray[3];\n  }\n  flags = *(ushort *)(dataPtr + 3);\n  dataPtr[1] = 0;\n  value = (uint)*(ushort *)(dataPtr + 3);\n  if ((int)(value << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(value << 0x1d) < 0) {\n    if ((undefined4 *)dataPtr[0xD] != (undefined4 *)0x0) {\n      if ((undefined4 *)dataPtr[0xD] != dataPtr + 0x11) {\n        FUN_00004b34(inputArray);\n      }\n      dataPtr[1] = dataPtr[0x10];\n      dataPtr[0xD] = 0;\n      if (dataPtr[0x10] != 0) {\n        *dataPtr = dataPtr[0xF];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(value << 0x1b)) {\n      *inputArray = 9;\n      flags = flags | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(value << 0x1c) < 0) {\n      temp2 = FUN_00004158(inputArray,dataPtr,value << 0x1c,value,param4);\n      if (temp2 != 0) {\n        return 0xffffffff;\n      }\n      dataPtr[2] = 0;\n      *(ushort *)(dataPtr + 3) = *(ushort *)(dataPtr + 3) & 0xfff7;\n      dataPtr[6] = 0;\n    }\n    *(ushort *)(dataPtr + 3) = *(ushort *)(dataPtr + 3) | 4;\n  }\n  if (dataPtr[4] == 0) {\n    FUN_00005700(inputArray,dataPtr);\n  }\n  flags = *(ushort *)(dataPtr + 3);\n  temp1 = *(undefined2 *)(dataPtr + 3);\n  if ((flags & 3) != 0) {\n    *(undefined2 *)(dataPtr + 3) = 1;\n    FUN_000043a0(0x1fff0284,&valueLAB_00006754_1);\n    *(undefined2 *)(dataPtr + 3) = temp1;\n    if ((flags & 9) == 9) {\n      FUN_0000404c(inputArray,dataPtr);\n    }\n  }\n  temp3 = dataPtr[4];\n  *dataPtr = temp3;\n  temp2 = (*(code *)dataPtr[9])(inputArray,dataPtr[8],temp3,dataPtr[5]);\n  dataPtr[1] = temp2;\n  if (0 < temp2) {\n    return 0;\n  }\n  flags = *(ushort *)(dataPtr + 3);\n  if (temp2 != 0) {\n    temp3 = 0;\n  }\n  else {\n    flags = flags | 0x20;\n  }\n  if (temp2 != 0) {\n    dataPtr[1] = temp3;\n    flags = flags | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(dataPtr + 3) = flags;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "param_1": "inputArray",
                "param_2": "dataPtr",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp1",
                "iVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "flags",
                "uVar5": "value",
                "param_1[6]": "inputArray[6]",
                "param_1[1]": "inputArray[1]",
                "param_1[2]": "inputArray[2]",
                "param_1[3]": "inputArray[3]",
                "param_2[1]": "dataPtr[1]",
                "param_2[0xd]": "dataPtr[0xD]",
                "param_2[0x10]": "dataPtr[0x10]",
                "param_2[0xf]": "dataPtr[0xF]",
                "param_2[4]": "dataPtr[4]",
                "param_2[9]": "dataPtr[9]",
                "param_2[8]": "dataPtr[8]",
                "param_2[5]": "dataPtr[5]",
                "&LAB_00006754_1": "&valueLAB_00006754_1"
            },
            "calling": [
                "FUN_00005e10"
            ],
            "called": [
                "FUN_00005700",
                "FUN_000043a0",
                "FUN_0000404c",
                "FUN_00004158",
                "FUN_00004b34",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000687c": {
            "entrypoint": "0x0000687c",
            "current_name": "extract_byte_sequence_0000687c",
            "code": "\nbyte * extract_byte_sequence_0000687c(int sequence_length,byte *byte_sequence)\n\n{\n  byte *result;\n  uint temp;\n  int index;\n  uint current_byte;\n  uint start_index;\n  uint end_index;\n  bool is_special_character;\n  \n  current_byte = (uint)*byte_sequence;\n  is_special_character = current_byte == 0x5e;\n  if (is_special_character) {\n    current_byte = (uint)byte_sequence[1];\n    byte_sequence = byte_sequence + 2;\n  }\n  else {\n    byte_sequence = byte_sequence + 1;\n  }\n  index = sequence_length + -1;\n  do {\n    index = index + 1;\n    *(bool *)index = is_special_character;\n  } while (index != sequence_length + 0xff);\n  if (current_byte == 0) {\n    result = byte_sequence + -1;\n  }\n  else {\nLAB_000068aa:\n    do {\n      start_index = current_byte;\n      *(bool *)(sequence_length + start_index) = !is_special_character;\n      byte_sequence = byte_sequence + 1;\n      while( true ) {\n        current_byte = (uint)byte_sequence[-1];\n        if (current_byte != 0x2d) break;\n        end_index = (uint)*byte_sequence;\n        if ((end_index == 0x5d) || (temp = start_index, (int)end_index < (int)start_index)) goto LAB_000068aa;\n        do {\n          temp = temp + 1;\n          *(bool *)(sequence_length + temp) = !is_special_character;\n        } while ((int)temp < (int)end_index);\n        index = ~start_index + end_index;\n        if ((int)end_index <= (int)start_index) {\n          index = 0;\n        }\n        start_index = start_index + 1 + index;\n        byte_sequence = byte_sequence + 2;\n      }\n      result = byte_sequence;\n    } while ((current_byte != 0x5d) && (result = byte_sequence + -1, current_byte != 0));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0000687c": "extract_byte_sequence_0000687c",
                "param_1": "sequence_length",
                "param_2": "byte_sequence",
                "pbVar1": "result",
                "uVar2": "temp",
                "iVar3": "index",
                "uVar4": "current_byte",
                "uVar5": "start_index",
                "uVar6": "end_index",
                "bVar7": "is_special_character"
            },
            "calling": [
                "FUN_0000656c",
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000068f0": {
            "entrypoint": "0x000068f0",
            "current_name": "initialize_data_000068f0",
            "code": "\nundefined4 initializeData_000068f0(undefined4 input,int *data)\n\n{\n  int tempVar1;\n  int tempVar2;\n  \n  if ((int *)data[0xd] == data + 0x11) {\n    tempVar1 = FUN_00004bd0(input,0x400);\n    if (tempVar1 != 0) {\n      data[0xe] = 0x400;\n      data[0xd] = tempVar1;\n      *(undefined *)(tempVar1 + 0x3ff) = *(undefined *)((int)data + 0x46);\n      *(undefined *)(tempVar1 + 0x3fe) = *(undefined *)((int)data + 0x45);\n      *(undefined *)(tempVar1 + 0x3fd) = *(undefined *)(data + 0x11);\n      *data = tempVar1 + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    tempVar2 = data[0xe];\n    tempVar1 = FUN_000060cc(input,(int *)data[0xd],tempVar2 << 1);\n    if (tempVar1 != 0) {\n      FUN_000060b0(tempVar1 + tempVar2,tempVar1,tempVar2);\n      data[0xd] = tempVar1;\n      data[0xe] = tempVar2 << 1;\n      *data = tempVar1 + tempVar2;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000068f0": "initialize_data_000068f0",
                "param_1": "input",
                "param_2": "data",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2"
            },
            "calling": [],
            "called": [
                "FUN_000060b0",
                "FUN_00004bd0",
                "FUN_000060cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006964": {
            "entrypoint": "0x00006964",
            "current_name": "sum_if_positive_00006964",
            "code": "\nint sum_if_positive_00006964(undefined4 result,int array)\n\n{\n  int index;\n  \n  index = *(int *)(array + -4) + -4;\n  if (*(int *)(array + -4) < 0) {\n    index = index + *(int *)(array + index);\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_00006964": "sum_if_positive_00006964",
                "param_1": "result",
                "param_2": "array",
                "iVar1": "index"
            },
            "calling": [
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006974": {
            "entrypoint": "0x00006974",
            "current_name": "get_limited_value_00006974",
            "code": "\nundefined8 getLimitedValue_00006974(int input1,int input2,int input3,int input4)\n\n{\n  int negativeInput;\n  undefined8 returnValue;\n  undefined tempArray [8];\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 < 0) {\n      input1 = 0;\n      input2 = -0x80000000;\n    }\n    else if (input2 != 0 || input1 != 0) {\n      input2 = 0x7fffffff;\n      input1 = -1;\n    }\n    return CONCAT44(input2,input1);\n  }\n  if (input2 < 0) {\n    negativeInput = -input2 - (uint)(input1 != 0);\n    if (input4 < 0) {\n      returnValue = FUN_00006a14(-input1,negativeInput,-input3,-input4 - (uint)(input3 != 0),tempArray);\n      return returnValue;\n    }\n    returnValue = FUN_00006a14(-input1,negativeInput,input3,input4,tempArray);\n    return CONCAT44(-(int)((ulonglong)returnValue >> 0x20) - (uint)((int)returnValue != 0),-(int)returnValue);\n  }\n  if (input4 < 0) {\n    returnValue = FUN_00006a14(input1,input2,-input3,-input4 - (uint)(input3 != 0),tempArray);\n    return CONCAT44(-(int)((ulonglong)returnValue >> 0x20) - (uint)((int)returnValue != 0),-(int)returnValue);\n  }\n  returnValue = FUN_00006a14();\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00006974": "get_limited_value_00006974",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "negativeInput",
                "uVar2": "returnValue",
                "local_8": "tempArray"
            },
            "calling": [
                "FUN_0000443c"
            ],
            "called": [
                "FUN_00006a14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006a14": {
            "entrypoint": "0x00006a14",
            "current_name": "calculate_quotient_00006a14",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong calculateQuotient_00006a14(uint dividend,uint divisor,uint quotientHigh,uint quotientLow,uint *result)\n\n{\n  code *jmpTable;\n  uint pattern1;\n  int leadingZeros;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool carryFlag;\n  ulonglong returnValue;\n  \n  if (quotientLow == 0) {\n    if (divisor < quotientHigh) {\n      leadingZeros = LZCOUNT(quotientHigh);\n      temp3 = quotientHigh;\n      if (leadingZeros != 0) {\n        temp3 = quotientHigh << leadingZeros;\n        divisor = dividend >> (0x20U - leadingZeros & 0xff) | divisor << leadingZeros;\n        dividend = dividend << leadingZeros;\n      }\n      temp4 = temp3 >> 0x10;\n      temp6 = divisor / temp4;\n      temp1 = dividend >> 0x10 | (divisor - temp4 * temp6) * 0x10000;\n      pattern1 = temp6 * (temp3 & 0xffff);\n      temp2 = temp6;\n      if (temp1 <= pattern1 && pattern1 - temp1 != 0) {\n        carryFlag = CARRY4(temp3,temp1);\n        temp1 = temp3 + temp1;\n        temp2 = temp6 - 1;\n        if ((carryFlag == false) && (temp1 <= pattern1 && pattern1 - temp1 != 0)) {\n          temp2 = temp6 - 2;\n          temp1 = temp1 + temp3;\n        }\n      }\n      temp6 = (temp1 - pattern1) / temp4;\n      temp4 = dividend & 0xffff | ((temp1 - pattern1) - temp4 * temp6) * 0x10000;\n      temp1 = temp6 * (temp3 & 0xffff);\n      pattern1 = temp6;\n      if (temp4 <= temp1 && temp1 - temp4 != 0) {\n        carryFlag = CARRY4(temp3,temp4);\n        temp4 = temp3 + temp4;\n        pattern1 = temp6 - 1;\n        if ((carryFlag == false) && (temp4 <= temp1 && temp1 - temp4 != 0)) {\n          pattern1 = temp6 - 2;\n          temp4 = temp4 + temp3;\n        }\n      }\n      temp4 = temp4 - temp1;\n      pattern1 = pattern1 | temp2 << 0x10;\n      temp3 = 0;\n    }\n    else {\n      if (quotientHigh == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jmpTable = (code *)software_udf(0xff,0x6abc);\n        returnValue = (*jmpTable)();\n        return returnValue;\n      }\n      leadingZeros = LZCOUNT(quotientHigh);\n      if (leadingZeros == 0) {\n        divisor = divisor - quotientHigh;\n        temp7 = quotientHigh >> 0x10;\n        temp5 = quotientHigh & 0xffff;\n        temp3 = 1;\n        temp2 = quotientHigh;\n      }\n      else {\n        temp2 = quotientHigh << leadingZeros;\n        temp7 = temp2 >> 0x10;\n        pattern1 = divisor >> (0x20U - leadingZeros & 0xff);\n        temp3 = dividend >> (0x20U - leadingZeros & 0xff) | divisor << leadingZeros;\n        temp1 = pattern1 / temp7;\n        temp5 = temp2 & 0xffff;\n        temp6 = temp3 >> 0x10 | (pattern1 - temp7 * temp1) * 0x10000;\n        temp4 = temp1 * temp5;\n        dividend = dividend << leadingZeros;\n        pattern1 = temp1;\n        if (temp6 <= temp4 && temp4 - temp6 != 0) {\n          carryFlag = CARRY4(temp2,temp6);\n          temp6 = temp2 + temp6;\n          pattern1 = temp1 - 1;\n          if ((carryFlag == false) && (temp6 <= temp4 && temp4 - temp6 != 0)) {\n            pattern1 = temp1 - 2;\n            temp6 = temp6 + temp2;\n          }\n        }\n        temp1 = (temp6 - temp4) / temp7;\n        divisor = temp3 & 0xffff | ((temp6 - temp4) - temp7 * temp1) * 0x10000;\n        temp4 = temp1 * temp5;\n        temp3 = temp1;\n        if (divisor <= temp4 && temp4 - divisor != 0) {\n          carryFlag = CARRY4(temp2,divisor);\n          divisor = temp2 + divisor;\n          temp3 = temp1 - 1;\n          if ((carryFlag == false) && (divisor <= temp4 && temp4 - divisor != 0)) {\n            temp3 = temp1 - 2;\n            divisor = divisor + temp2;\n          }\n        }\n        divisor = divisor - temp4;\n        temp3 = temp3 | pattern1 << 0x10;\n      }\n      temp6 = divisor / temp7;\n      temp4 = dividend >> 0x10 | (divisor - temp7 * temp6) * 0x10000;\n      pattern1 = temp5 * temp6;\n      temp1 = temp6;\n      if (temp4 <= pattern1 && pattern1 - temp4 != 0) {\n        carryFlag = CARRY4(temp2,temp4);\n        temp4 = temp2 + temp4;\n        temp1 = temp6 - 1;\n        if ((carryFlag == false) && (temp4 <= pattern1 && pattern1 - temp4 != 0)) {\n          temp1 = temp6 - 2;\n          temp4 = temp4 + temp2;\n        }\n      }\n      temp6 = (temp4 - pattern1) / temp7;\n      temp4 = dividend & 0xffff | ((temp4 - pattern1) - temp7 * temp6) * 0x10000;\n      temp5 = temp5 * temp6;\n      pattern1 = temp6;\n      if (temp4 <= temp5 && temp5 - temp4 != 0) {\n        carryFlag = CARRY4(temp2,temp4);\n        temp4 = temp2 + temp4;\n        pattern1 = temp6 - 1;\n        if ((carryFlag == false) && (temp4 <= temp5 && temp5 - temp4 != 0)) {\n          pattern1 = temp6 - 2;\n          temp4 = temp4 + temp2;\n        }\n      }\n      temp4 = temp4 - temp5;\n      pattern1 = pattern1 | temp1 << 0x10;\n    }\n    if (result != (uint *)0x0) {\n      *result = temp4 >> LZCOUNT(quotientHigh);\n      result[1] = 0;\n    }\n  }\n  else if (divisor < quotientLow) {\n    if (result != (uint *)0x0) {\n      *result = dividend;\n      result[1] = divisor;\n      return 0;\n    }\n    pattern1 = 0;\n    temp3 = 0;\n  }\n  else {\n    leadingZeros = LZCOUNT(quotientLow);\n    if (leadingZeros != 0) {\n      temp5 = 0x20 - leadingZeros;\n      temp1 = quotientHigh >> (temp5 & 0xff) | quotientLow << leadingZeros;\n      temp7 = temp1 >> 0x10;\n      pattern1 = divisor >> (temp5 & 0xff);\n      temp3 = dividend >> (temp5 & 0xff) | divisor << leadingZeros;\n      temp4 = pattern1 / temp7;\n      temp2 = temp3 >> 0x10 | (pattern1 - temp7 * temp4) * 0x10000;\n      temp6 = temp4 * (temp1 & 0xffff);\n      dividend = dividend << leadingZeros;\n      pattern1 = temp4;\n      if (temp2 <= temp6 && temp6 - temp2 != 0) {\n        carryFlag = CARRY4(temp1,temp2);\n        temp2 = temp1 + temp2;\n        pattern1 = temp4 - 1;\n        if ((carryFlag == false) && (temp2 <= temp6 && temp6 - temp2 != 0)) {\n          pattern1 = temp4 - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      temp4 = (temp2 - temp6) / temp7;\n      temp2 = temp3 & 0xffff | ((temp2 - temp6) - temp7 * temp4) * 0x10000;\n      temp6 = temp4 * (temp1 & 0xffff);\n      temp3 = temp4;\n      if (temp2 <= temp6 && temp6 - temp2 != 0) {\n        carryFlag = CARRY4(temp1,temp2);\n        temp2 = temp1 + temp2;\n        temp3 = temp4 - 1;\n        if ((carryFlag == false) && (temp2 <= temp6 && temp6 - temp2 != 0)) {\n          temp3 = temp4 - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      temp3 = temp3 | pattern1 << 0x10;\n      returnValue = (ulonglong)temp3 * (ulonglong)(quotientHigh << leadingZeros);\n      if (CONCAT44(temp2 - temp6,dividend) < returnValue) {\n        returnValue = returnValue - CONCAT44(temp1,quotientHigh << leadingZeros);\n        temp3 = temp3 - 1;\n      }\n      if (result != (uint *)0x0) {\n        pattern1 = ((temp2 - temp6) - (int)(returnValue >> 0x20)) - (uint)(dividend < (uint)returnValue);\n        *result = pattern1 << (temp5 & 0xff) | dividend - (uint)returnValue >> leadingZeros;\n        result[1] = pattern1 >> leadingZeros;\n      }\n      return (ulonglong)temp3;\n    }\n    if ((quotientLow < divisor) || (quotientHigh <= dividend)) {\n      carryFlag = dividend < quotientHigh;\n      dividend = dividend - quotientHigh;\n      divisor = (divisor - quotientLow) - (uint)carryFlag;\n      pattern1 = 1;\n    }\n    else {\n      pattern1 = 0;\n    }\n    temp3 = 0;\n    if (result != (uint *)0x0) {\n      *result = dividend;\n      result[1] = divisor;\n    }\n  }\n  return CONCAT44(temp3,pattern1);\n}\n\n",
            "renaming": {
                "FUN_00006a14": "calculate_quotient_00006a14",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotientHigh",
                "param_4": "quotientLow",
                "param_5": "result",
                "UNRECOVERED_JUMPTABLE": "jmpTable",
                "uVar1": "pattern1",
                "iVar2": "leadingZeros",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar8": "temp6",
                "uVar9": "temp7",
                "bVar10": "carryFlag",
                "uVar11": "returnValue"
            },
            "calling": [
                "FUN_00006974"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 136877,
    "layers": [
        [
            "FUN_00000410",
            "FUN_00000428",
            "FUN_00000490",
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000794",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_00000930",
            "FUN_0000093c",
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000d76",
            "FUN_00000d9c",
            "FUN_00000db0",
            "FUN_00000dc0",
            "FUN_00000dcc",
            "FUN_00000df4",
            "FUN_00000e14",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00000e64",
            "FUN_00000ed8",
            "FUN_00000f04",
            "FUN_00000f8c",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000010a0",
            "FUN_000010d4",
            "FUN_00001274",
            "FUN_0000129c",
            "FUN_000012b4",
            "FUN_000012e2",
            "FUN_00001318",
            "FUN_00001348",
            "FUN_00001360",
            "FUN_00001392",
            "FUN_000013b8",
            "FUN_00001448",
            "FUN_000014c4",
            "FUN_000015d0",
            "FUN_00001628",
            "FUN_00001688",
            "FUN_00001696",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00001734",
            "FUN_00001748",
            "FUN_00001778",
            "FUN_000017dc",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_0000191c",
            "FUN_00001960",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001a60",
            "FUN_00001ad4",
            "FUN_00001b10",
            "FUN_00001bb8",
            "FUN_00001c84",
            "FUN_00001cf0",
            "FUN_00001d08",
            "FUN_00001d3a",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001ddc",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00001ec4",
            "FUN_00001eea",
            "FUN_00001f80",
            "FUN_00001ff6",
            "FUN_00002028",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_0000211c",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_00002396",
            "FUN_000023a4",
            "FUN_000023c8",
            "FUN_000023d0",
            "FUN_0000240c",
            "FUN_00002434",
            "FUN_000024bc",
            "FUN_00002538",
            "FUN_0000258c",
            "FUN_000025f4",
            "FUN_00002600",
            "FUN_00002624",
            "FUN_00002654",
            "FUN_00002690",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_00002894",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_00002994",
            "FUN_00002a00",
            "FUN_00002a18",
            "FUN_00002a88",
            "FUN_00002b10",
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_00002e6c",
            "FUN_00002e9c",
            "FUN_00002eb4",
            "FUN_00002ecc",
            "FUN_00002f30",
            "FUN_00002f74",
            "FUN_00002fe0",
            "FUN_0000305c",
            "FUN_0000316c",
            "FUN_000031e0",
            "FUN_000031fc",
            "FUN_0000328c",
            "FUN_00003378",
            "FUN_000033c0",
            "FUN_000033f4",
            "FUN_00003444",
            "FUN_00003478",
            "FUN_000034c0",
            "FUN_00003524",
            "FUN_00003658",
            "FUN_00003688",
            "FUN_00003694",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00003e58",
            "FUN_00003e9e",
            "FUN_00003ec4",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_0000404c",
            "FUN_00004158",
            "FUN_000041d0",
            "FUN_000041f4",
            "FUN_00004248",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000042a4",
            "FUN_00004314",
            "FUN_000043a0",
            "FUN_00004418",
            "FUN_0000443c",
            "FUN_0000459c",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004634",
            "FUN_000047e4",
            "FUN_00004b34",
            "FUN_00004bd0",
            "FUN_00004c84",
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_00004dc8",
            "FUN_00004dee",
            "FUN_00004e26",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_00004f98",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005100",
            "FUN_00005404",
            "FUN_000054a8",
            "FUN_00005584",
            "FUN_0000562c",
            "FUN_000056a0",
            "FUN_000056b0",
            "FUN_000056b8",
            "FUN_00005700",
            "FUN_00005780",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_000057a8",
            "FUN_000057d2",
            "FUN_000057f8",
            "FUN_00005a58",
            "FUN_00005b34",
            "FUN_00005e10",
            "FUN_00005e68",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fd8",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000060cc",
            "FUN_00006192",
            "FUN_000061cc",
            "FUN_000064bc",
            "FUN_0000656c",
            "FUN_00006768",
            "FUN_0000687c",
            "FUN_000068f0",
            "FUN_00006964",
            "FUN_00006974",
            "FUN_00006a14"
        ]
    ],
    "locked_functions": []
}