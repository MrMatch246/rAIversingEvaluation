{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlag_08000110(undefined4 input)\n\n{\n  if ((char)DAT_20000228 == '\\0') {\n    DAT_20000228._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_64bit_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_64bit_08000134(undefined4 first_32bit_param,undefined4 second_32bit_param)\n\n{\n  return CONCAT44(second_32bit_param,first_32bit_param);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_64bit_08000134",
                "param_1": "first_32bit_param",
                "param_2": "second_32bit_param"
            },
            "calling": [
                "FUN_08004fb4"
            ],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000150": {
            "entrypoint": "0x08000150",
            "current_name": "find_null_terminated_string_08000150",
            "code": "\nchar * find_null_terminated_string_08000150(char *str)\n\n{\n  char current_char;\n  char *next_char_ptr;\n  char *current_char_ptr;\n  \n  current_char_ptr = str;\n  do {\n    next_char_ptr = current_char_ptr + 1;\n    current_char = *current_char_ptr;\n    current_char_ptr = next_char_ptr;\n  } while (current_char != '\\0');\n  return next_char_ptr + (-1 - (int)str);\n}\n\n",
            "renaming": {
                "FUN_08000150": "find_null_terminated_string_08000150",
                "param_1": "str",
                "cVar1": "current_char",
                "pcVar2": "next_char_ptr",
                "pcVar3": "current_char_ptr"
            },
            "calling": [
                "FUN_08004c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000168": {
            "entrypoint": "0x08000168",
            "current_name": "reverse_compute_08000168",
            "code": "\nulonglong reverse_compute_08000168(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int var13;\n  byte var9;\n  uint var6;\n  uint var7;\n  uint var8;\n  uint var1;\n  uint var5;\n  int var14;\n  uint var2;\n  uint uVar10;\n  uint var3;\n  uint var4;\n  bool var10;\n  bool var11;\n  bool var12;\n  \n  var1 = input4 ^ 0x80000000;\n  var2 = input2 << 1;\n  input4 = input4 << 1;\n  var10 = ((input2 ^ var1) & 0x7fffffff) == 0;\n  var11 = var10 && input1 == input3;\n  if (!var10 || input1 != input3) {\n    var11 = (var2 | input1) == 0;\n  }\n  if (!var11) {\n    var11 = (input4 | input3) == 0;\n  }\n  var14 = (int)var2 >> 0x15;\n  if (!var11) {\n    var11 = var14 == -1;\n  }\n  var13 = (int)input4 >> 0x15;\n  if (!var11) {\n    var11 = var13 == -1;\n  }\n  if (var11) {\n    if (var14 == -1 || var13 == -1) {\n      var2 = var1;\n      var3 = input3;\n      if (var14 == -1) {\n        var2 = input2;\n        var3 = input1;\n      }\n      if (var14 != -1 || var13 != -1) {\n        input3 = var3;\n        var1 = var2;\n      }\n      var11 = (var3 | var2 << 0xc) == 0;\n      if (var11) {\n        var11 = (input3 | var1 << 0xc) == 0;\n      }\n      if (var11) {\n        var11 = var2 == var1;\n      }\n      if (!var11) {\n        var2 = var2 | 0x80000;\n      }\n      return concatenate(var2,var3);\n    }\n    if (((input2 ^ var1) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((var2 | input1) == 0) {\n        input1 = input3;\n        input2 = var1;\n      }\n      return concatenate(input2,input1);\n    }\n    if (input2 != var1) {\n      return 0;\n    }\n    if (var2 >> 0x15 == 0) {\n      var11 = (input1 & 0x80000000) != 0;\n      var1 = input2 * 2 + (uint)var11;\n      if (carry_check(input2,input2) || carry_check(input2 * 2,(uint)var11)) {\n        var1 = var1 | 0x80000000;\n      }\n      return concatenate(var1,input1 << 1);\n    }\n    if (var2 < 0xffc00000) {\n      return concatenate(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  var2 = var2 >> 0x15;\n  input4 = input4 >> 0x15;\n  var3 = input4 - var2;\n  var11 = var3 != 0;\n  if (input4 < var2) {\n    var3 = -var3;\n  }\n  uVar10 = input1;\n  var5 = input2;\n  if (var11 && var2 <= input4) {\n    var2 = var2 + var3;\n    uVar10 = input3;\n    var5 = var1;\n    input3 = input1;\n    var1 = input2;\n  }\n  if (0x36 < var3) {\n    return concatenate(var5,uVar10);\n  }\n  var7 = var5 & 0xfffff | 0x100000;\n  if ((var5 & 0x80000000) != 0) {\n    var11 = uVar10 != 0;\n    uVar10 = -uVar10;\n    var7 = -var7 - (uint)var11;\n  }\n  var5 = var1 & 0xfffff | 0x100000;\n  if ((var1 & 0x80000000) != 0) {\n    var11 = input3 != 0;\n    input3 = -input3;\n    var5 = -var5 - (uint)var11;\n  }\n  if (var2 == var3) {\n    var5 = var5 ^ 0x100000;\n    if (var2 == 0) {\n      var7 = var7 ^ 0x100000;\n      var2 = 1;\n    }\n    else {\n      var3 = var3 - 1;\n    }\n  }\n  var1 = -var3 + 0x20;\n  if ((int)var3 < 0x21) {\n    var4 = input3 << (var1 & 0xff);\n    input3 = input3 >> (var3 & 0xff);\n    var6 = uVar10 + input3;\n    var8 = var5 << (var1 & 0xff);\n    var1 = var6 + var8;\n    var7 = var7 + carry_check(uVar10,input3) + ((int)var5 >> (var3 & 0xff)) +\n            (uint)carry_check(var6,var8);\n  }\n  else {\n    var4 = var5 << (-var3 + 0x40 & 0xff);\n    if (input3 != 0) {\n      var4 = var4 | 2;\n    }\n    var5 = (int)var5 >> (var3 - 0x20 & 0xff);\n    var1 = uVar10 + var5;\n    var7 = var7 + ((int)var5 >> 0x1f) + (uint)carry_check(uVar10,var5);\n  }\n  input2 = var7 & 0x80000000;\n  var3 = var7;\n  if ((int)var7 < 0) {\n    var11 = var4 == 0;\n    var4 = -var4;\n    var3 = -var1;\n    var1 = -(uint)!var11 - var1;\n    var3 = -(uint)(var11 <= var3) - var7;\n  }\n  if (0xfffff < var3) {\n    uVar10 = var2 - 1;\n    if (0x1fffff < var3) {\n      uVar10 = var3 & 1;\n      var3 = var3 >> 1;\n      var9 = (byte)var1;\n      var1 = (uint)(uVar10 != 0) << 0x1f | var1 >> 1;\n      var4 = (uint)(var9 & 1) << 0x1f | var4 >> 1;\n      uVar10 = var2;\n      if (0xffbfffff < var2 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    var11 = 0x7fffffff < var4;\n    if (var4 == 0x80000000) {\n      var11 = (var1 & 1) != 0;\n    }\n    return concatenate(var3 + uVar10 * 0x100000 + (uint)carry_check(var1,(uint)var11) | input2,\n                    var1 + var11);\n  }\n  var10 = (var4 & 0x80000000) != 0;\n  var4 = var4 << 1;\n  uVar10 = var1 * 2;\n  var11 = carry_check(var1,var1);\n  var1 = var1 * 2 + (uint)var10;\n  var3 = var3 * 2 + (uint)(var11 || carry_check(uVar10,(uint)var10));\n  uVar10 = var2 - 2;\n  if ((var3 & 0x100000) != 0) goto LAB_08000278;\n  var5 = var1;\n  var2 = var3;\n  if (var3 == 0) {\n    var5 = 0;\n    var2 = var1;\n  }\n  var14 = leading_zero_count(var2);\n  if (var3 == 0) {\n    var14 = var14 + 0x20;\n  }\n  var3 = var14 - 0xb;\n  var12 = signed_borrow_check(var3,0x20);\n  var1 = var14 - 0x2b;\n  var11 = (int)var1 < 0;\n  var10 = var1 == 0;\n  if ((int)var3 < 0x20) {\n    var12 = signed_carry_check(var1,0xc);\n    var14 = var14 + -0x1f;\n    var11 = var14 < 0;\n    var10 = var14 == 0;\n    var1 = var3;\n    if (!var10 && var11 == var12) {\n      var5 = var2 << (var3 & 0xff);\n      var2 = var2 >> (0xcU - var14 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (var10 || var11 != var12) {\n    var4 = 0x20 - var1;\n  }\n  var2 = var2 << (var1 & 0xff);\n  if (var10 || var11 != var12) {\n    var2 = var2 | var5 >> (var4 & 0xff);\n  }\n  if (var10 || var11 != var12) {\n    var5 = var5 << (var1 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)var3 <= (int)uVar10) {\n    return concatenate(var2 + (uVar10 - var3) * 0x100000 | input2,var5);\n  }\n  var1 = ~(uVar10 - var3);\n  if ((int)var1 < 0x1f) {\n    var14 = var1 - 0x13;\n    if (var14 != 0 && var14 < 0 == signed_carry_check(var1 - 0x1f,0xc)) {\n      return concatenate(var7,var5 >> (0x20 - (0xcU - var14) & 0xff) | var2 << (0xcU - var14 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    var1 = var1 + 1;\n    return concatenate(input2 | var2 >> (var1 & 0xff),\n                    var5 >> (var1 & 0xff) | var2 << (0x20 - var1 & 0xff));\n  }\n  return concatenate(var7,var2 >> (var1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000168": "reverse_compute_08000168",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar6": "var1",
                "uVar9": "var2",
                "uVar11": "var3",
                "uVar12": "var4",
                "uVar7": "var5",
                "uVar3": "var6",
                "uVar4": "var7",
                "uVar5": "var8",
                "bVar2": "var9",
                "bVar13": "var10",
                "bVar14": "var11",
                "bVar15": "var12",
                "iVar1": "var13",
                "iVar8": "var14",
                "LZCOUNT": "leading_zero_count",
                "CARRY4": "carry_check",
                "CONCAT44": "concatenate",
                "SBORROW4": "signed_borrow_check",
                "SCARRY4": "signed_carry_check"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_0800411c",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_080070b0",
                "FUN_08006c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800016c": {
            "entrypoint": "0x0800016c",
            "current_name": "perform_unsigned_division_0800016c",
            "code": "\nulonglong performUnsignedDivision_0800016c(uint dividend,uint dividend_high,uint divisor,uint divisor_high)\n\n{\n  int dividend_high_shifted;\n  byte carry_bit;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int divisor_high_shifted;\n  uint left_shifted_dividend_high;\n  uint remainder;\n  uint quotient;\n  uint difference;\n  uint temp4;\n  uint temp5;\n  bool is_dividend_negative;\n  bool is_divisor_negative;\n  bool is_temp_negative;\n  \n  left_shifted_dividend_high = dividend_high << 1;\n  quotient = divisor_high << 1;\n  is_dividend_negative = ((dividend_high ^ divisor_high) & 0x7fffffff) == 0;\n  is_divisor_negative = is_dividend_negative && dividend == divisor;\n  if (!is_dividend_negative || dividend != divisor) {\n    is_divisor_negative = (left_shifted_dividend_high | dividend) == 0;\n  }\n  if (!is_divisor_negative) {\n    is_divisor_negative = (quotient | divisor) == 0;\n  }\n  divisor_high_shifted = (int)left_shifted_dividend_high >> 0x15;\n  if (!is_divisor_negative) {\n    is_divisor_negative = divisor_high_shifted == -1;\n  }\n  dividend_high_shifted = (int)quotient >> 0x15;\n  if (!is_divisor_negative) {\n    is_divisor_negative = dividend_high_shifted == -1;\n  }\n  if (is_divisor_negative) {\n    if (divisor_high_shifted == -1 || dividend_high_shifted == -1) {\n      quotient = divisor_high;\n      left_shifted_dividend_high = divisor;\n      if (divisor_high_shifted == -1) {\n        quotient = dividend_high;\n        left_shifted_dividend_high = dividend;\n      }\n      if (divisor_high_shifted != -1 || dividend_high_shifted != -1) {\n        divisor = left_shifted_dividend_high;\n        divisor_high = quotient;\n      }\n      is_divisor_negative = (left_shifted_dividend_high | quotient << 0xc) == 0;\n      if (is_divisor_negative) {\n        is_divisor_negative = (divisor | divisor_high << 0xc) == 0;\n      }\n      if (is_divisor_negative) {\n        is_divisor_negative = quotient == divisor_high;\n      }\n      if (!is_divisor_negative) {\n        quotient = quotient | 0x80000;\n      }\n      return CONCAT44(quotient,left_shifted_dividend_high);\n    }\n    if (((dividend_high ^ divisor_high) & 0x7fffffff) != 0 || dividend != divisor) {\n      if ((left_shifted_dividend_high | dividend) == 0) {\n        dividend = divisor;\n        dividend_high = divisor_high;\n      }\n      return CONCAT44(dividend_high,dividend);\n    }\n    if (dividend_high != divisor_high) {\n      return 0;\n    }\n    if (left_shifted_dividend_high >> 0x15 == 0) {\n      is_divisor_negative = (dividend & 0x80000000) != 0;\n      quotient = dividend_high * 2 + (uint)is_divisor_negative;\n      if (CARRY4(dividend_high,dividend_high) || CARRY4(dividend_high * 2,(uint)is_divisor_negative)) {\n        quotient = quotient | 0x80000000;\n      }\n      return CONCAT44(quotient,dividend << 1);\n    }\n    if (left_shifted_dividend_high < 0xffc00000) {\n      return CONCAT44(dividend_high + 0x100000,dividend);\n    }\n    dividend_high = dividend_high & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(dividend_high | 0x7ff00000) << 0x20;\n  }\n  left_shifted_dividend_high = left_shifted_dividend_high >> 0x15;\n  quotient = quotient >> 0x15;\n  difference = quotient - left_shifted_dividend_high;\n  is_divisor_negative = difference != 0;\n  if (quotient < left_shifted_dividend_high) {\n    difference = -difference;\n  }\n  remainder = dividend;\n  temp3 = dividend_high;\n  if (is_divisor_negative && left_shifted_dividend_high <= quotient) {\n    left_shifted_dividend_high = left_shifted_dividend_high + difference;\n    remainder = divisor;\n    temp3 = divisor_high;\n    divisor = dividend;\n    divisor_high = dividend_high;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(temp3,remainder);\n  }\n  quotient = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    is_divisor_negative = remainder != 0;\n    remainder = -remainder;\n    quotient = -quotient - (uint)is_divisor_negative;\n  }\n  temp3 = divisor_high & 0xfffff | 0x100000;\n  if ((divisor_high & 0x80000000) != 0) {\n    is_divisor_negative = divisor != 0;\n    divisor = -divisor;\n    temp3 = -temp3 - (uint)is_divisor_negative;\n  }\n  if (left_shifted_dividend_high == difference) {\n    temp3 = temp3 ^ 0x100000;\n    if (left_shifted_dividend_high == 0) {\n      quotient = quotient ^ 0x100000;\n      left_shifted_dividend_high = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp5 = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    temp4 = divisor << (temp5 & 0xff);\n    divisor = divisor >> (difference & 0xff);\n    temp1 = remainder + divisor;\n    temp2 = temp3 << (temp5 & 0xff);\n    temp5 = temp1 + temp2;\n    quotient = quotient + CARRY4(remainder,divisor) + ((int)temp3 >> (difference & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    temp4 = temp3 << (-difference + 0x40 & 0xff);\n    if (divisor != 0) {\n      temp4 = temp4 | 2;\n    }\n    temp3 = (int)temp3 >> (difference - 0x20 & 0xff);\n    temp5 = remainder + temp3;\n    quotient = quotient + ((int)temp3 >> 0x1f) + (uint)CARRY4(remainder,temp3);\n  }\n  dividend_high = quotient & 0x80000000;\n  difference = quotient;\n  if ((int)quotient < 0) {\n    is_divisor_negative = temp4 == 0;\n    temp4 = -temp4;\n    difference = -temp5;\n    temp5 = -(uint)!is_divisor_negative - temp5;\n    difference = -(uint)(is_divisor_negative <= difference) - quotient;\n  }\n  if (0xfffff < difference) {\n    remainder = left_shifted_dividend_high - 1;\n    if (0x1fffff < difference) {\n      quotient = difference & 1;\n      difference = difference >> 1;\n      carry_bit = (byte)temp5;\n      temp5 = (uint)(quotient != 0) << 0x1f | temp5 >> 1;\n      temp4 = (uint)(carry_bit & 1) << 0x1f | temp4 >> 1;\n      remainder = left_shifted_dividend_high;\n      if (0xffbfffff < left_shifted_dividend_high * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    is_divisor_negative = 0x7fffffff < temp4;\n    if (temp4 == 0x80000000) {\n      is_divisor_negative = (temp5 & 1) != 0;\n    }\n    return CONCAT44(difference + remainder * 0x100000 + (uint)CARRY4(temp5,(uint)is_divisor_negative) | dividend_high,\n                    temp5 + is_divisor_negative);\n  }\n  is_dividend_negative = (temp4 & 0x80000000) != 0;\n  temp4 = temp4 << 1;\n  remainder = temp5 * 2;\n  is_divisor_negative = CARRY4(temp5,temp5);\n  temp5 = temp5 * 2 + (uint)is_dividend_negative;\n  difference = difference * 2 + (uint)(is_divisor_negative || CARRY4(remainder,(uint)is_dividend_negative));\n  remainder = left_shifted_dividend_high - 2;\n  if ((difference & 0x100000) != 0) goto LAB_08000278;\n  temp3 = temp5;\n  left_shifted_dividend_high = difference;\n  if (difference == 0) {\n    temp3 = 0;\n    left_shifted_dividend_high = temp5;\n  }\n  divisor_high_shifted = LZCOUNT(left_shifted_dividend_high);\n  if (difference == 0) {\n    divisor_high_shifted = divisor_high_shifted + 0x20;\n  }\n  temp5 = divisor_high_shifted - 0xb;\n  is_temp_negative = SBORROW4(temp5,0x20);\n  difference = divisor_high_shifted - 0x2b;\n  is_divisor_negative = (int)difference < 0;\n  is_dividend_negative = difference == 0;\n  if ((int)temp5 < 0x20) {\n    is_temp_negative = SCARRY4(difference,0xc);\n    divisor_high_shifted = divisor_high_shifted + -0x1f;\n    is_divisor_negative = divisor_high_shifted < 0;\n    is_dividend_negative = divisor_high_shifted == 0;\n    difference = temp5;\n    if (!is_dividend_negative && is_divisor_negative == is_temp_negative) {\n      temp3 = left_shifted_dividend_high << (temp5 & 0xff);\n      left_shifted_dividend_high = left_shifted_dividend_high >> (0xcU - divisor_high_shifted & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_dividend_negative || is_divisor_negative != is_temp_negative) {\n    temp4 = 0x20 - difference;\n  }\n  left_shifted_dividend_high = left_shifted_dividend_high << (difference & 0xff);\n  if (is_dividend_negative || is_divisor_negative != is_temp_negative) {\n    left_shifted_dividend_high = left_shifted_dividend_high | temp3 >> (temp4 & 0xff);\n  }\n  if (is_dividend_negative || is_divisor_negative != is_temp_negative) {\n    temp3 = temp3 << (difference & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp5 <= (int)remainder) {\n    return CONCAT44(left_shifted_dividend_high + (remainder - temp5) * 0x100000 | dividend_high,temp3);\n  }\n  difference = ~(remainder - temp5);\n  if ((int)difference < 0x1f) {\n    divisor_high_shifted = difference - 0x13;\n    if (divisor_high_shifted != 0 && divisor_high_shifted < 0 == SCARRY4(difference - 0x1f,0xc)) {\n      return CONCAT44(quotient,temp3 >> (0x20 - (0xcU - divisor_high_shifted) & 0xff) | left_shifted_dividend_high << (0xcU - divisor_high_shifted & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference = difference + 1;\n    return CONCAT44(dividend_high | left_shifted_dividend_high >> (difference & 0xff),\n                    temp3 >> (difference & 0xff) | left_shifted_dividend_high << (0x20 - difference & 0xff));\n  }\n  return CONCAT44(quotient,left_shifted_dividend_high >> (difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800016c": "perform_unsigned_division_0800016c",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "iVar1": "dividend_high_shifted",
                "bVar2": "carry_bit",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "divisor_high_shifted",
                "uVar7": "left_shifted_dividend_high",
                "uVar8": "remainder",
                "uVar9": "quotient",
                "uVar10": "difference",
                "uVar11": "temp4",
                "uVar12": "temp5",
                "bVar13": "is_dividend_negative",
                "bVar14": "is_divisor_negative",
                "bVar15": "is_temp_negative"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_080071c0",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_080070b0",
                "FUN_08006c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000404": {
            "entrypoint": "0x08000404",
            "current_name": "shift_and_concat_08000404",
            "code": "\nulonglong shiftAndConcat_08000404(uint input)\n\n{\n  uint result;\n  uint absInput;\n  uint shiftAmount;\n  int leadingZeros;\n  uint finalShift;\n  uint signBit;\n  uint shiftedBits;\n  bool negativeLeadingZeros;\n  bool zeroLeadingZeros;\n  bool carryOverflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  signBit = input & 0x80000000;\n  absInput = input;\n  if ((int)signBit < 0) {\n    absInput = -input;\n  }\n  result = 0;\n  leadingZeros = LZCOUNT(absInput);\n  finalShift = leadingZeros + 0x15;\n  carryOverflow = SBORROW4(finalShift,0x20);\n  shiftAmount = leadingZeros - 0xb;\n  negativeLeadingZeros = (int)shiftAmount < 0;\n  zeroLeadingZeros = shiftAmount == 0;\n  if (finalShift < 0x20) {\n    carryOverflow = SCARRY4(shiftAmount,0xc);\n    negativeLeadingZeros = false;\n    zeroLeadingZeros = leadingZeros + 1 == 0;\n    shiftAmount = finalShift;\n    if (!zeroLeadingZeros && carryOverflow == false) {\n      result = absInput << finalShift;\n      absInput = absInput >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (zeroLeadingZeros || negativeLeadingZeros != carryOverflow) {\n    shiftedBits = 0x20 - shiftAmount;\n  }\n  absInput = absInput << (shiftAmount & 0xff);\n  if (zeroLeadingZeros || negativeLeadingZeros != carryOverflow) {\n    absInput = absInput | 0U >> (shiftedBits & 0xff);\n  }\n  if (zeroLeadingZeros || negativeLeadingZeros != carryOverflow) {\n    result = 0 << (shiftAmount & 0xff);\n  }\nLAB_080002f0:\n  if (finalShift < 0x433) {\n    return CONCAT44(absInput + (0x432 - finalShift) * 0x100000 | signBit,result);\n  }\n  shiftAmount = ~(0x432 - finalShift);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(input,absInput >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeros = shiftAmount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(signBit | absInput >> (shiftAmount & 0xff),\n                    result >> (shiftAmount & 0xff) | absInput << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(input,result >> (0x20 - (0xcU - leadingZeros) & 0xff) | absInput << (0xcU - leadingZeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000404": "shift_and_concat_08000404",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "absInput",
                "uVar3": "shiftAmount",
                "iVar4": "leadingZeros",
                "uVar5": "finalShift",
                "uVar6": "signBit",
                "in_r12": "shiftedBits",
                "bVar7": "negativeLeadingZeros",
                "bVar8": "zeroLeadingZeros",
                "bVar9": "carryOverflow"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000428": {
            "entrypoint": "0x08000428",
            "current_name": "mask_and_shift_08000428",
            "code": "\nulonglong maskAndShift_08000428(uint input,undefined4 param2,undefined4 param3,uint mask)\n\n{\n  uint signBit;\n  uint shiftedInput;\n  uint resultHigh;\n  uint shiftedMask;\n  uint temp;\n  int count;\n  uint shiftAmount;\n  uint offset;\n  bool isEqual;\n  bool isZero;\n  bool isNegative;\n  \n  temp = input << 1;\n  isZero = temp == 0;\n  signBit = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shiftedMask = (uint)((int)temp >> 3) >> 1;\n  resultHigh = signBit | shiftedMask;\n  input = input << 0x1d;\n  if (!isZero) {\n    mask = temp & 0xff000000;\n    isZero = mask == 0;\n  }\n  if (!isZero) {\n    isZero = mask == 0xff000000;\n  }\n  if (!isZero) {\n    return CONCAT44(resultHigh,input) ^ 0x3800000000000000;\n  }\n  if (temp == 0 || mask == 0xff000000) {\n    return CONCAT44(resultHigh,input);\n  }\n  shiftedInput = input;\n  temp = shiftedMask;\n  if (shiftedMask == 0) {\n    shiftedInput = 0;\n    temp = input;\n  }\n  count = LZCOUNT(temp);\n  if (shiftedMask == 0) {\n    count = count + 0x20;\n  }\n  shiftAmount = count - 0xb;\n  isNegative = SBORROW4(shiftAmount,0x20);\n  shiftedMask = count - 0x2b;\n  isZero = (int)shiftedMask < 0;\n  isEqual = shiftedMask == 0;\n  if ((int)shiftAmount < 0x20) {\n    isNegative = SCARRY4(shiftedMask,0xc);\n    count = count + -0x1f;\n    isZero = count < 0;\n    isEqual = count == 0;\n    shiftedMask = shiftAmount;\n    if (!isEqual && isZero == isNegative) {\n      shiftedInput = temp << (shiftAmount & 0xff);\n      temp = temp >> (0xcU - count & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isEqual || isZero != isNegative) {\n    offset = 0x20 - shiftedMask;\n  }\n  temp = temp << (shiftedMask & 0xff);\n  if (isEqual || isZero != isNegative) {\n    temp = temp | shiftedInput >> (offset & 0xff);\n  }\n  if (isEqual || isZero != isNegative) {\n    shiftedInput = shiftedInput << (shiftedMask & 0xff);\n  }\nLAB_080002f0:\n  if ((int)shiftAmount < 0x381) {\n    return CONCAT44(temp + (0x380 - shiftAmount) * 0x100000 | signBit,shiftedInput);\n  }\n  shiftedMask = ~(0x380 - shiftAmount);\n  if ((int)shiftedMask < 0x1f) {\n    count = shiftedMask - 0x13;\n    if (count != 0 && count < 0 == SCARRY4(shiftedMask - 0x1f,0xc)) {\n      return CONCAT44(resultHigh,shiftedInput >> (0x20 - (0xcU - count) & 0xff) | temp << (0xcU - count & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shiftedMask = shiftedMask + 1;\n    return CONCAT44(signBit | temp >> (shiftedMask & 0xff),\n                    shiftedInput >> (shiftedMask & 0xff) | temp << (0x20 - shiftedMask & 0xff));\n  }\n  return CONCAT44(resultHigh,temp >> (shiftedMask - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000428": "mask_and_shift_08000428",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "mask",
                "uVar1": "signBit",
                "uVar2": "shiftedInput",
                "uVar3": "resultHigh",
                "uVar4": "shiftedMask",
                "uVar5": "temp",
                "iVar6": "count",
                "uVar7": "shiftAmount",
                "in_r12": "offset",
                "bVar8": "isEqual",
                "bVar9": "isZero",
                "bVar10": "isNegative"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d0": {
            "entrypoint": "0x080004d0",
            "current_name": "calculate_shifted_value_080004d0",
            "code": "\nulonglong calculate_shifted_value_080004d0(undefined4 input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  ulonglong product_1;\n  longlong product_2;\n  uint shifted_value_1;\n  uint shifted_value_2;\n  int sum;\n  uint remainder_1;\n  uint remainder_2;\n  uint shift;\n  uint result_1;\n  bool condition_1;\n  bool condition_2;\n  bool condition_3;\n  ulonglong concatenated_values;\n  \n  concatenated_values = CONCAT44(input_2,input_1);\n  shift = 0x7ff;\n  shifted_value_2 = input_2 >> 0x14 & 0x7ff;\n  condition_1 = shifted_value_2 == 0;\n  if (!condition_1) {\n    remainder_2 = input_4 >> 0x14 & 0x7ff;\n    condition_1 = remainder_2 == 0;\n  }\n  if (!condition_1) {\n    condition_1 = shifted_value_2 == 0x7ff;\n  }\n  if (!condition_1) {\n    condition_1 = remainder_2 == 0x7ff;\n  }\n  if (condition_1) {\n    concatenated_values = calculate_shifted_value_080004d0_080006ac();\n  }\n  shifted_value_1 = (uint)(concatenated_values >> 0x20);\n  sum = shifted_value_2 + remainder_2;\n  shifted_value_2 = shifted_value_1 ^ input_4;\n  shifted_value_1 = shifted_value_1 & ~(shift << 0x15);\n  input_4 = input_4 & ~(shift << 0x15);\n  condition_1 = ((uint)concatenated_values | shifted_value_1 << 0xc) == 0;\n  if (!condition_1) {\n    condition_1 = (input_3 | input_4 << 0xc) == 0;\n  }\n  shifted_value_1 = shifted_value_1 | 0x100000;\n  input_4 = input_4 | 0x100000;\n  if (condition_1) {\n    input_3 = (uint)concatenated_values | input_3;\n    input_4 = (shifted_value_2 & 0x80000000 | shifted_value_1) ^ input_4;\n    shifted_value_2 = shift >> 1;\n    condition_3 = SBORROW4(sum,shifted_value_2);\n    remainder_1 = sum - shifted_value_2;\n    condition_1 = remainder_1 == 0;\n    shifted_value_1 = remainder_1;\n    if (!condition_1 && (int)shifted_value_2 <= sum) {\n      condition_3 = SBORROW4(shift,remainder_1);\n      shifted_value_1 = shift - remainder_1;\n      condition_1 = shift == remainder_1;\n    }\n    if (!condition_1 && (int)shifted_value_1 < 0 == condition_3) {\n      input_4 = input_4 | remainder_1 * 0x100000;\n    }\n    if (!condition_1 && (int)shifted_value_1 < 0 == condition_3) {\n      return CONCAT44(input_4,input_3);\n    }\n    input_4 = input_4 | 0x100000;\n    shift = 0;\n    condition_3 = SBORROW4(remainder_1,1);\n    remainder_1 = remainder_1 - 1;\n    condition_1 = remainder_1 == 0;\n    shifted_value_2 = remainder_1;\n  }\n  else {\n    product_1 = (concatenated_values & 0xffffffff) * (ulonglong)input_3;\n    concatenated_values = (concatenated_values & 0xffffffff) * (ulonglong)input_4 +\n             (ulonglong)shifted_value_1 * (ulonglong)input_3 + (product_1 >> 0x20);\n    result_1 = (uint)concatenated_values;\n    product_2 = (ulonglong)shifted_value_1 * (ulonglong)input_4 + (concatenated_values >> 0x20);\n    shift = (uint)product_2;\n    shifted_value_1 = (uint)((ulonglong)product_2 >> 0x20);\n    if ((int)product_1 != 0) {\n      result_1 = result_1 | 1;\n    }\n    remainder_1 = (sum + -0x3ff) - (uint)(shifted_value_1 < 0x200);\n    if (shifted_value_1 < 0x200) {\n      condition_1 = (result_1 & 0x80000000) != 0;\n      result_1 = result_1 << 1;\n      product_2 = CONCAT44(shifted_value_1 * 2 + (uint)(CARRY4(shift,shift) || CARRY4(shift * 2,(uint)condition_1)),\n                       shift * 2 + (uint)condition_1);\n    }\n    input_4 = shifted_value_2 & 0x80000000 | (int)((ulonglong)product_2 >> 0x20) << 0xb | (uint)product_2 >> 0x15;\n    input_3 = (uint)product_2 << 0xb | result_1 >> 0x15;\n    shift = result_1 * 0x800;\n    condition_2 = 0xfc < remainder_1;\n    condition_3 = SBORROW4(remainder_1,0xfd);\n    shifted_value_1 = remainder_1 - 0xfd;\n    condition_1 = shifted_value_1 == 0;\n    shifted_value_2 = shifted_value_1;\n    if (condition_2 && !condition_1) {\n      condition_2 = 0x6ff < shifted_value_1;\n      condition_3 = SBORROW4(shifted_value_1,0x700);\n      shifted_value_2 = remainder_1 - 0x7fd;\n      condition_1 = shifted_value_1 == 0x700;\n    }\n    if (!condition_2 || condition_1) {\n      condition_1 = 0x7fffffff < shift;\n      if (shift == 0x80000000) {\n        condition_1 = (result_1 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input_4 + remainder_1 * 0x100000 + (uint)CARRY4(input_3,(uint)condition_1),input_3 + condition_1\n                     );\n    }\n  }\n  if (!condition_1 && (int)shifted_value_2 < 0 == condition_3) {\n    return (ulonglong)(input_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  condition_2 = SCARRY4(remainder_1,0x36);\n  condition_1 = (int)(remainder_1 + 0x36) < 0;\n  condition_3 = remainder_1 == 0xffffffca;\n  if (condition_3 || condition_1 != condition_2) {\n    input_3 = 0;\n  }\n  if (condition_3 || condition_1 != condition_2) {\n    input_4 = input_4 & 0x80000000;\n  }\n  if (condition_3 || condition_1 != condition_2) {\n    return CONCAT44(input_4,input_3);\n  }\n  shifted_value_2 = -remainder_1;\n  shifted_value_1 = shifted_value_2 - 0x20;\n  if (0x1f < (int)shifted_value_2) {\n    remainder_1 = input_3 >> (shifted_value_1 & 0xff) | input_4 << (0x20 - shifted_value_1 & 0xff);\n    shifted_value_2 = (input_4 >> (shifted_value_1 & 0xff) & ~((input_4 & 0x80000000) >> (shifted_value_1 & 0xff))) -\n            ((int)remainder_1 >> 0x1f);\n    if ((shift | input_3 << (0x20 - shifted_value_1 & 0xff) | remainder_1 << 1) == 0) {\n      shifted_value_2 = shifted_value_2 & ~(remainder_1 >> 0x1f);\n    }\n    return CONCAT44(input_4,shifted_value_2) & 0x80000000ffffffff;\n  }\n  sum = shifted_value_2 - 0x14;\n  if (sum == 0 || sum < 0 != SCARRY4(shifted_value_1,0xc)) {\n    result_1 = input_3 << (remainder_1 + 0x20 & 0xff);\n    shifted_value_1 = input_3 >> (shifted_value_2 & 0xff) | input_4 << (remainder_1 + 0x20 & 0xff);\n    remainder_1 = shifted_value_1 + -((int)result_1 >> 0x1f);\n    if ((shift | result_1 << 1) == 0) {\n      remainder_1 = remainder_1 & ~(result_1 >> 0x1f);\n    }\n    return CONCAT44((input_4 & 0x80000000) +\n                    ((input_4 & 0x7fffffff) >> (shifted_value_2 & 0xff)) +\n                    (uint)CARRY4(shifted_value_1,-((int)result_1 >> 0x1f)),remainder_1);\n  }\n  shifted_value_2 = 0xc - sum;\n  remainder_1 = input_3 << (shifted_value_2 & 0xff);\n  shifted_value_2 = input_3 >> (0x20 - shifted_value_2 & 0xff) | input_4 << (shifted_value_2 & 0xff);\n  shifted_value_1 = shifted_value_2 + -((int)remainder_1 >> 0x1f);\n  if ((shift | remainder_1 << 1) == 0) {\n    shifted_value_1 = shifted_value_1 & ~(remainder_1 >> 0x1f);\n  }\n  return CONCAT44((input_4 & 0x80000000) + (uint)CARRY4(shifted_value_2,-((int)remainder_1 >> 0x1f)),shifted_value_1);\n}\n\n",
            "renaming": {
                "FUN_080004d0": "calculate_shifted_value_080004d0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "product_1",
                "lVar2": "product_2",
                "uVar3": "shifted_value_1",
                "uVar4": "shifted_value_2",
                "iVar5": "sum",
                "uVar6": "remainder_1",
                "unaff_r5": "remainder_2",
                "uVar7": "shift",
                "uVar8": "result_1",
                "bVar9": "condition_1",
                "bVar10": "condition_2",
                "bVar11": "condition_3",
                "uVar12": "concatenated_values"
            },
            "calling": [
                "FUN_08003330",
                "FUN_08006d68",
                "FUN_080071c0",
                "FUN_0800411c",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08005900"
            ],
            "called": [
                "FUN_080006ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006ac": {
            "entrypoint": "0x080006ac",
            "current_name": "calculate_shifted_value_080006ac",
            "code": "\nulonglong calculate_shifted_value_080006ac(uint input_value1,uint input_value2,uint input_value3,uint input_value4)\n\n{\n  uint bit1;\n  uint original_value2;\n  uint bitwise_xor_shifted_value;\n  uint bitwise_xor;\n  uint original_value;\n  bool is_zero;\n  \n  bitwise_xor_shifted_value = original_value & input_value4 >> 0x14;\n  if (original_value2 != original_value && bitwise_xor_shifted_value != original_value) {\n    is_zero = (input_value1 | input_value2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_value3 | input_value4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_value2 ^ input_value4) & 0x80000000) << 0x20;\n    }\n    if (original_value2 == 0) {\n      bitwise_xor = input_value2 & 0x80000000;\n      do {\n        bit1 = input_value1 & 0x80000000;\n        input_value1 = input_value1 << 1;\n        input_value2 = input_value2 * 2 + (uint)(bit1 != 0);\n      } while ((input_value2 & 0x100000) == 0);\n      input_value2 = input_value2 | bitwise_xor;\n      if (bitwise_xor_shifted_value != 0) {\n        return CONCAT44(input_value2,input_value1);\n      }\n    }\n    do {\n      bitwise_xor_shifted_value = input_value3 & 0x80000000;\n      input_value3 = input_value3 << 1;\n      input_value4 = input_value4 * 2 + (uint)(bitwise_xor_shifted_value != 0);\n    } while ((input_value4 & 0x100000) == 0);\n    return CONCAT44(input_value2,input_value1);\n  }\n  is_zero = (input_value1 | input_value2 << 1) == 0;\n  if (is_zero) {\n    input_value2 = input_value4;\n    input_value1 = input_value3;\n  }\n  if (!is_zero) {\n    is_zero = (input_value3 | input_value4 << 1) == 0;\n  }\n  bitwise_xor = input_value2;\n  if (((!is_zero) && ((original_value2 != original_value || ((input_value1 | input_value2 << 0xc) == 0)))) &&\n     ((bitwise_xor_shifted_value != original_value || (input_value1 = input_value3, bitwise_xor = input_value4, (input_value3 | input_value4 << 0xc) == 0)))) {\n    return (ulonglong)((input_value2 ^ input_value4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bitwise_xor,input_value1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006ac": "calculate_shifted_value_080006ac",
                "param_1": "input_value1",
                "param_2": "input_value2",
                "param_3": "input_value3",
                "param_4": "input_value4",
                "uVar1": "bit1",
                "unaff_r4": "original_value2",
                "uVar2": "bitwise_xor_shifted_value",
                "uVar3": "bitwise_xor",
                "in_r12": "original_value",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_080004d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000724": {
            "entrypoint": "0x08000724",
            "current_name": "calculate_double_08000724",
            "code": "\nulonglong calculateDouble_08000724(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 result;\n  \n  result = CONCAT44(input2,input1);\n  temp14 = 0x7ff;\n  temp7 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    temp10 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp10 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp10 == 0x7ff;\n  }\n  if (flag1) {\n    result = calculate_double_08000892();\n  }\n  temp9 = (uint)((ulonglong)result >> 0x20);\n  temp12 = (uint)result;\n  temp8 = temp7 - temp10;\n  if ((input3 | input4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      flag1 = (int)(temp14 - temp9) < 0;\n      flag2 = temp14 == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    temp14 = input3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ input4) & 0x80000000;\n    flag1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      flag1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)flag1;\n    temp9 = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)flag1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp11 - temp5 < (uint)flag2;\n      temp14 = temp11;\n      if (temp5 < temp11 || flag1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp11 || flag1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp13;\n      flag1 = temp14 - temp11 < (uint)flag2;\n      temp5 = temp14;\n      if (temp11 < temp14 || flag1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!flag2;\n      }\n      if (temp11 < temp14 || flag1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp11 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_08000842;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_08000842:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        flag1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        flag1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)flag1),temp12 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp12 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "renaming": {
                "FUN_08000724": "calculate_double_08000724",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "unaff_r5": "temp10",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "uVar17": "result"
            },
            "calling": [
                "FUN_08003330",
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_08005bc8",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000892"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000892": {
            "entrypoint": "0x08000892",
            "current_name": "calculate_double_08000892",
            "code": "\nulonglong calculate_double_08000892(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  bool isZero;\n  \n  temp3 = temp5 & input4 >> 0x14;\n  temp4 = input2;\n  if (temp2 != temp5 || temp3 != temp5) {\n    if (temp2 == temp5) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, temp4 = input4, temp3 != temp5)\n         ) {\nLAB_08000704:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (temp3 == temp5) {\n      input1 = input3;\n      temp4 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006c8:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (input1 | input2 << 1) == 0;\n      if (!isZero) {\n        isZero = (input3 | input4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (temp2 == 0) {\n          temp4 = input2 & 0x80000000;\n          do {\n            temp1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(temp1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | temp4;\n          if (temp3 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          temp4 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(temp4 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_08000704;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006c8;\n    }\n  }\n  return CONCAT44(temp4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08000892": "calculate_double_08000892",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "unaff_r4": "temp2",
                "uVar2": "temp3",
                "uVar3": "temp4",
                "in_r12": "temp5",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_08000724"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000904": {
            "entrypoint": "0x08000904",
            "current_name": "check_parameters_equal_08000904",
            "code": "\nuint check_parameters_equal_08000904(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint xor_result;\n  bool is_all_zero;\n  bool is_param4_less_than_param2;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  is_all_zero = (value1 | value2 << 1) == 0;\n  if (is_all_zero) {\n    is_all_zero = (value3 | value4 << 1) == 0;\n  }\n  if (!is_all_zero) {\n    is_all_zero = value2 == value4;\n  }\n  if (is_all_zero) {\n    is_all_zero = value1 == value3;\n  }\n  if (!is_all_zero) {\n    xor_result = value2 ^ value4;\n    is_all_zero = xor_result == 0;\n    if (-1 < (int)xor_result) {\n      is_all_zero = value2 == value4;\n    }\n    is_param4_less_than_param2 = -1 < (int)xor_result && value4 <= value2;\n    if (is_all_zero) {\n      is_param4_less_than_param2 = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!is_param4_less_than_param2) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000904": "check_parameters_equal_08000904",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "xor_result",
                "bVar2": "is_all_zero",
                "bVar3": "is_param4_less_than_param2"
            },
            "calling": [
                "FUN_08000990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000980": {
            "entrypoint": "0x08000980",
            "current_name": "verify_and_return_parameters_08000980",
            "code": "\nvoid verify_and_return_parameters_08000980(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  verify_parameters_08000990(input_param_3,input_param_4,input_param_1,input_param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000980": "verify_and_return_parameters_08000980",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4"
            },
            "calling": [
                "FUN_080009f0"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000990": {
            "entrypoint": "0x08000990",
            "current_name": "verify_parameters_08000990",
            "code": "\nundefined4 verify_parameters_08000990(undefined4 input)\n\n{\n  validate_input();\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000990": "verify_parameters_08000990",
                "param_1": "input",
                "check_parameters_equal_08000904": "validate_input"
            },
            "calling": [
                "FUN_08000980",
                "FUN_080009a0",
                "FUN_080009b4",
                "FUN_080009c8"
            ],
            "called": [
                "FUN_08000904"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a0": {
            "entrypoint": "0x080009a0",
            "current_name": "check_parameter_validity_080009a0",
            "code": "\nbool check_parameter_validity_080009a0(void)\n\n{\n  char input_character;\n  \n  verify_parameters_08000990();\n  return input_character != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009a0": "check_parameter_validity_080009a0",
                "in_ZR": "input_character"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b4": {
            "entrypoint": "0x080009b4",
            "current_name": "check_if_cy_is_null_080009b4",
            "code": "\nbool check_if_cy_is_null_080009b4(void)\n\n{\n  char cy_input;\n  \n  verify_parameters();\n  return cy_input == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009b4": "check_if_cy_is_null_080009b4",
                "in_CY": "cy_input",
                "verify_parameters_08000990": "verify_parameters"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "check_parameters_080009c8",
            "code": "\nbool check_parameters_080009c8(void)\n\n{\n  undefined zero_result;\n  undefined carry_set;\n  \n  verify_parameters_08000990();\n  return !(bool)carry_set || (bool)zero_result;\n}\n\n",
            "renaming": {
                "FUN_080009c8": "check_parameters_080009c8",
                "in_ZR": "zero_result",
                "in_CY": "carry_set"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "check_if_null_terminated_080009f0",
            "code": "\nbool check_if_null_terminated_080009f0(void)\n\n{\n  char input_character;\n  \n  verify_and_return_parameters_08000980();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009f0": "check_if_null_terminated_080009f0",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "check_input_08000a04",
            "code": "\nundefined4 check_input_08000a04(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "check_input_08000a04",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a30": {
            "entrypoint": "0x08000a30",
            "current_name": "calculate_float_value_08000a30",
            "code": "\nuint calculateFloatValue_08000a30(uint value1,uint value2)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint in_r12;\n  bool condition1;\n  bool condition2;\n  \n  temp1 = value2 * 2;\n  condition2 = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!condition2) {\n    in_r12 = temp1 + 0x8fe00000;\n    result = in_r12;\n  }\n  condition1 = result == 0;\n  if (!condition2 && temp2 >= 0x200000) {\n    condition1 = in_r12 == 0x1fc00000;\n  }\n  if (((condition2 || temp2 < 0x200000) || 0x1fc00000 < in_r12) || condition1) {\n    if ((value2 & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((value1 | value2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return value2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != SCARRY4(temp2,0x2e00000)) {\n      return value2 & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = value1 >> (temp1 & 0xff);\n    if (value1 << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = value2 & 0x1fffff | 0x100000;\n    value1 = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (value2 & 0x80000000 | value1 >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < value1 * 8);\n  if (value1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000a30": "calculate_float_value_08000a30",
                "param_1": "value1",
                "param_2": "value2",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "bVar4": "condition1",
                "bVar5": "condition2"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ad8": {
            "entrypoint": "0x08000ad8",
            "current_name": "calculate_float_08000ad8",
            "code": "\nuint calculateFloat_08000ad8(uint input1,uint input2,undefined4 flag,uint input3)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint flippedInput2;\n  uint var4;\n  uint shiftedInput1;\n  uint uVar6;\n  uint var7;\n  bool isMatch;\n  \n  flippedInput2 = input2 ^ 0x80000000;\n  shiftedInput1 = input1 << 1;\n  isMatch = shiftedInput1 == 0;\n  if (!isMatch) {\n    input3 = input2 << 1;\n    isMatch = input3 == 0;\n  }\n  if (!isMatch) {\n    isMatch = shiftedInput1 == input3;\n  }\n  shiftedInput1 = (int)shiftedInput1 >> 0x18;\n  if (!isMatch) {\n    isMatch = shiftedInput1 == -1;\n  }\n  if (!isMatch) {\n    isMatch = (int)input3 >> 0x18 == -1;\n  }\n  if (isMatch) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      shiftedInput1 = flippedInput2;\n      if (shiftedInput1 == -1) {\n        shiftedInput1 = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        flippedInput2 = shiftedInput1;\n      }\n      isMatch = (shiftedInput1 & 0x7fffff) == 0;\n      if (isMatch) {\n        isMatch = (flippedInput2 & 0x7fffff) == 0;\n      }\n      if (isMatch) {\n        isMatch = shiftedInput1 == flippedInput2;\n      }\n      if (!isMatch) {\n        shiftedInput1 = shiftedInput1 | 0x400000;\n      }\n      return shiftedInput1;\n    }\n    if (((input1 ^ flippedInput2) & 0x7fffffff) != 0) {\n      if (shiftedInput1 == 0) {\n        input1 = flippedInput2;\n      }\n      return input1;\n    }\n    if (input1 != flippedInput2) {\n      return 0;\n    }\n    if ((shiftedInput1 & 0xff000000) == 0) {\n      flippedInput2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        flippedInput2 = flippedInput2 | 0x80000000;\n      }\n      return flippedInput2;\n    }\n    if (shiftedInput1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000c12:\n    return input1 | 0x7f800000;\n  }\n  shiftedInput1 = shiftedInput1 >> 0x18;\n  input3 = input3 >> 0x18;\n  var7 = input3 - shiftedInput1;\n  isMatch = var7 != 0;\n  uVar6 = shiftedInput1;\n  if (isMatch && shiftedInput1 <= input3) {\n    uVar6 = shiftedInput1 + var7;\n  }\n  if (isMatch && shiftedInput1 <= input3) {\n    flippedInput2 = flippedInput2 ^ input1;\n  }\n  if (isMatch && shiftedInput1 <= input3) {\n    input1 = input1 ^ flippedInput2;\n  }\n  if (isMatch && shiftedInput1 <= input3) {\n    flippedInput2 = flippedInput2 ^ input1;\n  }\n  if (input3 < shiftedInput1) {\n    var7 = -var7;\n  }\n  if (0x19 < var7) {\n    return input1;\n  }\n  shiftedInput1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    shiftedInput1 = -shiftedInput1;\n  }\n  var4 = flippedInput2 & 0xffffff | 0x800000;\n  if ((flippedInput2 & 0x80000000) != 0) {\n    var4 = -var4;\n  }\n  if (uVar6 == var7) {\n    var4 = var4 ^ 0x800000;\n    if (uVar6 == 0) {\n      shiftedInput1 = shiftedInput1 ^ 0x800000;\n      uVar6 = 1;\n    }\n    else {\n      var7 = var7 - 1;\n    }\n  }\n  shiftedInput1 = shiftedInput1 + ((int)var4 >> (var7 & 0xff));\n  var4 = var4 << (0x20 - var7 & 0xff);\n  input1 = shiftedInput1 & 0x80000000;\n  if ((int)shiftedInput1 < 0) {\n    isMatch = var4 != 0;\n    var4 = -var4;\n    shiftedInput1 = -shiftedInput1 - (uint)isMatch;\n  }\n  if (shiftedInput1 < 0x800000) {\n    flippedInput2 = var4 & 0x80000000;\n    var4 = var4 << 1;\n    shiftedInput1 = shiftedInput1 * 2 + (uint)(flippedInput2 != 0);\n    flippedInput2 = uVar6 - 2;\n    if ((shiftedInput1 & 0x800000) == 0) {\n      var7 = LZCOUNT(shiftedInput1) - 8;\n      shiftedInput1 = shiftedInput1 << (var7 & 0xff);\n      if ((int)flippedInput2 < (int)var7) {\n        shiftedInput1 = shiftedInput1 >> (-(flippedInput2 - var7) & 0xff);\n      }\n      else {\n        shiftedInput1 = shiftedInput1 + (flippedInput2 - var7) * 0x800000;\n      }\n      return shiftedInput1 | input1;\n    }\n  }\n  else {\n    flippedInput2 = uVar6 - 1;\n    if (0xffffff < shiftedInput1) {\n      flippedInput2 = shiftedInput1 & 1;\n      shiftedInput1 = shiftedInput1 >> 1;\n      var4 = (uint)(flippedInput2 != 0) << 0x1f | var4 >> 1;\n      flippedInput2 = uVar6;\n      if (0xfd < uVar6) goto LAB_08000c12;\n    }\n  }\n  shiftedInput1 = shiftedInput1 + flippedInput2 * 0x800000 + (uint)(0x7fffffff < var4);\n  if (var4 == 0x80000000) {\n    shiftedInput1 = shiftedInput1 & 0xfffffffe;\n  }\n  return shiftedInput1 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000ad8": "calculate_float_08000ad8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "flag",
                "param_4": "input3",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "flippedInput2",
                "uVar4": "var4",
                "uVar5": "shiftedInput1",
                "uVar7": "var7",
                "bVar8": "isMatch"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800426c",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08002ee8",
                "FUN_08002ec0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000adc": {
            "entrypoint": "0x08000adc",
            "current_name": "calculate_float_08000adc",
            "code": "\nuint calculateFloat_08000adc(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint result1;\n  uint result2;\n  uint temp1;\n  uint temp2;\n  bool flag;\n  \n  result2 = input1 << 1;\n  flag = result2 == 0;\n  if (!flag) {\n    input4 = input2 << 1;\n    flag = input4 == 0;\n  }\n  if (!flag) {\n    flag = result2 == input4;\n  }\n  shiftedInput1 = (int)result2 >> 0x18;\n  if (!flag) {\n    flag = shiftedInput1 == -1;\n  }\n  if (!flag) {\n    flag = (int)input4 >> 0x18 == -1;\n  }\n  if (flag) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      result2 = input2;\n      if (shiftedInput1 == -1) {\n        result2 = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        input2 = result2;\n      }\n      flag = (result2 & 0x7fffff) == 0;\n      if (flag) {\n        flag = (input2 & 0x7fffff) == 0;\n      }\n      if (flag) {\n        flag = result2 == input2;\n      }\n      if (!flag) {\n        result2 = result2 | 0x400000;\n      }\n      return result2;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (result2 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((result2 & 0xff000000) == 0) {\n      result2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        result2 = result2 | 0x80000000;\n      }\n      return result2;\n    }\n    if (result2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000c12:\n    return input1 | 0x7f800000;\n  }\n  result2 = result2 >> 0x18;\n  input4 = input4 >> 0x18;\n  temp2 = input4 - result2;\n  flag = temp2 != 0;\n  temp1 = result2;\n  if (flag && result2 <= input4) {\n    temp1 = result2 + temp2;\n  }\n  if (flag && result2 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (flag && result2 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (flag && result2 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < result2) {\n    temp2 = -temp2;\n  }\n  if (0x19 < temp2) {\n    return input1;\n  }\n  result2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (temp1 == temp2) {\n    result1 = result1 ^ 0x800000;\n    if (temp1 == 0) {\n      result2 = result2 ^ 0x800000;\n      temp1 = 1;\n    }\n    else {\n      temp2 = temp2 - 1;\n    }\n  }\n  result2 = result2 + ((int)result1 >> (temp2 & 0xff));\n  result1 = result1 << (0x20 - temp2 & 0xff);\n  input1 = result2 & 0x80000000;\n  if ((int)result2 < 0) {\n    flag = result1 != 0;\n    result1 = -result1;\n    result2 = -result2 - (uint)flag;\n  }\n  if (result2 < 0x800000) {\n    temp2 = result1 & 0x80000000;\n    result1 = result1 << 1;\n    result2 = result2 * 2 + (uint)(temp2 != 0);\n    temp2 = temp1 - 2;\n    if ((result2 & 0x800000) == 0) {\n      temp1 = LZCOUNT(result2) - 8;\n      result2 = result2 << (temp1 & 0xff);\n      if ((int)temp2 < (int)temp1) {\n        result2 = result2 >> (-(temp2 - temp1) & 0xff);\n      }\n      else {\n        result2 = result2 + (temp2 - temp1) * 0x800000;\n      }\n      return result2 | input1;\n    }\n  }\n  else {\n    temp2 = temp1 - 1;\n    if (0xffffff < result2) {\n      temp2 = result2 & 1;\n      result2 = result2 >> 1;\n      result1 = (uint)(temp2 != 0) << 0x1f | result1 >> 1;\n      temp2 = temp1;\n      if (0xfd < temp1) goto LAB_08000c12;\n    }\n  }\n  result2 = result2 + temp2 * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    result2 = result2 & 0xfffffffe;\n  }\n  return result2 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000adc": "calculate_float_08000adc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "bVar7": "flag"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800426c",
                "FUN_08004a84",
                "FUN_0800411c",
                "FUN_08002ee8",
                "FUN_08002cb0",
                "FUN_08002ec0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c3c": {
            "entrypoint": "0x08000c3c",
            "current_name": "calculate_result_08000c3c",
            "code": "\nuint calculateResult_08000c3c(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int constant;\n  uint tempResult;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputValue);\n  shiftAmount = leadingZeros - 8;\n  constant = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    tempResult = 0 << (shiftAmount & 0xff);\n    leadingZeros = constant + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < tempResult);\n    if (tempResult == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = inputValue << leadingZeros + 0x18;\n  leadingZeros = constant + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_08000c3c": "calculate_result_08000c3c",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "constant",
                "uVar4": "tempResult"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c44": {
            "entrypoint": "0x08000c44",
            "current_name": "calculate_signed_magnitude_08000c44",
            "code": "\nuint calculateSignedMagnitude_08000c44(uint number)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  uint signBit;\n  int intermediateValue;\n  \n  signBit = number & 0x80000000;\n  if ((int)signBit < 0) {\n    number = -number;\n  }\n  if (number == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(number);\n  shiftAmount = leadingZeros - 8;\n  intermediateValue = ((signBit | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftAmount & 0xff);\n    signBit = intermediateValue + (number << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftAmount = number << leadingZeros + 0x18;\n  signBit = intermediateValue + ((number >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftAmount >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_08000c44": "calculate_signed_magnitude_08000c44",
                "param_1": "number",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "uVar3": "signBit",
                "iVar4": "intermediateValue"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cec": {
            "entrypoint": "0x08000cec",
            "current_name": "reverse_bits_08000cec",
            "code": "\nuint reverseBits_08000cec(uint num1,uint num2,undefined4 val1,uint val2)\n\n{\n  longlong lVar1;\n  uint result;\n  uint bits1;\n  int bitsSum;\n  int diff;\n  uint mulResult;\n  int negDiff;\n  uint temp;\n  bool isZero;\n  bool isNegative;\n  \n  bits1 = num1 >> 0x17 & 0xff;\n  isZero = bits1 == 0;\n  if (!isZero) {\n    val2 = num2 >> 0x17 & 0xff;\n    isZero = val2 == 0;\n  }\n  if (!isZero) {\n    isZero = bits1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = val2 == 0xff;\n  }\n  if (isZero) {\n    val2 = num2 >> 0x17 & 0xff;\n    if (bits1 == 0xff || val2 == 0xff) {\n      isZero = num1 == 0 || num1 == 0x80000000;\n      result = num2;\n      if (num1 != 0 && num1 != 0x80000000) {\n        isZero = num2 == 0;\n        result = num1;\n      }\n      if (!isZero) {\n        isZero = num2 == 0x80000000;\n      }\n      temp = result;\n      if (((isZero) || ((bits1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((val2 == 0xff && (temp = num2, (num2 & 0x7fffff) != 0)))) {\n        return temp | 0x7fc00000;\n      }\n      result = result ^ num2;\n      goto LAB_08000e3c;\n    }\n    isZero = (num1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (num2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (num1 ^ num2) & 0x80000000;\n    }\n    isZero = bits1 == 0;\n    result = num1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        num1 = num1 << 1;\n        isZero = (num1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      bits1 = bits1 - 1;\n    }\n    num1 = num1 | result;\n    isZero = val2 == 0;\n    result = num2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        num2 = num2 << 1;\n        isZero = (num2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      val2 = val2 - 1;\n    }\n    num2 = num2 | result;\n  }\n  bitsSum = bits1 + val2;\n  temp = num1 ^ num2;\n  bits1 = num1 << 9;\n  isZero = bits1 == 0;\n  if (!isZero) {\n    num2 = num2 << 9;\n    isZero = num2 == 0;\n  }\n  if (isZero) {\n    if (bits1 == 0) {\n      num2 = num2 << 9;\n    }\n    result = temp & 0x80000000 | num1 & 0x7fffff | num2 >> 9;\n    isNegative = SBORROW4(bitsSum,0x7f);\n    diff = bitsSum + -0x7f;\n    isZero = diff == 0;\n    negDiff = diff;\n    if (!isZero && 0x7e < bitsSum) {\n      isNegative = SBORROW4(0xff,diff);\n      negDiff = 0xff - diff;\n      isZero = diff == 0xff;\n    }\n    if (!isZero && negDiff < 0 == isNegative) {\n      result = result | diff * 0x800000;\n    }\n    if (!isZero && negDiff < 0 == isNegative) {\n      return result;\n    }\n    result = result | 0x800000;\n    mulResult = 0;\n    isNegative = SBORROW4(diff,1);\n    temp = bitsSum - 0x80;\n    isZero = temp == 0;\n    bits1 = temp;\n  }\n  else {\n    lVar1 = (ulonglong)(bits1 >> 5 | 0x8000000) * (ulonglong)(num2 >> 5 | 0x8000000);\n    mulResult = (uint)lVar1;\n    result = (uint)((ulonglong)lVar1 >> 0x20);\n    isZero = result < 0x800000;\n    if (isZero) {\n      result = result << 1;\n    }\n    if (isZero) {\n      result = result | mulResult >> 0x1f;\n      mulResult = mulResult << 1;\n    }\n    result = temp & 0x80000000 | result;\n    temp = (bitsSum + -0x7f) - (uint)isZero;\n    isNegative = SBORROW4(temp,0xfd);\n    isZero = temp == 0xfd;\n    bits1 = temp - 0xfd;\n    if (temp < 0xfe) {\n      result = result + temp * 0x800000 + (uint)(0x7fffffff < mulResult);\n      if (mulResult == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero || (int)bits1 < 0 != isNegative) {\n    isZero = (int)(temp + 0x19) < 0;\n    if (temp == 0xffffffe7 || isZero != SCARRY4(temp,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (temp != 0xffffffe7 && isZero == SCARRY4(temp,0x19)) {\n      bits1 = (result << 1) >> (-temp & 0xff);\n      temp = result << (temp + 0x20 & 0xff);\n      bits1 = ((uint)((result & 0x80000000) != 0) << 0x1f | bits1 >> 1) + (uint)((byte)bits1 & 1);\n      if ((mulResult | temp << 1) == 0) {\n        bits1 = bits1 & ~(temp >> 0x1f);\n      }\n      return bits1;\n    }\n    return result;\n  }\nLAB_08000e3c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cec": "reverse_bits_08000cec",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "val1",
                "param_4": "val2",
                "uVar2": "result",
                "uVar3": "bits1",
                "uVar6": "mulResult",
                "iVar4": "bitsSum",
                "iVar5": "diff",
                "iVar7": "negDiff",
                "uVar8": "temp",
                "bVar9": "isZero",
                "bVar10": "isNegative"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08003330",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08004a30",
                "FUN_08004a84",
                "FUN_08002cb0",
                "FUN_08002ec0",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e54": {
            "entrypoint": "0x08000e54",
            "current_name": "floating_point_conversion_08000e54",
            "code": "\nuint floatingPointConversion_08000e54(uint inputFloat,uint inputFloat2,undefined4 inputData,uint temp)\n\n{\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  int temp5;\n  uint result;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  temp2 = inputFloat >> 0x17 & 0xff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    temp = inputFloat2 >> 0x17 & 0xff;\n    flag1 = temp == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0xff;\n  }\n  if (!flag1) {\n    flag1 = temp == 0xff;\n  }\n  if (flag1) {\n    temp = inputFloat2 >> 0x17 & 0xff;\n    result = inputFloat;\n    if (temp2 == 0xff) {\n      if (((inputFloat & 0x7fffff) != 0) || (result = inputFloat2, temp == 0xff)) {\nLAB_08000e4a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (temp == 0xff) {\n        result = inputFloat2;\n        if ((inputFloat2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (inputFloat ^ inputFloat2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      flag1 = (inputFloat & 0x7fffffff) == 0;\n      if (!flag1) {\n        flag1 = (inputFloat2 & 0x7fffffff) == 0;\n      }\n      if (!flag1) {\n        flag1 = temp2 == 0;\n        result = inputFloat & 0x80000000;\n        while( true ) {\n          if (flag1) {\n            inputFloat = inputFloat << 1;\n            flag1 = (inputFloat & 0x800000) == 0;\n          }\n          if (!flag1) break;\n          temp2 = temp2 - 1;\n        }\n        inputFloat = inputFloat | result;\n        flag1 = temp == 0;\n        result = inputFloat2 & 0x80000000;\n        while( true ) {\n          if (flag1) {\n            inputFloat2 = inputFloat2 << 1;\n            flag1 = (inputFloat2 & 0x800000) == 0;\n          }\n          if (!flag1) break;\n          temp = temp - 1;\n        }\n        inputFloat2 = inputFloat2 | result;\n        goto LAB_08000e6c;\n      }\n      if ((inputFloat & 0x7fffffff) == 0) {\n        if ((inputFloat2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    inputFloat = inputFloat ^ inputFloat2;\n  }\n  else {\nLAB_08000e6c:\n    temp3 = temp2 - temp;\n    if (inputFloat2 << 9 == 0) {\n      inputFloat = (inputFloat ^ inputFloat2) & 0x80000000 | inputFloat & 0x7fffff;\n      flag3 = SCARRY4(temp3,0x7f);\n      temp5 = temp3 + 0x7f;\n      flag1 = temp5 < 0;\n      flag2 = temp5 == 0;\n      if (!flag2 && flag1 == flag3) {\n        flag3 = SBORROW4(0xff,temp5);\n        flag1 = 0xff - temp5 < 0;\n        flag2 = temp5 == 0xff;\n      }\n      if (!flag2 && flag1 == flag3) {\n        inputFloat = inputFloat | temp5 * 0x800000;\n      }\n      if (!flag2 && flag1 == flag3) {\n        return inputFloat;\n      }\n      inputFloat = inputFloat | 0x800000;\n      temp2 = 0;\n      flag2 = SBORROW4(temp5,1);\n      temp4 = temp3 + 0x7e;\n      flag1 = temp4 == 0;\n      result = temp4;\n    }\n    else {\n      temp1 = (inputFloat2 << 9) >> 4 | 0x10000000;\n      temp2 = (inputFloat << 9) >> 4 | 0x10000000;\n      inputFloat = (inputFloat ^ inputFloat2) & 0x80000000;\n      flag1 = temp1 <= temp2;\n      if (!flag1) {\n        temp2 = temp2 << 1;\n      }\n      temp4 = temp3 + 0x7d + (uint)flag1;\n      result = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          inputFloat = inputFloat | result;\n        }\n        flag1 = temp1 >> 1 <= temp2;\n        if (flag1) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (flag1) {\n          inputFloat = inputFloat | result >> 1;\n        }\n        flag1 = temp1 >> 2 <= temp2;\n        if (flag1) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (flag1) {\n          inputFloat = inputFloat | result >> 2;\n        }\n        flag1 = temp1 >> 3 <= temp2;\n        if (flag1) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (flag1) {\n          inputFloat = inputFloat | result >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        flag1 = temp2 == 0;\n        if (!flag1) {\n          result = result >> 4;\n          flag1 = result == 0;\n        }\n      } while (!flag1);\n      flag2 = SBORROW4(temp4,0xfd);\n      flag1 = temp4 == 0xfd;\n      result = temp4 - 0xfd;\n      if (temp4 < 0xfe) {\n        inputFloat = inputFloat + temp4 * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          inputFloat = inputFloat & 0xfffffffe;\n        }\n        return inputFloat;\n      }\n    }\n    if (flag1 || (int)result < 0 != flag2) {\n      flag1 = (int)(temp4 + 0x19) < 0;\n      if (temp4 == 0xffffffe7 || flag1 != SCARRY4(temp4,0x19)) {\n        inputFloat = inputFloat & 0x80000000;\n      }\n      if (temp4 == 0xffffffe7 || flag1 != SCARRY4(temp4,0x19)) {\n        return inputFloat;\n      }\n      result = (inputFloat << 1) >> (-temp4 & 0xff);\n      temp4 = inputFloat << (temp4 + 0x20 & 0xff);\n      result = ((uint)((inputFloat & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((temp2 | temp4 << 1) == 0) {\n        result = result & ~(temp4 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return inputFloat & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e54": "floating_point_conversion_08000e54",
                "param_1": "inputFloat",
                "param_2": "inputFloat2",
                "param_3": "inputData",
                "param_4": "temp",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "temp5",
                "uVar6": "result",
                "bVar7": "flag1",
                "bVar8": "flag2",
                "bVar9": "flag3"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f9c": {
            "entrypoint": "0x08000f9c",
            "current_name": "calculate_sign_and_shift_08000f9c",
            "code": "\nuint calculate_sign_and_shift_08000f9c(uint input1,uint input2)\n\n{\n  bool is_negative;\n  uint shifted_input1;\n  uint shifted_input2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  shifted_input1 = input1 * 2;\n  shifted_input2 = input2 * 2;\n  if (((int)shifted_input1 >> 0x18 == -1 || (int)shifted_input2 >> 0x18 == -1) &&\n     ((((int)shifted_input1 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) ||\n      (((int)shifted_input2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_inputs = shifted_input1 | input2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input1 ^ input2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input1 = shifted_input1 + input2 * -2;\n    is_zero = input1 == 0;\n  }\n  if ((is_negative && shifted_input2 <= shifted_input1) && !is_zero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!is_negative || shifted_input2 > shifted_input1) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input1 = input1 | 1;\n  }\n  return input1;\n}\n\n",
            "renaming": {
                "FUN_08000f9c": "calculate_sign_and_shift_08000f9c",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "shifted_input1",
                "uVar3": "shifted_input2",
                "uVar4": "combined_inputs",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_08001004"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ffc": {
            "entrypoint": "0x08000ffc",
            "current_name": "concatenate_and_return_params_08000ffc",
            "code": "\nvoid concatenateAndReturnParams_08000ffc(undefined4 firstParam,undefined4 secondParam)\n\n{\n  concatenate_params_08001004(secondParam,firstParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ffc": "concatenate_and_return_params_08000ffc",
                "param_1": "firstParam",
                "param_2": "secondParam"
            },
            "calling": [
                "FUN_08001050",
                "FUN_08001064"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001004": {
            "entrypoint": "0x08001004",
            "current_name": "concatenate_params_08001004",
            "code": "\nundefined8 concatenateParams_08001004(undefined4 firstParam,undefined4 secondParam)\n\n{\n  calculate_sign_and_shift_08000f9c();\n  return CONCAT44(secondParam,firstParam);\n}\n\n",
            "renaming": {
                "FUN_08001004": "concatenate_params_08001004",
                "param_1": "firstParam",
                "param_2": "secondParam"
            },
            "calling": [
                "FUN_08000ffc",
                "FUN_08001014",
                "FUN_08001028"
            ],
            "called": [
                "FUN_08000f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001014": {
            "entrypoint": "0x08001014",
            "current_name": "is_concatenation_successful_08001014",
            "code": "\nbool isConcatenationSuccessful_08001014(void)\n\n{\n  char concatenationResult;\n  \n  concatenate_params_08001004();\n  return concatenationResult != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001014": "is_concatenation_successful_08001014",
                "in_ZR": "concatenationResult"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001028": {
            "entrypoint": "0x08001028",
            "current_name": "check_if_concatenation_is_empty_08001028",
            "code": "\nbool check_if_concatenation_is_empty_08001028(void)\n\n{\n  char input_character;\n  \n  concatenate_params_08001004();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001028": "check_if_concatenation_is_empty_08001028",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002ee8",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001050": {
            "entrypoint": "0x08001050",
            "current_name": "check_concatenation_result_08001050",
            "code": "\nbool check_concatenation_result_08001050(void)\n\n{\n  undefined is_zero;\n  undefined is_carry;\n  \n  concatenate_and_return_params_08000ffc();\n  return !(bool)is_carry || (bool)is_zero;\n}\n\n",
            "renaming": {
                "FUN_08001050": "check_concatenation_result_08001050",
                "in_ZR": "is_zero",
                "in_CY": "is_carry"
            },
            "calling": [
                "FUN_08002ee8"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001064": {
            "entrypoint": "0x08001064",
            "current_name": "check_if_concatenated_params_are_empty_08001064",
            "code": "\nbool check_if_concatenated_params_are_empty_08001064(void)\n\n{\n  char input_character;\n  \n  concatenate_and_return_params_08000ffc();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001064": "check_if_concatenated_params_are_empty_08001064",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001078": {
            "entrypoint": "0x08001078",
            "current_name": "calculate_signed_shift_08001078",
            "code": "\nuint calculate_signed_shift_08001078(uint input_val)\n\n{\n  uint shifted_val;\n  uint difference;\n  \n  if (input_val << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_val = (input_val << 1) >> 0x18;\n  difference = 0x9e - shifted_val;\n  if (shifted_val < 0x9f && difference != 0) {\n    shifted_val = (input_val << 8 | 0x80000000) >> (difference & 0xff);\n    if ((input_val & 0x80000000) != 0) {\n      shifted_val = -shifted_val;\n    }\n    return shifted_val;\n  }\n  if ((difference == 0xffffff9f) && ((input_val & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_val = input_val & 0x80000000;\n  if (input_val == 0) {\n    input_val = 0x7fffffff;\n  }\n  return input_val;\n}\n\n",
            "renaming": {
                "FUN_08001078": "calculate_signed_shift_08001078",
                "param_1": "input_val",
                "uVar1": "shifted_val",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_0800411c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080010c4": {
            "entrypoint": "0x080010c4",
            "current_name": "decode_unsigned_integer_080010c4",
            "code": "\nuint decode_unsigned_integer_080010c4(uint input_value)\n\n{\n  uint shift_amount;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080010c4": "decode_unsigned_integer_080010c4",
                "param_1": "input_value",
                "uVar1": "shift_amount"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001104": {
            "entrypoint": "0x08001104",
            "current_name": "initialize_system_08001104",
            "code": "\nundefined4 initialize_system_08001104(undefined4 input_param)\n\n{\n  uint data;\n  \n  data = get_data_from_sensor();\n  update_system_parameters(data / 1000);\n  update_memory(0xffffffff,input_param,0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001104": "initialize_system_08001104",
                "param_1": "input_param",
                "uVar1": "data",
                "get_data_08002214": "get_data_from_sensor",
                "update_system_parameters_08001214": "update_system_parameters",
                "update_memory_08001194": "update_memory"
            },
            "calling": [
                "FUN_08001128",
                "FUN_0800209c"
            ],
            "called": [
                "FUN_08001194",
                "FUN_08002214",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001128": {
            "entrypoint": "0x08001128",
            "current_name": "initialize_system_and_configuration_08001128",
            "code": "\n\n\nundefined4 initialize_system_and_configuration_08001128(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  configure_som_register(3);\n  initialize_system(0);\n  setup_configuration();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001128": "initialize_system_and_configuration_08001128",
                "configure_som_register_08001170": "configure_som_register",
                "initialize_system_08001104": "initialize_system",
                "setup_configuration_08004ccc": "setup_configuration"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001104",
                "FUN_08001170",
                "FUN_08004ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800114c": {
            "entrypoint": "0x0800114c",
            "current_name": "increment_counter_0800114c",
            "code": "\nvoid incrementCounter_0800114c(void)\n\n{\n  DAT_20000244 = DAT_20000244 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800114c": "increment_counter_0800114c"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800115c": {
            "entrypoint": "0x0800115c",
            "current_name": "get_data_0800115c",
            "code": "\nundefined4 get_data_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "FUN_0800115c": "get_data_0800115c"
            },
            "calling": [
                "FUN_080016f4",
                "thunk_FUN_0800115c",
                "FUN_08001b58",
                "FUN_08001938",
                "FUN_0800209c",
                "FUN_08001460",
                "FUN_080015e8",
                "FUN_08001530",
                "thunk_FUN_0800115c",
                "FUN_08001828",
                "FUN_080014e2",
                "FUN_08004c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001168": {
            "entrypoint": "0x08001168",
            "current_name": "FUNC_08001168",
            "code": "\nvoid FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001168": "FUNC_08001168"
            },
            "calling": [
                "FUN_08001b58",
                "thunk_FUN_08001168"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "configure_som_register_08001170",
            "code": "\n\n\nvoid configureSOMRegister_08001170(uint inputValue)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | 0x5fa0000 | (inputValue & 7) << 8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001170": "configure_som_register_08001170",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08001128",
                "FUN_08004ccc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001194": {
            "entrypoint": "0x08001194",
            "current_name": "update_memory_08001194",
            "code": "\n\n\nvoid updateMemory_08001194(uint address,uint data1,uint data2)\n\n{\n  undefined shiftedData;\n  uint shiftAmount;\n  uint shiftedAmount;\n  uint modifiedAmount;\n  \n  shiftedAmount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  shiftAmount = 7 - shiftedAmount;\n  modifiedAmount = shiftedAmount + 4;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (modifiedAmount < 7) {\n    shiftedAmount = 0;\n  }\n  shiftAmount = (1 << (shiftAmount & 0xff)) - 1;\n  if (6 < modifiedAmount) {\n    shiftedAmount = shiftedAmount - 3;\n  }\n  shiftedData = (undefined)\n          ((data2 & (1 << (shiftedAmount & 0xff)) - 1U | (data1 & shiftAmount) << (shiftedAmount & 0xff)) << 4);\n  if (-1 < (int)address) {\n    shiftedAmount = address + 0xe000e100;\n  }\n  else {\n    shiftAmount = 0xe000ed14;\n    shiftedAmount = address & 0xf;\n  }\n  if (-1 < (int)address) {\n    *(undefined *)(shiftedAmount + 0x300) = shiftedData;\n  }\n  else {\n    *(undefined *)(shiftAmount + shiftedAmount) = shiftedData;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001194": "update_memory_08001194",
                "param_1": "address",
                "param_2": "data1",
                "param_3": "data2",
                "uVar1": "shiftedData",
                "uVar2": "shiftAmount",
                "uVar3": "shiftedAmount",
                "uVar4": "modifiedAmount"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004e7c",
                "FUN_08004ccc",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011fc": {
            "entrypoint": "0x080011fc",
            "current_name": "set_bit_in_memory_080011fc",
            "code": "\nvoid setBitInMemory_080011fc(uint inputValue)\n\n{\n  *(int *)((inputValue >> 5) * 4 + -0x1fff1f00) = 1 << (inputValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011fc": "set_bit_in_memory_080011fc",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08004e7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001214": {
            "entrypoint": "0x08001214",
            "current_name": "update_system_parameters_08001214",
            "code": "\n\n\nundefined4 update_system_parameters_08001214(int newValue)\n\n{\n  if (newValue - 1U < 0x1000000) {\n    _DAT_e000e014 = newValue - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001214": "update_system_parameters_08001214",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001240": {
            "entrypoint": "0x08001240",
            "current_name": "update_memory_status_08001240",
            "code": "\n\n\nvoid updateMemoryStatus_08001240(int status)\n\n{\n  if (status == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001240": "update_memory_status_08001240",
                "param_1": "status"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001258": {
            "entrypoint": "0x08001258",
            "current_name": "FUNC_08001258",
            "code": "\nvoid FUNC_08001258(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001258": "FUNC_08001258"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001264": {
            "entrypoint": "0x08001264",
            "current_name": "update_bits_08001264",
            "code": "\n\n\nvoid updateBits_08001264(uint *bitField1,uint *bitField2)\n\n{\n  uint updatedValue;\n  uint bitMask;\n  uint opcode;\n  int blockIndex;\n  uint bitIndex;\n  uint bitPosition;\n  uint constant;\n  uint *bitFieldPtr;\n  int shiftAmount;\n  \n  updatedValue = 0;\n  bitIndex = 0;\n  do {\n    bitPosition = 1 << (bitIndex & 0xff);\n    bitMask = bitPosition & *bitField2;\n    if (bitPosition == bitMask) {\n      opcode = bitField2[1];\n      if (opcode == 0x12) {\n        updatedValue = bitField2[3] + 0xc;\n      }\n      else if (opcode < 0x13) {\n        if (opcode == 2) {\n          updatedValue = bitField2[3] + 8;\n        }\n        else if (opcode < 3) {\n          if (opcode == 0) goto LAB_080013be;\n          if (opcode == 1) {\n            updatedValue = bitField2[3];\n          }\n        }\n        else if (opcode == 3) {\n          updatedValue = 0;\n        }\n        else if (opcode == 0x11) {\n          updatedValue = bitField2[3] + 4;\n        }\n      }\n      else {\n        if (opcode != 0x10210000) {\n          if (opcode < 0x10210001) {\n            if (opcode != 0x10110000) {\n              constant = 0x10120000;\nLAB_080013b8:\n              if (opcode != constant) goto LAB_080012a8;\n            }\n          }\n          else if ((opcode != 0x10310000) && (opcode != 0x10320000)) {\n            constant = 0x10220000;\n            goto LAB_080013b8;\n          }\n        }\nLAB_080013be:\n        updatedValue = bitField2[2];\n        if (updatedValue == 0) {\n          updatedValue = 4;\n        }\n        else {\n          if (updatedValue == 1) {\n            bitField1[4] = bitPosition;\n          }\n          if (updatedValue != 1) {\n            bitField1[5] = bitPosition;\n          }\n          updatedValue = 8;\n        }\n      }\nLAB_080012a8:\n      if (bitMask < 0x100) {\n        bitPosition = *bitField1;\n        opcode = bitIndex << 2;\n        bitFieldPtr = bitField1;\n      }\n      else {\n        bitPosition = bitField1[1];\n        opcode = (bitIndex + 0x3ffffff8) * 4;\n      }\n      if (0xff < bitMask) {\n        bitFieldPtr = bitField1 + 1;\n      }\n      *bitFieldPtr = bitPosition & ~(0xf << (opcode & 0xff)) | updatedValue << (opcode & 0xff);\n      bitFieldPtr = (uint *)bitField2[1];\n      if (((uint)bitFieldPtr & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        shiftAmount = (bitIndex & 3) << 2;\n        if (bitField1 == (uint *)0x40010800) {\n          blockIndex = 0;\n        }\n        else if (bitField1 == (uint *)0x40010c00) {\n          blockIndex = 1;\n        }\n        else if (bitField1 == (uint *)0x40011000) {\n          blockIndex = 2;\n        }\n        else if (bitField1 == (uint *)0x40011400) {\n          blockIndex = 3;\n        }\n        else {\n          blockIndex = 4;\n        }\n        *(uint *)((bitIndex & 0xfffffffc) + 0x40010008) =\n             blockIndex << shiftAmount | *(uint *)((bitIndex & 0xfffffffc) + 0x40010008) & ~(0xf << shiftAmount);\n        if (((uint)bitFieldPtr & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bitMask;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bitMask;\n        }\n        if (((uint)bitFieldPtr & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bitMask;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bitMask;\n        }\n        if (((uint)bitFieldPtr & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bitMask;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bitMask;\n        }\n        if (((uint)bitFieldPtr & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bitMask;\n        }\n        else {\n          _DAT_4001040c = bitMask | _DAT_4001040c;\n        }\n      }\n    }\n    bitIndex = bitIndex + 1;\n    if (bitIndex == 0x10) {\n      return;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001264": "update_bits_08001264",
                "param_1": "bitField1",
                "param_2": "bitField2",
                "uVar1": "updatedValue",
                "uVar2": "bitMask",
                "uVar3": "opcode",
                "iVar4": "blockIndex",
                "uVar5": "bitIndex",
                "uVar6": "bitPosition",
                "uVar7": "constant",
                "unaff_r10": "bitFieldPtr",
                "iVar8": "shiftAmount"
            },
            "calling": [
                "FUN_08004e7c",
                "FUN_08004d48",
                "FUN_08004e14",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001424": {
            "entrypoint": "0x08001424",
            "current_name": "update_parameter_08001424",
            "code": "\nvoid updateParameter_08001424(int baseAddress,int value,int flag)\n\n{\n  if (flag == 0) {\n    value = value << 0x10;\n  }\n  *(int *)(baseAddress + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001424": "update_parameter_08001424",
                "param_1": "baseAddress",
                "param_2": "value",
                "param_3": "flag"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003f3c",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800142e": {
            "entrypoint": "0x0800142e",
            "current_name": "xor_and_update_value_0800142e",
            "code": "\nvoid xorAndUpdateValue_0800142e(int inputPointer,uint valueToUpdate)\n\n{\n  *(uint *)(inputPointer + 0xc) = valueToUpdate ^ *(uint *)(inputPointer + 0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800142e": "xor_and_update_value_0800142e",
                "param_1": "inputPointer",
                "param_2": "valueToUpdate"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001436": {
            "entrypoint": "0x08001436",
            "current_name": "check_and_modify_flags_08001436",
            "code": "\nundefined4 checkAndModifyFlags_08001436(int *paramArray)\n\n{\n  int value;\n  \n  value = *paramArray;\n  if ((*(uint *)(value + 0x14) & 0x400) != 0) {\n    *(uint *)(value + 0x14) = *(uint *)(value + 0x14) & 0xfffffbff;\n    status = 4;\n    *(undefined *)((int)paramArray + 0x35) = 0x20;\n    *(undefined *)(paramArray + 0xd) = 0;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001436": "check_and_modify_flags_08001436",
                "param_1": "paramArray",
                "iVar1": "value",
                "param_1[0xe]": "status"
            },
            "calling": [
                "FUN_080014e2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "check_data_validity_08001460",
            "code": "\nundefined4 checkDataValidity_08001460(uint **data,uint flag,uint timeout)\n\n{\n  int dataOffset;\n  int newDataOffset;\n  uint selectedValue;\n  uint *currentData;\n  \n  dataOffset = get_data_0800115c();\n  do {\n    currentData = *data;\n    if ((flag << 8) >> 0x18 == 1) {\n      selectedValue = currentData[5];\n    }\n    else {\n      selectedValue = currentData[6];\n    }\n    if ((flag & 0xffff & ~selectedValue) == 0) {\n      return 0;\n    }\n    if ((int)(currentData[5] << 0x15) < 0) {\n      *currentData = *currentData | 0x200;\n      currentData[5] = currentData[5] & 0xfffffbff;\n      data[0xe] = (uint *)0x4;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 1;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (newDataOffset = get_data_0800115c(), (uint)(newDataOffset - dataOffset) <= timeout))));\n  *(undefined *)((int)data + 0x35) = 0x20;\n  *(undefined *)(data + 0xd) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001460": "check_data_validity_08001460",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "timeout",
                "iVar1": "dataOffset",
                "iVar2": "newDataOffset",
                "uVar3": "selectedValue",
                "puVar4": "currentData"
            },
            "calling": [
                "FUN_080015e8",
                "FUN_08001530"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014e2": {
            "entrypoint": "0x080014e2",
            "current_name": "check_and_modify_data_080014e2",
            "code": "\nundefined4 check_and_modify_data_080014e2(int *data_array,uint data_length)\n\n{\n  int data_start;\n  int result;\n  \n  data_start = get_data();\n  while( true ) {\n    if (*(int *)(*data_array + 0x14) << 0x18 < 0) {\n      return 0;\n    }\n    result = check_and_modify_flags(data_array);\n    if (result != 0) break;\n    if ((data_length != 0xffffffff) &&\n       ((data_length == 0 || (result = get_data(), data_length < (uint)(result - data_start))))) {\n      data_array[0xe] = data_array[0xe] | 0x20;\n      *(undefined *)((int)data_array + 0x35) = 0x20;\n      *(undefined *)(data_array + 0xd) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080014e2": "check_and_modify_data_080014e2",
                "param_1": "data_array",
                "param_2": "data_length",
                "iVar1": "data_start",
                "iVar2": "result",
                "get_data_0800115c": "get_data",
                "check_and_modify_flags_08001436": "check_and_modify_flags"
            },
            "calling": [
                "FUN_080015e8",
                "FUN_08001530",
                "FUN_08001828"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001530": {
            "entrypoint": "0x08001530",
            "current_name": "process_data_08001530",
            "code": "\nundefined4 processData_08001530(uint **data,uint val1,uint val2,int flag,uint size)\n\n{\n  int start;\n  int end;\n  uint *ptrData;\n  uint **ptrPtrData;\n  uint val1Copy;\n  uint val2Copy;\n  \n  **data = **data | 0x100;\n  ptrPtrData = data;\n  val1Copy = val1;\n  val2Copy = val2;\n  start = get_data_0800115c();\n  do {\n    ptrData = *data;\n    do {\n      if ((int)(ptrData[5] << 0x1f) < 0) {\n        ptrData[4] = val1 & 0xfe;\n        start = check_data_validity_08001460(data,0x10002,size,ptrData,ptrPtrData,val1Copy,val2Copy);\n        if (start == 0) {\n          start = check_and_modify_data_080014e2(data,size,(*data)[5],(*data)[6]);\n          if (start == 0) {\n            ptrData = *data;\n            if (flag == 1) {\nLAB_080015ca:\n              ptrData[4] = val2 & 0xff;\n              return 0;\n            }\n            ptrData[4] = val2 >> 8;\n            start = check_and_modify_data_080014e2(data,size);\n            if (start == 0) {\n              ptrData = *data;\n              goto LAB_080015ca;\n            }\n          }\n          if (data[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          **data = **data | 0x200;\n        }\n        else if (data[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (size == 0xffffffff);\n    if ((size == 0) || (end = get_data_0800115c(), size < (uint)(end - start))) {\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001530": "process_data_08001530",
                "param_1": "data",
                "param_2": "val1",
                "param_3": "val2",
                "param_4": "flag",
                "param_5": "size",
                "iVar1": "start",
                "iVar2": "end",
                "puVar3": "ptrData",
                "ppuVar4": "ptrPtrData",
                "uVar5": "val1Copy",
                "uVar6": "val2Copy"
            },
            "calling": [
                "FUN_08001828"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015e8": {
            "entrypoint": "0x080015e8",
            "current_name": "verify_and_modify_data_080015e8",
            "code": "\nundefined4 verify_and_modify_data_080015e8(uint **data,uint value1,uint value2,int flag,uint timeout)\n\n{\n  int result;\n  int current_value;\n  uint *ptr_data;\n  uint **ptr_to_data;\n  uint value1_copy;\n  uint value2_copy;\n  \n  ptr_data = *data;\n  *ptr_data = *ptr_data | 0x400;\n  *ptr_data = *ptr_data | 0x100;\n  ptr_to_data = data;\n  value1_copy = value1;\n  value2_copy = value2;\n  result = get_data_0800115c();\nLAB_0800160e:\n  ptr_data = *data;\n  while (-1 < (int)(ptr_data[5] << 0x1f)) {\n    if (timeout != 0xffffffff) goto code_r0x08001658;\n  }\n  ptr_data[4] = value1 & 0xfe;\n  result = check_data_validity_08001460(data,0x10002,timeout,ptr_data,ptr_to_data,value1_copy,value2_copy);\n  if (result != 0) goto LAB_080016ba;\n  result = check_and_modify_data_080014e2(data,timeout,(*data)[5],(*data)[6]);\n  if (result == 0) {\n    ptr_data = *data;\n    if (flag != 1) {\n      ptr_data[4] = value2 >> 8;\n      result = check_and_modify_data_080014e2(data,timeout);\n      if (result != 0) goto LAB_08001642;\n      ptr_data = *data;\n    }\n    ptr_data[4] = value2 & 0xff;\n    result = check_and_modify_data_080014e2(data,timeout);\n    if (result == 0) {\n      **data = **data | 0x100;\n      result = get_data_0800115c();\n      do {\n        do {\n          if ((int)((*data)[5] << 0x1f) < 0) {\n            (*data)[4] = value1 & 0xff | 1;\n            result = check_data_validity_08001460(data,0x10002,timeout);\n            if (result == 0) {\n              return 0;\n            }\nLAB_080016ba:\n            if (data[0xe] != (uint *)0x4) {\n              return 3;\n            }\n            return 1;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (current_value = get_data_0800115c(), (uint)(current_value - result) <= timeout));\nLAB_0800165a:\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 3;\n    }\n  }\nLAB_08001642:\n  if (data[0xe] == (uint *)0x4) {\n    **data = **data | 0x200;\n    return 1;\n  }\n  return 3;\ncode_r0x08001658:\n  if ((timeout == 0) || (current_value = get_data_0800115c(), timeout < (uint)(current_value - result)))\n  goto LAB_0800165a;\n  goto LAB_0800160e;\n}\n\n",
            "renaming": {
                "FUN_080015e8": "verify_and_modify_data_080015e8",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "flag",
                "param_5": "timeout",
                "iVar1": "result",
                "iVar2": "current_value",
                "puVar3": "ptr_data",
                "ppuVar4": "ptr_to_data",
                "uVar5": "value1_copy",
                "uVar6": "value2_copy"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016f4": {
            "entrypoint": "0x080016f4",
            "current_name": "check_data_080016f4",
            "code": "\nundefined4 check_data_080016f4(int *data_array,uint data_size)\n\n{\n  int initial_data;\n  int current_data;\n  \n  initial_data = get_data_0800115c();\n  while( true ) {\n    current_data = *data_array;\n    if ((*(uint *)(current_data + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(current_data + 0x14) << 0x1b < 0) break;\n    if ((data_size == 0) || (current_data = get_data_0800115c(), data_size < (uint)(current_data - initial_data))) {\n      data_array[0xe] = data_array[0xe] | 0x20;\n      *(undefined *)((int)data_array + 0x35) = 0x20;\n      *(undefined *)(data_array + 0xd) = 0;\n      return 3;\n    }\n  }\n  *(uint *)(current_data + 0x14) = *(uint *)(current_data + 0x14) & 0xffffffef;\n  data_array[0xe] = 0;\n  *(undefined *)(data_array + 0xd) = 0;\n  *(undefined *)((int)data_array + 0x35) = 0x20;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080016f4": "check_data_080016f4",
                "param_1": "data_array",
                "param_2": "data_size",
                "iVar1": "initial_data",
                "iVar2": "current_data"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001754": {
            "entrypoint": "0x08001754",
            "current_name": "initialize_device_08001754",
            "code": "\nundefined4 initializeDevice_08001754(uint **deviceParams)\n\n{\n  uint valueLow;\n  uint valueHigh;\n  uint *deviceParam1;\n  uint *deviceParam2;\n  uint *deviceParam3;\n  uint scaledValue;\n  undefined8 memoryValue;\n  \n  if (deviceParams != (uint **)0x0) {\n    if (*(char *)((int)deviceParams + 0x35) == '\\0') {\n      *(undefined *)(deviceParams + 0xd) = 0;\n      configureDevice();\n    }\n    *(undefined *)((int)deviceParams + 0x35) = 0x24;\n    **deviceParams = **deviceParams & 0xfffffffe;\n    memoryValue = readMemoryValue();\n    valueHigh = (uint)((ulonglong)memoryValue >> 0x20);\n    valueLow = (uint)memoryValue;\n    deviceParam2 = deviceParams[1];\n    scaledValue = valueLow / 1000000;\n    if ((uint *)0x186a0 < deviceParam2) {\n      valueHigh = 300;\n    }\n    deviceParam1 = *deviceParams;\n    if ((uint *)0x186a0 < deviceParam2) {\n      valueHigh = scaledValue * valueHigh;\n    }\n    deviceParam1[1] = scaledValue;\n    if ((uint *)0x186a0 < deviceParam2) {\n      scaledValue = valueHigh / 1000;\n    }\n    deviceParam1[8] = scaledValue + 1;\n    if (deviceParam2 < (uint *)0x186a1) {\n      valueLow = valueLow / (uint)((int)deviceParam2 << 1);\n      if ((valueLow & 0xfff) < 4) {\n        valueLow = 4;\n      }\n    }\n    else {\n      if (deviceParams2 == (uint *)0x0) {\n        valueLow = valueLow / (uint)((int)deviceParam2 * 3) | 0x8000;\n      }\n      else {\n        valueLow = valueLow / (uint)((int)deviceParam2 * 0x19) | 0xc000;\n      }\n      if ((valueLow & 0xfff) == 0) {\n        valueLow = 1;\n      }\n    }\n    deviceParam2 = deviceParams9;\n    deviceParam3 = deviceParams8;\n    deviceParam1[7] = valueLow;\n    *deviceParam1 = (uint)deviceParam3 | (uint)deviceParam2;\n    deviceParam1[2] = (uint)deviceParams[4] | (uint)deviceParams[3];\n    deviceParam1[3] = (uint)deviceParams[5] | (uint)deviceParams[6];\n    *deviceParam1 = *deviceParam1 | 1;\n    deviceParams[0xe] = (uint *)0x0;\n    *(undefined *)((int)deviceParams + 0x35) = 0x20;\n    *(undefined *)((int)deviceParams + 0x36) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001754": "initialize_device_08001754",
                "param_1": "deviceParams",
                "uVar1": "valueLow",
                "uVar2": "valueHigh",
                "puVar3": "deviceParam1",
                "puVar4": "deviceParam2",
                "puVar5": "deviceParam3",
                "uVar6": "scaledValue",
                "uVar7": "memoryValue",
                "configure_device_08004d48": "configureDevice",
                "read_value_from_memory_08002220": "readMemoryValue",
                "param_1[2]": "deviceParams2",
                "param_1[8]": "deviceParams9",
                "param_1[7]": "deviceParams8"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004d48",
                "FUN_08002220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001828": {
            "entrypoint": "0x08001828",
            "current_name": "process_data_08001828",
            "code": "\nundefined4\nprocessData_08001828(uint **data,undefined4 param2,undefined4 param3,undefined4 param4,byte *byteArray,\n            short byteArrayLength,undefined4 param7)\n\n{\n  int dataStart;\n  int dataEnd;\n  uint *pointer;\n  uint value;\n  \n  if (*(char *)((int)data + 0x35) == ' ') {\n    if (byteArray == (byte *)0x0) {\n      return 1;\n    }\n    if (byteArrayLength == 0) {\n      return 1;\n    }\n    dataStart = getData();\n    do {\n      pointer = *data;\n      if ((~pointer[6] & 2) != 0) {\n        if (*(char *)(data + 0xd) == '\\x01') {\n          return 2;\n        }\n        value = *pointer;\n        *(undefined *)(data + 0xd) = 1;\n        *pointer = value & 0xfffff7ff;\n        *(undefined *)((int)data + 0x35) = 0x21;\n        *(undefined *)((int)data + 0x36) = 0x40;\n        subData = (uint *)0x0;\n        dataStart = processData_08001828Func(data,param2,param3,param4,param7);\n        if (dataStart != 0) {\n          *(undefined *)(data + 0xd) = 0;\n          if (subData == (uint *)0x4) {\n            return 1;\n          }\n          return 3;\n        }\n        goto LAB_080018e2;\n      }\n      dataEnd = getData();\n    } while ((uint)(dataEnd - dataStart) < 0x2711);\n    *(undefined *)(data + 0xd) = 0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n  }\n  return 2;\n  while (byteArrayLength != 0) {\nLAB_080018e2:\n    dataStart = checkAndModifyData(data,param7);\n    if (dataStart != 0) goto LAB_080018ee;\n    pointer = *data;\n    pointer[4] = (uint)*byteArray;\n    if ((int)(pointer[5] << 0x1d) < 0) {\n      if ((short)(byteArrayLength + -1) == 0) break;\n      byteArrayLength = byteArrayLength + -2;\n      pointer[4] = (uint)byteArray[1];\n      byteArray = byteArray + 2;\n    }\n    else {\n      byteArray = byteArray + 1;\n      byteArrayLength = byteArrayLength + -1;\n    }\n  }\n  dataStart = checkAndModifyData(data,param7);\n  if (dataStart == 0) {\n    **data = **data | 0x200;\n    *(undefined *)(data + 0xd) = 0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n    *(undefined *)((int)data + 0x36) = 0;\n    return 0;\n  }\nLAB_080018ee:\n  if (subData == (uint *)0x4) {\n    **data = **data | 0x200;\n    return 1;\n  }\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001828": "process_data_08001828",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "byteArray",
                "param_6": "byteArrayLength",
                "param_7": "param7",
                "iVar1": "dataStart",
                "iVar2": "dataEnd",
                "puVar3": "pointer",
                "uVar4": "value",
                "get_data_0800115c": "getData",
                "process_data_08001530": "processDataFunc",
                "param_1[0xe]": "subData",
                "check_and_modify_data_080014e2": "checkAndModifyData"
            },
            "calling": [
                "FUN_0800403c"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001530",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001938": {
            "entrypoint": "0x08001938",
            "current_name": "perform_operation_08001938",
            "code": "\nundefined4\nperformOperation_08001938(uint **dataPointer,undefined4 param2,undefined4 param3,undefined4 param4,\n            undefined *output,ushort inputSize,uint timeout)\n\n{\n  undefined *ptr1;\n  int startTime;\n  int currentTime;\n  uint *dataPtr;\n  uint value;\n  undefined *outputPtr;\n  bool isGreater;\n  \n  if (*(char *)((int)dataPointer + 0x35) != ' ') {\n    return 2;\n  }\n  if (output == (undefined *)0x0) {\n    return 1;\n  }\n  if (inputSize == 0) {\n    return 1;\n  }\n  startTime = get_data_0800115c();\n  while (dataPtr = *dataPointer, (~dataPtr[6] & 2) == 0) {\n    currentTime = get_data_0800115c();\n    if (10000 < (uint)(currentTime - startTime)) {\n      *(undefined *)(dataPointer + 0xd) = 0;\n      *(undefined *)((int)dataPointer + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(dataPointer + 0xd) == '\\x01') {\n    return 2;\n  }\n  value = *dataPtr;\n  *(undefined *)(dataPointer + 0xd) = 1;\n  *dataPtr = value & 0xfffff7ff;\n  *(undefined *)((int)dataPointer + 0x35) = 0x22;\n  *(undefined *)((int)dataPointer + 0x36) = 0x40;\n  errorCode = (uint *)0x0;\n  startTime = verify_and_modify_data_080015e8(dataPointer,param2,param3,param4,timeout);\n  if (startTime != 0) {\n    *(undefined *)(dataPointer + 0xd) = 0;\n    if (errorCode == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  dataPtr = *dataPointer;\n  value = *dataPtr;\n  if (inputSize == 1) {\n    *dataPtr = value & 0xfffffbff;\n    disableIRQinterrupts();\n    **dataPointer = **dataPointer | 0x200;\n    enableIRQinterrupts();\n    startTime = check_data_080016f4(dataPointer,timeout);\n    if (startTime == 0) {\n      *output = (char)(*dataPointer)[4];\nLAB_08001ab8:\n      *(undefined *)((int)dataPointer + 0x35) = 0x20;\n      *(undefined *)((int)dataPointer + 0x36) = 0;\n      *(undefined *)(dataPointer + 0xd) = 0;\n      return 0;\n    }\nLAB_08001a18:\n    if (errorCode != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (inputSize == 2) {\n    *dataPtr = value | 0x800;\n    disableIRQinterrupts();\n    **dataPointer = **dataPointer & 0xfffffbff;\n    enableIRQinterrupts();\n  }\n  else {\n    *dataPtr = value | 0x400;\n    while (3 < inputSize) {\n      startTime = check_data_080016f4(dataPointer,timeout);\n      if (startTime != 0) goto LAB_08001a18;\n      *output = (char)(*dataPointer)[4];\n      dataPtr = *dataPointer;\n      isGreater = (int)(dataPtr[5] << 0x1d) < 0;\n      if (isGreater) {\n        dataPtr = (uint *)dataPtr[4];\n        outputPtr = output + 2;\n        inputSize = inputSize - 2;\n      }\n      else {\n        outputPtr = output + 1;\n        inputSize = inputSize - 1;\n      }\n      ptr1 = output + 1;\n      output = outputPtr;\n      if (isGreater) {\n        *ptr1 = (char)dataPtr;\n      }\n    }\n    if (inputSize != 2) {\n      startTime = get_data_0800115c();\n      do {\n        dataPtr = *dataPointer;\n        do {\n          if ((int)(dataPtr[5] << 0x1d) < 0) {\n            *dataPtr = *dataPtr & 0xfffffbff;\n            disableIRQinterrupts();\n            *output = (char)(*dataPointer)[4];\n            startTime = get_data_0800115c();\n            goto LAB_08001b3a;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (currentTime = get_data_0800115c(), (uint)(currentTime - startTime) <= timeout));\n      goto LAB_08001afa;\n    }\n  }\n  startTime = get_data_0800115c();\n  do {\n    do {\n      if ((int)((*dataPointer)[5] << 0x1d) < 0) {\n        disableIRQinterrupts();\n        dataPtr = *dataPointer;\n        *dataPtr = *dataPtr | 0x200;\n        *output = (char)dataPtr[4];\n        enableIRQinterrupts();\n        output[1] = (char)(*dataPointer)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (currentTime = get_data_0800115c(), (uint)(currentTime - startTime) <= timeout));\nLAB_08001afa:\n  *(undefined *)((int)dataPointer + 0x35) = 0x20;\n  *(undefined *)(dataPointer + 0xd) = 0;\n  return 3;\nLAB_08001b3a:\n  do {\n    dataPtr = *dataPointer;\n    do {\n      if ((int)(dataPtr[5] << 0x1d) < 0) {\n        *dataPtr = *dataPtr | 0x200;\n        output[1] = (char)dataPtr[4];\n        enableIRQinterrupts();\n        output[2] = (char)(*dataPointer)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (currentTime = get_data_0800115c(), (uint)(currentTime - startTime) <= timeout));\n  goto LAB_08001afa;\n}\n\n",
            "renaming": {
                "FUN_08001938": "perform_operation_08001938",
                "param_1": "dataPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "output",
                "param_6": "inputSize",
                "param_7": "timeout",
                "puVar1": "ptr1",
                "iVar2": "startTime",
                "iVar3": "currentTime",
                "puVar4": "dataPtr",
                "uVar5": "value",
                "puVar6": "outputPtr",
                "bVar7": "isGreater",
                "param_1[0xe]": "errorCode"
            },
            "calling": [
                "FUN_080040b8",
                "FUN_0800407c"
            ],
            "called": [
                "FUN_080016f4",
                "FUN_0800115c",
                "FUN_080015e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b58": {
            "entrypoint": "0x08001b58",
            "current_name": "check_conditions_08001b58",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\n\nundefined4 check_conditions_08001b58(int *conditions)\n\n{\n  int value_1;\n  int value_2;\n  \n  if (*conditions << 0x1f < 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((int)(_DAT_40021004 << 0xf) < 0)))) {\n      if (((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) && (conditions[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      value_1 = conditions[1];\n      if (value_1 == 0x10000) {\nLAB_08001c1e:\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else {\n        if (value_1 == 0) {\n          _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n          value_1 = get_data_0800115c();\n          while ((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) {\n            value_2 = get_data_0800115c();\n            if (100 < (uint)(value_2 - value_1)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (value_1 == 0x50000) {\n          _DAT_40021000 = _DAT_40021000 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      value_1 = get_data_0800115c();\n      while (-1 < (int)((_DAT_40021000 >> 0x11) << 0x1f)) {\n        value_2 = get_data_0800115c();\n        if (100 < (uint)(value_2 - value_1)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  if (*conditions << 0x1e < 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && (-1 < (int)(_DAT_40021004 << 0xf))))) {\n      if (((int)((_DAT_40021000 >> 1) << 0x1f) < 0) && (conditions[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      iRam42420000 = conditions[4];\n      if (iRam42420000 == 0) {\n        value_1 = get_data_0800115c();\n        while ((int)((_DAT_40021000 >> 1) << 0x1f) < 0) {\n          value_2 = get_data_0800115c();\n          if (2 < (uint)(value_2 - value_1)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      iRam42420000 = 1;\n      value_1 = get_data_0800115c();\n      while (-1 < (int)((_DAT_40021000 >> 1) << 0x1f)) {\n        value_2 = get_data_0800115c();\n        if (2 < (uint)(value_2 - value_1)) {\n          return 3;\n        }\n      }\n    }\n    _DAT_40021000 = conditions[5] << 3 | _DAT_40021000 & 0xffffff07;\n  }\nLAB_08001b6c:\n  if (*conditions << 0x1c < 0) {\n    iRam42420480 = conditions[6];\n    if (iRam42420480 == 0) {\n      value_1 = get_data_0800115c();\n      while ((int)((_DAT_40021024 >> 1) << 0x1f) < 0) {\n        value_2 = get_data_0800115c();\n        if (2 < (uint)(value_2 - value_1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iRam42420480 = 1;\n      value_1 = get_data_0800115c();\n      while (-1 < (int)((_DAT_40021024 >> 1) << 0x1f)) {\n        value_2 = get_data_0800115c();\n        if (2 < (uint)(value_2 - value_1)) {\n          return 3;\n        }\n      }\n      FUNC_08001168(1);\n    }\n  }\n  if (-1 < *conditions << 0x1d) goto LAB_08001bc2;\n  _DAT_4002101c = _DAT_4002101c | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0x100;\n  value_1 = get_data_0800115c();\n  while (-1 < (int)(_DAT_40007000 << 0x17)) {\n    value_2 = get_data_0800115c();\n    if (100 < (uint)(value_2 - value_1)) {\n      return 3;\n    }\n  }\n  value_1 = conditions[3];\n  if (value_1 == 1) {\nLAB_08001e1a:\n    _DAT_40021020 = _DAT_40021020 | 1;\n  }\n  else {\n    if (value_1 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n      value_1 = get_data_0800115c();\n      while ((int)((_DAT_40021020 >> 1) << 0x1f) < 0) {\n        value_2 = get_data_0800115c();\n        if (5000 < (uint)(value_2 - value_1)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (value_1 == 5) {\n      _DAT_40021020 = _DAT_40021020 | 4;\n      goto LAB_08001e1a;\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n  }\n  value_1 = get_data_0800115c();\n  while (-1 < (int)((_DAT_40021020 >> 1) << 0x1f)) {\n    value_2 = get_data_0800115c();\n    if (5000 < (uint)(value_2 - value_1)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  if (conditions[7] == 0) {\n    return 0;\n  }\n  if ((_DAT_40021004 & 0xc) != 8) {\n    if (conditions[7] != 2) {\n      uRam42420060 = 0;\n      value_1 = get_data_0800115c();\n      do {\n        if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n          return 0;\n        }\n        value_2 = get_data_0800115c();\n      } while ((uint)(value_2 - value_1) < 3);\n      return 3;\n    }\n    uRam42420060 = 0;\n    value_1 = get_data_0800115c();\n    do {\n      if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n        if (conditions[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | conditions[2];\n        }\n        _DAT_40021004 = conditions[8] | conditions[9] | _DAT_40021004 & 0xffc2ffff;\n        uRam42420060 = 1;\n        value_1 = get_data_0800115c();\n        do {\n          if ((int)((_DAT_40021000 >> 0x19) << 0x1f) < 0) {\n            return 0;\n          }\n          value_2 = get_data_0800115c();\n        } while ((uint)(value_2 - value_1) < 3);\n        return 3;\n      }\n      value_2 = get_data_0800115c();\n    } while ((uint)(value_2 - value_1) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001b58": "check_conditions_08001b58",
                "param_1": "conditions",
                "iVar1": "value_1",
                "iVar2": "value_2"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002008": {
            "entrypoint": "0x08002008",
            "current_name": "calculate_mpu9250_clock_08002008",
            "code": "\n\n\nint calculateMPU9250Clock_08002008(void)\n\n{\n  undefined4 firstValue;\n  int result;\n  undefined4 secondValue;\n  undefined4 *sourceData;\n  uint clockFrequency;\n  undefined4 *destinationData;\n  byte localArray [4];\n  undefined4 temporaryArray [5];\n  \n  sourceData = &DAT_080072f0;\n  destinationData = temporaryArray;\n  do {\n    firstValue = *sourceData;\n    secondValue = sourceData[1];\n    sourceData = sourceData + 2;\n    *destinationData = firstValue;\n    destinationData[1] = secondValue;\n    destinationData = destinationData + 2;\n  } while (sourceData != (undefined4 *)\"../Src/MPU9250.c\");\n  localArray[0] = 1;\n  localArray[1] = 2;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((int)(_DAT_40021004 << 0xf) < 0) {\n      clockFrequency = 8000000 / localArray[(_DAT_40021004 & 0x20000) >> 0x11];\n    }\n    else {\n      clockFrequency = 4000000;\n    }\n    result = clockFrequency * *(byte *)((int)temporaryArray + ((_DAT_40021004 & 0x3c0000) >> 0x12));\n  }\n  else {\n    result = 8000000;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002008": "calculate_mpu9250_clock_08002008",
                "uVar1": "firstValue",
                "iVar2": "result",
                "uVar3": "secondValue",
                "puVar4": "sourceData",
                "uVar5": "clockFrequency",
                "puVar6": "destinationData",
                "local_24": "localArray",
                "local_20": "temporaryArray"
            },
            "calling": [
                "FUN_0800209c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800209c": {
            "entrypoint": "0x0800209c",
            "current_name": "initialize_and_calculate_clock_0800209c",
            "code": "\n\n\nundefined4 initialize_and_calculate_clock_0800209c(uint *input_parameters,uint input_value)\n\n{\n  char condition_variable_1;\n  char condition_variable_2;\n  int temporary_variable_1;\n  uint temporary_variable_2;\n  int temporary_variable_3;\n  uint temporary_variable_4;\n  \n  if ((input_value <= (_DAT_40022000 & 7)) ||\n     (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | input_value, input_value == (input_value & 7))) {\n    if ((int)(*input_parameters << 0x1e) < 0) {\n      _DAT_40021004 = _DAT_40021004 & 0xffffff0f | input_parameters[2];\n    }\n    temporary_variable_1 = *input_parameters << 0x1f;\n    if (-1 < temporary_variable_1) {\nLAB_080020ba:\n      if ((input_value < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | input_value, input_value != (input_value & 7))) {\n        return 1;\n      }\n      if ((*input_parameters & 4) != 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | input_parameters[3];\n      }\n      if ((int)(*input_parameters << 0x1c) < 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | input_parameters[4] << 3;\n      }\n      temporary_variable_2 = calculate_mpu9250_clock_08002008();\n      DAT_200001bc = temporary_variable_2 >> (&DAT_08007361)[(_DAT_40021004 & 0xf0) >> 4];\n      initialize_system_08001104(0);\n      return 0;\n    }\n    temporary_variable_2 = input_parameters[1];\n    if (temporary_variable_2 == 1) {\n      condition_variable_2 = '\\x01';\n      condition_variable_1 = '\\0';\n    }\n    else {\n      temporary_variable_4 = _DAT_40021000;\n      if (temporary_variable_2 == 2) goto LAB_08002176;\n      condition_variable_2 = '\\0';\n      condition_variable_1 = '\\x01';\n    }\n    temporary_variable_4 = (_DAT_40021000 >>\n            (LZCOUNT((uint)(byte)(condition_variable_1 << 6) << 0x18 | (uint)(byte)(condition_variable_2 << 6) << 8) & 0x1fU)) <<\n            0x1f;\n    if ((int)temporary_variable_4 < 0) {\nLAB_08002176:\n      _DAT_40021004 = _DAT_40021004 & 0xfffffffc | temporary_variable_2;\n      temporary_variable_1 = get_data_0800115c(temporary_variable_1,temporary_variable_4);\n      if (input_parameters[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_080020ba;\n          temporary_variable_3 = get_data_0800115c();\n        } while ((uint)(temporary_variable_3 - temporary_variable_1) < 0x1389);\n      }\n      else if (input_parameters[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_080020ba;\n          temporary_variable_3 = get_data_0800115c();\n        } while ((uint)(temporary_variable_3 - temporary_variable_1) < 0x1389);\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_080020ba;\n          temporary_variable_3 = get_data_0800115c();\n        } while ((uint)(temporary_variable_3 - temporary_variable_1) < 0x1389);\n      }\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800209c": "initialize_and_calculate_clock_0800209c",
                "param_1": "input_parameters",
                "param_2": "input_value",
                "cVar1": "condition_variable_1",
                "cVar2": "condition_variable_2",
                "iVar3": "temporary_variable_1",
                "uVar4": "temporary_variable_2",
                "iVar5": "temporary_variable_3",
                "uVar6": "temporary_variable_4"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_08001104",
                "FUN_0800115c",
                "FUN_08002008"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002214": {
            "entrypoint": "0x08002214",
            "current_name": "get_data_08002214",
            "code": "\nundefined4 get_data_08002214(void)\n\n{\n  return DAT_200001bc;\n}\n\n",
            "renaming": {
                "FUN_08002214": "get_data_08002214"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002220": {
            "entrypoint": "0x08002220",
            "current_name": "read_value_from_memory_08002220",
            "code": "\n\n\nuint read_value_from_memory_08002220(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x700) >> 8];\n}\n\n",
            "renaming": {
                "FUN_08002220": "read_value_from_memory_08002220"
            },
            "calling": [
                "FUN_080025e8",
                "FUN_08001754"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002250": {
            "entrypoint": "0x08002250",
            "current_name": "FUNC_08002250",
            "code": "\n\n\nuint FUNC_08002250(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x3800) >> 0xb];\n}\n\n",
            "renaming": {
                "FUN_08002250": "FUNC_08002250"
            },
            "calling": [
                "FUN_080025e8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002280": {
            "entrypoint": "0x08002280",
            "current_name": "update_flags_08002280",
            "code": "\nvoid updateFlags_08002280(int address,uint *values)\n\n{\n  uint updatedFlags1;\n  uint updatedFlags2;\n  uint newValue;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xfffffffe;\n  updatedFlags2 = *(uint *)(address + 4);\n  newValue = *values;\n  updatedFlags1 = *(uint *)(address + 0x20) & 0xfffffffd | values[2];\n  if (address == 0x40012c00) {\n    updatedFlags1 = (updatedFlags1 & 0xfffffff7 | values[3]) & 0xfffffffb;\n    updatedFlags2 = updatedFlags2 & 0xfffffcff | values[5] | values[6];\n  }\n  *(uint *)(address + 4) = updatedFlags2;\n  *(uint *)(address + 0x18) = *(uint *)(address + 0x18) & 0xffffff8c | newValue;\n  *(uint *)(address + 0x34) = values[1];\n  *(uint *)(address + 0x20) = updatedFlags1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002280": "update_flags_08002280",
                "param_1": "address",
                "param_2": "values",
                "uVar1": "updatedFlags1",
                "uVar2": "updatedFlags2",
                "uVar3": "newValue"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022d0": {
            "entrypoint": "0x080022d0",
            "current_name": "update_parameters_080022d0",
            "code": "\nvoid updateParameters_080022d0(int paramAddress,uint *paramValues)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  uint updatedValue3;\n  \n  *(uint *)(paramAddress + 0x20) = *(uint *)(paramAddress + 0x20) & 0xfffffeff;\n  updatedValue2 = *(uint *)(paramAddress + 4);\n  updatedValue3 = *paramValues;\n  updatedValue1 = *(uint *)(paramAddress + 0x20) & 0xfffffdff | paramValues[2] << 8;\n  if (paramAddress == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xfffff7ff | paramValues[3] << 8) & 0xfffffbff;\n    updatedValue2 = updatedValue2 & 0xffffcfff | (paramValues[5] | paramValues[6]) << 4;\n  }\n  *(uint *)(paramAddress + 4) = updatedValue2;\n  *(uint *)(paramAddress + 0x1c) = *(uint *)(paramAddress + 0x1c) & 0xffffff8c | updatedValue3;\n  *(uint *)(paramAddress + 0x3c) = paramValues[1];\n  *(uint *)(paramAddress + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022d0": "update_parameters_080022d0",
                "param_1": "paramAddress",
                "param_2": "paramValues",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "uVar3": "updatedValue3"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002324": {
            "entrypoint": "0x08002324",
            "current_name": "set_flags_and_values_08002324",
            "code": "\nvoid setFlagsAndValues_08002324(int address,int *params)\n\n{\n  uint value1;\n  int value2;\n  int value3;\n  int value4;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xffffefff;\n  value1 = *(uint *)(address + 4);\n  value2 = *params;\n  value3 = params[2];\n  value4 = 0x40012c00;\n  if (address == 0x40012c00) {\n    value4 = params[5];\n    value1 = value1 & 0xffffbfff;\n  }\n  if (address == 0x40012c00) {\n    value1 = value1 | value4 << 6;\n  }\n  *(uint *)(address + 4) = value1;\n  *(uint *)(address + 0x1c) = *(uint *)(address + 0x1c) & 0xffff8cff | value2 << 8;\n  *(int *)(address + 0x40) = params[1];\n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xffffdfff | value3 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002324": "set_flags_and_values_08002324",
                "param_1": "address",
                "param_2": "params",
                "uVar1": "value1",
                "iVar2": "value2",
                "iVar3": "value3",
                "iVar4": "value4"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002368": {
            "entrypoint": "0x08002368",
            "current_name": "update_memory_08002368",
            "code": "\nvoid updateMemory_08002368(uint *memoryAddress,uint *data)\n\n{\n  uint updatedValue;\n  \n  updatedValue = *memoryAddress;\n  if (((((memoryAddress == (uint *)0x40012c00) || (memoryAddress == (uint *)0x40000000)) ||\n       (memoryAddress == (uint *)0x40000400)) || (memoryAddress == (uint *)0x40000800)) &&\n     (((updatedValue = updatedValue & 0xffffff8f | data[1], memoryAddress == (uint *)0x40012c00 ||\n       (memoryAddress == (uint *)0x40000000)) ||\n      ((memoryAddress == (uint *)0x40000400 || (memoryAddress == (uint *)0x40000800)))))) {\n    updatedValue = updatedValue & 0xfffffcff | data[3];\n  }\n  *memoryAddress = updatedValue;\n  memoryAddress[0xb] = data[2];\n  memoryAddress[10] = *data;\n  updatedValue = 0x40012c00;\n  if (memoryAddress == (uint *)0x40012c00) {\n    updatedValue = data[4];\n  }\n  if (memoryAddress == (uint *)0x40012c00) {\n    memoryAddress[0xc] = updatedValue;\n  }\n  memoryAddress[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002368": "update_memory_08002368",
                "param_1": "memoryAddress",
                "param_2": "data",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023d0": {
            "entrypoint": "0x080023d0",
            "current_name": "process_data_080023d0",
            "code": "\nundefined4 processData_080023d0(undefined4 *dataPtr)\n\n{\n  if (dataPtr != (undefined4 *)0x0) {\n    if (*(char *)((int)dataPtr + 0x39) == '\\0') {\n      *(undefined *)(dataPtr + 0xe) = 0;\n      updateDataFlags();\n    }\n    *(undefined *)((int)dataPtr + 0x39) = 2;\n    updateMemory(*dataPtr,dataPtr + 1);\n    *(undefined *)((int)dataPtr + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080023d0": "process_data_080023d0",
                "param_1": "dataPtr",
                "update_data_flags_08004d8c": "updateDataFlags",
                "update_memory_08002368": "updateMemory"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004d8c",
                "FUN_08002368"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002404": {
            "entrypoint": "0x08002404",
            "current_name": "update_data_08002404",
            "code": "\nvoid updateData_08002404(int dataAddress,int *dataArray)\n\n{\n  uint modifiedValue1;\n  uint modifiedValue2;\n  int inputValue;\n  \n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xffffffef;\n  modifiedValue2 = *(uint *)(dataAddress + 4);\n  inputValue = *dataArray;\n  modifiedValue1 = *(uint *)(dataAddress + 0x20) & 0xffffffdf | dataArray[2] << 4;\n  if (dataAddress == 0x40012c00) {\n    modifiedValue1 = (modifiedValue1 & 0xffffff7f | dataArray[3] << 4) & 0xffffffbf;\n    modifiedValue2 = modifiedValue2 & 0xfffff3ff | (dataArray[5] | dataArray[6]) << 2;\n  }\n  *(uint *)(dataAddress + 4) = modifiedValue2;\n  *(uint *)(dataAddress + 0x18) = *(uint *)(dataAddress + 0x18) & 0xffff8cff | inputValue << 8;\n  *(int *)(dataAddress + 0x38) = dataArray[1];\n  *(uint *)(dataAddress + 0x20) = modifiedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002404": "update_data_08002404",
                "param_1": "dataAddress",
                "param_2": "dataArray",
                "uVar1": "modifiedValue1",
                "uVar2": "modifiedValue2",
                "iVar3": "inputValue"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800245c": {
            "entrypoint": "0x0800245c",
            "current_name": "update_flags_and_values_0800245c",
            "code": "\nvoid updateFlagsAndValues_0800245c(int *data,undefined4 param_2,undefined4 param_3)\n\n{\n  int out1;\n  int out2;\n  int out3;\n  int out4;\n  int temp1;\n  uint updatedValue;\n  int temp2;\n  \n  if (*(char *)(data + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)data + 0x39) = 2;\n  *(undefined *)(data + 0xe) = 1;\n  switch(param_3) {\n  case 0:\n    update_flags_08002280(*data);\n    temp2 = *data;\n    updatedValue = *(uint *)(out1 + 0x10);\n    *(uint *)(temp2 + 0x18) = *(uint *)(temp2 + 0x18) | 8;\n    *(uint *)(temp2 + 0x18) = *(uint *)(temp2 + 0x18) & 0xfffffffb;\n    updatedValue = *(uint *)(temp2 + 0x18) | updatedValue;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    update_data_08002404(*data);\n    temp2 = *data;\n    temp1 = *(int *)(out2 + 0x10);\n    *(uint *)(temp2 + 0x18) = *(uint *)(temp2 + 0x18) | 0x800;\n    *(uint *)(temp2 + 0x18) = *(uint *)(temp2 + 0x18) & 0xfffffbff;\n    updatedValue = *(uint *)(temp2 + 0x18) | temp1 << 8;\n    break;\n  case 8:\n    update_parameters_080022d0(*data);\n    temp2 = *data;\n    updatedValue = *(uint *)(out3 + 0x10);\n    *(uint *)(temp2 + 0x1c) = *(uint *)(temp2 + 0x1c) | 8;\n    *(uint *)(temp2 + 0x1c) = *(uint *)(temp2 + 0x1c) & 0xfffffffb;\n    updatedValue = *(uint *)(temp2 + 0x1c) | updatedValue;\n    goto LAB_080024fa;\n  case 0xc:\n    set_flags_and_values_08002324(*data);\n    temp2 = *data;\n    temp1 = *(int *)(out4 + 0x10);\n    *(uint *)(temp2 + 0x1c) = *(uint *)(temp2 + 0x1c) | 0x800;\n    *(uint *)(temp2 + 0x1c) = *(uint *)(temp2 + 0x1c) & 0xfffffbff;\n    updatedValue = *(uint *)(temp2 + 0x1c) | temp1 << 8;\nLAB_080024fa:\n    *(uint *)(temp2 + 0x1c) = updatedValue;\n    goto switchD_0800247a_caseD_1;\n  }\n  *(uint *)(temp2 + 0x18) = updatedValue;\nswitchD_0800247a_caseD_1:\n  *(undefined *)((int)data + 0x39) = 1;\n  *(undefined *)(data + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800245c": "update_flags_and_values_0800245c",
                "param_1": "data",
                "extraout_r1": "out1",
                "extraout_r1_00": "out2",
                "extraout_r1_01": "out3",
                "extraout_r1_02": "out4",
                "iVar1": "temp1",
                "uVar2": "updatedValue",
                "iVar3": "temp2"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_080022d0",
                "FUN_08002280",
                "FUN_08002404",
                "FUN_08002324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002520": {
            "entrypoint": "0x08002520",
            "current_name": "update_bit_08002520",
            "code": "\nvoid updateBit_08002520(int data,uint bitIndex,int value)\n\n{\n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) & ~(1 << (bitIndex & 0xff));\n  *(uint *)(data + 0x20) = value << (bitIndex & 0xff) | *(uint *)(data + 0x20);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002520": "update_bit_08002520",
                "param_1": "data",
                "param_2": "bitIndex",
                "param_3": "value"
            },
            "calling": [
                "FUN_08002538"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002538": {
            "entrypoint": "0x08002538",
            "current_name": "update_and_set_flag_08002538",
            "code": "\nundefined4 update_and_set_flag_08002538(uint **bit_array_ptr,undefined4 flag_value)\n\n{\n  uint default_flag;\n  uint *ptr_to_bit_array;\n  \n  update_bit_08002520(*bit_array_ptr,flag_value,1);\n  ptr_to_bit_array = *bit_array_ptr;\n  default_flag = 0x40012c00;\n  if (ptr_to_bit_array == (uint *)0x40012c00) {\n    default_flag = uRam40012c44 | 0x8000;\n  }\n  if (ptr_to_bit_array == (uint *)0x40012c00) {\n    ptr_to_bit_array[0x11] = default_flag;\n  }\n  *ptr_to_bit_array = *ptr_to_bit_array | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002538": "update_and_set_flag_08002538",
                "param_1": "bit_array_ptr",
                "param_2": "flag_value",
                "uVar1": "default_flag",
                "puVar2": "ptr_to_bit_array"
            },
            "calling": [
                "FUN_08003ff4"
            ],
            "called": [
                "FUN_08002520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002564": {
            "entrypoint": "0x08002564",
            "current_name": "validate_and_set_flag_08002564",
            "code": "\nundefined4 validate_and_set_flag_08002564(int *data_ptr,uint *flag_ptr)\n\n{\n  undefined4 result;\n  \n  result = 2;\n  if (*(char *)(data_ptr + 0xe) != '\\x01') {\n    *(undefined *)((int)data_ptr + 0x39) = 2;\n    *(uint *)(*data_ptr + 0x44) =\n         *flag_ptr | flag_ptr[1] | flag_ptr[2] | flag_ptr[3] | flag_ptr[4] | flag_ptr[5] | flag_ptr[6];\n    *(undefined *)((int)data_ptr + 0x39) = 1;\n    result = 0;\n    *(undefined *)(data_ptr + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002564": "validate_and_set_flag_08002564",
                "param_1": "data_ptr",
                "param_2": "flag_ptr",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025a4": {
            "entrypoint": "0x080025a4",
            "current_name": "set_permissions_080025a4",
            "code": "\nundefined4 setPermissions_080025a4(int *permissions,uint *values)\n\n{\n  uint value1;\n  undefined4 result;\n  int ptr;\n  uint value2;\n  \n  result = 2;\n  if (*(char *)(permissions + 0xe) != '\\x01') {\n    *(undefined *)((int)permissions + 0x39) = 2;\n    ptr = *permissions;\n    value2 = *values;\n    value1 = values[1];\n    *(uint *)(ptr + 4) = *(uint *)(ptr + 4) & 0xffffff8f;\n    *(uint *)(ptr + 4) = *(uint *)(ptr + 4) | value2;\n    *(uint *)(ptr + 8) = *(uint *)(ptr + 8) & 0xffffff7f;\n    *(uint *)(ptr + 8) = *(uint *)(ptr + 8) | value1;\n    *(undefined *)((int)permissions + 0x39) = 1;\n    result = 0;\n    *(undefined *)(permissions + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080025a4": "set_permissions_080025a4",
                "param_1": "permissions",
                "param_2": "values",
                "uVar1": "value1",
                "uVar2": "result",
                "iVar3": "ptr",
                "uVar4": "value2"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "update_memory_values_080025e8",
            "code": "\nvoid updateMemoryValues_080025e8(int *memoryPointer)\n\n{\n  int value1;\n  int value2;\n  uint value3;\n  int calculatedValue1;\n  int inputValue;\n  int baseAddress;\n  \n  baseAddress = *memoryPointer;\n  value3 = memoryPointer[4];\n  *(uint *)(baseAddress + 0x10) = *(uint *)(baseAddress + 0x10) & 0xffffcfff | memoryPointer[3];\n  *(uint *)(baseAddress + 0xc) = memoryPointer[2] | value3 | memoryPointer[5] | *(uint *)(baseAddress + 0xc) & 0xffffe9f3;\n  *(uint *)(baseAddress + 0x14) = *(uint *)(baseAddress + 0x14) & 0xfffffcff | memoryPointer[6];\n  if (baseAddress == 0x40013800) {\n    value1 = FUNC_08002250();\n    calculatedValue1 = (int)(((ulonglong)(uint)(value1 * 0x19) / (ulonglong)(uint)(memoryPointer[1] << 2)) / 100);\n    value1 = FUNC_08002250();\n    inputValue = memoryPointer[1];\n    value2 = FUNC_08002250();\n    value2 = (uint)(value1 * 0x19) / (uint)(inputValue << 2) +\n            (int)(((ulonglong)(uint)(value2 * 0x19) / (ulonglong)(uint)(memoryPointer[1] << 2)) / 100) *\n            -100;\n    value1 = FUNC_08002250();\n    value3 = (uint)(value1 * 0x19) / (uint)(memoryPointer[1] << 2);\n    value1 = FUNC_08002250();\n  }\n  else {\n    value1 = read_value_from_memory_08002220();\n    calculatedValue1 = (int)(((ulonglong)(uint)(value1 * 0x19) / (ulonglong)(uint)(memoryPointer[1] << 2)) / 100);\n    value1 = read_value_from_memory_08002220();\n    inputValue = memoryPointer[1];\n    value2 = read_value_from_memory_08002220();\n    value2 = (uint)(value1 * 0x19) / (uint)(inputValue << 2) +\n            (int)(((ulonglong)(uint)(value2 * 0x19) / (ulonglong)(uint)(memoryPointer[1] << 2)) / 100) *\n            -100;\n    value1 = read_value_from_memory_08002220();\n    value3 = (uint)(value1 * 0x19) / (uint)(memoryPointer[1] << 2);\n    value1 = read_value_from_memory_08002220();\n  }\n  *(uint *)(baseAddress + 8) =\n       (((value3 + (int)(((ulonglong)(uint)(value1 * 0x19) / (ulonglong)(uint)(memoryPointer[1] << 2)) / 100\n                       ) * -100) * 0x10 + 0x32) / 100 & 0xf | (value2 * 0x10 + 0x32U) / 100 & 0xf0) +\n       calculatedValue1 * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "update_memory_values_080025e8",
                "param_1": "memoryPointer",
                "iVar1": "value1",
                "iVar2": "value2",
                "uVar3": "value3",
                "iVar4": "calculatedValue1",
                "iVar5": "inputValue",
                "iVar6": "baseAddress"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08002250",
                "FUN_08002220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002724": {
            "entrypoint": "0x08002724",
            "current_name": "initialize_and_set_memory_08002724",
            "code": "\nundefined4 initializeAndSetMemory_08002724(int *memoryPointer)\n\n{\n  int tempVar;\n  \n  if (memoryPointer != (int *)0x0) {\n    if (*(char *)((int)memoryPointer + 0x39) == '\\0') {\n      *(undefined *)(memoryPointer + 0xe) = 0;\n      initializeMemoryValues();\n    }\n    *(undefined *)((int)memoryPointer + 0x39) = 2;\n    *(uint *)(*memoryPointer + 0xc) = *(uint *)(*memoryPointer + 0xc) & 0xffffdfff;\n    updateMemoryValues(memoryPointer);\n    tempVar = *memoryPointer;\n    *(uint *)(tempVar + 0x10) = *(uint *)(tempVar + 0x10) & 0xffffb7ff;\n    *(uint *)(tempVar + 0x14) = *(uint *)(tempVar + 0x14) & 0xffffffd5;\n    *(uint *)(tempVar + 0xc) = *(uint *)(tempVar + 0xc) | 0x2000;\n    memoryPointer[0xf] = 0;\n    *(undefined *)((int)memoryPointer + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002724": "initialize_and_set_memory_08002724",
                "param_1": "memoryPointer",
                "iVar1": "tempVar",
                "initialize_memory_08004e7c": "initializeMemoryValues",
                "update_memory_values_080025e8": "updateMemoryValues"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004e7c",
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800290a": {
            "entrypoint": "0x0800290a",
            "current_name": "FUNC_0800290a",
            "code": "\nvoid FUNC_0800290a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800290a": "FUNC_0800290a"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800290c": {
            "entrypoint": "0x0800290c",
            "current_name": "process_extracted_data_0800290c",
            "code": "\nundefined4 processExtractedData_0800290c(int *data)\n\n{\n  byte flag;\n  int header;\n  uint mask;\n  undefined4 value;\n  short counter;\n  ushort *pData1;\n  ushort *pData2;\n  bool isConditionMet;\n  \n  if ((*(byte *)((int)data + 0x39) & 0xef) != 0x22) {\n    return 2;\n  }\n  header = *data;\n  pData1 = (ushort *)data[10];\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      pData2 = pData1 + 1;\n      *pData1 = (ushort)((uint)(*(int *)(header + 4) << 0x17) >> 0x17);\n    }\n    else {\n      pData2 = (ushort *)((int)pData1 + 1);\n      *pData1 = (ushort)*(int *)(header + 4) & 0xff;\n    }\n    data[10] = (int)pData2;\n  }\n  else {\n    if (data[4] == 0) {\n      flag = (byte)*(undefined4 *)(header + 4);\n      data[10] = (int)pData1 + 1;\n    }\n    else {\n      value = *(undefined4 *)(header + 4);\n      data[10] = (int)pData1 + 1;\n      flag = (byte)value & 0x7f;\n    }\n    *(byte *)pData1 = flag;\n  }\n  counter = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = counter;\n  if (counter == 0) {\n    header = *data;\n    *(uint *)(header + 0xc) = *(uint *)(header + 0xc) & 0xffffffdf;\n    isConditionMet = *(char *)((int)data + 0x39) != '2';\n    if (isConditionMet) {\n      mask = *(uint *)(header + 0xc) & 0xfffffeff;\n    }\n    else {\n      header = 0x12;\n      mask = 0x32;\n    }\n    if (isConditionMet) {\n      *(uint *)(header + 0xc) = mask;\n      mask = *(uint *)(header + 0x14) & 0xfffffffe;\n    }\n    if (isConditionMet) {\n      *(uint *)(header + 0x14) = mask;\n      header = 1;\n    }\n    *(char *)((int)data + 0x39) = (char)header;\n    validate_and_process_data_08004c30();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800290c": "process_extracted_data_0800290c",
                "param_1": "data",
                "bVar1": "flag",
                "iVar2": "header",
                "uVar3": "mask",
                "uVar4": "value",
                "sVar5": "counter",
                "puVar6": "pData1",
                "puVar7": "pData2",
                "bVar8": "isConditionMet"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [
                "FUN_08004c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002998": {
            "entrypoint": "0x08002998",
            "current_name": "FUNC_08002998",
            "code": "\nvoid FUNC_08002998(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002998": "FUNC_08002998"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800299a": {
            "entrypoint": "0x0800299a",
            "current_name": "process_data_0800299a",
            "code": "\nvoid process_data_0800299a(uint **data)\n\n{\n  uint value1;\n  short counter;\n  uint value2;\n  uint *pointer;\n  undefined flag;\n  uint *ptr;\n  uint flag2;\n  bool bool_var;\n  \n  ptr = *data;\n  value2 = *ptr;\n  value1 = ptr[3];\n  if ((value2 & 0xf) == 0) {\n    if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n      process_extracted_data_0800290c();\n      return;\n    }\n  }\n  else {\n    flag2 = ptr[5] & 1;\n    if ((flag2 != 0) || ((value1 & 0x120) != 0)) {\n      ptr = (uint *)(value2 << 0x1f);\n      if ((int)ptr < 0) {\n        bool_var = (int)(value1 << 0x17) < 0;\n        if (bool_var) {\n          ptr = (uint *)((uint)data[0xf] | 1);\n        }\n        if (bool_var) {\n          data[0xf] = ptr;\n        }\n      }\n      if (((int)(value2 << 0x1d) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 2);\n      }\n      if (((int)(value2 << 0x1e) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 4);\n      }\n      if (((int)(value2 << 0x1c) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 8);\n      }\n      if (data[0xf] == (uint *)0x0) {\n        return;\n      }\n      if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n        process_extracted_data_0800290c(data);\n      }\n      ptr = *data;\n      if ((-1 < (int)data[0xf] << 0x1c) && ((ptr[5] & 0x40) == 0)) {\n        FUNC_08002998(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      ptr[3] = ptr[3] & 0xfffffedf;\n      ptr[5] = ptr[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 1;\n      FUNC_08002998(data);\n      return;\n    }\n  }\n  if (((int)(value2 << 0x18) < 0) && ((int)(value1 << 0x18) < 0)) {\n    if ((*(byte *)((int)data + 0x39) & 0xdf) == 0x12) {\n      pointer = data[8];\n      if (data[2] == (uint *)0x1000) {\n        ptr[1] = *(ushort *)pointer & 0x1ff;\n        if (data[4] == (uint *)0x0) {\n          pointer = (uint *)((int)pointer + 2);\n        }\n        else {\n          pointer = (uint *)((int)pointer + 1);\n        }\n        data[8] = pointer;\n      }\n      else {\n        data[8] = (uint *)((int)pointer + 1);\n        ptr[1] = (uint)*(byte *)pointer;\n      }\n      counter = *(short *)((int)data + 0x26) + -1;\n      *(short *)((int)data + 0x26) = counter;\n      if (counter == 0) {\n        ptr[3] = ptr[3] & 0xffffff7f;\n        ptr[3] = ptr[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(value2 << 0x19) < 0) && ((int)(value1 << 0x19) < 0)) {\n    ptr[3] = ptr[3] & 0xffffffbf;\n    if (*(char *)((int)data + 0x39) == '2') {\n      flag = 0x22;\n    }\n    else {\n      flag = 1;\n    }\n    *(undefined *)((int)data + 0x39) = flag;\n    FUNC_0800290a(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800299a": "process_data_0800299a",
                "param_1": "data",
                "uVar1": "value1",
                "sVar2": "counter",
                "uVar3": "value2",
                "puVar4": "pointer",
                "uVar5": "flag",
                "puVar6": "ptr",
                "uVar7": "flag2",
                "bVar8": "bool_var"
            },
            "calling": [],
            "called": [
                "FUN_0800290c",
                "FUN_0800290a",
                "FUN_08002998"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad0": {
            "entrypoint": "0x08002ad0",
            "current_name": "initialize_mpu9250_08002ad0",
            "code": "\nvoid initialize_MPU9250_08002ad0(void)\n\n{\n  process_parameters(0xd0,0x75,\"../Src/MPU9250.c\",0x3b);\n  process_data_and_update(0xd0,0x6b,0x80,1);\n  process_data_and_update(0xd0,0x6b,1);\n  process_data_and_update(0xd0,0x6c,0,1);\n  process_data_and_update(0xd0,0x19,0,1);\n  process_data_and_update(0xd0,0x1d,3,1);\n  process_data_and_update(0xd0,0x1a,3,1);\n  process_data_and_update(0xd0,0x1b,0x10,1);\n  process_data_and_update(0xd0,0x1c,8,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ad0": "initialize_mpu9250_08002ad0",
                "process_parameters_0800407c": "process_parameters",
                "process_data_and_update_0800403c": "process_data_and_update"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b48": {
            "entrypoint": "0x08002b48",
            "current_name": "initialize_mpu9250_08002b48",
            "code": "\nvoid initializeMPU9250_08002b48(void)\n\n{\n  undefined4 magnitude;\n  uint inputData;\n  int firstResult;\n  int secondResult;\n  undefined4 firstHalf;\n  undefined4 secondHalf;\n  \n  firstHalf = 0;\n  secondHalf = inputData & 0xffff0000;\n  copy_parameters_to_buffer_080040e8(0xd0,0x3b,&firstHalf,6,\"../Src/MPU9250.c\",0x58);\n  DAT_200002f6 = CONCAT11(firstHalf._2_1_,firstHalf._3_1_);\n  DAT_200002f4 = CONCAT11((undefined)firstHalf,firstHalf._1_1_);\n  DAT_200002f8 = CONCAT11((undefined)secondHalf,secondHalf._1_1_);\n  secondResult = (int)DAT_200002f6;\n  firstResult = (int)DAT_200002f8;\n  magnitude = calculate_signed_magnitude_08000c44();\n  magnitude = reverse_bits_08000cec(magnitude,0x40800000);\n  DAT_200002d0 = reverse_bits_08000cec(magnitude,0x38000000);\n  magnitude = calculate_signed_magnitude_08000c44(secondResult);\n  magnitude = reverse_bits_08000cec(magnitude,0x40800000);\n  DAT_200002d4 = reverse_bits_08000cec(magnitude,0x38000000);\n  magnitude = calculate_signed_magnitude_08000c44(firstResult);\n  magnitude = reverse_bits_08000cec(magnitude,0x40800000);\n  DAT_200002d8 = reverse_bits_08000cec(magnitude,0x38000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002b48": "initialize_mpu9250_08002b48",
                "in_r3": "inputData",
                "local_18": "firstHalf",
                "local_14": "secondHalf",
                "iVar2": "firstResult",
                "iVar3": "secondResult",
                "uVar1": "magnitude"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bf0": {
            "entrypoint": "0x08002bf0",
            "current_name": "initialize_sensor_data_08002bf0",
            "code": "\nvoid initializeSensorData_08002bf0(void)\n\n{\n  undefined4 uVar1;\n  int sensorData2_Int;\n  int sensorData1_Int;\n  undefined4 sensorData1;\n  undefined2 sensorData2;\n  \n  sensorData1 = 0;\n  sensorData2 = 0;\n  copyParametersToBuffer(0xd0,0x43,&sensorData1,6,\"../Src/MPU9250.c\",0x7b);\n  DAT_200002c0 = CONCAT11(sensorData1._2_1_,sensorData1._3_1_);\n  DAT_200002be = CONCAT11((undefined)sensorData1,sensorData1._1_1_);\n  DAT_200002c2 = CONCAT11((undefined)sensorData2,sensorData2._1_1_);\n  sensorData1_Int = (int)DAT_200002c0;\n  sensorData2_Int = (int)DAT_200002c2;\n  uVar1 = calculateSignedMagnitude();\n  uVar1 = reverseBits(uVar1,0x447a0000);\n  uVar1 = reverseBits(uVar1,0x38000000);\n  DAT_200002c4 = calculateFloat(uVar1,DAT_20000000);\n  uVar1 = calculateSignedMagnitude(sensorData1_Int);\n  uVar1 = reverseBits(uVar1,0x447a0000);\n  uVar1 = reverseBits(uVar1,0x38000000);\n  DAT_200002c8 = calculateFloat(uVar1,DAT_20000004);\n  uVar1 = calculateSignedMagnitude(sensorData2_Int);\n  uVar1 = reverseBits(uVar1,0x447a0000);\n  uVar1 = reverseBits(uVar1,0x38000000);\n  DAT_200002cc = calculateFloat(uVar1,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002bf0": "initialize_sensor_data_08002bf0",
                "local_20": "sensorData1",
                "local_1c": "sensorData2",
                "copy_parameters_to_buffer_080040e8": "copyParametersToBuffer",
                "calculate_signed_magnitude_08000c44": "calculateSignedMagnitude",
                "reverse_bits_08000cec": "reverseBits",
                "calculate_float_08000ad8": "calculateFloat",
                "iVar3": "sensorData1_Int",
                "iVar2": "sensorData2_Int"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cb0": {
            "entrypoint": "0x08002cb0",
            "current_name": "initialize_mpu9250_08002cb0",
            "code": "\nvoid initializeMPU9250_08002cb0(undefined4 param1,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  undefined4 magnitude;\n  uint data;\n  \n  data = param4;\n  processDataAndUpdate(0xd0,0x37,0x22,1,param1,param2,param3);\n  processDataAndUpdate(0xd0,0x6a,1);\n  processParameters(0x18,0,\"../Src/MPU9250.c\",0xad);\n  processDataAndUpdate(0x18,0xb,1);\n  processDataAndUpdate(0x18,10,0,1);\n  processDataAndUpdate(0x18,10,0xf,1);\n  copyParametersToBuffer(0x18,0x10,&data,3,\"../Src/MPU9250.c\",0xb6);\n  magnitude = calculateSignedMagnitude((data & 0xff) - 0x80);\n  magnitude = reverseBits(magnitude,0x3b800000);\n  DAT_200002e8 = calculateFloat(magnitude,0x3f800000);\n  magnitude = calculateSignedMagnitude((data >> 8 & 0xff) - 0x80);\n  magnitude = reverseBits(magnitude,0x3b800000);\n  DAT_200002ec = calculateFloat(magnitude,0x3f800000);\n  magnitude = calculateSignedMagnitude((data >> 0x10 & 0xff) - 0x80);\n  magnitude = reverseBits(magnitude,0x3b800000);\n  DAT_200002f0 = calculateFloat(magnitude,0x3f800000);\n  processDataAndUpdate(0x18,10,0,1);\n  processDataAndUpdate(0x18,10,0x16,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002cb0": "initialize_mpu9250_08002cb0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "magnitude",
                "local_c": "data",
                "process_data_and_update_0800403c": "processDataAndUpdate",
                "process_parameters_0800407c": "processParameters",
                "copy_parameters_to_buffer_080040e8": "copyParametersToBuffer",
                "calculate_signed_magnitude_08000c44": "calculateSignedMagnitude",
                "reverse_bits_08000cec": "reverseBits",
                "calculate_float_08000adc": "calculateFloat"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_0800407c",
                "FUN_080040e8",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d88": {
            "entrypoint": "0x08002d88",
            "current_name": "process_sensor_data_08002d88",
            "code": "\nvoid processSensorData_08002d88(undefined4 data1,undefined4 data2,undefined4 data3,undefined4 data4)\n\n{\n  int result;\n  undefined4 magnitude;\n  undefined4 value;\n  int value2;\n  undefined2 parameter;\n  undefined byte1;\n  undefined byte2;\n  undefined byte3;\n  undefined byte4;\n  byte byte5;\n  undefined uStack_21;\n  \n  uStack_21 = (undefined)((uint)data4 >> 0x18);\n  parameter = 0;\n  byte1 = 0;\n  byte2 = 0;\n  byte3 = 0;\n  byte4 = 0;\n  byte5 = 0;\n  result = process_parameters_0800407c(0x18,2,\"../Src/MPU9250.c\",0xd7,data1,data2);\n  if (result << 0x1f < 0) {\n    copy_parameters_to_buffer_080040e8(0x18,3,&parameter,7,\"../Src/MPU9250.c\",0xda);\n    value = DAT_2000001c;\n    if ((int)((uint)byte5 << 0x1c) < 0) {\n      DAT_200013bb = DAT_200013bb + 1;\n    }\n    else {\n      DAT_200002ba = CONCAT11(byte2,byte1);\n      DAT_200002bc = CONCAT11(byte4,byte3);\n      value2 = (int)DAT_200002ba;\n      result = (int)DAT_200002bc;\n      DAT_200002b8 = parameter;\n      magnitude = calculate_signed_magnitude_08000c44();\n      magnitude = reverse_bits_08000cec(magnitude,value);\n      magnitude = reverse_bits_08000cec(magnitude,DAT_200002e8);\n      magnitude = calculate_float_08000ad8(magnitude,DAT_20000020);\n      DAT_200002dc = reverse_bits_08000cec(magnitude,DAT_2000002c);\n      magnitude = calculate_signed_magnitude_08000c44(value2);\n      magnitude = reverse_bits_08000cec(magnitude,value);\n      magnitude = reverse_bits_08000cec(magnitude,DAT_200002ec);\n      magnitude = calculate_float_08000ad8(magnitude,DAT_20000024);\n      DAT_200002e0 = reverse_bits_08000cec(magnitude,DAT_20000030);\n      magnitude = calculate_signed_magnitude_08000c44(result);\n      value = reverse_bits_08000cec(magnitude,value);\n      value = reverse_bits_08000cec(value,DAT_200002f0);\n      value = calculate_float_08000ad8(value,DAT_20000028);\n      DAT_200002e4 = reverse_bits_08000cec(value,DAT_20000034);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d88": "process_sensor_data_08002d88",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "iVar1": "result",
                "uVar2": "magnitude",
                "uVar3": "value",
                "iVar4": "value2",
                "local_28": "parameter",
                "uStack_26": "byte1",
                "uStack_25": "byte2",
                "local_24": "byte3",
                "local_23": "byte4",
                "local_22": "byte5"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_0800407c",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ea0": {
            "entrypoint": "0x08002ea0",
            "current_name": "initialize_mpu9250_08002ea0",
            "code": "\nvoid initialize_mpu9250_08002ea0(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 extraout_r1;\n  \n  initialize_mpu9250_08002ea0_08002ad0();\n  initialize_mpu9250_08002ea0_08002cb0();\n  initialize_param_08003314(0x3f19999a);\n  initialize_data_08003320(0,extraout_r1,param_3,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ea0": "initialize_mpu9250_08002ea0"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003314",
                "FUN_08002cb0",
                "FUN_08003320",
                "FUN_08002ad0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec0": {
            "entrypoint": "0x08002ec0",
            "current_name": "calculate_and_reverse_bits_08002ec0",
            "code": "\nvoid calculateAndReverseBits_08002ec0(void)\n\n{\n  undefined4 result;\n  undefined4 data1;\n  undefined4 data2;\n  \n  data1 = DAT_2000024c;\n  data2 = DAT_20000010;\n  result = calculate_float_08000ad8(0x3f800000,DAT_20000010);\n  data1 = reverse_bits_08000cec(result,data1);\n  data2 = reverse_bits_08000cec(data2,DAT_2000000c);\n  DAT_2000000c = calculate_float_08000adc(data2,data1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec0": "calculate_and_reverse_bits_08002ec0",
                "uVar1": "result",
                "uVar2": "data1",
                "uVar3": "data2"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000ad8",
                "FUN_08000cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed4": {
            "entrypoint": "0x08002ed4",
            "current_name": "calculate_and_store_result_08002ed4",
            "code": "\nvoid calculateAndStoreResult_08002ed4(void)\n\n{\n  undefined4 result1;\n  undefined4 parameter1;\n  undefined4 parameter2;\n  \n  parameter1 = DAT_20000248;\n  parameter2 = constant2;\n  result1 = FUN_08000ad8(0x3f800000,constant2);\n  parameter1 = FUN_08000cec(result1,parameter1);\n  parameter2 = FUN_08000cec(parameter2,updatedResult);\n  updatedResult = FUN_08000adc(parameter2,parameter1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed4": "calculate_and_store_result_08002ed4",
                "uVar1": "result1",
                "uVar2": "parameter1",
                "uVar3": "parameter2",
                "uRam20000018": "constant2",
                "uRam20000014": "updatedResult"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ee8": {
            "entrypoint": "0x08002ee8",
            "current_name": "calculate_concatenation_result_08002ee8",
            "code": "\nvoid calculateConcatenationResult_08002ee8(void)\n\n{\n  undefined4 data;\n  int result;\n  \n  data = DAT_20000250;\n  result = checkConcatenationResult(DAT_20000250,0xc3340000);\n  if ((result != 0) && (result = checkIfConcatenationIsEmpty(data,0x42b40000), result != 0)) {\n    calculateFloat(data,0x42b40000);\n    return;\n  }\n  calculateFloat2(data,0x43870000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ee8": "calculate_concatenation_result_08002ee8",
                "uVar1": "data",
                "iVar2": "result",
                "check_concatenation_result_08001050": "checkConcatenationResult",
                "check_if_concatenation_is_empty_08001028": "checkIfConcatenationIsEmpty",
                "calculate_float_08000adc": "calculateFloat",
                "calculate_float_08000ad8": "calculateFloat2"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08001050",
                "FUN_08000ad8",
                "FUN_08001028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f28": {
            "entrypoint": "0x08002f28",
            "current_name": "process_sensor_data_08002f28",
            "code": "\n\n\nvoid process_sensor_data_08002f28(void)\n\n{\n  undefined4 uVar1;\n  \n  initialize_MPU9250();\n  initialize_sensor_data();\n  process_sensor_data_08002f28();\n  DAT_20000258 = get_data();\n  uVar1 = calculate_result(DAT_20000258 - DAT_20000254);\n  convert_to_floating_point(uVar1,0x447a0000);\n  initialize_data();\n  DAT_20000254 = DAT_20000258;\n  process_and_calculate_values(DAT_200002d4 + -0x80000000,DAT_200002d0 + -0x80000000,DAT_200002d8,DAT_200002c8,\n               DAT_200002c4,DAT_200002cc + -0x80000000,DAT_200002dc,DAT_200002e0,DAT_200002e4,\n               &DAT_20000248);\n  _DAT_2000142a = (undefined2)((uint)(int)DAT_200002f4 / 100);\n  _DAT_2000142e = (undefined2)((uint)(int)DAT_200002f8 / 100);\n  DAT_2000142c = (undefined2)((uint)(int)DAT_200002f6 / 100);\n  DAT_20001430 = DAT_200002be;\n  _DAT_20001432 = DAT_200002c0;\n  DAT_20001434 = DAT_200002c2;\n  _DAT_20001436 = DAT_200002b8;\n  DAT_20001438 = DAT_200002ba;\n  DAT_2000143a = DAT_200002bc;\n  uVar1 = calculate_and_store_result();\n  reverse_bits(uVar1,0x41200000);\n  DAT_20001395._0_2_ = calculate_signed_shift();\n  uVar1 = calculate_and_reverse_bits();\n  reverse_bits(uVar1,0x41200000);\n  DAT_20001395._2_2_ = calculate_signed_shift();\n  calculate_concatenation_result();\n  DAT_20001399 = calculate_signed_shift();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f28": "process_sensor_data_08002f28",
                "initialize_mpu9250_08002b48": "initialize_MPU9250",
                "initialize_sensor_data_08002bf0": "initialize_sensor_data",
                "process_sensor_data_08002d88": "process_sensor_data",
                "thunk_get_data_0800115c": "get_data",
                "calculate_result_08000c3c": "calculate_result",
                "floating_point_conversion_08000e54": "convert_to_floating_point",
                "initialize_data_08003320": "initialize_data",
                "process_and_calculate_values_08003330": "process_and_calculate_values",
                "calculate_and_store_result_08002ed4": "calculate_and_store_result",
                "reverse_bits_08000cec": "reverse_bits",
                "calculate_signed_shift_08001078": "calculate_signed_shift",
                "calculate_and_reverse_bits_08002ec0": "calculate_and_reverse_bits",
                "calculate_concatenation_result_08002ee8": "calculate_concatenation_result"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "thunk_FUN_0800115c",
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08000c3c",
                "FUN_08002bf0",
                "FUN_08001078",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08003320",
                "FUN_08002ec0",
                "FUN_08003330",
                "FUN_08000e54",
                "FUN_08002ed4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003034": {
            "entrypoint": "0x08003034",
            "current_name": "perform_and_process_operation_08003034",
            "code": "\nuint perform_and_process_operation_08003034(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  undefined4 result;\n  \n  result = input_param_4;\n  perform_and_process_operation_08003034_080040b8(0xee,0,&result,3,\"../Src/MS5611.c\",0x8c,input_param_3);\n  return (uint)CONCAT12((undefined)result,CONCAT11(result._1_1_,result._2_1_));\n}\n\n",
            "renaming": {
                "FUN_08003034": "perform_and_process_operation_08003034",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "local_c": "result"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_080040b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003068": {
            "entrypoint": "0x08003068",
            "current_name": "get_data_constant_08003068",
            "code": "\nundefined4 get_data_constant_08003068(void)\n\n{\n  return DAT_200002fc;\n}\n\n",
            "renaming": {
                "FUN_08003068": "get_data_constant_08003068"
            },
            "calling": [
                "FUN_08004a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003298": {
            "entrypoint": "0x08003298",
            "current_name": "initialize_sensor_08003298",
            "code": "\nvoid initializeSensor_08003298(void)\n\n{\n  int counter;\n  undefined firstByte;\n  undefined secondByte;\n  \n  counter = 0;\n  process_data_and_update_0800403c(0xee,0x1e,1);\n  thunk_FUNC_08001168(10);\n  DAT_20000038 = 8;\n  do {\n    firstByte = 0;\n    secondByte = 0;\n    copy_parameters_to_buffer_080040e8(0xee,counter + 0xa0U & 0xffff,&firstByte,2,\"../Src/MS5611.c\",0x7c);\n    *(ushort *)((int)&DAT_2000025c + counter) = CONCAT11(firstByte,secondByte);\n    counter = counter + 2;\n  } while (counter != 0x10);\n  counter = 0;\n  do {\n    (&DAT_20000300)[counter] = 0;\n    counter = counter + 1;\n  } while (counter != 0x14);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003298": "initialize_sensor_08003298",
                "iVar1": "counter",
                "local_1c": "firstByte",
                "local_1b": "secondByte"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_080040e8",
                "thunk_FUN_08001168",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003314": {
            "entrypoint": "0x08003314",
            "current_name": "initialize_param_08003314",
            "code": "\nvoid initializeParam_08003314(undefined4 parameter)\n\n{\n  DAT_2000035c = parameter;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003314": "initialize_param_08003314",
                "param_1": "parameter"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003320": {
            "entrypoint": "0x08003320",
            "current_name": "initialize_data_08003320",
            "code": "\nvoid initializeData_08003320(undefined4 dataValue)\n\n{\n  DAT_20000360 = dataValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003320": "initialize_data_08003320",
                "param_1": "dataValue"
            },
            "calling": [
                "FUN_08002ea0",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003330": {
            "entrypoint": "0x08003330",
            "current_name": "process_and_calculate_values_08003330",
            "code": "\nvoid process_and_calculate_values_08003330(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4,\n                 undefined4 input_param_5,undefined4 input_param_6,undefined4 input_param_7,undefined4 input_param_8,\n                 undefined4 input_param_9,undefined4 *output_params)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  int is_successful;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  int shift_value;\n  undefined4 float_val1;\n  undefined4 float_val2;\n  undefined4 float_val3;\n  undefined4 float_val4;\n  undefined4 float_val5;\n  undefined4 float_val6;\n  undefined4 float_val7;\n  undefined4 float_val8;\n  undefined4 float_val9;\n  undefined4 float_val10;\n  int reverse_val;\n  undefined4 reverse_val1;\n  undefined4 reverse_val2;\n  undefined4 reverse_val3;\n  undefined4 reverse_val4;\n  undefined4 reverse_val5;\n  undefined4 reverse_val6;\n  int float_val_index;\n  undefined4 reverse_val7;\n  undefined4 reverse_val8;\n  undefined4 reverse_val9;\n  int reverse_val10;\n  undefined8 shifted_value;\n  undefined8 calculation_value;\n  \n  reverse_val9 = DAT_20000048;\n  reverse_val8 = DAT_20000044;\n  reverse_val10 = DAT_20000040;\n  reverse_val7 = DAT_2000003c;\n  temp1 = reverse_bits_08000cec(input_param_1,input_param_1);\n  temp2 = reverse_bits_08000cec(input_param_2);\n  temp1 = calculate_float_08000adc(temp1,temp2);\n  temp2 = reverse_bits_08000cec(input_param_3);\n  calculate_float_08000adc(temp1,temp2);\n  mask_and_shift_08000428();\n  process_input_08005bc8();\n  temp1 = calculate_float_value_08000a30();\n  is_successful = is_concatenation_successful_08001014(temp1,0);\n  if (is_successful == 0) {\n    temp2 = reverse_bits_08000cec(input_param_7);\n    temp3 = reverse_bits_08000cec(input_param_8);\n    temp2 = calculate_float_08000adc(temp2,temp3);\n    temp3 = reverse_bits_08000cec(input_param_9);\n    calculate_float_08000adc(temp2,temp3);\n    mask_and_shift_08000428();\n    process_input_08005bc8();\n    temp2 = calculate_float_value_08000a30();\n    is_successful = is_concatenation_successful_08001014(temp2,0);\n    if (is_successful == 0) {\n      shifted_value = mask_and_shift_08000428(input_param_4);\n      calculate_shifted_value_080004d0((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20),0xa2529d39,0x3f91df46);\n      temp3 = calculate_float_value_08000a30();\n      shifted_value = mask_and_shift_08000428(input_param_5);\n      calculate_shifted_value_080004d0((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20),0xa2529d39,0x3f91df46);\n      temp4 = calculate_float_value_08000a30();\n      shifted_value = mask_and_shift_08000428(input_param_6);\n      calculate_shifted_value_080004d0((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20),0xa2529d39,0x3f91df46);\n      temp5 = calculate_float_value_08000a30();\n      is_successful = calculate_float_08000adc(reverse_val7);\n      temp6 = calculate_float_08000adc(reverse_val10);\n      shift_value = calculate_float_08000adc(reverse_val8,reverse_val8);\n      float_val1 = calculate_float_08000adc(reverse_val9,reverse_val9);\n      float_val2 = reverse_bits_08000cec(reverse_val7);\n      float_val3 = reverse_bits_08000cec(reverse_val7,reverse_val10);\n      float_val4 = reverse_bits_08000cec(reverse_val7,reverse_val8);\n      float_val5 = reverse_bits_08000cec(reverse_val10);\n      float_val6 = reverse_bits_08000cec(reverse_val10,reverse_val9);\n      float_val7 = reverse_bits_08000cec(reverse_val8,reverse_val8);\n      float_val8 = reverse_bits_08000cec(reverse_val9,reverse_val9);\n      temp1 = floating_point_conversion_08000e54(0x3f800000,temp1);\n      temp2 = floating_point_conversion_08000e54(0x3f800000,temp2);\n      float_val9 = reverse_bits_08000cec(input_param_7,temp2);\n      float_val10 = reverse_bits_08000cec(input_param_8,temp2);\n      temp2 = reverse_bits_08000cec(input_param_9,temp2);\n      reverse_val = reverse_bits_08000cec(is_successful,float_val9);\n      reverse_val1 = reverse_bits_08000cec(is_successful,float_val10);\n      reverse_val2 = reverse_bits_08000cec(is_successful,temp2);\n      reverse_val3 = reverse_bits_08000cec(temp6,float_val9);\n      reverse_val4 = reverse_bits_08000cec(float_val2,float_val9);\n      reverse_val5 = reverse_bits_08000cec(reverse_val9,reverse_val1);\n      reverse_val4 = calculate_float_08000ad8(reverse_val4,reverse_val5);\n      reverse_val5 = reverse_bits_08000cec(reverse_val8,reverse_val2);\n      reverse_val4 = calculate_float_08000adc(reverse_val4,reverse_val5);\n      reverse_val5 = reverse_bits_08000cec(float_val5,float_val9);\n      reverse_val4 = calculate_float_08000adc(reverse_val4,reverse_val5);\n      reverse_val5 = reverse_bits_08000cec(temp6,float_val10);\n      reverse_val5 = reverse_bits_08000cec(reverse_val5,reverse_val8);\n      reverse_val4 = calculate_float_08000adc(reverse_val4,reverse_val5);\n      reverse_val5 = reverse_bits_08000cec(temp6,temp2);\n      reverse_val5 = reverse_bits_08000cec(reverse_val5,reverse_val9);\n      reverse_val4 = calculate_float_08000adc(reverse_val4,reverse_val5);\n      reverse_val5 = reverse_bits_08000cec(float_val7,float_val9);\n      reverse_val4 = calculate_float_08000ad8(reverse_val4,reverse_val5);\n      reverse_val5 = reverse_bits_08000cec(float_val8,float_val9);\n      reverse_val4 = calculate_float_08000ad8(reverse_val4,reverse_val5);\n      reverse_val5 = reverse_bits_08000cec(reverse_val9,reverse_val);\n      reverse_val6 = reverse_bits_08000cec(float_val2,float_val10);\n      reverse_val5 = calculate_float_08000adc(reverse_val5,reverse_val6);\n      reverse_val2 = reverse_bits_08000cec(reverse_val10,reverse_val2);\n      reverse_val2 = calculate_float_08000ad8(reverse_val5,reverse_val2);\n      reverse_val5 = reverse_bits_08000cec(reverse_val8,reverse_val3);\n      reverse_val2 = calculate_float_08000adc(reverse_val2,reverse_val5);\n      reverse_val5 = reverse_bits_08000cec(float_val5,float_val10);\n      reverse_val2 = calculate_float_08000ad8(reverse_val2,reverse_val5);\n      reverse_val5 = reverse_bits_08000cec(float_val7,float_val10);\n      reverse_val2 = calculate_float_08000adc(reverse_val2,reverse_val5);\n      reverse_val5 = reverse_bits_08000cec(shift_value,temp2);\n      reverse_val5 = reverse_bits_08000cec(reverse_val5,reverse_val9);\n      reverse_val2 = calculate_float_08000adc(reverse_val2,reverse_val5);\n      reverse_val5 = reverse_bits_08000cec(float_val8,float_val10);\n      reverse_val2 = calculate_float_08000ad8(reverse_val2,reverse_val5);\n      reverse_val4 = reverse_bits_08000cec(reverse_val4,reverse_val4);\n      reverse_val2 = reverse_bits_08000cec(reverse_val2,reverse_val2);\n      calculate_float_08000adc(reverse_val4,reverse_val2);\n      mask_and_shift_08000428();\n      process_input_08005bc8();\n      float_val_index = calculate_float_value_08000a30();\n      reverse_val2 = reverse_bits_08000cec(reverse_val + -0x80000000,reverse_val8);\n      reverse_val1 = reverse_bits_08000cec(reverse_val10,reverse_val1);\n      reverse_val1 = calculate_float_08000adc(reverse_val2,reverse_val1);\n      float_val2 = reverse_bits_08000cec(float_val2,temp2);\n      float_val2 = calculate_float_08000adc(reverse_val1,float_val2);\n      reverse_val1 = reverse_bits_08000cec(reverse_val9,reverse_val3);\n      float_val2 = calculate_float_08000adc(float_val2,reverse_val1);\n      reverse_val1 = reverse_bits_08000cec(float_val5,temp2);\n      float_val2 = calculate_float_08000ad8(float_val2,reverse_val1);\n      reverse_val1 = reverse_bits_08000cec(shift_value,float_val10);\n      reverse_val1 = reverse_bits_08000cec(reverse_val1,reverse_val9);\n      float_val2 = calculate_float_08000adc(float_val2,reverse_val1);\n      reverse_val1 = reverse_bits_08000cec(float_val7,temp2);\n      float_val2 = calculate_float_08000ad8(float_val2,reverse_val1);\n      reverse_val1 = reverse_bits_08000cec(float_val8,temp2);\n      float_val2 = calculate_float_08000adc(float_val2,reverse_val1);\n      reverse_val1 = calculate_float_08000adc(float_val2,float_val2);\n      reverse_val2 = calculate_float_08000adc(float_val6);\n      reverse_val3 = reverse_bits_08000cec(reverse_val8,is_successful);\n      reverse_val2 = calculate_float_08000ad8(reverse_val2,reverse_val3);\n      reverse_val3 = reverse_bits_08000cec(input_param_1,temp1);\n      reverse_val2 = calculate_float_08000ad8(reverse_val2,reverse_val3);\n      reverse_val3 = reverse_bits_08000cec(reverse_val9,shift_value);\n      reverse_val4 = calculate_float_08000adc(float_val3);\n      reverse_val3 = calculate_float_08000adc(reverse_val3,reverse_val4);\n      reverse_val4 = reverse_bits_08000cec(input_param_2,temp1);\n      reverse_val3 = calculate_float_08000ad8(reverse_val3,reverse_val4);\n      reverse_val4 = reverse_bits_08000cec(reverse_val8,float_val2);\n      reverse_val5 = calculate_float_08000ad8(0x3f000000,float_val7);\n      float_val8 = calculate_float_08000ad8(reverse_val5,float_val8);\n      float_val8 = reverse_bits_08000cec(float_val8,float_val_index);\n      reverse_val5 = calculate_float_08000ad8(float_val6,float_val4);\n      reverse_val5 = reverse_bits_08000cec(reverse_val5,float_val2);\n      float_val8 = calculate_float_08000adc(float_val8,reverse_val5);\n      float_val8 = calculate_float_08000ad8(float_val8,float_val9);\n      float_val9 = reverse_bits_08000cec(reverse_val10,float_val2);\n      reverse_val5 = reverse_bits_08000cec(reverse_val10,reverse_val8);\n      reverse_val6 = reverse_bits_08000cec(reverse_val7,reverse_val9);\n      reverse_val5 = calculate_float_08000ad8(reverse_val5,reverse_val6);\n      reverse_val5 = reverse_bits_08000cec(reverse_val5,float_val_index);\n      reverse_val6 = reverse_bits_08000cec(reverse_val8,reverse_val9);\n      float_val3 = calculate_float_08000adc(reverse_val6,float_val3);\n      float_val3 = reverse_bits_08000cec(float_val3,float_val2);\n      float_val3 = calculate_float_08000adc(reverse_val5,float_val3);\n      float_val3 = calculate_float_08000ad8(float_val3,float_val10);\n      float_val10 = reverse_bits_08000cec(reverse_val8,float_val_index);\n      reverse_val5 = calculate_float_08000ad8(0x3f000000,float_val5);\n      reverse_val5 = calculate_float_08000ad8(reverse_val5,float_val7);\n      reverse_val5 = reverse_bits_08000cec(reverse_val5,float_val2);\n      float_val4 = calculate_float_08000adc(float_val4,float_val6);\n      float_val4 = reverse_bits_08000cec(float_val4,float_val_index);\n      float_val4 = calculate_float_08000adc(reverse_val5,float_val4);\n      temp2 = calculate_float_08000ad8(float_val4,temp2);\n      float_val4 = reverse_bits_08000cec(shift_value + -0x80000000,reverse_val2);\n      float_val6 = reverse_bits_08000cec(temp6,reverse_val3);\n      float_val4 = calculate_float_08000adc(float_val4,float_val6);\n      float_val6 = reverse_bits_08000cec(reverse_val4,float_val8);\n      float_val4 = calculate_float_08000ad8(float_val4,float_val6);\n      float_val6 = reverse_bits_08000cec(reverse_val9,float_val_index + -0x80000000);\n      float_val6 = calculate_float_08000adc(float_val6,float_val9);\n      float_val6 = reverse_bits_08000cec(float_val6,float_val3);\n      float_val4 = calculate_float_08000adc(float_val4,float_val6);\n      float_val6 = reverse_bits_08000cec(float_val10,temp2);\n      float_val4 = calculate_float_08000adc(float_val4,float_val6);\n      float_val5 = calculate_float_08000adc(float_val5);\n      float_val5 = calculate_float_08000ad8(0x3f800000,float_val5);\n      float_val6 = calculate_float_08000adc(float_val7);\n      float_val5 = calculate_float_08000ad8(float_val5,float_val6);\n      temp1 = reverse_bits_08000cec(input_param_3,temp1);\n      temp1 = calculate_float_08000ad8(float_val5,temp1);\n      float_val5 = reverse_bits_08000cec(reverse_val9,float_val2);\n      float_val2 = reverse_bits_08000cec(reverse_val7,float_val2);\n      float_val6 = reverse_bits_08000cec(float_val1,reverse_val2);\n      float_val7 = reverse_bits_08000cec(is_successful,reverse_val3);\n      float_val6 = calculate_float_08000adc(float_val6,float_val7);\n      float_val7 = reverse_bits_08000cec(reverse_val10,0x40800000);\n      float_val7 = reverse_bits_08000cec(float_val7,temp1);\n      float_val6 = calculate_float_08000ad8(float_val6,float_val7);\n      float_val7 = reverse_bits_08000cec(float_val8,float_val5);\n      float_val6 = calculate_float_08000adc(float_val6,float_val7);\n      float_val7 = calculate_float_08000adc(float_val10,float_val2);\n      float_val7 = reverse_bits_08000cec(float_val7,float_val3);\n      float_val6 = calculate_float_08000adc(float_val6,float_val7);\n      float_val7 = reverse_bits_08000cec(reverse_val9,float_val_index);\n      float_val10 = reverse_bits_08000cec(reverse_val10,reverse_val1);\n      float_val7 = calculate_float_08000ad8(float_val7,float_val10);\n      float_val7 = reverse_bits_08000cec(float_val7,temp2);\n      float_val6 = calculate_float_08000adc(float_val6,float_val7);\n      reverse_val = calculate_float_08000adc(float_val_index,float_val_index);\n      float_val7 = reverse_bits_08000cec(reverse_val10,float_val_index);\n      float_val10 = reverse_bits_08000cec(is_successful + -0x80000000,reverse_val2);\n      float_val1 = reverse_bits_08000cec(float_val1,reverse_val3);\n      float_val1 = calculate_float_08000adc(float_val10,float_val1);\n      float_val10 = reverse_bits_08000cec(reverse_val8,0x40800000);\n      temp1 = reverse_bits_08000cec(float_val10,temp1);\n      temp1 = calculate_float_08000ad8(float_val1,temp1);\n      float_val1 = reverse_bits_08000cec(reverse_val8,reverse_val + -0x80000000);\n      float_val1 = calculate_float_08000ad8(float_val1,float_val2);\n      float_val1 = reverse_bits_08000cec(float_val1,float_val8);\n      temp1 = calculate_float_08000adc(temp1,float_val1);\n      float_val1 = calculate_float_08000adc(float_val5,float_val7);\n      float_val1 = reverse_bits_08000cec(float_val1,float_val3);\n      temp1 = calculate_float_08000adc(temp1,float_val1);\n      float_val1 = reverse_bits_08000cec(reverse_val7,float_val_index);\n      float_val2 = reverse_bits_08000cec(reverse_val8,reverse_val1);\n      float_val1 = calculate_float_08000ad8(float_val1,float_val2);\n      float_val1 = reverse_bits_08000cec(float_val1,temp2);\n      float_val1 = calculate_float_08000adc(temp1,float_val1);\n      temp1 = reverse_bits_08000cec(temp6,reverse_val2);\n      temp6 = reverse_bits_08000cec(shift_value,reverse_val3);\n      temp1 = calculate_float_08000adc(temp1,temp6);\n      temp6 = reverse_bits_08000cec(reverse_val9,reverse_val + -0x80000000);\n      temp6 = calculate_float_08000adc(temp6,float_val9);\n      temp6 = reverse_bits_08000cec(temp6,float_val8);\n      temp1 = calculate_float_08000adc(temp1,temp6);\n      temp6 = reverse_bits_08000cec(reverse_val7,float_val_index + -0x80000000);\n      temp6 = calculate_float_08000adc(temp6,reverse_val4);\n      temp6 = reverse_bits_08000cec(temp6,float_val3);\n      temp1 = calculate_float_08000adc(temp1,temp6);\n      temp2 = reverse_bits_08000cec(temp2,float_val7);\n      temp6 = calculate_float_08000adc(temp1,temp2);\n      temp1 = reverse_bits_08000cec(float_val4);\n      temp2 = reverse_bits_08000cec(float_val6);\n      temp1 = calculate_float_08000adc(temp1,temp2);\n      temp2 = reverse_bits_08000cec(float_val1,float_val1);\n      temp1 = calculate_float_08000adc(temp1,temp2);\n      temp2 = reverse_bits_08000cec(temp6,temp6);\n      calculate_float_08000adc(temp1,temp2);\n      mask_and_shift_08000428();\n      process_input_08005bc8();\n      temp1 = calculate_float_value_08000a30();\n      float_val2 = floating_point_conversion_08000e54(0x3f800000,temp1);\n      temp1 = DAT_2000035c;\n      temp2 = reverse_bits_08000cec(reverse_val10 + -0x80000000,temp3);\n      float_val3 = reverse_bits_08000cec(reverse_val8,temp4);\n      temp2 = calculate_float_08000ad8(temp2,float_val3);\n      float_val3 = reverse_bits_08000cec(reverse_val9,temp5);\n      temp2 = calculate_float_08000ad8(temp2,float_val3);\n      float_val3 = reverse_bits_08000cec(temp2,0x3f000000);\n      float_val4 = reverse_bits_08000cec(float_val4,float_val2);\n      temp2 = DAT_20000360;\n      float_val4 = reverse_bits_08000cec(float_val4,temp1);\n      float_val3 = calculate_float_08000ad8(float_val3,float_val4);\n      temp2 = reverse_bits_08000cec(float_val3,temp2);\n      float_val3 = calculate_float_08000adc(temp2,reverse_val7);\n      float_val4 = reverse_bits_08000cec(reverse_val7,temp3);\n      float_val5 = reverse_bits_08000cec(reverse_val8,temp5);\n      temp2 = DAT_20000360;\n      float_val4 = calculate_float_08000adc(float_val4,float_val5);\n      float_val5 = reverse_bits_08000cec(reverse_val9,temp4);\n      float_val4 = calculate_float_08000ad8(float_val4,float_val5);\n      float_val4 = reverse_bits_08000cec(float_val4,0x3f000000);\n      float_val5 = reverse_bits_08000cec(float_val6,float_val2);\n      float_val5 = reverse_bits_08000cec(float_val5,temp1);\n      float_val4 = calculate_float_08000ad8(float_val4,float_val5);\n      temp2 = reverse_bits_08000cec(float_val4,temp2);\n      float_val4 = calculate_float_08000adc(temp2,reverse_val10);\n      temp2 = DAT_20000360;\n      float_val5 = reverse_bits_08000cec(reverse_val7,temp4);\n      float_val6 = reverse_bits_08000cec(reverse_val10,temp5);\n      float_val5 = calculate_float_08000ad8(float_val5,float_val6);\n      float_val6 = reverse_bits_08000cec(reverse_val9,temp3);\n      float_val5 = calculate_float_08000adc(float_val5,float_val6);\n      float_val5 = reverse_bits_08000cec(float_val5,0x3f000000);\n      float_val1 = reverse_bits_08000cec(float_val1,float_val2);\n      float_val1 = reverse_bits_08000cec(float_val1,temp1);\n      float_val1 = calculate_float_08000ad8(float_val5,float_val1);\n      temp2 = reverse_bits_08000cec(float_val1,temp2);\n      temp2 = calculate_float_08000adc(temp2,reverse_val8);\n      reverse_val7 = reverse_bits_08000cec(reverse_val7,temp5);\n      temp4 = reverse_bits_08000cec(reverse_val10,temp4);\n      reverse_val7 = calculate_float_08000adc(reverse_val7,temp4);\n      reverse_val8 = reverse_bits_08000cec(reverse_val8,temp3);\n      reverse_val7 = calculate_float_08000ad8(reverse_val7,reverse_val8);\n      reverse_val8 = reverse_bits_08000cec(reverse_val7,0x3f000000);\n      reverse_val7 = reverse_bits_08000cec(temp6,float_val2);\n      temp1 = reverse_bits_08000cec(reverse_val7,temp1);\n      reverse_val7 = DAT_20000360;\n      reverse_val8 = calculate_float_08000ad8(reverse_val8,temp1);\n      reverse_val7 = reverse_bits_08000cec(reverse_val8,reverse_val7);\n      reverse_val7 = calculate_float_08000adc(reverse_val7,reverse_val9);\n      reverse_val8 = reverse_bits_08000cec(float_val3,float_val3);\n      reverse_val9 = reverse_bits_08000cec(float_val4,float_val4);\n      reverse_val8 = calculate_float_08000adc(reverse_val8,reverse_val9);\n      reverse_val9 = reverse_bits_08000cec(temp2,temp2);\n      reverse_val8 = calculate_float_08000adc(reverse_val8,reverse_val9);\n      reverse_val9 = reverse_bits_08000cec(reverse_val7,reverse_val7);\n      calculate_float_08000adc(reverse_val8,reverse_val9);\n      mask_and_shift_08000428();\n      process_input_08005bc8();\n      reverse_val8 = calculate_float_value_08000a30();\n      reverse_val8 = floating_point_conversion_08000e54(0x3f800000,reverse_val8);\n      reverse_val9 = reverse_bits_08000cec(float_val3,reverse_val8);\n      DAT_2000003c = reverse_val9;\n      reverse_val10 = reverse_bits_08000cec(float_val4,reverse_val8);\n      DAT_20000040 = reverse_val10;\n      temp1 = reverse_bits_08000cec(temp2,reverse_val8);\n      DAT_20000044 = temp1;\n      DAT_20000048 = reverse_bits_08000cec(reverse_val7,reverse_val8);\n      reverse_val7 = reverse_bits_08000cec(reverse_val10,DAT_20000048);\n      reverse_val8 = reverse_bits_08000cec(reverse_val9,temp1);\n      reverse_val7 = calculate_float_08000ad8(reverse_val7,reverse_val8);\n      calculate_float_08000adc(reverse_val7,reverse_val7);\n      mask_and_shift_08000428();\n      shifted_value = process_input_08005854();\n      shifted_value = calculate_shifted_value_080004d0((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20),0,0x40668000);\n      calculate_double_08000724((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20),0x54442d18,0x400921fb);\n      reverse_val7 = calculate_float_value_08000a30();\n      *output_params = reverse_val7;\n      reverse_val10 = DAT_20000040;\n      reverse_val7 = DAT_2000003c;\n      reverse_val8 = reverse_bits_08000cec(DAT_2000003c,DAT_2000003c);\n      reverse_val9 = reverse_bits_08000cec(reverse_val10,reverse_val10);\n      reverse_val9 = calculate_float_08000ad8(reverse_val8,reverse_val9);\n      reverse_val8 = DAT_20000044;\n      temp1 = reverse_bits_08000cec(DAT_20000044,DAT_20000044);\n      temp1 = calculate_float_08000ad8(reverse_val9,temp1);\n      reverse_val9 = DAT_20000048;\n      temp2 = reverse_bits_08000cec(DAT_20000048,DAT_20000048);\n      calculate_float_08000adc(temp1,temp2);\n      shifted_value = mask_and_shift_08000428();\n      reverse_val7 = reverse_bits_08000cec(reverse_val7,reverse_val10);\n      reverse_val8 = reverse_bits_08000cec(reverse_val8,reverse_val9);\n      reverse_val7 = calculate_float_08000adc(reverse_val7,reverse_val8);\n      calculate_float_08000adc(reverse_val7,reverse_val7);\n      calculation_value = mask_and_shift_08000428();\n      shifted_value = perform_calculation_thunk_08006070((int)calculation_value,(int)((ulonglong)calculation_value >> 0x20),(int)shifted_value,\n                                  (int)((ulonglong)shifted_value >> 0x20));\n      shifted_value = calculate_shifted_value_080004d0((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20),0,0x40668000);\n      calculate_double_08000724((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20),0x54442d18,0x400921fb);\n      reverse_val7 = calculate_float_value_08000a30();\n      output_params[1] = reverse_val7;\n      reverse_val10 = DAT_20000040;\n      reverse_val7 = DAT_2000003c;\n      reverse_val8 = reverse_bits_08000cec(DAT_2000003c,DAT_2000003c);\n      reverse_val9 = reverse_bits_08000cec(reverse_val10,reverse_val10);\n      reverse_val9 = calculate_float_08000adc(reverse_val8,reverse_val9);\n      reverse_val8 = DAT_20000044;\n      temp1 = reverse_bits_08000cec(DAT_20000044,DAT_20000044);\n      temp1 = calculate_float_08000ad8(reverse_val9,temp1);\n      reverse_val9 = DAT_20000048;\n      temp2 = reverse_bits_08000cec(DAT_20000048,DAT_20000048);\n      calculate_float_08000ad8(temp1,temp2);\n      shifted_value = mask_and_shift_08000428();\n      reverse_val8 = reverse_bits_08000cec(reverse_val10,reverse_val8);\n      reverse_val7 = reverse_bits_08000cec(reverse_val7,reverse_val9);\n      reverse_val7 = calculate_float_08000adc(reverse_val8,reverse_val7);\n      calculate_float_08000adc(reverse_val7,reverse_val7);\n      calculation_value = mask_and_shift_08000428();\n      shifted_value = perform_calculation_thunk_08006070((int)calculation_value,(int)((ulonglong)calculation_value >> 0x20),(int)shifted_value,\n                                  (int)((ulonglong)shifted_value >> 0x20));\n      shifted_value = calculate_shifted_value_080004d0((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20),0,0x40668000);\n      calculate_double_08000724((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20),0x54442d18,0x400921fb);\n      reverse_val7 = calculate_float_value_08000a30();\n      output_params[2] = reverse_val7;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003330": "process_and_calculate_values_08003330",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "param_5": "input_param_5",
                "param_6": "input_param_6",
                "param_7": "input_param_7",
                "param_8": "input_param_8",
                "param_9": "input_param_9",
                "param_10": "output_params",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "is_successful",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "iVar8": "shift_value",
                "uVar9": "float_val1",
                "uVar10": "float_val2",
                "uVar11": "float_val3",
                "uVar12": "float_val4",
                "uVar13": "float_val5",
                "uVar14": "float_val6",
                "uVar15": "float_val7",
                "uVar16": "float_val8",
                "uVar17": "float_val9",
                "uVar18": "float_val10",
                "iVar19": "reverse_val",
                "uVar20": "reverse_val1",
                "uVar21": "reverse_val2",
                "uVar22": "reverse_val3",
                "uVar23": "reverse_val4",
                "uVar24": "reverse_val5",
                "uVar25": "reverse_val6",
                "iVar26": "float_val_index",
                "uVar27": "reverse_val7",
                "uVar28": "reverse_val8",
                "uVar29": "reverse_val9",
                "iVar30": "reverse_val10",
                "uVar31": "shifted_value",
                "uVar32": "calculation_value"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000428",
                "FUN_08000724",
                "thunk_FUN_08006070",
                "FUN_08000adc",
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08000e54",
                "FUN_08000cec",
                "FUN_08000ad8",
                "FUN_08001014",
                "FUN_08000a30",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eb0": {
            "entrypoint": "0x08003eb0",
            "current_name": "expand_bits_08003eb0",
            "code": "\nlonglong expandBits_08003eb0(uint input)\n\n{\n  if (DAT_20000280 == 0) {\n    executeInterrupt(0x3f);\n    return combineValues(input,1);\n  }\n  return (ulonglong)input << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08003eb0": "expand_bits_08003eb0",
                "param_1": "input",
                "software_interrupt": "executeInterrupt",
                "CONCAT44": "combineValues"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ec8": {
            "entrypoint": "0x08003ec8",
            "current_name": "increment_and_store_value_08003ec8",
            "code": "\nundefined4 incrementAndStoreValue_08003ec8(int baseAddress,undefined value)\n\n{\n  *(short *)(baseAddress + 0x804) = *(short *)(baseAddress + 0x804) + 1;\n  *(undefined *)(baseAddress + (uint)*(ushort *)(baseAddress + 0x802)) = value;\n  *(ushort *)(baseAddress + 0x802) = *(short *)(baseAddress + 0x802) + 1U & 0x7ff;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003ec8": "increment_and_store_value_08003ec8",
                "param_1": "baseAddress",
                "param_2": "value"
            },
            "calling": [
                "FUN_08004c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f3c": {
            "entrypoint": "0x08003f3c",
            "current_name": "update_parameters_08003f3c",
            "code": "\nvoid update_parameters_08003f3c(int value1,int value2,int value3)\n\n{\n  update_parameter_08001424(0x40011000,0x8000,value1 == 0);\n  update_parameter_08001424(0x40011000,0x4000,value2 == 0);\n  update_parameter_08001424(0x40011000,0x2000,value3 == 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f3c": "update_parameters_08003f3c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004028"
            ],
            "called": [
                "FUN_08001424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fc4": {
            "entrypoint": "0x08003fc4",
            "current_name": "set_param1_08003fc4",
            "code": "\nvoid setParam1_08003fc4(undefined4 newValue)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x40) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fc4": "set_param1_08003fc4",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd0": {
            "entrypoint": "0x08003fd0",
            "current_name": "set_param_08003fd0",
            "code": "\nvoid setParam_08003fd0(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fd0": "set_param_08003fd0",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fdc": {
            "entrypoint": "0x08003fdc",
            "current_name": "set_param_value_08003fdc",
            "code": "\nvoid setParamValue_08003fdc(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200015f8 + 0x38) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fdc": "set_param_value_08003fdc",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fe8": {
            "entrypoint": "0x08003fe8",
            "current_name": "set_param_value_08003fe8",
            "code": "\nvoid setParamValue_08003fe8(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_20001540 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fe8": "set_param_value_08003fe8",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff4": {
            "entrypoint": "0x08003ff4",
            "current_name": "update_and_set_flags_08003ff4",
            "code": "\nvoid updateAndSetFlags_08003ff4(void)\n\n{\n  update_and_set_flag_08002538(&DAT_200015f8,4);\n  update_and_set_flag_08002538(&DAT_20001540,8);\n  update_and_set_flag_08002538(&DAT_200014c8,8);\n  update_and_set_flag_08002538(&DAT_200014c8,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff4": "update_and_set_flags_08003ff4"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004028": {
            "entrypoint": "0x08004028",
            "current_name": "initialize_and_configure_system_08004028",
            "code": "\nvoid initialize_and_configure_system_08004028(void)\n\n{\n  int iteration_count;\n  \n  initialize_and_configure_system_08004028_helper();\n  update_and_set_flags();\n  iteration_count = 3;\n  do {\n    update_parameters(1,0);\n    thunk_FUNC_08001168(100);\n    update_parameters(0,1);\n    thunk_FUNC_08001168(100);\n    update_parameters(0,0,1);\n    thunk_FUNC_08001168(100);\n    iteration_count = iteration_count + -1;\n  } while (iteration_count != 0);\n  update_parameters(1,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004028": "initialize_and_configure_system_08004028",
                "initialize_and_configure_system_0800458c": "initialize_and_configure_system_helper",
                "update_and_set_flags_08003ff4": "update_and_set_flags",
                "update_parameters_08003f3c": "update_parameters",
                "iVar1": "iteration_count"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003f3c",
                "FUN_08003ff4",
                "thunk_FUN_08001168",
                "FUN_0800458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800403c": {
            "entrypoint": "0x0800403c",
            "current_name": "process_data_and_update_0800403c",
            "code": "\nvoid process_data_and_update_0800403c(undefined4 data_param,undefined4 param1,undefined flag,int thunk_param)\n\n{\n  int result;\n  undefined local_data [8];\n  \n  local_data[0] = flag;\n  result = process_data_08001828(&DAT_20001504,data_param,param1,1,local_data,1,200);\n  if (result != 0) {\n    process_and_update_parameters_08004490(\"../Src/i2c.c\",0x1b);\n  }\n  if (thunk_param != 0) {\n    thunk_FUNC_08001168(0x32);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800403c": "process_data_and_update_0800403c",
                "param_1": "data_param",
                "param_2": "param1",
                "param_3": "flag",
                "param_4": "thunk_param",
                "iVar1": "result",
                "local_14": "local_data"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_08003298",
                "FUN_08002ad0"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001828",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800407c": {
            "entrypoint": "0x0800407c",
            "current_name": "process_parameters_0800407c",
            "code": "\nundefined process_parameters_0800407c(undefined4 input_parameter1,undefined4 input_parameter2,undefined4 output_parameter1,undefined4 output_parameter2)\n\n{\n  int iVar1;\n  undefined result [8];\n  \n  result[0] = 0;\n  iVar1 = perform_operation_08001938(&DAT_20001504,input_parameter1,input_parameter2,1,result,1,200);\n  if (iVar1 != 0) {\n    process_and_update_parameters_08004490(output_parameter1,output_parameter2);\n  }\n  return result[0];\n}\n\n",
            "renaming": {
                "FUN_0800407c": "process_parameters_0800407c",
                "param_1": "input_parameter1",
                "param_2": "input_parameter2",
                "param_3": "output_parameter1",
                "param_4": "output_parameter2",
                "local_14": "result"
            },
            "calling": [
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_080040e8",
                "FUN_08002ad0"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b8": {
            "entrypoint": "0x080040b8",
            "current_name": "perform_and_process_operation_080040b8",
            "code": "\nvoid performAndProcessOperation_080040b8(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 updateParam1,undefined4 updateParam2)\n\n{\n  int result;\n  \n  result = performOperation(&DAT_20001504,input1,input2,1,input3,input4,200,input4);\n  if (result != 0) {\n    processAndUpdateParams(updateParam1,updateParam2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040b8": "perform_and_process_operation_080040b8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "updateParam1",
                "param_6": "updateParam2",
                "iVar1": "result",
                "perform_operation_08001938": "performOperation",
                "process_and_update_parameters_08004490": "processAndUpdateParams"
            },
            "calling": [
                "FUN_08003034"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "copy_parameters_to_buffer_080040e8",
            "code": "\nvoid copyParametersToBuffer_080040e8(undefined4 bufferAddress,int offset,int bufferSize,int numParameters)\n\n{\n  undefined parameterValue;\n  int i;\n  undefined *bufferPointer;\n  int lineNumber;\n  \n  bufferPointer = (undefined *)(bufferSize + -1);\n  lineNumber = numParameters;\n  for (i = 0; i < numParameters; i = i + 1) {\n    parameterValue = process_parameters_0800407c(bufferAddress,offset + i & 0xffff,\"../Src/i2c.c\",0x4c,lineNumber);\n    bufferPointer = bufferPointer + 1;\n    *bufferPointer = parameterValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "copy_parameters_to_buffer_080040e8",
                "param_1": "bufferAddress",
                "param_2": "offset",
                "param_3": "bufferSize",
                "param_4": "numParameters",
                "uVar1": "parameterValue",
                "iVar2": "i",
                "puVar3": "bufferPointer",
                "iVar4": "lineNumber"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08002cb0",
                "FUN_08003298"
            ],
            "called": [
                "FUN_0800407c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800411c": {
            "entrypoint": "0x0800411c",
            "current_name": "process_sensor_data_0800411c",
            "code": "\nvoid process_sensor_data_0800411c(void)\n\n{\n  undefined4 *ptr;\n  longlong sensor_value;\n  uint index;\n  uint parameter1;\n  uint parameter2;\n  undefined4 value1;\n  undefined4 value2;\n  int data;\n  uint calculation1;\n  uint calculation2;\n  uint calculation3;\n  uint calculation4;\n  undefined4 *ptr1;\n  undefined4 constant;\n  int calculation_result1;\n  int calculation_result2;\n  bool comparison_result;\n  undefined8 result;\n  \n  data = thunk_get_data_0800115c();\n  if (1 < (uint)(data - DAT_2000028c)) {\n    DAT_2000028c = thunk_get_data_0800115c();\n    process_sensor_data_0800411c_08002f28();\n  }\n  data = thunk_get_data_0800115c();\n  if (2 < (uint)(data - DAT_20000294)) {\n    DAT_20000294 = thunk_get_data_0800115c();\n    initialize_and_calculate_parameters_08004a84();\n  }\n  data = thunk_get_data_0800115c();\n  if (3 < (uint)(data - DAT_20000290)) {\n    DAT_20000290 = thunk_get_data_0800115c();\n    initialize_data_processing_08004348();\n    parse_and_process_data_08004384();\n    process_and_parse_data_080043f0();\n    process_and_parse_data_08004410();\n    parse_and_process_data_08004434();\n    copy_and_process_data_080043bc();\n    copy_and_process_data_08004458();\n  }\n  if ((DAT_20000275 != '\\0') && (DAT_20000274 != '\\0')) {\n    calculation_result2 = DAT_20000270 + (uint)DAT_20000266 * -0x100;\n    calculation1 = (uint)((longlong)(int)(uint)DAT_20000268 * (longlong)calculation_result2) >> 0x17 |\n            (int)((ulonglong)((longlong)(int)(uint)DAT_20000268 * (longlong)calculation_result2) >> 0x20) << 9;\n    calculation2 = (uint)((longlong)(int)(uint)DAT_20000264 * (longlong)calculation_result2 >> 7);\n    calculation3 = calculation2 + (uint)DAT_20000260 * 0x10000;\n    parameter1 = (uint)((ulonglong)((longlong)(int)(uint)DAT_20000262 * (longlong)calculation_result2) >> 8);\n    data = calculation1 + 2000;\n    parameter2 = parameter1 + (uint)DAT_2000025e * 0x8000;\n    comparison_result = (int)calculation1 < 0;\n    if (1999 < data) {\n      calculation1 = 0;\n    }\n    index = calculation1;\n    if (comparison_result != SBORROW4(data,2000)) {\n      calculation_result1 = calculation1 * calculation1 * 5;\n      calculation1 = calculation_result1 >> 2;\n      index = calculation_result1 >> 1;\n    }\n    calculation4 = calculation3 - index;\n    sensor_value = (ulonglong)(parameter2 - calculation1) * (ulonglong)DAT_2000026c;\n    calculation_result1 = DAT_2000026c *\n             ((((int)((longlong)(int)(uint)DAT_20000262 * (longlong)calculation_result2 >> 0x28) +\n               (uint)CARRY4(parameter1,(uint)DAT_2000025e * 0x8000)) - ((int)calculation1 >> 0x1f)) -\n             (uint)(parameter2 < calculation1)) + (int)((ulonglong)sensor_value >> 0x20);\n    parameter1 = (uint)sensor_value >> 0x15 | calculation_result1 * 0x800;\n    value1 = calculate_signed_magnitude_08000c44(parameter1 - calculation4 >> 0xf |\n                         (((calculation_result1 >> 0x15) -\n                          ((((int)((longlong)(int)(uint)DAT_20000264 * (longlong)calculation_result2 >> 0x27) +\n                            (uint)CARRY4(calculation2,(uint)DAT_20000260 * 0x10000)) -\n                           ((int)index >> 0x1f)) - (uint)(calculation3 < index))) - (uint)(parameter1 < calculation4)\n                         ) * 0x20000);\n    value1 = floating_point_conversion_08000e54(value1,0x42c80000);\n    DAT_20000354 = value1;\n    value2 = calculate_signed_magnitude_08000c44(data);\n    DAT_20000358 = floating_point_conversion_08000e54(value2,0x42c80000);\n    floating_point_conversion_08000e54(value1,0x447d5000);\n    result = mask_and_shift_08000428();\n    result = calculate_result_08005900((int)result,(int)((ulonglong)result >> 0x20),0x60000000,0x3fc85b95);\n    result = reverse_compute_08000168(0,0x3ff00000,(int)result,(int)((ulonglong)result >> 0x20));\n    calculate_shifted_value_080004d0((int)result,(int)((ulonglong)result >> 0x20),0,0x40e5a540);\n    value1 = calculate_float_value_08000a30();\n    value2 = 0;\n    ptr1 = &DAT_20000300;\n    DAT_20000350 = value1;\n    do {\n      ptr = ptr1 + 1;\n      *ptr1 = *ptr;\n      value2 = calculate_float_08000adc(value2);\n      ptr1 = ptr;\n    } while (ptr != &DAT_2000034c);\n    DAT_2000034c = value1;\n    value1 = calculate_float_08000adc(value2,value1);\n    DAT_200002fc = floating_point_conversion_08000e54(value1,0x41a00000);\n    data = calculate_signed_shift_08001078();\n    DAT_200014ab = data * 100;\n    DAT_20000275 = '\\0';\n    DAT_20000274 = '\\0';\n    process_data_and_update_0800403c(0xee,DAT_20000038 + 0x50,1);\n    DAT_2000027c = thunk_get_data_0800115c();\n  }\n  data = thunk_get_data_0800115c();\n  if (((10 < (uint)(data - DAT_2000027c)) && (DAT_20000275 == '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_20000270 = perform_and_process_operation_08003034();\n    DAT_20000275 = '\\x01';\n    process_data_and_update_0800403c(0xee,DAT_20000038 + 0x40,1,0,constant);\n    DAT_20000278 = thunk_get_data_0800115c();\n  }\n  data = thunk_get_data_0800115c();\n  if (((10 < (uint)(data - DAT_20000278)) && (DAT_20000275 != '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_2000026c = perform_and_process_operation_08003034();\n    DAT_20000274 = '\\x01';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800411c": "process_sensor_data_0800411c",
                "puVar1": "ptr",
                "lVar2": "sensor_value",
                "uVar3": "index",
                "uVar4": "parameter1",
                "uVar5": "parameter2",
                "uVar6": "value1",
                "uVar7": "value2",
                "iVar8": "data",
                "uVar9": "calculation1",
                "uVar10": "calculation2",
                "uVar11": "calculation3",
                "uVar12": "calculation4",
                "puVar13": "ptr1",
                "unaff_r4": "constant",
                "iVar14": "calculation_result1",
                "iVar15": "calculation_result2",
                "bVar16": "comparison_result",
                "uVar17": "result"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08000428",
                "FUN_08001078",
                "FUN_08004348",
                "FUN_08000c44",
                "FUN_080043f0",
                "FUN_08000168",
                "thunk_FUN_0800115c",
                "FUN_080043bc",
                "FUN_08004434",
                "FUN_08005900",
                "FUN_08002f28",
                "FUN_08000adc",
                "FUN_08004a84",
                "FUN_08003034",
                "FUN_08004410",
                "FUN_08004384",
                "FUN_08000e54",
                "FUN_0800403c",
                "FUN_08004458",
                "FUN_08000a30",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004194": {
            "entrypoint": "0x08004194",
            "current_name": "initialize_system_08004194",
            "code": "\nvoid initialize_system_08004194(void)\n\n{\n  initialize_and_configure_system_08004028();\n  initialize_and_check_flags_08004c70();\n  initialize_mpu9250_08002ea0();\n  initialize_sensor_08003298();\n  DAT_200000f4 = 1;\n  DAT_20000150 = 1;\n  DAT_200001ac = 0xffffffff;\n  DAT_20000098 = 1;\n  DAT_200000c8 = 0x44bb8000;\n  DAT_20000124 = 0x44b54000;\n  DAT_20000180 = 0x44fa0000;\n  DAT_2000006c = 0;\n  DAT_200000ac = 0x408ccccd;\n  DAT_200000b0 = 0x3ca3d70a;\n  DAT_200000b4 = 0x438c0000;\n  DAT_200000b8 = 0x40900000;\n  DAT_200000bc = 0x3ca3d70a;\n  DAT_200000c0 = 0x43b40000;\n  DAT_20000108 = 0x40733333;\n  DAT_2000010c = 0x3ca3d70a;\n  DAT_20000110 = 0x43820000;\n  DAT_20000114 = 0x40733333;\n  DAT_20000118 = 0x3ca3d70a;\n  DAT_2000011c = 0x43a00000;\n  DAT_20000164 = 0x40400000;\n  DAT_20000168 = 0x3c23d70a;\n  DAT_2000016c = 0x438c0000;\n  DAT_20000170 = 0;\n  DAT_20000174 = 0;\n  DAT_20000178 = 0;\n  DAT_20000050 = 0x41200000;\n  DAT_20000054 = 0;\n  DAT_20000058 = 0;\n  DAT_2000005c = 0;\n  DAT_20000060 = 0;\n  DAT_20000064 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004194": "initialize_system_08004194"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08004c70",
                "FUN_08002ea0",
                "FUN_08003298",
                "FUN_08004028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ae": {
            "entrypoint": "0x080041ae",
            "current_name": "run_system_processing_080041ae",
            "code": "\nvoid run_system_processing_080041ae(void)\n\n{\n  expand_bits(0);\n  initialize_system();\n  do {\n    increment_counter();\n    process_sensor_data();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080041ae": "run_system_processing_080041ae",
                "expand_bits_08003eb0": "expand_bits",
                "initialize_system_08004194": "initialize_system",
                "increment_counter_0800114c": "increment_counter",
                "process_sensor_data_0800411c": "process_sensor_data"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800114c",
                "FUN_08003eb0",
                "FUN_0800411c",
                "FUN_08004194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041c4": {
            "entrypoint": "0x080041c4",
            "current_name": "initialize_parameters_080041c4",
            "code": "\nvoid initializeParameters_080041c4(undefined4 parameter1,undefined4 parameter2,undefined4 parameter3,undefined4 parameter4)\n\n{\n  undefined4 extraOutput;\n  \n  setParameter1(0);\n  setParameter(0);\n  setParameterValue(0);\n  setParameterValueWithExtraOutput(0,extraOutput,parameter3,parameter4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041c4": "initialize_parameters_080041c4",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "param_3": "parameter3",
                "param_4": "parameter4",
                "extraout_r1": "extraOutput",
                "set_param1_08003fc4": "setParameter1",
                "set_param_08003fd0": "setParameter",
                "set_param_value_08003fdc": "setParameterValue",
                "set_param_value_08003fe8": "setParameterValueWithExtraOutput"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08003fe8",
                "FUN_08003fd0",
                "FUN_08003fdc",
                "FUN_08003fc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800426c": {
            "entrypoint": "0x0800426c",
            "current_name": "calculate_and_set_params_0800426c",
            "code": "\n\n\nvoid calculate_and_set_params_0800426c(undefined4 input_param1,undefined4 input_param2,undefined4 input_param3,undefined4 input_param4)\n\n{\n  undefined4 float1;\n  undefined4 float2;\n  undefined4 float3;\n  uint shift1;\n  uint shift2;\n  uint shift3;\n  uint shift4;\n  \n  float1 = calculate_float_08000ad8();\n  float2 = calculate_float_08000adc(input_param1,input_param2);\n  float3 = calculate_float_08000ad8(float1,input_param3);\n  float3 = calculate_float_08000adc(float3,input_param4);\n  calculate_float_08000ad8(float3,0x447a0000);\n  shift1 = calculate_signed_shift_08001078();\n  float3 = calculate_float_08000ad8(float2,input_param3);\n  float3 = calculate_float_08000ad8(float3,input_param4);\n  calculate_float_08000ad8(float3,0x447a0000);\n  shift2 = calculate_signed_shift_08001078();\n  float1 = calculate_float_08000adc(float1,input_param3);\n  float1 = calculate_float_08000ad8(float1,input_param4);\n  calculate_float_08000ad8(float1,0x447a0000);\n  shift3 = calculate_signed_shift_08001078();\n  float1 = calculate_float_08000adc(input_param3,float2);\n  float1 = calculate_float_08000adc(float1,input_param4);\n  calculate_float_08000ad8(float1,0x447a0000);\n  shift4 = calculate_signed_shift_08001078();\n  if (999 < (int)shift4) {\n    shift4 = 1000;\n  }\n  if (999 < (int)shift3) {\n    shift3 = 1000;\n  }\n  if (999 < (int)shift2) {\n    shift2 = 1000;\n  }\n  if (999 < (int)shift1) {\n    shift1 = 1000;\n  }\n  DAT_200002a0 = shift2 & ~((int)shift2 >> 0x1f);\n  DAT_200002a4 = shift1 & ~((int)shift1 >> 0x1f);\n  DAT_2000029c = shift3 & ~((int)shift3 >> 0x1f);\n  DAT_20000298 = shift4 & ~((int)shift4 >> 0x1f);\n  set_param1_08003fc4();\n  set_param_08003fd0(DAT_2000029c);\n  set_param_value_08003fdc(DAT_200002a0);\n  set_param_value_08003fe8(DAT_200002a4);\n  _DAT_200013dd = (short)DAT_20000298 + 1000;\n  DAT_200013df = (short)DAT_2000029c + 1000;\n  _DAT_200013e1 = (short)DAT_200002a0 + 1000;\n  DAT_200013e3 = (short)DAT_200002a4 + 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800426c": "calculate_and_set_params_0800426c",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "uVar1": "float1",
                "uVar2": "float2",
                "uVar3": "float3",
                "uVar4": "shift1",
                "uVar5": "shift2",
                "uVar6": "shift3",
                "uVar7": "shift4"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08003fe8",
                "FUN_08001078",
                "FUN_08003fdc",
                "FUN_08003fd0",
                "FUN_08003fc4",
                "FUN_08000ad8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004300": {
            "entrypoint": "0x08004300",
            "current_name": "process_and_parse_data_08004300",
            "code": "\nvoid processAndParseData_08004300(uint input1,byte *input2,uint inputLength)\n\n{\n  uint result;\n  byte *currentByte;\n  \n  process_null_terminated_strings_08004c8c(&DAT_0800732e);\n  parse_data_08004c18(inputLength & 0xff);\n  result = inputLength & 0xff ^ input1;\n  parse_data_08004c18(input1);\n  for (currentByte = input2; (int)currentByte - (int)input2 < (int)inputLength; currentByte = currentByte + 1) {\n    parse_data_08004c18(*currentByte);\n    result = result ^ *currentByte;\n  }\n  parse_data_08004c18(result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004300": "process_and_parse_data_08004300",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "inputLength",
                "uVar1": "result",
                "pbVar2": "currentByte"
            },
            "calling": [
                "FUN_08004348",
                "FUN_08004384",
                "FUN_08004410",
                "FUN_080043f0",
                "FUN_080043bc",
                "FUN_08004434",
                "FUN_08004458"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004348": {
            "entrypoint": "0x08004348",
            "current_name": "initialize_data_processing_08004348",
            "code": "\n\n\nvoid initializeDataProcessing_08004348(undefined4 input1,uint input2,undefined4 input3)\n\n{\n  undefined4 constant1;\n  uint maskedInput2;\n  undefined4 input3Copy;\n  \n  _DAT_20001423 = 0x40003e9;\n  _DAT_20001427 = 0;\n  DAT_20001429 = 0;\n  constant1 = 0x40003e9;\n  maskedInput2 = input2 & 0xff000000;\n  input3Copy = input3;\n  process_and_parse_data_08004300(100,&constant1,7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004348": "initialize_data_processing_08004348",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "local_10": "constant1",
                "local_c": "maskedInput2",
                "uStack_8": "input3Copy"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004384": {
            "entrypoint": "0x08004384",
            "current_name": "parse_and_process_data_08004384",
            "code": "\n\n\nvoid parseAndProcessData_08004384(undefined4 inputData,undefined4 arg2,undefined4 arg3,uint dataFlag)\n\n{\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  uint maskedData;\n  \n  _DAT_200013bd = 0x2a0007;\n  tempVar1 = _DAT_200013b9;\n  tempVar2 = 0x2a0007;\n  _DAT_200013c1 = 0;\n  DAT_200013c3 = 0;\n  maskedData = dataFlag & 0xff000000;\n  process_and_parse_data_08004300(0x65,&tempVar1,0xb,0,inputData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004384": "parse_and_process_data_08004384",
                "param_1": "inputData",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "dataFlag",
                "local_14": "tempVar1",
                "uStack_10": "tempVar2",
                "local_c": "maskedData"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043bc": {
            "entrypoint": "0x080043bc",
            "current_name": "copy_and_process_data_080043bc",
            "code": "\nvoid copyAndProcessData_080043bc(void)\n\n{\n  undefined4 firstValue;\n  undefined4 secondValue;\n  undefined4 *destPointer;\n  undefined4 *srcPointer;\n  undefined4 copiedData [2];\n  undefined2 copiedDataIndices [6];\n  \n  srcPointer = (undefined4 *)&DAT_2000142a;\n  destPointer = copiedData;\n  do {\n    firstValue = *srcPointer;\n    secondValue = srcPointer[1];\n    srcPointer = srcPointer + 2;\n    *destPointer = firstValue;\n    destPointer[1] = secondValue;\n    destPointer = destPointer + 2;\n  } while (srcPointer != (undefined4 *)&DAT_2000143a);\n  *(undefined2 *)destPointer = DAT_2000143a;\n  process_and_parse_data_08004300(0x66,copiedData,0x12);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043bc": "copy_and_process_data_080043bc",
                "puVar4": "srcPointer",
                "puVar3": "destPointer",
                "local_24": "copiedData",
                "local_1c": "copiedDataIndices",
                "uVar1": "firstValue",
                "uVar2": "secondValue"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043f0": {
            "entrypoint": "0x080043f0",
            "current_name": "process_and_parse_data_080043f0",
            "code": "\n\n\nvoid processAndParseData_080043f0(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 data_1;\n  undefined4 data_2;\n  undefined4 data_arr [2];\n  \n  data_1 = _DAT_200013dd;\n  data_2 = _DAT_200013e1;\n  data_arr[0] = arg3;\n  process_and_parse_data_08004300(0x68,&data_1,8,data_arr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043f0": "process_and_parse_data_080043f0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "local_10": "data_1",
                "uStack_c": "data_2",
                "auStack_8": "data_arr"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004410": {
            "entrypoint": "0x08004410",
            "current_name": "process_and_parse_data_08004410",
            "code": "\nvoid processAndParseData_08004410(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 data3;\n  \n  data1 = DAT_20001395;\n  data2 = CONCAT22((short)((uint)input2 >> 0x10),DAT_20001399);\n  data3 = input3;\n  process_and_parse_data_08004300(0x6c,&data1,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004410": "process_and_parse_data_08004410",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "local_10": "data1",
                "local_c": "data2",
                "uStack_8": "data3"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004434": {
            "entrypoint": "0x08004434",
            "current_name": "parse_and_process_data_08004434",
            "code": "\nvoid parseAndProcessData_08004434(undefined4 unusedParam,undefined4 inputParam,undefined4 dataParam)\n\n{\n  undefined4 globalVariable;\n  undefined4 parsedInput;\n  undefined4 dataStack;\n  \n  globalVariable = DAT_200014ab;\n  parsedInput = CONCAT22((short)((uint)inputParam >> 0x10),DAT_200014af);\n  dataStack = dataParam;\n  process_and_parse_data_08004300(0x6d,&globalVariable,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004434": "parse_and_process_data_08004434",
                "param_1": "unusedParam",
                "param_2": "inputParam",
                "param_3": "dataParam",
                "local_10": "globalVariable",
                "local_c": "parsedInput",
                "uStack_8": "dataStack"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004458": {
            "entrypoint": "0x08004458",
            "current_name": "copy_and_process_data_08004458",
            "code": "\nvoid copyAndProcessData_08004458(void)\n\n{\n  undefined4 *destPointer;\n  undefined4 *srcPointer;\n  undefined4 tempValue;\n  undefined4 *destPointerCopy;\n  undefined4 *srcPointerCopy;\n  undefined4 dataBuffer [3];\n  undefined2 tempBuffer [10];\n  \n  destPointer = dataBuffer;\n  srcPointer = &DAT_2000139b;\n  do {\n    srcPointerCopy = srcPointer;\n    destPointerCopy = destPointer;\n    tempValue = srcPointerCopy[1];\n    *destPointerCopy = *srcPointerCopy;\n    destPointerCopy[1] = tempValue;\n    destPointer = destPointerCopy + 2;\n    srcPointer = srcPointerCopy + 2;\n  } while (srcPointerCopy + 2 != (undefined4 *)0x200013b3);\n  destPointerCopy[2] = uRam200013b3;\n  *(undefined2 *)(destPointerCopy + 3) = *(undefined2 *)(srcPointerCopy + 3);\n  process_and_parse_data_08004300(0x70,dataBuffer,0x1e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004458": "copy_and_process_data_08004458",
                "puVar1": "destPointer",
                "puVar2": "srcPointer",
                "uVar3": "tempValue",
                "puVar4": "destPointerCopy",
                "puVar5": "srcPointerCopy",
                "local_30": "dataBuffer",
                "local_24": "tempBuffer"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004490": {
            "entrypoint": "0x08004490",
            "current_name": "process_and_update_parameters_08004490",
            "code": "\nvoid process_and_update_parameters_08004490(undefined4 error_message,undefined4 line_number)\n\n{\n  update_parameter(0x40011000,0x4000,1);\n  update_parameter(0x40011000,0x8000,0);\n  update_parameter(0x40011000,0x2000,0);\n  do {\n    xor_and_update_value(0x40011000,0x4000);\n    xor_and_update_value(0x40011000,0x8000);\n    xor_and_update_value(0x40011000,0x2000);\n    process_error_string(\"Error with \");\n    process_error_string(error_message);\n    process_error_string(\" at line: \");\n    process_line_number_string(line_number);\n    parse_data(10);\n    thunk_FUNC_08001168(500);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004490": "process_and_update_parameters_08004490",
                "param_1": "error_message",
                "param_2": "line_number",
                "update_parameter_08001424": "update_parameter",
                "xor_and_update_value_0800142e": "xor_and_update_value",
                "process_null_terminated_strings_08004c8c": "process_error_string",
                "process_string_and_terminate_08004cac": "process_line_number_string",
                "parse_data_08004c18": "parse_data"
            },
            "calling": [
                "FUN_080040b8",
                "FUN_0800407c",
                "FUN_08004514",
                "FUN_0800403c",
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_0800142e",
                "FUN_08004cac",
                "FUN_08001424",
                "FUN_08004c18",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004514": {
            "entrypoint": "0x08004514",
            "current_name": "FUNC_08004514",
            "code": "\nvoid FUNC_08004514(void)\n\n{\n  int iVar1;\n  uint uVar2;\n  undefined4 uVar3;\n  int iVar4;\n  undefined4 local_44;\n  int local_40;\n  int local_3c;\n  undefined4 local_38;\n  int local_34;\n  undefined4 local_30 [4];\n  undefined4 local_20;\n  undefined4 local_1c;\n  undefined4 local_14;\n  undefined4 local_10;\n  undefined4 local_c;\n  \n  local_20 = 1;\n  local_1c = 0x10;\n  iVar4 = 2;\n  local_10 = 0;\n  local_30[0] = 2;\n  local_14 = 2;\n  local_c = 0x380000;\n  iVar1 = check_conditions_08001b58(local_30);\n  if (iVar1 == 0) goto LAB_08004540;\n  uVar3 = 0x3c;\n  while( true ) {\n    iVar1 = process_and_update_parameters_08004490(\"../Src/peripherals.c\",uVar3);\nLAB_08004540:\n    local_44 = 0xf;\n    local_38 = 0x400;\n    local_40 = iVar4;\n    local_3c = iVar1;\n    local_34 = iVar1;\n    iVar4 = initialize_and_calculate_clock_0800209c(&local_44,iVar4);\n    if (iVar4 == 0) break;\n    uVar3 = 0x49;\n  }\n  uVar2 = get_data_08002214();\n  update_system_parameters_08001214(uVar2 / 1000);\n  update_memory_status_08001240(4);\n  update_memory_08001194(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004514": "FUNC_08004514"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001b58",
                "FUN_08001194",
                "FUN_0800209c",
                "FUN_08002214",
                "FUN_08001240",
                "FUN_08001214"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800458c": {
            "entrypoint": "0x0800458c",
            "current_name": "initialize_and_configure_system_0800458c",
            "code": "\n\n\nvoid initialize_and_configure_system_0800458c(void)\n\n{\n  int result;\n  undefined4 loop_variable;\n  int initial_value;\n  int value_1;\n  int value_2;\n  int value_3;\n  int value_4;\n  int value_5;\n  int value_6;\n  int value_7;\n  int value_8;\n  int value_9;\n  int value_10;\n  int value_11;\n  int value_12;\n  int value_13;\n  undefined4 value_14;\n  int value_15;\n  \n  init_sys_config();\n  FUNC_08004514();\n  initial_value = 2;\n  _DAT_40021018 = _DAT_40021018 | 0x1c;\n  update_parameter(0x40011000,0xe000,0,_DAT_40021018 & 8);\n  update_parameter(0x40010800,0x20,0);\n  value_9 = 0xe000;\n  value_10 = 1;\n  value_12 = 2;\n  update_bits_08001264(0x40011000,&value_9);\n  value_9 = 0x20;\n  value_10 = 1;\n  value_12 = 2;\n  update_bits_08001264(0x40010800,&value_9);\n  DAT_20001504 = 0x40005400;\n  DAT_20001508 = 400000;\n  DAT_20001514 = 0x4000;\n  DAT_2000150c = 0;\n  DAT_20001510 = 0;\n  DAT_20001518 = 0;\n  DAT_2000151c = 0;\n  DAT_20001520 = 0;\n  DAT_20001524 = 0;\n  result = init_device();\n  if (result == 0) goto LAB_0800463a;\n  loop_variable = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  result = process_parameters(\"../Src/peripherals.c\",loop_variable);\nLAB_0800463a:\n                                  DAT_2000157c = 0x40013800;\n                                  DAT_20001580 = 0x1c200;\n                                  DAT_20001590 = 0xc;\n                                  DAT_20001584 = result;\n                                  DAT_20001588 = result;\n                                  DAT_2000158c = result;\n                                  DAT_20001594 = result;\n                                  DAT_20001598 = result;\n                                  result = initialize_and_set_memory_08002724(&DAT_2000157c);\n                                  if (result == 0) break;\n                                  loop_variable = 0x151;\n                                }\n                                DAT_200015bc = 0x40012c00;\n                                DAT_200015c8 = 1000;\n                                DAT_200015c0 = initial_value;\n                                DAT_200015c4 = result;\n                                DAT_200015cc = result;\n                                DAT_200015d0 = result;\n                                result = process_data(&DAT_200015bc);\n                                if (result == 0) break;\n                                loop_variable = 0x88;\n                              }\n                              value_1 = result;\n                              value_2 = result;\n                              result = set_permissions(&DAT_200015bc,&value_1);\n                              if (result == 0) break;\n                              loop_variable = 0x8f;\n                            }\n                            value_3 = 0x60;\n                            value_4 = result;\n                            value_5 = result;\n                            value_6 = result;\n                            value_7 = result;\n                            value_8 = result;\n                            result = update_flags_values(&DAT_200015bc,&value_3,0xc);\n                            if (result == 0) break;\n                            loop_variable = 0x9a;\n                          }\n                          value_14 = 0x2000;\n                          value_9 = result;\n                          value_10 = result;\n                          value_11 = result;\n                          value_12 = result;\n                          value_13 = result;\n                          value_15 = result;\n                          result = validate_and_set_flag_08002564(&DAT_200015bc,&value_9);\n                          if (result == 0) break;\n                          loop_variable = 0xa6;\n                        }\n                        update_config(&DAT_200015bc);\n                        DAT_200015f8 = 0x40000000;\n                        DAT_20001604 = 1000;\n                        DAT_200015fc = initial_value;\n                        DAT_20001600 = result;\n                        DAT_20001608 = result;\n                        result = process_data(&DAT_200015f8);\n                        if (result == 0) break;\n                        loop_variable = 0xc3;\n                      }\n                      value_3 = result;\n                      value_4 = result;\n                      result = set_permissions(&DAT_200015f8,&value_3);\n                      if (result == 0) break;\n                      loop_variable = 0xca;\n                    }\n                    value_9 = 0x60;\n                    value_10 = result;\n                    value_11 = result;\n                    value_13 = result;\n                    result = update_flags_values(&DAT_200015f8,&value_9,4);\n                    if (result == 0) break;\n                    loop_variable = 0xd3;\n                  }\n                  update_config(&DAT_200015f8);\n                  DAT_2000154c = 1000;\n                  DAT_20001540 = 0x40000400;\n                  DAT_20001544 = initial_value;\n                  DAT_20001548 = result;\n                  DAT_20001550 = result;\n                  result = process_data();\n                  if (result == 0) break;\n                  loop_variable = 0xf0;\n                }\n                value_3 = 0;\n                value_4 = 0;\n                result = set_permissions(&DAT_20001540,&value_3);\n                if (result == 0) break;\n                loop_variable = 0xf7;\n              }\n              value_9 = 0x60;\n              value_10 = result;\n              value_11 = result;\n              value_13 = result;\n              result = update_flags_values(&DAT_20001540,&value_9,8);\n              if (result == 0) break;\n              loop_variable = 0x100;\n            }\n            initial_value = update_flags_values(&DAT_20001540,&value_9,0xc);\n            if (initial_value == 0) break;\n            loop_variable = 0x105;\n          }\n          update_config(&DAT_20001540);\n          DAT_200014c8 = 0x40000800;\n          DAT_200014cc = 2;\n          DAT_200014d4 = 1000;\n          DAT_200014d0 = initial_value;\n          DAT_200014d8 = initial_value;\n          result = process_data(&DAT_200014c8);\n          if (result == 0) break;\n          loop_variable = 0x122;\n        }\n        value_3 = result;\n        value_4 = result;\n        result = set_permissions(&DAT_200014c8,&value_3);\n        if (result == 0) break;\n        loop_variable = 0x129;\n      }\n      value_9 = 0x60;\n      value_10 = result;\n      value_11 = result;\n      value_13 = result;\n      result = update_flags_values(&DAT_200014c8,&value_9,8);\n      if (result == 0) break;\n      loop_variable = 0x132;\n    }\n    result = update_flags_values(&DAT_200014c8,&value_9,0xc);\n    if (result == 0) break;\n    loop_variable = 0x137;\n  }\n  update_config(&DAT_200014c8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800458c": "initialize_and_configure_system_0800458c",
                "iVar1": "result",
                "uVar2": "loop_variable",
                "iVar3": "initial_value",
                "local_58": "value_1",
                "local_54": "value_2",
                "local_50": "value_3",
                "local_4c": "value_4",
                "local_48": "value_5",
                "local_40": "value_6",
                "local_3c": "value_7",
                "local_38": "value_8",
                "local_34": "value_9",
                "local_30": "value_10",
                "local_2c": "value_11",
                "local_28": "value_12",
                "local_24": "value_13",
                "local_20": "value_14",
                "local_1c": "value_15",
                "initialize_system_and_configuration_08001128": "init_sys_config",
                "update_parameter_08001424": "update_parameter",
                "initialize_device_08001754": "init_device",
                "process_and_update_parameters_08004490": "process_parameters",
                "process_data_080023d0": "process_data",
                "set_permissions_080025a4": "set_permissions",
                "update_flags_and_values_0800245c": "update_flags_values",
                "update_config_08004e14": "update_config"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08004490",
                "FUN_080023d0",
                "FUN_08002564",
                "FUN_08001264",
                "FUN_08002724",
                "FUN_08001128",
                "FUN_080025a4",
                "FUN_0800245c",
                "FUN_08001424",
                "FUN_08004e14",
                "FUN_08001754",
                "FUN_08004514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800483c": {
            "entrypoint": "0x0800483c",
            "current_name": "calculate_result_0800483c",
            "code": "\nvoid calculateResult_0800483c(int *inputParams)\n\n{\n  undefined4 floatResult1;\n  undefined4 floatResult2;\n  int intValue1;\n  int intValue2;\n  int intValue3;\n  \n  intValue2 = inputParams[0xc];\n  floatResult1 = calculate_float_08000adc(inputParams[7],inputParams[9]);\n  intValue2 = calculate_float_08000ad8(floatResult1,intValue2);\n  inputParams[10] = intValue2;\n  if (*inputParams == 3) {\n    intValue2 = check_if_concatenated_params_are_empty_08001064(inputParams[10],0);\n    if (intValue2 == 0) {\n      intValue2 = check_if_concatenation_is_empty_08001028(inputParams[10],0xc3340000);\n    }\n    else {\n      intValue2 = check_if_concatenated_params_are_empty_08001064(inputParams[10],0x43340000);\n    }\n    if (intValue2 != 0) {\n      intValue3 = inputParams[10];\n      floatResult1 = reverse_bits_08000cec(inputParams[10],0x43b40000);\n      intValue2 = check_if_concatenated_params_are_empty_08001064(inputParams[10],0);\n      intValue1 = inputParams[10];\n      if (intValue2 == 0) {\n        intValue1 = intValue1 + -0x80000000;\n      }\n      floatResult1 = floating_point_conversion_08000e54(floatResult1,intValue1);\n      intValue2 = calculate_float_08000ad8(intValue3,floatResult1);\n      inputParams[10] = intValue2;\n    }\n  }\n  intValue3 = inputParams[2];\n  intValue1 = inputParams[3];\n  intValue2 = reverse_bits_08000cec(inputParams[1],inputParams[10]);\n  inputParams[0xe] = intValue2;\n  intValue2 = calculate_float_08000adc(inputParams[10],inputParams[0xf]);\n  inputParams[0xf] = intValue2;\n  intValue2 = check_if_concatenation_is_empty_08001028(inputParams[0xf],0xc3fa0000);\n  if (intValue2 == 0) {\n    intValue2 = check_if_concatenated_params_are_empty_08001064(inputParams[0xf],0x43fa0000);\n    if (intValue2 == 0) {\n      intValue2 = inputParams[0xf];\n    }\n    else {\n      intValue2 = 0x43fa0000;\n    }\n  }\n  else {\n    intValue2 = -0x3c060000;\n  }\n  inputParams[0xf] = intValue2;\n  intValue2 = calculate_float_08000ad8(inputParams[0xc],inputParams[0xd]);\n  inputParams[0x10] = intValue2;\n  intValue2 = inputParams[0xe];\n  floatResult1 = reverse_bits_08000cec(intValue3,inputParams[0xf]);\n  floatResult1 = calculate_float_08000adc(floatResult1,intValue2);\n  floatResult2 = reverse_bits_08000cec(intValue1,inputParams[0x10]);\n  intValue2 = calculate_float_08000ad8(floatResult1,floatResult2);\n  inputParams[0x12] = intValue2;\n  floatResult1 = calculate_signed_magnitude_08000c44(inputParams[0x13]);\n  intValue2 = check_if_concatenation_is_empty_08001028(inputParams[0x12],0xc3fa0000);\n  if (intValue2 == 0) {\n    intValue2 = check_if_concatenated_params_are_empty_08001064(inputParams[0x12],0x43fa0000);\n    if (intValue2 == 0) {\n      intValue2 = inputParams[0x12];\n    }\n    else {\n      intValue2 = 0x43fa0000;\n    }\n  }\n  else {\n    intValue2 = -0x3c060000;\n  }\n  intValue2 = reverse_bits_08000cec(intValue2,floatResult1);\n  inputParams[0x12] = intValue2;\n  inputParams[0xd] = inputParams[0xc];\n  inputParams[0xb] = inputParams[10];\n  inputParams[0x15] = inputParams[0x14];\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800483c": "calculate_result_0800483c",
                "param_1": "inputParams",
                "uVar1": "floatResult1",
                "uVar2": "floatResult2",
                "iVar3": "intValue1",
                "iVar4": "intValue2",
                "iVar5": "intValue3"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000e54",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_08001064",
                "FUN_08001028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a30": {
            "entrypoint": "0x08004a30",
            "current_name": "initialize_bit_manipulation_08004a30",
            "code": "\nvoid initializeBitManipulation_08004a30(void)\n\n{\n  undefined4 constantValue;\n  \n  if (DAT_20000285 != '\\0') {\n    if (DAT_200002a8 == '\\0') {\n      constantValue = get_data_constant_08003068();\n      DAT_20000068 = reverse_bits_08000cec(constantValue,0x42c80000);\n      DAT_200002a8 = '\\x01';\n    }\n    else {\n      constantValue = get_data_constant_08003068();\n      DAT_2000007c = reverse_bits_08000cec(constantValue,0x42c80000);\n    }\n  }\n  if (DAT_20000285 == '\\0') {\n    if (DAT_200002a8 != '\\0') {\n      DAT_200002a8 = DAT_20000285;\n    }\n    DAT_20000094 = DAT_20000288;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a30": "initialize_bit_manipulation_08004a30",
                "uVar1": "constantValue"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08003068"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "initialize_and_calculate_parameters_08004a84",
            "code": "\nvoid initializeAndCalculateParameters_08004a84(void)\n\n{\n  int result;\n  \n  DAT_200000d8 = calculateAndReverseBits();\n  DAT_20000134 = calculateAndStoreResult();\n  DAT_20000190 = calculateConcatenationResult();\n  initializeBitManipulation();\n  result = checkIfConcatenatedParamsAreEmpty(DAT_200000d8,0);\n  if (result == 0) {\n    result = checkIfConcatenationIsEmpty(DAT_200000d8,0xc2a00000);\n  }\n  else {\n    result = checkIfConcatenatedParamsAreEmpty(DAT_200000d8,0x42a00000);\n  }\n  if (result == 0) {\n    result = checkIfConcatenatedParamsAreEmpty(DAT_20000134,0);\n    if (result == 0) {\n      result = checkIfConcatenationIsEmpty(DAT_20000134,0xc2a00000);\n    }\n    else {\n      result = checkIfConcatenatedParamsAreEmpty(DAT_20000134,0x42a00000);\n    }\n    if (result == 0) {\n      updateParameters(1,1);\n      calculateResult(&DAT_200000a8);\n      calculateResult(&DAT_20000104);\n      calculateResult(&DAT_20000160);\n      if (DAT_20000285 != '\\0') {\n        calculateResult(&DAT_2000004c);\n        calculateFloat(DAT_20000094,0x44bb8000);\n      }\n      DAT_20000094 = DAT_20000288;\n      if (DAT_20000284 == '\\0') {\n        initializeParameters();\n      }\n      else {\n        calculateAndSetParams(DAT_20000288,DAT_200000f0,DAT_2000014c,DAT_200001a8);\n      }\n      reverseBits(DAT_200000ac,0x437f0000);\n      DAT_2000139b._3_1_ = decodeUnsignedInteger();\n      reverseBits(DAT_200000b0,0x437f0000);\n      DAT_2000139f._0_1_ = decodeUnsignedInteger();\n      reverseBits(DAT_20000108,0x437f0000);\n      DAT_2000139b._0_1_ = decodeUnsignedInteger();\n      reverseBits(DAT_2000010c,0x437f0000);\n      DAT_2000139b._1_1_ = decodeUnsignedInteger();\n      reverseBits(DAT_20000110,0x437f0000);\n      DAT_2000139b._2_1_ = decodeUnsignedInteger();\n      reverseBits(DAT_20000164,0x437f0000);\n      DAT_2000139f._2_1_ = decodeUnsignedInteger();\n      reverseBits(DAT_20000168,0x437f0000);\n      DAT_2000139f._3_1_ = decodeUnsignedInteger();\n      reverseBits(DAT_2000016c,0x437f0000);\n      DAT_200013a3._0_1_ = decodeUnsignedInteger();\n      reverseBits(DAT_20000050,0x437f0000);\n      DAT_200013a3._1_1_ = decodeUnsignedInteger();\n      reverseBits(DAT_20000054,0x437f0000);\n      DAT_200013a3._2_1_ = decodeUnsignedInteger();\n      reverseBits(DAT_20000058,0x437f0000);\n      DAT_200013a3._3_1_ = decodeUnsignedInteger();\n      return;\n    }\n  }\n  initializeParameters();\n  updateParameters(0,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "initialize_and_calculate_parameters_08004a84",
                "iVar1": "result",
                "calculate_and_reverse_bits_08002ec0": "calculateAndReverseBits",
                "calculate_and_store_result_08002ed4": "calculateAndStoreResult",
                "calculate_concatenation_result_08002ee8": "calculateConcatenationResult",
                "initialize_bit_manipulation_08004a30": "initializeBitManipulation",
                "check_if_concatenated_params_are_empty_08001064": "checkIfConcatenatedParamsAreEmpty",
                "check_if_concatenation_is_empty_08001028": "checkIfConcatenationIsEmpty",
                "update_parameters_08003f3c": "updateParameters",
                "calculate_result_0800483c": "calculateResult",
                "calculate_float_08000adc": "calculateFloat",
                "initialize_parameters_080041c4": "initializeParameters",
                "calculate_and_set_params_0800426c": "calculateAndSetParams",
                "reverse_bits_08000cec": "reverseBits",
                "decode_unsigned_integer_080010c4": "decodeUnsignedInteger"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004a30",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08001028",
                "FUN_08002ec0",
                "FUN_0800426c",
                "FUN_08000adc",
                "FUN_08003f3c",
                "FUN_080041c4",
                "FUN_080010c4",
                "FUN_08002ed4",
                "FUN_08001064",
                "FUN_0800483c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c18": {
            "entrypoint": "0x08004c18",
            "current_name": "parse_data_08004c18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800289e) */\n\nundefined4 parseData_08004c18(undefined input)\n\n{\n  int *ptr;\n  int start;\n  int end;\n  ushort *dataPtr;\n  \n  DAT_20001636._0_1_ = input;\n  dataPtr = &DAT_20001636;\n  if (((DAT_200015b5 != '\\x01') && (DAT_200015b5 != '\\\"')) || (DAT_200015b4 == '\\x01')) {\n    return 2;\n  }\n  DAT_200015b4 = 1;\n  DAT_200015b8 = 0;\n  DAT_200015a0 = 1;\n  if (DAT_200015b5 == '\\\"') {\n    DAT_200015b5 = '2';\n  }\n  else {\n    DAT_200015b5 = '\\x12';\n  }\n  DAT_200015a2 = 1;\nLAB_080027c4:\n  do {\n    if (DAT_200015a2 == 0) {\n      start = get_data_0800115c();\n      do {\n        if (*DAT_2000157c << 0x19 < 0) {\n          if (DAT_200015b5 == '2') {\n            DAT_200015b5 = 0x22;\n          }\n          else {\n            DAT_200015b5 = 1;\n          }\n          DAT_200015b4 = 0;\n          return 0;\n        }\n        end = get_data_0800115c();\n      } while ((uint)(end - start) < 6);\nLAB_0800281c:\n      ptr = DAT_2000157c;\n      DAT_2000157c[3] = DAT_2000157c[3] & 0xffffff7f;\n      ptr[3] = ptr[3] & 0xffffffdf;\n      ptr[3] = ptr[3] & 0xfffffeff;\n      ptr[5] = ptr[5] & 0xfffffffe;\n      DAT_200015b5 = 1;\n      DAT_200015b4 = 0;\n      return 3;\n    }\n    DAT_200015a2 = DAT_200015a2 + -1;\n    if (DAT_20001584 == 0x1000) {\n      start = get_data_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        end = get_data_0800115c();\n        if (5 < (uint)(end - start)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = *dataPtr & 0x1ff;\n      if (DAT_2000158c == 0) {\n        dataPtr = dataPtr + 1;\n        goto LAB_080027c4;\n      }\n    }\n    else {\n      start = get_data_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        end = get_data_0800115c();\n        if (5 < (uint)(end - start)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = (uint)*(byte *)dataPtr;\n    }\n    dataPtr = (ushort *)((int)dataPtr + 1);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004c18": "parse_data_08004c18",
                "param_1": "input",
                "piVar1": "ptr",
                "iVar2": "start",
                "iVar3": "end",
                "puVar4": "dataPtr"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004c8c"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "validate_and_process_data_08004c30",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nint * validate_and_process_data_08004c30(int *data_ptr)\n\n{\n  int result;\n  \n  if (*data_ptr != 0x40013800) {\n    return data_ptr;\n  }\n  increment_and_store_value_08003ec8(&DAT_20000364,DAT_20001634);\n  result = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(result + 0x14) = *(uint *)(result + 0x14) | 1;\n    *(uint *)(result + 0xc) = *(uint *)(result + 0xc) | 0x20;\n    return (int *)0x0;\n  }\n  return (int *)0x2;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "validate_and_process_data_08004c30",
                "param_1": "data_ptr",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0800290c"
            ],
            "called": [
                "FUN_08003ec8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c64": {
            "entrypoint": "0x08004c64",
            "current_name": "initialize_data_08004c64",
            "code": "\nvoid initializeData_08004c64(void)\n\n{\n  int index;\n  \n  index = 0;\n  DAT_20000b64 = 0;\n  DAT_20000b66 = 0;\n  DAT_20000b68 = 0;\n  do {\n    (&DAT_20000364)[index] = 0;\n    index = index + 1;\n  } while (index != 0x800);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c64": "initialize_data_08004c64",
                "iVar1": "index"
            },
            "calling": [
                "FUN_08004c70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c70": {
            "entrypoint": "0x08004c70",
            "current_name": "initialize_and_check_flags_08004c70",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nundefined4 initialize_and_check_flags_08004c70(void)\n\n{\n  int counter;\n  \n  initialize_data_08004c64();\n  counter = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(counter + 0x14) = *(uint *)(counter + 0x14) | 1;\n    *(uint *)(counter + 0xc) = *(uint *)(counter + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08004c70": "initialize_and_check_flags_08004c70",
                "iVar1": "counter"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08004c64"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8c": {
            "entrypoint": "0x08004c8c",
            "current_name": "process_null_terminated_strings_08004c8c",
            "code": "\nvoid process_null_terminated_strings_08004c8c(undefined *input_string)\n\n{\n  uint string_length;\n  undefined *current_character;\n  \n  current_character = input_string;\n  while( true ) {\n    string_length = find_null_terminated_string_08000150(input_string);\n    if (string_length <= (uint)((int)current_character - (int)input_string)) break;\n    parse_data_08004c18(*current_character);\n    current_character = current_character + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c8c": "process_null_terminated_strings_08004c8c",
                "param_1": "input_string",
                "uVar1": "string_length",
                "puVar2": "current_character"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004cac"
            ],
            "called": [
                "FUN_08000150",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cac": {
            "entrypoint": "0x08004cac",
            "current_name": "process_string_and_terminate_08004cac",
            "code": "\nvoid process_string_and_terminate_08004cac(undefined4 input_param)\n\n{\n  clear_string_08004ffc(&DAT_20001636,&DAT_0800735e,input_param);\n  process_strings_terminate(&DAT_20001636);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004cac": "process_string_and_terminate_08004cac",
                "param_1": "input_param",
                "process_null_terminated_strings_08004c8c": "process_strings_terminate"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_08004ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "setup_configuration_08004ccc",
            "code": "\n\n\nvoid setup_configuration_08004ccc(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3)\n\n{\n  _DAT_40021018 = _DAT_40021018 | 1;\n  configure_som_register(3,input_param_2,_DAT_40021018,1,input_param_1,1,input_param_3);\n  update_memory(0xfffffff4,0);\n  update_memory(0xfffffff5,0);\n  update_memory(0xfffffff6,0);\n  update_memory(0xfffffffb,0);\n  update_memory(0xfffffffc,0);\n  update_memory(0xfffffffe,0);\n  update_memory(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "setup_configuration_08004ccc",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "configure_som_register_08001170": "configure_som_register",
                "update_memory_08001194": "update_memory"
            },
            "calling": [
                "FUN_08001128"
            ],
            "called": [
                "FUN_08001194",
                "FUN_08001170"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d48": {
            "entrypoint": "0x08004d48",
            "current_name": "configure_device_08004d48",
            "code": "\n\n\nvoid configureDevice_08004d48(int *deviceConfiguration,undefined4 configurationFlag)\n\n{\n  undefined4 bitMask1;\n  undefined4 bitMask2;\n  \n  if (*deviceConfiguration == 0x40005400) {\n    bitMask1 = 0xc0;\n    bitMask2 = 0x12;\n    update_bits_08001264(0x40010c00,&bitMask1,0x40005400,3,deviceConfiguration,configurationFlag);\n    _DAT_4002101c = _DAT_4002101c | 0x200000;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d48": "configure_device_08004d48",
                "param_1": "deviceConfiguration",
                "param_2": "configurationFlag",
                "local_18": "bitMask1",
                "local_14": "bitMask2"
            },
            "calling": [
                "FUN_08001754"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d8c": {
            "entrypoint": "0x08004d8c",
            "current_name": "update_data_flags_08004d8c",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateDataFlags_08004d8c(int *dataPointer)\n\n{\n  int value;\n  \n  value = *dataPointer;\n  if (value == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n  }\n  else if (value == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (value == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n  }\n  else if (value == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d8c": "update_data_flags_08004d8c",
                "param_1": "dataPointer",
                "iVar1": "value"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e14": {
            "entrypoint": "0x08004e14",
            "current_name": "update_config_08004e14",
            "code": "\nvoid updateConfig_08004e14(int *configData,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 updatedValue;\n  int configValue;\n  undefined4 newValue1;\n  undefined4 newValue2;\n  undefined4 newValue3;\n  undefined4 constantValue;\n  \n  configValue = *configData;\n  if (configValue == 0x40012c00) {\n    newValue1 = 0x800;\n  }\n  else {\n    if (configValue != 0x40000000) {\n      if (configValue == 0x40000400) {\n        newValue1 = 3;\n      }\n      else {\n        if (configValue != 0x40000800) {\n          return;\n        }\n        newValue1 = 0x300;\n      }\n      updatedValue = 0x40010c00;\n      goto LAB_08004e2e;\n    }\n    newValue1 = 2;\n  }\n  updatedValue = 0x40010800;\nLAB_08004e2e:\n  constantValue = 2;\n  newValue2 = 2;\n  newValue3 = value2;\n  update_bits_08001264(updatedValue,&newValue1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e14": "update_config_08004e14",
                "param_1": "configData",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "updatedValue",
                "iVar2": "configValue",
                "local_18": "newValue1",
                "local_14": "newValue2",
                "uStack_10": "newValue3",
                "local_c": "constantValue"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e7c": {
            "entrypoint": "0x08004e7c",
            "current_name": "initialize_memory_08004e7c",
            "code": "\n\n\nvoid initializeMemory_08004e7c(int *memoryPointer)\n\n{\n  undefined4 bitMask1;\n  undefined4 bitMask2;\n  undefined4 bitMask3;\n  undefined4 bitMask4;\n  \n  if (*memoryPointer == 0x40013800) {\n    _DAT_40021018 = _DAT_40021018 | 0x4000;\n    bitMask1 = 0x200;\n    bitMask2 = 2;\n    bitMask4 = 3;\n    update_bits_08001264(0x40010800,&bitMask1);\n    bitMask1 = 0x400;\n    bitMask2 = 0;\n    bitMask3 = 0;\n    update_bits_08001264(0x40010800,&bitMask1);\n    update_memory_08001194(0x25,0,0);\n    set_bit_in_memory_080011fc(0x25);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e7c": "initialize_memory_08004e7c",
                "param_1": "memoryPointer",
                "local_18": "bitMask1",
                "local_14": "bitMask2",
                "local_10": "bitMask3",
                "local_c": "bitMask4"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08001264",
                "FUN_080011fc",
                "FUN_08001194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f10": {
            "entrypoint": "0x08004f10",
            "current_name": "initialize_memory_08004f10",
            "code": "\n\n\nvoid initializeMemory_08004f10(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f10": "initialize_memory_08004f10"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800115c": {
            "entrypoint": "0x08004f60",
            "current_name": "get_data_value_thunk_0800115c",
            "code": "\nundefined4 get_data_value_thunk_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800115c": "get_data_value_thunk_0800115c"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08001168": {
            "entrypoint": "0x08004f64",
            "current_name": "thunk_FUNC_08001168",
            "code": "\nvoid thunk_FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "thunk_FUN_08001168": "thunk_FUNC_08001168"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003298",
                "FUN_08004028",
                "FUN_0800403c"
            ],
            "called": [
                "FUN_08001168"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08004f68",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000228; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007448);\n  }\n  for (puVar2 = &DAT_20000228; puVar2 < &DAT_200016a0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_memory_08004f10();\n  execute_functions_08004fb4();\n  UNRECOVERED_JUMPTABLE = (code *)0x8004f9a;\n  run_system_processing_080041ae();\n                    /* WARNING: Could not recover jumptable at 0x08004f9a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08004fb4",
                "FUN_080041ae",
                "FUN_08004f10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fb4": {
            "entrypoint": "0x08004fb4",
            "current_name": "execute_functions_08004fb4",
            "code": "\nvoid executeFunctions_08004fb4(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(functionPointer *)(&DAT_08007440)[index])();\n  }\n  FUNC_080072d4();\n  for (index = 0; index != 1; index = index + 1) {\n    (*(functionPointer *)(&DAT_08007440)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fb4": "execute_functions_08004fb4",
                "iVar1": "index",
                "code": "functionPointer"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_080072d4",
                "FUN_08000134"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ffc": {
            "entrypoint": "0x08004ffc",
            "current_name": "clear_string_08004ffc",
            "code": "\nvoid clearString_08004ffc(undefined *inputString,undefined4 length,undefined4 value1,undefined4 value2)\n\n{\n  undefined *tempStrings [2];\n  undefined4 maxValue;\n  undefined2 stringSize;\n  undefined2 maxShort;\n  undefined *currentString;\n  undefined4 maxInt;\n  undefined4 stackValue1;\n  undefined4 stackValue2;\n  undefined4 stackValue3;\n  \n  stringSize = 0x208;\n  maxValue = 0x7fffffff;\n  maxInt = 0x7fffffff;\n  maxShort = 0xffff;\n  tempStrings[0] = inputString;\n  currentString = inputString;\n  stackValue1 = length;\n  stackValue2 = value1;\n  stackValue3 = value2;\n  process_string_080050fc(DAT_200001c0,tempStrings,length);\n  *tempStrings[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ffc": "clear_string_08004ffc",
                "param_1": "inputString",
                "param_2": "length",
                "param_3": "value1",
                "param_4": "value2",
                "local_78": "tempStrings",
                "local_70": "maxValue",
                "local_6c": "stringSize",
                "local_6a": "maxShort",
                "local_68": "currentString",
                "local_64": "maxInt",
                "uStack_c": "stackValue1",
                "uStack_8": "stackValue2",
                "uStack_4": "stackValue3"
            },
            "calling": [
                "FUN_08004cac"
            ],
            "called": [
                "FUN_080050fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005044": {
            "entrypoint": "0x08005044",
            "current_name": "allocate_and_copy_data_08005044",
            "code": "\nundefined4 allocate_and_copy_data_08005044(undefined4 *result_status,int *input_array,undefined4 source_data,uint data_size)\n\n{\n  int new_block_address;\n  uint uVar2;\n  uint current_block_size;\n  int iVar4;\n  \n  current_block_size = input_array[2];\n  if ((current_block_size <= data_size) && ((*(ushort *)(input_array + 3) & 0x480) != 0)) {\n    iVar4 = *input_array - input_array[4];\n    current_block_size = (uint)(input_array[5] * 3) / 2;\n    uVar2 = data_size + 1 + iVar4;\n    if (current_block_size < uVar2) {\n      current_block_size = uVar2;\n    }\n    if ((int)((uint)*(ushort *)(input_array + 3) << 0x15) < 0) {\n      new_block_address = allocate_memory_block_08005714(result_status,current_block_size);\n      if (new_block_address == 0) {\nLAB_0800508a:\n        *result_status = 0xc;\n        *(ushort *)(input_array + 3) = *(ushort *)(input_array + 3) | 0x40;\n        return 0xffffffff;\n      }\n      copy_data_08005630(new_block_address,input_array[4],iVar4);\n      *(ushort *)(input_array + 3) = *(ushort *)(input_array + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      new_block_address = allocate_and_copy_080057d0(result_status,input_array[4],current_block_size);\n      if (new_block_address == 0) {\n        update_list_0800567c(result_status,input_array[4]);\n        goto LAB_0800508a;\n      }\n    }\n    input_array[4] = new_block_address;\n    *input_array = new_block_address + iVar4;\n    input_array[5] = current_block_size;\n    input_array[2] = current_block_size - iVar4;\n    current_block_size = data_size;\n  }\n  if (data_size <= current_block_size) {\n    current_block_size = data_size;\n  }\n  copy_and_reverse_08005646(*input_array,source_data,current_block_size);\n  input_array[2] = input_array[2] - current_block_size;\n  *input_array = current_block_size + *input_array;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005044": "allocate_and_copy_data_08005044",
                "param_1": "result_status",
                "param_2": "input_array",
                "param_3": "source_data",
                "param_4": "data_size",
                "iVar1": "new_block_address",
                "uVar3": "current_block_size"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_08005646",
                "FUN_080057d0",
                "FUN_08005714",
                "FUN_0800567c",
                "FUN_08005630"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050fc": {
            "entrypoint": "0x080050fc",
            "current_name": "process_string_080050fc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005294) */\n\nint processString_080050fc(undefined4 *output,int *input,byte *formatString,int *blockPtr)\n\n{\n  int result;\n  int allocationResult;\n  int *currentBlockPtr;\n  bool found;\n  byte *formatPtr;\n  byte *currentCharPtr;\n  int unsuccessfulResult;\n  int *currentBlockPtr;\n  uint flags;\n  int foundPosition;\n  undefined4 precision;\n  int length;\n  int totalLength;\n  byte conversionSpecifier;\n  undefined spaceFlag;\n  undefined showSignFlag;\n  undefined alternateForm;\n  undefined4 padding;\n  \n  currentBlockPtr = blockPtr;\n  if (((int)((uint)*(ushort *)(input + 3) << 0x18) < 0) && (input[4] == 0)) {\n    result = allocate_memory_block_08005714(output,0x40);\n    *input = result;\n    input[4] = result;\n    if (result == 0) {\n      *output = 0xc;\n      return -1;\n    }\n    input[5] = 0x40;\n  }\n  totalLength = 0;\n  spaceFlag = 0x20;\n  showSignFlag = 0x30;\n  formatPtr = formatString;\nLAB_08005146:\n  currentCharPtr = formatPtr;\n  if (*currentCharPtr != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  formatPtr = currentCharPtr + 1;\n  if (*currentCharPtr != 0x25) goto LAB_08005146;\nLAB_08005150:\n  result = (int)currentCharPtr - (int)formatString;\n  if (result != 0) {\n    allocationResult = allocate_and_copy_data_08005044(output,input,formatString,result);\n    if (allocationResult == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(input + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return totalLength;\n    }\n    totalLength = totalLength + result;\n  }\n  if (*currentCharPtr == 0) goto LAB_080052ac;\n  flags = 0;\n  length = 0;\n  foundPosition = -1;\n  precision = 0;\n  alternateForm = 0;\n  padding = 0;\n  formatPtr = currentCharPtr + 1;\n  while( true ) {\n    result = find_character_08005614(&DAT_08007379,*formatPtr);\n    formatString = formatPtr + 1;\n    if (result == 0) break;\n    flags = 1 << (result + 0xf7ff8c87U & 0xff) | flags;\n    formatPtr = formatString;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    alternateForm = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    alternateForm = 0x2b;\n  }\n  if (*formatPtr == 0x2a) {\n    currentBlockPtr = currentBlockPtr + 1;\n    result = *currentBlockPtr;\n    currentBlockPtr = currentBlockPtr;\n    if (result < 0) {\n      length = -result;\n      flags = flags | 2;\n      goto LAB_080051fc;\n    }\n  }\n  else {\n    found = false;\n    result = length;\n    formatString = formatPtr;\n    while( true ) {\n      if (9 < *formatString - 0x30) break;\n      result = result * 10 + (*formatString - 0x30);\n      found = true;\n      formatString = formatString + 1;\n    }\n    if (!found) goto LAB_080051fc;\n  }\n  length = result;\nLAB_080051fc:\n  if (*formatString == 0x2e) {\n    if (formatString[1] == 0x2a) {\n      formatString = formatString + 2;\n      currentBlockPtr = currentBlockPtr + 1;\n      foundPosition = *currentBlockPtr;\n      currentBlockPtr = currentBlockPtr;\n      if (foundPosition < 0) {\n        foundPosition = -1;\n      }\n    }\n    else {\n      found = false;\n      result = 0;\n      foundPosition = 0;\n      while( true ) {\n        formatString = formatString + 1;\n        if (9 < *formatString - 0x30) break;\n        result = result * 10 + (*formatString - 0x30);\n        found = true;\n      }\n      if (found) {\n        foundPosition = result;\n      }\n    }\n  }\n  result = find_character_08005614(&DAT_0800737f,*formatString,3);\n  if (result != 0) {\n    formatString = formatString + 1;\n    flags = flags | 0x40 << (result + 0xf7ff8c81U & 0xff);\n  }\n  conversionSpecifier = *formatString;\n  formatString = formatString + 1;\n  result = find_character_08005614(\"efgEFG\",conversionSpecifier,6);\n  if (result == 0) {\n    unsuccessfulResult = process_string_conversion_080053d4(output,&flags,input,0x8005045,&currentBlockPtr);\n    if (unsuccessfulResult == -1) goto LAB_080052ac;\n  }\n  else {\n    currentBlockPtr = (int *)(((int)currentBlockPtr + 7U & 0xfffffff8) + 8);\n  }\n  totalLength = totalLength + unsuccessfulResult;\n  formatPtr = formatString;\n  goto LAB_08005146;\n}\n\n",
            "renaming": {
                "FUN_080050fc": "process_string_080050fc",
                "param_1": "output",
                "param_2": "input",
                "param_3": "formatString",
                "param_4": "blockPtr",
                "iVar1": "result",
                "iVar2": "allocationResult",
                "piVar3": "currentBlockPtr",
                "bVar4": "found",
                "pbVar5": "formatPtr",
                "pbVar6": "currentCharPtr",
                "unaff_r9": "unsuccessfulResult",
                "local_8c": "currentBlockPtr",
                "local_88": "flags",
                "local_84": "foundPosition",
                "local_80": "precision",
                "local_7c": "length",
                "local_74": "totalLength",
                "local_70": "conversionSpecifier",
                "local_6f": "spaceFlag",
                "local_6e": "showSignFlag",
                "local_45": "alternateForm",
                "local_30": "padding"
            },
            "calling": [
                "FUN_08004ffc"
            ],
            "called": [
                "FUN_08005614",
                "FUN_08005714",
                "FUN_080053d4",
                "FUN_08005044"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052e4": {
            "entrypoint": "0x080052e4",
            "current_name": "determine_string_length_080052e4",
            "code": "\nundefined4\ndetermineStringLength_080052e4(undefined4 input,uint *string,uint *length,undefined4 param_4,code *stringProcessor)\n\n{\n  int iterator;\n  int result;\n  uint maxLength;\n  uint offset;\n  bool isFlagSet;\n  \n  maxLength = string[4];\n  if ((int)string[4] < (int)string[2]) {\n    maxLength = string[2];\n  }\n  *length = maxLength;\n  if (*(char *)((int)string + 0x43) != '\\0') {\n    *length = maxLength + 1;\n  }\n  if ((int)(*string << 0x1a) < 0) {\n    *length = *length + 2;\n  }\n  if ((*string & 6) == 0) {\n    for (iterator = 0; iterator < (int)(string[3] - *length); iterator = iterator + 1) {\n      result = (*stringProcessor)(input,param_4,(int)string + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxLength = (uint)*(byte *)((int)string + 0x43);\n  if (maxLength != 0) {\n    maxLength = 1;\n  }\n  offset = maxLength;\n  if ((int)(*string << 0x1a) < 0) {\n    *(undefined *)((int)string + maxLength + 0x43) = 0x30;\n    offset = maxLength + 2;\n    *(undefined *)((int)string + maxLength + 0x44) = *(undefined *)((int)string + 0x45);\n  }\n  iterator = (*stringProcessor)(input,param_4,(int)string + 0x43,offset);\n  if (iterator != -1) {\n    maxLength = string[3];\n    isFlagSet = (*string & 6) != 4;\n    if (isFlagSet) {\n      maxLength = 0;\n    }\n    offset = 0;\n    if (!isFlagSet) {\n      maxLength = maxLength - *length;\n    }\n    if (!isFlagSet) {\n      maxLength = maxLength & ~((int)maxLength >> 0x1f);\n    }\n    if ((int)string[4] < (int)string[2]) {\n      maxLength = maxLength + (string[2] - string[4]);\n    }\n    while( true ) {\n      if (maxLength == offset) {\n        return 0;\n      }\n      iterator = (*stringProcessor)(input,param_4,(int)string + 0x1a,1);\n      if (iterator == -1) break;\n      offset = offset + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080052e4": "determine_string_length_080052e4",
                "param_1": "input",
                "param_2": "string",
                "param_3": "length",
                "param_5": "stringProcessor",
                "iVar1": "iterator",
                "iVar2": "result",
                "uVar3": "maxLength",
                "uVar4": "offset",
                "bVar5": "isFlagSet"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "process_string_conversion_080053d4",
            "code": "\nuint process_string_conversion_080053d4(undefined4 input_value,uint *string_data,undefined4 input_length,code *conversion_function,uint **output_data)\n\n{\n  byte first_char;\n  int index;\n  uint *output_ptr;\n  int result;\n  char *hex_table;\n  uint base;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint converted_value;\n  uint copy_of_value;\n  char *output_ptr_temp;\n  char *output_ptr_final;\n  uint length_values [2];\n  \n  first_char = *(byte *)(string_data + 6);\n  output_ptr_final = (char *)((int)string_data + 0x43);\n  if (first_char != 0x6e) {\n    if (first_char < 0x6f) {\n      if (first_char != 99) {\n        if (first_char < 100) {\n          if (first_char == 0) goto LAB_0800558e;\n          if (first_char != 0x58) goto LAB_08005404;\n          *(undefined *)((int)string_data + 0x45) = 0x58;\n          hex_table = \"0123456789ABCDEF\";\nLAB_0800551e:\n          base = *string_data;\n          output_ptr = *output_data;\n          *output_data = output_ptr + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            converted_value = (uint)*(ushort *)output_ptr;\n          }\n          else {\n            converted_value = *output_ptr;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *string_data = base | 0x20;\n          }\n          if (converted_value == 0) {\n            *string_data = *string_data & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)string_data + 0x43) = 0;\n        }\n        else {\n          if ((first_char != 100) && (first_char != 0x69)) goto LAB_08005404;\n          converted_value = *string_data;\n          output_ptr = *output_data;\n          if ((converted_value & 0x80) == 0) {\n            *output_data = output_ptr + 1;\n            if ((converted_value & 0x40) == 0) goto LAB_08005424;\n            converted_value = (uint)(short)*(ushort *)output_ptr;\n          }\n          else {\n            *output_data = output_ptr + 1;\nLAB_08005424:\n            converted_value = *output_ptr;\n          }\n          if ((int)converted_value < 0) {\n            converted_value = -converted_value;\n            *(undefined *)((int)string_data + 0x43) = 0x2d;\n          }\n          hex_table = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        copy_of_value = string_data[1];\n        string_data[2] = copy_of_value;\n        output_ptr_temp = output_ptr_final;\n        if ((int)copy_of_value < 0) {\n          if (converted_value != 0) goto LAB_08005552;\nLAB_08005600:\n          *(char *)((int)string_data + 0x42) = *hex_table;\n          output_ptr_temp = (char *)((int)string_data + 0x42);\n        }\n        else {\n          *string_data = *string_data & 0xfffffffb;\n          if (converted_value == 0) {\n            if (copy_of_value != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              copy_of_value = converted_value / base;\n              output_ptr_temp = output_ptr_temp + -1;\n              *output_ptr_temp = hex_table[converted_value - base * copy_of_value];\n              converted_value = copy_of_value;\n            } while (copy_of_value != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*string_data << 0x1f) < 0)) && ((int)string_data[1] <= (int)string_data[4]))\n        {\n          output_ptr_temp[-1] = '0';\n          output_ptr_temp = output_ptr_temp + -1;\n        }\n        string_data[4] = (int)output_ptr_final - (int)output_ptr_temp;\n        output_ptr_final = output_ptr_temp;\n        goto LAB_080054fa;\n      }\n      output_ptr = *output_data;\n      *output_data = output_ptr + 1;\n      *(char *)((int)string_data + 0x42) = (char)*output_ptr;\nLAB_08005464:\n      output_ptr_final = (char *)((int)string_data + 0x42);\n      converted_value = 1;\n    }\n    else {\n      if (first_char != 0x73) {\n        if (first_char < 0x74) {\n          if (first_char == 0x6f) {\nLAB_0800548a:\n            converted_value = *string_data;\n            output_ptr = *output_data;\n            if ((converted_value & 0x80) == 0) {\n              *output_data = output_ptr + 1;\n              if ((converted_value & 0x40) == 0) goto LAB_08005498;\n              converted_value = (uint)*(ushort *)output_ptr;\n            }\n            else {\n              *output_data = output_ptr + 1;\nLAB_08005498:\n              converted_value = *output_ptr;\n            }\n            if (first_char == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            hex_table = \"0123456789ABCDEF\";\n            goto LAB_080054b4;\n          }\n          if (first_char == 0x70) {\n            *string_data = *string_data | 0x20;\nLAB_0800544a:\n            hex_table = \"0123456789abcdef\";\n            *(undefined *)((int)string_data + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (first_char == 0x75) goto LAB_0800548a;\n          if (first_char == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)string_data + 0x42) = first_char;\n        goto LAB_08005464;\n      }\n      ppcVar8 = (char **)*output_data;\n      *output_data = (uint *)(ppcVar8 + 1);\n      output_ptr_final = *ppcVar8;\n      index = find_character_08005614(output_ptr_final,0,string_data[1]);\n      if (index != 0) {\n        string_data[1] = index - (int)output_ptr_final;\n      }\n      converted_value = string_data[1];\n    }\n    string_data[4] = converted_value;\n    *(undefined *)((int)string_data + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  converted_value = *string_data;\n  ppuVar7 = (uint **)*output_data;\n  base = string_data[5];\n  if ((converted_value & 0x80) == 0) {\n    *output_data = (uint *)(ppuVar7 + 1);\n    output_ptr = *ppuVar7;\n    if ((converted_value & 0x40) == 0) goto LAB_0800557a;\n    *(short *)output_ptr = (short)base;\n  }\n  else {\n    *output_data = (uint *)(ppuVar7 + 1);\n    output_ptr = *ppuVar7;\nLAB_0800557a:\n    *output_ptr = base;\n  }\nLAB_0800558e:\n  string_data[4] = 0;\nLAB_080054fa:\n  index = determine_string_length_080052e4(input_value,string_data,length_values,input_length,conversion_function);\n  if ((index == -1) || (index = (*conversion_function)(input_value,input_length,output_ptr_final,string_data[4]), index == -1)) {\nLAB_0800550e:\n    converted_value = 0xffffffff;\n  }\n  else {\n    if ((int)(*string_data << 0x1e) < 0) {\n      for (index = 0; index < (int)(string_data[3] - length_values[0]); index = index + 1) {\n        result = (*conversion_function)(input_value,input_length,(int)string_data + 0x19,1);\n        if (result == -1) goto LAB_0800550e;\n      }\n    }\n    converted_value = string_data[3];\n    if ((int)string_data[3] < (int)length_values[0]) {\n      converted_value = length_values[0];\n    }\n  }\n  return converted_value;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "process_string_conversion_080053d4",
                "param_1": "input_value",
                "param_2": "string_data",
                "param_3": "input_length",
                "param_4": "conversion_function",
                "param_5": "output_data",
                "bVar1": "first_char",
                "iVar2": "index",
                "puVar3": "output_ptr",
                "iVar4": "result",
                "pcVar5": "hex_table",
                "uVar6": "base",
                "uVar9": "converted_value",
                "uVar10": "copy_of_value",
                "pcVar11": "output_ptr_temp",
                "pcVar12": "output_ptr_final",
                "local_24": "length_values"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_08005614",
                "FUN_080052e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005614": {
            "entrypoint": "0x08005614",
            "current_name": "find_character_08005614",
            "code": "\nchar * find_character_08005614(char *input_string,char character,int string_length)\n\n{\n  char *current_char;\n  char *next_char;\n  \n  current_char = input_string;\n  do {\n    next_char = current_char;\n    if (next_char == input_string + string_length) {\n      return (char *)0x0;\n    }\n    current_char = next_char + 1;\n  } while (*next_char != character);\n  return next_char;\n}\n\n",
            "renaming": {
                "FUN_08005614": "find_character_08005614",
                "param_1": "input_string",
                "param_2": "character",
                "param_3": "string_length",
                "pcVar1": "current_char",
                "pcVar2": "next_char"
            },
            "calling": [
                "FUN_080053d4",
                "FUN_080050fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005630": {
            "entrypoint": "0x08005630",
            "current_name": "copy_data_08005630",
            "code": "\nvoid copy_data_08005630(int dest_address,undefined *src_address,int length)\n\n{\n  undefined *src_end;\n  undefined *dest_end;\n  \n  dest_end = (undefined *)(dest_address + -1);\n  src_end = src_address + length;\n  for (; src_address != src_end; src_address = src_address + 1) {\n    dest_end = dest_end + 1;\n    *dest_end = *src_address;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005630": "copy_data_08005630",
                "param_1": "dest_address",
                "param_2": "src_address",
                "param_3": "length",
                "puVar1": "src_end",
                "puVar2": "dest_end"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005646": {
            "entrypoint": "0x08005646",
            "current_name": "copy_and_reverse_08005646",
            "code": "\nvoid copyAndReverse_08005646(undefined *destination,undefined *source,int size)\n\n{\n  undefined *endPoint;\n  \n  endPoint = source + size;\n  if ((source < destination) && (destination < endPoint)) {\n    destination = destination + size;\n    size = size - (int)endPoint;\n    while (endPoint + size != (undefined *)0x0) {\n      endPoint = endPoint + -1;\n      destination = destination + -1;\n      *destination = *endPoint;\n    }\n    return;\n  }\n  destination = destination + -1;\n  for (; source != endPoint; source = source + 1) {\n    destination = destination + 1;\n    *destination = *source;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005646": "copy_and_reverse_08005646",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "endPoint"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800567c": {
            "entrypoint": "0x0800567c",
            "current_name": "update_list_0800567c",
            "code": "\nvoid updateList_0800567c(undefined4 *output,int size,undefined4 param3,undefined4 param4)\n\n{\n  int **tempPtr;\n  int **currentPtr;\n  int **nextPtr;\n  int *tempVar;\n  int **prevPtr;\n  int **newPtr;\n  \n  if (size == 0) {\n    return;\n  }\n  newPtr = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    newPtr = (int **)((int)newPtr + *(int *)(size + -4));\n  }\n  FUNC_0800583c();\n  nextPtr = (int **)&DAT_200002ac;\n  if (DAT_200002ac == (int **)0x0) {\n    newPtr[1] = (int *)0x0;\n    currentPtr = tempPtr;\n    DAT_200002ac = newPtr;\n  }\n  else {\n    nextPtr = DAT_200002ac;\n    if (newPtr < DAT_200002ac) {\n      currentPtr = (int **)*newPtr;\n      nextPtr = (int **)((int)newPtr + (int)currentPtr);\n      if (DAT_200002ac == nextPtr) {\n        tempVar = *DAT_200002ac;\n        DAT_200002ac = (int **)DAT_200002ac[1];\n        nextPtr = (int **)((int)tempVar + (int)currentPtr);\n        *newPtr = (int *)nextPtr;\n      }\n      newPtr[1] = (int *)DAT_200002ac;\n      DAT_200002ac = newPtr;\n    }\n    else {\n      do {\n        prevPtr = nextPtr;\n        nextPtr = (int **)prevPtr[1];\n        if (nextPtr == (int **)0x0) break;\n      } while (nextPtr <= newPtr);\n      currentPtr = (int **)*prevPtr;\n      if ((int **)((int)prevPtr + (int)currentPtr) == newPtr) {\n        currentPtr = (int **)((int)currentPtr + (int)*newPtr);\n        *prevPtr = (int *)currentPtr;\n        if (nextPtr == (int **)((int)prevPtr + (int)currentPtr)) {\n          tempVar = *nextPtr;\n          nextPtr = (int **)nextPtr[1];\n          currentPtr = (int **)((int)currentPtr + (int)tempVar);\n          *prevPtr = (int *)currentPtr;\n          prevPtr[1] = (int *)nextPtr;\n        }\n      }\n      else if (newPtr < (int **)((int)prevPtr + (int)currentPtr)) {\n        *output = 0xc;\n      }\n      else {\n        currentPtr = (int **)((int)newPtr + (int)*newPtr);\n        if (nextPtr == currentPtr) {\n          tempVar = *nextPtr;\n          nextPtr = (int **)nextPtr[1];\n          currentPtr = (int **)((int)tempVar + (int)*newPtr);\n          *newPtr = (int *)currentPtr;\n        }\n        newPtr[1] = (int *)nextPtr;\n        prevPtr[1] = (int *)newPtr;\n      }\n    }\n  }\n  FUNC_0800583e(output,currentPtr,nextPtr,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800567c": "update_list_0800567c",
                "param_1": "output",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "extraout_r1": "tempPtr",
                "ppiVar1": "currentPtr",
                "ppiVar2": "nextPtr",
                "piVar3": "tempVar",
                "ppiVar4": "prevPtr",
                "ppiVar5": "newPtr"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "allocate_memory_block_08005714",
            "code": "\nuint allocate_memory_block_08005714(undefined4 *output_ptr,uint input_size)\n\n{\n  uint *current_block;\n  int remaining_space;\n  uint *previous_block;\n  uint difference;\n  uint *updated_block;\n  uint allocated_size;\n  \n  allocated_size = (input_size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < input_size)) {\n    *output_ptr = 0xc;\n  }\n  else {\n    FUNC_0800583c();\n    current_block = DAT_200002ac;\n    updated_block = DAT_200002ac;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      difference = *previous_block - allocated_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (updated_block == previous_block) {\n            current_block = (uint *)updated_block[1];\n            DAT_200002ac = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (updated_block != previous_block) {\n            updated_block[1] = (uint)current_block;\n            updated_block = previous_block;\n          }\n        }\n        else {\n          *previous_block = difference;\n          *(uint *)((int)previous_block + difference) = allocated_size;\n          updated_block = (uint *)((int)previous_block + difference);\n        }\n        goto LAB_08005778;\n      }\n      updated_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_200002b0 == 0) {\n      DAT_200002b0 = update_param_value_0800581c(output_ptr);\n    }\n    current_block = (uint *)update_param_value_0800581c(output_ptr,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((updated_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == updated_block ||\n        (remaining_space = update_param_value_0800581c(output_ptr,(int)updated_block - (int)current_block), remaining_space != -1)))) {\n      *updated_block = allocated_size;\nLAB_08005778:\n      FUNC_0800583e(output_ptr);\n      allocated_size = (int)updated_block + 0xbU & 0xfffffff8;\n      remaining_space = allocated_size - (int)(updated_block + 1);\n      if (remaining_space != 0) {\n        *(int *)((int)updated_block + remaining_space) = -remaining_space;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *output_ptr = 0xc;\n    FUNC_0800583e(output_ptr);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005714": "allocate_memory_block_08005714",
                "param_1": "output_ptr",
                "param_2": "input_size",
                "puVar1": "current_block",
                "iVar2": "remaining_space",
                "puVar3": "previous_block",
                "uVar4": "difference",
                "puVar5": "updated_block",
                "uVar6": "allocated_size"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_080050fc",
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800581c",
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057d0": {
            "entrypoint": "0x080057d0",
            "current_name": "allocate_and_copy_080057d0",
            "code": "\nint allocate_and_copy_080057d0(undefined4 ptr1,int size,uint target_size,undefined4 param_4)\n\n{\n  int result;\n  uint sum;\n  \n  if (size != 0) {\n    if (target_size == 0) {\n      update_list_0800567c();\n      result = 0;\n    }\n    else {\n      sum = calculate_sum_08005840();\n      result = size;\n      if ((sum < target_size) && (result = allocate_memory_block_08005714(ptr1,target_size), result != 0)) {\n        copy_data_08005630(result,size,target_size);\n        update_list_0800567c(ptr1,size);\n      }\n    }\n    return result;\n  }\n  result = allocate_memory_block_08005714(ptr1,target_size,target_size,param_4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080057d0": "allocate_and_copy_080057d0",
                "param_1": "ptr1",
                "param_2": "size",
                "param_3": "target_size",
                "iVar1": "result",
                "uVar2": "sum"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [
                "FUN_08005714",
                "FUN_0800567c",
                "FUN_08005630",
                "FUN_08005840"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800581c": {
            "entrypoint": "0x0800581c",
            "current_name": "update_param_value_0800581c",
            "code": "\nvoid update_param_value_0800581c(int *result,undefined4 input_value)\n\n{\n  int update_result;\n  \n  DAT_2000169c = 0;\n  update_result = update_pointer_080072b8(input_value);\n  if ((update_result == -1) && (DAT_2000169c != 0)) {\n    *result = DAT_2000169c;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800581c": "update_param_value_0800581c",
                "param_1": "result",
                "param_2": "input_value",
                "iVar1": "update_result"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_080072b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "FUNC_0800583c",
            "code": "\nvoid FUNC_0800583c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "FUNC_0800583c"
            },
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800583e": {
            "entrypoint": "0x0800583e",
            "current_name": "FUNC_0800583e",
            "code": "\nvoid FUNC_0800583e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583e": "FUNC_0800583e"
            },
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_sum_08005840",
            "code": "\nint calculateSum_08005840(undefined4 param,int array)\n\n{\n  int currentIndex;\n  \n  currentIndex = *(int *)(array + -4) + -4;\n  if (*(int *)(array + -4) < 0) {\n    currentIndex = currentIndex + *(int *)(array + currentIndex);\n  }\n  return currentIndex;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_sum_08005840",
                "param_1": "param",
                "param_2": "array",
                "iVar1": "currentIndex"
            },
            "calling": [
                "FUN_080057d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005854": {
            "entrypoint": "0x08005854",
            "current_name": "process_input_08005854",
            "code": "\nundefined8 processInput_08005854(undefined4 input1,undefined4 input2)\n\n{\n  int result;\n  undefined4 *dataPtr;\n  int *intPtr;\n  undefined8 calcResult;\n  undefined8 funcResult;\n  undefined4 flag;\n  undefined *data;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input1_copy2;\n  undefined4 input2_copy2;\n  undefined8 infinity;\n  int checkResult;\n  \n  calcResult = calculate_result_08005c70();\n  if (DAT_20000224 == -1) {\n    return calcResult;\n  }\n  checkResult = check_input_08000a04(input1,input2,input1,input2);\n  if (checkResult != 0) {\n    return calcResult;\n  }\n  funcResult = FUNC_0800708c(input1,input2);\n  result = check_if_null_terminated_080009f0((int)funcResult,(int)((ulonglong)funcResult >> 0x20),0,0x3ff00000);\n  if (result == 0) {\n    return calcResult;\n  }\n  flag = 1;\n  data = &DAT_080073ac;\n  input1_copy = input1;\n  input2_copy = input2;\n  input1_copy2 = input1;\n  input2_copy2 = input2;\n  infinity = get_infinity_080070a4(&DAT_0800737e);\n  if (DAT_20000224 != '\\x02') {\n    result = initialize_0800709e(&flag);\n    if (result != 0) goto LAB_080058d0;\n  }\n  dataPtr = (undefined4 *)get_data_080072ac();\n  *dataPtr = 0x21;\nLAB_080058d0:\n  if (checkResult != 0) {\n    intPtr = (int *)get_data_080072ac();\n    *intPtr = checkResult;\n  }\n  return infinity;\n}\n\n",
            "renaming": {
                "FUN_08005854": "process_input_08005854",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "result",
                "puVar2": "dataPtr",
                "piVar3": "intPtr",
                "uVar4": "calcResult",
                "uVar5": "funcResult",
                "local_48": "flag",
                "local_44": "data",
                "local_40": "input1_copy",
                "uStack_3c": "input2_copy",
                "local_38": "input1_copy2",
                "uStack_34": "input2_copy2",
                "local_30": "infinity",
                "local_28": "checkResult"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_0800709e",
                "FUN_080072ac",
                "FUN_08005c70",
                "FUN_080070a4",
                "FUN_08000a04",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08006070": {
            "entrypoint": "0x080058fc",
            "current_name": "perform_calculation_thunk_08006070",
            "code": "\nundefined8 performCalculation_thunk_08006070(uint num1,uint num2,uint num3,uint num4)\n\n{\n  undefined4 result1;\n  uint shiftAmount;\n  uint temp;\n  int difference;\n  uint maskedParam4;\n  undefined8 finalResult;\n  undefined8 reverseResult1;\n  \n  maskedParam4 = num4 & 0x7fffffff;\n  if ((0x7ff00000 < (maskedParam4 | (-num3 | num3) >> 0x1f)) ||\n     (temp = num2 & 0x7fffffff, 0x7ff00000 < (temp | (-num1 | num1) >> 0x1f))) {\n    finalResult = perform_unsigned_division_0800016c(num1,num2,num3,num4,num4);\n    return finalResult;\n  }\n  if ((num4 + 0xc0100000 | num3) == 0) {\n    finalResult = perform_division_08006d68();\n    return finalResult;\n  }\n  shiftAmount = (int)num4 >> 0x1e & 2U | num2 >> 0x1f;\n  if ((num1 | temp) == 0) {\n    if (shiftAmount == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (shiftAmount != 3) {\n      return CONCAT44(num2,num1);\n    }\nLAB_0800613e:\n    finalResult = 0xc00921fb54442d18;\n  }\n  else {\n    if ((num3 | maskedParam4) != 0) {\n      if (maskedParam4 == 0x7ff00000) {\n        if (temp == 0x7ff00000) {\n          if (shiftAmount == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (shiftAmount == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (shiftAmount != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (shiftAmount == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (shiftAmount != 3) {\n          if (shiftAmount != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (temp != 0x7ff00000) {\n        difference = (int)(temp - maskedParam4) >> 0x14;\n        if (difference < 0x3d) {\n          if (((int)num4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n            finalResult = 0;\n          }\n          else {\n            calculate_double_08000724(num1,num2);\n            FUNC_0800708c();\n            finalResult = perform_division_08006d68();\n          }\n        }\n        else {\n          finalResult = 0x3ff921fb54442d18;\n        }\n        difference = (int)((ulonglong)finalResult >> 0x20);\n        result1 = (undefined4)finalResult;\n        if (shiftAmount == 1) {\n          return CONCAT44(difference + -0x80000000,result1);\n        }\n        if (shiftAmount == 2) {\n          reverseResult1 = reverse_compute_08000168(result1,difference,0x33145c07,0x3ca1a626);\n          finalResult = 0x400921fb54442d18;\n        }\n        else {\n          if (shiftAmount == 0) {\n            return finalResult;\n          }\n          finalResult = reverse_compute_08000168(result1,difference,0x33145c07,0x3ca1a626);\n          reverseResult1 = 0x400921fb54442d18;\n        }\n        finalResult = reverse_compute_08000168((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)reverseResult1,\n                             (int)((ulonglong)reverseResult1 >> 0x20));\n        return finalResult;\n      }\n    }\n    if ((int)num2 < 0) {\n      finalResult = 0xbff921fb54442d18;\n    }\n    else {\n      finalResult = 0x3ff921fb54442d18;\n    }\n  }\n  return finalResult;\n}\n\n",
            "renaming": {
                "thunk_FUN_08006070": "perform_calculation_thunk_08006070",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "uVar1": "result1",
                "uVar2": "shiftAmount",
                "uVar3": "temp",
                "iVar4": "difference",
                "uVar5": "maskedParam4",
                "uVar6": "finalResult",
                "uVar7": "reverseResult1"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08006070"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "calculate_result_08005900",
            "code": "\nundefined8 calculate_result_08005900(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  char flag;\n  int result;\n  int *ptrResult;\n  undefined4 *ptrData;\n  int bitResult;\n  undefined4 highBits;\n  undefined4 lowBits;\n  undefined8 result1;\n  undefined8 result2;\n  undefined4 value1;\n  undefined *ptrValue;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 value5;\n  undefined8 computedResult;\n  int checkResult;\n  \n  result1 = calculate_double_08006228();\n  flag = DAT_20000224;\n  highBits = (undefined4)((ulonglong)result1 >> 0x20);\n  lowBits = (undefined4)result1;\n  if (DAT_20000224 == -1) {\n    return result1;\n  }\n  result = check_input_08000a04(input3,input4,input3,input4);\n  if (result != 0) {\n    return result1;\n  }\n  result = check_input_08000a04(input1,input2,input1,input2);\n  value2 = input1;\n  value3 = input2;\n  value4 = input3;\n  value5 = input4;\n  if (result == 0) {\n    result = check_parameter_validity_080009a0(input1,input2,0,0);\n    if (result != 0) {\n      result = check_parameter_validity_080009a0(input3,input4,0,0);\n      if (result != 0) {\n        value1 = 1;\n        ptrValue = &DAT_080073b1;\n        computedResult = 0;\n        checkResult = 0;\n        if (flag != '\\0') {\n          computedResult = 0x3ff0000000000000;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      result = extract_bit_08007092(input3,input4);\n      if (result == 0) {\n        return result1;\n      }\n      result = check_if_cy_is_null_080009b4(input3,input4,0,0);\n      if (result == 0) {\n        return result1;\n      }\n      value1 = 1;\n      ptrValue = &DAT_080073b1;\n      checkResult = 0;\n      if (DAT_20000224 == '\\0') goto LAB_08005a22;\n      computedResult = 0xfff0000000000000;\n      checkResult = 0;\n      flag = DAT_20000224;\nLAB_08005a32:\n      if (flag != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    result = extract_bit_08007092(lowBits,highBits);\n    if (((result != 0) || (bitResult = extract_bit_08007092(input1,input2), bitResult == 0)) ||\n       (bitResult = extract_bit_08007092(input3,input4), bitResult == 0)) {\n      result = check_parameter_validity_080009a0(lowBits,highBits,0,0);\n      if (result == 0) {\n        return result1;\n      }\n      result = extract_bit_08007092(input1,input2);\n      if (result == 0) {\n        return result1;\n      }\n      result = extract_bit_08007092(input3,input4);\n      if (result == 0) {\n        return result1;\n      }\n      value1 = 4;\n      ptrValue = &DAT_080073b1;\n      checkResult = 0;\n      computedResult._0_4_ = 0;\n      computedResult._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    checkResult = check_input_08000a04(lowBits,highBits);\n    flag = DAT_20000224;\n    if (checkResult != 0) {\n      ptrValue = &DAT_080073b1;\n      value1 = 1;\n      checkResult = result;\n      if (DAT_20000224 != '\\0') {\n        computedResult = calculate_double_08000724(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      ptrValue = &DAT_080073b1;\n      value1 = 1;\n      computedResult = 0;\n      goto LAB_08005978;\n    }\n    ptrValue = &DAT_080073b1;\n    value1 = 3;\n    if (DAT_20000224 == '\\0') {\n      computedResult._0_4_ = 0xe0000000;\n      computedResult._4_4_ = 0x47efffff;\n      result = check_if_cy_is_null_080009b4(input1,input2,0,0);\n      if (result != 0) {\n        result1 = calculate_shifted_value_080004d0(input3,input4,0,0x3fe00000);\n        result2 = perform_computation_080070b0();\n        result = check_parameter_validity_080009a0((int)result1,(int)((ulonglong)result1 >> 0x20),(int)result2,\n                             (int)((ulonglong)result2 >> 0x20));\n        if (result == 0) {\n          computedResult._0_4_ = 0xe0000000;\n          computedResult._4_4_ = 0xc7efffff;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      result = initialize_0800709e(&value1);\n      if (result != 0) goto LAB_080059d0;\n    }\n    else {\n      computedResult._0_4_ = 0;\n      computedResult._4_4_ = 0x7ff00000;\n      result = check_if_cy_is_null_080009b4(input1,input2,0,0);\n      if (result != 0) {\n        result1 = calculate_shifted_value_080004d0(input3,input4,0,0x3fe00000);\n        result2 = perform_computation_080070b0();\n        result = check_parameter_validity_080009a0((int)result1,(int)((ulonglong)result1 >> 0x20),(int)result2,\n                             (int)((ulonglong)result2 >> 0x20));\n        if (result == 0) {\n          computedResult._0_4_ = 0;\n          computedResult._4_4_ = 0xfff00000;\n        }\n      }\nLAB_08005afa:\n      if (DAT_20000224 != '\\x02') goto LAB_08005b98;\n    }\n    ptrData = (undefined4 *)get_data_080072ac();\n    lowBits = 0x22;\n  }\n  else {\n    result = check_parameter_validity_080009a0(input3,input4,0,0);\n    if (result == 0) {\n      return result1;\n    }\n    value1 = 1;\n    ptrValue = &DAT_080073b1;\n    computedResult = 0x3ff0000000000000;\n    checkResult = 0;\n    if (flag == '\\x02') {\n      return 0x3ff0000000000000;\n    }\nLAB_08005978:\n    result = initialize_0800709e(&value1);\n    if (result != 0) goto LAB_080059d0;\nLAB_08005a34:\n    ptrData = (undefined4 *)get_data_080072ac();\n    lowBits = 0x21;\n  }\n  *ptrData = lowBits;\nLAB_080059d0:\n  if (checkResult != 0) {\n    ptrResult = (int *)get_data_080072ac();\n    *ptrResult = checkResult;\n  }\n  return computedResult;\n}\n\n",
            "renaming": {
                "FUN_08005900": "calculate_result_08005900",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "cVar1": "flag",
                "iVar2": "result",
                "piVar3": "ptrResult",
                "puVar4": "ptrData",
                "iVar5": "bitResult",
                "uVar6": "highBits",
                "uVar7": "lowBits",
                "uVar8": "result1",
                "uVar9": "result2",
                "local_50": "value1",
                "local_4c": "ptrValue",
                "local_48": "value2",
                "uStack_44": "value3",
                "local_40": "value4",
                "uStack_3c": "value5",
                "local_38": "computedResult",
                "local_30": "checkResult"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_0800709e",
                "FUN_08000724",
                "FUN_080072ac",
                "FUN_080009a0",
                "FUN_080009b4",
                "FUN_08006228",
                "FUN_08000a04",
                "FUN_080070b0",
                "FUN_08007092",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bc8": {
            "entrypoint": "0x08005bc8",
            "current_name": "process_input_08005bc8",
            "code": "\nundefined8 processInput_08005bc8(undefined4 input1,undefined4 input2)\n\n{\n  char charValue;\n  int checkResult;\n  int *dataPtr;\n  undefined4 *dataPtr2;\n  undefined8 divisionResult;\n  undefined4 counter;\n  undefined *charPtr;\n  undefined4 localInput1;\n  undefined4 localInput2;\n  undefined4 localInput3;\n  undefined4 localInput4;\n  undefined8 doubleResult;\n  int inputCheckResult;\n  \n  divisionResult = calculate_division_08006c0c();\n  charValue = DAT_20000224;\n  if (DAT_20000224 == -1) {\n    return divisionResult;\n  }\n  inputCheckResult = check_input_08000a04(input1,input2,input1,input2);\n  if (inputCheckResult != 0) {\n    return divisionResult;\n  }\n  checkResult = check_if_cy_is_null_080009b4(input1,input2,0,0);\n  if (checkResult == 0) {\n    return divisionResult;\n  }\n  counter = 1;\n  charPtr = &DAT_080073b5;\n  localInput1 = input1;\n  localInput2 = input2;\n  localInput3 = input1;\n  localInput4 = input2;\n  if (charValue == '\\0') {\n    doubleResult = 0;\nLAB_08005c26:\n    checkResult = initialize_0800709e(&counter);\n    if (checkResult != 0) goto LAB_08005c2e;\n  }\n  else {\n    doubleResult = calculate_double_08000724(0,0,0,0);\n    if (charValue != '\\x02') goto LAB_08005c26;\n  }\n  dataPtr2 = (undefined4 *)get_data_080072ac();\n  *dataPtr2 = 0x21;\nLAB_08005c2e:\n  if (inputCheckResult != 0) {\n    dataPtr = (int *)get_data_080072ac();\n    *dataPtr = inputCheckResult;\n  }\n  return doubleResult;\n}\n\n",
            "renaming": {
                "FUN_08005bc8": "process_input_08005bc8",
                "param_1": "input1",
                "param_2": "input2",
                "cVar1": "charValue",
                "iVar2": "checkResult",
                "piVar3": "dataPtr",
                "puVar4": "dataPtr2",
                "uVar5": "divisionResult",
                "local_50": "counter",
                "local_4c": "charPtr",
                "local_48": "localInput1",
                "uStack_44": "localInput2",
                "local_40": "localInput3",
                "uStack_3c": "localInput4",
                "local_38": "doubleResult",
                "local_30": "inputCheckResult"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800709e",
                "FUN_080072ac",
                "FUN_080009b4",
                "FUN_08000a04",
                "FUN_08006c0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c70": {
            "entrypoint": "0x08005c70",
            "current_name": "calculate_result_08005c70",
            "code": "\nundefined8 calculate_result_08005c70(uint input_1,uint input_2)\n\n{\n  int is_null_terminated;\n  undefined4 shifted_value6_high;\n  undefined4 shifted_value6_low;\n  undefined4 shifted_value3_high;\n  undefined4 division_result_high;\n  undefined4 shifted_value1_low;\n  undefined4 shifted_value2_low;\n  uint uVar8;\n  undefined8 result4;\n  undefined8 division_result5;\n  undefined8 shifted_value5;\n  \n  result4 = CONCAT44(input_2,input_1);\n  uVar8 = input_2 & 0x7fffffff;\n  if (uVar8 < 0x3ff00000) {\n    if (uVar8 < 0x3fe00000) {\n      if (0x3e3fffff < uVar8) {\n        division_result5 = calculate_shifted_value_080004d0(input_1,input_2,input_1,input_2);\n        shifted_value2_low = (undefined4)((ulonglong)division_result5 >> 0x20);\n        shifted_value1_low = (undefined4)division_result5;\n        division_result5 = calculate_shifted_value_080004d0(shifted_value1_low,shifted_value2_low,0xdfdf709,0x3f023de1);\n        division_result5 = perform_unsigned_division_0800016c((int)division_result5,(int)((ulonglong)division_result5 >> 0x20),0x7501b288,0x3f49efe0);\n        division_result5 = calculate_shifted_value_080004d0((int)division_result5,(int)((ulonglong)division_result5 >> 0x20),shifted_value1_low,shifted_value2_low);\n        division_result5 = reverse_compute_08000168((int)division_result5,(int)((ulonglong)division_result5 >> 0x20),0xb5688f3b,0x3fa48228);\n        division_result5 = calculate_shifted_value_080004d0((int)division_result5,(int)((ulonglong)division_result5 >> 0x20),shifted_value1_low,shifted_value2_low);\n        division_result5 = perform_unsigned_division_0800016c((int)division_result5,(int)((ulonglong)division_result5 >> 0x20),0xe884455,0x3fc9c155);\n        division_result5 = calculate_shifted_value_080004d0((int)division_result5,(int)((ulonglong)division_result5 >> 0x20),shifted_value1_low,shifted_value2_low);\n        division_result5 = reverse_compute_08000168((int)division_result5,(int)((ulonglong)division_result5 >> 0x20),0x3eb6f7d,0x3fd4d612);\n        division_result5 = calculate_shifted_value_080004d0((int)division_result5,(int)((ulonglong)division_result5 >> 0x20),shifted_value1_low,shifted_value2_low);\n        division_result5 = perform_unsigned_division_0800016c((int)division_result5,(int)((ulonglong)division_result5 >> 0x20),0x55555555,0x3fc55555);\n        division_result5 = calculate_shifted_value_080004d0((int)division_result5,(int)((ulonglong)division_result5 >> 0x20),shifted_value1_low,shifted_value2_low);\n        shifted_value5 = calculate_shifted_value_080004d0(shifted_value1_low,shifted_value2_low,0xb12e9282,0x3fb3b8c5);\n        shifted_value5 = reverse_compute_08000168((int)shifted_value5,(int)((ulonglong)shifted_value5 >> 0x20),0x1b8d0159,0x3fe6066c);\n        shifted_value5 = calculate_shifted_value_080004d0((int)shifted_value5,(int)((ulonglong)shifted_value5 >> 0x20),shifted_value1_low,shifted_value2_low);\n        shifted_value5 = perform_unsigned_division_0800016c((int)shifted_value5,(int)((ulonglong)shifted_value5 >> 0x20),0x9c598ac8,0x40002ae5);\n        shifted_value5 = calculate_shifted_value_080004d0((int)shifted_value5,(int)((ulonglong)shifted_value5 >> 0x20),shifted_value1_low,shifted_value2_low);\n        shifted_value5 = reverse_compute_08000168((int)shifted_value5,(int)((ulonglong)shifted_value5 >> 0x20),0x1c8a2d4b,0x40033a27);\n        shifted_value5 = calculate_shifted_value_080004d0((int)shifted_value5,(int)((ulonglong)shifted_value5 >> 0x20),shifted_value1_low,shifted_value2_low);\n        shifted_value5 = perform_unsigned_division_0800016c((int)shifted_value5,(int)((ulonglong)shifted_value5 >> 0x20),0,0x3ff00000);\n        division_result5 = calculate_double_08000724((int)division_result5,(int)((ulonglong)division_result5 >> 0x20),(int)shifted_value5,\n                              (int)((ulonglong)shifted_value5 >> 0x20));\n        division_result5 = calculate_shifted_value_080004d0((int)division_result5,(int)((ulonglong)division_result5 >> 0x20),input_1,input_2);\n        goto LAB_08005cba;\n      }\n      division_result5 = perform_unsigned_division_0800016c(input_1,input_2,0x8800759c,0x7e37e43c);\n      is_null_terminated = check_if_null_terminated_080009f0((int)division_result5,(int)((ulonglong)division_result5 >> 0x20),0,0x3ff00000);\n      if (is_null_terminated != 0) {\n        return result4;\n      }\n    }\n    result4 = FUNC_0800708c(input_1,input_2);\n    result4 = reverse_compute_08000168(0,0x3ff00000,(int)result4,(int)((ulonglong)result4 >> 0x20));\n    result4 = calculate_shifted_value_080004d0((int)result4,(int)((ulonglong)result4 >> 0x20),0,0x3fe00000);\n    shifted_value6_high = (undefined4)((ulonglong)result4 >> 0x20);\n    shifted_value1_low = (undefined4)result4;\n    result4 = calculate_shifted_value_080004d0(shifted_value1_low,shifted_value6_high,0xdfdf709,0x3f023de1);\n    result4 = perform_unsigned_division_0800016c((int)result4,(int)((ulonglong)result4 >> 0x20),0x7501b288,0x3f49efe0);\n    result4 = calculate_shifted_value_080004d0((int)result4,(int)((ulonglong)result4 >> 0x20),shifted_value1_low,shifted_value6_high);\n    result4 = reverse_compute_08000168((int)result4,(int)((ulonglong)result4 >> 0x20),0xb5688f3b,0x3fa48228);\n    result4 = calculate_shifted_value_080004d0((int)result4,(int)((ulonglong)result4 >> 0x20),shifted_value1_low,shifted_value6_high);\n    result4 = perform_unsigned_division_0800016c((int)result4,(int)((ulonglong)result4 >> 0x20),0xe884455,0x3fc9c155);\n    result4 = calculate_shifted_value_080004d0((int)result4,(int)((ulonglong)result4 >> 0x20),shifted_value1_low,shifted_value6_high);\n    result4 = reverse_compute_08000168((int)result4,(int)((ulonglong)result4 >> 0x20),0x3eb6f7d,0x3fd4d612);\n    result4 = calculate_shifted_value_080004d0((int)result4,(int)((ulonglong)result4 >> 0x20),shifted_value1_low,shifted_value6_high);\n    result4 = perform_unsigned_division_0800016c((int)result4,(int)((ulonglong)result4 >> 0x20),0x55555555,0x3fc55555);\n    result4 = calculate_shifted_value_080004d0((int)result4,(int)((ulonglong)result4 >> 0x20),shifted_value1_low,shifted_value6_high);\n    shifted_value6_low = (undefined4)((ulonglong)result4 >> 0x20);\n    division_result5 = calculate_shifted_value_080004d0(shifted_value1_low,shifted_value6_high,0xb12e9282,0x3fb3b8c5);\n    division_result5 = reverse_compute_08000168((int)division_result5,(int)((ulonglong)division_result5 >> 0x20),0x1b8d0159,0x3fe6066c);\n    division_result5 = calculate_shifted_value_080004d0((int)division_result5,(int)((ulonglong)division_result5 >> 0x20),shifted_value1_low,shifted_value6_high);\n    division_result5 = perform_unsigned_division_0800016c((int)division_result5,(int)((ulonglong)division_result5 >> 0x20),0x9c598ac8,0x40002ae5);\n    division_result5 = calculate_shifted_value_080004d0((int)division_result5,(int)((ulonglong)division_result5 >> 0x20),shifted_value1_low,shifted_value6_high);\n    division_result5 = reverse_compute_08000168((int)division_result5,(int)((ulonglong)division_result5 >> 0x20),0x1c8a2d4b,0x40033a27);\n    division_result5 = calculate_shifted_value_080004d0((int)division_result5,(int)((ulonglong)division_result5 >> 0x20),shifted_value1_low,shifted_value6_high);\n    division_result5 = perform_unsigned_division_0800016c((int)division_result5,(int)((ulonglong)division_result5 >> 0x20),0,0x3ff00000);\n    shifted_value3_high = (undefined4)((ulonglong)division_result5 >> 0x20);\n    shifted_value5 = calculate_division_08006c0c(shifted_value1_low,shifted_value6_high);\n    division_result_high = (undefined4)((ulonglong)shifted_value5 >> 0x20);\n    shifted_value2_low = (undefined4)shifted_value5;\n    if (uVar8 < 0x3fef3333) {\n      result4 = calculate_double_08000724((int)result4,shifted_value6_low,(int)division_result5,shifted_value3_high);\n      division_result5 = perform_unsigned_division_0800016c(shifted_value2_low,division_result_high,shifted_value2_low,division_result_high);\n      result4 = calculate_shifted_value_080004d0((int)result4,(int)((ulonglong)result4 >> 0x20),(int)division_result5,\n                           (int)((ulonglong)division_result5 >> 0x20));\n      division_result5 = calculate_shifted_value_080004d0(0,division_result_high,0,division_result_high);\n      division_result5 = reverse_compute_08000168(shifted_value1_low,shifted_value6_high,(int)division_result5,(int)((ulonglong)division_result5 >> 0x20));\n      shifted_value5 = perform_unsigned_division_0800016c(shifted_value2_low,division_result_high,0,division_result_high);\n      division_result5 = calculate_double_08000724((int)division_result5,(int)((ulonglong)division_result5 >> 0x20),(int)shifted_value5,\n                            (int)((ulonglong)shifted_value5 >> 0x20));\n      shifted_value1_low = (undefined4)((ulonglong)division_result5 >> 0x20);\n      division_result5 = perform_unsigned_division_0800016c((int)division_result5,shifted_value1_low,(int)division_result5,shifted_value1_low);\n      division_result5 = reverse_compute_08000168(0x33145c07,0x3c91a626,(int)division_result5,(int)((ulonglong)division_result5 >> 0x20));\n      result4 = reverse_compute_08000168((int)result4,(int)((ulonglong)result4 >> 0x20),(int)division_result5,\n                           (int)((ulonglong)division_result5 >> 0x20));\n      division_result5 = perform_unsigned_division_0800016c(0,division_result_high,0,division_result_high);\n      division_result5 = reverse_compute_08000168(0x54442d18,0x3fe921fb,(int)division_result5,(int)((ulonglong)division_result5 >> 0x20));\n      result4 = reverse_compute_08000168((int)result4,(int)((ulonglong)result4 >> 0x20),(int)division_result5,\n                           (int)((ulonglong)division_result5 >> 0x20));\n      shifted_value1_low = 0x3fe921fb;\n    }\n    else {\n      result4 = calculate_double_08000724((int)result4,shifted_value6_low,(int)division_result5,shifted_value3_high);\n      result4 = calculate_shifted_value_080004d0((int)result4,(int)((ulonglong)result4 >> 0x20),shifted_value2_low,division_result_high);\n      result4 = perform_unsigned_division_0800016c((int)result4,(int)((ulonglong)result4 >> 0x20),shifted_value2_low,division_result_high);\n      shifted_value1_low = (undefined4)((ulonglong)result4 >> 0x20);\n      result4 = perform_unsigned_division_0800016c((int)result4,shifted_value1_low,(int)result4,shifted_value1_low);\n      result4 = reverse_compute_08000168((int)result4,(int)((ulonglong)result4 >> 0x20),0x33145c07,0x3c91a626);\n      shifted_value1_low = 0x3ff921fb;\n    }\n    result4 = reverse_compute_08000168(0x54442d18,shifted_value1_low,(int)result4,(int)((ulonglong)result4 >> 0x20));\n    if ((int)input_2 < 1) {\n      result4 = CONCAT44((int)((ulonglong)result4 >> 0x20) + -0x80000000,(int)result4);\n    }\n  }\n  else {\n    if ((uVar8 + 0xc0100000 | input_1) != 0) {\n      result4 = reverse_compute_08000168(input_1,input_2,input_1,input_2);\n      shifted_value1_low = (undefined4)((ulonglong)result4 >> 0x20);\n      result4 = calculate_double_08000724((int)result4,shifted_value1_low,(int)result4,shifted_value1_low);\n      return result4;\n    }\n    result4 = calculate_shifted_value_080004d0(input_1,input_2,0x54442d18,0x3ff921fb);\n    division_result5 = calculate_shifted_value_080004d0(input_1,input_2,0x33145c07,0x3c91a626);\nLAB_08005cba:\n    result4 = perform_unsigned_division_0800016c((int)result4,(int)((ulonglong)result4 >> 0x20),(int)division_result5,\n                         (int)((ulonglong)division_result5 >> 0x20));\n  }\n  return result4;\n}\n\n",
            "renaming": {
                "FUN_08005c70": "calculate_result_08005c70",
                "param_1": "input_1",
                "param_2": "input_2",
                "iVar1": "is_null_terminated",
                "uVar2": "shifted_value6_high",
                "uVar3": "shifted_value6_low",
                "uVar4": "shifted_value3_high",
                "uVar5": "division_result_high",
                "uVar6": "shifted_value1_low",
                "uVar7": "shifted_value2_low",
                "uVar9": "result4",
                "uVar10": "division_result5",
                "uVar11": "shifted_value5"
            },
            "calling": [
                "FUN_08005854"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_0800016c",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006070": {
            "entrypoint": "0x08006070",
            "current_name": "calculate_result_08006070",
            "code": "\nundefined8 calculateResult_08006070(uint dividend,uint divisor,uint divisor_sign,uint dividend_sign)\n\n{\n  undefined4 result;\n  uint divisor_flag;\n  uint dividend_flag;\n  int difference;\n  uint dividend_abs;\n  undefined8 final_result;\n  undefined8 reverse_result;\n  \n  dividend_abs = dividend_sign & 0x7fffffff;\n  if ((0x7ff00000 < (dividend_abs | (-divisor_sign | divisor_sign) >> 0x1f)) ||\n     (dividend_flag = divisor & 0x7fffffff, 0x7ff00000 < (dividend_flag | (-dividend | dividend) >> 0x1f))) {\n    final_result = perform_unsigned_division_0800016c(dividend,divisor,divisor_sign,dividend_sign,dividend_sign);\n    return final_result;\n  }\n  if ((dividend_sign + 0xc0100000 | divisor_sign) == 0) {\n    final_result = perform_division_08006d68();\n    return final_result;\n  }\n  divisor_flag = (int)dividend_sign >> 0x1e & 2U | divisor >> 0x1f;\n  if ((dividend | dividend_flag) == 0) {\n    if (divisor_flag == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (divisor_flag != 3) {\n      return CONCAT44(divisor,dividend);\n    }\nLAB_0800613e:\n    final_result = 0xc00921fb54442d18;\n  }\n  else {\n    if ((divisor_sign | dividend_abs) != 0) {\n      if (dividend_abs == 0x7ff00000) {\n        if (dividend_flag == 0x7ff00000) {\n          if (divisor_flag == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (divisor_flag == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (divisor_flag != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (divisor_flag == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (divisor_flag != 3) {\n          if (divisor_flag != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (dividend_flag != 0x7ff00000) {\n        difference = (int)(dividend_flag - dividend_abs) >> 0x14;\n        if (difference < 0x3d) {\n          if (((int)dividend_sign < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n            final_result = 0;\n          }\n          else {\n            calculate_double_08000724(dividend,divisor);\n            FUNC_0800708c();\n            final_result = perform_division_08006d68();\n          }\n        }\n        else {\n          final_result = 0x3ff921fb54442d18;\n        }\n        difference = (int)((ulonglong)final_result >> 0x20);\n        result = (undefined4)final_result;\n        if (divisor_flag == 1) {\n          return CONCAT44(difference + -0x80000000,result);\n        }\n        if (divisor_flag == 2) {\n          reverse_result = reverse_compute_08000168(result,difference,0x33145c07,0x3ca1a626);\n          final_result = 0x400921fb54442d18;\n        }\n        else {\n          if (divisor_flag == 0) {\n            return final_result;\n          }\n          final_result = reverse_compute_08000168(result,difference,0x33145c07,0x3ca1a626);\n          reverse_result = 0x400921fb54442d18;\n        }\n        final_result = reverse_compute_08000168((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)reverse_result,\n                             (int)((ulonglong)reverse_result >> 0x20));\n        return final_result;\n      }\n    }\n    if ((int)divisor < 0) {\n      final_result = 0xbff921fb54442d18;\n    }\n    else {\n      final_result = 0x3ff921fb54442d18;\n    }\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_08006070": "calculate_result_08006070",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "divisor_sign",
                "param_4": "dividend_sign",
                "uVar1": "result",
                "uVar2": "divisor_flag",
                "uVar3": "dividend_flag",
                "iVar4": "difference",
                "uVar5": "dividend_abs",
                "uVar6": "final_result",
                "uVar7": "reverse_result"
            },
            "calling": [
                "thunk_FUN_08006070"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_08000724",
                "FUN_08006d68",
                "FUN_0800016c",
                "FUN_08000168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006228": {
            "entrypoint": "0x08006228",
            "current_name": "calculate_double_08006228",
            "code": "\nuint calculate_double_08006228(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 result1;\n  uint result2;\n  uint result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  undefined4 result7;\n  uint result8;\n  undefined4 result9;\n  int temp1;\n  int temp2;\n  undefined4 temp3;\n  uint temp4;\n  undefined4 temp5;\n  int temp6;\n  uint temp7;\n  undefined4 temp8;\n  undefined4 temp9;\n  undefined8 temp10;\n  undefined8 temp11;\n  undefined8 temp12;\n  undefined8 temp13;\n  longlong temp14;\n  ulonglong temp15;\n  undefined8 temp16;\n  uint flag;\n  undefined4 local_result1;\n  undefined4 local_result2;\n  int local_temp1;\n  \n  temp11 = CONCAT44(input2,input1);\n  temp7 = input4 & 0x7fffffff;\n  if ((temp7 | input3) == 0) {\n    return 0;\n  }\n  temp4 = input2 & 0x7fffffff;\n  if (temp4 < 0x7ff00001) {\n    if (temp4 == 0x7ff00000) {\n      if (input1 == 0) {\n        if (0x7ff00000 < temp7) goto LAB_08006278;\nLAB_08006262:\n        if ((temp7 != 0x7ff00000) || (input3 == 0)) {\n          if (-1 < (int)input2) goto LAB_0800632a;\n          if (temp7 < 0x43400000) {\n            if (temp7 < 0x3ff00000) {\nLAB_0800632a:\n              flag = 0;\n              goto LAB_080062ba;\n            }\n            temp1 = ((int)temp7 >> 0x14) + -0x3ff;\n            if (0x14 < temp1) {\n              result2 = input3 >> (0x34U - temp1 & 0xff);\n              if (input3 == result2 << (0x34U - temp1 & 0xff)) {\n                flag = 2 - (result2 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (input3 == 0) {\n              result2 = (int)temp7 >> (0x14U - temp1 & 0xff);\n              if (temp7 == result2 << (0x14U - temp1 & 0xff)) {\n                flag = 2 - (result2 & 1);\n              }\n              else {\n                flag = 0;\n              }\n              goto LAB_0800630c;\n            }\n            flag = 0;\n          }\n          else {\n            flag = 2;\nLAB_080062ba:\n            if (input3 == 0) {\n              if (temp7 == 0x7ff00000) {\n                if ((temp4 + 0xc0100000 | input1) == 0) {\n                  return 0;\n                }\n                if (0x3fefffff < temp4) {\n                  if ((int)input4 < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)input4) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (temp7 == 0x3ff00000) {\n                if (-1 < (int)input4) {\n                  return input1;\n                }\n                temp10 = 0x3ff0000000000000;\n                goto LAB_08006320;\n              }\n              if (input4 == 0x40000000) goto LAB_0800634a;\n              if ((input4 == 0x3fe00000) && (-1 < (int)input2)) {\n                temp7 = calculate_division_08006c0c(input1,input2);\n                return temp7;\n              }\n            }\n          }\n          temp10 = FUNC_0800708c(input1,input2);\n          temp8 = (undefined4)((ulonglong)temp10 >> 0x20);\n          result1 = (undefined4)temp10;\n          temp15 = CONCAT44(input2,result1) & 0x7fffffffffffffff;\n          if ((input1 == 0) && ((temp4 == 0 || ((input2 & 0x3fffffff) == 0x3ff00000)))) {\n            if ((int)input4 < 0) {\n              temp10 = calculate_double_08006228_08000724(0,0x3ff00000,result1,temp8);\n            }\n            if (-1 < (int)input2) {\n              return (uint)temp10;\n            }\n            if ((flag | temp4 + 0xc0100000) != 0) {\n              return (uint)temp10;\n            }\n          }\n          else {\n            result2 = 0xffffffff - ((int)input2 >> 0x1f);\n            temp10 = temp11;\n            if ((flag | result2) != 0) {\n              if (temp7 < 0x41e00001) {\n                local_temp1 = 0;\n                if (temp4 < 0x100000) {\n                  temp15 = calculate_shifted_value_080004d0();\n                  local_temp1 = -0x35;\n                }\n                temp7 = (uint)(temp15 >> 0x20);\n                result1 = (undefined4)temp15;\n                local_temp1 = ((int)temp7 >> 0x14) + -0x3ff + local_temp1;\n                temp7 = temp7 & 0xfffff;\n                temp4 = temp7 | 0x3ff00000;\n                if (temp7 < 0x3988f) {\nLAB_08006628:\n                  temp1 = 0;\n                }\n                else {\n                  if (0xbb679 < temp7) {\n                    temp4 = temp4 - 0x100000;\n                    local_temp1 = local_temp1 + 1;\n                    goto LAB_08006628;\n                  }\n                  temp1 = 1;\n                }\n                temp2 = temp1 * 8;\n                temp3 = (&DAT_080073c0)[temp1 * 2];\n                temp5 = (&DAT_080073c4)[temp1 * 2];\n                temp11 = reverse_compute_08000168(result1,temp4,temp3,temp5);\n                temp9 = (undefined4)((ulonglong)temp11 >> 0x20);\n                temp10 = perform_unsigned_division_0800016c(result1,temp4,temp3,temp5);\n                temp10 = calculate_double_08006228_08000724(0,0x3ff00000,(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n                result4 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp12 = calculate_shifted_value_080004d0((int)temp11,temp9,(int)temp10,result4);\n                result5 = (undefined4)((ulonglong)temp12 >> 0x20);\n                temp8 = (undefined4)temp12;\n                temp12 = calculate_shifted_value_080004d0(0,result5);\n                temp11 = reverse_compute_08000168((int)temp11,temp9,(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp12 = reverse_compute_08000168(0,((int)temp4 >> 1 | 0x20000000U) + 0x80000 + temp1 * 0x40000,\n                                      temp3,temp5);\n                temp12 = reverse_compute_08000168(result1,temp4,(int)temp12,(int)((ulonglong)temp12 >> 0x20));\n                temp12 = calculate_shifted_value_080004d0((int)temp12,(int)((ulonglong)temp12 >> 0x20),0,result5);\n                temp11 = reverse_compute_08000168((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp11 = calculate_shifted_value_080004d0((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp10,result4\n                                     );\n                temp9 = (undefined4)((ulonglong)temp11 >> 0x20);\n                temp10 = calculate_shifted_value_080004d0(temp8,result5);\n                result4 = (undefined4)((ulonglong)temp10 >> 0x20);\n                result1 = (undefined4)temp10;\n                temp10 = calculate_shifted_value_080004d0(result1,result4,0x4a454eef,0x3fca7e28);\n                temp10 = perform_unsigned_division_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0x93c9db65,\n                                      0x3fcd864a);\n                temp10 = calculate_shifted_value_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),result1,result4);\n                temp10 = perform_unsigned_division_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xa91d4101,\n                                      0x3fd17460);\n                temp10 = calculate_shifted_value_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),result1,result4);\n                temp10 = perform_unsigned_division_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0x518f264d,\n                                      0x3fd55555);\n                temp10 = calculate_shifted_value_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),result1,result4);\n                temp10 = perform_unsigned_division_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xdb6fabff,\n                                      0x3fdb6db6);\n                temp10 = calculate_shifted_value_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),result1,result4);\n                temp10 = perform_unsigned_division_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0x33333303,\n                                      0x3fe33333);\n                temp12 = calculate_shifted_value_080004d0(result1,result4,result1,result4);\n                temp10 = calculate_shifted_value_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp12 = perform_unsigned_division_0800016c(temp8,result5,0,result5);\n                temp12 = calculate_shifted_value_080004d0((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp11,\n                                      temp9);\n                temp10 = perform_unsigned_division_0800016c((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp10,\n                                      (int)((ulonglong)temp10 >> 0x20));\n                result1 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp12 = calculate_shifted_value_080004d0(0,result5,0,result5);\n                result4 = (undefined4)((ulonglong)temp12 >> 0x20);\n                temp13 = perform_unsigned_division_0800016c((int)temp12,result4,0,0x40080000);\n                perform_unsigned_division_0800016c((int)temp13,(int)((ulonglong)temp13 >> 0x20),(int)temp10,result1);\n                temp13 = calculate_shifted_value_080004d0(0,result5,0,result6);\n                temp3 = (undefined4)((ulonglong)temp13 >> 0x20);\n                temp16 = reverse_compute_08000168(0,result6,0,0x40080000);\n                temp12 = reverse_compute_08000168((int)temp16,(int)((ulonglong)temp16 >> 0x20),(int)temp12,result4\n                                     );\n                temp10 = reverse_compute_08000168((int)temp10,result1,(int)temp12,(int)((ulonglong)temp12 >> 0x20)\n                                     );\n                temp10 = calculate_shifted_value_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp8,result5);\n                temp11 = calculate_shifted_value_080004d0((int)temp11,temp9,0,result6);\n                temp10 = perform_unsigned_division_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                                      (int)((ulonglong)temp11 >> 0x20));\n                result1 = (undefined4)((ulonglong)temp10 >> 0x20);\n                perform_unsigned_division_0800016c((int)temp13,temp3,(int)temp10,result1);\n                temp11 = calculate_shifted_value_080004d0(0,result7,0xe0000000,0x3feec709);\n                temp12 = reverse_compute_08000168(0,result7,(int)temp13,temp3);\n                temp10 = reverse_compute_08000168((int)temp10,result1,(int)temp12,(int)((ulonglong)temp12 >> 0x20)\n                                     );\n                temp10 = calculate_shifted_value_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xdc3a03fd,\n                                      0x3feec709);\n                temp12 = calculate_shifted_value_080004d0(0,result7,0x145b01f5,0xbe3e2fe0);\n                temp10 = perform_unsigned_division_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp10 = perform_unsigned_division_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),\n                                      *(undefined4 *)(&DAT_080073e0 + temp2),\n                                      *(undefined4 *)(&DAT_080073e4 + temp2));\n                temp12 = shift_and_concat_08000404(local_temp1);\n                result1 = (undefined4)((ulonglong)temp12 >> 0x20);\n                temp8 = *(undefined4 *)(&DAT_080073d0 + temp2);\n                temp9 = *(undefined4 *)(&DAT_080073d4 + temp2);\n                temp13 = perform_unsigned_division_0800016c((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp10,\n                                      (int)((ulonglong)temp10 >> 0x20));\n                temp13 = perform_unsigned_division_0800016c((int)temp13,(int)((ulonglong)temp13 >> 0x20),temp8,temp9);\n                perform_unsigned_division_0800016c((int)temp13,(int)((ulonglong)temp13 >> 0x20),(int)temp12,result1);\n                temp12 = reverse_compute_08000168(0,result8,(int)temp12,result1);\n                temp14 = reverse_compute_08000168((int)temp12,(int)((ulonglong)temp12 >> 0x20),temp8,temp9);\n                temp7 = result8;\n              }\n              else {\n                if (0x43f00000 < temp7) {\n                  if (temp4 < 0x3ff00000) goto LAB_080063fa;\nLAB_08006418:\n                  if ((int)input4 < 1) {\n                    return 0;\n                  }\nLAB_08006400:\n                  input1 = 0x8800759c;\n                  input2 = 0x7e37e43c;\n                  temp11 = 0x7e37e43c8800759c;\n                  goto LAB_0800634a;\n                }\n                if (temp4 < 0x3fefffff) {\nLAB_080063fa:\n                  if (-1 < (int)input4) {\n                    return 0;\n                  }\n                  goto LAB_08006400;\n                }\n                if (0x3ff00000 < temp4) goto LAB_08006418;\n                temp11 = reverse_compute_08000168(result1,temp8,0,0x3ff00000);\n                temp8 = (undefined4)((ulonglong)temp11 >> 0x20);\n                result1 = (undefined4)temp11;\n                temp11 = calculate_shifted_value_080004d0(result1,temp8,0x60000000,0x3ff71547);\n                temp10 = calculate_shifted_value_080004d0(result1,temp8,0xf85ddf44,0x3e54ae0b);\n                temp12 = calculate_shifted_value_080004d0(result1,temp8,0,0x3fd00000);\n                temp12 = reverse_compute_08000168(0x55555555,0x3fd55555,(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp12 = calculate_shifted_value_080004d0((int)temp12,(int)((ulonglong)temp12 >> 0x20),result1,temp8);\n                temp12 = reverse_compute_08000168(0,0x3fe00000,(int)temp12,(int)((ulonglong)temp12 >> 0x20));\n                temp13 = calculate_shifted_value_080004d0(result1,temp8,result1,temp8);\n                temp12 = calculate_shifted_value_080004d0((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp13,\n                                      (int)((ulonglong)temp13 >> 0x20));\n                temp12 = calculate_shifted_value_080004d0((int)temp12,(int)((ulonglong)temp12 >> 0x20),0x652b82fe,\n                                      0x3ff71547);\n                temp10 = reverse_compute_08000168((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                perform_unsigned_division_0800016c((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp10,\n                             (int)((ulonglong)temp10 >> 0x20));\n                temp14 = (ulonglong)result3 << 0x20;\n                temp7 = result3;\n              }\n              temp11 = reverse_compute_08000168((int)temp14,(int)((ulonglong)temp14 >> 0x20),(int)temp11,\n                                    (int)((ulonglong)temp11 >> 0x20));\n              temp11 = reverse_compute_08000168((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                                    (int)((ulonglong)temp11 >> 0x20));\n              if ((flag - 1 | result2) == 0) {\n                input2 = 0xbff00000;\n              }\n              else {\n                input2 = 0x3ff00000;\n              }\n              flag = 0;\n              temp10 = reverse_compute_08000168(input3,input4,0,input4);\n              temp10 = calculate_shifted_value_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),0,temp7);\n              temp11 = calculate_shifted_value_080004d0((int)temp11,(int)((ulonglong)temp11 >> 0x20),input3,input4);\n              temp11 = perform_unsigned_division_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                                    (int)((ulonglong)temp11 >> 0x20));\n              temp9 = (undefined4)((ulonglong)temp11 >> 0x20);\n              result1 = (undefined4)temp11;\n              temp11 = calculate_shifted_value_080004d0(0,temp7,0,input4);\n              result4 = (undefined4)((ulonglong)temp11 >> 0x20);\n              temp8 = (undefined4)temp11;\n              temp14 = perform_unsigned_division_0800016c(result1,temp9,temp8,result4);\n              temp4 = (uint)((ulonglong)temp14 >> 0x20);\n              temp7 = (uint)temp14;\n              if (0x408fffffffffffff < temp14) {\n                if ((temp4 + 0xbf700000 | temp7) == 0) {\n                  temp10 = perform_unsigned_division_0800016c(result1,temp9,0x652b82fe,0x3c971547);\n                  temp12 = reverse_compute_08000168(temp7,temp4,temp8,result4);\n                  temp1 = check_if_null_terminated_080009f0((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp12,\n                                       (int)((ulonglong)temp12 >> 0x20));\n                  if (temp1 == 0) goto LAB_08006968;\n                }\n                temp11 = calculate_shifted_value_080004d0(0,input2,0x8800759c,0x7e37e43c);\n                input1 = 0x8800759c;\n                input2 = 0x7e37e43c;\n                goto LAB_0800634a;\n              }\n              if ((temp4 & 0x7fffffff) < 0x4090cc00) {\nLAB_08006968:\n                if ((temp4 & 0x7fffffff) < 0x3fe00001) {\n                  temp1 = 0;\n                }\n                else {\n                  temp4 = (0x100000 >> (((int)(temp4 & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          temp4;\n                  temp7 = (temp4 * 2 >> 0x15) - 0x3ff;\n                  temp1 = (int)(temp4 & 0xfffff | 0x100000) >> (0x14 - temp7 & 0xff);\n                  if (temp14 < 0) {\n                    temp1 = -temp1;\n                  }\n                  temp11 = reverse_compute_08000168(temp8,result4,0,temp4 & ~(0xfffff >> (temp7 & 0xff)));\n                }\n                local_result2 = (undefined4)((ulonglong)temp11 >> 0x20);\n                local_result1 = (undefined4)temp11;\n                perform_unsigned_division_0800016c(local_result1,local_result2,result1,temp9);\n                temp11 = calculate_shifted_value_080004d0(0,result9,0,0x3fe62e43);\n                temp8 = (undefined4)((ulonglong)temp11 >> 0x20);\n                temp10 = reverse_compute_08000168(0,result9,local_result1,local_result2);\n                temp10 = reverse_compute_08000168(result1,temp9,(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n                temp10 = calculate_shifted_value_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xfefa39ef,\n                                      0x3fe62e42);\n                temp12 = calculate_shifted_value_080004d0(0,result9,0xca86c39,0xbe205c61);\n                temp10 = perform_unsigned_division_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp9 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp12 = perform_unsigned_division_0800016c((int)temp11,temp8,(int)temp10,temp9);\n                result4 = (undefined4)((ulonglong)temp12 >> 0x20);\n                result1 = (undefined4)temp12;\n                temp11 = reverse_compute_08000168(result1,result4,(int)temp11,temp8);\n                temp11 = reverse_compute_08000168((int)temp10,temp9,(int)temp11,\n                                      (int)((ulonglong)temp11 >> 0x20));\n                temp9 = (undefined4)((ulonglong)temp11 >> 0x20);\n                temp10 = calculate_shifted_value_080004d0(result1,result4,result1,result4);\n                result5 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp8 = (undefined4)temp10;\n                temp10 = calculate_shifted_value_080004d0(temp8,result5,0x72bea4d0,0x3e663769);\n                temp10 = reverse_compute_08000168((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xc5d26bf1,\n                                      0x3ebbbd41);\n                temp10 = calculate_shifted_value_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp8,result5);\n                temp10 = perform_unsigned_division_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xaf25de2c,\n                                      0x3f11566a);\n                temp10 = calculate_shifted_value_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp8,result5);\n                temp10 = reverse_compute_08000168((int)temp10,(int)((ulonglong)temp10 >> 0x20),0x16bebd93,\n                                      0x3f66c16c);\n                temp10 = calculate_shifted_value_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp8,result5);\n                temp10 = perform_unsigned_division_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0x5555553e,\n                                      0x3fc55555);\n                temp10 = calculate_shifted_value_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp8,result5);\n                temp10 = reverse_compute_08000168(result1,result4,(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n                temp8 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp12 = calculate_shifted_value_080004d0(result1,result4,(int)temp10,temp8);\n                temp10 = reverse_compute_08000168((int)temp10,temp8,0,0x40000000);\n                temp10 = calculate_double_08006228_08000724((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp10,\n                                      (int)((ulonglong)temp10 >> 0x20));\n                temp12 = calculate_shifted_value_080004d0(result1,result4,(int)temp11,temp9);\n                temp11 = perform_unsigned_division_0800016c((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp11,\n                                      temp9);\n                temp11 = reverse_compute_08000168((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                                      (int)((ulonglong)temp11 >> 0x20));\n                temp11 = reverse_compute_08000168((int)temp11,(int)((ulonglong)temp11 >> 0x20),result1,result4);\n                temp10 = reverse_compute_08000168(0,0x3ff00000,(int)temp11,(int)((ulonglong)temp11 >> 0x20));\n                temp2 = (int)((ulonglong)temp10 >> 0x20);\n                temp6 = temp2 + temp1 * 0x100000;\n                temp11 = CONCAT44(temp6,(int)temp10);\n                input1 = flag;\n                if (temp6 < 0x100000) {\n                  temp11 = calculate_shifted_value_080071c0((int)temp10,temp2,temp1);\n                }\n              }\n              else {\n                if ((temp4 + 0x3f6f3400 | temp7) == 0) {\n                  temp10 = reverse_compute_08000168(temp7,temp4,temp8,result4);\n                  temp1 = check_parameters_080009c8(result1,temp9,(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n                  if (temp1 == 0) goto LAB_08006968;\n                }\n                temp11 = calculate_shifted_value_080004d0(0,input2,0xc2f8f359,0x1a56e1f);\n                input1 = 0xc2f8f359;\n                input2 = 0x1a56e1f;\n              }\nLAB_0800634a:\n              temp7 = calculate_shifted_value_080004d0((int)temp11,(int)((ulonglong)temp11 >> 0x20),input1,input2);\n              return temp7;\n            }\n          }\n          result1 = (undefined4)((ulonglong)temp10 >> 0x20);\n          temp10 = reverse_compute_08000168((int)temp10,result1,(int)temp10,result1);\n          temp11 = temp10;\nLAB_08006320:\n          temp7 = calculate_double_08006228_08000724((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                                (int)((ulonglong)temp11 >> 0x20));\n          return temp7;\n        }\n      }\n    }\n    else if (temp7 < 0x7ff00001) goto LAB_08006262;\n  }\n  if ((temp4 + 0xc0100000 | input1) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  temp7 = get_infinity_080070a4(&DAT_0800737e);\n  return temp7;\n}\n\n",
            "renaming": {
                "FUN_08006228": "calculate_double_08006228",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar2": "result2",
                "extraout_r1": "result3",
                "uVar3": "result4",
                "uVar4": "result5",
                "extraout_r1_00": "result6",
                "extraout_r1_01": "result7",
                "extraout_r1_02": "result8",
                "extraout_r1_03": "result9",
                "iVar5": "temp1",
                "iVar6": "temp2",
                "uVar7": "temp3",
                "uVar8": "temp4",
                "uVar9": "temp5",
                "iVar10": "temp6",
                "uVar11": "temp7",
                "uVar12": "temp8",
                "uVar13": "temp9",
                "uVar14": "temp10",
                "uVar15": "temp11",
                "uVar16": "temp12",
                "uVar17": "temp13",
                "lVar18": "temp14",
                "uVar19": "temp15",
                "uVar20": "temp16",
                "local_70": "flag",
                "local_68": "local_result1",
                "local_64": "local_result2",
                "local_54": "local_temp1"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000404",
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_080071c0",
                "FUN_0800016c",
                "FUN_080070a4",
                "FUN_080009c8",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c0c": {
            "entrypoint": "0x08006c0c",
            "current_name": "calculate_division_08006c0c",
            "code": "\nundefined8 calculate_division_08006c0c(uint dividend,uint divisor)\n\n{\n  undefined4 remainder;\n  uint shiftCount;\n  int exponent;\n  int temp;\n  uint quotient;\n  uint temp2;\n  int dividendPart1;\n  uint dividendPart2;\n  uint divisorPart1;\n  int divisorPart2;\n  uint temp3;\n  undefined8 result;\n  \n  if ((~divisor & 0x7ff00000) == 0) {\n    result = calculate_shifted_value_080004d0(dividend,divisor,dividend,divisor);\n    result = perform_unsigned_division_0800016c(dividend,divisor,(int)result,(int)((ulonglong)result >> 0x20));\n    return result;\n  }\n  if ((int)divisor < 1) {\n    if ((divisor & 0x7fffffff | dividend) == 0) {\n      return CONCAT44(divisor,dividend);\n    }\n    if (divisor != 0) {\n      result = reverse_compute_08000168(dividend,divisor,dividend,divisor);\n      remainder = (undefined4)((ulonglong)result >> 0x20);\n      result = calculate_double_08000724((int)result,remainder,(int)result,remainder);\n      return result;\n    }\n  }\n  exponent = (int)divisor >> 0x14;\n  if (exponent == 0) {\n    while (divisor == 0) {\n      exponent = exponent + -0x15;\n      divisor = dividend >> 0xb;\n      dividend = dividend << 0x15;\n    }\n    shiftCount = 0;\n    for (; -1 < (int)(divisor << 0xb); divisor = divisor << 1) {\n      shiftCount = shiftCount + 1;\n    }\n    exponent = exponent - (shiftCount - 1);\n    divisor = divisor | dividend >> (0x20 - shiftCount & 0xff);\n    dividend = dividend << (shiftCount & 0xff);\n  }\n  dividendPart1 = 0;\n  shiftCount = divisor & 0xfffff | 0x100000;\n  if ((exponent + -0x3ff) * -0x80000000 < 0) {\n    shiftCount = shiftCount * 2 - ((int)dividend >> 0x1f);\n    dividend = dividend << 1;\n  }\n  shiftCount = shiftCount * 2 - ((int)dividend >> 0x1f);\n  temp = 0x16;\n  quotient = 0;\n  dividendPart2 = 0x200000;\n  dividend = dividend << 1;\n  do {\n    divisorPart2 = quotient + dividendPart2;\n    if (divisorPart2 <= (int)shiftCount) {\n      shiftCount = shiftCount - divisorPart2;\n      quotient = divisorPart2 + dividendPart2;\n      dividendPart1 = dividendPart1 + dividendPart2;\n    }\n    temp = temp + -1;\n    shiftCount = shiftCount * 2 - ((int)dividend >> 0x1f);\n    dividendPart2 = dividendPart2 >> 1;\n    dividend = dividend << 1;\n  } while (temp != 0);\n  divisorPart2 = 0x20;\n  divisorPart1 = 0x80000000;\n  dividendPart2 = 0;\n  temp = 0;\n  do {\n    temp3 = divisorPart1 + temp;\n    temp2 = quotient;\n    if (((int)quotient < (int)shiftCount) || ((shiftCount == quotient && (temp3 <= dividend)))) {\n      temp = temp3 + divisorPart1;\n      if (((int)temp3 < 0) && (-1 < temp)) {\n        temp2 = quotient + 1;\n      }\n      shiftCount = shiftCount - quotient;\n      if (dividend < temp3) {\n        shiftCount = shiftCount - 1;\n      }\n      dividend = dividend - temp3;\n      dividendPart2 = dividendPart2 + divisorPart1;\n    }\n    shiftCount = shiftCount * 2 - ((int)dividend >> 0x1f);\n    divisorPart2 = divisorPart2 + -1;\n    dividend = dividend << 1;\n    divisorPart1 = divisorPart1 >> 1;\n    quotient = temp2;\n  } while (divisorPart2 != 0);\n  if ((dividend | shiftCount) != 0) {\n    if (dividendPart2 == 0xffffffff) {\n      dividendPart1 = dividendPart1 + 1;\n      dividendPart2 = 0;\n    }\n    else {\n      dividendPart2 = dividendPart2 + 1 & 0xfffffffe;\n    }\n  }\n  dividendPart2 = dividendPart2 >> 1;\n  if (dividendPart1 << 0x1f < 0) {\n    dividendPart2 = dividendPart2 | 0x80000000;\n  }\n  return CONCAT44((dividendPart1 >> 1) + 0x3fe00000 + (exponent + -0x3ff >> 1) * 0x100000,dividendPart2);\n}\n\n",
            "renaming": {
                "FUN_08006c0c": "calculate_division_08006c0c",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "remainder",
                "uVar2": "shiftCount",
                "iVar3": "exponent",
                "iVar4": "temp",
                "uVar5": "quotient",
                "uVar6": "temp2",
                "iVar7": "dividendPart1",
                "uVar8": "dividendPart2",
                "uVar9": "divisorPart1",
                "iVar10": "divisorPart2",
                "uVar11": "temp3",
                "uVar12": "result"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005c70",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800016c",
                "FUN_08000168",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d68": {
            "entrypoint": "0x08006d68",
            "current_name": "perform_division_08006d68",
            "code": "\nundefined8 performDivision_08006d68(int dividend,uint divisor,undefined4 param_3,undefined4 param_4)\n\n{\n  int result;\n  undefined4 quotientLow;\n  undefined4 quotientHigh;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  undefined4 tempVar4;\n  uint absDivisor;\n  undefined8 result64;\n  undefined8 tempNum;\n  \n  result64 = CONCAT44(divisor,dividend);\n  absDivisor = divisor & 0x7fffffff;\n  if (absDivisor < 0x44100000) {\n    if (absDivisor < 0x3fdc0000) {\n      if (absDivisor < 0x3e200000) {\n        tempNum = perform_unsigned_division_0800016c(dividend,divisor,0x8800759c,0x7e37e43c,param_4);\n        result = check_if_null_terminated_080009f0((int)tempNum,(int)((ulonglong)tempNum >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return result64;\n        }\n      }\n      result = -1;\n    }\n    else {\n      result64 = FUNC_0800708c();\n      quotientHigh = (undefined4)((ulonglong)result64 >> 0x20);\n      quotientLow = (undefined4)result64;\n      if (absDivisor < 0x3ff30000) {\n        if (absDivisor < 0x3fe60000) {\n          result64 = perform_unsigned_division_0800016c(quotientLow,quotientHigh,quotientLow,quotientHigh);\n          result64 = reverse_compute_08000168((int)result64,(int)((ulonglong)result64 >> 0x20),0,0x3ff00000);\n          tempNum = perform_unsigned_division_0800016c(quotientLow,quotientHigh,0,0x40000000);\n          result64 = calculate_double_08000724((int)result64,(int)((ulonglong)result64 >> 0x20),(int)tempNum,\n                               (int)((ulonglong)tempNum >> 0x20));\n          result = 0;\n        }\n        else {\n          result64 = reverse_compute_08000168(quotientLow,quotientHigh,0,0x3ff00000);\n          tempNum = perform_unsigned_division_0800016c(quotientLow,quotientHigh,0,0x3ff00000);\n          result64 = calculate_double_08000724((int)result64,(int)((ulonglong)result64 >> 0x20),(int)tempNum,\n                               (int)((ulonglong)tempNum >> 0x20));\n          result = 1;\n        }\n      }\n      else if (absDivisor < 0x40038000) {\n        result64 = reverse_compute_08000168(quotientLow,quotientHigh,0,0x3ff80000);\n        tempNum = calculate_shifted_value_080004d0(quotientLow,quotientHigh,0,0x3ff80000);\n        tempNum = perform_unsigned_division_0800016c((int)tempNum,(int)((ulonglong)tempNum >> 0x20),0,0x3ff00000);\n        result64 = calculate_double_08000724((int)result64,(int)((ulonglong)result64 >> 0x20),(int)tempNum,\n                             (int)((ulonglong)tempNum >> 0x20));\n        result = 2;\n      }\n      else {\n        result64 = calculate_double_08000724(0,0xbff00000,quotientLow,quotientHigh);\n        result = 3;\n      }\n    }\n    tempVar4 = (undefined4)((ulonglong)result64 >> 0x20);\n    tempVar3 = (undefined4)result64;\n    result64 = calculate_shifted_value_080004d0(tempVar3,tempVar4,tempVar3,tempVar4);\n    tempVar1 = (undefined4)((ulonglong)result64 >> 0x20);\n    quotientLow = (undefined4)result64;\n    result64 = calculate_shifted_value_080004d0(quotientLow,tempVar1,quotientLow,tempVar1);\n    tempVar2 = (undefined4)((ulonglong)result64 >> 0x20);\n    quotientHigh = (undefined4)result64;\n    result64 = calculate_shifted_value_080004d0(quotientHigh,tempVar2,0xe322da11,0x3f90ad3a);\n    result64 = perform_unsigned_division_0800016c((int)result64,(int)((ulonglong)result64 >> 0x20),0x24760deb,0x3fa97b4b);\n    result64 = calculate_shifted_value_080004d0((int)result64,(int)((ulonglong)result64 >> 0x20),quotientHigh,tempVar2);\n    result64 = perform_unsigned_division_0800016c((int)result64,(int)((ulonglong)result64 >> 0x20),0xa0d03d51,0x3fb10d66);\n    result64 = calculate_shifted_value_080004d0((int)result64,(int)((ulonglong)result64 >> 0x20),quotientHigh,tempVar2);\n    result64 = perform_unsigned_division_0800016c((int)result64,(int)((ulonglong)result64 >> 0x20),0xc54c206e,0x3fb745cd);\n    result64 = calculate_shifted_value_080004d0((int)result64,(int)((ulonglong)result64 >> 0x20),quotientHigh,tempVar2);\n    result64 = perform_unsigned_division_0800016c((int)result64,(int)((ulonglong)result64 >> 0x20),0x920083ff,0x3fc24924);\n    result64 = calculate_shifted_value_080004d0((int)result64,(int)((ulonglong)result64 >> 0x20),quotientHigh,tempVar2);\n    result64 = perform_unsigned_division_0800016c((int)result64,(int)((ulonglong)result64 >> 0x20),0x5555550d,0x3fd55555);\n    result64 = calculate_shifted_value_080004d0((int)result64,(int)((ulonglong)result64 >> 0x20),quotientLow,tempVar1);\n    quotientLow = (undefined4)((ulonglong)result64 >> 0x20);\n    tempNum = calculate_shifted_value_080004d0(quotientHigh,tempVar2,0x2c6a6c2f,0xbfa2b444);\n    tempNum = reverse_compute_08000168((int)tempNum,(int)((ulonglong)tempNum >> 0x20),0x52defd9a,0x3fadde2d);\n    tempNum = calculate_shifted_value_080004d0((int)tempNum,(int)((ulonglong)tempNum >> 0x20),quotientHigh,tempVar2);\n    tempNum = reverse_compute_08000168((int)tempNum,(int)((ulonglong)tempNum >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    tempNum = calculate_shifted_value_080004d0((int)tempNum,(int)((ulonglong)tempNum >> 0x20),quotientHigh,tempVar2);\n    tempNum = reverse_compute_08000168((int)tempNum,(int)((ulonglong)tempNum >> 0x20),0xfe231671,0x3fbc71c6);\n    tempNum = calculate_shifted_value_080004d0((int)tempNum,(int)((ulonglong)tempNum >> 0x20),quotientHigh,tempVar2);\n    tempNum = reverse_compute_08000168((int)tempNum,(int)((ulonglong)tempNum >> 0x20),0x9998ebc4,0x3fc99999);\n    tempNum = calculate_shifted_value_080004d0((int)tempNum,(int)((ulonglong)tempNum >> 0x20),quotientHigh,tempVar2);\n    quotientHigh = (undefined4)((ulonglong)tempNum >> 0x20);\n    if (result == -1) {\n      result64 = perform_unsigned_division_0800016c((int)result64,quotientLow,(int)tempNum,quotientHigh);\n      result64 = calculate_shifted_value_080004d0((int)result64,(int)((ulonglong)result64 >> 0x20),tempVar3,tempVar4);\n      result64 = reverse_compute_08000168(tempVar3,tempVar4,(int)result64,(int)((ulonglong)result64 >> 0x20));\n    }\n    else {\n      result64 = perform_unsigned_division_0800016c((int)result64,quotientLow,(int)tempNum,quotientHigh);\n      result64 = calculate_shifted_value_080004d0((int)result64,(int)((ulonglong)result64 >> 0x20),tempVar3,tempVar4);\n      result = result * 8;\n      result64 = reverse_compute_08000168((int)result64,(int)((ulonglong)result64 >> 0x20),\n                           *(undefined4 *)(&UNK_08007410 + result),\n                           *(undefined4 *)(&UNK_08007414 + result));\n      result64 = reverse_compute_08000168((int)result64,(int)((ulonglong)result64 >> 0x20),tempVar3,tempVar4);\n      result64 = reverse_compute_08000168(*(undefined4 *)(&UNK_080073f0 + result),\n                           *(undefined4 *)(&UNK_080073f4 + result),(int)result64,\n                           (int)((ulonglong)result64 >> 0x20));\n      if ((int)divisor < 0) {\n        result64 = CONCAT44((int)((ulonglong)result64 >> 0x20) + -0x80000000,(int)result64);\n      }\n    }\n  }\n  else if ((absDivisor < 0x7ff00001) && ((absDivisor != 0x7ff00000 || (dividend == 0)))) {\n    if ((int)divisor < 1) {\n      result64 = 0xbff921fb54442d18;\n    }\n    else {\n      result64 = 0x3ff921fb54442d18;\n    }\n  }\n  else {\n    result64 = perform_unsigned_division_0800016c(dividend,divisor,dividend,divisor,param_4);\n  }\n  return result64;\n}\n\n",
            "renaming": {
                "FUN_08006d68": "perform_division_08006d68",
                "param_1": "dividend",
                "param_2": "divisor",
                "iVar1": "result",
                "uVar2": "quotientLow",
                "uVar3": "quotientHigh",
                "uVar4": "tempVar1",
                "uVar5": "tempVar2",
                "uVar6": "tempVar3",
                "uVar7": "tempVar4",
                "uVar8": "absDivisor",
                "uVar9": "result64",
                "uVar10": "tempNum"
            },
            "calling": [
                "FUN_08006070"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_0800016c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800708c": {
            "entrypoint": "0x0800708c",
            "current_name": "FUNC_0800708c",
            "code": "\nvoid FUNC_0800708c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800708c": "FUNC_0800708c"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007092": {
            "entrypoint": "0x08007092",
            "current_name": "extract_bit_08007092",
            "code": "\nuint extract_bit_08007092(undefined4 value,uint shifted_result)\n\n{\n  return (shifted_result | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_08007092": "extract_bit_08007092",
                "param_1": "value",
                "param_2": "shifted_result"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800709e": {
            "entrypoint": "0x0800709e",
            "current_name": "initialize_0800709e",
            "code": "\nundefined4 initialize_0800709e(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800709e": "initialize_0800709e"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070a4": {
            "entrypoint": "0x080070a4",
            "current_name": "get_infinity_080070a4",
            "code": "\nundefined8 getInfinity_080070a4(void)\n\n{\n  return 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080070a4": "get_infinity_080070a4"
            },
            "calling": [
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070b0": {
            "entrypoint": "0x080070b0",
            "current_name": "perform_computation_080070b0",
            "code": "\nundefined8 perform_computation_080070b0(uint input_num_1,uint input_num_2,undefined4 input_param)\n\n{\n  int index_var;\n  undefined4 data_var_1;\n  uint modified_num_2;\n  undefined4 data_var_2;\n  uint modified_num;\n  uint shift_amount;\n  uint mask;\n  undefined8 result;\n  \n  mask = (input_num_2 << 1) >> 0x15;\n  shift_amount = mask - 0x3ff;\n  modified_num_2 = input_num_2;\n  if ((int)shift_amount < 0x14) {\n    if ((int)shift_amount < 0) {\n      if ((input_num_2 & 0x7fffffff | input_num_1) == 0) {\n        return CONCAT44(input_num_2,input_num_1);\n      }\n      modified_num_2 = input_num_2 & 0xfffff | input_num_1;\n      index_var = ((int)input_num_2 >> 0x1f) * -8;\n      data_var_1 = *(undefined4 *)(&DAT_08007430 + index_var);\n      data_var_2 = *(undefined4 *)(&DAT_08007434 + index_var);\n      result = perform_unsigned_division_0800016c(input_num_1,(-modified_num_2 | modified_num_2) >> 0xc & 0x80000 | input_num_2 & 0xfffe0000,data_var_1,\n                           data_var_2,input_num_1,input_num_2,input_param);\n      result = reverse_compute_08000168((int)result,(int)((ulonglong)result >> 0x20),data_var_1,data_var_2);\n      return CONCAT44((uint)((ulonglong)result >> 0x20) & 0x7fffffff | input_num_2 & 0x80000000,\n                      (int)result);\n    }\n    mask = 0xfffff >> (shift_amount & 0xff);\n    if ((input_num_2 & mask | input_num_1) == 0) {\n      return CONCAT44(input_num_2,input_num_1);\n    }\n    mask = mask >> 1;\n    modified_num = input_num_2 & mask | input_num_1;\n    if (modified_num != 0) {\n      if (shift_amount == 0x13) {\n        modified_num = 0x80000000;\n      }\n      else {\n        modified_num = 0;\n      }\n      modified_num_2 = 0x40000 >> (shift_amount & 0xff) | input_num_2 & ~mask;\n    }\n  }\n  else {\n    if (0x33 < (int)shift_amount) {\n      if (shift_amount != 0x400) {\n        return CONCAT44(input_num_2,input_num_1);\n      }\n      result = perform_unsigned_division_0800016c();\n      return result;\n    }\n    mask = mask - 0x413;\n    shift_amount = 0xffffffff >> (mask & 0xff);\n    if ((input_num_1 & shift_amount) == 0) {\n      return CONCAT44(input_num_2,input_num_1);\n    }\n    shift_amount = shift_amount >> 1;\n    modified_num = input_num_1;\n    if ((input_num_1 & shift_amount) != 0) {\n      modified_num = 0x40000000 >> (mask & 0xff) | input_num_1 & ~shift_amount;\n    }\n  }\n  index_var = ((int)input_num_2 >> 0x1f) * -8;\n  data_var_1 = *(undefined4 *)(&DAT_08007430 + index_var);\n  data_var_2 = *(undefined4 *)(&DAT_08007434 + index_var);\n  result = perform_unsigned_division_0800016c(modified_num,modified_num_2,data_var_1,data_var_2,input_num_1,input_num_2,input_param);\n  result = reverse_compute_08000168((int)result,(int)((ulonglong)result >> 0x20),data_var_1,data_var_2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080070b0": "perform_computation_080070b0",
                "param_1": "input_num_1",
                "param_2": "input_num_2",
                "param_3": "input_param",
                "iVar1": "index_var",
                "uVar2": "data_var_1",
                "uVar3": "modified_num_2",
                "uVar4": "data_var_2",
                "uVar5": "modified_num",
                "uVar6": "shift_amount",
                "uVar7": "mask",
                "uVar8": "result"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_0800016c",
                "FUN_08000168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071c0": {
            "entrypoint": "0x080071c0",
            "current_name": "calculate_shifted_value_080071c0",
            "code": "\nundefined8 calculate_shifted_value_080071c0(uint input_value_1,uint input_value_2,int shift_amount,undefined4 config_value)\n\n{\n  uint shifted_value;\n  undefined4 temp_var_1;\n  int temp_var_2;\n  undefined4 temp_var_3;\n  uint upper_bits;\n  undefined8 result;\n  \n  result = CONCAT44(input_value_2,input_value_1);\n  shifted_value = (input_value_2 << 1) >> 0x15;\n  if (shifted_value == 0) {\n    if ((input_value_2 & 0x7fffffff | input_value_1) == 0) {\n      return result;\n    }\n    result = calculate_shifted_value_080071c0_080004d0(input_value_1,input_value_2,0,0x43500000);\n    if (-0xc351 < shift_amount) {\n      shifted_value = ((uint)((int)((ulonglong)result >> 0x20) << 1) >> 0x15) - 0x36;\n      goto LAB_08007210;\n    }\nLAB_080071ec:\n    temp_var_1 = 0xc2f8f359;\n    temp_var_3 = 0x1a56e1f;\n  }\n  else {\n    if (shifted_value == 0x7ff) {\n      result = perform_unsigned_division_0800016c(input_value_1,input_value_2,input_value_1,input_value_2,config_value);\n      return result;\n    }\nLAB_08007210:\n    upper_bits = (uint)((ulonglong)result >> 0x20);\n    temp_var_1 = (undefined4)result;\n    temp_var_2 = shifted_value + shift_amount;\n    if (temp_var_2 < 0x7ff) {\n      if (0 < temp_var_2) {\n        return CONCAT44(upper_bits & 0x800fffff | temp_var_2 * 0x100000,temp_var_1);\n      }\n      if (temp_var_2 + 0x35 < 0 == SCARRY4(temp_var_2,0x35)) {\n        result = CONCAT44(upper_bits & 0x800fffff | (temp_var_2 + 0x36) * 0x100000,temp_var_1);\n        temp_var_1 = 0;\n        temp_var_3 = 0x3c900000;\n        goto LAB_0800722e;\n      }\n      if (shift_amount < 0xc351) {\n        result = FUNC_0800729c(0xc2f8f359,0x1a56e1f,temp_var_1,upper_bits);\n        goto LAB_080071ec;\n      }\n    }\n    result = FUNC_0800729c(0x8800759c,0x7e37e43c,temp_var_1,upper_bits);\n    temp_var_1 = 0x8800759c;\n    temp_var_3 = 0x7e37e43c;\n  }\nLAB_0800722e:\n  result = calculate_shifted_value_080071c0_080004d0((int)result,(int)((ulonglong)result >> 0x20),temp_var_1,temp_var_3);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080071c0": "calculate_shifted_value_080071c0",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "shift_amount",
                "param_4": "config_value",
                "uVar1": "shifted_value",
                "uVar2": "temp_var_1",
                "iVar3": "temp_var_2",
                "uVar4": "temp_var_3",
                "uVar5": "upper_bits",
                "uVar6": "result"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_0800016c",
                "FUN_0800729c",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800729c": {
            "entrypoint": "0x0800729c",
            "current_name": "FUNC_0800729c",
            "code": "\nvoid FUNC_0800729c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800729c": "FUNC_0800729c"
            },
            "calling": [
                "FUN_080071c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072ac": {
            "entrypoint": "0x080072ac",
            "current_name": "get_data_080072ac",
            "code": "\nundefined4 get_data_080072ac(void)\n\n{\n  return DAT_200001c0;\n}\n\n",
            "renaming": {
                "FUN_080072ac": "get_data_080072ac"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072b8": {
            "entrypoint": "0x080072b8",
            "current_name": "update_pointer_080072b8",
            "code": "\nvoid updatePointer_080072b8(int valueToAdd)\n\n{\n  if (DAT_200002b4 == (undefined *)0x0) {\n    DAT_200002b4 = &DAT_200016a0;\n  }\n  DAT_200002b4 = DAT_200002b4 + valueToAdd;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072b8": "update_pointer_080072b8",
                "param_1": "valueToAdd"
            },
            "calling": [
                "FUN_0800581c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d4": {
            "entrypoint": "0x080072d4",
            "current_name": "FUNC_080072d4",
            "code": "\nvoid FUNC_080072d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d4": "FUNC_080072d4"
            },
            "calling": [
                "FUN_08004fb4",
                "FUN_08000110",
                "FUN_08000134"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072e0": {
            "entrypoint": "0x080072e0",
            "current_name": "FUNC_080072e0",
            "code": "\nvoid FUNC_080072e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072e0": "FUNC_080072e0"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 152477,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000150",
            "FUN_08000168",
            "FUN_0800016c",
            "FUN_08000404",
            "FUN_08000428",
            "FUN_080006ac",
            "FUN_08000892",
            "FUN_08000904",
            "FUN_08000a04",
            "FUN_08000a30",
            "FUN_08000ad8",
            "FUN_08000adc",
            "FUN_08000c3c",
            "FUN_08000c44",
            "FUN_08000cec",
            "FUN_08000e54",
            "FUN_08000f9c",
            "FUN_08001078",
            "FUN_080010c4",
            "FUN_0800114c",
            "FUN_0800115c",
            "FUN_08001170",
            "FUN_08001194",
            "FUN_080011fc",
            "FUN_08001214",
            "FUN_08001240",
            "FUN_08001264",
            "FUN_08001424",
            "FUN_0800142e",
            "FUN_08001436",
            "FUN_08002008",
            "FUN_08002214",
            "FUN_08002220",
            "FUN_08002250",
            "FUN_08002280",
            "FUN_080022d0",
            "FUN_08002324",
            "FUN_08002368",
            "FUN_08002404",
            "FUN_08002520",
            "FUN_08002564",
            "FUN_080025a4",
            "FUN_08002ed4",
            "FUN_08003068",
            "FUN_08003314",
            "FUN_08003320",
            "FUN_08003eb0",
            "FUN_08003ec8",
            "FUN_08003fc4",
            "FUN_08003fd0",
            "FUN_08003fdc",
            "FUN_08003fe8",
            "FUN_08004c64",
            "FUN_08004d8c",
            "FUN_08004f10",
            "thunk_FUN_0800115c",
            "FUN_08004fb4",
            "FUN_080052e4",
            "FUN_08005614",
            "FUN_08005630",
            "FUN_08005646",
            "FUN_0800567c",
            "FUN_08005840",
            "FUN_08007092",
            "FUN_0800709e",
            "FUN_080070a4",
            "FUN_080072ac",
            "FUN_080072b8"
        ],
        [
            "FUN_080004d0",
            "FUN_08000724",
            "FUN_08000990",
            "FUN_08001004",
            "FUN_08001104",
            "FUN_08001460",
            "FUN_080014e2",
            "FUN_080016f4",
            "FUN_08001b58",
            "FUN_080023d0",
            "FUN_0800245c",
            "FUN_08002538",
            "FUN_080025e8",
            "FUN_08002ec0",
            "FUN_08003f3c",
            "FUN_080041c4",
            "FUN_0800426c",
            "FUN_08004a30",
            "FUN_08004c18",
            "FUN_08004c30",
            "FUN_08004c70",
            "FUN_08004ccc",
            "FUN_08004d48",
            "FUN_08004e14",
            "FUN_08004e7c",
            "FUN_080053d4",
            "FUN_0800581c",
            "FUN_080070b0"
        ],
        [
            "FUN_08000980",
            "FUN_080009a0",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_08000ffc",
            "FUN_08001014",
            "FUN_08001028",
            "FUN_08001128",
            "FUN_08001530",
            "FUN_080015e8",
            "FUN_08001754",
            "FUN_0800209c",
            "FUN_08002724",
            "FUN_0800290c",
            "FUN_08003ff4",
            "FUN_08004c8c",
            "FUN_08005714",
            "FUN_08006c0c",
            "FUN_080071c0"
        ],
        [
            "FUN_080009f0",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_08001828",
            "FUN_08001938",
            "FUN_0800299a",
            "FUN_08004300",
            "FUN_080057d0",
            "FUN_08005bc8"
        ],
        [
            "FUN_08002ee8",
            "FUN_08004348",
            "FUN_08004384",
            "FUN_080043bc",
            "FUN_080043f0",
            "FUN_08004410",
            "FUN_08004434",
            "FUN_08004458",
            "FUN_0800483c",
            "FUN_08005044",
            "FUN_08005c70",
            "FUN_08006228",
            "FUN_08006d68"
        ],
        [
            "FUN_08004a84",
            "FUN_080050fc",
            "FUN_08005854",
            "thunk_FUN_08006070",
            "FUN_08005900",
            "FUN_08006070"
        ],
        [
            "FUN_08003330",
            "FUN_08004ffc"
        ],
        [
            "FUN_08004cac"
        ],
        [
            "FUN_08004490"
        ],
        [
            "FUN_0800403c",
            "FUN_0800407c",
            "FUN_080040b8",
            "FUN_08004514"
        ],
        [
            "FUN_08002ad0",
            "FUN_08003034",
            "FUN_080040e8",
            "FUN_0800458c"
        ],
        [
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0",
            "FUN_08002d88",
            "FUN_08003298",
            "FUN_08004028"
        ],
        [
            "FUN_08002ea0",
            "FUN_08002f28"
        ],
        [
            "FUN_0800411c",
            "FUN_08004194"
        ],
        [
            "FUN_080041ae"
        ]
    ],
    "locked_functions": []
}