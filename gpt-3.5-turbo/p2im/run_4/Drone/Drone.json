{
    "functions": {
        "FUN_080050fc": {
            "renaming": {
                "FUN_080050fc": "reverse_string_and_allocate_memory_080050fc",
                "param_1": "error",
                "param_2": "memory",
                "param_3": "string",
                "param_4": "length",
                "puVar1": "ptr",
                "iVar2": "index",
                "iVar3": "result",
                "puVar4": "output",
                "piVar5": "arg",
                "bVar6": "found_digit",
                "pbVar7": "current_char",
                "pbVar8": "start_char",
                "unaff_r9": "unused_pointer",
                "local_8c": "memory_block",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "unused",
                "local_7c": "width",
                "local_74": "string_length",
                "local_70": "type",
                "local_6f": "minus_flag",
                "local_6e": "plus_flag",
                "local_45": "space_flag",
                "local_30": "unused2"
            },
            "code": "int reverse_string_and_allocate_memory_080050fc(int *error, int *memory, const byte *string, int length)\n{\n    int *memory_block;\n    int memory_block_size;\n    int string_length;\n    int i;\n    int flags;\n    int width;\n    int precision;\n    char type;\n    int size;\n    int *arg_list;\n    memory_block = memory + 4;\n    if ((*(ushort *)(memory + 12) << 0x18) < 0 && memory[16] == 0) {\n        memory_block_size = allocate_memory_block(error, 0x40);\n        *memory = memory_block_size;\n        memory[16] = memory_block_size;\n        if (memory_block_size == 0) {\n            *error = 0xc;\n            return -1;\n        }\n        memory[20] = 0x40;\n    }\n    string_length = 0;\n    for (i = 0; string[i] != 0; i++) {\n        if (string[i] != '%') {\n            string_length++;\n        } else {\n            i++;\n            flags = 0;\n            while (find_character(\"-+ #0\", string[i]) != 0) {\n                flags |= 1 << (find_character(\"-+ #0\", string[i]) + 1);\n                i++;\n            }\n            width = 0;\n            if (string[i] == '*') {\n                i++;\n                arg_list = memory_block + 1;\n                size = *memory_block;\n                memory_block = arg_list;\n                if (size < 0) {\n                    width = -size;\n                    flags |= 2;\n                }\n            } else {\n                while (string[i] >= '0' && string[i] <= '9') {\n                    width = width * 10 + (string[i] - '0');\n                    i++;\n                }\n            }\n            precision = -1;\n            if (string[i] == '.') {\n                i++;\n                if (string[i] == '*') {\n                    i++;\n                    arg_list = memory_block + 1;\n                    size = *memory_block;\n                    memory_block = arg_list;\n                    if (size >= 0) {\n                        precision = size;\n                    }\n                } else {\n                    precision = 0;\n                    while (string[i] >= '0' && string[i] <= '9') {\n                        precision = precision * 10 + (string[i] - '0');\n                        i++;\n                    }\n                }\n            }\n            type = string[i];\n            size = 0;\n            if (find_character(\"hlLzjt\", type) != 0) {\n                size = 1 << (find_character(\"hlLzjt\", type) - 1);\n                i++;\n                if (type == 'j' || type == 't') {\n                    size = 8;\n                }\n            }\n            if (find_character(\"diouxXcspn\", type) != 0) {\n                size |= 0x40 << (find_character(\"diouxXcspn\", type) - 1);\n            }\n            memory_block = (int *)format_output(error, &flags, memory, type, size, arg_list);\n            if (memory_block == (int *)0xffffffff) {\n                if ((*(ushort *)(memory + 12) << 0x19) < 0) {\n                    return -1;\n                }\n                return string_length;\n            }\n            string_length += (int)memory_block;\n        }\n    }\n    if ((*(ushort *)(memory + 12) << 0x19) < 0) {\n        return -1;\n    }\n    return string_length;\n}",
            "called": [
                "FUN_080053d4",
                "FUN_08005614",
                "FUN_08005044",
                "FUN_08005714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080050fc",
            "calling": [
                "FUN_08004ffc"
            ],
            "imported": false,
            "current_name": "reverse_string_and_allocate_memory_080050fc"
        },
        "FUN_08003320": {
            "renaming": {
                "FUN_08003320": "set_param_08003320",
                "param_1": "param_value",
                "PTR_DAT_08003328": "param_ptr"
            },
            "code": "void set_param_08003320(void* param_value) {\n  *(void**)PTR_DAT_08003328 = param_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003320",
            "calling": [
                "FUN_08002ea0",
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "set_param_08003320"
        },
        "FUN_08004410": {
            "renaming": {
                "FUN_08004410": "process_data_08004410",
                "param_1": "start",
                "param_2": "end",
                "param_3": "data",
                "local_10": "ptr_data",
                "local_c": "modified_end",
                "uStack_8": "data_copy"
            },
            "code": "void process_data_08004410(uint32_t start, uint32_t end, uint32_t data) {\n    uint32_t ptr_data = *(uint32_t*)PTR_DAT_08004430;\n    uint32_t modified_end = end & 0xffff0000 | (uint32_t)*(uint16_t*)(PTR_DAT_08004430 + 4);\n    uint32_t data_copy = data;\n    process_string_and_data_08004300(start, &ptr_data, 6);\n    return;\n}",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004410",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_data_08004410"
        },
        "FUN_08001264": {
            "renaming": {
                "FUN_08001264": "calculate_flags_08001264",
                "param_1": "flag_array",
                "param_2": "input_array",
                "puVar1": "flag_ptr",
                "uVar2": "flags1",
                "uVar3": "flags2",
                "uVar4": "flag_bit",
                "uVar5": "input_value",
                "uVar6": "output_value",
                "iVar7": "flag_index",
                "uVar8": "i",
                "uVar9": "j",
                "uVar10": "k",
                "unaff_r10": "flag_array_ptr",
                "iVar11": "flags_index",
                "flags1": "flags1",
                "flags2": "flags2",
                "flags3": "flags3",
                "flags4": "flags4",
                "i": "i",
                "j": "j",
                "k": "k",
                "l": "l",
                "m": "m",
                "n": "n",
                "o": "o",
                "p": "p",
                "q": "q",
                "r": "r",
                "s": "s",
                "t": "t",
                "u": "u",
                "v": "v",
                "w": "w",
                "x": "x",
                "y": "y",
                "z": "z",
                "flag_array_ptr": "flag_array_ptr",
                "flag_index": "flag_index",
                "flags_index": "flags_index",
                "flags_index2": "flags_index2",
                "flags_index3": "flags_index3",
                "flags_index4": "flags_index4",
                "flag_bit": "flag_bit",
                "input_value": "input_value",
                "output_value": "output_value",
                "flag_ptr": "flag_ptr"
            },
            "code": "void calculate_flags_08001264(uint *flag_array,uint *input_array)\n{\n  uint *flag_ptr;\n  uint flag_bit;\n  uint input_value;\n  uint output_value;\n  uint flags1;\n  uint flags2;\n  uint flags3;\n  uint flags4;\n  uint i;\n  uint j;\n  uint k;\n  uint l;\n  uint m;\n  uint n;\n  uint o;\n  uint p;\n  uint q;\n  uint r;\n  uint s;\n  uint t;\n  uint u;\n  uint v;\n  uint w;\n  uint x;\n  uint y;\n  uint z;\n  uint *flag_array_ptr;\n  int flag_index;\n  int flags_index;\n  int flags_index2;\n  int flags_index3;\n  int flags_index4;\n  \n  flags1 = DAT_08001414;\n  flags2 = DAT_08001418;\n  flag_ptr = DAT_08001404;\n  flag_bit = 0;\n  output_value = 0;\n  i = 0;\n  do {\n    j = 1 << (flag_bit & 0xff);\n    k = j & *input_array;\n    if (j == k) {\n      l = input_array[1];\n      if (l == 0x12) {\n        output_value = input_array[3] + 0xc;\n      }\n      else if (l < 0x13) {\n        if (l == 2) {\n          output_value = input_array[3] + 8;\n        }\n        else if (l < 3) {\n          if (l == 0) goto LAB_080013be;\n          if (l == 1) {\n            output_value = input_array[3];\n          }\n        }\n        else if (l == 3) {\n          output_value = 0;\n        }\n        else if (l == 0x11) {\n          output_value = input_array[3] + 4;\n        }\n      }\n      else {\n        if (l != flags2) {\n          if (flags2 < l) {\n            if ((l != flags1) && (n = DAT_08001420, l != flags3)) goto LAB_080013b8;\n          }\n          else if (l != flags4) {\n            n = flags4 + 0x10000;\nLAB_080013b8:\n            if (l != n) goto LAB_080012a8;\n          }\n        }\nLAB_080013be:\n        output_value = input_array[2];\n        if (output_value == 0) {\n          output_value = 4;\n        }\n        else {\n          if (output_value == 1) {\n            flag_array[4] = j;\n          }\n          if (output_value != 1) {\n            flag_array[5] = j;\n          }\n          output_value = 8;\n        }\n      }\nLAB_080012a8:\n      if (k < 0x100) {\n        n = *flag_array;\n        o = flag_bit << 2;\n        flag_array_ptr = flag_array;\n      }\n      else {\n        n = flag_array[1];\n        o = (flag_bit + 0x3ffffff8) * 4;\n      }\n      if (0xff < k) {\n        flag_array_ptr = flag_array + 1;\n      }\n      *flag_array_ptr = n & ~(0xf << (o & 0xff)) | output_value << (o & 0xff);\n      flag_array_ptr = (uint *)input_array[1];\n      if (((uint)flag_array_ptr & 0x10000000) != 0) {\n        *(uint *)(DAT_08001408 + 0x18) = *(uint *)(DAT_08001408 + 0x18) | 1;\n        flags_index = (flag_bit & 3) << 2;\n        if (flag_array == DAT_0800140c) {\n          flags_index2 = 0;\n        }\n        else if (flag_array == DAT_0800140c + 0x100) {\n          flags_index2 = 1;\n        }\n        else if (flag_array == DAT_0800140c + 0x200) {\n          flags_index2 = 2;\n        }\n        else if (flag_array == DAT_0800140c + 0x300) {\n          flags_index2 = 3;\n        }\n        else {\n          flags_index2 = 4;\n        }\n        *(uint *)(&DAT_40010008 + (flag_bit & 0xfffffffc)) =\n             flags_index2 << flags_index | *(uint *)(&DAT_40010008 + (flag_bit & 0xfffffffc)) & ~(0xf << flags_index);\n        if (((uint)flag_array_ptr & 0x10000) == 0) {\n          n = *flag_ptr & ~k;\n        }\n        else {\n          n = *flag_ptr | k;\n        }\n        *flag_ptr = n;\n        if (((uint)flag_array_ptr & 0x20000) == 0) {\n          n = flag_ptr[1] & ~k;\n        }\n        else {\n          n = flag_ptr[1] | k;\n        }\n        flag_ptr[1] = n;\n        if (((uint)flag_array_ptr & 0x100000) == 0) {\n          n = flag_ptr[2] & ~k;\n        }\n        else {\n          n = flag_ptr[2] | k;\n        }\n        flag_ptr[2] = n;\n        if (((uint)flag_array_ptr & 0x200000) == 0) {\n          k = flag_ptr[3] & ~k;\n        }\n        else {\n          k = k | flag_ptr[3];\n        }\n        flag_ptr[3] = k;\n      }\n    }\n    flag_bit = flag_bit + 1;\n    if (flag_bit == 0x10) {\n      return;\n    }\n  } while( true );\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001264",
            "calling": [
                "FUN_08004d48",
                "FUN_08004e14",
                "FUN_0800458c",
                "FUN_08004e7c"
            ],
            "imported": false,
            "current_name": "calculate_flags_08001264"
        },
        "FUN_08002ea0": {
            "renaming": {
                "FUN_08002ea0": "initialize_and_process_MPU9250_data_08002ea0",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "param_3": "parameter3",
                "param_4": "parameter4",
                "extraout_r1": "extra_output_register1",
                "initialize_MPU9250_08002ad0": "initialize_MPU9250",
                "process_and_calculate_i2c_data_08002cb0": "process_and_calculate_i2c_data",
                "save_parameter_to_pointer_08003314": "save_parameter_to_pointer",
                "DAT_08002ebc": "parameter",
                "set_param_08003320": "set_param"
            },
            "code": "void initialize_and_process_MPU9250_data_08002ea0(undefined4 param1, undefined4 param2, undefined4 param3, undefined4 param4)\n{\n  undefined4 extraout_r1;\n  initialize_MPU9250();\n  process_and_calculate_i2c_data();\n  save_DAT_08002ebc_to_pointer(DAT_08002ebc);\n  set_param(0, extraout_r1, param3, param4);\n  return;\n}",
            "called": [
                "FUN_08002cb0",
                "FUN_08003314",
                "FUN_08002ad0",
                "FUN_08003320"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ea0",
            "calling": [
                "FUN_08004194"
            ],
            "imported": false,
            "current_name": "initialize_and_process_MPU9250_data_08002ea0"
        },
        "FUN_080070b0": {
            "renaming": {
                "FUN_080070b0": "calculate_080070b0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "var1",
                "uVar2": "temp1",
                "uVar3": "var2",
                "uVar4": "temp3",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "var3",
                "uVar8": "result"
            },
            "code": "ulonglong calculate_080070b0(uint input1, uint input2, undefined4 input3) {\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  undefined4 var1;\n  undefined4 var2;\n  undefined8 var3;\n  ulonglong result;\n  temp6 = (input2 << 1) >> 0x15;\n  temp5 = temp6 - 0x3ff;\n  temp2 = input2;\n  if ((int)temp5 < 0x14) {\n    if ((int)temp5 < 0) {\n      if ((input2 & 0x7fffffff | input1) == 0) {\n        return CONCAT44(input2,input1);\n      }\n      temp2 = input2 & 0xfffff | input1;\n      var1 = *(undefined4 *)(PTR_DAT_080071b8 + ((int)input2 >> 0x1f) * -8);\n      var2 = *(undefined4 *)((int)(PTR_DAT_080071b8 + ((int)input2 >> 0x1f) * -8) + 4);\n      var3 = FUNC_0800016c(input1,(-temp2 | temp2) >> 0xc & 0x80000 | input2 & 0xfffe0000,var1,var2,input1,input2,input3);\n      result = FUNC_08000168((int)var3,(int)((ulonglong)var3 >> 0x20),var1,var2);\n      return result & 0xffffffff |\n             (ulonglong)((uint)(result >> 0x20) & 0x7fffffff | input2 & 0x80000000) << 0x20;\n    }\n    temp6 = DAT_080071bc >> (temp5 & 0xff);\n    if ((input2 & temp6 | input1) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    temp6 = temp6 >> 1;\n    temp4 = input2 & temp6 | input1;\n    if (temp4 != 0) {\n      if (temp5 == 0x13) {\n        temp4 = 0x80000000;\n      }\n      else {\n        temp4 = 0;\n      }\n      temp2 = 0x40000 >> (temp5 & 0xff) | input2 & ~temp6;\n    }\n  }\n  else {\n    if (0x33 < (int)temp5) {\n      if (temp5 != 0x400) {\n        return CONCAT44(input2,input1);\n      }\n      result = FUNC_0800016c();\n      return result;\n    }\n    temp6 = temp6 - 0x413;\n    temp5 = 0xffffffff >> (temp6 & 0xff);\n    if ((input1 & temp5) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    temp5 = temp5 >> 1;\n    temp4 = input1;\n    if ((input1 & temp5) != 0) {\n      temp4 = 0x40000000 >> (temp6 & 0xff) | input1 & ~temp5;\n    }\n  }\n  var1 = *(undefined4 *)(PTR_DAT_080071b8 + ((int)input2 >> 0x1f) * -8);\n  var2 = *(undefined4 *)((int)(PTR_DAT_080071b8 + ((int)input2 >> 0x1f) * -8) + 4);\n  var3 = FUNC_0800016c(temp4,temp2,var1,var2,input1,input2,input3);\n  result = FUNC_08000168((int)var3,(int)((ulonglong)var3 >> 0x20),var1,var2);\n  return result;\n}",
            "called": [
                "FUN_08000168",
                "FUN_0800016c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080070b0",
            "calling": [
                "FUN_08005900"
            ],
            "imported": false,
            "current_name": "calculate_080070b0"
        },
        "FUN_08002998": {
            "renaming": {
                "FUN_08002998": "do_nothing_08002998"
            },
            "code": "\nvoid do_nothing_08002998(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002998",
            "calling": [
                "FUN_0800299a"
            ],
            "imported": false,
            "current_name": "do_nothing_08002998"
        },
        "FUN_08001424": {
            "renaming": {
                "FUN_08001424": "set_integer_at_offset_08001424",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "offset"
            },
            "code": "void set_integer_at_offset_08001424(int base_address, int value, int offset)\n{\n  if (offset == 0) {\n    value = value << 0x10;\n  }\n  *(int *)(base_address + 0x10) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001424",
            "calling": [
                "FUN_08003f3c",
                "FUN_0800458c",
                "FUN_08004490"
            ],
            "imported": false,
            "current_name": "set_integer_at_offset_08001424"
        },
        "FUN_08001028": {
            "renaming": {
                "FUN_08001028": "is_string_terminated_08001028",
                "in_CY": "input_char"
            },
            "code": "bool is_string_terminated_08001028(void)\n{\n  char input_char;\n  concatenate_integers();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_08001004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001028",
            "calling": [
                "FUN_08002ee8",
                "FUN_08004a84",
                "FUN_0800483c"
            ],
            "imported": false,
            "current_name": "is_string_terminated_08001028"
        },
        "FUN_08005900": {
            "renaming": {
                "FUN_08005900": "FUNC_08005900"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nlonglong FUNC_08005900(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  char cVar1;\n  undefined *puVar2;\n  int iVar3;\n  int iVar4;\n  int *piVar5;\n  undefined4 *puVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  longlong lVar9;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  undefined4 local_50;\n  undefined *local_4c;\n  undefined4 local_48;\n  undefined4 uStack_44;\n  undefined4 local_40;\n  undefined4 uStack_3c;\n  undefined8 local_38;\n  int local_30;\n  \n  lVar9 = FUNC_08006228();\n  puVar2 = PTR_DAT_08005ba8;\n  uVar7 = (undefined4)((ulonglong)lVar9 >> 0x20);\n  uVar8 = (undefined4)lVar9;\n  cVar1 = *PTR_DAT_08005ba8;\n  if (cVar1 == -1) {\n    return lVar9;\n  }\n  local_30 = is_valid_input_08000a04(param_3,param_4,param_3,param_4);\n  if (local_30 != 0) {\n    return lVar9;\n  }\n  iVar3 = is_valid_input_08000a04(param_1,param_2,param_1,param_2);\n  local_48 = param_1;\n  uStack_44 = param_2;\n  local_40 = param_3;\n  uStack_3c = param_4;\n  if (iVar3 == 0) {\n    iVar4 = validate_input_and_return_result_080009a0(param_1,param_2,0,0);\n    if (iVar4 != 0) {\n      local_30 = validate_input_and_return_result_080009a0(param_3,param_4,0,0);\n      if (local_30 != 0) {\n        local_50 = 1;\n        local_4c = PTR_DAT_08005bac;\n        local_38 = 0;\n        local_30 = iVar3;\n        if (cVar1 != '\\0') {\n          local_38 = (ulonglong)DAT_08005bb0 << 0x20;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      iVar3 = set_high_bit_and_shift_right_08007092(param_3,param_4);\n      if (iVar3 == 0) {\n        return lVar9;\n      }\n      iVar3 = is_input_null_080009b4_080009b4(param_3,param_4,0,0);\n      if (iVar3 == 0) {\n        return lVar9;\n      }\n      local_50 = 1;\n      local_4c = PTR_DAT_08005bac;\n      cVar1 = *puVar2;\n      if (cVar1 == '\\0') goto LAB_08005a22;\n      local_38 = (ulonglong)DAT_08005bb4 << 0x20;\nLAB_08005a32:\n      if (cVar1 != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    iVar3 = set_high_bit_and_shift_right_08007092(uVar8,uVar7);\n    if (((iVar3 != 0) || (iVar4 = set_high_bit_and_shift_right_08007092(param_1,param_2), iVar4 == 0)) ||\n       (iVar4 = set_high_bit_and_shift_right_08007092(param_3,param_4), iVar4 == 0)) {\n      iVar3 = validate_input_and_return_result_080009a0(uVar8,uVar7,0,0);\n      if (iVar3 == 0) {\n        return lVar9;\n      }\n      iVar3 = set_high_bit_and_shift_right_08007092(param_1,param_2);\n      if (iVar3 == 0) {\n        return lVar9;\n      }\n      iVar3 = set_high_bit_and_shift_right_08007092(param_3,param_4);\n      if (iVar3 == 0) {\n        return lVar9;\n      }\n      local_50 = 4;\n      local_4c = PTR_DAT_08005bac;\n      local_30 = 0;\n      local_38._0_4_ = 0;\n      local_38._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    local_30 = is_valid_input_08000a04(uVar8,uVar7);\n    cVar1 = *puVar2;\n    if (local_30 != 0) {\n      local_4c = PTR_DAT_08005bac;\n      local_50 = 1;\n      local_30 = iVar3;\n      if (cVar1 != '\\0') {\n        local_38 = FUNC_08000724(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      local_50 = 1;\n      local_38 = 0;\n      local_4c = PTR_DAT_08005bac;\n      goto LAB_08005978;\n    }\n    local_4c = PTR_DAT_08005bac;\n    local_50 = 3;\n    if (cVar1 == '\\0') {\n      local_38._0_4_ = 0xe0000000;\n      local_38._4_4_ = DAT_08005bb8;\n      iVar3 = is_input_null_080009b4_080009b4(param_1,param_2,0,0);\n      if (iVar3 != 0) {\n        uVar10 = FUNC_080004d0(param_3,param_4,0,DAT_08005bbc);\n        uVar11 = calculate_080070b0();\n        iVar3 = validate_input_and_return_result_080009a0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                             (int)((ulonglong)uVar11 >> 0x20));\n        if (iVar3 == 0) {\n          local_38._0_4_ = 0xe0000000;\n          local_38._4_4_ = DAT_08005bc0;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      iVar3 = returnZero_0800709e(&local_50);\n      if (iVar3 != 0) goto LAB_080059d0;\n    }\n    else {\n      local_38._0_4_ = 0;\n      local_38._4_4_ = DAT_08005bc4;\n      iVar3 = is_input_null_080009b4_080009b4(param_1,param_2,0,0);\n      if (iVar3 != 0) {\n        uVar10 = FUNC_080004d0(param_3,param_4,0,DAT_08005bbc);\n        uVar11 = calculate_080070b0();\n        iVar3 = validate_input_and_return_result_080009a0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                             (int)((ulonglong)uVar11 >> 0x20));\n        if (iVar3 == 0) {\n          local_38._0_4_ = 0;\n          local_38._4_4_ = DAT_08005bb4;\n        }\n      }\nLAB_08005afa:\n      if (*puVar2 != '\\x02') goto LAB_08005b98;\n    }\n    puVar6 = (undefined4 *)get_first_value_in_pointer_array_080072ac();\n    uVar8 = 0x22;\n  }\n  else {\n    iVar3 = validate_input_and_return_result_080009a0(param_3,param_4,0,0);\n    if (iVar3 == 0) {\n      return lVar9;\n    }\n    local_50 = 1;\n    local_4c = PTR_DAT_08005bac;\n    local_38 = (ulonglong)DAT_08005bb0 << 0x20;\n    if (cVar1 == '\\x02') {\n      return (ulonglong)DAT_08005bb0 << 0x20;\n    }\nLAB_08005978:\n    iVar3 = returnZero_0800709e(&local_50);\n    if (iVar3 != 0) goto LAB_080059d0;\nLAB_08005a34:\n    puVar6 = (undefined4 *)get_first_value_in_pointer_array_080072ac();\n    uVar8 = 0x21;\n  }\n  *puVar6 = uVar8;\nLAB_080059d0:\n  if (local_30 != 0) {\n    piVar5 = (int *)get_first_value_in_pointer_array_080072ac();\n    *piVar5 = local_30;\n  }\n  return local_38;\n}\n\n",
            "called": [
                "FUN_08000a04",
                "FUN_08006228",
                "FUN_080009a0",
                "FUN_08000724",
                "FUN_08007092",
                "FUN_0800709e",
                "FUN_080004d0",
                "FUN_080072ac",
                "FUN_080009b4",
                "FUN_080070b0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005900",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "FUNC_08005900"
        },
        "FUN_080006ac": {
            "renaming": {
                "FUN_080006ac": "calculate_result_080006ac",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "temp_1",
                "unaff_r4": "unaff_r4",
                "uVar2": "temp_2",
                "uVar3": "temp_3",
                "in_r12": "in_r12",
                "bVar4": "is_bVar4",
                "mask": "mask",
                "bit_checker": "bit_checker",
                "is_first_param_zero": "is_first_param_zero",
                "is_third_param_zero": "is_third_param_zero",
                "is_second_param_zero": "is_second_param_zero",
                "is_fourth_param_zero": "is_fourth_param_zero",
                "is_temp_zero": "is_temp_zero",
                "is_temp_2_zero": "is_temp_2_zero",
                "is_temp_3_zero": "is_temp_3_zero",
                "is_temp_4_zero": "is_temp_4_zero",
                "is_unaff_r4_not_equal_to_in_r12": "is_unaff_r4_not_equal_to_in_r12",
                "is_uVar2_not_equal_to_in_r12": "is_uVar2_not_equal_to_in_r12"
            },
            "code": "ulonglong calculate_result_080006ac(uint first_param,uint second_param,uint third_param,uint fourth_param)\n    {\n        uint temp_1;\n        uint temp_2;\n        uint temp_3;\n        uint temp_4;\n        uint mask = 0x80000000;\n        uint bit_checker = 0x100000;\n        bool is_first_param_zero;\n        bool is_third_param_zero;\n        bool is_second_param_zero;\n        bool is_fourth_param_zero;\n        bool is_temp_zero;\n        bool is_temp_2_zero;\n        bool is_temp_3_zero;\n        bool is_temp_4_zero;\n        bool is_unaff_r4_not_equal_to_in_r12;\n        bool is_uVar2_not_equal_to_in_r12;\n        bool is_bVar4;\n        \n        is_unaff_r4_not_equal_to_in_r12 = fourth_param != in_r12;\n        is_uVar2_not_equal_to_in_r12 = (in_r12 & (fourth_param >> 0x14)) != in_r12;\n        \n        if (is_unaff_r4_not_equal_to_in_r12 && is_uVar2_not_equal_to_in_r12) {\n            is_first_param_zero = (first_param | (second_param << 1)) == 0;\n            is_third_param_zero = (third_param | (fourth_param << 1)) == 0;\n            is_bVar4 = is_first_param_zero || is_third_param_zero;\n            \n            if (is_bVar4) {\n                return (ulonglong)((second_param ^ fourth_param) & mask) << 0x20;\n            }\n            \n            if (fourth_param == 0) {\n                temp_3 = second_param & mask;\n                do {\n                    temp_1 = first_param & mask;\n                    first_param = first_param << 1;\n                    second_param = second_param * 2 + (uint)(temp_1 != 0);\n                } while ((second_param & bit_checker) == 0);\n                second_param = second_param | temp_3;\n                \n                if (is_uVar2_not_equal_to_in_r12) {\n                    return CONCAT44(second_param,first_param);\n                }\n            }\n            \n            do {\n                temp_2 = third_param & mask;\n                third_param = third_param << 1;\n                fourth_param = fourth_param * 2 + (uint)(temp_2 != 0);\n            } while ((fourth_param & bit_checker) == 0);\n            \n            return CONCAT44(second_param,first_param);\n        }\n        \n        is_first_param_zero = (first_param | (second_param << 1)) == 0;\n        is_second_param_zero = (third_param | (fourth_param << 1)) == 0;\n        is_bVar4 = is_first_param_zero || is_second_param_zero;\n        temp_3 = second_param;\n        \n        if (!is_bVar4) {\n            is_temp_zero = unaff_r4 == in_r12;\n            is_temp_2_zero = (first_param | (second_param << 0xc)) == 0;\n            is_temp_3_zero = (third_param | (fourth_param << 0xc)) == 0;\n            is_temp_4_zero = is_uVar2_not_equal_to_in_r12 && is_temp_3_zero;\n            \n            if (is_temp_zero || is_temp_2_zero || is_temp_4_zero) {\n                return (ulonglong)((second_param ^ fourth_param) & mask | 0x7ff00000) << 0x20;\n            }\n            \n            return CONCAT44(temp_3,first_param) | 0x7ff8000000000000;\n        }\n        \n        temp_4 = fourth_param;\n        temp_3 = first_param;\n        first_param = third_param;\n        second_param = fourth_param;\n        \n        return CONCAT44(temp_3,temp_4);\n    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006ac",
            "calling": [
                "FUN_080004d0"
            ],
            "imported": false,
            "current_name": "calculate_result_080006ac"
        },
        "FUN_08001828": {
            "renaming": {
                "FUN_08001828": "process_data_08001828",
                "param_1": "data_ptr",
                "param_2": "arg_1",
                "param_3": "arg_2",
                "param_4": "arg_3",
                "param_5": "byte_ptr",
                "param_6": "byte_count",
                "param_7": "arg_4",
                "iVar1": "val1",
                "iVar2": "val2",
                "puVar3": "ptr_3",
                "uVar4": "value_4"
            },
            "code": "uint32_t process_data_08001828(uint32_t **data_ptr, uint32_t arg_1, uint32_t arg_2, uint32_t arg_3, uint8_t *byte_ptr, uint16_t byte_count, uint32_t arg_4)\n{\n    int val1 = 0;\n    int val2 = 0;\n    uint32_t *ptr_3 = NULL;\n    uint32_t value_4 = 0;\n    \n    if ((*data_ptr)[0x35] == ' ')\n    {\n        if (byte_ptr == NULL)\n        {\n            return 1;\n        }\n        if (byte_count == 0)\n        {\n            return 1;\n        }\n        val1 = get_value_from_pointer_0800115c();\n        do\n        {\n            ptr_3 = *data_ptr;\n            if ((~ptr_3[6] & 2) != 0)\n            {\n                if ((*data_ptr)[0xd] == 1)\n                {\n                    return 2;\n                }\n                value_4 = *ptr_3;\n                (*data_ptr)[0xd] = 1;\n                *ptr_3 = value_4 & 0xfffff7ff;\n                (*data_ptr)[0x35] = 0x21;\n                (*data_ptr)[0x36] = 0x40;\n                (*data_ptr)[0xe] = NULL;\n                val1 = update_feature_flags(data_ptr,arg_1,arg_2,arg_3,arg_4);\n                if (val1 != 0)\n                {\n                    (*data_ptr)[0xd] = 0;\n                    if ((*data_ptr)[0xe] == 4)\n                    {\n                        return 1;\n                    }\n                    return 3;\n                }\n                goto LAB_080018e2;\n            }\n            val2 = get_value_from_pointer_0800115c();\n        } while ((uint32_t)(val2 - val1) < 0x2711);\n        (*data_ptr)[0xd] = 0;\n        (*data_ptr)[0x35] = 0x20;\n    }\n    return 2;\n    while (byte_count != 0)\n    {\nLAB_080018e2:\n        val1 = check_feature_disabled(data_ptr,arg_4);\n        if (val1 != 0)\n        {\n            goto LAB_080018ee;\n        }\n        ptr_3 = *data_ptr;\n        ptr_3[4] = (uint32_t)*byte_ptr;\n        if ((int32_t)(ptr_3[5] << 0x1d) < 0)\n        {\n            if ((uint16_t)(byte_count - 1) == 0)\n            {\n                break;\n            }\n            byte_count -= 2;\n            ptr_3[4] = (uint32_t)byte_ptr[1];\n            byte_ptr += 2;\n        }\n        else\n        {\n            byte_ptr++;\n            byte_count--;\n        }\n    }\n    val1 = check_feature_disabled(data_ptr,arg_4);\n    if (val1 == 0)\n    {\n        **data_ptr |= 0x200;\n        (*data_ptr)[0xd] = 0;\n        (*data_ptr)[0x35] = 0x20;\n        (*data_ptr)[0x36] = 0;\n        return 0;\n    }\nLAB_080018ee:\n    if ((*data_ptr)[0xe] == 4)\n    {\n        **data_ptr |= 0x200;\n        return 1;\n    }\n    return 3;\n}",
            "called": [
                "FUN_08001530",
                "FUN_0800115c",
                "FUN_080014e2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001828",
            "calling": [
                "FUN_0800403c"
            ],
            "imported": false,
            "current_name": "process_data_08001828"
        },
        "FUN_08004c64": {
            "renaming": {
                "FUN_08004c64": "clear_buffer_08004c64",
                "*puVar1": "*buffer_start",
                "iVar2": "buffer_size"
            },
            "code": "void clear_buffer_08004c64(void)\n{\n  undefined *buffer_start = PTR_DAT_08004c6c;\n  int buffer_size = 0;\n  *(undefined2 *)(buffer_start + 0x800) = 0;\n  *(undefined2 *)(buffer_start + 0x802) = 0;\n  *(undefined2 *)(buffer_start + 0x804) = 0;\n  do {\n    buffer_start[buffer_size] = 0;\n    buffer_size++;\n  } while (buffer_size != 0x800);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c64",
            "calling": [
                "FUN_08004c70"
            ],
            "imported": false,
            "current_name": "clear_buffer_08004c64"
        },
        "FUN_0800016c": {
            "renaming": {
                "FUN_0800016c": "FUNC_0800016c"
            },
            "code": "\nulonglong FUNC_0800016c(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000278;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800016c",
            "calling": [
                "FUN_08006070",
                "FUN_08006c0c",
                "FUN_08006228",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_080071c0",
                "FUN_080070b0"
            ],
            "imported": false,
            "current_name": "FUNC_0800016c"
        },
        "FUN_08001b58": {
            "renaming": {
                "FUN_08001b58": "FUNC_08001b58"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\nundefined4 FUNC_08001b58(int *param_1)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  int iVar3;\n  int iVar4;\n  uint uVar5;\n  \n  puVar1 = DAT_08001e70;\n  if (*param_1 << 0x1f < 0) {\n    if (((DAT_08001e70[1] & 0xc) == 4) ||\n       (((DAT_08001e70[1] & 0xc) == 8 && ((int)(DAT_08001e70[1] << 0xf) < 0)))) {\n      uVar5 = count_leading_zeroes(0x4000);\n      if (((int)((*DAT_08001e70 >> (uVar5 & 0x1f)) << 0x1f) < 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      iVar4 = param_1[1];\n      if (iVar4 == 0x10000) {\nLAB_08001c1e:\n        uVar5 = *puVar1 | 0x10000;\n      }\n      else {\n        if (iVar4 == 0) {\n          *DAT_08001e70 = *DAT_08001e70 & 0xfffeffff;\n          *puVar1 = *puVar1 & 0xfffbffff;\n          iVar4 = get_value_from_pointer_0800115c();\n          while (uVar5 = count_leading_zeroes(0x4000),\n                (int)((*puVar1 >> (uVar5 & 0x1f)) << 0x1f) < 0) {\n            iVar3 = get_value_from_pointer_0800115c();\n            if (100 < (uint)(iVar3 - iVar4)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (iVar4 == 0x50000) {\n          *DAT_08001e70 = *DAT_08001e70 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        *DAT_08001e70 = *DAT_08001e70 & 0xfffeffff;\n        uVar5 = *puVar1 & 0xfffbffff;\n      }\n      *puVar1 = uVar5;\n      iVar4 = get_value_from_pointer_0800115c();\n      while (uVar5 = count_leading_zeroes(0x4000), -1 < (int)((*puVar1 >> (uVar5 & 0x1f)) << 0x1f))\n      {\n        iVar3 = get_value_from_pointer_0800115c();\n        if (100 < (uint)(iVar3 - iVar4)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  puVar1 = DAT_08001e70;\n  if (*param_1 << 0x1e < 0) {\n    if (((DAT_08001e70[1] & 0xc) == 0) ||\n       (((DAT_08001e70[1] & 0xc) == 8 && (-1 < (int)(DAT_08001e70[1] << 0xf))))) {\n      uVar5 = count_leading_zeroes(0x40000000);\n      if (((int)((*DAT_08001e70 >> (uVar5 & 0x1f)) << 0x1f) < 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      if (param_1[4] == 0) {\n        iVar4 = count_leading_zeroes(0x80000000);\n        *(undefined4 *)(iVar4 * 4 + 0x42420000) = 0;\n        iVar4 = get_value_from_pointer_0800115c();\n        while (uVar5 = count_leading_zeroes(0x40000000),\n              (int)((*puVar1 >> (uVar5 & 0x1f)) << 0x1f) < 0) {\n          iVar3 = get_value_from_pointer_0800115c();\n          if (2 < (uint)(iVar3 - iVar4)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      iVar4 = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(iVar4 * 4 + 0x42420000) = 1;\n      iVar4 = get_value_from_pointer_0800115c();\n      while (uVar5 = count_leading_zeroes(0x40000000),\n            -1 < (int)((*puVar1 >> (uVar5 & 0x1f)) << 0x1f)) {\n        iVar3 = get_value_from_pointer_0800115c();\n        if (2 < (uint)(iVar3 - iVar4)) {\n          return 3;\n        }\n      }\n    }\n    uVar5 = count_leading_zeroes(0x1f000000);\n    *puVar1 = param_1[5] << (uVar5 & 0xff) | *puVar1 & 0xffffff07;\n  }\nLAB_08001b6c:\n  puVar1 = DAT_08001e70;\n  if (*param_1 << 0x1c < 0) {\n    if (param_1[6] == 0) {\n      iVar4 = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(DAT_08001e74 + iVar4 * 4) = 0;\n      iVar4 = get_value_from_pointer_0800115c();\n      while (uVar5 = count_leading_zeroes(0x40000000),\n            (int)((puVar1[9] >> (uVar5 & 0x1f)) << 0x1f) < 0) {\n        iVar3 = get_value_from_pointer_0800115c();\n        if (2 < (uint)(iVar3 - iVar4)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar4 = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(DAT_08001e74 + iVar4 * 4) = 1;\n      iVar4 = get_value_from_pointer_0800115c();\n      while (uVar5 = count_leading_zeroes(0x40000000),\n            -1 < (int)((puVar1[9] >> (uVar5 & 0x1f)) << 0x1f)) {\n        iVar3 = get_value_from_pointer_0800115c();\n        if (2 < (uint)(iVar3 - iVar4)) {\n          return 3;\n        }\n      }\n      do_nothing_08001168(1);\n    }\n  }\n  puVar2 = DAT_08001e78;\n  puVar1 = DAT_08001e70;\n  if (-1 < *param_1 << 0x1d) goto LAB_08001bc2;\n  DAT_08001e70[7] = DAT_08001e70[7] | 0x10000000;\n  *puVar2 = *puVar2 | 0x100;\n  iVar4 = get_value_from_pointer_0800115c();\n  while (-1 < (int)(*puVar2 << 0x17)) {\n    iVar3 = get_value_from_pointer_0800115c();\n    if (100 < (uint)(iVar3 - iVar4)) {\n      return 3;\n    }\n  }\n  iVar4 = param_1[3];\n  if (iVar4 == 1) {\nLAB_08001e1a:\n    uVar5 = puVar1[8] | 1;\n  }\n  else {\n    if (iVar4 == 0) {\n      puVar1[8] = puVar1[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n      iVar4 = get_value_from_pointer_0800115c();\n      while (uVar5 = count_leading_zeroes(0x40000000),\n            (int)((puVar1[8] >> (uVar5 & 0x1f)) << 0x1f) < 0) {\n        iVar3 = get_value_from_pointer_0800115c();\n        if (5000 < (uint)(iVar3 - iVar4)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (iVar4 == 5) {\n      puVar1[8] = puVar1[8] | 4;\n      goto LAB_08001e1a;\n    }\n    puVar1[8] = puVar1[8] & 0xfffffffe;\n    uVar5 = puVar1[8] & 0xfffffffb;\n  }\n  puVar1[8] = uVar5;\n  iVar4 = get_value_from_pointer_0800115c();\n  while (uVar5 = count_leading_zeroes(0x40000000), -1 < (int)((puVar1[8] >> (uVar5 & 0x1f)) << 0x1f)\n        ) {\n    iVar3 = get_value_from_pointer_0800115c();\n    if (5000 < (uint)(iVar3 - iVar4)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  puVar1 = DAT_08002004;\n  if (param_1[7] == 0) {\n    return 0;\n  }\n  if ((DAT_08002004[1] & 0xc) != 8) {\n    if (param_1[7] != 2) {\n      iVar4 = count_leading_zeroes(0x80);\n      *(undefined4 *)(iVar4 * 4 + 0x42420000) = 0;\n      iVar4 = get_value_from_pointer_0800115c();\n      do {\n        uVar5 = count_leading_zeroes(0x40);\n        if (-1 < (int)((*puVar1 >> (uVar5 & 0x1f)) << 0x1f)) {\n          return 0;\n        }\n        iVar3 = get_value_from_pointer_0800115c();\n      } while ((uint)(iVar3 - iVar4) < 3);\n      return 3;\n    }\n    iVar4 = count_leading_zeroes(0x80);\n    *(undefined4 *)(iVar4 * 4 + 0x42420000) = 0;\n    iVar4 = get_value_from_pointer_0800115c();\n    do {\n      uVar5 = count_leading_zeroes(0x40);\n      if (-1 < (int)((*puVar1 >> (uVar5 & 0x1f)) << 0x1f)) {\n        uVar5 = param_1[8];\n        if (uVar5 == 0x10000) {\n          puVar1[1] = puVar1[1] & 0xfffdffff | param_1[2];\n        }\n        puVar1[1] = uVar5 | param_1[9] | puVar1[1] & 0xffc2ffff;\n        iVar4 = count_leading_zeroes(0x80);\n        *(undefined4 *)(iVar4 * 4 + 0x42420000) = 1;\n        iVar4 = get_value_from_pointer_0800115c();\n        do {\n          uVar5 = count_leading_zeroes(0x40);\n          if ((int)((*puVar1 >> (uVar5 & 0x1f)) << 0x1f) < 0) {\n            return 0;\n          }\n          iVar3 = get_value_from_pointer_0800115c();\n        } while ((uint)(iVar3 - iVar4) < 3);\n        return 3;\n      }\n      iVar3 = get_value_from_pointer_0800115c();\n    } while ((uint)(iVar3 - iVar4) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_0800115c",
                "FUN_08001168"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001b58",
            "calling": [
                "FUN_08004514"
            ],
            "imported": false,
            "current_name": "FUNC_08001b58"
        },
        "FUN_08007092": {
            "renaming": {
                "FUN_08007092": "set_high_bit_and_shift_right_08007092",
                "param_1": "value",
                "param_2": "high_bit_mask"
            },
            "code": "uint set_high_bit_and_shift_right_08007092(uint value, uint high_bit_mask){\n    uint high_bit_set_value = value | high_bit_mask;\n    uint shifted_value = high_bit_set_value + 0x100000 >> 0x1f;\n    return shifted_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007092",
            "calling": [
                "FUN_08005900"
            ],
            "imported": false,
            "current_name": "set_high_bit_and_shift_right_08007092"
        },
        "FUN_0800290c": {
            "renaming": {
                "FUN_0800290c": "process_data_0800290c",
                "param_1": "data",
                "bVar1": "data_byte",
                "iVar2": "data_pointer",
                "puVar6": "data_array",
                "puVar7": "next_data_array",
                "bVar8": "condition",
                "uVar3": "data_byte"
            },
            "code": "int process_data_0800290c(int *data)\n{\n    if ((*(byte *)((int)data + 0x39) & 0xef) != 0x22)\n    {\n        return 2;\n    }\n\n    int data_pointer = *data;\n    ushort *data_array = (ushort *)data[10];\n    if (data[2] == 0x1000)\n    {\n        if (data[4] == 0)\n        {\n            data_array[0] = (ushort)((uint)(*(int *)(data_pointer + 4) << 0x17) >> 0x17);\n            data_array++;\n        }\n        else\n        {\n            data_array[0] = (ushort)*(int *)(data_pointer + 4) & 0xff;\n            data_array = (ushort *)((int)data_array + 1);\n        }\n        data[10] = (int)data_array;\n    }\n    else\n    {\n        if (data[4] == 0)\n        {\n            byte data_byte = (byte)*(undefined4 *)(data_pointer + 4);\n            data[10] = (int)data_array + 1;\n            *(byte *)data_array = data_byte;\n        }\n        else\n        {\n            undefined4 data_word = *(undefined4 *)(data_pointer + 4);\n            data[10] = (int)data_array + 1;\n            *(byte *)data_array = (byte)data_word & 0x7f;\n        }\n    }\n    short counter = *(short *)((int)data + 0x2e) + -1;\n    *(short *)((int)data + 0x2e) = counter;\n    if (counter == 0)\n    {\n        int data_pointer = *data;\n        *(uint *)(data_pointer + 0xc) = *(uint *)(data_pointer + 0xc) & 0xffffffdf;\n        uint data_byte = (uint)*(byte *)((int)data + 0x39);\n        bool condition = data_byte != 0x32;\n        if (condition)\n        {\n            data_byte = *(uint *)(data_pointer + 0xc) & 0xfffffeff;\n        }\n        else\n        {\n            data_pointer = 0x12;\n        }\n        if (condition)\n        {\n            *(uint *)(data_pointer + 0xc) = data_byte;\n            data_byte = *(uint *)(data_pointer + 0x14) & 0xfffffffe;\n        }\n        if (condition)\n        {\n            *(uint *)(data_pointer + 0x14) = data_byte;\n            data_pointer = 1;\n        }\n        *(char *)((int)data + 0x39) = (char)data_pointer;\n        increment_and_store_08004c30();\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004c30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800290c",
            "calling": [
                "FUN_0800299a"
            ],
            "imported": false,
            "current_name": "process_data_0800290c"
        },
        "FUN_08002f28": {
            "renaming": {
                "FUN_08002f28": "process_sensor_data_08002f28",
                "thunk_get_value_from_pointer_0800115c": "get_sensor_value",
                "PTR_DAT_08003000": "previous_sensor_value_ptr",
                "PTR_DAT_08003004": "sensor_value_ptr",
                "leading_zero_bits_count_08000c3c": "count_leading_zero_bits",
                "FUNC_08000e54": "store_leading_zero_bits",
                "set_param_08003320": "set_sensor_parameters",
                "PTR_DAT_0800300c": "sensor_param_ptr",
                "FUNC_08003330": "process_data",
                "PTR_DAT_08003018": "param5_ptr",
                "PTR_DAT_08003014": "param4_ptr",
                "PTR_DAT_08003010": "param9_ptr",
                "PTR_DAT_08003024": "strings_ptr",
                "PTR_DAT_08003020": "string1_ptr",
                "PTR_DAT_0800301c": "string2_ptr",
                "PTR_DAT_08003028": "string3_ptr",
                "calculate_average_08002ed4": "calculate_average",
                "FUNC_08000cec": "store_result",
                "extract_bits_08001078": "get_bits",
                "calculate_result_08002ec0": "calculate_result",
                "check_string_and_concatenated_integers_are_zero_or_not_08002ee8": "check_string_and_integers"
            },
            "code": "void process_sensor_data_08002f28(void)\n{\n  int value1 = get_sensor_value();\n  int value2 = get_previous_sensor_value();\n  int leading_zero_bits = count_leading_zero_bits(value1 - value2);\n  store_leading_zero_bits(leading_zero_bits);\n  set_sensor_parameters();\n  int param1 = get_parameter1();\n  int param2 = get_parameter2();\n  int param3 = get_parameter3();\n  int param4 = get_parameter4();\n  int param5 = get_parameter5();\n  int param6 = get_parameter6();\n  int param7 = get_parameter7();\n  int param8 = get_parameter8();\n  int param9 = get_parameter9();\n  process_data(param1, param2, param3, param4, param5, param6, param7, param8, param9);\n  process_strings();\n  calculate_average();\n  calculate_result();\n  check_string_and_integers();\n}\n",
            "called": [
                "FUN_08002b48",
                "FUN_08000cec",
                "FUN_08002ee8",
                "FUN_08002ec0",
                "FUN_08001078",
                "FUN_08003330",
                "FUN_08003320",
                "FUN_08000c3c",
                "FUN_08002ed4",
                "thunk_FUN_0800115c",
                "FUN_08000e54",
                "FUN_08002bf0",
                "FUN_08002d88"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f28",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_sensor_data_08002f28"
        },
        "FUN_08004384": {
            "renaming": {
                "FUN_08004384": "process_data_08004384",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "puVar1": "data_ptr",
                "local_14": "local_var1",
                "uStack_10": "local_var2",
                "local_c": "local_var3"
            },
            "code": "void process_data_08004384(uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4)\n{\n    uint8_t* data_ptr = PTR_DAT_080043b8;\n    data_ptr[4] = 7;\n    data_ptr[5] = 0;\n    data_ptr[6] = 0x2a;\n    data_ptr[7] = 0;\n    \n    uint32_t local_var1 = *(uint32_t*)data_ptr;\n    uint32_t local_var2 = *(uint32_t*)(data_ptr + 4);\n    data_ptr[8] = 0;\n    data_ptr[9] = 0;\n    data_ptr[10] = 0;\n    \n    uint32_t local_var3 = param4 & 0xff000000 | (uint32_t)*(uint16_t*)(data_ptr + 8);\n    process_string_and_data_08004300(0x65, &local_var1, 0xb, *(uint16_t*)(data_ptr + 8), param1);\n}",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004384",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_data_08004384"
        },
        "FUN_080009a0": {
            "renaming": {
                "FUN_080009a0": "validate_input_and_return_result_080009a0",
                "in_ZR": "input_character",
                "validate_parameters_08000990": "validate_parameters"
            },
            "code": "bool validate_input_and_return_result_080009a0(void)\\n{\\n  char input_character;\\n  validate_parameters();\\n  return input_character != \"\\0\";\\n}",
            "called": [
                "FUN_08000990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009a0",
            "calling": [
                "FUN_08005900"
            ],
            "imported": false,
            "current_name": "validate_input_and_return_result_080009a0"
        },
        "FUN_0800290a": {
            "renaming": {
                "FUN_0800290a": "do_nothing_0800290a"
            },
            "code": "\nvoid do_nothing_0800290a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800290a",
            "calling": [
                "FUN_0800299a"
            ],
            "imported": false,
            "current_name": "do_nothing_0800290a"
        },
        "FUN_08003298": {
            "renaming": {
                "FUN_08003298": "process_MS5611_data_08003298",
                "puVar1": "data_ptr",
                "puVar2": "output_ptr",
                "puVar3": "ms5611_data_out",
                "iVar4": "counter",
                "local_1c": "local_byte_1",
                "local_1b": "local_byte_2"
            },
            "code": "void process_MS5611_data_08003298()\n{\n  uint8_t *data_ptr;\n  uint8_t *output_ptr;\n  uint8_t local_byte_1;\n  uint8_t local_byte_2;\n  int counter = 0;\n  process_i2c_data_and_strings(0xee, 0x1e, 1);\n  do_nothing(10);\n  output_ptr = ms5611_data_out;\n  data_ptr = ms5611_data_in;\n  *ms5611_data_length = 8;\n  do {\n    local_byte_1 = 0;\n    local_byte_2 = 0;\n    copy_data_and_strings(0xee, counter + 0xa0U & 0xffff, &local_byte_1, 2, data_ptr, 0x7c);\n    *(ushort *)(output_ptr + counter) = CONCAT11(local_byte_1, local_byte_2);\n    counter = counter + 2;\n  } while (counter != 0x10);\n  counter = 0;\n  do {\n    *(undefined4 *)(ms5611_data_out + counter * 4) = 0;\n    counter = counter + 1;\n  } while (counter != 0x14);\n  return;\n}",
            "called": [
                "FUN_0800403c",
                "thunk_FUN_08001168",
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003298",
            "calling": [
                "FUN_08004194"
            ],
            "imported": false,
            "current_name": "process_MS5611_data_08003298"
        },
        "FUN_08004300": {
            "renaming": {
                "FUN_08004300": "process_string_and_data_08004300",
                "param_1": "key",
                "param_2": "data",
                "param_3": "length",
                "uVar1": "xor_result",
                "pbVar2": "current_byte"
            },
            "code": "void process_string_and_data_08004300(uint32_t key, byte* data, uint32_t length)\n{\n  uint32_t xor_result;\n  byte* current_byte;\n  \n  process_string_data(PTR_DAT_08004344);\n  process_data(length & 0xff);\n  xor_result = length & 0xff ^ key;\n  process_data(key);\n  for (current_byte = data; (int)current_byte - (int)data < (int)length; current_byte++)\n  {\n    process_data(*current_byte);\n    xor_result = xor_result ^ *current_byte;\n  }\n  process_data(xor_result);\n  return;\n}",
            "called": [
                "FUN_08004c8c",
                "FUN_08004c18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004300",
            "calling": [
                "FUN_08004434",
                "FUN_080043f0",
                "FUN_08004458",
                "FUN_08004410",
                "FUN_080043bc",
                "FUN_08004348",
                "FUN_08004384"
            ],
            "imported": false,
            "current_name": "process_string_and_data_08004300"
        },
        "FUN_08005630": {
            "renaming": {
                "FUN_08005630": "copy_data_to_buffer_08005630",
                "param_1": "buffer_start_index",
                "param_2": "data",
                "param_3": "data_length",
                "puVar1": "data_ptr",
                "puVar2": "buffer_ptr"
            },
            "code": "void copy_data_to_buffer_08005630(int buffer_start_index, undefined *data, int data_length)\n{\n  undefined *buffer_ptr;\n  undefined *data_ptr;\n  buffer_ptr = (undefined *)(buffer_start_index - 1);\n  data_ptr = data + data_length;\n  for (; data != data_ptr; data++) {\n    buffer_ptr++;\n    *buffer_ptr = *data;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005630",
            "calling": [
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_08005630"
        },
        "FUN_08003330": {
            "renaming": {
                "FUN_08003330": "FUNC_08003330"
            },
            "code": "\nvoid FUNC_08003330(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined4 param_9,undefined4 *param_10)\n\n{\n  undefined *puVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  int iVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  int iVar9;\n  undefined4 uVar10;\n  undefined4 uVar11;\n  undefined4 uVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  undefined4 uVar15;\n  undefined4 uVar16;\n  undefined4 uVar17;\n  undefined4 uVar18;\n  undefined4 uVar19;\n  int iVar20;\n  undefined4 uVar21;\n  undefined4 uVar22;\n  undefined4 uVar23;\n  undefined4 uVar24;\n  undefined4 uVar25;\n  undefined4 uVar26;\n  int iVar27;\n  undefined4 uVar28;\n  int iVar29;\n  undefined4 uVar30;\n  undefined4 uVar31;\n  undefined8 uVar32;\n  undefined8 uVar33;\n  \n  uVar28 = *(undefined4 *)PTR_DAT_080035d8;\n  iVar29 = *(int *)(PTR_DAT_080035d8 + 4);\n  uVar31 = *(undefined4 *)(PTR_DAT_080035d8 + 8);\n  uVar30 = *(undefined4 *)(PTR_DAT_080035d8 + 0xc);\n  uVar2 = FUNC_08000cec(param_1,param_1);\n  uVar3 = FUNC_08000cec(param_2);\n  uVar2 = FUNC_08000adc(uVar2,uVar3);\n  uVar3 = FUNC_08000cec(param_3);\n  FUNC_08000adc(uVar2,uVar3);\n  reverseBits_08000428();\n  calculate_and_return_result_of_function_08005bc8();\n  uVar2 = calculate_float_bits_08000a30();\n  iVar4 = check_if_concatenated_integers_not_empty_08001014(uVar2,0);\n  if (iVar4 == 0) {\n    uVar3 = FUNC_08000cec(param_7);\n    uVar5 = FUNC_08000cec(param_8);\n    uVar3 = FUNC_08000adc(uVar3,uVar5);\n    uVar5 = FUNC_08000cec(param_9);\n    FUNC_08000adc(uVar3,uVar5);\n    reverseBits_08000428();\n    calculate_and_return_result_of_function_08005bc8();\n    uVar3 = calculate_float_bits_08000a30();\n    iVar4 = check_if_concatenated_integers_not_empty_08001014(uVar3,0);\n    if (iVar4 == 0) {\n      uVar32 = reverseBits_08000428(param_4);\n      FUNC_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar5 = calculate_float_bits_08000a30();\n      uVar32 = reverseBits_08000428(param_5);\n      FUNC_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar6 = calculate_float_bits_08000a30();\n      uVar32 = reverseBits_08000428(param_6);\n      FUNC_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar7 = calculate_float_bits_08000a30();\n      iVar4 = FUNC_08000adc(uVar28);\n      uVar8 = FUNC_08000adc(iVar29);\n      iVar9 = FUNC_08000adc(uVar31,uVar31);\n      uVar10 = FUNC_08000adc(uVar30,uVar30);\n      uVar11 = FUNC_08000cec(uVar28);\n      uVar12 = FUNC_08000cec(uVar28,iVar29);\n      uVar13 = FUNC_08000cec(uVar28,uVar31);\n      uVar14 = FUNC_08000cec(iVar29);\n      uVar15 = FUNC_08000cec(iVar29,uVar30);\n      uVar16 = FUNC_08000cec(uVar31,uVar31);\n      uVar17 = FUNC_08000cec(uVar30,uVar30);\n      uVar2 = FUNC_08000e54(0x3f800000,uVar2);\n      uVar3 = FUNC_08000e54(0x3f800000,uVar3);\n      uVar18 = FUNC_08000cec(param_7,uVar3);\n      uVar19 = FUNC_08000cec(param_8,uVar3);\n      uVar3 = FUNC_08000cec(param_9,uVar3);\n      iVar20 = FUNC_08000cec(iVar4,uVar18);\n      uVar21 = FUNC_08000cec(iVar4,uVar19);\n      uVar22 = FUNC_08000cec(iVar4,uVar3);\n      uVar23 = FUNC_08000cec(uVar8,uVar18);\n      uVar24 = FUNC_08000cec(uVar11,uVar18);\n      uVar25 = FUNC_08000cec(uVar30,uVar21);\n      uVar24 = FUNC_08000ad8(uVar24,uVar25);\n      uVar25 = FUNC_08000cec(uVar31,uVar22);\n      uVar24 = FUNC_08000adc(uVar24,uVar25);\n      uVar25 = FUNC_08000cec(uVar14,uVar18);\n      uVar24 = FUNC_08000adc(uVar24,uVar25);\n      uVar25 = FUNC_08000cec(uVar8,uVar19);\n      uVar25 = FUNC_08000cec(uVar25,uVar31);\n      uVar24 = FUNC_08000adc(uVar24,uVar25);\n      uVar25 = FUNC_08000cec(uVar8,uVar3);\n      uVar25 = FUNC_08000cec(uVar25,uVar30);\n      uVar24 = FUNC_08000adc(uVar24,uVar25);\n      uVar25 = FUNC_08000cec(uVar16,uVar18);\n      uVar24 = FUNC_08000ad8(uVar24,uVar25);\n      uVar25 = FUNC_08000cec(uVar17,uVar18);\n      uVar24 = FUNC_08000ad8(uVar24,uVar25);\n      uVar25 = FUNC_08000cec(uVar30,iVar20);\n      uVar26 = FUNC_08000cec(uVar11,uVar19);\n      uVar25 = FUNC_08000adc(uVar25,uVar26);\n      uVar22 = FUNC_08000cec(iVar29,uVar22);\n      uVar22 = FUNC_08000ad8(uVar25,uVar22);\n      uVar25 = FUNC_08000cec(uVar31,uVar23);\n      uVar22 = FUNC_08000adc(uVar22,uVar25);\n      uVar25 = FUNC_08000cec(uVar14,uVar19);\n      uVar22 = FUNC_08000ad8(uVar22,uVar25);\n      uVar25 = FUNC_08000cec(uVar16,uVar19);\n      uVar22 = FUNC_08000adc(uVar22,uVar25);\n      uVar25 = FUNC_08000cec(iVar9,uVar3);\n      uVar25 = FUNC_08000cec(uVar25,uVar30);\n      uVar22 = FUNC_08000adc(uVar22,uVar25);\n      uVar25 = FUNC_08000cec(uVar17,uVar19);\n      uVar22 = FUNC_08000ad8(uVar22,uVar25);\n      uVar24 = FUNC_08000cec(uVar24,uVar24);\n      uVar22 = FUNC_08000cec(uVar22,uVar22);\n      FUNC_08000adc(uVar24,uVar22);\n      reverseBits_08000428();\n      calculate_and_return_result_of_function_08005bc8();\n      iVar27 = calculate_float_bits_08000a30();\n      uVar22 = FUNC_08000cec(iVar20 + -0x80000000,uVar31);\n      uVar21 = FUNC_08000cec(iVar29,uVar21);\n      uVar21 = FUNC_08000adc(uVar22,uVar21);\n      uVar11 = FUNC_08000cec(uVar11,uVar3);\n      uVar11 = FUNC_08000adc(uVar21,uVar11);\n      uVar21 = FUNC_08000cec(uVar30,uVar23);\n      uVar11 = FUNC_08000adc(uVar11,uVar21);\n      uVar21 = FUNC_08000cec(uVar14,uVar3);\n      uVar11 = FUNC_08000ad8(uVar11,uVar21);\n      uVar21 = FUNC_08000cec(iVar9,uVar19);\n      uVar21 = FUNC_08000cec(uVar21,uVar30);\n      uVar11 = FUNC_08000adc(uVar11,uVar21);\n      uVar21 = FUNC_08000cec(uVar16,uVar3);\n      uVar11 = FUNC_08000ad8(uVar11,uVar21);\n      uVar21 = FUNC_08000cec(uVar17,uVar3);\n      uVar11 = FUNC_08000adc(uVar11,uVar21);\n      uVar21 = FUNC_08000adc(uVar11,uVar11);\n      uVar22 = FUNC_08000adc(uVar15);\n      uVar23 = FUNC_08000cec(uVar31,iVar4);\n      uVar22 = FUNC_08000ad8(uVar22,uVar23);\n      uVar23 = FUNC_08000cec(param_1,uVar2);\n      uVar22 = FUNC_08000ad8(uVar22,uVar23);\n      uVar23 = FUNC_08000cec(uVar30,iVar9);\n      uVar24 = FUNC_08000adc(uVar12);\n      uVar23 = FUNC_08000adc(uVar23,uVar24);\n      uVar24 = FUNC_08000cec(param_2,uVar2);\n      uVar23 = FUNC_08000ad8(uVar23,uVar24);\n      uVar24 = FUNC_08000cec(uVar31,uVar11);\n      uVar25 = FUNC_08000ad8(0x3f000000,uVar16);\n      uVar17 = FUNC_08000ad8(uVar25,uVar17);\n      uVar17 = FUNC_08000cec(uVar17,iVar27);\n      uVar25 = FUNC_08000ad8(uVar15,uVar13);\n      uVar25 = FUNC_08000cec(uVar25,uVar11);\n      uVar17 = FUNC_08000adc(uVar17,uVar25);\n      uVar17 = FUNC_08000ad8(uVar17,uVar18);\n      uVar18 = FUNC_08000cec(iVar29,uVar11);\n      uVar25 = FUNC_08000cec(iVar29,uVar31);\n      uVar26 = FUNC_08000cec(uVar28,uVar30);\n      uVar25 = FUNC_08000ad8(uVar25,uVar26);\n      uVar25 = FUNC_08000cec(uVar25,iVar27);\n      uVar26 = FUNC_08000cec(uVar31,uVar30);\n      uVar12 = FUNC_08000adc(uVar26,uVar12);\n      uVar12 = FUNC_08000cec(uVar12,uVar11);\n      uVar12 = FUNC_08000adc(uVar25,uVar12);\n      uVar12 = FUNC_08000ad8(uVar12,uVar19);\n      uVar19 = FUNC_08000cec(uVar31,iVar27);\n      uVar25 = FUNC_08000ad8(0x3f000000,uVar14);\n      uVar25 = FUNC_08000ad8(uVar25,uVar16);\n      uVar25 = FUNC_08000cec(uVar25,uVar11);\n      uVar13 = FUNC_08000adc(uVar13,uVar15);\n      uVar13 = FUNC_08000cec(uVar13,iVar27);\n      uVar13 = FUNC_08000adc(uVar25,uVar13);\n      uVar3 = FUNC_08000ad8(uVar13,uVar3);\n      uVar13 = FUNC_08000cec(iVar9 + -0x80000000,uVar22);\n      uVar15 = FUNC_08000cec(uVar8,uVar23);\n      uVar13 = FUNC_08000adc(uVar13,uVar15);\n      uVar15 = FUNC_08000cec(uVar24,uVar17);\n      uVar13 = FUNC_08000ad8(uVar13,uVar15);\n      uVar15 = FUNC_08000cec(uVar30,iVar27 + -0x80000000);\n      uVar15 = FUNC_08000adc(uVar15,uVar18);\n      uVar15 = FUNC_08000cec(uVar15,uVar12);\n      uVar13 = FUNC_08000adc(uVar13,uVar15);\n      uVar15 = FUNC_08000cec(uVar19,uVar3);\n      uVar13 = FUNC_08000adc(uVar13,uVar15);\n      uVar14 = FUNC_08000adc(uVar14);\n      uVar14 = FUNC_08000ad8(0x3f800000,uVar14);\n      uVar15 = FUNC_08000adc(uVar16);\n      uVar14 = FUNC_08000ad8(uVar14,uVar15);\n      uVar2 = FUNC_08000cec(param_3,uVar2);\n      uVar2 = FUNC_08000ad8(uVar14,uVar2);\n      uVar14 = FUNC_08000cec(uVar30,uVar11);\n      uVar11 = FUNC_08000cec(uVar28,uVar11);\n      uVar15 = FUNC_08000cec(uVar10,uVar22);\n      uVar16 = FUNC_08000cec(iVar4,uVar23);\n      uVar15 = FUNC_08000adc(uVar15,uVar16);\n      uVar16 = FUNC_08000cec(iVar29,0x40800000);\n      uVar16 = FUNC_08000cec(uVar16,uVar2);\n      uVar15 = FUNC_08000ad8(uVar15,uVar16);\n      uVar16 = FUNC_08000cec(uVar17,uVar14);\n      uVar15 = FUNC_08000adc(uVar15,uVar16);\n      uVar16 = FUNC_08000adc(uVar19,uVar11);\n      uVar16 = FUNC_08000cec(uVar16,uVar12);\n      uVar15 = FUNC_08000adc(uVar15,uVar16);\n      uVar16 = FUNC_08000cec(uVar30,iVar27);\n      uVar19 = FUNC_08000cec(iVar29,uVar21);\n      uVar16 = FUNC_08000ad8(uVar16,uVar19);\n      uVar16 = FUNC_08000cec(uVar16,uVar3);\n      uVar15 = FUNC_08000adc(uVar15,uVar16);\n      iVar20 = FUNC_08000adc(iVar27,iVar27);\n      uVar16 = FUNC_08000cec(iVar29,iVar27);\n      uVar19 = FUNC_08000cec(iVar4 + -0x80000000,uVar22);\n      uVar10 = FUNC_08000cec(uVar10,uVar23);\n      uVar10 = FUNC_08000adc(uVar19,uVar10);\n      uVar19 = FUNC_08000cec(uVar31,0x40800000);\n      uVar2 = FUNC_08000cec(uVar19,uVar2);\n      uVar2 = FUNC_08000ad8(uVar10,uVar2);\n      uVar10 = FUNC_08000cec(uVar31,iVar20 + -0x80000000);\n      uVar10 = FUNC_08000ad8(uVar10,uVar11);\n      uVar10 = FUNC_08000cec(uVar10,uVar17);\n      uVar2 = FUNC_08000adc(uVar2,uVar10);\n      uVar10 = FUNC_08000adc(uVar14,uVar16);\n      uVar10 = FUNC_08000cec(uVar10,uVar12);\n      uVar2 = FUNC_08000adc(uVar2,uVar10);\n      uVar10 = FUNC_08000cec(uVar28,iVar27);\n      uVar11 = FUNC_08000cec(uVar31,uVar21);\n      uVar10 = FUNC_08000ad8(uVar10,uVar11);\n      uVar10 = FUNC_08000cec(uVar10,uVar3);\n      uVar2 = FUNC_08000adc(uVar2,uVar10);\n      uVar8 = FUNC_08000cec(uVar8,uVar22);\n      uVar10 = FUNC_08000cec(iVar9,uVar23);\n      uVar8 = FUNC_08000adc(uVar8,uVar10);\n      uVar10 = FUNC_08000cec(uVar30,iVar20 + -0x80000000);\n      uVar10 = FUNC_08000adc(uVar10,uVar18);\n      uVar10 = FUNC_08000cec(uVar10,uVar17);\n      uVar8 = FUNC_08000adc(uVar8,uVar10);\n      uVar10 = FUNC_08000cec(uVar28,iVar27 + -0x80000000);\n      uVar10 = FUNC_08000adc(uVar10,uVar24);\n      uVar10 = FUNC_08000cec(uVar10,uVar12);\n      uVar8 = FUNC_08000adc(uVar8,uVar10);\n      uVar3 = FUNC_08000cec(uVar3,uVar16);\n      uVar3 = FUNC_08000adc(uVar8,uVar3);\n      uVar8 = FUNC_08000cec(uVar13);\n      uVar10 = FUNC_08000cec(uVar15);\n      uVar8 = FUNC_08000adc(uVar8,uVar10);\n      uVar10 = FUNC_08000cec(uVar2,uVar2);\n      uVar8 = FUNC_08000adc(uVar8,uVar10);\n      uVar10 = FUNC_08000cec(uVar3,uVar3);\n      FUNC_08000adc(uVar8,uVar10);\n      reverseBits_08000428();\n      calculate_and_return_result_of_function_08005bc8();\n      uVar8 = calculate_float_bits_08000a30();\n      uVar8 = FUNC_08000e54(0x3f800000,uVar8);\n      puVar1 = PTR_DAT_08003d84;\n      uVar12 = *(undefined4 *)PTR_DAT_08003d80;\n      uVar14 = *(undefined4 *)PTR_DAT_08003d80;\n      uVar16 = *(undefined4 *)PTR_DAT_08003d80;\n      uVar17 = *(undefined4 *)PTR_DAT_08003d80;\n      uVar10 = FUNC_08000cec(iVar29 + -0x80000000,uVar5);\n      uVar11 = FUNC_08000cec(uVar31,uVar6);\n      uVar10 = FUNC_08000ad8(uVar10,uVar11);\n      uVar11 = FUNC_08000cec(uVar30,uVar7);\n      uVar10 = FUNC_08000ad8(uVar10,uVar11);\n      uVar10 = FUNC_08000cec(uVar10,0x3f000000);\n      uVar11 = FUNC_08000cec(uVar13,uVar8);\n      uVar13 = *(undefined4 *)puVar1;\n      uVar11 = FUNC_08000cec(uVar11,uVar12);\n      uVar10 = FUNC_08000ad8(uVar10,uVar11);\n      uVar10 = FUNC_08000cec(uVar10,uVar13);\n      uVar10 = FUNC_08000adc(uVar10,uVar28);\n      uVar11 = FUNC_08000cec(uVar28,uVar5);\n      uVar12 = FUNC_08000cec(uVar31,uVar7);\n      uVar13 = *(undefined4 *)puVar1;\n      uVar11 = FUNC_08000adc(uVar11,uVar12);\n      uVar12 = FUNC_08000cec(uVar30,uVar6);\n      uVar11 = FUNC_08000ad8(uVar11,uVar12);\n      uVar11 = FUNC_08000cec(uVar11,0x3f000000);\n      uVar12 = FUNC_08000cec(uVar15,uVar8);\n      uVar12 = FUNC_08000cec(uVar12,uVar14);\n      uVar11 = FUNC_08000ad8(uVar11,uVar12);\n      uVar11 = FUNC_08000cec(uVar11,uVar13);\n      uVar11 = FUNC_08000adc(uVar11,iVar29);\n      uVar14 = *(undefined4 *)puVar1;\n      uVar12 = FUNC_08000cec(uVar28,uVar6);\n      uVar13 = FUNC_08000cec(iVar29,uVar7);\n      uVar12 = FUNC_08000ad8(uVar12,uVar13);\n      uVar13 = FUNC_08000cec(uVar30,uVar5);\n      uVar12 = FUNC_08000adc(uVar12,uVar13);\n      uVar12 = FUNC_08000cec(uVar12,0x3f000000);\n      uVar2 = FUNC_08000cec(uVar2,uVar8);\n      uVar2 = FUNC_08000cec(uVar2,uVar16);\n      uVar2 = FUNC_08000ad8(uVar12,uVar2);\n      uVar2 = FUNC_08000cec(uVar2,uVar14);\n      uVar2 = FUNC_08000adc(uVar2,uVar31);\n      uVar28 = FUNC_08000cec(uVar28,uVar7);\n      uVar6 = FUNC_08000cec(iVar29,uVar6);\n      uVar28 = FUNC_08000adc(uVar28,uVar6);\n      uVar31 = FUNC_08000cec(uVar31,uVar5);\n      uVar28 = FUNC_08000ad8(uVar28,uVar31);\n      uVar28 = FUNC_08000cec(uVar28,0x3f000000);\n      uVar3 = FUNC_08000cec(uVar3,uVar8);\n      uVar3 = FUNC_08000cec(uVar3,uVar17);\n      uVar31 = *(undefined4 *)puVar1;\n      uVar3 = FUNC_08000ad8(uVar28,uVar3);\n      uVar3 = FUNC_08000cec(uVar3,uVar31);\n      uVar3 = FUNC_08000adc(uVar3,uVar30);\n      uVar28 = FUNC_08000cec(uVar10,uVar10);\n      uVar30 = FUNC_08000cec(uVar11,uVar11);\n      uVar28 = FUNC_08000adc(uVar28,uVar30);\n      uVar30 = FUNC_08000cec(uVar2,uVar2);\n      uVar28 = FUNC_08000adc(uVar28,uVar30);\n      uVar30 = FUNC_08000cec(uVar3,uVar3);\n      FUNC_08000adc(uVar28,uVar30);\n      reverseBits_08000428();\n      calculate_and_return_result_of_function_08005bc8();\n      uVar28 = calculate_float_bits_08000a30();\n      uVar28 = FUNC_08000e54(0x3f800000,uVar28);\n      uVar30 = FUNC_08000cec(uVar10,uVar28);\n      puVar1 = PTR_DAT_08003d88;\n      *(undefined4 *)PTR_DAT_08003d88 = uVar30;\n      uVar31 = FUNC_08000cec(uVar11,uVar28);\n      *(undefined4 *)(puVar1 + 4) = uVar31;\n      uVar2 = FUNC_08000cec(uVar2,uVar28);\n      *(undefined4 *)(puVar1 + 8) = uVar2;\n      uVar3 = FUNC_08000cec(uVar3,uVar28);\n      *(undefined4 *)(puVar1 + 0xc) = uVar3;\n      uVar3 = FUNC_08000cec(uVar31,uVar3);\n      uVar2 = FUNC_08000cec(uVar30,uVar2);\n      uVar2 = FUNC_08000ad8(uVar3,uVar2);\n      FUNC_08000adc(uVar2,uVar2);\n      reverseBits_08000428();\n      uVar32 = process_input_and_return_result_08005854();\n      uVar32 = FUNC_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_08003d8c);\n      FUNC_08000724((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003d78,DAT_08003d7c);\n      uVar2 = calculate_float_bits_08000a30();\n      *param_10 = uVar2;\n      uVar31 = *(undefined4 *)puVar1;\n      uVar5 = *(undefined4 *)(puVar1 + 4);\n      uVar2 = FUNC_08000cec(uVar31,uVar31);\n      uVar3 = FUNC_08000cec(uVar5,uVar5);\n      uVar2 = FUNC_08000ad8(uVar2,uVar3);\n      uVar28 = *(undefined4 *)(puVar1 + 8);\n      uVar3 = FUNC_08000cec(uVar28,uVar28);\n      uVar2 = FUNC_08000ad8(uVar2,uVar3);\n      uVar30 = *(undefined4 *)(puVar1 + 0xc);\n      uVar3 = FUNC_08000cec(uVar30,uVar30);\n      FUNC_08000adc(uVar2,uVar3);\n      uVar32 = reverseBits_08000428();\n      uVar2 = FUNC_08000cec(uVar31,uVar5);\n      uVar3 = FUNC_08000cec(uVar28,uVar30);\n      uVar2 = FUNC_08000adc(uVar2,uVar3);\n      FUNC_08000adc(uVar2,uVar2);\n      uVar33 = reverseBits_08000428();\n      uVar32 = thunk_calculate_result_08006070((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar32,\n                                  (int)((ulonglong)uVar32 >> 0x20));\n      uVar32 = FUNC_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_08003ea8);\n      FUNC_08000724((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003ea0,DAT_08003ea4);\n      uVar2 = calculate_float_bits_08000a30();\n      param_10[1] = uVar2;\n      uVar30 = *(undefined4 *)puVar1;\n      uVar31 = *(undefined4 *)(puVar1 + 4);\n      uVar2 = FUNC_08000cec(uVar30,uVar30);\n      uVar3 = FUNC_08000cec(uVar31,uVar31);\n      uVar2 = FUNC_08000adc(uVar2,uVar3);\n      uVar5 = *(undefined4 *)(puVar1 + 8);\n      uVar3 = FUNC_08000cec(uVar5,uVar5);\n      uVar2 = FUNC_08000ad8(uVar2,uVar3);\n      uVar28 = *(undefined4 *)(puVar1 + 0xc);\n      uVar3 = FUNC_08000cec(uVar28,uVar28);\n      FUNC_08000ad8(uVar2,uVar3);\n      uVar32 = reverseBits_08000428();\n      uVar2 = FUNC_08000cec(uVar31,uVar5);\n      uVar3 = FUNC_08000cec(uVar30,uVar28);\n      uVar2 = FUNC_08000adc(uVar2,uVar3);\n      FUNC_08000adc(uVar2,uVar2);\n      uVar33 = reverseBits_08000428();\n      uVar32 = thunk_calculate_result_08006070((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar32,\n                                  (int)((ulonglong)uVar32 >> 0x20));\n      uVar32 = FUNC_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_08003ea8);\n      FUNC_08000724((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003ea0,DAT_08003ea4);\n      uVar2 = calculate_float_bits_08000a30();\n      param_10[2] = uVar2;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08000724",
                "FUN_08001014",
                "FUN_08005854",
                "FUN_08000adc",
                "FUN_080004d0",
                "FUN_08000428",
                "FUN_08000e54",
                "FUN_08005bc8",
                "FUN_08000a30",
                "thunk_FUN_08006070"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003330",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "FUNC_08003330"
        },
        "FUN_08000980": {
            "renaming": {
                "FUN_08000980": "validate_parameters_and_return_08000980",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "validate_parameters_08000990": "validate_parameters"
            },
            "code": "void validate_parameters_and_return_08000980(void* input_1, void* input_2, void* input_3, void* input_4)\n{\n  validate_parameters(input_3, input_4, input_1, input_2);\n  return;\n}",
            "called": [
                "FUN_08000990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000980",
            "calling": [
                "FUN_080009f0"
            ],
            "imported": false,
            "current_name": "validate_parameters_and_return_08000980"
        },
        "FUN_08004028": {
            "renaming": {
                "FUN_08004028": "set_integer_offsets_and_count_leading_zeroes_08004028",
                "count_leading_zeroes_and_set_integer_offsets_08003f3c": "count_leading_zeroes_and_set_integer_offsets",
                "thunk_do_nothing_08001168": "wait_for_some_time",
                "set_bits_in_memory_08003ff4": "set_bits_in_memory",
                "iVar1": "counter"
            },
            "code": "void set_integer_offsets_and_count_leading_zeroes_08004028(void)\n{\n  int counter = 3;\n  FUNC_initialize();\n  set_bits_in_memory();\n  do {\n    count_leading_zeroes_and_set_integer_offsets(1,0,0);\n    wait_for_some_time(100);\n    count_leading_zeroes_and_set_integer_offsets(0,1,0);\n    wait_for_some_time(100);\n    count_leading_zeroes_and_set_integer_offsets(0,0,1);\n    wait_for_some_time(100);\n    counter--;\n  } while (counter != 0);\n  count_leading_zeroes_and_set_integer_offsets(1,1,0);\n  return;\n}",
            "called": [
                "thunk_FUN_08001168",
                "FUN_08003f3c",
                "FUN_0800458c",
                "FUN_08003ff4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004028",
            "calling": [
                "FUN_08004194"
            ],
            "imported": false,
            "current_name": "set_integer_offsets_and_count_leading_zeroes_08004028"
        },
        "FUN_0800708c": {
            "renaming": {
                "FUN_0800708c": "do_nothing_0800708c"
            },
            "code": "\nvoid do_nothing_0800708c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800708c",
            "calling": [
                "FUN_08006070",
                "FUN_08006228",
                "FUN_08005854",
                "FUN_08006d68",
                "FUN_08005c70"
            ],
            "imported": false,
            "current_name": "do_nothing_0800708c"
        },
        "FUN_08002368": {
            "renaming": {
                "FUN_08002368": "update_memory_08002368",
                "param_1": "memory_location",
                "param_2": "new_values",
                "uVar1": "current_value",
                "puVar2": "ptr"
            },
            "code": "void update_memory_08002368(uint *memory_location, uint *new_values)\n{\n  uint current_value = *memory_location;\n  if ((((memory_location == ptr_080023cc) || (memory_location == (uint *)0x40000000)) || (memory_location == ptr_080023cc - 0x4a00)) || (memory_location == ptr_080023cc - 0x4900)) {\n    current_value = current_value & 0xffffff8f | new_values[1];\n    if (((memory_location == ptr_080023cc) || (memory_location == (uint *)0x40000000)) || ((memory_location == ptr_080023cc - 0x4a00 || (memory_location == ptr_080023cc - 0x4900)))) {\n      current_value = current_value & 0xfffffcff | new_values[3];\n    }\n  }\n  *memory_location = current_value;\n  memory_location[0xb] = new_values[2];\n  memory_location[10] = *new_values;\n  uint *ptr = ptr_080023cc;\n  if (memory_location == ptr_080023cc) {\n    ptr = (uint *)new_values[4];\n  }\n  if (memory_location == ptr_080023cc) {\n    memory_location[0xc] = (uint)ptr;\n  }\n  memory_location[5] = 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002368",
            "calling": [
                "FUN_080023d0"
            ],
            "imported": false,
            "current_name": "update_memory_08002368"
        },
        "FUN_08002520": {
            "renaming": {
                "FUN_08002520": "update_bit_08002520",
                "param_1": "memory",
                "param_2": "bit_position",
                "param_3": "new_bit_value",
                "PTR_": "",
                "DAT_": "",
                "*": "",
                "&": "",
                "uint": "uint8_t",
                "uint8_t *": "memory",
                "uint8_t": "bit_position",
                "bit_mask": "bit_mask"
            },
            "code": "void update_bit_08002520(uint8_t *memory, uint8_t bit_position, uint8_t new_bit_value) {\n    uint8_t *ptr = memory + 0x20;\n    uint8_t bit_mask = ~(1 << (bit_position & 0xff));\n    *ptr = (*ptr) & bit_mask;\n    *ptr = new_bit_value << (bit_position & 0xff) | (*ptr);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002520",
            "calling": [
                "FUN_08002538"
            ],
            "imported": false,
            "current_name": "update_bit_08002520"
        },
        "FUN_08002008": {
            "renaming": {
                "FUN_08002008": "calculate_value_08002008",
                "uVar1": "temp_var_1",
                "uVar2": "temp_var_2",
                "uVar3": "data_1",
                "uVar4": "shift",
                "uVar5": "value",
                "puVar6": "table_ptr",
                "puVar7": "lookup_ptr",
                "local_24": "local_array",
                "local_20": "lookup_table"
            },
            "code": "uint calculate_value_08002008(void)\n{\n    uint value = 0;\n    uint data_1 = *(uint *)(DAT_08002090 + 4);\n    uint data_2 = DAT_08002094;\n    byte local_array[4] = {1, 2, 0, 0};\n    uint lookup_table[5] = {0};\n    uint *table_ptr = (uint *)PTR_DAT_0800208c;\n    uint *lookup_ptr = lookup_table;\n    for (int i = 0; i < 5; i++) {\n        *lookup_ptr++ = *table_ptr++;\n        *lookup_ptr++ = *table_ptr++;\n    }\n    if ((data_1 & 0xc) == 8) {\n        uint shift = count_leading_zeroes(0x3c00);\n        if ((int)(data_1 << 0xf) < 0) {\n            uint divisor_shift = count_leading_zeroes(0x4000);\n            uint divisor = local_array[(data_1 & 0x20000) >> (divisor_shift & 0xff)];\n            data_2 = DAT_08002094 / divisor;\n        }\n        uint index = (data_1 & 0x3c0000) >> (shift & 0xff);\n        value = data_2 * lookup_table[index];\n    }\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002008",
            "calling": [
                "FUN_0800209c"
            ],
            "imported": false,
            "current_name": "calculate_value_08002008"
        },
        "FUN_08002404": {
            "renaming": {
                "FUN_08002404": "update_values_08002404",
                "param_1": "base_address",
                "param_2": "params",
                "uVar1": "new_value1",
                "uVar2": "new_value2",
                "iVar3": "new_value3",
                "mask1": "0xffffffef",
                "mask2": "0xfffff3ff",
                "mask3": "0xffffffdf"
            },
            "code": "void update_values_08002404(int base_address, int *params){\n  uint mask1 = 0xffffffef;\n  uint mask2 = 0xfffff3ff;\n  uint mask3 = 0xffffffdf;\n  uint new_value1 = (params[2] << 4) & mask3;\n  uint new_value2 = *(uint *)(base_address + 4) & mask2 | (params[5] | params[6]) << 2;\n  int new_value3 = params[0] << 8;\n  *(uint *)(base_address + 0x20) &= mask1;\n  if (base_address == PTR_DAT_08002458) {\n    new_value1 |= (params[3] << 4) & ~mask3;\n    new_value2 &= ~mask2;\n  }\n  *(uint *)(base_address + 4) = new_value2;\n  *(uint *)(base_address + 0x18) = *(uint *)(base_address + 0x18) & 0xffff8cff | new_value3;\n  *(int *)(base_address + 0x38) = params[1];\n  *(uint *)(base_address + 0x20) |= new_value1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002404",
            "calling": [
                "FUN_0800245c"
            ],
            "imported": false,
            "current_name": "update_values_08002404"
        },
        "FUN_08005bc8": {
            "renaming": {
                "FUN_08005bc8": "calculate_and_return_result_of_function_08005bc8",
                "param_1": "input1",
                "param_2": "input2",
                "cVar1": "input_char",
                "local_30": "input_validation_result",
                "iVar2": "is_input_null_result",
                "local_50": "local_variable1",
                "local_4c": "local_variable2",
                "local_48": "local_variable3",
                "uStack_44": "stack_variable1",
                "local_40": "local_variable4",
                "uStack_3c": "stack_variable2",
                "local_38": "local_variable5",
                "piVar3": "pointer_to_input_validation_result",
                "puVar4": "pointer_to_array_value"
            },
            "code": "undefined8 calculate_and_return_result_of_function_08005bc8(undefined4 input1, undefined4 input2)\n{\n  char input_char;\n  int input_validation_result;\n  int *pointer_to_input_validation_result;\n  undefined4 *pointer_to_array_value;\n  undefined8 result;\n  undefined4 local_variable1;\n  undefined *local_variable2;\n  undefined4 local_variable3;\n  undefined4 stack_variable1;\n  undefined4 local_variable4;\n  undefined4 stack_variable2;\n  undefined8 local_variable5;\n  int is_input_null_result;\n  result = calculate_float_08006c0c();\n  input_char = *PTR_DAT_08005c68;\n  if (input_char == -1) {\n    return result;\n  }\n  input_validation_result = is_valid_input_08000a04(input1, input2, input1, input2);\n  if (input_validation_result != 0) {\n    return result;\n  }\n  is_input_null_result = is_input_null_080009b4_080009b4(input1, input2, 0, 0);\n  if (is_input_null_result == 0) {\n    return result;\n  }\n  local_variable1 = 1;\n  local_variable2 = PTR_DAT_08005c6c;\n  local_variable3 = input1;\n  stack_variable1 = input2;\n  local_variable4 = input1;\n  stack_variable2 = input2;\n  if (input_char == '\\0') {\n    local_variable5 = 0;\nLAB_08005c26:\n    input_validation_result = returnZero_0800709e(&local_variable1);\n    if (input_validation_result != 0) goto LAB_08005c2e;\n  }\n  else {\n    local_variable5 = FUNC_08000724(0,0,0,0);\n    if (input_char != '\\x02') goto LAB_08005c26;\n  }\n  pointer_to_array_value = (undefined4 *)get_first_value_in_pointer_array_080072ac();\n  *pointer_to_array_value = 0x21;\nLAB_08005c2e:\n  if (input_validation_result != 0) {\n    pointer_to_input_validation_result = (int *)get_first_value_in_pointer_array_080072ac();\n    *pointer_to_input_validation_result = input_validation_result;\n  }\n  return local_variable5;\n}",
            "called": [
                "FUN_08000a04",
                "FUN_08006c0c",
                "FUN_08000724",
                "FUN_0800709e",
                "FUN_080072ac",
                "FUN_080009b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bc8",
            "calling": [
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "calculate_and_return_result_of_function_08005bc8"
        },
        "FUN_08001436": {
            "renaming": {
                "FUN_08001436": "disable_feature_if_flag_set_08001436",
                "param_1": "data",
                "iVar1": "data_pointer"
            },
            "code": "int disable_feature_if_flag_set_08001436(int *data)\n{\n  int data_pointer = *data;\n  if ((*(uint *)(data_pointer + 0x14) & 0x400) != 0) {\n    *(uint *)(data_pointer + 0x14) = *(uint *)(data_pointer + 0x14) & 0xfffffbff;\n    data[14] = 4;\n    *(undefined *)((int)data + 0x35) = 0x20;\n    *(undefined *)(data + 13) = 0;\n    return 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001436",
            "calling": [
                "FUN_080014e2"
            ],
            "imported": false,
            "current_name": "disable_feature_if_flag_set_08001436"
        },
        "FUN_08004a30": {
            "renaming": {
                "FUN_08004a30": "update_data_if_needed_08004a30",
                "PTR_DAT_08004a7c": "data_end",
                "PTR_DAT_08004a78": "data_middle",
                "PTR_DAT_08004a74": "data_start",
                "get_value_from_pointer_08003068": "get_value_from_pointer",
                "FUNC_08000cec": "process_value",
                "DAT_08004a80": "constant"
            },
            "code": "void update_data_if_needed_08004a30()\n{\n  undefined *PTR_DAT_08004a7c = data + 0x48;\n  undefined *PTR_DAT_08004a78 = data + 0x30;\n  undefined *PTR_DAT_08004a74 = data + 0x1c;\n  if (PTR_DAT_08004a74[1] != '\\0') {\n    if (*PTR_DAT_08004a78 == '\\0') {\n      int value = get_value_from_pointer();\n      int result = process_value(value, DAT_08004a80);\n      *(int *)(PTR_DAT_08004a7c) = result;\n      *PTR_DAT_08004a78 = 1;\n    }\n    else {\n      int value = get_value_from_pointer();\n      int result = process_value(value, DAT_08004a80);\n      *(int *)(PTR_DAT_08004a78) = result;\n    }\n  }\n  if (PTR_DAT_08004a74[1] == '\\0') {\n    if (*PTR_DAT_08004a78 != '\\0') {\n      *PTR_DAT_08004a78 = 0;\n    }\n    *(int *)(PTR_DAT_08004a7c) = *(int *)(PTR_DAT_08004a74 + 4);\n  }\n  return;\n}",
            "called": [
                "FUN_08003068",
                "FUN_08000cec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a30",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "update_data_if_needed_08004a30"
        },
        "FUN_08004c70": {
            "renaming": {
                "FUN_08004c70": "initialize_device_08004c70",
                "puVar1": "buffer",
                "puVar2": "param1",
                "uVar3": "device_type",
                "uVar4": "mask",
                "iVar5": "device_address"
            },
            "code": "int initialize_device_08004c70() {\n  char *buffer = PTR_DAT_08004c64;\n  char *param1 = PTR_DAT_08004c88;\n  char *param2 = PTR_DAT_08004c84;\n  if ((param1[0x39] == '\\x01') || (param1[0x39] == '\\x12')) {\n    if (param2 == (char *)0x0) {\n      return 1;\n    }\n    if (param1[0x38] != '\\x01') {\n      param1[0x38] = 1;\n      *(int *)(param1 + 0x3c) = 0;\n      *(short *)(param1 + 0x2c) = 1;\n      *(short *)(param1 + 0x2e) = 1;\n      param1[0x38] = 0;\n      char uVar3;\n      if (param1[0x39] == '\\x12') {\n        uVar3 = 0x32;\n      }\n      else {\n        uVar3 = 0x22;\n      }\n      int iVar5 = *(int *)param1;\n      param1[0x39] = uVar3;\n      uint uVar4 = *(uint *)(iVar5 + 0xc);\n      *(char **)(param1 + 0x28) = param2;\n      *(uint *)(iVar5 + 0xc) = uVar4 | 0x100;\n      *(uint *)(iVar5 + 0x14) = *(uint *)(iVar5 + 0x14) | 1;\n      *(uint *)(iVar5 + 0xc) = *(uint *)(iVar5 + 0xc) | 0x20;\n      return 0;\n    }\n  }\n  return 2;\n}\n",
            "called": [
                "FUN_08004c64"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c70",
            "calling": [
                "FUN_08004194"
            ],
            "imported": false,
            "current_name": "initialize_device_08004c70"
        },
        "FUN_08000904": {
            "renaming": {
                "FUN_08000904": "check_parameters_08000904",
                "param_1": "parameter_1",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "uVar1": "xor_param2_and_param4",
                "bVar2": "is_param1_and_param2_zero",
                "bVar3": "is_param4_less_than_or_equal_to_param2",
                "is_param2_or_param4_negative": "is_param2_or_param4_negative",
                "is_param1_or_param3_nonzero": "is_param1_or_param3_nonzero",
                "is_param1_and_param3_equal": "is_param1_and_param3_equal",
                "is_xor_param2_and_param4_negative": "is_xor_param2_and_param4_negative",
                "is_param3_less_than_or_equal_to_param1": "is_param3_less_than_or_equal_to_param1"
            },
            "code": "uint check_parameters_08000904(uint parameter_1, uint parameter_2, uint parameter_3, uint parameter_4)\n{\n  bool is_param2_or_param4_negative = ((int)(parameter_2 << 1) >> 0x15 == -1 || (int)(parameter_4 << 1) >> 0x15 == -1);\n  bool is_param1_or_param3_nonzero = (((int)(parameter_2 << 1) >> 0x15 == -1 && ((parameter_1 | parameter_2 << 0xc) != 0)) || (((int)(parameter_4 << 1) >> 0x15 == -1 && ((parameter_3 | parameter_4 << 0xc) != 0))));\n  if (is_param2_or_param4_negative && is_param1_or_param3_nonzero) {\n    return 1;\n  }\n  bool is_param1_and_param2_zero = (parameter_1 | parameter_2 << 1) == 0;\n  bool is_param3_and_param4_zero = (parameter_3 | parameter_4 << 1) == 0;\n  if (!is_param1_and_param2_zero && !is_param3_and_param4_zero) {\n    bool is_param2_and_param4_equal = parameter_2 == parameter_4;\n    bool is_param1_and_param3_equal = parameter_1 == parameter_3;\n    if (!is_param2_and_param4_equal && !is_param1_and_param3_equal) {\n      uint xor_param2_and_param4 = parameter_2 ^ parameter_4;\n      bool is_xor_param2_and_param4_negative = -1 < (int)xor_param2_and_param4;\n      bool is_param4_less_than_or_equal_to_param2 = param_4 <= param_2;\n      bool is_param3_less_than_or_equal_to_param1 = param_3 <= param_1;\n      if (is_xor_param2_and_param4_negative && is_param4_less_than_or_equal_to_param2 && is_param3_less_than_or_equal_to_param1) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000904",
            "calling": [
                "FUN_08000990"
            ],
            "imported": false,
            "current_name": "check_parameters_08000904"
        },
        "FUN_0800299a": {
            "renaming": {
                "FUN_0800299a": "process_data_0800299a",
                "param_1": "data",
                "uVar1": "data_value_1",
                "sVar2": "data_value_2",
                "uVar3": "data_value_3",
                "puVar4": "data_pointer_1",
                "uVar5": "data_value_4",
                "puVar6": "data_pointer_2",
                "uVar7": "data_value_5",
                "bVar8": "data_bool_1"
            },
            "code": "void process_data_0800299a(uint **data)\n{\n  uint data_value_1;\n  short data_value_2;\n  uint data_value_3;\n  uint *data_pointer_1;\n  undefined data_value_4;\n  uint *data_pointer_2;\n  uint data_value_5;\n  bool data_bool_1;\n  \n  data_pointer_2 = *data;\n  data_value_3 = *data_pointer_2;\n  data_value_1 = data_pointer_2[3];\n  if ((data_value_3 & 0xf) == 0) {\n    if (((int)(data_value_3 << 0x1a) < 0) && ((int)(data_value_1 << 0x1a) < 0)) {\n      process_data_0800299a_0800290c();\n      return;\n    }\n  }\n  else {\n    data_value_5 = data_pointer_2[5] & 1;\n    if ((data_value_5 != 0) || ((data_value_1 & 0x120) != 0)) {\n      data_pointer_2 = (uint *)(data_value_3 << 0x1f);\n      if ((int)data_pointer_2 < 0) {\n        data_bool_1 = (int)(data_value_1 << 0x17) < 0;\n        if (data_bool_1) {\n          data_pointer_2 = (uint *)((uint)data[0xf] | 1);\n        }\n        if (data_bool_1) {\n          data[0xf] = data_pointer_2;\n        }\n      }\n      if (((int)(data_value_3 << 0x1d) < 0) && (data_value_5 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 2);\n      }\n      if (((int)(data_value_3 << 0x1e) < 0) && (data_value_5 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 4);\n      }\n      if (((int)(data_value_3 << 0x1c) < 0) && (data_value_5 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 8);\n      }\n      if (data[0xf] == (uint *)0x0) {\n        return;\n      }\n      if (((int)(data_value_3 << 0x1a) < 0) && ((int)(data_value_1 << 0x1a) < 0)) {\n        process_data_0800299a(data);\n      }\n      data_pointer_2 = *data;\n      if ((-1 < (int)data[0xf] << 0x1c) && ((data_pointer_2[5] & 0x40) == 0)) {\n        do_nothing(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      data_pointer_2[3] = data_pointer_2[3] & 0xfffffedf;\n      data_pointer_2[5] = data_pointer_2[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 1;\n      do_nothing(data);\n      return;\n    }\n  }\n  if (((int)(data_value_3 << 0x18) < 0) && ((int)(data_value_1 << 0x18) < 0)) {\n    if ((*(byte *)((int)data + 0x39) & 0xdf) == 0x12) {\n      data_pointer_1 = data[8];\n      if (data[2] == (uint *)0x1000) {\n        data_pointer_2[1] = *(ushort *)data_pointer_1 & 0x1ff;\n        if (data[4] == (uint *)0x0) {\n          data_pointer_1 = (uint *)((int)data_pointer_1 + 2);\n        }\n        else {\n          data_pointer_1 = (uint *)((int)data_pointer_1 + 1);\n        }\n        data[8] = data_pointer_1;\n      }\n      else {\n        data[8] = (uint *)((int)data_pointer_1 + 1);\n        data_pointer_2[1] = (uint)*(byte *)data_pointer_1;\n      }\n      data_value_2 = *(short *)((int)data + 0x26) + -1;\n      *(short *)((int)data + 0x26) = data_value_2;\n      if (data_value_2 == 0) {\n        data_pointer_2[3] = data_pointer_2[3] & 0xffffff7f;\n        data_pointer_2[3] = data_pointer_2[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(data_value_3 << 0x19) < 0) && ((int)(data_value_1 << 0x19) < 0)) {\n    data_pointer_2[3] = data_pointer_2[3] & 0xffffffbf;\n    if (*(char *)((int)data + 0x39) == '2') {\n      data_value_4 = 0x22;\n    }\n    else {\n      data_value_4 = 1;\n    }\n    *(undefined *)((int)data + 0x39) = data_value_4;\n    do_nothing_0800290a(data);\n  }\n  return;\n}",
            "called": [
                "FUN_08002998",
                "FUN_0800290a",
                "FUN_0800290c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800299a",
            "calling": [],
            "imported": false,
            "current_name": "process_data_0800299a"
        },
        "FUN_0800114c": {
            "renaming": {
                "FUN_0800114c": "increment_pointer_value_0800114c",
                "PTR_DAT_08001158": "pointer_to_value"
            },
            "code": "void increment_pointer_value_0800114c(void)\n{\n  int* PTR_DAT_08001158 = (int*)PTR_DAT_08001158;\n  *PTR_DAT_08001158 = *PTR_DAT_08001158 + 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800114c",
            "calling": [
                "FUN_080041ae"
            ],
            "imported": false,
            "current_name": "increment_pointer_value_0800114c"
        },
        "FUN_080052e4": {
            "renaming": {
                "FUN_080052e4": "process_data_080052e4",
                "param_1": "input",
                "param_2": "buffer",
                "param_3": "output",
                "param_4": "param_4",
                "param_5": "callback",
                "iVar1": "i",
                "uVar2": "max_buffer_size",
                "uVar3": "data_offset",
                "bVar4": "buffer_offset_is_not_4",
                "buffer_offset": "buffer_offset",
                "result": "result",
                "additional_offset": "additional_offset",
                "buffer_size": "buffer_size",
                "data_size": "data_size"
            },
            "code": "undefined4 process_data_080052e4(undefined4 input, uint *buffer, uint *output, undefined4 param_4, code *callback)\n{\n    int i;\n    uint max_buffer_size = buffer[4];\n    if (max_buffer_size < buffer[2]) {\n        max_buffer_size = buffer[2];\n    }\n    *output = max_buffer_size;\n    if (*(char *)((int)buffer + 0x43) != '\\0') {\n        *output = max_buffer_size + 1;\n    }\n    if ((int)(*buffer << 0x1a) < 0) {\n        *output = *output + 2;\n    }\n    uint buffer_offset = *buffer & 6;\n    if (buffer_offset == 0) {\n        for (; (int)buffer_offset < (int)(buffer[3] - *output); buffer_offset++) {\n            int result = (*callback)(input, param_4, (int)buffer + 0x19, 1);\n            if (result == -1) {\n                return 0xffffffff;\n            }\n        }\n    }\n    uint additional_offset = (uint)*(byte *)((int)buffer + 0x43);\n    if (additional_offset != 0) {\n        additional_offset = 1;\n    }\n    uint data_offset = additional_offset;\n    if ((int)(*buffer << 0x1a) < 0) {\n        *(undefined *)((int)buffer + additional_offset + 0x43) = 0x30;\n        data_offset = additional_offset + 2;\n        *(undefined *)((int)buffer + additional_offset + 0x44) = *(undefined *)((int)buffer + 0x45);\n    }\n    int result = (*callback)(input, param_4, (int)buffer + 0x43, data_offset);\n    if (result != -1) {\n        uint buffer_size = buffer[3];\n        bool buffer_offset_is_not_4 = (*buffer & 6) != 4;\n        if (buffer_offset_is_not_4) {\n            buffer_size = 0;\n        }\n        uint data_size = 0;\n        if (!buffer_offset_is_not_4) {\n            buffer_size = buffer_size - *output;\n        }\n        if (!buffer_offset_is_not_4) {\n            buffer_size = buffer_size & ~((int)buffer_size >> 0x1f);\n        }\n        if (max_buffer_size < buffer[2]) {\n            buffer_size = buffer_size + (buffer[2] - buffer[4]);\n        }\n        while (true) {\n            if (buffer_size == data_size) {\n                return 0;\n            }\n            result = (*callback)(input, param_4, (int)buffer + 0x1a, 1);\n            if (result == -1) {\n                break;\n            }\n            data_size++;\n        }\n    }\n    return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052e4",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": false,
            "current_name": "process_data_080052e4"
        },
        "FUN_080014e2": {
            "renaming": {
                "FUN_080014e2": "check_feature_disabled_080014e2",
                "param_1": "feature",
                "param_2": "max_time_difference",
                "iVar1": "start_time",
                "iVar2": "disable_result"
            },
            "code": "int check_feature_disabled_080014e2(int *feature, uint32_t max_time_difference) {\n  int start_time = get_current_time();\n  while( true ) {\n    if (*(int *)(*feature + 0x14) << 0x18 < 0) {\n      return 0;\n    }\n    int disable_result = disable_feature_if_flag_set(feature);\n    if (disable_result != 0) {\n      break;\n    }\n    if ((max_time_difference != 0xffffffff) &&\n       ((max_time_difference == 0 || (disable_result = get_current_time(), max_time_difference < (uint32_t)(disable_result - start_time))))) {\n      feature[14] |= 0x20;\n      *(undefined *)((int)feature + 0x35) = 0x20;\n      *(undefined *)(feature + 0xd) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_0800115c",
                "FUN_08001436"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014e2",
            "calling": [
                "FUN_08001530",
                "FUN_08001828",
                "FUN_080015e8"
            ],
            "imported": false,
            "current_name": "check_feature_disabled_080014e2"
        },
        "FUN_0800142e": {
            "renaming": {
                "FUN_0800142e": "bitwise_xor_0800142e",
                "param_1": "ptr_param_1",
                "param_2": "param_2",
                "*(uint *)(param_1 + 0xc)": "*ptr_dat_1",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void bitwise_xor_0800142e(uint32_t *PTR_param_1, uint32_t param_2)\n{\n    uint32_t *PTR_DAT_1 = PTR_param_1 + 0xc;\n    *PTR_DAT_1 = param_2 ^ *PTR_DAT_1;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800142e",
            "calling": [
                "FUN_08004490"
            ],
            "imported": false,
            "current_name": "bitwise_xor_0800142e"
        },
        "FUN_08004d8c": {
            "renaming": {
                "FUN_08004d8c": "update_status_08004d8c",
                "param_1": "status",
                "iVar1": "current_status",
                "DAT_08004e04": "CURRENT_STATUS_A",
                "DAT_08004e0c": "CURRENT_STATUS_C",
                "DAT_08004e10": "CURRENT_STATUS_D",
                "DAT_08004e08": "STATUS_REGISTER",
                "*(uint *)(DAT_08004e08 + 0x18)": "STATUS_FLAG_A",
                "*(uint *)(DAT_08004e08 + 0x1c)": "STATUS_FLAG_C",
                "_DAT_4002101c": "STATUS_FLAG_B"
            },
            "code": "void update_status_08004d8c(int *status) {\n  int current_status = *status;\n  if (current_status == DAT_08004e04) {\n    *(uint *)(DAT_08004e08 + 0x18) = *(uint *)(DAT_08004e08 + 0x18) | *(uint *)(DAT_08004e08 + 0x18);\n  }\n  else if (current_status == CURRENT_STATUS_B) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (current_status == DAT_08004e0c) {\n    *(uint *)(DAT_08004e08 + 0x1c) = *(uint *)(DAT_08004e08 + 0x1c) | *(uint *)(DAT_08004e08 + 0x1c);\n  }\n  else if (current_status == DAT_08004e10) {\n    *(uint *)(DAT_08004e08 + 0x1c) = *(uint *)(DAT_08004e08 + 0x1c) | STATUS_FLAG_D;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d8c",
            "calling": [
                "FUN_080023d0"
            ],
            "imported": false,
            "current_name": "update_status_08004d8c"
        },
        "FUN_08002250": {
            "renaming": {
                "FUN_08002250": "get_shifted_value_08002250",
                "uVar1": "leading_zeroes",
                "count_leading_zeroes": "count_leading_zeroes",
                "PTR_DAT_0800227c": "ptr_data_1",
                "PTR_DAT_08002278": "ptr_data_2",
                "DAT_08002274": "data_1"
            },
            "code": "uint get_shifted_value_08002250(uint num) {\n    uint count = 0;\n    while (num >>= 1) {\n        count++;\n    }\n    return 31 - count;\n}\n\nuint get_shifted_value_08002250() {\n    uint leading_zeroes = get_shifted_value_08002250(0x1c0000);\n    uint shift_amount = (*(uint *)PTR_DAT_0800227c) >> PTR_DAT_08002278[(*(uint *)(DAT_08002274 + 4) & 0x3800) >> (leading_zeroes & 0xff)];\n    return shift_amount;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002250",
            "calling": [
                "FUN_080025e8"
            ],
            "imported": false,
            "current_name": "get_shifted_value_08002250"
        },
        "FUN_080009b4": {
            "renaming": {
                "FUN_080009b4": "is_input_null_080009b4_080009b4",
                "in_CY": "input_character"
            },
            "code": "bool is_input_null_080009b4_080009b4(void)\n{\n  char input_character;\n  validate_parameters_08000990();\n  return input_character == '\\0';\n}",
            "called": [
                "FUN_08000990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009b4",
            "calling": [
                "FUN_08005900",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "is_input_null_080009b4_080009b4"
        },
        "FUN_080011fc": {
            "renaming": {
                "FUN_080011fc": "set_bit_at_index_080011fc",
                "param_1": "index",
                "DAT_08001210": "data_pointer"
            },
            "code": "void set_bit_at_index_080011fc(uint index) {\n    int* DAT_08001210 = DAT_08001210;\n    int offset = index >> 5;\n    int bit_index = index & 0x1f;\n    int* target_pointer = DAT_08001210 + (offset * 4);\n    int bit_value = 1 << bit_index;\n    *target_pointer = bit_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011fc",
            "calling": [
                "FUN_08004e7c"
            ],
            "imported": false,
            "current_name": "set_bit_at_index_080011fc"
        },
        "FUN_08003068": {
            "renaming": {
                "FUN_08003068": "get_value_from_pointer_08003068",
                "PTR_DAT_08003070": "value_pointer"
            },
            "code": "int get_value_from_pointer_08003068() {\n  int *PTR_DAT_08003070 = PTR_DAT_08003070;\n  int value = *PTR_DAT_08003070;\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003068",
            "calling": [
                "FUN_08004a30"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08003068"
        },
        "FUN_08005646": {
            "renaming": {
                "FUN_08005646": "reverse_string_within_bounds_08005646",
                "param_1": "start",
                "param_2": "end",
                "param_3": "length",
                "puVar1": "end_ptr"
            },
            "code": "void reverse_string_within_bounds_08005646(char* start, char* end, int length) {\n  char* end_ptr = end + length;\n  if ((end < start) && (start < end_ptr)) {\n    start = start + length;\n    length = length - (int)end_ptr;\n    while (end_ptr + length != (char*)0x0) {\n      end_ptr--;\n      start--;\n      *start = *end_ptr;\n    }\n    return;\n  }\n  start--;\n  for (; end != end_ptr; end++) {\n    start++;\n    *start = *end;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005646",
            "calling": [
                "FUN_08005044"
            ],
            "imported": false,
            "current_name": "reverse_string_within_bounds_08005646"
        },
        "FUN_08000990": {
            "renaming": {
                "FUN_08000990": "validate_parameters_08000990",
                "param_1": "input_parameter",
                "check_parameters_08000904": "check_parameters"
            },
            "code": "undefined4 validate_parameters_08000990(undefined4 input_parameter)\n{\n  check_parameters();\n  return input_parameter;\n}",
            "called": [
                "FUN_08000904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000990",
            "calling": [
                "FUN_080009c8",
                "FUN_080009a0",
                "FUN_08000980",
                "FUN_080009b4"
            ],
            "imported": false,
            "current_name": "validate_parameters_08000990"
        },
        "FUN_08000110": {
            "renaming": {
                "FUN_08000110": "initialize_08000110",
                "*param_1": "*data",
                "*PTR_DAT_08000128": "has_initialized",
                "DAT_0800012c": "initialized_data",
                "PTR_FUN_08000130": "initialization_function"
            },
            "code": "bool *PTR_DAT_08000128 = false;\n\nvoid* initialize_08000110(void* data)\n{\n    if (!*PTR_DAT_08000128)\n    {\n        if (DAT_0800012c != 0)\n        {\n            data = PTR_FUN_08000130;\n        }\n        *PTR_DAT_08000128 = true;\n    }\n    return data;\n}",
            "called": [
                "FUN_080072d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000110",
            "calling": [],
            "imported": false,
            "current_name": "initialize_08000110"
        },
        "FUN_0800709e": {
            "renaming": {
                "FUN_0800709e": "returnZero_0800709e"
            },
            "code": "int returnZero_0800709e() {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800709e",
            "calling": [
                "FUN_08005854",
                "FUN_08005900",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "returnZero_0800709e"
        },
        "FUN_08002ec0": {
            "renaming": {
                "FUN_08002ec0": "calculate_result_08002ec0",
                "puVar1": "result_ptr",
                "uVar2": "x_value",
                "uVar3": "y_value",
                "uVar4": "z_value"
            },
            "code": "void calculate_result_08002ec0(void)\n{\n  undefined *result_ptr;\n  undefined4 x_value;\n  undefined4 y_value;\n  undefined4 z_value;\n  \n  result_ptr = PTR_DAT_08002ed0;\n  y_value = *(undefined4 *)(PTR_DAT_08002ecc + 4);\n  z_value = *(undefined4 *)(PTR_DAT_08002ed0 + 4);\n  x_value = FUNC_08000ad8(0x3f800000,z_value);\n  x_value = FUNC_08000cec(x_value,y_value);\n  y_value = FUNC_08000cec(z_value,*(undefined4 *)result_ptr);\n  x_value = FUNC_08000adc(y_value,x_value);\n  *(undefined4 *)result_ptr = x_value;\n  return;\n}",
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08000adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ec0",
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "calculate_result_08002ec0"
        },
        "FUN_08004434": {
            "renaming": {
                "FUN_08004434": "process_data_and_strings_08004434",
                "param_1": "param_1",
                "param_2": "masked_param_2",
                "param_3": "param_2",
                "local_10": "data",
                "local_c": "masked_param_2",
                "uStack_8": "param_3"
            },
            "code": "void process_data_and_strings_08004434(uint16_t param_1, uint32_t data_ptr, uint32_t param_3) {\n  uint32_t data = *(uint32_t*)PTR_DAT_08004454;\n  uint32_t masked_param_2 = (param_2 & 0xFFFF0000) | *(uint16_t*)(PTR_DAT_08004454 + 4);\n  uint32_t param_2 = param_3;\n  process_string_and_data_08004300(0x6D, &data, 6);\n  return;\n}",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004434",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_data_and_strings_08004434"
        },
        "FUN_08001168": {
            "renaming": {
                "FUN_08001168": "do_nothing_08001168"
            },
            "code": "\nvoid do_nothing_08001168(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001168",
            "calling": [
                "thunk_FUN_08001168",
                "FUN_08001b58"
            ],
            "imported": false,
            "current_name": "do_nothing_08001168"
        },
        "FUN_08006c0c": {
            "renaming": {
                "FUN_08006c0c": "calculate_float_08006c0c",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "unused_variable1",
                "uVar2": "exponent",
                "iVar3": "exponent_shifted",
                "uVar4": "fraction",
                "uVar5": "fraction_shifted",
                "uVar6": "fraction_result",
                "iVar7": "exponent_result",
                "uVar8": "mask",
                "uVar9": "mask2",
                "iVar10": "temp",
                "uVar11": "temp2",
                "uVar12": "loop_counter",
                "uVar13": "return_value"
            },
            "code": "uint32_t calculate_float_08006c0c(uint32_t input1, uint32_t input2)\n{\n  uint32_t sign_bit = input1 >> 31;\n  uint32_t exponent = (input1 >> 23) & 0xFF;\n  uint32_t fraction = input1 & 0x7FFFFF;\n  if (exponent == 0xFF)\n  {\n    if (fraction != 0)\n    {\n      return 0x7FC00000;\n    }\n    else\n    {\n      return (sign_bit << 31) | 0x7F800000;\n    }\n  }\n  else if (exponent == 0)\n  {\n    if (fraction == 0)\n    {\n      return sign_bit << 31;\n    }\n    else\n    {\n      while ((fraction & 0x400000) == 0)\n      {\n        fraction = fraction << 1;\n        exponent = exponent - 1;\n      }\n      exponent = exponent - 1;\n      fraction = fraction & 0x7FFFFF;\n    }\n  }\n  exponent = exponent - 127;\n  uint32_t sign_bit2 = input2 >> 31;\n  uint32_t exponent2 = (input2 >> 23) & 0xFF;\n  uint32_t fraction2 = input2 & 0x7FFFFF;\n  if (exponent2 == 0xFF)\n  {\n    if (fraction2 != 0)\n    {\n      return 0x7FC00000;\n    }\n    else\n    {\n      return (sign_bit2 << 31) | 0x7F800000;\n    }\n  }\n  else if (exponent2 == 0)\n  {\n    if (fraction2 == 0)\n    {\n      return sign_bit2 << 31;\n    }\n    else\n    {\n      while ((fraction2 & 0x400000) == 0)\n      {\n        fraction2 = fraction2 << 1;\n        exponent2 = exponent2 - 1;\n      }\n      exponent2 = exponent2 - 1;\n      fraction2 = fraction2 & 0x7FFFFF;\n    }\n  }\n  exponent2 = exponent2 - 127;\n  uint32_t sign_bit_result = sign_bit ^ sign_bit2;\n  uint32_t exponent_result = exponent + exponent2 + 127;\n  uint64_t fraction_result = (uint64_t)fraction * fraction2;\n  if ((fraction_result & 0x8000000000000000) == 0)\n  {\n    exponent_result = exponent_result - 1;\n    fraction_result = fraction_result << 1;\n  }\n  if ((exponent_result & 0xFF) == 0xFF)\n  {\n    if ((fraction_result & 0x7FFFFFFFFFFFFFFF) != 0)\n    {\n      return 0x7FC00000;\n    }\n    else\n    {\n      return (sign_bit_result << 31) | 0x7F800000;\n    }\n  }\n  if ((exponent_result & 0xFF) == 0)\n  {\n    while ((fraction_result & 0x800000000000000) == 0)\n    {\n      exponent_result = exponent_result - 1;\n      fraction_result = fraction_result << 1;\n    }\n  }\n  exponent_result = exponent_result - 127;\n  fraction_result = fraction_result >> 23;\n  uint32_t result = (sign_bit_result << 31) | (exponent_result << 23) | fraction_result;\n  return result;\n}",
            "called": [
                "FUN_08000724",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_0800016c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c0c",
            "calling": [
                "FUN_08006228",
                "FUN_08005c70",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "calculate_float_08006c0c"
        },
        "FUN_0800426c": {
            "renaming": {
                "FUN_0800426c": "extract_and_set_parameters_0800426c",
                "param_1": "input_parameter_1",
                "param_2": "input_parameter_2",
                "param_3": "input_parameter_3",
                "param_4": "input_parameter_4",
                "puVar1": "pointer_1",
                "puVar2": "pointer_2",
                "uVar3": "extracted_bits_0",
                "uVar4": "extracted_bits_1",
                "uVar5": "extracted_bits_2",
                "uVar6": "extracted_bits_3",
                "uVar7": "extracted_bits_4",
                "uVar8": "max_value",
                "uVar9": "max_value",
                "PTR_DAT_08004264": "memory_block_1",
                "PTR_DAT_08004268": "memory_block_2",
                "DAT_080042fc": "constant_1",
                "extracted_bits_1": "extracted_bits[0]",
                "extracted_bits_2": "extracted_bits[1]",
                "extracted_bits_3": "extracted_bits[2]",
                "extracted_bits_4": "extracted_bits[3]"
            },
            "code": "void extract_and_set_parameters_0800426c(uint param1, uint param2, uint param3, uint param4)\n{\n  uint extracted_bits_1, extracted_bits_2, extracted_bits_3, extracted_bits_4;\n  uint max_value = 1000;\n  uint extracted_bits[4];\n  extracted_bits[0] = FUNC_08000ad8();\n  extracted_bits[1] = FUNC_08000adc(param1, param2);\n  extracted_bits[2] = FUNC_08000ad8(extracted_bits[0], param3);\n  extracted_bits[2] = FUNC_08000adc(extracted_bits[2], param4);\n  FUNC_08000ad8(extracted_bits[2], DAT_080042fc);\n  extracted_bits_1 = extract_bits_08001078();\n  extracted_bits[2] = FUNC_08000ad8(extracted_bits[1], param3);\n  extracted_bits[2] = FUNC_08000ad8(extracted_bits[2], param4);\n  FUNC_08000ad8(extracted_bits[2], DAT_080042fc);\n  extracted_bits_2 = extract_bits_08001078();\n  extracted_bits[0] = FUNC_08000adc(extracted_bits[0], param3);\n  extracted_bits[0] = FUNC_08000ad8(extracted_bits[0], param4);\n  FUNC_08000ad8(extracted_bits[0], DAT_080042fc);\n  extracted_bits_3 = extract_bits_08001078();\n  extracted_bits[0] = FUNC_08000adc(param3, extracted_bits[1]);\n  extracted_bits[0] = FUNC_08000adc(extracted_bits[0], param4);\n  FUNC_08000ad8(extracted_bits[0], DAT_080042fc);\n  extracted_bits_4 = extract_bits_08001078();\n  for(int i=0; i<4; i++)\n  {\n    if(max_value < (int)extracted_bits[i])\n    {\n      extracted_bits[i] = max_value;\n    }\n  }\n  *(uint *)(PTR_DAT_08004264 + 8) = extracted_bits[2] & ~((int)extracted_bits[2] >> 0x1f);\n  *(uint *)(PTR_DAT_08004264 + 0xc) = extracted_bits[0] & ~((int)extracted_bits[0] >> 0x1f);\n  *(uint *)(PTR_DAT_08004264 + 4) = extracted_bits[3] & ~((int)extracted_bits[3] >> 0x1f);\n  *(uint *)PTR_DAT_08004264 = extracted_bits[1] & ~((int)extracted_bits[1] >> 0x1f);\n  set_parameter_in_memory_08003fc4();\n  set_parameter_value_08003fd0(*(uint *)(PTR_DAT_08004264 + 4));\n  set_parameter_in_memory_08003fdc(*(uint *)(PTR_DAT_08004264 + 8));\n  set_value_in_memory_08003fe8(*(uint *)(PTR_DAT_08004264 + 0xc));\n  *(short *)PTR_DAT_08004268 = (short)*(uint *)PTR_DAT_08004264 + max_value;\n  *(short *)(PTR_DAT_08004268 + 2) = (short)*(uint *)(PTR_DAT_08004264 + 4) + max_value;\n  *(short *)(PTR_DAT_08004268 + 4) = (short)*(uint *)(PTR_DAT_08004264 + 8) + max_value;\n  *(short *)(PTR_DAT_08004268 + 6) = (short)*(uint *)(PTR_DAT_08004264 + 0xc) + max_value;\n}",
            "called": [
                "FUN_08000ad8",
                "FUN_08003fdc",
                "FUN_08003fd0",
                "FUN_08000adc",
                "FUN_08003fc4",
                "FUN_08003fe8",
                "FUN_08001078"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800426c",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "extract_and_set_parameters_0800426c"
        },
        "FUN_08002538": {
            "renaming": {
                "FUN_08002538": "set_bit_and_update_08002538",
                "param_1": "bit_array",
                "param_2": "bit_index",
                "puVar1": "default_bit_array",
                "puVar2": "current_bit_array"
            },
            "code": "uint32_t set_bit_and_update_08002538(uint32_t **bit_array, uint32_t bit_index) {\\n\\\n                        uint32_t *current_bit_array = *bit_array;\\n\\\n                        uint32_t *default_bit_array = DAT_08002560;\\n\\\n                        update_bit_08002520(*bit_array, bit_index, 1);\\n\\\n                        if (current_bit_array == default_bit_array) {\\n\\\n                            default_bit_array = (uint32_t *)(current_bit_array[0x11] | 0x8000);\\n\\\n                        }\\n\\\n                        if (current_bit_array == default_bit_array) {\\n\\\n                            current_bit_array[0x11] = (uint32_t)default_bit_array;\\n\\\n                        }\\n\\\n                        *current_bit_array = *current_bit_array | 1;\\n\\\n                        return 0;\\n\\\n                    }",
            "called": [
                "FUN_08002520"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002538",
            "calling": [
                "FUN_08003ff4"
            ],
            "imported": false,
            "current_name": "set_bit_and_update_08002538"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "copy_data_and_strings_080040e8",
                "param_1": "dest",
                "param_2": "dest_offset",
                "param_3": "src",
                "param_4": "length",
                "puVar1": "src_ptr",
                "uVar2": "data",
                "iVar3": "i",
                "puVar4": "dest_ptr",
                "iVar5": "length"
            },
            "code": "void copy_data_and_strings_080040e8(char* dest, int dest_offset, char* src, int src_offset, int length) {\n  char* src_ptr = src;\n  char* dest_ptr = dest + dest_offset - 1;\n  for (int i = 0; i < length; ++i) {\n    char data = check_data_and_strings(src_ptr, src_offset + i & 0xffff, PTR_s____Src_i2c_c_08004118, 0x4c, length);\n    ++dest_ptr;\n    *dest_ptr = data;\n  }\n}",
            "called": [
                "FUN_0800407c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_08002b48",
                "FUN_08002cb0",
                "FUN_08002bf0",
                "FUN_08002d88",
                "FUN_08003298"
            ],
            "imported": false,
            "current_name": "copy_data_and_strings_080040e8"
        },
        "FUN_08004ffc": {
            "renaming": {
                "FUN_08004ffc": "reverse_string_and_allocate_memory_08004ffc",
                "param_1": "input_string",
                "param_2": "output_string",
                "param_3": "max_size",
                "param_4": "unused",
                "local_78": "output_ptr",
                "local_70": "max_length",
                "local_6c": "unused",
                "local_6a": "current_length",
                "local_68": "input_ptr",
                "local_64": "unused",
                "uStack_c": "unused",
                "uStack_8": "unused",
                "uStack_4": "unused"
            },
            "code": "void reverse_string_and_allocate_memory_08004ffc(char* input_string, char* output_string, int max_size) {\n  char* input_ptr = input_string;\n  char* output_ptr = output_string;\n  int max_length = max_size - 1;\n  int current_length = 0;\n  while (*input_ptr != '\\0' && current_length < max_length) {\n    input_ptr++;\n    current_length++;\n  }\n  *output_ptr = '\\0';\n  while (current_length > 0) {\n    input_ptr--;\n    *output_ptr = *input_ptr;\n    output_ptr++;\n    current_length--;\n  }\n}\n",
            "called": [
                "FUN_080050fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ffc",
            "calling": [
                "FUN_08004cac"
            ],
            "imported": false,
            "current_name": "reverse_string_and_allocate_memory_08004ffc"
        },
        "FUN_0800115c": {
            "renaming": {
                "FUN_0800115c": "get_value_from_pointer_0800115c",
                "PTR_DAT_08001164": "PTR_DATA"
            },
            "code": "int get_value_from_pointer_0800115c() {\n    int* value_pointer = (int*) PTR_DAT_08001164;\n    return *value_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800115c",
            "calling": [
                "FUN_08001530",
                "thunk_FUN_0800115c",
                "FUN_080016f4",
                "FUN_0800209c",
                "FUN_08001b58",
                "FUN_08001460",
                "FUN_08001828",
                "FUN_08004c18",
                "thunk_FUN_0800115c",
                "FUN_080014e2",
                "FUN_080015e8",
                "FUN_08001938"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_0800115c"
        },
        "FUN_08002d88": {
            "renaming": {
                "FUN_08002d88": "process_MPU9250_data_and_strings_08002d88",
                "param_1": "data_size",
                "param_2": "string_size",
                "param_3": "data",
                "param_4": "string",
                "sVar1": "first_short",
                "sVar2": "second_short",
                "puVar3": "data_ptr",
                "puVar4": "hash_data_ptr_1",
                "puVar5": "hash_data_ptr_2",
                "puVar6": "hash_data_ptr_3",
                "iVar7": "check_result",
                "uVar8": "hash_result",
                "uVar9": "hash_result_1",
                "local_28": "first_short",
                "uStack_26": "byte_1",
                "uStack_25": "byte_2",
                "local_24": "byte_3",
                "local_23": "byte_4",
                "local_22": "byte_5",
                "uStack_21": "byte_6"
            },
            "code": "void process_MPU9250_data_and_strings_08002d88(int data_size, int string_size, char *data, char *string, int param_1, int param_2)\n{\n    short first_short;\n    short second_short;\n    char *data_ptr;\n    char *hash_data_ptr_1;\n    char *hash_data_ptr_2;\n    char *hash_data_ptr_3;\n    int check_result;\n    int hash_result;\n    int hash_result_1;\n    int hash_result_2;\n    int hash_result_3;\n\n    data_ptr = data;\n    first_short = 0;\n    second_short = 0;\n    check_result = check_data_and_strings(data_size, string_size, data, string, param_1, param_2);\n\n    if (check_result >= 0)\n    {\n        copy_data_and_strings(data_size, 3, &first_short, 7, data, 0xda);\n\n        if ((unsigned int)second_short >> 28 >= 1)\n        {\n            *(short *)(PTR_DAT_08002e94 + 2) = *(short *)(PTR_DAT_08002e94 + 2) + 1;\n        }\n        else\n        {\n            *(short *)PTR_DAT_08002e84 = first_short;\n            *(short *)(PTR_DAT_08002e84 + 2) = second_short;\n            hash_data_ptr_1 = PTR_DAT_08002e9c;\n            hash_data_ptr_2 = PTR_DAT_08002e98;\n            hash_data_ptr_3 = PTR_DAT_08002e8c;\n            hash_result = calculate_hash(hash_data_ptr_1);\n            hash_result = add_to_hash(hash_result, *(int *)hash_data_ptr_1);\n            hash_result = add_to_hash(hash_result, *(int *)hash_data_ptr_2);\n            hash_result = add_to_hash(hash_result, *(int *)hash_data_ptr_3);\n            *(int *)PTR_DAT_08002e90 = hash_result;\n            hash_result_1 = calculate_hash((int)second_short);\n            hash_result_1 = add_to_hash(hash_result_1, *(int *)hash_data_ptr_1);\n            hash_result_1 = add_to_hash(hash_result_1, *(int *)(hash_data_ptr_2 + 4));\n            hash_result_1 = add_to_hash(hash_result_1, *(int *)(hash_data_ptr_3 + 4));\n            *(int *)(PTR_DAT_08002e90 + 4) = hash_result_1;\n            hash_result_2 = calculate_hash((int)first_short);\n            hash_result_2 = add_to_hash(hash_result_2, *(int *)hash_data_ptr_1);\n            hash_result_2 = add_to_hash(hash_result_2, *(int *)(hash_data_ptr_2 + 8));\n            hash_result_2 = add_to_hash(hash_result_2, *(int *)(hash_data_ptr_3 + 8));\n            *(int *)(PTR_DAT_08002e90 + 8) = hash_result_2;\n        }\n    }\n}\n",
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_080040e8",
                "FUN_0800407c",
                "FUN_08000c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d88",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "process_MPU9250_data_and_strings_08002d88"
        },
        "FUN_08000c44": {
            "renaming": {
                "FUN_08000c44": "calculate_hash_08000c44",
                "param_1": "input",
                "iVar1": "leading_zeroes_count",
                "uVar2": "hash_value",
                "uVar3": "mask",
                "iVar4": "hash_value",
                "uVar5": "mask"
            },
            "code": "uint calculate_hash_08000c44(uint input)\n{\n  int leading_zeroes_count = count_leading_zeroes(input);\n  uint hash_value = ((input << (leading_zeroes_count - 8)) ^ 0x4b000000) - (input >> (31 - leading_zeroes_count));\n  if (leading_zeroes_count > 7)\n  {\n    uint mask = 0 << (leading_zeroes_count - 8);\n    hash_value += input << (leading_zeroes_count - 8);\n    hash_value += 0U >> (0x20 - (leading_zeroes_count - 8));\n    if (0x7fffffff < mask)\n    {\n      hash_value++;\n    }\n    if (mask == 0x80000000)\n    {\n      hash_value = hash_value & 0xfffffffe;\n    }\n  }\n  else\n  {\n    uint mask = input << (leading_zeroes_count + 24);\n    hash_value += (input >> (8 - leading_zeroes_count)) - ((int)mask >> 31);\n    if ((mask & 0x7fffffff) == 0)\n    {\n      hash_value = hash_value & ~(mask >> 31);\n    }\n  }\n  return hash_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c44",
            "calling": [
                "FUN_08002b48",
                "FUN_08002cb0",
                "FUN_0800411c",
                "FUN_08002bf0",
                "FUN_0800483c",
                "FUN_08002d88"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000c44"
        },
        "FUN_08000a04": {
            "renaming": {
                "FUN_08000a04": "is_valid_input_08000a04",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "code": "int is_valid_input_08000a04(uint input_1, int input_2, uint input_3, int input_4) {\n  bool is_input_2_valid = ((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0);\n  bool is_input_4_valid = ((input_4 << 1) >> 0x15 != -1) || ((input_3 | input_4 << 0xc) == 0);\n  if (is_input_2_valid && is_input_4_valid) {\n    return 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a04",
            "calling": [
                "FUN_08005854",
                "FUN_08005900",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "is_valid_input_08000a04"
        },
        "FUN_080025e8": {
            "renaming": {
                "FUN_080025e8": "update_values_080025e8",
                "*param_1": "*values",
                "iVar1": "shifted_value_1",
                "iVar2": "new_value_one",
                "uVar3": "value_four",
                "iVar4": "shifted_value_2",
                "iVar5": "value_one",
                "iVar6": "current_value"
            },
            "code": "void update_values_080025e8(int *values)\n{\n  int current_value = *values;\n  uint value_four = values[4];\n  *(uint *)(current_value + 0x10) = *(uint *)(current_value + 0x10) & 0xffffcfff | values[3];\n  *(uint *)(current_value + 0xc) = values[2] | value_four | values[5] | *(uint *)(current_value + 0xc) & 0xffffe9f3;\n  *(uint *)(current_value + 0x14) = *(uint *)(current_value + 0x14) & 0xfffffcff | values[6];\n  if (current_value == PTR_DAT_08002720) {\n    int shifted_value_1 = get_shifted_value_08002250();\n    int value_one = values[1];\n    int shifted_value_2 = get_shifted_value_08002250();\n    int new_value_one = (uint)(shifted_value_1 * 0x19) / (uint)(value_one << 2) + (int)(((ulonglong)(uint)(shifted_value_2 * 0x19) / (ulonglong)(uint)(values[1] << 2)) / 100) * -100;\n    int shifted_value_3 = get_shifted_value_08002250();\n    uint new_value_four = (uint)(shifted_value_3 * 0x19) / (uint)(values[1] << 2);\n    int shifted_value_4 = get_shifted_value_08002250();\n  }\n  else {\n    int shifted_value_1 = get_shifted_value_08002220();\n    int value_one = values[1];\n    int shifted_value_2 = get_shifted_value_08002220();\n    int new_value_one = (uint)(shifted_value_1 * 0x19) / (uint)(value_one << 2) + (int)(((ulonglong)(uint)(shifted_value_2 * 0x19) / (ulonglong)(uint)(values[1] << 2)) / 100) * -100;\n    int shifted_value_3 = get_shifted_value_08002220();\n    uint new_value_four = (uint)(shifted_value_3 * 0x19) / (uint)(values[1] << 2);\n    int shifted_value_4 = get_shifted_value_08002220();\n  }\n  *(uint *)(current_value + 8) = (((new_value_four + (int)(((ulonglong)(uint)(shifted_value_4 * 0x19) / (ulonglong)(uint)(values[1] << 2)) / 100)) * -100 + 50) / 100 & 0xf | (new_value_one * 0x10 + 50U) / 100 & 0xf0) + (int)(((ulonglong)(uint)(shifted_value_1 * 0x19) / (ulonglong)(uint)(values[1] << 2)) / 100) * 16;\n}\n",
            "called": [
                "FUN_08002220",
                "FUN_08002250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e8",
            "calling": [
                "FUN_08002724"
            ],
            "imported": false,
            "current_name": "update_values_080025e8"
        },
        "FUN_08002b48": {
            "renaming": {
                "FUN_08002b48": "calculate_and_store_hashes_08002b48",
                "in_r3": "input_value",
                "local_18": "hash_part1",
                "local_14": "hash_part2",
                "PTR_s____Src_MPU9250_c_08002be4": "data_src",
                "PTR_DAT_08002be8": "hash_result_ptr",
                "PTR_DAT_08002bec": "hash_array_ptr",
                "calculate_hash_08000c44": "calculate_hash",
                "FUNC_08000cec": "calculate_hash_operation"
            },
            "code": "void calculate_and_store_hashes_08002b48(void)\n{\n  uint16_t hash_part1 = 0;\n  uint32_t hash_part2 = 0;\n  uint32_t hash_part3 = 0;\n  uint32_t hash_result = 0;\n  \n  hash_part1 = 0x3b;\n  hash_part2 = in_r3 & 0xffff0000;\n  \n  copy_data_and_strings_080040e8(0xd0, hash_part1, &hash_result, 6, PTR_s____Src_MPU9250_c_08002be4, 0x58);\n  \n  uint16_t hash_part1_lo = (uint16_t)hash_result;\n  uint16_t hash_part1_hi = (uint16_t)(hash_result >> 16);\n  uint16_t hash_part2_lo = (uint16_t)hash_part2;\n  uint16_t hash_part2_hi = (uint16_t)(hash_part2 >> 16);\n  \n  hash_result = calculate_hash_08000c44();\n  hash_result = FUNC_08000cec(hash_result,0x40800000);\n  hash_result = FUNC_08000cec(hash_result,0x38000000);\n  PTR_DAT_08002bec[0] = hash_result;\n  \n  hash_result = calculate_hash_08000c44(hash_part1);\n  hash_result = FUNC_08000cec(hash_result,0x40800000);\n  hash_result = FUNC_08000cec(hash_result,0x38000000);\n  PTR_DAT_08002bec[1] = hash_result;\n  \n  hash_result = calculate_hash_08000c44(hash_part2);\n  hash_result = FUNC_08000cec(hash_result,0x40800000);\n  hash_result = FUNC_08000cec(hash_result,0x38000000);\n  PTR_DAT_08002bec[2] = hash_result;\n  \n  return;\n}",
            "called": [
                "FUN_08000cec",
                "FUN_080040e8",
                "FUN_08000c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b48",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "calculate_and_store_hashes_08002b48"
        },
        "FUN_08004f68": {
            "renaming": {
                "FUN_08004f68": "copy_data_and_clear_memory_08004f68",
                "iVar1": "index",
                "puVar2": "data_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void copy_data_and_clear_memory_08004f68(void)\n{\n  int index;\n  undefined4 *data_ptr;\n  code *jump_table;\n  for (index = 0; PTR_DAT_08004fa0 + index < PTR_DAT_08004fa4; index += 4) {\n    *(undefined4 *)(PTR_DAT_08004fa0 + index) = *(undefined4 *)(DAT_08004f9c + index);\n  }\n  for (data_ptr = (undefined4 *)PTR_DAT_08004fa8; data_ptr < PTR_DAT_08004fac; data_ptr++) {\n    *data_ptr = 0;\n  }\n  set_bit_and_mask();\n  execute_functions();\n  jump_table = (code *)0x8004f9a;\n  read_sensor_data();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_080041ae",
                "FUN_08004f10",
                "FUN_08004fb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f68",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_and_clear_memory_08004f68"
        },
        "FUN_08001170": {
            "renaming": {
                "FUN_08001170": "set_param_bits_08001170",
                "param_1": "parameter",
                "DAT_08001190": "data_address"
            },
            "code": "void set_param_bits_08001170(uint parameter) {\n    uint* DAT_08001190 = (uint *)(DAT_08001190 + 0xc);\n    uint current_value = *DAT_08001190;\n    uint mask = 0xf8ff;\n    uint new_value = (parameter & 7) << 8;\n    *DAT_08001190 = (current_value & mask) | 0x5fa0000 | new_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001170",
            "calling": [
                "FUN_08004ccc",
                "FUN_08001128"
            ],
            "imported": false,
            "current_name": "set_param_bits_08001170"
        },
        "FUN_08002bf0": {
            "renaming": {
                "FUN_08002bf0": "initialize_MPU9250_registers_08002bf0",
                "puVar1": "source_ptr",
                "puVar2": "dest_ptr",
                "uVar3": "hash_value",
                "local_20": "local_register_value",
                "local_1c": "local_register_value_low",
                "PTR_s____Src_MPU9250_c_08002c9c": "MPU9250_register_addresses",
                "PTR_DAT_08002ca0": "source_ptr",
                "PTR_DAT_08002ca4": "dest_ptr",
                "PTR_DAT_08002cac": "MPU9250_register_values",
                "calculate_hash_08000c44": "calculate_hash",
                "FUNC_08000cec": "update_hash",
                "DAT_08002ca8": "hash_constant"
            },
            "code": "void initialize_MPU9250_registers_08002bf0(void)\n{\n  unsigned char *PTR_DAT_08002ca0;\n  unsigned char *PTR_DAT_08002ca4;\n  unsigned int hash_value;\n  unsigned int hash_value_2;\n  unsigned short local_register_value;\n  unsigned char local_register_value_high;\n  unsigned char local_register_value_low;\n  \n  local_register_value = 0;\n  local_register_value_low = 0;\n  copy_data_and_strings(0xd0, 0x43, &local_register_value, 6, PTR_s____Src_MPU9250_c_08002c9c, 0x7b);\n  PTR_DAT_08002ca0 = PTR_s____Src_MPU9250_c_08002c9c;\n  *(unsigned short *)PTR_DAT_08002ca0 = (unsigned short)local_register_value;\n  *(unsigned short *)(PTR_DAT_08002ca0 + 2) = (unsigned short)(local_register_value >> 16);\n  *(unsigned short *)(PTR_DAT_08002ca0 + 4) = (unsigned short)local_register_value_low;\n  hash_value = calculate_hash();\n  hash_value = update_hash(hash_value, PTR_s____Src_MPU9250_c_08002c9c[8]);\n  hash_value = update_hash(hash_value, 0x38000000);\n  hash_value = update_hash(hash_value, *(unsigned int *)(PTR_s____Src_MPU9250_c_08002c9c + 4));\n  PTR_DAT_08002ca4 = PTR_DAT_08002cac;\n  *(unsigned int *)PTR_DAT_08002ca4 = hash_value;\n  hash_value_2 = calculate_hash(local_register_value >> 16);\n  hash_value_2 = update_hash(hash_value_2, PTR_s____Src_MPU9250_c_08002c9c[8]);\n  hash_value_2 = update_hash(hash_value_2, 0x38000000);\n  hash_value_2 = update_hash(hash_value_2, *(unsigned int *)(PTR_s____Src_MPU9250_c_08002c9c + 12));\n  *(unsigned int *)(PTR_DAT_08002ca4 + 4) = hash_value_2;\n  hash_value = calculate_hash(local_register_value_low);\n  hash_value = update_hash(hash_value, PTR_s____Src_MPU9250_c_08002c9c[8]);\n  hash_value = update_hash(hash_value, 0x38000000);\n  hash_value = update_hash(hash_value, *(unsigned int *)(PTR_s____Src_MPU9250_c_08002c9c + 16));\n  *(unsigned int *)(PTR_DAT_08002ca4 + 8) = hash_value;\n  return;\n}",
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_080040e8",
                "FUN_08000c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002bf0",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "initialize_MPU9250_registers_08002bf0"
        },
        "FUN_08002ad0": {
            "renaming": {
                "FUN_08002ad0": "initialize_MPU9250_08002ad0",
                "PTR_s____Src_MPU9250_c_08002b44": "MPU9250_c_source"
            },
            "code": "void initialize_MPU9250_08002ad0(void)\n{\n  check_data_and_strings(0xd0,0x75,PTR_s____Src_MPU9250_c_08002b44,0x3b);\n  process_i2c_data_and_strings(0xd0,0x6b,0x80,1);\n  process_i2c_data_and_strings(0xd0,0x6b,1);\n  process_i2c_data_and_strings(0xd0,0x6c,0,1);\n  process_i2c_data_and_strings(0xd0,0x19,0,1);\n  process_i2c_data_and_strings(0xd0,0x1d,3,1);\n  process_i2c_data_and_strings(0xd0,0x1a,3,1);\n  process_i2c_data_and_strings(0xd0,0x1b,0x10,1);\n  process_i2c_data_and_strings(0xd0,0x1c,8,1);\n  return;\n}\n",
            "called": [
                "FUN_0800403c",
                "FUN_0800407c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad0",
            "calling": [
                "FUN_08002ea0"
            ],
            "imported": false,
            "current_name": "initialize_MPU9250_08002ad0"
        },
        "FUN_08001050": {
            "renaming": {
                "FUN_08001050": "check_concatenated_integers_are_zero_or_not_08001050",
                "in_ZR": "zero_register",
                "in_CY": "carry_register",
                "concatenate_integers_08000ffc": "concatenate_integers"
            },
            "code": "bool check_concatenated_integers_are_zero_or_not_08001050(void)\n{\n  undefined zero_register;\n  undefined carry_register;\n  concatenate_integers();\n  return !(bool)carry_register || (bool)zero_register;\n}",
            "called": [
                "FUN_08000ffc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001050",
            "calling": [
                "FUN_08002ee8"
            ],
            "imported": false,
            "current_name": "check_concatenated_integers_are_zero_or_not_08001050"
        },
        "FUN_080009c8": {
            "renaming": {
                "FUN_080009c8": "validate_parameters_and_return_result_080009c8",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_nonzero",
                "validate_parameters_08000990": "validate_CY_080009c8",
                "!(bool)in_CY": "!is_CY_zero",
                "(bool)in_ZR": "is_ZR_nonzero"
            },
            "code": "bool validate_parameters_and_return_result_080009c8(void)\n{\n    bool is_CY_zero = false;\n    bool is_ZR_nonzero = false;\n    \n    is_CY_zero = is_CY_zero || validate_CY_080009c8();\n    is_ZR_nonzero = is_ZR_nonzero || validate_ZR_08000990();\n    \n    return !is_CY_zero || is_ZR_nonzero;\n}",
            "called": [
                "FUN_08000990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c8",
            "calling": [
                "FUN_08006228"
            ],
            "imported": false,
            "current_name": "validate_parameters_and_return_result_080009c8"
        },
        "FUN_08002ed4": {
            "renaming": {
                "FUN_08002ed4": "calculate_average_08002ed4",
                "puVar1": "current_value_ptr",
                "uVar2": "previous_average",
                "uVar3": "numerator",
                "uVar4": "denominator"
            },
            "code": "void calculate_average_08002ed4(void)\n{\n  undefined *current_value_ptr;\n  undefined4 numerator;\n  undefined4 denominator;\n  undefined4 previous_average;\n  current_value_ptr = PTR_DAT_08002ee4;\n  numerator = *(undefined4 *)PTR_DAT_08002ee0;\n  denominator = *(undefined4 *)(PTR_DAT_08002ee4 + 4);\n  previous_average = FUNC_08000ad8(0x3f800000,denominator);\n  previous_average = FUNC_08000cec(previous_average,numerator);\n  numerator = FUNC_08000cec(denominator,*(undefined4 *)current_value_ptr);\n  previous_average = FUNC_08000adc(numerator,previous_average);\n  *(undefined4 *)current_value_ptr = previous_average;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ed4",
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "calculate_average_08002ed4"
        },
        "FUN_08000f9c": {
            "renaming": {
                "FUN_08000f9c": "calculate_result_08000f9c",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "result1",
                "uVar3": "result2",
                "uVar4": "result3",
                "bVar5": "is_zero",
                "bVar1": "is_negative"
            },
            "code": "uint calculate_result_08000f9c(uint input1, uint input2)\n{\n    bool is_negative;\n    uint result1;\n    uint result2;\n    uint result3;\n    bool is_zero;\n    \n    result1 = input1 * 2;\n    result2 = input2 * 2;\n    \n    if (((int)result1 >> 0x18 == -1 || (int)result2 >> 0x18 == -1) && ((((int)result1 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) || (((int)result2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))\n    {\n        return 1;\n    }\n    \n    result3 = result1 | input2 & 0x7fffffff;\n    is_zero = result3 == 0;\n    \n    if (!is_zero)\n    {\n        result3 = input1 ^ input2;\n        is_zero = result3 == 0;\n    }\n    \n    is_negative = -1 < (int)result3;\n    \n    if (is_negative)\n    {\n        result1 = result1 + input2 * -2;\n        is_zero = result1 == 0;\n    }\n    \n    if (is_negative && result2 <= result1 && !is_zero)\n    {\n        input1 = (int)input2 >> 0x1f;\n    }\n    \n    if (!is_negative || result2 > result1)\n    {\n        input1 = ~((int)input2 >> 0x1f);\n    }\n    \n    if (!is_zero)\n    {\n        input1 = input1 | 1;\n    }\n    \n    return input1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f9c",
            "calling": [
                "FUN_08001004"
            ],
            "imported": false,
            "current_name": "calculate_result_08000f9c"
        },
        "FUN_08006228": {
            "renaming": {
                "FUN_08006228": "FUNC_08006228"
            },
            "code": "\nuint FUNC_08006228(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  undefined4 uVar1;\n  uint uVar2;\n  uint extraout_r1;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 extraout_r1_00;\n  undefined4 extraout_r1_01;\n  uint extraout_r1_02;\n  undefined4 extraout_r1_03;\n  int iVar5;\n  int iVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  undefined4 uVar9;\n  uint uVar10;\n  undefined4 uVar11;\n  undefined4 uVar12;\n  ulonglong uVar13;\n  undefined8 uVar14;\n  undefined8 uVar15;\n  undefined8 uVar16;\n  undefined8 uVar17;\n  longlong lVar18;\n  ulonglong uVar19;\n  ulonglong uVar20;\n  undefined8 uVar21;\n  uint local_70;\n  undefined4 local_68;\n  undefined4 local_64;\n  int local_54;\n  \n  uVar10 = param_4 & 0x7fffffff;\n  if ((uVar10 | param_3) == 0) {\n    return 0;\n  }\n  uVar8 = param_2 & 0x7fffffff;\n  if ((int)uVar8 <= (int)DAT_08006428) {\n    if (uVar8 == DAT_08006428) {\n      if (param_1 == 0) {\n        if (uVar8 < uVar10) goto LAB_08006278;\nLAB_08006262:\n        if ((uVar10 != DAT_08006428) || (param_3 == 0)) {\n          if (-1 < (int)param_2) goto LAB_0800632a;\n          if (DAT_08006430 < (int)uVar10) {\n            local_70 = 2;\nLAB_080062ba:\n            if (param_3 == 0) {\n              if (uVar10 == DAT_08006428) {\n                if ((uVar8 + 0xc0100000 | param_1) == 0) {\n                  return 0;\n                }\n                if (DAT_08006434 < (int)uVar8) {\n                  if ((int)param_4 < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)param_4) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (uVar10 == DAT_08006438) {\n                if (-1 < (int)param_4) {\n                  return param_1;\n                }\n                uVar8 = 0;\n                uVar10 = DAT_08006438;\n                goto LAB_08006320;\n              }\n              uVar19 = CONCAT44(param_2,param_1);\n              if (param_4 == 0x40000000) goto LAB_0800634a;\n              if ((param_4 == DAT_0800643c) && (-1 < (int)param_2)) {\n                uVar10 = calculate_float_08006c0c(param_1,param_2);\n                return uVar10;\n              }\n            }\n          }\n          else {\n            if ((int)uVar10 <= DAT_08006430 + -0x3500000) {\nLAB_0800632a:\n              local_70 = 0;\n              goto LAB_080062ba;\n            }\n            iVar6 = ((int)uVar10 >> 0x14) + -0x3ff;\n            if (0x14 < iVar6) {\n              uVar2 = param_3 >> (0x34U - iVar6 & 0xff);\n              if (param_3 == uVar2 << (0x34U - iVar6 & 0xff)) {\n                local_70 = 2 - (uVar2 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (param_3 == 0) {\n              uVar2 = (int)uVar10 >> (0x14U - iVar6 & 0xff);\n              local_70 = param_3;\n              if (uVar10 == uVar2 << (0x14U - iVar6 & 0xff)) {\n                local_70 = 2 - (uVar2 & 1);\n              }\n              goto LAB_0800630c;\n            }\n            local_70 = 0;\n          }\n          uVar13 = do_nothing_0800708c(param_1,param_2);\n          uVar19 = CONCAT44(DAT_08006424,DAT_08006420);\n          uVar11 = (undefined4)(uVar13 >> 0x20);\n          uVar1 = (undefined4)uVar13;\n          uVar20 = uVar13 & 0xffffffff | ((ulonglong)param_2 & 0x7fffffff) << 0x20;\n          if ((param_1 == 0) && ((uVar8 == 0 || ((param_2 & 0x3fffffff) == DAT_08006438)))) {\n            if ((int)param_4 < 0) {\n              uVar13 = FUNC_08000724(0,DAT_08006438,uVar1,uVar11);\n            }\n            if (-1 < (int)param_2) {\n              return (uint)uVar13;\n            }\n            if ((local_70 | uVar8 + 0xc0100000) != 0) {\n              return (uint)uVar13;\n            }\n          }\n          else {\n            uVar2 = 0xffffffff - ((int)param_2 >> 0x1f);\n            uVar13 = CONCAT44(param_2,param_1);\n            if ((local_70 | uVar2) != 0) {\n              if (DAT_08006440 < (int)uVar10) {\n                param_1 = DAT_08006420;\n                param_2 = DAT_08006424;\n                if (DAT_08006440 + 0x2100000 < (int)uVar10) {\n                  if (DAT_08006434 < (int)uVar8) {\nLAB_08006418:\n                    if ((int)param_4 < 1) {\n                      return 0;\n                    }\n                    goto LAB_0800634a;\n                  }\nLAB_080063fa:\n                  uVar19 = CONCAT44(DAT_08006424,DAT_08006420);\n                  if (-1 < (int)param_4) {\n                    return 0;\n                  }\n                  goto LAB_0800634a;\n                }\n                if ((int)uVar8 <= DAT_08006444) goto LAB_080063fa;\n                if ((int)DAT_08006438 < (int)uVar8) goto LAB_08006418;\n                uVar14 = FUNC_08000168(uVar1,uVar11,0,DAT_080065d0);\n                uVar11 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar1 = (undefined4)uVar14;\n                uVar14 = FUNC_080004d0(uVar1,uVar11,DAT_080065a8,DAT_080065ac);\n                uVar15 = FUNC_080004d0(uVar1,uVar11,DAT_080065b0,DAT_080065b4);\n                uVar16 = FUNC_080004d0(uVar1,uVar11,0,DAT_080065d4);\n                uVar16 = FUNC_08000168(DAT_080065b8,DAT_080065bc,(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar16 = FUNC_080004d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),uVar1,uVar11);\n                uVar16 = FUNC_08000168(0,DAT_080065d8,(int)uVar16,(int)((ulonglong)uVar16 >> 0x20));\n                uVar17 = FUNC_080004d0(uVar1,uVar11,uVar1,uVar11);\n                uVar16 = FUNC_080004d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar17,\n                                      (int)((ulonglong)uVar17 >> 0x20));\n                uVar16 = FUNC_080004d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),DAT_080065c0,\n                                      DAT_080065c4);\n                uVar15 = FUNC_08000168((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                FUNC_0800016c((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar15,\n                             (int)((ulonglong)uVar15 >> 0x20));\n                lVar18 = (ulonglong)extraout_r1 << 0x20;\n                uVar10 = extraout_r1;\n              }\n              else {\n                local_54 = 0;\n                if (uVar8 < 0x100000) {\n                  uVar20 = FUNC_080004d0();\n                  local_54 = -0x35;\n                }\n                uVar10 = (uint)(uVar20 >> 0x20);\n                uVar1 = (undefined4)uVar20;\n                local_54 = ((int)uVar10 >> 0x14) + -0x3ff + local_54;\n                uVar10 = uVar10 & 0xfffff;\n                uVar8 = uVar10 | 0x3ff00000;\n                if (DAT_0800691c < (int)uVar10) {\n                  if (DAT_08006920 < (int)uVar10) {\n                    uVar8 = uVar8 - 0x100000;\n                    local_54 = local_54 + 1;\n                    goto LAB_08006628;\n                  }\n                  iVar6 = 1;\n                }\n                else {\nLAB_08006628:\n                  iVar6 = 0;\n                }\n                uVar7 = *(undefined4 *)(PTR_DAT_08006924 + iVar6 * 8);\n                uVar9 = *(undefined4 *)((int)(PTR_DAT_08006924 + iVar6 * 8) + 4);\n                uVar14 = FUNC_08000168(uVar1,uVar8,uVar7,uVar9);\n                uVar12 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar15 = FUNC_0800016c(uVar1,uVar8,uVar7,uVar9);\n                uVar15 = FUNC_08000724(0,DAT_08006928,(int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n                uVar3 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar16 = FUNC_080004d0((int)uVar14,uVar12,(int)uVar15,uVar3);\n                uVar4 = (undefined4)((ulonglong)uVar16 >> 0x20);\n                uVar11 = (undefined4)uVar16;\n                uVar16 = FUNC_080004d0(0,uVar4);\n                uVar14 = FUNC_08000168((int)uVar14,uVar12,(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar16 = FUNC_08000168(0,((int)uVar8 >> 1 | 0x20000000U) + 0x80000 + iVar6 * 0x40000,\n                                      uVar7,uVar9);\n                uVar16 = FUNC_08000168(uVar1,uVar8,(int)uVar16,(int)((ulonglong)uVar16 >> 0x20));\n                uVar16 = FUNC_080004d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),0,uVar4);\n                uVar14 = FUNC_08000168((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar14 = FUNC_080004d0((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar15,uVar3\n                                     );\n                uVar12 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar15 = FUNC_080004d0(uVar11,uVar4);\n                uVar3 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar1 = (undefined4)uVar15;\n                uVar15 = FUNC_080004d0(uVar1,uVar3,DAT_080068d0,DAT_080068d4);\n                uVar15 = FUNC_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_080068d8,\n                                      DAT_080068dc);\n                uVar15 = FUNC_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar1,uVar3);\n                uVar15 = FUNC_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_080068e0,\n                                      DAT_080068e4);\n                uVar15 = FUNC_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar1,uVar3);\n                uVar15 = FUNC_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_080068e8,\n                                      DAT_080068ec);\n                uVar15 = FUNC_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar1,uVar3);\n                uVar15 = FUNC_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_080068f0,\n                                      DAT_080068f4);\n                uVar15 = FUNC_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar1,uVar3);\n                uVar15 = FUNC_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_080068f8,\n                                      DAT_080068fc);\n                uVar16 = FUNC_080004d0(uVar1,uVar3,uVar1,uVar3);\n                uVar15 = FUNC_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar16 = FUNC_0800016c(uVar11,uVar4,0,uVar4);\n                uVar16 = FUNC_080004d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar14,\n                                      uVar12);\n                uVar15 = FUNC_0800016c((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar15,\n                                      (int)((ulonglong)uVar15 >> 0x20));\n                uVar1 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar16 = FUNC_080004d0(0,uVar4,0,uVar4);\n                uVar3 = (undefined4)((ulonglong)uVar16 >> 0x20);\n                uVar17 = FUNC_0800016c((int)uVar16,uVar3,0,DAT_0800692c);\n                FUNC_0800016c((int)uVar17,(int)((ulonglong)uVar17 >> 0x20),(int)uVar15,uVar1);\n                uVar17 = FUNC_080004d0(0,uVar4,0,extraout_r1_00);\n                uVar7 = (undefined4)((ulonglong)uVar17 >> 0x20);\n                uVar21 = FUNC_08000168(0,extraout_r1_00,0,DAT_0800692c);\n                uVar16 = FUNC_08000168((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar16,uVar3\n                                     );\n                uVar15 = FUNC_08000168((int)uVar15,uVar1,(int)uVar16,(int)((ulonglong)uVar16 >> 0x20)\n                                     );\n                uVar15 = FUNC_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar11,uVar4);\n                uVar14 = FUNC_080004d0((int)uVar14,uVar12,0,extraout_r1_00);\n                uVar15 = FUNC_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar14,\n                                      (int)((ulonglong)uVar14 >> 0x20));\n                uVar1 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                FUNC_0800016c((int)uVar17,uVar7,(int)uVar15,uVar1);\n                uVar14 = FUNC_080004d0(0,extraout_r1_01,DAT_08006900,DAT_08006904);\n                uVar16 = FUNC_08000168(0,extraout_r1_01,(int)uVar17,uVar7);\n                uVar15 = FUNC_08000168((int)uVar15,uVar1,(int)uVar16,(int)((ulonglong)uVar16 >> 0x20)\n                                     );\n                uVar15 = FUNC_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006908,\n                                      DAT_0800690c);\n                uVar16 = FUNC_080004d0(0,extraout_r1_01,DAT_08006910,DAT_08006914);\n                uVar15 = FUNC_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar15 = FUNC_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),\n                                      *(undefined4 *)(PTR_DAT_08006930 + iVar6 * 8),\n                                      *(undefined4 *)((int)(PTR_DAT_08006930 + iVar6 * 8) + 4));\n                uVar16 = calculate_shifted_value_08000404(local_54);\n                uVar1 = (undefined4)((ulonglong)uVar16 >> 0x20);\n                uVar11 = *(undefined4 *)(PTR_DAT_08006934 + iVar6 * 8);\n                uVar12 = *(undefined4 *)((int)(PTR_DAT_08006934 + iVar6 * 8) + 4);\n                uVar17 = FUNC_0800016c((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar15,\n                                      (int)((ulonglong)uVar15 >> 0x20));\n                uVar17 = FUNC_0800016c((int)uVar17,(int)((ulonglong)uVar17 >> 0x20),uVar11,uVar12);\n                FUNC_0800016c((int)uVar17,(int)((ulonglong)uVar17 >> 0x20),(int)uVar16,uVar1);\n                uVar16 = FUNC_08000168(0,extraout_r1_02,(int)uVar16,uVar1);\n                lVar18 = FUNC_08000168((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),uVar11,uVar12);\n                uVar10 = extraout_r1_02;\n              }\n              uVar14 = FUNC_08000168((int)lVar18,(int)((ulonglong)lVar18 >> 0x20),(int)uVar14,\n                                    (int)((ulonglong)uVar14 >> 0x20));\n              uVar14 = FUNC_08000168((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar14,\n                                    (int)((ulonglong)uVar14 >> 0x20));\n              param_2 = DAT_080065dc;\n              if ((local_70 - 1 | uVar2) != 0) {\n                param_2 = DAT_080065d0;\n              }\n              uVar15 = FUNC_08000168(param_3,param_4,0,param_4);\n              uVar15 = FUNC_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),0,uVar10);\n              uVar14 = FUNC_080004d0((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),param_3,param_4);\n              uVar14 = FUNC_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar14,\n                                    (int)((ulonglong)uVar14 >> 0x20));\n              uVar12 = (undefined4)((ulonglong)uVar14 >> 0x20);\n              uVar1 = (undefined4)uVar14;\n              uVar14 = FUNC_080004d0(0,uVar10,0,param_4);\n              uVar3 = (undefined4)((ulonglong)uVar14 >> 0x20);\n              uVar11 = (undefined4)uVar14;\n              lVar18 = FUNC_0800016c(uVar1,uVar12,uVar11,uVar3);\n              uVar8 = (uint)((ulonglong)lVar18 >> 0x20);\n              uVar10 = (uint)lVar18;\n              if (DAT_080065e0 < (int)uVar8) {\n                if ((uVar8 + 0xbf700000 | uVar10) == 0) {\n                  uVar15 = FUNC_0800016c(uVar1,uVar12,DAT_08006ba8,DAT_08006bac);\n                  uVar16 = FUNC_08000168(uVar10,uVar8,uVar11,uVar3);\n                  iVar6 = is_end_of_string_080009f0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                       (int)((ulonglong)uVar16 >> 0x20));\n                  if (iVar6 == 0) goto LAB_08006968;\n                }\n                uVar19 = FUNC_080004d0(0,param_2,DAT_080065c8,DAT_080065cc);\n                param_1 = DAT_080065c8;\n                param_2 = DAT_080065cc;\n                goto LAB_0800634a;\n              }\n              if (DAT_08006c04 < (int)(uVar8 & 0x7fffffff)) {\n                if ((DAT_08006c08 + uVar8 | uVar10) == 0) {\n                  uVar15 = FUNC_08000168(uVar10,uVar8,uVar11,uVar3);\n                  iVar6 = validate_parameters_and_return_result_080009c8(uVar1,uVar12,(int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n                  if (iVar6 == 0) goto LAB_08006968;\n                }\n                uVar19 = FUNC_080004d0(0,param_2,DAT_08006bf0,DAT_08006bf4);\n                param_1 = DAT_08006bf0;\n                param_2 = DAT_08006bf4;\n              }\n              else {\nLAB_08006968:\n                if (DAT_08006bf8 < (int)(uVar8 & 0x7fffffff)) {\n                  uVar8 = (0x100000 >> (((int)(uVar8 & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          uVar8;\n                  uVar10 = (uVar8 * 2 >> 0x15) - 0x3ff;\n                  iVar6 = (int)(uVar8 & 0xfffff | 0x100000) >> (0x14 - uVar10 & 0xff);\n                  if (lVar18 < 0) {\n                    iVar6 = -iVar6;\n                  }\n                  uVar14 = FUNC_08000168(uVar11,uVar3,0,uVar8 & ~(DAT_08006bfc >> (uVar10 & 0xff)));\n                }\n                else {\n                  iVar6 = 0;\n                }\n                local_64 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                local_68 = (undefined4)uVar14;\n                FUNC_0800016c(local_68,local_64,uVar1,uVar12);\n                uVar14 = FUNC_080004d0(0,extraout_r1_03,DAT_08006bb0,DAT_08006bb4);\n                uVar11 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar15 = FUNC_08000168(0,extraout_r1_03,local_68,local_64);\n                uVar15 = FUNC_08000168(uVar1,uVar12,(int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n                uVar15 = FUNC_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006bb8,\n                                      DAT_08006bbc);\n                uVar16 = FUNC_080004d0(0,extraout_r1_03,DAT_08006bc0,DAT_08006bc4);\n                uVar15 = FUNC_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar12 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar16 = FUNC_0800016c((int)uVar14,uVar11,(int)uVar15,uVar12);\n                uVar3 = (undefined4)((ulonglong)uVar16 >> 0x20);\n                uVar1 = (undefined4)uVar16;\n                uVar14 = FUNC_08000168(uVar1,uVar3,(int)uVar14,uVar11);\n                uVar14 = FUNC_08000168((int)uVar15,uVar12,(int)uVar14,\n                                      (int)((ulonglong)uVar14 >> 0x20));\n                uVar12 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar15 = FUNC_080004d0(uVar1,uVar3,uVar1,uVar3);\n                uVar4 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar11 = (undefined4)uVar15;\n                uVar15 = FUNC_080004d0(uVar11,uVar4,DAT_08006bc8,DAT_08006bcc);\n                uVar15 = FUNC_08000168((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006bd0,\n                                      DAT_08006bd4);\n                uVar15 = FUNC_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar11,uVar4);\n                uVar15 = FUNC_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006bd8,\n                                      DAT_08006bdc);\n                uVar15 = FUNC_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar11,uVar4);\n                uVar15 = FUNC_08000168((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006be0,\n                                      DAT_08006be4);\n                uVar15 = FUNC_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar11,uVar4);\n                uVar15 = FUNC_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006be8,\n                                      DAT_08006bec);\n                uVar15 = FUNC_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar11,uVar4);\n                uVar15 = FUNC_08000168(uVar1,uVar3,(int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n                uVar11 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar16 = FUNC_080004d0(uVar1,uVar3,(int)uVar15,uVar11);\n                uVar15 = FUNC_08000168((int)uVar15,uVar11,0,0x40000000);\n                uVar15 = FUNC_08000724((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar15,\n                                      (int)((ulonglong)uVar15 >> 0x20));\n                uVar16 = FUNC_080004d0(uVar1,uVar3,(int)uVar14,uVar12);\n                uVar14 = FUNC_0800016c((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar14,\n                                      uVar12);\n                uVar14 = FUNC_08000168((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar14,\n                                      (int)((ulonglong)uVar14 >> 0x20));\n                uVar14 = FUNC_08000168((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),uVar1,uVar3);\n                uVar13 = FUNC_08000168(0,DAT_08006c00,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                iVar5 = (int)(uVar13 >> 0x20);\n                uVar10 = iVar5 + iVar6 * 0x100000;\n                uVar19 = uVar13 & 0xffffffff | (ulonglong)uVar10 << 0x20;\n                if ((int)uVar10 < 0x100000) {\n                  uVar19 = calculate_result_080071c0((int)uVar13,iVar5,iVar6);\n                }\n                param_1 = 0;\n              }\nLAB_0800634a:\n              uVar10 = FUNC_080004d0((int)uVar19,(int)(uVar19 >> 0x20),param_1,param_2);\n              return uVar10;\n            }\n          }\n          uVar1 = (undefined4)(uVar13 >> 0x20);\n          uVar14 = FUNC_08000168((int)uVar13,uVar1,(int)uVar13,uVar1);\n          uVar10 = (uint)((ulonglong)uVar14 >> 0x20);\n          uVar8 = (uint)uVar14;\n          param_1 = uVar8;\n          param_2 = uVar10;\nLAB_08006320:\n          uVar10 = FUNC_08000724(uVar8,uVar10,param_1,param_2);\n          return uVar10;\n        }\n      }\n    }\n    else if ((int)uVar10 <= (int)DAT_08006428) goto LAB_08006262;\n  }\n  if ((uVar8 + 0xc0100000 | param_1) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  uVar10 = shift_left_64_bits_080070a4(PTR_DAT_0800642c);\n  return uVar10;\n}\n\n",
            "called": [
                "FUN_080009c8",
                "FUN_08006c0c",
                "FUN_08000724",
                "FUN_08000168",
                "FUN_08000404",
                "FUN_080004d0",
                "FUN_0800016c",
                "FUN_0800708c",
                "FUN_080071c0",
                "FUN_080070a4",
                "FUN_080009f0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006228",
            "calling": [
                "FUN_08005900"
            ],
            "imported": false,
            "current_name": "FUNC_08006228"
        },
        "FUN_08000c3c": {
            "renaming": {
                "FUN_08000c3c": "leading_zero_bits_count_08000c3c",
                "param_1": "num",
                "iVar1": "leading_zeroes",
                "uVar2": "shift",
                "iVar3": "factor",
                "uVar4": "carry",
                "shifted_num": "shifted_num",
                "shifted_zero": "shifted_zero",
                "result": "result",
                "shifted_factor": "shifted_factor"
            },
            "code": "uint leading_zero_bits_count_08000c3c(uint num) {\n  if (num == 0) {\n    return 0;\n  }\n  int leading_zeroes = count_leading_zeroes(num);\n  int shift = leading_zeroes - 8;\n  int factor = shift * -0x800000 + 0x4a800000;\n  if (leading_zeroes > 7) {\n    uint shifted_num = num << (shift & 0xff);\n    uint shifted_zero = 0U >> (0x20 - shift & 0xff);\n    uint carry = (uint)(0x7fffffff < (0 << (shift & 0xff)));\n    uint result = factor + shifted_num + shifted_zero + carry;\n    if ((0 << (shift & 0xff)) == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shifted_num = num << (leading_zeroes + 0x18U & 0xff);\n  int shifted_factor = factor + ((num >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shifted_num >> 0x1f));\n  if ((shifted_num & 0x7fffffff) == 0) {\n    shifted_factor = shifted_factor & ~(shifted_num >> 0x1f);\n  }\n  return shifted_factor;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c3c",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "leading_zero_bits_count_08000c3c"
        },
        "FUN_080043bc": {
            "renaming": {
                "FUN_080043bc": "copy_and_process_data_080043bc",
                "puVar3": "dst",
                "puVar4": "src",
                "uVar1": "data_1",
                "uVar2": "data_2",
                "local_24": "data",
                "local_1c": "string"
            },
            "code": "void copy_and_process_data_080043bc(void)\n{\n    undefined4 data[2];\n    undefined2 string[6];\n    undefined4 *src = data_source;\n    undefined4 *dst = data;\n    for(int i = 0; i < 8; i+=2) {\n        *dst++ = *src++;\n        *dst++ = *src++;\n    }\n    *(undefined2 *)dst = *(undefined2 *)src;\n    process_string_and_data(0x66, data, 0x12);\n    return;\n}",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043bc",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "copy_and_process_data_080043bc"
        },
        "FUN_08001214": {
            "renaming": {
                "FUN_08001214": "check_param_limit_08001214",
                "param_1": "param_limit",
                "puVar1": "limit_ptr",
                "iVar2": "mem_address"
            },
            "code": "int check_param_limit_08001214(unsigned int param_limit) {\n  unsigned int* limit_ptr = DAT_08001238;\n  int mem_address = DAT_0800123c;\n  if (param_limit - 1U < 0x1000000) {\n    limit_ptr[1] = param_limit - 1U;\n    *(unsigned char*)(mem_address + 0x23) = 0xf0;\n    limit_ptr[2] = 0;\n    *limit_ptr = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001214",
            "calling": [
                "FUN_08004514",
                "FUN_08001104"
            ],
            "imported": false,
            "current_name": "check_param_limit_08001214"
        },
        "FUN_08003fc4": {
            "renaming": {
                "FUN_08003fc4": "set_parameter_in_memory_08003fc4",
                "param_1": "parameter",
                "PTR_DAT_08003fcc": "ptr_to_dat"
            },
            "code": "void set_parameter_in_memory_08003fc4(void* parameter){\n    int* PTR_DAT_08003fcc = (int*)PTR_DAT_08003fcc;\n    int offset = 0x40;\n    *(void**)(PTR_DAT_08003fcc + offset) = parameter;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fc4",
            "calling": [
                "FUN_080041c4",
                "FUN_0800426c"
            ],
            "imported": false,
            "current_name": "set_parameter_in_memory_08003fc4"
        },
        "FUN_08000404": {
            "renaming": {
                "FUN_08000404": "calculate_shifted_value_08000404",
                "param_1": "num",
                "uVar1": "temp1",
                "uVar2": "abs_num",
                "uVar3": "shift_amount",
                "iVar4": "count",
                "uVar5": "shift_amount_with_offset",
                "uVar6": "sign_bit",
                "in_r12": "shift_amount_complement",
                "bVar7": "shift_amount_with_offset_overflowed",
                "bVar8": "shift_amount_with_offset_equals_0",
                "bVar9": "shift_amount_overflowed"
            },
            "code": "ulonglong calculate_shifted_value_08000404(uint num) {\n    int count = 0;\n    while (num >>= 1) {\n        count++;\n    }\n    return 32 - count;\n}\n\n\nulonglong calculate_shifted_value_08000404(uint num) {\n    if (num == 0) {\n        return 0;\n    }\n\n    uint sign_bit = num & 0x80000000;\n    uint abs_num = num;\n    if ((int)sign_bit < 0) {\n        abs_num = -num;\n    }\n\n    uint shift_amount = calculate_shifted_value_08000404(abs_num) + 0x15;\n    uint shift_amount_overflow = shift_amount - 0x20;\n    bool shift_amount_overflowed = (int)shift_amount_overflow < 0;\n    bool shift_amount_equals_0 = shift_amount_overflow == 0;\n\n    uint shifted_value = 0;\n    if ((int)shift_amount < 0x20) {\n        uint shift_amount_with_offset = shift_amount + 1;\n        bool shift_amount_with_offset_overflowed = shift_amount_with_offset < 0;\n        bool shift_amount_with_offset_equals_0 = shift_amount_with_offset == 0;\n        if (!shift_amount_with_offset_equals_0 && shift_amount_with_offset_overflowed == shift_amount_overflowed) {\n            shifted_value = abs_num << (shift_amount & 0xff);\n            abs_num = abs_num >> ((0x1c - shift_amount_with_offset) & 0xff);\n        }\n    }\n\n    if (shift_amount_equals_0 || shift_amount_overflowed != shift_amount_equals_0) {\n        uint shift_amount_complement = 0x20 - shift_amount;\n        shifted_value = abs_num << (shift_amount & 0xff);\n        if (shift_amount_equals_0 || shift_amount_overflowed != shift_amount_equals_0) {\n            shifted_value |= 0U >> (shift_amount_complement & 0xff);\n        }\n        if (shift_amount_equals_0 || shift_amount_overflowed != shift_amount_equals_0) {\n            shifted_value |= 0 << (shift_amount & 0xff);\n        }\n    }\n\n    if ((int)shift_amount < 0x433) {\n        return CONCAT44(shifted_value + (0x432 - shift_amount) * 0x100000 | sign_bit, 0);\n    }\n\n    uint shift_amount_complement = ~(0x432 - shift_amount);\n    if (0x1e < (int)shift_amount_complement) {\n        return CONCAT44(num, shifted_value >> ((shift_amount_complement - 0x1f) & 0xff)) & 0x80000000ffffffff;\n    }\n\n    int shift_amount_complement_offset = shift_amount_complement - 0x13;\n    if (shift_amount_complement_offset == 0 || shift_amount_complement_offset < 0 != SCARRY4(shift_amount_complement - 0x1f, 0xc)) {\n        shift_amount_complement = shift_amount_complement + 1;\n        return CONCAT44(sign_bit | shifted_value >> (shift_amount_complement & 0xff), 0 | abs_num << ((0x20 - shift_amount_complement) & 0xff));\n    }\n\n    return CONCAT44(num, 0 | shifted_value >> ((0x20 - (0xcU - shift_amount_complement_offset)) & 0xff) | abs_num << ((0xcU - shift_amount_complement_offset) & 0xff)) & 0x80000000ffffffff;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000404",
            "calling": [
                "FUN_08006228"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08000404"
        },
        "FUN_0800209c": {
            "renaming": {
                "FUN_0800209c": "check_value_0800209c",
                "param_1": "values",
                "param_2": "num_values",
                "cVar1": "bit1",
                "cVar2": "bit2",
                "puVar3": "data_ptr",
                "iVar4": "value_shift",
                "iVar5": "value2",
                "uVar6": "value",
                "uVar7": "leading_zeroes",
                "data_mask": "data_mask",
                "data_mask2": "data_mask2",
                "data_start": "data_start",
                "data_output": "data_output",
                "DAT_08002204": "data_start",
                "DAT_08002208": "data_start + 1",
                "PTR_DAT_0800220c": "data_output + 4",
                "PTR_DAT_08002210": "data_output"
            },
            "code": "uint32_t check_value_0800209c(uint32_t *values, uint32_t num_values) {\n  uint32_t *data_ptr = DAT_08002204;\n  uint32_t data_mask = *data_ptr & 0x7;\n  if (num_values <= data_mask) {\n    *data_ptr = (*data_ptr & 0xfffffff8) | num_values;\n    if (num_values == (*data_ptr & 0x7)) {\n      uint32_t value = *values;\n      if ((int32_t)(value << 0x1e) < 0) {\n        data_ptr[1] = (data_ptr[1] & 0xffffff0f) | values[2];\n      }\n      uint32_t *data_ptr2 = DAT_08002204 + 2;\n      int32_t value_shift = value << 0x1f;\n      if (value_shift < 0) {\n        if (num_values < (data_mask & 0x7)) {\n          *data_ptr = (*data_ptr & 0xfffffff8) | num_values;\n          if (num_values != (*data_ptr & 0x7)) {\n            return 1;\n          }\n        }\n        if ((value & 0x4) != 0) {\n          data_ptr[1] = (data_ptr[1] & 0xfffff8ff) | values[3];\n        }\n        if ((int32_t)(value << 0x1c) < 0) {\n          data_ptr2[1] = (data_ptr2[1] & 0xffffc7ff) | (values[4] << 3);\n        }\n        uint32_t calculated_value = calculate_value();\n        uint32_t leading_zeroes = count_leading_zeroes(0xf000000);\n        uint32_t shift_amount = (data_ptr2[1] & 0xf0) >> (leading_zeroes & 0xff);\n        *(uint32_t *)PTR_DAT_08002210 = calculated_value >> PTR_DAT_0800220c[shift_amount];\n        encode_and_return(0);\n        return 0;\n      }\n      else {\n        uint32_t second_value = values[1];\n        if (second_value == 1) {\n          uint32_t bit1 = 0x40;\n          uint32_t bit2 = 0;\n        }\n        else {\n          if (second_value == 2) {\n            uint32_t data_mask2 = *DAT_08002204;\n            uint32_t bit1 = (data_mask2 >> count_leading_zeroes((uint32_t)(0x40 << 0x18))) << 0x1f;\n            uint32_t bit2 = 0;\n          }\n          else {\n            uint32_t bit1 = 0;\n            uint32_t bit2 = 0x40;\n          }\n        }\n        uint32_t leading_zeroes2 = count_leading_zeroes((bit1 << 0x18) | (bit2 << 8));\n        uint32_t shift_amount2 = (*DAT_08002204 >> (leading_zeroes2 & 0x1f)) << 0x1f;\n        if ((int32_t)shift_amount2 < 0) {\n          data_ptr[1] = (data_ptr[1] & 0xfffffffc) | second_value;\n          uint32_t value1 = get_value_from_pointer(value_shift, shift_amount2);\n          if (second_value == 1) {\n            while ((data_ptr2[1] & 0xc) != 4) {\n              uint32_t value2 = get_value_from_pointer();\n              if ((value2 - value1) >= 0x1389) {\n                return 3;\n              }\n            }\n          }\n          else if (second_value == 2) {\n            while ((data_ptr2[1] & 0xc) != 8) {\n              uint32_t value2 = get_value_from_pointer();\n              if ((value2 - value1) >= 0x1389) {\n                return 3;\n              }\n            }\n          }\n          else {\n            while ((data_ptr2[1] & 0xc) != 0) {\n              uint32_t value2 = get_value_from_pointer();\n              if ((value2 - value1) >= 0x1389) {\n                return 3;\n              }\n            }\n          }\n          return 3;\n        }\n      }\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_0800115c",
                "FUN_08002008",
                "FUN_08001104"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800209c",
            "calling": [
                "FUN_08004514"
            ],
            "imported": false,
            "current_name": "check_value_0800209c"
        },
        "FUN_0800403c": {
            "renaming": {
                "FUN_0800403c": "process_i2c_data_and_strings_0800403c",
                "param_1": "device_address",
                "param_2": "register_address",
                "param_3": "data",
                "param_4": "do_nothing_flag",
                "iVar1": "status",
                "local_14": "local_data_buffer",
                "process_data_08001828": "process_i2c_data",
                "PTR_DAT_08004074": "N/A",
                "process_data_and_strings_08004490": "print_error",
                "PTR_s____Src_i2c_c_08004078": "N/A",
                "thunk_do_nothing_08001168": "do_nothing"
            },
            "code": "void process_i2c_data_and_strings_0800403c(int device_address, int register_address, unsigned char data, int do_nothing_flag)\n{\n  int status;\n  unsigned char local_data_buffer[8];\n  local_data_buffer[0] = data;\n  status = process_i2c_data(device_address, register_address, 1, local_data_buffer, 1, 200);\n  if (status != 0) {\n    print_error(\"s____Src_i2c_c_08004078\", 0x1b);\n  }\n  if (do_nothing_flag != 0) {\n    do_nothing(0x32);\n  }\n  return;\n}",
            "called": [
                "thunk_FUN_08001168",
                "FUN_08001828",
                "FUN_08004490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800403c",
            "calling": [
                "FUN_08002cb0",
                "FUN_0800411c",
                "FUN_08002ad0",
                "FUN_08003298"
            ],
            "imported": false,
            "current_name": "process_i2c_data_and_strings_0800403c"
        },
        "FUN_08000cec": {
            "renaming": {
                "FUN_08000cec": "FUNC_08000cec"
            },
            "code": "\nuint FUNC_08000cec(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_08000e3c;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_08000e3c:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cec",
            "calling": [
                "FUN_08002b48",
                "FUN_08004a30",
                "FUN_08002cb0",
                "FUN_08002ec0",
                "FUN_08004a84",
                "FUN_08002bf0",
                "FUN_08002f28",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002d88"
            ],
            "imported": false,
            "current_name": "FUNC_08000cec"
        },
        "FUN_08006070": {
            "renaming": {
                "FUN_08006070": "calculate_result_08006070",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "result1",
                "uVar6": "result2",
                "uVar7": "var1",
                "uVar8": "var2",
                "concat1": "concat2",
                "concat2": "concat1"
            },
            "code": "ulonglong calculate_result_08006070(uint param1, uint param2, uint param3, uint param4)\n{\n    uint temp1, temp2;\n    int temp3;\n    uint temp4;\n    ulonglong result1, result2;\n    ulonglong concat1, concat2;\n    undefined8 var1;\n    undefined8 var2;\n\n    concat2 = CONCAT44(DAT_08006214, DAT_08006210);\n    concat1 = CONCAT44(DAT_08006204, DAT_08006200);\n    temp4 = param4 & 0x7fffffff;\n    if ((DAT_08006220 < (temp4 | (-param3 | param3) >> 0x1f)) || (temp2 = param2 & 0x7fffffff, DAT_08006220 < (temp2 | (-param1 | param1) >> 0x1f))) {\n        result1 = FUNC_0800016c(param1, param2, param3, param4, param4);\n        return result1;\n    }\n    if ((param4 + 0xc0100000 | param3) == 0) {\n        result1 = FUNC_08006d68();\n        return result1;\n    }\n    temp1 = (int)param4 >> 0x1e & 2U | param2 >> 0x1f;\n    if ((param1 | temp2) == 0) {\n        if (temp1 == 2) {\n            return CONCAT44(DAT_080061fc, DAT_080061f8);\n        }\n        if (temp1 != 3) {\n            return CONCAT44(param2, param1);\n        }\n    }\n    else {\n        if ((param3 | temp4) != 0) {\n            if (temp4 == DAT_08006220) {\n                if (temp2 == temp4) {\n                    if (temp1 == 2) {\n                        return CONCAT44(DAT_080061ec, DAT_080061e8);\n                    }\n                    if (temp1 == 3) {\n                        return CONCAT44(DAT_080061f4, DAT_080061f0);\n                    }\n                    if (temp1 != 1) {\n                        return CONCAT44(DAT_0800621c, DAT_08006218);\n                    }\n                    return CONCAT44(DAT_080061e4, DAT_080061e0);\n                }\n                if (temp1 == 2) {\n                    return CONCAT44(DAT_080061fc, DAT_080061f8);\n                }\n                if (temp1 == 3) {\n                    return result1;\n                }\n                if (temp1 == 1) {\n                    return 0x8000000000000000;\n                }\n                return 0;\n            }\n            if (temp2 != DAT_08006220) {\n                temp3 = (int)(temp2 - temp4) >> 0x14;\n                if (temp3 < 0x3d) {\n                    if (((int)param4 < 0) && (temp3 + 0x3c < 0 != SCARRY4(temp3, 0x3c))) {\n                        concat2 = 0;\n                    }\n                    else {\n                        FUNC_08000724(param1, param2);\n                        do_nothing_0800708c();\n                        concat2 = FUNC_08006d68();\n                    }\n                }\n                temp3 = (int)(concat2 >> 0x20);\n                if (temp1 != 1) {\n                    if (temp1 == 2) {\n                        var2 = FUNC_08000168((int)concat2, temp3, DAT_08006208, DAT_0800620c);\n                        var1 = CONCAT44(DAT_080061fc, DAT_080061f8);\n                    }\n                    else {\n                        if (temp1 == 0) {\n                            return concat2;\n                        }\n                        var1 = FUNC_08000168((int)concat2, temp3, DAT_08006208, DAT_0800620c);\n                        var2 = CONCAT44(DAT_080061fc, DAT_080061f8);\n                    }\n                    result1 = FUNC_08000168((int)var1, (int)((ulonglong)var1 >> 0x20), (int)var2, (int)((ulonglong)var2 >> 0x20));\n                    return result1;\n                }\n                return concat2 & 0xffffffff | (ulonglong)(temp3 + 0x80000000) << 0x20;\n            }\n        }\n        result1 = concat2;\n        if ((int)param2 < 0) {\n            result1 = CONCAT44(DAT_080061dc, DAT_080061d8);\n        }\n    }\n    return result1;\n}\n",
            "called": [
                "FUN_08000724",
                "FUN_08000168",
                "FUN_0800016c",
                "FUN_0800708c",
                "FUN_08006d68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006070",
            "calling": [
                "thunk_FUN_08006070"
            ],
            "imported": false,
            "current_name": "calculate_result_08006070"
        },
        "thunk_FUN_08006070": {
            "renaming": {
                "thunk_FUN_08006070": "calculate_result_thunk_08006070",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "unsigned_var_1",
                "uVar2": "unsigned_var_2",
                "iVar3": "signed_var_1",
                "uVar4": "unsigned_var_3",
                "uVar5": "result_1",
                "uVar6": "result_2",
                "uVar7": "undefined_var_1",
                "uVar8": "undefined_var_2"
            },
            "code": "ulonglong calculate_result_thunk_08006070(uint input_1, uint input_2, uint input_3, uint input_4)\n{\n  uint unsigned_var_1;\n  uint unsigned_var_2;\n  int signed_var_1;\n  uint unsigned_var_3;\n  ulonglong result_1;\n  ulonglong result_2;\n  undefined8 undefined_var_1;\n  undefined8 undefined_var_2;\n  result_2 = CONCAT44(DAT_08006214,DAT_08006210);\n  result_1 = CONCAT44(DAT_08006204,DAT_08006200);\n  unsigned_var_3 = input_4 & 0x7fffffff;\n  if ((DAT_08006220 < (unsigned_var_3 | (-input_3 | input_3) >> 0x1f)) ||\n     (unsigned_var_2 = input_2 & 0x7fffffff, DAT_08006220 < (unsigned_var_2 | (-input_1 | input_1) >> 0x1f))) {\n    result_1 = FUNC_0800016c(input_1,input_2,input_3,input_4,input_4);\n    return result_1;\n  }\n  if ((input_4 + 0xc0100000 | input_3) == 0) {\n    result_1 = FUNC_08006d68();\n    return result_1;\n  }\n  unsigned_var_1 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n  if ((input_1 | unsigned_var_2) == 0) {\n    if (unsigned_var_1 == 2) {\n      return CONCAT44(DAT_080061fc,DAT_080061f8);\n    }\n    if (unsigned_var_1 != 3) {\n      return CONCAT44(input_2,input_1);\n    }\n  }\n  else {\n    if ((input_3 | unsigned_var_3) != 0) {\n      if (unsigned_var_3 == DAT_08006220) {\n        if (unsigned_var_2 == unsigned_var_3) {\n          if (unsigned_var_1 == 2) {\n            return CONCAT44(DAT_080061ec,DAT_080061e8);\n          }\n          if (unsigned_var_1 == 3) {\n            return CONCAT44(DAT_080061f4,DAT_080061f0);\n          }\n          if (unsigned_var_1 != 1) {\n            return CONCAT44(DAT_0800621c,DAT_08006218);\n          }\n          return CONCAT44(DAT_080061e4,DAT_080061e0);\n        }\n        if (unsigned_var_1 == 2) {\n          return CONCAT44(DAT_080061fc,DAT_080061f8);\n        }\n        if (unsigned_var_1 == 3) {\n          return result_1;\n        }\n        if (unsigned_var_1 == 1) {\n          return 0x8000000000000000;\n        }\n        return 0;\n      }\n      if (unsigned_var_2 != DAT_08006220) {\n        signed_var_1 = (int)(unsigned_var_2 - unsigned_var_3) >> 0x14;\n        if (signed_var_1 < 0x3d) {\n          if (((int)input_4 < 0) && (signed_var_1 + 0x3c < 0 != SCARRY4(signed_var_1,0x3c))) {\n            result_2 = 0;\n          }\n          else {\n            FUNC_08000724(input_1,input_2);\n            do_nothing_0800708c();\n            result_2 = FUNC_08006d68();\n          }\n        }\n        signed_var_1 = (int)(result_2 >> 0x20);\n        if (unsigned_var_1 != 1) {\n          if (unsigned_var_1 == 2) {\n            undefined_var_2 = FUNC_08000168((int)result_2,signed_var_1,DAT_08006208,DAT_0800620c);\n            undefined_var_1 = CONCAT44(DAT_080061fc,DAT_080061f8);\n          }\n          else {\n            if (unsigned_var_1 == 0) {\n              return result_2;\n            }\n            undefined_var_1 = FUNC_08000168((int)result_2,signed_var_1,DAT_08006208,DAT_0800620c);\n            undefined_var_2 = CONCAT44(DAT_080061fc,DAT_080061f8);\n          }\n          result_1 = FUNC_08000168((int)undefined_var_1,(int)((ulonglong)undefined_var_1 >> 0x20),(int)undefined_var_2,\n                               (int)((ulonglong)undefined_var_2 >> 0x20));\n          return result_1;\n        }\n        return result_2 & 0xffffffff | (ulonglong)(signed_var_1 + 0x80000000) << 0x20;\n      }\n    }\n    result_1 = result_2;\n    if ((int)input_2 < 0) {\n      result_1 = CONCAT44(DAT_080061dc,DAT_080061d8);\n    }\n  }\n  return result_1;\n}",
            "called": [
                "FUN_08006070"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058fc",
            "calling": [
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "calculate_result_thunk_08006070"
        },
        "FUN_08004cac": {
            "renaming": {
                "FUN_08004cac": "reverse_and_process_string_08004cac",
                "param_1": "str_length",
                "puVar1": "str_start"
            },
            "code": "void reverse_and_process_string_08004cac(undefined4 str_length){\n  undefined *str_start = PTR_DAT_08004cc4;\n  reverse_string_and_allocate_memory_08004ffc(PTR_DAT_08004cc4,PTR_DAT_08004cc8,str_length);\n  process_string_data_08004c8c(str_start);\n  return;\n}",
            "called": [
                "FUN_08004ffc",
                "FUN_08004c8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cac",
            "calling": [
                "FUN_08004490"
            ],
            "imported": false,
            "current_name": "reverse_and_process_string_08004cac"
        },
        "FUN_08004c18": {
            "renaming": {
                "FUN_08004c18": "process_data_08004c18",
                "param_1": "data",
                "puVar1": "data_pointer",
                "iVar2": "comparison_result",
                "iVar3": "value_difference",
                "uVar4": "status",
                "puVar5": "string_pointer"
            },
            "code": "int process_data_08004c18(unsigned char data){\\\n    unsigned char *data_pointer;\\\n    int comparison_result;\\\n    int value_difference;\\\n    unsigned char status;\\\n    unsigned short *string_pointer;\\\n    \\\n    string_pointer = (unsigned short *)PTR_DAT_08004c28;\\\n    *PTR_DAT_08004c28 = data;\\\n    data_pointer = PTR_DAT_08004c2c;\\\n    if ((PTR_DAT_08004c2c[0x39] == \"\\x01\") || (PTR_DAT_08004c2c[0x39] == \"\\\"\")) {\\\n        if (string_pointer == (unsigned short *)0x0) {\\\n            return 1;\\\n        }\\\n        if (PTR_DAT_08004c2c[0x38] != \"\\x01\") {\\\n            PTR_DAT_08004c2c[0x38] = 1;\\\n            *(int *)(data_pointer + 0x3c) = 0;\\\n            *(unsigned short *)(data_pointer + 0x24) = 1;\\\n            if (data_pointer[0x39] == \"\\\"\") {\\\n                status = 0x32;\\\n            }\\\n            else {\\\n                status = 0x12;\\\n            }\\\n            *(unsigned short *)(data_pointer + 0x26) = 1;\\\n            data_pointer[0x39] = status;\\\n            while (1) {\\\n                if (*(short *)(data_pointer + 0x26) == 0) {\\\n                    comparison_result = get_value_from_pointer_0800115c();\\\n                    do {\\\n                        if (**(int **)data_pointer << 0x19 < 0) {\\\n                            if (data_pointer[0x39] == \"2\") {\\\n                                status = 0x22;\\\n                            }\\\n                            else {\\\n                                status = 1;\\\n                            }\\\n                            data_pointer[0x39] = status;\\\n                            data_pointer[0x38] = 0;\\\n                            return 0;\\\n                        }\\\n                        value_difference = get_value_from_pointer_0800115c();\\\n                    } while ((unsigned int)(value_difference - comparison_result) < 6);\\\n                    comparison_result = *(int *)data_pointer;\\\n                    *(unsigned int *)(comparison_result + 0xc) = *(unsigned int *)(comparison_result + 0xc) & 0xffffff7f;\\\n                    *(unsigned int *)(comparison_result + 0xc) = *(unsigned int *)(comparison_result + 0xc) & 0xffffffdf;\\\n                    *(unsigned int *)(comparison_result + 0xc) = *(unsigned int *)(comparison_result + 0xc) & 0xfffffeff;\\\n                    *(unsigned int *)(comparison_result + 0x14) = *(unsigned int *)(comparison_result + 0x14) & 0xfffffffe;\\\n                    data_pointer[0x39] = 1;\\\n                    data_pointer[0x38] = 0;\\\n                    return 3;\\\n                }\\\n                *(short *)(data_pointer + 0x26) = *(short *)(data_pointer + 0x26) + -1;\\\n                if (*(int *)(data_pointer + 8) == 0x1000) {\\\n                    comparison_result = get_value_from_pointer_0800115c();\\\n                    while (-1 < **(int **)data_pointer << 0x18) {\\\n                        value_difference = get_value_from_pointer_0800115c();\\\n                        if (5 < (unsigned int)(value_difference - comparison_result)) {\\\n                            comparison_result = *(int **)data_pointer;\\\n                            *(unsigned int *)(comparison_result + 4) = *string_pointer & 0x1ff;\\\n                            if (*(int *)(data_pointer + 0x10) == 0) {\\\n                                string_pointer = string_pointer + 1;\\\n                                goto LAB_080027c4;\\\n                            }\\\n                        }\\\n                    }\\\n                }\\\n                else {\\\n                    comparison_result = get_value_from_pointer_0800115c();\\\n                    while (-1 < **(int **)data_pointer << 0x18) {\\\n                        value_difference = get_value_from_pointer_0800115c();\\\n                        if (5 < (unsigned int)(value_difference - comparison_result)) {\\\n                            comparison_result = *(int **)data_pointer;\\\n                            *(unsigned int *)(comparison_result + 4) = (unsigned int)*(unsigned char *)string_pointer;\\\n                        }\\\n                    }\\\n                    string_pointer = (unsigned short *)((int)string_pointer + 1);\\\n                }\\\n            }\\\n        }\\\n    }\\\n    return 2;\\\n}",
            "called": [
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c18",
            "calling": [
                "FUN_08004c8c",
                "FUN_08004490",
                "FUN_08004300"
            ],
            "imported": false,
            "current_name": "process_data_08004c18"
        },
        "FUN_0800483c": {
            "renaming": {
                "FUN_0800483c": "calculate_hash_0800483c",
                "param_1": "hash_input",
                "uVar1": "hash_input_1",
                "uVar2": "hash_input_2",
                "iVar3": "is_input_empty",
                "iVar4": "input_length",
                "iVar5": "hash_input_5",
                "iVar6": "hash_input_6",
                "hash_input_1": "hash_input_7",
                "hash_input_2": "hash_input_8",
                "hash_input_3": "hash_input_9",
                "hash_input_4": "hash_input_10",
                "hash_input_7": "hash_input_11",
                "hash_input_8": "hash_input_12",
                "hash_input_9": "hash_input_13",
                "hash": "hash_input_14"
            },
            "code": "void calculate_hash_0800483c(int *hash_input)\n{\n  int input_length = hash_input[0xc];\n  int hash_input_1 = FUNC_08000adc(hash_input[7], hash_input[9]);\n  hash_input_1 = FUNC_08000ad8(hash_input_1, input_length);\n  hash_input[10] = hash_input_1;\n  if (*hash_input == 3) {\n    int is_input_empty = check_if_input_is_empty_08001064(hash_input[10], 0);\n    if (is_input_empty == 0) {\n      is_input_empty = is_string_terminated_08001028(hash_input[10], DAT_08004974);\n    }\n    else {\n      is_input_empty = check_if_input_is_empty_08001064(hash_input[10], DAT_08004964);\n    }\n    if (is_input_empty != 0) {\n      int hash_input_2 = hash_input[10];\n      int hash_input_3 = FUNC_08000cec(hash_input[10], DAT_08004968);\n      is_input_empty = check_if_input_is_empty_08001064(hash_input[10], 0);\n      int hash_input_4 = hash_input[10];\n      if (is_input_empty == 0) {\n        hash_input_4 = hash_input_4 + -0x80000000;\n      }\n      hash_input_3 = FUNC_08000e54(hash_input_3, hash_input_4);\n      hash_input_1 = FUNC_08000ad8(hash_input_2, hash_input_3);\n      hash_input[10] = hash_input_1;\n    }\n  }\n  int hash_input_5 = hash_input[2];\n  int hash_input_6 = hash_input[3];\n  int hash_input_7 = FUNC_08000cec(hash_input[1], hash_input[10]);\n  hash_input[0xe] = hash_input_7;\n  hash_input_1 = FUNC_08000adc(hash_input[10], hash_input[0xf]);\n  hash_input[0xf] = hash_input_1;\n  int is_hash_terminated = is_string_terminated_08001028(hash_input[0xf], DAT_0800496c);\n  int hash_input_8 = DAT_0800496c;\n  if ((is_hash_terminated == 0) && (is_hash_terminated = check_if_input_is_empty_08001064(hash_input[0xf], DAT_08004970), hash_input_8 = DAT_08004970, is_hash_terminated == 0)) {\n    hash_input_8 = hash_input[0xf];\n  }\n  hash_input[0xf] = hash_input_8;\n  int hash_input_9 = FUNC_08000ad8(hash_input[0xc], hash_input[0xd]);\n  hash_input[0x10] = hash_input_9;\n  int hash_input_11 = hash_input[0xe];\n  int hash_input_12 = FUNC_08000cec(hash_input_5, hash_input[0xf]);\n  hash_input_12 = FUNC_08000adc(hash_input_12, hash_input_11);\n  int hash_input_13 = FUNC_08000cec(hash_input_6, hash_input[0x10]);\n  hash_input_1 = FUNC_08000ad8(hash_input_12, hash_input_13);\n  hash_input[0x12] = hash_input_1;\n  int hash = calculate_hash_0800483c_08000c44(hash_input[0x13]);\n  is_hash_terminated = is_string_terminated_08001028(hash_input[0x12], DAT_0800496c);\n  hash_input_8 = DAT_0800496c;\n  if ((is_hash_terminated == 0) && (is_hash_terminated = check_if_input_is_empty_08001064(hash_input[0x12], DAT_08004970), hash_input_8 = DAT_08004970, is_hash_terminated == 0)) {\n    hash_input_8 = hash_input[0x12];\n  }\n  hash_input_1 = FUNC_08000cec(hash_input_8, hash);\n  hash_input[0x12] = hash_input_1;\n  hash_input[0xd] = hash_input[0xc];\n  hash_input[0xb] = hash_input[10];\n  hash_input[0x15] = hash_input[0x14];\n  return;\n}",
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08001064",
                "FUN_08000adc",
                "FUN_08000e54",
                "FUN_08001028",
                "FUN_08000c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800483c",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "calculate_hash_0800483c"
        },
        "FUN_08004c8c": {
            "renaming": {
                "FUN_08004c8c": "process_string_data_08004c8c",
                "param_1": "string_data",
                "uVar1": "string_end",
                "puVar2": "current_char",
                "find_string_end_08000150": "find_string_end",
                "process_data_08004c18": "process_data"
            },
            "code": "void process_string_data_08004c8c(const char* string_data) {\n  const char* current_char = string_data;\n  while(true) {\n    uint32_t string_end = find_string_end(current_char);\n    if (string_end <= (uint32_t)(current_char - string_data)) break;\n    process_data(*current_char);\n    current_char++;\n  }\n  return;\n}",
            "called": [
                "FUN_08000150",
                "FUN_08004c18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c8c",
            "calling": [
                "FUN_08004cac",
                "FUN_08004490",
                "FUN_08004300"
            ],
            "imported": false,
            "current_name": "process_string_data_08004c8c"
        },
        "FUN_08001460": {
            "renaming": {
                "FUN_08001460": "check_value_08001460",
                "param_1": "data",
                "param_2": "value",
                "param_3": "limit",
                "iVar1": "start_time",
                "puVar4": "ptr",
                "uVar3": "check_value",
                "check_index": "check_index",
                "check_value": "check_value",
                "PTR_0800115c": "get_time_from_pointer"
            },
            "code": "uint32_t check_value_08001460(uint32_t **data, uint32_t value, uint32_t limit)\n{\n  int32_t start_time = PTR_0800115c();\n  do {\n    uint32_t *ptr = *data;\n    uint32_t check_index = (value << 8) >> 0x18;\n    uint32_t check_value_08001460 = (check_index == 1) ? ptr[5] : ptr[6];\n    if ((value & 0xffff & ~check_value_08001460) == 0)\n      return 0;\n    if ((int32_t)(ptr[5] << 0x15) < 0) {\n      *ptr |= 0x200;\n      ptr[5] &= 0xfffffbff;\n      data[14] = (uint32_t *)0x4;\n      *((uint8_t *)data + 0x35) = 0x20;\n      *((uint32_t *)data + 13) = 0;\n      return 1;\n    }\n  } while ((limit == 0xffffffff) || ((limit != 0) && (PTR_0800115c() - start_time <= limit)));\n  *((uint8_t *)data + 0x35) = 0x20;\n  *((uint32_t *)data + 13) = 0;\n  return 3;\n}",
            "called": [
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001460",
            "calling": [
                "FUN_08001530",
                "FUN_080015e8"
            ],
            "imported": false,
            "current_name": "check_value_08001460"
        },
        "FUN_08001064": {
            "renaming": {
                "FUN_08001064": "check_if_input_is_empty_08001064",
                "in_CY": "input_char"
            },
            "code": "bool check_if_input_is_empty_08001064(void)\n{\n  char input_char;\n  concatenate_integers();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_08000ffc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001064",
            "calling": [
                "FUN_08004a84",
                "FUN_0800483c"
            ],
            "imported": false,
            "current_name": "check_if_input_is_empty_08001064"
        },
        "FUN_08003fd0": {
            "renaming": {
                "FUN_08003fd0": "set_parameter_value_08003fd0",
                "param_1": "value",
                "PTR_DAT_08003fd8": "ptr_data"
            },
            "code": "void set_parameter_value_08003fd0(int value) {\n    int* ptr = *(int*)PTR_DAT_08003fd8;\n    int offset = 0x3c;\n    *(ptr + offset) = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fd0",
            "calling": [
                "FUN_080041c4",
                "FUN_0800426c"
            ],
            "imported": false,
            "current_name": "set_parameter_value_08003fd0"
        },
        "FUN_08000892": {
            "renaming": {
                "FUN_08000892": "extract_bits_08000892",
                "param_1": "mask",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "unaff_r4": "unaff_r4",
                "uVar1": "bit",
                "uVar2": "mask_result",
                "uVar3": "param_2_result",
                "in_r12": "in_r12",
                "bVar4": "is_param1_2_zero"
            },
            "code": "ulonglong extract_bits_08000892(uint in_r12, uint unaff_r4, uint param_2, uint param_4)\n{\n    uint mask = 0x80000000;\n    uint uVar2 = (in_r12 & (param_4 >> 0x14));\n    uint uVar3 = param_2;\n    if (unaff_r4 != in_r12 || uVar2 != in_r12)\n    {\n        if (unaff_r4 == in_r12)\n        {\n            if (((param_1 | (param_2 << 0xc)) == 0) && (param_1 = param_3, uVar3 = param_4, uVar2 != in_r12))\n            {\n                return (ulonglong)((param_2 ^ param_4) & 0x80000000 | 0x7ff00000) << 0x20;\n            }\n        }\n        else if (uVar2 == in_r12)\n        {\n            param_1 = param_3;\n            uVar3 = param_4;\n            if ((param_3 | (param_4 << 0xc)) == 0)\n            {\n                return (ulonglong)((param_2 ^ param_4) & 0x80000000) << 0x20;\n            }\n        }\n        else\n        {\n            bool is_param1_2_zero = ((param_1 | (param_2 << 1)) == 0);\n            bool is_param3_4_zero = ((param_3 | (param_4 << 1)) == 0);\n            if (!is_param1_2_zero && !is_param3_4_zero)\n            {\n                if (unaff_r4 == 0)\n                {\n                    uint uVar1;\n                    uVar3 = param_2 & mask;\n                    do\n                    {\n                        uVar1 = param_1 & mask;\n                        param_1 = param_1 << 1;\n                        param_2 = param_2 * 2 + (uint)(uVar1 != 0);\n                    } while ((param_2 & 0x100000) == 0);\n                    param_2 = param_2 | uVar3;\n                    if (uVar2 != 0)\n                    {\n                        return CONCAT44(param_2, param_1);\n                    }\n                }\n                do\n                {\n                    uVar3 = param_3 & mask;\n                    param_3 = param_3 << 1;\n                    param_4 = param_4 * 2 + (uint)(uVar3 != 0);\n                } while ((param_4 & 0x100000) == 0);\n                return CONCAT44(param_2, param_1);\n            }\n            if (is_param1_2_zero)\n            {\n                if (is_param3_4_zero)\n                {\n                    return CONCAT44(uVar3, param_1) | 0x7ff8000000000000;\n                }\n                else\n                {\n                    goto LAB_080006c8;\n                }\n            }\n            else\n            {\n                goto LAB_08000704;\n            }\n        }\n    }\n    return CONCAT44(uVar3, param_1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000892",
            "calling": [
                "FUN_08000724"
            ],
            "imported": false,
            "current_name": "extract_bits_08000892"
        },
        "FUN_08004458": {
            "renaming": {
                "FUN_08004458": "process_and_send_data_08004458",
                "puVar1": "current_data",
                "uVar2": "next_data",
                "puVar3": "new_current_data",
                "puVar4": "new_data_ptr",
                "puVar5": "data_ptr",
                "local_30": "local_data",
                "local_24": "local_string"
            },
            "code": "void process_and_send_data_08004458() {\n  undefined4 *current_data = local_data;\n  undefined4 *data_ptr = (undefined4 *)DATA_PTR;\n  do {\n    undefined4 *new_data_ptr = data_ptr;\n    undefined4 *new_current_data = current_data;\n    undefined4 next_data = new_data_ptr[1];\n    data_ptr = new_data_ptr + 2;\n    *new_current_data = *new_data_ptr;\n    new_current_data[1] = next_data;\n    current_data = new_current_data + 2;\n  } while (data_ptr != (undefined4 *)(DATA_PTR + 0x18));\n  current_data[2] = *data_ptr;\n  *(undefined2 *)(current_data + 3) = *(undefined2 *)(new_data_ptr + 3);\n  process_string_and_data(0x70, local_data, 0x1e);\n  return;\n}",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004458",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_and_send_data_08004458"
        },
        "thunk_FUN_08001168": {
            "renaming": {
                "thunk_FUN_08001168": "thunk_do_nothing_08001168"
            },
            "code": "\nvoid thunk_do_nothing_08001168(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "FUN_08001168"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f64",
            "calling": [
                "FUN_0800403c",
                "FUN_08004028",
                "FUN_08004490",
                "FUN_08003298"
            ],
            "imported": false,
            "current_name": "thunk_do_nothing_08001168"
        },
        "FUN_08000134": {
            "renaming": {
                "FUN_08000134": "concatenate_values_08000134",
                "param_1": "value1",
                "param_2": "value2",
                "DAT_08000144": "global_variable",
                "PTR_FUN_0800014c": "global_function_pointer",
                "PTR_DAT_08000148": "global_data_pointer"
            },
            "code": "uint64_t concatenate_values_08000134(uint64_t *value1, uint64_t *value2) {\n    if (DAT_08000144 != 0) {\n        value1 = PTR_FUN_0800014c;\n        value2 = PTR_DAT_08000148;\n    }\n    return ((uint64_t)(*value2) << 32) | (*value1);\n}",
            "called": [
                "FUN_080072d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000134",
            "calling": [
                "FUN_08004fb4"
            ],
            "imported": false,
            "current_name": "concatenate_values_08000134"
        },
        "FUN_08003eb0": {
            "renaming": {
                "FUN_08003eb0": "get_result_08003eb0",
                "param_1": "input"
            },
            "code": "longlong get_result_08003eb0(uint input) {\n  if (*(int *)PTR_DAT_08003ec4 == 0) {\n    software_interrupt(0x3f);\n    return CONCAT44(input, 1);\n  }\n  return (ulonglong)input << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eb0",
            "calling": [
                "FUN_080041ae"
            ],
            "imported": false,
            "current_name": "get_result_08003eb0"
        },
        "FUN_08005c70": {
            "renaming": {
                "FUN_08005c70": "FUNC_08005c70"
            },
            "code": "\nulonglong FUNC_08005c70(uint param_1,uint param_2)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  ulonglong uVar9;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  undefined8 uVar12;\n  \n  uVar9 = CONCAT44(param_2,param_1);\n  uVar8 = param_2 & 0x7fffffff;\n  if (DAT_08005f90 < (int)uVar8) {\n    if ((uVar8 + 0xc0100000 | param_1) != 0) {\n      uVar10 = FUNC_08000168(param_1,param_2,param_1,param_2);\n      uVar2 = (undefined4)((ulonglong)uVar10 >> 0x20);\n      uVar9 = FUNC_08000724((int)uVar10,uVar2,(int)uVar10,uVar2);\n      return uVar9;\n    }\n    uVar9 = FUNC_080004d0(param_1,param_2,DAT_08005f28,DAT_08005f2c);\n    uVar10 = FUNC_080004d0(param_1,param_2,DAT_08005f30,DAT_08005f34);\nLAB_08005cba:\n    uVar9 = FUNC_0800016c((int)uVar9,(int)(uVar9 >> 0x20),(int)uVar10,\n                         (int)((ulonglong)uVar10 >> 0x20));\n  }\n  else {\n    if ((int)uVar8 <= DAT_08005f94) {\n      if (0x3e3fffff < uVar8) {\n        uVar10 = FUNC_080004d0(param_1,param_2,param_1,param_2);\n        uVar7 = (undefined4)((ulonglong)uVar10 >> 0x20);\n        uVar2 = (undefined4)uVar10;\n        uVar10 = FUNC_080004d0(uVar2,uVar7,DAT_08005f40,DAT_08005f44);\n        uVar10 = FUNC_0800016c((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f48,DAT_08005f4c\n                             );\n        uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = FUNC_08000168((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f50,DAT_08005f54\n                             );\n        uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = FUNC_0800016c((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f58,DAT_08005f5c\n                             );\n        uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = FUNC_08000168((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f60,DAT_08005f64\n                             );\n        uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = FUNC_0800016c((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f68,DAT_08005f6c\n                             );\n        uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar11 = FUNC_080004d0(uVar2,uVar7,DAT_08005f70,DAT_08005f74);\n        uVar11 = FUNC_08000168((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f78,DAT_08005f7c\n                             );\n        uVar11 = FUNC_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar7);\n        uVar11 = FUNC_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f80,DAT_08005f84\n                             );\n        uVar11 = FUNC_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar7);\n        uVar11 = FUNC_08000168((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f88,DAT_08005f8c\n                             );\n        uVar11 = FUNC_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar7);\n        uVar11 = FUNC_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08005f98);\n        uVar10 = FUNC_08000724((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                              (int)((ulonglong)uVar11 >> 0x20));\n        uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),param_1,param_2);\n        goto LAB_08005cba;\n      }\n      uVar10 = FUNC_0800016c(param_1,param_2,DAT_08005f38,DAT_08005f3c);\n      iVar1 = is_end_of_string_080009f0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005f98);\n      if (iVar1 != 0) {\n        return uVar9;\n      }\n    }\n    uVar10 = do_nothing_0800708c(param_1,param_2);\n    uVar10 = FUNC_08000168(0,DAT_08005f98,(int)uVar10,(int)((ulonglong)uVar10 >> 0x20));\n    uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005f9c);\n    uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar2 = (undefined4)uVar10;\n    uVar10 = FUNC_080004d0(uVar2,uVar3,DAT_08005f40,DAT_08005f44);\n    uVar10 = FUNC_0800016c((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f48,DAT_08005f4c);\n    uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = FUNC_08000168((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f50,DAT_08005f54);\n    uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = FUNC_0800016c((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f58,DAT_08005f5c);\n    uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = FUNC_08000168((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f60,DAT_08005f64);\n    uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = FUNC_0800016c((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f68,DAT_08005f6c);\n    uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar4 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar11 = FUNC_080004d0(uVar2,uVar3,DAT_08005f70,DAT_08005f74);\n    uVar11 = FUNC_08000168((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f78,DAT_08005f7c);\n    uVar11 = FUNC_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar3);\n    uVar11 = FUNC_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f80,DAT_08005f84);\n    uVar11 = FUNC_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar3);\n    uVar11 = FUNC_08000168((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f88,DAT_08005f8c);\n    uVar11 = FUNC_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar3);\n    uVar11 = FUNC_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08005f98);\n    uVar5 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar12 = calculate_float_08006c0c(uVar2,uVar3);\n    uVar6 = (undefined4)((ulonglong)uVar12 >> 0x20);\n    uVar7 = (undefined4)uVar12;\n    if (DAT_08005fa0 < (int)uVar8) {\n      uVar10 = FUNC_08000724((int)uVar10,uVar4,(int)uVar11,uVar5);\n      uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar7,uVar6);\n      uVar10 = FUNC_0800016c((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar7,uVar6);\n      uVar2 = (undefined4)((ulonglong)uVar10 >> 0x20);\n      uVar10 = FUNC_0800016c((int)uVar10,uVar2,(int)uVar10,uVar2);\n      uVar10 = FUNC_08000168((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f30,DAT_08005f34);\n      uVar2 = DAT_08005f28;\n      uVar7 = DAT_08005f2c;\n    }\n    else {\n      uVar10 = FUNC_08000724((int)uVar10,uVar4,(int)uVar11,uVar5);\n      uVar11 = FUNC_0800016c(uVar7,uVar6,uVar7,uVar6);\n      uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                            (int)((ulonglong)uVar11 >> 0x20));\n      uVar11 = FUNC_080004d0(0,uVar6,0,uVar6);\n      uVar11 = FUNC_08000168(uVar2,uVar3,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n      uVar12 = FUNC_0800016c(uVar7,uVar6,0,uVar6);\n      uVar11 = FUNC_08000724((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar12,\n                            (int)((ulonglong)uVar12 >> 0x20));\n      uVar2 = (undefined4)((ulonglong)uVar11 >> 0x20);\n      uVar11 = FUNC_0800016c((int)uVar11,uVar2,(int)uVar11,uVar2);\n      uVar11 = FUNC_08000168(DAT_08006060,DAT_08006064,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n      uVar10 = FUNC_08000168((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                            (int)((ulonglong)uVar11 >> 0x20));\n      uVar11 = FUNC_0800016c(0,uVar6,0,uVar6);\n      uVar11 = FUNC_08000168(DAT_08006068,DAT_0800606c,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n      uVar10 = FUNC_08000168((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                            (int)((ulonglong)uVar11 >> 0x20));\n      uVar2 = DAT_08006068;\n      uVar7 = DAT_0800606c;\n    }\n    uVar9 = FUNC_08000168(uVar2,uVar7,(int)uVar10,(int)((ulonglong)uVar10 >> 0x20));\n    if ((int)param_2 < 1) {\n      uVar9 = uVar9 & 0xffffffff | (ulonglong)((int)(uVar9 >> 0x20) + 0x80000000) << 0x20;\n    }\n  }\n  return uVar9;\n}\n\n",
            "called": [
                "FUN_08006c0c",
                "FUN_08000724",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_0800016c",
                "FUN_0800708c",
                "FUN_080009f0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005c70",
            "calling": [
                "FUN_08005854"
            ],
            "imported": false,
            "current_name": "FUNC_08005c70"
        },
        "FUN_08002ee8": {
            "renaming": {
                "FUN_08002ee8": "check_string_and_concatenated_integers_are_zero_or_not_08002ee8",
                "iVar1": "concatenated_integers_result",
                "uVar2": "concatenated_integers",
                "PTR_DAT_08002f18": "PTR_DATA_START",
                "DAT_08002f1c": "STRING_TERMINATOR",
                "is_string_terminated_08001028": "is_string_terminated",
                "DAT_08002f20": "STRING_DATA",
                "FUNC_08000adc": "print_concatenated_integers_and_string",
                "FUNC_08000ad8": "print_concatenated_integers_and_string",
                "DAT_08002f24": "DEFAULT_STRING_DATA"
            },
            "code": "void check_string_and_concatenated_integers_are_zero_or_not_08002ee8(void)\n{\n  int concatenated_integers_result;\n  undefined4 concatenated_integers = *(undefined4 *)(PTR_DAT_08002f18 + 8);\n  concatenated_integers_result = check_concatenated_integers_are_zero_or_not_08001050(concatenated_integers, DAT_08002f1c);\n  if ((concatenated_integers_result != 0) && (is_string_terminated_08001028(concatenated_integers, DAT_08002f20) != 0)) {\n    print_concatenated_integers_and_string(concatenated_integers, DAT_08002f20);\n    return;\n  }\n  print_concatenated_integers_and_string(concatenated_integers, DAT_08002f24);\n  return;\n}",
            "called": [
                "FUN_08000ad8",
                "FUN_08000adc",
                "FUN_08001028",
                "FUN_08001050"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ee8",
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "check_string_and_concatenated_integers_are_zero_or_not_08002ee8"
        },
        "FUN_08001104": {
            "renaming": {
                "FUN_08001104": "encode_and_return_08001104",
                "param_1": "input_value",
                "uVar1": "value_from_pointer",
                "check_param_limit_08001214": "check_param_limit",
                "encode_data_08001194": "encode_data"
            },
            "code": "int encode_and_return_08001104(int input_value) {\n  int value_from_pointer = get_value_from_pointer();\n  int divided_value = value_from_pointer / 1000;\n  check_param_limit(divided_value);\n  encode_data(-1, input_value, 0);\n  return 0;\n}",
            "called": [
                "FUN_08001194",
                "FUN_08002214",
                "FUN_08001214"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001104",
            "calling": [
                "FUN_0800209c",
                "FUN_08001128"
            ],
            "imported": false,
            "current_name": "encode_and_return_08001104"
        },
        "thunk_FUN_0800115c": {
            "renaming": {
                "thunk_FUN_0800115c": "getValueFromPointer_thunk_0800115c",
                "PTR_DAT_08001164": "PTR_DATA"
            },
            "code": "int getValueFromPointer_thunk_0800115c() {\n    int *ptr = (int *)PTR_DAT_08001164;\n    return *ptr;\n}",
            "called": [
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f60",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "getValueFromPointer_thunk_0800115c"
        },
        "FUN_08006d68": {
            "renaming": {
                "FUN_08006d68": "FUNC_08006d68"
            },
            "code": "\nulonglong FUNC_08006d68(int param_1,uint param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  undefined4 *puVar9;\n  ulonglong uVar10;\n  undefined8 uVar11;\n  ulonglong uVar12;\n  undefined8 uVar13;\n  \n  uVar10 = CONCAT44(DAT_08007088,DAT_08007060);\n  uVar12 = CONCAT44(param_2,param_1);\n  uVar8 = param_2 & 0x7fffffff;\n  if (DAT_08007058 < (int)uVar8) {\n    if (((int)DAT_0800705c < (int)uVar8) || ((uVar8 == DAT_0800705c && (param_1 != 0)))) {\n      uVar10 = FUNC_0800016c(param_1,param_2,param_1,param_2,param_4);\n    }\n    else if ((int)param_2 < 1) {\n      uVar10 = CONCAT44(DAT_08007064,DAT_08007060);\n    }\n  }\n  else {\n    if (DAT_08007068 < (int)uVar8) {\n      uVar11 = do_nothing_0800708c();\n      uVar3 = (undefined4)((ulonglong)uVar11 >> 0x20);\n      uVar2 = (undefined4)uVar11;\n      if (DAT_08007070 < (int)uVar8) {\n        if (DAT_08007074 < (int)uVar8) {\n          uVar12 = FUNC_08000724(0,DAT_0800707c,uVar2,uVar3);\n          iVar1 = 3;\n        }\n        else {\n          uVar11 = FUNC_08000168(uVar2,uVar3,0,DAT_08007078);\n          uVar13 = FUNC_080004d0(uVar2,uVar3,0,DAT_08007078);\n          uVar13 = FUNC_0800016c((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),0,DAT_0800706c);\n          uVar12 = FUNC_08000724((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar13,\n                                (int)((ulonglong)uVar13 >> 0x20));\n          iVar1 = 2;\n        }\n      }\n      else if (DAT_08007070 + -0xd0000 < (int)uVar8) {\n        uVar11 = FUNC_08000168(uVar2,uVar3,0,DAT_0800706c);\n        uVar13 = FUNC_0800016c(uVar2,uVar3,0,DAT_0800706c);\n        uVar12 = FUNC_08000724((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar13,\n                              (int)((ulonglong)uVar13 >> 0x20));\n        iVar1 = 1;\n      }\n      else {\n        uVar11 = FUNC_0800016c(uVar2,uVar3,uVar2,uVar3);\n        uVar11 = FUNC_08000168((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_0800706c);\n        uVar13 = FUNC_0800016c(uVar2,uVar3,0,0x40000000);\n        uVar12 = FUNC_08000724((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar13,\n                              (int)((ulonglong)uVar13 >> 0x20));\n        iVar1 = 0;\n      }\n    }\n    else {\n      if ((int)uVar8 <= DAT_08007068 + -0x1bc0000) {\n        uVar11 = FUNC_0800016c(param_1,param_2,DAT_08006ff8,DAT_08006ffc,param_4);\n        iVar1 = is_end_of_string_080009f0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_0800706c);\n        if (iVar1 != 0) {\n          return uVar12;\n        }\n      }\n      iVar1 = -1;\n    }\n    uVar7 = (undefined4)(uVar12 >> 0x20);\n    uVar6 = (undefined4)uVar12;\n    uVar11 = FUNC_080004d0(uVar6,uVar7,uVar6,uVar7);\n    uVar4 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar2 = (undefined4)uVar11;\n    uVar11 = FUNC_080004d0(uVar2,uVar4,uVar2,uVar4);\n    uVar5 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar3 = (undefined4)uVar11;\n    uVar11 = FUNC_080004d0(uVar3,uVar5,DAT_08007000,DAT_08007004);\n    uVar11 = FUNC_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007008,DAT_0800700c);\n    uVar11 = FUNC_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar3,uVar5);\n    uVar11 = FUNC_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007010,DAT_08007014);\n    uVar11 = FUNC_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar3,uVar5);\n    uVar11 = FUNC_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007018,DAT_0800701c);\n    uVar11 = FUNC_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar3,uVar5);\n    uVar11 = FUNC_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007020,DAT_08007024);\n    uVar11 = FUNC_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar3,uVar5);\n    uVar11 = FUNC_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007028,DAT_0800702c);\n    uVar11 = FUNC_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar4);\n    uVar2 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar13 = FUNC_080004d0(uVar3,uVar5,DAT_08007030,DAT_08007034);\n    uVar13 = FUNC_08000168((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08007038,DAT_0800703c);\n    uVar13 = FUNC_080004d0((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar3,uVar5);\n    uVar13 = FUNC_08000168((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08007040,DAT_08007044);\n    uVar13 = FUNC_080004d0((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar3,uVar5);\n    uVar13 = FUNC_08000168((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08007048,DAT_0800704c);\n    uVar13 = FUNC_080004d0((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar3,uVar5);\n    uVar13 = FUNC_08000168((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08007050,DAT_08007054);\n    uVar13 = FUNC_080004d0((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar3,uVar5);\n    uVar3 = (undefined4)((ulonglong)uVar13 >> 0x20);\n    if (iVar1 == -1) {\n      uVar11 = FUNC_0800016c((int)uVar11,uVar2,(int)uVar13,uVar3);\n      uVar11 = FUNC_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar6,uVar7);\n      uVar10 = FUNC_08000168(uVar6,uVar7,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n    }\n    else {\n      uVar11 = FUNC_0800016c((int)uVar11,uVar2,(int)uVar13,uVar3);\n      uVar11 = FUNC_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar6,uVar7);\n      puVar9 = (undefined4 *)(PTR_DAT_08007080 + iVar1 * 8);\n      uVar11 = FUNC_08000168((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),\n                            *(undefined4 *)(PTR_DAT_08007084 + iVar1 * 8),\n                            *(undefined4 *)((int)(PTR_DAT_08007084 + iVar1 * 8) + 4));\n      uVar11 = FUNC_08000168((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar6,uVar7);\n      uVar10 = FUNC_08000168(*puVar9,puVar9[1],(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n      if ((int)param_2 < 0) {\n        uVar10 = uVar10 & 0xffffffff | (ulonglong)((int)(uVar10 >> 0x20) + 0x80000000) << 0x20;\n      }\n    }\n  }\n  return uVar10;\n}\n\n",
            "called": [
                "FUN_08000724",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_0800016c",
                "FUN_0800708c",
                "FUN_080009f0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006d68",
            "calling": [
                "FUN_08006070"
            ],
            "imported": false,
            "current_name": "FUNC_08006d68"
        },
        "FUN_080072b8": {
            "renaming": {
                "FUN_080072b8": "add_param_to_global_080072b8",
                "param_1": "param",
                "puVar1": "global_ptr"
            },
            "code": "void add_param_to_global_080072b8(int param) {\n  undefined *global_ptr = PTR_DAT_080072cc;\n  if (*(int *)global_ptr == 0) {\n    *(undefined **)global_ptr = PTR_DAT_080072d0;\n  }\n  *(int *)global_ptr = param + *(int *)global_ptr;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072b8",
            "calling": [
                "FUN_0800581c"
            ],
            "imported": false,
            "current_name": "add_param_to_global_080072b8"
        },
        "FUN_0800581c": {
            "renaming": {
                "FUN_0800581c": "add_parameter_to_global_and_set_to_param_1_0800581c",
                "param_1": "return_value",
                "param_2": "parameter",
                "puVar1": "global_pointer",
                "iVar2": "result_of_addition"
            },
            "code": "void add_parameter_to_global_and_set_to_param_1_0800581c(int *return_value, undefined4 parameter)\n{\n  undefined *global_pointer;\n  int result_of_addition;\n  global_pointer = PTR_DAT_08005838;\n  *(undefined4 *)PTR_DAT_08005838 = 0;\n  result_of_addition = add_param_to_global_080072b8(parameter);\n  if ((result_of_addition == -1) && (*(int *)global_pointer != 0)) {\n    *return_value = *(int *)global_pointer;\n  }\n  return;\n}",
            "called": [
                "FUN_080072b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800581c",
            "calling": [
                "FUN_08005714"
            ],
            "imported": false,
            "current_name": "add_parameter_to_global_and_set_to_param_1_0800581c"
        },
        "FUN_08004d48": {
            "renaming": {
                "FUN_08004d48": "calculate_flags_if_param1_equals_dat_08004d80_08004d48",
                "param_1": "param_ptr",
                "local_18": "local_var1",
                "local_14": "local_var2"
            },
            "code": "void calculate_flags_if_param1_equals_dat_08004d80_08004d48(int *param_ptr,undefined4 param_2)\n{\n  undefined4 local_var1 = 0xc0;\n  undefined4 local_var2 = 0x12;\n  if (*param_ptr == DAT_08004d80) {\n    calculate_flags_08001264(DAT_08004d84,&local_var1,*param_ptr,3,param_ptr,param_2);\n    *(uint *)(DAT_08004d88 + 0x1c) |= 0x200000;\n  }\n  return;\n}",
            "called": [
                "FUN_08001264"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d48",
            "calling": [
                "FUN_08001754"
            ],
            "imported": false,
            "current_name": "calculate_flags_if_param1_equals_dat_08004d80_08004d48"
        },
        "FUN_080072ac": {
            "renaming": {
                "FUN_080072ac": "get_first_value_in_pointer_array_080072ac",
                "PTR_PTR_DAT_080072b4": "PTR_POINTER_ARRAY"
            },
            "code": "int get_first_value_in_pointer_array_080072ac() {\n    return *(int *)PTR_PTR_DAT_080072b4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072ac",
            "calling": [
                "FUN_08005854",
                "FUN_08005900",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "get_first_value_in_pointer_array_080072ac"
        },
        "FUN_08002280": {
            "renaming": {
                "FUN_08002280": "update_data_08002280",
                "param_1": "data_address",
                "param_2": "data_values",
                "uVar1": "data1",
                "uVar2": "data2",
                "uVar3": "data3",
                "DAT_080022cc": "PTR_DAT_080022cc",
                "0x20": "offset1",
                "0x18": "offset2",
                "0x34": "offset3",
                "& 0xfffffffe": "mask1",
                "& 0xfffffffd": "mask2",
                "& 0xfffffff7": "mask3",
                "& 0xfffffffb": "mask4"
            },
            "code": "void update_data_08002280(int data_address, uint *data_values)\n{\n    uint mask1 = 0xfffffffe;\n    uint mask2 = 0xfffffffd;\n    uint mask3 = 0xfffffff7;\n    uint mask4 = 0xfffffffb;\n    \n    uint data1 = *(uint *)(data_address + 0x20);\n    uint data2 = *(uint *)(data_address + 4);\n    uint data3 = *data_values;\n    uint data4 = data_values[2];\n    \n    data1 = data1 & mask1;\n    data4 = data4 | (data1 & mask2);\n    \n    if (data_address == DAT_080022cc) {\n        data4 = data4 & mask4 | data_values[3];\n        data2 = data2 & 0xfffffcff | data_values[5] | data_values[6];\n    }\n    \n    *(uint *)(data_address + 0x20) = data4;\n    *(uint *)(data_address + 4) = data2;\n    *(uint *)(data_address + 0x18) = *(uint *)(data_address + 0x18) & 0xffffff8c | data3;\n    *(uint *)(data_address + 0x34) = data_values[1];\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002280",
            "calling": [
                "FUN_0800245c"
            ],
            "imported": false,
            "current_name": "update_data_08002280"
        },
        "FUN_08001194": {
            "renaming": {
                "FUN_08001194": "encode_data_08001194",
                "param_1": "data",
                "param_2": "mask",
                "param_3": "shift_amount",
                "uVar1": "encoded_data",
                "uVar2": "num_bits_to_encode",
                "uVar3": "bit_offset",
                "uVar4": "max_bits_to_encode"
            },
            "code": "void encode_data_08001194(uint data, uint mask, uint shift_amount)\n{\n    uint bit_offset = (uint)(*(int *)(DAT_080011f4 + 0xc) << 0x15) >> 0x1d;\n    uint num_bits_to_encode = 7 - bit_offset;\n    uint max_bits_to_encode = bit_offset + 4;\n    if (num_bits_to_encode > 3) {\n        num_bits_to_encode = 4;\n    }\n    if (max_bits_to_encode < 7) {\n        bit_offset = 0;\n    }\n    num_bits_to_encode = (1 << (num_bits_to_encode & 0xff)) - 1;\n    if (max_bits_to_encode > 6) {\n        bit_offset -= 3;\n    }\n    undefined encoded_data = (undefined)((shift_amount & (1 << (bit_offset & 0xff)) - 1U | (mask & num_bits_to_encode) << (bit_offset & 0xff)) << 4);\n    if (-1 < (int)data) {\n        uint encoded_data_address = data + 0xe000e100;\n        *(undefined *)(encoded_data_address + 0x300) = encoded_data;\n    }\n    else {\n        uint data_offset = data & 0xf;\n        uint encoded_data_address = DAT_080011f8;\n        *(undefined *)(encoded_data_address + data_offset) = encoded_data;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001194",
            "calling": [
                "FUN_08004ccc",
                "FUN_08004514",
                "FUN_08004e7c",
                "FUN_08001104"
            ],
            "imported": false,
            "current_name": "encode_data_08001194"
        },
        "FUN_08002cb0": {
            "renaming": {
                "FUN_08002cb0": "process_and_calculate_i2c_data_08002cb0",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "puVar1": "src_data",
                "uVar2": "hash",
                "local_c": "data",
                "PTR_s____Src_MPU9250_c_08002d80": "src_data",
                "PTR_DAT_08002d84": "dst_data"
            },
            "code": "void process_and_calculate_i2c_data_08002cb0(uint8_t data1, uint8_t data2, uint8_t data3, uint32_t data4) {\n  uint32_t data = data4;\n  process_i2c_data_and_strings(0xd0, 0x37, 0x22, 1, data1, data2, data3);\n  uint8_t* PTR_s____Src_MPU9250_c_08002d80 = PTR_s____Src_MPU9250_c_08002d80;\n  process_i2c_data_and_strings(0xd0, 0x6a, 1);\n  check_data_and_strings(0x18, 0, PTR_s____Src_MPU9250_c_08002d80, 0xad);\n  process_i2c_data_and_strings(0x18, 0xb, 1);\n  process_i2c_data_and_strings(0x18, 10, 0, 1);\n  process_i2c_data_and_strings(0x18, 10, 0xf, 1);\n  copy_data_and_strings(0x18, 0x10, &data, 3, PTR_s____Src_MPU9250_c_08002d80, 0xb6);\n  uint8_t* PTR_DAT_08002d84 = PTR_DAT_08002d84;\n  uint32_t hash1 = calculate_hash((data & 0xff) - 0x80);\n  hash1 = FUNC_08000cec(hash1, 0x3b800000);\n  hash1 = FUNC_08000adc(hash1, 0x3f800000);\n  *(uint32_t*)PTR_DAT_08002d84 = hash1;\n  uint32_t hash2 = calculate_hash((data >> 8 & 0xff) - 0x80);\n  hash2 = FUNC_08000cec(hash2, 0x3b800000);\n  hash2 = FUNC_08000adc(hash2, 0x3f800000);\n  *(uint32_t*)(PTR_DAT_08002d84 + 4) = hash2;\n  uint32_t hash3 = calculate_hash((data >> 0x10 & 0xff) - 0x80);\n  hash3 = FUNC_08000cec(hash3, 0x3b800000);\n  hash3 = FUNC_08000adc(hash3, 0x3f800000);\n  *(uint32_t*)(PTR_DAT_08002d84 + 8) = hash3;\n  process_i2c_data_and_strings(0x18, 10, 0, 1);\n  process_i2c_data_and_strings(0x18, 10, 0x16, 1);\n}",
            "called": [
                "FUN_0800403c",
                "FUN_08000cec",
                "FUN_08000adc",
                "FUN_080040e8",
                "FUN_08000c44",
                "FUN_0800407c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cb0",
            "calling": [
                "FUN_08002ea0"
            ],
            "imported": false,
            "current_name": "process_and_calculate_i2c_data_08002cb0"
        },
        "FUN_08004348": {
            "renaming": {
                "FUN_08004348": "process_data_08004348",
                "param_1": "param_1",
                "param_2": "flags",
                "param_3": "param_3",
                "*puVar1": "data_ptr",
                "local_10": "local_10",
                "local_c": "local_c",
                "uStack_8": "uStack_8"
            },
            "code": "void process_data_08004348(uint32_t param_1, uint32_t flags, uint32_t param_3)\n{\n    uint8_t* data_ptr = PTR_DAT_08004380;\n    *data_ptr = 0xe9;\n    data_ptr[1] = 3;\n    data_ptr[3] = 4;\n    data_ptr[2] = 0;\n    uint32_t local_10 = *(uint32_t *)data_ptr;\n    data_ptr[4] = 0;\n    data_ptr[5] = 0;\n    data_ptr[6] = 0;\n    uint32_t local_c = flags & 0xff000000 | (uint32_t)*(uint16_t *)(data_ptr + 4);\n    uint32_t uStack_8 = param_3;\n    process_string_and_data_08004300(100, &local_10, 7);\n    return;\n}",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004348",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_data_08004348"
        },
        "FUN_08002324": {
            "renaming": {
                "FUN_08002324": "set_flags_and_values_08002324",
                "param_1": "memory_address",
                "param_2": "values_array",
                "uVar1": "original_flags",
                "iVar2": "value_1",
                "iVar3": "value_2",
                "iVar4": "original_value"
            },
            "code": "void set_flags_and_values_08002324(int memory_address, int *values_array)\n{\n    uint flags = *(uint *)(memory_address + 0x20) & 0xffffefff;\n    uint original_flags = *(uint *)(memory_address + 4);\n    int value_1 = *values_array;\n    int value_2 = values_array[2];\n    int original_value = DAT_08002364;\n    if (memory_address == DAT_08002364) {\n        original_value = values_array[5];\n        original_flags = original_flags & 0xffffbfff;\n    }\n    if (memory_address == DAT_08002364) {\n        original_flags = original_flags | original_value << 6;\n    }\n    *(uint *)(memory_address + 4) = original_flags;\n    *(uint *)(memory_address + 0x1c) = *(uint *)(memory_address + 0x1c) & 0xffff8cff | value_1 << 8;\n    *(int *)(memory_address + 0x40) = values_array[1];\n    *(uint *)(memory_address + 0x20) = flags | value_2 << 0xc;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002324",
            "calling": [
                "FUN_0800245c"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_08002324"
        },
        "FUN_08001078": {
            "renaming": {
                "FUN_08001078": "extract_bits_08001078",
                "param_1": "value",
                "uVar1": "shift_amount",
                "uVar2": "bit_count",
                "uVar3": "extracted_value"
            },
            "code": "uint extract_bits_08001078(uint value)\n{\n  uint shift_amount;\n  uint bit_count;\n  uint extracted_value;\n\n  if ((value << 1) < 0x7f000000) {\n    return 0;\n  }\n\n  shift_amount = (value << 1) >> 0x18;\n  bit_count = 0x9e - shift_amount;\n\n  if ((shift_amount < 0x9f) && (bit_count != 0)) {\n    extracted_value = (value << 8 | 0x80000000) >> (bit_count & 0xff);\n\n    if ((value & 0x80000000) != 0) {\n      extracted_value = -extracted_value;\n    }\n    return extracted_value;\n  }\n\n  if ((bit_count == 0xffffff9f) && ((value & 0x7fffff) != 0)) {\n    return 0;\n  }\n\n  value = value & 0x80000000;\n  if (value == 0) {\n    value = 0x7fffffff;\n  }\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001078",
            "calling": [
                "FUN_0800411c",
                "FUN_0800426c",
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "extract_bits_08001078"
        },
        "FUN_08002564": {
            "renaming": {
                "FUN_08002564": "set_flag_and_calculate_sum_08002564",
                "param_1": "array_ptr",
                "param_2": "sum_array_ptr",
                "uVar1": "flag",
                "*(char *)(param_1 + 0xe)": "*(char *)(array_ptr + 0xe)",
                "*(undefined *)((int)param_1 + 0x39)": "*(int *)((int)array_ptr + 0x39)",
                "*(uint *)(*param_1 + 0x44)": "*(uint *)(*array_ptr + 0x44)",
                "*(undefined *)(param_1 + 0xe)": "*(char *)(array_ptr + 0xe)"
            },
            "code": "int set_flag_and_calculate_sum_08002564(int *array_ptr, uint *sum_array_ptr) {\n    int flag = 2;\n    if (*(char *)(array_ptr + 0xe) != '\\x01') {\n        *(int *)((int)array_ptr + 0x39) = 2;\n        *(uint *)(*array_ptr + 0x44) = sum_array_ptr[0] | sum_array_ptr[1] | sum_array_ptr[2] | sum_array_ptr[3] | sum_array_ptr[4] | sum_array_ptr[5] | sum_array_ptr[6];\n        *(int *)((int)array_ptr + 0x39) = 1;\n        flag = 0;\n        *(char *)(array_ptr + 0xe) = 0;\n    }\n    return flag;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002564",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "set_flag_and_calculate_sum_08002564"
        },
        "FUN_08001754": {
            "renaming": {
                "FUN_08001754": "calculate_shifted_value_08001754",
                "param_1": "ptr_1",
                "param_2": "ptr_2",
                "param_3": "ptr_3",
                "param_4": "ptr_4",
                "param_5": "ptr_5",
                "param_6": "ptr_6",
                "param_7": "ptr_7",
                "param_8": "ptr_8",
                "param_9": "ptr_9",
                "uVar1": "quotient",
                "uVar2": "shift_value_upper",
                "puVar3": "ptr_1",
                "puVar4": "ptr_3",
                "puVar5": "ptr_2",
                "uVar6": "quotient",
                "uVar7": "shift_value"
            },
            "code": "uint calculate_shifted_value_08001754(uint **params) {\\n  uint shift_value_upper;\\n  uint shift_value_lower;\\n  uint *param_1 = *params;\\n  uint *param_2 = params[1];\\n  uint *param_3 = params[2];\\n  uint *param_4 = params[3];\\n  uint *param_5 = params[4];\\n  uint *param_6 = params[5];\\n  uint *param_7 = params[6];\\n  uint *param_8 = params[7];\\n  uint *param_9 = params[8];\\n  if (params == NULL) {\\n    return 1;\\n  }\\n  if (*(char *)((int)params + 0x35) == \"\\0\") {\\n    *(undefined *)(params + 0xd) = 0;\\n    calculate_flags_if_param1_equals_dat_08004d80_08004d48();\\n  }\\n  *(undefined *)((int)params + 0x35) = 0x24;\\n  uint *ptr_1 = DAT_08001820;\\n  *param_1 &= 0xfffffffe;\\n  uint64_t shift_value = get_shifted_value_08002220();\\n  shift_value_upper = (uint)(shift_value >> 0x20);\\n  shift_value_lower = (uint)shift_value;\\n  uint *ptr_2 = param_9;\\n  uint quotient = shift_value_lower / DAT_08001824;\\n  if (ptr_1 < ptr_2) {\\n    shift_value_upper = 300;\\n  }\\n  uint *ptr_3 = *params;\\n  if (ptr_1 < ptr_2) {\\n    shift_value_upper *= quotient;\\n  }\\n  ptr_3[1] = quotient;\\n  if (ptr_1 < ptr_2) {\\n    quotient = shift_value_upper / 1000;\\n  }\\n  ptr_3[8] = quotient + 1;\\n  if (ptr_1 < ptr_2) {\\n    uint divisor = (int)ptr_2 * 3;\\n    if (param_3 == NULL) {\\n      divisor = divisor / shift_value_lower | 0x8000;\\n    }\\n    else {\\n      divisor = divisor / shift_value_lower * 25 | 0xc000;\\n    }\\n    if ((divisor & 0xfff) == 0) {\\n      divisor = 1;\\n    }\\n    ptr_3[7] = divisor;\\n  }\\n  else {\\n    quotient = quotient / (int)ptr_2;\\n    if ((quotient & 0xfff) < 4) {\\n      quotient = 4;\\n    }\\n    ptr_3[7] = quotient;\\n  }\\n  ptr_3[0] = (uint)param_8 | (uint)param_7;\\n  ptr_3[2] = (uint)param_5 | (uint)param_4;\\n  ptr_3[3] = (uint)param_6 | (uint)param_9[1];\\n  ptr_3[0] |= 1;\\n  params[0xe] = NULL;\\n  *(undefined *)((int)params + 0x35) = 0x20;\\n  *(undefined *)((int)params + 0x36) = 0;\\n  return 0;\\n}",
            "called": [
                "FUN_08004d48",
                "FUN_08002220"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001754",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08001754"
        },
        "FUN_08000ad8": {
            "renaming": {
                "FUN_08000ad8": "FUNC_08000ad8"
            },
            "code": "\nuint FUNC_08000ad8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000c12:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000c12;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000ad8",
            "calling": [
                "FUN_08002ee8",
                "FUN_08002ec0",
                "FUN_08002bf0",
                "FUN_0800426c",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002d88"
            ],
            "imported": false,
            "current_name": "FUNC_08000ad8"
        },
        "FUN_08003ec8": {
            "renaming": {
                "FUN_08003ec8": "increment_and_store_08003ec8",
                "param_1": "base_address",
                "param_2": "data",
                "*(short *)(param_1 + 0x804)": "*counter",
                "*(undefined *)(param_1 + (uint)*(ushort *)(param_1 + 0x802))": "*(base_address + *index)",
                "*(ushort *)(param_1 + 0x802)": "*index"
            },
            "code": "int increment_and_store_08003ec8(uint8_t* base_address, uint8_t data) {\n    uint16_t* counter = (uint16_t*)(base_address + 0x804);\n    *counter = *counter + 1;\n    uint16_t* index = (uint16_t*)(base_address + 0x802);\n    *(base_address + *index) = data;\n    *index = (*index + 1) & 0x7ff;\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ec8",
            "calling": [
                "FUN_08004c30"
            ],
            "imported": false,
            "current_name": "increment_and_store_08003ec8"
        },
        "FUN_08002724": {
            "renaming": {
                "FUN_08002724": "zero_out_and_update_values_08002724",
                "param_1": "param_array",
                "iVar1": "array_ptr",
                "set_flags_if_param_matches_08004e7c": "set_flags_if_param_matches_08004e7c",
                "0x39": "offset",
                "0xe": "index",
                "0xc": "mask",
                "update_values_080025e8": "update_values_080025e8",
                "0x10": "mask1",
                "0x14": "mask2",
                "0x2000": "flag",
                "0xf": "index2"
            },
            "code": "int zero_out_and_update_values_08002724(int *param_array)\\n{\\n    int array_ptr = 0;\\n    if (param_array != NULL)\\n    {\\n        if (*(char *)((int)param_array + 0x39) == \"\\0\")\\n        {\\n            *(undefined *)(param_array + 0xe) = 0;\\n            set_flags_if_param_matches_08004e7c();\\n        }\\n        *(undefined *)((int)param_array + 0x39) = 2;\\n        *(uint *)(*param_array + 0xc) &= 0xffffdfff;\\n        update_values_080025e8(param_array);\\n        array_ptr = *param_array;\\n        *(uint *)(array_ptr + 0x10) &= 0xffffb7ff;\\n        *(uint *)(array_ptr + 0x14) &= 0xffffffd5;\\n        *(uint *)(array_ptr + 0xc) |= 0x2000;\\n        param_array[0xf] = 0;\\n        *(undefined *)((int)param_array + 0x39) = 1;\\n        return 0;\\n    }\\n    return 1;\\n}",
            "called": [
                "FUN_080025e8",
                "FUN_08004e7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002724",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "zero_out_and_update_values_08002724"
        },
        "FUN_08003fe8": {
            "renaming": {
                "FUN_08003fe8": "set_value_in_memory_08003fe8",
                "param_1": "value",
                "PTR_DAT_08003ff0": "ptr_to_data"
            },
            "code": "void set_value_in_memory_08003fe8(int* ptr, int value) {\n  int* PTR_DAT_08003ff0 = (int*) PTR_DAT_08003ff0;\n  int offset = 0x3c;\n  int* target_address = (int*) (PTR_DAT_08003ff0 + offset);\n  *target_address = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fe8",
            "calling": [
                "FUN_080041c4",
                "FUN_0800426c"
            ],
            "imported": false,
            "current_name": "set_value_in_memory_08003fe8"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "allocate_memory_block_08005714",
                "param_1": "out_block_address",
                "param_2": "requested_size",
                "puVar1": "current_block_pointer",
                "uVar2": "result",
                "puVar3": "current_block_pointer",
                "iVar4": "size_difference",
                "puVar5": "current_block_pointer",
                "uVar6": "size_difference",
                "puVar7": "previous_block_pointer",
                "uVar8": "block_size",
                "PTR_DAT_080057cc": "result_pointer",
                "PTR_DAT_080057c8": "global_pointer"
            },
            "code": "uint allocate_memory_block_08005714(uint *out_block_address, uint requested_size)\n{\n  uint *current_block_address;\n  uint block_size;\n  uint *previous_block_address;\n  uint size_difference;\n  block_size = (requested_size + 3 & 0xfffffffc) + 8;\n  if (block_size < 0xc) {\n    block_size = 0xc;\n  }\n  if (((int)block_size < 0) || (block_size < requested_size)) {\n    *out_block_address = 0xc;\n  }\n  else {\n    do_nothing_0800583c();\n    previous_block_address = *((uint **)PTR_DAT_080057c8);\n    current_block_address = *((uint **)PTR_DAT_080057c8);\n    while (current_block_address != (uint *)0x0) {\n      size_difference = *current_block_address - block_size;\n      if (-1 < (int)size_difference) {\n        if (size_difference < 0xc) {\n          if (previous_block_address == current_block_address) {\n            block_size = previous_block_address[1];\n            *((uint *)PTR_DAT_080057c8) = block_size;\n          }\n          else {\n            block_size = current_block_address[1];\n          }\n          if (previous_block_address != current_block_address) {\n            previous_block_address[1] = block_size;\n            previous_block_address = current_block_address;\n          }\n        }\n        else {\n          *current_block_address = size_difference;\n          *((uint *)((int)current_block_address + size_difference)) = block_size;\n          previous_block_address = (uint *)((int)current_block_address + size_difference);\n        }\n        goto LAB_08005778;\n      }\n      previous_block_address = current_block_address;\n      current_block_address = (uint *)current_block_address[1];\n    }\n    if (*(int *)PTR_DAT_080057cc == 0) {\n      uint result = add_parameter_to_global_and_set_to_param_1_0800581c(out_block_address);\n      *((undefined4 *)PTR_DAT_080057cc) = result;\n    }\n    current_block_address = (uint *)add_parameter_to_global_and_set_to_param_1_0800581c(out_block_address, block_size);\n    if ((current_block_address != (uint *)0xffffffff) && ((previous_block_address = (uint *)((int)current_block_address + 3U & 0xfffffffc), current_block_address == previous_block_address || (size_difference = add_parameter_to_global_and_set_to_param_1_0800581c(out_block_address, (int)previous_block_address - (int)current_block_address), size_difference != -1)))) {\n      *previous_block_address = block_size;\nLAB_08005778:\n      do_nothing_0800583e(out_block_address);\n      block_size = (int)previous_block_address + 0xbU & 0xfffffff8;\n      size_difference = block_size - (int)(previous_block_address + 1);\n      if (size_difference != 0) {\n        *(int *)((int)previous_block_address + size_difference) = -size_difference;\n        return block_size;\n      }\n      return block_size;\n    }\n    *out_block_address = 0xc;\n    do_nothing_0800583e(out_block_address);\n  }\n  return 0;\n}\n",
            "called": [
                "FUN_0800583e",
                "FUN_0800581c",
                "FUN_0800583c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [
                "FUN_080050fc",
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08005714"
        },
        "FUN_08004fb4": {
            "renaming": {
                "FUN_08004fb4": "execute_functions_08004fb4"
            },
            "code": "void execute_functions_08004fb4(void)\n{\n  int num_functions = (int)PTR_DAT_08004ff0 - (int)PTR_DAT_08004fec;\n  for (int i = 0; i < num_functions >> 2; i++) {\n    (**(code **)(PTR_DAT_08004fec + i * 4))();\n  }\n  do_nothing_080072d4();\n  num_functions = (int)PTR_DAT_08004ff8 - (int)PTR_DAT_08004ff4;\n  for (int i = 0; i < num_functions >> 2; i++) {\n    (**(code **)(PTR_DAT_08004ff4 + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_080072d4",
                "FUN_08000134"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fb4",
            "calling": [
                "FUN_08004f68"
            ],
            "imported": false,
            "current_name": "execute_functions_08004fb4"
        },
        "FUN_080043f0": {
            "renaming": {
                "FUN_080043f0": "process_data_and_string_080043f0",
                "param_1": "unused_parameter",
                "param_2": "unused_parameter",
                "param_3": "data_parameter",
                "local_10": "string_ptr",
                "uStack_c": "string_length",
                "auStack_8": "data"
            },
            "code": "void process_data_and_string_080043f0(undefined4 param_1, undefined4 param_2, undefined4 param_3) {\n  undefined4 string_ptr;\n  undefined4 string_length;\n  undefined4 data[2];\n  string_ptr = *(undefined4 *)PTR_DAT_0800440c;\n  string_length = *(undefined4 *)(PTR_DAT_0800440c + 4);\n  data[0] = param_3;\n  process_string_and_data_08004300(0x68, &string_ptr, 8, data);\n  return;\n}",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043f0",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_data_and_string_080043f0"
        },
        "FUN_08000428": {
            "renaming": {
                "FUN_08000428": "reverseBits_08000428",
                "param_1": "input",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "output",
                "uVar2": "temp",
                "uVar3": "output",
                "uVar4": "bitCount",
                "uVar5": "input",
                "uVar7": "bitCount",
                "iVar6": "bitCount",
                "bVar8": "isNegative",
                "bVar9": "isZero",
                "bVar10": "isNegative",
                "in_r12": "output"
            },
            "code": "ulonglong reverseBits_08000428(uint input, undefined4 param_2, undefined4 param_3, uint param_4)\n{\n    uint output = 0;\n    uint bitCount = 0;\n    uint temp = input;\n    while (temp != 0)\n    {\n        bitCount++;\n        temp >>= 1;\n    }\n    bitCount = bitCount - 1;\n    if (bitCount < 0x1f)\n    {\n        output = input << (0x1f - bitCount);\n    }\n    else\n    {\n        output = input >> (bitCount - 0x1f);\n    }\n    return output;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000428",
            "calling": [
                "FUN_0800411c",
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "reverseBits_08000428"
        },
        "FUN_08004ccc": {
            "renaming": {
                "FUN_08004ccc": "set_param_bits_and_encode_data_08004ccc",
                "param_1": "first_parameter",
                "param_2": "second_parameter",
                "param_3": "third_parameter",
                "DAT_08004d44": "data_address",
                "iVar1": "data_address",
                "uVar2": "bit_mask",
                "uVar3": "bit_value"
            },
            "code": "void set_param_bits_and_encode_data_08004ccc(uint32_t param_1, uint32_t param_2, uint32_t param_3)\n{\n  int DAT_08004d44 = DAT_08004d44;\n  uint32_t bit_mask = *(uint32_t *)(DAT_08004d44 + 0x18) | 1;\n  *(uint32_t *)(DAT_08004d44 + 0x18) = bit_mask;\n  uint32_t bit_value = *(uint32_t *)(DAT_08004d44 + 0x18) & 1;\n  set_param_bits_08001170(3, param_2, bit_mask, bit_value, param_1, bit_value, param_3);\n  encode_data_08001194(0xfffffff4, 0);\n  encode_data_08001194(0xfffffff5, 0);\n  encode_data_08001194(0xfffffff6, 0);\n  encode_data_08001194(0xfffffffb, 0);\n  encode_data_08001194(0xfffffffc, 0);\n  encode_data_08001194(0xfffffffe, 0);\n  encode_data_08001194(0xffffffff, 0);\n  return;\n}",
            "called": [
                "FUN_08001194",
                "FUN_08001170"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ccc",
            "calling": [
                "FUN_08001128"
            ],
            "imported": false,
            "current_name": "set_param_bits_and_encode_data_08004ccc"
        },
        "FUN_08000a30": {
            "renaming": {
                "FUN_08000a30": "calculate_float_bits_08000a30",
                "param_1": "float_bits",
                "param_2": "shift_amount",
                "uVar1": "exponent",
                "uVar2": "shifted_bits",
                "uVar3": "is_less_than_threshold",
                "in_r12": "temp_value",
                "bVar4": "is_zero",
                "bVar5": "is_less_than_threshold"
            },
            "code": "uint calculate_float_bits_08000a30(uint float_bits, uint shift_amount)\n{\n  uint shifted_bits;\n  uint exponent;\n  bool is_less_than_threshold;\n  bool is_zero;\n  \n  shifted_bits = shift_amount * 2;\n  is_less_than_threshold = shifted_bits < 0x70000000;\n  exponent = shifted_bits + 0x90000000;\n  if (!is_less_than_threshold) {\n    exponent = shifted_bits + 0x8fe00000;\n  }\n  is_zero = exponent == 0;\n  if (!is_less_than_threshold && exponent >= 0x200000) {\n    is_zero = exponent == 0x1fc00000;\n  }\n  if (is_less_than_threshold || exponent < 0x200000 || 0x1fc00000 < exponent || is_zero) {\n    if ((shift_amount & 0x40000000) != 0) {\n      if (((int)shifted_bits >> 0x15 == -1) && ((float_bits | shift_amount << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return shift_amount & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(shifted_bits + 0x92e00000) < 0 != SCARRY4(exponent,0x2e00000)) {\n      return shift_amount & 0x80000000;\n    }\n    shifted_bits = 0x18 - (shifted_bits + 0x92e00000 >> 0x15);\n    exponent = float_bits >> (shifted_bits & 0xff);\n    if (float_bits << (0x20 - shifted_bits & 0xff) != 0) {\n      exponent = exponent | 1;\n    }\n    is_less_than_threshold = shift_amount & 0x1fffff | 0x100000;\n    float_bits = exponent | is_less_than_threshold << (0x20 - shifted_bits & 0xff);\n    is_less_than_threshold = (is_less_than_threshold >> (shifted_bits & 0xff)) << 1;\n  }\n  exponent = (shift_amount & 0x80000000 | float_bits >> 0x1d) + is_less_than_threshold * 4 + (uint)(0x7fffffff < float_bits * 8);\n  if (float_bits * 8 == 0x80000000) {\n    exponent = exponent & 0xfffffffe;\n  }\n  return exponent;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a30",
            "calling": [
                "FUN_0800411c",
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "calculate_float_bits_08000a30"
        },
        "FUN_080023d0": {
            "renaming": {
                "FUN_080023d0": "update_memory_if_valid_input_080023d0",
                "param_1": "input_array",
                "*(char *)((int)param_1 + 0x39)": "is_valid_input",
                "*(undefined *)(param_1 + 0xe)": "undefined_pointer",
                "update_status_08004d8c": "update_status",
                "update_memory_08002368": "update_memory"
            },
            "code": "int update_memory_if_valid_input_080023d0(int *input_array)\n{\n    if (input_array != NULL) {\n        int is_valid_input = *(char *)((int)input_array + 0x39);\n        if (is_valid_input == 0) {\n            *(undefined *)(input_array + 0xe) = 0;\n            update_status();\n        }\n        *(undefined *)((int)input_array + 0x39) = 2;\n        update_memory(*input_array,input_array + 1);\n        *(undefined *)((int)input_array + 0x39) = 1;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08004d8c",
                "FUN_08002368"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080023d0",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "update_memory_if_valid_input_080023d0"
        },
        "FUN_08004c30": {
            "renaming": {
                "FUN_08004c30": "increment_and_store_08004c30",
                "param_1": "input_ptr",
                "puVar1": "data_ptr_1",
                "puVar2": "data_ptr_2",
                "uVar3": "char_1",
                "uVar4": "uint_1",
                "iVar5": "int_ptr_1"
            },
            "code": "int* increment_and_store_08004c30(int* input_ptr) {\n    undefined* data_ptr_1 = PTR_DAT_08004c58;\n    int data_1 = *input_ptr;\n    if (data_1 != DAT_08004c54) {\n        return input_ptr;\n    }\n    increment_and_store_08004c30_08003ec8(PTR_DAT_08004c5c, *PTR_DAT_08004c58);\n    undefined* data_ptr_2 = PTR_DAT_08004c60;\n    char data_2 = data_ptr_2[0x39];\n    if (data_2 == '\\x01' || data_2 == '\\x12') {\n        if (data_ptr_1 == (undefined*)0x0) {\n            return (int*)0x1;\n        }\n        if (data_ptr_2[0x38] != '\\x01') {\n            data_ptr_2[0x38] = 1;\n            *(undefined4*)(data_ptr_2 + 0x3c) = 0;\n            *(undefined2*)(data_ptr_2 + 0x2c) = 1;\n            *(undefined2*)(data_ptr_2 + 0x2e) = 1;\n            data_ptr_2[0x38] = 0;\n            char uVar3 = data_ptr_2[0x39] == '\\x12' ? 0x32 : 0x22;\n            int* iVar5 = *(int**)data_ptr_2;\n            data_ptr_2[0x39] = uVar3;\n            uint uVar4 = *(uint*)(iVar5 + 0xc);\n            *(undefined**)(data_ptr_2 + 0x28) = data_ptr_1;\n            *(uint*)(iVar5 + 0xc) = uVar4 | 0x100;\n            *(uint*)(iVar5 + 0x14) = *(uint*)(iVar5 + 0x14) | 1;\n            *(uint*)(iVar5 + 0xc) = *(uint*)(iVar5 + 0xc) | 0x20;\n            return (int*)0x0;\n        }\n    }\n    return (int*)0x2;\n}",
            "called": [
                "FUN_08003ec8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c30",
            "calling": [
                "FUN_0800290c"
            ],
            "imported": false,
            "current_name": "increment_and_store_08004c30"
        },
        "FUN_080004d0": {
            "renaming": {
                "FUN_080004d0": "FUNC_080004d0"
            },
            "code": "\nulonglong FUNC_080004d0(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = calculate_result_080006ac();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006ac"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004d0",
            "calling": [
                "FUN_08006c0c",
                "FUN_08006228",
                "FUN_0800411c",
                "FUN_08005900",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_080071c0",
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "FUNC_080004d0"
        },
        "FUN_08003fdc": {
            "renaming": {
                "FUN_08003fdc": "set_parameter_in_memory_08003fdc",
                "param_1": "parameter_value",
                "PTR_DAT_08003fe4": "memory_ptr",
                "*PTR_DAT_08003fe4": "memory_ptr",
                "DAT_08003fe4": "memory_data",
                "memory_data": "memory_data",
                "memory_ptr": "memory_ptr",
                "offset": "offset",
                "memory_address": "memory_address"
            },
            "code": "void set_parameter_in_memory_08003fdc(int parameter_value)\n{\n    int *PTR_DAT_08003fe4 = *(int *)PTR_DAT_08003fe4;\n    int offset = 0x38;\n    int *memory_address = PTR_DAT_08003fe4 + offset;\n    *memory_address = parameter_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fdc",
            "calling": [
                "FUN_080041c4",
                "FUN_0800426c"
            ],
            "imported": false,
            "current_name": "set_parameter_in_memory_08003fdc"
        },
        "FUN_080009f0": {
            "renaming": {
                "FUN_080009f0": "is_end_of_string_080009f0",
                "in_CY": "current_character"
            },
            "code": "bool is_end_of_string_080009f0(void)\n{\n  char current_character;\n  validate_parameters_and_return();\n  return current_character == '\\0';\n}",
            "called": [
                "FUN_08000980"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009f0",
            "calling": [
                "FUN_08006228",
                "FUN_08005854",
                "FUN_08006d68",
                "FUN_08005c70"
            ],
            "imported": false,
            "current_name": "is_end_of_string_080009f0"
        },
        "FUN_08004f10": {
            "renaming": {
                "FUN_08004f10": "set_bit_and_mask_08004f10",
                "puVar1": "ptr_data",
                "DAT_08004f50": "data",
                "DAT_08004f54": "DAT_MASK",
                "DAT_08004f58": "DAT_PTR_1"
            },
            "code": "void set_bit_and_mask_08004f10(uint* DAT_08004f50)\n{\n  uint* ptr_DAT_08004f50 = DAT_08004f50;\n  \n  *DAT_08004f50 |= 1;\n  ptr_DAT_08004f50[1] &= DAT_08004f54 & ptr_DAT_08004f50[1];\n  *ptr_DAT_08004f50 &= DATA_MASK_1;\n  *ptr_DAT_08004f50 &= DATA_MASK_2;\n  ptr_DAT_08004f50[1] &= DATA_MASK_3;\n  ptr_DAT_08004f50[2] = DATA_1;\n  *(uint*)(DAT_08004f58 + 8) = DATA_2;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f10",
            "calling": [
                "FUN_08004f68"
            ],
            "imported": false,
            "current_name": "set_bit_and_mask_08004f10"
        },
        "FUN_08005044": {
            "renaming": {
                "FUN_08005044": "reverse_string_and_allocate_memory_08005044",
                "param_1": "mem_ptr",
                "param_2": "data_ptr",
                "param_3": "data_start",
                "param_4": "max_length",
                "iVar1": "allocated_mem",
                "iVar4": "offset",
                "uVar2": "new_max_length",
                "uVar3": "new_length"
            },
            "code": "int reverse_string_and_allocate_memory_08005044(int* mem_ptr, int* data_ptr, int data_start, unsigned int max_length) {\n    int offset = data_ptr[0] - data_ptr[4];\n    unsigned int new_length = (unsigned int)(data_ptr[5] * 3) / 2;\n    if (data_ptr[2] <= max_length && ((*(unsigned short *)(data_ptr + 3) & 0x480) != 0)) {\n        if (new_length < max_length + 1 + offset) {\n            new_length = max_length + 1 + offset;\n        }\n        if ((int)((unsigned int)*(unsigned short *)(data_ptr + 3) << 0x15) < 0) {\n            int allocated_mem = allocate_memory_block_08005714(mem_ptr, new_length);\n            if (allocated_mem == 0) {\n                *mem_ptr = 0xc;\n                *(unsigned short *)(data_ptr + 3) = *(unsigned short *)(data_ptr + 3) | 0x40;\n                return -1;\n            }\n            copy_data_to_buffer_08005630(allocated_mem, data_ptr[4], offset);\n            *(unsigned short *)(data_ptr + 3) = *(unsigned short *)(data_ptr + 3) & 0xfb7f | 0x80;\n            data_ptr[4] = allocated_mem;\n        }\n        else {\n            int allocated_mem = allocate_and_add_to_list_080057d0(mem_ptr, data_ptr[4], new_length);\n            if (allocated_mem == 0) {\n                add_to_linked_list_0800567c(mem_ptr, data_ptr[4]);\n                *mem_ptr = 0xc;\n                *(unsigned short *)(data_ptr + 3) = *(unsigned short *)(data_ptr + 3) | 0x40;\n                return -1;\n            }\n            data_ptr[4] = allocated_mem;\n        }\n        data_ptr[5] = new_length;\n        data_ptr[2] = new_length - offset;\n    }\n    if (max_length <= data_ptr[2]) {\n        max_length = max_length;\n    }\n    reverse_string_within_bounds_08005646(data_ptr[0], data_start, max_length);\n    data_ptr[2] = data_ptr[2] - max_length;\n    data_ptr[0] = max_length + data_ptr[0];\n    return 0;\n}",
            "called": [
                "FUN_08005646",
                "FUN_080057d0",
                "FUN_08005630",
                "FUN_0800567c",
                "FUN_08005714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005044",
            "calling": [
                "FUN_080050fc"
            ],
            "imported": false,
            "current_name": "reverse_string_and_allocate_memory_08005044"
        },
        "FUN_08004194": {
            "renaming": {
                "FUN_08004194": "initialize_sensors_08004194",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "puVar3": "ptr3",
                "puVar4": "ptr4",
                "uVar5": "value1",
                "uVar6": "value2",
                "uVar7": "value3",
                "uVar8": "value4"
            },
            "code": "void initialize_sensors_08004194()\n{\n    set_integer_offsets_and_count_leading_zeroes();\n    initialize_device();\n    initialize_and_process_MPU9250_data();\n    process_MS5611_data();\n    \n    // Renamed variables\n    undefined *ptr1 = PTR_DAT_080049f0;\n    undefined *ptr2 = PTR_DAT_080049ec;\n    undefined *ptr3 = PTR_DAT_080049e8;\n    undefined *ptr4 = PTR_DAT_080049f4;\n    \n    // Modified values\n    *(undefined4 *)(ptr2 + 0x4c) = 1;\n    *(undefined4 *)(ptr3 + 0x4c) = 1;\n    *(undefined4 *)(ptr1 + 0x4c) = 0xffffffff;\n    *(undefined4 *)(ptr4 + 0x4c) = 1;\n    *(undefined4 *)(ptr2 + 0x20) = DAT_080049fc;\n    *(undefined4 *)(ptr1 + 0x20) = DAT_08004a04;\n    *(undefined4 *)(ptr3 + 0x20) = DAT_08004a0c;\n    *(undefined4 *)(ptr4 + 0x20) = 0;\n    *(undefined4 *)(ptr2 + 4) = DAT_080049f8;\n    *(undefined4 *)(ptr2 + 8) = DAT_08004a10;\n    *(undefined4 *)(ptr2 + 0xc) = DAT_08004a00;\n    *(undefined4 *)(ptr2 + 0x10) = DAT_08004a08;\n    *(undefined4 *)(ptr2 + 0x14) = DAT_08004a10;\n    *(undefined4 *)(ptr2 + 0x18) = DAT_08004a14;\n    *(undefined4 *)(ptr1 + 4) = DAT_08004a18;\n    *(undefined4 *)(ptr1 + 8) = DAT_08004a10;\n    *(undefined4 *)(ptr1 + 0xc) = DAT_08004a1c;\n    *(undefined4 *)(ptr1 + 0x10) = DAT_08004a18;\n    *(undefined4 *)(ptr1 + 0x14) = DAT_08004a10;\n    *(undefined4 *)(ptr1 + 0x18) = DAT_08004a20;\n    *(undefined4 *)(ptr3 + 4) = DAT_08004a24;\n    *(undefined4 *)(ptr3 + 8) = DAT_08004a28;\n    *(undefined4 *)(ptr3 + 0xc) = DAT_08004a00;\n    *(undefined4 *)(ptr3 + 0x10) = 0;\n    *(undefined4 *)(ptr3 + 0x14) = 0;\n    *(undefined4 *)(ptr3 + 0x18) = 0;\n    *(undefined4 *)(ptr4 + 4) = DAT_08004a2c;\n    *(undefined4 *)(ptr4 + 8) = 0;\n    *(undefined4 *)(ptr4 + 0xc) = 0;\n    *(undefined4 *)(ptr4 + 0x10) = 0;\n    *(undefined4 *)(ptr4 + 0x14) = 0;\n    *(undefined4 *)(ptr4 + 0x18) = 0;\n}",
            "called": [
                "FUN_08002ea0",
                "FUN_08004028",
                "FUN_08004c70",
                "FUN_08003298"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004194",
            "calling": [
                "FUN_080041ae"
            ],
            "imported": false,
            "current_name": "initialize_sensors_08004194"
        },
        "FUN_08001240": {
            "renaming": {
                "FUN_08001240": "set_flag_08001240",
                "param_1": "flag_value",
                "uVar1": "flag_mask",
                "*DAT_08001254": "flag_ptr"
            },
            "code": "void set_flag_08001240(int flag_value)\n{\n  uint32_t* *DAT_08001254 = DAT_08001254;\n  if (flag_value == 4) {\n    **DAT_08001254 |= 4;\n  }\n  else {\n    **DAT_08001254 &= 0xfffffffb;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001240",
            "calling": [
                "FUN_08004514"
            ],
            "imported": false,
            "current_name": "set_flag_08001240"
        },
        "FUN_08005840": {
            "renaming": {
                "FUN_08005840": "calculate_sum_of_array_08005840",
                "param_1": "array_size",
                "param_2": "array",
                "iVar1": "sum"
            },
            "code": "int calculate_sum_of_array_08005840(int array_size, int* array) {\n  int sum = *(array - 1) - 4;\n  if (*(array - 1) < 0) {\n    sum += *(array + sum / sizeof(int));\n  }\n  return sum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005840",
            "calling": [
                "FUN_080057d0"
            ],
            "imported": false,
            "current_name": "calculate_sum_of_array_08005840"
        },
        "FUN_08000150": {
            "renaming": {
                "FUN_08000150": "find_string_end_08000150",
                "param_1": "input_string",
                "pcVar2": "current_position",
                "pcVar3": "current_char_pointer",
                "cVar1": "current_char"
            },
            "code": "char* find_string_end_08000150(char* input_string) {\n  char current_char;\n  char* current_position = input_string;\n  do {\n    current_position++;\n    current_char = *current_position;\n  } while (current_char != '\\0');\n  return current_position + (-1 - (int)input_string);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000150",
            "calling": [
                "FUN_08004c8c"
            ],
            "imported": false,
            "current_name": "find_string_end_08000150"
        },
        "FUN_08003f3c": {
            "renaming": {
                "FUN_08003f3c": "count_leading_zeroes_and_set_integer_offsets_08003f3c",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "value_3",
                "uVar1": "currentValue",
                "uVar2": "leadingZeroesCount",
                "DAT_08003f78": "ptr"
            },
            "code": "void count_leading_zeroes_and_set_integer_offsets_08003f3c(uint32_t param_1, uint32_t param_2, uint32_t param_3)\n{\n  uint32_t currentValue;\n  uint32_t leadingZeroesCount;\n  uint32_t* DAT_08003f78 = DAT_08003f78;\n  \n  currentValue = *DAT_08003f78;\n  leadingZeroesCount = count_leading_zeroes(param_1);\n  set_integer_at_offset_08001424(DAT_08003f78, 0x8000, leadingZeroesCount >> 5);\n  \n  currentValue = *DAT_08003f78;\n  leadingZeroesCount = count_leading_zeroes(param_2);\n  set_integer_at_offset_08001424(DAT_08003f78, 0x4000, leadingZeroesCount >> 5);\n  \n  currentValue = *DAT_08003f78;\n  leadingZeroesCount = count_leading_zeroes(param_3);\n  set_integer_at_offset_08001424(DAT_08003f78, 0x2000, leadingZeroesCount >> 5);\n}\n",
            "called": [
                "FUN_08001424"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f3c",
            "calling": [
                "FUN_08004028",
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "count_leading_zeroes_and_set_integer_offsets_08003f3c"
        },
        "FUN_08002214": {
            "renaming": {
                "FUN_08002214": "get_value_from_pointer_08002214",
                "PTR_DAT_0800221c": "PTR_DATA"
            },
            "code": "uint32_t get_value_from_pointer_08002214() {\n  uint32_t* ptr = (uint32_t*)PTR_DAT_0800221c;\n  return *ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002214",
            "calling": [
                "FUN_08004514",
                "FUN_08001104"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08002214"
        },
        "FUN_0800729c": {
            "renaming": {
                "FUN_0800729c": "do_nothing_0800729c"
            },
            "code": "\nvoid do_nothing_0800729c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800729c",
            "calling": [
                "FUN_080071c0"
            ],
            "imported": false,
            "current_name": "do_nothing_0800729c"
        },
        "FUN_08001004": {
            "renaming": {
                "FUN_08001004": "concatenate_integers_08001004",
                "param_1": "lower",
                "param_2": "upper",
                "CONCAT44": "bitwise_concatenation",
                "calculate_result_08000f9c": "calculate_result"
            },
            "code": "unsigned long long concatenate_integers_08001004(unsigned int lower, unsigned int upper)\n{\n    calculate_result();\n    return ((unsigned long long)upper << 32) | lower;\n}",
            "called": [
                "FUN_08000f9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001004",
            "calling": [
                "FUN_08001014",
                "FUN_08001028",
                "FUN_08000ffc"
            ],
            "imported": false,
            "current_name": "concatenate_integers_08001004"
        },
        "FUN_08003ff4": {
            "renaming": {
                "FUN_08003ff4": "set_bits_in_memory_08003ff4",
                "puVar1": "memory_pointer"
            },
            "code": "void set_bits_in_memory_08003ff4(void)\n{\n  undefined *memory_pointer;\n  memory_pointer = PTR_DAT_0800401c;\n  set_bit_and_update_08002538(PTR_DAT_08004020, 4);\n  set_bit_and_update_08002538(PTR_DAT_08004024, 8);\n  set_bit_and_update_08002538(memory_pointer, 8);\n  set_bit_and_update_08002538(memory_pointer, 0xc);\n  return;\n}",
            "called": [
                "FUN_08002538"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ff4",
            "calling": [
                "FUN_08004028"
            ],
            "imported": false,
            "current_name": "set_bits_in_memory_08003ff4"
        },
        "FUN_080041ae": {
            "renaming": {
                "FUN_080041ae": "read_sensor_data_080041ae",
                "get_result_08003eb0": "get_result",
                "initialize_sensors_08004194": "initialize_sensors",
                "increment_pointer_value_0800114c": "increment_pointer_value",
                "FUNC_0800411c": "process_sensor_data"
            },
            "code": "void read_sensor_data_080041ae(void)\n{\n  get_result(0);\n  initialize_sensors();\n  do {\n    increment_pointer_value();\n    process_sensor_data();\n  } while( true );\n}",
            "called": [
                "FUN_08004194",
                "FUN_0800411c",
                "FUN_08003eb0",
                "FUN_0800114c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041ae",
            "calling": [
                "FUN_08004f68"
            ],
            "imported": false,
            "current_name": "read_sensor_data_080041ae"
        },
        "FUN_08001128": {
            "renaming": {
                "FUN_08001128": "set_bit_and_encode_data_08001128",
                "set_param_bits_08001170": "set_parameter_bits",
                "encode_and_return_08001104": "encode_and_return",
                "set_param_bits_and_encode_data_08004ccc": "set_parameter_bits_and_encode_data",
                "*DAT_08001148": "data_ptr"
            },
            "code": "int set_bit_and_encode_data_08001128(void)\n{\n  int **DAT_08001148 = DAT_08001148;\n  **DAT_08001148 = **DAT_08001148 | 0x10;\n  set_parameter_bits(3);\n  encode_and_return(0);\n  set_parameter_bits_and_encode_data();\n  return 0;\n}",
            "called": [
                "FUN_08004ccc",
                "FUN_08001170",
                "FUN_08001104"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001128",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "set_bit_and_encode_data_08001128"
        },
        "FUN_08004514": {
            "renaming": {
                "FUN_08004514": "process_peripherals_08004514",
                "iVar1": "error_code",
                "uVar2": "value",
                "uVar3": "i",
                "iVar4": "index",
                "local_44": "check_param",
                "local_40": "data_size",
                "local_3c": "index_copy",
                "local_38": "check_value",
                "local_34": "data_size_copy",
                "local_30": "data",
                "local_20": "flag",
                "local_1c": "limit",
                "local_14": "data[1]",
                "local_10": "data[2]",
                "local_c": "data[3]"
            },
            "code": "void process_peripherals_08004514()\n{\n    int index = 2;\n    int error_code;\n    int data_size;\n    uint32_t value;\n    uint32_t data[4];\n    uint32_t flag = 1;\n    uint32_t limit = 0x10;\n    data[0] = 2;\n    data[1] = 2;\n    data[2] = 0x380000;\n    error_code = call_function_08001b58(data);\n    if (error_code != 0) {\n        for (uint32_t i = 0x3c; ; i = 0x49) {\n            data_size = process_data_and_strings_08004490(PTR_s____Src_peripherals_c_08004588, i);\n            uint32_t check_value = 0x400;\n            uint32_t check_param = 0xf;\n            error_code = check_value_0800209c(&check_param, index);\n            if (error_code == 0) {\n                break;\n            }\n            index = data_size;\n        }\n        value = get_value_from_pointer_08002214();\n        check_param_limit_08001214(value / 1000);\n        set_flag_08001240(flag << 2);\n        encode_data_08001194(0xffffffff, 0, 0);\n    }\n}\n",
            "called": [
                "FUN_08001194",
                "FUN_0800209c",
                "FUN_08001b58",
                "FUN_08004490",
                "FUN_08001214",
                "FUN_08002214",
                "FUN_08001240"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004514",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "process_peripherals_08004514"
        },
        "FUN_08004a84": {
            "renaming": {
                "FUN_08004a84": "process_input_data_08004a84",
                "uVar7": "result",
                "puVar1": "str1",
                "puVar2": "str2",
                "puVar3": "str3",
                "puVar4": "str4",
                "puVar5": "str5",
                "iVar8": "is_input_empty"
            },
            "code": "void process_input_data_08004a84()\n{\n  int result = calculate_result();\n  char* str1 = PTR_DAT_08004bf0;\n  char* str2 = PTR_DAT_08004bf4;\n  char* str3 = PTR_DAT_08004bf8;\n  *(int*)(str1 + 0x30) = result;\n  result = calculate_average();\n  *(int*)(str2 + 0x30) = result;\n  result = check_string_and_concatenated_integers_are_zero_or_not();\n  *(int*)(str3 + 0x30) = result;\n  update_data_if_needed();\n  int is_input_empty = check_if_input_is_empty(*(int*)(str1 + 0x30),0);\n  if (is_input_empty == 0) {\n    is_input_empty = is_string_terminated(*(int*)(str1 + 0x30),DAT_08004c00);\n  }\n  else {\n    is_input_empty = check_if_input_is_empty(*(int*)(str1 + 0x30),DAT_08004bfc);\n  }\n  if (is_input_empty == 0) {\n    is_input_empty = check_if_input_is_empty(*(int*)(str2 + 0x30),0);\n    if (is_input_empty == 0) {\n      is_input_empty = is_string_terminated(*(int*)(str2 + 0x30),DAT_08004c00);\n    }\n    else {\n      is_input_empty = check_if_input_is_empty(*(int*)(str2 + 0x30),DAT_08004bfc);\n    }\n    if (is_input_empty == 0) {\n      count_leading_zeroes_and_set_integer_offsets(1,1);\n      calculate_hash(str1);\n      calculate_hash(str2);\n      calculate_hash(str3);\n      char* str4 = PTR_DAT_08004c04;\n      char* str5 = PTR_DAT_08004c08;\n      if (str4[1] != '\\0') {\n        calculate_hash(str5);\n        int result = FUNC_08000adc(*(int*)(str5 + 0x48),DAT_08004c0c);\n        *(int*)(str5 + 0x48) = result;\n      }\n      *(int*)(str5 + 0x48) = *(int*)(str4 + 4);\n      if (*str4 == '\\0') {\n        set_parameter_and_value_in_memory();\n      }\n      else {\n        extract_and_set_parameters(*(int*)(str5 + 0x48),*(int*)(str1 + 0x48),*(int*)(str2 + 0x48),*(int*)(str3 + 0x48));\n      }\n      FUNC_08000cec(*(int*)(str1 + 4),DAT_08004c10);\n      unsigned char uint1 = decode_uint();\n      char* str6 = PTR_DAT_08004c14;\n      int uint2 = DAT_08004c10;\n      str6[3] = uint1;\n      FUNC_08000cec(*(int*)(str1 + 8),uint2);\n      uint1 = decode_uint();\n      str6[4] = uint1;\n      FUNC_08000cec(*(int*)(str2 + 4),uint2);\n      uint1 = decode_uint();\n      *str6 = uint1;\n      FUNC_08000cec(*(int*)(str2 + 8),uint2);\n      uint1 = decode_uint();\n      str6[1] = uint1;\n      FUNC_08000cec(*(int*)(str2 + 0xc),uint2);\n      uint1 = decode_uint();\n      str6[2] = uint1;\n      FUNC_08000cec(*(int*)(str3 + 4),uint2);\n      uint1 = decode_uint();\n      str6[6] = uint1;\n      FUNC_08000cec(*(int*)(str3 + 8),uint2);\n      uint1 = decode_uint();\n      str6[7] = uint1;\n      FUNC_08000cec(*(int*)(str3 + 0xc),uint2);\n      uint1 = decode_uint();\n      str6[8] = uint1;\n      FUNC_08000cec(*(int*)(str5 + 4),uint2);\n      uint1 = decode_uint();\n      str6[9] = uint1;\n      FUNC_08000cec(*(int*)(str5 + 8),uint2);\n      uint1 = decode_uint();\n      str6[10] = uint1;\n      FUNC_08000cec(*(int*)(str5 + 0xc),uint2);\n      uint1 = decode_uint();\n      str6[11] = uint1;\n      return;\n    }\n  }\n  set_parameter_and_value_in_memory();\n  count_leading_zeroes_and_set_integer_offsets(0,1);\n  return;\n}",
            "called": [
                "FUN_08000cec",
                "FUN_08002ee8",
                "FUN_08003f3c",
                "FUN_08000adc",
                "FUN_08002ec0",
                "FUN_08001028",
                "FUN_0800483c",
                "FUN_08004a30",
                "FUN_08001064",
                "FUN_080010c4",
                "FUN_08002ed4",
                "FUN_080041c4",
                "FUN_0800426c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a84",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_input_data_08004a84"
        },
        "FUN_080041c4": {
            "renaming": {
                "FUN_080041c4": "set_parameter_and_value_in_memory_080041c4",
                "param_1": "parameter_value",
                "param_2": "extra_value",
                "param_3": "parameter_address",
                "param_4": "value_address",
                "set_parameter_in_memory_08003fc4": "set_parameter_in_memory",
                "set_parameter_value_08003fd0": "set_parameter_value",
                "set_parameter_in_memory_08003fdc": "set_parameter_in_memory",
                "set_value_in_memory_08003fe8": "set_value_in_memory"
            },
            "code": "void set_parameter_and_value_in_memory_080041c4(int parameter_value, int extra_value, int parameter_address, int value_address) {\n  set_parameter_in_memory(parameter_address);\n  set_parameter_value(parameter_value);\n  set_parameter_in_memory(value_address);\n  set_value_in_memory(0, extra_value, parameter_address, value_address);\n  return;\n}",
            "called": [
                "FUN_08003fd0",
                "FUN_08003fdc",
                "FUN_08003fc4",
                "FUN_08003fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041c4",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "set_parameter_and_value_in_memory_080041c4"
        },
        "FUN_080053d4": {
            "renaming": {
                "FUN_080053d4": "FUNC_080053d4"
            },
            "code": "\nuint FUNC_080053d4(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_0800558e;\n          if (bVar1 != 0x58) goto LAB_08005404;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_08005610;\nLAB_0800551e:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_08005404;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_08005424;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08005424:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_08005610;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_08005552;\nLAB_08005600:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_080054fa;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08005464:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_0800548a:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_08005498;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08005498:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_08005610;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_080054b4;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_0800544a:\n            puVar5 = PTR_s_0123456789abcdef_0800560c;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_0800548a;\n          if (bVar1 == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08005464;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = find_character_08005614(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_0800557a;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_0800557a:\n    *puVar3 = uVar6;\n  }\nLAB_0800558e:\n  param_2[4] = 0;\nLAB_080054fa:\n  iVar2 = process_data_080052e4(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_0800550e:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_0800550e;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08005614",
                "FUN_080052e4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080053d4",
            "calling": [
                "FUN_080050fc"
            ],
            "imported": false,
            "current_name": "FUNC_080053d4"
        },
        "FUN_080057d0": {
            "renaming": {
                "FUN_080057d0": "allocate_and_add_to_list_080057d0",
                "param_1": "pointer",
                "param_2": "size",
                "param_3": "sum",
                "param_4": "value",
                "uVar1": "allocated_pointer",
                "uVar2": "calculated_sum"
            },
            "code": "uint allocate_and_add_to_list_080057d0(uint pointer, uint size, uint sum, uint value) {\n  uint allocated_pointer;\n  uint calculated_sum;\n  if (size != 0) {\n    if (sum == 0) {\n      add_to_linked_list();\n      allocated_pointer = sum;\n    }\n    else {\n      calculated_sum = calculate_array_sum();\n      allocated_pointer = size;\n      if ((calculated_sum < sum) && (allocated_pointer = allocate_memory_block(pointer, sum), allocated_pointer != 0)) {\n        copy_data_to_buffer(allocated_pointer, size, sum);\n        add_to_linked_list(pointer, size);\n      }\n    }\n    return allocated_pointer;\n  }\n  allocated_pointer = allocate_memory_block(pointer, sum, sum, value);\n  return allocated_pointer;\n}",
            "called": [
                "FUN_08005840",
                "FUN_08005630",
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057d0",
            "calling": [
                "FUN_08005044"
            ],
            "imported": false,
            "current_name": "allocate_and_add_to_list_080057d0"
        },
        "FUN_0800567c": {
            "renaming": {
                "FUN_0800567c": "add_to_linked_list_0800567c",
                "param_1": "head",
                "param_2": "size",
                "param_3": "data",
                "param_4": "error_code",
                "puVar1": "ptr",
                "extraout_r1": "next",
                "ppiVar2": "next",
                "ppiVar3": "prev",
                "piVar4": "data",
                "ppiVar5": "start",
                "ppiVar6": "next_prev",
                "ppiVar7": "current"
            },
            "code": "void add_to_linked_list_0800567c(int **head, int size, int *data, int error_code) {\n  if (size == 0) {\n    return;\n  }\n  int **current = (int **)(size - 4);\n  if (*(int *)(size - 4) < 0) {\n    current = (int **)((int)current + *(int *)(size - 4));\n  }\n  do_nothing_0800583c();\n  int **start = *(int ***)PTR_DAT_08005710;\n  if (start == (int **)0x0) {\n    current[1] = (int *)0x0;\n    *(int ***)PTR_DAT_08005710 = current;\n    int **next = NULL;\n    int **prev = *(int ***)PTR_DAT_08005710;\n  }\n  else if (current < start) {\n    int **next = (int **)*current;\n    int **prev = (int **)((int)current + (int)next);\n    if (start == prev) {\n      int *data = *start;\n      start = (int **)start[1];\n      prev = (int **)((int)data + (int)next);\n      *current = (int *)prev;\n    }\n    current[1] = (int *)start;\n    *(int ***)PTR_DAT_08005710 = current;\n  }\n  else {\n    int **next;\n    int **prev = start;\n    do {\n      next = prev[1];\n      if (next == (int **)0x0) break;\n      prev = next;\n    } while (next <= current);\n    int **next_prev = (int **)*prev;\n    if ((int **)((int)prev + (int)next_prev) == current) {\n      next_prev = (int **)((int)next_prev + (int)*current);\n      *prev = (int *)next_prev;\n      if (next == (int **)((int)prev + (int)next_prev)) {\n        int *data = *next;\n        next = (int **)next[1];\n        next_prev = (int **)((int)next_prev + (int)data);\n        *prev = (int *)next_prev;\n        prev[1] = (int *)next;\n      }\n    }\n    else if (current < (int **)((int)prev + (int)next_prev)) {\n      *error_code = 0xc;\n    }\n    else {\n      next_prev = (int **)((int)current + (int)*current);\n      if (next == next_prev) {\n        int *data = *next;\n        next = (int **)next[1];\n        next_prev = (int **)((int)data + (int)*current);\n        *current = (int *)next_prev;\n      }\n      current[1] = (int *)next;\n      prev[1] = (int *)current;\n    }\n  }\n  do_nothing_0800583e(error_code,next,prev,data);\n  return;\n}",
            "called": [
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800567c",
            "calling": [
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "imported": false,
            "current_name": "add_to_linked_list_0800567c"
        },
        "FUN_0800458c": {
            "renaming": {
                "FUN_0800458c": "FUNC_0800458c"
            },
            "code": "\nvoid FUNC_0800458c(void)\n\n{\n  undefined4 uVar1;\n  undefined *puVar2;\n  int iVar3;\n  undefined4 uVar4;\n  int iVar5;\n  int local_58;\n  int local_54;\n  int local_50;\n  int local_4c;\n  int local_48;\n  int local_40;\n  int local_3c;\n  int local_38;\n  int local_34;\n  int local_30;\n  int local_2c;\n  int local_28;\n  int local_24;\n  undefined4 local_20;\n  int local_1c;\n  \n  set_bit_and_encode_data_08001128();\n  process_peripherals_08004514();\n  uVar4 = DAT_08004800;\n  iVar3 = DAT_080047fc;\n  *(uint *)(DAT_080047fc + 0x18) = *(uint *)(DAT_080047fc + 0x18) | 0x10;\n  iVar5 = 2;\n  *(uint *)(iVar3 + 0x18) = *(uint *)(iVar3 + 0x18) | 4;\n  uVar1 = DAT_08004804;\n  *(uint *)(iVar3 + 0x18) = *(uint *)(iVar3 + 0x18) | 8;\n  set_integer_at_offset_08001424(uVar4,0xe000,0,*(uint *)(iVar3 + 0x18) & 8);\n  set_integer_at_offset_08001424(DAT_08004808,0x20,0);\n  local_34 = 0xe000;\n  local_30 = 1;\n  local_28 = 2;\n  calculate_flags_08001264(DAT_08004800,&local_34);\n  local_34 = 0x20;\n  local_30 = 1;\n  local_28 = 2;\n  calculate_flags_08001264(DAT_08004808,&local_34);\n  puVar2 = PTR_DAT_0800480c;\n  *(undefined4 *)PTR_DAT_0800480c = DAT_08004810;\n  *(undefined4 *)(puVar2 + 4) = uVar1;\n  *(undefined4 *)(puVar2 + 0x10) = 0x4000;\n  *(undefined4 *)(puVar2 + 8) = 0;\n  *(undefined4 *)(puVar2 + 0xc) = 0;\n  *(undefined4 *)(puVar2 + 0x14) = 0;\n  *(undefined4 *)(puVar2 + 0x18) = 0;\n  *(undefined4 *)(puVar2 + 0x1c) = 0;\n  *(undefined4 *)(puVar2 + 0x20) = 0;\n  iVar3 = calculate_shifted_value_08001754();\n  if (iVar3 == 0) goto LAB_0800463a;\n  uVar4 = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  iVar3 = process_data_and_strings_08004490(PTR_s____Src_peripherals_c_08004814,uVar4);\nLAB_0800463a:\n                                  uVar4 = DAT_0800481c;\n                                  puVar2 = PTR_DAT_08004818;\n                                  *(int *)(PTR_DAT_08004818 + 8) = iVar3;\n                                  *(int *)(puVar2 + 0xc) = iVar3;\n                                  *(int *)(puVar2 + 0x10) = iVar3;\n                                  *(int *)(puVar2 + 0x18) = iVar3;\n                                  *(int *)(puVar2 + 0x1c) = iVar3;\n                                  *(undefined4 *)puVar2 = uVar4;\n                                  *(undefined4 *)(puVar2 + 4) = 0x1c200;\n                                  *(undefined4 *)(puVar2 + 0x14) = 0xc;\n                                  iVar3 = zero_out_and_update_values_08002724(puVar2);\n                                  uVar4 = DAT_08004824;\n                                  puVar2 = PTR_DAT_08004820;\n                                  if (iVar3 == 0) break;\n                                  uVar4 = 0x151;\n                                }\n                                *(undefined4 *)(PTR_DAT_08004820 + 8) = 0;\n                                *(undefined4 *)(puVar2 + 0x10) = 0;\n                                *(undefined4 *)(puVar2 + 0x14) = 0;\n                                *(undefined4 *)puVar2 = uVar4;\n                                *(int *)(puVar2 + 4) = iVar5;\n                                *(undefined4 *)(puVar2 + 0xc) = 1000;\n                                iVar3 = update_memory_if_valid_input_080023d0(puVar2);\n                                if (iVar3 == 0) break;\n                                uVar4 = 0x88;\n                              }\n                              local_58 = iVar3;\n                              local_54 = iVar3;\n                              iVar3 = set_values_080025a4(puVar2,&local_58);\n                              if (iVar3 == 0) break;\n                              uVar4 = 0x8f;\n                            }\n                            local_50 = 0x60;\n                            local_4c = iVar3;\n                            local_48 = iVar3;\n                            local_40 = iVar3;\n                            local_3c = iVar3;\n                            local_38 = iVar3;\n                            iVar3 = update_data_0800245c(puVar2,&local_50,0xc);\n                            if (iVar3 == 0) break;\n                            uVar4 = 0x9a;\n                          }\n                          local_20 = 0x2000;\n                          local_34 = iVar3;\n                          local_30 = iVar3;\n                          local_2c = iVar3;\n                          local_28 = iVar3;\n                          local_24 = iVar3;\n                          local_1c = iVar3;\n                          iVar3 = set_flag_and_calculate_sum_08002564(puVar2,&local_34);\n                          if (iVar3 == 0) break;\n                          uVar4 = 0xa6;\n                        }\n                        calculate_flags_08004e14(puVar2);\n                        puVar2 = PTR_DAT_08004828;\n                        *(undefined4 *)PTR_DAT_08004828 = 0x40000000;\n                        *(int *)(puVar2 + 4) = iVar5;\n                        *(undefined4 *)(puVar2 + 8) = 0;\n                        *(undefined4 *)(puVar2 + 0xc) = 1000;\n                        *(undefined4 *)(puVar2 + 0x10) = 0;\n                        iVar3 = update_memory_if_valid_input_080023d0(puVar2);\n                        if (iVar3 == 0) break;\n                        uVar4 = 0xc3;\n                      }\n                      local_50 = iVar3;\n                      local_4c = iVar3;\n                      iVar3 = set_values_080025a4(puVar2,&local_50);\n                      if (iVar3 == 0) break;\n                      uVar4 = 0xca;\n                    }\n                    local_34 = 0x60;\n                    local_30 = iVar3;\n                    local_2c = iVar3;\n                    local_24 = iVar3;\n                    iVar3 = update_data_0800245c(puVar2,&local_34,4);\n                    if (iVar3 == 0) break;\n                    uVar4 = 0xd3;\n                  }\n                  calculate_flags_08004e14(puVar2);\n                  uVar4 = DAT_08004830;\n                  puVar2 = PTR_DAT_0800482c;\n                  *(undefined4 *)(PTR_DAT_0800482c + 0xc) = 1000;\n                  *(undefined4 *)puVar2 = uVar4;\n                  *(int *)(puVar2 + 4) = iVar5;\n                  *(undefined4 *)(puVar2 + 8) = 0;\n                  *(undefined4 *)(puVar2 + 0x10) = 0;\n                  iVar3 = update_memory_if_valid_input_080023d0();\n                  if (iVar3 == 0) break;\n                  uVar4 = 0xf0;\n                }\n                local_50 = 0;\n                local_4c = 0;\n                iVar3 = set_values_080025a4(PTR_DAT_0800482c,&local_50);\n                if (iVar3 == 0) break;\n                uVar4 = 0xf7;\n              }\n              local_34 = 0x60;\n              local_30 = iVar3;\n              local_2c = iVar3;\n              local_24 = iVar3;\n              iVar3 = update_data_0800245c(PTR_DAT_0800482c,&local_34,8);\n              if (iVar3 == 0) break;\n              uVar4 = 0x100;\n            }\n            iVar5 = update_data_0800245c(PTR_DAT_0800482c,&local_34,0xc);\n            if (iVar5 == 0) break;\n            uVar4 = 0x105;\n          }\n          calculate_flags_08004e14(PTR_DAT_0800482c);\n          puVar2 = PTR_DAT_08004834;\n          *(undefined4 *)PTR_DAT_08004834 = DAT_08004838;\n          *(undefined4 *)(puVar2 + 4) = 2;\n          *(undefined4 *)(puVar2 + 8) = 0;\n          *(undefined4 *)(puVar2 + 0xc) = 1000;\n          *(undefined4 *)(puVar2 + 0x10) = 0;\n          iVar3 = update_memory_if_valid_input_080023d0(puVar2);\n          if (iVar3 == 0) break;\n          uVar4 = 0x122;\n        }\n        local_50 = iVar3;\n        local_4c = iVar3;\n        iVar3 = set_values_080025a4(puVar2,&local_50);\n        if (iVar3 == 0) break;\n        uVar4 = 0x129;\n      }\n      local_34 = 0x60;\n      local_30 = iVar3;\n      local_2c = iVar3;\n      local_24 = iVar3;\n      iVar3 = update_data_0800245c(puVar2,&local_34,8);\n      if (iVar3 == 0) break;\n      uVar4 = 0x132;\n    }\n    iVar3 = update_data_0800245c(puVar2,&local_34,0xc);\n    if (iVar3 == 0) break;\n    uVar4 = 0x137;\n  }\n  calculate_flags_08004e14(puVar2);\n  return;\n}\n\n",
            "called": [
                "FUN_08001424",
                "FUN_080023d0",
                "FUN_080025a4",
                "FUN_08002564",
                "FUN_08004e14",
                "FUN_08002724",
                "FUN_08004490",
                "FUN_08001128",
                "FUN_08001754",
                "FUN_08004514",
                "FUN_08001264",
                "FUN_0800245c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800458c",
            "calling": [
                "FUN_08004028"
            ],
            "imported": false,
            "current_name": "FUNC_0800458c"
        },
        "FUN_080072d4": {
            "renaming": {
                "FUN_080072d4": "do_nothing_080072d4"
            },
            "code": "\nvoid do_nothing_080072d4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072d4",
            "calling": [
                "FUN_08000110",
                "FUN_08000134",
                "FUN_08004fb4"
            ],
            "imported": false,
            "current_name": "do_nothing_080072d4"
        },
        "FUN_0800583c": {
            "renaming": {
                "FUN_0800583c": "do_nothing_0800583c"
            },
            "code": "\nvoid do_nothing_0800583c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583c",
            "calling": [
                "FUN_0800567c",
                "FUN_08005714"
            ],
            "imported": false,
            "current_name": "do_nothing_0800583c"
        },
        "FUN_08000adc": {
            "renaming": {
                "FUN_08000adc": "FUNC_08000adc"
            },
            "code": "\nuint FUNC_08000adc(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000c12:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_08000c12;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000adc",
            "calling": [
                "FUN_08002ee8",
                "FUN_08002cb0",
                "FUN_0800411c",
                "FUN_08002ec0",
                "FUN_08004a84",
                "FUN_0800426c",
                "FUN_08003330",
                "FUN_0800483c"
            ],
            "imported": false,
            "current_name": "FUNC_08000adc"
        },
        "FUN_08000ffc": {
            "renaming": {
                "FUN_08000ffc": "concatenate_integers_08000ffc",
                "param_1": "num1",
                "param_2": "num2"
            },
            "code": "void concatenate_integers_08000ffc(int param_1, int param_2)\n{\n  concatenate_integers_08000ffc_08001004(param_2, param_1);\n  return;\n}",
            "called": [
                "FUN_08001004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ffc",
            "calling": [
                "FUN_08001064",
                "FUN_08001050"
            ],
            "imported": false,
            "current_name": "concatenate_integers_08000ffc"
        },
        "FUN_080016f4": {
            "renaming": {
                "FUN_080016f4": "check_if_flag_set_080016f4",
                "param_1": "data",
                "param_2": "length",
                "iVar1": "start_value",
                "iVar2": "current_data"
            },
            "code": "int check_if_flag_set_080016f4(int *data, uint length)\n{\n  int start_value = get_start_value();\n  while( true ) {\n    int current_data = *data;\n    if ((*(uint *)(current_data + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(current_data + 0x14) << 0x1b < 0) break;\n    if ((length == 0) || (current_data = get_start_value(), length < (uint)(current_data - start_value))) {\n      data[0xe] = data[0xe] | 0x20;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 3;\n    }\n  }\n  *(uint *)(current_data + 0x14) = *(uint *)(current_data + 0x14) & 0xffffffef;\n  data[0xe] = 0;\n  *(undefined *)(data + 0xd) = 0;\n  *(undefined *)((int)data + 0x35) = 0x20;\n  return 1;\n}",
            "called": [
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016f4",
            "calling": [
                "FUN_08001938"
            ],
            "imported": false,
            "current_name": "check_if_flag_set_080016f4"
        },
        "FUN_080025a4": {
            "renaming": {
                "FUN_080025a4": "set_values_080025a4",
                "param_1": "data_ptr",
                "param_2": "values_ptr",
                "uVar1": "value1",
                "uVar2": "return_value",
                "iVar3": "data",
                "uVar4": "value2"
            },
            "code": "int set_values_080025a4(int *data_ptr, uint *values_ptr)\n{\n    uint value1, value2;\n    int data = *data_ptr;\n    int return_value = 2;\n    if (*(char *)(data_ptr + 0xe) != '\\x01') {\n        *(undefined *)((int)data_ptr + 0x39) = 2;\n        value1 = *values_ptr;\n        value2 = values_ptr[1];\n        *(uint *)(data + 4) = *(uint *)(data + 4) & 0xffffff8f;\n        *(uint *)(data + 4) = *(uint *)(data + 4) | value1;\n        *(uint *)(data + 8) = *(uint *)(data + 8) & 0xffffff7f;\n        *(uint *)(data + 8) = *(uint *)(data + 8) | value2;\n        *(undefined *)((int)data_ptr + 0x39) = 1;\n        return_value = 0;\n        *(undefined *)(data_ptr + 0xe) = 0;\n    }\n    return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025a4",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "set_values_080025a4"
        },
        "FUN_0800583e": {
            "renaming": {
                "FUN_0800583e": "do_nothing_0800583e"
            },
            "code": "\nvoid do_nothing_0800583e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583e",
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800583e"
        },
        "FUN_08002220": {
            "renaming": {
                "FUN_08002220": "get_shifted_value_08002220",
                "uVar1": "leading_zeroes",
                "PTR_DAT_0800224c": "ptr_dat_1",
                "PTR_DAT_08002248": "ptr_dat_2",
                "DAT_08002244": "dat_1",
                "count_leading_zeroes": "count_leading_zeroes",
                "uint": "unsigned int",
                "mask": "shifted_value",
                "0xe00000": "number"
            },
            "code": "uint get_shifted_value_08002220(uint number) {\n    uint count = 0;\n    while (number >>= 1)\n        count++;\n    return 32 - count;\n}\n\nuint get_shifted_value_08002220(void) {\n    uint leading_zeroes = get_shifted_value_08002220(0xe00000);\n    uint mask = (*(uint *)PTR_DAT_0800224c >> (PTR_DAT_08002248[(*(uint *)(DAT_08002244 + 4) & 0x700) >> (leading_zeroes & 0xff)])) & 0xffffffff;\n    return mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002220",
            "calling": [
                "FUN_080025e8",
                "FUN_08001754"
            ],
            "imported": false,
            "current_name": "get_shifted_value_08002220"
        },
        "FUN_08003034": {
            "renaming": {
                "FUN_08003034": "process_data_and_strings_08003034",
                "param_1": "val1",
                "param_2": "val2",
                "param_3": "param_3",
                "param_4": "data",
                "local_c": "local_data",
                "PTR_s____Src_MS5611_c_08003064": "src"
            },
            "code": "uint process_data_and_strings_08003034(uint8_t val1, uint8_t val2, uint32_t* data, uint8_t len, const uint8_t* PTR_s____Src_MS5611_c_08003064, uint8_t PTR_s____Src_MS5611_c_08003064_len, uint32_t param_3)\n{\n  uint32_t local_data = *data;\n  process_data_and_strings_08003034_if_valid(val1, val2, &local_data, len, PTR_s____Src_MS5611_c_08003064, PTR_s____Src_MS5611_c_08003064_len, param_3);\n  return (uint)CONCAT12((undefined)local_data,CONCAT11(local_data._1_1_,local_data._2_1_));\n}",
            "called": [
                "FUN_080040b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003034",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_data_and_strings_08003034"
        },
        "FUN_08004e7c": {
            "renaming": {
                "FUN_08004e7c": "set_flags_if_param_matches_08004e7c",
                "*param_1": "*param",
                "DAT_08004edc": "MATCHING_VALUE",
                "DAT_08004ee0": "calculate_flags_data",
                "local_18": "first_flag",
                "local_14": "second_flag",
                "local_10": "third_flag",
                "local_c": "unused_variable",
                "calculate_flags_08001264": "calculate_flags",
                "encode_data_08001194": "encode_data",
                "set_bit_at_index_080011fc": "set_bit_at_index"
            },
            "code": "void set_flags_if_param_matches_08004e7c(int *param)\n{\n  uint *data_ptr = (uint *)(param + 0xd818);\n  if (*param == DAT_08004edc) {\n    *data_ptr |= 0x4000;\n    uint first_flag = 0x200;\n    uint second_flag = 2;\n    uint third_flag = 3;\n    calculate_flags(&first_flag);\n    first_flag = 0x400;\n    second_flag = 0;\n    third_flag = 0;\n    calculate_flags(&first_flag);\n    encode_data(0x25, 0, 0);\n    set_bit_at_index(0x25);\n  }\n  return;\n}",
            "called": [
                "FUN_08001194",
                "FUN_080011fc",
                "FUN_08001264"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e7c",
            "calling": [
                "FUN_08002724"
            ],
            "imported": false,
            "current_name": "set_flags_if_param_matches_08004e7c"
        },
        "FUN_08001530": {
            "renaming": {
                "FUN_08001530": "update_feature_flags_08001530",
                "param_1": "feature_flags_ptr",
                "param_2": "flag1",
                "param_3": "flag2",
                "param_4": "disable_flag",
                "param_5": "max_value",
                "iVar1": "value1",
                "iVar2": "value2",
                "puVar3": "current_feature",
                "ppuVar4": "feature_flags_ptr_ptr",
                "uVar5": "flag5",
                "uVar6": "flag6"
            },
            "code": "int update_feature_flags_08001530(uint **feature_flags_ptr, uint flag1, uint flag2, int disable_flag, uint max_value) {\n  int value1 = 0;\n  int value2 = 0;\n  uint *current_feature_flags = *feature_flags_ptr;\n  uint **feature_flags_ptr_ptr = feature_flags_ptr;\n  uint flag5 = max_value;\n  uint flag6 = flag2;\n  uint *current_feature = NULL;\n  \n  *current_feature_flags = *current_feature_flags | 0x100;\n  value1 = get_value_from_pointer_0800115c();\n  \n  do {\n    current_feature = *feature_flags_ptr;\n    \n    do {\n      if ((int)(current_feature[5] << 0x1f) < 0) {\n        current_feature[4] = flag1 & 0xfe;\n        value1 = check_value_08001460(feature_flags_ptr, DAT_080015e4, flag5, current_feature, feature_flags_ptr_ptr, flag1, flag6);\n        \n        if (value1 == 0) {\n          value1 = check_feature_disabled_080014e2(feature_flags_ptr, flag5, (*feature_flags_ptr)[5], (*feature_flags_ptr)[6]);\n          \n          if (value1 == 0) {\n            current_feature = *feature_flags_ptr;\n            \n            if (disable_flag == 1) {\n              current_feature[4] = flag2 & 0xff;\n              return value1;\n            }\n            \n            current_feature[4] = flag2 >> 8;\n            value1 = check_feature_disabled_080014e2(feature_flags_ptr, flag5);\n            \n            if (value1 == 0) {\n              current_feature = *feature_flags_ptr;\n              current_feature[4] = flag2 & 0xff;\n              return value1;\n            }\n          }\n          \n          if (feature_flags_ptr[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          \n          *current_feature_flags = *current_feature_flags | 0x200;\n        }\n        else if (feature_flags_ptr[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        \n        return 1;\n      }\n    } while (flag5 != 0xffffffff);\n    \n    value2 = get_value_from_pointer_0800115c();\n    \n    if ((flag5 == 0) || (flag5 < (uint)(value2 - value1))) {\n      *(undefined *)((int)feature_flags_ptr + 0x35) = 0x20;\n      *(undefined *)(feature_flags_ptr + 0xd) = 0;\n      return 3;\n    }\n  } while(true);\n}",
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001530",
            "calling": [
                "FUN_08001828"
            ],
            "imported": false,
            "current_name": "update_feature_flags_08001530"
        },
        "FUN_08003314": {
            "renaming": {
                "FUN_08003314": "save_parameter_to_pointer_08003314",
                "param_1": "parameter",
                "PTR_DAT_0800331c": "pointer_to_dat"
            },
            "code": "void save_parameter_to_pointer_08003314(void* parameter) {\n  *(void **)PTR_DAT_0800331c = parameter;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003314",
            "calling": [
                "FUN_08002ea0"
            ],
            "imported": false,
            "current_name": "save_parameter_to_pointer_08003314"
        },
        "FUN_08005854": {
            "renaming": {
                "FUN_08005854": "process_input_and_return_result_08005854",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "input_ptr",
                "iVar2": "is_end_of_string",
                "puVar3": "var2",
                "piVar4": "var2",
                "uVar5": "result1",
                "uVar6": "result2",
                "local_48": "var1",
                "local_44": "var2",
                "local_40": "var3",
                "uStack_3c": "var4",
                "local_38": "var5",
                "uStack_34": "var6",
                "local_30": "var7",
                "local_28": "is_valid_input"
            },
            "code": "undefined8 process_input_and_return_result_08005854(undefined4 input1, undefined4 input2)\n{\n    undefined *input_ptr;\n    int is_valid_input;\n    undefined8 result1;\n    undefined8 result2;\n    undefined4 var1;\n    undefined *var2;\n    undefined4 var3;\n    undefined4 var4;\n    undefined4 var5;\n    undefined4 var6;\n    undefined8 var7;\n    int var8;\n\n    var7 = FUNC_08005c70();\n    input_ptr = PTR_DAT_080058f8;\n    if (*PTR_DAT_080058f8 == -1) {\n        return var7;\n    }\n    is_valid_input = is_valid_input_08000a04(input1, input2, input1, input2);\n    if (is_valid_input != 0) {\n        return var7;\n    }\n    result1 = do_nothing_0800708c(input1, input2);\n    var8 = is_end_of_string_080009f0((int)result1, (int)((ulonglong)result1 >> 0x20), 0, DAT_080058ec);\n    if (var8 == 0) {\n        return var7;\n    }\n    var1 = 1;\n    var2 = PTR_DAT_080058f0;\n    var3 = input1;\n    var4 = input2;\n    var5 = input1;\n    var6 = input2;\n    var7 = shift_left_64_bits_080070a4(PTR_DAT_080058f4);\n    if (*input_ptr != '\\x02') {\n        var8 = returnZero_0800709e(&var1);\n        if (var8 != 0) goto LAB_080058d0;\n    }\n    var2 = (undefined *)get_first_value_in_pointer_array_080072ac();\n    *(undefined4 *)var2 = 0x21;\nLAB_080058d0:\n    if (is_valid_input != 0) {\n        var2 = (undefined *)get_first_value_in_pointer_array_080072ac();\n        *(int *)var2 = is_valid_input;\n    }\n    return var7;\n}",
            "called": [
                "FUN_08000a04",
                "FUN_0800709e",
                "FUN_0800708c",
                "FUN_080072ac",
                "FUN_08005c70",
                "FUN_080070a4",
                "FUN_080009f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005854",
            "calling": [
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "process_input_and_return_result_08005854"
        },
        "FUN_08000168": {
            "renaming": {
                "FUN_08000168": "FUNC_08000168"
            },
            "code": "\nulonglong FUNC_08000168(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_08000278;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000168",
            "calling": [
                "FUN_08006070",
                "FUN_08006c0c",
                "FUN_08006228",
                "FUN_0800411c",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_080070b0"
            ],
            "imported": false,
            "current_name": "FUNC_08000168"
        },
        "FUN_080072e0": {
            "renaming": {
                "FUN_080072e0": "do_nothing_080072e0"
            },
            "code": "\nvoid do_nothing_080072e0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072e0",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080072e0"
        },
        "FUN_08001014": {
            "renaming": {
                "FUN_08001014": "check_if_concatenated_integers_not_empty_08001014",
                "in_ZR": "concatenated_integers",
                "concatenate_integers_08001004": "concatenate_integers"
            },
            "code": "bool check_if_concatenated_integers_not_empty_08001014(void)\n{\n  char concatenated_integers;\n  concatenate_integers();\n  return concatenated_integers != '\\0';\n}",
            "called": [
                "FUN_08001004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001014",
            "calling": [
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "check_if_concatenated_integers_not_empty_08001014"
        },
        "FUN_080071c0": {
            "renaming": {
                "FUN_080071c0": "calculate_result_080071c0",
                "param_1": "first_num",
                "param_2": "second_num",
                "param_3": "third_num",
                "param_4": "fourth_num",
                "uVar1": "temp_var_1",
                "iVar2": "temp_var_2",
                "uVar3": "temp_var_3",
                "uVar4": "temp_var_4",
                "uVar5": "temp_var_5",
                "uVar6": "result",
                "DAT_08007280": "constant_1",
                "DAT_08007284": "constant_2",
                "DAT_08007288": "constant_3",
                "DAT_0800728c": "constant_4",
                "DAT_08007290": "constant_5",
                "DAT_08007294": "constant_6",
                "DAT_08007298": "constant_7",
                "do_nothing_0800729c": "do_nothing",
                "SCARRY4": "SCARRY4"
            },
            "code": "ulonglong calculate_result_080071c0(uint32_t first_num, uint32_t second_num, int third_num, uint32_t fourth_num) {\n  uint32_t uVar1;\n  int iVar2;\n  uint32_t uVar5;\n  ulonglong result;\n  result = ((ulonglong)second_num << 32) | first_num;\n  uint32_t shifted_second_num = (second_num << 1) >> 0x15;\n  if (shifted_second_num == 0) {\n    if ((second_num & 0x7fffffff | first_num) == 0) {\n      return result;\n    }\n    result = FUNC_080004d0(first_num, second_num, 0, DAT_08007290);\n    uint32_t uVar3 = DAT_08007280;\n    uint32_t uVar4 = DAT_08007284;\n    if (third_num < DAT_08007294) goto LAB_0800722e;\n    shifted_second_num = ((uint32_t)((int64_t)(result >> 0x20) << 1) >> 0x15) - 0x36;\n  }\n  else if (shifted_second_num == 0x7ff) {\n    result = FUNC_0800016c(first_num, second_num, first_num, second_num, fourth_num);\n    return result;\n  }\n  uVar5 = (uint32_t)(result >> 0x20);\n  iVar2 = shifted_second_num + third_num;\n  if (iVar2 < 0x7ff) {\n    if (0 < iVar2) {\n      return result & 0xffffffff | (ulonglong)(uVar5 & 0x800fffff | iVar2 * 0x100000) << 0x20;\n    }\n    if (iVar2 + 0x35 < 0 == SCARRY4(iVar2,0x35)) {\n      result = result & 0xffffffff | (ulonglong)(uVar5 & 0x800fffff | (iVar2 + 0x36) * 0x100000) << 0x20;\n      uint32_t uVar3 = 0;\n      uint32_t uVar4 = DAT_08007298;\n      goto LAB_0800722e;\n    }\n    if (third_num < 0xc351) {\n      result = do_nothing_0800729c(DAT_08007280, DAT_08007284, (int)result, uVar5);\n      uint32_t uVar3 = DAT_08007280;\n      uint32_t uVar4 = DAT_08007284;\n      goto LAB_0800722e;\n    }\n  }\n  result = do_nothing_0800729c(DAT_08007288, DAT_0800728c, (int)result, uVar5);\n  uint32_t uVar3 = DAT_08007288;\n  uint32_t uVar4 = DAT_0800728c;\nLAB_0800722e:\n  result = FUNC_080004d0((int)result, (int)(result >> 0x20), uVar3, uVar4);\n  return result;\n}",
            "called": [
                "FUN_0800729c",
                "FUN_080004d0",
                "FUN_0800016c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080071c0",
            "calling": [
                "FUN_08006228"
            ],
            "imported": false,
            "current_name": "calculate_result_080071c0"
        },
        "FUN_08001258": {
            "renaming": {
                "FUN_08001258": "do_nothing_08001258"
            },
            "code": "\nvoid do_nothing_08001258(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001258",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08001258"
        },
        "FUN_08005614": {
            "renaming": {
                "FUN_08005614": "find_character_08005614",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "previous_char"
            },
            "code": "char* find_character_08005614(char* string, char character, int length) {\n  char* current_char = string;\n  while (current_char != string + length) {\n    if (*current_char == character) {\n      return current_char;\n    }\n    current_char++;\n  }\n  return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005614",
            "calling": [
                "FUN_080053d4",
                "FUN_080050fc"
            ],
            "imported": false,
            "current_name": "find_character_08005614"
        },
        "FUN_08000724": {
            "renaming": {
                "FUN_08000724": "FUNC_08000724"
            },
            "code": "\nulonglong FUNC_08000724(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = extract_bits_08000892();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_08000842;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_08000842:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_08000892"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000724",
            "calling": [
                "FUN_08006070",
                "FUN_08006c0c",
                "FUN_08006228",
                "FUN_08005900",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08003330",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "FUNC_08000724"
        },
        "FUN_080070a4": {
            "renaming": {
                "FUN_080070a4": "shift_left_64_bits_080070a4",
                "DAT_080070ac": "data"
            },
            "code": "unsigned long long shift_left_64_bits_080070a4(unsigned int DAT_080070ac)\n{\n    return (unsigned long long)DAT_080070ac << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080070a4",
            "calling": [
                "FUN_08006228",
                "FUN_08005854"
            ],
            "imported": false,
            "current_name": "shift_left_64_bits_080070a4"
        },
        "FUN_0800407c": {
            "renaming": {
                "FUN_0800407c": "check_data_and_strings_0800407c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "local_14": "buffer",
                "iVar1": "status",
                "PTR_DAT_080040b4": "PTR_DATA"
            },
            "code": "int check_data_and_strings_0800407c(int param1, int param2, int param3, int param4)\n{\n  int result = 0;\n  char buffer[8];\n  memset(buffer, 0, sizeof(buffer));\n  int status = check_data(PTR_DAT_080040b4, param1, param2, 1, buffer, 1, 200);\n  if (status != 0) {\n    process_data_and_strings(param3, param4);\n    result = buffer[0];\n  }\n  return result;\n}",
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800407c",
            "calling": [
                "FUN_08002cb0",
                "FUN_080040e8",
                "FUN_08002ad0",
                "FUN_08002d88"
            ],
            "imported": false,
            "current_name": "check_data_and_strings_0800407c"
        },
        "FUN_08001938": {
            "renaming": {
                "FUN_08001938": "FUNC_08001938"
            },
            "code": "\nundefined4\nFUNC_08001938(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n            undefined *param_5,ushort param_6,uint param_7)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int iVar3;\n  uint *puVar4;\n  uint uVar5;\n  undefined *puVar6;\n  bool bVar7;\n  \n  if (*(char *)((int)param_1 + 0x35) != ' ') {\n    return 2;\n  }\n  if (param_5 == (undefined *)0x0) {\n    return 1;\n  }\n  if (param_6 == 0) {\n    return 1;\n  }\n  iVar2 = get_value_from_pointer_0800115c();\n  while (puVar4 = *param_1, (~puVar4[6] & 2) == 0) {\n    iVar3 = get_value_from_pointer_0800115c();\n    if (10000 < (uint)(iVar3 - iVar2)) {\n      *(undefined *)(param_1 + 0xd) = 0;\n      *(undefined *)((int)param_1 + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(param_1 + 0xd) == '\\x01') {\n    return 2;\n  }\n  uVar5 = *puVar4;\n  *(undefined *)(param_1 + 0xd) = 1;\n  *puVar4 = uVar5 & 0xfffff7ff;\n  *(undefined *)((int)param_1 + 0x35) = 0x22;\n  *(undefined *)((int)param_1 + 0x36) = 0x40;\n  param_1[0xe] = (uint *)0x0;\n  iVar2 = check_and_update_080015e8(param_1,param_2,param_3,param_4,param_7);\n  if (iVar2 != 0) {\n    *(undefined *)(param_1 + 0xd) = 0;\n    if (param_1[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  puVar4 = *param_1;\n  uVar5 = *puVar4;\n  if (param_6 == 1) {\n    *puVar4 = uVar5 & 0xfffffbff;\n    disableIRQinterrupts();\n    **param_1 = **param_1 | 0x200;\n    enableIRQinterrupts();\n    iVar2 = check_if_flag_set_080016f4(param_1,param_7);\n    if (iVar2 == 0) {\n      *param_5 = (char)(*param_1)[4];\nLAB_08001ab8:\n      *(undefined *)((int)param_1 + 0x35) = 0x20;\n      *(undefined *)((int)param_1 + 0x36) = 0;\n      *(undefined *)(param_1 + 0xd) = 0;\n      return 0;\n    }\nLAB_08001a18:\n    if (param_1[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (param_6 == 2) {\n    *puVar4 = uVar5 | 0x800;\n    disableIRQinterrupts();\n    **param_1 = **param_1 & 0xfffffbff;\n    enableIRQinterrupts();\n  }\n  else {\n    *puVar4 = uVar5 | 0x400;\n    while (3 < param_6) {\n      iVar2 = check_if_flag_set_080016f4(param_1,param_7);\n      if (iVar2 != 0) goto LAB_08001a18;\n      *param_5 = (char)(*param_1)[4];\n      puVar4 = *param_1;\n      bVar7 = (int)(puVar4[5] << 0x1d) < 0;\n      if (bVar7) {\n        puVar4 = (uint *)puVar4[4];\n        puVar6 = param_5 + 2;\n        param_6 = param_6 - 2;\n      }\n      else {\n        puVar6 = param_5 + 1;\n        param_6 = param_6 - 1;\n      }\n      puVar1 = param_5 + 1;\n      param_5 = puVar6;\n      if (bVar7) {\n        *puVar1 = (char)puVar4;\n      }\n    }\n    if (param_6 != 2) {\n      iVar2 = get_value_from_pointer_0800115c();\n      do {\n        puVar4 = *param_1;\n        do {\n          if ((int)(puVar4[5] << 0x1d) < 0) {\n            *puVar4 = *puVar4 & 0xfffffbff;\n            disableIRQinterrupts();\n            *param_5 = (char)(*param_1)[4];\n            iVar2 = get_value_from_pointer_0800115c();\n            goto LAB_08001b3a;\n          }\n        } while (param_7 == 0xffffffff);\n      } while ((param_7 != 0) && (iVar3 = get_value_from_pointer_0800115c(), (uint)(iVar3 - iVar2) <= param_7));\n      goto LAB_08001afa;\n    }\n  }\n  iVar2 = get_value_from_pointer_0800115c();\n  do {\n    do {\n      if ((int)((*param_1)[5] << 0x1d) < 0) {\n        disableIRQinterrupts();\n        puVar4 = *param_1;\n        *puVar4 = *puVar4 | 0x200;\n        *param_5 = (char)puVar4[4];\n        enableIRQinterrupts();\n        param_5[1] = (char)(*param_1)[4];\n        goto LAB_08001ab8;\n      }\n    } while (param_7 == 0xffffffff);\n  } while ((param_7 != 0) && (iVar3 = get_value_from_pointer_0800115c(), (uint)(iVar3 - iVar2) <= param_7));\nLAB_08001afa:\n  *(undefined *)((int)param_1 + 0x35) = 0x20;\n  *(undefined *)(param_1 + 0xd) = 0;\n  return 3;\nLAB_08001b3a:\n  do {\n    puVar4 = *param_1;\n    do {\n      if ((int)(puVar4[5] << 0x1d) < 0) {\n        *puVar4 = *puVar4 | 0x200;\n        param_5[1] = (char)puVar4[4];\n        enableIRQinterrupts();\n        param_5[2] = (char)(*param_1)[4];\n        goto LAB_08001ab8;\n      }\n    } while (param_7 == 0xffffffff);\n  } while ((param_7 != 0) && (iVar3 = get_value_from_pointer_0800115c(), (uint)(iVar3 - iVar2) <= param_7));\n  goto LAB_08001afa;\n}\n\n",
            "called": [
                "FUN_080016f4",
                "FUN_0800115c",
                "FUN_080015e8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001938",
            "calling": [
                "FUN_080040b8",
                "FUN_0800407c"
            ],
            "imported": false,
            "current_name": "FUNC_08001938"
        },
        "FUN_0800411c": {
            "renaming": {
                "FUN_0800411c": "FUNC_0800411c"
            },
            "code": "\nvoid FUNC_0800411c(void)\n\n{\n  undefined4 *puVar1;\n  byte bVar2;\n  longlong lVar3;\n  uint uVar4;\n  undefined *puVar5;\n  undefined *puVar6;\n  undefined *puVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined4 uVar10;\n  undefined4 uVar11;\n  int iVar12;\n  undefined4 uVar13;\n  uint uVar14;\n  uint uVar15;\n  uint uVar16;\n  uint uVar17;\n  undefined4 *puVar18;\n  undefined4 unaff_r4;\n  int iVar19;\n  int iVar20;\n  bool bVar21;\n  undefined8 uVar22;\n  \n  iVar12 = thunk_get_value_from_pointer_0800115c();\n  puVar5 = PTR_DAT_08004188;\n  if (1 < (uint)(iVar12 - *(int *)PTR_DAT_08004188)) {\n    uVar13 = thunk_get_value_from_pointer_0800115c();\n    *(undefined4 *)puVar5 = uVar13;\n    process_sensor_data_08002f28();\n  }\n  iVar12 = thunk_get_value_from_pointer_0800115c();\n  puVar5 = PTR_DAT_0800418c;\n  if (2 < (uint)(iVar12 - *(int *)PTR_DAT_0800418c)) {\n    uVar13 = thunk_get_value_from_pointer_0800115c();\n    *(undefined4 *)puVar5 = uVar13;\n    process_input_data_08004a84();\n  }\n  iVar12 = thunk_get_value_from_pointer_0800115c();\n  puVar5 = PTR_DAT_08004190;\n  if (3 < (uint)(iVar12 - *(int *)PTR_DAT_08004190)) {\n    uVar13 = thunk_get_value_from_pointer_0800115c();\n    *(undefined4 *)puVar5 = uVar13;\n    process_data_08004348();\n    process_data_08004384();\n    process_data_and_string_080043f0();\n    process_data_08004410();\n    process_data_and_strings_08004434();\n    copy_and_process_data_080043bc();\n    process_and_send_data_08004458();\n  }\n  puVar6 = PTR_DAT_08003254;\n  puVar5 = PTR_DAT_08003250;\n  if ((*PTR_DAT_08003250 != '\\0') && (*PTR_DAT_08003254 != '\\0')) {\n    iVar20 = *(int *)PTR_DAT_0800325c + (uint)*(ushort *)(PTR_DAT_08003258 + 10) * -0x100;\n    uVar14 = (uint)((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 0xc) * (longlong)iVar20) >>\n             0x17 | (int)((ulonglong)\n                          ((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 0xc) *\n                          (longlong)iVar20) >> 0x20) << 9;\n    uVar15 = (uint)((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 8) * (longlong)iVar20 >> 7);\n    uVar16 = uVar15 + (uint)*(ushort *)(PTR_DAT_08003258 + 4) * 0x10000;\n    uVar8 = (uint)((ulonglong)\n                   ((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 6) * (longlong)iVar20) >> 8)\n    ;\n    iVar12 = uVar14 + 2000;\n    uVar9 = uVar8 + (uint)*(ushort *)(PTR_DAT_08003258 + 2) * 0x8000;\n    bVar21 = (int)uVar14 < 0;\n    if (1999 < iVar12) {\n      uVar14 = 0;\n    }\n    uVar4 = uVar14;\n    if (bVar21 != SBORROW4(iVar12,2000)) {\n      iVar19 = uVar14 * uVar14 * 5;\n      uVar14 = iVar19 >> 2;\n      uVar4 = iVar19 >> 1;\n    }\n    uVar17 = uVar16 - uVar4;\n    lVar3 = (ulonglong)(uVar9 - uVar14) * (ulonglong)*(uint *)PTR_DAT_08003260;\n    iVar19 = *(uint *)PTR_DAT_08003260 *\n             ((((int)((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 6) * (longlong)iVar20 >>\n                     0x28) + (uint)CARRY4(uVar8,(uint)*(ushort *)(PTR_DAT_08003258 + 2) * 0x8000)) -\n              ((int)uVar14 >> 0x1f)) - (uint)(uVar9 < uVar14)) + (int)((ulonglong)lVar3 >> 0x20);\n    uVar8 = (uint)lVar3 >> 0x15 | iVar19 * 0x800;\n    uVar13 = calculate_hash_08000c44(uVar8 - uVar17 >> 0xf |\n                          (((iVar19 >> 0x15) -\n                           ((((int)((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 8) *\n                                    (longlong)iVar20 >> 0x27) +\n                             (uint)CARRY4(uVar15,(uint)*(ushort *)(PTR_DAT_08003258 + 4) * 0x10000))\n                            - ((int)uVar4 >> 0x1f)) - (uint)(uVar16 < uVar4))) -\n                          (uint)(uVar8 < uVar17)) * 0x20000);\n    uVar10 = FUNC_08000e54(uVar13,DAT_08003264);\n    *(undefined4 *)PTR_DAT_08003268 = uVar10;\n    uVar13 = calculate_hash_08000c44(iVar12);\n    uVar11 = FUNC_08000e54(uVar13,DAT_08003264);\n    uVar13 = DAT_08003270;\n    *(undefined4 *)PTR_DAT_0800326c = uVar11;\n    FUNC_08000e54(uVar10,uVar13);\n    uVar22 = reverseBits_08000428();\n    uVar22 = FUNC_08005900((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),DAT_08003240,DAT_08003244);\n    uVar22 = FUNC_08000168(0,DAT_08003274,(int)uVar22,(int)((ulonglong)uVar22 >> 0x20));\n    FUNC_080004d0((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),DAT_08003248,DAT_0800324c);\n    uVar13 = calculate_float_bits_08000a30();\n    puVar7 = PTR_DAT_08003278;\n    *(undefined4 *)PTR_DAT_0800327c = uVar13;\n    uVar10 = 0;\n    puVar18 = (undefined4 *)puVar7;\n    do {\n      puVar1 = puVar18 + 1;\n      *puVar18 = *puVar1;\n      uVar10 = FUNC_08000adc(uVar10);\n      puVar18 = puVar1;\n    } while ((undefined4 *)(puVar7 + 0x4c) != puVar1);\n    *(undefined4 *)(puVar7 + 0x4c) = uVar13;\n    uVar13 = FUNC_08000adc(uVar10,uVar13);\n    uVar13 = FUNC_08000e54(uVar13,DAT_08003280);\n    *(undefined4 *)PTR_DAT_08003284 = uVar13;\n    iVar12 = extract_bits_08001078();\n    puVar7 = PTR_DAT_0800328c;\n    *(int *)PTR_DAT_08003288 = iVar12 * 100;\n    bVar2 = *puVar7;\n    *puVar5 = 0;\n    *puVar6 = 0;\n    process_i2c_data_and_strings_0800403c(0xee,bVar2 + 0x50,1);\n    uVar13 = thunk_get_value_from_pointer_0800115c();\n    *(undefined4 *)PTR_DAT_08003290 = uVar13;\n  }\n  iVar12 = thunk_get_value_from_pointer_0800115c();\n  puVar6 = PTR_DAT_08003294;\n  if (((10 < (uint)(iVar12 - *(int *)PTR_DAT_08003290)) && (*puVar5 == '\\0')) &&\n     (*PTR_DAT_08003254 == '\\0')) {\n    uVar13 = process_data_and_strings_08003034();\n    puVar7 = PTR_DAT_0800325c;\n    *puVar5 = 1;\n    *(undefined4 *)puVar7 = uVar13;\n    process_i2c_data_and_strings_0800403c(0xee,(byte)*PTR_DAT_0800328c + 0x40,1,0,unaff_r4);\n    uVar13 = thunk_get_value_from_pointer_0800115c();\n    *(undefined4 *)puVar6 = uVar13;\n  }\n  iVar12 = thunk_get_value_from_pointer_0800115c();\n  puVar7 = PTR_DAT_08003254;\n  if (((10 < (uint)(iVar12 - *(int *)puVar6)) && (*puVar5 != '\\0')) && (*PTR_DAT_08003254 == '\\0'))\n  {\n    uVar13 = process_data_and_strings_08003034();\n    *(undefined4 *)PTR_DAT_08003260 = uVar13;\n    *puVar7 = 1;\n  }\n  return;\n}\n\n",
            "called": [
                "thunk_FUN_0800115c",
                "FUN_08004434",
                "FUN_08003034",
                "FUN_08000adc",
                "FUN_080043bc",
                "FUN_08001078",
                "FUN_08000c44",
                "FUN_08004384",
                "FUN_08000a30",
                "FUN_0800403c",
                "FUN_08000168",
                "FUN_08004458",
                "FUN_080043f0",
                "FUN_080004d0",
                "FUN_08005900",
                "FUN_08004a84",
                "FUN_08004410",
                "FUN_08000e54",
                "FUN_08000428",
                "FUN_08004348",
                "FUN_08002f28"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800411c",
            "calling": [
                "FUN_080041ae"
            ],
            "imported": false,
            "current_name": "FUNC_0800411c"
        },
        "FUN_080022d0": {
            "renaming": {
                "FUN_080022d0": "update_data_080022d0",
                "param_1": "data_index",
                "param_2": "data_array",
                "uVar1": "updated_var1",
                "uVar2": "updated_var2",
                "uVar3": "updated_var3"
            },
            "code": "void update_data_080022d0(int data_index, uint *data_array) {\n  uint updated_var1;\n  uint updated_var2;\n  uint updated_var3;\n  \n  updated_var1 = *(uint *)(data_index + 0x20) & 0xfffffeff;\n  updated_var2 = *(uint *)(data_index + 4);\n  updated_var3 = *data_array;\n  updated_var1 = (updated_var1 & 0xfffffdff) | (data_array[2] << 8);\n  if (data_index == DAT_08002320) {\n    updated_var1 = (updated_var1 & 0xfffff7ff) | (data_array[3] << 8);\n    updated_var2 = (updated_var2 & 0xffffcfff) | ((data_array[5] | data_array[6]) << 4);\n  }\n  *(uint *)(data_index + 4) = updated_var2;\n  *(uint *)(data_index + 0x1c) = (*(uint *)(data_index + 0x1c) & 0xffffff8c) | updated_var3;\n  *(uint *)(data_index + 0x3c) = data_array[1];\n  *(uint *)(data_index + 0x20) = updated_var1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080022d0",
            "calling": [
                "FUN_0800245c"
            ],
            "imported": false,
            "current_name": "update_data_080022d0"
        },
        "FUN_080010c4": {
            "renaming": {
                "FUN_080010c4": "decode_uint_080010c4",
                "param_1": "encoded_value",
                "uVar1": "shift_amount",
                "is_valid": "is_valid",
                "is_negative": "is_negative",
                "decoded_value": "decoded_value"
            },
            "code": "uint decode_uint_080010c4(uint encoded_value) {\n  uint decoded_value;\n  bool is_negative = (encoded_value & 0x80000000) != 0;\n  bool is_valid = (encoded_value << 1 < 0x7f000000);\n  if (is_negative || !is_valid) {\n    return 0;\n  }\n  uint shift_amount = 0x1e - ((encoded_value << 1) >> 0x18);\n  if (shift_amount >= 0) {\n    decoded_value = (encoded_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n    return decoded_value;\n  }\n  else if (shift_amount == 0xffffff9f && (encoded_value & 0x7fffff) != 0) {\n    return 0;\n  }\n  else {\n    return 0xffffffff;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080010c4",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "decode_uint_080010c4"
        },
        "FUN_080040b8": {
            "renaming": {
                "FUN_080040b8": "process_data_and_strings_if_valid_080040b8",
                "param_1": "data",
                "param_2": "string",
                "param_3": "constant_one",
                "param_4": "constant_two",
                "param_5": "data_to_process",
                "param_6": "string_to_process",
                "iVar1": "result"
            },
            "code": "void process_data_and_strings_if_valid_080040b8(int data, int string){\n\tint result = call_function_with_params(PTR_DAT_080040e4, data, string, 1, string, data, 200, data);\n\tif(result != 0){\n\t\tprocess_data_and_strings_08004490(data, string);\n\t}\n}",
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040b8",
            "calling": [
                "FUN_08003034"
            ],
            "imported": false,
            "current_name": "process_data_and_strings_if_valid_080040b8"
        },
        "FUN_0800245c": {
            "renaming": {
                "FUN_0800245c": "update_data_0800245c",
                "param_1": "data",
                "param_2": "update_type",
                "param_3": "update_value",
                "extraout_r1": "index",
                "extraout_r1_00": "index_0",
                "extraout_r1_01": "index_1",
                "extraout_r1_02": "index_2",
                "iVar1": "value_1",
                "uVar2": "value_2",
                "iVar3": "data_0"
            },
            "code": "void update_data_0800245c(int *data, uint update_type, uint update_value)\n{\n  int index = data[14];\n  if (*(char *)(data + 14) == 1)\n    return;\n  data[57] = 2;\n  data[14] = 1;\n  switch(update_type)\n  {\n    case 0:\n      update_data_0800245c_08002280(data[0]);\n      data[24] = (data[24] | 8) & 0xfffffffb | *(uint *)(index + 16);\n      break;\n    case 4:\n      update_values_08002404(data[0]);\n      data[24] = (data[24] | 2048) & 0xfffffbff | *(int *)(index + 16) << 8;\n      break;\n    case 8:\n      update_data_0800245c_080022d0(data[0]);\n      data[28] = (data[28] | 8) & 0xfffffffb | *(uint *)(index + 16);\n      goto LAB_080024fa;\n    case 12:\n      set_flags_and_values_08002324(data[0]);\n      data[28] = (data[28] | 2048) & 0xfffffbff | *(int *)(index + 16) << 8;\nLAB_080024fa:\n      data[28] |= *(uint *)(index + 16);\n      break;\n  }\n  data[24] |= *(uint *)(index + 16);\n  data[57] = 1;\n  data[14] = 0;\n}\n",
            "called": [
                "FUN_08002324",
                "FUN_080022d0",
                "FUN_08002280",
                "FUN_08002404"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800245c",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "update_data_0800245c"
        },
        "FUN_08004490": {
            "renaming": {
                "FUN_08004490": "process_data_and_strings_08004490",
                "param_1": "input_string",
                "param_2": "reversed_string",
                "uVar1": "flags",
                "puVar2": "line_str",
                "puVar3": "error_str",
                "DAT_08004508": "flags",
                "PTR_s_Error_with_08004510": "error_str",
                "PTR_s__at_line__0800450c": "line_str",
                "OFFSET_1": "0x4000",
                "OFFSET_2": "0x8000",
                "OFFSET_3": "0x2000"
            },
            "code": "void process_data_and_strings_08004490(undefined4 input_string, undefined4 reversed_string) {\n  undefined4 DAT_08004508 = DAT_08004508;\n  undefined4 OFFSET_1 = 0x4000;\n  undefined4 OFFSET_2 = 0x8000;\n  undefined4 OFFSET_3 = 0x2000;\n  undefined *PTR_s_Error_with_08004510 = PTR_s_Error_with_08004510;\n  undefined *PTR_s__at_line__0800450c = PTR_s__at_line__0800450c;\n  do {\n    bitwise_xor_0800142e(DAT_08004508, OFFSET_1);\n    bitwise_xor_0800142e(DAT_08004508, OFFSET_2);\n    bitwise_xor_0800142e(DAT_08004508, OFFSET_3);\n    process_string_data_08004c8c(PTR_s_Error_with_08004510);\n    process_string_data_08004c8c(input_string);\n    process_string_data_08004c8c(PTR_s__at_line__0800450c);\n    reverse_and_process_string_08004cac(reversed_string);\n    process_data_08004c18(10);\n    thunk_do_nothing_08001168(500);\n  } while (true);\n}",
            "called": [
                "FUN_08001424",
                "FUN_0800142e",
                "thunk_FUN_08001168",
                "FUN_08004c18",
                "FUN_08004cac",
                "FUN_08004c8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004490",
            "calling": [
                "FUN_0800403c",
                "FUN_080040b8",
                "FUN_0800458c",
                "FUN_0800407c",
                "FUN_08004514"
            ],
            "imported": false,
            "current_name": "process_data_and_strings_08004490"
        },
        "FUN_08000e54": {
            "renaming": {
                "FUN_08000e54": "FUNC_08000e54"
            },
            "code": "\nuint FUNC_08000e54(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_08000e4a:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_08000e6c;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_08000e6c:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000e54",
            "calling": [
                "FUN_0800411c",
                "FUN_08002f28",
                "FUN_08003330",
                "FUN_0800483c"
            ],
            "imported": false,
            "current_name": "FUNC_08000e54"
        },
        "FUN_080015e8": {
            "renaming": {
                "FUN_080015e8": "check_and_update_080015e8",
                "param_1": "ptr_param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "val1",
                "puVar3": "ptr_val2",
                "ppuVar4": "ptr_param1",
                "uVar5": "val3",
                "uVar6": "val4",
                "iVar2": "val6"
            },
            "code": "int check_and_update_080015e8(uint **ptr_param1, uint param2, uint param3, int param4, uint param5) {\n  int val1 = get_value_from_pointer_0800115c();\n  uint *ptr_val2 = *ptr_param1;\n  ptr_val2[0] = ptr_val2[0] | 0x400;\n  ptr_val2[0] = ptr_val2[0] | 0x100;\n  uint val3 = param2;\n  uint val4 = param3;\n  while (-1 < (int)(ptr_val2[5] << 0x1f)) {\n    if (param5 != 0xffffffff) {\n      if (param5 < (uint)(get_value_from_pointer_0800115c() - val1)) {\n        *(undefined *)((int)ptr_param1 + 0x35) = 0x20;\n        *(undefined *)(ptr_param1 + 0xd) = 0;\n        return 3;\n      }\n    }\n    else {\n      goto LAB_0800160e;\n    }\n  }\n  ptr_val2[4] = param2 & 0xfe;\n  int val5 = check_value_08001460(ptr_param1, DAT_080016f0, param5, ptr_val2, ptr_param1, val3, val4);\n  if (val5 != 0) {\n    goto LAB_080016ba;\n  }\n  val5 = check_feature_disabled_080014e2(ptr_param1, param5, (*ptr_param1)[5], (*ptr_param1)[6]);\n  if (val5 == 0) {\n    ptr_val2 = *ptr_param1;\n    if (param4 != 1) {\n      ptr_val2[4] = param3 >> 8;\n      val5 = check_feature_disabled_080014e2(ptr_param1, param5);\n      if (val5 != 0) {\n        goto LAB_08001642;\n      }\n      ptr_val2 = *ptr_param1;\n    }\n    ptr_val2[4] = param3 & 0xff;\n    val5 = check_feature_disabled_080014e2(ptr_param1, param5);\n    if (val5 == 0) {\n      **ptr_param1 = **ptr_param1 | 0x100;\n      int val6 = get_value_from_pointer_0800115c();\n      do {\n        do {\n          if ((int)((*ptr_param1)[5] << 0x1f) < 0) {\n            (*ptr_param1)[4] = param2 & 0xff | 1;\n            val5 = check_value_08001460(ptr_param1, DAT_080016f0, param5);\n            if (val5 == 0) {\n              return 0;\n            }\n            goto LAB_080016ba;\n          }\n        } while (param5 != 0xffffffff && param5 >= (uint)(get_value_from_pointer_0800115c() - val6));\n        goto LAB_0800160e;\n      } while(1);\n    }\n  }\nLAB_08001642:\n  if (ptr_param1[0xe] == (uint *)0x4) {\n    **ptr_param1 = **ptr_param1 | 0x200;\n    return 1;\n  }\n  return 3;\n\nLAB_0800160e:\n  ptr_val2 = *ptr_param1;\n  ptr_val2[4] = param2 & 0xff | 1;\n  val5 = check_value_08001460(ptr_param1, DAT_080016f0, param5);\n  if (val5 == 0) {\n    return 0;\n  }\n  goto LAB_080016ba;\n\nLAB_080016ba:\n  if (ptr_param1[0xe] != (uint *)0x4) {\n    return 3;\n  }\n  return 1;\n}\n",
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015e8",
            "calling": [
                "FUN_08001938"
            ],
            "imported": false,
            "current_name": "check_and_update_080015e8"
        },
        "FUN_08004e14": {
            "renaming": {
                "FUN_08004e14": "calculate_flags_08004e14",
                "param_1": "flag_value",
                "param_2": "constant1",
                "param_3": "constant2",
                "uVar1": "constant3",
                "iVar2": "flag",
                "local_18": "constant3",
                "local_14": "constant5",
                "uStack_10": "flag_value2",
                "local_c": "constant4",
                "DAT_08004e6c": "constant1",
                "DAT_08004e68": "flag_constant1",
                "DAT_08004e74": "constant2",
                "DAT_08004e70": "flag_constant2",
                "DAT_08004e78": "flag_constant3"
            },
            "code": "void calculate_flags_08004e14(int* flag_value, undefined4 DAT_08004e6c, undefined4 DAT_08004e74)\n{\n    undefined4 constant3;\n    int flag = *flag_value;\n    if (flag == DAT_08004e68)\n    {\n        constant3 = 0x800;\n    }\n    else if (flag == 0x40000000)\n    {\n        constant3 = 2;\n    }\n    else\n    {\n        if (flag != DAT_08004e70)\n        {\n            return;\n        }\n        constant3 = 3;\n    }\n    undefined4 constant4 = 2;\n    undefined4 constant5 = 2;\n    undefined4 flag_value2 = DAT_08004e74;\n    calculate_flags_08004e14_08001264(DAT_08004e74, &constant3);\n}",
            "called": [
                "FUN_08001264"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e14",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "calculate_flags_08004e14"
        }
    },
    "used_tokens": 150787,
    "layers": [
        [
            "FUN_08003320",
            "FUN_08001264",
            "FUN_080070b0",
            "FUN_08001424",
            "FUN_080006ac",
            "FUN_08004c64",
            "FUN_08007092",
            "FUN_08005630",
            "FUN_08002368",
            "FUN_08002520",
            "FUN_08002008",
            "FUN_08002404",
            "FUN_08001436",
            "FUN_08000904",
            "FUN_0800114c",
            "FUN_080052e4",
            "FUN_0800142e",
            "FUN_08004d8c",
            "FUN_08002250",
            "FUN_080011fc",
            "FUN_08003068",
            "FUN_08005646",
            "FUN_08000110",
            "FUN_0800709e",
            "FUN_08002ec0",
            "FUN_08006c0c",
            "FUN_0800115c",
            "FUN_08000c44",
            "FUN_08000a04",
            "FUN_08001170",
            "FUN_08002ed4",
            "FUN_08000f9c",
            "FUN_08000c3c",
            "FUN_08001214",
            "FUN_08003fc4",
            "FUN_08000404",
            "FUN_08006070",
            "thunk_FUN_08006070",
            "FUN_08003fd0",
            "FUN_08000892",
            "FUN_08000134",
            "FUN_08003eb0",
            "thunk_FUN_0800115c",
            "FUN_080072b8",
            "FUN_080072ac",
            "FUN_08002280",
            "FUN_08001194",
            "FUN_08002324",
            "FUN_08001078",
            "FUN_08002564",
            "FUN_08003ec8",
            "FUN_08003fe8",
            "FUN_08004fb4",
            "FUN_08000428",
            "FUN_08000a30",
            "FUN_08003fdc",
            "FUN_08004f10",
            "FUN_08001240",
            "FUN_08005840",
            "FUN_08000150",
            "FUN_08002214",
            "FUN_0800567c",
            "FUN_080025a4",
            "FUN_08002220",
            "FUN_08003314",
            "FUN_080071c0",
            "FUN_08005614",
            "FUN_080070a4",
            "FUN_080022d0",
            "FUN_080010c4"
        ],
        [
            "FUN_08004a30",
            "FUN_08004c70",
            "FUN_080014e2",
            "FUN_08000990",
            "FUN_0800426c",
            "FUN_08002538",
            "FUN_080025e8",
            "FUN_08004c18",
            "FUN_08001460",
            "FUN_08001104",
            "FUN_0800581c",
            "FUN_08004d48",
            "FUN_08004ccc",
            "FUN_080023d0",
            "FUN_08004c30",
            "FUN_08003f3c",
            "FUN_08001004",
            "FUN_080041c4",
            "FUN_080016f4",
            "FUN_08004e7c",
            "FUN_0800245c",
            "FUN_08004e14"
        ],
        [
            "FUN_08001028",
            "FUN_0800290c",
            "FUN_080009a0",
            "FUN_08000980",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_0800209c",
            "FUN_08004c8c",
            "FUN_08001754",
            "FUN_08002724",
            "FUN_08005714",
            "FUN_08003ff4",
            "FUN_08001128",
            "FUN_08000ffc",
            "FUN_08001530",
            "FUN_08001014",
            "FUN_080015e8"
        ],
        [
            "FUN_08001828",
            "FUN_08004300",
            "FUN_08004028",
            "FUN_08005bc8",
            "FUN_0800299a",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_080009f0",
            "FUN_080057d0"
        ],
        [
            "FUN_08004410",
            "FUN_08004384",
            "FUN_08004434",
            "FUN_080043bc",
            "FUN_0800483c",
            "FUN_08004458",
            "FUN_08002ee8",
            "FUN_08004348",
            "FUN_080043f0",
            "FUN_08005044",
            "FUN_08005854"
        ],
        [
            "FUN_080050fc",
            "FUN_08004a84"
        ],
        [
            "FUN_08004ffc"
        ],
        [
            "FUN_08004cac"
        ],
        [
            "FUN_08004490"
        ],
        [
            "FUN_0800403c",
            "FUN_08004514",
            "FUN_0800407c",
            "FUN_080040b8"
        ],
        [
            "FUN_080040e8",
            "FUN_08002ad0",
            "FUN_08003034"
        ],
        [
            "FUN_08003298",
            "FUN_08002d88",
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0"
        ],
        [
            "FUN_08002ea0",
            "FUN_08002f28"
        ],
        [
            "FUN_08004194"
        ],
        [
            "FUN_080041ae"
        ],
        [
            "FUN_08004f68"
        ]
    ],
    "locked_functions": []
}