{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_data_if_needed_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeDataIfNeeded_08000110(undefined4 inputData)\n\n{\n  if ((char)DAT_20000228 == '\\0') {\n    DAT_20000228._0_1_ = '\\x01';\n  }\n  return inputData;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_data_if_needed_08000110",
                "param_1": "inputData"
            },
            "calling": [],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_32bit_to_64bit_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_32bit_to_64bit_08000134(undefined4 lower_32bit_value,undefined4 higher_32bit_value)\n\n{\n  return CONCAT44(higher_32bit_value,lower_32bit_value);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_32bit_to_64bit_08000134",
                "param_1": "lower_32bit_value",
                "param_2": "higher_32bit_value"
            },
            "calling": [
                "FUN_08004fb4"
            ],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000150": {
            "entrypoint": "0x08000150",
            "current_name": "find_end_of_string_08000150",
            "code": "\nchar * find_end_of_string_08000150(char *string)\n\n{\n  char current_character;\n  char *next_position;\n  char *current_position;\n  \n  current_position = string;\n  do {\n    next_position = current_position + 1;\n    current_character = *current_position;\n    current_position = next_position;\n  } while (current_character != '\\0');\n  return next_position + (-1 - (int)string);\n}\n\n",
            "renaming": {
                "FUN_08000150": "find_end_of_string_08000150",
                "param_1": "string",
                "pcVar3": "current_position",
                "pcVar2": "next_position",
                "cVar1": "current_character"
            },
            "calling": [
                "FUN_08004c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000168": {
            "entrypoint": "0x08000168",
            "current_name": "reverse_calculate_08000168",
            "code": "\nulonglong reverseCalculate_08000168(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int temp1;\n  byte temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  bool tempBool1;\n  bool tempBool2;\n  bool tempBool3;\n  \n  temp6 = input4 ^ 0x80000000;\n  temp9 = input2 << 1;\n  input4 = input4 << 1;\n  tempBool1 = ((input2 ^ temp6) & 0x7fffffff) == 0;\n  tempBool2 = tempBool1 && input1 == input3;\n  if (!tempBool1 || input1 != input3) {\n    tempBool2 = (temp9 | input1) == 0;\n  }\n  if (!tempBool2) {\n    tempBool2 = (input4 | input3) == 0;\n  }\n  temp8 = (int)temp9 >> 0x15;\n  if (!tempBool2) {\n    tempBool2 = temp8 == -1;\n  }\n  temp1 = (int)input4 >> 0x15;\n  if (!tempBool2) {\n    tempBool2 = temp1 == -1;\n  }\n  if (tempBool2) {\n    if (temp8 == -1 || temp1 == -1) {\n      temp9 = temp6;\n      temp11 = input3;\n      if (temp8 == -1) {\n        temp9 = input2;\n        temp11 = input1;\n      }\n      if (temp8 != -1 || temp1 != -1) {\n        input3 = temp11;\n        temp6 = temp9;\n      }\n      tempBool2 = (temp11 | temp9 << 0xc) == 0;\n      if (tempBool2) {\n        tempBool2 = (input3 | temp6 << 0xc) == 0;\n      }\n      if (tempBool2) {\n        tempBool2 = temp9 == temp6;\n      }\n      if (!tempBool2) {\n        temp9 = temp9 | 0x80000;\n      }\n      return CONCAT44(temp9,temp11);\n    }\n    if (((input2 ^ temp6) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((temp9 | input1) == 0) {\n        input1 = input3;\n        input2 = temp6;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp6) {\n      return 0;\n    }\n    if (temp9 >> 0x15 == 0) {\n      tempBool2 = (input1 & 0x80000000) != 0;\n      temp6 = input2 * 2 + (uint)tempBool2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)tempBool2)) {\n        temp6 = temp6 | 0x80000000;\n      }\n      return CONCAT44(temp6,input1 << 1);\n    }\n    if (temp9 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  temp9 = temp9 >> 0x15;\n  input4 = input4 >> 0x15;\n  temp11 = input4 - temp9;\n  tempBool2 = temp11 != 0;\n  if (input4 < temp9) {\n    temp11 = -temp11;\n  }\n  temp10 = input1;\n  temp7 = input2;\n  if (tempBool2 && temp9 <= input4) {\n    temp9 = temp9 + temp11;\n    temp10 = input3;\n    temp7 = temp6;\n    input3 = input1;\n    temp6 = input2;\n  }\n  if (0x36 < temp11) {\n    return CONCAT44(temp7,temp10);\n  }\n  temp4 = temp7 & 0xfffff | 0x100000;\n  if ((temp7 & 0x80000000) != 0) {\n    tempBool2 = temp10 != 0;\n    temp10 = -temp10;\n    temp4 = -temp4 - (uint)tempBool2;\n  }\n  temp7 = temp6 & 0xfffff | 0x100000;\n  if ((temp6 & 0x80000000) != 0) {\n    tempBool2 = input3 != 0;\n    input3 = -input3;\n    temp7 = -temp7 - (uint)tempBool2;\n  }\n  if (temp9 == temp11) {\n    temp7 = temp7 ^ 0x100000;\n    if (temp9 == 0) {\n      temp4 = temp4 ^ 0x100000;\n      temp9 = 1;\n    }\n    else {\n      temp11 = temp11 - 1;\n    }\n  }\n  temp6 = -temp11 + 0x20;\n  if ((int)temp11 < 0x21) {\n    temp12 = input3 << (temp6 & 0xff);\n    input3 = input3 >> (temp11 & 0xff);\n    temp3 = temp10 + input3;\n    temp5 = temp7 << (temp6 & 0xff);\n    temp6 = temp3 + temp5;\n    temp4 = temp4 + CARRY4(temp10,input3) + ((int)temp7 >> (temp11 & 0xff)) +\n            (uint)CARRY4(temp3,temp5);\n  }\n  else {\n    temp12 = temp7 << (-temp11 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp12 = temp12 | 2;\n    }\n    temp7 = (int)temp7 >> (temp11 - 0x20 & 0xff);\n    temp6 = temp10 + temp7;\n    temp4 = temp4 + ((int)temp7 >> 0x1f) + (uint)CARRY4(temp10,temp7);\n  }\n  input2 = temp4 & 0x80000000;\n  temp11 = temp4;\n  if ((int)temp4 < 0) {\n    tempBool2 = temp12 == 0;\n    temp12 = -temp12;\n    temp11 = -temp6;\n    temp6 = -(uint)!tempBool2 - temp6;\n    temp11 = -(uint)(tempBool2 <= temp11) - temp4;\n  }\n  if (0xfffff < temp11) {\n    temp10 = temp9 - 1;\n    if (0x1fffff < temp11) {\n      temp10 = temp11 & 1;\n      temp11 = temp11 >> 1;\n      temp2 = (byte)temp6;\n      temp6 = (uint)(temp10 != 0) << 0x1f | temp6 >> 1;\n      temp12 = (uint)(temp2 & 1) << 0x1f | temp12 >> 1;\n      temp10 = temp9;\n      if (0xffbfffff < temp9 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    tempBool2 = 0x7fffffff < temp12;\n    if (temp12 == 0x80000000) {\n      tempBool2 = (temp6 & 1) != 0;\n    }\n    return CONCAT44(temp11 + temp10 * 0x100000 + (uint)CARRY4(temp6,(uint)tempBool2) | input2,\n                    temp6 + tempBool2);\n  }\n  tempBool1 = (temp12 & 0x80000000) != 0;\n  temp12 = temp12 << 1;\n  temp10 = temp6 * 2;\n  tempBool2 = CARRY4(temp6,temp6);\n  temp6 = temp6 * 2 + (uint)tempBool1;\n  temp11 = temp11 * 2 + (uint)(tempBool2 || CARRY4(temp10,(uint)tempBool1));\n  temp10 = temp9 - 2;\n  if ((temp11 & 0x100000) != 0) goto LAB_08000278;\n  temp7 = temp6;\n  temp9 = temp11;\n  if (temp11 == 0) {\n    temp7 = 0;\n    temp9 = temp6;\n  }\n  temp8 = LZCOUNT(temp9);\n  if (temp11 == 0) {\n    temp8 = temp8 + 0x20;\n  }\n  temp11 = temp8 - 0xb;\n  tempBool3 = SBORROW4(temp11,0x20);\n  temp6 = temp8 - 0x2b;\n  tempBool2 = (int)temp6 < 0;\n  tempBool1 = temp6 == 0;\n  if ((int)temp11 < 0x20) {\n    tempBool3 = SCARRY4(temp6,0xc);\n    temp8 = temp8 + -0x1f;\n    tempBool2 = temp8 < 0;\n    tempBool1 = temp8 == 0;\n    temp6 = temp11;\n    if (!tempBool1 && tempBool2 == tempBool3) {\n      temp7 = temp9 << (temp11 & 0xff);\n      temp9 = temp9 >> (0xcU - temp8 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (tempBool1 || tempBool2 != tempBool3) {\n    temp12 = 0x20 - temp6;\n  }\n  temp9 = temp9 << (temp6 & 0xff);\n  if (tempBool1 || tempBool2 != tempBool3) {\n    temp9 = temp9 | temp7 >> (temp12 & 0xff);\n  }\n  if (tempBool1 || tempBool2 != tempBool3) {\n    temp7 = temp7 << (temp6 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp11 <= (int)temp10) {\n    return CONCAT44(temp9 + (temp10 - temp11) * 0x100000 | input2,temp7);\n  }\n  temp6 = ~(temp10 - temp11);\n  if ((int)temp6 < 0x1f) {\n    temp8 = temp6 - 0x13;\n    if (temp8 != 0 && temp8 < 0 == SCARRY4(temp6 - 0x1f,0xc)) {\n      return CONCAT44(temp4,temp7 >> (0x20 - (0xcU - temp8) & 0xff) | temp9 << (0xcU - temp8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp6 = temp6 + 1;\n    return CONCAT44(input2 | temp9 >> (temp6 & 0xff),\n                    temp7 >> (temp6 & 0xff) | temp9 << (0x20 - temp6 & 0xff));\n  }\n  return CONCAT44(temp4,temp9 >> (temp6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000168": "reverse_calculate_08000168",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "temp1",
                "bVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "uVar10": "temp10",
                "uVar11": "temp11",
                "uVar12": "temp12",
                "bVar13": "tempBool1",
                "bVar14": "tempBool2",
                "bVar15": "tempBool3"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_080070b0",
                "FUN_08006c0c",
                "FUN_0800411c",
                "FUN_08006228",
                "FUN_08006070"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800016c": {
            "entrypoint": "0x0800016c",
            "current_name": "perform_unsigned_division_0800016c",
            "code": "\nulonglong performUnsignedDivision_0800016c(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  int quotientShift;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int remainderShift;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  uint temp9;\n  bool isZero;\n  bool isNegative;\n  bool isCarry;\n  \n  temp4 = divisor << 1;\n  temp6 = remainder << 1;\n  isZero = ((divisor ^ remainder) & 0x7fffffff) == 0;\n  isNegative = isZero && dividend == quotient;\n  if (!isZero || dividend != quotient) {\n    isNegative = (temp4 | dividend) == 0;\n  }\n  if (!isNegative) {\n    isNegative = (temp6 | quotient) == 0;\n  }\n  remainderShift = (int)temp4 >> 0x15;\n  if (!isNegative) {\n    isNegative = remainderShift == -1;\n  }\n  quotientShift = (int)temp6 >> 0x15;\n  if (!isNegative) {\n    isNegative = quotientShift == -1;\n  }\n  if (isNegative) {\n    if (remainderShift == -1 || quotientShift == -1) {\n      temp6 = remainder;\n      temp4 = quotient;\n      if (remainderShift == -1) {\n        temp6 = divisor;\n        temp4 = dividend;\n      }\n      if (remainderShift != -1 || quotientShift != -1) {\n        quotient = temp4;\n        remainder = temp6;\n      }\n      isNegative = (temp4 | temp6 << 0xc) == 0;\n      if (isNegative) {\n        isNegative = (quotient | remainder << 0xc) == 0;\n      }\n      if (isNegative) {\n        isNegative = temp6 == remainder;\n      }\n      if (!isNegative) {\n        temp6 = temp6 | 0x80000;\n      }\n      return CONCAT44(temp6,temp4);\n    }\n    if (((divisor ^ remainder) & 0x7fffffff) != 0 || dividend != quotient) {\n      if ((temp4 | dividend) == 0) {\n        dividend = quotient;\n        divisor = remainder;\n      }\n      return CONCAT44(divisor,dividend);\n    }\n    if (divisor != remainder) {\n      return 0;\n    }\n    if (temp4 >> 0x15 == 0) {\n      isNegative = (dividend & 0x80000000) != 0;\n      temp6 = divisor * 2 + (uint)isNegative;\n      if (CARRY4(divisor,divisor) || CARRY4(divisor * 2,(uint)isNegative)) {\n        temp6 = temp6 | 0x80000000;\n      }\n      return CONCAT44(temp6,dividend << 1);\n    }\n    if (temp4 < 0xffc00000) {\n      return CONCAT44(divisor + 0x100000,dividend);\n    }\n    divisor = divisor & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(divisor | 0x7ff00000) << 0x20;\n  }\n  temp4 = temp4 >> 0x15;\n  temp6 = temp6 >> 0x15;\n  temp7 = temp6 - temp4;\n  isNegative = temp7 != 0;\n  if (temp6 < temp4) {\n    temp7 = -temp7;\n  }\n  temp5 = dividend;\n  temp3 = divisor;\n  if (isNegative && temp4 <= temp6) {\n    temp4 = temp4 + temp7;\n    temp5 = quotient;\n    temp3 = remainder;\n    quotient = dividend;\n    remainder = divisor;\n  }\n  if (0x36 < temp7) {\n    return CONCAT44(temp3,temp5);\n  }\n  temp6 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    isNegative = temp5 != 0;\n    temp5 = -temp5;\n    temp6 = -temp6 - (uint)isNegative;\n  }\n  temp3 = remainder & 0xfffff | 0x100000;\n  if ((remainder & 0x80000000) != 0) {\n    isNegative = quotient != 0;\n    quotient = -quotient;\n    temp3 = -temp3 - (uint)isNegative;\n  }\n  if (temp4 == temp7) {\n    temp3 = temp3 ^ 0x100000;\n    if (temp4 == 0) {\n      temp6 = temp6 ^ 0x100000;\n      temp4 = 1;\n    }\n    else {\n      temp7 = temp7 - 1;\n    }\n  }\n  temp9 = -temp7 + 0x20;\n  if ((int)temp7 < 0x21) {\n    temp8 = quotient << (temp9 & 0xff);\n    quotient = quotient >> (temp7 & 0xff);\n    temp1 = temp5 + quotient;\n    temp2 = temp3 << (temp9 & 0xff);\n    temp9 = temp1 + temp2;\n    temp6 = temp6 + CARRY4(temp5,quotient) + ((int)temp3 >> (temp7 & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    temp8 = temp3 << (-temp7 + 0x40 & 0xff);\n    if (quotient != 0) {\n      temp8 = temp8 | 2;\n    }\n    temp3 = (int)temp3 >> (temp7 - 0x20 & 0xff);\n    temp9 = temp5 + temp3;\n    temp6 = temp6 + ((int)temp3 >> 0x1f) + (uint)CARRY4(temp5,temp3);\n  }\n  divisor = temp6 & 0x80000000;\n  temp7 = temp6;\n  if ((int)temp6 < 0) {\n    isNegative = temp8 == 0;\n    temp8 = -temp8;\n    temp7 = -temp9;\n    temp9 = -(uint)!isNegative - temp9;\n    temp7 = -(uint)(isNegative <= temp7) - temp6;\n  }\n  if (0xfffff < temp7) {\n    temp5 = temp4 - 1;\n    if (0x1fffff < temp7) {\n      temp6 = temp7 & 1;\n      temp7 = temp7 >> 1;\n      carry = (byte)temp9;\n      temp9 = (uint)(temp6 != 0) << 0x1f | temp9 >> 1;\n      temp8 = (uint)(carry & 1) << 0x1f | temp8 >> 1;\n      temp5 = temp4;\n      if (0xffbfffff < temp4 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    isNegative = 0x7fffffff < temp8;\n    if (temp8 == 0x80000000) {\n      isNegative = (temp9 & 1) != 0;\n    }\n    return CONCAT44(temp7 + temp5 * 0x100000 + (uint)CARRY4(temp9,(uint)isNegative) | divisor,\n                    temp9 + isNegative);\n  }\n  isZero = (temp8 & 0x80000000) != 0;\n  temp8 = temp8 << 1;\n  temp5 = temp9 * 2;\n  isNegative = CARRY4(temp9,temp9);\n  temp9 = temp9 * 2 + (uint)isZero;\n  temp7 = temp7 * 2 + (uint)(isNegative || CARRY4(temp5,(uint)isZero));\n  temp5 = temp4 - 2;\n  if ((temp7 & 0x100000) != 0) goto LAB_08000278;\n  temp3 = temp9;\n  temp4 = temp7;\n  if (temp7 == 0) {\n    temp3 = 0;\n    temp4 = temp9;\n  }\n  remainderShift = LZCOUNT(temp4);\n  if (temp7 == 0) {\n    remainderShift = remainderShift + 0x20;\n  }\n  temp9 = remainderShift - 0xb;\n  isCarry = SBORROW4(temp9,0x20);\n  temp7 = remainderShift - 0x2b;\n  isNegative = (int)temp7 < 0;\n  isZero = temp7 == 0;\n  if ((int)temp9 < 0x20) {\n    isCarry = SCARRY4(temp7,0xc);\n    remainderShift = remainderShift + -0x1f;\n    isNegative = remainderShift < 0;\n    isZero = remainderShift == 0;\n    temp7 = temp9;\n    if (!isZero && isNegative == isCarry) {\n      temp3 = temp4 << (temp9 & 0xff);\n      temp4 = temp4 >> (0xcU - remainderShift & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isZero || isNegative != isCarry) {\n    temp8 = 0x20 - temp7;\n  }\n  temp4 = temp4 << (temp7 & 0xff);\n  if (isZero || isNegative != isCarry) {\n    temp4 = temp4 | temp3 >> (temp8 & 0xff);\n  }\n  if (isZero || isNegative != isCarry) {\n    temp3 = temp3 << (temp7 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp9 <= (int)temp5) {\n    return CONCAT44(temp4 + (temp5 - temp9) * 0x100000 | divisor,temp3);\n  }\n  temp7 = ~(temp5 - temp9);\n  if ((int)temp7 < 0x1f) {\n    remainderShift = temp7 - 0x13;\n    if (remainderShift != 0 && remainderShift < 0 == SCARRY4(temp7 - 0x1f,0xc)) {\n      return CONCAT44(temp6,temp3 >> (0x20 - (0xcU - remainderShift) & 0xff) | temp4 << (0xcU - remainderShift & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp7 = temp7 + 1;\n    return CONCAT44(divisor | temp4 >> (temp7 & 0xff),\n                    temp3 >> (temp7 & 0xff) | temp4 << (0x20 - temp7 & 0xff));\n  }\n  return CONCAT44(temp6,temp4 >> (temp7 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800016c": "perform_unsigned_division_0800016c",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "iVar1": "quotientShift",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "remainderShift",
                "uVar7": "temp4",
                "uVar8": "temp5",
                "uVar9": "temp6",
                "uVar10": "temp7",
                "uVar11": "temp8",
                "uVar12": "temp9",
                "bVar13": "isZero",
                "bVar14": "isNegative",
                "bVar15": "isCarry"
            },
            "calling": [
                "FUN_080071c0",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_080070b0",
                "FUN_08006c0c",
                "FUN_08006228",
                "FUN_08006070"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000404": {
            "entrypoint": "0x08000404",
            "current_name": "shift_and_combine_08000404",
            "code": "\nulonglong shiftAndCombine_08000404(uint input)\n\n{\n  uint bitCount;\n  uint absInput;\n  uint shiftAmount;\n  int leadingZeros;\n  uint shiftedCount;\n  uint signBit;\n  uint remainingBits;\n  bool isNegative;\n  bool isZero;\n  bool carryFlag;\n  \n  if (input == 0) {\n    return 0;\n  }\n  signBit = input & 0x80000000;\n  absInput = input;\n  if ((int)signBit < 0) {\n    absInput = -input;\n  }\n  bitCount = 0;\n  leadingZeros = LZCOUNT(absInput);\n  shiftedCount = leadingZeros + 0x15;\n  carryFlag = SBORROW4(shiftedCount,0x20);\n  shiftAmount = leadingZeros - 0xb;\n  isNegative = (int)shiftAmount < 0;\n  isZero = shiftAmount == 0;\n  if (shiftedCount < 0x20) {\n    carryFlag = SCARRY4(shiftAmount,0xc);\n    isNegative = false;\n    isZero = leadingZeros + 1 == 0;\n    shiftAmount = shiftedCount;\n    if (!isZero && carryFlag == false) {\n      bitCount = absInput << shiftedCount;\n      absInput = absInput >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isZero || isNegative != carryFlag) {\n    remainingBits = 0x20 - shiftAmount;\n  }\n  absInput = absInput << (shiftAmount & 0xff);\n  if (isZero || isNegative != carryFlag) {\n    absInput = absInput | 0U >> (remainingBits & 0xff);\n  }\n  if (isZero || isNegative != carryFlag) {\n    bitCount = 0 << (shiftAmount & 0xff);\n  }\nLAB_080002f0:\n  if (shiftedCount < 0x433) {\n    return CONCAT44(absInput + (0x432 - shiftedCount) * 0x100000 | signBit,bitCount);\n  }\n  shiftAmount = ~(0x432 - shiftedCount);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(input,absInput >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeros = shiftAmount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(signBit | absInput >> (shiftAmount & 0xff),\n                    bitCount >> (shiftAmount & 0xff) | absInput << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(input,bitCount >> (0x20 - (0xcU - leadingZeros) & 0xff) | absInput << (0xcU - leadingZeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000404": "shift_and_combine_08000404",
                "param_1": "input",
                "uVar1": "bitCount",
                "uVar2": "absInput",
                "uVar3": "shiftAmount",
                "iVar4": "leadingZeros",
                "uVar5": "shiftedCount",
                "uVar6": "signBit",
                "in_r12": "remainingBits",
                "bVar7": "isNegative",
                "bVar8": "isZero",
                "bVar9": "carryFlag"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000428": {
            "entrypoint": "0x08000428",
            "current_name": "bitwise_operations_08000428",
            "code": "\nulonglong bitwiseOperations_08000428(uint input,undefined4 value1,undefined4 value2,uint mask)\n\n{\n  uint highBitMask;\n  uint temp1;\n  uint result;\n  uint shiftedValue;\n  uint temp2;\n  int count;\n  uint shiftValue;\n  uint remainingBits;\n  bool isShiftLessThan32;\n  bool isParam4EqualToMask;\n  bool isShiftMoreThan12;\n  \n  temp2 = input << 1;\n  isParam4EqualToMask = temp2 == 0;\n  highBitMask = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shiftedValue = (uint)((int)temp2 >> 3) >> 1;\n  result = highBitMask | shiftedValue;\n  input = input << 0x1d;\n  if (!isParam4EqualToMask) {\n    mask = temp2 & 0xff000000;\n    isParam4EqualToMask = mask == 0;\n  }\n  if (!isParam4EqualToMask) {\n    isParam4EqualToMask = mask == 0xff000000;\n  }\n  if (!isParam4EqualToMask) {\n    return CONCAT44(result,input) ^ 0x3800000000000000;\n  }\n  if (temp2 == 0 || mask == 0xff000000) {\n    return CONCAT44(result,input);\n  }\n  temp1 = input;\n  temp2 = shiftedValue;\n  if (shiftedValue == 0) {\n    temp1 = 0;\n    temp2 = input;\n  }\n  count = leadingZeroCount(temp2);\n  if (shiftedValue == 0) {\n    count = count + 0x20;\n  }\n  shiftValue = count - 0xb;\n  isShiftMoreThan12 = subtractBorrow4(shiftValue,0x20);\n  shiftedValue = count - 0x2b;\n  isParam4EqualToMask = (int)shiftedValue < 0;\n  isShiftLessThan32 = shiftedValue == 0;\n  if ((int)shiftValue < 0x20) {\n    isShiftMoreThan12 = subtractCarry4(shiftedValue,0xc);\n    count = count + -0x1f;\n    isParam4EqualToMask = count < 0;\n    isShiftLessThan32 = count == 0;\n    shiftedValue = shiftValue;\n    if (!isShiftLessThan32 && isParam4EqualToMask == isShiftMoreThan12) {\n      temp1 = temp2 << (shiftValue & 0xff);\n      temp2 = temp2 >> (0xcU - count & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isShiftLessThan32 || isParam4EqualToMask != isShiftMoreThan12) {\n    remainingBits = 0x20 - shiftedValue;\n  }\n  temp2 = temp2 << (shiftedValue & 0xff);\n  if (isShiftLessThan32 || isParam4EqualToMask != isShiftMoreThan12) {\n    temp2 = temp2 | temp1 >> (remainingBits & 0xff);\n  }\n  if (isShiftLessThan32 || isParam4EqualToMask != isShiftMoreThan12) {\n    temp1 = temp1 << (shiftedValue & 0xff);\n  }\nLAB_080002f0:\n  if ((int)shiftValue < 0x381) {\n    return CONCAT44(temp2 + (0x380 - shiftValue) * 0x100000 | highBitMask,temp1);\n  }\n  shiftedValue = ~(0x380 - shiftValue);\n  if ((int)shiftedValue < 0x1f) {\n    count = shiftedValue - 0x13;\n    if (count != 0 && count < 0 == subtractCarry4(shiftedValue - 0x1f,0xc)) {\n      return CONCAT44(result,temp1 >> (0x20 - (0xcU - count) & 0xff) | temp2 << (0xcU - count & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shiftedValue = shiftedValue + 1;\n    return CONCAT44(highBitMask | temp2 >> (shiftedValue & 0xff),\n                    temp1 >> (shiftedValue & 0xff) | temp2 << (0x20 - shiftedValue & 0xff));\n  }\n  return CONCAT44(result,temp2 >> (shiftedValue - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000428": "bitwise_operations_08000428",
                "param_1": "input",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "mask",
                "uVar1": "highBitMask",
                "uVar2": "temp1",
                "uVar3": "result",
                "uVar4": "shiftedValue",
                "uVar5": "temp2",
                "uVar7": "shiftValue",
                "bVar8": "isShiftLessThan32",
                "bVar9": "isParam4EqualToMask",
                "bVar10": "isShiftMoreThan12",
                "iVar6": "count",
                "in_r12": "remainingBits",
                "LZCOUNT": "leadingZeroCount",
                "SBORROW4": "subtractBorrow4",
                "SCARRY4": "subtractCarry4"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08003330"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d0": {
            "entrypoint": "0x080004d0",
            "current_name": "calculate_product_080004d0",
            "code": "\nulonglong calculateProduct_080004d0(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong temp8;\n  \n  temp8 = CONCAT44(input2,input1);\n  temp6 = 0x7ff;\n  temp2 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    temp5 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp5 == 0x7ff;\n  }\n  if (flag1) {\n    temp8 = FUN_080006ac();\n  }\n  temp1 = (uint)(temp8 >> 0x20);\n  temp3 = temp2 + temp5;\n  temp2 = temp1 ^ input4;\n  temp1 = temp1 & ~(temp6 << 0x15);\n  input4 = input4 & ~(temp6 << 0x15);\n  flag1 = ((uint)temp8 | temp1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input3 | input4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (flag1) {\n    input3 = (uint)temp8 | input3;\n    input4 = (temp2 & 0x80000000 | temp1) ^ input4;\n    temp2 = temp6 >> 1;\n    flag3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    flag1 = temp4 == 0;\n    temp1 = temp4;\n    if (!flag1 && (int)temp2 <= temp3) {\n      flag3 = SBORROW4(temp6,temp4);\n      temp1 = temp6 - temp4;\n      flag1 = temp6 == temp4;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      input4 = input4 | temp4 * 0x100000;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp6 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    flag1 = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    result1 = (temp8 & 0xffffffff) * (ulonglong)input3;\n    temp8 = (temp8 & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp1 * (ulonglong)input3 + (result1 >> 0x20);\n    temp7 = (uint)temp8;\n    result2 = (ulonglong)temp1 * (ulonglong)input4 + (temp8 >> 0x20);\n    temp6 = (uint)result2;\n    temp1 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      temp7 = temp7 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      flag1 = (temp7 & 0x80000000) != 0;\n      temp7 = temp7 << 1;\n      result2 = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp6,temp6) || CARRY4(temp6 * 2,(uint)flag1)),\n                       temp6 * 2 + (uint)flag1);\n    }\n    input4 = temp2 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    input3 = (uint)result2 << 0xb | temp7 >> 0x15;\n    temp6 = temp7 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    flag1 = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      flag1 = temp1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp6;\n      if (temp6 == 0x80000000) {\n        flag1 = (temp7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp4 * 0x100000 + (uint)CARRY4(input3,(uint)flag1),input3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  flag1 = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = input3 >> (temp1 & 0xff) | input4 << (0x20 - temp1 & 0xff);\n    temp2 = (input4 >> (temp1 & 0xff) & ~((input4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp6 | input3 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(input4,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    temp7 = input3 << (temp4 + 0x20 & 0xff);\n    temp1 = input3 >> (temp2 & 0xff) | input4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp7 >> 0x1f);\n    if ((temp6 | temp7 << 1) == 0) {\n      temp4 = temp4 & ~(temp7 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp7 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = input3 << (temp2 & 0xff);\n  temp2 = input3 >> (0x20 - temp2 & 0xff) | input4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp6 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "renaming": {
                "FUN_080004d0": "calculate_product_080004d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "lVar2": "result2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "iVar5": "temp3",
                "uVar6": "temp4",
                "unaff_r5": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "uVar12": "temp8"
            },
            "calling": [
                "FUN_080071c0",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005900",
                "FUN_08006c0c",
                "FUN_0800411c",
                "FUN_08006228",
                "FUN_08003330"
            ],
            "called": [
                "FUN_080006ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006ac": {
            "entrypoint": "0x080006ac",
            "current_name": "calculate_shifted_result_080006ac",
            "code": "\nulonglong calculate_shifted_result_080006ac(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint shifted_input1;\n  uint original_input2;\n  uint shifted_input2;\n  uint shifted_input3;\n  uint constant;\n  bool is_zero;\n  \n  shifted_input2 = constant & input4 >> 0x14;\n  if (original_input2 != constant && shifted_input2 != constant) {\n    is_zero = (input1 | input2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input3 | input4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (original_input2 == 0) {\n      shifted_input3 = input2 & 0x80000000;\n      do {\n        shifted_input1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(shifted_input1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | shifted_input3;\n      if (shifted_input2 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      shifted_input2 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(shifted_input2 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  is_zero = (input1 | input2 << 1) == 0;\n  if (is_zero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 1) == 0;\n  }\n  shifted_input3 = input2;\n  if (((!is_zero) && ((original_input2 != constant || ((input1 | input2 << 0xc) == 0)))) &&\n     ((shifted_input2 != constant || (input1 = input3, shifted_input3 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(shifted_input3,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006ac": "calculate_shifted_result_080006ac",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "shifted_input1",
                "unaff_r4": "original_input2",
                "uVar2": "shifted_input2",
                "uVar3": "shifted_input3",
                "in_r12": "constant",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_080004d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000724": {
            "entrypoint": "0x08000724",
            "current_name": "calculate_double_precision_08000724",
            "code": "\nulonglong calculateDoublePrecision_08000724(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 result;\n  \n  result = CONCAT44(input2,input1);\n  temp14 = 0x7ff;\n  temp7 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    temp10 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp10 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp10 == 0x7ff;\n  }\n  if (flag1) {\n    result = FUN_08000892();\n  }\n  temp9 = (uint)((ulonglong)result >> 0x20);\n  temp12 = (uint)result;\n  temp8 = temp7 - temp10;\n  if ((input3 | input4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      flag1 = (int)(temp14 - temp9) < 0;\n      flag2 = temp14 == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    temp14 = input3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ input4) & 0x80000000;\n    flag1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      flag1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)flag1;\n    temp9 = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)flag1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp11 - temp5 < (uint)flag2;\n      temp14 = temp11;\n      if (temp5 < temp11 || flag1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp11 || flag1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp13;\n      flag1 = temp14 - temp11 < (uint)flag2;\n      temp5 = temp14;\n      if (temp11 < temp14 || flag1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!flag2;\n      }\n      if (temp11 < temp14 || flag1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp11 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_08000842;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_08000842:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        flag1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        flag1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)flag1),temp12 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp12 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "renaming": {
                "FUN_08000724": "calculate_double_precision_08000724",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "unaff_r5": "temp10",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "uVar17": "result"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005900",
                "FUN_08006c0c",
                "FUN_08005bc8",
                "FUN_08006228",
                "FUN_08003330",
                "FUN_08006070"
            ],
            "called": [
                "FUN_08000892"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000892": {
            "entrypoint": "0x08000892",
            "current_name": "calculate_floating_point_bits_08000892",
            "code": "\nulonglong calculateFloatingPointBits_08000892(uint binaryBit1,uint binaryBit2,uint binaryBit3,uint binaryBit4)\n\n{\n  uint binaryBit1Copy;\n  uint unaffectedRegister4;\n  uint maskedBit;\n  uint binaryBit2Copy;\n  uint constantValue;\n  bool isZero;\n  \n  maskedBit = constantValue & binaryBit4 >> 0x14;\n  binaryBit2Copy = binaryBit2;\n  if (unaffectedRegister4 != constantValue || maskedBit != constantValue) {\n    if (unaffectedRegister4 == constantValue) {\n      if (((binaryBit1 | binaryBit2 << 0xc) == 0) && (binaryBit1 = binaryBit3, binaryBit2Copy = binaryBit4, maskedBit != constantValue)\n         ) {\nLAB_08000704:\n        return (ulonglong)((binaryBit2 ^ binaryBit4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (maskedBit == constantValue) {\n      binaryBit1 = binaryBit3;\n      binaryBit2Copy = binaryBit4;\n      if ((binaryBit3 | binaryBit4 << 0xc) == 0) {\nLAB_080006c8:\n        return (ulonglong)((binaryBit2 ^ binaryBit4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (binaryBit1 | binaryBit2 << 1) == 0;\n      if (!isZero) {\n        isZero = (binaryBit3 | binaryBit4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (unaffectedRegister4 == 0) {\n          binaryBit2Copy = binaryBit2 & 0x80000000;\n          do {\n            binaryBit1Copy = binaryBit1 & 0x80000000;\n            binaryBit1 = binaryBit1 << 1;\n            binaryBit2 = binaryBit2 * 2 + (uint)(binaryBit1Copy != 0);\n          } while ((binaryBit2 & 0x100000) == 0);\n          binaryBit2 = binaryBit2 | binaryBit2Copy;\n          if (maskedBit != 0) {\n            return CONCAT44(binaryBit2,binaryBit1);\n          }\n        }\n        do {\n          binaryBit2Copy = binaryBit3 & 0x80000000;\n          binaryBit3 = binaryBit3 << 1;\n          binaryBit4 = binaryBit4 * 2 + (uint)(binaryBit2Copy != 0);\n        } while ((binaryBit4 & 0x100000) == 0);\n        return CONCAT44(binaryBit2,binaryBit1);\n      }\n      if ((binaryBit1 | binaryBit2 << 1) != 0) goto LAB_08000704;\n      if ((binaryBit3 | binaryBit4 << 1) != 0) goto LAB_080006c8;\n    }\n  }\n  return CONCAT44(binaryBit2Copy,binaryBit1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08000892": "calculate_floating_point_bits_08000892",
                "param_1": "binaryBit1",
                "param_2": "binaryBit2",
                "param_3": "binaryBit3",
                "param_4": "binaryBit4",
                "uVar1": "binaryBit1Copy",
                "unaff_r4": "unaffectedRegister4",
                "uVar2": "maskedBit",
                "uVar3": "binaryBit2Copy",
                "in_r12": "constantValue",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_08000724"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000904": {
            "entrypoint": "0x08000904",
            "current_name": "check_parameters_08000904",
            "code": "\nuint check_parameters_08000904(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint result;\n  bool is_zero;\n  bool is_smaller;\n  \n  if (((int)(input_2 << 1) >> 0x15 == -1 || (int)(input_4 << 1) >> 0x15 == -1) &&\n     ((((int)(input_2 << 1) >> 0x15 == -1 && ((input_1 | input_2 << 0xc) != 0)) ||\n      (((int)(input_4 << 1) >> 0x15 == -1 && ((input_3 | input_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = input_2 == input_4;\n  }\n  if (is_zero) {\n    is_zero = input_1 == input_3;\n  }\n  if (!is_zero) {\n    result = input_2 ^ input_4;\n    is_zero = result == 0;\n    if (-1 < (int)result) {\n      is_zero = input_2 == input_4;\n    }\n    is_smaller = -1 < (int)result && input_4 <= input_2;\n    if (is_zero) {\n      is_smaller = input_3 <= input_1;\n    }\n    input_4 = (int)input_4 >> 0x1f;\n    if (!is_smaller) {\n      input_4 = ~input_4;\n    }\n    return input_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000904": "check_parameters_08000904",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result",
                "bVar2": "is_zero",
                "bVar3": "is_smaller"
            },
            "calling": [
                "FUN_08000990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000980": {
            "entrypoint": "0x08000980",
            "current_name": "execute_function_08000980",
            "code": "\nvoid execute_function_08000980(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  FUN_08000990(input_param_3,input_param_4,input_param_1,input_param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000980": "execute_function_08000980",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4"
            },
            "calling": [
                "FUN_080009f0"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000990": {
            "entrypoint": "0x08000990",
            "current_name": "initialize_08000990",
            "code": "\nundefined4 initialize_08000990(undefined4 input_param)\n\n{\n  FUN_08000904();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08000990": "initialize_08000990",
                "param_1": "input_param"
            },
            "calling": [
                "FUN_08000980",
                "FUN_080009c8",
                "FUN_080009a0",
                "FUN_080009b4"
            ],
            "called": [
                "FUN_08000904"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a0": {
            "entrypoint": "0x080009a0",
            "current_name": "check_if_initialized_080009a0",
            "code": "\nbool checkIfInitialized_080009a0(void)\n\n{\n  char isInitialized;\n  \n  FUN_08000990();\n  return isInitialized != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009a0": "check_if_initialized_080009a0",
                "in_ZR": "isInitialized"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b4": {
            "entrypoint": "0x080009b4",
            "current_name": "is_string_empty_080009b4",
            "code": "\nbool is_string_empty_080009b4(void)\n\n{\n  char input_char;\n  \n  FUN_08000990();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009b4": "is_string_empty_080009b4",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_08005900",
                "FUN_08005bc8"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "check_carry_and_zero_080009c8",
            "code": "\nbool check_carry_and_zero_080009c8(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_08000990();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_080009c8": "check_carry_and_zero_080009c8",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "check_null_termination_080009f0",
            "code": "\nbool check_null_termination_080009f0(void)\n\n{\n  char input_char;\n  \n  FUN_08000980();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009f0": "check_null_termination_080009f0",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "check_parameters_08000a04",
            "code": "\nundefined4 check_parameters_08000a04(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "check_parameters_08000a04",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_08005900",
                "FUN_08005854",
                "FUN_08005bc8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a30": {
            "entrypoint": "0x08000a30",
            "current_name": "calculate_floating_point_08000a30",
            "code": "\nuint calculateFloatingPoint_08000a30(uint input1,uint input2)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool isZero;\n  bool isLessThan0x70000000;\n  \n  temp1 = input2 * 2;\n  isLessThan0x70000000 = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!isLessThan0x70000000) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  isZero = result == 0;\n  if (!isLessThan0x70000000 && temp2 >= 0x200000) {\n    isZero = temp3 == 0x1fc00000;\n  }\n  if (((isLessThan0x70000000 || temp2 < 0x200000) || 0x1fc00000 < temp3) || isZero) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((input1 | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != SCARRY4(temp2,0x2e00000)) {\n      return input2 & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = input1 >> (temp1 & 0xff);\n    if (input1 << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = input2 & 0x1fffff | 0x100000;\n    input1 = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (input2 & 0x80000000 | input1 >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < input1 * 8);\n  if (input1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000a30": "calculate_floating_point_08000a30",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "temp3",
                "bVar4": "isZero",
                "bVar5": "isLessThan0x70000000"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08003330"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ad8": {
            "entrypoint": "0x08000ad8",
            "current_name": "calculate_shifted_value_08000ad8",
            "code": "\nuint calculate_shifted_value_08000ad8(uint input_value_1,uint input_value_2,undefined4 input_value_3,uint input_value_4)\n\n{\n  int shifted_value_1;\n  int shifted_value_2;\n  uint result_1;\n  uint result_2;\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  bool isEqual;\n  \n  result_1 = input_value_2 ^ 0x80000000;\n  temp_1 = input_value_1 << 1;\n  isEqual = temp_1 == 0;\n  if (!isEqual) {\n    input_value_4 = input_value_2 << 1;\n    isEqual = input_value_4 == 0;\n  }\n  if (!isEqual) {\n    isEqual = temp_1 == input_value_4;\n  }\n  shifted_value_1 = (int)temp_1 >> 0x18;\n  if (!isEqual) {\n    isEqual = shifted_value_1 == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)input_value_4 >> 0x18 == -1;\n  }\n  if (isEqual) {\n    shifted_value_2 = (int)(input_value_2 << 1) >> 0x18;\n    if (shifted_value_1 == -1 || shifted_value_2 == -1) {\n      temp_1 = result_1;\n      if (shifted_value_1 == -1) {\n        temp_1 = input_value_1;\n      }\n      if (shifted_value_1 != -1 || shifted_value_2 != -1) {\n        result_1 = temp_1;\n      }\n      isEqual = (temp_1 & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (result_1 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = temp_1 == result_1;\n      }\n      if (!isEqual) {\n        temp_1 = temp_1 | 0x400000;\n      }\n      return temp_1;\n    }\n    if (((input_value_1 ^ result_1) & 0x7fffffff) != 0) {\n      if (temp_1 == 0) {\n        input_value_1 = result_1;\n      }\n      return input_value_1;\n    }\n    if (input_value_1 != result_1) {\n      return 0;\n    }\n    if ((temp_1 & 0xff000000) == 0) {\n      result_1 = input_value_1 << 1;\n      if ((input_value_1 & 0x80000000) != 0) {\n        result_1 = result_1 | 0x80000000;\n      }\n      return result_1;\n    }\n    if (temp_1 < 0xfe000000) {\n      return input_value_1 + 0x800000;\n    }\n    input_value_1 = input_value_1 & 0x80000000;\nLAB_08000c12:\n    return input_value_1 | 0x7f800000;\n  }\n  temp_1 = temp_1 >> 0x18;\n  input_value_4 = input_value_4 >> 0x18;\n  temp_3 = input_value_4 - temp_1;\n  isEqual = temp_3 != 0;\n  temp_2 = temp_1;\n  if (isEqual && temp_1 <= input_value_4) {\n    temp_2 = temp_1 + temp_3;\n  }\n  if (isEqual && temp_1 <= input_value_4) {\n    result_1 = result_1 ^ input_value_1;\n  }\n  if (isEqual && temp_1 <= input_value_4) {\n    input_value_1 = input_value_1 ^ result_1;\n  }\n  if (isEqual && temp_1 <= input_value_4) {\n    result_1 = result_1 ^ input_value_1;\n  }\n  if (input_value_4 < temp_1) {\n    temp_3 = -temp_3;\n  }\n  if (0x19 < temp_3) {\n    return input_value_1;\n  }\n  temp_1 = input_value_1 & 0xffffff | 0x800000;\n  if ((input_value_1 & 0x80000000) != 0) {\n    temp_1 = -temp_1;\n  }\n  result_2 = result_1 & 0xffffff | 0x800000;\n  if ((result_1 & 0x80000000) != 0) {\n    result_2 = -result_2;\n  }\n  if (temp_2 == temp_3) {\n    result_2 = result_2 ^ 0x800000;\n    if (temp_2 == 0) {\n      temp_1 = temp_1 ^ 0x800000;\n      temp_2 = 1;\n    }\n    else {\n      temp_3 = temp_3 - 1;\n    }\n  }\n  temp_1 = temp_1 + ((int)result_2 >> (temp_3 & 0xff));\n  result_2 = result_2 << (0x20 - temp_3 & 0xff);\n  input_value_1 = temp_1 & 0x80000000;\n  if ((int)temp_1 < 0) {\n    isEqual = result_2 != 0;\n    result_2 = -result_2;\n    temp_1 = -temp_1 - (uint)isEqual;\n  }\n  if (temp_1 < 0x800000) {\n    result_1 = result_2 & 0x80000000;\n    result_2 = result_2 << 1;\n    temp_1 = temp_1 * 2 + (uint)(result_1 != 0);\n    result_1 = temp_2 - 2;\n    if ((temp_1 & 0x800000) == 0) {\n      temp_3 = LZCOUNT(temp_1) - 8;\n      temp_1 = temp_1 << (temp_3 & 0xff);\n      if ((int)result_1 < (int)temp_3) {\n        temp_1 = temp_1 >> (-(result_1 - temp_3) & 0xff);\n      }\n      else {\n        temp_1 = temp_1 + (result_1 - temp_3) * 0x800000;\n      }\n      return temp_1 | input_value_1;\n    }\n  }\n  else {\n    result_1 = temp_2 - 1;\n    if (0xffffff < temp_1) {\n      result_1 = temp_1 & 1;\n      temp_1 = temp_1 >> 1;\n      result_2 = (uint)(result_1 != 0) << 0x1f | result_2 >> 1;\n      result_1 = temp_2;\n      if (0xfd < temp_2) goto LAB_08000c12;\n    }\n  }\n  temp_1 = temp_1 + result_1 * 0x800000 + (uint)(0x7fffffff < result_2);\n  if (result_2 == 0x80000000) {\n    temp_1 = temp_1 & 0xfffffffe;\n  }\n  return temp_1 | input_value_1;\n}\n\n",
            "renaming": {
                "FUN_08000ad8": "calculate_shifted_value_08000ad8",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "input_value_3",
                "param_4": "input_value_4",
                "iVar1": "shifted_value_1",
                "iVar2": "shifted_value_2",
                "uVar3": "result_1",
                "uVar4": "result_2",
                "uVar5": "temp_1",
                "uVar6": "temp_2",
                "uVar7": "temp_3",
                "bVar8": "isEqual"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_08002ee8",
                "FUN_08002d88",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002bf0",
                "FUN_08002ec0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000adc": {
            "entrypoint": "0x08000adc",
            "current_name": "calculate_float_08000adc",
            "code": "\nuint calculate_float_08000adc(uint input_float_1,uint input_float_2,undefined4 undefined_param,uint input_uint)\n\n{\n  int shifted_input_float_1_int;\n  int shifted_input_float_2_int;\n  uint input_float_2_24bit;\n  uint shifted_input_float_1;\n  uint uVar5;\n  uint difference;\n  bool is_equal;\n  \n  shifted_input_float_1 = input_float_1 << 1;\n  is_equal = shifted_input_float_1 == 0;\n  if (!is_equal) {\n    input_uint = input_float_2 << 1;\n    is_equal = input_uint == 0;\n  }\n  if (!is_equal) {\n    is_equal = shifted_input_float_1 == input_uint;\n  }\n  shifted_input_float_1_int = (int)shifted_input_float_1 >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_input_float_1_int == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)input_uint >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_input_float_2_int = (int)(input_float_2 << 1) >> 0x18;\n    if (shifted_input_float_1_int == -1 || shifted_input_float_2_int == -1) {\n      shifted_input_float_1 = input_float_2;\n      if (shifted_input_float_1_int == -1) {\n        shifted_input_float_1 = input_float_1;\n      }\n      if (shifted_input_float_1_int != -1 || shifted_input_float_2_int != -1) {\n        input_float_2 = shifted_input_float_1;\n      }\n      is_equal = (shifted_input_float_1 & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (input_float_2 & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = shifted_input_float_1 == input_float_2;\n      }\n      if (!is_equal) {\n        shifted_input_float_1 = shifted_input_float_1 | 0x400000;\n      }\n      return shifted_input_float_1;\n    }\n    if (((input_float_1 ^ input_float_2) & 0x7fffffff) != 0) {\n      if (shifted_input_float_1 == 0) {\n        input_float_1 = input_float_2;\n      }\n      return input_float_1;\n    }\n    if (input_float_1 != input_float_2) {\n      return 0;\n    }\n    if ((shifted_input_float_1 & 0xff000000) == 0) {\n      shifted_input_float_1 = input_float_1 << 1;\n      if ((input_float_1 & 0x80000000) != 0) {\n        shifted_input_float_1 = shifted_input_float_1 | 0x80000000;\n      }\n      return shifted_input_float_1;\n    }\n    if (shifted_input_float_1 < 0xfe000000) {\n      return input_float_1 + 0x800000;\n    }\n    input_float_1 = input_float_1 & 0x80000000;\nLAB_08000c12:\n    return input_float_1 | 0x7f800000;\n  }\n  shifted_input_float_1 = shifted_input_float_1 >> 0x18;\n  input_uint = input_uint >> 0x18;\n  difference = input_uint - shifted_input_float_1;\n  is_equal = difference != 0;\n  uVar5 = shifted_input_float_1;\n  if (is_equal && shifted_input_float_1 <= input_uint) {\n    uVar5 = shifted_input_float_1 + difference;\n  }\n  if (is_equal && shifted_input_float_1 <= input_uint) {\n    input_float_2 = input_float_2 ^ input_float_1;\n  }\n  if (is_equal && shifted_input_float_1 <= input_uint) {\n    input_float_1 = input_float_1 ^ input_float_2;\n  }\n  if (is_equal && shifted_input_float_1 <= input_uint) {\n    input_float_2 = input_float_2 ^ input_float_1;\n  }\n  if (input_uint < shifted_input_float_1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input_float_1;\n  }\n  shifted_input_float_1 = input_float_1 & 0xffffff | 0x800000;\n  if ((input_float_1 & 0x80000000) != 0) {\n    shifted_input_float_1 = -shifted_input_float_1;\n  }\n  input_float_2_24bit = input_float_2 & 0xffffff | 0x800000;\n  if ((input_float_2 & 0x80000000) != 0) {\n    input_float_2_24bit = -input_float_2_24bit;\n  }\n  if (uVar5 == difference) {\n    input_float_2_24bit = input_float_2_24bit ^ 0x800000;\n    if (uVar5 == 0) {\n      shifted_input_float_1 = shifted_input_float_1 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shifted_input_float_1 = shifted_input_float_1 + ((int)input_float_2_24bit >> (difference & 0xff));\n  input_float_2_24bit = input_float_2_24bit << (0x20 - difference & 0xff);\n  input_float_1 = shifted_input_float_1 & 0x80000000;\n  if ((int)shifted_input_float_1 < 0) {\n    is_equal = input_float_2_24bit != 0;\n    input_float_2_24bit = -input_float_2_24bit;\n    shifted_input_float_1 = -shifted_input_float_1 - (uint)is_equal;\n  }\n  if (shifted_input_float_1 < 0x800000) {\n    difference = input_float_2_24bit & 0x80000000;\n    input_float_2_24bit = input_float_2_24bit << 1;\n    shifted_input_float_1 = shifted_input_float_1 * 2 + (uint)(difference != 0);\n    difference = uVar5 - 2;\n    if ((shifted_input_float_1 & 0x800000) == 0) {\n      uVar5 = leading_zero_count(shifted_input_float_1) - 8;\n      shifted_input_float_1 = shifted_input_float_1 << (uVar5 & 0xff);\n      if ((int)difference < (int)uVar5) {\n        shifted_input_float_1 = shifted_input_float_1 >> (-(difference - uVar5) & 0xff);\n      }\n      else {\n        shifted_input_float_1 = shifted_input_float_1 + (difference - uVar5) * 0x800000;\n      }\n      return shifted_input_float_1 | input_float_1;\n    }\n  }\n  else {\n    difference = uVar5 - 1;\n    if (0xffffff < shifted_input_float_1) {\n      difference = shifted_input_float_1 & 1;\n      shifted_input_float_1 = shifted_input_float_1 >> 1;\n      input_float_2_24bit = (uint)(difference != 0) << 0x1f | input_float_2_24bit >> 1;\n      difference = uVar5;\n      if (0xfd < uVar5) goto LAB_08000c12;\n    }\n  }\n  shifted_input_float_1 = shifted_input_float_1 + difference * 0x800000 + (uint)(0x7fffffff < input_float_2_24bit);\n  if (input_float_2_24bit == 0x80000000) {\n    shifted_input_float_1 = shifted_input_float_1 & 0xfffffffe;\n  }\n  return shifted_input_float_1 | input_float_1;\n}\n\n",
            "renaming": {
                "FUN_08000adc": "calculate_float_08000adc",
                "param_1": "input_float_1",
                "param_2": "input_float_2",
                "param_3": "undefined_param",
                "param_4": "input_uint",
                "uVar4": "shifted_input_float_1",
                "uVar6": "difference",
                "bVar7": "is_equal",
                "iVar1": "shifted_input_float_1_int",
                "iVar2": "shifted_input_float_2_int",
                "uVar3": "input_float_2_24bit",
                "LZCOUNT": "leading_zero_count"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_08004a84",
                "FUN_08002ee8",
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002ec0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c3c": {
            "entrypoint": "0x08000c3c",
            "current_name": "calculate_hash_08000c3c",
            "code": "\nuint calculateHash_08000c3c(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int constant;\n  uint mask;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputValue);\n  shiftAmount = leadingZeros - 8;\n  constant = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    mask = 0 << (shiftAmount & 0xff);\n    leadingZeros = constant + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = inputValue << leadingZeros + 0x18;\n  leadingZeros = constant + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_08000c3c": "calculate_hash_08000c3c",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "constant",
                "uVar4": "mask"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c44": {
            "entrypoint": "0x08000c44",
            "current_name": "bitwise_calculation_08000c44",
            "code": "\nuint bitwise_calculation_08000c44(uint input_value)\n\n{\n  uint leading_zeros;\n  uint shift_value;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input_value & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input_value = -input_value;\n  }\n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeros = count_leading_zeros(input_value);\n  shift_value = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_value * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_value & 0xff);\n    sign_bit = result + (input_value << (shift_value & 0xff)) +\n            (0U >> (0x20 - shift_value & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_value = input_value << leading_zeros + 0x18;\n  sign_bit = result + ((input_value >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_value >> 0x1f));\n  if ((shift_value & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_value >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "renaming": {
                "FUN_08000c44": "bitwise_calculation_08000c44",
                "param_1": "input_value",
                "uVar1": "leading_zeros",
                "uVar2": "shift_value",
                "uVar3": "sign_bit",
                "iVar4": "result",
                "LZCOUNT": "count_leading_zeros"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_0800411c",
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_0800483c",
                "FUN_08002bf0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cec": {
            "entrypoint": "0x08000cec",
            "current_name": "calculate_float_08000cec",
            "code": "\nuint calculateFloat_08000cec(uint num1,uint num2,undefined4 float1,uint float2)\n\n{\n  longlong product;\n  uint resultFloat;\n  uint remainingBits;\n  int num1Exp;\n  int resultExp;\n  uint productFraction;\n  int remainingExp;\n  uint resultBits;\n  bool isZeroOrInf;\n  bool isPositive;\n  \n  remainingBits = num1 >> 0x17 & 0xff;\n  isZeroOrInf = remainingBits == 0;\n  if (!isZeroOrInf) {\n    float2 = num2 >> 0x17 & 0xff;\n    isZeroOrInf = float2 == 0;\n  }\n  if (!isZeroOrInf) {\n    isZeroOrInf = remainingBits == 0xff;\n  }\n  if (!isZeroOrInf) {\n    isZeroOrInf = float2 == 0xff;\n  }\n  if (isZeroOrInf) {\n    float2 = num2 >> 0x17 & 0xff;\n    if (remainingBits == 0xff || float2 == 0xff) {\n      isZeroOrInf = num1 == 0 || num1 == 0x80000000;\n      resultFloat = num2;\n      if (num1 != 0 && num1 != 0x80000000) {\n        isZeroOrInf = num2 == 0;\n        resultFloat = num1;\n      }\n      if (!isZeroOrInf) {\n        isZeroOrInf = num2 == 0x80000000;\n      }\n      resultBits = resultFloat;\n      if (((isZeroOrInf) || ((remainingBits == 0xff && ((resultFloat & 0x7fffff) != 0)))) ||\n         ((float2 == 0xff && (resultBits = num2, (num2 & 0x7fffff) != 0)))) {\n        return resultBits | 0x7fc00000;\n      }\n      resultFloat = resultFloat ^ num2;\n      goto LAB_08000e3c;\n    }\n    isZeroOrInf = (num1 & 0x7fffffff) == 0;\n    if (!isZeroOrInf) {\n      isZeroOrInf = (num2 & 0x7fffffff) == 0;\n    }\n    if (isZeroOrInf) {\n      return (num1 ^ num2) & 0x80000000;\n    }\n    isZeroOrInf = remainingBits == 0;\n    resultFloat = num1 & 0x80000000;\n    while( true ) {\n      if (isZeroOrInf) {\n        num1 = num1 << 1;\n        isZeroOrInf = (num1 & 0x800000) == 0;\n      }\n      if (!isZeroOrInf) break;\n      remainingBits = remainingBits - 1;\n    }\n    num1 = num1 | resultFloat;\n    isZeroOrInf = float2 == 0;\n    resultFloat = num2 & 0x80000000;\n    while( true ) {\n      if (isZeroOrInf) {\n        num2 = num2 << 1;\n        isZeroOrInf = (num2 & 0x800000) == 0;\n      }\n      if (!isZeroOrInf) break;\n      float2 = float2 - 1;\n    }\n    num2 = num2 | resultFloat;\n  }\n  num1Exp = remainingBits + float2;\n  resultBits = num1 ^ num2;\n  remainingBits = num1 << 9;\n  isZeroOrInf = remainingBits == 0;\n  if (!isZeroOrInf) {\n    num2 = num2 << 9;\n    isZeroOrInf = num2 == 0;\n  }\n  if (isZeroOrInf) {\n    if (remainingBits == 0) {\n      num2 = num2 << 9;\n    }\n    resultFloat = resultBits & 0x80000000 | num1 & 0x7fffff | num2 >> 9;\n    isPositive = SBORROW4(num1Exp,0x7f);\n    resultExp = num1Exp + -0x7f;\n    isZeroOrInf = resultExp == 0;\n    remainingExp = resultExp;\n    if (!isZeroOrInf && 0x7e < num1Exp) {\n      isPositive = SBORROW4(0xff,resultExp);\n      remainingExp = 0xff - resultExp;\n      isZeroOrInf = resultExp == 0xff;\n    }\n    if (!isZeroOrInf && remainingExp < 0 == isPositive) {\n      resultFloat = resultFloat | resultExp * 0x800000;\n    }\n    if (!isZeroOrInf && remainingExp < 0 == isPositive) {\n      return resultFloat;\n    }\n    resultFloat = resultFloat | 0x800000;\n    productFraction = 0;\n    isPositive = SBORROW4(resultExp,1);\n    resultBits = num1Exp - 0x80;\n    isZeroOrInf = resultBits == 0;\n    remainingBits = resultBits;\n  }\n  else {\n    product = (ulonglong)(remainingBits >> 5 | 0x8000000) * (ulonglong)(num2 >> 5 | 0x8000000);\n    productFraction = (uint)product;\n    resultFloat = (uint)((ulonglong)product >> 0x20);\n    isZeroOrInf = resultFloat < 0x800000;\n    if (isZeroOrInf) {\n      resultFloat = resultFloat << 1;\n    }\n    if (isZeroOrInf) {\n      resultFloat = resultFloat | productFraction >> 0x1f;\n      productFraction = productFraction << 1;\n    }\n    resultFloat = resultBits & 0x80000000 | resultFloat;\n    resultBits = (num1Exp + -0x7f) - (uint)isZeroOrInf;\n    isPositive = SBORROW4(resultBits,0xfd);\n    isZeroOrInf = resultBits == 0xfd;\n    remainingBits = resultBits - 0xfd;\n    if (resultBits < 0xfe) {\n      resultFloat = resultFloat + resultBits * 0x800000 + (uint)(0x7fffffff < productFraction);\n      if (productFraction == 0x80000000) {\n        resultFloat = resultFloat & 0xfffffffe;\n      }\n      return resultFloat;\n    }\n  }\n  if (isZeroOrInf || (int)remainingBits < 0 != isPositive) {\n    isZeroOrInf = (int)(resultBits + 0x19) < 0;\n    if (resultBits == 0xffffffe7 || isZeroOrInf != SCARRY4(resultBits,0x19)) {\n      resultFloat = resultFloat & 0x80000000;\n    }\n    if (resultBits != 0xffffffe7 && isZeroOrInf == SCARRY4(resultBits,0x19)) {\n      remainingBits = (resultFloat << 1) >> (-resultBits & 0xff);\n      resultBits = resultFloat << (resultBits + 0x20 & 0xff);\n      remainingBits = ((uint)((resultFloat & 0x80000000) != 0) << 0x1f | remainingBits >> 1) + (uint)((byte)remainingBits & 1);\n      if ((productFraction | resultBits << 1) == 0) {\n        remainingBits = remainingBits & ~(resultBits >> 0x1f);\n      }\n      return remainingBits;\n    }\n    return resultFloat;\n  }\nLAB_08000e3c:\n  return resultFloat & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cec": "calculate_float_08000cec",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "float1",
                "param_4": "float2",
                "lVar1": "product",
                "uVar2": "resultFloat",
                "uVar3": "remainingBits",
                "iVar4": "num1Exp",
                "iVar5": "resultExp",
                "uVar6": "productFraction",
                "iVar7": "remainingExp",
                "uVar8": "resultBits",
                "bVar9": "isZeroOrInf",
                "bVar10": "isPositive"
            },
            "calling": [
                "FUN_08004a30",
                "FUN_08002b48",
                "FUN_08004a84",
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002f28",
                "FUN_08002bf0",
                "FUN_08002ec0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e54": {
            "entrypoint": "0x08000e54",
            "current_name": "reverse_fp32_08000e54",
            "code": "\nuint reverseFp32_08000e54(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  int temp5;\n  uint temp6;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  temp2 = input1 >> 0x17 & 0xff;\n  condition1 = temp2 == 0;\n  if (!condition1) {\n    param4 = input2 >> 0x17 & 0xff;\n    condition1 = param4 == 0;\n  }\n  if (!condition1) {\n    condition1 = temp2 == 0xff;\n  }\n  if (!condition1) {\n    condition1 = param4 == 0xff;\n  }\n  if (condition1) {\n    param4 = input2 >> 0x17 & 0xff;\n    temp6 = input1;\n    if (temp2 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (temp6 = input2, param4 == 0xff)) {\nLAB_08000e4a:\n        return temp6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param4 == 0xff) {\n        temp6 = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      condition1 = (input1 & 0x7fffffff) == 0;\n      if (!condition1) {\n        condition1 = (input2 & 0x7fffffff) == 0;\n      }\n      if (!condition1) {\n        condition1 = temp2 == 0;\n        temp6 = input1 & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            input1 = input1 << 1;\n            condition1 = (input1 & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          temp2 = temp2 - 1;\n        }\n        input1 = input1 | temp6;\n        condition1 = param4 == 0;\n        temp6 = input2 & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            input2 = input2 << 1;\n            condition1 = (input2 & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          param4 = param4 - 1;\n        }\n        input2 = input2 | temp6;\n        goto LAB_08000e6c;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_08000e6c:\n    temp3 = temp2 - param4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      condition3 = SCARRY4(temp3,0x7f);\n      temp5 = temp3 + 0x7f;\n      condition1 = temp5 < 0;\n      condition2 = temp5 == 0;\n      if (!condition2 && condition1 == condition3) {\n        condition3 = SBORROW4(0xff,temp5);\n        condition1 = 0xff - temp5 < 0;\n        condition2 = temp5 == 0xff;\n      }\n      if (!condition2 && condition1 == condition3) {\n        input1 = input1 | temp5 * 0x800000;\n      }\n      if (!condition2 && condition1 == condition3) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      temp2 = 0;\n      condition2 = SBORROW4(temp5,1);\n      temp4 = temp3 + 0x7e;\n      condition1 = temp4 == 0;\n      temp6 = temp4;\n    }\n    else {\n      temp1 = (input2 << 9) >> 4 | 0x10000000;\n      temp2 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      condition1 = temp1 <= temp2;\n      if (!condition1) {\n        temp2 = temp2 << 1;\n      }\n      temp4 = temp3 + 0x7d + (uint)condition1;\n      temp6 = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          input1 = input1 | temp6;\n        }\n        condition1 = temp1 >> 1 <= temp2;\n        if (condition1) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (condition1) {\n          input1 = input1 | temp6 >> 1;\n        }\n        condition1 = temp1 >> 2 <= temp2;\n        if (condition1) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (condition1) {\n          input1 = input1 | temp6 >> 2;\n        }\n        condition1 = temp1 >> 3 <= temp2;\n        if (condition1) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (condition1) {\n          input1 = input1 | temp6 >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        condition1 = temp2 == 0;\n        if (!condition1) {\n          temp6 = temp6 >> 4;\n          condition1 = temp6 == 0;\n        }\n      } while (!condition1);\n      condition2 = SBORROW4(temp4,0xfd);\n      condition1 = temp4 == 0xfd;\n      temp6 = temp4 - 0xfd;\n      if (temp4 < 0xfe) {\n        input1 = input1 + temp4 * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (condition1 || (int)temp6 < 0 != condition2) {\n      condition1 = (int)(temp4 + 0x19) < 0;\n      if (temp4 == 0xffffffe7 || condition1 != SCARRY4(temp4,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (temp4 == 0xffffffe7 || condition1 != SCARRY4(temp4,0x19)) {\n        return input1;\n      }\n      temp6 = (input1 << 1) >> (-temp4 & 0xff);\n      temp4 = input1 << (temp4 + 0x20 & 0xff);\n      temp6 = ((uint)((input1 & 0x80000000) != 0) << 0x1f | temp6 >> 1) + (uint)((byte)temp6 & 1);\n      if ((temp2 | temp4 << 1) == 0) {\n        temp6 = temp6 & ~(temp4 >> 0x1f);\n      }\n      return temp6;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e54": "reverse_fp32_08000e54",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "temp5",
                "uVar6": "temp6",
                "bVar7": "condition1",
                "bVar8": "condition2",
                "bVar9": "condition3"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f9c": {
            "entrypoint": "0x08000f9c",
            "current_name": "multiply_and_compare_08000f9c",
            "code": "\nuint multiply_and_compare_08000f9c(uint input1,uint input2)\n\n{\n  bool is_positive;\n  uint double_input1;\n  uint double_input2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  double_input1 = input1 * 2;\n  double_input2 = input2 * 2;\n  if (((int)double_input1 >> 0x18 == -1 || (int)double_input2 >> 0x18 == -1) &&\n     ((((int)double_input1 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) ||\n      (((int)double_input2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_inputs = double_input1 | input2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input1 ^ input2;\n    is_zero = combined_inputs == 0;\n  }\n  is_positive = -1 < (int)combined_inputs;\n  if (is_positive) {\n    input1 = double_input1 + input2 * -2;\n    is_zero = input1 == 0;\n  }\n  if ((is_positive && double_input2 <= double_input1) && !is_zero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!is_positive || double_input2 > double_input1) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input1 = input1 | 1;\n  }\n  return input1;\n}\n\n",
            "renaming": {
                "FUN_08000f9c": "multiply_and_compare_08000f9c",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "double_input1",
                "uVar3": "double_input2",
                "uVar4": "combined_inputs",
                "bVar1": "is_positive",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_08001004"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ffc": {
            "entrypoint": "0x08000ffc",
            "current_name": "execute_param_swap_08000ffc",
            "code": "\nvoid executeParamSwap_08000ffc(undefined4 src,undefined4 dest)\n\n{\n  FUN_08001004(dest,src);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ffc": "execute_param_swap_08000ffc",
                "param_1": "src",
                "param_2": "dest"
            },
            "calling": [
                "FUN_08001050",
                "FUN_08001064"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001004": {
            "entrypoint": "0x08001004",
            "current_name": "concatenate_params_08001004",
            "code": "\nundefined8 concatenateParams_08001004(undefined4 value1,undefined4 value2)\n\n{\n  FUN_08000f9c();\n  return CONCAT44(value2,value1);\n}\n\n",
            "renaming": {
                "FUN_08001004": "concatenate_params_08001004",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08001014",
                "FUN_08001028",
                "FUN_08000ffc"
            ],
            "called": [
                "FUN_08000f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001014": {
            "entrypoint": "0x08001014",
            "current_name": "is_character_not_null_08001014",
            "code": "\nbool isCharacterNotNull_08001014(void)\n\n{\n  char character;\n  \n  FUN_08001004();\n  return character != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001014": "is_character_not_null_08001014",
                "in_ZR": "character"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001028": {
            "entrypoint": "0x08001028",
            "current_name": "check_if_input_is_empty_08001028",
            "code": "\nbool check_if_input_is_empty_08001028(void)\n\n{\n  char input_character;\n  \n  FUN_08001004();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001028": "check_if_input_is_empty_08001028",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002ee8",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001050": {
            "entrypoint": "0x08001050",
            "current_name": "check_carry_and_zero_08001050",
            "code": "\nbool check_carry_and_zero_08001050(void)\n\n{\n  undefined is_zero;\n  undefined has_carry;\n  \n  FUN_08000ffc();\n  return !(bool)has_carry || (bool)is_zero;\n}\n\n",
            "renaming": {
                "FUN_08001050": "check_carry_and_zero_08001050",
                "in_ZR": "is_zero",
                "in_CY": "has_carry"
            },
            "calling": [
                "FUN_08002ee8"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001064": {
            "entrypoint": "0x08001064",
            "current_name": "check_if_null_terminated_08001064",
            "code": "\nbool check_if_null_terminated_08001064(void)\n\n{\n  char input_character;\n  \n  FUN_08000ffc();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001064": "check_if_null_terminated_08001064",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001078": {
            "entrypoint": "0x08001078",
            "current_name": "convert_integer_to_float_08001078",
            "code": "\nuint convertIntegerToFloat_08001078(uint inputValue)\n\n{\n  uint shiftedValue;\n  uint shiftAmount;\n  \n  if (inputValue << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedValue = (inputValue << 1) >> 0x18;\n  shiftAmount = 0x9e - shiftedValue;\n  if (shiftedValue < 0x9f && shiftAmount != 0) {\n    shiftedValue = (inputValue << 8 | 0x80000000) >> (shiftAmount & 0xff);\n    if ((inputValue & 0x80000000) != 0) {\n      shiftedValue = -shiftedValue;\n    }\n    return shiftedValue;\n  }\n  if ((shiftAmount == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputValue = inputValue & 0x80000000;\n  if (inputValue == 0) {\n    inputValue = 0x7fffffff;\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_08001078": "convert_integer_to_float_08001078",
                "param_1": "inputValue",
                "uVar1": "shiftedValue",
                "uVar2": "shiftAmount"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_0800411c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080010c4": {
            "entrypoint": "0x080010c4",
            "current_name": "calculate_shifted_value_080010c4",
            "code": "\nuint calculate_shifted_value_080010c4(uint input_value)\n\n{\n  uint shifted_value;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shifted_value = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shifted_value) {\n    return (input_value << 8 | 0x80000000) >> (shifted_value & 0xff);\n  }\n  if ((shifted_value == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080010c4": "calculate_shifted_value_080010c4",
                "param_1": "input_value",
                "uVar1": "shifted_value"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001104": {
            "entrypoint": "0x08001104",
            "current_name": "initialize_and_execute_task_08001104",
            "code": "\nundefined4 initializeAndExecuteTask_08001104(undefined4 taskID)\n\n{\n  uint currentTime;\n  \n  currentTime = FUN_08002214();\n  FUN_08001214(currentTime / 1000);\n  FUN_08001194(0xffffffff,taskID,0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001104": "initialize_and_execute_task_08001104",
                "param_1": "taskID",
                "uVar1": "currentTime"
            },
            "calling": [
                "FUN_0800209c",
                "FUN_08001128"
            ],
            "called": [
                "FUN_08002214",
                "FUN_08001194",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001128": {
            "entrypoint": "0x08001128",
            "current_name": "initialize_hardware_08001128",
            "code": "\n\n\nundefined4 initializeHardware_08001128(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  FUN_08001170(3);\n  FUN_08001104(0);\n  FUN_08004ccc();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001128": "initialize_hardware_08001128"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001170",
                "FUN_08001104",
                "FUN_08004ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800114c": {
            "entrypoint": "0x0800114c",
            "current_name": "increment_counter_0800114c",
            "code": "\nvoid incrementCounter_0800114c(void)\n\n{\n  DAT_20000244 = DAT_20000244 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800114c": "increment_counter_0800114c"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800115c": {
            "entrypoint": "0x0800115c",
            "current_name": "get_data_value_0800115c",
            "code": "\nundefined4 get_data_value_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "FUN_0800115c": "get_data_value_0800115c"
            },
            "calling": [
                "FUN_08001530",
                "thunk_FUN_0800115c",
                "FUN_08001b58",
                "FUN_08004c18",
                "FUN_0800209c",
                "FUN_08001828",
                "FUN_08001938",
                "FUN_080014e2",
                "thunk_FUN_0800115c",
                "FUN_080015e8",
                "FUN_080016f4",
                "FUN_08001460"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001168": {
            "entrypoint": "0x08001168",
            "current_name": "FUNC_08001168",
            "code": "\nvoid FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001168": "FUNC_08001168"
            },
            "calling": [
                "FUN_08001b58",
                "thunk_FUN_08001168"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "configure_control_register_08001170",
            "code": "\n\n\nvoid configureControlRegister_08001170(uint parameter)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | 0x5fa0000 | (parameter & 7) << 8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001170": "configure_control_register_08001170",
                "param_1": "parameter"
            },
            "calling": [
                "FUN_08001128",
                "FUN_08004ccc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001194": {
            "entrypoint": "0x08001194",
            "current_name": "update_memory_08001194",
            "code": "\n\n\nvoid updateMemory_08001194(uint address,uint data,uint bitMask)\n\n{\n  undefined shiftedData;\n  uint numBits;\n  uint shiftAmount;\n  uint adjustedAmount;\n  \n  shiftAmount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  numBits = 7 - shiftAmount;\n  adjustedAmount = shiftAmount + 4;\n  if (3 < numBits) {\n    numBits = 4;\n  }\n  if (adjustedAmount < 7) {\n    shiftAmount = 0;\n  }\n  numBits = (1 << (numBits & 0xff)) - 1;\n  if (6 < adjustedAmount) {\n    shiftAmount = shiftAmount - 3;\n  }\n  shiftedData = (undefined)\n          ((bitMask & (1 << (shiftAmount & 0xff)) - 1U | (data & numBits) << (shiftAmount & 0xff)) << 4);\n  if (-1 < (int)address) {\n    shiftAmount = address + 0xe000e100;\n  }\n  else {\n    numBits = 0xe000ed14;\n    shiftAmount = address & 0xf;\n  }\n  if (-1 < (int)address) {\n    *(undefined *)(shiftAmount + 0x300) = shiftedData;\n  }\n  else {\n    *(undefined *)(numBits + shiftAmount) = shiftedData;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001194": "update_memory_08001194",
                "param_1": "address",
                "param_2": "data",
                "param_3": "bitMask",
                "uVar1": "shiftedData",
                "uVar2": "numBits",
                "uVar3": "shiftAmount",
                "uVar4": "adjustedAmount"
            },
            "calling": [
                "FUN_08004e7c",
                "FUN_08001104",
                "FUN_08004514",
                "FUN_08004ccc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011fc": {
            "entrypoint": "0x080011fc",
            "current_name": "set_bit_in_array_080011fc",
            "code": "\nvoid setBitInArray_080011fc(uint index)\n\n{\n  *(int *)((index >> 5) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011fc": "set_bit_in_array_080011fc",
                "param_1": "index"
            },
            "calling": [
                "FUN_08004e7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001214": {
            "entrypoint": "0x08001214",
            "current_name": "set_param_values_08001214",
            "code": "\n\n\nundefined4 set_param_values_08001214(int value)\n\n{\n  if (value - 1U < 0x1000000) {\n    _DAT_e000e014 = value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001214": "set_param_values_08001214",
                "param_1": "value"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001240": {
            "entrypoint": "0x08001240",
            "current_name": "set_flag_value_08001240",
            "code": "\n\n\nvoid setFlagValue_08001240(int flag)\n\n{\n  if (flag == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001240": "set_flag_value_08001240",
                "param_1": "flag"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001258": {
            "entrypoint": "0x08001258",
            "current_name": "FUNC_08001258",
            "code": "\nvoid FUNC_08001258(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001258": "FUNC_08001258"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001264": {
            "entrypoint": "0x08001264",
            "current_name": "update_bits_08001264",
            "code": "\n\n\nvoid updateBits_08001264(uint *bitsToModify,uint *bitsToUpdate)\n\n{\n  uint newValue;\n  uint bitMask;\n  uint valueToMatch;\n  int bitIndex;\n  uint i;\n  uint bit;\n  uint mask;\n  uint *outputBits;\n  int outputBitIndex;\n  \n  newValue = 0;\n  i = 0;\n  do {\n    bit = 1 << (i & 0xff);\n    bitMask = bit & *bitsToUpdate;\n    if (bit == bitMask) {\n      valueToMatch = bitsToUpdate[1];\n      if (valueToMatch == 0x12) {\n        newValue = bitsToUpdate[3] + 0xc;\n      }\n      else if (valueToMatch < 0x13) {\n        if (valueToMatch == 2) {\n          newValue = bitsToUpdate[3] + 8;\n        }\n        else if (valueToMatch < 3) {\n          if (valueToMatch == 0) goto LAB_080013be;\n          if (valueToMatch == 1) {\n            newValue = bitsToUpdate[3];\n          }\n        }\n        else if (valueToMatch == 3) {\n          newValue = 0;\n        }\n        else if (valueToMatch == 0x11) {\n          newValue = bitsToUpdate[3] + 4;\n        }\n      }\n      else {\n        if (valueToMatch != 0x10210000) {\n          if (valueToMatch < 0x10210001) {\n            if (valueToMatch != 0x10110000) {\n              mask = 0x10120000;\nLAB_080013b8:\n              if (valueToMatch != mask) goto LAB_080012a8;\n            }\n          }\n          else if ((valueToMatch != 0x10310000) && (valueToMatch != 0x10320000)) {\n            mask = 0x10220000;\n            goto LAB_080013b8;\n          }\n        }\nLAB_080013be:\n        newValue = bitsToUpdate[2];\n        if (newValue == 0) {\n          newValue = 4;\n        }\n        else {\n          if (newValue == 1) {\n            bitsToModify[4] = bit;\n          }\n          if (newValue != 1) {\n            bitsToModify[5] = bit;\n          }\n          newValue = 8;\n        }\n      }\nLAB_080012a8:\n      if (bitMask < 0x100) {\n        bit = *bitsToModify;\n        valueToMatch = i << 2;\n        outputBits = bitsToModify;\n      }\n      else {\n        bit = bitsToModify[1];\n        valueToMatch = (i + 0x3ffffff8) * 4;\n      }\n      if (0xff < bitMask) {\n        outputBits = bitsToModify + 1;\n      }\n      *outputBits = bit & ~(0xf << (valueToMatch & 0xff)) | newValue << (valueToMatch & 0xff);\n      outputBits = (uint *)bitsToUpdate[1];\n      if (((uint)outputBits & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        outputBitIndex = (i & 3) << 2;\n        if (bitsToModify == (uint *)0x40010800) {\n          bitIndex = 0;\n        }\n        else if (bitsToModify == (uint *)0x40010c00) {\n          bitIndex = 1;\n        }\n        else if (bitsToModify == (uint *)0x40011000) {\n          bitIndex = 2;\n        }\n        else if (bitsToModify == (uint *)0x40011400) {\n          bitIndex = 3;\n        }\n        else {\n          bitIndex = 4;\n        }\n        *(uint *)((i & 0xfffffffc) + 0x40010008) =\n             bitIndex << outputBitIndex | *(uint *)((i & 0xfffffffc) + 0x40010008) & ~(0xf << outputBitIndex);\n        if (((uint)outputBits & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bitMask;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bitMask;\n        }\n        if (((uint)outputBits & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bitMask;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bitMask;\n        }\n        if (((uint)outputBits & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bitMask;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bitMask;\n        }\n        if (((uint)outputBits & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bitMask;\n        }\n        else {\n          _DAT_4001040c = bitMask | _DAT_4001040c;\n        }\n      }\n    }\n    i = i + 1;\n    if (i == 0x10) {\n      return;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001264": "update_bits_08001264",
                "param_1": "bitsToModify",
                "param_2": "bitsToUpdate",
                "uVar1": "newValue",
                "uVar2": "bitMask",
                "uVar3": "valueToMatch",
                "iVar4": "bitIndex",
                "uVar5": "i",
                "uVar6": "bit",
                "uVar7": "mask",
                "unaff_r10": "outputBits",
                "iVar8": "outputBitIndex"
            },
            "calling": [
                "FUN_08004e14",
                "FUN_08004e7c",
                "FUN_08004d48",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001424": {
            "entrypoint": "0x08001424",
            "current_name": "set_param_value_08001424",
            "code": "\nvoid set_param_value_08001424(int base_address,int value,int shift)\n\n{\n  if (shift == 0) {\n    value = value << 0x10;\n  }\n  *(int *)(base_address + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001424": "set_param_value_08001424",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "shift"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003f3c",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800142e": {
            "entrypoint": "0x0800142e",
            "current_name": "bitwise_xor_modify_0800142e",
            "code": "\nvoid bitwiseXORModify_0800142e(int inputAddress,uint xorValue)\n\n{\n  *(uint *)(inputAddress + 0xc) = xorValue ^ *(uint *)(inputAddress + 0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800142e": "bitwise_xor_modify_0800142e",
                "param_1": "inputAddress",
                "param_2": "xorValue"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001436": {
            "entrypoint": "0x08001436",
            "current_name": "update_flag_if_set_08001436",
            "code": "\nundefined4 updateFlagIfSet_08001436(int *dataPointer)\n\n{\n  int value;\n  \n  value = *dataPointer;\n  if ((*(uint *)(value + 0x14) & 0x400) != 0) {\n    *(uint *)(value + 0x14) = *(uint *)(value + 0x14) & 0xfffffbff;\n    errorCode = 4;\n    *(undefined *)((int)dataPointer + 0x35) = 0x20;\n    *(undefined *)(dataPointer + 0xd) = 0;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001436": "update_flag_if_set_08001436",
                "param_1": "dataPointer",
                "iVar1": "value",
                "param_1[0xe]": "errorCode"
            },
            "calling": [
                "FUN_080014e2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "check_permissions_08001460",
            "code": "\nundefined4 checkPermissions_08001460(uint **ptrPermissionArray,uint permissionFlag,uint timeout)\n\n{\n  int currentTimestamp;\n  int newTimestamp;\n  uint permission;\n  uint *permissionPtr;\n  \n  currentTimestamp = FUN_0800115c();\n  do {\n    permissionPtr = *ptrPermissionArray;\n    if ((permissionFlag << 8) >> 0x18 == 1) {\n      permission = permissionPtr[5];\n    }\n    else {\n      permission = permissionPtr[6];\n    }\n    if ((permissionFlag & 0xffff & ~permission) == 0) {\n      return 0;\n    }\n    if ((int)(permissionPtr[5] << 0x15) < 0) {\n      *permissionPtr = *permissionPtr | 0x200;\n      permissionPtr[5] = permissionPtr[5] & 0xfffffbff;\n      ptrPermissionArray[0xe] = (uint *)0x4;\n      *(undefined *)((int)ptrPermissionArray + 0x35) = 0x20;\n      *(undefined *)(ptrPermissionArray + 0xd) = 0;\n      return 1;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (newTimestamp = FUN_0800115c(), (uint)(newTimestamp - currentTimestamp) <= timeout))));\n  *(undefined *)((int)ptrPermissionArray + 0x35) = 0x20;\n  *(undefined *)(ptrPermissionArray + 0xd) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001460": "check_permissions_08001460",
                "param_1": "ptrPermissionArray",
                "param_2": "permissionFlag",
                "param_3": "timeout",
                "iVar1": "currentTimestamp",
                "iVar2": "newTimestamp",
                "uVar3": "permission",
                "puVar4": "permissionPtr"
            },
            "calling": [
                "FUN_08001530",
                "FUN_080015e8"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014e2": {
            "entrypoint": "0x080014e2",
            "current_name": "check_condition_080014e2",
            "code": "\nundefined4 checkCondition_080014e2(int *array,uint limit)\n\n{\n  int startValue;\n  int returnValue;\n  \n  startValue = FUN_0800115c();\n  while( true ) {\n    if (*(int *)(*array + 0x14) << 0x18 < 0) {\n      return 0;\n    }\n    returnValue = FUN_08001436(array);\n    if (returnValue != 0) break;\n    if ((limit != 0xffffffff) &&\n       ((limit == 0 || (returnValue = FUN_0800115c(), limit < (uint)(returnValue - startValue))))) {\n      array[0xe] = array[0xe] | 0x20;\n      *(undefined *)((int)array + 0x35) = 0x20;\n      *(undefined *)(array + 0xd) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080014e2": "check_condition_080014e2",
                "param_1": "array",
                "param_2": "limit",
                "iVar1": "startValue",
                "iVar2": "returnValue"
            },
            "calling": [
                "FUN_08001530",
                "FUN_08001828",
                "FUN_080015e8"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001530": {
            "entrypoint": "0x08001530",
            "current_name": "update_flag_and_process_08001530",
            "code": "\nundefined4 updateFlagAndProcess_08001530(uint **ptrToPtr,uint inputValue1,uint inputValue2,int flag,uint param)\n\n{\n  int result1;\n  int result2;\n  uint *ptr;\n  uint **ptrToPtr;\n  uint value1;\n  uint value2;\n  \n  **ptrToPtr = **ptrToPtr | 0x100;\n  ptrToPtr = ptrToPtr;\n  value1 = inputValue1;\n  value2 = inputValue2;\n  result1 = FUN_0800115c();\n  do {\n    ptr = *ptrToPtr;\n    do {\n      if ((int)(ptr[5] << 0x1f) < 0) {\n        ptr[4] = inputValue1 & 0xfe;\n        result1 = FUN_08001460(ptrToPtr,0x10002,param,ptr,ptrToPtr,value1,value2);\n        if (result1 == 0) {\n          result1 = FUN_080014e2(ptrToPtr,param,(*ptrToPtr)[5],(*ptrToPtr)[6]);\n          if (result1 == 0) {\n            ptr = *ptrToPtr;\n            if (flag == 1) {\nLAB_080015ca:\n              ptr[4] = inputValue2 & 0xff;\n              return 0;\n            }\n            ptr[4] = inputValue2 >> 8;\n            result1 = FUN_080014e2(ptrToPtr,param);\n            if (result1 == 0) {\n              ptr = *ptrToPtr;\n              goto LAB_080015ca;\n            }\n          }\n          if (ptrToPtr[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          **ptrToPtr = **ptrToPtr | 0x200;\n        }\n        else if (ptrToPtr[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (param == 0xffffffff);\n    if ((param == 0) || (result2 = FUN_0800115c(), param < (uint)(result2 - result1))) {\n      *(undefined *)((int)ptrToPtr + 0x35) = 0x20;\n      *(undefined *)(ptrToPtr + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001530": "update_flag_and_process_08001530",
                "param_1": "ptrToPtr",
                "param_2": "inputValue1",
                "param_3": "inputValue2",
                "param_4": "flag",
                "param_5": "param",
                "iVar1": "result1",
                "iVar2": "result2",
                "puVar3": "ptr",
                "ppuVar4": "ptrToPtr",
                "uVar5": "value1",
                "uVar6": "value2"
            },
            "calling": [
                "FUN_08001828"
            ],
            "called": [
                "FUN_080014e2",
                "FUN_0800115c",
                "FUN_08001460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015e8": {
            "entrypoint": "0x080015e8",
            "current_name": "initialize_and_validate_080015e8",
            "code": "\nundefined4 initializeAndValidate_080015e8(uint **pointer,uint value1,uint value2,int option,uint timeout)\n\n{\n  int result;\n  int currentValue;\n  uint *pointerValue;\n  uint **pointerPointer;\n  uint value1Copy;\n  uint value2Copy;\n  \n  pointerValue = *pointer;\n  *pointerValue = *pointerValue | 0x400;\n  *pointerValue = *pointerValue | 0x100;\n  pointerPointer = pointer;\n  value1Copy = value1;\n  value2Copy = value2;\n  result = FUN_0800115c();\nLAB_0800160e:\n  pointerValue = *pointer;\n  while (-1 < (int)(pointerValue[5] << 0x1f)) {\n    if (timeout != 0xffffffff) goto code_r0x08001658;\n  }\n  pointerValue[4] = value1 & 0xfe;\n  result = FUN_08001460(pointer,0x10002,timeout,pointerValue,pointerPointer,value1Copy,value2Copy);\n  if (result != 0) goto LAB_080016ba;\n  result = FUN_080014e2(pointer,timeout,(*pointer)[5],(*pointer)[6]);\n  if (result == 0) {\n    pointerValue = *pointer;\n    if (option != 1) {\n      pointerValue[4] = value2 >> 8;\n      result = FUN_080014e2(pointer,timeout);\n      if (result != 0) goto LAB_08001642;\n      pointerValue = *pointer;\n    }\n    pointerValue[4] = value2 & 0xff;\n    result = FUN_080014e2(pointer,timeout);\n    if (result == 0) {\n      **pointer = **pointer | 0x100;\n      result = FUN_0800115c();\n      do {\n        do {\n          if ((int)((*pointer)[5] << 0x1f) < 0) {\n            (*pointer)[4] = value1 & 0xff | 1;\n            result = FUN_08001460(pointer,0x10002,timeout);\n            if (result == 0) {\n              return 0;\n            }\nLAB_080016ba:\n            if (pointer[0xe] != (uint *)0x4) {\n              return 3;\n            }\n            return 1;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (currentValue = FUN_0800115c(), (uint)(currentValue - result) <= timeout));\nLAB_0800165a:\n      *(undefined *)((int)pointer + 0x35) = 0x20;\n      *(undefined *)(pointer + 0xd) = 0;\n      return 3;\n    }\n  }\nLAB_08001642:\n  if (pointer[0xe] == (uint *)0x4) {\n    **pointer = **pointer | 0x200;\n    return 1;\n  }\n  return 3;\ncode_r0x08001658:\n  if ((timeout == 0) || (currentValue = FUN_0800115c(), timeout < (uint)(currentValue - result)))\n  goto LAB_0800165a;\n  goto LAB_0800160e;\n}\n\n",
            "renaming": {
                "FUN_080015e8": "initialize_and_validate_080015e8",
                "param_1": "pointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "option",
                "param_5": "timeout",
                "iVar1": "result",
                "iVar2": "currentValue",
                "puVar3": "pointerValue",
                "ppuVar4": "pointerPointer",
                "uVar5": "value1Copy",
                "uVar6": "value2Copy"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_080014e2",
                "FUN_08001460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016f4": {
            "entrypoint": "0x080016f4",
            "current_name": "check_and_update_value_080016f4",
            "code": "\nundefined4 check_and_update_value_080016f4(int *value_ptr,uint length)\n\n{\n  int initial_value;\n  int current_value;\n  \n  initial_value = FUN_0800115c();\n  while( true ) {\n    current_value = *value_ptr;\n    if ((*(uint *)(current_value + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(current_value + 0x14) << 0x1b < 0) break;\n    if ((length == 0) || (current_value = FUN_0800115c(), length < (uint)(current_value - initial_value))) {\n      value_ptr[0xe] = value_ptr[0xe] | 0x20;\n      *(undefined *)((int)value_ptr + 0x35) = 0x20;\n      *(undefined *)(value_ptr + 0xd) = 0;\n      return 3;\n    }\n  }\n  *(uint *)(current_value + 0x14) = *(uint *)(current_value + 0x14) & 0xffffffef;\n  value_ptr[0xe] = 0;\n  *(undefined *)(value_ptr + 0xd) = 0;\n  *(undefined *)((int)value_ptr + 0x35) = 0x20;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080016f4": "check_and_update_value_080016f4",
                "param_1": "value_ptr",
                "param_2": "length",
                "iVar1": "initial_value",
                "iVar2": "current_value"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001754": {
            "entrypoint": "0x08001754",
            "current_name": "initialize_memory_08001754",
            "code": "\nundefined4 initializeMemory_08001754(uint **memory)\n\n{\n  uint var1;\n  uint var2;\n  uint *ptr1;\n  uint *ptr2;\n  uint *ptr3;\n  uint var3;\n  undefined8 var4;\n  \n  if (memory != (uint **)0x0) {\n    if (*(char *)((int)memory + 0x35) == '\\0') {\n      *(undefined *)(memory + 0xd) = 0;\n      FUN_08004d48();\n    }\n    *(undefined *)((int)memory + 0x35) = 0x24;\n    **memory = **memory & 0xfffffffe;\n    var4 = FUN_08002220();\n    var2 = (uint)((ulonglong)var4 >> 0x20);\n    var1 = (uint)var4;\n    ptr2 = memory[1];\n    var3 = var1 / 1000000;\n    if ((uint *)0x186a0 < ptr2) {\n      var2 = 300;\n    }\n    ptr1 = *memory;\n    if ((uint *)0x186a0 < ptr2) {\n      var2 = var3 * var2;\n    }\n    ptr1[1] = var3;\n    if ((uint *)0x186a0 < ptr2) {\n      var3 = var2 / 1000;\n    }\n    ptr1[8] = var3 + 1;\n    if (ptr2 < (uint *)0x186a1) {\n      var1 = var1 / (uint)((int)ptr2 << 1);\n      if ((var1 & 0xfff) < 4) {\n        var1 = 4;\n      }\n    }\n    else {\n      if (memory[2] == (uint *)0x0) {\n        var1 = var1 / (uint)((int)ptr2 * 3) | 0x8000;\n      }\n      else {\n        var1 = var1 / (uint)((int)ptr2 * 0x19) | 0xc000;\n      }\n      if ((var1 & 0xfff) == 0) {\n        var1 = 1;\n      }\n    }\n    ptr2 = memory[8];\n    ptr3 = memory[7];\n    ptr1[7] = var1;\n    *ptr1 = (uint)ptr3 | (uint)ptr2;\n    ptr1[2] = (uint)memory[4] | (uint)memory[3];\n    ptr1[3] = (uint)memory[5] | (uint)memory[6];\n    *ptr1 = *ptr1 | 1;\n    memory[0xe] = (uint *)0x0;\n    *(undefined *)((int)memory + 0x35) = 0x20;\n    *(undefined *)((int)memory + 0x36) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001754": "initialize_memory_08001754",
                "param_1": "memory",
                "uVar1": "var1",
                "uVar2": "var2",
                "puVar3": "ptr1",
                "puVar4": "ptr2",
                "puVar5": "ptr3",
                "uVar6": "var3",
                "uVar7": "var4"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08002220",
                "FUN_08004d48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001828": {
            "entrypoint": "0x08001828",
            "current_name": "process_data_08001828",
            "code": "\nundefined4\nprocessData_08001828(uint **inputData,undefined4 arg1,undefined4 arg2,undefined4 arg3,byte *buffer,\n            short bufferLength,undefined4 arg4)\n\n{\n  int var1;\n  int var2;\n  uint *ptr3;\n  uint var4;\n  \n  if (*(char *)((int)inputData + 0x35) == ' ') {\n    if (buffer == (byte *)0x0) {\n      return 1;\n    }\n    if (bufferLength == 0) {\n      return 1;\n    }\n    var1 = FUN_0800115c();\n    do {\n      ptr3 = *inputData;\n      if ((~ptr3[6] & 2) != 0) {\n        if (*(char *)(inputData + 0xd) == '\\x01') {\n          return 2;\n        }\n        var4 = *ptr3;\n        *(undefined *)(inputData + 0xd) = 1;\n        *ptr3 = var4 & 0xfffff7ff;\n        *(undefined *)((int)inputData + 0x35) = 0x21;\n        *(undefined *)((int)inputData + 0x36) = 0x40;\n        inputData[0xe] = (uint *)0x0;\n        var1 = FUN_08001530(inputData,arg1,arg2,arg3,arg4);\n        if (var1 != 0) {\n          *(undefined *)(inputData + 0xd) = 0;\n          if (inputData[0xe] == (uint *)0x4) {\n            return 1;\n          }\n          return 3;\n        }\n        goto LAB_080018e2;\n      }\n      var2 = FUN_0800115c();\n    } while ((uint)(var2 - var1) < 0x2711);\n    *(undefined *)(inputData + 0xd) = 0;\n    *(undefined *)((int)inputData + 0x35) = 0x20;\n  }\n  return 2;\n  while (bufferLength != 0) {\nLAB_080018e2:\n    var1 = FUN_080014e2(inputData,arg4);\n    if (var1 != 0) goto LAB_080018ee;\n    ptr3 = *inputData;\n    ptr3[4] = (uint)*buffer;\n    if ((int)(ptr3[5] << 0x1d) < 0) {\n      if ((short)(bufferLength + -1) == 0) break;\n      bufferLength = bufferLength + -2;\n      ptr3[4] = (uint)buffer[1];\n      buffer = buffer + 2;\n    }\n    else {\n      buffer = buffer + 1;\n      bufferLength = bufferLength + -1;\n    }\n  }\n  var1 = FUN_080014e2(inputData,arg4);\n  if (var1 == 0) {\n    **inputData = **inputData | 0x200;\n    *(undefined *)(inputData + 0xd) = 0;\n    *(undefined *)((int)inputData + 0x35) = 0x20;\n    *(undefined *)((int)inputData + 0x36) = 0;\n    return 0;\n  }\nLAB_080018ee:\n  if (inputData[0xe] == (uint *)0x4) {\n    **inputData = **inputData | 0x200;\n    return 1;\n  }\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001828": "process_data_08001828",
                "param_1": "inputData",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "param_5": "buffer",
                "param_6": "bufferLength",
                "param_7": "arg4",
                "iVar1": "var1",
                "iVar2": "var2",
                "puVar3": "ptr3",
                "uVar4": "var4"
            },
            "calling": [
                "FUN_0800403c"
            ],
            "called": [
                "FUN_08001530",
                "FUN_0800115c",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001938": {
            "entrypoint": "0x08001938",
            "current_name": "process_data_08001938",
            "code": "\nundefined4\nprocessData_08001938(uint **data,undefined4 param1,undefined4 param2,undefined4 param3,\n            undefined *buffer,ushort length,uint timeout)\n\n{\n  undefined *tempPtr1;\n  int tempVar1;\n  int tempVar2;\n  uint *dataPtr;\n  uint tempVar3;\n  undefined *tempPtr2;\n  bool isTrue;\n  \n  if (*(char *)((int)data + 0x35) != ' ') {\n    return 2;\n  }\n  if (buffer == (undefined *)0x0) {\n    return 1;\n  }\n  if (length == 0) {\n    return 1;\n  }\n  tempVar1 = FUN_0800115c();\n  while (dataPtr = *data, (~dataPtr[6] & 2) == 0) {\n    tempVar2 = FUN_0800115c();\n    if (10000 < (uint)(tempVar2 - tempVar1)) {\n      *(undefined *)(data + 0xd) = 0;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(data + 0xd) == '\\x01') {\n    return 2;\n  }\n  tempVar3 = *dataPtr;\n  *(undefined *)(data + 0xd) = 1;\n  *dataPtr = tempVar3 & 0xfffff7ff;\n  *(undefined *)((int)data + 0x35) = 0x22;\n  *(undefined *)((int)data + 0x36) = 0x40;\n  data[0xe] = (uint *)0x0;\n  tempVar1 = FUN_080015e8(data,param1,param2,param3,timeout);\n  if (tempVar1 != 0) {\n    *(undefined *)(data + 0xd) = 0;\n    if (data[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  dataPtr = *data;\n  tempVar3 = *dataPtr;\n  if (length == 1) {\n    *dataPtr = tempVar3 & 0xfffffbff;\n    disableIRQinterrupts();\n    **data = **data | 0x200;\n    enableIRQinterrupts();\n    tempVar1 = FUN_080016f4(data,timeout);\n    if (tempVar1 == 0) {\n      *buffer = (char)(*data)[4];\nLAB_08001ab8:\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)((int)data + 0x36) = 0;\n      *(undefined *)(data + 0xd) = 0;\n      return 0;\n    }\nLAB_08001a18:\n    if (data[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (length == 2) {\n    *dataPtr = tempVar3 | 0x800;\n    disableIRQinterrupts();\n    **data = **data & 0xfffffbff;\n    enableIRQinterrupts();\n  }\n  else {\n    *dataPtr = tempVar3 | 0x400;\n    while (3 < length) {\n      tempVar1 = FUN_080016f4(data,timeout);\n      if (tempVar1 != 0) goto LAB_08001a18;\n      *buffer = (char)(*data)[4];\n      dataPtr = *data;\n      isTrue = (int)(dataPtr[5] << 0x1d) < 0;\n      if (isTrue) {\n        dataPtr = (uint *)dataPtr[4];\n        tempPtr2 = buffer + 2;\n        length = length - 2;\n      }\n      else {\n        tempPtr2 = buffer + 1;\n        length = length - 1;\n      }\n      tempPtr1 = buffer + 1;\n      buffer = tempPtr2;\n      if (isTrue) {\n        *tempPtr1 = (char)dataPtr;\n      }\n    }\n    if (length != 2) {\n      tempVar1 = FUN_0800115c();\n      do {\n        dataPtr = *data;\n        do {\n          if ((int)(dataPtr[5] << 0x1d) < 0) {\n            *dataPtr = *dataPtr & 0xfffffbff;\n            disableIRQinterrupts();\n            *buffer = (char)(*data)[4];\n            tempVar1 = FUN_0800115c();\n            goto LAB_08001b3a;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (tempVar2 = FUN_0800115c(), (uint)(tempVar2 - tempVar1) <= timeout));\n      goto LAB_08001afa;\n    }\n  }\n  tempVar1 = FUN_0800115c();\n  do {\n    do {\n      if ((int)((*data)[5] << 0x1d) < 0) {\n        disableIRQinterrupts();\n        dataPtr = *data;\n        *dataPtr = *dataPtr | 0x200;\n        *buffer = (char)dataPtr[4];\n        enableIRQinterrupts();\n        buffer[1] = (char)(*data)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (tempVar2 = FUN_0800115c(), (uint)(tempVar2 - tempVar1) <= timeout));\nLAB_08001afa:\n  *(undefined *)((int)data + 0x35) = 0x20;\n  *(undefined *)(data + 0xd) = 0;\n  return 3;\nLAB_08001b3a:\n  do {\n    dataPtr = *data;\n    do {\n      if ((int)(dataPtr[5] << 0x1d) < 0) {\n        *dataPtr = *dataPtr | 0x200;\n        buffer[1] = (char)dataPtr[4];\n        enableIRQinterrupts();\n        buffer[2] = (char)(*data)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (tempVar2 = FUN_0800115c(), (uint)(tempVar2 - tempVar1) <= timeout));\n  goto LAB_08001afa;\n}\n\n",
            "renaming": {
                "FUN_08001938": "process_data_08001938",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "buffer",
                "param_6": "length",
                "param_7": "timeout",
                "puVar1": "tempPtr1",
                "iVar2": "tempVar1",
                "iVar3": "tempVar2",
                "puVar4": "dataPtr",
                "uVar5": "tempVar3",
                "puVar6": "tempPtr2",
                "bVar7": "isTrue"
            },
            "calling": [
                "FUN_0800407c",
                "FUN_080040b8"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_080016f4",
                "FUN_080015e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b58": {
            "entrypoint": "0x08001b58",
            "current_name": "check_flags_08001b58",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\n\nundefined4 check_flags_08001b58(int *parameters)\n\n{\n  int variable_1;\n  int variable_2;\n  \n  if (*parameters << 0x1f < 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((int)(_DAT_40021004 << 0xf) < 0)))) {\n      if (((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) && (parameters[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      variable_1 = parameters[1];\n      if (variable_1 == 0x10000) {\nLAB_08001c1e:\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else {\n        if (variable_1 == 0) {\n          _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n          variable_1 = FUN_0800115c();\n          while ((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) {\n            variable_2 = FUN_0800115c();\n            if (100 < (uint)(variable_2 - variable_1)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (variable_1 == 0x50000) {\n          _DAT_40021000 = _DAT_40021000 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      variable_1 = FUN_0800115c();\n      while (-1 < (int)((_DAT_40021000 >> 0x11) << 0x1f)) {\n        variable_2 = FUN_0800115c();\n        if (100 < (uint)(variable_2 - variable_1)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  if (*parameters << 0x1e < 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && (-1 < (int)(_DAT_40021004 << 0xf))))) {\n      if (((int)((_DAT_40021000 >> 1) << 0x1f) < 0) && (parameters[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      iRam42420000 = parameters[4];\n      if (iRam42420000 == 0) {\n        variable_1 = FUN_0800115c();\n        while ((int)((_DAT_40021000 >> 1) << 0x1f) < 0) {\n          variable_2 = FUN_0800115c();\n          if (2 < (uint)(variable_2 - variable_1)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      iRam42420000 = 1;\n      variable_1 = FUN_0800115c();\n      while (-1 < (int)((_DAT_40021000 >> 1) << 0x1f)) {\n        variable_2 = FUN_0800115c();\n        if (2 < (uint)(variable_2 - variable_1)) {\n          return 3;\n        }\n      }\n    }\n    _DAT_40021000 = parameters[5] << 3 | _DAT_40021000 & 0xffffff07;\n  }\nLAB_08001b6c:\n  if (*parameters << 0x1c < 0) {\n    iRam42420480 = parameters[6];\n    if (iRam42420480 == 0) {\n      variable_1 = FUN_0800115c();\n      while ((int)((_DAT_40021024 >> 1) << 0x1f) < 0) {\n        variable_2 = FUN_0800115c();\n        if (2 < (uint)(variable_2 - variable_1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iRam42420480 = 1;\n      variable_1 = FUN_0800115c();\n      while (-1 < (int)((_DAT_40021024 >> 1) << 0x1f)) {\n        variable_2 = FUN_0800115c();\n        if (2 < (uint)(variable_2 - variable_1)) {\n          return 3;\n        }\n      }\n      FUNC_08001168(1);\n    }\n  }\n  if (-1 < *parameters << 0x1d) goto LAB_08001bc2;\n  _DAT_4002101c = _DAT_4002101c | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0x100;\n  variable_1 = FUN_0800115c();\n  while (-1 < (int)(_DAT_40007000 << 0x17)) {\n    variable_2 = FUN_0800115c();\n    if (100 < (uint)(variable_2 - variable_1)) {\n      return 3;\n    }\n  }\n  variable_1 = parameters[3];\n  if (variable_1 == 1) {\nLAB_08001e1a:\n    _DAT_40021020 = _DAT_40021020 | 1;\n  }\n  else {\n    if (variable_1 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n      variable_1 = FUN_0800115c();\n      while ((int)((_DAT_40021020 >> 1) << 0x1f) < 0) {\n        variable_2 = FUN_0800115c();\n        if (5000 < (uint)(variable_2 - variable_1)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (variable_1 == 5) {\n      _DAT_40021020 = _DAT_40021020 | 4;\n      goto LAB_08001e1a;\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n  }\n  variable_1 = FUN_0800115c();\n  while (-1 < (int)((_DAT_40021020 >> 1) << 0x1f)) {\n    variable_2 = FUN_0800115c();\n    if (5000 < (uint)(variable_2 - variable_1)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  if (parameters[7] == 0) {\n    return 0;\n  }\n  if ((_DAT_40021004 & 0xc) != 8) {\n    if (parameters[7] != 2) {\n      uRam42420060 = 0;\n      variable_1 = FUN_0800115c();\n      do {\n        if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n          return 0;\n        }\n        variable_2 = FUN_0800115c();\n      } while ((uint)(variable_2 - variable_1) < 3);\n      return 3;\n    }\n    uRam42420060 = 0;\n    variable_1 = FUN_0800115c();\n    do {\n      if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n        if (parameters[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | parameters[2];\n        }\n        _DAT_40021004 = parameters[8] | parameters[9] | _DAT_40021004 & 0xffc2ffff;\n        uRam42420060 = 1;\n        variable_1 = FUN_0800115c();\n        do {\n          if ((int)((_DAT_40021000 >> 0x19) << 0x1f) < 0) {\n            return 0;\n          }\n          variable_2 = FUN_0800115c();\n        } while ((uint)(variable_2 - variable_1) < 3);\n        return 3;\n      }\n      variable_2 = FUN_0800115c();\n    } while ((uint)(variable_2 - variable_1) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001b58": "check_flags_08001b58",
                "param_1": "parameters",
                "iVar1": "variable_1",
                "iVar2": "variable_2"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002008": {
            "entrypoint": "0x08002008",
            "current_name": "calculate_mpu9250_clock_08002008",
            "code": "\n\n\nint calculateMPU9250Clock_08002008(void)\n\n{\n  undefined4 firstValue;\n  int clockValue;\n  undefined4 secondValue;\n  undefined4 *dataPointer;\n  uint clockFrequency;\n  undefined4 *resultPointer;\n  byte byteArray [4];\n  undefined4 valueArray [5];\n  \n  dataPointer = &DAT_080072f0;\n  resultPointer = valueArray;\n  do {\n    firstValue = *dataPointer;\n    secondValue = dataPointer[1];\n    dataPointer = dataPointer + 2;\n    *resultPointer = firstValue;\n    resultPointer[1] = secondValue;\n    resultPointer = resultPointer + 2;\n  } while (dataPointer != (undefined4 *)\"../Src/MPU9250.c\");\n  byteArray[0] = 1;\n  byteArray[1] = 2;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((int)(_DAT_40021004 << 0xf) < 0) {\n      clockFrequency = 8000000 / byteArray[(_DAT_40021004 & 0x20000) >> 0x11];\n    }\n    else {\n      clockFrequency = 4000000;\n    }\n    clockValue = clockFrequency * *(byte *)((int)valueArray + ((_DAT_40021004 & 0x3c0000) >> 0x12));\n  }\n  else {\n    clockValue = 8000000;\n  }\n  return clockValue;\n}\n\n",
            "renaming": {
                "FUN_08002008": "calculate_mpu9250_clock_08002008",
                "uVar1": "firstValue",
                "iVar2": "clockValue",
                "uVar3": "secondValue",
                "puVar4": "dataPointer",
                "uVar5": "clockFrequency",
                "puVar6": "resultPointer",
                "local_24": "byteArray",
                "local_20": "valueArray"
            },
            "calling": [
                "FUN_0800209c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800209c": {
            "entrypoint": "0x0800209c",
            "current_name": "process_data_0800209c",
            "code": "\n\n\nundefined4 process_data_0800209c(uint *data_ptr,uint data_size)\n\n{\n  char flag1;\n  char flag2;\n  int temp_var1;\n  uint temp_var2;\n  int temp_var3;\n  uint temp_var4;\n  \n  if ((data_size <= (_DAT_40022000 & 7)) ||\n     (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | data_size, data_size == (data_size & 7))) {\n    if ((int)(*data_ptr << 0x1e) < 0) {\n      _DAT_40021004 = _DAT_40021004 & 0xffffff0f | data_ptr[2];\n    }\n    temp_var1 = *data_ptr << 0x1f;\n    if (-1 < temp_var1) {\nLAB_080020ba:\n      if ((data_size < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | data_size, data_size != (data_size & 7))) {\n        return 1;\n      }\n      if ((*data_ptr & 4) != 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | data_ptr[3];\n      }\n      if ((int)(*data_ptr << 0x1c) < 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | data_ptr[4] << 3;\n      }\n      temp_var2 = FUN_08002008();\n      DAT_200001bc = temp_var2 >> (&DAT_08007361)[(_DAT_40021004 & 0xf0) >> 4];\n      FUN_08001104(0);\n      return 0;\n    }\n    temp_var2 = data_ptr[1];\n    if (temp_var2 == 1) {\n      flag2 = '\\x01';\n      flag1 = '\\0';\n    }\n    else {\n      temp_var4 = _DAT_40021000;\n      if (temp_var2 == 2) goto LAB_08002176;\n      flag2 = '\\0';\n      flag1 = '\\x01';\n    }\n    temp_var4 = (_DAT_40021000 >>\n            (LZCOUNT((uint)(byte)(flag1 << 6) << 0x18 | (uint)(byte)(flag2 << 6) << 8) & 0x1fU)) <<\n            0x1f;\n    if ((int)temp_var4 < 0) {\nLAB_08002176:\n      _DAT_40021004 = _DAT_40021004 & 0xfffffffc | temp_var2;\n      temp_var1 = FUN_0800115c(temp_var1,temp_var4);\n      if (data_ptr[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_080020ba;\n          temp_var3 = FUN_0800115c();\n        } while ((uint)(temp_var3 - temp_var1) < 0x1389);\n      }\n      else if (data_ptr[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_080020ba;\n          temp_var3 = FUN_0800115c();\n        } while ((uint)(temp_var3 - temp_var1) < 0x1389);\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_080020ba;\n          temp_var3 = FUN_0800115c();\n        } while ((uint)(temp_var3 - temp_var1) < 0x1389);\n      }\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800209c": "process_data_0800209c",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "cVar1": "flag1",
                "cVar2": "flag2",
                "iVar3": "temp_var1",
                "uVar4": "temp_var2",
                "iVar5": "temp_var3",
                "uVar6": "temp_var4"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_08001104",
                "FUN_0800115c",
                "FUN_08002008"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002214": {
            "entrypoint": "0x08002214",
            "current_name": "get_global_value_08002214",
            "code": "\nundefined4 get_global_value_08002214(void)\n\n{\n  return DAT_200001bc;\n}\n\n",
            "renaming": {
                "FUN_08002214": "get_global_value_08002214"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002220": {
            "entrypoint": "0x08002220",
            "current_name": "extracted_data_08002220",
            "code": "\n\n\nuint extractedData_08002220(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x700) >> 8];\n}\n\n",
            "renaming": {
                "FUN_08002220": "extracted_data_08002220"
            },
            "calling": [
                "FUN_08001754",
                "FUN_080025e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002250": {
            "entrypoint": "0x08002250",
            "current_name": "bit_shifted_data_value_08002250",
            "code": "\n\n\nuint bitShiftedDataValue_08002250(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x3800) >> 0xb];\n}\n\n",
            "renaming": {
                "FUN_08002250": "bit_shifted_data_value_08002250"
            },
            "calling": [
                "FUN_080025e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002280": {
            "entrypoint": "0x08002280",
            "current_name": "update_configuration_08002280",
            "code": "\nvoid updateConfiguration_08002280(int configPtr,uint *dataPtr)\n\n{\n  uint updatedFlag;\n  uint value1;\n  uint value2;\n  \n  *(uint *)(configPtr + 0x20) = *(uint *)(configPtr + 0x20) & 0xfffffffe;\n  value1 = *(uint *)(configPtr + 4);\n  value2 = *dataPtr;\n  updatedFlag = *(uint *)(configPtr + 0x20) & 0xfffffffd | dataPtr[2];\n  if (configPtr == 0x40012c00) {\n    updatedFlag = (updatedFlag & 0xfffffff7 | dataPtr[3]) & 0xfffffffb;\n    value1 = value1 & 0xfffffcff | dataPtr[5] | dataPtr[6];\n  }\n  *(uint *)(configPtr + 4) = value1;\n  *(uint *)(configPtr + 0x18) = *(uint *)(configPtr + 0x18) & 0xffffff8c | value2;\n  *(uint *)(configPtr + 0x34) = dataPtr[1];\n  *(uint *)(configPtr + 0x20) = updatedFlag;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002280": "update_configuration_08002280",
                "param_1": "configPtr",
                "param_2": "dataPtr",
                "uVar1": "updatedFlag",
                "uVar2": "value1",
                "uVar3": "value2"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022d0": {
            "entrypoint": "0x080022d0",
            "current_name": "update_config_080022d0",
            "code": "\nvoid updateConfig_080022d0(int configAddress,uint *configData)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  uint originalValue;\n  \n  *(uint *)(configAddress + 0x20) = *(uint *)(configAddress + 0x20) & 0xfffffeff;\n  updatedValue2 = *(uint *)(configAddress + 4);\n  originalValue = *configData;\n  updatedValue1 = *(uint *)(configAddress + 0x20) & 0xfffffdff | configData[2] << 8;\n  if (configAddress == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xfffff7ff | configData[3] << 8) & 0xfffffbff;\n    updatedValue2 = updatedValue2 & 0xffffcfff | (configData[5] | configData[6]) << 4;\n  }\n  *(uint *)(configAddress + 4) = updatedValue2;\n  *(uint *)(configAddress + 0x1c) = *(uint *)(configAddress + 0x1c) & 0xffffff8c | originalValue;\n  *(uint *)(configAddress + 0x3c) = configData[1];\n  *(uint *)(configAddress + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022d0": "update_config_080022d0",
                "param_1": "configAddress",
                "param_2": "configData",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "uVar3": "originalValue"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002324": {
            "entrypoint": "0x08002324",
            "current_name": "update_params_08002324",
            "code": "\nvoid updateParams_08002324(int paramAddr,int *paramValues)\n\n{\n  uint value1;\n  int value2;\n  int value3;\n  int defaultValue;\n  \n  *(uint *)(paramAddr + 0x20) = *(uint *)(paramAddr + 0x20) & 0xffffefff;\n  value1 = *(uint *)(paramAddr + 4);\n  value2 = *paramValues;\n  value3 = paramValues[2];\n  defaultValue = 0x40012c00;\n  if (paramAddr == 0x40012c00) {\n    defaultValue = paramValues[5];\n    value1 = value1 & 0xffffbfff;\n  }\n  if (paramAddr == 0x40012c00) {\n    value1 = value1 | defaultValue << 6;\n  }\n  *(uint *)(paramAddr + 4) = value1;\n  *(uint *)(paramAddr + 0x1c) = *(uint *)(paramAddr + 0x1c) & 0xffff8cff | value2 << 8;\n  *(int *)(paramAddr + 0x40) = paramValues[1];\n  *(uint *)(paramAddr + 0x20) = *(uint *)(paramAddr + 0x20) & 0xffffdfff | value3 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002324": "update_params_08002324",
                "param_1": "paramAddr",
                "param_2": "paramValues",
                "uVar1": "value1",
                "iVar2": "value2",
                "iVar3": "value3",
                "iVar4": "defaultValue"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002368": {
            "entrypoint": "0x08002368",
            "current_name": "update_memory_08002368",
            "code": "\nvoid updateMemory_08002368(uint *memoryPointer,uint *dataPointer)\n\n{\n  uint updatedValue;\n  \n  updatedValue = *memoryPointer;\n  if (((((memoryPointer == (uint *)0x40012c00) || (memoryPointer == (uint *)0x40000000)) ||\n       (memoryPointer == (uint *)0x40000400)) || (memoryPointer == (uint *)0x40000800)) &&\n     (((updatedValue = updatedValue & 0xffffff8f | dataPointer[1], memoryPointer == (uint *)0x40012c00 ||\n       (memoryPointer == (uint *)0x40000000)) ||\n      ((memoryPointer == (uint *)0x40000400 || (memoryPointer == (uint *)0x40000800)))))) {\n    updatedValue = updatedValue & 0xfffffcff | dataPointer[3];\n  }\n  *memoryPointer = updatedValue;\n  memoryPointer[0xb] = dataPointer[2];\n  memoryPointer[10] = *dataPointer;\n  updatedValue = 0x40012c00;\n  if (memoryPointer == (uint *)0x40012c00) {\n    updatedValue = dataPointer[4];\n  }\n  if (memoryPointer == (uint *)0x40012c00) {\n    memoryPointer[0xc] = updatedValue;\n  }\n  memoryPointer[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002368": "update_memory_08002368",
                "param_1": "memoryPointer",
                "param_2": "dataPointer",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023d0": {
            "entrypoint": "0x080023d0",
            "current_name": "process_param_080023d0",
            "code": "\nundefined4 process_param_080023d0(undefined4 *param)\n\n{\n  if (param != (undefined4 *)0x0) {\n    if (*(char *)((int)param + 0x39) == '\\0') {\n      *(undefined *)(param + 0xe) = 0;\n      FUN_08004d8c();\n    }\n    *(undefined *)((int)param + 0x39) = 2;\n    FUN_08002368(*param,param + 1);\n    *(undefined *)((int)param + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080023d0": "process_param_080023d0",
                "param_1": "param"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08002368",
                "FUN_08004d8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002404": {
            "entrypoint": "0x08002404",
            "current_name": "update_parameters_08002404",
            "code": "\nvoid updateParameters_08002404(int baseAddress,int *parameters)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  int parameterValue;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffffef;\n  updatedValue2 = *(uint *)(baseAddress + 4);\n  parameterValue = *parameters;\n  updatedValue1 = *(uint *)(baseAddress + 0x20) & 0xffffffdf | param_2_index2 << 4;\n  if (baseAddress == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xffffff7f | param_2_index3 << 4) & 0xffffffbf;\n    updatedValue2 = updatedValue2 & 0xfffff3ff | (parameters[5] | parameters[6]) << 2;\n  }\n  *(uint *)(baseAddress + 4) = updatedValue2;\n  *(uint *)(baseAddress + 0x18) = *(uint *)(baseAddress + 0x18) & 0xffff8cff | parameterValue << 8;\n  *(int *)(baseAddress + 0x38) = parameters[1];\n  *(uint *)(baseAddress + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002404": "update_parameters_08002404",
                "param_1": "baseAddress",
                "param_2": "parameters",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "iVar3": "parameterValue",
                "param_2[2]": "param_2_index2",
                "param_2[3]": "param_2_index3"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800245c": {
            "entrypoint": "0x0800245c",
            "current_name": "update_flags_0800245c",
            "code": "\nvoid updateFlags_0800245c(int *arr,undefined4 val1,undefined4 val2)\n\n{\n  int temp1;\n  int temp2;\n  int temp3;\n  int temp4;\n  int temp5;\n  uint flags1;\n  int flags2;\n  \n  if (*(char *)(arr + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)arr + 0x39) = 2;\n  *(undefined *)(arr + 0xe) = 1;\n  switch(val2) {\n  case 0:\n    FUN_08002280(*arr);\n    flags2 = *arr;\n    flags1 = *(uint *)(temp1 + 0x10);\n    *(uint *)(flags2 + 0x18) = *(uint *)(flags2 + 0x18) | 8;\n    *(uint *)(flags2 + 0x18) = *(uint *)(flags2 + 0x18) & 0xfffffffb;\n    flags1 = *(uint *)(flags2 + 0x18) | flags1;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    FUN_08002404(*arr);\n    flags2 = *arr;\n    temp5 = *(int *)(temp2 + 0x10);\n    *(uint *)(flags2 + 0x18) = *(uint *)(flags2 + 0x18) | 0x800;\n    *(uint *)(flags2 + 0x18) = *(uint *)(flags2 + 0x18) & 0xfffffbff;\n    flags1 = *(uint *)(flags2 + 0x18) | temp5 << 8;\n    break;\n  case 8:\n    FUN_080022d0(*arr);\n    flags2 = *arr;\n    flags1 = *(uint *)(temp3 + 0x10);\n    *(uint *)(flags2 + 0x1c) = *(uint *)(flags2 + 0x1c) | 8;\n    *(uint *)(flags2 + 0x1c) = *(uint *)(flags2 + 0x1c) & 0xfffffffb;\n    flags1 = *(uint *)(flags2 + 0x1c) | flags1;\n    goto LAB_080024fa;\n  case 0xc:\n    FUN_08002324(*arr);\n    flags2 = *arr;\n    temp5 = *(int *)(temp4 + 0x10);\n    *(uint *)(flags2 + 0x1c) = *(uint *)(flags2 + 0x1c) | 0x800;\n    *(uint *)(flags2 + 0x1c) = *(uint *)(flags2 + 0x1c) & 0xfffffbff;\n    flags1 = *(uint *)(flags2 + 0x1c) | temp5 << 8;\nLAB_080024fa:\n    *(uint *)(flags2 + 0x1c) = flags1;\n    goto switchD_0800247a_caseD_1;\n  }\n  *(uint *)(flags2 + 0x18) = flags1;\nswitchD_0800247a_caseD_1:\n  *(undefined *)((int)arr + 0x39) = 1;\n  *(undefined *)(arr + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800245c": "update_flags_0800245c",
                "param_1": "arr",
                "param_2": "val1",
                "param_3": "val2",
                "extraout_r1": "temp1",
                "extraout_r1_00": "temp2",
                "extraout_r1_01": "temp3",
                "extraout_r1_02": "temp4",
                "iVar1": "temp5",
                "uVar2": "flags1",
                "iVar3": "flags2"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_080022d0",
                "FUN_08002324",
                "FUN_08002404",
                "FUN_08002280"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002520": {
            "entrypoint": "0x08002520",
            "current_name": "update_bit_value_08002520",
            "code": "\nvoid updateBitValue_08002520(int address,uint bitPosition,int newValue)\n\n{\n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(address + 0x20) = newValue << (bitPosition & 0xff) | *(uint *)(address + 0x20);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002520": "update_bit_value_08002520",
                "param_1": "address",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_08002538"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002538": {
            "entrypoint": "0x08002538",
            "current_name": "update_memory_08002538",
            "code": "\nundefined4 updateMemory_08002538(uint **memory,undefined4 value)\n\n{\n  uint newValue;\n  uint *pointer;\n  \n  FUN_08002520(*memory,value,1);\n  pointer = *memory;\n  newValue = 0x40012c00;\n  if (pointer == (uint *)0x40012c00) {\n    newValue = memoryData | 0x8000;\n  }\n  if (pointer == (uint *)0x40012c00) {\n    pointer[0x11] = newValue;\n  }\n  *pointer = *pointer | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002538": "update_memory_08002538",
                "param_1": "memory",
                "param_2": "value",
                "uVar1": "newValue",
                "puVar2": "pointer",
                "uRam40012c44": "memoryData"
            },
            "calling": [
                "FUN_08003ff4"
            ],
            "called": [
                "FUN_08002520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002564": {
            "entrypoint": "0x08002564",
            "current_name": "update_data_08002564",
            "code": "\nundefined4 updateData_08002564(int *dataPtr,uint *paramArrayPtr)\n\n{\n  undefined4 returnValue;\n  \n  returnValue = 2;\n  if (*(char *)(dataPtr + 0xe) != '\\x01') {\n    *(undefined *)((int)dataPtr + 0x39) = 2;\n    *(uint *)(*dataPtr + 0x44) =\n         *paramArrayPtr | paramArrayPtr[1] | paramArrayPtr[2] | paramArrayPtr[3] | paramArrayPtr[4] | paramArrayPtr[5] | paramArrayPtr[6];\n    *(undefined *)((int)dataPtr + 0x39) = 1;\n    returnValue = 0;\n    *(undefined *)(dataPtr + 0xe) = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002564": "update_data_08002564",
                "param_1": "dataPtr",
                "param_2": "paramArrayPtr",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025a4": {
            "entrypoint": "0x080025a4",
            "current_name": "update_flags_and_return_status_080025a4",
            "code": "\nundefined4 updateFlagsAndReturnStatus_080025a4(int *parameter1,uint *parameter2)\n\n{\n  uint updatedVar1;\n  undefined4 returnValue;\n  int initialVar;\n  uint updatedVar4;\n  \n  returnValue = 2;\n  if (*(char *)(parameter1 + 0xe) != '\\x01') {\n    *(undefined *)((int)parameter1 + 0x39) = 2;\n    initialVar = *parameter1;\n    updatedVar4 = *parameter2;\n    updatedVar1 = parameter2[1];\n    *(uint *)(initialVar + 4) = *(uint *)(initialVar + 4) & 0xffffff8f;\n    *(uint *)(initialVar + 4) = *(uint *)(initialVar + 4) | updatedVar4;\n    *(uint *)(initialVar + 8) = *(uint *)(initialVar + 8) & 0xffffff7f;\n    *(uint *)(initialVar + 8) = *(uint *)(initialVar + 8) | updatedVar1;\n    *(undefined *)((int)parameter1 + 0x39) = 1;\n    returnValue = 0;\n    *(undefined *)(parameter1 + 0xe) = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080025a4": "update_flags_and_return_status_080025a4",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "uVar1": "updatedVar1",
                "uVar2": "returnValue",
                "iVar3": "initialVar",
                "uVar4": "updatedVar4"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "update_values_080025e8",
            "code": "\nvoid updateValues_080025e8(int *inputArray)\n\n{\n  int tempVar1;\n  int tempVar2;\n  uint tempVar3;\n  int tempVar4;\n  int tempVar5;\n  int ptr;\n  \n  ptr = *inputArray;\n  tempVar3 = inputArray[4];\n  *(uint *)(ptr + 0x10) = *(uint *)(ptr + 0x10) & 0xffffcfff | inputArray[3];\n  *(uint *)(ptr + 0xc) = inputArray[2] | tempVar3 | inputArray[5] | *(uint *)(ptr + 0xc) & 0xffffe9f3;\n  *(uint *)(ptr + 0x14) = *(uint *)(ptr + 0x14) & 0xfffffcff | inputArray[6];\n  if (ptr == 0x40013800) {\n    tempVar1 = FUN_08002250();\n    tempVar4 = (int)(((ulonglong)(uint)(tempVar1 * 0x19) / (ulonglong)(uint)(inputArray[1] << 2)) / 100);\n    tempVar1 = FUN_08002250();\n    tempVar5 = inputArray[1];\n    tempVar2 = FUN_08002250();\n    tempVar2 = (uint)(tempVar1 * 0x19) / (uint)(tempVar5 << 2) +\n            (int)(((ulonglong)(uint)(tempVar2 * 0x19) / (ulonglong)(uint)(inputArray[1] << 2)) / 100) *\n            -100;\n    tempVar1 = FUN_08002250();\n    tempVar3 = (uint)(tempVar1 * 0x19) / (uint)(inputArray[1] << 2);\n    tempVar1 = FUN_08002250();\n  }\n  else {\n    tempVar1 = FUN_08002220();\n    tempVar4 = (int)(((ulonglong)(uint)(tempVar1 * 0x19) / (ulonglong)(uint)(inputArray[1] << 2)) / 100);\n    tempVar1 = FUN_08002220();\n    tempVar5 = inputArray[1];\n    tempVar2 = FUN_08002220();\n    tempVar2 = (uint)(tempVar1 * 0x19) / (uint)(tempVar5 << 2) +\n            (int)(((ulonglong)(uint)(tempVar2 * 0x19) / (ulonglong)(uint)(inputArray[1] << 2)) / 100) *\n            -100;\n    tempVar1 = FUN_08002220();\n    tempVar3 = (uint)(tempVar1 * 0x19) / (uint)(inputArray[1] << 2);\n    tempVar1 = FUN_08002220();\n  }\n  *(uint *)(ptr + 8) =\n       (((tempVar3 + (int)(((ulonglong)(uint)(tempVar1 * 0x19) / (ulonglong)(uint)(inputArray[1] << 2)) / 100\n                       ) * -100) * 0x10 + 0x32) / 100 & 0xf | (tempVar2 * 0x10 + 0x32U) / 100 & 0xf0) +\n       tempVar4 * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "update_values_080025e8",
                "param_1": "inputArray",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2",
                "uVar3": "tempVar3",
                "iVar4": "tempVar4",
                "iVar5": "tempVar5",
                "iVar6": "ptr"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08002220",
                "FUN_08002250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002724": {
            "entrypoint": "0x08002724",
            "current_name": "check_and_update_params_08002724",
            "code": "\nundefined4 checkAndUpdateParams_08002724(int *params)\n\n{\n  int var1;\n  \n  if (params != (int *)0x0) {\n    if (*(char *)((int)params + 0x39) == '\\0') {\n      *(undefined *)(params + 0xe) = 0;\n      FUN_08004e7c();\n    }\n    *(undefined *)((int)params + 0x39) = 2;\n    *(uint *)(*params + 0xc) = *(uint *)(*params + 0xc) & 0xffffdfff;\n    FUN_080025e8(params);\n    var1 = *params;\n    *(uint *)(var1 + 0x10) = *(uint *)(var1 + 0x10) & 0xffffb7ff;\n    *(uint *)(var1 + 0x14) = *(uint *)(var1 + 0x14) & 0xffffffd5;\n    *(uint *)(var1 + 0xc) = *(uint *)(var1 + 0xc) | 0x2000;\n    params[0xf] = 0;\n    *(undefined *)((int)params + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002724": "check_and_update_params_08002724",
                "param_1": "params",
                "iVar1": "var1"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004e7c",
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800290a": {
            "entrypoint": "0x0800290a",
            "current_name": "FUNC_0800290a",
            "code": "\nvoid FUNC_0800290a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800290a": "FUNC_0800290a"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800290c": {
            "entrypoint": "0x0800290c",
            "current_name": "process_data_0800290c",
            "code": "\nundefined4 processData_0800290c(int *inputArray)\n\n{\n  byte tempByte;\n  int var1;\n  uint var2;\n  undefined4 var3;\n  short var4;\n  ushort *ptr1;\n  ushort *ptr2;\n  bool condition;\n  \n  if ((*(byte *)((int)inputArray + 0x39) & 0xef) != 0x22) {\n    return 2;\n  }\n  var1 = *inputArray;\n  ptr1 = (ushort *)inputArray[10];\n  if (inputArray[2] == 0x1000) {\n    if (inputArray[4] == 0) {\n      ptr2 = ptr1 + 1;\n      *ptr1 = (ushort)((uint)(*(int *)(var1 + 4) << 0x17) >> 0x17);\n    }\n    else {\n      ptr2 = (ushort *)((int)ptr1 + 1);\n      *ptr1 = (ushort)*(int *)(var1 + 4) & 0xff;\n    }\n    inputArray[10] = (int)ptr2;\n  }\n  else {\n    if (inputArray[4] == 0) {\n      tempByte = (byte)*(undefined4 *)(var1 + 4);\n      inputArray[10] = (int)ptr1 + 1;\n    }\n    else {\n      var3 = *(undefined4 *)(var1 + 4);\n      inputArray[10] = (int)ptr1 + 1;\n      tempByte = (byte)var3 & 0x7f;\n    }\n    *(byte *)ptr1 = tempByte;\n  }\n  var4 = *(short *)((int)inputArray + 0x2e) + -1;\n  *(short *)((int)inputArray + 0x2e) = var4;\n  if (var4 == 0) {\n    var1 = *inputArray;\n    *(uint *)(var1 + 0xc) = *(uint *)(var1 + 0xc) & 0xffffffdf;\n    condition = *(char *)((int)inputArray + 0x39) != '2';\n    if (condition) {\n      var2 = *(uint *)(var1 + 0xc) & 0xfffffeff;\n    }\n    else {\n      var1 = 0x12;\n      var2 = 0x32;\n    }\n    if (condition) {\n      *(uint *)(var1 + 0xc) = var2;\n      var2 = *(uint *)(var1 + 0x14) & 0xfffffffe;\n    }\n    if (condition) {\n      *(uint *)(var1 + 0x14) = var2;\n      var1 = 1;\n    }\n    *(char *)((int)inputArray + 0x39) = (char)var1;\n    FUN_08004c30();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800290c": "process_data_0800290c",
                "param_1": "inputArray",
                "bVar1": "tempByte",
                "iVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3",
                "sVar5": "var4",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "bVar8": "condition"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [
                "FUN_08004c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002998": {
            "entrypoint": "0x08002998",
            "current_name": "FUNC_08002998",
            "code": "\nvoid FUNC_08002998(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002998": "FUNC_08002998"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800299a": {
            "entrypoint": "0x0800299a",
            "current_name": "analyze_data_0800299a",
            "code": "\nvoid analyzeData_0800299a(uint **dataBuffer)\n\n{\n  uint firstEntry;\n  short counter;\n  uint firstValue;\n  uint *pointer;\n  undefined flag;\n  uint *entry;\n  uint checkFlag;\n  bool checkCondition;\n  \n  entry = *dataBuffer;\n  firstValue = *entry;\n  firstEntry = entry[3];\n  if ((firstValue & 0xf) == 0) {\n    if (((int)(firstValue << 0x1a) < 0) && ((int)(firstEntry << 0x1a) < 0)) {\n      FUN_0800290c();\n      return;\n    }\n  }\n  else {\n    checkFlag = entry[5] & 1;\n    if ((checkFlag != 0) || ((firstEntry & 0x120) != 0)) {\n      entry = (uint *)(firstValue << 0x1f);\n      if ((int)entry < 0) {\n        checkCondition = (int)(firstEntry << 0x17) < 0;\n        if (checkCondition) {\n          entry = (uint *)((uint)dataBuffer[0xf] | 1);\n        }\n        if (checkCondition) {\n          dataBuffer[0xf] = entry;\n        }\n      }\n      if (((int)(firstValue << 0x1d) < 0) && (checkFlag != 0)) {\n        dataBuffer[0xf] = (uint *)((uint)dataBuffer[0xf] | 2);\n      }\n      if (((int)(firstValue << 0x1e) < 0) && (checkFlag != 0)) {\n        dataBuffer[0xf] = (uint *)((uint)dataBuffer[0xf] | 4);\n      }\n      if (((int)(firstValue << 0x1c) < 0) && (checkFlag != 0)) {\n        dataBuffer[0xf] = (uint *)((uint)dataBuffer[0xf] | 8);\n      }\n      if (dataBuffer[0xf] == (uint *)0x0) {\n        return;\n      }\n      if (((int)(firstValue << 0x1a) < 0) && ((int)(firstEntry << 0x1a) < 0)) {\n        FUN_0800290c(dataBuffer);\n      }\n      entry = *dataBuffer;\n      if ((-1 < (int)dataBuffer[0xf] << 0x1c) && ((entry[5] & 0x40) == 0)) {\n        FUNC_08002998(dataBuffer);\n        dataBuffer[0xf] = (uint *)0x0;\n        return;\n      }\n      entry[3] = entry[3] & 0xfffffedf;\n      entry[5] = entry[5] & 0xfffffffe;\n      *(undefined *)((int)dataBuffer + 0x39) = 1;\n      FUNC_08002998(dataBuffer);\n      return;\n    }\n  }\n  if (((int)(firstValue << 0x18) < 0) && ((int)(firstEntry << 0x18) < 0)) {\n    if ((*(byte *)((int)dataBuffer + 0x39) & 0xdf) == 0x12) {\n      pointer = dataBuffer[8];\n      if (dataBuffer[2] == (uint *)0x1000) {\n        entry[1] = *(ushort *)pointer & 0x1ff;\n        if (dataBuffer[4] == (uint *)0x0) {\n          pointer = (uint *)((int)pointer + 2);\n        }\n        else {\n          pointer = (uint *)((int)pointer + 1);\n        }\n        dataBuffer[8] = pointer;\n      }\n      else {\n        dataBuffer[8] = (uint *)((int)pointer + 1);\n        entry[1] = (uint)*(byte *)pointer;\n      }\n      counter = *(short *)((int)dataBuffer + 0x26) + -1;\n      *(short *)((int)dataBuffer + 0x26) = counter;\n      if (counter == 0) {\n        entry[3] = entry[3] & 0xffffff7f;\n        entry[3] = entry[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(firstValue << 0x19) < 0) && ((int)(firstEntry << 0x19) < 0)) {\n    entry[3] = entry[3] & 0xffffffbf;\n    if (*(char *)((int)dataBuffer + 0x39) == '2') {\n      flag = 0x22;\n    }\n    else {\n      flag = 1;\n    }\n    *(undefined *)((int)dataBuffer + 0x39) = flag;\n    FUNC_0800290a(dataBuffer);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800299a": "analyze_data_0800299a",
                "param_1": "dataBuffer",
                "uVar1": "firstEntry",
                "sVar2": "counter",
                "uVar3": "firstValue",
                "puVar4": "pointer",
                "uVar5": "flag",
                "puVar6": "entry",
                "uVar7": "checkFlag",
                "bVar8": "checkCondition"
            },
            "calling": [],
            "called": [
                "FUN_08002998",
                "FUN_0800290a",
                "FUN_0800290c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad0": {
            "entrypoint": "0x08002ad0",
            "current_name": "initialize_mpu9250_08002ad0",
            "code": "\nvoid initializeMPU9250_08002ad0(void)\n\n{\n  FUN_0800407c(0xd0,0x75,\"../Src/MPU9250.c\",0x3b);\n  FUN_0800403c(0xd0,0x6b,0x80,1);\n  FUN_0800403c(0xd0,0x6b,1);\n  FUN_0800403c(0xd0,0x6c,0,1);\n  FUN_0800403c(0xd0,0x19,0,1);\n  FUN_0800403c(0xd0,0x1d,3,1);\n  FUN_0800403c(0xd0,0x1a,3,1);\n  FUN_0800403c(0xd0,0x1b,0x10,1);\n  FUN_0800403c(0xd0,0x1c,8,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ad0": "initialize_mpu9250_08002ad0"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b48": {
            "entrypoint": "0x08002b48",
            "current_name": "initialize_mpu9250_08002b48",
            "code": "\nvoid initializeMPU9250_08002b48(void)\n\n{\n  undefined4 var;\n  uint inputValue;\n  int intValue1;\n  int intValue2;\n  undefined4 result1;\n  undefined4 result2;\n  \n  result1 = 0;\n  result2 = inputValue & 0xffff0000;\n  FUN_080040e8(0xd0,0x3b,&result1,6,\"../Src/MPU9250.c\",0x58);\n  DAT_200002f6 = CONCAT11(result1._2_1_,result1._3_1_);\n  DAT_200002f4 = CONCAT11((undefined)result1,result1._1_1_);\n  DAT_200002f8 = CONCAT11((undefined)result2,result2._1_1_);\n  intValue2 = (int)DAT_200002f6;\n  intValue1 = (int)DAT_200002f8;\n  var = FUN_08000c44();\n  var = FUN_08000cec(var,0x40800000);\n  DAT_200002d0 = FUN_08000cec(var,0x38000000);\n  var = FUN_08000c44(intValue2);\n  var = FUN_08000cec(var,0x40800000);\n  DAT_200002d4 = FUN_08000cec(var,0x38000000);\n  var = FUN_08000c44(intValue1);\n  var = FUN_08000cec(var,0x40800000);\n  DAT_200002d8 = FUN_08000cec(var,0x38000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002b48": "initialize_mpu9250_08002b48",
                "in_r3": "inputValue",
                "iVar2": "intValue1",
                "iVar3": "intValue2",
                "local_18": "result1",
                "local_14": "result2",
                "uVar1": "var"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bf0": {
            "entrypoint": "0x08002bf0",
            "current_name": "initialize_mpu9250_08002bf0",
            "code": "\nvoid initializeMPU9250_08002bf0(void)\n\n{\n  undefined4 result;\n  int concatenatedSampleData3Int;\n  int concatenatedSampleData1Int;\n  undefined4 sampleData1;\n  undefined2 sampleData2;\n  \n  sampleData1 = 0;\n  sampleData2 = 0;\n  FUN_080040e8(0xd0,0x43,&sampleData1,6,\"../Src/MPU9250.c\",0x7b);\n  DAT_200002c0 = CONCAT11(sampleData1._2_1_,sampleData1._3_1_);\n  DAT_200002be = CONCAT11((undefined)sampleData1,sampleData1._1_1_);\n  DAT_200002c2 = CONCAT11((undefined)sampleData2,sampleData2._1_1_);\n  concatenatedSampleData1Int = (int)DAT_200002c0;\n  concatenatedSampleData3Int = (int)DAT_200002c2;\n  result = FUN_08000c44();\n  result = FUN_08000cec(result,0x447a0000);\n  result = FUN_08000cec(result,0x38000000);\n  DAT_200002c4 = FUN_08000ad8(result,DAT_20000000);\n  result = FUN_08000c44(concatenatedSampleData1Int);\n  result = FUN_08000cec(result,0x447a0000);\n  result = FUN_08000cec(result,0x38000000);\n  DAT_200002c8 = FUN_08000ad8(result,DAT_20000004);\n  result = FUN_08000c44(concatenatedSampleData3Int);\n  result = FUN_08000cec(result,0x447a0000);\n  result = FUN_08000cec(result,0x38000000);\n  DAT_200002cc = FUN_08000ad8(result,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002bf0": "initialize_mpu9250_08002bf0",
                "local_20": "sampleData1",
                "local_1c": "sampleData2",
                "iVar3": "concatenatedSampleData1Int",
                "iVar2": "concatenatedSampleData3Int",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cb0": {
            "entrypoint": "0x08002cb0",
            "current_name": "initialize_mpu9250_08002cb0",
            "code": "\nvoid initializeMPU9250_08002cb0(undefined4 param1,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  undefined4 result;\n  uint localVariable;\n  \n  localVariable = param4;\n  FUN_0800403c(0xd0,0x37,0x22,1,param1,param2,param3);\n  FUN_0800403c(0xd0,0x6a,1);\n  FUN_0800407c(0x18,0,\"../Src/MPU9250.c\",0xad);\n  FUN_0800403c(0x18,0xb,1);\n  FUN_0800403c(0x18,10,0,1);\n  FUN_0800403c(0x18,10,0xf,1);\n  FUN_080040e8(0x18,0x10,&localVariable,3,\"../Src/MPU9250.c\",0xb6);\n  result = FUN_08000c44((localVariable & 0xff) - 0x80);\n  result = FUN_08000cec(result,0x3b800000);\n  DAT_200002e8 = FUN_08000adc(result,0x3f800000);\n  result = FUN_08000c44((localVariable >> 8 & 0xff) - 0x80);\n  result = FUN_08000cec(result,0x3b800000);\n  DAT_200002ec = FUN_08000adc(result,0x3f800000);\n  result = FUN_08000c44((localVariable >> 0x10 & 0xff) - 0x80);\n  result = FUN_08000cec(result,0x3b800000);\n  DAT_200002f0 = FUN_08000adc(result,0x3f800000);\n  FUN_0800403c(0x18,10,0,1);\n  FUN_0800403c(0x18,10,0x16,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002cb0": "initialize_mpu9250_08002cb0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "local_c": "localVariable"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_0800403c",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_080040e8",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d88": {
            "entrypoint": "0x08002d88",
            "current_name": "initialize_mpu9250_08002d88",
            "code": "\nvoid initializeMPU9250_08002d88(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  int tempVar3;\n  undefined2 value;\n  undefined stackVar1;\n  undefined stackVar2;\n  undefined localVar1;\n  undefined localVar2;\n  byte byteVar;\n  undefined stackVar3;\n  \n  stackVar3 = (undefined)((uint)param4 >> 0x18);\n  value = 0;\n  stackVar1 = 0;\n  stackVar2 = 0;\n  localVar1 = 0;\n  localVar2 = 0;\n  byteVar = 0;\n  result = FUN_0800407c(0x18,2,\"../Src/MPU9250.c\",0xd7,param1,param2);\n  if (result << 0x1f < 0) {\n    FUN_080040e8(0x18,3,&value,7,\"../Src/MPU9250.c\",0xda);\n    tempVar2 = DAT_2000001c;\n    if ((int)((uint)byteVar << 0x1c) < 0) {\n      DAT_200013bb = DAT_200013bb + 1;\n    }\n    else {\n      DAT_200002ba = CONCAT11(stackVar2,stackVar1);\n      DAT_200002bc = CONCAT11(localVar2,localVar1);\n      tempVar3 = (int)DAT_200002ba;\n      result = (int)DAT_200002bc;\n      DAT_200002b8 = value;\n      tempVar1 = FUN_08000c44();\n      tempVar1 = FUN_08000cec(tempVar1,tempVar2);\n      tempVar1 = FUN_08000cec(tempVar1,DAT_200002e8);\n      tempVar1 = FUN_08000ad8(tempVar1,DAT_20000020);\n      DAT_200002dc = FUN_08000cec(tempVar1,DAT_2000002c);\n      tempVar1 = FUN_08000c44(tempVar3);\n      tempVar1 = FUN_08000cec(tempVar1,tempVar2);\n      tempVar1 = FUN_08000cec(tempVar1,DAT_200002ec);\n      tempVar1 = FUN_08000ad8(tempVar1,DAT_20000024);\n      DAT_200002e0 = FUN_08000cec(tempVar1,DAT_20000030);\n      tempVar1 = FUN_08000c44(result);\n      tempVar2 = FUN_08000cec(tempVar1,tempVar2);\n      tempVar2 = FUN_08000cec(tempVar2,DAT_200002f0);\n      tempVar2 = FUN_08000ad8(tempVar2,DAT_20000028);\n      DAT_200002e4 = FUN_08000cec(tempVar2,DAT_20000034);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d88": "initialize_mpu9250_08002d88",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "iVar4": "tempVar3",
                "local_28": "value",
                "uStack_26": "stackVar1",
                "uStack_25": "stackVar2",
                "local_24": "localVar1",
                "local_23": "localVar2",
                "local_22": "byteVar",
                "uStack_21": "stackVar3"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ea0": {
            "entrypoint": "0x08002ea0",
            "current_name": "initialize_application_08002ea0",
            "code": "\nvoid initializeApplication_08002ea0(undefined4 unusedParam1,undefined4 unusedParam2,undefined4 configParam1,undefined4 configParam2)\n\n{\n  undefined4 tempVar1;\n  \n  FUN_08002ad0();\n  FUN_08002cb0();\n  FUN_08003314(0x3f19999a);\n  FUN_08003320(0,tempVar1,configParam1,configParam2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ea0": "initialize_application_08002ea0",
                "param_1": "unusedParam1",
                "param_2": "unusedParam2",
                "param_3": "configParam1",
                "param_4": "configParam2",
                "extraout_r1": "tempVar1"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08002ad0",
                "FUN_08002cb0",
                "FUN_08003320",
                "FUN_08003314"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec0": {
            "entrypoint": "0x08002ec0",
            "current_name": "calculate_updated_value_08002ec0",
            "code": "\nvoid calculateUpdatedValue_08002ec0(void)\n\n{\n  undefined4 result1;\n  undefined4 savedValue1;\n  undefined4 savedValue2;\n  \n  savedValue1 = DAT_2000024c;\n  savedValue2 = DAT_20000010;\n  result1 = FUN_08000ad8(0x3f800000,DAT_20000010);\n  savedValue1 = FUN_08000cec(result1,savedValue1);\n  savedValue2 = FUN_08000cec(savedValue2,DAT_2000000c);\n  DAT_2000000c = FUN_08000adc(savedValue2,savedValue1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec0": "calculate_updated_value_08002ec0",
                "uVar1": "result1",
                "uVar2": "savedValue1",
                "uVar3": "savedValue2"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed4": {
            "entrypoint": "0x08002ed4",
            "current_name": "calculate_result_08002ed4",
            "code": "\nvoid calculateResult_08002ed4(void)\n\n{\n  undefined4 result1;\n  undefined4 constant1;\n  undefined4 constant2;\n  \n  constant1 = DAT_20000248;\n  constant2 = uRam20000018;\n  result1 = FUN_08000ad8(0x3f800000,uRam20000018);\n  constant1 = FUN_08000cec(result1,constant1);\n  constant2 = FUN_08000cec(constant2,uRam20000014);\n  uRam20000014 = FUN_08000adc(constant2,constant1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed4": "calculate_result_08002ed4",
                "uVar1": "result1",
                "uVar2": "constant1",
                "uVar3": "constant2"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ee8": {
            "entrypoint": "0x08002ee8",
            "current_name": "initialize_connection_08002ee8",
            "code": "\nvoid initializeConnection_08002ee8(void)\n\n{\n  undefined4 connectionInfo;\n  int result;\n  \n  connectionInfo = DAT_20000250;\n  result = FUN_08001050(DAT_20000250,0xc3340000);\n  if ((result != 0) && (result = FUN_08001028(connectionInfo,0x42b40000), result != 0)) {\n    FUN_08000adc(connectionInfo,0x42b40000);\n    return;\n  }\n  FUN_08000ad8(connectionInfo,0x43870000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ee8": "initialize_connection_08002ee8",
                "uVar1": "connectionInfo",
                "iVar2": "result"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08001050",
                "FUN_08001028",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f28": {
            "entrypoint": "0x08002f28",
            "current_name": "initialize_system_08002f28",
            "code": "\n\n\nvoid initializeSystem_08002f28(void)\n\n{\n  undefined4 result;\n  \n  FUN_08002b48();\n  FUN_08002bf0();\n  FUN_08002d88();\n  DAT_20000258 = thunk_FUN_0800115c();\n  result = FUN_08000c3c(DAT_20000258 - DAT_20000254);\n  FUN_08000e54(result,0x447a0000);\n  FUN_08003320();\n  DAT_20000254 = DAT_20000258;\n  FUN_08003330(DAT_200002d4 + -0x80000000,DAT_200002d0 + -0x80000000,DAT_200002d8,DAT_200002c8,\n               DAT_200002c4,DAT_200002cc + -0x80000000,DAT_200002dc,DAT_200002e0,DAT_200002e4,\n               &DAT_20000248);\n  _DAT_2000142a = (undefined2)((uint)(int)DAT_200002f4 / 100);\n  _DAT_2000142e = (undefined2)((uint)(int)DAT_200002f8 / 100);\n  DAT_2000142c = (undefined2)((uint)(int)DAT_200002f6 / 100);\n  DAT_20001430 = DAT_200002be;\n  _DAT_20001432 = DAT_200002c0;\n  DAT_20001434 = DAT_200002c2;\n  _DAT_20001436 = DAT_200002b8;\n  DAT_20001438 = DAT_200002ba;\n  DAT_2000143a = DAT_200002bc;\n  result = FUN_08002ed4();\n  FUN_08000cec(result,0x41200000);\n  DAT_20001395._0_2_ = FUN_08001078();\n  result = FUN_08002ec0();\n  FUN_08000cec(result,0x41200000);\n  DAT_20001395._2_2_ = FUN_08001078();\n  FUN_08002ee8();\n  DAT_20001399 = FUN_08001078();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f28": "initialize_system_08002f28",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08000e54",
                "FUN_08000c3c",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08003320",
                "FUN_08002bf0",
                "FUN_08002ed4",
                "FUN_08002b48",
                "thunk_FUN_0800115c",
                "FUN_08002d88",
                "FUN_08003330",
                "FUN_08001078",
                "FUN_08002ec0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003034": {
            "entrypoint": "0x08003034",
            "current_name": "decompile_and_convert_08003034",
            "code": "\nuint decompile_and_convert_08003034(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  undefined4 converted_value;\n  \n  converted_value = input_param_4;\n  FUN_080040b8(0xee,0,&converted_value,3,\"../Src/MS5611.c\",0x8c,input_param_3);\n  return (uint)CONCAT12((undefined)converted_value,CONCAT11(converted_value._1_1_,converted_value._2_1_));\n}\n\n",
            "renaming": {
                "FUN_08003034": "decompile_and_convert_08003034",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "local_c": "converted_value"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_080040b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003068": {
            "entrypoint": "0x08003068",
            "current_name": "get_data_value_08003068",
            "code": "\nundefined4 get_data_value_08003068(void)\n\n{\n  return DAT_200002fc;\n}\n\n",
            "renaming": {
                "FUN_08003068": "get_data_value_08003068"
            },
            "calling": [
                "FUN_08004a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003298": {
            "entrypoint": "0x08003298",
            "current_name": "initialize_sensor_08003298",
            "code": "\nvoid initializeSensor_08003298(void)\n\n{\n  int index;\n  undefined temp;\n  undefined value;\n  \n  index = 0;\n  FUN_0800403c(0xee,0x1e,1);\n  thunk_FUNC_08001168(10);\n  DAT_20000038 = 8;\n  do {\n    temp = 0;\n    value = 0;\n    FUN_080040e8(0xee,index + 0xa0U & 0xffff,&temp,2,\"../Src/MS5611.c\",0x7c);\n    *(ushort *)((int)&DAT_2000025c + index) = CONCAT11(temp,value);\n    index = index + 2;\n  } while (index != 0x10);\n  index = 0;\n  do {\n    (&DAT_20000300)[index] = 0;\n    index = index + 1;\n  } while (index != 0x14);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003298": "initialize_sensor_08003298",
                "iVar1": "index",
                "local_1c": "temp",
                "local_1b": "value"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_0800403c",
                "thunk_FUN_08001168",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003314": {
            "entrypoint": "0x08003314",
            "current_name": "set_global_param_08003314",
            "code": "\nvoid setGlobalParam_08003314(undefined4 newValue)\n\n{\n  DAT_2000035c = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003314": "set_global_param_08003314",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003320": {
            "entrypoint": "0x08003320",
            "current_name": "set_global_variable_08003320",
            "code": "\nvoid set_global_variable_08003320(undefined4 value)\n\n{\n  DAT_20000360 = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003320": "set_global_variable_08003320",
                "param_1": "value"
            },
            "calling": [
                "FUN_08002ea0",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003330": {
            "entrypoint": "0x08003330",
            "current_name": "extract_and_process_data_08003330",
            "code": "\nvoid extract_and_process_data_08003330(undefined4 data_param,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined4 param_9,undefined4 *result_params)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  int value_3;\n  undefined4 result_4;\n  undefined4 result_5;\n  undefined4 result_6;\n  undefined4 result_7;\n  int value_8;\n  undefined4 result_9;\n  undefined4 result_10;\n  undefined4 result_11;\n  undefined4 result_12;\n  undefined4 result_13;\n  undefined4 result_14;\n  undefined4 result_15;\n  undefined4 result_16;\n  undefined4 result_17;\n  undefined4 result_18;\n  int value_19;\n  undefined4 result_20;\n  undefined4 result_21;\n  undefined4 result_22;\n  undefined4 result_23;\n  undefined4 result_24;\n  undefined4 result_25;\n  int value_26;\n  undefined4 result_27;\n  undefined4 result_28;\n  undefined4 result_29;\n  int value_30;\n  undefined8 result_31;\n  undefined8 result_32;\n  \n  result_29 = DAT_20000048;\n  result_28 = DAT_20000044;\n  value_30 = DAT_20000040;\n  result_27 = DAT_2000003c;\n  result_1 = FUN_08000cec(data_param,data_param);\n  result_2 = FUN_08000cec(param_2);\n  result_1 = FUN_08000adc(result_1,result_2);\n  result_2 = FUN_08000cec(param_3);\n  FUN_08000adc(result_1,result_2);\n  FUN_08000428();\n  FUN_08005bc8();\n  result_1 = FUN_08000a30();\n  value_3 = FUN_08001014(result_1,0);\n  if (value_3 == 0) {\n    result_2 = FUN_08000cec(param_7);\n    result_4 = FUN_08000cec(param_8);\n    result_2 = FUN_08000adc(result_2,result_4);\n    result_4 = FUN_08000cec(param_9);\n    FUN_08000adc(result_2,result_4);\n    FUN_08000428();\n    FUN_08005bc8();\n    result_2 = FUN_08000a30();\n    value_3 = FUN_08001014(result_2,0);\n    if (value_3 == 0) {\n      result_31 = FUN_08000428(param_4);\n      FUN_080004d0((int)result_31,(int)((ulonglong)result_31 >> 0x20),0xa2529d39,0x3f91df46);\n      result_4 = FUN_08000a30();\n      result_31 = FUN_08000428(param_5);\n      FUN_080004d0((int)result_31,(int)((ulonglong)result_31 >> 0x20),0xa2529d39,0x3f91df46);\n      result_5 = FUN_08000a30();\n      result_31 = FUN_08000428(param_6);\n      FUN_080004d0((int)result_31,(int)((ulonglong)result_31 >> 0x20),0xa2529d39,0x3f91df46);\n      result_6 = FUN_08000a30();\n      value_3 = FUN_08000adc(result_27);\n      result_7 = FUN_08000adc(value_30);\n      value_8 = FUN_08000adc(result_28,result_28);\n      result_9 = FUN_08000adc(result_29,result_29);\n      result_10 = FUN_08000cec(result_27);\n      result_11 = FUN_08000cec(result_27,value_30);\n      result_12 = FUN_08000cec(result_27,result_28);\n      result_13 = FUN_08000cec(value_30);\n      result_14 = FUN_08000cec(value_30,result_29);\n      result_15 = FUN_08000cec(result_28,result_28);\n      result_16 = FUN_08000cec(result_29,result_29);\n      result_1 = FUN_08000e54(0x3f800000,result_1);\n      result_2 = FUN_08000e54(0x3f800000,result_2);\n      result_17 = FUN_08000cec(param_7,result_2);\n      result_18 = FUN_08000cec(param_8,result_2);\n      result_2 = FUN_08000cec(param_9,result_2);\n      value_19 = FUN_08000cec(value_3,result_17);\n      result_20 = FUN_08000cec(value_3,result_18);\n      result_21 = FUN_08000cec(value_3,result_2);\n      result_22 = FUN_08000cec(result_7,result_17);\n      result_23 = FUN_08000cec(result_10,result_17);\n      result_24 = FUN_08000cec(result_29,result_20);\n      result_23 = FUN_08000ad8(result_23,result_24);\n      result_24 = FUN_08000cec(result_28,result_21);\n      result_23 = FUN_08000adc(result_23,result_24);\n      result_24 = FUN_08000cec(result_13,result_17);\n      result_23 = FUN_08000adc(result_23,result_24);\n      result_24 = FUN_08000cec(result_7,result_18);\n      result_24 = FUN_08000cec(result_24,result_28);\n      result_23 = FUN_08000adc(result_23,result_24);\n      result_24 = FUN_08000cec(result_7,result_2);\n      result_24 = FUN_08000cec(result_24,result_29);\n      result_23 = FUN_08000adc(result_23,result_24);\n      result_24 = FUN_08000cec(result_15,result_17);\n      result_23 = FUN_08000ad8(result_23,result_24);\n      result_24 = FUN_08000cec(result_16,result_17);\n      result_23 = FUN_08000ad8(result_23,result_24);\n      result_24 = FUN_08000cec(result_29,value_19);\n      result_25 = FUN_08000cec(result_10,result_18);\n      result_24 = FUN_08000adc(result_24,result_25);\n      result_21 = FUN_08000cec(value_30,result_21);\n      result_21 = FUN_08000ad8(result_24,result_21);\n      result_24 = FUN_08000cec(result_28,result_22);\n      result_21 = FUN_08000adc(result_21,result_24);\n      result_24 = FUN_08000cec(result_13,result_18);\n      result_21 = FUN_08000ad8(result_21,result_24);\n      result_24 = FUN_08000cec(result_15,result_18);\n      result_21 = FUN_08000adc(result_21,result_24);\n      result_24 = FUN_08000cec(value_8,result_2);\n      result_24 = FUN_08000cec(result_24,result_29);\n      result_21 = FUN_08000adc(result_21,result_24);\n      result_24 = FUN_08000cec(result_16,result_18);\n      result_21 = FUN_08000ad8(result_21,result_24);\n      result_23 = FUN_08000cec(result_23,result_23);\n      result_21 = FUN_08000cec(result_21,result_21);\n      FUN_08000adc(result_23,result_21);\n      FUN_08000428();\n      FUN_08005bc8();\n      value_26 = FUN_08000a30();\n      result_21 = FUN_08000cec(value_19 + -0x80000000,result_28);\n      result_20 = FUN_08000cec(value_30,result_20);\n      result_20 = FUN_08000adc(result_21,result_20);\n      result_10 = FUN_08000cec(result_10,result_2);\n      result_10 = FUN_08000adc(result_20,result_10);\n      result_20 = FUN_08000cec(result_29,result_22);\n      result_10 = FUN_08000adc(result_10,result_20);\n      result_20 = FUN_08000cec(result_13,result_2);\n      result_10 = FUN_08000ad8(result_10,result_20);\n      result_20 = FUN_08000cec(value_8,result_18);\n      result_20 = FUN_08000cec(result_20,result_29);\n      result_10 = FUN_08000adc(result_10,result_20);\n      result_20 = FUN_08000cec(result_15,result_2);\n      result_10 = FUN_08000ad8(result_10,result_20);\n      result_20 = FUN_08000cec(result_16,result_2);\n      result_10 = FUN_08000adc(result_10,result_20);\n      result_20 = FUN_08000adc(result_10,result_10);\n      result_21 = FUN_08000adc(result_14);\n      result_22 = FUN_08000cec(result_28,value_3);\n      result_21 = FUN_08000ad8(result_21,result_22);\n      result_22 = FUN_08000cec(data_param,result_1);\n      result_21 = FUN_08000ad8(result_21,result_22);\n      result_22 = FUN_08000cec(result_29,value_8);\n      result_23 = FUN_08000adc(result_11);\n      result_22 = FUN_08000adc(result_22,result_23);\n      result_23 = FUN_08000cec(param_2,result_1);\n      result_22 = FUN_08000ad8(result_22,result_23);\n      result_23 = FUN_08000cec(result_28,result_10);\n      result_24 = FUN_08000ad8(0x3f000000,result_15);\n      result_16 = FUN_08000ad8(result_24,result_16);\n      result_16 = FUN_08000cec(result_16,value_26);\n      result_24 = FUN_08000ad8(result_14,result_12);\n      result_24 = FUN_08000cec(result_24,result_10);\n      result_16 = FUN_08000adc(result_16,result_24);\n      result_16 = FUN_08000ad8(result_16,result_17);\n      result_17 = FUN_08000cec(value_30,result_10);\n      result_24 = FUN_08000cec(value_30,result_28);\n      result_25 = FUN_08000cec(result_27,result_29);\n      result_24 = FUN_08000ad8(result_24,result_25);\n      result_24 = FUN_08000cec(result_24,value_26);\n      result_25 = FUN_08000cec(result_28,result_29);\n      result_11 = FUN_08000adc(result_25,result_11);\n      result_11 = FUN_08000cec(result_11,result_10);\n      result_11 = FUN_08000adc(result_24,result_11);\n      result_11 = FUN_08000ad8(result_11,result_18);\n      result_18 = FUN_08000cec(result_28,value_26);\n      result_24 = FUN_08000ad8(0x3f000000,result_13);\n      result_24 = FUN_08000ad8(result_24,result_15);\n      result_24 = FUN_08000cec(result_24,result_10);\n      result_12 = FUN_08000adc(result_12,result_14);\n      result_12 = FUN_08000cec(result_12,value_26);\n      result_12 = FUN_08000adc(result_24,result_12);\n      result_2 = FUN_08000ad8(result_12,result_2);\n      result_12 = FUN_08000cec(value_8 + -0x80000000,result_21);\n      result_14 = FUN_08000cec(result_7,result_22);\n      result_12 = FUN_08000adc(result_12,result_14);\n      result_14 = FUN_08000cec(result_23,result_16);\n      result_12 = FUN_08000ad8(result_12,result_14);\n      result_14 = FUN_08000cec(result_29,value_26 + -0x80000000);\n      result_14 = FUN_08000adc(result_14,result_17);\n      result_14 = FUN_08000cec(result_14,result_11);\n      result_12 = FUN_08000adc(result_12,result_14);\n      result_14 = FUN_08000cec(result_18,result_2);\n      result_12 = FUN_08000adc(result_12,result_14);\n      result_13 = FUN_08000adc(result_13);\n      result_13 = FUN_08000ad8(0x3f800000,result_13);\n      result_14 = FUN_08000adc(result_15);\n      result_13 = FUN_08000ad8(result_13,result_14);\n      result_1 = FUN_08000cec(param_3,result_1);\n      result_1 = FUN_08000ad8(result_13,result_1);\n      result_13 = FUN_08000cec(result_29,result_10);\n      result_10 = FUN_08000cec(result_27,result_10);\n      result_14 = FUN_08000cec(result_9,result_21);\n      result_15 = FUN_08000cec(value_3,result_22);\n      result_14 = FUN_08000adc(result_14,result_15);\n      result_15 = FUN_08000cec(value_30,0x40800000);\n      result_15 = FUN_08000cec(result_15,result_1);\n      result_14 = FUN_08000ad8(result_14,result_15);\n      result_15 = FUN_08000cec(result_16,result_13);\n      result_14 = FUN_08000adc(result_14,result_15);\n      result_15 = FUN_08000adc(result_18,result_10);\n      result_15 = FUN_08000cec(result_15,result_11);\n      result_14 = FUN_08000adc(result_14,result_15);\n      result_15 = FUN_08000cec(result_29,value_26);\n      result_18 = FUN_08000cec(value_30,result_20);\n      result_15 = FUN_08000ad8(result_15,result_18);\n      result_15 = FUN_08000cec(result_15,result_2);\n      result_14 = FUN_08000adc(result_14,result_15);\n      value_19 = FUN_08000adc(value_26,value_26);\n      result_15 = FUN_08000cec(value_30,value_26);\n      result_18 = FUN_08000cec(value_3 + -0x80000000,result_21);\n      result_9 = FUN_08000cec(result_9,result_22);\n      result_9 = FUN_08000adc(result_18,result_9);\n      result_18 = FUN_08000cec(result_28,0x40800000);\n      result_1 = FUN_08000cec(result_18,result_1);\n      result_1 = FUN_08000ad8(result_9,result_1);\n      result_9 = FUN_08000cec(result_28,value_19 + -0x80000000);\n      result_9 = FUN_08000ad8(result_9,result_10);\n      result_9 = FUN_08000cec(result_9,result_16);\n      result_1 = FUN_08000adc(result_1,result_9);\n      result_9 = FUN_08000adc(result_13,result_15);\n      result_9 = FUN_08000cec(result_9,result_11);\n      result_1 = FUN_08000adc(result_1,result_9);\n      result_9 = FUN_08000cec(result_27,value_26);\n      result_10 = FUN_08000cec(result_28,result_20);\n      result_9 = FUN_08000ad8(result_9,result_10);\n      result_9 = FUN_08000cec(result_9,result_2);\n      result_9 = FUN_08000adc(result_1,result_9);\n      result_1 = FUN_08000cec(result_7,result_21);\n      result_7 = FUN_08000cec(value_8,result_22);\n      result_1 = FUN_08000adc(result_1,result_7);\n      result_7 = FUN_08000cec(result_29,value_19 + -0x80000000);\n      result_7 = FUN_08000adc(result_7,result_17);\n      result_7 = FUN_08000cec(result_7,result_16);\n      result_1 = FUN_08000adc(result_1,result_7);\n      result_7 = FUN_08000cec(result_27,value_26 + -0x80000000);\n      result_7 = FUN_08000adc(result_7,result_23);\n      result_7 = FUN_08000cec(result_7,result_11);\n      result_1 = FUN_08000adc(result_1,result_7);\n      result_2 = FUN_08000cec(result_2,result_15);\n      result_7 = FUN_08000adc(result_1,result_2);\n      result_1 = FUN_08000cec(result_12);\n      result_2 = FUN_08000cec(result_14);\n      result_1 = FUN_08000adc(result_1,result_2);\n      result_2 = FUN_08000cec(result_9,result_9);\n      result_1 = FUN_08000adc(result_1,result_2);\n      result_2 = FUN_08000cec(result_7,result_7);\n      FUN_08000adc(result_1,result_2);\n      FUN_08000428();\n      FUN_08005bc8();\n      result_1 = FUN_08000a30();\n      result_10 = FUN_08000e54(0x3f800000,result_1);\n      result_1 = DAT_2000035c;\n      result_2 = FUN_08000cec(value_30 + -0x80000000,result_4);\n      result_11 = FUN_08000cec(result_28,result_5);\n      result_2 = FUN_08000ad8(result_2,result_11);\n      result_11 = FUN_08000cec(result_29,result_6);\n      result_2 = FUN_08000ad8(result_2,result_11);\n      result_11 = FUN_08000cec(result_2,0x3f000000);\n      result_12 = FUN_08000cec(result_12,result_10);\n      result_2 = DAT_20000360;\n      result_12 = FUN_08000cec(result_12,result_1);\n      result_11 = FUN_08000ad8(result_11,result_12);\n      result_2 = FUN_08000cec(result_11,result_2);\n      result_11 = FUN_08000adc(result_2,result_27);\n      result_12 = FUN_08000cec(result_27,result_4);\n      result_13 = FUN_08000cec(result_28,result_6);\n      result_2 = DAT_20000360;\n      result_12 = FUN_08000adc(result_12,result_13);\n      result_13 = FUN_08000cec(result_29,result_5);\n      result_12 = FUN_08000ad8(result_12,result_13);\n      result_12 = FUN_08000cec(result_12,0x3f000000);\n      result_13 = FUN_08000cec(result_14,result_10);\n      result_13 = FUN_08000cec(result_13,result_1);\n      result_12 = FUN_08000ad8(result_12,result_13);\n      result_2 = FUN_08000cec(result_12,result_2);\n      result_12 = FUN_08000adc(result_2,value_30);\n      result_2 = DAT_20000360;\n      result_13 = FUN_08000cec(result_27,result_5);\n      result_14 = FUN_08000cec(value_30,result_6);\n      result_13 = FUN_08000ad8(result_13,result_14);\n      result_14 = FUN_08000cec(result_29,result_4);\n      result_13 = FUN_08000adc(result_13,result_14);\n      result_13 = FUN_08000cec(result_13,0x3f000000);\n      result_9 = FUN_08000cec(result_9,result_10);\n      result_9 = FUN_08000cec(result_9,result_1);\n      result_9 = FUN_08000ad8(result_13,result_9);\n      result_2 = FUN_08000cec(result_9,result_2);\n      result_2 = FUN_08000adc(result_2,result_28);\n      result_27 = FUN_08000cec(result_27,result_6);\n      result_5 = FUN_08000cec(value_30,result_5);\n      result_27 = FUN_08000adc(result_27,result_5);\n      result_28 = FUN_08000cec(result_28,result_4);\n      result_27 = FUN_08000ad8(result_27,result_28);\n      result_28 = FUN_08000cec(result_27,0x3f000000);\n      result_27 = FUN_08000cec(result_7,result_10);\n      result_1 = FUN_08000cec(result_27,result_1);\n      result_27 = DAT_20000360;\n      result_28 = FUN_08000ad8(result_28,result_1);\n      result_27 = FUN_08000cec(result_28,result_27);\n      result_27 = FUN_08000adc(result_27,result_29);\n      result_28 = FUN_08000cec(result_11,result_11);\n      result_29 = FUN_08000cec(result_12,result_12);\n      result_28 = FUN_08000adc(result_28,result_29);\n      result_29 = FUN_08000cec(result_2,result_2);\n      result_28 = FUN_08000adc(result_28,result_29);\n      result_29 = FUN_08000cec(result_27,result_27);\n      FUN_08000adc(result_28,result_29);\n      FUN_08000428();\n      FUN_08005bc8();\n      result_28 = FUN_08000a30();\n      result_28 = FUN_08000e54(0x3f800000,result_28);\n      result_29 = FUN_08000cec(result_11,result_28);\n      DAT_2000003c = result_29;\n      value_30 = FUN_08000cec(result_12,result_28);\n      DAT_20000040 = value_30;\n      result_1 = FUN_08000cec(result_2,result_28);\n      DAT_20000044 = result_1;\n      DAT_20000048 = FUN_08000cec(result_27,result_28);\n      result_27 = FUN_08000cec(value_30,DAT_20000048);\n      result_28 = FUN_08000cec(result_29,result_1);\n      result_27 = FUN_08000ad8(result_27,result_28);\n      FUN_08000adc(result_27,result_27);\n      FUN_08000428();\n      result_31 = FUN_08005854();\n      result_31 = FUN_080004d0((int)result_31,(int)((ulonglong)result_31 >> 0x20),0,0x40668000);\n      FUN_08000724((int)result_31,(int)((ulonglong)result_31 >> 0x20),0x54442d18,0x400921fb);\n      result_27 = FUN_08000a30();\n      *result_params = result_27;\n      value_30 = DAT_20000040;\n      result_27 = DAT_2000003c;\n      result_28 = FUN_08000cec(DAT_2000003c,DAT_2000003c);\n      result_29 = FUN_08000cec(value_30,value_30);\n      result_29 = FUN_08000ad8(result_28,result_29);\n      result_28 = DAT_20000044;\n      result_1 = FUN_08000cec(DAT_20000044,DAT_20000044);\n      result_1 = FUN_08000ad8(result_29,result_1);\n      result_29 = DAT_20000048;\n      result_2 = FUN_08000cec(DAT_20000048,DAT_20000048);\n      FUN_08000adc(result_1,result_2);\n      result_31 = FUN_08000428();\n      result_27 = FUN_08000cec(result_27,value_30);\n      result_28 = FUN_08000cec(result_28,result_29);\n      result_27 = FUN_08000adc(result_27,result_28);\n      FUN_08000adc(result_27,result_27);\n      result_32 = FUN_08000428();\n      result_31 = thunk_FUN_08006070((int)result_32,(int)((ulonglong)result_32 >> 0x20),(int)result_31,\n                                  (int)((ulonglong)result_31 >> 0x20));\n      result_31 = FUN_080004d0((int)result_31,(int)((ulonglong)result_31 >> 0x20),0,0x40668000);\n      FUN_08000724((int)result_31,(int)((ulonglong)result_31 >> 0x20),0x54442d18,0x400921fb);\n      result_27 = FUN_08000a30();\n      result_params[1] = result_27;\n      value_30 = DAT_20000040;\n      result_27 = DAT_2000003c;\n      result_28 = FUN_08000cec(DAT_2000003c,DAT_2000003c);\n      result_29 = FUN_08000cec(value_30,value_30);\n      result_29 = FUN_08000adc(result_28,result_29);\n      result_28 = DAT_20000044;\n      result_1 = FUN_08000cec(DAT_20000044,DAT_20000044);\n      result_1 = FUN_08000ad8(result_29,result_1);\n      result_29 = DAT_20000048;\n      result_2 = FUN_08000cec(DAT_20000048,DAT_20000048);\n      FUN_08000ad8(result_1,result_2);\n      result_31 = FUN_08000428();\n      result_28 = FUN_08000cec(value_30,result_28);\n      result_27 = FUN_08000cec(result_27,result_29);\n      result_27 = FUN_08000adc(result_28,result_27);\n      FUN_08000adc(result_27,result_27);\n      result_32 = FUN_08000428();\n      result_31 = thunk_FUN_08006070((int)result_32,(int)((ulonglong)result_32 >> 0x20),(int)result_31,\n                                  (int)((ulonglong)result_31 >> 0x20));\n      result_31 = FUN_080004d0((int)result_31,(int)((ulonglong)result_31 >> 0x20),0,0x40668000);\n      FUN_08000724((int)result_31,(int)((ulonglong)result_31 >> 0x20),0x54442d18,0x400921fb);\n      result_27 = FUN_08000a30();\n      result_params[2] = result_27;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003330": "extract_and_process_data_08003330",
                "param_1": "data_param",
                "param_10": "result_params",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "iVar3": "value_3",
                "uVar4": "result_4",
                "uVar5": "result_5",
                "uVar6": "result_6",
                "uVar7": "result_7",
                "iVar8": "value_8",
                "uVar9": "result_9",
                "uVar10": "result_10",
                "uVar11": "result_11",
                "uVar12": "result_12",
                "uVar13": "result_13",
                "uVar14": "result_14",
                "uVar15": "result_15",
                "uVar16": "result_16",
                "uVar17": "result_17",
                "uVar18": "result_18",
                "iVar19": "value_19",
                "uVar20": "result_20",
                "uVar21": "result_21",
                "uVar22": "result_22",
                "uVar23": "result_23",
                "uVar24": "result_24",
                "uVar25": "result_25",
                "iVar26": "value_26",
                "uVar27": "result_27",
                "uVar28": "result_28",
                "uVar29": "result_29",
                "iVar30": "value_30",
                "uVar31": "result_31",
                "uVar32": "result_32"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_080004d0",
                "FUN_08001014",
                "FUN_08000e54",
                "thunk_FUN_08006070",
                "FUN_08000a30",
                "FUN_08005854",
                "FUN_08005bc8",
                "FUN_08000cec",
                "FUN_08000428",
                "FUN_08000724",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eb0": {
            "entrypoint": "0x08003eb0",
            "current_name": "convert_to_long_long_08003eb0",
            "code": "\nlonglong convertToLongLong_08003eb0(uint input)\n\n{\n  if (DAT_20000280 == 0) {\n    software_interrupt(0x3f);\n    return CONCAT44(input,1);\n  }\n  return (ulonglong)input << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08003eb0": "convert_to_long_long_08003eb0",
                "param_1": "input"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ec8": {
            "entrypoint": "0x08003ec8",
            "current_name": "increment_and_store_08003ec8",
            "code": "\nundefined4 incrementAndStore_08003ec8(int address,undefined value)\n\n{\n  *(short *)(address + 0x804) = *(short *)(address + 0x804) + 1;\n  *(undefined *)(address + (uint)*(ushort *)(address + 0x802)) = value;\n  *(ushort *)(address + 0x802) = *(short *)(address + 0x802) + 1U & 0x7ff;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003ec8": "increment_and_store_08003ec8",
                "param_1": "address",
                "param_2": "value"
            },
            "calling": [
                "FUN_08004c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f3c": {
            "entrypoint": "0x08003f3c",
            "current_name": "initialize_flags_08003f3c",
            "code": "\nvoid initializeFlags_08003f3c(int flag1,int flag2,int flag3)\n\n{\n  FUN_08001424(0x40011000,0x8000,flag1 == 0);\n  FUN_08001424(0x40011000,0x4000,flag2 == 0);\n  FUN_08001424(0x40011000,0x2000,flag3 == 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f3c": "initialize_flags_08003f3c",
                "param_1": "flag1",
                "param_2": "flag2",
                "param_3": "flag3"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004028"
            ],
            "called": [
                "FUN_08001424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fc4": {
            "entrypoint": "0x08003fc4",
            "current_name": "set_param_08003fc4",
            "code": "\nvoid setParam_08003fc4(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x40) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fc4": "set_param_08003fc4",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd0": {
            "entrypoint": "0x08003fd0",
            "current_name": "set_param_at_address_08003fd0",
            "code": "\nvoid setParamAtAddress_08003fd0(undefined4 newValue)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x3c) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fd0": "set_param_at_address_08003fd0",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fdc": {
            "entrypoint": "0x08003fdc",
            "current_name": "set_param_value_08003fdc",
            "code": "\nvoid setParamValue_08003fdc(undefined4 newValue)\n\n{\n  *(undefined4 *)(DAT_200015f8 + 0x38) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fdc": "set_param_value_08003fdc",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fe8": {
            "entrypoint": "0x08003fe8",
            "current_name": "set_pointer_type_08003fe8",
            "code": "\nvoid setPointerType_08003fe8(undefined4 newValue)\n\n{\n  *(undefined4 *)(DAT_20001540 + 0x3c) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fe8": "set_pointer_type_08003fe8",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff4": {
            "entrypoint": "0x08003ff4",
            "current_name": "initialize_data_08003ff4",
            "code": "\nvoid initializeData_08003ff4(void)\n\n{\n  FUN_08002538(&DAT_200015f8,4);\n  FUN_08002538(&DAT_20001540,8);\n  FUN_08002538(&DAT_200014c8,8);\n  FUN_08002538(&DAT_200014c8,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff4": "initialize_data_08003ff4"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004028": {
            "entrypoint": "0x08004028",
            "current_name": "execute_process_08004028",
            "code": "\nvoid executeProcess_08004028(void)\n\n{\n  int iterationCount;\n  \n  FUN_0800458c();\n  FUN_08003ff4();\n  iterationCount = 3;\n  do {\n    FUN_08003f3c(1,0);\n    thunk_FUNC_08001168(100);\n    FUN_08003f3c(0,1);\n    thunk_FUNC_08001168(100);\n    FUN_08003f3c(0,0,1);\n    thunk_FUNC_08001168(100);\n    iterationCount = iterationCount + -1;\n  } while (iterationCount != 0);\n  FUN_08003f3c(1,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004028": "execute_process_08004028",
                "iVar1": "iterationCount"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003ff4",
                "thunk_FUN_08001168",
                "FUN_08003f3c",
                "FUN_0800458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800403c": {
            "entrypoint": "0x0800403c",
            "current_name": "execute_function_0800403c",
            "code": "\nvoid executeFunction_0800403c(undefined4 param_1,undefined4 param_2,undefined flag,int condition)\n\n{\n  int result;\n  undefined buffer [8];\n  \n  buffer[0] = flag;\n  result = FUN_08001828(&DAT_20001504,param_1,param_2,1,buffer,1,200);\n  if (result != 0) {\n    FUN_08004490(\"../Src/i2c.c\",0x1b);\n  }\n  if (condition != 0) {\n    thunk_FUNC_08001168(0x32);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800403c": "execute_function_0800403c",
                "param_3": "flag",
                "param_4": "condition",
                "iVar1": "result",
                "local_14": "buffer"
            },
            "calling": [
                "FUN_08002ad0",
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_08003298"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001828",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800407c": {
            "entrypoint": "0x0800407c",
            "current_name": "check_return_value_0800407c",
            "code": "\nundefined checkReturnValue_0800407c(undefined4 input1,undefined4 input2,undefined4 output1,undefined4 output2)\n\n{\n  int iVar1;\n  undefined returnValue [8];\n  \n  returnValue[0] = 0;\n  iVar1 = FUN_08001938(&DAT_20001504,input1,input2,1,returnValue,1,200);\n  if (iVar1 != 0) {\n    FUN_08004490(output1,output2);\n  }\n  return returnValue[0];\n}\n\n",
            "renaming": {
                "FUN_0800407c": "check_return_value_0800407c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output1",
                "param_4": "output2",
                "local_14": "returnValue"
            },
            "calling": [
                "FUN_08002ad0",
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_080040e8"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b8": {
            "entrypoint": "0x080040b8",
            "current_name": "check_and_execute_function_080040b8",
            "code": "\nvoid checkAndExecuteFunction_080040b8(undefined4 dataPointer1,undefined4 dataPointer2,undefined4 parameter1,undefined4 parameter2,\n                 undefined4 result1,undefined4 result2)\n\n{\n  int status;\n  \n  status = FUN_08001938(&DAT_20001504,dataPointer1,dataPointer2,1,parameter1,parameter2,200,parameter2);\n  if (status != 0) {\n    FUN_08004490(result1,result2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040b8": "check_and_execute_function_080040b8",
                "param_1": "dataPointer1",
                "param_2": "dataPointer2",
                "param_3": "parameter1",
                "param_4": "parameter2",
                "param_5": "result1",
                "param_6": "result2",
                "iVar1": "status"
            },
            "calling": [
                "FUN_08003034"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "copy_data_080040e8",
            "code": "\nvoid copyData_080040e8(undefined4 source,int offset,int destination,int length)\n\n{\n  undefined data;\n  int index;\n  undefined *destPtr;\n  int sourcePtr;\n  \n  destPtr = (undefined *)(destination + -1);\n  sourcePtr = length;\n  for (index = 0; index < length; index = index + 1) {\n    data = FUN_0800407c(source,offset + index & 0xffff,\"../Src/i2c.c\",0x4c,sourcePtr);\n    destPtr = destPtr + 1;\n    *destPtr = data;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "copy_data_080040e8",
                "param_1": "source",
                "param_2": "offset",
                "param_3": "destination",
                "param_4": "length",
                "iVar2": "index",
                "puVar3": "destPtr",
                "iVar4": "sourcePtr",
                "uVar1": "data"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_08003298",
                "FUN_08002bf0"
            ],
            "called": [
                "FUN_0800407c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800411c": {
            "entrypoint": "0x0800411c",
            "current_name": "optimize_and_calculate_0800411c",
            "code": "\nvoid optimizeAndCalculate_0800411c(void)\n\n{\n  undefined4 *pointerVar1;\n  longlong longVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  undefined4 resultVar1;\n  undefined4 resultVar2;\n  int tempVar8;\n  uint tempVar9;\n  uint tempVar10;\n  uint tempVar11;\n  uint tempVar12;\n  undefined4 *pointerVar13;\n  undefined4 unaffectedVar4;\n  int tempVar14;\n  int tempVar15;\n  bool boolVar16;\n  undefined8 resultVar3;\n  \n  tempVar8 = thunk_FUN_0800115c();\n  if (1 < (uint)(tempVar8 - DAT_2000028c)) {\n    DAT_2000028c = thunk_FUN_0800115c();\n    FUN_08002f28();\n  }\n  tempVar8 = thunk_FUN_0800115c();\n  if (2 < (uint)(tempVar8 - DAT_20000294)) {\n    DAT_20000294 = thunk_FUN_0800115c();\n    FUN_08004a84();\n  }\n  tempVar8 = thunk_FUN_0800115c();\n  if (3 < (uint)(tempVar8 - DAT_20000290)) {\n    DAT_20000290 = thunk_FUN_0800115c();\n    FUN_08004348();\n    FUN_08004384();\n    FUN_080043f0();\n    FUN_08004410();\n    FUN_08004434();\n    FUN_080043bc();\n    FUN_08004458();\n  }\n  if ((DAT_20000275 != '\\0') && (DAT_20000274 != '\\0')) {\n    tempVar15 = DAT_20000270 + (uint)DAT_20000266 * -0x100;\n    tempVar9 = (uint)((longlong)(int)(uint)DAT_20000268 * (longlong)tempVar15) >> 0x17 |\n            (int)((ulonglong)((longlong)(int)(uint)DAT_20000268 * (longlong)tempVar15) >> 0x20) << 9;\n    tempVar10 = (uint)((longlong)(int)(uint)DAT_20000264 * (longlong)tempVar15 >> 7);\n    tempVar11 = tempVar10 + (uint)DAT_20000260 * 0x10000;\n    tempVar4 = (uint)((ulonglong)((longlong)(int)(uint)DAT_20000262 * (longlong)tempVar15) >> 8);\n    tempVar8 = tempVar9 + 2000;\n    tempVar5 = tempVar4 + (uint)DAT_2000025e * 0x8000;\n    boolVar16 = (int)tempVar9 < 0;\n    if (1999 < tempVar8) {\n      tempVar9 = 0;\n    }\n    tempVar3 = tempVar9;\n    if (boolVar16 != SBORROW4(tempVar8,2000)) {\n      tempVar14 = tempVar9 * tempVar9 * 5;\n      tempVar9 = tempVar14 >> 2;\n      tempVar3 = tempVar14 >> 1;\n    }\n    tempVar12 = tempVar11 - tempVar3;\n    longVar2 = (ulonglong)(tempVar5 - tempVar9) * (ulonglong)DAT_2000026c;\n    tempVar14 = DAT_2000026c *\n             ((((int)((longlong)(int)(uint)DAT_20000262 * (longlong)tempVar15 >> 0x28) +\n               (uint)CARRY4(tempVar4,(uint)DAT_2000025e * 0x8000)) - ((int)tempVar9 >> 0x1f)) -\n             (uint)(tempVar5 < tempVar9)) + (int)((ulonglong)longVar2 >> 0x20);\n    tempVar4 = (uint)longVar2 >> 0x15 | tempVar14 * 0x800;\n    resultVar1 = FUN_08000c44(tempVar4 - tempVar12 >> 0xf |\n                         (((tempVar14 >> 0x15) -\n                          ((((int)((longlong)(int)(uint)DAT_20000264 * (longlong)tempVar15 >> 0x27) +\n                            (uint)CARRY4(tempVar10,(uint)DAT_20000260 * 0x10000)) -\n                           ((int)tempVar3 >> 0x1f)) - (uint)(tempVar11 < tempVar3))) - (uint)(tempVar4 < tempVar12)\n                         ) * 0x20000);\n    resultVar1 = FUN_08000e54(resultVar1,0x42c80000);\n    DAT_20000354 = resultVar1;\n    resultVar2 = FUN_08000c44(tempVar8);\n    DAT_20000358 = FUN_08000e54(resultVar2,0x42c80000);\n    FUN_08000e54(resultVar1,0x447d5000);\n    resultVar3 = FUN_08000428();\n    resultVar3 = FUN_08005900((int)resultVar3,(int)((ulonglong)resultVar3 >> 0x20),0x60000000,0x3fc85b95);\n    resultVar3 = FUN_08000168(0,0x3ff00000,(int)resultVar3,(int)((ulonglong)resultVar3 >> 0x20));\n    FUN_080004d0((int)resultVar3,(int)((ulonglong)resultVar3 >> 0x20),0,0x40e5a540);\n    resultVar1 = FUN_08000a30();\n    resultVar2 = 0;\n    pointerVar13 = &DAT_20000300;\n    DAT_20000350 = resultVar1;\n    do {\n      pointerVar1 = pointerVar13 + 1;\n      *pointerVar13 = *pointerVar1;\n      resultVar2 = FUN_08000adc(resultVar2);\n      pointerVar13 = pointerVar1;\n    } while (pointerVar1 != &DAT_2000034c);\n    DAT_2000034c = resultVar1;\n    resultVar1 = FUN_08000adc(resultVar2,resultVar1);\n    DAT_200002fc = FUN_08000e54(resultVar1,0x41a00000);\n    tempVar8 = FUN_08001078();\n    DAT_200014ab = tempVar8 * 100;\n    DAT_20000275 = '\\0';\n    DAT_20000274 = '\\0';\n    FUN_0800403c(0xee,DAT_20000038 + 0x50,1);\n    DAT_2000027c = thunk_FUN_0800115c();\n  }\n  tempVar8 = thunk_FUN_0800115c();\n  if (((10 < (uint)(tempVar8 - DAT_2000027c)) && (DAT_20000275 == '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_20000270 = FUN_08003034();\n    DAT_20000275 = '\\x01';\n    FUN_0800403c(0xee,DAT_20000038 + 0x40,1,0,unaffectedVar4);\n    DAT_20000278 = thunk_FUN_0800115c();\n  }\n  tempVar8 = thunk_FUN_0800115c();\n  if (((10 < (uint)(tempVar8 - DAT_20000278)) && (DAT_20000275 != '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_2000026c = FUN_08003034();\n    DAT_20000274 = '\\x01';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800411c": "optimize_and_calculate_0800411c",
                "puVar1": "pointerVar1",
                "lVar2": "longVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "resultVar1",
                "uVar7": "resultVar2",
                "iVar8": "tempVar8",
                "uVar9": "tempVar9",
                "uVar10": "tempVar10",
                "uVar11": "tempVar11",
                "uVar12": "tempVar12",
                "puVar13": "pointerVar13",
                "unaff_r4": "unaffectedVar4",
                "iVar14": "tempVar14",
                "iVar15": "tempVar15",
                "bVar16": "boolVar16",
                "uVar17": "resultVar3"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "thunk_FUN_0800115c",
                "FUN_080004d0",
                "FUN_08000e54",
                "FUN_08003034",
                "FUN_08000a30",
                "FUN_08000c44",
                "FUN_08004410",
                "FUN_08005900",
                "FUN_08004348",
                "FUN_08000168",
                "FUN_08000428",
                "FUN_08002f28",
                "FUN_08004458",
                "FUN_080043bc",
                "FUN_08004384",
                "FUN_0800403c",
                "FUN_08004a84",
                "FUN_080043f0",
                "FUN_08004434",
                "FUN_08001078",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004194": {
            "entrypoint": "0x08004194",
            "current_name": "initialize_system_settings_08004194",
            "code": "\nvoid initializeSystemSettings_08004194(void)\n\n{\n  FUN_08004028();\n  FUN_08004c70();\n  FUN_08002ea0();\n  FUN_08003298();\n  DAT_200000f4 = 1;\n  DAT_20000150 = 1;\n  DAT_200001ac = 0xffffffff;\n  DAT_20000098 = 1;\n  DAT_200000c8 = 0x44bb8000;\n  DAT_20000124 = 0x44b54000;\n  DAT_20000180 = 0x44fa0000;\n  DAT_2000006c = 0;\n  DAT_200000ac = 0x408ccccd;\n  DAT_200000b0 = 0x3ca3d70a;\n  DAT_200000b4 = 0x438c0000;\n  DAT_200000b8 = 0x40900000;\n  DAT_200000bc = 0x3ca3d70a;\n  DAT_200000c0 = 0x43b40000;\n  DAT_20000108 = 0x40733333;\n  DAT_2000010c = 0x3ca3d70a;\n  DAT_20000110 = 0x43820000;\n  DAT_20000114 = 0x40733333;\n  DAT_20000118 = 0x3ca3d70a;\n  DAT_2000011c = 0x43a00000;\n  DAT_20000164 = 0x40400000;\n  DAT_20000168 = 0x3c23d70a;\n  DAT_2000016c = 0x438c0000;\n  DAT_20000170 = 0;\n  DAT_20000174 = 0;\n  DAT_20000178 = 0;\n  DAT_20000050 = 0x41200000;\n  DAT_20000054 = 0;\n  DAT_20000058 = 0;\n  DAT_2000005c = 0;\n  DAT_20000060 = 0;\n  DAT_20000064 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004194": "initialize_system_settings_08004194"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08002ea0",
                "FUN_08004c70",
                "FUN_08004028",
                "FUN_08003298"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ae": {
            "entrypoint": "0x080041ae",
            "current_name": "perform_loop_080041ae",
            "code": "\nvoid performLoop_080041ae(void)\n\n{\n  FUN_08003eb0(0);\n  FUN_08004194();\n  do {\n    FUN_0800114c();\n    FUN_0800411c();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080041ae": "perform_loop_080041ae"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08003eb0",
                "FUN_08004194",
                "FUN_0800411c",
                "FUN_0800114c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041c4": {
            "entrypoint": "0x080041c4",
            "current_name": "initialize_components_080041c4",
            "code": "\nvoid initializeComponents_080041c4(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined4 output1;\n  \n  FUN_08003fc4(0);\n  FUN_08003fd0(0);\n  FUN_08003fdc(0);\n  FUN_08003fe8(0,output1,arg3,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041c4": "initialize_components_080041c4",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "extraout_r1": "output1"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08003fe8",
                "FUN_08003fc4",
                "FUN_08003fdc",
                "FUN_08003fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800426c": {
            "entrypoint": "0x0800426c",
            "current_name": "calculate_thresholds_0800426c",
            "code": "\n\n\nvoid calculate_thresholds_0800426c(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  \n  temp1 = FUN_08000ad8();\n  temp2 = FUN_08000adc(input1,input2);\n  temp3 = FUN_08000ad8(temp1,input3);\n  temp3 = FUN_08000adc(temp3,input4);\n  FUN_08000ad8(temp3,0x447a0000);\n  temp4 = FUN_08001078();\n  temp3 = FUN_08000ad8(temp2,input3);\n  temp3 = FUN_08000ad8(temp3,input4);\n  FUN_08000ad8(temp3,0x447a0000);\n  temp5 = FUN_08001078();\n  temp1 = FUN_08000adc(temp1,input3);\n  temp1 = FUN_08000ad8(temp1,input4);\n  FUN_08000ad8(temp1,0x447a0000);\n  temp6 = FUN_08001078();\n  temp1 = FUN_08000adc(input3,temp2);\n  temp1 = FUN_08000adc(temp1,input4);\n  FUN_08000ad8(temp1,0x447a0000);\n  temp7 = FUN_08001078();\n  if (999 < (int)temp7) {\n    temp7 = 1000;\n  }\n  if (999 < (int)temp6) {\n    temp6 = 1000;\n  }\n  if (999 < (int)temp5) {\n    temp5 = 1000;\n  }\n  if (999 < (int)temp4) {\n    temp4 = 1000;\n  }\n  DAT_200002a0 = temp5 & ~((int)temp5 >> 0x1f);\n  DAT_200002a4 = temp4 & ~((int)temp4 >> 0x1f);\n  DAT_2000029c = temp6 & ~((int)temp6 >> 0x1f);\n  DAT_20000298 = temp7 & ~((int)temp7 >> 0x1f);\n  FUN_08003fc4();\n  FUN_08003fd0(DAT_2000029c);\n  FUN_08003fdc(DAT_200002a0);\n  FUN_08003fe8(DAT_200002a4);\n  _DAT_200013dd = (short)DAT_20000298 + 1000;\n  DAT_200013df = (short)DAT_2000029c + 1000;\n  _DAT_200013e1 = (short)DAT_200002a0 + 1000;\n  DAT_200013e3 = (short)DAT_200002a4 + 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800426c": "calculate_thresholds_0800426c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08003fe8",
                "FUN_08003fc4",
                "FUN_08003fdc",
                "FUN_08001078",
                "FUN_08000adc",
                "FUN_08003fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004300": {
            "entrypoint": "0x08004300",
            "current_name": "calculate_checksum_08004300",
            "code": "\nvoid calculateChecksum_08004300(uint inputData,byte *dataBuffer,uint bufferSize)\n\n{\n  uint result;\n  byte *currentByte;\n  \n  FUN_08004c8c(&DAT_0800732e);\n  FUN_08004c18(bufferSize & 0xff);\n  result = bufferSize & 0xff ^ inputData;\n  FUN_08004c18(inputData);\n  for (currentByte = dataBuffer; (int)currentByte - (int)dataBuffer < (int)bufferSize; currentByte = currentByte + 1) {\n    FUN_08004c18(*currentByte);\n    result = result ^ *currentByte;\n  }\n  FUN_08004c18(result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004300": "calculate_checksum_08004300",
                "param_1": "inputData",
                "param_2": "dataBuffer",
                "param_3": "bufferSize",
                "uVar1": "result",
                "pbVar2": "currentByte"
            },
            "calling": [
                "FUN_08004458",
                "FUN_08004384",
                "FUN_080043bc",
                "FUN_08004410",
                "FUN_08004348",
                "FUN_080043f0",
                "FUN_08004434"
            ],
            "called": [
                "FUN_08004c18",
                "FUN_08004c8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004348": {
            "entrypoint": "0x08004348",
            "current_name": "initialize_data_08004348",
            "code": "\n\n\nvoid initializeData_08004348(undefined4 result,uint inputValue,undefined4 additionalValue)\n\n{\n  undefined4 constantValue;\n  uint maskedInputValue;\n  undefined4 stackVariable;\n  \n  _DAT_20001423 = 0x40003e9;\n  _DAT_20001427 = 0;\n  DAT_20001429 = 0;\n  constantValue = 0x40003e9;\n  maskedInputValue = inputValue & 0xff000000;\n  stackVariable = additionalValue;\n  FUN_08004300(100,&constantValue,7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004348": "initialize_data_08004348",
                "param_1": "result",
                "param_2": "inputValue",
                "param_3": "additionalValue",
                "local_10": "constantValue",
                "local_c": "maskedInputValue",
                "uStack_8": "stackVariable"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004384": {
            "entrypoint": "0x08004384",
            "current_name": "initialize_data_08004384",
            "code": "\n\n\nvoid initialize_data_08004384(undefined4 value1,undefined4 value2,undefined4 value3,uint flags)\n\n{\n  undefined4 data_ptr;\n  undefined4 stack_value;\n  uint masked_flags;\n  \n  _DAT_200013bd = 0x2a0007;\n  data_ptr = _DAT_200013b9;\n  stack_value = 0x2a0007;\n  _DAT_200013c1 = 0;\n  DAT_200013c3 = 0;\n  masked_flags = flags & 0xff000000;\n  FUN_08004300(0x65,&data_ptr,0xb,0,value1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004384": "initialize_data_08004384",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "flags",
                "local_14": "data_ptr",
                "uStack_10": "stack_value",
                "local_c": "masked_flags"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043bc": {
            "entrypoint": "0x080043bc",
            "current_name": "copy_data_and_call_function_080043bc",
            "code": "\nvoid copyDataAndCallFunction_080043bc(void)\n\n{\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 *ptrDest;\n  undefined4 *ptrSrc;\n  undefined4 destArray [2];\n  undefined2 srcArray [6];\n  \n  ptrSrc = (undefined4 *)&DAT_2000142a;\n  ptrDest = destArray;\n  do {\n    value1 = *ptrSrc;\n    value2 = ptrSrc[1];\n    ptrSrc = ptrSrc + 2;\n    *ptrDest = value1;\n    ptrDest[1] = value2;\n    ptrDest = ptrDest + 2;\n  } while (ptrSrc != (undefined4 *)&DAT_2000143a);\n  *(undefined2 *)ptrDest = DAT_2000143a;\n  FUN_08004300(0x66,destArray,0x12);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043bc": "copy_data_and_call_function_080043bc",
                "puVar4": "ptrSrc",
                "puVar3": "ptrDest",
                "local_24": "destArray",
                "local_1c": "srcArray",
                "uVar1": "value1",
                "uVar2": "value2"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043f0": {
            "entrypoint": "0x080043f0",
            "current_name": "initialize_data_080043f0",
            "code": "\n\n\nvoid initializeData_080043f0(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 arguments [2];\n  \n  data1 = _DAT_200013dd;\n  data2 = _DAT_200013e1;\n  arguments[0] = arg3;\n  FUN_08004300(0x68,&data1,8,arguments);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043f0": "initialize_data_080043f0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "local_10": "data1",
                "uStack_c": "data2",
                "auStack_8": "arguments"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004410": {
            "entrypoint": "0x08004410",
            "current_name": "initialize_data_08004410",
            "code": "\nvoid initializeData_08004410(undefined4 dataParameter1,undefined4 dataParameter2,undefined4 dataParameter3)\n\n{\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 data3;\n  \n  data1 = DAT_20001395;\n  data2 = CONCAT22((short)((uint)dataParameter2 >> 0x10),DAT_20001399);\n  data3 = dataParameter3;\n  FUN_08004300(0x6c,&data1,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004410": "initialize_data_08004410",
                "param_1": "dataParameter1",
                "param_2": "dataParameter2",
                "param_3": "dataParameter3",
                "local_10": "data1",
                "local_c": "data2",
                "uStack_8": "data3"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004434": {
            "entrypoint": "0x08004434",
            "current_name": "initialize_memory_08004434",
            "code": "\nvoid initializeMemory_08004434(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 data;\n  undefined4 combinedData;\n  undefined4 value;\n  \n  data = DAT_200014ab;\n  combinedData = CONCAT22((short)((uint)param2 >> 0x10),DAT_200014af);\n  value = param3;\n  FUN_08004300(0x6d,&data,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004434": "initialize_memory_08004434",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "local_10": "data",
                "local_c": "combinedData",
                "uStack_8": "value"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004458": {
            "entrypoint": "0x08004458",
            "current_name": "copy_data_and_call_function_08004458",
            "code": "\nvoid copyDataAndCallFunction_08004458(void)\n\n{\n  undefined4 *destArray;\n  undefined4 *sourceArray;\n  undefined4 tempValue;\n  undefined4 *destArray;\n  undefined4 *sourceArray;\n  undefined4 tempArray [3];\n  undefined2 tempArray2 [10];\n  \n  destArray = tempArray;\n  sourceArray = &DAT_2000139b;\n  do {\n    sourceArray = sourceArray;\n    destArray = destArray;\n    tempValue = sourceArray[1];\n    *destArray = *sourceArray;\n    destArray[1] = tempValue;\n    destArray = destArray + 2;\n    sourceArray = sourceArray + 2;\n  } while (sourceArray + 2 != (undefined4 *)0x200013b3);\n  destArray[2] = uRam200013b3;\n  *(undefined2 *)(destArray + 3) = *(undefined2 *)(sourceArray + 3);\n  FUN_08004300(0x70,tempArray,0x1e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004458": "copy_data_and_call_function_08004458",
                "puVar1": "destArray",
                "puVar2": "sourceArray",
                "uVar3": "tempValue",
                "puVar4": "destArray",
                "puVar5": "sourceArray",
                "local_30": "tempArray",
                "local_24": "tempArray2"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004490": {
            "entrypoint": "0x08004490",
            "current_name": "handle_error_08004490",
            "code": "\nvoid handleError_08004490(undefined4 errorMessage,undefined4 lineNumber)\n\n{\n  FUN_08001424(0x40011000,0x4000,1);\n  FUN_08001424(0x40011000,0x8000,0);\n  FUN_08001424(0x40011000,0x2000,0);\n  do {\n    FUN_0800142e(0x40011000,0x4000);\n    FUN_0800142e(0x40011000,0x8000);\n    FUN_0800142e(0x40011000,0x2000);\n    FUN_08004c8c(\"Error with \");\n    FUN_08004c8c(errorMessage);\n    FUN_08004c8c(\" at line: \");\n    FUN_08004cac(lineNumber);\n    FUN_08004c18(10);\n    thunk_FUNC_08001168(500);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004490": "handle_error_08004490",
                "param_1": "errorMessage",
                "param_2": "lineNumber"
            },
            "calling": [
                "FUN_0800407c",
                "FUN_0800403c",
                "FUN_08004514",
                "FUN_080040b8",
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004cac",
                "FUN_08004c18",
                "FUN_0800142e",
                "thunk_FUN_08001168",
                "FUN_08001424",
                "FUN_08004c8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004514": {
            "entrypoint": "0x08004514",
            "current_name": "initialize_peripherals_08004514",
            "code": "\nvoid initializePeripherals_08004514(void)\n\n{\n  int returnValue;\n  uint currentTime;\n  undefined4 fileIndex;\n  int loopCounter;\n  undefined4 parameter1;\n  int parameter2;\n  int parameter3;\n  undefined4 parameter4;\n  int parameter5;\n  undefined4 parametersArray [4];\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  undefined4 constant5;\n  \n  constant1 = 1;\n  constant2 = 0x10;\n  loopCounter = 2;\n  constant4 = 0;\n  parametersArray[0] = 2;\n  constant3 = 2;\n  constant5 = 0x380000;\n  returnValue = FUN_08001b58(parametersArray);\n  if (returnValue == 0) goto LAB_08004540;\n  fileIndex = 0x3c;\n  while( true ) {\n    returnValue = FUN_08004490(\"../Src/peripherals.c\",fileIndex);\nLAB_08004540:\n    parameter1 = 0xf;\n    parameter4 = 0x400;\n    parameter2 = loopCounter;\n    parameter3 = returnValue;\n    parameter5 = returnValue;\n    loopCounter = FUN_0800209c(&parameter1,loopCounter);\n    if (loopCounter == 0) break;\n    fileIndex = 0x49;\n  }\n  currentTime = FUN_08002214();\n  FUN_08001214(currentTime / 1000);\n  FUN_08001240(4);\n  FUN_08001194(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004514": "initialize_peripherals_08004514",
                "iVar1": "returnValue",
                "uVar2": "currentTime",
                "uVar3": "fileIndex",
                "iVar4": "loopCounter",
                "local_44": "parameter1",
                "local_40": "parameter2",
                "local_3c": "parameter3",
                "local_38": "parameter4",
                "local_34": "parameter5",
                "local_30": "parametersArray",
                "local_20": "constant1",
                "local_1c": "constant2",
                "local_14": "constant3",
                "local_10": "constant4",
                "local_c": "constant5"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08002214",
                "FUN_08001b58",
                "FUN_08004490",
                "FUN_0800209c",
                "FUN_08001194",
                "FUN_08001214",
                "FUN_08001240"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800458c": {
            "entrypoint": "0x0800458c",
            "current_name": "initialize_and_configure_peripherals_0800458c",
            "code": "\n\n\nvoid initialize_and_configure_peripherals_0800458c(void)\n\n{\n  int result;\n  undefined4 loop_variable;\n  int initial_value;\n  int peripheral_variable1;\n  int peripheral_variable2;\n  int peripheral_variable3;\n  int peripheral_variable4;\n  int peripheral_variable5;\n  int peripheral_variable6;\n  int peripheral_variable7;\n  int peripheral_variable8;\n  int peripheral_variable9;\n  int peripheral_variable10;\n  int peripheral_variable11;\n  int peripheral_variable12;\n  int peripheral_variable13;\n  undefined4 peripheral_variable14;\n  int peripheral_variable15;\n  \n  FUN_08001128();\n  FUN_08004514();\n  initial_value = 2;\n  _DAT_40021018 = _DAT_40021018 | 0x1c;\n  FUN_08001424(0x40011000,0xe000,0,_DAT_40021018 & 8);\n  FUN_08001424(0x40010800,0x20,0);\n  peripheral_variable9 = 0xe000;\n  peripheral_variable10 = 1;\n  peripheral_variable12 = 2;\n  FUN_08001264(0x40011000,&peripheral_variable9);\n  peripheral_variable9 = 0x20;\n  peripheral_variable10 = 1;\n  peripheral_variable12 = 2;\n  FUN_08001264(0x40010800,&peripheral_variable9);\n  DAT_20001504 = 0x40005400;\n  DAT_20001508 = 400000;\n  DAT_20001514 = 0x4000;\n  DAT_2000150c = 0;\n  DAT_20001510 = 0;\n  DAT_20001518 = 0;\n  DAT_2000151c = 0;\n  DAT_20001520 = 0;\n  DAT_20001524 = 0;\n  result = FUN_08001754();\n  if (result == 0) goto LAB_0800463a;\n  loop_variable = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  result = FUN_08004490(\"../Src/peripherals.c\",loop_variable);\nLAB_0800463a:\n                                  DAT_2000157c = 0x40013800;\n                                  DAT_20001580 = 0x1c200;\n                                  DAT_20001590 = 0xc;\n                                  DAT_20001584 = result;\n                                  DAT_20001588 = result;\n                                  DAT_2000158c = result;\n                                  DAT_20001594 = result;\n                                  DAT_20001598 = result;\n                                  result = FUN_08002724(&DAT_2000157c);\n                                  if (result == 0) break;\n                                  loop_variable = 0x151;\n                                }\n                                DAT_200015bc = 0x40012c00;\n                                DAT_200015c8 = 1000;\n                                DAT_200015c0 = initial_value;\n                                DAT_200015c4 = result;\n                                DAT_200015cc = result;\n                                DAT_200015d0 = result;\n                                result = FUN_080023d0(&DAT_200015bc);\n                                if (result == 0) break;\n                                loop_variable = 0x88;\n                              }\n                              peripheral_variable1 = result;\n                              peripheral_variable2 = result;\n                              result = FUN_080025a4(&DAT_200015bc,&peripheral_variable1);\n                              if (result == 0) break;\n                              loop_variable = 0x8f;\n                            }\n                            peripheral_variable3 = 0x60;\n                            peripheral_variable4 = result;\n                            peripheral_variable5 = result;\n                            peripheral_variable6 = result;\n                            peripheral_variable7 = result;\n                            peripheral_variable8 = result;\n                            result = FUN_0800245c(&DAT_200015bc,&peripheral_variable3,0xc);\n                            if (result == 0) break;\n                            loop_variable = 0x9a;\n                          }\n                          peripheral_variable14 = 0x2000;\n                          peripheral_variable9 = result;\n                          peripheral_variable10 = result;\n                          peripheral_variable11 = result;\n                          peripheral_variable12 = result;\n                          peripheral_variable13 = result;\n                          peripheral_variable15 = result;\n                          result = FUN_08002564(&DAT_200015bc,&peripheral_variable9);\n                          if (result == 0) break;\n                          loop_variable = 0xa6;\n                        }\n                        FUN_08004e14(&DAT_200015bc);\n                        DAT_200015f8 = 0x40000000;\n                        DAT_20001604 = 1000;\n                        DAT_200015fc = initial_value;\n                        DAT_20001600 = result;\n                        DAT_20001608 = result;\n                        result = FUN_080023d0(&DAT_200015f8);\n                        if (result == 0) break;\n                        loop_variable = 0xc3;\n                      }\n                      peripheral_variable3 = result;\n                      peripheral_variable4 = result;\n                      result = FUN_080025a4(&DAT_200015f8,&peripheral_variable3);\n                      if (result == 0) break;\n                      loop_variable = 0xca;\n                    }\n                    peripheral_variable9 = 0x60;\n                    peripheral_variable10 = result;\n                    peripheral_variable11 = result;\n                    peripheral_variable13 = result;\n                    result = FUN_0800245c(&DAT_200015f8,&peripheral_variable9,4);\n                    if (result == 0) break;\n                    loop_variable = 0xd3;\n                  }\n                  FUN_08004e14(&DAT_200015f8);\n                  DAT_2000154c = 1000;\n                  DAT_20001540 = 0x40000400;\n                  DAT_20001544 = initial_value;\n                  DAT_20001548 = result;\n                  DAT_20001550 = result;\n                  result = FUN_080023d0();\n                  if (result == 0) break;\n                  loop_variable = 0xf0;\n                }\n                peripheral_variable3 = 0;\n                peripheral_variable4 = 0;\n                result = FUN_080025a4(&DAT_20001540,&peripheral_variable3);\n                if (result == 0) break;\n                loop_variable = 0xf7;\n              }\n              peripheral_variable9 = 0x60;\n              peripheral_variable10 = result;\n              peripheral_variable11 = result;\n              peripheral_variable13 = result;\n              result = FUN_0800245c(&DAT_20001540,&peripheral_variable9,8);\n              if (result == 0) break;\n              loop_variable = 0x100;\n            }\n            initial_value = FUN_0800245c(&DAT_20001540,&peripheral_variable9,0xc);\n            if (initial_value == 0) break;\n            loop_variable = 0x105;\n          }\n          FUN_08004e14(&DAT_20001540);\n          DAT_200014c8 = 0x40000800;\n          DAT_200014cc = 2;\n          DAT_200014d4 = 1000;\n          DAT_200014d0 = initial_value;\n          DAT_200014d8 = initial_value;\n          result = FUN_080023d0(&DAT_200014c8);\n          if (result == 0) break;\n          loop_variable = 0x122;\n        }\n        peripheral_variable3 = result;\n        peripheral_variable4 = result;\n        result = FUN_080025a4(&DAT_200014c8,&peripheral_variable3);\n        if (result == 0) break;\n        loop_variable = 0x129;\n      }\n      peripheral_variable9 = 0x60;\n      peripheral_variable10 = result;\n      peripheral_variable11 = result;\n      peripheral_variable13 = result;\n      result = FUN_0800245c(&DAT_200014c8,&peripheral_variable9,8);\n      if (result == 0) break;\n      loop_variable = 0x132;\n    }\n    result = FUN_0800245c(&DAT_200014c8,&peripheral_variable9,0xc);\n    if (result == 0) break;\n    loop_variable = 0x137;\n  }\n  FUN_08004e14(&DAT_200014c8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800458c": "initialize_and_configure_peripherals_0800458c",
                "iVar1": "result",
                "uVar2": "loop_variable",
                "iVar3": "initial_value",
                "local_58": "peripheral_variable1",
                "local_54": "peripheral_variable2",
                "local_50": "peripheral_variable3",
                "local_4c": "peripheral_variable4",
                "local_48": "peripheral_variable5",
                "local_40": "peripheral_variable6",
                "local_3c": "peripheral_variable7",
                "local_38": "peripheral_variable8",
                "local_34": "peripheral_variable9",
                "local_30": "peripheral_variable10",
                "local_2c": "peripheral_variable11",
                "local_28": "peripheral_variable12",
                "local_24": "peripheral_variable13",
                "local_20": "peripheral_variable14",
                "local_1c": "peripheral_variable15"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08002564",
                "FUN_08001264",
                "FUN_08004e14",
                "FUN_08001754",
                "FUN_08004490",
                "FUN_0800245c",
                "FUN_08004514",
                "FUN_080023d0",
                "FUN_08001128",
                "FUN_08001424",
                "FUN_080025a4",
                "FUN_08002724"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800483c": {
            "entrypoint": "0x0800483c",
            "current_name": "process_data_0800483c",
            "code": "\nvoid processData_0800483c(int *data)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int index1;\n  int index2;\n  int index3;\n  \n  index2 = data[0xc];\n  result1 = FUN_08000adc(data[7],data[9]);\n  index2 = FUN_08000ad8(result1,index2);\n  data[10] = index2;\n  if (*data == 3) {\n    index2 = FUN_08001064(data[10],0);\n    if (index2 == 0) {\n      index2 = FUN_08001028(data[10],0xc3340000);\n    }\n    else {\n      index2 = FUN_08001064(data[10],0x43340000);\n    }\n    if (index2 != 0) {\n      index3 = data[10];\n      result1 = FUN_08000cec(data[10],0x43b40000);\n      index2 = FUN_08001064(data[10],0);\n      index1 = data[10];\n      if (index2 == 0) {\n        index1 = index1 + -0x80000000;\n      }\n      result1 = FUN_08000e54(result1,index1);\n      index2 = FUN_08000ad8(index3,result1);\n      data[10] = index2;\n    }\n  }\n  index3 = data[2];\n  index1 = data[3];\n  index2 = FUN_08000cec(data[1],data[10]);\n  data[0xe] = index2;\n  index2 = FUN_08000adc(data[10],data[0xf]);\n  data[0xf] = index2;\n  index2 = FUN_08001028(data[0xf],0xc3fa0000);\n  if (index2 == 0) {\n    index2 = FUN_08001064(data[0xf],0x43fa0000);\n    if (index2 == 0) {\n      index2 = data[0xf];\n    }\n    else {\n      index2 = 0x43fa0000;\n    }\n  }\n  else {\n    index2 = -0x3c060000;\n  }\n  data[0xf] = index2;\n  index2 = FUN_08000ad8(data[0xc],data[0xd]);\n  data[0x10] = index2;\n  index2 = data[0xe];\n  result1 = FUN_08000cec(index3,data[0xf]);\n  result1 = FUN_08000adc(result1,index2);\n  result2 = FUN_08000cec(index1,data[0x10]);\n  index2 = FUN_08000ad8(result1,result2);\n  data[0x12] = index2;\n  result1 = FUN_08000c44(data[0x13]);\n  index2 = FUN_08001028(data[0x12],0xc3fa0000);\n  if (index2 == 0) {\n    index2 = FUN_08001064(data[0x12],0x43fa0000);\n    if (index2 == 0) {\n      index2 = data[0x12];\n    }\n    else {\n      index2 = 0x43fa0000;\n    }\n  }\n  else {\n    index2 = -0x3c060000;\n  }\n  index2 = FUN_08000cec(index2,result1);\n  data[0x12] = index2;\n  data[0xd] = data[0xc];\n  data[0xb] = data[10];\n  data[0x15] = data[0x14];\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800483c": "process_data_0800483c",
                "param_1": "data",
                "iVar3": "index1",
                "iVar4": "index2",
                "iVar5": "index3",
                "uVar1": "result1",
                "uVar2": "result2"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000e54",
                "FUN_08001028",
                "FUN_08000c44",
                "FUN_08001064",
                "FUN_08000cec",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a30": {
            "entrypoint": "0x08004a30",
            "current_name": "initialize_data_08004a30",
            "code": "\nvoid initializeData_08004a30(void)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000285 != '\\0') {\n    if (DAT_200002a8 == '\\0') {\n      result = FUN_08003068();\n      DAT_20000068 = FUN_08000cec(result,0x42c80000);\n      DAT_200002a8 = '\\x01';\n    }\n    else {\n      result = FUN_08003068();\n      DAT_2000007c = FUN_08000cec(result,0x42c80000);\n    }\n  }\n  if (DAT_20000285 == '\\0') {\n    if (DAT_200002a8 != '\\0') {\n      DAT_200002a8 = DAT_20000285;\n    }\n    DAT_20000094 = DAT_20000288;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a30": "initialize_data_08004a30",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08003068",
                "FUN_08000cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "initialize_system_08004a84",
            "code": "\nvoid initializeSystem_08004a84(void)\n\n{\n  int result;\n  \n  DAT_200000d8 = FUN_08002ec0();\n  DAT_20000134 = FUN_08002ed4();\n  DAT_20000190 = FUN_08002ee8();\n  FUN_08004a30();\n  result = FUN_08001064(DAT_200000d8,0);\n  if (result == 0) {\n    result = FUN_08001028(DAT_200000d8,0xc2a00000);\n  }\n  else {\n    result = FUN_08001064(DAT_200000d8,0x42a00000);\n  }\n  if (result == 0) {\n    result = FUN_08001064(DAT_20000134,0);\n    if (result == 0) {\n      result = FUN_08001028(DAT_20000134,0xc2a00000);\n    }\n    else {\n      result = FUN_08001064(DAT_20000134,0x42a00000);\n    }\n    if (result == 0) {\n      FUN_08003f3c(1,1);\n      FUN_0800483c(&DAT_200000a8);\n      FUN_0800483c(&DAT_20000104);\n      FUN_0800483c(&DAT_20000160);\n      if (DAT_20000285 != '\\0') {\n        FUN_0800483c(&DAT_2000004c);\n        FUN_08000adc(DAT_20000094,0x44bb8000);\n      }\n      DAT_20000094 = DAT_20000288;\n      if (DAT_20000284 == '\\0') {\n        FUN_080041c4();\n      }\n      else {\n        FUN_0800426c(DAT_20000288,DAT_200000f0,DAT_2000014c,DAT_200001a8);\n      }\n      FUN_08000cec(DAT_200000ac,0x437f0000);\n      DAT_2000139b._3_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_200000b0,0x437f0000);\n      DAT_2000139f._0_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000108,0x437f0000);\n      DAT_2000139b._0_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_2000010c,0x437f0000);\n      DAT_2000139b._1_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000110,0x437f0000);\n      DAT_2000139b._2_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000164,0x437f0000);\n      DAT_2000139f._2_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000168,0x437f0000);\n      DAT_2000139f._3_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_2000016c,0x437f0000);\n      DAT_200013a3._0_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000050,0x437f0000);\n      DAT_200013a3._1_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000054,0x437f0000);\n      DAT_200013a3._2_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000058,0x437f0000);\n      DAT_200013a3._3_1_ = FUN_080010c4();\n      return;\n    }\n  }\n  FUN_080041c4();\n  FUN_08003f3c(0,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "initialize_system_08004a84",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08001028",
                "FUN_08002ee8",
                "FUN_080041c4",
                "FUN_0800483c",
                "FUN_08000cec",
                "FUN_08002ed4",
                "FUN_08004a30",
                "FUN_0800426c",
                "FUN_08001064",
                "FUN_080010c4",
                "FUN_08003f3c",
                "FUN_08000adc",
                "FUN_08002ec0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c18": {
            "entrypoint": "0x08004c18",
            "current_name": "process_data_08004c18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800289e) */\n\nundefined4 processData_08004c18(undefined input_param)\n\n{\n  int *ptr;\n  int counter_1;\n  int counter_2;\n  ushort *data_ptr;\n  \n  DAT_20001636._0_1_ = input_param;\n  data_ptr = &DAT_20001636;\n  if (((DAT_200015b5 != '\\x01') && (DAT_200015b5 != '\\\"')) || (DAT_200015b4 == '\\x01')) {\n    return 2;\n  }\n  DAT_200015b4 = 1;\n  DAT_200015b8 = 0;\n  DAT_200015a0 = 1;\n  if (DAT_200015b5 == '\\\"') {\n    DAT_200015b5 = '2';\n  }\n  else {\n    DAT_200015b5 = '\\x12';\n  }\n  DAT_200015a2 = 1;\nLAB_080027c4:\n  do {\n    if (DAT_200015a2 == 0) {\n      counter_1 = FUN_0800115c();\n      do {\n        if (*DAT_2000157c << 0x19 < 0) {\n          if (DAT_200015b5 == '2') {\n            DAT_200015b5 = 0x22;\n          }\n          else {\n            DAT_200015b5 = 1;\n          }\n          DAT_200015b4 = 0;\n          return 0;\n        }\n        counter_2 = FUN_0800115c();\n      } while ((uint)(counter_2 - counter_1) < 6);\nLAB_0800281c:\n      ptr = DAT_2000157c;\n      DAT_2000157c[3] = DAT_2000157c[3] & 0xffffff7f;\n      ptr[3] = ptr[3] & 0xffffffdf;\n      ptr[3] = ptr[3] & 0xfffffeff;\n      ptr[5] = ptr[5] & 0xfffffffe;\n      DAT_200015b5 = 1;\n      DAT_200015b4 = 0;\n      return 3;\n    }\n    DAT_200015a2 = DAT_200015a2 + -1;\n    if (DAT_20001584 == 0x1000) {\n      counter_1 = FUN_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        counter_2 = FUN_0800115c();\n        if (5 < (uint)(counter_2 - counter_1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = *data_ptr & 0x1ff;\n      if (DAT_2000158c == 0) {\n        data_ptr = data_ptr + 1;\n        goto LAB_080027c4;\n      }\n    }\n    else {\n      counter_1 = FUN_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        counter_2 = FUN_0800115c();\n        if (5 < (uint)(counter_2 - counter_1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = (uint)*(byte *)data_ptr;\n    }\n    data_ptr = (ushort *)((int)data_ptr + 1);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004c18": "process_data_08004c18",
                "param_1": "input_param",
                "piVar1": "ptr",
                "iVar2": "counter_1",
                "iVar3": "counter_2",
                "puVar4": "data_ptr"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004c8c"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "check_and_modify_08004c30",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nint * checkAndModify_08004c30(int *ptr)\n\n{\n  int iVar1;\n  \n  if (*ptr != 0x40013800) {\n    return ptr;\n  }\n  FUN_08003ec8(&DAT_20000364,DAT_20001634);\n  iVar1 = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(iVar1 + 0x14) = *(uint *)(iVar1 + 0x14) | 1;\n    *(uint *)(iVar1 + 0xc) = *(uint *)(iVar1 + 0xc) | 0x20;\n    return (int *)0x0;\n  }\n  return (int *)0x2;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "check_and_modify_08004c30",
                "param_1": "ptr"
            },
            "calling": [
                "FUN_0800290c"
            ],
            "called": [
                "FUN_08003ec8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c64": {
            "entrypoint": "0x08004c64",
            "current_name": "initialize_data_08004c64",
            "code": "\nvoid initializeData_08004c64(void)\n\n{\n  int index;\n  \n  index = 0;\n  DAT_20000b64 = 0;\n  DAT_20000b66 = 0;\n  DAT_20000b68 = 0;\n  do {\n    (&DAT_20000364)[index] = 0;\n    index = index + 1;\n  } while (index != 0x800);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c64": "initialize_data_08004c64",
                "iVar1": "index"
            },
            "calling": [
                "FUN_08004c70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c70": {
            "entrypoint": "0x08004c70",
            "current_name": "initialize_data_08004c70",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nundefined4 initializeData_08004c70(void)\n\n{\n  int dataPointer;\n  \n  FUN_08004c64();\n  dataPointer = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(dataPointer + 0x14) = *(uint *)(dataPointer + 0x14) | 1;\n    *(uint *)(dataPointer + 0xc) = *(uint *)(dataPointer + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08004c70": "initialize_data_08004c70",
                "iVar1": "dataPointer"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08004c64"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8c": {
            "entrypoint": "0x08004c8c",
            "current_name": "iterate_and_process_08004c8c",
            "code": "\nvoid iterateAndProcess_08004c8c(undefined *inputArray)\n\n{\n  uint comparisonResult;\n  undefined *currentElement;\n  \n  currentElement = inputArray;\n  while( true ) {\n    comparisonResult = FUN_08000150(inputArray);\n    if (comparisonResult <= (uint)((int)currentElement - (int)inputArray)) break;\n    FUN_08004c18(*currentElement);\n    currentElement = currentElement + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c8c": "iterate_and_process_08004c8c",
                "param_1": "inputArray",
                "uVar1": "comparisonResult",
                "puVar2": "currentElement"
            },
            "calling": [
                "FUN_08004cac",
                "FUN_08004490",
                "FUN_08004300"
            ],
            "called": [
                "FUN_08000150",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cac": {
            "entrypoint": "0x08004cac",
            "current_name": "initialize_data_08004cac",
            "code": "\nvoid initializeData_08004cac(undefined4 inputParam)\n\n{\n  FUN_08004ffc(&DAT_20001636,&DAT_0800735e,inputParam);\n  FUN_08004c8c(&DAT_20001636);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004cac": "initialize_data_08004cac",
                "param_1": "inputParam"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [
                "FUN_08004ffc",
                "FUN_08004c8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "set_flags_and_call_functions_08004ccc",
            "code": "\n\n\nvoid setFlagsAndCallFunctions_08004ccc(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  _DAT_40021018 = _DAT_40021018 | 1;\n  FUN_08001170(3,param2,_DAT_40021018,1,param1,1,param3);\n  FUN_08001194(0xfffffff4,0);\n  FUN_08001194(0xfffffff5,0);\n  FUN_08001194(0xfffffff6,0);\n  FUN_08001194(0xfffffffb,0);\n  FUN_08001194(0xfffffffc,0);\n  FUN_08001194(0xfffffffe,0);\n  FUN_08001194(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "set_flags_and_call_functions_08004ccc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [
                "FUN_08001128"
            ],
            "called": [
                "FUN_08001170",
                "FUN_08001194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d48": {
            "entrypoint": "0x08004d48",
            "current_name": "check_and_process_data_08004d48",
            "code": "\n\n\nvoid checkAndProcessData_08004d48(int *dataPointer,undefined4 value)\n\n{\n  undefined4 constantA;\n  undefined4 constantB;\n  \n  if (*dataPointer == 0x40005400) {\n    constantA = 0xc0;\n    constantB = 0x12;\n    FUN_08001264(0x40010c00,&constantA,0x40005400,3,dataPointer,value);\n    _DAT_4002101c = _DAT_4002101c | 0x200000;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d48": "check_and_process_data_08004d48",
                "param_1": "dataPointer",
                "param_2": "value",
                "local_18": "constantA",
                "local_14": "constantB"
            },
            "calling": [
                "FUN_08001754"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d8c": {
            "entrypoint": "0x08004d8c",
            "current_name": "update_registers_08004d8c",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateRegisters_08004d8c(int *registerValue)\n\n{\n  int currentValue;\n  \n  currentValue = *registerValue;\n  if (currentValue == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n  }\n  else if (currentValue == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (currentValue == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n  }\n  else if (currentValue == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d8c": "update_registers_08004d8c",
                "param_1": "registerValue",
                "iVar1": "currentValue"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e14": {
            "entrypoint": "0x08004e14",
            "current_name": "initialize_value_08004e14",
            "code": "\nvoid initializeValue_08004e14(int *valuePtr,undefined4 arg1,undefined4 arg2)\n\n{\n  undefined4 constant1;\n  int value;\n  undefined4 initializedValue;\n  undefined4 localVariable1;\n  undefined4 localVariable2;\n  undefined4 localVariable3;\n  \n  value = *valuePtr;\n  if (value == 0x40012c00) {\n    initializedValue = 0x800;\n  }\n  else {\n    if (value != 0x40000000) {\n      if (value == 0x40000400) {\n        initializedValue = 3;\n      }\n      else {\n        if (value != 0x40000800) {\n          return;\n        }\n        initializedValue = 0x300;\n      }\n      constant1 = 0x40010c00;\n      goto LAB_08004e2e;\n    }\n    initializedValue = 2;\n  }\n  constant1 = 0x40010800;\nLAB_08004e2e:\n  localVariable3 = 2;\n  localVariable1 = 2;\n  localVariable2 = arg2;\n  FUN_08001264(constant1,&initializedValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e14": "initialize_value_08004e14",
                "param_1": "valuePtr",
                "param_2": "arg1",
                "param_3": "arg2",
                "uVar1": "constant1",
                "iVar2": "value",
                "local_18": "initializedValue",
                "local_14": "localVariable1",
                "uStack_10": "localVariable2",
                "local_c": "localVariable3"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e7c": {
            "entrypoint": "0x08004e7c",
            "current_name": "initialize_system_08004e7c",
            "code": "\n\n\nvoid initializeSystem_08004e7c(int *systemStatus)\n\n{\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  \n  if (*systemStatus == 0x40013800) {\n    _DAT_40021018 = _DAT_40021018 | 0x4000;\n    value1 = 0x200;\n    value2 = 2;\n    value4 = 3;\n    FUN_08001264(0x40010800,&value1);\n    value1 = 0x400;\n    value2 = 0;\n    value3 = 0;\n    FUN_08001264(0x40010800,&value1);\n    FUN_08001194(0x25,0,0);\n    FUN_080011fc(0x25);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e7c": "initialize_system_08004e7c",
                "param_1": "systemStatus",
                "local_18": "value1",
                "local_14": "value2",
                "local_10": "value3",
                "local_c": "value4"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08001264",
                "FUN_08001194",
                "FUN_080011fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f10": {
            "entrypoint": "0x08004f10",
            "current_name": "initialize_registers_08004f10",
            "code": "\n\n\nvoid initializeRegisters_08004f10(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f10": "initialize_registers_08004f10"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800115c": {
            "entrypoint": "0x08004f60",
            "current_name": "get_global_variable_value_thunk_0800115c",
            "code": "\nundefined4 get_global_variable_value_thunk_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800115c": "get_global_variable_value_thunk_0800115c"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08001168": {
            "entrypoint": "0x08004f64",
            "current_name": "thunk_FUNC_08001168",
            "code": "\nvoid thunk_FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "thunk_FUN_08001168": "thunk_FUNC_08001168"
            },
            "calling": [
                "FUN_0800403c",
                "FUN_08004490",
                "FUN_08004028",
                "FUN_08003298"
            ],
            "called": [
                "FUN_08001168"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08004f68",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000228; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007448);\n  }\n  for (puVar2 = &DAT_20000228; puVar2 < &DAT_200016a0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  FUN_08004f10();\n  FUN_08004fb4();\n  UNRECOVERED_JUMPTABLE = (code *)0x8004f9a;\n  FUN_080041ae();\n                    /* WARNING: Could not recover jumptable at 0x08004f9a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08004f10",
                "FUN_08004fb4",
                "FUN_080041ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fb4": {
            "entrypoint": "0x08004fb4",
            "current_name": "run_all_functions_08004fb4",
            "code": "\nvoid run_all_functions_08004fb4(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  FUNC_080072d4();\n  for (index = 0; index != 1; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fb4": "run_all_functions_08004fb4",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08000134",
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ffc": {
            "entrypoint": "0x08004ffc",
            "current_name": "clear_memory_08004ffc",
            "code": "\nvoid clearMemory_08004ffc(undefined *memoryPointer,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined *pointerArray [2];\n  undefined4 maxValue;\n  undefined2 arraySize;\n  undefined2 maxSize;\n  undefined *currentPointer;\n  undefined4 maxValue2;\n  undefined4 stackValue1;\n  undefined4 stackValue2;\n  undefined4 stackValue3;\n  \n  arraySize = 0x208;\n  maxValue = 0x7fffffff;\n  maxValue2 = 0x7fffffff;\n  maxSize = 0xffff;\n  pointerArray[0] = memoryPointer;\n  currentPointer = memoryPointer;\n  stackValue1 = value1;\n  stackValue2 = value2;\n  stackValue3 = value3;\n  FUN_080050fc(DAT_200001c0,pointerArray,value1);\n  *pointerArray[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ffc": "clear_memory_08004ffc",
                "param_1": "memoryPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "local_78": "pointerArray",
                "local_70": "maxValue",
                "local_6c": "arraySize",
                "local_6a": "maxSize",
                "local_68": "currentPointer",
                "local_64": "maxValue2",
                "uStack_c": "stackValue1",
                "uStack_8": "stackValue2",
                "uStack_4": "stackValue3"
            },
            "calling": [
                "FUN_08004cac"
            ],
            "called": [
                "FUN_080050fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005044": {
            "entrypoint": "0x08005044",
            "current_name": "process_data_08005044",
            "code": "\nundefined4 process_data_08005044(undefined4 *output_data,int *input_data,undefined4 data_length,uint max_length)\n\n{\n  int result;\n  uint new_length;\n  uint current_length;\n  int offset;\n  \n  current_length = input_data[2];\n  if ((current_length <= max_length) && ((*(ushort *)(input_data + 3) & 0x480) != 0)) {\n    offset = *input_data - input_data[4];\n    current_length = (uint)(input_data[5] * 3) / 2;\n    new_length = max_length + 1 + offset;\n    if (current_length < new_length) {\n      current_length = new_length;\n    }\n    if ((int)((uint)*(ushort *)(input_data + 3) << 0x15) < 0) {\n      result = FUN_08005714(output_data,current_length);\n      if (result == 0) {\nLAB_0800508a:\n        *output_data = 0xc;\n        *(ushort *)(input_data + 3) = *(ushort *)(input_data + 3) | 0x40;\n        return 0xffffffff;\n      }\n      FUN_08005630(result,input_data[4],offset);\n      *(ushort *)(input_data + 3) = *(ushort *)(input_data + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      result = FUN_080057d0(output_data,input_data[4],current_length);\n      if (result == 0) {\n        FUN_0800567c(output_data,input_data[4]);\n        goto LAB_0800508a;\n      }\n    }\n    input_data[4] = result;\n    *input_data = result + offset;\n    input_data[5] = current_length;\n    input_data[2] = current_length - offset;\n    current_length = max_length;\n  }\n  if (max_length <= current_length) {\n    current_length = max_length;\n  }\n  FUN_08005646(*input_data,data_length,current_length);\n  input_data[2] = input_data[2] - current_length;\n  *input_data = current_length + *input_data;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005044": "process_data_08005044",
                "param_1": "output_data",
                "param_2": "input_data",
                "param_3": "data_length",
                "param_4": "max_length",
                "iVar1": "result",
                "uVar2": "new_length",
                "uVar3": "current_length",
                "iVar4": "offset"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_0800567c",
                "FUN_08005714",
                "FUN_080057d0",
                "FUN_08005646",
                "FUN_08005630"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050fc": {
            "entrypoint": "0x080050fc",
            "current_name": "parse_and_process_data_080050fc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005294) */\n\nint parseAndProcessData_080050fc(undefined4 *param_1,int *param_2,byte *param_3,int *param_4)\n\n{\n  int result;\n  int tempResult;\n  int *tempPtr;\n  bool isNumber;\n  byte *currentChar;\n  byte *nextChar;\n  int additionalData;\n  int *outputData;\n  uint flags;\n  int decimal;\n  undefined4 tempVar;\n  int integer;\n  int processedSize;\n  byte selectedChar;\n  undefined hexFlag1;\n  undefined hexFlag2;\n  undefined flag;\n  undefined4 ptr;\n  \n  outputData = param_4;\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    result = FUN_08005714(param_1,0x40);\n    *param_2 = result;\n    param_2[4] = result;\n    if (result == 0) {\n      *param_1 = 0xc;\n      return -1;\n    }\n    param_2[5] = 0x40;\n  }\n  processedSize = 0;\n  hexFlag1 = 0x20;\n  hexFlag2 = 0x30;\n  currentChar = param_3;\nLAB_08005146:\n  nextChar = currentChar;\n  if (*nextChar != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  currentChar = nextChar + 1;\n  if (*nextChar != 0x25) goto LAB_08005146;\nLAB_08005150:\n  result = (int)nextChar - (int)param_3;\n  if (result != 0) {\n    tempResult = FUN_08005044(param_1,param_2,param_3,result);\n    if (tempResult == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(param_2 + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return processedSize;\n    }\n    processedSize = processedSize + result;\n  }\n  if (*nextChar == 0) goto LAB_080052ac;\n  flags = 0;\n  integer = 0;\n  decimal = -1;\n  tempVar = 0;\n  flag = 0;\n  ptr = 0;\n  currentChar = nextChar + 1;\n  while( true ) {\n    result = FUN_08005614(&DAT_08007379,*currentChar);\n    param_3 = currentChar + 1;\n    if (result == 0) break;\n    flags = 1 << (result + 0xf7ff8c87U & 0xff) | flags;\n    currentChar = param_3;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    flag = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    flag = 0x2b;\n  }\n  if (*currentChar == 0x2a) {\n    tempPtr = outputData + 1;\n    result = *outputData;\n    outputData = tempPtr;\n    if (result < 0) {\n      integer = -result;\n      flags = flags | 2;\n      goto LAB_080051fc;\n    }\n  }\n  else {\n    isNumber = false;\n    result = integer;\n    param_3 = currentChar;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      result = result * 10 + (*param_3 - 0x30);\n      isNumber = true;\n      param_3 = param_3 + 1;\n    }\n    if (!isNumber) goto LAB_080051fc;\n  }\n  integer = result;\nLAB_080051fc:\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      tempPtr = outputData + 1;\n      decimal = *outputData;\n      outputData = tempPtr;\n      if (decimal < 0) {\n        decimal = -1;\n      }\n    }\n    else {\n      isNumber = false;\n      result = 0;\n      decimal = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        result = result * 10 + (*param_3 - 0x30);\n        isNumber = true;\n      }\n      if (isNumber) {\n        decimal = result;\n      }\n    }\n  }\n  result = FUN_08005614(&DAT_0800737f,*param_3,3);\n  if (result != 0) {\n    param_3 = param_3 + 1;\n    flags = flags | 0x40 << (result + 0xf7ff8c81U & 0xff);\n  }\n  selectedChar = *param_3;\n  param_3 = param_3 + 1;\n  result = FUN_08005614(\"efgEFG\",selectedChar,6);\n  if (result == 0) {\n    additionalData = FUN_080053d4(param_1,&flags,param_2,0x8005045,&outputData);\n    if (additionalData == -1) goto LAB_080052ac;\n  }\n  else {\n    outputData = (int *)(((int)outputData + 7U & 0xfffffff8) + 8);\n  }\n  processedSize = processedSize + additionalData;\n  currentChar = param_3;\n  goto LAB_08005146;\n}\n\n",
            "renaming": {
                "FUN_080050fc": "parse_and_process_data_080050fc",
                "iVar1": "result",
                "iVar2": "tempResult",
                "piVar3": "tempPtr",
                "bVar4": "isNumber",
                "pbVar5": "currentChar",
                "pbVar6": "nextChar",
                "unaff_r9": "additionalData",
                "local_8c": "outputData",
                "local_88": "flags",
                "local_84": "decimal",
                "local_80": "tempVar",
                "local_7c": "integer",
                "local_74": "processedSize",
                "local_70": "selectedChar",
                "local_6f": "hexFlag1",
                "local_6e": "hexFlag2",
                "local_45": "flag",
                "local_30": "ptr"
            },
            "calling": [
                "FUN_08004ffc"
            ],
            "called": [
                "FUN_08005044",
                "FUN_080053d4",
                "FUN_08005714",
                "FUN_08005614"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052e4": {
            "entrypoint": "0x080052e4",
            "current_name": "process_data_080052e4",
            "code": "\nundefined4\nprocessData_080052e4(undefined4 input,uint *data,uint *output,undefined4 param,code *callback)\n\n{\n  int index;\n  int returnValue;\n  uint maxValue;\n  uint count;\n  bool flag;\n  \n  maxValue = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    maxValue = data[2];\n  }\n  *output = maxValue;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output = maxValue + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *output); index = index + 1) {\n      returnValue = (*callback)(input,param,(int)data + 0x19,1);\n      if (returnValue == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxValue = (uint)*(byte *)((int)data + 0x43);\n  if (maxValue != 0) {\n    maxValue = 1;\n  }\n  count = maxValue;\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + maxValue + 0x43) = 0x30;\n    count = maxValue + 2;\n    *(undefined *)((int)data + maxValue + 0x44) = *(undefined *)((int)data + 0x45);\n  }\n  index = (*callback)(input,param,(int)data + 0x43,count);\n  if (index != -1) {\n    maxValue = data[3];\n    flag = (*data & 6) != 4;\n    if (flag) {\n      maxValue = 0;\n    }\n    count = 0;\n    if (!flag) {\n      maxValue = maxValue - *output;\n    }\n    if (!flag) {\n      maxValue = maxValue & ~((int)maxValue >> 0x1f);\n    }\n    if ((int)data[4] < (int)data[2]) {\n      maxValue = maxValue + (data[2] - data[4]);\n    }\n    while( true ) {\n      if (maxValue == count) {\n        return 0;\n      }\n      index = (*callback)(input,param,(int)data + 0x1a,1);\n      if (index == -1) break;\n      count = count + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080052e4": "process_data_080052e4",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "index",
                "iVar2": "returnValue",
                "uVar3": "maxValue",
                "uVar4": "count",
                "bVar5": "flag"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "convert_and_process_data_080053d4",
            "code": "\nuint convertAndProcessData_080053d4(undefined4 arg1,uint *dataPtr,undefined4 arg3,code *callbackFunc,uint **ptrToPtr)\n\n{\n  byte byteVal;\n  int index;\n  uint *ptr;\n  int innerIndex;\n  char *charPtr;\n  uint tempVal;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint value;\n  uint tempValue;\n  char *charPtr2;\n  char *charPtr3;\n  uint localArray [2];\n  \n  byteVal = *(byte *)(dataPtr + 6);\n  charPtr3 = (char *)((int)dataPtr + 0x43);\n  if (byteVal != 0x6e) {\n    if (byteVal < 0x6f) {\n      if (byteVal != 99) {\n        if (byteVal < 100) {\n          if (byteVal == 0) goto LAB_0800558e;\n          if (byteVal != 0x58) goto LAB_08005404;\n          *(undefined *)((int)dataPtr + 0x45) = 0x58;\n          charPtr = \"0123456789ABCDEF\";\nLAB_0800551e:\n          tempVal = *dataPtr;\n          ptr = *ptrToPtr;\n          *ptrToPtr = ptr + 1;\n          if (((tempVal & 0x80) == 0) && ((int)(tempVal << 0x19) < 0)) {\n            value = (uint)*(ushort *)ptr;\n          }\n          else {\n            value = *ptr;\n          }\n          if ((int)(tempVal << 0x1f) < 0) {\n            *dataPtr = tempVal | 0x20;\n          }\n          if (value == 0) {\n            *dataPtr = *dataPtr & 0xffffffdf;\n          }\n          tempVal = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)dataPtr + 0x43) = 0;\n        }\n        else {\n          if ((byteVal != 100) && (byteVal != 0x69)) goto LAB_08005404;\n          value = *dataPtr;\n          ptr = *ptrToPtr;\n          if ((value & 0x80) == 0) {\n            *ptrToPtr = ptr + 1;\n            if ((value & 0x40) == 0) goto LAB_08005424;\n            value = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *ptrToPtr = ptr + 1;\nLAB_08005424:\n            value = *ptr;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)dataPtr + 0x43) = 0x2d;\n          }\n          charPtr = \"0123456789ABCDEF\";\n          tempVal = 10;\n        }\n        tempValue = dataPtr[1];\n        dataPtr[2] = tempValue;\n        charPtr2 = charPtr3;\n        if ((int)tempValue < 0) {\n          if (value != 0) goto LAB_08005552;\nLAB_08005600:\n          *(char *)((int)dataPtr + 0x42) = *charPtr;\n          charPtr2 = (char *)((int)dataPtr + 0x42);\n        }\n        else {\n          *dataPtr = *dataPtr & 0xfffffffb;\n          if (value == 0) {\n            if (tempValue != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              tempValue = value / tempVal;\n              charPtr2 = charPtr2 + -1;\n              *charPtr2 = charPtr[value - tempVal * tempValue];\n              value = tempValue;\n            } while (tempValue != 0);\n          }\n        }\n        if (((tempVal == 8) && ((int)(*dataPtr << 0x1f) < 0)) && ((int)dataPtr[1] <= (int)dataPtr[4]))\n        {\n          charPtr2[-1] = '0';\n          charPtr2 = charPtr2 + -1;\n        }\n        dataPtr[4] = (int)charPtr3 - (int)charPtr2;\n        charPtr3 = charPtr2;\n        goto LAB_080054fa;\n      }\n      ptr = *ptrToPtr;\n      *ptrToPtr = ptr + 1;\n      *(char *)((int)dataPtr + 0x42) = (char)*ptr;\nLAB_08005464:\n      charPtr3 = (char *)((int)dataPtr + 0x42);\n      value = 1;\n    }\n    else {\n      if (byteVal != 0x73) {\n        if (byteVal < 0x74) {\n          if (byteVal == 0x6f) {\nLAB_0800548a:\n            value = *dataPtr;\n            ptr = *ptrToPtr;\n            if ((value & 0x80) == 0) {\n              *ptrToPtr = ptr + 1;\n              if ((value & 0x40) == 0) goto LAB_08005498;\n              value = (uint)*(ushort *)ptr;\n            }\n            else {\n              *ptrToPtr = ptr + 1;\nLAB_08005498:\n              value = *ptr;\n            }\n            if (byteVal == 0x6f) {\n              tempVal = 8;\n            }\n            else {\n              tempVal = 10;\n            }\n            charPtr = \"0123456789ABCDEF\";\n            goto LAB_080054b4;\n          }\n          if (byteVal == 0x70) {\n            *dataPtr = *dataPtr | 0x20;\nLAB_0800544a:\n            charPtr = \"0123456789abcdef\";\n            *(undefined *)((int)dataPtr + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (byteVal == 0x75) goto LAB_0800548a;\n          if (byteVal == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)dataPtr + 0x42) = byteVal;\n        goto LAB_08005464;\n      }\n      ppcVar8 = (char **)*ptrToPtr;\n      *ptrToPtr = (uint *)(ppcVar8 + 1);\n      charPtr3 = *ppcVar8;\n      index = FUN_08005614(charPtr3,0,dataPtr[1]);\n      if (index != 0) {\n        dataPtr[1] = index - (int)charPtr3;\n      }\n      value = dataPtr[1];\n    }\n    dataPtr[4] = value;\n    *(undefined *)((int)dataPtr + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  value = *dataPtr;\n  ppuVar7 = (uint **)*ptrToPtr;\n  tempVal = dataPtr[5];\n  if ((value & 0x80) == 0) {\n    *ptrToPtr = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\n    if ((value & 0x40) == 0) goto LAB_0800557a;\n    *(short *)ptr = (short)tempVal;\n  }\n  else {\n    *ptrToPtr = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\nLAB_0800557a:\n    *ptr = tempVal;\n  }\nLAB_0800558e:\n  dataPtr[4] = 0;\nLAB_080054fa:\n  index = FUN_080052e4(arg1,dataPtr,localArray,arg3,callbackFunc);\n  if ((index == -1) || (index = (*callbackFunc)(arg1,arg3,charPtr3,dataPtr[4]), index == -1)) {\nLAB_0800550e:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*dataPtr << 0x1e) < 0) {\n      for (index = 0; index < (int)(dataPtr[3] - localArray[0]); index = index + 1) {\n        innerIndex = (*callbackFunc)(arg1,arg3,(int)dataPtr + 0x19,1);\n        if (innerIndex == -1) goto LAB_0800550e;\n      }\n    }\n    value = dataPtr[3];\n    if ((int)dataPtr[3] < (int)localArray[0]) {\n      value = localArray[0];\n    }\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "convert_and_process_data_080053d4",
                "param_1": "arg1",
                "param_2": "dataPtr",
                "param_3": "arg3",
                "param_4": "callbackFunc",
                "param_5": "ptrToPtr",
                "bVar1": "byteVal",
                "iVar2": "index",
                "puVar3": "ptr",
                "iVar4": "innerIndex",
                "pcVar5": "charPtr",
                "uVar6": "tempVal",
                "uVar9": "value",
                "uVar10": "tempValue",
                "pcVar11": "charPtr2",
                "pcVar12": "charPtr3",
                "local_24": "localArray"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_080052e4",
                "FUN_08005614"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005614": {
            "entrypoint": "0x08005614",
            "current_name": "find_character_position_08005614",
            "code": "\nchar * find_character_position_08005614(char *string,char character,int length)\n\n{\n  char *current;\n  char *next;\n  \n  current = string;\n  do {\n    next = current;\n    if (next == string + length) {\n      return (char *)0x0;\n    }\n    current = next + 1;\n  } while (*next != character);\n  return next;\n}\n\n",
            "renaming": {
                "FUN_08005614": "find_character_position_08005614",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current",
                "pcVar2": "next"
            },
            "calling": [
                "FUN_080053d4",
                "FUN_080050fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005630": {
            "entrypoint": "0x08005630",
            "current_name": "copy_data_08005630",
            "code": "\nvoid copyData_08005630(int destPtr,undefined *srcPtr,int length)\n\n{\n  undefined *endPtr;\n  undefined *destEndPtr;\n  \n  destEndPtr = (undefined *)(destPtr + -1);\n  endPtr = srcPtr + length;\n  for (; srcPtr != endPtr; srcPtr = srcPtr + 1) {\n    destEndPtr = destEndPtr + 1;\n    *destEndPtr = *srcPtr;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005630": "copy_data_08005630",
                "param_1": "destPtr",
                "param_2": "srcPtr",
                "param_3": "length",
                "puVar1": "endPtr",
                "puVar2": "destEndPtr"
            },
            "calling": [
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005646": {
            "entrypoint": "0x08005646",
            "current_name": "copy_and_reverse_08005646",
            "code": "\nvoid copyAndReverse_08005646(undefined *destination,undefined *source,int length)\n\n{\n  undefined *endPtr;\n  \n  endPtr = source + length;\n  if ((source < destination) && (destination < endPtr)) {\n    destination = destination + length;\n    length = length - (int)endPtr;\n    while (endPtr + length != (undefined *)0x0) {\n      endPtr = endPtr + -1;\n      destination = destination + -1;\n      *destination = *endPtr;\n    }\n    return;\n  }\n  destination = destination + -1;\n  for (; source != endPtr; source = source + 1) {\n    destination = destination + 1;\n    *destination = *source;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005646": "copy_and_reverse_08005646",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "endPtr"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800567c": {
            "entrypoint": "0x0800567c",
            "current_name": "manage_linked_lists_0800567c",
            "code": "\nvoid manageLinkedLists_0800567c(undefined4 *result,int size,undefined4 arg3,undefined4 arg4)\n\n{\n  int **tmp1;\n  int **tmp2;\n  int **tmp3;\n  int *tmp4;\n  int **tmp5;\n  int **tmp6;\n  \n  if (size == 0) {\n    return;\n  }\n  tmp6 = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    tmp6 = (int **)((int)tmp6 + *(int *)(size + -4));\n  }\n  FUNC_0800583c();\n  tmp3 = (int **)&DAT_200002ac;\n  if (DAT_200002ac == (int **)0x0) {\n    tmp6[1] = (int *)0x0;\n    tmp2 = tmp1;\n    DAT_200002ac = tmp6;\n  }\n  else {\n    tmp3 = DAT_200002ac;\n    if (tmp6 < DAT_200002ac) {\n      tmp2 = (int **)*tmp6;\n      tmp3 = (int **)((int)tmp6 + (int)tmp2);\n      if (DAT_200002ac == tmp3) {\n        tmp4 = *DAT_200002ac;\n        DAT_200002ac = (int **)DAT_200002ac[1];\n        tmp3 = (int **)((int)tmp4 + (int)tmp2);\n        *tmp6 = (int *)tmp3;\n      }\n      tmp6[1] = (int *)DAT_200002ac;\n      DAT_200002ac = tmp6;\n    }\n    else {\n      do {\n        tmp5 = tmp3;\n        tmp3 = (int **)tmp5[1];\n        if (tmp3 == (int **)0x0) break;\n      } while (tmp3 <= tmp6);\n      tmp2 = (int **)*tmp5;\n      if ((int **)((int)tmp5 + (int)tmp2) == tmp6) {\n        tmp2 = (int **)((int)tmp2 + (int)*tmp6);\n        *tmp5 = (int *)tmp2;\n        if (tmp3 == (int **)((int)tmp5 + (int)tmp2)) {\n          tmp4 = *tmp3;\n          tmp3 = (int **)tmp3[1];\n          tmp2 = (int **)((int)tmp2 + (int)tmp4);\n          *tmp5 = (int *)tmp2;\n          tmp5[1] = (int *)tmp3;\n        }\n      }\n      else if (tmp6 < (int **)((int)tmp5 + (int)tmp2)) {\n        *result = 0xc;\n      }\n      else {\n        tmp2 = (int **)((int)tmp6 + (int)*tmp6);\n        if (tmp3 == tmp2) {\n          tmp4 = *tmp3;\n          tmp3 = (int **)tmp3[1];\n          tmp2 = (int **)((int)tmp4 + (int)*tmp6);\n          *tmp6 = (int *)tmp2;\n        }\n        tmp6[1] = (int *)tmp3;\n        tmp5[1] = (int *)tmp6;\n      }\n    }\n  }\n  FUNC_0800583e(result,tmp2,tmp3,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800567c": "manage_linked_lists_0800567c",
                "param_1": "result",
                "param_2": "size",
                "param_3": "arg3",
                "param_4": "arg4",
                "extraout_r1": "tmp1",
                "ppiVar1": "tmp2",
                "ppiVar2": "tmp3",
                "piVar3": "tmp4",
                "ppiVar4": "tmp5",
                "ppiVar5": "tmp6"
            },
            "calling": [
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "called": [
                "FUN_0800583c",
                "FUN_0800583e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "allocate_memory_block_08005714",
            "code": "\nuint allocate_memory_block_08005714(undefined4 *block_address,uint block_size)\n\n{\n  uint *current_block;\n  int offset;\n  uint *previous_block;\n  uint difference;\n  uint *new_block;\n  uint adjusted_size;\n  \n  adjusted_size = (block_size + 3 & 0xfffffffc) + 8;\n  if (adjusted_size < 0xc) {\n    adjusted_size = 0xc;\n  }\n  if (((int)adjusted_size < 0) || (adjusted_size < block_size)) {\n    *block_address = 0xc;\n  }\n  else {\n    FUNC_0800583c();\n    current_block = DAT_200002ac;\n    new_block = DAT_200002ac;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      difference = *previous_block - adjusted_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (new_block == previous_block) {\n            current_block = (uint *)new_block[1];\n            DAT_200002ac = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (new_block != previous_block) {\n            new_block[1] = (uint)current_block;\n            new_block = previous_block;\n          }\n        }\n        else {\n          *previous_block = difference;\n          *(uint *)((int)previous_block + difference) = adjusted_size;\n          new_block = (uint *)((int)previous_block + difference);\n        }\n        goto LAB_08005778;\n      }\n      new_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_200002b0 == 0) {\n      DAT_200002b0 = FUN_0800581c(block_address);\n    }\n    current_block = (uint *)FUN_0800581c(block_address,adjusted_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((new_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == new_block ||\n        (offset = FUN_0800581c(block_address,(int)new_block - (int)current_block), offset != -1)))) {\n      *new_block = adjusted_size;\nLAB_08005778:\n      FUNC_0800583e(block_address);\n      adjusted_size = (int)new_block + 0xbU & 0xfffffff8;\n      offset = adjusted_size - (int)(new_block + 1);\n      if (offset != 0) {\n        *(int *)((int)new_block + offset) = -offset;\n        return adjusted_size;\n      }\n      return adjusted_size;\n    }\n    *block_address = 0xc;\n    FUNC_0800583e(block_address);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005714": "allocate_memory_block_08005714",
                "param_1": "block_address",
                "param_2": "block_size",
                "puVar1": "current_block",
                "iVar2": "offset",
                "puVar3": "previous_block",
                "uVar4": "difference",
                "puVar5": "new_block",
                "uVar6": "adjusted_size"
            },
            "calling": [
                "FUN_08005044",
                "FUN_080050fc",
                "FUN_080057d0"
            ],
            "called": [
                "FUN_0800583c",
                "FUN_0800581c",
                "FUN_0800583e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057d0": {
            "entrypoint": "0x080057d0",
            "current_name": "process_data_080057d0",
            "code": "\nint processData_080057d0(undefined4 input1,int input2,uint size,undefined4 input3)\n\n{\n  int result;\n  uint temp;\n  \n  if (input2 != 0) {\n    if (size == 0) {\n      FUN_0800567c();\n      result = 0;\n    }\n    else {\n      temp = FUN_08005840();\n      result = input2;\n      if ((temp < size) && (result = FUN_08005714(input1,size), result != 0)) {\n        FUN_08005630(result,input2,size);\n        FUN_0800567c(input1,input2);\n      }\n    }\n    return result;\n  }\n  result = FUN_08005714(input1,size,size,input3);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080057d0": "process_data_080057d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "size",
                "param_4": "input3",
                "iVar1": "result",
                "uVar2": "temp"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800567c",
                "FUN_08005714",
                "FUN_08005840",
                "FUN_08005630"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800581c": {
            "entrypoint": "0x0800581c",
            "current_name": "validate_and_set_value_0800581c",
            "code": "\nvoid validate_and_set_value_0800581c(int *output,undefined4 input)\n\n{\n  int result;\n  \n  DAT_2000169c = 0;\n  result = FUN_080072b8(input);\n  if ((result == -1) && (DAT_2000169c != 0)) {\n    *output = DAT_2000169c;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800581c": "validate_and_set_value_0800581c",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_080072b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "FUNC_0800583c",
            "code": "\nvoid FUNC_0800583c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "FUNC_0800583c"
            },
            "calling": [
                "FUN_0800567c",
                "FUN_08005714"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800583e": {
            "entrypoint": "0x0800583e",
            "current_name": "FUNC_0800583e",
            "code": "\nvoid FUNC_0800583e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583e": "FUNC_0800583e"
            },
            "calling": [
                "FUN_0800567c",
                "FUN_08005714"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_sum_08005840",
            "code": "\nint calculateSum_08005840(undefined4 result,int array)\n\n{\n  int currentIndex;\n  \n  currentIndex = *(int *)(array + -4) + -4;\n  if (*(int *)(array + -4) < 0) {\n    currentIndex = currentIndex + *(int *)(array + currentIndex);\n  }\n  return currentIndex;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_sum_08005840",
                "param_1": "result",
                "param_2": "array",
                "iVar1": "currentIndex"
            },
            "calling": [
                "FUN_080057d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005854": {
            "entrypoint": "0x08005854",
            "current_name": "validate_and_process_data_08005854",
            "code": "\nundefined8 validateAndProcessData_08005854(undefined4 inputParam1,undefined4 inputParam2)\n\n{\n  int result;\n  undefined4 *ptrCode;\n  int *ptrLocalValue;\n  undefined8 returnValue;\n  undefined8 processedData;\n  undefined4 flag;\n  undefined *ptrData;\n  undefined4 tmpParam1;\n  undefined4 tmpParam2;\n  undefined4 tmpParam3;\n  undefined4 tmpParam4;\n  undefined8 finalResult;\n  int errorCode;\n  \n  returnValue = FUN_08005c70();\n  if (DAT_20000224 == -1) {\n    return returnValue;\n  }\n  errorCode = FUN_08000a04(inputParam1,inputParam2,inputParam1,inputParam2);\n  if (errorCode != 0) {\n    return returnValue;\n  }\n  processedData = FUNC_0800708c(inputParam1,inputParam2);\n  result = FUN_080009f0((int)processedData,(int)((ulonglong)processedData >> 0x20),0,0x3ff00000);\n  if (result == 0) {\n    return returnValue;\n  }\n  flag = 1;\n  ptrData = &DAT_080073ac;\n  tmpParam1 = inputParam1;\n  tmpParam2 = inputParam2;\n  tmpParam3 = inputParam1;\n  tmpParam4 = inputParam2;\n  finalResult = FUN_080070a4(&DAT_0800737e);\n  if (DAT_20000224 != '\\x02') {\n    result = FUN_0800709e(&flag);\n    if (result != 0) goto LAB_080058d0;\n  }\n  ptrCode = (undefined4 *)FUN_080072ac();\n  *ptrCode = 0x21;\nLAB_080058d0:\n  if (errorCode != 0) {\n    ptrLocalValue = (int *)FUN_080072ac();\n    *ptrLocalValue = errorCode;\n  }\n  return finalResult;\n}\n\n",
            "renaming": {
                "FUN_08005854": "validate_and_process_data_08005854",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "iVar1": "result",
                "puVar2": "ptrCode",
                "piVar3": "ptrLocalValue",
                "uVar4": "returnValue",
                "uVar5": "processedData",
                "local_48": "flag",
                "local_44": "ptrData",
                "local_40": "tmpParam1",
                "uStack_3c": "tmpParam2",
                "local_38": "tmpParam3",
                "uStack_34": "tmpParam4",
                "local_30": "finalResult",
                "local_28": "errorCode"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_080072ac",
                "FUN_080070a4",
                "FUN_08005c70",
                "FUN_080009f0",
                "FUN_0800709e",
                "FUN_08000a04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08006070": {
            "entrypoint": "0x080058fc",
            "current_name": "calculate_return_value_thunk_08006070",
            "code": "\nundefined8 calculateReturnValue_thunk_08006070(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 result1;\n  uint flag;\n  uint input2Absolute;\n  int difference;\n  uint input4Absolute;\n  undefined8 returnValue;\n  undefined8 temp;\n  \n  input4Absolute = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (input4Absolute | (-input3 | input3) >> 0x1f)) ||\n     (input2Absolute = input2 & 0x7fffffff, 0x7ff00000 < (input2Absolute | (-input1 | input1) >> 0x1f))) {\n    returnValue = FUN_0800016c(input1,input2,input3,input4,input4);\n    return returnValue;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    returnValue = FUN_08006d68();\n    return returnValue;\n  }\n  flag = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((input1 | input2Absolute) == 0) {\n    if (flag == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (flag != 3) {\n      return CONCAT44(input2,input1);\n    }\nLAB_0800613e:\n    returnValue = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input3 | input4Absolute) != 0) {\n      if (input4Absolute == 0x7ff00000) {\n        if (input2Absolute == 0x7ff00000) {\n          if (flag == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (flag == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (flag != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (flag == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (flag != 3) {\n          if (flag != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (input2Absolute != 0x7ff00000) {\n        difference = (int)(input2Absolute - input4Absolute) >> 0x14;\n        if (difference < 0x3d) {\n          if (((int)input4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n            returnValue = 0;\n          }\n          else {\n            FUN_08000724(input1,input2);\n            FUNC_0800708c();\n            returnValue = FUN_08006d68();\n          }\n        }\n        else {\n          returnValue = 0x3ff921fb54442d18;\n        }\n        difference = (int)((ulonglong)returnValue >> 0x20);\n        result1 = (undefined4)returnValue;\n        if (flag == 1) {\n          return CONCAT44(difference + -0x80000000,result1);\n        }\n        if (flag == 2) {\n          temp = FUN_08000168(result1,difference,0x33145c07,0x3ca1a626);\n          returnValue = 0x400921fb54442d18;\n        }\n        else {\n          if (flag == 0) {\n            return returnValue;\n          }\n          returnValue = FUN_08000168(result1,difference,0x33145c07,0x3ca1a626);\n          temp = 0x400921fb54442d18;\n        }\n        returnValue = FUN_08000168((int)returnValue,(int)((ulonglong)returnValue >> 0x20),(int)temp,\n                             (int)((ulonglong)temp >> 0x20));\n        return returnValue;\n      }\n    }\n    if ((int)input2 < 0) {\n      returnValue = 0xbff921fb54442d18;\n    }\n    else {\n      returnValue = 0x3ff921fb54442d18;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "thunk_FUN_08006070": "calculate_return_value_thunk_08006070",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar2": "flag",
                "uVar3": "input2Absolute",
                "iVar4": "difference",
                "uVar5": "input4Absolute",
                "uVar6": "returnValue",
                "uVar7": "temp"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08006070"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "execute_operation_08005900",
            "code": "\nundefined8 executeOperation_08005900(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  char flag;\n  int result;\n  int *resultPtr;\n  undefined4 *outputPtr;\n  int checkResult;\n  undefined4 upperPart;\n  undefined4 lowerPart;\n  undefined8 returnValue1;\n  undefined8 returnValue2;\n  undefined4 operationCode;\n  undefined *operationName;\n  undefined4 input1Copy;\n  undefined4 input2Copy;\n  undefined4 input3Copy;\n  undefined4 input4Copy;\n  undefined8 returnValue;\n  int tempResult;\n  \n  returnValue1 = FUN_08006228();\n  flag = DAT_20000224;\n  upperPart = (undefined4)((ulonglong)returnValue1 >> 0x20);\n  lowerPart = (undefined4)returnValue1;\n  if (DAT_20000224 == -1) {\n    return returnValue1;\n  }\n  result = FUN_08000a04(input3,input4,input3,input4);\n  if (result != 0) {\n    return returnValue1;\n  }\n  result = FUN_08000a04(input1,input2,input1,input2);\n  input1Copy = input1;\n  input2Copy = input2;\n  input3Copy = input3;\n  input4Copy = input4;\n  if (result == 0) {\n    result = FUN_080009a0(input1,input2,0,0);\n    if (result != 0) {\n      result = FUN_080009a0(input3,input4,0,0);\n      if (result != 0) {\n        operationCode = 1;\n        operationName = &DAT_080073b1;\n        returnValue = 0;\n        tempResult = 0;\n        if (flag != '\\0') {\n          returnValue = 0x3ff0000000000000;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      result = FUN_08007092(input3,input4);\n      if (result == 0) {\n        return returnValue1;\n      }\n      result = FUN_080009b4(input3,input4,0,0);\n      if (result == 0) {\n        return returnValue1;\n      }\n      operationCode = 1;\n      operationName = &DAT_080073b1;\n      tempResult = 0;\n      if (DAT_20000224 == '\\0') goto LAB_08005a22;\n      returnValue = 0xfff0000000000000;\n      tempResult = 0;\n      flag = DAT_20000224;\nLAB_08005a32:\n      if (flag != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    result = FUN_08007092(lowerPart,upperPart);\n    if (((result != 0) || (checkResult = FUN_08007092(input1,input2), checkResult == 0)) ||\n       (checkResult = FUN_08007092(input3,input4), checkResult == 0)) {\n      result = FUN_080009a0(lowerPart,upperPart,0,0);\n      if (result == 0) {\n        return returnValue1;\n      }\n      result = FUN_08007092(input1,input2);\n      if (result == 0) {\n        return returnValue1;\n      }\n      result = FUN_08007092(input3,input4);\n      if (result == 0) {\n        return returnValue1;\n      }\n      operationCode = 4;\n      operationName = &DAT_080073b1;\n      tempResult = 0;\n      returnValue._0_4_ = 0;\n      returnValue._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    tempResult = FUN_08000a04(lowerPart,upperPart);\n    flag = DAT_20000224;\n    if (tempResult != 0) {\n      operationName = &DAT_080073b1;\n      operationCode = 1;\n      tempResult = result;\n      if (DAT_20000224 != '\\0') {\n        returnValue = FUN_08000724(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      operationName = &DAT_080073b1;\n      operationCode = 1;\n      returnValue = 0;\n      goto LAB_08005978;\n    }\n    operationName = &DAT_080073b1;\n    operationCode = 3;\n    if (DAT_20000224 == '\\0') {\n      returnValue._0_4_ = 0xe0000000;\n      returnValue._4_4_ = 0x47efffff;\n      result = FUN_080009b4(input1,input2,0,0);\n      if (result != 0) {\n        returnValue1 = FUN_080004d0(input3,input4,0,0x3fe00000);\n        returnValue2 = FUN_080070b0();\n        result = FUN_080009a0((int)returnValue1,(int)((ulonglong)returnValue1 >> 0x20),(int)returnValue2,\n                             (int)((ulonglong)returnValue2 >> 0x20));\n        if (result == 0) {\n          returnValue._0_4_ = 0xe0000000;\n          returnValue._4_4_ = 0xc7efffff;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      result = FUN_0800709e(&operationCode);\n      if (result != 0) goto LAB_080059d0;\n    }\n    else {\n      returnValue._0_4_ = 0;\n      returnValue._4_4_ = 0x7ff00000;\n      result = FUN_080009b4(input1,input2,0,0);\n      if (result != 0) {\n        returnValue1 = FUN_080004d0(input3,input4,0,0x3fe00000);\n        returnValue2 = FUN_080070b0();\n        result = FUN_080009a0((int)returnValue1,(int)((ulonglong)returnValue1 >> 0x20),(int)returnValue2,\n                             (int)((ulonglong)returnValue2 >> 0x20));\n        if (result == 0) {\n          returnValue._0_4_ = 0;\n          returnValue._4_4_ = 0xfff00000;\n        }\n      }\nLAB_08005afa:\n      if (DAT_20000224 != '\\x02') goto LAB_08005b98;\n    }\n    outputPtr = (undefined4 *)FUN_080072ac();\n    lowerPart = 0x22;\n  }\n  else {\n    result = FUN_080009a0(input3,input4,0,0);\n    if (result == 0) {\n      return returnValue1;\n    }\n    operationCode = 1;\n    operationName = &DAT_080073b1;\n    returnValue = 0x3ff0000000000000;\n    tempResult = 0;\n    if (flag == '\\x02') {\n      return 0x3ff0000000000000;\n    }\nLAB_08005978:\n    result = FUN_0800709e(&operationCode);\n    if (result != 0) goto LAB_080059d0;\nLAB_08005a34:\n    outputPtr = (undefined4 *)FUN_080072ac();\n    lowerPart = 0x21;\n  }\n  *outputPtr = lowerPart;\nLAB_080059d0:\n  if (tempResult != 0) {\n    resultPtr = (int *)FUN_080072ac();\n    *resultPtr = tempResult;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08005900": "execute_operation_08005900",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "cVar1": "flag",
                "iVar2": "result",
                "piVar3": "resultPtr",
                "puVar4": "outputPtr",
                "iVar5": "checkResult",
                "uVar6": "upperPart",
                "uVar7": "lowerPart",
                "uVar8": "returnValue1",
                "uVar9": "returnValue2",
                "local_50": "operationCode",
                "local_4c": "operationName",
                "local_48": "input1Copy",
                "uStack_44": "input2Copy",
                "local_40": "input3Copy",
                "uStack_3c": "input4Copy",
                "local_38": "returnValue",
                "local_30": "tempResult"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_08007092",
                "FUN_080072ac",
                "FUN_080070b0",
                "FUN_08006228",
                "FUN_080009a0",
                "FUN_08000724",
                "FUN_080009b4",
                "FUN_0800709e",
                "FUN_08000a04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bc8": {
            "entrypoint": "0x08005bc8",
            "current_name": "process_function_08005bc8",
            "code": "\nundefined8 processFunction_08005bc8(undefined4 input_1,undefined4 input_2)\n\n{\n  char flag;\n  int result;\n  int *ptrResult;\n  undefined4 *ptrValue;\n  undefined8 returnValue;\n  undefined4 flagValue;\n  undefined *strPtr;\n  undefined4 input1_Copy;\n  undefined4 input2_Copy;\n  undefined4 input1_Copy2;\n  undefined4 input2_Copy2;\n  undefined8 returnValue2;\n  int errorCode;\n  \n  returnValue = FUN_08006c0c();\n  flag = DAT_20000224;\n  if (DAT_20000224 == -1) {\n    return returnValue;\n  }\n  errorCode = FUN_08000a04(input_1,input_2,input_1,input_2);\n  if (errorCode != 0) {\n    return returnValue;\n  }\n  result = FUN_080009b4(input_1,input_2,0,0);\n  if (result == 0) {\n    return returnValue;\n  }\n  flagValue = 1;\n  strPtr = &DAT_080073b5;\n  input1_Copy = input_1;\n  input2_Copy = input_2;\n  input1_Copy2 = input_1;\n  input2_Copy2 = input_2;\n  if (flag == '\\0') {\n    returnValue2 = 0;\nLAB_08005c26:\n    result = FUN_0800709e(&flagValue);\n    if (result != 0) goto LAB_08005c2e;\n  }\n  else {\n    returnValue2 = FUN_08000724(0,0,0,0);\n    if (flag != '\\x02') goto LAB_08005c26;\n  }\n  ptrValue = (undefined4 *)FUN_080072ac();\n  *ptrValue = 0x21;\nLAB_08005c2e:\n  if (errorCode != 0) {\n    ptrResult = (int *)FUN_080072ac();\n    *ptrResult = errorCode;\n  }\n  return returnValue2;\n}\n\n",
            "renaming": {
                "FUN_08005bc8": "process_function_08005bc8",
                "param_1": "input_1",
                "param_2": "input_2",
                "cVar1": "flag",
                "iVar2": "result",
                "piVar3": "ptrResult",
                "puVar4": "ptrValue",
                "uVar5": "returnValue",
                "local_50": "flagValue",
                "local_4c": "strPtr",
                "local_48": "input1_Copy",
                "uStack_44": "input2_Copy",
                "local_40": "input1_Copy2",
                "uStack_3c": "input2_Copy2",
                "local_38": "returnValue2",
                "local_30": "errorCode"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_080072ac",
                "FUN_08006c0c",
                "FUN_08000724",
                "FUN_080009b4",
                "FUN_0800709e",
                "FUN_08000a04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c70": {
            "entrypoint": "0x08005c70",
            "current_name": "calculate_result_08005c70",
            "code": "\nundefined8 calculate_result_08005c70(uint input_1,uint input_2)\n\n{\n  int result_code;\n  undefined4 temp_1;\n  undefined4 temp_2;\n  undefined4 temp_3;\n  undefined4 temp_4;\n  undefined4 temp_5;\n  undefined4 temp_6;\n  uint masked_input_2;\n  undefined8 result;\n  undefined8 temp_result_1;\n  undefined8 temp_result_2;\n  \n  result = CONCAT44(input_2,input_1);\n  masked_input_2 = input_2 & 0x7fffffff;\n  if (masked_input_2 < 0x3ff00000) {\n    if (masked_input_2 < 0x3fe00000) {\n      if (0x3e3fffff < masked_input_2) {\n        temp_result_1 = FUN_080004d0(input_1,input_2,input_1,input_2);\n        temp_6 = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n        temp_5 = (undefined4)temp_result_1;\n        temp_result_1 = FUN_080004d0(temp_5,temp_6,0xdfdf709,0x3f023de1);\n        temp_result_1 = FUN_0800016c((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x7501b288,0x3f49efe0);\n        temp_result_1 = FUN_080004d0((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),temp_5,temp_6);\n        temp_result_1 = FUN_08000168((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0xb5688f3b,0x3fa48228);\n        temp_result_1 = FUN_080004d0((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),temp_5,temp_6);\n        temp_result_1 = FUN_0800016c((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0xe884455,0x3fc9c155);\n        temp_result_1 = FUN_080004d0((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),temp_5,temp_6);\n        temp_result_1 = FUN_08000168((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x3eb6f7d,0x3fd4d612);\n        temp_result_1 = FUN_080004d0((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),temp_5,temp_6);\n        temp_result_1 = FUN_0800016c((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x55555555,0x3fc55555);\n        temp_result_1 = FUN_080004d0((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),temp_5,temp_6);\n        temp_result_2 = FUN_080004d0(temp_5,temp_6,0xb12e9282,0x3fb3b8c5);\n        temp_result_2 = FUN_08000168((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x1b8d0159,0x3fe6066c);\n        temp_result_2 = FUN_080004d0((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),temp_5,temp_6);\n        temp_result_2 = FUN_0800016c((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x9c598ac8,0x40002ae5);\n        temp_result_2 = FUN_080004d0((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),temp_5,temp_6);\n        temp_result_2 = FUN_08000168((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x1c8a2d4b,0x40033a27);\n        temp_result_2 = FUN_080004d0((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),temp_5,temp_6);\n        temp_result_2 = FUN_0800016c((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0,0x3ff00000);\n        temp_result_1 = FUN_08000724((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),(int)temp_result_2,\n                              (int)((ulonglong)temp_result_2 >> 0x20));\n        temp_result_1 = FUN_080004d0((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),input_1,input_2);\n        goto LAB_08005cba;\n      }\n      temp_result_1 = FUN_0800016c(input_1,input_2,0x8800759c,0x7e37e43c);\n      result_code = FUN_080009f0((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0,0x3ff00000);\n      if (result_code != 0) {\n        return result;\n      }\n    }\n    result = FUNC_0800708c(input_1,input_2);\n    result = FUN_08000168(0,0x3ff00000,(int)result,(int)((ulonglong)result >> 0x20));\n    result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),0,0x3fe00000);\n    temp_1 = (undefined4)((ulonglong)result >> 0x20);\n    temp_5 = (undefined4)result;\n    result = FUN_080004d0(temp_5,temp_1,0xdfdf709,0x3f023de1);\n    result = FUN_0800016c((int)result,(int)((ulonglong)result >> 0x20),0x7501b288,0x3f49efe0);\n    result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),temp_5,temp_1);\n    result = FUN_08000168((int)result,(int)((ulonglong)result >> 0x20),0xb5688f3b,0x3fa48228);\n    result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),temp_5,temp_1);\n    result = FUN_0800016c((int)result,(int)((ulonglong)result >> 0x20),0xe884455,0x3fc9c155);\n    result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),temp_5,temp_1);\n    result = FUN_08000168((int)result,(int)((ulonglong)result >> 0x20),0x3eb6f7d,0x3fd4d612);\n    result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),temp_5,temp_1);\n    result = FUN_0800016c((int)result,(int)((ulonglong)result >> 0x20),0x55555555,0x3fc55555);\n    result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),temp_5,temp_1);\n    temp_2 = (undefined4)((ulonglong)result >> 0x20);\n    temp_result_1 = FUN_080004d0(temp_5,temp_1,0xb12e9282,0x3fb3b8c5);\n    temp_result_1 = FUN_08000168((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x1b8d0159,0x3fe6066c);\n    temp_result_1 = FUN_080004d0((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),temp_5,temp_1);\n    temp_result_1 = FUN_0800016c((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x9c598ac8,0x40002ae5);\n    temp_result_1 = FUN_080004d0((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),temp_5,temp_1);\n    temp_result_1 = FUN_08000168((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x1c8a2d4b,0x40033a27);\n    temp_result_1 = FUN_080004d0((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),temp_5,temp_1);\n    temp_result_1 = FUN_0800016c((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0,0x3ff00000);\n    temp_3 = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n    temp_result_2 = FUN_08006c0c(temp_5,temp_1);\n    temp_4 = (undefined4)((ulonglong)temp_result_2 >> 0x20);\n    temp_6 = (undefined4)temp_result_2;\n    if (masked_input_2 < 0x3fef3333) {\n      result = FUN_08000724((int)result,temp_2,(int)temp_result_1,temp_3);\n      temp_result_1 = FUN_0800016c(temp_6,temp_4,temp_6,temp_4);\n      result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result_1,\n                           (int)((ulonglong)temp_result_1 >> 0x20));\n      temp_result_1 = FUN_080004d0(0,temp_4,0,temp_4);\n      temp_result_1 = FUN_08000168(temp_5,temp_1,(int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20));\n      temp_result_2 = FUN_0800016c(temp_6,temp_4,0,temp_4);\n      temp_result_1 = FUN_08000724((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),(int)temp_result_2,\n                            (int)((ulonglong)temp_result_2 >> 0x20));\n      temp_5 = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n      temp_result_1 = FUN_0800016c((int)temp_result_1,temp_5,(int)temp_result_1,temp_5);\n      temp_result_1 = FUN_08000168(0x33145c07,0x3c91a626,(int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20));\n      result = FUN_08000168((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result_1,\n                           (int)((ulonglong)temp_result_1 >> 0x20));\n      temp_result_1 = FUN_0800016c(0,temp_4,0,temp_4);\n      temp_result_1 = FUN_08000168(0x54442d18,0x3fe921fb,(int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20));\n      result = FUN_08000168((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result_1,\n                           (int)((ulonglong)temp_result_1 >> 0x20));\n      temp_5 = 0x3fe921fb;\n    }\n    else {\n      result = FUN_08000724((int)result,temp_2,(int)temp_result_1,temp_3);\n      result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),temp_6,temp_4);\n      result = FUN_0800016c((int)result,(int)((ulonglong)result >> 0x20),temp_6,temp_4);\n      temp_5 = (undefined4)((ulonglong)result >> 0x20);\n      result = FUN_0800016c((int)result,temp_5,(int)result,temp_5);\n      result = FUN_08000168((int)result,(int)((ulonglong)result >> 0x20),0x33145c07,0x3c91a626);\n      temp_5 = 0x3ff921fb;\n    }\n    result = FUN_08000168(0x54442d18,temp_5,(int)result,(int)((ulonglong)result >> 0x20));\n    if ((int)input_2 < 1) {\n      result = CONCAT44((int)((ulonglong)result >> 0x20) + -0x80000000,(int)result);\n    }\n  }\n  else {\n    if ((masked_input_2 + 0xc0100000 | input_1) != 0) {\n      result = FUN_08000168(input_1,input_2,input_1,input_2);\n      temp_5 = (undefined4)((ulonglong)result >> 0x20);\n      result = FUN_08000724((int)result,temp_5,(int)result,temp_5);\n      return result;\n    }\n    result = FUN_080004d0(input_1,input_2,0x54442d18,0x3ff921fb);\n    temp_result_1 = FUN_080004d0(input_1,input_2,0x33145c07,0x3c91a626);\nLAB_08005cba:\n    result = FUN_0800016c((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result_1,\n                         (int)((ulonglong)temp_result_1 >> 0x20));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005c70": "calculate_result_08005c70",
                "param_1": "input_1",
                "param_2": "input_2",
                "iVar1": "result_code",
                "uVar2": "temp_1",
                "uVar3": "temp_2",
                "uVar4": "temp_3",
                "uVar5": "temp_4",
                "uVar6": "temp_5",
                "uVar7": "temp_6",
                "uVar8": "masked_input_2",
                "uVar9": "result",
                "uVar10": "temp_result_1",
                "uVar11": "temp_result_2"
            },
            "calling": [
                "FUN_08005854"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_0800708c",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080009f0",
                "FUN_08000724",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006070": {
            "entrypoint": "0x08006070",
            "current_name": "convert_float_to_bits_08006070",
            "code": "\nundefined8 convertFloatToBits_08006070(uint floatBits1,uint floatBits2,uint floatBits3,uint floatBits4)\n\n{\n  undefined4 result1;\n  uint shiftedBits;\n  uint result2;\n  int difference;\n  uint maskedBits;\n  undefined8 newBits1;\n  undefined8 newBits2;\n  \n  maskedBits = floatBits4 & 0x7fffffff;\n  if ((0x7ff00000 < (maskedBits | (-floatBits3 | floatBits3) >> 0x1f)) ||\n     (result2 = floatBits2 & 0x7fffffff, 0x7ff00000 < (result2 | (-floatBits1 | floatBits1) >> 0x1f))) {\n    newBits1 = FUN_0800016c(floatBits1,floatBits2,floatBits3,floatBits4,floatBits4);\n    return newBits1;\n  }\n  if ((floatBits4 + 0xc0100000 | floatBits3) == 0) {\n    newBits1 = FUN_08006d68();\n    return newBits1;\n  }\n  shiftedBits = (int)floatBits4 >> 0x1e & 2U | floatBits2 >> 0x1f;\n  if ((floatBits1 | result2) == 0) {\n    if (shiftedBits == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (shiftedBits != 3) {\n      return CONCAT44(floatBits2,floatBits1);\n    }\nLAB_0800613e:\n    newBits1 = 0xc00921fb54442d18;\n  }\n  else {\n    if ((floatBits3 | maskedBits) != 0) {\n      if (maskedBits == 0x7ff00000) {\n        if (result2 == 0x7ff00000) {\n          if (shiftedBits == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (shiftedBits == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (shiftedBits != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (shiftedBits == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (shiftedBits != 3) {\n          if (shiftedBits != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (result2 != 0x7ff00000) {\n        difference = (int)(result2 - maskedBits) >> 0x14;\n        if (difference < 0x3d) {\n          if (((int)floatBits4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n            newBits1 = 0;\n          }\n          else {\n            FUN_08000724(floatBits1,floatBits2);\n            FUNC_0800708c();\n            newBits1 = FUN_08006d68();\n          }\n        }\n        else {\n          newBits1 = 0x3ff921fb54442d18;\n        }\n        difference = (int)((ulonglong)newBits1 >> 0x20);\n        result1 = (undefined4)newBits1;\n        if (shiftedBits == 1) {\n          return CONCAT44(difference + -0x80000000,result1);\n        }\n        if (shiftedBits == 2) {\n          newBits2 = FUN_08000168(result1,difference,0x33145c07,0x3ca1a626);\n          newBits1 = 0x400921fb54442d18;\n        }\n        else {\n          if (shiftedBits == 0) {\n            return newBits1;\n          }\n          newBits1 = FUN_08000168(result1,difference,0x33145c07,0x3ca1a626);\n          newBits2 = 0x400921fb54442d18;\n        }\n        newBits1 = FUN_08000168((int)newBits1,(int)((ulonglong)newBits1 >> 0x20),(int)newBits2,\n                             (int)((ulonglong)newBits2 >> 0x20));\n        return newBits1;\n      }\n    }\n    if ((int)floatBits2 < 0) {\n      newBits1 = 0xbff921fb54442d18;\n    }\n    else {\n      newBits1 = 0x3ff921fb54442d18;\n    }\n  }\n  return newBits1;\n}\n\n",
            "renaming": {
                "FUN_08006070": "convert_float_to_bits_08006070",
                "param_1": "floatBits1",
                "param_2": "floatBits2",
                "param_3": "floatBits3",
                "param_4": "floatBits4",
                "uVar1": "result1",
                "uVar2": "shiftedBits",
                "uVar3": "result2",
                "iVar4": "difference",
                "uVar5": "maskedBits",
                "uVar6": "newBits1",
                "uVar7": "newBits2"
            },
            "calling": [
                "thunk_FUN_08006070"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_08006d68",
                "FUN_08000168",
                "FUN_08000724",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006228": {
            "entrypoint": "0x08006228",
            "current_name": "calculate_floating_point_08006228",
            "code": "\nuint calculateFloatingPoint_08006228(uint mantissa,uint exponent,uint bitmask,uint sign)\n\n{\n  undefined4 mantissaResult;\n  uint exponentResult;\n  uint remainder;\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 remainder;\n  undefined4 remainder;\n  uint uVar2;\n  undefined4 remainder;\n  int mantissaShift;\n  int shifts;\n  undefined4 uVar3;\n  uint normalizedExponent;\n  undefined4 uVar4;\n  int mantissaSignShift;\n  uint result;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined8 uVar11;\n  undefined8 uVar12;\n  undefined8 uVar13;\n  undefined8 uVar14;\n  longlong lVar;\n  ulonglong uVar14;\n  undefined8 uVar15;\n  uint isZero;\n  undefined4 tempVariable1;\n  undefined4 tempVariable2;\n  int shiftCount;\n  \n  uVar12 = CONCAT44(exponent,mantissa);\n  result = sign & 0x7fffffff;\n  if ((result | bitmask) == 0) {\n    return 0;\n  }\n  normalizedExponent = exponent & 0x7fffffff;\n  if (normalizedExponent < 0x7ff00001) {\n    if (normalizedExponent == 0x7ff00000) {\n      if (mantissa == 0) {\n        if (0x7ff00000 < result) goto LAB_08006278;\nLAB_08006262:\n        if ((result != 0x7ff00000) || (bitmask == 0)) {\n          if (-1 < (int)exponent) goto LAB_0800632a;\n          if (result < 0x43400000) {\n            if (result < 0x3ff00000) {\nLAB_0800632a:\n              isZero = 0;\n              goto LAB_080062ba;\n            }\n            mantissaShift = ((int)result >> 0x14) + -0x3ff;\n            if (0x14 < mantissaShift) {\n              exponentResult = bitmask >> (0x34U - mantissaShift & 0xff);\n              if (bitmask == exponentResult << (0x34U - mantissaShift & 0xff)) {\n                isZero = 2 - (exponentResult & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (bitmask == 0) {\n              exponentResult = (int)result >> (0x14U - mantissaShift & 0xff);\n              if (result == exponentResult << (0x14U - mantissaShift & 0xff)) {\n                isZero = 2 - (exponentResult & 1);\n              }\n              else {\n                isZero = 0;\n              }\n              goto LAB_0800630c;\n            }\n            isZero = 0;\n          }\n          else {\n            isZero = 2;\nLAB_080062ba:\n            if (bitmask == 0) {\n              if (result == 0x7ff00000) {\n                if ((normalizedExponent + 0xc0100000 | mantissa) == 0) {\n                  return 0;\n                }\n                if (0x3fefffff < normalizedExponent) {\n                  if ((int)sign < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)sign) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (result == 0x3ff00000) {\n                if (-1 < (int)sign) {\n                  return mantissa;\n                }\n                uVar11 = 0x3ff0000000000000;\n                goto LAB_08006320;\n              }\n              if (sign == 0x40000000) goto LAB_0800634a;\n              if ((sign == 0x3fe00000) && (-1 < (int)exponent)) {\n                result = FUN_08006c0c(mantissa,exponent);\n                return result;\n              }\n            }\n          }\n          uVar11 = FUNC_0800708c(mantissa,exponent);\n          temp1 = (undefined4)((ulonglong)uVar11 >> 0x20);\n          mantissaResult = (undefined4)uVar11;\n          uVar14 = CONCAT44(exponent,mantissaResult) & 0x7fffffffffffffff;\n          if ((mantissa == 0) && ((normalizedExponent == 0 || ((exponent & 0x3fffffff) == 0x3ff00000)))) {\n            if ((int)sign < 0) {\n              uVar11 = FUN_08000724(0,0x3ff00000,mantissaResult,temp1);\n            }\n            if (-1 < (int)exponent) {\n              return (uint)uVar11;\n            }\n            if ((isZero | normalizedExponent + 0xc0100000) != 0) {\n              return (uint)uVar11;\n            }\n          }\n          else {\n            exponentResult = 0xffffffff - ((int)exponent >> 0x1f);\n            uVar11 = uVar12;\n            if ((isZero | exponentResult) != 0) {\n              if (result < 0x41e00001) {\n                shiftCount = 0;\n                if (normalizedExponent < 0x100000) {\n                  uVar14 = FUN_080004d0();\n                  shiftCount = -0x35;\n                }\n                result = (uint)(uVar14 >> 0x20);\n                mantissaResult = (undefined4)uVar14;\n                shiftCount = ((int)result >> 0x14) + -0x3ff + shiftCount;\n                result = result & 0xfffff;\n                normalizedExponent = result | 0x3ff00000;\n                if (result < 0x3988f) {\nLAB_08006628:\n                  mantissaShift = 0;\n                }\n                else {\n                  if (0xbb679 < result) {\n                    normalizedExponent = normalizedExponent - 0x100000;\n                    shiftCount = shiftCount + 1;\n                    goto LAB_08006628;\n                  }\n                  mantissaShift = 1;\n                }\n                shifts = mantissaShift * 8;\n                uVar3 = (&DAT_080073c0)[mantissaShift * 2];\n                uVar4 = (&DAT_080073c4)[mantissaShift * 2];\n                uVar12 = FUN_08000168(mantissaResult,normalizedExponent,uVar3,uVar4);\n                temp2 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar11 = FUN_0800016c(mantissaResult,normalizedExponent,uVar3,uVar4);\n                uVar11 = FUN_08000724(0,0x3ff00000,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n                uVar1 = (undefined4)((ulonglong)uVar11 >> 0x20);\n                uVar13 = FUN_080004d0((int)uVar12,temp2,(int)uVar11,uVar1);\n                uVar2 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                temp1 = (undefined4)uVar13;\n                uVar13 = FUN_080004d0(0,uVar2);\n                uVar12 = FUN_08000168((int)uVar12,temp2,(int)uVar13,\n                                      (int)((ulonglong)uVar13 >> 0x20));\n                uVar13 = FUN_08000168(0,((int)normalizedExponent >> 1 | 0x20000000U) + 0x80000 + mantissaShift * 0x40000,\n                                      uVar3,uVar4);\n                uVar13 = FUN_08000168(mantissaResult,normalizedExponent,(int)uVar13,(int)((ulonglong)uVar13 >> 0x20));\n                uVar13 = FUN_080004d0((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),0,uVar2);\n                uVar12 = FUN_08000168((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar13,\n                                      (int)((ulonglong)uVar13 >> 0x20));\n                uVar12 = FUN_080004d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,uVar1\n                                     );\n                temp2 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar11 = FUN_080004d0(temp1,uVar2);\n                uVar1 = (undefined4)((ulonglong)uVar11 >> 0x20);\n                mantissaResult = (undefined4)uVar11;\n                uVar11 = FUN_080004d0(mantissaResult,uVar1,0x4a454eef,0x3fca7e28);\n                uVar11 = FUN_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0x93c9db65,\n                                      0x3fcd864a);\n                uVar11 = FUN_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),mantissaResult,uVar1);\n                uVar11 = FUN_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0xa91d4101,\n                                      0x3fd17460);\n                uVar11 = FUN_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),mantissaResult,uVar1);\n                uVar11 = FUN_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0x518f264d,\n                                      0x3fd55555);\n                uVar11 = FUN_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),mantissaResult,uVar1);\n                uVar11 = FUN_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0xdb6fabff,\n                                      0x3fdb6db6);\n                uVar11 = FUN_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),mantissaResult,uVar1);\n                uVar11 = FUN_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0x33333303,\n                                      0x3fe33333);\n                uVar13 = FUN_080004d0(mantissaResult,uVar1,mantissaResult,uVar1);\n                uVar11 = FUN_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar13,\n                                      (int)((ulonglong)uVar13 >> 0x20));\n                uVar13 = FUN_0800016c(temp1,uVar2,0,uVar2);\n                uVar13 = FUN_080004d0((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar12,\n                                      temp2);\n                uVar11 = FUN_0800016c((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar11,\n                                      (int)((ulonglong)uVar11 >> 0x20));\n                mantissaResult = (undefined4)((ulonglong)uVar11 >> 0x20);\n                uVar13 = FUN_080004d0(0,uVar2,0,uVar2);\n                uVar1 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar14 = FUN_0800016c((int)uVar13,uVar1,0,0x40080000);\n                FUN_0800016c((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar11,mantissaResult);\n                uVar14 = FUN_080004d0(0,uVar2,0,remainder);\n                uVar3 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar15 = FUN_08000168(0,remainder,0,0x40080000);\n                uVar13 = FUN_08000168((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar13,uVar1\n                                     );\n                uVar11 = FUN_08000168((int)uVar11,mantissaResult,(int)uVar13,(int)((ulonglong)uVar13 >> 0x20)\n                                     );\n                uVar11 = FUN_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),temp1,uVar2);\n                uVar12 = FUN_080004d0((int)uVar12,temp2,0,remainder);\n                uVar11 = FUN_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar12,\n                                      (int)((ulonglong)uVar12 >> 0x20));\n                mantissaResult = (undefined4)((ulonglong)uVar11 >> 0x20);\n                FUN_0800016c((int)uVar14,uVar3,(int)uVar11,mantissaResult);\n                uVar12 = FUN_080004d0(0,remainder,0xe0000000,0x3feec709);\n                uVar13 = FUN_08000168(0,remainder,(int)uVar14,uVar3);\n                uVar11 = FUN_08000168((int)uVar11,mantissaResult,(int)uVar13,(int)((ulonglong)uVar13 >> 0x20)\n                                     );\n                uVar11 = FUN_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0xdc3a03fd,\n                                      0x3feec709);\n                uVar13 = FUN_080004d0(0,remainder,0x145b01f5,0xbe3e2fe0);\n                uVar11 = FUN_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar13,\n                                      (int)((ulonglong)uVar13 >> 0x20));\n                uVar11 = FUN_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),\n                                      *(undefined4 *)(&DAT_080073e0 + shifts),\n                                      *(undefined4 *)(&DAT_080073e4 + shifts));\n                uVar13 = FUN_08000404(shiftCount);\n                mantissaResult = (undefined4)((ulonglong)uVar13 >> 0x20);\n                temp1 = *(undefined4 *)(&DAT_080073d0 + shifts);\n                temp2 = *(undefined4 *)(&DAT_080073d4 + shifts);\n                uVar14 = FUN_0800016c((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,\n                                      (int)((ulonglong)uVar11 >> 0x20));\n                uVar14 = FUN_0800016c((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),temp1,temp2);\n                FUN_0800016c((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar13,mantissaResult);\n                uVar13 = FUN_08000168(0,uVar2,(int)uVar13,mantissaResult);\n                lVar = FUN_08000168((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),temp1,temp2);\n                result = uVar2;\n              }\n              else {\n                if (0x43f00000 < result) {\n                  if (normalizedExponent < 0x3ff00000) goto LAB_080063fa;\nLAB_08006418:\n                  if ((int)sign < 1) {\n                    return 0;\n                  }\nLAB_08006400:\n                  mantissa = 0x8800759c;\n                  exponent = 0x7e37e43c;\n                  uVar12 = 0x7e37e43c8800759c;\n                  goto LAB_0800634a;\n                }\n                if (normalizedExponent < 0x3fefffff) {\nLAB_080063fa:\n                  if (-1 < (int)sign) {\n                    return 0;\n                  }\n                  goto LAB_08006400;\n                }\n                if (0x3ff00000 < normalizedExponent) goto LAB_08006418;\n                uVar12 = FUN_08000168(mantissaResult,temp1,0,0x3ff00000);\n                temp1 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                mantissaResult = (undefined4)uVar12;\n                uVar12 = FUN_080004d0(mantissaResult,temp1,0x60000000,0x3ff71547);\n                uVar11 = FUN_080004d0(mantissaResult,temp1,0xf85ddf44,0x3e54ae0b);\n                uVar13 = FUN_080004d0(mantissaResult,temp1,0,0x3fd00000);\n                uVar13 = FUN_08000168(0x55555555,0x3fd55555,(int)uVar13,\n                                      (int)((ulonglong)uVar13 >> 0x20));\n                uVar13 = FUN_080004d0((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),mantissaResult,temp1);\n                uVar13 = FUN_08000168(0,0x3fe00000,(int)uVar13,(int)((ulonglong)uVar13 >> 0x20));\n                uVar14 = FUN_080004d0(mantissaResult,temp1,mantissaResult,temp1);\n                uVar13 = FUN_080004d0((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar14,\n                                      (int)((ulonglong)uVar14 >> 0x20));\n                uVar13 = FUN_080004d0((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),0x652b82fe,\n                                      0x3ff71547);\n                uVar11 = FUN_08000168((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar13,\n                                      (int)((ulonglong)uVar13 >> 0x20));\n                FUN_0800016c((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,\n                             (int)((ulonglong)uVar11 >> 0x20));\n                lVar = (ulonglong)remainder << 0x20;\n                result = remainder;\n              }\n              uVar12 = FUN_08000168((int)lVar,(int)((ulonglong)lVar >> 0x20),(int)uVar12,\n                                    (int)((ulonglong)uVar12 >> 0x20));\n              uVar12 = FUN_08000168((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar12,\n                                    (int)((ulonglong)uVar12 >> 0x20));\n              if ((isZero - 1 | exponentResult) == 0) {\n                exponent = 0xbff00000;\n              }\n              else {\n                exponent = 0x3ff00000;\n              }\n              isZero = 0;\n              uVar11 = FUN_08000168(bitmask,sign,0,sign);\n              uVar11 = FUN_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,result);\n              uVar12 = FUN_080004d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),bitmask,sign);\n              uVar12 = FUN_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar12,\n                                    (int)((ulonglong)uVar12 >> 0x20));\n              temp2 = (undefined4)((ulonglong)uVar12 >> 0x20);\n              mantissaResult = (undefined4)uVar12;\n              uVar12 = FUN_080004d0(0,result,0,sign);\n              uVar1 = (undefined4)((ulonglong)uVar12 >> 0x20);\n              temp1 = (undefined4)uVar12;\n              lVar = FUN_0800016c(mantissaResult,temp2,temp1,uVar1);\n              normalizedExponent = (uint)((ulonglong)lVar >> 0x20);\n              result = (uint)lVar;\n              if (0x408fffffffffffff < lVar) {\n                if ((normalizedExponent + 0xbf700000 | result) == 0) {\n                  uVar11 = FUN_0800016c(mantissaResult,temp2,0x652b82fe,0x3c971547);\n                  uVar13 = FUN_08000168(result,normalizedExponent,temp1,uVar1);\n                  mantissaShift = FUN_080009f0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar13,\n                                       (int)((ulonglong)uVar13 >> 0x20));\n                  if (mantissaShift == 0) goto LAB_08006968;\n                }\n                uVar12 = FUN_080004d0(0,exponent,0x8800759c,0x7e37e43c);\n                mantissa = 0x8800759c;\n                exponent = 0x7e37e43c;\n                goto LAB_0800634a;\n              }\n              if ((normalizedExponent & 0x7fffffff) < 0x4090cc00) {\nLAB_08006968:\n                if ((normalizedExponent & 0x7fffffff) < 0x3fe00001) {\n                  mantissaShift = 0;\n                }\n                else {\n                  normalizedExponent = (0x100000 >> (((int)(normalizedExponent & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          normalizedExponent;\n                  result = (normalizedExponent * 2 >> 0x15) - 0x3ff;\n                  mantissaShift = (int)(normalizedExponent & 0xfffff | 0x100000) >> (0x14 - result & 0xff);\n                  if (lVar < 0) {\n                    mantissaShift = -mantissaShift;\n                  }\n                  uVar12 = FUN_08000168(temp1,uVar1,0,normalizedExponent & ~(0xfffff >> (result & 0xff)));\n                }\n                tempVariable2 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                tempVariable1 = (undefined4)uVar12;\n                FUN_0800016c(tempVariable1,tempVariable2,mantissaResult,temp2);\n                uVar12 = FUN_080004d0(0,remainder,0,0x3fe62e43);\n                temp1 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar11 = FUN_08000168(0,remainder,tempVariable1,tempVariable2);\n                uVar11 = FUN_08000168(mantissaResult,temp2,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n                uVar11 = FUN_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0xfefa39ef,\n                                      0x3fe62e42);\n                uVar13 = FUN_080004d0(0,remainder,0xca86c39,0xbe205c61);\n                uVar11 = FUN_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar13,\n                                      (int)((ulonglong)uVar13 >> 0x20));\n                temp2 = (undefined4)((ulonglong)uVar11 >> 0x20);\n                uVar13 = FUN_0800016c((int)uVar12,temp1,(int)uVar11,temp2);\n                uVar1 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                mantissaResult = (undefined4)uVar13;\n                uVar12 = FUN_08000168(mantissaResult,uVar1,(int)uVar12,temp1);\n                uVar12 = FUN_08000168((int)uVar11,temp2,(int)uVar12,\n                                      (int)((ulonglong)uVar12 >> 0x20));\n                temp2 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar11 = FUN_080004d0(mantissaResult,uVar1,mantissaResult,uVar1);\n                uVar2 = (undefined4)((ulonglong)uVar11 >> 0x20);\n                temp1 = (undefined4)uVar11;\n                uVar11 = FUN_080004d0(temp1,uVar2,0x72bea4d0,0x3e663769);\n                uVar11 = FUN_08000168((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0xc5d26bf1,\n                                      0x3ebbbd41);\n                uVar11 = FUN_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),temp1,uVar2);\n                uVar11 = FUN_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0xaf25de2c,\n                                      0x3f11566a);\n                uVar11 = FUN_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),temp1,uVar2);\n                uVar11 = FUN_08000168((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0x16bebd93,\n                                      0x3f66c16c);\n                uVar11 = FUN_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),temp1,uVar2);\n                uVar11 = FUN_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0x5555553e,\n                                      0x3fc55555);\n                uVar11 = FUN_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),temp1,uVar2);\n                uVar11 = FUN_08000168(mantissaResult,uVar1,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n                temp1 = (undefined4)((ulonglong)uVar11 >> 0x20);\n                uVar13 = FUN_080004d0(mantissaResult,uVar1,(int)uVar11,temp1);\n                uVar11 = FUN_08000168((int)uVar11,temp1,0,0x40000000);\n                uVar11 = FUN_08000724((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar11,\n                                      (int)((ulonglong)uVar11 >> 0x20));\n                uVar13 = FUN_080004d0(mantissaResult,uVar1,(int)uVar12,temp2);\n                uVar12 = FUN_0800016c((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar12,\n                                      temp2);\n                uVar12 = FUN_08000168((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar12,\n                                      (int)((ulonglong)uVar12 >> 0x20));\n                uVar12 = FUN_08000168((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),mantissaResult,uVar1);\n                uVar11 = FUN_08000168(0,0x3ff00000,(int)uVar12,(int)((ulonglong)uVar12 >> 0x20));\n                shifts = (int)((ulonglong)uVar11 >> 0x20);\n                mantissaSignShift = shifts + mantissaShift * 0x100000;\n                uVar12 = CONCAT44(mantissaSignShift,(int)uVar11);\n                mantissa = isZero;\n                if (mantissaSignShift < 0x100000) {\n                  uVar12 = FUN_080071c0((int)uVar11,shifts,mantissaShift);\n                }\n              }\n              else {\n                if ((normalizedExponent + 0x3f6f3400 | result) == 0) {\n                  uVar11 = FUN_08000168(result,normalizedExponent,temp1,uVar1);\n                  mantissaShift = FUN_080009c8(mantissaResult,temp2,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n                  if (mantissaShift == 0) goto LAB_08006968;\n                }\n                uVar12 = FUN_080004d0(0,exponent,0xc2f8f359,0x1a56e1f);\n                mantissa = 0xc2f8f359;\n                exponent = 0x1a56e1f;\n              }\nLAB_0800634a:\n              result = FUN_080004d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),mantissa,exponent);\n              return result;\n            }\n          }\n          mantissaResult = (undefined4)((ulonglong)uVar11 >> 0x20);\n          uVar11 = FUN_08000168((int)uVar11,mantissaResult,(int)uVar11,mantissaResult);\n          uVar12 = uVar11;\nLAB_08006320:\n          result = FUN_08000724((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar12,\n                                (int)((ulonglong)uVar12 >> 0x20));\n          return result;\n        }\n      }\n    }\n    else if (result < 0x7ff00001) goto LAB_08006262;\n  }\n  if ((normalizedExponent + 0xc0100000 | mantissa) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  result = FUN_080070a4(&DAT_0800737e);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006228": "calculate_floating_point_08006228",
                "param_1": "mantissa",
                "param_2": "exponent",
                "param_3": "bitmask",
                "param_4": "sign",
                "uVar1": "mantissaResult",
                "uVar2": "exponentResult",
                "extraout_r1": "remainder",
                "uVar3": "uVar1",
                "uVar4": "uVar2",
                "extraout_r1_00": "remainder",
                "extraout_r1_01": "remainder",
                "extraout_r1_02": "uVar2",
                "extraout_r1_03": "remainder",
                "iVar5": "mantissaShift",
                "iVar6": "shifts",
                "uVar7": "uVar3",
                "uVar8": "normalizedExponent",
                "uVar9": "uVar4",
                "iVar10": "mantissaSignShift",
                "uVar11": "result",
                "uVar12": "temp1",
                "uVar13": "temp2",
                "uVar14": "uVar11",
                "uVar15": "uVar12",
                "uVar16": "uVar13",
                "uVar17": "uVar14",
                "lVar18": "lVar",
                "uVar19": "uVar14",
                "uVar20": "uVar15",
                "local_70": "isZero",
                "local_68": "tempVariable1",
                "local_64": "tempVariable2",
                "local_54": "shiftCount"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_080071c0",
                "FUN_080004d0",
                "FUN_0800708c",
                "FUN_080070a4",
                "FUN_080009c8",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080009f0",
                "FUN_08000724",
                "FUN_0800016c",
                "FUN_08000404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c0c": {
            "entrypoint": "0x08006c0c",
            "current_name": "calculate_float_08006c0c",
            "code": "\nundefined8 calculateFloat_08006c0c(uint num1,uint num2)\n\n{\n  undefined4 temp1;\n  uint shiftedNum;\n  int baseExp;\n  int bitCount;\n  uint temp2;\n  uint temp3;\n  int integerPart;\n  uint fractionalPart;\n  uint shiftedBit;\n  int loopCount;\n  uint temp4;\n  undefined8 result;\n  \n  if ((~num2 & 0x7ff00000) == 0) {\n    result = FUN_080004d0(num1,num2,num1,num2);\n    result = FUN_0800016c(num1,num2,(int)result,(int)((ulonglong)result >> 0x20));\n    return result;\n  }\n  if ((int)num2 < 1) {\n    if ((num2 & 0x7fffffff | num1) == 0) {\n      return CONCAT44(num2,num1);\n    }\n    if (num2 != 0) {\n      result = FUN_08000168(num1,num2,num1,num2);\n      temp1 = (undefined4)((ulonglong)result >> 0x20);\n      result = FUN_08000724((int)result,temp1,(int)result,temp1);\n      return result;\n    }\n  }\n  baseExp = (int)num2 >> 0x14;\n  if (baseExp == 0) {\n    while (num2 == 0) {\n      baseExp = baseExp + -0x15;\n      num2 = num1 >> 0xb;\n      num1 = num1 << 0x15;\n    }\n    shiftedNum = 0;\n    for (; -1 < (int)(num2 << 0xb); num2 = num2 << 1) {\n      shiftedNum = shiftedNum + 1;\n    }\n    baseExp = baseExp - (shiftedNum - 1);\n    num2 = num2 | num1 >> (0x20 - shiftedNum & 0xff);\n    num1 = num1 << (shiftedNum & 0xff);\n  }\n  integerPart = 0;\n  shiftedNum = num2 & 0xfffff | 0x100000;\n  if ((baseExp + -0x3ff) * -0x80000000 < 0) {\n    shiftedNum = shiftedNum * 2 - ((int)num1 >> 0x1f);\n    num1 = num1 << 1;\n  }\n  shiftedNum = shiftedNum * 2 - ((int)num1 >> 0x1f);\n  bitCount = 0x16;\n  temp2 = 0;\n  fractionalPart = 0x200000;\n  num1 = num1 << 1;\n  do {\n    loopCount = temp2 + fractionalPart;\n    if (loopCount <= (int)shiftedNum) {\n      shiftedNum = shiftedNum - loopCount;\n      temp2 = loopCount + fractionalPart;\n      integerPart = integerPart + fractionalPart;\n    }\n    bitCount = bitCount + -1;\n    shiftedNum = shiftedNum * 2 - ((int)num1 >> 0x1f);\n    fractionalPart = fractionalPart >> 1;\n    num1 = num1 << 1;\n  } while (bitCount != 0);\n  loopCount = 0x20;\n  shiftedBit = 0x80000000;\n  fractionalPart = 0;\n  bitCount = 0;\n  do {\n    temp4 = shiftedBit + bitCount;\n    temp3 = temp2;\n    if (((int)temp2 < (int)shiftedNum) || ((shiftedNum == temp2 && (temp4 <= num1)))) {\n      bitCount = temp4 + shiftedBit;\n      if (((int)temp4 < 0) && (-1 < bitCount)) {\n        temp3 = temp2 + 1;\n      }\n      shiftedNum = shiftedNum - temp2;\n      if (num1 < temp4) {\n        shiftedNum = shiftedNum - 1;\n      }\n      num1 = num1 - temp4;\n      fractionalPart = fractionalPart + shiftedBit;\n    }\n    shiftedNum = shiftedNum * 2 - ((int)num1 >> 0x1f);\n    loopCount = loopCount + -1;\n    num1 = num1 << 1;\n    shiftedBit = shiftedBit >> 1;\n    temp2 = temp3;\n  } while (loopCount != 0);\n  if ((num1 | shiftedNum) != 0) {\n    if (fractionalPart == 0xffffffff) {\n      integerPart = integerPart + 1;\n      fractionalPart = 0;\n    }\n    else {\n      fractionalPart = fractionalPart + 1 & 0xfffffffe;\n    }\n  }\n  fractionalPart = fractionalPart >> 1;\n  if (integerPart << 0x1f < 0) {\n    fractionalPart = fractionalPart | 0x80000000;\n  }\n  return CONCAT44((integerPart >> 1) + 0x3fe00000 + (baseExp + -0x3ff >> 1) * 0x100000,fractionalPart);\n}\n\n",
            "renaming": {
                "FUN_08006c0c": "calculate_float_08006c0c",
                "param_1": "num1",
                "param_2": "num2",
                "uVar1": "temp1",
                "uVar2": "shiftedNum",
                "iVar3": "baseExp",
                "iVar4": "bitCount",
                "uVar5": "temp2",
                "uVar6": "temp3",
                "iVar7": "integerPart",
                "uVar8": "fractionalPart",
                "uVar9": "shiftedBit",
                "iVar10": "loopCount",
                "uVar11": "temp4",
                "uVar12": "result"
            },
            "calling": [
                "FUN_08005c70",
                "FUN_08005bc8",
                "FUN_08006228"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_08000168",
                "FUN_08000724",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d68": {
            "entrypoint": "0x08006d68",
            "current_name": "calculate_value_08006d68",
            "code": "\nundefined8 calculateValue_08006d68(int inputValue1,uint inputValue2,undefined4 inputValue3,undefined4 inputValue4)\n\n{\n  int result;\n  undefined4 tempResult1;\n  undefined4 tempResult2;\n  undefined4 tempResult3;\n  undefined4 tempResult4;\n  undefined4 tempResult5;\n  undefined4 tempResult6;\n  uint unsignedInputValue2;\n  undefined8 finalResult;\n  undefined8 tempResult7;\n  \n  finalResult = CONCAT44(inputValue2,inputValue1);\n  unsignedInputValue2 = inputValue2 & 0x7fffffff;\n  if (unsignedInputValue2 < 0x44100000) {\n    if (unsignedInputValue2 < 0x3fdc0000) {\n      if (unsignedInputValue2 < 0x3e200000) {\n        tempResult7 = FUN_0800016c(inputValue1,inputValue2,0x8800759c,0x7e37e43c,inputValue4);\n        result = FUN_080009f0((int)tempResult7,(int)((ulonglong)tempResult7 >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return finalResult;\n        }\n      }\n      result = -1;\n    }\n    else {\n      finalResult = FUNC_0800708c();\n      tempResult2 = (undefined4)((ulonglong)finalResult >> 0x20);\n      tempResult1 = (undefined4)finalResult;\n      if (unsignedInputValue2 < 0x3ff30000) {\n        if (unsignedInputValue2 < 0x3fe60000) {\n          finalResult = FUN_0800016c(tempResult1,tempResult2,tempResult1,tempResult2);\n          finalResult = FUN_08000168((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0,0x3ff00000);\n          tempResult7 = FUN_0800016c(tempResult1,tempResult2,0,0x40000000);\n          finalResult = FUN_08000724((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempResult7,\n                               (int)((ulonglong)tempResult7 >> 0x20));\n          result = 0;\n        }\n        else {\n          finalResult = FUN_08000168(tempResult1,tempResult2,0,0x3ff00000);\n          tempResult7 = FUN_0800016c(tempResult1,tempResult2,0,0x3ff00000);\n          finalResult = FUN_08000724((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempResult7,\n                               (int)((ulonglong)tempResult7 >> 0x20));\n          result = 1;\n        }\n      }\n      else if (unsignedInputValue2 < 0x40038000) {\n        finalResult = FUN_08000168(tempResult1,tempResult2,0,0x3ff80000);\n        tempResult7 = FUN_080004d0(tempResult1,tempResult2,0,0x3ff80000);\n        tempResult7 = FUN_0800016c((int)tempResult7,(int)((ulonglong)tempResult7 >> 0x20),0,0x3ff00000);\n        finalResult = FUN_08000724((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempResult7,\n                             (int)((ulonglong)tempResult7 >> 0x20));\n        result = 2;\n      }\n      else {\n        finalResult = FUN_08000724(0,0xbff00000,tempResult1,tempResult2);\n        result = 3;\n      }\n    }\n    tempResult6 = (undefined4)((ulonglong)finalResult >> 0x20);\n    tempResult5 = (undefined4)finalResult;\n    finalResult = FUN_080004d0(tempResult5,tempResult6,tempResult5,tempResult6);\n    tempResult3 = (undefined4)((ulonglong)finalResult >> 0x20);\n    tempResult1 = (undefined4)finalResult;\n    finalResult = FUN_080004d0(tempResult1,tempResult3,tempResult1,tempResult3);\n    tempResult4 = (undefined4)((ulonglong)finalResult >> 0x20);\n    tempResult2 = (undefined4)finalResult;\n    finalResult = FUN_080004d0(tempResult2,tempResult4,0xe322da11,0x3f90ad3a);\n    finalResult = FUN_0800016c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0x24760deb,0x3fa97b4b);\n    finalResult = FUN_080004d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20),tempResult2,tempResult4);\n    finalResult = FUN_0800016c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0xa0d03d51,0x3fb10d66);\n    finalResult = FUN_080004d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20),tempResult2,tempResult4);\n    finalResult = FUN_0800016c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0xc54c206e,0x3fb745cd);\n    finalResult = FUN_080004d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20),tempResult2,tempResult4);\n    finalResult = FUN_0800016c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0x920083ff,0x3fc24924);\n    finalResult = FUN_080004d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20),tempResult2,tempResult4);\n    finalResult = FUN_0800016c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0x5555550d,0x3fd55555);\n    finalResult = FUN_080004d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20),tempResult1,tempResult3);\n    tempResult1 = (undefined4)((ulonglong)finalResult >> 0x20);\n    tempResult7 = FUN_080004d0(tempResult2,tempResult4,0x2c6a6c2f,0xbfa2b444);\n    tempResult7 = FUN_08000168((int)tempResult7,(int)((ulonglong)tempResult7 >> 0x20),0x52defd9a,0x3fadde2d);\n    tempResult7 = FUN_080004d0((int)tempResult7,(int)((ulonglong)tempResult7 >> 0x20),tempResult2,tempResult4);\n    tempResult7 = FUN_08000168((int)tempResult7,(int)((ulonglong)tempResult7 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    tempResult7 = FUN_080004d0((int)tempResult7,(int)((ulonglong)tempResult7 >> 0x20),tempResult2,tempResult4);\n    tempResult7 = FUN_08000168((int)tempResult7,(int)((ulonglong)tempResult7 >> 0x20),0xfe231671,0x3fbc71c6);\n    tempResult7 = FUN_080004d0((int)tempResult7,(int)((ulonglong)tempResult7 >> 0x20),tempResult2,tempResult4);\n    tempResult7 = FUN_08000168((int)tempResult7,(int)((ulonglong)tempResult7 >> 0x20),0x9998ebc4,0x3fc99999);\n    tempResult7 = FUN_080004d0((int)tempResult7,(int)((ulonglong)tempResult7 >> 0x20),tempResult2,tempResult4);\n    tempResult2 = (undefined4)((ulonglong)tempResult7 >> 0x20);\n    if (result == -1) {\n      finalResult = FUN_0800016c((int)finalResult,tempResult1,(int)tempResult7,tempResult2);\n      finalResult = FUN_080004d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20),tempResult5,tempResult6);\n      finalResult = FUN_08000168(tempResult5,tempResult6,(int)finalResult,(int)((ulonglong)finalResult >> 0x20));\n    }\n    else {\n      finalResult = FUN_0800016c((int)finalResult,tempResult1,(int)tempResult7,tempResult2);\n      finalResult = FUN_080004d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20),tempResult5,tempResult6);\n      result = result * 8;\n      finalResult = FUN_08000168((int)finalResult,(int)((ulonglong)finalResult >> 0x20),\n                           *(undefined4 *)(&UNK_08007410 + result),\n                           *(undefined4 *)(&UNK_08007414 + result));\n      finalResult = FUN_08000168((int)finalResult,(int)((ulonglong)finalResult >> 0x20),tempResult5,tempResult6);\n      finalResult = FUN_08000168(*(undefined4 *)(&UNK_080073f0 + result),\n                           *(undefined4 *)(&UNK_080073f4 + result),(int)finalResult,\n                           (int)((ulonglong)finalResult >> 0x20));\n      if ((int)inputValue2 < 0) {\n        finalResult = CONCAT44((int)((ulonglong)finalResult >> 0x20) + -0x80000000,(int)finalResult);\n      }\n    }\n  }\n  else if ((unsignedInputValue2 < 0x7ff00001) && ((unsignedInputValue2 != 0x7ff00000 || (inputValue1 == 0)))) {\n    if ((int)inputValue2 < 1) {\n      finalResult = 0xbff921fb54442d18;\n    }\n    else {\n      finalResult = 0x3ff921fb54442d18;\n    }\n  }\n  else {\n    finalResult = FUN_0800016c(inputValue1,inputValue2,inputValue1,inputValue2,inputValue4);\n  }\n  return finalResult;\n}\n\n",
            "renaming": {
                "FUN_08006d68": "calculate_value_08006d68",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "inputValue3",
                "param_4": "inputValue4",
                "iVar1": "result",
                "uVar2": "tempResult1",
                "uVar3": "tempResult2",
                "uVar4": "tempResult3",
                "uVar5": "tempResult4",
                "uVar6": "tempResult5",
                "uVar7": "tempResult6",
                "uVar8": "unsignedInputValue2",
                "uVar9": "finalResult",
                "uVar10": "tempResult7"
            },
            "calling": [
                "FUN_08006070"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_0800708c",
                "FUN_08000168",
                "FUN_080009f0",
                "FUN_08000724",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800708c": {
            "entrypoint": "0x0800708c",
            "current_name": "FUNC_0800708c",
            "code": "\nvoid FUNC_0800708c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800708c": "FUNC_0800708c"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228",
                "FUN_08006070"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007092": {
            "entrypoint": "0x08007092",
            "current_name": "extract_highest_bit_08007092",
            "code": "\nuint extract_highest_bit_08007092(undefined4 input_bit_pattern,uint input_number)\n\n{\n  return (input_number | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_08007092": "extract_highest_bit_08007092",
                "param_1": "input_bit_pattern",
                "param_2": "input_number"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800709e": {
            "entrypoint": "0x0800709e",
            "current_name": "initialize_zero_0800709e",
            "code": "\nvoid initialize_zero_0800709e(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800709e": "initialize_zero_0800709e",
                "undefined4": "void"
            },
            "calling": [
                "FUN_08005900",
                "FUN_08005854",
                "FUN_08005bc8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070a4": {
            "entrypoint": "0x080070a4",
            "current_name": "get_positive_infinity_080070a4",
            "code": "\ndouble getPositiveInfinity_080070a4(void)\n\n{\n  return 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080070a4": "get_positive_infinity_080070a4",
                "undefined8": "double"
            },
            "calling": [
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070b0": {
            "entrypoint": "0x080070b0",
            "current_name": "calculate_function_080070b0",
            "code": "\nundefined8 calculateFunction_080070b0(uint input1,uint input2,undefined4 input3)\n\n{\n  int tempVar1;\n  undefined4 tempVar2;\n  uint tempVar3;\n  undefined4 tempVar4;\n  uint tempVar5;\n  uint tempVar6;\n  uint tempVar7;\n  undefined8 tempVar8;\n  \n  tempVar7 = (input2 << 1) >> 0x15;\n  tempVar6 = tempVar7 - 0x3ff;\n  tempVar3 = input2;\n  if ((int)tempVar6 < 0x14) {\n    if ((int)tempVar6 < 0) {\n      if ((input2 & 0x7fffffff | input1) == 0) {\n        return CONCAT44(input2,input1);\n      }\n      tempVar3 = input2 & 0xfffff | input1;\n      tempVar1 = ((int)input2 >> 0x1f) * -8;\n      tempVar2 = *(undefined4 *)(&DAT_08007430 + tempVar1);\n      tempVar4 = *(undefined4 *)(&DAT_08007434 + tempVar1);\n      tempVar8 = FUN_0800016c(input1,(-tempVar3 | tempVar3) >> 0xc & 0x80000 | input2 & 0xfffe0000,tempVar2,\n                           tempVar4,input1,input2,input3);\n      tempVar8 = FUN_08000168((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),tempVar2,tempVar4);\n      return CONCAT44((uint)((ulonglong)tempVar8 >> 0x20) & 0x7fffffff | input2 & 0x80000000,\n                      (int)tempVar8);\n    }\n    tempVar7 = 0xfffff >> (tempVar6 & 0xff);\n    if ((input2 & tempVar7 | input1) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    tempVar7 = tempVar7 >> 1;\n    tempVar5 = input2 & tempVar7 | input1;\n    if (tempVar5 != 0) {\n      if (tempVar6 == 0x13) {\n        tempVar5 = 0x80000000;\n      }\n      else {\n        tempVar5 = 0;\n      }\n      tempVar3 = 0x40000 >> (tempVar6 & 0xff) | input2 & ~tempVar7;\n    }\n  }\n  else {\n    if (0x33 < (int)tempVar6) {\n      if (tempVar6 != 0x400) {\n        return CONCAT44(input2,input1);\n      }\n      tempVar8 = FUN_0800016c();\n      return tempVar8;\n    }\n    tempVar7 = tempVar7 - 0x413;\n    tempVar6 = 0xffffffff >> (tempVar7 & 0xff);\n    if ((input1 & tempVar6) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    tempVar6 = tempVar6 >> 1;\n    tempVar5 = input1;\n    if ((input1 & tempVar6) != 0) {\n      tempVar5 = 0x40000000 >> (tempVar7 & 0xff) | input1 & ~tempVar6;\n    }\n  }\n  tempVar1 = ((int)input2 >> 0x1f) * -8;\n  tempVar2 = *(undefined4 *)(&DAT_08007430 + tempVar1);\n  tempVar4 = *(undefined4 *)(&DAT_08007434 + tempVar1);\n  tempVar8 = FUN_0800016c(tempVar5,tempVar3,tempVar2,tempVar4,input1,input2,input3);\n  tempVar8 = FUN_08000168((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),tempVar2,tempVar4);\n  return tempVar8;\n}\n\n",
            "renaming": {
                "FUN_080070b0": "calculate_function_080070b0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6",
                "uVar7": "tempVar7",
                "uVar8": "tempVar8"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000168",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071c0": {
            "entrypoint": "0x080071c0",
            "current_name": "calculate_result_080071c0",
            "code": "\nundefined8 calculateResult_080071c0(uint inputValue1,uint inputValue2,int modifier,undefined4 param4)\n\n{\n  uint shiftedValue;\n  undefined4 constant1;\n  int updatedModifier;\n  undefined4 constant2;\n  uint highBits;\n  undefined8 result;\n  \n  result = CONCAT44(inputValue2,inputValue1);\n  shiftedValue = (inputValue2 << 1) >> 0x15;\n  if (shiftedValue == 0) {\n    if ((inputValue2 & 0x7fffffff | inputValue1) == 0) {\n      return result;\n    }\n    result = FUN_080004d0(inputValue1,inputValue2,0,0x43500000);\n    if (-0xc351 < modifier) {\n      shiftedValue = ((uint)((int)((ulonglong)result >> 0x20) << 1) >> 0x15) - 0x36;\n      goto LAB_08007210;\n    }\nLAB_080071ec:\n    constant1 = 0xc2f8f359;\n    constant2 = 0x1a56e1f;\n  }\n  else {\n    if (shiftedValue == 0x7ff) {\n      result = FUN_0800016c(inputValue1,inputValue2,inputValue1,inputValue2,param4);\n      return result;\n    }\nLAB_08007210:\n    highBits = (uint)((ulonglong)result >> 0x20);\n    constant1 = (undefined4)result;\n    updatedModifier = shiftedValue + modifier;\n    if (updatedModifier < 0x7ff) {\n      if (0 < updatedModifier) {\n        return CONCAT44(highBits & 0x800fffff | updatedModifier * 0x100000,constant1);\n      }\n      if (updatedModifier + 0x35 < 0 == SCARRY4(updatedModifier,0x35)) {\n        result = CONCAT44(highBits & 0x800fffff | (updatedModifier + 0x36) * 0x100000,constant1);\n        constant1 = 0;\n        constant2 = 0x3c900000;\n        goto LAB_0800722e;\n      }\n      if (modifier < 0xc351) {\n        result = FUNC_0800729c(0xc2f8f359,0x1a56e1f,constant1,highBits);\n        goto LAB_080071ec;\n      }\n    }\n    result = FUNC_0800729c(0x8800759c,0x7e37e43c,constant1,highBits);\n    constant1 = 0x8800759c;\n    constant2 = 0x7e37e43c;\n  }\nLAB_0800722e:\n  result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),constant1,constant2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080071c0": "calculate_result_080071c0",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "modifier",
                "param_4": "param4",
                "uVar1": "shiftedValue",
                "uVar2": "constant1",
                "iVar3": "updatedModifier",
                "uVar4": "constant2",
                "uVar5": "highBits",
                "uVar6": "result"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_0800016c",
                "FUN_0800729c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800729c": {
            "entrypoint": "0x0800729c",
            "current_name": "FUNC_0800729c",
            "code": "\nvoid FUNC_0800729c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800729c": "FUNC_0800729c"
            },
            "calling": [
                "FUN_080071c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072ac": {
            "entrypoint": "0x080072ac",
            "current_name": "get_data_value_080072ac",
            "code": "\nundefined4 get_data_value_080072ac(void)\n\n{\n  return DAT_200001c0;\n}\n\n",
            "renaming": {
                "FUN_080072ac": "get_data_value_080072ac"
            },
            "calling": [
                "FUN_08005900",
                "FUN_08005854",
                "FUN_08005bc8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072b8": {
            "entrypoint": "0x080072b8",
            "current_name": "update_pointer_080072b8",
            "code": "\nvoid updatePointer_080072b8(int amount)\n\n{\n  if (DAT_200002b4 == (undefined *)0x0) {\n    DAT_200002b4 = &DAT_200016a0;\n  }\n  DAT_200002b4 = DAT_200002b4 + amount;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072b8": "update_pointer_080072b8",
                "param_1": "amount"
            },
            "calling": [
                "FUN_0800581c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d4": {
            "entrypoint": "0x080072d4",
            "current_name": "FUNC_080072d4",
            "code": "\nvoid FUNC_080072d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d4": "FUNC_080072d4"
            },
            "calling": [
                "FUN_08000134",
                "FUN_08004fb4",
                "FUN_08000110"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072e0": {
            "entrypoint": "0x080072e0",
            "current_name": "FUNC_080072e0",
            "code": "\nvoid FUNC_080072e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072e0": "FUNC_080072e0"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 171322,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000150",
            "FUN_08000168",
            "FUN_0800016c",
            "FUN_08000404",
            "FUN_08000428",
            "FUN_080004d0",
            "FUN_080006ac",
            "FUN_08000724",
            "FUN_08000892",
            "FUN_08000904",
            "FUN_08000980",
            "FUN_08000990",
            "FUN_080009a0",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_080009f0",
            "FUN_08000a04",
            "FUN_08000a30",
            "FUN_08000ad8",
            "FUN_08000adc",
            "FUN_08000c3c",
            "FUN_08000c44",
            "FUN_08000cec",
            "FUN_08000e54",
            "FUN_08000f9c",
            "FUN_08000ffc",
            "FUN_08001004",
            "FUN_08001014",
            "FUN_08001028",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_08001078",
            "FUN_080010c4",
            "FUN_08001104",
            "FUN_08001128",
            "FUN_0800114c",
            "FUN_0800115c",
            "FUN_08001170",
            "FUN_08001194",
            "FUN_080011fc",
            "FUN_08001214",
            "FUN_08001240",
            "FUN_08001264",
            "FUN_08001424",
            "FUN_0800142e",
            "FUN_08001436",
            "FUN_08001460",
            "FUN_080014e2",
            "FUN_08001530",
            "FUN_080015e8",
            "FUN_080016f4",
            "FUN_08001754",
            "FUN_08001828",
            "FUN_08001938",
            "FUN_08001b58",
            "FUN_08002008",
            "FUN_0800209c",
            "FUN_08002214",
            "FUN_08002220",
            "FUN_08002250",
            "FUN_08002280",
            "FUN_080022d0",
            "FUN_08002324",
            "FUN_08002368",
            "FUN_080023d0",
            "FUN_08002404",
            "FUN_0800245c",
            "FUN_08002520",
            "FUN_08002538",
            "FUN_08002564",
            "FUN_080025a4",
            "FUN_080025e8",
            "FUN_08002724",
            "FUN_0800290c",
            "FUN_0800299a",
            "FUN_08002ad0",
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0",
            "FUN_08002d88",
            "FUN_08002ea0",
            "FUN_08002ec0",
            "FUN_08002ed4",
            "FUN_08002ee8",
            "FUN_08002f28",
            "FUN_08003034",
            "FUN_08003068",
            "FUN_08003298",
            "FUN_08003314",
            "FUN_08003320",
            "FUN_08003330",
            "FUN_08003eb0",
            "FUN_08003ec8",
            "FUN_08003f3c",
            "FUN_08003fc4",
            "FUN_08003fd0",
            "FUN_08003fdc",
            "FUN_08003fe8",
            "FUN_08003ff4",
            "FUN_08004028",
            "FUN_0800403c",
            "FUN_0800407c",
            "FUN_080040b8",
            "FUN_080040e8",
            "FUN_0800411c",
            "FUN_08004194",
            "FUN_080041ae",
            "FUN_080041c4",
            "FUN_0800426c",
            "FUN_08004300",
            "FUN_08004348",
            "FUN_08004384",
            "FUN_080043bc",
            "FUN_080043f0",
            "FUN_08004410",
            "FUN_08004434",
            "FUN_08004458",
            "FUN_08004490",
            "FUN_08004514",
            "FUN_0800458c",
            "FUN_0800483c",
            "FUN_08004a30",
            "FUN_08004a84",
            "FUN_08004c18",
            "FUN_08004c30",
            "FUN_08004c64",
            "FUN_08004c70",
            "FUN_08004c8c",
            "FUN_08004cac",
            "FUN_08004ccc",
            "FUN_08004d48",
            "FUN_08004d8c",
            "FUN_08004e14",
            "FUN_08004e7c",
            "FUN_08004f10",
            "thunk_FUN_0800115c",
            "FUN_08004fb4",
            "FUN_08004ffc",
            "FUN_08005044",
            "FUN_080050fc",
            "FUN_080052e4",
            "FUN_080053d4",
            "FUN_08005614",
            "FUN_08005630",
            "FUN_08005646",
            "FUN_0800567c",
            "FUN_08005714",
            "FUN_080057d0",
            "FUN_0800581c",
            "FUN_08005840",
            "FUN_08005854",
            "thunk_FUN_08006070",
            "FUN_08005900",
            "FUN_08005bc8",
            "FUN_08005c70",
            "FUN_08006070",
            "FUN_08006228",
            "FUN_08006c0c",
            "FUN_08006d68",
            "FUN_08007092",
            "FUN_0800709e",
            "FUN_080070a4",
            "FUN_080070b0",
            "FUN_080071c0",
            "FUN_080072ac",
            "FUN_080072b8"
        ]
    ],
    "locked_functions": []
}