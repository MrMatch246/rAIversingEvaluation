{
    "functions": {
        "FUN_080050fc": {
            "renaming": {
                "FUN_080050fc": "FUNC_080050fc"
            },
            "code": "\nint FUNC_080050fc(undefined4 *param_1,int *param_2,byte *param_3,int *param_4)\n\n{\n  bool bVar1;\n  undefined *puVar2;\n  int iVar3;\n  int iVar4;\n  void *pvVar5;\n  undefined4 *puVar6;\n  int *piVar7;\n  byte *pbVar8;\n  byte *pbVar9;\n  undefined4 *unaff_r9;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = _malloc_r(param_1,0x40);\n    *param_2 = iVar3;\n    param_2[4] = iVar3;\n    if (iVar3 == 0) {\n      *param_1 = 0xc;\n      return -1;\n    }\n    param_2[5] = 0x40;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar8 = param_3;\nLAB_08005146:\n  pbVar9 = pbVar8;\n  if (*pbVar9 != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  pbVar8 = pbVar9 + 1;\n  if (*pbVar9 != 0x25) goto LAB_08005146;\nLAB_08005150:\n  iVar3 = (int)pbVar9 - (int)param_3;\n  if (iVar3 != 0) {\n    iVar4 = __ssputs_r(param_1,param_2,param_3,iVar3);\n    if (iVar4 == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(param_2 + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar3;\n  }\n  if (*pbVar9 == 0) goto LAB_080052ac;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar8 = pbVar9 + 1;\n  while( true ) {\n    pvVar5 = memchr(PTR_DAT_080052d0,(uint)*pbVar8,5);\n    puVar2 = PTR_DAT_080052d4;\n    param_3 = pbVar8 + 1;\n    if (pvVar5 == (void *)0x0) break;\n    local_88 = 1 << ((int)pvVar5 - (int)PTR_DAT_080052d0 & 0xffU) | local_88;\n    pbVar8 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar8 == 0x2a) {\n    piVar7 = local_8c + 1;\n    iVar3 = *local_8c;\n    local_8c = piVar7;\n    if (-1 < iVar3) goto LAB_080051ee;\n    local_7c = -iVar3;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar1 = false;\n    iVar3 = local_7c;\n    param_3 = pbVar8;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar3 = iVar3 * 10 + (*param_3 - 0x30);\n      bVar1 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar1) {\nLAB_080051ee:\n      local_7c = iVar3;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar7 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar7;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar1 = false;\n      iVar3 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar3 = iVar3 * 10 + (*param_3 - 0x30);\n        bVar1 = true;\n      }\n      if (bVar1) {\n        local_84 = iVar3;\n      }\n    }\n  }\n  pvVar5 = memchr(PTR_DAT_080052d4,(uint)*param_3,3);\n  if (pvVar5 != (void *)0x0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << ((int)pvVar5 - (int)puVar2 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  pvVar5 = memchr(PTR_s_efgEFG_080052d8,(uint)local_70,6);\n  if (pvVar5 == (void *)0x0) {\n    puVar6 = (undefined4 *)_printf_i(param_1,&local_88,param_2,DAT_080052e0,&local_8c);\n  }\n  else {\n    puVar6 = param_1;\n    if (DAT_080052dc == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      puVar6 = unaff_r9;\n      goto LAB_08005260;\n    }\n  }\n  if (puVar6 == (undefined4 *)0xffffffff) goto LAB_080052ac;\nLAB_08005260:\n  local_74 = local_74 + (int)puVar6;\n  pbVar8 = param_3;\n  unaff_r9 = puVar6;\n  goto LAB_08005146;\n}\n\n",
            "called": [
                "__ssputs_r",
                "memchr",
                "_printf_i",
                "_malloc_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080050fc",
            "calling": [
                "siprintf"
            ],
            "imported": false,
            "current_name": "FUNC_080050fc"
        },
        "FUN_08003320": {
            "renaming": {
                "FUN_08003320": "updateDeltaTime_08003320",
                "_deltat": "deltaTime",
                "in_r0": "input"
            },
            "code": "void updateDeltaTime_08003320(float deltaTime) {\n                      undefined4 input;\n                      *(undefined4 *)PTR_deltat_08003328 = input;\n                      return;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003320",
            "calling": [
                "AHRS_ComputeAngles",
                "IMU_Init"
            ],
            "imported": false,
            "current_name": "updateDeltaTime_08003320"
        },
        "FUN_08004410": {
            "renaming": {
                "FUN_08004410": "send_attitude_data_08004410",
                "local_10": "attitude_data",
                "local_c": "combined_data",
                "in_r1": "input_register",
                "PTR_msp_txf_attitude_08004430": "msp_txf_attitude_pointer"
            },
            "code": "void send_attitude_data_08004410(void)\n{\n  uint32_t attitude_data = *(uint32_t *)PTR_msp_txf_attitude_08004430;\n  uint32_t combined_data = (in_r1 & 0xffff0000) | (uint32_t)*(uint16_t *)(PTR_msp_txf_attitude_08004430 + 4);\n  MSP_SendFrame('l', (uint8_t *)&attitude_data, 6);\n  return;\n}",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004410",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "send_attitude_data_08004410"
        },
        "FUN_08003ef2": {
            "renaming": {
                "FUN_08003ef2": "clear_circular_buffer_08003ef2",
                "cb": "buffer",
                "iVar1": "index",
                "cb->head": "buffer->head",
                "cb->tail": "buffer->tail",
                "cb->size": "buffer->size",
                "cb->buffer": "buffer->data"
            },
            "code": "void clear_circular_buffer_08003ef2(CircularBuffer *buffer) {\n  int index = 0;\n  buffer->head = 0;\n  buffer->tail = 0;\n  buffer->size = 0;\n  do {\n    buffer->data[index] = '\\0';\n    index++;\n  } while (index != 0x800);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ef2",
            "calling": [
                "serialFlush"
            ],
            "imported": false,
            "current_name": "clear_circular_buffer_08003ef2"
        },
        "FUN_08001264": {
            "renaming": {
                "FUN_08001264": "configure_gpio_pins_08001264",
                "GPIOx": "gpio",
                "GPIO_Init": "gpio_init",
                "puVar1": "pin_config_ptr",
                "uVar2": "alternate_function_1",
                "uVar3": "alternate_function_2",
                "uVar4": "pin_speed",
                "uVar5": "pin_mask",
                "uVar6": "pin_mode",
                "iVar7": "alternate_function_index",
                "uVar8": "pin_index",
                "uVar9": "temp",
                "uVar10": "alternate_function_3",
                "unaff_r10": "gpio_ptr",
                "tmpreg": "temp_reg"
            },
            "code": "void configure_gpio_pins_08001264(GPIO_TypeDef *gpio, GPIO_InitTypeDef *gpio_init)\n{\n  uint32_t pin_mask;\n  uint32_t pin_speed;\n  uint32_t pin_pull;\n  uint32_t pin_mode;\n  uint32_t pin_index = 0;\n  while (pin_index < 16) {\n    pin_mask = 1 << pin_index;\n    if (pin_mask & gpio_init->Pin) {\n      pin_mode = gpio_init->Mode;\n      if (pin_mode == GPIO_MODE_AF_PP || pin_mode == GPIO_MODE_AF_OD) {\n        // Alternate function mode\n        uint32_t pin_af = gpio_init->Alternate;\n        uint32_t af_index = (pin_index & 7) * 4;\n        if (pin_index < 8) {\n          gpio->CRL = (gpio->CRL & ~(0xF << af_index)) | (pin_af << af_index);\n        } else {\n          gpio->CRH = (gpio->CRH & ~(0xF << af_index)) | (pin_af << af_index);\n        }\n      } else {\n        // Input/output mode\n        if (pin_mode == GPIO_MODE_OUTPUT_PP || pin_mode == GPIO_MODE_OUTPUT_OD) {\n          pin_speed = gpio_init->Speed + GPIO_SPEED_FREQ_LOW;\n        } else {\n          pin_speed = GPIO_SPEED_FREQ_LOW;\n        }\n        if (pin_mode == GPIO_MODE_INPUT || pin_mode == GPIO_MODE_IT_RISING || pin_mode == GPIO_MODE_IT_FALLING || pin_mode == GPIO_MODE_IT_RISING_FALLING) {\n          pin_pull = GPIO_NOPULL;\n        } else {\n          pin_pull = gpio_init->Pull;\n        }\n        uint32_t pin_offset = (pin_index % 8) * 4;\n        if (pin_index < 8) {\n          gpio->CRL = (gpio->CRL & ~(0xF << pin_offset)) | (pin_speed << pin_offset);\n          gpio->CRL = (gpio->CRL & ~(0x3 << (pin_offset + 2))) | (pin_pull << (pin_offset + 2));\n        } else {\n          gpio->CRH = (gpio->CRH & ~(0xF << pin_offset)) | (pin_speed << pin_offset);\n          gpio->CRH = (gpio->CRH & ~(0x3 << (pin_offset + 2))) | (pin_pull << (pin_offset + 2));\n        }\n      }\n    }\n    pin_index++;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001264",
            "calling": [
                "HAL_UART_MspInit",
                "Peripherals_Init",
                "HAL_TIM_MspPostInit",
                "HAL_I2C_MspInit"
            ],
            "imported": false,
            "current_name": "configure_gpio_pins_08001264"
        },
        "FUN_080058fc": {
            "renaming": {
                "FUN_080058fc": "calculate_result_080058fc",
                "param_1": "first_input",
                "param_2": "second_input",
                "param_3": "third_input",
                "param_4": "fourth_input",
                "param_5": "fifth_input",
                "uVar1": "temp1",
                "extraout_r1": "temp2",
                "extraout_r1_00": "temp3",
                "unaff_r4": "temp4",
                "iVar2": "temp5",
                "uVar3": "temp6",
                "uVar4": "temp7",
                "iVar5": "temp8",
                "uVar6": "temp9",
                "uVar7": "result",
                "uVar8": "temp10"
            },
            "code": "undefined8 calculate_result_080058fc(uint first_input, uint second_input, uint third_input, uint fourth_input, double fifth_input){\n    undefined4 temp1;\n    undefined4 temp2;\n    int temp3;\n    undefined4 temp4;\n    int temp5;\n    uint temp6;\n    uint temp7;\n    int temp8;\n    uint temp9;\n    undefined8 result;\n    undefined8 temp10;\n    \n    temp10 = CONCAT44(DAT_08006204,DAT_08006200);\n    temp9 = fourth_input & 0x7fffffff;\n    if ((DAT_08006220 < (temp9 | (-third_input | third_input) >> 0x1f)) || (temp7 = second_input & 0x7fffffff, DAT_08006220 < (temp7 | (-first_input | first_input) >> 0x1f))){\n        temp10 = __aeabi_dadd(first_input, second_input);\n        return temp10;\n    }\n    if ((fourth_input + 0xc0100000 | third_input) == 0){\n        atan(fifth_input);\n        return CONCAT44(temp1, first_input);\n    }\n    temp6 = (int)fourth_input >> 0x1e & 2U | second_input >> 0x1f;\n    if ((first_input | temp7) == 0){\n        if (temp6 == 2){\n            return CONCAT44(DAT_080061fc,DAT_080061f8);\n        }\n        if (temp6 != 3){\n            return CONCAT44(second_input, first_input);\n        }\n    }\n    else{\n        if ((third_input | temp9) != 0){\n            if (temp9 == DAT_08006220){\n                if (temp7 == temp9){\n                    if (temp6 == 2){\n                        return CONCAT44(DAT_080061ec,DAT_080061e8);\n                    }\n                    if (temp6 == 3){\n                        return CONCAT44(DAT_080061f4,DAT_080061f0);\n                    }\n                    if (temp6 != 1){\n                        return CONCAT44(DAT_0800621c,DAT_08006218);\n                    }\n                    return CONCAT44(DAT_080061e4,DAT_080061e0);\n                }\n                if (temp6 == 2){\n                    return CONCAT44(DAT_080061fc,DAT_080061f8);\n                }\n                if (temp6 == 3){\n                    return temp10;\n                }\n                if (temp6 == 1){\n                    return 0x8000000000000000;\n                }\n                return 0;\n            }\n            if (temp7 != DAT_08006220){\n                temp8 = (int)(temp7 - temp9) >> 0x14;\n                temp1 = DAT_08006210;\n                temp5 = DAT_08006214;\n                if (temp8 < 0x3d){\n                    if (((int)fourth_input < 0) && (temp8 + 0x3c < 0 != SCARRY4(temp8,0x3c))){\n                        temp1 = 0;\n                        temp5 = 0;\n                    }\n                    else{\n                        temp1 = __divdf3(first_input,second_input);\n                        fabs((double)CONCAT44(temp4,fourth_input));\n                        atan((double)CONCAT44(temp4,fourth_input));\n                        temp5 = temp3;\n                    }\n                }\n                if (temp6 != 1){\n                    if (temp6 == 2){\n                        result = __subdf3(temp1,temp5,DAT_08006208,DAT_0800620c);\n                        temp10 = CONCAT44(DAT_080061fc,DAT_080061f8);\n                    }\n                    else{\n                        if (temp6 == 0){\n                            return CONCAT44(temp5,temp1);\n                        }\n                        temp10 = __subdf3(temp1,temp5,DAT_08006208,DAT_0800620c);\n                        result = CONCAT44(DAT_080061fc,DAT_080061f8);\n                    }\n                    result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n                    return result;\n                }\n                return CONCAT44(temp5 + -0x80000000,temp1);\n            }\n        }\n        temp10 = CONCAT44(DAT_08006214,DAT_08006210);\n        if ((int)second_input < 0){\n            temp10 = CONCAT44(DAT_080061dc,DAT_080061d8);\n        }\n    }\n    return temp10;\n}",
            "called": [
                "__ieee754_atan2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058fc",
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "calculate_result_080058fc"
        },
        "FUN_080070b0": {
            "renaming": {
                "FUN_080070b0": "calculate_080070b0",
                "__x": "x",
                "iVar1": "sign",
                "in_r0": "mantissa_low",
                "in_r1": "mantissa_high",
                "uVar2": "double_high",
                "uVar3": "double_low",
                "uVar4": "shift_amount",
                "uVar5": "exponent_bits",
                "in_d0": "result",
                "dVar6": "sticky_bit",
                "uVar7": "temp_result",
                "DAT_080071bc": "mantissa_mask",
                "PTR_TWO52_080071b8": "constant_data"
            },
            "code": "double calculate_080070b0(double x)\n{\n    int exponent = ((*(unsigned int*)&x) << 1) >> 23;\n    int sign = (*(unsigned int*)&x) >> 31;\n    uint32_t mantissa = (*(unsigned int*)&x) & 0x7FFFFF;\n    uint32_t mask;\n    double result;\n    if (exponent < 0x7F)\n    {\n        return x;\n    }\n    exponent -= 0x7F;\n    if (exponent < 0x14)\n    {\n        mask = 0x7FFFFF >> exponent;\n        if (mantissa & mask)\n        {\n            uint32_t sticky_bit = (mantissa & ~mask) != 0;\n            if (exponent == 0x13)\n            {\n                mask <<= 1;\n            }\n            mantissa >>= exponent;\n            mantissa |= 0x800000;\n            exponent = sign << 10 | (0x3FF + exponent);\n            result = *(double*)&exponent + *(double*)&mantissa;\n            result -= *(double*)&sticky_bit;\n            return result;\n        }\n    }\n    else if (exponent == 0xFF)\n    {\n        if (mantissa == 0)\n        {\n            return sign ? -INFINITY : INFINITY;\n        }\n        else\n        {\n            return NAN;\n        }\n    }\n    else\n    {\n        return x;\n    }\n    return x;\n}",
            "called": [
                "__aeabi_dadd",
                "__subdf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080070b0",
            "calling": [
                "pow"
            ],
            "imported": false,
            "current_name": "calculate_080070b0"
        },
        "FUN_08001028": {
            "renaming": {
                "FUN_08001028": "is_end_of_string_08001028",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_08001028(void)\n{\n  char current_char;\n  __aeabi_cfcmpeq();\n  return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001028",
            "calling": [
                "PID_Update",
                "AHRS_GetYaw",
                "PID_Compute"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08001028"
        },
        "FUN_080006ac": {
            "renaming": {
                "FUN_080006ac": "calculate_080006ac",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "temp1",
                "unaff_r4": "temp2",
                "uVar2": "temp3",
                "uVar3": "temp4",
                "in_r12": "temp5",
                "bVar4": "condition1",
                "condition1": "condition2",
                "condition2": "condition3"
            },
            "code": "ulonglong calculate_080006ac(uint value1, uint value2, uint value3, uint value4) {\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5 = value4 >> 0x14;\n  bool condition1 = (value2 ^ value4) & 0x80000000;\n  bool condition2 = (value1 | value2 << 1) == 0;\n  bool condition3 = (value3 | value4 << 1) == 0;\n  if (value3 != temp5 && value4 != temp5) {\n    if (!condition2) {\n      if (!condition3) {\n        return (ulonglong)condition1 << 0x20;\n      }\n      if (value3 == 0) {\n        temp1 = value2 & 0x80000000;\n        do {\n          temp2 = value1 & 0x80000000;\n          value1 = value1 << 1;\n          value2 = value2 * 2 + (uint)(temp2 != 0);\n        } while ((value2 & 0x100000) == 0);\n        value2 |= temp1;\n        if (temp5 != 0) {\n          return CONCAT44(value2,value1);\n        }\n      }\n      do {\n        temp3 = value3 & 0x80000000;\n        value3 = value3 << 1;\n        value4 = value4 * 2 + (uint)(temp3 != 0);\n      } while ((value4 & 0x100000) == 0);\n      return CONCAT44(value2,value1);\n    }\n    if (condition2) {\n      value2 = value4;\n      value1 = value3;\n    }\n    if (!condition3) {\n      return (ulonglong)condition1 << 0x20 | 0x7ff00000;\n    }\n    if (value3 | value4 << 0xc) {\n      return CONCAT44(value2,value1) | 0x7ff8000000000000;\n    }\n  }\n  return CONCAT44(value2,value1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006ac",
            "calling": [
                "__muldf3"
            ],
            "imported": false,
            "current_name": "calculate_080006ac"
        },
        "FUN_0800125a": {
            "renaming": {
                "FUN_0800125a": "handle_systick_interrupt_0800125a"
            },
            "code": "void handle_systick_interrupt_0800125a(void)\n{\n  HAL_SYSTICK_Callback();\n  return;\n}",
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800125a",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "handle_systick_interrupt_0800125a"
        },
        "FUN_08001828": {
            "renaming": {
                "FUN_08001828": "i2c_memory_write_08001828",
                "hi2c": "handle",
                "DevAddress": "dev_addr",
                "MemAddress": "mem_addr",
                "MemAddSize": "mem_addr_size",
                "pData": "data",
                "Size": "size",
                "Timeout": "timeout",
                "HVar1": "status",
                "uVar2": "start_time",
                "uVar3": "current_time",
                "pIVar4": "instance",
                "uVar5": "lock_status"
            },
            "code": "HAL_StatusTypeDef i2c_memory_write_08001828(I2C_HandleTypeDef *handle, uint16_t dev_addr, uint16_t mem_addr, uint16_t mem_addr_size, uint8_t *data, uint16_t size, uint32_t timeout)\n{\n    HAL_StatusTypeDef status;\n    uint32_t start_time;\n    uint32_t current_time;\n    I2C_TypeDef *instance;\n    uint32_t lock_status;\n\n    if (handle->State == HAL_I2C_STATE_READY)\n    {\n        if (data == NULL || size == 0)\n        {\n            return HAL_ERROR;\n        }\n\n        start_time = HAL_GetTick();\n\n        do\n        {\n            instance = handle->Instance;\n            if ((~instance->SR2 & 2) != 0)\n            {\n                lock_status = instance->CR1;\n                handle->Lock = HAL_LOCKED;\n                instance->CR1 = lock_status & 0xfffff7ff;\n                handle->State = HAL_I2C_STATE_BUSY_TX;\n                handle->Mode = HAL_I2C_MODE_MEM;\n                handle->ErrorCode = 0;\n                status = I2C_RequestMemoryWrite(handle, dev_addr, mem_addr, mem_addr_size, timeout);\n\n                if (status != HAL_OK)\n                {\n                    handle->Lock = HAL_UNLOCKED;\n                    if (handle->ErrorCode == HAL_I2C_ERROR_AF)\n                    {\n                        return HAL_ERROR;\n                    }\n                    return HAL_TIMEOUT;\n                }\n\n                break;\n            }\n\n            current_time = HAL_GetTick();\n        } while (current_time - start_time < timeout);\n\n        if (handle->State != HAL_I2C_STATE_BUSY_TX)\n        {\n            return HAL_BUSY;\n        }\n    }\n    else\n    {\n        return HAL_BUSY;\n    }\n\n    while (size > 0)\n    {\n        status = I2C_WaitOnTXEFlagUntilTimeout(handle, timeout);\n\n        if (status != HAL_OK)\n        {\n            goto error_exit;\n        }\n\n        instance = handle->Instance;\n        instance->DR = *data;\n\n        if ((int)(instance->SR1 << 0x1d) < 0)\n        {\n            if ((size - 1) == 0)\n            {\n                break;\n            }\n\n            size -= 2;\n            instance->DR = *(data + 1);\n            data += 2;\n        }\n        else\n        {\n            data++;\n            size--;\n        }\n    }\n\n    status = I2C_WaitOnTXEFlagUntilTimeout(handle, timeout);\n\n    if (status != HAL_OK)\n    {\n        goto error_exit;\n    }\n\n    instance = handle->Instance;\n    instance->CR1 |= 0x200;\n    handle->Lock = HAL_UNLOCKED;\n    handle->State = HAL_I2C_STATE_READY;\n    handle->Mode = HAL_I2C_MODE_NONE;\n    return HAL_OK;\n\nerror_exit:\n    if (handle->ErrorCode == HAL_I2C_ERROR_AF)\n    {\n        instance = handle->Instance;\n        instance->CR1 |= 0x200;\n        return HAL_ERROR;\n    }\n\n    return HAL_TIMEOUT;\n}",
            "called": [
                "I2C_RequestMemoryWrite",
                "HAL_GetTick",
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001828",
            "calling": [
                "I2C_WriteByte"
            ],
            "imported": false,
            "current_name": "i2c_memory_write_08001828"
        },
        "FUN_0800016c": {
            "renaming": {
                "FUN_0800016c": "FUNC_0800016c"
            },
            "code": "\nulonglong FUNC_0800016c(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000278;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800016c",
            "calling": [
                "__ieee754_atan2",
                "scalbn",
                "__ieee754_sqrt",
                "__aeabi_drsub",
                "atan",
                "rint",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "FUNC_0800016c"
        },
        "FUN_08001b58": {
            "renaming": {
                "FUN_08001b58": "FUNC_08001b58"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\nHAL_StatusTypeDef FUNC_08001b58(RCC_OscInitTypeDef *RCC_OscInitStruct)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  uint32_t uVar3;\n  uint32_t uVar4;\n  int iVar5;\n  uint uVar6;\n  uint32_t tmpreg;\n  \n  puVar1 = DAT_08001e70;\n  if ((int)(RCC_OscInitStruct->OscillatorType << 0x1f) < 0) {\n    if (((DAT_08001e70[1] & 0xc) == 4) ||\n       (((DAT_08001e70[1] & 0xc) == 8 && ((int)(DAT_08001e70[1] << 0xf) < 0)))) {\n      uVar6 = count_leading_zeroes(0x4000);\n      if (((int)((*DAT_08001e70 >> (uVar6 & 0x1f)) << 0x1f) < 0) &&\n         (RCC_OscInitStruct->HSEState == 0)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      uVar3 = RCC_OscInitStruct->HSEState;\n      if (uVar3 == 0x10000) {\nLAB_08001c1e:\n        uVar6 = *puVar1 | 0x10000;\n      }\n      else {\n        if (uVar3 == 0) {\n          *DAT_08001e70 = *DAT_08001e70 & 0xfffeffff;\n          *puVar1 = *puVar1 & 0xfffbffff;\n          uVar3 = HAL_GetTick();\n          while (uVar6 = count_leading_zeroes(0x4000),\n                (int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f) < 0) {\n            uVar4 = HAL_GetTick();\n            if (100 < uVar4 - uVar3) {\n              return HAL_TIMEOUT;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (uVar3 == 0x50000) {\n          *DAT_08001e70 = *DAT_08001e70 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        *DAT_08001e70 = *DAT_08001e70 & 0xfffeffff;\n        uVar6 = *puVar1 & 0xfffbffff;\n      }\n      *puVar1 = uVar6;\n      uVar3 = HAL_GetTick();\n      while (uVar6 = count_leading_zeroes(0x4000), -1 < (int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f))\n      {\n        uVar4 = HAL_GetTick();\n        if (100 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  puVar1 = DAT_08001e70;\n  if ((int)(RCC_OscInitStruct->OscillatorType << 0x1e) < 0) {\n    if (((DAT_08001e70[1] & 0xc) == 0) ||\n       (((DAT_08001e70[1] & 0xc) == 8 && (-1 < (int)(DAT_08001e70[1] << 0xf))))) {\n      uVar6 = count_leading_zeroes(0x40000000);\n      if (((int)((*DAT_08001e70 >> (uVar6 & 0x1f)) << 0x1f) < 0) &&\n         (RCC_OscInitStruct->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      if (RCC_OscInitStruct->HSIState == 0) {\n        iVar5 = count_leading_zeroes(0x80000000);\n        *(undefined4 *)(iVar5 * 4 + 0x42420000) = 0;\n        uVar3 = HAL_GetTick();\n        while (uVar6 = count_leading_zeroes(0x40000000),\n              (int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f) < 0) {\n          uVar4 = HAL_GetTick();\n          if (2 < uVar4 - uVar3) {\n            return HAL_TIMEOUT;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      iVar5 = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(iVar5 * 4 + 0x42420000) = 1;\n      uVar3 = HAL_GetTick();\n      while (uVar6 = count_leading_zeroes(0x40000000),\n            -1 < (int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f)) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    uVar6 = count_leading_zeroes(0x1f000000);\n    *puVar1 = RCC_OscInitStruct->HSICalibrationValue << (uVar6 & 0xff) | *puVar1 & 0xffffff07;\n  }\nLAB_08001b6c:\n  puVar1 = DAT_08001e70;\n  if ((int)(RCC_OscInitStruct->OscillatorType << 0x1c) < 0) {\n    if (RCC_OscInitStruct->LSIState == 0) {\n      iVar5 = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(DAT_08001e74 + iVar5 * 4) = 0;\n      uVar3 = HAL_GetTick();\n      while (uVar6 = count_leading_zeroes(0x40000000),\n            (int)((puVar1[9] >> (uVar6 & 0x1f)) << 0x1f) < 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      iVar5 = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(DAT_08001e74 + iVar5 * 4) = 1;\n      uVar3 = HAL_GetTick();\n      while (uVar6 = count_leading_zeroes(0x40000000),\n            -1 < (int)((puVar1[9] >> (uVar6 & 0x1f)) << 0x1f)) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n      HAL_Delay(1);\n    }\n  }\n  puVar2 = DAT_08001e78;\n  puVar1 = DAT_08001e70;\n  if (-1 < (int)(RCC_OscInitStruct->OscillatorType << 0x1d)) goto LAB_08001bc2;\n  DAT_08001e70[7] = DAT_08001e70[7] | 0x10000000;\n  *puVar2 = *puVar2 | 0x100;\n  uVar3 = HAL_GetTick();\n  while (-1 < (int)(*puVar2 << 0x17)) {\n    uVar4 = HAL_GetTick();\n    if (100 < uVar4 - uVar3) {\n      return HAL_TIMEOUT;\n    }\n  }\n  uVar3 = RCC_OscInitStruct->LSEState;\n  if (uVar3 == 1) {\nLAB_08001e1a:\n    uVar6 = puVar1[8] | 1;\n  }\n  else {\n    if (uVar3 == 0) {\n      puVar1[8] = puVar1[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n      uVar3 = HAL_GetTick();\n      while (uVar6 = count_leading_zeroes(0x40000000),\n            (int)((puVar1[8] >> (uVar6 & 0x1f)) << 0x1f) < 0) {\n        uVar4 = HAL_GetTick();\n        if (5000 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (uVar3 == 5) {\n      puVar1[8] = puVar1[8] | 4;\n      goto LAB_08001e1a;\n    }\n    puVar1[8] = puVar1[8] & 0xfffffffe;\n    uVar6 = puVar1[8] & 0xfffffffb;\n  }\n  puVar1[8] = uVar6;\n  uVar3 = HAL_GetTick();\n  while (uVar6 = count_leading_zeroes(0x40000000), -1 < (int)((puVar1[8] >> (uVar6 & 0x1f)) << 0x1f)\n        ) {\n    uVar4 = HAL_GetTick();\n    if (5000 < uVar4 - uVar3) {\n      return HAL_TIMEOUT;\n    }\n  }\nLAB_08001bc2:\n  puVar1 = DAT_08002004;\n  uVar3 = (RCC_OscInitStruct->PLL).PLLState;\n  if (uVar3 == 0) {\n    return HAL_OK;\n  }\n  if ((DAT_08002004[1] & 0xc) != 8) {\n    if (uVar3 != 2) {\n      iVar5 = count_leading_zeroes(0x80);\n      *(undefined4 *)(iVar5 * 4 + 0x42420000) = 0;\n      uVar3 = HAL_GetTick();\n      do {\n        uVar6 = count_leading_zeroes(0x40);\n        if (-1 < (int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f)) {\n          return HAL_OK;\n        }\n        uVar4 = HAL_GetTick();\n      } while (uVar4 - uVar3 < 3);\n      return HAL_TIMEOUT;\n    }\n    iVar5 = count_leading_zeroes(0x80);\n    *(undefined4 *)(iVar5 * 4 + 0x42420000) = 0;\n    uVar3 = HAL_GetTick();\n    do {\n      uVar6 = count_leading_zeroes(0x40);\n      if (-1 < (int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f)) {\n        uVar6 = (RCC_OscInitStruct->PLL).PLLSource;\n        if (uVar6 == 0x10000) {\n          puVar1[1] = puVar1[1] & 0xfffdffff | RCC_OscInitStruct->HSEPredivValue;\n        }\n        puVar1[1] = uVar6 | (RCC_OscInitStruct->PLL).PLLMUL | puVar1[1] & 0xffc2ffff;\n        iVar5 = count_leading_zeroes(0x80);\n        *(undefined4 *)(iVar5 * 4 + 0x42420000) = 1;\n        uVar3 = HAL_GetTick();\n        do {\n          uVar6 = count_leading_zeroes(0x40);\n          if ((int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f) < 0) {\n            return HAL_OK;\n          }\n          uVar4 = HAL_GetTick();\n        } while (uVar4 - uVar3 < 3);\n        return HAL_TIMEOUT;\n      }\n      uVar4 = HAL_GetTick();\n    } while (uVar4 - uVar3 < 3);\n    return HAL_TIMEOUT;\n  }\n  return HAL_ERROR;\n}\n\n",
            "called": [
                "HAL_Delay",
                "HAL_GetTick"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001b58",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "FUNC_08001b58"
        },
        "FUN_0800290c": {
            "renaming": {
                "FUN_0800290c": "receive_UART_data_0800290c",
                "huart": "uart_handler",
                "uVar1": "parity",
                "pUVar3": "uart_instance",
                "uVar4": "data_word",
                "puVar5": "rx_buffer_ptr",
                "puVar6": "next_rx_buffer_ptr",
                "bVar2": "data_byte",
                "bVar7": "transfer_complete"
            },
            "code": "HAL_StatusTypeDef receive_UART_data_0800290c(UART_HandleTypeDef *uart_handler)\n{\n    uint32_t parity;\n    byte data_byte;\n    USART_TypeDef *uart_instance;\n    uint16_t data_word;\n    ushort *rx_buffer_ptr;\n    ushort *next_rx_buffer_ptr;\n    bool transfer_complete;\n\n    if ((uart_handler->State & 0xef) != 0x22) {\n        return HAL_BUSY;\n    }\n\n    parity = (uart_handler->Init).Parity;\n    uart_instance = uart_handler->Instance;\n    rx_buffer_ptr = (ushort *)uart_handler->pRxBuffPtr;\n\n    if ((uart_handler->Init).WordLength == 0x1000) {\n        if (parity == 0) {\n            next_rx_buffer_ptr = rx_buffer_ptr + 1;\n            *rx_buffer_ptr = (ushort)((uart_instance->DR << 0x17) >> 0x17);\n        }\n        else {\n            next_rx_buffer_ptr = (ushort *)((int)rx_buffer_ptr + 1);\n            *rx_buffer_ptr = (ushort)uart_instance->DR & 0xff;\n        }\n        uart_handler->pRxBuffPtr = (uint8_t *)next_rx_buffer_ptr;\n    }\n    else {\n        if (parity == 0) {\n            data_byte = (byte)uart_instance->DR;\n            uart_handler->pRxBuffPtr = (uint8_t *)((int)rx_buffer_ptr + 1);\n        }\n        else {\n            data_word = uart_instance->DR;\n            uart_handler->pRxBuffPtr = (uint8_t *)((int)rx_buffer_ptr + 1);\n            data_byte = (byte)data_word & 0x7f;\n        }\n        *(byte *)rx_buffer_ptr = data_byte;\n    }\n\n    transfer_complete = false;\n    uart_handler->RxXferCount = uart_handler->RxXferCount - 1;\n    if (uart_handler->RxXferCount == 0) {\n        uart_instance = uart_handler->Instance;\n        uart_instance->CR1 = uart_instance->CR1 & 0xffffffdf;\n        if (uart_handler->State != 0x32) {\n            uart_instance->CR1 = uart_instance->CR1 & 0xfffffeff;\n        }\n        else {\n            uart_instance = (USART_TypeDef *)0x12;\n        }\n        if (uart_handler->State != 0x32) {\n            uart_instance->CR3 = uart_instance->CR3 & 0xfffffffe;\n        }\n        else {\n            uart_instance = (USART_TypeDef *)0x1;\n        }\n        uart_handler->State = (HAL_UART_StateTypeDef)uart_instance;\n        HAL_UART_RxCpltCallback(uart_handler);\n        transfer_complete = true;\n    }\n\n    return transfer_complete ? HAL_OK : HAL_BUSY;\n}",
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800290c",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "receive_UART_data_0800290c"
        },
        "FUN_080028a6": {
            "renaming": {
                "FUN_080028a6": "receive_data_080028a6",
                "*huart": "*uart_handle",
                "*pData": "*data_buffer",
                "Size": "data_size",
                "HVar1": "uart_state",
                "uVar2": "interrupt_enable",
                "*pUVar3": "*uart_instance"
            },
            "code": "HAL_StatusTypeDef receive_data_080028a6(UART_HandleTypeDef *uart_handle, uint8_t *data_buffer, uint16_t data_size) {\n  HAL_UART_StateTypeDef uart_state;\n  uint interrupt_enable;\n  USART_TypeDef *uart_instance;\n  if ((uart_handle->State == HAL_UART_STATE_READY) || (uart_handle->State == HAL_UART_STATE_BUSY_TX)) {\n    if ((data_buffer == NULL) || (data_size == 0)) {\n      return HAL_ERROR;\n    }\n    if (uart_handle->Lock != HAL_LOCKED) {\n      uart_handle->Lock = HAL_LOCKED;\n      uart_handle->ErrorCode = 0;\n      uart_handle->RxXferSize = data_size;\n      uart_handle->RxXferCount = data_size;\n      uart_handle->Lock = HAL_UNLOCKED;\n      if (uart_handle->State == HAL_UART_STATE_BUSY_TX) {\n        uart_state = HAL_UART_STATE_BUSY_TX_RX;\n      }\n      else {\n        uart_state = HAL_UART_STATE_BUSY_RX;\n      }\n      uart_instance = uart_handle->Instance;\n      uart_handle->State = uart_state;\n      interrupt_enable = uart_instance->CR1;\n      uart_handle->pRxBuffPtr = data_buffer;\n      uart_instance->CR1 = interrupt_enable | 0x100;\n      uart_instance->CR3 = uart_instance->CR3 | 1;\n      uart_instance->CR1 = uart_instance->CR1 | 0x20;\n      return HAL_OK;\n    }\n  }\n  return HAL_BUSY;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028a6",
            "calling": [
                "HAL_UART_RxCpltCallback",
                "serialBegin"
            ],
            "imported": false,
            "current_name": "receive_data_080028a6"
        },
        "FUN_0800290a": {
            "renaming": {
                "FUN_0800290a": "do_nothing_0800290a"
            },
            "code": "\nvoid do_nothing_0800290a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800290a",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_0800290a"
        },
        "FUN_08004300": {
            "renaming": {
                "FUN_08004300": "printDataWithChecksum_08004300",
                "code": "checksumKey",
                "data": "data",
                "data_length": "dataLength",
                "ch": "checksum",
                "pbVar1": "dataPtr"
            },
            "code": "void printDataWithChecksum_08004300(uint8_t checksumKey, uint8_t *data, uint16_t dataLength)\n{\n  uint8_t checksum = 0;\n  uint8_t *dataPtr;\n\n  serialPrint(PTR_DAT_08004344);\n  serialWrite((byte)dataLength);\n  checksum = (uint8_t)dataLength ^ checksumKey;\n  serialWrite(checksumKey);\n  for (dataPtr = data; dataPtr < data + dataLength; dataPtr++) {\n    serialWrite(*dataPtr);\n    checksum ^= *dataPtr;\n  }\n  serialWrite(checksum);\n  return;\n}",
            "called": [
                "serialPrint",
                "serialWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004300",
            "calling": [
                "MSP_SendStatus",
                "MSP_SendPID",
                "MSP_SendAltitude",
                "MSP_SendAttitude",
                "MSP_SendRawIMU",
                "MSP_SendMotor",
                "MSP_SendIdent"
            ],
            "imported": false,
            "current_name": "printDataWithChecksum_08004300"
        },
        "FUN_08005630": {
            "renaming": {
                "FUN_08005630": "copy_memory_08005630",
                "__dest": "destination",
                "__src": "source",
                "__n": "num_bytes",
                "puVar1": "src_end",
                "puVar2": "dest_end"
            },
            "code": "void * copy_memory_08005630(void *destination, const void *source, size_t num_bytes) {\n  unsigned char *dest = (unsigned char *)destination;\n  const unsigned char *src = (const unsigned char *)source;\n  for (size_t i = 0; i < num_bytes; i++) {\n    dest[i] = src[i];\n  }\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005630",
            "calling": [
                "__ssputs_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "copy_memory_08005630"
        },
        "FUN_08003330": {
            "renaming": {
                "FUN_08003330": "FUNC_08003330"
            },
            "code": "\nvoid FUNC_08003330\n               (float ax,float ay,float az,float gx,float gy,float gz,float mx,float my,float mz,\n               float *angle)\n\n{\n  undefined *puVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  int iVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  int iVar9;\n  undefined4 uVar10;\n  undefined4 uVar11;\n  undefined4 uVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  undefined4 uVar15;\n  undefined4 uVar16;\n  undefined4 uVar17;\n  undefined4 uVar18;\n  undefined4 uVar19;\n  int iVar20;\n  undefined4 uVar21;\n  undefined4 uVar22;\n  undefined4 uVar23;\n  undefined4 uVar24;\n  undefined4 uVar25;\n  undefined4 uVar26;\n  int iVar27;\n  undefined4 in_r2;\n  undefined4 uVar28;\n  int iVar29;\n  undefined4 uVar30;\n  undefined4 uVar31;\n  undefined8 uVar32;\n  undefined8 uVar33;\n  undefined4 in_stack_00000000;\n  undefined4 in_stack_00000004;\n  undefined4 in_stack_00000008;\n  undefined4 in_stack_0000000c;\n  undefined4 in_stack_00000010;\n  undefined4 *in_stack_00000014;\n  undefined4 in_stack_ffffff78;\n  float hy;\n  float hx;\n  \n  uVar28 = *(undefined4 *)PTR_q_080035d8;\n  iVar29 = *(int *)(PTR_q_080035d8 + 4);\n  uVar31 = *(undefined4 *)(PTR_q_080035d8 + 8);\n  uVar30 = *(undefined4 *)(PTR_q_080035d8 + 0xc);\n  uVar2 = __aeabi_fmul(ax,mz,mz);\n  uVar3 = __aeabi_fmul(angle);\n  uVar2 = __addsf3(uVar2,uVar3);\n  uVar3 = __aeabi_fmul(in_r2);\n  __addsf3(uVar2,uVar3);\n  __aeabi_f2d();\n  sqrt((double)CONCAT44(iVar29,in_stack_ffffff78));\n  uVar2 = __truncdfsf2();\n  iVar4 = __aeabi_fcmpeq(uVar2,0);\n  if (iVar4 == 0) {\n    uVar3 = __aeabi_fmul(in_stack_00000008);\n    uVar5 = __aeabi_fmul(in_stack_0000000c);\n    uVar3 = __addsf3(uVar3,uVar5);\n    uVar5 = __aeabi_fmul(in_stack_00000010);\n    __addsf3(uVar3,uVar5);\n    __aeabi_f2d();\n    sqrt((double)CONCAT44(iVar29,in_stack_ffffff78));\n    uVar3 = __truncdfsf2();\n    iVar4 = __aeabi_fcmpeq(uVar3,0);\n    if (iVar4 == 0) {\n      uVar32 = __aeabi_f2d();\n      __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar5 = __truncdfsf2();\n      uVar32 = __aeabi_f2d(in_stack_00000000);\n      __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar6 = __truncdfsf2();\n      uVar32 = __aeabi_f2d(in_stack_00000004);\n      __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar7 = __truncdfsf2();\n      iVar4 = __addsf3(uVar28);\n      uVar8 = __addsf3(iVar29);\n      iVar9 = __addsf3(uVar31,uVar31);\n      uVar10 = __addsf3(uVar30,uVar30);\n      uVar11 = __aeabi_fmul(uVar28);\n      uVar12 = __aeabi_fmul(uVar28,iVar29);\n      uVar13 = __aeabi_fmul(uVar28,uVar31);\n      uVar14 = __aeabi_fmul(iVar29);\n      uVar15 = __aeabi_fmul(iVar29,uVar30);\n      uVar16 = __aeabi_fmul(uVar31,uVar31);\n      uVar17 = __aeabi_fmul(uVar30,uVar30);\n      uVar2 = __aeabi_fdiv(0x3f800000,uVar2);\n      uVar3 = __aeabi_fdiv(0x3f800000,uVar3);\n      uVar18 = __aeabi_fmul(in_stack_00000008,uVar3);\n      uVar19 = __aeabi_fmul(in_stack_0000000c,uVar3);\n      uVar3 = __aeabi_fmul(in_stack_00000010,uVar3);\n      iVar20 = __aeabi_fmul(iVar4,uVar18);\n      uVar21 = __aeabi_fmul(iVar4,uVar19);\n      uVar22 = __aeabi_fmul(iVar4,uVar3);\n      uVar23 = __aeabi_fmul(uVar8,uVar18);\n      uVar24 = __aeabi_fmul(uVar11,uVar18);\n      uVar25 = __aeabi_fmul(uVar30,uVar21);\n      uVar24 = __aeabi_fsub(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar31,uVar22);\n      uVar24 = __addsf3(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar14,uVar18);\n      uVar24 = __addsf3(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar8,uVar19);\n      uVar25 = __aeabi_fmul(uVar25,uVar31);\n      uVar24 = __addsf3(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar8,uVar3);\n      uVar25 = __aeabi_fmul(uVar25,uVar30);\n      uVar24 = __addsf3(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar16,uVar18);\n      uVar24 = __aeabi_fsub(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar17,uVar18);\n      uVar24 = __aeabi_fsub(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar30,iVar20);\n      uVar26 = __aeabi_fmul(uVar11,uVar19);\n      uVar25 = __addsf3(uVar25,uVar26);\n      uVar22 = __aeabi_fmul(iVar29,uVar22);\n      uVar22 = __aeabi_fsub(uVar25,uVar22);\n      uVar25 = __aeabi_fmul(uVar31,uVar23);\n      uVar22 = __addsf3(uVar22,uVar25);\n      uVar25 = __aeabi_fmul(uVar14,uVar19);\n      uVar22 = __aeabi_fsub(uVar22,uVar25);\n      uVar25 = __aeabi_fmul(uVar16,uVar19);\n      uVar22 = __addsf3(uVar22,uVar25);\n      uVar25 = __aeabi_fmul(iVar9,uVar3);\n      uVar25 = __aeabi_fmul(uVar25,uVar30);\n      uVar22 = __addsf3(uVar22,uVar25);\n      uVar25 = __aeabi_fmul(uVar17,uVar19);\n      uVar22 = __aeabi_fsub(uVar22,uVar25);\n      uVar24 = __aeabi_fmul(uVar24,uVar24);\n      uVar22 = __aeabi_fmul(uVar22,uVar22);\n      __addsf3(uVar24,uVar22);\n      __aeabi_f2d();\n      sqrt((double)CONCAT44(iVar29,in_stack_ffffff78));\n      iVar27 = __truncdfsf2();\n      uVar22 = __aeabi_fmul(iVar20 + -0x80000000,uVar31);\n      uVar21 = __aeabi_fmul(iVar29,uVar21);\n      uVar21 = __addsf3(uVar22,uVar21);\n      uVar11 = __aeabi_fmul(uVar11,uVar3);\n      uVar11 = __addsf3(uVar21,uVar11);\n      uVar21 = __aeabi_fmul(uVar30,uVar23);\n      uVar11 = __addsf3(uVar11,uVar21);\n      uVar21 = __aeabi_fmul(uVar14,uVar3);\n      uVar11 = __aeabi_fsub(uVar11,uVar21);\n      uVar21 = __aeabi_fmul(iVar9,uVar19);\n      uVar21 = __aeabi_fmul(uVar21,uVar30);\n      uVar11 = __addsf3(uVar11,uVar21);\n      uVar21 = __aeabi_fmul(uVar16,uVar3);\n      uVar11 = __aeabi_fsub(uVar11,uVar21);\n      uVar21 = __aeabi_fmul(uVar17,uVar3);\n      uVar11 = __addsf3(uVar11,uVar21);\n      uVar21 = __addsf3(uVar11,uVar11);\n      uVar22 = __addsf3(uVar15);\n      uVar23 = __aeabi_fmul(uVar31,iVar4);\n      uVar22 = __aeabi_fsub(uVar22,uVar23);\n      uVar23 = __aeabi_fmul(mz,uVar2);\n      uVar22 = __aeabi_fsub(uVar22,uVar23);\n      uVar23 = __aeabi_fmul(uVar30,iVar9);\n      uVar24 = __addsf3(uVar12);\n      uVar23 = __addsf3(uVar23,uVar24);\n      uVar24 = __aeabi_fmul(angle,uVar2);\n      uVar23 = __aeabi_fsub(uVar23,uVar24);\n      uVar24 = __aeabi_fmul(uVar31,uVar11);\n      uVar25 = __aeabi_fsub(0x3f000000,uVar16);\n      uVar17 = __aeabi_fsub(uVar25,uVar17);\n      uVar17 = __aeabi_fmul(uVar17,iVar27);\n      uVar25 = __aeabi_fsub(uVar15,uVar13);\n      uVar25 = __aeabi_fmul(uVar25,uVar11);\n      uVar17 = __addsf3(uVar17,uVar25);\n      uVar17 = __aeabi_fsub(uVar17,uVar18);\n      uVar18 = __aeabi_fmul(iVar29,uVar11);\n      uVar25 = __aeabi_fmul(iVar29,uVar31);\n      uVar26 = __aeabi_fmul(uVar28,uVar30);\n      uVar25 = __aeabi_fsub(uVar25,uVar26);\n      uVar25 = __aeabi_fmul(uVar25,iVar27);\n      uVar26 = __aeabi_fmul(uVar31,uVar30);\n      uVar12 = __addsf3(uVar26,uVar12);\n      uVar12 = __aeabi_fmul(uVar12,uVar11);\n      uVar12 = __addsf3(uVar25,uVar12);\n      uVar12 = __aeabi_fsub(uVar12,uVar19);\n      uVar19 = __aeabi_fmul(uVar31,iVar27);\n      uVar25 = __aeabi_fsub(0x3f000000,uVar14);\n      uVar25 = __aeabi_fsub(uVar25,uVar16);\n      uVar25 = __aeabi_fmul(uVar25,uVar11);\n      uVar13 = __addsf3(uVar13,uVar15);\n      uVar13 = __aeabi_fmul(uVar13,iVar27);\n      uVar13 = __addsf3(uVar25,uVar13);\n      uVar3 = __aeabi_fsub(uVar13,uVar3);\n      uVar13 = __aeabi_fmul(iVar9 + -0x80000000,uVar22);\n      uVar15 = __aeabi_fmul(uVar8,uVar23);\n      uVar13 = __addsf3(uVar13,uVar15);\n      uVar15 = __aeabi_fmul(uVar24,uVar17);\n      uVar13 = __aeabi_fsub(uVar13,uVar15);\n      uVar15 = __aeabi_fmul(uVar30,iVar27 + -0x80000000);\n      uVar15 = __addsf3(uVar15,uVar18);\n      uVar15 = __aeabi_fmul(uVar15,uVar12);\n      uVar13 = __addsf3(uVar13,uVar15);\n      uVar15 = __aeabi_fmul(uVar19,uVar3);\n      uVar13 = __addsf3(uVar13,uVar15);\n      uVar14 = __addsf3(uVar14);\n      uVar14 = __aeabi_fsub(0x3f800000,uVar14);\n      uVar15 = __addsf3(uVar16);\n      uVar14 = __aeabi_fsub(uVar14,uVar15);\n      uVar2 = __aeabi_fmul(in_r2,uVar2);\n      uVar2 = __aeabi_fsub(uVar14,uVar2);\n      uVar14 = __aeabi_fmul(uVar30,uVar11);\n      uVar11 = __aeabi_fmul(uVar28,uVar11);\n      uVar15 = __aeabi_fmul(uVar10,uVar22);\n      uVar16 = __aeabi_fmul(iVar4,uVar23);\n      uVar15 = __addsf3(uVar15,uVar16);\n      uVar16 = __aeabi_fmul(iVar29,0x40800000);\n      uVar16 = __aeabi_fmul(uVar16,uVar2);\n      uVar15 = __aeabi_fsub(uVar15,uVar16);\n      uVar16 = __aeabi_fmul(uVar17,uVar14);\n      uVar15 = __addsf3(uVar15,uVar16);\n      uVar16 = __addsf3(uVar19,uVar11);\n      uVar16 = __aeabi_fmul(uVar16,uVar12);\n      uVar15 = __addsf3(uVar15,uVar16);\n      uVar16 = __aeabi_fmul(uVar30,iVar27);\n      uVar19 = __aeabi_fmul(iVar29,uVar21);\n      uVar16 = __aeabi_fsub(uVar16,uVar19);\n      uVar16 = __aeabi_fmul(uVar16,uVar3);\n      uVar15 = __addsf3(uVar15,uVar16);\n      iVar20 = __addsf3(iVar27,iVar27);\n      uVar16 = __aeabi_fmul(iVar29,iVar27);\n      uVar19 = __aeabi_fmul(iVar4 + -0x80000000,uVar22);\n      uVar10 = __aeabi_fmul(uVar10,uVar23);\n      uVar10 = __addsf3(uVar19,uVar10);\n      uVar19 = __aeabi_fmul(uVar31,0x40800000);\n      uVar2 = __aeabi_fmul(uVar19,uVar2);\n      uVar2 = __aeabi_fsub(uVar10,uVar2);\n      uVar10 = __aeabi_fmul(uVar31,iVar20 + -0x80000000);\n      uVar10 = __aeabi_fsub(uVar10,uVar11);\n      uVar10 = __aeabi_fmul(uVar10,uVar17);\n      uVar2 = __addsf3(uVar2,uVar10);\n      uVar10 = __addsf3(uVar14,uVar16);\n      uVar10 = __aeabi_fmul(uVar10,uVar12);\n      uVar2 = __addsf3(uVar2,uVar10);\n      uVar10 = __aeabi_fmul(uVar28,iVar27);\n      uVar11 = __aeabi_fmul(uVar31,uVar21);\n      uVar10 = __aeabi_fsub(uVar10,uVar11);\n      uVar10 = __aeabi_fmul(uVar10,uVar3);\n      uVar2 = __addsf3(uVar2,uVar10);\n      uVar8 = __aeabi_fmul(uVar8,uVar22);\n      uVar10 = __aeabi_fmul(iVar9,uVar23);\n      uVar8 = __addsf3(uVar8,uVar10);\n      uVar10 = __aeabi_fmul(uVar30,iVar20 + -0x80000000);\n      uVar10 = __addsf3(uVar10,uVar18);\n      uVar10 = __aeabi_fmul(uVar10,uVar17);\n      uVar8 = __addsf3(uVar8,uVar10);\n      uVar10 = __aeabi_fmul(uVar28,iVar27 + -0x80000000);\n      uVar10 = __addsf3(uVar10,uVar24);\n      uVar10 = __aeabi_fmul(uVar10,uVar12);\n      uVar8 = __addsf3(uVar8,uVar10);\n      uVar3 = __aeabi_fmul(uVar3,uVar16);\n      uVar3 = __addsf3(uVar8,uVar3);\n      uVar8 = __aeabi_fmul(uVar13);\n      uVar10 = __aeabi_fmul(uVar15);\n      uVar8 = __addsf3(uVar8,uVar10);\n      uVar10 = __aeabi_fmul(uVar2,uVar2);\n      uVar8 = __addsf3(uVar8,uVar10);\n      uVar10 = __aeabi_fmul(uVar3,uVar3);\n      __addsf3(uVar8,uVar10);\n      __aeabi_f2d();\n      sqrt((double)CONCAT44(iVar29,in_stack_ffffff78));\n      uVar8 = __truncdfsf2();\n      uVar8 = __aeabi_fdiv(0x3f800000,uVar8);\n      puVar1 = PTR_deltat_08003d84;\n      uVar12 = *(undefined4 *)PTR_beta_08003d80;\n      uVar14 = *(undefined4 *)PTR_beta_08003d80;\n      uVar16 = *(undefined4 *)PTR_beta_08003d80;\n      uVar17 = *(undefined4 *)PTR_beta_08003d80;\n      uVar10 = __aeabi_fmul(iVar29 + -0x80000000,uVar5);\n      uVar11 = __aeabi_fmul(uVar31,uVar6);\n      uVar10 = __aeabi_fsub(uVar10,uVar11);\n      uVar11 = __aeabi_fmul(uVar30,uVar7);\n      uVar10 = __aeabi_fsub(uVar10,uVar11);\n      uVar10 = __aeabi_fmul(uVar10,0x3f000000);\n      uVar11 = __aeabi_fmul(uVar13,uVar8);\n      uVar13 = *(undefined4 *)puVar1;\n      uVar11 = __aeabi_fmul(uVar11,uVar12);\n      uVar10 = __aeabi_fsub(uVar10,uVar11);\n      uVar10 = __aeabi_fmul(uVar10,uVar13);\n      uVar10 = __addsf3(uVar10,uVar28);\n      uVar11 = __aeabi_fmul(uVar28,uVar5);\n      uVar12 = __aeabi_fmul(uVar31,uVar7);\n      uVar13 = *(undefined4 *)puVar1;\n      uVar11 = __addsf3(uVar11,uVar12);\n      uVar12 = __aeabi_fmul(uVar30,uVar6);\n      uVar11 = __aeabi_fsub(uVar11,uVar12);\n      uVar11 = __aeabi_fmul(uVar11,0x3f000000);\n      uVar12 = __aeabi_fmul(uVar15,uVar8);\n      uVar12 = __aeabi_fmul(uVar12,uVar14);\n      uVar11 = __aeabi_fsub(uVar11,uVar12);\n      uVar11 = __aeabi_fmul(uVar11,uVar13);\n      uVar11 = __addsf3(uVar11,iVar29);\n      uVar14 = *(undefined4 *)puVar1;\n      uVar12 = __aeabi_fmul(uVar28,uVar6);\n      uVar13 = __aeabi_fmul(iVar29,uVar7);\n      uVar12 = __aeabi_fsub(uVar12,uVar13);\n      uVar13 = __aeabi_fmul(uVar30,uVar5);\n      uVar12 = __addsf3(uVar12,uVar13);\n      uVar12 = __aeabi_fmul(uVar12,0x3f000000);\n      uVar2 = __aeabi_fmul(uVar2,uVar8);\n      uVar2 = __aeabi_fmul(uVar2,uVar16);\n      uVar2 = __aeabi_fsub(uVar12,uVar2);\n      uVar2 = __aeabi_fmul(uVar2,uVar14);\n      uVar2 = __addsf3(uVar2,uVar31);\n      uVar28 = __aeabi_fmul(uVar28,uVar7);\n      uVar6 = __aeabi_fmul(iVar29,uVar6);\n      uVar28 = __addsf3(uVar28,uVar6);\n      uVar31 = __aeabi_fmul(uVar31,uVar5);\n      uVar31 = __aeabi_fsub(uVar28,uVar31);\n      uVar31 = __aeabi_fmul(uVar31,0x3f000000);\n      uVar3 = __aeabi_fmul(uVar3,uVar8);\n      uVar3 = __aeabi_fmul(uVar3,uVar17);\n      uVar5 = *(undefined4 *)puVar1;\n      uVar3 = __aeabi_fsub(uVar31,uVar3);\n      uVar3 = __aeabi_fmul(uVar3,uVar5);\n      uVar3 = __addsf3(uVar3,uVar30);\n      uVar30 = __aeabi_fmul(uVar10,uVar10);\n      uVar31 = __aeabi_fmul(uVar11,uVar11);\n      uVar30 = __addsf3(uVar30,uVar31);\n      uVar31 = __aeabi_fmul(uVar2,uVar2);\n      uVar30 = __addsf3(uVar30,uVar31);\n      uVar31 = __aeabi_fmul(uVar3,uVar3);\n      __addsf3(uVar30,uVar31);\n      __aeabi_f2d();\n      sqrt((double)CONCAT44(uVar28,in_stack_ffffff78));\n      uVar30 = __truncdfsf2();\n      uVar30 = __aeabi_fdiv(0x3f800000,uVar30);\n      uVar31 = __aeabi_fmul(uVar10,uVar30);\n      puVar1 = PTR_q_08003d88;\n      *(undefined4 *)PTR_q_08003d88 = uVar31;\n      uVar5 = __aeabi_fmul(uVar11,uVar30);\n      *(undefined4 *)(puVar1 + 4) = uVar5;\n      uVar2 = __aeabi_fmul(uVar2,uVar30);\n      *(undefined4 *)(puVar1 + 8) = uVar2;\n      uVar3 = __aeabi_fmul(uVar3,uVar30);\n      *(undefined4 *)(puVar1 + 0xc) = uVar3;\n      uVar3 = __aeabi_fmul(uVar5,uVar3);\n      uVar2 = __aeabi_fmul(uVar31,uVar2);\n      uVar2 = __aeabi_fsub(uVar3,uVar2);\n      __addsf3(uVar2,uVar2);\n      __aeabi_f2d();\n      asin((double)CONCAT44(uVar28,in_stack_ffffff78));\n      uVar32 = __muldf3();\n      __divdf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003d78,DAT_08003d7c);\n      uVar2 = __truncdfsf2();\n      *in_stack_00000014 = uVar2;\n      uVar31 = *(undefined4 *)puVar1;\n      uVar5 = *(undefined4 *)(puVar1 + 4);\n      uVar2 = __aeabi_fmul(uVar31,uVar31);\n      uVar3 = __aeabi_fmul(uVar5,uVar5);\n      uVar2 = __aeabi_fsub(uVar2,uVar3);\n      uVar28 = *(undefined4 *)(puVar1 + 8);\n      uVar3 = __aeabi_fmul(uVar28,uVar28);\n      uVar2 = __aeabi_fsub(uVar2,uVar3);\n      uVar30 = *(undefined4 *)(puVar1 + 0xc);\n      uVar3 = __aeabi_fmul(uVar30,uVar30);\n      __addsf3(uVar2,uVar3);\n      uVar32 = __aeabi_f2d();\n      uVar2 = __aeabi_fmul(uVar31,uVar5);\n      uVar3 = __aeabi_fmul(uVar28,uVar30);\n      uVar2 = __addsf3(uVar2,uVar3);\n      __addsf3(uVar2,uVar2);\n      uVar33 = __aeabi_f2d();\n      uVar32 = atan2((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar32,\n                     (int)((ulonglong)uVar32 >> 0x20));\n      uVar32 = __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_08003ea8);\n      __divdf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003ea0,DAT_08003ea4);\n      uVar2 = __truncdfsf2();\n      in_stack_00000014[1] = uVar2;\n      uVar30 = *(undefined4 *)puVar1;\n      uVar31 = *(undefined4 *)(puVar1 + 4);\n      uVar2 = __aeabi_fmul(uVar30,uVar30);\n      uVar3 = __aeabi_fmul(uVar31,uVar31);\n      uVar2 = __addsf3(uVar2,uVar3);\n      uVar5 = *(undefined4 *)(puVar1 + 8);\n      uVar3 = __aeabi_fmul(uVar5,uVar5);\n      uVar2 = __aeabi_fsub(uVar2,uVar3);\n      uVar28 = *(undefined4 *)(puVar1 + 0xc);\n      uVar3 = __aeabi_fmul(uVar28,uVar28);\n      __aeabi_fsub(uVar2,uVar3);\n      uVar32 = __aeabi_f2d();\n      uVar2 = __aeabi_fmul(uVar31,uVar5);\n      uVar3 = __aeabi_fmul(uVar30,uVar28);\n      uVar2 = __addsf3(uVar2,uVar3);\n      __addsf3(uVar2,uVar2);\n      uVar33 = __aeabi_f2d();\n      uVar32 = atan2((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar32,\n                     (int)((ulonglong)uVar32 >> 0x20));\n      uVar32 = __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_08003ea8);\n      __divdf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003ea0,DAT_08003ea4);\n      uVar2 = __truncdfsf2();\n      in_stack_00000014[2] = uVar2;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "asin",
                "__aeabi_fmul",
                "__divdf3",
                "__addsf3",
                "__muldf3",
                "sqrt",
                "__aeabi_fsub",
                "__aeabi_f2d",
                "__aeabi_fdiv",
                "__truncdfsf2",
                "atan2",
                "__aeabi_fcmpeq"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003330",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "FUNC_08003330"
        },
        "FUN_08000980": {
            "renaming": {
                "FUN_08000980": "compare_double_values_08000980",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "result1",
                "param_4": "result2"
            },
            "code": "void compare_double_values_08000980(double value1, double value2, double* result1, double* result2){\n  __aeabi_cdcmpeq(value1, value2, *result1, *result2);\n  return;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000980",
            "calling": [
                "__aeabi_dcmpgt",
                "__aeabi_dcmpge"
            ],
            "imported": false,
            "current_name": "compare_double_values_08000980"
        },
        "FUN_08002368": {
            "renaming": {
                "FUN_08002368": "set_timer_08002368",
                "TIMx": "timer",
                "Structure": "init_struct",
                "uVar1": "cr1",
                "pTVar2": "repetition_timer",
                "DAT_080023cc": "timer1"
            },
            "code": "void set_timer_08002368(TIM_TypeDef *timer, TIM_Base_InitTypeDef *init_struct)\n{\n  uint32_t cr1 = timer->CR1;\n  if ((((timer == DAT_080023cc) || (timer == timer2)) ||\n      (timer == (TIM_TypeDef *)&DAT_080023cc[-0x387].DMAR)) ||\n     (timer == (TIM_TypeDef *)&DAT_080023cc[-0x37a].SMCR)) {\n    cr1 = cr1 & 0xffffff8f | init_struct->CounterMode;\n    if (((timer == DAT_080023cc) || (timer == timer2)) ||\n       ((timer == (TIM_TypeDef *)&DAT_080023cc[-0x387].DMAR ||\n        (timer == (TIM_TypeDef *)&DAT_080023cc[-0x37a].SMCR)))) {\n      cr1 = cr1 & 0xfffffcff | init_struct->ClockDivision;\n    }\n  }\n  timer->CR1 = cr1;\n  timer->ARR = init_struct->Period;\n  timer->PSC = init_struct->Prescaler;\n  TIM_TypeDef *repetition_timer = DAT_080023cc;\n  if (timer == DAT_080023cc) {\n    repetition_timer = (TIM_TypeDef *)init_struct->RepetitionCounter;\n  }\n  if (timer == DAT_080023cc) {\n    timer->RCR = (uint32_t)repetition_timer;\n  }\n  timer->EGR = 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002368",
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "imported": false,
            "current_name": "set_timer_08002368"
        },
        "FUN_08002008": {
            "renaming": {
                "FUN_08002008": "calculate_PLL_multiplier_08002008",
                "uVar1": "reg1",
                "uVar2": "result",
                "uVar3": "reg2",
                "uVar4": "reg3",
                "uVar5": "shift",
                "uVar6": "temp",
                "puVar7": "PLL_MUL_table_ptr",
                "puVar8": "PLL_MUL_factors_ptr",
                "aPredivFactorTable": "prediv_factors",
                "aPLLMULFactorTable": "PLL_MUL_factors",
                "PTR_DAT_0800208c": "0x0800208c",
                "DAT_08002090": "0x08002090",
                "DAT_08002094": "0x08002094",
                "DAT_08002098": "0x08002098"
            },
            "code": "uint32_t calculate_PLL_multiplier_08002008(void)\n{\n    uint32_t PLL_MUL_factors[16];\n    uint32_t prediv_factors[2] = {1, 2};\n    uint32_t reg1 = *(uint32_t *)(DAT_08002090 + 4);\n    uint32_t result = 0;\n    uint32_t reg2 = 0;\n    uint32_t shift = 0;\n    uint32_t mask = 0x3C0000;\n\n    for (int i = 0; i < 16; i += 2) {\n        PLL_MUL_factors[i] = *(uint32_t *)(PTR_DAT_0800208c + i);\n        PLL_MUL_factors[i + 1] = *(uint32_t *)(PTR_DAT_0800208c + i + 4);\n    }\n\n    if ((reg1 & 0xC) == 8) {\n        shift = count_leading_zeroes(0x3C00);\n        if ((int)(reg1 << 0xF) < 0) {\n            reg2 = count_leading_zeroes(0x4000);\n            reg2 = DAT_08002094 / prediv_factors[((reg1 & 0x20000) >> reg2) & 0x01];\n        }\n        result = reg2 * PLL_MUL_factors[(reg1 & mask) >> shift];\n    }\n    return result;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002008",
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "calculate_PLL_multiplier_08002008"
        },
        "FUN_080008fc": {
            "renaming": {
                "FUN_080008fc": "CheckInputs_080008fc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4RightShifted",
                "uVar1": "input2XORinput4",
                "bVar2": "isInput2Negative",
                "bVar3": "isInput4Negative",
                "result": "result"
            },
            "code": "uint CheckInputs_080008fc(uint input1, uint input2, uint input3, uint input4)\n{\n  uint result;\n  bool isInput2Negative;\n  bool isInput4Negative;\n  \n  isInput2Negative = ((int)(input2 << 1) >> 0x15 == -1);\n  isInput4Negative = ((int)(input4 << 1) >> 0x15 == -1);\n  \n  if (isInput2Negative || isInput4Negative)\n  {\n    if ((isInput2Negative && ((input1 | input2 << 0xc) != 0)) || (isInput4Negative && ((input3 | input4 << 0xc) != 0)))\n    {\n      result = 1;\n    }\n    else\n    {\n      result = 0;\n    }\n  }\n  else if ((input1 | input2 << 1) == 0 && (input3 | input4 << 1) == 0)\n  {\n    result = 0;\n  }\n  else if (input2 == input4 && input1 == input3)\n  {\n    result = 0;\n  }\n  else\n  {\n    uint input2XORinput4 = input2 ^ input4;\n    bool isInput2XORinput4Positive = (-1 < (int)input2XORinput4);\n    bool isInput4LessThanEqualInput2 = (input4 <= input2);\n    bool isInput3LessThanEqualInput1 = (input3 <= input1);\n    \n    if (input2XORinput4 == 0)\n    {\n      if (input2 == input4)\n      {\n        isInput3LessThanEqualInput1 = true;\n      }\n    }\n    \n    if (!isInput2XORinput4Positive || isInput4LessThanEqualInput2)\n    {\n      result = 0;\n    }\n    else if (isInput2XORinput4Positive && !isInput3LessThanEqualInput1)\n    {\n      result = 1;\n    }\n    else\n    {\n      result = 0;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008fc",
            "calling": [],
            "imported": false,
            "current_name": "CheckInputs_080008fc"
        },
        "FUN_0800114c": {
            "renaming": {
                "FUN_0800114c": "increment_uwTick_0800114c",
                "PTR_uwTick_08001158": "uwTick_ptr"
            },
            "code": "void increment_uwTick_0800114c(void)\n{\n    int* PTR_uwTick_08001158 = (int*)PTR_uwTick_08001158;\n    *PTR_uwTick_08001158 = *PTR_uwTick_08001158 + 1;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800114c",
            "calling": [
                "main",
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "increment_uwTick_0800114c"
        },
        "FUN_08002250": {
            "renaming": {
                "FUN_08002250": "calculate_APB_prescaler_08002250",
                "PTR_SystemCoreClock_0800227c": "system_core_clock_ptr",
                "PTR_APBPrescTable_08002278": "apb_prescaler_table_ptr",
                "DAT_08002274": "apb1_peripheral_ptr",
                "count_leading_zeroes": "count_leading_zeroes",
                "uVar1": "leading_zeroes_count",
                "system_core_clock": "system_core_clock",
                "apb_prescaler_index": "apb_prescaler_index",
                "apb_prescaler_value": "apb_prescaler_value"
            },
            "code": "uint32_t calculate_APB_prescaler_08002250(void)\n{\n    uint32_t leading_zeroes_count = count_leading_zeroes(0x1c0000);\n    uint32_t system_core_clock = *(uint32_t *)PTR_SystemCoreClock_0800227c;\n    uint32_t apb_prescaler_index = (*(uint32_t *)(DAT_08002274 + 4) & 0x3800) >> (leading_zeroes_count & 0xff);\n    uint32_t apb_prescaler_value = PTR_APBPrescTable_08002278[apb_prescaler_index];\n    return system_core_clock >> apb_prescaler_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002250",
            "calling": [
                "UART_SetConfig"
            ],
            "imported": false,
            "current_name": "calculate_APB_prescaler_08002250"
        },
        "FUN_080011fc": {
            "renaming": {
                "FUN_080011fc": "set_interrupt_priority_080011fc",
                "IRQn": "interrupt_number",
                "DAT_08001210": "interrupt_priority_register_base_address"
            },
            "code": "void set_interrupt_priority_080011fc(IRQn_Type interrupt_number)\n{\n    uint32_t* interrupt_priority_register_address = (uint32_t*)(DAT_08001210 + ((uint32_t)interrupt_number >> 5) * 4);\n    uint32_t interrupt_priority_bit = 1 << ((uint32_t)interrupt_number & 0x1fU);\n    *interrupt_priority_register_address = interrupt_priority_bit;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011fc",
            "calling": [
                "HAL_UART_MspInit"
            ],
            "imported": false,
            "current_name": "set_interrupt_priority_080011fc"
        },
        "FUN_08003f7c": {
            "renaming": {
                "FUN_08003f7c": "blinkLEDs_08003f7c",
                "iVar1": "blinkCount"
            },
            "code": "void blinkLEDs_08003f7c(void)\n{\n  int blinkCount = 3;\n  do {\n    toggleLED(1,0,0);\n    delay_ms(100);\n    toggleLED(0,1,0);\n    delay_ms(100);\n    toggleLED(0,0,1);\n    delay_ms(100);\n    blinkCount--;\n  } while (blinkCount > 0);\n  toggleLED(1,1,1);\n  return;\n}",
            "called": [
                "toggleLED",
                "delay_ms"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f7c",
            "calling": [
                "Devices_Init"
            ],
            "imported": false,
            "current_name": "blinkLEDs_08003f7c"
        },
        "FUN_08005646": {
            "renaming": {
                "FUN_08005646": "reverse_copy_08005646",
                "__dest": "destination",
                "__src": "source",
                "__n": "num_bytes",
                "puVar1": "dst",
                "iVar2": "remaining_bytes",
                "puVar3": "src"
            },
            "code": "void *reverse_copy_08005646(void *destination, const void *source, size_t num_bytes) {\n    unsigned char *src = (unsigned char *)source + num_bytes;\n    unsigned char *dst = (unsigned char *)destination + num_bytes;\n\n    if ((source < destination) && (destination < src)) {\n        num_bytes -= src - (unsigned char *)destination;\n        while (src + num_bytes != NULL) {\n            src--;\n            dst--;\n            *dst = *src;\n        }\n    } else {\n        for (; (unsigned char *)source != src; source++) {\n            *dst++ = *(unsigned char *)source;\n        }\n    }\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005646",
            "calling": [
                "__ssputs_r"
            ],
            "imported": false,
            "current_name": "reverse_copy_08005646"
        },
        "FUN_08000990": {
            "renaming": {
                "FUN_08000990": "convert_double_to_float_08000990",
                "param_1": "double_value"
            },
            "code": "undefined4 convert_double_to_float_08000990(undefined4 double_value)\n{\n  __nedf2();\n  return double_value;\n}",
            "called": [
                "__nedf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000990",
            "calling": [
                "__aeabi_dcmple",
                "__aeabi_cdrcmple",
                "__aeabi_dcmplt",
                "__aeabi_dcmpeq"
            ],
            "imported": false,
            "current_name": "convert_double_to_float_08000990"
        },
        "FUN_08004ee6": {
            "renaming": {
                "FUN_08004ee6": "wait_forever_08004ee6"
            },
            "code": "void wait_forever_08004ee6(void)\n{\n  while( true )\n  {\n    // Do nothing\n  }\n}",
            "called": [
                "HardFault_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee6",
            "calling": [
                "HardFault_Handler"
            ],
            "imported": false,
            "current_name": "wait_forever_08004ee6"
        },
        "FUN_08004434": {
            "renaming": {
                "FUN_08004434": "send_altitude_08004434",
                "in_r1": "altitude_frame",
                "local_10": "altitude",
                "local_c": "altitude_packet"
            },
            "code": "void send_altitude_08004434(void)\n{\n  uint16_t altitude;\n  uint32_t altitude_frame;\n  altitude = *(uint16_t *)PTR_msp_txf_altitude_08004454;\n  altitude_frame = (uint32_t)((uint32_t)altitude << 16) | altitude;\n  MSP_SendFrame('m', (uint8_t *)&altitude_frame, 6);\n  return;\n}",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004434",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "send_altitude_08004434"
        },
        "FUN_08001168": {
            "renaming": {
                "FUN_08001168": "do_nothing_08001168"
            },
            "code": "\nvoid do_nothing_08001168(uint32_t Delay)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001168",
            "calling": [
                "HAL_RCC_OscConfig",
                "delay_ms"
            ],
            "imported": false,
            "current_name": "do_nothing_08001168"
        },
        "FUN_08004ee4": {
            "renaming": {
                "FUN_08004ee4": "do_nothing_08004ee4"
            },
            "code": "\nvoid do_nothing_08004ee4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee4",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08004ee4"
        },
        "FUN_08004ee8": {
            "renaming": {
                "FUN_08004ee8": "wait_forever_08004ee8"
            },
            "code": "void wait_forever_08004ee8(void)\n{\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [
                "MemManage_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee8",
            "calling": [
                "MemManage_Handler"
            ],
            "imported": false,
            "current_name": "wait_forever_08004ee8"
        },
        "FUN_08004ffc": {
            "renaming": {
                "FUN_08004ffc": "print_formatted_string_08004ffc",
                "__s": "string",
                "__format": "format",
                "local_78": "args",
                "local_70": "max_width",
                "local_64": "max_precision",
                "local_6a": "max_short_width",
                "local_68": "string_ptr",
                "pcStack_c": "format_ptr",
                "in_r2": "arg1",
                "in_r3": "arg2",
                "iVar1": "num_chars_printed"
            },
            "code": "int print_formatted_string_08004ffc(char *string, char *format, ...)\\n{\\n  int num_chars_printed;\\n  char *args[2];\\n  int max_width = 0x7fffffff;\\n  int max_precision = 0x7fffffff;\\n  int max_short_width = 0xffff;\\n  args[0] = string;\\n  char *string_ptr = string;\\n  char *format_ptr = format;\\n  int arg1 = __builtin_va_arg_pack();\\n  int arg2 = __builtin_va_arg_pack();\\n  num_chars_printed = _svfiprintf_r(*(int *)PTR__impure_ptr_08005040, args, format, arg1, arg2);\\n  *args[0] = \"\\0\";\\n  return num_chars_printed;\\n}",
            "called": [
                "_svfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ffc",
            "calling": [
                "serialInt"
            ],
            "imported": false,
            "current_name": "print_formatted_string_08004ffc"
        },
        "FUN_0800103c": {
            "renaming": {
                "FUN_0800103c": "is_not_equal_to_zero_0800103c",
                "in_CY": "is_CY_not_equal_to_zero",
                "in_ZR": "is_ZR_not_equal_to_zero"
            },
            "code": "bool is_not_equal_to_zero_0800103c(void)\n{\n  bool is_CY_not_equal_to_zero = __aeabi_cfcmpeq();\n  bool is_ZR_not_equal_to_zero = (bool)in_ZR;\n  return !is_CY_not_equal_to_zero || is_ZR_not_equal_to_zero;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800103c",
            "calling": [],
            "imported": false,
            "current_name": "is_not_equal_to_zero_0800103c"
        },
        "FUN_0800115c": {
            "renaming": {
                "FUN_0800115c": "get_uwTick_value_0800115c",
                "PTR_uwTick_08001164": "uwTick_ptr"
            },
            "code": "uint32_t get_uwTick_value_0800115c(void)\n{\n  uint32_t* PTR_uwTick_08001164 = (uint32_t*)PTR_uwTick_08001164;\n  return *PTR_uwTick_08001164;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800115c",
            "calling": [
                "I2C_WaitOnRXNEFlagUntilTimeout",
                "HAL_I2C_Mem_Write",
                "HAL_RCC_OscConfig",
                "HAL_I2C_Mem_Read",
                "millis",
                "I2C_RequestMemoryWrite",
                "HAL_RCC_ClockConfig",
                "HAL_UART_Transmit",
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "I2C_RequestMemoryRead",
                "micros",
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "imported": false,
            "current_name": "get_uwTick_value_0800115c"
        },
        "FUN_08004f60": {
            "renaming": {
                "FUN_08004f60": "get_uwTick_value_08004f60",
                "PTR_uwTick_08001164": "uwTick_ptr"
            },
            "code": "uint32_t get_uwTick_value_08004f60(void)\n{\n  uint32_t* PTR_uwTick_08001164 = (uint32_t*) PTR_uwTick_08001164;\n  return *PTR_uwTick_08001164;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f60",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "get_uwTick_value_08004f60"
        },
        "FUN_08002d88": {
            "renaming": {
                "FUN_08002d88": "read_mpu9250_sensor_data_08002d88",
                "puVar3": "src_ptr",
                "puVar4": "mag_data_ptr",
                "puVar5": "mag_calib_ptr",
                "puVar6": "mag_bias_ptr",
                "bVar7": "read_result",
                "uVar8": "temp_float",
                "uVar9": "mag_resolution",
                "raw_data": "raw_sensor_data",
                "x_mag": "x_magnetic_field",
                "y_mag": "y_magnetic_field",
                "PTR_s____Src_MPU9250_c_08002e80": "mpu9250_src_ptr",
                "PTR_magRaw_08002e84": "mag_raw_ptr",
                "PTR_msp_txf_status_08002e94": "msp_txf_status_ptr",
                "PTR_magBias_08002e9c": "mag_bias_ptr",
                "PTR_magCalib_08002e98": "mag_calib_ptr",
                "PTR_mRes_08002e88": "mag_resolution_ptr",
                "PTR_magScale_08002e8c": "mag_scale_ptr",
                "PTR_magData_08002e90": "mag_data_ptr"
            },
            "code": "void read_mpu9250_sensor_data_08002d88(void) {\n    short x_mag;\n    short y_mag;\n    uint8_t raw_data[7];\n    \n    raw_data[0] = 0;\n    raw_data[1] = 0;\n    raw_data[2] = 0;\n    raw_data[3] = 0;\n    raw_data[4] = 0;\n    raw_data[5] = 0;\n    raw_data[6] = 0;\n    \n    byte read_result = I2C_ReadByte(0x18, 2, PTR_s____Src_MPU9250_c_08002e80, 0xd7);\n    if ((int)((uint)read_result << 0x1f) >= 0) {\n        return;\n    }\n    \n    I2C_ReadByteArray(0x18, 3, raw_data, 7, PTR_s____Src_MPU9250_c_08002e80, 0xda);\n    if ((int)((uint)raw_data[6] << 0x1c) >= 0) {\n        *(short *)(PTR_msp_txf_status_08002e94 + 2) += 1;\n        return;\n    }\n    \n    x_mag = (raw_data[2] << 8) | raw_data[3];\n    y_mag = (raw_data[4] << 8) | raw_data[5];\n    *(short *)PTR_magRaw_08002e84 = raw_data[0] | (raw_data[1] << 8);\n    *(short *)(PTR_magRaw_08002e84 + 2) = x_mag;\n    *(short *)(PTR_magRaw_08002e84 + 4) = y_mag;\n    \n    float mag_scale = *(float *)PTR_magScale_08002e8c;\n    float mag_bias[3] = {\n        *(float *)PTR_magBias_08002e9c,\n        *(float *)(PTR_magBias_08002e9c + 4),\n        *(float *)(PTR_magBias_08002e9c + 8)\n    };\n    float mag_calibration[3] = {\n        *(float *)PTR_magCalib_08002e98,\n        *(float *)(PTR_magCalib_08002e98 + 4),\n        *(float *)(PTR_magCalib_08002e98 + 8)\n    };\n    float mag_resolution = *(float *)PTR_mRes_08002e88;\n    \n    *(float *)PTR_magData_08002e90 = (float)raw_data[0] * mag_resolution * mag_calibration[0] - mag_bias[0] * mag_scale;\n    *(float *)(PTR_magData_08002e90 + 4) = (float)x_mag * mag_resolution * mag_calibration[1] - mag_bias[1] * mag_scale;\n    *(float *)(PTR_magData_08002e90 + 8) = (float)y_mag * mag_resolution * mag_calibration[2] - mag_bias[2] * mag_scale;\n}",
            "called": [
                "__aeabi_fmul",
                "__floatsisf",
                "I2C_ReadByteArray",
                "__aeabi_fsub",
                "I2C_ReadByte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d88",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "read_mpu9250_sensor_data_08002d88"
        },
        "FUN_08004f64": {
            "renaming": {
                "FUN_08004f64": "do_nothing_08004f64"
            },
            "code": "\nvoid do_nothing_08004f64(uint32_t Delay)\n\n{\n  return;\n}\n\n",
            "called": [
                "HAL_Delay"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f64",
            "calling": [
                "LED_StartupSequence",
                "I2C_WriteByte",
                "_Error_Handler",
                "MS5611_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08004f64"
        },
        "FUN_08002b48": {
            "renaming": {
                "FUN_08002b48": "read_accelerometer_data_08002b48",
                "in_r3": "accel_src",
                "raw_data": "raw_data",
                "PTR_s____Src_MPU9250_c_08002be4": "accel_src",
                "PTR_accelRaw_08002be8": "accel_raw_data",
                "PTR_accelData_08002bec": "accel_data"
            },
            "code": "void read_accelerometer_data_08002b48(void)\n{\n    uint16_t raw_data[3];\n    I2C_ReadByteArray(0xd0, 0x3b, raw_data, 6, PTR_s____Src_MPU9250_c_08002be4, 0x58);\n    PTR_accelRaw_08002be8[0] = (int16_t)((raw_data[0] << 8) | raw_data[1]);\n    PTR_accelRaw_08002be8[1] = (int16_t)((raw_data[2] << 8) | raw_data[3]);\n    PTR_accelRaw_08002be8[2] = (int16_t)((raw_data[4] << 8) | raw_data[5]);\n    PTR_accelData_08002bec[0] = (float)PTR_accelRaw_08002be8[0] * 0.000244f;\n    PTR_accelData_08002bec[1] = (float)PTR_accelRaw_08002be8[1] * 0.000244f;\n    PTR_accelData_08002bec[2] = (float)PTR_accelRaw_08002be8[2] * 0.000244f;\n}",
            "called": [
                "__aeabi_fmul",
                "__floatsisf",
                "I2C_ReadByteArray"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b48",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "read_accelerometer_data_08002b48"
        },
        "FUN_08004f68": {
            "renaming": {
                "FUN_08004f68": "initialize_system_08004f68",
                "iVar1": "index",
                "puVar2": "completed_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void initialize_system_08004f68(void)\n{\n  int index;\n  undefined4 *completed_ptr = (undefined4 *)PTR_completed_8672_08004fa8;\n  code *jump_table;\n  for (index = 0; PTR_gyroBias_08004fa0 + index < PTR_completed_8672_08004fa4; index += 4) {\n    *(undefined4 *)(PTR_gyroBias_08004fa0 + index) = *(undefined4 *)(PTR__sidata_08004f9c + index);\n  }\n  for (; completed_ptr < PTR__ebss_08004fac; completed_ptr++) {\n    *completed_ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jump_table = (code *)0x8004f9a;\n  main();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "SystemInit",
                "main",
                "__libc_init_array"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f68",
            "calling": [],
            "imported": false,
            "current_name": "initialize_system_08004f68"
        },
        "FUN_08001170": {
            "renaming": {
                "FUN_08001170": "set_priority_group_08001170",
                "PriorityGroup": "priority_group",
                "PTR_08001190": "ptr",
                "DAT_08001190": "data"
            },
            "code": "void set_priority_group_08001170(uint32_t priority_group) {\n    uint32_t* PTR_08001190 = (uint32_t*)(DAT_08001190 + 0xc);\n    uint32_t mask = 0xf8ff;\n    uint32_t value = 0x5fa0000 | ((priority_group & 7) << 8);\n    *PTR_08001190 = (*PTR_08001190 & mask) | value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001170",
            "calling": [
                "HAL_Init",
                "HAL_MspInit"
            ],
            "imported": false,
            "current_name": "set_priority_group_08001170"
        },
        "FUN_08002bf0": {
            "renaming": {
                "FUN_08002bf0": "read_gyro_data_08002bf0",
                "raw_data": "raw_data",
                "PTR_gyroRaw_08002ca0": "gyro_raw_ptr",
                "PTR_gyroBias_08002ca4": "gyro_bias_ptr",
                "PTR_gyroData_08002cac": "gyro_data_ptr",
                "DAT_08002ca8": "GYRO_BIAS_SCALE",
                "MPU9250_src_ptr": "MPU9250_src_ptr"
            },
            "code": "void read_gyro_data_08002bf0(void)\n{\n  uint8_t raw_data [6];\n  raw_data[0] = 0;\n  raw_data[1] = 0;\n  I2C_ReadByteArray(0xd0, 0x43, raw_data, 6, MPU9250_src_ptr, 0x7b);\n  float gyro_x = (float)((short)(raw_data[0] << 8 | raw_data[1]));\n  float gyro_y = (float)((short)(raw_data[2] << 8 | raw_data[3]));\n  float gyro_z = (float)((short)(raw_data[4] << 8 | raw_data[5]));\n  float gyro_bias_x = gyro_x * DAT_08002ca8 * 0x38000000 - PTR_gyroBias_08002ca4[0];\n  float gyro_bias_y = gyro_y * DAT_08002ca8 * 0x38000000 - PTR_gyroBias_08002ca4[1];\n  float gyro_bias_z = gyro_z * DAT_08002ca8 * 0x38000000 - PTR_gyroBias_08002ca4[2];\n  PTR_gyroData_08002cac[0] = gyro_bias_x;\n  PTR_gyroData_08002cac[1] = gyro_bias_y;\n  PTR_gyroData_08002cac[2] = gyro_bias_z;\n}\n",
            "called": [
                "__aeabi_fmul",
                "__floatsisf",
                "I2C_ReadByteArray",
                "__aeabi_fsub"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002bf0",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "read_gyro_data_08002bf0"
        },
        "FUN_08004ef0": {
            "renaming": {
                "FUN_08004ef0": "do_nothing_08004ef0"
            },
            "code": "\nvoid do_nothing_08004ef0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef0",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08004ef0"
        },
        "FUN_08002ad0": {
            "renaming": {
                "FUN_08002ad0": "initialize_MPU9250_08002ad0",
                "0xd0": "MPU9250_ADDRESS",
                "0x75": "WHO_AM_I",
                "PTR_s____Src_MPU9250_c_08002b44": "MPU9250_buffer",
                "0x6b": "PWR_MGMT_1",
                "0x80": "RESET",
                "'\\x01'": "CLKSEL_PLL",
                "0x19": "CONFIG",
                "0x1d": "SMPLRT_DIV",
                "0x1a": "GYRO_CONFIG",
                "0x1b": "ACCEL_CONFIG",
                "0x1c": "ACCEL_CONFIG_2"
            },
            "code": "void initialize_MPU9250_08002ad0(void)\n{\n  I2C_ReadByte(MPU9250_ADDRESS, WHO_AM_I, PTR_s____Src_MPU9250_c_08002b44, 1);\n  I2C_WriteByte(MPU9250_ADDRESS, PWR_MGMT_1, RESET, 1);\n  I2C_WriteByte(MPU9250_ADDRESS, PWR_MGMT_1, CLKSEL_PLL, 1);\n  I2C_WriteByte(MPU9250_ADDRESS, CONFIG, 0, 1);\n  I2C_WriteByte(MPU9250_ADDRESS, SMPLRT_DIV, 3, 1);\n  I2C_WriteByte(MPU9250_ADDRESS, GYRO_CONFIG, 3, 1);\n  I2C_WriteByte(MPU9250_ADDRESS, ACCEL_CONFIG, 16, 1);\n  I2C_WriteByte(MPU9250_ADDRESS, ACCEL_CONFIG_2, 8, 1);\n}\n",
            "called": [
                "I2C_WriteByte",
                "I2C_ReadByte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad0",
            "calling": [
                "IMU_Init"
            ],
            "imported": false,
            "current_name": "initialize_MPU9250_08002ad0"
        },
        "FUN_08001050": {
            "renaming": {
                "FUN_08001050": "is_less_than_or_equal_to_zero_08001050",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_zero"
            },
            "code": "bool is_less_than_or_equal_to_zero_08001050(void)\n{\n    bool is_CY_zero = false;\n    bool is_ZR_zero = false;\n    __aeabi_cfrcmple();\n    return is_CY_zero || is_ZR_zero;\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001050",
            "calling": [
                "AHRS_GetYaw"
            ],
            "imported": false,
            "current_name": "is_less_than_or_equal_to_zero_08001050"
        },
        "FUN_08004ef4": {
            "renaming": {
                "FUN_08004ef4": "increment_system_tick_and_handle_systick_interrupt_08004ef4"
            },
            "code": "void increment_system_tick_and_handle_systick_interrupt_08004ef4(void)\n{\n  HAL_IncTick();\n  HAL_SYSTICK_IRQHandler();\n  return;\n}",
            "called": [
                "HAL_IncTick",
                "HAL_SYSTICK_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef4",
            "calling": [],
            "imported": false,
            "current_name": "increment_system_tick_and_handle_systick_interrupt_08004ef4"
        },
        "FUN_08004ef2": {
            "renaming": {
                "FUN_08004ef2": "do_nothing_08004ef2"
            },
            "code": "\nvoid do_nothing_08004ef2(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef2",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08004ef2"
        },
        "FUN_080043bc": {
            "renaming": {
                "FUN_080043bc": "copy_imu_data_to_buffer_and_send_080043bc",
                "local_24": "imu_data",
                "local_1c": "imu_data_short",
                "puVar3": "imu_data_ptr",
                "puVar4": "imu_data_raw_ptr",
                "uVar1": "imu_data_raw_32bit_1",
                "uVar2": "imu_data_raw_32bit_2"
            },
            "code": "void copy_imu_data_to_buffer_and_send_080043bc(void)\n{\n  uint32_t imu_data[8];\n  uint16_t imu_data_short[6];\n  uint32_t *imu_data_ptr = imu_data;\n  uint16_t *imu_data_short_ptr = imu_data_short;\n  uint32_t *imu_data_end_ptr = imu_data + 8;\n  uint32_t *imu_data_raw_ptr = (uint32_t *)PTR_msp_txf_raw_imu_080043ec;\n  while (imu_data_ptr != imu_data_end_ptr)\n  {\n    *imu_data_ptr++ = *imu_data_raw_ptr++;\n    *imu_data_ptr++ = *imu_data_raw_ptr++;\n  }\n  *imu_data_short_ptr = *(uint16_t *)imu_data_raw_ptr;\n  MSP_SendFrame('f', (uint8_t *)imu_data, 0x12);\n}",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043bc",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "copy_imu_data_to_buffer_and_send_080043bc"
        },
        "FUN_08004f5c": {
            "renaming": {
                "FUN_08004f5c": "get_uwTick_value_08004f5c",
                "PTR_uwTick_08001164": "uwTick_ptr"
            },
            "code": "uint32_t get_uwTick_value_08004f5c(void)\n{\n  uint32_t* PTR_uwTick_08001164 = (uint32_t*)PTR_uwTick_08001164;\n  return *PTR_uwTick_08001164;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f5c",
            "calling": [
                "MS5611_Update",
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "get_uwTick_value_08004f5c"
        },
        "FUN_08000404": {
            "renaming": {
                "FUN_08000404": "reverse_bits_08000404",
                "param_1": "input",
                "uVar1": "high_bits",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeroes",
                "uVar5": "shift_amount",
                "uVar6": "sign",
                "bVar7": "negative_shift",
                "bVar8": "zero_shift",
                "bVar9": "carry_shift",
                "in_r12": "unused"
            },
            "code": "ulonglong reverse_bits_08000404(uint input)\n{\n    uint abs_input = input;\n    uint sign = input & 0x80000000;\n    if (input == 0) {\n        return 0;\n    }\n    if ((int)sign < 0) {\n        abs_input = -input;\n    }\n    uint leading_zeroes = count_leading_zeroes(abs_input);\n    uint shift_amount = leading_zeroes + 0x15;\n    if ((int)shift_amount < 0x20) {\n        shift_amount = (leading_zeroes + 1) & 0xff;\n    }\n    uint shifted_input = abs_input << (shift_amount & 0xff);\n    uint high_bits = 0;\n    if ((int)shift_amount >= 0x20) {\n        uint low_bits = ~(0x432 - shift_amount);\n        if (low_bits > 0x1e) {\n            return (input | (shifted_input >> (low_bits - 0x1f & 0xff))) & 0x80000000ffffffff;\n        }\n        int shift = low_bits - 0x13;\n        if (shift == 0 || (shift < 0) != SCARRY4(low_bits - 0x1f, 0xc)) {\n            low_bits++;\n            high_bits = shifted_input >> (low_bits & 0xff);\n            shifted_input = (shifted_input << (0x20 - low_bits & 0xff)) | sign;\n        } else {\n            high_bits = input;\n            shifted_input = (shifted_input >> (0x20 - (0xcU - shift) & 0xff)) | (sign & 0xffffffff00000000);\n        }\n    }\n    return CONCAT44(shifted_input | (0x432 - shift_amount) * 0x100000 | sign, high_bits);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000404",
            "calling": [
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "reverse_bits_08000404"
        },
        "FUN_08004eec": {
            "renaming": {
                "FUN_08004eec": "wait_forever_08004eec"
            },
            "code": "void wait_forever_08004eec() {\n  while(true) {\n    // Do nothing, just wait\n  }\n}",
            "called": [
                "UsageFault_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004eec",
            "calling": [
                "UsageFault_Handler"
            ],
            "imported": false,
            "current_name": "wait_forever_08004eec"
        },
        "FUN_08004eea": {
            "renaming": {
                "FUN_08004eea": "wait_for_input_08004eea"
            },
            "code": "void wait_for_input_08004eea(void)\n{\n    while(true)\n    {\n        // Do nothing, just wait for input\n    }\n}",
            "called": [
                "BusFault_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004eea",
            "calling": [
                "BusFault_Handler"
            ],
            "imported": false,
            "current_name": "wait_for_input_08004eea"
        },
        "FUN_08006070": {
            "renaming": {
                "FUN_08006070": "calculate_result_08006070",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "param_5": "angle",
                "uVar1": "quotient_dividend",
                "extraout_r1": "extra_out_r1",
                "extraout_r1_00": "extra_out_r1_00",
                "unaff_r4": "unused_variable",
                "iVar2": "quotient_divisor",
                "iVar5": "quotient_difference",
                "uVar3": "quotient_sign_bit",
                "uVar4": "remainder_sign_bit",
                "uVar6": "remainder_mask",
                "uVar7": "result",
                "uVar8": "atan_result"
            },
            "code": "undefined8 calculate_result_08006070(uint dividend, uint divisor, uint quotient, uint remainder, double angle)\n{\n  undefined4 quotient_sign_bit;\n  undefined4 remainder_sign_bit;\n  undefined8 result;\n  undefined8 atan_result;\n  \n  result = CONCAT44(DAT_08006204,DAT_08006200);\n  remainder = remainder & 0x7fffffff;\n  quotient_sign_bit = (-quotient | quotient) >> 0x1f;\n  remainder_sign_bit = (-remainder | remainder) >> 0x1f;\n  if ((DAT_08006220 < (remainder | quotient_sign_bit)) || (DAT_08006220 < (divisor & 0x7fffffff | (-dividend | dividend) >> 0x1f))) {\n    result = __aeabi_dadd(dividend, divisor);\n    return result;\n  }\n  if ((remainder + 0xc0100000 | quotient) == 0) {\n    atan_result = atan(angle);\n    result = CONCAT44(extraout_r1, dividend);\n    return result;\n  }\n  quotient_sign_bit = (int)remainder >> 0x1e & 2U | divisor >> 0x1f;\n  if ((dividend | divisor) == 0) {\n    if (quotient_sign_bit == 2) {\n      return CONCAT44(DAT_080061fc,DAT_080061f8);\n    }\n    if (quotient_sign_bit != 3) {\n      return CONCAT44(divisor, dividend);\n    }\n  }\n  else {\n    if ((remainder | remainder_sign_bit) != 0) {\n      if (remainder == DAT_08006220) {\n        if (divisor == remainder) {\n          if (quotient_sign_bit == 2) {\n            return CONCAT44(DAT_080061ec,DAT_080061e8);\n          }\n          if (quotient_sign_bit == 3) {\n            return CONCAT44(DAT_080061f4,DAT_080061f0);\n          }\n          if (quotient_sign_bit != 1) {\n            return CONCAT44(DAT_0800621c,DAT_08006218);\n          }\n          return CONCAT44(DAT_080061e4,DAT_080061e0);\n        }\n        if (quotient_sign_bit == 2) {\n          return CONCAT44(DAT_080061fc,DAT_080061f8);\n        }\n        if (quotient_sign_bit == 3) {\n          return result;\n        }\n        if (quotient_sign_bit == 1) {\n          return 0x8000000000000000;\n        }\n        return 0;\n      }\n      if (divisor != DAT_08006220) {\n        int quotient_difference = (int)(divisor - remainder) >> 0x14;\n        undefined4 quotient_dividend = DAT_08006210;\n        int quotient_divisor = DAT_08006214;\n        if (quotient_difference < 0x3d) {\n          if (((int)remainder < 0) && (quotient_difference + 0x3c < 0 != SCARRY4(quotient_difference,0x3c))) {\n            quotient_dividend = 0;\n            quotient_divisor = 0;\n          }\n          else {\n            quotient_dividend = __divdf3(dividend, divisor);\n            fabs((double)CONCAT44(unaff_r4, remainder));\n            atan_result = atan((double)CONCAT44(unaff_r4, remainder));\n            quotient_divisor = extraout_r1_00;\n          }\n        }\n        if (quotient_sign_bit != 1) {\n          if (quotient_sign_bit == 2) {\n            result = __subdf3(quotient_dividend, quotient_divisor, DAT_08006208, DAT_0800620c);\n            result = CONCAT44(DAT_080061fc, DAT_080061f8);\n          }\n          else {\n            if (quotient_sign_bit == 0) {\n              return CONCAT44(quotient_divisor, quotient_dividend);\n            }\n            result = __subdf3(quotient_dividend, quotient_divisor, DAT_08006208, DAT_0800620c);\n            result = CONCAT44(DAT_080061fc, DAT_080061f8);\n          }\n          result = __subdf3((int)result, (int)((ulonglong)result >> 0x20), (int)atan_result, (int)((ulonglong)atan_result >> 0x20));\n          return result;\n        }\n        return CONCAT44(quotient_divisor + -0x80000000, quotient_dividend);\n      }\n    }\n    result = CONCAT44(DAT_08006214, DAT_08006210);\n    if ((int)divisor < 0) {\n      result = CONCAT44(DAT_080061dc, DAT_080061d8);\n    }\n  }\n  return result;\n}",
            "called": [
                "__divdf3",
                "__aeabi_dadd",
                "atan",
                "fabs",
                "__subdf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006070",
            "calling": [
                "atan2"
            ],
            "imported": false,
            "current_name": "calculate_result_08006070"
        },
        "FUN_08004cac": {
            "renaming": {
                "FUN_08004cac": "print_serial_data_08004cac",
                "val": "value",
                "*data": "data_buffer",
                "PTR_tx_buffer_08004cc4": "tx_buffer",
                "PTR_DAT_08004cc8": "data"
            },
            "code": "void print_serial_data_08004cac(int value)\n{\n  undefined *PTR_DAT_08004cc8_buffer;\n  PTR_DAT_08004cc8_buffer = PTR_tx_buffer_08004cc4;\n  siprintf(PTR_tx_buffer_08004cc4, PTR_DAT_08004cc8, value);\n  serialPrint(PTR_DAT_08004cc8_buffer);\n  return;\n}",
            "called": [
                "siprintf",
                "serialPrint"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cac",
            "calling": [
                "_Error_Handler"
            ],
            "imported": false,
            "current_name": "print_serial_data_08004cac"
        },
        "FUN_08004eee": {
            "renaming": {
                "FUN_08004eee": "do_nothing_08004eee"
            },
            "code": "\nvoid do_nothing_08004eee(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004eee",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08004eee"
        },
        "FUN_08004c18": {
            "renaming": {
                "FUN_08004c18": "transmit_char_to_uart_08004c18",
                "ch": "character",
                "PTR_tx_buffer_08004c28": "tx_buffer_pointer",
                "PTR_huart1_08004c2c": "huart1_pointer"
            },
            "code": "void transmit_char_to_uart_08004c18(uchar character){\n                      undefined *buffer_pointer;\n                      buffer_pointer = PTR_tx_buffer_08004c28;\n                      *PTR_tx_buffer_08004c28 = character;\n                      HAL_UART_Transmit((UART_HandleTypeDef *)PTR_huart1_08004c2c, buffer_pointer, 1, 5);\n                      return;\n                    }",
            "called": [
                "HAL_UART_Transmit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c18",
            "calling": [
                "MSP_SendFrame",
                "_Error_Handler",
                "serialPrint"
            ],
            "imported": false,
            "current_name": "transmit_char_to_uart_08004c18"
        },
        "FUN_08004c8c": {
            "renaming": {
                "FUN_08004c8c": "printData_08004c8c",
                "*data": "data",
                "sVar1": "dataSize",
                "*puVar2": "currentChar"
            },
            "code": "void printData_08004c8c(char *data)\n{\n  size_t dataSize = strlen(data);\n  uchar *currentChar;\n  for (currentChar = (uchar *)data; (uint)((int)currentChar - (int)data) < dataSize; currentChar++) {\n    serialWrite(*currentChar);\n  }\n  return;\n}",
            "called": [
                "strlen",
                "serialWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c8c",
            "calling": [
                "MSP_SendFrame",
                "serialInt",
                "_Error_Handler"
            ],
            "imported": false,
            "current_name": "printData_08004c8c"
        },
        "FUN_08001460": {
            "renaming": {
                "FUN_08001460": "check_I2C_status_08001460",
                "*hi2c": "*handle",
                "Flag": "flag",
                "Timeout": "timeout",
                "uVar1": "start_time",
                "uVar2": "current_time",
                "uVar3": "status_register",
                "*pIVar4": "*instance"
            },
            "code": "HAL_StatusTypeDef check_I2C_status_08001460(I2C_HandleTypeDef *handle, uint32_t flag, uint32_t timeout) {\n    uint32_t start_time = HAL_GetTick();\n    do {\n        I2C_TypeDef *instance = handle->Instance;\n        uint32_t status_register;\n        if ((flag << 8) >> 0x18 == 1) {\n            status_register = instance->SR1;\n        }\n        else {\n            status_register = instance->SR2;\n        }\n        if ((flag & 0xffff & ~status_register) == 0) {\n            return HAL_OK;\n        }\n        if ((int)(instance->SR1 << 0x15) < 0) {\n            instance->CR1 = instance->CR1 | 0x200;\n            instance->SR1 = instance->SR1 & 0xfffffbff;\n            handle->ErrorCode = 4;\n            handle->State = HAL_I2C_STATE_READY;\n            handle->Lock = HAL_UNLOCKED;\n            return HAL_ERROR;\n        }\n    } while ((timeout == 0xffffffff) || ((timeout != 0 && (HAL_GetTick() - start_time <= timeout))));\n    handle->State = HAL_I2C_STATE_READY;\n    handle->Lock = HAL_UNLOCKED;\n    return HAL_TIMEOUT;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001460",
            "calling": [
                "I2C_RequestMemoryWrite",
                "I2C_RequestMemoryRead"
            ],
            "imported": false,
            "current_name": "check_I2C_status_08001460"
        },
        "FUN_08003fd0": {
            "renaming": {
                "FUN_08003fd0": "set_pwm_value_08003fd0",
                "pwm": "pwm_value",
                "PTR_htim4_08003fd8": "tim4_register_ptr"
            },
            "code": "void set_pwm_value_08003fd0(int pwm_value)\n{\n  int* tim4_register_address = *(int*)PTR_htim4_08003fd8;\n  int pwm_offset = 0x3c;\n  *(int*)(tim4_register_address + pwm_offset) = pwm_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fd0",
            "calling": [
                "Motor_SetSpeed",
                "Motor_StopAll"
            ],
            "imported": false,
            "current_name": "set_pwm_value_08003fd0"
        },
        "FUN_08000134": {
            "renaming": {
                "FUN_08000134": "concatenate_pointers_if_initialized_08000134",
                "param_1": "init_ptr",
                "param_2": "obj_ptr",
                "DAT_08000144": "initialized_value",
                "PTR__init_0800014c": "init_value_ptr",
                "PTR_object_8677_08000148": "object_value_ptr"
            },
            "code": "uint64_t concatenate_pointers_if_initialized_08000134(uint64_t *init_ptr, uint64_t *obj_ptr) {\n  if (DAT_08000144 != 0) {\n    init_ptr = PTR__init_0800014c;\n    obj_ptr = PTR_object_8677_08000148;\n  }\n  return ((uint64_t)obj_ptr << 32) | (uint64_t)init_ptr;\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000134",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "concatenate_pointers_if_initialized_08000134"
        },
        "FUN_08003eb0": {
            "renaming": {
                "FUN_08003eb0": "execute_afl_call_08003eb0",
                "ticks": "num_ticks",
                "uVar1": "result"
            },
            "code": "uint32_t execute_afl_call_08003eb0(int ticks)\n{\n    uint32_t result;\n    if (*(int *)PTR_noHyperCall_08003ec4 == 0)\n    {\n        result = aflCall(1, ticks, 0);\n        return result;\n    }\n    return 0;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eb0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "execute_afl_call_08003eb0"
        },
        "FUN_08005c70": {
            "renaming": {
                "FUN_08005c70": "FUNC_08005c70"
            },
            "code": "\nulonglong FUNC_08005c70(uint param_1,uint param_2)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 extraout_r1;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  ulonglong uVar9;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  undefined8 uVar12;\n  undefined4 in_stack_ffffffc8;\n  \n  uVar9 = CONCAT44(param_2,param_1);\n  uVar8 = param_2 & 0x7fffffff;\n  if (DAT_08005f90 < (int)uVar8) {\n    if ((uVar8 + 0xc0100000 | param_1) != 0) {\n      uVar10 = __subdf3(param_1,param_2,param_1,param_2);\n      uVar2 = (undefined4)((ulonglong)uVar10 >> 0x20);\n      uVar9 = __divdf3((int)uVar10,uVar2,(int)uVar10,uVar2);\n      return uVar9;\n    }\n    uVar9 = __muldf3(param_1,param_2,DAT_08005f28,DAT_08005f2c);\n    uVar10 = __muldf3(param_1,param_2,DAT_08005f30,DAT_08005f34);\nLAB_08005cba:\n    uVar9 = __aeabi_dadd((int)uVar9,(int)(uVar9 >> 0x20),(int)uVar10,\n                         (int)((ulonglong)uVar10 >> 0x20));\n  }\n  else {\n    if ((int)uVar8 <= DAT_08005f94) {\n      if (0x3e3fffff < uVar8) {\n        uVar10 = __muldf3(param_1,param_2,param_1,param_2);\n        uVar7 = (undefined4)((ulonglong)uVar10 >> 0x20);\n        uVar2 = (undefined4)uVar10;\n        uVar10 = __muldf3(uVar2,uVar7,DAT_08005f40,DAT_08005f44);\n        uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f48,DAT_08005f4c\n                             );\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f50,DAT_08005f54);\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f58,DAT_08005f5c\n                             );\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f60,DAT_08005f64);\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f68,DAT_08005f6c\n                             );\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar11 = __muldf3(uVar2,uVar7,DAT_08005f70,DAT_08005f74);\n        uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f78,DAT_08005f7c);\n        uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar7);\n        uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f80,DAT_08005f84\n                             );\n        uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar7);\n        uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f88,DAT_08005f8c);\n        uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar7);\n        uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08005f98);\n        uVar10 = __divdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),param_1,param_2);\n        goto LAB_08005cba;\n      }\n      uVar10 = __aeabi_dadd(param_1,param_2,DAT_08005f38,DAT_08005f3c);\n      iVar1 = __aeabi_dcmpgt((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005f98);\n      if (iVar1 != 0) {\n        return uVar9;\n      }\n    }\n    fabs((double)CONCAT44(param_2,in_stack_ffffffc8));\n    uVar10 = __subdf3(0,DAT_08005f98,param_1,extraout_r1);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005f9c);\n    uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar2 = (undefined4)uVar10;\n    uVar10 = __muldf3(uVar2,uVar3,DAT_08005f40,DAT_08005f44);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f48,DAT_08005f4c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f50,DAT_08005f54);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f58,DAT_08005f5c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f60,DAT_08005f64);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f68,DAT_08005f6c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar4 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar11 = __muldf3(uVar2,uVar3,DAT_08005f70,DAT_08005f74);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f78,DAT_08005f7c);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar3);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f80,DAT_08005f84);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar3);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f88,DAT_08005f8c);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar3);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08005f98);\n    uVar5 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar12 = __ieee754_sqrt(uVar2,uVar3);\n    uVar6 = (undefined4)((ulonglong)uVar12 >> 0x20);\n    uVar7 = (undefined4)uVar12;\n    if (DAT_08005fa0 < (int)uVar8) {\n      uVar10 = __divdf3((int)uVar10,uVar4,(int)uVar11,uVar5);\n      uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar7,uVar6);\n      uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar7,uVar6);\n      uVar2 = (undefined4)((ulonglong)uVar10 >> 0x20);\n      uVar10 = __aeabi_dadd((int)uVar10,uVar2,(int)uVar10,uVar2);\n      uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f30,DAT_08005f34);\n      uVar2 = DAT_08005f28;\n      uVar7 = DAT_08005f2c;\n    }\n    else {\n      uVar10 = __divdf3((int)uVar10,uVar4,(int)uVar11,uVar5);\n      uVar11 = __aeabi_dadd(uVar7,uVar6,uVar7,uVar6);\n      uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                        (int)((ulonglong)uVar11 >> 0x20));\n      uVar11 = __muldf3(0,uVar6,0,uVar6);\n      uVar11 = __subdf3(uVar2,uVar3,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n      uVar12 = __aeabi_dadd(uVar7,uVar6,0,uVar6);\n      uVar11 = __divdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar12,\n                        (int)((ulonglong)uVar12 >> 0x20));\n      uVar2 = (undefined4)((ulonglong)uVar11 >> 0x20);\n      uVar11 = __aeabi_dadd((int)uVar11,uVar2,(int)uVar11,uVar2);\n      uVar11 = __subdf3(DAT_08006060,DAT_08006064,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n      uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                        (int)((ulonglong)uVar11 >> 0x20));\n      uVar11 = __aeabi_dadd(0,uVar6,0,uVar6);\n      uVar11 = __subdf3(DAT_08006068,DAT_0800606c,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n      uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                        (int)((ulonglong)uVar11 >> 0x20));\n      uVar2 = DAT_08006068;\n      uVar7 = DAT_0800606c;\n    }\n    uVar9 = __subdf3(uVar2,uVar7,(int)uVar10,(int)((ulonglong)uVar10 >> 0x20));\n    if ((int)param_2 < 1) {\n      uVar9 = uVar9 & 0xffffffff | (ulonglong)((int)(uVar9 >> 0x20) + 0x80000000) << 0x20;\n    }\n  }\n  return uVar9;\n}\n\n",
            "called": [
                "__divdf3",
                "__muldf3",
                "__ieee754_sqrt",
                "__aeabi_dcmpgt",
                "__aeabi_dadd",
                "fabs",
                "__subdf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005c70",
            "calling": [
                "asin"
            ],
            "imported": false,
            "current_name": "FUNC_08005c70"
        },
        "FUN_08002ee8": {
            "renaming": {
                "FUN_08002ee8": "calculate_angle_08002ee8",
                "iVar1": "is_greater_than_or_equal_to_threshold",
                "uVar2": "angle_value",
                "fVar3": "angle_difference",
                "DAT_08002f1c": "THRESHOLD_1",
                "DAT_08002f20": "THRESHOLD_2",
                "DAT_08002f24": "THRESHOLD_3"
            },
            "code": "float calculate_angle_08002ee8(void)\n{\n  int is_greater_than_or_equal_to_threshold;\n  int is_less_than_threshold;\n  undefined4 angle_value = *(undefined4 *)(PTR_AHRS_Angle_08002f18 + 8);\n  is_greater_than_or_equal_to_threshold = __aeabi_fcmpge(angle_value, DAT_08002f1c);\n  if (is_greater_than_or_equal_to_threshold)\n  {\n    is_less_than_threshold = __aeabi_fcmplt(angle_value, DAT_08002f20);\n    if (is_less_than_threshold)\n    {\n      float angle_difference = (float)__addsf3(angle_value, DAT_08002f20);\n      return angle_difference;\n    }\n  }\n  float angle_difference = (float)__aeabi_fsub(angle_value, DAT_08002f24);\n  return angle_difference;\n}\n",
            "called": [
                "__addsf3",
                "__aeabi_fsub",
                "__aeabi_fcmpge",
                "__aeabi_fcmplt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ee8",
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "imported": false,
            "current_name": "calculate_angle_08002ee8"
        },
        "FUN_08001104": {
            "renaming": {
                "FUN_08001104": "configureSysTick_08001104",
                "TickPriority": "tickPriority",
                "uVar1": "hclkFreq",
                "HAL_RCC_GetHCLKFreq": "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_Config": "HAL_SYSTICK_Config",
                "SysTick_IRQn": "SysTick_IRQn",
                "HAL_NVIC_SetPriority": "HAL_NVIC_SetPriority",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef configureSysTick_08001104(uint32_t tickPriority) {\n  uint32_t hclkFreq = HAL_RCC_GetHCLKFreq();\n  uint32_t systickInterval = hclkFreq / 1000;\n  HAL_SYSTICK_Config(systickInterval);\n  HAL_NVIC_SetPriority(SysTick_IRQn, tickPriority, 0);\n  return HAL_OK;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq",
                "HAL_NVIC_SetPriority",
                "HAL_SYSTICK_Config"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001104",
            "calling": [
                "HAL_RCC_ClockConfig",
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "configureSysTick_08001104"
        },
        "FUN_08004978": {
            "renaming": {
                "FUN_08004978": "initialize_pid_controllers_08004978",
                "puVar1": "roll_pid_controller",
                "puVar2": "pitch_pid_controller",
                "puVar3": "yaw_pid_controller",
                "puVar4": "altitude_pid_controller",
                "uVar5": "roll_kp",
                "uVar6": "pitch_kp",
                "uVar7": "yaw_kp",
                "uVar8": "",
                "PTR_pid_yaw_080049f0": "yaw_pid_controller",
                "PTR_pid_pitch_080049ec": "pitch_pid_controller",
                "PTR_pid_roll_080049e8": "roll_pid_controller",
                "PTR_pid_altitude_080049f4": "altitude_pid_controller",
                "DAT_080049f8": "roll_kp",
                "DAT_08004a00": "pitch_kp",
                "DAT_080049fc": "",
                "DAT_08004a04": "",
                "DAT_08004a08": "yaw_kp",
                "DAT_08004a10": "",
                "DAT_08004a14": "",
                "DAT_08004a18": "",
                "DAT_08004a1c": "",
                "DAT_08004a20": "",
                "DAT_08004a24": "",
                "DAT_08004a28": "",
                "DAT_08004a2c": ""
            },
            "code": "void initialize_pid_controllers_08004978(void)\n{\n  float *PTR_pid_roll_080049e8 = PTR_pid_roll_080049e8;\n  float *PTR_pid_pitch_080049ec = PTR_pid_pitch_080049ec;\n  float *PTR_pid_yaw_080049f0 = PTR_pid_yaw_080049f0;\n  float *PTR_pid_altitude_080049f4 = PTR_pid_altitude_080049f4;\n\n  *(PTR_pid_pitch_080049ec + 12) = 1;\n  *(PTR_pid_roll_080049e8 + 12) = 1;\n  *(PTR_pid_yaw_080049f0 + 12) = -1;\n  *(PTR_pid_altitude_080049f4 + 12) = 0;\n\n  float DAT_080049f8 = DAT_080049f8;\n  float DAT_08004a00 = DAT_08004a00;\n  float DAT_08004a08 = DAT_08004a08;\n\n  *(PTR_pid_pitch_080049ec + 8) = DAT_080049fc;\n  *(PTR_pid_roll_080049e8 + 8) = DAT_08004a10;\n  *(PTR_pid_yaw_080049f0 + 8) = DAT_08004a08;\n  *(PTR_pid_altitude_080049f4 + 8) = 0;\n\n  *(PTR_pid_pitch_080049ec + 4) = DAT_080049f8;\n  *(PTR_pid_pitch_080049ec + 16) = DAT_08004a00;\n  *(PTR_pid_pitch_080049ec + 20) = DAT_08004a08;\n  *(PTR_pid_pitch_080049ec + 24) = DAT_08004a14;\n  *(PTR_pid_pitch_080049ec + 28) = DAT_08004a18;\n\n  *(PTR_pid_roll_080049e8 + 4) = DAT_08004a00;\n  *(PTR_pid_roll_080049e8 + 8) = DAT_080049f8;\n  *(PTR_pid_roll_080049e8 + 12) = DAT_08004a18;\n  *(PTR_pid_roll_080049e8 + 16) = DAT_08004a1c;\n  *(PTR_pid_roll_080049e8 + 20) = DAT_08004a20;\n  *(PTR_pid_roll_080049e8 + 24) = DAT_08004a10;\n  *(PTR_pid_roll_080049e8 + 28) = DAT_08004a24;\n\n  *(PTR_pid_yaw_080049f0 + 4) = DAT_08004a08;\n  *(PTR_pid_yaw_080049f0 + 8) = DAT_08004a10;\n  *(PTR_pid_yaw_080049f0 + 12) = DAT_08004a28;\n\n  *(PTR_pid_altitude_080049f4 + 4) = DAT_08004a2c;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004978",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initialize_pid_controllers_08004978"
        },
        "FUN_08000c60": {
            "renaming": {
                "FUN_08000c60": "calculate_hash_08000c60",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "hash_value",
                "uVar2": "temp_value",
                "iVar3": "leading_zeroes_count",
                "uVar4": "shifted_value",
                "iVar5": "constant_value",
                "uVar6": "shifted_hash_value"
            },
            "code": "uint calculate_hash_08000c60(uint input_1, uint input_2)\n{\n  uint hash_value;\n  uint temp_value;\n  int leading_zeroes_count;\n  uint shifted_value;\n  int constant_value = 0x5b000000;\n  if ((input_1 | input_2) == 0) {\n    return input_1;\n  }\n  hash_value = input_1;\n  temp_value = input_2;\n  if (input_2 == 0) {\n    hash_value = 0;\n    temp_value = input_1;\n    constant_value = 0x4b000000;\n  }\n  leading_zeroes_count = count_leading_zeroes(temp_value);\n  shifted_value = leading_zeroes_count - 8;\n  constant_value = constant_value + -0x800000 + shifted_value * -0x800000;\n  if (leading_zeroes_count < 8) {\n    shifted_value = temp_value << (leading_zeroes_count + 0x18U & 0xff);\n    temp_value = constant_value + ((temp_value >> (0x20 - (leading_zeroes_count + 0x18U) & 0xff)) - ((int)shifted_value >> 0x1f));\n    if ((hash_value | shifted_value << 1) == 0) {\n      temp_value = temp_value & ~(shifted_value >> 0x1f);\n    }\n    return temp_value;\n  }\n  uint shifted_hash_value = hash_value << (shifted_value & 0xff);\n  temp_value = constant_value + (temp_value << (shifted_value & 0xff)) + (hash_value >> (0x20 - shifted_value & 0xff)) + (uint)(0x7fffffff < shifted_hash_value);\n  if (shifted_hash_value == 0x80000000) {\n    temp_value = temp_value & 0xfffffffe;\n  }\n  return temp_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c60",
            "calling": [],
            "imported": false,
            "current_name": "calculate_hash_08000c60"
        },
        "FUN_08006d68": {
            "renaming": {
                "FUN_08006d68": "FUNC_08006d68"
            },
            "code": "\ndouble FUNC_08006d68(double __x)\n\n{\n  int in_r0;\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  uint in_r1;\n  undefined4 extraout_r1;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 in_r3;\n  undefined4 unaff_r4;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  undefined4 *puVar9;\n  double in_d0;\n  double extraout_d0;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  \n  uVar11 = CONCAT44(in_r1,in_r0);\n  uVar8 = in_r1 & 0x7fffffff;\n  if (DAT_08007058 < (int)uVar8) {\n    if (((int)DAT_0800705c < (int)uVar8) || ((uVar8 == DAT_0800705c && (in_r0 != 0)))) {\n      in_d0 = (double)__aeabi_dadd();\n    }\n  }\n  else {\n    if (DAT_08007068 < (int)uVar8) {\n      fabs((double)CONCAT44(unaff_r4,in_r3));\n      if (DAT_08007070 < (int)uVar8) {\n        if (DAT_08007074 < (int)uVar8) {\n          uVar11 = __divdf3(0,DAT_0800707c,in_r0,extraout_r1);\n          iVar1 = 3;\n        }\n        else {\n          uVar11 = __subdf3();\n          uVar10 = __muldf3(in_r0,extraout_r1,0,DAT_08007078);\n          uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_0800706c);\n          uVar11 = __divdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar10,\n                            (int)((ulonglong)uVar10 >> 0x20));\n          iVar1 = 2;\n        }\n      }\n      else if (DAT_08007070 + -0xd0000 < (int)uVar8) {\n        uVar11 = __subdf3();\n        uVar10 = __aeabi_dadd(in_r0,extraout_r1,0,DAT_0800706c);\n        uVar11 = __divdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar10,\n                          (int)((ulonglong)uVar10 >> 0x20));\n        iVar1 = 1;\n      }\n      else {\n        uVar11 = __aeabi_dadd();\n        uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_0800706c);\n        uVar10 = __aeabi_dadd(in_r0,extraout_r1,0,0x40000000);\n        uVar11 = __divdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar10,\n                          (int)((ulonglong)uVar10 >> 0x20));\n        iVar1 = 0;\n      }\n    }\n    else {\n      if ((int)uVar8 <= DAT_08007068 + -0x1bc0000) {\n        uVar10 = __aeabi_dadd(in_r0,in_r1,DAT_08006ff8,DAT_08006ffc);\n        iVar1 = __aeabi_dcmpgt((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_0800706c);\n        if (iVar1 != 0) {\n          return extraout_d0;\n        }\n      }\n      iVar1 = -1;\n    }\n    uVar7 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar6 = (undefined4)uVar11;\n    uVar11 = __muldf3(uVar6,uVar7,uVar6,uVar7);\n    uVar4 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar2 = (undefined4)uVar11;\n    uVar11 = __muldf3(uVar2,uVar4,uVar2,uVar4);\n    uVar5 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar3 = (undefined4)uVar11;\n    uVar11 = __muldf3(uVar3,uVar5,DAT_08007000,DAT_08007004);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007008,DAT_0800700c);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar3,uVar5);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007010,DAT_08007014);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar3,uVar5);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007018,DAT_0800701c);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar3,uVar5);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007020,DAT_08007024);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar3,uVar5);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007028,DAT_0800702c);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar4);\n    uVar2 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar10 = __muldf3(uVar3,uVar5,DAT_08007030,DAT_08007034);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08007038,DAT_0800703c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar3,uVar5);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08007040,DAT_08007044);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar3,uVar5);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08007048,DAT_0800704c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar3,uVar5);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08007050,DAT_08007054);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar3,uVar5);\n    uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    if (iVar1 == -1) {\n      uVar11 = __aeabi_dadd((int)uVar11,uVar2,(int)uVar10,uVar3);\n      uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar6,uVar7);\n      in_d0 = (double)__subdf3(uVar6,uVar7,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n    }\n    else {\n      uVar11 = __aeabi_dadd((int)uVar11,uVar2,(int)uVar10,uVar3);\n      uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar6,uVar7);\n      puVar9 = (undefined4 *)(PTR_FUNC_08006d68hi_08007080 + iVar1 * 8);\n      uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),\n                        *(undefined4 *)(PTR_FUNC_08006d68lo_08007084 + iVar1 * 8),\n                        *(undefined4 *)((int)(PTR_FUNC_08006d68lo_08007084 + iVar1 * 8) + 4));\n      uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar6,uVar7);\n      in_d0 = (double)__subdf3(*puVar9,puVar9[1],(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n    }\n  }\n  return in_d0;\n}\n\n",
            "called": [
                "__divdf3",
                "__muldf3",
                "__aeabi_dcmpgt",
                "__aeabi_dadd",
                "fabs",
                "__subdf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006d68",
            "calling": [
                "__ieee754_atan2"
            ],
            "imported": false,
            "current_name": "FUNC_08006d68"
        },
        "FUN_08004f04": {
            "renaming": {
                "FUN_08004f04": "handle_UART_interrupt_08004f04",
                "PTR_huart1_08004f0c": "huart1_ptr",
                "UART_HandleTypeDef": "UART_HandleTypeDef",
                "HAL_UART_IRQHandler": "HAL_UART_IRQHandler"
            },
            "code": "void handle_UART_interrupt_08004f04(void)\n{\n  UART_HandleTypeDef* uart_handle = (UART_HandleTypeDef*)PTR_huart1_08004f0c;\n  HAL_UART_IRQHandler(uart_handle);\n  return;\n}",
            "called": [
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f04",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_08004f04"
        },
        "FUN_080072b8": {
            "renaming": {
                "FUN_080072b8": "allocate_memory_080072b8",
                "__delta": "delta",
                "puVar1": "heap_end",
                "pvVar2": "allocated_memory"
            },
            "code": "void * allocate_memory_080072b8(intptr_t delta)\n{\n  undefined *heap_end;\n  void *allocated_memory;\n  \n  heap_end = PTR_heap_end_4116_080072cc;\n  if (*(int *)PTR_heap_end_4116_080072cc == 0) {\n    *(undefined **)PTR_heap_end_4116_080072cc = PTR__ebss_080072d0;\n  }\n  allocated_memory = *(void **)heap_end;\n  *(intptr_t *)heap_end = delta + (int)allocated_memory;\n  return allocated_memory;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072b8",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_080072b8"
        },
        "FUN_0800581c": {
            "renaming": {
                "FUN_0800581c": "allocate_memory_0800581c",
                "param_1": "error_code",
                "param_2": "size_to_allocate",
                "puVar1": "error_ptr",
                "pvVar2": "allocated_memory"
            },
            "code": "void allocate_memory_0800581c(int *error_code, intptr_t size_to_allocate)\n{\n  undefined *error_ptr = PTR_errno_08005838;\n  *(undefined4 *)PTR_errno_08005838 = 0;\n  void *allocated_memory = _sbrk(size_to_allocate);\n  if ((allocated_memory == (void *)0xffffffff) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n  }\n  return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800581c",
            "calling": [
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_0800581c"
        },
        "FUN_08003eac": {
            "renaming": {
                "FUN_08003eac": "execute_software_interrupt_08003eac",
                "a0": "return_value",
                "a1": "interrupt_number",
                "a2": "unused_parameter"
            },
            "code": "uint32_t execute_software_interrupt_08003eac(uint32_t interrupt_number, uint32_t return_value, int32_t unused_parameter) {\n  software_interrupt(interrupt_number);\n  return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eac",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "execute_software_interrupt_08003eac"
        },
        "FUN_080072ac": {
            "renaming": {
                "FUN_080072ac": "get_impure_ptr_value_080072ac",
                "PTR__impure_ptr_080072b4": "PTR__impure_ptr_080072b4"
            },
            "code": "uint32_t get_impure_ptr_value_080072ac(void)\n{\n  uint32_t* impure_ptr = (uint32_t*)PTR__impure_ptr_080072b4;\n  return *impure_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072ac",
            "calling": [
                "asin",
                "sqrt",
                "pow"
            ],
            "imported": false,
            "current_name": "get_impure_ptr_value_080072ac"
        },
        "FUN_08000ad0": {
            "renaming": {
                "FUN_08000ad0": "FUNC_08000ad0"
            },
            "code": "\nuint FUNC_08000ad0(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_1 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = param_2;\n      if (iVar7 == -1) {\n        uVar4 = uVar2;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        param_2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == param_2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        uVar2 = param_2;\n      }\n      return uVar2;\n    }\n    if (uVar2 != param_2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      param_1 = param_1 << 1;\n      if ((uVar2 & 0x80000000) != 0) {\n        param_1 = param_1 | 0x80000000;\n      }\n      return param_1;\n    }\n    if (uVar4 < 0xfe000000) {\n      return uVar2 + 0x800000;\n    }\n    uVar2 = uVar2 & 0x80000000;\nLAB_08000c12:\n    return uVar2 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return uVar2;\n  }\n  uVar4 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  uVar2 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar6 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar6 != 0);\n    uVar6 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar5 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar5 & 0xff);\n      if ((int)uVar6 < (int)uVar5) {\n        uVar4 = uVar4 >> (-(uVar6 - uVar5) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar6 - uVar5) * 0x800000;\n      }\n      return uVar4 | uVar2;\n    }\n  }\n  else {\n    uVar6 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar6 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar6 != 0) << 0x1f | uVar3 >> 1;\n      uVar6 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000c12;\n    }\n  }\n  uVar4 = uVar4 + uVar6 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | uVar2;\n}\n\n",
            "called": [
                "__addsf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000ad0",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08000ad0"
        },
        "FUN_08002cb0": {
            "renaming": {
                "FUN_08002cb0": "read_mpu9250_data_08002cb0",
                "in_r3": "raw_accel_data",
                "rawData": "raw_mag_data",
                "_rawData": "i2c_raw_data",
                "puVar1": "mag_calib_ptr",
                "uVar2": "temp_float",
                "PTR_s____Src_MPU9250_c_08002d80": "accel_data_ptr",
                "PTR_magCalib_08002d84": "mag_calib_array"
            },
            "code": "void read_mpu9250_data_08002cb0(void)\n{\n  uint8_t rawData[3];\n  uint8_t i2c_address = 0xd0;\n  uint8_t i2c_reg_address = 0x6a;\n  uint8_t i2c_data = 0x01;\n  uint8_t i2c_slave_address = 0x18;\n  uint8_t i2c_slave_reg_address = 0xb;\n  uint8_t i2c_slave_data1 = 0x01;\n  uint8_t i2c_slave_data2 = 0x0f;\n  uint8_t i2c_slave_data3 = 0x16;\n  float magCalib[3];\n  int16_t accelData[3];\n  float accelBias[3] = {0, 0, 0};\n  uint8_t i;\n\n  I2C_WriteByte(i2c_address, 0x37, '\"', 0x01);\n  I2C_WriteByte(i2c_address, i2c_reg_address, i2c_data, 0x01);\n  I2C_ReadByte(i2c_slave_address, 0, accelData, 0xad);\n  I2C_WriteByte(i2c_slave_address, i2c_slave_reg_address, i2c_slave_data1, 0x01);\n  I2C_WriteByte(i2c_slave_address, i2c_slave_reg_address, i2c_slave_data2, 0x01);\n  I2C_ReadByteArray(i2c_slave_address, 0x10, rawData, 3, accelData, 0xb6);\n\n  for (i = 0; i < 3; i++) {\n    magCalib[i] = ((float)rawData[i] - 128.0f) / 256.0f + 1.0f;\n  }\n\n  magCalib[0] = (magCalib[0] - 1.0f) * 0.5f;\n  magCalib[1] = (magCalib[1] - 1.0f) * 0.5f;\n  magCalib[2] = (magCalib[2] - 1.0f) * 0.5f;\n\n  I2C_WriteByte(i2c_slave_address, i2c_slave_reg_address, 0, 0x01);\n  I2C_WriteByte(i2c_slave_address, i2c_slave_reg_address, i2c_slave_data3, 0x01);\n}",
            "called": [
                "__aeabi_fmul",
                "__floatsisf",
                "__addsf3",
                "I2C_ReadByteArray",
                "I2C_WriteByte",
                "I2C_ReadByte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cb0",
            "calling": [
                "IMU_Init"
            ],
            "imported": false,
            "current_name": "read_mpu9250_data_08002cb0"
        },
        "FUN_08002324": {
            "renaming": {
                "FUN_08002324": "configure_timer_08002324",
                "TIMx": "timer",
                "OC_Config": "output_config",
                "uVar1": "cr2",
                "uVar2": "output_mode",
                "uVar3": "output_polarity",
                "pTVar4": "idle_timer"
            },
            "code": "void configure_timer_08002324(TIM_TypeDef *timer, TIM_OC_InitTypeDef *output_config)\n{\n  uint32_t cr2 = timer->CR2;\n  uint32_t output_mode = output_config->OCMode;\n  uint32_t output_polarity = output_config->OCPolarity;\n  TIM_TypeDef *idle_timer = timer;\n  if (timer == idle_timer) {\n    idle_timer = (TIM_TypeDef *)output_config->OCIdleState;\n    cr2 &= 0xffffbfff;\n  }\n  if (timer == idle_timer) {\n    cr2 |= (int)idle_timer << 6;\n  }\n  timer->CR2 = cr2;\n  timer->CCMR2 = (timer->CCMR2 & 0xffff8cff) | (output_mode << 8);\n  timer->CCR4 = output_config->Pulse;\n  timer->CCER = (timer->CCER & 0xffffdfff) | (output_polarity << 0xc);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002324",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_08002324"
        },
        "FUN_08002564": {
            "renaming": {
                "FUN_08002564": "configureBreakDeadTime_08002564",
                "*htim": "tim_handle",
                "*sBreakDeadTimeConfig": "config",
                "HVar1": "status"
            },
            "code": "HAL_StatusTypeDef configureBreakDeadTime_08002564(TIM_HandleTypeDef *tim_handle, TIM_BreakDeadTimeConfigTypeDef *config)\n{\n  HAL_StatusTypeDef status = HAL_BUSY;\n  if (tim_handle->Lock != HAL_LOCKED) {\n    tim_handle->State = HAL_TIM_STATE_BUSY;\n    tim_handle->Instance->BDTR =\n         config->OffStateRunMode | config->OffStateIDLEMode |\n         config->LockLevel | config->DeadTime |\n         config->BreakState | config->BreakPolarity |\n         config->AutomaticOutput;\n    tim_handle->State = HAL_TIM_STATE_READY;\n    status = HAL_OK;\n    tim_handle->Lock = HAL_UNLOCKED;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002564",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "configureBreakDeadTime_08002564"
        },
        "FUN_08004fb0": {
            "renaming": {
                "FUN_08004fb0": "wait_forever_08004fb0"
            },
            "code": "void wait_forever_08004fb0() {\n  while(true) {\n    // do nothing\n  }\n}",
            "called": [
                "USBWakeUp_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fb0",
            "calling": [
                "USBWakeUp_IRQHandler"
            ],
            "imported": false,
            "current_name": "wait_forever_08004fb0"
        },
        "FUN_08000ad8": {
            "renaming": {
                "FUN_08000ad8": "FUNC_08000ad8"
            },
            "code": "\nuint FUNC_08000ad8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000c12:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000c12;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000ad8",
            "calling": [
                "AK8963_ReadData",
                "MadgwickQuaternionUpdate",
                "Motor_DistributeSpeed",
                "AHRS_GetYaw",
                "MPU9250_ReadGyroData",
                "lowPassFilter",
                "PID_Compute"
            ],
            "imported": false,
            "current_name": "FUNC_08000ad8"
        },
        "FUN_08003ec8": {
            "renaming": {
                "FUN_08003ec8": "addDataToCircularBuffer_08003ec8",
                "cb": "circularBuffer",
                "data": "data",
                "size": "size",
                "buffer": "buffer",
                "tail": "tail"
            },
            "code": "int addDataToCircularBuffer_08003ec8(CircularBuffer* circularBuffer, uint8_t data) {\n    circularBuffer->size++;\n    circularBuffer->buffer[circularBuffer->tail] = data;\n    circularBuffer->tail = (circularBuffer->tail + 1) & 0x7ff;\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ec8",
            "calling": [
                "HAL_UART_RxCpltCallback"
            ],
            "imported": false,
            "current_name": "addDataToCircularBuffer_08003ec8"
        },
        "FUN_08003fe8": {
            "renaming": {
                "FUN_08003fe8": "set_pwm_value_08003fe8",
                "pwm": "pwm_value",
                "PTR_htim3_08003ff0": "tim3_ptr"
            },
            "code": "void set_pwm_value_08003fe8(int pwm_value)\n{\n  int *PTR_htim3_08003ff0 = (int *)PTR_htim3_08003ff0;\n  int offset = 0x3c;\n  *(int *)(PTR_htim3_08003ff0 + offset) = pwm_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fe8",
            "calling": [
                "Motor_SetSpeed",
                "Motor_StopAll"
            ],
            "imported": false,
            "current_name": "set_pwm_value_08003fe8"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "allocate_memory_block_08005714",
                "param_1": "output",
                "param_2": "size",
                "puVar1": "start",
                "uVar2": "new_start",
                "puVar3": "free_list",
                "iVar4": "block_size",
                "puVar5": "prev",
                "uVar6": "diff",
                "puVar7": "prev"
            },
            "code": "uint allocate_memory_block_08005714(undefined4 *output, uint size)\n{\n    uint aligned_size = (size + 3 & 0xfffffffc) + 8;\n    if (aligned_size < 0xc) {\n        aligned_size = 0xc;\n    }\n    if (((int)aligned_size < 0) || (aligned_size < size)) {\n        *output = 0xc;\n    }\n    else {\n        __malloc_lock();\n        void *start = PTR___malloc_sbrk_start_080057cc;\n        uint *free_list = *(uint **)PTR___malloc_free_list_080057c8;\n        uint *prev = *(uint **)PTR___malloc_free_list_080057c8;\n        while (free_list != (uint *)0x0) {\n            uint diff = *free_list - aligned_size;\n            if (-1 < (int)diff) {\n                if (diff < 0xc) {\n                    if (prev == free_list) {\n                        uint next = prev[1];\n                        *(uint *)PTR___malloc_free_list_080057c8 = next;\n                    }\n                    else {\n                        uint next = free_list[1];\n                    }\n                    if (prev != free_list) {\n                        prev[1] = next;\n                        prev = free_list;\n                    }\n                }\n                else {\n                    *free_list = diff;\n                    *(uint *)((int)free_list + diff) = aligned_size;\n                    prev = (uint *)((int)free_list + diff);\n                }\n                goto end;\n            }\n            prev = free_list;\n            free_list = (uint *)free_list[1];\n        }\n        if (*(int *)PTR___malloc_sbrk_start_080057cc == 0) {\n            void *new_start = _sbrk_r(output);\n            *(void **)start = new_start;\n        }\n        free_list = (uint *)_sbrk_r(output, aligned_size);\n        if ((free_list != (uint *)0xffffffff) &&\n            ((prev = (uint *)((int)free_list + 3U & 0xfffffffc), free_list == prev ||\n             (_sbrk_r(output, (int)prev - (int)free_list) != -1)))) {\n            *prev = aligned_size;\n            __malloc_unlock(output);\n            uint block_start = (int)prev + 0xbU & 0xfffffff8;\n            int block_size = block_start - (int)(prev + 1);\n            if (block_size != 0) {\n                *(int *)((int)prev + block_size) = -block_size;\n                return block_start;\n            }\n            return block_start;\n        }\n        *output = 0xc;\n        __malloc_unlock(output);\n    }\n    return 0;\n}",
            "called": [
                "__malloc_unlock",
                "_sbrk_r",
                "__malloc_lock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [
                "__ssputs_r",
                "_svfiprintf_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08005714"
        },
        "FUN_08004fb4": {
            "renaming": {
                "FUN_08004fb4": "initialize_08004fb4",
                "param_1": "context",
                "puVar1": "frame_dummy_init_array_entry_2",
                "iVar2": "frame_dummy_init_array_entry_size_2",
                "iVar3": "i",
                "_init": "_init"
            },
            "code": "void initialize_08004fb4(EVP_PKEY_CTX *context)\n{\n  undefined *frame_dummy_init_array_entry = PTR___frame_dummy_init_array_entry_08004fec;\n  int frame_dummy_init_array_entry_size = (int)PTR___frame_dummy_init_array_entry_08004ff0 - (int)PTR___frame_dummy_init_array_entry_08004fec;\n  for (int i = 0; i != frame_dummy_init_array_entry_size >> 2; i++) {\n    context = (EVP_PKEY_CTX *)(**(code **)(frame_dummy_init_array_entry + i * 4))();\n  }\n  _init(context);\n  undefined *frame_dummy_init_array_entry_2 = PTR___frame_dummy_init_array_entry_08004ff4;\n  int frame_dummy_init_array_entry_size_2 = (int)PTR___do_global_dtors_aux_fini_array_entry_08004ff8 - (int)PTR___frame_dummy_init_array_entry_08004ff4;\n  for (int i = 0; i != frame_dummy_init_array_entry_size_2 >> 2; i++) {\n    (**(code **)(frame_dummy_init_array_entry_2 + i * 4))();\n  }\n  return;\n}",
            "called": [
                "frame_dummy",
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fb4",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "initialize_08004fb4"
        },
        "FUN_080009dc": {
            "renaming": {
                "FUN_080009dc": "is_CY_zero_or_ZR_080009dc",
                "in_CY": "is_CY_nonpositive",
                "in_ZR": "unused_ZR"
            },
            "code": "bool is_CY_zero_or_ZR_080009dc(void)\n{\n  bool is_CY_nonpositive = __aeabi_cdrcmple();\n  return is_CY_nonpositive || !is_CY_nonpositive;\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009dc",
            "calling": [],
            "imported": false,
            "current_name": "is_CY_zero_or_ZR_080009dc"
        },
        "FUN_08000c70": {
            "renaming": {
                "FUN_08000c70": "calculate_quotient_08000c70",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "uVar2": "dividend_copy",
                "iVar3": "num_leading_zeros",
                "uVar4": "shift_amount",
                "uVar5": "sign_bit",
                "iVar6": "scaled_sign_bit",
                "uVar7": "quotient_numerator",
                "bVar8": "dividend_is_nonzero"
            },
            "code": "uint calculate_quotient_08000c70(uint dividend, uint divisor)\n{\n    uint quotient = 0;\n    uint sign_bit = divisor & 0x80000000;\n    if (sign_bit < 0)\n    {\n        bool dividend_is_nonzero = dividend != 0;\n        dividend = -dividend;\n        divisor = -divisor - (uint)dividend_is_nonzero;\n    }\n    if (divisor == 0)\n    {\n        quotient = dividend;\n    }\n    else\n    {\n        sign_bit |= 0x5b000000;\n        if (divisor == 0)\n        {\n            sign_bit += 0xf0000000;\n        }\n        int num_leading_zeros = count_leading_zeroes(divisor);\n        uint shift_amount = num_leading_zeros - 8;\n        int scaled_sign_bit = (sign_bit - 0x800000) + shift_amount * -0x800000;\n        if (num_leading_zeros < 8)\n        {\n            uint lower_divisor_bits = divisor << (num_leading_zeros + 0x18U & 0xff);\n            uint upper_divisor_bits = divisor >> (0x20 - (num_leading_zeros + 0x18U) & 0xff);\n            uint quotient_numerator = (dividend << (num_leading_zeros & 0xff)) | (lower_divisor_bits << 1);\n            quotient = scaled_sign_bit + ((quotient_numerator >> 31) & 1) + (upper_divisor_bits - ((int)quotient_numerator >> 31));\n            if ((dividend | lower_divisor_bits) == 0)\n            {\n                quotient &= ~(lower_divisor_bits >> 0x1f);\n            }\n        }\n        else\n        {\n            uint quotient_numerator = dividend << (shift_amount & 0xff);\n            uint quotient_denominator = divisor << (shift_amount & 0xff);\n            uint quotient_numerator_high_bits = dividend >> (0x20 - shift_amount & 0xff);\n            uint quotient_numerator_has_sign_bit = (0x7fffffff < quotient_numerator_high_bits) ? 1 : 0;\n            quotient = scaled_sign_bit + quotient_numerator_has_sign_bit + quotient_numerator + quotient_denominator + (quotient_numerator_high_bits >> 31);\n            if (quotient_numerator == 0x80000000)\n            {\n                quotient &= 0xfffffffe;\n            }\n        }\n    }\n    return quotient;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c70",
            "calling": [],
            "imported": false,
            "current_name": "calculate_quotient_08000c70"
        },
        "FUN_080023d0": {
            "renaming": {
                "FUN_080023d0": "initializeTimer_080023d0",
                "htim": "timer",
                "HAL_StatusTypeDef": "return_type",
                "HAL_TIM_STATE_RESET": "timer_reset_state",
                "HAL_UNLOCKED": "unlocked_state",
                "HAL_TIM_PWM_MspInit": "initializePWM",
                "HAL_TIM_STATE_BUSY": "timer_busy_state",
                "TIM_Base_SetConfig": "setTimerConfig",
                "HAL_TIM_STATE_READY": "timer_ready_state",
                "HAL_OK": "success_status",
                "HAL_ERROR": "error_status"
            },
            "code": "HAL_StatusTypeDef initializeTimer_080023d0(TIM_HandleTypeDef *timer)\n{\n    if (timer != NULL) {\n        if (timer->State == HAL_TIM_STATE_RESET) {\n            timer->Lock = HAL_UNLOCKED;\n            HAL_TIM_PWM_MspInit(timer);\n        }\n        timer->State = HAL_TIM_STATE_BUSY;\n        TIM_Base_SetConfig(timer->Instance, &(timer->Init));\n        timer->State = HAL_TIM_STATE_READY;\n        return HAL_OK;\n    }\n    return HAL_ERROR;\n}",
            "called": [
                "HAL_TIM_PWM_MspInit",
                "TIM_Base_SetConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080023d0",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "initializeTimer_080023d0"
        },
        "FUN_08000a30": {
            "renaming": {
                "FUN_08000a30": "calculate_float_to_int_bits_08000a30",
                "param_1": "float_bits",
                "param_2": "sign_bit",
                "uVar1": "exponent_bits",
                "uVar2": "shifted_exponent_bits",
                "uVar3": "shifted_fraction_bits",
                "in_r12": "temp_fraction_bits",
                "bVar4": "is_floating_point_zero",
                "bVar5": "is_shifted_exponent_less_than_0x70000000"
            },
            "code": "uint calculate_float_to_int_bits_08000a30(uint float_bits, uint sign_bit) {\n  uint exponent_bits;\n  uint fraction_bits;\n  uint shifted_fraction_bits;\n  bool is_exponent_negative;\n  bool is_exponent_zero;\n  bool is_fraction_zero;\n  \n  exponent_bits = (float_bits & 0x7f800000) >> 0x17;\n  fraction_bits = float_bits & 0x7fffff;\n  shifted_fraction_bits = fraction_bits << 1 | 0x100000;\n  is_exponent_negative = exponent_bits >> 0x8 == 1;\n  is_exponent_zero = exponent_bits == 0;\n  is_fraction_zero = fraction_bits == 0;\n  \n  if (is_exponent_negative || exponent_bits >= 0x9e) {\n    if ((sign_bit & 0x40000000) != 0) {\n      if (((int)exponent_bits >> 0x15 == -1) && ((float_bits | sign_bit << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return sign_bit & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(exponent_bits + 0x71e00000) < 0 != SCARRY4(shifted_fraction_bits,0x2e00000)) {\n      return sign_bit & 0x80000000;\n    }\n    exponent_bits = 0x18 - (exponent_bits + 0x71e00000 >> 0x15);\n    fraction_bits = float_bits >> (exponent_bits & 0xff);\n    if (float_bits << (0x20 - exponent_bits & 0xff) != 0) {\n      fraction_bits = fraction_bits | 1;\n    }\n    shifted_fraction_bits = shifted_fraction_bits & 0x1fffff | 0x100000;\n    shifted_fraction_bits = (shifted_fraction_bits >> (exponent_bits & 0xff)) << 1;\n  }\n  exponent_bits = (sign_bit & 0x80000000 | fraction_bits >> 0x1d) + shifted_fraction_bits * 4 + (uint)(0x7fffffff < fraction_bits * 8);\n  if (fraction_bits * 8 == 0x80000000) {\n    exponent_bits = exponent_bits & 0xfffffffe;\n  }\n  return exponent_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a30",
            "calling": [
                "MS5611_Update",
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "calculate_float_to_int_bits_08000a30"
        },
        "FUN_08003fdc": {
            "renaming": {
                "FUN_08003fdc": "set_pwm_value_08003fdc",
                "pwm": "pwm_value",
                "PTR_htim2_08003fe4": "htim2_ptr"
            },
            "code": "void set_pwm_value_08003fdc(int pwm_value)\n{\n  int* PTR_htim2_08003fe4 = *(int *)PTR_htim2_08003fe4;\n  int offset = 0x38;\n  int* pwm_register_ptr = (int *)(PTR_htim2_08003fe4 + offset);\n  *pwm_register_ptr = pwm_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fdc",
            "calling": [
                "Motor_SetSpeed",
                "Motor_StopAll"
            ],
            "imported": false,
            "current_name": "set_pwm_value_08003fdc"
        },
        "FUN_080009f0": {
            "renaming": {
                "FUN_080009f0": "is_end_of_string_080009f0",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_080009f0(void)\n{\n  char current_char;\n  __aeabi_cdrcmple();\n  return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009f0",
            "calling": [
                "asin",
                "atan",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "is_end_of_string_080009f0"
        },
        "FUN_08004f10": {
            "renaming": {
                "FUN_08004f10": "set_bit_and_clear_flags_08004f10",
                "puVar1": "data_ptr",
                "DAT_08004f50": "PTR_DATA",
                "DAT_08004f54": "PTR_FLAG",
                "DAT_08004f58": "PTR_FLAG2"
            },
            "code": "void set_bit_and_clear_flags_08004f10(void)\n{\n  uint32_t *data_ptr;\n  data_ptr = DAT_08004f50;\n  *DAT_08004f50 = *DAT_08004f50 | 1;\n  data_ptr[1] = DAT_08004f54 & data_ptr[1];\n  *data_ptr = *data_ptr & 0xfef6ffff;\n  *data_ptr = *data_ptr & 0xfffbffff;\n  data_ptr[1] = data_ptr[1] & 0xff80ffff;\n  data_ptr[2] = 0x9f0000;\n  *(uint32_t *)(DAT_08004f58 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f10",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "set_bit_and_clear_flags_08004f10"
        },
        "FUN_08005044": {
            "renaming": {
                "FUN_08005044": "resize_buffer_08005044",
                "param_1": "error_code",
                "param_2": "buffer",
                "param_3": "data",
                "param_4": "end_of_data",
                "pvVar1": "new_buffer",
                "pvVar2": "new_end_of_buffer",
                "__n": "data_length",
                "PTR_": "current_",
                "DAT_": "flags"
            },
            "code": "int resize_buffer_08005044(unsigned int *error_code, void **buffer, void *data, void *end_of_data) {\n  void *new_buffer;\n  void *new_end_of_buffer;\n  size_t data_length;\n  unsigned short DAT_;\n  void *PTR_end_of_buffer = (*buffer) + (unsigned int)(*buffer);\n  void *PTR_start_of_data = (*buffer) + (unsigned int)(*buffer + 16);\n  void *new_start_of_data;\n  if ((end_of_data <= PTR_end_of_buffer) && ((*(unsigned short *)(*buffer + 6) & 1152) != 0)) {\n    data_length = (int)(*buffer) - (int)(*buffer + 16);\n    new_end_of_buffer = (void *)((unsigned int)(*buffer + 20) * 3) / 2;\n    new_start_of_data = (void *)((int)end_of_data + data_length + 1);\n    if (new_end_of_buffer < new_start_of_data) {\n      new_end_of_buffer = new_start_of_data;\n    }\n    if ((int)((unsigned int)*(unsigned short *)(*buffer + 6) << 21) < 0) {\n      new_buffer = (void *)malloc(*error_code, new_end_of_buffer);\n      if (new_buffer == (void *)0x0) {\n        *error_code = 12;\n        *(unsigned short *)(*buffer + 6) = *(unsigned short *)(*buffer + 6) | 64;\n        return -1;\n      }\n      memcpy(new_buffer, PTR_start_of_data, data_length);\n      *(unsigned short *)(*buffer + 6) = *(unsigned short *)(*buffer + 6) & 64255 | 128;\n    }\n    else {\n      new_buffer = (void *)realloc(*error_code, *buffer, new_end_of_buffer);\n      if (new_buffer == (void *)0x0) {\n        free(*error_code, *buffer);\n        *error_code = 12;\n        *(unsigned short *)(*buffer + 6) = *(unsigned short *)(*buffer + 6) | 64;\n        return -1;\n      }\n    }\n    *buffer = new_buffer;\n    *buffer = (void *)((int)new_buffer + data_length);\n    *(unsigned int *)(*buffer + 16) = new_end_of_buffer;\n    *(unsigned int *)(*buffer + 8) = (unsigned int)new_end_of_buffer - (unsigned int)*buffer - data_length;\n    PTR_end_of_buffer = end_of_data;\n  }\n  if (end_of_data <= PTR_end_of_buffer) {\n    PTR_end_of_buffer = end_of_data;\n  }\n  memmove(PTR_start_of_data, data, (size_t)PTR_end_of_buffer - (size_t)end_of_data);\n  *(unsigned int *)(*buffer + 8) = *(unsigned int *)(*buffer + 8) - (unsigned int)PTR_end_of_buffer + (unsigned int)end_of_data;\n  *buffer = (void *)((int)PTR_end_of_buffer + (int)*buffer);\n  return 0;\n}",
            "called": [
                "_free_r",
                "memmove",
                "_malloc_r",
                "_realloc_r",
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005044",
            "calling": [
                "_svfiprintf_r"
            ],
            "imported": false,
            "current_name": "resize_buffer_08005044"
        },
        "FUN_08004194": {
            "renaming": {
                "FUN_08004194": "initializeComponents_08004194",
                "Devices_Init": "initializeDevices",
                "serialBegin": "initializeSerialCommunication",
                "IMU_Init": "initializeIMU",
                "MS5611_Init": "initializeMS5611",
                "PID_Init": "initializePID"
            },
            "code": "void initializeComponents_08004194(void)\n{\n  initializeDevices();\n  initializeSerialCommunication();\n  initializeIMU();\n  initializeMS5611();\n  initializePID();\n  return;\n}",
            "called": [
                "Devices_Init",
                "PID_Init",
                "MS5611_Init",
                "IMU_Init",
                "serialBegin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004194",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initializeComponents_08004194"
        },
        "FUN_08001240": {
            "renaming": {
                "FUN_08001240": "set_clock_source_08001240",
                "CLKSource": "clock_source",
                "uVar1": "clock_register_value",
                "DAT_08001254": "clock_register"
            },
            "code": "void set_clock_source_08001240(uint32_t CLKSource)\n{\n  uint32_t DAT_08001254_value;\n  if (CLKSource == 4) {\n    DAT_08001254_value = *DAT_08001254 | 4;\n  }\n  else {\n    DAT_08001254_value = *DAT_08001254 & 0xfffffffb;\n  }\n  *DAT_08001254 = DAT_08001254_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001240",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "set_clock_source_08001240"
        },
        "FUN_08005840": {
            "renaming": {
                "FUN_08005840": "calculate_value_08005840",
                "param_1": "initial_value",
                "param_2": "data",
                "iVar1": "index",
                "*(int *)(param_2 + -4)": "data[initial_value - 4]",
                "*(int *)(param_2 + iVar1)": "data[index]"
            },
            "code": "int calculate_value_08005840(int initial_value, int* data)\n{\n  int index = initial_value - 4;\n  if (initial_value < 0) {\n    index += data[index];\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005840",
            "calling": [
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "calculate_value_08005840"
        },
        "FUN_08000150": {
            "renaming": {
                "FUN_08000150": "calculate_string_length_08000150",
                "__s": "string",
                "pcVar3": "char_ptr",
                "cVar1": "current_char",
                "pcVar2": "next_char_ptr"
            },
            "code": "size_t calculate_string_length_08000150(char *string)\n{\n  char current_char;\n  char *char_ptr = string;\n  while (current_char = *char_ptr++) {\n  }\n  size_t length = char_ptr - string - 1;\n  return length;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000150",
            "calling": [
                "serialPrint"
            ],
            "imported": false,
            "current_name": "calculate_string_length_08000150"
        },
        "FUN_08003f3c": {
            "renaming": {
                "FUN_08003f3c": "set_LED_state_08003f3c",
                "led_white": "white_LED_state",
                "led_red": "red_LED_state",
                "led_blue": "blue_LED_state",
                "GPIOx": "GPIO_port",
                "uVar1": "leading_zeroes_count",
                "DAT_08003f78": "led_GPIO_port"
            },
            "code": "void set_LED_state_08003f3c(int white_LED_state, int red_LED_state, int blue_LED_state)\n{\n  GPIO_TypeDef *GPIO_port;\n  uint32_t leading_zeroes_count;\n\n  GPIO_port = DAT_08003f78;\n  leading_zeroes_count = count_leading_zeroes(white_LED_state);\n  HAL_GPIO_WritePin(DAT_08003f78, 0x8000, (GPIO_PinState)(leading_zeroes_count >> 5));\n  leading_zeroes_count = count_leading_zeroes(red_LED_state);\n  HAL_GPIO_WritePin(GPIO_port, 0x4000, (GPIO_PinState)(leading_zeroes_count >> 5));\n  leading_zeroes_count = count_leading_zeroes(blue_LED_state);\n  HAL_GPIO_WritePin(GPIO_port, 0x2000, (GPIO_PinState)(leading_zeroes_count >> 5));\n  return;\n}",
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f3c",
            "calling": [
                "PID_Update",
                "LED_StartupSequence"
            ],
            "imported": false,
            "current_name": "set_LED_state_08003f3c"
        },
        "FUN_08002214": {
            "renaming": {
                "FUN_08002214": "get_SystemCoreClock_08002214",
                "PTR_SystemCoreClock_0800221c": "system_core_clock_ptr"
            },
            "code": "uint32_t get_SystemCoreClock_08002214(void)\n{\n    uint32_t* PTR_SystemCoreClock_0800221c = (uint32_t*)PTR_SystemCoreClock_0800221c;\n    return *PTR_SystemCoreClock_0800221c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002214",
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "get_SystemCoreClock_08002214"
        },
        "FUN_08003ff4": {
            "renaming": {
                "FUN_08003ff4": "start_pwm_timers_08003ff4",
                "htim": "htim4_ptr",
                "PTR_htim2_08004020": "htim2_ptr",
                "PTR_htim3_08004024": "htim3_ptr"
            },
            "code": "void start_pwm_timers_08003ff4(void)\n{\n  TIM_HandleTypeDef *htim4_ptr;\n  TIM_HandleTypeDef *PTR_htim2_08004020;\n  TIM_HandleTypeDef *PTR_htim3_08004024;\n  htim4_ptr = PTR_htim4_0800401c;\n  PTR_htim2_08004020 = (TIM_HandleTypeDef *)PTR_htim2_08004020;\n  PTR_htim3_08004024 = (TIM_HandleTypeDef *)PTR_htim3_08004024;\n  HAL_TIM_PWM_Start(PTR_htim2_08004020, 4);\n  HAL_TIM_PWM_Start(PTR_htim3_08004024, 8);\n  HAL_TIM_PWM_Start(htim4_ptr, 8);\n  HAL_TIM_PWM_Start(htim4_ptr, 0xc);\n  return;\n}",
            "called": [
                "HAL_TIM_PWM_Start"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ff4",
            "calling": [
                "Devices_Init"
            ],
            "imported": false,
            "current_name": "start_pwm_timers_08003ff4"
        },
        "FUN_08001004": {
            "renaming": {
                "FUN_08001004": "compare_and_concatenate_08001004",
                "param_1": "first_float",
                "param_2": "second_float"
            },
            "code": "float32_t compare_and_concatenate_08001004(float32_t param_1, float32_t param_2) {\n  __cmpsf2();\n  return CONCAT44(param_2, param_1);\n}",
            "called": [
                "__cmpsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001004",
            "calling": [
                "__aeabi_fcmple",
                "__aeabi_cfrcmple",
                "__aeabi_fcmpeq",
                "__aeabi_fcmplt"
            ],
            "imported": false,
            "current_name": "compare_and_concatenate_08001004"
        },
        "FUN_08001128": {
            "renaming": {
                "FUN_08001128": "initialize_peripherals_08001128",
                "FUN_08001128Tick": "initialize_peripherals_tick",
                "HAL_StatusTypeDef": "HAL status type definition",
                "HAL_NVIC_SetPriorityGrouping": "Set NVIC priority grouping",
                "HAL_MspInit": "Initialize Msp",
                "DAT_08001148": "PTR_TO_DAT_08001148"
            },
            "code": "HAL_StatusTypeDef initialize_peripherals_08001128(void)\n{\n  *DAT_08001148 = *DAT_08001148 | 0x10;\n  HAL_NVIC_SetPriorityGrouping(3);\n  initialize_peripherals_08001128_tick(0);\n  HAL_MspInit();\n  return HAL_OK;\n}",
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_InitTick",
                "HAL_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001128",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "initialize_peripherals_08001128"
        },
        "FUN_08004514": {
            "renaming": {
                "FUN_08004514": "initialize_system_clock_08004514",
                "HVar1": "status",
                "uVar3": "hclk_frequency",
                "FLatency": "latency",
                "RCC_ClkInitStruct": "clock_init_struct",
                "RCC_OscInitStruct": "oscillator_init_struct",
                "puVar2": "not_renamed",
                "line": "not_renamed"
            },
            "code": "void initialize_system_clock_08004514(void)\n{\n  HAL_StatusTypeDef status;\n  uint32_t latency;\n  RCC_ClkInitTypeDef clock_init_struct;\n  RCC_OscInitTypeDef oscillator_init_struct;\n  \n  oscillator_init_struct.HSIState = RCC_HSI_ON;\n  oscillator_init_struct.HSICalibrationValue = 0x10;\n  latency = FLASH_ACR_LATENCY_2WS;\n  oscillator_init_struct.PLL.PLLSource = RCC_PLLSOURCE_HSI;\n  oscillator_init_struct.OscillatorType = RCC_OSCILLATORTYPE_HSI;\n  oscillator_init_struct.PLL.PLLState = RCC_PLL_ON;\n  oscillator_init_struct.PLL.PLLMUL = RCC_PLL_MUL16;\n  status = HAL_RCC_OscConfig(&oscillator_init_struct);\n  if (status != HAL_OK)\n  {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  \n  clock_init_struct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK\n                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;\n  clock_init_struct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;\n  clock_init_struct.AHBCLKDivider = RCC_SYSCLK_DIV1;\n  clock_init_struct.APB1CLKDivider = RCC_HCLK_DIV4;\n  clock_init_struct.APB2CLKDivider = RCC_HCLK_DIV2;\n  status = HAL_RCC_ClockConfig(&clock_init_struct, latency);\n  if (status != HAL_OK)\n  {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  \n  uint32_t hclk_frequency = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(hclk_frequency / 1000);\n  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);\n  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);\n}\n",
            "called": [
                "HAL_RCC_OscConfig",
                "HAL_SYSTICK_CLKSourceConfig",
                "HAL_NVIC_SetPriority",
                "HAL_RCC_GetHCLKFreq",
                "HAL_RCC_ClockConfig",
                "_Error_Handler",
                "HAL_SYSTICK_Config"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004514",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "initialize_system_clock_08004514"
        },
        "FUN_08004a84": {
            "renaming": {
                "FUN_08004a84": "flightControl_08004a84",
                "puVar1": "pitch_pid",
                "puVar2": "roll_pid",
                "puVar3": "yaw_pid",
                "puVar4": "msp_txf_pid",
                "puVar5": "pid_altitude",
                "extraout_s0": "throttle",
                "extraout_s0_00": "throttle",
                "extraout_s1": "pitch",
                "extraout_s1_00": "pitch",
                "extraout_s2": "roll",
                "extraout_s2_00": "roll",
                "extraout_s3": "yaw",
                "extraout_s3_00": "yaw",
                "iVar7": "comparison_result",
                "uVar6": "converted_float"
            },
            "code": "void flightControl_08004a84()\n{\n  float throttle, pitch, roll, yaw;\n  float altitude, pitch_pid, roll_pid, yaw_pid, altitude_pid;\n  AHRS_GetPitch();\n  pitch_pid = PID_pitch;\n  *(float *)(pitch_pid + 0x30) = AHRS_pitch;\n  AHRS_GetRoll();\n  roll_pid = PID_roll;\n  *(float *)(roll_pid + 0x30) = AHRS_roll;\n  AHRS_GetYaw();\n  yaw_pid = PID_yaw;\n  *(float *)(yaw_pid + 0x30) = AHRS_yaw;\n  altitude_pid = PID_altitude;\n  *(float *)(altitude_pid + 0x30) = AHRS_altitude;\n  flightControl_08004a84Altitude();\n  if (AHRS_pitch > 0 && AHRS_pitch < 45 && AHRS_roll > 0 && AHRS_roll < 45)\n  {\n    toggleLED(1, 1, 1);\n    PID_Compute((PID_TypeDef *)pitch_pid);\n    PID_Compute((PID_TypeDef *)roll_pid);\n    PID_Compute((PID_TypeDef *)yaw_pid);\n    throttle = PID_Compute((PID_TypeDef *)altitude_pid);\n    pitch = PID_Compute((PID_TypeDef *)pitch_pid);\n    roll = PID_Compute((PID_TypeDef *)roll_pid);\n    yaw = PID_Compute((PID_TypeDef *)yaw_pid);\n    if (joystick[1] != 0)\n    {\n      throttle += joystick[1];\n    }\n    Motor_DistributeSpeed(throttle, pitch, roll, yaw);\n  }\n  else\n  {\n    Motor_StopAll();\n    toggleLED(0, 1, 0);\n  }\n}\n",
            "called": [
                "__aeabi_fcmpgt",
                "AHRS_GetPitch",
                "Motor_DistributeSpeed",
                "AHRS_GetRoll",
                "AHRS_GetYaw",
                "PID_Compute",
                "Motor_StopAll",
                "__aeabi_fcmplt",
                "PID_UpdateAltitude",
                "__aeabi_fmul",
                "toggleLED",
                "__addsf3",
                "__fixunssfsi"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a84",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "flightControl_08004a84"
        },
        "FUN_080057d0": {
            "renaming": {
                "FUN_080057d0": "allocate_memory_080057d0",
                "param_1": "size",
                "param_2": "ptr1",
                "param_3": "ptr2",
                "param_4": "size2",
                "pvVar1": "new_ptr",
                "pvVar2": "usable_size_ptr"
            },
            "code": "void * allocate_memory_080057d0(size_t size, void *ptr1, void *ptr2, size_t size2)\n{\n  void *new_ptr;\n  void *usable_size_ptr;\n  \n  if (ptr1 != NULL) {\n    if (ptr2 == NULL) {\n      free(ptr1);\n      new_ptr = ptr2;\n    }\n    else {\n      usable_size_ptr = malloc_usable_size(ptr1);\n      new_ptr = ptr1;\n      if ((usable_size_ptr < ptr2) && (new_ptr = malloc(size2), new_ptr != NULL)\n         ) {\n        memcpy(new_ptr, ptr1, size2);\n        free(ptr1);\n      }\n    }\n    return new_ptr;\n  }\n  new_ptr = malloc(size2);\n  return new_ptr;\n}",
            "called": [
                "_free_r",
                "_malloc_usable_size_r",
                "_malloc_r",
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057d0",
            "calling": [
                "__ssputs_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_080057d0"
        },
        "FUN_080072d4": {
            "renaming": {
                "FUN_080072d4": "get_context_pointer_080072d4",
                "ctx": "context_pointer"
            },
            "code": "int get_context_pointer_080072d4(EVP_PKEY_CTX *context_pointer)\n{\n  return (int)context_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072d4",
            "calling": [
                "__do_global_dtors_aux",
                "frame_dummy",
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "get_context_pointer_080072d4"
        },
        "FUN_0800583c": {
            "renaming": {
                "FUN_0800583c": "do_nothing_0800583c"
            },
            "code": "\nvoid do_nothing_0800583c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583c",
            "calling": [
                "_free_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0800583c"
        },
        "FUN_08000adc": {
            "renaming": {
                "FUN_08000adc": "FUNC_08000adc"
            },
            "code": "\nuint FUNC_08000adc(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000c12:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_08000c12;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000adc",
            "calling": [
                "__aeabi_frsub",
                "MS5611_Update",
                "MadgwickQuaternionUpdate",
                "Motor_DistributeSpeed",
                "PID_Update",
                "AHRS_GetYaw",
                "lowPassFilter",
                "AK8963_Init",
                "PID_Compute"
            ],
            "imported": false,
            "current_name": "FUNC_08000adc"
        },
        "FUN_0800583e": {
            "renaming": {
                "FUN_0800583e": "do_nothing_0800583e"
            },
            "code": "\nvoid do_nothing_0800583e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583e",
            "calling": [
                "_free_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0800583e"
        },
        "FUN_08000160": {
            "renaming": {
                "FUN_08000160": "FUNC_08000160"
            },
            "code": "\nulonglong FUNC_08000160(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar4 = param_2 ^ 0x80000000;\n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((uVar4 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = uVar4;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((uVar4 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        uVar4 = param_4;\n      }\n      return CONCAT44(uVar4,param_1);\n    }\n    if (uVar4 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(uVar4,uVar4) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(uVar4 + 0x100000,param_1);\n    }\n    uVar4 = uVar4 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(uVar4 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar12 = uVar4;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar12 = param_4;\n    param_3 = param_1;\n    param_4 = uVar4;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar12,uVar8);\n  }\n  uVar9 = uVar12 & 0xfffff | 0x100000;\n  if ((uVar12 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar4 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar4 = uVar4 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar5 = uVar4 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar5;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar4 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar11 = uVar4 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar4 = (int)uVar4 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar4;\n    uVar9 = uVar9 + ((int)uVar4 >> 0x1f) + (uint)CARRY4(uVar8,uVar4);\n  }\n  uVar4 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | uVar4,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000278;\n  uVar3 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar3 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar3 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar3 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar3 = uVar3 << (uVar10 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | uVar4,uVar3);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar3 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(uVar4 | uVar7 >> (uVar10 & 0xff),\n                    uVar3 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [
                "__aeabi_dadd"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000160",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08000160"
        },
        "FUN_08002220": {
            "renaming": {
                "FUN_08002220": "get_SystemCoreClock_08002220",
                "uVar1": "leading_zeroes",
                "PTR_SystemCoreClock_0800224c": "apb_prescaler_value_ptr",
                "PTR_APBPrescTable_08002248": "apb_prescaler_table_ptr",
                "DAT_08002244": "apb1_peripheral_base_address"
            },
            "code": "uint32_t get_SystemCoreClock_08002220(void)\n{\n  uint32_t leading_zeroes = count_leading_zeroes(0xe00000);\n  uint32_t apb_prescaler_index = (*(uint32_t *)(DAT_08002244 + 4) & 0x700) >> (leading_zeroes & 0xff);\n  uint32_t apb_prescaler_value = *(uint32_t *)PTR_SystemCoreClock_0800224c >> PTR_APBPrescTable_08002248[apb_prescaler_index];\n  return apb_prescaler_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002220",
            "calling": [
                "UART_SetConfig",
                "HAL_I2C_Init"
            ],
            "imported": false,
            "current_name": "get_SystemCoreClock_08002220"
        },
        "FUN_08003314": {
            "renaming": {
                "FUN_08003314": "update_beta_08003314",
                "_beta": "new_beta",
                "in_r0": "beta_value",
                "PTR_beta_0800331c": "beta_ptr"
            },
            "code": "void update_beta_08003314(float new_beta)\n{\n  int* PTR_beta_0800331c = (int*) PTR_beta_0800331c;\n  *PTR_beta_0800331c = (int) new_beta;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003314",
            "calling": [
                "IMU_Init"
            ],
            "imported": false,
            "current_name": "update_beta_08003314"
        },
        "FUN_08005854": {
            "renaming": {
                "FUN_08005854": "calculate_result_08005854",
                "__x": "input",
                "puVar1": "fdlib_version_ptr",
                "iVar2": "compare_result",
                "puVar3": "errno_ptr",
                "dVar4": "result",
                "extraout_d0": "result",
                "extraout_d0_00": "result",
                "extraout_d0_01": "result",
                "extraout_d0_02": "result",
                "in_stack_ffffffb8": "int_input",
                "in_stack_ffffffbc": "char_ptr"
            },
            "code": "double calculate_result_08005854(double input){\n    undefined *fdlib_version_ptr;\n    int compare_result;\n    undefined4 *errno_ptr;\n    double result;\n    double absolute_value;\n    char *char_ptr;\n    int int_input = (int)input;\n\n    result = (double)__ieee754_calculate_result_08005854();\n    fdlib_version_ptr = PTR___fdlib_version_080058f8;\n    if ((*PTR___fdlib_version_080058f8 != -1) &&\n         (compare_result = __unorddf2(), result = extraout_d0, compare_result == 0)) {\n        absolute_value = fabs(input);\n        compare_result = __aeabi_dcmpgt();\n        result = extraout_d0_00;\n        char_ptr = PTR___fdlib_version_080058f8;\n        if ((compare_result != 0) &&\n             ((nan(PTR_DAT_080058f4), *fdlib_version_ptr == '\\x02' ||\n               (compare_result = matherr((exception *)&stack0xffffffb8), result = extraout_d0_02, compare_result == 0)))) {\n            errno_ptr = (undefined4 *)__errno();\n            *errno_ptr = 0x21;\n            result = extraout_d0_01;\n        }\n    }\n    return result;\n}",
            "called": [
                "__unorddf2",
                "__aeabi_dcmpgt",
                "fabs",
                "matherr",
                "__errno",
                "nan",
                "__ieee754_asin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005854",
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "calculate_result_08005854"
        },
        "FUN_08000168": {
            "renaming": {
                "FUN_08000168": "FUNC_08000168"
            },
            "code": "\nulonglong FUNC_08000168(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_08000278;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000168",
            "calling": [
                "MS5611_Update",
                "__ieee754_atan2",
                "__ieee754_sqrt",
                "atan",
                "rint",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "FUNC_08000168"
        },
        "FUN_080072e0": {
            "renaming": {
                "FUN_080072e0": "do_nothing_080072e0"
            },
            "code": "\nvoid do_nothing_080072e0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072e0",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080072e0"
        },
        "FUN_08001014": {
            "renaming": {
                "<original_function_name>": "FUN_08001014",
                "in_ZR": "inputChar",
                "FUN_08001014": "compareChar_08001014"
            },
            "code": "bool compareChar_08001014(char inputChar){\n                      __aeabi_cfcmpeq();\n                      return inputChar != \"\\0\";\n                    }",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001014",
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "compareChar_08001014"
        },
        "FUN_080071c0": {
            "renaming": {
                "FUN_080071c0": "calculate_080071c0",
                "__x": "x",
                "__n": "n",
                "in_r1": "temp1",
                "extraout_r1": "temp2",
                "in_r2": "temp3",
                "uVar1": "shift",
                "iVar2": "sum",
                "in_d0": "result",
                "dVar3": "result"
            },
            "code": "double calculate_080071c0(double x, int n)\n{\n    uint shift;\n    int temp1;\n    int temp2;\n    uint temp3;\n    double result;\n    \n    shift = (temp1 << 1) >> 0x15;\n    \n    if (shift == 0) {\n        if ((temp1 & 0x7fffffff | n) == 0) {\n            return result;\n        }\n        result = (double)__muldf3(n, temp1, 0, DAT_08007290);\n        if (temp2 < DAT_08007294) {\n            goto LAB_0800722e;\n        }\n        shift = ((uint)(temp3 << 1) >> 0x15) - 0x36;\n    }\n    else if (shift == 0x7ff) {\n        result = (double)__aeabi_dadd(n, temp1, n);\n        return result;\n    }\n    \n    int sum = shift + temp2;\n    \n    if (sum < 0x7ff) {\n        if (0 < sum) {\n            return result;\n        }\n        if (sum + 0x35 < 0 == SCARRY4(sum, 0x35)) {\n            goto LAB_0800722e;\n        }\n        if (temp2 < 0xc351) {\n            copysign((double)CONCAT44(unaff_r4, temp3), (double)CONCAT44(unaff_r6, unaff_r5));\n            goto LAB_0800722e;\n        }\n    }\n    copysign((double)CONCAT44(unaff_r4, temp3), (double)CONCAT44(unaff_r6, unaff_r5));\n    \nLAB_0800722e:\n    result = (double)__muldf3();\n    return result;\n}",
            "called": [
                "__muldf3",
                "__aeabi_dadd",
                "copysign"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080071c0",
            "calling": [
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "calculate_080071c0"
        },
        "FUN_08001258": {
            "renaming": {
                "FUN_08001258": "do_nothing_08001258"
            },
            "code": "\nvoid do_nothing_08001258(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001258",
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08001258"
        },
        "FUN_08005614": {
            "renaming": {
                "FUN_08005614": "find_byte_in_memory_08005614",
                "__s": "memory",
                "__c": "byte_to_find",
                "__n": "memory_size",
                "pbVar1": "memory_ptr",
                "pbVar2": "byte_ptr"
            },
            "code": "void * find_byte_in_memory_08005614(void *memory, int byte_to_find, size_t memory_size) {\n  unsigned char *memory_ptr = (unsigned char *)memory;\n  for (size_t i = 0; i < memory_size; i++) {\n    if (*memory_ptr == (unsigned char)byte_to_find) {\n      return (void *)memory_ptr;\n    }\n    memory_ptr++;\n  }\n  return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005614",
            "calling": [
                "_svfiprintf_r",
                "_printf_i"
            ],
            "imported": false,
            "current_name": "find_byte_in_memory_08005614"
        },
        "FUN_08000724": {
            "renaming": {
                "FUN_08000724": "FUNC_08000724"
            },
            "code": "\nulonglong FUNC_08000724(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = calculateResult_08000892();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_08000842;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_08000842:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_08000892"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000724",
            "calling": [
                "__ieee754_atan2",
                "MadgwickQuaternionUpdate",
                "sqrt",
                "__ieee754_sqrt",
                "atan",
                "pow",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "FUNC_08000724"
        },
        "FUN_080070a4": {
            "renaming": {
                "FUN_080070a4": "calculate_tagb_value_080070a4",
                "__tagb": "tagb",
                "in_d0": "tagb_value"
            },
            "code": "double calculate_tagb_value_080070a4(char* tagb) {\n  double tagb_value = 0.0;\n  // TODO: Add code to calculate tagb_value\n  return tagb_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080070a4",
            "calling": [
                "asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "calculate_tagb_value_080070a4"
        },
        "FUN_0800407c": {
            "renaming": {
                "FUN_0800407c": "read_i2c_byte_0800407c",
                "device_add": "device_address",
                "register_add": "register_address",
                "file": "file_name",
                "line": "line_number",
                "HVar1": "status",
                "byte": "byte_buffer"
            },
            "code": "uint8_t read_i2c_byte_0800407c(uint16_t device_address, uint16_t register_address, char *file_name, int line_number) {\\n    HAL_StatusTypeDef status;\\n    uint8_t byte_buffer[1];\\n    byte_buffer[0] = \"\\0\";\\n    status = HAL_I2C_Mem_Read((I2C_HandleTypeDef *)PTR_hi2c1_080040b4, device_address, register_address, 1, byte_buffer, 1, 200);\\n    if (status != HAL_OK) {\\n        _Error_Handler(file_name, line_number);\\n    }\\n    return byte_buffer[0];\\n}",
            "called": [
                "HAL_I2C_Mem_Read",
                "_Error_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800407c",
            "calling": [
                "MPU9250_Init",
                "AK8963_ReadData",
                "I2C_ReadByteArray",
                "AK8963_Init"
            ],
            "imported": false,
            "current_name": "read_i2c_byte_0800407c"
        },
        "FUN_08001938": {
            "renaming": {
                "FUN_08001938": "FUNC_08001938"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nHAL_StatusTypeDef\nFUNC_08001938(I2C_HandleTypeDef *hi2c,uint16_t DevAddress,uint16_t MemAddress,uint16_t MemAddSize\n                ,uint8_t *pData,uint16_t Size,uint32_t Timeout)\n\n{\n  uint8_t *puVar1;\n  HAL_StatusTypeDef HVar2;\n  uint32_t uVar3;\n  uint32_t uVar4;\n  I2C_TypeDef *pIVar5;\n  uint uVar6;\n  uint8_t *puVar7;\n  bool bVar8;\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_2;\n  \n  if (hi2c->State != HAL_I2C_STATE_READY) {\n    return HAL_BUSY;\n  }\n  if (pData == (uint8_t *)0x0) {\n    return HAL_ERROR;\n  }\n  if (Size == 0) {\n    return HAL_ERROR;\n  }\n  uVar3 = HAL_GetTick();\n  while (pIVar5 = hi2c->Instance, (~pIVar5->SR2 & 2) == 0) {\n    uVar4 = HAL_GetTick();\n    if (10000 < uVar4 - uVar3) {\n      hi2c->Lock = HAL_UNLOCKED;\n      hi2c->State = HAL_I2C_STATE_READY;\n      return HAL_BUSY;\n    }\n  }\n  if (hi2c->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n  uVar6 = pIVar5->CR1;\n  hi2c->Lock = HAL_LOCKED;\n  pIVar5->CR1 = uVar6 & 0xfffff7ff;\n  hi2c->State = HAL_I2C_STATE_BUSY_RX;\n  hi2c->Mode = HAL_I2C_MODE_MEM;\n  hi2c->ErrorCode = 0;\n  HVar2 = I2C_RequestMemoryRead(hi2c,DevAddress,MemAddress,MemAddSize,Timeout);\n  if (HVar2 != HAL_OK) {\n    hi2c->Lock = HAL_UNLOCKED;\n    if (hi2c->ErrorCode == 4) {\n      return HAL_ERROR;\n    }\n    return HAL_TIMEOUT;\n  }\n  pIVar5 = hi2c->Instance;\n  uVar6 = pIVar5->CR1;\n  if (Size == 1) {\n    pIVar5->CR1 = uVar6 & 0xfffffbff;\n    disableIRQinterrupts();\n    hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x200;\n    enableIRQinterrupts();\n    HVar2 = I2C_WaitOnRXNEFlagUntilTimeout(hi2c,Timeout);\n    if (HVar2 == HAL_OK) {\n      *pData = (uint8_t)hi2c->Instance->DR;\nLAB_08001ab8:\n      hi2c->State = HAL_I2C_STATE_READY;\n      hi2c->Mode = HAL_I2C_MODE_NONE;\n      hi2c->Lock = HAL_UNLOCKED;\n      return HAL_OK;\n    }\nLAB_08001a18:\n    if (hi2c->ErrorCode != 0x20) {\n      return HAL_ERROR;\n    }\n    return HAL_TIMEOUT;\n  }\n  if (Size == 2) {\n    pIVar5->CR1 = uVar6 | 0x800;\n    disableIRQinterrupts();\n    hi2c->Instance->CR1 = hi2c->Instance->CR1 & 0xfffffbff;\n    enableIRQinterrupts();\n  }\n  else {\n    pIVar5->CR1 = uVar6 | 0x400;\n    while (3 < Size) {\n      HVar2 = I2C_WaitOnRXNEFlagUntilTimeout(hi2c,Timeout);\n      if (HVar2 != HAL_OK) goto LAB_08001a18;\n      *pData = (uint8_t)hi2c->Instance->DR;\n      pIVar5 = hi2c->Instance;\n      bVar8 = (int)(pIVar5->SR1 << 0x1d) < 0;\n      if (bVar8) {\n        pIVar5 = (I2C_TypeDef *)pIVar5->DR;\n        puVar7 = pData + 2;\n        Size = Size - 2;\n      }\n      else {\n        puVar7 = pData + 1;\n        Size = Size - 1;\n      }\n      puVar1 = pData + 1;\n      pData = puVar7;\n      if (bVar8) {\n        *puVar1 = (uint8_t)pIVar5;\n      }\n    }\n    if (Size != 2) {\n      uVar3 = HAL_GetTick();\n      do {\n        pIVar5 = hi2c->Instance;\n        do {\n          if ((int)(pIVar5->SR1 << 0x1d) < 0) {\n            pIVar5->CR1 = pIVar5->CR1 & 0xfffffbff;\n            disableIRQinterrupts();\n            *pData = (uint8_t)hi2c->Instance->DR;\n            uVar3 = HAL_GetTick();\n            goto LAB_08001b3a;\n          }\n        } while (Timeout == 0xffffffff);\n      } while ((Timeout != 0) && (uVar4 = HAL_GetTick(), uVar4 - uVar3 <= Timeout));\n      goto LAB_08001afa;\n    }\n  }\n  uVar3 = HAL_GetTick();\n  do {\n    do {\n      if ((int)(hi2c->Instance->SR1 << 0x1d) < 0) {\n        disableIRQinterrupts();\n        pIVar5 = hi2c->Instance;\n        pIVar5->CR1 = pIVar5->CR1 | 0x200;\n        *pData = (uint8_t)pIVar5->DR;\n        enableIRQinterrupts();\n        pData[1] = (uint8_t)hi2c->Instance->DR;\n        goto LAB_08001ab8;\n      }\n    } while (Timeout == 0xffffffff);\n  } while ((Timeout != 0) && (uVar4 = HAL_GetTick(), uVar4 - uVar3 <= Timeout));\nLAB_08001afa:\n  hi2c->State = HAL_I2C_STATE_READY;\n  hi2c->Lock = HAL_UNLOCKED;\n  return HAL_TIMEOUT;\nLAB_08001b3a:\n  do {\n    pIVar5 = hi2c->Instance;\n    do {\n      if ((int)(pIVar5->SR1 << 0x1d) < 0) {\n        pIVar5->CR1 = pIVar5->CR1 | 0x200;\n        pData[1] = (uint8_t)pIVar5->DR;\n        enableIRQinterrupts();\n        pData[2] = (uint8_t)hi2c->Instance->DR;\n        goto LAB_08001ab8;\n      }\n    } while (Timeout == 0xffffffff);\n  } while ((Timeout != 0) && (uVar4 = HAL_GetTick(), uVar4 - uVar3 <= Timeout));\n  goto LAB_08001afa;\n}\n\n",
            "called": [
                "I2C_WaitOnRXNEFlagUntilTimeout",
                "HAL_GetTick",
                "I2C_RequestMemoryRead"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001938",
            "calling": [
                "I2C_ReadByte",
                "I2C_ReadBytes"
            ],
            "imported": false,
            "current_name": "FUNC_08001938"
        },
        "FUN_080022d0": {
            "renaming": {
                "FUN_080022d0": "configure_timer_080022d0",
                "TIMx": "timer",
                "OC_Config": "output_channel_config",
                "uVar1": "cc_enabled_value",
                "uVar2": "cr2_value",
                "uVar3": "output_mode",
                "DAT_08002320": "PTR_08002320",
                "CCER": "cc_enabled_mask",
                "OCPolarity": "oc_polarity",
                "OCNPolarity": "ocn_polarity",
                "OCIdleState": "oc_idle_state",
                "OCNIdleState": "ocn_idle_state",
                "CCMR2": "ccmr2"
            },
            "code": "void configure_timer_080022d0(TIM_TypeDef *timer, TIM_OC_InitTypeDef *output_channel_config)\n{\n  uint32_t cc_enabled_mask = 0xfffffeff;\n  uint32_t cr2_value = timer->CR2;\n  uint32_t output_mode = output_channel_config->OCMode;\n  uint32_t cc_enabled_value = (timer->CCER & 0xfffffdff) | (output_channel_config->OCPolarity << 8);\n  if (timer == DAT_08002320) {\n    cc_enabled_value = (cc_enabled_value & 0xfffff7ff) | (output_channel_config->OCNPolarity << 8);\n    cr2_value = (cr2_value & 0xffffcfff) | ((output_channel_config->OCIdleState | output_channel_config->OCNIdleState) << 4);\n  }\n  timer->CR2 = cr2_value;\n  timer->CCMR2 = (timer->CCMR2 & 0xffffff8c) | output_mode;\n  timer->CCR3 = output_channel_config->Pulse;\n  timer->CCER = cc_enabled_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080022d0",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_080022d0"
        },
        "FUN_080010c4": {
            "renaming": {
                "FUN_080010c4": "decode_uint32_080010c4",
                "param_1": "encoded_value",
                "uVar1": "shift_amount",
                "decoded_value": "decoded_value"
            },
            "code": "uint decode_uint32_080010c4(uint encoded_value) {\n  uint decoded_value;\n  if (((encoded_value & 0x80000000) != 0) || (encoded_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  uint shift_amount = 0x18 - 1 - ((encoded_value << 1) >> 0x18);\n  if (shift_amount >= 0) {\n    decoded_value = (encoded_value << 8 | 0x80000000) >> shift_amount;\n    return decoded_value;\n  }\n  else if ((shift_amount == 0xffffff9f) && ((encoded_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  else {\n    return 0xffffffff;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080010c4",
            "calling": [
                "PID_Update"
            ],
            "imported": false,
            "current_name": "decode_uint32_080010c4"
        },
        "FUN_0800245c": {
            "renaming": {
                "FUN_0800245c": "configureTimerOutputChannel_0800245c",
                "htim": "timerHandle",
                "sConfig": "outputConfig",
                "Channel": "channel",
                "extraout_r1": "index1",
                "extraout_r1_00": "index2",
                "extraout_r1_01": "index3",
                "uVar1": "updatedVariable1",
                "extraout_r1_02": "updatedVariable2",
                "iVar2": "index4",
                "uVar3": "updatedVariable3",
                "pTVar4": "timerInstance"
            },
            "code": "HAL_StatusTypeDef configureTimerOutputChannel_0800245c(TIM_HandleTypeDef *timerHandle, TIM_OC_InitTypeDef *outputConfig, uint32_t channel)\n{\n  int index1;\n  int index2;\n  int index3;\n  uint32_t updatedCCMR;\n  TIM_TypeDef *timerInstance;\n  if (timerHandle->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n  timerHandle->State = HAL_TIM_STATE_BUSY;\n  timerHandle->Lock = HAL_LOCKED;\n  switch(channel) {\n  case 0:\n    TIM_OC1_SetConfig(timerHandle->Instance,outputConfig);\n    timerInstance = timerHandle->Instance;\n    index1 = *(uint *)(index1 + 0x10);\n    timerInstance->CCMR1 = timerInstance->CCMR1 | 8;\n    timerInstance->CCMR1 = timerInstance->CCMR1 & 0xfffffffb;\n    updatedCCMR = timerInstance->CCMR1 | index1;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    TIM_OC2_SetConfig(timerHandle->Instance,outputConfig);\n    timerInstance = timerHandle->Instance;\n    index2 = *(int *)(index2 + 0x10);\n    timerInstance->CCMR1 = timerInstance->CCMR1 | 0x800;\n    timerInstance->CCMR1 = timerInstance->CCMR1 & 0xfffffbff;\n    updatedCCMR = timerInstance->CCMR1 | index2 << 8;\n    break;\n  case 8:\n    TIM_OC3_SetConfig(timerHandle->Instance,outputConfig);\n    timerInstance = timerHandle->Instance;\n    index1 = *(uint *)(index3 + 0x10);\n    timerInstance->CCMR2 = timerInstance->CCMR2 | 8;\n    timerInstance->CCMR2 = timerInstance->CCMR2 & 0xfffffffb;\n    updatedCCMR = timerInstance->CCMR2 | index1;\n    goto LAB_080024fa;\n  case 0xc:\n    TIM_OC4_SetConfig(timerHandle->Instance,outputConfig);\n    timerInstance = timerHandle->Instance;\n    index2 = *(int *)(index3 + 0x10);\n    timerInstance->CCMR2 = timerInstance->CCMR2 | 0x800;\n    timerInstance->CCMR2 = timerInstance->CCMR2 & 0xfffffbff;\n    updatedCCMR = timerInstance->CCMR2 | index2 << 8;\nLAB_080024fa:\n    timerInstance->CCMR2 = updatedCCMR;\n    goto switchD_0800247a_caseD_1;\n  }\n  timerInstance->CCMR1 = updatedCCMR;\nswitchD_0800247a_caseD_1:\n  timerHandle->State = HAL_TIM_STATE_READY;\n  timerHandle->Lock = HAL_UNLOCKED;\n  return HAL_OK;\n}",
            "called": [
                "TIM_OC3_SetConfig",
                "TIM_OC1_SetConfig",
                "TIM_OC2_SetConfig",
                "TIM_OC4_SetConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800245c",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "configureTimerOutputChannel_0800245c"
        },
        "FUN_080008f4": {
            "renaming": {
                "FUN_080008f4": "check_params_080008f4",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "xor_of_second_and_fourth_params",
                "bVar2": "is_first_param_zero",
                "bVar3": "is_third_param_zero"
            },
            "code": "uint check_params_080008f4(uint first_param,uint second_param,uint third_param,uint fourth_param)\n{\n    bool is_first_param_zero = (first_param | second_param << 1) == 0;\n    bool is_third_param_zero = (third_param | fourth_param << 1) == 0;\n    if (!is_first_param_zero && !is_third_param_zero)\n    {\n        bool are_second_and_fourth_params_equal = second_param == fourth_param;\n        bool are_first_and_third_params_equal = first_param == third_param;\n        if (!are_second_and_fourth_params_equal && !are_first_and_third_params_equal)\n        {\n            uint xor_of_second_and_fourth_params = second_param ^ fourth_param;\n            bool is_xor_zero = xor_of_second_and_fourth_params == 0;\n            bool is_xor_positive = -1 < (int)xor_of_second_and_fourth_params;\n            bool is_fourth_param_less_than_or_equal_to_second_param = fourth_param <= second_param;\n            bool is_third_param_less_than_or_equal_to_first_param = third_param <= first_param;\n            bool is_condition_met = (is_xor_zero && is_fourth_param_less_than_or_equal_to_second_param) || (!is_xor_zero && is_xor_positive && is_fourth_param_less_than_or_equal_to_second_param);\n            if (is_condition_met)\n            {\n                return fourth_param >> 0x1f | 1;\n            }\n        }\n    }\n    else if (((int)(second_param << 1) >> 0x15 == -1 && ((first_param | second_param << 0xc) != 0)) || ((int)(fourth_param << 1) >> 0x15 == -1 && ((third_param | fourth_param << 0xc) != 0)))\n    {\n        return 0xffffffff;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008f4",
            "calling": [],
            "imported": false,
            "current_name": "check_params_080008f4"
        },
        "FUN_08004e14": {
            "renaming": {
                "FUN_08004e14": "init_GPIO_pin_for_timer_08004e14",
                "*htim": "timer_handle",
                "GPIO_InitStruct": "gpio_init_struct",
                "pGVar1": "gpio_port",
                "pTVar2": "timer_type",
                "DAT_08004e6c": "GPIO_PORTB",
                "DAT_08004e68": "TIMER_3",
                "(TIM_TypeDef *)0x40000000": "unknown_timer_type",
                "DAT_08004e74": "GPIO_PORTA",
                "DAT_08004e70": "TIMER_1",
                "DAT_08004e78": "TIMER_2"
            },
            "code": "void init_GPIO_pin_for_timer_08004e14(TIM_HandleTypeDef *timer_handle)\n{\n  GPIO_TypeDef *gpio_port;\n  TIM_TypeDef *timer_type;\n  GPIO_InitTypeDef GPIO_InitStruct;\n  \n  timer_type = timer_handle->Instance;\n  gpio_port = DAT_08004e6c;\n  if (timer_type == DAT_08004e68) {\n    GPIO_InitStruct.Pin = GPIO_PIN_3;\n  }\n  else if (timer_type == TIMER_4) {\n    GPIO_InitStruct.Pin = GPIO_PIN_2;\n  }\n  else {\n    gpio_port = DAT_08004e74;\n    if (timer_type == DAT_08004e70) {\n      GPIO_InitStruct.Pin = GPIO_PIN_4;\n    }\n    else {\n      if (timer_type != DAT_08004e78) {\n        return;\n      }\n      GPIO_InitStruct.Pin = GPIO_PIN_11;\n    }\n  }\n  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;\n  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;\n  HAL_GPIO_Init(gpio_port, &GPIO_InitStruct);\n  return;\n}",
            "called": [
                "HAL_GPIO_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e14",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "init_GPIO_pin_for_timer_08004e14"
        },
        "FUN_08002ea0": {
            "renaming": {
                "FUN_08002ea0": "initialize_sensors_08002ea0",
                "_beta": "beta_coefficient",
                "_deltat": "delta_time"
            },
            "code": "void initialize_sensors_08002ea0(void)\n{\n  float beta_coefficient;\n  float delta_time;\n  MPU9250_Init();\n  AK8963_Init();\n  MadgwickSetBeta(beta_coefficient);\n  MadgwickSetDelta(delta_time);\n  return;\n}",
            "called": [
                "MPU9250_Init",
                "MadgwickSetBeta",
                "MadgwickSetDelta",
                "AK8963_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ea0",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initialize_sensors_08002ea0"
        },
        "FUN_08001424": {
            "renaming": {
                "FUN_08001424": "set_gpio_pin_state_08001424",
                "GPIOx": "gpio",
                "GPIO_Pin": "pin",
                "PinState": "state",
                "uVar1": "pin_mask"
            },
            "code": "void set_gpio_pin_state_08001424(GPIO_TypeDef *gpio, uint16_t pin, GPIO_PinState state)\n{\n  uint32_t pin_mask = (uint32_t)pin;\n  if (state == GPIO_PIN_RESET) {\n    pin_mask = pin_mask << 0x10;\n  }\n  gpio->BSRR = pin_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001424",
            "calling": [
                "toggleLED",
                "_Error_Handler",
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "set_gpio_pin_state_08001424"
        },
        "FUN_08002998": {
            "renaming": {
                "FUN_08002998": "do_nothing_08002998"
            },
            "code": "\nvoid do_nothing_08002998(UART_HandleTypeDef *huart)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002998",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08002998"
        },
        "FUN_08005900": {
            "renaming": {
                "FUN_08005900": "FUNC_08005900"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\ndouble FUNC_08005900(double __x,double __y)\n\n{\n  char cVar1;\n  undefined *puVar2;\n  int iVar3;\n  int iVar4;\n  int *piVar5;\n  undefined4 *puVar6;\n  undefined4 extraout_r1;\n  undefined4 extraout_r1_00;\n  undefined4 uVar7;\n  double extraout_d0;\n  double extraout_d0_00;\n  double extraout_d0_01;\n  double extraout_d0_02;\n  double extraout_d0_03;\n  double extraout_d0_04;\n  double extraout_d0_05;\n  double extraout_d0_06;\n  double extraout_d0_07;\n  double extraout_d0_08;\n  double extraout_d0_09;\n  double extraout_d0_10;\n  double extraout_d0_11;\n  double extraout_d0_12;\n  double dVar8;\n  undefined8 uVar9;\n  undefined local_50 [24];\n  undefined8 local_38;\n  int local_30;\n  \n  dVar8 = (double)__ieee754_FUNC_08005900();\n  puVar2 = PTR___fdlib_version_08005ba8;\n  cVar1 = *PTR___fdlib_version_08005ba8;\n  if (cVar1 == -1) {\n    return extraout_d0;\n  }\n  local_30 = __unorddf2();\n  if (local_30 != 0) {\n    return extraout_d0_00;\n  }\n  iVar3 = __unorddf2();\n  if (iVar3 != 0) {\n    iVar3 = __aeabi_dcmpeq();\n    if (iVar3 == 0) {\n      return extraout_d0_01;\n    }\n    local_50._0_4_ = 1;\n    local_50._4_4_ = PTR_DAT_08005bac;\n    local_38 = (double)((ulonglong)DAT_08005bb0 << 0x20);\n    if (cVar1 == '\\x02') {\n      return extraout_d0_01;\n    }\n    goto LAB_08005978;\n  }\n  iVar4 = __aeabi_dcmpeq();\n  if (iVar4 == 0) {\n    iVar3 = finite(dVar8);\n    if ((iVar3 == 0) && (iVar4 = finite(dVar8), iVar4 != 0)) {\n      iVar4 = finite(dVar8);\n      if (iVar4 == 0) goto LAB_08005b4c;\n      local_30 = __unorddf2(SUB84(dVar8,0),(int)((ulonglong)dVar8 >> 0x20));\n      cVar1 = *puVar2;\n      if (local_30 != 0) {\n        local_50._4_4_ = PTR_DAT_08005bac;\n        local_50._0_4_ = 1;\n        local_30 = iVar3;\n        if (cVar1 == '\\0') goto LAB_08005a22;\n        local_38 = (double)__divdf3(0,0,0,0);\n        goto LAB_08005a32;\n      }\n      local_50._4_4_ = PTR_DAT_08005bac;\n      local_50._0_4_ = 3;\n      if (cVar1 != '\\0') {\n        local_38._0_4_ = 0;\n        local_38._4_4_ = DAT_08005bc4;\n        iVar3 = __aeabi_dcmplt();\n        if (iVar3 != 0) {\n          uVar9 = __muldf3();\n          uVar7 = (int)uVar9;\n          rint(dVar8);\n          iVar3 = __aeabi_dcmpeq((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar7,extraout_r1_00);\n          if (iVar3 == 0) {\n            local_38._0_4_ = 0;\n            local_38._4_4_ = DAT_08005bb4;\n          }\n        }\n        goto LAB_08005afa;\n      }\n      local_38._0_4_ = 0xe0000000;\n      local_38._4_4_ = DAT_08005bb8;\n      iVar3 = __aeabi_dcmplt();\n      if (iVar3 != 0) {\n        uVar9 = __muldf3();\n        uVar7 = (int)uVar9;\n        rint(dVar8);\n        iVar3 = __aeabi_dcmpeq((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar7,extraout_r1);\n        if (iVar3 == 0) {\n          local_38._0_4_ = 0xe0000000;\n          local_38._4_4_ = DAT_08005bc0;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      iVar3 = matherr((exception *)local_50);\n      dVar8 = extraout_d0_12;\n      if (iVar3 != 0) goto LAB_080059d0;\n    }\n    else {\nLAB_08005b4c:\n      iVar3 = __aeabi_dcmpeq(SUB84(dVar8,0),(int)((ulonglong)dVar8 >> 0x20),0,0);\n      if (iVar3 == 0) {\n        return extraout_d0_09;\n      }\n      iVar3 = finite(dVar8);\n      if (iVar3 == 0) {\n        return extraout_d0_10;\n      }\n      iVar3 = finite(dVar8);\n      if (iVar3 == 0) {\n        return extraout_d0_11;\n      }\n      local_50._0_4_ = 4;\n      local_50._4_4_ = PTR_DAT_08005bac;\n      local_30 = 0;\n      local_38._0_4_ = 0;\n      local_38._4_4_ = 0;\nLAB_08005afa:\n      if (*puVar2 != '\\x02') goto LAB_08005b98;\n    }\n    puVar6 = (undefined4 *)__errno();\n    uVar7 = 0x22;\n    dVar8 = extraout_d0_08;\n  }\n  else {\n    local_30 = __aeabi_dcmpeq();\n    if (local_30 == 0) {\n      iVar3 = finite(dVar8);\n      if (iVar3 == 0) {\n        return extraout_d0_05;\n      }\n      iVar3 = __aeabi_dcmplt();\n      if (iVar3 == 0) {\n        return extraout_d0_06;\n      }\n      local_50._0_4_ = 1;\n      local_50._4_4_ = PTR_DAT_08005bac;\n      cVar1 = *puVar2;\n      if (cVar1 == '\\0') {\nLAB_08005a22:\n        local_50._0_4_ = 1;\n        local_38 = 0.0;\n        local_50._4_4_ = PTR_DAT_08005bac;\n        goto LAB_08005978;\n      }\n      local_38 = (double)((ulonglong)DAT_08005bb4 << 0x20);\nLAB_08005a32:\n      if (cVar1 != '\\x02') goto LAB_08005978;\n    }\n    else {\n      local_50._0_4_ = 1;\n      local_50._4_4_ = PTR_DAT_08005bac;\n      local_38 = 0.0;\n      local_30 = iVar3;\n      if (cVar1 != '\\0') {\n        local_38 = (double)((ulonglong)DAT_08005bb0 << 0x20);\n        dVar8 = extraout_d0_03;\n        goto LAB_080059d0;\n      }\nLAB_08005978:\n      iVar3 = matherr((exception *)local_50);\n      dVar8 = extraout_d0_02;\n      if (iVar3 != 0) goto LAB_080059d0;\n    }\n    puVar6 = (undefined4 *)__errno();\n    uVar7 = 0x21;\n    dVar8 = extraout_d0_07;\n  }\n  *puVar6 = uVar7;\nLAB_080059d0:\n  if (local_30 != 0) {\n    piVar5 = (int *)__errno();\n    *piVar5 = local_30;\n    dVar8 = extraout_d0_04;\n  }\n  return dVar8;\n}\n\n",
            "called": [
                "__divdf3",
                "__aeabi_dcmplt",
                "__unorddf2",
                "__aeabi_dcmpeq",
                "__muldf3",
                "finite",
                "matherr",
                "rint",
                "__errno",
                "__ieee754_pow"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005900",
            "calling": [
                "MS5611_Update"
            ],
            "imported": false,
            "current_name": "FUNC_08005900"
        },
        "FUN_08004c64": {
            "renaming": {
                "FUN_08004c64": "initialize_circular_buffer_08004c64",
                "PTR_rxc_08004c6c": "circular_buffer"
            },
            "code": "void initialize_circular_buffer_08004c64(void)\n{\n  CircularBuffer* PTR_rxc_08004c6c = (CircularBuffer*) PTR_rxc_08004c6c;\n  CB_Init(PTR_rxc_08004c6c);\n  return;\n}",
            "called": [
                "CB_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c64",
            "calling": [
                "serialBegin"
            ],
            "imported": false,
            "current_name": "initialize_circular_buffer_08004c64"
        },
        "FUN_080041e4": {
            "renaming": {
                "FUN_080041e4": "set_motor_pwm_080041e4",
                "m1": "motor1_pwm",
                "m2": "motor2_pwm",
                "m3": "motor3_pwm",
                "m4": "motor4_pwm",
                "puVar1": "motor_pwm_array",
                "pwm": "pwm",
                "puVar2": "msp_txf_motor"
            },
            "code": "void set_motor_pwm_080041e4(int motor1_pwm, int motor2_pwm, int motor3_pwm, int motor4_pwm) {\n    int motor_pwm_array[4];\n    motor_pwm_array[0] = (motor1_pwm > 999) ? 1000 : motor1_pwm;\n    motor_pwm_array[1] = (motor2_pwm > 999) ? 1000 : motor2_pwm;\n    motor_pwm_array[2] = (motor3_pwm > 999) ? 1000 : motor3_pwm;\n    motor_pwm_array[3] = (motor4_pwm > 999) ? 1000 : motor4_pwm;\n    uint pwm = motor_pwm_array[0] & ~(motor_pwm_array[0] >> 0x1f);\n    *(int *)(PTR_motor_pwm_08004264 + 8) = motor_pwm_array[2] & ~(motor_pwm_array[2] >> 0x1f);\n    *(int *)(PTR_motor_pwm_08004264 + 0xc) = motor_pwm_array[3] & ~(motor_pwm_array[3] >> 0x1f);\n    *(int *)(PTR_motor_pwm_08004264 + 4) = motor_pwm_array[1] & ~(motor_pwm_array[1] >> 0x1f);\n    *(uint *)PTR_motor_pwm_08004264 = pwm;\n    Motor1_SetPWM(pwm);\n    Motor2_SetPWM(*(int *)(PTR_motor_pwm_08004264 + 4));\n    Motor3_SetPWM(*(int *)(PTR_motor_pwm_08004264 + 8));\n    Motor4_SetPWM(*(int *)(PTR_motor_pwm_08004264 + 0xc));\n    short* msp_txf_motor = PTR_msp_txf_motor_08004268;\n    *(short *)msp_txf_motor = (short)*(undefined4 *)PTR_motor_pwm_08004264 + 1000;\n    *(short *)(msp_txf_motor + 2) = (short)*(undefined4 *)(PTR_motor_pwm_08004264 + 4) + 1000;\n    *(short *)(msp_txf_motor + 4) = (short)*(undefined4 *)(PTR_motor_pwm_08004264 + 8) + 1000;\n    *(short *)(msp_txf_motor + 6) = (short)*(undefined4 *)(PTR_motor_pwm_08004264 + 0xc) + 1000;\n}",
            "called": [
                "Motor2_SetPWM",
                "Motor1_SetPWM",
                "Motor4_SetPWM",
                "Motor3_SetPWM"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041e4",
            "calling": [
                "Motor_DistributeSpeed"
            ],
            "imported": false,
            "current_name": "set_motor_pwm_080041e4"
        },
        "FUN_080003e4": {
            "renaming": {
                "FUN_080003e4": "reverse_bits_080003e4",
                "param_1": "input",
                "uVar1": "left_bits",
                "uVar2": "shift_amount",
                "iVar3": "leading_zeroes",
                "uVar4": "offset",
                "in_r12": "padding_bits",
                "bVar5": "is_shift_amount_negative",
                "bVar6": "is_shift_amount_zero",
                "bVar7": "is_offset_negative"
            },
            "code": "ulonglong reverse_bits_080003e4(uint input)\n{\n  uint leading_zeroes = count_leading_zeroes(input);\n  uint offset = leading_zeroes + 21;\n  uint shift_amount = 0;\n  uint padding_bits = 0;\n\n  if (input == 0) {\n    return 0;\n  }\n\n  if (offset < 32) {\n    shift_amount = offset;\n    padding_bits = 12 - leading_zeroes;\n  }\n  else {\n    shift_amount = leading_zeroes - 11;\n    padding_bits = 32 - shift_amount;\n  }\n\n  uint left_bits = input << (shift_amount);\n  uint right_bits = 0;\n  if (padding_bits < 32) {\n    right_bits = 0 >> (padding_bits);\n  }\n\n  ulonglong result = ((ulonglong)left_bits) << 32;\n  result |= right_bits;\n\n  if (offset < 1075) {\n    result += (0x432 - offset) * 0x100000;\n  }\n  else {\n    uint inverse_offset = ~(0x432 - offset);\n    if (inverse_offset > 30) {\n      result = ((ulonglong)input) >> (inverse_offset - 31);\n    }\n    else {\n      int shift_right_amount = inverse_offset - 19;\n      if (shift_right_amount == 0 || shift_right_amount < -11) {\n        shift_amount++;\n        result |= ((ulonglong)input) << (32 - shift_amount);\n      }\n      else {\n        result |= ((ulonglong)input) >> (32 - (12 - shift_right_amount)) | ((ulonglong)input) << (shift_right_amount);\n      }\n    }\n  }\n\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003e4",
            "calling": [],
            "imported": false,
            "current_name": "reverse_bits_080003e4"
        },
        "FUN_08007092": {
            "renaming": {
                "FUN_08007092": "calculate_sign_bit_08007092",
                "__value": "value",
                "in_r1": "sign_bit"
            },
            "code": "int calculate_sign_bit_08007092(double value) {\n  uint sign_bit = 0x80000000;\n  uint shift_amount = 0x1f;\n  return (sign_bit | *(uint*)(&value)) >> shift_amount;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007092",
            "calling": [
                "pow"
            ],
            "imported": false,
            "current_name": "calculate_sign_bit_08007092"
        },
        "FUN_08002f28": {
            "renaming": {
                "FUN_08002f28": "updateAHRS_08002f28",
                "uVar6": "current_time",
                "_deltat": "delta_time",
                "puVar2": "last_update_ptr",
                "puVar3": "time_now_ptr",
                "puVar4": "raw_imu_ptr",
                "iVar8": "last_update_time",
                "ax": "accel_scaled_x",
                "ay": "accel_scaled_y",
                "az": "accel_scaled_z",
                "gx": "gyro_scaled_x",
                "gy": "gyro_scaled_y",
                "gz": "gyro_scaled_z",
                "mx": "mag_scaled_x",
                "my": "mag_scaled_y",
                "uVar5": "temperature",
                "sVar1": "accel_scaled_y",
                "PTR_AHRS_timeNow_08003004": "time_now_ptr",
                "PTR_AHRS_lastUpdate_08003000": "last_update_ptr",
                "PTR_accelData_0800300c": "accel_data_ptr",
                "PTR_msp_txf_attitude_08003024": "msp_txf_attitude",
                "PTR_msp_txf_raw_imu_08003020": "msp_txf_raw_imu",
                "PTR_accelRaw_0800301c": "accel_raw_ptr",
                "PTR_gyroRaw_08003028": "gyro_raw_ptr",
                "PTR_magRaw_0800302c": "mag_raw_ptr",
                "DAT_08003008": "MICROS_PER_SECOND"
            },
            "code": "void updateAHRS_08002f28() {\n  short accel_scaled_x;\n  uint32_t current_time = micros();\n  float delta_time = (float)(current_time - last_update_time) / 1000000.0;\n  last_update_time = current_time;\n  MPU9250_ReadAccelData();\n  MPU9250_ReadGyroData();\n  AK8963_ReadData();\n  MadgwickSetDelta(delta_time);\n  MadgwickQuaternionUpdate(accel_scaled_x, accel_scaled_y, accel_scaled_z, gyro_scaled_x, gyro_scaled_y, gyro_scaled_z, mag_scaled_x, mag_scaled_y, mag_scaled_z, (float)temperature);\n  PTR_msp_txf_raw_imu_08003020[0] = (short)(accel_scaled_x / 100);\n  PTR_msp_txf_raw_imu_08003020[1] = (short)(accel_scaled_y / 100);\n  PTR_msp_txf_raw_imu_08003020[2] = (short)(accel_scaled_z / 100);\n  PTR_msp_txf_raw_imu_08003020[3] = (short)(gyro_scaled_x / 100);\n  PTR_msp_txf_raw_imu_08003020[4] = (short)(gyro_scaled_y / 100);\n  PTR_msp_txf_raw_imu_08003020[5] = (short)(gyro_scaled_z / 100);\n  PTR_msp_txf_raw_imu_08003020[6] = (short)(mag_scaled_x / 100);\n  PTR_msp_txf_raw_imu_08003020[7] = (short)(mag_scaled_y / 100);\n  PTR_msp_txf_raw_imu_08003020[8] = (short)(mag_scaled_z / 100);\n  PTR_msp_txf_attitude_08003024[0] = (short)(roll * 100);\n  PTR_msp_txf_attitude_08003024[1] = (short)(pitch * 100);\n  PTR_msp_txf_attitude_08003024[2] = (short)(yaw * 100);\n}",
            "called": [
                "AK8963_ReadData",
                "AHRS_GetPitch",
                "MadgwickQuaternionUpdate",
                "AHRS_GetRoll",
                "__aeabi_fdiv",
                "AHRS_GetYaw",
                "micros",
                "__aeabi_f2iz",
                "MPU9250_ReadAccelData",
                "__aeabi_fmul",
                "__floatunsisf",
                "MadgwickSetDelta",
                "MPU9250_ReadGyroData"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f28",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "updateAHRS_08002f28"
        },
        "FUN_08004384": {
            "renaming": {
                "FUN_08004384": "send_msp_frame_08004384",
                "in_r3": "frame_status",
                "local_14": "data_1",
                "uStack_10": "data_2",
                "local_c": "status",
                "puVar1": "msp_txf_status_ptr"
            },
            "code": "void send_msp_frame_08004384(void)\n{\n    uint status;\n    uint8_t data[11];\n    uint8_t* msp_txf_status_ptr = PTR_msp_txf_status_080043b8;\n    msp_txf_status_ptr[4] = 7;\n    msp_txf_status_ptr[5] = 0;\n    msp_txf_status_ptr[6] = 0x2a;\n    msp_txf_status_ptr[7] = 0;\n    uint32_t* local_14_ptr = (uint32_t*)msp_txf_status_ptr;\n    uint32_t* uStack_10_ptr = (uint32_t*)(msp_txf_status_ptr + 4);\n    msp_txf_status_ptr[8] = 0;\n    msp_txf_status_ptr[9] = 0;\n    msp_txf_status_ptr[10] = 0;\n    status = (in_r3 & 0xff000000) | (uint)*(ushort *)(msp_txf_status_ptr + 8);\n    memcpy(data, local_14_ptr, sizeof(uint32_t));\n    memcpy(data + sizeof(uint32_t), uStack_10_ptr, sizeof(uint32_t));\n    MSP_SendFrame('e', data, 0xb);\n    return;\n}",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004384",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "send_msp_frame_08004384"
        },
        "FUN_080009a0": {
            "renaming": {
                "FUN_080009a0": "is_not_equal_to_null_080009a0",
                "in_ZR": "input_char"
            },
            "code": "bool is_not_equal_to_null_080009a0() {\n  char input_char;\n  __aeabi_cdcmpeq();\n  return input_char != '\\0';\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009a0",
            "calling": [
                "pow"
            ],
            "imported": false,
            "current_name": "is_not_equal_to_null_080009a0"
        },
        "FUN_08003298": {
            "renaming": {
                "FUN_08003298": "read_MS5611_coefficients_08003298",
                "file": "MS5611_SOURCE",
                "puVar1": "MS5611_COEFFICIENTS",
                "puVar2": "ALT_FILTER",
                "iVar3": "coefficient_index",
                "rxbuf": "rx_buffer"
            },
            "code": "void read_MS5611_coefficients_08003298(){\n  uint8_t rx_buffer[2];\n  int coefficient_index = 0;\n  I2C_WriteByte(MS5611_ADDRESS, MS5611_RESET, 0x01, 0x01);\n  delay_ms(10);\n  uint8_t* coefficient_pointer = MS5611_COEFFICIENTS;\n  uint8_t* filter_pointer = ALT_FILTER;\n  *MS5611_OSR = 8;\n  do {\n    rx_buffer[0] = 0;\n    rx_buffer[1] = 0;\n    I2C_ReadByteArray(MS5611_ADDRESS, coefficient_index + 0xA0, rx_buffer, 2, MS5611_SOURCE, 0x7C);\n    *(uint16_t *)(coefficient_pointer + coefficient_index) = (rx_buffer[0] << 8) | rx_buffer[1];\n    coefficient_index += 2;\n  } while (coefficient_index != 0x10);\n  coefficient_index = 0;\n  do {\n    *(uint32_t *)(filter_pointer + coefficient_index * 4) = 0;\n    coefficient_index++;\n  } while (coefficient_index != 0x14);\n}",
            "called": [
                "I2C_ReadByteArray",
                "delay_ms",
                "I2C_WriteByte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003298",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "read_MS5611_coefficients_08003298"
        },
        "FUN_08004028": {
            "renaming": {
                "FUN_08004028": "initialize_peripherals_and_LEDs_08004028",
                "Peripherals_Init": "initialize_peripherals",
                "PWM_Init": "initialize_PWM",
                "LED_StartupSequence": "run_LED_startup_sequence"
            },
            "code": "void initialize_peripherals_and_LEDs_08004028(void)\n{\n  initialize_peripherals();\n  initialize_PWM();\n  run_LED_startup_sequence();\n  return;\n}",
            "called": [
                "LED_StartupSequence",
                "PWM_Init",
                "Peripherals_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004028",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initialize_peripherals_and_LEDs_08004028"
        },
        "FUN_0800708c": {
            "renaming": {
                "FUN_0800708c": "calculate_0800708c",
                "__x": "input",
                "in_d0": "result"
            },
            "code": "double calculate_0800708c(double input){\n  double result;\n  //perform calculations\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800708c",
            "calling": [
                "asin",
                "__ieee754_atan2",
                "atan",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "calculate_0800708c"
        },
        "FUN_08002520": {
            "renaming": {
                "FUN_08002520": "configure_channel_08002520",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelState": "state",
                "CCER": "channel_mask"
            },
            "code": "void configure_channel_08002520(TIM_TypeDef *timer, uint32_t channel, uint32_t state) {\n  uint32_t channel_mask = 1 << (channel & 0xff);\n  timer->CCER &= ~channel_mask;\n  timer->CCER |= state << (channel & 0xff);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002520",
            "calling": [
                "HAL_TIM_PWM_Start"
            ],
            "imported": false,
            "current_name": "configure_channel_08002520"
        },
        "FUN_08000464": {
            "renaming": {
                "FUN_08000464": "convert_uints_to_ulonglong_08000464",
                "param_1": "first_uint",
                "param_2": "second_uint",
                "bVar1": "bit_value",
                "uVar2": "shifted_first_uint",
                "uVar3": "shift_amount_1",
                "uVar4": "shifted_second_uint",
                "iVar5": "shift_amount_3",
                "uVar6": "shift_amount_2",
                "iVar7": "shift_amount_4",
                "uVar8": "is_signed_carry",
                "bVar9": "is_signed_carry",
                "bVar10": "is_carry",
                "bVar11": "is_overflow"
            },
            "code": "ulonglong convert_uints_to_ulonglong_08000464(uint first_uint, uint second_uint)\n{\n  byte bit_value;\n  uint first_uint_shifted;\n  uint second_uint_shifted;\n  int shift_amount_1;\n  uint shift_amount_2;\n  int shift_amount_3;\n  int shift_amount_4;\n  bool is_overflow;\n  bool is_carry;\n  bool is_signed_carry;\n  \n  if ((first_uint | second_uint) == 0) {\n    return CONCAT44(second_uint, first_uint);\n  }\n  shift_amount_4 = 0x432;\n  second_uint_shifted = second_uint >> 0x16;\n  if (second_uint_shifted != 0) {\n    shift_amount_4 = 3;\n    if (second_uint >> 0x19 != 0) {\n      shift_amount_4 = 6;\n    }\n    if (second_uint >> 0x1c != 0) {\n      shift_amount_4 = shift_amount_4 + 3;\n    }\n    shift_amount_1 = shift_amount_4 - ((int)second_uint >> 0x1f);\n    first_uint_shifted = first_uint << (0x20 - shift_amount_1 & 0xff);\n    first_uint = first_uint >> (shift_amount_1 & 0xff) | second_uint << (0x20 - shift_amount_1 & 0xff);\n    second_uint = second_uint >> (shift_amount_1 & 0xff);\n    shift_amount_4 = shift_amount_1 + 0x432;\n  }\n  if (0xfffff < second_uint) {\n    if (0x1fffff < second_uint) {\n      bit_value = (byte)first_uint;\n      first_uint = (uint)(second_uint & 1) << 0x1f | first_uint >> 1;\n      second_uint_shifted = (uint)(bit_value & 1) << 0x1f | second_uint >> 1;\n      shift_amount_4 = shift_amount_4 + 1;\n      is_overflow = 0xffbfffff < (uint)(shift_amount_4 * 0x200000);\n      if (is_overflow) {\n        return 0x7ff0000000000000;\n      }\n    }\nLAB_08000278:\n    is_carry = 0x7fffffff < second_uint_shifted;\n    if (second_uint_shifted == 0x80000000) {\n      is_carry = (first_uint & 1) != 0;\n    }\n    return CONCAT44(second_uint + shift_amount_4 * 0x100000 + (uint)CARRY4(first_uint,(uint)is_carry), first_uint + is_carry);\n  }\n  is_signed_carry = (second_uint_shifted & 0x80000000) != 0;\n  second_uint_shifted = second_uint_shifted << 1;\n  shift_amount_2 = first_uint * 2;\n  is_carry = CARRY4(first_uint, first_uint);\n  first_uint = first_uint * 2 + (uint)is_signed_carry;\n  second_uint = second_uint * 2 + (uint)(is_carry || CARRY4(shift_amount_2,(uint)is_signed_carry));\n  shift_amount_4 = shift_amount_4 + -1;\n  if ((second_uint & 0x100000) != 0) {\n    goto LAB_08000278;\n  }\n  uint shifted_first_uint = first_uint;\n  uint shifted_second_uint = second_uint;\n  if (second_uint == 0) {\n    shifted_first_uint = 0;\n    shifted_second_uint = first_uint;\n  }\n  shift_amount_3 = count_leading_zeroes(shifted_second_uint);\n  if (second_uint == 0) {\n    shift_amount_3 = shift_amount_3 + 0x20;\n  }\n  shift_amount_2 = shift_amount_3 - 0xb;\n  is_signed_carry = SBORROW4(shift_amount_2,0x20);\n  shift_amount_1 = shift_amount_3 - 0x2b;\n  is_carry = (int)shift_amount_1 < 0;\n  bool is_equal = shift_amount_1 == 0;\n  if ((int)shift_amount_2 < 0x20) {\n    is_signed_carry = SCARRY4(shift_amount_1,0xc);\n    shift_amount_3 = shift_amount_3 + -0x1f;\n    is_carry = shift_amount_3 < 0;\n    is_equal = shift_amount_3 == 0;\n    shift_amount_2 = shift_amount_2;\n    if (!is_equal && is_carry == is_signed_carry) {\n      first_uint_shifted = shifted_second_uint << (shift_amount_2 & 0xff);\n      shifted_second_uint = shifted_second_uint >> (0xcU - shift_amount_3 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_equal || is_carry != is_signed_carry) {\n    shift_amount_1 = 0x20 - shift_amount_2;\n  }\n  shifted_second_uint = shifted_second_uint << (shift_amount_2 & 0xff);\n  if (is_equal || is_carry != is_signed_carry) {\n    shifted_second_uint = shifted_second_uint | first_uint >> (shift_amount_1 & 0xff);\n  }\n  if (is_equal || is_carry != is_signed_carry) {\n    first_uint_shifted = first_uint << (shift_amount_2 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)shift_amount_3 <= shift_amount_4) {\n    return CONCAT44(shifted_second_uint + (shift_amount_4 - shift_amount_3) * 0x100000, first_uint_shifted);\n  }\n  shift_amount_1 = ~(shift_amount_4 - shift_amount_3);\n  if (0x1e < (int)shift_amount_1) {\n    return (ulonglong)(shifted_second_uint >> (shift_amount_1 - 0x1f & 0xff));\n  }\n  shift_amount_4 = shift_amount_1 - 0x13;\n  if (shift_amount_4 == 0 || shift_amount_4 < 0 != SCARRY4(shift_amount_1 - 0x1f,0xc)) {\n    shift_amount_1 = shift_amount_1 + 1;\n    return CONCAT44(shifted_second_uint >> (shift_amount_1 & 0xff), first_uint >> (shift_amount_1 & 0xff) | shifted_second_uint << (0x20 - shift_amount_1 & 0xff));\n  }\n  return (ulonglong)(first_uint >> (0x20 - (0xcU - shift_amount_4) & 0xff) | shifted_second_uint << (0xcU - shift_amount_4 & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000464",
            "calling": [],
            "imported": false,
            "current_name": "convert_uints_to_ulonglong_08000464"
        },
        "FUN_08002404": {
            "renaming": {
                "FUN_08002404": "set_timer_output_compare_08002404",
                "*TIMx": "*timer",
                "*OC_Config": "*oc_config",
                "uVar1": "cc_enable_value",
                "uVar2": "cr2_value",
                "uVar3": "oc_mode_value",
                "DAT_08002458": "PTR_08002458",
                "CCER": "cc_enable_mask",
                "OCMode": "oc_mode_value",
                "OCPolarity": "oc_polarity_value",
                "OCNPolarity": "ocn_polarity_value",
                "OCIdleState": "oc_idle_state_value",
                "OCNIdleState": "ocn_idle_state_value",
                "CCMR1": "ccmr1_value",
                "Pulse": "pulse_value"
            },
            "code": "void set_timer_output_compare_08002404(TIM_TypeDef *timer, TIM_OC_InitTypeDef *oc_config)\n{\n  uint32_t cc_enable_mask = 0xffffffef;\n  uint32_t cr2_value = timer->CR2;\n  uint32_t oc_mode_value = oc_config->OCMode;\n  uint32_t cc_enable_value = (timer->CCER & 0xffffffdf) | (oc_config->OCPolarity << 4);\n  if (timer == DAT_08002458) {\n    cc_enable_value = (cc_enable_value & 0xffffff7f) | (oc_config->OCNPolarity << 4) & 0xffffffbf;\n    cr2_value = (cr2_value & 0xfffff3ff) | ((oc_config->OCIdleState | oc_config->OCNIdleState) << 2);\n  }\n  timer->CR2 = cr2_value;\n  timer->CCMR1 = (timer->CCMR1 & 0xffff8cff) | (oc_mode_value << 8);\n  timer->CCR2 = oc_config->Pulse;\n  timer->CCER = cc_enable_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002404",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "set_timer_output_compare_08002404"
        },
        "FUN_08005bc8": {
            "renaming": {
                "FUN_08005bc8": "calculate_math_error_08005bc8",
                "__x": "input",
                "cVar1": "fdlib_version",
                "iVar2": "less_than_result",
                "piVar3": "errno_ptr",
                "puVar4": "undefined_ptr",
                "dVar5": "result",
                "extraout_d0": "extraout_d0",
                "extraout_d0_00": "extraout_d0_00",
                "extraout_d0_01": "extraout_d0_01",
                "extraout_d0_02": "extraout_d0_02",
                "extraout_d0_03": "extraout_d0_03",
                "local_50": "math_error",
                "local_38": "zero_double",
                "local_30": "unord_result"
            },
            "code": "double calculate_math_error_08005bc8(double input)\n{\n  double result;\n  char fdlib_version;\n  int error_code;\n  int *errno_ptr;\n  undefined4 *undefined_ptr;\n  double unord_result;\n  double less_than_result;\n  undefined math_error[24];\n  undefined8 zero_double;\n  \n  result = (double)__ieee754_calculate_math_error_08005bc8();\n  fdlib_version = *PTR___fdlib_version_08005c68;\n  if (fdlib_version == -1) {\n    return result;\n  }\n  unord_result = __unorddf2();\n  if (unord_result != 0) {\n    return extraout_d0;\n  }\n  less_than_result = __aeabi_dcmplt();\n  if (less_than_result == 0) {\n    return extraout_d0_00;\n  }\n  math_error._0_4_ = 1;\n  math_error._4_4_ = PTR_DAT_08005c6c;\n  if (fdlib_version == '\\0') {\n    zero_double = 0.0;\nLAB_08005c26:\n    error_code = matherr((exception *)math_error);\n    result = extraout_d0_01;\n    if (error_code != 0) goto LAB_08005c2e;\n  }\n  else {\n    zero_double = (double)__divdf3(0,0,0,0);\n    if (fdlib_version != '\\x02') goto LAB_08005c26;\n  }\n  undefined_ptr = (undefined4 *)__errno();\n  *undefined_ptr = 0x21;\n  result = extraout_d0_03;\nLAB_08005c2e:\n  if (unord_result != 0) {\n    errno_ptr = (int *)__errno();\n    *errno_ptr = unord_result;\n    result = extraout_d0_02;\n  }\n  return result;\n}",
            "called": [
                "__divdf3",
                "__aeabi_dcmplt",
                "__unorddf2",
                "__ieee754_sqrt",
                "matherr",
                "__errno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bc8",
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "calculate_math_error_08005bc8"
        },
        "FUN_08001436": {
            "renaming": {
                "FUN_08001436": "check_I2C_errors_08001436",
                "hi2c": "i2c_handle",
                "pIVar1": "i2c_instance",
                "SR1": "I2C_SR1_AF",
                "ErrorCode": "HAL_I2C_ERROR_AF",
                "State": "HAL_I2C_STATE_READY",
                "Lock": "HAL_UNLOCKED",
                "HAL_StatusTypeDef": "<unchanged>",
                "HAL_ERROR": "<unchanged>",
                "HAL_OK": "<unchanged>"
            },
            "code": "HAL_StatusTypeDef check_I2C_errors_08001436(I2C_HandleTypeDef *i2c_handle)\n{\n  I2C_TypeDef *i2c_instance;\n  i2c_instance = i2c_handle->Instance;\n  if ((i2c_instance->SR1 & I2C_SR1_AF) != 0) {\n    i2c_instance->SR1 = i2c_instance->SR1 & ~I2C_SR1_AF;\n    i2c_handle->ErrorCode = HAL_I2C_ERROR_AF;\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->Lock = HAL_UNLOCKED;\n    return HAL_ERROR;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001436",
            "calling": [
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "imported": false,
            "current_name": "check_I2C_errors_08001436"
        },
        "FUN_08004a30": {
            "renaming": {
                "FUN_08004a30": "calculate_altitude_08004a30",
                "PTR_pid_altitude_08004a7c": "altitude_ptr",
                "PTR_ALT_FLAG_08004a78": "flag_ptr",
                "PTR_joystick_08004a74": "joystick_ptr",
                "__aeabi_fmul": "multiply_floats",
                "altitude": "calculated_altitude"
            },
            "code": "void calculate_altitude_08004a30() {\\n  undefined *PTR_pid_altitude_08004a7c = PTR_pid_altitude_08004a7c;\\n  undefined *PTR_ALT_FLAG_08004a78 = PTR_ALT_FLAG_08004a78;\\n  undefined *PTR_joystick_08004a74 = PTR_joystick_08004a74;\\n  \\n  if (PTR_joystick_08004a74[1] != \"\\0\") {\\n    if (*PTR_ALT_FLAG_08004a78 == \"\\0\") {\\n      MS5611_GetFilteredAltitude();\\n      undefined4 altitude = __aeabi_fmul();\\n      *(undefined4 *)(PTR_pid_altitude_08004a7c + 0x1c) = altitude;\\n      *PTR_ALT_FLAG_08004a78 = 1;\\n    }\\n    else {\\n      MS5611_GetFilteredAltitude();\\n      undefined4 altitude = __aeabi_fmul();\\n      *(undefined4 *)(PTR_pid_altitude_08004a7c + 0x30) = altitude;\\n    }\\n  }\\n  if (PTR_joystick_08004a74[1] == \"\\0\") {\\n    if (*PTR_ALT_FLAG_08004a78 != \"\\0\") {\\n      *PTR_ALT_FLAG_08004a78 = 0;\\n    }\\n    *(undefined4 *)(PTR_pid_altitude_08004a7c + 0x48) = *(undefined4 *)(PTR_joystick_08004a74 + 4);\\n  }\\n  return;\\n}",
            "called": [
                "__aeabi_fmul",
                "MS5611_GetFilteredAltitude"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a30",
            "calling": [
                "PID_Update"
            ],
            "imported": false,
            "current_name": "calculate_altitude_08004a30"
        },
        "FUN_08004c70": {
            "renaming": {
                "FUN_08004c70": "initialize_UART_receive_interrupt_08004c70",
                "PTR_huart1_08004c88": "huart",
                "PTR_rx_buffer_08004c84": "rx_buffer"
            },
            "code": "void initialize_UART_receive_interrupt_08004c70(UART_HandleTypeDef *PTR_huart1_08004c88, uint8_t *PTR_rx_buffer_08004c84) {\n  serialFlush();\n  HAL_UART_Receive_IT(PTR_huart1_08004c88, PTR_rx_buffer_08004c84, 1);\n  return;\n}",
            "called": [
                "serialFlush",
                "HAL_UART_Receive_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c70",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initialize_UART_receive_interrupt_08004c70"
        },
        "FUN_08000904": {
            "renaming": {
                "FUN_08000904": "check_parameters_08000904",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "xor_param2_param4",
                "bVar2": "is_param1_param2_zero",
                "bVar3": "is_param4_less_than_param2",
                "is_param2_negative": "is_param2_negative",
                "is_param4_negative": "is_param4_negative",
                "is_param1_param2_nonzero": "is_param1_param2_nonzero",
                "is_param3_param4_nonzero": "is_param3_param4_nonzero",
                "are_param2_param4_equal": "are_param2_param4_equal",
                "are_param1_param3_equal": "are_param1_param3_equal",
                "is_xor_param2_param4_zero": "is_xor_param2_param4_zero",
                "is_xor_param2_param4_negative": "is_xor_param2_param4_negative",
                "is_param4_less_than_param2": "is_param4_less_than_param2",
                "is_param3_less_than_param1": "is_param3_less_than_param1",
                "result": "result"
            },
            "code": "uint check_parameters_08000904(uint param1, uint param2, uint param3, uint param4)\n{\n  uint result;\n  bool is_param2_negative = ((int)(param2 << 1) >> 0x15 == -1);\n  bool is_param4_negative = ((int)(param4 << 1) >> 0x15 == -1);\n  if (is_param2_negative || is_param4_negative)\n  {\n    bool is_param1_param2_nonzero = ((param1 | param2 << 0xc) != 0);\n    bool is_param3_param4_nonzero = ((param3 | param4 << 0xc) != 0);\n    if ((is_param2_negative && is_param1_param2_nonzero) || (is_param4_negative && is_param3_param4_nonzero))\n    {\n      return 1;\n    }\n  }\n  bool is_param1_param2_zero = ((param1 | param2 << 1) == 0);\n  bool is_param3_param4_zero = ((param3 | param4 << 1) == 0);\n  if (!is_param1_param2_zero && !is_param3_param4_zero)\n  {\n    bool are_param2_param4_equal = (param2 == param_4);\n    bool are_param1_param3_equal = (param1 == param_3);\n    if (!are_param2_param4_equal && !are_param1_param3_equal)\n    {\n      uint xor_param2_param4 = (param2 ^ param4);\n      bool is_xor_param2_param4_zero = (xor_param2_param4 == 0);\n      if (is_xor_param2_param4_zero)\n      {\n        result = 1;\n      }\n      else\n      {\n        bool is_xor_param2_param4_negative = (-1 < (int)xor_param2_param4);\n        bool is_param4_less_than_param2 = (param4 <= param2);\n        bool is_param3_less_than_param1 = (param3 <= param1);\n        bool is_param4_negative = ((int)param4 >> 0x1f);\n        if (is_xor_param2_param4_negative && is_param4_less_than_param2)\n        {\n          is_param4_negative = ~is_param4_negative;\n        }\n        if (is_param3_less_than_param1)\n        {\n          is_param4_negative |= 1;\n        }\n        result = is_param4_negative;\n      }\n    }\n  }\n  else\n  {\n    result = are_param2_param4_equal && are_param1_param3_equal;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000904",
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "imported": false,
            "current_name": "check_parameters_08000904"
        },
        "FUN_0800299a": {
            "renaming": {
                "FUN_0800299a": "receive_uart_data_0800299a",
                "*huart": "*uart_handler",
                "uVar1": "control_register",
                "uVar2": "tx_data",
                "uVar3": "status_register",
                "puVar4": "tx_buffer_ptr",
                "HVar5": "uart_state",
                "pUVar6": "uart_instance",
                "uVar7": "uart_error_code",
                "uVar8": "uart_cr3_bit",
                "bVar9": "parity_error",
                "huart->ErrorCode": "error_code",
                "huart->Instance": "uart_instance",
                "huart->pTxBuffPtr": "tx_buffer_ptr",
                "huart->TxXferCount": "tx_count",
                "huart->State": "uart_state",
                "HAL_UART_StateTypeDef": "HAL_UART_StateTypeDef",
                "USART_TypeDef": "USART_TypeDef",
                "HAL_UART_ERROR_NONE": "HAL_UART_STATE_READY",
                "HAL_UART_ERROR_PARITY": "HAL_UART_ERROR_PARITY",
                "HAL_UART_ERROR_FRAMING": "HAL_UART_ERROR_FRAMING",
                "HAL_UART_ERROR_ORE": "HAL_UART_ERROR_OVERRUN",
                "UART_Receive_IT": "UART_Receive_IT",
                "HAL_UART_ErrorCallback": "HAL_UART_ErrorCallback",
                "HAL_UART_TxCpltCallback": "HAL_UART_TxCpltCallback"
            },
            "code": "void receive_uart_data_0800299a(UART_HandleTypeDef *uart_handler)\n{\n  uint32_t status_register;\n  uint32_t control_register;\n  uint32_t error_code;\n  bool parity_error;\n  bool framing_error;\n  bool overrun_error;\n  uint32_t uart_error_code;\n  USART_TypeDef *uart_instance;\n  uint32_t uart_cr1;\n  uint32_t uart_cr3;\n  uint16_t *tx_buffer_ptr;\n  uint16_t tx_data;\n  uint16_t tx_count;\n  HAL_UART_StateTypeDef uart_state;\n  HAL_UART_StateTypeDef new_state;\n  \n  uart_instance = uart_handler->Instance;\n  status_register = uart_instance->SR;\n  control_register = uart_instance->CR1;\n  \n  if ((status_register & 0xf) == 0) {\n    if (((int)(status_register << 0x1a) < 0) && ((int)(control_register << 0x1a) < 0)) {\n      UART_Receive_IT(uart_handler);\n      return;\n    }\n  }\n  else {\n    uint32_t uart_cr3_bit = uart_instance->CR3 & 1;\n    if ((uart_cr3_bit != 0) || ((control_register & 0x120) != 0)) {\n      uart_error_code = status_register << 0x1f;\n      if ((int)uart_error_code < 0) {\n        parity_error = (int)(control_register << 0x17) < 0;\n        if (parity_error) {\n          uart_error_code = uart_handler->ErrorCode | 1;\n        }\n        if (parity_error) {\n          uart_handler->ErrorCode = uart_error_code;\n        }\n      }\n      framing_error = (int)(status_register << 0x1d) < 0 && uart_cr3_bit != 0;\n      if (framing_error) {\n        uart_handler->ErrorCode |= 2;\n      }\n      overrun_error = (int)(status_register << 0x1e) < 0 && uart_cr3_bit != 0;\n      if (overrun_error) {\n        uart_handler->ErrorCode |= 4;\n      }\n      if (((int)(status_register << 0x1c) < 0) && (uart_cr3_bit != 0)) {\n        uart_handler->ErrorCode |= 8;\n      }\n      if (uart_handler->ErrorCode == 0) {\n        return;\n      }\n      if (((int)(status_register << 0x1a) < 0) && ((int)(control_register << 0x1a) < 0)) {\n        UART_Receive_IT(uart_handler);\n      }\n      uart_instance = uart_handler->Instance;\n      if ((-1 < (int)(uart_handler->ErrorCode << 0x1c)) && ((uart_instance->CR3 & 0x40) == 0)) {\n        HAL_UART_ErrorCallback(uart_handler);\n        uart_handler->ErrorCode = 0;\n        return;\n      }\n      uart_instance->CR1 &= 0xfffffedf;\n      uart_instance->CR3 &= 0xfffffffe;\n      uart_handler->State = HAL_UART_STATE_READY;\n      HAL_UART_ErrorCallback(uart_handler);\n      return;\n    }\n  }\n  if (((int)(status_register << 0x18) < 0) && ((int)(control_register << 0x18) < 0)) {\n    if ((uart_handler->State & 0xdf) == 0x12) {\n      tx_buffer_ptr = (uint16_t *)uart_handler->pTxBuffPtr;\n      if ((uart_handler->Init).WordLength == 0x1000) {\n        tx_data = *tx_buffer_ptr & 0x1ff;\n        if ((uart_handler->Init).Parity == 0) {\n          tx_buffer_ptr = tx_buffer_ptr + 1;\n        }\n        else {\n          tx_buffer_ptr = (uint16_t *)((int)tx_buffer_ptr + 1);\n        }\n        uart_handler->pTxBuffPtr = (uint8_t *)tx_buffer_ptr;\n      }\n      else {\n        uart_handler->pTxBuffPtr = (uint8_t *)((int)tx_buffer_ptr + 1);\n        tx_data = (uint16_t)*(uint8_t *)tx_buffer_ptr;\n      }\n      tx_count = uart_handler->TxXferCount - 1;\n      uart_handler->TxXferCount = tx_count;\n      if (tx_count == 0) {\n        uart_instance->CR1 &= 0xffffff7f;\n        uart_instance->CR1 |= 0x40;\n        return;\n      }\n      uart_instance->DR = tx_data;\n    }\n  }\n  else if (((int)(status_register << 0x19) < 0) && ((int)(control_register << 0x19) < 0)) {\n    uart_instance->CR1 &= 0xffffffbf;\n    if (uart_handler->State == HAL_UART_STATE_BUSY_TX_RX) {\n      new_state = HAL_UART_STATE_BUSY_RX;\n    }\n    else {\n      new_state = HAL_UART_STATE_READY;\n    }\n    uart_handler->State = new_state;\n    HAL_UART_TxCpltCallback(uart_handler);\n  }\n}\n",
            "called": [
                "HAL_UART_ErrorCallback",
                "HAL_UART_TxCpltCallback",
                "UART_Receive_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800299a",
            "calling": [
                "USART1_IRQHandler"
            ],
            "imported": false,
            "current_name": "receive_uart_data_0800299a"
        },
        "FUN_080052e4": {
            "renaming": {
                "FUN_080052e4": "decode_data_080052e4",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output",
                "param_4": "param_4",
                "param_5": "callback",
                "iVar1": "status",
                "uVar2": "max_length",
                "uVar3": "append_length",
                "bVar4": "is_offset_four",
                "data_offset": "data_offset",
                "append_null": "append_null",
                "data_length": "data_length",
                "remaining_length": "remaining_length"
            },
            "code": "undefined4 decode_data_080052e4(undefined4 input, uint *data, uint *output, undefined4 param_4, code *callback)\n{\n  int i;\n  uint max_length = data[4] < data[2] ? data[2] : data[4];\n  *output = max_length;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output = max_length + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output += 2;\n  }\n  uint data_offset = *data & 6;\n  if (data_offset == 0) {\n    for (; (int)data_offset < (int)(data[3] - *output); data_offset++) {\n      int status = (*callback)(input, param_4, (int)data + 0x19, 1);\n      if (status == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  uint append_null = (uint)*(byte *)((int)data + 0x43);\n  if (append_null != 0) {\n    append_null = 1;\n  }\n  uint append_length = append_null;\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + append_null + 0x43) = 0x30;\n    append_length = append_null + 2;\n    *(undefined *)((int)data + append_null + 0x44) = *(undefined *)((int)data + 0x45);\n  }\n  int status = (*callback)(input, param_4, (int)data + 0x43, append_length);\n  if (status != -1) {\n    uint data_length = data[3];\n    bool is_offset_four = (*data & 6) != 4;\n    if (is_offset_four) {\n      data_length = 0;\n    }\n    uint remaining_length = 0;\n    if (!is_offset_four) {\n      data_length = data_length - *output;\n    }\n    if (!is_offset_four) {\n      data_length = data_length & ~((int)data_length >> 0x1f);\n    }\n    if (data[4] < data[2]) {\n      data_length = data_length + (data[2] - data[4]);\n    }\n    while (true) {\n      if (data_length == remaining_length) {\n        return 0;\n      }\n      status = (*callback)(input, param_4, (int)data + 0x1a, 1);\n      if (status == -1) {\n        break;\n      }\n      remaining_length++;\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052e4",
            "calling": [
                "_printf_i"
            ],
            "imported": false,
            "current_name": "decode_data_080052e4"
        },
        "FUN_08000f94": {
            "renaming": {
                "FUN_08000f94": "calculate_result_08000f94",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "double_input_1",
                "uVar3": "double_input_2",
                "uVar4": "or_result",
                "bVar5": "is_or_zero",
                "bVar1": "is_negative"
            },
            "code": "uint calculate_result_08000f94(uint input_1, uint input_2)\n{\n    bool is_negative;\n    uint double_input_1 = input_1 * 2;\n    uint double_input_2 = input_2 * 2;\n    \n    if (((int)double_input_1 >> 0x18 == -1 || (int)double_input_2 >> 0x18 == -1) &&\n        ((((int)double_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n         (((int)double_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0))))))\n    {\n        return 1;\n    }\n    \n    uint or_result = double_input_1 | input_2 & 0x7fffffff;\n    bool is_or_zero = or_result == 0;\n    if (!is_or_zero)\n    {\n        or_result = input_1 ^ input_2;\n        is_or_zero = or_result == 0;\n    }\n    \n    is_negative = -1 < (int)or_result;\n    if (is_negative)\n    {\n        input_1 = double_input_1 + input_2 * -2;\n        is_or_zero = input_1 == 0;\n    }\n    \n    if ((is_negative && double_input_2 <= double_input_1) && !is_or_zero)\n    {\n        input_1 = (int)input_2 >> 0x1f;\n    }\n    \n    if (!is_negative || double_input_2 > double_input_1)\n    {\n        input_1 = ~((int)input_2 >> 0x1f);\n    }\n    \n    if (!is_or_zero)\n    {\n        input_1 = input_1 | 1;\n    }\n    \n    return input_1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f94",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_08000f94"
        },
        "FUN_080014e2": {
            "renaming": {
                "FUN_080014e2": "check_i2c_acknowledge_080014e2",
                "*hi2c": "*i2c_handle",
                "Timeout": "timeout_ms",
                "HVar1": "status",
                "uVar2": "start_time",
                "uVar3": "current_time"
            },
            "code": "HAL_StatusTypeDef check_i2c_acknowledge_080014e2(I2C_HandleTypeDef *i2c_handle, uint32_t timeout_ms)\n{\n  HAL_StatusTypeDef status;\n  uint32_t start_time = HAL_GetTick();\n  while(true) {\n    if((int)(i2c_handle->Instance->SR1 << 0x18) < 0) {\n      return HAL_OK;\n    }\n    status = I2C_IsAcknowledgeFailed(i2c_handle);\n    if(status != HAL_OK) {\n      if(timeout_ms != 0xffffffff && (timeout_ms == 0 || HAL_GetTick() - start_time > timeout_ms)) {\n        i2c_handle->ErrorCode |= 0x20;\n        i2c_handle->State = HAL_I2C_STATE_READY;\n        i2c_handle->Lock = HAL_UNLOCKED;\n        return HAL_TIMEOUT;\n      }\n      break;\n    }\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "I2C_IsAcknowledgeFailed",
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014e2",
            "calling": [
                "HAL_I2C_Mem_Write",
                "I2C_RequestMemoryWrite",
                "I2C_RequestMemoryRead"
            ],
            "imported": false,
            "current_name": "check_i2c_acknowledge_080014e2"
        },
        "FUN_0800142e": {
            "renaming": {
                "FUN_0800142e": "toggle_gpio_output_0800142e",
                "GPIOx": "gpio",
                "GPIO_Pin": "pin",
                "ODR": "output_data_register"
            },
            "code": "void toggle_gpio_output_0800142e(GPIO_TypeDef *gpio, uint16_t pin) {\n    gpio->ODR ^= pin;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800142e",
            "calling": [
                "_Error_Handler"
            ],
            "imported": false,
            "current_name": "toggle_gpio_output_0800142e"
        },
        "FUN_08004d8c": {
            "renaming": {
                "FUN_08004d8c": "update_PWM_08004d8c",
                "htim_pwm": "pwm_timer",
                "pTVar1": "timer_instance",
                "DAT_08004e04": "original_timer_instance",
                "DAT_08004e08": "original_timer_register",
                "_DAT_4002101c": "_original_dat_4002101c",
                "DAT_08004e0c": "second_timer_instance",
                "DAT_08004e10": "third_timer_instance"
            },
            "code": "void update_PWM_08004d8c(TIM_HandleTypeDef *pwm_timer)\n{\n    TIM_TypeDef *timer_instance;\n\n    timer_instance = pwm_timer->Instance;\n\n    if (timer_instance == DAT_08004e04)\n    {\n        *(uint *)(DAT_08004e08 + 0x18) |= 0x800;\n    }\n    else if (timer_instance == (TIM_TypeDef *)0x40000000)\n    {\n        _DAT_4002101c |= 1;\n    }\n    else if (timer_instance == DAT_08004e0c)\n    {\n        *(uint *)(DAT_08004e08 + 0x1c) |= 2;\n    }\n    else if (timer_instance == DAT_08004e10)\n    {\n        *(uint *)(DAT_08004e08 + 0x1c) |= 4;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d8c",
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "imported": false,
            "current_name": "update_PWM_08004d8c"
        },
        "FUN_080009b4": {
            "renaming": {
                "FUN_080009b4": "isEndOfString_080009b4",
                "in_CY": "current_char"
            },
            "code": "bool isEndOfString_080009b4(void)\n{\n  char current_char;\n  __aeabi_cdcmpeq();\n  return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009b4",
            "calling": [
                "sqrt",
                "pow"
            ],
            "imported": false,
            "current_name": "isEndOfString_080009b4"
        },
        "FUN_08003068": {
            "renaming": {
                "FUN_08003068": "retrieve_input_value_08003068",
                "in_s0": "input_value"
            },
            "code": "float retrieve_input_value_08003068(void)\n{\n  float input_value;\n  return input_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003068",
            "calling": [
                "PID_UpdateAltitude"
            ],
            "imported": false,
            "current_name": "retrieve_input_value_08003068"
        },
        "FUN_08000f8c": {
            "renaming": {
                "FUN_08000f8c": "calculate_08000f8c",
                "param_1": "first_param",
                "param_2": "second_param",
                "uVar2": "first_double",
                "uVar3": "second_double",
                "uVar4": "combined",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "code": "uint calculate_08000f8c(uint first_param, uint second_param)\n{\n  bool is_negative;\n  uint first_double = first_param * 2;\n  uint second_double = second_param * 2;\n  if (((int)first_double >> 0x18 == -1 || (int)second_double >> 0x18 == -1) && ((((int)first_double >> 0x18 == -1 && ((first_param & 0x7fffff) != 0)) || (((int)second_double >> 0x18 == -1 && ((second_param & 0x7fffff) != 0))))))\n  {\n    return 0xffffffff;\n  }\n  uint combined = first_double | second_param & 0x7fffffff;\n  bool is_zero = combined == 0;\n  if (!is_zero)\n  {\n    combined = first_param ^ second_param;\n    is_zero = combined == 0;\n  }\n  is_negative = -1 < (int)combined;\n  if (is_negative)\n  {\n    first_param = first_double + second_param * -2;\n    is_zero = first_param == 0;\n  }\n  if ((is_negative && second_double <= first_double) && !is_zero)\n  {\n    first_param = (int)second_param >> 0x1f;\n  }\n  if (!is_negative || second_double > first_double)\n  {\n    first_param = ~((int)second_param >> 0x1f);\n  }\n  if (!is_zero)\n  {\n    first_param = first_param | 1;\n  }\n  return first_param;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f8c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_08000f8c"
        },
        "FUN_08000474": {
            "renaming": {
                "FUN_08000474": "divide_08000474",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar2": "quotient",
                "uVar3": "remainder",
                "iVar5": "bit_position",
                "uVar4": "divisor_mask",
                "uVar9": "dividend_mask",
                "bVar1": "is_dividend_negative",
                "bVar10": "bit_check",
                "bVar11": "is_divisor_negative",
                "bVar12": "is_negative_result",
                "uVar6": "temp",
                "uVar8": "sign_bit",
                "iVar7": "loop_counter",
                "uVar7": "result"
            },
            "code": "ulonglong divide_08000474(uint divide_08000474nd, uint divisor)\n{\n    byte is_divide_08000474nd_negative;\n    byte is_divisor_negative;\n    uint quotient = 0;\n    uint remainder = 0;\n    uint bit_position = 0;\n    uint divisor_mask = 0;\n    uint divide_08000474nd_mask = 0;\n    ulonglong result = 0;\n    \n    if (divide_08000474nd == 0 && divisor == 0) {\n        return CONCAT44(divisor, divide_08000474nd);\n    }\n    \n    is_divide_08000474nd_negative = (divide_08000474nd & 0x80000000) != 0;\n    is_divisor_negative = (divisor & 0x80000000) != 0;\n    \n    if (is_divide_08000474nd_negative) {\n        divide_08000474nd = -divide_08000474nd;\n    }\n    \n    if (is_divisor_negative) {\n        divisor = -divisor;\n    }\n    \n    divisor_mask = divisor;\n    divide_08000474nd_mask = divide_08000474nd;\n    \n    while ((divisor_mask & 0x80000000) == 0 && divisor_mask <= divide_08000474nd_mask) {\n        divisor_mask <<= 1;\n        bit_position++;\n    }\n    \n    while (bit_position > 0) {\n        divisor_mask >>= 1;\n        bit_position--;\n        quotient <<= 1;\n        if (divide_08000474nd_mask >= divisor_mask) {\n            divide_08000474nd_mask -= divisor_mask;\n            quotient |= 1;\n        }\n    }\n    \n    remainder = divide_08000474nd_mask;\n    \n    if (is_divide_08000474nd_negative != is_divisor_negative && remainder != 0) {\n        quotient++;\n    }\n    \n    result = CONCAT44((is_divide_08000474nd_negative != is_divisor_negative) ? 0x8000000000000000 : 0, quotient);\n    \n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000474",
            "calling": [],
            "imported": false,
            "current_name": "divide_08000474"
        },
        "FUN_08000110": {
            "renaming": {
                "FUN_08000110": "isInitializationComplete_08000110",
                "param_1": "initPointer",
                "PTR_completed_8672_08000128": "completedFlag",
                "DAT_0800012c": "initValue"
            },
            "code": "bool isInitializationComplete_08000110(bool *PTR_completed_8672_08000128, int DAT_0800012c, bool *initPointer) {\n  if (*PTR_completed_8672_08000128 == false) {\n    if (DAT_0800012c != 0) {\n      initPointer = &DAT_0800012c;\n    }\n    *PTR_completed_8672_08000128 = true;\n  }\n  return initPointer;\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000110",
            "calling": [],
            "imported": false,
            "current_name": "isInitializationComplete_08000110"
        },
        "FUN_0800709e": {
            "renaming": {
                "FUN_0800709e": "return_zero_on_exception_0800709e",
                "__exc": "__exception"
            },
            "code": "int return_zero_on_exception_0800709e(exception* __exception)\n{\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800709e",
            "calling": [
                "asin",
                "sqrt",
                "pow"
            ],
            "imported": false,
            "current_name": "return_zero_on_exception_0800709e"
        },
        "FUN_08002ec0": {
            "renaming": {
                "FUN_08002ec0": "calculateFilteredPitch_08002ec0",
                "in_s0": "input_pitch",
                "fVar1": "filtered_pitch",
                "PTR_lpf_pitch_08002ed0": "pitchFilter",
                "LPF": "lowPassFilter"
            },
            "code": "float calculateFilteredPitch_08002ec0(void)\n{\n  float input_pitch;\n  float filtered_pitch;\n  filtered_pitch = lowPassFilter(&PTR_lpf_pitch_08002ed0, input_pitch);\n  return filtered_pitch;\n}",
            "called": [
                "lowPassFilter"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ec0",
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "imported": false,
            "current_name": "calculateFilteredPitch_08002ec0"
        },
        "FUN_08006c0c": {
            "renaming": {
                "FUN_08006c0c": "calculate_product_and_sum_08006c0c",
                "param_1": "multiplicand",
                "param_2": "multiplier",
                "uVar1": "quotient_hi",
                "uVar2": "quotient_lo",
                "iVar3": "shift_count_1",
                "uVar4": "shifted_multiplier",
                "uVar5": "shifted_multiplicand",
                "iVar7": "shift_count_2",
                "uVar8": "product_hi",
                "uVar9": "product_lo",
                "iVar10": "exponent",
                "uVar11": "quotient_sign"
            },
            "code": "undefined8 calculate_product_and_sum_08006c0c(uint multiplicand, uint multiplier)\n{\n  undefined4 quotient_hi;\n  uint quotient_lo;\n  int shift_count_1;\n  uint shifted_multiplier;\n  uint shifted_multiplicand;\n  int shift_count_2;\n  uint product_hi;\n  uint product_lo;\n  int exponent;\n  uint quotient_sign;\n\n  if ((0x08006d60 & ~multiplier) == 0) {\n    uint64_t product = (uint64_t)multiplicand * multiplier;\n    product_lo = (uint)product;\n    product_hi = (uint)(product >> 32);\n    return CONCAT44(product_hi, product_lo);\n  }\n  if ((int)multiplier < 1) {\n    if ((multiplier & 0x7fffffff | multiplicand) == 0) {\n      return CONCAT44(multiplier, multiplicand);\n    }\n    if (multiplier != 0) {\n      uint64_t difference = (uint64_t)multiplicand - multiplier;\n      quotient_hi = (undefined4)(difference >> 32);\n      quotient_lo = __aeabi_uidivmod((uint)difference, quotient_hi, (uint)difference, quotient_hi);\n      return CONCAT44(quotient_hi, quotient_lo);\n    }\n  }\n\n  shift_count_1 = (int)multiplier >> 0x14;\n  if (shift_count_1 == 0) {\n    while (multiplier == 0) {\n      shift_count_1 = shift_count_1 - 0x15;\n      shifted_multiplicand = multiplicand >> 0xb;\n      multiplicand = multiplicand << 0x15;\n    }\n    int trailing_zero_count = 0;\n    for (; -1 < (int)(shifted_multiplicand << 0xb); shifted_multiplicand = shifted_multiplicand << 1) {\n      trailing_zero_count++;\n    }\n    shift_count_1 = shift_count_1 - (trailing_zero_count - 1);\n    shifted_multiplier = shifted_multiplicand | multiplicand >> (0x20 - trailing_zero_count & 0xff);\n    multiplicand = multiplicand << (trailing_zero_count & 0xff);\n  }\n\n  shift_count_2 = 0x16;\n  quotient_sign = 0x80000000;\n  product_hi = 0x20;\n  shifted_multiplicand = multiplicand << 1;\n  do {\n    uint trial_quotient = quotient_sign + product_hi;\n    if (trial_quotient <= shifted_multiplier) {\n      shifted_multiplier = shifted_multiplier - trial_quotient;\n      product_hi = trial_quotient + product_hi;\n      quotient_lo = quotient_lo + quotient_sign;\n    }\n    shift_count_2--;\n    shifted_multiplier = shifted_multiplier << 1;\n    quotient_sign = quotient_sign >> 1;\n    product_hi = product_hi << 1;\n  } while (shift_count_2 != 0);\n\n  exponent = shift_count_1 + 0x3fe00000 + ((int)multiplier >> 0x14) * 0x100000;\n  if ((multiplicand << 1 | shifted_multiplier) != 0) {\n    if (product_hi == 0xffffffff) {\n      exponent++;\n      product_hi = 0x20;\n    }\n    else {\n      product_hi = (product_hi + 1) & 0xfffffffe;\n    }\n  }\n  uint64_t result = ((uint64_t)exponent << 32) | product_hi >> 1;\n  return result;\n}",
            "called": [
                "__divdf3",
                "__muldf3",
                "__aeabi_dadd",
                "__subdf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c0c",
            "calling": [
                "sqrt",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "calculate_product_and_sum_08006c0c"
        },
        "FUN_0800426c": {
            "renaming": {
                "FUN_0800426c": "UpdateMotorSpeed_0800426c",
                "throttle": "throttle",
                "pitch": "pitch",
                "roll": "roll",
                "yaw": "yaw",
                "uVar1": "throttle_diff",
                "uVar2": "pitch_diff",
                "uVar3": "roll_diff",
                "m4": "motor4_speed",
                "m3": "motor3_speed",
                "m2": "motor2_speed",
                "m1": "motor1_speed",
                "DAT_080042fc": "NEUTRAL_THROTTLE/NEUTRAL_PITCH/NEUTRAL_ROLL/NEUTRAL_YAW"
            },
            "code": "void UpdateMotorSpeed_0800426c(float throttle, float pitch, float roll, float yaw) {\n  float throttle_diff = throttle - NEUTRAL_THROTTLE;\n  float pitch_diff = pitch - NEUTRAL_PITCH;\n  float roll_diff = roll - NEUTRAL_ROLL;\n  float yaw_diff = yaw - NEUTRAL_YAW;\n  int motor4_speed = (int)(throttle_diff - pitch_diff - roll_diff + yaw_diff);\n  int motor3_speed = (int)(throttle_diff - pitch_diff + roll_diff - yaw_diff);\n  int motor2_speed = (int)(throttle_diff + pitch_diff + roll_diff + yaw_diff);\n  int motor1_speed = (int)(throttle_diff + pitch_diff - roll_diff - yaw_diff);\n  Motor_SetSpeed(motor1_speed, motor2_speed, motor3_speed, motor4_speed);\n}",
            "called": [
                "Motor_SetSpeed",
                "__addsf3",
                "__aeabi_fsub",
                "__aeabi_f2iz"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800426c",
            "calling": [
                "PID_Update"
            ],
            "imported": false,
            "current_name": "UpdateMotorSpeed_0800426c"
        },
        "FUN_08002538": {
            "renaming": {
                "FUN_08002538": "enable_timer_channel_08002538",
                "htim": "timer_handle",
                "Channel": "channel",
                "pTVar1": "bdtr_instance",
                "pTVar2": "timer_instance",
                "DAT_08002560": "bdtr_instance"
            },
            "code": "HAL_StatusTypeDef enable_timer_channel_08002538(TIM_HandleTypeDef *timer_handle, uint32_t channel)\n{\n  TIM_TypeDef *timer_instance = timer_handle->Instance;\n  TIM_TypeDef *DAT_08002560 = DAT_08002560;\n  if (timer_instance == DAT_08002560) {\n    DAT_08002560 = (TIM_TypeDef *)(timer_instance->BDTR | 0x8000);\n  }\n  if (timer_instance == DAT_08002560) {\n    timer_instance->BDTR = (uint32_t)DAT_08002560;\n  }\n  timer_instance->CR1 |= 1;\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002538",
            "calling": [
                "PWM_Init"
            ],
            "imported": false,
            "current_name": "enable_timer_channel_08002538"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "read_i2c_data_080040e8",
                "device_add": "device_address",
                "register_add": "register_address",
                "byte_array": "data_array",
                "size": "size",
                "file": "file",
                "line": "line",
                "file_00": "file_00",
                "uVar1": "data_byte",
                "iVar2": "i",
                "puVar3": "data_ptr"
            },
            "code": "void read_i2c_data_080040e8(uint16_t device_address, uint16_t register_address, uint8_t *data_array, uint16_t size, char *file, int line)\n{\n  uint8_t *data_ptr = data_array;\n  for (int i = 0; i < size; i++) {\n    uint8_t data_byte = I2C_ReadByte(device_address, register_address + (short)i, file, 0x4c);\n    *data_ptr = data_byte;\n    data_ptr++;\n  }\n  return;\n}",
            "called": [
                "I2C_ReadByte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "AK8963_ReadData",
                "MS5611_Init",
                "MPU9250_ReadGyroData",
                "AK8963_Init",
                "MPU9250_ReadAccelData"
            ],
            "imported": false,
            "current_name": "read_i2c_data_080040e8"
        },
        "FUN_08000c44": {
            "renaming": {
                "FUN_08000c44": "calculate_hash_08000c44",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit",
                "iVar4": "shifted_input",
                "uVar5": "shift_mask",
                "DAT_0804a040": "0x80000000",
                "DAT_0804a044": "0x7fffffff",
                "count_leading_zeroes": "count_leading_zeroes"
            },
            "code": "uint32_t calculate_hash_08000c44(uint32_t input) {\n  int leading_zeroes = count_leading_zeroes(input);\n  uint32_t shift_amount = leading_zeroes - 8;\n  uint32_t sign_bit = input & DAT_0804a040;\n  uint32_t shifted_input = input << (leading_zeroes + 0x18U & 0xff);\n  uint32_t result = 0;\n\n  if (input == 0) {\n    return 0;\n  }\n\n  if ((int)sign_bit < 0) {\n    input = -input;\n  }\n\n  if (leading_zeroes > 7) {\n    uint32_t shift_mask = 0 << (shift_amount & 0xff);\n    result = ((sign_bit | 0x4b000000) - 0x800000) + (input << (shift_amount & 0xff)) + (0U >> (0x20 - shift_amount & 0xff)) + (uint32_t)(DAT_0804a044 < shift_mask);\n    if (shift_mask == DAT_0804a040) {\n      result = result & 0xfffffffe;\n    }\n  } else {\n    result = ((sign_bit | 0x4b000000) - 0x800000) + ((input >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shifted_input >> 0x1f));\n    if ((shifted_input & DAT_0804a044) == 0) {\n      result = result & ~(shifted_input >> 0x1f);\n    }\n  }\n\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c44",
            "calling": [
                "MS5611_Update",
                "AK8963_ReadData",
                "MPU9250_ReadGyroData",
                "AK8963_Init",
                "PID_Compute",
                "MPU9250_ReadAccelData"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000c44"
        },
        "FUN_08000a04": {
            "renaming": {
                "FUN_08000a04": "is_valid_input_08000a04",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08000a04(uint32_t input1, int32_t input2, uint32_t input3, int32_t input4) {\n    int is_input_valid = 1;\n    if ((((input2 << 1) >> 21) != -1) || ((input1 | (input2 << 12)) == 0) || (((input4 << 1) >> 21) != -1 || ((input3 | (input4 << 12)) == 0))) {\n        is_input_valid = 0;\n    }\n    return is_input_valid;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a04",
            "calling": [
                "asin",
                "sqrt",
                "pow"
            ],
            "imported": false,
            "current_name": "is_valid_input_08000a04"
        },
        "FUN_080025e8": {
            "renaming": {
                "FUN_080025e8": "set_UART_config_080025e8",
                "*huart": "huart",
                "uVar1": "pclk_freq",
                "uVar2": "integer_baud_rate",
                "uVar3": "fractional_baud_rate",
                "iVar4": "baud_rate_divisor",
                "uVar5": "parity",
                "iVar6": "stop_bits",
                "pUVar7": "uart_instance"
            },
            "code": "void set_UART_config_080025e8(UART_HandleTypeDef *huart)\n{\n  uint32_t pclk_freq, integer_baud_rate, fractional_baud_rate, baud_rate_divisor;\n  USART_TypeDef *uart_instance = huart->Instance;\n  uint parity = huart->Init.Parity;\n  uint stop_bits = huart->Init.StopBits;\n  uint word_length = huart->Init.WordLength;\n  uint mode = huart->Init.Mode;\n  uint hw_flow_ctl = huart->Init.HwFlowCtl;\n  if (uart_instance == DAT_08002720) {\n    pclk_freq = HAL_RCC_GetPCLK2Freq();\n  }\n  else {\n    pclk_freq = HAL_RCC_GetPCLK1Freq();\n  }\n  integer_baud_rate = (pclk_freq * 25) / (huart->Init.BaudRate * 4);\n  fractional_baud_rate = (((pclk_freq * 25) / (huart->Init.BaudRate * 4)) - integer_baud_rate) * 100;\n  baud_rate_divisor = (integer_baud_rate << 4) + ((fractional_baud_rate * 16) / 100);\n  uart_instance->CR2 = (uart_instance->CR2 & 0xFFFFCFFF) | stop_bits;\n  uart_instance->CR1 = word_length | parity | mode | (uart_instance->CR1 & 0xFFFFE9F3);\n  uart_instance->CR3 = (uart_instance->CR3 & 0xFFFFFCFF) | hw_flow_ctl;\n  uart_instance->BRR = baud_rate_divisor;\n}\n",
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e8",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "set_UART_config_080025e8"
        },
        "FUN_08003078": {
            "renaming": {
                "FUN_08003078": "FUNC_08003078"
            },
            "code": "\nvoid FUNC_08003078(void)\n\n{\n  undefined4 *puVar1;\n  byte bVar2;\n  longlong lVar3;\n  uint uVar4;\n  undefined *puVar5;\n  undefined *puVar6;\n  undefined *puVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined4 uVar10;\n  undefined4 uVar11;\n  undefined4 uVar12;\n  uint32_t uVar13;\n  undefined4 extraout_r1;\n  uint uVar14;\n  undefined4 unaff_r4;\n  uint uVar15;\n  uint uVar16;\n  uint uVar17;\n  undefined4 *puVar18;\n  undefined4 unaff_r5;\n  undefined4 unaff_r6;\n  undefined4 unaff_r7;\n  int iVar19;\n  int iVar20;\n  int iVar21;\n  bool bVar22;\n  undefined8 uVar23;\n  \n  puVar6 = PTR_PRESSURE_READY_08003254;\n  puVar5 = PTR_TEMP_READY_08003250;\n  if ((*PTR_TEMP_READY_08003250 != '\\0') && (*PTR_PRESSURE_READY_08003254 != '\\0')) {\n    iVar21 = *(int *)PTR_MS5611_RawTemperature_0800325c +\n             (uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 10) * -0x100;\n    uVar14 = (uint)((longlong)(int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 0xc) *\n                   (longlong)iVar21) >> 0x17 |\n             (int)((ulonglong)\n                   ((longlong)(int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 0xc) *\n                   (longlong)iVar21) >> 0x20) << 9;\n    uVar15 = (uint)((longlong)(int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 8) *\n                    (longlong)iVar21 >> 7);\n    uVar16 = uVar15 + (uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 4) * 0x10000;\n    uVar8 = (uint)((ulonglong)\n                   ((longlong)(int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 6) *\n                   (longlong)iVar21) >> 8);\n    iVar19 = uVar14 + 2000;\n    uVar9 = uVar8 + (uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 2) * 0x8000;\n    bVar22 = (int)uVar14 < 0;\n    if (1999 < iVar19) {\n      uVar14 = 0;\n    }\n    uVar4 = uVar14;\n    if (bVar22 != SBORROW4(iVar19,2000)) {\n      iVar20 = uVar14 * uVar14 * 5;\n      uVar14 = iVar20 >> 2;\n      uVar4 = iVar20 >> 1;\n    }\n    uVar17 = uVar16 - uVar4;\n    lVar3 = (ulonglong)(uVar9 - uVar14) * (ulonglong)*(uint *)PTR_MS5611_RawPressure_08003260;\n    iVar20 = *(uint *)PTR_MS5611_RawPressure_08003260 *\n             ((((int)((longlong)(int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 6) *\n                      (longlong)iVar21 >> 0x28) +\n               (uint)CARRY4(uVar8,(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 2) * 0x8000))\n              - ((int)uVar14 >> 0x1f)) - (uint)(uVar9 < uVar14)) + (int)((ulonglong)lVar3 >> 0x20);\n    uVar8 = (uint)lVar3 >> 0x15 | iVar20 * 0x800;\n    uVar10 = __floatsisf(uVar8 - uVar17 >> 0xf |\n                         (((iVar20 >> 0x15) -\n                          ((((int)((longlong)\n                                   (int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 8) *\n                                   (longlong)iVar21 >> 0x27) +\n                            (uint)CARRY4(uVar15,(uint)*(ushort *)\n                                                       (PTR_MS5611_Coefficients_08003258 + 4) *\n                                                0x10000)) - ((int)uVar4 >> 0x1f)) -\n                          (uint)(uVar16 < uVar4))) - (uint)(uVar8 < uVar17)) * 0x20000);\n    uVar11 = __aeabi_fdiv(uVar10,DAT_08003264);\n    *(undefined4 *)PTR_MS5611_CompensatedPressure_08003268 = uVar11;\n    uVar10 = __floatsisf(iVar19);\n    uVar12 = __aeabi_fdiv(uVar10,DAT_08003264);\n    uVar10 = DAT_08003270;\n    *(undefined4 *)PTR_MS5611_CompensatedTemperature_0800326c = uVar12;\n    __aeabi_fdiv(uVar11,uVar10);\n    uVar10 = __aeabi_f2d();\n    pow((double)CONCAT44(unaff_r5,unaff_r4),(double)CONCAT44(unaff_r7,unaff_r6));\n    uVar23 = __subdf3(0,DAT_08003274,uVar10,extraout_r1);\n    __muldf3((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),DAT_08003248,DAT_0800324c);\n    uVar10 = __truncdfsf2();\n    puVar7 = PTR_alt_filter_08003278;\n    *(undefined4 *)PTR_MS5611_Altitude_0800327c = uVar10;\n    uVar11 = 0;\n    puVar18 = (undefined4 *)puVar7;\n    do {\n      puVar1 = puVar18 + 1;\n      *puVar18 = *puVar1;\n      uVar11 = __addsf3(uVar11);\n      puVar18 = puVar1;\n    } while ((undefined4 *)(puVar7 + 0x4c) != puVar1);\n    *(undefined4 *)(puVar7 + 0x4c) = uVar10;\n    uVar10 = __addsf3(uVar11,uVar10);\n    uVar10 = __aeabi_fdiv(uVar10,DAT_08003280);\n    *(undefined4 *)PTR_MS5611_FilteredAltitude_08003284 = uVar10;\n    iVar19 = __aeabi_f2iz();\n    puVar7 = PTR_MS5611_OSR_0800328c;\n    *(int *)PTR_msp_txf_altitude_08003288 = iVar19 * 100;\n    bVar2 = *puVar7;\n    *puVar5 = 0;\n    *puVar6 = 0;\n    I2C_WriteByte(0xee,bVar2 + 0x50,'\\x01','\\0');\n    uVar13 = millis();\n    *(uint32_t *)PTR_temp_time_08003290 = uVar13;\n  }\n  uVar13 = millis();\n  puVar6 = PTR_pressure_time_08003294;\n  if (((10 < uVar13 - *(int *)PTR_temp_time_08003290) && (*puVar5 == '\\0')) &&\n     (*PTR_PRESSURE_READY_08003254 == '\\0')) {\n    uVar13 = MS5611_ReadADC();\n    puVar7 = PTR_MS5611_RawTemperature_0800325c;\n    *puVar5 = 1;\n    *(uint32_t *)puVar7 = uVar13;\n    I2C_WriteByte(0xee,(byte)*PTR_MS5611_OSR_0800328c + 0x40,'\\x01','\\0');\n    uVar13 = millis();\n    *(uint32_t *)puVar6 = uVar13;\n  }\n  uVar13 = millis();\n  puVar7 = PTR_PRESSURE_READY_08003254;\n  if (((10 < uVar13 - *(int *)puVar6) && (*puVar5 != '\\0')) &&\n     (*PTR_PRESSURE_READY_08003254 == '\\0')) {\n    uVar13 = MS5611_ReadADC();\n    *(uint32_t *)PTR_MS5611_RawPressure_08003260 = uVar13;\n    *puVar7 = 1;\n  }\n  return;\n}\n\n",
            "called": [
                "__floatsisf",
                "__muldf3",
                "__addsf3",
                "millis",
                "__aeabi_fdiv",
                "__aeabi_f2d",
                "__truncdfsf2",
                "I2C_WriteByte",
                "__subdf3",
                "MS5611_ReadADC",
                "pow",
                "__aeabi_f2iz"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003078",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "FUNC_08003078"
        },
        "FUN_080009c8": {
            "renaming": {
                "FUN_080009c8": "compare_double_values_080009c8",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_nonzero"
            },
            "code": "bool compare_double_values_080009c8(void)\n{\n  bool is_CY_zero = __aeabi_cdcmpeq();\n  bool is_ZR_nonzero = !is_CY_zero || (bool)in_ZR;\n  return is_ZR_nonzero;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c8",
            "calling": [
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "compare_double_values_080009c8"
        },
        "FUN_08000f9c": {
            "renaming": {
                "FUN_08000f9c": "calculate_08000f9c",
                "param_1": "num1",
                "param_2": "num2",
                "uVar2": "doubleNum1",
                "uVar3": "doubleNum2",
                "uVar4": "orNum",
                "bVar1": "isNegativeNum",
                "bVar5": "isZero"
            },
            "code": "uint calculate_08000f9c(uint num1, uint num2)\n{\n  bool isNegative1, isNegative2, isZero;\n  uint doubleNum1, doubleNum2, orNum;\n\n  doubleNum1 = num1 * 2;\n  doubleNum2 = num2 * 2;\n  isNegative1 = ((int)doubleNum1 >> 0x18 == -1);\n  isNegative2 = ((int)doubleNum2 >> 0x18 == -1);\n  if (isNegative1 || isNegative2)\n  {\n    if ((isNegative1 && ((num1 & 0x7fffff) != 0)) || ((isNegative2 && ((num2 & 0x7fffff) != 0))))\n    {\n      return 1;\n    }\n  }\n  orNum = doubleNum1 | num2 & 0x7fffffff;\n  isZero = orNum == 0;\n  if (!isZero)\n  {\n    orNum = num1 ^ num2;\n    isZero = orNum == 0;\n  }\n  if (-1 < (int)orNum)\n  {\n    num1 = doubleNum1 + num2 * -2;\n    isZero = num1 == 0;\n  }\n  if (-1 < (int)orNum && doubleNum2 <= doubleNum1 && !isZero)\n  {\n    num1 = (int)num2 >> 0x1f;\n  }\n  if (-1 >= (int)orNum || doubleNum2 > doubleNum1)\n  {\n    num1 = ~((int)num2 >> 0x1f);\n  }\n  if (!isZero)\n  {\n    num1 = num1 | 1;\n  }\n  return num1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f9c",
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "imported": false,
            "current_name": "calculate_08000f9c"
        },
        "FUN_08002ed4": {
            "renaming": {
                "FUN_08002ed4": "applyLowPassFilter_08002ed4",
                "in_s0": "input",
                "fVar1": "filteredOutput"
            },
            "code": "float applyLowPassFilter_08002ed4(float input)\n{\n  float filteredOutput;\n  filteredOutput = lowPassFilter((LPF *)PTR_lpf_roll_08002ee4, input);\n  return filteredOutput;\n}",
            "called": [
                "lowPassFilter"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ed4",
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "imported": false,
            "current_name": "applyLowPassFilter_08002ed4"
        },
        "FUN_08006228": {
            "renaming": {
                "FUN_08006228": "FUNC_08006228"
            },
            "code": "\nvoid FUNC_08006228(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  undefined4 extraout_r1;\n  uint extraout_r1_00;\n  undefined4 uVar2;\n  undefined4 extraout_r1_01;\n  undefined4 extraout_r1_02;\n  uint extraout_r1_03;\n  undefined4 extraout_r1_04;\n  undefined4 uVar3;\n  int iVar4;\n  uint uVar5;\n  undefined4 uVar6;\n  uint uVar7;\n  undefined4 uVar8;\n  uint uVar9;\n  undefined4 uVar10;\n  undefined4 uVar11;\n  undefined8 uVar12;\n  undefined8 uVar13;\n  undefined8 uVar14;\n  undefined8 uVar15;\n  longlong lVar16;\n  ulonglong uVar17;\n  undefined8 uVar18;\n  undefined4 uVar19;\n  undefined4 in_stack_ffffff94;\n  undefined4 local_68;\n  undefined4 local_64;\n  int local_54;\n  \n  uVar9 = param_4 & 0x7fffffff;\n  if ((uVar9 | param_3) == 0) {\n    return;\n  }\n  uVar7 = param_2 & 0x7fffffff;\n  if ((int)uVar7 <= (int)DAT_08006428) {\n    if (uVar7 == DAT_08006428) {\n      if (param_1 == 0) {\n        if (uVar7 < uVar9) goto LAB_08006278;\nLAB_08006262:\n        if ((uVar9 != DAT_08006428) || (param_3 == 0)) {\n          if (-1 < (int)param_2) goto LAB_0800632a;\n          if (DAT_08006430 < (int)uVar9) {\n            uVar1 = 2;\nLAB_080062ba:\n            if (param_3 == 0) {\n              if (uVar9 == DAT_08006428) {\n                return;\n              }\nLAB_0800630c:\n              if (uVar9 == DAT_08006438) {\n                if (-1 < (int)param_4) {\n                  return;\n                }\n                uVar7 = 0;\n                uVar9 = DAT_08006438;\n                goto LAB_08006320;\n              }\n              if (param_4 == 0x40000000) goto LAB_0800634a;\n              if ((param_4 == DAT_0800643c) && (-1 < (int)param_2)) {\n                __ieee754_sqrt(param_1,param_2);\n                return;\n              }\n            }\n          }\n          else {\n            if ((int)uVar9 <= DAT_08006430 + -0x3500000) {\nLAB_0800632a:\n              uVar1 = 0;\n              goto LAB_080062ba;\n            }\n            iVar4 = ((int)uVar9 >> 0x14) + -0x3ff;\n            if (0x14 < iVar4) {\n              uVar1 = param_3 >> (0x34U - iVar4 & 0xff);\n              if (param_3 == uVar1 << (0x34U - iVar4 & 0xff)) {\n                uVar1 = 2 - (uVar1 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (param_3 == 0) {\n              uVar5 = (int)uVar9 >> (0x14U - iVar4 & 0xff);\n              uVar1 = param_3;\n              if (uVar9 == uVar5 << (0x14U - iVar4 & 0xff)) {\n                uVar1 = 2 - (uVar5 & 1);\n              }\n              goto LAB_0800630c;\n            }\n            uVar1 = 0;\n          }\n          uVar5 = param_1;\n          fabs((double)CONCAT44(in_stack_ffffff94,uVar1));\n          uVar17 = CONCAT44(param_2,uVar5) & 0x7fffffffffffffff;\n          if ((param_1 == 0) && ((uVar7 == 0 || ((param_2 & 0x3fffffff) == DAT_08006438)))) {\n            if ((int)param_4 < 0) {\n              __divdf3(0,DAT_08006438,uVar5,extraout_r1);\n            }\n            if (-1 < (int)param_2) {\n              return;\n            }\n            if ((uVar1 | uVar7 + 0xc0100000) != 0) {\n              return;\n            }\n          }\n          else {\n            uVar5 = 0xffffffff - ((int)param_2 >> 0x1f);\n            if ((uVar1 | uVar5) != 0) {\n              if (DAT_08006440 < (int)uVar9) {\n                if (DAT_08006440 + 0x2100000 < (int)uVar9) {\n                  if (DAT_08006434 < (int)uVar7) {\nLAB_08006418:\n                    if ((int)param_4 < 1) {\n                      return;\n                    }\n                    goto LAB_0800634a;\n                  }\nLAB_080063fa:\n                  if (-1 < (int)param_4) {\n                    return;\n                  }\n                  goto LAB_0800634a;\n                }\n                if ((int)uVar7 <= DAT_08006444) goto LAB_080063fa;\n                if ((int)DAT_08006438 < (int)uVar7) goto LAB_08006418;\n                uVar12 = __subdf3();\n                uVar10 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar8 = (undefined4)uVar12;\n                uVar12 = __muldf3(uVar8,uVar10,DAT_080065a8,DAT_080065ac);\n                uVar13 = __muldf3(uVar8,uVar10,DAT_080065b0,DAT_080065b4);\n                uVar14 = __muldf3(uVar8,uVar10,0,DAT_080065d4);\n                uVar14 = __subdf3(DAT_080065b8,DAT_080065bc,(int)uVar14,\n                                  (int)((ulonglong)uVar14 >> 0x20));\n                uVar14 = __muldf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),uVar8,uVar10);\n                uVar14 = __subdf3(0,DAT_080065d8,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                uVar15 = __muldf3(uVar8,uVar10,uVar8,uVar10);\n                uVar14 = __muldf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar15,\n                                  (int)((ulonglong)uVar15 >> 0x20));\n                uVar14 = __muldf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),DAT_080065c0,\n                                  DAT_080065c4);\n                uVar13 = __subdf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar14,\n                                  (int)((ulonglong)uVar14 >> 0x20));\n                __aeabi_dadd((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar13,\n                             (int)((ulonglong)uVar13 >> 0x20));\n                lVar16 = (ulonglong)extraout_r1_00 << 0x20;\n                uVar9 = extraout_r1_00;\n              }\n              else {\n                local_54 = 0;\n                if (uVar7 < 0x100000) {\n                  uVar17 = __muldf3();\n                  local_54 = -0x35;\n                }\n                uVar9 = (uint)(uVar17 >> 0x20);\n                local_54 = ((int)uVar9 >> 0x14) + -0x3ff + local_54;\n                uVar9 = uVar9 & 0xfffff;\n                uVar7 = uVar9 | 0x3ff00000;\n                if (DAT_0800691c < (int)uVar9) {\n                  if (DAT_08006920 < (int)uVar9) {\n                    uVar7 = uVar7 - 0x100000;\n                    local_54 = local_54 + 1;\n                    goto LAB_08006628;\n                  }\n                  iVar4 = 1;\n                }\n                else {\nLAB_08006628:\n                  iVar4 = 0;\n                }\n                uVar6 = *(undefined4 *)(PTR_bp_08006924 + iVar4 * 8);\n                uVar19 = *(undefined4 *)((int)(PTR_bp_08006924 + iVar4 * 8) + 4);\n                uVar12 = __subdf3();\n                uVar10 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar13 = __aeabi_dadd((int)uVar17,uVar7,uVar6,uVar19);\n                uVar13 = __divdf3(0,DAT_08006928,(int)uVar13,(int)((ulonglong)uVar13 >> 0x20));\n                uVar11 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar14 = __muldf3((int)uVar12,uVar10,(int)uVar13,uVar11);\n                uVar2 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar8 = (undefined4)uVar14;\n                uVar14 = __muldf3(0,uVar2);\n                uVar12 = __subdf3((int)uVar12,uVar10,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                uVar14 = __subdf3(0,((int)uVar7 >> 1 | 0x20000000U) + 0x80000 + iVar4 * 0x40000,\n                                  uVar6,uVar19);\n                uVar14 = __subdf3((int)uVar17,uVar7,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                uVar14 = __muldf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),0,uVar2);\n                uVar12 = __subdf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar14,\n                                  (int)((ulonglong)uVar14 >> 0x20));\n                uVar12 = __muldf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar13,uVar11);\n                uVar11 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar13 = __muldf3(uVar8,uVar2);\n                uVar6 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar10 = (undefined4)uVar13;\n                uVar13 = __muldf3(uVar10,uVar6,DAT_080068d0,DAT_080068d4);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_080068d8,\n                                      DAT_080068dc);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar10,uVar6);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_080068e0,\n                                      DAT_080068e4);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar10,uVar6);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_080068e8,\n                                      DAT_080068ec);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar10,uVar6);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_080068f0,\n                                      DAT_080068f4);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar10,uVar6);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_080068f8,\n                                      DAT_080068fc);\n                uVar14 = __muldf3(uVar10,uVar6,uVar10,uVar6);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar14,\n                                  (int)((ulonglong)uVar14 >> 0x20));\n                uVar14 = __aeabi_dadd(uVar8,uVar2,0,uVar2);\n                uVar14 = __muldf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar12,uVar11);\n                uVar13 = __aeabi_dadd((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar13,\n                                      (int)((ulonglong)uVar13 >> 0x20));\n                uVar10 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar14 = __muldf3(0,uVar2,0,uVar2);\n                uVar6 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar15 = __aeabi_dadd((int)uVar14,uVar6,0,DAT_0800692c);\n                __aeabi_dadd((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar13,uVar10);\n                uVar15 = __muldf3(0,uVar2,0,extraout_r1_01);\n                uVar19 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar18 = __subdf3(0,extraout_r1_01,0,DAT_0800692c);\n                uVar14 = __subdf3((int)uVar18,(int)((ulonglong)uVar18 >> 0x20),(int)uVar14,uVar6);\n                uVar13 = __subdf3((int)uVar13,uVar10,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar8,uVar2);\n                uVar12 = __muldf3((int)uVar12,uVar11,0,extraout_r1_01);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar12,\n                                      (int)((ulonglong)uVar12 >> 0x20));\n                uVar8 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                __aeabi_dadd((int)uVar15,uVar19,(int)uVar13,uVar8);\n                uVar12 = __muldf3(0,extraout_r1_02,DAT_08006900,DAT_08006904);\n                uVar14 = __subdf3(0,extraout_r1_02,(int)uVar15,uVar19);\n                uVar13 = __subdf3((int)uVar13,uVar8,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006908,\n                                  DAT_0800690c);\n                uVar14 = __muldf3(0,extraout_r1_02,DAT_08006910,DAT_08006914);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar14,\n                                      (int)((ulonglong)uVar14 >> 0x20));\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),\n                                      *(undefined4 *)(PTR_dp_l_08006930 + iVar4 * 8),\n                                      *(undefined4 *)((int)(PTR_dp_l_08006930 + iVar4 * 8) + 4));\n                uVar14 = __aeabi_i2d(local_54);\n                uVar8 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar10 = *(undefined4 *)(PTR_dp_h_08006934 + iVar4 * 8);\n                uVar11 = *(undefined4 *)((int)(PTR_dp_h_08006934 + iVar4 * 8) + 4);\n                uVar15 = __aeabi_dadd((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar13,\n                                      (int)((ulonglong)uVar13 >> 0x20));\n                uVar15 = __aeabi_dadd((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar10,uVar11);\n                __aeabi_dadd((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar14,uVar8);\n                uVar14 = __subdf3(0,extraout_r1_03,(int)uVar14,uVar8);\n                lVar16 = __subdf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),uVar10,uVar11);\n                uVar9 = extraout_r1_03;\n              }\n              uVar12 = __subdf3((int)lVar16,(int)((ulonglong)lVar16 >> 0x20),(int)uVar12,\n                                (int)((ulonglong)uVar12 >> 0x20));\n              uVar12 = __subdf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar12,\n                                (int)((ulonglong)uVar12 >> 0x20));\n              uVar8 = DAT_080065dc;\n              if ((uVar1 - 1 | uVar5) != 0) {\n                uVar8 = DAT_080065d0;\n              }\n              uVar19 = 0;\n              uVar13 = __subdf3(param_3,param_4,0,param_4);\n              uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),0,uVar9);\n              uVar12 = __muldf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),param_3,param_4);\n              uVar12 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar12,\n                                    (int)((ulonglong)uVar12 >> 0x20));\n              uVar2 = (undefined4)((ulonglong)uVar12 >> 0x20);\n              uVar10 = (undefined4)uVar12;\n              uVar12 = __muldf3(0,uVar9,0,param_4);\n              uVar6 = (undefined4)((ulonglong)uVar12 >> 0x20);\n              uVar11 = (undefined4)uVar12;\n              lVar16 = __aeabi_dadd(uVar10,uVar2,uVar11,uVar6);\n              uVar7 = (uint)((ulonglong)lVar16 >> 0x20);\n              uVar9 = (uint)lVar16;\n              if (DAT_080065e0 < (int)uVar7) {\n                if ((uVar7 + 0xbf700000 | uVar9) == 0) {\n                  uVar13 = __aeabi_dadd(uVar10,uVar2,DAT_08006ba8,DAT_08006bac);\n                  uVar14 = __subdf3(uVar9,uVar7,uVar11,uVar6);\n                  iVar4 = __aeabi_dcmpgt((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar14,\n                                         (int)((ulonglong)uVar14 >> 0x20));\n                  if (iVar4 == 0) goto LAB_08006968;\n                }\n                __muldf3(uVar19,uVar8,DAT_080065c8,DAT_080065cc);\n                goto LAB_0800634a;\n              }\n              if (DAT_08006c04 < (int)(uVar7 & 0x7fffffff)) {\n                if ((DAT_08006c08 + uVar7 | uVar9) == 0) {\n                  uVar13 = __subdf3(uVar9,uVar7,uVar11,uVar6);\n                  iVar4 = __aeabi_dcmple(uVar10,uVar2,(int)uVar13,(int)((ulonglong)uVar13 >> 0x20));\n                  if (iVar4 == 0) goto LAB_08006968;\n                }\n                __muldf3(uVar19,uVar8,DAT_08006bf0,DAT_08006bf4);\n              }\n              else {\nLAB_08006968:\n                if (DAT_08006bf8 < (int)(uVar7 & 0x7fffffff)) {\n                  uVar7 = (0x100000 >> (((int)(uVar7 & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          uVar7;\n                  uVar9 = (uVar7 * 2 >> 0x15) - 0x3ff;\n                  iVar4 = (int)(uVar7 & 0xfffff | 0x100000) >> (0x14 - uVar9 & 0xff);\n                  if (lVar16 < 0) {\n                    iVar4 = -iVar4;\n                  }\n                  uVar12 = __subdf3(uVar11,uVar6,0,uVar7 & ~(DAT_08006bfc >> (uVar9 & 0xff)));\n                }\n                else {\n                  iVar4 = 0;\n                }\n                local_64 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                local_68 = (undefined4)uVar12;\n                __aeabi_dadd(local_68,local_64,uVar10,uVar2);\n                uVar12 = __muldf3(0,extraout_r1_04,DAT_08006bb0,DAT_08006bb4);\n                uVar11 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar13 = __subdf3(0,extraout_r1_04,local_68,local_64);\n                uVar13 = __subdf3(uVar10,uVar2,(int)uVar13,(int)((ulonglong)uVar13 >> 0x20));\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006bb8,\n                                  DAT_08006bbc);\n                uVar14 = __muldf3(0,extraout_r1_04,DAT_08006bc0,DAT_08006bc4);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar14,\n                                      (int)((ulonglong)uVar14 >> 0x20));\n                uVar2 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar14 = __aeabi_dadd((int)uVar12,uVar11,(int)uVar13,uVar2);\n                uVar6 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar10 = (undefined4)uVar14;\n                uVar12 = __subdf3(uVar10,uVar6,(int)uVar12,uVar11);\n                uVar12 = __subdf3((int)uVar13,uVar2,(int)uVar12,(int)((ulonglong)uVar12 >> 0x20));\n                uVar2 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar13 = __muldf3(uVar10,uVar6,uVar10,uVar6);\n                uVar3 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar11 = (undefined4)uVar13;\n                uVar13 = __muldf3(uVar11,uVar3,DAT_08006bc8,DAT_08006bcc);\n                uVar13 = __subdf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006bd0,\n                                  DAT_08006bd4);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar11,uVar3);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006bd8,\n                                      DAT_08006bdc);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar11,uVar3);\n                uVar13 = __subdf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006be0,\n                                  DAT_08006be4);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar11,uVar3);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006be8,\n                                      DAT_08006bec);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar11,uVar3);\n                uVar13 = __subdf3(uVar10,uVar6,(int)uVar13,(int)((ulonglong)uVar13 >> 0x20));\n                uVar11 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar14 = __muldf3(uVar10,uVar6,(int)uVar13,uVar11);\n                uVar13 = __subdf3((int)uVar13,uVar11,0,0x40000000);\n                uVar13 = __divdf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar13,\n                                  (int)((ulonglong)uVar13 >> 0x20));\n                uVar14 = __muldf3(uVar10,uVar6,(int)uVar12,uVar2);\n                uVar12 = __aeabi_dadd((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar12,uVar2\n                                     );\n                uVar12 = __subdf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar12,\n                                  (int)((ulonglong)uVar12 >> 0x20));\n                uVar12 = __subdf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),uVar10,uVar6);\n                uVar12 = __subdf3(0,DAT_08006c00,(int)uVar12,(int)((ulonglong)uVar12 >> 0x20));\n                if ((int)((ulonglong)uVar12 >> 0x20) + iVar4 * 0x100000 < 0x100000) {\n                  scalbn((double)CONCAT44(uVar8,uVar19),(int)uVar12);\n                }\n              }\nLAB_0800634a:\n              __muldf3();\n              return;\n            }\n          }\n          uVar12 = __subdf3();\n          uVar9 = (uint)((ulonglong)uVar12 >> 0x20);\n          uVar7 = (uint)uVar12;\n          param_1 = uVar7;\n          param_2 = uVar9;\nLAB_08006320:\n          __divdf3(uVar7,uVar9,param_1,param_2);\n          return;\n        }\n      }\n    }\n    else if ((int)uVar9 <= (int)DAT_08006428) goto LAB_08006262;\n  }\n  if ((uVar7 + 0xc0100000 | param_1) == 0) {\n    return;\n  }\nLAB_08006278:\n  nan(PTR_DAT_0800642c);\n  return;\n}\n\n",
            "called": [
                "scalbn",
                "__aeabi_dcmple",
                "__divdf3",
                "__muldf3",
                "__ieee754_sqrt",
                "__aeabi_dcmpgt",
                "__aeabi_dadd",
                "fabs",
                "__subdf3",
                "__aeabi_i2d",
                "nan"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006228",
            "calling": [
                "pow"
            ],
            "imported": false,
            "current_name": "FUNC_08006228"
        },
        "FUN_08000c3c": {
            "renaming": {
                "FUN_08000c3c": "calculate_hash_08000c3c",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "iVar3": "multiplier",
                "uVar4": "carry",
                "shifted_input": "shifted_input",
                "shifted_zero": "shifted_zero",
                "result": "result",
                "subtractor": "subtractor"
            },
            "code": "uint calculate_hash_08000c3c(uint input)\n{\n    if (input == 0) {\n        return 0;\n    }\n    int leading_zeroes = count_leading_zeroes(input);\n    int shift_amount = leading_zeroes - 8;\n    int multiplier = shift_amount * -0x800000 + 0x4a800000;\n    if (leading_zeroes > 7) {\n        uint shifted_input = input << (shift_amount & 0xff);\n        uint shifted_zero = 0U >> (0x20 - shift_amount & 0xff);\n        uint carry = (uint)(0x7fffffff < 0);\n        uint result = multiplier + shifted_input + shifted_zero + carry;\n        if (shifted_zero == 0x80000000) {\n            result = result & 0xfffffffe;\n        }\n        return result;\n    }\n    uint shifted_input = input << (leading_zeroes + 0x18U & 0xff);\n    uint shifted_multiplier = ((uint)multiplier >> (0x20 - (leading_zeroes + 0x18U) & 0xff));\n    uint subtractor = ((int)shifted_input >> 0x1f);\n    uint result = multiplier + shifted_multiplier - subtractor;\n    if ((shifted_input & 0x7fffffff) == 0) {\n        result = result & ~(shifted_input >> 0x1f);\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c3c",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000c3c"
        },
        "FUN_08001214": {
            "renaming": {
                "FUN_08001214": "calculate_ticks_08001214",
                "TicksNumb": "ticks_number",
                "puVar1": "data_ptr",
                "iVar2": "data_int"
            },
            "code": "uint32_t calculate_ticks_08001214(uint32_t ticks_number)\n{\n  undefined4 *data_ptr;\n  int data_int;\n  data_int = DAT_0800123c;\n  data_ptr = DAT_08001238;\n  if (ticks_number - 1 < 0x1000000) {\n    DAT_08001238[1] = ticks_number - 1;\n    *(undefined *)(data_int + 0x23) = 0xf0;\n    data_ptr[2] = 0;\n    *data_ptr = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001214",
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "calculate_ticks_08001214"
        },
        "FUN_08003fc4": {
            "renaming": {
                "FUN_08003fc4": "set_pwm_value_08003fc4",
                "pwm": "pwm_value",
                "PTR_htim4_08003fcc": "htim4_ptr",
                "*PTR_htim4_08003fcc": "*(int*)PTR_htim4_08003fcc",
                "*(int *)(*(int *)PTR_htim4_08003fcc + 0x40)": "*pwm_reg",
                "pwm_reg": "pwm_reg"
            },
            "code": "void set_pwm_value_08003fc4(int pwm_value)\n{\n    int* PTR_htim4_08003fcc = *PTR_htim4_08003fcc;\n    int* pwm_reg = PTR_htim4_08003fcc + 0x40;\n    *(int *)(*(int *)PTR_htim4_08003fcc + 0x40) = pwm_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fc4",
            "calling": [
                "Motor_SetSpeed",
                "Motor_StopAll"
            ],
            "imported": false,
            "current_name": "set_pwm_value_08003fc4"
        },
        "FUN_0800209c": {
            "renaming": {
                "FUN_0800209c": "configureClocks_0800209c",
                "RCC_ClkInitStruct": "clockInit",
                "FLatency": "latency",
                "cVar1": "char1",
                "cVar2": "char2",
                "puVar3": "ptr",
                "uVar4": "var4",
                "uVar5": "var5",
                "uVar6": "var6",
                "uVar7": "var7",
                "DAT_08002204": "dat08002204",
                "PTR_SystemCoreClock_08002210": "ptrSystemCoreClock",
                "PTR_AHBPrescTable_0800220c": "ahbPrescTable",
                "DAT_08002208": "dat08002208"
            },
            "code": "HAL_StatusTypeDef configureClocks_0800209c(RCC_ClkInitTypeDef *clockInit, uint32_t latency) {\n  uint32_t clockType = clockInit->ClockType;\n  uint32_t sysclkSource = clockInit->SYSCLKSource;\n  uint32_t ahbclkDivider = clockInit->AHBCLKDivider;\n  uint32_t apb1clkDivider = clockInit->APB1CLKDivider;\n  uint32_t apb2clkDivider = clockInit->APB2CLKDivider;\n  uint32_t sysClockFreq = 0;\n  uint32_t leadingZeroes = 0;\n  uint32_t tickStart = 0;\n  uint32_t tickCount = 0;\n  uint32_t* PTR_AHBPrescTable_0800220c = PTR_AHBPrescTable_0800220c;\n  uint32_t* DAT_08002204 = DAT_08002204;\n  uint32_t* DAT_08002208 = DAT_08002208;\n  uint32_t* PTR_SystemCoreClock_08002210 = (uint32_t *) PTR_SystemCoreClock_08002210;\n\n  if (latency <= (*DAT_08002204 & 7) || (*DAT_08002204 = *DAT_08002204 & 0xfffffff8 | latency, latency == (*DAT_08002204 & 7))) {\n    if ((int)(clockType << 0x1e) < 0) {\n      DAT_08002208[1] = DAT_08002208[1] & 0xffffff0f | ahbclkDivider;\n    }\n    if (-1 < (int)(clockType << 0x1f)) {\n      DAT_08002204 = DAT_08002208;\n      if ((latency < (*DAT_08002204 & 7)) && (*DAT_08002204 = *DAT_08002204 & 0xfffffff8 | latency, latency != (*DAT_08002204 & 7))) {\n        return HAL_ERROR;\n      }\n      if ((clockType & 4) != 0) {\n        DAT_08002208[1] = DAT_08002208[1] & 0xfffff8ff | apb1clkDivider;\n      }\n      if ((int)(clockType << 0x1c) < 0) {\n        DAT_08002208[1] = DAT_08002208[1] & 0xffffc7ff | apb2clkDivider << 3;\n      }\n      sysClockFreq = HAL_RCC_GetSysClockFreq();\n      leadingZeroes = count_leading_zeroes(0xf000000);\n      *PTR_SystemCoreClock_08002210 = sysClockFreq >> PTR_AHBPrescTable_0800220c[(DAT_08002208[1] & 0xf0) >> (leadingZeroes & 0xff)];\n      HAL_InitTick(0);\n      return HAL_OK;\n    }\n    if (sysclkSource == 1) {\n      tickStart = HAL_GetTick();\n      do {\n        if ((DAT_08002208[1] & 0xc) == 0) {\n          goto LAB_080020ba;\n        }\n        tickCount = HAL_GetTick();\n      } while (tickCount - tickStart < 0x1389);\n    }\n    else if (sysclkSource == 2) {\n      tickStart = HAL_GetTick();\n      do {\n        if ((DAT_08002208[1] & 0xc) == 8) {\n          goto LAB_080020ba;\n        }\n        tickCount = HAL_GetTick();\n      } while (tickCount - tickStart < 0x1389);\n    }\n    else {\n      tickStart = HAL_GetTick();\n      do {\n        if ((DAT_08002208[1] & 0xc) == 4) {\n          goto LAB_080020ba;\n        }\n        tickCount = HAL_GetTick();\n      } while (tickCount - tickStart < 0x1389);\n    }\n    return HAL_TIMEOUT;\n  }\n  return HAL_ERROR;\n}\n",
            "called": [
                "HAL_RCC_GetSysClockFreq",
                "HAL_InitTick",
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800209c",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configureClocks_0800209c"
        },
        "FUN_08003f0e": {
            "renaming": {
                "FUN_08003f0e": "update_last_value_08003f0e",
                "*var": "*filter",
                "current": "current_value",
                "fVar3": "beta",
                "extraout_s0": "updated_last"
            },
            "code": "float update_last_value_08003f0e(LPF *filter, float current_value) {\n  float beta = filter->beta;\n  float one_minus_beta = 1.0 - beta;\n  float beta_times_last = beta * filter->last;\n  float one_minus_beta_times_current = one_minus_beta * current_value;\n  float updated_last = beta_times_last + one_minus_beta_times_current;\n  filter->last = updated_last;\n  return updated_last;\n}",
            "called": [
                "__aeabi_fmul",
                "__addsf3",
                "__aeabi_fsub"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f0e",
            "calling": [
                "AHRS_GetPitch",
                "AHRS_GetRoll"
            ],
            "imported": false,
            "current_name": "update_last_value_08003f0e"
        },
        "FUN_0800403c": {
            "renaming": {
                "FUN_0800403c": "write_i2c_register_0800403c",
                "device_add": "device_address",
                "register_add": "register_address",
                "register_val": "register_value",
                "delay_mode": "delay_enabled",
                "HVar1": "status",
                "byte": "data"
            },
            "code": "void write_i2c_register_0800403c(uint16_t device_address, uint16_t register_address, uint8_t register_value, uint8_t delay_enabled) {\n    HAL_StatusTypeDef status;\n    uint8_t data[1];\n    data[0] = register_value;\n    status = HAL_I2C_Mem_Write((I2C_HandleTypeDef *)PTR_hi2c1_08004074, device_address, register_address, 1, data, 1, 200);\n    if (status != HAL_OK) {\n        _Error_Handler(PTR_s____Src_i2c_c_08004078, 0x1b);\n    }\n    if (delay_enabled) {\n        delay_ms(50);\n    }\n    return;\n}",
            "called": [
                "HAL_I2C_Mem_Write",
                "delay_ms",
                "_Error_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800403c",
            "calling": [
                "MPU9250_Init",
                "MS5611_Update",
                "MS5611_Init",
                "AK8963_Init"
            ],
            "imported": false,
            "current_name": "write_i2c_register_0800403c"
        },
        "FUN_08000cec": {
            "renaming": {
                "FUN_08000cec": "FUNC_08000cec"
            },
            "code": "\nuint FUNC_08000cec(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_08000e3c;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_08000e3c:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cec",
            "calling": [
                "AK8963_ReadData",
                "AHRS_ComputeAngles",
                "MadgwickQuaternionUpdate",
                "PID_Update",
                "MPU9250_ReadGyroData",
                "lowPassFilter",
                "AK8963_Init",
                "PID_Compute",
                "MPU9250_ReadAccelData",
                "PID_UpdateAltitude"
            ],
            "imported": false,
            "current_name": "FUNC_08000cec"
        },
        "FUN_0800277c": {
            "renaming": {
                "FUN_0800277c": "transmitData_0800277c",
                "huart": "uartHandle",
                "pData": "data",
                "Size": "size",
                "Timeout": "timeout",
                "uVar1": "startTime",
                "uVar2": "currentTime",
                "HVar3": "uartState",
                "pUVar4": "uartInstance"
            },
            "code": "HAL_StatusTypeDef transmitData_0800277c(UART_HandleTypeDef *uartHandle, uint8_t *data, uint16_t size, uint32_t timeout)\n{\n  uint32_t startTime;\n  uint32_t currentTime;\n  HAL_UART_StateTypeDef uartState;\n  USART_TypeDef *uartInstance;\n  \n  if ((uartHandle->State == HAL_UART_STATE_READY) || (uartHandle->State == HAL_UART_STATE_BUSY_RX)) {\n    if ((data == NULL) || (size == 0)) {\n      return HAL_ERROR;\n    }\n    if (uartHandle->Lock != HAL_LOCKED) {\n      uartHandle->Lock = HAL_LOCKED;\n      uartHandle->ErrorCode = 0;\n      uartHandle->TxXferSize = size;\n      if (uartHandle->State == HAL_UART_STATE_BUSY_RX) {\n        uartState = HAL_UART_STATE_BUSY_TX_RX;\n      }\n      else {\n        uartState = HAL_UART_STATE_BUSY_TX;\n      }\n      uartHandle->TxXferCount = size;\n      uartHandle->State = uartState;\nLAB_080027c4:\n      if (uartHandle->TxXferCount == 0) {\n        startTime = HAL_GetTick();\n        do {\n          do {\n            if ((int)(uartHandle->Instance->SR << 0x19) < 0) {\n              if (uartHandle->State == HAL_UART_STATE_BUSY_TX_RX) {\n                uartState = HAL_UART_STATE_BUSY_RX;\n              }\n              else {\n                uartState = HAL_UART_STATE_READY;\n              }\n              uartHandle->State = uartState;\n              uartHandle->Lock = HAL_UNLOCKED;\n              return HAL_OK;\n            }\n          } while (timeout == 0xffffffff);\n        } while ((timeout != 0) && (currentTime = HAL_GetTick(), currentTime - startTime <= timeout));\n      }\n      else {\n        uartHandle->TxXferCount = uartHandle->TxXferCount - 1;\n        if ((uartHandle->Init).WordLength == USART_WORDLENGTH_9B) {\n          startTime = HAL_GetTick();\n          do {\n            do {\n              if ((int)(uartHandle->Instance->SR << 0x18) < 0) {\n                uartHandle->Instance->DR = *(uint16_t *)data & 0x1ff;\n                if ((uartHandle->Init).Parity == USART_PARITY_NONE) {\n                  data = (uint8_t *)((int)data + 2);\n                }\n                else {\n                  data = (uint8_t *)((int)data + 1);\n                }\n                goto LAB_080027c4;\n              }\n            } while (timeout == 0xffffffff);\n          } while ((timeout != 0) && (currentTime = HAL_GetTick(), currentTime - startTime <= timeout));\n        }\n        else {\n          startTime = HAL_GetTick();\n          do {\n            do {\n              if ((int)(uartHandle->Instance->SR << 0x18) < 0) {\n                uartHandle->Instance->DR = (uint32_t)*data;\n                goto LAB_08002812;\n              }\n            } while (timeout == 0xffffffff);\n          } while ((timeout != 0) && (currentTime = HAL_GetTick(), currentTime - startTime <= timeout));\n        }\n      }\n      uartInstance = uartHandle->Instance;\n      uartInstance->CR1 = uartInstance->CR1 & 0xffffff7f;\n      uartInstance->CR1 = uartInstance->CR1 & 0xffffffdf;\n      uartInstance->CR1 = uartInstance->CR1 & 0xfffffeff;\n      uartInstance->CR3 = uartInstance->CR3 & 0xfffffffe;\n      uartHandle->State = HAL_UART_STATE_READY;\n      uartHandle->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  return HAL_BUSY;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800277c",
            "calling": [
                "serialWrite"
            ],
            "imported": false,
            "current_name": "transmitData_0800277c"
        },
        "FUN_0800483c": {
            "renaming": {
                "FUN_0800483c": "calculate_pid_output_0800483c",
                "*pid": "pid",
                "uVar1": "set_point_offset",
                "iVar2": "comparison_result",
                "uVar3": "derivative_term",
                "fVar4": "proportional_term",
                "fVar5": "con_KD",
                "fVar6": "con_KI",
                "is_error_positive": "is_error_positive",
                "is_error_below_threshold": "is_error_below_threshold",
                "is_error_above_threshold": "is_error_above_threshold",
                "is_integral_below_threshold": "is_integral_below_threshold",
                "is_integral_above_threshold": "is_integral_above_threshold",
                "is_output_below_threshold": "is_output_below_threshold",
                "is_output_above_threshold": "is_output_above_threshold"
            },
            "code": "void calculate_pid_output_0800483c(PID_TypeDef *pid)\n{\n  float input = pid->input;\n  float set_point_offset = pid->set_point + pid->offset;\n  float error = set_point_offset - input;\n  pid->error = error;\n  if (pid->instance == 3) {\n    int is_error_positive = (error > 0);\n    int is_error_below_threshold = (error < DAT_08004974);\n    int is_error_above_threshold = (error > DAT_08004964);\n    if ((is_error_positive && is_error_above_threshold) || (!is_error_positive && is_error_below_threshold)) {\n      float proportional_term = pid->con_KP * error;\n      float integral_term = pid->integral + error;\n      float is_integral_below_threshold = (integral_term < DAT_0800496c);\n      float is_integral_above_threshold = (integral_term > DAT_08004970);\n      if (is_integral_below_threshold) {\n        pid->integral = DAT_0800496c;\n      } else if (is_integral_above_threshold) {\n        pid->integral = DAT_08004970;\n      } else {\n        pid->integral = integral_term;\n      }\n      float derivative_term = input - pid->last_input;\n      float output = pid->con_KP * error + pid->con_KI * pid->integral + pid->con_KD * derivative_term;\n      int is_output_below_threshold = (output < DAT_0800496c);\n      int is_output_above_threshold = (output > DAT_08004970);\n      if (is_output_below_threshold) {\n        output = DAT_0800496c;\n      } else if (is_output_above_threshold) {\n        output = DAT_08004970;\n      }\n      pid->output = output * pid->direction;\n    }\n  }\n  pid->last_input = input;\n  pid->last_error = error;\n  pid->last_time = pid->time;\n}\n",
            "called": [
                "__aeabi_fmul",
                "__aeabi_fcmpgt",
                "__floatsisf",
                "__addsf3",
                "__aeabi_fsub",
                "__aeabi_fdiv",
                "__aeabi_fcmplt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800483c",
            "calling": [
                "PID_Update"
            ],
            "imported": false,
            "current_name": "calculate_pid_output_0800483c"
        },
        "FUN_08001064": {
            "renaming": {
                "FUN_08001064": "isEndOfString_08001064",
                "in_CY": "current_char"
            },
            "code": "bool isEndOfString_08001064(void)\n{\n  char current_char;\n  __aeabi_cfrcmple();\n  return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001064",
            "calling": [
                "PID_Update",
                "PID_Compute"
            ],
            "imported": false,
            "current_name": "isEndOfString_08001064"
        },
        "FUN_08000892": {
            "renaming": {
                "FUN_08000892": "calculateResult_08000892",
                "param_1": "firstParam",
                "param_2": "secondParam",
                "param_3": "thirdParam",
                "param_4": "fourthParam",
                "uVar1": "tempVar1",
                "unaff_r4": "tempVar4",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "in_r12": "tempVar5",
                "bVar4": "boolVar1"
            },
            "code": "ulonglong calculateResult_08000892(uint firstParam, uint secondParam, uint thirdParam, uint fourthParam) {\n  uint tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  bool boolVar1;\n  \n  tempVar2 = fourthParam >> 0x14;\n  tempVar3 = secondParam;\n  if (thirdParam != tempVar4 || tempVar2 != tempVar4) {\n    if (thirdParam == tempVar4) {\n      if (((firstParam | secondParam << 0xc) == 0) && (firstParam = fourthParam, tempVar3 = fourthParam, tempVar2 != tempVar4)) {\n        return (ulonglong)((secondParam ^ fourthParam) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (tempVar2 == tempVar4) {\n      firstParam = fourthParam;\n      tempVar3 = fourthParam;\n      if ((thirdParam | fourthParam << 0xc) == 0) {\n        return (ulonglong)((secondParam ^ fourthParam) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      boolVar1 = (firstParam | secondParam << 1) == 0;\n      if (!boolVar1) {\n        boolVar1 = (thirdParam | fourthParam << 1) == 0;\n      }\n      if (!boolVar1) {\n        if (tempVar4 == 0) {\n          tempVar3 = secondParam & 0x80000000;\n          do {\n            tempVar1 = firstParam & 0x80000000;\n            firstParam = firstParam << 1;\n            secondParam = secondParam * 2 + (uint)(tempVar1 != 0);\n          } while ((secondParam & 0x100000) == 0);\n          secondParam = secondParam | tempVar3;\n          if (tempVar2 != 0) {\n            return CONCAT44(secondParam,firstParam);\n          }\n        }\n        do {\n          tempVar3 = thirdParam & 0x80000000;\n          thirdParam = thirdParam << 1;\n          fourthParam = fourthParam * 2 + (uint)(tempVar3 != 0);\n        } while ((fourthParam & 0x100000) == 0);\n        return CONCAT44(secondParam,firstParam);\n      }\n      if ((firstParam | secondParam << 1) != 0) {\n        return (ulonglong)((secondParam ^ fourthParam) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n      if ((thirdParam | fourthParam << 1) != 0) {\n        return (ulonglong)((secondParam ^ fourthParam) & 0x80000000) << 0x20;\n      }\n    }\n  }\n  return CONCAT44(tempVar3,firstParam) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000892",
            "calling": [
                "__divdf3"
            ],
            "imported": false,
            "current_name": "calculateResult_08000892"
        },
        "FUN_08004458": {
            "renaming": {
                "FUN_08004458": "copy_and_send_data_08004458",
                "puVar1": "source_ptr",
                "puVar2": "temp_val1",
                "puVar3": "dest_ptr",
                "puVar4": "temp_val2",
                "puVar5": "temp_ptr",
                "local_30": "data_array",
                "local_24": "data_array2"
            },
            "code": "void copy_and_send_data_08004458(void)\n{\n  uint32_t *source_ptr;\n  uint32_t *dest_ptr;\n  uint32_t temp_val1;\n  uint32_t temp_val2;\n  uint32_t temp_val3;\n  uint32_t data_array[3];\n  uint16_t data_array2[10];\n  \n  source_ptr = data_array;\n  dest_ptr = (uint32_t *)PTR_msp_txf_pid_0800448c;\n  do {\n    temp_val1 = *dest_ptr;\n    temp_val2 = *(dest_ptr + 1);\n    dest_ptr += 2;\n    *source_ptr = temp_val1;\n    *(source_ptr + 1) = temp_val2;\n    source_ptr += 2;\n  } while (dest_ptr != (uint32_t *)(PTR_msp_txf_pid_0800448c + 0x18));\n  temp_val3 = *dest_ptr;\n  data_array[2] = temp_val3;\n  data_array2[0] = *(uint16_t *)(dest_ptr + 1);\n  MSP_SendFrame('p',(uint8_t *)data_array,0x1e);\n  return;\n}",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004458",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "copy_and_send_data_08004458"
        },
        "FUN_08004d48": {
            "renaming": {
                "FUN_08004d48": "initialize_I2C_GPIO_08004d48",
                "hi2c": "i2c_handle",
                "GPIO_InitStruct": "gpio_init_struct",
                "Instance": "I2C1",
                "Pin": "GPIO_PIN_6 | GPIO_PIN_7",
                "Mode": "GPIO_MODE_AF_OD",
                "Speed": "GPIO_SPEED_FREQ_HIGH",
                "HAL_GPIO_Init": "HAL_GPIO_Init",
                "*(uint *)(DAT_08004d88 + 0x1c)": "*(uint *)(0x40022000 + 0x1c)"
            },
            "code": "void initialize_I2C_GPIO_08004d48(I2C_HandleTypeDef *i2c_handle)\n{\n  uint32_t tmp_reg;\n  GPIO_InitTypeDef gpio_init_struct;\n  if (i2c_handle->Instance == I2C1)\n  {\n    gpio_init_struct.Pin = GPIO_PIN_6 | GPIO_PIN_7;\n    gpio_init_struct.Mode = GPIO_MODE_AF_OD;\n    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;\n    HAL_GPIO_Init(GPIOB, &gpio_init_struct);\n    *(uint *)(DAT_08004d88 + 0x1c) = *(uint *)(DAT_08004d88 + 0x1c) | 0x200000;\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d48",
            "calling": [
                "HAL_I2C_Init"
            ],
            "imported": false,
            "current_name": "initialize_I2C_GPIO_08004d48"
        },
        "FUN_08002280": {
            "renaming": {
                "FUN_08002280": "configure_timer_08002280",
                "TIMx": "timer",
                "OC_Config": "output_compare_config",
                "uVar1": "timer_ccer",
                "uVar2": "timer_cr2",
                "uVar3": "output_compare_mode"
            },
            "code": "void configure_timer_08002280(TIM_TypeDef *timer,TIM_OC_InitTypeDef *output_compare_config)\n{\n  uint32_t timer_ccer;\n  uint32_t timer_cr2;\n  uint8_t output_compare_mode;\n  \n  timer_ccer = timer->CCER & 0xfffffffe;\n  timer_cr2 = timer->CR2;\n  output_compare_mode = output_compare_config->OCMode;\n  timer_ccer = timer_ccer & 0xfffffffd | output_compare_config->OCPolarity;\n  if (timer == PTR_080022cc) {\n    timer_ccer = (timer_ccer & 0xfffffff7 | output_compare_config->OCNPolarity) & 0xfffffffb;\n    timer_cr2 = timer_cr2 & 0xfffffcff | output_compare_config->OCIdleState | output_compare_config->OCNIdleState;\n  }\n  timer->CR2 = timer_cr2;\n  timer->CCMR1 = timer->CCMR1 & 0xffffff8c | output_compare_mode;\n  timer->CCR1 = output_compare_config->Pulse;\n  timer->CCER = timer_ccer;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002280",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_08002280"
        },
        "FUN_08001194": {
            "renaming": {
                "FUN_08001194": "set_interrupt_priority_08001194",
                "IRQn": "interrupt",
                "PreemptPriority": "preempt_priority",
                "SubPriority": "sub_priority",
                "uVar1": "interrupt_number",
                "uVar2": "priority_mask",
                "uVar3": "priority_bits",
                "uVar4": "priority_group",
                "uVar5": "priority_offset"
            },
            "code": "void set_interrupt_priority_08001194(IRQn_Type interrupt, uint32_t preempt_priority, uint32_t sub_priority)\n{\n    uint32_t priority_mask;\n    uint32_t priority_shift;\n    uint32_t priority_group;\n    uint32_t priority_offset;\n    uint8_t priority_bits;\n\n    priority_group = (*(int *)(DAT_080011f4 + 0xc) << 0x15) >> 0x1d;\n    priority_offset = (7 - priority_group) + 4;\n    if (priority_offset > 7) {\n        priority_offset = 0;\n    }\n    priority_bits = (1 << (priority_offset & 0xff)) - 1;\n    if (priority_group > 6) {\n        priority_offset -= 3;\n    }\n    priority_shift = priority_offset & 0xff;\n    priority_mask = (sub_priority & priority_bits) | ((preempt_priority & ((1 << priority_shift) - 1)) << priority_shift);\n    if (interrupt >= 0) {\n        *(undefined *)(interrupt + 0xe000e100 + 0x300) = (undefined)priority_mask << 4;\n    }\n    else {\n        *(undefined *)(DAT_080011f8 + (interrupt & 0xf)) = (undefined)priority_mask << 4;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001194",
            "calling": [
                "HAL_InitTick",
                "HAL_UART_MspInit",
                "HAL_MspInit",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "set_interrupt_priority_08001194"
        },
        "FUN_08004348": {
            "renaming": {
                "FUN_08004348": "send_msp_txf_identification_08004348",
                "puVar1": "msp_txf_identification_ptr",
                "local_10": "msp_txf_identification",
                "local_c": "msp_txf_identification_with_mask",
                "in_r1": "in_r1"
            },
            "code": "void send_msp_txf_identification_08004348(void)\n{\n  uint32_t msp_txf_identification;\n  uint8_t* msp_txf_identification_ptr = PTR_msp_txf_ident_08004380;\n  *msp_txf_identification_ptr = 0xe9;\n  msp_txf_identification_ptr[1] = 3;\n  msp_txf_identification_ptr[3] = 4;\n  msp_txf_identification_ptr[2] = 0;\n  msp_txf_identification = *(uint32_t*)msp_txf_identification_ptr;\n  msp_txf_identification_ptr[4] = 0;\n  msp_txf_identification_ptr[5] = 0;\n  msp_txf_identification_ptr[6] = 0;\n  uint32_t msp_txf_identification_with_mask = (in_r1 & 0xff000000) | (uint32_t)*(uint16_t *)(msp_txf_identification_ptr + 4);\n  MSP_SendFrame('d', (uint8_t*)&msp_txf_identification, 7);\n}",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004348",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "send_msp_txf_identification_08004348"
        },
        "FUN_08001078": {
            "renaming": {
                "FUN_08001078": "extract_mantissa_08001078",
                "param_1": "value",
                "uVar1": "shift_amount",
                "uVar2": "shift_result",
                "uVar3": "sign_bit",
                "uVar4": "result"
            },
            "code": "uint32_t extract_mantissa_08001078(uint32_t value)\n{\n  uint32_t shift_amount;\n  uint32_t shift_result;\n  uint32_t sign_bit;\n  uint32_t result;\n  \n  if ((value << 1) < 0x7f000000) {\n    return 0;\n  }\n  shift_amount = (value << 1) >> 0x18;\n  shift_result = 0x9e - shift_amount;\n  if ((shift_amount < 0x9f) && (shift_result != 0)) {\n    result = (value << 8) | 0x80000000;\n    result = result >> (shift_result & 0xff);\n    sign_bit = value & 0x80000000;\n    if (sign_bit != 0) {\n      result = -result;\n    }\n    return result;\n  }\n  if ((shift_result == 0xffffff9f) && ((value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  sign_bit = value & 0x80000000;\n  if (sign_bit == 0) {\n    result = 0x7fffffff;\n  } else {\n    result = value & 0x7fffffff;\n    result = -result;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001078",
            "calling": [
                "MS5611_Update",
                "AHRS_ComputeAngles",
                "Motor_DistributeSpeed"
            ],
            "imported": false,
            "current_name": "extract_mantissa_08001078"
        },
        "FUN_08001754": {
            "renaming": {
                "FUN_08001754": "configureI2C_08001754",
                "hi2c": "i2cHandle",
                "uVar1": "pclk1Freq",
                "extraout_r1": "riseTime",
                "uVar2": "ccrValue",
                "pIVar3": "i2cInstance",
                "uVar4": "clockSpeed",
                "uVar5": "DAT_08001820",
                "uVar6": "uVar6",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_I2C_STATE_RESET": "HAL_I2C_STATE_RESET",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_I2C_MspInit": "HAL_I2C_MspInit",
                "HAL_I2C_STATE_BUSY": "HAL_I2C_STATE_BUSY",
                "HAL_OK": "HAL_OK",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "HAL_I2C_MODE_NONE": "HAL_I2C_MODE_NONE",
                "DAT_08001824": "DAT_08001824",
                "HAL_I2C_ERROR_NONE": "HAL_I2C_ERROR_NONE",
                "I2C_DUTYCYCLE_2": "I2C_DUTYCYCLE_2",
                "I2C_CCR_FS": "I2C_CCR_FS",
                "I2C_CR1_PE": "I2C_CR1_PE"
            },
            "code": "HAL_StatusTypeDef configureI2C_08001754(I2C_HandleTypeDef *hi2c) {\n  uint32_t pclk1Freq, clockSpeed, riseTime, ccrValue;\n  I2C_TypeDef *i2cInstance;\n  uint8_t noStretchMode, generalCallMode;\n  if (hi2c == NULL) {\n    return HAL_ERROR;\n  }\n  if (hi2c->State == HAL_I2C_STATE_RESET) {\n    hi2c->Lock = HAL_UNLOCKED;\n    HAL_I2C_MspInit(hi2c);\n  }\n  hi2c->State = HAL_I2C_STATE_BUSY;\n  pclk1Freq = HAL_RCC_GetPCLK1Freq();\n  clockSpeed = hi2c->Init.ClockSpeed;\n  riseTime = (pclk1Freq / 1000000) * 300;\n  if (riseTime < 1) {\n    riseTime = 1;\n  }\n  i2cInstance = hi2c->Instance;\n  ccrValue = pclk1Freq / (clockSpeed << 1);\n  if (ccrValue < 4) {\n    ccrValue = 4;\n  }\n  noStretchMode = hi2c->Init.NoStretchMode;\n  generalCallMode = hi2c->Init.GeneralCallMode;\n  i2cInstance->CR2 = (pclk1Freq / 1000000) * riseTime;\n  i2cInstance->TRISE = riseTime + 1;\n  if (hi2c->Init.DutyCycle == I2C_DUTYCYCLE_2) {\n    ccrValue |= I2C_CCR_FS;\n    ccrValue |= (pclk1Freq / (clockSpeed * 3)) << 16;\n  } else {\n    ccrValue |= (pclk1Freq / (clockSpeed * 25)) << 16;\n  }\n  i2cInstance->CCR = ccrValue;\n  i2cInstance->OAR1 = hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1;\n  i2cInstance->OAR2 = hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2;\n  i2cInstance->CR1 = noStretchMode | generalCallMode | I2C_CR1_PE;\n  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;\n  hi2c->State = HAL_I2C_STATE_READY;\n  hi2c->Mode = HAL_I2C_MODE_NONE;\n  return HAL_OK;\n}",
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_I2C_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001754",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "configureI2C_08001754"
        },
        "FUN_08002724": {
            "renaming": {
                "FUN_08002724": "initialize_uart_08002724",
                "*huart": "*uart_handle",
                "huart": "uart_handle",
                "USART_TypeDef *pUVar1": "USART_TypeDef *uart_instance",
                "pUVar1": "uart_instance",
                "HAL_UART_StateTypeDef": "HAL_StatusTypeDef",
                "HAL_UART_STATE_RESET": "HAL_UART_STATE_RESET",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_UART_MspInit": "HAL_UART_MspInit",
                "HAL_UART_STATE_BUSY": "HAL_UART_STATE_BUSY",
                "HAL_UART_STATE_READY": "HAL_UART_STATE_READY",
                "UART_SetConfig": "UART_SetConfig",
                "Instance": "uart_instance",
                "CR1": "CR1",
                "CR2": "CR2",
                "CR3": "CR3",
                "ErrorCode": "ErrorCode"
            },
            "code": "HAL_StatusTypeDef initialize_uart_08002724(UART_HandleTypeDef *uart_handle)\n{\n  USART_TypeDef *uart_instance;\n  \n  if (uart_handle != NULL) {\n    if (uart_handle->State == HAL_UART_STATE_RESET) {\n      uart_handle->Lock = HAL_UNLOCKED;\n      HAL_UART_MspInit(uart_handle);\n    }\n    uart_handle->State = HAL_UART_STATE_BUSY;\n    uart_handle->Instance->CR1 &= ~(1 << 13);\n    UART_SetConfig(uart_handle);\n    uart_instance = uart_handle->Instance;\n    uart_instance->CR2 &= ~(1 << 11);\n    uart_instance->CR3 &= ~(1 << 2);\n    uart_instance->CR1 |= (1 << 13);\n    uart_handle->ErrorCode = 0;\n    uart_handle->State = HAL_UART_STATE_READY;\n    return HAL_OK;\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "UART_SetConfig",
                "HAL_UART_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002724",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "initialize_uart_08002724"
        },
        "FUN_080043f0": {
            "renaming": {
                "FUN_080043f0": "send_motor_data_080043f0",
                "local_10": "motor_data_1",
                "uStack_c": "motor_data_2"
            },
            "code": "void send_motor_data_080043f0(void)\n{\n  uint32_t motor_data_1;\n  uint32_t motor_data_2;\n\n  motor_data_1 = *(uint32_t *)PTR_msp_txf_motor_0800440c;\n  motor_data_2 = *(uint32_t *)(PTR_msp_txf_motor_0800440c + 4);\n  MSP_SendFrame('h', (uint8_t *)&motor_data_1, 8);\n  return;\n}\n",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043f0",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "send_motor_data_080043f0"
        },
        "FUN_08000428": {
            "renaming": {
                "FUN_08000428": "calculate_hash_08000428",
                "param_1": "input",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "msb_set",
                "uVar2": "temp_input",
                "uVar3": "result",
                "uVar4": "shifted_input",
                "uVar5": "left_shifted_input",
                "uVar7": "shift_amount",
                "iVar6": "leading_zeroes",
                "bVar8": "is_mask_shift_amount_zero",
                "bVar9": "is_mask_shift_amount_negative",
                "bVar10": "is_shift_amount_negative",
                "input_masked": "input_masked",
                "temp_shifted_input": "temp_shifted_input",
                "mask_shift_amount": "mask_shift_amount",
                "mask_shift_amount_complement": "mask_shift_amount_complement"
            },
            "code": "ulonglong calculate_hash_08000428(uint input, undefined4 param_2, undefined4 param_3, uint param_4)\n{\n  uint left_shifted_input = input << 1;\n  bool is_input_zero = left_shifted_input == 0;\n  uint msb_set = (uint)((input & 0x80000000) != 0) << 0x1f;\n  uint shifted_input = (uint)((int)left_shifted_input >> 3) >> 1;\n  uint result = msb_set | shifted_input;\n  input = input << 0x1d;\n  if (!is_input_zero)\n  {\n    uint input_masked = left_shifted_input & 0xff000000;\n    is_input_zero = input_masked == 0;\n  }\n  if (!is_input_zero)\n  {\n    is_input_zero = input_masked == 0xff000000;\n  }\n  if (!is_input_zero)\n  {\n    return CONCAT44(result, input) ^ 0x3800000000000000;\n  }\n  if (left_shifted_input == 0 || input_masked == 0xff000000)\n  {\n    return CONCAT44(result, input);\n  }\n  uint temp_input = input;\n  uint temp_shifted_input = shifted_input;\n  if (shifted_input == 0)\n  {\n    temp_input = 0;\n    temp_shifted_input = input;\n  }\n  int leading_zeroes = count_leading_zeroes(temp_shifted_input);\n  if (shifted_input == 0)\n  {\n    leading_zeroes = leading_zeroes + 0x20;\n  }\n  uint shift_amount = leading_zeroes - 0xb;\n  bool is_shift_amount_negative = SBORROW4(shift_amount, 0x20);\n  uint mask_shift_amount = leading_zeroes - 0x2b;\n  bool is_mask_shift_amount_negative = (int)mask_shift_amount < 0;\n  bool is_mask_shift_amount_zero = mask_shift_amount == 0;\n  if ((int)shift_amount < 0x20)\n  {\n    is_shift_amount_negative = SCARRY4(mask_shift_amount, 0xc);\n    leading_zeroes = leading_zeroes + -0x1f;\n    is_mask_shift_amount_negative = leading_zeroes < 0;\n    is_mask_shift_amount_zero = leading_zeroes == 0;\n    mask_shift_amount = shift_amount;\n    if (!is_mask_shift_amount_zero && is_mask_shift_amount_negative == is_shift_amount_negative)\n    {\n      temp_input = temp_shifted_input << (shift_amount & 0xff);\n      temp_shifted_input = temp_shifted_input >> (0xcU - leading_zeroes & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_mask_shift_amount_zero || is_mask_shift_amount_negative != is_shift_amount_negative)\n  {\n    uint remaining_shift_amount = 0x20 - shift_amount;\n    temp_shifted_input = temp_shifted_input << (shift_amount & 0xff);\n    if (is_mask_shift_amount_zero || is_mask_shift_amount_negative != is_shift_amount_negative)\n    {\n      temp_shifted_input = temp_shifted_input | temp_input >> (remaining_shift_amount & 0xff);\n    }\n    if (is_mask_shift_amount_zero || is_mask_shift_amount_negative != is_shift_amount_negative)\n    {\n      temp_input = temp_input << (shift_amount & 0xff);\n    }\n  }\nLAB_080002f0:\n  if ((int)shift_amount < 0x381)\n  {\n    return CONCAT44(temp_shifted_input + (0x380 - shift_amount) * 0x100000 | msb_set, temp_input);\n  }\n  uint mask_shift_amount_complement = ~(0x380 - shift_amount);\n  if ((int)mask_shift_amount_complement < 0x1f)\n  {\n    int mask_shift_amount_complement_shifted = mask_shift_amount_complement - 0x13;\n    if (mask_shift_amount_complement_shifted != 0 && mask_shift_amount_complement_shifted < 0 == SCARRY4(mask_shift_amount_complement - 0x1f, 0xc))\n    {\n      return CONCAT44(msb_set, temp_input >> (0x20 - (0xcU - mask_shift_amount_complement_shifted) & 0xff) | temp_shifted_input << (0xcU - mask_shift_amount_complement_shifted & 0xff)) & 0x80000000ffffffff;\n    }\n    mask_shift_amount_complement = mask_shift_amount_complement + 1;\n    return CONCAT44(msb_set | temp_shifted_input >> (mask_shift_amount_complement & 0xff), temp_input >> (mask_shift_amount_complement & 0xff) | temp_shifted_input << (0x20 - mask_shift_amount_complement & 0xff));\n  }\n  return CONCAT44(result, temp_shifted_input >> (mask_shift_amount_complement - 0x1f & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000428",
            "calling": [
                "MS5611_Update",
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000428"
        },
        "FUN_08004ccc": {
            "renaming": {
                "FUN_08004ccc": "enable_interrupts_08004ccc",
                "DAT_08004d44": "data_address",
                "tmpreg": "interrupt_mask"
            },
            "code": "void enable_interrupts_08004ccc(void)\n{\n  uint32_t interrupt_mask = 1;\n  *(uint *)(DAT_08004d44 + 0x18) |= interrupt_mask;\n  HAL_NVIC_SetPriorityGrouping(3);\n  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);\n  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);\n  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);\n  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);\n  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);\n  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);\n  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);\n}\n",
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ccc",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "enable_interrupts_08004ccc"
        },
        "FUN_08004c30": {
            "renaming": {
                "FUN_08004c30": "receive_uart_data_08004c30",
                "huart": "uart_handler",
                "pData": "rx_buffer_ptr",
                "PTR_rx_buffer_08004c58": "rx_buffer_start_ptr",
                "DAT_08004c54": "uart_instance_ptr",
                "PTR_rxc_08004c5c": "rxc_buffer_ptr",
                "HAL_UART_Receive_IT": "HAL_UART_Receive_IT",
                "PTR_huart1_08004c60": "uart_handler_1_ptr"
            },
            "code": "void receive_uart_data_08004c30(UART_HandleTypeDef *uart_handler)\n{\n  uint8_t *rx_buffer_ptr;\n  rx_buffer_ptr = PTR_rx_buffer_08004c58;\n  if (uart_handler->Instance == DAT_08004c54) {\n    circular_buffer_write((CircularBuffer *)PTR_rxc_08004c5c,*PTR_rx_buffer_08004c58);\n    HAL_UART_Receive_IT((UART_HandleTypeDef *)PTR_huart1_08004c60,rx_buffer_ptr,1);\n    return;\n  }\n  return;\n}",
            "called": [
                "CB_Write",
                "HAL_UART_Receive_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c30",
            "calling": [
                "UART_Receive_IT"
            ],
            "imported": false,
            "current_name": "receive_uart_data_08004c30"
        },
        "FUN_080004d0": {
            "renaming": {
                "FUN_080004d0": "FUNC_080004d0"
            },
            "code": "\nulonglong FUNC_080004d0(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = calculate_080006ac();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006ac"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004d0",
            "calling": [
                "MS5611_Update",
                "scalbn",
                "MadgwickQuaternionUpdate",
                "__ieee754_sqrt",
                "atan",
                "pow",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "FUNC_080004d0"
        },
        "FUN_0800729c": {
            "renaming": {
                "FUN_0800729c": "calculate_distance_0800729c",
                "__x": "x1",
                "__y": "y1",
                "in_d0": "distance"
            },
            "code": "double calculate_distance_0800729c(double x1, double y1) {\n  double distance;\n  distance = sqrt(pow(x1, 2) + pow(y1, 2));\n  return distance;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800729c",
            "calling": [
                "scalbn"
            ],
            "imported": false,
            "current_name": "calculate_distance_0800729c"
        },
        "FUN_080041ae": {
            "renaming": {
                "FUN_080041ae": "runForkserverAndTaskScheduler_080041ae"
            },
            "code": "int runForkserverAndTaskScheduler_080041ae(void)\n{\n  startForkserver(0);\n  setup();\n  do {\n    HAL_IncTick();\n    taskScheduler();\n  } while( true );\n}",
            "called": [
                "HAL_IncTick",
                "setup",
                "taskScheduler",
                "startForkserver"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041ae",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "runForkserverAndTaskScheduler_080041ae"
        },
        "FUN_080053d4": {
            "renaming": {
                "FUN_080053d4": "FUNC_080053d4"
            },
            "code": "\nuint FUNC_080053d4(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  void *pvVar4;\n  int iVar5;\n  undefined *puVar6;\n  uint uVar7;\n  uint **ppuVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined *puVar11;\n  undefined *__s;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  __s = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_0800558e;\n          if (bVar1 != 0x58) goto LAB_08005404;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar6 = PTR_s_0123456789ABCDEF_08005610;\nLAB_0800551e:\n          uVar7 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar7 & 0x80) == 0) && ((int)(uVar7 << 0x19) < 0)) {\n            uVar9 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar9 = *puVar3;\n          }\n          if ((int)(uVar7 << 0x1f) < 0) {\n            *param_2 = uVar7 | 0x20;\n          }\n          if (uVar9 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar7 = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_08005404;\n          uVar9 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar9 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar9 & 0x40) == 0) goto LAB_08005424;\n            uVar9 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08005424:\n            uVar9 = *puVar3;\n          }\n          if ((int)uVar9 < 0) {\n            uVar9 = -uVar9;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar7 = 10;\n          puVar6 = PTR_s_0123456789ABCDEF_08005610;\n        }\n        uVar10 = param_2[1];\n        param_2[2] = uVar10;\n        puVar11 = __s;\n        if ((int)uVar10 < 0) {\n          if (uVar9 != 0) goto LAB_08005552;\nLAB_08005600:\n          *(undefined *)((int)param_2 + 0x42) = *puVar6;\n          puVar11 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar9 == 0) {\n            if (uVar10 != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              uVar10 = uVar9 / uVar7;\n              puVar11 = puVar11 + -1;\n              *puVar11 = puVar6[uVar9 - uVar7 * uVar10];\n              uVar9 = uVar10;\n            } while (uVar10 != 0);\n          }\n        }\n        if (((uVar7 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar11[-1] = 0x30;\n          puVar11 = puVar11 + -1;\n        }\n        param_2[4] = (int)__s - (int)puVar11;\n        __s = puVar11;\n        goto LAB_080054fa;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08005464:\n      __s = (undefined *)((int)param_2 + 0x42);\n      uVar9 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_0800548a:\n            uVar9 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar9 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar9 & 0x40) == 0) goto LAB_08005498;\n              uVar9 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08005498:\n              uVar9 = *puVar3;\n            }\n            puVar6 = PTR_s_0123456789ABCDEF_08005610;\n            if (bVar1 == 0x6f) {\n              uVar7 = 8;\n            }\n            else {\n              uVar7 = 10;\n            }\n            goto LAB_080054b4;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_0800544a:\n            puVar6 = PTR_s_0123456789abcdef_0800560c;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_0800548a;\n          if (bVar1 == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08005464;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      __s = (undefined *)*puVar3;\n      pvVar4 = memchr(__s,0,param_2[1]);\n      if (pvVar4 != (void *)0x0) {\n        param_2[1] = (int)pvVar4 - (int)__s;\n      }\n      uVar9 = param_2[1];\n    }\n    param_2[4] = uVar9;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  uVar9 = *param_2;\n  ppuVar8 = (uint **)*param_5;\n  uVar7 = param_2[5];\n  if ((uVar9 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\n    if ((uVar9 & 0x40) == 0) goto LAB_0800557a;\n    *(short *)puVar3 = (short)uVar7;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\nLAB_0800557a:\n    *puVar3 = uVar7;\n  }\nLAB_0800558e:\n  param_2[4] = 0;\nLAB_080054fa:\n  iVar2 = _printf_common(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,__s,param_2[4]), iVar2 == -1)) {\nLAB_0800550e:\n    uVar9 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar5 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar5 == -1) goto LAB_0800550e;\n      }\n    }\n    uVar9 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar9 = local_24[0];\n    }\n  }\n  return uVar9;\n}\n\n",
            "called": [
                "_printf_common",
                "memchr"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080053d4",
            "calling": [
                "_svfiprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_080053d4"
        },
        "FUN_080041c4": {
            "renaming": {
                "FUN_080041c4": "stop_all_motors_080041c4",
                "Motor1_SetPWM": "set_motor_1_pwm",
                "Motor2_SetPWM": "set_motor_2_pwm",
                "Motor3_SetPWM": "set_motor_3_pwm",
                "Motor4_SetPWM": "set_motor_4_pwm"
            },
            "code": "void stop_all_motors_080041c4(void)\n{\n    Motor1_SetPWM(0);\n    Motor2_SetPWM(0);\n    Motor3_SetPWM(0);\n    Motor4_SetPWM(0);\n    return;\n}",
            "called": [
                "Motor2_SetPWM",
                "Motor1_SetPWM",
                "Motor4_SetPWM",
                "Motor3_SetPWM"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041c4",
            "calling": [
                "PID_Update"
            ],
            "imported": false,
            "current_name": "stop_all_motors_080041c4"
        },
        "FUN_0800567c": {
            "renaming": {
                "FUN_0800567c": "allocate_memory_0800567c",
                "param_1": "error_code",
                "param_2": "size",
                "param_3": "filler",
                "param_4": "filler2",
                "puVar1": "free_list",
                "extraout_r1": "extraout_r1",
                "ppiVar2": "current_ptr",
                "ppiVar3": "next_ptr",
                "piVar4": "first_block",
                "ppiVar5": "free_list_ptr",
                "ppiVar6": "current_ptr",
                "ppiVar7": "last_ptr"
            },
            "code": "void allocate_memory_0800567c(int* error_code, int size, int filler, int filler2)\n{\n    int** last_ptr = (int**)(size - 4);\n    if (*last_ptr < 0) {\n        last_ptr = (int**)((int)last_ptr + **last_ptr);\n    }\n    __malloc_lock();\n    void* free_list = PTR___malloc_free_list_08005710;\n    int** free_list_ptr = *(int***)(PTR___malloc_free_list_08005710);\n    if (free_list_ptr == NULL) {\n        last_ptr[1] = NULL;\n        *(int***)(free_list) = last_ptr;\n        int** extraout_r1 = NULL;\n        int** new_ptr = (int**)free_list;\n    }\n    else if (last_ptr < free_list_ptr) {\n        int** current_ptr = (int**)*last_ptr;\n        int** next_ptr = (int**)((int)last_ptr + (int)current_ptr);\n        if (free_list_ptr == next_ptr) {\n            int* first_block = *free_list_ptr;\n            free_list_ptr = (int**)free_list_ptr[1];\n            next_ptr = (int**)((int)first_block + (int)current_ptr);\n            *last_ptr = (int*)next_ptr;\n        }\n        last_ptr[1] = (int*)free_list_ptr;\n        *(int***)(free_list) = last_ptr;\n    }\n    else {\n        while (free_list_ptr != NULL) {\n            int** current_ptr = free_list_ptr;\n            int** next_ptr = (int**)current_ptr[1];\n            if (next_ptr == NULL) break;\n            free_list_ptr = next_ptr;\n        }\n        int** current_ptr = (int**)*free_list_ptr;\n        if ((int**)((int)free_list_ptr + (int)current_ptr) == last_ptr) {\n            current_ptr = (int**)((int)current_ptr + (int)*last_ptr);\n            *free_list_ptr = (int*)current_ptr;\n            if (next_ptr == (int**)((int)free_list_ptr + (int)current_ptr)) {\n                int* first_block = *next_ptr;\n                next_ptr = (int**)next_ptr[1];\n                current_ptr = (int**)((int)current_ptr + (int)first_block);\n                *free_list_ptr = (int*)current_ptr;\n                free_list_ptr[1] = (int*)next_ptr;\n            }\n        }\n        else if (last_ptr < (int**)((int)free_list_ptr + (int)current_ptr)) {\n            *error_code = 0xc;\n        }\n        else {\n            current_ptr = (int**)((int)last_ptr + (int)*last_ptr);\n            if (next_ptr == current_ptr) {\n                int* first_block = *next_ptr;\n                next_ptr = (int**)next_ptr[1];\n                current_ptr = (int**)((int)first_block + (int)*last_ptr);\n                *last_ptr = (int*)current_ptr;\n            }\n            last_ptr[1] = (int*)next_ptr;\n            free_list_ptr[1] = (int*)last_ptr;\n        }\n    }\n    __malloc_unlock(error_code, extraout_r1, new_ptr, filler2);\n}",
            "called": [
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800567c",
            "calling": [
                "__ssputs_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_0800567c"
        },
        "FUN_0800458c": {
            "renaming": {
                "FUN_0800458c": "FUNC_0800458c"
            },
            "code": "\nvoid FUNC_0800458c(void)\n\n{\n  GPIO_TypeDef *GPIOx;\n  undefined4 uVar1;\n  undefined *huart;\n  HAL_StatusTypeDef HVar2;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_2;\n  TIM_MasterConfigTypeDef sMasterConfig;\n  TIM_OC_InitTypeDef sConfigOC;\n  GPIO_InitTypeDef GPIO_InitStruct;\n  undefined *puVar3;\n  \n  HAL_Init();\n  SystemClock_Config();\n  GPIOx = DAT_08004800;\n  iVar5 = DAT_080047fc;\n  *(uint *)(DAT_080047fc + 0x18) = *(uint *)(DAT_080047fc + 0x18) | 0x10;\n  uVar6 = 2;\n  *(uint *)(iVar5 + 0x18) = *(uint *)(iVar5 + 0x18) | 4;\n  uVar1 = DAT_08004804;\n  *(uint *)(iVar5 + 0x18) = *(uint *)(iVar5 + 0x18) | 8;\n  HAL_GPIO_WritePin(GPIOx,0xe000,GPIO_PIN_RESET);\n  HAL_GPIO_WritePin(DAT_08004808,0x20,GPIO_PIN_RESET);\n  GPIO_InitStruct.Pin = 0xe000;\n  GPIO_InitStruct.Mode = 1;\n  GPIO_InitStruct.Speed = 2;\n  HAL_GPIO_Init(DAT_08004800,&GPIO_InitStruct);\n  GPIO_InitStruct.Pin = 0x20;\n  GPIO_InitStruct.Mode = 1;\n  GPIO_InitStruct.Speed = 2;\n  HAL_GPIO_Init(DAT_08004808,&GPIO_InitStruct);\n  puVar3 = PTR_hi2c1_0800480c;\n  *(undefined4 *)PTR_hi2c1_0800480c = DAT_08004810;\n  *(undefined4 *)(puVar3 + 4) = uVar1;\n  *(undefined4 *)(puVar3 + 0x10) = 0x4000;\n  *(undefined4 *)(puVar3 + 8) = 0;\n  *(undefined4 *)(puVar3 + 0xc) = 0;\n  *(undefined4 *)(puVar3 + 0x14) = 0;\n  *(undefined4 *)(puVar3 + 0x18) = 0;\n  *(undefined4 *)(puVar3 + 0x1c) = 0;\n  *(undefined4 *)(puVar3 + 0x20) = 0;\n  HVar2 = HAL_I2C_Init((I2C_HandleTypeDef *)puVar3);\n  puVar3 = (undefined *)(uint)HVar2;\n  if (puVar3 == (undefined *)0x0) goto LAB_0800463a;\n  iVar5 = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  puVar3 = PTR_s____Src_peripherals_c_08004814;\n                                  _Error_Handler(PTR_s____Src_peripherals_c_08004814,iVar5);\nLAB_0800463a:\n                                  uVar1 = DAT_0800481c;\n                                  huart = PTR_huart1_08004818;\n                                  *(undefined **)(PTR_huart1_08004818 + 8) = puVar3;\n                                  *(undefined **)(huart + 0xc) = puVar3;\n                                  *(undefined **)(huart + 0x10) = puVar3;\n                                  *(undefined **)(huart + 0x18) = puVar3;\n                                  *(undefined **)(huart + 0x1c) = puVar3;\n                                  *(undefined4 *)huart = uVar1;\n                                  *(undefined4 *)(huart + 4) = 0x1c200;\n                                  *(undefined4 *)(huart + 0x14) = 0xc;\n                                  HVar2 = HAL_UART_Init((UART_HandleTypeDef *)huart);\n                                  uVar1 = DAT_08004824;\n                                  puVar3 = PTR_htim1_08004820;\n                                  if (HVar2 == HAL_OK) break;\n                                  iVar5 = 0x151;\n                                }\n                                *(undefined4 *)(PTR_htim1_08004820 + 8) = 0;\n                                *(undefined4 *)(puVar3 + 0x10) = 0;\n                                *(undefined4 *)(puVar3 + 0x14) = 0;\n                                *(undefined4 *)puVar3 = uVar1;\n                                *(uint *)(puVar3 + 4) = uVar6;\n                                *(undefined4 *)(puVar3 + 0xc) = 1000;\n                                HVar2 = HAL_TIM_PWM_Init((TIM_HandleTypeDef *)puVar3);\n                                uVar4 = (uint)HVar2;\n                                if (uVar4 == 0) break;\n                                iVar5 = 0x88;\n                              }\n                              sMasterConfig.MasterOutputTrigger = uVar4;\n                              sMasterConfig.MasterSlaveMode = uVar4;\n                              HVar2 = HAL_TIMEx_MasterConfigSynchronization\n                                                ((TIM_HandleTypeDef *)puVar3,&sMasterConfig);\n                              uVar4 = (uint)HVar2;\n                              if (uVar4 == 0) break;\n                              iVar5 = 0x8f;\n                            }\n                            sConfigOC.OCMode = 0x60;\n                            sConfigOC.Pulse = uVar4;\n                            sConfigOC.OCPolarity = uVar4;\n                            sConfigOC.OCFastMode = uVar4;\n                            sConfigOC.OCIdleState = uVar4;\n                            sConfigOC.OCNIdleState = uVar4;\n                            HVar2 = HAL_TIM_PWM_ConfigChannel\n                                              ((TIM_HandleTypeDef *)puVar3,&sConfigOC,0xc);\n                            uVar4 = (uint)HVar2;\n                            if (uVar4 == 0) break;\n                            iVar5 = 0x9a;\n                          }\n                          GPIO_InitStruct.Pin = uVar4;\n                          GPIO_InitStruct.Mode = uVar4;\n                          GPIO_InitStruct.Pull = uVar4;\n                          GPIO_InitStruct.Speed = uVar4;\n                          HVar2 = HAL_TIMEx_ConfigBreakDeadTime\n                                            ((TIM_HandleTypeDef *)puVar3,\n                                             (TIM_BreakDeadTimeConfigTypeDef *)&GPIO_InitStruct);\n                          if (HVar2 == HAL_OK) break;\n                          iVar5 = 0xa6;\n                        }\n                        HAL_TIM_MspPostInit((TIM_HandleTypeDef *)puVar3);\n                        puVar3 = PTR_htim2_08004828;\n                        *(undefined4 *)PTR_htim2_08004828 = 0x40000000;\n                        *(uint *)(puVar3 + 4) = uVar6;\n                        *(undefined4 *)(puVar3 + 8) = 0;\n                        *(undefined4 *)(puVar3 + 0xc) = 1000;\n                        *(undefined4 *)(puVar3 + 0x10) = 0;\n                        HVar2 = HAL_TIM_PWM_Init((TIM_HandleTypeDef *)puVar3);\n                        uVar4 = (uint)HVar2;\n                        if (uVar4 == 0) break;\n                        iVar5 = 0xc3;\n                      }\n                      sConfigOC.OCMode = uVar4;\n                      sConfigOC.Pulse = uVar4;\n                      HVar2 = HAL_TIMEx_MasterConfigSynchronization\n                                        ((TIM_HandleTypeDef *)puVar3,\n                                         (TIM_MasterConfigTypeDef *)&sConfigOC);\n                      uVar4 = (uint)HVar2;\n                      if (uVar4 == 0) break;\n                      iVar5 = 0xca;\n                    }\n                    GPIO_InitStruct.Pin = 0x60;\n                    GPIO_InitStruct.Mode = uVar4;\n                    GPIO_InitStruct.Pull = uVar4;\n                    HVar2 = HAL_TIM_PWM_ConfigChannel\n                                      ((TIM_HandleTypeDef *)puVar3,\n                                       (TIM_OC_InitTypeDef *)&GPIO_InitStruct,4);\n                    if (HVar2 == HAL_OK) break;\n                    iVar5 = 0xd3;\n                  }\n                  HAL_TIM_MspPostInit((TIM_HandleTypeDef *)puVar3);\n                  uVar1 = DAT_08004830;\n                  puVar3 = PTR_htim3_0800482c;\n                  *(undefined4 *)(PTR_htim3_0800482c + 0xc) = 1000;\n                  *(undefined4 *)puVar3 = uVar1;\n                  *(uint *)(puVar3 + 4) = uVar6;\n                  *(undefined4 *)(puVar3 + 8) = 0;\n                  *(undefined4 *)(puVar3 + 0x10) = 0;\n                  HVar2 = HAL_TIM_PWM_Init((TIM_HandleTypeDef *)puVar3);\n                  if (HVar2 == HAL_OK) break;\n                  iVar5 = 0xf0;\n                }\n                sConfigOC.OCMode = 0;\n                sConfigOC.Pulse = 0;\n                HVar2 = HAL_TIMEx_MasterConfigSynchronization\n                                  ((TIM_HandleTypeDef *)PTR_htim3_0800482c,\n                                   (TIM_MasterConfigTypeDef *)&sConfigOC);\n                uVar4 = (uint)HVar2;\n                if (uVar4 == 0) break;\n                iVar5 = 0xf7;\n              }\n              GPIO_InitStruct.Pin = 0x60;\n              GPIO_InitStruct.Mode = uVar4;\n              GPIO_InitStruct.Pull = uVar4;\n              HVar2 = HAL_TIM_PWM_ConfigChannel\n                                ((TIM_HandleTypeDef *)PTR_htim3_0800482c,\n                                 (TIM_OC_InitTypeDef *)&GPIO_InitStruct,8);\n              if (HVar2 == HAL_OK) break;\n              iVar5 = 0x100;\n            }\n            HVar2 = HAL_TIM_PWM_ConfigChannel\n                              ((TIM_HandleTypeDef *)PTR_htim3_0800482c,\n                               (TIM_OC_InitTypeDef *)&GPIO_InitStruct,0xc);\n            uVar6 = (uint)HVar2;\n            if (uVar6 == 0) break;\n            iVar5 = 0x105;\n          }\n          HAL_TIM_MspPostInit((TIM_HandleTypeDef *)PTR_htim3_0800482c);\n          puVar3 = PTR_htim4_08004834;\n          *(undefined4 *)PTR_htim4_08004834 = DAT_08004838;\n          *(undefined4 *)(puVar3 + 4) = 2;\n          *(undefined4 *)(puVar3 + 8) = 0;\n          *(undefined4 *)(puVar3 + 0xc) = 1000;\n          *(undefined4 *)(puVar3 + 0x10) = 0;\n          HVar2 = HAL_TIM_PWM_Init((TIM_HandleTypeDef *)puVar3);\n          uVar4 = (uint)HVar2;\n          if (uVar4 == 0) break;\n          iVar5 = 0x122;\n        }\n        sConfigOC.OCMode = uVar4;\n        sConfigOC.Pulse = uVar4;\n        HVar2 = HAL_TIMEx_MasterConfigSynchronization\n                          ((TIM_HandleTypeDef *)puVar3,(TIM_MasterConfigTypeDef *)&sConfigOC);\n        uVar4 = (uint)HVar2;\n        if (uVar4 == 0) break;\n        iVar5 = 0x129;\n      }\n      GPIO_InitStruct.Pin = 0x60;\n      GPIO_InitStruct.Mode = uVar4;\n      GPIO_InitStruct.Pull = uVar4;\n      HVar2 = HAL_TIM_PWM_ConfigChannel\n                        ((TIM_HandleTypeDef *)puVar3,(TIM_OC_InitTypeDef *)&GPIO_InitStruct,8);\n      if (HVar2 == HAL_OK) break;\n      iVar5 = 0x132;\n    }\n    HVar2 = HAL_TIM_PWM_ConfigChannel\n                      ((TIM_HandleTypeDef *)puVar3,(TIM_OC_InitTypeDef *)&GPIO_InitStruct,0xc);\n    if (HVar2 == HAL_OK) break;\n    iVar5 = 0x137;\n  }\n  HAL_TIM_MspPostInit((TIM_HandleTypeDef *)puVar3);\n  return;\n}\n\n",
            "called": [
                "HAL_TIMEx_ConfigBreakDeadTime",
                "HAL_TIMEx_MasterConfigSynchronization",
                "HAL_I2C_Init",
                "_Error_Handler",
                "HAL_GPIO_Init",
                "HAL_Init",
                "HAL_TIM_MspPostInit",
                "HAL_TIM_PWM_Init",
                "HAL_TIM_PWM_ConfigChannel",
                "SystemClock_Config",
                "HAL_UART_Init",
                "HAL_GPIO_WritePin"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800458c",
            "calling": [
                "Devices_Init"
            ],
            "imported": false,
            "current_name": "FUNC_0800458c"
        },
        "FUN_08000ffc": {
            "renaming": {
                "FUN_08000ffc": "compare_floats_08000ffc",
                "param_1": "first_float",
                "param_2": "second_float"
            },
            "code": "void compare_floats_08000ffc(float first_float, float second_float) {\n  __aeabi_cfcmpeq(second_float, first_float);\n  return;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ffc",
            "calling": [
                "__aeabi_fcmpgt",
                "__aeabi_fcmpge"
            ],
            "imported": false,
            "current_name": "compare_floats_08000ffc"
        },
        "FUN_080016f4": {
            "renaming": {
                "FUN_080016f4": "check_i2c_status_080016f4",
                "*hi2c": "*i2c_handler",
                "Timeout": "timeout",
                "uVar1": "start_time",
                "uVar2": "current_time",
                "*pIVar3": "*i2c_instance",
                "SR1": "status_register_1",
                "HAL_OK": "HAL_OPERATION_OK",
                "HAL_TIMEOUT": "HAL_OPERATION_TIMEOUT",
                "HAL_ERROR": "HAL_OPERATION_ERROR",
                "ErrorCode": "error_code",
                "State": "state",
                "Lock": "lock"
            },
            "code": "HAL_StatusTypeDef check_i2c_status_080016f4(I2C_HandleTypeDef *i2c_handler, uint32_t timeout)\n{\n  uint32_t start_time = HAL_GetTick();\n  while( true ) {\n    I2C_TypeDef *i2c_instance = i2c_handler->Instance;\n    if ((i2c_instance->SR1 & 0x40) != 0) {\n      return HAL_OK;\n    }\n    if ((int)(i2c_instance->SR1 << 0x1b) < 0) break;\n    if ((timeout == 0) || (HAL_GetTick() - start_time > timeout)) {\n      i2c_handler->ErrorCode |= 0x20;\n      i2c_handler->State = HAL_I2C_STATE_READY;\n      i2c_handler->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  i2c_instance->SR1 = i2c_instance->SR1 & 0xffffffef;\n  i2c_handler->ErrorCode = 0;\n  i2c_handler->Lock = HAL_UNLOCKED;\n  i2c_handler->State = HAL_I2C_STATE_READY;\n  return HAL_ERROR;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016f4",
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "imported": false,
            "current_name": "check_i2c_status_080016f4"
        },
        "FUN_080025a4": {
            "renaming": {
                "FUN_080025a4": "configure_timer_080025a4",
                "htim": "timer_handle",
                "sMasterConfig": "master_config",
                "HVar2": "status",
                "pTVar3": "timer_instance",
                "uVar4": "master_output_trigger",
                "uVar1": "master_slave_mode"
            },
            "code": "HAL_StatusTypeDef configure_timer_080025a4(TIM_HandleTypeDef *timer_handle, TIM_MasterConfigTypeDef *master_config)\n{\n  uint32_t cr2_reg;\n  uint32_t smcr_reg;\n  uint32_t master_output_trigger;\n  uint32_t master_slave_mode;\n  HAL_StatusTypeDef status = HAL_BUSY;\n  if (timer_handle->Lock != HAL_LOCKED) {\n    timer_handle->State = HAL_TIM_STATE_BUSY;\n    cr2_reg = timer_handle->Instance->CR2;\n    master_output_trigger = master_config->MasterOutputTrigger;\n    cr2_reg &= ~TIM_CR2_MMS_Msk;\n    cr2_reg |= master_output_trigger;\n    timer_handle->Instance->CR2 = cr2_reg;\n    smcr_reg = timer_handle->Instance->SMCR;\n    master_slave_mode = master_config->MasterSlaveMode;\n    smcr_reg &= ~TIM_SMCR_SMS_Msk;\n    smcr_reg |= master_slave_mode;\n    timer_handle->Instance->SMCR = smcr_reg;\n    timer_handle->State = HAL_TIM_STATE_READY;\n    status = HAL_OK;\n    timer_handle->Lock = HAL_UNLOCKED;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025a4",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "configure_timer_080025a4"
        },
        "FUN_08003034": {
            "renaming": {
                "FUN_08003034": "read_sensor_data_08003034",
                "in_r3": "input_value",
                "rxbuf": "sensor_data",
                "_rxbuf": "sensor_data_source",
                "PTR_s____Src_MS5611_c_08003064": "sensor_data_source_pointer"
            },
            "code": "uint32_t read_sensor_data_08003034(void)\n{\n  uint8_t sensor_data[3];\n  uint32_t combined_data = 0;\n  I2C_ReadBytes(0xee, 0, sensor_data, 3, sensor_data_source, 0x8c);\n  combined_data = (uint32_t)(sensor_data[0] << 16) | (uint32_t)(sensor_data[1] << 8) | (uint32_t)(sensor_data[2]);\n  return combined_data;\n}",
            "called": [
                "I2C_ReadBytes"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003034",
            "calling": [
                "MS5611_Update"
            ],
            "imported": false,
            "current_name": "read_sensor_data_08003034"
        },
        "FUN_08004e7c": {
            "renaming": {
                "FUN_08004e7c": "configure_UART_08004e7c",
                "*huart": "*uart_handler",
                "tmpreg": "control_reg",
                "DAT_08004edc": "USART1",
                "DAT_08004ee0": "GPIOA",
                "CR3": "control_reg",
                "Pin": "pin_number",
                "Mode": "pin_mode",
                "Speed": "pin_speed",
                "Pull": "pin_pull"
            },
            "code": "void configure_UART_08004e7c(UART_HandleTypeDef *huart) {\n  uint32_t control_reg;\n  GPIO_InitTypeDef GPIO_InitStruct;\n  if (huart->Instance == DAT_08004edc) {\n    control_reg = DAT_08004edc->CR3 | 0x4000;\n    GPIO_InitStruct.Pin = GPIO_PIN_9;\n    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;\n    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;\n    HAL_GPIO_Init(DAT_08004ee0,&GPIO_InitStruct);\n    GPIO_InitStruct.Pin = GPIO_PIN_10;\n    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;\n    GPIO_InitStruct.Pull = GPIO_NOPULL;\n    HAL_GPIO_Init(DAT_08004ee0,&GPIO_InitStruct);\n    HAL_NVIC_SetPriority(DAT_08004edc_IRQn,0,0);\n    HAL_NVIC_EnableIRQ(DAT_08004edc_IRQn);\n  }\n  return;\n}\n",
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_GPIO_Init",
                "HAL_NVIC_EnableIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e7c",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "configure_UART_08004e7c"
        },
        "FUN_08001530": {
            "renaming": {
                "FUN_08001530": "i2c_master_write_08001530",
                "hi2c": "handle",
                "DevAddress": "dev_address",
                "MemAddress": "mem_address",
                "MemAddSize": "mem_address_size",
                "Timeout": "timeout",
                "HVar1": "status",
                "uVar2": "start_time",
                "uVar3": "current_time",
                "pIVar4": "instance",
                "tmpreg": "unused_variable"
            },
            "code": "HAL_StatusTypeDef i2c_master_write_08001530(I2C_HandleTypeDef *handle, uint16_t dev_address, uint16_t mem_address, uint16_t mem_address_size, uint32_t timeout)\n{\n  HAL_StatusTypeDef status;\n  uint32_t start_time = HAL_GetTick();\n  I2C_TypeDef *instance = handle->Instance;\n  instance->CR1 |= I2C_CR1_ACK;\n  do {\n    if ((int)(instance->SR1 << I2C_SR1_ADDR_Pos) < 0) {\n      instance->DR = dev_address & I2C_OAR1_ADD7;\n      status = I2C_WaitOnMasterAddressFlagUntilTimeout(handle, DAT_080015e4, timeout);\n      if (status != HAL_OK) {\n        if (handle->ErrorCode != HAL_I2C_ERROR_AF) {\n          return HAL_TIMEOUT;\n        }\n        handle->ErrorCode = HAL_I2C_ERROR_NONE;\n        instance->CR1 |= I2C_CR1_STOP;\n        while ((instance->SR2 & I2C_SR2_BUSY) != 0) {}\n        return HAL_ERROR;\n      }\n      if (mem_address_size == 1) {\n        instance->DR = (uint8_t)mem_address;\n        return HAL_OK;\n      }\n      instance->DR = (uint8_t)(mem_address >> 8);\n      status = I2C_WaitOnTXEFlagUntilTimeout(handle, timeout);\n      if (status == HAL_OK) {\n        instance->DR = (uint8_t)mem_address;\n        return HAL_OK;\n      }\n      if (handle->ErrorCode != HAL_I2C_ERROR_AF) {\n        return HAL_TIMEOUT;\n      }\n      handle->ErrorCode = HAL_I2C_ERROR_NONE;\n      instance->CR1 |= I2C_CR1_STOP;\n      while ((instance->SR2 & I2C_SR2_BUSY) != 0) {}\n      return HAL_ERROR;\n    }\n  } while ((timeout == HAL_MAX_DELAY) || (HAL_GetTick() - start_time < timeout));\n  handle->State = HAL_I2C_STATE_READY;\n  handle->Lock = HAL_UNLOCKED;\n  return HAL_TIMEOUT;\n}",
            "called": [
                "HAL_GetTick",
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001530",
            "calling": [
                "HAL_I2C_Mem_Write"
            ],
            "imported": false,
            "current_name": "i2c_master_write_08001530"
        },
        "FUN_0800411c": {
            "renaming": {
                "FUN_0800411c": "processFlightData_0800411c",
                "puVar1": "lastTickPtr",
                "uVar2": "currentMillis",
                "PTR_last_tick1_08004188": "lastTickPtr1",
                "PTR_last_tick3_0800418c": "lastTickPtr3",
                "PTR_last_tick2_08004190": "lastTickPtr2",
                "AHRS_ComputeAngles": "computeAHRSAngles",
                "PID_Update": "updatePID",
                "MSP_SendIdent": "sendMSPIdent",
                "MSP_SendStatus": "sendMSPStatus",
                "MSP_SendMotor": "sendMSPMotor",
                "MSP_SendAttitude": "sendMSPAttitude",
                "MSP_SendAltitude": "sendMSPAltitude",
                "MSP_SendRawIMU": "sendMSPRawIMU",
                "MSP_SendPID": "sendMSPPID",
                "MS5611_Update": "updateMS5611"
            },
            "code": "void processFlightData_0800411c(void)\n{\n  uint32_t currentMillis = millis();\n  uint32_t *lastTickPtr;\n  uint32_t lastTick;\n\n  lastTickPtr = PTR_last_tick1_08004188;\n  lastTick = *(uint32_t *)lastTickPtr;\n  if (currentMillis - lastTick > 1) {\n    *lastTickPtr = currentMillis;\n    AHRS_ComputeAngles();\n  }\n\n  lastTickPtr = PTR_last_tick3_0800418c;\n  lastTick = *(uint32_t *)lastTickPtr;\n  if (currentMillis - lastTick > 2) {\n    *lastTickPtr = currentMillis;\n    PID_Update();\n  }\n\n  lastTickPtr = PTR_last_tick2_08004190;\n  lastTick = *(uint32_t *)lastTickPtr;\n  if (currentMillis - lastTick > 3) {\n    *lastTickPtr = currentMillis;\n    MSP_SendIdent();\n    MSP_SendStatus();\n    MSP_SendMotor();\n    MSP_SendAttitude();\n    MSP_SendAltitude();\n    MSP_SendRawIMU();\n    MSP_SendPID();\n  }\n\n  MS5611_Update();\n  return;\n}",
            "called": [
                "MS5611_Update",
                "MSP_SendPID",
                "MSP_SendStatus",
                "AHRS_ComputeAngles",
                "MSP_SendAltitude",
                "millis",
                "PID_Update",
                "MSP_SendAttitude",
                "MSP_SendRawIMU",
                "MSP_SendMotor",
                "MSP_SendIdent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800411c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "processFlightData_0800411c"
        },
        "FUN_080040b8": {
            "renaming": {
                "FUN_080040b8": "readI2C_080040b8",
                "device_add": "deviceAddress",
                "register_add": "registerAddress",
                "bytes": "data",
                "size": "dataSize",
                "file": "fileName",
                "line": "lineNumber",
                "HVar1": "status"
            },
            "code": "void readI2C_080040b8(uint16_t deviceAddress, uint16_t registerAddress, uint8_t *data, uint16_t dataSize, char *fileName, int lineNumber) {\n    HAL_StatusTypeDef status = HAL_I2C_Mem_Read((I2C_HandleTypeDef *)PTR_hi2c1_080040e4, deviceAddress, registerAddress, 1, data, dataSize, 200);\n    if (status != HAL_OK) {\n        _Error_Handler(fileName, lineNumber);\n        return;\n    }\n    return;\n}",
            "called": [
                "HAL_I2C_Mem_Read",
                "_Error_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040b8",
            "calling": [
                "MS5611_ReadADC"
            ],
            "imported": false,
            "current_name": "readI2C_080040b8"
        },
        "FUN_08004490": {
            "renaming": {
                "FUN_08004490": "log_error_08004490",
                "file": "filename",
                "line": "line_number",
                "GPIOx": "gpio",
                "data_00": "error_message",
                "data": "line_message",
                "PTR_s_Error_with_08004510": "error_with_message",
                "PTR_s__at_line__0800450c": "line_prefix",
                "DAT_08004508": "error_gpio",
                "GPIO_PIN_SET": "GPIO_PIN_SET",
                "GPIO_PIN_RESET": "GPIO_PIN_RESET",
                "serialPrint": "serial_print",
                "serialInt": "serial_print_int",
                "serialWrite": "serial_write",
                "delay_ms": "delay_ms"
            },
            "code": "void log_error_08004490(char* filename, int line_number) {\n  GPIO_TypeDef *gpio;\n  char *error_message;\n  char *line_message;\n  HAL_GPIO_WritePin(DAT_08004508, 0x4000, GPIO_PIN_SET);\n  HAL_GPIO_WritePin(DAT_08004508, 0x8000, GPIO_PIN_RESET);\n  HAL_GPIO_WritePin(DAT_08004508, 0x2000, GPIO_PIN_RESET);\n  error_message = PTR_s_Error_with_08004510;\n  line_message = PTR_s__at_line__0800450c;\n  gpio = DAT_08004508;\n  do {\n    HAL_GPIO_TogglePin(gpio, 0x4000);\n    HAL_GPIO_TogglePin(gpio, 0x8000);\n    HAL_GPIO_TogglePin(gpio, 0x2000);\n    serial_print(error_message);\n    serial_print(filename);\n    serial_print(line_message);\n    serial_print_int(line_number);\n    serial_write('\n');\n    delay_ms(500);\n  } while(true);\n}",
            "called": [
                "serialInt",
                "HAL_GPIO_TogglePin",
                "delay_ms",
                "serialPrint",
                "HAL_GPIO_WritePin",
                "serialWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004490",
            "calling": [
                "I2C_WriteByte",
                "I2C_ReadByte",
                "Peripherals_Init",
                "I2C_ReadBytes",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "log_error_08004490"
        },
        "FUN_08000e54": {
            "renaming": {
                "FUN_08000e54": "FUNC_08000e54"
            },
            "code": "\nuint FUNC_08000e54(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_08000e4a:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_08000e6c;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_08000e6c:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000e54",
            "calling": [
                "MS5611_Update",
                "AHRS_ComputeAngles",
                "MadgwickQuaternionUpdate",
                "PID_Compute"
            ],
            "imported": false,
            "current_name": "FUNC_08000e54"
        },
        "FUN_080015e8": {
            "renaming": {
                "FUN_080015e8": "I2C_Read_080015e8",
                "hi2c": "handle",
                "DevAddress": "device_address",
                "MemAddress": "memory_address",
                "MemAddSize": "memory_address_size",
                "Timeout": "timeout",
                "HVar1": "status",
                "uVar2": "start_time",
                "uVar3": "current_time",
                "pIVar4": "instance"
            },
            "code": "HAL_StatusTypeDef I2C_Read_080015e8(I2C_HandleTypeDef *handle, uint16_t device_address, uint16_t memory_address, uint16_t memory_address_size, uint32_t timeout)\n{\n    HAL_StatusTypeDef status;\n    uint32_t start_time, current_time;\n    I2C_TypeDef *instance = handle->Instance;\n    instance->CR1 |= 0x400;\n    instance->CR1 |= 0x100;\n    start_time = HAL_GetTick();\n    while ((int)(handle->Instance->SR1 << 0x1f) >= 0)\n    {\n        if (timeout != 0xffffffff) {\n            if (timeout < HAL_GetTick() - start_time) {\n                handle->State = HAL_I2C_STATE_READY;\n                handle->Lock = HAL_UNLOCKED;\n                return HAL_TIMEOUT;\n            }\n        }\n    }\n    instance->DR = (byte)device_address & 0xfe;\n    status = I2C_WaitOnMasterAddressFlagUntilTimeout(handle, DAT_080016f0, timeout);\n    if (status != HAL_OK) {\n        if (handle->ErrorCode != 4) {\n            return HAL_TIMEOUT;\n        }\n        return HAL_ERROR;\n    }\n    status = I2C_WaitOnTXEFlagUntilTimeout(handle, timeout);\n    if (status == HAL_OK) {\n        if (memory_address_size != 1) {\n            instance->DR = (uint)(memory_address >> 8);\n            status = I2C_WaitOnTXEFlagUntilTimeout(handle, timeout);\n            if (status != HAL_OK) {\n                return HAL_TIMEOUT;\n            }\n        }\n        instance->DR = (uint)(byte)memory_address;\n        status = I2C_WaitOnTXEFlagUntilTimeout(handle, timeout);\n        if (status == HAL_OK) {\n            instance->CR1 |= 0x100;\n            start_time = HAL_GetTick();\n            do {\n                do {\n                    if ((int)(handle->Instance->SR1 << 0x1f) < 0) {\n                        instance->DR = (byte)device_address | 1;\n                        status = I2C_WaitOnMasterAddressFlagUntilTimeout(handle, DAT_080016f0, timeout);\n                        if (status == HAL_OK) {\n                            return HAL_OK;\n                        }\n                        if (handle->ErrorCode != 4) {\n                            return HAL_TIMEOUT;\n                        }\n                        return HAL_ERROR;\n                    }\n                } while (timeout == 0xffffffff);\n            } while ((timeout != 0) && (current_time = HAL_GetTick(), current_time - start_time <= timeout));\n            handle->State = HAL_I2C_STATE_READY;\n            handle->Lock = HAL_UNLOCKED;\n            return HAL_TIMEOUT;\n        }\n    }\n    if (handle->ErrorCode == 4) {\n        instance->CR1 |= 0x200;\n        return HAL_ERROR;\n    }\n    return HAL_TIMEOUT;\n}",
            "called": [
                "HAL_GetTick",
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015e8",
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "imported": false,
            "current_name": "I2C_Read_080015e8"
        }
    },
    "used_tokens": 169454,
    "layers": [
        [
            "FUN_08003320",
            "FUN_08004410",
            "FUN_08003ef2",
            "FUN_08001264",
            "FUN_080058fc",
            "FUN_080070b0",
            "FUN_08001028",
            "FUN_080006ac",
            "FUN_0800125a",
            "FUN_08001828",
            "FUN_0800290c",
            "FUN_080028a6",
            "FUN_08004300",
            "FUN_08005630",
            "FUN_08000980",
            "FUN_08002368",
            "FUN_08002008",
            "FUN_080008fc",
            "FUN_0800114c",
            "FUN_08002250",
            "FUN_080011fc",
            "FUN_08003f7c",
            "FUN_08005646",
            "FUN_08000990",
            "FUN_08004ee6",
            "FUN_08004434",
            "FUN_08004ee8",
            "FUN_08004ffc",
            "FUN_0800103c",
            "FUN_0800115c",
            "FUN_08004f60",
            "FUN_08002d88",
            "FUN_08002b48",
            "FUN_08004f68",
            "FUN_08001170",
            "FUN_08002bf0",
            "FUN_08002ad0",
            "FUN_08001050",
            "FUN_08004ef4",
            "FUN_080043bc",
            "FUN_08004f5c",
            "FUN_08000404",
            "FUN_08004eec",
            "FUN_08004eea",
            "FUN_08006070",
            "FUN_08004cac",
            "FUN_08004c18",
            "FUN_08004c8c",
            "FUN_08001460",
            "FUN_08003fd0",
            "FUN_08000134",
            "FUN_08003eb0",
            "FUN_08002ee8",
            "FUN_08001104",
            "FUN_08004978",
            "FUN_08000c60",
            "FUN_08004f04",
            "FUN_080072b8",
            "FUN_0800581c",
            "FUN_08003eac",
            "FUN_080072ac",
            "FUN_08002cb0",
            "FUN_08002324",
            "FUN_08002564",
            "FUN_08004fb0",
            "FUN_08003ec8",
            "FUN_08003fe8",
            "FUN_08005714",
            "FUN_08004fb4",
            "FUN_080009dc",
            "FUN_08000c70",
            "FUN_080023d0",
            "FUN_08000a30",
            "FUN_08003fdc",
            "FUN_080009f0",
            "FUN_08004f10",
            "FUN_08005044",
            "FUN_08004194",
            "FUN_08001240",
            "FUN_08005840",
            "FUN_08000150",
            "FUN_08003f3c",
            "FUN_08002214",
            "FUN_08003ff4",
            "FUN_08001004",
            "FUN_08004514",
            "FUN_080057d0",
            "FUN_080072d4",
            "FUN_08002220",
            "FUN_08003314",
            "FUN_08001014",
            "FUN_080071c0",
            "FUN_08005614",
            "FUN_080070a4",
            "FUN_0800407c",
            "FUN_080022d0",
            "FUN_080010c4",
            "FUN_0800245c",
            "FUN_080008f4",
            "FUN_08004e14",
            "FUN_08002ea0",
            "FUN_08001424",
            "FUN_08004c64",
            "FUN_080041e4",
            "FUN_080003e4",
            "FUN_08007092",
            "FUN_08002f28",
            "FUN_08004384",
            "FUN_080009a0",
            "FUN_08003298",
            "FUN_08004028",
            "FUN_0800708c",
            "FUN_08002520",
            "FUN_08000464",
            "FUN_08002404",
            "FUN_08001436",
            "FUN_08004a30",
            "FUN_08004c70",
            "FUN_08000904",
            "FUN_0800299a",
            "FUN_080052e4",
            "FUN_08000f94",
            "FUN_080014e2",
            "FUN_0800142e",
            "FUN_08004d8c",
            "FUN_080009b4",
            "FUN_08003068",
            "FUN_08000f8c",
            "FUN_08000474",
            "FUN_08000110",
            "FUN_0800709e",
            "FUN_08002ec0",
            "FUN_08006c0c",
            "FUN_0800426c",
            "FUN_08002538",
            "FUN_080040e8",
            "FUN_08000c44",
            "FUN_08000a04",
            "FUN_080025e8",
            "FUN_080009c8",
            "FUN_08000f9c",
            "FUN_08002ed4",
            "FUN_08000c3c",
            "FUN_08001214",
            "FUN_08003fc4",
            "FUN_0800209c",
            "FUN_08003f0e",
            "FUN_0800403c",
            "FUN_0800277c",
            "FUN_0800483c",
            "FUN_08001064",
            "FUN_08000892",
            "FUN_08004458",
            "FUN_08004d48",
            "FUN_08002280",
            "FUN_08001194",
            "FUN_08004348",
            "FUN_08001078",
            "FUN_08001754",
            "FUN_08002724",
            "FUN_080043f0",
            "FUN_08000428",
            "FUN_08004ccc",
            "FUN_08004c30",
            "FUN_0800729c",
            "FUN_080041ae",
            "FUN_080041c4",
            "FUN_0800567c",
            "FUN_08000ffc",
            "FUN_080016f4",
            "FUN_080025a4",
            "FUN_08003034",
            "FUN_08004e7c",
            "FUN_08001530",
            "FUN_0800411c",
            "FUN_080040b8",
            "FUN_08004490",
            "FUN_080015e8"
        ],
        [
            "FUN_08001128",
            "FUN_08004a84",
            "FUN_08005854",
            "FUN_08005bc8"
        ]
    ],
    "locked_functions": []
}