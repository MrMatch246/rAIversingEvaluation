{
    "functions": {
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "initialize_flag_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b8) */\n\nundefined4 initializeFlag_080001ac(undefined4 inputValue)\n\n{\n  if ((char)DAT_20000104 == '\\0') {\n    DAT_20000104._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_080001ac": "initialize_flag_080001ac",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_080059f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000230": {
            "entrypoint": "0x08000230",
            "current_name": "find_byte_sequence_08000230",
            "code": "\nbyte * find_byte_sequence_08000230(uint *data,uint target_byte,uint length)\n\n{\n  byte current_byte;\n  char flag1;\n  char flag2;\n  char flag3;\n  char flag4;\n  byte *result;\n  uint *current_data;\n  byte *next_result;\n  uint aligned_offset;\n  uint aligned_length;\n  uint xored_data1;\n  uint xored_data2;\n  bool is_true1;\n  bool is_true2;\n  bool is_true3;\n  bool is_true4;\n  \n  target_byte = target_byte & 0xff;\n  if ((int)length < 0x10) {\njoined_r0x08000290:\n    do {\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n      current_data = (uint *)((int)data + 1);\n      current_byte = *(byte *)data;\n      length = length - 1;\n      data = current_data;\n    } while (current_byte != target_byte);\n  }\n  else {\n    aligned_offset = (uint)data & 7;\n    while( true ) {\n      if (aligned_offset == 0) {\n        aligned_offset = target_byte | target_byte << 8;\n        aligned_offset = aligned_offset | aligned_offset << 0x10;\n        aligned_length = length & 0xfffffff8;\n        do {\n          current_data = data + 2;\n          aligned_length = aligned_length - 8;\n          xored_data1 = *data ^ aligned_offset;\n          xored_data2 = data[1] ^ aligned_offset;\n          flag1 = -((char)xored_data1 == '\\0');\n          flag2 = -((char)(xored_data1 >> 8) == '\\0');\n          flag3 = -((char)(xored_data1 >> 0x10) == '\\0');\n          flag4 = -((char)(xored_data1 >> 0x18) == '\\0');\n          xored_data1 = CONCAT13(flag4,CONCAT12(flag3,CONCAT11(flag2,flag1)));\n          is_true1 = (char)xored_data2 != '\\0';\n          is_true2 = (char)(xored_data2 >> 8) != '\\0';\n          is_true3 = (char)(xored_data2 >> 0x10) != '\\0';\n          is_true4 = (char)(xored_data2 >> 0x18) != '\\0';\n          xored_data2 = CONCAT13(is_true4 * flag4 - !is_true4,\n                            CONCAT12(is_true3 * flag3 - !is_true3,\n                                     CONCAT11(is_true2 * flag2 - !is_true2,is_true1 * flag1 - !is_true1)));\n          if (xored_data2 != 0) {\n            if (xored_data1 == 0) {\n              next_result = (byte *)((int)data + 5);\n              xored_data1 = xored_data2;\n            }\n            else {\n              next_result = (byte *)((int)data + 1);\n            }\n            if ((xored_data1 & 1) == 0) {\n              is_true1 = (xored_data1 & 0x100) == 0;\n              result = next_result + 1;\n              if (is_true1) {\n                is_true1 = (xored_data1 & 0x18000) == 0;\n                result = next_result + 2;\n              }\n              next_result = result;\n              if (is_true1) {\n                next_result = next_result + 1;\n              }\n            }\n            return next_result + -1;\n          }\n          data = current_data;\n        } while (aligned_length != 0);\n        length = length & 7;\n        goto joined_r0x08000290;\n      }\n      current_data = (uint *)((int)data + 1);\n      length = length - 1;\n      if (*(byte *)data == target_byte) break;\n      aligned_offset = (uint)current_data & 7;\n      data = current_data;\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)current_data + -1);\n}\n\n",
            "renaming": {
                "FUN_08000230": "find_byte_sequence_08000230",
                "param_1": "data",
                "param_2": "target_byte",
                "param_3": "length",
                "bVar1": "current_byte",
                "cVar2": "flag1",
                "cVar3": "flag2",
                "cVar4": "flag3",
                "cVar5": "flag4",
                "pbVar6": "result",
                "puVar7": "current_data",
                "pbVar8": "next_result",
                "uVar9": "aligned_offset",
                "uVar10": "aligned_length",
                "uVar11": "xored_data1",
                "uVar12": "xored_data2",
                "bVar13": "is_true1",
                "bVar14": "is_true2",
                "bVar15": "is_true3",
                "bVar16": "is_true4"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004d9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002d0": {
            "entrypoint": "0x080002d0",
            "current_name": "calculate_result_080002d0",
            "code": "\nundefined8 calculate_result_080002d0(int input1,int input2,int flag1,int flag2)\n\n{\n  undefined8 result;\n  \n  if ((flag2 == 0) && (flag1 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input2 = -1;\n      input1 = -1;\n    }\n    return CONCAT44(input2,input1);\n  }\n  result = div_mul_remainder_08000300();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080002d0": "calculate_result_080002d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "flag1",
                "param_4": "flag2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080023b4"
            ],
            "called": [
                "FUN_08000300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000300": {
            "entrypoint": "0x08000300",
            "current_name": "div_mul_remainder_08000300",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong div_mul_remainder_08000300(uint dividend,uint dividend_high,uint divisor,uint divisor_high,uint *remainder)\n\n{\n  ulonglong result;\n  uint temp1;\n  uint quotient;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int iVar10;\n  bool bVar11;\n  \n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      iVar10 = LZCOUNT(divisor);\n      if (iVar10 != 0) {\n        divisor = divisor << iVar10;\n        dividend_high = dividend >> (0x20U - iVar10 & 0xff) | dividend_high << iVar10;\n        dividend = dividend << iVar10;\n      }\n      temp6 = divisor >> 0x10;\n      temp4 = dividend_high / temp6;\n      temp3 = dividend >> 0x10 | (dividend_high - temp6 * temp4) * 0x10000;\n      temp2 = temp4 * (divisor & 0xffff);\n      quotient = temp4;\n      if (temp3 <= temp2 && temp2 - temp3 != 0) {\n        bVar11 = CARRY4(temp3,divisor);\n        temp3 = temp3 + divisor;\n        quotient = temp4 - 1;\n        if ((bVar11 == false) && (temp3 <= temp2 && temp2 - temp3 != 0)) {\n          quotient = temp4 - 2;\n          temp3 = temp3 + divisor;\n        }\n      }\n      temp4 = (temp3 - temp2) / temp6;\n      temp3 = dividend & 0xffff | ((temp3 - temp2) - temp6 * temp4) * 0x10000;\n      temp6 = temp4 * (divisor & 0xffff);\n      temp2 = temp4;\n      if (temp3 <= temp6 && temp6 - temp3 != 0) {\n        bVar11 = CARRY4(temp3,divisor);\n        temp3 = temp3 + divisor;\n        temp2 = temp4 - 1;\n        if ((bVar11 == false) && (temp3 <= temp6 && temp6 - temp3 != 0)) {\n          temp2 = temp4 - 2;\n          temp3 = temp3 + divisor;\n        }\n      }\n      temp3 = temp3 - temp6;\n      temp2 = temp2 | quotient << 0x10;\n      quotient = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      iVar10 = LZCOUNT(divisor);\n      if (iVar10 == 0) {\n        dividend_high = dividend_high - divisor;\n        temp3 = divisor >> 0x10;\n        temp7 = divisor & 0xffff;\n        quotient = 1;\n      }\n      else {\n        divisor = divisor << iVar10;\n        temp3 = divisor >> 0x10;\n        temp2 = dividend_high >> (0x20U - iVar10 & 0xff);\n        temp5 = dividend >> (0x20U - iVar10 & 0xff) | dividend_high << iVar10;\n        quotient = temp2 / temp3;\n        temp7 = divisor & 0xffff;\n        temp6 = temp5 >> 0x10 | (temp2 - temp3 * quotient) * 0x10000;\n        temp4 = quotient * temp7;\n        dividend = dividend << iVar10;\n        temp2 = quotient;\n        if (temp6 <= temp4 && temp4 - temp6 != 0) {\n          bVar11 = CARRY4(temp6,divisor);\n          temp6 = temp6 + divisor;\n          temp2 = quotient - 1;\n          if ((bVar11 == false) && (temp6 <= temp4 && temp4 - temp6 != 0)) {\n            temp2 = quotient - 2;\n            temp6 = temp6 + divisor;\n          }\n        }\n        temp1 = (temp6 - temp4) / temp3;\n        dividend_high = temp5 & 0xffff | ((temp6 - temp4) - temp3 * temp1) * 0x10000;\n        temp4 = temp1 * temp7;\n        quotient = temp1;\n        if (dividend_high <= temp4 && temp4 - dividend_high != 0) {\n          bVar11 = CARRY4(dividend_high,divisor);\n          dividend_high = dividend_high + divisor;\n          quotient = temp1 - 1;\n          if ((bVar11 == false) && (dividend_high <= temp4 && temp4 - dividend_high != 0)) {\n            quotient = temp1 - 2;\n            dividend_high = dividend_high + divisor;\n          }\n        }\n        dividend_high = dividend_high - temp4;\n        quotient = quotient | temp2 << 0x10;\n      }\n      temp5 = dividend_high / temp3;\n      temp6 = dividend >> 0x10 | (dividend_high - temp3 * temp5) * 0x10000;\n      temp2 = temp7 * temp5;\n      temp4 = temp5;\n      if (temp6 <= temp2 && temp2 - temp6 != 0) {\n        bVar11 = CARRY4(temp6,divisor);\n        temp6 = temp6 + divisor;\n        temp4 = temp5 - 1;\n        if ((bVar11 == false) && (temp6 <= temp2 && temp2 - temp6 != 0)) {\n          temp4 = temp5 - 2;\n          temp6 = temp6 + divisor;\n        }\n      }\n      temp5 = (temp6 - temp2) / temp3;\n      temp3 = dividend & 0xffff | ((temp6 - temp2) - temp3 * temp5) * 0x10000;\n      temp7 = temp7 * temp5;\n      temp2 = temp5;\n      if (temp3 <= temp7 && temp7 - temp3 != 0) {\n        bVar11 = CARRY4(temp3,divisor);\n        temp3 = temp3 + divisor;\n        temp2 = temp5 - 1;\n        if ((bVar11 == false) && (temp3 <= temp7 && temp7 - temp3 != 0)) {\n          temp2 = temp5 - 2;\n          temp3 = temp3 + divisor;\n        }\n      }\n      temp3 = temp3 - temp7;\n      temp2 = temp2 | temp4 << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = temp3 >> iVar10;\n      remainder[1] = 0;\n      return CONCAT44(quotient,temp2);\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_high;\n      return 0;\n    }\n    temp2 = 0;\n    quotient = 0;\n  }\n  else {\n    iVar10 = LZCOUNT(divisor_high);\n    if (iVar10 != 0) {\n      temp6 = 0x20 - iVar10;\n      quotient = divisor >> (temp6 & 0xff) | divisor_high << iVar10;\n      temp7 = quotient >> 0x10;\n      temp2 = dividend_high >> (temp6 & 0xff);\n      temp1 = dividend >> (temp6 & 0xff) | dividend_high << iVar10;\n      temp5 = temp2 / temp7;\n      temp4 = temp1 >> 0x10 | (temp2 - temp7 * temp5) * 0x10000;\n      temp3 = temp5 * (quotient & 0xffff);\n      dividend = dividend << iVar10;\n      temp2 = temp5;\n      if (temp4 <= temp3 && temp3 - temp4 != 0) {\n        bVar11 = CARRY4(temp4,quotient);\n        temp4 = temp4 + quotient;\n        temp2 = temp5 - 1;\n        if ((bVar11 == false) && (temp4 <= temp3 && temp3 - temp4 != 0)) {\n          temp2 = temp5 - 2;\n          temp4 = temp4 + quotient;\n        }\n      }\n      temp5 = (temp4 - temp3) / temp7;\n      temp4 = temp1 & 0xffff | ((temp4 - temp3) - temp7 * temp5) * 0x10000;\n      temp7 = temp5 * (quotient & 0xffff);\n      temp3 = temp5;\n      if (temp4 <= temp7 && temp7 - temp4 != 0) {\n        bVar11 = CARRY4(temp4,quotient);\n        temp4 = temp4 + quotient;\n        temp3 = temp5 - 1;\n        if ((bVar11 == false) && (temp4 <= temp7 && temp7 - temp4 != 0)) {\n          temp3 = temp5 - 2;\n          temp4 = temp4 + quotient;\n        }\n      }\n      temp3 = temp3 | temp2 << 0x10;\n      result = (ulonglong)temp3 * (ulonglong)(divisor << iVar10);\n      if (CONCAT44(temp4 - temp7,dividend) < result) {\n        result = result - CONCAT44(quotient,divisor << iVar10);\n        temp3 = temp3 - 1;\n      }\n      if (remainder != (uint *)0x0) {\n        temp2 = ((temp4 - temp7) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *remainder = temp2 << (temp6 & 0xff) | dividend - (uint)result >> iVar10;\n        remainder[1] = temp2 >> iVar10;\n      }\n      return (ulonglong)temp3;\n    }\n    if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n      bVar11 = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_high = (dividend_high - divisor_high) - (uint)bVar11;\n      temp2 = 1;\n    }\n    else {\n      temp2 = 0;\n    }\n    quotient = 0;\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_high;\n      return (ulonglong)temp2;\n    }\n  }\n  return CONCAT44(quotient,temp2);\n}\n\n",
            "renaming": {
                "FUN_08000300": "div_mul_remainder_08000300",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "param_5": "remainder",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "quotient",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar8": "temp6",
                "uVar9": "temp7"
            },
            "calling": [
                "FUN_080002d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "call_software_interrupt_080005e0",
            "code": "\nvoid callSoftwareInterrupt_080005e0(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "call_software_interrupt_080005e0"
            },
            "calling": [
                "FUN_080005e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e4": {
            "entrypoint": "0x080005e4",
            "current_name": "execute_system_interrupt_080005e4",
            "code": "\nundefined4 execute_system_interrupt_080005e4(undefined4 input_param,undefined4 unused_param,undefined4 unused_param_2,undefined4 output_param)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000120 != 0) {\n    return 0;\n  }\n  result = call_software_interrupt_080005e0(1,input_param,0,0,output_param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080005e4": "execute_system_interrupt_080005e4",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "unused_param_2",
                "param_4": "output_param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08000c4c"
            ],
            "called": [
                "FUN_080005e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000600": {
            "entrypoint": "0x08000600",
            "current_name": "initialize_device_08000600",
            "code": "\nvoid initializeDevice_08000600(int **deviceParams,undefined4 paramValue)\n\n{\n  char mode;\n  int result;\n  \n  mode = *(char *)((int)deviceParams + 5);\n  if (mode == '\\x02') {\n    *deviceParams = &DAT_20000338;\n  }\n  else if (mode == '\\x03') {\n    *deviceParams = &DAT_20000338;\n  }\n  else if (mode == '\\x01') {\n    *deviceParams = &DAT_20000338;\n  }\n  else {\n    *deviceParams = &DAT_20000338;\n  }\n  configure_uart_pin_and_combination_08004388(*deviceParams,paramValue,6);\n  if (1 < *(byte *)((int)deviceParams + 6)) {\n    process_data_08004110(*(byte *)((int)deviceParams + 6),1);\n    extract_and_set_param_value_080041bc(*(undefined *)((int)deviceParams + 6),0);\n  }\n  do {\n    result = (**(code **)(**deviceParams + 0xc))();\n  } while (-1 < result);\n  *(undefined *)((int)deviceParams + 0x49) = 0;\n  *(undefined *)((int)deviceParams + 0x4a) = 0;\n  *(undefined2 *)(deviceParams + 0x15) = 0;\n  *(undefined2 *)((int)deviceParams + 0x52) = 0;\n  *(undefined2 *)(deviceParams + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000600": "initialize_device_08000600",
                "param_1": "deviceParams",
                "param_2": "paramValue",
                "cVar1": "mode",
                "iVar2": "result"
            },
            "calling": [
                "FUN_08000c4c"
            ],
            "called": [
                "FUN_080041bc",
                "FUN_08004110",
                "FUN_08004388"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800066c": {
            "entrypoint": "0x0800066c",
            "current_name": "initialize_parameters_0800066c",
            "code": "\nvoid initializeParameters_0800066c(int pointer,undefined value1,int value2,undefined value3)\n\n{\n  *(undefined *)(pointer + 4) = value1;\n  if (3 < value2) {\n    value2 = 0;\n  }\n  *(char *)(pointer + 5) = (char)value2;\n  *(undefined *)(pointer + 6) = value3;\n  *(undefined2 *)(pointer + 0x56) = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800066c": "initialize_parameters_0800066c",
                "param_1": "pointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_08000682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000682": {
            "entrypoint": "0x08000682",
            "current_name": "initialize_and_return_08000682",
            "code": "\nundefined4 initialize_and_return_08000682(undefined4 input_parameter)\n\n{\n  initialize_parameters_0800066c();\n  return input_parameter;\n}\n\n",
            "renaming": {
                "FUN_08000682": "initialize_and_return_08000682",
                "param_1": "input_parameter"
            },
            "calling": [
                "FUN_08000690"
            ],
            "called": [
                "FUN_0800066c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000690": {
            "entrypoint": "0x08000690",
            "current_name": "check_and_initialize_08000690",
            "code": "\nvoid check_and_initialize_08000690(int input_value,int magic_number,undefined4 unused_param_1,undefined4 unused_param_2)\n\n{\n  if (input_value != 1) {\n    no_output;\n  }\n  if (magic_number == 0xffff) {\n    initialize_and_return(&DAT_20000124,1,0,0,unused_param_2);\n  }\n  no_output;\n}\n\n",
            "renaming": {
                "FUN_08000690": "check_and_initialize_08000690",
                "param_1": "input_value",
                "param_2": "magic_number",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "initialize_and_return_08000682": "initialize_and_return",
                "return": "no_output"
            },
            "calling": [],
            "called": [
                "FUN_08000682"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006b4": {
            "entrypoint": "0x080006b4",
            "current_name": "extract_and_count_params_080006b4",
            "code": "\nint extract_and_count_params_080006b4(int **param_array)\n\n{\n  bool exceeded_threshold;\n  undefined param_value;\n  int result;\n  byte index;\n  \n  if (1 < *(byte *)((int)param_array + 6)) {\n    extract_and_set_param_value(*(byte *)((int)param_array + 6),0);\n  }\n  *(undefined *)((int)param_array + 0x49) = 0;\n  if (*(byte *)((int)param_array + 5) < 4) {\n    exceeded_threshold = false;\n    while (result = (**(code **)(**param_array + 8))(), result != 0) {\n      index = *(byte *)((int)param_array + 0x49);\n      param_value = (**(code **)(**param_array + 0xc))();\n      *(undefined *)((int)param_array + index + 9) = param_value;\n      index = *(char *)((int)param_array + 0x49) + 1;\n      *(byte *)((int)param_array + 0x49) = index;\n      if (0x3f < index) {\n        exceeded_threshold = true;\n      }\n    }\n  }\n  else {\n    exceeded_threshold = false;\n  }\n  *(short *)(param_array + 0x14) = *(short *)(param_array + 0x14) + 1;\n  if (exceeded_threshold) {\n    *(short *)(param_array + 0x15) = *(short *)(param_array + 0x15) + 1;\n    return -3;\n  }\n  return (int)*(char *)((int)param_array + 0x49);\n}\n\n",
            "renaming": {
                "FUN_080006b4": "extract_and_count_params_080006b4",
                "param_1": "param_array",
                "bVar1": "exceeded_threshold",
                "uVar2": "param_value",
                "iVar3": "result",
                "bVar4": "index",
                "extract_and_set_param_value_080041bc": "extract_and_set_param_value"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_080041bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000728": {
            "entrypoint": "0x08000728",
            "current_name": "calculate_crc_08000728",
            "code": "\nuint calculateCRC_08000728(int dataStart,int dataLength)\n\n{\n  byte bitCount;\n  uint crcValue;\n  uint bitSet;\n  uint i;\n  \n  crcValue = 0xffff;\n  for (i = 0; (int)i < dataLength; i = i + 1 & 0xff) {\n    crcValue = crcValue ^ *(byte *)(dataStart + i + 9);\n    for (bitCount = 1; bitCount < 9; bitCount = bitCount + 1) {\n      bitSet = crcValue & 1;\n      crcValue = crcValue >> 1;\n      if (bitSet != 0) {\n        crcValue = crcValue ^ 0xa001;\n      }\n    }\n  }\n  return (crcValue & 0xff) << 8 | crcValue >> 8;\n}\n\n",
            "renaming": {
                "FUN_08000728": "calculate_crc_08000728",
                "param_1": "dataStart",
                "param_2": "dataLength",
                "bVar1": "bitCount",
                "uVar2": "crcValue",
                "uVar3": "bitSet",
                "uVar4": "i"
            },
            "calling": [
                "FUN_0800076c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800076c": {
            "entrypoint": "0x0800076c",
            "current_name": "calculate_and_update_crc_0800076c",
            "code": "\nvoid calculate_and_update_crc_0800076c(int **input_data,undefined4 unused_param_1,undefined4 unused_param_2,undefined4 unused_param_3)\n\n{\n  undefined2 crc_result;\n  int dat_value;\n  uint data_length;\n  \n  data_length = (uint)*(byte *)((int)input_data + 0x49);\n  crc_result = calculate_crc_08000728(input_data,data_length,unused_param_2,unused_param_3,unused_param_3);\n  *(char *)((int)input_data + data_length + 9) = (char)((ushort)crc_result >> 8);\n  data_length = data_length + 1 & 0xff;\n  *(char *)((int)input_data + data_length + 9) = (char)crc_result;\n  *(char *)((int)input_data + 0x49) = (char)data_length + '\\x01';\n  if (1 < *(byte *)((int)input_data + 6)) {\n    extract_and_set_param_value_080041bc(*(byte *)((int)input_data + 6),1);\n  }\n  if (*(byte *)((int)input_data + 5) < 4) {\n    (**(code **)(**input_data + 4))(*input_data,(int)input_data + 9,*(undefined *)((int)input_data + 0x49));\n  }\n  if (1 < *(byte *)((int)input_data + 6)) {\n    extract_and_set_param_value_080041bc(*(byte *)((int)input_data + 6),0);\n  }\n  if (*(byte *)((int)input_data + 5) < 4) {\n    do {\n      dat_value = (**(code **)(**input_data + 0xc))();\n    } while (-1 < dat_value);\n  }\n  *(undefined *)((int)input_data + 0x49) = 0;\n  dat_value = initialize_dat_value_08004204();\n  input_data[0x17] = (int *)(dat_value + (uint)*(ushort *)((int)input_data + 0x56));\n  *(short *)((int)input_data + 0x52) = *(short *)((int)input_data + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800076c": "calculate_and_update_crc_0800076c",
                "param_1": "input_data",
                "param_2": "unused_param_1",
                "param_3": "unused_param_2",
                "param_4": "unused_param_3",
                "uVar1": "crc_result",
                "iVar2": "dat_value",
                "uVar3": "data_length"
            },
            "calling": [
                "FUN_08000a7a",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_08000a4e",
                "FUN_08000b54",
                "FUN_080008e2",
                "FUN_08000a00"
            ],
            "called": [
                "FUN_080041bc",
                "FUN_08000728",
                "FUN_08004204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080007f0": {
            "entrypoint": "0x080007f0",
            "current_name": "check_condition_080007f0",
            "code": "\nundefined4 check_condition_080007f0(int data_ptr,undefined4 param_2,uint value,undefined4 param_4)\n\n{\n  bool is_match;\n  byte combined_value;\n  char first_combined_value;\n  char second_combined_value;\n  int combined_value_1;\n  uint index;\n  int combined_value_2;\n  \n  index = 0;\n  do {\n    if (7 < index) {\n      is_match = false;\nLAB_0800080a:\n      if (!is_match) {\n        *(short *)(data_ptr + 0x54) = *(short *)(data_ptr + 0x54) + 1;\n        return 1;\n      }\n      combined_value_2 = *(byte *)(data_ptr + 10) - 1;\n      switch(*(byte *)(data_ptr + 10)) {\n      case 1:\n      case 2:\n      case 0xf:\n        goto switchD_08000816_caseD_1;\n      case 3:\n      case 4:\n      case 0x10:\n        first_combined_value = combine_values_08004640(*(undefined *)(data_ptr + 0xb),*(undefined *)(data_ptr + 0xc),value,\n                             combined_value_2,param_4);\n        second_combined_value = combine_values_08004640(*(undefined *)(data_ptr + 0xd),*(undefined *)(data_ptr + 0xe));\n        if (*(byte *)(data_ptr + 0x60) < (byte)(second_combined_value + first_combined_value)) {\n          return 2;\n        }\n        return 0;\n      case 5:\n        combined_value_2 = combine_values_08004640(*(undefined *)(data_ptr + 0xb),*(undefined *)(data_ptr + 0xc),value,\n                             combined_value_2,param_4);\n        if ((uint)*(byte *)(data_ptr + 0x60) < (uint)(combined_value_2 << 0x14) >> 0x18) {\n          return 2;\n        }\n        return 0;\n      case 6:\n        combined_value = combine_values_08004640(*(undefined *)(data_ptr + 0xb),*(undefined *)(data_ptr + 0xc),value,\n                             combined_value_2,param_4);\n        if (*(byte *)(data_ptr + 0x60) < combined_value) {\n          return 2;\n        }\n        return 0;\n      default:\n        return 0;\n      }\n    }\n    value = (uint)*(byte *)(data_ptr + 10);\n    if ((byte)(&DAT_08005a10)[index] == value) {\n      is_match = true;\n      goto LAB_0800080a;\n    }\n    index = index + 1 & 0xff;\n  } while( true );\nswitchD_08000816_caseD_1:\n  combined_value_2 = combine_values_08004640(*(undefined *)(data_ptr + 0xb),*(undefined *)(data_ptr + 0xc),value,combined_value_2,\n                       param_4);\n  combined_value_1 = combine_values_08004640(*(undefined *)(data_ptr + 0xd),*(undefined *)(data_ptr + 0xe));\n  if ((uint)*(byte *)(data_ptr + 0x60) <\n      (((uint)(combined_value_2 << 0xc) >> 0x10) + ((uint)(combined_value_1 << 0xc) >> 0x10) & 0xff)) {\n    return 2;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080007f0": "check_condition_080007f0",
                "param_1": "data_ptr",
                "param_3": "value",
                "bVar1": "is_match",
                "bVar2": "combined_value",
                "cVar3": "first_combined_value",
                "cVar4": "second_combined_value",
                "iVar5": "combined_value_1",
                "uVar6": "index",
                "iVar7": "combined_value_2"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008cc": {
            "entrypoint": "0x080008cc",
            "current_name": "copy_byte_and_toggle_flag_080008cc",
            "code": "\nvoid copyByteAndToggleFlag_080008cc(int dataAddress,undefined newValue)\n\n{\n  *(undefined *)(dataAddress + 9) = *(undefined *)(dataAddress + 4);\n  *(byte *)(dataAddress + 10) = *(byte *)(dataAddress + 10) ^ 0x80;\n  *(undefined *)(dataAddress + 0xb) = newValue;\n  *(undefined *)(dataAddress + 0x49) = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080008cc": "copy_byte_and_toggle_flag_080008cc",
                "param_1": "dataAddress",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008e2": {
            "entrypoint": "0x080008e2",
            "current_name": "combine_and_update_values_080008e2",
            "code": "\nint combineAndUpdateValues_080008e2(int inputBuffer,int outputBuffer,undefined4 param3,undefined4 param4)\n\n{\n  int combinedValue;\n  uint combinedValue2;\n  uint loopCounter;\n  uint bitCounter;\n  char shiftedValue;\n  int calculatedValue;\n  \n  combinedValue = combineValues(*(undefined *)(inputBuffer + 0xb),*(undefined *)(inputBuffer + 0xc),param3,param4,\n                       param4);\n  combinedValue2 = combineValues(*(undefined *)(inputBuffer + 0xd),*(undefined *)(inputBuffer + 0xe));\n  shiftedValue = (char)((combinedValue2 << 0x15) >> 0x18);\n  if ((combinedValue2 & 7) != 0) {\n    shiftedValue = shiftedValue + '\\x01';\n  }\n  *(char *)(inputBuffer + 0xb) = shiftedValue;\n  *(undefined *)(inputBuffer + 0x49) = 3;\n  bitCounter = 0;\n  for (loopCounter = 0; (int)loopCounter < (int)combinedValue2; loopCounter = loopCounter + 1 & 0xffff) {\n    if (((int)(uint)*(ushort *)(outputBuffer + ((loopCounter + combinedValue) * 0x100000 >> 0x18) * 2) >>\n         (loopCounter + combinedValue & 0xf) & 1U) == 0) {\n      calculatedValue = (uint)*(byte *)(inputBuffer + 0x49) + inputBuffer;\n      *(byte *)(calculatedValue + 9) = *(byte *)(calculatedValue + 9) & ~(byte)(1 << bitCounter);\n    }\n    else {\n      calculatedValue = (uint)*(byte *)(inputBuffer + 0x49) + inputBuffer;\n      *(byte *)(calculatedValue + 9) = *(byte *)(calculatedValue + 9) | (byte)(1 << bitCounter);\n    }\n    bitCounter = bitCounter + 1 & 0xff;\n    if (7 < bitCounter) {\n      *(char *)(inputBuffer + 0x49) = *(char *)(inputBuffer + 0x49) + '\\x01';\n      bitCounter = 0;\n    }\n  }\n  if ((combinedValue2 & 7) != 0) {\n    *(char *)(inputBuffer + 0x49) = *(char *)(inputBuffer + 0x49) + '\\x01';\n  }\n  shiftedValue = *(char *)(inputBuffer + 0x49);\n  calculateAndUpdateCrc(inputBuffer);\n  return (int)(char)(shiftedValue + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_080008e2": "combine_and_update_values_080008e2",
                "param_1": "inputBuffer",
                "param_2": "outputBuffer",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "combinedValue",
                "uVar2": "combinedValue2",
                "uVar3": "loopCounter",
                "uVar4": "bitCounter",
                "cVar5": "shiftedValue",
                "iVar6": "calculatedValue",
                "combine_values_08004640": "combineValues",
                "calculate_and_update_crc_0800076c": "calculateAndUpdateCrc"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "process_data_08000998",
            "code": "\nint process_data_08000998(int data_ptr,int input_ptr,undefined4 param_3,undefined4 param_4)\n\n{\n  byte temp_byte;\n  char temp_char;\n  byte combined_value_1;\n  byte combined_value_2;\n  uint loop_counter;\n  uint index;\n  \n  combined_value_1 = combine_values_08004640(*(undefined *)(data_ptr + 0xb),*(undefined *)(data_ptr + 0xc),param_3,param_4,\n                       param_4);\n  combined_value_2 = combine_values_08004640(*(undefined *)(data_ptr + 0xd),*(undefined *)(data_ptr + 0xe));\n  *(byte *)(data_ptr + 0xb) = combined_value_2 << 1;\n  *(undefined *)(data_ptr + 0x49) = 3;\n  for (loop_counter = (uint)combined_value_1; loop_counter < (uint)combined_value_1 + (uint)combined_value_2; loop_counter = loop_counter + 1 & 0xff) {\n    temp_byte = *(byte *)(data_ptr + 0x49);\n    *(char *)(data_ptr + (uint)temp_byte + 9) = (char)((ushort)*(undefined2 *)(input_ptr + loop_counter * 2) >> 8)\n    ;\n    index = temp_byte + 1 & 0xff;\n    temp_char = (char)index;\n    *(char *)(data_ptr + 0x49) = temp_char;\n    *(undefined *)(data_ptr + index + 9) = *(undefined *)(input_ptr + loop_counter * 2);\n    *(char *)(data_ptr + 0x49) = temp_char + '\\x01';\n  }\n  temp_char = *(char *)(data_ptr + 0x49);\n  calculate_and_update_crc_0800076c(data_ptr);\n  return (int)(char)(temp_char + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000998": "process_data_08000998",
                "param_1": "data_ptr",
                "param_2": "input_ptr",
                "bVar1": "temp_byte",
                "cVar2": "temp_char",
                "bVar3": "combined_value_1",
                "bVar4": "combined_value_2",
                "uVar5": "loop_counter",
                "uVar6": "index"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a00": {
            "entrypoint": "0x08000a00",
            "current_name": "update_value_and_calculate_crc_08000a00",
            "code": "\nundefined4 updateValueAndCalculateCRC_08000a00(int inputData,int outputData,undefined4 value1,undefined4 value2)\n\n{\n  uint combinedValue;\n  uint shiftedValue;\n  \n  combinedValue = combine_values_08004640(*(undefined *)(inputData + 0xb),*(undefined *)(inputData + 0xc),value1,value2,\n                       value2);\n  shiftedValue = (combinedValue << 0x14) >> 0x18;\n  if (*(char *)(inputData + 0xd) == -1) {\n    *(ushort *)(outputData + shiftedValue * 2) =\n         (ushort)(1 << (combinedValue & 0xf)) | *(ushort *)(outputData + shiftedValue * 2);\n  }\n  else {\n    *(ushort *)(outputData + shiftedValue * 2) =\n         *(ushort *)(outputData + shiftedValue * 2) & ~(ushort)(1 << (combinedValue & 0xf));\n  }\n  *(undefined *)(inputData + 0x49) = 6;\n  calculate_and_update_crc_0800076c(inputData);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a00": "update_value_and_calculate_crc_08000a00",
                "param_1": "inputData",
                "param_2": "outputData",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "combinedValue",
                "uVar2": "shiftedValue"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a4e": {
            "entrypoint": "0x08000a4e",
            "current_name": "update_values_and_calculate_crc_08000a4e",
            "code": "\nundefined4 updateValuesAndCalculateCRC_08000a4e(int memoryAddress1,int memoryAddress2)\n\n{\n  byte combinedValue1;\n  undefined2 combinedValue2;\n  \n  combinedValue1 = combine_values_08004640(*(undefined *)(memoryAddress1 + 0xb),*(undefined *)(memoryAddress1 + 0xc));\n  combinedValue2 = combine_values_08004640(*(undefined *)(memoryAddress1 + 0xd),*(undefined *)(memoryAddress1 + 0xe));\n  *(undefined2 *)(memoryAddress2 + (uint)combinedValue1 * 2) = combinedValue2;\n  *(undefined *)(memoryAddress1 + 0x49) = 6;\n  calculate_and_update_crc_0800076c(memoryAddress1);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a4e": "update_values_and_calculate_crc_08000a4e",
                "param_1": "memoryAddress1",
                "param_2": "memoryAddress2",
                "bVar1": "combinedValue1",
                "uVar2": "combinedValue2"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a7a": {
            "entrypoint": "0x08000a7a",
            "current_name": "update_values_and_calculate_crc_08000a7a",
            "code": "\nundefined4 updateValuesAndCalculateCRC_08000a7a(int data,int result,undefined4 param3,undefined4 param4)\n\n{\n  int combinedValue1;\n  int combinedValue2;\n  uint index;\n  uint bitIndex;\n  uint bitPosition;\n  uint byteIndex;\n  uint offset;\n  \n  combinedValue1 = combine_values_08004640(*(undefined *)(data + 0xb),*(undefined *)(data + 0xc),param3,param4,\n                       param4);\n  combinedValue2 = combine_values_08004640(*(undefined *)(data + 0xd),*(undefined *)(data + 0xe));\n  bitIndex = 0;\n  offset = 7;\n  for (index = 0; (int)index < combinedValue2; index = index + 1 & 0xffff) {\n    byteIndex = (index + combinedValue1) * 0x100000 >> 0x18;\n    bitPosition = index + combinedValue1 & 0xf;\n    if (((int)(uint)*(byte *)(data + offset + 9) >> bitIndex & 1U) == 0) {\n      *(ushort *)(result + byteIndex * 2) = *(ushort *)(result + byteIndex * 2) & ~(ushort)(1 << bitPosition);\n    }\n    else {\n      *(ushort *)(result + byteIndex * 2) = (ushort)(1 << bitPosition) | *(ushort *)(result + byteIndex * 2);\n    }\n    bitIndex = bitIndex + 1 & 0xff;\n    if (7 < bitIndex) {\n      offset = offset + 1 & 0xff;\n      bitIndex = 0;\n    }\n  }\n  *(undefined *)(data + 0x49) = 6;\n  calculate_and_update_crc_0800076c(data);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a7a": "update_values_and_calculate_crc_08000a7a",
                "param_1": "data",
                "param_2": "result",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "combinedValue1",
                "iVar2": "combinedValue2",
                "uVar3": "index",
                "uVar4": "bitIndex",
                "uVar5": "bitPosition",
                "uVar6": "byteIndex",
                "uVar7": "offset"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b04": {
            "entrypoint": "0x08000b04",
            "current_name": "decode_and_update_values_08000b04",
            "code": "\nint decode_and_update_values_08000b04(int input_address,int output_address)\n\n{\n  byte byte1;\n  byte byte2;\n  char char1;\n  undefined2 combined_value;\n  uint loop_counter;\n  \n  byte1 = *(byte *)(input_address + 0xc);\n  byte2 = *(byte *)(input_address + 0xe);\n  *(undefined *)(input_address + 0xd) = 0;\n  *(byte *)(input_address + 0xe) = byte2;\n  *(undefined *)(input_address + 0x49) = 6;\n  for (loop_counter = 0; loop_counter < byte2; loop_counter = loop_counter + 1 & 0xff) {\n    combined_value = combine_values_08004640(*(undefined *)(loop_counter * 2 + input_address + 0x10),\n                         *(undefined *)(input_address + (loop_counter + 4) * 2 + 9));\n    *(undefined2 *)(output_address + (byte1 + loop_counter) * 2) = combined_value;\n  }\n  char1 = *(char *)(input_address + 0x49);\n  calculate_and_update_crc_0800076c(input_address);\n  return (int)(char)(char1 + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000b04": "decode_and_update_values_08000b04",
                "param_1": "input_address",
                "param_2": "output_address",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "cVar3": "char1",
                "uVar4": "combined_value",
                "uVar5": "loop_counter"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b54": {
            "entrypoint": "0x08000b54",
            "current_name": "process_data_08000b54",
            "code": "\nint processData_08000b54(int **arrayParam,int *pointerParam,undefined4 paramValue)\n\n{\n  byte byteVar;\n  int intVar1;\n  uint uintVar;\n  int returnValue;\n  \n  arrayParam[0x13] = pointerParam;\n  *(char *)(arrayParam + 0x18) = (char)paramValue;\n  if (*(byte *)((int)arrayParam + 5) < 4) {\n    byteVar = (**(code **)(**arrayParam + 8))();\n    uintVar = (uint)byteVar;\n  }\n  if (uintVar == 0) {\n    returnValue = 0;\n  }\n  else if ((int)uintVar < 8) {\n    returnValue = 0;\n  }\n  else {\n    returnValue = extract_and_count_params_080006b4(arrayParam);\n    *(char *)(arrayParam + 2) = (char)returnValue;\n    if (*(char *)((int)arrayParam + 9) == *(char *)(arrayParam + 1)) {\n      intVar1 = check_condition_080007f0(arrayParam);\n      if (intVar1 < 1) {\n        intVar1 = initialize_dat_value_08004204();\n        arrayParam[0x17] = (int *)((uint)*(ushort *)((int)arrayParam + 0x56) + intVar1);\n        *(undefined *)(arrayParam + 2) = 0;\n        switch(*(undefined *)((int)arrayParam + 10)) {\n        case 1:\n        case 2:\n          returnValue = combine_and_update_values_080008e2(arrayParam,pointerParam,paramValue);\n          break;\n        case 3:\n        case 4:\n          returnValue = process_data_08000998(arrayParam,pointerParam,paramValue);\n          break;\n        case 5:\n          returnValue = update_value_and_calculate_crc_08000a00(arrayParam,pointerParam,paramValue);\n          break;\n        case 6:\n          returnValue = update_values_and_calculate_crc_08000a4e(arrayParam,pointerParam,paramValue);\n          break;\n        case 0xf:\n          returnValue = update_values_and_calculate_crc_08000a7a(arrayParam,pointerParam,paramValue);\n          break;\n        case 0x10:\n          returnValue = decode_and_update_values_08000b04(arrayParam,pointerParam,paramValue);\n        }\n      }\n      else {\n        if (intVar1 != 0xff) {\n          copy_byte_and_toggle_flag_080008cc(arrayParam,intVar1);\n          calculate_and_update_crc_0800076c(arrayParam);\n        }\n        *(char *)(arrayParam + 2) = (char)intVar1;\n        returnValue = (int)(char)intVar1;\n      }\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08000b54": "process_data_08000b54",
                "param_1": "arrayParam",
                "param_2": "pointerParam",
                "param_3": "paramValue",
                "bVar1": "byteVar",
                "iVar2": "intVar1",
                "unaff_r5": "uintVar",
                "iVar3": "returnValue"
            },
            "calling": [
                "FUN_08000c64"
            ],
            "called": [
                "FUN_08000a7a",
                "FUN_0800076c",
                "FUN_080008cc",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_08000a4e",
                "FUN_080007f0",
                "FUN_080006b4",
                "FUN_080008e2",
                "FUN_08000a00",
                "FUN_08004204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c4c": {
            "entrypoint": "0x08000c4c",
            "current_name": "initialize_system_and_device_08000c4c",
            "code": "\nvoid initialize_system_and_device_08000c4c(void)\n\n{\n  execute_system_interrupt(0);\n  initialize_device(&DAT_20000124,0x4b00);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c4c": "initialize_system_and_device_08000c4c",
                "execute_system_interrupt_080005e4": "execute_system_interrupt",
                "initialize_device_08000600": "initialize_device"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_080005e4",
                "FUN_08000600"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c64": {
            "entrypoint": "0x08000c64",
            "current_name": "process_data_08000c64",
            "code": "\nvoid processData_08000c64(void)\n\n{\n  undefined4 inputValue;\n  \n  process_data_08000b54(&DAT_20000124,&DAT_20000004,0x10,inputValue,inputValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c64": "process_data_08000c64",
                "in_r3": "inputValue"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08000b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c8c": {
            "entrypoint": "0x08000c8c",
            "current_name": "initialize_and_update_settings_08000c8c",
            "code": "\n\n\nvoid initialize_and_update_settings_08000c8c(void)\n\n{\n  uint uVar1;\n  undefined4 flag;\n  undefined4 data_value;\n  undefined4 flag_status;\n  undefined4 check_data;\n  undefined4 value;\n  undefined4 param;\n  undefined4 param_status;\n  undefined4 flag_update_value;\n  undefined4 mask;\n  undefined4 param_status_2;\n  undefined4 param_value;\n  undefined4 init_setting_1;\n  undefined4 init_setting_2;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  flag = 1;\n  data_value = 0x50000;\n  flag_status = 2;\n  check_data = 0x400000;\n  value = 8;\n  param = 0x150;\n  param_status = 2;\n  flag_update_value = 7;\n  check_flag_status_0800201c(&flag);\n  check_data_values_08001f9c();\n  mask = 0xf;\n  param_status_2 = 2;\n  param_value = 0;\n  init_setting_1 = 0x1400;\n  init_setting_2 = 0x1000;\n  initialize_settings_08002488(&mask,5);\n  uVar1 = get_global_value_080025e0();\n  initialize_param_08000ee0(uVar1 / 1000);\n  update_flag_based_on_param_08000f2c(4);\n  apply_mask_08000e60(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c8c": "initialize_and_update_settings_08000c8c",
                "local_54": "flag",
                "local_50": "data_value",
                "local_3c": "flag_status",
                "local_38": "check_data",
                "local_34": "value",
                "local_30": "param",
                "local_2c": "param_status",
                "local_28": "flag_update_value",
                "local_24": "mask",
                "local_20": "param_status_2",
                "local_1c": "param_value",
                "local_18": "init_setting_1",
                "local_14": "init_setting_2"
            },
            "calling": [
                "FUN_080034ce"
            ],
            "called": [
                "FUN_080025e0",
                "FUN_08002488",
                "FUN_08000f2c",
                "FUN_08000ee0",
                "FUN_0800201c",
                "FUN_08001f9c",
                "FUN_08000e60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08000d3c",
            "current_name": "entry",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000104; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8006034);\n  }\n  for (puVar2 = &DAT_20000104; puVar2 < &DAT_20000678; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_memory_080035bc();\n  execute_functions_08004884();\n  UNRECOVERED_JUMPTABLE = (code *)0x8000d72;\n  process_data_loop_08004658();\n                    /* WARNING: Could not recover jumptable at 0x08000d72. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08004658",
                "FUN_08004884",
                "FUN_080035bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d8e": {
            "entrypoint": "0x08000d8e",
            "current_name": "initialize_application_08000d8e",
            "code": "\nvoid initialize_application_08000d8e(void)\n\n{\n  initialize_application_08000d8e_080034ce();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d8e": "initialize_application_08000d8e"
            },
            "calling": [
                "FUN_08004648"
            ],
            "called": [
                "FUN_080034ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d96": {
            "entrypoint": "0x08000d96",
            "current_name": "FUNC_08000d96",
            "code": "\nvoid FUNC_08000d96(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d96": "FUNC_08000d96"
            },
            "calling": [
                "FUN_08000de4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000d98": {
            "entrypoint": "0x08000d98",
            "current_name": "initialize_and_apply_mask_08000d98",
            "code": "\nundefined4 initialize_and_apply_mask_08000d98(uint input_param)\n\n{\n  int init_result;\n  \n  init_result = initialize_param_08000ee0(DAT_2000002c / (1000 / DAT_20000024));\n  if (init_result != 0) {\n    return 1;\n  }\n  if (0xf < input_param) {\n    return 1;\n  }\n  apply_mask_08000e60(0xffffffff,input_param,0);\n  DAT_20000028 = input_param;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000d98": "initialize_and_apply_mask_08000d98",
                "param_1": "input_param",
                "iVar1": "init_result"
            },
            "calling": [
                "FUN_08002488",
                "FUN_08000de4"
            ],
            "called": [
                "FUN_08000ee0",
                "FUN_08000e60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000de4": {
            "entrypoint": "0x08000de4",
            "current_name": "initialize_data_and_apply_mask_08000de4",
            "code": "\n\n\nundefined4 initialize_data_and_apply_mask_08000de4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  update_data_register(3);\n  initialize_and_apply_mask(0xf);\n  FUNC_08000d96();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000de4": "initialize_data_and_apply_mask_08000de4",
                "update_data_register_08000e3c": "update_data_register",
                "initialize_and_apply_mask_08000d98": "initialize_and_apply_mask"
            },
            "calling": [
                "FUN_080034ce"
            ],
            "called": [
                "FUN_08000d98",
                "FUN_08000d96",
                "FUN_08000e3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e18": {
            "entrypoint": "0x08000e18",
            "current_name": "update_data_08000e18",
            "code": "\nvoid updateData_08000e18(void)\n\n{\n  DAT_20000670 = (uint)DAT_20000024 + DAT_20000670;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e18": "update_data_08000e18"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e30": {
            "entrypoint": "0x08000e30",
            "current_name": "get_dat_value_08000e30",
            "code": "\nundefined4 get_dat_value_08000e30(void)\n\n{\n  return DAT_20000670;\n}\n\n",
            "renaming": {
                "FUN_08000e30": "get_dat_value_08000e30"
            },
            "calling": [
                "FUN_08002d0c",
                "FUN_08002488",
                "FUN_0800346c",
                "FUN_0800201c",
                "FUN_08003d18",
                "FUN_08002dd0",
                "FUN_08001f9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e3c": {
            "entrypoint": "0x08000e3c",
            "current_name": "update_data_register_08000e3c",
            "code": "\n\n\nvoid updateDataRegister_08000e3c(uint inputValue)\n\n{\n  _DAT_e000ed0c = (inputValue & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e3c": "update_data_register_08000e3c",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08004648",
                "FUN_08000de4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e60": {
            "entrypoint": "0x08000e60",
            "current_name": "apply_mask_08000e60",
            "code": "\n\n\nvoid applyMask_08000e60(uint input,uint mask1,uint mask2)\n\n{\n  uint result;\n  uint numBitsToKeep;\n  \n  result = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  numBitsToKeep = 7 - result;\n  if (3 < numBitsToKeep) {\n    numBitsToKeep = 4;\n  }\n  if (result + 4 < 7) {\n    result = 0;\n  }\n  else {\n    result = result - 3;\n  }\n  result = (mask1 & (1 << (numBitsToKeep & 0xff)) - 1U) << (result & 0xff) |\n          (1 << (result & 0xff)) - 1U & mask2;\n  if ((int)input < 0) {\n    *(char *)((input & 0xf) + 0xe000ed14) = (char)(result << 4);\n  }\n  else {\n    *(char *)(input + 0xe000e400) = (char)(result << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e60": "apply_mask_08000e60",
                "param_1": "input",
                "param_2": "mask1",
                "param_3": "mask2",
                "uVar1": "result",
                "uVar2": "numBitsToKeep"
            },
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98",
                "FUN_08003eac",
                "FUN_08003e54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ec4": {
            "entrypoint": "0x08000ec4",
            "current_name": "set_bit_in_array_08000ec4",
            "code": "\nvoid setBitInArray_08000ec4(uint index)\n\n{\n  if (-1 < (int)index) {\n    *(int *)((index >> 5) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ec4": "set_bit_in_array_08000ec4",
                "param_1": "index"
            },
            "calling": [
                "FUN_08003eac",
                "FUN_08003e54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ee0": {
            "entrypoint": "0x08000ee0",
            "current_name": "initialize_param_08000ee0",
            "code": "\n\n\nundefined4 initializeParam_08000ee0(int inputValue)\n\n{\n  if (inputValue - 1U < 0x1000000) {\n    _DAT_e000e014 = inputValue - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000ee0": "initialize_param_08000ee0",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f0c": {
            "entrypoint": "0x08000f0c",
            "current_name": "set_bit_in_array_at_index_08000f0c",
            "code": "\nvoid setBitInArrayAtIndex_08000f0c(uint index)\n\n{\n  if (-1 < (int)index) {\n    *(int *)(((index >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f0c": "set_bit_in_array_at_index_08000f0c",
                "param_1": "index"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f2c": {
            "entrypoint": "0x08000f2c",
            "current_name": "update_flag_based_on_param_08000f2c",
            "code": "\n\n\nvoid updateFlagBasedOnParam_08000f2c(int inputParam)\n\n{\n  if (inputParam != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f2c": "update_flag_based_on_param_08000f2c",
                "param_1": "inputParam"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4c": {
            "entrypoint": "0x08000f4c",
            "current_name": "FUNC_08000f4c",
            "code": "\nvoid FUNC_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4c": "FUNC_08000f4c"
            },
            "calling": [
                "FUN_08000f4e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4e": {
            "entrypoint": "0x08000f4e",
            "current_name": "initialize_08000f4e",
            "code": "\nvoid initialize_08000f4e(void)\n\n{\n  FUNC_08000f4c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4e": "initialize_08000f4e"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [
                "FUN_08000f4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f56": {
            "entrypoint": "0x08000f56",
            "current_name": "initialize_memory_08000f56",
            "code": "\nundefined4 initializeMemory_08000f56(int memoryAddress)\n\n{\n  if (memoryAddress != 0) {\n    *(undefined *)(memoryAddress + 4) = 2;\n    clearMemoryBit();\n    *(undefined4 *)(memoryAddress + 0x10) = 0;\n    *(undefined *)(memoryAddress + 4) = 0;\n    *(undefined *)(memoryAddress + 5) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000f56": "initialize_memory_08000f56",
                "param_1": "memoryAddress",
                "clear_memory_bit_080033c8": "clearMemoryBit"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [
                "FUN_080033c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f72": {
            "entrypoint": "0x08000f72",
            "current_name": "clear_bit_and_set_flag_08000f72",
            "code": "\nundefined4 clearBitAndSetFlag_08000f72(uint **pointerArray,uint bitPosition)\n\n{\n  **pointerArray = **pointerArray & ~(1 << (bitPosition & 0xff));\n  *(undefined *)(pointerArray + 1) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f72": "clear_bit_and_set_flag_08000f72",
                "param_1": "pointerArray",
                "param_2": "bitPosition"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f8c": {
            "entrypoint": "0x08000f8c",
            "current_name": "update_param_08000f8c",
            "code": "\nundefined4 updateParam_08000f8c(uint **param)\n\n{\n  if (*(char *)((int)param + 0x35) != '\\x02') {\n    param[21] = (uint *)0x80;\n    return 1;\n  }\n  *(undefined *)((int)param + 0x35) = 5;\n  **param = **param & 0xfffffffe;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f8c": "update_param_08000f8c",
                "param_1": "param",
                "param_1[0x15]": "param[21]"
            },
            "calling": [
                "FUN_08002ffc",
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fb4": {
            "entrypoint": "0x08000fb4",
            "current_name": "update_registers_08000fb4",
            "code": "\n\n\nvoid updateRegisters_08000fb4(uint *registerArray1,uint *registerArray2)\n\n{\n  uint temp1;\n  uint temp2;\n  uint loopIndex;\n  uint mask;\n  uint temp3;\n  int offset;\n  uint temp4;\n  int index;\n  \n  for (loopIndex = 0; loopIndex < 0x10; loopIndex = loopIndex + 1) {\n    temp2 = 1 << (loopIndex & 0xff);\n    mask = temp2 & *registerArray2;\n    temp1 = _DAT_40013c0c;\n    if (temp2 == mask) {\n      if ((registerArray2[1] == 2) || (registerArray2[1] == 0x12)) {\n        offset = (loopIndex >> 3) + 8;\n        index = (loopIndex & 7) << 2;\n        registerArray1[offset] = registerArray1[offset] & ~(0xf << index) | registerArray2[4] << index;\n      }\n      temp4 = loopIndex << 1;\n      temp1 = ~(3 << (temp4 & 0xff));\n      *registerArray1 = *registerArray1 & temp1 | (registerArray2[1] & 3) << (temp4 & 0xff);\n      temp3 = registerArray2[1];\n      if (((temp3 - 1 < 2) || (temp3 == 0x11)) || (temp3 == 0x12)) {\n        registerArray1[2] = registerArray1[2] & temp1 | registerArray2[3] << (temp4 & 0xff);\n        registerArray1[1] = registerArray1[1] & ~temp2 | ((registerArray2[1] << 0x1b) >> 0x1f) << (loopIndex & 0xff);\n      }\n      registerArray1[3] = temp1 & registerArray1[3] | registerArray2[2] << (temp4 & 0xff);\n      temp1 = _DAT_40013c0c;\n      if ((registerArray2[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        index = (loopIndex & 3) << 2;\n        if (registerArray1 == (uint *)0x40020000) {\n          offset = 0;\n        }\n        else if (registerArray1 == (uint *)0x40020400) {\n          offset = 1;\n        }\n        else if (registerArray1 == (uint *)0x40020800) {\n          offset = 2;\n        }\n        else if (registerArray1 == (uint *)0x40020c00) {\n          offset = 3;\n        }\n        else if (registerArray1 == (uint *)0x40021000) {\n          offset = 4;\n        }\n        else if (registerArray1 == (uint *)0x40021400) {\n          offset = 5;\n        }\n        else if (registerArray1 == (uint *)0x40021800) {\n          offset = 6;\n        }\n        else if (registerArray1 == (uint *)0x40021c00) {\n          offset = 7;\n        }\n        else if (registerArray1 == (uint *)0x40022000) {\n          offset = 8;\n        }\n        else if (registerArray1 == (uint *)0x40022400) {\n          offset = 9;\n        }\n        else {\n          offset = 10;\n        }\n        *(uint *)(((loopIndex >> 2) + 2) * 4 + 0x40013800) =\n             *(uint *)(((loopIndex >> 2) + 2) * 4 + 0x40013800) & ~(0xf << index) | offset << index;\n        temp1 = ~mask;\n        temp2 = _DAT_40013c00 & temp1;\n        if ((registerArray2[1] & 0x10000) != 0) {\n          temp2 = mask | _DAT_40013c00;\n        }\n        temp3 = temp1 & _DAT_40013c04;\n        if ((registerArray2[1] & 0x20000) != 0) {\n          temp3 = mask | _DAT_40013c04;\n        }\n        temp4 = temp1 & _DAT_40013c08;\n        if ((registerArray2[1] & 0x100000) != 0) {\n          temp4 = mask | _DAT_40013c08;\n        }\n        _DAT_40013c00 = temp2;\n        _DAT_40013c04 = temp3;\n        _DAT_40013c08 = temp4;\n        temp1 = temp1 & _DAT_40013c0c;\n        if ((registerArray2[1] & 0x200000) != 0) {\n          temp1 = mask | _DAT_40013c0c;\n        }\n      }\n    }\n    _DAT_40013c0c = temp1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fb4": "update_registers_08000fb4",
                "param_1": "registerArray1",
                "param_2": "registerArray2",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "loopIndex",
                "uVar4": "mask",
                "uVar5": "temp3",
                "iVar6": "offset",
                "uVar7": "temp4",
                "iVar8": "index",
                "param_1[1]": "registerArray1[1]",
                "param_1[2]": "registerArray1[2]",
                "param_1[3]": "registerArray1[3]"
            },
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001198": {
            "entrypoint": "0x08001198",
            "current_name": "set_param_value_08001198",
            "code": "\nvoid setParamValue_08001198(int objectAddress,int value,int isShifted)\n\n{\n  if (isShifted == 0) {\n    *(int *)(objectAddress + 0x18) = value << 0x10;\n    return;\n  }\n  *(int *)(objectAddress + 0x18) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001198": "set_param_value_08001198",
                "param_1": "objectAddress",
                "param_2": "value",
                "param_3": "isShifted"
            },
            "calling": [
                "FUN_080034b6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011a4": {
            "entrypoint": "0x080011a4",
            "current_name": "update_data_and_execute_check_080011a4",
            "code": "\n\n\nvoid updateDataAndExecuteCheck_080011a4(uint inputValue)\n\n{\n  if ((_DAT_40013c14 & inputValue) != 0) {\n    _DAT_40013c14 = inputValue;\n    executeBitCheck();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011a4": "update_data_and_execute_check_080011a4",
                "param_1": "inputValue",
                "check_and_execute_if_bit_set_080047d0": "executeBitCheck"
            },
            "calling": [],
            "called": [
                "FUN_080047d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011c0": {
            "entrypoint": "0x080011c0",
            "current_name": "process_param_080011c0",
            "code": "\nundefined4 processParam_080011c0(int *paramArray)\n\n{\n  if (*(char *)((int)paramArray + 0x3e) == '@') {\n    if (paramArray[0x14] == 0) {\n      *(uint *)(*paramArray + 0x10) = paramArray[0x11] & 0xfe;\n    }\n    else {\n      *(uint *)(*paramArray + 0x10) = paramArray[0x11] & 0xffU | 1;\n    }\n  }\n  else if (paramArray[4] == 0x4000) {\n    if (*(char *)((int)paramArray + 0x3d) == '!') {\n      *(uint *)(*paramArray + 0x10) = paramArray[0x11] & 0xfe;\n    }\n    else {\n      *(uint *)(*paramArray + 0x10) = paramArray[0x11] & 0xffU | 1;\n    }\n  }\n  else if (paramArray[0x14] == 0) {\n    *(uint *)(*paramArray + 0x10) = (uint)(paramArray[0x11] << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (paramArray[0x14] == 1) {\n    *(uint *)(*paramArray + 0x10) = (uint)(paramArray[0x11] << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080011c0": "process_param_080011c0",
                "param_1": "paramArray",
                "param_1[0x14]": "paramArray[0x14]",
                "param_1[0x11]": "paramArray[0x11]"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800124a": {
            "entrypoint": "0x0800124a",
            "current_name": "set_uint_value_0800124a",
            "code": "\nundefined4 set_uint_value_0800124a(int *ptr_int)\n\n{\n  *(uint *)(*ptr_int + 0x10) = ptr_int[0x11] & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800124a": "set_uint_value_0800124a",
                "param_1": "ptr_int"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001256": {
            "entrypoint": "0x08001256",
            "current_name": "set_flags_based_on_conditions_08001256",
            "code": "\nundefined4 setFlagsBasedOnConditions_08001256(uint **functionParameters)\n\n{\n  uint *pointerVar;\n  \n  pointerVar = functionParameters[0xb];\n  if ((*(char *)((int)functionParameters + 0x3d) == '\\\"') &&\n     ((arrayElement1 != (uint *)0x0 || (*(char *)((int)functionParameters + 0x3e) != '@')))) {\n    if ((arrayElement1 == (uint *)0x0) && (arrayElement2 == (uint *)0xc000)) {\n      **functionParameters = **functionParameters | 0x100;\n      arrayElement1 = (uint *)((int)arrayElement1 + 1);\n    }\n    else {\n      if (*(short *)((int)functionParameters + 0x2a) == 0) {\n        **functionParameters = **functionParameters | 0x200;\n      }\n      else if (*(short *)((int)functionParameters + 0x2a) == 1) {\n        if (pointerVar == (uint *)0xffff0000) {\n          **functionParameters = **functionParameters & 0xfffffbff;\n          pointerVar = *functionParameters;\n          if ((pointerVar[1] & 0x800) == 0) {\n            *pointerVar = *pointerVar | 0x200;\n          }\n          else {\n            *pointerVar = *pointerVar & 0xfffffbff;\n          }\n        }\n        else if (((pointerVar == (uint *)0x4) || (pointerVar == (uint *)0x8)) ||\n                (arrayElement3 == (uint *)0x12)) {\n          **functionParameters = **functionParameters & 0xfffffbff;\n          **functionParameters = **functionParameters | 0x200;\n        }\n        else if (functionParameters[0xb] == (uint *)0x2) {\n          **functionParameters = **functionParameters | 0x400;\n        }\n        else {\n          **functionParameters = **functionParameters & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)functionParameters + 0x2a) == 2) {\n        if (functionParameters[0xb] == (uint *)0x2) {\n          **functionParameters = **functionParameters | 0x400;\n        }\n        else {\n          **functionParameters = **functionParameters & 0xfffffbff;\n          **functionParameters = **functionParameters | 0x800;\n        }\n        pointerVar = *functionParameters;\n        if ((pointerVar[1] & 0x800) != 0) {\n          pointerVar[1] = pointerVar[1] | 0x1000;\n        }\n      }\n      else {\n        **functionParameters = **functionParameters | 0x400;\n        pointerVar = *functionParameters;\n        if ((pointerVar[1] & 0x800) != 0) {\n          pointerVar[1] = pointerVar[1] | 0x1000;\n        }\n      }\n      arrayElement1 = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001256": "set_flags_based_on_conditions_08001256",
                "param_1": "functionParameters",
                "puVar1": "pointerVar",
                "param_1[0x14]": "arrayElement1",
                "param_1[4]": "arrayElement2",
                "param_1[0xc]": "arrayElement3"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001420": {
            "entrypoint": "0x08001420",
            "current_name": "update_byte_value_08001420",
            "code": "\nundefined4 updateByteValue_08001420(int *inputArray)\n\n{\n  byte *bytePointer;\n  \n  if (*(short *)((int)inputArray + 0x2a) != 0) {\n    bytePointer = (byte *)arrayPtr;\n    arrayPtr = (int)(bytePointer + 1);\n    *(uint *)(*inputArray + 0x10) = (uint)*bytePointer;\n    *(short *)((int)inputArray + 0x2a) = *(short *)((int)inputArray + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001420": "update_byte_value_08001420",
                "param_1": "inputArray",
                "pbVar1": "bytePointer",
                "param_1[9]": "arrayPtr"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001440": {
            "entrypoint": "0x08001440",
            "current_name": "update_array_element_08001440",
            "code": "\nundefined4 updateArrayElement_08001440(int *array)\n\n{\n  undefined *ptrToElement;\n  \n  if (*(short *)((int)array + 0x2a) != 0) {\n    ptrToElement = (undefined *)arrayElement;\n    arrayElement = (int)(ptrToElement + 1);\n    *ptrToElement = (char)*(undefined4 *)(*array + 0x10);\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001440": "update_array_element_08001440",
                "param_1": "array",
                "puVar1": "ptrToElement",
                "param_1[9]": "arrayElement"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "validate_input_08001460",
            "code": "\nundefined4 validateInput_08001460(uint **inputPtr,uint *targetPtr,int size,uint *dataPtr)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)inputPtr + 0x3d) == '(') {\n    if (targetPtr == (uint *)0x0) {\n      result = 1;\n    }\n    else if (size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(inputPtr + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(inputPtr + 0xf) = 1;\n      ptr = *inputPtr;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **inputPtr = **inputPtr & 0xfffff7ff;\n      *(undefined *)((int)inputPtr + 0x3d) = 0x29;\n      *(undefined *)((int)inputPtr + 0x3e) = 0x20;\n      result = 0;\n      arrayPtr = (uint *)0x0;\n      targetArrayPtr = targetPtr;\n      *(short *)((int)inputPtr + 0x2a) = (short)size;\n      dataArrayPtr = dataPtr;\n      *(undefined2 *)(inputPtr + 10) = *(undefined2 *)((int)inputPtr + 0x2a);\n      *(undefined *)(inputPtr + 0xf) = 0;\n      (*inputPtr)[1] = (*inputPtr)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001460": "validate_input_08001460",
                "param_1": "inputPtr",
                "param_2": "targetPtr",
                "param_3": "size",
                "param_4": "dataPtr",
                "uVar1": "result",
                "puVar2": "ptr",
                "param_1[0x10]": "arrayPtr",
                "param_1[9]": "targetArrayPtr",
                "param_1[0xb]": "dataArrayPtr"
            },
            "calling": [
                "FUN_08003880"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014ec": {
            "entrypoint": "0x080014ec",
            "current_name": "process_params_080014ec",
            "code": "\nundefined4 processParams_080014ec(uint **paramBuffer,uint *paramPointer,int paramSize,uint *paramArray)\n\n{\n  undefined4 returnValue;\n  uint *pointerVar;\n  \n  if (*(char *)((int)paramBuffer + 0x3d) == '(') {\n    if (paramPointer == (uint *)0x0) {\n      returnValue = 1;\n    }\n    else if (paramSize == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(paramBuffer + 0xf) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(paramBuffer + 0xf) = 1;\n      pointerVar = *paramBuffer;\n      if ((*pointerVar & 1) == 0) {\n        *pointerVar = *pointerVar | 1;\n      }\n      **paramBuffer = **paramBuffer & 0xfffff7ff;\n      *(undefined *)((int)paramBuffer + 0x3d) = 0x2a;\n      *(undefined *)((int)paramBuffer + 0x3e) = 0x20;\n      returnValue = 0;\n      paramBuffer[0x10] = (uint *)0x0;\n      paramBuffer[9] = paramPointer;\n      *(short *)((int)paramBuffer + 0x2a) = (short)paramSize;\n      paramBuffer[0xb] = paramArray;\n      *(undefined2 *)(paramBuffer + 10) = *(undefined2 *)((int)paramBuffer + 0x2a);\n      *(undefined *)(paramBuffer + 0xf) = 0;\n      (*paramBuffer)[1] = (*paramBuffer)[1] | 0x700;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080014ec": "process_params_080014ec",
                "param_1": "paramBuffer",
                "param_2": "paramPointer",
                "param_3": "paramSize",
                "param_4": "paramArray",
                "uVar1": "returnValue",
                "puVar2": "pointerVar"
            },
            "calling": [
                "FUN_08003880"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001578": {
            "entrypoint": "0x08001578",
            "current_name": "modify_values_08001578",
            "code": "\nundefined4 modifyValues_08001578(uint **inputs)\n\n{\n  uint *firstPointer;\n  \n  if (*(char *)((int)inputs + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)inputs + 0x3d) = 0x28;\n  firstPointer = *inputs;\n  if ((*firstPointer & 1) == 0) {\n    *firstPointer = *firstPointer | 1;\n  }\n  **inputs = **inputs | 0x400;\n  (*inputs)[1] = (*inputs)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001578": "modify_values_08001578",
                "param_1": "inputs",
                "puVar1": "firstPointer"
            },
            "calling": [
                "FUN_080038d0",
                "FUN_08003900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b6": {
            "entrypoint": "0x080015b6",
            "current_name": "FUNC_080015b6",
            "code": "\nvoid FUNC_080015b6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b6": "FUNC_080015b6"
            },
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015b8": {
            "entrypoint": "0x080015b8",
            "current_name": "FUNC_080015b8",
            "code": "\nvoid FUNC_080015b8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b8": "FUNC_080015b8"
            },
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015ba": {
            "entrypoint": "0x080015ba",
            "current_name": "FUNC_080015ba",
            "code": "\nvoid FUNC_080015ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015ba": "FUNC_080015ba"
            },
            "calling": [
                "FUN_080015bc",
                "FUN_08001684"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015bc": {
            "entrypoint": "0x080015bc",
            "current_name": "extract_byte_and_process_080015bc",
            "code": "\nundefined4 extractByteAndProcess_080015bc(int *inputArray)\n\n{\n  char charValue;\n  byte *bytePointer;\n  \n  charValue = *(char *)((int)inputArray + 0x3d);\n  if (*(short *)((int)inputArray + 0x2a) != 0) {\n    bytePointer = (byte *)inputArray[9];\n    inputArray[9] = (int)(bytePointer + 1);\n    *(uint *)(*inputArray + 0x10) = (uint)*bytePointer;\n    *(short *)((int)inputArray + 0x2a) = *(short *)((int)inputArray + 0x2a) + -1;\n    if ((*(short *)((int)inputArray + 0x2a) == 0) && (charValue == ')')) {\n      *(uint *)(*inputArray + 4) = *(uint *)(*inputArray + 4) & 0xfffffbff;\n      inputArray[0xc] = 0x21;\n      *(undefined *)((int)inputArray + 0x3d) = 0x28;\n      FUNC_080015ba();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080015bc": "extract_byte_and_process_080015bc",
                "param_1": "inputArray",
                "cVar1": "charValue",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800160c": {
            "entrypoint": "0x0800160c",
            "current_name": "FUNC_0800160c",
            "code": "\nvoid FUNC_0800160c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800160c": "FUNC_0800160c"
            },
            "calling": [
                "FUN_0800160e",
                "FUN_08001bfc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800160e": {
            "entrypoint": "0x0800160e",
            "current_name": "update_data_0800160e",
            "code": "\nundefined4 updateData_0800160e(int *data)\n\n{\n  char charValue;\n  undefined *pointer;\n  \n  charValue = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    pointer = (undefined *)data[9];\n    data[9] = (int)(pointer + 1);\n    *pointer = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (charValue == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      result = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_0800160c();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800160e": "update_data_0800160e",
                "param_1": "data",
                "cVar1": "charValue",
                "puVar2": "pointer",
                "param_1[0xc]": "result"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_0800160c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800165a": {
            "entrypoint": "0x0800165a",
            "current_name": "process_input_0800165a",
            "code": "\nundefined4 processInput_0800165a(int *inputArray,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 selectedValue;\n  uint flag;\n  \n  flag = *(uint *)(*inputArray + 0x18);\n  if ((flag & 0x80) == 0) {\n    selectedValue = *(undefined2 *)(inputArray + 3);\n  }\n  else {\n    selectedValue = *(undefined2 *)(inputArray + 6);\n  }\n  validate_and_process_input_08003880(inputArray,(*(uint *)(*inputArray + 0x18) & 4) == 0,selectedValue,flag,param4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800165a": "process_input_0800165a",
                "param_1": "inputArray",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "selectedValue",
                "uVar2": "flag"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08003880"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001684": {
            "entrypoint": "0x08001684",
            "current_name": "process_param_array_08001684",
            "code": "\nundefined4 process_param_array_08001684(uint **param_array)\n\n{\n  if (((param_array[0xb] == (uint *)0x4) || (param_array[0xb] == (uint *)0x8)) &&\n     (*(char *)((int)param_array + 0x3d) == '(')) {\n    param_array[0xb] = (uint *)0xffff0000;\n    (*param_array)[1] = (*param_array)[1] & 0xfffff8ff;\n    (*param_array)[5] = 0xfffffbff;\n    **param_array = **param_array & 0xfffffbff;\n    param_array[0xc] = (uint *)0x0;\n    *(undefined *)((int)param_array + 0x3d) = 0x20;\n    *(undefined *)((int)param_array + 0x3e) = 0;\n    process_binary_080038d0();\n  }\n  else if (*(char *)((int)param_array + 0x3d) == '!') {\n    param_array[0xb] = (uint *)0xffff0000;\n    param_array[0xc] = (uint *)0x21;\n    *(undefined *)((int)param_array + 0x3d) = 0x20;\n    *(undefined *)((int)param_array + 0x3e) = 0;\n    (*param_array)[1] = (*param_array)[1] & 0xfffff8ff;\n    (*param_array)[5] = 0xfffffbff;\n    **param_array = **param_array & 0xfffffbff;\n    FUNC_080015ba();\n  }\n  else {\n    (*param_array)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001684": "process_param_array_08001684",
                "param_1": "param_array"
            },
            "calling": [
                "FUN_08001e68"
            ],
            "called": [
                "FUN_080015ba",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001718": {
            "entrypoint": "0x08001718",
            "current_name": "FUNC_08001718",
            "code": "\nvoid FUNC_08001718(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001718": "FUNC_08001718"
            },
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800171a": {
            "entrypoint": "0x0800171a",
            "current_name": "process_input_0800171a",
            "code": "\nundefined4 processInput_0800171a(uint **inputArray)\n\n{\n  char character;\n  uint *ptr;\n  \n  character = *(char *)((int)inputArray + 0x3d);\n  ptr = ptrArrayValue;\n  if ((*(short *)(inputArray + 10) == 0) && (character == '!')) {\n    if ((ptr == (uint *)0x4) || ((ptr == (uint *)0x8 || (ptr == (uint *)0xffff0000)))) {\n      (*inputArray)[1] = (*inputArray)[1] & 0xfffff8ff;\n      **inputArray = **inputArray | 0x200;\n      status = (uint *)0x0;\n      *(undefined *)((int)inputArray + 0x3d) = 0x20;\n      if (*(char *)((int)inputArray + 0x3e) == '@') {\n        *(undefined *)((int)inputArray + 0x3e) = 0;\n        FUNC_08001718();\n      }\n      else {\n        *(undefined *)((int)inputArray + 0x3e) = 0;\n        FUNC_080015b6();\n      }\n    }\n    else {\n      (*inputArray)[1] = (*inputArray)[1] & 0xfffff8ff;\n      status = (uint *)0x11;\n      *(undefined *)((int)inputArray + 0x3e) = 0;\n      *(undefined *)((int)inputArray + 0x3d) = 0x20;\n      FUNC_080015b6();\n    }\n  }\n  else if ((character == '!') || ((*(char *)((int)inputArray + 0x3e) == '@' && (character == '\\\"')))) {\n    if (*(short *)((int)inputArray + 0x2a) == 0) {\n      (*inputArray)[1] = (*inputArray)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)inputArray + 0x3e) == '@') {\n      if (ptrArrayValue2 == (uint *)0x0) {\n        if (ptrArrayValue3 == (uint *)0x1) {\n          (*inputArray)[4] = (uint)ptrArrayValue4 & 0xff;\n          ptrArrayValue2 = (uint *)((int)ptrArrayValue2 + 2);\n        }\n        else {\n          (*inputArray)[4] = (uint)((int)ptrArrayValue4 << 0x10) >> 0x18;\n          ptrArrayValue2 = (uint *)((int)ptrArrayValue2 + 1);\n        }\n      }\n      else if (ptrArrayValue2 == (uint *)0x1) {\n        (*inputArray)[4] = (uint)ptrArrayValue4 & 0xff;\n        ptrArrayValue2 = (uint *)((int)ptrArrayValue2 + 1);\n      }\n      else if (ptrArrayValue2 == (uint *)0x2) {\n        if (*(char *)((int)inputArray + 0x3d) == '\\\"') {\n          **inputArray = **inputArray | 0x100;\n        }\n        else if (*(char *)((int)inputArray + 0x3d) == '!') {\n          ptr = inputArray[9];\n          inputArray[9] = (uint *)((int)ptr + 1);\n          (*inputArray)[4] = (uint)*(byte *)ptr;\n          *(short *)((int)inputArray + 0x2a) = *(short *)((int)inputArray + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      ptr = inputArray[9];\n      inputArray[9] = (uint *)((int)ptr + 1);\n      (*inputArray)[4] = (uint)*(byte *)ptr;\n      *(short *)((int)inputArray + 0x2a) = *(short *)((int)inputArray + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800171a": "process_input_0800171a",
                "param_1": "inputArray",
                "cVar1": "character",
                "puVar2": "ptr",
                "param_1[0xb]": "ptrArrayValue",
                "param_1[0xc]": "status",
                "param_1[0x14]": "ptrArrayValue2",
                "param_1[0x13]": "ptrArrayValue3",
                "param_1[0x12]": "ptrArrayValue4"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001864": {
            "entrypoint": "0x08001864",
            "current_name": "process_input_08001864",
            "code": "\nundefined4 processInput_08001864(uint **inputParams)\n\n{\n  uint *value;\n  \n  value = var3;\n  if (*(char *)((int)inputParams + 0x3d) == '!') {\n    if (*(short *)((int)inputParams + 0x2a) == 0) {\n      if (((value == (uint *)0x4) || (value == (uint *)0x8)) || (value == (uint *)0xffff0000)) {\n        (*inputParams)[1] = (*inputParams)[1] & 0xfffff8ff;\n        **inputParams = **inputParams | 0x200;\n        inputParams[0xc] = (uint *)0x0;\n        *(undefined *)((int)inputParams + 0x3d) = 0x20;\n        if (*(char *)((int)inputParams + 0x3e) == '@') {\n          *(undefined *)((int)inputParams + 0x3e) = 0;\n          FUNC_08001718();\n        }\n        else {\n          *(undefined *)((int)inputParams + 0x3e) = 0;\n          FUNC_080015b6();\n        }\n      }\n      else {\n        (*inputParams)[1] = (*inputParams)[1] & 0xfffff8ff;\n        inputParams[0xc] = (uint *)0x11;\n        *(undefined *)((int)inputParams + 0x3e) = 0;\n        *(undefined *)((int)inputParams + 0x3d) = 0x20;\n        FUNC_080015b6();\n      }\n    }\n    else {\n      value = inputParams[9];\n      inputParams[9] = (uint *)((int)value + 1);\n      (*inputParams)[4] = (uint)*(byte *)value;\n      *(short *)((int)inputParams + 0x2a) = *(short *)((int)inputParams + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001864": "process_input_08001864",
                "param_1": "inputParams",
                "puVar1": "value",
                "param_1[0xb]": "var3"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001902": {
            "entrypoint": "0x08001902",
            "current_name": "FUNC_08001902",
            "code": "\nvoid FUNC_08001902(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001902": "FUNC_08001902"
            },
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001904": {
            "entrypoint": "0x08001904",
            "current_name": "process_string_08001904",
            "code": "\nundefined4 processString_08001904(uint **stringPointer)\n\n{\n  uint *tempPointer;\n  \n  if (*(char *)((int)stringPointer + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)stringPointer + 0x2a) < 4) {\n      if (*(ushort *)((int)stringPointer + 0x2a) < 2) {\n        **stringPointer = **stringPointer & 0xfffffbff;\n        (*stringPointer)[1] = (*stringPointer)[1] & 0xfffff8ff;\n        tempPointer = stringPointer[9];\n        stringPointer[9] = (uint *)((int)tempPointer + 1);\n        *(char *)tempPointer = (char)(*stringPointer)[4];\n        *(short *)((int)stringPointer + 0x2a) = *(short *)((int)stringPointer + 0x2a) + -1;\n        *(undefined *)((int)stringPointer + 0x3d) = 0x20;\n        stringPointer[0xc] = (uint *)0x0;\n        if (*(char *)((int)stringPointer + 0x3e) == '@') {\n          *(undefined *)((int)stringPointer + 0x3e) = 0;\n          FUNC_08001902();\n        }\n        else {\n          *(undefined *)((int)stringPointer + 0x3e) = 0;\n          FUNC_080015b8();\n        }\n      }\n    }\n    else {\n      tempPointer = stringPointer[9];\n      stringPointer[9] = (uint *)((int)tempPointer + 1);\n      *(char *)tempPointer = (char)(*stringPointer)[4];\n      *(short *)((int)stringPointer + 0x2a) = *(short *)((int)stringPointer + 0x2a) + -1;\n      if (*(short *)((int)stringPointer + 0x2a) == 3) {\n        (*stringPointer)[1] = (*stringPointer)[1] & 0xfffffbff;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001904": "process_string_08001904",
                "param_1": "stringPointer",
                "puVar1": "tempPointer"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080019a0": {
            "entrypoint": "0x080019a0",
            "current_name": "process_param_080019a0",
            "code": "\nundefined4 process_param_080019a0(uint **param_array)\n\n{\n  uint *ptr;\n  \n  if (*(short *)((int)param_array + 0x2a) == 4) {\n    (*param_array)[1] = (*param_array)[1] & 0xfffffbff;\n    ptr = param_array[9];\n    param_array[9] = (uint *)((int)ptr + 1);\n    *(char *)ptr = (char)(*param_array)[4];\n    *(short *)((int)param_array + 0x2a) = *(short *)((int)param_array + 0x2a) + -1;\n  }\n  else if (*(short *)((int)param_array + 0x2a) == 3) {\n    (*param_array)[1] = (*param_array)[1] & 0xfffffbff;\n    **param_array = **param_array & 0xfffffbff;\n    ptr = param_array[9];\n    param_array[9] = (uint *)((int)ptr + 1);\n    *(char *)ptr = (char)(*param_array)[4];\n    *(short *)((int)param_array + 0x2a) = *(short *)((int)param_array + 0x2a) + -1;\n  }\n  else if (*(short *)((int)param_array + 0x2a) == 2) {\n    if ((int)param_array[0xb] - 1U < 2) {\n      **param_array = **param_array & 0xfffffbff;\n      **param_array = **param_array | 0x100;\n    }\n    else {\n      **param_array = **param_array | 0x200;\n    }\n    ptr = param_array[9];\n    param_array[9] = (uint *)((int)ptr + 1);\n    *(char *)ptr = (char)(*param_array)[4];\n    *(short *)((int)param_array + 0x2a) = *(short *)((int)param_array + 0x2a) + -1;\n    ptr = param_array[9];\n    param_array[9] = (uint *)((int)ptr + 1);\n    *(char *)ptr = (char)(*param_array)[4];\n    *(short *)((int)param_array + 0x2a) = *(short *)((int)param_array + 0x2a) + -1;\n    (*param_array)[1] = (*param_array)[1] & 0xfffffcff;\n    *(undefined *)((int)param_array + 0x3d) = 0x20;\n    param_array[0xc] = (uint *)0x0;\n    if (*(char *)((int)param_array + 0x3e) == '@') {\n      *(undefined *)((int)param_array + 0x3e) = 0;\n      FUNC_08001902();\n    }\n    else {\n      *(undefined *)((int)param_array + 0x3e) = 0;\n      FUNC_080015b8();\n    }\n  }\n  else {\n    ptr = param_array[9];\n    param_array[9] = (uint *)((int)ptr + 1);\n    *(char *)ptr = (char)(*param_array)[4];\n    *(short *)((int)param_array + 0x2a) = *(short *)((int)param_array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080019a0": "process_param_080019a0",
                "param_1": "param_array",
                "puVar1": "ptr"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001aac": {
            "entrypoint": "0x08001aac",
            "current_name": "FUNC_08001aac",
            "code": "\nvoid FUNC_08001aac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001aac": "FUNC_08001aac"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "process_data_08001ab0",
            "code": "\nvoid process_data_08001ab0(uint **data)\n\n{\n  int result;\n  uint *ptr1;\n  uint *ptr2;\n  \n  if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)data + 0x3d) != '`') && (((*data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n    }\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3e) = 0;\n  }\n  **data = **data & 0xfffff7ff;\n  ptr2 = *data;\n  if ((ptr2[1] & 0x800) == 0) {\n    if (*(char *)((int)data + 0x3d) == '`') {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[0x10] = (uint *)0x0;\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = data[9];\n        data[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      **data = **data & 0xfffffffe;\n      FUNC_08001aac(data);\n    }\n    else {\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = data[9];\n        data[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      check_and_modify_values_08003900(data);\n    }\n  }\n  else {\n    ptr2[1] = ptr2[1] & 0xfffff7ff;\n    if (*(char *)((int)data[0xd] + 0x35) == '\\x01') {\n      data[0xe][0x14] = (uint)&LAB_08001f3c_1;\n      result = update_param_08000f8c(data[0xe]);\n      if (result != 0) {\n        if (((*data)[5] & 0x40) != 0) {\n          ptr2 = data[9];\n          data[9] = (uint *)((int)ptr2 + 1);\n          *(char *)ptr2 = (char)(*data)[4];\n        }\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xe][0x14])();\n      }\n    }\n    else {\n      data[0xd][0x14] = (uint)&LAB_08001f3c_1;\n      result = update_param_08000f8c(data[0xd]);\n      if (result != 0) {\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xd][0x14])();\n      }\n    }\n  }\n  if ((*(char *)((int)data + 0x3d) == '(') && (((uint)data[0x10] & 4) != 0)) {\n    data[0xb] = (uint *)0xffff0000;\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    process_binary_080038d0(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "process_data_08001ab0",
                "param_1": "data",
                "iVar1": "result",
                "puVar2": "ptr1",
                "puVar3": "ptr2"
            },
            "calling": [
                "FUN_08001e68",
                "FUN_08001bfc"
            ],
            "called": [
                "FUN_08000f8c",
                "FUN_080038d0",
                "FUN_08001aac",
                "FUN_08003900"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bfc": {
            "entrypoint": "0x08001bfc",
            "current_name": "process_param_array_08001bfc",
            "code": "\nundefined4 process_param_array_08001bfc(uint **param_array)\n\n{\n  char char_var;\n  uint *ptr_var1;\n  uint *ptr_var2;\n  \n  char_var = *(char *)((int)param_array + 0x3d);\n  (*param_array)[1] = (*param_array)[1] & 0xfffff8ff;\n  **param_array = **param_array | 1;\n  **param_array = **param_array & 0xfffffbff;\n  ptr_var1 = *param_array;\n  if ((ptr_var1[1] & 0x800) != 0) {\n    if ((*(char *)((int)param_array + 0x3d) == '\\\"') || (*(char *)((int)param_array + 0x3d) == '*')) {\n      *(short *)((int)param_array + 0x2a) = (short)*(undefined4 *)(*param_array[0xe] + 4);\n    }\n    else {\n      *(short *)((int)param_array + 0x2a) = (short)*(undefined4 *)(*param_array[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)param_array + 0x2a) != 0) {\n    if ((ptr_var1[5] & 4) != 0) {\n      ptr_var2 = param_array[9];\n      param_array[9] = (uint *)((int)ptr_var2 + 1);\n      *(char *)ptr_var2 = (char)ptr_var1[4];\n      *(short *)((int)param_array + 0x2a) = *(short *)((int)param_array + 0x2a) + -1;\n    }\n    if (((*param_array)[5] & 0x40) != 0) {\n      ptr_var1 = param_array[9];\n      param_array[9] = (uint *)((int)ptr_var1 + 1);\n      *(char *)ptr_var1 = (char)(*param_array)[4];\n      *(short *)((int)param_array + 0x2a) = *(short *)((int)param_array + 0x2a) + -1;\n    }\n    param_array[0x10] = (uint *)((uint)param_array[0x10] | 4);\n  }\n  if (param_array[0x10] == (uint *)0x0) {\n    if (((char_var == '(') || (char_var == '*')) || (char_var == ')')) {\n      param_array[0xb] = (uint *)0xffff0000;\n      param_array[0xc] = (uint *)0x0;\n      *(undefined *)((int)param_array + 0x3d) = 0x20;\n      *(undefined *)((int)param_array + 0x3e) = 0;\n      process_binary_080038d0();\n    }\n    else if ((param_array[0xc] == (uint *)0x22) || (char_var == '\\\"')) {\n      param_array[0xc] = (uint *)0x0;\n      *(undefined *)((int)param_array + 0x3d) = 0x20;\n      *(undefined *)((int)param_array + 0x3e) = 0;\n      FUNC_0800160c();\n    }\n  }\n  else {\n    process_data_08001ab0();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001bfc": "process_param_array_08001bfc",
                "param_1": "param_array",
                "cVar1": "char_var",
                "puVar2": "ptr_var1",
                "puVar3": "ptr_var2"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_0800160c",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d00": {
            "entrypoint": "0x08001d00",
            "current_name": "process_input_08001d00",
            "code": "\nvoid process_input_08001d00(int *input_data)\n\n{\n  int input_value;\n  uint condition_value_1;\n  uint condition_value_2;\n  uint condition_value_3;\n  \n  input_value = *input_data;\n  condition_value_3 = *(uint *)(input_value + 0x18);\n  condition_value_1 = *(uint *)(input_value + 0x14);\n  condition_value_2 = *(uint *)(input_value + 4);\n  if ((*(char *)((int)input_data + 0x3e) == '\\x10') || (*(char *)((int)input_data + 0x3e) == '@')) {\n    if (((condition_value_1 & 0x10001) == 0) || ((condition_value_2 & 0x200) == 0)) {\n      if (((condition_value_1 & 0x10008) == 0) || ((condition_value_2 & 0x200) == 0)) {\n        if (((condition_value_1 & 0x10002) != 0) && ((condition_value_2 & 0x200) != 0)) {\n          set_flags_based_on_conditions_08001256(input_data);\n        }\n      }\n      else {\n        set_uint_value_0800124a(input_data);\n      }\n    }\n    else {\n      process_param_080011c0(input_data);\n    }\n    if ((condition_value_3 & 0x100004) == 0) {\n      if ((((condition_value_1 & 0x10040) != 0) && ((condition_value_2 & 0x400) != 0)) && ((condition_value_1 & 0x10004) == 0)) {\n        process_string_08001904(input_data);\n        return;\n      }\n      if (((condition_value_1 & 0x10004) != 0) && ((condition_value_2 & 0x200) != 0)) {\n        process_param_080019a0(input_data);\n        return;\n      }\n    }\n    else {\n      if ((((condition_value_1 & 0x10080) != 0) && ((condition_value_2 & 0x400) != 0)) && ((condition_value_1 & 0x10004) == 0)) {\n        process_input_08001d00_0800171a(input_data);\n        return;\n      }\n      if (((condition_value_1 & 0x10004) != 0) && ((condition_value_2 & 0x200) != 0)) {\n        process_input_08001d00_08001864(input_data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((condition_value_1 & 0x10002) != 0) && ((condition_value_2 & 0x200) != 0)) {\n      process_input_08001d00_0800165a();\n      return;\n    }\n    if (((condition_value_1 & 0x10010) != 0) && ((condition_value_2 & 0x200) != 0)) {\n      process_param_array_08001bfc(input_data);\n      return;\n    }\n    if ((condition_value_3 & 0x100004) == 0) {\n      if ((((condition_value_1 & 0x10040) != 0) && ((condition_value_2 & 0x400) != 0)) && ((condition_value_1 & 0x10004) == 0)) {\n        update_data_0800160e(input_data);\n        return;\n      }\n      if (((condition_value_1 & 0x10004) != 0) && ((condition_value_2 & 0x200) != 0)) {\n        update_array_element_08001440(input_data);\n      }\n    }\n    else {\n      if ((((condition_value_1 & 0x10080) != 0) && ((condition_value_2 & 0x400) != 0)) && ((condition_value_1 & 0x10004) == 0)) {\n        extract_byte_and_process_080015bc(input_data);\n        return;\n      }\n      if (((condition_value_1 & 0x10004) != 0) && ((condition_value_2 & 0x200) != 0)) {\n        update_byte_value_08001420(input_data);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d00": "process_input_08001d00",
                "param_1": "input_data",
                "iVar1": "input_value",
                "uVar2": "condition_value_1",
                "uVar3": "condition_value_2",
                "uVar4": "condition_value_3"
            },
            "calling": [],
            "called": [
                "FUN_08001440",
                "FUN_080019a0",
                "FUN_080015bc",
                "FUN_0800165a",
                "FUN_0800160e",
                "FUN_0800171a",
                "FUN_08001256",
                "FUN_08001420",
                "FUN_08001904",
                "FUN_0800124a",
                "FUN_080011c0",
                "FUN_08001bfc",
                "FUN_08001864"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e68": {
            "entrypoint": "0x08001e68",
            "current_name": "process_flags_08001e68",
            "code": "\nvoid process_flags_08001e68(uint **param_array)\n\n{\n  char char_val;\n  uint *ptr;\n  uint flag1;\n  uint flag2;\n  \n  ptr = *param_array;\n  flag1 = ptr[5];\n  flag2 = ptr[1];\n  if (((flag1 & 0x10100) != 0) && ((flag2 & 0x100) != 0)) {\n    param_array[0x10] = (uint *)((uint)param_array[0x10] | 1);\n    ptr[5] = 0xfffffeff;\n  }\n  if (((flag1 & 0x10200) != 0) && ((flag2 & 0x100) != 0)) {\n    param_array[0x10] = (uint *)((uint)param_array[0x10] | 2);\n    (*param_array)[5] = 0xfffffdff;\n  }\n  if (((flag1 & 0x10400) != 0) && ((flag2 & 0x100) != 0)) {\n    char_val = *(char *)((int)param_array + 0x3d);\n    if (((*(char *)((int)param_array + 0x3e) == ' ') && (*(short *)((int)param_array + 0x2a) == 0)) &&\n       (((char_val == '!' || (char_val == ')')) || ((char_val == '(' && (param_array[0xc] == (uint *)0x21)))))) {\n      process_param_array(param_array);\n    }\n    else {\n      param_array[0x10] = (uint *)((uint)param_array[0x10] | 4);\n      if (*(char *)((int)param_array + 0x3e) == '\\x10') {\n        **param_array = **param_array | 0x200;\n      }\n      (*param_array)[5] = 0xfffffbff;\n    }\n  }\n  if (((flag1 & 0x10800) != 0) && ((flag2 & 0x100) != 0)) {\n    param_array[0x10] = (uint *)((uint)param_array[0x10] | 8);\n    (*param_array)[5] = 0xfffff7ff;\n  }\n  if (param_array[0x10] != (uint *)0x0) {\n    process_data(param_array);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e68": "process_flags_08001e68",
                "param_1": "param_array",
                "uVar3": "flag1",
                "uVar4": "flag2",
                "cVar1": "char_val",
                "puVar2": "ptr",
                "process_param_array_08001684": "process_param_array",
                "process_data_08001ab0": "process_data"
            },
            "calling": [],
            "called": [
                "FUN_08001ab0",
                "FUN_08001684"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f9c": {
            "entrypoint": "0x08001f9c",
            "current_name": "check_data_values_08001f9c",
            "code": "\n\n\nundefined4 check_data_values_08001f9c(void)\n\n{\n  int prev_value;\n  int current_value;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_420e0040 = 1;\n  prev_value = get_dat_value_08000e30();\n  do {\n    if ((_DAT_40007004 & 0x10000) != 0) {\n      _DAT_420e0044 = 1;\n      prev_value = get_dat_value_08000e30();\n      do {\n        if ((_DAT_40007004 & 0x20000) != 0) {\n          return 0;\n        }\n        current_value = get_dat_value_08000e30();\n      } while ((uint)(current_value - prev_value) < 0x3e9);\n      return 3;\n    }\n    current_value = get_dat_value_08000e30();\n  } while ((uint)(current_value - prev_value) < 0x3e9);\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001f9c": "check_data_values_08001f9c",
                "iVar1": "prev_value",
                "iVar2": "current_value"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800201c": {
            "entrypoint": "0x0800201c",
            "current_name": "check_flag_status_0800201c",
            "code": "\n\n\nundefined4 checkFlagStatus_0800201c(uint *flags)\n\n{\n  int startTime;\n  int currentTime;\n  undefined4 result;\n  bool isFirstTime;\n  \n  if (flags == (uint *)0x0) {\n    return 1;\n  }\n  if ((*flags & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) != 0)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (flags[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (flags[1] == 0x10000) {\n        _DAT_40023800 = _DAT_40023800 | 0x10000;\n      }\n      else if (flags[1] == 0x50000) {\n        _DAT_40023800 = _DAT_40023800 | 0x50000;\n      }\n      else {\n        _DAT_40023800 = _DAT_40023800 & 0xfffaffff;\n      }\n      if (flags[1] == 0) {\n        startTime = getDatValue();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          currentTime = getDatValue();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startTime = getDatValue();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          currentTime = getDatValue();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (flags[3] != 1)) {\n        return 1;\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | flags[4] << 3;\n    }\n    else if (flags[3] == 0) {\n      _DAT_42470000 = 0;\n      startTime = getDatValue();\n      while ((_DAT_40023800 & 2) != 0) {\n        currentTime = getDatValue();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      startTime = getDatValue();\n      while ((_DAT_40023800 & 2) == 0) {\n        currentTime = getDatValue();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | flags[4] << 3;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[5] == 0) {\n      _DAT_42470e80 = 0;\n      startTime = getDatValue();\n      while ((_DAT_40023874 & 2) != 0) {\n        currentTime = getDatValue();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      startTime = getDatValue();\n      while ((_DAT_40023874 & 2) == 0) {\n        currentTime = getDatValue();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*flags & 4) != 0) {\n    isFirstTime = (_DAT_40023840 & 0x10000000) == 0;\n    if (isFirstTime) {\n      _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = getDatValue();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = getDatValue();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (flags[2] == 1) {\n      _DAT_40023870 = _DAT_40023870 | 1;\n    }\n    else if (flags[2] == 5) {\n      _DAT_40023870 = _DAT_40023870 | 5;\n    }\n    else {\n      _DAT_40023870 = _DAT_40023870 & 0xfffffffa;\n    }\n    if (flags[2] == 0) {\n      startTime = getDatValue();\n      while ((_DAT_40023870 & 2) != 0) {\n        currentTime = getDatValue();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startTime = getDatValue();\n      while ((_DAT_40023870 & 2) == 0) {\n        currentTime = getDatValue();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (isFirstTime) {\n      _DAT_40023840 = _DAT_40023840 & 0xefffffff;\n    }\n  }\n  if (flags[6] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40023808 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (flags[6] == 2) {\n    _DAT_42470060 = 0;\n    startTime = getDatValue();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        _DAT_40023804 =\n             flags[7] | flags[8] | flags[9] << 6 | ((flags[10] >> 1) - 1) * 0x10000 |\n             flags[0xb] << 0x18;\n        _DAT_42470060 = 1;\n        startTime = getDatValue();\n        do {\n          if ((_DAT_40023800 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentTime = getDatValue();\n        } while ((uint)(currentTime - startTime) < 3);\n        return 3;\n      }\n      currentTime = getDatValue();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42470060 = 0;\n    startTime = getDatValue();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentTime = getDatValue();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800201c": "check_flag_status_0800201c",
                "param_1": "flags",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "result",
                "bVar4": "isFirstTime",
                "get_dat_value_08000e30": "getDatValue"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023b4": {
            "entrypoint": "0x080023b4",
            "current_name": "calculate_frequency_080023b4",
            "code": "\n\n\nuint calculate_frequency_080023b4(void)\n\n{\n  undefined4 input_val;\n  uint result;\n  \n  if ((_DAT_40023808 & 0xc) == 4) {\n    return 8000000;\n  }\n  if ((_DAT_40023808 & 0xc) != 8) {\n    return 16000000;\n  }\n  if ((_DAT_40023804 & 0x400000) == 0) {\n    result = (_DAT_40023804 << 0x11) >> 0x17;\n    result = calculate_result_080002d0(result * 16000000,\n                         (((uint)(result * 0x20 < result) * -0x3f -\n                          (uint)(result * 0x7c0 < result * 0x1f)) * 8 +\n                         (uint)CARRY4(result * 0x3d08,result)) * 0x400 | result * 0x3d09 >> 0x16,\n                         _DAT_40023804 & 0x3f,0,input_val);\n  }\n  else {\n    result = (_DAT_40023804 << 0x11) >> 0x17;\n    result = calculate_result_080002d0(result * 8000000,\n                         (((uint)(result * 0x20 < result) * -0x3f -\n                          (uint)(result * 0x7c0 < result * 0x1f)) * 8 +\n                         (uint)CARRY4(result * 0x3d08,result)) * 0x200,_DAT_40023804 & 0x3f,0,input_val);\n  }\n  return result / ((((_DAT_40023804 << 0xe) >> 0x1e) + 1) * 2);\n}\n\n",
            "renaming": {
                "FUN_080023b4": "calculate_frequency_080023b4",
                "in_r3": "input_val",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08002488"
            ],
            "called": [
                "FUN_080002d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002488": {
            "entrypoint": "0x08002488",
            "current_name": "initialize_settings_08002488",
            "code": "\n\n\nundefined4 initialize_settings_08002488(uint *settings_flags,uint new_setting)\n\n{\n  int starting_time;\n  int current_time;\n  uint frequency;\n  \n  if (settings_flags == (uint *)0x0) {\n    return 1;\n  }\n  if ((_DAT_40023c00 & 0xf) < new_setting) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)new_setting);\n    if (new_setting != (new_setting & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*settings_flags & 2) != 0) {\n    if ((*settings_flags & 4) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0x1c00;\n    }\n    if ((*settings_flags & 8) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0xe000;\n    }\n    _DAT_40023808 = _DAT_40023808 & 0xffffff0f | settings_flags[2];\n  }\n  if ((*settings_flags & 1) != 0) {\n    frequency = settings_flags[1];\n    if (frequency == 1) {\n      if ((_DAT_40023800 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if (frequency - 2 < 2) {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 1;\n      }\n    }\n    else if ((_DAT_40023800 & 2) == 0) {\n      return 1;\n    }\n    _DAT_40023808 = frequency | _DAT_40023808 & 0xfffffffc;\n    starting_time = get_elapsed_time();\n    while( true ) {\n      if ((_DAT_40023808 & 0xc) == settings_flags[1] * 4) break;\n      current_time = get_elapsed_time();\n      if (5000 < (uint)(current_time - starting_time)) {\n        return 3;\n      }\n    }\n  }\n  if (new_setting < (_DAT_40023c00 & 0xf)) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)new_setting);\n    if (new_setting != (new_setting & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*settings_flags & 4) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffffe3ff | settings_flags[3];\n  }\n  if ((*settings_flags & 8) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffff1fff | settings_flags[4] << 3;\n  }\n  frequency = calculate_frequency();\n  DAT_2000002c = frequency >> (&DAT_08005dfc)[(_DAT_40023808 << 0x18) >> 0x1c];\n  initialize_and_apply_mask(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002488": "initialize_settings_08002488",
                "param_1": "settings_flags",
                "param_2": "new_setting",
                "iVar1": "starting_time",
                "iVar2": "current_time",
                "uVar3": "frequency",
                "get_dat_value_08000e30": "get_elapsed_time",
                "calculate_frequency_080023b4": "calculate_frequency",
                "initialize_and_apply_mask_08000d98": "initialize_and_apply_mask"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30",
                "FUN_08000d98",
                "FUN_080023b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e0": {
            "entrypoint": "0x080025e0",
            "current_name": "get_global_value_080025e0",
            "code": "\nundefined4 get_global_value_080025e0(void)\n\n{\n  return DAT_2000002c;\n}\n\n",
            "renaming": {
                "FUN_080025e0": "get_global_value_080025e0"
            },
            "calling": [
                "FUN_0800260c",
                "FUN_080025ec",
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ec": {
            "entrypoint": "0x080025ec",
            "current_name": "calculate_shifted_value_080025ec",
            "code": "\n\n\nuint calculateShiftedValue_080025ec(void)\n\n{\n  uint globalValue;\n  \n  globalValue = getGlobalValue();\n  return globalValue >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x13) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_080025ec": "calculate_shifted_value_080025ec",
                "uVar1": "globalValue",
                "get_global_value_080025e0": "getGlobalValue"
            },
            "calling": [
                "FUN_080029c8"
            ],
            "called": [
                "FUN_080025e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800260c": {
            "entrypoint": "0x0800260c",
            "current_name": "get_shifted_global_value_0800260c",
            "code": "\n\n\nuint get_shifted_global_value_0800260c(void)\n\n{\n  uint global_value;\n  \n  global_value = get_global_value();\n  return global_value >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x10) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_0800260c": "get_shifted_global_value_0800260c",
                "uVar1": "global_value",
                "get_global_value_080025e0": "get_global_value"
            },
            "calling": [
                "FUN_080029c8"
            ],
            "called": [
                "FUN_080025e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800262c": {
            "entrypoint": "0x0800262c",
            "current_name": "execute_and_update_flags_0800262c",
            "code": "\n\n\nvoid execute_and_update_flags_0800262c(int *callback_data)\n\n{\n  if (((*(uint *)(*callback_data + 0xc) & 0x100) != 0) && ((*(uint *)(*callback_data + 8) & 0x1000) != 0)) {\n    execute_callback_function();\n    *(uint *)(*callback_data + 0xc) = *(uint *)(*callback_data + 0xc) & 0xff | 0xfffffe7f;\n  }\n  if (((*(uint *)(*callback_data + 0xc) & 0x200) != 0) && ((*(uint *)(*callback_data + 8) & 0x2000) != 0)) {\n    FUNC_0800268c(callback_data);\n    *(uint *)(*callback_data + 0xc) = *(uint *)(*callback_data + 0xc) & 0xff | 0xfffffd7f;\n  }\n  _DAT_40013c14 = 0x20000;\n  *(undefined *)((int)callback_data + 0x1d) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800262c": "execute_and_update_flags_0800262c",
                "param_1": "callback_data",
                "execute_callback_function_08003594": "execute_callback_function"
            },
            "calling": [],
            "called": [
                "FUN_08003594",
                "FUN_0800268c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800268c": {
            "entrypoint": "0x0800268c",
            "current_name": "FUNC_0800268c",
            "code": "\nvoid FUNC_0800268c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268c": "FUNC_0800268c"
            },
            "calling": [
                "FUN_0800262c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800268e": {
            "entrypoint": "0x0800268e",
            "current_name": "update_param_data_0800268e",
            "code": "\nvoid update_param_data_0800268e(uint **param_data)\n\n{\n  uint *current_data;\n  \n  *(undefined *)((int)param_data + 0x39) = 2;\n  current_data = *param_data;\n  if ((current_data[8] & 0x1111) == 0) {\n    if ((current_data[8] & 0x444) == 0) {\n      *current_data = *current_data & 0xfffffffe;\n    }\n  }\n  update_data_based_on_param(param_data);\n  *(undefined *)((int)param_data + 0x39) = 0;\n  *(undefined *)(param_data + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268e": "update_param_data_0800268e",
                "param_1": "param_data",
                "puVar1": "current_data",
                "update_data_based_on_param_0800340c": "update_data_based_on_param"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_0800340c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026c8": {
            "entrypoint": "0x080026c8",
            "current_name": "FUNC_080026c8",
            "code": "\nvoid FUNC_080026c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026c8": "FUNC_080026c8"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ca": {
            "entrypoint": "0x080026ca",
            "current_name": "FUNC_080026ca",
            "code": "\nvoid FUNC_080026ca(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ca": "FUNC_080026ca"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026cc": {
            "entrypoint": "0x080026cc",
            "current_name": "FUNC_080026cc",
            "code": "\nvoid FUNC_080026cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026cc": "FUNC_080026cc"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ce": {
            "entrypoint": "0x080026ce",
            "current_name": "process_flags_080026ce",
            "code": "\nvoid processFlags_080026ce(int *inputArray)\n\n{\n  int currentElement;\n  \n  currentElement = *inputArray;\n  if (((*(uint *)(currentElement + 0x10) & 2) != 0) && ((*(uint *)(currentElement + 0xc) & 2) != 0)) {\n    *(undefined4 *)(currentElement + 0x10) = 0xfffffffd;\n    *(undefined *)(inputArray + 6) = 1;\n    if ((*(uint *)(*inputArray + 0x18) & 3) == 0) {\n      executeCallbackIfTrue();\n      FUNC_080026ca(inputArray);\n    }\n    else {\n      FUNC_080026c8();\n    }\n    *(undefined *)(inputArray + 6) = 0;\n  }\n  currentElement = *inputArray;\n  if (((*(uint *)(currentElement + 0x10) & 4) != 0) && ((*(uint *)(currentElement + 0xc) & 4) != 0)) {\n    *(undefined4 *)(currentElement + 0x10) = 0xfffffffb;\n    *(undefined *)(inputArray + 6) = 2;\n    if ((*(uint *)(*inputArray + 0x18) & 0x300) == 0) {\n      executeCallbackIfTrue(inputArray);\n      FUNC_080026ca(inputArray);\n    }\n    else {\n      FUNC_080026c8(inputArray);\n    }\n    *(undefined *)(inputArray + 6) = 0;\n  }\n  currentElement = *inputArray;\n  if (((*(uint *)(currentElement + 0x10) & 8) != 0) && ((*(uint *)(currentElement + 0xc) & 8) != 0)) {\n    *(undefined4 *)(currentElement + 0x10) = 0xfffffff7;\n    *(undefined *)(inputArray + 6) = 4;\n    if ((*(uint *)(*inputArray + 0x1c) & 3) == 0) {\n      executeCallbackIfTrue(inputArray);\n      FUNC_080026ca(inputArray);\n    }\n    else {\n      FUNC_080026c8(inputArray);\n    }\n    *(undefined *)(inputArray + 6) = 0;\n  }\n  currentElement = *inputArray;\n  if (((*(uint *)(currentElement + 0x10) & 0x10) != 0) && ((*(uint *)(currentElement + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(currentElement + 0x10) = 0xffffffef;\n    *(undefined *)(inputArray + 6) = 8;\n    if ((*(uint *)(*inputArray + 0x1c) & 0x300) == 0) {\n      executeCallbackIfTrue(inputArray);\n      FUNC_080026ca(inputArray);\n    }\n    else {\n      FUNC_080026c8(inputArray);\n    }\n    *(undefined *)(inputArray + 6) = 0;\n  }\n  currentElement = *inputArray;\n  if (((*(uint *)(currentElement + 0x10) & 1) != 0) && ((*(uint *)(currentElement + 0xc) & 1) != 0)) {\n    *(undefined4 *)(currentElement + 0x10) = 0xfffffffe;\n    executeSubroutine(inputArray);\n  }\n  currentElement = *inputArray;\n  if (((*(uint *)(currentElement + 0x10) & 0x80) != 0) && ((*(uint *)(currentElement + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(currentElement + 0x10) = 0xffffff7f;\n    FUNC_0800293e(inputArray);\n  }\n  currentElement = *inputArray;\n  if (((*(uint *)(currentElement + 0x10) & 0x40) != 0) && ((*(uint *)(currentElement + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(currentElement + 0x10) = 0xffffffbf;\n    FUNC_080026cc(inputArray);\n  }\n  currentElement = *inputArray;\n  if (((*(uint *)(currentElement + 0x10) & 0x20) != 0) && ((*(uint *)(currentElement + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(currentElement + 0x10) = 0xffffffdf;\n    FUNC_0800293c(inputArray);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ce": "process_flags_080026ce",
                "param_1": "inputArray",
                "iVar1": "currentElement",
                "execute_callback_if_true_08003754": "executeCallbackIfTrue",
                "execute_subroutine_0800376e": "executeSubroutine"
            },
            "calling": [
                "FUN_0800377c"
            ],
            "called": [
                "FUN_0800376e",
                "FUN_0800293c",
                "FUN_080026cc",
                "FUN_08003754",
                "FUN_080026c8",
                "FUN_080026ca",
                "FUN_0800293e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002848": {
            "entrypoint": "0x08002848",
            "current_name": "update_bit_at_index_08002848",
            "code": "\nvoid updateBitAtIndex_08002848(int baseAddress,uint bitIndex,int bitValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitIndex & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | bitValue << (bitIndex & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002848": "update_bit_at_index_08002848",
                "param_1": "baseAddress",
                "param_2": "bitIndex",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_08002864"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002864": {
            "entrypoint": "0x08002864",
            "current_name": "update_and_check_bits_08002864",
            "code": "\nundefined4 updateAndCheckBits_08002864(uint **inputPtr,undefined4 bitIndex)\n\n{\n  bool isMagicAddress;\n  uint *addressPointer;\n  \n  update_bit_at_index_08002848(*inputPtr,bitIndex,0);\n  addressPointer = *inputPtr;\n  if (addressPointer == (uint *)0x40010000) {\n    isMagicAddress = true;\n  }\n  else if (addressPointer == (uint *)0x40010400) {\n    isMagicAddress = true;\n  }\n  else {\n    isMagicAddress = false;\n  }\n  if (((isMagicAddress) && ((addressPointer[8] & 0x1111) == 0)) && ((addressPointer[8] & 0x444) == 0)) {\n    addressPointer[0x11] = addressPointer[0x11] & 0xffff7fff;\n  }\n  addressPointer = *inputPtr;\n  if (((addressPointer[8] & 0x1111) == 0) && ((addressPointer[8] & 0x444) == 0)) {\n    *addressPointer = *addressPointer & 0xfffffffe;\n  }\n  *(undefined *)((int)inputPtr + 0x39) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002864": "update_and_check_bits_08002864",
                "param_1": "inputPtr",
                "param_2": "bitIndex",
                "bVar1": "isMagicAddress",
                "puVar2": "addressPointer"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_08002848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028d4": {
            "entrypoint": "0x080028d4",
            "current_name": "update_bitfield_080028d4",
            "code": "\nvoid updateBitfield_080028d4(int baseAddress,uint bitPosition,int value)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) bitwiseAnd ~(4 << (bitPosition bitwiseAnd 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | value << (bitPosition bitwiseAnd 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080028d4": "update_bitfield_080028d4",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "value",
                "&": "bitwiseAnd"
            },
            "calling": [
                "FUN_080028f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028f0": {
            "entrypoint": "0x080028f0",
            "current_name": "FUNC_080028f0",
            "code": "\nundefined4 FUNC_080028f0(uint **param_1,undefined4 param_2)\n\n{\n  uint *puVar1;\n  \n  update_bitfield_080028d4(*param_1,param_2,0);\n  puVar1 = *param_1;\n  if (((puVar1[8] & 0x1111) == 0) && ((puVar1[8] & 0x444) == 0)) {\n    puVar1[0x11] = puVar1[0x11] & 0xffff7fff;\n  }\n  puVar1 = *param_1;\n  if (((puVar1[8] & 0x1111) == 0) && ((puVar1[8] & 0x444) == 0)) {\n    *puVar1 = *puVar1 & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028f0": "FUNC_080028f0"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_080028d4"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800293c": {
            "entrypoint": "0x0800293c",
            "current_name": "FUNC_0800293c",
            "code": "\nvoid FUNC_0800293c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293c": "FUNC_0800293c"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800293e": {
            "entrypoint": "0x0800293e",
            "current_name": "FUNC_0800293e",
            "code": "\nvoid FUNC_0800293e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293e": "FUNC_0800293e"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002940": {
            "entrypoint": "0x08002940",
            "current_name": "clear_bits_08002940",
            "code": "\nvoid clearBits_08002940(int *input)\n\n{\n  *(uint *)(*input + 0xc) = *(uint *)(*input + 0xc) & 0xfffffedf;\n  *(uint *)(*input + 0x14) = *(uint *)(*input + 0x14) & 0xfffffffe;\n  *(undefined *)((int)input + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002940": "clear_bits_08002940",
                "param_1": "input"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800295c": {
            "entrypoint": "0x0800295c",
            "current_name": "process_param_0800295c",
            "code": "\nundefined4 processParam_0800295c(int *param)\n\n{\n  short remainingIterations;\n  byte *bytePtr;\n  \n  if (*(char *)((int)param + 0x39) != '!') {\n    return 2;\n  }\n  if (param[2] == 0x1000) {\n    *(uint *)(*param + 4) = *(ushort *)param[8] & 0x1ff;\n    if (param[4] == 0) {\n      param[8] = param[8] + 2;\n    }\n    else {\n      param[8] = param[8] + 1;\n    }\n  }\n  else {\n    bytePtr = (byte *)param[8];\n    param[8] = (int)(bytePtr + 1);\n    *(uint *)(*param + 4) = (uint)*bytePtr;\n  }\n  remainingIterations = *(short *)((int)param + 0x26) + -1;\n  *(short *)((int)param + 0x26) = remainingIterations;\n  if (remainingIterations == 0) {\n    *(uint *)(*param + 0xc) = *(uint *)(*param + 0xc) & 0xffffff7f;\n    *(uint *)(*param + 0xc) = *(uint *)(*param + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800295c": "process_param_0800295c",
                "param_1": "param",
                "sVar1": "remainingIterations",
                "pbVar2": "bytePtr"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029c8": {
            "entrypoint": "0x080029c8",
            "current_name": "update_configuration_080029c8",
            "code": "\nvoid updateConfiguration_080029c8(int *config)\n\n{\n  int shiftedValue1;\n  int shiftedValue2;\n  int shiftedValue3;\n  int shiftedValue4;\n  int shiftedValue5;\n  int value1;\n  int value2;\n  int value3;\n  int value4;\n  int ptrValue;\n  \n  *(uint *)(*config + 0x10) = *(uint *)(*config + 0x10) & 0xffffcfff | config[3];\n  *(uint *)(*config + 0xc) =\n       *(uint *)(*config + 0xc) & 0xffff69f3 | config[2] | config[4] | config[5] | config[7];\n  *(uint *)(*config + 0x14) = *(uint *)(*config + 0x14) & 0xfffffcff | config[6];\n  if (config[7] == 0x8000) {\n    ptrValue = *config;\n    if ((ptrValue != 0x40011000) && (ptrValue != 0x40011400)) {\n      shiftedValue1 = calculateShiftedValue();\n      value1 = config[1];\n      shiftedValue2 = calculateShiftedValue();\n      value2 = config[1];\n      shiftedValue3 = calculateShiftedValue();\n      value3 = config[1];\n      shiftedValue4 = calculateShiftedValue();\n      value4 = config[1];\n      shiftedValue5 = calculateShiftedValue();\n      *(uint *)(ptrValue + 8) =\n           ((uint)((int)((ulonglong)\n                         (((uint)(shiftedValue4 * 0x19) / (uint)(value4 << 1) +\n                          (int)(((ulonglong)(uint)(shiftedValue5 * 0x19) /\n                                (ulonglong)(uint)(config[1] << 1)) / 100) * -100) * 8 + 0x32) *\n                         0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n           ((((uint)(shiftedValue2 * 0x19) / (uint)(value2 << 1) +\n             (int)(((ulonglong)(uint)(shiftedValue3 * 0x19) / (ulonglong)(uint)(value3 << 1)) / 100) * -100)\n             * 8 + 0x32) / 100 & 0xf8) * 2 +\n           (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(value1 << 1)) / 100) * 0x10;\n      return;\n    }\n    shiftedValue1 = getShiftedGlobalValue();\n    value1 = config[1];\n    shiftedValue2 = getShiftedGlobalValue();\n    value2 = config[1];\n    shiftedValue3 = getShiftedGlobalValue();\n    value3 = config[1];\n    shiftedValue4 = getShiftedGlobalValue();\n    value4 = config[1];\n    shiftedValue5 = getShiftedGlobalValue();\n    *(uint *)(ptrValue + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(shiftedValue4 * 0x19) / (uint)(value4 << 1) +\n                        (int)(((ulonglong)(uint)(shiftedValue5 * 0x19) / (ulonglong)(uint)(config[1] << 1))\n                             / 100) * -100) * 8 + 0x32) * 0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n         ((((uint)(shiftedValue2 * 0x19) / (uint)(value2 << 1) +\n           (int)(((ulonglong)(uint)(shiftedValue3 * 0x19) / (ulonglong)(uint)(value3 << 1)) / 100) * -100) *\n           8 + 0x32) / 100 & 0xf8) * 2 +\n         (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(value1 << 1)) / 100) * 0x10;\n    return;\n  }\n  ptrValue = *config;\n  if ((ptrValue != 0x40011000) && (ptrValue != 0x40011400)) {\n    shiftedValue1 = calculateShiftedValue();\n    value1 = config[1];\n    shiftedValue2 = calculateShiftedValue();\n    value2 = config[1];\n    shiftedValue3 = calculateShiftedValue();\n    value3 = config[1];\n    shiftedValue4 = calculateShiftedValue();\n    value4 = config[1];\n    shiftedValue5 = calculateShiftedValue();\n    *(uint *)(ptrValue + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(shiftedValue4 * 0x19) / (uint)(value4 << 2) +\n                        (int)(((ulonglong)(uint)(shiftedValue5 * 0x19) / (ulonglong)(uint)(config[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(shiftedValue2 * 0x19) / (uint)(value2 << 2) +\n           (int)(((ulonglong)(uint)(shiftedValue3 * 0x19) / (ulonglong)(uint)(value3 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(value1 << 2)) / 100) * 0x10;\n    return;\n  }\n  shiftedValue1 = getShiftedGlobalValue();\n  value1 = config[1];\n  shiftedValue2 = getShiftedGlobalValue();\n  value2 = config[1];\n  shiftedValue3 = getShiftedGlobalValue();\n  value3 = config[1];\n  shiftedValue4 = getShiftedGlobalValue();\n  value4 = config[1];\n  shiftedValue5 = getShiftedGlobalValue();\n  *(uint *)(ptrValue + 8) =\n       ((uint)((int)((ulonglong)\n                     (((uint)(shiftedValue4 * 0x19) / (uint)(value4 << 2) +\n                      (int)(((ulonglong)(uint)(shiftedValue5 * 0x19) / (ulonglong)(uint)(config[1] << 2)) /\n                           100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n       ((((uint)(shiftedValue2 * 0x19) / (uint)(value2 << 2) +\n         (int)(((ulonglong)(uint)(shiftedValue3 * 0x19) / (ulonglong)(uint)(value3 << 2)) / 100) * -100) *\n         0x10 + 0x32) / 100 & 0xf0) +\n       (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(value1 << 2)) / 100) * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029c8": "update_configuration_080029c8",
                "param_1": "config",
                "iVar1": "shiftedValue1",
                "iVar2": "shiftedValue2",
                "iVar3": "shiftedValue3",
                "iVar4": "shiftedValue4",
                "iVar5": "shiftedValue5",
                "iVar6": "value1",
                "iVar7": "value2",
                "iVar8": "value3",
                "iVar9": "value4",
                "iVar10": "ptrValue",
                "calculate_shifted_value_080025ec": "calculateShiftedValue",
                "get_shifted_global_value_0800260c": "getShiftedGlobalValue"
            },
            "calling": [
                "FUN_08002d72"
            ],
            "called": [
                "FUN_0800260c",
                "FUN_080025ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d0c": {
            "entrypoint": "0x08002d0c",
            "current_name": "check_params_and_modify_08002d0c",
            "code": "\nundefined4 checkParamsAndModify_08002d0c(uint **paramArray,uint bitFlags,uint expectedResult,int currentValue,uint maxDifference)\n\n{\n  int datValue;\n  \n  do {\n    if (((bitFlags & ~**paramArray) == 0) != expectedResult) {\n      return 0;\n    }\n  } while ((maxDifference == 0xffffffff) ||\n          ((maxDifference != 0 && (datValue = getDatValue(), (uint)(datValue - currentValue) <= maxDifference))));\n  (*paramArray)[3] = (*paramArray)[3] & 0xfffffe5f;\n  (*paramArray)[5] = (*paramArray)[5] & 0xfffffffe;\n  *(undefined *)((int)paramArray + 0x39) = 0x20;\n  *(undefined *)((int)paramArray + 0x3a) = 0x20;\n  *(undefined *)(paramArray + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002d0c": "check_params_and_modify_08002d0c",
                "param_1": "paramArray",
                "param_2": "bitFlags",
                "param_3": "expectedResult",
                "param_4": "currentValue",
                "param_5": "maxDifference",
                "iVar1": "datValue",
                "get_dat_value_08000e30": "getDatValue"
            },
            "calling": [
                "FUN_08002dd0"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d70": {
            "entrypoint": "0x08002d70",
            "current_name": "FUNC_08002d70",
            "code": "\nvoid FUNC_08002d70(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d70": "FUNC_08002d70"
            },
            "calling": [
                "FUN_08002d72"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d72": {
            "entrypoint": "0x08002d72",
            "current_name": "validate_and_update_configuration_08002d72",
            "code": "\nundefined4 validate_and_update_configuration_08002d72(int *config_ptr)\n\n{\n  if (config_ptr != (int *)0x0) {\n    if (*(char *)((int)config_ptr + 0x39) == '\\0') {\n      *(undefined *)(config_ptr + 0xe) = 0;\n      FUNC_08002d70();\n    }\n    *(undefined *)((int)config_ptr + 0x39) = 0x24;\n    *(uint *)(*config_ptr + 0xc) = *(uint *)(*config_ptr + 0xc) & 0xffffdfff;\n    update_configuration(config_ptr);\n    *(uint *)(*config_ptr + 0x10) = *(uint *)(*config_ptr + 0x10) & 0xffffb7ff;\n    *(uint *)(*config_ptr + 0x14) = *(uint *)(*config_ptr + 0x14) & 0xffffffd5;\n    *(uint *)(*config_ptr + 0xc) = *(uint *)(*config_ptr + 0xc) | 0x2000;\n    config_flag = 0;\n    *(undefined *)((int)config_ptr + 0x39) = 0x20;\n    *(undefined *)((int)config_ptr + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002d72": "validate_and_update_configuration_08002d72",
                "param_1": "config_ptr",
                "update_configuration_080029c8": "update_configuration",
                "param_1[0xf]": "config_flag"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [
                "FUN_080029c8",
                "FUN_08002d70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dd0": {
            "entrypoint": "0x08002dd0",
            "current_name": "process_data_08002dd0",
            "code": "\nundefined4 processData_08002dd0(int *data_ptr,ushort *data_buffer,int buffer_size,undefined4 param_4)\n\n{\n  int result;\n  undefined4 status;\n  \n  if (*(char *)((int)data_ptr + 0x39) == ' ') {\n    if (data_buffer == (ushort *)0x0) {\n      status = 1;\n    }\n    else if (buffer_size == 0) {\n      status = 1;\n    }\n    else if (*(char *)(data_ptr + 0xe) == '\\x01') {\n      status = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xe) = 1;\n      data_ptr[0xf] = 0;\n      *(undefined *)((int)data_ptr + 0x39) = 0x21;\n      status = getDatValue();\n      *(short *)(data_ptr + 9) = (short)buffer_size;\n      *(short *)((int)data_ptr + 0x26) = (short)buffer_size;\n      while (*(short *)((int)data_ptr + 0x26) != 0) {\n        *(short *)((int)data_ptr + 0x26) = *(short *)((int)data_ptr + 0x26) + -1;\n        if (data_ptr[2] == 0x1000) {\n          result = checkParamsAndModify(data_ptr,0x80,0,status,param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = *data_buffer & 0x1ff;\n          if (data_ptr[4] == 0) {\n            data_buffer = data_buffer + 1;\n          }\n          else {\n            data_buffer = (ushort *)((int)data_buffer + 1);\n          }\n        }\n        else {\n          result = checkParamsAndModify(data_ptr,0x80,0,status,param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = (uint)*(byte *)data_buffer;\n          data_buffer = (ushort *)((int)data_buffer + 1);\n        }\n      }\n      result = checkParamsAndModify(data_ptr,0x40,0,status,param_4);\n      if (result == 0) {\n        *(undefined *)((int)data_ptr + 0x39) = 0x20;\n        *(undefined *)(data_ptr + 0xe) = 0;\n        status = 0;\n      }\n      else {\n        status = 3;\n      }\n    }\n  }\n  else {\n    status = 2;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08002dd0": "process_data_08002dd0",
                "param_1": "data_ptr",
                "param_2": "data_buffer",
                "param_3": "buffer_size",
                "iVar1": "result",
                "uVar2": "status",
                "get_dat_value_08000e30": "getDatValue",
                "check_params_and_modify_08002d0c": "checkParamsAndModify",
                "param_1[2]": "data_ptr[2]",
                "param_1[4]": "data_ptr[4]"
            },
            "calling": [
                "FUN_08003d18"
            ],
            "called": [
                "FUN_08002d0c",
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002eb2": {
            "entrypoint": "0x08002eb2",
            "current_name": "validate_and_update_data_08002eb2",
            "code": "\nundefined4 validate_and_update_data_08002eb2(int *data,int value_1,int value_2)\n\n{\n  if (*(char *)((int)data + 0x39) != ' ') {\n    return 2;\n  }\n  if (value_1 == 0) {\n    return 1;\n  }\n  if (value_2 == 0) {\n    return 1;\n  }\n  if (*(char *)(data + 0xe) != '\\x01') {\n    data[8] = value_1;\n    *(short *)(data + 9) = (short)value_2;\n    *(short *)((int)data + 0x26) = (short)value_2;\n    data[0xf] = 0;\n    *(undefined *)((int)data + 0x39) = 0x21;\n    *(undefined *)(data + 0xe) = 0;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002eb2": "validate_and_update_data_08002eb2",
                "param_1": "data",
                "param_2": "value_1",
                "param_3": "value_2"
            },
            "calling": [
                "FUN_08003f48",
                "FUN_08003eac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efa": {
            "entrypoint": "0x08002efa",
            "current_name": "validate_and_update_parameters_08002efa",
            "code": "\nundefined4 validate_and_update_parameters_08002efa(int *parameter_array,int value1,int value2)\n\n{\n  if (*(char *)((int)parameter_array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(parameter_array + 0xe) != '\\x01') {\n    parameter_array[10] = value1;\n    *(short *)(parameter_array + 0xb) = (short)value2;\n    *(short *)((int)parameter_array + 0x2e) = (short)value2;\n    parameter_array[0xf] = 0;\n    *(undefined *)((int)parameter_array + 0x3a) = 0x22;\n    *(undefined *)(parameter_array + 0xe) = 0;\n    *(uint *)(*parameter_array + 0x14) = *(uint *)(*parameter_array + 0x14) | 1;\n    *(uint *)(*parameter_array + 0xc) = *(uint *)(*parameter_array + 0xc) | 0x120;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002efa": "validate_and_update_parameters_08002efa",
                "param_1": "parameter_array",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[10]": "parameter_array[10]",
                "param_1[0xf]": "parameter_array[0xf]"
            },
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f4c": {
            "entrypoint": "0x08002f4c",
            "current_name": "clear_flag_and_set_character_08002f4c",
            "code": "\nundefined4 clearFlagAndSetCharacter_08002f4c(int *flagPointer)\n\n{\n  *(uint *)(*flagPointer + 0xc) = *(uint *)(*flagPointer + 0xc) & 0xffffffbf;\n  *(undefined *)((int)flagPointer + 0x39) = 0x20;\n  FUNC_08003f48();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f4c": "clear_flag_and_set_character_08002f4c",
                "param_1": "flagPointer"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [
                "FUN_08003f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f66": {
            "entrypoint": "0x08002f66",
            "current_name": "process_input_08002f66",
            "code": "\nundefined4 processInput_08002f66(int *input)\n\n{\n  byte *bytePointer;\n  short shortVar;\n  undefined *undefinedPointer;\n  \n  if (*(char *)((int)input + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (input[2] == 0x1000) {\n    if (input[4] == 0) {\n      *(ushort *)input[10] = (ushort)((uint)(*(int *)(*input + 4) << 0x17) >> 0x17);\n      input[10] = input[10] + 2;\n    }\n    else {\n      *(ushort *)input[10] = (ushort)*(undefined4 *)(*input + 4) & 0xff;\n      input[10] = input[10] + 1;\n    }\n  }\n  else if (input[4] == 0) {\n    undefinedPointer = (undefined *)input[10];\n    input[10] = (int)(undefinedPointer + 1);\n    *undefinedPointer = (char)*(undefined4 *)(*input + 4);\n  }\n  else {\n    bytePointer = (byte *)input[10];\n    input[10] = (int)(bytePointer + 1);\n    *bytePointer = (byte)*(undefined4 *)(*input + 4) & 0x7f;\n  }\n  shortVar = *(short *)((int)input + 0x2e) + -1;\n  *(short *)((int)input + 0x2e) = shortVar;\n  if (shortVar != 0) {\n    return 0;\n  }\n  *(uint *)(*input + 0xc) = *(uint *)(*input + 0xc) & 0xfffffedf;\n  *(uint *)(*input + 0x14) = *(uint *)(*input + 0x14) & 0xfffffffe;\n  *(undefined *)((int)input + 0x3a) = 0x20;\n  execute_function_based_on_index_08003f24();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f66": "process_input_08002f66",
                "param_1": "input",
                "pbVar1": "bytePointer",
                "sVar2": "shortVar",
                "puVar3": "undefinedPointer"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [
                "FUN_08003f24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ffc": {
            "entrypoint": "0x08002ffc",
            "current_name": "process_flags_08002ffc",
            "code": "\nvoid process_flags_08002ffc(uint **flags)\n\n{\n  int result;\n  uint flag_value;\n  uint *flags_ptr;\n  uint bit1_value;\n  uint flag1;\n  \n  flags_ptr = *flags;\n  flag1 = *flags_ptr;\n  flag_value = flags_ptr[3];\n  if ((((flag1 & 0xf) == 0) && ((flag1 & 0x20) != 0)) && ((flag_value & 0x20) != 0)) {\n    process_input(flags);\n    return;\n  }\n  if (((flag1 & 0xf) == 0) || ((bit1_value = flags_ptr[5] & 1, bit1_value == 0 && ((flag_value & 0x120) == 0)))) {\n    if (((flag1 & 0x80) != 0) && ((flag_value & 0x80) != 0)) {\n      process_param(flags);\n      return;\n    }\n    if (((flag1 & 0x40) != 0) && ((flag_value & 0x40) != 0)) {\n      clear_flag_and_set_character(flags);\n    }\n  }\n  else {\n    if (((flag1 & 1) != 0) && ((flag_value & 0x100) != 0)) {\n      flags[0xf] = (uint *)((uint)flags[0xf] | 1);\n    }\n    if (((flag1 & 4) != 0) && (bit1_value != 0)) {\n      flags[0xf] = (uint *)((uint)flags[0xf] | 2);\n    }\n    if (((flag1 & 2) != 0) && (bit1_value != 0)) {\n      flags[0xf] = (uint *)((uint)flags[0xf] | 4);\n    }\n    if (((flag1 & 8) != 0) && (bit1_value != 0)) {\n      flags[0xf] = (uint *)((uint)flags[0xf] | 8);\n    }\n    if (flags[0xf] != (uint *)0x0) {\n      if (((flag1 & 0x20) != 0) && ((flag_value & 0x20) != 0)) {\n        process_input(flags);\n      }\n      if ((((uint)flags[0xf] & 8) == 0) && (((*flags)[5] & 0x40) == 0)) {\n        FUNC_08003f94(flags);\n        flags[0xf] = (uint *)0x0;\n        return;\n      }\n      clear_bits(flags);\n      flags_ptr = *flags;\n      if ((flags_ptr[5] & 0x40) == 0) {\n        FUNC_08003f94(flags);\n        return;\n      }\n      flags_ptr[5] = flags_ptr[5] & 0xffffffbf;\n      if (flags[0xd] == (uint *)0x0) {\n        FUNC_08003f94(flags);\n        return;\n      }\n      flags[0xd][0x14] = (uint)&label_1;\n      result = update_param(flags[0xd]);\n      if (result != 0) {\n        (*(code *)flags[0xd][0x14])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ffc": "process_flags_08002ffc",
                "param_1": "flags",
                "iVar1": "result",
                "uVar2": "flag_value",
                "puVar3": "flags_ptr",
                "uVar4": "bit1_value",
                "uVar5": "flag1",
                "process_input_08002f66": "process_input",
                "process_param_0800295c": "process_param",
                "clear_flag_and_set_character_08002f4c": "clear_flag_and_set_character",
                "clear_bits_08002940": "clear_bits",
                "update_param_08000f8c": "update_param",
                "LAB_0800311c_1": "label_1"
            },
            "calling": [],
            "called": [
                "FUN_08002940",
                "FUN_08000f8c",
                "FUN_08002f4c",
                "FUN_08003f94",
                "FUN_0800295c",
                "FUN_08002f66"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800312c": {
            "entrypoint": "0x0800312c",
            "current_name": "combine_bytes_0800312c",
            "code": "\nbyte combineBytes_0800312c(int input)\n\n{\n  return *(byte *)(input + 0x3a) | *(byte *)(input + 0x39);\n}\n\n",
            "renaming": {
                "FUN_0800312c": "combine_bytes_0800312c",
                "param_1": "input"
            },
            "calling": [
                "FUN_08003dd0",
                "FUN_08003df4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003138": {
            "entrypoint": "0x08003138",
            "current_name": "extract_bit_08003138",
            "code": "\nuint extractBit_08003138(uint input,int baseAddress)\n\n{\n  return *(uint *)(baseAddress + ((input << 0x18) >> 0x1c) * 4) >> (input & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08003138": "extract_bit_08003138",
                "param_1": "input",
                "param_2": "baseAddress"
            },
            "calling": [
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "update_bit_0800314e",
            "code": "\nvoid updateBit_0800314e(uint value,int array)\n\n{\n  uint index;\n  \n  index = (value << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) | 1 << (value & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "update_bit_0800314e",
                "param_1": "value",
                "param_2": "array",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800316c": {
            "entrypoint": "0x0800316c",
            "current_name": "update_value_in_array_0800316c",
            "code": "\nvoid updateValueInArray_0800316c(uint value,int array)\n\n{\n  uint index;\n  \n  index = (value << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) & ~(1 << (value & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316c": "update_value_in_array_0800316c",
                "param_1": "value",
                "param_2": "array",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800318c": {
            "entrypoint": "0x0800318c",
            "current_name": "get_memory_address_0800318c",
            "code": "\nundefined4 getMemoryAddress_0800318c(undefined4 input)\n\n{\n  switch(input) {\n  case 0:\n    return 0x40020000;\n  case 1:\n    return 0x40020400;\n  case 2:\n    return 0x40020800;\n  case 3:\n    return 0x40020c00;\n  case 4:\n    return 0x40021000;\n  case 5:\n    return 0x40021400;\n  case 6:\n    return 0x40021800;\n  case 7:\n    return 0x40021c00;\n  case 8:\n    return 0x40022000;\n  case 9:\n    return 0x40022400;\n  case 10:\n    return 0x40022800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_0800318c": "get_memory_address_0800318c",
                "param_1": "input"
            },
            "calling": [
                "FUN_080041bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031fc": {
            "entrypoint": "0x080031fc",
            "current_name": "set_flag_and_return_address_080031fc",
            "code": "\n\n\nundefined4 setFlagAndReturnAddress_080031fc(undefined4 flag)\n\n{\n  undefined4 address;\n  \n  switch(flag) {\n  case 0:\n    _DAT_40023830 = _DAT_40023830 | 1;\n    address = 0x40020000;\n    break;\n  case 1:\n    _DAT_40023830 = _DAT_40023830 | 2;\n    address = 0x40020400;\n    break;\n  case 2:\n    _DAT_40023830 = _DAT_40023830 | 4;\n    address = 0x40020800;\n    break;\n  case 3:\n    _DAT_40023830 = _DAT_40023830 | 8;\n    address = 0x40020c00;\n    break;\n  case 4:\n    _DAT_40023830 = _DAT_40023830 | 0x10;\n    address = 0x40021000;\n    break;\n  case 5:\n    _DAT_40023830 = _DAT_40023830 | 0x20;\n    address = 0x40021400;\n    break;\n  case 6:\n    _DAT_40023830 = _DAT_40023830 | 0x40;\n    address = 0x40021800;\n    break;\n  case 7:\n    _DAT_40023830 = _DAT_40023830 | 0x80;\n    address = 0x40021c00;\n    break;\n  case 8:\n    _DAT_40023830 = _DAT_40023830 | 0x100;\n    address = 0x40022000;\n    break;\n  case 9:\n    _DAT_40023830 = _DAT_40023830 | 0x200;\n    address = 0x40022400;\n    break;\n  case 10:\n    _DAT_40023830 = _DAT_40023830 | 0x400;\n    address = 0x40022800;\n    break;\n  default:\n    address = 0;\n  }\n  return address;\n}\n\n",
            "renaming": {
                "FUN_080031fc": "set_flag_and_return_address_080031fc",
                "param_1": "flag",
                "uVar1": "address"
            },
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003380": {
            "entrypoint": "0x08003380",
            "current_name": "validate_value_index_08003380",
            "code": "\nundefined4 validate_value_index_08003380(undefined4 input_param,undefined4 param_2,undefined4 size_param,undefined4 param_4)\n\n{\n  int value_index;\n  \n  value_index = get_value_index_0800354a(input_param,&DAT_08005a18,size_param,param_4,param_4);\n  if ((uint)(value_index << 0xc) >> 0x1b != 2) {\n    return 0;\n  }\n  return 0x10;\n}\n\n",
            "renaming": {
                "FUN_08003380": "validate_value_index_08003380",
                "param_1": "input_param",
                "param_3": "size_param",
                "iVar1": "value_index"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800339c": {
            "entrypoint": "0x0800339c",
            "current_name": "get_value_index_0800339c",
            "code": "\nundefined4 getValueIndex_0800339c(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  int valueIndex;\n  uint shiftedValue;\n  \n  valueIndex = get_value_index_0800354a(input1,&DAT_08005a3c,input3,input4,input4);\n  shiftedValue = (uint)(valueIndex << 0xc) >> 0x1b;\n  if (shiftedValue == 3) {\n    return 8;\n  }\n  if (shiftedValue != 4) {\n    if (shiftedValue != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_0800339c": "get_value_index_0800339c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "valueIndex",
                "uVar2": "shiftedValue"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033c8": {
            "entrypoint": "0x080033c8",
            "current_name": "clear_memory_bit_080033c8",
            "code": "\n\n\nvoid clearMemoryBit_080033c8(void)\n\n{\n  _DAT_40023840 = _DAT_40023840 & 0xdfffffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033c8": "clear_memory_bit_080033c8"
            },
            "calling": [
                "FUN_08000f56"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033d8": {
            "entrypoint": "0x080033d8",
            "current_name": "clear_flag_if_valid_index_080033d8",
            "code": "\nvoid clearFlagIfValidIndex_080033d8(undefined4 input)\n\n{\n  int valueIndex;\n  int valueArray [5];\n  \n  valueArray[0] = get_value_or_zero_080034f4(input,&DAT_08005a18);\n  if ((valueArray[0] != 0) && ((valueIndex = validate_value_index_08003380(input), valueIndex == 0 || (valueIndex == 0x10)))) {\n    clear_bit_and_set_flag_08000f72(valueArray,valueIndex);\n    initialize_memory_08000f56(valueArray);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033d8": "clear_flag_if_valid_index_080033d8",
                "param_1": "input",
                "iVar1": "valueIndex",
                "local_1c": "valueArray"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_08000f72",
                "FUN_08003380",
                "FUN_08000f56",
                "FUN_080034f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800340c": {
            "entrypoint": "0x0800340c",
            "current_name": "update_data_based_on_param_0800340c",
            "code": "\nvoid update_data_based_on_param_0800340c(void)\n\n{\n  update_data_based_on_param_0800340c_080035fc();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800340c": "update_data_based_on_param_0800340c"
            },
            "calling": [
                "FUN_0800268e"
            ],
            "called": [
                "FUN_080035fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003414": {
            "entrypoint": "0x08003414",
            "current_name": "process_data_08003414",
            "code": "\nvoid processData_08003414(undefined4 inputParam)\n\n{\n  int index;\n  uint valueIndex;\n  int valuesArray [16];\n  \n  valuesArray[0] = get_value_or_zero_080034f4(inputParam,&DAT_08005a3c);\n  if ((valuesArray[0] != 0) &&\n     ((((index = get_value_index_0800339c(inputParam), index == 0 || (index == 4)) || (index == 8)) ||\n      ((index == 0xc || (index == 0x18)))))) {\n    valueIndex = get_value_index_0800354a(inputParam,&DAT_08005a3c);\n    if ((valueIndex & 0x100000) == 0) {\n      update_and_check_bits_08002864(valuesArray,index);\n    }\n    else {\n      FUNC_080028f0(valuesArray,index);\n    }\n    update_param_data_0800268e(valuesArray);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003414": "process_data_08003414",
                "param_1": "inputParam",
                "iVar1": "index",
                "uVar2": "valueIndex",
                "local_4c": "valuesArray"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_0800339c",
                "FUN_0800268e",
                "FUN_08002864",
                "FUN_080028f0",
                "FUN_080034f4",
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800346c": {
            "entrypoint": "0x0800346c",
            "current_name": "initialize_dat_value_0800346c",
            "code": "\nvoid initialize_dat_value_0800346c(void)\n\n{\n  retrieve_dat_value();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800346c": "initialize_dat_value_0800346c",
                "get_dat_value_08000e30": "retrieve_dat_value"
            },
            "calling": [
                "FUN_08004204"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "FUNC_08003474",
            "code": "\nvoid FUNC_08003474(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "FUNC_08003474"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003476": {
            "entrypoint": "0x08003476",
            "current_name": "initialize_and_update_data_08003476",
            "code": "\nvoid initialize_and_update_data_08003476(void)\n\n{\n  update_data();\n  initialize();\n  FUNC_08003474();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003476": "initialize_and_update_data_08003476",
                "update_data_08000e18": "update_data",
                "initialize_08000f4e": "initialize"
            },
            "calling": [],
            "called": [
                "FUN_08000f4e",
                "FUN_08003474",
                "FUN_08000e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003486": {
            "entrypoint": "0x08003486",
            "current_name": "update_flag_and_return_address_08003486",
            "code": "\nvoid updateFlagAndReturnAddress_08003486(uint value,undefined4 arg1,undefined4 arg2)\n\n{\n  undefined4 address;\n  uint bitMask;\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  \n  address = set_flag_and_return_address_080031fc((value << 0x18) >> 0x1c);\n  bitMask = 1 << (value & 0xf) & 0xffff;\n  param3 = 2;\n  param1 = arg1;\n  param2 = arg2;\n  update_registers_08000fb4(address,&bitMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003486": "update_flag_and_return_address_08003486",
                "param_1": "value",
                "param_2": "arg1",
                "param_3": "arg2",
                "uVar1": "address",
                "local_24": "bitMask",
                "local_20": "param1",
                "local_1c": "param2",
                "local_18": "param3"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_08000fb4",
                "FUN_080031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034b6": {
            "entrypoint": "0x080034b6",
            "current_name": "set_param_value_080034b6",
            "code": "\nvoid set_param_value_080034b6(undefined4 value,undefined2 flag,int condition,undefined4 param)\n\n{\n  if (condition == 0) {\n    set_param_value_080034b6_helper(value,flag,0,param,param);\n    return;\n  }\n  set_param_value_080034b6_helper(value,flag,1,param,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034b6": "set_param_value_080034b6",
                "param_1": "value",
                "param_2": "flag",
                "param_3": "condition",
                "param_4": "param",
                "set_param_value_08001198": "set_param_value_helper"
            },
            "calling": [
                "FUN_080041bc"
            ],
            "called": [
                "FUN_08001198"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034ce": {
            "entrypoint": "0x080034ce",
            "current_name": "initialize_application_080034ce",
            "code": "\nvoid initialize_application_080034ce(void)\n\n{\n  initialize_data_and_apply_mask();\n  initialize_and_update_settings();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034ce": "initialize_application_080034ce",
                "initialize_data_and_apply_mask_08000de4": "initialize_data_and_apply_mask",
                "initialize_and_update_settings_08000c8c": "initialize_and_update_settings"
            },
            "calling": [
                "FUN_08000d8e"
            ],
            "called": [
                "FUN_08000c8c",
                "FUN_08000de4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034da": {
            "entrypoint": "0x080034da",
            "current_name": "find_value_by_index_080034da",
            "code": "\nundefined4 find_value_by_index_080034da(int search_value,short *array_ptr)\n\n{\n  while( true ) {\n    if (*array_ptr == -1) {\n      return 0;\n    }\n    if (*array_ptr == search_value) break;\n    array_ptr = array_ptr + 6;\n  }\n  return *(undefined4 *)(array_ptr + 2);\n}\n\n",
            "renaming": {
                "FUN_080034da": "find_value_by_index_080034da",
                "param_1": "search_value",
                "param_2": "array_ptr"
            },
            "calling": [
                "FUN_080034da",
                "FUN_080034f4"
            ],
            "called": [
                "FUN_080034da"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034f4": {
            "entrypoint": "0x080034f4",
            "current_name": "get_value_or_zero_080034f4",
            "code": "\nundefined4 get_value_or_zero_080034f4(int input)\n\n{\n  undefined4 found_value;\n  \n  if (input != -1) {\n    found_value = find_value_by_index_080034da();\n    return found_value;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080034f4": "get_value_or_zero_080034f4",
                "param_1": "input",
                "uVar1": "found_value"
            },
            "calling": [
                "FUN_08003cc8",
                "FUN_08003414",
                "FUN_080033d8",
                "FUN_08003978",
                "FUN_08003d18"
            ],
            "called": [
                "FUN_080034da"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003506": {
            "entrypoint": "0x08003506",
            "current_name": "find_value_08003506",
            "code": "\nint findValue_08003506(int searchValue,short *dataPointer)\n\n{\n  while( true ) {\n    if (*(int *)(dataPointer + 2) == 0) {\n      return -1;\n    }\n    if (*(int *)(dataPointer + 2) == searchValue) break;\n    dataPointer = dataPointer + 6;\n  }\n  return (int)*dataPointer;\n}\n\n",
            "renaming": {
                "FUN_08003506": "find_value_08003506",
                "param_1": "searchValue",
                "param_2": "dataPointer"
            },
            "calling": [
                "FUN_08003506",
                "FUN_0800351e"
            ],
            "called": [
                "FUN_08003506"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800351e": {
            "entrypoint": "0x0800351e",
            "current_name": "check_parameter_value_0800351e",
            "code": "\nundefined4 checkParameterValue_0800351e(int value)\n\n{\n  undefined4 result;\n  \n  if (value != 0) {\n    result = find_value_08003506();\n    return result;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800351e": "check_parameter_value_0800351e",
                "param_1": "value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08003cc8",
                "FUN_0800447c"
            ],
            "called": [
                "FUN_08003506"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800352e": {
            "entrypoint": "0x0800352e",
            "current_name": "find_value_index_0800352e",
            "code": "\nundefined4 find_value_index_0800352e(int value,short *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0xffffffff;\n    }\n    if (*array == value) break;\n    array = array + 6;\n  }\n  return *(undefined4 *)(array + 4);\n}\n\n",
            "renaming": {
                "FUN_0800352e": "find_value_index_0800352e",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_0800352e",
                "FUN_0800354a"
            ],
            "called": [
                "FUN_0800352e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800354a": {
            "entrypoint": "0x0800354a",
            "current_name": "get_value_index_0800354a",
            "code": "\nundefined4 getValueIndex_0800354a(int inputValue)\n\n{\n  undefined4 result;\n  \n  if (inputValue == -1) {\n    return 0xffffffff;\n  }\n  result = find_value_index_0800352e();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800354a": "get_value_index_0800354a",
                "param_1": "inputValue",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08003414",
                "FUN_0800339c",
                "FUN_08003978",
                "FUN_08003380"
            ],
            "called": [
                "FUN_0800352e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800355e": {
            "entrypoint": "0x0800355e",
            "current_name": "find_value_in_array_0800355e",
            "code": "\nundefined4 find_value_in_array_0800355e(int value,short *array)\n\n{\n  if (value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (value == *array) break;\n    array = array + 6;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800355e": "find_value_in_array_0800355e",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003582": {
            "entrypoint": "0x08003582",
            "current_name": "compare_and_return_non_zero_08003582",
            "code": "\nint compareAndReturnNonZero_08003582(int value1,int value2)\n\n{\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_08003582": "compare_and_return_non_zero_08003582",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003594": {
            "entrypoint": "0x08003594",
            "current_name": "execute_callback_function_08003594",
            "code": "\nvoid executeCallbackFunction_08003594(void)\n\n{\n  if (DAT_20000188 != (code *)0x0) {\n    (*DAT_20000188)(DAT_200001ac);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003594": "execute_callback_function_08003594"
            },
            "calling": [
                "FUN_0800262c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035bc": {
            "entrypoint": "0x080035bc",
            "current_name": "initialize_memory_080035bc",
            "code": "\n\n\nvoid initializeMemory_080035bc(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035bc": "initialize_memory_080035bc"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035fc": {
            "entrypoint": "0x080035fc",
            "current_name": "update_data_based_on_param_080035fc",
            "code": "\n\n\nvoid updateDataBasedOnParam_080035fc(int *param)\n\n{\n  if (*param == 0x40010000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffe;\n  }\n  if (*param == 0x40000000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffe;\n  }\n  if (*param == 0x40000400) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffd;\n  }\n  if (*param == 0x40000800) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffb;\n  }\n  if (*param == 0x40000c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffff7;\n  }\n  if (*param == 0x40001000) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffef;\n  }\n  if (*param == 0x40001400) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffdf;\n  }\n  if (*param == 0x40010400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffd;\n  }\n  if (*param == 0x40014000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffeffff;\n  }\n  if (*param == 0x40014400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffdffff;\n  }\n  if (*param == 0x40014800) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffbffff;\n  }\n  if (*param == 0x40001800) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffbf;\n  }\n  if (*param == 0x40001c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffff7f;\n  }\n  if (*param == 0x40002000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffeff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fc": "update_data_based_on_param_080035fc",
                "param_1": "param"
            },
            "calling": [
                "FUN_0800340c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003750": {
            "entrypoint": "0x08003750",
            "current_name": "subtract_four_08003750",
            "code": "\nint subtract_four_08003750(int input_number)\n\n{\n  return input_number + -4;\n}\n\n",
            "renaming": {
                "FUN_08003750": "subtract_four_08003750",
                "param_1": "input_number"
            },
            "calling": [
                "FUN_0800376e",
                "FUN_08003754"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003754": {
            "entrypoint": "0x08003754",
            "current_name": "execute_callback_if_true_08003754",
            "code": "\nvoid executeCallbackIfTrue_08003754(int callbackParameter)\n\n{\n  int result;\n  \n  result = getFunctionAddress();\n  if ((*(functionPointer **)(result + 0x48) != (functionPointer *)0x0) && (*(char *)(callbackParameter + 0x18) == '\\x01')) {\n    (**(functionPointer **)(result + 0x48))(result,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003754": "execute_callback_if_true_08003754",
                "param_1": "callbackParameter",
                "iVar1": "result",
                "subtract_four_08003750": "getFunctionAddress",
                "code": "functionPointer"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [
                "FUN_08003750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376e": {
            "entrypoint": "0x0800376e",
            "current_name": "execute_subroutine_0800376e",
            "code": "\nvoid executeSubroutine_0800376e(void)\n\n{\n  int result;\n  \n  result = getTargetFunction();\n  if (*(code **)(result + 0x44) != (code *)0x0) {\n    (**(code **)(result + 0x44))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800376e": "execute_subroutine_0800376e",
                "iVar1": "result",
                "subtract_four_08003750": "getTargetFunction"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [
                "FUN_08003750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800377c": {
            "entrypoint": "0x0800377c",
            "current_name": "process_flags_0800377c",
            "code": "\nvoid process_flags_0800377c(void)\n\n{\n  if (DAT_200001b0 != 0) {\n    process_flags_0800377c_080026ce();\n  }\n  if (DAT_200001d4 != 0) {\n    process_flags_0800377c_080026ce();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800377c": "process_flags_0800377c"
            },
            "calling": [],
            "called": [
                "FUN_080026ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800387c": {
            "entrypoint": "0x0800387c",
            "current_name": "subtract_four_0800387c",
            "code": "\nint subtract_four_0800387c(int input_value)\n\n{\n  return input_value + -4;\n}\n\n",
            "renaming": {
                "FUN_0800387c": "subtract_four_0800387c",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_080038d0",
                "FUN_08003880",
                "FUN_08003900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003880": {
            "entrypoint": "0x08003880",
            "current_name": "validate_and_process_input_08003880",
            "code": "\nvoid validate_and_process_input_08003880(int input_data,int flag,int check_value,undefined4 callback_function)\n\n{\n  int result;\n  \n  result = subtract_four();\n  if (check_value == *(int *)(input_data + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5e) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      validate_input(input_data,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5e) = 1;\n    process_params(input_data,result + 0x68,0x20,8,callback_function);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003880": "validate_and_process_input_08003880",
                "param_1": "input_data",
                "param_2": "flag",
                "param_3": "check_value",
                "param_4": "callback_function",
                "iVar1": "result",
                "subtract_four_0800387c": "subtract_four",
                "validate_input_08001460": "validate_input",
                "process_params_080014ec": "process_params"
            },
            "calling": [
                "FUN_0800165a"
            ],
            "called": [
                "FUN_0800387c",
                "FUN_08001460",
                "FUN_080014ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038d0": {
            "entrypoint": "0x080038d0",
            "current_name": "process_binary_080038d0",
            "code": "\nvoid processBinary_080038d0(undefined4 inputData)\n\n{\n  int result;\n  \n  result = getFunctionPointer();\n  if (((*(code **)(result + 0x60) != (code *)0x0) && (*(char *)(result + 0x5e) == '\\x01')) &&\n     (*(char *)(result + 0x2c) != ' ')) {\n    (**(code **)(result + 0x60))(result + 0x68);\n  }\n  modifyData(inputData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080038d0": "process_binary_080038d0",
                "param_1": "inputData",
                "iVar1": "result",
                "subtract_four_0800387c": "getFunctionPointer",
                "modify_values_08001578": "modifyData"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_08001684",
                "FUN_08001bfc"
            ],
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003900": {
            "entrypoint": "0x08003900",
            "current_name": "check_and_modify_values_08003900",
            "code": "\nvoid checkAndModifyValues_08003900(undefined4 inputValue)\n\n{\n  int result;\n  \n  result = subtractFour();\n  if (*(char *)(result + 0x5f) == '\\0') {\n    modifyValues(inputValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003900": "check_and_modify_values_08003900",
                "param_1": "inputValue",
                "iVar1": "result",
                "subtract_four_0800387c": "subtractFour",
                "modify_values_08001578": "modifyValues"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003978": {
            "entrypoint": "0x08003978",
            "current_name": "configure_uart_pin_08003978",
            "code": "\n\n\nvoid configureUARTPin_08003978(int *pinConfig)\n\n{\n  int uartPeripheral1;\n  int uartPeripheral2;\n  undefined4 uartConfig1;\n  uint uartConfig2;\n  uint pinMask1;\n  uint pinConfig1;\n  uint pinConfig2;\n  undefined4 uartConfig2;\n  uint uartConfig3;\n  \n  if (pinConfig != (int *)0x0) {\n    uartPeripheral1 = get_value_or_zero_080034f4((int)*(short *)(pinConfig + 0x16),&DAT_08005ca0);\n    uartPeripheral2 = get_value_or_zero_080034f4((int)*(short *)((int)pinConfig + 0x5a),&DAT_08005c10);\n    if ((uartPeripheral2 == 0) || (uartPeripheral1 == 0)) {\n      initialize_and_process_data_08004fdc(\"ERROR: at least one UART pin has no peripheral\\n\",uartPeripheral2);\n    }\n    else {\n      uartPeripheral1 = compare_and_return_non_zero_08003582(uartPeripheral1);\n      *pinConfig = uartPeripheral1;\n      if (uartPeripheral1 == 0) {\n        initialize_and_process_data_08004fdc(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uartPeripheral1 == 0x40011000) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffef;\n          _DAT_40023844 = _DAT_40023844 | 0x10;\n          *(undefined *)(pinConfig + 0x11) = 0;\n          *(undefined *)(pinConfig + 0x17) = 0x25;\n        }\n        else if (uartPeripheral1 == 0x40004400) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffdffff;\n          _DAT_40023840 = _DAT_40023840 | 0x20000;\n          *(undefined *)(pinConfig + 0x11) = 1;\n          *(undefined *)(pinConfig + 0x17) = 0x26;\n        }\n        else if (uartPeripheral1 == 0x40004800) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffbffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000;\n          *(undefined *)(pinConfig + 0x11) = 2;\n          *(undefined *)(pinConfig + 0x17) = 0x27;\n        }\n        else if (uartPeripheral1 == 0x40004c00) {\n          _DAT_40023820 = _DAT_40023820 & 0xfff7ffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000;\n          *(undefined *)(pinConfig + 0x11) = 3;\n          *(undefined *)(pinConfig + 0x17) = 0x34;\n        }\n        else if (uartPeripheral1 == 0x40005000) {\n          _DAT_40023820 = _DAT_40023820 & 0xffefffff;\n          _DAT_40023840 = _DAT_40023840 | 0x100000;\n          *(undefined *)(pinConfig + 0x11) = 4;\n          *(undefined *)(pinConfig + 0x17) = 0x35;\n        }\n        else if (uartPeripheral1 == 0x40011400) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffdf;\n          _DAT_40023844 = _DAT_40023844 | 0x20;\n          *(undefined *)(pinConfig + 0x11) = 5;\n          *(undefined *)(pinConfig + 0x17) = 0x47;\n        }\n        else if (uartPeripheral1 == 0x40007800) {\n          _DAT_40023820 = _DAT_40023820 & 0xbfffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000000;\n          *(undefined *)(pinConfig + 0x11) = 6;\n          *(undefined *)(pinConfig + 0x17) = 0x52;\n        }\n        else if (uartPeripheral1 == 0x40007c00) {\n          _DAT_40023820 = _DAT_40023820 & 0x7fffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000000;\n          *(undefined *)(pinConfig + 0x11) = 7;\n          *(undefined *)(pinConfig + 0x17) = 0x53;\n        }\n        uartConfig1 = set_flag_and_return_address_080031fc((uint)((int)*(short *)((int)pinConfig + 0x5a) << 0x18) >> 0x1c);\n        uartConfig2 = get_value_index_0800354a((int)*(short *)((int)pinConfig + 0x5a),&DAT_08005c10);\n        pinMask1 = 1 << (*(ushort *)((int)pinConfig + 0x5a) & 0xf) & 0xffff;\n        pinConfig1 = (uartConfig2 >> 3 & 1) << 4 | uartConfig2 & 7;\n        pinConfig2 = (uartConfig2 << 0x1a) >> 0x1e;\n        uartConfig3 = (uartConfig2 << 0x11) >> 0x19;\n        uartConfig2 = 3;\n        update_registers_08000fb4(uartConfig1,&pinMask1);\n        uartConfig1 = set_flag_and_return_address_080031fc((uint)((int)*(short *)(pinConfig + 0x16) << 0x18) >> 0x1c);\n        uartConfig2 = get_value_index_0800354a((int)*(short *)(pinConfig + 0x16),&DAT_08005ca0);\n        pinMask1 = 1 << (*(ushort *)(pinConfig + 0x16) & 0xf) & 0xffff;\n        pinConfig1 = (uartConfig2 >> 3 & 1) << 4 | uartConfig2 & 7;\n        pinConfig2 = (uartConfig2 << 0x1a) >> 0x1e;\n        update_registers_08000fb4(uartConfig1,&pinMask1);\n        (&DAT_200002b4)[*(byte *)(pinConfig + 0x11)] = pinConfig + 1;\n        pinConfig[1] = *pinConfig;\n        pinConfig[2] = pinConfig[0x12];\n        pinConfig[3] = pinConfig[0x13];\n        pinConfig[4] = pinConfig[0x14];\n        pinConfig[5] = pinConfig[0x15];\n        pinConfig[6] = 0xc;\n        pinConfig[7] = 0;\n        pinConfig[8] = 0;\n        validate_and_update_configuration_08002d72(pinConfig + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003978": "configure_uart_pin_08003978",
                "param_1": "pinConfig",
                "iVar1": "uartPeripheral1",
                "iVar2": "uartPeripheral2",
                "uVar3": "uartConfig1",
                "uVar4": "uartConfig2",
                "local_2c": "pinMask1",
                "local_28": "pinConfig1",
                "local_24": "pinConfig2",
                "local_20": "uartConfig2",
                "local_1c": "uartConfig3"
            },
            "calling": [
                "FUN_08003cc8",
                "FUN_08004388"
            ],
            "called": [
                "FUN_08003582",
                "FUN_08004fdc",
                "FUN_080031fc",
                "FUN_08000fb4",
                "FUN_080034f4",
                "FUN_0800354a",
                "FUN_08002d72"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003cc8": {
            "entrypoint": "0x08003cc8",
            "current_name": "initialize_uart_configuration_08003cc8",
            "code": "\nvoid initialize_uart_configuration_08003cc8(void)\n\n{\n  int result;\n  undefined4 parameter_value;\n  \n  result = get_value_or_zero_080034f4(0x38,&DAT_08005ca0);\n  if (result != 0) {\n    parameter_value = get_value_or_zero_080034f4(0x38,&DAT_08005ca0);\n    DAT_2000008a = check_parameter_value_0800351e(parameter_value,&DAT_08005c10);\n    DAT_20000088 = 0x38;\n    DAT_20000078 = 0x2580;\n    DAT_20000084 = 0;\n    DAT_2000007c = 0;\n    DAT_20000080 = 0;\n    configure_uart_pin_08003978(&DAT_20000030);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003cc8": "initialize_uart_configuration_08003cc8",
                "iVar1": "result",
                "uVar2": "parameter_value"
            },
            "calling": [
                "FUN_08003d18"
            ],
            "called": [
                "FUN_08003978",
                "FUN_0800351e",
                "FUN_080034f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d18": {
            "entrypoint": "0x08003d18",
            "current_name": "process_and_validate_data_08003d18",
            "code": "\nuint process_and_validate_data_08003d18(undefined4 input_value,uint input_flag)\n\n{\n  int data_value_1;\n  int data_value_2;\n  uint loop_index;\n  \n  data_value_1 = get_dat_value_08000e30();\n  data_value_2 = get_value_or_zero_080034f4(0x38,&DAT_08005ca0);\n  if (data_value_2 == 0) {\n    return 0;\n  }\n  for (loop_index = 0;\n      (loop_index < 10 &&\n      (((&DAT_200002b4)[loop_index] == 0 ||\n       (data_value_2 = get_value_or_zero_080034f4(0x38,&DAT_08005ca0), *(int *)(&DAT_200002b4)[loop_index] != data_value_2))));\n      loop_index = loop_index + 1 & 0xff) {\n  }\n  if (9 < loop_index) {\n    if ((9 < DAT_20000074) && (initialize_uart_configuration(), 9 < DAT_20000074)) {\n      return 0;\n    }\n    loop_index = (uint)DAT_20000074;\n  }\n  do {\n    data_value_2 = process_data((&DAT_200002b4)[loop_index],input_value,input_flag & 0xffff,1000);\n    if (data_value_2 == 0) {\n      return input_flag;\n    }\n    data_value_2 = get_dat_value_08000e30();\n  } while ((uint)(data_value_2 - data_value_1) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003d18": "process_and_validate_data_08003d18",
                "param_1": "input_value",
                "param_2": "input_flag",
                "iVar1": "data_value_1",
                "iVar2": "data_value_2",
                "uVar3": "loop_index",
                "initialize_uart_configuration_08003cc8": "initialize_uart_configuration",
                "process_data_08002dd0": "process_data"
            },
            "calling": [
                "FUN_080040ec"
            ],
            "called": [
                "FUN_08003cc8",
                "FUN_08000e30",
                "FUN_08002dd0",
                "FUN_080034f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003dd0": {
            "entrypoint": "0x08003dd0",
            "current_name": "check_combination_08003dd0",
            "code": "\nbool check_combination_08003dd0(int input_value)\n\n{\n  uint combined_value;\n  \n  combined_value = combine_bytes((&DAT_200002b4)[*(byte *)(input_value + 0x44)]);\n  return (combined_value & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_08003dd0": "check_combination_08003dd0",
                "param_1": "input_value",
                "uVar1": "combined_value",
                "combine_bytes_0800312c": "combine_bytes"
            },
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "called": [
                "FUN_0800312c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003df4": {
            "entrypoint": "0x08003df4",
            "current_name": "check_combination_08003df4",
            "code": "\nbool check_combination_08003df4(int input_value)\n\n{\n  uint combined_bytes;\n  \n  combined_bytes = combine_bytes((&DAT_200002b4)[*(byte *)(input_value + 0x44)]);\n  return (combined_bytes & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_08003df4": "check_combination_08003df4",
                "param_1": "input_value",
                "uVar1": "combined_bytes",
                "combine_bytes_0800312c": "combine_bytes"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "FUN_0800312c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e18": {
            "entrypoint": "0x08003e18",
            "current_name": "validate_combination_08003e18",
            "code": "\nundefined4 validate_combination_08003e18(int combination,undefined *result,undefined4 param_3,undefined4 param_4)\n\n{\n  int combination_check_result;\n  \n  if (combination == 0) {\n    return 0xffffffff;\n  }\n  combination_check_result = check_combination_08003dd0();\n  if (combination_check_result == 0) {\n    *result = *(undefined *)(combination + 0x45);\n    validate_and_update_parameters_08002efa((&DAT_200002b4)[*(byte *)(combination + 0x44)],combination + 0x45,1,&DAT_200002b4,param_4);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08003e18": "validate_combination_08003e18",
                "param_1": "combination",
                "param_2": "result",
                "iVar1": "combination_check_result"
            },
            "calling": [
                "FUN_080042ac"
            ],
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e54": {
            "entrypoint": "0x08003e54",
            "current_name": "update_combination_08003e54",
            "code": "\nvoid updateCombination_08003e54(int combinationAddress,undefined4 newValue,undefined4 unused,undefined4 param_4)\n\n{\n  int combinationCheck;\n  uint byteValue;\n  \n  if (combinationAddress != 0) {\n    combinationCheck = check_combination_08003dd0();\n    if (combinationCheck == 0) {\n      byteValue = (uint)*(byte *)(combinationAddress + 0x44);\n      *(undefined4 *)(&DAT_20000214 + byteValue * 4) = newValue;\n      *(int *)(&DAT_2000023c + byteValue * 4) = combinationAddress;\n      applyMask((int)*(char *)(combinationAddress + 0x5c),0,1,byteValue,param_4);\n      setBitInArray((int)*(char *)(combinationAddress + 0x5c));\n      validateAndUpdateParams((&DAT_200002b4)[*(byte *)(combinationAddress + 0x44)],combinationAddress + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e54": "update_combination_08003e54",
                "param_1": "combinationAddress",
                "param_2": "newValue",
                "param_3": "unused",
                "iVar1": "combinationCheck",
                "uVar2": "byteValue",
                "apply_mask_08000e60": "applyMask",
                "set_bit_in_array_08000ec4": "setBitInArray",
                "validate_and_update_parameters_08002efa": "validateAndUpdateParams"
            },
            "calling": [
                "FUN_08004388"
            ],
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0",
                "FUN_08000e60",
                "FUN_08000ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eac": {
            "entrypoint": "0x08003eac",
            "current_name": "update_data_08003eac",
            "code": "\nvoid updateData_08003eac(int ptr_data,undefined4 newValue)\n\n{\n  byte byteValue;\n  \n  if (ptr_data != 0) {\n    byteValue = *(byte *)(ptr_data + 0x44);\n    *(undefined4 *)(&DAT_20000264 + (uint)byteValue * 4) = newValue;\n    *(int *)(&DAT_2000028c + (uint)byteValue * 4) = ptr_data;\n    applyMask((int)*(char *)(ptr_data + 0x5c),0,2);\n    setBitInArray((int)*(char *)(ptr_data + 0x5c));\n    validateAndUpdate((&DAT_200002b4)[*(byte *)(ptr_data + 0x44)],\n                 *(int *)(ptr_data + 0x68) + (uint)*(ushort *)(ptr_data + 0x6e),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003eac": "update_data_08003eac",
                "param_1": "ptr_data",
                "param_2": "newValue",
                "bVar1": "byteValue",
                "apply_mask_08000e60": "applyMask",
                "set_bit_in_array_08000ec4": "setBitInArray",
                "validate_and_update_data_08002eb2": "validateAndUpdate"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "FUN_08002eb2",
                "FUN_08000e60",
                "FUN_08000ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f00": {
            "entrypoint": "0x08003f00",
            "current_name": "find_index_08003f00",
            "code": "\nuint find_index_08003f00(int input_value)\n\n{\n  uint index;\n  \n  if (input_value == 0) {\n    index = 10;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (9 < index) {\n        return index;\n      }\n      if (input_value == (&DAT_200002b4)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_08003f00": "find_index_08003f00",
                "param_1": "input_value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08003f24",
                "FUN_08003f48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f24": {
            "entrypoint": "0x08003f24",
            "current_name": "execute_function_based_on_index_08003f24",
            "code": "\nvoid executeFunctionBasedOnIndex_08003f24(void)\n\n{\n  uint index;\n  \n  index = findIndex();\n  if (index < 10) {\n    (**(code **)(&DAT_20000214 + index * 4))(*(undefined4 *)(&DAT_2000023c + index * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f24": "execute_function_based_on_index_08003f24",
                "uVar1": "index",
                "find_index_08003f00": "findIndex"
            },
            "calling": [
                "FUN_08002f66"
            ],
            "called": [
                "FUN_08003f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f48": {
            "entrypoint": "0x08003f48",
            "current_name": "FUNC_08003f48",
            "code": "\nvoid FUNC_08003f48(void)\n\n{\n  uint uVar1;\n  int iVar2;\n  int iVar3;\n  \n  uVar1 = find_index_08003f00();\n  iVar3 = *(int *)(&DAT_2000028c + uVar1 * 4);\n  if ((uVar1 < 10) && (iVar2 = (**(code **)(&DAT_20000264 + uVar1 * 4))(iVar3), iVar2 != -1)) {\n    validate_and_update_data_08002eb2((&DAT_200002b4)[*(byte *)(iVar3 + 0x44)],\n                 *(int *)(iVar3 + 0x68) + (uint)*(ushort *)(iVar3 + 0x6e),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f48": "FUNC_08003f48"
            },
            "calling": [
                "FUN_08002f4c"
            ],
            "called": [
                "FUN_08003f00",
                "FUN_08002eb2"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "FUNC_08003f94",
            "code": "\nvoid FUNC_08003f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "FUNC_08003f94"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004094": {
            "entrypoint": "0x08004094",
            "current_name": "allocate_memory_08004094",
            "code": "\nundefined * allocateMemory_08004094(int size)\n\n{\n  undefined *allocatedMemory;\n  \n  if (DAT_200002dc == (undefined *)0x0) {\n    DAT_200002dc = &DAT_20000678;\n  }\n  allocatedMemory = DAT_200002dc;\n  if (DAT_200002dc + size <= stackBoundaryMarker) {\n    DAT_200002dc = DAT_200002dc + size;\n    return allocatedMemory;\n  }\n  DAT_20000674 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004094": "allocate_memory_08004094",
                "param_1": "size",
                "puVar1": "allocatedMemory",
                "&stack0x00000000": "stackBoundaryMarker"
            },
            "calling": [
                "FUN_0800500c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040d0": {
            "entrypoint": "0x080040d0",
            "current_name": "return_default_value_080040d0",
            "code": "\nunsigned_integer return_default_value_080040d0(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040d0": "return_default_value_080040d0",
                "undefined4": "unsigned_integer"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040d6": {
            "entrypoint": "0x080040d6",
            "current_name": "set_memory_page_size_080040d6",
            "code": "\nundefined4 setMemoryPageSize_080040d6(undefined4 memoryPointer,int dataPointer)\n\n{\n  *(undefined4 *)(dataPointer + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040d6": "set_memory_page_size_080040d6",
                "param_1": "memoryPointer",
                "param_2": "dataPointer"
            },
            "calling": [
                "FUN_080056d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e0": {
            "entrypoint": "0x080040e0",
            "current_name": "get_success_status_080040e0",
            "code": "\nundefined4 get_success_status_080040e0(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080040e0": "get_success_status_080040e0"
            },
            "calling": [
                "FUN_080056f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e4": {
            "entrypoint": "0x080040e4",
            "current_name": "initialize_program_080040e4",
            "code": "\nint initializeProgram_080040e4(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e4": "initialize_program_080040e4",
                "undefined4": "int"
            },
            "calling": [
                "FUN_08005718"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "initialize_080040e8",
            "code": "\nvoid initialize_080040e8(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "initialize_080040e8",
                "undefined4": "void"
            },
            "calling": [
                "FUN_0800573c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040ec": {
            "entrypoint": "0x080040ec",
            "current_name": "process_and_validate_data_080040ec",
            "code": "\nvoid process_and_validate_data_080040ec(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  process_and_validate_data_080040ec_08003d18(input_param_2,input_param_3,input_param_3,input_param_4,input_param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040ec": "process_and_validate_data_080040ec",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4"
            },
            "calling": [
                "FUN_0800562a"
            ],
            "called": [
                "FUN_08003d18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040f8": {
            "entrypoint": "0x080040f8",
            "current_name": "endless_loop_080040f8",
            "code": "\nvoid endlessLoop_080040f8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040f8": "endless_loop_080040f8"
            },
            "calling": [
                "FUN_080051ac",
                "FUN_080040f8"
            ],
            "called": [
                "FUN_080040f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040fc": {
            "entrypoint": "0x080040fc",
            "current_name": "initialize_data_080040fc",
            "code": "\nundefined4 initializeData_080040fc(void)\n\n{\n  DAT_20000674 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040fc": "initialize_data_080040fc"
            },
            "calling": [
                "FUN_080055d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800410c": {
            "entrypoint": "0x0800410c",
            "current_name": "initialize_process_0800410c",
            "code": "\nvoid initializeProcess_0800410c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800410c": "initialize_process_0800410c",
                "undefined4": "void"
            },
            "calling": [
                "thunk_FUN_0800410c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004110": {
            "entrypoint": "0x08004110",
            "current_name": "process_data_08004110",
            "code": "\nvoid processData_08004110(uint index,undefined4 flagType,undefined4 param,undefined *data)\n\n{\n  int extractResult;\n  undefined *arrayPtr;\n  int arrayValue;\n  \n  if (index < 0x60) {\n    arrayValue = (int)*(short *)(&DAT_08005d3c + index * 2);\n    arrayPtr = &DAT_08005d3c;\n  }\n  else {\n    arrayValue = -1;\n    arrayPtr = data;\n  }\n  if (arrayValue != -1) {\n    extractResult = extract_bit_08003138(arrayValue,&DAT_200002e0,param,arrayPtr,data);\n    if (extractResult != 0) {\n      extractResult = find_value_in_array_0800355e(arrayValue,&DAT_08005a18);\n      if (extractResult == 0) {\n        extractResult = find_value_in_array_0800355e(arrayValue,&DAT_08005a3c);\n        if (extractResult != 0) {\n          process_data_08003414(arrayValue);\n        }\n      }\n      else {\n        clear_flag_if_valid_index_080033d8(arrayValue);\n      }\n      update_value_in_array_0800316c(arrayValue,&DAT_200002e0);\n    }\n    switch(flagType) {\n    case 0:\n      update_flag_and_return_address_08003486(arrayValue,0);\n      break;\n    case 1:\n      update_flag_and_return_address_08003486(arrayValue,1,0);\n      break;\n    case 2:\n      update_flag_and_return_address_08003486(arrayValue,0,1);\n      break;\n    case 3:\n      update_flag_and_return_address_08003486(arrayValue,0,2);\n    }\n    update_bit_0800314e(arrayValue,&DAT_2000030c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004110": "process_data_08004110",
                "param_1": "index",
                "param_2": "flagType",
                "param_3": "param",
                "param_4": "data",
                "iVar1": "extractResult",
                "puVar2": "arrayPtr",
                "iVar3": "arrayValue"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "FUN_08003138",
                "FUN_0800316c",
                "FUN_0800314e",
                "FUN_08003414",
                "FUN_08003486",
                "FUN_080033d8",
                "FUN_0800355e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041bc": {
            "entrypoint": "0x080041bc",
            "current_name": "extract_and_set_param_value_080041bc",
            "code": "\nvoid extract_and_set_param_value_080041bc(uint index,undefined4 value,undefined4 size,undefined *data)\n\n{\n  int result;\n  undefined4 memory_address;\n  undefined *pointer;\n  uint short_value;\n  \n  if (index < 0x60) {\n    short_value = (uint)*(short *)(&DAT_08005d3c + index * 2);\n    pointer = &DAT_08005d3c;\n  }\n  else {\n    short_value = 0xffffffff;\n    pointer = data;\n  }\n  if ((short_value != 0xffffffff) &&\n     (result = extract_bit_08003138(short_value,&DAT_2000030c,size,pointer,data), result != 0)) {\n    memory_address = get_memory_address_0800318c((short_value << 0x18) >> 0x1c);\n    set_param_value_080034b6(memory_address,1 << (short_value & 0xf) & 0xffff,value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041bc": "extract_and_set_param_value_080041bc",
                "param_1": "index",
                "param_2": "value",
                "param_3": "size",
                "param_4": "data",
                "iVar1": "result",
                "uVar2": "memory_address",
                "puVar3": "pointer",
                "uVar4": "short_value"
            },
            "calling": [
                "FUN_0800076c",
                "FUN_08000600",
                "FUN_080006b4"
            ],
            "called": [
                "FUN_08003138",
                "FUN_080034b6",
                "FUN_0800318c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004204": {
            "entrypoint": "0x08004204",
            "current_name": "initialize_dat_value_08004204",
            "code": "\nvoid initialize_dat_value_08004204(void)\n\n{\n  initialize_dat_value_08004204_0800346c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004204": "initialize_dat_value_08004204"
            },
            "calling": [
                "FUN_0800076c",
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800346c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004240": {
            "entrypoint": "0x08004240",
            "current_name": "calculate_offset_08004240",
            "code": "\nushort calculate_offset_08004240(int base_address)\n\n{\n  result (*(short *)(base_address + 0x138) + 0x40) - *(short *)(base_address + 0x13a) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08004240": "calculate_offset_08004240",
                "param_1": "base_address",
                "return": "result"
            },
            "calling": [
                "FUN_08004338"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042ac": {
            "entrypoint": "0x080042ac",
            "current_name": "update_combination_080042ac",
            "code": "\nvoid updateCombination_080042ac(int combination)\n\n{\n  int validationResult;\n  ushort newIndex;\n  undefined newValue;\n  \n  validationResult = validate_combination_08003e18(combination,&newValue);\n  if ((validationResult == 0) &&\n     (newIndex = *(short *)(combination + 100) + 1U & 0x3f, newIndex != *(ushort *)(combination + 0x66))) {\n    *(undefined *)(*(int *)(combination + 0x60) + (uint)*(ushort *)(combination + 100)) = newValue;\n    *(ushort *)(combination + 100) = newIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042ac": "update_combination_080042ac",
                "param_1": "combination",
                "iVar1": "validationResult",
                "uVar2": "newIndex",
                "local_9": "newValue"
            },
            "calling": [],
            "called": [
                "FUN_08003e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e8": {
            "entrypoint": "0x080042e8",
            "current_name": "update_combination_data_080042e8",
            "code": "\nundefined4 UpdateCombinationData_080042e8(int dataMemory,undefined newData)\n\n{\n  byte byteValue;\n  byte adjustedValue;\n  int combinationIndex;\n  \n  *(undefined *)(dataMemory + 0x10) = 1;\n  combinationIndex = *(ushort *)(dataMemory + 0x140) + 1;\n  byteValue = (byte)combinationIndex;\n  adjustedValue = byteValue & 0x7f;\n  if (combinationIndex == 0) {\n    adjustedValue = -(-byteValue & 0x7f);\n  }\n  do {\n  } while (*(ushort *)(dataMemory + 0x142) == (ushort)adjustedValue);\n  *(undefined *)(*(int *)(dataMemory + 0x13c) + (uint)*(ushort *)(dataMemory + 0x140)) = newData;\n  *(ushort *)(dataMemory + 0x140) = (ushort)adjustedValue;\n  combinationIndex = check_combination_08003df4(dataMemory + 0xd4);\n  if (combinationIndex == 0) {\n    update_data_08003eac(dataMemory + 0xd4,&LAB_0800420c_1);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080042e8": "update_combination_data_080042e8",
                "param_1": "dataMemory",
                "param_2": "newData",
                "bVar1": "byteValue",
                "bVar2": "adjustedValue",
                "iVar3": "combinationIndex"
            },
            "calling": [],
            "called": [
                "FUN_08003eac",
                "FUN_08003df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004338": {
            "entrypoint": "0x08004338",
            "current_name": "FUNC_08004338",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800433e) */\n/* WARNING: Removing unreachable block (ram,0x08004350) */\n/* WARNING: Removing unreachable block (ram,0x08004346) */\n/* WARNING: Removing unreachable block (ram,0x08004358) */\n\nvoid FUNC_08004338(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004338": "FUNC_08004338"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08004240"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004364": {
            "entrypoint": "0x08004364",
            "current_name": "initialize_parameters_08004364",
            "code": "\nvoid initializeParameters_08004364(int baseAddress)\n\n{\n  *(int *)(baseAddress + 0x134) = baseAddress + 0x11;\n  *(undefined2 *)(baseAddress + 0x138) = 0;\n  *(undefined2 *)(baseAddress + 0x13a) = 0;\n  *(int *)(baseAddress + 0x13c) = baseAddress + 0x51;\n  *(undefined2 *)(baseAddress + 0x140) = 0;\n  *(undefined2 *)(baseAddress + 0x142) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004364": "initialize_parameters_08004364",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004388": {
            "entrypoint": "0x08004388",
            "current_name": "configure_uart_pin_and_combination_08004388",
            "code": "\nvoid configureUartPinAndCombination_08004388(int device,undefined4 baudRate,byte config)\n\n{\n  uint result;\n  byte configPart;\n  int uartFlag;\n  code *unrecoveredJumpTable;\n  \n  *(undefined4 *)(device + 0x11c) = baudRate;\n  *(byte *)(device + 0x144) = config;\n  configPart = config & 7;\n  if (configPart == 4) {\n    uartFlag = 7;\n  }\n  else if (configPart == 6) {\n    uartFlag = 8;\n  }\n  else if (configPart == 2) {\n    uartFlag = 6;\n  }\n  else {\n    uartFlag = 0;\n  }\n  if ((config & 0x30) == 0x30) {\n    *(undefined4 *)(device + 0x128) = 0x600;\n    uartFlag = uartFlag + 1;\n  }\n  else if ((config & 0x20) == 0) {\n    *(undefined4 *)(device + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(device + 0x128) = 0x400;\n    uartFlag = uartFlag + 1;\n  }\n  if ((config & 8) == 0) {\n    *(undefined4 *)(device + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(device + 0x124) = 0x2000;\n  }\n  if (uartFlag == 8) {\n    *(undefined4 *)(device + 0x120) = 0;\n  }\n  else if (uartFlag == 9) {\n    *(undefined4 *)(device + 0x120) = 0x1000;\n  }\n  else {\n    uartFlag = 0;\n  }\n  if (uartFlag != 0) {\n    configure_uart_pin_08003978(device + 0xd4);\n    update_combination_08003e54(device + 0xd4,0x80042ad);\n    return;\n  }\n  unrecoveredJumpTable = (code *)0x8004432;\n  assertion_failed_08004808(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\");\n  if (result < 0x60) {\n    uRam0000012e = *(undefined2 *)(&DAT_08005d3c + result * 2);\n  }\n  else {\n    uRam0000012e = 0xffff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*unrecoveredJumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004388": "configure_uart_pin_and_combination_08004388",
                "param_1": "device",
                "param_2": "baudRate",
                "param_3": "config",
                "extraout_r1": "result",
                "bVar1": "configPart",
                "iVar2": "uartFlag",
                "UNRECOVERED_JUMPTABLE": "unrecoveredJumpTable"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "FUN_08004808",
                "FUN_08003978",
                "FUN_08003e54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004444": {
            "entrypoint": "0x08004444",
            "current_name": "initialize_value_08004444",
            "code": "\nvoid initializeValue_08004444(int baseAddress,uint offset)\n\n{\n  undefined2 value;\n  code *jumpTable;\n  \n  if (offset < 0x60) {\n    value = *(undefined2 *)(&DAT_08005d3c + offset * 2);\n  }\n  else {\n    value = 0xffff;\n  }\n  *(undefined2 *)(baseAddress + 0x12e) = value;\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004444": "initialize_value_08004444",
                "param_1": "baseAddress",
                "param_2": "offset",
                "uVar1": "value",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004460": {
            "entrypoint": "0x08004460",
            "current_name": "copy_data_to_buffer_08004460",
            "code": "\nvoid copyDataToBuffer_08004460(int destination,uint index)\n\n{\n  undefined2 dataValue;\n  \n  if (index < 0x60) {\n    dataValue = *(undefined2 *)(&DAT_08005d3c + index * 2);\n  }\n  else {\n    dataValue = 0xffff;\n  }\n  *(undefined2 *)(destination + 300) = dataValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004460": "copy_data_to_buffer_08004460",
                "param_1": "destination",
                "param_2": "index",
                "uVar1": "dataValue"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800447c": {
            "entrypoint": "0x0800447c",
            "current_name": "initialize_parameters_0800447c",
            "code": "\nundefined4 *\ninitialize_parameters_0800447c(undefined4 *parameters,undefined4 value,undefined4 data,undefined4 buffer)\n\n{\n  undefined2 parameter_value;\n  \n  parameters[1] = 0;\n  parameters[2] = 1000;\n  *parameters = &PTR_FUN_080042e8_1_08005ed4;\n  if (parameters == &DAT_20000338) {\n    initialize_value_08004444(&DAT_20000338,0x4c,data,&DAT_20000338,buffer);\n    copy_data_to_buffer_08004460(&DAT_20000338,0x4d);\n  }\n  else {\n    parameter_value = check_parameter_value_0800351e(value,&DAT_08005c10);\n    *(undefined2 *)((int)parameters + 0x12e) = parameter_value;\n    parameter_value = check_parameter_value_0800351e(value,&DAT_08005ca0);\n    *(undefined2 *)(parameters + 0x4b) = parameter_value;\n  }\n  initialize_parameters_0800447c_08004364(parameters);\n  return parameters;\n}\n\n",
            "renaming": {
                "FUN_0800447c": "initialize_parameters_0800447c",
                "param_1": "parameters",
                "param_2": "value",
                "param_3": "data",
                "param_4": "buffer",
                "uVar1": "parameter_value"
            },
            "calling": [
                "FUN_080044d8"
            ],
            "called": [
                "FUN_08004460",
                "FUN_08004444",
                "FUN_0800351e",
                "FUN_08004364"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044d8": {
            "entrypoint": "0x080044d8",
            "current_name": "initialize_if_param_one_equals_080044d8",
            "code": "\nvoid initialize_if_param_one_equals_080044d8(int condition,int value,undefined4 parameter_1,undefined4 parameter_2)\n\n{\n  if (condition != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    initialize_parameters(&DAT_20000338,0x40004800,parameter_1,0xffff,parameter_2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044d8": "initialize_if_param_one_equals_080044d8",
                "param_1": "condition",
                "param_2": "value",
                "param_3": "parameter_1",
                "param_4": "parameter_2",
                "initialize_parameters_0800447c": "initialize_parameters"
            },
            "calling": [],
            "called": [
                "FUN_0800447c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004544": {
            "entrypoint": "0x08004544",
            "current_name": "initialize_data_08004544",
            "code": "\nvoid initializeData_08004544(undefined4 *dataPtr,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *dataPtr = &DAT_08005f28;\n  *(undefined *)(dataPtr + 1) = value1;\n  *(undefined *)((int)dataPtr + 5) = value2;\n  *(undefined *)((int)dataPtr + 6) = value3;\n  *(undefined *)((int)dataPtr + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004544": "initialize_data_08004544",
                "param_1": "dataPtr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08004560"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004560": {
            "entrypoint": "0x08004560",
            "current_name": "initialize_if_necessary_08004560",
            "code": "\nvoid initialize_if_necessary_08004560(int condition_1,int condition_2)\n\n{\n  if ((condition_1 == 1) && (condition_2 == 0xffff)) {\n    initialize_data_08004544(&DAT_20000480,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004560": "initialize_if_necessary_08004560",
                "param_1": "condition_1",
                "param_2": "condition_2"
            },
            "calling": [],
            "called": [
                "FUN_08004544"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004640": {
            "entrypoint": "0x08004640",
            "current_name": "combine_values_08004640",
            "code": "\nuint combineValues_08004640(int variable1,uint variable2)\n\n{\n  return variable2 | variable1 << 8;\n}\n\n",
            "renaming": {
                "FUN_08004640": "combine_values_08004640",
                "param_1": "variable1",
                "param_2": "variable2"
            },
            "calling": [
                "FUN_08000a7a",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_080007f0",
                "FUN_08000a4e",
                "FUN_080008e2",
                "FUN_08000a00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004646": {
            "entrypoint": "0x08004646",
            "current_name": "FUNC_08004646",
            "code": "\nvoid FUNC_08004646(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004646": "FUNC_08004646"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004648": {
            "entrypoint": "0x08004648",
            "current_name": "initialize_and_update_data_08004648",
            "code": "\nvoid initialize_and_update_data_08004648(void)\n\n{\n  update_data_register(3);\n  initialize_application();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004648": "initialize_and_update_data_08004648",
                "update_data_register_08000e3c": "update_data_register",
                "initialize_application_08000d8e": "initialize_application"
            },
            "calling": [
                "FUN_08004884"
            ],
            "called": [
                "FUN_08000d8e",
                "FUN_08000e3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004658": {
            "entrypoint": "0x08004658",
            "current_name": "process_data_loop_08004658",
            "code": "\nvoid process_data_loop_08004658(void)\n\n{\n  FUNC_08004646();\n  initialize_system_and_device();\n  do {\n    process_data();\n    FUNC_08004338();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004658": "process_data_loop_08004658",
                "initialize_system_and_device_08000c4c": "initialize_system_and_device",
                "process_data_08000c64": "process_data"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08000c4c",
                "FUN_08004646",
                "FUN_08004338",
                "FUN_08000c64"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004678": {
            "entrypoint": "0x08004678",
            "current_name": "count_set_bits_08004678",
            "code": "\nchar countSetBits_08004678(uint input)\n\n{\n  char bitCount;\n  \n  bitCount = '\\0';\n  for (; input != 1; input = input >> 1) {\n    bitCount = bitCount + '\\x01';\n  }\n  return bitCount;\n}\n\n",
            "renaming": {
                "FUN_08004678": "count_set_bits_08004678",
                "param_1": "input",
                "cVar1": "bitCount"
            },
            "calling": [
                "FUN_080047d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046b4": {
            "entrypoint": "0x080046b4",
            "current_name": "initialize_data_080046b4",
            "code": "\nvoid initializeData_080046b4(int value1,int value2,undefined4 param3,undefined4 param4)\n\n{\n  if (value1 != 1) {\n    return;\n  }\n  if (value2 == 0xffff) {\n    DAT_20000488 = 6;\n    DAT_20000494 = 0;\n    DAT_2000049c = 7;\n    DAT_200004a8 = 0;\n    DAT_200004b0 = 8;\n    DAT_200004bc = 0;\n    DAT_200004c4 = 9;\n    DAT_200004d0 = 0;\n    DAT_200004d8 = 10;\n    DAT_200004e4 = 0;\n    DAT_200004ec = 0x17;\n    DAT_200004f8 = 0;\n    DAT_20000500 = 0x17;\n    DAT_2000050c = 0;\n    DAT_20000514 = 0x17;\n    DAT_20000520 = 0;\n    DAT_20000528 = 0x17;\n    DAT_20000534 = 0;\n    DAT_2000053c = 0x17;\n    DAT_20000548 = 0;\n    DAT_20000550 = 0x28;\n    DAT_2000055c = 0;\n    DAT_20000564 = 0x28;\n    DAT_20000570 = 0;\n    DAT_20000578 = 0x28;\n    DAT_20000584 = 0;\n    DAT_2000058c = 0x28;\n    DAT_20000598 = 0;\n    DAT_200005a0 = 0x28;\n    DAT_200005ac = 0;\n    DAT_200005b4 = 0x28;\n    DAT_200005c0 = 0;\n    shift_left_by32_bits_080047fe(0,&LAB_0800468c_1,&DAT_20000000,&DAT_20000488,param4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046b4": "initialize_data_080046b4",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [],
            "called": [
                "FUN_080047fe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047c0": {
            "entrypoint": "0x080047c0",
            "current_name": "check_and_execute_080047c0",
            "code": "\nvoid checkAndExecute_080047c0(int input)\n\n{\n  int bitCount;\n  \n  if (*(int *)(input + 8) != 0) {\n    (**(code **)(input + 0xc))();\n    return;\n  }\n  initializeData();\n  bitCount = countSetBits();\n  if ((&DAT_20000494)[bitCount * 5] != 0) {\n    checkAndExecute_080047c0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047c0": "check_and_execute_080047c0",
                "param_1": "input",
                "iVar1": "bitCount",
                "initialize_data_08005760": "initializeData",
                "count_set_bits_08004678": "countSetBits"
            },
            "calling": [
                "FUN_080047d0"
            ],
            "called": [
                "FUN_08005760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047d0": {
            "entrypoint": "0x080047d0",
            "current_name": "check_and_execute_if_bit_set_080047d0",
            "code": "\nvoid check_and_execute_if_bit_set_080047d0(void)\n\n{\n  int bitCount;\n  \n  bitCount = count_set_bits_08004678();\n  if ((&DAT_20000494)[bitCount * 5] != 0) {\n    check_and_execute_080047c0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047d0": "check_and_execute_if_bit_set_080047d0",
                "iVar1": "bitCount"
            },
            "calling": [
                "FUN_080011a4"
            ],
            "called": [
                "FUN_080047c0",
                "FUN_08004678"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047fe": {
            "entrypoint": "0x080047fe",
            "current_name": "shift_left_by32_bits_080047fe",
            "code": "\nvoid shiftLeftBy32Bits_080047fe(undefined4 input1,undefined4 input2)\n\n{\n  left_shift_by32_bits_08004844(input2,input1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047fe": "shift_left_by32_bits_080047fe",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "FUN_080046b4"
            ],
            "called": [
                "FUN_08004844"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004808": {
            "entrypoint": "0x08004808",
            "current_name": "assertion_failed_08004808",
            "code": "\nvoid assertionFailed_08004808(undefined4 file,undefined4 line,char *errorMessage,undefined4 functionName)\n\n{\n  undefined4 dataPointer;\n  char *additionalMessage;\n  undefined8 result;\n  undefined4 extraParameter;\n  \n  dataPointer = *(undefined4 *)(DAT_200000a0 + 0xc);\n  extraParameter = functionName;\n  if (errorMessage == (char *)0x0) goto LAB_0800482c;\n  additionalMessage = \", function: \";\n  do {\n    process_data_08004860(dataPointer,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",functionName,file,line\n                 ,additionalMessage,errorMessage,extraParameter);\n    result = process_data_080051ac();\n    line = (undefined4)((ulonglong)result >> 0x20);\n    dataPointer = (undefined4)result;\nLAB_0800482c:\n    errorMessage = \"\";\n    additionalMessage = errorMessage;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004808": "assertion_failed_08004808",
                "param_1": "file",
                "param_2": "line",
                "param_3": "errorMessage",
                "param_4": "functionName",
                "uVar1": "dataPointer",
                "pcVar2": "additionalMessage",
                "uVar3": "result",
                "uVar4": "extraParameter"
            },
            "calling": [
                "FUN_08004388"
            ],
            "called": [
                "FUN_080051ac",
                "FUN_08004860"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004844": {
            "entrypoint": "0x08004844",
            "current_name": "left_shift_by32_bits_08004844",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800484c) */\n\nlonglong leftShiftBy32Bits_08004844(undefined4 input1,uint input2)\n\n{\n  return (ulonglong)input2 << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08004844": "left_shift_by32_bits_08004844",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "FUN_080047fe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004860": {
            "entrypoint": "0x08004860",
            "current_name": "process_data_08004860",
            "code": "\nvoid processData_08004860(undefined4 input1,undefined4 input2,undefined4 stackPointer1,undefined4 stackPointer2)\n\n{\n  undefined4 stackVar1;\n  undefined4 stackVar2;\n  \n  stackVar1 = stackPointer1;\n  stackVar2 = stackPointer2;\n  process_data_08004a84(DAT_200000a0,input1,input2,&stackVar1,input1,&stackVar1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004860": "process_data_08004860",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "stackPointer1",
                "param_4": "stackPointer2",
                "uStack_8": "stackVar1",
                "uStack_4": "stackVar2"
            },
            "calling": [
                "FUN_08004808"
            ],
            "called": [
                "FUN_08004a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004884": {
            "entrypoint": "0x08004884",
            "current_name": "execute_functions_08004884",
            "code": "\nvoid executeFunctions_08004884(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(functionArray *)(&DAT_08006008)[index])();\n  }\n  FUNC_080059f8();\n  for (index = 0; index != 10; index = index + 1) {\n    (*(functionArray *)(&DAT_08006008)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004884": "execute_functions_08004884",
                "iVar1": "index",
                "code": "functionArray"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08004648",
                "FUN_080059f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048cc": {
            "entrypoint": "0x080048cc",
            "current_name": "fill_memory_080048cc",
            "code": "\nvoid fillMemory_080048cc(undefined *memoryLocation,undefined value,int size)\n\n{\n  undefined *endAddress;\n  \n  endAddress = memoryLocation + size;\n  for (; memoryLocation != endAddress; memoryLocation = memoryLocation + 1) {\n    *memoryLocation = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048cc": "fill_memory_080048cc",
                "param_1": "memoryLocation",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "endAddress"
            },
            "calling": [
                "FUN_0800532c",
                "FUN_08005374",
                "FUN_08005400"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048dc": {
            "entrypoint": "0x080048dc",
            "current_name": "update_pointer_list_080048dc",
            "code": "\nvoid updatePointerList_080048dc(undefined4 *outputPointer,int numPointers,undefined4 arg3,undefined4 arg4)\n\n{\n  int *tempPtr;\n  int **tempPtrPtr;\n  int **tempPtrPtr1;\n  int **tempPtrPtr2;\n  int **tempPtrPtr3;\n  int **currPtrPtr;\n  bool isCurrPtrValid;\n  \n  if (numPointers == 0) {\n    return;\n  }\n  currPtrPtr = (int **)(numPointers + -4);\n  if (*(int *)(numPointers + -4) < 0) {\n    currPtrPtr = (int **)((int)currPtrPtr + *(int *)(numPointers + -4));\n  }\n  FUNC_0800557c();\n  tempPtrPtr2 = (int **)&DAT_200005c8;\n  if (DAT_200005c8 == (int **)0x0) {\n    currPtrPtr[1] = (int *)0x0;\n    tempPtrPtr1 = tempPtrPtr;\n    DAT_200005c8 = currPtrPtr;\n  }\n  else {\n    tempPtrPtr2 = DAT_200005c8;\n    if (currPtrPtr < DAT_200005c8) {\n      tempPtrPtr1 = (int **)*currPtrPtr;\n      tempPtrPtr2 = (int **)((int)currPtrPtr + (int)tempPtrPtr1);\n      isCurrPtrValid = DAT_200005c8 == tempPtrPtr2;\n      if (isCurrPtrValid) {\n        tempPtrPtr2 = (int **)*DAT_200005c8;\n        DAT_200005c8 = (int **)DAT_200005c8[1];\n      }\n      currPtrPtr[1] = (int *)DAT_200005c8;\n      DAT_200005c8 = currPtrPtr;\n      if (isCurrPtrValid) {\n        tempPtrPtr2 = (int **)((int)tempPtrPtr2 + (int)tempPtrPtr1);\n        *currPtrPtr = (int *)tempPtrPtr2;\n      }\n    }\n    else {\n      do {\n        tempPtrPtr3 = tempPtrPtr2;\n        tempPtrPtr2 = (int **)tempPtrPtr3[1];\n        if (tempPtrPtr2 == (int **)0x0) break;\n      } while (tempPtrPtr2 <= currPtrPtr);\n      tempPtrPtr1 = (int **)*tempPtrPtr3;\n      if ((int **)((int)tempPtrPtr3 + (int)tempPtrPtr1) == currPtrPtr) {\n        tempPtrPtr1 = (int **)((int)tempPtrPtr1 + (int)*currPtrPtr);\n        *tempPtrPtr3 = (int *)tempPtrPtr1;\n        if (tempPtrPtr2 == (int **)((int)tempPtrPtr3 + (int)tempPtrPtr1)) {\n          tempPtr = *tempPtrPtr2;\n          tempPtrPtr2 = (int **)tempPtrPtr2[1];\n          tempPtrPtr3[1] = (int *)tempPtrPtr2;\n          tempPtrPtr1 = (int **)((int)tempPtrPtr1 + (int)tempPtr);\n          *tempPtrPtr3 = (int *)tempPtrPtr1;\n        }\n      }\n      else if (currPtrPtr < (int **)((int)tempPtrPtr3 + (int)tempPtrPtr1)) {\n        *outputPointer = 0xc;\n      }\n      else {\n        tempPtrPtr1 = (int **)((int)currPtrPtr + (int)*currPtrPtr);\n        isCurrPtrValid = tempPtrPtr2 == tempPtrPtr1;\n        if (isCurrPtrValid) {\n          tempPtrPtr1 = (int **)*tempPtrPtr2;\n          tempPtrPtr2 = (int **)tempPtrPtr2[1];\n        }\n        currPtrPtr[1] = (int *)tempPtrPtr2;\n        if (isCurrPtrValid) {\n          tempPtrPtr1 = (int **)((int)tempPtrPtr1 + (int)*currPtrPtr);\n          *currPtrPtr = (int *)tempPtrPtr1;\n        }\n        tempPtrPtr3[1] = (int *)currPtrPtr;\n      }\n    }\n  }\n  FUNC_0800557e(outputPointer,tempPtrPtr1,tempPtrPtr2,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048dc": "update_pointer_list_080048dc",
                "param_1": "outputPointer",
                "param_2": "numPointers",
                "param_3": "arg3",
                "param_4": "arg4",
                "piVar1": "tempPtr",
                "extraout_r1": "tempPtrPtr",
                "ppiVar2": "tempPtrPtr1",
                "ppiVar3": "tempPtrPtr2",
                "ppiVar4": "tempPtrPtr3",
                "ppiVar5": "currPtrPtr",
                "bVar6": "isCurrPtrValid"
            },
            "calling": [
                "FUN_080050d0",
                "FUN_080051ac"
            ],
            "called": [
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004978": {
            "entrypoint": "0x08004978",
            "current_name": "allocate_and_assign_memory_08004978",
            "code": "\nuint allocate_and_assign_memory_08004978(undefined4 *ptr_to_error,uint size)\n\n{\n  uint *current_ptr;\n  int offset;\n  uint *next_ptr;\n  uint diff;\n  uint *previous_ptr;\n  uint new_size;\n  \n  new_size = (size + 3 & 0xfffffffc) + 8;\n  if (new_size < 0xc) {\n    new_size = 0xc;\n  }\n  if (((int)new_size < 0) || (new_size < size)) {\n    *ptr_to_error = 0xc;\n  }\n  else {\n    FUNC_0800557c();\n    current_ptr = DAT_200005c8;\n    previous_ptr = DAT_200005c8;\n    while (next_ptr = current_ptr, next_ptr != (uint *)0x0) {\n      diff = *next_ptr - new_size;\n      if (-1 < (int)diff) {\n        if (diff < 0xc) {\n          if (previous_ptr == next_ptr) {\n            current_ptr = (uint *)previous_ptr[1];\n          }\n          else {\n            current_ptr = (uint *)next_ptr[1];\n          }\n          if (previous_ptr != next_ptr) {\n            previous_ptr[1] = (uint)current_ptr;\n            previous_ptr = next_ptr;\n            current_ptr = DAT_200005c8;\n          }\n        }\n        else {\n          *next_ptr = diff;\n          *(uint *)((int)next_ptr + diff) = new_size;\n          previous_ptr = (uint *)((int)next_ptr + diff);\n          current_ptr = DAT_200005c8;\n        }\n        goto LAB_080049dc;\n      }\n      previous_ptr = next_ptr;\n      current_ptr = (uint *)next_ptr[1];\n    }\n    if (DAT_200005cc == 0) {\n      DAT_200005cc = allocate_and_assign_memory_08004978_func(ptr_to_error);\n    }\n    current_ptr = (uint *)allocate_and_assign_memory_08004978_func(ptr_to_error,new_size);\n    if ((current_ptr != (uint *)0xffffffff) &&\n       ((previous_ptr = (uint *)((int)current_ptr + 3U & 0xfffffffc), current_ptr == previous_ptr ||\n        (offset = allocate_and_assign_memory_08004978_func(ptr_to_error,(int)previous_ptr - (int)current_ptr), offset != -1)))) {\n      *previous_ptr = new_size;\n      current_ptr = DAT_200005c8;\nLAB_080049dc:\n      DAT_200005c8 = current_ptr;\n      FUNC_0800557e(ptr_to_error);\n      new_size = (int)previous_ptr + 0xbU & 0xfffffff8;\n      offset = new_size - (int)(previous_ptr + 1);\n      if (offset != 0) {\n        *(int *)((int)previous_ptr + offset) = -offset;\n        return new_size;\n      }\n      return new_size;\n    }\n    *ptr_to_error = 0xc;\n    FUNC_0800557e(ptr_to_error);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004978": "allocate_and_assign_memory_08004978",
                "param_1": "ptr_to_error",
                "param_2": "size",
                "puVar1": "current_ptr",
                "iVar2": "offset",
                "puVar3": "next_ptr",
                "uVar4": "diff",
                "puVar5": "previous_ptr",
                "uVar6": "new_size",
                "allocate_and_assign_memory_0800500c": "allocate_and_assign_memory_func"
            },
            "calling": [
                "FUN_08005374",
                "FUN_080054fc"
            ],
            "called": [
                "FUN_0800500c",
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a34": {
            "entrypoint": "0x08004a34",
            "current_name": "process_input_08004a34",
            "code": "\nuint process_input_08004a34(int input_parameter_1,byte input_parameter_2,byte **input_parameter_3)\n\n{\n  int temp_var_1;\n  byte *temp_var_2;\n  byte *temp_var_3;\n  uint result;\n  \n  temp_var_2 = input_parameter_3[2] + -1;\n  input_parameter_3[2] = temp_var_2;\n  if ((-1 < (int)temp_var_2) ||\n     (((int)input_parameter_3[6] <= (int)temp_var_2 && (temp_var_2 = (byte *)(uint)input_parameter_2, temp_var_2 != (byte *)0xa))))\n  {\n    temp_var_2 = *input_parameter_3;\n    *input_parameter_3 = temp_var_2 + 1;\n    *temp_var_2 = input_parameter_2;\n    return (uint)input_parameter_2;\n  }\n  if ((input_parameter_1 != 0) && (*(int *)(input_parameter_1 + 0x18) == 0)) {\n    initialize_data();\n  }\n  if (input_parameter_3 == (byte **)&DAT_08005fc0) {\n    input_parameter_3 = *(byte ***)(input_parameter_1 + 4);\n  }\n  else if (input_parameter_3 == (byte **)&DAT_08005fe0) {\n    input_parameter_3 = *(byte ***)(input_parameter_1 + 8);\n  }\n  else if (input_parameter_3 == (byte **)&DAT_08005fa0) {\n    input_parameter_3 = *(byte ***)(input_parameter_1 + 0xc);\n  }\n  input_parameter_3[2] = input_parameter_3[6];\n  temp_var_3 = (byte *)(uint)*(ushort *)(input_parameter_3 + 3);\n  temp_var_1 = (int)temp_var_3 << 0x1c;\n  if (((temp_var_1 < 0) && (temp_var_3 = input_parameter_3[4], temp_var_3 != (byte *)0x0)) ||\n     (temp_var_1 = process_input_08004a34_data(input_parameter_1,input_parameter_3,temp_var_1,temp_var_3,temp_var_2), temp_var_1 == 0)) {\n    temp_var_1 = (int)*input_parameter_3 - (int)input_parameter_3[4];\n    result = (uint)input_parameter_2;\n    if ((temp_var_1 < (int)input_parameter_3[5]) || (temp_var_1 = verify_and_execute_payload(input_parameter_1,input_parameter_3), temp_var_1 == 0)) {\n      input_parameter_3[2] = input_parameter_3[2] + -1;\n      temp_var_2 = *input_parameter_3;\n      *input_parameter_3 = temp_var_2 + 1;\n      *temp_var_2 = input_parameter_2;\n      if ((byte *)(temp_var_1 + 1) != input_parameter_3[5]) {\n        if (-1 < (int)((uint)*(ushort *)(input_parameter_3 + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      temp_var_1 = verify_and_execute_payload(input_parameter_1,input_parameter_3);\n      if (temp_var_1 == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004a34": "process_input_08004a34",
                "param_1": "input_parameter_1",
                "param_2": "input_parameter_2",
                "param_3": "input_parameter_3",
                "iVar1": "temp_var_1",
                "pbVar2": "temp_var_2",
                "pbVar3": "temp_var_3",
                "uVar4": "result",
                "initialize_data_080053a0": "initialize_data",
                "process_input_080050d0": "process_input_data",
                "verify_and_execute_payload_080052cc": "verify_and_execute_payload"
            },
            "calling": [
                "FUN_08004a60"
            ],
            "called": [
                "FUN_080050d0",
                "FUN_080053a0",
                "FUN_080052cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a60": {
            "entrypoint": "0x08004a60",
            "current_name": "process_and_count_08004a60",
            "code": "\nint process_and_count_08004a60(undefined4 param_input,undefined4 param_count,undefined *input_array,int array_length)\n\n{\n  int result;\n  undefined *end_ptr;\n  int current_index;\n  \n  end_ptr = input_array + array_length;\n  current_index = array_length;\n  do {\n    if (input_array == end_ptr) {\n      return 0;\n    }\n    result = process_input_08004a34(param_input,*input_array,param_count,array_length,current_index);\n    array_length = result + 1;\n    input_array = input_array + 1;\n  } while (array_length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004a60": "process_and_count_08004a60",
                "param_1": "param_input",
                "param_2": "param_count",
                "param_3": "input_array",
                "param_4": "array_length",
                "iVar1": "result",
                "puVar2": "end_ptr",
                "iVar3": "current_index"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08004a34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "process_data_08004a84",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08004c58) */\n\nint process_data_08004a84(int data_ptr,undefined4 *param_ptr,byte *input_ptr,int *count_ptr)\n\n{\n  int result;\n  int *temp_ptr;\n  bool is_number;\n  byte *current_char_ptr;\n  byte *next_char_ptr;\n  int temp_var1;\n  int temp_var2;\n  int *result_ptr;\n  uint flags;\n  int precision;\n  undefined4 temp_var3;\n  int width;\n  int total_chars;\n  byte conversion_specifier;\n  undefined space_flag;\n  undefined plus_flag;\n  undefined hash_flag;\n  undefined4 zero_flag;\n  \n  result_ptr = count_ptr;\n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x18) == 0)) {\n    initialize_data_080053a0();\n  }\n  if (param_ptr == &DAT_08005fc0) {\n    param_ptr = *(undefined4 **)(data_ptr + 4);\n  }\n  else if (param_ptr == (undefined4 *)&DAT_08005fe0) {\n    param_ptr = *(undefined4 **)(data_ptr + 8);\n  }\n  else if (param_ptr == (undefined4 *)&DAT_08005fa0) {\n    param_ptr = *(undefined4 **)(data_ptr + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_ptr + 3) << 0x1c)) || (param_ptr[4] == 0)) &&\n     (temp_var2 = process_input_080050d0(data_ptr,param_ptr), temp_var2 != 0)) {\n    return -1;\n  }\n  total_chars = 0;\n  space_flag = 0x20;\n  plus_flag = 0x30;\n  current_char_ptr = input_ptr;\nLAB_08004ac6:\n  next_char_ptr = current_char_ptr;\n  if (*next_char_ptr != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  current_char_ptr = next_char_ptr + 1;\n  if (*next_char_ptr != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  temp_var2 = (int)next_char_ptr - (int)input_ptr;\n  if (temp_var2 != 0) {\n    result = process_and_count_08004a60(data_ptr,param_ptr,input_ptr,temp_var2);\n    if (result == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(param_ptr + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_chars;\n    }\n    total_chars = total_chars + temp_var2;\n  }\n  if (*next_char_ptr == 0) goto LAB_08004c70;\n  flags = 0;\n  width = 0;\n  precision = -1;\n  temp_var3 = 0;\n  hash_flag = 0;\n  zero_flag = 0;\n  current_char_ptr = next_char_ptr + 1;\n  while( true ) {\n    temp_var2 = find_byte_sequence_08000230(\"#-0+ \",*current_char_ptr);\n    input_ptr = current_char_ptr + 1;\n    if (temp_var2 == 0) break;\n    flags = 1 << (temp_var2 + 0xf7ffa094U & 0xff) | flags;\n    current_char_ptr = input_ptr;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    hash_flag = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    hash_flag = 0x2b;\n  }\n  if (*current_char_ptr == 0x2a) {\n    temp_ptr = result_ptr + 1;\n    temp_var2 = *result_ptr;\n    result_ptr = temp_ptr;\n    if (temp_var2 < 0) {\n      width = -temp_var2;\n      flags = flags | 2;\n      goto LAB_08004bae;\n    }\n  }\n  else {\n    is_number = false;\n    temp_var2 = width;\n    input_ptr = current_char_ptr;\n    while( true ) {\n      if (9 < *input_ptr - 0x30) break;\n      temp_var2 = temp_var2 * 10 + (*input_ptr - 0x30);\n      is_number = true;\n      input_ptr = input_ptr + 1;\n    }\n    if (!is_number) goto LAB_08004bae;\n  }\n  width = temp_var2;\nLAB_08004bae:\n  if (*input_ptr == 0x2e) {\n    if (input_ptr[1] == 0x2a) {\n      precision = *result_ptr;\n      if (precision < 0) {\n        precision = -1;\n      }\n      input_ptr = input_ptr + 2;\n      result_ptr = result_ptr + 1;\n    }\n    else {\n      is_number = false;\n      precision = 0;\n      temp_var2 = 0;\n      while( true ) {\n        input_ptr = input_ptr + 1;\n        if (9 < *input_ptr - 0x30) break;\n        temp_var2 = temp_var2 * 10 + (*input_ptr - 0x30);\n        is_number = true;\n      }\n      if (is_number) {\n        precision = temp_var2;\n      }\n    }\n  }\n  temp_var2 = find_byte_sequence_08000230(&DAT_08005f72,*input_ptr,3);\n  if (temp_var2 != 0) {\n    flags = flags | 0x40 << (temp_var2 + 0xf7ffa08eU & 0xff);\n    input_ptr = input_ptr + 1;\n  }\n  conversion_specifier = *input_ptr;\n  input_ptr = input_ptr + 1;\n  temp_var2 = find_byte_sequence_08000230(\"efgEFG\",conversion_specifier,6);\n  if (temp_var2 == 0) {\n    temp_var1 = process_data_08004a84_08004d9c(data_ptr,&flags,param_ptr,0x8004a61,&result_ptr);\n    if (temp_var1 == -1) goto LAB_08004c70;\n  }\n  else {\n    result_ptr = (int *)(((int)result_ptr + 7U & 0xfffffff8) + 8);\n  }\n  total_chars = total_chars + temp_var1;\n  current_char_ptr = input_ptr;\n  goto LAB_08004ac6;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "process_data_08004a84",
                "param_1": "data_ptr",
                "param_2": "param_ptr",
                "param_3": "input_ptr",
                "param_4": "count_ptr",
                "iVar1": "result",
                "piVar2": "temp_ptr",
                "bVar3": "is_number",
                "pbVar4": "current_char_ptr",
                "pbVar5": "next_char_ptr",
                "unaff_r9": "temp_var1",
                "iVar6": "temp_var2",
                "local_8c": "result_ptr",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "temp_var3",
                "local_7c": "width",
                "local_74": "total_chars",
                "local_70": "conversion_specifier",
                "local_6f": "space_flag",
                "local_6e": "plus_flag",
                "local_45": "hash_flag",
                "local_30": "zero_flag"
            },
            "calling": [
                "FUN_08004860",
                "FUN_08004fdc"
            ],
            "called": [
                "FUN_080050d0",
                "FUN_080053a0",
                "FUN_08000230",
                "FUN_08004a60",
                "FUN_08004d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cb0": {
            "entrypoint": "0x08004cb0",
            "current_name": "process_data_08004cb0",
            "code": "\nundefined4\nprocess_data_08004cb0(undefined4 input,uint *data_array,uint *counter,undefined4 param,code *callback)\n\n{\n  int index;\n  int result;\n  uint max_length;\n  uint iterator;\n  bool condition;\n  \n  max_length = data_array[4];\n  if ((int)data_array[4] < (int)data_array[2]) {\n    max_length = data_array[2];\n  }\n  *counter = max_length;\n  if (*(char *)((int)data_array + 0x43) != '\\0') {\n    *counter = max_length + 1;\n  }\n  if ((int)(*data_array << 0x1a) < 0) {\n    *counter = *counter + 2;\n  }\n  if ((*data_array & 6) == 0) {\n    for (index = 0; index < (int)(data_array[3] - *counter); index = index + 1) {\n      result = (*callback)(input,param,(int)data_array + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_length = (uint)*(byte *)((int)data_array + 0x43);\n  if (max_length != 0) {\n    max_length = 1;\n  }\n  if ((int)(*data_array << 0x1a) < 0) {\n    *(undefined *)((int)data_array + max_length + 0x43) = 0x30;\n    *(undefined *)((int)data_array + max_length + 0x44) = *(undefined *)((int)data_array + 0x45);\n    max_length = max_length + 2;\n  }\n  index = (*callback)(input,param,(int)data_array + 0x43,max_length);\n  if (index != -1) {\n    max_length = data_array[3];\n    condition = (*data_array & 6) == 4;\n    if (condition) {\n      max_length = max_length - *counter;\n    }\n    if (condition) {\n      max_length = max_length & ~((int)max_length >> 0x1f);\n    }\n    else {\n      max_length = 0;\n    }\n    if ((int)data_array[4] < (int)data_array[2]) {\n      max_length = max_length + (data_array[2] - data_array[4]);\n    }\n    iterator = 0;\n    while( true ) {\n      if (max_length == iterator) {\n        return 0;\n      }\n      index = (*callback)(input,param,(int)data_array + 0x1a,1);\n      if (index == -1) break;\n      iterator = iterator + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004cb0": "process_data_08004cb0",
                "param_1": "input",
                "param_2": "data_array",
                "param_3": "counter",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "index",
                "iVar2": "result",
                "uVar3": "max_length",
                "uVar4": "iterator",
                "bVar5": "condition"
            },
            "calling": [
                "FUN_08004d9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d9c": {
            "entrypoint": "0x08004d9c",
            "current_name": "process_data_08004d9c",
            "code": "\nuint processData_08004d9c(undefined4 input,uint *data,undefined4 arg,code *callback,uint **output)\n\n{\n  byte byteValue;\n  int result;\n  uint *ptr;\n  int tmp;\n  char *hexStr;\n  uint val;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint temp1;\n  uint temp2;\n  char *dst;\n  char *src;\n  uint localVars [2];\n  \n  byteValue = *(byte *)(data + 6);\n  src = (char *)((int)data + 0x43);\n  if (byteValue != 0x6e) {\n    if (byteValue < 0x6f) {\n      if (byteValue != 99) {\n        if (byteValue < 100) {\n          if (byteValue == 0) goto LAB_08004f56;\n          if (byteValue != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)data + 0x45) = 0x58;\n          hexStr = \"0123456789ABCDEF\";\nLAB_08004ee6:\n          val = *data;\n          ptr = *output;\n          *output = ptr + 1;\n          if (((val & 0x80) == 0) && ((int)(val << 0x19) < 0)) {\n            temp1 = (uint)*(ushort *)ptr;\n          }\n          else {\n            temp1 = *ptr;\n          }\n          if ((int)(val << 0x1f) < 0) {\n            *data = val | 0x20;\n          }\n          if (temp1 == 0) {\n            *data = *data & 0xffffffdf;\n          }\n          val = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)data + 0x43) = 0;\n        }\n        else {\n          if ((byteValue != 100) && (byteValue != 0x69)) goto LAB_08004dcc;\n          temp1 = *data;\n          ptr = *output;\n          if ((temp1 & 0x80) == 0) {\n            *output = ptr + 1;\n            if ((temp1 & 0x40) == 0) goto LAB_08004dec;\n            temp1 = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *output = ptr + 1;\nLAB_08004dec:\n            temp1 = *ptr;\n          }\n          if ((int)temp1 < 0) {\n            temp1 = -temp1;\n            *(undefined *)((int)data + 0x43) = 0x2d;\n          }\n          hexStr = \"0123456789ABCDEF\";\n          val = 10;\n        }\n        temp2 = data[1];\n        data[2] = temp2;\n        dst = src;\n        if ((int)temp2 < 0) {\n          if (temp1 != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(char *)((int)data + 0x42) = *hexStr;\n          dst = (char *)((int)data + 0x42);\n        }\n        else {\n          *data = *data & 0xfffffffb;\n          if (temp1 == 0) {\n            if (temp2 != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              temp2 = temp1 / val;\n              dst = dst + -1;\n              *dst = hexStr[temp1 - val * temp2];\n              temp1 = temp2;\n            } while (temp2 != 0);\n          }\n        }\n        if (((val == 8) && ((int)(*data << 0x1f) < 0)) && ((int)data[1] <= (int)data[4]))\n        {\n          dst[-1] = '0';\n          dst = dst + -1;\n        }\n        data[4] = (int)src - (int)dst;\n        src = dst;\n        goto LAB_08004ec2;\n      }\n      ptr = *output;\n      *output = ptr + 1;\n      *(char *)((int)data + 0x42) = (char)*ptr;\nLAB_08004e2c:\n      src = (char *)((int)data + 0x42);\n      temp1 = 1;\n    }\n    else {\n      if (byteValue != 0x73) {\n        if (byteValue < 0x74) {\n          if (byteValue == 0x6f) {\nLAB_08004e52:\n            temp1 = *data;\n            ptr = *output;\n            if ((temp1 & 0x80) == 0) {\n              *output = ptr + 1;\n              if ((temp1 & 0x40) == 0) goto LAB_08004e60;\n              temp1 = (uint)*(ushort *)ptr;\n            }\n            else {\n              *output = ptr + 1;\nLAB_08004e60:\n              temp1 = *ptr;\n            }\n            hexStr = \"0123456789ABCDEF\";\n            if (byteValue == 0x6f) {\n              val = 8;\n            }\n            else {\n              val = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (byteValue == 0x70) {\n            *data = *data | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)data + 0x45) = 0x78;\n            hexStr = \"0123456789abcdef\";\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (byteValue == 0x75) goto LAB_08004e52;\n          if (byteValue == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)data + 0x42) = byteValue;\n        goto LAB_08004e2c;\n      }\n      ppcVar8 = (char **)*output;\n      *output = (uint *)(ppcVar8 + 1);\n      src = *ppcVar8;\n      result = find_byte_sequence_08000230(src,0,data[1]);\n      if (result != 0) {\n        data[1] = result - (int)src;\n      }\n      temp1 = data[1];\n    }\n    data[4] = temp1;\n    *(undefined *)((int)data + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  temp1 = *data;\n  ppuVar7 = (uint **)*output;\n  val = data[5];\n  if ((temp1 & 0x80) == 0) {\n    *output = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\n    if ((temp1 & 0x40) == 0) goto LAB_08004f42;\n    *(short *)ptr = (short)val;\n  }\n  else {\n    *output = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\nLAB_08004f42:\n    *ptr = val;\n  }\nLAB_08004f56:\n  data[4] = 0;\nLAB_08004ec2:\n  result = process_data_08004cb0(input,data,localVars,arg,callback);\n  if ((result == -1) || (result = (*callback)(input,arg,src,data[4]), result == -1)) {\nLAB_08004ed6:\n    temp1 = 0xffffffff;\n  }\n  else {\n    if ((int)(*data << 0x1e) < 0) {\n      for (result = 0; result < (int)(data[3] - localVars[0]); result = result + 1) {\n        tmp = (*callback)(input,arg,(int)data + 0x19,1);\n        if (tmp == -1) goto LAB_08004ed6;\n      }\n    }\n    temp1 = data[3];\n    if ((int)data[3] < (int)localVars[0]) {\n      temp1 = localVars[0];\n    }\n  }\n  return temp1;\n}\n\n",
            "renaming": {
                "FUN_08004d9c": "process_data_08004d9c",
                "param_1": "input",
                "param_2": "data",
                "param_3": "arg",
                "param_4": "callback",
                "param_5": "output",
                "bVar1": "byteValue",
                "iVar2": "result",
                "puVar3": "ptr",
                "iVar4": "tmp",
                "pcVar5": "hexStr",
                "uVar6": "val",
                "uVar9": "temp1",
                "uVar10": "temp2",
                "pcVar11": "dst",
                "pcVar12": "src",
                "local_24": "localVars"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000230",
                "FUN_08004cb0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fdc": {
            "entrypoint": "0x08004fdc",
            "current_name": "initialize_and_process_data_08004fdc",
            "code": "\nvoid initialize_and_process_data_08004fdc(undefined4 data_ptr_1,undefined4 data_ptr_2,undefined4 data_ptr_3,undefined4 data_ptr_4)\n\n{\n  int dat_a0;\n  undefined4 param_1_copy;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  \n  dat_a0 = DAT_200000a0;\n  param_1_copy = data_ptr_1;\n  param_2_copy = data_ptr_2;\n  param_3_copy = data_ptr_3;\n  param_4_copy = data_ptr_4;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    initialize_data_080053a0(DAT_200000a0);\n  }\n  process_data_08004a84(dat_a0,*(undefined4 *)(dat_a0 + 8),data_ptr_1,&param_2_copy,param_1_copy,&param_2_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fdc": "initialize_and_process_data_08004fdc",
                "param_1": "data_ptr_1",
                "param_2": "data_ptr_2",
                "param_3": "data_ptr_3",
                "param_4": "data_ptr_4",
                "iVar1": "dat_a0",
                "uVar2": "param_1_copy",
                "uStack_c": "param_2_copy",
                "uStack_8": "param_3_copy",
                "uStack_4": "param_4_copy"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [
                "FUN_080053a0",
                "FUN_08004a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800500c": {
            "entrypoint": "0x0800500c",
            "current_name": "allocate_and_assign_memory_0800500c",
            "code": "\nvoid allocateAndAssignMemory_0800500c(int *outputPointer,undefined4 numBytes)\n\n{\n  int allocationResult;\n  \n  DAT_20000674 = 0;\n  allocationResult = allocate_memory_08004094(numBytes);\n  if ((allocationResult == -1) && (DAT_20000674 != 0)) {\n    *outputPointer = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800500c": "allocate_and_assign_memory_0800500c",
                "param_1": "outputPointer",
                "param_2": "numBytes",
                "iVar1": "allocationResult"
            },
            "calling": [
                "FUN_08004978"
            ],
            "called": [
                "FUN_08004094"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050d0": {
            "entrypoint": "0x080050d0",
            "current_name": "process_input_080050d0",
            "code": "\nuint processInput_080050d0(undefined4 *output_param,undefined4 *input_param)\n\n{\n  int data;\n  uint result;\n  ushort flags;\n  \n  data = DAT_200000a0;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    initialize_data_080053a0(DAT_200000a0);\n  }\n  if (input_param == &DAT_08005fc0) {\n    input_param = *(undefined4 **)(data + 4);\n  }\n  else if (input_param == (undefined4 *)&DAT_08005fe0) {\n    input_param = *(undefined4 **)(data + 8);\n  }\n  else if (input_param == (undefined4 *)&DAT_08005fa0) {\n    input_param = *(undefined4 **)(data + 0xc);\n  }\n  flags = *(ushort *)(input_param + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output_param = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)input_param[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input_param[0xd] != input_param + 0x11) {\n          update_pointer_list_080048dc(output_param);\n        }\n        input_param[0xd] = 0;\n      }\n      *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) & 0xffdb;\n      input_param[1] = 0;\n      *input_param = input_param[4];\n    }\n    *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) | 8;\n  }\n  if ((input_param[4] == 0) && ((*(ushort *)(input_param + 3) & 0x280) != 0x200)) {\n    allocate_memory_and_update_status_080054fc(output_param,input_param);\n  }\n  flags = *(ushort *)(input_param + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = input_param[5];\n    }\n    input_param[2] = result;\n  }\n  else {\n    input_param[2] = 0;\n    input_param[6] = -input_param[5];\n  }\n  if (input_param[4] == 0) {\n    flags = *(ushort *)(input_param + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\nLAB_08005100:\n      *(ushort *)(input_param + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080050d0": "process_input_080050d0",
                "param_1": "output_param",
                "param_2": "input_param",
                "iVar1": "data",
                "uVar2": "result",
                "uVar3": "flags"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004a34"
            ],
            "called": [
                "FUN_080048dc",
                "FUN_080053a0",
                "FUN_080054fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_080050d0(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_200000a0;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    FUNC_080053a0(DAT_200000a0);\n  }\n  if (param_2 == &DAT_08005fc0) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_08005fe0) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_08005fa0) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          update_pointer_list_080048dc(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_memory_and_update_status_080054fc(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08005100:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_080051ac": {
            "entrypoint": "0x080051ac",
            "current_name": "process_data_080051ac",
            "code": "\nvoid processData_080051ac(void)\n\n{\n  uint *pointer;\n  int newValue;\n  int *dataValues;\n  int *pointerList;\n  uint ushortValue;\n  ushort ushortFlag;\n  int tempValue;\n  code *functionPointer;\n  int loopCounter;\n  uint originalValue;\n  code *jumpTable;\n  bool isZero;\n  undefined8 resultValue;\n  \n  process_handler_080055d0(6);\n  jumpTable = (code *)0x80051bb;\n  resultValue = endless_loop_080040f8(1);\n  dataValues = (int *)((ulonglong)resultValue >> 0x20);\n  pointer = (uint *)resultValue;\n  ushortFlag = *(ushort *)(dataValues + 3);\n  ushortValue = (uint)ushortFlag;\n  if ((int)(ushortValue << 0x1c) < 0) {\n    newValue = dataValues[4];\n    if (newValue != 0) {\n      tempValue = ushortValue << 0x1e;\n      isZero = tempValue == 0;\n      loopCounter = *dataValues;\n      if (isZero) {\n        tempValue = dataValues[5];\n      }\n      *dataValues = newValue;\n      if (!isZero) {\n        tempValue = 0;\n      }\n      dataValues[2] = tempValue;\n      for (loopCounter = loopCounter - newValue; 0 < loopCounter; loopCounter = loopCounter - tempValue) {\n        tempValue = (*(code *)dataValues[10])(pointer,dataValues[8],newValue,loopCounter);\n        if (tempValue < 1) {\n          ushortFlag = *(ushort *)(dataValues + 3);\n          goto LAB_080052b2;\n        }\n        newValue = newValue + tempValue;\n      }\n    }\n  }\n  else if (((0 < dataValues[1]) || (0 < dataValues[0x10])) &&\n          (functionPointer = (code *)dataValues[0xb], functionPointer != (code *)0x0)) {\n    originalValue = *pointer;\n    *pointer = 0;\n    if ((ushortFlag & 0x1000) == 0) {\n      newValue = (*functionPointer)(pointer,dataValues[8],ushortValue & 0x1000,1);\n      if ((newValue == -1) && (ushortValue = *pointer, ushortValue != 0)) {\n        if ((ushortValue != 0x1d) && (ushortValue != 0x16)) {\n          *(ushort *)(dataValues + 3) = *(ushort *)(dataValues + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jumpTable)();\n          return;\n        }\n        *pointer = originalValue;\n        goto LAB_080051d6;\n      }\n    }\n    else {\n      newValue = dataValues[0x15];\n    }\n    if (((int)((uint)*(ushort *)(dataValues + 3) << 0x1d) < 0) &&\n       (newValue = newValue - dataValues[1], dataValues[0xd] != 0)) {\n      newValue = newValue - dataValues[0x10];\n    }\n    newValue = (*(code *)dataValues[0xb])(pointer,dataValues[8],newValue,0);\n    ushortFlag = *(ushort *)(dataValues + 3);\n    if ((newValue == -1) &&\n       ((0x1d < *pointer || (-1 < (int)((0x20400001U >> (*pointer & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n      *(ushort *)(dataValues + 3) = ushortFlag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)(0xffffffff);\n      return;\n    }\n    dataValues[1] = 0;\n    *dataValues = dataValues[4];\n    if (((int)((uint)ushortFlag << 0x13) < 0) && ((newValue != -1 || (*pointer == 0)))) {\n      dataValues[0x15] = newValue;\n    }\n    pointerList = (int *)dataValues[0xd];\n    *pointer = originalValue;\n    if (pointerList != (int *)0x0) {\n      if (pointerList != dataValues + 0x11) {\n        update_pointer_list_080048dc(pointer);\n      }\n      dataValues[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)();\n      return;\n    }\n  }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051ac": "process_data_080051ac",
                "piVar3": "dataValues",
                "puVar1": "pointer",
                "iVar2": "newValue",
                "piVar4": "pointerList",
                "uVar5": "ushortValue",
                "uVar6": "ushortFlag",
                "iVar7": "tempValue",
                "pcVar8": "functionPointer",
                "iVar9": "loopCounter",
                "uVar10": "originalValue",
                "bVar11": "isZero",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable",
                "uVar12": "resultValue"
            },
            "calling": [
                "FUN_08005760",
                "FUN_08004808"
            ],
            "called": [
                "FUN_080048dc",
                "FUN_080055d0",
                "FUN_080040f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052cc": {
            "entrypoint": "0x080052cc",
            "current_name": "verify_and_execute_payload_080052cc",
            "code": "\nundefined4 verify_and_execute_payload_080052cc(uint *payload_data,int *payload_info)\n\n{\n  undefined4 result;\n  int payload_size;\n  int *pointer;\n  uint temp1;\n  ushort temp2;\n  int temp3;\n  undefined4 ptr1;\n  undefined4 ptr2;\n  code *payload_func;\n  int temp4;\n  uint temp5;\n  code *jmp_table;\n  bool flag;\n  \n  if (payload_info[4] != 0) {\n    if ((payload_data != (uint *)0x0) && (payload_data[6] == 0)) {\n      initialize_data_080053a0();\n    }\n    if (payload_info == &DAT_08005fc0) {\n      payload_info = (int *)payload_data[1];\n    }\n    else if (payload_info == (int *)&DAT_08005fe0) {\n      payload_info = (int *)payload_data[2];\n    }\n    else if (payload_info == (int *)&DAT_08005fa0) {\n      payload_info = (int *)payload_data[3];\n    }\n    if (*(short *)(payload_info + 3) != 0) {\n      temp2 = *(ushort *)(payload_info + 3);\n      temp1 = (uint)temp2;\n      if ((int)(temp1 << 0x1c) < 0) {\n        payload_size = payload_info[4];\n        if (payload_size != 0) {\n          temp3 = temp1 << 0x1e;\n          flag = temp3 == 0;\n          temp4 = *payload_info;\n          if (flag) {\n            temp3 = payload_info[5];\n          }\n          *payload_info = payload_size;\n          if (!flag) {\n            temp3 = 0;\n          }\n          payload_info[2] = temp3;\n          for (temp4 = temp4 - payload_size; 0 < temp4; temp4 = temp4 - temp3) {\n            temp3 = (*(code *)payload_info[10])(payload_data,payload_info[8],payload_size,temp4,ptr1,ptr2);\n            if (temp3 < 1) {\n              temp2 = *(ushort *)(payload_info + 3);\n              goto LAB_080052b2;\n            }\n            payload_size = payload_size + temp3;\n          }\n        }\n      }\n      else if (((0 < payload_info[1]) || (0 < payload_info[0x10])) &&\n              (payload_func = (code *)payload_info[0xb], payload_func != (code *)0x0)) {\n        temp5 = *payload_data;\n        *payload_data = 0;\n        if ((temp2 & 0x1000) == 0) {\n          payload_size = (*payload_func)(payload_data,payload_info[8],temp1 & 0x1000,1);\n          if ((payload_size == -1) && (temp1 = *payload_data, temp1 != 0)) {\n            if ((temp1 != 0x1d) && (temp1 != 0x16)) {\n              *(ushort *)(payload_info + 3) = *(ushort *)(payload_info + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              result = (*jmp_table)();\n              return result;\n            }\n            *payload_data = temp5;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          payload_size = payload_info[0x15];\n        }\n        if (((int)((uint)*(ushort *)(payload_info + 3) << 0x1d) < 0) &&\n           (payload_size = payload_size - payload_info[1], payload_info[0xd] != 0)) {\n          payload_size = payload_size - payload_info[0x10];\n        }\n        payload_size = (*(code *)payload_info[0xb])(payload_data,payload_info[8],payload_size,0);\n        temp2 = *(ushort *)(payload_info + 3);\n        if ((payload_size == -1) &&\n           ((0x1d < *payload_data || (-1 < (int)((0x20400001U >> (*payload_data & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(payload_info + 3) = temp2 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*jmp_table)(0xffffffff);\n          return result;\n        }\n        payload_info[1] = 0;\n        *payload_info = payload_info[4];\n        if (((int)((uint)temp2 << 0x13) < 0) && ((payload_size != -1 || (*payload_data == 0)))) {\n          payload_info[0x15] = payload_size;\n        }\n        pointer = (int *)payload_info[0xd];\n        *payload_data = temp5;\n        if (pointer != (int *)0x0) {\n          if (pointer != payload_info + 0x11) {\n            update_pointer_list_080048dc(payload_data);\n          }\n          payload_info[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*jmp_table)();\n          return result;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      result = (*jmp_table)(0);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080052cc": "verify_and_execute_payload_080052cc",
                "param_1": "payload_data",
                "param_2": "payload_info",
                "uVar1": "result",
                "iVar2": "payload_size",
                "piVar3": "pointer",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "iVar6": "temp3",
                "unaff_r4": "ptr1",
                "unaff_r5": "ptr2",
                "pcVar7": "payload_func",
                "iVar8": "temp4",
                "uVar9": "temp5",
                "UNRECOVERED_JUMPTABLE_00": "jmp_table",
                "bVar10": "flag"
            },
            "calling": [
                "FUN_08004a34"
            ],
            "called": [
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_080052cc(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_080053a0();\n    }\n    if (param_2 == &DAT_08005fc0) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_08005fe0) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_08005fa0) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 == 0;\n          iVar8 = *param_2;\n          if (bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          if (!bVar10) {\n            iVar6 = 0;\n          }\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_080052b2;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            update_pointer_list_080048dc(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_0800532c": {
            "entrypoint": "0x0800532c",
            "current_name": "initialize_data_structure_0800532c",
            "code": "\nvoid initializeDataStructure_0800532c(undefined4 *dataStructure,undefined2 value1,undefined2 value2)\n\n{\n  *dataStructure = 0;\n  dataStructure[1] = 0;\n  dataStructure[2] = 0;\n  *(undefined2 *)(dataStructure + 3) = value1;\n  dataStructure[0x19] = 0;\n  *(undefined2 *)((int)dataStructure + 0xe) = value2;\n  dataStructure[4] = 0;\n  dataStructure[5] = 0;\n  dataStructure[6] = 0;\n  initializeMemory(dataStructure + 0x17,0,8);\n  dataStructure[9] = 0x8005609;\n  dataStructure[10] = 0x800562b;\n  dataStructure[0xb] = 0x8005663;\n  dataStructure[8] = dataStructure;\n  dataStructure[0xc] = &label_08005686;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800532c": "initialize_data_structure_0800532c",
                "param_1": "dataStructure",
                "param_2": "value1",
                "param_3": "value2",
                "fill_memory_080048cc": "initializeMemory",
                "LAB_08005686_1": "label_08005686"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_080048cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005374": {
            "entrypoint": "0x08005374",
            "current_name": "allocate_and_fill_memory_08005374",
            "code": "\nundefined4 * allocate_and_fill_memory_08005374(undefined4 memory_base,int num_blocks)\n\n{\n  undefined4 *allocated_memory;\n  int last_block_offset;\n  \n  last_block_offset = (num_blocks + -1) * 0x68;\n  allocated_memory = (undefined4 *)allocate_and_assign_memory_08004978(memory_base,last_block_offset + 0x74);\n  if (allocated_memory != (undefined4 *)0x0) {\n    *allocated_memory = 0;\n    allocated_memory[1] = num_blocks;\n    allocated_memory[2] = allocated_memory + 3;\n    fill_memory_080048cc(allocated_memory + 3,0,last_block_offset + 0x68);\n  }\n  return allocated_memory;\n}\n\n",
            "renaming": {
                "FUN_08005374": "allocate_and_fill_memory_08005374",
                "param_1": "memory_base",
                "param_2": "num_blocks",
                "puVar1": "allocated_memory",
                "iVar2": "last_block_offset"
            },
            "calling": [
                "FUN_08005400"
            ],
            "called": [
                "FUN_080048cc",
                "FUN_08004978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "initialize_data_080053a0",
            "code": "\nvoid initialize_data_080053a0(undefined4 *parameters)\n\n{\n  undefined4 initialized_variable;\n  undefined4 *pointer_to_data;\n  \n  if (parameters[6] == 0) {\n    parameters[0x12] = 0;\n    parameters[0x13] = 0;\n    parameters[0x14] = 0;\n    pointer_to_data = &DAT_200000a4;\n    parameters[10] = &function_label;\n    if (parameters == &DAT_200000a4) {\n      pointer_to_data = (undefined4 *)0x1;\n    }\n    if (parameters == &DAT_200000a4) {\n      parameters[6] = pointer_to_data;\n    }\n    initialized_variable = initialize_data_080053a0_structure_08005400();\n    parameters[1] = initialized_variable;\n    initialized_variable = initialize_data_080053a0_structure_08005400(parameters);\n    parameters[2] = initialized_variable;\n    initialized_variable = initialize_data_080053a0_structure_08005400(parameters);\n    parameters[3] = initialized_variable;\n    initialize_data_080053a0_structure_0800532c(parameters[1],4,0);\n    initialize_data_080053a0_structure_0800532c(parameters[2],9,1);\n    initialize_data_080053a0_structure_0800532c(parameters[3],0x12,2);\n    parameters[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "initialize_data_080053a0",
                "param_1": "parameters",
                "uVar1": "initialized_variable",
                "puVar2": "pointer_to_data",
                "LAB_08005320_1": "function_label"
            },
            "calling": [
                "FUN_080050d0",
                "FUN_08004fdc",
                "FUN_08004a84",
                "FUN_080052cc",
                "FUN_08005400",
                "FUN_08004a34"
            ],
            "called": [
                "FUN_0800532c",
                "FUN_08005400"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005400": {
            "entrypoint": "0x08005400",
            "current_name": "initialize_data_structure_08005400",
            "code": "\nint * initializeDataStructure_08005400(undefined4 *outputPtr,undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  int *currentElement;\n  int *currentSubElement;\n  int **dataStructure;\n  \n  if (DAT_200000bc == 0) {\n    initialize_data_080053a0(&DAT_200000a4);\n  }\n  dataStructure = (int **)&DAT_200000ec;\n  do {\n    currentSubElement = dataStructure[2];\n    currentElement = dataStructure[1];\n    while (currentElement = (int *)((int)currentElement + -1), -1 < (int)currentElement) {\n      if (*(short *)(currentSubElement + 3) == 0) {\n        *(undefined2 *)((int)currentSubElement + 0xe) = 0xffff;\n        *(undefined2 *)(currentSubElement + 3) = 1;\n        currentSubElement[0x19] = 0;\n        *currentSubElement = 0;\n        currentSubElement[2] = 0;\n        currentSubElement[1] = 0;\n        currentSubElement[4] = 0;\n        currentSubElement[5] = 0;\n        currentSubElement[6] = 0;\n        fillMemory(currentSubElement + 0x17,0,8,1,param3);\n        currentSubElement[0xd] = 0;\n        currentSubElement[0xe] = 0;\n        currentSubElement[0x12] = 0;\n        currentSubElement[0x13] = 0;\n        return currentSubElement;\n      }\n      currentSubElement = currentSubElement + 0x1a;\n    }\n    if (*dataStructure == (int *)0x0) {\n      currentElement = (int *)allocateAndFillMemory(outputPtr,4);\n      *dataStructure = currentElement;\n      if (currentElement == (int *)0x0) {\n        *outputPtr = 0xc;\n        return (int *)0x0;\n      }\n    }\n    dataStructure = (int **)*dataStructure;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005400": "initialize_data_structure_08005400",
                "param_1": "outputPtr",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "piVar1": "currentElement",
                "piVar2": "currentSubElement",
                "ppiVar3": "dataStructure",
                "fill_memory_080048cc": "fillMemory",
                "allocate_and_fill_memory_08005374": "allocateAndFillMemory"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_080053a0",
                "FUN_080048cc",
                "FUN_08005374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint * FUN_08005400(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_200000bc == 0) {\n    FUNC_080053a0(&DAT_200000a4);\n  }\n  ppiVar3 = (int **)&DAT_200000ec;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        piVar2[0x19] = 0;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_080048cc(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_fill_memory_08005374(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n"
        },
        "FUN_080054b4": {
            "entrypoint": "0x080054b4",
            "current_name": "check_memory_page_080054b4",
            "code": "\nundefined4 checkMemoryPage_080054b4(undefined4 input1,int input2,undefined4 *output1,uint *output2)\n\n{\n  int result;\n  undefined4 flag;\n  undefined localData [4];\n  uint localValue;\n  \n  if ((*(short *)(input2 + 0xe) < 0) ||\n     (result = initialize_memory_page_080056d4(input1,(int)*(short *)(input2 + 0xe),localData), result < 0)) {\n    *output2 = 0;\n    if ((int)((uint)*(ushort *)(input2 + 0xc) << 0x18) < 0) {\n      flag = 0x40;\n      goto LAB_080054f4;\n    }\n  }\n  else {\n    *output2 = (uint)((localValue & 0xf000) == 0x2000);\n  }\n  flag = 0x400;\nLAB_080054f4:\n  *output1 = flag;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080054b4": "check_memory_page_080054b4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output1",
                "param_4": "output2",
                "iVar1": "result",
                "uVar2": "flag",
                "auStack_4c": "localData",
                "local_48": "localValue"
            },
            "calling": [
                "FUN_080054fc"
            ],
            "called": [
                "FUN_080056d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054fc": {
            "entrypoint": "0x080054fc",
            "current_name": "allocate_memory_and_update_status_080054fc",
            "code": "\nvoid allocateMemoryAndUpdateStatus_080054fc(int baseAddress,int *memoryPointer)\n\n{\n  ushort statusFlag;\n  int allocatedMemory;\n  int localBaseAddress;\n  int *localMemoryPointer;\n  \n  if (-1 < (int)((uint)*(ushort *)(memoryPointer + 3) << 0x1e)) {\n    localBaseAddress = baseAddress;\n    localMemoryPointer = memoryPointer;\n    statusFlag = check_memory_page_080054b4(baseAddress,memoryPointer,&localBaseAddress,&localMemoryPointer);\n    allocatedMemory = allocate_and_assign_memory_08004978(baseAddress,localBaseAddress);\n    if (allocatedMemory != 0) {\n      *(undefined **)(baseAddress + 0x28) = &LAB_08005320_1;\n      *memoryPointer = allocatedMemory;\n      *(ushort *)(memoryPointer + 3) = *(ushort *)(memoryPointer + 3) | 0x80;\n      memoryPointer[5] = localBaseAddress;\n      memoryPointer[4] = allocatedMemory;\n      if ((localMemoryPointer != (int *)0x0) &&\n         (allocatedMemory = check_and_update_status_080056f8(baseAddress,(int)*(short *)((int)memoryPointer + 0xe)), allocatedMemory != 0)) {\n        *(ushort *)(memoryPointer + 3) = *(ushort *)(memoryPointer + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(memoryPointer + 3) = statusFlag | *(ushort *)(memoryPointer + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(memoryPointer + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(memoryPointer + 3) = *(ushort *)(memoryPointer + 3) & 0xfffc | 2;\n  }\n  *memoryPointer = (int)memoryPointer + 0x47;\n  memoryPointer[4] = (int)memoryPointer + 0x47;\n  memoryPointer[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080054fc": "allocate_memory_and_update_status_080054fc",
                "param_1": "baseAddress",
                "param_2": "memoryPointer",
                "uVar1": "statusFlag",
                "iVar2": "allocatedMemory",
                "local_18": "localBaseAddress",
                "local_14": "localMemoryPointer"
            },
            "calling": [
                "FUN_080050d0"
            ],
            "called": [
                "FUN_080056f8",
                "FUN_080054b4",
                "FUN_08004978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800557c": {
            "entrypoint": "0x0800557c",
            "current_name": "FUNC_0800557c",
            "code": "\nvoid FUNC_0800557c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557c": "FUNC_0800557c"
            },
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800557e": {
            "entrypoint": "0x0800557e",
            "current_name": "FUNC_0800557e",
            "code": "\nvoid FUNC_0800557e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557e": "FUNC_0800557e"
            },
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080055d0": {
            "entrypoint": "0x080055d0",
            "current_name": "process_handler_080055d0",
            "code": "\nint processHandler_080055d0(uint input)\n\n{\n  int *result;\n  undefined4 processStatus;\n  int data;\n  code *functionPtr;\n  undefined4 arg1;\n  undefined4 arg2;\n  undefined4 arg3;\n  undefined4 *dataPtr;\n  \n  result = DAT_200000a0;\n  dataPtr = &DAT_200000a0;\n  if (0x1f < input) {\n    *DAT_200000a0 = 0x16;\n    return -1;\n  }\n  data = DAT_200000a0[0x11];\n  if ((data != 0) && (functionPtr = *(code **)(data + input * 4), functionPtr != (code *)0x0)) {\n    if (functionPtr != (code *)0x1) {\n      if (functionPtr == (code *)0xffffffff) {\n        *DAT_200000a0 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(data + input * 4) = 0;\n      (*functionPtr)(input);\n    }\n    return 0;\n  }\n  processStatus = thunk_initialize_process_0800410c(DAT_200000a0);\n  DAT_20000674 = 0;\n  data = initialize_data_080040fc(processStatus,input,input,0,dataPtr,arg1,arg2,arg3);\n  if ((data == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_080055d0": "process_handler_080055d0",
                "param_1": "input",
                "piVar1": "result",
                "uVar2": "processStatus",
                "iVar3": "data",
                "pcVar4": "functionPtr",
                "unaff_r4": "arg1",
                "unaff_r5": "arg2",
                "in_lr": "arg3",
                "puVar5": "dataPtr"
            },
            "calling": [
                "FUN_080051ac"
            ],
            "called": [
                "thunk_FUN_0800410c",
                "FUN_080040fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800410c": {
            "entrypoint": "0x08005604",
            "current_name": "initialize_value_thunk_0800410c",
            "code": "\nuint32_t initialize_value_thunk_0800410c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800410c": "initialize_value_thunk_0800410c",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_080055d0"
            ],
            "called": [
                "FUN_0800410c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005608": {
            "entrypoint": "0x08005608",
            "current_name": "update_variable_08005608",
            "code": "\nvoid updateVariable_08005608(undefined4 value1,int value2)\n\n{\n  int result1;\n  uint result2;\n  bool isPositive;\n  \n  result1 = initialize_and_check_0800573c(value1,(int)*(short *)(value2 + 0xe));\n  isPositive = -1 < result1;\n  if (isPositive) {\n    result2 = *(int *)(value2 + 0x54) + result1;\n  }\n  else {\n    result2 = *(ushort *)(value2 + 0xc) & 0xffffefff;\n  }\n  if (isPositive) {\n    *(uint *)(value2 + 0x54) = result2;\n  }\n  if (!isPositive) {\n    *(short *)(value2 + 0xc) = (short)result2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005608": "update_variable_08005608",
                "param_1": "value1",
                "param_2": "value2",
                "iVar1": "result1",
                "uVar2": "result2",
                "bVar3": "isPositive"
            },
            "calling": [],
            "called": [
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800562a": {
            "entrypoint": "0x0800562a",
            "current_name": "process_data_and_check_validity_0800562a",
            "code": "\nvoid processDataAndCheckValidity_0800562a(int *data,int ptr,undefined4 value1,undefined4 value2)\n\n{\n  int result;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  \n  if ((int)((uint)*(ushort *)(ptr + 0xc) << 0x17) < 0) {\n    initialize_and_check_program_08005718(data,(int)*(short *)(ptr + 0xe),0,2);\n  }\n  *(ushort *)(ptr + 0xc) = *(ushort *)(ptr + 0xc) & 0xefff;\n  DAT_20000674 = 0;\n  result = process_and_validate_data_080040ec((int)*(short *)(ptr + 0xe),value1,value2,value2,value2,unused1,\n                       unused2,unused3);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *data = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800562a": "process_data_and_check_validity_0800562a",
                "param_1": "data",
                "param_2": "ptr",
                "param_3": "value1",
                "param_4": "value2",
                "iVar1": "result",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "in_lr": "unused3"
            },
            "calling": [],
            "called": [
                "FUN_080040ec",
                "FUN_08005718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005662": {
            "entrypoint": "0x08005662",
            "current_name": "initialize_program_check_08005662",
            "code": "\nvoid initialize_program_check_08005662(undefined4 program_config,int memory_address)\n\n{\n  int program_status;\n  ushort updated_flags;\n  bool is_error;\n  \n  program_status = initialize_and_check_program_08005718(program_config,(int)*(short *)(memory_address + 0xe));\n  is_error = program_status == -1;\n  if (is_error) {\n    updated_flags = *(ushort *)(memory_address + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(memory_address + 0x54) = program_status;\n    updated_flags = *(ushort *)(memory_address + 0xc) | 0x1000;\n  }\n  if (is_error) {\n    *(ushort *)(memory_address + 0xc) = updated_flags;\n  }\n  if (!is_error) {\n    *(ushort *)(memory_address + 0xc) = updated_flags;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005662": "initialize_program_check_08005662",
                "param_1": "program_config",
                "param_2": "memory_address",
                "iVar1": "program_status",
                "uVar2": "updated_flags",
                "bVar3": "is_error"
            },
            "calling": [],
            "called": [
                "FUN_08005718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056d4": {
            "entrypoint": "0x080056d4",
            "current_name": "initialize_memory_page_080056d4",
            "code": "\nvoid initializeMemoryPage_080056d4(int *memoryAddress,undefined4 size,undefined4 something,undefined4 anotherThing)\n\n{\n  int result;\n  \n  DAT_20000674 = 0;\n  result = set_memory_page_size_080040d6(size,something,something,0,anotherThing);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *memoryAddress = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056d4": "initialize_memory_page_080056d4",
                "param_1": "memoryAddress",
                "param_2": "size",
                "param_3": "something",
                "param_4": "anotherThing",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080054b4"
            ],
            "called": [
                "FUN_080040d6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056f8": {
            "entrypoint": "0x080056f8",
            "current_name": "check_and_update_status_080056f8",
            "code": "\nvoid checkAndUpdateStatus_080056f8(int *output,undefined4 input)\n\n{\n  int status;\n  \n  DAT_20000674 = 0;\n  status = get_success_status_080040e0(input);\n  if ((status == -1) && (DAT_20000674 != 0)) {\n    *output = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056f8": "check_and_update_status_080056f8",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "status"
            },
            "calling": [
                "FUN_080054fc"
            ],
            "called": [
                "FUN_080040e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005718": {
            "entrypoint": "0x08005718",
            "current_name": "initialize_and_check_program_08005718",
            "code": "\nvoid initializeAndCheckProgram_08005718(int *result,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int returnValue;\n  \n  DAT_20000674 = 0;\n  returnValue = initialize_program_080040e4(param2,param3,param4,param4,param4);\n  if ((returnValue == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005718": "initialize_and_check_program_08005718",
                "param_1": "result",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_0800562a",
                "FUN_08005662"
            ],
            "called": [
                "FUN_080040e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800573c": {
            "entrypoint": "0x0800573c",
            "current_name": "initialize_and_check_0800573c",
            "code": "\nvoid initialize_and_check_0800573c(int *output,undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  int result;\n  \n  DAT_20000674 = 0;\n  result = initialize_080040e8(input_1,input_2,input_3,input_3,input_3);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *output = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800573c": "initialize_and_check_0800573c",
                "param_1": "output",
                "param_2": "input_1",
                "param_3": "input_2",
                "param_4": "input_3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005608"
            ],
            "called": [
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "initialize_data_08005760",
            "code": "\nvoid initializeData_08005760(void)\n\n{\n  code *jumpTable;\n  \n  jumpTable = initializeData_08005760;\n  process_data_080051ac();\n  if (-1 < DAT_200005fc << 0x1f) {\n    DAT_200005fc = 1;\n  }\n  if (-1 < DAT_200005f8 << 0x1f) {\n    DAT_200005f8 = 1;\n  }\n  if (-1 < DAT_200005f4 << 0x1f) {\n    DAT_200005f4 = 1;\n  }\n  if (-1 < DAT_200005f0 << 0x1f) {\n    DAT_200005f0 = 1;\n  }\n  if (-1 < DAT_200005ec << 0x1f) {\n    DAT_200005ec = 1;\n  }\n  if (-1 < DAT_200005e8 << 0x1f) {\n    DAT_200005e8 = 1;\n  }\n  if (-1 < DAT_200005e4 << 0x1f) {\n    DAT_200005e4 = 1;\n  }\n  if (-1 < DAT_200005e0 << 0x1f) {\n    DAT_200005e0 = 1;\n  }\n  if (-1 < DAT_200005dc << 0x1f) {\n    DAT_200005dc = 1;\n  }\n  if (-1 < DAT_200005d8 << 0x1f) {\n    DAT_200005d8 = 1;\n  }\n  if (-1 < DAT_200005d4 << 0x1f) {\n    DAT_200005d4 = 1;\n  }\n  if (-1 < DAT_200005d0 << 0x1f) {\n    DAT_200005d0 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x080057f8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "initialize_data_08005760",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_080047c0"
            ],
            "called": [
                "FUN_080051ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "FUNC_080059f8",
            "code": "\nvoid FUNC_080059f8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "FUNC_080059f8"
            },
            "calling": [
                "FUN_080001ac",
                "FUN_08004884"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a04": {
            "entrypoint": "0x08005a04",
            "current_name": "FUNC_08005a04",
            "code": "\nvoid FUNC_08005a04(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a04": "FUNC_08005a04"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 118758,
    "layers": [
        [
            "FUN_080001ac",
            "FUN_08000230",
            "FUN_08000300",
            "FUN_080005e0",
            "FUN_0800066c",
            "FUN_08000728",
            "FUN_080008cc",
            "FUN_08000e18",
            "FUN_08000e30",
            "FUN_08000e3c",
            "FUN_08000e60",
            "FUN_08000ec4",
            "FUN_08000ee0",
            "FUN_08000f0c",
            "FUN_08000f2c",
            "FUN_08000f4e",
            "FUN_08000f72",
            "FUN_08000f8c",
            "FUN_08000fb4",
            "FUN_08001198",
            "FUN_080011c0",
            "FUN_0800124a",
            "FUN_08001256",
            "FUN_08001420",
            "FUN_08001440",
            "FUN_08001460",
            "FUN_080014ec",
            "FUN_08001578",
            "FUN_080015bc",
            "FUN_0800160e",
            "FUN_0800171a",
            "FUN_08001864",
            "FUN_08001904",
            "FUN_080019a0",
            "FUN_080025e0",
            "FUN_08002848",
            "FUN_080028d4",
            "FUN_08002940",
            "FUN_0800295c",
            "FUN_08002eb2",
            "FUN_08002efa",
            "FUN_0800312c",
            "FUN_08003138",
            "FUN_0800314e",
            "FUN_0800316c",
            "FUN_0800318c",
            "FUN_080031fc",
            "FUN_080033c8",
            "FUN_080034da",
            "FUN_08003506",
            "FUN_0800352e",
            "FUN_0800355e",
            "FUN_08003582",
            "FUN_08003594",
            "FUN_080035bc",
            "FUN_080035fc",
            "FUN_08003750",
            "FUN_0800387c",
            "FUN_08003f00",
            "FUN_08004094",
            "FUN_080040d0",
            "FUN_080040d6",
            "FUN_080040e0",
            "FUN_080040e4",
            "FUN_080040e8",
            "FUN_080040f8",
            "FUN_080040fc",
            "FUN_0800410c",
            "FUN_08004240",
            "FUN_08004364",
            "FUN_08004444",
            "FUN_08004460",
            "FUN_08004544",
            "FUN_08004640",
            "FUN_08004678",
            "FUN_08004844",
            "FUN_08004884",
            "FUN_080048cc",
            "FUN_080048dc",
            "FUN_08004cb0",
            "thunk_FUN_0800410c"
        ],
        [
            "FUN_080002d0",
            "FUN_080005e4",
            "FUN_08000682",
            "FUN_080007f0",
            "FUN_08000d98",
            "FUN_08000f56",
            "FUN_08001f9c",
            "FUN_0800201c",
            "FUN_080025ec",
            "FUN_0800260c",
            "FUN_0800262c",
            "FUN_08002864",
            "FUN_080028f0",
            "FUN_08002d0c",
            "FUN_0800340c",
            "FUN_0800346c",
            "FUN_08003476",
            "FUN_08003486",
            "FUN_080034b6",
            "FUN_080034f4",
            "FUN_0800351e",
            "FUN_0800354a",
            "FUN_08003754",
            "FUN_0800376e",
            "FUN_08003880",
            "FUN_080038d0",
            "FUN_08003900",
            "FUN_08003dd0",
            "FUN_08003df4",
            "FUN_08003eac",
            "FUN_08003f24",
            "FUN_08003f48",
            "FUN_08004560",
            "FUN_080047fe",
            "FUN_08004d9c",
            "FUN_0800500c",
            "FUN_0800532c",
            "FUN_080055d0",
            "FUN_080056d4",
            "FUN_080056f8",
            "FUN_08005718",
            "FUN_0800573c"
        ],
        [
            "FUN_08000690",
            "FUN_08000de4",
            "FUN_0800165a",
            "FUN_08001684",
            "FUN_08001ab0",
            "FUN_080023b4",
            "FUN_0800268e",
            "FUN_080026ce",
            "FUN_080029c8",
            "FUN_08002dd0",
            "FUN_08002f4c",
            "FUN_08002f66",
            "FUN_08003380",
            "FUN_0800339c",
            "FUN_08003e18",
            "FUN_08003e54",
            "FUN_080041bc",
            "FUN_08004204",
            "FUN_080042e8",
            "FUN_0800447c",
            "FUN_080046b4",
            "FUN_08004978",
            "FUN_080051ac",
            "FUN_080054b4",
            "FUN_08005608",
            "FUN_08005662"
        ],
        [
            "FUN_080006b4",
            "FUN_0800076c",
            "FUN_08001bfc",
            "FUN_08001e68",
            "FUN_08002488",
            "FUN_08002d72",
            "FUN_08002ffc",
            "FUN_080033d8",
            "FUN_08003414",
            "FUN_0800377c",
            "FUN_080042ac",
            "FUN_080044d8",
            "FUN_08005374",
            "FUN_080054fc"
        ],
        [
            "FUN_080008e2",
            "FUN_08000998",
            "FUN_08000a00",
            "FUN_08000a4e",
            "FUN_08000a7a",
            "FUN_08000b04",
            "FUN_08000c8c",
            "FUN_08001d00",
            "FUN_08004110"
        ],
        [
            "FUN_08000b54",
            "FUN_080034ce"
        ],
        [
            "FUN_08000c64",
            "FUN_08000d8e"
        ],
        [
            "FUN_08004648"
        ],
        [
            "FUN_08005760"
        ],
        [
            "FUN_080047c0"
        ],
        [
            "FUN_080047d0"
        ],
        [
            "FUN_080011a4"
        ],
        [
            "FUN_080050d0",
            "FUN_080052cc",
            "FUN_08005400"
        ],
        [
            "FUN_080053a0"
        ],
        [
            "FUN_08004a34"
        ],
        [
            "FUN_08004a60"
        ],
        [
            "FUN_08004a84"
        ],
        [
            "FUN_08004860",
            "FUN_08004fdc"
        ],
        [
            "FUN_08003978",
            "FUN_08004808"
        ],
        [
            "FUN_08003cc8",
            "FUN_08004388"
        ],
        [
            "FUN_08000600",
            "FUN_08003d18"
        ],
        [
            "FUN_08000c4c",
            "FUN_080040ec"
        ],
        [
            "FUN_08004658",
            "FUN_0800562a"
        ]
    ],
    "locked_functions": []
}