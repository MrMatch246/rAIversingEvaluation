{
    "functions": {
        "FUN_080006b4": {
            "renaming": {
                "FUN_080006b4": "decode_and_update_080006b4",
                "param_1": "data",
                "bVar1": "hasOverflow",
                "uVar2": "currentValue",
                "iVar3": "result",
                "bVar4": "byteCounter"
            },
            "code": "int decode_and_update_080006b4(int **data)\n{\n    bool hasOverflow = false;\n    undefined byteCounter = 0;\n    \n    if (data[0][2] > 1)\n    {\n        decode_and_update_080006b4_data_080041bc(data[0][2], 0);\n    }\n    \n    *(undefined *)((int)data + 0x49) = 0;\n    \n    if (data[0][1] < 4)\n    {\n        while (true)\n        {\n            int result = (**(code **)(**(data)+8))();\n            if (result == 0)\n            {\n                break;\n            }\n            \n            byte currentValue = (**(code **)(**(data)+0xc))();\n            *(undefined *)((int)data + byteCounter + 9) = currentValue;\n            byteCounter++;\n            \n            if (byteCounter > 0x3f)\n            {\n                hasOverflow = true;\n                break;\n            }\n        }\n    }\n    \n    if (hasOverflow)\n    {\n        data[0][5]++;\n        return -3;\n    }\n    \n    data[0][4]++;\n    return (int)*(char *)((int)data + 0x49);\n}",
            "called": [
                "FUN_080041bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006b4",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "decode_and_update_080006b4"
        },
        "FUN_080034da": {
            "renaming": {
                "FUN_080034da": "find_element_080034da",
                "param_1": "element_to_find",
                "param_2": "element_array",
                "*param_2": "*element_array"
            },
            "code": "int find_element_080034da(short* element_array, int element_to_find) {\n  while(*element_array != -1) {\n    if (*element_array == element_to_find) {\n      return *(int*)(element_array + 2);\n    }\n    element_array += 6;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080034da"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034da",
            "calling": [
                "FUN_080034f4",
                "FUN_080034da"
            ],
            "imported": false,
            "current_name": "find_element_080034da"
        },
        "FUN_080035fc": {
            "renaming": {
                "FUN_080035fc": "update_register_flags_080035fc",
                "param_1": "register_value",
                "DAT_08003718": "REGISTER_FLAG_1",
                "DAT_0800371c": "REGISTER_FLAG_2",
                "DAT_08003720": "REGISTER_FLAG_3",
                "DAT_08003724": "REGISTER_FLAG_4",
                "DAT_08003728": "REGISTER_FLAG_5",
                "DAT_0800372c": "REGISTER_FLAG_6",
                "DAT_08003730": "REGISTER_FLAG_7",
                "DAT_08003734": "REGISTER_FLAG_8",
                "DAT_08003738": "REGISTER_FLAG_9",
                "DAT_0800373c": "REGISTER_FLAG_10",
                "DAT_08003740": "REGISTER_FLAG_11",
                "DAT_08003744": "REGISTER_FLAG_12",
                "DAT_08003748": "REGISTER_FLAG_13",
                "DAT_0800374c": "REGISTER_FLAGS_PTR"
            },
            "code": "void update_register_flags_080035fc(int *register_value)\n{\n    uint *register_flags_ptr = (uint *)(DAT_0800374c + 0x40);\n    uint *register_flags2_ptr = (uint *)(DAT_0800374c + 0x44);\n    switch (*register_value)\n    {\n        case DAT_08003718:\n            *register_flags2_ptr &= 0xfffffffe;\n            break;\n        case 0x40000000:\n            *register_flags_ptr &= 0xfffffffe;\n            break;\n        case DAT_0800371c:\n            *register_flags_ptr &= 0xfffffffd;\n            break;\n        case DAT_08003720:\n            *register_flags_ptr &= 0xfffffffb;\n            break;\n        case DAT_08003724:\n            *register_flags_ptr &= 0xfffffff7;\n            break;\n        case DAT_08003728:\n            *register_flags_ptr &= 0xffffffef;\n            break;\n        case DAT_0800372c:\n            *register_flags_ptr &= 0xffffffdf;\n            break;\n        case DAT_08003730:\n            *register_flags2_ptr &= 0xfffffffd;\n            break;\n        case DAT_08003734:\n            *register_flags2_ptr &= 0xfffeffff;\n            break;\n        case DAT_08003738:\n            *register_flags2_ptr &= 0xfffdffff;\n            break;\n        case DAT_0800373c:\n            *register_flags2_ptr &= 0xfffbffff;\n            break;\n        case DAT_08003740:\n            *register_flags_ptr &= 0xffffffbf;\n            break;\n        case DAT_08003744:\n            *register_flags_ptr &= 0xffffff7f;\n            break;\n        case DAT_08003748:\n            *register_flags_ptr &= 0xfffffeff;\n            break;\n        default:\n            break;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fc",
            "calling": [
                "FUN_0800340c"
            ],
            "imported": false,
            "current_name": "update_register_flags_080035fc"
        },
        "FUN_08003dd0": {
            "renaming": {
                "FUN_08003dd0": "is_combination_valid_08003dd0",
                "param_1": "index",
                "uVar1": "combined_bytes"
            },
            "code": "bool is_combination_valid_08003dd0(int index){\n                      uint16_t combined_bytes = combine_bytes(PTR_DAT_08003df0[(uint)*(byte *)(index + 0x44) * 4]);\n                      return (combined_bytes & 0x22) == 0x22;\n                    }",
            "called": [
                "FUN_0800312c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003dd0",
            "calling": [
                "FUN_08003e54",
                "FUN_08003e18"
            ],
            "imported": false,
            "current_name": "is_combination_valid_08003dd0"
        },
        "FUN_08000c8c": {
            "renaming": {
                "FUN_08000c8c": "set_flags_and_update_bits_08000c8c",
                "local_54": "flag",
                "local_50": "flag_mask",
                "local_3c": "param1",
                "local_38": "param1_mask",
                "local_34": "param2",
                "local_30": "param2_mask",
                "local_2c": "param3",
                "local_28": "param4",
                "FUNC_0800201c": "set_flag",
                "check_for_flag_08001f9c": "check_for_flag",
                "local_24": "param5",
                "local_20": "param6",
                "local_1c": "param7",
                "local_18": "param3_mask",
                "local_14": "param4_mask",
                "validate_parameters_08002488": "validate_parameters",
                "get_value_from_pointer_080025e0": "get_value_from_pointer",
                "check_param_range_08000ee0": "check_param_range",
                "set_flag_08000f2c": "set_flag",
                "update_bits_08000e60": "update_bits"
            },
            "code": "void set_flags_and_update_bits_08000c8c() {\n  uint flag = 1;\n  uint flag_mask = 0x50000;\n  uint param1 = 2;\n  uint param1_mask = 0x400000;\n  uint param2 = 8;\n  uint param2_mask = 0x150;\n  uint param3 = 2;\n  uint param4 = 7;\n  set_flag(&flag, flag_mask);\n  check_for_flag();\n  uint param5 = 0xf;\n  uint param6 = 2;\n  uint param7 = 0;\n  uint param3_mask = 0x1400;\n  uint param4_mask = 0x1000;\n  validate_parameters(&param5, 5);\n  uint ptr_value = get_value_from_pointer();\n  check_param_range(DAT_08000d38 * ptr_value >> 0x26);\n  set_flag(4);\n  update_bits(0xffffffff, 0, 0);\n}\n",
            "called": [
                "FUN_08000e60",
                "FUN_08002488",
                "FUN_08001f9c",
                "FUN_08000f2c",
                "FUN_080025e0",
                "FUN_08000ee0",
                "FUN_0800201c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c8c",
            "calling": [
                "FUN_080034ce"
            ],
            "imported": false,
            "current_name": "set_flags_and_update_bits_08000c8c"
        },
        "FUN_08000a4e": {
            "renaming": {
                "FUN_08000a4e": "get_value_and_update_crc_08000a4e",
                "param_1": "data",
                "param_2": "output",
                "bVar1": "combined_byte",
                "uVar2": "combined_word"
            },
            "code": "uint8_t get_value_and_update_crc_08000a4e(uint8_t *data, uint8_t *output, uint8_t index) {\n    uint8_t combined_byte = combine_values(data[11], data[12]);\n    uint16_t combined_word = combine_values(data[13], data[14]);\n    output[combined_byte * 2] = (uint8_t)combined_word;\n    data[73] = 6;\n    calculate_crc_and_update_data(data);\n    return 8;\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a4e",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "get_value_and_update_crc_08000a4e"
        },
        "FUN_08004658": {
            "renaming": {
                "FUN_08004658": "process_interrupt_and_data_08004658",
                "DAT_08004674": "data_available",
                "do_nothing_08004646": "do_nothing",
                "send_interrupt_and_process_data_08000c4c_08000c4c": "send_interrupt_and_process_data",
                "process_data_08000c64": "process_data",
                "calculate_offset_if_data_available_08004338": "calculate_offset_if_data_available"
            },
            "code": "void process_interrupt_and_data_08004658(void)\n{\n  do_nothing();\n  send_interrupt_and_process_data();\n  do {\n    do {\n      process_data();\n    } while (DAT_08004674 == 0);\n    calculate_offset_if_DAT_08004674();\n  } while( true );\n}",
            "called": [
                "FUN_08004646",
                "FUN_08000c4c",
                "FUN_08004338",
                "FUN_08000c64"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004658",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "process_interrupt_and_data_08004658"
        },
        "FUN_080034f4": {
            "renaming": {
                "FUN_080034f4": "get_element_if_not_negative_080034f4",
                "param_1": "element_index",
                "uVar1": "element",
                "find_element_080034da": "find_element"
            },
            "code": "int get_element_if_not_negative_080034f4(int element_index){\n  int element = -1;\n  if (element_index != -1) {\n    element = find_element();\n  }\n  return element;\n}",
            "called": [
                "FUN_080034da"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034f4",
            "calling": [
                "FUN_080033d8",
                "FUN_08003414",
                "FUN_08003978",
                "FUN_08003d18",
                "FUN_08003cc8"
            ],
            "imported": false,
            "current_name": "get_element_if_not_negative_080034f4"
        },
        "FUN_0800355e": {
            "renaming": {
                "FUN_0800355e": "find_short_0800355e",
                "param_1": "target",
                "param_2": "short_array",
                "*param_2": "*short_array"
            },
            "code": "int find_short_0800355e(int target, short *short_array)\n{\n  if (target == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*short_array == -1) {\n      return 0;\n    }\n    if (target == *short_array) break;\n    short_array = short_array + 6;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800355e",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "find_short_0800355e"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "get_value_from_zero_0800573c",
                "param_1": "output",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "puVar1": "ptr",
                "iVar2": "zero_value"
            },
            "code": "void get_value_from_zero_0800573c(int* output, int param1, int param2, int param3)\n{\n  undefined *ptr = PTR_DAT_0800575c;\n  *(int *)PTR_DAT_0800575c = 0;\n  int zero_value = get_zero_value(param1, param2, param3, param3, param3);\n  if ((zero_value == -1) && (*(int *)ptr != 0)) {\n    *output = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "FUN_08005608"
            ],
            "imported": false,
            "current_name": "get_value_from_zero_0800573c"
        },
        "FUN_08003e54": {
            "renaming": {
                "FUN_08003e54": "validate_combination_08003e54",
                "param_1": "combination_index",
                "param_2": "new_value",
                "param_3": "input_address",
                "param_4": "bit_index",
                "iVar1": "is_valid_combination",
                "uVar2": "combination_offset"
            },
            "code": "void validate_combination_08003e54(int combination_index, int new_value, int input_address, int bit_index)\n{\n    if (combination_index != 0) {\n        int is_valid_combination = is_combination_valid();\n        if (is_valid_combination == 0) {\n            uint combination_offset = (uint)*(byte *)(combination_index + 0x44);\n            combinations[combination_offset] = new_value;\n            input_addresses[combination_offset] = input_address;\n            update_input_bits((int)*(char *)(combination_index + 0x5c), 0, 1, combination_offset, bit_index);\n            set_bit_at_index((int)*(char *)(combination_index + 0x5c));\n            validate_input(input_values[combination_offset], combination_index + 0x45, 1);\n        }\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_08000e60",
                "FUN_08000ec4",
                "FUN_08002efa",
                "FUN_08003dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e54",
            "calling": [
                "FUN_08004388"
            ],
            "imported": false,
            "current_name": "validate_combination_08003e54"
        },
        "FUN_08004fdc": {
            "renaming": {
                "FUN_08004fdc": "process_params_and_call_func_08004fdc",
                "param_1": "func_param1",
                "param_2": "func_param2",
                "param_3": "func_param3",
                "param_4": "func_param4"
            },
            "code": "void process_params_and_call_func_08004fdc(undefined4 param_1, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n    int iVar1 = *(int *)PTR_PTR_DAT_08005008;\n    undefined4 func_param1 = param_1;\n    undefined4 func_param2 = param_2;\n    undefined4 func_param3 = param_3;\n    undefined4 func_param4 = param_4;\n\n    if ((iVar1 != 0) && (*(int *)(iVar1 + 0x18) == 0)) {\n        initialize_arrays_080053a0(iVar1);\n    }\n    FUNC_08004a84(iVar1, *(undefined4 *)(iVar1 + 8), param_1, &func_param2, func_param1, &func_param2);\n    return;\n}",
            "called": [
                "FUN_080053a0",
                "FUN_08004a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fdc",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "process_params_and_call_func_08004fdc",
            "code_backup": "\nvoid FUN_08004fdc(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  iVar1 = *(int *)PTR_PTR_DAT_08005008;\n  uVar2 = param_1;\n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  if ((iVar1 != 0) && (*(int *)(iVar1 + 0x18) == 0)) {\n    FUNC_080053a0(iVar1);\n  }\n  FUNC_08004a84(iVar1,*(undefined4 *)(iVar1 + 8),param_1,&uStack_c,uVar2,&uStack_c);\n  return;\n}\n\n"
        },
        "FUN_080056d4": {
            "renaming": {
                "FUN_080056d4": "set_permissions_080056d4",
                "param_1": "result",
                "param_2": "start_address",
                "param_3": "size",
                "param_4": "permissions",
                "PTR_DAT_080056f4": "ptr_data",
                "iVar2": "set_result"
            },
            "code": "void set_permissions_080056d4(int *result, int start_address, int size, int permissions, int end_address) {\n    undefined *PTR_DAT_080056f4 = PTR_DAT_080056f4;\n    *(int *)PTR_DAT_080056f4 = 0;\n    int set_result = set_memory_permissions_080040d6(start_address, size, size, permissions, end_address);\n    if (set_result == -1 && (*(int *)PTR_DAT_080056f4 != 0)) {\n        *result = *(int *)PTR_DAT_080056f4;\n    }\n    return;\n}",
            "called": [
                "FUN_080040d6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d4",
            "calling": [
                "FUN_080054b4"
            ],
            "imported": false,
            "current_name": "set_permissions_080056d4"
        },
        "thunk_FUN_0800410c": {
            "renaming": {
                "thunk_FUN_0800410c": "get_one_thunk_0800410c"
            },
            "code": "int get_one_thunk_0800410c() {\n    return 1;\n}",
            "called": [
                "FUN_0800410c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "FUN_080055d0"
            ],
            "imported": false,
            "current_name": "get_one_thunk_0800410c"
        },
        "FUN_080033d8": {
            "renaming": {
                "FUN_080033d8": "update_bits_and_clear_value_if_not_negative_080033d8",
                "param_1": "param",
                "local_1c": "bit_values",
                "get_element_if_not_negative_080034f4": "get_element_if_not_negative",
                "PTR_DAT_08003408": "PTR_DAT_08003408",
                "check_value_08003380": "check_value",
                "iVar1": "check_result",
                "clear_bit_08000f72": "clear_bit",
                "set_value_and_clear_bit_08000f56": "set_value_and_clear_bit"
            },
            "code": "void update_bits_and_clear_value_if_not_negative_080033d8(int param) {\n  int bit_values[5];\n  bit_values[0] = get_element_if_not_negative(param, PTR_DAT_08003408);\n  if ((bit_values[0] != 0) && ((check_result = check_value(param), check_result == 0 || (check_result == 0x10)))) {\n    clear_bit(bit_values, check_result);\n    set_value_and_clear_bit(bit_values);\n  }\n  return;\n}",
            "called": [
                "FUN_08000f72",
                "FUN_08000f56",
                "FUN_080034f4",
                "FUN_08003380"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033d8",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "update_bits_and_clear_value_if_not_negative_080033d8"
        },
        "FUN_080029c8": {
            "renaming": {
                "FUN_080029c8": "FUNC_080029c8"
            },
            "code": "\nvoid FUNC_080029c8(int *param_1)\n\n{\n  ulonglong uVar1;\n  uint uVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  int iVar10;\n  int iVar11;\n  int iVar12;\n  \n  *(uint *)(*param_1 + 0x10) = *(uint *)(*param_1 + 0x10) & 0xffffcfff | param_1[3];\n  *(uint *)(*param_1 + 0xc) =\n       *(uint *)(*param_1 + 0xc) & 0xffff69f3 | param_1[2] | param_1[4] | param_1[5] | param_1[7];\n  *(uint *)(*param_1 + 0x14) = *(uint *)(*param_1 + 0x14) & 0xfffffcff | param_1[6];\n  if (param_1[7] == 0x8000) {\n    iVar12 = *param_1;\n    if ((iVar12 != 0x40011000) && (iVar12 != 0x40011400)) {\n      iVar3 = get_value_shifted_by_pointer_080025ec();\n      uVar2 = DAT_08002d08;\n      iVar8 = param_1[1];\n      uVar1 = (ulonglong)DAT_08002d08;\n      iVar4 = get_value_shifted_by_pointer_080025ec();\n      iVar9 = param_1[1];\n      iVar5 = get_value_shifted_by_pointer_080025ec();\n      iVar10 = param_1[1];\n      iVar6 = get_value_shifted_by_pointer_080025ec();\n      iVar11 = param_1[1];\n      iVar7 = get_value_shifted_by_pointer_080025ec();\n      *(uint *)(iVar12 + 8) =\n           ((uint)((int)((ulonglong)uVar2 *\n                         (ulonglong)\n                         (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 1) +\n                          (uint)((ulonglong)uVar2 *\n                                 ((ulonglong)(uint)(iVar7 * 0x19) /\n                                 (ulonglong)(uint)(param_1[1] << 1)) >> 0x25) * -100) * 8 + 0x32) >>\n                        0x20) << 0x18) >> 0x1d) +\n           ((uint)((ulonglong)uVar2 *\n                   (ulonglong)\n                   (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 1) +\n                    (uint)((ulonglong)uVar2 *\n                           ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 1)) >>\n                          0x25) * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n           (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 1)) >> 0x25)\n           * 0x10;\n      return;\n    }\n    iVar3 = get_shifted_value_from_pointer_0800260c();\n    uVar2 = DAT_08002d08;\n    iVar8 = param_1[1];\n    uVar1 = (ulonglong)DAT_08002d08;\n    iVar4 = get_shifted_value_from_pointer_0800260c();\n    iVar9 = param_1[1];\n    iVar5 = get_shifted_value_from_pointer_0800260c();\n    iVar10 = param_1[1];\n    iVar6 = get_shifted_value_from_pointer_0800260c();\n    iVar11 = param_1[1];\n    iVar7 = get_shifted_value_from_pointer_0800260c();\n    *(uint *)(iVar12 + 8) =\n         ((uint)((int)((ulonglong)uVar2 *\n                       (ulonglong)\n                       (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 1) +\n                        (uint)((ulonglong)uVar2 *\n                               ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 1)\n                               ) >> 0x25) * -100) * 8 + 0x32) >> 0x20) << 0x18) >> 0x1d) +\n         ((uint)((ulonglong)uVar2 *\n                 (ulonglong)\n                 (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 1) +\n                  (uint)((ulonglong)uVar2 *\n                         ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 1)) >> 0x25)\n                  * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n         (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 1)) >> 0x25) *\n         0x10;\n    return;\n  }\n  iVar12 = *param_1;\n  if ((iVar12 != DAT_08002d04) && (iVar12 != DAT_08002d04 + 0x400)) {\n    iVar3 = get_value_shifted_by_pointer_080025ec();\n    uVar2 = DAT_08002d08;\n    iVar8 = param_1[1];\n    uVar1 = (ulonglong)DAT_08002d08;\n    iVar4 = get_value_shifted_by_pointer_080025ec();\n    iVar9 = param_1[1];\n    iVar5 = get_value_shifted_by_pointer_080025ec();\n    iVar10 = param_1[1];\n    iVar6 = get_value_shifted_by_pointer_080025ec();\n    iVar11 = param_1[1];\n    iVar7 = get_value_shifted_by_pointer_080025ec();\n    *(uint *)(iVar12 + 8) =\n         ((uint)((int)((ulonglong)uVar2 *\n                       (ulonglong)\n                       (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 2) +\n                        (uint)((ulonglong)uVar2 *\n                               ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 2)\n                               ) >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n         ((uint)((ulonglong)uVar2 *\n                 (ulonglong)\n                 (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 2) +\n                  (uint)((ulonglong)uVar2 *\n                         ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 2)) >> 0x25)\n                  * -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n         (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 2)) >> 0x25) *\n         0x10;\n    return;\n  }\n  iVar3 = get_shifted_value_from_pointer_0800260c();\n  uVar2 = DAT_08002d08;\n  iVar8 = param_1[1];\n  uVar1 = (ulonglong)DAT_08002d08;\n  iVar4 = get_shifted_value_from_pointer_0800260c();\n  iVar9 = param_1[1];\n  iVar5 = get_shifted_value_from_pointer_0800260c();\n  iVar10 = param_1[1];\n  iVar6 = get_shifted_value_from_pointer_0800260c();\n  iVar11 = param_1[1];\n  iVar7 = get_shifted_value_from_pointer_0800260c();\n  *(uint *)(iVar12 + 8) =\n       ((uint)((int)((ulonglong)uVar2 *\n                     (ulonglong)\n                     (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 2) +\n                      (uint)((ulonglong)uVar2 *\n                             ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 2))\n                            >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n       ((uint)((ulonglong)uVar2 *\n               (ulonglong)\n               (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 2) +\n                (uint)((ulonglong)uVar2 *\n                       ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 2)) >> 0x25) *\n                -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n       (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 2)) >> 0x25) *\n       0x10;\n  return;\n}\n\n",
            "called": [
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080029c8",
            "calling": [
                "FUN_08002d72"
            ],
            "imported": false,
            "current_name": "FUNC_080029c8"
        },
        "FUN_08002488": {
            "renaming": {
                "FUN_08002488": "validate_parameters_08002488",
                "param_1": "parameters",
                "param_2": "num_parameters",
                "puVar1": "data_pointer",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "uVar4": "parameter_value"
            },
            "code": "int validate_parameters_08002488(uint *parameters, uint num_parameters)\n{\n    uint *data_pointer = data;\n    if (parameters == NULL)\n        return 1;\n\n    if ((*data_pointer & 0xf) < num_parameters)\n    {\n        *(char *)data_pointer = (char)num_parameters;\n        if (num_parameters != (*data_pointer & 0xf))\n            return 1;\n    }\n\n    if ((*parameters & 2) != 0)\n    {\n        if ((*parameters & 4) != 0)\n            data[2] |= 0x1c00;\n        if ((*parameters & 8) != 0)\n            data[2] |= 0xe000;\n        data[2] = (data[2] & 0xffffff0f) | parameters[2];\n    }\n\n    if ((*parameters & 1) != 0)\n    {\n        uint parameter_value = parameters[1];\n        if (parameter_value == 1)\n        {\n            if ((data[0] & 0x20000) == 0)\n                return 1;\n        }\n        else if (parameter_value - 2 < 2)\n        {\n            if ((data[0] & 0x2000000) == 0)\n                return 1;\n        }\n        else if ((data[0] & 2) == 0)\n            return 1;\n\n        data[2] = parameter_value | (data[2] & 0xfffffffc);\n        int start_time = get_current_time();\n        while ((data[2] & 0xc) != parameters[1] * 4)\n        {\n            int current_time = get_current_time();\n            if (current_time - start_time > 5000)\n                return 3;\n        }\n    }\n\n    data_pointer = data;\n    if (num_parameters < (*data_pointer & 0xf))\n    {\n        *(char *)data_pointer = (char)num_parameters;\n        if (num_parameters != (*data_pointer & 0xf))\n            return 1;\n    }\n\n    if ((*parameters & 4) != 0)\n        data[2] = (data[2] & 0xffffe3ff) | parameters[3];\n    if ((*parameters & 8) != 0)\n        data[2] = (data[2] & 0xffff1fff) | (parameters[4] << 3);\n\n    uint result = calculate_result();\n    *(uint *)result_pointer = result >> shift_table[(data[2] << 0x18) >> 0x1c];\n    check_and_set_param(0xf);\n    return 0;\n}",
            "called": [
                "FUN_08000e30",
                "FUN_080023b4",
                "FUN_08000d98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002488",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "validate_parameters_08002488"
        },
        "FUN_08004544": {
            "renaming": {
                "FUN_08004544": "initialize_values_08004544",
                "param_1": "ptr_to_values",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "code": "void initialize_values_08004544(undefined4 *ptr_to_values, undefined value1, undefined value2, undefined value3, undefined value4) {\n  *ptr_to_values = ptr_to_label_1;\n  *(undefined *)(ptr_to_values + 1) = value1;\n  *(undefined *)((int)ptr_to_values + 5) = value2;\n  *(undefined *)((int)ptr_to_values + 6) = value3;\n  *(undefined *)((int)ptr_to_values + 7) = value4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004544",
            "calling": [
                "FUN_08004560"
            ],
            "imported": false,
            "current_name": "initialize_values_08004544"
        },
        "FUN_08003cc8": {
            "renaming": {
                "FUN_08003cc8": "update_data_08003cc8",
                "sVar1": "current_element",
                "puVar2": "data_pointer",
                "uVar3": "value",
                "iVar4": "element_index",
                "uVar5": "element_value",
                "PTR_DAT_08003d08": "data_start_pointer",
                "PTR_DAT_08003d0c": "element_array_pointer",
                "PTR_DAT_08003d10": "element_value_pointer",
                "PTR_DAT_08003d14": "data_pointer",
                "get_element_if_not_negative_080034f4": "get_element_if_not_negative",
                "get_short_value_0800351e": "get_short_value",
                "FUNC_08003978": "update_data_pointer"
            },
            "code": "void update_data_08003cc8(void)\n{\n  short current_element;\n  undefined *PTR_DAT_08003d14;\n  undefined2 value;\n  int element_index;\n  undefined4 element_value;\n  \n  current_element = *(short *)(PTR_DAT_08003d08 + 0x9a);\n  element_index = get_element_if_not_negative(current_element, PTR_DAT_08003d0c);\n  if (element_index != 0) {\n    element_value = get_element_if_not_negative(current_element, PTR_DAT_08003d0c);\n    value = get_short_value(element_value, PTR_DAT_08003d10);\n    PTR_DAT_08003d14 = PTR_DAT_08003d14;\n    *(undefined2 *)(PTR_DAT_08003d14 + 0x5a) = value;\n    *(short *)(PTR_DAT_08003d14 + 0x58) = current_element;\n    *(undefined4 *)(PTR_DAT_08003d14 + 0x48) = 0x2580;\n    *(undefined4 *)(PTR_DAT_08003d14 + 0x54) = 0;\n    *(undefined4 *)(PTR_DAT_08003d14 + 0x4c) = 0;\n    *(undefined4 *)(PTR_DAT_08003d14 + 0x50) = 0;\n    update_PTR_DAT_08003d14(PTR_DAT_08003d14);\n  }\n  return;\n}",
            "called": [
                "FUN_080034f4",
                "FUN_08003978",
                "FUN_0800351e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003cc8",
            "calling": [
                "FUN_08003d18"
            ],
            "imported": false,
            "current_name": "update_data_08003cc8"
        },
        "FUN_08002d70": {
            "renaming": {
                "FUN_08002d70": "do_nothing_08002d70"
            },
            "code": "\nvoid do_nothing_08002d70(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d70",
            "calling": [
                "FUN_08002d72"
            ],
            "imported": false,
            "current_name": "do_nothing_08002d70"
        },
        "FUN_08000fb4": {
            "renaming": {
                "FUN_08000fb4": "update_data_08000fb4",
                "param_1": "data_dest",
                "param_2": "data_src",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "uVar3": "bit_check",
                "uVar4": "bit_mask",
                "uVar5": "byte_index",
                "uVar6": "bit_shift",
                "uVar7": "data_type",
                "uVar9": "data_index",
                "iVar8": "data_index",
                "iVar10": "byte_shift",
                "temp_data": "temp_data",
                "bit_check": "bit_check",
                "bit_mask": "bit_mask",
                "data_type": "data_type",
                "byte_shift": "byte_shift",
                "data_index": "data_index",
                "byte_index": "byte_index",
                "data_dest": "data_dest",
                "data_src": "data_src",
                "DAT_0800118c": "DAT_0800118c",
                "PTR_DAT_08001188": "PTR_DAT_08001188",
                "PTR_DAT_08001184": "PTR_DAT_08001184",
                "PTR_DAT_08001190": "PTR_DAT_08001190",
                "PTR_DAT_08001194": "PTR_DAT_08001194"
            },
            "code": "void update_data_08000fb4(uint *data_dest, uint *data_src)\n{\n    uint *dest_ptr;\n    uint *src_ptr;\n    uint bit_mask;\n    uint bit_check;\n    uint temp_data;\n    uint bit_shift;\n    uint data_type;\n    int byte_shift;\n    int data_index;\n    int byte_index;\n    \n    for (byte_index = 0; byte_index < 0x10; byte_index++) {\n        bit_mask = 1 << (byte_index & 0xff);\n        bit_check = bit_mask & *data_src;\n        if (bit_mask == bit_check) {\n            if ((data_src[1] == 2) || (data_src[1] == 0x12)) {\n                data_index = (byte_index >> 3) + 8;\n                byte_shift = (byte_index & 7) << 2;\n                data_dest[data_index] = data_dest[data_index] & ~(0xf << byte_shift) | data_src[4] << byte_shift;\n            }\n            bit_shift = byte_index << 1;\n            temp_data = ~(3 << (bit_shift & 0xff));\n            data_type = data_src[1] & 3;\n            *data_dest = *data_dest & temp_data | data_type << (bit_shift & 0xff);\n            if (((data_src[1] - 1 < 2) || (data_src[1] == 0x11)) || (data_src[1] == 0x12)) {\n                data_dest[2] = data_dest[2] & temp_data | data_src[3] << (bit_shift & 0xff);\n                data_dest[1] = data_dest[1] & ~bit_mask | ((data_src[1] << 0x1b) >> 0x1f) << (byte_index & 0xff);\n            }\n            data_dest[3] = temp_data & data_dest[3] | data_src[2] << (bit_shift & 0xff);\n            if ((data_src[1] & 0x10000000) != 0) {\n                *(uint *)(PTR_DAT_0800118c + 0x44) = *(uint *)(PTR_DAT_0800118c + 0x44) | 0x4000;\n                byte_shift = (byte_index & 3) << 2;\n                if (data_dest == PTR_DAT_08001190) {\n                    data_index = 0;\n                }\n                else if (data_dest == PTR_DAT_08001194) {\n                    data_index = 1;\n                }\n                else if (data_dest == PTR_DAT_08001194 + 0x100) {\n                    data_index = 2;\n                }\n                else if (data_dest == PTR_DAT_08001194 + 0x200) {\n                    data_index = 3;\n                }\n                else if (data_dest == PTR_DAT_08001194 + 0x300) {\n                    data_index = 4;\n                }\n                else if (data_dest == PTR_DAT_08001194 + 0x400) {\n                    data_index = 5;\n                }\n                else if (data_dest == PTR_DAT_08001194 + 0x500) {\n                    data_index = 6;\n                }\n                else if (data_dest == PTR_DAT_08001194 + 0x600) {\n                    data_index = 7;\n                }\n                else if (data_dest == PTR_DAT_08001194 + 0x700) {\n                    data_index = 8;\n                }\n                else if (data_dest == PTR_DAT_08001194 + 0x800) {\n                    data_index = 9;\n                }\n                else {\n                    data_index = 10;\n                }\n                *(uint *)(PTR_DAT_08001184 + ((byte_index >> 2) + 2) * 4) = *(uint *)(PTR_DAT_08001184 + ((byte_index >> 2) + 2) * 4) & ~(0xf << byte_shift) | data_index << byte_shift;\n                dest_ptr = PTR_DAT_08001188;\n                bit_mask = ~bit_check;\n                temp_data = *PTR_DAT_08001188 & bit_mask;\n                if ((data_src[1] & 0x10000) != 0) {\n                    temp_data = bit_check | *PTR_DAT_08001188;\n                }\n                *PTR_DAT_08001188 = temp_data;\n                src_ptr = PTR_DAT_08001188;\n                temp_data = bit_mask & dest_ptr[1];\n                if ((data_src[1] & 0x20000) != 0) {\n                    temp_data = bit_check | dest_ptr[1];\n                }\n                PTR_DAT_08001188[1] = temp_data;\n                dest_ptr = PTR_DAT_08001188;\n                temp_data = bit_mask & src_ptr[2];\n                if ((data_src[1] & 0x100000) != 0) {\n                    temp_data = bit_check | src_ptr[2];\n                }\n                PTR_DAT_08001188[2] = temp_data;\n                bit_mask = bit_mask & dest_ptr[3];\n                if ((data_src[1] & 0x200000) != 0) {\n                    bit_mask = bit_check | dest_ptr[3];\n                }\n                PTR_DAT_08001188[3] = bit_mask;\n            }\n        }\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fb4",
            "calling": [
                "FUN_08003486",
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "update_data_08000fb4"
        },
        "FUN_08001718": {
            "renaming": {
                "FUN_08001718": "do_nothing_08001718"
            },
            "code": "\nvoid do_nothing_08001718(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001718",
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "imported": false,
            "current_name": "do_nothing_08001718"
        },
        "FUN_08001bfc": {
            "renaming": {
                "FUN_08001bfc": "execute_action_08001bfc",
                "param_1": "action_params",
                "cVar1": "current_char",
                "puVar2": "params_ptr",
                "puVar3": "ptr3",
                "ptr2": "params_ptr",
                "DAT_08001cfc": "PTR_DAT_08001cfc"
            },
            "code": "uint execute_action_08001bfc(uint **action_params) {\n  char current_char = *(char *)((int)action_params + 0x3d);\n  uint *params_ptr = *action_params;\n  params_ptr[1] &= 0xfffff8ff;\n  **action_params |= 1;\n  **action_params &= 0xfffffbff;\n\n  uint *ptr2 = *action_params;\n  if ((ptr2[1] & 0x800) != 0) {\n    if ((*(char *)((int)action_params + 0x3d) == '\"') || (*(char *)((int)action_params + 0x3d) == '*')) {\n      *(short *)((int)action_params + 0x2a) = (short)*(undefined4 *)(*action_params[0xe] + 4);\n    }\n    else {\n      *(short *)((int)action_params + 0x2a) = (short)*(undefined4 *)(*action_params[0xd] + 4);\n    }\n  }\n\n  if (*(short *)((int)action_params + 0x2a) != 0) {\n    if ((params_ptr[5] & 4) != 0) {\n      uint *ptr3 = action_params[9];\n      action_params[9] = (uint *)((int)ptr3 + 1);\n      *(char *)ptr3 = (char)params_ptr[4];\n      *(short *)((int)action_params + 0x2a) -= 1;\n    }\n    if (((*action_params)[5] & 0x40) != 0) {\n      ptr2 = action_params[9];\n      action_params[9] = (uint *)((int)ptr2 + 1);\n      *(char *)ptr2 = (char)(*action_params)[4];\n      *(short *)((int)action_params + 0x2a) -= 1;\n    }\n    action_params[0x10] = (uint *)((uint)action_params[0x10] | 4);\n  }\n\n  if (action_params[0x10] == (uint *)0x0) {\n    if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n      action_params[0xb] = DAT_08001cfc;\n      action_params[0xc] = (uint *)0x0;\n      *(undefined *)((int)action_params + 0x3d) = 0x20;\n      *(undefined *)((int)action_params + 0x3e) = 0;\n      execute_function_if_conditions_met_080038d0();\n    }\n    else if ((action_params[0xc] == (uint *)0x22) || (current_char == '\"')) {\n      action_params[0xc] = (uint *)0x0;\n      *(undefined *)((int)action_params + 0x3d) = 0x20;\n      *(undefined *)((int)action_params + 0x3e) = 0;\n      do_nothing_0800160c();\n    }\n  }\n  else {\n    check_and_execute_08001ab0();\n  }\n  return 0;\n}",
            "called": [
                "FUN_080038d0",
                "FUN_08001ab0",
                "FUN_0800160c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bfc",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "execute_action_08001bfc"
        },
        "FUN_08002d72": {
            "renaming": {
                "FUN_08002d72": "check_and_update_08002d72",
                "param_1": "ptr_param",
                "do_nothing_08002d70": "do_nothing",
                "*(char *)((int)param_1 + 0x39)": "*(char *)((int)ptr_param + 0x39)",
                "*(undefined *)(param_1 + 0xe)": "*(undefined *)(ptr_param + 0xe)",
                "0x0": "NULL",
                "0x39": "0x39",
                "0x24": "0x24",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*ptr_param + 0xc)",
                "FUNC_080029c8": "update",
                "0x10": "0x10",
                "0x14": "0x14",
                "0xffffdfff": "0xffffdfff",
                "0xffffb7ff": "0xffffb7ff",
                "0xffffffd5": "0xffffffd5",
                "0x2000": "0x2000",
                "param_1[0xf]": "ptr_param[0xf]",
                "0x20": "0x20"
            },
            "code": "int check_and_update_08002d72(int *ptr_param)\\n{\\n    if (ptr_param != NULL) {\\n        if (*(char *)((int)ptr_param + 0x39) == \"\\0\") {\\n            *(undefined *)(ptr_param + 0xe) = 0;\\n            do_nothing();\\n        }\\n        *(undefined *)((int)ptr_param + 0x39) = 0x24;\\n        *(uint *)(*ptr_param + 0xc) &= 0xffffdfff;\\n        update(ptr_param);\\n        *(uint *)(*ptr_param + 0x10) &= 0xffffb7ff;\\n        *(uint *)(*ptr_param + 0x14) &= 0xffffffd5;\\n        *(uint *)(*ptr_param + 0xc) |= 0x2000;\\n        ptr_param[0xf] = 0;\\n        *(undefined *)((int)ptr_param + 0x39) = 0x20;\\n        *(undefined *)((int)ptr_param + 0x3a) = 0x20;\\n        return 0;\\n    }\\n    return 1;\\n}",
            "called": [
                "FUN_08002d70",
                "FUN_080029c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d72",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "check_and_update_08002d72"
        },
        "FUN_080007f0": {
            "renaming": {
                "FUN_080007f0": "check_values_080007f0",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "bVar1": "found",
                "bVar2": "byte_value",
                "cVar3": "char_value1",
                "cVar4": "char_value2",
                "iVar5": "int_value1",
                "iVar7": "int_value2",
                "uVar6": "uint_value"
            },
            "code": "int check_values_080007f0(int value1, int value2, uint value3, int value4){\n    bool found = false;\n    byte byte_value;\n    char char_value1;\n    char char_value2;\n    int int_value1;\n    uint uint_value;\n    int int_value2;\n    \n    uint_value = 0;\n    do {\n        if (uint_value > 7) {\n            found = false;\n            break;\n        }\n        if ((byte)PTR_DAT_080008c8[uint_value] == *(byte *)(value1 + 10)) {\n            found = true;\n            break;\n        }\n        uint_value++;\n    } while (true);\n\n    if (found == false) {\n        *(short *)(value1 + 0x54) = *(short *)(value1 + 0x54) + 1;\n        return 1;\n    }\n\n    int_value2 = *(byte *)(value1 + 10) - 1;\n    switch(*(byte *)(value1 + 10)) {\n        case 1:\n        case 2:\n        case 0xf:\n            int_value1 = combine_values_08004640(*(undefined *)(value1 + 0xb),*(undefined *)(value1 + 0xc),value3,int_value2,value4);\n            break;\n        case 3:\n        case 4:\n        case 0x10:\n            char_value1 = combine_values_08004640(*(undefined *)(value1 + 0xb),*(undefined *)(value1 + 0xc),value3,int_value2,value4);\n            char_value2 = combine_values_08004640(*(undefined *)(value1 + 0xd),*(undefined *)(value1 + 0xe));\n            if (*(byte *)(value1 + 0x60) < (byte)(char_value2 + char_value1)) {\n                return 2;\n            }\n            return 0;\n        case 5:\n            int_value1 = combine_values_08004640(*(undefined *)(value1 + 0xb),*(undefined *)(value1 + 0xc),value3,int_value2,value4);\n            if ((uint)*(byte *)(value1 + 0x60) < (uint)(int_value1 << 0x14) >> 0x18) {\n                return 2;\n            }\n            return 0;\n        case 6:\n            byte_value = combine_values_08004640(*(undefined *)(value1 + 0xb),*(undefined *)(value1 + 0xc),value3,int_value2,value4);\n            if (*(byte *)(value1 + 0x60) < byte_value) {\n                return 2;\n            }\n            return 0;\n        default:\n            return 0;\n    }\n    int_value2 = combine_values_08004640(*(undefined *)(value1 + 0xd),*(undefined *)(value1 + 0xe));\n    if ((uint)*(byte *)(value1 + 0x60) < (((uint)(int_value1 << 0xc) >> 0x10) + ((uint)(int_value2 << 0xc) >> 0x10) & 0xff)) {\n        return 2;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080007f0",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "check_values_080007f0"
        },
        "FUN_0800562a": {
            "renaming": {
                "FUN_0800562a": "process_input_0800562a",
                "param_1": "output",
                "param_2": "input_index",
                "param_3": "default_value",
                "param_4": "default_value_flag",
                "sVar1": "input_value",
                "puVar2": "unused_pointer",
                "iVar3": "result"
            },
            "code": "void process_input_0800562a(int *output, int input_index, int default_value, int default_value_flag)\n{\n    short input_value = *(short *)(input_index + 0xe);\n    if ((int)((uint)*(ushort *)(input_index + 0xc) << 0x17) < 0) {\n        get_default_value_and_set_if_not_negative(output, input_value, default_value, default_value_flag);\n    }\n    *(ushort *)(input_index + 0xc) = *(ushort *)(input_index + 0xc) & 0xefff;\n    int result = process_input_0800562a_wrapper(input_value, default_value_flag, default_value_flag, default_value_flag, 0, 0, 0, 0);\n    if ((result == -1) && (*(int *)PTR_DAT_080056b0 != 0)) {\n        *output = *(int *)PTR_DAT_080056b0;\n    }\n    return;\n}",
            "called": [
                "FUN_08005718",
                "FUN_080040ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800562a",
            "calling": [],
            "imported": false,
            "current_name": "process_input_0800562a"
        },
        "FUN_080044d8": {
            "renaming": {
                "FUN_080044d8": "initialize_if_param_is_one_080044d8",
                "param_1": "param_one",
                "param_2": "param_two",
                "PTR_DAT_080044f8": "pointer_data_080044f8",
                "DAT_080044f4": "data_080044f4",
                "param_3": "parameter_three",
                "param_4": "parameter_four"
            },
            "code": "void initialize_if_param_is_one_080044d8(int param_1, int param_2, undefined4 param_3, undefined4 param_4)\n{\n    if (param_1 != 1) {\n        return;\n    }\n    if (param_2 == 0xffff) {\n        initialize_data(PTR_DAT_080044f8, DAT_080044f4, param_3, 0xffff, param_4);\n    }\n    return;\n}",
            "called": [
                "FUN_0800447c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044d8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_if_param_is_one_080044d8"
        },
        "FUN_08003df4": {
            "renaming": {
                "FUN_08003df4": "is_valid_input_08003df4",
                "param_1": "input_index",
                "uVar1": "combined_bytes",
                "combine_bytes_0800312c": "combine_bytes",
                "PTR_DAT_08003e14": "data_pointer",
                "DAT_08003e14": "data"
            },
            "code": "bool is_valid_input_08003df4(int input_index) {\n    uint16_t combined_bytes = combine_bytes(get_PTR_DAT_08003e14(PTR_DAT_08003e14, *(byte *)(input_index + 0x44) * 4));\n    return (combined_bytes & 0x21) == 0x21;\n}",
            "called": [
                "FUN_0800312c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003df4",
            "calling": [
                "FUN_080042e8"
            ],
            "imported": false,
            "current_name": "is_valid_input_08003df4"
        },
        "FUN_08005400": {
            "renaming": {
                "FUN_08005400": "find_and_initialize_array_08005400",
                "param_1": "error_code",
                "param_2": "size",
                "param_3": "fill_value_1",
                "param_4": "fill_value_2",
                "piVar1": "array_ptr",
                "piVar2": "current_ptr",
                "iVar3": "array_count",
                "ppiVar4": "array_list_ptr"
            },
            "code": "int * find_and_initialize_array_08005400(undefined4 *error_code, undefined4 size, undefined4 fill_value_1, undefined4 fill_value_2)\n{\n    int *array_ptr;\n    int *current_ptr;\n    int array_count;\n    int **array_list_ptr;\n    \n    array_count = *(int *)PTR_PTR_DAT_08005474;\n    if (*(int *)(array_count + 0x18) == 0) {\n        initialize_array_count_080053a0(array_count);\n    }\n    array_list_ptr = (int **)(array_count + 0x48);\n    do {\n        current_ptr = array_list_ptr[2];\n        array_ptr = array_list_ptr[1];\n        while (array_ptr = (int *)((int)array_ptr + -1), -1 < (int)array_ptr) {\n            if (*(short *)(current_ptr + 3) == 0) {\n                *(undefined2 *)((int)current_ptr + 0xe) = 0xffff;\n                *(undefined2 *)(current_ptr + 3) = 1;\n                current_ptr[0x19] = 0;\n                *current_ptr = 0;\n                current_ptr[2] = 0;\n                current_ptr[1] = 0;\n                current_ptr[4] = 0;\n                current_ptr[5] = 0;\n                current_ptr[6] = 0;\n                fill_array_with_value(current_ptr + 0x17, 0, 8, fill_value_1, fill_value_2);\n                current_ptr[0xd] = 0;\n                current_ptr[0xe] = 0;\n                current_ptr[0x12] = 0;\n                current_ptr[0x13] = 0;\n                return current_ptr;\n            }\n            current_ptr = current_ptr + 0x1a;\n        }\n        if (*array_list_ptr == (int *)0x0) {\n            array_ptr = (int *)allocate_and_initialize_array(error_code, size);\n            *array_list_ptr = array_ptr;\n            if (array_ptr == (int *)0x0) {\n                *error_code = 0xc;\n                return (int *)0x0;\n            }\n        }\n        array_list_ptr = (int **)*array_list_ptr;\n    } while(true);\n}",
            "called": [
                "FUN_08005374",
                "FUN_080053a0",
                "FUN_080048cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005400",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "find_and_initialize_array_08005400",
            "code_backup": "\nint * FUN_08005400(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int iVar3;\n  int **ppiVar4;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08005474;\n  if (*(int *)(iVar3 + 0x18) == 0) {\n    FUNC_080053a0(iVar3);\n  }\n  ppiVar4 = (int **)(iVar3 + 0x48);\n  do {\n    piVar2 = ppiVar4[2];\n    piVar1 = ppiVar4[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        piVar2[0x19] = 0;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_array_with_value_080048cc(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar4 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_array_08005374(param_1,4);\n      *ppiVar4 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar4 = (int **)*ppiVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_08003582": {
            "renaming": {
                "FUN_08003582": "compare_and_return_08003582",
                "param_1": "value1",
                "param_2": "value2"
            },
            "code": "int compare_and_return_08003582(int value1, int value2) {\n   if (value1 != value2) {\n      if (value1 == 0) {\n         return value2;\n      }\n      if (value2 == 0) {\n         return value1;\n      }\n      value1 = 0;\n   }\n   return value1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003582",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "compare_and_return_08003582"
        },
        "FUN_08005760": {
            "renaming": {
                "FUN_08005760": "execute_input_and_update_flags_08005760",
                "UNRECOVERED_JUMPTABLE": "jump_table_ptr",
                "PTR_DAT_080057fc": "flag_ptr_1",
                "PTR_DAT_08005800": "flag_ptr_2",
                "PTR_DAT_08005804": "flag_ptr_3",
                "PTR_DAT_08005808": "flag_ptr_4",
                "PTR_DAT_0800580c": "flag_ptr_5",
                "PTR_DAT_08005810": "flag_ptr_6",
                "PTR_DAT_08005814": "flag_ptr_7",
                "PTR_DAT_08005818": "flag_ptr_8",
                "PTR_DAT_0800581c": "flag_ptr_9",
                "PTR_DAT_08005820": "flag_ptr_10",
                "PTR_DAT_08005824": "flag_ptr_11",
                "PTR_DAT_08005828": "flag_ptr_12"
            },
            "code": "void execute_input_and_update_flags_08005760() {\n  code *jump_table_ptr;\n  jump_table_ptr = execute_input_and_update_flags_08005760;\n  execute_input();\n  update_flag(PTR_DAT_080057fc);\n  update_flag(PTR_DAT_08005800);\n  update_flag(PTR_DAT_08005804);\n  update_flag(PTR_DAT_08005808);\n  update_flag(PTR_DAT_0800580c);\n  update_flag(PTR_DAT_08005810);\n  update_flag(PTR_DAT_08005814);\n  update_flag(PTR_DAT_08005818);\n  update_flag(PTR_DAT_0800581c);\n  update_flag(PTR_DAT_08005820);\n  update_flag(PTR_DAT_08005824);\n  update_flag(PTR_DAT_08005828);\n  (*jump_table_ptr)();\n  return;\n}",
            "called": [
                "FUN_080051ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005760",
            "calling": [
                "FUN_080047c0"
            ],
            "imported": false,
            "current_name": "execute_input_and_update_flags_08005760"
        },
        "FUN_08004678": {
            "renaming": {
                "FUN_08004678": "find_number_of_bits_in_binary_representation_08004678",
                "param_1": "num",
                "cVar1": "bit_count"
            },
            "code": "char find_number_of_bits_in_binary_representation_08004678(uint num) {\n  char bit_count = 0;\n  while (num != 1) {\n    num = num >> 1;\n    bit_count++;\n  }\n  return bit_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004678",
            "calling": [
                "FUN_080047d0"
            ],
            "imported": false,
            "current_name": "find_number_of_bits_in_binary_representation_08004678"
        },
        "FUN_08003900": {
            "renaming": {
                "FUN_08003900": "check_and_set_flag_for_number_08003900",
                "param_1": "num",
                "iVar1": "num_minus_four",
                "subtract_four_from_number_0800387c": "subtract_four_from_number",
                "set_bit_and_flags_08001578": "set_bit_and_flags"
            },
            "code": "void check_and_set_flag_for_number_08003900(int num) {\\n  int num_minus_four = subtract_four_from_number();\\n  if (*(char *)(num_minus_four + 0x5f) == \"\\0\") {\\n    set_bit_and_flags(num);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003900",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "check_and_set_flag_for_number_08003900"
        },
        "FUN_08000f0c": {
            "renaming": {
                "FUN_08000f0c": "set_bit_in_array_08000f0c",
                "param_1": "bit_index",
                "DAT_08000f28": "array_start_ptr"
            },
            "code": "void set_bit_in_array_08000f0c(uint bit_index){\n    if (bit_index >= 0) {\n        int array_index = (bit_index >> 5) + 0x60;\n        int* array_ptr = (int*)(DAT_08000f28 + array_index * 4);\n        int bit_mask = 1 << (bit_index & 0x1f);\n        *array_ptr = bit_mask;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f0c",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_in_array_08000f0c"
        },
        "FUN_08000998": {
            "renaming": {
                "FUN_08000998": "decode_and_update_data_08000998",
                "param_1": "data_buffer",
                "param_2": "data_length",
                "param_3": "param_3",
                "param_4": "param_4",
                "bVar1": "start_index",
                "cVar2": "combined_value_2",
                "bVar3": "combined_value_1",
                "bVar4": "data_count",
                "uVar5": "current_index",
                "uVar6": "next_index"
            },
            "code": "int decode_and_update_data_08000998(int data_buffer, int data_length, int param_3, int param_4)\n{\n  byte combined_value_1;\n  char combined_value_2;\n  byte start_index;\n  byte data_count;\n  uint current_index;\n  uint next_index;\n  combined_value_1 = combine_values(*(byte *)(data_buffer + 0xb), *(byte *)(data_buffer + 0xc), param_3, param_4, param_4);\n  data_count = combine_values(*(byte *)(data_buffer + 0xd), *(byte *)(data_buffer + 0xe));\n  *(byte *)(data_buffer + 0xb) = data_count << 1;\n  *(byte *)(data_buffer + 0x49) = 3;\n  for (current_index = (uint)combined_value_1; current_index < (uint)combined_value_1 + (uint)data_count; current_index = next_index) {\n    start_index = *(byte *)(data_buffer + 0x49);\n    *(char *)(data_buffer + (uint)start_index + 9) = (char)((ushort)*(undefined2 *)(data_length + current_index * 2) >> 8);\n    next_index = start_index + 1 & 0xff;\n    *(byte *)(data_buffer + 0x49) = next_index;\n    *(undefined *)(data_buffer + next_index + 9) = *(undefined *)(data_length + current_index * 2);\n    *(byte *)(data_buffer + 0x49) = next_index + 1;\n  }\n  combined_value_2 = *(char *)(data_buffer + 0x49);\n  calculate_crc_and_update_data(data_buffer);\n  return (int)(char)(combined_value_2 + 2);\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "decode_and_update_data_08000998"
        },
        "FUN_08003f94": {
            "renaming": {
                "FUN_08003f94": "do_nothing_08003f94"
            },
            "code": "\nvoid do_nothing_08003f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f94"
        },
        "FUN_080055d0": {
            "renaming": {
                "FUN_080055d0": "process_input_080055d0",
                "param_1": "input_length",
                "piVar3": "function_ptr_array",
                "iVar4": "function_index",
                "pcVar5": "function_ptr",
                "PTR_PTR_DAT_080055dc": "function_ptr_array_ptr",
                "PTR_DAT_08005600": "error_code_ptr_ptr",
                "puVar1": "temporary_variable",
                "puVar6": "temporary_variable",
                "uVar2": "thunk_value",
                "unaff_r4": "unaff_r4",
                "unaff_r5": "unaff_r5",
                "in_lr": "in_lr"
            },
            "code": "int process_input_080055d0(uint input_length) {\n    int *error_code_ptr;\n    int *function_ptr_array;\n    int function_index;\n    code *function_ptr;\n    uint max_function_index = 0x1f;\n\n    function_ptr_array = *(int **)PTR_PTR_DAT_080055dc;\n    error_code_ptr = *(int **)PTR_DAT_08005600;\n\n    if (input_length > max_function_index) {\n        *error_code_ptr = 0x16;\n        return -1;\n    }\n\n    function_index = function_ptr_array[0x11];\n    function_ptr = *(code **)(function_index + input_length * 4);\n\n    if (function_ptr != NULL) {\n        if (function_ptr != (code *)0x1) {\n            if (function_ptr == (code *)0xffffffff) {\n                *error_code_ptr = 0x16;\n                return 1;\n            }\n            *(undefined4 *)(function_index + input_length * 4) = 0;\n            (*function_ptr)(input_length);\n        }\n        return 0;\n    }\n\n    uint temporary_variable = 0;\n    uint thunk_value = get_one_thunk(function_ptr_array);\n    uint initialization_result = initialize_pointer(thunk_value, input_length, input_length, temporary_variable, function_ptr_array, unaff_r4, unaff_r5, in_lr);\n\n    if ((initialization_result == -1) && (*(int *)error_code_ptr != 0)) {\n        *error_code_ptr = *(int *)PTR_DAT_08005600;\n    }\n    return initialization_result;\n}",
            "called": [
                "thunk_FUN_0800410c",
                "FUN_080040fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055d0",
            "calling": [
                "FUN_080051ac"
            ],
            "imported": false,
            "current_name": "process_input_080055d0"
        },
        "FUN_080056f8": {
            "renaming": {
                "FUN_080056f8": "calculate_and_set_result_080056f8",
                "param_1": "result",
                "param_2": "input_value",
                "puVar1": "data_pointer",
                "iVar2": "calculated_result"
            },
            "code": "void calculate_and_set_result_080056f8(int *result, undefined4 input_value)\n{\n    undefined *data_pointer = PTR_DAT_08005714;\n    *(undefined4 *)PTR_DAT_08005714 = 0;\n    int calculated_result = calculate_result_080040e0(input_value);\n    if ((calculated_result == -1) && (*(int *)data_pointer != 0)) {\n        *result = *(int *)data_pointer;\n    }\n    return;\n}",
            "called": [
                "FUN_080040e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056f8",
            "calling": [
                "FUN_080054fc"
            ],
            "imported": false,
            "current_name": "calculate_and_set_result_080056f8"
        },
        "FUN_080054b4": {
            "renaming": {
                "FUN_080054b4": "check_permissions_and_set_080054b4",
                "param_1": "base_address",
                "param_2": "permissions",
                "param_3": "output_value",
                "param_4": "flags",
                "iVar1": "result",
                "uVar2": "value",
                "auStack_4c": "local_flags",
                "local_48": "unused"
            },
            "code": "int check_permissions_and_set_080054b4(uint32_t base_address, int16_t permissions, uint32_t* output_value, uint32_t* flags) {\n    int result;\n    uint32_t local_flags;\n\n    if (permissions < 0 || (result = set_permissions(base_address, permissions, &local_flags)) < 0) {\n        *flags = 0;\n        if ((int32_t)((uint32_t)*(uint16_t*)(permissions + 0xc) << 0x18) < 0) {\n            *output_value = 0x40;\n            goto LAB_080054f4;\n        }\n    }\n    else {\n        *flags = (uint32_t)((local_flags & 0xf000) == 0x2000);\n    }\n    *output_value = 0x400;\nLAB_080054f4:\n    return 0;\n}",
            "called": [
                "FUN_080056d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b4",
            "calling": [
                "FUN_080054fc"
            ],
            "imported": false,
            "current_name": "check_permissions_and_set_080054b4"
        },
        "FUN_0800171a": {
            "renaming": {
                "FUN_0800171a": "process_input_0800171a",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "puVar"
            },
            "code": "uint32_t process_input_0800171a(uint32_t **input)\n{\n    char current_char = *(char *)((int)input + 0x3d);\n    uint32_t *puVar = input[0xb];\n    \n    if ((*(short *)(input + 10) == 0) && (current_char == '!')) {\n        if ((puVar == (uint32_t *)0x4) || ((puVar == (uint32_t *)0x8 || (puVar == (uint32_t *)0xffff0000)))) {\n            (*input)[1] = (*input)[1] & 0xfffff8ff;\n            **input = **input | 0x200;\n            input[0xc] = (uint32_t *)0x0;\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            if (*(char *)((int)input + 0x3e) == '@') {\n                *(undefined *)((int)input + 0x3e) = 0;\n                do_nothing_08001718();\n            }\n            else {\n                *(undefined *)((int)input + 0x3e) = 0;\n                do_nothing_080015b6();\n            }\n        }\n        else {\n            (*input)[1] = (*input)[1] & 0xfffff8ff;\n            input[0xc] = (uint32_t *)0x11;\n            *(undefined *)((int)input + 0x3e) = 0;\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            do_nothing_080015b6();\n        }\n    }\n    else if ((current_char == '!') || ((*(char *)((int)input + 0x3e) == '@' && (current_char == '\"')))) {\n        if (*(short *)((int)input + 0x2a) == 0) {\n            (*input)[1] = (*input)[1] & 0xfffffbff;\n        }\n        else if (*(char *)((int)input + 0x3e) == '@') {\n            if (input[0x14] == (uint32_t *)0x0) {\n                if (input[0x13] == (uint32_t *)0x1) {\n                    (*input)[4] = (uint32_t)input[0x12] & 0xff;\n                    input[0x14] = (uint32_t *)((int)input[0x14] + 2);\n                }\n                else {\n                    (*input)[4] = (uint32_t)((int)input[0x12] << 0x10) >> 0x18;\n                    input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n                }\n            }\n            else if (input[0x14] == (uint32_t *)0x1) {\n                (*input)[4] = (uint32_t)input[0x12] & 0xff;\n                input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n            }\n            else if (input[0x14] == (uint32_t *)0x2) {\n                if (*(char *)((int)input + 0x3d) == '\"') {\n                    **input = **input | 0x100;\n                }\n                else if (*(char *)((int)input + 0x3d) == '!') {\n                    puVar = input[9];\n                    input[9] = (uint32_t *)((int)puVar + 1);\n                    (*input)[4] = (uint32_t)*(byte *)puVar;\n                    *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n                }\n            }\n        }\n        else {\n            puVar = input[9];\n            input[9] = (uint32_t *)((int)puVar + 1);\n            (*input)[4] = (uint32_t)*(byte *)puVar;\n            *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800171a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_0800171a"
        },
        "FUN_08004560": {
            "renaming": {
                "FUN_08004560": "initialize_values_if_required_08004560",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "initialize_values_08004544": "initialize_values",
                "PTR_DAT_08004588": "PTR_DAT_08004588"
            },
            "code": "void initialize_values_if_required_08004560(int input_param_1, int input_param_2) {\n    int required_param_1 = 1;\n    int required_param_2 = 0xffff;\n    if (input_param_1 == required_param_1 && input_param_2 == required_param_2) {\n        initialize_values(PTR_DAT_08004588, 0, 0, 0, 0);\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_08004544"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004560",
            "calling": [],
            "imported": false,
            "current_name": "initialize_values_if_required_08004560"
        },
        "FUN_08000a7a": {
            "renaming": {
                "FUN_08000a7a": "combine_and_update_values_08000a7a",
                "param_1": "data_address",
                "param_2": "output_address",
                "param_3": "value1",
                "param_4": "value2",
                "iVar1": "combined_value1",
                "iVar2": "combined_value2",
                "uVar3": "i",
                "uVar4": "bit_index",
                "uVar5": "bit_offset",
                "uVar6": "byte_offset",
                "uVar7": "byte_index"
            },
            "code": "int combine_and_update_values_08000a7a(int data_address, int output_address, int value1, int value2, int value3) {\n  int combined_value1 = combine_values(*(undefined *)(data_address + 0xb),*(undefined *)(data_address + 0xc),value1,value2,value3);\n  int combined_value2 = combine_values(*(undefined *)(data_address + 0xd),*(undefined *)(data_address + 0xe));\n  uint8_t bit_index = 0;\n  uint8_t byte_index = 7;\n  for (uint32_t i = 0; i < combined_value2; i++) {\n    uint8_t byte_offset = (i + combined_value1) * 0x100000 >> 0x18;\n    uint8_t bit_offset = (i + combined_value1) & 0xf;\n    if (((int)(uint)*(byte *)(data_address + byte_index + 9) >> bit_index & 1U) == 0) {\n      *(uint16_t *)(output_address + byte_offset * 2) = *(uint16_t *)(output_address + byte_offset * 2) & ~(uint16_t)(1 << bit_offset);\n    }\n    else {\n      *(uint16_t *)(output_address + byte_offset * 2) = (uint16_t)(1 << bit_offset) | *(uint16_t *)(output_address + byte_offset * 2);\n    }\n    bit_index = (bit_index + 1) & 0xff;\n    if (7 < bit_index) {\n      byte_index = (byte_index + 1) & 0xff;\n      bit_index = 0;\n    }\n  }\n  *(uint8_t *)(data_address + 0x49) = 6;\n  calculate_crc_and_update_data(data_address);\n  return 8;\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a7a",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "combine_and_update_values_08000a7a"
        },
        "FUN_08003474": {
            "renaming": {
                "FUN_08003474": "do_nothing_08003474"
            },
            "code": "\nvoid do_nothing_08003474(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "do_nothing_08003474"
        },
        "FUN_08004cb0": {
            "renaming": {
                "FUN_08004cb0": "count_chars_08004cb0",
                "param_1": "input",
                "param_2": "output_buffer",
                "param_3": "output_length",
                "param_4": "arg1",
                "param_5": "callback",
                "iVar1": "status",
                "uVar2": "max_output_length",
                "uVar3": "output_offset",
                "bVar4": "is_offset_four"
            },
            "code": "int count_chars_08004cb0(uint32_t input, uint32_t *output_length, uint32_t *output_buffer, uint32_t arg1, code *callback) {\n    int status;\n    uint32_t max_output_length = output_buffer[4];\n    if (max_output_length < output_buffer[2]) {\n        max_output_length = output_buffer[2];\n    }\n    *output_length = max_output_length;\n    if (*(char *)((int)output_buffer + 0x43) != '\\0') {\n        *output_length += 1;\n    }\n    if ((int)(input << 0x1a) < 0) {\n        *output_length += 2;\n    }\n    uint32_t output_offset = input & 6;\n    if (output_offset == 0) {\n        for (; (int)output_offset < (int)(output_buffer[3] - *output_length); output_offset++) {\n            status = (*callback)(arg1, input + 0x19, 1);\n            if (status == -1) {\n                return 0xffffffff;\n            }\n        }\n    }\n    output_offset = (uint32_t)*(byte *)((int)output_buffer + 0x43);\n    if (output_offset != 0) {\n        output_offset = 1;\n    }\n    if ((int)(input << 0x1a) < 0) {\n        *(undefined *)((int)output_buffer + output_offset + 0x43) = 0x30;\n        *(undefined *)((int)output_buffer + output_offset + 0x44) = *(undefined *)((int)output_buffer + 0x45);\n        output_offset += 2;\n    }\n    status = (*callback)(arg1, input + 0x43, output_offset);\n    if (status != -1) {\n        uint32_t remaining_output_length = output_buffer[3];\n        bool is_offset_four = (input & 6) == 4;\n        if (is_offset_four) {\n            remaining_output_length -= *output_length;\n        }\n        if (is_offset_four) {\n            remaining_output_length &= ~((int)remaining_output_length >> 0x1f);\n        }\n        else {\n            remaining_output_length = 0;\n        }\n        if (max_output_length < output_buffer[2]) {\n            remaining_output_length += (output_buffer[2] - output_buffer[4]);\n        }\n        uint32_t i = 0;\n        while (true) {\n            if (remaining_output_length == i) {\n                return 0;\n            }\n            status = (*callback)(arg1, input + 0x1a, 1);\n            if (status == -1) {\n                break;\n            }\n            i++;\n        }\n    }\n    return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb0",
            "calling": [
                "FUN_08004d9c"
            ],
            "imported": false,
            "current_name": "count_chars_08004cb0"
        },
        "FUN_08003594": {
            "renaming": {
                "FUN_08003594": "execute_code_if_not_null_08003594",
                "PTR_DAT_080035a4": "CODE_PTR",
                "PTR_DAT_080035a8": "CODE_PARAM"
            },
            "code": "void execute_code_if_not_null_08003594(void)\n{\n  code* code_ptr = *(code**)PTR_DAT_080035a4;\n  if (code_ptr != NULL)\n  {\n    code_ptr(*(int*)PTR_DAT_080035a8);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003594",
            "calling": [
                "FUN_0800262c"
            ],
            "imported": false,
            "current_name": "execute_code_if_not_null_08003594"
        },
        "FUN_08002940": {
            "renaming": {
                "FUN_08002940": "update_values_08002940",
                "param_1": "input_param",
                "*param_1": "*input_param",
                "uint": "unsigned int",
                "PTR_": "",
                "DAT_": "",
                "ptr1": "unsigned_int_ptr_1",
                "ptr2": "unsigned_int_ptr_2",
                "c_ptr": "char_ptr"
            },
            "code": "void update_values_08002940(int *input_param) {\n  uint *ptr1 = (uint *)(*input_param + 0xc);\n  *ptr1 &= 0xfffffedf;\n  uint *ptr2 = (uint *)(*input_param + 0x14);\n  *ptr2 &= 0xfffffffe;\n  char *c_ptr = (char *)(input_param + 0x3a);\n  *c_ptr = ' ';\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002940",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "update_values_08002940"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "get_value_and_return_08004204"
            },
            "code": "void get_value_and_return_08004204(void)\n{\n  get_value_and_return_08004204_0800346c();\n  return;\n}",
            "called": [
                "FUN_0800346c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "FUN_0800076c",
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "get_value_and_return_08004204"
        },
        "FUN_08003476": {
            "renaming": {
                "FUN_08003476": "add_byte_and_do_nothing_08003476",
                "add_byte_to_uint_and_store_08000e18": "add_byte_to_uint_and_store",
                "do_nothing_and_return_08000f4e": "do_nothing_and_return",
                "do_nothing_08003474": "do_nothing"
            },
            "code": "void add_byte_and_do_nothing_08003476(void)\n{\n  add_byte_to_uint_and_store();\n  do_nothing_and_return();\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08000e18",
                "FUN_08000f4e",
                "FUN_08003474"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003476",
            "calling": [],
            "imported": false,
            "current_name": "add_byte_and_do_nothing_08003476"
        },
        "FUN_08004444": {
            "renaming": {
                "FUN_08004444": "set_value_at_offset_08004444",
                "param_1": "offset",
                "param_2": "value",
                "uVar1": "value_to_set",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void set_value_at_offset_08004444(int offset, uint value) {\n  undefined2 value_to_set;\n  code *jump_table;\n  if (value < 0x60) {\n    value_to_set = *(undefined2 *)(PTR_DAT_0800445c + value * 2);\n  }\n  else {\n    value_to_set = 0xffff;\n  }\n  *(undefined2 *)(offset + 0x12e) = value_to_set;\n  (*jump_table)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004444",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_08004444"
        },
        "FUN_0800346c": {
            "renaming": {
                "FUN_0800346c": "get_value_and_return_0800346c",
                "get_value_from_pointer_08000e30": "get_value_from_pointer"
            },
            "code": "void get_value_and_return_0800346c(void)\n{\n  get_value_from_pointer();\n  return;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800346c",
            "calling": [
                "FUN_08004204"
            ],
            "imported": false,
            "current_name": "get_value_and_return_0800346c"
        },
        "FUN_080053a0": {
            "renaming": {
                "FUN_080053a0": "initialize_arrays_080053a0",
                "param_1": "array_ptr",
                "uVar1": "array_ptr_size",
                "iVar2": "initialized_array",
                "bVar3": "is_array_initialized"
            },
            "code": "void initialize_arrays_080053a0(int array_ptr)\n{\n    // Check if array is already initialized\n    if (*(int *)(array_ptr + 0x18) == 0) {\n        // Initialize array pointers to NULL\n        *(undefined4 *)(array_ptr + 0x48) = 0;\n        *(undefined4 *)(array_ptr + 0x4c) = 0;\n        *(undefined4 *)(array_ptr + 0x50) = 0;\n        \n        // Set up array\n        bool is_array_initialized = array_ptr == *(int *)PTR_PTR_DAT_080053f8;\n        if (is_array_initialized) {\n            *(int *)(array_ptr + 0x18) = 1;\n        }\n        \n        // Initialize the array with specified parameters\n        *(undefined4 *)(array_ptr + 4) = find_and_initialize_array_08005400();\n        *(undefined4 *)(array_ptr + 8) = find_and_initialize_array_08005400(array_ptr);\n        *(undefined4 *)(array_ptr + 0xc) = find_and_initialize_array_08005400(array_ptr);\n        initialize_params_0800532c(*(undefined4 *)(array_ptr + 4), 4, 0);\n        initialize_params_0800532c(*(undefined4 *)(array_ptr + 8), 9, 1);\n        initialize_params_0800532c(*(undefined4 *)(array_ptr + 0xc), 0x12, 2);\n        *(int *)(array_ptr + 0x18) = 1;\n    }\n}",
            "called": [
                "FUN_08005400",
                "FUN_0800532c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053a0",
            "calling": [
                "FUN_08004a84",
                "FUN_08004fdc",
                "FUN_080052cc",
                "FUN_080050d0",
                "FUN_08004a34",
                "FUN_08005400"
            ],
            "imported": false,
            "current_name": "initialize_arrays_080053a0"
        },
        "FUN_0800201c": {
            "renaming": {
                "FUN_0800201c": "FUNC_0800201c"
            },
            "code": "\nundefined4 FUNC_0800201c(uint *param_1)\n\n{\n  uint *puVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 uVar4;\n  bool bVar5;\n  \n  puVar1 = DAT_080022d0;\n  if (param_1 == (uint *)0x0) {\n    return 1;\n  }\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 4) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) != 0)))) {\n      if (((*DAT_080022d0 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (param_1[1] == 0x10000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x10000;\n      }\n      else if (param_1[1] == 0x50000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x40000;\n        *puVar1 = *puVar1 | 0x10000;\n      }\n      else {\n        *DAT_080022d0 = *DAT_080022d0 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar2 = get_value_from_pointer_08000e30();\n        while ((*DAT_080022d0 & 0x20000) != 0) {\n          iVar3 = get_value_from_pointer_08000e30();\n          if (100 < (uint)(iVar3 - iVar2)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar2 = get_value_from_pointer_08000e30();\n        while ((*DAT_080022d0 & 0x20000) == 0) {\n          iVar3 = get_value_from_pointer_08000e30();\n          if (100 < (uint)(iVar3 - iVar2)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 0) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) == 0)))) {\n      if (((*DAT_080022d0 & 2) != 0) && (param_1[3] != 1)) {\n        return 1;\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | param_1[4] << 3;\n    }\n    else if (param_1[3] == 0) {\n      *DAT_080022d4 = 0;\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((*DAT_080022d0 & 2) != 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_080022d4 = 1;\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((*DAT_080022d0 & 2) == 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | param_1[4] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[5] == 0) {\n      *DAT_080022d8 = 0;\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((DAT_080022d0[0x1d] & 2) != 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_080022d8 = 1;\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((DAT_080022d0[0x1d] & 2) == 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar5 = (DAT_080022d0[0x10] & 0x10000000) == 0;\n    if (bVar5) {\n      DAT_080022d0[0x10] = DAT_080022d0[0x10] | 0x10000000;\n    }\n    if ((*DAT_080022dc & 0x100) == 0) {\n      *DAT_080022dc = *DAT_080022dc | 0x100;\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((*DAT_080022dc & 0x100) == 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    puVar1 = DAT_080022d0;\n    if (param_1[2] == 1) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 1;\n    }\n    else if (param_1[2] == 5) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 4;\n      puVar1[0x1c] = puVar1[0x1c] | 1;\n    }\n    else {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] & 0xfffffffe;\n      puVar1[0x1c] = puVar1[0x1c] & 0xfffffffb;\n    }\n    if (param_1[2] == 0) {\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((DAT_080022d0[0x1c] & 2) != 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (5000 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((DAT_080022d0[0x1c] & 2) == 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (5000 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar5) {\n      DAT_080023ac[0x10] = DAT_080023ac[0x10] & 0xefffffff;\n    }\n  }\n  if (param_1[6] == 0) {\n    uVar4 = 0;\n  }\n  else if ((DAT_080023ac[2] & 0xc) == 8) {\n    uVar4 = 1;\n  }\n  else if (param_1[6] == 2) {\n    *DAT_080023b0 = 0;\n    iVar2 = get_value_from_pointer_08000e30();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        DAT_080023ac[1] =\n             param_1[7] | param_1[8] | param_1[9] << 6 | ((param_1[10] >> 1) - 1) * 0x10000 |\n             param_1[0xb] << 0x18;\n        *DAT_080023b0 = 1;\n        iVar2 = get_value_from_pointer_08000e30();\n        do {\n          if ((*DAT_080023ac & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar3 = get_value_from_pointer_08000e30();\n        } while ((uint)(iVar3 - iVar2) < 3);\n        return 3;\n      }\n      iVar3 = get_value_from_pointer_08000e30();\n    } while ((uint)(iVar3 - iVar2) < 3);\n    uVar4 = 3;\n  }\n  else {\n    *DAT_080023b0 = 0;\n    iVar2 = get_value_from_pointer_08000e30();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar3 = get_value_from_pointer_08000e30();\n    } while ((uint)(iVar3 - iVar2) < 3);\n    uVar4 = 3;\n  }\n  return uVar4;\n}\n\n",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800201c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "FUNC_0800201c"
        },
        "FUN_080028d4": {
            "renaming": {
                "FUN_080028d4": "update_bits_at_position_080028d4",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value",
                "PTR_": "",
                "DAT_": "",
                "uint": "uint32_t",
                "*(": "*",
                ")": "",
                "&": "",
                "<<": "",
                "|": "",
                "&~": "mask = ~",
                "~": "",
                "=": "",
                "*": "data = "
            },
            "code": "void update_bits_at_position_080028d4(int base_address, uint8_t bit_position, int new_value)\n{\n  uint32_t* data = (uint32_t*)(base_address + 0x20);\n  uint32_t mask = ~(4 << (bit_position & 0xff));\n  uint32_t shifted_value = new_value << (bit_position & 0xff);\n\n  *data = (*data & mask) | shifted_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d4",
            "calling": [
                "FUN_080028f0"
            ],
            "imported": false,
            "current_name": "update_bits_at_position_080028d4"
        },
        "FUN_0800293c": {
            "renaming": {
                "FUN_0800293c": "do_nothing_0800293c"
            },
            "code": "\nvoid do_nothing_0800293c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293c",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293c"
        },
        "FUN_080040ec": {
            "renaming": {
                "FUN_080040ec": "process_input_wrapper_080040ec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "void process_input_wrapper_080040ec(undefined4 input1, undefined4 input2, undefined4 input3, undefined4 input4){\n  process_input_08003d18(input2, input3, input3, input4, input4);\n  return;\n}",
            "called": [
                "FUN_08003d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040ec",
            "calling": [
                "FUN_0800562a"
            ],
            "imported": false,
            "current_name": "process_input_wrapper_080040ec"
        },
        "FUN_08001460": {
            "renaming": {
                "FUN_08001460": "process_data_08001460",
                "param_1": "data_ptr",
                "param_2": "data",
                "param_3": "data_len",
                "param_4": "param_ptr",
                "uVar1": "result",
                "puVar2": "ptr",
                "c": "c"
            },
            "code": "uint32_t process_data_08001460(uint32_t **data_ptr, uint32_t *data, int data_len, uint32_t *param_ptr) {\n  uint32_t result;\n  uint32_t *ptr;\n  char c;\n  if (*(char *)((int)data_ptr + 0x3d) == '(') {\n    if (data == NULL) {\n      result = 1;\n    }\n    else if (data_len == 0) {\n      result = 1;\n    }\n    else if (*(char *)(data_ptr + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(char *)(data_ptr + 0xf) = 1;\n      ptr = *data_ptr;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **data_ptr = **data_ptr & 0xfffff7ff;\n      *(char *)((int)data_ptr + 0x3d) = 0x29;\n      *(char *)((int)data_ptr + 0x3e) = 0x20;\n      result = 0;\n      data_ptr[0x10] = NULL;\n      data_ptr[9] = data;\n      *(short *)((int)data_ptr + 0x2a) = (short)data_len;\n      data_ptr[0xb] = param_ptr;\n      *(short *)(data_ptr + 10) = *(short *)((int)data_ptr + 0x2a);\n      *(char *)(data_ptr + 0xf) = 0;\n      (*data_ptr)[1] = (*data_ptr)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001460",
            "calling": [
                "FUN_08003880"
            ],
            "imported": false,
            "current_name": "process_data_08001460"
        },
        "FUN_08003880": {
            "renaming": {
                "FUN_08003880": "process_input_08003880",
                "param_1": "input_address",
                "param_2": "input_type",
                "param_3": "expected_output",
                "param_4": "output_size",
                "iVar1": "result"
            },
            "code": "void process_input_08003880(int input_address, int input_type, int expected_output, undefined4 output_size)\n{\n  int result = subtract_four_from_number();\n  if (expected_output == *(int *)(input_address + 0xc)) {\n    if (input_type == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5e) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      process_data(input_address, result + 0x68, *(undefined *)(result + 0x88), 8);\n      return;\n    }\n    *(undefined *)(result + 0x5e) = 1;\n    validate_inputs(input_address, result + 0x68, 0x20, 8, output_size);\n  }\n  return;\n}",
            "called": [
                "FUN_080014ec",
                "FUN_08001460",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003880",
            "calling": [
                "FUN_0800165a"
            ],
            "imported": false,
            "current_name": "process_input_08003880"
        },
        "FUN_08002f4c": {
            "renaming": {
                "FUN_08002f4c": "clear_bit_and_set_flag_08002f4c",
                "param_1": "input_array",
                "*param_1": "*input_array",
                "uint": "uint32_t",
                "*(uint *)(*param_1 + 0xc)": "*flag_ptr",
                "*(undefined *)((int)param_1 + 0x39)": "*flag_char_ptr",
                "validate_input_if_valid_parameter_index_found_08003f48": "validate_input"
            },
            "code": "int clear_bit_and_set_flag_08002f4c(int *input_array)\n{\n    int *data_ptr = input_array;\n    uint32_t *flag_ptr = (uint32_t *)(*data_ptr + 0xc);\n    *flag_ptr = *flag_ptr & 0xffffffbf;\n    char *flag_char_ptr = (char *)(data_ptr + 0x39);\n    *flag_char_ptr = 0x20;\n    validate_input_if_valid_parameter_index_found_08003f48();\n    return 0;\n}",
            "called": [
                "FUN_08003f48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f4c",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "clear_bit_and_set_flag_08002f4c"
        },
        "FUN_080035bc": {
            "renaming": {
                "FUN_080035bc": "set_flag_on_startup_080035bc",
                "puVar1": "flag_ptr"
            },
            "code": "void set_flag_on_startup_080035bc(void)\n{\n  uint *flag_ptr;\n  flag_ptr = DAT_080035f0;\n  *flag_ptr |= 1;\n  flag_ptr[2] = 0;\n  *flag_ptr &= 0xfef6ffff;\n  flag_ptr[1] = DAT_080035f4;\n  *flag_ptr &= 0xfffbffff;\n  flag_ptr[3] = 0;\n  *(undefined4 *)(DAT_080035f8 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035bc",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "set_flag_on_startup_080035bc"
        },
        "FUN_080025ec": {
            "renaming": {
                "FUN_080025ec": "get_value_shifted_by_pointer_080025ec",
                "uVar1": "value",
                "get_value_from_pointer_080025e0": "get_value_from_pointer",
                "PTR_DAT_08002608": "pointer_array",
                "DAT_08002604": "pointer_data"
            },
            "code": "uint get_value_shifted_by_pointer_080025ec(void)\n{\n  uint value = get_value_from_pointer();\n  uint shift_value = *(int *)(DAT_08002604 + 8) << 0x13;\n  uint index = shift_value >> 0x1d;\n  uint shifted_value = value >> PTR_DAT_08002608[index];\n  return shifted_value;\n}",
            "called": [
                "FUN_080025e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ec",
            "calling": [
                "FUN_080029c8"
            ],
            "imported": false,
            "current_name": "get_value_shifted_by_pointer_080025ec"
        },
        "FUN_08000c4c": {
            "renaming": {
                "FUN_08000c4c": "send_interrupt_and_process_data_08000c4c_08000c4c",
                "PTR_DAT_08000c60": "data_pointer_08000c60"
            },
            "code": "void send_interrupt_and_process_data_08000c4c_08000c4c(void)\n{\n  send_interrupt_signal_if_not_sent_080005e4(0);\n  process_data_and_call_function_08000600(PTR_DAT_08000c60,0x4b00);\n  return;\n}",
            "called": [
                "FUN_08000600",
                "FUN_080005e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c4c",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "send_interrupt_and_process_data_08000c4c_08000c4c"
        },
        "FUN_08004a60": {
            "renaming": {
                "FUN_08004a60": "process_input_08004a60",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "input",
                "param_4": "length",
                "puVar2": "end",
                "iVar1": "result",
                "iVar3": "temp"
            },
            "code": "int process_input_08004a60(int arg1, int arg2, char *input, int length) {\n  int result = 0;\n  char *end = input + length;\n  while (input != end) {\n    result = process_input_08004a60_helper(arg1, *input, arg2, length, result);\n    length = result + 1;\n    input++;\n  }\n  return result;\n}",
            "called": [
                "FUN_08004a34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a60",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "process_input_08004a60"
        },
        "FUN_080050d0": {
            "renaming": {
                "FUN_080050d0": "handle_data_080050d0",
                "*param_1": "*result",
                "*param_2": "*data",
                "uVar1": "status",
                "uVar2": "flags",
                "iVar3": "ptr"
            },
            "code": "uint handle_data_080050d0(undefined4 *result, undefined4 *data)\n{\n  uint status;\n  ushort flags;\n  int ptr;\n  ptr = *(int *)PTR_PTR_DAT_0800519c;\n  if ((ptr != 0) && (*(int *)(ptr + 0x18) == 0)) {\n    initialize_arrays_080053a0(ptr);\n  }\n  if (data == (undefined4 *)PTR_DAT_080051a0) {\n    data = *(undefined4 **)(ptr + 4);\n  }\n  else if (data == (undefined4 *)PTR_DAT_080051a4) {\n    data = *(undefined4 **)(ptr + 8);\n  }\n  else if (data == (undefined4 *)PTR_DAT_080051a8) {\n    data = *(undefined4 **)(ptr + 0xc);\n  }\n  flags = *(ushort *)(data + 3);\n  status = (uint)flags;\n  if (-1 < (int)(status << 0x1c)) {\n    if (-1 < (int)(status << 0x1b)) {\n      *result = 9;\n      goto LAB_08005100;\n    }\n    if ((undefined4 *)data[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)data[0xd] != data + 0x11) {\n        add_to_linked_list_080048dc(result);\n      }\n      data[0xd] = 0;\n    }\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xffdb;\n    data[1] = 0;\n    *data = data[4];\n  }\n  *(ushort *)(data + 3) = *(ushort *)(data + 3) | 8;\n  if ((data[4] == 0) && ((*(ushort *)(data + 3) & 0x280) != 0x200)) {\n    allocate_and_set_memory_block_080054fc(result, data);\n  }\n  flags = *(ushort *)(data + 3);\n  status = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      status = data[5];\n    }\n    data[2] = status;\n  }\n  else {\n    data[2] = 0;\n    data[6] = -data[5];\n  }\n  if (data[4] == 0) {\n    flags = *(ushort *)(data + 3);\n    status = (int)(short)flags & 0x80;\n    if (status != 0) {\nLAB_08005100:\n      *(ushort *)(data + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    status = 0;\n  }\n  return status;\n}",
            "called": [
                "FUN_080054fc",
                "FUN_080053a0",
                "FUN_080048dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080050d0",
            "calling": [
                "FUN_08004a84",
                "FUN_08004a34"
            ],
            "imported": false,
            "current_name": "handle_data_080050d0",
            "code_backup": "\nuint FUN_080050d0(undefined4 *param_1,undefined4 *param_2)\n\n{\n  uint uVar1;\n  ushort uVar2;\n  int iVar3;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_0800519c;\n  if ((iVar3 != 0) && (*(int *)(iVar3 + 0x18) == 0)) {\n    FUNC_080053a0(iVar3);\n  }\n  if (param_2 == (undefined4 *)PTR_DAT_080051a0) {\n    param_2 = *(undefined4 **)(iVar3 + 4);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_080051a4) {\n    param_2 = *(undefined4 **)(iVar3 + 8);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_080051a8) {\n    param_2 = *(undefined4 **)(iVar3 + 0xc);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = (uint)uVar2;\n  if (-1 < (int)(uVar1 << 0x1c)) {\n    if (-1 < (int)(uVar1 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(uVar1 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          add_to_linked_list_080048dc(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_and_set_memory_block_080054fc(param_1,param_2);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = uVar2 & 1;\n  if ((uVar2 & 1) == 0) {\n    if (-1 < (int)((uint)uVar2 << 0x1e)) {\n      uVar1 = param_2[5];\n    }\n    param_2[2] = uVar1;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar2 = *(ushort *)(param_2 + 3);\n    uVar1 = (int)(short)uVar2 & 0x80;\n    if (uVar1 != 0) {\nLAB_08005100:\n      *(ushort *)(param_2 + 3) = uVar2 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n"
        },
        "FUN_08004978": {
            "renaming": {
                "FUN_08004978": "allocate_memory_block_08004978",
                "param_1": "result",
                "param_2": "size",
                "puVar1": "ptr",
                "uVar2": "offset_and_value",
                "puVar3": "prev_ptr",
                "iVar4": "size_difference",
                "uVar5": "difference",
                "puVar6": "prev_ptr",
                "puVar7": "current_ptr",
                "uVar8": "aligned_size"
            },
            "code": "uint allocate_memory_block_08004978(undefined4 *result, uint size)\n{\n  uint aligned_size = (size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < size)) {\n    *result = 0xc;\n  }\n  else {\n    do_nothing_0800557c();\n    uint *prev_ptr = *(uint **)PTR_DAT_08004a2c;\n    uint *current_ptr = prev_ptr;\n    while (current_ptr != (uint *)0x0) {\n      uint difference = *current_ptr - aligned_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          uint next_ptr_value = (current_ptr == prev_ptr) ? prev_ptr[1] : current_ptr[1];\n          if (current_ptr == prev_ptr) {\n            *(uint *)PTR_DAT_08004a2c = next_ptr_value;\n            current_ptr = prev_ptr;\n          }\n          else {\n            prev_ptr[1] = next_ptr_value;\n          }\n        }\n        else {\n          *current_ptr = difference;\n          *(uint *)((int)current_ptr + difference) = aligned_size;\n          current_ptr = (uint *)((int)current_ptr + difference);\n        }\n        do_nothing_0800557e(result);\n        uint aligned_block_size = (int)current_ptr + 0xbU & 0xfffffff8;\n        int size_difference = aligned_block_size - (int)(current_ptr + 1);\n        if (size_difference != 0) {\n          *(int *)((int)current_ptr + size_difference) = -size_difference;\n          return aligned_block_size;\n        }\n        return aligned_block_size;\n      }\n      prev_ptr = current_ptr;\n      current_ptr = (uint *)current_ptr[1];\n    }\n    if (*(int *)PTR_DAT_08004a30 == 0) {\n      uint offset_and_value = calculate_offset_and_set_value_0800500c(result);\n      *(undefined4 *)PTR_DAT_08004a30 = offset_and_value;\n    }\n    uint *allocated_ptr = (uint *)calculate_offset_and_set_value_0800500c(result,aligned_size);\n    if ((allocated_ptr != (uint *)0xffffffff) && ((current_ptr = (uint *)((int)allocated_ptr + 3U & 0xfffffffc), allocated_ptr == current_ptr || (size_difference = calculate_offset_and_set_value_0800500c(result,(int)current_ptr - (int)allocated_ptr), size_difference != -1)))) {\n      *current_ptr = aligned_size;\n      do_nothing_0800557e(result);\n      uint aligned_block_size = (int)current_ptr + 0xbU & 0xfffffff8;\n      size_difference = aligned_block_size - (int)(current_ptr + 1);\n      if (size_difference != 0) {\n        *(int *)((int)current_ptr + size_difference) = -size_difference;\n        return aligned_block_size;\n      }\n      return aligned_block_size;\n    }\n    *result = 0xc;\n    do_nothing_0800557e(result);\n  }\n  return 0;\n}",
            "called": [
                "FUN_0800500c",
                "FUN_0800557c",
                "FUN_0800557e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004978",
            "calling": [
                "FUN_08005374",
                "FUN_080054fc"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08004978"
        },
        "FUN_08002d0c": {
            "renaming": {
                "FUN_08002d0c": "check_param_range_08002d0c",
                "param_1": "param_array",
                "param_2": "param_value_1",
                "param_3": "should_be_equal",
                "param_4": "param_value_2",
                "param_5": "param_value_3",
                "iVar1": "value_from_pointer",
                "**param_1": "array_value"
            },
            "code": "int check_param_range_08002d0c(uint **param_array, uint param_value_1, bool should_be_equal, int param_value_2, uint param_value_3)\n{\n  int value_from_pointer;\n  while (true) {\n    uint array_value = **param_array;\n    if (((param_value_1 & ~array_value) == 0) == should_be_equal) {\n      return 0;\n    }\n    if ((param_value_3 != 0) && ((value_from_pointer = get_value_from_pointer_08000e30()) - param_value_2 <= param_value_3)) {\n      break;\n    }\n    if (param_value_3 == 0xffffffff) {\n      break;\n    }\n  }\n  (*param_array)[3] &= 0xfffffe5f;\n  (*param_array)[5] &= 0xfffffffe;\n  *((uint8_t *)param_array + 0x39) = 0x20;\n  *((uint8_t *)param_array + 0x3a) = 0x20;\n  *((uint8_t *)param_array + 0xe) = 0;\n  return 3;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d0c",
            "calling": [
                "FUN_08002dd0"
            ],
            "imported": false,
            "current_name": "check_param_range_08002d0c"
        },
        "FUN_08001902": {
            "renaming": {
                "FUN_08001902": "do_nothing_08001902"
            },
            "code": "\nvoid do_nothing_08001902(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001902",
            "calling": [
                "FUN_080019a0",
                "FUN_08001904"
            ],
            "imported": false,
            "current_name": "do_nothing_08001902"
        },
        "FUN_08001904": {
            "renaming": {
                "FUN_08001904": "process_input_08001904",
                "param_1": "input_ptr",
                "puVar1": "char_ptr",
                "PTR_DAT_08001914": "count_ptr",
                "PTR_DAT_0800191c": "short_ptr",
                "PTR_DAT_08001924": "char_flag_ptr",
                "PTR_DAT_08001928": "at_flag_ptr",
                "PTR_DAT_0800192c": "NULL",
                "PTR_DAT_08001930": "do_nothing_08001902",
                "PTR_DAT_08001934": "do_nothing_080015b8"
            },
            "code": "uint32_t process_input_08001904(uint32_t **input_ptr){\n  uint32_t *input = *input_ptr;\n  uint32_t *PTR_DAT_08001914 = input + 1;\n  uint32_t *char_ptr = input + 4;\n  uint16_t *PTR_DAT_0800191c = (uint16_t *)(input + 10);\n  char *PTR_DAT_08001924 = (char *)(input + 15);\n  char *PTR_DAT_08001928 = (char *)(input + 16);\n\n  if (*PTR_DAT_08001924 == '\"') {\n    if (*PTR_DAT_0800191c < 4) {\n      if (*PTR_DAT_0800191c < 2) {\n        *input &= 0xfffffbff;\n        *(PTR_DAT_08001914) &= 0xfffff8ff;\n        *(char *)((*input_ptr) + 9) = (char)(*char_ptr);\n        (*PTR_DAT_0800191c)--;\n        *PTR_DAT_08001924 = 0x20;\n        *(input_ptr + 12) = PTR_DAT_0800192c;\n        if (*PTR_DAT_08001928 == '@') {\n          *PTR_DAT_08001928 = 0;\n          PTR_DAT_08001930();\n        }\n        else {\n          *PTR_DAT_08001928 = 0;\n          PTR_DAT_08001934();\n        }\n      }\n    }\n    else {\n      *(char *)((*input_ptr) + 9) = (char)(*char_ptr);\n      (*PTR_DAT_0800191c)--;\n      if (*PTR_DAT_0800191c == 3) {\n        *(PTR_DAT_08001914) &= 0xfffffbff;\n      }\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08001902",
                "FUN_080015b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001904",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_08001904"
        },
        "FUN_08000c64": {
            "renaming": {
                "FUN_08000c64": "process_data_08000c64",
                "in_r3": "argument_1",
                "PTR_DAT_08000c78": "data_pointer_1",
                "PTR_DAT_08000c74": "data_pointer_2",
                "0x10": "data_length",
                "decode_and_process_data_08000b54": "decode_and_process_data"
            },
            "code": "void process_data_08000c64(void)\n{\n  undefined4 argument_1;\n  undefined4 argument_2;\n  undefined4 argument_3 = 0x10;\n  decode_and_process_data_08000c64(PTR_DAT_08000c78, PTR_DAT_08000c74, argument_3, argument_1, argument_2);\n  return;\n}",
            "called": [
                "FUN_08000b54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c64",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "process_data_08000c64"
        },
        "FUN_08002ffc": {
            "renaming": {
                "FUN_08002ffc": "process_data_08002ffc",
                "param_1": "input_data",
                "iVar1": "value",
                "uVar2": "status",
                "puVar3": "data",
                "uVar4": "bit_check",
                "uVar5": "flags"
            },
            "code": "void process_data_08002ffc(uint **input_data)\n{\n    uint *data = *input_data;\n    uint flags = *data;\n    uint status = data[3];\n    uint bit_check = data[5] & 1;\n\n    if ((flags & 0xf) == 0 && (flags & 0x20) && (status & 0x20)) {\n        parse_input(input_data);\n        return;\n    }\n\n    if ((flags & 0xf) == 0 || (bit_check == 0 && (status & 0x120) == 0)) {\n        if ((flags & 0x80) && (status & 0x80)) {\n            process_data_08002ffc(input_data);\n            return;\n        }\n        if ((flags & 0x40) && (status & 0x40)) {\n            clear_bit_and_set_flag(input_data);\n        }\n    }\n    else {\n        if ((flags & 1) && (status & 0x100)) {\n            input_data[0xf] = (uint *)((uint)input_data[0xf] | 1);\n        }\n        if ((flags & 4) && bit_check) {\n            input_data[0xf] = (uint *)((uint)input_data[0xf] | 2);\n        }\n        if ((flags & 2) && bit_check) {\n            input_data[0xf] = (uint *)((uint)input_data[0xf] | 4);\n        }\n        if ((flags & 8) && bit_check) {\n            input_data[0xf] = (uint *)((uint)input_data[0xf] | 8);\n        }\n        if (input_data[0xf] != (uint *)0x0) {\n            if ((flags & 0x20) && (status & 0x20)) {\n                parse_input(input_data);\n            }\n            if (((uint)input_data[0xf] & 8) == 0 && ((**input_data)[5] & 0x40) == 0) {\n                do_nothing(input_data);\n                input_data[0xf] = (uint *)0x0;\n                return;\n            }\n            update_values(input_data);\n            data = *input_data;\n            if ((data[5] & 0x40) == 0) {\n                do_nothing(input_data);\n                return;\n            }\n            data[5] &= 0xffffffbf;\n            if (input_data[0xd] == (uint *)0x0) {\n                do_nothing(input_data);\n                return;\n            }\n            input_data[0xd][0x14] = (uint)PTR_LAB_0800311c_1_08003118;\n            int value = check_value(input_data[0xd]);\n            if (value != 0) {\n                (*(code *)input_data[0xd][0x14])();\n                return;\n            }\n        }\n    }\n}",
            "called": [
                "FUN_08002f66",
                "FUN_0800295c",
                "FUN_08003f94",
                "FUN_08002940",
                "FUN_08002f4c",
                "FUN_08000f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ffc",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08002ffc"
        },
        "FUN_0800387c": {
            "renaming": {
                "FUN_0800387c": "subtract_four_from_number_0800387c",
                "param_1": "number",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int subtract_four_from_number_0800387c(int number) {\n    int result = number - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800387c",
            "calling": [
                "FUN_08003900",
                "FUN_080038d0",
                "FUN_08003880"
            ],
            "imported": false,
            "current_name": "subtract_four_from_number_0800387c"
        },
        "FUN_0800351e": {
            "renaming": {
                "FUN_0800351e": "get_short_value_0800351e",
                "param_1": "value",
                "uVar1": "short_value",
                "find_short_08003506": "find_short"
            },
            "code": "int get_short_value_0800351e(int value) {\n    int short_value;\n    if (value != 0) {\n        short_value = find_short();\n        return short_value;\n    }\n    return -1;\n}",
            "called": [
                "FUN_08003506"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800351e",
            "calling": [
                "FUN_0800447c",
                "FUN_08003cc8"
            ],
            "imported": false,
            "current_name": "get_short_value_0800351e"
        },
        "FUN_080059f8": {
            "renaming": {
                "FUN_080059f8": "do_nothing_080059f8"
            },
            "code": "\nvoid do_nothing_080059f8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059f8",
            "calling": [
                "FUN_080001ac",
                "FUN_08004884"
            ],
            "imported": false,
            "current_name": "do_nothing_080059f8"
        },
        "FUN_08002f66": {
            "renaming": {
                "FUN_08002f66": "parse_input_08002f66",
                "param_1": "input_array",
                "pbVar1": "output_byte_ptr",
                "sVar2": "remaining_inputs",
                "puVar3": "output_char_ptr",
                "input_type": "input_type",
                "input_value": "input_value",
                "output_ptr": "output_ptr",
                "remaining_inputs": "remaining_inputs",
                "input_string": "input_string"
            },
            "code": "int parse_input_08002f66(int *input_array) {\n  char *input_string = (char *)(input_array + 0x3a);\n  if (*input_string != '\"') {\n    return 2;\n  }\n  int input_type = input_array[2];\n  int input_value = *(int *)(*input_array + 4);\n  int *output_ptr = (int *)input_array[10];\n  if (input_type == 0x1000) {\n    if (input_array[4] == 0) {\n      *(unsigned short *)output_ptr = (unsigned short)((input_value << 0x17) >> 0x17);\n      output_ptr += 2;\n    }\n    else {\n      *(unsigned short *)output_ptr = (unsigned short)input_value & 0xff;\n      output_ptr++;\n    }\n  }\n  else if (input_array[4] == 0) {\n    *(char *)output_ptr = (char)input_value;\n    output_ptr++;\n  }\n  else {\n    *(char *)output_ptr = (char)input_value & 0x7f;\n    output_ptr++;\n  }\n  short remaining_inputs = *(short *)(input_array + 0x2e) - 1;\n  *(short *)(input_array + 0x2e) = remaining_inputs;\n  if (remaining_inputs != 0) {\n    return 0;\n  }\n  *(unsigned int *)(*input_array + 0xc) &= 0xfffffedf;\n  *(unsigned int *)(*input_array + 0x14) &= 0xfffffffe;\n  *input_string = ' ';\n  execute_parameter_function_if_index_less_than_10_08003f24();\n  return 0;\n}",
            "called": [
                "FUN_08003f24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f66",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "parse_input_08002f66"
        },
        "FUN_080034b6": {
            "renaming": {
                "FUN_080034b6": "update_data_if_param_not_zero_080034b6",
                "param_1": "data_ptr",
                "param_2": "data_val",
                "param_3": "param",
                "param_4": "param_ptr",
                "update_data_08001198": "update_data"
            },
            "code": "void update_data_if_param_not_zero_080034b6(undefined4 data_ptr, undefined2 data_val, int param, undefined4 param_ptr) {\n  if (param == 0) {\n    update_data_08001198(data_ptr, data_val, 0, param_ptr, param_ptr);\n    return;\n  }\n  update_data_08001198(data_ptr, data_val, 1, param_ptr, param_ptr);\n  return;\n}",
            "called": [
                "FUN_08001198"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034b6",
            "calling": [
                "FUN_080041bc"
            ],
            "imported": false,
            "current_name": "update_data_if_param_not_zero_080034b6"
        },
        "FUN_08003eac": {
            "renaming": {
                "FUN_08003eac": "update_data_08003eac",
                "param_1": "data_index",
                "param_2": "new_data",
                "bVar1": "index",
                "PTR_DAT_08003ef4": "data_array",
                "PTR_DAT_08003ef8": "data_index_array",
                "PTR_DAT_08003efc": "validation_array"
            },
            "code": "void update_data_08003eac(int data_index, int new_data) {\n  if (data_index != 0) {\n    byte index = *(byte *)(data_index + 0x44);\n    *(undefined4 *)(PTR_DAT_08003ef4 + (uint)index * 4) = new_data;\n    *(int *)(PTR_DAT_08003ef8 + (uint)index * 4) = data_index;\n    update_bits((int)*(char *)(data_index + 0x5c), 0, 2);\n    set_bit_at_index((int)*(char *)(data_index + 0x5c));\n    validate_data(*(undefined4 *)(PTR_DAT_08003efc + (uint)*(byte *)(data_index + 0x44) * 4), *(int *)(data_index + 0x68) + (uint)*(ushort *)(data_index + 0x6e), 1);\n  }\n}",
            "called": [
                "FUN_08000e60",
                "FUN_08002eb2",
                "FUN_08000ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eac",
            "calling": [
                "FUN_080042e8"
            ],
            "imported": false,
            "current_name": "update_data_08003eac"
        },
        "FUN_08003e18": {
            "renaming": {
                "FUN_08003e18": "validate_combination_08003e18",
                "param_1": "combination_index",
                "param_2": "output",
                "param_3": "output_size",
                "param_4": "valid_combinations",
                "iVar1": "is_valid"
            },
            "code": "int validate_combination_08003e18(int combination_index, char* output, int output_size, int* valid_combinations) {\n  if (combination_index == 0) {\n    return -1;\n  }\n  int is_valid = is_combination_valid();\n  if (is_valid) {\n    *output = *(char *)(combination_index + 0x45);\n    validate_input(valid_combinations[(uint)*(byte *)(combination_index + 0x44)], combination_index + 0x45, 1, valid_combinations, output_size);\n    return 0;\n  }\n  return -1;\n}",
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e18",
            "calling": [
                "FUN_080042ac"
            ],
            "imported": false,
            "current_name": "validate_combination_08003e18"
        },
        "FUN_080040fc": {
            "renaming": {
                "FUN_080040fc": "initialize_pointer_080040fc",
                "PTR_DAT_08004108": "ptr_data"
            },
            "code": "void initialize_pointer_080040fc(){\n    int* PTR_DAT_08004108 = (int *)PTR_DAT_08004108;\n    *PTR_DAT_08004108 = 22;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040fc",
            "calling": [
                "FUN_080055d0"
            ],
            "imported": false,
            "current_name": "initialize_pointer_080040fc"
        },
        "FUN_08002dd0": {
            "renaming": {
                "FUN_08002dd0": "process_input_08002dd0",
                "param_1": "input_ptr",
                "param_2": "data_ptr",
                "param_3": "data_length",
                "param_4": "value",
                "uVar1": "value_from_pointer",
                "iVar2": "result"
            },
            "code": "int process_input_08002dd0(int *input_ptr, ushort *data_ptr, int data_length, undefined4 value)\n{\n  undefined4 uVar1;\n  int result;\n  \n  if (*(char *)((int)input_ptr + 0x39) == ' ') {\n    if (data_ptr == (ushort *)0x0) {\n      result = 1;\n    }\n    else if (data_length == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_ptr + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_ptr + 0xe) = 1;\n      input_ptr[0xf] = 0;\n      *(undefined *)((int)input_ptr + 0x39) = 0x21;\n      uVar1 = get_value_from_pointer_08000e30();\n      *(short *)(input_ptr + 9) = (short)data_length;\n      *(short *)((int)input_ptr + 0x26) = (short)data_length;\n      while (*(short *)((int)input_ptr + 0x26) != 0) {\n        *(short *)((int)input_ptr + 0x26) = *(short *)((int)input_ptr + 0x26) + -1;\n        if (input_ptr[2] == 0x1000) {\n          result = check_param_range(input_ptr,0x80,0,uVar1,value);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*input_ptr + 4) = *data_ptr & 0x1ff;\n          if (input_ptr[4] == 0) {\n            data_ptr = data_ptr + 1;\n          }\n          else {\n            data_ptr = (ushort *)((int)data_ptr + 1);\n          }\n        }\n        else {\n          result = check_param_range(input_ptr,0x80,0,uVar1,value);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*input_ptr + 4) = (uint)*(byte *)data_ptr;\n          data_ptr = (ushort *)((int)data_ptr + 1);\n        }\n      }\n      result = check_param_range(input_ptr,0x40,0,uVar1,value);\n      if (result == 0) {\n        *(undefined *)((int)input_ptr + 0x39) = 0x20;\n        *(undefined *)(input_ptr + 0xe) = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [
                "FUN_08000e30",
                "FUN_08002d0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dd0",
            "calling": [
                "FUN_08003d18"
            ],
            "imported": false,
            "current_name": "process_input_08002dd0"
        },
        "FUN_08004860": {
            "renaming": {
                "FUN_08004860": "process_data_and_call_function_08004860",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "uStack_8": "param3",
                "uStack_4": "param4",
                "PTR_PTR_DAT_08004880": "PTR_PTR_DATA",
                "FUNC_08004a84": "function_call"
            },
            "code": "void process_data_and_call_function_08004860(undefined4 data1, undefined4 data2, undefined4 data3, undefined4 data4)\n{\n  undefined4 param3 = data3;\n  undefined4 param4 = data4;\n  function_call(*(undefined4 *)PTR_PTR_DAT_08004880, data1, data2, &param3, data1, &param3);\n  return;\n}",
            "called": [
                "FUN_08004a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004860",
            "calling": [
                "FUN_08004808"
            ],
            "imported": false,
            "current_name": "process_data_and_call_function_08004860"
        },
        "FUN_08004622": {
            "renaming": {
                "FUN_08004622": "convert_or_execute_08004622",
                "param_1": "function_ptr",
                "param_2": "data",
                "param_3": "data_size",
                "param_4": "extra_data",
                "convert_to_base_080045c8": "convert_to_base"
            },
            "code": "void convert_or_execute_08004622(void* function_ptr, uint32_t* data, uint32_t data_size, uint32_t extra_data) {\n  if (data_size != 0) {\n    convert_to_base(data, data_size & 0xff, function_ptr);\n    return;\n  }\n  (**(void (**)(void*, uint32_t, uint32_t, void*, uint32_t))function_ptr)(data, data_size & 0xff, 0, function_ptr, extra_data);\n  return;\n}",
            "called": [
                "FUN_080045c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004622",
            "calling": [
                "FUN_08004638"
            ],
            "imported": false,
            "current_name": "convert_or_execute_08004622"
        },
        "FUN_08003414": {
            "renaming": {
                "FUN_08003414": "update_flags_on_condition_met_08003414",
                "param_1": "param",
                "iVar1": "index",
                "uVar2": "value",
                "local_4c": "local_array",
                "get_element_if_not_negative_080034f4": "get_non_negative_element",
                "find_value_0800339c": "find_value",
                "find_value_0800354a": "find_value",
                "set_bit_and_clear_flags_08002864": "set_bit_and_clear_flags",
                "update_bits_and_check_080028f0": "update_bits_and_check",
                "update_flags_if_condition_met_0800268e": "update_flags_if_condition_met",
                "PTR_DAT_08003468": "PTR_DAT_08003468"
            },
            "code": "void update_flags_on_condition_met_08003414(int param)\n{\n  int index;\n  uint value;\n  int local_array [16];\n  local_array[0] = get_non_negative_element(param, PTR_DAT_08003468);\n  if ((local_array[0] != 0) &&\n     ((((index = find_value(param), index == 0 || (index == 4)) || (index == 8)) ||\n      ((index == 0xc || (index == 0x18)))))) {\n    value = find_value(param, PTR_DAT_08003468);\n    if ((value & 0x100000) == 0) {\n      set_bit_and_clear_flags(local_array,index);\n    }\n    else {\n      update_bits_and_check(local_array,index);\n    }\n    update_flags_if_condition_met(local_array);\n  }\n  return;\n}",
            "called": [
                "FUN_0800339c",
                "FUN_080034f4",
                "FUN_080028f0",
                "FUN_08002864",
                "FUN_0800268e",
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003414",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "update_flags_on_condition_met_08003414"
        },
        "FUN_08005718": {
            "renaming": {
                "FUN_08005718": "get_default_value_and_set_if_not_negative_08005718",
                "param_1": "output_value",
                "param_2": "input_1",
                "param_3": "input_2",
                "param_4": "input_3",
                "puVar1": "pointer_to_value",
                "iVar2": "default_value"
            },
            "code": "void get_default_value_and_set_if_not_negative_08005718(int *output_value, undefined4 input_1, undefined4 input_2, undefined4 input_3)\n{\n  undefined *pointer_to_value = PTR_DAT_08005738;\n  *(undefined4 *)PTR_DAT_08005738 = 0;\n  int default_value = get_default_value_080040e4(input_1, input_2, input_3, input_3, input_3);\n  if ((default_value == -1) && (*(int *)pointer_to_value != 0)) {\n    *output_value = *(int *)pointer_to_value;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005718",
            "calling": [
                "FUN_08005662",
                "FUN_0800562a"
            ],
            "imported": false,
            "current_name": "get_default_value_and_set_if_not_negative_08005718"
        },
        "FUN_080011c0": {
            "renaming": {
                "FUN_080011c0": "set_flag_080011c0",
                "param_1": "flag_data",
                "*(char *)((int)param_1 + 0x3e)": "*(char *)(flag_data + 0x3e)",
                "param_1[0x14]": "flag_data[0x14]",
                "*(uint *)(*param_1 + 0x10)": "flag_ptr[4]",
                "param_1[0x11]": "flag_data[15]",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)(flag_data + 0x3d)",
                "param_1[4]": "flag_data[4]",
                "(uint)(param_1[0x11] << 0x10) >> 0x17 & 6 | 0xf0": "(flag_char << 0x10) >> 0x17 & 6 | 0xf0",
                "(uint)(param_1[0x11] << 0x10) >> 0x17 & 6 | 0xf1": "(flag_char << 0x10) >> 0x17 & 6 | 0xf1"
            },
            "code": "int set_flag_080011c0(int *flag_data)\n{\n    int flag_char = flag_data[15];\n    int *flag_ptr = (int *)flag_data[0];\n    \n    if (*(char *)(flag_data + 0x3e) == '@') {\n        if (flag_data[0x14] == 0) {\n            flag_ptr[4] = flag_char & 0xfe;\n        }\n        else {\n            flag_ptr[4] = flag_char & 0xffU | 1;\n        }\n    }\n    else if (flag_data[4] == 0x4000) {\n        if (*(char *)(flag_data + 0x3d) == '!') {\n            flag_ptr[4] = flag_char & 0xfe;\n        }\n        else {\n            flag_ptr[4] = flag_char & 0xffU | 1;\n        }\n    }\n    else if (flag_data[0x14] == 0) {\n        flag_ptr[4] = (flag_char << 0x10) >> 0x17 & 6 | 0xf0;\n    }\n    else if (flag_data[0x14] == 1) {\n        flag_ptr[4] = (flag_char << 0x10) >> 0x17 & 6 | 0xf1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011c0",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "set_flag_080011c0"
        },
        "FUN_08000b54": {
            "renaming": {
                "FUN_08000b54": "decode_and_process_data_08000b54",
                "param_1": "data",
                "param_2": "value",
                "param_3": "flag",
                "bVar1": "result",
                "iVar2": "value_len",
                "unaff_r5": "byte_count",
                "iVar3": "return_value"
            },
            "code": "int decode_and_process_data_08000b54(int **data, int *value, int flag) {\n  byte result;\n  int value_len;\n  uint byte_count;\n  int return_value;\n  \n  data[19] = value;\n  *(char *)(data + 24) = (char)flag;\n  if (*(byte *)((int)data + 5) < 4) {\n    result = (**(code **)(**data + 8))();\n    byte_count = (uint)result;\n  }\n  if (byte_count == 0 || byte_count < 8) {\n    return_value = 0;\n  }\n  else {\n    value_len = decode_and_update_data(data);\n    *(char *)(data + 2) = (char)value_len;\n    if (*(char *)((int)data + 9) == *(char *)(data + 1)) {\n      return_value = check_values(data);\n      if (return_value < 1) {\n        return_value = get_value_and_return(data);\n        data[23] = (int *)((uint)*(ushort *)((int)data + 86) + return_value);\n        *(undefined *)(data + 2) = 0;\n        switch(*(undefined *)((int)data + 10)) {\n        case 1:\n        case 2:\n          return_value = process_data(data, value, flag);\n          break;\n        case 3:\n        case 4:\n          return_value = decode_and_update_data(data, value, flag);\n          break;\n        case 5:\n          return_value = combine_and_shift(data, value, flag);\n          break;\n        case 6:\n          return_value = get_value_and_update_crc(data, value, flag);\n          break;\n        case 15:\n          return_value = combine_and_update_values(data, value, flag);\n          break;\n        case 16:\n          return_value = process_data(data, value, flag);\n        }\n      }\n      else {\n        if (return_value != 255) {\n          copy_data_to_buffer(data, return_value);\n          calculate_crc_and_update_data(data);\n        }\n        *(char *)(data + 2) = (char)return_value;\n        return_value = (int)(char)return_value;\n      }\n    }\n    else {\n      return_value = 0;\n    }\n  }\n  return return_value;\n}",
            "called": [
                "FUN_08000a7a",
                "FUN_08004204",
                "FUN_080006b4",
                "FUN_080008e2",
                "FUN_08000a4e",
                "FUN_08000b04",
                "FUN_080007f0",
                "FUN_080008cc",
                "FUN_0800076c",
                "FUN_08000a00",
                "FUN_08000998"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b54",
            "calling": [
                "FUN_08000c64"
            ],
            "imported": false,
            "current_name": "decode_and_process_data_08000b54"
        },
        "FUN_08000d96": {
            "renaming": {
                "FUN_08000d96": "do_nothing_08000d96"
            },
            "code": "\nvoid do_nothing_08000d96(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d96",
            "calling": [
                "FUN_08000de4"
            ],
            "imported": false,
            "current_name": "do_nothing_08000d96"
        },
        "FUN_0800376e": {
            "renaming": {
                "FUN_0800376e": "execute_callback_if_present_0800376e",
                "iVar1": "input_result",
                "subtract_four_from_input_08003750": "get_input_and_subtract_four",
                "PTR_08003750": "code_pointer",
                "DAT_08003794": "null_pointer"
            },
            "code": "void execute_callback_if_present_0800376e(void)\n{\n  int input_result;\n  input_result = get_input_and_subtract_four();\n  if (*(code **)(input_result + 0x44) != (code *)0x0) {\n    (**(code **)(input_result + 0x44))();\n  }\n  return;\n}",
            "called": [
                "FUN_08003750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376e",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "execute_callback_if_present_0800376e"
        },
        "FUN_08000d98": {
            "renaming": {
                "FUN_08000d98": "check_and_set_param_08000d98",
                "param_1": "input_param",
                "iVar1": "is_valid",
                "PTR_DAT_08000ddc": "ptr_data_1",
                "PTR_DAT_08000dd8": "ptr_data_2",
                "check_param_range_08000ee0": "check_param_range",
                "update_bits_08000e60": "set_bits",
                "*(uint *)PTR_DAT_08000de0": "*ptr_data_2"
            },
            "code": "int check_and_set_param_08000d98(uint input_param)\n{\n    int is_valid = check_param_range(get_divided_value());\n    if (is_valid)\n    {\n        return 1;\n    }\n    if (input_param > 15)\n    {\n        return 1;\n    }\n    set_bits(0xffffffff, input_param, 0);\n    *(uint *)PTR_DAT_08000de0 = input_param;\n    return 0;\n}",
            "called": [
                "FUN_08000e60",
                "FUN_08000ee0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d98",
            "calling": [
                "FUN_08000de4",
                "FUN_08002488"
            ],
            "imported": false,
            "current_name": "check_and_set_param_08000d98"
        },
        "FUN_08003f48": {
            "renaming": {
                "FUN_08003f48": "validate_input_if_valid_parameter_index_found_08003f48",
                "uVar1": "parameter_index",
                "iVar2": "function_pointer",
                "iVar3": "parameter_pointer",
                "PTR_DAT_08003f88": "parameter_pointer_array",
                "PTR_DAT_08003f8c": "function_pointer_array",
                "PTR_DAT_08003f90": "input_validation_pointer_array"
            },
            "code": "void validate_input_if_valid_parameter_index_found_08003f48() {\n  uint parameter_index = find_parameter_index();\n  int parameter_pointer = *(int *)(PTR_DAT_08003f88 + parameter_index * 4);\n  if ((parameter_index < 10) && (function_pointer = (**(code **)(PTR_DAT_08003f8c + parameter_index * 4))(parameter_pointer), function_pointer != -1)) {\n    validate_input_08002eb2(\n      *(undefined4 *)(PTR_DAT_08003f90 + (uint)*(byte *)(parameter_pointer + 0x44) * 4),\n      *(int *)(parameter_pointer + 0x68) + (uint)*(ushort *)(parameter_pointer + 0x6e),1);\n  }\n  return;\n}",
            "called": [
                "FUN_08002eb2",
                "FUN_08003f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f48",
            "calling": [
                "FUN_08002f4c"
            ],
            "imported": false,
            "current_name": "validate_input_if_valid_parameter_index_found_08003f48"
        },
        "FUN_0800340c": {
            "renaming": {
                "FUN_0800340c": "update_flags_0800340c",
                "update_register_flags_080035fc": "update_register_flags"
            },
            "code": "void update_flags_0800340c(void)\n{\n  update_register_flags();\n  return;\n}",
            "called": [
                "FUN_080035fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800340c",
            "calling": [
                "FUN_0800268e"
            ],
            "imported": false,
            "current_name": "update_flags_0800340c"
        },
        "FUN_0800352e": {
            "renaming": {
                "FUN_0800352e": "find_value_in_array_0800352e",
                "param_1": "value_to_find",
                "param_2": "array",
                "*param_2": "*array"
            },
            "code": "int find_value_in_array_0800352e(int value_to_find, short* array) {\n  while (true) {\n    if (*array == -1) {\n      return -1;\n    }\n    if (*array == value_to_find) {\n      break;\n    }\n    array += 6;\n  }\n  return *(int*)(array + 4);\n}",
            "called": [
                "FUN_0800352e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800352e",
            "calling": [
                "FUN_0800352e",
                "FUN_0800354a"
            ],
            "imported": false,
            "current_name": "find_value_in_array_0800352e"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "check_and_execute_08001ab0",
                "param_1": "input",
                "iVar1": "value",
                "puVar2": "ptr1",
                "puVar3": "ptr2",
                "do_nothing_08001aac": "do_nothing",
                "check_and_set_flag_for_number_08003900": "check_and_set_flag_for_number",
                "check_value_08000f8c": "check_value",
                "PTR_LAB_08001f3c_1_08001bf4": "PTR_LAB",
                "DAT_08001bf8": "DAT"
            },
            "code": "void check_and_execute_08001ab0(uint **input) {\n  int value;\n  uint *ptr1;\n  uint *ptr2;\n  char flag = (*(char *)((int)input + 0x3d));\n  if (flag - 0x29 < 2) {\n    input[0xc] = NULL;\n    *(undefined *)((int)input + 0x3d) = 0x28;\n  }\n  else {\n    if ((flag != '`') && (((*input)[1] & 0x800) == 0)) {\n      *(undefined *)((int)input + 0x3d) = 0x20;\n    }\n    input[0xc] = NULL;\n    *(undefined *)((int)input + 0x3e) = 0;\n  }\n  **input = **input & 0xfffff7ff;\n  ptr2 = *input;\n  if ((ptr2[1] & 0x800) == 0) {\n    if (flag == '`') {\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      input[0x10] = NULL;\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = input[9];\n        input[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      **input = **input & 0xfffffffe;\n      do_nothing(input);\n    }\n    else {\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = input[9];\n        input[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      check_and_set_flag_for_number(input);\n    }\n  }\n  else {\n    ptr2[1] = ptr2[1] & 0xfffff7ff;\n    if (*(char *)((int)input[0xd] + 0x35) == '\\x01') {\n      input[0xe][0x14] = (uint)PTR_LAB_08001f3c_1_08001bf4_08001f3c_1_08001bf4;\n      value = check_value(input[0xe]);\n      if (value != 0) {\n        if (((*input)[5] & 0x40) != 0) {\n          ptr2 = input[9];\n          input[9] = (uint *)((int)ptr2 + 1);\n          *(char *)ptr2 = (char)(*input)[4];\n        }\n        **input = **input & 0xfffffffe;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        (*(code *)input[0xe][0x14])();\n      }\n    }\n    else {\n      input[0xd][0x14] = (uint)PTR_LAB_08001f3c_1_08001bf4_08001f3c_1_08001bf4;\n      value = check_value(input[0xd]);\n      if (value != 0) {\n        **input = **input & 0xfffffffe;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        (*(code *)input[0xd][0x14])();\n      }\n    }\n  }\n  if ((flag == '(') && (((uint)input[0x10] & 4) != 0)) {\n    input[0xb] = DAT_08001bf8_08001bf8;\n    input[0xc] = NULL;\n    *(undefined *)((int)input + 0x3d) = 0x20;\n    *(undefined *)((int)input + 0x3e) = 0;\n    execute_function_if_conditions_met(input);\n  }\n  return;\n}",
            "called": [
                "FUN_08003900",
                "FUN_08001aac",
                "FUN_080038d0",
                "FUN_08000f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08001e68",
                "FUN_08001bfc"
            ],
            "imported": false,
            "current_name": "check_and_execute_08001ab0"
        },
        "FUN_08001f9c": {
            "renaming": {
                "FUN_08001f9c": "check_for_flag_08001f9c",
                "iVar1": "previous_value",
                "iVar2": "current_value",
                "flag_address": "*(uint *)(DAT_0800200c + 0x40)",
                "flag_status_address": "*(uint *)(DAT_08002014 + 4)",
                "flag_set_address": "*DAT_08002018"
            },
            "code": "undefined4 check_for_flag_08001f9c(void)\n{\n  int current_value;\n  int previous_value;\n  uint *flag_address = (uint *)(DAT_0800200c + 0x40);\n  uint *flag_status_address = (uint *)(DAT_08002014 + 4);\n  uint *flag_set_address = (uint *)(DAT_08002018);\n\n  *flag_address |= 0x10000000;\n  *DAT_08002010 = 1;\n\n  previous_value = get_value_from_pointer_08000e30();\n  do {\n    if ((*flag_status_address & 0x10000) != 0) {\n      *flag_set_address = 1;\n      current_value = get_value_from_pointer_08000e30();\n      do {\n        if ((*flag_status_address & 0x20000) != 0) {\n          return 0;\n        }\n        current_value = get_value_from_pointer_08000e30();\n      } while ((uint)(current_value - previous_value) < 0x3e9);\n      return 3;\n    }\n    current_value = get_value_from_pointer_08000e30();\n  } while ((uint)(current_value - previous_value) < 0x3e9);\n  return 3;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f9c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "check_for_flag_08001f9c"
        },
        "FUN_08000d8e": {
            "renaming": {
                "FUN_08000d8e": "update_flags_and_params_08000d8e",
                "set_flags_and_params_and_update_bits_080034ce": "set_flags_and_params_and_update_bits"
            },
            "code": "void update_flags_and_params_08000d8e(void)\n{\n  set_flags_and_params_and_update_bits();\n  return;\n}",
            "called": [
                "FUN_080034ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d8e",
            "calling": [
                "FUN_08004648"
            ],
            "imported": false,
            "current_name": "update_flags_and_params_08000d8e"
        },
        "FUN_08004638": {
            "renaming": {
                "FUN_08004638": "execute_conversion_08004638",
                "convert_or_execute_08004622": "convert_or_execute"
            },
            "code": "void execute_conversion_08004638() \n{\n  convert_or_execute();\n  return;\n}",
            "called": [
                "FUN_08004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004638",
            "calling": [],
            "imported": false,
            "current_name": "execute_conversion_08004638"
        },
        "FUN_080008cc": {
            "renaming": {
                "FUN_080008cc": "copy_data_to_buffer_080008cc",
                "param_1": "buffer_address",
                "param_2": "data",
                "*(undefined *)(param_1 + 4)": "source_address",
                "*(undefined *)(param_1 + 9)": "destination_address",
                "*(byte *)(param_1 + 10)": "flag_address",
                "*(undefined *)(param_1 + 0xb)": "data_address",
                "*(undefined *)(param_1 + 0x49)": "status_address"
            },
            "code": "void copy_data_to_buffer_080008cc(int buffer_address, char data) {\n    char* source_address = (char*)(buffer_address + 4);\n    char* destination_address = (char*)(buffer_address + 9);\n    *destination_address = *source_address;\n    char* flag_address = (char*)(buffer_address + 10);\n    *flag_address ^= 0x80;\n    char* data_address = (char*)(buffer_address + 0xb);\n    *data_address = data;\n    char* status_address = (char*)(buffer_address + 0x49);\n    *status_address = 3;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008cc",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_080008cc"
        },
        "FUN_08004a84": {
            "renaming": {
                "FUN_08004a84": "FUNC_08004a84"
            },
            "code": "\nint FUNC_08004a84(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    initialize_arrays_080053a0();\n  }\n  if (param_2 == PTR_DAT_08004c90) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_08004c98) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_08004c9c) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = handle_data_080050d0(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_08004ac6:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = process_input_08004a60(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08004c70;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = find_byte_in_buffer_08000230(PTR_s___0__08004c94,*pbVar5);\n    puVar1 = PTR_DAT_08004ca0;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__08004c94 & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_08004ba0;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_08004ba0:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      local_84 = *local_8c;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n      param_3 = param_3 + 2;\n      local_8c = local_8c + 1;\n    }\n    else {\n      bVar4 = false;\n      local_84 = 0;\n      iVar7 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = find_byte_in_buffer_08000230(PTR_DAT_08004ca0,*param_3,3);\n  if (iVar7 != 0) {\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n    param_3 = param_3 + 1;\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = find_byte_in_buffer_08000230(PTR_s_efgEFG_08004ca4,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_08004d9c(param_1,&local_88,param_2,DAT_08004cac,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_08004ca8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_08004c22;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08004c70;\nLAB_08004c22:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_08004ac6;\n}\n\n",
            "called": [
                "FUN_080053a0",
                "FUN_08004d9c",
                "FUN_080050d0",
                "FUN_08004a60",
                "FUN_08000230"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004a84",
            "calling": [
                "FUN_08004fdc",
                "FUN_08004860"
            ],
            "imported": false,
            "current_name": "FUNC_08004a84"
        },
        "FUN_08005608": {
            "renaming": {
                "FUN_08005608": "calculate_and_update_value_08005608",
                "param_1": "value",
                "param_2": "data",
                "iVar1": "calculated_value",
                "uVar2": "updated_value",
                "bVar3": "is_calculated_value_positive"
            },
            "code": "void calculate_and_update_value_08005608(int value, int* data) {\n  int calculated_value = get_value_from_zero(data, (int)*(short *)(data + 0xe));\n  bool is_calculated_value_positive = calculated_value >= 0;\n  uint updated_value;\n  if (is_calculated_value_positive) {\n    updated_value = *(int *)(data + 0x54) + calculated_value;\n  }\n  else {\n    updated_value = *(ushort *)(data + 0xc) & 0xffffefff;\n  }\n  if (is_calculated_value_positive) {\n    *(uint *)(data + 0x54) = updated_value;\n  }\n  if (!is_calculated_value_positive) {\n    *(short *)(data + 0xc) = (short)updated_value;\n  }\n  return;\n}",
            "called": [
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005608",
            "calling": [],
            "imported": false,
            "current_name": "calculate_and_update_value_08005608"
        },
        "FUN_08002efa": {
            "renaming": {
                "FUN_08002efa": "validate_input_08002efa",
                "param_1": "input_array",
                "param_2": "array_size",
                "param_3": "element_size",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "int validate_input_08002efa(int *input_array, int array_size, int element_size)\n{\n    if (*(char *)((int)input_array + 0x3a) != ' ') {\n        return 2;\n    }\n    if (array_size == 0) {\n        return 1;\n    }\n    if (element_size == 0) {\n        return 1;\n    }\n    if (*(char *)(input_array + 0xe) != '\\x01') {\n        input_array[10] = array_size;\n        *(short *)(input_array + 0xb) = (short)element_size;\n        *(short *)((int)input_array + 0x2e) = (short)element_size;\n        input_array[0xf] = 0;\n        *(undefined *)((int)input_array + 0x3a) = 0x22;\n        *(undefined *)(input_array + 0xe) = 0;\n        *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) | 1;\n        *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x120;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efa",
            "calling": [
                "FUN_08003e54",
                "FUN_08003e18"
            ],
            "imported": false,
            "current_name": "validate_input_08002efa"
        },
        "FUN_0800268c": {
            "renaming": {
                "FUN_0800268c": "do_nothing_0800268c"
            },
            "code": "\nvoid do_nothing_0800268c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268c",
            "calling": [
                "FUN_0800262c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800268c"
        },
        "FUN_08001aac": {
            "renaming": {
                "FUN_08001aac": "do_nothing_08001aac"
            },
            "code": "\nvoid do_nothing_08001aac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001aac",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "do_nothing_08001aac"
        },
        "FUN_0800377c": {
            "renaming": {
                "FUN_0800377c": "check_and_process_flags_0800377c",
                "PTR_DAT_08003794": "first_flag_ptr",
                "PTR_DAT_08003794 + 0x24": "second_flag_ptr",
                "process_flags_080026ce": "process_flags"
            },
            "code": "void check_and_process_flags_0800377c(void)\n{\n  int* PTR_DAT_08003794 = (int*)PTR_DAT_08003794;\n  int* PTR_DAT_08003794 + 0x24 = (int*)(PTR_DAT_08003794 + 0x24);\n  if (*PTR_DAT_08003794 != 0) {\n    process_flags_080026ce();\n  }\n  if (*PTR_DAT_08003794 + 0x24 != 0) {\n    process_flags_080026ce();\n  }\n  return;\n}",
            "called": [
                "FUN_080026ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800377c",
            "calling": [],
            "imported": false,
            "current_name": "check_and_process_flags_0800377c"
        },
        "FUN_0800268e": {
            "renaming": {
                "FUN_0800268e": "update_flags_if_condition_met_0800268e",
                "param_1": "param_array",
                "puVar1": "param_ptr",
                "DAT_08004b90": "condition_1",
                "DAT_08004b94": "condition_2"
            },
            "code": "void update_flags_if_condition_met_0800268e(uint **param_array)\n{\n  uint *param_ptr;\n  uint DAT_08004b90 = 0x1111;\n  uint DAT_08004b94 = 0x444;\n\n  *(undefined *)((int)param_array + 0x39) = 2;\n  param_ptr = *param_array;\n  \n  if ((param_ptr[8] & DAT_08004b90) == 0) {\n    if ((param_ptr[8] & DAT_08004b94) == 0) {\n      *param_ptr = *param_ptr & 0xfffffffe;\n    }\n  }\n  update_flags_0800340c(param_array);\n  *(undefined *)((int)param_array + 0x39) = 0;\n  *(undefined *)(param_array + 0xe) = 0;\n  return;\n}",
            "called": [
                "FUN_0800340c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268e",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "update_flags_if_condition_met_0800268e"
        },
        "FUN_080008e2": {
            "renaming": {
                "FUN_080008e2": "process_data_080008e2",
                "param_1": "data_ptr",
                "param_2": "crc_ptr",
                "param_3": "data_length",
                "param_4": "crc_init",
                "<unnamed variable>": "crc_poly",
                "iVar1": "data_offset",
                "uVar2": "bit_count",
                "uVar3": "i",
                "uVar4": "bit_index",
                "cVar5": "padding_bits",
                "iVar6": "byte_index"
            },
            "code": "int process_data_080008e2(int data_ptr, int crc_ptr, uint16_t data_length, uint32_t crc_init, uint32_t crc_poly) {\n  int data_offset = combine_values(*(uint8_t *)(data_ptr + 0xb), *(uint8_t *)(data_ptr + 0xc), crc_init, crc_poly, crc_poly);\n  uint32_t bit_count = combine_values(*(uint8_t *)(data_ptr + 0xd), *(uint8_t *)(data_ptr + 0xe));\n  char padding_bits = (char)((bit_count << 0x15) >> 0x18);\n  if ((bit_count & 7) != 0) {\n    padding_bits++;\n  }\n  *(char *)(data_ptr + 0xb) = padding_bits;\n  *(uint8_t *)(data_ptr + 0x49) = 3;\n  uint32_t bit_index = 0;\n  for (uint32_t i = 0; i < bit_count; i++) {\n    uint32_t byte_index = (i + data_offset) >> 3;\n    uint8_t byte = *(uint8_t *)(data_ptr + 0x49 + byte_index) & ~(1 << (bit_index & 7));\n    if ((*(uint16_t *)(data_ptr + (byte_index + data_offset) * 2) >> (bit_index & 0xf) & 1U) == 1) {\n      byte |= 1 << (bit_index & 7);\n    }\n    *(uint8_t *)(data_ptr + 0x49 + byte_index) = byte;\n    bit_index++;\n    if (bit_index == 8) {\n      *(char *)(data_ptr + 0x49)++;\n      bit_index = 0;\n    }\n  }\n  if ((bit_count & 7) != 0) {\n    *(char *)(data_ptr + 0x49)++;\n  }\n  char padding_byte = *(char *)(data_ptr + 0x49);\n  calculate_crc_and_update_data(data_ptr, crc_ptr, data_length, crc_init, crc_poly);\n  return (int)(char)(padding_byte + 2);\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008e2",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "process_data_080008e2"
        },
        "FUN_080045c8": {
            "renaming": {
                "FUN_080045c8": "convert_to_base_080045c8",
                "param_1": "ptr_num",
                "param_2": "num",
                "param_3": "base",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "ptr_buffer",
                "cVar1": "digit",
                "local_15": "buffer"
            },
            "code": "undefined4 convert_to_base_080045c8(int *ptr_num, uint num, uint base) {\n    char digit;\n    undefined4 result;\n    uint quotient, remainder;\n    char* buffer = malloc(sizeof(char) * 33);\n    char* ptr_buffer = buffer + 32;\n    *ptr_buffer = 0;\n    if (base < 2 || base > 36) {\n        base = 10;\n    }\n    do {\n        quotient = num / base;\n        remainder = num % base;\n        ptr_buffer--;\n        if (remainder < 10) {\n            digit = remainder + '0';\n        }\n        else {\n            digit = remainder - 10 + 'a';\n        }\n        *ptr_buffer = digit;\n        num = quotient;\n    } while (num != 0);\n    if (ptr_buffer == buffer + 32) {\n        result = 0;\n    }\n    else {\n        result = find_end_of_string_08000218(ptr_buffer);\n        result = (**(code **)(*ptr_num + 4))(ptr_num, ptr_buffer, result);\n    }\n    free(buffer);\n    return result;\n}",
            "called": [
                "FUN_08000218"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c8",
            "calling": [
                "FUN_08004622"
            ],
            "imported": false,
            "current_name": "convert_to_base_080045c8"
        },
        "FUN_08003d18": {
            "renaming": {
                "FUN_08003d18": "process_input_08003d18",
                "param_1": "input_value",
                "param_2": "input_param",
                "iVar2": "initial_value",
                "sVar1": "element_value",
                "iVar3": "element_result",
                "uVar4": "index"
            },
            "code": "uint process_input_08003d18(uint input_value, uint input_param) {\n  int initial_value = get_initial_value();\n  short element_value = *(short *)(PTR_DAT_08003dc0 + 0x9a);\n  int element_result = get_element_if_not_negative(element_value, PTR_DAT_08003dc4);\n  if (element_result == 0) {\n    return 0;\n  }\n  uint index = 0;\n  while ((index < 10 &&\n         ((*(int *)(PTR_DAT_08003dc8 + index * 4) == 0 ||\n          (element_result = get_element_if_not_negative(element_value, PTR_DAT_08003dc4),\n          **(int **)(PTR_DAT_08003dc8 + index * 4) != element_result))))) {\n    index = index + 1 & 0xff;\n  }\n  if (9 < index) {\n    if ((9 < (byte)PTR_DAT_08003dcc[0x44]) && (update_data_08003cc8(), 9 < (byte)PTR_DAT_08003dcc[0x44])) {\n      return 0;\n    }\n    index = (uint)(byte)PTR_DAT_08003dcc[0x44];\n  }\n  do {\n    element_result = process_input_08003d18_08002dd0(*(undefined4 *)(PTR_DAT_08003dc8 + index * 4),input_value,input_param & 0xffff,1000\n                        );\n    if (element_result == 0) {\n      return input_param;\n    }\n    element_result = get_initial_value();\n  } while ((uint)(element_result - initial_value) < 1000);\n  return 0;\n}",
            "called": [
                "FUN_08000e30",
                "FUN_080034f4",
                "FUN_08003cc8",
                "FUN_08002dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d18",
            "calling": [
                "FUN_080040ec"
            ],
            "imported": false,
            "current_name": "process_input_08003d18"
        },
        "FUN_08004640": {
            "renaming": {
                "FUN_08004640": "combine_values_08004640",
                "param_1": "value1",
                "param_2": "value2"
            },
            "code": "uint combine_values_08004640(int value1, uint value2) {\n    return value2 | (value1 << 8);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004640",
            "calling": [
                "FUN_08000a7a",
                "FUN_080008e2",
                "FUN_08000a4e",
                "FUN_08000b04",
                "FUN_080007f0",
                "FUN_08000a00",
                "FUN_08000998"
            ],
            "imported": false,
            "current_name": "combine_values_08004640"
        },
        "FUN_080034ce": {
            "renaming": {
                "FUN_080034ce": "set_flags_and_params_and_update_bits_080034ce",
                "set_flags_and_params_08000de4": "set_flags_and_params",
                "set_flags_and_update_bits_08000c8c": "set_flags_and_update_bits"
            },
            "code": "void set_flags_and_params_and_update_bits_080034ce(void)\n{\n  set_flags_and_params();\n  set_flags_and_update_bits();\n  return;\n}",
            "called": [
                "FUN_08000de4",
                "FUN_08000c8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034ce",
            "calling": [
                "FUN_08000d8e"
            ],
            "imported": false,
            "current_name": "set_flags_and_params_and_update_bits_080034ce"
        },
        "FUN_080047fe": {
            "renaming": {
                "FUN_080047fe": "convert_uint64_to_uint128_if_flag_set_080047fe",
                "param_1": "ptr_param1",
                "param_2": "ptr_param2"
            },
            "code": "void convert_uint64_to_uint128_if_flag_set_080047fe(uint32_t* ptr_param1, uint32_t* ptr_param2)\n{\n  convert_uint64_to_uint128_if_flag_set_080047fe(ptr_param2, ptr_param1);\n  return;\n}",
            "called": [
                "FUN_08004844"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047fe",
            "calling": [
                "FUN_080046b4"
            ],
            "imported": false,
            "current_name": "convert_uint64_to_uint128_if_flag_set_080047fe"
        },
        "FUN_08001256": {
            "renaming": {
                "FUN_08001256": "process_data_08001256",
                "param_1": "data",
                "puVar1": "ptr_to_data_11"
            },
            "code": "undefined4 process_data_08001256(uint **data)\n{\n  uint *ptr_to_data_11 = data[0xb];\n  if ((*(char *)((int)data + 0x3d) == '\"') && ((data[0x14] != (uint *)0x0 || (*(char *)((int)data + 0x3e) != '@')))) {\n    if ((data[0x14] == (uint *)0x0) && (data[4] == (uint *)0xc000)) {\n      **data = **data | 0x100;\n      data[0x14] = (uint *)((int)data[0x14] + 1);\n    }\n    else {\n      uint16_t value_at_2a = *(short *)((int)data + 0x2a);\n      if (value_at_2a == 0) {\n        **data = **data | 0x200;\n      }\n      else if (value_at_2a == 1) {\n        if (ptr_to_data_11 == (uint *)0xffff0000) {\n          **data = **data & 0xfffffbff;\n          ptr_to_data_11 = *data;\n          if ((ptr_to_data_11[1] & 0x800) == 0) {\n            *ptr_to_data_11 = *ptr_to_data_11 | 0x200;\n          }\n          else {\n            *ptr_to_data_11 = *ptr_to_data_11 & 0xfffffbff;\n          }\n        }\n        else if (((ptr_to_data_11 == (uint *)0x4) || (ptr_to_data_11 == (uint *)0x8)) || (data[0xc] == (uint *)0x12)) {\n          **data = **data & 0xfffffbff;\n          **data = **data | 0x200;\n        }\n        else if (data[0xb] == (uint *)0x2) {\n          **data = **data | 0x400;\n        }\n        else {\n          **data = **data & 0xfffffbff;\n        }\n      }\n      else if (value_at_2a == 2) {\n        if (data[0xb] == (uint *)0x2) {\n          **data = **data | 0x400;\n        }\n        else {\n          **data = **data & 0xfffffbff;\n          **data = **data | 0x800;\n        }\n        ptr_to_data_11 = *data;\n        if ((ptr_to_data_11[1] & 0x800) != 0) {\n          ptr_to_data_11[1] = ptr_to_data_11[1] | 0x1000;\n        }\n      }\n      else {\n        **data = **data | 0x400;\n        ptr_to_data_11 = *data;\n        if ((ptr_to_data_11[1] & 0x800) != 0) {\n          ptr_to_data_11[1] = ptr_to_data_11[1] | 0x1000;\n        }\n      }\n      data[0x14] = (uint *)0x0;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001256",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_data_08001256"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "execute_functions_08004884",
                "puVar1": "function_pointers_start",
                "puVar2": "second_function_pointers_start",
                "puVar3": "second_function_pointers_end",
                "iVar4": "function_pointers_count",
                "iVar5": "i"
            },
            "code": "void execute_functions_08004884(void)\n{\n  undefined *function_pointers_start = PTR_DAT_080048bc;\n  undefined *function_pointers_end = PTR_DAT_080048c0;\n  undefined *second_function_pointers_start = PTR_DAT_080048c4;\n  undefined *second_function_pointers_end = PTR_DAT_080048c8;\n  int function_pointers_count = (int)function_pointers_end - (int)function_pointers_start;\n  int second_function_pointers_count = (int)second_function_pointers_end - (int)second_function_pointers_start;\n  for (int i = 0; i < function_pointers_count >> 2; i++) {\n    (**(code **)(function_pointers_start + i * 4))();\n  }\n  do_nothing_080059f8();\n  for (int i = 0; i < second_function_pointers_count >> 2; i++) {\n    (**(code **)(second_function_pointers_start + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_080059f8",
                "FUN_08004648"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "execute_functions_08004884"
        },
        "FUN_08004648": {
            "renaming": {
                "FUN_08004648": "update_flags_and_params_08004648",
                "set_param_08000e3c": "set_parameter",
                "update_flags_and_params_08000d8e": "update_flags"
            },
            "code": "void update_flags_and_params_08004648(void)\n{\n  set_parameter(3);\n  update_flags();\n  return;\n}",
            "called": [
                "FUN_08000e3c",
                "FUN_08000d8e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004648",
            "calling": [
                "FUN_08004884"
            ],
            "imported": false,
            "current_name": "update_flags_and_params_08004648"
        },
        "FUN_08000600": {
            "renaming": {
                "FUN_08000600": "process_data_and_call_function_08000600",
                "param_1": "data",
                "param_2": "function_param",
                "cVar1": "data_type",
                "iVar2": "result",
                "*param_1": "*data",
                "PTR_DAT_08000668": "ptr_value"
            },
            "code": "void process_data_and_call_function_08000600(int **data, int function_param){\n  char data_type = *(char *)((int)data + 5);\n  int *PTR_DAT_08000668 = (int *)PTR_DAT_08000668;\n  if (data_type == '\\x02' || data_type == '\\x03' || data_type == '\\x01') {\n    *data = PTR_DAT_08000668;\n  }\n  else{\n    *data = PTR_DAT_08000668;\n  }\n  set_flags_and_call_function_08004388(*data,function_param,6);\n  if (*(byte *)((int)data + 6) > 1) {\n    process_data_08004110(*(byte *)((int)data + 6),1);\n    decode_and_update_data_080041bc(*(undefined *)((int)data + 6),0);\n  }\n  int result = (**(code **)(**data + 0xc))();\n  while (result >= 0) {\n    result = (**(code **)(**data + 0xc))();\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  *(undefined *)((int)data + 0x4a) = 0;\n  *(undefined2 *)(data + 0x15) = 0;\n  *(undefined2 *)((int)data + 0x52) = 0;\n  *(undefined2 *)(data + 0x14) = 0;\n}",
            "called": [
                "FUN_080041bc",
                "FUN_08004388",
                "FUN_08004110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000600",
            "calling": [
                "FUN_08000c4c"
            ],
            "imported": false,
            "current_name": "process_data_and_call_function_08000600"
        },
        "FUN_080045be": {
            "renaming": {
                "FUN_080045be": "execute_function_pointer_080045be",
                "param_1": "function_pointer"
            },
            "code": "void execute_function_pointer_080045be(void *function_pointer) {\n  (**(void (**)(void))function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045be",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_pointer_080045be"
        },
        "FUN_08004646": {
            "renaming": {
                "FUN_08004646": "do_nothing_08004646"
            },
            "code": "\nvoid do_nothing_08004646(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004646",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "do_nothing_08004646"
        },
        "FUN_08000728": {
            "renaming": {
                "FUN_08000728": "calculate_crc16_ccitt_08000728",
                "param_1": "data_start",
                "param_2": "data_length",
                "uVar2": "crc16_ccitt_initial",
                "uVar3": "lsb",
                "uVar4": "i",
                "bVar1": "j"
            },
            "code": "uint calculate_crc16_ccitt_08000728(int data_start, int data_length)\n{\n    const uint16_t crc16_ccitt_initial = 0xFFFF;\n    uint16_t crc16_ccitt = crc16_ccitt_initial;\n    for (int i = 0; i < data_length; i++) {\n        uint8_t current_byte = *(uint8_t *)(data_start + i + 9);\n        crc16_ccitt ^= current_byte;\n        for (int j = 0; j < 8; j++) {\n            if (crc16_ccitt & 0x0001) {\n                crc16_ccitt = (crc16_ccitt >> 1) ^ 0xA001;\n            } else {\n                crc16_ccitt = crc16_ccitt >> 1;\n            }\n        }\n    }\n    return (crc16_ccitt << 8) | (crc16_ccitt >> 8);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000728",
            "calling": [
                "FUN_0800076c"
            ],
            "imported": false,
            "current_name": "calculate_crc16_ccitt_08000728"
        },
        "FUN_0800354a": {
            "renaming": {
                "FUN_0800354a": "find_value_0800354a",
                "param_1": "value_to_find",
                "uVar1": "found_value",
                "find_value_in_array_0800352e": "search_array"
            },
            "code": "int find_value_0800354a(int value_to_find) {\n  if (value_to_find == -1) {\n    return -1;\n  }\n  int found_value = search_array();\n  return found_value;\n}",
            "called": [
                "FUN_0800352e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800354a",
            "calling": [
                "FUN_0800339c",
                "FUN_08003380",
                "FUN_08003414",
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "find_value_0800354a"
        },
        "FUN_0800124a": {
            "renaming": {
                "FUN_0800124a": "set_value_at_offset_0800124a",
                "param_1": "ptr_param",
                "*param_1": "*ptr_param",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int set_value_at_offset_0800124a(int *PTR_param) {\n    int offset = 0x10;\n    int value = PTR_param[0x11] & 0xff;\n    uint *ptr = (uint *)(PTR_param + offset);\n    *ptr = value;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800124a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_0800124a"
        },
        "FUN_08004094": {
            "renaming": {
                "FUN_08004094": "calculate_offset_08004094",
                "param_1": "base_address",
                "iVar1": "current_offset",
                "puVar2": "stack_pointer",
                "PTR_DAT_080040c4": "memory_location_1",
                "PTR_DAT_080040c8": "memory_location_2",
                "PTR_DAT_080040cc": "memory_location_3"
            },
            "code": "int calculate_offset_08004094(int base_address)\n{\n  int current_offset;\n  undefined *stack_pointer;\n  \n  if (*(int *)PTR_DAT_080040c4 == 0) {\n    *(undefined **)PTR_DAT_080040c4 = PTR_DAT_080040c8;\n  }\n  current_offset = *(int *)PTR_DAT_080040c4;\n  stack_pointer = (undefined *)(base_address + current_offset);\n  if (stack_pointer <= &stack0x00000000) {\n    *(undefined **)PTR_DAT_080040c4 = stack_pointer;\n    return current_offset;\n  }\n  *(undefined4 *)PTR_DAT_080040cc = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004094",
            "calling": [
                "FUN_0800500c"
            ],
            "imported": false,
            "current_name": "calculate_offset_08004094"
        },
        "FUN_080033c8": {
            "renaming": {
                "FUN_080033c8": "clear_bit_in_address_080033c8",
                "PTR_DAT_080033d4": "address",
                "DAT_080033d4": "address_offset"
            },
            "code": "void clear_bit_in_address_080033c8(void)\n{\n  uint32_t *PTR_DAT_080033d4 = (uint32_t *)(DAT_080033d4 + 0x40);\n  uint32_t mask = 0xdfffffff;\n  *PTR_DAT_080033d4 = *PTR_DAT_080033d4 & mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033c8",
            "calling": [
                "FUN_08000f56"
            ],
            "imported": false,
            "current_name": "clear_bit_in_address_080033c8"
        },
        "FUN_080031fc": {
            "renaming": {
                "FUN_080031fc": "set_flag_080031fc",
                "param_1": "flag",
                "uVar1": "return_value",
                "DAT_08003350": "flag_ptr_base",
                "DAT_08003354": "flag_0_return",
                "DAT_08003358": "flag_1_return",
                "DAT_0800335c": "flag_2_return",
                "DAT_08003360": "flag_3_return",
                "DAT_08003364": "flag_4_return",
                "DAT_08003368": "flag_5_return",
                "DAT_0800336c": "flag_6_return",
                "DAT_08003370": "flag_7_return",
                "DAT_08003374": "flag_8_return",
                "DAT_08003378": "flag_9_return",
                "DAT_0800337c": "flag_10_return"
            },
            "code": "uint32_t set_flag_080031fc(uint32_t flag) {\n    uint32_t* flag_ptr = (uint32_t*)(DAT_08003350 + 0x30);\n    switch(flag) {\n        case 0:\n            *flag_ptr |= 0x01;\n            return DAT_08003354;\n        case 1:\n            *flag_ptr |= 0x02;\n            return DAT_08003358;\n        case 2:\n            *flag_ptr |= 0x04;\n            return DAT_0800335c;\n        case 3:\n            *flag_ptr |= 0x08;\n            return DAT_08003360;\n        case 4:\n            *flag_ptr |= 0x10;\n            return DAT_08003364;\n        case 5:\n            *flag_ptr |= 0x20;\n            return DAT_08003368;\n        case 6:\n            *flag_ptr |= 0x40;\n            return DAT_0800336c;\n        case 7:\n            *flag_ptr |= 0x80;\n            return DAT_08003370;\n        case 8:\n            *flag_ptr |= 0x100;\n            return DAT_08003374;\n        case 9:\n            *flag_ptr |= 0x200;\n            return DAT_08003378;\n        case 10:\n            *flag_ptr |= 0x400;\n            return DAT_0800337c;\n        default:\n            return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031fc",
            "calling": [
                "FUN_08003486",
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "set_flag_080031fc"
        },
        "FUN_08000690": {
            "renaming": {
                "FUN_08000690": "initialize_if_param_1_is_1_08000690",
                "param_1": "is_param_1_equal_to_1",
                "param_2": "is_param_2_equal_to_0xffff",
                "initialize_data_08000682": "initialize_data",
                "PTR_DAT_080006b0": "PTR_DAT_080006b0",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "void initialize_if_param_1_is_1_08000690(int param_1, int param_2, undefined4 param_3, undefined4 param_4) {\n  if (param_1 == 1) {\n    if (param_2 == 0xffff) {\n      initialize_data(PTR_DAT_080006b0, 1, 0, 0, param_4);\n    }\n  }\n}\n",
            "called": [
                "FUN_08000682"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000690",
            "calling": [],
            "imported": false,
            "current_name": "initialize_if_param_1_is_1_08000690"
        },
        "FUN_080054fc": {
            "renaming": {
                "FUN_080054fc": "allocate_and_set_memory_block_080054fc",
                "param_1": "process_id",
                "param_2": "memory_block_info",
                "uVar1": "permissions",
                "iVar2": "allocation_result",
                "local_18": "block_size",
                "local_14": "local_memory_block_info"
            },
            "code": "void allocate_and_set_memory_block_080054fc(int process_id, int *memory_block_info)\n{\n  ushort permissions;\n  int allocation_result;\n  int block_size;\n  int *local_memory_block_info;\n  \n  if ((ushort)(*(memory_block_info + 3)) << 0x1e > 0xffffffff) {\n    block_size = process_id;\n    local_memory_block_info = memory_block_info;\n    permissions = check_permissions_and_set(process_id, memory_block_info, &block_size, &local_memory_block_info);\n    allocation_result = allocate_memory_block(process_id, block_size);\n    if (allocation_result != 0) {\n      *(undefined **)(process_id + 0x28) = DAT_08005320_1_08005578;\n      *memory_block_info = allocation_result;\n      *(ushort *)(memory_block_info + 3) = *(ushort *)(memory_block_info + 3) | 0x80;\n      memory_block_info[5] = block_size;\n      memory_block_info[4] = allocation_result;\n      if ((local_memory_block_info != (int *)0x0) && (calculate_and_set_result(process_id, *(short *)((int)memory_block_info + 0xe)) != 0)) {\n        *(ushort *)(memory_block_info + 3) = *(ushort *)(memory_block_info + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(memory_block_info + 3) = permissions | *(ushort *)(memory_block_info + 3);\n      return;\n    }\n    if ((ushort)(*(memory_block_info + 3)) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(memory_block_info + 3) = *(ushort *)(memory_block_info + 3) & 0xfffc | 2;\n  }\n  *memory_block_info = (int)memory_block_info + 0x47;\n  memory_block_info[4] = (int)memory_block_info + 0x47;\n  memory_block_info[5] = 1;\n  return;\n}\n",
            "called": [
                "FUN_080056f8",
                "FUN_080054b4",
                "FUN_08004978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054fc",
            "calling": [
                "FUN_080050d0"
            ],
            "imported": false,
            "current_name": "allocate_and_set_memory_block_080054fc"
        },
        "FUN_08001420": {
            "renaming": {
                "FUN_08001420": "increment_and_store_byte_08001420",
                "param_1": "data",
                "pbVar1": "byte_ptr",
                "short_ptr": "short_ptr",
                "uint_ptr": "uint_ptr"
            },
            "code": "int increment_and_store_byte_08001420(int *data)\n{\n  short *short_ptr = (short *)(data + 0x2a);\n  if (*short_ptr != 0) {\n    byte *byte_ptr = (byte *)data[9];\n    data[9] = (int)(byte_ptr + 1);\n    uint *uint_ptr = (uint *)(*data + 0x10);\n    *uint_ptr = (uint)*byte_ptr;\n    *short_ptr = *short_ptr - 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001420",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "increment_and_store_byte_08001420"
        },
        "FUN_080026ca": {
            "renaming": {
                "FUN_080026ca": "do_nothing_080026ca"
            },
            "code": "\nvoid do_nothing_080026ca(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ca",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026ca"
        },
        "FUN_08000de4": {
            "renaming": {
                "FUN_08000de4": "set_flags_and_params_08000de4",
                "puVar1": "flags_ptr",
                "DAT_08000e14": "DAT_flags_ptr",
                "set_param_08000e3c": "set_parameter",
                "check_and_set_param_08000d98": "check_and_set_parameter",
                "do_nothing_08000d96": "do_nothing"
            },
            "code": "int set_flags_and_params_08000de4() \\n\\\n{\\n\\\n  uint *flags_ptr;\\n\\\n  flags_ptr = DAT_08000e14;\\n\\\n  *DAT_08000e14 |= 0x200;\\n\\\n  *flags_ptr |= 0x400;\\n\\\n  *flags_ptr |= 0x100;\\n\\\n  set_parameter(3);\\n\\\n  check_and_set_parameter(0xf);\\n\\\n  do_nothing();\\n\\\n  return 0;\\n\\\n}",
            "called": [
                "FUN_08000d96",
                "FUN_08000e3c",
                "FUN_08000d98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000de4",
            "calling": [
                "FUN_080034ce"
            ],
            "imported": false,
            "current_name": "set_flags_and_params_08000de4"
        },
        "FUN_080026ce": {
            "renaming": {
                "FUN_080026ce": "process_flags_080026ce",
                "param_1": "param_array",
                "iVar1": "var1",
                "*(uint *)(iVar1 + 0x10)": "flag1",
                "*(uint *)(iVar1 + 0xc)": "flag2"
            },
            "code": "void process_flags_080026ce(int *param_array)\n{\n  int var1;\n  int flag1, flag2;\n  var1 = *param_array;\n  flag1 = *(uint *)(var1 + 0x10);\n  flag2 = *(uint *)(var1 + 0xc);\n  if (((flag1 & 2) != 0) && ((flag2 & 2) != 0)) {\n    *(undefined4 *)(var1 + 0x10) = 0xfffffffd;\n    *(undefined *)(param_array + 6) = 1;\n    if ((*(uint *)(*param_array + 0x18) & 3) == 0) {\n      execute_callback_if_flag_set_08003754();\n      do_nothing_080026ca(param_array);\n    }\n    else {\n      do_nothing_080026c8();\n    }\n    *(undefined *)(param_array + 6) = 0;\n  }\n  var1 = *param_array;\n  flag1 = *(uint *)(var1 + 0x10);\n  flag2 = *(uint *)(var1 + 0xc);\n  if (((flag1 & 4) != 0) && ((flag2 & 4) != 0)) {\n    *(undefined4 *)(var1 + 0x10) = 0xfffffffb;\n    *(undefined *)(param_array + 6) = 2;\n    if ((*(uint *)(*param_array + 0x18) & 0x300) == 0) {\n      execute_callback_if_flag_set_08003754(param_array);\n      do_nothing_080026ca(param_array);\n    }\n    else {\n      do_nothing_080026c8(param_array);\n    }\n    *(undefined *)(param_array + 6) = 0;\n  }\n  var1 = *param_array;\n  flag1 = *(uint *)(var1 + 0x10);\n  flag2 = *(uint *)(var1 + 0xc);\n  if (((flag1 & 8) != 0) && ((flag2 & 8) != 0)) {\n    *(undefined4 *)(var1 + 0x10) = 0xfffffff7;\n    *(undefined *)(param_array + 6) = 4;\n    if ((*(uint *)(*param_array + 0x1c) & 3) == 0) {\n      execute_callback_if_flag_set_08003754(param_array);\n      do_nothing_080026ca(param_array);\n    }\n    else {\n      do_nothing_080026c8(param_array);\n    }\n    *(undefined *)(param_array + 6) = 0;\n  }\n  var1 = *param_array;\n  flag1 = *(uint *)(var1 + 0x10);\n  flag2 = *(uint *)(var1 + 0xc);\n  if (((flag1 & 0x10) != 0) && ((flag2 & 0x10) != 0)) {\n    *(undefined4 *)(var1 + 0x10) = 0xffffffef;\n    *(undefined *)(param_array + 6) = 8;\n    if ((*(uint *)(*param_array + 0x1c) & 0x300) == 0) {\n      execute_callback_if_flag_set_08003754(param_array);\n      do_nothing_080026ca(param_array);\n    }\n    else {\n      do_nothing_080026c8(param_array);\n    }\n    *(undefined *)(param_array + 6) = 0;\n  }\n  var1 = *param_array;\n  flag1 = *(uint *)(var1 + 0x10);\n  flag2 = *(uint *)(var1 + 0xc);\n  if (((flag1 & 1) != 0) && ((flag2 & 1) != 0)) {\n    *(undefined4 *)(var1 + 0x10) = 0xfffffffe;\n    execute_callback_if_present_0800376e(param_array);\n  }\n  var1 = *param_array;\n  flag1 = *(uint *)(var1 + 0x10);\n  flag2 = *(uint *)(var1 + 0xc);\n  if (((flag1 & 0x80) != 0) && ((flag2 & 0x80) != 0)) {\n    *(undefined4 *)(var1 + 0x10) = 0xffffff7f;\n    do_nothing_0800293e(param_array);\n  }\n  var1 = *param_array;\n  flag1 = *(uint *)(var1 + 0x10);\n  flag2 = *(uint *)(var1 + 0xc);\n  if (((flag1 & 0x40) != 0) && ((flag2 & 0x40) != 0)) {\n    *(undefined4 *)(var1 + 0x10) = 0xffffffbf;\n    do_nothing_080026cc(param_array);\n  }\n  var1 = *param_array;\n  flag1 = *(uint *)(var1 + 0x10);\n  flag2 = *(uint *)(var1 + 0xc);\n  if (((flag1 & 0x20) != 0) && ((flag2 & 0x20) != 0)) {\n    *(undefined4 *)(var1 + 0x10) = 0xffffffdf;\n    do_nothing_0800293c(param_array);\n  }\n  return;\n}",
            "called": [
                "FUN_0800293e",
                "FUN_0800293c",
                "FUN_0800376e",
                "FUN_080026cc",
                "FUN_080026c8",
                "FUN_080026ca",
                "FUN_08003754"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ce",
            "calling": [
                "FUN_0800377c"
            ],
            "imported": false,
            "current_name": "process_flags_080026ce"
        },
        "FUN_080026cc": {
            "renaming": {
                "FUN_080026cc": "do_nothing_080026cc"
            },
            "code": "\nvoid do_nothing_080026cc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026cc",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026cc"
        },
        "FUN_08000218": {
            "renaming": {
                "FUN_08000218": "find_end_of_string_08000218",
                "param_1": "string",
                "pcVar2": "current_position",
                "pcVar3": "current_position",
                "cVar1": "current_char"
            },
            "code": "char* find_end_of_string_08000218(char* string)\n{\n  char current_char;\n  char* current_position;\n  \n  current_position = string;\n  do {\n    current_position++;\n    current_char = *current_position;\n  } while (current_char != '\\0');\n  return current_position + (-1 - (int)string);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000218",
            "calling": [
                "FUN_080045c8"
            ],
            "imported": false,
            "current_name": "find_end_of_string_08000218"
        },
        "FUN_0800339c": {
            "renaming": {
                "FUN_0800339c": "find_value_0800339c",
                "param_1": "input_value",
                "param_2": "data_ptr",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "result",
                "uVar2": "shifted_result"
            },
            "code": "uint8_t find_value_0800339c(uint32_t input_value, uint32_t *data_ptr, uint32_t param_3, uint32_t param_4)\n{\n  int32_t result = find_value_0800339c_helper(input_value, data_ptr, param_3, param_4, param_4);\n  uint8_t shifted_result = (uint8_t)(result << 12) >> 27;\n  if (shifted_result == 3) {\n    return 8;\n  }\n  if (shifted_result != 4) {\n    if (shifted_result != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 12;\n}",
            "called": [
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800339c",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "find_value_0800339c"
        },
        "FUN_0800557e": {
            "renaming": {
                "FUN_0800557e": "do_nothing_0800557e"
            },
            "code": "\nvoid do_nothing_0800557e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557e",
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557e"
        },
        "FUN_08000e60": {
            "renaming": {
                "FUN_08000e60": "update_bits_08000e60",
                "param_1": "bit_offset",
                "param_2": "bit_count",
                "param_3": "new_value",
                "uVar1": "shift_amount",
                "uVar2": "remaining_bits",
                "DAT_08000ebc": "PTR_DAT_08000ebc",
                "PTR_08000e60": "result",
                "DAT_08000ec0": "PTR_DAT_08000ec0"
            },
            "code": "void update_bits_08000e60(uint bit_offset, uint bit_count, uint new_value)\n{\n  uint shift_amount = (uint)(*(int *)(DAT_08000ebc + 0xc) << 0x15) >> 0x1d;\n  uint remaining_bits = 7 - shift_amount;\n  if (remaining_bits > 3) {\n    remaining_bits = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount = shift_amount - 3;\n  }\n  uint mask = (1 << (remaining_bits & 0xff)) - 1U;\n  uint shifted_mask = mask << (shift_amount & 0xff);\n  uint shifted_value = (new_value & mask) << (shift_amount & 0xff);\n  uint PTR_08000e60 = (PTR_08000e60 & (uint)(~shifted_mask)) | shifted_value;\n  if ((int)bit_offset < 0) {\n    *(char *)(DAT_08000ec0 + (bit_offset & 0xf)) = (char)(PTR_08000e60 << 4);\n  }\n  else {\n    *(char *)(bit_offset + 0xe000e400) = (char)(PTR_08000e60 << 4);\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e60",
            "calling": [
                "FUN_08000c8c",
                "FUN_08003e54",
                "FUN_08000d98",
                "FUN_08003eac"
            ],
            "imported": false,
            "current_name": "update_bits_08000e60"
        },
        "FUN_0800557c": {
            "renaming": {
                "FUN_0800557c": "do_nothing_0800557c"
            },
            "code": "\nvoid do_nothing_0800557c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557c",
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557c"
        },
        "FUN_0800165a": {
            "renaming": {
                "FUN_0800165a": "process_input_0800165a",
                "param_1": "input_array",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "input_data",
                "uVar2": "input_value"
            },
            "code": "int process_input_0800165a(int* input_array, int param2, int param3, int param4)\n{\n    int input_value = *(int*)(input_array + 0x18);\n    int input_flag = input_value & 0x80;\n    int input_offset = 3;\n    if (input_flag != 0)\n    {\n        input_offset = 6;\n    }\n    int input_data = *(int*)(input_array + input_offset);\n    int is_input_valid = (input_value & 4) == 0;\n    process_input_0800165a_08003880(input_array, is_input_valid, input_data, input_value, param4);\n    return 0;\n}",
            "called": [
                "FUN_08003880"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800165a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_0800165a"
        },
        "FUN_08000b04": {
            "renaming": {
                "FUN_08000b04": "process_data_08000b04",
                "param_1": "data_address",
                "param_2": "output_address",
                "bVar1": "num_bytes",
                "bVar2": "num_words",
                "cVar3": "crc",
                "uVar4": "word",
                "uVar5": "i"
            },
            "code": "int process_data_08000b04(int data_address,int output_address)\n{\n  byte num_bytes = *(byte *)(data_address + 0xc);\n  byte num_words = *(byte *)(data_address + 0xe);\n  *(undefined *)(data_address + 0xd) = 0;\n  *(byte *)(data_address + 0xe) = num_words;\n  *(undefined *)(data_address + 0x49) = 6;\n  for (uint i = 0; i < num_words; i++) {\n    undefined2 word = combine_values(*(undefined *)(i * 2 + data_address + 0x10), *(undefined *)(data_address + (i + 4) * 2 + 9));\n    *(undefined2 *)(output_address + (num_bytes + i) * 2) = word;\n  }\n  char crc = *(char *)(data_address + 0x49);\n  calculate_crc_and_update_data(data_address);\n  return (int)(char)(crc + '\\x02');\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b04",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "process_data_08000b04"
        },
        "FUN_0800262c": {
            "renaming": {
                "FUN_0800262c": "execute_operations_on_parameter_0800262c",
                "param_1": "parameter",
                "*(uint *)(*param_1 + 0xc)": "ptr1",
                "*(uint *)(*param_1 + 8)": "ptr2",
                "execute_code_if_not_null_08003594()": "execute_code_if_not_null()",
                "do_nothing_0800268c(param_1)": "do_nothing(parameter)",
                "*(undefined4 *)(DAT_08002688 + 0x14)": "*(undefined4*)(DAT_08002688 + 0x14)",
                "*(undefined *)((int)param_1 + 0x1d)": "*(undefined*)((int)parameter + 0x1d)"
            },
            "code": "void execute_operations_on_parameter_0800262c(int* parameter)\n{\n    uint* ptr1 = (uint*)(*parameter + 0xc);\n    uint* ptr2 = (uint*)(*parameter + 8);\n    if ((*ptr1 & 0x100) && (*ptr2 & 0x1000)) {\n        execute_code_if_not_null();\n        *ptr1 = (*ptr1 & 0xff) | 0xfffffe7f;\n    }\n    if ((*ptr1 & 0x200) && (*ptr2 & 0x2000)) {\n        do_nothing(parameter);\n        *ptr1 = (*ptr1 & 0xff) | 0xfffffd7f;\n    }\n    *(undefined4 *)(DAT_08002688 + 0x14) = 0x20000;\n    *(undefined*)((int)parameter + 0x1d) = 1;\n}",
            "called": [
                "FUN_08003594",
                "FUN_0800268c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800262c",
            "calling": [],
            "imported": false,
            "current_name": "execute_operations_on_parameter_0800262c"
        },
        "FUN_08004388": {
            "renaming": {
                "FUN_08004388": "set_flags_and_call_function_08004388",
                "param_1": "data",
                "param_2": "flag1",
                "param_3": "flag2",
                "bVar1": "flag2_mod",
                "iVar2": "flag3",
                "UNRECOVERED_JUMPTABLE": "function_pointer"
            },
            "code": "void set_flags_and_call_function_08004388(int data, int flag1, byte flag2)\n{\n  int flag3 = 0;\n  int (*function_pointer)();\n  *(int *)(data + 0x11c) = flag1;\n  *(byte *)(data + 0x144) = flag2;\n  byte flag2_mod = flag2 & 7;\n  if (flag2_mod == 4) {\n    flag3 = 7;\n  }\n  else if (flag2_mod == 6) {\n    flag3 = 8;\n  }\n  else if (flag2_mod == 2) {\n    flag3 = 6;\n  }\n  if ((flag2 & 0x30) == 0x30) {\n    *(int *)(data + 0x128) = 0x600;\n    flag3++;\n  }\n  else if ((flag2 & 0x20) == 0) {\n    *(int *)(data + 0x128) = 0;\n  }\n  else {\n    *(int *)(data + 0x128) = 0x400;\n    flag3++;\n  }\n  if ((flag2 & 8) == 0) {\n    *(int *)(data + 0x124) = 0;\n  }\n  else {\n    *(int *)(data + 0x124) = 0x2000;\n  }\n  if (flag3 == 8) {\n    *(int *)(data + 0x120) = 0;\n  }\n  else if (flag3 == 9) {\n    *(int *)(data + 0x120) = 0x1000;\n  }\n  else {\n    flag3 = 0;\n  }\n  if (flag3 != 0) {\n    function_pointer = (int (*)())0x08003978;\n    function_pointer(data + 0xd4);\n    validate_combination(data + 0xd4,uRam08004434);\n    return;\n  }\n  function_pointer = (int (*)())0x08004432;\n  process_data_and_call_function(uRam08004440,299,uRam0800443c);\n  if (extraout_r1 < 0x60) {\n    uRam0000012e = *(short *)(PTR_DAT_0800445c + extraout_r1 * 2);\n  }\n  else {\n    uRam0000012e = 0xffff;\n  }\n  (*function_pointer)();\n  return;\n}",
            "called": [
                "FUN_08004808",
                "FUN_08003e54",
                "FUN_08003978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004388",
            "calling": [
                "FUN_08000600"
            ],
            "imported": false,
            "current_name": "set_flags_and_call_function_08004388"
        },
        "FUN_080051ac": {
            "renaming": {
                "FUN_080051ac": "process_input_and_execute_080051ac",
                "puVar1": "input_buffer_ptr",
                "iVar2": "input_buffer_length",
                "piVar3": "function_parameters_ptr",
                "piVar4": "function_locals_ptr",
                "uVar5": "input_buffer_length_uint",
                "uVar6": "input_buffer_length_ushort",
                "iVar7": "loop_counter_uint",
                "pcVar8": "function_pointer",
                "iVar9": "function_locals_ptr",
                "uVar10": "loop_counter_uint",
                "UNRECOVERED_JUMPTABLE_00": "unrecovered_jumptable_ptr",
                "bVar11": "loop_condition",
                "uVar12": "function_return_value"
            },
            "code": "void process_input_and_execute_080051ac(void)\n{\n  uint *input_buffer_ptr;\n  int input_buffer_length;\n  int *function_parameters_ptr;\n  int *function_locals_ptr;\n  uint input_buffer_length_uint;\n  ushort input_buffer_length_ushort;\n  int function_result;\n  code *function_pointer;\n  int loop_counter;\n  uint loop_counter_uint;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool loop_condition;\n  undefined8 function_return_value;\n  \n  process_input_080055d0(6);\n  UNRECOVERED_JUMPTABLE_00 = (code *)0x80051bb;\n  function_return_value = infinite_loop_080040f8(1);\n  function_parameters_ptr = (int *)((ulonglong)function_return_value >> 0x20);\n  input_buffer_ptr = (uint *)function_return_value;\n  input_buffer_length_ushort = *(ushort *)(function_parameters_ptr + 3);\n  input_buffer_length_uint = (uint)input_buffer_length_ushort;\n  if ((int)(input_buffer_length_uint << 0x1c) < 0) {\n    input_buffer_length = function_parameters_ptr[4];\n    if (input_buffer_length != 0) {\n      loop_counter_uint = input_buffer_length_uint << 0x1e;\n      loop_condition = loop_counter_uint == 0;\n      function_locals_ptr = *function_parameters_ptr;\n      if (loop_condition) {\n        loop_counter_uint = function_parameters_ptr[5];\n      }\n      *function_parameters_ptr = input_buffer_length;\n      if (!loop_condition) {\n        loop_counter_uint = 0;\n      }\n      function_parameters_ptr[2] = loop_counter_uint;\n      for (function_locals_ptr = function_locals_ptr - input_buffer_length; 0 < function_locals_ptr; function_locals_ptr = function_locals_ptr - loop_counter_uint) {\n        function_result = (*(code *)function_parameters_ptr[10])(input_buffer_ptr,function_parameters_ptr[8],input_buffer_length, function_locals_ptr);\n        if (function_result < 1) {\n          input_buffer_length_ushort = *(ushort *)(function_parameters_ptr + 3);\n          goto LAB_080052b2;\n        }\n        input_buffer_length = input_buffer_length + function_result;\n      }\n    }\n  }\n  else if (((0 < function_parameters_ptr[1]) || (0 < function_parameters_ptr[0x10])) &&\n          (function_pointer = (code *)function_parameters_ptr[0xb], function_pointer != (code *)0x0)) {\n    loop_counter_uint = *input_buffer_ptr;\n    *input_buffer_ptr = 0;\n    if ((input_buffer_length_ushort & 0x1000) == 0) {\n      function_result = (*function_pointer)(input_buffer_ptr,function_parameters_ptr[8],input_buffer_length_uint & 0x1000,1);\n      if ((function_result == -1) && (input_buffer_length_ushort = *input_buffer_ptr, input_buffer_length_ushort != 0)) {\n        if ((input_buffer_length_ushort != 0x1d) && (input_buffer_length_ushort != 0x16)) {\n          *(ushort *)(function_parameters_ptr + 3) = *(ushort *)(function_parameters_ptr + 3) | 0x40;\n          (*UNRECOVERED_JUMPTABLE_00)();\n          return;\n        }\n        *input_buffer_ptr = loop_counter_uint;\n        goto LAB_080051d6;\n      }\n    }\n    else {\n      function_result = function_parameters_ptr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(function_parameters_ptr + 3) << 0x1d) < 0) &&\n       (function_result = function_result - function_parameters_ptr[1], function_parameters_ptr[0xd] != 0)) {\n      function_result = function_result - function_parameters_ptr[0x10];\n    }\n    function_result = (*(code *)function_parameters_ptr[0xb])(input_buffer_ptr,function_parameters_ptr[8],function_result,0);\n    input_buffer_length_ushort = *(ushort *)(function_parameters_ptr + 3);\n    if ((function_result == -1) &&\n       ((0x1d < *input_buffer_ptr || (-1 < (int)((DAT_080052c8 >> (*input_buffer_ptr & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n      *(ushort *)(function_parameters_ptr + 3) = input_buffer_length_ushort | 0x40;\n      (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n      return;\n    }\n    function_parameters_ptr[1] = 0;\n    *function_parameters_ptr = function_parameters_ptr[4];\n    if (((int)((uint)input_buffer_length_ushort << 0x13) < 0) && ((function_result != -1 || (*input_buffer_ptr == 0)))) {\n      function_parameters_ptr[0x15] = function_result;\n    }\n    function_locals_ptr = (int *)function_parameters_ptr[0xd];\n    *input_buffer_ptr = loop_counter_uint;\n    if (function_locals_ptr != (int *)0x0) {\n      if (function_locals_ptr != function_parameters_ptr + 0x11) {\n        add_to_linked_list_080048dc(input_buffer_ptr);\n      }\n      function_parameters_ptr[0xd] = 0;\n      (*UNRECOVERED_JUMPTABLE_00)();\n      return;\n    }\n  }\nLAB_080051d6:\n  (*UNRECOVERED_JUMPTABLE_00)(0);\n  return;\n}",
            "called": [
                "FUN_080048dc",
                "FUN_080040f8",
                "FUN_080055d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051ac",
            "calling": [
                "FUN_08004808",
                "FUN_08005760"
            ],
            "imported": false,
            "current_name": "process_input_and_execute_080051ac"
        },
        "FUN_080052cc": {
            "renaming": {
                "FUN_080052cc": "process_data_080052cc",
                "param_1": "data_buffer",
                "param_2": "param_buffer",
                "uVar1": "result",
                "iVar2": "loop_index_1",
                "piVar3": "param_ptr",
                "uVar4": "data_flag",
                "uVar5": "data_flag",
                "iVar6": "loop_index_2",
                "unaff_r4": "temp_value",
                "unaff_r5": "temp_value",
                "pcVar7": "data_processing_func",
                "iVar8": "loop_index_3",
                "uVar9": "data_value",
                "UNRECOVERED_JUMPTABLE_00": "UNRECOVERED_JUMPTABLE_00",
                "bVar10": "negative_flag"
            },
            "code": "uint32_t process_data_080052cc(uint32_t *data_buffer, int *param_buffer) {\n    uint32_t result;\n    int *param_ptr;\n    uint32_t data_value;\n    uint16_t data_flag;\n    int loop_index_1;\n    int loop_index_2;\n    int loop_index_3;\n    uint32_t temp_value;\n    uint32_t (*data_processing_func)(uint32_t *, int, int, int, uint32_t, uint32_t);\n    uint32_t data_processing_result;\n    bool negative_flag;\n\n    if (param_buffer[4] != 0) {\n        if ((data_buffer != NULL) && (data_buffer[6] == 0)) {\n            init_data_processing();\n        }\n        if (param_buffer == (int *)PARAM_PTR_1) {\n            param_ptr = (int *)data_buffer[1];\n        }\n        else if (param_buffer == (int *)PARAM_PTR_2) {\n            param_ptr = (int *)data_buffer[2];\n        }\n        else if (param_buffer == (int *)PARAM_PTR_3) {\n            param_ptr = (int *)data_buffer[3];\n        }\n        if (*(uint16_t *)(param_ptr + 3) != 0) {\n            data_flag = *(uint16_t *)(param_ptr + 3);\n            if ((int)(data_flag << 0x1c) < 0) {\n                loop_index_1 = param_buffer[4];\n                if (loop_index_1 != 0) {\n                    loop_index_2 = data_flag << 0x1e;\n                    negative_flag = loop_index_2 == 0;\n                    loop_index_3 = *param_ptr;\n                    if (negative_flag) {\n                        loop_index_2 = param_ptr[5];\n                    }\n                    *param_ptr = loop_index_1;\n                    if (!negative_flag) {\n                        loop_index_2 = 0;\n                    }\n                    param_ptr[2] = loop_index_2;\n                    for (loop_index_3 = loop_index_3 - loop_index_1; 0 < loop_index_3; loop_index_3 = loop_index_3 - loop_index_2) {\n                        data_processing_func = (uint32_t (*)(uint32_t *, int, int, int, uint32_t, uint32_t))param_ptr[10];\n                        data_processing_result = data_processing_func(data_buffer, param_ptr[8], loop_index_1, loop_index_3, 0, 0);\n                        if (data_processing_result < 1) {\n                            data_flag = *(uint16_t *)(param_ptr + 3);\n                            goto LAB_080052b2;\n                        }\n                        loop_index_1 = loop_index_1 + data_processing_result;\n                    }\n                }\n            }\n            else if (((0 < param_ptr[1]) || (0 < param_ptr[0x10])) && ((data_processing_func = (uint32_t (*)(uint32_t *, int, int, int, uint32_t, uint32_t))param_ptr[0xb]) != NULL)) {\n                data_value = *data_buffer;\n                *data_buffer = 0;\n                if ((data_flag & 0x1000) == 0) {\n                    data_processing_result = data_processing_func(data_buffer, param_ptr[8], data_flag & 0x1000, 1, 0, 0);\n                    if ((data_processing_result == -1) && ((data_value = *data_buffer) != 0)) {\n                        if ((data_value != 0x1d) && (data_value != 0x16)) {\n                            data_flag = *(uint16_t *)(param_ptr + 3);\n                            data_processing_result = UNRECOVERED_JUMPTABLE_00();\n                            return data_processing_result;\n                        }\n                        *data_buffer = data_value;\n                        goto LAB_080051d6;\n                    }\n                }\n                else {\n                    data_processing_result = param_ptr[0x15];\n                }\n                if (((int)((uint)data_flag << 0x1d) < 0) && ((data_processing_result = data_processing_result - param_ptr[1]), param_ptr[0xd] != 0)) {\n                    data_processing_result = data_processing_result - param_ptr[0x10];\n                }\n                data_processing_result = data_processing_func(data_buffer, param_ptr[8], data_processing_result, 0, 0, 0);\n                data_flag = *(uint16_t *)(param_ptr + 3);\n                if ((data_processing_result == -1) && ((0x1d < *data_buffer) || (-1 < (int)((DAT_080052c8 >> (*data_buffer & 0xff)) << 0x1f)))) {\n                    data_flag = *(uint16_t *)(param_ptr + 3);\n                    goto LAB_080052b2;\n                }\n                param_ptr[1] = 0;\n                *param_ptr = param_ptr[4];\n                if (((int)((uint)data_flag << 0x13) < 0) && ((data_processing_result != -1) || (*data_buffer == 0))) {\n                    param_ptr[0x15] = data_processing_result;\n                }\n                if (param_ptr[0xd] != NULL) {\n                    if (param_ptr[0xd] != param_ptr + 0x11) {\n                        add_to_linked_list(data_buffer);\n                    }\n                    param_ptr[0xd] = 0;\n                    data_processing_result = UNRECOVERED_JUMPTABLE_00();\n                    return data_processing_result;\n                }\n            }\nLAB_080051d6:\n            data_processing_result = UNRECOVERED_JUMPTABLE_00(0);\n            return data_processing_result;\n        }\n    }\n    return 0;\n}\n",
            "called": [
                "FUN_080053a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052cc",
            "calling": [
                "FUN_08004a34"
            ],
            "imported": false,
            "current_name": "process_data_080052cc",
            "code_backup": "\nundefined4 FUN_080052cc(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_080053a0();\n    }\n    if (param_2 == (int *)PTR_DAT_08005314) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)PTR_DAT_08005318) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)PTR_DAT_0800531c) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 == 0;\n          iVar8 = *param_2;\n          if (bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          if (!bVar10) {\n            iVar6 = 0;\n          }\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_080052b2;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((DAT_080052c8 >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            add_to_linked_list_080048dc(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08002eb2": {
            "renaming": {
                "FUN_08002eb2": "validate_input_08002eb2",
                "param_1": "input_array",
                "param_2": "array_size",
                "param_3": "value",
                "*(char *)((int)param_1 + 0x39)": "input_array[9]",
                "*(char *)(param_1 + 0xe)": "input_array[14]",
                "param_1[8]": "input_array[8]",
                "*(short *)(param_1 + 9)": "input_array[9]",
                "*(short *)((int)param_1 + 0x26)": "input_array[11]",
                "param_1[0xf]": "input_array[15]",
                "*(undefined *)((int)param_1 + 0x39)": "input_array[9]",
                "*(undefined *)(param_1 + 0xe)": "input_array[14]",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*input_array + 0xc)"
            },
            "code": "int validate_input_08002eb2(int *input_array, int array_size, int value){\n    if (input_array[9] != ' ') {\n        return 2;\n    }\n    if (array_size == 0) {\n        return 1;\n    }\n    if (value == 0) {\n        return 1;\n    }\n    if (input_array[14] != '\\x01') {\n        input_array[8] = array_size;\n        input_array[9] = (short)value;\n        input_array[11] = (short)value;\n        input_array[15] = 0;\n        input_array[9] = 0x21;\n        input_array[14] = 0;\n        *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002eb2",
            "calling": [
                "FUN_08003f48",
                "FUN_08003eac"
            ],
            "imported": false,
            "current_name": "validate_input_08002eb2"
        },
        "FUN_08000d3c": {
            "renaming": {
                "FUN_08000d3c": "initialize_system_08000d3c",
                "iVar1": "index",
                "puVar2": "ptr1",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "PTR_DAT_08000d84": "ptr1_start",
                "PTR_DAT_08000d7c": "data_ptr_start",
                "PTR_DAT_08000d80": "data_ptr_end",
                "DAT_08000d78": "data_start",
                "PTR_DAT_08000d88": "ptr1_end"
            },
            "code": "void initialize_system_08000d3c(void)\n{\n  int index;\n  undefined4 *ptr1;\n  code *jump_table;\n  for (index = 0; PTR_DAT_08000d7c + index < PTR_DAT_08000d80; index += 4)\n  {\n    *(undefined4 *)(PTR_DAT_08000d7c + index) = *(undefined4 *)(DAT_08000d78 + index);\n  }\n  for (ptr1 = (undefined4 *)PTR_DAT_08000d84; ptr1 < PTR_DAT_08000d88; ptr1 += 1)\n  {\n    *ptr1 = 0;\n  }\n  set_startup_flag();\n  execute_functions();\n  jump_table = (code *)0x8000d72;\n  process_interrupt_and_data();\n  (*jump_table)();\n  return;\n}\n",
            "called": [
                "FUN_080035bc",
                "FUN_08004658",
                "FUN_08004884"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d3c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_system_08000d3c"
        },
        "FUN_08003978": {
            "renaming": {
                "FUN_08003978": "FUNC_08003978"
            },
            "code": "\nvoid FUNC_08003978(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  undefined4 uVar10;\n  uint uVar11;\n  uint local_2c;\n  uint local_28;\n  uint local_24;\n  undefined4 local_20;\n  uint local_1c;\n  \n  if (param_1 != (int *)0x0) {\n    iVar7 = get_element_if_not_negative_080034f4((int)*(short *)(param_1 + 0x16),PTR_DAT_08003c58);\n    iVar8 = get_element_if_not_negative_080034f4((int)*(short *)((int)param_1 + 0x5a),PTR_DAT_08003c5c);\n    if ((iVar8 == 0) || (iVar7 == 0)) {\n      process_params_and_call_func_08004fdc(PTR_s_ERROR__at_least_one_UART_pin_has_08003c84,iVar8);\n    }\n    else {\n      iVar9 = compare_and_return_08003582(iVar7);\n      *param_1 = iVar9;\n      iVar6 = DAT_08003c7c;\n      iVar5 = DAT_08003c78;\n      iVar4 = DAT_08003c74;\n      iVar3 = DAT_08003c70;\n      iVar2 = DAT_08003c6c;\n      iVar1 = DAT_08003c68;\n      iVar8 = DAT_08003c64;\n      iVar7 = DAT_08003c60;\n      if (iVar9 == 0) {\n        process_params_and_call_func_08004fdc(PTR_s_ERROR__U_S_ART_pins_mismatch_08003c88);\n      }\n      else {\n        if (iVar9 == DAT_08003c60) {\n          *(uint *)(DAT_08003c60 + 0x12824) = *(uint *)(DAT_08003c60 + 0x12824) | 0x10;\n          *(uint *)(iVar7 + 0x12824) = *(uint *)(iVar7 + 0x12824) & 0xffffffef;\n          *(uint *)(iVar7 + 0x12844) = *(uint *)(iVar7 + 0x12844) | 0x10;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)(param_1 + 0x17) = 0x25;\n        }\n        else if (iVar9 == DAT_08003c64) {\n          *(uint *)(DAT_08003c64 + 0x1f420) = *(uint *)(DAT_08003c64 + 0x1f420) | 0x20000;\n          *(uint *)(iVar8 + 0x1f420) = *(uint *)(iVar8 + 0x1f420) & 0xfffdffff;\n          *(uint *)(iVar8 + 0x1f440) = *(uint *)(iVar8 + 0x1f440) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)(param_1 + 0x17) = 0x26;\n        }\n        else if (iVar9 == DAT_08003c68) {\n          *(uint *)(DAT_08003c68 + 0x1f020) = *(uint *)(DAT_08003c68 + 0x1f020) | 0x40000;\n          *(uint *)(iVar1 + 0x1f020) = *(uint *)(iVar1 + 0x1f020) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1f040) = *(uint *)(iVar1 + 0x1f040) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)(param_1 + 0x17) = 0x27;\n        }\n        else if (iVar9 == DAT_08003c6c) {\n          *(uint *)(DAT_08003c6c + 0x1ec20) = *(uint *)(DAT_08003c6c + 0x1ec20) | 0x80000;\n          *(uint *)(iVar2 + 0x1ec20) = *(uint *)(iVar2 + 0x1ec20) & 0xfff7ffff;\n          *(uint *)(iVar2 + 0x1ec40) = *(uint *)(iVar2 + 0x1ec40) | 0x80000;\n          *(undefined *)(param_1 + 0x11) = 3;\n          *(undefined *)(param_1 + 0x17) = 0x34;\n        }\n        else if (iVar9 == DAT_08003c70) {\n          *(uint *)(DAT_08003c70 + 0x1e820) = *(uint *)(DAT_08003c70 + 0x1e820) | 0x100000;\n          *(uint *)(iVar3 + 0x1e820) = *(uint *)(iVar3 + 0x1e820) & 0xffefffff;\n          *(uint *)(iVar3 + 0x1e840) = *(uint *)(iVar3 + 0x1e840) | 0x100000;\n          *(undefined *)(param_1 + 0x11) = 4;\n          *(undefined *)(param_1 + 0x17) = 0x35;\n        }\n        else if (iVar9 == DAT_08003c74) {\n          *(uint *)(DAT_08003c74 + 0x12424) = *(uint *)(DAT_08003c74 + 0x12424) | 0x20;\n          *(uint *)(iVar4 + 0x12424) = *(uint *)(iVar4 + 0x12424) & 0xffffffdf;\n          *(uint *)(iVar4 + 0x12444) = *(uint *)(iVar4 + 0x12444) | 0x20;\n          *(undefined *)(param_1 + 0x11) = 5;\n          *(undefined *)(param_1 + 0x17) = 0x47;\n        }\n        else if (iVar9 == DAT_08003c78) {\n          *(uint *)(DAT_08003c78 + 0x1c020) = *(uint *)(DAT_08003c78 + 0x1c020) | 0x40000000;\n          *(uint *)(iVar5 + 0x1c020) = *(uint *)(iVar5 + 0x1c020) & 0xbfffffff;\n          *(uint *)(iVar5 + 0x1c040) = *(uint *)(iVar5 + 0x1c040) | 0x40000000;\n          *(undefined *)(param_1 + 0x11) = 6;\n          *(undefined *)(param_1 + 0x17) = 0x52;\n        }\n        else if (iVar9 == DAT_08003c7c) {\n          *(uint *)(DAT_08003c7c + 0x1bc20) = *(uint *)(DAT_08003c7c + 0x1bc20) | 0x80000000;\n          *(uint *)(iVar6 + 0x1bc20) = *(uint *)(iVar6 + 0x1bc20) & 0x7fffffff;\n          *(uint *)(iVar6 + 0x1bc40) = *(uint *)(iVar6 + 0x1bc40) | 0x80000000;\n          *(undefined *)(param_1 + 0x11) = 7;\n          *(undefined *)(param_1 + 0x17) = 0x53;\n        }\n        uVar10 = set_flag_080031fc((uint)((int)*(short *)((int)param_1 + 0x5a) << 0x18) >> 0x1c);\n        uVar11 = find_value_0800354a((int)*(short *)((int)param_1 + 0x5a),PTR_DAT_08003c5c);\n        local_2c = 1 << (*(ushort *)((int)param_1 + 0x5a) & 0xf) & 0xffff;\n        local_28 = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        local_24 = (uVar11 << 0x1a) >> 0x1e;\n        local_1c = (uVar11 << 0x11) >> 0x19;\n        local_20 = 3;\n        update_data_08000fb4(uVar10,&local_2c);\n        uVar10 = set_flag_080031fc((uint)((int)*(short *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar11 = find_value_0800354a((int)*(short *)(param_1 + 0x16),PTR_DAT_08003c58);\n        local_2c = 1 << (*(ushort *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_28 = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        local_24 = (uVar11 << 0x1a) >> 0x1e;\n        update_data_08000fb4(uVar10,&local_2c);\n        *(int **)(PTR_DAT_08003c80 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        check_and_update_08002d72(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08002d72",
                "FUN_08000fb4",
                "FUN_080034f4",
                "FUN_08004fdc",
                "FUN_08003582",
                "FUN_080031fc",
                "FUN_0800354a"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003978",
            "calling": [
                "FUN_08004388",
                "FUN_08003cc8"
            ],
            "imported": false,
            "current_name": "FUNC_08003978"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "set_bit_to_zero_0800316c",
                "param_1": "bit_index",
                "param_2": "array_ptr",
                "uVar1": "array_index",
                "PTR_": "array_ptr",
                "DAT_": "bit_mask"
            },
            "code": "void set_bit_to_zero_0800316c(uint bit_index, int* PTR_)\n{\n  uint array_index = (bit_index << 0x18) >> 0x1c;\n  uint* array_element_ptr = PTR_ + array_index;\n  uint DAT_ = ~(1 << (bit_index & 0xf));\n  *array_element_ptr = *array_element_ptr & DAT_;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "set_bit_to_zero_0800316c"
        },
        "FUN_080040d0": {
            "renaming": {
                "FUN_080040d0": "return_error_code_080040d0",
                "undefined4": "int32_t"
            },
            "code": "int32_t return_error_code_080040d0(void) {\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d0",
            "calling": [],
            "imported": false,
            "current_name": "return_error_code_080040d0"
        },
        "FUN_080040d6": {
            "renaming": {
                "FUN_080040d6": "set_memory_permissions_080040d6",
                "param_1": "address",
                "param_2": "permission",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void set_memory_permissions_080040d6(int* address, int permission) {\n    *(int *)(address + 4) = permission;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d6",
            "calling": [
                "FUN_080056d4"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_080040d6"
        },
        "FUN_08004a34": {
            "renaming": {
                "FUN_08004a34": "process_input_08004a34",
                "param_1": "input_length",
                "param_2": "input_byte",
                "param_3": "input_buffer",
                "iVar1": "buffer_index",
                "pbVar2": "current_byte",
                "pbVar3": "buffer_end",
                "uVar4": "result"
            },
            "code": "uint process_input_08004a34(int input_length, byte input_byte, byte **input_buffer){\n  int buffer_index;\n  byte *current_byte;\n  byte *buffer_end;\n  uint result;\n  \n  buffer_end = (*input_buffer + 0x1F) - input_length;\n  (*input_buffer)--;\n  if ((buffer_end <= *input_buffer) || ((input_length <= (int)(*input_buffer - *(input_buffer + 6))) && (input_byte != 0xA))) {\n    current_byte = *input_buffer;\n    (*input_buffer)++;\n    *current_byte = input_byte;\n    return (uint)input_byte;\n  }\n  if ((input_length != 0) && (*(int *)(input_length + 0x18) == 0)) {\n    initialize_arrays_080053a0();\n  }\n  if (input_buffer == (byte **)PTR_DAT_080050c4) {\n    input_buffer = *(byte ***)(input_length + 4);\n  }\n  else if (input_buffer == (byte **)PTR_DAT_080050c8) {\n    input_buffer = *(byte ***)(input_length + 8);\n  }\n  else if (input_buffer == (byte **)PTR_DAT_080050cc) {\n    input_buffer = *(byte ***)(input_length + 0xC);\n  }\n  *input_buffer = *(input_buffer + 6);\n  current_byte = (byte *)(uint)*(ushort *)(input_buffer + 3);\n  buffer_index = (int)current_byte << 0x1C;\n  if (((buffer_index < 0) && ((current_byte = *(input_buffer + 4)) != (byte *)0x0)) || ((buffer_index = handle_data_080050d0(input_length, input_buffer, buffer_index, current_byte, *input_buffer), buffer_index == 0))) {\n    buffer_index = (int)*input_buffer - (int)*(input_buffer + 4);\n    result = (uint)input_byte;\n    if ((buffer_index < (int)*(input_buffer + 5)) || ((buffer_index = process_data_080052cc(input_length, input_buffer), buffer_index == 0))) {\n      (*input_buffer)--;\n      current_byte = *input_buffer;\n      (*input_buffer)++;\n      *current_byte = input_byte;\n      if ((byte *)(buffer_index + 1) != *(input_buffer + 5)) {\n        if (-1 < (int)((uint)*(ushort *)(input_buffer + 3) << 0x1F)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      buffer_index = process_data_080052cc(input_length, input_buffer);\n      if (buffer_index == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xFFFFFFFF;\n}",
            "called": [
                "FUN_080053a0",
                "FUN_080052cc",
                "FUN_080050d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a34",
            "calling": [
                "FUN_08004a60"
            ],
            "imported": false,
            "current_name": "process_input_08004a34"
        },
        "FUN_080002d0": {
            "renaming": {
                "FUN_080002d0": "get_concatenated_values_080002d0",
                "param_1": "num_1",
                "param_2": "num_2",
                "param_3": "flag_1",
                "param_4": "flag_2",
                "uVar1": "result"
            },
            "code": "uint64_t get_concatenated_values_080002d0(int num_1, int num_2, int flag_1, int flag_2)\n{\n  if ((flag_2 == 0) && (flag_1 == 0)) {\n    if (num_2 != 0 || num_1 != 0) {\n      num_2 = -1;\n      num_1 = -1;\n    }\n    return CONCAT44(num_2, num_1);\n  }\n  uint64_t result = get_result();\n  return result;\n}",
            "called": [
                "FUN_08000300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002d0",
            "calling": [
                "FUN_080023b4"
            ],
            "imported": false,
            "current_name": "get_concatenated_values_080002d0"
        },
        "FUN_08003f00": {
            "renaming": {
                "FUN_08003f00": "find_param_index_08003f00",
                "param_1": "param_value",
                "uVar1": "index"
            },
            "code": "uint find_param_index_08003f00(int param_value) {\n  uint index = 0;\n  if (param_value == 0) {\n    index = 10;\n  }\n  else {\n    while (index < 10) {\n      if (param_value == *(int *)(PTR_DAT_08003f20 + index * 4)) {\n        break;\n      }\n      index++;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f00",
            "calling": [
                "FUN_08003f24",
                "FUN_08003f48"
            ],
            "imported": false,
            "current_name": "find_param_index_08003f00"
        },
        "FUN_08005a04": {
            "renaming": {
                "FUN_08005a04": "do_nothing_08005a04"
            },
            "code": "\nvoid do_nothing_08005a04(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a04",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08005a04"
        },
        "FUN_08001440": {
            "renaming": {
                "FUN_08001440": "increment_and_copy_08001440",
                "param_1": "data",
                "puVar1": "ptr_dest",
                "*(short *)((int)param_1 + 0x2a)": "*(short*)ptr_count",
                "*(char *)(undefined4 *)(*param_1 + 0x10)": "*(char*)(int*)(data + 0x10)"
            },
            "code": "int increment_and_copy_08001440(int *data)\n{\n  int *ptr_count = (int*)((char*)data + 0x2a);\n  if (*(short*)ptr_count != 0)\n  {\n    char *ptr_dest = (char*)data[9];\n    data[9] = (int)(ptr_dest + 1);\n    *ptr_dest = (char)*(int*)(data + 0x10);\n    *(short*)ptr_count -= 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001440",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "increment_and_copy_08001440"
        },
        "FUN_08000230": {
            "renaming": {
                "FUN_08000230": "find_byte_in_buffer_08000230",
                "param_1": "buffer",
                "param_2": "buffer_length",
                "param_3": "byte_to_find",
                "bVar1": "current_byte",
                "cVar2": "bit_0",
                "cVar3": "bit_8",
                "cVar4": "bit_16",
                "cVar5": "bit_24",
                "pbVar6": "result",
                "puVar7": "current_buffer_position",
                "pbVar8": "result",
                "uVar9": "position_in_word",
                "uVar10": "buffer_length_remaining_word_aligned",
                "uVar11": "xor_result",
                "uVar12": "byte_result",
                "bVar13": "byte_0",
                "bVar14": "byte_8",
                "bVar15": "byte_16",
                "bVar16": "byte_24"
            },
            "code": "byte* find_byte_in_buffer_08000230(uint* buffer, uint buffer_length, uint byte_to_find) {\n  byte* result = NULL;\n  uint buffer_length_remaining = buffer_length;\n  uint* current_buffer_position = buffer;\n  byte current_byte;\n  uint mask = byte_to_find | byte_to_find << 8 | byte_to_find << 16 | byte_to_find << 24;\n  uint* buffer_end = buffer + (buffer_length & 0xFFFFFFF8);\n  while (current_buffer_position < buffer_end) {\n    uint word = *current_buffer_position++ ^ mask;\n    if (word != 0) {\n      if ((current_byte = word) == 0) {\n        current_byte = (byte)(word >> 8);\n        if (current_byte == 0) {\n          current_byte = (byte)(word >> 16);\n          if (current_byte == 0) {\n            current_byte = (byte)(word >> 24);\n            if (current_byte == 0) {\n              continue;\n            }\n            result = (byte*)(current_buffer_position - 1) + 3;\n          }\n          else {\n            result = (byte*)(current_buffer_position - 1) + 2;\n          }\n        }\n        else {\n          result = (byte*)(current_buffer_position - 1) + 1;\n        }\n      }\n      else {\n        result = (byte*)(current_buffer_position - 1);\n      }\n      break;\n    }\n  }\n  if (result == NULL) {\n    current_buffer_position = buffer_end;\n    buffer_length_remaining &= 7;\n    while (buffer_length_remaining) {\n      if (*current_buffer_position++ == byte_to_find) {\n        result = (byte*)(current_buffer_position - 1);\n        break;\n      }\n      buffer_length_remaining--;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000230",
            "calling": [
                "FUN_08004d9c",
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "find_byte_in_buffer_08000230"
        },
        "FUN_08001684": {
            "renaming": {
                "FUN_08001684": "check_and_execute_conditions_08001684",
                "param_1": "param_array",
                "param_1[0xb]": "(*param)[11]",
                "param_1[0xc]": "(*param)[12]",
                "DAT_08001714": "PTR_DAT_08001714"
            },
            "code": "int check_and_execute_conditions_08001684(uint **param_array)\n{\n    uint **param = param_array;\n    if (((*param)[11] == (uint *)0x4) || ((*param)[11] == (uint *)0x8)) &&\n        (*(char *)((int)param + 0x3d) == '('))\n    {\n        (*param)[11] = DAT_08001714;\n        (*param)[1] &= 0xfffff8ff;\n        (*param)[5] = 0xfffffbff;\n        **param &= 0xfffffbff;\n        (*param)[12] = (uint *)0x0;\n        *(undefined *)((int)param + 0x3d) = 0x20;\n        *(undefined *)((int)param + 0x3e) = 0;\n        execute_function_if_conditions_met_080038d0();\n    }\n    else if (*(char *)((int)param + 0x3d) == '!')\n    {\n        (*param)[11] = DAT_08001714;\n        (*param)[12] = (uint *)0x21;\n        *(undefined *)((int)param + 0x3d) = 0x20;\n        *(undefined *)((int)param + 0x3e) = 0;\n        (*param)[1] &= 0xfffff8ff;\n        (*param)[5] = 0xfffffbff;\n        **param &= 0xfffffbff;\n        do_nothing_080015ba();\n    }\n    else\n    {\n        (*param)[5] = 0xfffffbff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_080038d0",
                "FUN_080015ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001684",
            "calling": [
                "FUN_08001e68"
            ],
            "imported": false,
            "current_name": "check_and_execute_conditions_08001684"
        },
        "FUN_08000f8c": {
            "renaming": {
                "FUN_08000f8c": "check_value_08000f8c",
                "param_1": "data"
            },
            "code": "int check_value_08000f8c(uint **data)\n{\n    int value = (int)data + 0x35;\n    if (*(char *)value != '\\x02') {\n        data[0x15] = (uint *)0x80;\n        return 1;\n    }\n    *(char *)value = 5;\n    **data = **data & 0xfffffffe;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f8c",
            "calling": [
                "FUN_08002ffc",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "check_value_08000f8c"
        },
        "FUN_080001ac": {
            "renaming": {
                "FUN_080001ac": "set_param_if_not_set_080001ac",
                "param_1": "param",
                "*PTR_DAT_080001c4": "flag",
                "DAT_080001c8": "value",
                "PTR_FUN_080001cc": "func_ptr"
            },
            "code": "int* set_param_if_not_set_080001ac(int* param) {\\n  if (**PTR_DAT_080001c4 == \"\\0\") {\\n    if (DAT_080001c8 != 0) {\\n      param = PTR_FUN_080001cc;\\n    }\\n    **PTR_DAT_080001c4 = 1;\\n  }\\n  return param;\\n}",
            "called": [
                "FUN_080059f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ac",
            "calling": [],
            "imported": false,
            "current_name": "set_param_if_not_set_080001ac"
        },
        "FUN_080040e0": {
            "renaming": {
                "FUN_080040e0": "calculate_result_080040e0",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int calculate_result_080040e0(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e0",
            "calling": [
                "FUN_080056f8"
            ],
            "imported": false,
            "current_name": "calculate_result_080040e0"
        },
        "FUN_080048cc": {
            "renaming": {
                "FUN_080048cc": "fill_array_with_value_080048cc",
                "param_1": "array",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "end_of_array"
            },
            "code": "void fill_array_with_value_080048cc(char *array, char value, int length)\n{\n  char *end_of_array = array + length;\n  for (; array != end_of_array; array++) {\n    *array = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048cc",
            "calling": [
                "FUN_08005374",
                "FUN_08005400",
                "FUN_0800532c"
            ],
            "imported": false,
            "current_name": "fill_array_with_value_080048cc"
        },
        "FUN_080040e4": {
            "renaming": {
                "FUN_080040e4": "get_default_value_080040e4"
            },
            "code": "int get_default_value_080040e4(void)\n{\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e4",
            "calling": [
                "FUN_08005718"
            ],
            "imported": false,
            "current_name": "get_default_value_080040e4"
        },
        "FUN_08003506": {
            "renaming": {
                "FUN_08003506": "find_short_08003506",
                "param_1": "target",
                "param_2": "short_array",
                "*param_2": "*short_array"
            },
            "code": "int find_short_08003506(int target, short *short_array)\n{\n    while(true)\n    {\n        if (*(int *)(short_array + 2) == 0)\n        {\n            return -1;\n        }\n        if (*(int *)(short_array + 2) == target)\n        {\n            break;\n        }\n        short_array = short_array + 6;\n    }\n    return (int)*short_array;\n}",
            "called": [
                "FUN_08003506"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003506",
            "calling": [
                "FUN_08003506",
                "FUN_0800351e"
            ],
            "imported": false,
            "current_name": "find_short_08003506"
        },
        "FUN_080025e0": {
            "renaming": {
                "FUN_080025e0": "get_value_from_pointer_080025e0",
                "PTR_DAT_080025e8": "value_ptr"
            },
            "code": "int get_value_from_pointer_080025e0() {\n    int* PTR_DAT_080025e8 = PTR_DAT_080025e8;\n    int value = *PTR_DAT_080025e8;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e0",
            "calling": [
                "FUN_08000c8c",
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_080025e0"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "get_zero_080040e8"
            },
            "code": "int get_zero_080040e8(void) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_0800573c"
            ],
            "imported": false,
            "current_name": "get_zero_080040e8"
        },
        "FUN_08000a00": {
            "renaming": {
                "FUN_08000a00": "combine_and_shift_08000a00",
                "param_1": "data_pointer",
                "param_2": "result_pointer",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "uVar1": "combined_value",
                "uVar2": "shift_amount"
            },
            "code": "uint combine_and_shift_08000a00(uint8_t first_value, uint8_t second_value, uint32_t param_3, uint32_t param_4, uint32_t param_5) {\n    uint32_t combined_value = combine_values(first_value, second_value, param_3, param_4, param_5);\n    uint8_t shift_amount = (combined_value << 0x14) >> 0x18;\n    if (*(char *)(PTR_param_1 + 0xd) == -1) {\n        *(uint16_t *)(PTR_param_2 + shift_amount * 2) = (uint16_t)(1 << (combined_value & 0xf)) | *(uint16_t *)(PTR_param_2 + shift_amount * 2);\n    }\n    else {\n        *(uint16_t *)(PTR_param_2 + shift_amount * 2) = *(uint16_t *)(PTR_param_2 + shift_amount * 2) & ~(uint16_t)(1 << (combined_value & 0xf));\n    }\n    *(uint8_t *)(PTR_param_1 + 0x49) = 6;\n    calculate_crc_and_update_data(PTR_param_1);\n    return 8;\n}\n",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a00",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "combine_and_shift_08000a00"
        },
        "FUN_080047c0": {
            "renaming": {
                "FUN_080047c0": "execute_or_check_next_operation_080047c0",
                "param_1": "input",
                "iVar1": "bits_count"
            },
            "code": "void execute_or_check_next_operation_080047c0(int input)\n{\n  int bits_count;\n  if (*(int *)(input + 8) != 0) {\n    (**(code **)(input + 0xc))();\n    return;\n  }\n  execute_input_and_update_flags_08005760();\n  bits_count = find_number_of_bits_in_binary_representation_08004678();\n  if (*(int *)(PTR_DAT_080047ec + bits_count * 0x14 + 0xc) != 0) {\n    execute_or_check_next_operation_080047c0();\n  }\n  return;\n}",
            "called": [
                "FUN_08005760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047c0",
            "calling": [
                "FUN_080047d0"
            ],
            "imported": false,
            "current_name": "execute_or_check_next_operation_080047c0"
        },
        "FUN_08005374": {
            "renaming": {
                "FUN_08005374": "allocate_and_initialize_array_08005374",
                "param_1": "memory_block",
                "param_2": "array_length",
                "puVar1": "array_ptr",
                "iVar2": "array_size"
            },
            "code": "undefined4 * allocate_and_initialize_array_08005374(undefined4 memory_block, int array_length)\n{\n  undefined4 *array_ptr;\n  int array_size = (array_length - 1) * 0x68;\n  array_ptr = (undefined4 *)allocate_memory_block_08004978(memory_block, array_size + 0x74);\n  if (array_ptr != (undefined4 *)0x0) {\n    *array_ptr = 0;\n    array_ptr[1] = array_length;\n    array_ptr[2] = array_ptr + 3;\n    fill_array_with_value_080048cc(array_ptr + 3, 0, array_size + 0x68);\n  }\n  return array_ptr;\n}",
            "called": [
                "FUN_080048cc",
                "FUN_08004978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005374",
            "calling": [
                "FUN_08005400"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_array_08005374"
        },
        "FUN_08004d9c": {
            "renaming": {
                "FUN_08004d9c": "FUNC_08004d9c"
            },
            "code": "\nuint FUNC_08004d9c(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_08004f56;\n          if (bVar1 != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\nLAB_08004ee6:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_08004dcc;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_08004dec;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08004dec:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_08004ec2;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08004e2c:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08004e52:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_08004e60;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08004e60:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            puVar5 = PTR_s_0123456789abcdef_08004fd4;\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08004e52;\n          if (bVar1 == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08004e2c;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = find_byte_in_buffer_08000230(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_08004f42;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_08004f42:\n    *puVar3 = uVar6;\n  }\nLAB_08004f56:\n  param_2[4] = 0;\nLAB_08004ec2:\n  iVar2 = count_chars_08004cb0(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_08004ed6:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_08004ed6;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08004cb0",
                "FUN_08000230"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004d9c",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "FUNC_08004d9c"
        },
        "FUN_08003750": {
            "renaming": {
                "FUN_08003750": "subtract_four_from_input_08003750",
                "param_1": "input_num",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int subtract_four_from_input_08003750(int input_num)\n{\n  int result = input_num - 4;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003750",
            "calling": [
                "FUN_0800376e",
                "FUN_08003754"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_08003750"
        },
        "FUN_080014ec": {
            "renaming": {
                "FUN_080014ec": "validate_inputs_080014ec",
                "param_1": "input_ptr",
                "param_2": "input_value",
                "param_3": "input_length",
                "param_4": "output_ptr",
                "uVar1": "validation_result",
                "puVar2": "ptr_1"
            },
            "code": "int validate_inputs_080014ec(uint **input_ptr, uint *input_value, int input_length, uint *output_ptr) {\n    int validation_result;\n    uint *ptr_1;\n    if (*(char *)((int)input_ptr + 0x3d) == '(') {\n        if (input_value == NULL) {\n            validation_result = 1;\n        }\n        else if (input_length == 0) {\n            validation_result = 1;\n        }\n        else if (*(char *)(input_ptr + 0xf) == '\\x01') {\n            validation_result = 2;\n        }\n        else {\n            *(undefined *)(input_ptr + 0xf) = 1;\n            ptr_1 = *input_ptr;\n            if ((*ptr_1 & 1) == 0) {\n                *ptr_1 = *ptr_1 | 1;\n            }\n            **input_ptr = **input_ptr & 0xfffff7ff;\n            *(undefined *)((int)input_ptr + 0x3d) = 0x2a;\n            *(undefined *)((int)input_ptr + 0x3e) = 0x20;\n            validation_result = 0;\n            input_ptr[0x10] = NULL;\n            input_ptr[9] = input_value;\n            *(short *)((int)input_ptr + 0x2a) = (short)input_length;\n            input_ptr[0xb] = output_ptr;\n            *(undefined2 *)(input_ptr + 10) = *(undefined2 *)((int)input_ptr + 0x2a);\n            *(undefined *)(input_ptr + 0xf) = 0;\n            (*input_ptr)[1] = (*input_ptr)[1] | 0x700;\n        }\n    }\n    else {\n        validation_result = 2;\n    }\n    return validation_result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ec",
            "calling": [
                "FUN_08003880"
            ],
            "imported": false,
            "current_name": "validate_inputs_080014ec"
        },
        "FUN_080048dc": {
            "renaming": {
                "FUN_080048dc": "add_to_linked_list_080048dc",
                "param_1": "head",
                "param_2": "data",
                "param_3": "size",
                "param_4": "unused",
                "puVar1": "pointer",
                "piVar2": "temp",
                "extraout_r1": "temp_pointer",
                "ppiVar3": "current_node_pointer",
                "ppiVar4": "next_node_pointer",
                "ppiVar5": "first_node_pointer",
                "ppiVar6": "last_node_pointer",
                "ppiVar7": "current_node",
                "bVar8": "is_new_head"
            },
            "code": "void add_to_linked_list_080048dc(int *head, int data, int size, int unused) {\n    int **current_node;\n    int **previous_node;\n    int **first_node;\n    int **last_node;\n    int **next_node;\n    bool is_new_head;\n    \n    if (size == 0) {\n        return;\n    }\n    \n    current_node = (int **)(size + -4);\n    if (*(int *)(size + -4) < 0) {\n        current_node = (int **)((int)current_node + *(int *)(size + -4));\n    }\n    \n    do_nothing_0800557c();\n    first_node = *(int ***)PTR_DAT_08004974;\n    if (first_node == (int **)0x0) {\n        current_node[1] = (int *)0x0;\n        *(int ***)PTR_DAT_08004974 = current_node;\n        previous_node = (int **)head;\n    }\n    else if (current_node < first_node) {\n        previous_node = (int **)*current_node;\n        next_node = (int **)((int)current_node + (int)previous_node);\n        is_new_head = first_node == next_node;\n        if (is_new_head) {\n            next_node = (int **)*first_node;\n            first_node = (int **)first_node[1];\n        }\n        current_node[1] = (int *)first_node;\n        if (is_new_head) {\n            next_node = (int **)((int)next_node + (int)previous_node);\n            *current_node = (int *)next_node;\n        }\n        *(int ***)PTR_DAT_08004974 = current_node;\n    }\n    else {\n        do {\n            last_node = first_node;\n            next_node = (int **)last_node[1];\n            if (next_node == (int **)0x0) break;\n            first_node = next_node;\n        } while (next_node <= current_node);\n        previous_node = (int **)*last_node;\n        if ((int **)((int)last_node + (int)previous_node) == current_node) {\n            previous_node = (int **)((int)previous_node + (int)*current_node);\n            *last_node = (int *)previous_node;\n            if (next_node == (int **)((int)last_node + (int)previous_node)) {\n                piVar2 = *next_node;\n                next_node = (int **)next_node[1];\n                last_node[1] = (int *)next_node;\n                previous_node = (int **)((int)previous_node + (int)piVar2);\n                *last_node = (int *)previous_node;\n            }\n        }\n        else if (current_node < (int **)((int)last_node + (int)previous_node)) {\n            *head = 0xc;\n        }\n        else {\n            previous_node = (int **)((int)current_node + (int)*current_node);\n            is_new_head = next_node == previous_node;\n            if (is_new_head) {\n                previous_node = (int **)*next_node;\n                next_node = (int **)next_node[1];\n            }\n            current_node[1] = (int *)next_node;\n            if (is_new_head) {\n                previous_node = (int **)((int)previous_node + (int)*current_node);\n                *current_node = (int *)previous_node;\n            }\n            last_node[1] = (int *)current_node;\n        }\n    }\n    do_nothing_0800557e(head, previous_node, next_node, unused);\n    return;\n}",
            "called": [
                "FUN_0800557c",
                "FUN_0800557e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048dc",
            "calling": [
                "FUN_080050d0",
                "FUN_080051ac"
            ],
            "imported": false,
            "current_name": "add_to_linked_list_080048dc"
        },
        "FUN_08003754": {
            "renaming": {
                "FUN_08003754": "execute_callback_if_flag_set_08003754",
                "param_1": "input",
                "iVar1": "callback_address",
                "subtract_four_from_input_08003750": "subtract_four_from_input",
                "callback": "callback",
                "flag": "flag"
            },
            "code": "void execute_callback_if_flag_set_08003754(int input)\n{\n    int callback_address = subtract_four_from_input();\n    code *callback = *(code **)(callback_address + 0x48);\n    char flag = *(char *)(input + 0x18);\n    if (callback != NULL && flag == 0x01)\n    {\n        (*callback)(callback_address, 0);\n    }\n    return;\n}",
            "called": [
                "FUN_08003750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003754",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "execute_callback_if_flag_set_08003754"
        },
        "FUN_08001578": {
            "renaming": {
                "FUN_08001578": "set_bit_and_flags_08001578",
                "param_1": "data_ptr",
                "puVar1": "data",
                "DAT_08004a90": "data[15]",
                "PTR_DAT_08004a94": "data[0]",
                "PTR_DAT_08004a98": "**data_ptr",
                "PTR_DAT_08004a9c": "(*data_ptr)[1]"
            },
            "code": "int set_bit_and_flags_08001578(uint PTR_DAT_08004a98) {\n  uint *data = *data_ptr;\n  if (DAT_08004a90 != ' ') {\n    return 2;\n  }\n  DAT_08004a90 = '(';\n  if ((PTR_DAT_08004a94 & 1) == 0) {\n    PTR_DAT_08004a94 |= 1;\n  }\n  PTR_DAT_08004a98 |= 0x400;\n  PTR_DAT_08004a9c |= 0x300;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001578",
            "calling": [
                "FUN_08003900",
                "FUN_080038d0"
            ],
            "imported": false,
            "current_name": "set_bit_and_flags_08001578"
        },
        "FUN_08004844": {
            "renaming": {
                "FUN_08004844": "convert_uint64_to_uint128_if_flag_set_08004844",
                "param_1": "flag",
                "param_2": "value",
                "DAT_0800485c": "unknown_flag",
                "CONCAT44": "combine_values"
            },
            "code": "unsigned long long convert_uint64_to_uint128_if_flag_set_08004844(unsigned int flag, uint64_t value) {\n  if (flag != 0) {\n    return ((unsigned long long)value << 64) | 2;\n  }\n  return (unsigned long long)value << 64;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004844",
            "calling": [
                "FUN_080047fe"
            ],
            "imported": false,
            "current_name": "convert_uint64_to_uint128_if_flag_set_08004844"
        },
        "FUN_0800318c": {
            "renaming": {
                "FUN_0800318c": "get_datum_from_index_0800318c",
                "param_1": "index",
                "DAT_080031d0": "data_zero",
                "DAT_080031f8": "data_one",
                "DAT_080031d4": "data_two",
                "DAT_080031d8": "data_three",
                "DAT_080031dc": "data_four",
                "DAT_080031e0": "data_five",
                "DAT_080031e4": "data_six",
                "DAT_080031e8": "data_seven",
                "DAT_080031ec": "data_eight",
                "DAT_080031f0": "data_nine",
                "DAT_080031f4": "data_ten"
            },
            "code": "undefined4 get_datum_from_index_0800318c(int index) {\n  switch(index) {\n    case 0:\n      return DAT_080031d0;\n    case 1:\n      return DAT_080031f8;\n    case 2:\n      return DAT_080031d4;\n    case 3:\n      return DAT_080031d8;\n    case 4:\n      return DAT_080031dc;\n    case 5:\n      return DAT_080031e0;\n    case 6:\n      return DAT_080031e4;\n    case 7:\n      return DAT_080031e8;\n    case 8:\n      return DAT_080031ec;\n    case 9:\n      return DAT_080031f0;\n    case 10:\n      return DAT_080031f4;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800318c",
            "calling": [
                "FUN_080041bc"
            ],
            "imported": false,
            "current_name": "get_datum_from_index_0800318c"
        },
        "FUN_080047d0": {
            "renaming": {
                "FUN_080047d0": "checkBinaryRepresentation_080047d0",
                "iVar1": "numberOfBits",
                "find_number_of_bits_in_binary_representation_08004678": "findNumberOfBitsInBinaryRepresentation",
                "PTR_DAT_080047ec": "binaryRepresentationData",
                "execute_or_check_next_operation_080047c0": "executeOrCheckNextOperation"
            },
            "code": "void checkBinaryRepresentation_080047d0(void)\n{\n  int numberOfBits = findNumberOfBitsInBinaryRepresentation();\n  if (*(int *)(PTR_DAT_080047ec + numberOfBits * 0x14 + 0xc) != 0) {\n    executeOrCheckNextOperation();\n  }\n  return;\n}",
            "called": [
                "FUN_08004678",
                "FUN_080047c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047d0",
            "calling": [
                "FUN_080011a4"
            ],
            "imported": false,
            "current_name": "checkBinaryRepresentation_080047d0"
        },
        "FUN_080040f8": {
            "renaming": {
                "FUN_080040f8": "infinite_loop_080040f8"
            },
            "code": "void infinite_loop_080040f8(void)\n{\n  while(true) {\n    // do nothing\n  }\n}",
            "called": [
                "FUN_080040f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040f8",
            "calling": [
                "FUN_080040f8",
                "FUN_080051ac"
            ],
            "imported": false,
            "current_name": "infinite_loop_080040f8"
        },
        "FUN_0800500c": {
            "renaming": {
                "FUN_0800500c": "calculate_offset_and_set_value_0800500c",
                "param_1": "result",
                "param_2": "input",
                "puVar1": "ptr",
                "iVar2": "offset"
            },
            "code": "void calculate_offset_and_set_value_0800500c(int *result, undefined4 input) {\n    undefined *ptr = PTR_DAT_08005028;\n    *(undefined4 *)PTR_DAT_08005028 = 0;\n    int offset = calculate_offset_08004094(input);\n    if (offset == -1 && *(int *)ptr != 0) {\n        *result = *(int *)ptr;\n    }\n    return;\n}",
            "called": [
                "FUN_08004094"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800500c",
            "calling": [
                "FUN_08004978"
            ],
            "imported": false,
            "current_name": "calculate_offset_and_set_value_0800500c"
        },
        "FUN_080023b4": {
            "renaming": {
                "FUN_080023b4": "calculate_result_080023b4",
                "in_r3": "parameter_1",
                "DAT_0800247c": "data_pointer",
                "DAT_08002484": "result_1",
                "DAT_08002480": "result_2",
                "uVar1": "mask",
                "uVar2": "value",
                "get_concatenated_values_080002d0": "get_concatenated_values",
                "concatenated_value": "result",
                "product": "value_product",
                "carry": "value_carry",
                "divisor": "value_divisor"
            },
            "code": "uint calculate_result_080023b4(void)\n{\n  uint concatenated_value;\n  uint result;\n  uint mask = *(uint *)(DAT_0800247c + 8) & 0xc;\n  if (mask == 4) {\n    return DAT_08002484;\n  }\n  if (mask != 8) {\n    return DAT_08002480;\n  }\n  uint value = *(uint *)(DAT_0800247c + 4) & 0x3f;\n  if ((*(uint *)(DAT_0800247c + 4) & 0x400000) == 0) {\n    uint product = value * 16000000;\n    uint carry = (((uint)(value * 0x20 < value) * -0x3f - (uint)(value * 0x7c0 < value * 0x1f)) * 8 + (uint)CARRY4(value * 0x3d08, value)) * 0x400 | value * 0x3d09 >> 0x16;\n    concatenated_value = get_concatenated_values_080002d0(product, carry, value, in_r3);\n  }\n  else {\n    uint product = value * 8000000;\n    uint carry = (((uint)(value * 0x20 < value) * -0x3f - (uint)(value * 0x7c0 < value * 0x1f)) * 8 + (uint)CARRY4(value * 0x3d08, value)) * 0x200;\n    concatenated_value = get_concatenated_values_080002d0(product, carry, value, in_r3);\n  }\n  uint divisor = ((((uint)(*(int *)(DAT_0800247c + 4) << 0xe) >> 0x1e) + 1) * 2);\n  result = concatenated_value / divisor;\n  return result;\n}",
            "called": [
                "FUN_080002d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080023b4",
            "calling": [
                "FUN_08002488"
            ],
            "imported": false,
            "current_name": "calculate_result_080023b4"
        },
        "FUN_080011a4": {
            "renaming": {
                "FUN_080011a4": "updateDataIfBitSet_080011a4",
                "param_1": "bitMask",
                "*(uint *)(DAT_080011bc + 0x14)": "*dataPtr",
                "checkBinaryRepresentation_080047d0": "checkBinaryRepresentation"
            },
            "code": "void updateDataIfBitSet_080011a4(uint bitMask) {\n  uint* dataPtr = (uint*)(DAT_080011bc + 0x14);\n  if ((*(uint *)(DAT_080011bc + 0x14) & bitMask) != 0) {\n    *(uint *)(DAT_080011bc + 0x14) = bitMask;\n    checkBinaryRepresentation();\n  }\n  return;\n}",
            "called": [
                "FUN_080047d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011a4",
            "calling": [],
            "imported": false,
            "current_name": "updateDataIfBitSet_080011a4"
        },
        "FUN_08001e68": {
            "renaming": {
                "FUN_08001e68": "check_and_set_flags_08001e68",
                "param_1": "data",
                "puVar2": "ptr",
                "uVar3": "flag1",
                "uVar4": "flag2",
                "DAT_08001f38": "FLAG_1_MASK",
                "0x100": "FLAG_2_MASK",
                "0x10200": "FLAG_2_BIT",
                "0xfffffdff": "FLAG_2_CLEAR",
                "0x10400": "FLAG_3_MASK",
                "0x21": "FLAG_3_VALUE",
                "0xfffffbff": "FLAG_3_CLEAR",
                "0x10800": "FLAG_4_MASK",
                "0xfffff7ff": "FLAG_4_CLEAR",
                "0x10": "FLAG_REGISTER",
                "check_and_execute_conditions_08001684": "check_and_execute_conditions",
                "check_and_execute_08001ab0": "check_and_execute"
            },
            "code": "void check_and_set_flags_08001e68(uint **data)\n{\n    uint *ptr = *data;\n    uint flag1 = ptr[5];\n    uint flag2 = ptr[1];\n    \n    if (((flag1 & DAT_08001f38) != 0) && ((flag2 & 0x100) != 0)) {\n        data[16] = (uint *)((uint)data[16] | FLAG_1_BIT);\n        ptr[5] = FLAG_1_CLEAR;\n    }\n    \n    if (((flag1 & FLAG_2_MASK) != 0) && ((flag2 & 0x100) != 0)) {\n        data[16] = (uint *)((uint)data[16] | FLAG_2_BIT);\n        (*data)[5] = FLAG_2_CLEAR;\n    }\n    \n    if (((flag1 & FLAG_3_MASK) != 0) && ((flag2 & 0x100) != 0)) {\n        char c = *(char *)((int)data + 0x3d);\n        if (((*(char *)((int)data + 0x3e) == ' ') && (*(short *)((int)data + 0x2a) == 0)) && (((c == '!' || (c == ')')) || ((c == '(' && (data[0xc] == (uint *)0x21)))))) {\n            check_and_execute_conditions(data);\n        }\n        else {\n            data[16] = (uint *)((uint)data[16] | FLAG_3_BIT);\n            if (*(char *)((int)data + 0x3e) == '\\x10') {\n                **data = **data | 0x200;\n            }\n            (*data)[5] = FLAG_3_CLEAR;\n        }\n    }\n    \n    if (((flag1 & FLAG_4_MASK) != 0) && ((flag2 & 0x100) != 0)) {\n        data[16] = (uint *)((uint)data[16] | FLAG_4_BIT);\n        (*data)[5] = FLAG_4_CLEAR;\n    }\n    \n    if (data[16] != (uint *)0x0) {\n        check_and_execute(data);\n    }\n    \n    return;\n}",
            "called": [
                "FUN_08001684",
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e68",
            "calling": [],
            "imported": false,
            "current_name": "check_and_set_flags_08001e68"
        },
        "FUN_080019a0": {
            "renaming": {
                "FUN_080019a0": "process_data_080019a0",
                "param_1": "data_ptr",
                "puVar1": "data_ptr_9",
                "*(short *)((int)param_1 + 0x2a)": "data_length",
                "(*param_1)[1]": "data[1]",
                "(*param_1)[4]": "data[4]",
                "*(char *)puVar1": "*(char *)data_ptr_9",
                "*(short *)((int)param_1 + 0x2a) + -1": "data_length -= 1",
                "(int)param_1[0xb] - 1U": "(int)data_ptr[0xb] - 1U",
                "**param_1": "*data",
                "*(undefined *)((int)param_1 + 0x3d)": "*(undefined *)((int)data_ptr + 0x3d)",
                "*(char *)((int)param_1 + 0x3e)": "*(char *)((int)data_ptr + 0x3e)"
            },
            "code": "int process_data_080019a0(uint **data_ptr) {\n  uint *data = *data_ptr;\n  short data_length = *(short *)((int)data_ptr + 0x2a);\n  uint *data_ptr_9 = data_ptr[9];\n\n  if (data_length == 4) {\n    data[1] &= 0xfffffbff;\n    data_ptr[9] = (uint *)((int)data_ptr_9 + 1);\n    *(char *)data_ptr_9 = (char)data[4];\n    data_length -= 1;\n  }\n  else if (data_length == 3) {\n    data[1] &= 0xfffffbff;\n    *data = *data & 0xfffffbff;\n    data_ptr[9] = (uint *)((int)data_ptr_9 + 1);\n    *(char *)data_ptr_9 = (char)data[4];\n    data_length -= 1;\n  }\n  else if (data_length == 2) {\n    if ((int)data_ptr[0xb] - 1U < 2) {\n      *data = *data & 0xfffffbff;\n      *data = *data | 0x100;\n    }\n    else {\n      *data = *data | 0x200;\n    }\n    data_ptr[9] = (uint *)((int)data_ptr_9 + 1);\n    *(char *)data_ptr_9 = (char)data[4];\n    data_length -= 1;\n    data_ptr_9 = data_ptr[9];\n    data_ptr[9] = (uint *)((int)data_ptr_9 + 1);\n    *(char *)data_ptr_9 = (char)data[4];\n    data_length -= 1;\n    data[1] &= 0xfffffcff;\n    *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n    data_ptr[0xc] = (uint *)0x0;\n    if (*(char *)((int)data_ptr + 0x3e) == '@') {\n      *(undefined *)((int)data_ptr + 0x3e) = 0;\n      do_nothing_08001902();\n    }\n    else {\n      *(undefined *)((int)data_ptr + 0x3e) = 0;\n      do_nothing_080015b8();\n    }\n  }\n  else {\n    data_ptr[9] = (uint *)((int)data_ptr_9 + 1);\n    *(char *)data_ptr_9 = (char)data[4];\n    data_length -= 1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08001902",
                "FUN_080015b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019a0",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_data_080019a0"
        },
        "FUN_08003f24": {
            "renaming": {
                "FUN_08003f24": "execute_parameter_function_if_index_less_than_10_08003f24",
                "uVar1": "parameter_index",
                "find_param_index_08003f00": "find_parameter_index",
                "PTR_DAT_08003f40": "PTR_FUNCTION_ARRAY",
                "PTR_DAT_08003f44": "PTR_PARAMETER_ARRAY"
            },
            "code": "void execute_parameter_function_if_index_less_than_10_08003f24(void)\n{\n  uint parameter_index = find_parameter_index();\n  if (parameter_index < 10) {\n    (**(code **)(PTR_DAT_08003f40 + parameter_index * 4))(*(undefined4 *)(PTR_DAT_08003f44 + parameter_index * 4));\n  }\n  return;\n}",
            "called": [
                "FUN_08003f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f24",
            "calling": [
                "FUN_08002f66"
            ],
            "imported": false,
            "current_name": "execute_parameter_function_if_index_less_than_10_08003f24"
        },
        "FUN_080046b4": {
            "renaming": {
                "FUN_080046b4": "initialize_data_080046b4",
                "param_1": "count",
                "param_2": "value",
                "puVar1": "data"
            },
            "code": "void initialize_data_080046b4(int count, int value, undefined4 param_3, undefined4 param_4)\n{\n  undefined *data = PTR_DAT_08004754;\n  if (count != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    data[0] = 6;\n    *(undefined4 *)(data + 0xc) = 0;\n    data[0x14] = 7;\n    *(undefined4 *)(data + 0x20) = 0;\n    data[0x28] = 8;\n    *(undefined4 *)(data + 0x34) = 0;\n    data[0x3c] = 9;\n    *(undefined4 *)(data + 0x48) = 0;\n    data[0x50] = 10;\n    *(undefined4 *)(data + 0x5c) = 0;\n    data[100] = 0x17;\n    *(undefined4 *)(data + 0x70) = 0;\n    data[0x78] = 0x17;\n    *(undefined4 *)(data + 0x84) = 0;\n    data[0x8c] = 0x17;\n    *(undefined4 *)(data + 0x98) = 0;\n    data[0xa0] = 0x17;\n    *(undefined4 *)(data + 0xac) = 0;\n    data[0xb4] = 0x17;\n    *(undefined4 *)(data + 0xc0) = 0;\n    data[200] = 0x28;\n    *(undefined4 *)(data + 0xd4) = 0;\n    data[0xdc] = 0x28;\n    *(undefined4 *)(data + 0xe8) = 0;\n    data[0xf0] = 0x28;\n    *(undefined4 *)(data + 0xfc) = 0;\n    data[0x104] = 0x28;\n    *(undefined4 *)(data + 0x110) = 0;\n    data[0x118] = 0x28;\n    *(undefined4 *)(data + 0x124) = 0;\n    data[300] = 0x28;\n    *(undefined4 *)(data + 0x138) = 0;\n    convert_uint64_to_uint128_if_flag_set_080047fe(0, PTR_LAB_0800468c_1_0800475c, PTR_DAT_08004758, data, param_4);\n}\n",
            "called": [
                "FUN_080047fe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b4",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_080046b4"
        },
        "FUN_0800160c": {
            "renaming": {
                "FUN_0800160c": "do_nothing_0800160c"
            },
            "code": "\nvoid do_nothing_0800160c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160c",
            "calling": [
                "FUN_08001bfc",
                "FUN_0800160e"
            ],
            "imported": false,
            "current_name": "do_nothing_0800160c"
        },
        "FUN_0800160e": {
            "renaming": {
                "FUN_0800160e": "process_input_0800160e",
                "param_1": "input",
                "cVar1": "last_char",
                "puVar2": "current_char_ptr"
            },
            "code": "int process_input_0800160e(int *input)\n{\n    char last_char = *(char *)((int)input + 0x3d);\n    if (*(short *)((int)input + 0x2a) != 0)\n    {\n        undefined *current_char_ptr = (undefined *)input[9];\n        input[9] = (int)(current_char_ptr + 1);\n        *current_char_ptr = (char)*(undefined4 *)(*input + 0x10);\n        *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        if ((*(short *)((int)input + 0x2a) == 0) && (last_char == '*'))\n        {\n            *(uint *)(*input + 4) = *(uint *)(*input + 4) & 0xfffffbff;\n            input[0xc] = 0x22;\n            *(undefined *)((int)input + 0x3d) = 0x28;\n            do_nothing_0800160c();\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_0800160c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160e",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_0800160e"
        },
        "FUN_0800293e": {
            "renaming": {
                "FUN_0800293e": "do_nothing_0800293e"
            },
            "code": "\nvoid do_nothing_0800293e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293e",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293e"
        },
        "FUN_08000e18": {
            "renaming": {
                "FUN_08000e18": "add_byte_to_uint_and_store_08000e18",
                "PTR_DAT_08000e28": "uint_ptr",
                "PTR_DAT_08000e2c": "byte_ptr",
                "uint": "uint_val",
                "byte": "byte_val"
            },
            "code": "void add_byte_to_uint_and_store_08000e18(){\n    uint* PTR_DAT_08000e28 = (uint*) PTR_DAT_08000e28;\n    byte* PTR_DAT_08000e2c = (byte*) PTR_DAT_08000e2c;\n    uint uint_val = *PTR_DAT_08000e28;\n    byte byte_val = *PTR_DAT_08000e2c;\n    uint_val += byte_val;\n    *PTR_DAT_08000e28 = uint_val;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e18",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "add_byte_to_uint_and_store_08000e18"
        },
        "FUN_08003486": {
            "renaming": {
                "FUN_08003486": "set_flag_and_update_data_08003486",
                "param_1": "flag",
                "param_2": "param_2",
                "param_3": "param_3",
                "uVar1": "flag_value",
                "local_24": "bit_mask",
                "local_20": "local_2",
                "local_1c": "local_3",
                "set_flag_080031fc": "set_flag_value",
                "update_data_08000fb4": "update_data"
            },
            "code": "void set_flag_and_update_data_08003486(uint32_t flag, uint32_t param_2, uint32_t param_3) {\n  uint32_t flag_value = set_flag_value(flag);\n  uint16_t bit_mask = 1 << (flag & 0xf) & 0xffff;\n  uint32_t local_2 = param_2;\n  uint32_t local_3 = param_3;\n  update_data(flag_value, &bit_mask);\n  return;\n}",
            "called": [
                "FUN_08000fb4",
                "FUN_080031fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003486",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "set_flag_and_update_data_08003486"
        },
        "FUN_08005662": {
            "renaming": {
                "FUN_08005662": "set_value_if_not_negative_08005662",
                "param_1": "default_value",
                "param_2": "value_ptr",
                "iVar1": "new_value",
                "uVar2": "flag",
                "bVar3": "is_negative"
            },
            "code": "void set_value_if_not_negative_08005662(int default_value, int* value_ptr)\n{\n  int new_value = get_default_value_and_set_if_not_negative(default_value, (int)*(short *)(value_ptr + 0xe));\n  bool is_negative = new_value == -1;\n  ushort flag = *(ushort *)(value_ptr + 0xc);\n  if (is_negative) {\n    flag &= 0xefff;\n  }\n  else {\n    *(int *)(value_ptr + 0x54) = new_value;\n    flag |= 0x1000;\n  }\n  *(ushort *)(value_ptr + 0xc) = flag;\n}\n",
            "called": [
                "FUN_08005718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005662",
            "calling": [],
            "imported": false,
            "current_name": "set_value_if_not_negative_08005662"
        },
        "FUN_080042ac": {
            "renaming": {
                "FUN_080042ac": "validate_and_update_combination_080042ac",
                "param_1": "combination",
                "iVar1": "validation_result",
                "uVar2": "new_index",
                "local_9": "new_value"
            },
            "code": "void validate_and_update_combination_080042ac(int combination)\n{\n  int validation_result;\n  ushort new_index;\n  undefined new_value;\n  validation_result = validate_combination(combination, &new_value);\n  if ((validation_result == 0) && (new_index = *(short *)(combination + 100) + 1U & 0x3f, new_index != *(ushort *)(combination + 0x66))) {\n    *(undefined *)(*(int *)(combination + 0x60) + (uint)*(ushort *)(combination + 100)) = new_value;\n    *(ushort *)(combination + 100) = new_index;\n  }\n  return;\n}",
            "called": [
                "FUN_08003e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042ac",
            "calling": [],
            "imported": false,
            "current_name": "validate_and_update_combination_080042ac"
        },
        "FUN_08001864": {
            "renaming": {
                "FUN_08001864": "process_input_08001864",
                "param_1": "input",
                "puVar1": "flag_ptr",
                "PTR_DAT_08003d2a": "count_ptr",
                "PTR_DAT_08003d3d": "status_ptr",
                "PTR_DAT_08003d3e": "data_ptr",
                "PTR_DAT_08003d54": "temp_ptr"
            },
            "code": "uint32_t process_input_08001864(uint32_t **input)\n{\n  uint32_t *flag_ptr;\n  uint32_t *PTR_DAT_08003d2a;\n  uint32_t *PTR_DAT_08003d3d;\n  uint32_t *PTR_DAT_08003d3e;\n  uint32_t *PTR_DAT_08003d54;\n  \n  flag_ptr = input[11];\n  if (*(char *)((int)input + 0x3d) == '!') {\n    if (*(int16_t *)((int)input + 0x2a) == 0) {\n      if (((flag_ptr == (uint32_t *)0x4) || (flag_ptr == (uint32_t *)0x8)) || (flag_ptr == (uint32_t *)0xffff0000)) {\n        (*input)[1] &= 0xfffff8ff;\n        **input |= 0x200;\n        input[12] = (uint32_t *)0x0;\n        *(char *)((int)input + 0x3d) = 0x20;\n        if (*(char *)((int)input + 0x3e) == '@') {\n          *(char *)((int)input + 0x3e) = 0;\n          do_nothing_08001718();\n        }\n        else {\n          *(char *)((int)input + 0x3e) = 0;\n          do_nothing_080015b6();\n        }\n      }\n      else {\n        (*input)[1] &= 0xfffff8ff;\n        input[12] = (uint32_t *)0x11;\n        *(char *)((int)input + 0x3e) = 0;\n        *(char *)((int)input + 0x3d) = 0x20;\n        do_nothing_080015b6();\n      }\n    }\n    else {\n      PTR_DAT_08003d54 = input[9];\n      input[9] = (uint32_t *)((int)PTR_DAT_08003d54 + 1);\n      (*input)[4] = (uint32_t)*(char *)PTR_DAT_08003d54;\n      *(int16_t *)((int)input + 0x2a) -= 1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001864",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_08001864"
        },
        "FUN_08000f2c": {
            "renaming": {
                "FUN_08000f2c": "set_flag_08000f2c",
                "param_1": "flag_value",
                "DAT_08000f48": "flag_ptr"
            },
            "code": "void set_flag_08000f2c(int flag_value)\n{\n  if (flag_value != 4) {\n    *DAT_08000f48 = *DAT_08000f48 & 0xfffffffb;\n    return;\n  }\n  *DAT_08000f48 = *DAT_08000f48 | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f2c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "set_flag_08000f2c"
        },
        "FUN_08000ec4": {
            "renaming": {
                "FUN_08000ec4": "set_bit_at_index_08000ec4",
                "param_1": "index",
                "DAT_08000edc": "data_ptr"
            },
            "code": "void set_bit_at_index_08000ec4(uint index) {\n  if (index >= 0) {\n    int* DAT_08000edc = (int*)(DAT_08000edc + (index >> 5) * 4);\n    int bit_to_set = 1 << (index & 0x1f);\n    *DAT_08000edc = bit_to_set;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ec4",
            "calling": [
                "FUN_08003e54",
                "FUN_08003eac"
            ],
            "imported": false,
            "current_name": "set_bit_at_index_08000ec4"
        },
        "FUN_08004338": {
            "renaming": {
                "FUN_08004338": "calculate_offset_if_data_available_08004338",
                "DAT_0800435c": "data_available",
                "PTR_DAT_08004360": "data_pointer",
                "calculate_offset_08004240": "calculate_offset"
            },
            "code": "void calculate_offset_if_data_available_08004338(void)\n{\n  if (DAT_0800435c != 0) {\n    calculate_offset(PTR_DAT_08004360);\n  }\n  return;\n}",
            "called": [
                "FUN_08004240"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004338",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "calculate_offset_if_data_available_08004338"
        },
        "FUN_080005e0": {
            "renaming": {
                "FUN_080005e0": "send_interrupt_signal_080005e0",
                "PTR_": "<unchanged>",
                "DAT_": "<unchanged>"
            },
            "code": "void send_interrupt_signal_080005e0(void)\n{\n  software_interrupt(SYSTEM_CALL_INTERRUPT);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "FUN_080005e4"
            ],
            "imported": false,
            "current_name": "send_interrupt_signal_080005e0"
        },
        "FUN_080005e4": {
            "renaming": {
                "FUN_080005e4": "send_interrupt_signal_if_not_sent_080005e4",
                "param_1": "signal",
                "param_2": "param_1",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "result"
            },
            "code": "int send_interrupt_signal_if_not_sent_080005e4(int signal, int param_1, int param_3, int unused_param, int param_4) {\n  int is_interrupt_sent = *(int *)PTR_DAT_080005fc;\n  if (is_interrupt_sent != 0) {\n    return 0;\n  }\n  int result = send_interrupt_signal_080005e0(signal, param_1, param_3, unused_param, param_4);\n  return result;\n}",
            "called": [
                "FUN_080005e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e4",
            "calling": [
                "FUN_08000c4c"
            ],
            "imported": false,
            "current_name": "send_interrupt_signal_if_not_sent_080005e4"
        },
        "FUN_0800076c": {
            "renaming": {
                "FUN_0800076c": "calculate_crc_and_update_data_0800076c",
                "param_1": "data",
                "param_2": "data_length",
                "param_3": "starting_index",
                "param_4": "crc_start_index",
                "uVar1": "crc",
                "iVar2": "result",
                "uVar3": "crc_index",
                "calculate_crc16_ccitt_08000728": "calculate_crc16_ccitt",
                "decode_and_update_data_080041bc": "decode_and_update_data",
                "get_value_and_return_08004204": "get_value_and_return"
            },
            "code": "void calculate_crc_and_update_data_0800076c(int **data, int data_length, int starting_index, int crc_start_index)\n{\n    uint8_t crc_index = (uint8_t)*(byte *)((int)data + 0x49);\n    uint16_t crc = calculate_crc16_ccitt(data, crc_index, starting_index, crc_start_index, crc_start_index);\n    *(char *)((int)data + crc_index + 9) = (char)((ushort)crc >> 8);\n    crc_index = crc_index + 1 & 0xff;\n    *(char *)((int)data + crc_index + 9) = (char)crc;\n    *(char *)((int)data + 0x49) = (char)crc_index + '\\x01';\n    if (1 < *(byte *)((int)data + 6)) {\n        decode_and_update_data(*(byte *)((int)data + 6),1);\n    }\n    if (*(byte *)((int)data + 5) < 4) {\n        (**(code **)(**data + 4))(*data,(int)data + 9,*(undefined *)((int)data + 0x49));\n    }\n    if (1 < *(byte *)((int)data + 6)) {\n        decode_and_update_data(*(byte *)((int)data + 6),0);\n    }\n    if (*(byte *)((int)data + 5) < 4) {\n        do {\n            int result = (**(code **)(**data + 0xc))();\n        } while (-1 < result);\n    }\n    *(undefined *)((int)data + 0x49) = 0;\n    int value = get_value_and_return();\n    data[0x17] = (int *)(value + (uint)*(ushort *)((int)data + 0x56));\n    *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n    return;\n}",
            "called": [
                "FUN_08000728",
                "FUN_08004204",
                "FUN_080041bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800076c",
            "calling": [
                "FUN_08000a7a",
                "FUN_080008e2",
                "FUN_08000a4e",
                "FUN_08000b04",
                "FUN_08000b54",
                "FUN_08000a00",
                "FUN_08000998"
            ],
            "imported": false,
            "current_name": "calculate_crc_and_update_data_0800076c"
        },
        "FUN_080015b6": {
            "renaming": {
                "FUN_080015b6": "do_nothing_080015b6"
            },
            "code": "\nvoid do_nothing_080015b6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b6",
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b6"
        },
        "FUN_08004460": {
            "renaming": {
                "FUN_08004460": "set_value_at_index_08004460",
                "param_1": "index",
                "param_2": "value",
                "uVar1": "new_value"
            },
            "code": "void set_value_at_index_08004460(int index, uint value) {\n  undefined2 new_value;\n  if (value < 0x60) {\n    new_value = *(undefined2 *)(PTR_DAT_08004478 + value * 2);\n  }\n  else {\n    new_value = 0xffff;\n  }\n  *(undefined2 *)(index + 300) = new_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004460",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "set_value_at_index_08004460"
        },
        "FUN_080015b8": {
            "renaming": {
                "FUN_080015b8": "do_nothing_080015b8"
            },
            "code": "\nvoid do_nothing_080015b8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b8",
            "calling": [
                "FUN_080019a0",
                "FUN_08001904"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b8"
        },
        "FUN_08001198": {
            "renaming": {
                "FUN_08001198": "update_data_08001198",
                "param_1": "base_address",
                "param_2": "data",
                "param_3": "shift_amount",
                "*(int *)(param_1 + 0x18)": "*(int *)(base_address + 0x18)"
            },
            "code": "void update_data_08001198(int base_address, int data, int shift_amount) {\n    if (shift_amount == 0) {\n        *(int *)(base_address + 0x18) = data << 0x10;\n        return;\n    }\n    *(int *)(base_address + 0x18) = data;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001198",
            "calling": [
                "FUN_080034b6"
            ],
            "imported": false,
            "current_name": "update_data_08001198"
        },
        "FUN_08003138": {
            "renaming": {
                "FUN_08003138": "get_bit_08003138",
                "param_1": "num",
                "param_2": "bit_index",
                "PTR_": "ptr",
                "DAT_": "masked_num"
            },
            "code": "uint get_bit_08003138(uint num, int bit_index)\n{\n    uint* PTR_ = (uint*)(bit_index + ((num << 0x18) >> 0x1c) * 4);\n    uint DAT_ = num & 0xf;\n    uint bit_value = (*PTR_ >> DAT_) & 1;\n    return bit_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003138",
            "calling": [
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "get_bit_08003138"
        },
        "FUN_08000300": {
            "renaming": {
                "FUN_08000300": "FUNC_08000300"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong FUNC_08000300(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  ulonglong uVar1;\n  uint *puVar2;\n  uint uVar3;\n  uint *puVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 != 0) {\n        param_3 = param_3 << (uVar12 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        param_1 = param_1 << (uVar12 & 0xff);\n      }\n      uVar10 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar10;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar10 * uVar8) * 0x10000;\n      uVar6 = uVar8 * (param_3 & 0xffff);\n      uVar5 = uVar8;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar8 = (uVar7 - uVar6) / uVar10;\n      uVar7 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar10 * uVar8) * 0x10000;\n      uVar10 = uVar8 * (param_3 & 0xffff);\n      uVar6 = uVar8;\n      if (uVar7 <= uVar10 && uVar10 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar10 && uVar10 - uVar7 != 0)) {\n          uVar6 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar10;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n      puVar4 = (uint *)0x0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 == 0) {\n        param_2 = param_2 - param_3;\n        uVar7 = param_3 >> 0x10;\n        uVar11 = param_3 & 0xffff;\n        puVar4 = (uint *)0x1;\n      }\n      else {\n        param_3 = param_3 << (uVar12 & 0xff);\n        uVar7 = param_3 >> 0x10;\n        uVar5 = param_2 >> (0x20 - uVar12 & 0xff);\n        uVar9 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        uVar6 = uVar5 / uVar7;\n        uVar11 = param_3 & 0xffff;\n        uVar10 = uVar9 >> 0x10 | (uVar5 - uVar7 * uVar6) * 0x10000;\n        uVar8 = uVar6 * uVar11;\n        param_1 = param_1 << (uVar12 & 0xff);\n        uVar5 = uVar6;\n        if (uVar10 <= uVar8 && uVar8 - uVar10 != 0) {\n          bVar13 = CARRY4(uVar10,param_3);\n          uVar10 = uVar10 + param_3;\n          uVar5 = uVar6 - 1;\n          if ((bVar13 == false) && (uVar10 <= uVar8 && uVar8 - uVar10 != 0)) {\n            uVar5 = uVar6 - 2;\n            uVar10 = uVar10 + param_3;\n          }\n        }\n        uVar3 = (uVar10 - uVar8) / uVar7;\n        param_2 = uVar9 & 0xffff | ((uVar10 - uVar8) - uVar7 * uVar3) * 0x10000;\n        uVar8 = uVar3 * uVar11;\n        uVar6 = uVar3;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar6 = uVar3 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar6 = uVar3 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        puVar4 = (uint *)(uVar6 | uVar5 << 0x10);\n      }\n      uVar10 = param_2 / uVar7;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar10) * 0x10000;\n      uVar6 = uVar11 * uVar10;\n      uVar5 = uVar10;\n      if (uVar8 <= uVar6 && uVar6 - uVar8 != 0) {\n        bVar13 = CARRY4(uVar8,param_3);\n        uVar8 = uVar8 + param_3;\n        uVar5 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar8 <= uVar6 && uVar6 - uVar8 != 0)) {\n          uVar5 = uVar10 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar10 = (uVar8 - uVar6) / uVar7;\n      uVar7 = param_1 & 0xffff | ((uVar8 - uVar6) - uVar7 * uVar10) * 0x10000;\n      uVar11 = uVar11 * uVar10;\n      uVar6 = uVar10;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar11;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar7 >> (uVar12 & 0xff);\n      param_5[1] = 0;\n      return CONCAT44(puVar4,puVar2);\n    }\n  }\n  else if (param_2 < param_4) {\n    puVar2 = param_5;\n    puVar4 = param_5;\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return 0;\n    }\n  }\n  else {\n    puVar4 = (uint *)count_leading_zeroes(param_4);\n    if (puVar4 != (uint *)0x0) {\n      uVar8 = 0x20 - (int)puVar4;\n      uVar5 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar4 & 0xff);\n      uVar9 = uVar5 >> 0x10;\n      uVar12 = param_2 >> (uVar8 & 0xff);\n      uVar11 = param_1 >> (uVar8 & 0xff) | param_2 << ((uint)puVar4 & 0xff);\n      uVar10 = uVar12 / uVar9;\n      uVar7 = uVar11 >> 0x10 | (uVar12 - uVar9 * uVar10) * 0x10000;\n      uVar6 = uVar10 * (uVar5 & 0xffff);\n      param_3 = param_3 << ((uint)puVar4 & 0xff);\n      param_1 = param_1 << ((uint)puVar4 & 0xff);\n      uVar12 = uVar10;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar12 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar12 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar10 = (uVar7 - uVar6) / uVar9;\n      uVar7 = uVar11 & 0xffff | ((uVar7 - uVar6) - uVar9 * uVar10) * 0x10000;\n      uVar9 = uVar10 * (uVar5 & 0xffff);\n      uVar6 = uVar10;\n      if (uVar7 <= uVar9 && uVar9 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar9 && uVar9 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar6 = uVar6 | uVar12 << 0x10;\n      uVar1 = (ulonglong)uVar6 * (ulonglong)param_3;\n      if (CONCAT44(uVar7 - uVar9,param_1) < uVar1) {\n        uVar1 = uVar1 - CONCAT44(uVar5,param_3);\n        uVar6 = uVar6 - 1;\n      }\n      if (param_5 != (uint *)0x0) {\n        uVar12 = ((uVar7 - uVar9) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n        *param_5 = uVar12 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar4 & 0xff);\n        param_5[1] = uVar12 >> ((uint)puVar4 & 0xff);\n      }\n      return (ulonglong)uVar6;\n    }\n    if ((param_4 < param_2) || (puVar2 = puVar4, param_3 <= param_1)) {\n      bVar13 = param_1 < param_3;\n      param_1 = param_1 - param_3;\n      param_2 = (param_2 - param_4) - (uint)bVar13;\n      puVar2 = (uint *)0x1;\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return ZEXT48(puVar2);\n    }\n  }\n  return CONCAT44(puVar4,puVar2);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000300",
            "calling": [
                "FUN_080002d0"
            ],
            "imported": false,
            "current_name": "FUNC_08000300"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "set_bit_08002848",
                "param_1": "bit_array",
                "param_2": "bit_position",
                "param_3": "bit_value",
                "*(uint *)(param_1 + 0x20)": "*bit_array",
                "mask": "mask",
                "value": "value"
            },
            "code": "void set_bit_08002848(uint32_t *bit_array, uint8_t bit_position, uint8_t bit_value) {\n    uint32_t mask = ~(1 << (bit_position & 0xff));\n    uint32_t value = bit_value << (bit_position & 0xff);\n    *bit_array = (*bit_array & mask) | value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "FUN_08002864"
            ],
            "imported": false,
            "current_name": "set_bit_08002848"
        },
        "FUN_0800312c": {
            "renaming": {
                "FUN_0800312c": "combine_bytes_0800312c",
                "param_1": "address",
                "*(byte *)(param_1 + 0x3a)": "byte1",
                "*(byte *)(param_1 + 0x39)": "byte2"
            },
            "code": "byte combine_bytes_0800312c(int address) {\n    byte byte1 = *(byte *)(address + 0x3a);\n    byte byte2 = *(byte *)(address + 0x39);\n    return byte1 | byte2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800312c",
            "calling": [
                "FUN_08003dd0",
                "FUN_08003df4"
            ],
            "imported": false,
            "current_name": "combine_bytes_0800312c"
        },
        "FUN_080028f0": {
            "renaming": {
                "FUN_080028f0": "update_bits_and_check_080028f0",
                "param_1": "data",
                "param_2": "bit_position",
                "puVar1": "data_ptr"
            },
            "code": "uint32_t update_bits_and_check_080028f0(uint32_t **data, uint32_t bit_position) {\n  uint32_t *data_ptr = *data;\n  update_bits_at_position(data_ptr, bit_position, 0);\n  if (((data_ptr[8] & 0x1111) == 0) && ((data_ptr[8] & 0x444) == 0)) {\n    data_ptr[17] &= 0xffff7fff;\n  }\n  data_ptr = *data;\n  if (((data_ptr[8] & 0x1111) == 0) && ((data_ptr[8] & 0x444) == 0)) {\n    *data_ptr &= 0xfffffffe;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080028d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028f0",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "update_bits_and_check_080028f0"
        },
        "FUN_08000e30": {
            "renaming": {
                "FUN_08000e30": "get_value_from_pointer_08000e30",
                "PTR_DAT_08000e38": "pointer_to_data"
            },
            "code": "int get_value_from_pointer_08000e30() {\n    int* pointer = (int*)PTR_DAT_08000e38;\n    return *pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e30",
            "calling": [
                "FUN_08002488",
                "FUN_0800346c",
                "FUN_08001f9c",
                "FUN_08003d18",
                "FUN_0800201c",
                "FUN_08002dd0",
                "FUN_08002d0c"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08000e30"
        },
        "FUN_08000f56": {
            "renaming": {
                "FUN_08000f56": "set_value_and_clear_bit_08000f56",
                "param_1": "value",
                "*(undefined *)(param_1 + 4)": "*(undefined *)(value + OFFSET_VALUE)",
                "clear_bit_in_address_080033c8": "clear_bit_in_address",
                "*(undefined4 *)(param_1 + 0x10)": "*(undefined4 *)(value + OFFSET_FLAG)",
                "*(undefined *)(param_1 + 5)": "*(undefined *)(value + OFFSET_FLAG2)"
            },
            "code": "int set_value_and_clear_bit_08000f56(int value)\n{\n  if (value != 0) {\n    *(undefined *)(value + OFFSET_VALUE) = 2;\n    clear_bit_in_address();\n    *(undefined4 *)(value + OFFSET_FLAG) = 0;\n    *(undefined *)(value + OFFSET_VALUE) = 0;\n    *(undefined *)(value + OFFSET_FLAG2) = 0;\n    return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_080033c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f56",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "set_value_and_clear_bit_08000f56"
        },
        "FUN_0800295c": {
            "renaming": {
                "FUN_0800295c": "process_data_0800295c",
                "param_1": "data",
                "sVar1": "remaining_iterations",
                "pbVar2": "byte_data",
                "first_char": "first_char",
                "data_type": "data_type",
                "*output": "output"
            },
            "code": "int process_data_0800295c(int *data)\n{\n  char first_char = *(char *)(data + 0x39);\n  if (first_char != '!') {\n    return 2;\n  }\n\n  int data_type = data[2];\n  int *output = (int *)(*data + 4);\n\n  if (data_type == 0x1000) {\n    *output = *(unsigned short *)data[8] & 0x1ff;\n    if (data[4] == 0) {\n      data[8] = data[8] + 2;\n    }\n    else {\n      data[8] = data[8] + 1;\n    }\n  }\n  else {\n    unsigned char *byte_data = (unsigned char *)data[8];\n    data[8] = (int)(byte_data + 1);\n    *output = (unsigned int)*byte_data;\n  }\n\n  short remaining_iterations = *(short *)(data + 0x26) - 1;\n  *(short *)(data + 0x26) = remaining_iterations;\n\n  if (remaining_iterations == 0) {\n    *(unsigned int *)(*data + 0xc) &= 0xffffff7f;\n    *(unsigned int *)(*data + 0xc) |= 0x40;\n    return 0;\n  }\n\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800295c",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "process_data_0800295c"
        },
        "FUN_08003380": {
            "renaming": {
                "FUN_08003380": "check_value_08003380",
                "param_1": "value_to_check",
                "param_2": "data_ptr",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "result"
            },
            "code": "int check_value_08003380(int value_to_check, int *data_ptr, int param_3, int param_4, int param_5) {\n    int result = find_value(value_to_check, data_ptr, param_3, param_4, param_5);\n    if ((result << 12) >> 27 != 2) {\n        return 0;\n    }\n    return 16;\n}",
            "called": [
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003380",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "check_value_08003380"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "process_data_08004110",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "data",
                "param_4": "buffer",
                "iVar1": "result",
                "puVar2": "ptr_value",
                "iVar3": "short_value"
            },
            "code": "void process_data_08004110(uint8_t index, uint32_t flag, uint32_t data, uint8_t* buffer) {\n    int16_t short_value;\n    uint8_t* ptr_value;\n    int8_t result;\n    if (index < 0x60) {\n        short_value = *(int16_t*)(PTR_DAT_080041a8 + index * 2);\n        ptr_value = PTR_DAT_080041a8;\n    }\n    else {\n        short_value = -1;\n        ptr_value = buffer;\n    }\n    if (short_value != -1) {\n        result = get_bit(short_value, PTR_DAT_080041ac, data, ptr_value, buffer);\n        if (result != 0) {\n            if (find_short(short_value, PTR_DAT_080041b0) == 0) {\n                if (find_short(short_value, PTR_DAT_080041b4) != 0) {\n                    update_flags_on_condition_met(short_value);\n                }\n            }\n            else {\n                update_bits_and_clear_value_if_not_negative(short_value);\n            }\n            set_bit_to_zero(short_value, PTR_DAT_080041ac);\n        }\n        switch(flag) {\n            case 0:\n                set_flag_and_update_data(short_value, 0);\n                break;\n            case 1:\n                set_flag_and_update_data(short_value, 1, 0);\n                break;\n            case 2:\n                set_flag_and_update_data(short_value, 0, 1);\n                break;\n            case 3:\n                set_flag_and_update_data(short_value, 0, 2);\n        }\n        set_bit(short_value, PTR_DAT_080041b8);\n    }\n}",
            "called": [
                "FUN_080033d8",
                "FUN_0800355e",
                "FUN_0800314e",
                "FUN_08003486",
                "FUN_08003414",
                "FUN_0800316c",
                "FUN_08003138"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "FUN_08000600"
            ],
            "imported": false,
            "current_name": "process_data_08004110"
        },
        "FUN_08000ee0": {
            "renaming": {
                "FUN_08000ee0": "check_param_range_08000ee0",
                "param_1": "param",
                "puVar1": "ptr",
                "DAT_08000f04": "ptr",
                "DAT_08000f08": "PTR_08000f08"
            },
            "code": "int check_param_range_08000ee0(int param) {\n    int *DAT_08000f04 = DAT_08000f04;\n    if (param - 1U < 0x1000000) {\n        DAT_08000f04[1] = param - 1U;\n        *(unsigned char *)(DAT_08000f08 + 0x23) = 0xf0;\n        DAT_08000f04[2] = 0;\n        *DAT_08000f04 = 7;\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ee0",
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98"
            ],
            "imported": false,
            "current_name": "check_param_range_08000ee0"
        },
        "FUN_080015ba": {
            "renaming": {
                "FUN_080015ba": "do_nothing_080015ba"
            },
            "code": "\nvoid do_nothing_080015ba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015ba",
            "calling": [
                "FUN_080015bc",
                "FUN_08001684"
            ],
            "imported": false,
            "current_name": "do_nothing_080015ba"
        },
        "FUN_080015bc": {
            "renaming": {
                "FUN_080015bc": "process_data_080015bc",
                "param_1": "data",
                "cVar1": "current_char",
                "pbVar2": "data_ptr"
            },
            "code": "int process_data_080015bc(int *data)\n{\n  char current_char = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    byte *data_ptr = (byte *)data[9];\n    data[9] = (int)(data_ptr + 1);\n    *(uint *)(*data + 0x10) = (uint)*data_ptr;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (current_char == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      do_nothing();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015bc",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_data_080015bc"
        },
        "FUN_08000f4c": {
            "renaming": {
                "FUN_08000f4c": "do_nothing_08000f4c"
            },
            "code": "\nvoid do_nothing_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4c",
            "calling": [
                "FUN_08000f4e"
            ],
            "imported": false,
            "current_name": "do_nothing_08000f4c"
        },
        "FUN_08000f4e": {
            "renaming": {
                "FUN_08000f4e": "do_nothing_and_return_08000f4e",
                "do_nothing_08000f4c": "do_nothing"
            },
            "code": "void do_nothing_and_return_08000f4e(void)\n{\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08000f4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4e",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08000f4e"
        },
        "FUN_0800066c": {
            "renaming": {
                "FUN_0800066c": "set_data_0800066c",
                "param_1": "data_address",
                "param_2": "data_value",
                "param_3": "max_value",
                "param_4": "unknown_value",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void set_data_0800066c(int data_address, char data_value, int max_value, char unknown_value) {\n\t*(char *)(data_address + 4) = data_value;\n\tif (3 < max_value) {\n\t\tmax_value = 0;\n\t}\n\t*(char *)(data_address + 5) = (char)max_value;\n\t*(char *)(data_address + 6) = unknown_value;\n\t*(short *)(data_address + 0x56) = 1000;\n\treturn;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800066c",
            "calling": [
                "FUN_08000682"
            ],
            "imported": false,
            "current_name": "set_data_0800066c"
        },
        "FUN_080042e8": {
            "renaming": {
                "FUN_080042e8": "process_input_080042e8",
                "param_1": "input_length",
                "param_2": "input_char",
                "bVar1": "current_byte",
                "bVar2": "input_byte",
                "iVar3": "is_valid_input",
                "PTR_LAB_0800420c_1_08004334": "PTR_LAB_0800420c_1_08004334"
            },
            "code": "int process_input_080042e8(int input_length, unsigned char input_char)\n{\n    unsigned char current_byte;\n    unsigned short input_index;\n    int is_valid_input;\n\n    *(unsigned char *)(input_length + 0x10) = 1;\n    input_index = *(unsigned short *)(input_length + 0x140) + 1;\n    current_byte = (unsigned char)input_index;\n    if (input_index == 0)\n    {\n        current_byte = -(-current_byte & 0x7f);\n    }\n    do\n    {\n    }\n    while (*(unsigned short *)(input_length + 0x142) == (unsigned short)current_byte);\n    *(unsigned char *)(*(int *)(input_length + 0x13c) + (unsigned int)*(unsigned short *)(input_length + 0x140)) = input_char;\n    *(unsigned short *)(input_length + 0x140) = (unsigned short)current_byte;\n    is_valid_input = is_valid_input_08003df4(input_length + 0xd4);\n    if (is_valid_input == 0)\n    {\n        update_data_08003eac(input_length + 0xd4, PTR_LAB_0800420c_1_08004334);\n    }\n    return 1;\n}",
            "called": [
                "FUN_08003eac",
                "FUN_08003df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e8",
            "calling": [],
            "imported": false,
            "current_name": "process_input_080042e8"
        },
        "FUN_080038d0": {
            "renaming": {
                "FUN_080038d0": "execute_function_if_conditions_met_080038d0",
                "param_1": "param_1",
                "iVar1": "function_pointer_address",
                "subtract_four_from_number_0800387c": "subtract_four_from_number",
                "*(code **)(iVar1 + 0x60)": "function_pointer",
                "*(char *)(iVar1 + 0x5e)": "is_true",
                "*(char *)(iVar1 + 0x2c)": "is_space",
                "set_bit_and_flags_08001578": "set_bit_and_flags"
            },
            "code": "void execute_function_if_conditions_met_080038d0(undefined4 param_1)\n{\n  int function_pointer_address = subtract_four_from_number();\n  code* function_pointer = *(code**)(function_pointer_address + 0x60);\n  char is_true = *(char*)(function_pointer_address + 0x5e);\n  char is_space = *(char*)(function_pointer_address + 0x2c);\n\n  if (function_pointer != NULL && is_true == 1 && is_space != ' ')\n  {\n    (*function_pointer)(function_pointer_address + 0x68);\n  }\n  set_bit_and_flags(param_1);\n  return;\n}",
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038d0",
            "calling": [
                "FUN_08001684",
                "FUN_08001ab0",
                "FUN_08001bfc"
            ],
            "imported": false,
            "current_name": "execute_function_if_conditions_met_080038d0"
        },
        "FUN_0800410c": {
            "renaming": {
                "FUN_0800410c": "return_one_0800410c"
            },
            "code": "int return_one_0800410c(void)\n{\n    int one = 1;\n    return one;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800410c",
            "calling": [
                "thunk_FUN_0800410c"
            ],
            "imported": false,
            "current_name": "return_one_0800410c"
        },
        "FUN_0800260c": {
            "renaming": {
                "FUN_0800260c": "get_shifted_value_from_pointer_0800260c",
                "uVar1": "value",
                "PTR_DAT_08002628": "shift_array",
                "DAT_08002624": "data_pointer"
            },
            "code": "unsigned int get_shifted_value_from_pointer_0800260c() {\n  unsigned int value = get_value_from_pointer();\n  unsigned int shift_amount = (*(int *)(DAT_08002624 + 8) << 16) >> 29;\n  unsigned int shifted_value = value >> shift_amount;\n  return shifted_value;\n}",
            "called": [
                "FUN_080025e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800260c",
            "calling": [
                "FUN_080029c8"
            ],
            "imported": false,
            "current_name": "get_shifted_value_from_pointer_0800260c"
        },
        "FUN_08004240": {
            "renaming": {
                "FUN_08004240": "calculate_offset_08004240",
                "param_1": "base_address",
                "*(short *)(param_1 + 0x138)": "offset_1",
                "*(short *)(param_1 + 0x13a)": "offset_2",
                "result": "result"
            },
            "code": "ushort calculate_offset_08004240(int base_address)\n{\n    ushort offset_1 = *(ushort *)(base_address + 0x138);\n    ushort offset_2 = *(ushort *)(base_address + 0x13a);\n    ushort result = (offset_1 + 0x40) - offset_2;\n    return result & 0x3f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004240",
            "calling": [
                "FUN_08004338"
            ],
            "imported": false,
            "current_name": "calculate_offset_08004240"
        },
        "FUN_080026c8": {
            "renaming": {
                "FUN_080026c8": "do_nothing_080026c8"
            },
            "code": "\nvoid do_nothing_080026c8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026c8",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026c8"
        },
        "FUN_080041bc": {
            "renaming": {
                "FUN_080041bc": "decode_and_update_data_080041bc",
                "param_1": "position",
                "param_2": "bit_mask",
                "param_3": "data",
                "param_4": "data_array",
                "iVar1": "bit_check_result",
                "uVar2": "data_to_update",
                "puVar3": "data_ptr",
                "uVar4": "bit_value"
            },
            "code": "void decode_and_update_data_080041bc(uint position, uint bit_mask, uint data, uint* data_array)\n{\n  uint bit_value;\n  uint* data_ptr;\n  if (position < 0x60) {\n    bit_value = (uint)*(short *)(PTR_DAT_080041fc + position * 2);\n    data_ptr = PTR_DAT_080041fc;\n  }\n  else {\n    bit_value = 0xffffffff;\n    data_ptr = data_array;\n  }\n  if ((bit_value != 0xffffffff) && (get_bit(bit_value, PTR_DAT_08004200, data, data_ptr, data_array) != 0)) {\n    uint data_index = (bit_value << 0x18) >> 0x1c;\n    uint update_mask = 1 << (bit_value & 0xf) & 0xffff;\n    uint* data_to_update = get_datum_from_index(data_index);\n    update_data_if_param_not_zero(data_to_update, update_mask, bit_mask);\n  }\n  return;\n}",
            "called": [
                "FUN_080034b6",
                "FUN_08003138",
                "FUN_0800318c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041bc",
            "calling": [
                "FUN_08000600",
                "FUN_080006b4",
                "FUN_0800076c"
            ],
            "imported": false,
            "current_name": "decode_and_update_data_080041bc"
        },
        "FUN_08004364": {
            "renaming": {
                "FUN_08004364": "initialize_data_08004364",
                "param_1": "data",
                "*(int *)(param_1 + 0x134)": "*data_ptr",
                "*(undefined2 *)(param_1 + 0x138)": "*short_ptr1",
                "*(undefined2 *)(param_1 + 0x13a)": "*short_ptr2",
                "*(int *)(param_1 + 0x13c)": "*int_ptr",
                "*(undefined2 *)(param_1 + 0x140)": "*short_ptr3",
                "*(undefined2 *)(param_1 + 0x142)": "*short_ptr4"
            },
            "code": "void initialize_data_08004364(int data)\n{\n    int* data_ptr = (int*)(data + 0x134);\n    *data_ptr = data + 0x11;\n    \n    short* short_ptr1 = (short*)(data + 0x138);\n    *short_ptr1 = 0;\n    \n    short* short_ptr2 = (short*)(data + 0x13a);\n    *short_ptr2 = 0;\n    \n    int* int_ptr = (int*)(data + 0x13c);\n    *int_ptr = data + 0x51;\n    \n    short* short_ptr3 = (short*)(data + 0x140);\n    *short_ptr3 = 0;\n    \n    short* short_ptr4 = (short*)(data + 0x142);\n    *short_ptr4 = 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004364",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "initialize_data_08004364"
        },
        "FUN_08000682": {
            "renaming": {
                "FUN_08000682": "initialize_data_08000682",
                "param_1": "data",
                "set_data_0800066c": "set_data"
            },
            "code": "undefined4 initialize_data_08000682(undefined4 data)\n{\n    set_data();\n    return data;\n}",
            "called": [
                "FUN_0800066c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000682",
            "calling": [
                "FUN_08000690"
            ],
            "imported": false,
            "current_name": "initialize_data_08000682"
        },
        "FUN_08000e3c": {
            "renaming": {
                "FUN_08000e3c": "set_param_08000e3c",
                "param_1": "param",
                "DAT_08000e5c": "ptr",
                "PTR_": "PTR_",
                "mask": "mask",
                "val": "val"
            },
            "code": "void set_param_08000e3c(uint param) {\n    uint* DAT_08000e5c = (uint*)(DAT_08000e5c + 0xc);\n    uint mask = 0xf8ff;\n    uint val = 0x5fa0000 | ((param & 7) << 8) | (*DAT_08000e5c & mask);\n    *DAT_08000e5c = val;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e3c",
            "calling": [
                "FUN_08000de4",
                "FUN_08004648"
            ],
            "imported": false,
            "current_name": "set_param_08000e3c"
        },
        "FUN_08002864": {
            "renaming": {
                "FUN_08002864": "set_bit_and_clear_flags_08002864",
                "param_1": "bits_array",
                "param_2": "bit_index",
                "puVar2": "bits_array_ptr",
                "bVar1": "is_dat_080028d0",
                "DAT_080028d0": "DAT_080028d0",
                "uint": "uint32_t",
                "undefined4": "uint32_t",
                "bool": "bool",
                "true": "true",
                "false": "false"
            },
            "code": "uint32_t set_bit_and_clear_flags_08002864(uint32_t **bits_array, uint32_t bit_index)\\n\\\n    {\\n\\\n        bool is_dat_080028d0 = false;\\n\\\n        uint32_t *bits_array_ptr = *bits_array;\\n\\\n        if (bits_array_ptr == DAT_080028d0 || bits_array_ptr == DAT_080028d0 + 0x100) {\\n\\\n            is_dat_080028d0 = true;\\n\\\n        }\\n\\\n        bool is_flags_clear = ((bits_array_ptr[8] & 0x1111) == 0) && ((bits_array_ptr[8] & 0x444) == 0);\\n\\\n        if (is_dat_080028d0 && is_flags_clear) {\\n\\\n            bits_array_ptr[0x11] &= 0xffff7fff;\\n\\\n        }\\n\\\n        if (is_flags_clear) {\\n\\\n            *bits_array_ptr &= 0xfffffffe;\\n\\\n        }\\n\\\n        *((uint8_t*)bits_array + 0x39) = 1;\\n\\\n        return 0;\\n\\\n    }",
            "called": [
                "FUN_08002848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002864",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "set_bit_and_clear_flags_08002864"
        },
        "FUN_0800532c": {
            "renaming": {
                "FUN_0800532c": "initialize_params_0800532c",
                "param_1": "params",
                "param_2": "param_2",
                "param_3": "param_3",
                "puVar1": "LAB_08005686_1_08005370",
                "fill_array_with_value_080048cc": "fill_array_with_value",
                "DAT_08005364": "DAT_08005364",
                "PTR_FUN_0800562a_1_08005368": "PTR_FUN_0800562a_1_08005368",
                "PTR_FUN_08005662_1_0800536c": "PTR_FUN_08005662_1_0800536c",
                "PTR_LAB_08005686_1_08005370": "PTR_LAB_08005686_1_08005370"
            },
            "code": "void initialize_params_0800532c(undefined4 *params, undefined2 param_2, undefined2 param_3)\n{\n    *params = 0;\n    params[1] = 0;\n    params[2] = 0;\n    *(undefined2 *)(params + 3) = param_2;\n    params[0x19] = 0;\n    *(undefined2 *)((int)params + 0xe) = param_3;\n    params[4] = 0;\n    params[5] = 0;\n    params[6] = 0;\n    fill_array_with_value(params + 0x17, 0, 8);\n    params[9] = DAT_08005364;\n    params[10] = PTR_process_input_0800562a_1_08005368;\n    params[0xb] = PTR_set_value_if_not_negative_08005662_1_0800536c;\n    undefined *LAB_08005686_1_08005370 = PTR_LAB_08005686_1_08005370;\n    params[8] = params;\n    params[0xc] = LAB_08005686_1_08005370;\n    return;\n}",
            "called": [
                "FUN_080048cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800532c",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "initialize_params_0800532c"
        },
        "FUN_0800314e": {
            "renaming": {
                "FUN_0800314e": "set_bit_0800314e",
                "param_1": "bit_position",
                "param_2": "bit_array",
                "uVar1": "array_index",
                "PTR_": "",
                "DAT_": "",
                "uint": "unsigned int",
                "array_pointer": "uint*",
                "bit_mask": "uint"
            },
            "code": "void set_bit_0800314e(uint bit_position, int* bit_array) {\n  uint array_index = (bit_position << 0x18) >> 0x1c;\n  uint* array_pointer = bit_array + array_index;\n  uint bit_mask = 1 << (bit_position & 0xf);\n  *array_pointer = *array_pointer | bit_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "set_bit_0800314e"
        },
        "FUN_0800447c": {
            "renaming": {
                "FUN_0800447c": "initialize_data_0800447c",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "PTR_PTR_FUN_080042e8_1_080044c8": "function_pointer",
                "PTR_DAT_080044cc": "data_pointer",
                "set_value_at_offset_08004444": "set_value_at_offset",
                "set_value_at_index_08004460": "set_value_at_index",
                "get_short_value_0800351e": "get_short_value",
                "PTR_DAT_080044d0": "short_data_1",
                "PTR_DAT_080044d4": "short_data_2"
            },
            "code": "undefined4* initialize_data_0800447c(undefined4 *data, undefined4 value1, undefined4 value2, undefined4 value3)\n{\n    data[1] = 0;\n    data[2] = 1000;\n    *data = PTR_PTR_FUN_080042e8_1_080044c8;\n    if (data == PTR_DAT_080044cc)\n    {\n        set_value_at_offset(data, 0x4c, value2, PTR_DAT_080044cc, value3);\n        set_value_at_index(data, 0x4d);\n    }\n    else\n    {\n        short_value_1 = get_short_value(value1, PTR_DAT_080044d0);\n        *(undefined2 *)((int)data + 0x12e) = short_value_1;\n        short_value_2 = get_short_value(value1, PTR_DAT_080044d4);\n        *(undefined2 *)(data + 0x4b) = short_value_2;\n    }\n    initialize_data_0800447c(data);\n    return data;\n}",
            "called": [
                "FUN_08004444",
                "FUN_08004460",
                "FUN_08004364",
                "FUN_0800351e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800447c",
            "calling": [
                "FUN_080044d8"
            ],
            "imported": false,
            "current_name": "initialize_data_0800447c"
        },
        "FUN_08004808": {
            "renaming": {
                "FUN_08004808": "process_data_and_call_function_08004808",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "arg4",
                "uVar1": "value1",
                "puVar2": "function_name",
                "uVar3": "result",
                "uVar4": "value2"
            },
            "code": "void process_data_and_call_function_08004808(undefined4 arg1, undefined4 arg2, undefined *data, undefined4 arg4)\n{\n  undefined4 value1 = *(undefined4 *)(*(int *)function_data + 0xc);\n  undefined *function_name = function_name_string;\n  undefined4 value2 = arg4;\n  if (data == NULL) goto LAB_0800482c;\n  do {\n    process_data_and_call_function_08004808_08004860(value1, function_name, arg4, arg1, arg2, function_name, data, value2);\n    undefined8 result = process_input_and_execute_080051ac();\n    arg2 = (undefined4)((ulonglong)result >> 0x20);\n    value1 = (undefined4)result;\n  } while( true );\n}\n",
            "called": [
                "FUN_080051ac",
                "FUN_08004860"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004808",
            "calling": [
                "FUN_08004388"
            ],
            "imported": false,
            "current_name": "process_data_and_call_function_08004808"
        },
        "FUN_08000f72": {
            "renaming": {
                "FUN_08000f72": "clear_bit_08000f72",
                "param_1": "data",
                "param_2": "bit_position",
                "**param_1": "*data",
                "*(undefined *)(param_1 + 1)": "*(uint8_t *)(data + 1)"
            },
            "code": "int clear_bit_08000f72(uint **data, uint bit_position) {\n    **data &= ~(1 << (bit_position & 0xff));\n    *(uint8_t *)(data + 1) = 1;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f72",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "clear_bit_08000f72"
        },
        "FUN_08001d00": {
            "renaming": {
                "FUN_08001d00": "process_data_08001d00",
                "param_1": "data_ptr",
                "iVar1": "data_offset",
                "uVar2": "inputs",
                "uVar3": "state",
                "uVar4": "flags",
                "DAT_08001e4c": "FLAG_1",
                "DAT_08001e50": "FLAG_7",
                "DAT_08001e54": "FLAG_3",
                "DAT_08001e58": "FLAG_6",
                "DAT_08001e5c": "FLAG_5",
                "DAT_08001e60": "FLAG_2",
                "DAT_08001e64": "FLAG_4",
                "process_data_08001256": "process_data_1",
                "set_value_at_offset_0800124a": "set_value_at_offset",
                "set_flag_080011c0": "set_flag",
                "process_input_08001904": "process_input_1",
                "process_data_080019a0": "process_data_2",
                "process_input_0800171a": "process_input_2",
                "process_input_08001864": "process_input_3",
                "process_input_0800165a": "process_input_4",
                "execute_action_08001bfc": "execute_action",
                "process_input_0800160e": "process_input_5",
                "increment_and_copy_08001440": "increment_and_copy",
                "process_data_080015bc": "process_data_3",
                "increment_and_store_byte_08001420": "increment_and_store_byte"
            },
            "code": "void process_data_08001d00(uint32_t *data_ptr) {\n  uint32_t data_offset = *data_ptr;\n  uint32_t flags = *(uint32_t *)(data_offset + 0x18);\n  uint32_t inputs = *(uint32_t *)(data_offset + 0x14);\n  uint32_t state = *(uint32_t *)(data_offset + 4);\n  \n  if ((*(char *)((int)data_ptr + 0x3e) == '\\x10') || (*(char *)((int)data_ptr + 0x3e) == '@')) {\n    if (((inputs & 0x10001) == 0) || ((state & 0x200) == 0)) {\n      if (((flags & DAT_08001e4c) == 0) || ((state & 0x200) == 0)) {\n        if (((flags & DAT_08001e60) != 0) && ((state & 0x200) != 0)) {\n          process_data_08001d00_1(data_ptr);\n        }\n      }\n      else {\n        set_value_at_offset(data_ptr);\n      }\n    }\n    else {\n      set_flag(data_ptr);\n    }\n    if ((flags & DAT_08001e54) == 0) {\n      if ((((flags & DAT_08001e64) != 0) && ((state & 0x400) != 0)) && ((flags & DAT_08001e5c) == 0)) {\n        process_input_1(data_ptr);\n        return;\n      }\n      if (((flags & DAT_08001e5c) != 0) && ((state & 0x200) != 0)) {\n        process_data_08001d00_2(data_ptr);\n        return;\n      }\n    }\n    else {\n      if ((((flags & DAT_08001e58) != 0) && ((state & 0x400) != 0)) && ((flags & DAT_08001e5c) == 0)) {\n        process_input_2(data_ptr);\n        return;\n      }\n      if (((flags & DAT_08001e5c) != 0) && ((state & 0x200) != 0)) {\n        process_input_3(data_ptr);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flags & DAT_08001e60) != 0) && ((state & 0x200) != 0)) {\n      process_input_4();\n      return;\n    }\n    if (((flags & DAT_08001e50) != 0) && ((state & 0x200) != 0)) {\n      execute_action(data_ptr);\n      return;\n    }\n    if ((flags & DAT_08001e54) == 0) {\n      if ((((flags & DAT_08001e64) != 0) && ((state & 0x400) != 0)) && ((flags & DAT_08001e5c) == 0)) {\n        process_input_5(data_ptr);\n        return;\n      }\n      if (((flags & DAT_08001e5c) != 0) && ((state & 0x200) != 0)) {\n        increment_and_copy(data_ptr);\n      }\n    }\n    else {\n      if ((((flags & DAT_08001e58) != 0) && ((state & 0x400) != 0)) && ((flags & DAT_08001e5c) == 0)) {\n        process_data_08001d00_3(data_ptr);\n        return;\n      }\n      if (((flags & DAT_08001e5c) != 0) && ((state & 0x200) != 0)) {\n        increment_and_store_byte(data_ptr);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_080011c0",
                "FUN_0800124a",
                "FUN_0800171a",
                "FUN_08001bfc",
                "FUN_08001904",
                "FUN_080015bc",
                "FUN_08001256",
                "FUN_08001420",
                "FUN_08001440",
                "FUN_080019a0",
                "FUN_0800160e",
                "FUN_08001864",
                "FUN_0800165a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001d00",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08001d00"
        }
    },
    "used_tokens": 175615,
    "layers": [
        [
            "FUN_080034da",
            "FUN_080035fc",
            "FUN_0800355e",
            "thunk_FUN_0800410c",
            "FUN_08004544",
            "FUN_08000fb4",
            "FUN_08002d72",
            "FUN_08003582",
            "FUN_08004678",
            "FUN_08000f0c",
            "FUN_0800171a",
            "FUN_08004cb0",
            "FUN_08003594",
            "FUN_08002940",
            "FUN_08004444",
            "FUN_080028d4",
            "FUN_08001460",
            "FUN_080035bc",
            "FUN_08001904",
            "FUN_0800387c",
            "FUN_080040fc",
            "FUN_08004860",
            "FUN_080011c0",
            "FUN_0800352e",
            "FUN_080008cc",
            "FUN_08002efa",
            "FUN_08004640",
            "FUN_08001256",
            "FUN_08004884",
            "FUN_080045be",
            "FUN_08000728",
            "FUN_0800124a",
            "FUN_08004094",
            "FUN_080033c8",
            "FUN_080031fc",
            "FUN_08001420",
            "FUN_08000218",
            "FUN_08000e60",
            "FUN_08002eb2",
            "FUN_0800316c",
            "FUN_080040d0",
            "FUN_080040d6",
            "FUN_080002d0",
            "FUN_08003f00",
            "FUN_08001440",
            "FUN_08000230",
            "FUN_08000f8c",
            "FUN_080001ac",
            "FUN_080040e0",
            "FUN_080048cc",
            "FUN_080040e4",
            "FUN_08003506",
            "FUN_080025e0",
            "FUN_080040e8",
            "FUN_08003750",
            "FUN_080014ec",
            "FUN_080048dc",
            "FUN_08001578",
            "FUN_08004844",
            "FUN_0800318c",
            "FUN_080040f8",
            "FUN_080019a0",
            "FUN_0800160e",
            "FUN_08000e18",
            "FUN_08001864",
            "FUN_08000f2c",
            "FUN_08000ec4",
            "FUN_080005e0",
            "FUN_08004460",
            "FUN_08001198",
            "FUN_08003138",
            "FUN_08002848",
            "FUN_0800312c",
            "FUN_08000e30",
            "FUN_0800295c",
            "FUN_08000ee0",
            "FUN_080015bc",
            "FUN_08000f4e",
            "FUN_0800066c",
            "FUN_0800410c",
            "FUN_08004240",
            "FUN_08004364",
            "FUN_08000e3c",
            "FUN_0800314e",
            "FUN_08000f72"
        ],
        [
            "FUN_08003dd0",
            "FUN_080034f4",
            "FUN_0800573c",
            "FUN_080056d4",
            "FUN_080007f0",
            "FUN_08003df4",
            "FUN_08003900",
            "FUN_080055d0",
            "FUN_080056f8",
            "FUN_08004560",
            "FUN_08003476",
            "FUN_0800346c",
            "FUN_08003880",
            "FUN_080025ec",
            "FUN_08002d0c",
            "FUN_0800351e",
            "FUN_080034b6",
            "FUN_08003eac",
            "FUN_08005718",
            "FUN_0800376e",
            "FUN_08000d98",
            "FUN_08003f48",
            "FUN_0800340c",
            "FUN_08001f9c",
            "FUN_080045c8",
            "FUN_080047fe",
            "FUN_0800354a",
            "FUN_0800262c",
            "FUN_08003754",
            "FUN_0800500c",
            "FUN_080023b4",
            "FUN_08003f24",
            "FUN_08003486",
            "FUN_08004338",
            "FUN_080005e4",
            "FUN_080028f0",
            "FUN_08000f56",
            "FUN_080038d0",
            "FUN_0800260c",
            "FUN_08000682",
            "FUN_08002864",
            "FUN_0800532c"
        ],
        [
            "FUN_08003e54",
            "FUN_08002488",
            "FUN_08003cc8",
            "FUN_080054b4",
            "FUN_08004204",
            "FUN_08002f4c",
            "FUN_08004978",
            "FUN_08002f66",
            "FUN_08003e18",
            "FUN_08002dd0",
            "FUN_08004622",
            "FUN_08001ab0",
            "FUN_08005608",
            "FUN_0800268e",
            "FUN_08000690",
            "FUN_08000de4",
            "FUN_080026ce",
            "FUN_0800339c",
            "FUN_0800165a",
            "FUN_080051ac",
            "FUN_08001684",
            "FUN_080046b4",
            "FUN_08005662",
            "FUN_08003380",
            "FUN_080042e8",
            "FUN_080041bc",
            "FUN_0800447c"
        ],
        [
            "FUN_080006b4",
            "FUN_08000c8c",
            "FUN_080033d8",
            "FUN_08001bfc",
            "FUN_080044d8",
            "FUN_08002ffc",
            "FUN_08003414",
            "FUN_08004638",
            "FUN_0800377c",
            "FUN_08003d18",
            "FUN_080054fc",
            "FUN_08005374",
            "FUN_08001e68",
            "FUN_080042ac",
            "FUN_0800076c",
            "FUN_08004808"
        ],
        [
            "FUN_08000a4e",
            "FUN_08000998",
            "FUN_08000a7a",
            "FUN_080040ec",
            "FUN_080008e2",
            "FUN_080034ce",
            "FUN_08000b04",
            "FUN_08004388",
            "FUN_08000a00",
            "FUN_08004110",
            "FUN_08001d00"
        ],
        [
            "FUN_0800562a",
            "FUN_08000b54",
            "FUN_08000d8e",
            "FUN_08000600"
        ],
        [
            "FUN_08000c4c",
            "FUN_08000c64",
            "FUN_08004648"
        ],
        [
            "FUN_08004658"
        ],
        [
            "FUN_08000d3c"
        ],
        [
            "FUN_08005760"
        ],
        [
            "FUN_080047c0"
        ],
        [
            "FUN_080047d0"
        ],
        [
            "FUN_080011a4"
        ],
        [
            "FUN_08004fdc",
            "FUN_08005400",
            "FUN_080050d0",
            "FUN_080052cc"
        ],
        [
            "FUN_080053a0"
        ],
        [
            "FUN_08004a34"
        ],
        [
            "FUN_08004a60"
        ]
    ],
    "locked_functions": []
}