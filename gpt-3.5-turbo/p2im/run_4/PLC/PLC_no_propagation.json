{
    "functions": {
        "FUN_080006b4": {
            "renaming": {
                "FUN_080006b4": "count_bytes_080006b4",
                "param_1": "input",
                "bVar1": "exceeded_limit",
                "uVar2": "current_byte",
                "iVar3": "code_result",
                "bVar4": "byte_count",
                "PTR_FUN_080041bc": "FUN_080041bc",
                "PTR_FUN_080041bc_1": "FUN_080041bc_1",
                "PTR_FUN_080041bc_2": "FUN_080041bc_2",
                "DAT_08004b18": "max_byte_count",
                "DAT_08004b1c": "input_length"
            },
            "code": "int count_bytes_080006b4(int **input)\n{\n    bool exceeded_limit = false;\n    int byte_count = 0;\n    int DAT_08004b18 = 0x3f;\n    int DAT_08004b1c = *(byte *)((int)input + 6);\n    if (DAT_08004b1c > 1)\n    {\n        PTR_FUN_080041bc(DAT_08004b1c, 0);\n    }\n    *(undefined *)((int)input + 0x49) = 0;\n    if (*(byte *)((int)input + 5) < 4)\n    {\n        while (true)\n        {\n            int code_result = (**(code **)(**input + 8))();\n            if (code_result == 0)\n            {\n                break;\n            }\n            byte current_byte = (**(code **)(**input + 0xc))();\n            *(undefined *)((int)input + byte_count + 9) = current_byte;\n            byte_count++;\n            if (byte_count > DAT_08004b18)\n            {\n                exceeded_limit = true;\n                break;\n            }\n        }\n    }\n    if (exceeded_limit)\n    {\n        *(short *)(input + 0x15) = *(short *)(input + 0x15) + 1;\n        return -3;\n    }\n    *(short *)(input + 0x14) = *(short *)(input + 0x14) + 1;\n    return byte_count;\n}",
            "called": [
                "FUN_080041bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006b4",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "count_bytes_080006b4"
        },
        "FUN_080034da": {
            "renaming": {
                "FUN_080034da": "find_param_value_080034da",
                "param_1": "target_value",
                "param_2": "params"
            },
            "code": "int find_param_value_080034da(short *params, int target_value) {\n  while (true) {\n    if (*params == -1) {\n      return 0;\n    }\n    if (*params == target_value) {\n      break;\n    }\n    params = params + 6;\n  }\n  return *(int *)(params + 2);\n}",
            "called": [
                "FUN_080034da"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034da",
            "calling": [
                "FUN_080034da",
                "FUN_080034f4"
            ],
            "imported": false,
            "current_name": "find_param_value_080034da"
        },
        "FUN_080035fc": {
            "renaming": {
                "FUN_080035fc": "set_bits_080035fc",
                "param_1": "bits",
                "DAT_08003718": "BIT_0",
                "DAT_0800371c": "BIT_2",
                "DAT_08003720": "BIT_3",
                "DAT_08003724": "BIT_4",
                "DAT_08003728": "BIT_5",
                "DAT_0800372c": "BIT_6",
                "DAT_08003730": "BIT_8",
                "DAT_08003734": "BIT_9",
                "DAT_08003738": "BIT_10",
                "DAT_0800373c": "BIT_11",
                "DAT_08003740": "BIT_13",
                "DAT_08003744": "BIT_15",
                "DAT_08003748": "BIT_16",
                "DAT_0800374c": "config"
            },
            "code": "void set_bits_080035fc(uint32_t *bits)\n{\n    uint32_t *DAT_0800374c = (uint32_t *)DAT_0800374c;\n    if (*bits == DAT_08003718)\n    {\n        DAT_0800374c[0x11] &= 0xfffffffe;\n    }\n    else if (*bits == 0x40000000)\n    {\n        DAT_0800374c[0x10] &= 0xfffffffe;\n    }\n    else if (*bits == DAT_0800371c)\n    {\n        DAT_0800374c[0x10] &= 0xfffffffd;\n    }\n    else if (*bits == DAT_08003720)\n    {\n        DAT_0800374c[0x10] &= 0xfffffffb;\n    }\n    else if (*bits == DAT_08003724)\n    {\n        DAT_0800374c[0x10] &= 0xfffffff7;\n    }\n    else if (*bits == DAT_08003728)\n    {\n        DAT_0800374c[0x10] &= 0xffffffef;\n    }\n    else if (*bits == DAT_0800372c)\n    {\n        DAT_0800374c[0x10] &= 0xffffffdf;\n    }\n    else if (*bits == DAT_08003730)\n    {\n        DAT_0800374c[0x11] &= 0xfffffffd;\n    }\n    else if (*bits == DAT_08003734)\n    {\n        DAT_0800374c[0x11] &= 0xfffeffff;\n    }\n    else if (*bits == DAT_08003738)\n    {\n        DAT_0800374c[0x11] &= 0xfffdffff;\n    }\n    else if (*bits == DAT_0800373c)\n    {\n        DAT_0800374c[0x11] &= 0xfffbffff;\n    }\n    else if (*bits == DAT_08003740)\n    {\n        DAT_0800374c[0x10] &= 0xffffffbf;\n    }\n    else if (*bits == DAT_08003744)\n    {\n        DAT_0800374c[0x10] &= 0xffffff7f;\n    }\n    else if (*bits == DAT_08003748)\n    {\n        DAT_0800374c[0x10] &= 0xfffffeff;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fc",
            "calling": [
                "FUN_0800340c"
            ],
            "imported": false,
            "current_name": "set_bits_080035fc"
        },
        "FUN_08003dd0": {
            "renaming": {
                "FUN_08003dd0": "is_flag_set_08003dd0",
                "param_1": "flag_value",
                "uVar1": "result",
                "PTR_DAT_08003df0": "ptr_offset_constant"
            },
            "code": "bool is_flag_set_08003dd0(int flag_value) {\n  uint32_t ptr_offset = PTR_DAT_08003df0 + (uint32_t)*(byte *)(flag_value + 0x44) * 4;\n  uint32_t uVar1 = FUN_0800312c(*(undefined4 *)(ptr_offset));\n  bool is_set = (uVar1 & 0x22) == 0x22;\n  return is_set;\n}",
            "called": [
                "FUN_0800312c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003dd0",
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "imported": false,
            "current_name": "is_flag_set_08003dd0"
        },
        "FUN_08000c8c": {
            "renaming": {
                "FUN_08000c8c": "initialize_system_08000c8c",
                "local_54": "val1",
                "local_50": "val2",
                "local_3c": "val3",
                "local_38": "val4",
                "local_34": "val5",
                "local_30": "val6",
                "local_2c": "val7",
                "local_28": "reg1",
                "local_24": "reg2",
                "local_20": "flag2",
                "local_1c": "reg3",
                "local_18": "val1",
                "local_14": "val2",
                "DAT_08000d30": "PTR_DAT_08000d30",
                "DAT_08000d34": "PTR_DAT_08000d34",
                "DAT_08000d38": "PTR_DAT_08000d38",
                "FUNC_0800201c": "initialize_registers",
                "FUN_08001f9c": "perform_initialization",
                "FUN_08002488": "initialize_values",
                "FUN_080025e0": "calculate_value",
                "FUN_08000ee0": "set_value",
                "FUN_08000f2c": "update_value",
                "FUN_08000e60": "reset_value"
            },
            "code": "void initialize_system_08000c8c(void)\n{\n  uint32_t reg1;\n  uint32_t flag1;\n  uint32_t reg2;\n  uint32_t flag2;\n  uint32_t reg3;\n  uint32_t val1;\n  uint32_t val2;\n  uint32_t val3;\n  uint32_t val4;\n  uint32_t val5;\n  uint32_t val6;\n  uint32_t val7;\n\n  reg1 = *(uint32_t *)(DAT_08000d30 + 0x40);\n  reg1 |= 0x10000000;\n  *(uint32_t *)(DAT_08000d30 + 0x40) = reg1;\n  flag1 = *DAT_08000d34;\n  flag1 |= 0xc000;\n  *DAT_08000d34 = flag1;\n  val1 = 1;\n  val2 = 0x50000;\n  val3 = 2;\n  val4 = 0x400000;\n  val5 = 8;\n  val6 = 0x150;\n  val7 = 2;\n  FUNC_0800201c(&val1, &val2, &val3, &val4, &val5, &val6, &val7);\n  FUN_08001f9c();\n  reg2 = 0xf;\n  flag2 = 2;\n  reg3 = 0;\n  val1 = 0x1400;\n  val2 = 0x1000;\n  FUN_08002488(&reg2, 5, &flag2, &reg3, &val1, &val2);\n  reg1 = FUN_080025e0();\n  reg2 = (uint32_t)((uint64_t)DAT_08000d38 * (uint64_t)reg1 >> 0x26);\n  FUN_08000ee0(reg2);\n  FUN_08000f2c(4);\n  FUN_08000e60(0xffffffff, 0, 0);\n}",
            "called": [
                "FUN_08000ee0",
                "FUN_08000f2c",
                "FUN_0800201c",
                "FUN_08000e60",
                "FUN_08001f9c",
                "FUN_080025e0",
                "FUN_08002488"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c8c",
            "calling": [
                "FUN_080034ce"
            ],
            "imported": false,
            "current_name": "initialize_system_08000c8c"
        },
        "FUN_08000a4e": {
            "renaming": {
                "FUN_08000a4e": "calculate_result_08000a4e",
                "param_1": "input_address",
                "param_2": "output_address",
                "bVar1": "input_byte",
                "uVar2": "result_value",
                "FUN_08004640": "calculate_index",
                "*(undefined *)(param_1 + 0xd)": "input_byte",
                "*(undefined *)(param_1 + 0xe)": "input_byte_2",
                "*(undefined2 *)(param_2 + (uint)bVar1 * 2)": "*(uint16_t *)(output_address + result_index * 2)",
                "*(undefined *)(param_1 + 0x49)": "*(byte *)(input_address + 0x49)",
                "FUN_0800076c": "update_input"
            },
            "code": "int calculate_result_08000a4e(int input_address,int output_address) {\n  byte input_byte = *(byte *)(input_address + 0xb);\n  byte input_byte_2 = *(byte *)(input_address + 0xc);\n  uint8_t result_index = calculate_index(input_byte, input_byte_2);\n  uint16_t result_value = calculate_value(*(byte *)(input_address + 0xd), *(byte *)(input_address + 0xe));\n  *(uint16_t *)(output_address + result_index * 2) = result_value;\n  *(byte *)(input_address + 0x49) = 6;\n  update_input(input_address);\n  return 8;\n}\n\nuint8_t calculate_index(byte input_byte, byte input_byte_2) {\n  return (input_byte + input_byte_2) % 256;\n}\n\nuint16_t calculate_value(byte input_byte, byte input_byte_2) {\n  return (input_byte << 8) | input_byte_2;\n}\n\nvoid update_input(int input_address) {\n  // update input\n}\n",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a4e",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "calculate_result_08000a4e"
        },
        "FUN_08004658": {
            "renaming": {
                "FUN_08004658": "execute_uninterrupted_task_08004658",
                "FUN_08000c4c": "initialize_task",
                "FUN_08000c64": "perform_subtask",
                "FUN_08004338": "finalize_task",
                "DAT_08004674": "data_flag"
            },
            "code": "void execute_uninterrupted_task_08004658(void)\n{\n  do_nothing();\n  initialize_task();\n  do {\n    do {\n      perform_subtask();\n    } while (DAT_08004674 == 0);\n    finalize_task();\n  } while(true);\n}",
            "called": [
                "FUN_08004646",
                "FUN_08000c64",
                "FUN_08004338",
                "FUN_08000c4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004658",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "execute_uninterrupted_task_08004658"
        },
        "FUN_080034f4": {
            "renaming": {
                "FUN_080034f4": "check_param_080034f4",
                "param_1": "param",
                "uVar1": "result",
                "FUN_080034da": "get_result"
            },
            "code": "int check_param_080034f4(int param) {\n    int result;\n    if (param != -1) {\n        result = get_result();\n        return result;\n    }\n    return 0;\n}",
            "called": [
                "FUN_080034da"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034f4",
            "calling": [
                "FUN_08003414",
                "FUN_08003d18",
                "FUN_08003cc8",
                "FUN_08003978",
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "check_param_080034f4"
        },
        "FUN_0800355e": {
            "renaming": {
                "FUN_0800355e": "find_short_in_array_0800355e",
                "param_1": "search_value",
                "param_2": "array",
                "*param_2": "*array"
            },
            "code": "int find_short_in_array_0800355e(int search_value, short *array) {\n    if (search_value == -1) {\n        return 0;\n    }\n    while(*array != -1) {\n        if (search_value == *array) {\n            return 1;\n        }\n        array++;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800355e",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "find_short_in_array_0800355e"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "execute_and_set_result_if_error_0800573c",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr",
                "iVar2": "execution_result"
            },
            "code": "void execute_and_set_result_if_error_0800573c(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3) {\n  undefined *ptr = PTR_DAT_0800575c;\n  *(undefined4 *)PTR_DAT_0800575c = 0;\n  int execution_result = execute(arg1, arg2, arg3, arg3, arg3);\n  if ((execution_result == -1) && (*(int *)ptr != 0)) {\n    *result = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "FUN_08005608"
            ],
            "imported": false,
            "current_name": "execute_and_set_result_if_error_0800573c"
        },
        "FUN_08003e54": {
            "renaming": {
                "FUN_08003e54": "add_to_list_if_not_present_08003e54",
                "param_1": "address",
                "param_2": "value",
                "param_3": "size",
                "param_4": "param_4",
                "iVar1": "list_index",
                "uVar2": "byte_value"
            },
            "code": "void add_to_list_if_not_present_08003e54(int address, int value, int size, int param_4)\n{\n  int list_index;\n  uint byte_value;\n  \n  if (address != 0) {\n    list_index = get_list_index();\n    if (list_index == -1) {\n      byte_value = (uint)*(byte *)(address + 0x44);\n      *(int *)(list_address + byte_value * 4) = address;\n      *(int *)(list_value + byte_value * 4) = value;\n      add_to_list((int)*(char *)(address + 0x5c),0,1,byte_value,param_4);\n      set_list_entry_status((int)*(char *)(address + 0x5c));\n      set_list_entry_flag(*(int *)(list_flag + (uint)*(byte *)(address + 0x44) * 4),address + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n",
            "called": [
                "FUN_08003dd0",
                "FUN_08000e60",
                "FUN_08000ec4",
                "FUN_08002efa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e54",
            "calling": [
                "FUN_08004388"
            ],
            "imported": false,
            "current_name": "add_to_list_if_not_present_08003e54"
        },
        "FUN_08004fdc": {
            "renaming": {
                "FUN_08004fdc": "process_data_08004fdc",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "iVar1": "ptr",
                "uVar2": "data1",
                "uStack_c": "data2",
                "uStack_8": "data3",
                "uStack_4": "data4",
                "PTR_PTR_DAT_08005008": "PTR_DATA",
                "FUNC_08004a84": "perform_operation",
                "FUN_080053a0": "free_data"
            },
            "code": "void process_data_08004fdc(int data1, int data2, int data3, int data4)\n{\n  int ptr = *(int *)PTR_PTR_DAT_08005008;\n  if ((ptr != 0) && (*(int *)(ptr + 0x18) == 0)) {\n    free_data(ptr);\n  }\n  perform_operation(ptr, *(int *)(ptr + 8), data1, &data2, data1, &data2);\n  return;\n}",
            "called": [
                "FUN_080053a0",
                "FUN_08004a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fdc",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "process_data_08004fdc"
        },
        "FUN_080056d4": {
            "renaming": {
                "FUN_080056d4": "initialize_param_080056d4",
                "param_1": "result",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "ptr",
                "iVar2": "ret_val"
            },
            "code": "void initialize_param_080056d4(int *result, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n  undefined *ptr = PTR_DAT_080056f4;\n  *(undefined4 *)ptr = 0;\n  int ret_val = FUN_080040d6(arg2, arg3, arg3, 0, arg4);\n  if ((ret_val == -1) && (*(int *)ptr != 0)) {\n    *result = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_080040d6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d4",
            "calling": [
                "FUN_080054b4"
            ],
            "imported": false,
            "current_name": "initialize_param_080056d4"
        },
        "thunk_FUN_0800410c": {
            "renaming": {
                "thunk_FUN_0800410c": "return_one_thunk_0800410c",
                "undefined4": "int",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "int return_one_thunk_0800410c(void)\n{\n    int result = 1;\n    return result;\n}",
            "called": [
                "FUN_0800410c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "FUN_080055d0"
            ],
            "imported": false,
            "current_name": "return_one_thunk_0800410c"
        },
        "FUN_080033d8": {
            "renaming": {
                "FUN_080033d8": "process_data_080033d8",
                "param_1": "data",
                "local_1c": "values",
                "FUN_080034f4": "calculate_value",
                "PTR_DAT_08003408": "PTR_DAT_08003408",
                "FUN_08003380": "check_data",
                "FUN_08000f72": "process_values",
                "FUN_08000f56": "print_values"
            },
            "code": "void process_data_080033d8(int data)\n{\n  int result;\n  int values[5];\n  values[0] = calculate_value(data, PTR_DAT_08003408);\n  if ((values[0] != 0) && ((result = check_data(data), result == 0 || (result == 0x10)))) {\n    process_values(values,result);\n    print_values(values);\n  }\n  return;\n}",
            "called": [
                "FUN_08003380",
                "FUN_08000f72",
                "FUN_08000f56",
                "FUN_080034f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033d8",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "process_data_080033d8"
        },
        "FUN_080029c8": {
            "renaming": {
                "FUN_080029c8": "FUNC_080029c8"
            },
            "code": "\nvoid FUNC_080029c8(int *param_1)\n\n{\n  ulonglong uVar1;\n  uint uVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  int iVar10;\n  int iVar11;\n  int iVar12;\n  \n  *(uint *)(*param_1 + 0x10) = *(uint *)(*param_1 + 0x10) & 0xffffcfff | param_1[3];\n  *(uint *)(*param_1 + 0xc) =\n       *(uint *)(*param_1 + 0xc) & 0xffff69f3 | param_1[2] | param_1[4] | param_1[5] | param_1[7];\n  *(uint *)(*param_1 + 0x14) = *(uint *)(*param_1 + 0x14) & 0xfffffcff | param_1[6];\n  if (param_1[7] == 0x8000) {\n    iVar12 = *param_1;\n    if ((iVar12 != 0x40011000) && (iVar12 != 0x40011400)) {\n      iVar3 = FUN_080025ec();\n      uVar2 = DAT_08002d08;\n      iVar8 = param_1[1];\n      uVar1 = (ulonglong)DAT_08002d08;\n      iVar4 = FUN_080025ec();\n      iVar9 = param_1[1];\n      iVar5 = FUN_080025ec();\n      iVar10 = param_1[1];\n      iVar6 = FUN_080025ec();\n      iVar11 = param_1[1];\n      iVar7 = FUN_080025ec();\n      *(uint *)(iVar12 + 8) =\n           ((uint)((int)((ulonglong)uVar2 *\n                         (ulonglong)\n                         (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 1) +\n                          (uint)((ulonglong)uVar2 *\n                                 ((ulonglong)(uint)(iVar7 * 0x19) /\n                                 (ulonglong)(uint)(param_1[1] << 1)) >> 0x25) * -100) * 8 + 0x32) >>\n                        0x20) << 0x18) >> 0x1d) +\n           ((uint)((ulonglong)uVar2 *\n                   (ulonglong)\n                   (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 1) +\n                    (uint)((ulonglong)uVar2 *\n                           ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 1)) >>\n                          0x25) * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n           (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 1)) >> 0x25)\n           * 0x10;\n      return;\n    }\n    iVar3 = FUN_0800260c();\n    uVar2 = DAT_08002d08;\n    iVar8 = param_1[1];\n    uVar1 = (ulonglong)DAT_08002d08;\n    iVar4 = FUN_0800260c();\n    iVar9 = param_1[1];\n    iVar5 = FUN_0800260c();\n    iVar10 = param_1[1];\n    iVar6 = FUN_0800260c();\n    iVar11 = param_1[1];\n    iVar7 = FUN_0800260c();\n    *(uint *)(iVar12 + 8) =\n         ((uint)((int)((ulonglong)uVar2 *\n                       (ulonglong)\n                       (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 1) +\n                        (uint)((ulonglong)uVar2 *\n                               ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 1)\n                               ) >> 0x25) * -100) * 8 + 0x32) >> 0x20) << 0x18) >> 0x1d) +\n         ((uint)((ulonglong)uVar2 *\n                 (ulonglong)\n                 (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 1) +\n                  (uint)((ulonglong)uVar2 *\n                         ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 1)) >> 0x25)\n                  * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n         (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 1)) >> 0x25) *\n         0x10;\n    return;\n  }\n  iVar12 = *param_1;\n  if ((iVar12 != DAT_08002d04) && (iVar12 != DAT_08002d04 + 0x400)) {\n    iVar3 = FUN_080025ec();\n    uVar2 = DAT_08002d08;\n    iVar8 = param_1[1];\n    uVar1 = (ulonglong)DAT_08002d08;\n    iVar4 = FUN_080025ec();\n    iVar9 = param_1[1];\n    iVar5 = FUN_080025ec();\n    iVar10 = param_1[1];\n    iVar6 = FUN_080025ec();\n    iVar11 = param_1[1];\n    iVar7 = FUN_080025ec();\n    *(uint *)(iVar12 + 8) =\n         ((uint)((int)((ulonglong)uVar2 *\n                       (ulonglong)\n                       (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 2) +\n                        (uint)((ulonglong)uVar2 *\n                               ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 2)\n                               ) >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n         ((uint)((ulonglong)uVar2 *\n                 (ulonglong)\n                 (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 2) +\n                  (uint)((ulonglong)uVar2 *\n                         ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 2)) >> 0x25)\n                  * -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n         (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 2)) >> 0x25) *\n         0x10;\n    return;\n  }\n  iVar3 = FUN_0800260c();\n  uVar2 = DAT_08002d08;\n  iVar8 = param_1[1];\n  uVar1 = (ulonglong)DAT_08002d08;\n  iVar4 = FUN_0800260c();\n  iVar9 = param_1[1];\n  iVar5 = FUN_0800260c();\n  iVar10 = param_1[1];\n  iVar6 = FUN_0800260c();\n  iVar11 = param_1[1];\n  iVar7 = FUN_0800260c();\n  *(uint *)(iVar12 + 8) =\n       ((uint)((int)((ulonglong)uVar2 *\n                     (ulonglong)\n                     (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 2) +\n                      (uint)((ulonglong)uVar2 *\n                             ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 2))\n                            >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n       ((uint)((ulonglong)uVar2 *\n               (ulonglong)\n               (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 2) +\n                (uint)((ulonglong)uVar2 *\n                       ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 2)) >> 0x25) *\n                -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n       (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 2)) >> 0x25) *\n       0x10;\n  return;\n}\n\n",
            "called": [
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080029c8",
            "calling": [
                "FUN_08002d72"
            ],
            "imported": false,
            "current_name": "FUNC_080029c8"
        },
        "FUN_08002488": {
            "renaming": {
                "FUN_08002488": "configure_device_08002488",
                "param_1": "device_config",
                "param_2": "config_size",
                "puVar1": "device_base_address",
                "iVar2": "time_start",
                "iVar3": "time_end",
                "uVar4": "config_value"
            },
            "code": "int configure_device_08002488(uint *device_config,uint config_size)\n{\n  uint *device_base_address;\n  int time_start, time_end;\n  uint config_value;\n  \n  device_base_address = DAT_080025d0;\n  if (device_config == (uint *)0x0) {\n    return 1;\n  }\n  if ((*device_base_address & 0xf) < config_size) {\n    *(char *)device_base_address = (char)config_size;\n    if (config_size != (*device_base_address & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*device_config & 2) != 0) {\n    if ((*device_config & 4) != 0) {\n      DAT_080025d4[2] = DAT_080025d4[2] | 0x1c00;\n    }\n    if ((*device_config & 8) != 0) {\n      DAT_080025d4[2] = DAT_080025d4[2] | 0xe000;\n    }\n    DAT_080025d4[2] = DAT_080025d4[2] & 0xffffff0f | device_config[2];\n  }\n  if ((*device_config & 1) != 0) {\n    config_value = device_config[1];\n    if (config_value == 1) {\n      if ((*DAT_080025d4 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if (config_value - 2 < 2) {\n      if ((*DAT_080025d4 & 0x2000000) == 0) {\n        return 1;\n      }\n    }\n    else if ((*DAT_080025d4 & 2) == 0) {\n      return 1;\n    }\n    DAT_080025d4[2] = config_value | DAT_080025d4[2] & 0xfffffffc;\n    time_start = FUN_08000e30();\n    while( true ) {\n      if ((DAT_080025d4[2] & 0xc) == device_config[1] * 4) break;\n      time_end = FUN_08000e30();\n      if (5000 < (uint)(time_end - time_start)) {\n        return 3;\n      }\n    }\n  }\n  device_base_address = DAT_080025d0;\n  if (config_size < (*DAT_080025d0 & 0xf)) {\n    *(char *)DAT_080025d0 = (char)config_size;\n    if (config_size != (*device_base_address & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*device_config & 4) != 0) {\n    DAT_080025d4[2] = DAT_080025d4[2] & 0xffffe3ff | device_config[3];\n  }\n  if ((*device_config & 8) != 0) {\n    DAT_080025d4[2] = DAT_080025d4[2] & 0xffff1fff | device_config[4] << 3;\n  }\n  config_value = FUN_080023b4();\n  *(uint *)PTR_DAT_080025dc = config_value >> PTR_DAT_080025d8[(DAT_080025d4[2] << 0x18) >> 0x1c];\n  FUN_08000d98(0xf);\n  return 0;\n}\n",
            "called": [
                "FUN_080023b4",
                "FUN_08000d98",
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002488",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "configure_device_08002488"
        },
        "FUN_08004544": {
            "renaming": {
                "FUN_08004544": "initialize_params_08004544",
                "param_1": "params",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5"
            },
            "code": "void initialize_params_08004544(undefined4 *params, undefined param_2, undefined param_3, undefined param_4, undefined param_5)\n{\n    *params = PTR_PTR_LAB_0800450a_1_0800455c;\n    *(undefined *)(params + 1) = param_2;\n    *(undefined *)(params + 5) = param_3;\n    *(undefined *)(params + 6) = param_4;\n    *(undefined *)(params + 7) = param_5;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004544",
            "calling": [
                "FUN_08004560"
            ],
            "imported": false,
            "current_name": "initialize_params_08004544"
        },
        "FUN_08003cc8": {
            "renaming": {
                "FUN_08003cc8": "process_data_08003cc8",
                "sVar1": "data",
                "puVar2": "ptr",
                "uVar3": "result",
                "iVar4": "status",
                "uVar5": "temp"
            },
            "code": "void process_data_08003cc8(void)\n{\n  short data;\n  undefined *ptr;\n  undefined2 result;\n  int status;\n  undefined4 temp;\n  \n  data = *(short *)(PTR_DAT_08003d08 + 0x9a);\n  status = FUN_080034f4((int)data,PTR_DAT_08003d0c);\n  if (status != 0) {\n    temp = FUN_080034f4((int)data,PTR_DAT_08003d0c);\n    result = FUN_0800351e(temp,PTR_DAT_08003d10);\n    ptr = PTR_DAT_08003d14;\n    *(undefined2 *)(PTR_DAT_08003d14 + 0x5a) = result;\n    *(short *)(ptr + 0x58) = data;\n    *(undefined4 *)(ptr + 0x48) = 10000;\n    *(undefined4 *)(ptr + 0x54) = 0;\n    *(undefined4 *)(ptr + 0x4c) = 0;\n    *(undefined4 *)(ptr + 0x50) = 0;\n    FUNC_08003978(ptr);\n  }\n  return;\n}",
            "called": [
                "FUN_08003978",
                "FUN_0800351e",
                "FUN_080034f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003cc8",
            "calling": [
                "FUN_08003d18"
            ],
            "imported": false,
            "current_name": "process_data_08003cc8"
        },
        "FUN_08002d70": {
            "renaming": {
                "FUN_08002d70": "do_nothing_08002d70"
            },
            "code": "\nvoid do_nothing_08002d70(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d70",
            "calling": [
                "FUN_08002d72"
            ],
            "imported": false,
            "current_name": "do_nothing_08002d70"
        },
        "FUN_08000fb4": {
            "renaming": {
                "FUN_08000fb4": "update_data_08000fb4",
                "param_1": "data_in",
                "param_2": "data_out",
                "puVar1": "data_ptr_1",
                "puVar2": "data_ptr_2",
                "uVar3": "bit_mask_3",
                "uVar4": "bit_mask_2",
                "uVar5": "index_1",
                "uVar6": "bit_mask_1",
                "uVar7": "bit_mask_4",
                "uVar9": "bit_mask_5",
                "iVar8": "index_3",
                "iVar10": "index_2"
            },
            "code": "void update_data_08000fb4(uint *data_in, uint *data_out)\n{\n  uint *data_ptr_1;\n  uint *data_ptr_2;\n  uint bit_mask_1;\n  uint bit_mask_2;\n  uint bit_mask_3;\n  uint bit_mask_4;\n  uint bit_mask_5;\n  int index_1;\n  uint index_2;\n  int index_3;\n  for (index_1 = 0; index_1 < 16; index_1++) {\n    bit_mask_1 = 1 << (index_1 & 0xff);\n    bit_mask_2 = bit_mask_1 & *data_out;\n    if (bit_mask_1 == bit_mask_2) {\n      if ((data_out[1] == 2) || (data_out[1] == 0x12)) {\n        index_3 = (index_1 >> 3) + 8;\n        index_2 = (index_1 & 7) << 2;\n        data_in[index_3] = data_in[index_3] & ~(0xf << index_2) | data_out[4] << index_2;\n      }\n      bit_mask_5 = index_1 << 1;\n      bit_mask_3 = ~(3 << (bit_mask_5 & 0xff));\n      *data_in = *data_in & bit_mask_3 | (data_out[1] & 3) << (bit_mask_5 & 0xff);\n      bit_mask_4 = data_out[1];\n      if (((bit_mask_4 - 1 < 2) || (bit_mask_4 == 0x11)) || (bit_mask_4 == 0x12)) {\n        data_in[2] = data_in[2] & bit_mask_3 | data_out[3] << (bit_mask_5 & 0xff);\n        data_in[1] = data_in[1] & ~bit_mask_1 | ((data_out[1] << 0x1b) >> 0x1f) << (index_1 & 0xff);\n      }\n      data_in[3] = bit_mask_3 & data_in[3] | data_out[2] << (bit_mask_5 & 0xff);\n      if ((data_out[1] & 0x10000000) != 0) {\n        *(uint *)(PTR_DAT_0800118c + 0x44) = *(uint *)(PTR_DAT_0800118c + 0x44) | 0x4000;\n        index_2 = (index_1 & 3) << 2;\n        if (data_in == PTR_DAT_08001190) {\n          index_3 = 0;\n        }\n        else if (data_in == PTR_DAT_08001194) {\n          index_3 = 1;\n        }\n        else if (data_in == PTR_DAT_08001194 + 0x100) {\n          index_3 = 2;\n        }\n        else if (data_in == PTR_DAT_08001194 + 0x200) {\n          index_3 = 3;\n        }\n        else if (data_in == PTR_DAT_08001194 + 0x300) {\n          index_3 = 4;\n        }\n        else if (data_in == PTR_DAT_08001194 + 0x400) {\n          index_3 = 5;\n        }\n        else if (data_in == PTR_DAT_08001194 + 0x500) {\n          index_3 = 6;\n        }\n        else if (data_in == PTR_DAT_08001194 + 0x600) {\n          index_3 = 7;\n        }\n        else if (data_in == PTR_DAT_08001194 + 0x700) {\n          index_3 = 8;\n        }\n        else if (data_in == PTR_DAT_08001194 + 0x800) {\n          index_3 = 9;\n        }\n        else {\n          index_3 = 10;\n        }\n        *(uint *)(PTR_DAT_08001184 + ((index_1 >> 2) + 2) * 4) = *(uint *)(PTR_DAT_08001184 + ((index_1 >> 2) + 2) * 4) & ~(0xf << index_2) | index_3 << index_2;\n        data_ptr_1 = PTR_DAT_08001188;\n        bit_mask_1 = ~bit_mask_2;\n        bit_mask_3 = *PTR_DAT_08001188 & bit_mask_1;\n        if ((data_out[1] & 0x10000) != 0) {\n          bit_mask_3 = bit_mask_2 | *PTR_DAT_08001188;\n        }\n        *PTR_DAT_08001188 = bit_mask_3;\n        data_ptr_2 = PTR_DAT_08001188;\n        bit_mask_3 = bit_mask_1 & data_ptr_1[1];\n        if ((data_out[1] & 0x20000) != 0) {\n          bit_mask_3 = bit_mask_2 | data_ptr_1[1];\n        }\n        PTR_DAT_08001188[1] = bit_mask_3;\n        data_ptr_1 = PTR_DAT_08001188;\n        bit_mask_3 = bit_mask_1 & data_ptr_2[2];\n        if ((data_out[1] & 0x100000) != 0) {\n          bit_mask_3 = bit_mask_2 | data_ptr_2[2];\n        }\n        PTR_DAT_08001188[2] = bit_mask_3;\n        bit_mask_2 = bit_mask_1 & data_ptr_1[3];\n        if ((data_out[1] & 0x200000) != 0) {\n          bit_mask_2 = bit_mask_2 | bit_mask_2 | data_ptr_1[3];\n        }\n        PTR_DAT_08001188[3] = bit_mask_2;\n      }\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fb4",
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "imported": false,
            "current_name": "update_data_08000fb4"
        },
        "FUN_08001718": {
            "renaming": {
                "FUN_08001718": "do_nothing_08001718"
            },
            "code": "\nvoid do_nothing_08001718(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001718",
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "imported": false,
            "current_name": "do_nothing_08001718"
        },
        "FUN_08001bfc": {
            "renaming": {
                "FUN_08001bfc": "process_input_08001bfc",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "ptr_1",
                "puVar3": "ptr_2"
            },
            "code": "uint32_t process_input_08001bfc(uint32_t **input)\n{\n  char current_char = *(char *)((int)input + 0x3d);\n  (*input)[1] &= 0xfffff8ff;\n  **input |= 1;\n  **input &= 0xfffffbff;\n  uint32_t *ptr_1 = *input;\n  if ((ptr_1[1] & 0x800) != 0) {\n    if ((*(char *)((int)input + 0x3d) == '\"') || (*(char *)((int)input + 0x3d) == '*')) {\n      *(int16_t *)((int)input + 0x2a) = (int16_t)*(uint32_t *)(*input[0xe] + 4);\n    }\n    else {\n      *(int16_t *)((int)input + 0x2a) = (int16_t)*(uint32_t *)(*input[0xd] + 4);\n    }\n  }\n  if (*(int16_t *)((int)input + 0x2a) != 0) {\n    if ((ptr_1[5] & 4) != 0) {\n      uint32_t *ptr_2 = input[9];\n      input[9] = (uint32_t *)((int)ptr_2 + 1);\n      *(char *)ptr_2 = (char)ptr_1[4];\n      *(int16_t *)((int)input + 0x2a) -= 1;\n    }\n    if (((*input)[5] & 0x40) != 0) {\n      ptr_1 = input[9];\n      input[9] = (uint32_t *)((int)ptr_1 + 1);\n      *(char *)ptr_1 = (char)(*input)[4];\n      *(int16_t *)((int)input + 0x2a) -= 1;\n    }\n    input[0x10] = (uint32_t *)((uint32_t)input[0x10] | 4);\n  }\n  if (input[0x10] == (uint32_t *)0x0) {\n    if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n      input[0xb] = PTR_DAT_08001cfc;\n      input[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      *(undefined *)((int)input + 0x3e) = 0;\n      do_something_080038d0();\n    }\n    else if ((input[0xc] == (uint32_t *)0x22) || (current_char == '\"')) {\n      input[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      *(undefined *)((int)input + 0x3e) = 0;\n      do_nothing_0800160c();\n    }\n  }\n  else {\n    do_something_else_08001ab0();\n  }\n  return 0;\n}",
            "called": [
                "FUN_080038d0",
                "FUN_0800160c",
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bfc",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_08001bfc"
        },
        "FUN_08002d72": {
            "renaming": {
                "FUN_08002d72": "initialize_device_08002d72",
                "param_1": "device_ptr",
                "*(char *)((int)param_1 + 0x39)": "device_ptr[9]",
                "*(undefined *)(param_1 + 0xe)": "device_ptr[14]",
                "do_nothing_08002d70()": "do_nothing()",
                "*(uint *)(*param_1 + 0xc)": "*(unsigned int *)(device_ptr[0] + 12)",
                "FUNC_080029c8(param_1)": "initialize_device_subroutine(device_ptr)",
                "*(uint *)(*param_1 + 0x10)": "*(unsigned int *)(device_ptr[0] + 16)",
                "*(uint *)(*param_1 + 0x14)": "*(unsigned int *)(device_ptr[0] + 20)",
                "param_1[0xf]": "device_ptr[15]",
                "*(undefined *)((int)param_1 + 0x3a)": "device_ptr[10]"
            },
            "code": "int initialize_device_08002d72(int *device_ptr) {\n\tif (device_ptr != NULL) {\n\t\tif (device_ptr[9] == 0) {\n\t\t\tdevice_ptr[14] = 0;\n\t\t\tdo_nothing();\n\t\t}\n\t\tdevice_ptr[9] = 36;\n\t\t*(unsigned int *)(device_ptr[0] + 12) &= 0xFFFFDFFF;\n\t\tinitialize_device_08002d72_subroutine(device_ptr);\n\t\t*(unsigned int *)(device_ptr[0] + 16) &= 0xFFFFB7FF;\n\t\t*(unsigned int *)(device_ptr[0] + 20) &= 0xFFFFFFD5;\n\t\t*(unsigned int *)(device_ptr[0] + 12) |= 0x2000;\n\t\tdevice_ptr[15] = 0;\n\t\tdevice_ptr[9] = 32;\n\t\tdevice_ptr[10] = 32;\n\t\treturn 0;\n\t}\n\treturn 1;\n}",
            "called": [
                "FUN_080029c8",
                "FUN_08002d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d72",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "initialize_device_08002d72"
        },
        "FUN_080007f0": {
            "renaming": {
                "FUN_080007f0": "check_valid_input_080007f0",
                "param_1": "input",
                "param_2": "num1",
                "param_3": "num2",
                "param_4": "num3",
                "bVar1": "found_match",
                "bVar2": "current_byte",
                "cVar3": "char1",
                "cVar4": "char2",
                "iVar5": "num1",
                "uVar6": "index",
                "iVar7": "num4"
            },
            "code": "int check_valid_input_080007f0(int input, int num1, uint num2, int num3) {\n  bool found_match;\n  byte current_byte;\n  char char1;\n  char char2;\n  int num4;\n  uint index = 0;\n  do {\n    if (index > 7) {\n      found_match = false;\n      if (!found_match) {\n        input += 2;\n        return 1;\n      }\n      num4 = *(byte *)(input + 10) - 1;\n      switch(*(byte *)(input + 10)) {\n      case 1:\n      case 2:\n      case 0xf:\n        goto switchD_08000816_caseD_1;\n      case 3:\n      case 4:\n      case 0x10:\n        char1 = calculate_value(*(undefined *)(input + 0xb),*(undefined *)(input + 0xc),num2,num4,num3);\n        char2 = calculate_value(*(undefined *)(input + 0xd),*(undefined *)(input + 0xe));\n        if (*(byte *)(input + 0x60) < (byte)(char2 + char1)) {\n          return 2;\n        }\n        return 0;\n      case 5:\n        num4 = calculate_value(*(undefined *)(input + 0xb),*(undefined *)(input + 0xc),num2,num4,num3);\n        if ((uint)*(byte *)(input + 0x60) < (uint)(num4 << 0x14) >> 0x18) {\n          return 2;\n        }\n        return 0;\n      case 6:\n        current_byte = calculate_value(*(undefined *)(input + 0xb),*(undefined *)(input + 0xc),num2,num4,num3);\n        if (*(byte *)(input + 0x60) < current_byte) {\n          return 2;\n        }\n        return 0;\n      default:\n        return 0;\n      }\n    }\n    num2 = (uint)*(byte *)(input + 10);\n    if ((byte)PTR_DAT_080008c8[index] == num2) {\n      found_match = true;\n      goto LAB_0800080a;\n    }\n    index++;\n  } while(true);\nswitchD_08000816_caseD_1:\n  num4 = calculate_value(*(undefined *)(input + 0xb),*(undefined *)(input + 0xc),num2,num4,num3);\n  num1 = calculate_value(*(undefined *)(input + 0xd),*(undefined *)(input + 0xe));\n  if ((uint)*(byte *)(input + 0x60) < (((uint)(num4 << 0xc) >> 0x10) + ((uint)(num1 << 0xc) >> 0x10) & 0xff)) {\n    return 2;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080007f0",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "check_valid_input_080007f0"
        },
        "FUN_0800562a": {
            "renaming": {
                "FUN_0800562a": "validate_and_execute_0800562a",
                "param_1": "result",
                "param_2": "input",
                "param_3": "arg1",
                "param_4": "arg2",
                "sVar1": "input_short",
                "puVar2": "ptr_dat",
                "iVar3": "execution_result"
            },
            "code": "void validate_and_execute_0800562a(int *result, int input, undefined4 arg1, undefined4 arg2) {\n  short input_short = *(short *)(input + 0xe);\n  *(ushort *)(input + 0xc) = *(ushort *)(input + 0xc) & 0xefff;\n  undefined *ptr_dat = PTR_DAT_080056b0;\n  *(undefined4 *)ptr_dat = 0;\n  int execution_result = execute(input_short, arg1, arg2, arg2, arg2, unaff_r4, unaff_r5, in_lr);\n  if (execution_result == -1 && *(int *)ptr_dat != 0) {\n    *result = *(int *)ptr_dat;\n  }\n  return;\n}",
            "called": [
                "FUN_080040ec",
                "FUN_08005718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800562a",
            "calling": [],
            "imported": false,
            "current_name": "validate_and_execute_0800562a"
        },
        "FUN_080044d8": {
            "renaming": {
                "FUN_080044d8": "print_if_param1_is_1_080044d8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "PTR_DAT_080044f8": "PTR_PRINT",
                "DAT_080044f4": "DAT_PRINT"
            },
            "code": "void print_if_param1_is_1_080044d8(int param1, int param2, undefined4 param3, undefined4 param4)\n{\n  if (param1 != 1) {\n    return;\n  }\n  if (param2 == 0xffff) {\n    print(PTR_DAT_080044f8, DAT_080044f4, param3, 0xffff, param4);\n  }\n  return;\n}",
            "called": [
                "FUN_0800447c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044d8",
            "calling": [],
            "imported": false,
            "current_name": "print_if_param1_is_1_080044d8"
        },
        "FUN_08003df4": {
            "renaming": {
                "FUN_08003df4": "is_valid_08003df4",
                "param_1": "param",
                "uVar1": "result",
                "PTR_DAT_08003e14": "ptr_data",
                "byte": "byte_val",
                "FUN_0800312c": "get_value"
            },
            "code": "bool is_valid_08003df4(int param)\n                      {\n                        uint result;\n                        uint ptr = *(undefined4 *)(PTR_DAT_08003e14 + (uint)*(byte *)(param + 0x44) * 4);\n                        result = FUN_0800312c(ptr);\n                        return (result & 0x21) == 0x21;\n                      }",
            "called": [
                "FUN_0800312c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003df4",
            "calling": [
                "FUN_080042e8"
            ],
            "imported": false,
            "current_name": "is_valid_08003df4"
        },
        "FUN_08005400": {
            "renaming": {
                "FUN_08005400": "find_and_initialize_08005400",
                "param_1": "error_code",
                "param_2": "num_params",
                "param_3": "param_2",
                "param_4": "param_3",
                "piVar1": "current_item",
                "piVar2": "next_item",
                "iVar3": "item_list_pointer",
                "ppiVar4": "next_item",
                "PTR_PTR_DAT_08005474": "item_list_pointer"
            },
            "code": "int* find_and_initialize_08005400(int* error_code, int num_params, int param_2, int param_3)\n{\n    int* result;\n    int* current_item;\n    int* next_item;\n    int current_index;\n    int** PTR_PTR_DAT_08005474 = *(int***)0x08005474;\n    if (*(int*)(PTR_PTR_DAT_08005474 + 0x18) == 0)\n    {\n        initialize_items(PTR_PTR_DAT_08005474);\n    }\n    next_item = PTR_PTR_DAT_08005474 + 0x48;\n    do\n    {\n        current_item = next_item[1];\n        current_index = num_params - 1;\n        while (current_index >= 0)\n        {\n            if (*(short*)(current_item + 0xc) == 0)\n            {\n                *(short*)(current_item + 0xe) = -1;\n                *(current_item + 0xc) = 1;\n                current_item[0x19] = 0;\n                *current_item = 0;\n                current_item[2] = 0;\n                current_item[1] = 0;\n                current_item[4] = 0;\n                current_item[5] = 0;\n                current_item[6] = 0;\n                initialize_more_items(current_item + 0x17, 0, 8, 1, param_3);\n                current_item[0xd] = 0;\n                current_item[0xe] = 0;\n                current_item[0x12] = 0;\n                current_item[0x13] = 0;\n                result = current_item;\n                return result;\n            }\n            current_item += 0x1a;\n            current_index--;\n        }\n        if (*PTR_PTR_DAT_08005474 == 0)\n        {\n            current_item = allocate_memory(error_code, 4);\n            *PTR_PTR_DAT_08005474 = current_item;\n            if (current_item == 0)\n            {\n                *error_code = 0xc;\n                return 0;\n            }\n        }\n        next_item = (int**) * next_item;\n    } while (1);\n}",
            "called": [
                "FUN_080053a0",
                "FUN_080048cc",
                "FUN_08005374"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005400",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "find_and_initialize_08005400"
        },
        "FUN_08003582": {
            "renaming": {
                "FUN_08003582": "compare_values_08003582",
                "param_1": "value1",
                "param_2": "value2"
            },
            "code": "int compare_values_08003582(int value1, int value2) {\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003582",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "compare_values_08003582"
        },
        "FUN_08005760": {
            "renaming": {
                "FUN_08005760": "update_pointers_08005760",
                "PTR_DAT_080057fc": "pointer_1",
                "PTR_DAT_08005800": "pointer_2",
                "PTR_DAT_08005804": "pointer_3",
                "PTR_DAT_08005808": "pointer_4",
                "PTR_DAT_0800580c": "pointer_5",
                "PTR_DAT_08005810": "pointer_6",
                "PTR_DAT_08005814": "pointer_7",
                "PTR_DAT_08005818": "pointer_8",
                "PTR_DAT_0800581c": "pointer_9",
                "PTR_DAT_08005820": "pointer_10",
                "PTR_DAT_08005824": "pointer_11",
                "PTR_DAT_08005828": "pointer_12"
            },
            "code": "void update_pointers_08005760(void)\n{\n  code *function_pointer;\n  function_pointer = update_pointers_08005760;\n  update_pointer_if_negative(PTR_DAT_080057fc);\n  update_pointer_if_negative(PTR_DAT_08005800);\n  update_pointer_if_negative(PTR_DAT_08005804);\n  update_pointer_if_negative(PTR_DAT_08005808);\n  update_pointer_if_negative(PTR_DAT_0800580c);\n  update_pointer_if_negative(PTR_DAT_08005810);\n  update_pointer_if_negative(PTR_DAT_08005814);\n  update_pointer_if_negative(PTR_DAT_08005818);\n  update_pointer_if_negative(PTR_DAT_0800581c);\n  update_pointer_if_negative(PTR_DAT_08005820);\n  update_pointer_if_negative(PTR_DAT_08005824);\n  update_pointer_if_negative(PTR_DAT_08005828);\n  (*function_pointer)();\n  return;\n}\n\nvoid update_pointer_if_negative(int *pointer)\n{\n  if (*pointer < 0)\n  {\n    *pointer = 1;\n  }\n}\n",
            "called": [
                "FUN_080051ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005760",
            "calling": [
                "FUN_080047c0"
            ],
            "imported": false,
            "current_name": "update_pointers_08005760"
        },
        "FUN_08004678": {
            "renaming": {
                "FUN_08004678": "count_bits_set_to_1_08004678",
                "param_1": "number",
                "cVar1": "count"
            },
            "code": "int count_bits_set_to_1_08004678(uint number) {\n  int count = 0;\n  while (number != 1) {\n    count++;\n    number = number >> 1;\n  }\n  return count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004678",
            "calling": [
                "FUN_080047d0"
            ],
            "imported": false,
            "current_name": "count_bits_set_to_1_08004678"
        },
        "FUN_08003900": {
            "renaming": {
                "FUN_08003900": "check_and_call_function_08003900",
                "param_1": "input_param",
                "iVar1": "func_result",
                "FUN_0800387c": "get_func_result",
                "*(char *)(iVar1 + 0x5f)": "*(char *)(func_result + 0x5f)",
                "FUN_08001578": "call_another_function"
            },
            "code": "void check_and_call_function_08003900(undefined4 input_param)\\n{\\n  int func_result;\\n  func_result = get_func_result();\\n  if (*(char *)(func_result + 0x5f) == \"\\0\") {\\n    call_another_function(input_param);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003900",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "check_and_call_function_08003900"
        },
        "FUN_08000f0c": {
            "renaming": {
                "FUN_08000f0c": "set_bit_08000f0c",
                "param_1": "bit_index",
                "DAT_08000f28": "bit_array_ptr_base"
            },
            "code": "void set_bit_08000f0c(uint bit_index) {\n  if (bit_index >= 0) {\n    int* bit_array_ptr = (int*)(DAT_08000f28 + ((bit_index >> 5) + 0x60) * 4);\n    int bit_mask = 1 << (bit_index & 0x1f);\n    *bit_array_ptr = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f0c",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_08000f0c"
        },
        "FUN_08000998": {
            "renaming": {
                "FUN_08000998": "decode_and_save_08000998",
                "param_1": "encoded_data",
                "param_2": "decoded_data",
                "param_3": "encoded_data_size",
                "param_4": "decoded_data_size",
                "bVar1": "index",
                "cVar2": "index",
                "bVar3": "start",
                "bVar4": "end",
                "uVar5": "i",
                "uVar6": "index"
            },
            "code": "int decode_and_save_08000998(uint8_t *encoded_data, uint8_t *decoded_data, uint32_t encoded_data_size, uint32_t decoded_data_size)\n{\n  uint8_t start = *(encoded_data + 0xb);\n  uint8_t end = *(encoded_data + 0xb) + *(encoded_data + 0xd);\n  uint8_t index = 3;\n  for (uint32_t i = start; i < end; i++) {\n    *(decoded_data + index) = *(encoded_data + i * 2);\n    *(decoded_data + index + 1) = *(encoded_data + i * 2 + 1);\n    index += 2;\n  }\n  *(encoded_data + 0x49) = index;\n  save_data(encoded_data);\n  return (int)index + 2;\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "decode_and_save_08000998"
        },
        "FUN_08003f94": {
            "renaming": {
                "FUN_08003f94": "do_nothing_08003f94"
            },
            "code": "\nvoid do_nothing_08003f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f94"
        },
        "FUN_080055d0": {
            "renaming": {
                "FUN_080055d0": "execute_function_080055d0",
                "param_1": "function_index",
                "puVar1": "pointer_1",
                "uVar2": "thunk_result",
                "piVar3": "function_table_ptr",
                "iVar4": "function_ptr",
                "pcVar5": "function",
                "unaff_r4": "unaff_r4",
                "unaff_r5": "unaff_r5",
                "in_lr": "in_lr",
                "puVar6": "function_table_ptr_ptr_copy"
            },
            "code": "int execute_function_080055d0(uint function_index) {\n  int *function_table_ptr = *(int **)function_table_ptr_ptr;\n  if (function_index > 31) {\n    *function_table_ptr = 22;\n    return -1;\n  }\n  int function_ptr = function_table_ptr[17];\n  if (function_ptr != 0 && function_index < 32) {\n    code *function = *(code **)(function_ptr + function_index * 4);\n    if (function != NULL) {\n      if (function != (code *)1) {\n        if (function == (code *)-1) {\n          *function_table_ptr = 22;\n          return 1;\n        }\n        *(undefined4 *)(function_ptr + function_index * 4) = 0;\n        (*function)(function_index);\n      }\n      return 0;\n    }\n  }\n  undefined *function_table_ptr_ptr_copy = function_table_ptr_ptr;\n  undefined4 thunk_result = thunk_function_1(function_table_ptr);\n  undefined *error_ptr = error_ptr;\n  *(undefined4 *)error_ptr = 0;\n  int result = function_2(thunk_result, function_index, function_index, 0, function_table_ptr_ptr_copy, 0, 0, 0);\n  if (result == -1 && *(int *)error_ptr != 0) {\n    *function_table_ptr = *(int *)error_ptr;\n  }\n  return result;\n}",
            "called": [
                "thunk_FUN_0800410c",
                "FUN_080040fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055d0",
            "calling": [
                "FUN_080051ac"
            ],
            "imported": false,
            "current_name": "execute_function_080055d0"
        },
        "FUN_080056f8": {
            "renaming": {
                "FUN_080056f8": "find_and_set_value_080056f8",
                "param_1": "result",
                "param_2": "input",
                "puVar1": "ptr_data",
                "iVar2": "found_value"
            },
            "code": "void find_and_set_value_080056f8(int *result, undefined4 input) {\n  undefined *ptr_data = PTR_DAT_08005714;\n  *(undefined4 *)PTR_DAT_08005714 = 0;\n  int found_value = find_value(input);\n  if ((found_value == -1) && (*(int *)ptr_data != 0)) {\n    *result = *(int *)ptr_data;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056f8",
            "calling": [
                "FUN_080054fc"
            ],
            "imported": false,
            "current_name": "find_and_set_value_080056f8"
        },
        "FUN_080054b4": {
            "renaming": {
                "FUN_080054b4": "check_permissions_and_set_value_080054b4",
                "param_1": "permission_level",
                "param_2": "mem_address",
                "param_3": "output_value",
                "param_4": "output_flags",
                "iVar1": "result",
                "uVar2": "flags"
            },
            "code": "int check_permissions_and_set_value_080054b4(int permission_level, int mem_address, int* output_value, uint* output_flags){\n  int result = 0;\n  uint flags = 0;\n  if (*(short *)(mem_address + 0xe) < 0 || FUN_080056d4(permission_level, (int)*(short *)(mem_address + 0xe), &flags) < 0) {\n    *output_flags = 0;\n    if ((int)((uint)*(ushort *)(mem_address + 0xc) << 0x18) < 0) {\n      result = 0x40;\n      goto LAB_080054f4;\n    }\n  }\n  else {\n    *output_flags = (uint)((flags & 0xf000) == 0x2000);\n  }\n  result = 0x400;\nLAB_080054f4:\n  *output_value = result;\n  return 0;\n}",
            "called": [
                "FUN_080056d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b4",
            "calling": [
                "FUN_080054fc"
            ],
            "imported": false,
            "current_name": "check_permissions_and_set_value_080054b4"
        },
        "FUN_0800171a": {
            "renaming": {
                "FUN_0800171a": "process_input_0800171a",
                "param_1": "input_array",
                "cVar1": "current_char",
                "puVar2": "ptr_to_uint"
            },
            "code": "uint32_t process_input_0800171a(uint32_t **input_array)\n{\n    char current_char;\n    uint32_t *ptr_to_uint;\n    \n    current_char = *(char *)((int)input_array + 0x3d);\n    ptr_to_uint = input_array[0xb];\n    \n    if ((*(short *)(input_array + 10) == 0) && (current_char == '!')) {\n        if ((ptr_to_uint == (uint32_t *)0x4) || ((ptr_to_uint == (uint32_t *)0x8 || (ptr_to_uint == (uint32_t *)0xffff0000)))) {\n            (*input_array)[1] = (*input_array)[1] & 0xfffff8ff;\n            **input_array = **input_array | 0x200;\n            input_array[0xc] = (uint32_t *)0x0;\n            *(undefined *)((int)input_array + 0x3d) = 0x20;\n            if (*(char *)((int)input_array + 0x3e) == '@') {\n                *(undefined *)((int)input_array + 0x3e) = 0;\n                do_nothing_08001718();\n            }\n            else {\n                *(undefined *)((int)input_array + 0x3e) = 0;\n                do_nothing_080015b6();\n            }\n        }\n        else {\n            (*input_array)[1] = (*input_array)[1] & 0xfffff8ff;\n            input_array[0xc] = (uint32_t *)0x11;\n            *(undefined *)((int)input_array + 0x3e) = 0;\n            *(undefined *)((int)input_array + 0x3d) = 0x20;\n            do_nothing_080015b6();\n        }\n    }\n    else if ((current_char == '!') || ((*(char *)((int)input_array + 0x3e) == '@' && (current_char == '\"')))) {\n        if (*(short *)((int)input_array + 0x2a) == 0) {\n            (*input_array)[1] = (*input_array)[1] & 0xfffffbff;\n        }\n        else if (*(char *)((int)input_array + 0x3e) == '@') {\n            if (input_array[0x14] == (uint32_t *)0x0) {\n                if (input_array[0x13] == (uint32_t *)0x1) {\n                    (*input_array)[4] = (uint32_t)input_array[0x12] & 0xff;\n                    input_array[0x14] = (uint32_t *)((int)input_array[0x14] + 2);\n                }\n                else {\n                    (*input_array)[4] = (uint32_t)((int)input_array[0x12] << 0x10) >> 0x18;\n                    input_array[0x14] = (uint32_t *)((int)input_array[0x14] + 1);\n                }\n            }\n            else if (input_array[0x14] == (uint32_t *)0x1) {\n                (*input_array)[4] = (uint32_t)input_array[0x12] & 0xff;\n                input_array[0x14] = (uint32_t *)((int)input_array[0x14] + 1);\n            }\n            else if (input_array[0x14] == (uint32_t *)0x2) {\n                if (*(char *)((int)input_array + 0x3d) == '\"') {\n                    **input_array = **input_array | 0x100;\n                }\n                else if (*(char *)((int)input_array + 0x3d) == '!') {\n                    ptr_to_uint = input_array[9];\n                    input_array[9] = (uint32_t *)((int)ptr_to_uint + 1);\n                    (*input_array)[4] = (uint32_t)*(uint8_t *)ptr_to_uint;\n                    *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) + -1;\n                }\n            }\n        }\n        else {\n            ptr_to_uint = input_array[9];\n            input_array[9] = (uint32_t *)((int)ptr_to_uint + 1);\n            (*input_array)[4] = (uint32_t)*(uint8_t *)ptr_to_uint;\n            *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) + -1;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800171a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_0800171a"
        },
        "FUN_08004560": {
            "renaming": {
                "FUN_08004560": "check_and_call_08004560",
                "param_1": "value1",
                "param_2": "value2",
                "PTR_DAT_08004588": "PTR_FUNCTION"
            },
            "code": "void check_and_call_08004560(int value1, int value2) {\n  if ((value1 == 1) && (value2 == 0xffff)) {\n    call_function(PTR_DAT_08004588, 0, 0, 0, 0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08004544"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004560",
            "calling": [],
            "imported": false,
            "current_name": "check_and_call_08004560"
        },
        "FUN_08000a7a": {
            "renaming": {
                "FUN_08000a7a": "set_bits_based_on_flag_08000a7a",
                "param_1": "flag_address",
                "param_2": "bit_array_address",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "offset",
                "iVar2": "bit_array_length",
                "uVar3": "i",
                "uVar4": "bit_index",
                "uVar5": "bit_position",
                "uVar6": "bit_offset",
                "uVar7": "flag_index"
            },
            "code": "int set_bits_based_on_flag_08000a7a(int flag_address, int bit_array_address, int param_3, int param_4) {\n  int offset = FUN_08004640(*(undefined *)(flag_address + 0xb),*(undefined *)(flag_address + 0xc),param_3,param_4,param_4);\n  int bit_array_length = FUN_08004640(*(undefined *)(flag_address + 0xd),*(undefined *)(flag_address + 0xe));\n  uint8_t bit_index = 0;\n  uint8_t flag_index = 7;\n  for (uint16_t i = 0; i < bit_array_length; i++) {\n    uint8_t bit_offset = (i + offset) * 0x100000 >> 0x18;\n    uint8_t bit_position = (i + offset) & 0xf;\n    if (((int)(uint)*(byte *)(flag_address + flag_index + 9) >> bit_index & 1U) == 0) {\n      *(ushort *)(bit_array_address + bit_offset * 2) = *(ushort *)(bit_array_address + bit_offset * 2) & ~(ushort)(1 << bit_position);\n    }\n    else {\n      *(ushort *)(bit_array_address + bit_offset * 2) = (ushort)(1 << bit_position) | *(ushort *)(bit_array_address + bit_offset * 2);\n    }\n    bit_index = bit_index + 1 & 0xff;\n    if (7 < bit_index) {\n      flag_index = flag_index + 1 & 0xff;\n      bit_index = 0;\n    }\n  }\n  *(undefined *)(flag_address + 0x49) = 6;\n  FUN_0800076c(flag_address);\n  return 8;\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a7a",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "set_bits_based_on_flag_08000a7a"
        },
        "FUN_08003474": {
            "renaming": {
                "FUN_08003474": "do_nothing_08003474"
            },
            "code": "\nvoid do_nothing_08003474(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "do_nothing_08003474"
        },
        "FUN_08004cb0": {
            "renaming": {
                "FUN_08004cb0": "encode_string_08004cb0",
                "param_1": "input",
                "param_2": "output_length",
                "param_3": "output",
                "param_4": "unknown",
                "param_5": "encode_function",
                "iVar1": "result",
                "uVar2": "max_output_length",
                "uVar3": "j",
                "bVar4": "is_type_4",
                "encode_type": "encode_type",
                "extra_length": "extra_length",
                "remaining_length": "remaining_length"
            },
            "code": "undefined4 encode_string_08004cb0(undefined4 input, uint *output_length, uint *output, undefined4 unknown, code *encode_function)\\n\\\n{\\n\\\n    int i;\\n\\\n    uint max_output_length = param_2[4];\\n\\\n    if ((int)param_2[4] < (int)param_2[2]) {\\n\\\n        max_output_length = param_2[2];\\n\\\n    }\\n\\\n    *output_length = max_output_length;\\n\\\n    if (*(char *)((int)param_2 + 0x43) != \"\\0\") {\\n\\\n        *output_length = max_output_length + 1;\\n\\\n    }\\n\\\n    if ((int)(*param_2 << 0x1a) < 0) {\\n\\\n        *output_length = *output_length + 2;\\n\\\n    }\\n\\\n    uint encode_type = *param_2 & 6;\\n\\\n    if (encode_type == 0) {\\n\\\n        for (; (int)encode_type < (int)(param_2[3] - *output_length); encode_type++) {\\n\\\n            int result = (*encode_function)(input, unknown, (int)param_2 + 0x19, 1);\\n\\\n            if (result == -1) {\\n\\\n                return 0xffffffff;\\n\\\n            }\\n\\\n        }\\n\\\n    }\\n\\\n    uint extra_length = (uint)*(byte *)((int)param_2 + 0x43);\\n\\\n    if (extra_length != 0) {\\n\\\n        extra_length = 1;\\n\\\n    }\\n\\\n    if ((int)(*param_2 << 0x1a) < 0) {\\n\\\n        *(undefined *)((int)param_2 + extra_length + 0x43) = 0x30;\\n\\\n        *(undefined *)((int)param_2 + extra_length + 0x44) = *(undefined *)((int)param_2 + 0x45);\\n\\\n        extra_length += 2;\\n\\\n    }\\n\\\n    int result = (*encode_function)(input, unknown, (int)param_2 + 0x43, extra_length);\\n\\\n    if (result != -1) {\\n\\\n        uint remaining_length = param_2[3];\\n\\\n        bool is_type_4 = (*param_2 & 6) == 4;\\n\\\n        if (is_type_4) {\\n\\\n            remaining_length = remaining_length - *output_length;\\n\\\n        }\\n\\\n        if (is_type_4) {\\n\\\n            remaining_length = remaining_length & ~((int)remaining_length >> 0x1f);\\n\\\n        }\\n\\\n        else {\\n\\\n            remaining_length = 0;\\n\\\n        }\\n\\\n        if ((int)param_2[4] < (int)param_2[2]) {\\n\\\n            remaining_length = remaining_length + (param_2[2] - param_2[4]);\\n\\\n        }\\n\\\n        uint j = 0;\\n\\\n        while (j != remaining_length) {\\n\\\n            int result = (*encode_function)(input, unknown, (int)param_2 + 0x1a, 1);\\n\\\n            if (result == -1) break;\\n\\\n            j++;\\n\\\n        }\\n\\\n        return 0;\\n\\\n    }\\n\\\n    return 0xffffffff;\\n\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb0",
            "calling": [
                "FUN_08004d9c"
            ],
            "imported": false,
            "current_name": "encode_string_08004cb0"
        },
        "FUN_08003594": {
            "renaming": {
                "FUN_08003594": "execute_code_if_not_null_08003594",
                "PTR_DAT_080035a4": "function_pointer_data",
                "PTR_DAT_080035a8": "argument_data"
            },
            "code": "void execute_code_if_not_null_08003594(void)\n{\n  code* function_pointer = *(code**)PTR_DAT_080035a4;\n  if (function_pointer != NULL) {\n    (*function_pointer)(*(int*)PTR_DAT_080035a8);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003594",
            "calling": [
                "FUN_0800262c"
            ],
            "imported": false,
            "current_name": "execute_code_if_not_null_08003594"
        },
        "FUN_08002940": {
            "renaming": {
                "FUN_08002940": "set_flags_08002940",
                "param_1": "ptr_param",
                "*param_1": "*ptr_param",
                "uint": "unsigned int",
                "undefined": "char",
                "0xc": "0x0c",
                "0x14": "0x14",
                "0xfffffedf": "4294967263",
                "0xfffffffe": "4294967294"
            },
            "code": "void set_flags_08002940(int *ptr_param)\n{\n  uint *ptr_val_1 = (uint *)(*ptr_param + 0xc);\n  *ptr_val_1 &= 0xfffffedf;\n  uint *ptr_val_2 = (uint *)(*ptr_param + 0x14);\n  *ptr_val_2 &= 0xfffffffe;\n  char *ptr_val_3 = (char *)(ptr_param + 0x3a);\n  *ptr_val_3 = ' ';\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002940",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "set_flags_08002940"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "call_function_and_return_08004204",
                "FUN_0800346c": "call_another_function"
            },
            "code": "void call_function_and_return_08004204(void)\n{\n  call_another_function();\n  return;\n}",
            "called": [
                "FUN_0800346c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "FUN_08000b54",
                "FUN_0800076c"
            ],
            "imported": false,
            "current_name": "call_function_and_return_08004204"
        },
        "FUN_08003476": {
            "renaming": {
                "FUN_08003476": "run_program_08003476",
                "FUN_08000e18": "initialize_system",
                "FUN_08000f4e": "setup_configuration",
                "do_nothing_08003474": "do_nothing"
            },
            "code": "void run_program_08003476(void)\n{\n  initialize_system();\n  setup_configuration();\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08000e18",
                "FUN_08003474",
                "FUN_08000f4e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003476",
            "calling": [],
            "imported": false,
            "current_name": "run_program_08003476"
        },
        "FUN_08004444": {
            "renaming": {
                "FUN_08004444": "set_value_at_offset_08004444",
                "param_1": "offset",
                "param_2": "value",
                "uVar1": "value_to_set",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void set_value_at_offset_08004444(int offset, uint value)\n{\n    undefined2 value_to_set;\n    code *jump_table;\n    if (value < 0x60) {\n        value_to_set = *(undefined2 *)(PTR_DAT_0800445c + value * 2);\n    }\n    else {\n        value_to_set = 0xffff;\n    }\n    *(undefined2 *)(offset + 0x12e) = value_to_set;\n    (*jump_table)();\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004444",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_08004444"
        },
        "FUN_0800346c": {
            "renaming": {
                "FUN_0800346c": "initialize_program_0800346c",
                "FUN_08000e30": "setup_network_connection"
            },
            "code": "void initialize_program_0800346c(void)\n{\n  setup_network_connection();\n  return;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800346c",
            "calling": [
                "FUN_08004204"
            ],
            "imported": false,
            "current_name": "initialize_program_0800346c"
        },
        "FUN_080053a0": {
            "renaming": {
                "FUN_080053a0": "initialize_data_080053a0",
                "param_1": "data_ptr",
                "uVar1": "var1",
                "iVar2": "global_data_ptr",
                "bVar3": "is_global_data_ptr",
                "PTR_PTR_DAT_080053f8": "global_data_ptr_pointer",
                "PTR_LAB_08005320_1_080053fc": "label_08005320_1_080053fc",
                "FUN_08005400": "init_helper",
                "set_data_value": "FUN_0800532c"
            },
            "code": "void initialize_data_080053a0(int data_ptr)\n{\n    // Check if data has already been initialized\n    if (*(int *)(data_ptr + 0x18) != 0)\n    {\n        return;\n    }\n\n    // Initialize data\n    *(int *)(data_ptr + 0x48) = 0;\n    *(int *)(data_ptr + 0x4c) = 0;\n    *(int *)(data_ptr + 0x50) = 0;\n    *(void **)(data_ptr + 0x28) = PTR_LAB_08005320_1_080053fc;\n\n    // Set flag to indicate data has been initialized\n    if (data_ptr == global_data_ptr)\n    {\n        *(int *)(data_ptr + 0x18) = 1;\n    }\n\n    // Call helper functions to initialize data\n    int var1 = init_helper(data_ptr);\n    *(int *)(data_ptr + 4) = var1;\n    int var2 = init_helper(data_ptr);\n    *(int *)(data_ptr + 8) = var2;\n    int var3 = init_helper(data_ptr);\n    *(int *)(data_ptr + 0xc) = var3;\n\n    // Call helper functions to set data values\n    set_data_value(*(int *)(data_ptr + 4), 4, 0);\n    set_data_value(*(int *)(data_ptr + 8), 9, 1);\n    set_data_value(*(int *)(data_ptr + 0xc), 0x12, 2);\n\n    // Set flag to indicate data has been initialized\n    *(int *)(data_ptr + 0x18) = 1;\n}\n",
            "called": [
                "FUN_08005400",
                "FUN_0800532c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053a0",
            "calling": [
                "FUN_080052cc",
                "FUN_08005400",
                "FUN_08004fdc",
                "FUN_08004a34",
                "FUN_08004a84",
                "FUN_080050d0"
            ],
            "imported": false,
            "current_name": "initialize_data_080053a0"
        },
        "FUN_0800201c": {
            "renaming": {
                "FUN_0800201c": "FUNC_0800201c"
            },
            "code": "\nundefined4 FUNC_0800201c(uint *param_1)\n\n{\n  uint *puVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 uVar4;\n  bool bVar5;\n  \n  puVar1 = DAT_080022d0;\n  if (param_1 == (uint *)0x0) {\n    return 1;\n  }\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 4) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) != 0)))) {\n      if (((*DAT_080022d0 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (param_1[1] == 0x10000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x10000;\n      }\n      else if (param_1[1] == 0x50000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x40000;\n        *puVar1 = *puVar1 | 0x10000;\n      }\n      else {\n        *DAT_080022d0 = *DAT_080022d0 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar2 = FUN_08000e30();\n        while ((*DAT_080022d0 & 0x20000) != 0) {\n          iVar3 = FUN_08000e30();\n          if (100 < (uint)(iVar3 - iVar2)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar2 = FUN_08000e30();\n        while ((*DAT_080022d0 & 0x20000) == 0) {\n          iVar3 = FUN_08000e30();\n          if (100 < (uint)(iVar3 - iVar2)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 0) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) == 0)))) {\n      if (((*DAT_080022d0 & 2) != 0) && (param_1[3] != 1)) {\n        return 1;\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | param_1[4] << 3;\n    }\n    else if (param_1[3] == 0) {\n      *DAT_080022d4 = 0;\n      iVar2 = FUN_08000e30();\n      while ((*DAT_080022d0 & 2) != 0) {\n        iVar3 = FUN_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_080022d4 = 1;\n      iVar2 = FUN_08000e30();\n      while ((*DAT_080022d0 & 2) == 0) {\n        iVar3 = FUN_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | param_1[4] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[5] == 0) {\n      *DAT_080022d8 = 0;\n      iVar2 = FUN_08000e30();\n      while ((DAT_080022d0[0x1d] & 2) != 0) {\n        iVar3 = FUN_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_080022d8 = 1;\n      iVar2 = FUN_08000e30();\n      while ((DAT_080022d0[0x1d] & 2) == 0) {\n        iVar3 = FUN_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar5 = (DAT_080022d0[0x10] & 0x10000000) == 0;\n    if (bVar5) {\n      DAT_080022d0[0x10] = DAT_080022d0[0x10] | 0x10000000;\n    }\n    if ((*DAT_080022dc & 0x100) == 0) {\n      *DAT_080022dc = *DAT_080022dc | 0x100;\n      iVar2 = FUN_08000e30();\n      while ((*DAT_080022dc & 0x100) == 0) {\n        iVar3 = FUN_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    puVar1 = DAT_080022d0;\n    if (param_1[2] == 1) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 1;\n    }\n    else if (param_1[2] == 5) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 4;\n      puVar1[0x1c] = puVar1[0x1c] | 1;\n    }\n    else {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] & 0xfffffffe;\n      puVar1[0x1c] = puVar1[0x1c] & 0xfffffffb;\n    }\n    if (param_1[2] == 0) {\n      iVar2 = FUN_08000e30();\n      while ((DAT_080022d0[0x1c] & 2) != 0) {\n        iVar3 = FUN_08000e30();\n        if (5000 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar2 = FUN_08000e30();\n      while ((DAT_080022d0[0x1c] & 2) == 0) {\n        iVar3 = FUN_08000e30();\n        if (5000 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar5) {\n      DAT_080023ac[0x10] = DAT_080023ac[0x10] & 0xefffffff;\n    }\n  }\n  if (param_1[6] == 0) {\n    uVar4 = 0;\n  }\n  else if ((DAT_080023ac[2] & 0xc) == 8) {\n    uVar4 = 1;\n  }\n  else if (param_1[6] == 2) {\n    *DAT_080023b0 = 0;\n    iVar2 = FUN_08000e30();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        DAT_080023ac[1] =\n             param_1[7] | param_1[8] | param_1[9] << 6 | ((param_1[10] >> 1) - 1) * 0x10000 |\n             param_1[0xb] << 0x18;\n        *DAT_080023b0 = 1;\n        iVar2 = FUN_08000e30();\n        do {\n          if ((*DAT_080023ac & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar3 = FUN_08000e30();\n        } while ((uint)(iVar3 - iVar2) < 3);\n        return 3;\n      }\n      iVar3 = FUN_08000e30();\n    } while ((uint)(iVar3 - iVar2) < 3);\n    uVar4 = 3;\n  }\n  else {\n    *DAT_080023b0 = 0;\n    iVar2 = FUN_08000e30();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar3 = FUN_08000e30();\n    } while ((uint)(iVar3 - iVar2) < 3);\n    uVar4 = 3;\n  }\n  return uVar4;\n}\n\n",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800201c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "FUNC_0800201c"
        },
        "FUN_080028d4": {
            "renaming": {
                "FUN_080028d4": "set_bit_in_uint_array_080028d4",
                "param_1": "array",
                "param_2": "bit_position",
                "param_3": "bit_value",
                "*(uint *)(param_1 + 0x20)": "*(array + 0x20)",
                "4": "BIT_MASK",
                "mask": "mask",
                "masked_array": "masked_array",
                "shifted_value": "shifted_value",
                "new_array": "new_array"
            },
            "code": "void set_bit_in_uint_array_080028d4(uint *array, uint bit_position, uint bit_value) {\n    uint mask = ~(4 << (bit_position & 0xff));\n    uint masked_array = *(array + 0x20) & mask;\n    uint shifted_value = bit_value << (bit_position & 0xff);\n    uint new_array = masked_array | shifted_value;\n    *(array + 0x20) = new_array;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d4",
            "calling": [
                "FUN_080028f0"
            ],
            "imported": false,
            "current_name": "set_bit_in_uint_array_080028d4"
        },
        "FUN_0800293c": {
            "renaming": {
                "FUN_0800293c": "do_nothing_0800293c"
            },
            "code": "\nvoid do_nothing_0800293c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293c",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293c"
        },
        "FUN_080040ec": {
            "renaming": {
                "FUN_080040ec": "call_function_with_params_080040ec",
                "param_1": "function_param_1",
                "param_2": "function_param_2",
                "param_3": "function_param_3",
                "param_4": "function_param_4",
                "FUN_08003d18": "call_function_with_params"
            },
            "code": "void call_function_with_params_080040ec(undefined4 function_param_1, undefined4 function_param_2, undefined4 function_param_3, undefined4 function_param_4)\n{\n  call_function_with_params_080040ec(function_param_2, function_param_3, function_param_3, function_param_4, function_param_4);\n  return;\n}",
            "called": [
                "FUN_08003d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040ec",
            "calling": [
                "FUN_0800562a"
            ],
            "imported": false,
            "current_name": "call_function_with_params_080040ec"
        },
        "FUN_08001460": {
            "renaming": {
                "FUN_08001460": "parse_expression_08001460",
                "param_1": "expression",
                "param_2": "expression_length",
                "param_3": "error_code",
                "param_4": "error_index",
                "uVar1": "result",
                "puVar2": "expression_ptr",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int parse_expression_08001460(uint **expression, uint *expression_length, int error_code, uint *error_index) {\n  int result = 0;\n  uint *expression_ptr;\n  char current_char = *(char *)((int)expression + 0x3d);\n  if (current_char == '(') {\n    if (expression_length == NULL || *expression_length == 0) {\n      result = 1;\n    }\n    else if (*(char *)(expression + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(expression + 0xf) = 1;\n      expression_ptr = *expression;\n      if ((*expression_ptr & 1) == 0) {\n        *expression_ptr = *expression_ptr | 1;\n      }\n      **expression = **expression & 0xfffff7ff;\n      *(undefined *)((int)expression + 0x3d) = 0x29;\n      *(undefined *)((int)expression + 0x3e) = 0x20;\n      result = 0;\n      expression[0x10] = NULL;\n      expression[9] = expression_length;\n      *(short *)((int)expression + 0x2a) = (short)error_code;\n      expression[0xb] = error_index;\n      *(undefined2 *)(expression + 10) = *(undefined2 *)((int)expression + 0x2a);\n      *(undefined *)(expression + 0xf) = 0;\n      (*expression)[1] = (*expression)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001460",
            "calling": [
                "FUN_08003880"
            ],
            "imported": false,
            "current_name": "parse_expression_08001460"
        },
        "FUN_08003880": {
            "renaming": {
                "FUN_08003880": "process_data_08003880",
                "param_1": "data_ptr",
                "param_2": "flag",
                "param_3": "data_size",
                "param_4": "param_4",
                "iVar1": "data_ptr_copy"
            },
            "code": "void process_data_08003880(int data_ptr, int flag, int data_size, undefined4 param_4)\n{\n  int data_ptr_copy;\n  data_ptr_copy = FUN_0800387c();\n  if (data_size == *(int *)(data_ptr + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(data_ptr_copy + 0x88) = 0;\n      *(undefined *)(data_ptr_copy + 0x5e) = 0;\n      if (*(code **)(data_ptr_copy + 100) != (code *)0x0) {\n        (**(code **)(data_ptr_copy + 100))();\n      }\n      FUN_08001460(data_ptr, data_ptr_copy + 0x68, *(undefined *)(data_ptr_copy + 0x88), 8);\n      return;\n    }\n    *(undefined *)(data_ptr_copy + 0x5e) = 1;\n    FUN_080014ec(data_ptr, data_ptr_copy + 0x68, 0x20, 8, param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_0800387c",
                "FUN_08001460",
                "FUN_080014ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003880",
            "calling": [
                "FUN_0800165a"
            ],
            "imported": false,
            "current_name": "process_data_08003880"
        },
        "FUN_08002f4c": {
            "renaming": {
                "FUN_08002f4c": "set_flag_and_invoke_function_08002f4c",
                "param_1": "ptr_param_1",
                "*(uint *)(*param_1 + 0xc)": "*ptr_temp",
                "*(undefined *)((int)param_1 + 0x39)": "*ptr_char",
                "0xc": "offset",
                "0xffffffbf": "mask",
                "FUN_08003f48": "invoke_function"
            },
            "code": "int set_flag_and_invoke_function_08002f4c(int *ptr_param_1)\n{\n  int offset = 0xc;\n  int *ptr_temp = ptr_param_1 + offset;\n  unsigned int mask = 0xffffffbf;\n  *ptr_temp &= mask;\n  char *ptr_char = (char *)ptr_param_1 + 0x39;\n  *ptr_char = ' ';\n  invoke_function();\n  return 0;\n}",
            "called": [
                "FUN_08003f48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f4c",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "set_flag_and_invoke_function_08002f4c"
        },
        "FUN_080035bc": {
            "renaming": {
                "FUN_080035bc": "set_flags_and_pointers_080035bc",
                "puVar1": "pointer"
            },
            "code": "void set_flags_and_pointers_080035bc() {\n  uint *pointer;\n  pointer = PTR_080035f0;\n  *PTR_080035f0 |= 1;\n  pointer[2] = 0;\n  *pointer &= 0xfef6ffff;\n  pointer[1] = DAT_080035f4;\n  *pointer &= 0xfffbffff;\n  pointer[3] = 0;\n  *(undefined4 *)(DAT_080035f8 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035bc",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "set_flags_and_pointers_080035bc"
        },
        "FUN_080025ec": {
            "renaming": {
                "FUN_080025ec": "calculate_shifted_value_080025ec",
                "uVar1": "shifted_value",
                "FUN_080025e0": "get_initial_value",
                "PTR_DAT_08002608": "shift_array",
                "DAT_08002604": "data_pointer"
            },
            "code": "uint calculate_shifted_value_080025ec(void)\n{\n  uint shifted_value;\n  shifted_value = get_initial_value();\n  uint index = (uint)(*(int *)(DAT_08002604 + 8) << 0x13) >> 0x1d;\n  uint shifted_amount = PTR_DAT_08002608[index];\n  return shifted_value >> shifted_amount;\n}",
            "called": [
                "FUN_080025e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ec",
            "calling": [
                "FUN_080029c8"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_080025ec"
        },
        "FUN_08000c4c": {
            "renaming": {
                "FUN_08000c4c": "initialize_game_08000c4c",
                "FUN_080005e4": "set_initial_state",
                "FUN_08000600": "load_resources",
                "PTR_DAT_08000c60": "game_resources"
            },
            "code": "void initialize_game_08000c4c(void)\n{\n  set_initial_state(0);\n  load_resources(PTR_DAT_08000c60, 0x4b00);\n  return;\n}",
            "called": [
                "FUN_08000600",
                "FUN_080005e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c4c",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "initialize_game_08000c4c"
        },
        "FUN_08004a60": {
            "renaming": {
                "FUN_08004a60": "process_data_08004a60",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "length",
                "iVar1": "index",
                "puVar2": "end_of_data"
            },
            "code": "int process_data_08004a60(undefined4 arg1, undefined4 arg2, undefined *data, int length) {\n  int index = 0;\n  undefined *end_of_data = data + length;\n  do {\n    if (data == end_of_data) {\n      return 0;\n    }\n    index = process_byte(arg1, *data, arg2, length, index);\n    length = index + 1;\n    data++;\n  } while (length != 0);\n  return index;\n}",
            "called": [
                "FUN_08004a34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a60",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "process_data_08004a60"
        },
        "FUN_080050d0": {
            "renaming": {
                "FUN_080050d0": "process_input_data_080050d0",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "result",
                "uVar2": "input_value",
                "iVar3": "data_ptr",
                "PTR_PTR_DAT_0800519c": "data_ptr_ptr",
                "PTR_DAT_080051a0": "input_data_ptr_1",
                "PTR_DAT_080051a4": "input_data_ptr_2",
                "PTR_DAT_080051a8": "input_data_ptr_3"
            },
            "code": "uint process_input_data_080050d0(undefined4 *output, undefined4 *input)\n{\n  uint result;\n  ushort input_value;\n  int data_ptr;\n  data_ptr = *(int *)PTR_PTR_DAT_0800519c;\n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x18) == 0)) {\n    free_data(data_ptr);\n  }\n  if (input == (undefined4 *)PTR_DAT_080051a0) {\n    input = *(undefined4 **)(data_ptr + 4);\n  }\n  else if (input == (undefined4 *)PTR_DAT_080051a4) {\n    input = *(undefined4 **)(data_ptr + 8);\n  }\n  else if (input == (undefined4 *)PTR_DAT_080051a8) {\n    input = *(undefined4 **)(data_ptr + 0xc);\n  }\n  input_value = *(ushort *)(input + 3);\n  result = (uint)input_value;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output = 9;\n      goto LAB_08005100;\n    }\n    if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)input[0xd] != input + 0x11) {\n        free_data(output);\n      }\n      input[0xd] = 0;\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n    input[1] = 0;\n    *input = input[4];\n  }\n  *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    free_data(output, input);\n  }\n  input_value = *(ushort *)(input + 3);\n  result = input_value & 1;\n  if ((input_value & 1) == 0) {\n    if (-1 < (int)((uint)input_value << 0x1e)) {\n      result = input[5];\n    }\n    input[2] = result;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] == 0) {\n    input_value = *(ushort *)(input + 3);\n    result = (int)(short)input_value & 0x80;\n    if (result != 0) {\n      *(ushort *)(input + 3) = input_value | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080054fc",
                "FUN_080053a0",
                "FUN_080048dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080050d0",
            "calling": [
                "FUN_08004a34",
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "process_input_data_080050d0"
        },
        "FUN_08004978": {
            "renaming": {
                "FUN_08004978": "allocate_memory_block_08004978",
                "param_1": "out_mem_block",
                "param_2": "requested_size",
                "puVar1": "unused_ptr",
                "uVar2": "result",
                "puVar3": "prev_block",
                "iVar4": "padding_size",
                "uVar5": "block_size",
                "puVar6": "prev_block",
                "puVar7": "curr_block",
                "uVar8": "aligned_size"
            },
            "code": "uint allocate_memory_block_08004978(undefined4 *out_mem_block, uint requested_size)\n{\n  uint aligned_size = (requested_size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < requested_size)) {\n    *out_mem_block = 0xc;\n  }\n  else {\n    do_nothing_0800557c();\n    uint *prev_block = *(uint **)PTR_DAT_08004a2c;\n    uint *curr_block = *(uint **)PTR_DAT_08004a2c;\n    while (curr_block != (uint *)0x0) {\n      uint block_size = *curr_block - aligned_size;\n      if (-1 < (int)block_size) {\n        if (block_size < 0xc) {\n          if (prev_block == curr_block) {\n            aligned_size = prev_block[1];\n          }\n          else {\n            aligned_size = curr_block[1];\n          }\n          if (prev_block == curr_block) {\n            *(uint *)PTR_DAT_08004a2c = aligned_size;\n            curr_block = prev_block;\n          }\n          else {\n            prev_block[1] = aligned_size;\n          }\n        }\n        else {\n          *curr_block = block_size;\n          *(uint *)((int)curr_block + block_size) = aligned_size;\n          curr_block = (uint *)((int)curr_block + block_size);\n        }\n        goto LAB_080049dc;\n      }\n      prev_block = curr_block;\n      curr_block = (uint *)curr_block[1];\n    }\n    if (*(int *)PTR_DAT_08004a30 == 0) {\n      undefined4 result = FUN_0800500c(out_mem_block);\n      *(undefined4 *)PTR_DAT_08004a30 = result;\n    }\n    curr_block = (uint *)FUN_0800500c(out_mem_block,aligned_size);\n    if ((curr_block != (uint *)0xffffffff) &&\n       ((prev_block = (uint *)((int)curr_block + 3U & 0xfffffffc), curr_block == prev_block ||\n        (int block_size = FUN_0800500c(out_mem_block,(int)prev_block - (int)curr_block), block_size != -1)))) {\n      *prev_block = aligned_size;\nLAB_080049dc:\n      do_nothing_0800557e(out_mem_block);\n      uint block_end = (int)prev_block + 0xbU & 0xfffffff8;\n      int padding_size = block_end - (int)(prev_block + 1);\n      if (padding_size != 0) {\n        *(int *)((int)prev_block + padding_size) = -padding_size;\n        return block_end;\n      }\n      return block_end;\n    }\n    *out_mem_block = 0xc;\n    do_nothing_0800557e(out_mem_block);\n  }\n  return 0;\n}",
            "called": [
                "FUN_0800500c",
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004978",
            "calling": [
                "FUN_080054fc",
                "FUN_08005374"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08004978"
        },
        "FUN_08002d0c": {
            "renaming": {
                "FUN_08002d0c": "check_bitmask_08002d0c",
                "param_1": "bitmask",
                "param_2": "expected_result",
                "param_3": "expected_bool",
                "param_4": "start_time",
                "param_5": "max_iterations",
                "**param_1": "**bitmask",
                "iVar1": "current_time",
                "return 0": "return false",
                "return 3": "return true",
                "(*param_1)[3]": "(*bitmask)[3]",
                "(*param_1)[5]": "(*bitmask)[5]",
                "*(undefined *)((int)param_1 + 0x39)": "*(uint8_t *)((int)bitmask + 0x39)",
                "*(undefined *)((int)param_1 + 0x3a)": "*(uint8_t *)((int)bitmask + 0x3a)",
                "*(undefined *)(param_1 + 0xe)": "*(uint32_t *)(bitmask + 0xe)"
            },
            "code": "uint32_t check_bitmask_08002d0c(uint32_t **bitmask, uint32_t expected_result, bool expected_bool, int32_t param_4, uint32_t max_iterations) {\n  \n  uint32_t current_iteration = 0;\n  while ((max_iterations == 0xffffffff) || ((max_iterations != 0) && (FUN_08000e30() - param_4 <= max_iterations))) {\n    if (((expected_result & ~**bitmask) == 0) != expected_bool) {\n      return 0;\n    }\n    current_iteration++;\n  }\n  \n  (*bitmask)[3] &= 0xfffffe5f;\n  (*bitmask)[5] &= 0xfffffffe;\n  (*bitmask)[14] = 0;\n  *(uint8_t *)((int)bitmask + 0x39) = 0x20;\n  *(uint8_t *)((int)bitmask + 0x3a) = 0x20;\n  *(uint32_t *)(bitmask + 0xe) = 0;\n  return 3;\n}\n",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d0c",
            "calling": [
                "FUN_08002dd0"
            ],
            "imported": false,
            "current_name": "check_bitmask_08002d0c"
        },
        "FUN_08001902": {
            "renaming": {
                "FUN_08001902": "do_nothing_08001902"
            },
            "code": "\nvoid do_nothing_08001902(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001902",
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "imported": false,
            "current_name": "do_nothing_08001902"
        },
        "FUN_08001904": {
            "renaming": {
                "FUN_08001904": "process_string_08001904",
                "param_1": "string_param",
                "puVar1": "string_ptr",
                "current_char": "current_char",
                "string_length": "string_length"
            },
            "code": "uint32_t process_string_08001904(uint32_t **string_param)\n{\n  uint32_t *string_ptr;\n  char current_char;\n  uint16_t string_length;\n  \n  current_char = *(char *)((int)string_param + 0x3d);\n  if (current_char == '\"') {\n    string_length = *(uint16_t *)((int)string_param + 0x2a);\n    if (string_length < 4) {\n      if (string_length < 2) {\n        **string_param = **string_param & 0xfffffbff;\n        (*string_param)[1] = (*string_param)[1] & 0xfffff8ff;\n        string_ptr = string_param[9];\n        string_param[9] = (uint32_t *)((int)string_ptr + 1);\n        *(char *)string_ptr = (char)(*string_param)[4];\n        *(uint16_t *)((int)string_param + 0x2a) = *(uint16_t *)((int)string_param + 0x2a) - 1;\n        *(char *)((int)string_param + 0x3d) = 0x20;\n        string_param[0xc] = (uint32_t *)0x0;\n        current_char = *(char *)((int)string_param + 0x3e);\n        if (current_char == '@') {\n          *(char *)((int)string_param + 0x3e) = 0;\n          do_nothing_08001902();\n        }\n        else {\n          *(char *)((int)string_param + 0x3e) = 0;\n          do_nothing_080015b8();\n        }\n      }\n    }\n    else {\n      string_ptr = string_param[9];\n      string_param[9] = (uint32_t *)((int)string_ptr + 1);\n      *(char *)string_ptr = (char)(*string_param)[4];\n      *(uint16_t *)((int)string_param + 0x2a) = *(uint16_t *)((int)string_param + 0x2a) - 1;\n      string_length = *(uint16_t *)((int)string_param + 0x2a);\n      if (string_length == 3) {\n        (*string_param)[1] = (*string_param)[1] & 0xfffffbff;\n      }\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001904",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_string_08001904"
        },
        "FUN_08000c64": {
            "renaming": {
                "FUN_08000c64": "execute_function_08000c64",
                "in_r3": "argument3",
                "PTR_DAT_08000c78": "pointer1",
                "PTR_DAT_08000c74": "pointer2"
            },
            "code": "void execute_function_08000c64(void)\n{\n  int argument1 = 0x10;\n  int argument2 = 0;\n  int argument3 = 0;\n  function_with_arguments(PTR_DAT_08000c78, PTR_DAT_08000c74, argument1, argument2, argument3);\n  return;\n}",
            "called": [
                "FUN_08000b54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c64",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "execute_function_08000c64"
        },
        "FUN_08002ffc": {
            "renaming": {
                "FUN_08002ffc": "process_data_08002ffc",
                "param_1": "data",
                "iVar1": "result",
                "uVar2": "fourth_byte",
                "puVar3": "data_ptr",
                "uVar4": "bit_0_of_byte_5",
                "uVar5": "first_byte"
            },
            "code": "void process_data_08002ffc(uint **data) {\n  uint *data_ptr = *data;\n  uint first_byte = *data_ptr;\n  uint fourth_byte = data_ptr[3];\n  \n  if (((first_byte & 0xf) == 0) && ((first_byte & 0x20) != 0)) && ((fourth_byte & 0x20) != 0)) {\n    execute_subroutine_A(data);\n    return;\n  }\n  if (((first_byte & 0xf) == 0) || ((data_ptr[5] & 1) == 0 && ((fourth_byte & 0x120) == 0)))) {\n    if (((first_byte & 0x80) != 0) && ((fourth_byte & 0x80) != 0)) {\n      execute_subroutine_B(data);\n      return;\n    }\n    if (((first_byte & 0x40) != 0) && ((fourth_byte & 0x40) != 0)) {\n      execute_subroutine_C(data);\n    }\n  }\n  else {\n    if (((first_byte & 1) != 0) && ((fourth_byte & 0x100) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 1);\n    }\n    if (((first_byte & 4) != 0) && ((data_ptr[5] & 1) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 2);\n    }\n    if (((first_byte & 2) != 0) && ((data_ptr[5] & 1) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 4);\n    }\n    if (((first_byte & 8) != 0) && ((data_ptr[5] & 1) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 8);\n    }\n    if (data[0xf] != (uint *)0x0) {\n      if (((first_byte & 0x20) != 0) && ((fourth_byte & 0x20) != 0)) {\n        execute_subroutine_A(data);\n      }\n      if ((((uint)data[0xf] & 8) == 0) && (((*data)[5] & 0x40) == 0)) {\n        do_nothing(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      execute_subroutine_D(data);\n      data_ptr = *data;\n      if ((data_ptr[5] & 0x40) == 0) {\n        do_nothing(data);\n        return;\n      }\n      data_ptr[5] = data_ptr[5] & 0xffffffbf;\n      if (data[0xd] == (uint *)0x0) {\n        do_nothing(data);\n        return;\n      }\n      data[0xd][0x14] = (uint *)subroutine_label;\n      int result = execute_subroutine_E(data[0xd]);\n      if (result != 0) {\n        (*(code *)data[0xd][0x14])();\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08003f94",
                "FUN_08002f66",
                "FUN_08002940",
                "FUN_0800295c",
                "FUN_08002f4c",
                "FUN_08000f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ffc",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08002ffc"
        },
        "FUN_0800387c": {
            "renaming": {
                "FUN_0800387c": "subtract_four_from_param_0800387c",
                "param_1": "input_param",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int subtract_four_from_param_0800387c(int input_param)\n{\n  int result = input_param - 4;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800387c",
            "calling": [
                "FUN_080038d0",
                "FUN_08003880",
                "FUN_08003900"
            ],
            "imported": false,
            "current_name": "subtract_four_from_param_0800387c"
        },
        "FUN_0800351e": {
            "renaming": {
                "FUN_0800351e": "check_parameter_0800351e",
                "param_1": "parameter",
                "uVar1": "result",
                "FUN_08003506": "call_function"
            },
            "code": "int check_parameter_0800351e(int parameter){\n    int result;\n    if(parameter != 0){\n        result = call_function();\n        return result;\n    }\n    return -1;\n}",
            "called": [
                "FUN_08003506"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800351e",
            "calling": [
                "FUN_08003cc8",
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "check_parameter_0800351e"
        },
        "FUN_080059f8": {
            "renaming": {
                "FUN_080059f8": "do_nothing_080059f8"
            },
            "code": "\nvoid do_nothing_080059f8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059f8",
            "calling": [
                "FUN_080001ac",
                "FUN_08004884"
            ],
            "imported": false,
            "current_name": "do_nothing_080059f8"
        },
        "FUN_08002f66": {
            "renaming": {
                "FUN_08002f66": "process_data_08002f66",
                "param_1": "data_ptr",
                "pbVar1": "byte_ptr",
                "sVar2": "remaining_data",
                "puVar3": "undefined_ptr",
                "data_ptr": "data_start"
            },
            "code": "int process_data_08002f66(int *data_ptr) {\n  char *data_start = (char *)data_ptr;\n  if (* (data_ptr + 0x3a) != '\"') {\n    return 2;\n  }\n  if (*(data_ptr + 2) == 0x1000) {\n    if (*(data_ptr + 4) == 0) {\n      *(unsigned short *)(data_start + *(data_ptr + 10)) = (unsigned short)((*(int *)(*data_ptr + 4) << 0x17) >> 0x17);\n      *(data_ptr + 10) += 2;\n    }\n    else {\n      *(unsigned short *)(data_start + *(data_ptr + 10)) = (unsigned short)*(unsigned int *)(*data_ptr + 4) & 0xff;\n      *(data_ptr + 10) += 1;\n    }\n  }\n  else if (*(data_ptr + 4) == 0) {\n    *(data_start + *(data_ptr + 10)) = *(unsigned int *)(*data_ptr + 4);\n    *(data_ptr + 10) += 1;\n  }\n  else {\n    *(data_start + *(data_ptr + 10)) = *(unsigned int *)(*data_ptr + 4) & 0x7f;\n    *(data_ptr + 10) += 1;\n  }\n  short remaining_data = *(short *)(data_start + 0x2e) - 1;\n  *(short *)(data_start + 0x2e) = remaining_data;\n  if (remaining_data != 0) {\n    return 0;\n  }\n  *(unsigned int *)(*data_ptr + 0xc) &= 0xfffffedf;\n  *(unsigned int *)(*data_ptr + 0x14) &= 0xfffffffe;\n  *(data_ptr + 0x3a) = 0x20;\n  process_final_data();\n  return 0;\n}",
            "called": [
                "FUN_08003f24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f66",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "process_data_08002f66"
        },
        "FUN_080034b6": {
            "renaming": {
                "FUN_080034b6": "determine_output_080034b6",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "FUN_08001198": "execute_function"
            },
            "code": "void determine_output_080034b6(undefined4 input_1, undefined2 input_2, int input_3, undefined4 input_4) {\n  if (input_3 == 0) {\n    execute_function(input_1, input_2, 0, input_4, input_4);\n    return;\n  }\n  execute_function(input_1, input_2, 1, input_4, input_4);\n  return;\n}",
            "called": [
                "FUN_08001198"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034b6",
            "calling": [
                "FUN_080041bc"
            ],
            "imported": false,
            "current_name": "determine_output_080034b6"
        },
        "FUN_08003eac": {
            "renaming": {
                "FUN_08003eac": "process_data_08003eac",
                "param_1": "data_pointer",
                "param_2": "new_data",
                "PTR_DAT_08003ef4": "data_array",
                "PTR_DAT_08003ef8": "index_array",
                "FUN_08000e60": "call_function1",
                "FUN_08000ec4": "call_function2",
                "FUN_08002eb2": "call_function3",
                "DATA_OFFSET": "0x44",
                "FUNCTION1_OFFSET": "0x5c",
                "FUNCTION2_OFFSET": "0x5c",
                "DATA3_ARRAY": "PTR_DAT_08003efc",
                "DATA3_OFFSET": "0x68",
                "DATA4_OFFSET": "0x6e"
            },
            "code": "void process_data_08003eac(int data_pointer, int new_data){\n    if (data_pointer != 0) {\n        int data_index = *(char *)(data_pointer + DATA_OFFSET);\n        PTR_DAT_08003ef4[data_index] = new_data;\n        PTR_DAT_08003ef8[data_index] = data_pointer;\n        call_function1((int)*(char *)(data_pointer + FUNCTION1_OFFSET), 0, 2);\n        call_function2((int)*(char *)(data_pointer + FUNCTION2_OFFSET));\n        call_function3(data3_array[data_index], data_pointer + DATA3_OFFSET + (uint)*(ushort *)(data_pointer + DATA4_OFFSET),1);\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_08002eb2",
                "FUN_08000e60",
                "FUN_08000ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eac",
            "calling": [
                "FUN_080042e8"
            ],
            "imported": false,
            "current_name": "process_data_08003eac"
        },
        "FUN_08003e18": {
            "renaming": {
                "FUN_08003e18": "get_value_at_offset_08003e18",
                "param_1": "offset",
                "param_2": "buffer",
                "param_3": "buffer_size",
                "param_4": "default_value",
                "iVar1": "status"
            },
            "code": "int get_value_at_offset_08003e18(int offset, char *buffer, int buffer_size, int default_value) {\n  if (offset == 0) {\n    return default_value;\n  }\n  int status = get_status();\n  if (status == 0) {\n    *buffer = *(char *)(offset + 0x45);\n    copy_value((int *)(PTR_DAT_08003e50 + (uint)*(char *)(offset + 0x44) * 4), offset + 0x45, 1, PTR_DAT_08003e50, buffer_size);\n    return 0;\n  }\n  return default_value;\n}",
            "called": [
                "FUN_08003dd0",
                "FUN_08002efa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e18",
            "calling": [
                "FUN_080042ac"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08003e18"
        },
        "FUN_080040fc": {
            "renaming": {
                "FUN_080040fc": "set_ptr_dat_to_22_080040fc",
                "PTR_DAT_08004108": "ptr_dat"
            },
            "code": "void set_ptr_dat_to_22_080040fc(void)\n{\n  int* PTR_DAT_08004108 = (int*) PTR_DAT_08004108;\n  *PTR_DAT_08004108 = 22;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040fc",
            "calling": [
                "FUN_080055d0"
            ],
            "imported": false,
            "current_name": "set_ptr_dat_to_22_080040fc"
        },
        "FUN_08002dd0": {
            "renaming": {
                "FUN_08002dd0": "process_input_08002dd0",
                "param_1": "input_buffer",
                "param_2": "data_buffer",
                "param_3": "buffer_size",
                "uVar1": "data",
                "iVar2": "result"
            },
            "code": "int process_input_08002dd0(int *input_buffer, ushort *data_buffer, int buffer_size, undefined4 param_4)\n{\n  undefined4 uVar1;\n  int result;\n  \n  if (*(char *)((int)input_buffer + 0x39) == ' ') {\n    if (data_buffer == (ushort *)0x0) {\n      result = 1;\n    }\n    else if (buffer_size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_buffer + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_buffer + 0xe) = 1;\n      input_buffer[0xf] = 0;\n      *(undefined *)((int)input_buffer + 0x39) = 0x21;\n      uVar1 = get_data(param_4);\n      *(short *)(input_buffer + 9) = (short)buffer_size;\n      *(short *)((int)input_buffer + 0x26) = (short)buffer_size;\n      while (*(short *)((int)input_buffer + 0x26) != 0) {\n        *(short *)((int)input_buffer + 0x26) = *(short *)((int)input_buffer + 0x26) + -1;\n        if (input_buffer[2] == 0x1000) {\n          result = process_data(input_buffer, 0x80, 0, uVar1, param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*input_buffer + 4) = *data_buffer & 0x1ff;\n          if (input_buffer[4] == 0) {\n            data_buffer = data_buffer + 1;\n          }\n          else {\n            data_buffer = (ushort *)((int)data_buffer + 1);\n          }\n        }\n        else {\n          result = process_data(input_buffer, 0x80, 0, uVar1, param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*input_buffer + 4) = (uint)*(byte *)data_buffer;\n          data_buffer = (ushort *)((int)data_buffer + 1);\n        }\n      }\n      result = process_data(input_buffer, 0x40, 0, uVar1, param_4);\n      if (result == 0) {\n        *(undefined *)((int)input_buffer + 0x39) = 0x20;\n        *(undefined *)(input_buffer + 0xe) = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [
                "FUN_08000e30",
                "FUN_08002d0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dd0",
            "calling": [
                "FUN_08003d18"
            ],
            "imported": false,
            "current_name": "process_input_08002dd0"
        },
        "FUN_08004860": {
            "renaming": {
                "FUN_08004860": "execute_function_with_params_and_stack_pointer_08004860",
                "param_1": "function_parameter_1",
                "param_2": "function_parameter_2",
                "param_3": "stack_pointer_1",
                "param_4": "stack_pointer_2",
                "uStack_8": "stack_pointer_3",
                "uStack_4": "stack_pointer_4",
                "PTR_PTR_DAT_08004880": "function_pointer",
                "FUNC_08004a84": "execute_function_with_params"
            },
            "code": "void execute_function_with_params_and_stack_pointer_08004860(void* PTR_PTR_DAT_08004880, int param_1, int param_2, int* stack_pointer_1, int* stack_pointer_2) {\n  int* stack_pointer_3 = stack_pointer_1;\n  int* stack_pointer_4 = stack_pointer_2;\n  PTR_PTR_DAT_08004880(*(int **)PTR_PTR_DAT_08004880, param_1, param_2, &stack_pointer_3, param_1, &stack_pointer_3);\n  return;\n}",
            "called": [
                "FUN_08004a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004860",
            "calling": [
                "FUN_08004808"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_and_stack_pointer_08004860"
        },
        "FUN_08004622": {
            "renaming": {
                "FUN_08004622": "execute_function_08004622",
                "param_1": "function_ptr",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "FUN_080045c8": "execute_function_with_3_args"
            },
            "code": "void execute_function_08004622(undefined4 *function_ptr,uint arg1,uint arg2,undefined4 arg3)\n{\n    if (arg2 != 0) {\n        uint8_t arg2_lsb = arg2 & 0xff;\n        function_ptr(function_ptr, arg2_lsb, 0, *(code **)*function_ptr, arg3);\n    }\n    else {\n        uint8_t arg3_lsb = arg3 & 0xff;\n        FUN_080045c8(function_ptr, arg1, arg3_lsb);\n    }\n}",
            "called": [
                "FUN_080045c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004622",
            "calling": [
                "FUN_08004638"
            ],
            "imported": false,
            "current_name": "execute_function_08004622"
        },
        "FUN_08003414": {
            "renaming": {
                "FUN_08003414": "process_data_08003414",
                "param_1": "param",
                "local_4c": "data_array",
                "PTR_DAT_08003468": "PTR_DATA",
                "FUN_080034f4": "get_data",
                "FUN_0800339c": "check_data",
                "FUN_0800354a": "get_flag",
                "FUN_08002864": "process_data_type1",
                "FUN_080028f0": "process_data_type2",
                "FUN_0800268e": "finalize_data"
            },
            "code": "void process_data_08003414(int param)\n{\n  int result;\n  uint flag;\n  int data_array[16];\n  data_array[0] = get_data(param, PTR_DAT_08003468);\n  if (data_array[0] != 0 && ((result = check_data(param), result == 0 || result == 4 || result == 8 || result == 0xc || result == 0x18))) {\n    flag = get_flag(param, PTR_DAT_08003468);\n    if ((flag & 0x100000) == 0) {\n      process_data_08003414_type1(data_array, result);\n    }\n    else {\n      process_data_08003414_type2(data_array, result);\n    }\n    finalize_data(data_array);\n  }\n  return;\n}",
            "called": [
                "FUN_08002864",
                "FUN_0800268e",
                "FUN_080028f0",
                "FUN_0800339c",
                "FUN_080034f4",
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003414",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "process_data_08003414"
        },
        "FUN_08005718": {
            "renaming": {
                "FUN_08005718": "execute_command_08005718",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "data_pointer",
                "iVar2": "status"
            },
            "code": "void execute_command_08005718(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n  undefined *data_pointer;\n  int status;\n  data_pointer = PTR_DAT_08005738;\n  *(undefined4 *)PTR_DAT_08005738 = 0;\n  status = execute_system_command(arg1, arg2, arg3, arg3, arg3);\n  if ((status == -1) && (*(int *)data_pointer != 0)) {\n    *result = *(int *)data_pointer;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005718",
            "calling": [
                "FUN_0800562a",
                "FUN_08005662"
            ],
            "imported": false,
            "current_name": "execute_command_08005718"
        },
        "FUN_080011c0": {
            "renaming": {
                "FUN_080011c0": "set_flag_080011c0",
                "param_1": "flag_ptr",
                "*(char *)((int)param_1 + 0x3e)": "flag_char",
                "param_1[0x14]": "flag_val2",
                "*(uint *)(*param_1 + 0x10)": "data_ptr[0x4]",
                "param_1[0x11]": "flag_val",
                "*(char *)((int)param_1 + 0x3d)": "flag_char2"
            },
            "code": "int set_flag_080011c0(int *flag_ptr) {\n    char flag_char = *(char *)((int)flag_ptr + 0x3e);\n    int flag_val = flag_ptr[0x11];\n    int *data_ptr = (int *)*flag_ptr;\n\n    if (flag_char == '@') {\n        if (flag_ptr[0x14] == 0) {\n            data_ptr[0x4] = flag_val & 0xfe;\n        }\n        else {\n            data_ptr[0x4] = flag_val & 0xffU | 1;\n        }\n    }\n    else if (flag_ptr[0x4] == 0x4000) {\n        char flag_char2 = *(char *)((int)flag_ptr + 0x3d);\n        if (flag_char2 == '!') {\n            data_ptr[0x4] = flag_val & 0xfe;\n        }\n        else {\n            data_ptr[0x4] = flag_val & 0xffU | 1;\n        }\n    }\n    else if (flag_ptr[0x14] == 0) {\n        data_ptr[0x4] = (flag_val << 0x10) >> 0x17 & 6 | 0xf0;\n    }\n    else if (flag_ptr[0x14] == 1) {\n        data_ptr[0x4] = (flag_val << 0x10) >> 0x17 & 6 | 0xf1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011c0",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "set_flag_080011c0"
        },
        "FUN_08000b54": {
            "renaming": {
                "FUN_08000b54": "process_data_08000b54",
                "param_1": "data",
                "param_2": "input",
                "param_3": "flag",
                "bVar1": "result",
                "iVar2": "i",
                "unaff_r5": "count",
                "iVar3": "status",
                "FUN_080006b4": "get_data",
                "FUN_080007f0": "check_data",
                "FUN_08004204": "get_value",
                "param_1 + 0x13": "data[19]",
                "*(char *)(param_1 + 0x18)": "*(char *)(data + 24)",
                "*(byte *)((int)param_1 + 5)": "*(byte *)((int)data + 5)",
                "**(code **)(**param_1 + 8)": "**(code **)(**data + 8)",
                "*(char *)((int)param_1 + 9)": "*(char *)((int)data + 9)",
                "param_1 + 2": "data[2]",
                "param_1 + 1": "data[1]",
                "*(ushort *)((int)param_1 + 0x56)": "*(ushort *)((int)data + 86)",
                "param_1[0x17]": "data[23]",
                "*(undefined *)(param_1 + 2)": "*(undefined *)(data + 2)",
                "case 1:": "case 1:\ncase 2:",
                "case 3:": "case 3:\ncase 4:",
                "case 15:": "case 15:\ncase 16:"
            },
            "code": "int process_data_08000b54(int **data, int *input, int flag)\n{\n    byte result;\n    int i, status;\n    uint count;\n    data[19] = input;\n    *(char *)(data + 24) = (char)flag;\n    if (*(byte *)((int)data + 5) < 4) {\n        result = (**(code **)(**data + 8))();\n        count = (uint)result;\n    }\n    if (count == 0) {\n        status = 0;\n    }\n    else if ((int)count < 8) {\n        status = 0;\n    }\n    else {\n        status = get_data(data);\n        *(char *)(data + 2) = (char)status;\n        if (*(char *)((int)data + 9) == *(char *)(data + 1)) {\n            i = check_data(data);\n            if (i < 1) {\n                i = get_value();\n                data[23] = (int *)((uint)*(ushort *)((int)data + 86) + i);\n                *(undefined *)(data + 2) = 0;\n                switch(*(undefined *)((int)data + 10)) {\n                    case 1:\n                    case 2:\n                        status = process_type1(data, input, flag);\n                        break;\n                    case 3:\n                    case 4:\n                        status = process_type2(data, input, flag);\n                        break;\n                    case 5:\n                        status = process_type3(data, input, flag);\n                        break;\n                    case 6:\n                        status = process_type4(data, input, flag);\n                        break;\n                    case 15:\n                        status = process_type5(data, input, flag);\n                        break;\n                    case 16:\n                        status = process_type6(data, input, flag);\n                        break;\n                }\n            }\n            else {\n                if (i != 0xff) {\n                    process_value(data, i);\n                    process_input(data);\n                }\n                *(char *)(data + 2) = (char)i;\n                status = (int)(char)i;\n            }\n        }\n        else {\n            status = 0;\n        }\n    }\n    return status;\n}",
            "called": [
                "FUN_08000a00",
                "FUN_080006b4",
                "FUN_080008cc",
                "FUN_080007f0",
                "FUN_08000b04",
                "FUN_08004204",
                "FUN_0800076c",
                "FUN_080008e2",
                "FUN_08000a7a",
                "FUN_08000a4e",
                "FUN_08000998"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b54",
            "calling": [
                "FUN_08000c64"
            ],
            "imported": false,
            "current_name": "process_data_08000b54"
        },
        "FUN_08000d96": {
            "renaming": {
                "FUN_08000d96": "do_nothing_08000d96"
            },
            "code": "\nvoid do_nothing_08000d96(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d96",
            "calling": [
                "FUN_08000de4"
            ],
            "imported": false,
            "current_name": "do_nothing_08000d96"
        },
        "FUN_0800376e": {
            "renaming": {
                "FUN_0800376e": "execute_function_if_not_null_0800376e",
                "iVar1": "function_pointer_address",
                "FUN_08003750": "get_function_pointer_address",
                "*(code **)(iVar1 + 0x44)": "function_pointer",
                "(code *)0x0": "null_pointer"
            },
            "code": "void execute_function_if_not_null_0800376e() {\n  int function_pointer_address = get_function_pointer_address();\n  if (*(code **)(function_pointer_address + 0x44) != (code *)0x0) {\n    (**(code **)(function_pointer_address + 0x44))();\n  }\n  return;\n}",
            "called": [
                "FUN_08003750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376e",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_0800376e"
        },
        "FUN_08000d98": {
            "renaming": {
                "FUN_08000d98": "check_input_and_set_08000d98",
                "param_1": "input",
                "iVar1": "result",
                "PTR_DAT_08000ddc": "dividend_ptr",
                "PTR_DAT_08000dd8": "divisor_ptr",
                "FUN_08000ee0": "divide",
                "*(uint*)PTR_DAT_08000de0": "output_ptr"
            },
            "code": "int check_input_and_set_08000d98(uint input) {\n  uint divisor = *(uint*)PTR_DAT_08000ddc / (1000 / (byte)*PTR_DAT_08000dd8);\n  int result = FUN_08000ee0(divisor);\n  if (result != 0) {\n    return 1;\n  }\n  if (input > 0xf) {\n    return 1;\n  }\n  FUN_08000e60(0xffffffff, input, 0);\n  *(uint*)PTR_DAT_08000de0 = input;\n  return 0;\n}",
            "called": [
                "FUN_08000ee0",
                "FUN_08000e60"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d98",
            "calling": [
                "FUN_08000de4",
                "FUN_08002488"
            ],
            "imported": false,
            "current_name": "check_input_and_set_08000d98"
        },
        "FUN_08003f48": {
            "renaming": {
                "FUN_08003f48": "runFunction_08003f48",
                "uVar1": "randomIndex",
                "iVar2": "returnValue",
                "iVar3": "dataAddress",
                "PTR_DAT_08003f88": "dataPointer1",
                "PTR_DAT_08003f8c": "functionPointer1",
                "PTR_DAT_08003f90": "dataPointer2"
            },
            "code": "void runFunction_08003f48() {\n  uint32_t randomIndex = getRandomIndex();\n  int32_t dataAddress = *(int32_t *)(PTR_DAT_08003f88 + randomIndex * 4);\n  if ((randomIndex < 10) && (dataAddress != -1)) {\n    int32_t address1 = *(int32_t *)(PTR_DAT_08003f90 + (uint32_t)*(uint8_t *)(dataAddress + 0x44) * 4);\n    int32_t address2 = *(int32_t *)(dataAddress + 0x68) + (uint32_t)*(uint16_t *)(dataAddress + 0x6e);\n    FUN_08002eb2(address1, address2, 1);\n  }\n  return;\n}",
            "called": [
                "FUN_08003f00",
                "FUN_08002eb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f48",
            "calling": [
                "FUN_08002f4c"
            ],
            "imported": false,
            "current_name": "runFunction_08003f48"
        },
        "FUN_0800340c": {
            "renaming": {
                "FUN_0800340c": "execute_function_0800340c",
                "FUN_080035fc": "call_secondary_function"
            },
            "code": "void execute_function_0800340c(){\n  call_secondary_function();\n  return;\n}",
            "called": [
                "FUN_080035fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800340c",
            "calling": [
                "FUN_0800268e"
            ],
            "imported": false,
            "current_name": "execute_function_0800340c"
        },
        "FUN_0800352e": {
            "renaming": {
                "FUN_0800352e": "find_short_value_in_array_0800352e",
                "param_1": "value_to_find",
                "param_2": "array_of_values",
                "*param_2": "*array_of_values"
            },
            "code": "unsigned int find_short_value_in_array_0800352e(int value_to_find, short *array_of_values)\n{\n    while (true)\n    {\n        if (*array_of_values == -1)\n        {\n            return 0xffffffff;\n        }\n        if (*array_of_values == value_to_find)\n        {\n            break;\n        }\n        array_of_values = array_of_values + 6;\n    }\n    return *(unsigned int *)(array_of_values + 4);\n}",
            "called": [
                "FUN_0800352e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800352e",
            "calling": [
                "FUN_0800354a",
                "FUN_0800352e"
            ],
            "imported": false,
            "current_name": "find_short_value_in_array_0800352e"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "process_input_08001ab0",
                "param_1": "input_data",
                "iVar1": "input_length",
                "puVar2": "data_pointer",
                "puVar3": "data_pointer2"
            },
            "code": "void process_input_08001ab0(uint **input_data)\n{\n  int input_length;\n  uint *data_pointer;\n  uint *data_pointer2;\n  \n  input_length = *(byte *)((int)input_data + 0x3d) - 0x29;\n  if (input_length < 2) {\n    input_data[0xc] = (uint *)0x0;\n    *(undefined *)((int)input_data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)input_data + 0x3d) != '`') && (((*input_data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)input_data + 0x3d) = 0x20;\n    }\n    input_data[0xc] = (uint *)0x0;\n    *(undefined *)((int)input_data + 0x3e) = 0;\n  }\n  **input_data = **input_data & 0xfffff7ff;\n  data_pointer2 = *input_data;\n  if ((data_pointer2[1] & 0x800) == 0) {\n    if (*(char *)((int)input_data + 0x3d) == '`') {\n      *(undefined *)((int)input_data + 0x3d) = 0x20;\n      input_data[0x10] = (uint *)0x0;\n      if ((data_pointer2[5] & 0x40) != 0) {\n        data_pointer = input_data[9];\n        input_data[9] = (uint *)((int)data_pointer + 1);\n        *(char *)data_pointer = (char)data_pointer2[4];\n      }\n      **input_data = **input_data & 0xfffffffe;\n      do_nothing(input_data);\n    }\n    else {\n      if ((data_pointer2[5] & 0x40) != 0) {\n        data_pointer = input_data[9];\n        input_data[9] = (uint *)((int)data_pointer + 1);\n        *(char *)data_pointer = (char)data_pointer2[4];\n      }\n      process_data(input_data);\n    }\n  }\n  else {\n    data_pointer2[1] = data_pointer2[1] & 0xfffff7ff;\n    if (*(char *)((int)input_data[0xd] + 0x35) == '\\x01') {\n      input_data[0xe][0x14] = (uint)PTR_LAB_08001f3c_1_08001bf4;\n      input_length = some_function(input_data[0xe]);\n      if (input_length != 0) {\n        if (((*input_data)[5] & 0x40) != 0) {\n          data_pointer2 = input_data[9];\n          input_data[9] = (uint *)((int)data_pointer2 + 1);\n          *(char *)data_pointer2 = (char)(*input_data)[4];\n        }\n        **input_data = **input_data & 0xfffffffe;\n        *(undefined *)((int)input_data + 0x3d) = 0x20;\n        (*(code *)input_data[0xe][0x14])();\n      }\n    }\n    else {\n      input_data[0xd][0x14] = (uint)PTR_LAB_08001f3c_1_08001bf4;\n      input_length = some_function(input_data[0xd]);\n      if (input_length != 0) {\n        **input_data = **input_data & 0xfffffffe;\n        *(undefined *)((int)input_data + 0x3d) = 0x20;\n        (*(code *)input_data[0xd][0x14])();\n      }\n    }\n  }\n  if ((*(char *)((int)input_data + 0x3d) == '(') && (((uint)input_data[0x10] & 4) != 0)) {\n    input_data[0xb] = DAT_08001bf8;\n    input_data[0xc] = (uint *)0x0;\n    *(undefined *)((int)input_data + 0x3d) = 0x20;\n    *(undefined *)((int)input_data + 0x3e) = 0;\n    process_data(input_data);\n  }\n  return;\n}\n",
            "called": [
                "FUN_080038d0",
                "FUN_08001aac",
                "FUN_08003900",
                "FUN_08000f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08001e68",
                "FUN_08001bfc"
            ],
            "imported": false,
            "current_name": "process_input_08001ab0"
        },
        "FUN_08001f9c": {
            "renaming": {
                "FUN_08001f9c": "perform_system_check_08001f9c",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "status_reg_ptr": "DAT_0800200c",
                "flag_reg_ptr": "DAT_08002010",
                "check_status": "FUN_08000e30",
                "status": "status",
                "error_reg_ptr": "DAT_08002014",
                "error_reg": "error_reg",
                "*DAT_08002018": "*flag_reg",
                "0x10000": "BIT_16",
                "0x20000": "BIT_17",
                "0x10000000": "BIT_28",
                "0x3e9": "TIMEOUT_MS"
            },
            "code": "int perform_system_check_08001f9c(void)\\n\\\n{\\n\\\n  int start_time = get_time_in_ms();\\n\\\n  int current_time;\\n\\\n  uint32_t *status_reg = (uint32_t *)(status_reg_ptr + 0x40);\\n\\\n  uint32_t *DAT_08002018 = (uint32_t *)(flag_reg_ptr + 0x0);\\n\\\n  uint32_t *error_reg = (uint32_t *)(error_reg_ptr + 0x4);\\n\\\n  *status_reg |= 0x10000000;\\n\\\n  *DAT_08002018 = 1;\\n\\\n  int status = check_status();\\n\\\n  do {\\n\\\n    if ((*error_reg & 0x10000) != 0) {\\n\\\n      *DAT_08002018 = 1;\\n\\\n      status = check_status();\\n\\\n      do {\\n\\\n        if ((*error_reg & 0x20000) != 0) {\\n\\\n          return 0;\\n\\\n        }\\n\\\n        current_time = get_time_in_ms();\\n\\\n      } while ((uint)(current_time - start_time) < 0x3e9);\\n\\\n      return 3;\\n\\\n    }\\n\\\n    current_time = get_time_in_ms();\\n\\\n  } while ((uint)(current_time - start_time) < 0x3e9);\\n\\\n  return 3;\\n\\\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f9c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "perform_system_check_08001f9c"
        },
        "FUN_08000d8e": {
            "renaming": {
                "FUN_08000d8e": "run_application_08000d8e",
                "FUN_080034ce": "initialize_application"
            },
            "code": "void run_application_08000d8e(void)\n{\n  initialize_application();\n  return;\n}",
            "called": [
                "FUN_080034ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d8e",
            "calling": [
                "FUN_08004648"
            ],
            "imported": false,
            "current_name": "run_application_08000d8e"
        },
        "FUN_08004638": {
            "renaming": {
                "FUN_08004638": "call_function_1_before_return_08004638",
                "FUN_08004622": "call_function_2"
            },
            "code": "void call_function_1_before_return_08004638(void)\n{\n  call_function_2();\n  return;\n}",
            "called": [
                "FUN_08004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004638",
            "calling": [],
            "imported": false,
            "current_name": "call_function_1_before_return_08004638"
        },
        "FUN_080008cc": {
            "renaming": {
                "FUN_080008cc": "copy_data_080008cc",
                "param_1": "data_address",
                "param_2": "flag",
                "*(undefined *)(param_1 + 4)": "data_ptr",
                "*(byte *)(param_1 + 10)": "flag_ptr",
                "*(undefined *)(param_1 + 0xb)": "type_ptr",
                "*(undefined *)(param_1 + 0x49)": "size_ptr",
                "*(byte *)(param_1 + 10) ^ 0x80": "*flag_ptr = *flag_ptr ^ 0x80",
                "*(undefined *)(param_1 + 0xb) = param_2": "*type_ptr = flag",
                "*(undefined *)(param_1 + 0x49) = 3": "*size_ptr = 3"
            },
            "code": "void copy_data_080008cc(int data_address, unsigned char flag) {\n    unsigned char* data_ptr = (unsigned char*) data_address;\n    unsigned char* flag_ptr = data_ptr + 10;\n    unsigned char* type_ptr = data_ptr + 0xb;\n    unsigned char* size_ptr = data_ptr + 0x49;\n    *flag_ptr = *flag_ptr ^ 0x80;\n    *type_ptr = flag;\n    *size_ptr = 3;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008cc",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "copy_data_080008cc"
        },
        "FUN_08004a84": {
            "renaming": {
                "FUN_08004a84": "FUNC_08004a84"
            },
            "code": "\nint FUNC_08004a84(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    FUN_080053a0();\n  }\n  if (param_2 == PTR_DAT_08004c90) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_08004c98) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_08004c9c) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = FUN_080050d0(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_08004ac6:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = FUN_08004a60(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08004c70;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = FUN_08000230(PTR_s___0__08004c94,*pbVar5);\n    puVar1 = PTR_DAT_08004ca0;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__08004c94 & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_08004ba0;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_08004ba0:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      local_84 = *local_8c;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n      param_3 = param_3 + 2;\n      local_8c = local_8c + 1;\n    }\n    else {\n      bVar4 = false;\n      local_84 = 0;\n      iVar7 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = FUN_08000230(PTR_DAT_08004ca0,*param_3,3);\n  if (iVar7 != 0) {\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n    param_3 = param_3 + 1;\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = FUN_08000230(PTR_s_efgEFG_08004ca4,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_08004d9c(param_1,&local_88,param_2,DAT_08004cac,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_08004ca8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_08004c22;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08004c70;\nLAB_08004c22:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_08004ac6;\n}\n\n",
            "called": [
                "FUN_08000230",
                "FUN_08004d9c",
                "FUN_080053a0",
                "FUN_08004a60",
                "FUN_080050d0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004a84",
            "calling": [
                "FUN_08004fdc",
                "FUN_08004860"
            ],
            "imported": false,
            "current_name": "FUNC_08004a84"
        },
        "FUN_08005608": {
            "renaming": {
                "FUN_08005608": "calculate_new_value_and_update_08005608",
                "param_1": "original_value",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "new_value",
                "bVar3": "is_positive",
                "*(short *)(param_2 + 0xe)": "offset",
                "*(int *)(param_2 + 0x54)": "current_value",
                "*(ushort *)(param_2 + 0xc)": "current_short_value"
            },
            "code": "void calculate_new_value_and_update_08005608(uint32_t param_1, int32_t param_2)\n{\n  int32_t offset = (int32_t)*(short *)(param_2 + 0xe);\n  int32_t result = calculate_offset(param_1, offset);\n  bool is_positive = result >= 0;\n  uint32_t new_value = is_positive ? *(uint32_t *)(param_2 + 0x54) + result : *(uint16_t *)(param_2 + 0xc) & 0xffffefff;\n  if (is_positive)\n  {\n    *(uint32_t *)(param_2 + 0x54) = new_value;\n  }\n  else\n  {\n    *(uint16_t *)(param_2 + 0xc) = (uint16_t)new_value;\n  }\n}\n\nint32_t calculate_offset(uint32_t param_1, int32_t offset)\n{\n  return FUN_0800573c(param_1, offset);\n}",
            "called": [
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005608",
            "calling": [],
            "imported": false,
            "current_name": "calculate_new_value_and_update_08005608"
        },
        "FUN_08002efa": {
            "renaming": {
                "FUN_08002efa": "validate_input_08002efa",
                "param_1": "input_array",
                "param_2": "array_length",
                "param_3": "value",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "int validate_input_08002efa(int *input_array, int array_length, int value) {\n  if (*(char *)((int)input_array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (array_length == 0) {\n    return 1;\n  }\n  if (value == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array[10] = array_length;\n    *(short *)(input_array + 0xb) = (short)value;\n    *(short *)((int)input_array + 0x2e) = (short)value;\n    input_array[0xf] = 0;\n    *(undefined *)((int)input_array + 0x3a) = 0x22;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) | 1;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x120;\n    return 0;\n  }\n  return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efa",
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "imported": false,
            "current_name": "validate_input_08002efa"
        },
        "FUN_0800268c": {
            "renaming": {
                "FUN_0800268c": "do_nothing_0800268c"
            },
            "code": "\nvoid do_nothing_0800268c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268c",
            "calling": [
                "FUN_0800262c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800268c"
        },
        "FUN_08001aac": {
            "renaming": {
                "FUN_08001aac": "do_nothing_08001aac"
            },
            "code": "\nvoid do_nothing_08001aac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001aac",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "do_nothing_08001aac"
        },
        "FUN_0800377c": {
            "renaming": {
                "FUN_0800377c": "checkAndExecute_0800377c",
                "PTR_DAT_08003794": "ptr",
                "PTR_DAT_08003794 + 0x24": "ptr2"
            },
            "code": "void checkAndExecute_0800377c() {\n  int* PTR_DAT_08003794 = (int*) PTR_DAT_08003794;\n  if (*PTR_DAT_08003794 != 0) {\n    FUN_080026ce();\n  }\n  int* PTR_DAT_08003794 + 0x24 = (int*) (PTR_DAT_08003794 + 0x24);\n  if (*PTR_DAT_08003794 + 0x24 != 0) {\n    FUN_080026ce();\n  }\n  return;\n}",
            "called": [
                "FUN_080026ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800377c",
            "calling": [],
            "imported": false,
            "current_name": "checkAndExecute_0800377c"
        },
        "FUN_0800268e": {
            "renaming": {
                "FUN_0800268e": "check_and_update_flags_0800268e",
                "param_1": "params",
                "puVar1": "param_pointer"
            },
            "code": "void check_and_update_flags_0800268e(uint **params)\n{\n  uint *param_pointer;\n  params[0x39] = 2;\n  param_pointer = *params;\n  if ((param_pointer[8] & 0x1111) == 0)\n  {\n    if ((param_pointer[8] & 0x444) == 0)\n    {\n      *param_pointer = *param_pointer & 0xfffffffe;\n    }\n  }\n  call_subroutine(params);\n  params[0x39] = 0;\n  params[0xe] = 0;\n  return;\n}",
            "called": [
                "FUN_0800340c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268e",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "check_and_update_flags_0800268e"
        },
        "FUN_080008e2": {
            "renaming": {
                "FUN_080008e2": "process_data_080008e2",
                "param_1": "data_ptr",
                "param_2": "flag_ptr",
                "param_3": "arg1",
                "param_4": "arg2",
                "iVar1": "index",
                "uVar2": "data_size",
                "cVar5": "bit",
                "iVar6": "byte_index",
                "uVar3": "i",
                "uVar4": "bit_index"
            },
            "code": "int process_data_080008e2(int data_ptr, int flag_ptr, undefined4 arg1, undefined4 arg2) {\n  int index = process_data_080008e2_helper(*(undefined *)(data_ptr + 0xb), *(undefined *)(data_ptr + 0xc), arg1, arg2, arg2);\n  uint data_size = process_data_080008e2_helper(*(undefined *)(data_ptr + 0xd), *(undefined *)(data_ptr + 0xe));\n  char bit = (char)((data_size << 0x15) >> 0x18);\n  if ((data_size & 7) != 0) {\n    bit = bit + 1;\n  }\n  *(char *)(data_ptr + 0xb) = bit;\n  *(undefined *)(data_ptr + 0x49) = 3;\n  uint bit_index = 0;\n  for (uint i = 0; (int)i < (int)data_size; i = (i + 1) & 0xffff) {\n    uint data_index = (i + index) * 0x100000 >> 0x18;\n    ushort data = *(ushort *)(flag_ptr + data_index * 2);\n    if (((int)(uint)(data >> (i + index & 0xf) & 1U) == 0)) {\n      uint byte_index = (uint)*(byte *)(data_ptr + 0x49) + data_ptr;\n      *(byte *)(byte_index + 9) = *(byte *)(byte_index + 9) & ~(byte)(1 << bit_index);\n    }\n    else {\n      uint byte_index = (uint)*(byte *)(data_ptr + 0x49) + data_ptr;\n      *(byte *)(byte_index + 9) = *(byte *)(byte_index + 9) | (byte)(1 << bit_index);\n    }\n    bit_index = (bit_index + 1) & 0xff;\n    if (bit_index > 7) {\n      *(char *)(data_ptr + 0x49) = *(char *)(data_ptr + 0x49) + 1;\n      bit_index = 0;\n    }\n  }\n  if ((data_size & 7) != 0) {\n    *(char *)(data_ptr + 0x49) = *(char *)(data_ptr + 0x49) + 1;\n  }\n  char result = *(char *)(data_ptr + 0x49);\n  finalize_data(data_ptr);\n  return (int)(char)(result + 2);\n}\n",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008e2",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "process_data_080008e2"
        },
        "FUN_080045c8": {
            "renaming": {
                "FUN_080045c8": "convert_base_080045c8",
                "param_1": "output",
                "param_2": "input",
                "param_3": "base",
                "local_15": "buffer",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "p",
                "cVar1": "digit"
            },
            "code": "uint32_t convert_base_080045c8(int *output, uint32_t input, uint32_t base) {\n    char digit;\n    uint32_t quotient;\n    uint32_t remainder;\n    char buffer[9];\n    buffer[1] = 0;\n    if (base < 2 || base > 36) {\n        base = 10;\n    }\n    char *p = buffer + 1;\n    do {\n        quotient = input / base;\n        remainder = (input & 0xff) - ((int16_t)quotient * (int16_t)base & 0xffU) & 0xff;\n        p--;\n        digit = (char)remainder;\n        if (remainder < 10) {\n            digit += '0';\n        }\n        else {\n            digit += '7';\n        }\n        *p = digit;\n        input = quotient;\n    } while (quotient != 0);\n    if (p == (char *)0x0) {\n        return 0;\n    }\n    else {\n        uint32_t length = strlen(p);\n        uint32_t result = (**(code **)(*output + 4))(output, p, length);\n        return result;\n    }\n}",
            "called": [
                "FUN_08000218"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c8",
            "calling": [
                "FUN_08004622"
            ],
            "imported": false,
            "current_name": "convert_base_080045c8"
        },
        "FUN_08003d18": {
            "renaming": {
                "FUN_08003d18": "findValueAndDoSomething_08003d18",
                "param_1": "input1",
                "param_2": "input2",
                "iVar2": "startTime",
                "sVar1": "value",
                "iVar3": "foundValue",
                "uVar4": "index",
                "PTR_DAT_08003dc0": "dataPointer1",
                "PTR_DAT_08003dc4": "dataPointer2",
                "PTR_DAT_08003dc8": "dataPointer3",
                "PTR_DAT_08003dcc": "dataPointer4",
                "FUN_08000e30": "getCurrentTime",
                "FUN_080034f4": "findValue",
                "FUN_08003cc8": "checkValue",
                "FUN_08002dd0": "doSomethingWithValues"
            },
            "code": "uint findValueAndDoSomething_08003d18(uint input1, uint input2)\n{\n  int startTime = getCurrentTime();\n  short value = *(short *)(PTR_DAT_08003dc0 + 0x9a);\n  int foundValue = findValue(value, PTR_DAT_08003dc4);\n  if (foundValue == 0) {\n    return 0;\n  }\n  uint index = 0;\n  while (index < 10 && ((*(int *)(PTR_DAT_08003dc8 + index * 4) == 0 || findValue(value, PTR_DAT_08003dc4) != **(int **)(PTR_DAT_08003dc8 + index * 4))))) {\n    index++;\n  }\n  if (index > 9) {\n    if (PTR_DAT_08003dcc[0x44] > 9 && checkValue() > 9) {\n      return 0;\n    }\n    index = (uint)PTR_DAT_08003dcc[0x44];\n  }\n  do {\n    foundValue = doSomethingWithValues(*(undefined4 *)(PTR_DAT_08003dc8 + index * 4), input1, input2 & 0xffff, 1000);\n    if (foundValue == 0) {\n      return input2;\n    }\n    startTime = getCurrentTime();\n  } while (getCurrentTime() - startTime < 1000);\n  return 0;\n}\n",
            "called": [
                "FUN_08003cc8",
                "FUN_08002dd0",
                "FUN_080034f4",
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d18",
            "calling": [
                "FUN_080040ec"
            ],
            "imported": false,
            "current_name": "findValueAndDoSomething_08003d18"
        },
        "FUN_08004640": {
            "renaming": {
                "FUN_08004640": "combine_bytes_08004640",
                "param_1": "byte1",
                "param_2": "byte2"
            },
            "code": "uint combine_bytes_08004640(int byte1, uint byte2) {\n    return byte2 | byte1 << 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004640",
            "calling": [
                "FUN_08000a00",
                "FUN_080007f0",
                "FUN_08000b04",
                "FUN_080008e2",
                "FUN_08000a7a",
                "FUN_08000a4e",
                "FUN_08000998"
            ],
            "imported": false,
            "current_name": "combine_bytes_08004640"
        },
        "FUN_080034ce": {
            "renaming": {
                "FUN_080034ce": "run_startup_tasks_080034ce",
                "FUN_08000de4": "initialize_system",
                "FUN_08000c8c": "initialize_network"
            },
            "code": "void run_startup_tasks_080034ce(void)\n{\n  initialize_system();\n  initialize_network();\n  return;\n}",
            "called": [
                "FUN_08000c8c",
                "FUN_08000de4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034ce",
            "calling": [
                "FUN_08000d8e"
            ],
            "imported": false,
            "current_name": "run_startup_tasks_080034ce"
        },
        "FUN_080047fe": {
            "renaming": {
                "FUN_080047fe": "copy_from_param2_to_param1_080047fe",
                "param_1": "destination",
                "param_2": "source",
                "FUN_08004844": "memcpy",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void copy_from_param2_to_param1_080047fe(void *destination, void *source)\n{\n  memcpy(destination, source, sizeof(*destination));\n  return;\n}",
            "called": [
                "FUN_08004844"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047fe",
            "calling": [
                "FUN_080046b4"
            ],
            "imported": false,
            "current_name": "copy_from_param2_to_param1_080047fe"
        },
        "FUN_08001256": {
            "renaming": {
                "FUN_08001256": "update_flags_08001256",
                "param_1": "params",
                "puVar1": "flag_ptr",
                "param_1[0xb]": "params[0xb]",
                "param_1[0x14]": "params[0x14]",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)params + 0x3d)",
                "*(char *)((int)param_1 + 0x3e)": "*(char *)((int)params + 0x3e)",
                "*(short *)((int)param_1 + 0x2a)": "*(short *)((int)params + 0x2a)",
                "*(short *)((int)param_1 + 0x2a) == 0": "*(short *)((int)params + 0x2a) == 0",
                "*(short *)((int)param_1 + 0x2a) == 1": "*(short *)((int)params + 0x2a) == 1",
                "*(short *)((int)param_1 + 0x2a) == 2": "*(short *)((int)params + 0x2a) == 2"
            },
            "code": "uint32_t update_flags_08001256(uint32_t **params)\n{\n  uint32_t *flag_ptr;\n  uint32_t *param_b = params[0xb];\n  \n  if ((*(char *)((int)params + 0x3d) == '\"') &&\n     ((params[0x14] != (uint32_t *)0x0 || (*(char *)((int)params + 0x3e) != '@')))) {\n    if ((params[0x14] == (uint32_t *)0x0) && (params[4] == (uint32_t *)0xc000)) {\n      **params = **params | 0x100;\n      params[0x14] = (uint32_t *)((int)params[0x14] + 1);\n    }\n    else {\n      if (*(short *)((int)params + 0x2a) == 0) {\n        **params = **params | 0x200;\n      }\n      else if (*(short *)((int)params + 0x2a) == 1) {\n        if (param_b == (uint32_t *)0xffff0000) {\n          **params = **params & 0xfffffbff;\n          flag_ptr = *params;\n          if ((flag_ptr[1] & 0x800) == 0) {\n            *flag_ptr = *flag_ptr | 0x200;\n          }\n          else {\n            *flag_ptr = *flag_ptr & 0xfffffbff;\n          }\n        }\n        else if (((param_b == (uint32_t *)0x4) || (param_b == (uint32_t *)0x8)) ||\n                (params[0xc] == (uint32_t *)0x12)) {\n          **params = **params & 0xfffffbff;\n          **params = **params | 0x200;\n        }\n        else if (params[0xb] == (uint32_t *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)params + 0x2a) == 2) {\n        if (params[0xb] == (uint32_t *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params & 0xfffffbff;\n          **params = **params | 0x800;\n        }\n        flag_ptr = *params;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      else {\n        **params = **params | 0x400;\n        flag_ptr = *params;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      params[0x14] = (uint32_t *)0x0;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001256",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "update_flags_08001256"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "execute_functions_08004884",
                "puVar1": "start_ptr",
                "puVar2": "func_ptr_start",
                "puVar3": "func_ptr_end",
                "iVar4": "num_functions",
                "iVar5": "i"
            },
            "code": "void execute_functions_08004884(void)\n{\n  undefined *start_ptr = PTR_DAT_080048bc;\n  undefined *end_ptr = PTR_DAT_080048c0;\n  int num_functions = (int)end_ptr - (int)start_ptr;\n  for (int i = 0; i < num_functions >> 2; i++) {\n    (**(code **)(start_ptr + i * 4))();\n  }\n  do_nothing_080059f8();\n  undefined *func_ptr_start = PTR_DAT_080048c4;\n  undefined *func_ptr_end = PTR_DAT_080048c8;\n  int num_func_ptrs = (int)func_ptr_end - (int)func_ptr_start;\n  for (int i = 0; i < num_func_ptrs >> 2; i++) {\n    (**(code **)(func_ptr_start + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_080059f8",
                "FUN_08004648"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "execute_functions_08004884"
        },
        "FUN_08004648": {
            "renaming": {
                "FUN_08004648": "initialize_and_execute_08004648",
                "FUN_08000e3c": "initialize",
                "FUN_08000d8e": "execute"
            },
            "code": "void initialize_and_execute_08004648(void)\n{\n  initialize(3);\n  execute();\n  return;\n}",
            "called": [
                "FUN_08000d8e",
                "FUN_08000e3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004648",
            "calling": [
                "FUN_08004884"
            ],
            "imported": false,
            "current_name": "initialize_and_execute_08004648"
        },
        "FUN_08000600": {
            "renaming": {
                "FUN_08000600": "process_input_08000600",
                "param_1": "input",
                "param_2": "size",
                "cVar1": "input_type",
                "iVar2": "result",
                "*param_1": "*input",
                "PTR_DAT_08000668": "data_ptr"
            },
            "code": "void process_input_08000600(int **input, unsigned int size)\n{\n    char input_type = *(char *)((int)input + 5);\n    int *PTR_DAT_08000668 = (int *)PTR_DAT_08000668;\n    if (input_type == '\\x02' || input_type == '\\x03' || input_type == '\\x01') {\n        *input = PTR_DAT_08000668;\n    }\n    else {\n        *input = PTR_DAT_08000668;\n    }\n    execute_function(**input, size, 6);\n    if (size > 1) {\n        set_value(size, 1);\n        set_value(*(undefined *)((int)input + 6), 0);\n    }\n    int result = (**(code **)(**input + 0xc))();\n    while (result >= -1) {\n        result = (**(code **)(**input + 0xc))();\n    }\n    *(undefined *)((int)input + 0x49) = 0;\n    *(undefined *)((int)input + 0x4a) = 0;\n    *(undefined2 *)(input + 0x15) = 0;\n    *(undefined2 *)((int)input + 0x52) = 0;\n    *(undefined2 *)(input + 0x14) = 0;\n}",
            "called": [
                "FUN_08004388",
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000600",
            "calling": [
                "FUN_08000c4c"
            ],
            "imported": false,
            "current_name": "process_input_08000600"
        },
        "FUN_080045be": {
            "renaming": {
                "FUN_080045be": "execute_function_pointer_080045be",
                "param_1": "function_pointer"
            },
            "code": "void execute_function_pointer_080045be(void (*function_pointer)()){ \n  (*function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045be",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_pointer_080045be"
        },
        "FUN_08004646": {
            "renaming": {
                "FUN_08004646": "do_nothing_08004646"
            },
            "code": "\nvoid do_nothing_08004646(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004646",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "do_nothing_08004646"
        },
        "FUN_08000728": {
            "renaming": {
                "FUN_08000728": "crc16_ccitt_08000728",
                "param_1": "data_start",
                "param_2": "data_length",
                "uVar2": "crc",
                "uVar3": "lsb",
                "uVar4": "i",
                "bVar1": "j"
            },
            "code": "uint crc16_ccitt_08000728(uint data_start, uint data_length) {\n  byte current_byte;\n  uint crc = 0xffff;\n  for (uint i = 0; i < data_length; i++) {\n    current_byte = *(byte *)(data_start + i + 9);\n    crc ^= current_byte;\n    for (byte j = 1; j < 9; j++) {\n      uint lsb = crc & 1;\n      crc >>= 1;\n      if (lsb != 0) {\n        crc ^= 0xa001;\n      }\n    }\n  }\n  return (crc & 0xff) << 8 | crc >> 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000728",
            "calling": [
                "FUN_0800076c"
            ],
            "imported": false,
            "current_name": "crc16_ccitt_08000728"
        },
        "FUN_0800354a": {
            "renaming": {
                "FUN_0800354a": "get_result_0800354a",
                "param_1": "input",
                "uVar1": "result",
                "FUN_0800352e": "calculate_result"
            },
            "code": "int get_result_0800354a(int input)\n{\n  int result;\n  if (input == -1) {\n    result = -1;\n  }\n  else {\n    result = calculate_result();\n  }\n  return result;\n}",
            "called": [
                "FUN_0800352e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800354a",
            "calling": [
                "FUN_08003380",
                "FUN_08003414",
                "FUN_08003978",
                "FUN_0800339c"
            ],
            "imported": false,
            "current_name": "get_result_0800354a"
        },
        "FUN_0800124a": {
            "renaming": {
                "FUN_0800124a": "set_param_value_0800124a",
                "param_1": "param_array",
                "*param_1": "*param_array",
                "PTR_": "ptr",
                "DAT_": "value"
            },
            "code": "void set_param_value_0800124a(int *param_array){\n    uint32_t* PTR_ = (uint32_t*)(param_array[0] + 0x10);\n    uint8_t DAT_ = param_array[0x11] & 0xff;\n    *PTR_ = DAT_;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800124a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "set_param_value_0800124a"
        },
        "FUN_08004094": {
            "renaming": {
                "FUN_08004094": "findOffset_08004094",
                "param_1": "offset",
                "iVar1": "currentOffset",
                "puVar2": "stackPointer",
                "*PTR_DAT_080040c4": "*memoryPointer",
                "PTR_DAT_080040c4": "memoryPointer",
                "PTR_DAT_080040c8": "nextMemoryPointer",
                "&stack0x00000000": "&stackBottom",
                "*PTR_DAT_080040cc": "*errorPointer"
            },
            "code": "int findOffset_08004094(int offset)\n{\n  int currentOffset;\n  undefined *stackPointer;\n  \n  if (*PTR_DAT_080040c4 == 0) {\n    *PTR_DAT_080040c4 = PTR_DAT_080040c8;\n  }\n  \n  currentOffset = *PTR_DAT_080040c4;\n  stackPointer = (undefined *)(offset + currentOffset);\n  if (stackPointer <= &stack0x00000000) {\n    *PTR_DAT_080040c4 = stackPointer;\n    return currentOffset;\n  }\n  \n  *PTR_DAT_080040cc = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004094",
            "calling": [
                "FUN_0800500c"
            ],
            "imported": false,
            "current_name": "findOffset_08004094"
        },
        "FUN_080033c8": {
            "renaming": {
                "FUN_080033c8": "clear_bit_in_memory_address_080033c8",
                "DAT_080033d4": "memory_address",
                "PTR_": "ptr",
                "uint": "unsigned_int"
            },
            "code": "void clear_bit_in_memory_address_080033c8(){\n    uint* PTR_ = (uint*)(DAT_080033d4 + 0x40);\n    *PTR_ = *PTR_ & 0xdfffffff;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033c8",
            "calling": [
                "FUN_08000f56"
            ],
            "imported": false,
            "current_name": "clear_bit_in_memory_address_080033c8"
        },
        "FUN_080031fc": {
            "renaming": {
                "FUN_080031fc": "set_flag_080031fc",
                "param_1": "flag",
                "uVar1": "return_value",
                "DAT_08003350": "data_ptr",
                "data_ptr": "data_ptr",
                "DAT_08003354": "0x08003354",
                "DAT_08003358": "0x08003358",
                "DAT_0800335c": "0x0800335c",
                "DAT_08003360": "0x08003360",
                "DAT_08003364": "0x08003364",
                "DAT_08003368": "0x08003368",
                "DAT_0800336c": "0x0800336c",
                "DAT_08003370": "0x08003370",
                "DAT_08003374": "0x08003374",
                "DAT_08003378": "0x08003378",
                "DAT_0800337c": "0x0800337c"
            },
            "code": "uint32_t set_flag_080031fc(uint32_t flag) {\n  uint32_t *DAT_08003350 = (uint32_t*)0x08003350;\n  switch(flag) {\n    case 0:\n      DAT_08003350[0x30/4] |= 0x1;\n      return DAT_08003354;\n    case 1:\n      DAT_08003350[0x30/4] |= 0x2;\n      return DAT_08003358;\n    case 2:\n      DAT_08003350[0x30/4] |= 0x4;\n      return DAT_0800335c;\n    case 3:\n      DAT_08003350[0x30/4] |= 0x8;\n      return DAT_08003360;\n    case 4:\n      DAT_08003350[0x30/4] |= 0x10;\n      return DAT_08003364;\n    case 5:\n      DAT_08003350[0x30/4] |= 0x20;\n      return DAT_08003368;\n    case 6:\n      DAT_08003350[0x30/4] |= 0x40;\n      return DAT_0800336c;\n    case 7:\n      DAT_08003350[0x30/4] |= 0x80;\n      return DAT_08003370;\n    case 8:\n      DAT_08003350[0x30/4] |= 0x100;\n      return DAT_08003374;\n    case 9:\n      DAT_08003350[0x30/4] |= 0x200;\n      return DAT_08003378;\n    case 10:\n      DAT_08003350[0x30/4] |= 0x400;\n      return DAT_0800337c;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031fc",
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "imported": false,
            "current_name": "set_flag_080031fc"
        },
        "FUN_08000690": {
            "renaming": {
                "FUN_08000690": "check_param_08000690",
                "param_1": "val1",
                "param_2": "val2",
                "FUN_08000682": "print_result"
            },
            "code": "void check_param_08000690(int val1, int val2, undefined4 param_3, undefined4 param_4)\n{\n  if (val1 == 1) {\n    if (val2 == 0xffff) {\n      print_result(PTR_DAT_080006b0, 1, 0, 0, param_4);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08000682"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000690",
            "calling": [],
            "imported": false,
            "current_name": "check_param_08000690"
        },
        "FUN_080054fc": {
            "renaming": {
                "FUN_080054fc": "validate_and_set_params_080054fc",
                "param_1": "input_param",
                "param_2": "output_params",
                "local_18": "temp1",
                "local_14": "temp_ptr1",
                "uVar1": "flag",
                "iVar2": "temp2"
            },
            "code": "void validate_and_set_params_080054fc(int input_param, int* output_params)\n{\n  ushort flag;\n  int temp1;\n  int temp2;\n  int* temp_ptr1;\n  int* temp_ptr2;\n  \n  if (-1 < (int)((uint)*(ushort *)(output_params + 3) << 0x1e)) {\n    temp1 = input_param;\n    temp_ptr1 = output_params;\n    flag = validate_params(input_param, output_params, &temp1, &temp_ptr1);\n    temp2 = get_value(input_param, temp1);\n    if (temp2 != 0) {\n      *(undefined **)(input_param + 0x28) = PTR_LAB_08005320_1_08005578;\n      *output_params = temp2;\n      *(ushort *)(output_params + 3) = *(ushort *)(output_params + 3) | 0x80;\n      output_params[5] = temp1;\n      output_params[4] = temp2;\n      if ((temp_ptr1 != (int *)0x0) &&\n         (temp2 = validate_value(input_param,(int)*(short *)((int)output_params + 0xe)), temp2 != 0)) {\n        *(ushort *)(output_params + 3) = *(ushort *)(output_params + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(output_params + 3) = flag | *(ushort *)(output_params + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(output_params + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(output_params + 3) = *(ushort *)(output_params + 3) & 0xfffc | 2;\n  }\n  *output_params = (int)output_params + 0x47;\n  output_params[4] = (int)output_params + 0x47;\n  output_params[5] = 1;\n  return;\n}",
            "called": [
                "FUN_080056f8",
                "FUN_08004978",
                "FUN_080054b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054fc",
            "calling": [
                "FUN_080050d0"
            ],
            "imported": false,
            "current_name": "validate_and_set_params_080054fc"
        },
        "FUN_08001420": {
            "renaming": {
                "FUN_08001420": "increment_byte_08001420",
                "param_1": "data",
                "pbVar1": "byte_ptr",
                "PTR_": "ptr",
                "DAT_": "count",
                "*pbVar1": "*byte_ptr",
                "*param_1": "*ptr",
                "*(uint *)(*param_1 + 0x10)": "*(unsigned int *)(*ptr + 16)",
                "*(short *)((int)param_1 + 0x2a)": "*count"
            },
            "code": "int increment_byte_08001420(int *data)\n{\n    int *PTR_ = data;\n    short *DAT_ = (short *)(PTR_ + 10);\n    if (*DAT_ != 0)\n    {\n        byte *byte_PTR_ = (byte *)PTR_[9];\n        PTR_[9] = (int)(byte_PTR_ + 1);\n        *(unsigned int *)(*PTR_ + 16) = (unsigned int)*byte_PTR_;\n        *DAT_ -= 1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001420",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "increment_byte_08001420"
        },
        "FUN_080026ca": {
            "renaming": {
                "FUN_080026ca": "do_nothing_080026ca"
            },
            "code": "\nvoid do_nothing_080026ca(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ca",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026ca"
        },
        "FUN_08000de4": {
            "renaming": {
                "FUN_08000de4": "set_flags_and_call_functions_08000de4",
                "DAT_08000e14": "flags_ptr",
                "FUN_08000e3c": "call_function1",
                "FUN_08000d98": "call_function2",
                "do_nothing_08000d96": "do_nothing"
            },
            "code": "int set_flags_and_call_functions_08000de4(void)\n{\n  uint *DAT_08000e14;\n  DAT_08000e14 = DAT_08000e14;\n  *DAT_08000e14 |= 0x200;\n  *DAT_08000e14 |= 0x400;\n  *DAT_08000e14 |= 0x100;\n  call_function1(3);\n  call_function2(0xf);\n  do_nothing();\n  return 0;\n}",
            "called": [
                "FUN_08000d96",
                "FUN_08000d98",
                "FUN_08000e3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000de4",
            "calling": [
                "FUN_080034ce"
            ],
            "imported": false,
            "current_name": "set_flags_and_call_functions_08000de4"
        },
        "FUN_080026ce": {
            "renaming": {
                "FUN_080026ce": "process_data_080026ce",
                "param_1": "data_ptr",
                "iVar1": "data",
                "do_nothing_080026ca": "do_nothing",
                "FUN_08003754": "execute_process_1",
                "do_nothing_080026c8": "do_nothing_2",
                "FUN_0800376e": "execute_process_2",
                "do_nothing_0800293e": "do_nothing_3",
                "do_nothing_080026cc": "do_nothing_4",
                "do_nothing_0800293c": "do_nothing_5"
            },
            "code": "void process_data_080026ce(int *data_ptr)\n{\n  int data = *data_ptr;\n  \n  if (((*(uint *)(data + 0x10) & 2) != 0) && ((*(uint *)(data + 0xc) & 2) != 0)) {\n    *(undefined4 *)(data + 0x10) = 0xfffffffd;\n    *(undefined *)(data_ptr + 6) = 1;\n    if ((*(uint *)(*data_ptr + 0x18) & 3) == 0) {\n      execute_process_1();\n      do_nothing(data_ptr);\n    }\n    else {\n      do_nothing_2(data_ptr);\n    }\n    *(undefined *)(data_ptr + 6) = 0;\n  }\n  \n  data = *data_ptr;\n  if (((*(uint *)(data + 0x10) & 4) != 0) && ((*(uint *)(data + 0xc) & 4) != 0)) {\n    *(undefined4 *)(data + 0x10) = 0xfffffffb;\n    *(undefined *)(data_ptr + 6) = 2;\n    if ((*(uint *)(*data_ptr + 0x18) & 0x300) == 0) {\n      execute_process_1(data_ptr);\n      do_nothing(data_ptr);\n    }\n    else {\n      do_nothing_2(data_ptr);\n    }\n    *(undefined *)(data_ptr + 6) = 0;\n  }\n  \n  data = *data_ptr;\n  if (((*(uint *)(data + 0x10) & 8) != 0) && ((*(uint *)(data + 0xc) & 8) != 0)) {\n    *(undefined4 *)(data + 0x10) = 0xfffffff7;\n    *(undefined *)(data_ptr + 6) = 4;\n    if ((*(uint *)(*data_ptr + 0x1c) & 3) == 0) {\n      execute_process_1(data_ptr);\n      do_nothing(data_ptr);\n    }\n    else {\n      do_nothing_2(data_ptr);\n    }\n    *(undefined *)(data_ptr + 6) = 0;\n  }\n  \n  data = *data_ptr;\n  if (((*(uint *)(data + 0x10) & 0x10) != 0) && ((*(uint *)(data + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(data + 0x10) = 0xffffffef;\n    *(undefined *)(data_ptr + 6) = 8;\n    if ((*(uint *)(*data_ptr + 0x1c) & 0x300) == 0) {\n      execute_process_1(data_ptr);\n      do_nothing(data_ptr);\n    }\n    else {\n      do_nothing_2(data_ptr);\n    }\n    *(undefined *)(data_ptr + 6) = 0;\n  }\n  \n  data = *data_ptr;\n  if (((*(uint *)(data + 0x10) & 1) != 0) && ((*(uint *)(data + 0xc) & 1) != 0)) {\n    *(undefined4 *)(data + 0x10) = 0xfffffffe;\n    execute_process_2(data_ptr);\n  }\n  \n  data = *data_ptr;\n  if (((*(uint *)(data + 0x10) & 0x80) != 0) && ((*(uint *)(data + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(data + 0x10) = 0xffffff7f;\n    do_nothing_3(data_ptr);\n  }\n  \n  data = *data_ptr;\n  if (((*(uint *)(data + 0x10) & 0x40) != 0) && ((*(uint *)(data + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(data + 0x10) = 0xffffffbf;\n    do_nothing_4(data_ptr);\n  }\n  \n  data = *data_ptr;\n  if (((*(uint *)(data + 0x10) & 0x20) != 0) && ((*(uint *)(data + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(data + 0x10) = 0xffffffdf;\n    do_nothing_5(data_ptr);\n  }\n  \n  return;\n}",
            "called": [
                "FUN_080026c8",
                "FUN_0800376e",
                "FUN_080026ca",
                "FUN_0800293c",
                "FUN_080026cc",
                "FUN_0800293e",
                "FUN_08003754"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ce",
            "calling": [
                "FUN_0800377c"
            ],
            "imported": false,
            "current_name": "process_data_080026ce"
        },
        "FUN_080026cc": {
            "renaming": {
                "FUN_080026cc": "do_nothing_080026cc"
            },
            "code": "\nvoid do_nothing_080026cc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026cc",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026cc"
        },
        "FUN_08000218": {
            "renaming": {
                "FUN_08000218": "find_end_of_string_08000218",
                "param_1": "input_string",
                "pcVar2": "current_ptr",
                "pcVar3": "current_char_ptr",
                "cVar1": "current_char"
            },
            "code": "char* find_end_of_string_08000218(char* input_string) {\n  char current_char;\n  char* current_ptr = input_string;\n  do {\n    current_ptr++;\n    current_char = *current_ptr;\n  } while (current_char != '\\0');\n  return current_ptr + (-1 - (int)input_string);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000218",
            "calling": [
                "FUN_080045c8"
            ],
            "imported": false,
            "current_name": "find_end_of_string_08000218"
        },
        "FUN_0800339c": {
            "renaming": {
                "FUN_0800339c": "determine_output_value_0800339c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "result",
                "uVar2": "shifted_result"
            },
            "code": "uint8_t determine_output_value_0800339c(uint32_t input_1, uint32_t input_2, uint32_t input_3, uint32_t input_4) {\n  int result = call_function(input_1, PTR_DAT_080033c4, input_3, input_4, input_4);\n  uint8_t shifted_result = (uint8_t)(result << 12) >> 27;\n  if (shifted_result == 3) {\n    return 8;\n  }\n  if (shifted_result == 4) {\n    return 0xc;\n  }\n  if (shifted_result == 2) {\n    return 4;\n  }\n  return 0;\n}",
            "called": [
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800339c",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "determine_output_value_0800339c"
        },
        "FUN_0800557e": {
            "renaming": {
                "FUN_0800557e": "do_nothing_0800557e"
            },
            "code": "\nvoid do_nothing_0800557e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557e",
            "calling": [
                "FUN_08004978",
                "FUN_080048dc"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557e"
        },
        "FUN_08000e60": {
            "renaming": {
                "FUN_08000e60": "set_bits_at_position_08000e60",
                "param_1": "position",
                "param_2": "num_bits",
                "param_3": "bit_value",
                "uVar1": "shift_amount",
                "uVar2": "num_remaining_bits",
                "bits_to_set": "bits_to_set"
            },
            "code": "void set_bits_at_position_08000e60(uint position, uint num_bits, uint bit_value)\n{\n  uint shift_amount;\n  uint num_remaining_bits;\n\n  shift_amount = (*(int *)(DAT_08000ebc + 0xc) << 0x15) >> 0x1d;\n  num_remaining_bits = 7 - shift_amount;\n  if (num_remaining_bits > 3) {\n    num_remaining_bits = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount = shift_amount - 3;\n  }\n  uint bits_to_set = (num_bits & (1 << (num_remaining_bits & 0xff)) - 1U) << (shift_amount & 0xff) |\n          (1 << (shift_amount & 0xff)) - 1U & bit_value;\n  if ((int)position < 0) {\n    *(char *)(DAT_08000ec0 + (position & 0xf)) = (char)(bits_to_set << 4);\n  }\n  else {\n    *(char *)(position + 0xe000e400) = (char)(bits_to_set << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e60",
            "calling": [
                "FUN_08000c8c",
                "FUN_08003eac",
                "FUN_08000d98",
                "FUN_08003e54"
            ],
            "imported": false,
            "current_name": "set_bits_at_position_08000e60"
        },
        "FUN_0800557c": {
            "renaming": {
                "FUN_0800557c": "do_nothing_0800557c"
            },
            "code": "\nvoid do_nothing_0800557c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557c",
            "calling": [
                "FUN_08004978",
                "FUN_080048dc"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557c"
        },
        "FUN_0800165a": {
            "renaming": {
                "FUN_0800165a": "process_data_0800165a",
                "param_1": "data_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "data",
                "uVar2": "flag",
                "*(uint *)(*param_1 + 0x18)": "*(int *)(*data_ptr + 0x18)",
                "(*(uint *)(*param_1 + 0x18) & 0x80) == 0": "(flag & 0x80) == 0",
                "*(undefined2 *)(param_1 + 3)": "*(int *)(data_ptr + 3)",
                "*(undefined2 *)(param_1 + 6)": "*(int *)(data_ptr + 6)",
                "FUN_08003880": "perform_operation"
            },
            "code": "int process_data_0800165a(int *data_ptr, int param_2, int param_3, int param_4)\n{\n  int flag = *(int *)(*data_ptr + 0x18);\n  int data = 0;\n  if ((flag & 0x80) == 0) {\n    data = *(int *)(data_ptr + 3);\n  }\n  else {\n    data = *(int *)(data_ptr + 6);\n  }\n  perform_operation(data_ptr, (flag & 4) == 0, data, flag, param_4);\n  return 0;\n}",
            "called": [
                "FUN_08003880"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800165a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_data_0800165a"
        },
        "FUN_08000b04": {
            "renaming": {
                "FUN_08000b04": "decode_08000b04",
                "param_1": "encoded_data",
                "param_2": "decoded_data",
                "bVar1": "length",
                "bVar2": "key",
                "cVar3": "result",
                "uVar4": "decoded_byte",
                "uVar5": "i"
            },
            "code": "int decode_08000b04(int encoded_data, int decode_08000b04d_data)\n{\n  byte length = *(byte *)(encoded_data + 0xc);\n  byte key = *(byte *)(encoded_data + 0xe);\n  *(undefined *)(encoded_data + 0xd) = 0;\n  *(byte *)(encoded_data + 0xe) = key;\n  *(undefined *)(encoded_data + 0x49) = 6;\n  for (uint i = 0; i < key; i++) {\n    undefined2 decode_08000b04d_byte = decode_08000b04_byte(*(undefined *)(i * 2 + encoded_data + 0x10), *(undefined *)(encoded_data + (i + 4) * 2 + 9));\n    *(undefined2 *)(decode_08000b04d_data + (length + i) * 2) = decode_08000b04d_byte;\n  }\n  char result = *(char *)(encoded_data + 0x49);\n  cleanup(encoded_data);\n  return (int)(char)(result + '\\x02');\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b04",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "decode_08000b04"
        },
        "FUN_0800262c": {
            "renaming": {
                "FUN_0800262c": "check_and_set_flags_0800262c",
                "param_1": "param_ptr",
                "*(uint *)(*param_1 + 0xc)": "*(flag_ptr_1)",
                "*(uint *)(*param_1 + 8)": "*(flag_ptr_2)",
                "0x100": "FLAG_1",
                "0x1000": "FLAG_2",
                "FUN_08003594": "execute_some_function",
                "0xfffffe7f": "FLAG_1_MASK",
                "0x200": "FLAG_3",
                "0x2000": "FLAG_4",
                "do_nothing_0800268c": "do_nothing",
                "0xfffffd7f": "FLAG_2_MASK",
                "DAT_08002688": "some_data"
            },
            "code": "void check_and_set_flags_0800262c(int *param_ptr)\n{\n    uint *flag_ptr_1 = (uint *)(*param_ptr + 0xc);\n    uint *flag_ptr_2 = (uint *)(*param_ptr + 8);\n    if ((*flag_ptr_1 & 0x100) && (*flag_ptr_2 & 0x1000)) {\n        FUN_08003594();\n        *flag_ptr_1 &= 0xff | 0xfffffe7f;\n    }\n    if ((*flag_ptr_1 & 0x200) && (*flag_ptr_2 & 0x2000)) {\n        do_nothing_0800268c(param_ptr);\n        *flag_ptr_1 &= 0xff | 0xfffffd7f;\n    }\n    *(undefined4 *)(DAT_08002688 + 0x14) = 0x20000;\n    *(undefined *)((int)param_ptr + 0x1d) = 1;\n}",
            "called": [
                "FUN_08003594",
                "FUN_0800268c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800262c",
            "calling": [],
            "imported": false,
            "current_name": "check_and_set_flags_0800262c"
        },
        "FUN_08004388": {
            "renaming": {
                "FUN_08004388": "set_flags_08004388",
                "param_1": "obj",
                "param_2": "flags",
                "param_3": "type",
                "extraout_r1": "jump_table_index",
                "bVar1": "type_bits",
                "iVar2": "num_flags",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "PTR_DAT_0800445c": "jump_table_data",
                "uRam08004434": "unknown_data_1",
                "uRam08004440": "unknown_data_2"
            },
            "code": "void set_flags_08004388(int obj, int flags, byte type)\n{\n  int num_flags = 0;\n  uint jump_table_index;\n  int i;\n  int flag_value;\n  int jump_table_size = 299;\n  int flag_values[8] = {0, 6, 0, 7, 0, 0, 8, 0};\n  int flag_masks[3] = {0x20, 0x30, 8};\n  int flag_offsets[3] = {0x400, 0x600, 0x2000};\n  *(int *)(obj + 0x11c) = flags;\n  *(byte *)(obj + 0x144) = type;\n  int type_bits = type & 7;\n  if (type_bits > 7) {\n    return;\n  }\n  num_flags = flag_values[type_bits];\n  for (i = 0; i < 3; i++) {\n    if ((type & flag_masks[i]) == flag_masks[i]) {\n      *(int *)(obj + 0x128) = flag_offsets[i];\n      num_flags++;\n    }\n  }\n  if ((type & 8) == 0) {\n    *(int *)(obj + 0x124) = 0;\n  }\n  else {\n    *(int *)(obj + 0x124) = 0x2000;\n    num_flags++;\n  }\n  flag_value = flag_values[num_flags];\n  if (flag_value != 0) {\n    FUNC_08003978(obj + 0xd4);\n    FUN_08003e54(obj + 0xd4, uRam08004434);\n    return;\n  }\n  jump_table_index = uRam08004440;\n  if (jump_table_index < jump_table_size) {\n    uRam0000012e = *(short *)(PTR_DAT_0800445c + jump_table_index * 2);\n  }\n  else {\n    uRam0000012e = 0xffff;\n  }\n  (*(code *)0x8004432)();\n}",
            "called": [
                "FUN_08003978",
                "FUN_08004808",
                "FUN_08003e54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004388",
            "calling": [
                "FUN_08000600"
            ],
            "imported": false,
            "current_name": "set_flags_08004388"
        },
        "FUN_080051ac": {
            "renaming": {
                "FUN_080051ac": "process_data_080051ac",
                "puVar1": "data_ptr",
                "iVar2": "data_offset",
                "piVar3": "info_ptr",
                "piVar4": "info_ptr2",
                "uVar5": "data_flags",
                "uVar6": "data_flags2",
                "iVar7": "data_offset2",
                "pcVar8": "func_ptr",
                "iVar9": "data_len",
                "uVar10": "data_flags3",
                "bVar11": "is_data_flagged",
                "uVar12": "func_result"
            },
            "code": "void process_data_080051ac() {\n  uint *data_ptr;\n  int data_len;\n  int *info_ptr;\n  int *info_ptr2;\n  uint data_flags;\n  ushort data_flags2;\n  int data_offset;\n  code *func_ptr;\n  int func_retval;\n  uint data_flags3;\n  bool is_data_flagged;\n  undefined8 func_result;\n  \n  initialize_data(6);\n  func_ptr = (code *)0x80051bb;\n  func_result = get_data(1);\n  info_ptr = (int *)((ulonglong)func_result >> 0x20);\n  data_ptr = (uint *)func_result;\n  data_flags2 = *(ushort *)(info_ptr + 3);\n  data_flags = (uint)data_flags2;\n  if ((int)(data_flags << 0x1c) < 0) {\n    data_offset = info_ptr[4];\n    if (data_offset != 0) {\n      is_data_flagged = (data_flags << 0x1e) == 0;\n      data_len = *info_ptr;\n      if (is_data_flagged) {\n        data_offset = info_ptr[5];\n      }\n      *info_ptr = data_offset;\n      if (!is_data_flagged) {\n        data_offset = 0;\n      }\n      info_ptr[2] = data_offset;\n      for (data_len = data_len - data_offset; 0 < data_len; data_len = data_len - data_offset) {\n        func_retval = (*(code *)info_ptr[10])(data_ptr,info_ptr[8],data_offset,data_len);\n        if (func_retval < 1) {\n          data_flags2 = *(ushort *)(info_ptr + 3);\n          goto LAB_080052b2;\n        }\n        data_offset = data_offset + func_retval;\n      }\n    }\n  }\n  else if (((0 < info_ptr[1]) || (0 < info_ptr[0x10])) &&\n          (func_ptr = (code *)info_ptr[0xb], func_ptr != (code *)0x0)) {\n    data_flags3 = *data_ptr;\n    *data_ptr = 0;\n    if ((data_flags & 0x1000) == 0) {\n      func_retval = (*func_ptr)(data_ptr,info_ptr[8],data_flags & 0x1000,1);\n      if ((func_retval == -1) && (*data_ptr != 0)) {\n        if ((*data_ptr != 0x1d) && (*data_ptr != 0x16)) {\n          *(ushort *)(info_ptr + 3) = *(ushort *)(info_ptr + 3) | 0x40;\n          (*func_ptr)();\n          return;\n        }\n        *data_ptr = data_flags3;\n        goto LAB_080051d6;\n      }\n    }\n    else {\n      func_retval = info_ptr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(info_ptr + 3) << 0x1d) < 0) &&\n       (func_retval = func_retval - info_ptr[1], info_ptr[0xd] != 0)) {\n      func_retval = func_retval - info_ptr[0x10];\n    }\n    func_retval = (*(code *)info_ptr[0xb])(data_ptr,info_ptr[8],func_retval,0);\n    data_flags2 = *(ushort *)(info_ptr + 3);\n    if ((func_retval == -1) &&\n       ((0x1d < *data_ptr || (-1 < (int)((DAT_080052c8 >> (*data_ptr & 0xff)) << 0x1f)))) {\n      *(ushort *)(info_ptr + 3) = data_flags2 | 0x40;\n      goto LAB_080052b2;\n    }\n    info_ptr[1] = 0;\n    *info_ptr = info_ptr[4];\n    if (((int)((uint)data_flags2 << 0x13) < 0) && ((func_retval != -1 || (*data_ptr == 0)))) {\n      info_ptr[0x15] = func_retval;\n    }\n    info_ptr2 = (int *)info_ptr[0xd];\n    *data_ptr = data_flags3;\n    if (info_ptr2 != (int *)0x0) {\n      if (info_ptr2 != info_ptr + 0x11) {\n        cleanup_data(data_ptr);\n      }\n      info_ptr[0xd] = 0;\n      (*func_ptr)();\n      return;\n    }\n  }\nLAB_080051d6:\n  (*func_ptr)(0);\n  return;\n}",
            "called": [
                "FUN_080040f8",
                "FUN_080055d0",
                "FUN_080048dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051ac",
            "calling": [
                "FUN_08004808",
                "FUN_08005760"
            ],
            "imported": false,
            "current_name": "process_data_080051ac"
        },
        "FUN_080052cc": {
            "renaming": {
                "FUN_080052cc": "decode_080052cc",
                "param_1": "data",
                "param_2": "params",
                "uVar1": "result",
                "iVar2": "step_size",
                "piVar3": "param_ptr",
                "uVar4": "value",
                "uVar5": "flags",
                "iVar6": "read_size",
                "iVar8": "total_read_size",
                "unaff_r4": "decoder_arg5",
                "unaff_r5": "decoder_arg6",
                "pcVar7": "decoder",
                "uVar9": "original_value",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar10": "should_abort",
                "LAB_080051d6": "return_success",
                "LAB_08005252": "cleanup_and_return_success",
                "LAB_0800527c": "jump_table_failure",
                "LAB_080052b2": "decoder_failure"
            },
            "code": "uint32_t decode_080052cc(uint32_t *data, int *params)\n{\n    uint32_t result;\n    int *param_ptr;\n    uint32_t value;\n    uint16_t flags;\n    int step_size;\n    int read_size;\n    int total_read_size;\n    uint32_t (*decode_080052ccr)(uint32_t *, uint32_t, int, int, uint32_t, uint32_t);\n    int decode_080052ccr_arg1;\n    int decode_080052ccr_arg2;\n    uint32_t decode_080052ccr_result;\n    bool should_abort;\n\n    if (params[4] != 0)\n    {\n        if (data != NULL && data[6] == 0)\n        {\n            abort();\n        }\n\n        if (params == (int *)PTR_DAT_08005314)\n        {\n            param_ptr = (int *)data[1];\n        }\n        else if (params == (int *)PTR_DAT_08005318)\n        {\n            param_ptr = (int *)data[2];\n        }\n        else if (params == (int *)PTR_DAT_0800531c)\n        {\n            param_ptr = (int *)data[3];\n        }\n\n        flags = *(uint16_t *)(param_ptr + 3);\n\n        if (flags != 0)\n        {\n            if ((int)(flags << 0x1c) < 0)\n            {\n                step_size = params[4];\n                if (step_size != 0)\n                {\n                    read_size = flags << 0x1e;\n                    should_abort = read_size == 0;\n                    decode_080052ccr = (uint32_t (*)(uint32_t *, uint32_t, int, int, uint32_t, uint32_t))param_ptr[10];\n                    decode_080052ccr_arg1 = params[8];\n                    decode_080052ccr_arg2 = step_size;\n                    params[0] = step_size;\n\n                    if (!should_abort)\n                    {\n                        params[2] = 0;\n                    }\n                    else\n                    {\n                        read_size = param_ptr[5];\n                    }\n\n                    total_read_size = params[0] - step_size;\n                    while (total_read_size > 0)\n                    {\n                        decode_080052ccr_result = decode_080052ccr(data, decode_080052ccr_arg1, decode_080052ccr_arg2, total_read_size, unaff_r4, unaff_r5);\n                        if (decode_080052ccr_result < 1)\n                        {\n                            flags = *(uint16_t *)(param_ptr + 3);\n                            goto LAB_080052b2;\n                        }\n                        total_read_size += decode_080052ccr_result;\n                    }\n                }\n            }\n            else\n            {\n                if ((params[1] > 0 || params[0x10] > 0) && param_ptr[11] != NULL)\n                {\n                    decode_080052ccr = (uint32_t (*)(uint32_t *, uint32_t, int, int, uint32_t, uint32_t))param_ptr[11];\n                    decode_080052ccr_arg1 = params[8];\n                    decode_080052ccr_arg2 = 0;\n                    value = flags & 0x1000;\n\n                    if (value == 0)\n                    {\n                        decode_080052ccr_result = decode_080052ccr(data, decode_080052ccr_arg1, value, 1, unaff_r4, unaff_r5);\n                        if (decode_080052ccr_result == -1 && *data != 0)\n                        {\n                            if (*data != 0x1d && *data != 0x16)\n                            {\n                                flags = *(uint16_t *)(param_ptr + 3);\n                                goto LAB_0800527c;\n                            }\n                            *data = value;\n                            goto LAB_080051d6;\n                        }\n                    }\n                    else\n                    {\n                        decode_080052ccr_arg2 = params[0x15];\n                    }\n\n                    if ((int)(flags << 0x1d) < 0)\n                    {\n                        decode_080052ccr_arg2 -= params[1];\n                        if (param_ptr[13] != 0)\n                        {\n                            decode_080052ccr_arg2 -= params[0x10];\n                        }\n                    }\n\n                    decode_080052ccr_result = decode_080052ccr(data, decode_080052ccr_arg1, decode_080052ccr_arg2, 0, unaff_r4, unaff_r5);\n                    flags = *(uint16_t *)(param_ptr + 3);\n                    if (decode_080052ccr_result == -1 && (*data > 0x1d || (DAT_080052c8 >> (*data & 0xff)) << 0x1f != -1))\n                    {\n                        goto LAB_080052b2;\n                    }\n\n                    params[1] = 0;\n                    params[0] = params[4];\n\n                    if ((int)(flags << 0x13) < 0 && (decode_080052ccr_result != -1 || *data == 0))\n                    {\n                        params[0x15] = decode_080052ccr_result;\n                    }\n\n                    if (param_ptr[0xd] != NULL)\n                    {\n                        if (param_ptr[0xd] != param_ptr + 0x11)\n                        {\n                            FUN_080048dc(data);\n                        }\n\n                        param_ptr[0xd] = NULL;\n                        goto LAB_08005252;\n                    }\n                }\n            }\n        }\n    }\n\nLAB_080051d6:\n    result = UNRECOVERED_JUMPTABLE_00(0);\n    return result;\n\nLAB_08005252:\n    result = UNRECOVERED_JUMPTABLE_00();\n    return result;\n\nLAB_0800527c:\n    flags |= 0x40;\n    result = UNRECOVERED_JUMPTABLE_00();\n    return result;\n\nLAB_080052b2:\n    flags |= 0x40;\n    result = UNRECOVERED_JUMPTABLE_00(0xffffffff);\n    return result;\n}",
            "called": [
                "FUN_080053a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052cc",
            "calling": [
                "FUN_08004a34"
            ],
            "imported": false,
            "current_name": "decode_080052cc"
        },
        "FUN_08002eb2": {
            "renaming": {
                "FUN_08002eb2": "validate_input_08002eb2",
                "param_1": "input_array",
                "param_2": "array_size",
                "param_3": "element_size",
                "*(char *)((int)param_1 + 0x39)": "input_array[9]",
                "*(char *)(param_1 + 0xe)": "input_array[14]",
                "param_1[8]": "input_array[8]",
                "*(short *)(param_1 + 9)": "input_array[9]",
                "*(short *)((int)param_1 + 0x26)": "input_array[11]",
                "param_1[0xf]": "input_array[15]"
            },
            "code": "int validate_input_08002eb2(int *input_array, int array_size, int element_size) {\n    if (input_array[9] != ' ') {\n        return 2;\n    }\n    if (array_size == 0) {\n        return 1;\n    }\n    if (element_size == 0) {\n        return 1;\n    }\n    if (input_array[14] != 1) {\n        input_array[8] = array_size;\n        input_array[9] = (short)element_size;\n        input_array[11] = (short)element_size;\n        input_array[15] = 0;\n        input_array[9] = 0x21;\n        input_array[14] = 0;\n        *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002eb2",
            "calling": [
                "FUN_08003eac",
                "FUN_08003f48"
            ],
            "imported": false,
            "current_name": "validate_input_08002eb2"
        },
        "FUN_08000d3c": {
            "renaming": {
                "FUN_08000d3c": "copy_data_and_call_functions_08000d3c",
                "iVar1": "index",
                "puVar2": "data_ptr",
                "UNRECOVERED_JUMPTABLE": "jumptable_ptr"
            },
            "code": "void copy_data_and_call_functions_08000d3c(void)\n{\n  int index;\n  undefined4 *data_ptr;\n  code *jumptable_ptr;\n  for (index = 0; (PTR_DAT_08000d7c + index) < PTR_DAT_08000d80; index += 4) {\n    *(undefined4 *)(PTR_DAT_08000d7c + index) = *(undefined4 *)(DAT_08000d78 + index);\n  }\n  for (data_ptr = (undefined4 *)PTR_DAT_08000d84; data_ptr < PTR_DAT_08000d88; data_ptr++) {\n    *data_ptr = 0;\n  }\n  call_function_1();\n  call_function_2();\n  jumptable_ptr = (code *)0x8000d72;\n  call_function_3(jumptable_ptr);\n  return;\n}\n",
            "called": [
                "FUN_080035bc",
                "FUN_08004884",
                "FUN_08004658"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d3c",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_and_call_functions_08000d3c"
        },
        "FUN_08003978": {
            "renaming": {
                "FUN_08003978": "FUNC_08003978"
            },
            "code": "\nvoid FUNC_08003978(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  undefined4 uVar10;\n  uint uVar11;\n  uint local_2c;\n  uint local_28;\n  uint local_24;\n  undefined4 local_20;\n  uint local_1c;\n  \n  if (param_1 != (int *)0x0) {\n    iVar7 = FUN_080034f4((int)*(short *)(param_1 + 0x16),PTR_DAT_08003c58);\n    iVar8 = FUN_080034f4((int)*(short *)((int)param_1 + 0x5a),PTR_DAT_08003c5c);\n    if ((iVar8 == 0) || (iVar7 == 0)) {\n      FUN_08004fdc(PTR_s_ERROR__at_least_one_UART_pin_has_08003c84,iVar8);\n    }\n    else {\n      iVar9 = FUN_08003582(iVar7);\n      *param_1 = iVar9;\n      iVar6 = DAT_08003c7c;\n      iVar5 = DAT_08003c78;\n      iVar4 = DAT_08003c74;\n      iVar3 = DAT_08003c70;\n      iVar2 = DAT_08003c6c;\n      iVar1 = DAT_08003c68;\n      iVar8 = DAT_08003c64;\n      iVar7 = DAT_08003c60;\n      if (iVar9 == 0) {\n        FUN_08004fdc(PTR_s_ERROR__U_S_ART_pins_mismatch_08003c88);\n      }\n      else {\n        if (iVar9 == DAT_08003c60) {\n          *(uint *)(DAT_08003c60 + 0x12824) = *(uint *)(DAT_08003c60 + 0x12824) | 0x10;\n          *(uint *)(iVar7 + 0x12824) = *(uint *)(iVar7 + 0x12824) & 0xffffffef;\n          *(uint *)(iVar7 + 0x12844) = *(uint *)(iVar7 + 0x12844) | 0x10;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)(param_1 + 0x17) = 0x25;\n        }\n        else if (iVar9 == DAT_08003c64) {\n          *(uint *)(DAT_08003c64 + 0x1f420) = *(uint *)(DAT_08003c64 + 0x1f420) | 0x20000;\n          *(uint *)(iVar8 + 0x1f420) = *(uint *)(iVar8 + 0x1f420) & 0xfffdffff;\n          *(uint *)(iVar8 + 0x1f440) = *(uint *)(iVar8 + 0x1f440) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)(param_1 + 0x17) = 0x26;\n        }\n        else if (iVar9 == DAT_08003c68) {\n          *(uint *)(DAT_08003c68 + 0x1f020) = *(uint *)(DAT_08003c68 + 0x1f020) | 0x40000;\n          *(uint *)(iVar1 + 0x1f020) = *(uint *)(iVar1 + 0x1f020) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1f040) = *(uint *)(iVar1 + 0x1f040) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)(param_1 + 0x17) = 0x27;\n        }\n        else if (iVar9 == DAT_08003c6c) {\n          *(uint *)(DAT_08003c6c + 0x1ec20) = *(uint *)(DAT_08003c6c + 0x1ec20) | 0x80000;\n          *(uint *)(iVar2 + 0x1ec20) = *(uint *)(iVar2 + 0x1ec20) & 0xfff7ffff;\n          *(uint *)(iVar2 + 0x1ec40) = *(uint *)(iVar2 + 0x1ec40) | 0x80000;\n          *(undefined *)(param_1 + 0x11) = 3;\n          *(undefined *)(param_1 + 0x17) = 0x34;\n        }\n        else if (iVar9 == DAT_08003c70) {\n          *(uint *)(DAT_08003c70 + 0x1e820) = *(uint *)(DAT_08003c70 + 0x1e820) | 0x100000;\n          *(uint *)(iVar3 + 0x1e820) = *(uint *)(iVar3 + 0x1e820) & 0xffefffff;\n          *(uint *)(iVar3 + 0x1e840) = *(uint *)(iVar3 + 0x1e840) | 0x100000;\n          *(undefined *)(param_1 + 0x11) = 4;\n          *(undefined *)(param_1 + 0x17) = 0x35;\n        }\n        else if (iVar9 == DAT_08003c74) {\n          *(uint *)(DAT_08003c74 + 0x12424) = *(uint *)(DAT_08003c74 + 0x12424) | 0x20;\n          *(uint *)(iVar4 + 0x12424) = *(uint *)(iVar4 + 0x12424) & 0xffffffdf;\n          *(uint *)(iVar4 + 0x12444) = *(uint *)(iVar4 + 0x12444) | 0x20;\n          *(undefined *)(param_1 + 0x11) = 5;\n          *(undefined *)(param_1 + 0x17) = 0x47;\n        }\n        else if (iVar9 == DAT_08003c78) {\n          *(uint *)(DAT_08003c78 + 0x1c020) = *(uint *)(DAT_08003c78 + 0x1c020) | 0x40000000;\n          *(uint *)(iVar5 + 0x1c020) = *(uint *)(iVar5 + 0x1c020) & 0xbfffffff;\n          *(uint *)(iVar5 + 0x1c040) = *(uint *)(iVar5 + 0x1c040) | 0x40000000;\n          *(undefined *)(param_1 + 0x11) = 6;\n          *(undefined *)(param_1 + 0x17) = 0x52;\n        }\n        else if (iVar9 == DAT_08003c7c) {\n          *(uint *)(DAT_08003c7c + 0x1bc20) = *(uint *)(DAT_08003c7c + 0x1bc20) | 0x80000000;\n          *(uint *)(iVar6 + 0x1bc20) = *(uint *)(iVar6 + 0x1bc20) & 0x7fffffff;\n          *(uint *)(iVar6 + 0x1bc40) = *(uint *)(iVar6 + 0x1bc40) | 0x80000000;\n          *(undefined *)(param_1 + 0x11) = 7;\n          *(undefined *)(param_1 + 0x17) = 0x53;\n        }\n        uVar10 = FUN_080031fc((uint)((int)*(short *)((int)param_1 + 0x5a) << 0x18) >> 0x1c);\n        uVar11 = FUN_0800354a((int)*(short *)((int)param_1 + 0x5a),PTR_DAT_08003c5c);\n        local_2c = 1 << (*(ushort *)((int)param_1 + 0x5a) & 0xf) & 0xffff;\n        local_28 = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        local_24 = (uVar11 << 0x1a) >> 0x1e;\n        local_1c = (uVar11 << 0x11) >> 0x19;\n        local_20 = 3;\n        FUN_08000fb4(uVar10,&local_2c);\n        uVar10 = FUN_080031fc((uint)((int)*(short *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar11 = FUN_0800354a((int)*(short *)(param_1 + 0x16),PTR_DAT_08003c58);\n        local_2c = 1 << (*(ushort *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_28 = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        local_24 = (uVar11 << 0x1a) >> 0x1e;\n        FUN_08000fb4(uVar10,&local_2c);\n        *(int **)(PTR_DAT_08003c80 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        FUN_08002d72(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08000fb4",
                "FUN_08004fdc",
                "FUN_08002d72",
                "FUN_080031fc",
                "FUN_08003582",
                "FUN_0800354a",
                "FUN_080034f4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003978",
            "calling": [
                "FUN_08003cc8",
                "FUN_08004388"
            ],
            "imported": false,
            "current_name": "FUNC_08003978"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "update_bit_0800316c",
                "param_1": "bit_index",
                "param_2": "bit_array",
                "uVar1": "index",
                "PTR_": "target",
                "DAT_": "mask"
            },
            "code": "void update_bit_0800316c(uint bit_index, uint* bit_array) {\n    uint index = (bit_index << 0x18) >> 0x1c;\n    uint* PTR_ = bit_array + index;\n    uint DAT_ = 1 << (bit_index & 0xf);\n    *PTR_ = *PTR_ & ~DAT_;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "update_bit_0800316c"
        },
        "FUN_080040d0": {
            "renaming": {
                "FUN_080040d0": "return_max_int_080040d0"
            },
            "code": "int32_t return_max_int_080040d0(void) {\n    return INT32_MAX;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d0",
            "calling": [],
            "imported": false,
            "current_name": "return_max_int_080040d0"
        },
        "FUN_080040d6": {
            "renaming": {
                "FUN_080040d6": "set_flags_to_0x2000_080040d6",
                "param_1": "buffer",
                "param_2": "size",
                "*(undefined4 *)(param_2 + 4)": "buffer[1]"
            },
            "code": "void set_flags_to_0x2000_080040d6(int* buffer, int size) {\n  buffer[1] = 0x2000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d6",
            "calling": [
                "FUN_080056d4"
            ],
            "imported": false,
            "current_name": "set_flags_to_0x2000_080040d6"
        },
        "FUN_08004a34": {
            "renaming": {
                "FUN_08004a34": "decode_08004a34",
                "param_1": "input_length",
                "param_2": "next_byte",
                "param_3": "buffer",
                "iVar1": "buffer_length",
                "pbVar2": "current_position",
                "pbVar3": "buffer_offset",
                "uVar4": "decoded_byte"
            },
            "code": "uint decode_08004a34(int input_length, byte next_byte, byte **buffer) {\n  int buffer_length = (int)*(ushort *)(*buffer + 6);\n  if (input_length < 0 || input_length >= buffer_length || next_byte == 0xa) {\n    return (uint)next_byte;\n  }\n  if (input_length != 0 && *(int *)(input_length + 0x18) == 0) {\n    handle_error();\n  }\n  if (*buffer == PTR_DAT_080050c4) {\n    *buffer = *(byte ***)(input_length + 4);\n  }\n  else if (*buffer == PTR_DAT_080050c8) {\n    *buffer = *(byte ***)(input_length + 8);\n  }\n  else if (*buffer == PTR_DAT_080050cc) {\n    *buffer = *(byte ***)(input_length + 0xc);\n  }\n  *buffer += 1;\n  **buffer = next_byte;\n  if ((int)(*buffer - *buffer[4]) < (int)*buffer[5]) {\n    return (uint)next_byte;\n  }\n  handle_error();\n  return 0xffffffff;\n}",
            "called": [
                "FUN_080052cc",
                "FUN_080053a0",
                "FUN_080050d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a34",
            "calling": [
                "FUN_08004a60"
            ],
            "imported": false,
            "current_name": "decode_08004a34"
        },
        "FUN_080002d0": {
            "renaming": {
                "FUN_080002d0": "combine_params_080002d0",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "uVar1": "result"
            },
            "code": "ulonglong combine_params_080002d0(int num1, int num2, int num3, int num4) {\n  if (num4 == 0 && num3 == 0) {\n    if (num2 != 0 || num1 != 0) {\n      num2 = -1;\n      num1 = -1;\n    }\n    return ((ulonglong)num2 << 32) | num1;\n  }\n  else {\n    ulonglong result = FUNC_08000300();\n    return result;\n  }\n}",
            "called": [
                "FUN_08000300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002d0",
            "calling": [
                "FUN_080023b4"
            ],
            "imported": false,
            "current_name": "combine_params_080002d0"
        },
        "FUN_08003f00": {
            "renaming": {
                "FUN_08003f00": "find_index_of_value_08003f00",
                "param_1": "value_to_find",
                "uVar1": "index"
            },
            "code": "uint find_index_of_value_08003f00(int value_to_find)\n{\n  uint index;\n  if (value_to_find == 0) {\n    index = 10;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (9 < index) {\n        return index;\n      }\n      if (value_to_find == *(int *)(PTR_DAT_08003f20 + index * 4)) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f00",
            "calling": [
                "FUN_08003f24",
                "FUN_08003f48"
            ],
            "imported": false,
            "current_name": "find_index_of_value_08003f00"
        },
        "FUN_08005a04": {
            "renaming": {
                "FUN_08005a04": "do_nothing_08005a04"
            },
            "code": "\nvoid do_nothing_08005a04(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a04",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08005a04"
        },
        "FUN_08001440": {
            "renaming": {
                "FUN_08001440": "increment_and_copy_value_08001440",
                "param_1": "data",
                "puVar1": "ptr_to_dest",
                "PTR_10": "data[9]",
                "PTR_14": "*PTR_10",
                "PTR_10[1]": "*(char *)(PTR_10 + 1)",
                "PTR_18": "PTR_10[1]",
                "PTR_10[2]": "*(short *)(PTR_10 + 2)",
                "PTR_1c": "PTR_10[2]",
                "PTR_20": "PTR_10[3]",
                "PTR_24": "PTR_10[4]",
                "PTR_28": "PTR_10[5]",
                "PTR_2c": "PTR_10[6]",
                "PTR_30": "PTR_10[7]",
                "PTR_34": "PTR_10[8]",
                "PTR_38": "PTR_10[9]"
            },
            "code": "int increment_and_copy_value_08001440(int *data)\n{\n  int *ptr_to_counter = (int *)((char *)data + 0x2a);\n  if (*(short *)ptr_to_counter != 0)\n  {\n    char *ptr_to_dest = (char *)PTR_10;\n    PTR_10 = (int)(ptr_to_dest + 1);\n    *ptr_to_dest = (char)*(int *)(*data + 0x10);\n    *(short *)ptr_to_counter = *(short *)ptr_to_counter - 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001440",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "increment_and_copy_value_08001440"
        },
        "FUN_08000230": {
            "renaming": {
                "FUN_08000230": "find_byte_in_array_08000230",
                "param_1": "array",
                "param_2": "array_length",
                "param_3": "byte_to_find",
                "bVar1": "byte_val",
                "cVar2": "bit_0",
                "cVar3": "bit_1",
                "cVar4": "bit_2",
                "cVar5": "bit_3",
                "pbVar6": "byte_ptr_1",
                "puVar7": "uint_ptr",
                "pbVar8": "byte_ptr_2",
                "uVar9": "mask_offset",
                "uVar10": "length",
                "uVar11": "uint_val_1_masked",
                "uVar12": "uint_val_2_masked",
                "bVar13": "byte_val_1_found",
                "bVar14": "byte_val_2_found",
                "bVar15": "byte_val_3_found",
                "bVar16": "byte_val_4_found"
            },
            "code": "byte* find_byte_in_array_08000230(uint* array, uint array_length, uint byte_to_find) {\n    byte* result = NULL;\n    uint i;\n    uint j;\n    uint k;\n    uint l;\n    uint mask;\n    uint length;\n    bool byte_found;\n    bool bit_0;\n    bool bit_1;\n    bool bit_2;\n    bool bit_3;\n    byte* byte_ptr;\n    uint* uint_ptr;\n    uint uint_val_1;\n    uint uint_val_2;\n    uint uint_val_3;\n    uint uint_val_4;\n    if ((int)array_length < 0x10) {\n        for (i = 0; i < array_length; i++) {\n            if (*((byte*)array + i) == byte_to_find) {\n                result = (byte*)array + i;\n                break;\n            }\n        }\n    }\n    else {\n        mask = byte_to_find | byte_to_find << 8 | byte_to_find << 16 | byte_to_find << 24;\n        length = array_length & 0xFFFFFFF8;\n        for (i = 0; i < length; i += 8) {\n            uint_ptr = array + i / 4;\n            uint_val_1 = *uint_ptr;\n            uint_val_2 = uint_ptr[1];\n            byte_found = false;\n            for (j = 0; j < 4; j++) {\n                k = j * 8;\n                bit_0 = (uint_val_1 & (0xFF << k)) == (mask << k);\n                bit_1 = (uint_val_1 & (0xFF00 << k)) == (mask << (8 + k));\n                bit_2 = (uint_val_1 & (0xFF0000 << k)) == (mask << (16 + k));\n                bit_3 = (uint_val_1 & (0xFF000000 << k)) == (mask << (24 + k));\n                byte_found |= bit_0 & bit_1 & bit_2 & bit_3;\n            }\n            for (j = 0; j < 4; j++) {\n                k = j * 8;\n                bit_0 = (uint_val_2 & (0xFF << k)) == (mask << k);\n                bit_1 = (uint_val_2 & (0xFF00 << k)) == (mask << (8 + k));\n                bit_2 = (uint_val_2 & (0xFF0000 << k)) == (mask << (16 + k));\n                bit_3 = (uint_val_2 & (0xFF000000 << k)) == (mask << (24 + k));\n                byte_found |= bit_0 & bit_1 & bit_2 & bit_3;\n            }\n            if (byte_found) {\n                byte_ptr = (byte*)uint_ptr;\n                for (l = i; l < i + 4; l++) {\n                    if (*byte_ptr == byte_to_find) {\n                        result = byte_ptr;\n                        break;\n                    }\n                    byte_ptr++;\n                }\n                if (result != NULL) {\n                    break;\n                }\n                byte_ptr = (byte*)(uint_ptr + 1);\n                for (l = i + 4; l < i + 8; l++) {\n                    if (*byte_ptr == byte_to_find) {\n                        result = byte_ptr;\n                        break;\n                    }\n                    byte_ptr++;\n                }\n                if (result != NULL) {\n                    break;\n                }\n            }\n        }\n        if (result == NULL) {\n            for (i = length; i < array_length; i++) {\n                if (*((byte*)array + i) == byte_to_find) {\n                    result = (byte*)array + i;\n                    break;\n                }\n            }\n        }\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000230",
            "calling": [
                "FUN_08004d9c",
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "find_byte_in_array_08000230"
        },
        "FUN_08001684": {
            "renaming": {
                "FUN_08001684": "process_input_08001684",
                "param_1": "input_ptr",
                "param_1[0xb]": "flag_ptr",
                "param_1[0xc]": "flag_value_ptr",
                "(int)param_1 + 0x3d": "flag_type",
                "DAT_08001714": "PTR_DAT_08001714",
                "*param_1": "*input_ptr",
                "(*param_1)[1]": "(*input_ptr)[1]",
                "(*param_1)[5]": "(*input_ptr)[5]",
                "**param_1": "**input_ptr"
            },
            "code": "int process_input_08001684(uint **input_ptr){\n    uint *flag_ptr = input_ptr[0xb];\n    char *flag_type = (char *)((int)input_ptr + 0x3d);\n    if ((flag_ptr == (uint *)0x4 || flag_ptr == (uint *)0x8) && (*flag_type == '(')){\n        input_ptr[0xb] = DAT_08001714;\n        (*input_ptr)[1] &= 0xfffff8ff;\n        (*input_ptr)[5] = 0xfffffbff;\n        **input_ptr &= 0xfffffbff;\n        input_ptr[0xc] = (uint *)0x0;\n        *flag_type = 0x20;\n        *(flag_type + 1) = 0;\n        FUN_080038d0();\n    }\n    else if (*flag_type == '!'){\n        input_ptr[0xb] = DAT_08001714;\n        input_ptr[0xc] = (uint *)0x21;\n        *flag_type = 0x20;\n        *(flag_type + 1) = 0;\n        (*input_ptr)[1] &= 0xfffff8ff;\n        (*input_ptr)[5] = 0xfffffbff;\n        **input_ptr &= 0xfffffbff;\n        do_nothing_080015ba();\n    }\n    else{\n        (*input_ptr)[5] = 0xfffffbff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_080015ba",
                "FUN_080038d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001684",
            "calling": [
                "FUN_08001e68"
            ],
            "imported": false,
            "current_name": "process_input_08001684"
        },
        "FUN_08000f8c": {
            "renaming": {
                "FUN_08000f8c": "check_status_of_param_08000f8c",
                "param_1": "param_array"
            },
            "code": "int check_status_of_param_08000f8c(uint **param_array){\n\tif (*(char *)((int)param_array + 0x35) != '\\x02') {\n\t\tparam_array[0x15] = (uint *)0x80;\n\t\treturn 1;\n\t}\n\t*(undefined *)((int)param_array + 0x35) = 5;\n\t**param_array = **param_array & 0xfffffffe;\n\treturn 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f8c",
            "calling": [
                "FUN_08002ffc",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "check_status_of_param_08000f8c"
        },
        "FUN_080001ac": {
            "renaming": {
                "FUN_080001ac": "get_function_result_080001ac",
                "param_1": "result",
                "PTR_DAT_080001c4": "PTR_STATUS",
                "DAT_080001c8": "DATA_FLAG",
                "PTR_FUN_080001cc": "PTR_FUNCTION"
            },
            "code": "int* get_function_result_080001ac(int* result) {\\n  if (*PTR_DAT_080001c4 == \"\\0\") {\\n    if (DAT_080001c8 != 0) {\\n      result = PTR_FUN_080001cc;\\n    }\\n    *PTR_DAT_080001c4 = 1;\\n  }\\n  return result;\\n}",
            "called": [
                "FUN_080059f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ac",
            "calling": [],
            "imported": false,
            "current_name": "get_function_result_080001ac"
        },
        "FUN_080040e0": {
            "renaming": {
                "FUN_080040e0": "get_one_080040e0",
                "undefined4": "int"
            },
            "code": "int get_one_080040e0(void)\n{\n  int one = 1;\n  return one;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e0",
            "calling": [
                "FUN_080056f8"
            ],
            "imported": false,
            "current_name": "get_one_080040e0"
        },
        "FUN_080048cc": {
            "renaming": {
                "FUN_080048cc": "fill_array_with_value_080048cc",
                "param_1": "array",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "end"
            },
            "code": "void fill_array_with_value_080048cc(char *array, char value, int length) {\n  char *end = array + length;\n  for (; array != end; array++) {\n    *array = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048cc",
            "calling": [
                "FUN_08005400",
                "FUN_0800532c",
                "FUN_08005374"
            ],
            "imported": false,
            "current_name": "fill_array_with_value_080048cc"
        },
        "FUN_080040e4": {
            "renaming": {
                "FUN_080040e4": "returnZero_080040e4"
            },
            "code": "int returnZero_080040e4(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e4",
            "calling": [
                "FUN_08005718"
            ],
            "imported": false,
            "current_name": "returnZero_080040e4"
        },
        "FUN_08003506": {
            "renaming": {
                "FUN_08003506": "find_short_from_int_08003506",
                "param_1": "search_int",
                "param_2": "short_array",
                "*param_2": "*short_array",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int find_short_from_int_08003506(int search_int, short *short_array) {\n    while (true) {\n        if (*(int *)(short_array + 2) == 0) {\n            return -1;\n        }\n        if (*(int *)(short_array + 2) == search_int) {\n            break;\n        }\n        short_array = short_array + 6;\n    }\n    return (int)*short_array;\n}",
            "called": [
                "FUN_08003506"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003506",
            "calling": [
                "FUN_08003506",
                "FUN_0800351e"
            ],
            "imported": false,
            "current_name": "find_short_from_int_08003506"
        },
        "FUN_080025e0": {
            "renaming": {
                "FUN_080025e0": "get_value_from_pointer_080025e0",
                "undefined4": "int",
                "PTR_DAT_080025e8": "pointer_to_value",
                "*(undefined4 *)PTR_DAT_080025e8": "*pointer_to_value",
                "return *(undefined4 *)PTR_DAT_080025e8;": "return value;"
            },
            "code": "int get_value_from_pointer_080025e0() {\n    int* PTR_DAT_080025e8 = PTR_DAT_080025e8;\n    int value = *(undefined4 *)PTR_DAT_080025e8;\n    return *(undefined4 *)PTR_DAT_080025e8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e0",
            "calling": [
                "FUN_08000c8c",
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_080025e0"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "get_default_value_080040e8"
            },
            "code": "int get_default_value_080040e8(void)\n{\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_0800573c"
            ],
            "imported": false,
            "current_name": "get_default_value_080040e8"
        },
        "FUN_08000a00": {
            "renaming": {
                "FUN_08000a00": "set_bit_in_array_08000a00",
                "param_1": "array",
                "param_2": "bit_position",
                "param_3": "value_to_set",
                "param_4": "unused",
                "uVar1": "bit_index",
                "uVar2": "array_index"
            },
            "code": "int set_bit_in_array_08000a00(int* array, int bit_position, int value_to_set)\\n\\\n    {\\n\\\n        uint bit_index = hash(value_to_set);\\n\\\n        uint array_index = (bit_index << 0x14) >> 0x18;\\n\\\n        if (value_to_set == -1)\\n\\\n        {\\n\\\n            array[array_index] = (1 << (bit_index & 0xf)) | array[array_index];\\n\\\n        }\\n\\\n        else\\n\\\n        {\\n\\\n            array[array_index] = array[array_index] & ~(1 << (bit_index & 0xf));\\n\\\n        }\\n\\\n        return 8;\\n\\\n    }",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a00",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08000a00"
        },
        "FUN_080047c0": {
            "renaming": {
                "FUN_080047c0": "execute_function_080047c0",
                "param_1": "function_parameter",
                "iVar1": "index",
                "FUN_08005760": "execute_first_function",
                "FUN_08004678": "get_index"
            },
            "code": "void execute_function_080047c0(int function_parameter)\n{\n  int index;\n  if (*(int *)(function_parameter + 8) != 0) {\n    (**(code **)(function_parameter + 0xc))();\n    return;\n  }\n  execute_first_function();\n  index = get_index();\n  if (*(int *)(PTR_DAT_080047ec + index * 0x14 + 0xc) != 0) {\n    execute_function_080047c0();\n  }\n  return;\n}",
            "called": [
                "FUN_08005760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047c0",
            "calling": [
                "FUN_080047d0"
            ],
            "imported": false,
            "current_name": "execute_function_080047c0"
        },
        "FUN_08005374": {
            "renaming": {
                "FUN_08005374": "allocate_memory_and_initialize_to_zero_08005374",
                "param_1": "base_address",
                "param_2": "num_elements",
                "puVar1": "allocated_memory",
                "iVar2": "offset"
            },
            "code": "undefined4* allocate_memory_and_initialize_to_zero_08005374(undefined4 base_address, int num_elements) {\n  undefined4* allocated_memory;\n  int offset = (num_elements - 1) * 0x68;\n  allocated_memory = (undefined4*)FUN_08004978(base_address, offset + 0x74);\n  if (allocated_memory != (undefined4*)0x0) {\n    *allocated_memory = 0;\n    *(allocated_memory + 1) = num_elements;\n    *(allocated_memory + 2) = allocated_memory + 3;\n    FUN_080048cc(allocated_memory + 3, 0, offset + 0x68);\n  }\n  return allocated_memory;\n}",
            "called": [
                "FUN_08004978",
                "FUN_080048cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005374",
            "calling": [
                "FUN_08005400"
            ],
            "imported": false,
            "current_name": "allocate_memory_and_initialize_to_zero_08005374"
        },
        "FUN_08004d9c": {
            "renaming": {
                "FUN_08004d9c": "FUNC_08004d9c"
            },
            "code": "\nuint FUNC_08004d9c(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_08004f56;\n          if (bVar1 != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\nLAB_08004ee6:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_08004dcc;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_08004dec;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08004dec:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_08004ec2;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08004e2c:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08004e52:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_08004e60;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08004e60:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            puVar5 = PTR_s_0123456789abcdef_08004fd4;\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08004e52;\n          if (bVar1 == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08004e2c;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = FUN_08000230(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_08004f42;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_08004f42:\n    *puVar3 = uVar6;\n  }\nLAB_08004f56:\n  param_2[4] = 0;\nLAB_08004ec2:\n  iVar2 = FUN_08004cb0(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_08004ed6:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_08004ed6;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08000230",
                "FUN_08004cb0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004d9c",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "FUNC_08004d9c"
        },
        "FUN_08003750": {
            "renaming": {
                "FUN_08003750": "subtract_four_from_input_08003750",
                "param_1": "input"
            },
            "code": "int subtract_four_from_input_08003750(int input) {\n\treturn input - 4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003750",
            "calling": [
                "FUN_0800376e",
                "FUN_08003754"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_08003750"
        },
        "FUN_080014ec": {
            "renaming": {
                "FUN_080014ec": "validate_input_080014ec",
                "param_1": "input_ptr",
                "param_2": "input_data",
                "param_3": "data_len",
                "param_4": "output_ptr",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "code": "int validate_input_080014ec(uint **input_ptr, uint *input_data, int data_len, uint *output_ptr) {\n    int result;\n    uint *ptr;\n    if (*(char *)((int)input_ptr + 0x3d) == '(') {\n        if (input_data == NULL) {\n            result = 1;\n        }\n        else if (data_len == 0) {\n            result = 1;\n        }\n        else if (*(char *)(input_ptr + 0xf) == '\\x01') {\n            result = 2;\n        }\n        else {\n            *(undefined *)(input_ptr + 0xf) = 1;\n            ptr = *input_ptr;\n            if ((*ptr & 1) == 0) {\n                *ptr = *ptr | 1;\n            }\n            **input_ptr = **input_ptr & 0xfffff7ff;\n            *(undefined *)((int)input_ptr + 0x3d) = 0x2a;\n            *(undefined *)((int)input_ptr + 0x3e) = 0x20;\n            result = 0;\n            input_ptr[0x10] = NULL;\n            input_ptr[9] = input_data;\n            *(short *)((int)input_ptr + 0x2a) = (short)data_len;\n            input_ptr[0xb] = output_ptr;\n            *(undefined2 *)(input_ptr + 10) = *(undefined2 *)((int)input_ptr + 0x2a);\n            *(undefined *)(input_ptr + 0xf) = 0;\n            (*input_ptr)[1] = (*input_ptr)[1] | 0x700;\n        }\n    }\n    else {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ec",
            "calling": [
                "FUN_08003880"
            ],
            "imported": false,
            "current_name": "validate_input_080014ec"
        },
        "FUN_080048dc": {
            "renaming": {
                "FUN_080048dc": "add_element_to_list_080048dc",
                "param_1": "list_start",
                "param_2": "element",
                "param_3": "error_code",
                "param_4": "param_4",
                "puVar1": "pointer_to_void",
                "piVar2": "pointer_to_int",
                "extraout_r1": "pointer_to_int",
                "ppiVar3": "pointer_to_pointer_to_int_1",
                "ppiVar4": "pointer_to_pointer_to_int_2",
                "ppiVar5": "pointer_to_pointer_to_int_3",
                "ppiVar6": "pointer_to_pointer_to_int_4",
                "ppiVar7": "pointer_to_pointer_to_int_5",
                "bVar8": "is_new_element_first_in_list"
            },
            "code": "void add_element_to_list_080048dc(int *list_start, int element, int error_code, int param_4)\n{\n    int **current_element_ptr;\n    int **previous_element_ptr;\n    int **list_start_ptr;\n    int **next_element_ptr;\n    int **new_element_ptr;\n    bool is_new_element_first_in_list;\n    if (element == 0) {\n        return;\n    }\n    current_element_ptr = (int **)(element + -4);\n    if (*(int *)(element + -4) < 0) {\n        current_element_ptr = (int **)((int)current_element_ptr + *(int *)(element + -4));\n    }\n    do_nothing_0800557c();\n    list_start_ptr = PTR_DAT_08004974;\n    next_element_ptr = *(int ***)PTR_DAT_08004974;\n    if (next_element_ptr == (int **)0x0) {\n        current_element_ptr[1] = (int *)0x0;\n        *(int ***)list_start_ptr = current_element_ptr;\n        previous_element_ptr = (int **)error_code;\n        current_element_ptr = (int **)list_start_ptr;\n    }\n    else if (current_element_ptr < next_element_ptr) {\n        previous_element_ptr = (int **)*current_element_ptr;\n        current_element_ptr = (int **)((int)current_element_ptr + (int)previous_element_ptr);\n        is_new_element_first_in_list = next_element_ptr == current_element_ptr;\n        if (is_new_element_first_in_list) {\n            current_element_ptr = (int **)*next_element_ptr;\n            next_element_ptr = (int **)next_element_ptr[1];\n        }\n        current_element_ptr[1] = (int *)next_element_ptr;\n        if (is_new_element_first_in_list) {\n            current_element_ptr = (int **)((int)current_element_ptr + (int)previous_element_ptr);\n            *current_element_ptr = (int *)current_element_ptr;\n        }\n        *(int ***)list_start_ptr = current_element_ptr;\n    }\n    else {\n        do {\n            previous_element_ptr = next_element_ptr;\n            next_element_ptr = (int **)next_element_ptr[1];\n            if (next_element_ptr == (int **)0x0) break;\n        } while (next_element_ptr <= current_element_ptr);\n        new_element_ptr = (int **)previous_element_ptr[0];\n        if ((int **)((int)previous_element_ptr + (int)new_element_ptr) == current_element_ptr) {\n            new_element_ptr = (int **)((int)new_element_ptr + (int)*current_element_ptr);\n            *previous_element_ptr = (int *)new_element_ptr;\n            if (next_element_ptr == (int **)((int)previous_element_ptr + (int)new_element_ptr)) {\n                previous_element_ptr = *next_element_ptr;\n                next_element_ptr = (int **)next_element_ptr[1];\n                previous_element_ptr[1] = (int *)next_element_ptr;\n                new_element_ptr = (int **)((int)new_element_ptr + (int)previous_element_ptr[0]);\n                *previous_element_ptr = (int *)new_element_ptr;\n            }\n        }\n        else if (current_element_ptr < (int **)((int)previous_element_ptr + (int)new_element_ptr)) {\n            *list_start = 0xc;\n        }\n        else {\n            new_element_ptr = (int **)((int)current_element_ptr + (int)*current_element_ptr);\n            is_new_element_first_in_list = next_element_ptr == new_element_ptr;\n            if (is_new_element_first_in_list) {\n                new_element_ptr = (int **)*next_element_ptr;\n                next_element_ptr = (int **)next_element_ptr[1];\n            }\n            current_element_ptr[1] = (int *)next_element_ptr;\n            if (is_new_element_first_in_list) {\n                new_element_ptr = (int **)((int)new_element_ptr + (int)*current_element_ptr);\n                *current_element_ptr = (int *)new_element_ptr;\n            }\n            previous_element_ptr[1] = (int *)current_element_ptr;\n        }\n    }\n    do_nothing_0800557e(error_code,previous_element_ptr,current_element_ptr,param_4);\n    return;\n}",
            "called": [
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048dc",
            "calling": [
                "FUN_080051ac",
                "FUN_080050d0"
            ],
            "imported": false,
            "current_name": "add_element_to_list_080048dc"
        },
        "FUN_08003754": {
            "renaming": {
                "FUN_08003754": "execute_callback_08003754",
                "param_1": "callback_param",
                "iVar1": "callback_ptr",
                "FUN_08003750": "get_callback_ptr"
            },
            "code": "void execute_callback_08003754(int callback_param)\n{\n  int callback_ptr = get_callback_ptr();\n  if ((*(code **)(callback_ptr + 0x48) != (code *)0x0) && (*(char *)(callback_param + 0x18) == '\\x01')) {\n    (**(code **)(callback_ptr + 0x48))(callback_ptr,0);\n  }\n  return;\n}",
            "called": [
                "FUN_08003750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003754",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "execute_callback_08003754"
        },
        "FUN_08001578": {
            "renaming": {
                "FUN_08001578": "set_bit_and_flag_08001578",
                "param_1": "data_ptr",
                "puVar1": "data",
                "flag": "flag",
                "*puVar1": "*data",
                "**param_1": "**data_ptr",
                "(*param_1)[1]": "(*data_ptr)[1]"
            },
            "code": "int set_bit_and_flag_08001578(uint **data_ptr) {\n  char *flag = (char *)((*data_ptr) + 0x3d);\n  if (*flag != ' ') {\n    return 2;\n  }\n  *flag = '(';\n  uint *data = *data_ptr;\n  if ((*data & 1) == 0) {\n    *data |= 1;\n  }\n  **data_ptr |= 0x400;\n  (*data_ptr)[1] |= 0x300;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001578",
            "calling": [
                "FUN_080038d0",
                "FUN_08003900"
            ],
            "imported": false,
            "current_name": "set_bit_and_flag_08001578"
        },
        "FUN_08004844": {
            "renaming": {
                "FUN_08004844": "get_result_08004844",
                "param_1": "flag",
                "param_2": "value",
                "DAT_0800485c": "global_flag"
            },
            "code": "unsigned long long get_result_08004844(uint32_t flag, uint32_t value) {\n    if (DAT_0800485c != 0) {\n        return ((unsigned long long)flag << 32) | 2;\n    }\n    return (unsigned long long)value << 32;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004844",
            "calling": [
                "FUN_080047fe"
            ],
            "imported": false,
            "current_name": "get_result_08004844"
        },
        "FUN_0800318c": {
            "renaming": {
                "FUN_0800318c": "get_data_by_index_0800318c",
                "param_1": "index",
                "DAT_080031d0": "data_0",
                "DAT_080031d4": "data_2",
                "DAT_080031d8": "data_3",
                "DAT_080031dc": "data_4",
                "DAT_080031e0": "data_5",
                "DAT_080031e4": "data_6",
                "DAT_080031e8": "data_7",
                "DAT_080031ec": "data_8",
                "DAT_080031f0": "data_9",
                "DAT_080031f4": "data_10",
                "DAT_080031f8": "data_1"
            },
            "code": "undefined4 get_data_by_index_0800318c(int index) {\n  switch(index) {\n    case 0:\n      return DAT_080031d0;\n    case 1:\n      return DAT_080031f8;\n    case 2:\n      return DAT_080031d4;\n    case 3:\n      return DAT_080031d8;\n    case 4:\n      return DAT_080031dc;\n    case 5:\n      return DAT_080031e0;\n    case 6:\n      return DAT_080031e4;\n    case 7:\n      return DAT_080031e8;\n    case 8:\n      return DAT_080031ec;\n    case 9:\n      return DAT_080031f0;\n    case 10:\n      return DAT_080031f4;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800318c",
            "calling": [
                "FUN_080041bc"
            ],
            "imported": false,
            "current_name": "get_data_by_index_0800318c"
        },
        "FUN_080047d0": {
            "renaming": {
                "FUN_080047d0": "check_if_valid_input_080047d0",
                "iVar1": "input_index",
                "FUN_08004678": "get_input_index",
                "PTR_DAT_080047ec": "input_data",
                "input_ptr": "input_value_ptr",
                "*input_ptr": "input_value",
                "FUN_080047c0": "handle_invalid_input"
            },
            "code": "void check_if_valid_input_080047d0(void)\n{\n  int input_index = get_input_index();\n  int* input_ptr = (int*)(PTR_DAT_080047ec + input_index * 0x14 + 0xc);\n  if (*input_ptr != 0) {\n    handle_invalid_input();\n  }\n  return;\n}",
            "called": [
                "FUN_080047c0",
                "FUN_08004678"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047d0",
            "calling": [
                "FUN_080011a4"
            ],
            "imported": false,
            "current_name": "check_if_valid_input_080047d0"
        },
        "FUN_080040f8": {
            "renaming": {
                "FUN_080040f8": "infiniteLoop_080040f8"
            },
            "code": "void infiniteLoop_080040f8(void)\n{\n  while(true)\n  {\n    //Do nothing\n  }\n}",
            "called": [
                "FUN_080040f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040f8",
            "calling": [
                "FUN_080051ac",
                "FUN_080040f8"
            ],
            "imported": false,
            "current_name": "infiniteLoop_080040f8"
        },
        "FUN_0800500c": {
            "renaming": {
                "FUN_0800500c": "process_input_0800500c",
                "param_1": "output_value",
                "param_2": "input_value",
                "puVar1": "ptr",
                "iVar2": "result"
            },
            "code": "void process_input_0800500c(int *output_value, undefined4 input_value)\n{\n  undefined *ptr = PTR_DAT_08005028;\n  *(undefined4 *)PTR_DAT_08005028 = 0;\n  int result = calculate_input(input_value);\n  if ((result == -1) && (*(int *)ptr != 0)) {\n    *output_value = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08004094"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800500c",
            "calling": [
                "FUN_08004978"
            ],
            "imported": false,
            "current_name": "process_input_0800500c"
        },
        "FUN_080023b4": {
            "renaming": {
                "FUN_080023b4": "calculate_value_080023b4",
                "in_r3": "input_value",
                "DAT_0800247c": "data_pointer",
                "DAT_08002484": "return_value_1",
                "DAT_08002480": "return_value_2",
                "uVar1": "bitmask_value",
                "uVar2": "shifted_value",
                "value": "result",
                "bitmask": "bitmask_check",
                "divisor": "divisor_value"
            },
            "code": "uint calculate_value_080023b4(void)\n{\n  uint value = 0;\n  uint bitmask = *(uint *)(DAT_0800247c + 8) & 0xc;\n  if (bitmask == 4) {\n    return DAT_08002484;\n  }\n  if (bitmask != 8) {\n    return DAT_08002480;\n  }\n  uint uVar1 = *(uint *)(DAT_0800247c + 4) & 0x3f;\n  uint uVar2 = (uint)(*(int *)(DAT_0800247c + 4) << 0x11) >> 0x17;\n  if ((*(uint *)(DAT_0800247c + 4) & 0x400000) == 0) {\n    value = FUN_080002d0(uVar2 * 16000000, (((uint)(uVar2 * 0x20 < uVar2) * -0x3f - (uint)(uVar2 * 0x7c0 < uVar2 * 0x1f)) * 8 + (uint)CARRY4(uVar2 * 0x3d08,uVar2)) * 0x400 | uVar2 * 0x3d09 >> 0x16, uVar1, 0, in_r3);\n  }\n  else {\n    value = FUN_080002d0(uVar2 * 8000000, (((uint)(uVar2 * 0x20 < uVar2) * -0x3f - (uint)(uVar2 * 0x7c0 < uVar2 * 0x1f)) * 8 + (uint)CARRY4(uVar2 * 0x3d08,uVar2)) * 0x200, uVar1, 0, in_r3);\n  }\n  uint divisor = ((((uint)(*(int *)(DAT_0800247c + 4) << 0xe) >> 0x1e) + 1) * 2);\n  return value / divisor;\n}",
            "called": [
                "FUN_080002d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080023b4",
            "calling": [
                "FUN_08002488"
            ],
            "imported": false,
            "current_name": "calculate_value_080023b4"
        },
        "FUN_080011a4": {
            "renaming": {
                "FUN_080011a4": "update_value_080011a4",
                "param_1": "new_value",
                "DAT_080011bc": "PTR_data",
                "value_ptr": "PTR_value",
                "call_function": "FUN_080047d0"
            },
            "code": "void update_value_080011a4(uint new_value) {\n    uint *value_ptr = (uint *)(DAT_080011bc + 0x14);\n    if ((*value_ptr & new_value) != 0) {\n        *value_ptr = new_value;\n        call_function();\n    }\n    return;\n}",
            "called": [
                "FUN_080047d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011a4",
            "calling": [],
            "imported": false,
            "current_name": "update_value_080011a4"
        },
        "FUN_08001e68": {
            "renaming": {
                "FUN_08001e68": "check_flags_08001e68",
                "param_1": "flag_array",
                "puVar2": "flags",
                "uVar3": "flag1",
                "uVar4": "flag2",
                "cVar1": "c"
            },
            "code": "void check_flags_08001e68(uint **flag_array)\n{\n  uint *flags = *flag_array;\n  uint flag1 = flags[5];\n  uint flag2 = flags[1];\n  if (((flag1 & DAT_08001f38) != 0) && ((flag2 & 0x100) != 0)) {\n    flag_array[0x10] = (uint *)((uint)flag_array[0x10] | 1);\n    flags[5] = 0xfffffeff;\n  }\n  if (((flag1 & 0x10200) != 0) && ((flag2 & 0x100) != 0)) {\n    flag_array[0x10] = (uint *)((uint)flag_array[0x10] | 2);\n    (*flag_array)[5] = 0xfffffdff;\n  }\n  if (((flag1 & 0x10400) != 0) && ((flag2 & 0x100) != 0)) {\n    char c = *(char *)((int)flag_array + 0x3d);\n    if (((*(char *)((int)flag_array + 0x3e) == ' ') && (*(short *)((int)flag_array + 0x2a) == 0)) && (((c == '!' || (c == ')')) || ((c == '(' && (flag_array[0xc] == (uint *)0x21)))))) {\n      FUN_08001684(flag_array);\n    }\n    else {\n      flag_array[0x10] = (uint *)((uint)flag_array[0x10] | 4);\n      if (*(char *)((int)flag_array + 0x3e) == '\\x10') {\n        **flag_array = **flag_array | 0x200;\n      }\n      (*flag_array)[5] = 0xfffffbff;\n    }\n  }\n  if (((flag1 & 0x10800) != 0) && ((flag2 & 0x100) != 0)) {\n    flag_array[0x10] = (uint *)((uint)flag_array[0x10] | 8);\n    (*flag_array)[5] = 0xfffff7ff;\n  }\n  if (flag_array[0x10] != (uint *)0x0) {\n    FUN_08001ab0(flag_array);\n  }\n  return;\n}",
            "called": [
                "FUN_08001684",
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e68",
            "calling": [],
            "imported": false,
            "current_name": "check_flags_08001e68"
        },
        "FUN_080019a0": {
            "renaming": {
                "FUN_080019a0": "process_input_080019a0",
                "param_1": "input_array",
                "puVar1": "data_ptr",
                "*(short *)((int)param_1 + 0x2a)": "data_length",
                "(*param_1)[1]": "data[1]",
                "(*param_1)[4]": "data[4]",
                "**param_1": "*data",
                "*(char *)puVar1": "*(char *)data_ptr",
                "*(undefined *)((int)param_1 + 0x3d)": "*(undefined *)((int)input_array + 0x3d)",
                "*(char *)((int)param_1 + 0x3e)": "*(char *)((int)input_array + 0x3e)",
                "param_1[9]": "input_array[9]",
                "param_1[0xb]": "input_array[0xb]",
                "param_1[0xc]": "input_array[0xc]"
            },
            "code": "int process_input_080019a0(uint **input_array) {\n  uint *data = *input_array;\n  short data_length = *(short *)((int)input_array + 0x2a);\n  uint *data_ptr = input_array[9];\n\n  if (data_length == 4) {\n    data[1] &= 0xfffffbff;\n    data_ptr++;\n    *(char *)data_ptr = (char)data[4];\n    data_length--;\n  }\n  else if (data_length == 3) {\n    data[1] &= 0xfffffbff;\n    *data &= 0xfffffbff;\n    data_ptr++;\n    *(char *)data_ptr = (char)data[4];\n    data_length--;\n  }\n  else if (data_length == 2) {\n    if ((int)input_array[0xb] - 1U < 2) {\n      *data &= 0xfffffbff;\n      *data |= 0x100;\n    }\n    else {\n      *data |= 0x200;\n    }\n    data_ptr++;\n    *(char *)data_ptr = (char)data[4];\n    data_length--;\n    data_ptr++;\n    *(char *)data_ptr = (char)data[4];\n    data_length--;\n    data[1] &= 0xfffffcff;\n    *(undefined *)((int)input_array + 0x3d) = 0x20;\n    input_array[0xc] = (uint *)0x0;\n    if (*(char *)((int)input_array + 0x3e) == '@') {\n      *(undefined *)((int)input_array + 0x3e) = 0;\n      do_nothing_08001902();\n    }\n    else {\n      *(undefined *)((int)input_array + 0x3e) = 0;\n      do_nothing_080015b8();\n    }\n  }\n  else {\n    data_ptr++;\n    *(char *)data_ptr = (char)data[4];\n    data_length--;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019a0",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_080019a0"
        },
        "FUN_08003f24": {
            "renaming": {
                "FUN_08003f24": "execute_function_if_less_than_10_08003f24",
                "uVar1": "function_index",
                "FUN_08003f00": "get_function_index",
                "PTR_DAT_08003f40": "function_pointer_array",
                "PTR_DAT_08003f44": "function_argument_array"
            },
            "code": "void execute_function_if_less_than_10_08003f24(void)\n{\n  uint function_index;\n  function_index = get_function_index();\n  if (function_index < 10) {\n    (**(code **)(PTR_DAT_08003f40 + function_index * 4))(*(undefined4 *)(PTR_DAT_08003f44 + function_index * 4));\n  }\n  return;\n}",
            "called": [
                "FUN_08003f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f24",
            "calling": [
                "FUN_08002f66"
            ],
            "imported": false,
            "current_name": "execute_function_if_less_than_10_08003f24"
        },
        "FUN_080046b4": {
            "renaming": {
                "FUN_080046b4": "set_values_if_param2_is_0xffff_080046b4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "data_ptr"
            },
            "code": "void set_values_if_param2_is_0xffff_080046b4(int param1, int param2, undefined4 param3, undefined4 param4)\n{\n    undefined *data_ptr = PTR_DAT_08004754;\n\n    if (param1 != 1) {\n        return;\n    }\n\n    if (param2 == 0xffff) {\n        *data_ptr = 6;\n        *(undefined4 *)(data_ptr + 0xc) = 0;\n        data_ptr[0x14] = 7;\n        *(undefined4 *)(data_ptr + 0x20) = 0;\n        data_ptr[0x28] = 8;\n        *(undefined4 *)(data_ptr + 0x34) = 0;\n        data_ptr[0x3c] = 9;\n        *(undefined4 *)(data_ptr + 0x48) = 0;\n        data_ptr[0x50] = 10;\n        *(undefined4 *)(data_ptr + 0x5c) = 0;\n        data_ptr[100] = 0x17;\n        *(undefined4 *)(data_ptr + 0x70) = 0;\n        data_ptr[0x78] = 0x17;\n        *(undefined4 *)(data_ptr + 0x84) = 0;\n        data_ptr[0x8c] = 0x17;\n        *(undefined4 *)(data_ptr + 0x98) = 0;\n        data_ptr[0xa0] = 0x17;\n        *(undefined4 *)(data_ptr + 0xac) = 0;\n        data_ptr[0xb4] = 0x17;\n        *(undefined4 *)(data_ptr + 0xc0) = 0;\n        data_ptr[200] = 0x28;\n        *(undefined4 *)(data_ptr + 0xd4) = 0;\n        data_ptr[0xdc] = 0x28;\n        *(undefined4 *)(data_ptr + 0xe8) = 0;\n        data_ptr[0xf0] = 0x28;\n        *(undefined4 *)(data_ptr + 0xfc) = 0;\n        data_ptr[0x104] = 0x28;\n        *(undefined4 *)(data_ptr + 0x110) = 0;\n        data_ptr[0x118] = 0x28;\n        *(undefined4 *)(data_ptr + 0x124) = 0;\n        data_ptr[300] = 0x28;\n        *(undefined4 *)(data_ptr + 0x138) = 0;\n        FUN_080047fe(0, PTR_LAB_0800468c_1_0800475c, PTR_DAT_08004758, data_ptr, param4);\n    }\n}",
            "called": [
                "FUN_080047fe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b4",
            "calling": [],
            "imported": false,
            "current_name": "set_values_if_param2_is_0xffff_080046b4"
        },
        "FUN_0800160c": {
            "renaming": {
                "FUN_0800160c": "do_nothing_0800160c"
            },
            "code": "\nvoid do_nothing_0800160c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160c",
            "calling": [
                "FUN_0800160e",
                "FUN_08001bfc"
            ],
            "imported": false,
            "current_name": "do_nothing_0800160c"
        },
        "FUN_0800160e": {
            "renaming": {
                "FUN_0800160e": "process_input_0800160e",
                "param_1": "input_array",
                "cVar1": "current_char",
                "puVar2": "output_array"
            },
            "code": "int process_input_0800160e(int *input_array)\n{\n    char current_char = *(char *)((int)input_array + 0x3d);\n    if (*(short *)((int)input_array + 0x2a) != 0) {\n        undefined *output_array = (undefined *)input_array[9];\n        input_array[9] = (int)(output_array + 1);\n        *output_array = (char)*(undefined4 *)(*input_array + 0x10);\n        *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) + -1;\n        if ((*(short *)((int)input_array + 0x2a) == 0) && (current_char == '*')) {\n            *(uint *)(*input_array + 4) = *(uint *)(*input_array + 4) & 0xfffffbff;\n            input_array[0xc] = 0x22;\n            *(undefined *)((int)input_array + 0x3d) = 0x28;\n            do_nothing_0800160c();\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_0800160c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160e",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_0800160e"
        },
        "FUN_0800293e": {
            "renaming": {
                "FUN_0800293e": "do_nothing_0800293e"
            },
            "code": "\nvoid do_nothing_0800293e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293e",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293e"
        },
        "FUN_08000e18": {
            "renaming": {
                "FUN_08000e18": "calculate_new_value_08000e18",
                "PTR_DAT_08000e28": "data_ptr",
                "PTR_DAT_08000e2c": "data_byte_ptr"
            },
            "code": "void calculate_new_value_08000e18(void)\n{\n  uint8_t byte_value = *PTR_DAT_08000e2c;\n  uint32_t* PTR_DAT_08000e28 = (uint32_t*)PTR_DAT_08000e28;\n  *PTR_DAT_08000e28 += byte_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e18",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "calculate_new_value_08000e18"
        },
        "FUN_08003486": {
            "renaming": {
                "FUN_08003486": "decode_and_set_bit_08003486",
                "param_1": "bit_index",
                "param_2": "bit_array",
                "param_3": "param_3",
                "uVar1": "decoded_value",
                "local_24": "mask",
                "local_20": "bit_array",
                "local_1c": "param_3",
                "local_18": "unused_variable"
            },
            "code": "void decode_and_set_bit_08003486(uint bit_index, uint* bit_array, uint param_3) {\n  uint mask = 1 << (bit_index & 0xf) & 0xffff;\n  uint shifted_index = (bit_index << 0x18) >> 0x1c;\n  uint decoded_value = decode(shifted_index);\n  set_bit(decoded_value, &mask);\n  return;\n}",
            "called": [
                "FUN_08000fb4",
                "FUN_080031fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003486",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "decode_and_set_bit_08003486"
        },
        "FUN_08005662": {
            "renaming": {
                "FUN_08005662": "check_and_update_value_08005662",
                "param_1": "value",
                "param_2": "address",
                "iVar1": "result",
                "uVar2": "updated_value",
                "bVar3": "is_negative"
            },
            "code": "void check_and_update_value_08005662(undefined4 value, int address)\n{\n  int result = FUN_08005718(value, *(short *)(address + 0xe));\n  bool is_negative = result == -1;\n  ushort updated_value;\n  if (is_negative) {\n    updated_value = *(ushort *)(address + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(address + 0x54) = result;\n    updated_value = *(ushort *)(address + 0xc) | 0x1000;\n  }\n  *(ushort *)(address + 0xc) = updated_value;\n}\n",
            "called": [
                "FUN_08005718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005662",
            "calling": [],
            "imported": false,
            "current_name": "check_and_update_value_08005662"
        },
        "FUN_080042ac": {
            "renaming": {
                "FUN_080042ac": "update_data_080042ac",
                "param_1": "data_ptr",
                "iVar1": "result",
                "uVar2": "index",
                "local_9": "data"
            },
            "code": "void update_data_080042ac(int data_ptr)\n{\n  int result = 0;\n  ushort index = 0;\n  undefined data = 0;\n  result = get_data(data_ptr, &data);\n  if ((result == 0) &&\n     (index = *(short *)(data_ptr + 100) + 1U & 0x3f, index != *(ushort *)(data_ptr + 0x66))) {\n    *(undefined *)(*(int *)(data_ptr + 0x60) + (uint)*(ushort *)(data_ptr + 100)) = data;\n    *(ushort *)(data_ptr + 100) = index;\n  }\n  return;\n}",
            "called": [
                "FUN_08003e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042ac",
            "calling": [],
            "imported": false,
            "current_name": "update_data_080042ac"
        },
        "FUN_08001864": {
            "renaming": {
                "FUN_08001864": "process_input_08001864",
                "param_1": "input_array",
                "puVar1": "ptr_to_11th_element",
                "PTR_0802a02c": "input_char",
                "puVar2": "ptr_to_9th_element",
                "PTR_0802a016": "input_short",
                "PTR_0802a010": "ptr_to_9th_element_incremented",
                "PTR_0802a036": "input_char_2"
            },
            "code": "uint32_t process_input_08001864(uint32_t **input_array)\n{\n  uint32_t *ptr_to_11th_element = input_array[0xb];\n  char PTR_0802a02c = *(char *)((int)input_array + 0x3d);\n  if (PTR_0802a02c == '!') {\n    uint32_t *ptr_to_9th_element = input_array[9];\n    short PTR_0802a016 = *(short *)((int)input_array + 0x2a);\n    if (PTR_0802a016 == 0) {\n      if (((ptr_to_11th_element == (uint32_t *)0x4) || (ptr_to_11th_element == (uint32_t *)0x8)) || (ptr_to_11th_element == (uint32_t *)0xffff0000)) {\n        (*input_array)[1] = (*input_array)[1] & 0xfffff8ff;\n        **input_array = **input_array | 0x200;\n        input_array[0xc] = (uint32_t *)0x0;\n        *(char *)((int)input_array + 0x3d) = 0x20;\n        char PTR_0802a036 = *(char *)((int)input_array + 0x3e);\n        if (PTR_0802a036 == '@') {\n          *(char *)((int)input_array + 0x3e) = 0;\n          do_nothing_08001718();\n        }\n        else {\n          *(char *)((int)input_array + 0x3e) = 0;\n          do_nothing_080015b6();\n        }\n      }\n      else {\n        (*input_array)[1] = (*input_array)[1] & 0xfffff8ff;\n        input_array[0xc] = (uint32_t *)0x11;\n        *(char *)((int)input_array + 0x3e) = 0;\n        *(char *)((int)input_array + 0x3d) = 0x20;\n        do_nothing_080015b6();\n      }\n    }\n    else {\n      uint32_t *PTR_0802a010 = (uint32_t *)((int)ptr_to_9th_element + 1);\n      input_array[9] = PTR_0802a010;\n      (*input_array)[4] = (uint32_t)*(char *)ptr_to_9th_element;\n      *(short *)((int)input_array + 0x2a) = PTR_0802a016 - 1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001864",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_08001864"
        },
        "FUN_08000f2c": {
            "renaming": {
                "FUN_08000f2c": "set_flag_if_param_is_four_08000f2c",
                "param_1": "param",
                "DAT_08000f48": "flag_ptr"
            },
            "code": "void set_flag_if_param_is_four_08000f2c(int param) {\n  if (param != 4) {\n    *DAT_08000f48 = *DAT_08000f48 & 0xfffffffb;\n    return;\n  }\n  *DAT_08000f48 = *DAT_08000f48 | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f2c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "set_flag_if_param_is_four_08000f2c"
        },
        "FUN_08000ec4": {
            "renaming": {
                "FUN_08000ec4": "set_bit_in_array_08000ec4",
                "param_1": "bit_index",
                "PTR_DAT_08000edc": "array_ptr",
                "uint": "unsigned int",
                "array_index": "uint",
                "bit_offset": "uint",
                "array_ptr": "uint*",
                "bit_mask": "uint"
            },
            "code": "void set_bit_in_array_08000ec4(uint bit_index)\n{\n  if (bit_index >= 0) {\n    uint array_index = bit_index >> 5;\n    uint bit_offset = bit_index & 0x1f;\n    uint* PTR_DAT_08000edc = (uint*)(DAT_08000edc + array_index * 4);\n    uint bit_mask = 1 << bit_offset;\n    *PTR_DAT_08000edc = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ec4",
            "calling": [
                "FUN_08003eac",
                "FUN_08003e54"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08000ec4"
        },
        "FUN_08004338": {
            "renaming": {
                "FUN_08004338": "checkAndCallFunction_08004338",
                "DAT_0800435c": "shouldCallFunction",
                "PTR_DAT_08004360": "functionPointer"
            },
            "code": "void checkAndCallFunction_08004338(void)\n{\n  if (DAT_0800435c) {\n    callFunction(PTR_DAT_08004360);\n  }\n  return;\n}",
            "called": [
                "FUN_08004240"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004338",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "checkAndCallFunction_08004338"
        },
        "FUN_080005e0": {
            "renaming": {
                "FUN_080005e0": "trigger_system_interrupt_080005e0",
                "software_interrupt": "system_interrupt"
            },
            "code": "void trigger_system_interrupt_080005e0(void)\n{\n  system_interrupt(0x3f);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "FUN_080005e4"
            ],
            "imported": false,
            "current_name": "trigger_system_interrupt_080005e0"
        },
        "FUN_080005e4": {
            "renaming": {
                "FUN_080005e4": "check_and_call_function_080005e4",
                "param_1": "arg1",
                "param_2": "",
                "param_3": "",
                "param_4": "arg4",
                "uVar1": "result"
            },
            "code": "int check_and_call_function_080005e4(int arg1, int arg4) {\n  int result = 0;\n  if (*(int *)PTR_DAT_080005fc == 0) {\n    result = call_function(1, arg1, 0, 0, arg4);\n  }\n  return result;\n}",
            "called": [
                "FUN_080005e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e4",
            "calling": [
                "FUN_08000c4c"
            ],
            "imported": false,
            "current_name": "check_and_call_function_080005e4"
        },
        "FUN_0800076c": {
            "renaming": {
                "FUN_0800076c": "update_values_0800076c",
                "param_1": "data",
                "param_2": "num_rows",
                "param_3": "num_cols",
                "param_4": "val",
                "uVar1": "updated_val",
                "iVar2": "result",
                "uVar3": "current_row"
            },
            "code": "void update_values_0800076c(int **data, int num_rows, int num_cols, int val) {\n  int current_row = *(unsigned char *)((int)data + 0x49);\n  int updated_val = calculate_new_value(data, current_row, num_cols, val, val);\n  *(char *)((int)data + current_row + 9) = (char)((unsigned short)updated_val >> 8);\n  current_row = (current_row + 1) & 0xff;\n  *(char *)((int)data + current_row + 9) = (char)updated_val;\n  *(char *)((int)data + 0x49) = (char)current_row + 1;\n  if (num_rows > 1) {\n    update_rows(num_rows, 1);\n  }\n  if (num_cols < 4) {\n    (**(void (**)(int **, int, unsigned char))(***data + 4))(data, (int)data + 9, *(undefined *)((int)data + 0x49));\n  }\n  if (num_rows > 1) {\n    update_rows(num_rows, 0);\n  }\n  if (num_cols < 4) {\n    do {\n      int result = (**(int (**)(void))(***data + 0xc))();\n    } while (result >= -1);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  int new_ptr = get_new_ptr();\n  data[0x17] = (int *)(new_ptr + (unsigned int)*(unsigned short *)((int)data + 0x56));\n  *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n  return;\n}",
            "called": [
                "FUN_08004204",
                "FUN_08000728",
                "FUN_080041bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800076c",
            "calling": [
                "FUN_08000a00",
                "FUN_08000b54",
                "FUN_08000b04",
                "FUN_080008e2",
                "FUN_08000a7a",
                "FUN_08000a4e",
                "FUN_08000998"
            ],
            "imported": false,
            "current_name": "update_values_0800076c"
        },
        "FUN_080015b6": {
            "renaming": {
                "FUN_080015b6": "do_nothing_080015b6"
            },
            "code": "\nvoid do_nothing_080015b6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b6",
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b6"
        },
        "FUN_08004460": {
            "renaming": {
                "FUN_08004460": "set_value_at_offset_08004460",
                "param_1": "base_address",
                "param_2": "offset",
                "uVar1": "value"
            },
            "code": "void set_value_at_offset_08004460(int base_address, uint offset)\n{\n  undefined2 value;\n  if (offset < 0x60) {\n    value = *(undefined2 *)(PTR_DAT_08004478 + offset * 2);\n  }\n  else {\n    value = 0xffff;\n  }\n  *(undefined2 *)(base_address + 300) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004460",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_08004460"
        },
        "FUN_080015b8": {
            "renaming": {
                "FUN_080015b8": "do_nothing_080015b8"
            },
            "code": "\nvoid do_nothing_080015b8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b8",
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b8"
        },
        "FUN_08001198": {
            "renaming": {
                "FUN_08001198": "set_param_value_08001198",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "is_shifted",
                "*(int *)(param_1 + 0x18)": "*(int *)(base_address + 0x18)"
            },
            "code": "void set_param_value_08001198(int base_address, int value, int is_shifted) {\n  if (is_shifted == 0) {\n    *(int *)(base_address + 0x18) = value;\n  }\n  else {\n    *(int *)(base_address + 0x18) = value << 0x10;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001198",
            "calling": [
                "FUN_080034b6"
            ],
            "imported": false,
            "current_name": "set_param_value_08001198"
        },
        "FUN_08003138": {
            "renaming": {
                "FUN_08003138": "get_bit_at_position_08003138",
                "param_1": "value",
                "param_2": "position",
                "* (uint *) (param_2 + ((param_1 << 0x18) >> 0x1c) * 4)": "ptr",
                "*(uint *)(param_2 + ((param_1 << 0x18) >> 0x1c) * 4)": "*ptr",
                "(param_1 & 0xf)": "value & 0xf",
                "& 1": "& 1",
                "uint": "uint"
            },
            "code": "uint get_bit_at_position_08003138(uint value, int position) {\n    uint* ptr = (uint*)(position + ((value << 0x18) >> 0x1c) * 4);\n    uint masked_value = *ptr >> (value & 0xf) & 1;\n    return masked_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003138",
            "calling": [
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "get_bit_at_position_08003138"
        },
        "FUN_08000300": {
            "renaming": {
                "FUN_08000300": "FUNC_08000300"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong FUNC_08000300(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  ulonglong uVar1;\n  uint *puVar2;\n  uint uVar3;\n  uint *puVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 != 0) {\n        param_3 = param_3 << (uVar12 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        param_1 = param_1 << (uVar12 & 0xff);\n      }\n      uVar10 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar10;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar10 * uVar8) * 0x10000;\n      uVar6 = uVar8 * (param_3 & 0xffff);\n      uVar5 = uVar8;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar8 = (uVar7 - uVar6) / uVar10;\n      uVar7 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar10 * uVar8) * 0x10000;\n      uVar10 = uVar8 * (param_3 & 0xffff);\n      uVar6 = uVar8;\n      if (uVar7 <= uVar10 && uVar10 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar10 && uVar10 - uVar7 != 0)) {\n          uVar6 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar10;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n      puVar4 = (uint *)0x0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 == 0) {\n        param_2 = param_2 - param_3;\n        uVar7 = param_3 >> 0x10;\n        uVar11 = param_3 & 0xffff;\n        puVar4 = (uint *)0x1;\n      }\n      else {\n        param_3 = param_3 << (uVar12 & 0xff);\n        uVar7 = param_3 >> 0x10;\n        uVar5 = param_2 >> (0x20 - uVar12 & 0xff);\n        uVar9 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        uVar6 = uVar5 / uVar7;\n        uVar11 = param_3 & 0xffff;\n        uVar10 = uVar9 >> 0x10 | (uVar5 - uVar7 * uVar6) * 0x10000;\n        uVar8 = uVar6 * uVar11;\n        param_1 = param_1 << (uVar12 & 0xff);\n        uVar5 = uVar6;\n        if (uVar10 <= uVar8 && uVar8 - uVar10 != 0) {\n          bVar13 = CARRY4(uVar10,param_3);\n          uVar10 = uVar10 + param_3;\n          uVar5 = uVar6 - 1;\n          if ((bVar13 == false) && (uVar10 <= uVar8 && uVar8 - uVar10 != 0)) {\n            uVar5 = uVar6 - 2;\n            uVar10 = uVar10 + param_3;\n          }\n        }\n        uVar3 = (uVar10 - uVar8) / uVar7;\n        param_2 = uVar9 & 0xffff | ((uVar10 - uVar8) - uVar7 * uVar3) * 0x10000;\n        uVar8 = uVar3 * uVar11;\n        uVar6 = uVar3;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar6 = uVar3 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar6 = uVar3 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        puVar4 = (uint *)(uVar6 | uVar5 << 0x10);\n      }\n      uVar10 = param_2 / uVar7;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar10) * 0x10000;\n      uVar6 = uVar11 * uVar10;\n      uVar5 = uVar10;\n      if (uVar8 <= uVar6 && uVar6 - uVar8 != 0) {\n        bVar13 = CARRY4(uVar8,param_3);\n        uVar8 = uVar8 + param_3;\n        uVar5 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar8 <= uVar6 && uVar6 - uVar8 != 0)) {\n          uVar5 = uVar10 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar10 = (uVar8 - uVar6) / uVar7;\n      uVar7 = param_1 & 0xffff | ((uVar8 - uVar6) - uVar7 * uVar10) * 0x10000;\n      uVar11 = uVar11 * uVar10;\n      uVar6 = uVar10;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar11;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar7 >> (uVar12 & 0xff);\n      param_5[1] = 0;\n      return CONCAT44(puVar4,puVar2);\n    }\n  }\n  else if (param_2 < param_4) {\n    puVar2 = param_5;\n    puVar4 = param_5;\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return 0;\n    }\n  }\n  else {\n    puVar4 = (uint *)count_leading_zeroes(param_4);\n    if (puVar4 != (uint *)0x0) {\n      uVar8 = 0x20 - (int)puVar4;\n      uVar5 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar4 & 0xff);\n      uVar9 = uVar5 >> 0x10;\n      uVar12 = param_2 >> (uVar8 & 0xff);\n      uVar11 = param_1 >> (uVar8 & 0xff) | param_2 << ((uint)puVar4 & 0xff);\n      uVar10 = uVar12 / uVar9;\n      uVar7 = uVar11 >> 0x10 | (uVar12 - uVar9 * uVar10) * 0x10000;\n      uVar6 = uVar10 * (uVar5 & 0xffff);\n      param_3 = param_3 << ((uint)puVar4 & 0xff);\n      param_1 = param_1 << ((uint)puVar4 & 0xff);\n      uVar12 = uVar10;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar12 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar12 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar10 = (uVar7 - uVar6) / uVar9;\n      uVar7 = uVar11 & 0xffff | ((uVar7 - uVar6) - uVar9 * uVar10) * 0x10000;\n      uVar9 = uVar10 * (uVar5 & 0xffff);\n      uVar6 = uVar10;\n      if (uVar7 <= uVar9 && uVar9 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar9 && uVar9 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar6 = uVar6 | uVar12 << 0x10;\n      uVar1 = (ulonglong)uVar6 * (ulonglong)param_3;\n      if (CONCAT44(uVar7 - uVar9,param_1) < uVar1) {\n        uVar1 = uVar1 - CONCAT44(uVar5,param_3);\n        uVar6 = uVar6 - 1;\n      }\n      if (param_5 != (uint *)0x0) {\n        uVar12 = ((uVar7 - uVar9) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n        *param_5 = uVar12 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar4 & 0xff);\n        param_5[1] = uVar12 >> ((uint)puVar4 & 0xff);\n      }\n      return (ulonglong)uVar6;\n    }\n    if ((param_4 < param_2) || (puVar2 = puVar4, param_3 <= param_1)) {\n      bVar13 = param_1 < param_3;\n      param_1 = param_1 - param_3;\n      param_2 = (param_2 - param_4) - (uint)bVar13;\n      puVar2 = (uint *)0x1;\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return ZEXT48(puVar2);\n    }\n  }\n  return CONCAT44(puVar4,puVar2);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000300",
            "calling": [
                "FUN_080002d0"
            ],
            "imported": false,
            "current_name": "FUNC_08000300"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "update_bit_08002848",
                "param_1": "data",
                "param_2": "bit_position",
                "param_3": "bit_value",
                "PTR_": "",
                "DAT_": "",
                "*": "",
                "uint": "uint32_t",
                "&(param_1 + 0x20)": "data",
                "1 << (param_2 & 0xff)": "mask",
                "|": "",
                "&": "",
                "~": "",
                "<<": "",
                "}": "",
                "return;": ""
            },
            "code": "void update_bit_08002848(uint32_t* data, uint8_t bit_position, uint8_t bit_value) {\n    uint32_t mask = ~(1 << (bit_position & 0xff));\n    *data = (*data & mask) | (bit_value << (bit_position & 0xff));\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "FUN_08002864"
            ],
            "imported": false,
            "current_name": "update_bit_08002848"
        },
        "FUN_0800312c": {
            "renaming": {
                "FUN_0800312c": "combineTwoBytes_0800312c",
                "param_1": "address",
                "*PTR_DAT_080034a4": "*byte1",
                "*PTR_DAT_080034a5": "*byte2"
            },
            "code": "byte combineTwoBytes_0800312c(int address)\n{\n    byte byte1 = *(byte *)(address + 0x3a);\n    byte byte2 = *(byte *)(address + 0x39);\n    return byte1 | byte2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800312c",
            "calling": [
                "FUN_08003df4",
                "FUN_08003dd0"
            ],
            "imported": false,
            "current_name": "combineTwoBytes_0800312c"
        },
        "FUN_080028f0": {
            "renaming": {
                "FUN_080028f0": "clear_bit_080028f0",
                "param_1": "data",
                "param_2": "bit_position",
                "puVar1": "data_pointer",
                "mask1": "0x1111",
                "mask2": "0x444",
                "bit_mask1": "0xffff7fff",
                "bit_mask2": "0xfffffffe"
            },
            "code": "uint32_t clear_bit_080028f0(uint32_t **data, uint32_t bit_position)\\n\\\n{\\n\\\n  uint32_t *data_pointer = *data;\\n\\\n  uint32_t mask1 = 0x1111;\\n\\\n  uint32_t mask2 = 0x444;\\n\\\n  uint32_t bit_mask1 = 0xffff7fff;\\n\\\n  uint32_t bit_mask2 = 0xfffffffe;\\n\\\n  \\n\\\n  FUN_080028d4(*data_pointer, bit_position, 0);\\n\\\n  if (((data_pointer[8] & mask1) == 0) && ((data_pointer[8] & mask2) == 0)) {\\n\\\n    data_pointer[0x11] &= bit_mask1;\\n\\\n  }\\n\\\n  if (((data_pointer[8] & mask1) == 0) && ((data_pointer[8] & mask2) == 0)) {\\n\\\n    *data_pointer &= bit_mask2;\\n\\\n  }\\n\\\n  return 0;\\n\\\n}",
            "called": [
                "FUN_080028d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028f0",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "clear_bit_080028f0"
        },
        "FUN_08000e30": {
            "renaming": {
                "FUN_08000e30": "get_value_from_pointer_08000e30",
                "PTR_DAT_08000e38": "pointer_to_value"
            },
            "code": "int get_value_from_pointer_08000e30() {\n    int* PTR_DAT_08000e38 = (int*) PTR_DAT_08000e38;\n    return *PTR_DAT_08000e38;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e30",
            "calling": [
                "FUN_08003d18",
                "FUN_08002dd0",
                "FUN_0800201c",
                "FUN_0800346c",
                "FUN_08001f9c",
                "FUN_08002488",
                "FUN_08002d0c"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08000e30"
        },
        "FUN_08000f56": {
            "renaming": {
                "FUN_08000f56": "set_value_and_reset_08000f56",
                "param_1": "value_to_set",
                "*(undefined *)(param_1 + 4)": "*(unsigned char *)(value_to_set + 4)",
                "FUN_080033c8": "call_cleanup_function()",
                "*(undefined4 *)(param_1 + 0x10)": "*(unsigned int *)(value_to_set + 0x10)",
                "*(undefined *)(param_1 + 5)": "*(unsigned char *)(value_to_set + 5)"
            },
            "code": "int set_value_and_reset_08000f56(int value_to_set){\n                        if (value_to_set != 0) {\n                            *(unsigned char *)(value_to_set + 4) = 2;\n                            call_cleanup_function();\n                            *(unsigned int *)(value_to_set + 0x10) = 0;\n                            *(unsigned char *)(value_to_set + 4) = 0;\n                            *(unsigned char *)(value_to_set + 5) = 0;\n                            return 0;\n                        }\n                        return 1;\n                     }",
            "called": [
                "FUN_080033c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f56",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "set_value_and_reset_08000f56"
        },
        "FUN_0800295c": {
            "renaming": {
                "FUN_0800295c": "process_data_0800295c",
                "param_1": "data",
                "sVar1": "short_result",
                "pbVar2": "byte_ptr",
                "*param_1": "data_ptr",
                "param_1[2]": "data_type",
                "*(uint *)(*param_1 + 4)": "result_ptr",
                "*(ushort *)param_1[8]": "ushort_ptr",
                "param_1[4]": "flag",
                "param_1[8]": "data_index",
                "*(uint *)(*param_1 + 0xc)": "flag_ptr"
            },
            "code": "int process_data_0800295c(int *data) {\n  char first_char = *(char *)(data + 0x39);\n  if (first_char != '!') {\n    return 2;\n  }\n  int *data_ptr = (int *)*data;\n  int data_type = data[2];\n  if (data_type == 0x1000) {\n    uint *result_ptr = (uint *)(data_ptr + 1);\n    ushort *ushort_ptr = (ushort *)data[8];\n    *result_ptr = *ushort_ptr & 0x1ff;\n    if (data[4] == 0) {\n      data[8] += 2;\n    }\n    else {\n      data[8]++;\n    }\n  }\n  else {\n    byte *byte_ptr = (byte *)data[8];\n    data[8] = (int)(byte_ptr + 1);\n    uint *result_ptr = (uint *)(data_ptr + 1);\n    *result_ptr = (uint)*byte_ptr;\n  }\n  short *short_ptr = (short *)(data + 0x26);\n  *short_ptr = *short_ptr - 1;\n  if (*short_ptr == 0) {\n    uint *flag_ptr = (uint *)(data_ptr + 3);\n    *flag_ptr &= 0xffffff7f;\n    *flag_ptr |= 0x40;\n    return 0;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800295c",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "process_data_0800295c"
        },
        "FUN_08003380": {
            "renaming": {
                "FUN_08003380": "check_value_08003380",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "iVar1": "result"
            },
            "code": "int check_value_08003380(int value1, int value2, int value3, int value4) {\n  int result = FUN_0800354a(value1, PTR_DAT_08003398, value3, value4, value4);\n  if ((result << 0xc) >> 0x1b != 2) {\n    return 0;\n  }\n  return 0x10;\n}",
            "called": [
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003380",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "check_value_08003380"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "process_data_08004110",
                "param_1": "data_index",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "data_ptr",
                "iVar1": "function_return_value",
                "puVar2": "data_array_ptr",
                "iVar3": "data_value"
            },
            "code": "void process_data_08004110(uint data_index, undefined4 arg1, undefined4 arg2, undefined* data_ptr) {\n  int data_value;\n  undefined* data_array_ptr;\n  int function_return_value;\n  if (data_index < 0x60) {\n    data_value = (int)*(short *)(PTR_DAT_080041a8 + data_index * 2);\n    data_array_ptr = PTR_DAT_080041a8;\n  }\n  else {\n    data_value = -1;\n    data_array_ptr = data_ptr;\n  }\n  if (data_value != -1) {\n    function_return_value = FUN_08003138(data_value, PTR_DAT_080041ac, arg2, data_array_ptr, data_ptr);\n    if (function_return_value != 0) {\n      function_return_value = FUN_0800355e(data_value, PTR_DAT_080041b0);\n      if (function_return_value == 0) {\n        function_return_value = FUN_0800355e(data_value, PTR_DAT_080041b4);\n        if (function_return_value != 0) {\n          FUN_08003414(data_value);\n        }\n      }\n      else {\n        FUN_080033d8(data_value);\n      }\n      FUN_0800316c(data_value, PTR_DAT_080041ac);\n    }\n    switch(arg1) {\n    case 0:\n      FUN_08003486(data_value, 0);\n      break;\n    case 1:\n      FUN_08003486(data_value, 1, 0);\n      break;\n    case 2:\n      FUN_08003486(data_value, 0, 1);\n      break;\n    case 3:\n      FUN_08003486(data_value, 0, 2);\n    }\n    FUN_0800314e(data_value, PTR_DAT_080041b8);\n  }\n  return;\n}",
            "called": [
                "FUN_0800314e",
                "FUN_08003138",
                "FUN_0800355e",
                "FUN_0800316c",
                "FUN_08003414",
                "FUN_080033d8",
                "FUN_08003486"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "FUN_08000600"
            ],
            "imported": false,
            "current_name": "process_data_08004110"
        },
        "FUN_08000ee0": {
            "renaming": {
                "FUN_08000ee0": "check_param_and_set_values_08000ee0",
                "param_1": "param",
                "puVar1": "data_ptr",
                "DAT_08000f04": "data_ptr",
                "DAT_08000f08": "data_offset"
            },
            "code": "int check_param_and_set_values_08000ee0(int param)\n{\n  int *DAT_08000f04;\n  \n  DAT_08000f04 = DAT_08000f04;\n  if (param - 1U < 0x1000000) {\n    DAT_08000f04[1] = param - 1U;\n    *(undefined *)(DAT_08000f08 + 0x23) = 0xf0;\n    DAT_08000f04[2] = 0;\n    *DAT_08000f04 = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ee0",
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98"
            ],
            "imported": false,
            "current_name": "check_param_and_set_values_08000ee0"
        },
        "FUN_080015ba": {
            "renaming": {
                "FUN_080015ba": "do_nothing_080015ba"
            },
            "code": "\nvoid do_nothing_080015ba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015ba",
            "calling": [
                "FUN_08001684",
                "FUN_080015bc"
            ],
            "imported": false,
            "current_name": "do_nothing_080015ba"
        },
        "FUN_080015bc": {
            "renaming": {
                "FUN_080015bc": "read_and_update_080015bc",
                "param_1": "input_array",
                "cVar1": "current_char",
                "pbVar2": "byte_array"
            },
            "code": "int read_and_update_080015bc(int *input_array)\n{\n    char current_char = *(char *)((int)input_array + 0x3d);\n    if (*(short *)((int)input_array + 0x2a) != 0)\n    {\n        byte *byte_array = (byte *)input_array[9];\n        input_array[9] = (int)(byte_array + 1);\n        *(uint *)(*input_array + 0x10) = (uint)*byte_array;\n        *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) - 1;\n        if ((*(short *)((int)input_array + 0x2a) == 0) && (current_char == ')'))\n        {\n            *(uint *)(*input_array + 4) = *(uint *)(*input_array + 4) & 0xfffffbff;\n            input_array[0xc] = 0x21;\n            *(undefined *)((int)input_array + 0x3d) = 0x28;\n            do_nothing_080015ba();\n        }\n        return 0;\n    }\n    return 0;\n}",
            "called": [
                "FUN_080015ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015bc",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "read_and_update_080015bc"
        },
        "FUN_08000f4c": {
            "renaming": {
                "FUN_08000f4c": "do_nothing_08000f4c"
            },
            "code": "\nvoid do_nothing_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4c",
            "calling": [
                "FUN_08000f4e"
            ],
            "imported": false,
            "current_name": "do_nothing_08000f4c"
        },
        "FUN_08000f4e": {
            "renaming": {
                "FUN_08000f4e": "do_nothing_and_return_08000f4e",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void do_nothing_and_return_08000f4e(void)\n{\n  do_nothing_08000f4c();\n  return;\n}",
            "called": [
                "FUN_08000f4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4e",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08000f4e"
        },
        "FUN_0800066c": {
            "renaming": {
                "FUN_0800066c": "update_data_0800066c",
                "param_1": "data_address",
                "param_2": "new_value",
                "param_3": "value_limit",
                "param_4": "new_data",
                "*(undefined *)(param_1 + 4)": "*(char *)(data_address + 4)",
                "*(char *)(param_1 + 5)": "*(char *)(data_address + 5)",
                "*(undefined *)(param_1 + 6)": "*(char *)(data_address + 6)",
                "*(undefined2 *)(param_1 + 0x56)": "*(short *)(data_address + 0x56)"
            },
            "code": "void update_data_0800066c(int data_address, char new_value, int value_limit, char new_data) {\n  *(char *)(data_address + 4) = new_value;\n  if (value_limit > 3) {\n    value_limit = 0;\n  }\n  *(char *)(data_address + 5) = value_limit;\n  *(char *)(data_address + 6) = new_data;\n  *(short *)(data_address + 0x56) = 1000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800066c",
            "calling": [
                "FUN_08000682"
            ],
            "imported": false,
            "current_name": "update_data_0800066c"
        },
        "FUN_080042e8": {
            "renaming": {
                "FUN_080042e8": "add_element_080042e8",
                "param_1": "array_address",
                "param_2": "element",
                "bVar1": "index_byte",
                "bVar2": "index_byte_masked",
                "iVar3": "index",
                "PTR_LAB_0800420c_1_08004334": "error_handler"
            },
            "code": "int add_element_080042e8(int array_address, char element) {\n    int index = *(unsigned short *)(array_address + 0x140) + 1;\n    unsigned char index_byte = (unsigned char)index & 0x7f;\n    if (index == 0) {\n        index_byte = -(-index & 0x7f);\n    }\n    while (*(unsigned short *)(array_address + 0x142) == (unsigned short)index_byte) {\n    }\n    *(char *)(*(int *)(array_address + 0x13c) + (unsigned short)*(unsigned short *)(array_address + 0x140)) = element;\n    *(unsigned short *)(array_address + 0x140) = (unsigned short)index_byte;\n    int error_check = FUN_08003df4(array_address + 0xd4);\n    if (error_check == 0) {\n        FUN_08003eac(array_address + 0xd4, PTR_LAB_0800420c_1_08004334);\n    }\n    return 1;\n}",
            "called": [
                "FUN_08003eac",
                "FUN_08003df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e8",
            "calling": [],
            "imported": false,
            "current_name": "add_element_080042e8"
        },
        "FUN_080038d0": {
            "renaming": {
                "FUN_080038d0": "execute_function_if_valid_080038d0",
                "param_1": "param",
                "iVar1": "function_address",
                "FUN_0800387c": "get_function_address",
                "*(code **)(iVar1 + 0x60)": "function_pointer",
                "*(char *)(iVar1 + 0x5e)": "flag",
                "*(char *)(iVar1 + 0x2c)": "space_check",
                "code": "code_pointer",
                "FUN_08001578": "call_another_function"
            },
            "code": "void execute_function_if_valid_080038d0(int param){\n                    int function_address = get_function_address();\n                    code* function_pointer = *(code**)(function_address + 0x60);\n                    char flag = *(char*)(function_address + 0x5e);\n                    char space_check = *(char*)(function_address + 0x2c);\n                    if(function_pointer != (code*)0x0 && flag == '\\x01' && space_check != ' '){\n                        (*function_pointer)(function_address + 0x68);\n                    }\n                    call_another_function(param);\n                }",
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038d0",
            "calling": [
                "FUN_08001684",
                "FUN_08001ab0",
                "FUN_08001bfc"
            ],
            "imported": false,
            "current_name": "execute_function_if_valid_080038d0"
        },
        "FUN_0800410c": {
            "renaming": {
                "FUN_0800410c": "get_one_0800410c",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int get_one_0800410c() {\n    int result = 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800410c",
            "calling": [
                "thunk_FUN_0800410c"
            ],
            "imported": false,
            "current_name": "get_one_0800410c"
        },
        "FUN_0800260c": {
            "renaming": {
                "FUN_0800260c": "calculate_shift_amount_0800260c",
                "uVar1": "shift_value",
                "FUN_080025e0": "get_data_value",
                "PTR_DAT_08002628": "shift_amount_array",
                "DAT_08002624": "data_ptr"
            },
            "code": "uint calculate_shift_amount_0800260c(void)\n{\n  uint shift_amount;\n  shift_amount = get_data_value();\n  uint index = (uint)(*(int *)(DAT_08002624 + 8) << 0x10) >> 0x1d;\n  uint shift_value = shift_amount >> PTR_DAT_08002628[index];\n  return shift_value;\n}",
            "called": [
                "FUN_080025e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800260c",
            "calling": [
                "FUN_080029c8"
            ],
            "imported": false,
            "current_name": "calculate_shift_amount_0800260c"
        },
        "FUN_08004240": {
            "renaming": {
                "FUN_08004240": "calculate_value_from_pointers_08004240",
                "param_1": "pointer_param",
                "*(short *)(param_1 + 0x138)": "pointer1",
                "*(short *)(param_1 + 0x13a)": "pointer2",
                "value1": "value_at_pointer1",
                "value2": "value_at_pointer2",
                "result": "calculated_value"
            },
            "code": "ushort calculate_value_from_pointers_08004240(int pointer_param) {\n    short* pointer1 = (short*)(pointer_param + 0x138);\n    short* pointer2 = (short*)(pointer_param + 0x13a);\n    short value1 = *pointer1 + 0x40;\n    short value2 = *pointer2;\n    ushort result = (value1 - value2) & 0x3f;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004240",
            "calling": [
                "FUN_08004338"
            ],
            "imported": false,
            "current_name": "calculate_value_from_pointers_08004240"
        },
        "FUN_080026c8": {
            "renaming": {
                "FUN_080026c8": "do_nothing_080026c8"
            },
            "code": "\nvoid do_nothing_080026c8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026c8",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026c8"
        },
        "FUN_080041bc": {
            "renaming": {
                "FUN_080041bc": "process_data_080041bc",
                "param_1": "data_index",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "data_ptr",
                "iVar1": "status",
                "uVar2": "processed_value",
                "puVar3": "data_ptr",
                "uVar4": "data_value"
            },
            "code": "void process_data_080041bc(uint data_index, undefined4 param_2, undefined4 param_3, undefined* data_ptr) {\n    int status = 0;\n    uint data_value;\n    if (data_index < 0x60) {\n        data_value = (uint)*(short *)(PTR_DAT_080041fc + data_index * 2);\n    }\n    else {\n        data_value = 0xffffffff;\n        data_ptr = data_ptr;\n    }\n    if ((data_value != 0xffffffff) && (status = process_value(data_value, PTR_DAT_08004200, param_3, data_ptr, data_ptr))) {\n        uint processed_value = get_processed_value(data_value);\n        set_bit(processed_value, 1 << (data_value & 0xf) & 0xffff, param_2);\n    }\n}",
            "called": [
                "FUN_08003138",
                "FUN_0800318c",
                "FUN_080034b6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041bc",
            "calling": [
                "FUN_080006b4",
                "FUN_08000600",
                "FUN_0800076c"
            ],
            "imported": false,
            "current_name": "process_data_080041bc"
        },
        "FUN_08004364": {
            "renaming": {
                "FUN_08004364": "initialize_struct_08004364",
                "param_1": "struct_ptr",
                "*(int *)(param_1 + 0x134)": "*ptr1",
                "param_1 + 0x11": "struct_ptr + 0x11",
                "*(undefined2 *)(param_1 + 0x138)": "*ptr2",
                "*(undefined2 *)(param_1 + 0x13a)": "*ptr3",
                "*(int *)(param_1 + 0x13c)": "*ptr4",
                "param_1 + 0x51": "struct_ptr + 0x51",
                "*(undefined2 *)(param_1 + 0x140)": "*ptr5",
                "*(undefined2 *)(param_1 + 0x142)": "*ptr6"
            },
            "code": "void initialize_struct_08004364(int struct_ptr)\n{\n    int* ptr1 = (int *)(struct_ptr + 0x134);\n    *ptr1 = struct_ptr + 0x11;\n    \n    short* ptr2 = (short *)(struct_ptr + 0x138);\n    *ptr2 = 0;\n    \n    short* ptr3 = (short *)(struct_ptr + 0x13a);\n    *ptr3 = 0;\n    \n    int* ptr4 = (int *)(struct_ptr + 0x13c);\n    *ptr4 = struct_ptr + 0x51;\n    \n    short* ptr5 = (short *)(struct_ptr + 0x140);\n    *ptr5 = 0;\n    \n    short* ptr6 = (short *)(struct_ptr + 0x142);\n    *ptr6 = 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004364",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "initialize_struct_08004364"
        },
        "FUN_08000682": {
            "renaming": {
                "FUN_08000682": "execute_function_08000682",
                "param_1": "input_param",
                "FUN_0800066c": "call_function_at_address"
            },
            "code": "undefined4 execute_function_08000682(undefined4 input_param){\n  call_function_at_address(0x0800066c);\n  return input_param;\n}",
            "called": [
                "FUN_0800066c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000682",
            "calling": [
                "FUN_08000690"
            ],
            "imported": false,
            "current_name": "execute_function_08000682"
        },
        "FUN_08000e3c": {
            "renaming": {
                "FUN_08000e3c": "setBitInMemory_08000e3c",
                "param_1": "value",
                "DAT_08000e5c": "memoryAddress",
                "PTR_08000e5c": "memoryAddress",
                "mask": "mask",
                "newValue": "newValue"
            },
            "code": "void setBitInMemory_08000e3c(uint value) {\n    uint* DAT_08000e5c = (uint*)(DAT_08000e5c + 0xc);\n    uint mask = 0xf8ff;\n    uint newValue = (value & 7) << 8 | (*DAT_08000e5c & mask) | 0x5fa0000;\n    *DAT_08000e5c = newValue;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e3c",
            "calling": [
                "FUN_08000de4",
                "FUN_08004648"
            ],
            "imported": false,
            "current_name": "setBitInMemory_08000e3c"
        },
        "FUN_08002864": {
            "renaming": {
                "FUN_08002864": "clear_bit_08002864",
                "param_1": "bits",
                "param_2": "bit_pos",
                "puVar2": "bits_ptr",
                "bVar1": "is_dat_080028d0"
            },
            "code": "uint32_t clear_bit_08002864(uint32_t **bits, uint32_t bit_pos)\\n\\\n{\\n\\\n    bool is_dat_080028d0 = ((*bits) == DAT_080028d0) || ((*bits) == (DAT_080028d0 + 0x100));\\n\\\n    uint32_t *bits_ptr = *bits;\\n\\\n    if (is_dat_080028d0 && ((bits_ptr[8] & 0x1111) == 0) && ((bits_ptr[8] & 0x444) == 0)) {\\n\\\n        bits_ptr[0x11] &= 0xffff7fff;\\n\\\n    }\\n\\\n    if (((bits_ptr[8] & 0x1111) == 0) && ((bits_ptr[8] & 0x444) == 0)) {\\n\\\n        *bits_ptr &= 0xfffffffe;\\n\\\n    }\\n\\\n    *((uint8_t *)bits + 0x39) = 1;\\n\\\n    return 0;\\n\\\n}",
            "called": [
                "FUN_08002848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002864",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "clear_bit_08002864"
        },
        "FUN_0800532c": {
            "renaming": {
                "FUN_0800532c": "initialize_data_0800532c",
                "param_1": "data_array",
                "param_2": "initial_value_1",
                "param_3": "initial_value_2",
                "puVar1": "label_ptr"
            },
            "code": "void initialize_data_0800532c(uint32_t *data_array, uint16_t initial_value_1, uint16_t initial_value_2) {\n  data_array[0] = 0;\n  data_array[1] = 0;\n  data_array[2] = 0;\n  *(uint16_t *)(data_array + 3) = initial_value_1;\n  data_array[0x19] = 0;\n  *(uint16_t *)((int)data_array + 0xe) = initial_value_2;\n  data_array[4] = 0;\n  data_array[5] = 0;\n  data_array[6] = 0;\n  memset(data_array + 0x17, 0, 8);\n  data_array[9] = DAT_08005364;\n  data_array[10] = PTR_FUN_0800562a_1_08005368;\n  data_array[0xb] = PTR_FUN_08005662_1_0800536c;\n  uint8_t *label_ptr = PTR_LAB_08005686_1_08005370;\n  data_array[8] = data_array;\n  data_array[0xc] = label_ptr;\n  return;\n}",
            "called": [
                "FUN_080048cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800532c",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "initialize_data_0800532c"
        },
        "FUN_0800314e": {
            "renaming": {
                "FUN_0800314e": "update_bit_0800314e",
                "param_1": "bit_position",
                "param_2": "bit_array",
                "uVar1": "bit_index",
                "target_word": "target_word",
                "DAT_0804a018": "bit_mask"
            },
            "code": "void update_bit_0800314e(uint bit_position, int* bit_array) {\n  uint bit_index = (bit_position << 0x18) >> 0x1c;\n  uint* target_word = bit_array + bit_index;\n  uint DAT_0804a018 = 1 << (bit_position & 0xf);\n  *target_word = *target_word | DAT_0804a018;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "update_bit_0800314e"
        },
        "FUN_0800447c": {
            "renaming": {
                "FUN_0800447c": "initialize_data_0800447c",
                "param_1": "data",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "var_1",
                "*param_1": "*data",
                "PTR_PTR_FUN_080042e8_1_080044c8": "function_pointer",
                "PTR_DAT_080044cc": "special_pointer",
                "FUN_08004444": "call_function_1",
                "FUN_08004460": "call_function_2",
                "PTR_DAT_080044d0": "special_data_1",
                "PTR_DAT_080044d4": "special_data_2",
                "FUN_0800351e": "get_value",
                "*(undefined2 *)((int)param_1 + 0x12e)": "*(undefined2 *)((int)data + 0x12e)",
                "*(undefined2 *)(param_1 + 0x4b)": "*(undefined2 *)(data + 0x4b)",
                "FUN_08004364": "finalize_data"
            },
            "code": "undefined4* initialize_data_0800447c(undefined4 *data, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n    data[1] = 0;\n    data[2] = 1000;\n    *data = PTR_PTR_FUN_080042e8_1_080044c8;\n    if (data == PTR_DAT_080044cc) {\n        call_function_1(data, 0x4c, param_3, PTR_DAT_080044cc, param_4);\n        call_function_2(data, 0x4d);\n    }\n    else {\n        undefined2 var_1 = get_value(param_2, PTR_DAT_080044d0);\n        *(undefined2 *)((int)data + 0x12e) = var_1;\n        var_1 = get_value(param_2, PTR_DAT_080044d4);\n        *(undefined2 *)(data + 0x4b) = var_1;\n    }\n    finalize_data(data);\n    return data;\n}",
            "called": [
                "FUN_08004444",
                "FUN_0800351e",
                "FUN_08004364",
                "FUN_08004460"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800447c",
            "calling": [
                "FUN_080044d8"
            ],
            "imported": false,
            "current_name": "initialize_data_0800447c"
        },
        "FUN_08004808": {
            "renaming": {
                "FUN_08004808": "validate_assertion_and_return_result_08004808",
                "param_1": "assertion_line_number",
                "param_2": "assertion_file_name",
                "param_3": "assertion_expression",
                "param_4": "expression_size",
                "uVar1": "ptr_value",
                "puVar2": "assertion_failure_message",
                "uVar3": "time",
                "uVar4": "expression_size_copy"
            },
            "code": "void validate_assertion_and_return_result_08004808(undefined4 assertion_line_number, undefined4 assertion_file_name, undefined* assertion_expression, undefined4 expression_size)\n{\n    undefined4 ptr_value = *(undefined4 *)(*(int *)PTR_PTR_DAT_08004834 + 0xc);\n    undefined* assertion_failure_message = PTR_s_assertion___s__failed__file___s__0800483c;\n    undefined4 expression_size_copy = expression_size;\n    if (assertion_expression == (undefined*)0x0) goto LAB_0800482c;\n    do {\n        FUN_08004860(ptr_value, assertion_failure_message, expression_size, assertion_line_number, assertion_file_name, PTR_s___function__08004838, assertion_expression, expression_size_copy);\n        undefined8 time = FUN_080051ac();\n        assertion_file_name = (undefined4)((ulonglong)time >> 0x20);\n        ptr_value = (undefined4)time;\n    LAB_0800482c:\n        assertion_expression = PTR_s__08004840;\n        assertion_failure_message = PTR_s__08004840;\n    } while(true);\n}\n",
            "called": [
                "FUN_080051ac",
                "FUN_08004860"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004808",
            "calling": [
                "FUN_08004388"
            ],
            "imported": false,
            "current_name": "validate_assertion_and_return_result_08004808"
        },
        "FUN_08000f72": {
            "renaming": {
                "<original_function_name>": "unset_bit",
                "param_1": "data",
                "param_2": "bit_pos",
                "**param_1": "**data",
                "*(undefined *)(param_1 + 1)": "*(char *)(data + 1)",
                "FUN_08000f72": "unset_bit_08000f72"
            },
            "code": "int unset_bit_08000f72(uint **data, uint bit_pos){\n                      **data = **data & ~(1 << (bit_pos & 0xff));\n                      *(char *)(data + 1) = 1;\n                      return 0;\n                  }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f72",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "unset_bit_08000f72"
        },
        "FUN_08001d00": {
            "renaming": {
                "FUN_08001d00": "process_data_08001d00",
                "param_1": "data",
                "iVar1": "data_ptr",
                "uVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3",
                "*(uint *)(iVar1 + 0x18)": "*(uint *)(data_ptr + 0x18)",
                "*(uint *)(iVar1 + 0x14)": "*(uint *)(data_ptr + 0x14)",
                "*(uint *)(iVar1 + 4)": "*(uint *)(data_ptr + 4)",
                "*(char *)((int)param_1 + 0x3e)": "*(char *)((int)data + 0x3e)",
                "DAT_08001e60": "DATA_08001e60",
                "DAT_08001e4c": "DATA_08001e4c",
                "DAT_08001e54": "DATA_08001e54",
                "DAT_08001e64": "DATA_08001e64",
                "DAT_08001e5c": "DATA_08001e5c",
                "DAT_08001e58": "DATA_08001e58",
                "DAT_08001e50": "DATA_08001e50"
            },
            "code": "void process_data_08001d00(int *data) {\n  int data_ptr = *data;\n  uint var1 = *(uint *)(data_ptr + 0x18);\n  uint var2 = *(uint *)(data_ptr + 0x14);\n  uint var3 = *(uint *)(data_ptr + 4);\n  char flag = *(char *)((int)data + 0x3e);\n\n  if (flag == '\\x10' || flag == '@') {\n    if ((var2 & 0x10001) == 0 || (var3 & 0x200) == 0) {\n      if ((var2 & DAT_08001e60) == 0 || (var3 & 0x200) == 0) {\n        if ((var2 & DAT_08001e4c) != 0 && (var3 & 0x200) != 0) {\n          execute_task1(data);\n        }\n      }\n      else {\n        execute_task2(data);\n      }\n    }\n    else {\n      execute_task3(data);\n    }\n    if ((var1 & DAT_08001e54) == 0) {\n      if ((var2 & DAT_08001e64) != 0 && (var3 & 0x400) != 0 && (var2 & DAT_08001e5c) == 0) {\n        execute_task4(data);\n        return;\n      }\n      if ((var2 & DAT_08001e5c) != 0 && (var3 & 0x200) != 0) {\n        execute_task5(data);\n        return;\n      }\n    }\n    else {\n      if ((var2 & DAT_08001e58) != 0 && (var3 & 0x400) != 0 && (var2 & DAT_08001e5c) == 0) {\n        execute_task6(data);\n        return;\n      }\n      if ((var2 & DAT_08001e5c) != 0 && (var3 & 0x200) != 0) {\n        execute_task7(data);\n        return;\n      }\n    }\n  }\n  else {\n    if ((var2 & DAT_08001e4c) != 0 && (var3 & 0x200) != 0) {\n      execute_task8();\n      return;\n    }\n    if ((var2 & DAT_08001e50) != 0 && (var3 & 0x200) != 0) {\n      execute_task9(data);\n      return;\n    }\n    if ((var1 & DAT_08001e54) == 0) {\n      if ((var2 & DAT_08001e64) != 0 && (var3 & 0x400) != 0 && (var2 & DAT_08001e5c) == 0) {\n        execute_task10(data);\n        return;\n      }\n      if ((var2 & DAT_08001e5c) != 0 && (var3 & 0x200) != 0) {\n        execute_task11(data);\n      }\n    }\n    else {\n      if ((var2 & DAT_08001e58) != 0 && (var3 & 0x400) != 0 && (var2 & DAT_08001e5c) == 0) {\n        execute_task12(data);\n        return;\n      }\n      if ((var2 & DAT_08001e5c) != 0 && (var3 & 0x200) != 0) {\n        execute_task13(data);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_080015bc",
                "FUN_0800165a",
                "FUN_08001420",
                "FUN_08001256",
                "FUN_08001904",
                "FUN_080011c0",
                "FUN_0800171a",
                "FUN_08001440",
                "FUN_0800160e",
                "FUN_0800124a",
                "FUN_08001864",
                "FUN_08001bfc",
                "FUN_080019a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001d00",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08001d00"
        }
    },
    "used_tokens": 174524,
    "layers": [
        [
            "FUN_080006b4",
            "FUN_080034da",
            "FUN_080035fc",
            "FUN_08003dd0",
            "FUN_08000c8c",
            "FUN_08000a4e",
            "FUN_08004658",
            "FUN_080034f4",
            "FUN_0800355e",
            "FUN_0800573c",
            "FUN_08003e54",
            "FUN_08004fdc",
            "FUN_080056d4",
            "thunk_FUN_0800410c",
            "FUN_080033d8",
            "FUN_08002488",
            "FUN_08004544",
            "FUN_08003cc8",
            "FUN_08000fb4",
            "FUN_08001bfc",
            "FUN_08002d72",
            "FUN_080007f0",
            "FUN_0800562a",
            "FUN_080044d8",
            "FUN_08003df4",
            "FUN_08005400",
            "FUN_08003582",
            "FUN_08005760",
            "FUN_08004678",
            "FUN_08003900",
            "FUN_08000f0c",
            "FUN_08000998",
            "FUN_080055d0",
            "FUN_080056f8",
            "FUN_080054b4",
            "FUN_0800171a",
            "FUN_08004560",
            "FUN_08000a7a",
            "FUN_08004cb0",
            "FUN_08003594",
            "FUN_08002940",
            "FUN_08004204",
            "FUN_08003476",
            "FUN_08004444",
            "FUN_0800346c",
            "FUN_080053a0",
            "FUN_080028d4",
            "FUN_080040ec",
            "FUN_08001460",
            "FUN_08003880",
            "FUN_08002f4c",
            "FUN_080035bc",
            "FUN_080025ec",
            "FUN_08000c4c",
            "FUN_08004a60",
            "FUN_080050d0",
            "FUN_08004978",
            "FUN_08002d0c",
            "FUN_08001904",
            "FUN_08000c64",
            "FUN_08002ffc",
            "FUN_0800387c",
            "FUN_0800351e",
            "FUN_08002f66",
            "FUN_080034b6",
            "FUN_08003eac",
            "FUN_08003e18",
            "FUN_080040fc",
            "FUN_08002dd0",
            "FUN_08004860",
            "FUN_08004622",
            "FUN_08003414",
            "FUN_08005718",
            "FUN_080011c0",
            "FUN_08000b54",
            "FUN_0800376e",
            "FUN_08000d98",
            "FUN_08003f48",
            "FUN_0800340c",
            "FUN_0800352e",
            "FUN_08001ab0",
            "FUN_08001f9c",
            "FUN_08000d8e",
            "FUN_08004638",
            "FUN_080008cc",
            "FUN_08005608",
            "FUN_08002efa",
            "FUN_0800377c",
            "FUN_0800268e",
            "FUN_080008e2",
            "FUN_080045c8",
            "FUN_08003d18",
            "FUN_08004640",
            "FUN_080034ce",
            "FUN_080047fe",
            "FUN_08001256",
            "FUN_08004884",
            "FUN_08004648",
            "FUN_08000600",
            "FUN_080045be",
            "FUN_08000728",
            "FUN_0800354a",
            "FUN_0800124a",
            "FUN_08004094",
            "FUN_080033c8",
            "FUN_080031fc",
            "FUN_08000690",
            "FUN_080054fc",
            "FUN_08001420",
            "FUN_08000de4",
            "FUN_080026ce",
            "FUN_08000218",
            "FUN_0800339c",
            "FUN_08000e60",
            "FUN_0800165a",
            "FUN_08000b04",
            "FUN_0800262c",
            "FUN_08004388",
            "FUN_080051ac",
            "FUN_080052cc",
            "FUN_08002eb2",
            "FUN_08000d3c",
            "FUN_0800316c",
            "FUN_080040d0",
            "FUN_080040d6",
            "FUN_08004a34",
            "FUN_080002d0",
            "FUN_08003f00",
            "FUN_08001440",
            "FUN_08000230",
            "FUN_08001684",
            "FUN_08000f8c",
            "FUN_080001ac",
            "FUN_080040e0",
            "FUN_080048cc",
            "FUN_080040e4",
            "FUN_08003506",
            "FUN_080025e0",
            "FUN_080040e8",
            "FUN_08000a00",
            "FUN_080047c0",
            "FUN_08005374",
            "FUN_08003750",
            "FUN_080014ec",
            "FUN_080048dc",
            "FUN_08003754",
            "FUN_08001578",
            "FUN_08004844",
            "FUN_0800318c",
            "FUN_080047d0",
            "FUN_080040f8",
            "FUN_0800500c",
            "FUN_080023b4",
            "FUN_080011a4",
            "FUN_08001e68",
            "FUN_080019a0",
            "FUN_08003f24",
            "FUN_080046b4",
            "FUN_0800160e",
            "FUN_08000e18",
            "FUN_08003486",
            "FUN_08005662",
            "FUN_080042ac",
            "FUN_08001864",
            "FUN_08000f2c",
            "FUN_08000ec4",
            "FUN_08004338",
            "FUN_080005e0",
            "FUN_080005e4",
            "FUN_0800076c",
            "FUN_08004460",
            "FUN_08001198",
            "FUN_08003138",
            "FUN_08002848",
            "FUN_0800312c",
            "FUN_080028f0",
            "FUN_08000e30",
            "FUN_08000f56",
            "FUN_0800295c",
            "FUN_08003380",
            "FUN_08004110",
            "FUN_08000ee0",
            "FUN_080015bc",
            "FUN_08000f4e",
            "FUN_0800066c",
            "FUN_080042e8",
            "FUN_080038d0",
            "FUN_0800410c",
            "FUN_0800260c",
            "FUN_08004240",
            "FUN_080041bc",
            "FUN_08004364",
            "FUN_08000682",
            "FUN_08000e3c",
            "FUN_08002864",
            "FUN_0800532c",
            "FUN_0800314e",
            "FUN_0800447c",
            "FUN_08004808",
            "FUN_08000f72",
            "FUN_08001d00"
        ]
    ],
    "locked_functions": []
}