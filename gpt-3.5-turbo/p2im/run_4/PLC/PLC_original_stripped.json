{
    "functions": {
        "FUN_080006b4": {
            "renaming": {
                "__thiscall Modbus::FUN_080006b4": "receive_data",
                "this": "instance",
                "bVar1": "buffer_overflow",
                "iVar2": "received_byte",
                "bVar3": "buffer_index",
                "u8txenpin": "transmit_enable_pin",
                "digitalWrite": "set_pin_state",
                "u8BufferSize": "buffer_size",
                "u8serno": "serial_number",
                "port": "serial_port",
                "au8Buffer": "buffer",
                "u16InCnt": "input_count",
                "u16errCnt": "error_count",
                "FUN_080006b4": "receive_data_080006b4"
            },
            "code": "int8_t __thiscall receive_data_080006b4(Modbus *instance)\n{\n    bool buffer_overflow = false;\n    int received_byte;\n    byte buffer_index;\n    if (instance->u8txenpin > 1) {\n        digitalWrite((uint)instance->u8txenpin, 0);\n    }\n    instance->u8BufferSize = 0;\n    if (instance->u8serno < 4) {\n        while (received_byte = (*(instance->port->super_Stream).super_Print._vptr_Print[2])(), received_byte != 0) {\n            buffer_index = instance->u8BufferSize;\n            received_byte = (*(instance->port->super_Stream).super_Print._vptr_Print[3])();\n            instance->au8Buffer[buffer_index] = (uint8_t)received_byte;\n            buffer_index++;\n            instance->u8BufferSize = buffer_index;\n            if (buffer_index > 63) {\n                buffer_overflow = true;\n            }\n        }\n    }\n    if (buffer_overflow) {\n        instance->u16errCnt++;\n        return -3;\n    }\n    instance->u16InCnt++;\n    return instance->u8BufferSize;\n}",
            "called": [
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006b4",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "receive_data_080006b4"
        },
        "FUN_080034da": {
            "renaming": {
                "FUN_080034da": "find_peripheral_by_pin_080034da",
                "pin": "target_pin",
                "map": "pin_map",
                "NC": "NC_value",
                "peripheral": "peripheral_device"
            },
            "code": "void * find_peripheral_by_pin_080034da(PinName_conflict target_pin, PinMap_conflict *pin_map) {\n  while( true ) {\n    if (pin_map->pin == NC) {\n      return (void *)0x0;\n    }\n    if (pin_map->pin == target_pin) break;\n    pin_map++;\n  }\n  return pin_map->peripheral;\n}",
            "called": [
                "pinmap_find_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034da",
            "calling": [
                "pinmap_find_peripheral",
                "pinmap_peripheral"
            ],
            "imported": false,
            "current_name": "find_peripheral_by_pin_080034da"
        },
        "FUN_080035fc": {
            "renaming": {
                "FUN_080035fc": "clear_timer_bit_080035fc",
                "*htim": "*timer",
                "Instance": "timer_instance",
                "DAT_08003718": "TIMER1",
                "TIM_TypeDef": "TIMER_TypeDef",
                "DAT_0800371c": "TIMER3",
                "DAT_08003720": "TIMER4",
                "DAT_08003724": "TIMER5",
                "DAT_08003728": "TIMER6",
                "DAT_0800372c": "TIMER7",
                "DAT_08003730": "TIMER8",
                "DAT_08003734": "TIMER9",
                "DAT_08003738": "TIMER10",
                "DAT_0800373c": "TIMER11",
                "DAT_08003740": "TIMER12",
                "DAT_08003744": "TIMER13",
                "DAT_08003748": "TIMER14",
                "uint": "uint32_t",
                "*(uint *)(DAT_0800374c + 0x44)": "*timer_reg",
                "*(uint *)(DAT_0800374c + 0x40)": "*(timer_reg + 0x10)"
            },
            "code": "void clear_timer_bit_080035fc(TIM_HandleTypeDef *timer)\n{\n    uint32_t *(uint *)(DAT_0800374c + 0x44) = (uint32_t *)DAT_0800374c;\n    if (timer->Instance == DAT_08003718) {\n        *(uint *)(DAT_0800374c + 0x44) &= 0xfffffffe;\n    }\n    if (timer->Instance == (TIM_TypeDef *)0x40000000) {\n        *(uint *)(DAT_0800374c + 0x40) &= 0xfffffffe;\n    }\n    if (timer->Instance == DAT_0800371c) {\n        *(uint *)(DAT_0800374c + 0x40) &= 0xfffffffd;\n    }\n    if (timer->Instance == DAT_08003720) {\n        *(uint *)(DAT_0800374c + 0x40) &= 0xfffffffb;\n    }\n    if (timer->Instance == DAT_08003724) {\n        *(uint *)(DAT_0800374c + 0x40) &= 0xfffffff7;\n    }\n    if (timer->Instance == DAT_08003728) {\n        *(uint *)(DAT_0800374c + 0x40) &= 0xffffffef;\n    }\n    if (timer->Instance == DAT_0800372c) {\n        *(uint *)(DAT_0800374c + 0x40) &= 0xffffffdf;\n    }\n    if (timer->Instance == DAT_08003730) {\n        *(uint *)(DAT_0800374c + 0x44) &= 0xfffffffd;\n    }\n    if (timer->Instance == DAT_08003734) {\n        *(uint *)(DAT_0800374c + 0x44) &= 0xfffeffff;\n    }\n    if (timer->Instance == DAT_08003738) {\n        *(uint *)(DAT_0800374c + 0x44) &= 0xfffdffff;\n    }\n    if (timer->Instance == DAT_0800373c) {\n        *(uint *)(DAT_0800374c + 0x44) &= 0xfffbffff;\n    }\n    if (timer->Instance == DAT_08003740) {\n        *(uint *)(DAT_0800374c + 0x40) &= 0xffffffbf;\n    }\n    if (timer->Instance == DAT_08003744) {\n        *(uint *)(DAT_0800374c + 0x40) &= 0xffffff7f;\n    }\n    if (timer->Instance == DAT_08003748) {\n        *(uint *)(DAT_0800374c + 0x40) &= 0xfffffeff;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fc",
            "calling": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "imported": false,
            "current_name": "clear_timer_bit_080035fc"
        },
        "FUN_08003dd0": {
            "renaming": {
                "FUN_08003dd0": "is_uart_transmit_complete_08003dd0",
                "obj": "serial",
                "HVar1": "state",
                "PTR_uart_handlers_08003df0": "PTR_uart_handlers_08003df0",
                "uint": "uint",
                "HAL_UART_StateTypeDef": "HAL_UART_StateTypeDef"
            },
            "code": "bool is_uart_transmit_complete_08003dd0(serial_t *serial) {\n    HAL_UART_StateTypeDef state = HAL_UART_GetState(*((UART_HandleTypeDef **) (PTR_uart_handlers_08003df0 + (uint)serial->index * 4)));\n    return (state & (HAL_UART_STATE_BUSY_TX | HAL_UART_STATE_BUSY_TX_RX)) == (HAL_UART_STATE_BUSY_TX | HAL_UART_STATE_BUSY_TX_RX);\n}",
            "called": [
                "HAL_UART_GetState"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003dd0",
            "calling": [
                "uart_getc",
                "uart_attach_rx_callback"
            ],
            "imported": false,
            "current_name": "is_uart_transmit_complete_08003dd0"
        },
        "FUN_08000c8c": {
            "renaming": {
                "FUN_08000c8c": "initialize_clocks_08000c8c",
                "DAT_08000d30": "ptr_data_1",
                "DAT_08000d34": "ptr_data_2",
                "DAT_08000d38": "ptr_data_3",
                "RCC_OscInitStruct": "osc_init",
                "RCC_ClkInitStruct": "clk_init",
                "RCC_OscInitStruct_conflict": "osc_init_conflict",
                "RCC_ClkInitStruct_conflict": "clk_init_conflict",
                "tmpreg": "temp_reg_1",
                "tmpreg_1": "temp_reg_2",
                "uVar1": "hclk_freq",
                "flash_latency": "flash_latency",
                "ahbclk_divider": "ahbclk_divider",
                "apb1clk_divider": "apb1clk_divider",
                "apb2clk_divider": "apb2clk_divider",
                "systick_clk_source": "systick_clk_source"
            },
            "code": "void initialize_clocks_08000c8c(void)\n{\n  uint32_t hclk_freq, systick_clk_source;\n  uint32_t ahbclk_divider = 0, apb1clk_divider = 0x1400, apb2clk_divider = 0x1000;\n  uint32_t flash_latency;\n  RCC_OscInitTypeDef osc_init;\n  RCC_ClkInitTypeDef clk_init;\n  // Enable HSE and wait until it's ready\n  RCC_OscInitTypeDef osc_init = { .OscillatorType = RCC_OSCILLATORTYPE_HSE, .HSEState = RCC_HSE_ON, .PLL.PLLState = RCC_PLL_ON, .PLL.PLLSource = RCC_PLLSOURCE_HSE, .PLL.PLLM = 8, .PLL.PLLN = 336, .PLL.PLLP = RCC_PLLP_DIV2, .PLL.PLLQ = 7 };\n  HAL_RCC_OscConfig(&osc_init);\n  // Enable OverDrive\n  HAL_PWREx_EnableOverDrive();\n  // Configure the PLL to generate the system clock\n  flash_latency = HAL_RCC_GetFlashLatency(3);\n  clk_init = { .ClockType = RCC_CLOCKTYPE_SYSCLK, .SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK, .AHBCLKDivider = ahbclk_divider, .APB1CLKDivider = apb1clk_divider, .APB2CLKDivider = apb2clk_divider };\n  HAL_RCC_ClockConfig(&clk_init, flash_latency);\n  // Configure the SysTick timer\n  hclk_freq = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(hclk_freq / 1000);\n  systick_clk_source = SYSTICK_CLKSOURCE_HCLK;\n  HAL_SYSTICK_CLKSourceConfig(systick_clk_source);\n  // Set the SysTick interrupt priority\n  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);\n}\n",
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_SYSTICK_CLKSourceConfig",
                "HAL_SYSTICK_Config",
                "HAL_RCC_ClockConfig",
                "HAL_RCC_OscConfig",
                "HAL_PWREx_EnableOverDrive",
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c8c",
            "calling": [
                "hw_config_init"
            ],
            "imported": false,
            "current_name": "initialize_clocks_08000c8c"
        },
        "FUN_08000a4e": {
            "renaming": {
                "FUN_08000a4e": "set_register_value_08000a4e",
                "this": "modbus_instance",
                "regs": "register_array",
                "u8size": "array_size",
                "uVar1": "register_address",
                "uVar2": "register_value"
            },
            "code": "int8_t __thiscall Modbus::set_register_value_08000a4e(Modbus *modbus_instance, uint16_t *register_array, uint8_t array_size) {\n    uint16_t register_address = makeWord(modbus_instance->au8Buffer[2], modbus_instance->au8Buffer[3]);\n    uint16_t register_value = makeWord(modbus_instance->au8Buffer[4], modbus_instance->au8Buffer[5]);\n    register_array[(byte)register_address] = register_value;\n    modbus_instance->u8BufferSize = '\\x06';\n    sendTxBuffer(modbus_instance);\n    return '\b';\n}",
            "called": [
                "sendTxBuffer",
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a4e",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "set_register_value_08000a4e"
        },
        "FUN_08004774": {
            "renaming": {
                "FUN_08004774": "handle_GPIO_EXTI_interrupt_08004774"
            },
            "code": "void handle_GPIO_EXTI_interrupt_08004774(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(4);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004774",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_EXTI_interrupt_08004774"
        },
        "FUN_08004658": {
            "renaming": {
                "FUN_08004658": "runProgram_08004658",
                "initVariant": "initializeVariant",
                "setup": "setupProgram",
                "loop": "runLoop",
                "serialEventRun": "runSerialEvent"
            },
            "code": "int runProgram_08004658(void)\n{\n  initializeVariant();\n  setupProgram();\n  do {\n    do {\n      runLoop();\n    } while (DAT_08004674 == 0);\n    runSerialEvent();\n  } while( true );\n}",
            "called": [
                "loop",
                "initVariant",
                "setup",
                "serialEventRun"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004658",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "runProgram_08004658"
        },
        "FUN_080034f4": {
            "renaming": {
                "FUN_080034f4": "find_peripheral_by_pin_080034f4",
                "pin": "pin_name",
                "map": "pin_map",
                "pvVar1": "peripheral"
            },
            "code": "void * find_peripheral_by_pin_080034f4(PinName_conflict pin, PinMap_conflict *map)\n{\n  void *peripheral;\n  if (pin != NC) {\n    peripheral = pinmap_find_peripheral(pin, map);\n    return peripheral;\n  }\n  return (void *)0x0;\n}",
            "called": [
                "pinmap_find_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034f4",
            "calling": [
                "uart_debug_init",
                "uart_init",
                "dac_stop",
                "uart_debug_write",
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "find_peripheral_by_pin_080034f4"
        },
        "FUN_0800476a": {
            "renaming": {
                "FUN_0800476a": "handle_GPIO_interrupt_0800476a"
            },
            "code": "void handle_GPIO_interrupt_0800476a(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(2);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800476a",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_interrupt_0800476a"
        },
        "FUN_0800355e": {
            "renaming": {
                "FUN_0800355e": "validate_pin_0800355e",
                "pin": "pin_name",
                "map": "pin_map",
                "NC": "not_connected",
                "bool": "_Bool"
            },
            "code": "_Bool validate_pin_0800355e(PinName_conflict pin, PinMap_conflict *map) {\n  if (pin == NC) {\n    return false;\n  }\n  while (true) {\n    if (map->pin == NC) {\n      return false;\n    }\n    if (pin == map->pin) {\n      break;\n    }\n    map = map + 1;\n  }\n  return true;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800355e",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "validate_pin_0800355e"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "read_file_0800573c",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "error_ptr",
                "iVar2": "read_result"
            },
            "code": "void read_file_0800573c(int *error_code, int file_descriptor, char *buffer, int buffer_size)\n{\n    undefined *error_ptr;\n    int read_result;\n\n    error_ptr = PTR_errno_0800575c;\n    *(undefined4 *)PTR_errno_0800575c = 0;\n    read_result = _read(file_descriptor, buffer, buffer_size);\n    if ((read_result == -1) && (*(int *)error_ptr != 0)) {\n        *error_code = *(int *)error_ptr;\n    }\n    return;\n}",
            "called": [
                "_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "__sread"
            ],
            "imported": false,
            "current_name": "read_file_0800573c"
        },
        "FUN_08003e54": {
            "renaming": {
                "FUN_08003e54": "setup_serial_rx_callback_08003e54",
                "obj": "serial_obj",
                "callback": "rx_callback_func_ptr",
                "bVar1": "index",
                "uVar2": "rx_active",
                "PTR_rx_callback_08003ea0": "rx_callback_func_ptr_array",
                "PTR_rx_callback_obj_08003ea4": "serial_obj_array",
                "obj->index": "serial_obj->index",
                "obj->irq": "serial_obj->irq",
                "PTR_uart_handlers_08003ea8": "uart_handler_array",
                "*(serial_t **)": "&serial_obj",
                "*(UART_HandleTypeDef **)": "&uart_handler"
            },
            "code": "void setup_serial_rx_callback_08003e54(serial_t *serial_obj, _func_void_serial_t_ptr *rx_callback_func_ptr) {\\n\"\n                     \"    if (serial_obj != NULL) {\\n\"\n                     \"        uint8_t rx_active = serial_rx_active(serial_obj);\\n\"\n                     \"        if (rx_active == 0) {\\n\"\n                     \"            uint8_t index = serial_obj->index;\\n\"\n                     \"            PTR_rx_callback_08003ea0[index] = rx_callback_func_ptr;\\n\"\n                     \"            PTR_rx_callback_obj_08003ea4[index] = serial_obj;\\n\"\n                     \"            HAL_NVIC_SetPriority(serial_obj->irq, 0, 1);\\n\"\n                     \"            HAL_NVIC_EnableIRQ(serial_obj->irq);\\n\"\n                     \"            HAL_UART_Receive_IT(PTR_uart_handlers_08003ea8[index], &serial_obj->recv, 1);\\n\"\n                     \"        }\\n\"\n                     \"    }\\n\"\n                     \"}",
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_UART_Receive_IT",
                "HAL_NVIC_EnableIRQ",
                "serial_rx_active"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e54",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "setup_serial_rx_callback_08003e54"
        },
        "FUN_08004fdc": {
            "renaming": {
                "FUN_08004fdc": "print_formatted_string_08004fdc",
                "__format": "format",
                "in_r1": "arg1",
                "in_r2": "arg2",
                "in_r3": "arg3",
                "pcVar2": "format_string",
                "uStack_c": "unused_var_1",
                "uStack_8": "unused_var_2",
                "uStack_4": "unused_var_3",
                "PTR__impure_ptr_08005008": "PTR__impure_ptr_08005008",
                "_vfFUN_08004fdc_r": "_vfFUN_08004fdc_r"
            },
            "code": "int print_formatted_string_08004fdc(char *format, ...) { \\n\\\n  int impure_ptr = *(int *)PTR__impure_ptr_08005008; \\n\\\n  char *format_string = format; \\n\\\n  undefined4 arg1; \\n\\\n  undefined4 arg2; \\n\\\n  undefined4 arg3; \\n\\\n  undefined4 uStack_c; \\n\\\n  undefined4 uStack_8; \\n\\\n  undefined4 uStack_4; \\n\\\n  if ((impure_ptr != 0) && (*(int *)(impure_ptr + 0x18) == 0)) { \\n\\\n    __sinit(impure_ptr); \\n\\\n  } \\n\\\n  int result = _vfprint_formatted_string_08004fdc_r(impure_ptr, *(undefined4 *)(impure_ptr + 8), format, &arg1, format_string, &arg2); \\n\\\n  return result; \\n\\\n}",
            "called": [
                "_vfiprintf_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fdc",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "print_formatted_string_08004fdc"
        },
        "FUN_080056d4": {
            "renaming": {
                "FUN_080056d4": "get_file_status_080056d4",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "file_status",
                "puVar1": "error_ptr",
                "iVar2": "status"
            },
            "code": "void get_file_status_080056d4(int *error_code, int file_descriptor, stat *file_status) {\n  undefined *error_ptr;\n  int status;\n  error_ptr = PTR_errno_080056f4;\n  *(undefined4 *)PTR_errno_080056f4 = 0;\n  status = _fstat(file_descriptor, file_status);\n  if ((status == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n  }\n  return;\n}",
            "called": [
                "_fstat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d4",
            "calling": [
                "__swhatbuf_r"
            ],
            "imported": false,
            "current_name": "get_file_status_080056d4"
        },
        "FUN_080033d8": {
            "renaming": {
                "FUN_080033d8": "stop_and_reset_dac_channel_080033d8",
                "pin": "conflicting_pin",
                "DacHandle": "dac_handle",
                "Channel": "channel",
                "DAC_HandleTypeDef": "DAC_HandleTypeDef",
                "DAC_TypeDef": "DAC_TypeDef",
                "PTR_PinMap_DAC_08003408": "PTR_PinMap_DAC_08003408",
                "get_dac_channel": "get_dac_channel",
                "HAL_DAC_Stop": "HAL_DAC_Stop",
                "HAL_DAC_DeInit": "HAL_DAC_DeInit"
            },
            "code": "void stop_and_reset_dac_channel_080033d8(PinName_conflict pin)\n{\n  uint32_t channel;\n  DAC_HandleTypeDef dac_handle;\n  \n  dac_handle.Instance = (DAC_TypeDef *)pinmap_peripheral(pin, (PinMap_conflict *)PTR_PinMap_DAC_08003408);\n  if ((dac_handle.Instance != (DAC_TypeDef *)0x0) && ((channel = get_dac_channel(pin), channel == 0 || (channel == 0x10)))) {\n    HAL_DAC_Stop(&dac_handle, channel);\n    HAL_DAC_DeInit(&dac_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_DAC_Stop",
                "HAL_DAC_DeInit",
                "get_dac_channel",
                "pinmap_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033d8",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "stop_and_reset_dac_channel_080033d8"
        },
        "FUN_080029c8": {
            "renaming": {
                "FUN_080029c8": "FUNC_080029c8"
            },
            "code": "\nvoid FUNC_080029c8(UART_HandleTypeDef *huart)\n\n{\n  ulonglong uVar1;\n  uint uVar2;\n  uint32_t uVar3;\n  uint32_t uVar4;\n  uint32_t uVar5;\n  uint32_t uVar6;\n  uint32_t uVar7;\n  uint32_t uVar8;\n  uint32_t uVar9;\n  uint32_t uVar10;\n  uint32_t uVar11;\n  USART_TypeDef *pUVar12;\n  \n  huart->Instance->CR2 = huart->Instance->CR2 & 0xffffcfff | (huart->Init).StopBits;\n  huart->Instance->CR1 =\n       huart->Instance->CR1 & 0xffff69f3 |\n       (huart->Init).WordLength | (huart->Init).Parity | (huart->Init).Mode |\n       (huart->Init).OverSampling;\n  huart->Instance->CR3 = huart->Instance->CR3 & 0xfffffcff | (huart->Init).HwFlowCtl;\n  if ((huart->Init).OverSampling == 0x8000) {\n    pUVar12 = huart->Instance;\n    if ((pUVar12 != (USART_TypeDef *)0x40011000) && (pUVar12 != (USART_TypeDef *)0x40011400)) {\n      uVar3 = HAL_RCC_GetPCLK1Freq();\n      uVar2 = DAT_08002d08;\n      uVar8 = (huart->Init).BaudRate;\n      uVar1 = (ulonglong)DAT_08002d08;\n      uVar4 = HAL_RCC_GetPCLK1Freq();\n      uVar9 = (huart->Init).BaudRate;\n      uVar5 = HAL_RCC_GetPCLK1Freq();\n      uVar10 = (huart->Init).BaudRate;\n      uVar6 = HAL_RCC_GetPCLK1Freq();\n      uVar11 = (huart->Init).BaudRate;\n      uVar7 = HAL_RCC_GetPCLK1Freq();\n      pUVar12->BRR = ((uint)((int)((ulonglong)uVar2 *\n                                   (ulonglong)\n                                   (((uVar6 * 0x19) / (uVar11 << 1) +\n                                    (uint)((ulonglong)uVar2 *\n                                           ((ulonglong)(uVar7 * 0x19) /\n                                           (ulonglong)((huart->Init).BaudRate << 1)) >> 0x25) * -100\n                                    ) * 8 + 0x32) >> 0x20) << 0x18) >> 0x1d) +\n                     ((uint)((ulonglong)uVar2 *\n                             (ulonglong)\n                             (((uVar4 * 0x19) / (uVar9 << 1) +\n                              (uint)((ulonglong)uVar2 *\n                                     ((ulonglong)(uVar5 * 0x19) / (ulonglong)(uVar10 << 1)) >> 0x25)\n                              * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n                     (uint)(uVar1 * ((ulonglong)(uVar3 * 0x19) / (ulonglong)(uVar8 << 1)) >> 0x25) *\n                     0x10;\n      return;\n    }\n    uVar3 = HAL_RCC_GetPCLK2Freq();\n    uVar2 = DAT_08002d08;\n    uVar8 = (huart->Init).BaudRate;\n    uVar1 = (ulonglong)DAT_08002d08;\n    uVar4 = HAL_RCC_GetPCLK2Freq();\n    uVar9 = (huart->Init).BaudRate;\n    uVar5 = HAL_RCC_GetPCLK2Freq();\n    uVar10 = (huart->Init).BaudRate;\n    uVar6 = HAL_RCC_GetPCLK2Freq();\n    uVar11 = (huart->Init).BaudRate;\n    uVar7 = HAL_RCC_GetPCLK2Freq();\n    pUVar12->BRR = ((uint)((int)((ulonglong)uVar2 *\n                                 (ulonglong)\n                                 (((uVar6 * 0x19) / (uVar11 << 1) +\n                                  (uint)((ulonglong)uVar2 *\n                                         ((ulonglong)(uVar7 * 0x19) /\n                                         (ulonglong)((huart->Init).BaudRate << 1)) >> 0x25) * -100)\n                                  * 8 + 0x32) >> 0x20) << 0x18) >> 0x1d) +\n                   ((uint)((ulonglong)uVar2 *\n                           (ulonglong)\n                           (((uVar4 * 0x19) / (uVar9 << 1) +\n                            (uint)((ulonglong)uVar2 *\n                                   ((ulonglong)(uVar5 * 0x19) / (ulonglong)(uVar10 << 1)) >> 0x25) *\n                            -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n                   (uint)(uVar1 * ((ulonglong)(uVar3 * 0x19) / (ulonglong)(uVar8 << 1)) >> 0x25) *\n                   0x10;\n    return;\n  }\n  pUVar12 = huart->Instance;\n  if ((pUVar12 != DAT_08002d04) && (pUVar12 != (USART_TypeDef *)&DAT_08002d04[0x24].CR2)) {\n    uVar3 = HAL_RCC_GetPCLK1Freq();\n    uVar2 = DAT_08002d08;\n    uVar8 = (huart->Init).BaudRate;\n    uVar1 = (ulonglong)DAT_08002d08;\n    uVar4 = HAL_RCC_GetPCLK1Freq();\n    uVar9 = (huart->Init).BaudRate;\n    uVar5 = HAL_RCC_GetPCLK1Freq();\n    uVar10 = (huart->Init).BaudRate;\n    uVar6 = HAL_RCC_GetPCLK1Freq();\n    uVar11 = (huart->Init).BaudRate;\n    uVar7 = HAL_RCC_GetPCLK1Freq();\n    pUVar12->BRR = ((uint)((int)((ulonglong)uVar2 *\n                                 (ulonglong)\n                                 (((uVar6 * 0x19) / (uVar11 << 2) +\n                                  (uint)((ulonglong)uVar2 *\n                                         ((ulonglong)(uVar7 * 0x19) /\n                                         (ulonglong)((huart->Init).BaudRate << 2)) >> 0x25) * -100)\n                                  * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n                   ((uint)((ulonglong)uVar2 *\n                           (ulonglong)\n                           (((uVar4 * 0x19) / (uVar9 << 2) +\n                            (uint)((ulonglong)uVar2 *\n                                   ((ulonglong)(uVar5 * 0x19) / (ulonglong)(uVar10 << 2)) >> 0x25) *\n                            -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n                   (uint)(uVar1 * ((ulonglong)(uVar3 * 0x19) / (ulonglong)(uVar8 << 2)) >> 0x25) *\n                   0x10;\n    return;\n  }\n  uVar3 = HAL_RCC_GetPCLK2Freq();\n  uVar2 = DAT_08002d08;\n  uVar8 = (huart->Init).BaudRate;\n  uVar1 = (ulonglong)DAT_08002d08;\n  uVar4 = HAL_RCC_GetPCLK2Freq();\n  uVar9 = (huart->Init).BaudRate;\n  uVar5 = HAL_RCC_GetPCLK2Freq();\n  uVar10 = (huart->Init).BaudRate;\n  uVar6 = HAL_RCC_GetPCLK2Freq();\n  uVar11 = (huart->Init).BaudRate;\n  uVar7 = HAL_RCC_GetPCLK2Freq();\n  pUVar12->BRR = ((uint)((int)((ulonglong)uVar2 *\n                               (ulonglong)\n                               (((uVar6 * 0x19) / (uVar11 << 2) +\n                                (uint)((ulonglong)uVar2 *\n                                       ((ulonglong)(uVar7 * 0x19) /\n                                       (ulonglong)((huart->Init).BaudRate << 2)) >> 0x25) * -100) *\n                                0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n                 ((uint)((ulonglong)uVar2 *\n                         (ulonglong)\n                         (((uVar4 * 0x19) / (uVar9 << 2) +\n                          (uint)((ulonglong)uVar2 *\n                                 ((ulonglong)(uVar5 * 0x19) / (ulonglong)(uVar10 << 2)) >> 0x25) *\n                          -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n                 (uint)(uVar1 * ((ulonglong)(uVar3 * 0x19) / (ulonglong)(uVar8 << 2)) >> 0x25) *\n                 0x10;\n  return;\n}\n\n",
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080029c8",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "FUNC_080029c8"
        },
        "FUN_08002488": {
            "renaming": {
                "FUN_08002488": "configureSystemClock_08002488",
                "RCC_ClkInitStruct_conflict": "clock_init_struct",
                "FLatency": "latency",
                "puVar1": "rcc_cfgr_register",
                "uVar2": "sysclk_frequency",
                "uVar3": "tick_now",
                "uVar4": "sysclk_source"
            },
            "code": "HAL_StatusTypeDef configureSystemClock_08002488(RCC_ClkInitTypeDef_conflict *clock_init_struct, uint32_t latency) {\n  uint32_t *rcc_cfgr_register = (uint32_t *)0x40023808;\n  if (clock_init_struct == NULL) {\n    return HAL_ERROR;\n  }\n  if (((*rcc_cfgr_register & 0xf) < latency) &&\n     (*(char *)rcc_cfgr_register = (char)latency, latency != (*rcc_cfgr_register & 0xf))) {\n    return HAL_ERROR;\n  }\n  if ((clock_init_struct->ClockType & RCC_CLOCKTYPE_HCLK) != 0) {\n    if ((clock_init_struct->ClockType & RCC_CLOCKTYPE_SYSCLK) != 0) {\n      rcc_cfgr_register[2] = rcc_cfgr_register[2] | 0x1c00;\n    }\n    if ((clock_init_struct->ClockType & RCC_CLOCKTYPE_PCLK1) != 0) {\n      rcc_cfgr_register[2] = rcc_cfgr_register[2] | 0xe000;\n    }\n    rcc_cfgr_register[2] = rcc_cfgr_register[2] & 0xffffff0f | clock_init_struct->AHBCLKDivider;\n  }\n  if ((clock_init_struct->ClockType & RCC_CLOCKTYPE_SYSCLK) != 0) {\n    uint32_t sysclk_source = clock_init_struct->SYSCLKSource;\n    if (sysclk_source == RCC_SYSCLKSOURCE_PLLCLK) {\n      if ((*rcc_cfgr_register & RCC_CFGR_SWS_PLL) == 0) {\n        return HAL_ERROR;\n      }\n    }\n    else if (sysclk_source - RCC_SYSCLKSOURCE_HSE < 2) {\n      if ((*rcc_cfgr_register & RCC_CFGR_SWS_HSE) == 0) {\n        return HAL_ERROR;\n      }\n    }\n    else if ((*rcc_cfgr_register & RCC_CFGR_SWS_HSI) == 0) {\n      return HAL_ERROR;\n    }\n    rcc_cfgr_register[2] = sysclk_source | rcc_cfgr_register[2] & 0xfffffffc;\n    uint32_t tick_start = HAL_GetTick();\n    while ((rcc_cfgr_register[2] & RCC_CFGR_SWS) != clock_init_struct->SYSCLKSource << 2) {\n      uint32_t tick_now = HAL_GetTick();\n      if (5000 < tick_now - tick_start) {\n        return HAL_TIMEOUT;\n      }\n    }\n  }\n  if ((latency < (*rcc_cfgr_register & 0xf)) &&\n     (*(char *)rcc_cfgr_register = (char)latency, latency != (*rcc_cfgr_register & 0xf))) {\n    return HAL_ERROR;\n  }\n  if ((clock_init_struct->ClockType & RCC_CLOCKTYPE_PCLK1) != 0) {\n    rcc_cfgr_register[2] = rcc_cfgr_register[2] & 0xffffe3ff | clock_init_struct->APB1CLKDivider;\n  }\n  if ((clock_init_struct->ClockType & RCC_CLOCKTYPE_PCLK2) != 0) {\n    rcc_cfgr_register[2] = rcc_cfgr_register[2] & 0xffff1fff | clock_init_struct->APB2CLKDivider << 3;\n  }\n  uint32_t sysclk_frequency = HAL_RCC_GetSysClockFreq();\n  *(uint32_t *)SystemCoreClock =\n       sysclk_frequency >> AHBPrescTable[(*rcc_cfgr_register & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];\n  HAL_InitTick(0xf);\n  return HAL_OK;\n}",
            "called": [
                "HAL_RCC_GetSysClockFreq",
                "HAL_GetTick",
                "HAL_InitTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002488",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configureSystemClock_08002488"
        },
        "FUN_08004788": {
            "renaming": {
                "FUN_08004788": "handle_GPIO_EXTI_IRQ_for_pin_16_08004788",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void handle_GPIO_EXTI_IRQ_for_pin_16_08004788(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(0x10);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004788",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_EXTI_IRQ_for_pin_16_08004788"
        },
        "FUN_08004544": {
            "renaming": {
                "FUN_08004544::FUN_08004544": "IPAddressFactory::create",
                "this": "address",
                "first_octet": "first_octet",
                "second_octet": "second_octet",
                "third_octet": "third_octet",
                "fourth_octet": "fourth_octet",
                "_vptr_Printable": "_vptr_Printable",
                "_address": "address",
                "FUN_08004544": "print_08004544"
            },
            "code": "class Printable {\npublic:\n    virtual void print_08004544() const = 0;\n};\nclass IP_Address : public Printable {\npublic:\n    uint8_t bytes[4];\n    virtual void print_08004544() const {\n        print_08004544f(\"%d.%d.%d.%d\", bytes[0], bytes[1], bytes[2], bytes[3]);\n    }\n};\nclass IPAddressFactory {\npublic:\n    static IP_Address create(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet) {\n        IP_Address address;\n        address.bytes[0] = first_octet;\n        address.bytes[1] = second_octet;\n        address.bytes[2] = third_octet;\n        address.bytes[3] = fourth_octet;\n        return address;\n    }\n};",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004544",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "print_08004544"
        },
        "FUN_08003cc8": {
            "renaming": {
                "FUN_08003cc8": "initialize_uart_debug_08003cc8",
                "pin": "debug_tx_pin",
                "obj": "serial_debug_obj",
                "PVar1": "debug_rx_pin",
                "pvVar2": "peripheral"
            },
            "code": "void initialize_uart_debug_08003cc8(void)\n{\n  PinName_conflict debug_tx_pin = *(PinName_conflict *)(PTR_digitalPin_08003d08 + 0x9a);\n  void *peripheral = pinmap_peripheral(debug_tx_pin, (PinMap_conflict *)PTR_PinMap_UART_TX_08003d0c);\n  if (peripheral != (void *)0x0) {\n    PinName_conflict debug_rx_pin = pinmap_pin(peripheral, (PinMap_conflict *)PTR_PinMap_UART_RX_08003d10);\n    undefined *serial_debug_obj = PTR_serial_debug_08003d14;\n    *(PinName_conflict *)(serial_debug_obj + 0x5a) = debug_rx_pin;\n    *(PinName_conflict *)(serial_debug_obj + 0x58) = debug_tx_pin;\n    *(undefined4 *)(serial_debug_obj + 0x48) = 0x2580;\n    *(undefined4 *)(serial_debug_obj + 0x54) = 0;\n    *(undefined4 *)(serial_debug_obj + 0x4c) = 0;\n    *(undefined4 *)(serial_debug_obj + 0x50) = 0;\n    uart_init((serial_t *)serial_debug_obj);\n  }\n  return;\n}",
            "called": [
                "pinmap_pin",
                "uart_init",
                "pinmap_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003cc8",
            "calling": [
                "uart_debug_write"
            ],
            "imported": false,
            "current_name": "initialize_uart_debug_08003cc8"
        },
        "FUN_08002d70": {
            "renaming": {
                "FUN_08002d70": "do_nothing_08002d70"
            },
            "code": "\nvoid do_nothing_08002d70(UART_HandleTypeDef *huart)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d70",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08002d70"
        },
        "FUN_08000fb4": {
            "renaming": {
                "FUN_08000fb4": "configure_gpio_pins_08000fb4",
                "GPIOx": "GPIO",
                "GPIO_Init": "GPIO_InitTypeDef",
                "puVar1": "temp_ptr_1",
                "puVar2": "temp_ptr_2",
                "uVar3": "mask",
                "uVar4": "pin_mask",
                "uVar5": "pin",
                "uVar6": "pin_masked",
                "uVar7": "mode",
                "uVar9": "mode_shift",
                "iVar8": "port_index",
                "iVar10": "config_shift",
                "tmpreg": "temp_reg",
                "DAT_0800118c": "EXTI",
                "DAT_08001184": "SYSCFG"
            },
            "code": "void configure_gpio_pins_08000fb4(GPIO_TypeDef *GPIO, GPIO_InitTypeDef *GPIO_Init){\n    uint32_t pin_mask;\n    uint32_t mode_mask;\n    uint32_t speed_mask;\n    uint32_t pull_mask;\n    uint32_t alternate_mask;\n    for (int pin = 0; pin < 16; pin++) {\n        pin_mask = 1 << pin;\n        if (pin_mask & GPIO_Init->Pin) {\n            if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) {\n                int af_shift = (pin & 7) << 2;\n                GPIO->AFR[pin >> 3] = GPIO->AFR[pin >> 3] & ~(0xf << af_shift) | GPIO_Init->Alternate << af_shift;\n            }\n            int mode_shift = pin << 1;\n            mode_mask = ~(3 << mode_shift);\n            GPIO->MODER = GPIO->MODER & mode_mask | (GPIO_Init->Mode & 3) << mode_shift;\n            if (((GPIO_Init->Mode - 1 < 2) || (GPIO_Init->Mode == GPIO_MODE_ANALOG)) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) {\n                speed_mask = ~(3 << mode_shift);\n                GPIO->OSPEEDR = GPIO->OSPEEDR & speed_mask | GPIO_Init->Speed << mode_shift;\n                GPIO->OTYPER = GPIO->OTYPER & ~pin_mask | ((GPIO_Init->Mode << 0x1b) >> 0x1f) << pin;\n            }\n            pull_mask = mode_mask;\n            GPIO->PUPDR = pull_mask & GPIO->PUPDR | GPIO_Init->Pull << mode_shift;\n            if ((GPIO_Init->Mode & GPIO_MODE_IT_RISING_FALLING) != 0) {\n                DAT_0800118c->RTSR = DAT_0800118c->RTSR & ~pin_mask | ((GPIO_Init->Mode & GPIO_MODE_IT_RISING) != 0) << pin;\n                DAT_0800118c->FTSR = DAT_0800118c->FTSR & ~pin_mask | ((GPIO_Init->Mode & GPIO_MODE_IT_FALLING) != 0) << pin;\n                int port_index = (int)(GPIO - GPIOA) / sizeof(GPIO_TypeDef);\n                int config_index = (pin >> 2) + 2;\n                int config_shift = (pin & 3) << 2;\n                DAT_08001184->DAT_0800118cCR[config_index] = DAT_08001184->DAT_0800118cCR[config_index] & ~(0xf << config_shift) | port_index << config_shift;\n            }\n        }\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fb4",
            "calling": [
                "digital_io_init",
                "uart_init"
            ],
            "imported": false,
            "current_name": "configure_gpio_pins_08000fb4"
        },
        "FUN_08001bfc": {
            "renaming": {
                "FUN_08001bfc": "handle_i2c_state_08001bfc",
                "*hi2c": "*i2c_handle",
                "HVar1": "i2c_state",
                "*pIVar2": "*i2c_instance",
                "*puVar3": "*buffer_ptr",
                "tmpreg": "tmpreg"
            },
            "code": "HAL_StatusTypeDef handle_i2c_state_08001bfc(I2C_HandleTypeDef *i2c_handle) {\n  HAL_I2C_StateTypeDef i2c_state;\n  I2C_TypeDef *i2c_instance;\n  uint8_t *buffer_ptr;\n  uint32_t tmpreg;\n  i2c_state = i2c_handle->State;\n  i2c_handle->Instance->CR2 &= 0xfffff8ff;\n  i2c_handle->Instance->CR1 |= 1;\n  i2c_handle->Instance->CR1 &= 0xfffffbff;\n  i2c_instance = i2c_handle->Instance;\n  if ((i2c_instance->CR2 & 0x800) != 0) {\n    if ((i2c_handle->State == HAL_I2C_STATE_BUSY_RX) || (i2c_handle->State == HAL_I2C_STATE_BUSY_RX_LISTEN)) {\n      i2c_handle->XferCount = (uint16_t)i2c_handle->hdmarx->Instance->NDTR;\n    }\n    else {\n      i2c_handle->XferCount = (uint16_t)i2c_handle->hdmatx->Instance->NDTR;\n    }\n  }\n  if (i2c_handle->XferCount != 0) {\n    if ((i2c_instance->SR1 & 4) != 0) {\n      buffer_ptr = i2c_handle->pBuffPtr;\n      i2c_handle->pBuffPtr = buffer_ptr + 1;\n      *buffer_ptr = (uint8_t)i2c_instance->DR;\n      i2c_handle->XferCount--;\n    }\n    if ((i2c_handle->Instance->SR1 & 0x40) != 0) {\n      buffer_ptr = i2c_handle->pBuffPtr;\n      i2c_handle->pBuffPtr = buffer_ptr + 1;\n      *buffer_ptr = (uint8_t)i2c_handle->Instance->DR;\n      i2c_handle->XferCount--;\n    }\n    i2c_handle->ErrorCode |= 4;\n  }\n  if (i2c_handle->ErrorCode == 0) {\n    if (((i2c_state == HAL_I2C_STATE_LISTEN) || (i2c_state == HAL_I2C_STATE_BUSY_RX_LISTEN)) ||\n       (i2c_state == HAL_I2C_STATE_BUSY_TX_LISTEN)) {\n      i2c_handle->XferOptions = DAT_08001cfc;\n      i2c_handle->PreviousState = 0;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      i2c_handle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_ListenCpltCallback(i2c_handle);\n    }\n    else if ((i2c_handle->PreviousState == 0x22) || (i2c_state == HAL_I2C_STATE_BUSY_RX)) {\n      i2c_handle->PreviousState = 0;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      i2c_handle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_SlaveRxCpltCallback(i2c_handle);\n    }\n  }\n  else {\n    I2C_ITError(i2c_handle);\n  }\n  return HAL_OK;\n}",
            "called": [
                "I2C_ITError",
                "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bfc",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_i2c_state_08001bfc"
        },
        "FUN_08001718": {
            "renaming": {
                "FUN_08001718": "do_nothing_08001718"
            },
            "code": "\nvoid do_nothing_08001718(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001718",
            "calling": [
                "I2C_MasterTransmit_TXE",
                "I2C_MasterTransmit_BTF"
            ],
            "imported": false,
            "current_name": "do_nothing_08001718"
        },
        "FUN_08002d72": {
            "renaming": {
                "FUN_08002d72": "initialize_uart_08002d72",
                "*huart": "*uart",
                "huart": "uart",
                "HAL_UART_StateTypeDef": "HAL_StatusTypeDef",
                "HAL_UART_MspInit": "HAL_UART_MspInit",
                "gState": "state",
                "Lock": "lock",
                "ErrorCode": "error_code",
                "Instance": "instance",
                "CR1": "control_register_1",
                "CR2": "control_register_2",
                "CR3": "control_register_3"
            },
            "code": "HAL_StatusTypeDef initialize_uart_08002d72(UART_HandleTypeDef *uart)\n{\n    if (uart != NULL) {\n        if (uart->gState == HAL_UART_STATE_RESET) {\n            uart->Lock = HAL_UNLOCKED;\n            HAL_UART_MspInit(uart);\n        }\n        uart->gState = HAL_UART_STATE_BUSY;\n        uart->Instance->CR1 &= ~(1 << 13);\n        UART_SetConfig(uart);\n        uart->Instance->CR2 &= ~(1 << 11);\n        uart->Instance->CR3 &= ~(1 << 2);\n        uart->Instance->CR1 |= (1 << 13);\n        uart->ErrorCode = 0;\n        uart->gState = HAL_UART_STATE_READY;\n        uart->RxState = HAL_UART_STATE_READY;\n        return HAL_OK;\n    }\n    return HAL_ERROR;\n}",
            "called": [
                "UART_SetConfig",
                "HAL_UART_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d72",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "initialize_uart_08002d72"
        },
        "FUN_080007f0": {
            "renaming": {
                "__thiscall Modbus::FUN_080007f0": "modbus_validate_request",
                "this": "modbus_instance",
                "bVar1": "is_supported_function",
                "uVar2": "register_address",
                "uVar3": "register_count",
                "uVar4": "i",
                "au8Buffer": "request_buffer",
                "u16errCnt": "error_count",
                "byte": "uint8_t",
                "makeWord": "make_word",
                "PTR_fctsupported_080008c8": "supported_functions",
                "DAT_080008d4": "MODBUS_MAX_READ_REGISTERS",
                "DAT_080008d6": "MODBUS_MAX_WRITE_REGISTERS",
                "'\\x01'": "MODBUS_SUCCESS",
                "'\\x02'": "MODBUS_ERROR_ILLEGAL_DATA_ADDRESS",
                "LAB_0800080a": "label_0800080a",
                "switchD_08000816_caseD_1": "switch_case_08000816_1",
                "FUN_080007f0": "modbus_validate_request_080007f0"
            },
            "code": "uint8_t __thiscall modbus_validate_request_080007f0(Modbus *modbus_instance)\n{\n    bool is_supported_function = false;\n    uint16_t register_address;\n    uint16_t register_count;\n\n    for (uint i = 0; i < 8; i++)\n    {\n        if (PTR_fctsupported_080008c8[i] == modbus_instance->au8Buffer[1])\n        {\n            is_supported_function = true;\n            break;\n        }\n    }\n\n    if (!is_supported_function)\n    {\n        return MODBUS_ERROR_ILLEGAL_FUNCTION;\n    }\n\n    switch (modbus_instance->au8Buffer[1])\n    {\n        case MODBUS_READ_COILS:\n        case MODBUS_READ_DISCRETE_INPUTS:\n        case MODBUS_READ_HOLDING_REGISTERS:\n        case MODBUS_READ_INPUT_REGISTERS:\n            register_address = make_word(modbus_instance->au8Buffer[2], modbus_instance->au8Buffer[3]);\n            register_count = make_word(modbus_instance->au8Buffer[4], modbus_instance->au8Buffer[5]);\n            if (register_count > DAT_080008d4 || register_address + register_count > modbus_instance->u8regsize)\n            {\n                return MODBUS_ERROR_ILLEGAL_DATA_ADDRESS;\n            }\n            break;\n        case MODBUS_WRITE_SINGLE_COIL:\n        case MODBUS_WRITE_SINGLE_REGISTER:\n            register_address = make_word(modbus_instance->au8Buffer[2], modbus_instance->au8Buffer[3]);\n            if (register_address >= modbus_instance->u8regsize)\n            {\n                return MODBUS_ERROR_ILLEGAL_DATA_ADDRESS;\n            }\n            break;\n        case MODBUS_WRITE_MULTIPLE_COILS:\n        case MODBUS_WRITE_MULTIPLE_REGISTERS:\n            register_address = make_word(modbus_instance->au8Buffer[2], modbus_instance->au8Buffer[3]);\n            register_count = make_word(modbus_instance->au8Buffer[4], modbus_instance->au8Buffer[5]);\n            if (register_count > DAT_080008d6 || register_address + register_count > modbus_instance->u8regsize)\n            {\n                return MODBUS_ERROR_ILLEGAL_DATA_ADDRESS;\n            }\n            break;\n        default:\n            return MODBUS_ERROR_ILLEGAL_FUNCTION;\n    }\n\n    return MODBUS_SUCCESS;\n}",
            "called": [
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080007f0",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "modbus_validate_request_080007f0"
        },
        "FUN_0800477e": {
            "renaming": {
                "FUN_0800477e": "handle_GPIO_interrupt_0800477e",
                "DAT_08004a8c": "GPIO_PIN_8"
            },
            "code": "void handle_GPIO_interrupt_0800477e(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(DAT_08004a8c);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800477e",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_interrupt_0800477e"
        },
        "FUN_0800562a": {
            "renaming": {
                "FUN_0800562a": "write_to_file_at_offset_0800562a",
                "param_1": "file_descriptor",
                "param_2": "offset",
                "param_3": "data",
                "param_4": "data_size",
                "*(ushort *)(param_2 + 0xc)": "current_data_offset",
                "*(short *)(param_2 + 0xe)": "new_data_offset",
                "_lseek_r": "_lseek_r",
                "_write_r": "_write_r"
            },
            "code": "void write_to_file_at_offset_0800562a(int file_descriptor, int offset, void* data, int data_size)\n{\n  if ((int)((uint)*(ushort *)(offset + 0xc) << 0x17) < 0) {\n    _lseek_r(file_descriptor,(int)*(short *)(offset + 0xe),0,2);\n  }\n  *(ushort *)(offset + 0xc) = *(ushort *)(offset + 0xc) & 0xefff;\n  _write_r(file_descriptor,(int)*(short *)(offset + 0xe),data,data_size);\n  return;\n}",
            "called": [
                "_write_r",
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800562a",
            "calling": [],
            "imported": false,
            "current_name": "write_to_file_at_offset_0800562a"
        },
        "FUN_080044d8": {
            "renaming": {
                "FUN_080044d8": "initialize_serial_080044d8",
                "__initialize_p": "should_initialize",
                "__priority": "priority_level",
                "PTR_Serial3_080044f8": "serial_ptr",
                "DAT_080044f4": "DAT_serial"
            },
            "code": "void initialize_serial_080044d8(int should_initialize, int priority_level)\n{\n    if (should_initialize != 1) {\n        return;\n    }\n    if (priority_level == 0xffff) {\n        HardwareSerial::HardwareSerial((HardwareSerial *)PTR_Serial3_080044f8,DAT_080044f4);\n    }\n    return;\n}",
            "called": [
                "HardwareSerial"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044d8",
            "calling": [
                "_GLOBAL__sub_I_Serial3"
            ],
            "imported": false,
            "current_name": "initialize_serial_080044d8"
        },
        "FUN_08003df4": {
            "renaming": {
                "FUN_08003df4": "is_uart_busy_08003df4",
                "obj": "serial_obj",
                "HVar1": "uart_state",
                "PTR_uart_handlers_08003e14": "uart_handlers_ptr"
            },
            "code": "bool is_uart_busy_08003df4(serial_t *serial_obj)\n{\n    UART_HandleTypeDef *uart_handle = *(UART_HandleTypeDef **)(PTR_uart_handlers_08003e14 + (uint)serial_obj->index * 4);\n    HAL_UART_StateTypeDef uart_state = HAL_UART_GetState(uart_handle);\n    bool is_busy = (uart_state & 0x21U) == 0x21;\n    return is_busy;\n}",
            "called": [
                "HAL_UART_GetState"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003df4",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "is_uart_busy_08003df4"
        },
        "FUN_08005400": {
            "renaming": {
                "FUN_08005400": "find_first_unused_memory_block_08005400",
                "param_1": "error_code",
                "piVar1": "current_block",
                "piVar2": "last_block",
                "iVar3": "global_impure_ptr",
                "ppiVar4": "last_block_ptr"
            },
            "code": "int * find_first_unused_memory_block_08005400(undefined4 *error_code) {\n  int *current_block;\n  int *last_block;\n  int global_impure_ptr = *(int *)PTR__global_impure_ptr_08005474;\n  if (*(int *)(global_impure_ptr + 0x18) == 0) {\n    __sinit(global_impure_ptr);\n  }\n  last_block = *(int **)(global_impure_ptr + 0x48);\n  do {\n    current_block = last_block[2];\n    last_block = last_block[1];\n    while (current_block = (int *)((int)current_block + -1), -1 < (int)current_block) {\n      if (*(short *)(current_block + 3) == 0) {\n        *(undefined2 *)((int)current_block + 0xe) = 0xffff;\n        *(undefined2 *)(current_block + 3) = 1;\n        current_block[0x19] = 0;\n        *current_block = 0;\n        current_block[2] = 0;\n        current_block[1] = 0;\n        current_block[4] = 0;\n        current_block[5] = 0;\n        current_block[6] = 0;\n        memset(current_block + 0x17,0,8);\n        current_block[0xd] = 0;\n        current_block[0xe] = 0;\n        current_block[0x12] = 0;\n        current_block[0x13] = 0;\n        return current_block;\n      }\n      current_block = current_block + 0x1a;\n    }\n    if (last_block == (int *)0x0) {\n      current_block = (int *)__sfmoreglue(error_code,4);\n      last_block = current_block;\n      if (current_block == (int *)0x0) {\n        *error_code = 0xc;\n        return (int *)0x0;\n      }\n    }\n  } while( true );\n}",
            "called": [
                "memset",
                "__sfmoreglue",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005400",
            "calling": [
                "__sinit"
            ],
            "imported": false,
            "current_name": "find_first_unused_memory_block_08005400"
        },
        "FUN_08003582": {
            "renaming": {
                "FUN_08003582": "find_non_null_pointer_08003582",
                "a": "pointer1",
                "b": "pointer2"
            },
            "code": "void * find_non_null_pointer_08003582(void *pointer1, void *pointer2)\n{\n    if (pointer1 != pointer2) {\n        if (pointer1 == NULL) {\n            return pointer2;\n        }\n        if (pointer2 == NULL) {\n            return pointer1;\n        }\n        pointer1 = NULL;\n    }\n    return pointer1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003582",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "find_non_null_pointer_08003582"
        },
        "FUN_08004792": {
            "renaming": {
                "FUN_08004792": "handle_GPIO_EXTI_08004792",
                "uVar1": "gpio_pin",
                "PTR_": "no renaming",
                "DAT_": "no renaming"
            },
            "code": "void handle_GPIO_EXTI_08004792(void)\n{\n  uint16_t gpio_pin = 0x20;\n  uint16_t max_pin = 0x201;\n  while (gpio_pin < max_pin) {\n    HAL_GPIO_EXTI_IRQHandler(gpio_pin);\n    gpio_pin = gpio_pin << 1;\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004792",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_EXTI_08004792"
        },
        "FUN_08005760": {
            "renaming": {
                "std::FUN_08005760": "abort_program",
                "FUN_08005760": "abort_program_08005760"
            },
            "code": "void abort_program_08005760() {\n  abort();\n}",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005760",
            "calling": [
                "operator()"
            ],
            "imported": false,
            "current_name": "abort_program_08005760"
        },
        "FUN_08004678": {
            "renaming": {
                "FUN_08004678": "count_bits_set_to_1_08004678",
                "pin": "input_pin",
                "uVar1": "pin",
                "uVar2": "count"
            },
            "code": "uint8_t count_bits_set_to_1_08004678(uint16_t input_pin) {\n  uint16_t pin = input_pin;\n  uint8_t count = 0;\n  while (pin != 1) {\n    if (pin & 1) {\n      count++;\n    }\n    pin >>= 1;\n  }\n  return count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004678",
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "imported": false,
            "current_name": "count_bits_set_to_1_08004678"
        },
        "FUN_08003900": {
            "renaming": {
                "FUN_08003900": "enable_i2c_listen_interrupt_08003900",
                "hi2c": "i2c_handle",
                "piVar1": "i2c_obj_ptr",
                "isMaster": "is_master"
            },
            "code": "void enable_i2c_listen_interrupt_08003900(I2C_HandleTypeDef *i2c_handle)\\n{\\n  i2c_t *i2c_obj_ptr;\\n  i2c_obj_ptr = get_i2c_object(i2c_handle);\\n  if (i2c_obj_ptr->is_master == \"\\0\") {\\n    HAL_I2C_EnableListen_IT(i2c_handle);\\n  }\\n  return;\\n}",
            "called": [
                "get_i2c_obj",
                "HAL_I2C_EnableListen_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003900",
            "calling": [
                "I2C_ITError",
                "I2C_DMAAbort"
            ],
            "imported": false,
            "current_name": "enable_i2c_listen_interrupt_08003900"
        },
        "FUN_08005768": {
            "renaming": {
                "std::ctype_byname<char>::FUN_08005768": "set_flags_for_pointers",
                "PTR_id_080057fc": "pointer_id_1",
                "PTR_id_08005800": "pointer_id_2",
                "PTR_id_08005804": "pointer_id_3",
                "PTR_id_08005808": "pointer_id_4",
                "PTR_id_0800580c": "pointer_id_5",
                "PTR_id_08005810": "pointer_id_6",
                "PTR_id_08005814": "pointer_id_7",
                "PTR_id_08005818": "pointer_id_8",
                "PTR_id_0800581c": "pointer_id_9",
                "PTR_id_08005820": "pointer_id_10",
                "PTR_id_08005824": "pointer_id_11",
                "PTR_id_08005828": "pointer_id_12",
                "FUN_08005768": "set_flags_for_pointers_08005768"
            },
            "code": "void set_flags_for_pointers_08005768(void)\n{\n  if (-1 < *(int *)PTR_id_080057fc << 0x1f) {\n    *(undefined4 *)PTR_id_080057fc = 1;\n  }\n  if (-1 < *(int *)PTR_id_08005800 << 0x1f) {\n    *(undefined4 *)PTR_id_08005800 = 1;\n  }\n  if (-1 < *(int *)PTR_id_08005804 << 0x1f) {\n    *(undefined4 *)PTR_id_08005804 = 1;\n  }\n  if (-1 < *(int *)PTR_id_08005808 << 0x1f) {\n    *(undefined4 *)PTR_id_08005808 = 1;\n  }\n  if (-1 < *(int *)PTR_id_0800580c << 0x1f) {\n    *(undefined4 *)PTR_id_0800580c = 1;\n  }\n  if (-1 < *(int *)PTR_id_08005810 << 0x1f) {\n    *(undefined4 *)PTR_id_08005810 = 1;\n  }\n  if (-1 < *(int *)PTR_id_08005814 << 0x1f) {\n    *(undefined4 *)PTR_id_08005814 = 1;\n  }\n  if (-1 < *(int *)PTR_id_08005818 << 0x1f) {\n    *(undefined4 *)PTR_id_08005818 = 1;\n  }\n  if (-1 < *(int *)PTR_id_0800581c << 0x1f) {\n    *(undefined4 *)PTR_id_0800581c = 1;\n  }\n  if (-1 < *(int *)PTR_id_08005820 << 0x1f) {\n    *(undefined4 *)PTR_id_08005820 = 1;\n  }\n  if (-1 < *(int *)PTR_id_08005824 << 0x1f) {\n    *(undefined4 *)PTR_id_08005824 = 1;\n  }\n  if (-1 < *(int *)PTR_id_08005828 << 0x1f) {\n    *(undefined4 *)PTR_id_08005828 = 1;\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005768",
            "calling": [],
            "imported": false,
            "current_name": "set_flags_for_pointers_08005768"
        },
        "FUN_08000f0c": {
            "renaming": {
                "FUN_08000f0c": "set_interrupt_handler_08000f0c",
                "IRQn": "irq_num",
                "uVar1": "irq_num",
                "DAT_08000f28": "irq_reg",
                "irq_group": "irq_group",
                "irq_offset": "irq_offset",
                "irq_mask": "irq_mask"
            },
            "code": "void set_interrupt_handler_08000f0c(IRQn_Type_conflict IRQn){\n    uint32_t irq_num = (uint32_t)IRQn;\n    if(irq_num >= 0){\n        uint32_t irq_group = irq_num >> 5;\n        uint32_t irq_offset = irq_num & 0x1F;\n        uint32_t *DAT_08000f28 = (uint32_t *)(DAT_08000f28 + (irq_group + 0x60) * 4);\n        uint32_t irq_mask = 1 << irq_offset;\n        *DAT_08000f28 = irq_mask;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f0c",
            "calling": [
                "UART4_IRQHandler",
                "USART2_IRQHandler",
                "UART7_IRQHandler",
                "USART3_IRQHandler",
                "USART6_IRQHandler",
                "USART1_IRQHandler",
                "UART5_IRQHandler",
                "UART8_IRQHandler"
            ],
            "imported": false,
            "current_name": "set_interrupt_handler_08000f0c"
        },
        "FUN_08000998": {
            "renaming": {
                "__thiscall Modbus::FUN_08000998": "write_registers",
                "this": "modbus",
                "regs": "registers",
                "u8size": "num_registers",
                "bVar1": "buffer_byte_1",
                "uVar2": "buffer_index_1",
                "uVar3": "starting_register_index",
                "uVar4": "num_registers_to_write",
                "uVar5": "buffer_index_2",
                "uVar6": "buffer_index_3",
                "FUN_08000998": "write_registers_08000998"
            },
            "code": "int8_t __thiscall Modbus::write_registers_08000998(Modbus *modbus, uint16_t *registers, uint8_t num_registers)\n{\n    byte buffer_byte_1;\n    uint8_t buffer_index_1;\n    uint16_t starting_register_index;\n    uint16_t num_registers_to_write;\n    uint buffer_index_2;\n    uint8_t buffer_index_3;\n\n    starting_register_index = makeWord(modbus->au8Buffer[2], modbus->au8Buffer[3]);\n    num_registers_to_write = makeWord(modbus->au8Buffer[4], modbus->au8Buffer[5]);\n    modbus->au8Buffer[2] = (byte)num_registers_to_write << 1;\n    modbus->u8BufferSize = 3;\n    for (buffer_index_2 = (uint)starting_register_index; buffer_index_2 < (uint)starting_register_index + (uint)num_registers_to_write; buffer_index_2 = buffer_index_2 + 1 & 0xff) {\n        buffer_byte_1 = modbus->u8BufferSize;\n        modbus->au8Buffer[buffer_byte_1] = (uint8_t)(registers[buffer_index_2] >> 8);\n        buffer_index_3 = (uint8_t)(buffer_byte_1 + 1);\n        modbus->u8BufferSize = buffer_index_3;\n        modbus->au8Buffer[buffer_index_3] = *(uint8_t *)(registers + buffer_index_2);\n        modbus->u8BufferSize = buffer_index_3 + 1;\n    }\n    buffer_index_3 = modbus->u8BufferSize;\n    sendTxBuffer(modbus);\n    return buffer_index_3 + 2;\n}",
            "called": [
                "sendTxBuffer",
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "write_registers_08000998"
        },
        "FUN_08003f94": {
            "renaming": {
                "FUN_08003f94": "initialize_uart_08003f94",
                "huart": "uart_handle",
                "tmpval": "tmp_value"
            },
            "code": "void initialize_uart_08003f94(UART_HandleTypeDef *uart_handle)\n{\n  uint32_t tmp_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "UART_DMAAbortOnError",
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "initialize_uart_08003f94"
        },
        "FUN_080055d0": {
            "renaming": {
                "FUN_080055d0": "get_signal_handler_080055d0",
                "__sig": "signal_number",
                "iVar1": "handler_result",
                "_FUN_080055d0_r": "_get_signal_handler_r"
            },
            "code": "int get_signal_handler_080055d0(int signal_number)\n{\n  int handler_result;\n  handler_result = _get_signal_handler_080055d0_r(*(undefined4 *)PTR__impure_ptr_080055dc, signal_number);\n  return handler_result;\n}",
            "called": [
                "_raise_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055d0",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "get_signal_handler_080055d0"
        },
        "FUN_080056f8": {
            "renaming": {
                "FUN_080056f8": "check_isatty_080056f8",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "error_ptr",
                "iVar2": "is_terminal"
            },
            "code": "void check_isatty_080056f8(int *error_code, int file_descriptor) {\n  undefined *error_ptr;\n  int is_terminal;\n  error_ptr = PTR_errno_08005714;\n  *(undefined4 *)PTR_errno_08005714 = 0;\n  is_terminal = _isatty(file_descriptor);\n  if ((is_terminal == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n  }\n  return;\n}",
            "called": [
                "_isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056f8",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_isatty_080056f8"
        },
        "FUN_080054b4": {
            "renaming": {
                "FUN_080054b4": "get_file_status_080054b4",
                "param_1": "file_descriptor",
                "param_2": "file_info_offset",
                "param_3": "status",
                "param_4": "result",
                "iVar1": "status_check",
                "uVar2": "file_type",
                "auStack_4c": "stack_buffer",
                "local_48": "permissions"
            },
            "code": "int get_file_status_080054b4(int file_descriptor, int file_info_offset, int* status, uint* result)\n{\n    int status_check;\n    uint file_type;\n    undefined stack_buffer[4];\n    uint permissions;\n    if (*(short *)(file_info_offset + 0xE) < 0 || (status_check = _fstat_r(file_descriptor, (int)*(short *)(file_info_offset + 0xE), stack_buffer), status_check < 0))\n    {\n        *result = 0;\n        if ((int)((uint)*(ushort *)(file_info_offset + 0xC) << 0x18) < 0)\n        {\n            file_type = 0x40;\n            goto LAB_080054f4;\n        }\n    }\n    else\n    {\n        permissions = (uint)((file_type & 0xf000) == 0x2000);\n        *result = permissions;\n    }\n    file_type = 0x400;\nLAB_080054f4:\n    *status = file_type;\n    return 0;\n}",
            "called": [
                "_fstat_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b4",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "get_file_status_080054b4"
        },
        "FUN_0800171a": {
            "renaming": {
                "FUN_0800171a": "i2c_transfer_handler_0800171a",
                "*hi2c": "*i2c_handle",
                "HVar1": "i2c_state",
                "pbVar2": "buffer_ptr",
                "uVar3": "transfer_options"
            },
            "code": "HAL_StatusTypeDef i2c_transfer_handler_0800171a(I2C_HandleTypeDef *i2c_handle)\n{\n  HAL_I2C_StateTypeDef i2c_state = i2c_handle->State;\n  uint32_t transfer_options = i2c_handle->XferOptions;\n  \n  if ((i2c_handle->XferSize == 0) && (i2c_state == HAL_I2C_STATE_BUSY_TX)) {\n    if ((transfer_options == 4) || ((transfer_options == 8 || (transfer_options == 0xffff0000)))) {\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffff8ff;\n      i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x200;\n      i2c_handle->PreviousState = 0;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n        i2c_handle->Mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_MemTxCpltCallback(i2c_handle);\n      }\n      else {\n        i2c_handle->Mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_MasterTxCpltCallback(i2c_handle);\n      }\n    }\n    else {\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffff8ff;\n      i2c_handle->PreviousState = 0x11;\n      i2c_handle->Mode = HAL_I2C_MODE_NONE;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      HAL_I2C_MasterTxCpltCallback(i2c_handle);\n    }\n  }\n  else if ((i2c_state == HAL_I2C_STATE_BUSY_TX) || ((i2c_handle->Mode == HAL_I2C_MODE_MEM && (i2c_state == HAL_I2C_STATE_BUSY_RX)))) {\n    if (i2c_handle->XferCount == 0) {\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffffbff;\n    }\n    else if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n      if (i2c_handle->EventCount == 0) {\n        if (i2c_handle->MemaddSize == 1) {\n          i2c_handle->Instance->DR = i2c_handle->Memaddress & 0xff;\n          i2c_handle->EventCount = i2c_handle->EventCount + 2;\n        }\n        else {\n          i2c_handle->Instance->DR = (i2c_handle->Memaddress << 0x10) >> 0x18;\n          i2c_handle->EventCount = i2c_handle->EventCount + 1;\n        }\n      }\n      else if (i2c_handle->EventCount == 1) {\n        i2c_handle->Instance->DR = i2c_handle->Memaddress & 0xff;\n        i2c_handle->EventCount = i2c_handle->EventCount + 1;\n      }\n      else if (i2c_handle->EventCount == 2) {\n        if (i2c_state == HAL_I2C_STATE_BUSY_RX) {\n          i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x100;\n        }\n        else if (i2c_state == HAL_I2C_STATE_BUSY_TX) {\n          uint8_t *buffer_ptr = i2c_handle->pBuffPtr;\n          i2c_handle->pBuffPtr = buffer_ptr + 1;\n          i2c_handle->Instance->DR = (uint)*buffer_ptr;\n          i2c_handle->XferCount = i2c_handle->XferCount - 1;\n        }\n      }\n    }\n    else {\n      uint8_t *buffer_ptr = i2c_handle->pBuffPtr;\n      i2c_handle->pBuffPtr = buffer_ptr + 1;\n      i2c_handle->Instance->DR = (uint)*buffer_ptr;\n      i2c_handle->XferCount = i2c_handle->XferCount - 1;\n    }\n  }\n  return HAL_OK;\n}\n",
            "called": [
                "HAL_I2C_MemTxCpltCallback",
                "HAL_I2C_MasterTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800171a",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_transfer_handler_0800171a"
        },
        "FUN_08004560": {
            "renaming": {
                "FUN_08004560": "initializeIPAddress_08004560",
                "__initialize_p": "shouldInitialize",
                "__priority": "priorityLevel"
            },
            "code": "void initializeIPAddress_08004560(int shouldInitialize, int priorityLevel) {\n  if (shouldInitialize == 1 && priorityLevel == 0xffff) {\n    IPAddress::IPAddress((IPAddress *)PTR_INADDR_NONE_08004588, '\\0', '\\0', '\\0', '\\0');\n    return;\n  }\n  return;\n}",
            "called": [
                "IPAddress"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004560",
            "calling": [
                "_GLOBAL__sub_I__ZN9IPAddressC2Ev"
            ],
            "imported": false,
            "current_name": "initializeIPAddress_08004560"
        },
        "FUN_08000a7a": {
            "renaming": {
                "FUN_08000a7a": "decode_modbus_data_08000a7a",
                "this": "modbus",
                "regs": "registers",
                "u8size": "num_registers",
                "uVar1": "starting_address",
                "uVar2": "num_bits",
                "uVar3": "i",
                "uVar4": "bit_count",
                "uVar5": "bit_offset",
                "uVar6": "byte_offset",
                "uVar7": "byte_index",
                "au8Buffer": "data_buffer",
                "sendTxBuffer": "send_tx_buffer"
            },
            "code": "int8_t __thiscall decode_modbus_data_08000a7a(Modbus *modbus, uint16_t *registers, uint8_t num_registers)\n{\n  uint16_t starting_address = makeWord(modbus->data_buffer[2], modbus->data_buffer[3]);\n  uint16_t num_bits = makeWord(modbus->data_buffer[4], modbus->data_buffer[5]);\n  uint bit_count = 0;\n  uint byte_index = 7;\n  for (uint i = 0; i < num_bits; i++) {\n    uint byte_offset = (i + starting_address) * 0x100000 >> 0x18;\n    uint bit_offset = i + starting_address & 0xf;\n    if (((int)(uint)modbus->data_buffer[byte_index] >> bit_count & 1U) == 0) {\n      registers[byte_offset] = registers[byte_offset] & ~(ushort)(1 << bit_offset);\n    }\n    else {\n      registers[byte_offset] = (ushort)(1 << bit_offset) | registers[byte_offset];\n    }\n    bit_count = (bit_count + 1) % 8;\n    if (bit_count == 0) {\n      byte_index = (byte_index + 1) % 256;\n    }\n  }\n  modbus->data_buffer_size = '\\x06';\n  send_tx_buffer(modbus);\n  return '\b';\n}",
            "called": [
                "sendTxBuffer",
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a7a",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "decode_modbus_data_08000a7a"
        },
        "FUN_08003474": {
            "renaming": {
                "FUN_08003474": "do_nothing_08003474"
            },
            "code": "\nvoid do_nothing_08003474(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003474"
        },
        "FUN_08004cb0": {
            "renaming": {
                "FUN_08004cb0": "count_chars_and_write_08004cb0",
                "param_1": "input_param",
                "param_2": "input_arr",
                "param_3": "output_arr",
                "param_4": "input_size",
                "param_5": "write_func_ptr",
                "iVar1": "loop_counter",
                "uVar2": "max_val",
                "uVar3": "written_chars",
                "bVar4": "use_size_diff",
                "char_count": "char_count",
                "add_one": "add_one"
            },
            "code": "undefined4 count_chars_and_write_08004cb0(uint32_t input_param, uint32_t *input_arr, uint32_t *output_arr, uint32_t input_size, code *write_func_ptr)\\n\\\n{\\n\\\n    int i;\\n\\\n    uint32_t max_val = input_arr[4];\\n\\\n    if (max_val < input_arr[2]) {\\n\\\n        max_val = input_arr[2];\\n\\\n    }\\n\\\n    *output_arr = max_val;\\n\\\n    if (*(char *)((int)input_arr + 0x43) != \"\\0\") {\\n\\\n        *output_arr = max_val + 1;\\n\\\n    }\\n\\\n    if ((int)(*input_arr << 0x1a) < 0) {\\n\\\n        *output_arr = *output_arr + 2;\\n\\\n    }\\n\\\n    uint32_t char_count = *input_arr & 6;\\n\\\n    if (char_count == 0) {\\n\\\n        for (; (int)char_count < (int)(input_arr[3] - *output_arr); char_count++) {\\n\\\n            int write_res = (*write_func_ptr)(input_param, input_size, (int)input_arr + 0x19, 1);\\n\\\n            if (write_res == -1) {\\n\\\n                return 0xffffffff;\\n\\\n            }\\n\\\n        }\\n\\\n    }\\n\\\n    uint32_t add_one = (uint32_t)*(byte *)((int)input_arr + 0x43);\\n\\\n    if (add_one != 0) {\\n\\\n        add_one = 1;\\n\\\n    }\\n\\\n    if ((int)(*input_arr << 0x1a) < 0) {\\n\\\n        *(undefined *)((int)input_arr + add_one + 0x43) = 0x30;\\n\\\n        *(undefined *)((int)input_arr + add_one + 0x44) = *(undefined *)((int)input_arr + 0x45);\\n\\\n        add_one += 2;\\n\\\n    }\\n\\\n    int write_res = (*write_func_ptr)(input_param, input_size, (int)input_arr + 0x43, add_one);\\n\\\n    if (write_res != -1) {\\n\\\n        uint32_t size = input_arr[3];\\n\\\n        bool use_size_diff = (*input_arr & 6) == 4;\\n\\\n        if (use_size_diff) {\\n\\\n            size -= *output_arr;\\n\\\n        }\\n\\\n        if (use_size_diff) {\\n\\\n            size &= ~((int)size >> 0x1f);\\n\\\n        } else {\\n\\\n            size = 0;\\n\\\n        }\\n\\\n        if (max_val < input_arr[2]) {\\n\\\n            size += (input_arr[2] - input_arr[4]);\\n\\\n        }\\n\\\n        uint32_t written_chars = 0;\\n\\\n        while (true) {\\n\\\n            if (size == written_chars) {\\n\\\n                return 0;\\n\\\n            }\\n\\\n            int write_res = (*write_func_ptr)(input_param, input_size, (int)input_arr + 0x1a, 1);\\n\\\n            if (write_res == -1) {\\n\\\n                break;\\n\\\n            }\\n\\\n            written_chars++;\\n\\\n        }\\n\\\n    }\\n\\\n    return 0xffffffff;\\n\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb0",
            "calling": [
                "_printf_i"
            ],
            "imported": false,
            "current_name": "count_chars_and_write_08004cb0"
        },
        "FUN_08003594": {
            "renaming": {
                "FUN_08003594": "invoke_RTC_user_callback_08003594",
                "hrtc": "rtc_handle",
                "PTR_RTCUserCallback_080035a4": "user_callback_ptr",
                "PTR_callbackUserData_080035a8": "callback_user_data_ptr",
                "code": "callback_function"
            },
            "code": "void invoke_RTC_user_callback_08003594(RTC_HandleTypeDef *rtc_handle)\n{\n  code *user_callback = *(code **)PTR_RTCUserCallback_080035a4;\n  if (user_callback != (code *)0x0) {\n    (*user_callback)(*(undefined4 *)PTR_callbackUserData_080035a8);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003594",
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "imported": false,
            "current_name": "invoke_RTC_user_callback_08003594"
        },
        "FUN_08002940": {
            "renaming": {
                "FUN_08002940": "reset_uart_state_08002940",
                "huart": "uart_handle",
                "CR1": "control_register_1",
                "CR3": "control_register_3",
                "RxState": "receiver_state",
                "HAL_UART_STATE_READY": "UART_STATE_READY"
            },
            "code": "void reset_uart_state_08002940(UART_HandleTypeDef *uart_handle)\n{\n  // Clear the ninth bit of CR1 register\n  uart_handle->Instance->CR1 &= ~(1 << 8);\n  // Clear the least significant bit of CR3 register\n  uart_handle->Instance->CR3 &= ~1;\n  // Set RxState to READY\n  uart_handle->RxState = HAL_UART_STATE_READY;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002940",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "reset_uart_state_08002940"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "get_current_millis_08004204",
                "uVar1": "current_millis"
            },
            "code": "uint32_t get_current_millis_08004204(void)\n{\n  uint32_t current_millis = GetCurrentMilli();\n  return current_millis;\n}",
            "called": [
                "GetCurrentMilli"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "sendTxBuffer",
                "poll"
            ],
            "imported": false,
            "current_name": "get_current_millis_08004204"
        },
        "FUN_08003476": {
            "renaming": {
                "FUN_08003476": "handleSystemTick_08003476",
                "noOsSystickHandler": "handleNoOsSystick"
            },
            "code": "void handleSystemTick_08003476(void)\n{\n  HAL_IncTick();\n  HAL_SYSTICK_IRQHandler();\n  handleNoOsSystick();\n  return;\n}",
            "called": [
                "HAL_IncTick",
                "noOsSystickHandler",
                "HAL_SYSTICK_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003476",
            "calling": [],
            "imported": false,
            "current_name": "handleSystemTick_08003476"
        },
        "FUN_08004444": {
            "renaming": {
                "FUN_08004444": "setRxPin_08004444",
                "_rx": "rxPinIndex",
                "PVar1": "rxPin",
                "PTR_digitalPin_0800445c": "PTR_digitalPin_0800445c",
                "NC": "NC"
            },
            "code": "void __thiscall HardwareSerial::setRxPin_08004444(HardwareSerial *this, uint32_t rxPinIndex)\n{\n  PinName rxPin;\n  if (rxPinIndex < 0x60) {\n    rxPin = *(PinName *)(PTR_digitalPin_0800445c + rxPinIndex * 2);\n  }\n  else {\n    rxPin = NC;\n  }\n  (this->_serial).pin_rx = rxPin;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004444",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "setRxPin_08004444"
        },
        "FUN_080055e0": {
            "renaming": {
                "FUN_080055e0": "kill_process_if_running_080055e0",
                "param_1": "error_code",
                "param_2": "process_id",
                "param_3": "signal",
                "puVar1": "error_ptr",
                "iVar2": "kill_result"
            },
            "code": "void kill_process_if_running_080055e0(int *error_code, int process_id, int signal) {\n    undefined *error_ptr;\n    int kill_result;\n    error_ptr = PTR_errno_08005600;\n    *(undefined4 *)PTR_errno_08005600 = 0;\n    kill_result = _kill(process_id, signal);\n    if ((kill_result == -1) && (*(int *)error_ptr != 0)) {\n        *error_code = *(int *)error_ptr;\n    }\n    return;\n}",
            "called": [
                "_kill"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055e0",
            "calling": [
                "_raise_r"
            ],
            "imported": false,
            "current_name": "kill_process_if_running_080055e0"
        },
        "FUN_0800346c": {
            "renaming": {
                "FUN_0800346c": "get_current_tick_0800346c",
                "uVar1": "current_tick"
            },
            "code": "uint32_t get_current_tick_0800346c(void)\n{\n  uint32_t current_tick = HAL_GetTick();\n  return current_tick;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800346c",
            "calling": [
                "millis"
            ],
            "imported": false,
            "current_name": "get_current_tick_0800346c"
        },
        "FUN_080053a0": {
            "renaming": {
                "FUN_080053a0": "initialize_data_080053a0",
                "param_1": "data_ptr",
                "uVar1": "result",
                "iVar2": "is_ptr_global_impure",
                "bVar3": "is_data_ptr_global_impure"
            },
            "code": "void initialize_data_080053a0(int data_ptr)\n{\n  if (*(int *)(data_ptr + 0x18) == 0) {\n    int is_ptr_global_impure = *(int *)PTR__global_impure_ptr_080053f8;\n    *(int *)(data_ptr + 0x48) = 0;\n    *(int *)(data_ptr + 0x4c) = 0;\n    *(int *)(data_ptr + 0x50) = 0;\n    *(int *)(data_ptr + 0x28) = DAT_080053fc;\n    if (data_ptr == is_ptr_global_impure) {\n      *(int *)(data_ptr + 0x18) = 1;\n    }\n    *(int *)(data_ptr + 4) = __sfp();\n    *(int *)(data_ptr + 8) = __sfp(data_ptr);\n    *(int *)(data_ptr + 0xc) = __sfp(data_ptr);\n    std_isra_0(*(int *)(data_ptr + 4),4,0);\n    std_isra_0(*(int *)(data_ptr + 8),9,1);\n    std_isra_0(*(int *)(data_ptr + 0xc),0x12,2);\n    *(int *)(data_ptr + 0x18) = 1;\n  }\n  return;\n}",
            "called": [
                "std.isra.0",
                "__sfp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053a0",
            "calling": [
                "__swbuf_r",
                "__swsetup_r",
                "_vfiprintf_r",
                "_fflush_r",
                "__sfp",
                "iprintf"
            ],
            "imported": false,
            "current_name": "initialize_data_080053a0"
        },
        "FUN_08003918": {
            "renaming": {
                "FUN_08003918": "handle_i2c_event_interrupt_08003918",
                "PTR_i2c_handles_08003924": "PTR_i2c_handles",
                "*PTR_i2c_handles_08003924": "i2c_handle",
                "HAL_I2C_EV_IRQHandler": "handle_i2c_event"
            },
            "code": "void handle_i2c_event_interrupt_08003918(void)\n{\n  I2C_HandleTypeDef* *PTR_i2c_handles_08003924 = *(I2C_HandleTypeDef**)PTR_*PTR_i2c_handles_08003924s_08003924_08003924;\n  HAL_I2C_EV_IRQHandler(*PTR_i2c_handles_08003924);\n  return;\n}",
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003918",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_event_interrupt_08003918"
        },
        "FUN_0800201c": {
            "renaming": {
                "FUN_0800201c": "FUNC_0800201c"
            },
            "code": "\nHAL_StatusTypeDef FUNC_0800201c(RCC_OscInitTypeDef_conflict *RCC_OscInitStruct)\n\n{\n  uint *puVar1;\n  HAL_StatusTypeDef HVar2;\n  uint32_t uVar3;\n  uint32_t uVar4;\n  bool bVar5;\n  uint32_t tmpreg;\n  \n  puVar1 = DAT_080022d0;\n  if (RCC_OscInitStruct == (RCC_OscInitTypeDef_conflict *)0x0) {\n    return HAL_ERROR;\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 1) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 4) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) != 0)))) {\n      if (((*DAT_080022d0 & 0x20000) != 0) && (RCC_OscInitStruct->HSEState == 0)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      if (RCC_OscInitStruct->HSEState == 0x10000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x10000;\n      }\n      else if (RCC_OscInitStruct->HSEState == 0x50000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x40000;\n        *puVar1 = *puVar1 | 0x10000;\n      }\n      else {\n        *DAT_080022d0 = *DAT_080022d0 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (RCC_OscInitStruct->HSEState == 0) {\n        uVar3 = HAL_GetTick();\n        while ((*DAT_080022d0 & 0x20000) != 0) {\n          uVar4 = HAL_GetTick();\n          if (100 < uVar4 - uVar3) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        uVar3 = HAL_GetTick();\n        while ((*DAT_080022d0 & 0x20000) == 0) {\n          uVar4 = HAL_GetTick();\n          if (100 < uVar4 - uVar3) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 2) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 0) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) == 0)))) {\n      if (((*DAT_080022d0 & 2) != 0) && (RCC_OscInitStruct->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | RCC_OscInitStruct->HSICalibrationValue << 3;\n    }\n    else if (RCC_OscInitStruct->HSIState == 0) {\n      *DAT_080022d4 = 0;\n      uVar3 = HAL_GetTick();\n      while ((*DAT_080022d0 & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_080022d4 = 1;\n      uVar3 = HAL_GetTick();\n      while ((*DAT_080022d0 & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | RCC_OscInitStruct->HSICalibrationValue << 3;\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 8) != 0) {\n    if (RCC_OscInitStruct->LSIState == 0) {\n      *DAT_080022d8 = 0;\n      uVar3 = HAL_GetTick();\n      while ((DAT_080022d0[0x1d] & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_080022d8 = 1;\n      uVar3 = HAL_GetTick();\n      while ((DAT_080022d0[0x1d] & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 4) != 0) {\n    bVar5 = (DAT_080022d0[0x10] & 0x10000000) == 0;\n    if (bVar5) {\n      DAT_080022d0[0x10] = DAT_080022d0[0x10] | 0x10000000;\n    }\n    if ((*DAT_080022dc & 0x100) == 0) {\n      *DAT_080022dc = *DAT_080022dc | 0x100;\n      uVar3 = HAL_GetTick();\n      while ((*DAT_080022dc & 0x100) == 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    puVar1 = DAT_080022d0;\n    if (RCC_OscInitStruct->LSEState == 1) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 1;\n    }\n    else if (RCC_OscInitStruct->LSEState == 5) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 4;\n      puVar1[0x1c] = puVar1[0x1c] | 1;\n    }\n    else {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] & 0xfffffffe;\n      puVar1[0x1c] = puVar1[0x1c] & 0xfffffffb;\n    }\n    if (RCC_OscInitStruct->LSEState == 0) {\n      uVar3 = HAL_GetTick();\n      while ((DAT_080022d0[0x1c] & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (5000 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      uVar3 = HAL_GetTick();\n      while ((DAT_080022d0[0x1c] & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (5000 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (bVar5) {\n      DAT_080023ac[0x10] = DAT_080023ac[0x10] & 0xefffffff;\n    }\n  }\n  uVar3 = (RCC_OscInitStruct->PLL).PLLState;\n  if (uVar3 == 0) {\n    HVar2 = HAL_OK;\n  }\n  else if ((DAT_080023ac[2] & 0xc) == 8) {\n    HVar2 = HAL_ERROR;\n  }\n  else if (uVar3 == 2) {\n    *DAT_080023b0 = 0;\n    uVar3 = HAL_GetTick();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        DAT_080023ac[1] =\n             (RCC_OscInitStruct->PLL).PLLSource | (RCC_OscInitStruct->PLL).PLLM |\n             (RCC_OscInitStruct->PLL).PLLN << 6 |\n             (((RCC_OscInitStruct->PLL).PLLP >> 1) - 1) * 0x10000 |\n             (RCC_OscInitStruct->PLL).PLLQ << 0x18;\n        *DAT_080023b0 = 1;\n        uVar3 = HAL_GetTick();\n        do {\n          if ((*DAT_080023ac & 0x2000000) != 0) {\n            return HAL_OK;\n          }\n          uVar4 = HAL_GetTick();\n        } while (uVar4 - uVar3 < 3);\n        return HAL_TIMEOUT;\n      }\n      uVar4 = HAL_GetTick();\n    } while (uVar4 - uVar3 < 3);\n    HVar2 = HAL_TIMEOUT;\n  }\n  else {\n    *DAT_080023b0 = 0;\n    uVar3 = HAL_GetTick();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        return HAL_OK;\n      }\n      uVar4 = HAL_GetTick();\n    } while (uVar4 - uVar3 < 3);\n    HVar2 = HAL_TIMEOUT;\n  }\n  return HVar2;\n}\n\n",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800201c",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "FUNC_0800201c"
        },
        "FUN_080028d4": {
            "renaming": {
                "FUN_080028d4": "set_channel_state_080028d4",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelNState": "state",
                "CCER": "ccer",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void set_channel_state_080028d4(TIM_TypeDef *timer, uint32_t channel, uint32_t state) {\n    uint32_t ccer_mask = ~(4 << (channel & 0xff));\n    uint32_t ccer_value = state << (channel & 0xff);\n    timer->CCER = (timer->CCER & ccer_mask) | ccer_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d4",
            "calling": [
                "HAL_TIMEx_PWMN_Stop"
            ],
            "imported": false,
            "current_name": "set_channel_state_080028d4"
        },
        "FUN_0800293c": {
            "renaming": {
                "FUN_0800293c": "do_nothing_0800293c"
            },
            "code": "\nvoid do_nothing_0800293c(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293c",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293c"
        },
        "FUN_080040ec": {
            "renaming": {
                "FUN_080040ec": "calculate_uart_debug_080040ec",
                "file_UNUSED": "unused_file",
                "ptr": "data",
                "len": "data_len",
                "sVar1": "uart_debug_result",
                "uint8_t *": "data",
                "uint8_t": "data_element"
            },
            "code": "size_t calculate_uart_debug_080040ec(uint8_t *data, int data_len)\n{\n  size_t uart_debug_result = uart_debug(data, data_len);\n  return uart_debug_result;\n}",
            "called": [
                "uart_debug_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040ec",
            "calling": [
                "_write_r"
            ],
            "imported": false,
            "current_name": "calculate_uart_debug_080040ec"
        },
        "FUN_08001460": {
            "renaming": {
                "FUN_08001460": "i2c_slave_listen_08001460",
                "hi2c": "i2c_handle",
                "HVar1": "status",
                "pIVar2": "i2c_instance",
                "tmpreg": "tmp_reg",
                "pData": "data",
                "Size": "size",
                "XferOptions": "xfer_options",
                "HAL_I2C_STATE_LISTEN": "HAL_I2C_STATE_LISTEN",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_LOCKED": "HAL_LOCKED",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_I2C_STATE_BUSY_TX_LISTEN": "HAL_I2C_STATE_BUSY_TX_LISTEN",
                "HAL_I2C_MODE_SLAVE": "HAL_I2C_MODE_SLAVE",
                "HAL_OK": "HAL_OK",
                "hi2c->State": "i2c_handle->State",
                "hi2c->Lock": "i2c_handle->Lock",
                "hi2c->Instance": "i2c_handle->Instance",
                "pIVar2->CR1": "i2c_instance->CR1",
                "hi2c->Mode": "i2c_handle->Mode",
                "hi2c->ErrorCode": "i2c_handle->ErrorCode",
                "hi2c->pBuffPtr": "i2c_handle->pBuffPtr",
                "hi2c->XferCount": "i2c_handle->XferCount",
                "hi2c->XferOptions": "i2c_handle->XferOptions",
                "hi2c->XferSize": "i2c_handle->XferSize",
                "hi2c->Instance->CR2": "i2c_handle->Instance->CR2"
            },
            "code": "HAL_StatusTypeDef i2c_slave_listen_08001460(I2C_HandleTypeDef *i2c_handle, uint8_t *data, uint16_t size, uint32_t xfer_options)\n{\n  HAL_StatusTypeDef status;\n  I2C_TypeDef *i2c_instance;\n  uint32_t tmp_reg;\n  \n  if (i2c_handle->State == HAL_I2C_STATE_LISTEN) {\n    if (data == NULL) {\n      status = HAL_ERROR;\n    }\n    else if (size == 0) {\n      status = HAL_ERROR;\n    }\n    else if (i2c_handle->Lock == HAL_LOCKED) {\n      status = HAL_BUSY;\n    }\n    else {\n      i2c_handle->Lock = HAL_LOCKED;\n      i2c_instance = i2c_handle->Instance;\n      if ((i2c_instance->CR1 & 1) == 0) {\n        i2c_instance->CR1 |= 1;\n      }\n      i2c_handle->Instance->CR1 &= 0xfffff7ff;\n      i2c_handle->State = HAL_I2C_STATE_BUSY_TX_LISTEN;\n      i2c_handle->Mode = HAL_I2C_MODE_SLAVE;\n      status = HAL_OK;\n      i2c_handle->ErrorCode = 0;\n      i2c_handle->pBuffPtr = data;\n      i2c_handle->XferCount = size;\n      i2c_handle->XferOptions = xfer_options;\n      i2c_handle->XferSize = i2c_handle->XferCount;\n      i2c_handle->Lock = HAL_UNLOCKED;\n      i2c_handle->Instance->CR2 |= 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001460",
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "imported": false,
            "current_name": "i2c_slave_listen_08001460"
        },
        "FUN_08004298": {
            "renaming": {
                "FUN_08004298": "wait_for_transmission_completion_08004298",
                "_written": "has_unwritten_data",
                "this": "serial_instance",
                "_serial": "serial_buffer",
                "tx_head": "transmission_head",
                "tx_tail": "transmission_tail"
            },
            "code": "void __thiscall HardwareSerial::wait_for_transmission_completion_08004298(HardwareSerial *serial_instance) {\n  if (serial_instance->has_unwritten_data) {\n    do {\n    } while ((serial_instance->serial_buffer).tx_head != (serial_instance->serial_buffer).tx_tail);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004298",
            "calling": [],
            "imported": false,
            "current_name": "wait_for_transmission_completion_08004298"
        },
        "FUN_08003880": {
            "renaming": {
                "FUN_08003880": "i2c_slave_transmit_receive_08003880",
                "*hi2c": "*i2c_handle",
                "TransferDirection": "transfer_direction",
                "AddrMatchCode": "address_match_code",
                "piVar1": "i2c_obj",
                "get_i2c_obj": "get_i2c_object",
                "i2cTxRxBufferSize": "tx_rx_buffer_size",
                "slaveMode": "slave_mode",
                "i2c_onSlaveTransmit": "on_slave_transmit",
                "i2cTxRxBuffer": "tx_rx_buffer",
                "HAL_I2C_Slave_Sequential_Transmit_IT": "HAL_I2C_Slave_Sequential_Transmit_IT",
                "HAL_I2C_Slave_Sequential_Receive_IT": "HAL_I2C_Slave_Sequential_Receive_IT"
            },
            "code": "void i2c_slave_transmit_receive_08003880(I2C_HandleTypeDef *i2c_handle, uint8_t transfer_direction, uint16_t address_match_code) {\\n    i2c_t *i2c_obj;\\n    i2c_obj = get_i2c_object(i2c_handle);\\n    if ((uint)address_match_code == (i2c_handle->Init).OwnAddress1) {\\n        if (transfer_direction == \"\\0\") {\\n            i2c_obj->tx_rx_buffer_size = \"\\0\";\\n            i2c_obj->slave_mode = \"\\0\";\\n            if (i2c_obj->on_slave_transmit != (_func_void *)0x0) {\\n                (*i2c_obj->on_slave_transmit)();\\n            }\\n            HAL_I2C_Slave_Sequential_Transmit_IT(i2c_handle, i2c_obj->tx_rx_buffer, (ushort)i2c_obj->tx_rx_buffer_size, 8);\\n            return;\\n        }\\n        i2c_obj->slave_mode = \"\\x01\";\\n        HAL_I2C_Slave_Sequential_Receive_IT(i2c_handle, i2c_obj->tx_rx_buffer, 0x20, 8);\\n    }\\n    return;\\n}",
            "called": [
                "HAL_I2C_Slave_Sequential_Transmit_IT",
                "HAL_I2C_Slave_Sequential_Receive_IT",
                "get_i2c_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003880",
            "calling": [
                "I2C_Slave_ADDR"
            ],
            "imported": false,
            "current_name": "i2c_slave_transmit_receive_08003880"
        },
        "FUN_08003fd4": {
            "renaming": {
                "FUN_08003fd4": "handle_UART1_interrupt_08003fd4",
                "PTR_uart_handlers_08003fe8": "uart1_handler_ptr"
            },
            "code": "void handle_UART1_interrupt_08003fd4(void)\n{\n  HAL_NVIC_ClearPendingIRQ(USART1_IRQn);\n  HAL_UART_IRQHandler(*PTR_uart_handlers_08003fe8);\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fd4",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART1_interrupt_08003fd4"
        },
        "FUN_08002f4c": {
            "renaming": {
                "FUN_08002f4c": "resetUartState_08002f4c",
                "*huart": "*uart_handle",
                "CR1": "control_register_1",
                "gState": "global_state",
                "HAL_UART_TxCpltCallback": "uart_transmission_complete_callback",
                "HAL_OK": "HAL_operation_successful"
            },
            "code": "HAL_StatusTypeDef resetUartState_08002f4c(UART_HandleTypeDef *uart_handle)\n{\n  // Disable UART transmission\n  uart_handle->Instance->CR1 &= ~(1 << 6);\n\n  // Set UART state to ready\n  uart_handle->gState = HAL_UART_STATE_READY;\n\n  // Call UART transmission complete callback\n  HAL_UART_TxCpltCallback(uart_handle);\n\n  return HAL_OK;\n}",
            "called": [
                "HAL_UART_TxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f4c",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "resetUartState_08002f4c"
        },
        "FUN_080035bc": {
            "renaming": {
                "FUN_080035bc": "set_bit_and_reset_other_bits_080035bc",
                "DAT_080035f0": "data_array",
                "DAT_080035f4": "data_array_1",
                "DAT_080035f8": "data_array_2",
                "puVar1": "pointer_to_uint_array"
            },
            "code": "void set_bit_and_reset_other_bits_080035bc(void)\n{\n  uint *pointer_to_uint_array;\n  pointer_to_uint_array = DAT_080035f0;\n  *DAT_080035f0 = *DAT_080035f0 | 1;\n  pointer_to_uint_array[2] = 0;\n  *pointer_to_uint_array = *pointer_to_uint_array & 0xfef6ffff;\n  pointer_to_uint_array[1] = DAT_080035f0[1];\n  *pointer_to_uint_array = *pointer_to_uint_array & 0xfffbffff;\n  pointer_to_uint_array[3] = 0;\n  *(undefined4 *)(DAT_080035f0[2] + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035bc",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "set_bit_and_reset_other_bits_080035bc"
        },
        "FUN_08000c4c": {
            "renaming": {
                "FUN_08000c4c": "initializeModbusSlave_08000c4c",
                "PTR_slave_08000c60": "PTR_slave",
                "Modbus": "ModbusLibrary",
                "startForkserver": "startForkServer",
                "0x4b00": "baudRate"
            },
            "code": "void initializeModbusSlave_08000c4c(void)\n{\n  startForkserver(0);\n  Modbus::begin((Modbus *)PTR_slave_08000c60_08000c60,0x4b00);\n  return;\n}",
            "called": [
                "begin",
                "startForkserver"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c4c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initializeModbusSlave_08000c4c"
        },
        "FUN_080025ec": {
            "renaming": {
                "FUN_080025ec": "get_HCLK_frequency_080025ec",
                "PTR_APBPrescTable_08002608": "prescaler_table",
                "DAT_08002604": "data_08002604"
            },
            "code": "uint32_t get_HCLK_frequency_080025ec(void)\n{\n  uint32_t frequency = HAL_RCC_GetHCLKFreq();\n  uint32_t index = (uint)(*(int *)(DAT_08002604 + 8) << 0x13) >> 0x1d;\n  uint32_t prescaler = PTR_APBPrescTable_08002608[index];\n  return frequency >> prescaler;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ec",
            "calling": [
                "UART_SetConfig"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_080025ec"
        },
        "FUN_080037fc": {
            "renaming": {
                "FUN_080037fc": "handle_timer_interrupt_080037fc",
                "PTR_timer_handles_0800380c": "PTR_timer_handles"
            },
            "code": "void handle_timer_interrupt_080037fc(void)\n{\n  TIM_HandleTypeDef *timer_handle = *(TIM_HandleTypeDef **)(PTR_timer_handles_0800380c_0800380c + 0x18);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037fc",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_080037fc"
        },
        "FUN_08004a60": {
            "renaming": {
                "FUN_08004a60": "write_chars_to_stream_08004a60",
                "param_1": "stream_id",
                "param_2": "status",
                "param_3": "chars",
                "param_4": "num_chars",
                "puVar2": "end_of_chars",
                "iVar3": "write_status",
                "iVar1": "write_status"
            },
            "code": "int write_chars_to_stream_08004a60(int stream_id, int status, char *chars, int num_chars) {\n  int write_status;\n  char *current_char;\n  char *end_of_chars = chars + num_chars;\n  current_char = chars;\n  while (current_char != end_of_chars) {\n    if (chars == end_of_chars) {\n      return 0;\n    }\n    write_status = __sfputc_r(stream_id, *current_char, status, num_chars, write_status);\n    num_chars = write_status + 1;\n    current_char++;\n  }\n  return write_status;\n}",
            "called": [
                "__sfputc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a60",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "write_chars_to_stream_08004a60"
        },
        "FUN_080050d0": {
            "renaming": {
                "FUN_080050d0": "get_input_output_status_080050d0",
                "param_1": "status_ptr",
                "param_2": "stream_ptr",
                "uVar1": "status",
                "uVar2": "stream_status_bits",
                "iVar3": "impure_ptr"
            },
            "code": "uint get_input_output_status_080050d0(undefined4 *status_ptr, undefined4 *stream_ptr) {\n  uint status;\n  ushort stream_status_bits;\n  int impure_ptr = *(int *)PTR__impure_ptr_0800519c;\n  if ((impure_ptr != 0) && (*(int *)(impure_ptr + 0x18) == 0)) {\n    __sinit(impure_ptr);\n  }\n  if (stream_ptr == (undefined4 *)PTR___sf_fake_stdin_080051a0) {\n    stream_ptr = *(undefined4 **)(impure_ptr + 4);\n  }\n  else if (stream_ptr == (undefined4 *)PTR___sf_fake_stdout_080051a4) {\n    stream_ptr = *(undefined4 **)(impure_ptr + 8);\n  }\n  else if (stream_ptr == (undefined4 *)PTR___sf_fake_stderr_080051a8) {\n    stream_ptr = *(undefined4 **)(impure_ptr + 0xc);\n  }\n  stream_status_bits = *(ushort *)(stream_ptr + 3);\n  status = (uint)stream_status_bits;\n  if (-1 < (int)(status << 0x1c)) {\n    if (-1 < (int)(status << 0x1b)) {\n      *status_ptr = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(status << 0x1d) < 0) {\n      if ((undefined4 *)stream_ptr[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)stream_ptr[0xd] != stream_ptr + 0x11) {\n          _free_r(status_ptr);\n        }\n        stream_ptr[0xd] = 0;\n      }\n      *(ushort *)(stream_ptr + 3) = *(ushort *)(stream_ptr + 3) & 0xffdb;\n      stream_ptr[1] = 0;\n      *stream_ptr = stream_ptr[4];\n    }\n    *(ushort *)(stream_ptr + 3) = *(ushort *)(stream_ptr + 3) | 8;\n  }\n  if ((stream_ptr[4] == 0) && ((*(ushort *)(stream_ptr + 3) & 0x280) != 0x200)) {\n    __smakebuf_r(status_ptr, stream_ptr);\n  }\n  stream_status_bits = *(ushort *)(stream_ptr + 3);\n  status = stream_status_bits & 1;\n  if ((stream_status_bits & 1) == 0) {\n    if (-1 < (int)((uint)stream_status_bits << 0x1e)) {\n      status = stream_ptr[5];\n    }\n    stream_ptr[2] = status;\n  }\n  else {\n    stream_ptr[2] = 0;\n    stream_ptr[6] = -stream_ptr[5];\n  }\n  if (stream_ptr[4] == 0) {\n    stream_status_bits = *(ushort *)(stream_ptr + 3);\n    status = (int)(short)stream_status_bits & 0x80;\n    if (status != 0) {\n      *(ushort *)(stream_ptr + 3) = stream_status_bits | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    status = 0;\n  }\n  return status;\n}",
            "called": [
                "__smakebuf_r",
                "_free_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080050d0",
            "calling": [
                "__swbuf_r",
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "get_input_output_status_080050d0"
        },
        "FUN_08004978": {
            "renaming": {
                "FUN_08004978": "allocate_memory_block_08004978",
                "param_1": "error_code",
                "param_2": "requested_size",
                "puVar1": "brk_start",
                "uVar2": "unused",
                "puVar3": "free_list",
                "iVar4": "unused",
                "uVar5": "available_size",
                "puVar6": "prev_block",
                "puVar7": "current_block",
                "uVar8": "aligned_size"
            },
            "code": "uint allocate_memory_block_08004978(undefined4 *error_code, uint requested_size)\n{\n  uint aligned_size = (requested_size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < requested_size)) {\n    *error_code = 0xc;\n  }\n  else {\n    __malloc_lock();\n    undefined *brk_start = PTR___malloc_sbrk_start_08004a30;\n    uint *free_list = *(uint **)PTR___malloc_free_list_08004a2c;\n    uint *prev_block = *(uint **)PTR___malloc_free_list_08004a2c;\n    while (uint *current_block = free_list, current_block != (uint *)0x0) {\n      uint available_size = *current_block - aligned_size;\n      if (-1 < (int)available_size) {\n        if (available_size < 0xc) {\n          if (prev_block == current_block) {\n            aligned_size = prev_block[1];\n          }\n          else {\n            aligned_size = current_block[1];\n          }\n          if (prev_block == current_block) {\n            *(uint *)PTR___malloc_free_list_08004a2c = aligned_size;\n            current_block = prev_block;\n          }\n          else {\n            prev_block[1] = aligned_size;\n          }\n        }\n        else {\n          *current_block = available_size;\n          *(uint *)((int)current_block + available_size) = aligned_size;\n          current_block = (uint *)((int)current_block + available_size);\n        }\n        goto LAB_080049dc;\n      }\n      prev_block = current_block;\n      free_list = (uint *)current_block[1];\n    }\n    if (*(int *)PTR___malloc_sbrk_start_08004a30 == 0) {\n      uVar2 = _sbrk_r(error_code);\n      *(undefined4 *)brk_start = uVar2;\n    }\n    uint *new_block = (uint *)_sbrk_r(error_code,aligned_size);\n    if ((new_block != (uint *)0xffffffff) && ((current_block = (uint *)((int)new_block + 3U & 0xfffffffc), new_block == current_block || (int) _sbrk_r(error_code,(int)current_block - (int)new_block) != -1))) {\n      *current_block = aligned_size;\nLAB_080049dc:\n      __malloc_unlock(error_code);\n      uint block_end = (int)current_block + 0xbU & 0xfffffff8;\n      int block_size = block_end - (int)(current_block + 1);\n      if (block_size != 0) {\n        *(int *)((int)current_block + block_size) = -block_size;\n        return block_end;\n      }\n      return block_end;\n    }\n    *error_code = 0xc;\n    __malloc_unlock(error_code);\n  }\n  return 0;\n}",
            "called": [
                "_sbrk_r",
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004978",
            "calling": [
                "__sfmoreglue",
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08004978"
        },
        "FUN_08002d0c": {
            "renaming": {
                "FUN_08002d0c": "check_flag_status_08002d0c",
                "*huart": "uart_handle",
                "Flag": "flag",
                "Status": "status",
                "Tickstart": "tickstart",
                "Timeout": "timeout",
                "uVar1": "current_tick"
            },
            "code": "HAL_StatusTypeDef check_flag_status_08002d0c(UART_HandleTypeDef* uart_handle, uint32_t flag, FlagStatus status, uint32_t tickstart, uint32_t timeout) {\n    uint32_t current_tick;\n    do {\n        bool flag_status = (flag & ~uart_handle->Instance->SR) == 0;\n        if (flag_status != (bool)status) {\n            return HAL_OK;\n        }\n        current_tick = HAL_GetTick();\n    } while (timeout == 0xFFFFFFFF || (timeout != 0 && current_tick - tickstart <= timeout));\n    uart_handle->Instance->CR1 &= 0xFFFFFE5F;\n    uart_handle->Instance->CR3 &= 0xFFFFFFFE;\n    uart_handle->gState = HAL_UART_STATE_READY;\n    uart_handle->RxState = HAL_UART_STATE_READY;\n    uart_handle->Lock = HAL_UNLOCKED;\n    return HAL_TIMEOUT;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d0c",
            "calling": [
                "HAL_UART_Transmit"
            ],
            "imported": false,
            "current_name": "check_flag_status_08002d0c"
        },
        "FUN_0800404c": {
            "renaming": {
                "FUN_0800404c": "handle_USART6_interrupt_0800404c",
                "HAL_NVIC_ClearPendingIRQ": "clear_USART6_pending_IRQ",
                "USART6_IRQn": "USART6_interrupt",
                "HAL_UART_IRQHandler": "handle_UART_interrupt",
                "UART_HandleTypeDef": "UART_handler",
                "PTR_uart_handlers_08004060": "PTR_uart_handlers",
                "DAT_0800405c": "DAT_0800405c",
                "DAT_08004060": "DAT_08004060"
            },
            "code": "void handle_USART6_interrupt_0800404c(void)\n{\n  clear_USART6_pending_IRQ();\n  handle_UART_interrupt(get_UART_handler());\n  return;\n}",
            "called": [
                "HAL_UART_IRQHandler",
                "HAL_NVIC_ClearPendingIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800404c",
            "calling": [],
            "imported": false,
            "current_name": "handle_USART6_interrupt_0800404c"
        },
        "FUN_08001902": {
            "renaming": {
                "FUN_08001902": "do_nothing_08001902"
            },
            "code": "\nvoid do_nothing_08001902(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001902",
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "imported": false,
            "current_name": "do_nothing_08001902"
        },
        "FUN_08001904": {
            "renaming": {
                "FUN_08001904": "receive_data_08001904",
                "*hi2c": "*i2c_handle",
                "puVar1": "buffer_pointer"
            },
            "code": "HAL_StatusTypeDef receive_data_08001904(I2C_HandleTypeDef *i2c_handle)\n{\n  uint8_t *buffer_pointer;\n  \n  if (i2c_handle->State == HAL_I2C_STATE_BUSY_RX) {\n    if (i2c_handle->XferCount < 4) {\n      if (i2c_handle->XferCount < 2) {\n        i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 & 0xfffffbff;\n        i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffff8ff;\n        buffer_pointer = i2c_handle->pBuffPtr;\n        i2c_handle->pBuffPtr = buffer_pointer + 1;\n        *buffer_pointer = (uint8_t)i2c_handle->Instance->DR;\n        i2c_handle->XferCount = i2c_handle->XferCount - 1;\n        i2c_handle->State = HAL_I2C_STATE_READY;\n        i2c_handle->PreviousState = 0;\n        if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n          i2c_handle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MemRxCpltCallback(i2c_handle);\n        }\n        else {\n          i2c_handle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MasterRxCpltCallback(i2c_handle);\n        }\n      }\n    }\n    else {\n      buffer_pointer = i2c_handle->pBuffPtr;\n      i2c_handle->pBuffPtr = buffer_pointer + 1;\n      *buffer_pointer = (uint8_t)i2c_handle->Instance->DR;\n      i2c_handle->XferCount = i2c_handle->XferCount - 1;\n      if (i2c_handle->XferCount == 3) {\n        i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffffbff;\n      }\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001904",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "receive_data_08001904"
        },
        "FUN_08000c64": {
            "renaming": {
                "FUN_08000c64": "poll_modbus_slave_data_08000c64",
                "PTR_slave_08000c78": "modbus_slave_ptr",
                "PTR_au16data_08000c74": "modbus_data_ptr"
            },
            "code": "void poll_modbus_slave_data_08000c64(void)\n{\n  Modbus::poll((Modbus *)PTR_slave_08000c78,(uint16_t *)PTR_au16data_08000c74, 16);\n  return;\n}",
            "called": [
                "poll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c64",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "poll_modbus_slave_data_08000c64"
        },
        "FUN_08002ffc": {
            "renaming": {
                "FUN_08002ffc": "handle_uart_interrupt_08002ffc",
                "huart": "uart_handle",
                "HVar1": "status",
                "uVar2": "cr1_reg",
                "pUVar3": "usart_reg",
                "uVar4": "cr3_bit",
                "uVar5": "sr_reg",
                "UART_Receive_IT": "uart_receive_it",
                "UART_Transmit_IT": "uart_transmit_it",
                "UART_EndTransmit_IT": "uart_end_transmit_it",
                "HAL_UART_ErrorCallback": "hal_uart_error_callback",
                "UART_EndRxTransfer": "uart_end_rx_transfer",
                "huart->ErrorCode": "uart_handle->ErrorCode",
                "huart->Instance": "uart_handle->Instance",
                "huart->hdmarx": "uart_handle->hdmarx",
                "DAT_08003118": "uart_dma_abort",
                "HAL_DMA_Abort_IT": "hal_dma_abort_it",
                "DMA_HandleTypeDef": "dma_handle"
            },
            "code": "void handle_uart_interrupt_08002ffc(UART_HandleTypeDef *uart_handle)\n{\n  HAL_StatusTypeDef status;\n  uint32_t sr_reg;\n  USART_TypeDef *usart_reg;\n  uint32_t cr1_reg;\n  uint32_t cr3_reg;\n  uint32_t error_code;\n  DMA_HandleTypeDef *dma_handle;\n\n  usart_reg = uart_handle->Instance;\n  sr_reg = usart_reg->SR;\n  cr1_reg = usart_reg->CR1;\n  cr3_reg = usart_reg->CR3;\n\n  if ((sr_reg & USART_SR_RXNE) && (cr1_reg & USART_CR1_RXNEIE)) {\n    UART_Receive_IT(uart_handle);\n    return;\n  }\n\n  if ((sr_reg & USART_SR_TXE) && (cr1_reg & USART_CR1_TXEIE)) {\n    UART_Transmit_IT(uart_handle);\n    return;\n  }\n\n  if ((sr_reg & USART_SR_TC) && (cr1_reg & USART_CR1_TCIE)) {\n    UART_EndTransmit_IT(uart_handle);\n    return;\n  }\n\n  if (sr_reg & (USART_SR_ORE | USART_SR_NE | USART_SR_FE | USART_SR_PE)) {\n    error_code = 0;\n    if (sr_reg & USART_SR_ORE) {\n      error_code |= UART_ERROR_ORE;\n    }\n    if (sr_reg & USART_SR_NE) {\n      error_code |= UART_ERROR_NE;\n    }\n    if (sr_reg & USART_SR_FE) {\n      error_code |= UART_ERROR_FE;\n    }\n    if (sr_reg & USART_SR_PE) {\n      error_code |= UART_ERROR_PE;\n    }\n    uart_handle->ErrorCode |= error_code;\n\n    if ((error_code & UART_ERROR_PE) == 0 && (cr3_reg & USART_CR3_EIE) == 0) {\n      HAL_UART_ErrorCallback(uart_handle);\n      uart_handle->ErrorCode = 0;\n      return;\n    }\n\n    UART_EndRxTransfer(uart_handle);\n    if ((cr3_reg & USART_CR3_EIE) == 0) {\n      HAL_UART_ErrorCallback(uart_handle);\n      return;\n    }\n\n    usart_reg->CR3 &= ~USART_CR3_DMAR;\n    dma_handle = uart_handle->hdmarx;\n    if (dma_handle == NULL) {\n      HAL_UART_ErrorCallback(uart_handle);\n      return;\n    }\n\n    dma_handle->XferAbortCallback = DAT_08003118;\n    status = HAL_DMA_Abort_IT(dma_handle);\n    if (status != HAL_OK) {\n      (*dma_handle->XferAbortCallback)(dma_handle);\n      return;\n    }\n  }\n}\n",
            "called": [
                "UART_EndRxTransfer",
                "HAL_UART_ErrorCallback",
                "UART_EndTransmit_IT",
                "UART_Transmit_IT",
                "UART_Receive_IT",
                "HAL_DMA_Abort_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ffc",
            "calling": [
                "UART4_IRQHandler",
                "USART2_IRQHandler",
                "UART7_IRQHandler",
                "USART3_IRQHandler",
                "USART6_IRQHandler",
                "USART1_IRQHandler",
                "UART5_IRQHandler",
                "UART8_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_uart_interrupt_08002ffc"
        },
        "FUN_0800387c": {
            "renaming": {
                "FUN_0800387c": "get_i2c_t_from_i2c_handle_0800387c",
                "hi2c": "i2c_handle",
                "i2c_t": "i2c_type",
                "EventCount": "event_count"
            },
            "code": "i2c_t * get_i2c_t_from_i2c_handle_0800387c(I2C_HandleTypeDef *i2c_handle)\n{\n    return (i2c_t *)&i2c_handle[-1].EventCount;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800387c",
            "calling": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_AddrCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "imported": false,
            "current_name": "get_i2c_t_from_i2c_handle_0800387c"
        },
        "FUN_0800351e": {
            "renaming": {
                "FUN_0800351e": "find_pin_0800351e",
                "peripheral": "peripheral",
                "map": "map",
                "PVar1": "pin",
                "NC": "NC"
            },
            "code": "PinName_conflict find_pin_0800351e(void *peripheral, PinMap_conflict *map)\n{\n  PinName_conflict pin;\n  if (peripheral != NULL) {\n    pin = pinmap_find_pin_0800351e(peripheral, map);\n    return pin;\n  }\n  return NC;\n}",
            "called": [
                "pinmap_find_pin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800351e",
            "calling": [
                "uart_debug_init",
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "find_pin_0800351e"
        },
        "FUN_080059f8": {
            "renaming": {
                "FUN_080059f8": "do_nothing_080059f8"
            },
            "code": "\nvoid do_nothing_080059f8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059f8",
            "calling": [
                "__libc_init_array",
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "do_nothing_080059f8"
        },
        "FUN_08002f66": {
            "renaming": {
                "FUN_08002f66": "receive_data_08002f66",
                "huart": "uart",
                "pbVar1": "byte_ptr",
                "uVar2": "count",
                "puVar3": "uint8_ptr"
            },
            "code": "HAL_StatusTypeDef receive_data_08002f66(UART_HandleTypeDef *uart)\n{\n  byte *byte_ptr;\n  uint16_t count;\n  uint8_t *uint8_ptr;\n  \n  if (uart->RxState != HAL_UART_STATE_BUSY_RX) {\n    return HAL_BUSY;\n  }\n  if ((uart->Init).WordLength == 0x1000) {\n    if ((uart->Init).Parity == 0) {\n      *(ushort *)uart->pRxBuffPtr = (ushort)((uart->Instance->DR << 0x17) >> 0x17);\n      uart->pRxBuffPtr += 2;\n    }\n    else {\n      *(ushort *)uart->pRxBuffPtr = (ushort)uart->Instance->DR & 0xff;\n      uart->pRxBuffPtr += 1;\n    }\n  }\n  else if ((uart->Init).Parity == 0) {\n    uint8_ptr = uart->pRxBuffPtr;\n    uart->pRxBuffPtr = uint8_ptr + 1;\n    *uint8_ptr = (uint8_t)uart->Instance->DR;\n  }\n  else {\n    byte_ptr = uart->pRxBuffPtr;\n    uart->pRxBuffPtr = byte_ptr + 1;\n    *byte_ptr = (byte)uart->Instance->DR & 0x7f;\n  }\n  count = uart->RxXferCount - 1;\n  uart->RxXferCount = count;\n  if (count != 0) {\n    return HAL_OK;\n  }\n  uart->Instance->CR1 &= 0xfffffedf;\n  uart->Instance->CR3 &= 0xfffffffe;\n  uart->RxState = HAL_UART_STATE_READY;\n  HAL_UART_RxCpltCallback(uart);\n  return HAL_OK;\n}",
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f66",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "receive_data_08002f66"
        },
        "FUN_080034b6": {
            "renaming": {
                "FUN_080034b6": "write_GPIO_pin_state_080034b6",
                "port": "gpio_port",
                "pin": "pin_number",
                "val": "pin_state"
            },
            "code": "void write_GPIO_pin_state_080034b6(GPIO_TypeDef *gpio_port, uint32_t pin_number, uint32_t pin_state) {\n  if (pin_state == 0) {\n    HAL_GPIO_WritePin(gpio_port, (uint16_t)pin_number, GPIO_PIN_RESET);\n    return;\n  }\n  HAL_GPIO_WritePin(gpio_port, (uint16_t)pin_number, GPIO_PIN_SET);\n  return;\n}",
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034b6",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "write_GPIO_pin_state_080034b6"
        },
        "FUN_08003eac": {
            "renaming": {
                "FUN_08003eac": "setup_serial_08003eac",
                "obj": "serial_obj",
                "callback": "tx_callback",
                "bVar1": "serial_index"
            },
            "code": "void setup_serial_08003eac(serial_t *serial_obj, _func_int_serial_t_ptr *tx_callback)\n{\n  if (serial_obj != NULL) {\n    uint8_t serial_index = serial_obj->index;\n    _func_int_serial_t_ptr **tx_callback_ptr = (_func_int_serial_t_ptr **)(PTR_tx_callback_08003ef4 + serial_index * 4);\n    *tx_callback_ptr = tx_callback;\n    serial_t **serial_obj_ptr = (serial_t **)(PTR_tx_callback_obj_08003ef8 + serial_index * 4);\n    *serial_obj_ptr = serial_obj;\n    HAL_NVIC_SetPriority(serial_obj->irq, 0, 2);\n    HAL_NVIC_EnableIRQ(serial_obj->irq);\n    UART_HandleTypeDef **uart_handler_ptr = (UART_HandleTypeDef **)(PTR_uart_handlers_08003efc + serial_index * 4);\n    HAL_UART_Transmit_IT(*uart_handler_ptr, serial_obj->tx_buff + serial_obj->tx_tail, 1);\n  }\n}",
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_UART_Transmit_IT",
                "HAL_NVIC_EnableIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eac",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "setup_serial_08003eac"
        },
        "FUN_08004064": {
            "renaming": {
                "FUN_08004064": "handle_UART7_interrupt_08004064",
                "PTR_uart_handlers_08004078": "uart_handlers_PTR"
            },
            "code": "void handle_UART7_interrupt_08004064(void)\n{\n  HAL_NVIC_ClearPendingIRQ(UART7_IRQn);\n  UART_HandleTypeDef* uart_handler = *(UART_HandleTypeDef **)(PTR_uart_handlers_08004078 + 0x18);\n  HAL_UART_IRQHandler(uart_handler);\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004064",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART7_interrupt_08004064"
        },
        "FUN_08003e18": {
            "renaming": {
                "FUN_08003e18": "receive_data_from_serial_08003e18",
                "obj": "serial_obj",
                "c": "received_char",
                "uVar1": "is_rx_active"
            },
            "code": "int receive_data_from_serial_08003e18(serial_t *serial_obj, uchar *received_char) {\n  uint8_t is_rx_active;\n  if (serial_obj == NULL) {\n    return -1;\n  }\n  is_rx_active = serial_rx_active(serial_obj);\n  if (is_rx_active == 0) {\n    *received_char = serial_obj->recv;\n    HAL_UART_Receive_IT(*(UART_HandleTypeDef **)(PTR_uart_handlers_08003e50 + (uint)serial_obj->index * 4), &serial_obj->recv, 1);\n    return 0;\n  }\n  return -1;\n}",
            "called": [
                "HAL_UART_Receive_IT",
                "serial_rx_active"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e18",
            "calling": [
                "_rx_complete_irq"
            ],
            "imported": false,
            "current_name": "receive_data_from_serial_08003e18"
        },
        "FUN_080040fc": {
            "renaming": {
                "FUN_080040fc": "set_errno_to_22_080040fc",
                "pid_UNUSED": "pid",
                "sig_UNUSED": "sig",
                "PTR_errno_08004108": "PTR_errno"
            },
            "code": "int set_errno_to_22_080040fc(int pid, int sig) {\n    *(undefined4 *)PTR_errno_08004108_08004108 = 22;\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040fc",
            "calling": [
                "_kill_r"
            ],
            "imported": false,
            "current_name": "set_errno_to_22_080040fc"
        },
        "FUN_08002dd0": {
            "renaming": {
                "FUN_08002dd0": "send_data_via_uart_08002dd0",
                "*huart": "*uart_handle",
                "pData": "*data",
                "Size": "size",
                "Timeout": "timeout",
                "HVar1": "status",
                "Tickstart": "start_tick"
            },
            "code": "HAL_StatusTypeDef send_data_via_uart_08002dd0(UART_HandleTypeDef *uart_handle, uint8_t *data, uint16_t size, uint32_t timeout)\n{\n    HAL_StatusTypeDef status;\n    uint32_t start_tick;\n    if (uart_handle->gState != HAL_UART_STATE_READY) {\n        return HAL_BUSY;\n    }\n    if (data == NULL || size == 0 || uart_handle->Lock == HAL_LOCKED) {\n        return HAL_ERROR;\n    }\n    uart_handle->Lock = HAL_LOCKED;\n    uart_handle->ErrorCode = 0;\n    uart_handle->gState = HAL_UART_STATE_BUSY_TX;\n    start_tick = HAL_GetTick();\n    uart_handle->TxXferSize = size;\n    uart_handle->TxXferCount = size;\n    while (uart_handle->TxXferCount != 0) {\n        uart_handle->TxXferCount--;\n        if (uart_handle->Init.WordLength == UART_WORDLENGTH_9B) {\n            status = UART_WaitOnFlagUntilTimeout(uart_handle, UART_FLAG_TXE, RESET, start_tick, timeout);\n            if (status != HAL_OK) {\n                return HAL_TIMEOUT;\n            }\n            uart_handle->Instance->DR = *(uint16_t *)data & 0x1FF;\n            if (uart_handle->Init.Parity == UART_PARITY_NONE) {\n                data += 2;\n            }\n            else {\n                data++;\n            }\n        }\n        else {\n            status = UART_WaitOnFlagUntilTimeout(uart_handle, UART_FLAG_TXE, RESET, start_tick, timeout);\n            if (status != HAL_OK) {\n                return HAL_TIMEOUT;\n            }\n            uart_handle->Instance->DR = (uint8_t)*data;\n            data++;\n        }\n    }\n    status = UART_WaitOnFlagUntilTimeout(uart_handle, UART_FLAG_TC, RESET, start_tick, timeout);\n    if (status == HAL_OK) {\n        uart_handle->gState = HAL_UART_STATE_READY;\n        uart_handle->Lock = HAL_UNLOCKED;\n    }\n    else {\n        status = HAL_TIMEOUT;\n    }\n    return status;\n}\n",
            "called": [
                "HAL_GetTick",
                "UART_WaitOnFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dd0",
            "calling": [
                "uart_debug_write"
            ],
            "imported": false,
            "current_name": "send_data_via_uart_08002dd0"
        },
        "FUN_08004860": {
            "renaming": {
                "FUN_08004860": "format_and_print_08004860",
                "__stream": "file_stream",
                "__format": "format_string",
                "iVar1": "print_result",
                "in_r2": "",
                "in_r3": "",
                "uStack_8": "",
                "uStack_4": "",
                "PTR__impure_ptr_08004880": "",
                "_vFUN_08004860_r": "",
                "return": ""
            },
            "code": "int format_and_print_08004860(FILE* file_stream, char* format_string, ...) {\n\tva_list args_list;\n\tva_start(args_list, format_string);\n\tint print_result = vfprintf(file_stream, format_string, args_list);\n\tva_end(args_list);\n\treturn print_result;\n}",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004860",
            "calling": [
                "__assert_func"
            ],
            "imported": false,
            "current_name": "format_and_print_08004860"
        },
        "FUN_08004622": {
            "renaming": {
                "__thiscall Print::FUN_08004622": "printNumber",
                "this": "self",
                "n": "number",
                "base": "base",
                "sVar1": "size",
                "FUN_08004622": "printNumber_08004622"
            },
            "code": "size_t Print::printNumber_08004622(Print *this, ulong number, int base) {\n  size_t size;\n  if (base != 0) {\n    size = printNumber_08004622(this, number, (uint8_t)base);\n  } else {\n    size = (**this->_vptr_Print)(this, number & 0xff);\n  }\n  return size;\n}",
            "called": [
                "printNumber"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004622",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "printNumber_08004622"
        },
        "FUN_08003414": {
            "renaming": {
                "FUN_08003414": "stop_pwm_signal_08003414",
                "pin": "pin_name",
                "Channel": "channel_number",
                "uVar1": "pin_function",
                "timHandle": "tim_handle"
            },
            "code": "void stop_pwm_signal_08003414(PinName_conflict pin)\n{\n  uint32_t channel_number;\n  uint32_t pin_function;\n  TIM_HandleTypeDef tim_handle;\n  \n  tim_handle.Instance = (TIM_TypeDef *)pinmap_peripheral(pin, (PinMap_conflict *)PTR_PinMap_PWM_08003468);\n  if ((tim_handle.Instance != (TIM_TypeDef *)0x0) && ((channel_number = get_pwm_channel(pin), channel_number == 0 || channel_number == 4 || channel_number == 8 || channel_number == 0xc || channel_number == 0x18))) {\n    pin_function = pinmap_function(pin, (PinMap_conflict *)PTR_PinMap_PWM_08003468);\n    if ((pin_function & 0x100000) == 0) {\n      HAL_TIM_PWM_Stop(&tim_handle, channel_number);\n    }\n    else {\n      HAL_TIMEx_PWMN_Stop(&tim_handle, channel_number);\n    }\n    HAL_TIM_PWM_DeInit(&tim_handle);\n  }\n  return;\n}",
            "called": [
                "get_pwm_channel",
                "HAL_TIM_PWM_DeInit",
                "pinmap_function",
                "pinmap_peripheral",
                "HAL_TIMEx_PWMN_Stop",
                "HAL_TIM_PWM_Stop"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003414",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "stop_pwm_signal_08003414"
        },
        "FUN_08005718": {
            "renaming": {
                "FUN_08005718": "seek_file_08005718",
                "param_1": "err_code",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "puVar1": "err_ptr",
                "iVar2": "seek_result"
            },
            "code": "void seek_file_08005718(int *err_code, int file_descriptor, int offset, int whence) {\n  undefined *err_ptr = PTR_errno_08005738;\n  *(undefined4 *)PTR_errno_08005738 = 0;\n  int seek_result = _lseek(file_descriptor, offset, whence);\n  if ((seek_result == -1) && (*(int *)err_ptr != 0)) {\n    *err_code = *(int *)err_ptr;\n  }\n  return;\n}",
            "called": [
                "_lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005718",
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "imported": false,
            "current_name": "seek_file_08005718"
        },
        "FUN_080011c0": {
            "renaming": {
                "FUN_080011c0": "configureI2C_080011c0",
                "*hi2c": "*i2cHandle",
                "hi2c->Mode": "mode",
                "hi2c->EventCount": "eventCount",
                "hi2c->Devaddress": "devAddr",
                "hi2c->Instance->DR": "i2cHandle->Instance->DR",
                "(hi2c->Init).AddressingMode": "(i2cHandle->Init).AddressingMode",
                "HAL_I2C_MODE_MEM": "HAL_I2C_MODE_MEM",
                "HAL_I2C_STATE_BUSY_TX": "HAL_I2C_STATE_BUSY_TX"
            },
            "code": "HAL_StatusTypeDef configureI2C_080011c0(I2C_HandleTypeDef *i2cHandle)\n{\n    uint8_t devAddr = i2cHandle->Devaddress;\n    uint8_t mode = i2cHandle->Mode;\n    uint16_t eventCount = i2cHandle->EventCount;\n\n    if (mode == HAL_I2C_MODE_MEM)\n    {\n        if (eventCount == 0)\n        {\n            i2cHandle->Instance->DR = devAddr & 0xFE;\n        }\n        else\n        {\n            i2cHandle->Instance->DR = devAddr & 0xFF | 1;\n        }\n    }\n    else if ((i2cHandle->Init).AddressingMode == 0x4000)\n    {\n        if (i2cHandle->State == HAL_I2C_STATE_BUSY_TX)\n        {\n            i2cHandle->Instance->DR = devAddr & 0xFE;\n        }\n        else\n        {\n            i2cHandle->Instance->DR = devAddr & 0xFF | 1;\n        }\n    }\n    else if (eventCount == 0)\n    {\n        i2cHandle->Instance->DR = (devAddr << 16) >> 23 & 6 | 0xF0;\n    }\n    else if (eventCount == 1)\n    {\n        i2cHandle->Instance->DR = (devAddr << 16) >> 23 & 6 | 0xF1;\n    }\n    return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011c0",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "configureI2C_080011c0"
        },
        "FUN_080047f0": {
            "renaming": {
                "FUN_080047f0": "initialize_static_variables_080047f0"
            },
            "code": "void initialize_static_variables_080047f0(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f0",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_080047f0"
        },
        "FUN_0800502c": {
            "renaming": {
                "FUN_0800502c": "send_char_0800502c",
                "param_1": "socket",
                "param_2": "character",
                "param_3": "stream",
                "param_4": "flags",
                "iVar1": "read_count",
                "uVar2": "result",
                "puVar3": "buffer_ptr"
            },
            "code": "uint send_char_0800502c(int socket, uint character, int *stream, undefined4 flags)\n{\n  int read_count;\n  uint result;\n  undefined *buffer_ptr;\n  \n  if ((socket != 0) && (*(int *)(socket + 0x18) == 0)) {\n    __sinit();\n  }\n  if (stream == (int *)DAT___sf_fake_stdin_080050c4) {\n    stream = *(int **)(socket + 4);\n  }\n  else if (stream == (int *)DAT___sf_fake_stdout_080050c8) {\n    stream = *(int **)(socket + 8);\n  }\n  else if (stream == (int *)DAT___sf_fake_stderr_080050cc) {\n    stream = *(int **)(socket + 0xc);\n  }\n  stream[2] = stream[6];\n  result = (uint)*(ushort *)(stream + 3);\n  read_count = result << 0x1c;\n  if (((read_count < 0) && (result = stream[4], result != 0)) ||\n     (read_count = __swsetup_r(socket, stream, read_count, result, flags), read_count == 0)) {\n    read_count = *stream - stream[4];\n    character = character & 0xff;\n    if ((read_count < stream[5]) || (read_count = _fflush_r(socket, stream), read_count == 0)) {\n      stream[2] = stream[2] + -1;\n      buffer_ptr = (undefined *)*stream;\n      *stream = (int)(buffer_ptr + 1);\n      *buffer_ptr = (char)character;\n      if (read_count + 1 != stream[5]) {\n        if (-1 < (int)((uint)*(ushort *)(stream + 3) << 0x1f)) {\n          return character;\n        }\n        if (character != 10) {\n          return character;\n        }\n      }\n      read_count = _fflush_r(socket, stream);\n      if (read_count == 0) {\n        return character;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "__swsetup_r",
                "_fflush_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800502c",
            "calling": [
                "__sfputc_r"
            ],
            "imported": false,
            "current_name": "send_char_0800502c"
        },
        "FUN_08000b54": {
            "renaming": {
                "__thiscall Modbus::FUN_08000b54": "process_Modbus_request",
                "regs": "registers",
                "u8size": "register_count",
                "u8exception": "exception_code",
                "uVar1": "rx_byte_count",
                "uVar2": "rx_byte",
                "uVar3": "current_time",
                "unaff_r5": "rx_buffer_valid",
                "au16regs": "registers",
                "u8regsize": "register_count",
                "u8serno": "serial_number",
                "port": "serial_port",
                "getRxBuffer": "get_rx_buffer",
                "au8Buffer": "rx_buffer",
                "u8id": "id",
                "validateRequest": "validate_request",
                "millis": "millis",
                "u32timeOut": "timeout",
                "u16timeOut": "timeout_interval",
                "process_FC1": "process_function_code_1_2",
                "process_FC3": "process_function_code_3_4",
                "process_FC5": "process_function_code_5",
                "process_FC6": "process_function_code_6",
                "process_FC15": "process_function_code_15",
                "process_FC16": "process_function_code_16",
                "buildException": "build_exception",
                "sendTxBuffer": "send_tx_buffer",
                "u8lastError": "last_error",
                "FUN_08000b54": "process_Modbus_request_08000b54"
            },
            "code": "int8_t __thiscall process_Modbus_request_08000b54(Modbus *this, uint16_t *registers, uint8_t register_count) {\n  uint8_t exception_code;\n  uint8_t rx_byte_count;\n  uint8_t rx_buffer_valid = 0;\n  uint32_t current_time = 0;\n  uint8_t function_code;\n  int8_t result = -1;\n\n  this->registers = registers;\n  this->register_count = register_count;\n\n  if (this->serial_number < 4) {\n    uint8_t rx_byte = (*(this->port->super_Stream).super_Print._vptr_Print[2])() & 0xff;\n    rx_buffer_valid = (rx_byte != 0 && rx_byte >= 8);\n  }\n\n  if (rx_buffer_valid) {\n    rx_byte_count = get_rx_buffer(this);\n    this->last_error = rx_byte_count;\n    if (this->rx_buffer[0] == this->id) {\n      exception_code = validate_request(this);\n      if (exception_code == 0) {\n        current_time = millis();\n        this->timeout = this->timeout_interval + current_time;\n        this->last_error = 0;\n        function_code = this->rx_buffer[1];\n        switch (function_code) {\n          case 0x01:\n          case 0x02:\n            result = process_function_code_1_2(this, registers, register_count);\n            break;\n          case 0x03:\n          case 0x04:\n            result = process_function_code_3_4(this, registers, register_count);\n            break;\n          case 0x05:\n            result = process_function_code_5(this, registers, register_count);\n            break;\n          case 0x06:\n            result = process_function_code_6(this, registers, register_count);\n            break;\n          case 0x0f:\n            result = process_function_code_15(this, registers, register_count);\n            break;\n          case 0x10:\n            result = process_function_code_16(this, registers, register_count);\n            break;\n        }\n      }\n      else {\n        if (exception_code != 0xff) {\n          build_exception(this, exception_code);\n          send_tx_buffer(this);\n        }\n        this->last_error = exception_code;\n        result = exception_code;\n      }\n    }\n  }\n  return result;\n}",
            "called": [
                "process_FC5",
                "getRxBuffer",
                "validateRequest",
                "process_FC3",
                "millis",
                "sendTxBuffer",
                "process_FC1",
                "buildException",
                "process_FC6",
                "process_FC15",
                "process_FC16"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b54",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "process_Modbus_request_08000b54"
        },
        "FUN_08000d96": {
            "renaming": {
                "FUN_08000d96": "do_nothing_08000d96"
            },
            "code": "\nvoid do_nothing_08000d96(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d96",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08000d96"
        },
        "FUN_0800376e": {
            "renaming": {
                "FUN_0800376e": "handle_timer_interrupt_0800376e",
                "htim": "timer_handle",
                "psVar1": "timer_obj",
                "get_timer_obj": "get_timer_object",
                "irqHandle": "interrupt_handler"
            },
            "code": "void handle_timer_interrupt_0800376e(TIM_HandleTypeDef *timer_handle) {\n  stimer_t *timer_obj;\n  timer_obj = get_timer_object(timer_handle);\n  if (timer_obj->interrupt_handler != (_func_void_stimer_t_ptr *)0x0) {\n    (*timer_obj->interrupt_handler)(timer_obj);\n  }\n  return;\n}",
            "called": [
                "get_timer_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376e",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_timer_interrupt_0800376e"
        },
        "FUN_08000d98": {
            "renaming": {
                "FUN_08000d98": "configureSysTick_08000d98",
                "TickPriority": "tickPriority",
                "uVar1": "systickConfig",
                "clockSpeed": "clockSpeed",
                "tickFreq": "tickFreq",
                "PTR_SystemCoreClock_08000ddc": "PTR_SystemCoreClock_08000ddc",
                "PTR_uwTickFreq_08000dd8": "PTR_uwTickFreq_08000dd8",
                "HAL_SYSTICK_Config": "HAL_SYSTICK_Config",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_NVIC_SetPriority": "HAL_NVIC_SetPriority",
                "SysTick_IRQn": "SysTick_IRQn",
                "PTR_uwTickPrio_08000de0": "PTR_uwTickPrio_08000de0",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef configureSysTick_08000d98(uint32_t tickPriority)\n{\n    uint32_t clockSpeed = *(uint *)PTR_SystemCoreClock_08000ddc;\n    uint32_t tickFreq = *(uint8_t *)PTR_uwTickFreq_08000dd8;\n    uint32_t systickConfig = clockSpeed / (1000 / tickFreq);\n    HAL_StatusTypeDef status = HAL_SYSTICK_Config((uint32_t)systickConfig);\n    if (status != HAL_OK) {\n        return HAL_ERROR;\n    }\n    if (tickPriority > 0xf) {\n        return HAL_ERROR;\n    }\n    HAL_NVIC_SetPriority(SysTick_IRQn, tickPriority, 0);\n    *(uint32_t *)PTR_uwTickPrio_08000de0 = tickPriority;\n    return HAL_OK;\n}",
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_SYSTICK_Config"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d98",
            "calling": [
                "HAL_RCC_ClockConfig",
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "configureSysTick_08000d98"
        },
        "FUN_08003f48": {
            "renaming": {
                "FUN_08003f48": "transmit_data_over_uart_08003f48",
                "*huart": "*uart_handler",
                "bVar1": "uart_index",
                "uVar2": "uart_index_as_uint",
                "iVar3": "callback_result",
                "iVar4": "callback_obj",
                "PTR_tx_callback_obj_08003f88": "PTR_tx_callback_obj",
                "PTR_tx_callback_08003f8c": "PTR_tx_callback",
                "PTR_uart_handlers_08003f90": "PTR_uart_handlers"
            },
            "code": "void transmit_data_over_uart_08003f48(UART_HandleTypeDef *uart_handler) {\n                            uint8_t uart_index = get_uart_index(uart_handler);\n                            if(uart_index < 10) {\n                                int callback_obj = *(int *)(PTR_tx_callback_08003f8c_obj_08003f88_08003f88 + uart_index * 4);\n                                code *callback_function = *(code **)(PTR_tx_callback_08003f8c_08003f8c + uart_index * 4);\n                                int result = (*callback_function)(callback_obj);\n                                if(result != -1) {\n                                    uint8_t *data_ptr = (uint8_t *)(*(int *)(callback_obj + 0x68) + (uint)*(ushort *)(callback_obj + 0x6e));\n                                    uint8_t data_size = 1;\n                                    uint8_t *uart_handler_ptr = *(UART_HandleTypeDef **)(PTR_uart_handlers_08003f90_08003f90 + (uint)*(byte *)(callback_obj + 0x44) * 4);\n                                    HAL_UART_Transmit_IT(uart_handler_ptr, data_ptr, data_size);\n                                }\n                            }\n                        }",
            "called": [
                "uart_index",
                "HAL_UART_Transmit_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f48",
            "calling": [
                "UART_EndTransmit_IT"
            ],
            "imported": false,
            "current_name": "transmit_data_over_uart_08003f48"
        },
        "FUN_0800340c": {
            "renaming": {
                "FUN_0800340c": "disable_timer_clock_0800340c",
                "htim": "timer_handle"
            },
            "code": "void disable_timer_clock_0800340c(TIM_HandleTypeDef *timer_handle)\n{\n  timer_disable_clock(timer_handle);\n  return;\n}",
            "called": [
                "timer_disable_clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800340c",
            "calling": [
                "HAL_TIM_PWM_DeInit"
            ],
            "imported": false,
            "current_name": "disable_timer_clock_0800340c"
        },
        "FUN_0800352e": {
            "renaming": {
                "FUN_0800352e": "find_pin_function_0800352e",
                "pin": "target_pin",
                "map": "pin_map"
            },
            "code": "uint32_t find_pin_function_0800352e(PinName_conflict target_pin, PinMap_conflict *pin_map) {\n  while (true) {\n    if (pin_map->pin == NC) {\n      return 0xffffffff;\n    }\n    if (pin_map->pin == target_pin) {\n      break;\n    }\n    pin_map++;\n  }\n  return pin_map->function;\n}",
            "called": [
                "pinmap_find_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800352e",
            "calling": [
                "pinmap_function",
                "pinmap_find_function"
            ],
            "imported": false,
            "current_name": "find_pin_function_0800352e"
        },
        "FUN_0800582c": {
            "renaming": {
                "std::ctype_byname<wchar_t>::FUN_0800582c": "set_flags_of_pointers",
                "FUN_0800582c": "set_flags_of_pointers_0800582c"
            },
            "code": "void set_flags_of_pointers_0800582c(void)\n{\n    if (-1 < *(int *)PTR_id_080058c0 << 0x1f) {\n        *(undefined4 *)PTR_id_080058c0 = 1;\n    }\n    if (-1 < *(int *)PTR_id_080058c4 << 0x1f) {\n        *(undefined4 *)PTR_id_080058c4 = 1;\n    }\n    if (-1 < *(int *)PTR_id_080058c8 << 0x1f) {\n        *(undefined4 *)PTR_id_080058c8 = 1;\n    }\n    if (-1 < *(int *)PTR_id_080058cc << 0x1f) {\n        *(undefined4 *)PTR_id_080058cc = 1;\n    }\n    if (-1 < *(int *)PTR_id_080058d0 << 0x1f) {\n        *(undefined4 *)PTR_id_080058d0 = 1;\n    }\n    if (-1 < *(int *)PTR_id_080058d4 << 0x1f) {\n        *(undefined4 *)PTR_id_080058d4 = 1;\n    }\n    if (-1 < *(int *)PTR_id_080058d8 << 0x1f) {\n        *(undefined4 *)PTR_id_080058d8 = 1;\n    }\n    if (-1 < *(int *)PTR_id_080058dc << 0x1f) {\n        *(undefined4 *)PTR_id_080058dc = 1;\n    }\n    if (-1 < *(int *)PTR_id_080058e0 << 0x1f) {\n        *(undefined4 *)PTR_id_080058e0 = 1;\n    }\n    if (-1 < *(int *)PTR_id_080058e4 << 0x1f) {\n        *(undefined4 *)PTR_id_080058e4 = 1;\n    }\n    if (-1 < *(int *)PTR_id_080058e8 << 0x1f) {\n        *(undefined4 *)PTR_id_080058e8 = 1;\n    }\n    if (-1 < *(int *)PTR_id_080058ec << 0x1f) {\n        *(undefined4 *)PTR_id_080058ec = 1;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800582c",
            "calling": [],
            "imported": false,
            "current_name": "set_flags_of_pointers_0800582c"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "i2c_handle_08001ab0",
                "*hi2c": "*handle",
                "HVar1": "status",
                "*puVar2": "*buffer_ptr",
                "*pIVar3": "*instance"
            },
            "code": "void i2c_handle_08001ab0(I2C_HandleTypeDef *handle)\n{\n  HAL_StatusTypeDef status;\n  uint8_t *buffer_ptr;\n  I2C_TypeDef *instance;\n  if ((byte)handle->State - 0x29 < 2) {\n    handle->PreviousState = 0;\n    handle->State = HAL_I2C_STATE_LISTEN;\n  }\n  else {\n    if ((handle->State != HAL_I2C_STATE_ABORT) && ((handle->Instance->CR2 & 0x800) == 0)) {\n      handle->State = HAL_I2C_STATE_READY;\n    }\n    handle->PreviousState = 0;\n    handle->Mode = HAL_I2C_MODE_NONE;\n  }\n  handle->Instance->CR1 &= 0xfffff7ff;\n  instance = handle->Instance;\n  if ((instance->CR2 & 0x800) == 0) {\n    if (handle->State == HAL_I2C_STATE_ABORT) {\n      handle->State = HAL_I2C_STATE_READY;\n      handle->ErrorCode = 0;\n      if ((instance->SR1 & 0x40) != 0) {\n        buffer_ptr = handle->pBuffPtr;\n        handle->pBuffPtr = buffer_ptr + 1;\n        *buffer_ptr = (uint8_t)instance->DR;\n      }\n      handle->Instance->CR1 &= 0xfffffffe;\n      HAL_I2C_AbortCpltCallback(handle);\n    }\n    else {\n      if ((instance->SR1 & 0x40) != 0) {\n        buffer_ptr = handle->pBuffPtr;\n        handle->pBuffPtr = buffer_ptr + 1;\n        *buffer_ptr = (uint8_t)instance->DR;\n      }\n      HAL_I2C_ErrorCallback(handle);\n    }\n  }\n  else {\n    instance->CR2 &= 0xfffff7ff;\n    if (handle->hdmatx->State == HAL_DMA_STATE_READY) {\n      handle->hdmarx->XferAbortCallback = i2c_handle_08001ab0;\n      status = HAL_DMA_Abort_IT(handle->hdmarx);\n      if (status != HAL_OK) {\n        if ((handle->Instance->SR1 & 0x40) != 0) {\n          buffer_ptr = handle->pBuffPtr;\n          handle->pBuffPtr = buffer_ptr + 1;\n          *buffer_ptr = (uint8_t)handle->Instance->DR;\n        }\n        handle->Instance->CR1 &= 0xfffffffe;\n        handle->State = HAL_I2C_STATE_READY;\n        (*handle->hdmarx->XferAbortCallback)(handle->hdmarx);\n      }\n    }\n    else {\n      handle->hdmatx->XferAbortCallback = i2c_handle_08001ab0;\n      status = HAL_DMA_Abort_IT(handle->hdmatx);\n      if (status != HAL_OK) {\n        handle->Instance->CR1 &= 0xfffffffe;\n        handle->State = HAL_I2C_STATE_READY;\n        (*handle->hdmatx->XferAbortCallback)(handle->hdmatx);\n      }\n    }\n  }\n  if ((handle->State == HAL_I2C_STATE_LISTEN) && ((handle->ErrorCode & 4) != 0)) {\n    handle->XferOptions = 0;\n    handle->PreviousState = 0;\n    handle->State = HAL_I2C_STATE_READY;\n    handle->Mode = HAL_I2C_MODE_NONE;\n    HAL_I2C_ListenCpltCallback(handle);\n  }\n  return;\n}",
            "called": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ListenCpltCallback",
                "HAL_DMA_Abort_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "I2C_Slave_STOPF",
                "HAL_I2C_ER_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_handle_08001ab0"
        },
        "FUN_08001f9c": {
            "renaming": {
                "FUN_08001f9c": "initialize_device_08001f9c",
                "uVar1": "current_time",
                "uVar2": "previous_time",
                "tmpreg": "ptr1",
                "DAT_0800200c": "ptr2",
                "DAT_08002010": "ptr3",
                "DAT_08002014": "ptr4"
            },
            "code": "HAL_StatusTypeDef initialize_device_08001f9c(void)\n{\n  uint32_t current_time, previous_time;\n  uint32_t* ptr1 = (uint32_t*)(DAT_0800200c + 0x40);\n  uint32_t* DAT_0800200c = (uint32_t*)(DAT_08002014 + 4);\n  uint32_t* DAT_08002010 = (uint32_t*)DAT_08002018;\n  *ptr1 |= 0x10000000;\n  *DAT_08002010 = 1;\n  previous_time = HAL_GetTick();\n  do {\n    if ((*DAT_0800200c & 0x10000) != 0) {\n      *DAT_08002010 = 1;\n      previous_time = HAL_GetTick();\n      do {\n        if ((*DAT_0800200c & 0x20000) != 0) {\n          return HAL_OK;\n        }\n        current_time = HAL_GetTick();\n      } while (current_time - previous_time < 0x3e9);\n      return HAL_TIMEOUT;\n    }\n    current_time = HAL_GetTick();\n  } while (current_time - previous_time < 0x3e9);\n  return HAL_TIMEOUT;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f9c",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "initialize_device_08001f9c"
        },
        "FUN_08000d8c": {
            "renaming": {
                "FUN_08000d8c": "infiniteLoop_08000d8c"
            },
            "code": "void infiniteLoop_08000d8c() {\n  while(true){}\n}",
            "called": [
                "CAN2_SCE_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d8c",
            "calling": [
                "CAN2_SCE_IRQHandler"
            ],
            "imported": false,
            "current_name": "infiniteLoop_08000d8c"
        },
        "FUN_08000d8e": {
            "renaming": {
                "FUN_08000d8e": "initialize_EVP_key_context_08000d8e",
                "ctx": "key_ctx",
                "hw_config_FUN_08000d8e": "initialize_hw_config"
            },
            "code": "int initialize_EVP_key_context_08000d8e(EVP_PKEY_CTX *key_ctx) {\n  initialize_hw_config();\n  return (int)key_ctx;\n}",
            "called": [
                "hw_config_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d8e",
            "calling": [
                "premain"
            ],
            "imported": false,
            "current_name": "initialize_EVP_key_context_08000d8e"
        },
        "FUN_08004638": {
            "renaming": {
                "FUN_08004638": "print_character_08004638",
                "this": "this",
                "b": "character",
                "base": "base",
                "sVar1": "size"
            },
            "code": "size_t __thiscall Print::print_character_08004638(Print *this, uchar character, int base) {\n  size_t size = print_character_08004638(this, (uint)character, base);\n  return size;\n}",
            "called": [
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004638",
            "calling": [
                "printTo"
            ],
            "imported": false,
            "current_name": "print_character_08004638"
        },
        "FUN_08005604": {
            "renaming": {
                "FUN_08005604": "get_process_id_08005604"
            },
            "code": "__pid_t get_process_id_08005604(void)\n{\n  return 1;\n}",
            "called": [
                "_getpid"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "_raise_r"
            ],
            "imported": false,
            "current_name": "get_process_id_08005604"
        },
        "FUN_080008cc": {
            "renaming": {
                "FUN_080008cc": "set_modbus_exception_response_080008cc",
                "this": "modbus_instance",
                "u8exception": "exception_code",
                "bVar1": "buffer_byte_1",
                "au8Buffer": "modbus_instance->au8Buffer",
                "u8id": "modbus_instance->u8id",
                "u8BufferSize": "modbus_instance->u8BufferSize"
            },
            "code": "void __thiscall set_modbus_exception_response_080008cc(Modbus *modbus_instance, uint8_t exception_code) {\n    byte buffer_byte_1 = modbus_instance->au8Buffer[1];\n    modbus_instance->au8Buffer[0] = modbus_instance->u8id;\n    modbus_instance->au8Buffer[1] = buffer_byte_1 ^ 0x80;\n    modbus_instance->au8Buffer[2] = exception_code;\n    modbus_instance->u8BufferSize = 3;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008cc",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "set_modbus_exception_response_080008cc"
        },
        "FUN_08004a84": {
            "renaming": {
                "FUN_08004a84": "FUNC_08004a84"
            },
            "code": "\nint FUNC_08004a84(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  bool bVar1;\n  undefined *puVar2;\n  int iVar3;\n  void *pvVar4;\n  int *piVar5;\n  byte *pbVar6;\n  byte *pbVar7;\n  int unaff_r9;\n  int iVar8;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    __sinit();\n  }\n  if (param_2 == PTR___sf_fake_stdin_08004c90) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR___sf_fake_stdout_08004c98) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR___sf_fake_stderr_08004c9c) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar8 = __swsetup_r(param_1,param_2), iVar8 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar6 = param_3;\nLAB_08004ac6:\n  pbVar7 = pbVar6;\n  if (*pbVar7 != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  pbVar6 = pbVar7 + 1;\n  if (*pbVar7 != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  iVar8 = (int)pbVar7 - (int)param_3;\n  if (iVar8 != 0) {\n    iVar3 = __sfputs_r(param_1,param_2,param_3,iVar8);\n    if (iVar3 == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar8;\n  }\n  if (*pbVar7 == 0) goto LAB_08004c70;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar6 = pbVar7 + 1;\n  while( true ) {\n    pvVar4 = memchr(PTR_s___0__08004c94,(uint)*pbVar6,5);\n    puVar2 = PTR_DAT_08004ca0;\n    param_3 = pbVar6 + 1;\n    if (pvVar4 == (void *)0x0) break;\n    local_88 = 1 << ((int)pvVar4 - (int)PTR_s___0__08004c94 & 0xffU) | local_88;\n    pbVar6 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar6 == 0x2a) {\n    piVar5 = local_8c + 1;\n    iVar8 = *local_8c;\n    local_8c = piVar5;\n    if (-1 < iVar8) goto LAB_08004ba0;\n    local_7c = -iVar8;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar1 = false;\n    iVar8 = local_7c;\n    param_3 = pbVar6;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar8 = iVar8 * 10 + (*param_3 - 0x30);\n      bVar1 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar1) {\nLAB_08004ba0:\n      local_7c = iVar8;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      local_84 = *local_8c;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n      param_3 = param_3 + 2;\n      local_8c = local_8c + 1;\n    }\n    else {\n      bVar1 = false;\n      local_84 = 0;\n      iVar8 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar8 = iVar8 * 10 + (*param_3 - 0x30);\n        bVar1 = true;\n      }\n      if (bVar1) {\n        local_84 = iVar8;\n      }\n    }\n  }\n  pvVar4 = memchr(PTR_DAT_08004ca0,(uint)*param_3,3);\n  if (pvVar4 != (void *)0x0) {\n    local_88 = local_88 | 0x40 << ((int)pvVar4 - (int)puVar2 & 0xffU);\n    param_3 = param_3 + 1;\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  pvVar4 = memchr(PTR_s_efgEFG_08004ca4,(uint)local_70,6);\n  if (pvVar4 == (void *)0x0) {\n    iVar8 = _printf_i(param_1,&local_88,param_2,DAT_08004cac,&local_8c);\n  }\n  else {\n    iVar8 = param_1;\n    if (DAT_08004ca8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar8 = unaff_r9;\n      goto LAB_08004c22;\n    }\n  }\n  if (iVar8 == -1) goto LAB_08004c70;\nLAB_08004c22:\n  local_74 = local_74 + iVar8;\n  pbVar6 = param_3;\n  unaff_r9 = iVar8;\n  goto LAB_08004ac6;\n}\n\n",
            "called": [
                "memchr",
                "__swsetup_r",
                "__sfputs_r",
                "_printf_i",
                "__sinit"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004a84",
            "calling": [
                "fiprintf",
                "iprintf"
            ],
            "imported": false,
            "current_name": "FUNC_08004a84"
        },
        "FUN_08005608": {
            "renaming": {
                "FUN_08005608": "read_data_and_update_offset_08005608",
                "param_1": "file_descriptor",
                "param_2": "data_offset_address",
                "iVar1": "bytes_read",
                "uVar2": "new_offset",
                "bVar3": "is_valid_read"
            },
            "code": "void read_data_and_update_offset_08005608(int file_descriptor, int data_offset_address) {\n  int bytes_read = _read_r(file_descriptor, (int)*(short *)(data_offset_address + 0xe));\n  bool is_valid_read = bytes_read >= 0;\n  uint new_offset = is_valid_read ? *(int *)(data_offset_address + 0x54) + bytes_read : *(ushort *)(data_offset_address + 0xc) & 0xffffefff;\n  if (is_valid_read) {\n    *(uint *)(data_offset_address + 0x54) = new_offset;\n  }\n  if (!is_valid_read) {\n    *(short *)(data_offset_address + 0xc) = (short)new_offset;\n  }\n  return;\n}",
            "called": [
                "_read_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005608",
            "calling": [],
            "imported": false,
            "current_name": "read_data_and_update_offset_08005608"
        },
        "FUN_08002efa": {
            "renaming": {
                "FUN_08002efa": "configureUartReceive_08002efa",
                "*huart": "*uartHandler",
                "pData": "rxBuffer",
                "Size": "bufferSize",
                "HAL_UART_STATE_READY": "HAL_UART_STATE_READY",
                "HAL_BUSY": "HAL_BUSY",
                "(uint8_t *)0x0": "NULL",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_LOCKED": "HAL_LOCKED",
                "pRxBuffPtr": "rxBufferPointer",
                "RxXferSize": "rxTransferSize",
                "RxXferCount": "rxTransferCount",
                "ErrorCode": "errorCode",
                "HAL_UART_STATE_BUSY_RX": "HAL_UART_STATE_BUSY_RX",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "Instance": "uartInstance",
                "CR3": "controlRegister3",
                "CR1": "controlRegister1"
            },
            "code": "HAL_StatusTypeDef configureUartReceive_08002efa(UART_HandleTypeDef *uartHandler, uint8_t *rxBuffer, uint16_t bufferSize)\n{\n    if(uartHandler->RxState != HAL_UART_STATE_READY)\n    {\n        return HAL_BUSY;\n    }\n    if(rxBuffer == NULL)\n    {\n        return HAL_ERROR;\n    }\n    if(bufferSize == 0)\n    {\n        return HAL_ERROR;\n    }\n    if(uartHandler->Lock != HAL_LOCKED)\n    {\n        uartHandler->pRxBuffPtr = rxBuffer;\n        uartHandler->RxXferSize = bufferSize;\n        uartHandler->RxXferCount = bufferSize;\n        uartHandler->ErrorCode = 0;\n        uartHandler->RxState = HAL_UART_STATE_BUSY_RX;\n        uartHandler->Lock = HAL_UNLOCKED;\n        uartHandler->Instance->CR3 |= 0x1;\n        uartHandler->Instance->CR1 |= 0x120;\n        return HAL_OK;\n    }\n    return HAL_BUSY;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efa",
            "calling": [
                "uart_getc",
                "uart_attach_rx_callback"
            ],
            "imported": false,
            "current_name": "configureUartReceive_08002efa"
        },
        "FUN_0800268c": {
            "renaming": {
                "FUN_0800268c": "do_nothing_0800268c"
            },
            "code": "\nvoid do_nothing_0800268c(RTC_HandleTypeDef *hrtc)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268c",
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_0800268c"
        },
        "FUN_080058f0": {
            "renaming": {
                "std::ctype_byname<wchar_t>::FUN_080058f0": "set_flags",
                "FUN_080058f0": "set_flags_080058f0"
            },
            "code": "void set_flags_080058f0() {\n    if (*(int *)PTR_id_08005954 < 0) {\n        *(undefined4 *)PTR_id_08005954 = 1;\n    }\n    if (*(int *)PTR_id_08005958 < 0) {\n        *(undefined4 *)PTR_id_08005958 = 1;\n    }\n    if (*(int *)PTR_id_0800595c < 0) {\n        *(undefined4 *)PTR_id_0800595c = 1;\n    }\n    if (*(int *)PTR_id_08005960 < 0) {\n        *(undefined4 *)PTR_id_08005960 = 1;\n    }\n    if (*(int *)PTR_id_08005964 < 0) {\n        *(undefined4 *)PTR_id_08005964 = 1;\n    }\n    if (*(int *)PTR_id_08005968 < 0) {\n        *(undefined4 *)PTR_id_08005968 = 1;\n    }\n    if (*(int *)PTR_id_0800596c < 0) {\n        *(undefined4 *)PTR_id_0800596c = 1;\n    }\n    if (*(int *)PTR_id_08005970 < 0) {\n        *(undefined4 *)PTR_id_08005970 = 1;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058f0",
            "calling": [],
            "imported": false,
            "current_name": "set_flags_080058f0"
        },
        "FUN_08001aac": {
            "renaming": {
                "FUN_08001aac": "do_nothing_08001aac"
            },
            "code": "\nvoid do_nothing_08001aac(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001aac",
            "calling": [
                "I2C_ITError",
                "I2C_DMAAbort"
            ],
            "imported": false,
            "current_name": "do_nothing_08001aac"
        },
        "FUN_080056b4": {
            "renaming": {
                "FUN_080056b4": "close_file_and_set_error_if_necessary_080056b4",
                "param_1": "error_code_ptr",
                "param_2": "file_descriptor",
                "puVar1": "errno_ptr",
                "iVar2": "close_result"
            },
            "code": "void close_file_and_set_error_if_necessary_080056b4(int *error_code_ptr, int file_descriptor) {\n  undefined *errno_ptr;\n  int close_result;\n  \n  errno_ptr = PTR_errno_080056d0;\n  *(undefined4 *)PTR_errno_080056d0 = 0;\n  close_result = _close(file_descriptor);\n  if ((close_result == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code_ptr = *(int *)errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056b4",
            "calling": [
                "__sclose"
            ],
            "imported": false,
            "current_name": "close_file_and_set_error_if_necessary_080056b4"
        },
        "FUN_0800450a": {
            "renaming": {
                "FUN_0800450a": "printIPAddress_0800450a",
                "this": "ip_address",
                "p": "printer",
                "iVar3": "byte_index",
                "sVar1": "bytes_printed",
                "sVar2": "dot_printed",
                "iVar4": "total_bytes_printed"
            },
            "code": "size_t __thiscall printIPAddress_0800450a(IPAddress *ip_address, Print *printer) {\n  size_t total_bytes_printed = 0;\n  for (int byte_index = 0; byte_index < 3; byte_index++) {\n    size_t bytes_printed = Print::print(printer, (ip_address->_address).bytes[byte_index], 10);\n    size_t dot_printed = Print::print(printer, '.');\n    total_bytes_printed += bytes_printed + dot_printed;\n  }\n  size_t last_byte_printed = Print::print(printer, (ip_address->_address).bytes[3], 10);\n  return total_bytes_printed + last_byte_printed;\n}",
            "called": [
                "print",
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800450a",
            "calling": [],
            "imported": false,
            "current_name": "printIPAddress_0800450a"
        },
        "FUN_0800377c": {
            "renaming": {
                "FUN_0800377c": "handle_timer_interrupts_0800377c",
                "PTR_timer_handles_08003794": "timer_handles",
                "TIM_HandleTypeDef": "TimerHandle",
                "HAL_TIM_IRQHandler": "handle_timer_interrupt",
                "DAT_080037b8": "NULL",
                "timer_handle_1": "timer_handle_1",
                "timer_handle_2": "timer_handle_2"
            },
            "code": "void handle_timer_interrupts_0800377c(void)\n{\n    TIM_HandleTypeDef* timer_handle_1 = *(TIM_HandleTypeDef**)PTR_PTR_timer_handles_08003794_08003794;\n    TIM_HandleTypeDef* timer_handle_2 = *(TIM_HandleTypeDef**)(PTR_PTR_timer_handles_08003794_08003794 + 0x24);\n\n    if (timer_handle_1 != DAT_080037b8)\n    {\n        HAL_TIM_IRQHandler(timer_handle_1);\n    }\n\n    if (timer_handle_2 != DAT_080037b8)\n    {\n        HAL_TIM_IRQHandler(timer_handle_2);\n    }\n\n    return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800377c",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupts_0800377c"
        },
        "FUN_08003fec": {
            "renaming": {
                "FUN_08003fec": "handle_USART2_interrupt_08003fec",
                "USART2_IRQn": "USART2_interrupt",
                "*(UART_HandleTypeDef **)(PTR_uart_handlers_08004000 + 4)": "huart",
                "PTR_uart_handlers_08004000": "PTR_uart_handlers_08004000",
                "HAL_NVIC_ClearPendingIRQ": "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler": "HAL_UART_IRQHandler"
            },
            "code": "void handle_USART2_interrupt_08003fec(UART_HandleTypeDef **(UART_HandleTypeDef **)(PTR_uart_handlers_08004000 + 4))\n{\n  HAL_NVIC_ClearPendingIRQ(USART2_IRQn);\n  HAL_UART_IRQHandler(*(UART_HandleTypeDef **)(PTR_uart_handlers_08004000 + 4));\n  return;\n}",
            "called": [
                "HAL_UART_IRQHandler",
                "HAL_NVIC_ClearPendingIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fec",
            "calling": [],
            "imported": false,
            "current_name": "handle_USART2_interrupt_08003fec"
        },
        "FUN_0800268e": {
            "renaming": {
                "FUN_0800268e": "ResetTimer_0800268e",
                "*htim": "*timer_handle",
                "pTVar1": "timer_instance",
                "HAL_TIM_STATE_BUSY": "TIM_BUSY",
                "HAL_TIM_STATE_RESET": "TIM_RESET",
                "HAL_UNLOCKED": "TIM_UNLOCKED",
                "HAL_TIM_PWM_MspDeInit": "DeInitPWM",
                "HAL_OK": "TIM_OK"
            },
            "code": "HAL_StatusTypeDef ResetTimer_0800268e(TIM_HandleTypeDef *htim)\n{\n  TIM_TypeDef *timer_instance;\n  timer_instance = htim->Instance;\n  if (((timer_instance->CCER & 0x1111) == 0) && ((timer_instance->CCER & 0x444) == 0)) {\n    timer_instance->CR1 &= ~TIM_CR1_CEN;\n  }\n  HAL_TIM_PWM_MspDeInit(htim);\n  htim->State = HAL_TIM_STATE_RESET;\n  htim->Lock = HAL_UNLOCKED;\n  return HAL_OK;\n}",
            "called": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268e",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "ResetTimer_0800268e"
        },
        "FUN_080008e2": {
            "renaming": {
                "__thiscall Modbus::FUN_080008e2": "readBitsFromRegisters",
                "*this": "modbus",
                "regs": "register_array",
                "u8size": "num_registers",
                "uVar1": "starting_register",
                "uVar2": "num_bits",
                "uVar3": "i",
                "uVar4": "current_bit_index",
                "uVar5": "num_bytes",
                "FUN_080008e2": "readBitsFromRegisters_080008e2"
            },
            "code": "int8_t __thiscall Modbus::readBitsFromRegisters_080008e2(Modbus *modbus, uint16_t *register_array, uint8_t num_registers)\n{\n    uint16_t starting_register = makeWord(modbus->au8Buffer[2], modbus->au8Buffer[3]);\n    uint16_t num_bits = makeWord(modbus->au8Buffer[4], modbus->au8Buffer[5]);\n    uint8_t num_bytes = (uint8_t)(((uint)num_bits << 0x15) >> 0x18);\n    if ((num_bits & 7) != 0) {\n        num_bytes++;\n    }\n    modbus->au8Buffer[2] = num_bytes;\n    modbus->u8BufferSize = 3;\n    uint8_t current_bit_index = 0;\n    for (uint16_t i = 0; i < num_bits; i++) {\n        uint16_t register_index = (i + starting_register) >> 4;\n        uint8_t bit_index = (i + starting_register) & 0xf;\n        if (((int)(uint)register_array[register_index] >> bit_index) & 1U) {\n            modbus->au8Buffer[modbus->u8BufferSize] |= (byte)(1 << current_bit_index);\n        }\n        else {\n            modbus->au8Buffer[modbus->u8BufferSize] &= ~(byte)(1 << current_bit_index);\n        }\n        current_bit_index++;\n        if (current_bit_index > 7) {\n            modbus->u8BufferSize++;\n            current_bit_index = 0;\n        }\n    }\n    if ((num_bits & 7) != 0) {\n        modbus->u8BufferSize++;\n    }\n    uint8_t response_size = modbus->u8BufferSize;\n    sendTxBuffer(modbus);\n    return response_size + 2;\n}",
            "called": [
                "sendTxBuffer",
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008e2",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "readBitsFromRegisters_080008e2"
        },
        "FUN_080045c8": {
            "renaming": {
                "__thiscall Print::FUN_080045c8": "print_number",
                "this": "this",
                "n": "number",
                "base": "base",
                "cVar1": "digit",
                "sVar2": "length",
                "sVar3": "length",
                "uVar4": "remainder",
                "uVar5": "base_value",
                "uVar6": "quotient",
                "__s": "current_digit",
                "buf": "buffer",
                "FUN_080045c8": "print_number_080045c8"
            },
            "code": "size_t __thiscall print_number_080045c8(Print *this, ulong number, uint8_t base) {\n  char digit;\n  size_t length = 0;\n  char buffer[33];\n  uint base_value = (uint)base;\n  buffer[32] = '\\0';\n  if (base_value < 2) {\n    base_value = 10;\n  }\n  char *current_digit = buffer + 0x20;\n  do {\n    uint quotient = number / base_value;\n    uint remainder = number % base_value;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit += '0';\n    }\n    else {\n      digit += '7';\n    }\n    *--current_digit = digit;\n    number = quotient;\n  } while (number != 0);\n  if (current_digit == (char *)0x0) {\n    length = 0;\n  }\n  else {\n    size_t string_length = strlen(current_digit);\n    length = (*this->_vptr_Print[1])(string_length, current_digit, string_length);\n  }\n  return length;\n}",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c8",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "print_number_080045c8"
        },
        "FUN_08003d18": {
            "renaming": {
                "FUN_08003d18": "transmit_data_08003d18",
                "data": "data_buffer",
                "size": "data_size",
                "pin": "pin_name",
                "HVar1": "status",
                "uVar2": "start_time",
                "pvVar3": "peripheral",
                "uVar4": "current_time",
                "uVar5": "i"
            },
            "code": "size_t transmit_data_08003d18(uint8_t *data, uint32_t size) {\n  PinName_conflict pin_name;\n  HAL_StatusTypeDef status;\n  uint32_t start_time = HAL_GetTick();\n  void *peripheral;\n  uint32_t i;\n  \n  pin_name = *(PinName_conflict *)(PTR_digitalPin_08003dc0 + 0x9a);\n  peripheral = pinmap_peripheral(pin_name, (PinMap_conflict *)PTR_PinMap_UART_TX_08003dc4);\n  if (peripheral == (void *)0x0) {\n    return 0;\n  }\n  \n  for (i = 0; i < 10; i++) {\n    if (*(int *)(PTR_uart_handlers_08003dc8 + i * 4) != 0 && **(void ***)(PTR_uart_handlers_08003dc8 + i * 4) == peripheral) {\n      break;\n    }\n  }\n  if (i >= 10) {\n    if (PTR_serial_debug_08003dcc[0x44] > 9) {\n      uart_debug_init();\n      if (PTR_serial_debug_08003dcc[0x44] > 9) {\n        return 0;\n      }\n    }\n    i = PTR_serial_debug_08003dcc[0x44];\n  }\n  \n  do {\n    status = HAL_UART_Transmit(*(UART_HandleTypeDef **)(PTR_uart_handlers_08003dc8 + i * 4), data, (uint16_t)size, 1000);\n    if (status == HAL_OK) {\n      return size;\n    }\n  } while (HAL_GetTick() - start_time < 1000);\n  return 0;\n}",
            "called": [
                "uart_debug_init",
                "HAL_UART_Transmit",
                "HAL_GetTick",
                "pinmap_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d18",
            "calling": [
                "_write"
            ],
            "imported": false,
            "current_name": "transmit_data_08003d18"
        },
        "FUN_08004640": {
            "renaming": {
                "FUN_08004640": "concatenate_bytes_08004640",
                "h": "high_byte",
                "l": "low_byte"
            },
            "code": "uint16_t concatenate_bytes_08004640(uint8_t high_byte, uint8_t low_byte) {\n  return CONCAT11(high_byte, low_byte);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004640",
            "calling": [
                "process_FC5",
                "validateRequest",
                "process_FC3",
                "process_FC1",
                "process_FC6",
                "process_FC15",
                "process_FC16"
            ],
            "imported": false,
            "current_name": "concatenate_bytes_08004640"
        },
        "FUN_08000c7c": {
            "renaming": {
                "FUN_08000c7c": "initialize_static_variables_08000c7c"
            },
            "code": "void initialize_static_variables_08000c7c(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c7c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_08000c7c"
        },
        "FUN_08004760": {
            "renaming": {
                "FUN_08004760": "handle_gpio_exti_interrupt_08004760"
            },
            "code": "void handle_gpio_exti_interrupt_08004760(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004760",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_exti_interrupt_08004760"
        },
        "FUN_080034ce": {
            "renaming": {
                "FUN_080034ce": "initialize_system_080034ce"
            },
            "code": "void initialize_system_080034ce(void)\n{\n  HAL_Init();\n  SystemClock_Config();\n  return;\n}",
            "called": [
                "SystemClock_Config",
                "HAL_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034ce",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "initialize_system_080034ce"
        },
        "FUN_08003798": {
            "renaming": {
                "FUN_08003798": "handle_timer_interrupt_08003798",
                "PTR_timer_handles_080037a8": "PTR_timer_handles",
                "timer_handle": "timer_handle"
            },
            "code": "void handle_timer_interrupt_08003798(void)\n{\n  TIM_HandleTypeDef *timer_handle = *(TIM_HandleTypeDef **)(PTR_timer_handles_080037a8_080037a8 + 4);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003798",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08003798"
        },
        "FUN_080047fe": {
            "renaming": {
                "FUN_080047fe": "register_exit_function_080047fe",
                "param_1": "func",
                "param_2": "arg",
                "__cxa_atexit": "__cxa_atexit",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void register_exit_function_080047fe(void (*func)(void), void *arg){\n    __cxa_atexit(arg, func);\n    return;\n}",
            "called": [
                "__cxa_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047fe",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "register_exit_function_080047fe"
        },
        "FUN_08005974": {
            "renaming": {
                "std::ctype_byname<char>::FUN_08005974": "set_ctype_flags",
                "PTR_id_080059d8": "flag_ptr_1",
                "PTR_id_080059dc": "flag_ptr_2",
                "PTR_id_080059e0": "flag_ptr_3",
                "PTR_id_080059e4": "flag_ptr_4",
                "PTR_id_080059e8": "flag_ptr_5",
                "PTR_id_080059ec": "flag_ptr_6",
                "PTR_id_080059f0": "flag_ptr_7",
                "PTR_id_080059f4": "flag_ptr_8",
                "FUN_08005974": "set_ctype_flags_08005974"
            },
            "code": "void set_ctype_flags_08005974(void)\n{\n  if (*(int *)PTR_id_080059d8 < 0) {\n    *(undefined4 *)PTR_id_080059d8 = 1;\n  }\n  if (*(int *)PTR_id_080059dc < 0) {\n    *(undefined4 *)PTR_id_080059dc = 1;\n  }\n  if (*(int *)PTR_id_080059e0 < 0) {\n    *(undefined4 *)PTR_id_080059e0 = 1;\n  }\n  if (*(int *)PTR_id_080059e4 < 0) {\n    *(undefined4 *)PTR_id_080059e4 = 1;\n  }\n  if (*(int *)PTR_id_080059e8 < 0) {\n    *(undefined4 *)PTR_id_080059e8 = 1;\n  }\n  if (*(int *)PTR_id_080059ec < 0) {\n    *(undefined4 *)PTR_id_080059ec = 1;\n  }\n  if (*(int *)PTR_id_080059f0 < 0) {\n    *(undefined4 *)PTR_id_080059f0 = 1;\n  }\n  if (*(int *)PTR_id_080059f4 < 0) {\n    *(undefined4 *)PTR_id_080059f4 = 1;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005974",
            "calling": [],
            "imported": false,
            "current_name": "set_ctype_flags_08005974"
        },
        "FUN_08001256": {
            "renaming": {
                "FUN_08001256": "handle_i2c_transfer_08001256",
                "*hi2c": "*i2c_handle",
                "uVar1": "transfer_options",
                "pIVar2": "i2c_instance",
                "tmpreg": "tmpreg",
                "tmpreg_1": "tmpreg_1",
                "tmpreg_2": "tmpreg_2",
                "tmpreg_3": "tmpreg_3",
                "tmpreg_4": "tmpreg_4",
                "tmpreg_5": "tmpreg_5",
                "tmpreg_6": "tmpreg_6",
                "tmpreg_7": "tmpreg_7",
                "tmpreg_8": "tmpreg_8",
                "tmpreg_9": "tmpreg_9"
            },
            "code": "HAL_StatusTypeDef handle_i2c_transfer_08001256(I2C_HandleTypeDef *i2c_handle) {\n  uint32_t transfer_options = i2c_handle->XferOptions;\n  I2C_TypeDef *i2c_instance = i2c_handle->Instance;\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_2;\n  uint32_t tmpreg_3;\n  uint32_t tmpreg_4;\n  uint32_t tmpreg_5;\n  uint32_t tmpreg_6;\n  uint32_t tmpreg_7;\n  uint32_t tmpreg_8;\n  uint32_t tmpreg_9;\n  \n  if (i2c_handle->State == HAL_I2C_STATE_BUSY_RX && (i2c_handle->EventCount != 0 || i2c_handle->Mode != HAL_I2C_MODE_MEM)) {\n    if (i2c_handle->EventCount == 0 && i2c_handle->Init.AddressingMode == 0xc000) {\n      i2c_instance->CR1 |= 0x100;\n      i2c_handle->EventCount++;\n    }\n    else {\n      if (i2c_handle->XferCount == 0) {\n        i2c_instance->CR1 |= 0x200;\n      }\n      else if (i2c_handle->XferCount == 1) {\n        if (transfer_options == 0xffff0000) {\n          i2c_instance->CR1 &= 0xfffffbff;\n          if ((i2c_instance->CR2 & 0x800) == 0) {\n            i2c_instance->CR1 |= 0x200;\n          }\n          else {\n            i2c_instance->CR1 &= 0xfffffbff;\n          }\n        }\n        else if ((transfer_options == 4 || transfer_options == 8) || i2c_handle->PreviousState == 0x12) {\n          i2c_instance->CR1 &= 0xfffffbff;\n          i2c_instance->CR1 |= 0x200;\n        }\n        else if (transfer_options == 2) {\n          i2c_instance->CR1 |= 0x400;\n        }\n        else {\n          i2c_instance->CR1 &= 0xfffffbff;\n        }\n      }\n      else if (i2c_handle->XferCount == 2) {\n        if (transfer_options == 2) {\n          i2c_instance->CR1 |= 0x400;\n        }\n        else {\n          i2c_instance->CR1 &= 0xfffffbff;\n          i2c_instance->CR1 |= 0x800;\n        }\n        if ((i2c_instance->CR2 & 0x800) != 0) {\n          i2c_instance->CR2 |= 0x1000;\n        }\n      }\n      else {\n        i2c_instance->CR1 |= 0x400;\n        if ((i2c_instance->CR2 & 0x800) != 0) {\n          i2c_instance->CR2 |= 0x1000;\n        }\n      }\n      i2c_handle->EventCount = 0;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001256",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_i2c_transfer_08001256"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "initialize_program_08004884",
                "puVar1": "__preinit_array_start",
                "puVar2": "__init_array_start",
                "puVar3": "__do_global_dtors_aux_fini_array_entry",
                "iVar4": "preinit_array_size",
                "iVar5": "i"
            },
            "code": "void initialize_program_08004884(void)\n{\n  // Loop through __preinit_array and call each function pointer\n  for (int i = 0; i < __preinit_array_end - __preinit_array_start; i++) {\n    (*(__preinit_array_start + i))();\n  }\n\n  // Call _init to initialize the program\n  _init();\n\n  // Loop through __init_array and call each function pointer\n  for (int i = 0; i < __init_array_end - __init_array_start; i++) {\n    (*(__init_array_start + i))();\n  }\n}\n",
            "called": [
                "premain",
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "initialize_program_08004884"
        },
        "FUN_08004648": {
            "renaming": {
                "FUN_08004648": "initialize_EVP_PKEY_context_08004648",
                "ctx": "pkey_ctx"
            },
            "code": "void initialize_EVP_PKEY_context_08004648(EVP_PKEY_CTX *pkey_ctx)\n{\n  pkey_ctx = (EVP_PKEY_CTX *)0x3;\n  HAL_NVIC_SetPriorityGrouping(3);\n  init(pkey_ctx);\n  return;\n}",
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004648",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "initialize_EVP_PKEY_context_08004648"
        },
        "FUN_08000600": {
            "renaming": {
                "FUN_08000600": "configureModbusPort_08000600",
                "this": "modbusInstance",
                "u32speed": "baudRate",
                "uVar1": "serialNumber",
                "port": "serialPort",
                "u8serno": "serialNumber",
                "u8txenpin": "txEnablePin",
                "iVar2": "incomingByte",
                "u8BufferSize": "bufferSize",
                "u8lastRec": "lastReceivedByte",
                "u16errCnt": "errorCount",
                "u16OutCnt": "outgoingCount",
                "u16InCnt": "incomingCount"
            },
            "code": "void __thiscall configureModbusPort_08000600(Modbus *modbusInstance, long baudRate) {\n  uint8_t serialNumber = modbusInstance->serialNumber;\n  HardwareSerial *serialPort;\n  if (serialNumber == '\\x02') {\n    serialPort = (HardwareSerial *)PTR_Serial3_08000668;\n  }\n  else if (serialNumber == '\\x03') {\n    serialPort = (HardwareSerial *)PTR_Serial3_08000668;\n  }\n  else if (serialNumber == '\\x01') {\n    serialPort = (HardwareSerial *)PTR_Serial3_08000668;\n  }\n  else {\n    serialPort = (HardwareSerial *)PTR_Serial3_08000668;\n  }\n  HardwareSerial::begin(serialPort, baudRate, '\\x06');\n  if (modbusInstance->txEnablePin > 1) {\n    pinMode((uint)modbusInstance->txEnablePin, OUTPUT);\n    digitalWrite((uint)modbusInstance->txEnablePin, LOW);\n  }\n  int incomingByte;\n  do {\n    incomingByte = (*(serialPort->super_Stream).super_Print._vptr_Print[3])();\n  } while (incomingByte > -1);\n  modbusInstance->bufferSize = 0;\n  modbusInstance->lastReceivedByte = 0;\n  modbusInstance->errorCount = 0;\n  modbusInstance->outgoingCount = 0;\n  modbusInstance->incomingCount = 0;\n}",
            "called": [
                "digitalWrite",
                "pinMode",
                "begin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000600",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "configureModbusPort_08000600"
        },
        "FUN_080045be": {
            "renaming": {
                "__thiscall Print::FUN_080045be": "size_t Print::printCharacter",
                "this": "this",
                "c": "character",
                "sVar1": "result",
                "_vptr_Print": "_vptr_Print",
                "FUN_080045be": "printCharacter_080045be"
            },
            "code": "size_t Print::printCharacter_080045be(Print *this,char character)\n{\n  size_t result;\n  result = (**this->_vptr_Print)(this,(int)character);\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045be",
            "calling": [
                "printTo"
            ],
            "imported": false,
            "current_name": "printCharacter_080045be"
        },
        "FUN_08004646": {
            "renaming": {
                "FUN_08004646": "do_nothing_08004646"
            },
            "code": "\nvoid do_nothing_08004646(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004646",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_08004646"
        },
        "FUN_0800407c": {
            "renaming": {
                "FUN_0800407c": "handle_UART8_interrupt_0800407c",
                "PTR_uart_handlers_08004090": "uart_handlers_ptr"
            },
            "code": "void handle_UART8_interrupt_0800407c(void)\n{\n  HAL_NVIC_ClearPendingIRQ(UART8_IRQn);\n  UART_HandleTypeDef *huart8 = *(UART_HandleTypeDef **)(PTR_uart_handlers_08004090 + 0x1c);\n  HAL_UART_IRQHandler(huart8);\n  return;\n}",
            "called": [
                "HAL_UART_IRQHandler",
                "HAL_NVIC_ClearPendingIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800407c",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART8_interrupt_0800407c"
        },
        "FUN_08000728": {
            "renaming": {
                "FUN_08000728": "calculateCRC_08000728",
                "this": "modbus",
                "u8length": "length",
                "uVar2": "crc",
                "uVar3": "bit",
                "uVar4": "i",
                "bVar1": "j",
                "au8Buffer": "buffer",
                "ushort": "uint16_t",
                "byte": "uint8_t"
            },
            "code": "uint16_t __thiscall Modbus::calculateCRC_08000728(Modbus *modbus, uint8_t length) {\n    uint16_t crc = 0xFFFF;\n    for (uint8_t i = 0; i < length; i++) {\n        crc ^= modbus->buffer[i];\n        for (uint8_t j = 0; j < 8; j++) {\n            if (crc & 0x0001) {\n                crc >>= 1;\n                crc ^= 0xA001;\n            } else {\n                crc >>= 1;\n            }\n        }\n    }\n    return (crc << 8) | (crc >> 8);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000728",
            "calling": [
                "sendTxBuffer"
            ],
            "imported": false,
            "current_name": "calculateCRC_08000728"
        },
        "FUN_0800354a": {
            "renaming": {
                "FUN_0800354a": "find_pin_function_0800354a",
                "pin": "pin_name",
                "map": "pin_map",
                "uVar1": "function_code"
            },
            "code": "uint32_t find_pin_function_0800354a(PinName_conflict pin, PinMap_conflict *map)\n{\n  uint32_t function_code = 0;\n  if (pin != NC) {\n    function_code = pinmap_find_function(pin, map);\n  }\n  return function_code;\n}",
            "called": [
                "pinmap_find_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800354a",
            "calling": [
                "get_pwm_channel",
                "uart_init",
                "get_dac_channel",
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "find_pin_function_0800354a"
        },
        "FUN_0800124a": {
            "renaming": {
                "FUN_0800124a": "write_i2c_address_0800124a",
                "hi2c": "i2c_handle",
                "Instance": "i2c_instance",
                "DR": "data_register",
                "Devaddress": "device_address"
            },
            "code": "HAL_StatusTypeDef write_i2c_address_0800124a(I2C_HandleTypeDef *i2c_handle)\n{\n  i2c_handle->Instance->DR = i2c_handle->Devaddress & 0xff;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800124a",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "write_i2c_address_0800124a"
        },
        "FUN_08004094": {
            "renaming": {
                "FUN_08004094": "allocate_memory_08004094",
                "incr": "increment",
                "pcVar1": "current_pointer",
                "pcVar2": "new_pointer"
            },
            "code": "caddr_t allocate_memory_08004094(int increment)\n{\n  caddr_t current_pointer;\n  caddr_t new_pointer;\n  \n  if (*(int *)PTR_heap_end_080040c4 == 0) {\n    *(undefined **)PTR_heap_end_080040c4 = PTR__ebss_080040c8;\n  }\n  current_pointer = *(caddr_t *)PTR_heap_end_080040c4;\n  new_pointer = current_pointer + increment;\n  if (new_pointer <= &stack0x00000000) {\n    *(caddr_t *)PTR_heap_end_080040c4 = new_pointer;\n    return current_pointer;\n  }\n  *(undefined4 *)PTR_errno_080040cc = 0xc;\n  return (caddr_t)0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004094",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_08004094"
        },
        "FUN_080033c8": {
            "renaming": {
                "FUN_080033c8": "clear_DAC_bit_080033c8",
                "hdac": "dac_handle",
                "DAT_080033d4": "dac_register_address",
                "uint": "uint32_t",
                "*": "*",
                "&": "&",
                "=": "=",
                "0x40": "0x40",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void clear_DAC_bit_080033c8(DAC_HandleTypeDef *dac_handle)\n{\n  uint32_t *dac_reg = (uint32_t *)(DAT_080033d4 + 0x40);\n  *dac_reg &= ~(1 << 31);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033c8",
            "calling": [
                "HAL_DAC_DeInit"
            ],
            "imported": false,
            "current_name": "clear_DAC_bit_080033c8"
        },
        "FUN_080031fc": {
            "renaming": {
                "FUN_080031fc": "get_gpio_080031fc",
                "port_idx": "port_index",
                "pGVar1": "gpio_port",
                "tmpreg": "gpio_pin_mask",
                "tmpreg_1": "gpio_crh",
                "tmpreg_2": "gpio_crl",
                "tmpreg_3": "gpio_pin_mask",
                "tmpreg_4": "gpio_pin_mask",
                "tmpreg_5": "gpio_pin_mask",
                "tmpreg_6": "gpio_pin_mask",
                "tmpreg_7": "gpio_pin_mask",
                "tmpreg_8": "gpio_pin_mask",
                "tmpreg_9": "gpio_pin_mask",
                "tmpreg_10": "gpio_pin_mask",
                "DAT_08003350": "0x40010800",
                "DAT_08003354": "0x40010808",
                "DAT_08003358": "0x4001080C",
                "DAT_0800335c": "0x40010810",
                "DAT_08003360": "0x40010814",
                "DAT_08003364": "0x40010818",
                "DAT_08003368": "0x4001081C",
                "DAT_0800336c": "0x40010820",
                "DAT_08003370": "0x40010824",
                "DAT_08003374": "0x40010804",
                "DAT_08003378": "0x40010808",
                "DAT_0800337c": "0x4001080C"
            },
            "code": "GPIO_TypeDef* get_gpio_080031fc(uint32_t port_index)\n{\n    GPIO_TypeDef* gpio_port;\n    uint32_t* gpio_crh = (uint32_t*)DAT_08003374;\n    uint32_t* gpio_crl = (uint32_t*)DAT_08003350;\n    uint32_t gpio_pin_mask = 1 << (port_index * 4);\n\n    switch(port_index)\n    {\n        case 0:\n            *gpio_crl |= gpio_pin_mask;\n            gpio_port = (GPIO_TypeDef*)DAT_08003354;\n            break;\n        case 1:\n            *gpio_crl |= gpio_pin_mask;\n            gpio_port = (GPIO_TypeDef*)DAT_08003358;\n            break;\n        case 2:\n            *gpio_crl |= gpio_pin_mask;\n            gpio_port = (GPIO_TypeDef*)DAT_0800335c;\n            break;\n        case 3:\n            *gpio_crl |= gpio_pin_mask;\n            gpio_port = (GPIO_TypeDef*)DAT_08003360;\n            break;\n        case 4:\n            *gpio_crl |= gpio_pin_mask;\n            gpio_port = (GPIO_TypeDef*)DAT_08003364;\n            break;\n        case 5:\n            *gpio_crl |= gpio_pin_mask;\n            gpio_port = (GPIO_TypeDef*)DAT_08003368;\n            break;\n        case 6:\n            *gpio_crl |= gpio_pin_mask;\n            gpio_port = (GPIO_TypeDef*)DAT_0800336c;\n            break;\n        case 7:\n            *gpio_crl |= gpio_pin_mask;\n            gpio_port = (GPIO_TypeDef*)DAT_08003370;\n            break;\n        case 8:\n            *gpio_crh |= gpio_pin_mask;\n            gpio_port = (GPIO_TypeDef*)DAT_08003374;\n            break;\n        case 9:\n            *gpio_crh |= gpio_pin_mask;\n            gpio_port = (GPIO_TypeDef*)DAT_08003354;\n            break;\n        case 10:\n            *gpio_crh |= gpio_pin_mask;\n            gpio_port = (GPIO_TypeDef*)DAT_08003358;\n            break;\n        default:\n            gpio_port = (GPIO_TypeDef*)0x0;\n            break;\n    }\n\n    return gpio_port;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031fc",
            "calling": [
                "digital_io_init",
                "uart_init"
            ],
            "imported": false,
            "current_name": "get_gpio_080031fc"
        },
        "FUN_08005580": {
            "renaming": {
                "FUN_08005580": "execute_command_08005580",
                "param_1": "return_code",
                "param_2": "command_index",
                "param_3": "unused_param1",
                "param_4": "unused_param2",
                "_Var1": "process_id",
                "uVar2": "kill_return_code",
                "iVar3": "current_command_index",
                "pcVar4": "command_function"
            },
            "code": "int execute_command_08005580(int* return_code, uint command_index, int unused_param1, int unused_param2) {\n  pid_t process_id;\n  int current_command_index;\n  void (*command_function)(uint);\n  if (command_index > 31) {\n    *return_code = 22;\n    return -1;\n  }\n  current_command_index = command_list[command_index];\n  if ((current_command_index != 0) && (command_function = *(void (**)(uint))(current_command_index + command_index * 4), command_function != (void (*)(uint))0x0)) {\n    if (command_function != (void (*)(uint))0x1) {\n      if (command_function == (void (*)(uint))-1) {\n        *return_code = 22;\n        return 1;\n      }\n      *(undefined4 *)(current_command_index + command_index * 4) = 0;\n      (*command_function)(command_index);\n    }\n    return 0;\n  }\n  process_id = getpid();\n  *return_code = kill(process_id, command_index);\n  return *return_code;\n}",
            "called": [
                "_kill_r",
                "_getpid_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005580",
            "calling": [
                "raise"
            ],
            "imported": false,
            "current_name": "execute_command_08005580"
        },
        "FUN_08000690": {
            "renaming": {
                "FUN_08000690": "initialize_modbus_08000690",
                "__initialize_p": "should_initialize",
                "__priority": "priority_level",
                "Modbus": "Modbus",
                "PTR_slave_080006b0": "PTR_slave_080006b0",
                "'\\x01'": "'\\x01'",
                "'\\0'": "'\\0'"
            },
            "code": "void initialize_modbus_08000690(int should_initialize, int priority_level)\n{\n    if (should_initialize != 1) {\n        return;\n    }\n    if (priority_level == 0xffff) {\n        Modbus::Modbus((Modbus *)PTR_slave_080006b0, '\\x01', '\\0', '\\0');\n    }\n    return;\n}",
            "called": [
                "Modbus"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000690",
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "imported": false,
            "current_name": "initialize_modbus_08000690"
        },
        "FUN_08004254": {
            "renaming": {
                "FUN_08004254": "get_next_byte_from_rx_buffer_08004254",
                "this": "serial_instance",
                "_serial": "serial_data",
                "uVar1": "rx_tail"
            },
            "code": "int __thiscall get_next_byte_from_rx_buffer_08004254(HardwareSerial *serial_instance) {\n  uint rx_tail = (uint)(serial_instance->_serial).rx_tail;\n  if ((serial_instance->_serial).rx_head != rx_tail) {\n    return (uint)(serial_instance->_serial).rx_buff[rx_tail];\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004254",
            "calling": [],
            "imported": false,
            "current_name": "get_next_byte_from_rx_buffer_08004254"
        },
        "FUN_080054fc": {
            "renaming": {
                "FUN_080054fc": "initialize_buffer_080054fc",
                "param_1": "buffer_size",
                "param_2": "buffer",
                "uVar1": "flag",
                "iVar2": "size",
                "local_18": "size",
                "local_14": "ptr",
                "*local_14": "allocated_buffer"
            },
            "code": "void initialize_buffer_080054fc(int buffer_size, int *buffer) {\n  ushort flag;\n  int size;\n  int *ptr;\n  \n  if ((uint)*(ushort *)(buffer + 3) << 0x1e > -1) {\n    size = buffer_size;\n    ptr = buffer;\n    flag = __swhatbuf_r(buffer_size, buffer, &size, &ptr);\n    int *allocated_buffer = _malloc_r(buffer_size, size);\n    if (allocated_buffer != 0) {\n      *(undefined4 *)(buffer_size + 0x28) = DAT_08005578;\n      *buffer = allocated_buffer;\n      *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x80;\n      buffer[5] = size;\n      buffer[4] = allocated_buffer;\n      if ((ptr != (int *)0x0) && (_isatty_r(buffer_size, (int)*(short *)((int)buffer + 0xe)) != 0)) {\n        *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(buffer + 3) = flag | *(ushort *)(buffer + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(buffer + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) & 0xfffc | 2;\n  }\n  *buffer = (int)buffer + 0x47;\n  buffer[4] = (int)buffer + 0x47;\n  buffer[5] = 1;\n  return;\n}",
            "called": [
                "__swhatbuf_r",
                "_malloc_r",
                "_isatty_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054fc",
            "calling": [
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "initialize_buffer_080054fc"
        },
        "FUN_08001420": {
            "renaming": {
                "FUN_08001420": "transmit_byte_08001420",
                "*hi2c": "*i2c_handler",
                "pbVar1": "data_pointer",
                "hi2c->XferCount": "i2c_handler->transfer_count",
                "hi2c->pBuffPtr": "i2c_handler->data_pointer",
                "hi2c->Instance->DR": "i2c_handler->instance->data_register",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef transmit_byte_08001420(I2C_HandleTypeDef *hi2c) {\n  byte *data_pointer;\n  if (hi2c->XferCount != 0) {\n    data_pointer = hi2c->pBuffPtr;\n    hi2c->pBuffPtr = data_pointer + 1;\n    hi2c->Instance->DR = (uint)*data_pointer;\n    hi2c->XferCount = hi2c->XferCount - 1;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001420",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "transmit_byte_08001420"
        },
        "FUN_080026ca": {
            "renaming": {
                "FUN_080026ca": "do_nothing_080026ca"
            },
            "code": "\nvoid do_nothing_080026ca(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ca",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_080026ca"
        },
        "FUN_08000de4": {
            "renaming": {
                "FUN_08000de4": "initializeHardware_08000de4",
                "puVar1": "ptr_data",
                "*puVar1": "*ptr_data",
                "DAT_08000e14": "ptr_data"
            },
            "code": "HAL_StatusTypeDef initializeHardware_08000de4(void)\n{\n  uint32_t *DAT_08000e14 = DAT_08000e14;\n  *DAT_08000e14 |= 0x200;\n  *DAT_08000e14 |= 0x400;\n  *DAT_08000e14 |= 0x100;\n  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);\n  initializeHardware_08000de4Tick(15);\n  HAL_MspInit();\n  return HAL_OK;\n}",
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_MspInit",
                "HAL_InitTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000de4",
            "calling": [
                "hw_config_init"
            ],
            "imported": false,
            "current_name": "initializeHardware_08000de4"
        },
        "FUN_08003840": {
            "renaming": {
                "FUN_08003840": "handle_timer_interrupt_08003840",
                "PTR_timer_handles_08003850": "PTR_timer_handles_08003850",
                "TIM_HandleTypeDef": "TIM_HandleTypeDef",
                "HAL_TIM_IRQHandler": "HAL_TIM_IRQHandler",
                "timer_handle": "timer_handle"
            },
            "code": "void handle_timer_interrupt_08003840(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_08003850 + 0x28);\n  if (timer_handle != NULL)\n  {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003840",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08003840"
        },
        "FUN_080026ce": {
            "renaming": {
                "FUN_080026ce": "handle_timer_interrupt_080026ce",
                "htim": "timer",
                "TIM_TypeDef": "TimerInstance",
                "pTVar1": "timer_instance",
                "SR": "status_register",
                "DIER": "DMA_interrupt_enable_register",
                "HAL_TIM_ACTIVE_CHANNEL_1": "ActiveChannel1",
                "HAL_TIM_ACTIVE_CHANNEL_2": "ActiveChannel2",
                "HAL_TIM_ACTIVE_CHANNEL_3": "ActiveChannel3",
                "HAL_TIM_ACTIVE_CHANNEL_4": "ActiveChannel4",
                "HAL_TIM_ACTIVE_CHANNEL_CLEARED": "ActiveChannelCleared",
                "CCMR1": "capture_compare_mode_register_1",
                "CCMR2": "capture_compare_mode_register_2",
                "TIM_FLAG_CC1": "CaptureCompare1Flag",
                "TIM_IT_CC1": "CaptureCompare1Interrupt",
                "TIM_FLAG_CC2": "CaptureCompare2Flag",
                "TIM_IT_CC2": "CaptureCompare2Interrupt",
                "TIM_FLAG_CC3": "CaptureCompare3Flag",
                "TIM_IT_CC3": "CaptureCompare3Interrupt",
                "TIM_FLAG_CC4": "CaptureCompare4Flag",
                "TIM_IT_CC4": "CaptureCompare4Interrupt",
                "TIM_FLAG_UPDATE": "UpdateFlag",
                "TIM_IT_UPDATE": "UpdateInterrupt",
                "TIM_FLAG_BREAK": "BreakFlag",
                "TIM_IT_BREAK": "BreakInterrupt",
                "TIM_FLAG_TRIGGER": "TriggerFlag",
                "TIM_IT_TRIGGER": "TriggerInterrupt",
                "TIM_FLAG_COM": "CommutationFlag",
                "TIM_IT_COM": "CommutationInterrupt",
                "HAL_TIM_OC_DelayElapsedCallback": "OutputCompareDelayElapsedCallback",
                "HAL_TIM_PWM_PulseFinishedCallback": "PWM_PulseFinishedCallback",
                "HAL_TIM_IC_CaptureCallback": "InputCaptureCallback",
                "HAL_TIM_PeriodElapsedCallback": "PeriodElapsedCallback",
                "HAL_TIMEx_BreakCallback": "BreakCallback",
                "HAL_TIM_TriggerCallback": "TriggerCallback",
                "HAL_TIMEx_CommutationCallback": "CommutationCallback"
            },
            "code": "void handle_timer_interrupt_080026ce(TIM_HandleTypeDef *timer)\n{\n  TIM_TypeDef *timer_instance;\n  timer_instance = timer->Instance;\n  \n  if (((timer_instance->SR & TIM_FLAG_CC1) != 0) && ((timer_instance->DIER & TIM_IT_CC1) != 0)) {\n    timer_instance->SR = ~(TIM_FLAG_CC1);\n    timer->Channel = HAL_TIM_ACTIVE_CHANNEL_1;\n    if ((timer_instance->CCMR1 & TIM_CCMR1_CC1S) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timer);\n      HAL_TIM_PWM_PulseFinishedCallback(timer);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timer);\n    }\n    timer->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  \n  timer_instance = timer->Instance;\n  if (((timer_instance->SR & TIM_FLAG_CC2) != 0) && ((timer_instance->DIER & TIM_IT_CC2) != 0)) {\n    timer_instance->SR = ~(TIM_FLAG_CC2);\n    timer->Channel = HAL_TIM_ACTIVE_CHANNEL_2;\n    if ((timer_instance->CCMR1 & TIM_CCMR1_CC2S) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timer);\n      HAL_TIM_PWM_PulseFinishedCallback(timer);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timer);\n    }\n    timer->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  \n  timer_instance = timer->Instance;\n  if (((timer_instance->SR & TIM_FLAG_CC3) != 0) && ((timer_instance->DIER & TIM_IT_CC3) != 0)) {\n    timer_instance->SR = ~(TIM_FLAG_CC3);\n    timer->Channel = HAL_TIM_ACTIVE_CHANNEL_3;\n    if ((timer_instance->CCMR2 & TIM_CCMR2_CC3S) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timer);\n      HAL_TIM_PWM_PulseFinishedCallback(timer);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timer);\n    }\n    timer->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  \n  timer_instance = timer->Instance;\n  if (((timer_instance->SR & TIM_FLAG_CC4) != 0) && ((timer_instance->DIER & TIM_IT_CC4) != 0)) {\n    timer_instance->SR = ~(TIM_FLAG_CC4);\n    timer->Channel = HAL_TIM_ACTIVE_CHANNEL_4;\n    if ((timer_instance->CCMR2 & TIM_CCMR2_CC4S) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timer);\n      HAL_TIM_PWM_PulseFinishedCallback(timer);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timer);\n    }\n    timer->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  \n  timer_instance = timer->Instance;\n  if (((timer_instance->SR & TIM_FLAG_UPDATE) != 0) && ((timer_instance->DIER & TIM_IT_UPDATE) != 0)) {\n    timer_instance->SR = ~(TIM_FLAG_UPDATE);\n    HAL_TIM_PeriodElapsedCallback(timer);\n  }\n  \n  timer_instance = timer->Instance;\n  if (((timer_instance->SR & TIM_FLAG_BREAK) != 0) && ((timer_instance->DIER & TIM_IT_BREAK) != 0)) {\n    timer_instance->SR = ~(TIM_FLAG_BREAK);\n    HAL_TIMEx_BreakCallback(timer);\n  }\n  \n  timer_instance = timer->Instance;\n  if (((timer_instance->SR & TIM_FLAG_TRIGGER) != 0) && ((timer_instance->DIER & TIM_IT_TRIGGER) != 0)) {\n    timer_instance->SR = ~(TIM_FLAG_TRIGGER);\n    HAL_TIM_TriggerCallback(timer);\n  }\n  \n  timer_instance = timer->Instance;\n  if (((timer_instance->SR & TIM_FLAG_COM) != 0) && ((timer_instance->DIER & TIM_IT_COM) != 0)) {\n    timer_instance->SR = ~(TIM_FLAG_COM);\n    HAL_TIMEx_CommutationCallback(timer);\n  }\n}\n",
            "called": [
                "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIMEx_CommutationCallback",
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIMEx_BreakCallback",
                "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_TriggerCallback",
                "HAL_TIM_OC_DelayElapsedCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ce",
            "calling": [
                "TIM1_UP_TIM10_IRQHandler",
                "TIM5_IRQHandler",
                "TIM1_BRK_TIM9_IRQHandler",
                "TIM1_TRG_COM_TIM11_IRQHandler",
                "TIM2_IRQHandler",
                "TIM7_IRQHandler",
                "TIM8_UP_TIM13_IRQHandler",
                "TIM8_BRK_TIM12_IRQHandler",
                "TIM3_IRQHandler",
                "TIM8_TRG_COM_TIM14_IRQHandler",
                "TIM6_DAC_IRQHandler",
                "TIM4_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_timer_interrupt_080026ce"
        },
        "FUN_080026cc": {
            "renaming": {
                "FUN_080026cc": "do_nothing_080026cc"
            },
            "code": "\nvoid do_nothing_080026cc(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026cc",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_080026cc"
        },
        "FUN_08001f3c": {
            "renaming": {
                "FUN_08001f3c": "reset_i2c_08001f3c",
                "hdma": "i2c_handle",
                "hi2c": "i2c_ptr",
                "Parent": "Parent",
                "Instance": "Instance",
                "XferCount": "XferCount",
                "hdmatx": "hdmatx",
                "XferAbortCallback": "XferAbortCallback",
                "hdmarx": "hdmarx",
                "State": "State",
                "HAL_I2C_STATE_ABORT": "HAL_I2C_STATE_ABORT",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "Mode": "Mode",
                "HAL_I2C_MODE_NONE": "HAL_I2C_MODE_NONE",
                "ErrorCode": "ErrorCode",
                "CR1": "CR1",
                "HAL_I2C_ErrorCallback": "HAL_I2C_ErrorCallback",
                "HAL_I2C_AbortCpltCallback": "HAL_I2C_AbortCpltCallback"
            },
            "code": "void reset_i2c_08001f3c(I2C_HandleTypeDef *i2c_handle)\n{\n  I2C_HandleTypeDef *i2c_ptr;\n  i2c_ptr = (I2C_HandleTypeDef *)i2c_handle->Parent;\n  i2c_ptr->Instance->CR1 &= 0xfffffbff;\n  i2c_ptr->XferCount = 0;\n  i2c_ptr->hdmatx->XferAbortCallback = NULL;\n  i2c_ptr->hdmarx->XferAbortCallback = NULL;\n  if (i2c_ptr->State != HAL_I2C_STATE_ABORT) {\n    i2c_ptr->State = HAL_I2C_STATE_READY;\n    i2c_ptr->Mode = HAL_I2C_MODE_NONE;\n    i2c_ptr->Instance->CR1 &= 0xfffffffe;\n    HAL_I2C_ErrorCallback(i2c_ptr);\n    return;\n  }\n  i2c_ptr->State = HAL_I2C_STATE_READY;\n  i2c_ptr->Mode = HAL_I2C_MODE_NONE;\n  i2c_ptr->ErrorCode = 0;\n  i2c_ptr->Instance->CR1 &= 0xfffffffe;\n  HAL_I2C_AbortCpltCallback(i2c_ptr);\n  return;\n}",
            "called": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_AbortCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f3c",
            "calling": [],
            "imported": false,
            "current_name": "reset_i2c_08001f3c"
        },
        "FUN_08000218": {
            "renaming": {
                "FUN_08000218": "get_string_length_08000218",
                "__s": "string",
                "pcVar3": "string_start_ptr",
                "pcVar2": "current_char_ptr",
                "cVar1": "current_char"
            },
            "code": "size_t get_string_length_08000218(char* string){\n    char current_char;\n    char* current_char_ptr;\n    char* string_start_ptr;\n    \n    string_start_ptr = string;\n    do{\n        current_char_ptr = string_start_ptr + 1;\n        current_char = *string_start_ptr;\n        string_start_ptr = current_char_ptr;\n    } while (current_char != '\\0');\n    return (size_t)(current_char_ptr + (-1 - (int)string));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000218",
            "calling": [
                "printNumber"
            ],
            "imported": false,
            "current_name": "get_string_length_08000218"
        },
        "FUN_0800339c": {
            "renaming": {
                "FUN_0800339c": "get_PWM_pin_functionality_0800339c",
                "pin": "pin_name",
                "uVar1": "pin_functionality",
                "uVar2": "shifted_pin"
            },
            "code": "uint32_t get_PWM_pin_functionality_0800339c(PinName_conflict pin)\n{\n  uint32_t pin_functionality = pinmap_function(pin,(PinMap_conflict *)PTR_PinMap_PWM_080033c4);\n  uint32_t shifted_pin = (pin_functionality << 12) >> 27;\n  if (shifted_pin == 3) {\n    return 8;\n  }\n  if (shifted_pin == 4) {\n    return 12;\n  }\n  if (shifted_pin == 2) {\n    return 4;\n  }\n  return 0;\n}",
            "called": [
                "pinmap_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800339c",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "get_PWM_pin_functionality_0800339c"
        },
        "FUN_08003968": {
            "renaming": {
                "FUN_08003968": "handle_I2C_errors_08003968",
                "PTR_i2c_handles_08003974": "PTR_i2c_handles",
                "i2c_handle": "i2c_handle"
            },
            "code": "void handle_I2C_errors_08003968(I2C_HandleTypeDef *i2c_handle)\n{\n  HAL_I2C_ER_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003968",
            "calling": [],
            "imported": false,
            "current_name": "handle_I2C_errors_08003968"
        },
        "FUN_0800557e": {
            "renaming": {
                "FUN_0800557e": "do_nothing_0800557e"
            },
            "code": "\nvoid do_nothing_0800557e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557e",
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557e"
        },
        "FUN_08000e60": {
            "renaming": {
                "FUN_08000e60": "setInterruptPriority_08000e60",
                "IRQn": "irq",
                "PreemptPriority": "preemptPriority",
                "SubPriority": "subPriority",
                "uVar1": "irqNum",
                "uVar2": "priorityGroup",
                "uVar3": "priorityBits",
                "DAT_08000ebc": "priorityGroupAddress",
                "priorityMask": "priorityMask",
                "preemptBits": "preemptBits",
                "subBits": "subBits",
                "priority": "priority",
                "DAT_08000ec0": "irqNumAddress"
            },
            "code": "void setInterruptPriority_08000e60(IRQn_Type_conflict irq, uint32_t preemptPriority, uint32_t subPriority) {\n  uint irqNum = (uint)irq;\n  uint priorityGroup = (uint)(*(int *)(DAT_08000ebc + 0xc) << 0x15) >> 0x1d;\n  uint priorityBits = 7 - priorityGroup;\n  if (priorityBits > 3) {\n    priorityBits = 4;\n  }\n  if (priorityGroup + 4 < 7) {\n    priorityGroup = 0;\n  }\n  else {\n    priorityGroup -= 3;\n  }\n  uint priorityMask = (1 << (priorityBits & 0xff)) - 1U;\n  uint preemptBits = preemptPriority & priorityMask;\n  uint subBits = (1 << (priorityGroup & 0xff)) - 1U & subPriority;\n  uint priority = (preemptBits << (priorityGroup & 0xff)) | subBits;\n  if ((int)irqNum < 0) {\n    *(char *)(DAT_08000ec0 + (irqNum & 0xf)) = (char)(priority << 4);\n  }\n  else {\n    *(char *)(irqNum + 0xe000e400) = (char)(priority << 4);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e60",
            "calling": [
                "uart_attach_rx_callback",
                "uart_attach_tx_callback",
                "SystemClock_Config",
                "HAL_InitTick"
            ],
            "imported": false,
            "current_name": "setInterruptPriority_08000e60"
        },
        "FUN_0800557c": {
            "renaming": {
                "FUN_0800557c": "do_nothing_0800557c"
            },
            "code": "\nvoid do_nothing_0800557c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557c",
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557c"
        },
        "FUN_0800165a": {
            "renaming": {
                "FUN_0800165a": "check_i2c_address_match_0800165a",
                "hi2c": "i2c_handle",
                "AddrMatchCode": "address_match_code",
                "OwnAddress1": "own_address_1",
                "OwnAddress2": "own_address_2"
            },
            "code": "HAL_StatusTypeDef check_i2c_address_match_0800165a(I2C_HandleTypeDef *i2c_handle)\n{\n  uint16_t address_match_code;\n  if ((i2c_handle->Instance->SR2 & 0x80) == 0) {\n    address_match_code = *(uint16_t *)&(i2c_handle->Init).OwnAddress1;\n  }\n  else {\n    address_match_code = *(uint16_t *)&(i2c_handle->Init).OwnAddress2;\n  }\n  HAL_I2C_AddrCallback(i2c_handle,(i2c_handle->Instance->SR2 & 4) == 0,address_match_code);\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_AddrCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800165a",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "check_i2c_address_match_0800165a"
        },
        "FUN_080037d4": {
            "renaming": {
                "FUN_080037d4": "handle_timer_interrupt_080037d4",
                "PTR_timer_handles_080037e4": "PTR_timer_handles",
                "TIM_HandleTypeDef": "TimerHandle",
                "timer_handle": "current_timer_handle"
            },
            "code": "void handle_timer_interrupt_080037d4(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_080037e4_080037e4 + 0x10);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037d4",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_080037d4"
        },
        "FUN_08000b04": {
            "renaming": {
                "__thiscall Modbus::FUN_08000b04": "parseRegistersAndSendResponse",
                "this": "modbus",
                "regs": "registers",
                "u8size": "size",
                "bVar1": "registerIndex",
                "bVar2": "numRegisters",
                "uVar3": "bufferSize",
                "uVar4": "registerValue",
                "uVar5": "index",
                "FUN_08000b04": "parseRegistersAndSendResponse_08000b04"
            },
            "code": "int8_t __thiscall Modbus::parseRegistersAndSendResponse_08000b04(Modbus *modbus, uint16_t *registers, uint8_t size)\n{\n    byte registerIndex = modbus->au8Buffer[3];\n    byte numRegisters = modbus->au8Buffer[5];\n    modbus->au8Buffer[4] = '\\0';\n    modbus->au8Buffer[5] = numRegisters;\n    modbus->u8BufferSize = 6;\n    for (uint index = 0; index < numRegisters; index++) {\n        uint16_t registerValue = makeWord(modbus->au8Buffer[index * 2 + 7], modbus->au8Buffer[index * 2 + 8]);\n        registers[registerIndex + index] = registerValue;\n    }\n    uint8_t bufferSize = modbus->u8BufferSize;\n    sendTxBuffer(modbus);\n    return bufferSize + 2;\n}",
            "called": [
                "sendTxBuffer",
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b04",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "parseRegistersAndSendResponse_08000b04"
        },
        "FUN_0800262c": {
            "renaming": {
                "FUN_0800262c": "check_RTC_alarm_events_0800262c",
                "hrtc": "rtc_handle",
                "RTC_CR_ALRAIE": "RTC_CR_ALARMA_ENABLE",
                "RTC_CR_ALRBIE": "RTC_CR_ALARMB_ENABLE",
                "RTC_ISR_ALRAF": "RTC_ISR_ALARMA_FLAG",
                "RTC_ISR_ALRBF": "RTC_ISR_ALARMB_FLAG",
                "RTC_ISR_MASK": "RTC_ISR_FLAGS_MASK",
                "RTC_ISR_INIT": "RTC_ISR_INIT_VALUE",
                "DAT_08002688": "ALARM_FLAG_ADDRESS",
                "ALARM_FLAG_OFFSET": "ALARM_FLAG_OFFSET_VALUE",
                "ALARM_FLAG_VALUE": "ALARM_FLAG_SET_VALUE"
            },
            "code": "void check_RTC_alarm_events_0800262c(RTC_HandleTypeDef *rtc_handle) {\n  if (((rtc_handle->Instance->ISR & RTC_ISR_ALRAF) != 0) && ((rtc_handle->Instance->CR & RTC_CR_ALRAIE) != 0)) {\n    HAL_RTC_AlarmAEventCallback(rtc_handle);\n    rtc_handle->Instance->ISR = (rtc_handle->Instance->ISR & RTC_ISR_MASK) | RTC_ISR_INIT;\n  }\n  if (((rtc_handle->Instance->ISR & RTC_ISR_ALRBF) != 0) && ((rtc_handle->Instance->CR & RTC_CR_ALRBIE) != 0)) {\n    HAL_RTCEx_AlarmBEventCallback(rtc_handle);\n    rtc_handle->Instance->ISR = (rtc_handle->Instance->ISR & RTC_ISR_MASK) | RTC_ISR_INIT;\n  }\n  *(uint32_t *)(DAT_08002688 + ALARM_FLAG_OFFSET) = ALARM_FLAG_VALUE;\n  rtc_handle->State = HAL_RTC_STATE_READY;\n  return;\n}",
            "called": [
                "HAL_RTCEx_AlarmBEventCallback",
                "HAL_RTC_AlarmAEventCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800262c",
            "calling": [
                "RTC_Alarm_IRQHandler"
            ],
            "imported": false,
            "current_name": "check_RTC_alarm_events_0800262c"
        },
        "FUN_080047a8": {
            "renaming": {
                "FUN_080047a8": "handle_gpio_exti_irq_080047a8",
                "uVar1": "gpio_pin"
            },
            "code": "void handle_gpio_exti_irq_080047a8(void)\n{\n  uint16_t gpio_pin = 0x400;\n  while(gpio_pin < 0x8001)\n  {\n    HAL_GPIO_EXTI_IRQHandler(gpio_pin);\n    gpio_pin <<= 1;\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047a8",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_exti_irq_080047a8"
        },
        "FUN_08004388": {
            "renaming": {
                "__thiscall HardwareSerial::FUN_08004388": "configureSerial",
                "this": "serial",
                "baud": "baudrate",
                "config": "config",
                "bVar1": "configMask",
                "iVar2": "databits",
                "PTR_s__home_bo__arduino15_packages_STM_08004440": "assertionMessage",
                "PTR___PRETTY_FUNCTION___0800443c": "functionSignature",
                "PTR_s_databits__0_08004438": "databitsAssertionMessage",
                "FUN_08004388": "configureSerial_08004388"
            },
            "code": "void __thiscall configureSerial_08004388(HardwareSerial *serial, ulong baudrate, byte config) {\n  byte configMask = config & 7;\n  int databits = 0;\n  int parity = 0;\n  int stopbits = 0;\n  int uartConfig = 0;\n\n  if (configMask == 4) {\n    databits = 7;\n  } else if (configMask == 6) {\n    databits = 8;\n  } else if (configMask == 2) {\n    databits = 6;\n  }\n\n  if ((config & 0x30) == 0x30) {\n    parity = 0x600;\n    databits++;\n  } else if ((config & 0x20) == 0) {\n    parity = 0;\n  } else {\n    parity = 0x400;\n    databits++;\n  }\n\n  if ((config & 8) == 0) {\n    stopbits = 0;\n  } else {\n    stopbits = 0x2000;\n  }\n\n  if (databits == 8) {\n    uartConfig = 0;\n  } else if (databits == 9) {\n    uartConfig = 0x1000;\n  }\n\n  if (uartConfig != 0) {\n    (serial->_serial).baudrate = baudrate;\n    (serial->_serial).databits = uartConfig;\n    (serial->_serial).parity = parity;\n    (serial->_serial).stopbits = stopbits;\n    uart_init((serial_t *)&(serial->_serial));\n    uart_attach_rx_callback((serial_t *)&(serial->_serial), DAT_08004434);\n    return;\n  }\n\n  __assert_func(PTR_s__home_bo__arduino15_packages_STM_08004440, 299, PTR___PRETTY_FUNCTION___0800443c, PTR_s_databits__0_08004438);\n}\n",
            "called": [
                "uart_init",
                "__assert_func",
                "uart_attach_rx_callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004388",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "configureSerial_08004388"
        },
        "FUN_080051ac": {
            "renaming": {
                "FUN_080051ac": "handle_sigabrt_080051ac",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void handle_sigabrt_080051ac() {\n    raise(SIGABRT);\n    exit(EXIT_FAILURE);\n}",
            "called": [
                "raise",
                "_exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051ac",
            "calling": [
                "__throw_bad_function_call",
                "__assert_func"
            ],
            "imported": false,
            "current_name": "handle_sigabrt_080051ac"
        },
        "FUN_080052cc": {
            "renaming": {
                "FUN_080052cc": "flush_if_buffer_full_080052cc",
                "param_1": "stream",
                "param_2": "buffer",
                "param_3": "mode",
                "param_4": "flags",
                "uVar1": "result"
            },
            "code": "int flush_if_buffer_full_080052cc(int stream, char *buffer, int mode, int flags) {\n  int result;\n  if (*(int *)(buffer + 0x10) != 0) {\n    if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n      __sinit();\n    }\n    if (buffer == PTR___sf_fake_stdin_08005314) {\n      buffer = *(char **)(stream + 4);\n    }\n    else if (buffer == PTR___sf_fake_stdout_08005318) {\n      buffer = *(char **)(stream + 8);\n    }\n    else if (buffer == PTR___sf_fake_stderr_0800531c) {\n      buffer = *(char **)(stream + 0xc);\n    }\n    if (*(short *)(buffer + 0xc) != 0) {\n      result = __sflush_r(stream, buffer, mode, flags);\n      return result;\n    }\n  }\n  return 0;\n}",
            "called": [
                "__sflush_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052cc",
            "calling": [
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "flush_if_buffer_full_080052cc"
        },
        "FUN_08002eb2": {
            "renaming": {
                "FUN_08002eb2": "UART_Transmit_08002eb2",
                "huart": "uart_handle",
                "pData": "data",
                "Size": "size",
                "HAL_UART_STATE_READY": "UART_READY",
                "HAL_BUSY": "UART_BUSY",
                "HAL_ERROR": "UART_ERROR",
                "HAL_LOCKED": "UART_LOCKED",
                "pTxBuffPtr": "tx_buffer_pointer",
                "TxXferSize": "tx_transfer_size",
                "TxXferCount": "tx_transfer_count",
                "ErrorCode": "error_code",
                "HAL_UART_STATE_BUSY_TX": "UART_BUSY_TX",
                "HAL_UNLOCKED": "UART_UNLOCKED",
                "Instance": "uart_instance",
                "CR1": "control_register_1",
                "USART_CR1_TXEIE": "USART_TXEIE"
            },
            "code": "HAL_StatusTypeDef UART_Transmit_08002eb2(UART_HandleTypeDef *uart_handle, uint8_t *data, uint16_t size)\n{\n  if (uart_handle->gState != HAL_UART_STATE_READY) {\n    return HAL_BUSY;\n  }\n  if (data == NULL) {\n    return HAL_ERROR;\n  }\n  if (size == 0) {\n    return HAL_ERROR;\n  }\n  if (uart_handle->Lock != HAL_LOCKED) {\n    uart_handle->pTxBuffPtr = data;\n    uart_handle->TxXferSize = size;\n    uart_handle->TxXferCount = size;\n    uart_handle->ErrorCode = 0;\n    uart_handle->gState = HAL_UART_STATE_BUSY_TX;\n    uart_handle->Lock = HAL_UNLOCKED;\n    uart_handle->Instance->CR1 |= USART_CR1_TXEIE;\n    return HAL_OK;\n  }\n  return HAL_BUSY;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002eb2",
            "calling": [
                "HAL_UART_TxCpltCallback",
                "uart_attach_tx_callback"
            ],
            "imported": false,
            "current_name": "UART_Transmit_08002eb2"
        },
        "FUN_08005478": {
            "renaming": {
                "FUN_08005478": "process_data_08005478",
                "param_1": "data",
                "param_2": "callback",
                "param_3": "arg1",
                "param_4": "arg2",
                "piVar3": "node",
                "iVar4": "node_data",
                "iVar6": "node_count",
                "iVar2": "callback_arg",
                "uVar1": "callback_result",
                "uVar5": "result"
            },
            "code": "uint process_data_08005478(int data, code *callback, undefined4 arg1, undefined4 arg2)\n{\n    uint result = 0;\n    int *node = (int *)(data + 0x48);\n    while (node != (int *)0x0)\n    {\n        int node_data = node[2];\n        int node_count = node[1];\n        while (node_count > 0)\n        {\n            if (*(ushort *)(node_data + 0xc) > 1)\n            {\n                int callback_arg = *(short *)(node_data + 0xe) + 1;\n                if (callback_arg != 0)\n                {\n                    uint callback_result = (*callback)(data, node_data, arg1, callback_arg, arg2);\n                    result |= callback_result;\n                }\n            }\n            node_data += 0x68;\n            node_count--;\n        }\n        node = (int *)*node;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005478",
            "calling": [
                "_cleanup_r"
            ],
            "imported": false,
            "current_name": "process_data_08005478"
        },
        "FUN_08000d3c": {
            "renaming": {
                "FUN_08000d3c": "initialize_system_08000d3c",
                "iVar1": "i",
                "puVar2": "completed_ptr",
                "UNRECOVERED_JUMPTABLE": "jumptable_ptr",
                "PTR_completed_8667_08000d84": "completed_ptr",
                "PTR___dso_handle_08000d7c": "dso_handle_ptr",
                "PTR__sidata_08000d78": "sidata_ptr",
                "PTR_completed_8667_08000d80": "completed_end_ptr",
                "PTR__ebss_08000d88": "ebss_ptr"
            },
            "code": "void initialize_system_08000d3c(void)\n{\n  int i;\n  undefined4 *PTR_completed_8667_08000d84 = (undefined4 *)PTR_completed_8667_08000d84;\n  undefined4 *PTR___dso_handle_08000d7c = (undefined4 *)PTR___dso_handle_08000d7c;\n  code *jumptable_ptr = (code *)0x8000d72;\n  \n  for (i = 0; PTR___dso_handle_08000d7c + i < (undefined4 *)PTR_completed_8667_08000d80; i += 4) {\n    *(undefined4 *)(PTR___dso_handle_08000d7c + i) = *(undefined4 *)(PTR__sidata_08000d78 + i);\n  }\n  \n  for (; PTR_completed_8667_08000d84 < (undefined4 *)PTR__ebss_08000d88; PTR_completed_8667_08000d84++) {\n    *PTR_completed_8667_08000d84 = 0;\n  }\n  \n  SystemInit();\n  __libc_init_array();\n  \n  (*jumptable_ptr)();\n  return;\n}",
            "called": [
                "__libc_init_array",
                "main",
                "SystemInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d3c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_system_08000d3c"
        },
        "FUN_08003978": {
            "renaming": {
                "FUN_08003978": "FUNC_08003978"
            },
            "code": "\nvoid FUNC_08003978(serial_t *obj)\n\n{\n  USART_TypeDef *pUVar1;\n  USART_TypeDef *pUVar2;\n  USART_TypeDef *pUVar3;\n  USART_TypeDef *pUVar4;\n  USART_TypeDef *pUVar5;\n  USART_TypeDef *pUVar6;\n  USART_TypeDef *pUVar7;\n  USART_TypeDef *pUVar8;\n  void *a;\n  void *b;\n  USART_TypeDef *pUVar9;\n  GPIO_TypeDef *pGVar10;\n  uint32_t uVar11;\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_2;\n  uint32_t tmpreg_3;\n  uint32_t tmpreg_4;\n  uint32_t tmpreg_5;\n  uint32_t tmpreg_6;\n  uint32_t tmpreg_7;\n  GPIO_InitTypeDef GPIO_InitStruct;\n  \n  if (obj != (serial_t *)0x0) {\n    a = pinmap_peripheral(obj->pin_tx,(PinMap_conflict *)PTR_PinMap_UART_TX_08003c58);\n    b = pinmap_peripheral(obj->pin_rx,(PinMap_conflict *)PTR_PinMap_UART_RX_08003c5c);\n    if ((b == (void *)0x0) || (a == (void *)0x0)) {\n      iprintf(PTR_s_ERROR__at_least_one_UART_pin_has_08003c84);\n    }\n    else {\n      pUVar9 = (USART_TypeDef *)pinmap_merge_peripheral(a,b);\n      obj->uart = pUVar9;\n      pUVar8 = DAT_08003c7c;\n      pUVar7 = DAT_08003c78;\n      pUVar6 = DAT_08003c74;\n      pUVar5 = DAT_08003c70;\n      pUVar4 = DAT_08003c6c;\n      pUVar3 = DAT_08003c68;\n      pUVar2 = DAT_08003c64;\n      pUVar1 = DAT_08003c60;\n      if (pUVar9 == (USART_TypeDef *)0x0) {\n        iprintf(PTR_s_ERROR__U_S_ART_pins_mismatch_08003c88);\n      }\n      else {\n        if (pUVar9 == DAT_08003c60) {\n          DAT_08003c60[0xa93].CR2 = DAT_08003c60[0xa93].CR2 | 0x10;\n          pUVar1[0xa93].CR2 = pUVar1[0xa93].CR2 & 0xffffffef;\n          pUVar1[0xa94].CR3 = pUVar1[0xa94].CR3 | 0x10;\n          obj->index = '\\0';\n          obj->irq = USART1_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c64) {\n          DAT_08003c64[0x11dc].CR2 = DAT_08003c64[0x11dc].CR2 | 0x20000;\n          pUVar2[0x11dc].CR2 = pUVar2[0x11dc].CR2 & 0xfffdffff;\n          pUVar2[0x11dd].CR3 = pUVar2[0x11dd].CR3 | 0x20000;\n          obj->index = '\\x01';\n          obj->irq = USART2_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c68) {\n          DAT_08003c68[0x11b8].SR = DAT_08003c68[0x11b8].SR | 0x40000;\n          pUVar3[0x11b8].SR = pUVar3[0x11b8].SR & 0xfffbffff;\n          pUVar3[0x11b9].DR = pUVar3[0x11b9].DR | 0x40000;\n          obj->index = '\\x02';\n          obj->irq = USART3_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c6c) {\n          DAT_08003c6c[0x1193].CR1 = DAT_08003c6c[0x1193].CR1 | 0x80000;\n          pUVar4[0x1193].CR1 = pUVar4[0x1193].CR1 & 0xfff7ffff;\n          pUVar4[0x1194].CR2 = pUVar4[0x1194].CR2 | 0x80000;\n          obj->index = '\\x03';\n          obj->irq = UART4_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c70) {\n          DAT_08003c70[0x116e].GTPR = DAT_08003c70[0x116e].GTPR | 0x100000;\n          pUVar5[0x116e].GTPR = pUVar5[0x116e].GTPR & 0xffefffff;\n          pUVar5[0x1170].SR = pUVar5[0x1170].SR | 0x100000;\n          obj->index = '\\x04';\n          obj->irq = UART5_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c74) {\n          DAT_08003c74[0xa6f].SR = DAT_08003c74[0xa6f].SR | 0x20;\n          pUVar6[0xa6f].SR = pUVar6[0xa6f].SR & 0xffffffdf;\n          pUVar6[0xa70].DR = pUVar6[0xa70].DR | 0x20;\n          obj->index = '\\x05';\n          obj->irq = USART6_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c78) {\n          DAT_08003c78[0x1001].DR = DAT_08003c78[0x1001].DR | 0x40000000;\n          pUVar7[0x1001].DR = pUVar7[0x1001].DR & 0xbfffffff;\n          pUVar7[0x1002].BRR = pUVar7[0x1002].BRR | 0x40000000;\n          obj->index = '\\x06';\n          obj->irq = UART7_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c7c) {\n          DAT_08003c7c[0xfdc].CR2 = DAT_08003c7c[0xfdc].CR2 | 0x80000000;\n          pUVar8[0xfdc].CR2 = pUVar8[0xfdc].CR2 & 0x7fffffff;\n          pUVar8[0xfdd].CR3 = pUVar8[0xfdd].CR3 | 0x80000000;\n          obj->index = '\\a';\n          obj->irq = UART8_IRQn;\n        }\n        pGVar10 = set_GPIO_Port_Clock((uint)((int)obj->pin_rx << 0x18) >> 0x1c);\n        uVar11 = pinmap_function(obj->pin_rx,(PinMap_conflict *)PTR_PinMap_UART_RX_08003c5c);\n        GPIO_InitStruct.Pin = 1 << (obj->pin_rx & 0xfU) & 0xffff;\n        GPIO_InitStruct.Mode = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        GPIO_InitStruct.Pull = (uVar11 << 0x1a) >> 0x1e;\n        GPIO_InitStruct.Alternate = (uVar11 << 0x11) >> 0x19;\n        GPIO_InitStruct.Speed = 3;\n        HAL_GPIO_Init(pGVar10,&GPIO_InitStruct);\n        pGVar10 = set_GPIO_Port_Clock((uint)((int)obj->pin_tx << 0x18) >> 0x1c);\n        uVar11 = pinmap_function(obj->pin_tx,(PinMap_conflict *)PTR_PinMap_UART_TX_08003c58);\n        GPIO_InitStruct.Pin = 1 << (obj->pin_tx & 0xfU) & 0xffff;\n        GPIO_InitStruct.Mode = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        GPIO_InitStruct.Pull = (uVar11 << 0x1a) >> 0x1e;\n        HAL_GPIO_Init(pGVar10,&GPIO_InitStruct);\n        *(UART_HandleTypeDef **)(PTR_uart_handlers_08003c80 + (uint)obj->index * 4) = &obj->handle;\n        (obj->handle).Instance = obj->uart;\n        (obj->handle).Init.BaudRate = obj->baudrate;\n        (obj->handle).Init.WordLength = obj->databits;\n        (obj->handle).Init.StopBits = obj->stopbits;\n        (obj->handle).Init.Parity = obj->parity;\n        (obj->handle).Init.Mode = 0xc;\n        (obj->handle).Init.HwFlowCtl = 0;\n        (obj->handle).Init.OverSampling = 0;\n        HAL_UART_Init(&obj->handle);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "HAL_GPIO_Init",
                "HAL_UART_Init",
                "pinmap_function",
                "set_GPIO_Port_Clock",
                "pinmap_peripheral",
                "pinmap_merge_peripheral",
                "iprintf"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003978",
            "calling": [
                "uart_debug_init",
                "begin"
            ],
            "imported": false,
            "current_name": "FUNC_08003978"
        },
        "FUN_08003854": {
            "renaming": {
                "FUN_08003854": "handle_timer_interrupt_08003854",
                "PTR_timer_handles_08003864": "PTR_timer_handles",
                "timer_handle": "timer_handle"
            },
            "code": "void handle_timer_interrupt_08003854(void)\n{\n    TIM_HandleTypeDef *timer_handle = *(TIM_HandleTypeDef **)(PTR_timer_handles_08003864_08003864 + 0x2c);\n    if (timer_handle != NULL) {\n        HAL_TIM_IRQHandler(timer_handle);\n    }\n    return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003854",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08003854"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "clear_pin_bit_in_map_0800316c",
                "pin": "pin_name",
                "map": "pin_map",
                "uVar1": "pin_index",
                "0x18": "PIN_INDEX_SHIFT",
                "0x1c": "PIN_INDEX_MASK",
                "0xfU": "PIN_BIT_INDEX_MASK"
            },
            "code": "void clear_pin_bit_in_map_0800316c(PinName_conflict pin, uint32_t *pin_map) {\n    uint32_t pin_index = (uint32_t)pin >> 4;\n    uint32_t pin_bit_index = (uint32_t)pin & 0xF;\n    uint32_t pin_bit_mask = ~(1 << pin_bit_index);\n    pin_map[pin_index] &= pin_bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "clear_pin_bit_in_map_0800316c"
        },
        "FUN_080040d0": {
            "renaming": {
                "FUN_080040d0": "returnError_080040d0",
                "file_UNUSED": "fileDescriptor"
            },
            "code": "int returnError_080040d0(int fileDescriptor)\n{\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d0",
            "calling": [
                "_close_r"
            ],
            "imported": false,
            "current_name": "returnError_080040d0"
        },
        "FUN_0800401c": {
            "renaming": {
                "FUN_0800401c": "handle_UART4_interrupt_0800401c",
                "UART4_IRQn": "UART4_Interrupt",
                "PTR_uart_handlers_08004030": "uart_handlers_base_address",
                "uart4_handler_ptr": "uart4_handler"
            },
            "code": "void handle_UART4_interrupt_0800401c(void)\n{\n  HAL_NVIC_ClearPendingIRQ(UART4_IRQn);\n  UART_HandleTypeDef *uart4_handler_ptr = *(UART_HandleTypeDef **)(PTR_uart_handlers_08004030 + 0xc);\n  HAL_UART_IRQHandler(uart4_handler_ptr);\n  return;\n}",
            "called": [
                "HAL_UART_IRQHandler",
                "HAL_NVIC_ClearPendingIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800401c",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART4_interrupt_0800401c"
        },
        "FUN_080040d6": {
            "renaming": {
                "FUN_080040d6": "set_file_permission_080040d6",
                "file_UNUSED": "file_descriptor",
                "st": "file_stat"
            },
            "code": "int set_file_permission_080040d6(int file_descriptor, stat *file_stat){\n  file_stat->st_mode = S_IFREG | S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH; // sets permission to read and write for owner, group and others\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d6",
            "calling": [
                "_fstat_r"
            ],
            "imported": false,
            "current_name": "set_file_permission_080040d6"
        },
        "FUN_08004a34": {
            "renaming": {
                "FUN_08004a34": "write_char_to_buffer_08004a34",
                "param_1": "buffer_length",
                "param_2": "character",
                "param_3": "buffer",
                "uVar1": "result",
                "pbVar2": "last_char",
                "current_char": "current_char"
            },
            "code": "uint write_char_to_buffer_08004a34(uint buffer_length, byte character, byte **buffer) {\n  uint result;\n  byte *last_char = buffer[2] - 1;\n  buffer[2] = last_char;\n  if (((int)last_char < 0) && (((int)last_char < (int)buffer[6] || (character == 10)))) {\n    result = __swbuf_r();\n    return result;\n  }\n  byte *current_char = *buffer;\n  *buffer = current_char + 1;\n  *current_char = character;\n  return (uint)character;\n}",
            "called": [
                "__swbuf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a34",
            "calling": [
                "__sfputs_r"
            ],
            "imported": false,
            "current_name": "write_char_to_buffer_08004a34"
        },
        "FUN_080002d0": {
            "renaming": {
                "FUN_080002d0": "divide_numbers_080002d0",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void divide_numbers_080002d0(int dividend, int divisor, int quotient, int remainder)\n{\n    if ((remainder == 0) && (quotient == 0)) {\n        if (divisor != 0 || dividend != 0) {\n            quotient = -1;\n            dividend = -1;\n        }\n        __aeabi_idiv0(dividend, divisor);\n        return;\n    }\n    __udivmoddi4();\n    return;\n}",
            "called": [
                "__udivmoddi4",
                "__aeabi_idiv0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002d0",
            "calling": [
                "HAL_RCC_GetSysClockFreq"
            ],
            "imported": false,
            "current_name": "divide_numbers_080002d0"
        },
        "FUN_08003f00": {
            "renaming": {
                "FUN_08003f00": "get_uart_handler_index_08003f00",
                "*huart": "*uart_handler",
                "uVar1": "index",
                "PTR_uart_handlers_08003f20": "handlers_array"
            },
            "code": "uint8_t get_uart_handler_index_08003f00(UART_HandleTypeDef *uart_handler)\n{\n  uint8_t index = 0;\n  if (uart_handler == NULL) {\n    index = 10;\n  }\n  else {\n    while (index < 10) {\n      if (uart_handler == PTR_uart_handlers_08003f20[index]) {\n        return index;\n      }\n      index++;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f00",
            "calling": [
                "HAL_UART_RxCpltCallback",
                "HAL_UART_TxCpltCallback"
            ],
            "imported": false,
            "current_name": "get_uart_handler_index_08003f00"
        },
        "FUN_08004270": {
            "renaming": {
                "FUN_08004270": "readByte_08004270",
                "this": "serial",
                "__fd": "fd",
                "__buf": "buffer",
                "__nbytes": "nbytes",
                "bVar1": "byteRead",
                "uVar2": "rxTail",
                "_serial": "serialData",
                "rx_head": "rxHead",
                "rx_tail": "rxTail",
                "rx_buff": "receiveBuffer"
            },
            "code": "ssize_t __thiscall HardwareSerial::readByte_08004270(HardwareSerial *serial, int fd, void *buffer, size_t nbytes) {\n  byte byteRead;\n  ushort rxTail = (serial->_serial).rx_tail;\n  if ((uint)(serial->_serial).rx_head != (uint)rxTail) {\n    byteRead = (serial->_serial).rx_buff[rxTail];\n    (serial->_serial).rx_tail = rxTail + 1 & 0x3f;\n    return (uint)byteRead;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004270",
            "calling": [],
            "imported": false,
            "current_name": "readByte_08004270"
        },
        "FUN_08005a04": {
            "renaming": {
                "FUN_08005a04": "do_nothing_08005a04"
            },
            "code": "\nvoid do_nothing_08005a04(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a04",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08005a04"
        },
        "FUN_080037e8": {
            "renaming": {
                "FUN_080037e8": "handle_timer_interrupt_080037e8",
                "PTR_timer_handles_080037f8": "PTR_timer_handles",
                "timer_handle": "timer_handle"
            },
            "code": "void handle_timer_interrupt_080037e8(void)\n{\n    TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_080037f8_080037f8 + 0x14);\n    if (timer_handle != NULL) {\n        HAL_TIM_IRQHandler(timer_handle);\n    }\n    return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037e8",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_080037e8"
        },
        "FUN_08001440": {
            "renaming": {
                "FUN_08001440": "transfer_byte_08001440",
                "*hi2c": "*i2c_handle",
                "puVar1": "buffer_pointer",
                "hi2c->XferCount": "i2c_handle->XferCount",
                "hi2c->pBuffPtr": "i2c_handle->pBuffPtr",
                "hi2c->Instance->DR": "i2c_handle->Instance->DR"
            },
            "code": "HAL_StatusTypeDef transfer_byte_08001440(I2C_HandleTypeDef *i2c_handle)\n{\n  uint8_t *buffer_pointer;\n  \n  if (i2c_handle->XferCount != 0) {\n    buffer_pointer = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_pointer + 1;\n    *buffer_pointer = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001440",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "transfer_byte_08001440"
        },
        "FUN_08000230": {
            "renaming": {
                "FUN_08000230": "find_byte_08000230",
                "__s": "input",
                "__c": "byte_to_find",
                "__n": "size",
                "bVar1": "byte_result",
                "cVar2": "bit_0",
                "cVar3": "bit_8",
                "cVar4": "bit_16",
                "cVar5": "bit_24",
                "pbVar6": "byte_pointer_1",
                "puVar7": "uint_pointer",
                "pbVar8": "byte_pointer_2",
                "uVar9": "byte_to_find_u8",
                "uVar10": "aligned_offset",
                "uVar11": "aligned_size",
                "uVar12": "compare_result",
                "uVar13": "byte_mask",
                "bVar14": "bit_0_result",
                "bVar15": "bit_8_result",
                "bVar16": "bit_16_result",
                "bVar17": "bit_24_result"
            },
            "code": "void * find_byte_08000230(void *input, int byte_to_find, size_t size)\n{\n    uint8_t *byte_input = (uint8_t *)input;\n    uint8_t byte_to_find_u8 = byte_to_find & 0xff;\n    if (size < 0x10) {\n        while (size-- > 0) {\n            if (*byte_input++ == byte_to_find_u8) {\n                return byte_input - 1;\n            }\n        }\n        return NULL;\n    }\n    uint8_t *end_input = byte_input + size;\n    uint64_t byte_to_find_u64 = byte_to_find_u8;\n    byte_to_find_u64 |= byte_to_find_u64 << 8;\n    byte_to_find_u64 |= byte_to_find_u64 << 16;\n    byte_to_find_u64 |= byte_to_find_u64 << 32;\n    uint8_t *aligned_input = byte_input;\n    if ((uintptr_t)aligned_input & 7) {\n        while ((uintptr_t)aligned_input & 7) {\n            if (*byte_input++ == byte_to_find_u8) {\n                return byte_input - 1;\n            }\n            if (byte_input == end_input) {\n                return NULL;\n            }\n            aligned_input = byte_input;\n        }\n    }\n    uint64_t *aligned_input_u64 = (uint64_t *)aligned_input;\n    uint64_t byte_to_find_u64_dup = byte_to_find_u64 | (byte_to_find_u64 << 32);\n    while (byte_input <= (end_input - 8)) {\n        uint64_t input_u64 = *aligned_input_u64++;\n        uint64_t xor_result = input_u64 ^ byte_to_find_u64_dup;\n        if (((xor_result - 0x0101010101010101) & ~xor_result & 0x8080808080808080) != 0) {\n            uint8_t *byte_result = (uint8_t *)(aligned_input_u64 - 1);\n            if (byte_result[0] == byte_to_find_u8) {\n                return byte_result;\n            }\n            if (byte_result[1] == byte_to_find_u8) {\n                return byte_result + 1;\n            }\n            if (byte_result[2] == byte_to_find_u8) {\n                return byte_result + 2;\n            }\n            if (byte_result[3] == byte_to_find_u8) {\n                return byte_result + 3;\n            }\n            if (byte_result[4] == byte_to_find_u8) {\n                return byte_result + 4;\n            }\n            if (byte_result[5] == byte_to_find_u8) {\n                return byte_result + 5;\n            }\n            if (byte_result[6] == byte_to_find_u8) {\n                return byte_result + 6;\n            }\n            if (byte_result[7] == byte_to_find_u8) {\n                return byte_result + 7;\n            }\n        }\n        byte_input = (uint8_t *)aligned_input_u64;\n    }\n    size = end_input - byte_input;\n    while (size-- > 0) {\n        if (*byte_input++ == byte_to_find_u8) {\n            return byte_input - 1;\n        }\n    }\n    return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000230",
            "calling": [
                "_vfiprintf_r",
                "_printf_i"
            ],
            "imported": false,
            "current_name": "find_byte_08000230"
        },
        "FUN_080051bc": {
            "renaming": {
                "FUN_080051bc": "extract_data_from_buffer_080051bc",
                "param_1": "buffer",
                "param_2": "params",
                "iVar1": "data_offset",
                "piVar2": "tmp",
                "uVar3": "flags",
                "uVar4": "flag_bits",
                "iVar5": "chunk_size",
                "pcVar6": "data_extractor_func",
                "iVar7": "extracted_data_size",
                "uVar8": "original_buffer_value",
                "bVar9": "flag_bit_12_is_set"
            },
            "code": "uint32_t extract_data_from_buffer_080051bc(uint32_t *buffer, int *params)\n{\n  int data_offset;\n  int chunk_size;\n  uint32_t flags;\n  uint16_t flag_bits;\n  uint32_t result;\n  code *data_extractor_func;\n  int extracted_data_size;\n  uint32_t original_buffer_value;\n  bool flag_bit_12_is_set;\n\n  flag_bits = *(uint16_t *)(params + 3);\n  flags = (uint32_t)flag_bits;\n  if ((int)(flags << 0x1c) < 0) {\n    data_offset = params[4];\n    if (data_offset != 0) {\n      chunk_size = flags << 0x1e;\n      flag_bit_12_is_set = chunk_size == 0;\n      extracted_data_size = *params;\n      if (flag_bit_12_is_set) {\n        chunk_size = params[5];\n      }\n      *params = data_offset;\n      if (!flag_bit_12_is_set) {\n        chunk_size = 0;\n      }\n      params[2] = chunk_size;\n      for (extracted_data_size = extracted_data_size - data_offset; extracted_data_size > 0; extracted_data_size = extracted_data_size - chunk_size) {\n        chunk_size = (*(code *)params[10])(buffer, params[8], data_offset, extracted_data_size);\n        if (chunk_size < 1) {\n          flag_bits = *(uint16_t *)(params + 3);\n          goto LAB_080052b2;\n        }\n        data_offset = data_offset + chunk_size;\n      }\n    }\n  }\n  else if (((params[1] > 0) || (params[0x10] > 0)) &&\n          (data_extractor_func = (code *)params[0xb], data_extractor_func != (code *)0x0)) {\n    original_buffer_value = *buffer;\n    *buffer = 0;\n    if ((flag_bits & 0x1000) == 0) {\n      extracted_data_size = (*data_extractor_func)(buffer, params[8], flags & 0x1000, 1);\n      if ((extracted_data_size == -1) && (*buffer != 0)) {\n        if ((*buffer != 0x1d) && (*buffer != 0x16)) {\n          *(uint16_t *)(params + 3) = *(uint16_t *)(params + 3) | 0x40;\n          return 0xffffffff;\n        }\n        *buffer = original_buffer_value;\n        return 0;\n      }\n    }\n    else {\n      extracted_data_size = params[0x15];\n    }\n    if (((int)((uint)*(uint16_t *)(params + 3) << 0x1d) < 0) &&\n       (extracted_data_size = extracted_data_size - params[1], params[0xd] != 0)) {\n      extracted_data_size = extracted_data_size - params[0x10];\n    }\n    extracted_data_size = (*(code *)params[0xb])(buffer, params[8], extracted_data_size, 0);\n    flag_bits = *(uint16_t *)(params + 3);\n    if ((extracted_data_size == -1) &&\n       ((0x1d < *buffer || (-1 < (int)((DAT_080052c8 >> (*buffer & 0xff)) << 0x1f)))) {\nLAB_080052b2:\n      *(uint16_t *)(params + 3) = flag_bits | 0x40;\n      return 0xffffffff;\n    }\n    params[1] = 0;\n    *params = params[4];\n    if (((int)((uint)flag_bits << 0x13) < 0) && ((extracted_data_size != -1 || (*buffer == 0)))) {\n      params[0x15] = extracted_data_size;\n    }\n    int *tmp = (int *)params[0xd];\n    *buffer = original_buffer_value;\n    if (tmp != (int *)0x0) {\n      if (tmp != params + 0x11) {\n        _free_r(buffer);\n      }\n      params[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051bc",
            "calling": [
                "_fflush_r"
            ],
            "imported": false,
            "current_name": "extract_data_from_buffer_080051bc"
        },
        "FUN_08004034": {
            "renaming": {
                "FUN_08004034": "handle_UART5_interrupt_08004034",
                "UART5_IRQn": "UART5_Interrupt",
                "PTR_uart_handlers_08004048": "uart_handler_pointers"
            },
            "code": "void handle_UART5_interrupt_08004034(void)\n{\n  HAL_NVIC_ClearPendingIRQ(UART5_IRQn);\n  UART_HandleTypeDef *uart_handler = *(UART_HandleTypeDef **)(PTR_uart_handlers_08004048 + 0x10);\n  HAL_UART_IRQHandler(uart_handler);\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004034",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART5_interrupt_08004034"
        },
        "FUN_08000f8c": {
            "renaming": {
                "FUN_08000f8c": "abort_dma_transfer_08000f8c",
                "*hdma": "*dma_handle",
                "hdma->State": "dma_handle->State",
                "hdma->ErrorCode": "dma_handle->ErrorCode",
                "hdma->Instance->CR": "dma_handle->Instance->CR"
            },
            "code": "HAL_StatusTypeDef abort_dma_transfer_08000f8c(DMA_HandleTypeDef *dma_handle)\n{\n  if (dma_handle->State != HAL_DMA_STATE_BUSY) {\n    dma_handle->ErrorCode = 0x80;\n    return HAL_ERROR;\n  }\n  dma_handle->State = HAL_DMA_STATE_ABORT;\n  dma_handle->Instance->CR = dma_handle->Instance->CR & 0xfffffffe;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f8c",
            "calling": [
                "I2C_ITError",
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "abort_dma_transfer_08000f8c"
        },
        "FUN_08001684": {
            "renaming": {
                "FUN_08001684": "handleI2CEvents_08001684",
                "*hi2c": "*i2cHandle",
                "XferOptions": "transferOptions",
                "State": "state",
                "Instance": "instance",
                "PreviousState": "previousState",
                "Mode": "mode",
                "HAL_I2C_STATE_LISTEN": "HAL_I2C_STATE_LISTEN",
                "HAL_I2C_STATE_BUSY_TX": "HAL_I2C_STATE_BUSY_TX",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "HAL_I2C_MODE_NONE": "HAL_I2C_MODE_NONE",
                "HAL_I2C_ListenCpltCallback": "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_SlaveTxCpltCallback": "HAL_I2C_SlaveTxCpltCallback"
            },
            "code": "HAL_StatusTypeDef handleI2CEvents_08001684(I2C_HandleTypeDef *i2cHandle) {\n        if (((i2cHandle->transferOptions == 4) || (i2cHandle->transferOptions == 8)) &&\n            (i2cHandle->state == HAL_I2C_STATE_LISTEN)) {\n            i2cHandle->transferOptions = DAT_08001714;\n            i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffff8ff;\n            i2cHandle->Instance->SR1 = 0xfffffbff;\n            i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n            i2cHandle->previousState = 0;\n            i2cHandle->state = HAL_I2C_STATE_READY;\n            i2cHandle->mode = HAL_I2C_MODE_NONE;\n            HAL_I2C_ListenCpltCallback(i2cHandle);\n        } else if (i2cHandle->state == HAL_I2C_STATE_BUSY_TX) {\n            i2cHandle->transferOptions = DAT_08001714;\n            i2cHandle->previousState = 0x21;\n            i2cHandle->state = HAL_I2C_STATE_READY;\n            i2cHandle->mode = HAL_I2C_MODE_NONE;\n            i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffff8ff;\n            i2cHandle->Instance->SR1 = 0xfffffbff;\n            i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n            HAL_I2C_SlaveTxCpltCallback(i2cHandle);\n        } else {\n            i2cHandle->Instance->SR1 = 0xfffffbff;\n        }\n        return HAL_OK;\n    }",
            "called": [
                "HAL_I2C_SlaveTxCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001684",
            "calling": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "imported": false,
            "current_name": "handleI2CEvents_08001684"
        },
        "FUN_080001ac": {
            "renaming": {
                "FUN_080001ac": "check_if_initialized_080001ac",
                "param_1": "input_string",
                "*PTR_completed_8667_080001c4": "*PTR_completed_flag",
                "DAT_080001c8": "DAT_initialized_flag",
                "PTR__init_080001cc": "PTR_init_string"
            },
            "code": "char* check_if_initialized_080001ac(char* input_string) {\\n    if (*PTR_completed_8667_080001c4 == \"\\0\") {\\n        if (DAT_080001c8 != 0) {\\n            input_string = PTR__init_080001cc;\\n        }\\n        *PTR_completed_8667_080001c4 = 1;\\n    }\\n    return input_string;\\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ac",
            "calling": [],
            "imported": false,
            "current_name": "check_if_initialized_080001ac"
        },
        "FUN_080040e0": {
            "renaming": {
                "FUN_080040e0": "return_one_080040e0",
                "file_UNUSED": "file_unused"
            },
            "code": "int return_one_080040e0(int file_unused) {\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e0",
            "calling": [
                "_isatty_r"
            ],
            "imported": false,
            "current_name": "return_one_080040e0"
        },
        "FUN_08003868": {
            "renaming": {
                "FUN_08003868": "handle_timer_interrupt_08003868",
                "PTR_timer_handles_08003878": "PTR_timer_handles",
                "timer_handle": "timer_handle",
                "HAL_TIM_IRQHandler": "handle_timer_interrupt_request"
            },
            "code": "void handle_timer_interrupt_08003868(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef **)(PTR_timer_handles_08003878_08003878 + 0x34);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003868",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08003868"
        },
        "FUN_080048cc": {
            "renaming": {
                "FUN_080048cc": "fill_memory_with_byte_080048cc",
                "__s": "memory",
                "__c": "byte",
                "__n": "size",
                "puVar1": "mem"
            },
            "code": "void * fill_memory_with_byte_080048cc(void *memory, int byte, size_t size) {\n  unsigned char *mem = (unsigned char *)memory;\n  for (size_t i = 0; i < size; i++) {\n    mem[i] = (unsigned char)byte;\n  }\n  return memory;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048cc",
            "calling": [
                "std.isra.0",
                "__sfmoreglue",
                "__sfp"
            ],
            "imported": false,
            "current_name": "fill_memory_with_byte_080048cc"
        },
        "FUN_080040e4": {
            "renaming": {
                "FUN_080040e4": "file_unused_param_080040e4",
                "file_UNUSED": "file_descriptor",
                "ptr_UNUSED": "pointer_unused",
                "dir_UNUSED": "dir_unused"
            },
            "code": "int file_unused_param_080040e4(int file_descriptor, int pointer_unused, int dir_unused){\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e4",
            "calling": [
                "_lseek_r"
            ],
            "imported": false,
            "current_name": "file_unused_param_080040e4"
        },
        "FUN_08003506": {
            "renaming": {
                "FUN_08003506": "get_pin_name_from_peripheral_08003506",
                "PinMap_conflict": "PinMap",
                "map": "map_array",
                "PinName_conflict": "PinName",
                "NC": "NoConnection",
                "*peripheral": "void *peripheral",
                "*map": "PinMap *map_array"
            },
            "code": "PinName get_pin_name_from_peripheral_08003506(void *peripheral, PinMap *map_array) {\n        while(true) {\n            if (map_array->peripheral == NULL) {\n                return NC;\n            }\n            if (map_array->peripheral == peripheral) {\n                break;\n            }\n            map_array++;\n        }\n        return map_array->pin;\n    }",
            "called": [
                "pinmap_find_pin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003506",
            "calling": [
                "pinmap_pin",
                "pinmap_find_pin"
            ],
            "imported": false,
            "current_name": "get_pin_name_from_peripheral_08003506"
        },
        "FUN_080025e0": {
            "renaming": {
                "FUN_080025e0": "getSystemCoreClockValue_080025e0",
                "PTR_SystemCoreClock_080025e8": "systemCoreClockPointer"
            },
            "code": "uint32_t getSystemCoreClockValue_080025e0(void)\n{\n  return *(uint32_t *)PTR_SystemCoreClock_080025e8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e0",
            "calling": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "getSystemCoreClockValue_080025e0"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "file_not_used_080040e8",
                "file_UNUSED": "file_unused",
                "ptr_UNUSED": "pointer_unused",
                "len_UNUSED": "length_unused"
            },
            "code": "int file_not_used_080040e8(int file_unused,char *pointer_unused,int length_unused)\n{\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "_read_r"
            ],
            "imported": false,
            "current_name": "file_not_used_080040e8"
        },
        "FUN_08000a00": {
            "renaming": {
                "FUN_08000a00": "set_Modbus_Register_08000a00",
                "this": "modbus_instance",
                "regs": "registers",
                "u8size": "num_registers",
                "uVar1": "register_value",
                "uVar2": "bit_index",
                "uVar3": "register_index"
            },
            "code": "int8_t __thiscall set_Modbus_Register_08000a00(Modbus *modbus_instance, uint16_t *registers, uint8_t num_registers)\n{\n  uint16_t register_value;\n  uint register_index;\n  uint bit_index;\n  \n  register_value = makeWord(modbus_instance->au8Buffer[2], modbus_instance->au8Buffer[3]);\n  bit_index = register_value & 0xf;\n  register_index = ((uint)register_value << 0x14) >> 0x18;\n  \n  if (modbus_instance->au8Buffer[4] == 0xff) {\n    registers[register_index] = (ushort)(1 << bit_index) | registers[register_index];\n  }\n  else {\n    registers[register_index] = registers[register_index] & ~(ushort)(1 << bit_index);\n  }\n  \n  modbus_instance->u8BufferSize = '\\x06';\n  sendTxBuffer(modbus_instance);\n  return '\b';\n}",
            "called": [
                "sendTxBuffer",
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a00",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "set_Modbus_Register_08000a00"
        },
        "FUN_080047c0": {
            "renaming": {
                "__thiscall std::function<void()>::operator__": "execute_function",
                "function_void___ *this": "function_pointer",
                "_M_manager": "manager",
                "_M_invoker": "invoker",
                "_Any_data": "any_data",
                "__throw_bad_function_call": "throw_bad_function_call",
                "FUN_080047c0": "execute_function_080047c0"
            },
            "code": "void __thiscall execute_function_080047c0(std::function<void()>::function_void___ *function_pointer) { \n\tif ((function_pointer->super__Function_base)._M_manager != (_Manager_type)0x0) { \n\t\t(*function_pointer->_M_invoker)((_Any_data *)function_pointer); \n\t\treturn; \n\t}\n\t__throw_bad_function_call();\n}",
            "called": [
                "__throw_bad_function_call"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047c0",
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "imported": false,
            "current_name": "execute_function_080047c0"
        },
        "FUN_08005374": {
            "renaming": {
                "FUN_08005374": "allocate_memory_08005374",
                "param_1": "size",
                "param_2": "count",
                "iVar2": "total_size",
                "puVar1": "memory_block"
            },
            "code": "undefined4* allocate_memory_08005374(int size, int count) {\n  undefined4 *memory_block;\n  int total_size = (count - 1) * 0x68;\n  memory_block = (undefined4 *)_malloc_r(size, total_size + 0x74);\n  if (memory_block != (undefined4 *)0x0) {\n    *memory_block = 0;\n    memory_block[1] = count;\n    memory_block[2] = memory_block + 3;\n    memset(memory_block + 3, 0, total_size + 0x68);\n  }\n  return memory_block;\n}",
            "called": [
                "memset",
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005374",
            "calling": [
                "__sfp"
            ],
            "imported": false,
            "current_name": "allocate_memory_08005374"
        },
        "FUN_08004d9c": {
            "renaming": {
                "FUN_08004d9c": "FUNC_08004d9c"
            },
            "code": "\nuint FUNC_08004d9c(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  void *pvVar4;\n  int iVar5;\n  undefined *puVar6;\n  uint uVar7;\n  uint **ppuVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined *puVar11;\n  undefined *__s;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  __s = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_08004f56;\n          if (bVar1 != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar6 = PTR_s_0123456789ABCDEF_08004fd8;\nLAB_08004ee6:\n          uVar7 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar7 & 0x80) == 0) && ((int)(uVar7 << 0x19) < 0)) {\n            uVar9 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar9 = *puVar3;\n          }\n          if ((int)(uVar7 << 0x1f) < 0) {\n            *param_2 = uVar7 | 0x20;\n          }\n          if (uVar9 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar7 = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_08004dcc;\n          uVar9 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar9 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar9 & 0x40) == 0) goto LAB_08004dec;\n            uVar9 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08004dec:\n            uVar9 = *puVar3;\n          }\n          if ((int)uVar9 < 0) {\n            uVar9 = -uVar9;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar7 = 10;\n          puVar6 = PTR_s_0123456789ABCDEF_08004fd8;\n        }\n        uVar10 = param_2[1];\n        param_2[2] = uVar10;\n        puVar11 = __s;\n        if ((int)uVar10 < 0) {\n          if (uVar9 != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(undefined *)((int)param_2 + 0x42) = *puVar6;\n          puVar11 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar9 == 0) {\n            if (uVar10 != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              uVar10 = uVar9 / uVar7;\n              puVar11 = puVar11 + -1;\n              *puVar11 = puVar6[uVar9 - uVar7 * uVar10];\n              uVar9 = uVar10;\n            } while (uVar10 != 0);\n          }\n        }\n        if (((uVar7 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar11[-1] = 0x30;\n          puVar11 = puVar11 + -1;\n        }\n        param_2[4] = (int)__s - (int)puVar11;\n        __s = puVar11;\n        goto LAB_08004ec2;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08004e2c:\n      __s = (undefined *)((int)param_2 + 0x42);\n      uVar9 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08004e52:\n            uVar9 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar9 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar9 & 0x40) == 0) goto LAB_08004e60;\n              uVar9 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08004e60:\n              uVar9 = *puVar3;\n            }\n            puVar6 = PTR_s_0123456789ABCDEF_08004fd8;\n            if (bVar1 == 0x6f) {\n              uVar7 = 8;\n            }\n            else {\n              uVar7 = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            puVar6 = PTR_s_0123456789abcdef_08004fd4;\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08004e52;\n          if (bVar1 == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08004e2c;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      __s = (undefined *)*puVar3;\n      pvVar4 = memchr(__s,0,param_2[1]);\n      if (pvVar4 != (void *)0x0) {\n        param_2[1] = (int)pvVar4 - (int)__s;\n      }\n      uVar9 = param_2[1];\n    }\n    param_2[4] = uVar9;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  uVar9 = *param_2;\n  ppuVar8 = (uint **)*param_5;\n  uVar7 = param_2[5];\n  if ((uVar9 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\n    if ((uVar9 & 0x40) == 0) goto LAB_08004f42;\n    *(short *)puVar3 = (short)uVar7;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\nLAB_08004f42:\n    *puVar3 = uVar7;\n  }\nLAB_08004f56:\n  param_2[4] = 0;\nLAB_08004ec2:\n  iVar2 = _printf_common(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,__s,param_2[4]), iVar2 == -1)) {\nLAB_08004ed6:\n    uVar9 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar5 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar5 == -1) goto LAB_08004ed6;\n      }\n    }\n    uVar9 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar9 = local_24[0];\n    }\n  }\n  return uVar9;\n}\n\n",
            "called": [
                "memchr",
                "_printf_common"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004d9c",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_08004d9c"
        },
        "FUN_08003750": {
            "renaming": {
                "FUN_08003750": "get_stimer_from_timer_handle_08003750",
                "htim": "timer_handle",
                "stimer_t": "stimer_ptr",
                "&htim[-1].Lock": "(stimer_t *)&timer_handle[index_of_stimer_in_struct].Lock",
                "index_of_stimer_in_struct": "index_of_stimer_in_struct"
            },
            "code": "stimer_t * get_stimer_from_timer_handle_08003750(TIM_HandleTypeDef *timer_handle)\n{\n  int index_of_stimer_in_struct = -1;\n  stimer_t *stimer_ptr = (stimer_t *)&timer_handle[index_of_stimer_in_struct].Lock;\n  return stimer_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003750",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIM_OC_DelayElapsedCallback"
            ],
            "imported": false,
            "current_name": "get_stimer_from_timer_handle_08003750"
        },
        "FUN_080014ec": {
            "renaming": {
                "FUN_080014ec": "listen_mode_080014ec",
                "*hi2c": "*i2c_handle",
                "*pData": "*data_ptr",
                "Size": "data_size",
                "XferOptions": "transfer_options",
                "HVar1": "status",
                "*pIVar2": "*i2c_instance",
                "tmpreg": "reg_tmp"
            },
            "code": "HAL_StatusTypeDef listen_mode_080014ec(I2C_HandleTypeDef *i2c_handle, uint8_t *data_ptr, uint16_t data_size, uint32_t transfer_options) {\n    HAL_StatusTypeDef status;\n    I2C_TypeDef *i2c_instance;\n    uint32_t reg_tmp;\n    if (i2c_handle->State == HAL_I2C_STATE_LISTEN) {\n        if (data_ptr == NULL || data_size == 0 || i2c_handle->Lock == HAL_LOCKED) {\n            status = HAL_ERROR;\n        } else {\n            i2c_handle->Lock = HAL_LOCKED;\n            i2c_instance = i2c_handle->Instance;\n            if ((i2c_instance->CR1 & 1) == 0) {\n                i2c_instance->CR1 |= 1;\n            }\n            i2c_instance->CR1 &= ~(1 << 11);\n            i2c_handle->State = HAL_I2C_STATE_BUSY_RX_LISTEN;\n            i2c_handle->Mode = HAL_I2C_MODE_SLAVE;\n            status = HAL_OK;\n            i2c_handle->ErrorCode = 0;\n            i2c_handle->pBuffPtr = data_ptr;\n            i2c_handle->XferCount = data_size;\n            i2c_handle->XferOptions = transfer_options;\n            i2c_handle->XferSize = i2c_handle->XferCount;\n            i2c_handle->Lock = HAL_UNLOCKED;\n            i2c_instance->CR2 |= 0x700;\n        }\n    } else {\n        status = HAL_BUSY;\n    }\n    return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ec",
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "imported": false,
            "current_name": "listen_mode_080014ec"
        },
        "FUN_080048dc": {
            "renaming": {
                "FUN_080048dc": "allocate_memory_080048dc",
                "param_1": "error_code",
                "param_2": "size",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "current_free_list",
                "piVar2": "piVar2",
                "piVar3": "ppiVar3",
                "piVar4": "ppiVar4",
                "ppiVar3": "ppiVar3",
                "ppiVar4": "ppiVar4",
                "ppiVar5": "ppiVar5",
                "ppiVar6": "ppiVar6",
                "ppiVar7": "ppiVar7",
                "bVar8": "bVar8"
            },
            "code": "void allocate_memory_080048dc(int* error_code, int size, int param_3, int param_4)\n{\n    if (size == 0) {\n        return;\n    }\n    int** ppiVar7 = (int**)(size - 4);\n    if (*(int*)(size - 4) < 0) {\n        ppiVar7 = (int**)((int)ppiVar7 + *(int*)(size - 4));\n    }\n    __malloc_lock();\n    void* current_free_list = PTR___malloc_free_list_08004974;\n    int** ppiVar5 = *(int***)(PTR___malloc_free_list_08004974);\n    if (ppiVar5 == (int**)0x0) {\n        ppiVar7[1] = (int*)0x0;\n        *(int***)current_free_list = ppiVar7;\n        int** ppiVar3 = (int**)extraout_r1;\n        int** ppiVar4 = (int**)current_free_list;\n    }\n    else if (ppiVar7 < ppiVar5) {\n        int** ppiVar3 = (int**)*ppiVar7;\n        int** ppiVar4 = (int**)((int)ppiVar7 + (int)ppiVar3);\n        bool bVar8 = ppiVar5 == ppiVar4;\n        if (bVar8) {\n            ppiVar4 = (int**)*ppiVar5;\n            ppiVar5 = (int**)ppiVar5[1];\n        }\n        ppiVar7[1] = (int*)ppiVar5;\n        if (bVar8) {\n            ppiVar4 = (int**)((int)ppiVar4 + (int)ppiVar3);\n            *ppiVar7 = (int*)ppiVar4;\n        }\n        *(int***)current_free_list = ppiVar7;\n    }\n    else {\n        do {\n            int** ppiVar6 = ppiVar5;\n            int** ppiVar4 = (int**)ppiVar6[1];\n            if (ppiVar4 == (int**)0x0) break;\n            ppiVar5 = ppiVar4;\n        } while (ppiVar4 <= ppiVar7);\n        int** ppiVar3 = (int**)*ppiVar6;\n        if ((int**)((int)ppiVar6 + (int)ppiVar3) == ppiVar7) {\n            ppiVar3 = (int**)((int)ppiVar3 + (int)*ppiVar7);\n            *ppiVar6 = (int*)ppiVar3;\n            if (ppiVar4 == (int**)((int)ppiVar6 + (int)ppiVar3)) {\n                int* piVar2 = *ppiVar4;\n                ppiVar4 = (int**)ppiVar4[1];\n                ppiVar6[1] = (int*)ppiVar4;\n                ppiVar3 = (int**)((int)ppiVar3 + (int)piVar2);\n                *ppiVar6 = (int*)ppiVar3;\n            }\n        }\n        else if (ppiVar7 < (int**)((int)ppiVar6 + (int)ppiVar3)) {\n            *error_code = 0xc;\n        }\n        else {\n            ppiVar3 = (int**)((int)ppiVar7 + (int)*ppiVar7);\n            bool bVar8 = ppiVar4 == ppiVar3;\n            if (bVar8) {\n                ppiVar3 = (int**)*ppiVar4;\n                ppiVar4 = (int**)ppiVar4[1];\n            }\n            ppiVar7[1] = (int*)ppiVar4;\n            if (bVar8) {\n                ppiVar3 = (int**)((int)ppiVar3 + (int)*ppiVar7);\n                *ppiVar7 = (int*)ppiVar3;\n            }\n            ppiVar6[1] = (int*)ppiVar7;\n        }\n    }\n    __malloc_unlock(error_code, ppiVar3, ppiVar4, param_4);\n    return;\n}",
            "called": [
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048dc",
            "calling": [
                "__swsetup_r",
                "__sflush_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_080048dc"
        },
        "FUN_08003754": {
            "renaming": {
                "FUN_08003754": "handle_timer_interrupt_08003754",
                "htim": "timer_handle",
                "psVar1": "timer_obj",
                "get_timer_obj": "get_timer_object",
                "irqHandleOC": "interrupt_handler_OC"
            },
            "code": "void handle_timer_interrupt_08003754(TIM_HandleTypeDef *timer_handle)\n{\n  stimer_t *timer_obj;\n  timer_obj = get_timer_object(timer_handle);\n  if ((timer_obj->interrupt_handler_OC != (_func_void_stimer_t_ptr_uint32_t *)0x0) &&\n     (timer_handle->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) {\n    (*timer_obj->interrupt_handler_OC)(timer_obj,0);\n  }\n  return;\n}",
            "called": [
                "get_timer_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003754",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_timer_interrupt_08003754"
        },
        "FUN_08001578": {
            "renaming": {
                "FUN_08001578": "i2c_listen_08001578",
                "hi2c": "handle",
                "pIVar1": "i2c_instance",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "HAL_StatusTypeDef i2c_listen_08001578(I2C_HandleTypeDef *handle)\n{\n  I2C_TypeDef *i2c_instance;\n  if (handle->State != HAL_I2C_STATE_READY) {\n    return HAL_BUSY;\n  }\n  handle->State = HAL_I2C_STATE_LISTEN;\n  i2c_instance = handle->Instance;\n  if ((i2c_instance->CR1 & 1) == 0) {\n    i2c_instance->CR1 = i2c_instance->CR1 | 1;\n  }\n  i2c_instance->CR1 |= 0x400;\n  i2c_instance->CR2 |= 0x300;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001578",
            "calling": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "imported": false,
            "current_name": "i2c_listen_08001578"
        },
        "FUN_080035ac": {
            "renaming": {
                "FUN_080035ac": "handle_rtc_alarm_interrupt_080035ac",
                "PTR_RtcHandle_080035b8": "rtc_handle"
            },
            "code": "void handle_rtc_alarm_interrupt_080035ac(void)\n{\n  RTC_HandleTypeDef* PTR_RtcHandle_080035b8 = (RTC_HandleTypeDef*)PTR_RtcHandle_080035b8;\n  HAL_RTC_AlarmIRQHandler(PTR_RtcHandle_080035b8);\n  return;\n}",
            "called": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035ac",
            "calling": [],
            "imported": false,
            "current_name": "handle_rtc_alarm_interrupt_080035ac"
        },
        "FUN_08004844": {
            "renaming": {
                "FUN_08004844": "convert_param_to_64_bit_08004844",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "DAT_0800485c": "global_flag",
                "CONCAT44": "bitwise_concatenation"
            },
            "code": "unsigned long long convert_param_to_64_bit_08004844(unsigned int input_param_1, unsigned int input_param_2){\n    if (DAT_0800485c != 0) {\n        return ((unsigned long long)input_param_1 << 32) | 2;\n    }\n    return (unsigned long long)input_param_2 << 32;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004844",
            "calling": [
                "__aeabi_atexit"
            ],
            "imported": false,
            "current_name": "convert_param_to_64_bit_08004844"
        },
        "FUN_0800318c": {
            "renaming": {
                "FUN_0800318c": "get_GPIO_TypeDef_from_port_index_0800318c",
                "port_idx": "port_index",
                "DAT_080031d0": "portA",
                "DAT_080031f8": "portB",
                "DAT_080031d4": "portC",
                "DAT_080031d8": "portD",
                "DAT_080031dc": "portE",
                "DAT_080031e0": "portF",
                "DAT_080031e4": "portG",
                "DAT_080031e8": "portH",
                "DAT_080031ec": "portI",
                "DAT_080031f0": "portJ",
                "DAT_080031f4": "portK"
            },
            "code": "GPIO_TypeDef* get_GPIO_TypeDef_from_port_index_0800318c(uint32_t port_index) {\n    switch(port_index) {\n        case 0:\n            return DAT_080031d0;\n        case 1:\n            return DAT_080031f8;\n        case 2:\n            return DAT_080031d4;\n        case 3:\n            return DAT_080031d8;\n        case 4:\n            return DAT_080031dc;\n        case 5:\n            return DAT_080031e0;\n        case 6:\n            return DAT_080031e4;\n        case 7:\n            return DAT_080031e8;\n        case 8:\n            return DAT_080031ec;\n        case 9:\n            return DAT_080031f0;\n        case 10:\n            return DAT_080031f4;\n        default:\n            return (GPIO_TypeDef*)0x0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800318c",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "get_GPIO_TypeDef_from_port_index_0800318c"
        },
        "FUN_080001d0": {
            "renaming": {
                "FUN_080001d0": "execute_if_completed_080001d0",
                "PTR_completed_8667_08000210": "completed",
                "PTR_object_8672_0800020c": "object",
                "DAT_08000204": "data",
                "DAT_08000214": "function_ptr"
            },
            "code": "void execute_if_completed_080001d0(void)\n{\n    int* PTR_completed_8667_08000210 = (int*)PTR_PTR_completed_8667_08000210_8667_08000210;\n    code* DAT_08000214 = DAT_08000214;\n    if (DAT_08000204 == 0) {\n        return;\n    }\n    if (*PTR_completed_8667_08000210 != 0 && DAT_08000214 != (code*)0x0) {\n        (*DAT_08000214)(PTR_PTR_completed_8667_08000210_8667_08000210, PTR_PTR_object_8672_0800020c_8672_0800020c);\n        return;\n    }\n    if (*PTR_completed_8667_08000210 != 0 && DAT_08000214 != (code*)0x0) {\n        (*DAT_08000214)();\n        return;\n    }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001d0",
            "calling": [],
            "imported": false,
            "current_name": "execute_if_completed_080001d0"
        },
        "FUN_080047d0": {
            "renaming": {
                "FUN_080047d0": "handle_gpio_interrupt_080047d0",
                "GPIO_Pin": "pin_id",
                "bVar1": "pin_index",
                "PTR_gpio_irq_conf_080047ec": "irq_config_base",
                "function_void___": "std_function_void"
            },
            "code": "void handle_gpio_interrupt_080047d0(uint16_t pin_id)\n{\n  int irq_conf = get_irq_config(pin_id);\n  if (*(int *)(irq_conf + 0xc) != 0) {\n    std::function<void()>::operator__((function_void___ *)(irq_conf + 4));\n  }\n  return;\n}",
            "called": [
                "operator()",
                "get_pin_id"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047d0",
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_gpio_interrupt_080047d0"
        },
        "FUN_080040f8": {
            "renaming": {
                "FUN_080040f8": "wait_for_status_change_080040f8",
                "status_UNUSED": "unused_status"
            },
            "code": "void wait_for_status_change_080040f8(int unused_status) {\n  while(true) {\n    // Do nothing block with infinite loop\n  }\n}",
            "called": [
                "_exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040f8",
            "calling": [
                "_exit",
                "abort"
            ],
            "imported": false,
            "current_name": "wait_for_status_change_080040f8"
        },
        "FUN_0800500c": {
            "renaming": {
                "FUN_0800500c": "allocate_memory_0800500c",
                "param_1": "error_code",
                "param_2": "size",
                "puVar1": "error_ptr",
                "pcVar2": "memory_ptr"
            },
            "code": "void allocate_memory_0800500c(int *error_code, int size) {\n    undefined *error_ptr = PTR_errno_08005028;\n    *(undefined4 *)PTR_errno_08005028 = 0;\n    caddr_t memory_ptr = _sbrk(size);\n    if ((memory_ptr == (caddr_t)0xffffffff) && (*(int *)error_ptr != 0)) {\n        *error_code = *(int *)error_ptr;\n    }\n    return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800500c",
            "calling": [
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_0800500c"
        },
        "FUN_080023b4": {
            "renaming": {
                "FUN_080023b4": "calculate_result_080023b4",
                "DAT_0800247c": "PTR_DATA",
                "DAT_08002484": "RESULT1",
                "DAT_08002480": "RESULT2",
                "uVar1": "bitmask",
                "uVar2": "dividend",
                "uVar3": "mul_res",
                "uVar4": "carry4",
                "uVar5": "mul_res2",
                "uVar6": "divisor",
                "shift_amount": "shift_amount",
                "addition": "addition",
                "quotient": "quotient"
            },
            "code": "uint32_t calculate_result_080023b4(void)\n{\n  uint32_t bitmask = *(uint32_t *)(DAT_0800247c + 8) & 0xc;\n  if (bitmask == 4) {\n    return DAT_08002484;\n  }\n  if (bitmask != 8) {\n    return DAT_08002480;\n  }\n  uint32_t divisor = *(uint32_t *)(DAT_0800247c + 4) & 0x3f;\n  if ((*(uint32_t *)(DAT_0800247c + 4) & 0x400000) == 0) {\n    uint32_t dividend = *(int *)(DAT_0800247c + 4) << 0x11;\n    dividend = dividend >> 0x17;\n    uint32_t mul_res = dividend * 16000000;\n    uint32_t carry4 = CARRY4(dividend * 0x3d08, dividend);\n    uint32_t mul_res2 = (uint32_t)(dividend * 0x20 < dividend) * -0x3f - (uint32_t)(dividend * 0x7c0 < dividend * 0x1f);\n    divisor = __aeabi_uldivmod(mul_res, (mul_res2 + carry4) * 0x400 | dividend * 0x3d09 >> 0x16, divisor, 0);\n  }\n  else {\n    uint32_t dividend = *(int *)(DAT_0800247c + 4) << 0x11;\n    dividend = dividend >> 0x17;\n    uint32_t mul_res = dividend * 8000000;\n    uint32_t carry4 = CARRY4(dividend * 0x3d08, dividend);\n    uint32_t mul_res2 = (uint32_t)(dividend * 0x20 < dividend) * -0x3f - (uint32_t)(dividend * 0x7c0 < dividend * 0x1f);\n    divisor = __aeabi_uldivmod(mul_res, (mul_res2 + carry4) * 0x200, divisor, 0);\n  }\n  uint32_t shift_amount = (*(int *)(DAT_0800247c + 4) << 0xe) >> 0x1e;\n  uint32_t addition = shift_amount + 1;\n  addition = addition * 2;\n  uint32_t quotient = divisor / addition;\n  return quotient;\n}",
            "called": [
                "__aeabi_uldivmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080023b4",
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "calculate_result_080023b4"
        },
        "FUN_080011a4": {
            "renaming": {
                "FUN_080011a4": "update_gpio_pin_080011a4",
                "GPIO_Pin": "pin",
                "uint": "uint32_t",
                "DAT_080011bc": "gpio_ptr"
            },
            "code": "void update_gpio_pin_080011a4(uint16_t pin) {\n  uint32_t* DAT_080011bc = (uint32_t*)(DAT_080011bc + 0x14);\n  if ((*DAT_080011bc & (uint32_t)pin) != 0) {\n    *DAT_080011bc = (uint32_t)pin;\n    HAL_GPIO_EXTI_Callback(pin);\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011a4",
            "calling": [
                "EXTI0_IRQHandler",
                "EXTI15_10_IRQHandler",
                "EXTI4_IRQHandler",
                "EXTI2_IRQHandler",
                "EXTI1_IRQHandler",
                "EXTI3_IRQHandler",
                "EXTI9_5_IRQHandler"
            ],
            "imported": false,
            "current_name": "update_gpio_pin_080011a4"
        },
        "FUN_08001e68": {
            "renaming": {
                "FUN_08001e68": "check_i2c_state_08001e68",
                "*hi2c": "*handle",
                "HVar1": "state",
                "pIVar2": "instance",
                "uVar3": "sr1",
                "uVar4": "cr2",
                "DAT_08001f38": "I2C_SR1_TIMEOUT",
                "0x100": "I2C_CR2_ITERREN",
                "1": "I2C_ERROR_TIMEOUT",
                "2": "I2C_ERROR_OVR",
                "4": "I2C_ERROR_AF",
                "8": "I2C_ERROR_ARLO"
            },
            "code": "void check_i2c_state_08001e68(I2C_HandleTypeDef *handle)\n{\n  HAL_I2C_StateTypeDef state;\n  I2C_TypeDef *instance;\n  uint16_t sr1;\n  uint16_t cr2;\n  \n  instance = handle->Instance;\n  sr1 = instance->SR1;\n  cr2 = instance->CR2;\n  \n  if (((sr1 & DAT_08001f38) != 0) && ((cr2 & I2C_CR2_ITERREN) != 0)) {\n    handle->ErrorCode |= I2C_ERROR_TIMEOUT;\n    instance->SR1 = 0xfffffeff;\n  }\n  if (((sr1 & I2C_SR1_OVR) != 0) && ((cr2 & I2C_CR2_ITERREN) != 0)) {\n    handle->ErrorCode |= I2C_ERROR_OVR;\n    instance->SR1 = 0xfffffdff;\n  }\n  if (((sr1 & I2C_SR1_AF) != 0) && ((cr2 & I2C_CR2_ITERREN) != 0)) {\n    state = handle->State;\n    if (((handle->Mode == HAL_I2C_MODE_SLAVE) && (handle->XferCount == 0)) && (((state == HAL_I2C_STATE_BUSY_TX) || (state == HAL_I2C_STATE_BUSY_TX_LISTEN)) || ((state == HAL_I2C_STATE_LISTEN) && (handle->PreviousState == 0x21)))) {\n      I2C_Slave_AF(handle);\n    }\n    else {\n      handle->ErrorCode |= I2C_ERROR_AF;\n      if (handle->Mode == HAL_I2C_MODE_MASTER) {\n        instance->CR1 |= I2C_CR1_STOP;\n      }\n      instance->SR1 = 0xfffffbff;\n    }\n  }\n  if (((sr1 & I2C_SR1_ARLO) != 0) && ((cr2 & I2C_CR2_ITERREN) != 0)) {\n    handle->ErrorCode |= I2C_ERROR_ARLO;\n    instance->SR1 = 0xfffff7ff;\n  }\n  if (handle->ErrorCode != 0) {\n    I2C_ITError(handle);\n  }\n  return;\n}",
            "called": [
                "I2C_ITError",
                "I2C_Slave_AF"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e68",
            "calling": [
                "I2C1_ER_IRQHandler",
                "I2C2_ER_IRQHandler",
                "I2C3_ER_IRQHandler"
            ],
            "imported": false,
            "current_name": "check_i2c_state_08001e68"
        },
        "FUN_080019a0": {
            "renaming": {
                "FUN_080019a0": "receive_byte_080019a0",
                "*hi2c": "*i2c",
                "puVar1": "buffer_ptr",
                "hi2c->XferCount": "i2c->XferCount",
                "hi2c->Instance->CR2": "i2c->Instance->CR2",
                "hi2c->pBuffPtr": "i2c->pBuffPtr",
                "uint8_t": "uint8_t",
                "hi2c->Instance->DR": "i2c->Instance->DR",
                "hi2c->XferOptions": "i2c->XferOptions",
                "hi2c->Instance->CR1": "i2c->Instance->CR1",
                "hi2c->State": "i2c->State",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "hi2c->PreviousState": "i2c->PreviousState",
                "hi2c->Mode": "i2c->Mode",
                "HAL_I2C_MODE_MEM": "HAL_I2C_MODE_MEM",
                "HAL_I2C_MODE_NONE": "HAL_I2C_MODE_NONE",
                "HAL_I2C_MemRxCpltCallback": "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback": "HAL_I2C_MasterRxCpltCallback",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef receive_byte_080019a0(I2C_HandleTypeDef *i2c)\n{\n  uint8_t *buffer_ptr;\n  \n  if (i2c->XferCount == 4) {\n    i2c->Instance->CR2 &= 0xfffffbff;\n    buffer_ptr = i2c->pBuffPtr;\n    i2c->pBuffPtr = buffer_ptr + 1;\n    *buffer_ptr = (uint8_t)i2c->Instance->DR;\n    i2c->XferCount--;\n  }\n  else if (i2c->XferCount == 3) {\n    i2c->Instance->CR2 &= 0xfffffbff;\n    i2c->Instance->CR1 &= 0xfffffbff;\n    buffer_ptr = i2c->pBuffPtr;\n    i2c->pBuffPtr = buffer_ptr + 1;\n    *buffer_ptr = (uint8_t)i2c->Instance->DR;\n    i2c->XferCount--;\n  }\n  else if (i2c->XferCount == 2) {\n    if (i2c->XferOptions - 1 < 2) {\n      i2c->Instance->CR1 &= 0xfffffbff;\n      i2c->Instance->CR1 |= 0x100;\n    }\n    else {\n      i2c->Instance->CR1 |= 0x200;\n    }\n    buffer_ptr = i2c->pBuffPtr;\n    i2c->pBuffPtr = buffer_ptr + 1;\n    *buffer_ptr = (uint8_t)i2c->Instance->DR;\n    i2c->XferCount--;\n    buffer_ptr = i2c->pBuffPtr;\n    i2c->pBuffPtr = buffer_ptr + 1;\n    *buffer_ptr = (uint8_t)i2c->Instance->DR;\n    i2c->XferCount--;\n    i2c->Instance->CR2 &= 0xfffffcff;\n    i2c->State = HAL_I2C_STATE_READY;\n    i2c->PreviousState = 0;\n    if (i2c->Mode == HAL_I2C_MODE_MEM) {\n      i2c->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_MemRxCpltCallback(i2c);\n    }\n    else {\n      i2c->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_MasterRxCpltCallback(i2c);\n    }\n  }\n  else {\n    buffer_ptr = i2c->pBuffPtr;\n    i2c->pBuffPtr = buffer_ptr + 1;\n    *buffer_ptr = (uint8_t)i2c->Instance->DR;\n    i2c->XferCount--;\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019a0",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "receive_byte_080019a0"
        },
        "FUN_08003f24": {
            "renaming": {
                "FUN_08003f24": "process_uart_data_08003f24",
                "*huart": "*uart_handler",
                "bVar1": "uart_index_value",
                "uVar2": "callback_index"
            },
            "code": "void process_uart_data_08003f24(UART_HandleTypeDef *uart_handler) {\n  byte uart_index_value;\n  uint callback_index;\n  \n  uart_index_value = get_uart_index(uart_handler);\n  callback_index = (uint)uart_index_value;\n  if (callback_index < 10) {\n    (**(code **)(PTR_rx_callback_08003f40 + callback_index * 4))\n              (*(undefined4 *)(PTR_rx_callback_obj_08003f44 + callback_index * 4));\n  }\n  return;\n}",
            "called": [
                "uart_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f24",
            "calling": [
                "UART_Receive_IT"
            ],
            "imported": false,
            "current_name": "process_uart_data_08003f24"
        },
        "FUN_080046b4": {
            "renaming": {
                "FUN_080046b4": "initialize_gpio_irq_080046b4",
                "__initialize_p": "should_initialize",
                "__priority": "priority",
                "puVar1": "gpio_irq_conf_ptr"
            },
            "code": "void initialize_gpio_irq_080046b4(int should_initialize, int priority) {\n  undefined *gpio_irq_conf_ptr;\n  gpio_irq_conf_ptr = PTR_gpio_irq_conf_08004754;\n  if (should_initialize != 1) {\n    return;\n  }\n  if (priority == 0xffff) {\n    *gpio_irq_conf_ptr = 6;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0xc) = 0;\n    gpio_irq_conf_ptr[0x14] = 7;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x20) = 0;\n    gpio_irq_conf_ptr[0x28] = 8;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x34) = 0;\n    gpio_irq_conf_ptr[0x3c] = 9;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x48) = 0;\n    gpio_irq_conf_ptr[0x50] = 10;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x5c) = 0;\n    gpio_irq_conf_ptr[100] = 0x17;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x70) = 0;\n    gpio_irq_conf_ptr[0x78] = 0x17;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x84) = 0;\n    gpio_irq_conf_ptr[0x8c] = 0x17;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x98) = 0;\n    gpio_irq_conf_ptr[0xa0] = 0x17;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0xac) = 0;\n    gpio_irq_conf_ptr[0xb4] = 0x17;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0xc0) = 0;\n    gpio_irq_conf_ptr[200] = 0x28;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0xd4) = 0;\n    gpio_irq_conf_ptr[0xdc] = 0x28;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0xe8) = 0;\n    gpio_irq_conf_ptr[0xf0] = 0x28;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0xfc) = 0;\n    gpio_irq_conf_ptr[0x104] = 0x28;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x110) = 0;\n    gpio_irq_conf_ptr[0x118] = 0x28;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x124) = 0;\n    gpio_irq_conf_ptr[300] = 0x28;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x138) = 0;\n    __aeabi_atexit(0, DAT_0800475c, PTR___dso_handle_08004758);\n  }\n  return;\n}\n",
            "called": [
                "__aeabi_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b4",
            "calling": [
                "_GLOBAL__sub_I__Z22stm32_interrupt_enableP12GPIO_TypeDeftSt8functionIFvvEEm"
            ],
            "imported": false,
            "current_name": "initialize_gpio_irq_080046b4"
        },
        "FUN_0800160c": {
            "renaming": {
                "FUN_0800160c": "do_nothing_0800160c"
            },
            "code": "\nvoid do_nothing_0800160c(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160c",
            "calling": [
                "I2C_SlaveReceive_RXNE",
                "I2C_Slave_STOPF"
            ],
            "imported": false,
            "current_name": "do_nothing_0800160c"
        },
        "FUN_0800160e": {
            "renaming": {
                "FUN_0800160e": "ReadAndStoreByteFromI2C_0800160e",
                "hi2c": "i2c_handle",
                "HVar1": "i2c_state",
                "puVar2": "data_ptr"
            },
            "code": "HAL_StatusTypeDef ReadAndStoreByteFromI2C_0800160e(I2C_HandleTypeDef *i2c_handle)\n{\n  HAL_I2C_StateTypeDef i2c_state;\n  uint8_t *data_ptr;\n  i2c_state = i2c_handle->State;\n  if (i2c_handle->XferCount != 0) {\n    data_ptr = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = data_ptr + 1;\n    *data_ptr = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount--;\n    if ((i2c_handle->XferCount == 0) && (i2c_state == HAL_I2C_STATE_BUSY_RX_LISTEN)) {\n      i2c_handle->Instance->CR2 &= 0xfffffbff;\n      i2c_handle->PreviousState = 0x22;\n      i2c_handle->State = HAL_I2C_STATE_LISTEN;\n      HAL_I2C_SlaveRxCpltCallback(i2c_handle);\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160e",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "ReadAndStoreByteFromI2C_0800160e"
        },
        "FUN_0800293e": {
            "renaming": {
                "FUN_0800293e": "do_nothing_0800293e"
            },
            "code": "\nvoid do_nothing_0800293e(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293e",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293e"
        },
        "FUN_08000e18": {
            "renaming": {
                "FUN_08000e18": "updateTick_08000e18",
                "PTR_uwTick_08000e28": "tickPtrPtr",
                "PTR_uwTickFreq_08000e2c": "tickFreqPtr"
            },
            "code": "void updateTick_08000e18(void)\n{\n  uint8_t tickFreq = *PTR_uwTickFreq_08000e2c;\n  uint32_t* tickPtr = (uint32_t*)PTR_uwTick_08000e28;\n  *tickPtr += tickFreq;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e18",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "updateTick_08000e18"
        },
        "FUN_08003486": {
            "renaming": {
                "FUN_08003486": "init_GPIO_pin_08003486",
                "pin": "PinName",
                "mode": "uint32_t",
                "pull": "uint32_t",
                "GPIOx": "gpio_port",
                "GPIO_InitStructure": "gpio_init",
                "GPIO_InitStructure.Pin": "gpio_init.Pin",
                "GPIO_InitStructure.Speed": "gpio_init.Speed",
                "GPIO_InitStructure.Mode": "gpio_init.Mode",
                "GPIO_InitStructure.Pull": "gpio_init.Pull"
            },
            "code": "void init_GPIO_pin_08003486(PinName_conflict pin, uint32_t mode, uint32_t pull)\n{\n  GPIO_TypeDef *gpio_port;\n  GPIO_InitTypeDef gpio_init;\n  \n  gpio_port = set_GPIO_Port_Clock((uint)((int)pin << 0x18) >> 0x1c);\n  gpio_init.Pin = 1 << ((int)pin & 0xfU) & 0xffff;\n  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;\n  gpio_init.Mode = mode;\n  gpio_init.Pull = pull;\n  HAL_GPIO_Init(gpio_port, &gpio_init);\n  return;\n}",
            "called": [
                "HAL_GPIO_Init",
                "set_GPIO_Port_Clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003486",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "init_GPIO_pin_08003486"
        },
        "FUN_08005662": {
            "renaming": {
                "FUN_08005662": "seek_and_update_08005662",
                "param_1": "file_descriptor",
                "param_2": "data_structure_address",
                "iVar1": "seek_result",
                "uVar2": "flags",
                "bVar3": "seek_failed",
                "offset": "file_offset"
            },
            "code": "void seek_and_update_08005662(int file_descriptor, int data_structure_address)\n    {\n        int seek_result;\n        ushort flags;\n        bool seek_failed;\n        \n        int offset = *(short *)(data_structure_address + 0xe);\n        seek_result = _lseek_r(file_descriptor, offset);\n        seek_failed = (seek_result == -1);\n        \n        if (seek_failed) {\n            flags = *(ushort *)(data_structure_address + 0xc) & 0xefff;\n        }\n        else {\n            *(int *)(data_structure_address + 0x54) = seek_result;\n            flags = *(ushort *)(data_structure_address + 0xc) | 0x1000;\n        }\n        \n        *(ushort *)(data_structure_address + 0xc) = flags;\n    }",
            "called": [
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005662",
            "calling": [],
            "imported": false,
            "current_name": "seek_and_update_08005662"
        },
        "FUN_080042ac": {
            "renaming": {
                "FUN_080042ac": "receive_serial_data_080042ac",
                "obj": "serial_conflict",
                "iVar1": "receive_status",
                "uVar2": "next_rx_head",
                "c": "received_char"
            },
            "code": "void receive_serial_data_080042ac(serial_t_conflict *serial_conflict){\n  int receive_status;\n  ushort next_rx_head;\n  uchar received_char;\n  \n  receive_status = uart_getc((serial_t *)serial_conflict, &received_char);\n  if ((receive_status == 0) && (next_rx_head = serial_conflict->rx_head + 1 & 0x3f, next_rx_head != serial_conflict->rx_tail)) {\n    serial_conflict->rx_buff[serial_conflict->rx_head] = received_char;\n    serial_conflict->rx_head = next_rx_head;\n  }\n  return;\n}",
            "called": [
                "uart_getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042ac",
            "calling": [],
            "imported": false,
            "current_name": "receive_serial_data_080042ac"
        },
        "FUN_08001864": {
            "renaming": {
                "FUN_08001864": "HAL_I2C_Transmit_08001864",
                "hi2c": "handle",
                "uVar1": "transfer_options",
                "pbVar2": "p_buffer",
                "HAL_I2C_STATE_BUSY_TX": "HAL_I2C_STATE_BUSY_TX",
                "HAL_I2C_MODE_MEM": "HAL_I2C_MODE_MEM",
                "HAL_I2C_MODE_NONE": "HAL_I2C_MODE_NONE",
                "I2C_FIRST_FRAME": "I2C_FIRST_FRAME",
                "I2C_FIRST_AND_NEXT_FRAME": "I2C_FIRST_AND_NEXT_FRAME",
                "I2C_LAST_FRAME": "I2C_LAST_FRAME",
                "I2C_AUTOEND_MODE": "I2C_AUTOEND_MODE",
                "I2C_STATE_READY": "I2C_STATE_READY",
                "I2C_STATE_ERROR": "I2C_STATE_ERROR",
                "HAL_I2C_MasterTxCpltCallback": "HAL_I2C_MasterTxCpltCallback",
                "HAL_I2C_MemTxCpltCallback": "HAL_I2C_MemTxCpltCallback"
            },
            "code": "HAL_StatusTypeDef HAL_I2C_Transmit_08001864(I2C_HandleTypeDef *handle)\n{\n  uint32_t transfer_options = handle->XferOptions;\n  if (handle->State == HAL_I2C_STATE_BUSY_TX) {\n    if (handle->XferCount == 0) {\n      if (((transfer_options == I2C_FIRST_FRAME) || (transfer_options == I2C_FIRST_AND_NEXT_FRAME)) || (transfer_options == I2C_LAST_FRAME)) {\n        handle->Instance->CR2 = handle->Instance->CR2 & 0xfffff8ff;\n        handle->Instance->CR1 = handle->Instance->CR1 | I2C_AUTOEND_MODE;\n        handle->PreviousState = I2C_STATE_READY;\n        handle->State = HAL_I2C_STATE_READY;\n        if (handle->Mode == HAL_I2C_MODE_MEM) {\n          handle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MemTxCpltCallback(handle);\n        }\n        else {\n          handle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MasterTxCpltCallback(handle);\n        }\n      }\n      else {\n        handle->Instance->CR2 = handle->Instance->CR2 & 0xfffff8ff;\n        handle->PreviousState = I2C_STATE_ERROR;\n        handle->Mode = HAL_I2C_MODE_NONE;\n        handle->State = HAL_I2C_STATE_READY;\n        HAL_I2C_MasterTxCpltCallback(handle);\n      }\n    }\n    else {\n      uint8_t *p_buffer = handle->pBuffPtr;\n      handle->pBuffPtr = p_buffer + 1;\n      handle->Instance->DR = (uint)*p_buffer;\n      handle->XferCount = handle->XferCount - 1;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MemTxCpltCallback",
                "HAL_I2C_MasterTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001864",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "HAL_I2C_Transmit_08001864"
        },
        "FUN_08000f2c": {
            "renaming": {
                "FUN_08000f2c": "set_clock_source_08000f2c",
                "CLKSource": "clk_source",
                "*DAT_08000f48": "*clock_reg"
            },
            "code": "void set_clock_source_08000f2c(uint32_t clk_source)\n{\n    if (clk_source != 4) {\n        *DAT_08000f48 &= 0xfffffffb;\n        return;\n    }\n    *DAT_08000f48 |= 4;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f2c",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "set_clock_source_08000f2c"
        },
        "FUN_08000ec4": {
            "renaming": {
                "FUN_08000ec4": "set_interrupt_flag_08000ec4",
                "IRQn": "irq",
                "uVar1": "irq_num",
                "DAT_08000edc": "flag_ptr"
            },
            "code": "void set_interrupt_flag_08000ec4(IRQn_Type_conflict irq) {\n  uint irq_num = (uint)irq;\n  if (irq_num >= 0) {\n    int* DAT_08000edc = (int*)(DAT_08000edc + (irq_num >> 5) * 4);\n    *DAT_08000edc = 1 << (irq_num & 0x1f);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ec4",
            "calling": [
                "uart_attach_rx_callback",
                "uart_attach_tx_callback"
            ],
            "imported": false,
            "current_name": "set_interrupt_flag_08000ec4"
        },
        "FUN_08004338": {
            "renaming": {
                "FUN_08004338": "checkSerial3Availability_08004338",
                "PTR_Serial3_08004360": "serial3Pointer",
                "DAT_0800435c": "serial3Initialized"
            },
            "code": "void checkSerial3Availability_08004338(void)\n{\n  if (DAT_0800435c) {\n    HardwareSerial::available(PTR_Serial3_08004360);\n  }\n  return;\n}",
            "called": [
                "available"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004338",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "checkSerial3Availability_08004338"
        },
        "FUN_08003928": {
            "renaming": {
                "FUN_08003928": "handle_i2c_error_interrupt_08003928",
                "PTR_i2c_handles_08003934": "i2c_handles_ptr"
            },
            "code": "void handle_i2c_error_interrupt_08003928(void)\n{\n  I2C_HandleTypeDef* i2c_handle = *(I2C_HandleTypeDef**)PTR_i2c_handles_08003934;\n  HAL_I2C_ER_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003928",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_error_interrupt_08003928"
        },
        "FUN_0800468c": {
            "renaming": {
                "FUN_0800468c": "free_gpio_irq_configurations_0800468c",
                "param_1": "memory_block",
                "puVar1": "current_block",
                "puVar2": "previous_block"
            },
            "code": "void free_gpio_irq_configurations_0800468c(void *memory_block) {\n  undefined *current_block = PTR___malloc_free_list_080046ac;\n  while (current_block != PTR_gpio_irq_conf_080046b0) {\n    undefined *previous_block = current_block - 0x14;\n    if (*(code **)(current_block - 8) != (code *)0x0) {\n      (**(code **)(current_block - 8))(current_block - 0x10, current_block - 0x10, 3);\n    }\n    current_block = previous_block;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800468c",
            "calling": [],
            "imported": false,
            "current_name": "free_gpio_irq_configurations_0800468c"
        },
        "FUN_080005e0": {
            "renaming": {
                "FUN_080005e0": "read_and_return_080005e0",
                "a0": "address",
                "a1": "data",
                "a2": "flag"
            },
            "code": "uint32_t read_and_return_080005e0(uint32_t address, uint32_t data, int32_t flag)\n{\n  software_interrupt(0x3f);\n  return address;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "read_and_return_080005e0"
        },
        "FUN_0800311c": {
            "renaming": {
                "FUN_0800311c": "reset_uart_transfer_counts_0800311c",
                "hdma": "dma_handler",
                "huart": "uart_handler",
                "RxXferCount": "rx_transfer_count",
                "TxXferCount": "tx_transfer_count",
                "HAL_UART_ErrorCallback": "handle_uart_error"
            },
            "code": "void reset_uart_transfer_counts_0800311c(DMA_HandleTypeDef *dma_handler)\n{\n  UART_HandleTypeDef *uart_handler;\n  uart_handler = (UART_HandleTypeDef *)dma_handler->Parent;\n  uart_handler->RxXferCount = 0;\n  uart_handler->TxXferCount = 0;\n  HAL_UART_ErrorCallback(uart_handler);\n  return;\n}",
            "called": [
                "HAL_UART_ErrorCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800311c",
            "calling": [],
            "imported": false,
            "current_name": "reset_uart_transfer_counts_0800311c"
        },
        "FUN_0800420c": {
            "renaming": {
                "FUN_0800420c": "calculateNextTailPosition_0800420c",
                "obj": "serialObject",
                "iVar3": "nextTailPosition",
                "uVar1": "nextTailPositionUnsigned",
                "uVar2": "maskedNextTailPosition",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int calculateNextTailPosition_0800420c(serial_t_conflict *serialObject)\n{\n  int nextTailPosition = serialObject->currentTailPosition + 1;\n  ushort nextTailPositionUnsigned = (ushort)nextTailPosition;\n  uint16_t mask = 0x7f;\n  uint16_t maskedNextTailPosition = nextTailPositionUnsigned & mask;\n  if (nextTailPosition == 0) {\n    maskedNextTailPosition = -(-nextTailPositionUnsigned & mask);\n  }\n  serialObject->currentTailPosition = maskedNextTailPosition;\n  if (serialObject->currentHeadPosition != serialObject->currentTailPosition) {\n    return 0;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800420c",
            "calling": [],
            "imported": false,
            "current_name": "calculateNextTailPosition_0800420c"
        },
        "FUN_080005e4": {
            "renaming": {
                "FUN_080005e4": "get_afl_call_result_080005e4",
                "ticks": "num_ticks",
                "uVar1": "result",
                "PTR_noHyperCall_080005fc": "no_hypercall_ptr",
                "aflCall": "afl_call"
            },
            "code": "uint32_t get_afl_call_result_080005e4(int ticks)\n{\n  uint32_t result;\n  if (*(int *)PTR_noHyperCall_080005fc != 0) {\n    return 0;\n  }\n  result = aflCall(1, ticks, 0);\n  return result;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e4",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "get_afl_call_result_080005e4"
        },
        "FUN_0800076c": {
            "renaming": {
                "FUN_0800076c": "send_modbus_frame_0800076c",
                "this": "modbus_instance",
                "u8length": "buffer_length",
                "uVar1": "crc",
                "uVar4": "buffer_length_plus_one",
                "u8txenpin": "txenpin",
                "u8serno": "serno",
                "au8Buffer": "buffer",
                "u8BufferSize": "buffer_size",
                "port": "serial_port",
                "u16timeOut": "timeout_duration",
                "u32timeOut": "timeout",
                "u16OutCnt": "outgoing_frame_count",
                "digitalWrite": "set_pin_state",
                "millis": "get_current_time",
                "super_Stream": "stream"
            },
            "code": "void __thiscall send_modbus_frame_0800076c(Modbus *modbus_instance) {\\n    byte buffer_length = modbus_instance->buffer_size;\\n    uint16_t crc = calc_crc(modbus_instance, buffer_length);\\n    modbus_instance->buffer[buffer_length] = (uint8_t)((uint)crc >> 8);\\n    uint buffer_length_plus_one = (buffer_length + 1) & 0xff;\\n    modbus_instance->buffer[buffer_length_plus_one] = (uint8_t)crc;\\n    modbus_instance->buffer_size = (char)buffer_length_plus_one + \"\\x01\";\\n    if (modbus_instance->txenpin > 1) {\\n        digitalWrite((uint)modbus_instance->txenpin, 1);\\n    }\\n    if (modbus_instance->serno < 4) {\\n        (*(modbus_instance->port->super_Stream).super_Print._vptr_Print[1])(modbus_instance->port, modbus_instance->buffer, (uint)modbus_instance->buffer_size);\\n    }\\n    if (modbus_instance->txenpin > 1) {\\n        digitalWrite((uint)modbus_instance->txenpin, 0);\\n    }\\n    if (modbus_instance->serno < 4) {\\n        do {\\n            int print_result = (*(modbus_instance->port->super_Stream).super_Print._vptr_Print[3])();\\n        } while (print_result >= 0);\\n    }\\n    modbus_instance->buffer_size = \"\\0\";\\n    uint32_t current_time = millis();\\n    modbus_instance->timeout = current_time + modbus_instance->timeout_duration;\\n    modbus_instance->outgoing_frame_count = modbus_instance->outgoing_frame_count + 1;\\n}",
            "called": [
                "digitalWrite",
                "millis",
                "calcCRC"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800076c",
            "calling": [
                "process_FC5",
                "process_FC3",
                "process_FC1",
                "process_FC6",
                "poll",
                "process_FC15",
                "process_FC16"
            ],
            "imported": false,
            "current_name": "send_modbus_frame_0800076c"
        },
        "FUN_080015b6": {
            "renaming": {
                "FUN_080015b6": "do_nothing_080015b6"
            },
            "code": "\nvoid do_nothing_080015b6(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b6",
            "calling": [
                "I2C_MasterTransmit_TXE",
                "I2C_MasterTransmit_BTF"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b6"
        },
        "FUN_08004460": {
            "renaming": {
                "__thiscall HardwareSerial::FUN_08004460": "set_serial_tx_pin",
                "this": "serial",
                "_tx": "pin_number",
                "PVar1": "pin",
                "PTR_digitalPin_08004478": "digital_pin_ptr_08004478",
                "FUN_08004460": "set_serial_tx_pin_08004460"
            },
            "code": "void set_serial_tx_pin_08004460(HardwareSerial *serial, uint32_t pin_number) {\n\tPinName pin;\n\tif (pin_number < 0x60) {\n\t\tpin = *(PinName *)(PTR_digitalPin_08004478 + pin_number * 2);\n\t} else {\n\t\tpin = NC;\n\t}\n\t(serial->_serial).pin_tx = pin;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004460",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "set_serial_tx_pin_08004460"
        },
        "FUN_080015b8": {
            "renaming": {
                "FUN_080015b8": "do_nothing_080015b8"
            },
            "code": "\nvoid do_nothing_080015b8(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b8",
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b8"
        },
        "FUN_08001198": {
            "renaming": {
                "FUN_08001198": "set_GPIO_PinState_08001198",
                "GPIOx": "GPIO",
                "GPIO_Pin": "Pin",
                "PinState": "State"
            },
            "code": "void set_GPIO_PinState_08001198(GPIO_TypeDef *GPIO, uint16_t Pin, GPIO_PinState State) {\n  if (State == GPIO_PIN_RESET) {\n    GPIO->BSRR = (uint32_t)Pin << 16;\n    return;\n  }\n  GPIO->BSRR = (uint32_t)Pin;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001198",
            "calling": [
                "digital_io_write"
            ],
            "imported": false,
            "current_name": "set_GPIO_PinState_08001198"
        },
        "FUN_080044fc": {
            "renaming": {
                "FUN_080044fc": "initialize_static_data_and_destructors_080044fc"
            },
            "code": "void initialize_static_data_and_destructors_080044fc(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044fc",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_data_and_destructors_080044fc"
        },
        "FUN_08003138": {
            "renaming": {
                "FUN_08003138": "is_pin_set_high_08003138",
                "pin": "pin",
                "map": "pin_map",
                "byte": "unused_byte",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "_Bool is_pin_set_high_08003138(PinName_conflict pin, uint32_t *pin_map) {\n    uint32_t pin_map_index = (uint)((int)pin << 0x18) >> 0x1c;\n    uint32_t pin_mask = (1U << ((int)pin & 0xfU));\n    uint32_t pin_value = pin_map[pin_map_index];\n    uint32_t masked_pin_value = (pin_value & pin_mask);\n    return (_Bool)(masked_pin_value > 0);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003138",
            "calling": [
                "digitalWrite",
                "pinMode"
            ],
            "imported": false,
            "current_name": "is_pin_set_high_08003138"
        },
        "FUN_08000300": {
            "renaming": {
                "FUN_08000300": "FUNC_08000300"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong FUNC_08000300(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  ulonglong uVar1;\n  uint *puVar2;\n  uint uVar3;\n  uint *puVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 != 0) {\n        param_3 = param_3 << (uVar12 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        param_1 = param_1 << (uVar12 & 0xff);\n      }\n      uVar10 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar10;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar10 * uVar8) * 0x10000;\n      uVar6 = uVar8 * (param_3 & 0xffff);\n      uVar5 = uVar8;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar8 = (uVar7 - uVar6) / uVar10;\n      uVar7 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar10 * uVar8) * 0x10000;\n      uVar10 = uVar8 * (param_3 & 0xffff);\n      uVar6 = uVar8;\n      if (uVar7 <= uVar10 && uVar10 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar10 && uVar10 - uVar7 != 0)) {\n          uVar6 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar10;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n      puVar4 = (uint *)0x0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 == 0) {\n        param_2 = param_2 - param_3;\n        uVar7 = param_3 >> 0x10;\n        uVar11 = param_3 & 0xffff;\n        puVar4 = (uint *)0x1;\n      }\n      else {\n        param_3 = param_3 << (uVar12 & 0xff);\n        uVar7 = param_3 >> 0x10;\n        uVar5 = param_2 >> (0x20 - uVar12 & 0xff);\n        uVar9 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        uVar6 = uVar5 / uVar7;\n        uVar11 = param_3 & 0xffff;\n        uVar10 = uVar9 >> 0x10 | (uVar5 - uVar7 * uVar6) * 0x10000;\n        uVar8 = uVar6 * uVar11;\n        param_1 = param_1 << (uVar12 & 0xff);\n        uVar5 = uVar6;\n        if (uVar10 <= uVar8 && uVar8 - uVar10 != 0) {\n          bVar13 = CARRY4(uVar10,param_3);\n          uVar10 = uVar10 + param_3;\n          uVar5 = uVar6 - 1;\n          if ((bVar13 == false) && (uVar10 <= uVar8 && uVar8 - uVar10 != 0)) {\n            uVar5 = uVar6 - 2;\n            uVar10 = uVar10 + param_3;\n          }\n        }\n        uVar3 = (uVar10 - uVar8) / uVar7;\n        param_2 = uVar9 & 0xffff | ((uVar10 - uVar8) - uVar7 * uVar3) * 0x10000;\n        uVar8 = uVar3 * uVar11;\n        uVar6 = uVar3;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar6 = uVar3 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar6 = uVar3 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        puVar4 = (uint *)(uVar6 | uVar5 << 0x10);\n      }\n      uVar10 = param_2 / uVar7;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar10) * 0x10000;\n      uVar6 = uVar11 * uVar10;\n      uVar5 = uVar10;\n      if (uVar8 <= uVar6 && uVar6 - uVar8 != 0) {\n        bVar13 = CARRY4(uVar8,param_3);\n        uVar8 = uVar8 + param_3;\n        uVar5 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar8 <= uVar6 && uVar6 - uVar8 != 0)) {\n          uVar5 = uVar10 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar10 = (uVar8 - uVar6) / uVar7;\n      uVar7 = param_1 & 0xffff | ((uVar8 - uVar6) - uVar7 * uVar10) * 0x10000;\n      uVar11 = uVar11 * uVar10;\n      uVar6 = uVar10;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar11;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar7 >> (uVar12 & 0xff);\n      param_5[1] = 0;\n      return CONCAT44(puVar4,puVar2);\n    }\n  }\n  else if (param_2 < param_4) {\n    puVar2 = param_5;\n    puVar4 = param_5;\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return 0;\n    }\n  }\n  else {\n    puVar4 = (uint *)count_leading_zeroes(param_4);\n    if (puVar4 != (uint *)0x0) {\n      uVar8 = 0x20 - (int)puVar4;\n      uVar5 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar4 & 0xff);\n      uVar9 = uVar5 >> 0x10;\n      uVar12 = param_2 >> (uVar8 & 0xff);\n      uVar11 = param_1 >> (uVar8 & 0xff) | param_2 << ((uint)puVar4 & 0xff);\n      uVar10 = uVar12 / uVar9;\n      uVar7 = uVar11 >> 0x10 | (uVar12 - uVar9 * uVar10) * 0x10000;\n      uVar6 = uVar10 * (uVar5 & 0xffff);\n      param_3 = param_3 << ((uint)puVar4 & 0xff);\n      param_1 = param_1 << ((uint)puVar4 & 0xff);\n      uVar12 = uVar10;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar12 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar12 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar10 = (uVar7 - uVar6) / uVar9;\n      uVar7 = uVar11 & 0xffff | ((uVar7 - uVar6) - uVar9 * uVar10) * 0x10000;\n      uVar9 = uVar10 * (uVar5 & 0xffff);\n      uVar6 = uVar10;\n      if (uVar7 <= uVar9 && uVar9 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar9 && uVar9 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar6 = uVar6 | uVar12 << 0x10;\n      uVar1 = (ulonglong)uVar6 * (ulonglong)param_3;\n      if (CONCAT44(uVar7 - uVar9,param_1) < uVar1) {\n        uVar1 = uVar1 - CONCAT44(uVar5,param_3);\n        uVar6 = uVar6 - 1;\n      }\n      if (param_5 != (uint *)0x0) {\n        uVar12 = ((uVar7 - uVar9) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n        *param_5 = uVar12 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar4 & 0xff);\n        param_5[1] = uVar12 >> ((uint)puVar4 & 0xff);\n      }\n      return (ulonglong)uVar6;\n    }\n    if ((param_4 < param_2) || (puVar2 = puVar4, param_3 <= param_1)) {\n      bVar13 = param_1 < param_3;\n      param_1 = param_1 - param_3;\n      param_2 = (param_2 - param_4) - (uint)bVar13;\n      puVar2 = (uint *)0x1;\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return ZEXT48(puVar2);\n    }\n  }\n  return CONCAT44(puVar4,puVar2);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000300",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "FUNC_08000300"
        },
        "FUN_080005dc": {
            "renaming": {
                "FUN_080005dc": "do_nothing_080005dc"
            },
            "code": "\nvoid do_nothing_080005dc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005dc",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "do_nothing_080005dc"
        },
        "FUN_08003810": {
            "renaming": {
                "FUN_08003810": "handle_timer_interrupts_08003810",
                "PTR_timer_handles_08003828": "PTR_timer_handles_08003828",
                "TIM_HandleTypeDef": "TIM_HandleTypeDef",
                "timer_handle_1": "timer_handle_1",
                "timer_handle_2": "timer_handle_2",
                "HAL_TIM_IRQHandler": "HAL_TIM_IRQHandler"
            },
            "code": "void handle_timer_interrupts_08003810(void)\n{\n  TIM_HandleTypeDef *timer_handle_1 = *(TIM_HandleTypeDef **)(PTR_timer_handles_08003828 + 0x1c);\n  TIM_HandleTypeDef *timer_handle_2 = *(TIM_HandleTypeDef **)(PTR_timer_handles_08003828 + 0x30);\n  \n  if (timer_handle_1 != NULL) {\n    HAL_TIM_IRQHandler(timer_handle_1);\n  }\n  if (timer_handle_2 != NULL) {\n    HAL_TIM_IRQHandler(timer_handle_2);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003810",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupts_08003810"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "updateChannelState_08002848",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelState": "state",
                "CCER": "channelControlRegister",
                "mask": "bitMask",
                "newState": "updatedState"
            },
            "code": "void updateChannelState_08002848(TIM_TypeDef *timer, uint32_t channel, uint32_t state) {\n  uint32_t mask = ~(1 << (channel & 0xff));\n  uint32_t newState = state << (channel & 0xff);\n  timer->CCER = (timer->CCER & mask) | newState;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "HAL_TIM_PWM_Stop"
            ],
            "imported": false,
            "current_name": "updateChannelState_08002848"
        },
        "FUN_08003938": {
            "renaming": {
                "FUN_08003938": "handle_I2C_event_interrupt_08003938",
                "*PTR_i2c_handles_08003944": "*i2c_handle_ptrs",
                "i2c_handle_ptr": "current_i2c_handle"
            },
            "code": "void handle_I2C_event_interrupt_08003938(void)\n{\n  I2C_HandleTypeDef* i2c_handle_ptr = *(I2C_HandleTypeDef **)(PTR_i2c_handles_08003944 + 4);\n  HAL_I2C_EV_IRQHandler(i2c_handle_ptr);\n  return;\n}",
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003938",
            "calling": [],
            "imported": false,
            "current_name": "handle_I2C_event_interrupt_08003938"
        },
        "FUN_0800312c": {
            "renaming": {
                "FUN_0800312c": "get_uart_rx_state_0800312c",
                "huart": "uart_handle",
                "RxState": "rx_state",
                "gState": "g_state"
            },
            "code": "HAL_UART_StateTypeDef get_uart_rx_state_0800312c(UART_HandleTypeDef *uart_handle)\n{\n    HAL_UART_StateTypeDef rx_state = uart_handle->RxState;\n    HAL_UART_StateTypeDef g_state = uart_handle->gState;\n    return rx_state | g_state;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800312c",
            "calling": [
                "serial_tx_active",
                "serial_rx_active"
            ],
            "imported": false,
            "current_name": "get_uart_rx_state_0800312c"
        },
        "FUN_080028f0": {
            "renaming": {
                "FUN_080028f0": "updateTimerChannel_080028f0",
                "*htim": "*timerHandle",
                "Channel": "channel",
                "pTVar1": "timerInstance"
            },
            "code": "HAL_StatusTypeDef updateTimerChannel_080028f0(TIM_HandleTypeDef *timerHandle, uint32_t channel) {\\n\\\n                          TIM_TypeDef *timerInstance = timerHandle->Instance;\\n\\\n                          TIM_CCxNChannelCmd(timerInstance, channel, 0);\\n\\\n                          if (((timerInstance->CCER & 0x1111) == 0) && ((timerInstance->CCER & 0x444) == 0)) {\\n\\\n                            timerInstance->BDTR &= 0xffff7fff;\\n\\\n                          }\\n\\\n                          if (((timerInstance->CCER & 0x1111) == 0) && ((timerInstance->CCER & 0x444) == 0)) {\\n\\\n                            timerInstance->CR1 &= 0xfffffffe;\\n\\\n                          }\\n\\\n                          return HAL_OK;\\n\\\n                        }",
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028f0",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "updateTimerChannel_080028f0"
        },
        "FUN_08000e30": {
            "renaming": {
                "FUN_08000e30": "get_uwTick_value_08000e30",
                "PTR_uwTick_08000e38": "uwTick_address"
            },
            "code": "uint32_t get_uwTick_value_08000e30(void)\n{\n  uint32_t* PTR_uwTick_08000e38 = (uint32_t*)PTR_uwTick_08000e38;\n  uint32_t uwTick_value = *PTR_uwTick_08000e38;\n  return uwTick_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e30",
            "calling": [
                "GetCurrentMilli",
                "HAL_UART_Transmit",
                "HAL_RCC_OscConfig",
                "HAL_RCC_ClockConfig",
                "HAL_PWREx_EnableOverDrive",
                "UART_WaitOnFlagUntilTimeout",
                "uart_debug_write"
            ],
            "imported": false,
            "current_name": "get_uwTick_value_08000e30"
        },
        "FUN_08000f56": {
            "renaming": {
                "FUN_08000f56": "reset_DAC_state_08000f56",
                "hdac": "dac_handle",
                "HAL_DAC_STATE_BUSY": "DAC_BUSY",
                "HAL_DAC_MspDeInit": "DAC_MspDeInit",
                "HAL_DAC_STATE_RESET": "DAC_RESET",
                "HAL_UNLOCKED": "DAC_UNLOCKED",
                "HAL_OK": "RESET_SUCCESS",
                "HAL_ERROR": "RESET_FAIL",
                "ErrorCode": "error_code",
                "State": "state",
                "Lock": "lock"
            },
            "code": "HAL_StatusTypeDef reset_DAC_state_08000f56(DAC_HandleTypeDef *dac_handle)\n{\n  if (dac_handle != NULL) {\n    dac_handle->State = HAL_DAC_STATE_BUSY;\n    HAL_DAC_MspDeInit(dac_handle);\n    dac_handle->ErrorCode = 0;\n    dac_handle->State = HAL_DAC_STATE_RESET;\n    dac_handle->Lock = HAL_UNLOCKED;\n    return HAL_OK;\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "HAL_DAC_MspDeInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f56",
            "calling": [
                "dac_stop"
            ],
            "imported": false,
            "current_name": "reset_DAC_state_08000f56"
        },
        "FUN_0800295c": {
            "renaming": {
                "FUN_0800295c": "TransmitData_0800295c",
                "huart": "uart",
                "uVar1": "tx_count",
                "pbVar2": "tx_buffer"
            },
            "code": "HAL_StatusTypeDef TransmitData_0800295c(UART_HandleTypeDef *uart)\n{\n  uint16_t tx_count;\n  byte *tx_buffer;\n  if (uart->gState != HAL_UART_STATE_BUSY_TX) {\n    return HAL_BUSY;\n  }\n  if ((uart->Init).WordLength == 0x1000) {\n    uart->Instance->DR = *(ushort *)uart->pTxBuffPtr & 0x1ff;\n    if ((uart->Init).Parity == 0) {\n      uart->pTxBuffPtr += 2;\n    }\n    else {\n      uart->pTxBuffPtr += 1;\n    }\n  }\n  else {\n    tx_buffer = uart->pTxBuffPtr;\n    uart->pTxBuffPtr = tx_buffer + 1;\n    uart->Instance->DR = (uint)*tx_buffer;\n  }\n  tx_count = uart->TxXferCount - 1;\n  uart->TxXferCount = tx_count;\n  if (tx_count == 0) {\n    uart->Instance->CR1 &= 0xffffff7f;\n    uart->Instance->CR1 |= 0x40;\n    return HAL_OK;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800295c",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "TransmitData_0800295c"
        },
        "FUN_08003380": {
            "renaming": {
                "FUN_08003380": "check_dac_pin_08003380",
                "pin": "pin_name",
                "uVar1": "function_value"
            },
            "code": "uint32_t check_dac_pin_08003380(PinName_conflict pin)\n{\n  uint32_t function_value;\n  function_value = pinmap_function(pin,(PinMap_conflict *)PTR_PinMap_DAC_08003398);\n  if ((function_value << 12) >> 27 != 2) {\n    return 0;\n  }\n  return 16;\n}",
            "called": [
                "pinmap_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003380",
            "calling": [
                "dac_stop"
            ],
            "imported": false,
            "current_name": "check_dac_pin_08003380"
        },
        "FUN_08005686": {
            "renaming": {
                "FUN_08005686": "close_file_descriptor_08005686",
                "param_1": "file_descriptor",
                "param_2": "file_descriptor_offset"
            },
            "code": "void close_file_descriptor_08005686(int file_descriptor, int file_descriptor_offset){\n    _close_r(file_descriptor, (int)*(short *)(file_descriptor_offset + 0xe));\n    return;\n}",
            "called": [
                "_close_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005686",
            "calling": [],
            "imported": false,
            "current_name": "close_file_descriptor_08005686"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "configure_digital_pin_08004110",
                "ulPin": "pin_number",
                "ulMode": "mode",
                "_Var1": "is_pin_configured",
                "pin": "pin_name",
                "PinName_conflict": "PinName",
                "PTR_digitalPin_080041a8": "digitalPin_080041a8",
                "NC": "NC",
                "is_pin_configured": "is_pin_configured_pin",
                "PTR_g_anOutputPinConfigured_080041ac": "g_anOutputPinConfigured_080041ac",
                "is_pin_in_pinmap": "is_pin_in_pinmap",
                "PinMap_conflict": "PinMap",
                "PTR_PinMap_DAC_080041b0": "PinMap_DAC_080041b0",
                "dac_stop": "dac_stop",
                "PTR_PinMap_PWM_080041b4": "PinMap_PWM_080041b4",
                "pwm_stop": "pwm_stop",
                "reset_pin_configured": "reset_pin_configured",
                "switch": "switch",
                "digital_io_init": "digital_io_init",
                "set_pin_configured": "set_pin_configured",
                "PTR_g_digPinConfigured_080041b8": "g_digPinConfigured_080041b8",
                "uint32_t": "uint32_t",
                "bool": "bool"
            },
            "code": "void configure_digital_pin_08004110(uint32_t pin_number, uint32_t mode)\n{\n  bool is_pin_configured;\n  PinName_conflict pin_name;\n  if (pin_number < 0x60) {\n    pin_name = *(PinName_conflict *)(PTR_digitalPin_080041a8 + pin_number * 2);\n  }\n  else {\n    pin_name = NC;\n  }\n  if (pin_name != NC) {\n    is_pin_configured = is_pin_configured_pin(pin_name, (uint32_t *)PTR_g_anOutputPinConfigured_080041ac);\n    if (is_pin_configured) {\n      if (is_pin_in_pinmap(pin_name, (PinMap_conflict *)PTR_PinMap_DAC_080041b0)) {\n        dac_stop(pin_name);\n      }\n      else if (is_pin_in_pinmap(pin_name, (PinMap_conflict *)PTR_PinMap_PWM_080041b4)) {\n        pwm_stop(pin_name);\n      }\n      reset_pin_configured(pin_name, (uint32_t *)PTR_g_anOutputPinConfigured_080041ac);\n    }\n    switch(mode) {\n    case 0:\n      digital_io_init(pin_name, 0, 0);\n      break;\n    case 1:\n      digital_io_init(pin_name, 1, 0);\n      break;\n    case 2:\n      digital_io_init(pin_name, 0, 1);\n      break;\n    case 3:\n      digital_io_init(pin_name, 0, 2);\n    }\n    set_pin_configured(pin_name, (uint32_t *)PTR_g_digPinConfigured_080041b8);\n  }\n  return;\n}",
            "called": [
                "pin_in_pinmap",
                "digital_io_init",
                "set_pin_configured",
                "reset_pin_configured",
                "dac_stop",
                "is_pin_configured",
                "pwm_stop"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "configure_digital_pin_08004110"
        },
        "FUN_08005320": {
            "renaming": {
                "FUN_08005320": "walk_reentrant_functions_and_free_resources_08005320",
                "param_1": "reentrancy_structure",
                "DAT_08005328": "global_reentrancy_structure"
            },
            "code": "void walk_reentrant_functions_and_free_resources_08005320(void* reentrancy_structure) {\n  _fwalk_reent(reentrancy_structure, DAT_08005328);\n  return;\n}",
            "called": [
                "_fwalk_reent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005320",
            "calling": [],
            "imported": false,
            "current_name": "walk_reentrant_functions_and_free_resources_08005320"
        },
        "FUN_08000ee0": {
            "renaming": {
                "FUN_08000ee0": "calculate_tick_difference_08000ee0",
                "TicksNumb": "tick_count",
                "puVar1": "tick_data_ptr",
                "DAT_08000f04": "tick_data_ptr",
                "DAT_08000f08": "tick_data_offset"
            },
            "code": "uint32_t calculate_tick_difference_08000ee0(uint32_t tick_count)\n{\n  undefined4 *DAT_08000f04;\n  DAT_08000f04 = DAT_08000f04;\n  if (tick_count - 1 < 0x1000000) {\n    DAT_08000f04[1] = tick_count - 1;\n    *(undefined *)(DAT_08000f08 + 0x23) = 0xf0;\n    DAT_08000f04[2] = 0;\n    *DAT_08000f04 = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ee0",
            "calling": [
                "SystemClock_Config",
                "HAL_InitTick"
            ],
            "imported": false,
            "current_name": "calculate_tick_difference_08000ee0"
        },
        "FUN_080015ba": {
            "renaming": {
                "FUN_080015ba": "do_nothing_080015ba"
            },
            "code": "\nvoid do_nothing_080015ba(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015ba",
            "calling": [
                "I2C_SlaveTransmit_TXE",
                "I2C_Slave_AF"
            ],
            "imported": false,
            "current_name": "do_nothing_080015ba"
        },
        "FUN_08000f4c": {
            "renaming": {
                "FUN_08000f4c": "do_nothing_08000f4c"
            },
            "code": "\nvoid do_nothing_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4c",
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08000f4c"
        },
        "FUN_080015bc": {
            "renaming": {
                "FUN_080015bc": "transferData_080015bc",
                "*hi2c": "*i2c_handle",
                "HVar1": "state",
                "*pbVar2": "*buffer_pointer"
            },
            "code": "HAL_StatusTypeDef transferData_080015bc(I2C_HandleTypeDef *i2c_handle)\n{\n    HAL_I2C_StateTypeDef state;\n    uint8_t *buffer_pointer;\n    state = i2c_handle->State;\n    if (i2c_handle->XferCount != 0) {\n        buffer_pointer = i2c_handle->pBuffPtr;\n        i2c_handle->pBuffPtr = buffer_pointer + 1;\n        i2c_handle->Instance->DR = (uint)*buffer_pointer;\n        i2c_handle->XferCount = i2c_handle->XferCount - 1;\n        if ((i2c_handle->XferCount == 0) && (state == HAL_I2C_STATE_BUSY_TX_LISTEN)) {\n            i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffffbff;\n            i2c_handle->PreviousState = 0x21;\n            i2c_handle->State = HAL_I2C_STATE_LISTEN;\n            HAL_I2C_SlaveTxCpltCallback(i2c_handle);\n        }\n        return HAL_OK;\n    }\n    return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015bc",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "transferData_080015bc"
        },
        "FUN_08000f4e": {
            "renaming": {
                "FUN_08000f4e": "handle_systick_interrupt_08000f4e"
            },
            "code": "void handle_systick_interrupt_08000f4e(void)\n{\n  HAL_SYSTICK_Callback();\n  return;\n}",
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4e",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "handle_systick_interrupt_08000f4e"
        },
        "FUN_08003948": {
            "renaming": {
                "FUN_08003948": "handle_I2C_error_interrupt_08003948",
                "PTR_i2c_handles_08003954": "i2c_handles"
            },
            "code": "void handle_I2C_error_interrupt_08003948(void)\n{\n  I2C_HandleTypeDef* i2c_handle = *(I2C_HandleTypeDef **)(PTR_PTR_i2c_handles_08003954_08003954 + 4);\n  HAL_I2C_ER_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003948",
            "calling": [],
            "imported": false,
            "current_name": "handle_I2C_error_interrupt_08003948"
        },
        "FUN_0800458c": {
            "renaming": {
                "FUN_0800458c": "initialize_static_data_0800458c"
            },
            "code": "void initialize_static_data_0800458c() {\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800458c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_data_0800458c"
        },
        "FUN_0800066c": {
            "renaming": {
                "__thiscall Modbus::FUN_0800066c": "set_modbus_settings",
                "this": "modbus_instance",
                "u8id": "device_id",
                "u8serno": "serial_number",
                "u8txenpin": "tx_enable_pin",
                "u16timeOut": "timeout",
                "FUN_0800066c": "set_modbus_settings_0800066c"
            },
            "code": "void set_modbus_settings_0800066c(Modbus *modbus_instance, uint8_t device_id, uint8_t serial_number, uint8_t tx_enable_pin) {\n  modbus_instance->device_id = device_id;\n  if (serial_number > 3) {\n    serial_number = 0;\n  }\n  modbus_instance->serial_number = serial_number;\n  modbus_instance->tx_enable_pin = tx_enable_pin;\n  modbus_instance->timeout = 1000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800066c",
            "calling": [
                "Modbus"
            ],
            "imported": false,
            "current_name": "set_modbus_settings_0800066c"
        },
        "FUN_080042e8": {
            "renaming": {
                "__thiscall HardwareSerial::FUN_080042e8": "writeByte",
                "*this": "serial",
                "c": "byteToSend",
                "bVar1": "nextHeadIndexByte",
                "uVar2": "isTxActive",
                "bVar3": "nextHeadIndexByteModulo",
                "iVar4": "nextHeadIndex",
                "uVar5": "currentHeadIndex",
                "_written": "isWrittenSuccessfully",
                "tx_head": "txHeadIndex",
                "tx_tail": "txTailIndex",
                "tx_buff": "txBuffer",
                "serial_t": "serialType",
                "FUN_080042e8": "writeByte_080042e8"
            },
            "code": "size_t __thiscall HardwareSerial::writeByte_080042e8(HardwareSerial *serial, uint8_t byteToSend)\\n{\\n  bool isWrittenSuccessfully;\\n  uint currentHeadIndex = (uint)(serial->_serial).tx_head;\\n  int nextHeadIndex = currentHeadIndex + 1;\\n  byte nextHeadIndexByte = (byte)nextHeadIndex;\\n  byte nextHeadIndexByteModulo = nextHeadIndexByte & 0x7f;\\n  if (nextHeadIndex == 0) {\\n    nextHeadIndexByteModulo = -(-nextHeadIndexByte & 0x7f);\\n  }\\n  do {\\n  } while ((serial->_serial).tx_tail == (ushort)nextHeadIndexByteModulo);\\n  (serial->_serial).tx_buff[currentHeadIndex] = byteToSend;\\n  (serial->_serial).tx_head = (ushort)nextHeadIndexByteModulo;\\n  uint8_t isTxActive = serial_tx_active((serial_t *)&serial->_serial);\\n  if (isTxActive == \"\\0\") {\\n    uart_attach_tx_callback((serial_t *)&serial->_serial,DAT_08004334);\\n  }\\n  return 1;\\n}",
            "called": [
                "serial_tx_active",
                "uart_attach_tx_callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e8",
            "calling": [],
            "imported": false,
            "current_name": "writeByte_080042e8"
        },
        "FUN_080038d0": {
            "renaming": {
                "FUN_080038d0": "enable_i2c_slave_receive_callback_080038d0",
                "hi2c": "i2c_handle",
                "piVar1": "i2c_obj",
                "uVar2": "remaining_bytes",
                "get_i2c_obj": "get_i2c_object",
                "i2c_onSlaveReceive": "i2c_on_slave_receive",
                "_func_void_uint8_t_ptr_int": "NULL",
                "slaveMode": "slave_mode",
                "I2C_SLAVE_MODE_ENABLED": "I2C_SLAVE_MODE_ENABLED",
                "handle": "i2c_handle",
                "XferSize": "XferSize",
                "i2cTxRxBuffer": "i2c_tx_rx_buffer",
                "HAL_I2C_EnableListen_IT": "HAL_I2C_EnableListen_IT"
            },
            "code": "void enable_i2c_slave_receive_callback_080038d0(I2C_HandleTypeDef *i2c_handle)\n{\n  i2c_t *i2c_obj;\n  uint8_t remaining_bytes;\n  \n  i2c_obj = get_i2c_object(i2c_handle);\n  if (((i2c_obj->i2c_on_slave_receive != NULL) && (i2c_obj->slave_mode == I2C_SLAVE_MODE_ENABLED)) && (remaining_bytes = 0x20 - *(uint8_t *)&(i2c_obj->handle).XferSize & 0xff, remaining_bytes != 0)) {\n    (*i2c_obj->i2c_on_slave_receive)(i2c_obj->i2c_tx_rx_buffer,remaining_bytes);\n  }\n  HAL_I2C_EnableListen_IT(i2c_handle);\n  return;\n}",
            "called": [
                "get_i2c_obj",
                "HAL_I2C_EnableListen_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038d0",
            "calling": [
                "I2C_ITError",
                "I2C_Slave_STOPF",
                "I2C_Slave_AF"
            ],
            "imported": false,
            "current_name": "enable_i2c_slave_receive_callback_080038d0"
        },
        "FUN_0800410c": {
            "renaming": {
                "FUN_0800410c": "get_process_id_0800410c"
            },
            "code": "\n\nint get_process_id_0800410c(void)\n{\n  return 1;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800410c",
            "calling": [
                "_getpid_r"
            ],
            "imported": false,
            "current_name": "get_process_id_0800410c"
        },
        "FUN_0800260c": {
            "renaming": {
                "FUN_0800260c": "get_HCLK_frequency_0800260c",
                "PTR_APBPrescTable_08002628": "apb_prescaler_table",
                "DAT_08002624": "data_08002624"
            },
            "code": "uint32_t get_HCLK_frequency_0800260c(void)\n{\n  uint32_t frequency = HAL_RCC_GetHCLKFreq();\n  uint32_t apb_prescaler_index = (uint)(*(int *)(DAT_08002624 + 8) << 0x10) >> 0x1d;\n  uint32_t apb_prescaler = PTR_APBPrescTable_08002628[apb_prescaler_index];\n  return frequency >> apb_prescaler;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800260c",
            "calling": [
                "UART_SetConfig"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_0800260c"
        },
        "FUN_08004240": {
            "renaming": {
                "FUN_08004240": "calculateAvailableSpaceInRxBuffer_08004240",
                "this": "serialInstance",
                "_serial": "serialData",
                "rx_head": "headIndex",
                "rx_tail": "tailIndex",
                "0x40": "bufferLength",
                "(uint)": "",
                "& 0x3f": "& (bufferLength - 1)",
                "return": "return availableSpace;"
            },
            "code": "int __thiscall HardwareSerial::calculateAvailableSpaceInRxBuffer_08004240(HardwareSerial *serialInstance) {\n    int headIndex = (serialInstance->_serial).rx_head;\n    int tailIndex = (serialInstance->_serial).rx_tail;\n    int bufferLength = 0x40;\n    int availableSpace = (headIndex + bufferLength - tailIndex) & (bufferLength - 1);\n    return availableSpace;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004240",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "calculateAvailableSpaceInRxBuffer_08004240"
        },
        "FUN_080026c8": {
            "renaming": {
                "FUN_080026c8": "do_nothing_080026c8"
            },
            "code": "\nvoid do_nothing_080026c8(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026c8",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_080026c8"
        },
        "FUN_08005690": {
            "renaming": {
                "FUN_08005690": "write_to_file_08005690",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "error_ptr",
                "iVar2": "bytes_written"
            },
            "code": "void write_to_file_08005690(int *error_code, int file_descriptor, char *buffer, int buffer_size) {\n  undefined *error_ptr;\n  int bytes_written;\n  error_ptr = PTR_errno_080056b0;\n  *(undefined4 *)PTR_errno_080056b0 = 0;\n  bytes_written = _write(file_descriptor, buffer, buffer_size);\n  if ((bytes_written == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n  }\n  return;\n}",
            "called": [
                "_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005690",
            "calling": [
                "__swrite"
            ],
            "imported": false,
            "current_name": "write_to_file_08005690"
        },
        "FUN_080041bc": {
            "renaming": {
                "FUN_080041bc": "configure_digital_pin_080041bc",
                "ulPin": "pin_number",
                "ulVal": "value",
                "_Var1": "pin_configured",
                "port": "gpio_port",
                "uVar2": "pin_config"
            },
            "code": "void configure_digital_pin_080041bc(uint32_t pin_number, uint32_t value)\n{\n  bool pin_configured;\n  GPIO_TypeDef *gpio_port;\n  uint32_t pin_config;\n  if (pin_number < 0x60) {\n    pin_config = (uint32_t)*(short *)(PTR_digitalPin_080041fc + pin_number * 2);\n  }\n  else {\n    pin_config = 0xffffffff;\n  }\n  if ((pin_config != 0xffffffff) && (pin_configured = is_pin_configured((PinName_conflict)pin_config, (uint32_t *)PTR_g_digPinConfigured_08004200), pin_configured)) {\n    gpio_port = get_GPIO_Port((pin_config << 0x18) >> 0x1c);\n    digital_io_write(gpio_port, 1 << (pin_config & 0xf) & 0xffff, value);\n  }\n  return;\n}",
            "called": [
                "get_GPIO_Port",
                "digital_io_write",
                "is_pin_configured"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041bc",
            "calling": [
                "getRxBuffer",
                "sendTxBuffer",
                "begin"
            ],
            "imported": false,
            "current_name": "configure_digital_pin_080041bc"
        },
        "FUN_08004364": {
            "renaming": {
                "FUN_08004364": "initializeSerial_08004364",
                "this": "serial",
                "ctx": "context",
                "_serial": "serial",
                "rx_buff": "rx_buffer",
                "_rx_buffer": "_rx_buffer",
                "rx_head": "rx_head",
                "rx_tail": "rx_tail",
                "tx_buff": "tx_buffer",
                "_tx_buffer": "_tx_buffer",
                "tx_head": "tx_head",
                "tx_tail": "tx_tail"
            },
            "code": "int __thiscall initializeSerial_08004364(HardwareSerial *serial, EVP_PKEY_CTX *context) {\n    serial->rx_buffer = serial->_rx_buffer;\n    serial->rx_head = 0;\n    serial->rx_tail = 0;\n    serial->tx_buffer = serial->_tx_buffer;\n    serial->tx_head = 0;\n    serial->tx_tail = 0;\n    return (int)serial;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004364",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "initializeSerial_08004364"
        },
        "FUN_08000682": {
            "renaming": {
                "FUN_08000682::FUN_08000682": "initialize",
                "this": "instance",
                "u8id": "id",
                "u8serno": "serial_number",
                "u8txenpin": "tx_enable_pin",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)",
                "FUN_08000682": "initialize_08000682"
            },
            "code": "initialize_08000682* initialize_08000682(initialize_08000682* instance, uint8_t id, uint8_t serial_number, uint8_t tx_enable_pin) {\n  init(instance, id, serial_number, tx_enable_pin);\n  return instance;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000682",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "initialize_08000682"
        },
        "FUN_08004004": {
            "renaming": {
                "FUN_08004004": "handle_uart_interrupt_08004004",
                "USART3_IRQn": "IRQn",
                "PTR_uart_handlers_08004018": "uart_handlers",
                "UART_HandleTypeDef": "UARTHandler",
                "uart_handler": "current_UARTHandler"
            },
            "code": "void handle_uart_interrupt_08004004(void)\n{\n  HAL_NVIC_ClearPendingIRQ(USART3_IRQn);\n  UART_HandleTypeDef *uart_handler = *(UART_HandleTypeDef **)(PTR_PTR_uart_handlers_08004018_08004018 + 8);\n  if (uart_handler != NULL) {\n    HAL_UART_IRQHandler(uart_handler);\n  }\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004004",
            "calling": [],
            "imported": false,
            "current_name": "handle_uart_interrupt_08004004"
        },
        "FUN_08000e3c": {
            "renaming": {
                "FUN_08000e3c": "setPriorityGroup_08000e3c",
                "PriorityGroup": "priorityGroup",
                "DAT_08000e5c": "priorityReg",
                "PTR_": "ptr_",
                "priorityGroup": "priorityGroup",
                "priorityReg": "priorityReg",
                "priorityMask": "priorityMask",
                "priorityValue": "priorityValue"
            },
            "code": "void setPriorityGroup_08000e3c(uint32_t priorityGroup) {\n    uint32_t *DAT_08000e5c = (uint32_t *)(DAT_08000e5c + 0xc);\n    uint32_t priorityMask = 0xf8ff;\n    uint32_t priorityValue = (priorityGroup & 7) << 8 | (*DAT_08000e5c & priorityMask) | 0x5fa0000;\n    *DAT_08000e5c = priorityValue;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e3c",
            "calling": [
                "premain",
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "setPriorityGroup_08000e3c"
        },
        "FUN_080037ac": {
            "renaming": {
                "FUN_080037ac": "handle_timer_interrupt_080037ac",
                "PTR_timer_handles_080037bc": "PTR_timer_handles_080037bc",
                "TIM_HandleTypeDef": "TIM_HandleTypeDef",
                "HAL_TIM_IRQHandler": "HAL_TIM_IRQHandler"
            },
            "code": "void handle_timer_interrupt_080037ac(void)\n{\n    TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_080037bc + 8);\n    if (timer_handle != NULL) {\n        HAL_TIM_IRQHandler(timer_handle);\n    }\n    return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037ac",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_080037ac"
        },
        "FUN_08002864": {
            "renaming": {
                "FUN_08002864": "disable_timer_channel_08002864",
                "htim": "timer_handle",
                "Channel": "channel",
                "bVar1": "is_tim_instance",
                "pTVar2": "tim_instance"
            },
            "code": "HAL_StatusTypeDef disable_timer_channel_08002864(TIM_HandleTypeDef *timer_handle, uint32_t channel)\n{\n    bool is_tim_instance = false;\n    TIM_TypeDef *tim_instance = timer_handle->Instance;\n\n    TIM_CCxChannelCmd(tim_instance, channel, 0);\n\n    if (tim_instance == PTR_DAT_080028d0 || tim_instance == (TIM_TypeDef *)&DAT_080028d0[0xc].SR) {\n        is_tim_instance = true;\n    }\n\n    if (is_tim_instance && ((tim_instance->CCER & 0x1111) == 0) && ((tim_instance->CCER & 0x444) == 0)) {\n        tim_instance->BDTR &= 0xffff7fff;\n    }\n\n    if ((tim_instance->CCER & 0x1111) == 0 && (tim_instance->CCER & 0x444) == 0) {\n        tim_instance->CR1 &= 0xfffffffe;\n    }\n\n    timer_handle->State = HAL_TIM_STATE_READY;\n    return HAL_OK;\n}",
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002864",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "disable_timer_channel_08002864"
        },
        "FUN_0800459a": {
            "renaming": {
                "FUN_0800459a": "print_buffer_0800459a",
                "this": "print",
                "pPVar1": "print_obj",
                "sVar2": "bytes_printed",
                "buffer": "buffer",
                "size": "size"
            },
            "code": "size_t __thiscall print_buffer_0800459a(Print *print, uint8_t *buffer, size_t size)\n{\n  Print *print_obj;\n  size_t bytes_printed;\n\n  bytes_printed = 0;\n  print_obj = print;\n  while( true ) {\n    if (size == 0) {\n      return bytes_printed;\n    }\n    print_obj = (Print *)(**print->_vptr_Print)(print_obj,(uint)*buffer);\n    if (print_obj == (Print *)0x0) break;\n    bytes_printed = bytes_printed + 1;\n    buffer = buffer + 1;\n    size = size - 1;\n  }\n  return bytes_printed;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800459a",
            "calling": [],
            "imported": false,
            "current_name": "print_buffer_0800459a"
        },
        "FUN_08003958": {
            "renaming": {
                "FUN_08003958": "handle_I2C_event_08003958",
                "PTR_i2c_handles_08003964": "i2c_handles_ptr",
                "i2c_handle_ptr": "i2c_handle",
                "HAL_I2C_EV_IRQHandler": "handle_I2C_event_interrupt"
            },
            "code": "void handle_I2C_event_08003958(void)\n{\n  I2C_HandleTypeDef* i2c_handle_ptr = *(I2C_HandleTypeDef**)(PTR_i2c_handles_08003964 + 8);\n  HAL_I2C_EV_IRQHandler(i2c_handle_ptr);\n  return;\n}",
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003958",
            "calling": [],
            "imported": false,
            "current_name": "handle_I2C_event_08003958"
        },
        "FUN_0800532c": {
            "renaming": {
                "std_isra_0": "initialize_data",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "DAT_08005364": "PTR_DAT_08005364",
                "DAT_08005368": "PTR_DAT_08005368",
                "DAT_0800536c": "PTR_DAT_0800536c",
                "DAT_08005370": "PTR_DAT_08005370",
                "FUN_0800532c": "initialize_data_0800532c"
            },
            "code": "void initialize_data_0800532c(undefined4 *data, undefined2 value1, undefined2 value2) {\n    *data = 0;\n    data[1] = 0;\n    data[2] = 0;\n    *(undefined2 *)(data + 3) = value1;\n    data[25] = 0;\n    *(undefined2 *)((int)data + 0xe) = value2;\n    data[4] = 0;\n    data[5] = 0;\n    data[6] = 0;\n    memset(data + 23, 0, 8);\n    data[9] = DAT_08005364;\n    data[10] = DAT_08005368;\n    data[11] = DAT_0800536c;\n    undefined4 value3 = DAT_08005370;\n    data[8] = data;\n    data[12] = value3;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800532c",
            "calling": [
                "__sinit"
            ],
            "imported": false,
            "current_name": "initialize_data_0800532c"
        },
        "FUN_0800314e": {
            "renaming": {
                "FUN_0800314e": "map_pin_to_bit_0800314e",
                "pin": "pin_bit",
                "map": "bit_map",
                "uVar1": "pin_index"
            },
            "code": "void map_pin_to_bit_0800314e(PinName_conflict pin_name, uint32_t *bit_map) {\n    uint32_t pin_index = (uint32_t)pin_name >> 28;\n    uint32_t pin_bit = (uint32_t)pin_name & 0xF;\n    bit_map[pin_index] |= 1 << pin_bit;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "map_pin_to_bit_0800314e"
        },
        "FUN_0800447c": {
            "renaming": {
                "FUN_0800447c::FUN_0800447c": "initialize_UART",
                "this": "uart_instance",
                "peripheral": "peripheral",
                "PVar1": "pin_name",
                "extraout_r1": "ctx_1",
                "ctx": "ctx_2",
                "extraout_r1_00": "ctx_3",
                "FUN_0800447c": "initialize_UART_0800447c"
            },
            "code": "initialize_UART_0800447c* initialize_UART_0800447c(initialize_UART_0800447c* uart_instance, void* peripheral) {\n    PinName rx_pin;\n    PinName tx_pin;\n    EVP_PKEY_CTX* ctx;\n    EVP_PKEY_CTX* extraout_r1;\n    EVP_PKEY_CTX* extraout_r1_00;\n    \n    uart_instance->super_Stream.super_Print.write_error = 0;\n    uart_instance->super_Stream._timeout = 1000;\n    uart_instance->super_Stream.super_Print._vptr_Print = (_func_int_varargs**)write;\n    \n    if(uart_instance == (initialize_UART_0800447c*)Serial3) {\n        setRx(uart_instance, 0x4c);\n        setTx(uart_instance, 0x4d);\n        ctx = extraout_r1_00;\n    }\n    else {\n        rx_pin = pinmap_pin(peripheral, (PinMap*)RX);\n        tx_pin = pinmap_pin(peripheral, (PinMap*)TX);\n        uart_instance->_serial.pin_rx = rx_pin;\n        uart_instance->_serial.pin_tx = tx_pin;\n        ctx = extraout_r1;\n    }\n    \n    init(uart_instance, ctx);\n    return uart_instance;\n}",
            "called": [
                "pinmap_pin",
                "setRx",
                "setTx",
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800447c",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "initialize_UART_0800447c"
        },
        "FUN_08004808": {
            "renaming": {
                "FUN_08004808": "print_assertion_failed_08004808",
                "param_1": "stream",
                "param_2": "file",
                "param_3": "assertion",
                "param_4": "message",
                "puVar1": "assertion_string",
                "puVar2": "message_string",
                "PTR_s__08004840": "assertion_string_default",
                "PTR_s___function__08004838": "message_string_default",
                "PTR_s_assertion___s__failed__file___s__0800483c": "assertion_failed_string",
                "PTR__impure_ptr_08004834": "impure_ptr"
            },
            "code": "void print_assertion_failed_08004808(FILE* stream, const char* file, int line, const char* func, const char* assertion, const char* message)\n{\n    const char* assertion_string = assertion ? assertion : \"\";\n    const char* message_string = message ? message : \"\";\n    fprintf(stream, \"Assertion '%s' failed in function %s() at %s:%d. %s\\n\", assertion_string, func, file, line, message_string);\n    abort();\n}",
            "called": [
                "abort",
                "fiprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004808",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "print_assertion_failed_08004808"
        },
        "FUN_08000f72": {
            "renaming": {
                "FUN_08000f72": "set_DAC_channel_state_08000f72",
                "*hdac": "dac_handler",
                "Channel": "channel",
                "CR": "control_register",
                "State": "dac_state",
                "HAL_StatusTypeDef": "status"
            },
            "code": "HAL_StatusTypeDef set_DAC_channel_state_08000f72(DAC_HandleTypeDef *dac_handler, uint32_t channel){\n    uint32_t channel_mask = ~(1 << (channel & 0xff));\n    dac_handler->Instance->CR &= channel_mask;\n    dac_handler->State = HAL_DAC_STATE_READY;\n    return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f72",
            "calling": [
                "dac_stop"
            ],
            "imported": false,
            "current_name": "set_DAC_channel_state_08000f72"
        },
        "FUN_08001d00": {
            "renaming": {
                "FUN_08001d00": "i2c_handle_interrupt_08001d00",
                "hi2c": "handle",
                "pIVar1": "instance",
                "uVar2": "sr1",
                "uVar3": "cr2",
                "uVar4": "sr2",
                "DAT_08001e60": "SR1_ADDR_FLAG",
                "DAT_08001e4c": "SR1_TXE_FLAG",
                "DAT_08001e54": "SR2_MSL_FLAG",
                "DAT_08001e64": "SR1_RXNE_FLAG",
                "DAT_08001e5c": "SR1_BTF_FLAG",
                "DAT_08001e58": "SR1_TXE_FLAG",
                "DAT_08001e50": "SR1_STOPF_FLAG",
                "HAL_I2C_MODE_MASTER": "I2C_MODE_MASTER",
                "HAL_I2C_MODE_MEM": "I2C_MODE_MEM",
                "I2C_Master_ADDR": "i2c_handle_master_addr",
                "I2C_Master_ADD10": "i2c_handle_master_add10",
                "I2C_Master_SB": "i2c_handle_master_sb",
                "I2C_MasterReceive_RXNE": "i2c_handle_master_receive_rxne",
                "I2C_MasterReceive_BTF": "i2c_handle_master_receive_btf",
                "I2C_MasterTransmit_TXE": "i2c_handle_master_transmit_txe",
                "I2C_MasterTransmit_BTF": "i2c_handle_master_transmit_btf",
                "I2C_Slave_ADDR": "i2c_handle_slave_addr",
                "I2C_Slave_STOPF": "i2c_handle_slave_stopf",
                "I2C_SlaveReceive_RXNE": "i2c_handle_slave_receive_rxne",
                "I2C_SlaveReceive_BTF": "i2c_handle_slave_receive_btf",
                "I2C_SlaveTransmit_TXE": "i2c_handle_slave_transmit_txe",
                "I2C_SlaveTransmit_BTF": "i2c_handle_slave_transmit_btf"
            },
            "code": "void i2c_handle_interrupt_08001d00(I2C_HandleTypeDef *handle)\n{\n  I2C_TypeDef *instance = handle->Instance;\n  uint32_t sr2 = instance->SR2;\n  uint32_t sr1 = instance->SR1;\n  uint32_t cr2 = instance->CR2;\n  if ((handle->Mode == HAL_I2C_MODE_MASTER) || (handle->Mode == HAL_I2C_MODE_MEM)) {\n    if (((sr1 & 0x10001) == 0) || ((cr2 & 0x200) == 0)) {\n      if (((DAT_08001e60 & sr1) == 0) || ((cr2 & 0x200) == 0)) {\n        if (((DAT_08001e4c & sr1) != 0) && ((cr2 & 0x200) != 0)) {\n          i2c_handle_master_transmit(handle);\n        }\n      }\n      else {\n        i2c_handle_master_add10(handle);\n      }\n    }\n    else {\n      i2c_handle_master_sb(handle);\n    }\n    if ((DAT_08001e54 & sr2) == 0) {\n      if ((((DAT_08001e64 & sr1) != 0) && ((cr2 & 0x400) != 0)) && ((DAT_08001e5c & sr1) == 0)\n         ) {\n        i2c_handle_master_receive_rxne(handle);\n        return;\n      }\n      if (((DAT_08001e5c & sr1) != 0) && ((cr2 & 0x200) != 0)) {\n        i2c_handle_master_receive_btf(handle);\n        return;\n      }\n    }\n    else {\n      if ((((DAT_08001e4c & sr1) != 0) && ((cr2 & 0x400) != 0)) && ((DAT_08001e5c & sr1) == 0)\n         ) {\n        i2c_handle_master_transmit_txe(handle);\n        return;\n      }\n      if (((DAT_08001e5c & sr1) != 0) && ((cr2 & 0x200) != 0)) {\n        i2c_handle_master_transmit_btf(handle);\n        return;\n      }\n    }\n  }\n  else {\n    if (((DAT_08001e60 & sr1) != 0) && ((cr2 & 0x200) != 0)) {\n      i2c_handle_slave_addr(handle);\n      return;\n    }\n    if (((DAT_08001e50 & sr1) != 0) && ((cr2 & 0x200) != 0)) {\n      i2c_handle_slave_stopf(handle);\n      return;\n    }\n    if ((DAT_08001e54 & sr2) == 0) {\n      if ((((DAT_08001e64 & sr1) != 0) && ((cr2 & 0x400) != 0)) && ((DAT_08001e5c & sr1) == 0)\n         ) {\n        i2c_handle_slave_receive_rxne(handle);\n        return;\n      }\n      if (((DAT_08001e5c & sr1) != 0) && ((cr2 & 0x200) != 0)) {\n        i2c_handle_slave_receive_btf(handle);\n      }\n    }\n    else {\n      if ((((DAT_08001e4c & sr1) != 0) && ((cr2 & 0x400) != 0)) && ((DAT_08001e5c & sr1) == 0)\n         ) {\n        i2c_handle_slave_transmit_txe(handle);\n        return;\n      }\n      if (((DAT_08001e5c & sr1) != 0) && ((cr2 & 0x200) != 0)) {\n        i2c_handle_slave_transmit_btf(handle);\n        return;\n      }\n    }\n  }\n}",
            "called": [
                "I2C_SlaveReceive_RXNE",
                "I2C_Master_ADD10",
                "I2C_SlaveReceive_BTF",
                "I2C_Slave_STOPF",
                "I2C_Master_ADDR",
                "I2C_SlaveTransmit_TXE",
                "I2C_MasterTransmit_TXE",
                "I2C_Master_SB",
                "I2C_SlaveTransmit_BTF",
                "I2C_Slave_ADDR",
                "I2C_MasterReceive_RXNE",
                "I2C_MasterTransmit_BTF",
                "I2C_MasterReceive_BTF"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001d00",
            "calling": [
                "I2C3_EV_IRQHandler",
                "I2C2_EV_IRQHandler",
                "I2C1_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_handle_interrupt_08001d00"
        },
        "FUN_080037c0": {
            "renaming": {
                "FUN_080037c0": "handle_timer_interrupt_080037c0",
                "PTR_timer_handles_080037d0": "PTR_timer_handles_080037d0",
                "TIM_HandleTypeDef": "TIM_HandleTypeDef",
                "HAL_TIM_IRQHandler": "HAL_TIM_IRQHandler"
            },
            "code": "void handle_timer_interrupt_080037c0(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_080037d0 + 0xc);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037c0",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_080037c0"
        },
        "FUN_0800382c": {
            "renaming": {
                "FUN_0800382c": "handle_timer_interrupt_0800382c",
                "PTR_timer_handles_0800383c": "PTR_timer_handles",
                "timer_handle": "timer_handle",
                "HAL_TIM_IRQHandler": "handle_tim_interrupt"
            },
            "code": "void handle_timer_interrupt_0800382c(void)\n{\n  TIM_HandleTypeDef *timer_handle = *(TIM_HandleTypeDef **)(PTR_timer_handles_0800383c_0800383c + 0x20);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800382c",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_0800382c"
        }
    },
    "used_tokens": 205440,
    "layers": [
        [
            "FUN_080006b4",
            "FUN_080034da",
            "FUN_080035fc",
            "FUN_08003dd0",
            "FUN_08000c8c",
            "FUN_08000a4e",
            "FUN_08004774",
            "FUN_08004658",
            "FUN_080034f4",
            "FUN_0800476a",
            "FUN_0800355e",
            "FUN_0800573c",
            "FUN_08003e54",
            "FUN_080056d4",
            "FUN_080033d8",
            "FUN_08002488",
            "FUN_08004788",
            "FUN_08004544",
            "FUN_08003cc8",
            "FUN_08000fb4",
            "FUN_08001bfc",
            "FUN_08002d72",
            "FUN_080007f0",
            "FUN_0800477e",
            "FUN_0800562a",
            "FUN_080044d8",
            "FUN_08003df4",
            "FUN_08005400",
            "FUN_08003582",
            "FUN_08004792",
            "FUN_08004678",
            "FUN_08003900",
            "FUN_08005768",
            "FUN_08000f0c",
            "FUN_08000998",
            "FUN_08003f94",
            "FUN_080056f8",
            "FUN_080054b4",
            "FUN_0800171a",
            "FUN_08004560",
            "FUN_08000a7a",
            "FUN_08004cb0",
            "FUN_08003594",
            "FUN_08002940",
            "FUN_08004204",
            "FUN_08003476",
            "FUN_08004444",
            "FUN_080055e0",
            "FUN_0800346c",
            "FUN_080053a0",
            "FUN_08003918",
            "FUN_080028d4",
            "FUN_08001460",
            "FUN_08004298",
            "FUN_08003880",
            "FUN_08003fd4",
            "FUN_08002f4c",
            "FUN_080035bc",
            "FUN_08000c4c",
            "FUN_080025ec",
            "FUN_080037fc",
            "FUN_08004a60",
            "FUN_080050d0",
            "FUN_08004978",
            "FUN_08002d0c",
            "FUN_0800404c",
            "FUN_08001904",
            "FUN_08000c64",
            "FUN_08002ffc",
            "FUN_0800387c",
            "FUN_0800351e",
            "FUN_08002f66",
            "FUN_080034b6",
            "FUN_08003eac",
            "FUN_08004064",
            "FUN_08003e18",
            "FUN_080040fc",
            "FUN_08002dd0",
            "FUN_08003414",
            "FUN_08005718",
            "FUN_080011c0",
            "FUN_080047f0",
            "FUN_0800502c",
            "FUN_08000b54",
            "FUN_0800376e",
            "FUN_08000d98",
            "FUN_08003f48",
            "FUN_0800340c",
            "FUN_0800352e",
            "FUN_0800582c",
            "FUN_08001ab0",
            "FUN_08001f9c",
            "FUN_08000d8c",
            "FUN_08005604",
            "FUN_080008cc",
            "FUN_08005608",
            "FUN_08002efa",
            "FUN_080058f0",
            "FUN_080056b4",
            "FUN_0800450a",
            "FUN_0800377c",
            "FUN_08003fec",
            "FUN_0800268e",
            "FUN_080008e2",
            "FUN_080045c8",
            "FUN_08003d18",
            "FUN_08004640",
            "FUN_08000c7c",
            "FUN_08004760",
            "FUN_080034ce",
            "FUN_08003798",
            "FUN_080047fe",
            "FUN_08005974",
            "FUN_08001256",
            "FUN_08004884",
            "FUN_08004648",
            "FUN_080045be",
            "FUN_0800407c",
            "FUN_08000728",
            "FUN_0800354a",
            "FUN_0800124a",
            "FUN_08004094",
            "FUN_080033c8",
            "FUN_080031fc",
            "FUN_08005580",
            "FUN_08000690",
            "FUN_08004254",
            "FUN_080054fc",
            "FUN_08001420",
            "FUN_08003840",
            "FUN_080026ce",
            "FUN_08001f3c",
            "FUN_08000218",
            "FUN_0800339c",
            "FUN_08003968",
            "FUN_08000e60",
            "FUN_0800165a",
            "FUN_080037d4",
            "FUN_08000b04",
            "FUN_0800262c",
            "FUN_080047a8",
            "FUN_08004388",
            "FUN_080051ac",
            "FUN_080052cc",
            "FUN_08002eb2",
            "FUN_08005478",
            "FUN_08000d3c",
            "FUN_08003854",
            "FUN_0800316c",
            "FUN_080040d0",
            "FUN_0800401c",
            "FUN_080040d6",
            "FUN_08004a34",
            "FUN_080002d0",
            "FUN_08003f00",
            "FUN_08004270",
            "FUN_080037e8",
            "FUN_08001440",
            "FUN_08000230",
            "FUN_080051bc",
            "FUN_08004034",
            "FUN_08000f8c",
            "FUN_08001684",
            "FUN_080001ac",
            "FUN_080040e0",
            "FUN_08003868",
            "FUN_080048cc",
            "FUN_080040e4",
            "FUN_08003506",
            "FUN_080025e0",
            "FUN_080040e8",
            "FUN_08000a00",
            "FUN_08005374",
            "FUN_08003750",
            "FUN_080014ec",
            "FUN_080048dc",
            "FUN_08003754",
            "FUN_08001578",
            "FUN_080035ac",
            "FUN_08004844",
            "FUN_0800318c",
            "FUN_080001d0",
            "FUN_080047d0",
            "FUN_080040f8",
            "FUN_0800500c",
            "FUN_080023b4",
            "FUN_080011a4",
            "FUN_08001e68",
            "FUN_080019a0",
            "FUN_08003f24",
            "FUN_080046b4",
            "FUN_0800160e",
            "FUN_08000e18",
            "FUN_08003486",
            "FUN_08005662",
            "FUN_080042ac",
            "FUN_08001864",
            "FUN_08000f2c",
            "FUN_08000ec4",
            "FUN_08004338",
            "FUN_08003928",
            "FUN_0800468c",
            "FUN_080005e0",
            "FUN_0800311c",
            "FUN_0800420c",
            "FUN_080005e4",
            "FUN_0800076c",
            "FUN_08004460",
            "FUN_08001198",
            "FUN_080044fc",
            "FUN_08003138",
            "FUN_08003810",
            "FUN_08002848",
            "FUN_08003938",
            "FUN_0800312c",
            "FUN_080028f0",
            "FUN_08000e30",
            "FUN_08000f56",
            "FUN_0800295c",
            "FUN_08003380",
            "FUN_08005686",
            "FUN_08004110",
            "FUN_08005320",
            "FUN_08000ee0",
            "FUN_080015bc",
            "FUN_08000f4e",
            "FUN_08003948",
            "FUN_0800458c",
            "FUN_0800066c",
            "FUN_080042e8",
            "FUN_080038d0",
            "FUN_0800410c",
            "FUN_0800260c",
            "FUN_08004240",
            "FUN_08005690",
            "FUN_080041bc",
            "FUN_08004364",
            "FUN_08004004",
            "FUN_08000e3c",
            "FUN_080037ac",
            "FUN_08002864",
            "FUN_0800459a",
            "FUN_08003958",
            "FUN_0800314e",
            "FUN_08004808",
            "FUN_08000f72",
            "FUN_08001d00",
            "FUN_080037c0",
            "FUN_0800382c"
        ],
        [
            "FUN_08004fdc",
            "FUN_08005760",
            "FUN_080055d0",
            "FUN_080040ec",
            "FUN_08004860",
            "FUN_08004622",
            "FUN_08000d8e",
            "FUN_08004638",
            "FUN_08000600",
            "FUN_08000de4",
            "FUN_080047c0",
            "FUN_08000682",
            "FUN_0800532c",
            "FUN_0800447c"
        ]
    ],
    "locked_functions": []
}