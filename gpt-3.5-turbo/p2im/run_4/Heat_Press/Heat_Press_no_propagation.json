{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "set_flag_if_unset_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 setFlagIfUnset_000800f4(undefined4 input)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "set_flag_if_unset_000800f4",
                "param_1": "input"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_data_00080164",
            "code": "\nvoid initializeData_00080164(int **dataPointer)\n\n{\n  int returnValue;\n  \n  *dataPointer = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte *)((int)dataPointer + 6)) {\n    FUN_00081210(*(byte *)((int)dataPointer + 6),1);\n    FUN_00081318(*(undefined *)((int)dataPointer + 6),0);\n  }\n  do {\n    returnValue = (**(code **)(**dataPointer + 0xc))();\n  } while (-1 < returnValue);\n  *(undefined *)((int)dataPointer + 0x49) = 0;\n  *(undefined *)((int)dataPointer + 0x4a) = 0;\n  *(undefined2 *)(dataPointer + 0x15) = 0;\n  *(undefined2 *)((int)dataPointer + 0x52) = 0;\n  *(undefined2 *)(dataPointer + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_data_00080164",
                "param_1": "dataPointer",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_000804a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801b0": {
            "entrypoint": "0x000801b0",
            "current_name": "process_data_000801b0",
            "code": "\nint processData_000801b0(int **inputData)\n\n{\n  bool isOverflow;\n  undefined value;\n  char count;\n  int result;\n  byte temp;\n  \n  if (1 < *(byte *)((int)inputData + 6)) {\n    FUN_00081318(*(byte *)((int)inputData + 6),0);\n  }\n  isOverflow = false;\n  *(undefined *)((int)inputData + 0x49) = 0;\n  if (*(byte *)((int)inputData + 5) < 4) {\n    while (result = (**(code **)(**inputData + 8))(), result != 0) {\n      temp = *(byte *)((int)inputData + 0x49);\n      value = (**(code **)(**inputData + 0xc))();\n      count = *(char *)((int)inputData + 0x49);\n      *(undefined *)((int)inputData + temp + 9) = value;\n      temp = count + 1;\n      *(byte *)((int)inputData + 0x49) = temp;\n      if (0x3f < temp) {\n        isOverflow = true;\n      }\n    }\n  }\n  *(short *)(inputData + 0x14) = *(short *)(inputData + 0x14) + 1;\n  if (isOverflow) {\n    count = -3;\n    *(short *)(inputData + 0x15) = *(short *)(inputData + 0x15) + 1;\n  }\n  else {\n    count = *(char *)((int)inputData + 0x49);\n  }\n  return (int)count;\n}\n\n",
            "renaming": {
                "FUN_000801b0": "process_data_000801b0",
                "param_1": "inputData",
                "bVar1": "isOverflow",
                "uVar2": "value",
                "cVar3": "count",
                "iVar4": "result",
                "bVar5": "temp"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008021c": {
            "entrypoint": "0x0008021c",
            "current_name": "calculate_checksum_0008021c",
            "code": "\nuint calculateChecksum_0008021c(int dataAddress,uint dataLength)\n\n{\n  int currentIndex;\n  uint checksum;\n  char bitCount;\n  uint bitValue;\n  \n  checksum = 0xffff;\n  for (currentIndex = dataAddress; (currentIndex - dataAddress & 0xffU) < dataLength; currentIndex = currentIndex + 1) {\n    checksum = checksum ^ *(byte *)(currentIndex + 9);\n    bitCount = '\\b';\n    do {\n      bitValue = checksum & 1;\n      checksum = checksum >> 1;\n      if (bitValue != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bitCount = bitCount + -1;\n    } while (bitCount != '\\0');\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "dataAddress",
                "param_2": "dataLength",
                "iVar1": "currentIndex",
                "uVar2": "checksum",
                "cVar3": "bitCount",
                "uVar4": "bitValue"
            },
            "calling": [
                "FUN_00080258"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080258": {
            "entrypoint": "0x00080258",
            "current_name": "update_parameter_value_00080258",
            "code": "\nvoid updateParameterValue_00080258(int **parameterList,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  byte currentValue;\n  undefined2 updatedValue;\n  int result;\n  uint byteValue;\n  \n  currentValue = *(byte *)((int)parameterList + 0x49);\n  byteValue = (uint)currentValue;\n  updatedValue = FUN_0008021c(parameterList,byteValue,value2,value3,value3);\n  *(char *)((int)parameterList + byteValue + 9) = (char)((ushort)updatedValue >> 8);\n  *(char *)((int)parameterList + (byteValue + 1 & 0xff) + 9) = (char)updatedValue;\n  *(byte *)((int)parameterList + 0x49) = currentValue + 2;\n  if (1 < *(byte *)((int)parameterList + 6)) {\n    FUN_00081318(*(byte *)((int)parameterList + 6),1);\n  }\n  if (*(byte *)((int)parameterList + 5) < 4) {\n    (**(code **)(**parameterList + 4))(*parameterList,(int)parameterList + 9,*(undefined *)((int)parameterList + 0x49));\n  }\n  if (1 < *(byte *)((int)parameterList + 6)) {\n    FUN_00081318(*(byte *)((int)parameterList + 6),0);\n  }\n  if (*(byte *)((int)parameterList + 5) < 4) {\n    do {\n      result = (**(code **)(**parameterList + 0xc))();\n    } while (-1 < result);\n  }\n  *(undefined *)((int)parameterList + 0x49) = 0;\n  result = thunk_FUN_00081714();\n  parameterList[0x17] = (int *)(result + (uint)*(ushort *)((int)parameterList + 0x56));\n  *(short *)((int)parameterList + 0x52) = *(short *)((int)parameterList + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080258": "update_parameter_value_00080258",
                "param_1": "parameterList",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "bVar1": "currentValue",
                "uVar2": "updatedValue",
                "iVar3": "result",
                "uVar4": "byteValue"
            },
            "calling": [
                "FUN_000802da"
            ],
            "called": [
                "FUN_0008021c",
                "FUN_00081318",
                "thunk_FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000802da": {
            "entrypoint": "0x000802da",
            "current_name": "validate_and_configure_000802da",
            "code": "\nint validate_and_configure_000802da(int config_ptr,uint value_1,uint value_2,ushort *data_ptr)\n\n{\n  char result;\n  byte byte_value;\n  undefined temp_value;\n  ushort temp_ushort;\n  uint temp_uint;\n  ushort *temp_ptr;\n  undefined value_1_low_byte;\n  undefined value_1_high_byte;\n  ushort value_2_ushort;\n  \n  value_1_low_byte = (undefined)value_1;\n  value_1_high_byte = (undefined)(value_1 >> 8);\n  value_2_ushort = (ushort)value_2;\n  temp_uint = value_2 & 0xffff;\n  if (*(char *)(config_ptr + 4) != '\\0') {\n    result = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(config_ptr + 7) != '\\0') {\n    result = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((value_1 & 0xff) - 1 & 0xff)) {\n    result = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(config_ptr + 9) = value_1_low_byte;\n  *(undefined *)(config_ptr + 10) = value_1_high_byte;\n  *(ushort **)(config_ptr + 0x4c) = data_ptr;\n  *(char *)(config_ptr + 0xb) = (char)(value_1 >> 0x18);\n  *(char *)(config_ptr + 0xc) = (char)(value_1 >> 0x10);\n  temp_value = (undefined)(value_2 >> 8);\n  switch(value_1_high_byte) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(config_ptr + 0xd) = temp_value;\n    break;\n  case 5:\n    temp_ushort = *data_ptr;\n    if (temp_ushort != 0) {\n      temp_ushort = 1;\n    }\n    *(char *)(config_ptr + 0xd) = -(char)temp_ushort;\n    temp_uint = 0;\n    break;\n  case 6:\n    *(char *)(config_ptr + 0xd) = (char)(*data_ptr >> 8);\n    temp_uint = (uint)*data_ptr;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    byte_value = (byte)(value_2_ushort >> 3) & 0xfe;\n    if ((value_2 & 0xf) != 0) {\n      byte_value = byte_value + 1;\n    }\n    *(char *)(config_ptr + 0xe) = (char)value_2;\n    *(undefined *)(config_ptr + 0xd) = temp_value;\n    *(byte *)(config_ptr + 0xf) = byte_value;\n    temp_value = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(config_ptr + 0xd) = temp_value;\n    *(char *)(config_ptr + 0xe) = (char)value_2;\n    data_ptr = data_ptr + -1;\n    *(char *)(config_ptr + 0xf) = (char)temp_uint * '\\x02';\n    *(undefined *)(config_ptr + 0x49) = 7;\n    temp_ptr = data_ptr + temp_uint;\n    while (data_ptr != temp_ptr) {\n      byte_value = *(byte *)(config_ptr + 0x49);\n      *(char *)(config_ptr + (uint)byte_value + 9) = (char)(data_ptr[1] >> 8);\n      temp_uint = byte_value + 1 & 0xff;\n      *(char *)(config_ptr + 0x49) = (char)temp_uint;\n      data_ptr = data_ptr + 1;\n      *(char *)(temp_uint + config_ptr + 9) = (char)*data_ptr;\n      *(byte *)(config_ptr + 0x49) = byte_value + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(config_ptr + 0xe) = (char)temp_uint;\n  temp_value = 6;\nLAB_0008034a:\n  *(undefined *)(config_ptr + 0x49) = temp_value;\nswitchD_0008031e_caseD_7:\n  FUN_00080258(config_ptr);\n  *(undefined *)(config_ptr + 7) = 1;\n  result = '\\0';\nLAB_000803cc:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_000802da": "validate_and_configure_000802da",
                "param_1": "config_ptr",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "data_ptr",
                "cVar1": "result",
                "bVar2": "byte_value",
                "uVar3": "temp_value",
                "uVar4": "temp_ushort",
                "uVar5": "temp_uint",
                "puVar6": "temp_ptr",
                "local_1c": "value_1_low_byte",
                "local_1b": "value_1_high_byte",
                "local_18": "value_2_ushort"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00080258"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803d4": {
            "entrypoint": "0x000803d4",
            "current_name": "check_value_and_update_counter_000803d4",
            "code": "\nundefined4 checkValueAndUpdateCounter_000803d4(int inputValue)\n\n{\n  int index;\n  \n  if ((int)((uint)*(byte *)(inputValue + 10) << 0x18) < 0) {\n    *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if ((&DAT_00084d10)[index] == *(byte *)(inputValue + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000803d4": "check_value_and_update_counter_000803d4",
                "param_1": "inputValue",
                "iVar1": "index"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080410": {
            "entrypoint": "0x00080410",
            "current_name": "process_data_00080410",
            "code": "\nvoid processData_00080410(int dataPointer,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 result;\n  int offset;\n  byte counter;\n  uint byteIndex;\n  int valueIndex;\n  \n  counter = 0;\n  while( true ) {\n    byteIndex = (uint)counter;\n    counter = counter + 1;\n    if (*(byte *)(dataPointer + 0xb) >> 1 <= byteIndex) break;\n    offset = (byteIndex * 2 + 3 & 0xff) + dataPointer;\n    valueIndex = *(int *)(dataPointer + 0x4c);\n    result = FUN_000815f8(*(undefined *)(offset + 9),*(undefined *)(offset + 10),offset,\n                         *(byte *)(dataPointer + 0xb),param4);\n    *(undefined2 *)(valueIndex + byteIndex * 2) = result;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080410": "process_data_00080410",
                "param_1": "dataPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "iVar2": "offset",
                "bVar3": "counter",
                "uVar4": "byteIndex",
                "iVar5": "valueIndex"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_000815f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008043e": {
            "entrypoint": "0x0008043e",
            "current_name": "check_parameter_0008043e",
            "code": "\nint checkParameter_0008043e(int **param)\n\n{\n  char result;\n  uint returnValue;\n  int *thunkResult;\n  int functionResult;\n  uint paramValue;\n  \n  if (*(byte *)((int)param + 5) < 4) {\n    returnValue = (**(code **)(**param + 8))();\n    paramValue = returnValue & 0xff;\n  }\n  thunkResult = (int *)thunk_FUN_00081714();\n  if (param[0x17] < thunkResult) {\n    *(undefined *)(param + 2) = 0xff;\n    *(undefined *)((int)param + 7) = 0;\n    *(short *)(param + 0x15) = *(short *)(param + 0x15) + 1;\n  }\n  else if (7 < paramValue) {\n    FUN_000801b0(param);\n    functionResult = FUN_000803d4(param);\n    if (functionResult == 0) {\n      if (*(byte *)((int)param + 10) - 3 < 2) {\n        FUN_00080410(param);\n      }\n      *(undefined *)((int)param + 7) = 0;\n      result = *(char *)((int)param + 0x49);\n    }\n    else {\n      *(undefined *)((int)param + 7) = 0;\n      result = (char)functionResult;\n    }\n    goto LAB_000804a2;\n  }\n  result = '\\0';\nLAB_000804a2:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_0008043e": "check_parameter_0008043e",
                "param_1": "param",
                "cVar1": "result",
                "uVar2": "returnValue",
                "piVar3": "thunkResult",
                "iVar4": "functionResult",
                "unaff_r6": "paramValue"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "thunk_FUN_00081714",
                "FUN_00080410",
                "FUN_000803d4",
                "FUN_000801b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000804a8": {
            "entrypoint": "0x000804a8",
            "current_name": "initialize_system_000804a8",
            "code": "\nundefined8 initializeSystem_000804a8(void)\n\n{\n  int result;\n  \n  FUN_00081210(1,0);\n  FUN_00081210(6,1);\n  FUN_00081210(0,1);\n  FUN_00081210(1,1);\n  FUN_00081318(0,0);\n  FUN_00081318(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  FUN_00080164(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = thunk_FUN_00081714();\n  result = thunk_FUN_00081714();\n  DAT_200709e0 = result + 1000;\n  result = thunk_FUN_00081714();\n  DAT_20070a48 = result + 1000;\n  result = thunk_FUN_00081714();\n  DAT_20070934 = result + 1000;\n  result = thunk_FUN_00081714();\n  DAT_200708c0 = result + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000804a8": "initialize_system_000804a8",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_00081210",
                "FUN_00080164"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805d0": {
            "entrypoint": "0x000805d0",
            "current_name": "calculate_metrics_000805d0",
            "code": "\n\n\nvoid calculateMetrics_000805d0(void)\n\n{\n  uint thunkResult;\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  int index;\n  uint *ptrVar1;\n  undefined4 *ptrVar2;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    thunkResult = thunk_FUN_00081714();\n    if (DAT_200708c8 < thunkResult) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = FUN_00081894(DAT_200708d8);\n      DAT_2007094c = FUN_0008189c(DAT_200708da / 10);\n      DAT_200709c4 = FUN_00081894(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n    }\n    break;\n  case '\\x03':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      ptrVar2 = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      FUN_000802da(&DAT_200709e4,*ptrVar2,ptrVar2[1],ptrVar2[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    FUN_0008043e(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      ptrVar2 = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = thunk_FUN_00081714();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    ptrVar1 = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *ptrVar1 = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (thunkResult = thunk_FUN_00081714(), DAT_200708c0 < thunkResult))\n    {\n      DAT_20070960 = DAT_20070960 + 1;\n      index = thunk_FUN_00081714();\n      DAT_200708c0 = index + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      thunkResult = thunk_FUN_00081714();\n      if (DAT_200708c0 < thunkResult) {\n        DAT_2007090c = DAT_2007090c + 1;\n        index = thunk_FUN_00081714();\n        DAT_200708c0 = index + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        ptrVar1 = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      thunkResult = thunk_FUN_00081714();\n      if (DAT_200708c0 < thunkResult) {\n        DAT_2007090c = DAT_2007090c + 1;\n        index = thunk_FUN_00081714();\n        DAT_200708c0 = index + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  thunkResult = thunk_FUN_00081714();\n  if (DAT_200709e0 < thunkResult) {\n    result1 = FUN_0008189c(DAT_20070940);\n    result2 = FUN_00081730(result1,DAT_200709c8);\n    result1 = DAT_200708c4;\n    DAT_20070930 = result2;\n    result3 = FUN_00081734(result2,DAT_200708c4);\n    result3 = FUN_00081944(result3,DAT_2007094c);\n    result3 = FUN_00081734(result3,DAT_20070914);\n    DAT_2007094c = result3;\n    result1 = FUN_00081730(result2,result1);\n    result1 = FUN_00081944(result1,DAT_200709c4);\n    result1 = FUN_00081730(result1,DAT_2007096c);\n    DAT_200709c4 = result1;\n    result4 = FUN_00081944(result2,DAT_20070a4c);\n    result4 = FUN_00081734(result4,result3);\n    FUN_00081734(result4,result1);\n    DAT_20070910 = FUN_00081cd0();\n    DAT_2007091c = FUN_0008189c();\n    DAT_2007092c = 0;\n    DAT_200708c4 = result2;\n    DAT_20070914 = result3;\n    DAT_2007096c = result1;\n    index = thunk_FUN_00081714();\n    DAT_200709e0 = index + DAT_20070970;\n  }\n  result1 = FUN_0008189c(DAT_20070970);\n  index = FUN_00081ca8(DAT_2007091c,result1);\n  if (index != 0) {\n    DAT_2007091c = result1;\n  }\n  index = FUN_00081c94(DAT_2007091c,0);\n  if (index != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = FUN_00081d1c(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805d0": "calculate_metrics_000805d0",
                "uVar1": "thunkResult",
                "uVar2": "result1",
                "uVar3": "result2",
                "uVar4": "result3",
                "uVar5": "result4",
                "iVar6": "index",
                "puVar7": "ptrVar1",
                "puVar8": "ptrVar2"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081734",
                "FUN_00081d1c",
                "FUN_00081944",
                "thunk_FUN_00081714",
                "FUN_000802da",
                "FUN_00081c94",
                "FUN_0008043e",
                "FUN_00081cd0",
                "FUN_00081894",
                "FUN_00081730",
                "FUN_00081ca8",
                "FUN_0008189c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a68": {
            "entrypoint": "0x00080a68",
            "current_name": "initialize_data_00080a68",
            "code": "\nvoid initializeData_00080a68(void)\n\n{\n  FUN_00081682(&DAT_20070954,\"\");\n  FUN_00081d5c(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a68": "initialize_data_00080a68"
            },
            "calling": [],
            "called": [
                "FUN_00081682",
                "FUN_00081d5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "FUNC_00080aa8",
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ab8": {
            "entrypoint": "0x00080ab8",
            "current_name": "FUNC_00080ab8",
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aba": {
            "entrypoint": "0x00080aba",
            "current_name": "FUNC_00080aba",
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080abc": {
            "entrypoint": "0x00080abc",
            "current_name": "FUNC_00080abc",
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ae4": {
            "entrypoint": "0x00080ae4",
            "current_name": "initialize_system_00080ae4",
            "code": "\n\n\nvoid initializeSystem_00080ae4(void)\n\n{\n  int index;\n  int nextIndex;\n  \n  FUN_00080e9c();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  FUN_00081d7c();\n  index = 0;\n  do {\n    nextIndex = index + 1;\n    FUN_00081318(index,0);\n    index = nextIndex;\n  } while (nextIndex != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  FUN_00080da0(0x400e0e00,1,0x300,0);\n  FUN_00081318(0,1);\n  FUN_00080da0(0x400e0e00,1,0xc00,0);\n  FUN_00080da0(0x400e0e00,1,0x3000,0);\n  FUN_00080da0(0x400e1400,2,0x30,0);\n  FUN_00080da0(0x400e1000,1,0xc00,0);\n  FUN_00080da0(0x400e0e00,1,3,0);\n  FUN_00080da0(0x400e1000,1,0xc000,0);\n  FUN_00080e18(0x25);\n  FUN_00080f9c(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  FUN_00081042(0x400c0000,0,0x300000,1);\n  FUN_00081034(0x400c0000,0,0);\n  FUN_0008106e(0x400c0000,0xffffffff);\n  FUN_00081066(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ae4": "initialize_system_00080ae4",
                "iVar1": "index",
                "iVar2": "nextIndex"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080e18",
                "FUN_00081066",
                "FUN_00081034",
                "FUN_00081318",
                "FUN_00080e9c",
                "FUN_00080da0",
                "FUN_00081d7c",
                "FUN_0008106e",
                "FUN_00080f9c",
                "FUN_00081042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "entrypoint": "0x00080c0c",
            "current_name": "initialize_binary_data_00080c0c",
            "code": "\nvoid initializeBinaryData_00080c0c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  FUN_000813a8(&DAT_20070b84);\n  FUN_000813a8(&DAT_20070ad8);\n  FUN_000814e4(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,param3);\n  FUN_000813a8(&DAT_20070de4);\n  FUN_000813a8(&DAT_20070e6c);\n  FUN_000813a8(&DAT_20070ef4);\n  FUN_000813a8(&DAT_20070a50);\n  FUN_000813a8(&DAT_20070c84);\n  FUN_000813a8(&DAT_20070d0c);\n  FUN_000815d4(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  FUN_000815d4(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  FUN_000815d4(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080c0c": "initialize_binary_data_00080c0c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [],
            "called": [
                "FUN_000815d4",
                "FUN_000813a8",
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "entrypoint": "0x00080ce0",
            "current_name": "check_and_invoke_functions_00080ce0",
            "code": "\nvoid checkAndInvokeFunctions_00080ce0(void)\n\n{\n  int result;\n  \n  result = FUN_000813e4(&DAT_20070b60);\n  if (result != 0) {\n    FUNC_00080aa8();\n  }\n  result = FUN_000813e4(&DAT_20070c0c);\n  if (result != 0) {\n    FUNC_00080ab8();\n  }\n  result = FUN_000813e4(&DAT_20070c34);\n  if (result != 0) {\n    FUNC_00080aba();\n  }\n  result = FUN_000813e4(&DAT_20070c5c);\n  if (result != 0) {\n    FUNC_00080abc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ce0": "check_and_invoke_functions_00080ce0",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080aba",
                "FUN_00080abc",
                "FUN_000813e4",
                "FUN_00080aa8",
                "FUN_00080ab8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "entrypoint": "0x00080d2e",
            "current_name": "update_param_00080d2e",
            "code": "\nvoid updateParam_00080d2e(int baseAddress,undefined4 option,uint value)\n\n{\n  uint result;\n  \n  *(uint *)(baseAddress + 0x44) = value;\n  switch(option) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    result = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~value;\n    break;\n  case 2:\n    result = *(uint *)(baseAddress + 0x70) | value;\n    break;\n  default:\n    goto defaultCase;\n  }\n  *(uint *)(baseAddress + 0x70) = result;\ndefaultCase:\n  *(uint *)(baseAddress + 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d2e": "update_param_00080d2e",
                "param_1": "baseAddress",
                "param_2": "option",
                "param_3": "value",
                "uVar1": "result",
                "switchD_00080d34_caseD_6": "defaultCase"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d54": {
            "entrypoint": "0x00080d54",
            "current_name": "update_params_00080d54",
            "code": "\nvoid updateParams_00080d54(undefined4 *paramsArray,undefined4 newValue,uint flags)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(flags << 0x1f) < 0;\n  paramsArray[0x11] = newValue;\n  if (isNegative) {\n    paramsArray[0x19] = newValue;\n  }\n  if (!isNegative) {\n    paramsArray[0x18] = newValue;\n  }\n  isNegative = (flags & 10) != 0;\n  if (isNegative) {\n    paramsArray[8] = newValue;\n  }\n  if (!isNegative) {\n    paramsArray[9] = newValue;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    paramsArray[0x20] = newValue;\n  }\n  paramsArray[5] = newValue;\n  *paramsArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d54": "update_params_00080d54",
                "param_1": "paramsArray",
                "param_2": "newValue",
                "param_3": "flags",
                "bVar1": "isNegative"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "entrypoint": "0x00080d7a",
            "current_name": "set_values_00080d7a",
            "code": "\nvoid setValues_00080d7a(undefined4 *ptrArray,undefined4 newValue,int condition_1,int condition_2,int condition_3)\n\n{\n  ptrArray[0x11] = newValue;\n  if (condition_3 == 0) {\n    ptrArray[0x18] = newValue;\n  }\n  else {\n    ptrArray[0x19] = newValue;\n  }\n  if (condition_2 == 0) {\n    ptrArray[0x15] = newValue;\n  }\n  else {\n    ptrArray[0x14] = newValue;\n  }\n  if (condition_1 == 0) {\n    ptrArray[0xd] = newValue;\n  }\n  else {\n    ptrArray[0xc] = newValue;\n  }\n  ptrArray[4] = newValue;\n  *ptrArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d7a": "set_values_00080d7a",
                "param_1": "ptrArray",
                "param_2": "newValue",
                "param_3": "condition_1",
                "param_4": "condition_2",
                "param_5": "condition_3"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080da0": {
            "entrypoint": "0x00080da0",
            "current_name": "update_data_00080da0",
            "code": "\nundefined4 updateData_00080da0(int dataPtr,int type,undefined4 value,uint flag)\n\n{\n  bool isNegative;\n  \n  switch(type) {\n  case 1:\n  case 2:\n    FUN_00080d2e(dataPtr,type,value);\n    isNegative = (int)(flag << 0x1f) < 0;\n    *(undefined4 *)(dataPtr + 0x44) = value;\n    if (isNegative) {\n      *(undefined4 *)(dataPtr + 100) = value;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(dataPtr + 0x60) = value;\n    }\n    break;\n  case 3:\n    FUN_00080d54(dataPtr,value,flag,0x80d55,dataPtr);\n    break;\n  case 4:\n  case 5:\n    FUN_00080d7a(dataPtr,value,type == 5,(flag << 0x1d) >> 0x1f,flag & 1,type,value)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080da0": "update_data_00080da0",
                "param_1": "dataPtr",
                "param_2": "type",
                "param_3": "value",
                "param_4": "flag",
                "bVar1": "isNegative"
            },
            "calling": [
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00080d54",
                "FUN_00080d2e",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e04": {
            "entrypoint": "0x00080e04",
            "current_name": "check_if_bits_set_00080e04",
            "code": "\nuint checkIfBitsSet_00080e04(int inputPtr,uint flags)\n\n{\n  uint result;\n  \n  result = *(uint *)(inputPtr + 8) & flags;\n  if (result != 0) {\n    if ((flags & *(uint *)(inputPtr + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080e04": "check_if_bits_set_00080e04",
                "param_1": "inputPtr",
                "param_2": "flags",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081318"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e18": {
            "entrypoint": "0x00080e18",
            "current_name": "check_and_update_bits_00080e18",
            "code": "\n\n\nundefined4 check_and_update_bits_00080e18(uint value)\n\n{\n  uint bit_mask;\n  \n  if (value < 0x2d) {\n    if (value < 0x20) {\n      bit_mask = 1 << (value & 0xff);\n      if ((bit_mask & _DAT_400e0618) != bit_mask) {\n        _DAT_400e0610 = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (value - 0x20 & 0xff);\n      if ((bit_mask & _DAT_400e0708) != bit_mask) {\n        _DAT_400e0700 = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e18": "check_and_update_bits_00080e18",
                "param_1": "value",
                "uVar1": "bit_mask"
            },
            "calling": [
                "FUN_00081508",
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "entrypoint": "0x00080e9c",
            "current_name": "initialize_memory_00080e9c",
            "code": "\n\n\nvoid initializeMemory_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  elfRelocationOffset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e9c": "initialize_memory_00080e9c",
                "Elf32_Rel_ARRAY_20070000[6].r_offset": "elfRelocationOffset"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080f24",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_2007089c\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_0008588c + iVar1);\n  }\n  for (puVar2 = &DAT_2007089c; puVar2 < (undefined4 *)0x200711c0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  FUN_000816a8();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000816a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "entrypoint": "0x00080f9c",
            "current_name": "calculate_index_00080f9c",
            "code": "\nundefined4 calculateIndex_00080f9c(undefined4 *output,uint inputLength,int factor,int multiplier)\n\n{\n  uint quotient;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *output = 1;\n  output[1] = 0;\n  output[0x48] = 0x202;\n  output[0x41] = 0;\n  output[0x45] = 0;\n  quotient = inputLength / (uint)(factor * 2);\n  if (inputLength == factor * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(multiplier * (int)(((ulonglong)inputLength / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      output[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | output[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080f9c": "calculate_index_00080f9c",
                "param_1": "output",
                "param_2": "inputLength",
                "param_3": "factor",
                "param_4": "multiplier",
                "local_58": "thresholds",
                "uVar1": "quotient",
                "uVar2": "index"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081034": {
            "entrypoint": "0x00081034",
            "current_name": "update_parameters_00081034",
            "code": "\nvoid updateParameters_00081034(int ptr,uint value1,uint value2)\n\n{\n  *(uint *)(ptr + 4) = value1 | *(uint *)(ptr + 4) | (value2 & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081034": "update_parameters_00081034",
                "param_1": "ptr",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081042": {
            "entrypoint": "0x00081042",
            "current_name": "apply_bitwise_operations_00081042",
            "code": "\nvoid applyBitwiseOperations_00081042(int dataAddress,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(dataAddress + 4) =\n       value2 | *(uint *)(dataAddress + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081042": "apply_bitwise_operations_00081042",
                "param_1": "dataAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008105c": {
            "entrypoint": "0x0008105c",
            "current_name": "set_bit_at_offset_0008105c",
            "code": "\nvoid setBitAtOffset_0008105c(int baseAddress,uint offset)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (offset & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008105c": "set_bit_at_offset_0008105c",
                "param_1": "baseAddress",
                "param_2": "offset"
            },
            "calling": [
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081066": {
            "entrypoint": "0x00081066",
            "current_name": "initialize_value_00081066",
            "code": "\nvoid initializeValue_00081066(int baseAddress)\n\n{\n  *(undefined4 *)(baseAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081066": "initialize_value_00081066",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008106e": {
            "entrypoint": "0x0008106e",
            "current_name": "set_param_value_0008106e",
            "code": "\nvoid setParamValue_0008106e(int objectAddress,undefined4 newValue)\n\n{\n  *(undefined4 *)(objectAddress + 0x28) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008106e": "set_param_value_0008106e",
                "param_1": "objectAddress",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081184": {
            "entrypoint": "0x00081184",
            "current_name": "initialize_data_00081184",
            "code": "\nvoid initializeData_00081184(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081184": "initialize_data_00081184",
                "undefined4": "void"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008118c": {
            "entrypoint": "0x0008118c",
            "current_name": "calculate_updated_value_0008118c",
            "code": "\nint calculateUpdatedValue_0008118c(int inputValue)\n\n{\n  int previousValue;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  previousValue = DAT_20071180;\n  DAT_20071180 = inputValue + DAT_20071180;\n  return previousValue;\n}\n\n",
            "renaming": {
                "FUN_0008118c": "calculate_updated_value_0008118c",
                "param_1": "inputValue",
                "iVar1": "previousValue"
            },
            "calling": [
                "FUN_00082970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ae": {
            "entrypoint": "0x000811ae",
            "current_name": "get_negative_one_000811ae",
            "code": "\nundefined4 getNegativeOne_000811ae(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000811ae": "get_negative_one_000811ae"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b4": {
            "entrypoint": "0x000811b4",
            "current_name": "set_page_size_000811b4",
            "code": "\nundefined4 setPageSize_000811b4(undefined4 result,int buffer)\n\n{\n  *(undefined4 *)(buffer + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811b4": "set_page_size_000811b4",
                "param_1": "result",
                "param_2": "buffer"
            },
            "calling": [
                "FUN_000846b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811be": {
            "entrypoint": "0x000811be",
            "current_name": "check_return_value_000811be",
            "code": "\nbool check_return_value_000811be(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000811be": "check_return_value_000811be",
                "undefined4": "bool"
            },
            "calling": [
                "FUN_000846dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c2": {
            "entrypoint": "0x000811c2",
            "current_name": "initialize_program_000811c2",
            "code": "\nundefined4 initialize_program_000811c2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c2": "initialize_program_000811c2"
            },
            "calling": [
                "FUN_00084700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c6": {
            "entrypoint": "0x000811c6",
            "current_name": "get_return_value_000811c6",
            "code": "\nundefined4 getReturnValue_000811c6(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c6": "get_return_value_000811c6"
            },
            "calling": [
                "FUN_00084728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811cc": {
            "entrypoint": "0x000811cc",
            "current_name": "copy_bytes_000811cc",
            "code": "\n\n\nuint copyBytes_000811cc(undefined4 param1,int data,uint length)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)length; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(data + index);\n  }\n  return length & ~((int)length >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_000811cc": "copy_bytes_000811cc",
                "param_1": "param1",
                "param_2": "data",
                "param_3": "length",
                "iVar1": "index"
            },
            "calling": [
                "FUN_00084464"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00081714": {
            "entrypoint": "0x00081208",
            "current_name": "get_data_value_thunk_00081714",
            "code": "\nundefined4 get_data_value_thunk_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "thunk_FUN_00081714": "get_data_value_thunk_00081714"
            },
            "calling": [
                "FUN_0008043e",
                "FUN_000804a8",
                "FUN_000805d0",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008120c": {
            "entrypoint": "0x0008120c",
            "current_name": "FUNC_0008120c",
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081210": {
            "entrypoint": "0x00081210",
            "current_name": "process_data_00081210",
            "code": "\n\n\nint processData_00081210(int index,int option)\n\n{\n  int result;\n  uint value;\n  undefined4 flag;\n  uint mask;\n  byte lowerNibble;\n  byte fullByte;\n  int offset;\n  int pointer;\n  \n  result = index;\n  if ((&DAT_00084d24)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[index] & 0xf) == 4) {\n      result = FUN_0008105c(0x400c0000,(&DAT_00084d31)[index * 0x1c]);\n    }\n    fullByte = (&DAT_20070d94)[index];\n    lowerNibble = fullByte & 0xf;\n    if ((lowerNibble < 3) && (fullByte != 0)) {\n      if (lowerNibble == 2) {\n        if (option == 0) {\n          return result;\n        }\n      }\n      else if (lowerNibble == 1) {\n        if (option == 2) {\n          return result;\n        }\n      }\n      else if (lowerNibble == 3) {\n        if (option == 1) {\n          return result;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (option != 1) {\nLAB_0008126c:\n      if (option == 0) {\n        result = index * 0x1c;\n        FUN_00080e18(*(undefined4 *)(&DAT_00084d20 + result));\n        result = FUN_00080da0(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),0);\n        fullByte = (&DAT_20070d94)[index] & 0xf0 | 2;\n      }\n      else {\n        if (option != 2) {\n          return result;\n        }\n        result = index * 0x1c;\n        FUN_00080e18(*(undefined4 *)(&DAT_00084d20 + result));\n        result = FUN_00080da0(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),1);\n        fullByte = (&DAT_20070d94)[index] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[index] = fullByte;\n      return result;\n    }\n    offset = index * 0x1c;\n    pointer = *(int *)(&DAT_00084d18 + offset);\n    if (fullByte >> 4 == 0) {\n      flag = 4;\n    }\n    else {\n      flag = 5;\n    }\n    result = FUN_00080da0(pointer,flag,*(undefined4 *)(&DAT_00084d1c + offset),\n                         *(undefined4 *)(&DAT_00084d28 + offset));\n    (&DAT_20070d94)[index] = (&DAT_20070d94)[index] & 0xf0 | 3;\n    if (*(int *)(pointer + 0x18) == -1) {\n      value = *(uint *)(&DAT_00084d20 + offset);\n      if (0x2c < value) {\n        return 1;\n      }\n      if (value < 0x20) {\n        value = 1 << (value & 0xff);\n        mask = _DAT_400e0618 & value;\n        if (mask == value) {\n          _DAT_400e0614 = mask;\n        }\n      }\n      else {\n        value = 1 << (value - 0x20 & 0xff);\n        mask = _DAT_400e0708 & value;\n        if (mask == value) {\n          _DAT_400e0704 = mask;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081210": "process_data_00081210",
                "param_1": "index",
                "param_2": "option",
                "iVar1": "result",
                "uVar2": "value",
                "uVar3": "flag",
                "uVar4": "mask",
                "bVar5": "lowerNibble",
                "bVar6": "fullByte",
                "iVar7": "offset",
                "iVar8": "pointer"
            },
            "calling": [
                "FUN_00081318",
                "FUN_000804a8",
                "FUN_00080164"
            ],
            "called": [
                "FUN_00080e18",
                "FUN_0008105c",
                "FUN_00080da0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081318": {
            "entrypoint": "0x00081318",
            "current_name": "update_settings_00081318",
            "code": "\nvoid updateSettings_00081318(int index,int value,undefined4 param)\n\n{\n  int result;\n  undefined4 newValue;\n  int data;\n  \n  if ((&DAT_00084d24)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[index] & 0xf) == 5) {\n      FUN_00081210(index,1,param,5,index,value,param);\n    }\n    (&DAT_20070d94)[index] = (&DAT_20070d94)[index] & 0xf | (byte)(value << 4);\n    data = *(int *)(&DAT_00084d18 + index * 0x1c);\n    newValue = *(undefined4 *)(&DAT_00084d1c + index * 0x1c);\n    result = FUN_00080e04(data,newValue);\n    if (result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(data + 100) = newValue;\n        return;\n      }\n      *(undefined4 *)(data + 0x60) = newValue;\n      return;\n    }\n    FUN_00080d7a(data,newValue,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081318": "update_settings_00081318",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param",
                "iVar1": "result",
                "uVar2": "newValue",
                "iVar3": "data"
            },
            "calling": [
                "FUN_000804a8",
                "FUN_000801b0",
                "FUN_00080ae4",
                "FUN_00080164",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00080e04",
                "FUN_00081210",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081388": {
            "entrypoint": "0x00081388",
            "current_name": "check_and_execute_function_00081388",
            "code": "\nvoid checkAndExecuteFunction_00081388(void)\n\n{\n  if ((ptr_array[6].info != 0xffffffff) &&\n     (ptr_array[6].info = ptr_array[6].info - 1,\n     ptr_array[6].info == 0)) {\n    (*(function *)((int)&ptr_array[0].offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081388": "check_and_execute_function_00081388",
                "Elf32_Rel_ARRAY_20070000": "ptr_array",
                "r_info": "info",
                "r_offset": "offset",
                "code": "function"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813a8": {
            "entrypoint": "0x000813a8",
            "current_name": "initialize_memory_000813a8",
            "code": "\nint initializeMemory_000813a8(int memoryAddress)\n\n{\n  FUN_00082504(memoryAddress,0,0x80);\n  *(undefined4 *)(memoryAddress + 0x80) = 0;\n  *(undefined4 *)(memoryAddress + 0x84) = 0;\n  return memoryAddress;\n}\n\n",
            "renaming": {
                "FUN_000813a8": "initialize_memory_000813a8",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813c2": {
            "entrypoint": "0x000813c2",
            "current_name": "update_and_move_pointer_000813c2",
            "code": "\nvoid updateAndMovePointer_000813c2(int baseAddress,undefined newValue)\n\n{\n  uint offset;\n  \n  offset = *(int *)(baseAddress + 0x80) + 1U & 0x7f;\n  if (offset != *(uint *)(baseAddress + 0x84)) {\n    *(undefined *)(baseAddress + *(int *)(baseAddress + 0x80)) = newValue;\n    *(uint *)(baseAddress + 0x80) = offset;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813c2": "update_and_move_pointer_000813c2",
                "param_1": "baseAddress",
                "param_2": "newValue",
                "uVar1": "offset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "calculate_difference_000813e4",
            "code": "\nuint calculateDifference_000813e4(int input_value)\n\n{\n  return *(int *)(*(int *)(input_value + 0x10) + 0x80) - *(int *)(*(int *)(input_value + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081454": {
            "entrypoint": "0x00081454",
            "current_name": "update_data_00081454",
            "code": "\nundefined4 updateData_00081454(int dataPointer,undefined4 newValue)\n\n{\n  int offset;\n  uint newOffset;\n  \n  offset = *(int *)(dataPointer + 0x14);\n  if ((*(int *)(*(int *)(dataPointer + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(offset + 0x84) == *(int *)(offset + 0x80))) {\n    *(undefined4 *)(*(int *)(dataPointer + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    newOffset = *(int *)(offset + 0x80) + 1U & 0x8000007f;\n    if ((int)newOffset < 0) {\n      newOffset = (newOffset - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(offset + 0x84) == newOffset);\n    *(char *)(offset + *(int *)(offset + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataPointer + 0x14) + 0x80) = newOffset;\n    *(undefined4 *)(*(int *)(dataPointer + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081454": "update_data_00081454",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "iVar1": "offset",
                "uVar2": "newOffset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814e4": {
            "entrypoint": "0x000814e4",
            "current_name": "initialize_params_000814e4",
            "code": "\nvoid initializeParams_000814e4(undefined4 *parameters,undefined4 value2,undefined value3,undefined4 value4,\n                 undefined4 value5,undefined4 value6)\n\n{\n  initializedParam1 = 0;\n  initializedParam2 = 1000;\n  initializedParam6 = value2;\n  *parameters = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(parameters + 7) = value3;\n  initializedParam4 = value5;\n  initializedParam8 = value4;\n  initializedParam5 = value6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000814e4": "initialize_params_000814e4",
                "param_1": "parameters",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "param_5": "value5",
                "param_6": "value6",
                "param_1[1]": "initializedParam1",
                "param_1[2]": "initializedParam2",
                "param_1[6]": "initializedParam6",
                "param_1[4]": "initializedParam4",
                "param_1[8]": "initializedParam8",
                "param_1[5]": "initializedParam5"
            },
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081508": {
            "entrypoint": "0x00081508",
            "current_name": "initialize_function_00081508",
            "code": "\nvoid initializeFunction_00081508(int param1,uint param2,undefined4 param3)\n\n{\n  int intValue1;\n  undefined4 *pointerVar1;\n  \n  FUN_00080e18(*(undefined4 *)(param1 + 0x20));\n  pointerVar1 = *(undefined4 **)(param1 + 0x18);\n  pointerVar1[0x48] = 0x202;\n  *pointerVar1 = 0xac;\n  pointerVar1[1] = param3;\n  pointerVar1[8] = Elf32_Rel_ARRAY_20070000[6].r_offset / param2 >> 4;\n  pointerVar1[3] = 0xffffffff;\n  pointerVar1[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(param1 + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(param1 + 0x1c) & 0x1f);\n  intValue1 = *(int *)(param1 + 0x10);\n  *(undefined4 *)(intValue1 + 0x84) = 0;\n  *(undefined4 *)(intValue1 + 0x80) = 0;\n  intValue1 = *(int *)(param1 + 0x14);\n  *(undefined4 *)(intValue1 + 0x84) = 0;\n  *(undefined4 *)(intValue1 + 0x80) = 0;\n  *pointerVar1 = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081508": "initialize_function_00081508",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "intValue1",
                "puVar2": "pointerVar1"
            },
            "calling": [],
            "called": [
                "FUN_00080e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815d4": {
            "entrypoint": "0x000815d4",
            "current_name": "initialize_pointer_000815d4",
            "code": "\nundefined4 * initializePointer_000815d4(undefined4 *pointer,undefined4 value)\n\n{\n  FUN_000814e4();\n  *pointer = &PTR_FUN_00081454_1_000857d8;\n  pointer[9] = value;\n  return pointer;\n}\n\n",
            "renaming": {
                "FUN_000815d4": "initialize_pointer_000815d4",
                "param_1": "pointer",
                "param_2": "value"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815f8": {
            "entrypoint": "0x000815f8",
            "current_name": "combine_values_000815f8",
            "code": "\nuint combineValues_000815f8(int value1,uint value2)\n\n{\n  return value2 | value1 << 8;\n}\n\n",
            "renaming": {
                "FUN_000815f8": "combine_values_000815f8",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_00080410"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815fe": {
            "entrypoint": "0x000815fe",
            "current_name": "execute_preprocessing_000815fe",
            "code": "\nundefined4 * executePreprocessing_000815fe(undefined4 *inputData)\n\n{\n  FUN_00081e04(*inputData);\n  return inputData;\n}\n\n",
            "renaming": {
                "FUN_000815fe": "execute_preprocessing_000815fe",
                "param_1": "inputData"
            },
            "calling": [],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008160c": {
            "entrypoint": "0x0008160c",
            "current_name": "reset_param_0008160c",
            "code": "\nvoid resetParam_0008160c(int *param)\n\n{\n  if (*param != 0) {\n    FUN_00081e04();\n  }\n  *param = 0;\n  param[2] = 0;\n  param[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008160c": "reset_param_0008160c",
                "param_1": "param",
                "param_1[1]": "param[1]",
                "param_1[2]": "param[2]"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081622": {
            "entrypoint": "0x00081622",
            "current_name": "update_and_check_value_00081622",
            "code": "\nint updateAndCheckValue_00081622(int *valuePtr,int size,undefined4 arg1,undefined4 arg2)\n\n{\n  int result;\n  \n  result = FUN_000825a0(*valuePtr,size + 1,arg1,arg2,arg2);\n  if (result != 0) {\n    *valuePtr = result;\n    valuePtr[1] = size;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081622": "update_and_check_value_00081622",
                "param_1": "valuePtr",
                "param_2": "size",
                "param_3": "arg1",
                "param_4": "arg2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008163a"
            ],
            "called": [
                "FUN_000825a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008163a": {
            "entrypoint": "0x0008163a",
            "current_name": "validate_and_reset_0008163a",
            "code": "\nundefined4 validate_and_reset_0008163a(int *input_array,uint threshold)\n\n{\n  int result;\n  \n  if ((*input_array == 0) || ((uint)input_array[1] < threshold)) {\n    result = FUN_00081622(input_array);\n    if (result == 0) {\n      return 0;\n    }\n    if (input_array[2] == 0) {\n      *(undefined *)*input_array = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008163a": "validate_and_reset_0008163a",
                "param_1": "input_array",
                "param_2": "threshold",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008165c": {
            "entrypoint": "0x0008165c",
            "current_name": "handle_param_0008165c",
            "code": "\nundefined4 * handle_param_0008165c(undefined4 *param_array,undefined4 param_value1,undefined4 param_value2)\n\n{\n  int result;\n  \n  result = FUN_0008163a(param_array,param_value2);\n  if (result == 0) {\n    FUN_0008160c(param_array);\n  }\n  else {\n    param_array[2] = param_value2;\n    FUN_00082994(*param_array,param_value1);\n  }\n  return param_array;\n}\n\n",
            "renaming": {
                "FUN_0008165c": "handle_param_0008165c",
                "param_1": "param_array",
                "param_2": "param_value1",
                "param_3": "param_value2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00081682"
            ],
            "called": [
                "FUN_0008160c",
                "FUN_0008163a",
                "FUN_00082994"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081682": {
            "entrypoint": "0x00081682",
            "current_name": "initialize_array_00081682",
            "code": "\nundefined4 * initializeArray_00081682(undefined4 *array,int size)\n\n{\n  undefined4 result;\n  \n  *array = 0;\n  array[1] = 0;\n  array[2] = 0;\n  if (size != 0) {\n    result = FUN_00082a50(size);\n    FUN_0008165c(array,size,result);\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_00081682": "initialize_array_00081682",
                "param_1": "array",
                "param_2": "size",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [
                "FUN_0008165c",
                "FUN_00082a50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816a6": {
            "entrypoint": "0x000816a6",
            "current_name": "FUNC_000816a6",
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000816a8": {
            "entrypoint": "0x000816a8",
            "current_name": "run_main_loop_000816a8",
            "code": "\nvoid runMainLoop_000816a8(void)\n\n{\n  FUN_000816d4();\n  FUN_00080ae4();\n  FUNC_000816a6();\n  FUNC_0008120c(1);\n  FUN_000804a8();\n  do {\n    FUN_000805d0();\n    FUN_00080ce0();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816a8": "run_main_loop_000816a8"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_000804a8",
                "FUN_00080ce0",
                "FUN_00080ae4",
                "FUN_000805d0",
                "FUN_000816d4",
                "FUN_0008120c",
                "FUN_000816a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d4": {
            "entrypoint": "0x000816d4",
            "current_name": "initialize_memory_address_000816d4",
            "code": "\n\n\nvoid initializeMemoryAddress_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816d4": "initialize_memory_address_000816d4"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081714": {
            "entrypoint": "0x00081714",
            "current_name": "get_global_data_00081714",
            "code": "\nundefined4 getGlobalData_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "FUN_00081714": "get_global_data_00081714"
            },
            "calling": [
                "thunk_FUN_00081714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081730": {
            "entrypoint": "0x00081730",
            "current_name": "calculate_floating_point_00081730",
            "code": "\nuint calculate_floating_point_00081730(uint exponent,uint mantissa,undefined4 sign_bit,uint rounding_flag)\n\n{\n  int exponent_shift;\n  int shifted_exponent;\n  uint mantissa_complement;\n  uint shifted_mantissa;\n  uint shifted_result;\n  uint initial_shift;\n  uint shift_difference;\n  bool isEqualOrNegative;\n  \n  mantissa_complement = mantissa ^ 0x80000000;\n  shifted_result = exponent << 1;\n  isEqualOrNegative = shifted_result == 0;\n  if (!isEqualOrNegative) {\n    rounding_flag = mantissa << 1;\n    isEqualOrNegative = rounding_flag == 0;\n  }\n  if (!isEqualOrNegative) {\n    isEqualOrNegative = shifted_result == rounding_flag;\n  }\n  exponent_shift = (int)shifted_result >> 0x18;\n  if (!isEqualOrNegative) {\n    isEqualOrNegative = exponent_shift == -1;\n  }\n  if (!isEqualOrNegative) {\n    isEqualOrNegative = (int)rounding_flag >> 0x18 == -1;\n  }\n  if (isEqualOrNegative) {\n    shifted_exponent = (int)(mantissa << 1) >> 0x18;\n    if (exponent_shift == -1 || shifted_exponent == -1) {\n      shifted_result = mantissa_complement;\n      if (exponent_shift == -1) {\n        shifted_result = exponent;\n      }\n      if (exponent_shift != -1 || shifted_exponent != -1) {\n        mantissa_complement = shifted_result;\n      }\n      isEqualOrNegative = (shifted_result & 0x7fffff) == 0;\n      if (isEqualOrNegative) {\n        isEqualOrNegative = (mantissa_complement & 0x7fffff) == 0;\n      }\n      if (isEqualOrNegative) {\n        isEqualOrNegative = shifted_result == mantissa_complement;\n      }\n      if (!isEqualOrNegative) {\n        shifted_result = shifted_result | 0x400000;\n      }\n      result shifted_result;\n    }\n    if (((exponent ^ mantissa_complement) & 0x7fffffff) != 0) {\n      if (shifted_result == 0) {\n        exponent = mantissa_complement;\n      }\n      result exponent;\n    }\n    if (exponent != mantissa_complement) {\n      result 0;\n    }\n    if ((shifted_result & 0xff000000) == 0) {\n      mantissa_complement = exponent << 1;\n      if ((exponent & 0x80000000) != 0) {\n        mantissa_complement = mantissa_complement | 0x80000000;\n      }\n      result mantissa_complement;\n    }\n    if (shifted_result < 0xfe000000) {\n      result exponent + 0x800000;\n    }\n    exponent = exponent & 0x80000000;\nLAB_0008186a:\n    result exponent | 0x7f800000;\n  }\n  shifted_result = shifted_result >> 0x18;\n  rounding_flag = rounding_flag >> 0x18;\n  shift_difference = rounding_flag - shifted_result;\n  isEqualOrNegative = shift_difference != 0;\n  initial_shift = shifted_result;\n  if (isEqualOrNegative && shifted_result <= rounding_flag) {\n    initial_shift = shifted_result + shift_difference;\n  }\n  if (isEqualOrNegative && shifted_result <= rounding_flag) {\n    mantissa_complement = mantissa_complement ^ exponent;\n  }\n  if (isEqualOrNegative && shifted_result <= rounding_flag) {\n    exponent = exponent ^ mantissa_complement;\n  }\n  if (isEqualOrNegative && shifted_result <= rounding_flag) {\n    mantissa_complement = mantissa_complement ^ exponent;\n  }\n  if (rounding_flag < shifted_result) {\n    shift_difference = -shift_difference;\n  }\n  if (0x19 < shift_difference) {\n    result exponent;\n  }\n  shifted_result = exponent & 0xffffff | 0x800000;\n  if ((exponent & 0x80000000) != 0) {\n    shifted_result = -shifted_result;\n  }\n  shifted_mantissa = mantissa_complement & 0xffffff | 0x800000;\n  if ((mantissa_complement & 0x80000000) != 0) {\n    shifted_mantissa = -shifted_mantissa;\n  }\n  if (initial_shift == shift_difference) {\n    shifted_mantissa = shifted_mantissa ^ 0x800000;\n    if (initial_shift == 0) {\n      shifted_result = shifted_result ^ 0x800000;\n      initial_shift = 1;\n    }\n    else {\n      shift_difference = shift_difference - 1;\n    }\n  }\n  shifted_result = shifted_result + ((int)shifted_mantissa >> (shift_difference & 0xff));\n  shifted_mantissa = shifted_mantissa << (0x20 - shift_difference & 0xff);\n  exponent = shifted_result & 0x80000000;\n  if ((int)shifted_result < 0) {\n    isEqualOrNegative = shifted_mantissa != 0;\n    shifted_mantissa = -shifted_mantissa;\n    shifted_result = -shifted_result - (uint)isEqualOrNegative;\n  }\n  if (shifted_result < 0x800000) {\n    mantissa_complement = shifted_mantissa & 0x80000000;\n    shifted_mantissa = shifted_mantissa << 1;\n    shifted_result = shifted_result * 2 + (uint)(mantissa_complement != 0);\n    mantissa_complement = initial_shift - 2;\n    if ((shifted_result & 0x800000) == 0) {\n      shift_difference = LZCOUNT(shifted_result) - 8;\n      shifted_result = shifted_result << (shift_difference & 0xff);\n      if ((int)mantissa_complement < (int)shift_difference) {\n        shifted_result = shifted_result >> (-(mantissa_complement - shift_difference) & 0xff);\n      }\n      else {\n        shifted_result = shifted_result + (mantissa_complement - shift_difference) * 0x800000;\n      }\n      result shifted_result | exponent;\n    }\n  }\n  else {\n    mantissa_complement = initial_shift - 1;\n    if (0xffffff < shifted_result) {\n      mantissa_complement = shifted_result & 1;\n      shifted_result = shifted_result >> 1;\n      shifted_mantissa = (uint)(mantissa_complement != 0) << 0x1f | shifted_mantissa >> 1;\n      mantissa_complement = initial_shift;\n      if (0xfd < initial_shift) goto LAB_0008186a;\n    }\n  }\n  shifted_result = shifted_result + mantissa_complement * 0x800000 + (uint)(0x7fffffff < shifted_mantissa);\n  if (shifted_mantissa == 0x80000000) {\n    shifted_result = shifted_result & 0xfffffffe;\n  }\n  result shifted_result | exponent;\n}\n\n",
            "renaming": {
                "FUN_00081730": "calculate_floating_point_00081730",
                "param_1": "exponent",
                "param_2": "mantissa",
                "param_3": "sign_bit",
                "param_4": "rounding_flag",
                "iVar1": "exponent_shift",
                "iVar2": "shifted_exponent",
                "uVar3": "mantissa_complement",
                "uVar4": "shifted_mantissa",
                "uVar5": "shifted_result",
                "uVar6": "initial_shift",
                "uVar7": "shift_difference",
                "bVar8": "isEqualOrNegative",
                "return": "result"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "perform_calculation_00081734",
            "code": "\nuint performCalculation_00081734(uint inputValue1,uint inputValue2,undefined4 unusedParameter,uint result)\n\n{\n  int shiftValue1;\n  int shiftValue2;\n  uint value1;\n  uint value2;\n  uint difference;\n  uint absDiff;\n  bool isEqual;\n  \n  value2 = inputValue1 << 1;\n  isEqual = value2 == 0;\n  if (!isEqual) {\n    result = inputValue2 << 1;\n    isEqual = result == 0;\n  }\n  if (!isEqual) {\n    isEqual = value2 == result;\n  }\n  shiftValue1 = (int)value2 >> 0x18;\n  if (!isEqual) {\n    isEqual = shiftValue1 == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)result >> 0x18 == -1;\n  }\n  if (isEqual) {\n    shiftValue2 = (int)(inputValue2 << 1) >> 0x18;\n    if (shiftValue1 == -1 || shiftValue2 == -1) {\n      value2 = inputValue2;\n      if (shiftValue1 == -1) {\n        value2 = inputValue1;\n      }\n      if (shiftValue1 != -1 || shiftValue2 != -1) {\n        inputValue2 = value2;\n      }\n      isEqual = (value2 & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (inputValue2 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = value2 == inputValue2;\n      }\n      if (!isEqual) {\n        value2 = value2 | 0x400000;\n      }\n      return value2;\n    }\n    if (((inputValue1 ^ inputValue2) & 0x7fffffff) != 0) {\n      if (value2 == 0) {\n        inputValue1 = inputValue2;\n      }\n      return inputValue1;\n    }\n    if (inputValue1 != inputValue2) {\n      return 0;\n    }\n    if ((value2 & 0xff000000) == 0) {\n      value2 = inputValue1 << 1;\n      if ((inputValue1 & 0x80000000) != 0) {\n        value2 = value2 | 0x80000000;\n      }\n      return value2;\n    }\n    if (value2 < 0xfe000000) {\n      return inputValue1 + 0x800000;\n    }\n    inputValue1 = inputValue1 & 0x80000000;\nLAB_0008186a:\n    return inputValue1 | 0x7f800000;\n  }\n  value2 = value2 >> 0x18;\n  result = result >> 0x18;\n  absDiff = result - value2;\n  isEqual = absDiff != 0;\n  difference = value2;\n  if (isEqual && value2 <= result) {\n    difference = value2 + absDiff;\n  }\n  if (isEqual && value2 <= result) {\n    inputValue2 = inputValue2 ^ inputValue1;\n  }\n  if (isEqual && value2 <= result) {\n    inputValue1 = inputValue1 ^ inputValue2;\n  }\n  if (isEqual && value2 <= result) {\n    inputValue2 = inputValue2 ^ inputValue1;\n  }\n  if (result < value2) {\n    absDiff = -absDiff;\n  }\n  if (0x19 < absDiff) {\n    return inputValue1;\n  }\n  value2 = inputValue1 & 0xffffff | 0x800000;\n  if ((inputValue1 & 0x80000000) != 0) {\n    value2 = -value2;\n  }\n  value1 = inputValue2 & 0xffffff | 0x800000;\n  if ((inputValue2 & 0x80000000) != 0) {\n    value1 = -value1;\n  }\n  if (difference == absDiff) {\n    value1 = value1 ^ 0x800000;\n    if (difference == 0) {\n      value2 = value2 ^ 0x800000;\n      difference = 1;\n    }\n    else {\n      absDiff = absDiff - 1;\n    }\n  }\n  value2 = value2 + ((int)value1 >> (absDiff & 0xff));\n  value1 = value1 << (0x20 - absDiff & 0xff);\n  inputValue1 = value2 & 0x80000000;\n  if ((int)value2 < 0) {\n    isEqual = value1 != 0;\n    value1 = -value1;\n    value2 = -value2 - (uint)isEqual;\n  }\n  if (value2 < 0x800000) {\n    absDiff = value1 & 0x80000000;\n    value1 = value1 << 1;\n    value2 = value2 * 2 + (uint)(absDiff != 0);\n    absDiff = difference - 2;\n    if ((value2 & 0x800000) == 0) {\n      difference = LZCOUNT(value2) - 8;\n      value2 = value2 << (difference & 0xff);\n      if ((int)absDiff < (int)difference) {\n        value2 = value2 >> (-(absDiff - difference) & 0xff);\n      }\n      else {\n        value2 = value2 + (absDiff - difference) * 0x800000;\n      }\n      return value2 | inputValue1;\n    }\n  }\n  else {\n    absDiff = difference - 1;\n    if (0xffffff < value2) {\n      absDiff = value2 & 1;\n      value2 = value2 >> 1;\n      value1 = (uint)(absDiff != 0) << 0x1f | value1 >> 1;\n      absDiff = difference;\n      if (0xfd < difference) goto LAB_0008186a;\n    }\n  }\n  value2 = value2 + absDiff * 0x800000 + (uint)(0x7fffffff < value1);\n  if (value1 == 0x80000000) {\n    value2 = value2 & 0xfffffffe;\n  }\n  return value2 | inputValue1;\n}\n\n",
            "renaming": {
                "FUN_00081734": "perform_calculation_00081734",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "unusedParameter",
                "param_4": "result",
                "iVar1": "shiftValue1",
                "iVar2": "shiftValue2",
                "uVar3": "value1",
                "uVar4": "value2",
                "uVar5": "difference",
                "uVar6": "absDiff",
                "bVar7": "isEqual"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081894": {
            "entrypoint": "0x00081894",
            "current_name": "calculate_result_00081894",
            "code": "\nuint calculateResult_00081894(uint input)\n\n{\n  uint temp2;\n  uint temp;\n  int constant;\n  uint additionalValue;\n  \n  if (input == 0) {\n    return 0;\n  }\n  temp2 = LZCOUNT(input);\n  temp = temp2 - 8;\n  constant = temp * -0x800000 + 0x4a800000;\n  if (7 < temp2) {\n    additionalValue = 0 << (temp & 0xff);\n    temp2 = constant + (input << (temp & 0xff)) +\n            (0U >> (0x20 - temp & 0xff)) + (uint)(0x7fffffff < additionalValue);\n    if (additionalValue == 0x80000000) {\n      temp2 = temp2 & 0xfffffffe;\n    }\n    return temp2;\n  }\n  temp = input << temp2 + 0x18;\n  temp2 = constant + ((input >> (0x20 - (temp2 + 0x18) & 0xff)) - ((int)temp >> 0x1f));\n  if ((temp & 0x7fffffff) == 0) {\n    temp2 = temp2 & ~(temp >> 0x1f);\n  }\n  return temp2;\n}\n\n",
            "renaming": {
                "FUN_00081894": "calculate_result_00081894",
                "param_1": "input",
                "uVar1": "temp2",
                "uVar2": "temp",
                "iVar3": "constant",
                "uVar4": "additionalValue"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008189c": {
            "entrypoint": "0x0008189c",
            "current_name": "count_leading_zeros_and_shift_0008189c",
            "code": "\nuint countLeadingZerosAndShift_0008189c(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  uint signBit;\n  int result;\n  \n  signBit = input & 0x80000000;\n  if ((int)signBit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(input);\n  shiftAmount = leadingZeros - 8;\n  result = ((signBit | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftAmount & 0xff);\n    signBit = result + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftAmount = input << leadingZeros + 0x18;\n  signBit = result + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftAmount >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_0008189c": "count_leading_zeros_and_shift_0008189c",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "uVar3": "signBit",
                "iVar4": "result"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081944": {
            "entrypoint": "0x00081944",
            "current_name": "calculate_float32_00081944",
            "code": "\nuint calculateFloat32_00081944(uint num1,uint num2,undefined4 mask1,uint mask2)\n\n{\n  longlong product;\n  uint result;\n  uint shift1;\n  int sum;\n  int diff;\n  uint temp1;\n  int temp2;\n  uint combined;\n  bool cond1;\n  bool cond2;\n  \n  shift1 = num1 >> 0x17 & 0xff;\n  cond1 = shift1 == 0;\n  if (!cond1) {\n    mask2 = num2 >> 0x17 & 0xff;\n    cond1 = mask2 == 0;\n  }\n  if (!cond1) {\n    cond1 = shift1 == 0xff;\n  }\n  if (!cond1) {\n    cond1 = mask2 == 0xff;\n  }\n  if (cond1) {\n    mask2 = num2 >> 0x17 & 0xff;\n    if (shift1 == 0xff || mask2 == 0xff) {\n      cond1 = num1 == 0 || num1 == 0x80000000;\n      result = num2;\n      if (num1 != 0 && num1 != 0x80000000) {\n        cond1 = num2 == 0;\n        result = num1;\n      }\n      if (!cond1) {\n        cond1 = num2 == 0x80000000;\n      }\n      combined = result;\n      if (((cond1) || ((shift1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((mask2 == 0xff && (combined = num2, (num2 & 0x7fffff) != 0)))) {\n        return combined | 0x7fc00000;\n      }\n      result = result ^ num2;\n      goto LAB_00081a94;\n    }\n    cond1 = (num1 & 0x7fffffff) == 0;\n    if (!cond1) {\n      cond1 = (num2 & 0x7fffffff) == 0;\n    }\n    if (cond1) {\n      return (num1 ^ num2) & 0x80000000;\n    }\n    cond1 = shift1 == 0;\n    result = num1 & 0x80000000;\n    while( true ) {\n      if (cond1) {\n        num1 = num1 << 1;\n        cond1 = (num1 & 0x800000) == 0;\n      }\n      if (!cond1) break;\n      shift1 = shift1 - 1;\n    }\n    num1 = num1 | result;\n    cond1 = mask2 == 0;\n    result = num2 & 0x80000000;\n    while( true ) {\n      if (cond1) {\n        num2 = num2 << 1;\n        cond1 = (num2 & 0x800000) == 0;\n      }\n      if (!cond1) break;\n      mask2 = mask2 - 1;\n    }\n    num2 = num2 | result;\n  }\n  sum = shift1 + mask2;\n  combined = num1 ^ num2;\n  shift1 = num1 << 9;\n  cond1 = shift1 == 0;\n  if (!cond1) {\n    num2 = num2 << 9;\n    cond1 = num2 == 0;\n  }\n  if (cond1) {\n    if (shift1 == 0) {\n      num2 = num2 << 9;\n    }\n    result = combined & 0x80000000 | num1 & 0x7fffff | num2 >> 9;\n    cond2 = SBORROW4(sum,0x7f);\n    diff = sum + -0x7f;\n    cond1 = diff == 0;\n    temp2 = diff;\n    if (!cond1 && 0x7e < sum) {\n      cond2 = SBORROW4(0xff,diff);\n      temp2 = 0xff - diff;\n      cond1 = diff == 0xff;\n    }\n    if (!cond1 && temp2 < 0 == cond2) {\n      result = result | diff * 0x800000;\n    }\n    if (!cond1 && temp2 < 0 == cond2) {\n      return result;\n    }\n    result = result | 0x800000;\n    temp1 = 0;\n    cond2 = SBORROW4(diff,1);\n    combined = sum - 0x80;\n    cond1 = combined == 0;\n    shift1 = combined;\n  }\n  else {\n    product = (ulonglong)(shift1 >> 5 | 0x8000000) * (ulonglong)(num2 >> 5 | 0x8000000);\n    temp1 = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    cond1 = result < 0x800000;\n    if (cond1) {\n      result = result << 1;\n    }\n    if (cond1) {\n      result = result | temp1 >> 0x1f;\n      temp1 = temp1 << 1;\n    }\n    result = combined & 0x80000000 | result;\n    combined = (sum + -0x7f) - (uint)cond1;\n    cond2 = SBORROW4(combined,0xfd);\n    cond1 = combined == 0xfd;\n    shift1 = combined - 0xfd;\n    if (combined < 0xfe) {\n      result = result + combined * 0x800000 + (uint)(0x7fffffff < temp1);\n      if (temp1 == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (cond1 || (int)shift1 < 0 != cond2) {\n    cond1 = (int)(combined + 0x19) < 0;\n    if (combined == 0xffffffe7 || cond1 != SCARRY4(combined,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (combined != 0xffffffe7 && cond1 == SCARRY4(combined,0x19)) {\n      shift1 = (result << 1) >> (-combined & 0xff);\n      combined = result << (combined + 0x20 & 0xff);\n      shift1 = ((uint)((result & 0x80000000) != 0) << 0x1f | shift1 >> 1) + (uint)((byte)shift1 & 1);\n      if ((temp1 | combined << 1) == 0) {\n        shift1 = shift1 & ~(combined >> 0x1f);\n      }\n      return shift1;\n    }\n    return result;\n  }\nLAB_00081a94:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081944": "calculate_float32_00081944",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "mask1",
                "param_4": "mask2",
                "lVar1": "product",
                "uVar2": "result",
                "uVar3": "shift1",
                "iVar4": "sum",
                "iVar5": "diff",
                "uVar6": "temp1",
                "iVar7": "temp2",
                "uVar8": "combined",
                "bVar9": "cond1",
                "bVar10": "cond2"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "entrypoint": "0x00081bf4",
            "current_name": "check_overflow_00081bf4",
            "code": "\nuint check_overflow_00081bf4(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint multiplied_input_1;\n  uint multiplied_input_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  multiplied_input_1 = input_1 * 2;\n  multiplied_input_2 = input_2 * 2;\n  if (((int)multiplied_input_1 >> 0x18 == -1 || (int)multiplied_input_2 >> 0x18 == -1) &&\n     ((((int)multiplied_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)multiplied_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_inputs = multiplied_input_1 | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = multiplied_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && multiplied_input_2 <= multiplied_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || multiplied_input_2 > multiplied_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_00081bf4": "check_overflow_00081bf4",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "multiplied_input_1",
                "uVar3": "multiplied_input_2",
                "uVar4": "combined_inputs",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_00081c5c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c54": {
            "entrypoint": "0x00081c54",
            "current_name": "execute_function_with_reverse_args_00081c54",
            "code": "\nvoid executeFunctionWithReverseArgs_00081c54(undefined4 inputAddress,undefined4 outputAddress)\n\n{\n  FUN_00081c5c(outputAddress,inputAddress);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081c54": "execute_function_with_reverse_args_00081c54",
                "param_1": "inputAddress",
                "param_2": "outputAddress"
            },
            "calling": [
                "FUN_00081ca8"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "entrypoint": "0x00081c5c",
            "current_name": "concatenate_param_00081c5c",
            "code": "\nundefined8 concatenateParam_00081c5c(undefined4 firstParameter,undefined4 secondParameter)\n\n{\n  FUN_00081bf4();\n  return CONCAT44(secondParameter,firstParameter);\n}\n\n",
            "renaming": {
                "FUN_00081c5c": "concatenate_param_00081c5c",
                "param_1": "firstParameter",
                "param_2": "secondParameter"
            },
            "calling": [
                "FUN_00081c94",
                "FUN_00081c54"
            ],
            "called": [
                "FUN_00081bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c94": {
            "entrypoint": "0x00081c94",
            "current_name": "check_for_zero_00081c94",
            "code": "\nbool check_for_zero_00081c94(void)\n\n{\n  undefined is_zero;\n  undefined is_nonzero;\n  \n  FUN_00081c5c();\n  return !(bool)is_nonzero || (bool)is_zero;\n}\n\n",
            "renaming": {
                "FUN_00081c94": "check_for_zero_00081c94",
                "in_ZR": "is_zero",
                "in_CY": "is_nonzero"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "entrypoint": "0x00081ca8",
            "current_name": "check_conditions_00081ca8",
            "code": "\nbool check_conditions_00081ca8(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_00081c54();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_00081ca8": "check_conditions_00081ca8",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "entrypoint": "0x00081cd0",
            "current_name": "convert_to_signed_int_00081cd0",
            "code": "\nuint convertToSignedInt_00081cd0(uint num)\n\n{\n  uint shiftedBits;\n  uint bitDifference;\n  \n  if (num << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedBits = (num << 1) >> 0x18;\n  bitDifference = 0x9e - shiftedBits;\n  if (shiftedBits < 0x9f && bitDifference != 0) {\n    shiftedBits = (num << 8 | 0x80000000) >> (bitDifference & 0xff);\n    if ((num & 0x80000000) != 0) {\n      shiftedBits = -shiftedBits;\n    }\n    return shiftedBits;\n  }\n  if ((bitDifference == 0xffffff9f) && ((num & 0x7fffff) != 0)) {\n    return 0;\n  }\n  num = num & 0x80000000;\n  if (num == 0) {\n    num = 0x7fffffff;\n  }\n  return num;\n}\n\n",
            "renaming": {
                "FUN_00081cd0": "convert_to_signed_int_00081cd0",
                "param_1": "num",
                "uVar1": "shiftedBits",
                "uVar2": "bitDifference"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "entrypoint": "0x00081d1c",
            "current_name": "check_unsigned_number_00081d1c",
            "code": "\nuint checkUnsignedNumber_00081d1c(uint number)\n\n{\n  uint result;\n  \n  if (((number & 0x80000000) != 0) || (number << 1 < 0x7f000000)) {\n    return 0;\n  }\n  result = 0x9e - ((number << 1) >> 0x18);\n  if (-1 < (int)result) {\n    return (number << 8 | 0x80000000) >> (result & 0xff);\n  }\n  if ((result == 0xffffff9f) && ((number & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081d1c": "check_unsigned_number_00081d1c",
                "param_1": "number",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "entrypoint": "0x00081d5c",
            "current_name": "update_relocation_entry_00081d5c",
            "code": "\nundefined4 updateRelocationEntry_00081d5c(dword newValue1,dword newValue2,dword newValue3)\n\n{\n  dword *relocationEntry;\n  uint entryIndex;\n  uint bitMask;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  entryIndex = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  relocationEntry = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)entryIndex) {\n    relocationEntry = (dword *)FUN_00081df4(400);\n    if (relocationEntry == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *relocationEntry = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    relocationEntry[1] = 0;\n    entryIndex = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)relocationEntry;\n    relocationEntry[0x62] = 0;\n    relocationEntry[99] = 0;\n  }\n  bitMask = 1 << (entryIndex & 0xff);\n  relocationEntry[entryIndex + 0x22] = newValue1;\n  relocationEntry[0x62] = relocationEntry[0x62] | bitMask;\n  relocationEntry[entryIndex + 0x42] = newValue3;\n  relocationEntry[99] = bitMask | relocationEntry[99];\n  relocationEntry[1] = entryIndex + 1;\n  relocationEntry[entryIndex + 2] = newValue2;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081d5c": "update_relocation_entry_00081d5c",
                "param_1": "newValue1",
                "param_2": "newValue2",
                "param_3": "newValue3",
                "pdVar1": "relocationEntry",
                "uVar2": "entryIndex",
                "uVar3": "bitMask"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "entrypoint": "0x00081d7c",
            "current_name": "execute_functions_00081d7c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid executeFunctions_00081d7c(void)\n\n{\n  int index;\n  code **functionArray;\n  \n  FUNC_00085858();\n  functionArray = (code **)0x85860;\n  index = 0;\n  do {\n    index = index + 1;\n    functionArray = functionArray + 1;\n    (**functionArray)();\n  } while (index != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d7c": "execute_functions_00081d7c",
                "iVar1": "index",
                "ppcVar2": "functionArray"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00083974",
                "FUN_00085858",
                "FUN_00080118"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081df4": {
            "entrypoint": "0x00081df4",
            "current_name": "process_elf_relocation_00081df4",
            "code": "\nvoid processElfRelocation_00081df4(undefined4 data)\n\n{\n  FUN_00081e14(relArray[140].offset,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081df4": "process_elf_relocation_00081df4",
                "param_1": "data",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00083974"
            ],
            "called": [
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e04": {
            "entrypoint": "0x00081e04",
            "current_name": "execute_relocation_00081e04",
            "code": "\nvoid executeRelocation_00081e04(undefined4 parameter)\n\n{\n  FUN_00083d9c(relocationArray[140].r_offset,parameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e04": "execute_relocation_00081e04",
                "param_1": "parameter",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "FUN_0008160c",
                "FUN_000815fe"
            ],
            "called": [
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e14": {
            "entrypoint": "0x00081e14",
            "current_name": "allocate_memory_00081e14",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_00081e14(undefined4 *output_address,uint size_to_allocate)\n\n{\n  dword address_var1;\n  int index_var2;\n  uint temp_var3;\n  uint temp_var4;\n  int index_var5;\n  uint temp_var6;\n  dword address_var7;\n  uint temp_var8;\n  int index_var9;\n  undefined *pointer_var10;\n  dword address_var11;\n  dword address_var12;\n  int index_var13;\n  dword *pointer_var14;\n  uint temp_var15;\n  undefined *pointer_var16;\n  dword *pointer_var17;\n  uint temp_var18;\n  \n  if (size_to_allocate + 0xb < 0x17) {\n    temp_var15 = 0x10;\n    if (0x10 < size_to_allocate) goto LAB_00081e7a;\n  }\n  else {\n    temp_var15 = size_to_allocate + 0xb & 0xfffffff8;\n    if (((int)temp_var15 < 0) || (temp_var15 < size_to_allocate)) {\nLAB_00081e7a:\n      *output_address = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00082598(output_address);\n  address_var1 = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (temp_var15 < 0x1f8) {\n    index_var13 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + temp_var15);\n    if ((index_var13 != temp_var15 + 0x20070464) ||\n       (index_var2 = index_var13 + 8, index_var13 = *(int *)(index_var13 + 0x14), index_var2 != index_var13)) {\n      index_var5 = *(int *)(index_var13 + 0xc);\n      index_var9 = (*(uint *)(index_var13 + 4) & 0xfffffffc) + index_var13;\n      temp_var15 = *(uint *)(index_var9 + 4);\n      index_var2 = *(int *)(index_var13 + 8);\n      *(int *)(index_var2 + 0xc) = index_var5;\n      *(int *)(index_var5 + 8) = index_var2;\n      *(uint *)(index_var9 + 4) = temp_var15 | 1;\n      FUNC_0008259c(output_address);\n      return (int *)(index_var13 + 8);\n    }\n    temp_var18 = (temp_var15 >> 3) + 2;\n  }\n  else {\n    temp_var18 = temp_var15 >> 9;\n    if (temp_var18 == 0) {\n      index_var2 = 0x7e;\n      index_var13 = 0x3f;\n    }\n    else if (temp_var18 < 5) {\n      index_var13 = (temp_var15 >> 6) + 0x38;\n      index_var2 = index_var13 * 2;\n    }\n    else if (temp_var18 < 0x15) {\n      index_var13 = temp_var18 + 0x5b;\n      index_var2 = index_var13 * 2;\n    }\n    else if (temp_var18 < 0x55) {\n      index_var13 = (temp_var15 >> 0xc) + 0x6e;\n      index_var2 = index_var13 * 2;\n    }\n    else if (temp_var18 < 0x155) {\n      index_var13 = (temp_var15 >> 0xf) + 0x77;\n      index_var2 = index_var13 * 2;\n    }\n    else if (temp_var18 < 0x555) {\n      index_var13 = (temp_var15 >> 0x12) + 0x7c;\n      index_var2 = index_var13 * 2;\n    }\n    else {\n      index_var2 = 0xfc;\n      index_var13 = 0x7e;\n    }\n    for (address_var7 = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[index_var2]; index_var2 * 4 + 0x20070464U != address_var7\n        ; address_var7 = *(dword *)(address_var7 + 0xc)) {\n      temp_var18 = *(uint *)(address_var7 + 4) & 0xfffffffc;\n      index_var5 = temp_var18 - temp_var15;\n      if (0xf < index_var5) {\n        index_var13 = index_var13 + -1;\n        break;\n      }\n      if (-1 < index_var5) {\n        index_var2 = temp_var18 + address_var7;\n        temp_var15 = *(uint *)(index_var2 + 4);\n        index_var5 = *(int *)(address_var7 + 0xc);\n        index_var13 = *(int *)(address_var7 + 8);\n        *(int *)(index_var13 + 0xc) = index_var5;\n        *(int *)(index_var5 + 8) = index_var13;\n        *(uint *)(index_var2 + 4) = temp_var15 | 1;\n        FUNC_0008259c(output_address);\n        return (int *)(address_var7 + 8);\n      }\n    }\n    temp_var18 = index_var13 + 1;\n  }\n  address_var7 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    temp_var3 = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    temp_var4 = temp_var3 & 0xfffffffc;\n    temp_var6 = temp_var4 - temp_var15;\n    if (0xf < (int)temp_var6) {\n      address_var7 = temp_var15 + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = temp_var15 | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = address_var7;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = address_var7;\n      *(undefined4 *)(address_var7 + 0xc) = 0x2007046c;\n      *(undefined4 *)(address_var7 + 8) = 0x2007046c;\n      *(uint *)(address_var7 + 4) = temp_var6 | 1;\n      *(uint *)(address_var7 + temp_var6) = temp_var6;\n      FUNC_0008259c(output_address);\n      return (int *)(address_var1 + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)temp_var6) {\n      *(uint *)(temp_var4 + address_var1 + 4) = *(uint *)(temp_var4 + address_var1 + 4) | 1;\n      FUNC_0008259c(output_address);\n      return (int *)(address_var1 + 8);\n    }\n    if (temp_var4 < 0x200) {\n      temp_var4 = temp_var3 & 0xfffffff8;\n      index_var13 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp_var4);\n      address_var7 = 1 << ((int)(temp_var3 >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(address_var1 + 8) = index_var13;\n      *(uint *)(address_var1 + 0xc) = temp_var4 + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = address_var7;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp_var4) = address_var1;\n      *(dword *)(index_var13 + 0xc) = address_var1;\n    }\n    else {\n      temp_var6 = temp_var3 >> 9;\n      if (temp_var6 < 5) {\n        index_var2 = (temp_var3 >> 6) + 0x38;\n        index_var13 = index_var2 * 2;\n      }\n      else if (temp_var6 < 0x15) {\n        index_var2 = temp_var6 + 0x5b;\n        index_var13 = index_var2 * 2;\n      }\n      else if (temp_var6 < 0x55) {\n        index_var2 = (temp_var3 >> 0xc) + 0x6e;\n        index_var13 = index_var2 * 2;\n      }\n      else if (temp_var6 < 0x155) {\n        index_var2 = (temp_var3 >> 0xf) + 0x77;\n        index_var13 = index_var2 * 2;\n      }\n      else if (temp_var6 < 0x555) {\n        index_var2 = (temp_var3 >> 0x12) + 0x7c;\n        index_var13 = index_var2 * 2;\n      }\n      else {\n        index_var13 = 0xfc;\n        index_var2 = 0x7e;\n      }\n      address_var7 = index_var13 * 4 + 0x20070464;\n      address_var11 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[index_var13];\n      if (address_var11 == address_var7) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (index_var2 >> 2 & 0xffU);\n        address_var12 = address_var11;\n      }\n      else {\n        do {\n          address_var12 = address_var11;\n          if ((*(uint *)(address_var11 + 4) & 0xfffffffc) <= temp_var4) break;\n          address_var11 = *(dword *)(address_var11 + 8);\n          address_var12 = address_var11;\n        } while (address_var7 != address_var11);\n        address_var11 = *(dword *)(address_var12 + 0xc);\n      }\n      address_var7 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(address_var1 + 0xc) = address_var11;\n      *(dword *)(address_var1 + 8) = address_var12;\n      *(dword *)(address_var11 + 8) = address_var1;\n      *(dword *)(address_var12 + 0xc) = address_var1;\n    }\n  }\n  address_var1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  temp_var3 = 1 << ((int)temp_var18 >> 2 & 0xffU);\n  if (temp_var3 <= address_var7) {\n    if ((address_var7 & temp_var3) == 0) {\n      temp_var18 = temp_var18 & 0xfffffffc;\n      do {\n        temp_var3 = temp_var3 << 1;\n        temp_var18 = temp_var18 + 4;\n      } while ((address_var7 & temp_var3) == 0);\n    }\n    do {\n      pointer_var17 = &Elf32_Rel_ARRAY_20070000[temp_var18 + 0x8c].r_info;\n      pointer_var14 = pointer_var17;\n      temp_var4 = temp_var18;\n      do {\n        for (pointer_var10 = (undefined *)pointer_var14[3]; pointer_var14 != (dword *)pointer_var10;\n            pointer_var10 = *(undefined **)(pointer_var10 + 0xc)) {\n          temp_var6 = *(uint *)(pointer_var10 + 4) & 0xfffffffc;\n          temp_var8 = temp_var6 - temp_var15;\n          if (0xf < (int)temp_var8) {\n            index_var2 = *(int *)(pointer_var10 + 8);\n            index_var13 = *(int *)(pointer_var10 + 0xc);\n            pointer_var16 = pointer_var10 + temp_var15;\n            *(uint *)(pointer_var10 + 4) = temp_var15 | 1;\n            *(int *)(index_var2 + 0xc) = index_var13;\n            *(int *)(index_var13 + 8) = index_var2;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)pointer_var16;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)pointer_var16;\n            *(undefined4 *)(pointer_var16 + 0xc) = 0x2007046c;\n            *(undefined4 *)(pointer_var16 + 8) = 0x2007046c;\n            *(uint *)(pointer_var16 + 4) = temp_var8 | 1;\n            *(uint *)(pointer_var16 + temp_var8) = temp_var8;\n            FUNC_0008259c(output_address);\n            return (int *)(pointer_var10 + 8);\n          }\n          if (-1 < (int)temp_var8) {\n            index_var13 = *(int *)(pointer_var10 + 8);\n            index_var2 = *(int *)(pointer_var10 + 0xc);\n            *(uint *)(pointer_var10 + temp_var6 + 4) = *(uint *)(pointer_var10 + temp_var6 + 4) | 1;\n            *(int *)(index_var13 + 0xc) = index_var2;\n            *(int *)(index_var2 + 8) = index_var13;\n            FUNC_0008259c(output_address);\n            return (int *)(pointer_var10 + 8);\n          }\n        }\n        temp_var4 = temp_var4 + 1;\n        pointer_var14 = pointer_var14 + 2;\n      } while ((temp_var4 & 3) != 0);\n      do {\n        temp_var6 = temp_var18 & 3;\n        pointer_var10 = (undefined *)(pointer_var17 + -2);\n        temp_var18 = temp_var18 - 1;\n        if (temp_var6 == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~temp_var3;\n          break;\n        }\n        pointer_var17 = (dword *)*pointer_var17;\n      } while (pointer_var17 == (dword *)pointer_var10);\n      temp_var3 = temp_var3 * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= temp_var3 &&\n           temp_var3 - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (temp_var18 = temp_var4, temp_var3 == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & temp_var3) == 0; temp_var3 = temp_var3 << 1) {\n        temp_var18 = temp_var18 + 4;\n      }\n    } while( true );\n  }\n  temp_var18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((temp_var15 <= temp_var18) &&\n     (temp_var3 = temp_var18 - temp_var15, address_var7 = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)temp_var3))\n  goto LAB_0008211e;\n  temp_var3 = Elf32_Rel_ARRAY_20070000[141].r_info + temp_var18;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    temp_var4 = temp_var15 + DAT_20071190 + 0x10;\n  }\n  else {\n    temp_var4 = temp_var15 + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  address_var7 = FUN_00082970(output_address,temp_var4);\n  if ((address_var7 == 0xffffffff) || ((address_var7 < temp_var3 && (address_var1 != 0x20070464)))) {\n    temp_var18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    address_var7 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    temp_var6 = DAT_20071194 + temp_var4;\n    DAT_20071194 = temp_var6;\n    if ((temp_var3 == address_var7) && ((temp_var3 & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp_var4 + temp_var18 | 1;\n    }\n    else {\n      address_var11 = address_var7;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        address_var11 = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_20071194 = temp_var6 + (address_var7 - temp_var3);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = address_var11;\n      temp_var3 = address_var7 & 7;\n      if (temp_var3 == 0) {\n        index_var13 = 0x1000;\n      }\n      else {\n        address_var7 = address_var7 + (8 - temp_var3);\n        index_var13 = 0x1008 - temp_var3;\n      }\n      index_var13 = index_var13 - (temp_var4 + address_var7 & 0xfff);\n      index_var2 = FUN_00082970(output_address,index_var13);\n      if (index_var2 == -1) {\n        temp_var3 = 1;\n        index_var13 = 0;\n      }\n      else {\n        temp_var3 = (index_var2 - address_var7) + index_var13 | 1;\n      }\n      temp_var6 = DAT_20071194 + index_var13;\n      Elf32_Rel_ARRAY_20070000[141].r_info = address_var7;\n      DAT_20071194 = temp_var6;\n      *(uint *)(address_var7 + 4) = temp_var3;\n      if (address_var1 != 0x20070464) {\n        if (temp_var18 < 0x10) {\n          *(undefined4 *)(address_var7 + 4) = 1;\n          temp_var18 = 0;\n          goto LAB_00082108;\n        }\n        temp_var18 = temp_var18 - 0xc & 0xfffffff8;\n        *(uint *)(address_var1 + 4) = temp_var18 | *(uint *)(address_var1 + 4) & 1;\n        *(undefined4 *)(address_var1 + temp_var18 + 4) = 5;\n        *(undefined4 *)(address_var1 + temp_var18 + 8) = 5;\n        if (0xf < temp_var18) {\n          FUN_00083d9c(output_address,address_var1 + 8);\n          temp_var6 = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < temp_var6) {\n      DAT_2007118c = temp_var6;\n    }\n    if (DAT_20071188 < temp_var6) {\n      DAT_20071188 = temp_var6;\n    }\n    temp_var18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    address_var7 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00082108:\n  temp_var3 = temp_var18 - temp_var15;\n  if ((temp_var18 < temp_var15) || ((int)temp_var3 < 0x10)) {\n    FUNC_0008259c(output_address);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  Elf32_Rel_ARRAY_20070000[141].r_info = temp_var15 + address_var7;\n  *(uint *)(address_var7 + 4) = temp_var15 | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp_var3 | 1;\n  FUNC_0008259c(output_address);\n  return (int *)(address_var7 + 8);\n}\n\n",
            "renaming": {
                "FUN_00081e14": "allocate_memory_00081e14",
                "param_1": "output_address",
                "param_2": "size_to_allocate",
                "dVar1": "address_var1",
                "iVar2": "index_var2",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "iVar5": "index_var5",
                "uVar6": "temp_var6",
                "dVar7": "address_var7",
                "uVar8": "temp_var8",
                "iVar9": "index_var9",
                "puVar10": "pointer_var10",
                "dVar11": "address_var11",
                "dVar12": "address_var12",
                "iVar13": "index_var13",
                "pdVar14": "pointer_var14",
                "uVar15": "temp_var15",
                "puVar16": "pointer_var16",
                "pdVar17": "pointer_var17",
                "uVar18": "temp_var18"
            },
            "calling": [
                "FUN_00081df4",
                "FUN_000825b0",
                "FUN_000842a4",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00082970",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008234c": {
            "entrypoint": "0x0008234c",
            "current_name": "copy_memory_0008234c",
            "code": "\nundefined4 * copyMemory_0008234c(undefined4 *dest,undefined4 *src,uint length)\n\n{\n  undefined4 *destPtr;\n  undefined4 *dest;\n  undefined4 *srcPtr;\n  uint remainingLen;\n  uint remainingLen2;\n  bool isLengthExceeded;\n  \n  dest = dest;\n  if ((((uint)src | (uint)dest) & 3) != 0) {\n    if (length < 8) {\n      remainingLen2 = length - 4;\n      if (3 < length) {\n        do {\n          destPtr = src;\n          srcPtr = dest;\n          isLengthExceeded = remainingLen2 != 0;\n          remainingLen2 = remainingLen2 - 1;\n          *(undefined *)srcPtr = *(undefined *)destPtr;\n          dest = (undefined4 *)((int)srcPtr + 1);\n          src = (undefined4 *)((int)destPtr + 1);\n        } while (isLengthExceeded);\n        *(undefined *)(undefined4 *)((int)srcPtr + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)srcPtr + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)srcPtr + 3) = *(undefined *)((int)destPtr + 3);\n        return dest;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)src & 3) != 0) && (((uint)dest & 3) != 0)) {\n      remainingLen2 = 4 - ((uint)dest & 3);\n      length = length - remainingLen2;\n      destPtr = dest;\n      srcPtr = src;\n      if (((uint)dest & 1) != 0) {\n        srcPtr = (undefined4 *)((int)src + 1);\n        destPtr = (undefined4 *)((int)dest + 1);\n        *(undefined *)dest = *(undefined *)src;\n      }\n      dest = destPtr;\n      src = srcPtr;\n      if ((remainingLen2 & 2) != 0) {\n        src = (undefined4 *)((int)srcPtr + 2);\n        dest = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n      }\n    }\n  }\n  while (0x3f < length) {\n    *dest = *src;\n    dest[1] = src[1];\n    dest[2] = src[2];\n    dest[3] = src[3];\n    dest[4] = src[4];\n    dest[5] = src[5];\n    dest[6] = src[6];\n    dest[7] = src[7];\n    dest[8] = src[8];\n    dest[9] = src[9];\n    dest[10] = src[10];\n    dest[0xb] = src[0xb];\n    dest[0xc] = src[0xc];\n    dest[0xd] = src[0xd];\n    dest[0xe] = src[0xe];\n    dest[0xf] = src[0xf];\n    dest = dest + 0x10;\n    src = src + 0x10;\n    length = length - 0x40;\n  }\n  remainingLen = length - 0x10;\n  if (0xffffffcf < length - 0x40) {\n    do {\n      *dest = *src;\n      dest[1] = src[1];\n      dest[2] = src[2];\n      dest[3] = src[3];\n      dest = dest + 4;\n      src = src + 4;\n      isLengthExceeded = 0xf < remainingLen;\n      remainingLen = remainingLen - 0x10;\n    } while (isLengthExceeded);\n  }\n  remainingLen2 = remainingLen + 0xc;\n  srcPtr = dest;\n  destPtr = src;\n  if (0xfffffff3 < remainingLen) {\n    do {\n      src = destPtr + 1;\n      *srcPtr = *destPtr;\n      isLengthExceeded = 3 < remainingLen2;\n      remainingLen2 = remainingLen2 - 4;\n      dest = srcPtr + 1;\n      srcPtr = srcPtr + 1;\n      destPtr = src;\n    } while (isLengthExceeded);\n  }\nLAB_000823d0:\n  if (remainingLen2 + 4 != 0) {\n    destPtr = dest;\n    srcPtr = src;\n    if ((remainingLen2 & 1) != 0) {\n      srcPtr = (undefined4 *)((int)src + 1);\n      destPtr = (undefined4 *)((int)dest + 1);\n      *(undefined *)dest = *(undefined *)src;\n    }\n    if ((remainingLen2 + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n    }\n  }\n  return dest;\n}\n\n",
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "puVar1": "destPtr",
                "puVar2": "dest",
                "puVar3": "srcPtr",
                "uVar4": "remainingLen",
                "uVar5": "remainingLen2",
                "bVar6": "isLengthExceeded"
            },
            "calling": [
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082438": {
            "entrypoint": "0x00082438",
            "current_name": "copy_reverse_00082438",
            "code": "\nvoid copyReverse_00082438(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  int index;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *destEndPtr;\n  uint tempSize;\n  undefined *endPtr;\n  uint remainingSize;\n  \n  if ((src < dest) && (destEndPtr = (undefined4 *)((int)src + size), dest < destEndPtr)) {\n    endPtr = (undefined *)((int)dest + size);\n    index = size - 1;\n    if (size != 0) {\n      do {\n        destEndPtr = (undefined4 *)((int)destEndPtr + -1);\n        index = index + -1;\n        endPtr = endPtr + -1;\n        *endPtr = *(undefined *)destEndPtr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    destEndPtr = dest;\n    srcPtr = src;\n    do {\n      destPtr = destEndPtr + 4;\n      *destEndPtr = *srcPtr;\n      destEndPtr[1] = srcPtr[1];\n      destEndPtr[2] = srcPtr[2];\n      destEndPtr[3] = srcPtr[3];\n      destEndPtr = destPtr;\n      srcPtr = srcPtr + 4;\n    } while (destPtr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x10));\n    index = (size - 0x10 >> 4) + 1;\n    remainingSize = size & 0xf;\n    src = src + index * 4;\n    dest = dest + index * 4;\n    tempSize = remainingSize;\n    destEndPtr = dest;\n    srcPtr = src;\n    if (3 < remainingSize) {\n      do {\n        tempSize = tempSize - 4;\n        *destEndPtr = *srcPtr;\n        destEndPtr = destEndPtr + 1;\n        srcPtr = srcPtr + 1;\n      } while (3 < tempSize);\n      index = (remainingSize - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + index);\n      src = (undefined4 *)((int)src + index);\n      remainingSize = size & 3;\n    }\n    size = remainingSize;\n    if (size == 0) {\n      return;\n    }\n  }\n  destEndPtr = dest;\n  do {\n    srcPtr = (undefined4 *)((int)destEndPtr + 1);\n    *(undefined *)destEndPtr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    destEndPtr = srcPtr;\n  } while (srcPtr != (undefined4 *)(size + (int)dest));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082438": "copy_reverse_00082438",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "iVar1": "index",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "puVar4": "destEndPtr",
                "uVar5": "tempSize",
                "puVar6": "endPtr",
                "uVar7": "remainingSize"
            },
            "calling": [
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082504": {
            "entrypoint": "0x00082504",
            "current_name": "copy_and_fill_memory_00082504",
            "code": "\nvoid copyAndFillMemory_00082504(undefined4 *destination,undefined value,uint length)\n\n{\n  undefined4 *destPtr;\n  undefined4 *nextDestPtr;\n  undefined4 filledValue;\n  uint remainingLength;\n  bool isZeroLength;\n  \n  if (((uint)destination & 3) != 0) {\n    isZeroLength = length == 0;\n    destPtr = destination;\n    length = length - 1;\n    if (isZeroLength) {\n      return;\n    }\n    while( true ) {\n      destination = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      if (((uint)destination & 3) == 0) break;\n      isZeroLength = length == 0;\n      destPtr = destination;\n      length = length - 1;\n      if (isZeroLength) {\n        return;\n      }\n    }\n  }\n  if (3 < length) {\n    filledValue = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remainingLength = length;\n    destPtr = destination;\n    if (0xf < length) {\n      remainingLength = length - 0x10;\n      do {\n        *destPtr = filledValue;\n        destPtr[1] = filledValue;\n        destPtr[2] = filledValue;\n        destPtr[3] = filledValue;\n        destPtr = destPtr + 4;\n      } while (destPtr != (undefined4 *)((int)destination + (remainingLength & 0xfffffff0) + 0x10));\n      length = length & 0xf;\n      destination = destination + ((remainingLength >> 4) + 1) * 4;\n      remainingLength = length;\n      destPtr = destination;\n      if (length < 4) goto LAB_00082580;\n    }\n    do {\n      length = length - 4;\n      *destination = filledValue;\n      destination = destination + 1;\n    } while (3 < length);\n    destination = (undefined4 *)((int)destPtr + (remainingLength - 4 & 0xfffffffc) + 4);\n    length = remainingLength & 3;\n  }\nLAB_00082580:\n  if (length != 0) {\n    destPtr = destination;\n    do {\n      nextDestPtr = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      destPtr = nextDestPtr;\n    } while (nextDestPtr != (undefined4 *)(length + (int)destination));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082504": "copy_and_fill_memory_00082504",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "destPtr",
                "puVar2": "nextDestPtr",
                "uVar3": "filledValue",
                "uVar4": "remainingLength",
                "bVar5": "isZeroLength"
            },
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082598": {
            "entrypoint": "0x00082598",
            "current_name": "FUNC_00082598",
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "calling": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d00"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008259c": {
            "entrypoint": "0x0008259c",
            "current_name": "FUNC_0008259c",
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "calling": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d00"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000825a0": {
            "entrypoint": "0x000825a0",
            "current_name": "process_elf32_rel_array_000825a0",
            "code": "\nvoid process_elf32_rel_array_000825a0(undefined4 arg1,undefined4 arg2)\n\n{\n  FUN_000825b0(Elf32_Rel_ARRAY_20070000[140].r_offset,arg1,arg2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825a0": "process_elf32_rel_array_000825a0",
                "param_1": "arg1",
                "param_2": "arg2"
            },
            "calling": [
                "FUN_00081622"
            ],
            "called": [
                "FUN_000825b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825b0": {
            "entrypoint": "0x000825b0",
            "current_name": "expand_memory_block_000825b0",
            "code": "\nint * expandMemoryBlock_000825b0(undefined4 *output,int *input,uint size)\n\n{\n  dword temp1;\n  int *newBlock;\n  uint temp2;\n  int temp3;\n  uint blockSize;\n  int temp4;\n  int *blockPtr;\n  uint adjustedSize;\n  uint alignedSize;\n  int *result;\n  \n  if (input == (int *)0x0) {\n    newBlock = (int *)FUN_00081e14(output,size);\n    return newBlock;\n  }\n  FUNC_00082598();\n  blockSize = input[-1];\n  adjustedSize = blockSize & 0xfffffffc;\n  newBlock = input + -2;\n  if (size + 0xb < 0x17) {\n    alignedSize = 0x10;\n  }\n  else {\n    alignedSize = size + 0xb & 0xfffffff8;\n    if ((int)alignedSize < 0) goto LAB_0008267c;\n  }\n  if (alignedSize < size) {\nLAB_0008267c:\n    *output = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)adjustedSize < (int)alignedSize) {\n    temp1 = (int)newBlock + adjustedSize;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == temp1) {\n      temp2 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      temp1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(alignedSize + 0x10) <= (int)(temp2 + adjustedSize)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)newBlock + alignedSize;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp2 + adjustedSize) - alignedSize | 1;\n        input[-1] = alignedSize | input[-1] & 1U;\n        FUNC_0008259c(output);\n        return input;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp1 + 4) & 0xfffffffe) + temp1 + 4) & 1) == 0) {\n      temp2 = *(uint *)(temp1 + 4) & 0xfffffffc;\n      if ((int)alignedSize <= (int)(temp2 + adjustedSize)) {\n        temp4 = *(int *)(temp1 + 0xc);\n        temp3 = *(int *)(temp1 + 8);\n        *(int *)(temp3 + 0xc) = temp4;\n        *(int *)(temp4 + 8) = temp3;\n        adjustedSize = temp2 + adjustedSize;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      temp2 = 0;\n      temp1 = 0;\n    }\n    if (-1 < (int)(blockSize << 0x1f)) {\n      result = (int *)((int)newBlock - input[-2]);\n      blockSize = (result[1] & 0xfffffffcU) + adjustedSize;\n      if (temp1 != 0) {\n        if (temp1 == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(alignedSize + 0x10) <= (int)(temp2 + blockSize)) {\n            newBlock = result + 2;\n            temp3 = *newBlock;\n            temp4 = result[3];\n            adjustedSize = adjustedSize - 4;\n            *(int *)(temp3 + 0xc) = temp4;\n            *(int *)(temp4 + 8) = temp3;\n            if (adjustedSize < 0x25) {\n              blockPtr = newBlock;\n              if (0x13 < adjustedSize) {\n                result[2] = *input;\n                result[3] = input[1];\n                if (adjustedSize < 0x1c) {\n                  input = input + 2;\n                  blockPtr = result + 4;\n                }\n                else {\n                  result[4] = input[2];\n                  result[5] = input[3];\n                  if (adjustedSize == 0x24) {\n                    result[6] = input[4];\n                    blockPtr = input + 5;\n                    input = input + 6;\n                    result[7] = *blockPtr;\n                    blockPtr = result + 8;\n                  }\n                  else {\n                    input = input + 4;\n                    blockPtr = result + 6;\n                  }\n                }\n              }\n              *blockPtr = *input;\n              blockPtr[1] = input[1];\n              blockPtr[2] = input[2];\n            }\n            else {\n              FUN_00082438(newBlock,input);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)result + alignedSize;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp2 + blockSize) - alignedSize | 1;\n            result[1] = alignedSize | result[1] & 1U;\n            FUNC_0008259c(output);\n            return newBlock;\n          }\n        }\n        else {\n          temp2 = temp2 + blockSize;\n          if ((int)alignedSize <= (int)temp2) {\n            temp4 = *(int *)(temp1 + 0xc);\n            temp3 = *(int *)(temp1 + 8);\n            *(int *)(temp3 + 0xc) = temp4;\n            *(int *)(temp4 + 8) = temp3;\n            blockPtr = result + 2;\n            temp3 = *blockPtr;\n            temp4 = result[3];\n            blockSize = adjustedSize - 4;\n            *(int *)(temp3 + 0xc) = temp4;\n            *(int *)(temp4 + 8) = temp3;\n            adjustedSize = temp2;\n            if (blockSize < 0x25) {\n              newBlock = blockPtr;\n              if (0x13 < blockSize) {\n                result[2] = *input;\n                result[3] = input[1];\n                if (blockSize < 0x1c) {\n                  input = input + 2;\n                  newBlock = result + 4;\n                }\n                else {\n                  result[4] = input[2];\n                  result[5] = input[3];\n                  if (blockSize == 0x24) {\n                    result[6] = input[4];\n                    newBlock = input + 5;\n                    input = input + 6;\n                    result[7] = *newBlock;\n                    newBlock = result + 8;\n                  }\n                  else {\n                    input = input + 4;\n                    newBlock = result + 6;\n                  }\n                }\n              }\n              *newBlock = *input;\n              newBlock[1] = input[1];\n              newBlock[2] = input[2];\n              blockSize = result[1];\n              newBlock = result;\n              input = blockPtr;\n            }\n            else {\n              FUN_00082438(blockPtr,input);\n              blockSize = result[1];\n              newBlock = result;\n              input = blockPtr;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)alignedSize <= (int)blockSize) {\n        blockPtr = result + 2;\n        temp3 = *blockPtr;\n        temp4 = result[3];\n        temp2 = adjustedSize - 4;\n        *(int *)(temp3 + 0xc) = temp4;\n        *(int *)(temp4 + 8) = temp3;\n        adjustedSize = blockSize;\n        if (temp2 < 0x25) {\n          newBlock = blockPtr;\n          if (0x13 < temp2) {\n            result[2] = *input;\n            result[3] = input[1];\n            if (temp2 < 0x1c) {\n              input = input + 2;\n              newBlock = result + 4;\n            }\n            else {\n              result[4] = input[2];\n              result[5] = input[3];\n              if (temp2 == 0x24) {\n                result[6] = input[4];\n                newBlock = input + 5;\n                input = input + 6;\n                result[7] = *newBlock;\n                newBlock = result + 8;\n              }\n              else {\n                input = input + 4;\n                newBlock = result + 6;\n              }\n            }\n          }\n          *newBlock = *input;\n          newBlock[1] = input[1];\n          newBlock[2] = input[2];\n          blockSize = result[1];\n          newBlock = result;\n          input = blockPtr;\n        }\n        else {\n          FUN_00082438(blockPtr,input);\n          blockSize = result[1];\n          newBlock = result;\n          input = blockPtr;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    result = (int *)FUN_00081e14(output,size);\n    if (result == (int *)0x0) goto LAB_000826a4;\n    blockSize = input[-1];\n    if (result + -2 != (int *)((blockSize & 0xfffffffe) + (int)newBlock)) {\n      adjustedSize = adjustedSize - 4;\n      if (adjustedSize < 0x25) {\n        newBlock = input;\n        blockPtr = result;\n        if (0x13 < adjustedSize) {\n          *result = *input;\n          result[1] = input[1];\n          if (adjustedSize < 0x1c) {\n            newBlock = input + 2;\n            blockPtr = result + 2;\n          }\n          else {\n            result[2] = input[2];\n            result[3] = input[3];\n            if (adjustedSize == 0x24) {\n              result[4] = input[4];\n              result[5] = input[5];\n              newBlock = input + 6;\n              blockPtr = result + 6;\n            }\n            else {\n              newBlock = input + 4;\n              blockPtr = result + 4;\n            }\n          }\n        }\n        *blockPtr = *newBlock;\n        blockPtr[1] = newBlock[1];\n        blockPtr[2] = newBlock[2];\n      }\n      else {\n        FUN_00082438(result,input);\n      }\n      FUN_00083d9c(output,input);\n      goto LAB_000826a4;\n    }\n    adjustedSize = adjustedSize + (result[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  temp2 = adjustedSize - alignedSize;\n  result = input;\n  if (temp2 < 0x10) {\n    newBlock[1] = blockSize & 1 | adjustedSize;\n    *(uint *)((int)newBlock + adjustedSize + 4) = *(uint *)((int)newBlock + adjustedSize + 4) | 1;\n  }\n  else {\n    newBlock[1] = blockSize & 1 | alignedSize;\n    *(uint *)((int)newBlock + alignedSize + 4) = temp2 | 1;\n    *(uint *)((int)newBlock + temp2 + alignedSize + 4) = *(uint *)((int)newBlock + temp2 + alignedSize + 4) | 1;\n    FUN_00083d9c(output,(int)newBlock + alignedSize + 8);\n  }\nLAB_000826a4:\n  FUNC_0008259c(output);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000825b0": "expand_memory_block_000825b0",
                "param_1": "output",
                "param_2": "input",
                "param_3": "size",
                "dVar1": "temp1",
                "piVar2": "newBlock",
                "uVar3": "temp2",
                "iVar4": "temp3",
                "uVar5": "blockSize",
                "iVar6": "temp4",
                "piVar7": "blockPtr",
                "uVar8": "adjustedSize",
                "uVar9": "alignedSize",
                "piVar10": "result"
            },
            "calling": [
                "FUN_000825a0",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_00082438",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082970": {
            "entrypoint": "0x00082970",
            "current_name": "check_and_assign_value_00082970",
            "code": "\nvoid checkAndAssignValue_00082970(int *result,undefined4 inputValue)\n\n{\n  int returnedValue;\n  \n  DAT_200711bc = 0;\n  returnedValue = FUN_0008118c(inputValue);\n  if ((returnedValue == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082970": "check_and_assign_value_00082970",
                "param_1": "result",
                "param_2": "inputValue",
                "iVar1": "returnedValue"
            },
            "calling": [
                "FUN_00081e14",
                "FUN_00083d00"
            ],
            "called": [
                "FUN_0008118c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082994": {
            "entrypoint": "0x00082994",
            "current_name": "copy_string_with_alignment_check_00082994",
            "code": "\nvoid copyStringWithAlignmentCheck_00082994(uint *dest,uint *src)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *nextSrc;\n  uint *nextSrcAligned;\n  uint currentWord;\n  uint temp;\n  uint *nextDest;\n  bool isZeroByte;\n  \n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      currentChar = *(char *)src;\n      *(char *)dest = currentChar;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    nextSrcAligned = src;\n    if (((uint)src & 1) != 0) {\n      nextSrcAligned = (uint *)((int)src + 1);\n      currentChar = *(char *)src;\n      *(char *)dest = currentChar;\n      dest = (uint *)((int)dest + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    src = nextSrcAligned;\n    if (((uint)nextSrcAligned & 2) != 0) {\n      src = (uint *)((int)nextSrcAligned + 2);\n      currentShort = *(ushort *)nextSrcAligned;\n      isZeroByte = (currentShort & 0xff) == 0;\n      if (isZeroByte) {\n        *(char *)dest = (char)currentShort;\n      }\n      else {\n        *(ushort *)dest = currentShort;\n        isZeroByte = (currentShort & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (isZeroByte) {\n        return;\n      }\n    }\n  }\n  currentWord = *src;\n  nextSrcAligned = src + 1;\n  nextDest = dest;\n  if (((uint)src & 4) != 0) {\n    if ((currentWord + 0xfefefeff & ~currentWord & 0x80808080) != 0) goto checkAlignmentLoop;\n    nextDest = dest + 1;\n    *dest = currentWord;\n    nextSrcAligned = src + 2;\n    currentWord = src[1];\n  }\n  while( true ) {\n    nextSrc = nextSrcAligned + 1;\n    temp = *nextSrcAligned;\n    dest = nextDest;\n    if ((currentWord + 0xfefefeff & ~currentWord & 0x80808080) != 0) break;\n    dest = nextDest + 1;\n    *nextDest = currentWord;\n    currentWord = temp;\n    if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) break;\n    nextSrcAligned = nextSrcAligned + 2;\n    currentWord = *nextSrc;\n    nextDest = nextDest + 2;\n    *dest = temp;\n  }\ncheckAlignmentLoop:\n  do {\n    *(char *)dest = (char)currentWord;\n    temp = currentWord & 0xff;\n    currentWord = currentWord >> 8 | currentWord << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (temp != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082994": "copy_string_with_alignment_check_00082994",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "nextSrc",
                "puVar4": "nextSrcAligned",
                "uVar5": "currentWord",
                "uVar6": "temp",
                "puVar7": "nextDest",
                "bVar8": "isZeroByte",
                "LAB_000829f8": "checkAlignmentLoop"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082a50": {
            "entrypoint": "0x00082a50",
            "current_name": "count_leading_zeros_00082a50",
            "code": "\nint countLeadingZeros_00082a50(uint num)\n\n{\n  int leadingZeros;\n  uint *ptrWords;\n  uint word;\n  bool isZero;\n  \n  ptrWords = (uint *)(num & 0xfffffffc);\n  leadingZeros = -(num & 3);\n  word = *ptrWords;\n  if ((num & 3) != 0) {\n    word = word | 0xffffffffU >> ((leadingZeros + 4U & 0x1f) << 3);\n  }\n  while (ptrWords = ptrWords + 1, (word + 0xfefefeff & ~word & 0x80808080) == 0) {\n    leadingZeros = leadingZeros + 4;\n    word = *ptrWords;\n  }\n  isZero = (word & 0xff) == 0;\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (word & 0xff00) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (word & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_00082a50": "count_leading_zeros_00082a50",
                "param_1": "num",
                "iVar1": "leadingZeros",
                "puVar2": "ptrWords",
                "uVar3": "word",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "entrypoint": "0x00082ac0",
            "current_name": "process_data_00082ac0",
            "code": "\nint processData_00082ac0(undefined4 input,int size,int **data)\n\n{\n  int *currentData;\n  int result;\n  int *currentSize;\n  uint counter;\n  undefined4 *currentPointer;\n  uint value;\n  uint shiftedValue;\n  \n  if (-1 < *(int *)(size + 100) << 0x12) {\n    result = FUN_00083f34();\n    data[2] = (int *)0x0;\n    data[1] = (int *)0x0;\n    return result;\n  }\n  currentSize = data[2];\n  currentData = *data;\n  while (currentSize != (int *)0x0) {\n    value = currentData[1];\n    shiftedValue = value >> 2;\n    if (shiftedValue != 0) {\n      currentPointer = (undefined4 *)(*currentData + -4);\n      counter = 0;\n      do {\n        currentPointer = currentPointer + 1;\n        result = FUN_00083c40(input,*currentPointer,size);\n        counter = counter + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (shiftedValue != counter);\n      currentSize = data[2];\n    }\n    currentSize = (int *)((int)currentSize - (value & 0xfffffffc));\n    data[2] = currentSize;\n    currentData = currentData + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  data[2] = (int *)0x0;\n  data[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082ac0": "process_data_00082ac0",
                "param_1": "input",
                "param_2": "size",
                "param_3": "data",
                "piVar1": "currentData",
                "iVar2": "result",
                "piVar3": "currentSize",
                "uVar4": "counter",
                "puVar5": "currentPointer",
                "uVar6": "value",
                "uVar7": "shiftedValue"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00083c40",
                "FUN_00083f34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082b38": {
            "entrypoint": "0x00082b38",
            "current_name": "parse_format_string_00082b38",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint parseFormatString_00082b38(int arg1,int arg2,int *******formatString,int **args)\n\n{\n  bool isLeftJustified;\n  bool isSignShown;\n  bool isSpaceShown;\n  char signCharacter;\n  bool isZeroPadded;\n  int ********formatSpecifierPointer;\n  int *currentArgPointer;\n  int returnValue;\n  char formatSpecifier;\n  int *******currentFormatPointer;\n  uint digit;\n  int **currentArg;\n  uint flags;\n  uint uVar14;\n  int itemCount;\n  int ********formatSpecifierPointer2;\n  int itemCount2;\n  int *******itemSize;\n  int *currentArgPointer2;\n  int *******tempFormatSpecifierPointer;\n  uint tempFlags;\n  int *tempArgPointer;\n  int *******tempItemSize;\n  undefined4 tempVar;\n  int ********tempFormatSpecifierPointer3;\n  bool hasNonzeroArg;\n  longlong longlongVar;\n  int *******currentItemCount;\n  int *******maxItemCount;\n  int **argsPointer;\n  int itemSize;\n  char *digits;\n  char signFlag;\n  undefined paddingCharacter;\n  undefined spaceFlag;\n  int ********currentFormatSpecifierPointer;\n  int itemCount;\n  int *******totalSize;\n  undefined comma;\n  char tempChar;\n  undefined paddingFlag;\n  undefined tempBuffer [4];\n  int *******tempBufferArray [16];\n  \n  if ((arg1 != 0) && (*(int *)(arg1 + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  flags = (uint)*(ushort *)(arg2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(arg2 + 0xc) << 0x12)) {\n    flags = flags | 0x2000;\n    *(short *)(arg2 + 0xc) = (short)flags;\n    *(uint *)(arg2 + 100) = *(uint *)(arg2 + 100) & 0xffffdfff;\n  }\n  if (((int)(flags << 0x1c) < 0) && (*(int *)(arg2 + 0x10) != 0)) {\n    if ((flags & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    returnValue = FUN_00083808(arg1,arg2);\n    if (returnValue != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(arg2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(arg2 + 0xe)) {\n    returnValue = FUN_0008378c(arg1,arg2,formatString,args);\n    return returnValue;\n  }\nLAB_00082b8a:\n  digits = (char *)0x0;\n  totalSize = (int *******)0x0;\n  itemCount = 0;\n  itemSize = 0;\n  formatSpecifierPointer = (int ********)tempBuffer;\n  argsPointer = args;\n  currentFormatSpecifierPointer = (int ********)tempBuffer;\nLAB_00082b9e:\n  currentFormatPointer = formatString;\n  if ((*(char *)formatString != '\\0') && (*(char *)formatString != '%')) {\n    do {\n      currentFormatPointer = (int *******)((int)currentFormatPointer + 1);\n      if (*(char *)currentFormatPointer == '\\0') break;\n    } while (*(char *)currentFormatPointer != '%');\n    tempFormatSpecifierPointer = (int *******)((int)currentFormatPointer - (int)formatString);\n    if (tempFormatSpecifierPointer != (int *******)0x0) {\n      itemCount = itemCount + 1;\n      totalSize = (int *******)((int)totalSize + (int)tempFormatSpecifierPointer);\n      *formatSpecifierPointer = formatString;\n      formatSpecifierPointer[1] = tempFormatSpecifierPointer;\n      if (itemCount < 8) {\n        formatSpecifierPointer = formatSpecifierPointer + 2;\n      }\n      else {\n        if (totalSize == (int *******)0x0) {\n          itemSize = itemSize + (int)tempFormatSpecifierPointer;\n          itemCount = 0;\n          formatSpecifierPointer = (int ********)tempBuffer;\n          goto LAB_00082bee;\n        }\n        returnValue = FUN_00082ac0(arg1,arg2,&currentFormatSpecifierPointer);\n        formatSpecifierPointer = (int ********)tempBuffer;\n        if (returnValue != 0) goto LAB_000833de;\n      }\n      itemSize = itemSize + (int)tempFormatSpecifierPointer;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)currentFormatPointer != '\\0') {\n    signFlag = '\\0';\n    uVar14 = (uint)*(byte *)((int)currentFormatPointer + 1);\n    flags = 0;\n    isZeroPadded = false;\n    isSignShown = false;\n    isLeftJustified = false;\n    isSpaceShown = false;\n    hasNonzeroArg = false;\n    tempFormatSpecifierPointer = (int *******)0x0;\n    maxItemCount = (int *******)0xffffffff;\n    formatString = (int *******)((int)currentFormatPointer + 1);\nLAB_00082c12:\n    formatString = (int *******)((int)formatString + 1);\nLAB_00082c16:\n    switch(uVar14) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar14 != 0) {\n        currentItemCount = (int *******)0x1;\n        maxItemCount = (int *******)0x1;\n        tempFormatSpecifierPointer3 = (int ********)&comma;\n        comma = (char)uVar14;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      isSpaceShown = true;\n      uVar14 = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x2a:\n      tempFormatSpecifierPointer = (int *******)*argsPointer;\n      argsPointer = argsPointer + 1;\n      if ((int)tempFormatSpecifierPointer < 0) {\n        tempFormatSpecifierPointer = (int *******)-(int)tempFormatSpecifierPointer;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar14 = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar14 = (uint)*(byte *)formatString;\n      signFlag = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      flags = flags | 4;\n      uVar14 = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar14 = (uint)*(byte *)formatString;\n      currentFormatPointer = (int *******)((int)formatString + 1);\n      if (uVar14 == 0x2a) {\n        uVar14 = (uint)*(byte *)((int)formatString + 1);\n        maxItemCount = (int *******)*argsPointer;\n        argsPointer = argsPointer + 1;\n        formatString = currentFormatPointer;\n        if ((int)maxItemCount < 0) {\n          maxItemCount = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      digit = uVar14 - 0x30;\n      if (digit < 10) {\n        tempFlags = 0;\n        do {\n          formatString = (int *******)((int)currentFormatPointer + 1);\n          uVar14 = (uint)*(byte *)currentFormatPointer;\n          tempFlags = digit + tempFlags * 10;\n          digit = uVar14 - 0x30;\n          currentFormatPointer = formatString;\n        } while (digit < 10);\n        maxItemCount = (int *******)(tempFlags | (int)tempFlags >> 0x1f);\n      }\n      else {\n        maxItemCount = (int *******)0x0;\n        formatString = currentFormatPointer;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      flags = flags | 0x80;\n      uVar14 = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      isSignShown = true;\n      if (isLeftJustified == false) goto LAB_00083028;\nLAB_00082e98:\n      argsPointer = (int **)((int)argsPointer + 7U & 0xfffffff8);\n      currentArgPointer2 = *argsPointer;\n      tempArgPointer = argsPointer[1];\n      argsPointer = argsPointer + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      isSignShown = true;\n      if (isLeftJustified != false) goto LAB_00082d42;\nLAB_00082f2a:\n      returnValue = (uint)isSignShown << 4;\n      itemCount = (uint)isLeftJustified << 5;\n      if ((isSignShown == 0) && (itemCount = (uint)hasNonzeroArg << 6, hasNonzeroArg != 0)) {\n        currentArgPointer2 = (int *)(uint)*(ushort *)argsPointer;\n        argsPointer = argsPointer + 1;\n        tempArgPointer = (int *)0x0;\n      }\n      else {\n        returnValue = itemCount;\n        currentArgPointer2 = *argsPointer;\n        argsPointer = argsPointer + 1;\n        tempArgPointer = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      isSignShown = true;\n      if (isLeftJustified != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((isSignShown) || (hasNonzeroArg == false)) {\n        returnValue = 1;\n        currentArgPointer2 = *argsPointer;\n        argsPointer = argsPointer + 1;\n        tempArgPointer = (int *)0x0;\n      }\n      else {\n        tempArgPointer = (int *)0x0;\n        currentArgPointer2 = (int *)(uint)*(ushort *)argsPointer;\n        argsPointer = argsPointer + 1;\n        returnValue = 1;\n      }\n      break;\n    case 0x58:\n      digits = \"0123456789ABCDEF\";\n      if (isLeftJustified == false) goto LAB_00083196;\nLAB_00082fb6:\n      currentArg = (int **)((int)argsPointer + 7U & 0xfffffff8);\n      argsPointer = currentArg + 2;\n      currentArgPointer2 = *currentArg;\n      tempArgPointer = currentArg[1];\n      goto LAB_00082fca;\n    case 99:\n      currentArgPointer2 = *argsPointer;\n      argsPointer = argsPointer + 1;\n      currentItemCount = (int *******)0x1;\n      comma = SUB41(currentArgPointer2,0);\n      maxItemCount = (int *******)0x1;\n      tempFormatSpecifierPointer3 = (int ********)&comma;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (isLeftJustified != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((isSignShown == false) && (hasNonzeroArg != false)) {\n        currentArgPointer2 = (int *)(int)*(short *)argsPointer;\n        argsPointer = argsPointer + 1;\n        tempArgPointer = (int *)((int)currentArgPointer2 >> 0x1f);\n      }\n      else {\n        currentArgPointer2 = *argsPointer;\n        argsPointer = argsPointer + 1;\n        tempArgPointer = (int *)((int)currentArgPointer2 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)tempArgPointer < 0) {\n        hasNonzeroArg = currentArgPointer2 != (int *)0x0;\n        currentArgPointer2 = (int *)-(int)currentArgPointer2;\n        tempArgPointer = (int *)(-(int)tempArgPointer - (uint)hasNonzeroArg);\n        signFlag = '-';\n        signCharacter = '-';\n        returnValue = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)maxItemCount) {\n        flags = flags & 0xffffff7f;\n      }\n      isZeroPadded = false;\n      uVar14 = (uint)currentArgPointer2 | (uint)tempArgPointer;\n      returnValue = 1;\n      signCharacter = signFlag;\n      goto joined_r0x00082d78;\n    case 0x68:\n      hasNonzeroArg = true;\n      uVar14 = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar14 = (uint)*(byte *)formatString;\n      if (uVar14 == 0x6c) {\n        isLeftJustified = true;\n        uVar14 = (uint)*(byte *)((int)formatString + 1);\n        formatString = (int *******)((int)formatString + 1);\n      }\n      else {\n        isSignShown = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (isLeftJustified == false) {\n        if (isSignShown == false) {\n          if (hasNonzeroArg) {\n            currentArgPointer2 = *argsPointer;\n            argsPointer = argsPointer + 1;\n            *(short *)currentArgPointer2 = (short)itemSize;\n          }\n          else {\n            currentArgPointer2 = *argsPointer;\n            argsPointer = argsPointer + 1;\n            *currentArgPointer2 = itemSize;\n          }\n        }\n        else {\n          currentArgPointer2 = *argsPointer;\n          argsPointer = argsPointer + 1;\n          *currentArgPointer2 = itemSize;\n        }\n      }\n      else {\n        currentArgPointer2 = *argsPointer;\n        argsPointer = argsPointer + 1;\n        *currentArgPointer2 = itemSize;\n        currentArgPointer2[1] = itemSize >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (isLeftJustified == false) goto LAB_00082f2a;\nLAB_00082d42:\n      currentArg = (int **)((int)argsPointer + 7U & 0xfffffff8);\n      argsPointer = currentArg + 2;\n      currentArgPointer2 = *currentArg;\n      tempArgPointer = currentArg[1];\n      returnValue = 0;\n      break;\n    case 0x70:\n      currentArgPointer2 = *argsPointer;\n      argsPointer = argsPointer + 1;\n      spaceFlag = 0x78;\n      isZeroPadded = true;\n      tempArgPointer = (int *)0x0;\n      paddingCharacter = 0x30;\n      digits = \"0123456789abcdef\";\n      returnValue = 2;\n      break;\n    case 0x71:\n      isLeftJustified = true;\n      uVar14 = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x73:\n      tempFormatSpecifierPointer3 = (int ********)*argsPointer;\n      signFlag = '\\0';\n      argsPointer = argsPointer + 1;\n      if (tempFormatSpecifierPointer3 != (int ********)0x0) {\n        if ((int)maxItemCount < 0) {\n          maxItemCount = (int *******)FUN_00082a50(tempFormatSpecifierPointer3);\n          currentFormatPointer = (int *******)0x0;\n          signCharacter = signFlag;\n        }\n        else {\n          returnValue = FUN_00084384(tempFormatSpecifierPointer3,0,maxItemCount);\n          signCharacter = signFlag;\n          if (returnValue == 0) {\n            currentFormatPointer = (int *******)0x0;\n          }\n          else {\n            itemSize = (int *******)(returnValue - (int)tempFormatSpecifierPointer3);\n            if ((int)maxItemCount <= (int)(int *******)(returnValue - (int)tempFormatSpecifierPointer3)) {\n              itemSize = maxItemCount;\n            }\n            currentFormatPointer = (int *******)0x0;\n            maxItemCount = itemSize;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < maxItemCount) {\n        maxItemCount = (int *******)0x6;\n      }\n      currentItemCount = (int *******)((uint)maxItemCount & ~((int)maxItemCount >> 0x1f));\n      tempFormatSpecifierPointer3 = (int ********)&UNK_00085840;\nLAB_00083012:\n      signFlag = '\\0';\n      currentFormatPointer = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!isLeftJustified) goto LAB_00082f7c;\nLAB_00082e62:\n      currentArg = (int **)((int)argsPointer + 7U & 0xfffffff8);\n      argsPointer = currentArg + 2;\n      currentArgPointer2 = *currentArg;\n      tempArgPointer = currentArg[1];\n      returnValue = 1;\n      break;\n    case 0x78:\n      digits = \"0123456789abcdef\";\n      if (isLeftJustified != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((isSignShown == false) && (hasNonzeroArg != false)) {\n        tempArgPointer = (int *)0x0;\n        currentArgPointer2 = (int *)(uint)*(ushort *)argsPointer;\n        argsPointer = argsPointer + 1;\n      }\n      else {\n        currentArgPointer2 = *argsPointer;\n        argsPointer = argsPointer + 1;\n        tempArgPointer = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((isSpaceShown) && (((uint)currentArgPointer2 | (uint)tempArgPointer) != 0)) {\n        isZeroPadded = true;\n        paddingCharacter = 0x30;\n        returnValue = 2;\n        spaceFlag = (char)uVar14;\n      }\n      else {\n        returnValue = 2;\n      }\n    }\n    signFlag = '\\0';\n    signCharacter = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)maxItemCount) {\n      flags = flags & 0xffffff7f;\n    }\n    uVar14 = (uint)currentArgPointer2 | (uint)tempArgPointer;\njoined_r0x00082d78:\n    longlongVar = CONCAT44(tempArgPointer,currentArgPointer2);\n    currentFormatPointer = maxItemCount;\n    if ((uVar14 == 0) && (maxItemCount == (int *******)0x0)) {\n      tempFormatSpecifierPointer3 = (int ********)tempBuffer;\n      if ((returnValue != 0) || (!isSpaceShown)) goto LAB_00082da0;\n      tempFormatSpecifierPointer3 = (int ********)(&tempChar + 1);\n      paddingFlag = '0';\n      goto LAB_00082d9a;\n    }\n    if (returnValue == 1) {\n      if (tempArgPointer != (int *)0x0 || (int *)0x9 < currentArgPointer2) {\n        formatSpecifierPointer2 = (int ********)(&tempChar + 1);\n        do {\n          tempFormatSpecifierPointer3 = formatSpecifierPointer2;\n          tempVar = (undefined4)((ulonglong)longlongVar >> 0x20);\n          formatSpecifier = '\\n';\n          FUN_00084750((int)longlongVar,tempVar,10,0);\n          *(char *)tempFormatSpecifierPointer3 = formatSpecifier + '0';\n          longlongVar = FUN_00084750((int)longlongVar,tempVar,10,0);\n          formatSpecifierPointer2 = (int ********)((int)tempFormatSpecifierPointer3 + -1);\n        } while (longlongVar != 0);\n        maxItemCount = (int *******)((int)tempBuffer - (int)tempFormatSpecifierPointer3);\n        goto LAB_00082da0;\n      }\n      paddingFlag = (char)currentArgPointer2 + '0';\n      tempFormatSpecifierPointer3 = (int ********)(&tempChar + 1);\n      goto LAB_0008351e;\n    }\n    formatSpecifierPointer2 = (int ********)(&tempChar + 1);\n    if (returnValue != 2) goto LAB_0008337e;\n    do {\n      tempFormatSpecifierPointer3 = formatSpecifierPointer2;\n      uVar14 = (uint)currentArgPointer2 & 0xf;\n      currentArgPointer2 = (int *)((uint)currentArgPointer2 >> 4 | (int)tempArgPointer << 0x1c);\n      tempArgPointer = (int *)((uint)tempArgPointer >> 4);\n      *(char *)tempFormatSpecifierPointer3 = digits[uVar14];\n      formatSpecifierPointer2 = (int ********)((int)tempFormatSpecifierPointer3 + -1);\n    } while (((uint)currentArgPointer2 | (uint)tempArgPointer) != 0);\n    maxItemCount = (int *******)((int)tempBuffer - (int)tempFormatSpecifierPointer3);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (totalSize != (int *******)0x0) {\n    FUN_00082ac0(arg1,arg2,&currentFormatSpecifierPointer);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(arg2 + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return itemSize;\nLAB_0008337e:\n  do {\n    tempFormatSpecifierPointer3 = formatSpecifierPointer2;\n    currentArgPointer = (int *)((uint)currentArgPointer2 >> 3 | (int)tempArgPointer << 0x1d);\n    tempArgPointer = (int *)((uint)tempArgPointer >> 3);\n    returnValue = ((uint)currentArgPointer2 & 7) + 0x30;\n    *(char *)tempFormatSpecifierPointer3 = (char)returnValue;\n    formatSpecifierPointer2 = (int ********)((int)tempFormatSpecifierPointer3 + -1);\n    currentArgPointer2 = currentArgPointer;\n  } while (((uint)currentArgPointer | (uint)tempArgPointer) != 0);\n  if (isSpaceShown) {\n    if (returnValue == 0x30) {\nLAB_00082d9a:\n      maxItemCount = (int *******)((int)tempBuffer - (int)tempFormatSpecifierPointer3);\n    }\n    else {\n      *(undefined *)((int)tempFormatSpecifierPointer3 + -1) = 0x30;\n      tempFormatSpecifierPointer3 = formatSpecifierPointer2;\n      maxItemCount = (int *******)((int)tempBuffer - (int)formatSpecifierPointer2);\n    }\n  }\n  else {\nLAB_0008351e:\n    maxItemCount = (int *******)((int)tempBuffer - (int)tempFormatSpecifierPointer3);\n  }\nLAB_00082da0:\n  currentItemCount = maxItemCount;\n  if ((int)maxItemCount < (int)currentFormatPointer) {\n    currentItemCount = currentFormatPointer;\n  }\n  if (signCharacter != '\\0') {\n    currentItemCount = (int *******)((int)currentItemCount + 1);\n  }\nLAB_00082dba:\n  if (isZeroPadded) {\n    currentItemCount = (int *******)((int)currentItemCount + 2);\n  }\n  if ((flags == 0) &&\n     (itemSize = (int *******)((int)tempFormatSpecifierPointer - (int)currentItemCount), 0 < (int)itemSize)) {\n    if ((int)itemSize < 0x11) {\n      itemCount = itemCount + 1;\n    }\n    else {\n      do {\n        tempItemSize = itemSize;\n        returnValue = itemCount + 1;\n        totalSize = totalSize + 4;\n        *formatSpecifierPointer = (int *******)0x85808;\n        formatSpecifierPointer[1] = (int *******)0x10;\n        if (returnValue < 8) {\n          itemCount = itemCount + 2;\n          formatSpecifierPointer = formatSpecifierPointer + 2;\n          itemCount = returnValue;\n        }\n        else if (totalSize == (int *******)0x0) {\n          itemCount = 1;\n          formatSpecifierPointer = (int ********)tempBuffer;\n          itemCount = 0;\n        }\n        else {\n          itemCount = returnValue;\n          returnValue = FUN_00082ac0(arg1,arg2,&currentFormatSpecifierPointer);\n          if (returnValue != 0) goto LAB_000833de;\n          itemCount = itemCount + 1;\n          formatSpecifierPointer = (int ********)tempBuffer;\n        }\n        itemSize = tempItemSize + -4;\n      } while (0x10 < (int)itemSize);\n      itemSize = tempItemSize + -4;\n      itemCount = itemCount;\n    }\n    totalSize = (int *******)((int)totalSize + (int)itemSize);\n    *formatSpecifierPointer = (int *******)0x85808;\n    formatSpecifierPointer[1] = itemSize;\n    if (itemCount < 8) {\n      returnValue = itemCount + 1;\n      formatSpecifierPointer = formatSpecifierPointer + 2;\n    }\n    else if (totalSize == (int *******)0x0) {\n      returnValue = 1;\n      itemCount = 0;\n      formatSpecifierPointer = (int ********)tempBuffer;\n    }\n    else {\n      returnValue = FUN_00082ac0(arg1,arg2,&currentFormatSpecifierPointer);\n      if (returnValue != 0) goto LAB_000833de;\n      returnValue = itemCount + 1;\n      formatSpecifierPointer = (int ********)tempBuffer;\n    }\n  }\n  else {\n    returnValue = itemCount + 1;\n  }\n  itemCount = returnValue;\n  if (signFlag != '\\0') {\n    totalSize = (int *******)((int)totalSize + 1);\n    itemCount = 1;\n    *formatSpecifierPointer = (int *******)&signFlag;\n    formatSpecifierPointer[1] = (int *******)0x1;\n    itemCount = returnValue;\n    if (returnValue < 8) {\n      itemCount = returnValue + 1;\n      formatSpecifierPointer = formatSpecifierPointer + 2;\n    }\n    else if (totalSize == (int *******)0x0) {\n      itemCount = 0;\n      formatSpecifierPointer = (int ********)tempBuffer;\n    }\n    else {\n      returnValue = FUN_00082ac0(arg1,arg2,&currentFormatSpecifierPointer);\n      if (returnValue != 0) goto LAB_000833de;\n      itemCount = itemCount + 1;\n      formatSpecifierPointer = (int ********)tempBuffer;\n    }\n  }\n  returnValue = itemCount;\n  itemCount2 = itemCount;\n  if (isZeroPadded) {\n    totalSize = (int *******)((int)totalSize + 2);\n    *formatSpecifierPointer = (int *******)&paddingCharacter;\n    formatSpecifierPointer[1] = (int *******)0x2;\n    if (itemCount < 8) {\n      returnValue = itemCount + 1;\n      itemCount2 = itemCount;\n      formatSpecifierPointer = formatSpecifierPointer + 2;\n    }\n    else if (totalSize == (int *******)0x0) {\n      returnValue = 1;\n      itemCount2 = 0;\n      formatSpecifierPointer = (int ********)tempBuffer;\n    }\n    else {\n      itemCount = itemCount;\n      returnValue = FUN_00082ac0(arg1,arg2,&currentFormatSpecifierPointer);\n      if (returnValue != 0) goto LAB_000833de;\n      returnValue = itemCount + 1;\n      itemCount2 = itemCount;\n      formatSpecifierPointer = (int ********)tempBuffer;\n    }\n  }\n  itemCount = itemCount2;\n  if ((flags == 0x80) &&\n     (itemSize = (int *******)((int)tempFormatSpecifierPointer - (int)currentItemCount), 0 < (int)itemSize)) {\n    if (0x10 < (int)itemSize) {\n      do {\n        while( true ) {\n          tempItemSize = itemSize;\n          itemCount = itemCount2 + 1;\n          totalSize = totalSize + 4;\n          *formatSpecifierPointer = (int *******)&DAT_00085848;\n          formatSpecifierPointer[1] = (int *******)0x10;\n          if (7 < itemCount) break;\n          returnValue = itemCount2 + 2;\n          formatSpecifierPointer = formatSpecifierPointer + 2;\nLAB_0008348e:\n          itemCount2 = itemCount;\n          itemSize = tempItemSize + -4;\n          if ((int)(tempItemSize + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (totalSize != (int *******)0x0) {\n          returnValue = FUN_00082ac0(arg1,arg2,&currentFormatSpecifierPointer);\n          if (returnValue == 0) {\n            returnValue = itemCount + 1;\n            formatSpecifierPointer = (int ********)tempBuffer;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        returnValue = 1;\n        itemCount2 = 0;\n        itemSize = tempItemSize + -4;\n        formatSpecifierPointer = (int ********)tempBuffer;\n      } while (0x10 < (int)(tempItemSize + -4));\nLAB_000834b4:\n      itemSize = tempItemSize + -4;\n    }\n    totalSize = (int *******)((int)totalSize + (int)itemSize);\n    *formatSpecifierPointer = (int *******)&DAT_00085848;\n    formatSpecifierPointer[1] = itemSize;\n    itemCount = returnValue;\n    if (returnValue < 8) {\n      returnValue = returnValue + 1;\n      formatSpecifierPointer = formatSpecifierPointer + 2;\n    }\n    else if (totalSize == (int *******)0x0) {\n      returnValue = 1;\n      itemCount = 0;\n      formatSpecifierPointer = (int ********)tempBuffer;\n    }\n    else {\n      returnValue = FUN_00082ac0(arg1,arg2,&currentFormatSpecifierPointer);\n      if (returnValue != 0) goto LAB_000833de;\n      returnValue = itemCount + 1;\n      formatSpecifierPointer = (int ********)tempBuffer;\n    }\n  }\n  currentFormatPointer = (int *******)((int)currentFormatPointer - (int)maxItemCount);\n  formatSpecifierPointer2 = (int ********)tempBuffer;\n  if ((int)currentFormatPointer < 1) {\nLAB_000832c6:\n    totalSize = (int *******)((int)totalSize + (int)maxItemCount);\n    *formatSpecifierPointer = (int *******)tempFormatSpecifierPointer3;\n    formatSpecifierPointer[1] = maxItemCount;\n    maxItemCount = totalSize;\n    itemCount = returnValue;\n    if (returnValue < 8) goto LAB_0008345a;\n    if (totalSize == (int *******)0x0) {\n      itemCount = 0;\n    }\n    else {\n      returnValue = FUN_00082ac0(arg1,arg2,&currentFormatSpecifierPointer);\n      if (returnValue != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    itemCount = itemCount;\n    if (0x10 < (int)currentFormatPointer) {\n      do {\n        while( true ) {\n          itemSize = currentFormatPointer;\n          itemCount = itemCount + 1;\n          totalSize = totalSize + 4;\n          *formatSpecifierPointer = (int *******)&DAT_00085848;\n          formatSpecifierPointer[1] = (int *******)0x10;\n          if (7 < itemCount) break;\n          returnValue = itemCount + 2;\n          formatSpecifierPointer = formatSpecifierPointer + 2;\nLAB_00083282:\n          itemCount = itemCount;\n          currentFormatPointer = itemSize + -4;\n          if ((int)(itemSize + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (totalSize != (int *******)0x0) {\n          returnValue = FUN_00082ac0(arg1,arg2,&currentFormatSpecifierPointer);\n          if (returnValue == 0) {\n            returnValue = itemCount + 1;\n            formatSpecifierPointer = (int ********)tempBuffer;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        returnValue = 1;\n        formatSpecifierPointer = (int ********)tempBuffer;\n        itemCount = 0;\n        currentFormatPointer = itemSize + -4;\n      } while (0x10 < (int)(itemSize + -4));\nLAB_000832aa:\n      currentFormatPointer = itemSize + -4;\n    }\n    totalSize = (int *******)((int)totalSize + (int)currentFormatPointer);\n    *formatSpecifierPointer = (int *******)&DAT_00085848;\n    formatSpecifierPointer[1] = currentFormatPointer;\n    if (returnValue < 8) {\n      returnValue = returnValue + 1;\n      formatSpecifierPointer = formatSpecifierPointer + 2;\n      goto LAB_000832c6;\n    }\n    if (totalSize != (int *******)0x0) {\n      itemCount = returnValue;\n      returnValue = FUN_00082ac0(arg1,arg2,&currentFormatSpecifierPointer);\n      if (returnValue != 0) goto LAB_000833de;\n      returnValue = itemCount + 1;\n      formatSpecifierPointer = (int ********)tempBuffer;\n      goto LAB_000832c6;\n    }\n    tempBufferArray[0] = maxItemCount;\n    itemCount = 1;\n    formatSpecifierPointer = (int ********)tempBuffer;\n    tempBuffer = (undefined  [4])tempFormatSpecifierPointer3;\nLAB_0008345a:\n    formatSpecifierPointer2 = formatSpecifierPointer + 2;\n    totalSize = maxItemCount;\n  }\n  if (((flags & 4) != 0) &&\n     (currentFormatPointer = (int *******)((int)tempFormatSpecifierPointer - (int)currentItemCount), 0 < (int)currentFormatPointer)) {\n    returnValue = itemCount;\n    if ((int)currentFormatPointer < 0x11) {\n      itemCount = itemCount + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          itemCount = returnValue + 1;\n          totalSize = totalSize + 4;\n          *formatSpecifierPointer2 = (int *******)0x85808;\n          formatSpecifierPointer2[1] = (int *******)0x10;\n          if (7 < itemCount) break;\n          itemCount = returnValue + 2;\n          formatSpecifierPointer2 = formatSpecifierPointer2 + 2;\nLAB_00083316:\n          currentFormatPointer = currentFormatPointer + -4;\n          returnValue = itemCount;\n          if ((int)currentFormatPointer < 0x11) goto LAB_0008333e;\n        }\n        if (totalSize != (int *******)0x0) {\n          returnValue = FUN_00082ac0(arg1,arg2,&currentFormatSpecifierPointer);\n          if (returnValue == 0) {\n            itemCount = itemCount + 1;\n            formatSpecifierPointer2 = (int ********)tempBuffer;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        currentFormatPointer = currentFormatPointer + -4;\n        itemCount = 1;\n        returnValue = 0;\n        formatSpecifierPointer2 = (int ********)tempBuffer;\n      } while (0x10 < (int)currentFormatPointer);\n    }\nLAB_0008333e:\n    totalSize = (int *******)((int)totalSize + (int)currentFormatPointer);\n    *formatSpecifierPointer2 = (int *******)0x85808;\n    formatSpecifierPointer2[1] = currentFormatPointer;\n    itemCount = itemCount;\n    if (7 < itemCount) {\n      if (totalSize == (int *******)0x0) {\n        if ((int)currentItemCount < (int)tempFormatSpecifierPointer) {\n          currentItemCount = tempFormatSpecifierPointer;\n        }\n        itemSize = itemSize + (int)currentItemCount;\n        goto LAB_00083422;\n      }\n      returnValue = FUN_00082ac0(arg1,arg2,&currentFormatSpecifierPointer);\n      if (returnValue != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)currentItemCount < (int)tempFormatSpecifierPointer) {\n    currentItemCount = tempFormatSpecifierPointer;\n  }\n  itemSize = itemSize + (int)currentItemCount;\n  if ((totalSize != (int *******)0x0) &&\n     (returnValue = FUN_00082ac0(arg1,arg2,&currentFormatSpecifierPointer), returnValue != 0)) goto LAB_000833de;\nLAB_00083422:\n  itemCount = 0;\n  formatSpecifierPointer = (int ********)tempBuffer;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  digit = uVar14 - 0x30;\n  tempFormatSpecifierPointer = (int *******)0x0;\n  currentFormatPointer = formatString;\n  do {\n    formatString = (int *******)((int)currentFormatPointer + 1);\n    uVar14 = (uint)*(byte *)currentFormatPointer;\n    tempFormatSpecifierPointer = (int *******)(digit + (int)tempFormatSpecifierPointer * 10);\n    digit = uVar14 - 0x30;\n    currentFormatPointer = formatString;\n  } while (digit < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar14 = (uint)*(byte *)formatString;\n  if (signFlag == '\\0') {\n    signFlag = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "renaming": {
                "FUN_00082b38": "parse_format_string_00082b38",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "formatString",
                "param_4": "args",
                "bVar1": "isLeftJustified",
                "bVar2": "isSignShown",
                "bVar3": "isSpaceShown",
                "cVar4": "signCharacter",
                "bVar5": "isZeroPadded",
                "ppppppppiVar6": "formatSpecifierPointer",
                "piVar7": "currentArgPointer",
                "iVar8": "returnValue",
                "cVar9": "formatSpecifier",
                "pppppppiVar10": "currentFormatPointer",
                "uVar11": "digit",
                "ppiVar12": "currentArg",
                "uVar13": "flags",
                "iVar15": "itemCount",
                "ppppppppiVar16": "formatSpecifierPointer2",
                "iVar17": "itemCount2",
                "pppppppiVar18": "itemSize",
                "piVar19": "currentArgPointer2",
                "pppppppiVar20": "tempFormatSpecifierPointer",
                "uVar21": "tempFlags",
                "piVar22": "tempArgPointer",
                "pppppppiVar23": "tempItemSize",
                "uVar24": "tempVar",
                "ppppppppiVar25": "tempFormatSpecifierPointer3",
                "bVar26": "hasNonzeroArg",
                "lVar27": "longlongVar",
                "local_dc": "currentItemCount",
                "local_d4": "maxItemCount",
                "local_c8": "argsPointer",
                "local_c4": "itemSize",
                "local_c0": "digits",
                "local_a1": "signFlag",
                "local_a0": "paddingCharacter",
                "local_9f": "spaceFlag",
                "local_9c": "currentFormatSpecifierPointer",
                "local_98": "itemCount",
                "local_94": "totalSize",
                "local_90": "comma",
                "cStack_6a": "tempChar",
                "local_69": "paddingFlag",
                "local_68": "tempBuffer",
                "local_64": "tempBufferArray"
            },
            "calling": [
                "FUN_0008378c"
            ],
            "called": [
                "FUN_00083808",
                "FUN_00083b14",
                "FUN_00084750",
                "FUN_00082a50",
                "FUN_00082ac0",
                "FUN_00084384",
                "FUN_0008378c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008378c": {
            "entrypoint": "0x0008378c",
            "current_name": "decode_and_validate_0008378c",
            "code": "\nint decode_and_validate_0008378c(undefined4 param1,int param2)\n\n{\n  int result;\n  int check_result;\n  undefined *buffer [2];\n  undefined4 buffer_size;\n  ushort flag;\n  undefined2 value;\n  undefined *buffer_ptr;\n  undefined4 size1;\n  undefined4 size2;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined stack_data [1024];\n  \n  value4 = *(undefined4 *)(param2 + 100);\n  value2 = *(undefined4 *)(param2 + 0x1c);\n  value = *(undefined2 *)(param2 + 0xe);\n  value3 = *(undefined4 *)(param2 + 0x24);\n  buffer[0] = stack_data;\n  flag = *(ushort *)(param2 + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  size1 = 0x400;\n  size2 = 0;\n  buffer_ptr = buffer[0];\n  result = FUN_00082b38(param1,buffer);\n  if ((-1 < result) && (check_result = FUN_00083adc(param1,buffer), check_result != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)flag << 0x19) < 0) {\n    *(ushort *)(param2 + 0xc) = *(ushort *)(param2 + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008378c": "decode_and_validate_0008378c",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "iVar2": "check_result",
                "local_488": "buffer",
                "local_480": "buffer_size",
                "local_47c": "flag",
                "local_47a": "value",
                "local_478": "buffer_ptr",
                "local_474": "size1",
                "local_470": "size2",
                "local_46c": "value2",
                "local_464": "value3",
                "local_424": "value4",
                "auStack_420": "stack_data"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083808": {
            "entrypoint": "0x00083808",
            "current_name": "process_relocation_00083808",
            "code": "\nundefined4 processRelocation_00083808(undefined4 *result,int *relocation)\n\n{\n  int tempVar1;\n  int tempVar2;\n  uint bitwiseValue;\n  ushort bitwiseValue2;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  bitwiseValue2 = *(ushort *)(relocation + 3);\n  bitwiseValue = (uint)bitwiseValue2;\n  if ((int)(bitwiseValue << 0x1c) < 0) {\n    tempVar2 = relocation[4];\n  }\n  else {\n    if (-1 < (int)(bitwiseValue << 0x1b)) {\n      *result = 9;\n      *(ushort *)(relocation + 3) = bitwiseValue2 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(bitwiseValue << 0x1d) < 0) {\n      if ((int *)relocation[0xc] != (int *)0x0) {\n        if ((int *)relocation[0xc] != relocation + 0x10) {\n          FUN_00083d9c(result);\n          bitwiseValue2 = *(ushort *)(relocation + 3);\n        }\n        relocation[0xc] = 0;\n      }\n      tempVar2 = relocation[4];\n      bitwiseValue2 = bitwiseValue2 & 0xffdb;\n      *relocation = tempVar2;\n      relocation[1] = 0;\n    }\n    else {\n      tempVar2 = relocation[4];\n    }\n    *(ushort *)(relocation + 3) = bitwiseValue2 | 8;\n    bitwiseValue = (uint)(bitwiseValue2 | 8);\n  }\n  if ((tempVar2 == 0) && ((bitwiseValue & 0x280) != 0x200)) {\n    FUN_000842a4(result,relocation);\n    bitwiseValue = (uint)*(ushort *)(relocation + 3);\n    tempVar2 = relocation[4];\n  }\n  if ((bitwiseValue & 1) == 0) {\n    tempVar1 = 0;\n    if (-1 < (int)(bitwiseValue << 0x1e)) {\n      tempVar1 = relocation[5];\n    }\n    relocation[2] = tempVar1;\n  }\n  else {\n    relocation[6] = -relocation[5];\n    relocation[2] = 0;\n  }\n  if ((tempVar2 == 0) && ((int)((uint)*(ushort *)(relocation + 3) << 0x18) < 0)) {\n    *(ushort *)(relocation + 3) = *(ushort *)(relocation + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083808": "process_relocation_00083808",
                "param_1": "result",
                "param_2": "relocation",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2",
                "uVar3": "bitwiseValue",
                "uVar4": "bitwiseValue2"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_000844c4",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14",
                "FUN_000842a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083974": {
            "entrypoint": "0x00083974",
            "current_name": "identity_function_00083974",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\nundefined4 identityFunction_00083974(undefined4 input)\n\n{\n  return input;\n}\n\n",
            "renaming": {
                "FUN_00083974": "identity_function_00083974",
                "param_1": "input"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [
                "FUN_00081df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083adc": {
            "entrypoint": "0x00083adc",
            "current_name": "process_data_00083adc",
            "code": "\nundefined4 processData_00083adc(int *dataPtr,int *infoPtr)\n\n{\n  int *ptr1;\n  int var1;\n  ushort flags;\n  uint temp;\n  int var2;\n  code *callback;\n  undefined4 result;\n  int var3;\n  \n  if ((dataPtr != (int *)0x0) && (dataPtr[0xe] == 0)) {\n    FUN_00083b14();\n  }\n  if (*(short *)(infoPtr + 3) == 0) {\n    return 0;\n  }\n  flags = *(ushort *)(infoPtr + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    var3 = infoPtr[4];\n    if (var3 == 0) {\n      return 0;\n    }\n    var1 = *infoPtr;\n    if ((flags & 3) == 0) {\n      var2 = infoPtr[5];\n    }\n    else {\n      var2 = 0;\n    }\n    *infoPtr = var3;\n    var1 = var1 - var3;\n    infoPtr[2] = var2;\n    do {\n      if (var1 < 1) {\n        return 0;\n      }\n      var2 = (*(code *)infoPtr[9])(dataPtr,infoPtr[7],var3,var1,result);\n      var1 = var1 - var2;\n      var3 = var3 + var2;\n    } while (0 < var2);\nLAB_00083a54:\n    *(ushort *)(infoPtr + 3) = *(ushort *)(infoPtr + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(infoPtr + 3) = flags | 0x800;\n  if ((infoPtr[1] < 1) && (infoPtr[0xf] < 1)) {\n    return 0;\n  }\n  callback = (code *)infoPtr[10];\n  if (callback == (code *)0x0) {\n    return 0;\n  }\n  temp = (uint)(flags | 0x800);\n  var3 = *dataPtr;\n  *dataPtr = 0;\n  if ((flags & 0x1000) == 0) {\n    var1 = (*callback)(dataPtr,infoPtr[7],temp & 0x1000,1);\n    if ((var1 == -1) && (var2 = *dataPtr, var2 != 0)) {\n      if ((var2 == 0x1d) || (var2 == 0x16)) {\n        *dataPtr = var3;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    temp = (uint)*(ushort *)(infoPtr + 3);\n    callback = (code *)infoPtr[10];\n  }\n  else {\n    var1 = infoPtr[0x14];\n  }\n  if (((int)(temp << 0x1d) < 0) && (var1 = var1 - infoPtr[1], infoPtr[0xc] != 0)) {\n    var1 = var1 - infoPtr[0xf];\n  }\n  var1 = (*callback)(dataPtr,infoPtr[7],var1,0);\n  if (var1 == -1) {\n    var2 = *dataPtr;\n    if (var2 != 0) {\n      if ((var2 != 0x1d) && (var2 != 0x16)) {\n        *(ushort *)(infoPtr + 3) = *(ushort *)(infoPtr + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(infoPtr + 3) = *(ushort *)(infoPtr + 3) & 0xf7ff;\n      *infoPtr = infoPtr[4];\n      infoPtr[1] = 0;\n      goto LAB_00083a00;\n    }\n    flags = *(ushort *)(infoPtr + 3) & 0xf7ff;\n    infoPtr[1] = 0;\n    *(ushort *)(infoPtr + 3) = flags;\n    *infoPtr = infoPtr[4];\n  }\n  else {\n    flags = *(ushort *)(infoPtr + 3) & 0xf7ff;\n    *infoPtr = infoPtr[4];\n    *(ushort *)(infoPtr + 3) = flags;\n    infoPtr[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    infoPtr[0x14] = var1;\n  }\nLAB_00083a00:\n  ptr1 = (int *)infoPtr[0xc];\n  *dataPtr = var3;\n  if (ptr1 == (int *)0x0) {\n    return 0;\n  }\n  if (ptr1 != infoPtr + 0x10) {\n    FUN_00083d9c(dataPtr);\n  }\n  infoPtr[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083adc": "process_data_00083adc",
                "param_1": "dataPtr",
                "param_2": "infoPtr",
                "piVar1": "ptr1",
                "iVar2": "var1",
                "uVar3": "flags",
                "uVar4": "temp",
                "iVar5": "var2",
                "pcVar6": "callback",
                "unaff_r4": "result",
                "iVar7": "var3"
            },
            "calling": [
                "FUN_000846a4",
                "FUN_000844c4",
                "FUN_0008378c",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b14": {
            "entrypoint": "0x00083b14",
            "current_name": "initialize_resources_00083b14",
            "code": "\nvoid initializeResources_00083b14(int resource)\n\n{\n  undefined4 *resourceHeader;\n  undefined4 *resourceHeader2;\n  \n  if (*(int *)(resource + 0x38) == 0) {\n    resourceHeader = *(undefined4 **)(resource + 4);\n    *(undefined **)(resource + 0x3c) = &LAB_00083b08_1;\n    *(undefined4 *)(resource + 0x2e4) = 3;\n    *(int *)(resource + 0x2e8) = resource + 0x2ec;\n    *(undefined4 *)(resource + 0x2e0) = 0;\n    *(undefined2 *)(resourceHeader + 3) = 4;\n    *resourceHeader = 0;\n    resourceHeader[1] = 0;\n    resourceHeader[2] = 0;\n    resourceHeader[0x19] = 0;\n    *(undefined2 *)((int)resourceHeader + 0xe) = 0;\n    resourceHeader[4] = 0;\n    resourceHeader[5] = 0;\n    resourceHeader[6] = 0;\n    FUN_00082504(resourceHeader + 0x17,0,8);\n    resourceHeader2 = *(undefined4 **)(resource + 8);\n    resourceHeader[7] = resourceHeader;\n    resourceHeader[8] = &LAB_00084440_1;\n    resourceHeader[9] = 0x84465;\n    resourceHeader[10] = 0x8449d;\n    resourceHeader[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)((int)resourceHeader2 + 0xe) = 1;\n    *(undefined2 *)(resourceHeader2 + 3) = 9;\n    *resourceHeader2 = 0;\n    resourceHeader2[1] = 0;\n    resourceHeader2[2] = 0;\n    resourceHeader2[0x19] = 0;\n    resourceHeader2[4] = 0;\n    resourceHeader2[5] = 0;\n    resourceHeader2[6] = 0;\n    FUN_00082504(resourceHeader2 + 0x17,0,8);\n    resourceHeader = *(undefined4 **)(resource + 0xc);\n    resourceHeader2[7] = resourceHeader2;\n    resourceHeader2[8] = &LAB_00084440_1;\n    resourceHeader2[9] = 0x84465;\n    resourceHeader2[10] = 0x8449d;\n    resourceHeader2[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)(resourceHeader + 3) = 0x12;\n    *(undefined2 *)((int)resourceHeader + 0xe) = 2;\n    *resourceHeader = 0;\n    resourceHeader[1] = 0;\n    resourceHeader[2] = 0;\n    resourceHeader[0x19] = 0;\n    resourceHeader[4] = 0;\n    resourceHeader[5] = 0;\n    resourceHeader[6] = 0;\n    FUN_00082504(resourceHeader + 0x17,0,8);\n    resourceHeader[7] = resourceHeader;\n    resourceHeader[8] = &LAB_00084440_1;\n    resourceHeader[9] = 0x84465;\n    resourceHeader[10] = 0x8449d;\n    resourceHeader[0xb] = &LAB_000844bc_1;\n    *(undefined4 *)(resource + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b14": "initialize_resources_00083b14",
                "param_1": "resource",
                "puVar1": "resourceHeader",
                "puVar2": "resourceHeader2"
            },
            "calling": [
                "FUN_00083808",
                "FUN_000846a4",
                "FUN_00082b38",
                "FUN_00083adc",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083c08": {
            "entrypoint": "0x00083c08",
            "current_name": "FUNC_00083c08",
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c0c": {
            "entrypoint": "0x00083c0c",
            "current_name": "FUNC_00083c0c",
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c40": {
            "entrypoint": "0x00083c40",
            "current_name": "process_data_00083c40",
            "code": "\nuint processData_00083c40(undefined4 param1,uint param2,byte **param3)\n\n{\n  int index;\n  uint count;\n  uint value;\n  byte *currentByte;\n  uint iterator;\n  byte currentValue;\n  byte dataArray [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(param3 + 3) << 0x12)) {\n    *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x2000;\n    param3[0x19] = (byte *)((uint)param3[0x19] | 0x2000);\n  }\n  index = FUN_00084298();\n  if ((index == 1) && (param2 - 1 < 0xff)) {\n    value = param2 & 0xff;\n    currentValue = (byte)value;\n    count = 1;\n  }\n  else {\n    count = FUN_0008456c(param1,&currentValue,param2,param3 + 0x17);\n    if (count == 0xffffffff) {\n      *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (count == 0) {\n      return param2;\n    }\n    value = (uint)currentValue;\n  }\n  iterator = 0;\n  do {\n    currentByte = param3[2] + -1;\n    param3[2] = currentByte;\n    if ((int)currentByte < 0) {\n      if ((int)param3[6] <= (int)currentByte) {\n        **param3 = (byte)value;\n        currentByte = *param3;\n        value = (uint)*currentByte;\n        if (value != 10) goto LAB_00083c90;\n      }\n      index = FUN_000844c4(param1,value,param3);\n      if (index == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **param3 = (byte)value;\n      currentByte = *param3;\nLAB_00083c90:\n      *param3 = currentByte + 1;\n    }\n    if (count <= iterator + 1) {\n      return param2;\n    }\n    value = (uint)dataArray[iterator];\n    iterator = iterator + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "index",
                "uVar2": "count",
                "uVar3": "value",
                "pbVar4": "currentByte",
                "uVar5": "iterator",
                "local_1c": "currentValue",
                "abStack_1b": "dataArray"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_000844c4",
                "FUN_00084298",
                "FUN_0008456c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d00": {
            "entrypoint": "0x00083d00",
            "current_name": "reverse_and_improve_00083d00",
            "code": "\nundefined4 reverse_and_improve_00083d00(undefined4 input_data,int offset)\n\n{\n  int result1;\n  uint masked_value;\n  int adjusted_offset;\n  \n  FUNC_00082598();\n  masked_value = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  adjusted_offset = ((masked_value - offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjusted_offset) {\n    result1 = FUN_00082970(input_data,0);\n    if (result1 == Elf32_Rel_ARRAY_20070000[141].r_info + masked_value) {\n      result1 = FUN_00082970(input_data,-adjusted_offset);\n      if (result1 != -1) {\n        DAT_20071194 = DAT_20071194 - adjusted_offset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = masked_value - adjusted_offset | 1;\n        FUNC_0008259c(input_data);\n        return 1;\n      }\n      adjusted_offset = FUN_00082970(input_data,0);\n      if (0xf < (int)(adjusted_offset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_20071194 = adjusted_offset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             adjusted_offset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_0008259c(input_data);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083d00": "reverse_and_improve_00083d00",
                "param_1": "input_data",
                "param_2": "offset",
                "iVar1": "result1",
                "uVar2": "masked_value",
                "iVar3": "adjusted_offset"
            },
            "calling": [
                "FUN_00083d9c"
            ],
            "called": [
                "FUN_00082970",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "entrypoint": "0x00083d9c",
            "current_name": "process_relocation_00083d9c",
            "code": "\nvoid processRelocation_00083d9c(undefined4 ptrToSomeData,int offset)\n\n{\n  int tempVar1;\n  bool isSpecialCase;\n  uint lowerBitsOfOffset;\n  dword relocatedAddress;\n  int tempVar2;\n  uint alignedOffset;\n  dword newRelocationEntry;\n  uint newRelocationValue;\n  dword tempVar3;\n  \n  if (offset == 0) {\n    return;\n  }\n  FUNC_00082598();\n  lowerBitsOfOffset = *(uint *)(offset + -4);\n  newRelocationEntry = offset - 8;\n  alignedOffset = lowerBitsOfOffset & 0xfffffffe;\n  relocatedAddress = newRelocationEntry + alignedOffset;\n  newRelocationValue = *(uint *)(relocatedAddress + 4) & 0xfffffffc;\n  if (relocationTable[141].r_info == relocatedAddress) {\n    newRelocationValue = newRelocationValue + alignedOffset;\n    if (-1 < (int)(lowerBitsOfOffset << 0x1f)) {\n      newRelocationEntry = newRelocationEntry - *(int *)(offset + -8);\n      tempVar2 = *(int *)(newRelocationEntry + 0xc);\n      tempVar1 = *(int *)(newRelocationEntry + 8);\n      newRelocationValue = newRelocationValue + *(int *)(offset + -8);\n      *(int *)(tempVar1 + 0xc) = tempVar2;\n      *(int *)(tempVar2 + 8) = tempVar1;\n    }\n    relocatedAddress = relocationTable[269].r_info;\n    *(uint *)(newRelocationEntry + 4) = newRelocationValue | 1;\n    relocationTable[141].r_info = newRelocationEntry;\n    if (relocatedAddress <= newRelocationValue) {\n      FUN_00083d00(ptrToSomeData,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(relocatedAddress + 4) = newRelocationValue;\n    if ((lowerBitsOfOffset & 1) == 0) {\n      newRelocationEntry = newRelocationEntry - *(int *)(offset + -8);\n      tempVar1 = *(int *)(newRelocationEntry + 8);\n      alignedOffset = alignedOffset + *(int *)(offset + -8);\n      if (tempVar1 == 0x2007046c) {\n        isSpecialCase = true;\n      }\n      else {\n        tempVar2 = *(int *)(newRelocationEntry + 0xc);\n        *(int *)(tempVar1 + 0xc) = tempVar2;\n        *(int *)(tempVar2 + 8) = tempVar1;\n        isSpecialCase = false;\n      }\n    }\n    else {\n      isSpecialCase = false;\n    }\n    if (-1 < *(int *)(relocatedAddress + newRelocationValue + 4) << 0x1f) {\n      alignedOffset = alignedOffset + newRelocationValue;\n      tempVar1 = *(int *)(relocatedAddress + 8);\n      if ((!isSpecialCase) && (tempVar1 == 0x2007046c)) {\n        relocationTable[142].r_info = newRelocationEntry;\n        relocationTable[143].r_offset = newRelocationEntry;\n        *(undefined4 *)(newRelocationEntry + 0xc) = 0x2007046c;\n        *(undefined4 *)(newRelocationEntry + 8) = 0x2007046c;\n        *(uint *)(newRelocationEntry + 4) = alignedOffset | 1;\n        *(uint *)(newRelocationEntry + alignedOffset) = alignedOffset;\n        goto LAB_00083e30;\n      }\n      tempVar2 = *(int *)(relocatedAddress + 0xc);\n      *(int *)(tempVar1 + 0xc) = tempVar2;\n      *(int *)(tempVar2 + 8) = tempVar1;\n    }\n    *(uint *)(newRelocationEntry + 4) = alignedOffset | 1;\n    *(uint *)(newRelocationEntry + alignedOffset) = alignedOffset;\n    if (!isSpecialCase) {\n      if (alignedOffset < 0x200) {\n        lowerBitsOfOffset = alignedOffset & 0xfffffff8;\n        tempVar1 = *(int *)((int)&relocationTable[0x8d].r_info + lowerBitsOfOffset);\n        relocationTable[141].r_offset =\n             relocationTable[141].r_offset | 1 << ((int)(alignedOffset >> 3) >> 2 & 0xffU);\n        *(int *)(newRelocationEntry + 8) = tempVar1;\n        *(uint *)(newRelocationEntry + 0xc) = lowerBitsOfOffset + 0x20070464;\n        *(dword *)((int)&relocationTable[0x8d].r_info + lowerBitsOfOffset) = newRelocationEntry;\n        *(dword *)(tempVar1 + 0xc) = newRelocationEntry;\n        FUNC_0008259c(ptrToSomeData);\n        return;\n      }\n      lowerBitsOfOffset = alignedOffset >> 9;\n      if (lowerBitsOfOffset < 5) {\n        tempVar1 = (alignedOffset >> 6) + 0x38;\n        tempVar2 = tempVar1 * 2;\n      }\n      else if (lowerBitsOfOffset < 0x15) {\n        tempVar1 = lowerBitsOfOffset + 0x5b;\n        tempVar2 = tempVar1 * 2;\n      }\n      else if (lowerBitsOfOffset < 0x55) {\n        tempVar1 = (alignedOffset >> 0xc) + 0x6e;\n        tempVar2 = tempVar1 * 2;\n      }\n      else if (lowerBitsOfOffset < 0x155) {\n        tempVar1 = (alignedOffset >> 0xf) + 0x77;\n        tempVar2 = tempVar1 * 2;\n      }\n      else if (lowerBitsOfOffset < 0x555) {\n        tempVar1 = (alignedOffset >> 0x12) + 0x7c;\n        tempVar2 = tempVar1 * 2;\n      }\n      else {\n        tempVar2 = 0xfc;\n        tempVar1 = 0x7e;\n      }\n      tempVar3 = tempVar2 * 4 + 0x20070464;\n      relocatedAddress = (&relocationTable[0x8d].r_info)[tempVar2];\n      if (relocatedAddress == tempVar3) {\n        relocationTable[141].r_offset =\n             relocationTable[141].r_offset | 1 << (tempVar1 >> 2 & 0xffU);\n        tempVar3 = relocatedAddress;\n      }\n      else {\n        do {\n          if ((*(uint *)(relocatedAddress + 4) & 0xfffffffc) <= alignedOffset) break;\n          relocatedAddress = *(dword *)(relocatedAddress + 8);\n        } while (tempVar3 != relocatedAddress);\n        tempVar3 = *(dword *)(relocatedAddress + 0xc);\n      }\n      *(dword *)(newRelocationEntry + 0xc) = tempVar3;\n      *(dword *)(newRelocationEntry + 8) = relocatedAddress;\n      *(dword *)(tempVar3 + 8) = newRelocationEntry;\n      *(dword *)(relocatedAddress + 0xc) = newRelocationEntry;\n    }\n  }\nLAB_00083e30:\n  FUNC_0008259c(ptrToSomeData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083d9c": "process_relocation_00083d9c",
                "param_1": "ptrToSomeData",
                "param_2": "offset",
                "iVar1": "tempVar1",
                "bVar2": "isSpecialCase",
                "uVar3": "lowerBitsOfOffset",
                "dVar4": "relocatedAddress",
                "iVar5": "tempVar2",
                "uVar6": "alignedOffset",
                "dVar7": "newRelocationEntry",
                "uVar8": "newRelocationValue",
                "dVar9": "tempVar3",
                "Elf32_Rel_ARRAY_20070000": "relocationTable"
            },
            "calling": [
                "FUN_00083808",
                "FUN_00081e04",
                "FUN_000846a4",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083adc",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d00",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083f34": {
            "entrypoint": "0x00083f34",
            "current_name": "process_data_00083f34",
            "code": "\nundefined4 processData_00083f34(undefined4 *output,uint *inputData,uint **tempData)\n\n{\n  int result;\n  uint value1;\n  uint value2;\n  ushort flag1;\n  uint flag2;\n  uint *ptr1;\n  uint *ptr2;\n  uint count1;\n  uint temp;\n  uint count3;\n  uint temp2;\n  uint localVar;\n  \n  if (tempData[2] != (uint *)0x0) {\n    flag1 = *(ushort *)(inputData + 3);\n    flag2 = (uint)flag1;\n    if (((int)(flag2 << 0x1c) < 0) && (inputData[4] != 0)) {\n      ptr2 = *tempData;\n    }\n    else {\n      result = FUN_00083808(output,inputData);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flag1 = *(ushort *)(inputData + 3);\n      flag2 = (uint)flag1;\n      ptr2 = *tempData;\n    }\n    if ((flag1 & 2) == 0) {\n      value1 = flag2 & 2;\n      count3 = value1;\n      count1 = value1;\n      localVar = value1;\n      if ((flag2 & 1) == 0) {\n        value1 = 0;\n        count3 = 0;\n        while( true ) {\n          while (value1 == 0) {\n            count3 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            value1 = *ptr1;\n          }\n          count1 = inputData[2];\n          if ((int)(flag2 << 0x16) < 0) {\n            if (value1 < count1) {\n              flag2 = *inputData;\n              count1 = value1;\n            }\n            else if ((flag2 & 0x480) == 0) {\n              flag2 = *inputData;\n            }\n            else {\n              result = *inputData - inputData[4];\n              count1 = result + 1 + value1;\n              temp = (int)(inputData[5] * 3) / 2;\n              if (count1 <= temp) {\n                count1 = temp;\n              }\n              if ((int)(flag2 << 0x15) < 0) {\n                temp = FUN_00081e14(output,count1);\n                if (temp == 0) {\n                  *output = 0xc;\n                  flag1 = *(ushort *)(inputData + 3);\n                  goto LAB_00084030;\n                }\n                FUN_0008234c(temp,inputData[4],result);\n                *(ushort *)(inputData + 3) = *(ushort *)(inputData + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                temp = FUN_000825b0(output);\n                if (temp == 0) {\n                  FUN_00083d9c(output,inputData[4]);\n                  flag1 = *(ushort *)(inputData + 3) & 0xff7f;\n                  *output = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              flag2 = temp + result;\n              inputData[4] = temp;\n              inputData[5] = count1;\n              *inputData = flag2;\n              inputData[2] = count1 - result;\n              count1 = value1;\n            }\n            FUN_00082438(flag2,count3,count1);\n            inputData[2] = inputData[2] - count1;\n            *inputData = *inputData + count1;\n            count1 = value1;\n          }\n          else if ((inputData[4] < *inputData) || (flag2 = inputData[5], value1 < flag2)) {\n            if (value1 < count1) {\n              count1 = value1;\n            }\n            FUN_00082438(*inputData,count3,count1);\n            flag2 = inputData[2];\n            inputData[2] = flag2 - count1;\n            *inputData = *inputData + count1;\n            if ((flag2 - count1 == 0) && (result = FUN_00083adc(output,inputData), result != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            count1 = 0x7fffffff;\n            if (value1 < 0x7fffffff) {\n              count1 = value1;\n            }\n            count1 = (*(code *)inputData[9])(output,inputData[7],count3,(count1 / flag2) * flag2);\n            if ((int)count1 < 1) goto LAB_0008402e;\n          }\n          ptr1 = tempData[2];\n          count3 = count3 + count1;\n          value1 = value1 - count1;\n          tempData[2] = (uint *)((int)ptr1 - count1);\n          if ((uint *)((int)ptr1 - count1) == (uint *)0x0) break;\n          flag2 = (uint)*(ushort *)(inputData + 3);\n        }\n      }\n      else {\n        do {\n          while (value1 == 0) {\n            count1 = *ptr2;\n            value1 = ptr2[1];\n            localVar = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (localVar == 0) {\n            result = FUN_00084384(count1,10,value1);\n            if (result == 0) {\n              count3 = value1 + 1;\n              localVar = 1;\n            }\n            else {\n              count3 = (result + 1) - count1;\n              localVar = 1;\n            }\n          }\n          temp = *inputData;\n          flag2 = count3;\n          if (value1 <= count3) {\n            flag2 = value1;\n          }\n          value2 = inputData[5];\n          if ((inputData[4] < temp) && (temp2 = inputData[2] + value2, (int)temp2 < (int)flag2)) {\n            FUN_00082438(temp,count1,temp2);\n            *inputData = *inputData + temp2;\n            result = FUN_00083adc(output,inputData);\n            if (result != 0) goto LAB_0008402e;\n          }\n          else if ((int)flag2 < (int)value2) {\n            FUN_00082438(temp,count1,flag2);\n            inputData[2] = inputData[2] - flag2;\n            *inputData = flag2 + *inputData;\n            temp2 = flag2;\n          }\n          else {\n            temp2 = (*(code *)inputData[9])(output,inputData[7],count1,value2);\n            if ((int)temp2 < 1) goto LAB_0008402e;\n          }\n          count3 = count3 - temp2;\n          if (count3 == 0) {\n            result = FUN_00083adc(output,inputData);\n            if (result != 0) goto LAB_0008402e;\n            localVar = 0;\n          }\n          ptr1 = tempData[2];\n          count1 = count1 + temp2;\n          value1 = value1 - temp2;\n          tempData[2] = (uint *)((int)ptr1 - temp2);\n        } while ((uint *)((int)ptr1 - temp2) != (uint *)0x0);\n      }\n    }\n    else {\n      value1 = 0;\n      flag2 = 0;\n      do {\n        while( true ) {\n          count3 = flag2;\n          if (0x7ffffbff < flag2) {\n            count3 = 0x7ffffc00;\n          }\n          if (flag2 != 0) break;\n          value1 = *ptr2;\n          flag2 = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)inputData[9])(output,inputData[7],value1,count3);\n        if (result < 1) {\nLAB_0008402e:\n          flag1 = *(ushort *)(inputData + 3);\nLAB_00084030:\n          *(ushort *)(inputData + 3) = flag1 | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = tempData[2];\n        value1 = value1 + result;\n        flag2 = flag2 - result;\n        tempData[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083f34": "process_data_00083f34",
                "param_1": "output",
                "param_2": "inputData",
                "param_3": "tempData",
                "iVar1": "result",
                "uVar2": "value1",
                "uVar3": "value2",
                "uVar4": "flag1",
                "uVar5": "flag2",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "count1",
                "uVar9": "temp",
                "uVar10": "count3",
                "uVar11": "temp2",
                "local_2c": "localVar"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008234c",
                "FUN_00083808",
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_00081e14",
                "FUN_00083adc",
                "FUN_00082438",
                "FUN_00084384"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084290": {
            "entrypoint": "0x00084290",
            "current_name": "get_memory_address_00084290",
            "code": "\nundefined4 getMemoryAddress_00084290(void)\n\n{\n  return 0x20070874;\n}\n\n",
            "renaming": {
                "FUN_00084290": "get_memory_address_00084290"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084298": {
            "entrypoint": "0x00084298",
            "current_name": "get_elf_rel_info_00084298",
            "code": "\ndword getElfRelInfo_00084298(void)\n\n{\n  return elfRelArray[274].r_info;\n}\n\n",
            "renaming": {
                "FUN_00084298": "get_elf_rel_info_00084298",
                "Elf32_Rel_ARRAY_20070000": "elfRelArray"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "validate_input_000842a4",
            "code": "\nvoid validateInput_000842a4(int input,int *output)\n\n{\n  ushort inputValue;\n  int result;\n  int errorCode;\n  uint tempValue;\n  bool flag;\n  undefined tempArray [4];\n  uint localValue;\n  \n  inputValue = *(ushort *)(output + 3);\n  tempValue = (uint)inputValue;\n  if ((int)(tempValue << 0x1e) < 0) {\n    *output = (int)output + 0x43;\n    output[4] = (int)output + 0x43;\n    output[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)output + 0xe)) {\n    result = FUN_000846b4(input,(int)*(short *)((int)output + 0xe),tempArray);\n    if (-1 < result) {\n      flag = (localValue & 0xf000) == 0x2000;\n      if (((localValue & 0xf000) == 0x8000) && (output[10] == 0x8449d)) {\n        result = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x400;\n        output[0x13] = 0x400;\n      }\n      else {\n        result = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    inputValue = *(ushort *)(output + 3);\n    tempValue = (uint)inputValue;\n  }\n  *(ushort *)(output + 3) = inputValue | 0x800;\n  if ((tempValue & 0x80) == 0) {\n    result = 0x400;\n  }\n  else {\n    result = 0x40;\n  }\n  flag = false;\nLAB_00084300:\n  errorCode = FUN_00081e14(input,result);\n  inputValue = *(ushort *)(output + 3);\n  if (errorCode == 0) {\n    if (-1 < (int)((uint)inputValue << 0x16)) {\n      *(ushort *)(output + 3) = inputValue | 2;\n      *output = (int)output + 0x43;\n      output[4] = (int)output + 0x43;\n      output[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(input + 0x3c) = &LAB_00083b08_1;\n    *(ushort *)(output + 3) = inputValue | 0x80;\n    *output = errorCode;\n    output[4] = errorCode;\n    output[5] = result;\n    if ((flag) && (result = FUN_000846dc(input,(int)*(short *)((int)output + 0xe)), result != 0))\n    {\n      *(ushort *)(output + 3) = *(ushort *)(output + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "validate_input_000842a4",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "inputValue",
                "iVar2": "result",
                "iVar3": "errorCode",
                "uVar4": "tempValue",
                "bVar5": "flag",
                "auStack_54": "tempArray",
                "local_50": "localValue"
            },
            "calling": [
                "FUN_00083808"
            ],
            "called": [
                "FUN_000846dc",
                "FUN_000846b4",
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084384": {
            "entrypoint": "0x00084384",
            "current_name": "find_matching_value_00084384",
            "code": "\nuint * find_matching_value_00084384(uint *values,char target,uint num_elements)\n\n{\n  uint xored_value;\n  int index;\n  uint *current_value;\n  bool is_last_element;\n  \n  if (((uint)values & 3) == 0) {\nLAB_000843b4:\n    if (3 < num_elements) {\n      current_value = values;\n      do {\n        xored_value = *current_value ^ CONCAT22(CONCAT11(target,target),CONCAT11(target,target));\n        values = current_value;\n        if ((xored_value + 0xfefefeff & ~xored_value & 0x80808080) != 0) break;\n        num_elements = num_elements - 4;\n        values = current_value + 1;\n        current_value = current_value + 1;\n      } while (3 < num_elements);\n    }\n    if (num_elements == 0) {\n      values = (uint *)0x0;\n    }\n    else if (*(char *)values != target) {\n      index = 0;\n      do {\n        values = (uint *)((int)values + 1);\n        is_last_element = index == num_elements - 1;\n        index = index + 1;\n        if (is_last_element) goto LAB_000843dc;\n      } while (*(char *)values != target);\n    }\n  }\n  else if (num_elements == 0) {\nLAB_000843dc:\n    values = (uint *)0x0;\n  }\n  else if (*(char *)values != target) {\n    current_value = (uint *)((int)values + 1);\n    num_elements = num_elements - 1;\n    do {\n      values = current_value;\n      if (((uint)values & 3) == 0) goto LAB_000843b4;\n      if (num_elements == 0) goto LAB_000843dc;\n      current_value = (uint *)((int)values + 1);\n      num_elements = num_elements - 1;\n    } while (*(char *)values != target);\n  }\n  return values;\n}\n\n",
            "renaming": {
                "FUN_00084384": "find_matching_value_00084384",
                "param_1": "values",
                "param_2": "target",
                "param_3": "num_elements",
                "uVar1": "xored_value",
                "iVar2": "index",
                "puVar3": "current_value",
                "bVar4": "is_last_element"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084464": {
            "entrypoint": "0x00084464",
            "current_name": "process_data_00084464",
            "code": "\nvoid processData_00084464(int *output,int input,undefined4 paramA,undefined4 paramB)\n\n{\n  int result;\n  ushort value;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 unused4;\n  \n  value = *(ushort *)(input + 0xc);\n  if ((int)((uint)value << 0x17) < 0) {\n    FUN_00084700(output,(int)*(short *)(input + 0xe),0,2);\n    value = *(ushort *)(input + 0xc);\n  }\n  *(ushort *)(input + 0xc) = value & 0xefff;\n  DAT_200711bc = 0;\n  result = FUN_000811cc((int)*(short *)(input + 0xe),paramA,paramB,paramB,unused1,unused2,\n                       unused3,unused4);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084464": "process_data_00084464",
                "param_1": "output",
                "param_2": "input",
                "param_3": "paramA",
                "param_4": "paramB",
                "iVar1": "result",
                "uVar2": "value",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "unaff_r6": "unused3",
                "in_lr": "unused4"
            },
            "calling": [],
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008449c": {
            "entrypoint": "0x0008449c",
            "current_name": "update_flags_0008449c",
            "code": "\nvoid updateFlags_0008449c(undefined4 param1,int param2)\n\n{\n  int result;\n  ushort flags;\n  \n  result = FUN_00084700(param1,(int)*(short *)(param2 + 0xe));\n  if (result == -1) {\n    flags = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    flags = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(param2 + 0x50) = result;\n  }\n  *(ushort *)(param2 + 0xc) = flags;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008449c": "update_flags_0008449c",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "uVar2": "flags"
            },
            "calling": [],
            "called": [
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844c4": {
            "entrypoint": "0x000844c4",
            "current_name": "process_data_000844c4",
            "code": "\nuint processData_000844c4(int input,uint flag,undefined4 *data,undefined4 value)\n\n{\n  ushort ushortValue;\n  uint uintValue;\n  undefined *ptrData;\n  int index;\n  \n  if ((input != 0) && (*(int *)(input + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  ushortValue = *(ushort *)(data + 3);\n  uintValue = (uint)ushortValue;\n  data[2] = data[6];\n  if ((-1 < (int)(uintValue << 0x1c)) || (index = data[4], index == 0)) {\n    index = FUN_00083808(input,data,ushortValue,uintValue,value);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    ushortValue = *(ushort *)(data + 3);\n    index = data[4];\n    uintValue = (uint)ushortValue;\n  }\n  flag = flag & 0xff;\n  if ((int)(uintValue << 0x12) < 0) {\n    ptrData = (undefined *)*data;\n    index = (int)ptrData - index;\n    if (index < (int)data[5]) {\nLAB_000844f6:\n      index = index + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    data[0x19] = data[0x19] & 0xffffdfff;\n    ptrData = (undefined *)*data;\n    *(ushort *)(data + 3) = ushortValue | 0x2000;\n    index = (int)ptrData - index;\n    if (index < (int)data[5]) goto LAB_000844f6;\n  }\n  index = FUN_00083adc(input,data);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  ptrData = (undefined *)*data;\n  index = 1;\nLAB_000844f8:\n  data[2] = data[2] + -1;\n  *data = ptrData + 1;\n  *ptrData = (char)flag;\n  if (((data[5] == index) ||\n      (((int)((uint)*(ushort *)(data + 3) << 0x1f) < 0 && (flag == 10)))) &&\n     (index = FUN_00083adc(input,data), index != 0)) {\n    return 0xffffffff;\n  }\n  return flag;\n}\n\n",
            "renaming": {
                "FUN_000844c4": "process_data_000844c4",
                "param_1": "input",
                "param_2": "flag",
                "param_3": "data",
                "param_4": "value",
                "uVar1": "ushortValue",
                "uVar2": "uintValue",
                "puVar3": "ptrData",
                "iVar4": "index"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00083808",
                "FUN_00083b14",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008456c": {
            "entrypoint": "0x0008456c",
            "current_name": "process_data_0008456c",
            "code": "\nvoid processData_0008456c(undefined4 *outputBuffer,int inputSize,undefined4 inputData,undefined4 *result)\n\n{\n  code *functionPtr;\n  undefined4 userData;\n  int returnValue;\n  undefined stackBuffer [12];\n  \n  functionPtr = DAT_20070898;\n  if (inputSize == 0) {\n    userData = FUN_00084290();\n    returnValue = (*functionPtr)(outputBuffer,stackBuffer,0,userData,result);\n  }\n  else {\n    userData = FUN_00084290();\n    returnValue = (*functionPtr)(outputBuffer,inputSize,inputData,userData,result);\n  }\n  if (returnValue == -1) {\n    *result = 0;\n    *outputBuffer = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008456c": "process_data_0008456c",
                "param_1": "outputBuffer",
                "param_2": "inputSize",
                "param_3": "inputData",
                "param_4": "result",
                "pcVar1": "functionPtr",
                "uVar2": "userData",
                "iVar3": "returnValue",
                "auStack_24": "stackBuffer"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00084290",
                "FUN_000845bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "initialize_buffer_000845bc",
            "code": "\nundefined4 initializeBuffer_000845bc(undefined4 *buffer,undefined *data,uint length)\n\n{\n  if (data == (undefined *)0x0) {\n    return 0;\n  }\n  if (length < 0x100) {\n    *data = (char)length;\n    return 1;\n  }\n  *buffer = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "initialize_buffer_000845bc",
                "param_1": "buffer",
                "param_2": "data",
                "param_3": "length"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846a4": {
            "entrypoint": "0x000846a4",
            "current_name": "validate_input_000846a4",
            "code": "\nundefined4 validateInput_000846a4(int input)\n\n{\n  dword offset;\n  undefined4 result;\n  int status;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (input != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      FUN_00083b14();\n    }\n    if (*(short *)(input + 0xc) != 0) {\n      result = FUN_00083adc(offset,input);\n      if ((*(code **)(input + 0x2c) != (code *)0x0) &&\n         (status = (**(code **)(input + 0x2c))(offset,*(undefined4 *)(input + 0x1c)), status < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input + 0xc) << 0x18) < 0) {\n        FUN_00083d9c(offset,*(undefined4 *)(input + 0x10));\n      }\n      if (*(int *)(input + 0x30) != 0) {\n        if (*(int *)(input + 0x30) != input + 0x40) {\n          FUN_00083d9c(offset);\n        }\n        *(undefined4 *)(input + 0x30) = 0;\n      }\n      if (*(int *)(input + 0x44) != 0) {\n        FUN_00083d9c(offset);\n        *(undefined4 *)(input + 0x44) = 0;\n      }\n      FUNC_00083c08();\n      *(undefined2 *)(input + 0xc) = 0;\n      FUNC_00083c0c();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000846a4": "validate_input_000846a4",
                "param_1": "input",
                "dVar1": "offset",
                "uVar2": "result",
                "iVar3": "status"
            },
            "calling": [],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14",
                "FUN_00083adc",
                "FUN_00083c08",
                "FUN_00083c0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846b4": {
            "entrypoint": "0x000846b4",
            "current_name": "check_and_assign_value_000846b4",
            "code": "\nvoid check_and_assign_value_000846b4(int *result,undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  int result_status;\n  \n  DAT_200711bc = 0;\n  result_status = FUN_000811b4(input_1,input_2,input_2,0,input_3);\n  if ((result_status == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846b4": "check_and_assign_value_000846b4",
                "param_1": "result",
                "param_2": "input_1",
                "param_3": "input_2",
                "param_4": "input_3",
                "iVar1": "result_status"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846dc": {
            "entrypoint": "0x000846dc",
            "current_name": "check_and_update_value_000846dc",
            "code": "\nvoid checkAndUpdateValue_000846dc(int *outputValue,undefined4 inputValue)\n\n{\n  int returnValue;\n  \n  DAT_200711bc = 0;\n  returnValue = FUN_000811be(inputValue);\n  if ((returnValue == -1) && (DAT_200711bc != 0)) {\n    *outputValue = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846dc": "check_and_update_value_000846dc",
                "param_1": "outputValue",
                "param_2": "inputValue",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084700": {
            "entrypoint": "0x00084700",
            "current_name": "process_data_00084700",
            "code": "\nvoid processData_00084700(int *result,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int returnValue;\n  \n  DAT_200711bc = 0;\n  returnValue = FUN_000811c2(input1,input2,input3);\n  if ((returnValue == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084700": "process_data_00084700",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_00084464",
                "FUN_0008449c"
            ],
            "called": [
                "FUN_000811c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084728": {
            "entrypoint": "0x00084728",
            "current_name": "handle_error_00084728",
            "code": "\nvoid handleError_00084728(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int returnValue;\n  \n  DAT_200711bc = 0;\n  returnValue = FUN_000811c6(arg1,arg2,arg3);\n  if ((returnValue == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084728": "handle_error_00084728",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_000811c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084750": {
            "entrypoint": "0x00084750",
            "current_name": "check_parameters_00084750",
            "code": "\nint checkParameters_00084750(int firstParam,int secondParam,int thirdParam,int fourthParam)\n\n{\n  int result;\n  \n  if ((fourthParam == 0) && (thirdParam == 0)) {\n    if (secondParam != 0 || firstParam != 0) {\n      firstParam = -1;\n    }\n    return firstParam;\n  }\n  result = FUN_000847ac();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084750": "check_parameters_00084750",
                "param_1": "firstParam",
                "param_2": "secondParam",
                "param_3": "thirdParam",
                "param_4": "fourthParam",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_000847ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008477c": {
            "entrypoint": "0x0008477c",
            "current_name": "subtract_and_assign_0008477c",
            "code": "\nvoid subtractAndAssign_0008477c(uint inputValue,int subtractionValue,undefined4 lowerPart,undefined4 upperPart,int *resultArray)\n\n{\n  uint result;\n  longlong multipliedValue;\n  \n  multipliedValue = FUN_000847e0();\n  multipliedValue = multipliedValue * CONCAT44(upperPart,lowerPart);\n  result = (uint)multipliedValue;\n  *resultArray = inputValue - result;\n  resultArray[1] = (subtractionValue - (int)((ulonglong)multipliedValue >> 0x20)) - (uint)(inputValue < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008477c": "subtract_and_assign_0008477c",
                "param_1": "inputValue",
                "param_2": "subtractionValue",
                "param_3": "lowerPart",
                "param_4": "upperPart",
                "param_5": "resultArray",
                "uVar1": "result",
                "lVar2": "multipliedValue"
            },
            "calling": [],
            "called": [
                "FUN_000847e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847ac": {
            "entrypoint": "0x000847ac",
            "current_name": "calculate_difference_000847ac",
            "code": "\nvoid calculate_difference_000847ac(uint value_1,int value_2,undefined4 lower_bits,undefined4 higher_bits,int *result_array)\n\n{\n  uint combined_value;\n  longlong product;\n  \n  product = FUN_00084a80();\n  product = product * CONCAT44(higher_bits,lower_bits);\n  combined_value = (uint)product;\n  *result_array = value_1 - combined_value;\n  result_array[1] = (value_2 - (int)((ulonglong)product >> 0x20)) - (uint)(value_1 < combined_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847ac": "calculate_difference_000847ac",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "lower_bits",
                "param_4": "higher_bits",
                "param_5": "result_array",
                "uVar1": "combined_value",
                "lVar2": "product"
            },
            "calling": [
                "FUN_00084750"
            ],
            "called": [
                "FUN_00084a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847e0": {
            "entrypoint": "0x000847e0",
            "current_name": "divide_modulus_000847e0",
            "code": "\nundefined8 divideModulus_000847e0(uint dividend,uint dividend_upper,uint divisor,uint divisor_upper)\n\n{\n  longlong lVar1;\n  uint quotient;\n  uint quotient_upper;\n  uint quotient_temp;\n  uint remainder;\n  int leading_zero_count;\n  uint product;\n  uint product_upper;\n  uint is_dividend_negative;\n  uint quotient_temp2;\n  uint product_temp;\n  uint divisor_temp;\n  bool is_negative;\n  \n  if ((int)dividend_upper < 0) {\n    is_negative = dividend != 0;\n    dividend = -dividend;\n    dividend_upper = -dividend_upper - (uint)is_negative;\n    is_dividend_negative = 0xffffffff;\n  }\n  else {\n    is_dividend_negative = 0;\n  }\n  if ((int)divisor_upper < 0) {\n    is_dividend_negative = ~is_dividend_negative;\n    is_negative = divisor != 0;\n    divisor = -divisor;\n    divisor_upper = -divisor_upper - (uint)is_negative;\n  }\n  if (divisor_upper == 0) {\n    if (dividend_upper < divisor) {\n      leading_zero_count = LZCOUNT(divisor);\n      if (leading_zero_count != 0) {\n        quotient_upper = dividend >> (0x20U - leading_zero_count & 0xff);\n        divisor = divisor << leading_zero_count;\n        dividend = dividend << leading_zero_count;\n        dividend_upper = dividend_upper << leading_zero_count | quotient_upper;\n      }\n      quotient = divisor >> 0x10;\n      quotient_temp = dividend_upper / quotient;\n      product = (divisor & 0xffff) * quotient_temp;\n      quotient_temp2 = dividend >> 0x10 | (dividend_upper - quotient * quotient_temp) * 0x10000;\n      quotient_upper = quotient_temp;\n      if (quotient_temp2 <= product && product - quotient_temp2 != 0) {\n        is_negative = CARRY4(quotient_temp2,divisor);\n        quotient_temp2 = quotient_temp2 + divisor;\n        quotient_upper = quotient_temp - 1;\n        if ((is_negative == false) && (quotient_temp2 <= product && product - quotient_temp2 != 0)) {\n          quotient_upper = quotient_temp - 2;\n          quotient_temp2 = quotient_temp2 + divisor;\n        }\n      }\n      product_upper = (quotient_temp2 - product) / quotient;\n      quotient_temp = (divisor & 0xffff) * product_upper;\n      product = dividend & 0xffff | ((quotient_temp2 - product) - quotient * product_upper) * 0x10000;\n      quotient = product_upper;\n      if (product <= quotient_temp && quotient_temp - product != 0) {\n        quotient = product_upper - 1;\n        if ((CARRY4(product,divisor) == false) &&\n           (product + divisor <= quotient_temp && quotient_temp - (product + divisor) != 0)) {\n          quotient = product_upper - 2;\n        }\n      }\n      quotient = quotient | quotient_upper << 0x10;\n      quotient_upper = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      leading_zero_count = LZCOUNT(divisor);\n      if (leading_zero_count == 0) {\n        dividend_upper = dividend_upper - divisor;\n        quotient_temp = divisor >> 0x10;\n        divisor_temp = divisor & 0xffff;\n        quotient_upper = 1;\n      }\n      else {\n        divisor = divisor << leading_zero_count;\n        quotient_upper = dividend_upper >> (0x20U - leading_zero_count & 0xff);\n        quotient_temp = divisor >> 0x10;\n        quotient_temp2 = quotient_upper / quotient_temp;\n        divisor_temp = divisor & 0xffff;\n        product = divisor_temp * quotient_temp2;\n        product_upper = dividend >> (0x20U - leading_zero_count & 0xff) | dividend_upper << leading_zero_count;\n        quotient_upper = product_upper >> 0x10 | (quotient_upper - quotient_temp * quotient_temp2) * 0x10000;\n        dividend = dividend << leading_zero_count;\n        quotient = quotient_temp2;\n        if (quotient_upper <= product && product - quotient_upper != 0) {\n          is_negative = CARRY4(quotient_upper,divisor);\n          quotient_upper = quotient_upper + divisor;\n          quotient = quotient_temp2 - 1;\n          if ((is_negative == false) && (quotient_upper <= product && product - quotient_upper != 0)) {\n            quotient = quotient_temp2 - 2;\n            quotient_upper = quotient_upper + divisor;\n          }\n        }\n        remainder = (quotient_upper - product) / quotient_temp;\n        quotient_temp2 = divisor_temp * remainder;\n        dividend_upper = product_upper & 0xffff | ((quotient_upper - product) - quotient_temp * remainder) * 0x10000;\n        quotient_upper = remainder;\n        if (dividend_upper <= quotient_temp2 && quotient_temp2 - dividend_upper != 0) {\n          is_negative = CARRY4(dividend_upper,divisor);\n          dividend_upper = dividend_upper + divisor;\n          quotient_upper = remainder - 1;\n          if ((is_negative == false) && (dividend_upper <= quotient_temp2 && quotient_temp2 - dividend_upper != 0)) {\n            quotient_upper = remainder - 2;\n            dividend_upper = dividend_upper + divisor;\n          }\n        }\n        dividend_upper = dividend_upper - quotient_temp2;\n        quotient_upper = quotient_upper | quotient << 0x10;\n      }\n      quotient = dividend_upper / quotient_temp;\n      quotient_temp2 = divisor_temp * quotient;\n      product_upper = dividend >> 0x10 | (dividend_upper - quotient_temp * quotient) * 0x10000;\n      product = quotient;\n      if (product_upper <= quotient_temp2 && quotient_temp2 - product_upper != 0) {\n        is_negative = CARRY4(product_upper,divisor);\n        product_upper = product_upper + divisor;\n        product = quotient - 1;\n        if ((is_negative == false) && (product_upper <= quotient_temp2 && quotient_temp2 - product_upper != 0)) {\n          product = quotient - 2;\n          product_upper = product_upper + divisor;\n        }\n      }\n      remainder = (product_upper - quotient_temp2) / quotient_temp;\n      divisor_temp = divisor_temp * remainder;\n      quotient_temp = dividend & 0xffff | ((product_upper - quotient_temp2) - quotient_temp * remainder) * 0x10000;\n      quotient = remainder;\n      if (quotient_temp <= divisor_temp && divisor_temp - quotient_temp != 0) {\n        quotient = remainder - 1;\n        if ((CARRY4(quotient_temp,divisor) == false) &&\n           (quotient_temp + divisor <= divisor_temp && divisor_temp - (quotient_temp + divisor) != 0)) {\n          quotient = remainder - 2;\n        }\n      }\n      quotient = quotient | product << 0x10;\n    }\n  }\n  else if (dividend_upper < divisor_upper) {\n    quotient_upper = 0;\n    quotient = 0;\n  }\n  else {\n    leading_zero_count = LZCOUNT(divisor_upper);\n    if (leading_zero_count == 0) {\n      if ((divisor_upper < dividend_upper) || (divisor <= dividend)) {\n        quotient_upper = 0;\n        quotient = 1;\n      }\n      else {\n        quotient = 0;\n        quotient_upper = 0;\n      }\n    }\n    else {\n      quotient_upper = 0x20 - leading_zero_count;\n      quotient_temp = dividend_upper >> (quotient_upper & 0xff);\n      divisor_temp = divisor >> (quotient_upper & 0xff) | divisor_upper << leading_zero_count;\n      quotient_temp2 = divisor_temp >> 0x10;\n      quotient = quotient_temp / quotient_temp2;\n      product_upper = (divisor_temp & 0xffff) * quotient;\n      product = dividend_upper << leading_zero_count | dividend >> (quotient_upper & 0xff);\n      quotient_temp = product >> 0x10 | (quotient_temp - quotient_temp2 * quotient) * 0x10000;\n      quotient_upper = quotient;\n      if (quotient_temp <= product_upper && product_upper - quotient_temp != 0) {\n        is_negative = CARRY4(quotient_temp,divisor_temp);\n        quotient_temp = quotient_temp + divisor_temp;\n        quotient_upper = quotient - 1;\n        if ((is_negative == false) && (quotient_temp <= product_upper && product_upper - quotient_temp != 0)) {\n          quotient_upper = quotient - 2;\n          quotient_temp = quotient_temp + divisor_temp;\n        }\n      }\n      remainder = (quotient_temp - product_upper) / quotient_temp2;\n      product_temp = (divisor_temp & 0xffff) * remainder;\n      quotient_temp = product & 0xffff | ((quotient_temp - product_upper) - quotient_temp2 * remainder) * 0x10000;\n      quotient = remainder;\n      if (quotient_temp <= product_temp && product_temp - quotient_temp != 0) {\n        is_negative = CARRY4(quotient_temp,divisor_temp);\n        quotient_temp = quotient_temp + divisor_temp;\n        quotient = remainder - 1;\n        if ((is_negative == false) && (quotient_temp <= product_temp && product_temp - quotient_temp != 0)) {\n          quotient = remainder - 2;\n          quotient_temp = quotient_temp + divisor_temp;\n        }\n      }\n      quotient = quotient | quotient_upper << 0x10;\n      lVar1 = (ulonglong)quotient * (ulonglong)(divisor << leading_zero_count);\n      product = (uint)((ulonglong)lVar1 >> 0x20);\n      quotient_upper = 0;\n      if ((quotient_temp - product_temp < product) ||\n         ((quotient_temp - product_temp == product && (dividend << leading_zero_count < (uint)lVar1)))) {\n        quotient = quotient - 1;\n        quotient_upper = 0;\n      }\n    }\n  }\n  if (is_dividend_negative != 0) {\n    is_negative = quotient != 0;\n    quotient = -quotient;\n    quotient_upper = -quotient_upper - (uint)is_negative;\n  }\n  return CONCAT44(quotient_upper,quotient);\n}\n\n",
            "renaming": {
                "FUN_000847e0": "divide_modulus_000847e0",
                "param_1": "dividend",
                "param_2": "dividend_upper",
                "param_3": "divisor",
                "param_4": "divisor_upper",
                "bVar13": "is_negative",
                "uVar2": "quotient",
                "uVar3": "quotient_upper",
                "uVar4": "quotient_temp",
                "uVar5": "remainder",
                "uVar7": "product",
                "uVar8": "product_upper",
                "uVar9": "is_dividend_negative",
                "uVar10": "quotient_temp2",
                "uVar11": "product_temp",
                "uVar12": "divisor_temp",
                "iVar6": "leading_zero_count"
            },
            "calling": [
                "FUN_0008477c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084a80": {
            "entrypoint": "0x00084a80",
            "current_name": "calculate_division_value_00084a80",
            "code": "\nulonglong calculateDivisionValue_00084a80(uint dividend,uint quotient_high,uint divisor_high,uint divisor_low)\n\n{\n  longlong product;\n  uint quotient_low;\n  uint divisor_high_shifted;\n  uint division_result;\n  uint remainder;\n  uint temp_1;\n  uint temp_2;\n  uint quotient_low_high;\n  uint quotient_high_low;\n  int shift_amount;\n  bool carry_flag;\n  \n  if (divisor_low == 0) {\n    if (divisor_high <= quotient_high) {\n      if (divisor_high == 0) {\n        divisor_high = 1 / 0;\n      }\n      shift_amount = LZCOUNT(divisor_high);\n      if (shift_amount == 0) {\n        quotient_high = quotient_high - divisor_high;\n        divisor_high_shifted = divisor_high >> 0x10;\n        remainder = divisor_high & 0xffff;\n        quotient_low = 1;\n      }\n      else {\n        divisor_high = divisor_high << shift_amount;\n        quotient_low_high = quotient_high >> (0x20U - shift_amount & 0xff);\n        divisor_high_shifted = divisor_high >> 0x10;\n        quotient_high_low = quotient_low_high / divisor_high_shifted;\n        remainder = divisor_high & 0xffff;\n        quotient_low = remainder * quotient_high_low;\n        temp_1 = dividend >> (0x20U - shift_amount & 0xff) | quotient_high << shift_amount;\n        division_result = temp_1 >> 0x10 | (quotient_low_high - divisor_high_shifted * quotient_high_low) * 0x10000;\n        dividend = dividend << shift_amount;\n        quotient_low_high = quotient_high_low;\n        if (division_result <= quotient_low && quotient_low - division_result != 0) {\n          carry_flag = CARRY4(division_result,divisor_high);\n          division_result = division_result + divisor_high;\n          quotient_low_high = quotient_high_low - 1;\n          if ((carry_flag == false) && (division_result <= quotient_low && quotient_low - division_result != 0)) {\n            quotient_low_high = quotient_high_low - 2;\n            division_result = division_result + divisor_high;\n          }\n        }\n        temp_2 = (division_result - quotient_low) / divisor_high_shifted;\n        quotient_high_low = remainder * temp_2;\n        quotient_high = temp_1 & 0xffff | ((division_result - quotient_low) - divisor_high_shifted * temp_2) * 0x10000;\n        quotient_low = temp_2;\n        if (quotient_high <= quotient_high_low && quotient_high_low - quotient_high != 0) {\n          carry_flag = CARRY4(quotient_high,divisor_high);\n          quotient_high = quotient_high + divisor_high;\n          quotient_low = temp_2 - 1;\n          if ((carry_flag == false) && (quotient_high <= quotient_high_low && quotient_high_low - quotient_high != 0)) {\n            quotient_low = temp_2 - 2;\n            quotient_high = quotient_high + divisor_high;\n          }\n        }\n        quotient_high = quotient_high - quotient_high_low;\n        quotient_low = quotient_low | quotient_low_high << 0x10;\n      }\n      quotient_high_low = quotient_high / divisor_high_shifted;\n      division_result = remainder * quotient_high_low;\n      temp_1 = dividend >> 0x10 | (quotient_high - divisor_high_shifted * quotient_high_low) * 0x10000;\n      quotient_low_high = quotient_high_low;\n      if (temp_1 <= division_result && division_result - temp_1 != 0) {\n        carry_flag = CARRY4(temp_1,divisor_high);\n        temp_1 = temp_1 + divisor_high;\n        quotient_low_high = quotient_high_low - 1;\n        if ((carry_flag == false) && (temp_1 <= division_result && division_result - temp_1 != 0)) {\n          quotient_low_high = quotient_high_low - 2;\n          temp_1 = temp_1 + divisor_high;\n        }\n      }\n      quotient_high_low = (temp_1 - division_result) / divisor_high_shifted;\n      remainder = remainder * quotient_high_low;\n      temp_1 = dividend & 0xffff | ((temp_1 - division_result) - divisor_high_shifted * quotient_high_low) * 0x10000;\n      divisor_high_shifted = quotient_high_low;\n      if (temp_1 <= remainder && remainder - temp_1 != 0) {\n        divisor_high_shifted = quotient_high_low - 1;\n        if ((CARRY4(temp_1,divisor_high) == false) &&\n           (temp_1 + divisor_high <= remainder && remainder - (temp_1 + divisor_high) != 0)) {\n          divisor_high_shifted = quotient_high_low - 2;\n        }\n      }\n      return CONCAT44(quotient_low,divisor_high_shifted | quotient_low_high << 0x10);\n    }\n    shift_amount = LZCOUNT(divisor_high);\n    if (shift_amount != 0) {\n      quotient_low_high = dividend >> (0x20U - shift_amount & 0xff);\n      divisor_high = divisor_high << shift_amount;\n      dividend = dividend << shift_amount;\n      quotient_high = quotient_low_high | quotient_high << shift_amount;\n    }\n    quotient_low = divisor_high >> 0x10;\n    divisor_high_shifted = quotient_high / quotient_low;\n    remainder = (divisor_high & 0xffff) * divisor_high_shifted;\n    quotient_high_low = dividend >> 0x10 | (quotient_high - quotient_low * divisor_high_shifted) * 0x10000;\n    quotient_low_high = divisor_high_shifted;\n    if (quotient_high_low <= remainder && remainder - quotient_high_low != 0) {\n      carry_flag = CARRY4(quotient_high_low,divisor_high);\n      quotient_high_low = quotient_high_low + divisor_high;\n      quotient_low_high = divisor_high_shifted - 1;\n      if ((carry_flag == false) && (quotient_high_low <= remainder && remainder - quotient_high_low != 0)) {\n        quotient_low_high = divisor_high_shifted - 2;\n        quotient_high_low = quotient_high_low + divisor_high;\n      }\n    }\n    temp_1 = (quotient_high_low - remainder) / quotient_low;\n    divisor_high_shifted = (divisor_high & 0xffff) * temp_1;\n    remainder = dividend & 0xffff | ((quotient_high_low - remainder) - quotient_low * temp_1) * 0x10000;\n    quotient_low = temp_1;\n    if (remainder <= divisor_high_shifted && divisor_high_shifted - remainder != 0) {\n      quotient_low = temp_1 - 1;\n      if ((CARRY4(remainder,divisor_high) == false) &&\n         (remainder + divisor_high <= divisor_high_shifted && divisor_high_shifted - (remainder + divisor_high) != 0)) {\n        quotient_low = temp_1 - 2;\n      }\n    }\n    quotient_low = quotient_low | quotient_low_high << 0x10;\n  }\n  else {\n    if (quotient_high < divisor_low) {\n      return 0;\n    }\n    shift_amount = LZCOUNT(divisor_low);\n    if (shift_amount == 0) {\n      if ((divisor_low < quotient_high) || (divisor_high <= dividend)) {\n        return 1;\n      }\n      quotient_low = 0;\n    }\n    else {\n      quotient_low = 0x20 - shift_amount;\n      quotient_low_high = quotient_high >> (quotient_low & 0xff);\n      divisor_high_shifted = divisor_low << shift_amount | divisor_high >> (quotient_low & 0xff);\n      remainder = divisor_high_shifted >> 0x10;\n      division_result = quotient_low_high / remainder;\n      quotient_high_low = (divisor_high_shifted & 0xffff) * division_result;\n      temp_1 = dividend >> (quotient_low & 0xff) | quotient_high << shift_amount;\n      quotient_low = temp_1 >> 0x10 | (quotient_low_high - remainder * division_result) * 0x10000;\n      quotient_low_high = division_result;\n      if (quotient_low <= quotient_high_low && quotient_high_low - quotient_low != 0) {\n        carry_flag = CARRY4(quotient_low,divisor_high_shifted);\n        quotient_low = quotient_low + divisor_high_shifted;\n        quotient_low_high = division_result - 1;\n        if ((carry_flag == false) && (quotient_low <= quotient_high_low && quotient_high_low - quotient_low != 0)) {\n          quotient_low_high = division_result - 2;\n          quotient_low = quotient_low + divisor_high_shifted;\n        }\n      }\n      division_result = (quotient_low - quotient_high_low) / remainder;\n      temp_2 = (divisor_high_shifted & 0xffff) * division_result;\n      remainder = temp_1 & 0xffff | ((quotient_low - quotient_high_low) - remainder * division_result) * 0x10000;\n      quotient_low = division_result;\n      if (remainder <= temp_2 && temp_2 - remainder != 0) {\n        carry_flag = CARRY4(remainder,divisor_high_shifted);\n        remainder = remainder + divisor_high_shifted;\n        quotient_low = division_result - 1;\n        if ((carry_flag == false) && (remainder <= temp_2 && temp_2 - remainder != 0)) {\n          quotient_low = division_result - 2;\n          remainder = remainder + divisor_high_shifted;\n        }\n      }\n      quotient_low = quotient_low | quotient_low_high << 0x10;\n      product = (ulonglong)quotient_low * (ulonglong)(divisor_high << shift_amount);\n      quotient_low_high = (uint)((ulonglong)product >> 0x20);\n      if ((remainder - temp_2 < quotient_low_high) || ((remainder - temp_2 == quotient_low_high && (dividend << shift_amount < (uint)product)))\n         ) {\n        quotient_low = quotient_low - 1;\n      }\n    }\n  }\n  return (ulonglong)quotient_low;\n}\n\n",
            "renaming": {
                "FUN_00084a80": "calculate_division_value_00084a80",
                "param_1": "dividend",
                "param_2": "quotient_high",
                "param_3": "divisor_high",
                "param_4": "divisor_low",
                "lVar1": "product",
                "uVar2": "quotient_low",
                "uVar3": "divisor_high_shifted",
                "uVar4": "division_result",
                "uVar5": "remainder",
                "uVar6": "temp_1",
                "uVar7": "temp_2",
                "uVar8": "quotient_low_high",
                "uVar9": "quotient_high_low",
                "iVar10": "shift_amount",
                "bVar11": "carry_flag"
            },
            "calling": [
                "FUN_000847ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085858": {
            "entrypoint": "0x00085858",
            "current_name": "FUNC_00085858",
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 96761,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_0008021c",
            "FUN_00080258",
            "FUN_000802da",
            "FUN_000803d4",
            "FUN_00080410",
            "FUN_0008043e",
            "FUN_000804a8",
            "FUN_000805d0",
            "FUN_00080a68",
            "FUN_00080ae4",
            "FUN_00080c0c",
            "FUN_00080ce0",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080da0",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "thunk_FUN_00081714",
            "FUN_00081210",
            "FUN_00081318",
            "FUN_00081388",
            "FUN_000813a8",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_000815f8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081622",
            "FUN_0008163a",
            "FUN_0008165c",
            "FUN_00081682",
            "FUN_000816a8",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081c54",
            "FUN_00081c5c",
            "FUN_00081c94",
            "FUN_00081ca8",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_00081df4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_000825a0",
            "FUN_000825b0",
            "FUN_00082970",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00082ac0",
            "FUN_00082b38",
            "FUN_0008378c",
            "FUN_00083808",
            "FUN_00083974",
            "FUN_00083adc",
            "FUN_00083b14",
            "FUN_00083c40",
            "FUN_00083d00",
            "FUN_00083d9c",
            "FUN_00083f34",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_000842a4",
            "FUN_00084384",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_000844c4",
            "FUN_0008456c",
            "FUN_000845bc",
            "FUN_000846a4",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_00084750",
            "FUN_0008477c",
            "FUN_000847ac",
            "FUN_000847e0",
            "FUN_00084a80"
        ]
    ],
    "locked_functions": []
}