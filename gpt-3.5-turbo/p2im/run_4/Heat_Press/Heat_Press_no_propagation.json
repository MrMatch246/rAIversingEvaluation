{
    "functions": {
        "FUN_000816a6": {
            "renaming": {
                "FUN_000816a6": "do_nothing_000816a6"
            },
            "code": "\nvoid do_nothing_000816a6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a6",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "do_nothing_000816a6"
        },
        "FUN_000816a8": {
            "renaming": {
                "FUN_000816a8": "start_loop_until_condition_met_000816a8",
                "FUN_000816d4": "initialize_system",
                "FUN_00080ae4": "setup_peripherals",
                "do_nothing_000816a6": "do_nothing",
                "do_nothing_0008120c": "set_flag",
                "FUNC_000805d0": "perform_action",
                "DAT_000816d0": "condition_flag",
                "FUN_00080ce0": "process_result"
            },
            "code": "void start_loop_until_condition_met_000816a8(void)\n{\n  initialize_system();\n  setup_peripherals();\n  do_nothing();\n  set_flag(1);\n  enable_interrupts();\n  do {\n    do {\n      perform_action();\n    } while (DAT_000816d0 == 0);\n    process_result();\n  } while( true );\n}\n",
            "called": [
                "FUN_000804a8",
                "FUN_00080ae4",
                "FUN_000805d0",
                "FUN_00080ce0",
                "FUN_0008120c",
                "FUN_000816d4",
                "FUN_000816a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a8",
            "calling": [
                "FUN_00080f24"
            ],
            "imported": false,
            "current_name": "start_loop_until_condition_met_000816a8"
        },
        "FUN_00081042": {
            "renaming": {
                "FUN_00081042": "set_bits_in_memory_00081042",
                "param_1": "memory_location",
                "param_2": "bit_mask",
                "param_3": "bit_value",
                "param_4": "bit_position",
                "PTR_": "",
                "DAT_": "",
                "*(uint *)": "",
                "uint": "uint32_t",
                "masked_bit_value": "bit_value_masked",
                "masked_bit_position": "bit_position_masked",
                "memory_value": "memory_value_ptr"
            },
            "code": "void set_bits_in_memory_00081042(uint8_t* memory_location, uint32_t bit_mask, uint32_t bit_value, uint32_t bit_position)\n{\n  uint32_t* memory_value = (uint32_t*)(memory_location + 4);\n  uint32_t masked_bit_value = bit_value & 0xf;\n  uint32_t masked_bit_position = (bit_position & 3) << 0x1c;\n  *memory_value = *memory_value | bit_mask | (masked_bit_value << 0x18) | masked_bit_position;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081042",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "set_bits_in_memory_00081042"
        },
        "FUN_00082ac0": {
            "renaming": {
                "FUN_00082ac0": "process_data_00082ac0",
                "param_1": "input",
                "param_2": "data_length",
                "param_3": "data_array",
                "piVar1": "current_entry_ptr",
                "iVar2": "function_result",
                "piVar3": "current_data_ptr",
                "uVar4": "current_entry_data_index",
                "puVar5": "current_entry_data_ptr",
                "uVar6": "entry_size",
                "uVar7": "current_entry_data_count"
            },
            "code": "int process_data_00082ac0(undefined4 input, int data_length, int **data_array)\n{\n  int *current_data_ptr;\n  int function_result;\n  int *current_entry_ptr;\n  uint entry_size;\n  undefined4 *current_entry_data_ptr;\n  uint current_entry_data_count;\n  uint current_entry_data_index;\n\n  if (data_length < 1 << 0x12)\n  {\n    function_result = FUNC_00083f34();\n    data_array[2] = (int *)0x0;\n    data_array[1] = (int *)0x0;\n    return function_result;\n  }\n\n  current_entry_ptr = *data_array;\n  current_data_ptr = data_array[2];\n\n  while (current_data_ptr != (int *)0x0)\n  {\n    entry_size = current_entry_ptr[1];\n    current_entry_data_count = entry_size >> 2;\n\n    if (current_entry_data_count != 0)\n    {\n      current_entry_data_ptr = (undefined4 *)(*current_entry_ptr + -4);\n      current_entry_data_index = 0;\n\n      do\n      {\n        current_entry_data_ptr++;\n        function_result = processDataEntry(input, *current_entry_data_ptr, data_length);\n        current_entry_data_index++;\n\n        if (function_result == -1)\n        {\n          data_array[2] = (int *)0x0;\n          data_array[1] = (int *)0x0;\n          return -1;\n        }\n      } while (current_entry_data_count != current_entry_data_index);\n    }\n\n    current_data_ptr = (int *)((int)current_data_ptr - (entry_size & 0xfffffffc));\n    data_array[2] = current_data_ptr;\n    current_entry_ptr = current_entry_ptr + 2;\n  }\n\n  data_array[2] = (int *)0x0;\n  data_array[1] = (int *)0x0;\n  return 0;\n}",
            "called": [
                "FUN_00083f34",
                "FUN_00083c40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082ac0",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "process_data_00082ac0"
        },
        "FUN_00080ce0": {
            "renaming": {
                "FUN_00080ce0": "check_data_validity_00080ce0",
                "iVar1": "data_check_result",
                "FUN_000813e4": "check_data",
                "PTR_DAT_00080d14": "PTR_DATA_1",
                "PTR_DAT_00080d18": "PTR_DATA_2",
                "PTR_DAT_00080d1c": "PTR_DATA_3",
                "PTR_DAT_00080d20": "PTR_DATA_4",
                "do_nothing_00080aa8": "do_nothing_1",
                "do_nothing_00080ab8": "do_nothing_2",
                "do_nothing_00080aba": "do_nothing_3",
                "do_nothing_00080abc": "do_nothing_4"
            },
            "code": "void check_data_validity_00080ce0(void)\n{\n  int data_check_result;\n  data_check_result = check_data(PTR_DAT_00080d14);\n  if (data_check_result != 0) {\n    do_nothing_1();\n  }\n  data_check_result = check_data(PTR_DAT_00080d18);\n  if (data_check_result != 0) {\n    do_nothing_2();\n  }\n  data_check_result = check_data(PTR_DAT_00080d1c);\n  if (data_check_result != 0) {\n    do_nothing_3();\n  }\n  data_check_result = check_data(PTR_DAT_00080d20);\n  if (data_check_result != 0) {\n    do_nothing_4();\n  }\n  return;\n}",
            "called": [
                "FUN_00080aa8",
                "FUN_00080abc",
                "FUN_00080ab8",
                "FUN_00080aba",
                "FUN_000813e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ce0",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "check_data_validity_00080ce0"
        },
        "FUN_00081682": {
            "renaming": {
                "FUN_00081682": "initialize_array_to_zeroes_00081682",
                "param_1": "array_pointer",
                "param_2": "array_size",
                "uVar1": "function_return_value",
                "FUN_00082a50": "get_value_from_function",
                "FUN_0008165c": "set_array_values"
            },
            "code": "undefined4 *initialize_array_to_zeroes_00081682(undefined4 *array_pointer, int array_size) {\n  undefined4 return_value;\n  array_pointer[0] = 0;\n  array_pointer[1] = 0;\n  array_pointer[2] = 0;\n  if (array_size != 0) {\n    undefined4 function_return_value = get_value_from_function(array_size);\n    set_array_values(array_pointer, array_size, function_return_value);\n  }\n  return array_pointer;\n}",
            "called": [
                "FUN_0008165c",
                "FUN_00082a50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081682",
            "calling": [
                "FUN_00080a68"
            ],
            "imported": false,
            "current_name": "initialize_array_to_zeroes_00081682"
        },
        "FUN_000815fe": {
            "renaming": {
                "FUN_000815fe": "reverse_and_return_pointer_000815fe",
                "*param_1": "*pointer_to_data",
                "FUN_00081e04": "reverse_data"
            },
            "code": "undefined4 * reverse_and_return_pointer_000815fe(undefined4 *pointer_to_data)\n{\n  reverse_data(*pointer_to_data);\n  return pointer_to_data;\n}",
            "called": [
                "FUN_00081e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815fe",
            "calling": [],
            "imported": false,
            "current_name": "reverse_and_return_pointer_000815fe"
        },
        "FUN_00081d1c": {
            "renaming": {
                "FUN_00081d1c": "check_number_00081d1c",
                "param_1": "number",
                "uVar1": "difference",
                "result": "result",
                "shift": "shift"
            },
            "code": "uint check_number_00081d1c(uint number) {\n  uint result;\n\n  if (((number & 0x80000000) != 0) || (number << 1 < 0x7f000000)) {\n    return 0;\n  }\n  uint shift = (number << 1) >> 0x18;\n  uint difference = 0x9e - shift;\n  if (-1 < (int)difference) {\n    result = (number << 8 | 0x80000000) >> (difference & 0xff);\n  }\n  else {\n    if ((difference == 0xffffff9f) && ((number & 0x7fffff) != 0)) {\n      return 0;\n    }\n    result = 0xffffffff;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d1c",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "check_number_00081d1c"
        },
        "FUN_000847ac": {
            "renaming": {
                "FUN_000847ac": "compute_difference_000847ac",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "factor_low",
                "param_4": "factor_high",
                "param_5": "result_array",
                "lVar2": "product",
                "uVar1": "product_low",
                "param_5[1]": "result_array[1]"
            },
            "code": "void compute_difference_000847ac(uint input_1, int input_2, uint32_t factor_low, uint32_t factor_high, int *result_array)\n{\n  uint64_t product = FUNC_00084a80();\n  product *= ((uint64_t)factor_high << 32) | factor_low;\n  uint32_t product_low = (uint32_t)product;\n  uint32_t product_high = (uint32_t)(product >> 32);\n  result_array[0] = input_1 - product_low;\n  result_array[1] = input_2 - product_high - (input_1 < product_low);\n}",
            "called": [
                "FUN_00084a80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847ac",
            "calling": [
                "FUN_00084750"
            ],
            "imported": false,
            "current_name": "compute_difference_000847ac"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "executeFunctionIfNotNull_00080118",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "DAT_00080134": "shouldUseDefaultParam",
                "PTR_DAT_0008013c": "defaultParam",
                "DAT_00080140": "functionPointer",
                "DAT_00080144": "functionCode"
            },
            "code": "void executeFunctionIfNotNull_00080118(int param1, char* param2, int param3, int param4) {\n  if (DAT_00080134) {\n    param2 = PTR_DAT_0008013c;\n  }\n  if ((*DAT_00080140 != 0) && (DAT_00080144 != (code *)0x0)) {\n    (*DAT_00080144)(DAT_00080140, param2, param3, DAT_00080144, param4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "executeFunctionIfNotNull_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "do_nothing_00080aa8"
            },
            "code": "\nvoid do_nothing_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aa8"
        },
        "FUN_00081c94": {
            "renaming": {
                "FUN_00081c94": "is_CY_false_or_ZR_true_00081c94",
                "in_ZR": "zero",
                "in_CY": "carry"
            },
            "code": "bool is_CY_false_or_ZR_true_00081c94(void)\n{\n  undefined zero = 0;\n  undefined carry = 0;\n  \n  FUN_00081c5c();\n  return !(bool)carry || (bool)zero;\n}",
            "called": [
                "FUN_00081c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c94",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "is_CY_false_or_ZR_true_00081c94"
        },
        "FUN_00083b14": {
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "data_structure_address",
                "puVar1": "undefined_pointer_1",
                "uVar2": "undefined_value_1",
                "puVar3": "undefined_pointer_2",
                "puVar4": "undefined_pointer_3",
                "puVar5": "data_structure_1",
                "puVar6": "data_structure_2"
            },
            "code": "void initialize_data_structures_00083b14(int param_1)\n{\n  if (*(int *)(param_1 + 0x38) == 0) {\n    // Initialize first data structure\n    undefined4 *data_structure_1 = *(undefined4 **)(param_1 + 4);\n    *(undefined **)(param_1 + 0x3c) = data_structure_1 + 0x17;\n    *(undefined4 *)(param_1 + 0x2e4) = 3;\n    *(int *)(param_1 + 0x2e8) = param_1 + 0x2ec;\n    *(undefined4 *)(param_1 + 0x2e0) = 0;\n    data_structure_1[0] = 0;\n    data_structure_1[1] = 0;\n    data_structure_1[2] = 0;\n    data_structure_1[0x19] = 0;\n    *(undefined2 *)((int)data_structure_1 + 0xe) = 0;\n    data_structure_1[4] = 0;\n    data_structure_1[5] = 0;\n    data_structure_1[6] = 0;\n    memset(data_structure_1 + 0x17, 0, 8);\n    // Initialize second data structure\n    undefined4 *data_structure_2 = *(undefined4 **)(param_1 + 8);\n    data_structure_1[7] = data_structure_1;\n    data_structure_1[8] = data_structure_1 + 0x2c;\n    data_structure_1[9] = 0x83bfc;\n    data_structure_1[10] = 0x8449c;\n    data_structure_1[0xb] = 0x844bc;\n    *(undefined2 *)((int)data_structure_2 + 0xe) = 1;\n    *(undefined2 *)(data_structure_2 + 3) = 9;\n    data_structure_2[0] = 0;\n    data_structure_2[1] = 0;\n    data_structure_2[2] = 0;\n    data_structure_2[0x19] = 0;\n    data_structure_2[4] = 0;\n    data_structure_2[5] = 0;\n    data_structure_2[6] = 0;\n    memset(data_structure_2 + 0x17, 0, 8);\n    // Initialize third data structure\n    undefined4 *data_structure_3 = *(undefined4 **)(param_1 + 0xc);\n    data_structure_2[7] = data_structure_2;\n    data_structure_2[8] = data_structure_2 + 0x2c;\n    data_structure_2[9] = 0x83bfc;\n    data_structure_2[10] = 0x8449c;\n    data_structure_2[0xb] = 0x844bc;\n    *(undefined2 *)(data_structure_3 + 3) = 0x12;\n    *(undefined2 *)((int)data_structure_3 + 0xe) = 2;\n    data_structure_3[0] = 0;\n    data_structure_3[1] = 0;\n    data_structure_3[2] = 0;\n    data_structure_3[0x19] = 0;\n    data_structure_3[4] = 0;\n    data_structure_3[5] = 0;\n    data_structure_3[6] = 0;\n    memset(data_structure_3 + 0x17, 0, 8);\n    data_structure_3[7] = data_structure_3;\n    data_structure_3[8] = data_structure_3 + 0x2c;\n    data_structure_3[9] = 0x83bfc;\n    data_structure_3[10] = 0x8449c;\n    data_structure_3[0xb] = 0x844bc;\n    *(int *)(param_1 + 0x38) = 1;\n  }\n  return;\n}",
            "called": [
                "FUN_00082504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b14",
            "calling": [
                "FUN_00082b38",
                "FUN_000844c4",
                "FUN_000846a4",
                "FUN_00083808",
                "FUN_00083adc"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_00083b14"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "checkValidity_000842a4",
                "param_1": "input",
                "param_2": "data",
                "uVar1": "shortVal",
                "iVar2": "intVar2",
                "iVar3": "intVar3",
                "uVar4": "uintVal",
                "bVar5": "boolVar",
                "auStack_54": "auStack",
                "local_50": "localVar",
                "PTR_FUN_0008449c_1_00084380": "origFunction",
                "PTR_LAB_00083b08_1_0008437c": "newFunction"
            },
            "code": "void checkValidity_000842a4(int input, int *data){\n    ushort shortVal = *(ushort *)(data + 3);\n    uint uintVal = (uint)shortVal;\n    if((int)(uintVal << 0x1e) < 0){\n        *data = (int)data + 0x43;\n        data[4] = (int)data + 0x43;\n        data[5] = 1;\n        return;\n    }\n    if(-1 < *(short *)((int)data + 0xe)){\n        int iVar2 = FUN_000846b4(input, (int)*(short *)((int)data + 0xe), auStack);\n        if(-1 < iVar2){\n            bool bVar5 = (localVar & 0xf000) == 0x2000;\n            if(((localVar & 0xf000) == 0x8000) && ((undefined *)data[10] == PTR_FUN_0008449c_1_00084380)){\n                iVar2 = 0x400;\n                *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x400;\n                data[0x13] = 0x400;\n            }\n            else{\n                iVar2 = 0x400;\n                *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x800;\n            }\n            goto LAB_00084300;\n        }\n        shortVal = *(ushort *)(data + 3);\n        uintVal = (uint)shortVal;\n    }\n    *(ushort *)(data + 3) = shortVal | 0x800;\n    int iVar2 = ((uintVal & 0x80) == 0) ? 0x400 : 0x40;\n    bool bVar5 = false;\n    LAB_00084300:\n    int iVar3 = FUNC_00081e14(input, iVar2);\n    shortVal = *(ushort *)(data + 3);\n    if(iVar3 == 0){\n        if(-1 < (int)((uint)shortVal << 0x16)){\n            *(ushort *)(data + 3) = shortVal | 2;\n            *data = (int)data + 0x43;\n            data[4] = (int)data + 0x43;\n            data[5] = 1;\n        }\n    }\n    else{\n        *(undefined **)(input + 0x3c) = PTR_LAB_00083b08_1_0008437c;\n        *(ushort *)(data + 3) = shortVal | 0x80;\n        *data = iVar3;\n        data[4] = iVar3;\n        data[5] = iVar2;\n        if(bVar5 && (iVar2 = FUN_000846dc(input, (int)*(short *)((int)data + 0xe))) != 0){\n            *(ushort *)(data + 3) = *(ushort *)(data + 3) | 1;\n        }\n    }\n}",
            "called": [
                "FUN_000846dc",
                "FUN_000846b4",
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "FUN_00083808"
            ],
            "imported": false,
            "current_name": "checkValidity_000842a4"
        },
        "FUN_000846a4": {
            "renaming": {
                "FUN_000846a4": "handle_param_000846a4",
                "param_1": "param",
                "uVar1": "result",
                "iVar2": "result",
                "iVar3": "data",
                "FUN_00083b14": "initialize_data",
                "FUN_00083adc": "process_data",
                "(code **)param_1 + 0x2c": "function_ptr",
                "*(undefined4 *)(param_1 + 0x1c)": "arg",
                "*(ushort *)(param_1 + 0xc)": "condition",
                "FUN_00083d9c": "do_something",
                "*(undefined4 *)(param_1 + 0x10)": "arg1",
                "*(int *)(param_1 + 0x30)": "ptr1",
                "param_1 + 0x40": "ptr2",
                "*(int *)(param_1 + 0x44)": "ptr3",
                "do_nothing_00083c08": "do_nothing1",
                "do_nothing_00083c0c": "do_nothing2"
            },
            "code": "int handle_param_000846a4(int param){\n  int data = *PTR_DAT_000846b0;\n  if (param != 0) {\n    if ((data != 0) && (*(int *)(data + 0x38) == 0)) {\n      initialize_data();\n    }\n    if (*(short *)(param + 0xc) != 0) {\n      int result = process_data(data,param);\n      if ((*(code **)(param + 0x2c) != (code *)0x0) && (result = (**(code **)(param + 0x2c))(data,*(int *)(param + 0x1c))) < 0) {\n        result = -1;\n      }\n      if ((int)((uint)*(ushort *)(param + 0xc) << 0x18) < 0) {\n        do_something(data,*(int *)(param + 0x10));\n      }\n      if (*(int *)(param + 0x30) != 0) {\n        if (*(int *)(param + 0x30) != param + 0x40) {\n          do_something(data);\n        }\n        *(int *)(param + 0x30) = 0;\n      }\n      if (*(int *)(param + 0x44) != 0) {\n        do_something(data);\n        *(int *)(param + 0x44) = 0;\n      }\n      do_nothing_00083c08();\n      *(short *)(param + 0xc) = 0;\n      do_nothing_00083c0c();\n      return result;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_00083b14",
                "FUN_00083c08",
                "FUN_00083d9c",
                "FUN_00083c0c",
                "FUN_00083adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846a4",
            "calling": [],
            "imported": false,
            "current_name": "handle_param_000846a4"
        },
        "FUN_00080f24": {
            "renaming": {
                "FUN_00080f24": "initialize_memory_00080f24",
                "puVar1": "rel_ptr",
                "puVar2": "data_ptr",
                "iVar3": "i",
                "puVar4": "ptr"
            },
            "code": "void initialize_memory_00080f24(void)\n{\n  uint32_t *rel_ptr = PTR_Elf32_Rel_ARRAY_00080f80;\n  uint32_t *data_ptr = DAT_00080f7c;\n  uint32_t *ptr = (uint32_t *)PTR_DAT_00080f84;\n  if (data_ptr != rel_ptr) {\n    for (int i = 0; ptr = (uint32_t *)PTR_DAT_00080f84, rel_ptr + i < PTR_DAT_00080f88; i += 4) {\n      *(uint32_t *)(rel_ptr + i) = *(uint32_t *)(data_ptr + i);\n    }\n  }\n  for (; ptr < DAT_00080f8c; ptr++) {\n    *ptr = 0;\n  }\n  data_ptr = PTR_DAT_00080f90 + -0x20000000;\n  *(uint32_t *)(DAT_00080f94 + 8) = (uint32_t)PTR_DAT_00080f90 & 0x1fffff80;\n  if (data_ptr < (uint32_t *)0x100000) {\n    *(uint32_t *)(DAT_00080f94 + 8) |= 0x20000000;\n  }\n  (*DAT_00080f98)();\n  while(1);\n}",
            "called": [
                "FUN_000816a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f24",
            "calling": [],
            "imported": false,
            "current_name": "initialize_memory_00080f24"
        },
        "FUN_00080e04": {
            "renaming": {
                "FUN_00080e04": "check_bitwise_and_00080e04",
                "param_1": "ptr_param_1",
                "uVar1": "result"
            },
            "code": "uint check_bitwise_and_00080e04(uint ptr_param_1, uint param_2)\n{\n  uint result = *(uint *)(ptr_param_1 + 8) & param_2;\n  if (result)\n  {\n    if ((param_2 & *(uint *)(ptr_param_1 + 0x18)) == 0)\n    {\n      result = 0;\n    }\n    else\n    {\n      result = 1;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e04",
            "calling": [
                "FUN_00081318"
            ],
            "imported": false,
            "current_name": "check_bitwise_and_00080e04"
        },
        "FUN_000804a8": {
            "renaming": {
                "FUN_000804a8": "initialize_device_000804a8",
                "puVar1": "device_config",
                "puVar2": "device_register",
                "puVar3": "some_data1",
                "puVar4": "some_data2",
                "uVar5": "result",
                "iVar6": "delay",
                "PTR_DAT_000805ac": "device_register_data1",
                "PTR_DAT_000805a8": "device_config_data",
                "PTR_DAT_000805b0": "device_register_data2",
                "PTR_DAT_000805b4": "some_data3",
                "PTR_DAT_000805b8": "baud_rate_ptr",
                "PTR_DAT_000805bc": "delay_ptr1",
                "PTR_DAT_000805c0": "delay_ptr2",
                "PTR_DAT_000805c4": "delay_ptr3",
                "PTR_DAT_000805c8": "delay_ptr4",
                "PTR_DAT_000805cc": "some_flag_ptr",
                "PTR_DAT_00080160": "some_status_ptr"
            },
            "code": "int initialize_device_000804a8() {\n    int baud_rate = 0x4b00;\n    int delay = 2000;\n    int *ptr1 = PTR_DAT_000805b8;\n    int *ptr2 = PTR_DAT_000805bc;\n    int *ptr3 = PTR_DAT_000805c0;\n    int *ptr4 = PTR_DAT_000805c4;\n    int *ptr5 = PTR_DAT_000805c8;\n    *ptr5 = 0;\n    if (*PTR_DAT_00080160 == 0) {\n        software_interrupt(0x3f);\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}\n",
            "called": [
                "FUN_00080164",
                "thunk_FUN_00081714",
                "FUN_00081318",
                "FUN_00081210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000804a8",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "initialize_device_000804a8"
        },
        "FUN_000802da": {
            "renaming": {
                "FUN_000802da": "validate_input_000802da",
                "param_1": "input_ptr",
                "param_2": "input_size",
                "param_3": "input_data",
                "cVar1": "error_code",
                "bVar2": "byte_val",
                "uVar3": "uchar_val",
                "uVar4": "ushort_val",
                "uVar5": "uint_val",
                "puVar6": "ushort_ptr",
                "local_1c": "local_char_1",
                "local_1b": "local_uchar_1",
                "local_1a": "local_ushort_1"
            },
            "code": "int validate_input_000802da(int input_ptr, unsigned short input_size, unsigned short *input_data)\n{\n    char error_code;\n    byte byte_val;\n    unsigned char uchar_val;\n    unsigned short ushort_val;\n    uint uint_val;\n    unsigned short *ushort_ptr;\n    char local_1c;\n    unsigned char local_1b;\n    unsigned short local_1a;\n\n    uint_val = (uint)input_size;\n    if (*(char *)(input_ptr + 4) != '\\0') {\n        error_code = -2;\n        goto LAB_000803cc;\n    }\n    if (*(char *)(input_ptr + 7) != '\\0') {\n        error_code = -1;\n        goto LAB_000803cc;\n    }\n    if (0xf6 < (byte)(local_1c - 1U)) {\n        error_code = -3;\n        goto LAB_000803cc;\n    }\n    *(char *)(input_ptr + 9) = local_1c;\n    *(unsigned char *)(input_ptr + 10) = local_1b;\n    *(unsigned short **)(input_ptr + 0x4c) = input_data;\n    *(char *)(input_ptr + 0xb) = (char)((uint)local_1a >> 8);\n    *(char *)(input_ptr + 0xc) = (char)local_1a;\n    error_code = (char)input_size;\n    uchar_val = (unsigned char)(uint_val >> 8);\n    switch(local_1b) {\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n            *(unsigned char *)(input_ptr + 0xd) = uchar_val;\n            break;\n        case 5:\n            ushort_val = *input_data;\n            if (ushort_val != 0) {\n                ushort_val = 1;\n            }\n            *(char *)(input_ptr + 0xd) = -(char)ushort_val;\n            uint_val = 0;\n            break;\n        case 6:\n            *(char *)(input_ptr + 0xd) = (char)((uint)*input_data >> 8);\n            uint_val = (uint)*input_data;\n            break;\n        default:\n            goto switchD_0008031e_caseD_7;\n        case 0xf:\n            byte_val = (byte)(input_size >> 3) & 0xfe;\n            if ((input_size & 0xf) != 0) {\n                byte_val = byte_val + 1;\n            }\n            *(char *)(input_ptr + 0xe) = error_code;\n            *(unsigned char *)(input_ptr + 0xd) = uchar_val;\n            *(byte *)(input_ptr + 0xf) = byte_val;\n            uchar_val = 7;\n            goto LAB_0008034a;\n        case 0x10:\n            *(unsigned char *)(input_ptr + 0xd) = uchar_val;\n            *(char *)(input_ptr + 0xe) = error_code;\n            input_data = input_data + -1;\n            *(char *)(input_ptr + 0xf) = error_code * '\\x02';\n            *(unsigned char *)(input_ptr + 0x49) = 7;\n            ushort_ptr = input_data + uint_val;\n            while (input_data != ushort_ptr) {\n                byte_val = *(byte *)(input_ptr + 0x49);\n                *(char *)(input_ptr + (uint)byte_val + 9) = (char)((uint)input_data[1] >> 8);\n                uint_val = byte_val + 1 & 0xff;\n                *(char *)(input_ptr + 0x49) = (char)uint_val;\n                input_data = input_data + 1;\n                *(char *)(uint_val + input_ptr + 9) = (char)*input_data;\n                *(byte *)(input_ptr + 0x49) = byte_val + 2;\n            }\n            goto switchD_0008031e_caseD_7;\n    }\n    *(char *)(input_ptr + 0xe) = (char)uint_val;\n    uchar_val = 6;\nLAB_0008034a:\n    *(unsigned char *)(input_ptr + 0x49) = uchar_val;\n    FUN_00080258(input_ptr);\n    *(unsigned char *)(input_ptr + 7) = 1;\n    error_code = '\\0';\nLAB_000803cc:\n    return (int)error_code;\n}",
            "called": [
                "FUN_00080258"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000802da",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "validate_input_000802da"
        },
        "FUN_00080f9c": {
            "renaming": {
                "FUN_00080f9c": "find_value_at_index_00080f9c",
                "param_1": "result_array",
                "param_2": "array_size",
                "param_3": "divisor",
                "param_4": "threshold",
                "local_58": "local_array",
                "uVar1": "quotient",
                "uVar2": "i"
            },
            "code": "uint32_t find_value_at_index_00080f9c(uint32_t* result_array, uint32_t array_size, uint32_t divisor, uint32_t threshold) {\n    uint32_t local_array[16] = {0};\n    local_array[0] = *PTR_DAT_0008102c;\n    local_array[1] = *(uint32_t*)(PTR_DAT_0008102c + 4);\n    local_array[2] = *(uint32_t*)(PTR_DAT_0008102c + 8);\n    local_array[3] = *(uint32_t*)(PTR_DAT_0008102c + 0xc);\n    local_array[4] = *(uint32_t*)(PTR_DAT_0008102c + 0x10);\n    local_array[5] = *(uint32_t*)(PTR_DAT_0008102c + 0x14);\n    local_array[6] = *(uint32_t*)(PTR_DAT_0008102c + 0x18);\n    local_array[7] = *(uint32_t*)(PTR_DAT_0008102c + 0x1c);\n    local_array[8] = *(uint32_t*)(PTR_DAT_0008102c + 0x20);\n    local_array[9] = *(uint32_t*)(PTR_DAT_0008102c + 0x24);\n    local_array[10] = *(uint32_t*)(PTR_DAT_0008102c + 0x28);\n    local_array[11] = *(uint32_t*)(PTR_DAT_0008102c + 0x2c);\n    local_array[12] = *(uint32_t*)(PTR_DAT_0008102c + 0x30);\n    local_array[13] = *(uint32_t*)(PTR_DAT_0008102c + 0x34);\n    local_array[14] = *(uint32_t*)(PTR_DAT_0008102c + 0x38);\n    local_array[15] = *(uint32_t*)(PTR_DAT_0008102c + 0x3c);\n    result_array[0] = 1;\n    result_array[1] = 0;\n    result_array[0x48] = 0x202;\n    result_array[0x41] = 0;\n    result_array[0x45] = 0;\n    uint32_t quotient = array_size / (divisor * 2);\n    if (array_size == divisor * 2 * quotient) {\n        quotient--;\n    }\n    for (uint32_t i = 0; i < 16; i++) {\n        if ((threshold * (quotient / (uint32_t)((quotient + 1) * 2 / *PTR_DAT_00081030))) <= local_array[i]) {\n            result_array[1] = (i & 0xf) << 0x10 | (quotient & 0xff) << 8 | result_array[1];\n            return 0;\n        }\n    }\n    return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f9c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "find_value_at_index_00080f9c"
        },
        "FUN_00081210": {
            "renaming": {
                "FUN_00081210": "check_condition_and_update_00081210",
                "param_1": "index",
                "param_2": "value",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "iVar3": "result",
                "uVar4": "var4",
                "uVar5": "var5",
                "uVar6": "var6",
                "bVar7": "byte1",
                "bVar8": "byte2",
                "iVar9": "index_1c",
                "iVar10": "var1"
            },
            "code": "int check_condition_and_update_00081210(int index, int value)\n{\n    undefined *ptr1 = PTR_DAT_0008130c;\n    undefined *ptr2 = PTR_DAT_00081310;\n    int result = index;\n    if (ptr1[index * 0x1c + 0xc] != 0)\n    {\n        if ((ptr2[index] & 0xf) == 4)\n        {\n            result = FUN_0008105c(DAT_00081314,ptr1[index * 0x1c + 0x19]);\n        }\n        byte b1 = ptr2[index];\n        byte b2 = b1 & 0xf;\n        if (b2 < 3 && b1 != 0)\n        {\n            if (b2 == 2 && value == 0)\n            {\n                return result;\n            }\n            else if (b2 == 1 && value == 2)\n            {\n                return result;\n            }\n            else if (b2 == 3)\n            {\n                if (value == 1)\n                {\n                    return result;\n                }\n                goto LAB_0008126c;\n            }\n        }\n        if (value != 1)\n        {\nLAB_0008126c:\n            if (value == 0)\n            {\n                int index_1c = index * 0x1c;\n                FUN_00080e18(*(undefined4 *)(ptr1 + index_1c + 8));\n                result = FUN_00080da0(*(undefined4 *)(ptr1 + index_1c),3,*(undefined4 *)(ptr1 + index_1c + 4),0);\n                b1 = ptr2[index] & 0xf0 | 2;\n            }\n            else\n            {\n                if (value != 2)\n                {\n                    return result;\n                }\n                int index_1c = index * 0x1c;\n                FUN_00080e18(*(undefined4 *)(ptr1 + index_1c + 8));\n                result = FUN_00080da0(*(undefined4 *)(ptr1 + index_1c),3,*(undefined4 *)(ptr1 + index_1c + 4),1);\n                b1 = ptr2[index] & 0xf0 | 1;\n            }\n            ptr2[index] = b1;\n            return result;\n        }\n        int index_1c = index * 0x1c;\n        int var1 = *(int *)(ptr1 + index_1c);\n        if (b1 >> 4 == 0)\n        {\n            uVar5 = 4;\n        }\n        else\n        {\n            uVar5 = 5;\n        }\n        result = FUN_00080da0(var1,uVar5,*(undefined4 *)(ptr1 + index_1c + 4),*(undefined4 *)(ptr1 + index_1c + 0x10));\n        ptr2[index] = ptr2[index] & 0xf0 | 3;\n        if (*(int *)(var1 + 0x18) == -1)\n        {\n            uint uVar4 = *(uint *)(ptr1 + index_1c + 8);\n            if (uVar4 > 0x2c)\n            {\n                return 1;\n            }\n            if (uVar4 < 0x20)\n            {\n                uVar4 = 1 << (uVar4 & 0xff);\n                uint uVar6 = *(uint *)(DAT_00080e98 + 0x18) & uVar4;\n                if (uVar6 == uVar4)\n                {\n                    *(uint *)(DAT_00080e98 + 0x14) = uVar6;\n                }\n            }\n            else\n            {\n                uVar4 = 1 << (uVar4 - 0x20 & 0xff);\n                uint uVar6 = *(uint *)(DAT_00080e98 + 0x108) & uVar4;\n                if (uVar6 == uVar4)\n                {\n                    *(uint *)(DAT_00080e98 + 0x104) = uVar6;\n                }\n            }\n            return 0;\n        }\n    }\n    return result;\n}",
            "called": [
                "FUN_00080e18",
                "FUN_00080da0",
                "FUN_0008105c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081210",
            "calling": [
                "FUN_000804a8",
                "FUN_00080164",
                "FUN_00081318"
            ],
            "imported": false,
            "current_name": "check_condition_and_update_00081210"
        },
        "FUN_00081454": {
            "renaming": {
                "FUN_00081454": "write_to_buffer_00081454",
                "param_1": "buffer_address",
                "param_2": "value",
                "iVar1": "buffer_data_address",
                "uVar2": "buffer_data_write_index_next",
                "DAT_000814a4": "BUFFER_WRITE_INDEX_MASK"
            },
            "code": "int write_to_buffer_00081454(int buffer_address, int value) {\n  int buffer_info_address = *(int *)(buffer_address + 0x18);\n  int buffer_size = *(int *)(buffer_info_address + 0x14);\n  int buffer_data_address = *(int *)(buffer_address + 0x14);\n  int buffer_data_size = *(int *)(buffer_data_address + 0x80);\n  int buffer_data_write_index = *(int *)(buffer_data_address + 0x84);\n  \n  if ((*(int *)(buffer_info_address + 0x14) << 0x1e < 0) && (*(int *)(buffer_data_address + 0x84) == *(int *)(buffer_data_address + 0x80))) {\n    *(int *)(buffer_info_address + 0x1c) = value;\n  }\n  else {\n    uint buffer_data_write_index_next = DAT_000814a4 & (buffer_data_size + 1U);\n    if ((int)buffer_data_write_index_next < 0) {\n      buffer_data_write_index_next = (buffer_data_write_index_next - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(buffer_data_address + 0x84) == buffer_data_write_index_next);\n    *(char *)(buffer_data_address + buffer_data_write_index) = (char)value;\n    *(uint *)(buffer_data_address + 0x80) = buffer_data_write_index_next;\n    *(int *)(buffer_info_address + 8) = 2;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081454",
            "calling": [],
            "imported": false,
            "current_name": "write_to_buffer_00081454"
        },
        "FUN_00081730": {
            "renaming": {
                "FUN_00081730": "FUNC_00081730"
            },
            "code": "\nuint FUNC_00081730(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_0008186a;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081730",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081730"
        },
        "FUN_00080ab8": {
            "renaming": {
                "FUN_00080ab8": "do_nothing_00080ab8"
            },
            "code": "\nvoid do_nothing_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ab8",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080ab8"
        },
        "FUN_00081734": {
            "renaming": {
                "FUN_00081734": "FUNC_00081734"
            },
            "code": "\nuint FUNC_00081734(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_0008186a;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081734",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081734"
        },
        "FUN_00084728": {
            "renaming": {
                "FUN_00084728": "execute_function_00084728",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr",
                "iVar2": "status"
            },
            "code": "void execute_function_00084728(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n    undefined *ptr = PTR_DAT_0008474c;\n    *(undefined4 *)PTR_DAT_0008474c = 0;\n    int status = execute_subfunction(arg1, arg2, arg3);\n    if ((status == -1) && (*(int *)ptr != 0)) {\n        *result = *(int *)ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_000811c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084728",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_00084728"
        },
        "FUN_00083c40": {
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "param_1": "data_value",
                "param_2": "data_length",
                "param_3": "data_buffer",
                "uVar1": "index",
                "iVar2": "status",
                "uVar3": "value",
                "pbVar4": "buffer_ptr",
                "uVar5": "buffer_index",
                "local_1c": "current_byte",
                "abStack_1b": "previous_bytes"
            },
            "code": "uint process_data_00083c40(undefined4 data_length, uint data_value, byte **data_buffer)\n{\n  uint index;\n  int status;\n  uint value;\n  byte *buffer_ptr;\n  uint buffer_index;\n  byte current_byte;\n  byte previous_bytes[3];\n  \n  if (-1 < (int)((uint)*(ushort *)(data_buffer + 3) << 0x12)) {\n    *(ushort *)(data_buffer + 3) = *(ushort *)(data_buffer + 3) | 0x2000;\n    data_buffer[0x19] = (byte *)((uint)data_buffer[0x19] | 0x2000);\n  }\n  index = FUN_00084298();\n  if ((index == 1) && (data_length - 1 < 0xff)) {\n    value = data_length & 0xff;\n    current_byte = (byte)value;\n  }\n  else {\n    index = FUN_0008456c(data_value, &current_byte, data_length, data_buffer + 0x17);\n    if (index == 0xffffffff) {\n      *(ushort *)(data_buffer + 3) = *(ushort *)(data_buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (index == 0) {\n      return data_length;\n    }\n    value = (uint)current_byte;\n  }\n  buffer_index = 0;\n  do {\n    buffer_ptr = data_buffer[2] + -1;\n    data_buffer[2] = buffer_ptr;\n    if ((int)buffer_ptr < 0) {\n      if ((int)data_buffer[6] <= (int)buffer_ptr) {\n        **data_buffer = (byte)value;\n        buffer_ptr = *data_buffer;\n        value = (uint)*buffer_ptr;\n        if (value != 10) goto LAB_00083c90;\n      }\n      status = FUN_000844c4(data_value, value, data_buffer);\n      if (status == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **data_buffer = (byte)value;\n      buffer_ptr = *data_buffer;\nLAB_00083c90:\n      *data_buffer = buffer_ptr + 1;\n    }\n    if (index <= buffer_index + 1) {\n      return data_length;\n    }\n    value = (uint)previous_bytes[buffer_index];\n    buffer_index = buffer_index + 1;\n  } while(true);\n}",
            "called": [
                "FUN_0008456c",
                "FUN_000844c4",
                "FUN_00084298"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c40",
            "calling": [
                "FUN_00082ac0"
            ],
            "imported": false,
            "current_name": "process_data_00083c40"
        },
        "FUN_000805d0": {
            "renaming": {
                "FUN_000805d0": "FUNC_000805d0"
            },
            "code": "\nvoid FUNC_000805d0(void)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined *puVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  undefined2 uVar10;\n  uint uVar11;\n  undefined4 uVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  int iVar16;\n  int *piVar17;\n  undefined4 uVar18;\n  int iVar19;\n  \n  puVar7 = PTR_DAT_0008089c;\n  puVar9 = PTR_DAT_00080898;\n  puVar8 = PTR_DAT_00080894;\n  puVar3 = PTR_DAT_0008087c;\n  puVar5 = PTR_DAT_00080878;\n  puVar4 = PTR_DAT_00080874;\n  puVar2 = PTR_DAT_00080834;\n  puVar1 = PTR_DAT_00080830;\n  if ((byte)*PTR_DAT_0008082c < 10) {\n                    /* WARNING: Could not recover jumptable at 0x000805f0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_000805f0::switchdataD_000805f4 +\n              (uint)(&switchD_000805f0::switchdataD_000805f4)[(byte)*PTR_DAT_0008082c] * 2))();\n    return;\n  }\n  iVar16 = *(int *)PTR_DAT_00080894;\n  iVar15 = iVar16 - *(int *)PTR_DAT_00080874;\n  if (iVar15 < 0) {\n    iVar15 = iVar15 + 0x3c;\n  }\n  *(int *)PTR_DAT_0008087c = iVar15;\n  puVar6 = PTR_DAT_00080880;\n  uVar11 = *(uint *)puVar9;\n  iVar15 = uVar11 - *(int *)puVar5;\n  *(int *)PTR_DAT_00080880 = iVar15;\n  if (iVar15 < 0) {\n    *(int *)puVar3 = *(int *)puVar3 + -1;\n    *(int *)puVar6 = iVar15 + 0x3c;\n  }\n  iVar15 = *(int *)puVar3;\n  iVar19 = *(int *)puVar6;\n  *(short *)(puVar1 + 0x36) = (short)iVar15;\n  *(short *)(puVar1 + 0x38) = (short)iVar19;\n  if ((iVar15 == 0) && (iVar19 == 0)) {\n    *(undefined4 *)PTR_DAT_00080868 = 1;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n  }\n  puVar6 = PTR_DAT_00080888;\n  puVar3 = PTR_DAT_00080884;\n  if (*(int *)PTR_DAT_00080884 == iVar16) {\n    iVar15 = 1 - uVar11;\n    if (1 < uVar11) {\n      iVar15 = 0;\n    }\n    *(int *)PTR_DAT_00080888 = iVar15;\n    if (iVar15 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    *(int *)puVar3 = iVar16;\n    puVar3 = PTR_DAT_00080a50;\n    *(uint *)puVar6 = uVar11;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    *(undefined4 *)puVar3 = 0;\n  }\n  puVar6 = PTR_DAT_0008088c;\n  puVar3 = PTR_DAT_00080860;\n  iVar15 = *(int *)puVar7;\n  if (iVar15 == 0) {\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    piVar17 = (int *)PTR_DAT_0008088c;\nLAB_000808f2:\n    *piVar17 = iVar15;\n  }\n  else {\n    if (iVar15 != 1) goto LAB_000808f4;\n    if (*(int *)PTR_DAT_0008088c < *(int *)PTR_DAT_00080860) {\n      uVar11 = thunk_FUN_00081714();\n      puVar7 = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < uVar11) {\n        *(int *)puVar6 = *(int *)puVar6 + 1;\n        iVar15 = thunk_FUN_00081714();\n        *(int *)puVar7 = iVar15 + 1000;\n      }\n    }\n    if (*(int *)puVar6 < *(int *)puVar3) goto LAB_000808f4;\n    *(int *)PTR_DAT_0008088c = *(int *)puVar3 + 1;\n    piVar17 = (int *)PTR_DAT_00080a20;\n    puVar3 = PTR_DAT_00080a1c;\n    if (*(int *)puVar4 < *(int *)puVar8) {\n      uVar11 = thunk_FUN_00081714();\n      puVar3 = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < uVar11) {\n        *(int *)puVar5 = *(int *)puVar5 + 1;\n        iVar15 = thunk_FUN_00081714();\n        *(int *)puVar3 = iVar15 + 1000;\n      }\n    }\n    else {\n      if (*(int *)puVar4 != *(int *)puVar8) goto LAB_000808f4;\n      if (*(int *)puVar9 < *(int *)puVar5) {\n        iVar15 = 0;\n        *(undefined4 *)PTR_DAT_00080a1c = 0;\n        goto LAB_000808f2;\n      }\n      uVar11 = thunk_FUN_00081714();\n      puVar8 = PTR_DAT_00080a54;\n      if (*(uint *)PTR_DAT_00080a54 < uVar11) {\n        *(int *)puVar3 = *(int *)puVar3 + 1;\n        iVar15 = thunk_FUN_00081714();\n        *(int *)puVar8 = iVar15 + 1000;\n      }\n    }\n    if (0x3b < *(int *)puVar5) {\n      *(undefined4 *)PTR_DAT_00080a1c = 0;\n      *(int *)puVar4 = *(int *)puVar4 + 1;\n    }\n  }\nLAB_000808f4:\n  uVar11 = thunk_FUN_00081714();\n  puVar8 = PTR_DAT_00080a60;\n  puVar3 = PTR_DAT_00080a5c;\n  puVar5 = PTR_DAT_00080a58;\n  puVar4 = PTR_DAT_00080a24;\n  if (*(uint *)PTR_DAT_00080a58 < uVar11) {\n    uVar12 = FUN_0008189c(*(undefined4 *)PTR_DAT_00080a28);\n    uVar12 = FUNC_00081730(uVar12,*(undefined4 *)PTR_DAT_00080a2c);\n    *(undefined4 *)PTR_DAT_00080a30 = uVar12;\n    puVar9 = PTR_DAT_00080a34;\n    uVar18 = *(undefined4 *)PTR_DAT_00080a34;\n    uVar13 = FUNC_00081734(uVar12,uVar18);\n    uVar13 = FUNC_00081944(uVar13,*(undefined4 *)puVar8);\n    puVar7 = PTR_DAT_00080a64;\n    uVar13 = FUNC_00081734(uVar13,*(undefined4 *)PTR_DAT_00080a64);\n    *(undefined4 *)puVar8 = uVar13;\n    uVar18 = FUNC_00081730(uVar12,uVar18);\n    uVar18 = FUNC_00081944(uVar18,*(undefined4 *)PTR_DAT_00080a38);\n    puVar8 = PTR_DAT_00080a3c;\n    uVar18 = FUNC_00081730(uVar18,*(undefined4 *)PTR_DAT_00080a3c);\n    *(undefined4 *)PTR_DAT_00080a38 = uVar18;\n    uVar14 = FUNC_00081944(uVar12,*(undefined4 *)PTR_DAT_00080a40);\n    uVar14 = FUNC_00081734(uVar14,uVar13);\n    FUNC_00081734(uVar14,uVar18);\n    uVar14 = FUN_00081cd0();\n    *(undefined4 *)PTR_DAT_00080a44 = uVar14;\n    uVar14 = FUN_0008189c();\n    *(undefined4 *)puVar9 = uVar12;\n    *(undefined4 *)puVar4 = uVar14;\n    *(undefined4 *)puVar3 = 0;\n    *(undefined4 *)puVar7 = uVar13;\n    *(undefined4 *)puVar8 = uVar18;\n    iVar15 = thunk_FUN_00081714();\n    *(int *)puVar5 = iVar15 + *(int *)puVar2;\n  }\n  uVar12 = FUN_0008189c(*(undefined4 *)puVar2);\n  iVar15 = FUN_00081ca8(*(undefined4 *)puVar4,uVar12);\n  if (iVar15 != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = uVar12;\n  }\n  iVar15 = FUN_00081c94(*(undefined4 *)puVar4,0);\n  if (iVar15 != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = 0;\n  }\n  uVar10 = FUN_00081d1c(*(undefined4 *)puVar4);\n  iVar15 = *(int *)puVar3;\n  *(undefined2 *)(puVar1 + 0x2a) = uVar10;\n  *(int *)puVar3 = iVar15 + 1;\n  *(uint *)PTR_DAT_00080a4c = *(ushort *)PTR_DAT_00080a48 & 1 ^ 1;\n  return;\n}\n\n",
            "called": [
                "FUN_000802da",
                "FUN_00081cd0",
                "FUN_00081734",
                "FUN_00081d1c",
                "FUN_00081894",
                "FUN_00081730",
                "FUN_00081ca8",
                "FUN_0008043e",
                "thunk_FUN_00081714",
                "FUN_00081944",
                "FUN_00081c94",
                "FUN_0008189c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000805d0",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "FUNC_000805d0"
        },
        "FUN_000813e4": {
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "input_param",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x80)": "ptr_1",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x84)": "ptr_2",
                "result": "result"
            },
            "code": "uint calculate_difference_000813e4(int input_param)\n{\n    int* ptr_1 = (int*)(*(int*)(input_param + 0x10) + 0x80);\n    int* ptr_2 = (int*)(*(int*)(input_param + 0x10) + 0x84);\n    int result = (*ptr_1 - *ptr_2) & 0x7f;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e4",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "calculate_difference_000813e4"
        },
        "FUN_0008120c": {
            "renaming": {
                "FUN_0008120c": "do_nothing_0008120c"
            },
            "code": "\nvoid do_nothing_0008120c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120c",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "do_nothing_0008120c"
        },
        "FUN_00084290": {
            "renaming": {
                "FUN_00084290": "get_data_00084290",
                "DAT_00084294": "data"
            },
            "code": "int get_data_00084290(void)\n{\n  return DAT_00084294;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084290",
            "calling": [
                "FUN_0008456c"
            ],
            "imported": false,
            "current_name": "get_data_00084290"
        },
        "FUN_000846b4": {
            "renaming": {
                "FUN_000846b4": "get_result_from_function_000846b4",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr",
                "iVar2": "function_result"
            },
            "code": "void get_result_from_function_000846b4(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n  undefined *ptr = PTR_DAT_000846d8;\n  *(undefined4 *)PTR_DAT_000846d8 = 0;\n  int function_result = FUN_000811b4(arg1, arg2, arg2, 0, arg3);\n  if ((function_result == -1) && (*(int *)ptr != 0)) {\n    *result = *(int *)ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846b4",
            "calling": [
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "get_result_from_function_000846b4"
        },
        "FUN_000813a8": {
            "renaming": {
                "FUN_000813a8": "initialize_buffer_000813a8",
                "param_1": "buffer_address",
                "FUN_00082504": "set_buffer",
                "0x80": "buffer_size",
                "*(undefined4 *)(param_1 + 0x80)": "*(int *)(buffer_address + 128)",
                "*(undefined4 *)(param_1 + 0x84)": "*(int *)(buffer_address + 132)"
            },
            "code": "int initialize_buffer_000813a8(int buffer_address)\n{\n    set_buffer(buffer_address, 0, 128);\n    *(int *)(buffer_address + 128) = 0;\n    *(int *)(buffer_address + 132) = 0;\n    return buffer_address;\n}",
            "called": [
                "FUN_00082504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813a8",
            "calling": [
                "FUN_00080c0c"
            ],
            "imported": false,
            "current_name": "initialize_buffer_000813a8"
        },
        "FUN_00083d9c": {
            "renaming": {
                "FUN_00083d9c": "allocate_memory_block_00083d9c",
                "param_1": "function_parameter_1",
                "param_2": "function_parameter_2",
                "iVar1": "prev_block_ptr",
                "uVar2": "block_header",
                "iVar3": "block_address",
                "uVar4": "block_size_aligned",
                "iVar5": "next_block_address",
                "uVar7": "next_block_size_aligned",
                "iVar8": "prev_block_address",
                "DAT_00083f24": "free_block_start_address",
                "DAT_00083f28": "sentinel_block_address",
                "DAT_00083f2c": "largest_free_block_size_ptr",
                "PTR_DAT_00083f30": "param_1_unused",
                "do_nothing_00082598": "do_nothing",
                "do_nothing_0008259c": "do_nothing_after_allocation"
            },
            "code": "void allocate_memory_block_00083d9c(int memory_block_address, int block_size)\n{\n    int prev_block_address;\n    uint block_header;\n    int block_address;\n    int next_block_address;\n    int i;\n\n    if (block_size == 0) {\n        return;\n    }\n    do_nothing();\n    prev_block_address = DAT_00083f24;\n    block_header = *(uint *)(block_size + -4);\n    block_address = block_size + -8;\n    uint block_size_aligned = block_header & 0xfffffffe;\n    next_block_address = block_address + block_size_aligned;\n    uint next_block_size_aligned = *(uint *)(next_block_address + 4) & 0xfffffffc;\n    if (*(int *)(DAT_00083f24 + 8) == next_block_address) {\n        next_block_size_aligned += block_size_aligned;\n        if (-1 < (int)(block_header << 0x1f)) {\n            block_address = block_address - *(int *)(block_size + -8);\n            int prev_block_ptr = *(int *)(block_address + 0xc);\n            int next_block_ptr = *(int *)(block_address + 8);\n            next_block_size_aligned += *(int *)(block_size + -8);\n            *(int *)(next_block_ptr + 0xc) = prev_block_ptr;\n            *(int *)(prev_block_ptr + 8) = next_block_ptr;\n        }\n        uint *free_block_size_ptr = DAT_00083f2c;\n        uint largest_free_block_size = *free_block_size_ptr;\n        *(uint *)(block_address + 4) = next_block_size_aligned | 1;\n        *(int *)(prev_block_address + 8) = block_address;\n        if (largest_free_block_size <= next_block_size_aligned) {\n            FUN_00083d00(param_1,*(undefined4 *)PTR_DAT_00083f30);\n        }\n    }\n    else {\n        uint is_prev_block_allocated = block_header & 1;\n        *(uint *)(next_block_address + 4) = next_block_size_aligned;\n        if (is_prev_block_allocated == 0) {\n            block_address = block_address - *(int *)(block_size + -8);\n            int prev_block_ptr = *(int *)(block_address + 8);\n            uint prev_block_size_aligned = block_size_aligned + *(int *)(block_size + -8);\n            if (prev_block_ptr == DAT_00083f28) {\n                is_prev_block_allocated = 1;\n            }\n            else {\n                int next_block_ptr = *(int *)(block_address + 0xc);\n                *(int *)(prev_block_ptr + 0xc) = next_block_ptr;\n                *(int *)(next_block_ptr + 8) = prev_block_ptr;\n            }\n        }\n        else {\n            is_prev_block_allocated = 0;\n        }\n        if (-1 < *(int *)(next_block_address + next_block_size_aligned + 4) << 0x1f) {\n            uint next_block_size_aligned_plus_block_size_aligned = next_block_size_aligned + block_size_aligned;\n            int next_block_ptr = *(int *)(next_block_address + 8);\n            if ((is_prev_block_allocated == 0) && (next_block_ptr == DAT_00083f28)) {\n                *(int *)(DAT_00083f24 + 0x14) = block_address;\n                *(int *)(DAT_00083f24 + 0x10) = block_address;\n                *(int *)(block_address + 0xc) = next_block_ptr;\n                *(int *)(block_address + 8) = next_block_ptr;\n                *(uint *)(block_address + 4) = next_block_size_aligned_plus_block_size_aligned | 1;\n                *(uint *)(block_address + next_block_size_aligned_plus_block_size_aligned) = next_block_size_aligned_plus_block_size_aligned;\n                goto LAB_00083e30;\n            }\n            int prev_block_ptr = *(int *)(next_block_address + 0xc);\n            *(int *)(next_block_ptr + 0xc) = prev_block_ptr;\n            *(int *)(prev_block_ptr + 8) = next_block_ptr;\n        }\n        *(uint *)(block_address + 4) = block_size_aligned | 1;\n        *(uint *)(block_address + block_size_aligned) = block_size_aligned;\n        if (is_prev_block_allocated == 0) {\n            if (block_size_aligned < 0x200) {\n                uint *free_block_bitmap_ptr = (uint *)(DAT_00083f24 + 4);\n                uint block_size_aligned_divided_by_8 = (block_size_aligned & 0xfffffff8) >> 3;\n                uint bitmap_word_index = block_size_aligned_divided_by_8 >> 2 & 0xffU;\n                uint bitmap_word_mask = 1 << bitmap_word_index;\n                uint free_block_bitmap = *free_block_bitmap_ptr;\n                int free_block_ptr = DAT_00083f24 + (block_size_aligned & 0xfffffff8);\n                int next_free_block_ptr = *(int *)(free_block_ptr + 8);\n                *(int *)(block_address + 8) = next_free_block_ptr;\n                *(int *)(block_address + 0xc) = free_block_ptr;\n                *free_block_bitmap_ptr = free_block_bitmap | bitmap_word_mask;\n                *(int *)(free_block_ptr + 8) = block_address;\n                *(int *)(next_free_block_ptr + 0xc) = block_address;\n                do_nothing_0008259c(param_1);\n                return;\n            }\n            uint block_size_aligned_divided_by_512 = block_size_aligned >> 9;\n            if (block_size_aligned_divided_by_512 < 5) {\n                i = (block_size_aligned >> 6) + 0x38;\n                prev_block_address = i * 2;\n            }\n            else if (block_size_aligned_divided_by_512 < 0x15) {\n                i = block_size_aligned_divided_by_512 + 0x5b;\n                prev_block_address = i * 2;\n            }\n            else if (block_size_aligned_divided_by_512 < 0x55) {\n                i = (block_size_aligned >> 0xc) + 0x6e;\n                prev_block_address = i * 2;\n            }\n            else if (block_size_aligned_divided_by_512 < 0x155) {\n                i = (block_size_aligned >> 0xf) + 0x77;\n                prev_block_address = i * 2;\n            }\n            else if (block_size_aligned_divided_by_512 < 0x555) {\n                i = (block_size_aligned >> 0x12) + 0x7c;\n                prev_block_address = i * 2;\n            }\n            else {\n                prev_block_address = 0xfc;\n                i = 0x7e;\n            }\n            int free_block_ptr = DAT_00083f24 + prev_block_address * 4;\n            int next_free_block_ptr = *(int *)(free_block_ptr + 8);\n            if (next_free_block_ptr == free_block_ptr) {\n                uint *free_block_bitmap_ptr = (uint *)(DAT_00083f24 + 4);\n                uint block_size_aligned_divided_by_64 = block_size_aligned >> 6;\n                uint bitmap_word_index = block_size_aligned_divided_by_64 >> 2 & 0xffU;\n                uint bitmap_word_mask = 1 << bitmap_word_index;\n                *free_block_bitmap_ptr = *free_block_bitmap_ptr | bitmap_word_mask;\n                prev_block_address = next_free_block_ptr;\n            }\n            else {\n                do {\n                    uint next_free_block_size_aligned = *(uint *)(next_free_block_ptr + 4) & 0xfffffffc;\n                    if (next_free_block_size_aligned <= block_size_aligned) {\n                        break;\n                    }\n                    next_free_block_ptr = *(int *)(next_free_block_ptr + 8);\n                } while (free_block_ptr != next_free_block_ptr);\n                prev_block_address = *(int *)(next_free_block_ptr + 0xc);\n            }\n            *(int *)(block_address + 0xc) = prev_block_address;\n            *(int *)(block_address + 8) = next_free_block_ptr;\n            *(int *)(prev_block_address + 8) = block_address;\n            *(int *)(next_free_block_ptr + 0xc) = block_address;\n        }\n    }\nLAB_00083e30:\n    do_nothing_0008259c(param_1);\n    return;\n}",
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00083d00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d9c",
            "calling": [
                "FUN_00083f34",
                "FUN_000825b0",
                "FUN_00081e04",
                "FUN_000846a4",
                "FUN_00083808",
                "FUN_00083adc",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00083d9c"
        },
        "FUN_00083c08": {
            "renaming": {
                "FUN_00083c08": "do_nothing_00083c08"
            },
            "code": "\nvoid do_nothing_00083c08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c08",
            "calling": [
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c08"
        },
        "FUN_00081bf4": {
            "renaming": {
                "FUN_00081bf4": "calculate_result_00081bf4",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "result_1",
                "uVar3": "result_2",
                "uVar4": "combined_input",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "code": "uint calculate_result_00081bf4(uint input_1, uint input_2) {\n  bool is_negative;\n  uint result_1;\n  uint result_2;\n  uint combined_input;\n  bool is_zero;\n  \n  result_1 = input_1 * 2;\n  result_2 = input_2 * 2;\n  \n  if (((int)result_1 >> 0x18 == -1 || (int)result_2 >> 0x18 == -1) && ((((int)result_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) || (((int)result_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  \n  combined_input = result_1 | input_2 & 0x7fffffff;\n  is_zero = combined_input == 0;\n  if (!is_zero) {\n    combined_input = input_1 ^ input_2;\n    is_zero = combined_input == 0;\n  }\n  \n  is_negative = -1 < (int)combined_input;\n  if (is_negative) {\n    input_1 = result_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  \n  if ((is_negative && result_2 <= result_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  \n  if (!is_negative || result_2 > result_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  \n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bf4",
            "calling": [
                "FUN_00081c5c"
            ],
            "imported": false,
            "current_name": "calculate_result_00081bf4"
        },
        "FUN_00081d7c": {
            "renaming": {
                "FUN_00081d7c": "execute_all_functions_00081d7c",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "iVar3": "i",
                "ppcVar4": "function_ptr",
                "iVar5": "num_functions",
                "PTR_DAT_00081dbc": "PTR_functions_end",
                "PTR_DAT_00081dc0": "PTR_functions_start",
                "PTR_LAB_00081dc4": "ptr1",
                "do_nothing_00085858": "do_nothing",
                "code": "code"
            },
            "code": "void execute_all_functions_00081d7c(void)\n{\n  int num_functions = (int)PTR_DAT_00081dbc - (int)PTR_DAT_00081dc0 >> 2;\n  if (num_functions != 0) {\n    code **function_ptr = (code **)(PTR_DAT_00081dc0 + -4);\n    int i = 0;\n    do {\n      i++;\n      function_ptr++;\n      (**function_ptr)();\n    } while (num_functions != i);\n  }\n  undefined *PTR_LAB_00081dc4 = PTR_LAB_00081dc4;\n  undefined *ptr2 = PTR_DAT_00081dc8;\n  do_nothing_00085858();\n  int num_ptrs = (int)PTR_LAB_00081dc4 - (int)ptr2 >> 2;\n  if (num_ptrs != 0) {\n    code **ptr_ptr = (code **)(ptr2 + -4);\n    int i = 0;\n    do {\n      i++;\n      ptr_ptr++;\n      (**ptr_ptr)();\n    } while (num_ptrs != i);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00083974",
                "FUN_00080118",
                "FUN_00085858"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d7c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "execute_all_functions_00081d7c"
        },
        "FUN_00081c5c": {
            "renaming": {
                "FUN_00081c5c": "concatenate_32bit_to_64bit_00081c5c",
                "param_1": "lower_32bits",
                "param_2": "higher_32bits",
                "FUN_00081bf4": "call_function_before_concatenation",
                "CONCAT44": "((uint64_t)higher_32bits) << 32"
            },
            "code": "undefined8 concatenate_32bit_to_64bit_00081c5c(uint32_t lower_32bits, uint32_t higher_32bits) {\n  call_function_before_concatenation();\n  return (((uint64_t)higher_32bits) << 32) | lower_32bits;\n}",
            "called": [
                "FUN_00081bf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c5c",
            "calling": [
                "FUN_00081c54",
                "FUN_00081c94"
            ],
            "imported": false,
            "current_name": "concatenate_32bit_to_64bit_00081c5c"
        },
        "FUN_00081388": {
            "renaming": {
                "FUN_00081388": "decrement_and_call_if_zero_00081388",
                "iVar1": "count"
            },
            "code": "void decrement_and_call_if_zero_00081388() {\n  int count = *DAT_000813a0;\n  if (count != -1) {\n    count--;\n    *DAT_000813a0 = count;\n    if (count == 0) {\n      (*DAT_000813a4)();\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081388",
            "calling": [],
            "imported": false,
            "current_name": "decrement_and_call_if_zero_00081388"
        },
        "FUN_00082598": {
            "renaming": {
                "FUN_00082598": "do_nothing_00082598"
            },
            "code": "\nvoid do_nothing_00082598(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082598",
            "calling": [
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "do_nothing_00082598"
        },
        "FUN_00082994": {
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "source_ptr",
                "puVar4": "destination_ptr",
                "uVar5": "current_word",
                "uVar6": "next_word",
                "puVar7": "destination_ptr",
                "bVar8": "end_of_string_reached"
            },
            "code": "void copy_string_00082994(uint *destination, uint *source) {\n    char current_char;\n    ushort current_short;\n    uint *source_ptr;\n    uint *destination_ptr;\n    uint current_word;\n    uint next_word;\n    bool end_of_string_reached;\n\n    // Check if the pointers are aligned\n    if ((((uint)destination ^ (uint)source) & 3) != 0) {\n        // If not, copy byte by byte until the end of the string\n        do {\n            current_char = *(char *)source;\n            *(char *)destination = current_char;\n            source = (uint *)((int)source + 1);\n            destination = (uint *)((int)destination + 1);\n        } while (current_char != '\\0');\n        return;\n    }\n\n    // Check if the source pointer is aligned\n    if (((uint)source & 3) != 0) {\n        // If not, copy byte by byte until a word alignment is reached\n        source_ptr = source;\n        if (((uint)source & 1) != 0) {\n            source_ptr = (uint *)((int)source + 1);\n            current_char = *(char *)source;\n            *(char *)destination = current_char;\n            destination = (uint *)((int)destination + 1);\n            if (current_char == '\\0') {\n                return;\n            }\n        }\n        source = source_ptr;\n        if (((uint)source_ptr & 2) != 0) {\n            source = (uint *)((int)source_ptr + 2);\n            current_short = *(ushort *)source_ptr;\n            end_of_string_reached = (current_short & 0xff) == 0;\n            if (end_of_string_reached) {\n                *(char *)destination = (char)current_short;\n            }\n            else {\n                *(ushort *)destination = current_short;\n                end_of_string_reached = (current_short & 0xff00) == 0;\n                destination = (uint *)((int)destination + 2);\n            }\n            if (end_of_string_reached) {\n                return;\n            }\n        }\n    }\n\n    // Copy word by word until a non-aligned word is reached\n    current_word = *source;\n    source_ptr = source + 1;\n    destination_ptr = destination;\n    if (((uint)source & 4) != 0) {\n        // If the source pointer is not aligned, copy the first word byte by byte\n        if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) {\n            goto end_of_copy;\n        }\n        destination_ptr = destination + 1;\n        *destination = current_word;\n        source_ptr = source + 2;\n        current_word = *source_ptr;\n    }\n    while (true) {\n        next_word = *source_ptr;\n        end_of_string_reached = (current_word + 0xfefefeff & ~current_word & 0x80808080) != 0;\n        if (end_of_string_reached) {\n            break;\n        }\n        *destination_ptr = current_word;\n        current_word = next_word;\n        source_ptr = source_ptr + 1;\n        destination_ptr = destination_ptr + 1;\n        end_of_string_reached = (next_word + 0xfefefeff & ~next_word & 0x80808080) != 0;\n        if (end_of_string_reached) {\n            break;\n        }\n        *destination_ptr = next_word;\n        current_word = *source_ptr;\n        source_ptr = source_ptr + 1;\n        destination_ptr = destination_ptr + 1;\n    }\n\nend_of_copy:\n    // Copy the remaining bytes byte by byte\n    do {\n        *(char *)destination_ptr = (char)current_word;\n        next_word = current_word & 0xff;\n        current_word = current_word >> 8 | current_word << 0x18;\n        destination_ptr = (uint *)((int)destination_ptr + 1);\n    } while (next_word != 0);\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082994",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "copy_string_00082994"
        },
        "FUN_00080c0c": {
            "renaming": {
                "FUN_00080c0c": "initialize_data_structures_00080c0c",
                "param_1": "start_of_data",
                "param_2": "end_of_data",
                "param_3": "buffer_size",
                "puVar1": "start_of_output",
                "puVar2": "end_of_output",
                "puVar3": "start_of_buffer",
                "puVar4": "end_of_buffer",
                "puVar5": "start_of_result",
                "puVar6": "end_of_result",
                "PTR_DAT_00080ca0": "start_of_data",
                "PTR_DAT_00080ca4": "end_of_data",
                "PTR_DAT_00080cac": "start_of_buffer",
                "PTR_DAT_00080cb0": "end_of_buffer",
                "PTR_DAT_00080cb4": "start_of_output",
                "PTR_DAT_00080cbc": "end_of_buffer",
                "PTR_DAT_00080cdc": "start_of_result",
                "PTR_DAT_00080cd8": "end_of_result",
                "initialize_buffer": "initialize_buffer",
                "process_data": "process_data"
            },
            "code": "void initialize_data_structures_00080c0c(undefined4 param_1, undefined4 param_2, undefined4 param_3)\n{\n  undefined *PTR_DAT_00080ca0 = PTR_DAT_00080ca0;\n  undefined *PTR_DAT_00080ca4 = PTR_DAT_00080ca4;\n  undefined *PTR_DAT_00080cac = PTR_DAT_00080cac;\n  undefined *PTR_DAT_00080cb0 = PTR_DAT_00080cb0;\n  undefined *PTR_DAT_00080cb4 = PTR_DAT_00080cb4;\n  undefined *end_of_output = PTR_DAT_00080cbc;\n  undefined *PTR_DAT_00080cdc = PTR_DAT_00080cdc;\n  undefined *PTR_DAT_00080cd8 = PTR_DAT_00080cd8;\n  initialize_buffer(PTR_DAT_00080ca0);\n  initialize_buffer(PTR_DAT_00080ca4);\n  initialize_buffer(PTR_DAT_00080cac);\n  initialize_buffer(PTR_DAT_00080cb0);\n  initialize_buffer(PTR_DAT_00080cb4);\n  initialize_buffer(end_of_output);\n  initialize_buffer(PTR_DAT_00080cdc);\n  initialize_buffer(PTR_DAT_00080cd8);\n  process_data(PTR_DAT_00080cac, PTR_DAT_00080cb0, param_3, PTR_DAT_00080ca0, PTR_DAT_00080ca4);\n  process_data(PTR_DAT_00080cb4, end_of_output, param_3, PTR_DAT_00080cac, PTR_DAT_00080cb0);\n  process_data(PTR_DAT_00080cdc, PTR_DAT_00080cd8, param_3, PTR_DAT_00080cb4, end_of_output);\n}\n",
            "called": [
                "FUN_000813a8",
                "FUN_000814e4",
                "FUN_000815d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c0c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_structures_00080c0c"
        },
        "FUN_00080d2e": {
            "renaming": {
                "FUN_00080d2e": "set_parameter_00080d2e",
                "param_1": "base_address",
                "param_2": "parameter_value",
                "param_3": "parameter_type",
                "uVar1": "temp",
                "PTR_": "base_address + ",
                "DAT_": ""
            },
            "code": "void set_parameter_00080d2e(uint32_t base_address, uint32_t parameter_value, uint32_t parameter_type) {\n  *(uint32_t *)(PTR_PARAMETER_OFFSET) = parameter_value;\n  switch(parameter_type) {\n    case PARAM_TYPE_0:\n    case PARAM_TYPE_3:\n    case PARAM_TYPE_4:\n    case PARAM_TYPE_5:\n      return;\n    case PARAM_TYPE_1:\n      uint32_t temp = *(uint32_t *)(PTR_TEMP_OFFSET) & *(uint32_t *)(PTR_TEMP_OFFSET) & ~parameter_value;\n      *(uint32_t *)(PTR_TEMP_OFFSET) = temp;\n      break;\n    case PARAM_TYPE_2:\n      uint32_t temp = *(uint32_t *)(PTR_TEMP_OFFSET) | parameter_value;\n      *(uint32_t *)(PTR_TEMP_OFFSET) = temp;\n      break;\n    default:\n      goto default_case_label;\n  }\n  *(uint32_t *)(PTR_PARAMETER_2_OFFSET) = parameter_value;\n  return;\n\ndefault_case_label:\n  *(uint32_t *)(PTR_PARAMETER_3_OFFSET) = parameter_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d2e",
            "calling": [
                "FUN_00080da0"
            ],
            "imported": false,
            "current_name": "set_parameter_00080d2e"
        },
        "FUN_00081944": {
            "renaming": {
                "FUN_00081944": "FUNC_00081944"
            },
            "code": "\nuint FUNC_00081944(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_00081a94;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_00081a94:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081944",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081944"
        },
        "FUN_000844c4": {
            "renaming": {
                "FUN_000844c4": "process_input_000844c4",
                "param_1": "input_length",
                "param_2": "input_value",
                "param_3": "buffer",
                "param_4": "buffer_length",
                "uVar1": "buffer_value",
                "uVar2": "buffer_value_uint",
                "puVar3": "buffer_pointer",
                "iVar4": "buffer_start"
            },
            "code": "uint process_input_000844c4(int input_length, uint input_value, undefined4 *buffer, undefined4 buffer_length)\n{\n  ushort uVar1;\n  uint uVar2;\n  undefined *buffer_pointer;\n  int buffer_start;\n  \n  if ((input_length != 0) && (*(int *)(input_length + 0x38) == 0)) {\n    initialize_input();\n  }\n  uVar1 = *(ushort *)(buffer + 3);\n  uVar2 = (uint)uVar1;\n  buffer[2] = buffer[6];\n  if ((-1 < (int)(uVar2 << 0x1c)) || (buffer_start = buffer[4], buffer_start == 0)) {\n    buffer_start = process_buffer(input_length, buffer, uVar1, uVar2, buffer_length);\n    if (buffer_start != 0) {\n      return 0xffffffff;\n    }\n    uVar1 = *(ushort *)(buffer + 3);\n    buffer_start = buffer[4];\n    uVar2 = (uint)uVar1;\n  }\n  input_value = input_value & 0xff;\n  if ((int)(uVar2 << 0x12) < 0) {\n    buffer_pointer = (undefined *)*buffer;\n    buffer_start = (int)buffer_pointer - buffer_start;\n    if (buffer_start < (int)buffer[5]) {\nLAB_000844f6:\n      buffer_start = buffer_start + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    buffer[0x19] = buffer[0x19] & 0xffffdfff;\n    buffer_pointer = (undefined *)*buffer;\n    *(ushort *)(buffer + 3) = uVar1 | 0x2000;\n    buffer_start = (int)buffer_pointer - buffer_start;\n    if (buffer_start < (int)buffer[5]) goto LAB_000844f6;\n  }\n  buffer_start = process_buffer(input_length, buffer);\n  if (buffer_start != 0) {\n    return 0xffffffff;\n  }\n  buffer_pointer = (undefined *)*buffer;\n  buffer_start = 1;\nLAB_000844f8:\n  buffer[2] = buffer[2] + -1;\n  *buffer = buffer_pointer + 1;\n  *buffer_pointer = (char)input_value;\n  if (((buffer[5] == buffer_start) ||\n      (((int)((uint)*(ushort *)(buffer + 3) << 0x1f) < 0 && (input_value == 10)))) &&\n     (buffer_start = process_buffer(input_length, buffer), buffer_start != 0)) {\n    return 0xffffffff;\n  }\n  return input_value;\n}\n",
            "called": [
                "FUN_00083b14",
                "FUN_00083808",
                "FUN_00083adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844c4",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "process_input_000844c4"
        },
        "FUN_0008189c": {
            "renaming": {
                "FUN_0008189c": "leading_zero_bits_0008189c",
                "param_1": "num",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "iVar4": "result",
                "uVar3": "carry_bit",
                "uVar5": "temp",
                "count_leading_zeroes": "count_leading_zeroes"
            },
            "code": "uint leading_zero_bits_0008189c(uint num)\n{\n  int leading_zeroes;\n  uint sign_bit;\n  uint result;\n  uint shift_amount;\n  uint carry_bit;\n  \n  sign_bit = num & 0x80000000;\n  if ((int)sign_bit < 0) {\n    num = -num;\n  }\n  if (num == 0) {\n    return 0;\n  }\n  leading_zeroes = count_leading_zeroes(num);\n  shift_amount = leading_zeroes - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (leading_zeroes > 7) {\n    carry_bit = 0 << (shift_amount & 0xff);\n    result = result + (num << (shift_amount & 0xff)) + (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < carry_bit);\n    if (carry_bit == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  shift_amount = num << (leading_zeroes + 0x18U & 0xff);\n  result = result + ((num >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    result = result & ~(shift_amount >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008189c",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "leading_zero_bits_0008189c"
        },
        "FUN_0008234c": {
            "renaming": {
                "FUN_0008234c": "copy_memory_block_0008234c",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "puVar3": "unused_ptr",
                "uVar4": "i",
                "uVar5": "remaining_size",
                "bVar6": "is_aligned",
                "*(undefined *)puVar3": "*(uchar *)dest",
                "(undefined4 *)((int)puVar3 + 1)": "(undefined4 *)((int)dest_ptr + 1)",
                "(undefined4 *)((int)puVar1 + 1)": "(undefined4 *)((int)src_ptr + 1)",
                "*(undefined *)(undefined4 *)((int)puVar3 + 1)": "*(uchar *)(undefined4 *)((int)dest_ptr + 1)",
                "*(undefined *)((int)puVar3 + 2)": "*(uchar *)((int)dest_ptr + 2)",
                "*(undefined *)((int)puVar3 + 3)": "*(uchar *)((int)dest_ptr + 3)",
                "*puVar2": "*src_ptr",
                "puVar2[1]": "src_ptr[1]",
                "puVar2[2]": "src_ptr[2]",
                "puVar2[3]": "src_ptr[3]",
                "puVar2[4]": "src_ptr[4]",
                "puVar2[5]": "src_ptr[5]",
                "puVar2[6]": "src_ptr[6]",
                "puVar2[7]": "src_ptr[7]",
                "puVar2[8]": "src_ptr[8]",
                "puVar2[9]": "src_ptr[9]",
                "puVar2[10]": "src_ptr[10]",
                "puVar2[0xb]": "src_ptr[0xb]",
                "puVar2[0xc]": "src_ptr[0xc]",
                "puVar2[0xd]": "src_ptr[0xd]",
                "puVar2[0xe]": "src_ptr[0xe]",
                "puVar2[0xf]": "src_ptr[0xf]",
                "*puVar3": "*dest_ptr",
                "puVar3[1]": "dest_ptr[1]",
                "puVar3[2]": "dest_ptr[2]",
                "puVar3[3]": "dest_ptr[3]",
                "puVar3[4]": "dest_ptr[4]",
                "puVar3[5]": "dest_ptr[5]",
                "puVar3[6]": "dest_ptr[6]",
                "puVar3[7]": "dest_ptr[7]",
                "puVar3[8]": "dest_ptr[8]",
                "puVar3[9]": "dest_ptr[9]",
                "puVar3[10]": "dest_ptr[10]",
                "puVar3[0xb]": "dest_ptr[0xb]",
                "puVar3[0xc]": "dest_ptr[0xc]",
                "puVar3[0xd]": "dest_ptr[0xd]",
                "puVar3[0xe]": "dest_ptr[0xe]",
                "puVar3[0xf]": "dest_ptr[0xf]"
            },
            "code": "undefined4 *copy_memory_block_0008234c(undefined4 *dest, undefined4 *src, uint size)\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint i;\n  bool is_dest_aligned = ((uint)dest & 3) == 0;\n  bool is_src_aligned = ((uint)src & 3) == 0;\n  \n  if (!is_dest_aligned && !is_src_aligned) {\n    uint unaligned_size = 4 - ((uint)dest & 3);\n    size -= unaligned_size;\n    for (i = 0; i < unaligned_size; i++) {\n      *(uchar *)dest = *(uchar *)src;\n      dest = (undefined4 *)((int)dest + 1);\n      src = (undefined4 *)((int)src + 1);\n    }\n  }\n  \n  dest_ptr = dest;\n  src_ptr = src;\n  remaining_size = size;\n  \n  while (remaining_size >= 16) {\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    remaining_size -= 16;\n  }\n  \n  for (i = 0; i < remaining_size; i++) {\n    *(uchar *)dest_ptr = *(uchar *)src_ptr;\n    dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n    src_ptr = (undefined4 *)((int)src_ptr + 1);\n  }\n  \n  return dest;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008234c",
            "calling": [
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "copy_memory_block_0008234c"
        },
        "FUN_00080a68": {
            "renaming": {
                "FUN_00080a68": "initialize_device_00080a68",
                "puVar1": "device_ptr",
                "PTR_DAT_00080a94": "device_config_ptr",
                "FUN_00081682": "configure_device",
                "PTR_s__00080a98": "device_settings",
                "FUN_00081d5c": "set_device_properties",
                "DAT_00080aa0": "device_id",
                "DAT_00080a9c": "device_type",
                "PTR_DAT_00080aa4": "device_status_ptr"
            },
            "code": "void initialize_device_00080a68(void)\n{\n  undefined *device_ptr;\n  device_ptr = PTR_DAT_00080a94;\n  configure_device(PTR_DAT_00080a94,PTR_s__00080a98);\n  set_device_properties(device_ptr,DAT_00080aa0,DAT_00080a9c);\n  device_ptr = PTR_DAT_00080aa4;\n  PTR_DAT_00080aa4[4] = 0;\n  device_ptr[5] = 0;\n  device_ptr[6] = 6;\n  *(undefined2 *)(device_ptr + 0x56) = 1000;\n  return;\n}",
            "called": [
                "FUN_00081d5c",
                "FUN_00081682"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a68",
            "calling": [],
            "imported": false,
            "current_name": "initialize_device_00080a68"
        },
        "FUN_0008165c": {
            "renaming": {
                "FUN_0008165c": "validate_and_execute_command_0008165c",
                "param_1": "command_params",
                "param_2": "command_type",
                "param_3": "command_arg",
                "iVar1": "validation_result",
                "FUN_0008163a": "validate_command_params",
                "FUN_0008160c": "execute_command",
                "FUN_00082994": "execute_command_with_type"
            },
            "code": "undefined4 * validate_and_execute_command_0008165c(undefined4 *command_params, undefined4 command_type, undefined4 command_arg)\n{\n    int validation_result = validate_command_params(command_params, command_arg);\n    if (validation_result == 0) {\n        execute_command(command_params);\n    }\n    else {\n        command_params[2] = command_arg;\n        execute_command_with_type(*command_params, command_type);\n    }\n    return command_params;\n}",
            "called": [
                "FUN_00082994",
                "FUN_0008163a",
                "FUN_0008160c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008165c",
            "calling": [
                "FUN_00081682"
            ],
            "imported": false,
            "current_name": "validate_and_execute_command_0008165c"
        },
        "FUN_000815f8": {
            "renaming": {
                "FUN_000815f8": "combine_uint_and_int_000815f8",
                "param_1": "integer_value",
                "param_2": "unsigned_int_value"
            },
            "code": "uint combine_uint_and_int_000815f8(int integer_value, uint unsigned_int_value)\n{\n  return unsigned_int_value | integer_value << 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815f8",
            "calling": [
                "FUN_00080410"
            ],
            "imported": false,
            "current_name": "combine_uint_and_int_000815f8"
        },
        "FUN_00084384": {
            "renaming": {
                "FUN_00084384": "find_character_00084384",
                "param_1": "data",
                "param_2": "target",
                "param_3": "end",
                "puVar1": "current",
                "uVar2": "value",
                "pcVar3": "char_ptr_start",
                "pcVar4": "char_ptr_end",
                "bVar5": "found"
            },
            "code": "uint * find_character_00084384(uint *data, char target, uint *end)\n{\n  uint *current;\n  uint value;\n  char *char_ptr_start;\n  char *char_ptr_end;\n  bool found;\n  \n  if (((uint)data & 3) == 0) {\n    current = data;\n    if ((uint *)0x3 < end) {\n      do {\n        value = *data ^ CONCAT22(CONCAT11(target,target),CONCAT11(target,target));\n        current = data;\n        if ((value + 0xfefefeff & ~value & 0x80808080) != 0) break;\n        end = end - 1;\n        current = data + 1;\n        data = data + 1;\n      } while ((uint *)0x3 < end);\n    }\n    data = end;\n    char_ptr_end = (char *)((int)data - 1);\n    if ((data != (uint *)0x0) && (data = current, *(char *)current != target)) {\n      char_ptr_start = (char *)0x0;\n      do {\n        data = (uint *)((int)data + 1);\n        found = char_ptr_start == char_ptr_end;\n        char_ptr_start = char_ptr_start + 1;\n        if (found) goto character_not_found;\n      } while (*(char *)data != target);\n    }\n  }\n  else if (end == (uint *)0x0) {\n    data = (uint *)0x0;\n  }\n  else if (*(char *)data != target) {\n    current = (uint *)((int)data + 1);\n    end = (uint *)((int)end - 1);\n    do {\n      data = current;\n      if (((uint)data & 3) == 0) {\n        current = data;\n        if ((uint *)0x3 < end) {\n          do {\n            value = *data ^ CONCAT22(CONCAT11(target,target),CONCAT11(target,target));\n            current = data;\n            if ((value + 0xfefefeff & ~value & 0x80808080) != 0) break;\n            end = end - 1;\n            current = data + 1;\n            data = data + 1;\n          } while ((uint *)0x3 < end);\n        }\n        data = end;\n        char_ptr_end = (char *)((int)data - 1);\n        if ((data != (uint *)0x0) && (data = current, *(char *)current != target)) {\n          char_ptr_start = (char *)0x0;\n          do {\n            data = (uint *)((int)data + 1);\n            found = char_ptr_start == char_ptr_end;\n            char_ptr_start = char_ptr_start + 1;\n            if (found) goto character_not_found;\n          } while (*(char *)data != target);\n        }\n        return data;\n      }\n      if (end == (uint *)0x0) goto character_not_found;\n      current = (uint *)((int)data + 1);\n      end = (uint *)((int)end - 1);\n    } while (*(char *)data != target);\n  }\n  return data;\n  character_not_found:\n  return (uint *)0x0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084384",
            "calling": [
                "FUN_00083f34",
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "find_character_00084384"
        },
        "FUN_00081034": {
            "renaming": {
                "FUN_00081034": "set_bit_in_uint_at_index_00081034",
                "param_1": "ptr_uint",
                "param_2": "bit_value",
                "param_3": "bit_index",
                "*(uint *)(param_1 + 4)": "*ptr_uint_at_index",
                "*(uint *)(param_1 + 4) | (param_3 & 1) << 7": "current_value_at_index | bit_value | ((bit_index & 1) << 7)",
                "uint": "unsigned int",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void set_bit_in_uint_at_index_00081034(uint *PTR_uint, uint bit_value, uint bit_index) {\n    uint *PTR_uint_at_index = PTR_uint + 1;\n    uint current_value_at_index = *PTR_uint_at_index;\n    uint bit_mask = 1 << 7;\n    *PTR_uint_at_index = current_value_at_index | bit_value | ((bit_index & 1) << 7);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081034",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "set_bit_in_uint_at_index_00081034"
        },
        "FUN_00083c0c": {
            "renaming": {
                "FUN_00083c0c": "do_nothing_00083c0c"
            },
            "code": "\nvoid do_nothing_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c0c",
            "calling": [
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c0c"
        },
        "FUN_00083974": {
            "renaming": {
                "FUN_00083974": "add_to_buffer_00083974",
                "param_1": "data",
                "puVar1": "data_ptr",
                "puVar2": "buffer_ptr",
                "iVar3": "buffer_size",
                "iVar4": "buffer_start_address"
            },
            "code": "undefined4 add_to_buffer_00083974(undefined4 data)\n    {\n        undefined *data_ptr;\n        undefined4 *buffer_ptr;\n        int buffer_size;\n        int buffer_start_address;\n        \n        data_ptr = PTR_DAT_00083984;\n        if (DAT_00083980 == 0) {\n            return data;\n        }\n        buffer_start_address = *(int *)PTR_DAT_0008396c;\n        buffer_ptr = *(undefined4 **)(buffer_start_address + 0x148);\n        if (buffer_ptr == (undefined4 *)0x0) {\n            buffer_ptr = (undefined4 *)(buffer_start_address + 0x14c);\n            *(undefined4 **)(buffer_start_address + 0x148) = buffer_ptr;\n        }\n        buffer_size = buffer_ptr[1];\n        if (0x1f < buffer_size) {\n            if ((DAT_00083970 == 0) ||\n               (buffer_ptr = (undefined4 *)FUN_00081df4(400), buffer_ptr == (undefined4 *)0x0)) {\n                return 0xffffffff;\n            }\n            *buffer_ptr = *(undefined4 *)(buffer_start_address + 0x148);\n            buffer_ptr[1] = 0;\n            buffer_size = 0;\n            *(undefined4 **)(buffer_start_address + 0x148) = buffer_ptr;\n            buffer_ptr[0x62] = 0;\n            buffer_ptr[99] = 0;\n        }\n        buffer_ptr[1] = buffer_size + 1;\n        buffer_ptr[buffer_size + 2] = data_ptr;\n        return 0;\n    }",
            "called": [
                "FUN_00081df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083974",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "add_to_buffer_00083974"
        },
        "FUN_00084700": {
            "renaming": {
                "FUN_00084700": "findValueFromFunction_00084700",
                "param_1": "result",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "ptr",
                "iVar2": "functionResult"
            },
            "code": "void findValueFromFunction_00084700(int *result, undefined4 arg2, undefined4 arg3, undefined4 arg4) {\n  undefined *ptr = PTR_DAT_00084724;\n  *(undefined4 *)PTR_DAT_00084724 = 0;\n  int functionResult = calculateValue(arg2, arg3, arg4);\n  if ((functionResult == -1) && (*(int *)ptr != 0)) {\n    *result = *(int *)ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811c2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084700",
            "calling": [
                "FUN_00084464",
                "FUN_0008449c"
            ],
            "imported": false,
            "current_name": "findValueFromFunction_00084700"
        },
        "thunk_FUN_00081714": {
            "renaming": {
                "thunk_FUN_00081714": "getValueFromPointer_thunk_00081714",
                "PTR_DAT_0008171c": "PTR_VALUE_ADDRESS",
                "undefined4": "int",
                "*": "*pointerToValue",
                "()": "()"
            },
            "code": "int getValueFromPointer_thunk_00081714() {\n    int* pointerToValue = (int*)PTR_DAT_0008171c;\n    return *pointerToValue;\n}",
            "called": [
                "FUN_00081714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081208",
            "calling": [
                "FUN_000804a8",
                "FUN_0008043e",
                "FUN_000805d0",
                "FUN_00080258"
            ],
            "imported": false,
            "current_name": "getValueFromPointer_thunk_00081714"
        },
        "FUN_00081ca8": {
            "renaming": {
                "FUN_00081ca8": "is_CY_false_or_ZR_true_00081ca8",
                "in_CY": "is_CY_set",
                "in_ZR": "is_ZR_set"
            },
            "code": "bool is_CY_false_or_ZR_true_00081ca8(void)\n{\n  bool is_CY_false = !is_CY_set();\n  bool is_ZR_true = is_ZR_set();\n  return is_CY_false || is_ZR_true;\n}",
            "called": [
                "FUN_00081c54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081ca8",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "is_CY_false_or_ZR_true_00081ca8"
        },
        "FUN_00081318": {
            "renaming": {
                "FUN_00081318": "decode_00081318",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param_3",
                "puVar1": "data_ptr",
                "puVar2": "mask_ptr",
                "iVar3": "result",
                "uVar4": "data_value",
                "iVar5": "data_index",
                "PTR_DAT_00081380": "data",
                "PTR_DAT_00081384": "mask"
            },
            "code": "void decode_00081318(int index, int value, undefined4 param_3) {\n        undefined *PTR_DAT_00081380_ptr = PTR_DAT_00081380;\n        undefined *PTR_DAT_00081384_ptr = PTR_DAT_00081384;\n        if (PTR_DAT_00081380[index * 0x1c + 0xc] != \"\\0\") {\n            if ((PTR_DAT_00081384[index] & 0xf) == 5) {\n                modify(index, 1, param_3, 5, index, value, param_3);\n            }\n            PTR_DAT_00081384[index] = PTR_DAT_00081384[index] & 0xf | (byte)(value << 4);\n            int PTR_DAT_00081380_index = *(int *)(PTR_DAT_00081380_ptr + index * 0x1c);\n            undefined4 PTR_DAT_00081380_value = *(undefined4 *)(PTR_DAT_00081380_ptr + index * 0x1c + 4);\n            int result = check(PTR_DAT_00081380_index, PTR_DAT_00081380_value);\n            if (result == 0) {\n                if (value != 0) {\n                    *(undefined4 *)(PTR_DAT_00081380_index + 100) = PTR_DAT_00081380_value;\n                    return;\n                }\n                *(undefined4 *)(PTR_DAT_00081380_index + 0x60) = PTR_DAT_00081380_value;\n                return;\n            }\n            update(PTR_DAT_00081380_index, PTR_DAT_00081380_value, value, 0, 1);\n        }\n        return;\n    }",
            "called": [
                "FUN_00080d7a",
                "FUN_00080e04",
                "FUN_00081210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081318",
            "calling": [
                "FUN_000804a8",
                "FUN_00080164",
                "FUN_000801b0",
                "FUN_00080ae4",
                "FUN_00080258"
            ],
            "imported": false,
            "current_name": "decode_00081318"
        },
        "FUN_00081714": {
            "renaming": {
                "FUN_00081714": "getValueFromPointer_00081714",
                "PTR_DAT_0008171c": "pointerToValue"
            },
            "code": "getValueFromPointer_00081714() {\n    int *PTR_DAT_0008171c = (int *)PTR_DAT_0008171c;\n    return *PTR_DAT_0008171c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081714",
            "calling": [
                "thunk_FUN_00081714"
            ],
            "imported": false,
            "current_name": "getValueFromPointer_00081714"
        },
        "FUN_0008449c": {
            "renaming": {
                "FUN_0008449c": "process_data_0008449c",
                "param_1": "data",
                "param_2": "data_info",
                "iVar1": "result",
                "uVar2": "flag"
            },
            "code": "void process_data_0008449c(undefined4 data, int data_info) {\n  int result = process_info(data, (int)*(short *)(data_info + 0xe));\n  ushort flag;\n  if (result == -1) {\n    flag = *(ushort *)(data_info + 0xc) & 0xefff;\n  }\n  else {\n    flag = *(ushort *)(data_info + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(data_info + 0x50) = result;\n  }\n  *(ushort *)(data_info + 0xc) = flag;\n  return;\n}",
            "called": [
                "FUN_00084700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008449c",
            "calling": [],
            "imported": false,
            "current_name": "process_data_0008449c"
        },
        "FUN_0008259c": {
            "renaming": {
                "FUN_0008259c": "do_nothing_0008259c"
            },
            "code": "\nvoid do_nothing_0008259c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008259c",
            "calling": [
                "FUN_000825b0",
                "FUN_00083d9c",
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "do_nothing_0008259c"
        },
        "FUN_0008477c": {
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "output",
                "uVar1": "multiplication_result_low",
                "lVar2": "multiplication_result"
            },
            "code": "void calculate_difference_0008477c(uint input_1, int input_2, undefined4 input_3, undefined4 input_4, int *output) {\n  long long multiplication_result = FUNC_000847e0();\n  multiplication_result = multiplication_result * CONCAT44(input_4, input_3);\n  uint multiplication_result_low = (uint)multiplication_result;\n  *output = input_1 - multiplication_result_low;\n  output[1] = (input_2 - (int)(multiplication_result >> 0x20)) - (uint)(input_1 < multiplication_result_low);\n  return;\n}",
            "called": [
                "FUN_000847e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008477c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008477c"
        },
        "FUN_000801b0": {
            "renaming": {
                "FUN_000801b0": "count_and_store_values_000801b0",
                "param_1": "ptr_param",
                "bVar1": "is_overflow",
                "uVar2": "uVar",
                "cVar3": "currentValue",
                "iVar4": "result",
                "bVar5": "currentByte"
            },
            "code": "int count_and_store_values_000801b0(int **ptr_param)\n{\n  bool is_overflow = false;\n  undefined uVar;\n  char currentValue;\n  int result;\n  byte currentByte;\n  \n  if (1 < *(byte *)((int)ptr_param + 6)) {\n    FUN_00081318(*(byte *)((int)ptr_param + 6),0);\n  }\n  *(undefined *)((int)ptr_param + 0x49) = 0;\n  if (*(byte *)((int)ptr_param + 5) < 4) {\n    while (result = (**(code **)(**ptr_param + 8))(), result != 0) {\n      currentByte = *(byte *)((int)ptr_param + 0x49);\n      uVar = (**(code **)(**ptr_param + 0xc))();\n      currentValue = *(char *)((int)ptr_param + 0x49);\n      *(undefined *)((int)ptr_param + currentByte + 9) = uVar;\n      currentByte = currentValue + 1;\n      *(byte *)((int)ptr_param + 0x49) = currentByte;\n      if (0x3f < currentByte) {\n        is_overflow = true;\n      }\n    }\n  }\n  *(short *)(ptr_param + 0x14) = *(short *)(ptr_param + 0x14) + 1;\n  if (is_overflow) {\n    currentValue = -3;\n    *(short *)(ptr_param + 0x15) = *(short *)(ptr_param + 0x15) + 1;\n  }\n  else {\n    currentValue = *(char *)((int)ptr_param + 0x49);\n  }\n  return (int)currentValue;\n}",
            "called": [
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801b0",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "count_and_store_values_000801b0"
        },
        "FUN_000813c2": {
            "renaming": {
                "FUN_000813c2": "update_buffer_000813c2",
                "param_1": "buffer_address",
                "param_2": "new_value",
                "uVar1": "new_index"
            },
            "code": "void update_buffer_000813c2(int buffer_address, char new_value) {\n  uint new_index = (*(int *)(buffer_address + 0x80) + 1U) & 0x7f;\n  if (new_index != *(uint *)(buffer_address + 0x84)) {\n    *(undefined *)(buffer_address + *(int *)(buffer_address + 0x80)) = new_value;\n    *(uint *)(buffer_address + 0x80) = new_index;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813c2",
            "calling": [],
            "imported": false,
            "current_name": "update_buffer_000813c2"
        },
        "FUN_000814e4": {
            "renaming": {
                "FUN_000814e4": "initialize_data_000814e4",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "param_6": "param5",
                "puVar1": "pointer_to_array"
            },
            "code": "void initialize_data_000814e4(undefined4 *data, undefined4 param1, undefined param2, undefined4 param3, undefined4 param4, undefined4 param5)\n{\n  undefined *pointer_to_array;\n  data[0] = PTR_PTR_FUN_00081454_1_00081504;\n  data[1] = 0;\n  data[2] = 1000;\n  data[3] = param1;\n  data[4] = param4;\n  data[5] = param5;\n  *(undefined *)(data + 6) = param2;\n  data[7] = param3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814e4",
            "calling": [
                "FUN_00080c0c",
                "FUN_000815d4"
            ],
            "imported": false,
            "current_name": "initialize_data_000814e4"
        },
        "FUN_00080d54": {
            "renaming": {
                "FUN_00080d54": "update_values_00080d54",
                "param_1": "array",
                "param_2": "value",
                "param_3": "bitfield",
                "bVar1": "is_negative",
                "PTR_": "array",
                "DAT_": "value"
            },
            "code": "void update_values_00080d54(int* PTR_, int DAT_, unsigned int bitfield) {\n    bool is_negative = (int)(bitfield << 0x1f) < 0;\n    PTR_[17] = DAT_;\n    if (is_negative) {\n        PTR_[25] = DAT_;\n    }\n    if (!is_negative) {\n        PTR_[24] = DAT_;\n    }\n    bool has_bit_10_set = (bitfield & 10) != 0;\n    if (has_bit_10_set) {\n        PTR_[8] = DAT_;\n    }\n    if (!has_bit_10_set) {\n        PTR_[9] = DAT_;\n    }\n    if (((int)(bitfield << 0x1e) < 0) || ((int)(bitfield << 0x1c) < 0)) {\n        PTR_[32] = DAT_;\n    }\n    PTR_[5] = DAT_;\n    *PTR_ = DAT_;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d54",
            "calling": [
                "FUN_00080da0"
            ],
            "imported": false,
            "current_name": "update_values_00080d54"
        },
        "FUN_0008021c": {
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "start_index",
                "param_2": "length",
                "iVar1": "current_index",
                "uVar2": "checksum",
                "cVar3": "bit_index",
                "uVar4": "lsb"
            },
            "code": "uint calculate_checksum_0008021c(int start_index, uint length)\n{\n  int current_index;\n  uint checksum = 0xffff;\n  for (current_index = start_index; (current_index - start_index & 0xffU) < length; current_index = current_index + 1) {\n    checksum = checksum ^ *(byte *)(current_index + 9);\n    char bit_index = 8;\n    do {\n      uint lsb = checksum & 1;\n      checksum = checksum >> 1;\n      if (lsb != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bit_index = bit_index - 1;\n    } while (bit_index != 0);\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008021c",
            "calling": [
                "FUN_00080258"
            ],
            "imported": false,
            "current_name": "calculate_checksum_0008021c"
        },
        "FUN_00082b38": {
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_00082b38(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********ppppppppbVar29;\n  bool bVar30;\n  longlong lVar31;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar11 = FUN_00083808(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)FUN_0008378c(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082b9e:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082bee;\n        }\n        iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082bee:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar30 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082c12:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        ppppppppbVar29 = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar30 << 6, bVar30 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar30 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_000830ec;\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      ppppppppbVar29 = (byte ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar27 < 0) {\n        bVar30 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar30);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar30 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar30) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppbVar29 = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppbVar29 != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)FUN_00082a50(ppppppppbVar29);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)FUN_00084384(ppppppppbVar29,0,local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppbVar29 = (byte ********)PTR_s__null__00083784;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082d78:\n    lVar31 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      ppppppppbVar29 = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082da0;\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          ppppppppbVar29 = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar31 >> 0x20);\n          cVar13 = '\\n';\n          FUN_00084750((int)lVar31,uVar28,10,0);\n          *(char *)ppppppppbVar29 = cVar13 + '0';\n          lVar31 = FUN_00084750((int)lVar31,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n        } while (lVar31 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar23 + '0';\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_0008337e;\n    do {\n      ppppppppbVar29 = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)ppppppppbVar29 = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (byte *******)0x0) {\n    FUN_00082ac0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    ppppppppbVar29 = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)ppppppppbVar29 = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    }\n    else {\n      *(undefined *)((int)ppppppppbVar29 + -1) = 0x30;\n      ppppppppbVar29 = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_000830e8;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00083710;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_000833de;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_000833de;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_0008370c;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_0008348e:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_000834b4:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_000833c8;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_000832c6:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)ppppppppbVar29;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_0008345a;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = FUN_00082ac0(param_1,param_2,&local_9c), iVar11 != 0))\n    goto LAB_000833de;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00083282:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_000832aa:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])ppppppppbVar29;\nLAB_0008345a:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_000833cc;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_00083788;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_00083316:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_0008333e:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = FUN_00082ac0(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "called": [
                "FUN_00083b14",
                "FUN_00084750",
                "FUN_00082a50",
                "FUN_0008378c",
                "FUN_00084384",
                "FUN_00083808",
                "FUN_00082ac0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082b38",
            "calling": [
                "FUN_0008378c"
            ],
            "imported": false,
            "current_name": "FUNC_00082b38"
        },
        "FUN_00081e04": {
            "renaming": {
                "FUN_00081e04": "execute_function_with_param_00081e04",
                "param_1": "parameter",
                "*DAT_00081e10": "function_pointer"
            },
            "code": "void execute_function_with_param_00081e04(void* *DAT_00081e10, int parameter) {\n  *DAT_00081e10(parameter);\n  return;\n}",
            "called": [
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e04",
            "calling": [
                "FUN_000815fe",
                "FUN_0008160c"
            ],
            "imported": false,
            "current_name": "execute_function_with_param_00081e04"
        },
        "FUN_00084750": {
            "renaming": {
                "FUN_00084750": "check_params_00084750",
                "param_1": "x",
                "param_2": "y",
                "param_3": "z",
                "param_4": "w",
                "iVar1": "result",
                "FUN_000847ac": "calculate_result"
            },
            "code": "int check_params_00084750(int x, int y, int z, int w) {\n  int result;\n  if (w == 0 && z == 0) {\n    if (y != 0 || x != 0) {\n      x = -1;\n    }\n    result = x;\n  }\n  else {\n    result = calculate_result();\n  }\n  return result;\n}",
            "called": [
                "FUN_000847ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084750",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "check_params_00084750"
        },
        "FUN_00080ae4": {
            "renaming": {
                "FUN_00080ae4": "initialize_system_00080ae4",
                "puVar1": "system_clock_address",
                "puVar2": "system_configuration_address",
                "iVar3": "device_configuration_address",
                "iVar4": "device_address_4",
                "iVar5": "device_address_3",
                "iVar6": "device_address_1",
                "iVar7": "i",
                "iVar8": "i_plus_one",
                "DAT_00080be8": "system_clock_address",
                "DAT_00080bec": "system_configuration_address",
                "DAT_00080bf0": "system_status_address",
                "DAT_00080bf4": "device_configuration_address",
                "DAT_00080bf8": "device_address_4",
                "DAT_00080bfc": "device_address_3",
                "DAT_00080c00": "device_address_1",
                "DAT_00080c04": "device_configuration_data",
                "DAT_00080c08": "device_address_2"
            },
            "code": "void initialize_system_00080ae4(void)\n{\n    uint *system_clock = DAT_00080be8;\n    initialize_clock();\n    undefined4 *system_configuration = DAT_00080bec;\n    system_configuration[1] = *system_clock / 1000 - 1;\n    *(undefined *)(DAT_00080bf0 + 0x23) = 0xf0;\n    system_configuration[2] = 0;\n    *system_configuration = 7;\n    initialize_memory();\n    for(int i = 0; i < 0x4f; i++)\n    {\n        initialize_device(i, 0);\n        int DAT_00080c00 = device_addresses[0];\n        int DAT_00080c08 = device_addresses[1];\n        int DAT_00080bfc = device_addresses[2];\n        int DAT_00080bf8 = device_addresses[3];\n    }\n    *(undefined4 *)(DAT_00080c00 + 0xa0) = 0xffffffff;\n    *(undefined4 *)(DAT_00080c08 + 0xa0) = 0xffffffff;\n    *(undefined4 *)(DAT_00080bfc + 0xa0) = 0xffffffff;\n    *(undefined4 *)(DAT_00080bf8 + 0xa0) = 0xffffffff;\n    initialize_device(DAT_00080bf8, 1);\n    initialize_memory();\n    initialize_device(DAT_00080bf8, 2);\n    initialize_device(DAT_00080bfc, 1);\n    initialize_device(DAT_00080c08, 2);\n    initialize_device(DAT_00080c00, 1);\n    initialize_device(DAT_00080c08, 1);\n    initialize_device(DAT_00080c00, 0);\n    set_device_configuration(DAT_00080c08, system_clock, DAT_00080bf4, 0xc);\n    set_device_configuration(DAT_00080c08, 0, 0x300000, 1);\n    set_device_configuration(DAT_00080c08, 0, 0);\n    set_device_configuration(DAT_00080c08, 0xffffffff);\n    set_device_configuration(DAT_00080c08);\n}\n",
            "called": [
                "FUN_0008106e",
                "FUN_00081042",
                "FUN_00080e18",
                "FUN_00081034",
                "FUN_00081066",
                "FUN_00081318",
                "FUN_00080e9c",
                "FUN_00080da0",
                "FUN_00080f9c",
                "FUN_00081d7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ae4",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "initialize_system_00080ae4"
        },
        "FUN_00081d5c": {
            "renaming": {
                "FUN_00081d5c": "add_to_buffer_00081d5c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "puVar1": "buffer_pointer",
                "uVar2": "buffer_bit_index",
                "iVar3": "buffer_index",
                "uVar4": "buffer_bit_mask"
            },
            "code": "unsigned int add_to_buffer_00081d5c(unsigned int value1, unsigned int value2, unsigned int value3)\n{\n    unsigned int *buffer_pointer;\n    uint32_t buffer_index;\n    uint32_t buffer_bit_index;\n    uint32_t buffer_bit_mask;\n\n    buffer_index = *(int *)PTR_DAT_0008396c;\n    buffer_pointer = *(unsigned int **)(buffer_index + 0x148);\n    if (buffer_pointer == (unsigned int *)0x0) {\n        buffer_pointer = (unsigned int *)(buffer_index + 0x14c);\n        *(unsigned int **)(buffer_index + 0x148) = buffer_pointer;\n    }\n    buffer_bit_index = buffer_pointer[1];\n    if (buffer_bit_index > 31) {\n        if ((DAT_00083970 == 0) || (buffer_pointer = (unsigned int *)allocate_memory(400), buffer_pointer == (unsigned int *)0x0)) {\n            return 0xffffffff;\n        }\n        *buffer_pointer = *(unsigned int *)(buffer_index + 0x148);\n        buffer_pointer[1] = 0;\n        buffer_bit_index = 0;\n        *(unsigned int **)(buffer_index + 0x148) = buffer_pointer;\n        buffer_pointer[0x62] = 0;\n        buffer_pointer[99] = 0;\n    }\n    buffer_bit_mask = 1 << (buffer_bit_index & 0xff);\n    buffer_pointer[buffer_bit_index + 0x22] = value1;\n    buffer_pointer[0x62] |= buffer_bit_mask;\n    buffer_pointer[buffer_bit_index + 0x42] = value3;\n    buffer_pointer[99] |= buffer_bit_mask;\n    buffer_pointer[1] = buffer_bit_index + 1;\n    buffer_pointer[buffer_bit_index + 2] = value2;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d5c",
            "calling": [
                "FUN_00080a68"
            ],
            "imported": false,
            "current_name": "add_to_buffer_00081d5c"
        },
        "FUN_00082970": {
            "renaming": {
                "FUN_00082970": "get_parameter_value_00082970",
                "param_1": "output_value",
                "param_2": "input_value",
                "puVar1": "pointer_to_data",
                "iVar2": "result"
            },
            "code": "void get_parameter_value_00082970(int *output_value, undefined4 input_value)\n{\n  undefined *pointer_to_data = PTR_DAT_00082990;\n  *(undefined4 *)PTR_DAT_00082990 = 0;\n  int result = check_input_value(input_value);\n  if ((result == -1) && (*(int *)pointer_to_data != 0)) {\n    *output_value = *(int *)pointer_to_data;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_0008118c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082970",
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "get_parameter_value_00082970"
        },
        "FUN_000811be": {
            "renaming": {
                "FUN_000811be": "return_one_000811be",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int return_one_000811be(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811be",
            "calling": [
                "FUN_000846dc"
            ],
            "imported": false,
            "current_name": "return_one_000811be"
        },
        "FUN_00084a80": {
            "renaming": {
                "FUN_00084a80": "FUNC_00084a80"
            },
            "code": "\nundefined8 FUNC_00084a80(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084a80",
            "calling": [
                "FUN_000847ac"
            ],
            "imported": false,
            "current_name": "FUNC_00084a80"
        },
        "FUN_00081c54": {
            "renaming": {
                "FUN_00081c54": "copy_param2_to_param1_00081c54",
                "param_1": "destination",
                "param_2": "source",
                "FUN_00081c5c": "memcpy",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void copy_param2_to_param1_00081c54(void* destination, void* source)\n{\n  memcpy(destination, source, sizeof(destination));\n  return;\n}",
            "called": [
                "FUN_00081c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c54",
            "calling": [
                "FUN_00081ca8"
            ],
            "imported": false,
            "current_name": "copy_param2_to_param1_00081c54"
        },
        "FUN_0008163a": {
            "renaming": {
                "FUN_0008163a": "check_if_param1_is_zero_or_param2_is_greater_than_param1_index_0008163a",
                "param_1": "array",
                "param_2": "size",
                "*param_1": "array[0]",
                "(uint)param_1[1]": "array[1]",
                "iVar1": "result",
                "param_1[2]": "array[2]"
            },
            "code": "int check_if_param1_is_zero_or_param2_is_greater_than_param1_index_0008163a(int *array, uint size)\n{\n  int first_element = array[0];\n  uint second_element = array[1];\n  uint third_element = array[2];\n  if ((first_element == 0) || (second_element < size)) {\n    int result = FUN_00081622(array);\n    if (result == 0) {\n      return 0;\n    }\n    if (third_element == 0) {\n      *(undefined *)*array = 0;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_00081622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008163a",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "check_if_param1_is_zero_or_param2_is_greater_than_param1_index_0008163a"
        },
        "FUN_000825a0": {
            "renaming": {
                "FUN_000825a0": "call_function_with_data_000825a0",
                "param_1": "param_1",
                "param_2": "param_2",
                "FUNC_000825b0": "call_function",
                "*DAT_000825ac": "data"
            },
            "code": "void call_function_with_*call_function_with_data_000825a0(int* *call_function_with_data_000825a0, int param_1, int param_2)\n{\n  call_function(**call_function_with_data_000825a0, param_1, param_2);\n  return;\n}",
            "called": [
                "FUN_000825b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825a0",
            "calling": [
                "FUN_00081622"
            ],
            "imported": false,
            "current_name": "call_function_with_data_000825a0"
        },
        "FUN_000815d4": {
            "renaming": {
                "FUN_000815d4": "set_pointer_and_value_000815d4",
                "param_1": "pointer_array",
                "param_2": "value",
                "*param_1": "*pointer_array",
                "PTR_PTR_FUN_00081454_1_000815f4": "GLOBAL_POINTER",
                "param_1[9]": "pointer_array[9]"
            },
            "code": "undefined4* set_pointer_and_value_000815d4(undefined4* pointer_array, undefined4 value) {\n  call_function();\n  *pointer_array = PTR_PTR_FUN_00081454_1_000815f4;\n  pointer_array[9] = value;\n  return pointer_array;\n}",
            "called": [
                "FUN_000814e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815d4",
            "calling": [
                "FUN_00080c0c"
            ],
            "imported": false,
            "current_name": "set_pointer_and_value_000815d4"
        },
        "FUN_00081e14": {
            "renaming": {
                "FUN_00081e14": "FUNC_00081e14"
            },
            "code": "\nint * FUNC_00081e14(undefined4 *param_1,uint param_2)\n\n{\n  uint uVar1;\n  uint *puVar2;\n  undefined *puVar3;\n  int iVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  int iVar9;\n  int *piVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  int *piVar14;\n  uint uVar15;\n  int *piVar16;\n  uint uVar17;\n  uint uVar18;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081e7a;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081e7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  do_nothing_00082598(param_1);\n  uVar1 = DAT_00082140;\n  if (uVar15 < 0x1f8) {\n    iVar13 = *(int *)(DAT_00082140 + uVar15 + 0xc);\n    if ((iVar13 != DAT_00082140 + uVar15) ||\n       (iVar4 = iVar13 + 8, iVar13 = *(int *)(iVar13 + 0x14), iVar4 != iVar13)) {\n      iVar7 = *(int *)(iVar13 + 0xc);\n      iVar9 = (*(uint *)(iVar13 + 4) & 0xfffffffc) + iVar13;\n      uVar15 = *(uint *)(iVar9 + 4);\n      iVar4 = *(int *)(iVar13 + 8);\n      *(int *)(iVar4 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar9 + 4) = uVar15 | 1;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    uVar18 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar18 = uVar15 >> 9;\n    if (uVar18 == 0) {\n      iVar4 = 0x7e;\n      iVar13 = 0x3f;\n    }\n    else if (uVar18 < 5) {\n      iVar13 = (uVar15 >> 6) + 0x38;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x15) {\n      iVar13 = uVar18 + 0x5b;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x55) {\n      iVar13 = (uVar15 >> 0xc) + 0x6e;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x155) {\n      iVar13 = (uVar15 >> 0xf) + 0x77;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x555) {\n      iVar13 = (uVar15 >> 0x12) + 0x7c;\n      iVar4 = iVar13 * 2;\n    }\n    else {\n      iVar4 = 0xfc;\n      iVar13 = 0x7e;\n    }\n    iVar7 = DAT_00082140 + iVar4 * 4;\n    for (iVar4 = *(int *)(iVar7 + 0xc); iVar7 != iVar4; iVar4 = *(int *)(iVar4 + 0xc)) {\n      uVar18 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n      iVar9 = uVar18 - uVar15;\n      if (0xf < iVar9) {\n        iVar13 = iVar13 + -1;\n        break;\n      }\n      if (-1 < iVar9) {\n        iVar7 = uVar18 + iVar4;\n        uVar15 = *(uint *)(iVar7 + 4);\n        iVar9 = *(int *)(iVar4 + 0xc);\n        iVar13 = *(int *)(iVar4 + 8);\n        *(int *)(iVar13 + 0xc) = iVar9;\n        *(int *)(iVar9 + 8) = iVar13;\n        *(uint *)(iVar7 + 4) = uVar15 | 1;\n        do_nothing_0008259c(param_1);\n        return (int *)(iVar4 + 8);\n      }\n    }\n    uVar18 = iVar13 + 1;\n  }\n  iVar13 = *(int *)(DAT_00082140 + 0x10);\n  iVar4 = DAT_00082140 + 8;\n  if (iVar13 == iVar4) {\n    uVar5 = *(uint *)(DAT_00082140 + 4);\n  }\n  else {\n    uVar5 = *(uint *)(iVar13 + 4);\n    uVar6 = uVar5 & 0xfffffffc;\n    uVar8 = uVar6 - uVar15;\n    if (0xf < (int)uVar8) {\n      iVar7 = uVar15 + iVar13;\n      *(uint *)(iVar13 + 4) = uVar15 | 1;\n      *(int *)(uVar1 + 0x14) = iVar7;\n      *(int *)(uVar1 + 0x10) = iVar7;\n      *(int *)(iVar7 + 0xc) = iVar4;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar7 + 4) = uVar8 | 1;\n      *(uint *)(iVar7 + uVar8) = uVar8;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    *(int *)(DAT_00082140 + 0x14) = iVar4;\n    *(int *)(uVar1 + 0x10) = iVar4;\n    if (-1 < (int)uVar8) {\n      *(uint *)(uVar6 + iVar13 + 4) = *(uint *)(uVar6 + iVar13 + 4) | 1;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    if (uVar6 < 0x200) {\n      iVar9 = uVar1 + (uVar5 & 0xfffffff8);\n      iVar7 = *(int *)(iVar9 + 8);\n      uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(uVar1 + 4);\n      *(int *)(iVar13 + 8) = iVar7;\n      *(int *)(iVar13 + 0xc) = iVar9;\n      *(uint *)(uVar1 + 4) = uVar5;\n      *(int *)(iVar9 + 8) = iVar13;\n      *(int *)(iVar7 + 0xc) = iVar13;\n    }\n    else {\n      uVar8 = uVar5 >> 9;\n      if (uVar8 < 5) {\n        iVar9 = (uVar5 >> 6) + 0x38;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x15) {\n        iVar9 = uVar8 + 0x5b;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x55) {\n        iVar9 = (uVar5 >> 0xc) + 0x6e;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x155) {\n        iVar9 = (uVar5 >> 0xf) + 0x77;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x555) {\n        iVar9 = (uVar5 >> 0x12) + 0x7c;\n        iVar7 = iVar9 * 2;\n      }\n      else {\n        iVar7 = 0xfc;\n        iVar9 = 0x7e;\n      }\n      iVar7 = uVar1 + iVar7 * 4;\n      iVar12 = *(int *)(iVar7 + 8);\n      if (iVar12 == iVar7) {\n        uVar5 = *(uint *)(DAT_00082348 + 4) | 1 << (iVar9 >> 2 & 0xffU);\n        *(uint *)(DAT_00082348 + 4) = uVar5;\n        iVar9 = iVar12;\n      }\n      else {\n        do {\n          iVar9 = iVar12;\n          if ((*(uint *)(iVar12 + 4) & 0xfffffffc) <= uVar6) break;\n          iVar12 = *(int *)(iVar12 + 8);\n          iVar9 = iVar12;\n        } while (iVar7 != iVar12);\n        iVar12 = *(int *)(iVar9 + 0xc);\n        uVar5 = *(uint *)(uVar1 + 4);\n      }\n      *(int *)(iVar13 + 0xc) = iVar12;\n      *(int *)(iVar13 + 8) = iVar9;\n      *(int *)(iVar12 + 8) = iVar13;\n      *(int *)(iVar9 + 0xc) = iVar13;\n    }\n  }\n  uVar6 = 1 << ((int)uVar18 >> 2 & 0xffU);\n  if (uVar6 <= uVar5) {\n    if ((uVar5 & uVar6) == 0) {\n      uVar18 = uVar18 & 0xfffffffc;\n      do {\n        uVar6 = uVar6 << 1;\n        uVar18 = uVar18 + 4;\n      } while ((uVar5 & uVar6) == 0);\n    }\n    do {\n      piVar16 = (int *)(uVar1 + uVar18 * 8);\n      piVar14 = piVar16;\n      uVar5 = uVar18;\n      do {\n        for (piVar10 = (int *)piVar14[3]; piVar14 != piVar10; piVar10 = (int *)piVar10[3]) {\n          uVar8 = piVar10[1] & 0xfffffffc;\n          uVar17 = uVar8 - uVar15;\n          if (0xf < (int)uVar17) {\n            iVar9 = piVar10[2];\n            iVar13 = piVar10[3];\n            iVar7 = uVar15 + (int)piVar10;\n            piVar10[1] = uVar15 | 1;\n            *(int *)(iVar9 + 0xc) = iVar13;\n            *(int *)(iVar13 + 8) = iVar9;\n            *(int *)(uVar1 + 0x14) = iVar7;\n            *(int *)(uVar1 + 0x10) = iVar7;\n            *(int *)(iVar7 + 0xc) = iVar4;\n            *(int *)(iVar7 + 8) = iVar4;\n            *(uint *)(iVar7 + 4) = uVar17 | 1;\n            *(uint *)(iVar7 + uVar17) = uVar17;\n            do_nothing_0008259c(param_1);\n            return piVar10 + 2;\n          }\n          if (-1 < (int)uVar17) {\n            iVar13 = piVar10[2];\n            iVar4 = piVar10[3];\n            *(uint *)((int)piVar10 + uVar8 + 4) = *(uint *)((int)piVar10 + uVar8 + 4) | 1;\n            *(int *)(iVar13 + 0xc) = iVar4;\n            *(int *)(iVar4 + 8) = iVar13;\n            do_nothing_0008259c(param_1);\n            return piVar10 + 2;\n          }\n        }\n        uVar5 = uVar5 + 1;\n        piVar14 = piVar14 + 2;\n      } while ((uVar5 & 3) != 0);\n      do {\n        uVar8 = uVar18 & 3;\n        piVar14 = piVar16 + -2;\n        uVar18 = uVar18 - 1;\n        if (uVar8 == 0) {\n          uVar8 = *(uint *)(uVar1 + 4) & ~uVar6;\n          *(uint *)(uVar1 + 4) = uVar8;\n          goto LAB_00082262;\n        }\n        piVar16 = (int *)*piVar16;\n      } while (piVar16 == piVar14);\n      uVar8 = *(uint *)(uVar1 + 4);\nLAB_00082262:\n      uVar6 = uVar6 * 2;\n      if ((uVar8 <= uVar6 && uVar6 - uVar8 != 0) || (uVar18 = uVar5, uVar6 == 0)) break;\n      for (; (uVar8 & uVar6) == 0; uVar6 = uVar6 << 1) {\n        uVar18 = uVar18 + 4;\n      }\n    } while( true );\n  }\n  puVar2 = DAT_00082148;\n  uVar18 = *(uint *)(uVar1 + 8);\n  uVar5 = *(uint *)(uVar18 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar5) && (uVar8 = uVar5 - uVar15, uVar6 = uVar18, 0xf < (int)uVar8))\n  goto LAB_0008211e;\n  uVar8 = uVar18 + uVar5;\n  if (*DAT_00082148 == 0xffffffff) {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00082144 + 0x10;\n  }\n  else {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00082144 + 0x100f & 0xfffff000;\n  }\n  uVar6 = FUN_00082970(param_1,uVar17);\n  puVar3 = PTR_DAT_00082154;\n  if ((uVar6 == 0xffffffff) || ((uVar6 < uVar8 && (uVar18 != uVar1)))) {\n    uVar6 = *(uint *)(uVar1 + 8);\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar11 = *(int *)PTR_DAT_00082154 + uVar17;\n    *(uint *)PTR_DAT_00082154 = uVar11;\n    if ((uVar8 == uVar6) && ((uVar8 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(uVar1 + 8) + 4) = uVar17 + uVar5 | 1;\n    }\n    else {\n      if (*puVar2 == 0xffffffff) {\n        *DAT_00082148 = uVar6;\n      }\n      else {\n        *(uint *)puVar3 = uVar11 + (uVar6 - uVar8);\n      }\n      uVar8 = uVar6 & 7;\n      if (uVar8 == 0) {\n        iVar13 = 0x1000;\n      }\n      else {\n        uVar6 = uVar6 + (8 - uVar8);\n        iVar13 = 0x1008 - uVar8;\n      }\n      iVar13 = iVar13 - (uVar17 + uVar6 & 0xfff);\n      iVar4 = FUN_00082970(param_1,iVar13);\n      if (iVar4 == -1) {\n        uVar8 = 1;\n        iVar13 = 0;\n      }\n      else {\n        uVar8 = (iVar4 - uVar6) + iVar13 | 1;\n      }\n      uVar11 = *(int *)puVar3 + iVar13;\n      *(uint *)(uVar1 + 8) = uVar6;\n      *(uint *)puVar3 = uVar11;\n      *(uint *)(uVar6 + 4) = uVar8;\n      puVar3 = PTR_DAT_00082154;\n      if (uVar18 != uVar1) {\n        if (uVar5 < 0x10) {\n          *(undefined4 *)(uVar6 + 4) = 1;\n          uVar18 = 0;\n          goto LAB_00082108;\n        }\n        uVar5 = uVar5 - 0xc & 0xfffffff8;\n        *(uint *)(uVar18 + 4) = uVar5 | *(uint *)(uVar18 + 4) & 1;\n        *(undefined4 *)(uVar18 + uVar5 + 4) = 5;\n        *(undefined4 *)(uVar18 + uVar5 + 8) = 5;\n        if (0xf < uVar5) {\n          FUN_00083d9c(param_1,uVar18 + 8);\n          uVar11 = *(uint *)puVar3;\n        }\n      }\n    }\n    uVar6 = *(uint *)(uVar1 + 8);\n    if (*(uint *)PTR_DAT_0008214c < uVar11) {\n      *(uint *)PTR_DAT_0008214c = uVar11;\n    }\n    if (*(uint *)PTR_DAT_00082150 < uVar11) {\n      *(uint *)PTR_DAT_00082150 = uVar11;\n    }\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\nLAB_00082108:\n  uVar8 = uVar18 - uVar15;\n  if ((uVar18 < uVar15) || ((int)uVar8 < 0x10)) {\n    do_nothing_0008259c(param_1);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  *(uint *)(uVar6 + 4) = uVar15 | 1;\n  *(uint *)(uVar1 + 8) = uVar15 + uVar6;\n  *(uint *)(uVar15 + uVar6 + 4) = uVar8 | 1;\n  do_nothing_0008259c(param_1);\n  return (int *)(uVar6 + 8);\n}\n\n",
            "called": [
                "FUN_00082598",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082970"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081e14",
            "calling": [
                "FUN_00083f34",
                "FUN_000825b0",
                "FUN_000842a4",
                "FUN_00081df4"
            ],
            "imported": false,
            "current_name": "FUNC_00081e14"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "initialize_data_00080164",
                "param_1": "data",
                "puVar1": "function_pointer",
                "iVar2": "status"
            },
            "code": "void initialize_data_00080164(int **data)\n{\n    undefined *function_pointer;\n    int status;\n    function_pointer = FUNCTION_POINTER_ADDRESS;\n    *data = (int *)FUNCTION_POINTER_ADDRESS;\n    (**(code **)(*(int *)function_pointer + 0x18))(FUNCTION_POINTER_ADDRESS);\n    if (1 < *(byte *)((int)data + 6)) {\n        process_data(*(byte *)((int)data + 6),1);\n        process_data(*(undefined *)((int)data + 6),0);\n    }\n    do {\n        status = (**(code **)(**data + 0xc))();\n    } while (-1 < status);\n    *(undefined *)((int)data + 0x49) = 0;\n    *(undefined *)((int)data + 0x4a) = 0;\n    *(undefined2 *)(data + 0x15) = 0;\n    *(undefined2 *)((int)data + 0x52) = 0;\n    *(undefined2 *)(data + 0x14) = 0;\n    return;\n}",
            "called": [
                "FUN_00081318",
                "FUN_00081210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "FUN_000804a8"
            ],
            "imported": false,
            "current_name": "initialize_data_00080164"
        },
        "FUN_000811cc": {
            "renaming": {
                "FUN_000811cc": "copy_bytes_to_buffer_000811cc",
                "param_1": "buffer_start",
                "param_2": "source_address",
                "param_3": "num_bytes",
                "iVar1": "i"
            },
            "code": "uint copy_bytes_to_buffer_000811cc(undefined4 buffer_start, int source_address, uint num_bytes) {\n  int i;\n  for (i = 0; i < (int)num_bytes; i++) {\n    do {\n    } while (-1 < *(int *)(DAT_000811ec + 0x14) << 0x1e);\n    *(uint *)(DAT_000811ec + 0x1c) = (uint)*(byte *)(source_address + i);\n  }\n  return num_bytes & ~((int)num_bytes >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811cc",
            "calling": [
                "FUN_00084464"
            ],
            "imported": false,
            "current_name": "copy_bytes_to_buffer_000811cc"
        },
        "FUN_000846dc": {
            "renaming": {
                "FUN_000846dc": "get_value_or_default_000846dc",
                "param_1": "value",
                "param_2": "default_value",
                "puVar1": "data_pointer",
                "iVar2": "result"
            },
            "code": "void get_value_or_default_000846dc(int* value, undefined4 default_value)\n{\n  undefined* data_pointer = PTR_DAT_000846fc;\n  *(undefined4*)data_pointer = 0;\n  int result = calculate_value(default_value);\n  int stored_value = *(int*)data_pointer;\n  if ((result == -1) && (stored_value != 0)) {\n    *value = stored_value;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846dc",
            "calling": [
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "get_value_or_default_000846dc"
        },
        "FUN_00081894": {
            "renaming": {
                "FUN_00081894": "calculate_00081894",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "iVar3": "multiplier",
                "uVar4": "carry",
                "count_leading_zeroes": "count_leading_zeroes"
            },
            "code": "uint calculate_00081894(uint input)\n{\n  int leading_zeroes = count_leading_zeroes(input);\n  int shift_amount = leading_zeroes - 8;\n  int multiplier = shift_amount * -0x800000 + 0x4a800000;\n  if (leading_zeroes > 7) {\n    uint shifted_input = input << (shift_amount & 0xff);\n    uint carry = 0U >> (0x20 - shift_amount & 0xff);\n    uint result = multiplier + shifted_input + carry + (uint)(0x7fffffff < 0);\n    if ((0 << (shift_amount & 0xff)) == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shifted_input = input << (leading_zeroes + 0x18U & 0xff);\n  int carry = ((int)shifted_input >> 0x1f);\n  uint result = multiplier + ((input >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - carry);\n  if ((shifted_input & 0x7fffffff) == 0) {\n    result = result & ~(shifted_input >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081894",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "calculate_00081894"
        },
        "FUN_000845bc": {
            "renaming": {
                "FUN_000845bc": "write_byte_or_return_error_000845bc",
                "param_1": "out_buffer",
                "param_2": "byte_to_write",
                "param_3": "buffer_size",
                "*param_1": "*out_buffer",
                "*param_2": "*byte_to_write"
            },
            "code": "int write_byte_or_return_error_000845bc(int *out_buffer, uint8_t byte_to_write, uint buffer_size) {\n  if (out_buffer == NULL) {\n    return 0;\n  }\n  if (buffer_size < 256) {\n    *out_buffer = byte_to_write;\n    return 1;\n  }\n  *out_buffer = 0x8a;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845bc",
            "calling": [
                "FUN_0008456c"
            ],
            "imported": false,
            "current_name": "write_byte_or_return_error_000845bc"
        },
        "FUN_00085858": {
            "renaming": {
                "FUN_00085858": "do_nothing_00085858"
            },
            "code": "\nvoid do_nothing_00085858(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085858",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "do_nothing_00085858"
        },
        "FUN_00082504": {
            "renaming": {
                "FUN_00082504": "fill_memory_with_value_00082504",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "current_address",
                "puVar2": "next_address",
                "uVar3": "value_to_fill",
                "uVar4": "remaining_size",
                "bVar5": "is_size_zero"
            },
            "code": "void fill_memory_with_value_00082504(uint32_t *memory, uint8_t value, uint32_t size)\n{\n  uint32_t *current_address;\n  uint32_t remaining_size;\n  uint32_t value_to_fill;\n  \n  if (((uint32_t)memory & 3) != 0) {\n    bool is_size_zero = size == 0;\n    current_address = memory;\n    size = size - 1;\n    if (is_size_zero) {\n      return;\n    }\n    while( true ) {\n      memory = (uint32_t *)((int)current_address + 1);\n      *(uint8_t *)current_address = value;\n      if (((uint32_t)memory & 3) == 0) break;\n      is_size_zero = size == 0;\n      current_address = memory;\n      size = size - 1;\n      if (is_size_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    value_to_fill = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining_size = size;\n    current_address = memory;\n    if (0xf < size) {\n      remaining_size = size - 0x10;\n      do {\n        *current_address = value_to_fill;\n        *(current_address + 1) = value_to_fill;\n        *(current_address + 2) = value_to_fill;\n        *(current_address + 3) = value_to_fill;\n        current_address = current_address + 4;\n      } while (current_address != (uint32_t *)((int)memory + (remaining_size & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      memory = memory + ((remaining_size >> 4) + 1) * 4;\n      remaining_size = size;\n      current_address = memory;\n      if (size < 4) goto LAB_00082580;\n    }\n    do {\n      size = size - 4;\n      *memory = value_to_fill;\n      memory = memory + 1;\n    } while (3 < size);\n    memory = (uint32_t *)((int)current_address + (remaining_size - 4 & 0xfffffffc) + 4);\n    size = remaining_size & 3;\n  }\nLAB_00082580:\n  if (size != 0) {\n    current_address = memory;\n    do {\n      uint32_t *next_address = (uint32_t *)((int)current_address + 1);\n      *(uint8_t *)current_address = value;\n      current_address = next_address;\n    } while (current_address != (uint32_t *)(size + (int)memory));\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082504",
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "imported": false,
            "current_name": "fill_memory_with_value_00082504"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "check_if_initialized_and_return_value_000800f4",
                "param_1": "value",
                "*PTR_DAT_0008010c": "*pointer_to_initialized_flag",
                "DAT_00080110": "global_variable",
                "DAT_00080114": "global_initialized_value"
            },
            "code": "undefined4 check_if_initialized_and_return_value_000800f4(undefined4 value) {\\n  if (*PTR_DAT_0008010c == \"\\0\") {\\n    if (DAT_00080110 != 0) {\\n      value = DAT_00080114;\\n    }\\n    *PTR_DAT_0008010c = 1;\\n  }\\n  return value;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [],
            "imported": false,
            "current_name": "check_if_initialized_and_return_value_000800f4"
        },
        "FUN_0008378c": {
            "renaming": {
                "FUN_0008378c": "validate_input_and_run_function_0008378c",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "result",
                "iVar2": "function_result",
                "local_488": "stack_buffer",
                "local_480": "buffer_size",
                "local_47c": "input_flag",
                "local_47a": "input_short",
                "local_478": "buffer_ptr",
                "local_474": "buffer2",
                "local_470": "buffer4",
                "local_46c": "buffer3",
                "local_464": "buffer5",
                "local_424": "unused_buffer",
                "auStack_420": "stack_buffer2",
                "FUNC_00082b38": "validate_input",
                "FUN_00083adc": "run_function"
            },
            "code": "int validate_input_and_run_function_0008378c(undefined4 input1, int input2)\n{\n  int result = -1;\n  int function_result;\n  undefined *stack_buffer [2];\n  undefined4 buffer_size;\n  ushort input_flag;\n  undefined2 input_short;\n  undefined *buffer_ptr;\n  undefined4 buffer1;\n  undefined4 buffer2;\n  undefined4 buffer3;\n  undefined4 buffer4;\n  undefined4 buffer5;\n  undefined stack_buffer2 [1024];\n  buffer1 = *(undefined4 *)(input2 + 100);\n  buffer3 = *(undefined4 *)(input2 + 0x1c);\n  input_short = *(undefined2 *)(input2 + 0xe);\n  buffer5 = *(undefined4 *)(input2 + 0x24);\n  stack_buffer[0] = stack_buffer2;\n  input_flag = *(ushort *)(input2 + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  buffer2 = 0x400;\n  buffer4 = 0;\n  buffer_ptr = stack_buffer[0];\n  function_result = validate_input(input1, stack_buffer);\n  if ((function_result >= 0) && (FUN_00083adc(input1, stack_buffer) != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)input_flag << 0x19) < 0) {\n    *(ushort *)(input2 + 0xc) = *(ushort *)(input2 + 0xc) | 0x40;\n  }\n  return result;\n}",
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008378c",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "validate_input_and_run_function_0008378c"
        },
        "FUN_00083adc": {
            "renaming": {
                "FUN_00083adc": "decode_and_process_data_00083adc",
                "param_1": "data_ptr",
                "param_2": "header_ptr",
                "piVar1": "chunk_data",
                "iVar2": "chunk_size",
                "uVar3": "chunk_header",
                "uVar4": "chunk_flags",
                "iVar5": "bytes_processed",
                "pcVar6": "decoder",
                "unaff_r4": "result",
                "iVar7": "original_data_size",
                "FUN_00083b14": "initialize_data",
                "LAB_00083a54": "chunk_processing_complete",
                "LAB_00083a00": "process_chunk_data"
            },
            "code": "undefined4 decode_and_process_data_00083adc(int *data_ptr, int *header_ptr)\n{\n    int *chunk_ptr;\n    int chunk_size;\n    int total_bytes_processed = 0;\n    code *decoder;\n    undefined4 result = 0;\n    \n    if ((data_ptr != (int *)0x0) && (data_ptr[0xe] == 0)) {\n        initialize_data();\n    }\n    \n    if (*(short *)(header_ptr + 3) == 0) {\n        return 0;\n    }\n    \n    ushort chunk_header = *(ushort *)(header_ptr + 3);\n    \n    if ((int)((uint)chunk_header << 0x1c) < 0) {\n        chunk_ptr = (int *)header_ptr[4];\n        if (chunk_ptr == 0) {\n            return 0;\n        }\n        \n        int chunk_start = *header_ptr;\n        int chunk_data_offset = (chunk_header & 3) == 0 ? header_ptr[5] : 0;\n        *header_ptr = (int)chunk_ptr;\n        chunk_size = chunk_start - (int)chunk_ptr;\n        header_ptr[2] = chunk_data_offset;\n        \n        do {\n            if (chunk_size < 1) {\n                return 0;\n            }\n            \n            int bytes_processed = (*(code *)header_ptr[9])(data_ptr, header_ptr[7], (int)chunk_ptr, chunk_size, result);\n            chunk_size -= bytes_processed;\n            total_bytes_processed += bytes_processed;\n            chunk_ptr += bytes_processed;\n        } while (bytes_processed > 0);\n        \n        *(ushort *)(header_ptr + 3) |= 0x40;\n        return 0xffffffff;\n    }\n    \n    *(ushort *)(header_ptr + 3) = chunk_header | 0x800;\n    \n    if ((header_ptr[1] < 1) && (header_ptr[0xf] < 1)) {\n        return 0;\n    }\n    \n    decoder = (code *)header_ptr[10];\n    \n    if (decoder == (code *)0x0) {\n        return 0;\n    }\n    \n    uint chunk_flags = (uint)(chunk_header | 0x800);\n    int original_data_size = *data_ptr;\n    *data_ptr = 0;\n    \n    if ((chunk_header & 0x1000) == 0) {\n        int bytes_processed = (*decoder)(data_ptr, header_ptr[7], chunk_flags & 0x1000, 1);\n        if ((bytes_processed == -1) && (*data_ptr != 0)) {\n            if ((*data_ptr == 0x1d) || (*data_ptr == 0x16)) {\n                *data_ptr = original_data_size;\n                return 0;\n            }\n            *(ushort *)(header_ptr + 3) |= 0x40;\n            return 0xffffffff;\n        }\n        \n        chunk_header = *(ushort *)(header_ptr + 3);\n        decoder = (code *)header_ptr[10];\n    }\n    else {\n        chunk_size = header_ptr[0x14];\n    }\n    \n    if (((int)(chunk_flags << 0x1d) < 0) && (chunk_size = chunk_size - header_ptr[1], header_ptr[0xc] != 0)) {\n        chunk_size = chunk_size - header_ptr[0xf];\n    }\n    \n    int bytes_processed = (*decoder)(data_ptr, header_ptr[7], chunk_size, 0);\n    \n    if (bytes_processed == -1) {\n        int data_error = *data_ptr;\n        if (data_error != 0) {\n            if ((data_error != 0x1d) && (data_error != 0x16)) {\n                *(ushort *)(header_ptr + 3) |= 0x40;\n                return 0xffffffff;\n            }\n            \n            *(ushort *)(header_ptr + 3) &= 0xf7ff;\n            *header_ptr = header_ptr[4];\n            header_ptr[1] = 0;\n            goto LAB_00083a00;\n        }\n        \n        chunk_header = *(ushort *)(header_ptr + 3) & 0xf7ff;\n        header_ptr[1] = 0;\n        *(ushort *)(header_ptr + 3) = chunk_header;\n        *header_ptr = header_ptr[4];\n    }\n    else {\n        chunk_header = *(ushort *)(header_ptr + 3) & 0xf7ff;\n        *header_ptr = header_ptr[4];\n        *(ushort *)(header_ptr + 3) = chunk_header;\n        header_ptr[1] = 0;\n    }\n    \n    if ((int)((uint)chunk_header << 0x13) < 0) {\n        header_ptr[0x14] = chunk_size;\n    }\n    \nLAB_00083a00:\n    int *chunk_data = (int *)header_ptr[0xc];\n    *data_ptr = original_data_size;\n    \n    if (chunk_data == (int *)0x0) {\n        return 0;\n    }\n    \n    if (chunk_data != header_ptr + 0x10) {\n        free_chunk_data(data_ptr);\n    }\n    \n    header_ptr[0xc] = 0;\n    return 0;\n}",
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083adc",
            "calling": [
                "FUN_00083f34",
                "FUN_000844c4",
                "FUN_000846a4",
                "FUN_0008378c"
            ],
            "imported": false,
            "current_name": "decode_and_process_data_00083adc"
        },
        "FUN_000825b0": {
            "renaming": {
                "FUN_000825b0": "FUNC_000825b0"
            },
            "code": "\nint * FUNC_000825b0(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  int iVar1;\n  int *piVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  int *piVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  int iVar10;\n  \n  if (param_2 == (int *)0x0) {\n    piVar2 = (int *)FUNC_00081e14(param_1,param_3);\n    return piVar2;\n  }\n  do_nothing_00082598();\n  iVar4 = DAT_0008296c;\n  uVar5 = param_2[-1];\n  uVar7 = uVar5 & 0xfffffffc;\n  piVar2 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar8 = 0x10;\n  }\n  else {\n    uVar8 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar8 < 0) goto LAB_0008267c;\n  }\n  if (uVar8 < param_3) {\nLAB_0008267c:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar7 < (int)uVar8) {\n    iVar1 = (int)piVar2 + uVar7;\n    iVar10 = *(int *)(DAT_0008296c + 8);\n    if (iVar10 == iVar1) {\n      uVar3 = *(uint *)(iVar10 + 4) & 0xfffffffc;\n      iVar1 = iVar10;\n      if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar7)) {\n        *(uint *)(DAT_0008296c + 8) = (int)piVar2 + uVar8;\n        *(uint *)((int)piVar2 + uVar8 + 4) = (uVar3 + uVar7) - uVar8 | 1;\n        param_2[-1] = uVar8 | param_2[-1] & 1U;\n        do_nothing_0008259c(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar1 + 4) & 0xfffffffe) + iVar1 + 4) & 1) == 0) {\n      uVar3 = *(uint *)(iVar1 + 4) & 0xfffffffc;\n      if ((int)uVar8 <= (int)(uVar3 + uVar7)) {\n        iVar10 = *(int *)(iVar1 + 0xc);\n        iVar4 = *(int *)(iVar1 + 8);\n        *(int *)(iVar4 + 0xc) = iVar10;\n        *(int *)(iVar10 + 8) = iVar4;\n        uVar7 = uVar3 + uVar7;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      uVar3 = 0;\n      iVar1 = 0;\n    }\n    if (-1 < (int)(uVar5 << 0x1f)) {\n      piVar9 = (int *)((int)piVar2 - param_2[-2]);\n      uVar5 = (piVar9[1] & 0xfffffffcU) + uVar7;\n      if (iVar1 != 0) {\n        if (iVar1 == iVar10) {\n          if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar5)) {\n            piVar2 = piVar9 + 2;\n            iVar1 = *piVar2;\n            iVar10 = piVar9[3];\n            uVar7 = uVar7 - 4;\n            *(int *)(iVar1 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar1;\n            if (uVar7 < 0x25) {\n              piVar6 = piVar2;\n              if (0x13 < uVar7) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar7 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar6 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar7 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar6 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar6;\n                    piVar6 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar6 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar6 = *param_2;\n              piVar6[1] = param_2[1];\n              piVar6[2] = param_2[2];\n            }\n            else {\n              FUN_00082438(piVar2,param_2);\n            }\n            *(uint *)(iVar4 + 8) = (int)piVar9 + uVar8;\n            *(uint *)((int)piVar9 + uVar8 + 4) = (uVar3 + uVar5) - uVar8 | 1;\n            piVar9[1] = uVar8 | piVar9[1] & 1U;\n            do_nothing_0008259c(param_1);\n            return piVar2;\n          }\n        }\n        else {\n          uVar3 = uVar3 + uVar5;\n          if ((int)uVar8 <= (int)uVar3) {\n            iVar10 = *(int *)(iVar1 + 0xc);\n            iVar4 = *(int *)(iVar1 + 8);\n            *(int *)(iVar4 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar4;\n            piVar6 = piVar9 + 2;\n            iVar4 = *piVar6;\n            iVar1 = piVar9[3];\n            uVar5 = uVar7 - 4;\n            *(int *)(iVar4 + 0xc) = iVar1;\n            *(int *)(iVar1 + 8) = iVar4;\n            uVar7 = uVar3;\n            if (uVar5 < 0x25) {\n              piVar2 = piVar6;\n              if (0x13 < uVar5) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar2 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar5 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar2 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar2;\n                    piVar2 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar2 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar2 = *param_2;\n              piVar2[1] = param_2[1];\n              piVar2[2] = param_2[2];\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            else {\n              FUN_00082438(piVar6,param_2);\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)uVar8 <= (int)uVar5) {\n        piVar6 = piVar9 + 2;\n        iVar4 = *piVar6;\n        iVar1 = piVar9[3];\n        uVar3 = uVar7 - 4;\n        *(int *)(iVar4 + 0xc) = iVar1;\n        *(int *)(iVar1 + 8) = iVar4;\n        uVar7 = uVar5;\n        if (uVar3 < 0x25) {\n          piVar2 = piVar6;\n          if (0x13 < uVar3) {\n            piVar9[2] = *param_2;\n            piVar9[3] = param_2[1];\n            if (uVar3 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar9 + 4;\n            }\n            else {\n              piVar9[4] = param_2[2];\n              piVar9[5] = param_2[3];\n              if (uVar3 == 0x24) {\n                piVar9[6] = param_2[4];\n                piVar2 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar9[7] = *piVar2;\n                piVar2 = piVar9 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar9 + 6;\n              }\n            }\n          }\n          *piVar2 = *param_2;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        else {\n          FUN_00082438(piVar6,param_2);\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    piVar9 = (int *)FUNC_00081e14(param_1,param_3);\n    if (piVar9 == (int *)0x0) goto LAB_000826a4;\n    uVar5 = param_2[-1];\n    if (piVar9 + -2 != (int *)((uVar5 & 0xfffffffe) + (int)piVar2)) {\n      uVar7 = uVar7 - 4;\n      if (uVar7 < 0x25) {\n        piVar2 = param_2;\n        piVar6 = piVar9;\n        if (0x13 < uVar7) {\n          *piVar9 = *param_2;\n          piVar9[1] = param_2[1];\n          if (uVar7 < 0x1c) {\n            piVar2 = param_2 + 2;\n            piVar6 = piVar9 + 2;\n          }\n          else {\n            piVar9[2] = param_2[2];\n            piVar9[3] = param_2[3];\n            if (uVar7 == 0x24) {\n              piVar9[4] = param_2[4];\n              piVar9[5] = param_2[5];\n              piVar2 = param_2 + 6;\n              piVar6 = piVar9 + 6;\n            }\n            else {\n              piVar2 = param_2 + 4;\n              piVar6 = piVar9 + 4;\n            }\n          }\n        }\n        *piVar6 = *piVar2;\n        piVar6[1] = piVar2[1];\n        piVar6[2] = piVar2[2];\n      }\n      else {\n        FUN_00082438(piVar9,param_2);\n      }\n      FUN_00083d9c(param_1,param_2);\n      goto LAB_000826a4;\n    }\n    uVar7 = uVar7 + (piVar9[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  uVar3 = uVar7 - uVar8;\n  piVar9 = param_2;\n  if (uVar3 < 0x10) {\n    piVar2[1] = uVar5 & 1 | uVar7;\n    *(uint *)((int)piVar2 + uVar7 + 4) = *(uint *)((int)piVar2 + uVar7 + 4) | 1;\n  }\n  else {\n    piVar2[1] = uVar5 & 1 | uVar8;\n    *(uint *)((int)piVar2 + uVar8 + 4) = uVar3 | 1;\n    *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) = *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) | 1;\n    FUN_00083d9c(param_1,(int)piVar2 + uVar8 + 8);\n  }\nLAB_000826a4:\n  do_nothing_0008259c(param_1);\n  return piVar9;\n}\n\n",
            "called": [
                "FUN_00082598",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082438",
                "FUN_00081e14"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000825b0",
            "calling": [
                "FUN_00083f34",
                "FUN_000825a0"
            ],
            "imported": false,
            "current_name": "FUNC_000825b0"
        },
        "FUN_000803d4": {
            "renaming": {
                "FUN_000803d4": "check_byte_value_000803d4",
                "param_1": "input_byte",
                "iVar1": "index",
                "*(byte *)(param_1 + 10)": "*(byte *)(input_byte + 10)",
                "PTR_DAT_0008040c": "PTR_DAT_0008040c",
                "*(short *)(param_1 + 0x54)": "*(short*)(input_byte + 0x54)"
            },
            "code": "int check_byte_value_000803d4(int input_byte){\n  int index = 0;\n  if ((input_byte << 0x18) < 0) {\n    short* short_ptr = (short*)(input_byte + 0x54);\n    *short_ptr += 1;\n    return 0xfb;\n  }\n  while (index != 8) {\n    if (PTR_DAT_0008040c[index] == *(byte *)(input_byte + 10)) {\n      return 0;\n    }\n    index++;\n  }\n  short* short_ptr = (short*)(input_byte + 0x54);\n  *short_ptr += 1;\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803d4",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "check_byte_value_000803d4"
        },
        "FUN_0008043e": {
            "renaming": {
                "FUN_0008043e": "validate_input_0008043e",
                "param_1": "input_array",
                "cVar1": "result",
                "uVar2": "input_value",
                "piVar3": "allocated_memory",
                "iVar4": "comparison_result",
                "unaff_r6": "unused_variable",
                "thunk_FUN_00081714": "allocate_memory",
                "FUN_000801b0": "process_input",
                "FUN_000803d4": "compare_inputs"
            },
            "code": "int validate_input_0008043e(int **input_array)\n{\n    char result;\n    uint8_t input_length;\n    uint8_t input_value;\n    int *allocated_memory;\n    int comparison_result;\n\n    input_length = *(uint8_t *)((int)input_array + 5);\n    if (input_length < 4) {\n        input_value = (**(code **)(**input_array + 8))() & 0xff;\n    }\n    allocated_memory = (int *)thunk_FUN_00081714();\n    if (input_array[0x17] < allocated_memory) {\n        *(uint8_t *)(input_array + 2) = 0xff;\n        *(uint8_t *)((int)input_array + 7) = 0;\n        *(short *)(input_array + 0x15) = *(short *)(input_array + 0x15) + 1;\n    }\n    else if (input_value > 7) {\n        FUN_000801b0(input_array);\n        comparison_result = FUN_000803d4(input_array);\n        if (comparison_result == 0) {\n            if (*(uint8_t *)((int)input_array + 10) - 3 < 2) {\n                FUN_00080410(input_array);\n            }\n            *(uint8_t *)((int)input_array + 7) = 0;\n            result = *(char *)((int)input_array + 0x49);\n        }\n        else {\n            *(uint8_t *)((int)input_array + 7) = 0;\n            result = (char)comparison_result;\n        }\n        goto LAB_000804a2;\n    }\n    result = '\\0';\nLAB_000804a2:\n    return (int)result;\n}",
            "called": [
                "FUN_000801b0",
                "FUN_000803d4",
                "thunk_FUN_00081714",
                "FUN_00080410"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008043e",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "validate_input_0008043e"
        },
        "FUN_0008160c": {
            "renaming": {
                "FUN_0008160c": "reset_parameters_0008160c",
                "param_1": "ptr_param",
                "*param_1": "*ptr_param",
                "FUN_00081e04": "execute_reset",
                "param_1[1]": "ptr_param_1",
                "param_1[2]": "ptr_param_2"
            },
            "code": "void reset_parameters_0008160c(int *ptr_param){\n  if (*ptr_param != 0) {\n    execute_reset();\n  }\n  *ptr_param = 0;\n  ptr_param[2] = 0;\n  ptr_param[1] = 0;\n  return;\n}",
            "called": [
                "FUN_00081e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008160c",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "reset_parameters_0008160c"
        },
        "FUN_00080e18": {
            "renaming": {
                "FUN_00080e18": "check_input_00080e18",
                "param_1": "input",
                "uVar1": "mask"
            },
            "code": "int check_input_00080e18(uint input) {\n    uint mask;\n    if (input < 45) {\n        if (input < 32) {\n            mask = 1 << (input & 0xff);\n            if ((mask & *(uint *)(DAT_00080e58 + 0x18)) != mask) {\n                *(uint *)(DAT_00080e58 + 0x10) = mask;\n            }\n        }\n        else {\n            mask = 1 << (input - 32 & 0xff);\n            if ((mask & *(uint *)(DAT_00080e58 + 0x108)) != mask) {\n                *(uint *)(DAT_00080e58 + 0x100) = mask;\n            }\n        }\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e18",
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210",
                "FUN_00081508"
            ],
            "imported": false,
            "current_name": "check_input_00080e18"
        },
        "FUN_00081184": {
            "renaming": {
                "FUN_00081184": "get_zero_00081184"
            },
            "code": "int get_zero_00081184() {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081184",
            "calling": [],
            "imported": false,
            "current_name": "get_zero_00081184"
        },
        "FUN_00084298": {
            "renaming": {
                "FUN_00084298": "get_value_00084298",
                "*DAT_000842a0": "value_ptr"
            },
            "code": "int get_value_00084298(void)\n{\n  int* *DAT_000842a0 = DAT_000842a0;\n  return **DAT_000842a0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084298",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "get_value_00084298"
        },
        "FUN_00081066": {
            "renaming": {
                "FUN_00081066": "setParamToMax_00081066",
                "param_1": "param",
                "*(undefined4 *)(param_1 + 0x14)": "*(int *)(param + 0x14)"
            },
            "code": "void setParamToMax_00081066(int param)\n{\n  *(int *)(param + 0x14) = 0xffff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081066",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "setParamToMax_00081066"
        },
        "FUN_00081cd0": {
            "renaming": {
                "FUN_00081cd0": "convertToSignedInt_00081cd0",
                "param_1": "unsignedIntValue",
                "uVar1": "shiftValue",
                "uVar2": "subtractValue"
            },
            "code": "uint convertToSignedInt_00081cd0(uint unsignedIntValue) {\n  if (unsignedIntValue << 1 < 0x7f000000) {\n    return 0;\n  }\n  uint shiftValue = (unsignedIntValue << 1) >> 0x18;\n  uint subtractValue = 0x9e - shiftValue;\n  if (shiftValue < 0x9f && subtractValue != 0) {\n    uint shiftedValue = (unsignedIntValue << 8 | 0x80000000) >> (subtractValue & 0xff);\n    if ((unsignedIntValue & 0x80000000) != 0) {\n      shiftedValue = -shiftedValue;\n    }\n    return shiftedValue;\n  }\n  if ((subtractValue == 0xffffff9f) && ((unsignedIntValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  unsignedIntValue = unsignedIntValue & 0x80000000;\n  if (unsignedIntValue == 0) {\n    unsignedIntValue = 0x7fffffff;\n  }\n  return unsignedIntValue;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cd0",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "convertToSignedInt_00081cd0"
        },
        "FUN_00081df4": {
            "renaming": {
                "FUN_00081df4": "call_function_with_data_pointer_00081df4",
                "DAT_00081e00": "data_pointer",
                "param_1": "param_1",
                "FUNC_00081e14": "function_with_data_pointer"
            },
            "code": "void call_function_with_data_pointer_00081df4(void* DAT_00081e00, undefined4 param_1)\n{\n  function_with_DAT_00081e00(*DAT_00081e00,param_1);\n  return;\n}",
            "called": [
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081df4",
            "calling": [
                "FUN_00083974"
            ],
            "imported": false,
            "current_name": "call_function_with_data_pointer_00081df4"
        },
        "FUN_00080410": {
            "renaming": {
                "FUN_00080410": "process_data_00080410",
                "param_1": "data_ptr",
                "param_2": "byte_param",
                "param_3": "int_param",
                "param_4": "uint32_param",
                "uVar1": "processed_data",
                "iVar2": "current_data_ptr",
                "bVar3": "byte_counter",
                "uVar4": "byte_count_limit",
                "iVar5": "data_array_ptr"
            },
            "code": "void process_data_00080410(int data_ptr, uint8_t byte_param, int int_param, uint32_t uint32_param) {\n  uint8_t byte_counter = 0;\n  while( true ) {\n    uint32_t byte_count_limit = *(uint8_t *)(data_ptr + 0xb) >> 1;\n    if (byte_count_limit <= byte_counter) break;\n    int current_data_ptr = (byte_counter * 2 + 3 & 0xff) + data_ptr;\n    int data_array_ptr = *(int *)(data_ptr + 0x4c);\n    uint16_t processed_data = process_single_data(*(uint8_t *)(current_data_ptr + 9), *(uint8_t *)(current_data_ptr + 10), current_data_ptr, byte_param, uint32_param);\n    *(uint16_t *)(data_array_ptr + byte_counter * 2) = processed_data;\n    byte_counter++;\n  }\n  return;\n}",
            "called": [
                "FUN_000815f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080410",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "process_data_00080410"
        },
        "FUN_00080da0": {
            "renaming": {
                "FUN_00080da0": "process_data_00080da0",
                "param_1": "data_ptr",
                "param_2": "data_type",
                "param_3": "data_value",
                "param_4": "flags",
                "bVar1": "is_negative"
            },
            "code": "int process_data_00080da0(int data_ptr, int data_type, int data_value, unsigned int flags) {\n  bool is_negative = (int)(flags << 0x1f) < 0;\n  switch(data_type) {\n    case 1:\n    case 2:\n      (*data_ptr)(data_ptr, data_type, data_value);\n      *(int *)(data_ptr + 0x44) = data_value;\n      if (is_negative) {\n        *(int *)(data_ptr + 100) = data_value;\n      }\n      if (!is_negative) {\n        *(int *)(data_ptr + 0x60) = data_value;\n      }\n      break;\n    case 3:\n      (*DAT_00080dfc)(data_ptr, data_value, flags, DAT_00080dfc, data_ptr);\n      break;\n    case 4:\n    case 5:\n      (*DAT_00080e00)(data_ptr, data_value, data_type == 5, (flags << 0x1d) >> 0x1f, flags & 1, data_type, data_value);\n      break;\n    default:\n      return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_00080d7a",
                "FUN_00080d2e",
                "FUN_00080d54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080da0",
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210"
            ],
            "imported": false,
            "current_name": "process_data_00080da0"
        },
        "FUN_00080258": {
            "renaming": {
                "FUN_00080258": "update_data_00080258",
                "param_1": "data",
                "param_2": "num_bytes",
                "param_3": "flag1",
                "param_4": "flag2",
                "bVar1": "byte_val",
                "uVar2": "result",
                "iVar3": "result",
                "uVar4": "index",
                "FUN_0008021c": "calculate_result",
                "FUN_00081318": "call_function1",
                "PTR_FUN_00081714": "calculate_new_value"
            },
            "code": "void update_data_00080258(int **data, int num_bytes, int flag1, int flag2) {\n  byte byte_val = *(byte *)((int)data + 0x49);\n  uint index = (uint)byte_val;\n  undefined2 result = calculate_result(data, index, flag1, flag2, flag2);\n  *(char *)((int)data + index + 9) = (char)((ushort)result >> 8);\n  *(char *)((int)data + (index + 1 & 0xff) + 9) = (char)result;\n  *(byte *)((int)data + 0x49) = byte_val + 2;\n  if (1 < *(byte *)((int)data + 6)) {\n    call_function1(*(byte *)((int)data + 6),1);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    (**(code **)(**data + 4))(*data,(int)data + 9,*(undefined *)((int)data + 0x49));\n  }\n  if (1 < *(byte *)((int)data + 6)) {\n    call_function1(*(byte *)((int)data + 6),0);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    do {\n      int result = (**(code **)(**data + 0xc))();\n    } while (-1 < result);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  int new_value = PTR_FUN_00081714();\n  data[0x17] = (int *)(new_value + (uint)*(ushort *)((int)data + 0x56));\n  *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n  return;\n}",
            "called": [
                "FUN_0008021c",
                "thunk_FUN_00081714",
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080258",
            "calling": [
                "FUN_000802da"
            ],
            "imported": false,
            "current_name": "update_data_00080258"
        },
        "FUN_00081622": {
            "renaming": {
                "FUN_00081622": "check_and_update_array_00081622",
                "param_1": "array",
                "param_2": "size",
                "iVar1": "updated_value",
                "FUN_000825a0": "check_array_values"
            },
            "code": "int check_and_update_array_00081622(int *array, int size, undefined4 param_3, undefined4 param_4)\n{\n  int updated_value;\n  updated_value = check_array_values(*array, size + 1, param_3, param_4, param_4);\n  if (updated_value != 0) {\n    *array = updated_value;\n    array[1] = size;\n    updated_value = 1;\n  }\n  return updated_value;\n}",
            "called": [
                "FUN_000825a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081622",
            "calling": [
                "FUN_0008163a"
            ],
            "imported": false,
            "current_name": "check_and_update_array_00081622"
        },
        "FUN_00082438": {
            "renaming": {
                "FUN_00082438": "reverse_copy_00082438",
                "param_1": "dst",
                "param_2": "src",
                "param_3": "size",
                "iVar1": "remaining",
                "puVar2": "dst_ptr",
                "puVar3": "src_ptr",
                "puVar4": "ptr",
                "uVar5": "remaining_blocks",
                "puVar6": "byte_ptr",
                "uVar7": "remaining_bytes"
            },
            "code": "void reverse_copy_00082438(undefined4 *dst, undefined4 *src, uint size) {\n  if ((src < dst) && ((src + size) > dst)) {\n    // Overlapping case\n    uint remaining = size - 1;\n    while (remaining != -1) {\n      *(--dst + size) = *(--src + size);\n      remaining--;\n    }\n  } else if (size >= 0x10) {\n    // Large block copy using 32-bit words\n    uint remaining = size - 0x10;\n    uint blocks = remaining >> 4;\n    remaining &= 0xF;\n    while (blocks > 0) {\n      *dst++ = *src++;\n      *dst++ = *src++;\n      *dst++ = *src++;\n      *dst++ = *src++;\n      blocks--;\n    }\n    while (remaining > 0) {\n      *dst++ = *src++;\n      remaining--;\n    }\n  } else if (size > 0) {\n    // Small block copy using byte-wise copy\n    while (size > 0) {\n      *dst++ = *src++;\n      size--;\n    }\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082438",
            "calling": [
                "FUN_00083f34",
                "FUN_000825b0"
            ],
            "imported": false,
            "current_name": "reverse_copy_00082438"
        },
        "FUN_00081508": {
            "renaming": {
                "FUN_00081508": "initialize_device_00081508",
                "param_1": "device_address",
                "param_2": "baud_rate",
                "param_3": "device_type",
                "puVar1": "pin_config",
                "iVar2": "device_struct_address",
                "puVar3": "device_config",
                "DAT_00081570": "DEVICE_CLOCK_CONFIG",
                "DAT_00081574": "DEVICE_PIN_ADDRESS",
                "*(undefined4 *)(param_1 + 0x20)": "set_device_config(*(uint32_t *)(device_address + 0x20))",
                "*(undefined4 **)(param_1 + 0x18)": "*(uint32_t **)(device_address + 0x18)",
                "puVar3[0x48]": "device_config[0x48]",
                "*puVar3": "*device_config",
                "puVar3[1]": "device_config[1]",
                "puVar3[8]": "device_config[8]",
                "puVar3[3]": "device_config[3]",
                "puVar3[2]": "device_config[2]",
                "*(byte *)(param_1 + 0x1c)": "*(char *)(device_address + 0x1c)",
                "(uint)(int)(char)*(byte *)(param_1 + 0x1c) >> 5": "(uint32_t)(*(char *)(device_address + 0x1c)) >> 5",
                "*(int *)(DAT_00081574 + ((uint)(int)(char)*(byte *)(param_1 + 0x1c) >> 5) * 4)": "*(int *)pin_number",
                "*(int *)(param_1 + 0x10)": "*(int *)(device_address + 0x10)",
                "*(undefined4 *)(iVar2 + 0x84)": "*(uint32_t *)(device_struct_address + 0x84)",
                "*(undefined4 *)(iVar2 + 0x80)": "*(uint32_t *)(device_struct_address + 0x80)"
            },
            "code": "void initialize_device_00081508(int device_address, uint32_t baud_rate, uint32_t device_type) {\\n\\\n        uint32_t *device_config;\\n\\\n        int device_struct_address;\\n\\\n        uint32_t *pin_config;\\n\\\n        uint32_t pin_number;\\n\\\n        uint32_t *clock_config;\\n\\\n        \\n\\\n        set_device_config(*(uint32_t *)(device_address + 0x20));\\n\\\n        device_config = *(uint32_t **)(device_address + 0x18);\\n\\\n        device_config[0x48] = 0x202;\\n\\\n        *device_config = 0xac;\\n\\\n        pin_config = DEVICE_PIN_CONFIG;\\n\\\n        device_config[1] = device_type;\\n\\\n        device_config[8] = *pin_config / baud_rate >> 4;\\n\\\n        device_config[3] = 0xffffffff;\\n\\\n        device_config[2] = 0x61;\\n\\\n        pin_number = (uint32_t)(*(char *)(device_address + 0x1c));\\n\\\n        pin_number = pin_number >> 5;\\n\\\n        pin_number = pin_number * 4 + DAT_00081574;\\n\\\n        *(int *)(DAT_00081574 + ((uint)(int)(char)*(byte *)(param_1 + 0x1c) >> 5) * 4) = 1 << ((uint32_t)(*(char *)(device_address + 0x1c)) & 0x1f);\\n\\\n        device_struct_address = *(int *)(device_address + 0x10);\\n\\\n        *(uint32_t *)(device_struct_address + 0x84) = 0;\\n\\\n        *(uint32_t *)(device_struct_address + 0x80) = 0;\\n\\\n        device_struct_address = *(int *)(device_address + 0x14);\\n\\\n        *(uint32_t *)(device_struct_address + 0x84) = 0;\\n\\\n        *(uint32_t *)(device_struct_address + 0x80) = 0;\\n\\\n        *device_config = 0x50;\\n\\\n    }",
            "called": [
                "FUN_00080e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081508",
            "calling": [],
            "imported": false,
            "current_name": "initialize_device_00081508"
        },
        "FUN_00083808": {
            "renaming": {
                "FUN_00083808": "process_data_00083808",
                "param_1": "data",
                "param_2": "info",
                "uVar1": "flag",
                "iVar2": "value",
                "uVar3": "flags_shifted",
                "uVar4": "flags",
                "*DAT_000838c8": "*process_ptr"
            },
            "code": "int process_data_00083808(uint16_t *data, int *info) {\n  uint16_t flags = data[3];\n  uint32_t flags_shifted = flags << 28;\n  int result = 0;\n  int value = 0;\n\n  if (*PTR_DAT_000838c8 != 0 && *(int *)(*PTR_DAT_000838c8 + 0x38) == 0) {\n    initialize_process();\n  }\n\n  if ((int)flags_shifted < 0) {\n    value = info[4];\n  } else {\n    if ((int)(flags << 27) >= 0) {\n      result = 9;\n      data[3] = flags | 0x40;\n      return -1;\n    }\n    if ((int)(flags << 29) < 0) {\n      if ((int *)info[12] != NULL) {\n        if ((int *)info[12] != info + 0x10) {\n          cleanup_process(data);\n          flags = data[3];\n        }\n        info[12] = 0;\n      }\n      value = info[4];\n      flags = flags & 0xFFDB;\n      data[0] = value;\n      info[1] = 0;\n    } else {\n      value = info[4];\n    }\n    data[3] = flags | 8;\n    flags_shifted = (uint32_t)(flags | 8);\n  }\n\n  if (value == 0 && (flags_shifted & 0x280) != 0x200) {\n    process_data_00083808(info, data);\n    flags_shifted = (uint32_t)data[3];\n    value = info[4];\n  }\n\n  uint8_t flag = flags_shifted & 1;\n\n  if (flag == 0) {\n    if ((int)(flags_shifted << 30) >= 0) {\n      value = info[5];\n    }\n    info[2] = value;\n  } else {\n    info[6] = -info[5];\n    info[2] = 0;\n  }\n\n  if (value == 0 && (int)(flags_shifted << 24) < 0) {\n    data[3] = flags | 0x40;\n    return -1;\n  }\n\n  return 0;\n}",
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c",
                "FUN_000842a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083808",
            "calling": [
                "FUN_00083f34",
                "FUN_00082b38",
                "FUN_000844c4"
            ],
            "imported": false,
            "current_name": "process_data_00083808"
        },
        "FUN_000847e0": {
            "renaming": {
                "FUN_000847e0": "FUNC_000847e0"
            },
            "code": "\nundefined8 FUNC_000847e0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000847e0",
            "calling": [
                "FUN_0008477c"
            ],
            "imported": false,
            "current_name": "FUNC_000847e0"
        },
        "FUN_0008105c": {
            "renaming": {
                "FUN_0008105c": "set_bit_at_position_0008105c",
                "param_1": "bit_array",
                "param_2": "position",
                "*(int *)(param_1 + 0x14)": "bit_position"
            },
            "code": "void set_bit_at_position_0008105c(int bit_array[], uint position) {\n  int bit_position = 1 << (position & 0xff);\n  bit_array[position + 0x14] = bit_position;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008105c",
            "calling": [
                "FUN_00081210"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_0008105c"
        },
        "FUN_0008456c": {
            "renaming": {
                "FUN_0008456c": "decode_data_0008456c",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "unused_param",
                "param_4": "out_ptr",
                "uVar1": "decoded_value",
                "iVar2": "decode_result",
                "pcVar3": "decode_function",
                "auStack_24": "decode_stack"
            },
            "code": "void decode_data_0008456c(undefined4 *data_ptr, int data_size, undefined4 unused_param, undefined4 *out_ptr) {\n  undefined4 decoded_value;\n  int decode_result;\n  code *decode_function;\n  undefined decode_stack[12];\n\n  if (data_size == 0) {\n    decode_function = *(code **)PTR_DAT_000845b8;\n    decoded_value = FUN_00084290();\n    decode_result = (*decode_function)(data_ptr, decode_stack, 0, decoded_value, out_ptr);\n  }\n  else {\n    decode_function = *(code **)PTR_DAT_000845b8;\n    decoded_value = FUN_00084290();\n    decode_result = (*decode_function)(data_ptr, data_size, unused_param, decoded_value, out_ptr);\n  }\n\n  if (decode_result == -1) {\n    *out_ptr = 0;\n    *data_ptr = 0x8a;\n  }\n  return;\n}",
            "called": [
                "FUN_000845bc",
                "FUN_00084290"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008456c",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "decode_data_0008456c"
        },
        "FUN_00080aba": {
            "renaming": {
                "FUN_00080aba": "do_nothing_00080aba"
            },
            "code": "\nvoid do_nothing_00080aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aba",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aba"
        },
        "FUN_00080abc": {
            "renaming": {
                "FUN_00080abc": "do_nothing_00080abc"
            },
            "code": "\nvoid do_nothing_00080abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080abc",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080abc"
        },
        "FUN_000811b4": {
            "renaming": {
                "FUN_000811b4": "set_flags_to_0x2000_000811b4",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "*(undefined4 *)(param_2 + 4)": "*(int *)(data_ptr + 4)"
            },
            "code": "void set_flags_to_0x2000_000811b4(int* data_ptr, int data_size) {\n  *(int *)(data_ptr + 4) = 0x2000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b4",
            "calling": [
                "FUN_000846b4"
            ],
            "imported": false,
            "current_name": "set_flags_to_0x2000_000811b4"
        },
        "FUN_000816d4": {
            "renaming": {
                "FUN_000816d4": "set_default_value_000816d4",
                "DAT_000816dc": "ptr_data"
            },
            "code": "void set_default_value_000816d4(void)\n{\n  int* DAT_000816dc = DAT_000816dc;\n  *(DAT_000816dc + 1) = 0x8000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d4",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "set_default_value_000816d4"
        },
        "FUN_00083f34": {
            "renaming": {
                "FUN_00083f34": "FUNC_00083f34"
            },
            "code": "\nundefined4 FUNC_00083f34(undefined4 *param_1,uint *param_2,uint **param_3)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint *puVar5;\n  uint *puVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint local_2c;\n  \n  if (param_3[2] != (uint *)0x0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar4 = (uint)uVar3;\n    if (((int)(uVar4 << 0x1c) < 0) && (param_2[4] != 0)) {\n      puVar6 = *param_3;\n      uVar2 = DAT_00084244;\n    }\n    else {\n      iVar1 = FUN_00083808(param_1,param_2);\n      if (iVar1 != 0) {\n        return 0xffffffff;\n      }\n      uVar3 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar3;\n      puVar6 = *param_3;\n      uVar2 = DAT_00084244;\n    }\n    DAT_00084244 = uVar2;\n    if ((uVar3 & 2) == 0) {\n      uVar2 = uVar4 & 2;\n      uVar8 = uVar4 & 1;\n      uVar7 = uVar2;\n      uVar10 = uVar2;\n      local_2c = uVar2;\n      uVar9 = uVar8;\n      if (uVar8 == 0) {\n        while( true ) {\n          while (uVar8 == 0) {\n            uVar9 = *puVar6;\n            puVar5 = puVar6 + 1;\n            puVar6 = puVar6 + 2;\n            uVar8 = *puVar5;\n          }\n          uVar2 = param_2[2];\n          if ((int)(uVar4 << 0x16) < 0) {\n            if (uVar8 < uVar2) {\n              uVar4 = *param_2;\n              uVar2 = uVar8;\n            }\n            else if ((uVar4 & 0x480) == 0) {\n              uVar4 = *param_2;\n            }\n            else {\n              iVar1 = *param_2 - param_2[4];\n              uVar2 = iVar1 + 1 + uVar8;\n              uVar7 = (int)(param_2[5] * 3) / 2;\n              if (uVar2 <= uVar7) {\n                uVar2 = uVar7;\n              }\n              if ((int)(uVar4 << 0x15) < 0) {\n                uVar7 = FUNC_00081e14(param_1,uVar2);\n                if (uVar7 == 0) {\n                  *param_1 = 0xc;\n                  uVar3 = *(ushort *)(param_2 + 3);\n                  goto LAB_00084030;\n                }\n                FUN_0008234c(uVar7,param_2[4],iVar1);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                uVar7 = FUNC_000825b0(param_1);\n                if (uVar7 == 0) {\n                  FUN_00083d9c(param_1,param_2[4]);\n                  uVar3 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              uVar4 = uVar7 + iVar1;\n              param_2[4] = uVar7;\n              param_2[5] = uVar2;\n              *param_2 = uVar4;\n              param_2[2] = uVar2 - iVar1;\n              uVar2 = uVar8;\n            }\n            FUN_00082438(uVar4,uVar9,uVar2);\n            param_2[2] = param_2[2] - uVar2;\n            *param_2 = *param_2 + uVar2;\n            uVar2 = uVar8;\n          }\n          else if ((param_2[4] < *param_2) || (uVar4 = param_2[5], uVar8 < uVar4)) {\n            if (uVar8 < uVar2) {\n              uVar2 = uVar8;\n            }\n            FUN_00082438(*param_2,uVar9,uVar2);\n            uVar4 = param_2[2];\n            param_2[2] = uVar4 - uVar2;\n            *param_2 = *param_2 + uVar2;\n            if ((uVar4 - uVar2 == 0) && (iVar1 = FUN_00083adc(param_1,param_2), iVar1 != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            uVar2 = 0x7fffffff;\n            if (uVar8 < 0x7fffffff) {\n              uVar2 = uVar8;\n            }\n            uVar2 = (*(code *)param_2[9])(param_1,param_2[7],uVar9,(uVar2 / uVar4) * uVar4);\n            if ((int)uVar2 < 1) goto LAB_0008402e;\n          }\n          puVar5 = param_3[2];\n          uVar8 = uVar8 - uVar2;\n          param_3[2] = (uint *)((int)puVar5 - uVar2);\n          if ((uint *)((int)puVar5 - uVar2) == (uint *)0x0) break;\n          uVar4 = (uint)*(ushort *)(param_2 + 3);\n          uVar9 = uVar9 + uVar2;\n        }\n      }\n      else {\n        do {\n          while (uVar2 == 0) {\n            uVar10 = *puVar6;\n            uVar2 = puVar6[1];\n            local_2c = 0;\n            puVar6 = puVar6 + 2;\n          }\n          if (local_2c == 0) {\n            iVar1 = FUN_00084384(uVar10,10,uVar2);\n            if (iVar1 == 0) {\n              uVar7 = uVar2 + 1;\n              local_2c = 1;\n            }\n            else {\n              uVar7 = (iVar1 + 1) - uVar10;\n              local_2c = 1;\n            }\n          }\n          uVar8 = *param_2;\n          uVar4 = uVar7;\n          if (uVar2 <= uVar7) {\n            uVar4 = uVar2;\n          }\n          uVar9 = param_2[5];\n          if ((param_2[4] < uVar8) && (uVar11 = param_2[2] + uVar9, (int)uVar11 < (int)uVar4)) {\n            FUN_00082438(uVar8,uVar10,uVar11);\n            *param_2 = *param_2 + uVar11;\n            iVar1 = FUN_00083adc(param_1,param_2);\n            if (iVar1 != 0) goto LAB_0008402e;\n          }\n          else if ((int)uVar4 < (int)uVar9) {\n            FUN_00082438(uVar8,uVar10,uVar4);\n            param_2[2] = param_2[2] - uVar4;\n            *param_2 = uVar4 + *param_2;\n            uVar11 = uVar4;\n          }\n          else {\n            uVar11 = (*(code *)param_2[9])(param_1,param_2[7],uVar10,uVar9);\n            if ((int)uVar11 < 1) goto LAB_0008402e;\n          }\n          uVar7 = uVar7 - uVar11;\n          if ((uVar7 == 0) && (iVar1 = FUN_00083adc(param_1,param_2), local_2c = uVar7, iVar1 != 0))\n          goto LAB_0008402e;\n          puVar5 = param_3[2];\n          uVar10 = uVar10 + uVar11;\n          uVar2 = uVar2 - uVar11;\n          param_3[2] = (uint *)((int)puVar5 - uVar11);\n        } while ((uint *)((int)puVar5 - uVar11) != (uint *)0x0);\n      }\n    }\n    else {\n      uVar7 = 0;\n      uVar4 = 0;\n      do {\n        while( true ) {\n          uVar10 = uVar4;\n          if (uVar2 <= uVar4) {\n            uVar10 = uVar2;\n          }\n          if (uVar4 != 0) break;\n          uVar7 = *puVar6;\n          uVar4 = puVar6[1];\n          puVar6 = puVar6 + 2;\n        }\n        iVar1 = (*(code *)param_2[9])(param_1,param_2[7],uVar7,uVar10);\n        if (iVar1 < 1) {\nLAB_0008402e:\n          uVar3 = *(ushort *)(param_2 + 3);\nLAB_00084030:\n          *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n          return 0xffffffff;\n        }\n        puVar5 = param_3[2];\n        uVar7 = uVar7 + iVar1;\n        uVar4 = uVar4 - iVar1;\n        param_3[2] = (uint *)((int)puVar5 - iVar1);\n      } while ((uint *)((int)puVar5 - iVar1) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_0008234c",
                "FUN_00084384",
                "FUN_00082438",
                "FUN_00083808",
                "FUN_00083adc",
                "FUN_00081e14"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083f34",
            "calling": [
                "FUN_00082ac0"
            ],
            "imported": false,
            "current_name": "FUNC_00083f34"
        },
        "FUN_00080d7a": {
            "renaming": {
                "FUN_00080d7a": "set_params_in_array_00080d7a",
                "param_1": "array",
                "param_2": "value",
                "param_3": "has_value",
                "param_4": "has_value2",
                "param_5": "has_value3"
            },
            "code": "void set_params_in_array_00080d7a(int* array, int value, int has_value, int has_value2, int has_value3) {\n    array[17] = value;\n    if (has_value3 == 0) {\n        array[24] = value;\n    }\n    else {\n        array[25] = value;\n    }\n    if (has_value2 == 0) {\n        array[21] = value;\n    }\n    else {\n        array[20] = value;\n    }\n    if (has_value == 0) {\n        array[13] = value;\n    }\n    else {\n        array[12] = value;\n    }\n    array[4] = value;\n    *array = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d7a",
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "imported": false,
            "current_name": "set_params_in_array_00080d7a"
        },
        "FUN_00080e9c": {
            "renaming": {
                "FUN_00080e9c": "initialize_device_00080e9c",
                "*puVar1": "device_config_ptr",
                "puVar1": "device_config_ptr",
                "iVar2": "device_config_offset",
                "DAT_00080f08": "DEVICE_CONFIG_START",
                "*DAT_00080f08": "DEVICE_CONFIG_VALUE",
                "DAT_00080f0c": "DEVICE_CONFIG_START",
                "*(int *)(DAT_00080f0c + 0x20)": "*(int32_t *)(device_config_offset + DEVICE_CONFIG_FLAG_OFFSET)",
                "DAT_00080f14": "DEVICE_CONFIG_OPTION_VALUE",
                "DAT_00080f10": "DEVICE_CONFIG_OPTION_VALUE_2",
                "*(uint *)(DAT_00080f0c + 0x30)": "*(uint32_t *)(device_config_offset + DEVICE_CONFIG_STATUS_OFFSET)",
                "0xfffffffc": "DEVICE_CONFIG_STATUS_MASK",
                "1": "DEVICE_CONFIG_STATUS_VALUE",
                "DAT_00080f18": "DEVICE_CONFIG_IRQ_VALUE",
                "*DAT_00080f20": "DEVICE_CONFIG_VERSION_PTR",
                "DAT_00080f1c": "DEVICE_CONFIG_VERSION_VALUE"
            },
            "code": "void initialize_device_00080e9c(void)\n{\n  uint32_t *device_config_ptr;\n  int32_t device_config_offset;\n  \n  device_config_ptr = DAT_00080f08;\n  *device_config_ptr = *DAT_00080f08;\n  device_config_ptr[DEVICE_CONFIG_OFFSET] = *DAT_00080f08;\n  device_config_offset = DAT_00080f08 + DEVICE_CONFIG_OFFSET;\n  if (-1 < *(int *)(DAT_00080f0c + 0x20) << 7) {\n    *(uint32_t *)(device_config_offset + DEVICE_CONFIG_OPTION_OFFSET) = DAT_00080f14;\n    while (-1 < *(int32_t *)(device_config_offset + DEVICE_CONFIG_BUSY_OFFSET) << 0x1f));\n  }\n  *(uint32_t *)(device_config_offset + DEVICE_CONFIG_OPTION_OFFSET) = DAT_00080f10;\n  while (-1 < *(int32_t *)(device_config_offset + DEVICE_CONFIG_BUSY_OFFSET) << 0xf));\n  *(uint *)(DAT_00080f0c + 0x30) = *(uint *)(DAT_00080f0c + 0x30) & DEVICE_CONFIG_STATUS_MASK | DEVICE_CONFIG_STATUS_VALUE;\n  while (-1 < *(int32_t *)(device_config_offset + DEVICE_CONFIG_BUSY_OFFSET) << 0x1c));\n  *(uint32_t *)(device_config_offset + DEVICE_CONFIG_IRQ_OFFSET) = DAT_00080f18;\n  while (-1 < *(int32_t *)(device_config_offset + DEVICE_CONFIG_BUSY_OFFSET) << 0x1e));\n  **DAT_00080f20 = DAT_00080f1c;\n  return;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e9c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "initialize_device_00080e9c"
        },
        "FUN_00084464": {
            "renaming": {
                "FUN_00084464": "process_data_00084464",
                "param_1": "output",
                "param_2": "input_data",
                "param_3": "param1",
                "param_4": "param2",
                "sVar1": "data1",
                "uVar4": "data2",
                "puVar2": "temp_pointer",
                "iVar3": "result"
            },
            "code": "void process_data_00084464(int *output, int input_data, int param1, int param2)\n{\n    short data1 = *(short *)(input_data + 0xe);\n    ushort data2 = *(ushort *)(input_data + 0xc);\n    if ((int)((uint)data2 << 0x17) < 0) {\n        FUN_00084700(output, data1, 0, 2);\n        data2 = *(ushort *)(input_data + 0xc);\n    }\n    *(ushort *)(input_data + 0xc) = data2 & 0xefff;\n    undefined *temp_pointer = PTR_DAT_000845fc;\n    *(undefined4 *)temp_pointer = 0;\n    int result = FUN_000811cc((int)data1, param1, param2, param2, unaff_r4, unaff_r5, unaff_r6, in_lr);\n    if ((result == -1) && (*(int *)temp_pointer != 0)) {\n        *output = *(int *)temp_pointer;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084464",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00084464"
        },
        "FUN_000811ae": {
            "renaming": {
                "FUN_000811ae": "returnMaxValue_000811ae"
            },
            "code": "uint32_t returnMaxValue_000811ae(void)\n{\n  return UINT32_MAX;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ae",
            "calling": [],
            "imported": false,
            "current_name": "returnMaxValue_000811ae"
        },
        "FUN_0008118c": {
            "renaming": {
                "FUN_0008118c": "calculate_sum_0008118c",
                "param_1": "new_value",
                "puVar1": "data_pointer",
                "iVar2": "current_sum"
            },
            "code": "int calculate_sum_0008118c(int new_value)\n{\n  undefined *data_pointer;\n  int current_sum;\n  data_pointer = PTR_DAT_000811a0;\n  if (*(int *)PTR_DAT_000811a0 == 0) {\n    *(undefined4 *)PTR_DAT_000811a0 = DAT_000811a4;\n  }\n  current_sum = *(int *)data_pointer;\n  *(int *)data_pointer = new_value + current_sum;\n  return current_sum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008118c",
            "calling": [
                "FUN_00082970"
            ],
            "imported": false,
            "current_name": "calculate_sum_0008118c"
        },
        "FUN_00082a50": {
            "renaming": {
                "FUN_00082a50": "count_bytes_until_null_00082a50",
                "param_1": "input_address",
                "iVar1": "byte_offset",
                "puVar2": "address_pointer",
                "uVar3": "current_word",
                "bVar4": "is_last_byte_zero"
            },
            "code": "int count_bytes_until_null_00082a50(uint32_t input_address){\n    int byte_count = 0;\n    uint32_t *address_pointer = (uint32_t *)(input_address & 0xfffffffc);\n    int byte_offset = -(input_address & 3);\n    uint32_t current_word = *address_pointer;\n    \n    if ((input_address & 3) != 0) {\n        current_word |= 0xffffffffU >> ((byte_offset + 4U & 0x1f) << 3);\n    }\n    \n    while (address_pointer++, (current_word + 0xfefefeff & ~current_word & 0x80808080) == 0) {\n        byte_offset += 4;\n        current_word = *address_pointer;\n    }\n    \n    bool is_last_byte_zero = (current_word & 0xff) == 0;\n    \n    if (!is_last_byte_zero) {\n        byte_offset += 1;\n        is_last_byte_zero = (current_word & 0xff00) == 0;\n    }\n    \n    if (!is_last_byte_zero) {\n        byte_offset += 1;\n        is_last_byte_zero = (current_word & 0xff0000) == 0;\n    }\n    \n    if (!is_last_byte_zero) {\n        byte_offset += 1;\n    }\n    \n    return byte_offset;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082a50",
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "imported": false,
            "current_name": "count_bytes_until_null_00082a50"
        },
        "FUN_0008106e": {
            "renaming": {
                "FUN_0008106e": "set_parameter_0008106e",
                "param_1": "base_address",
                "param_2": "parameter_value"
            },
            "code": "void set_parameter_0008106e(int base_address, int parameter_value)\n{\n    *(int *)(base_address + 0x28) = parameter_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008106e",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "set_parameter_0008106e"
        },
        "FUN_000811c2": {
            "renaming": {
                "FUN_000811c2": "return_zero_000811c2",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int return_zero_000811c2(void)\n{\n  int result = 0;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c2",
            "calling": [
                "FUN_00084700"
            ],
            "imported": false,
            "current_name": "return_zero_000811c2"
        },
        "FUN_000811c6": {
            "renaming": {
                "FUN_000811c6": "returnZero_000811c6"
            },
            "code": "int returnZero_000811c6(void) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c6",
            "calling": [
                "FUN_00084728"
            ],
            "imported": false,
            "current_name": "returnZero_000811c6"
        },
        "FUN_00083d00": {
            "renaming": {
                "FUN_00083d00": "allocate_memory_00083d00",
                "param_1": "base_address",
                "param_2": "size",
                "iVar1": "base_offset",
                "puVar2": "ptr",
                "iVar3": "allocated_size",
                "uVar4": "data_segment_size",
                "iVar5": "offset",
                "DAT_00083d90": "base_address_offset",
                "PTR_DAT_00083d94": "new_data_segment_address_ptr",
                "DAT_00083d98": "data_segment_start_address_ptr"
            },
            "code": "int allocate_memory_00083d00(uint32_t base_address, int size) {\n  int offset = 0;\n  int page_size = 4096;\n  int page_mask = page_size - 1;\n  int data_segment_address = *(int *)(base_address + 8);\n  do_nothing();\n  uint32_t data_segment_size = *(uint32_t *)(data_segment_address + 4) & 0xfffffffc;\n  offset = ((data_segment_size - size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < offset) {\n    int allocated_size = allocate_memory_00083d00(base_address, 0);\n    if (allocated_size == *(int *)(base_address + 8) + data_segment_size) {\n      allocated_size = allocate_memory_00083d00(base_address, -offset);\n      undefined *ptr = PTR_DAT_00083d94;\n      if (allocated_size != -1) {\n        int new_data_segment_address = *(int *)PTR_DAT_00083d94;\n        *(uint32_t *)(data_segment_address + 4) = data_segment_size - offset | 1;\n        *(int *)ptr = new_data_segment_address - offset;\n        do_nothing_2();\n        return 1;\n      }\n      offset = allocate_memory_00083d00(base_address, 0);\n      ptr = PTR_DAT_00083d94;\n      uint32_t new_data_segment_size = offset - *(int *)(base_address + 8);\n      if (0xf < (int)new_data_segment_size) {\n        int data_segment_start_address = *DAT_00083d98;\n        *(uint32_t *)(data_segment_address + 4) = new_data_segment_size | 1;\n        *(int *)ptr = offset - data_segment_start_address;\n      }\n    }\n  }\n  do_nothing_2();\n  return 0;\n}",
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00082970"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d00",
            "calling": [
                "FUN_00083d9c"
            ],
            "imported": false,
            "current_name": "allocate_memory_00083d00"
        }
    },
    "used_tokens": 96560,
    "layers": [
        [
            "FUN_000816a8",
            "FUN_00081042",
            "FUN_00082ac0",
            "FUN_00080ce0",
            "FUN_00081682",
            "FUN_000815fe",
            "FUN_00081d1c",
            "FUN_000847ac",
            "FUN_00080118",
            "FUN_00081c94",
            "FUN_00083b14",
            "FUN_000842a4",
            "FUN_000846a4",
            "FUN_00080f24",
            "FUN_00080e04",
            "FUN_000804a8",
            "FUN_000802da",
            "FUN_00080f9c",
            "FUN_00081210",
            "FUN_00081454",
            "FUN_00084728",
            "FUN_00083c40",
            "FUN_000813e4",
            "FUN_00084290",
            "FUN_000846b4",
            "FUN_000813a8",
            "FUN_00083d9c",
            "FUN_00081bf4",
            "FUN_00081d7c",
            "FUN_00081c5c",
            "FUN_00081388",
            "FUN_00082994",
            "FUN_00080c0c",
            "FUN_00080d2e",
            "FUN_000844c4",
            "FUN_0008189c",
            "FUN_0008234c",
            "FUN_00080a68",
            "FUN_0008165c",
            "FUN_000815f8",
            "FUN_00084384",
            "FUN_00081034",
            "FUN_00083974",
            "FUN_00084700",
            "thunk_FUN_00081714",
            "FUN_00081ca8",
            "FUN_00081318",
            "FUN_00081714",
            "FUN_0008449c",
            "FUN_0008477c",
            "FUN_000801b0",
            "FUN_000813c2",
            "FUN_000814e4",
            "FUN_00080d54",
            "FUN_0008021c",
            "FUN_00081e04",
            "FUN_00084750",
            "FUN_00080ae4",
            "FUN_00081d5c",
            "FUN_00082970",
            "FUN_000811be",
            "FUN_00081c54",
            "FUN_0008163a",
            "FUN_000825a0",
            "FUN_000815d4",
            "FUN_00080164",
            "FUN_000811cc",
            "FUN_000846dc",
            "FUN_00081894",
            "FUN_000845bc",
            "FUN_00082504",
            "FUN_000800f4",
            "FUN_0008378c",
            "FUN_00083adc",
            "FUN_000803d4",
            "FUN_0008043e",
            "FUN_0008160c",
            "FUN_00080e18",
            "FUN_00081184",
            "FUN_00084298",
            "FUN_00081066",
            "FUN_00081cd0",
            "FUN_00081df4",
            "FUN_00080410",
            "FUN_00080da0",
            "FUN_00080258",
            "FUN_00081622",
            "FUN_00082438",
            "FUN_00081508",
            "FUN_00083808",
            "FUN_0008105c",
            "FUN_0008456c",
            "FUN_000811b4",
            "FUN_000816d4",
            "FUN_00080d7a",
            "FUN_00080e9c",
            "FUN_00084464",
            "FUN_000811ae",
            "FUN_0008118c",
            "FUN_00082a50",
            "FUN_0008106e",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_00083d00"
        ]
    ],
    "locked_functions": []
}