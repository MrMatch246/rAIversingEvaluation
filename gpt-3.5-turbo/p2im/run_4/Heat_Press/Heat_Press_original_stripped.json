{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "set_completed_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 setCompletedFlag_000800f4(undefined4 inputValue)\n\n{\n  if ((char)completionFlag == '\\0') {\n    completionFlag._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "set_completed_flag_000800f4",
                "param_1": "inputValue",
                "completed_7857": "completionFlag"
            },
            "calling": [
                "__libc_fini_array"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080148": {
            "entrypoint": "0x00080148",
            "current_name": "execute_software_interrupt_00080148",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t execute_software_interrupt_00080148(uint32_t a0,uint32_t a1,int32_t a2)\n\n{\n  software_interrupt(0x3f);\n  return a0;\n}\n\n",
            "renaming": {
                "FUN_00080148": "execute_software_interrupt_00080148"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008014c": {
            "entrypoint": "0x0008014c",
            "current_name": "afl_call_with_ticks_0008014c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint aflCallWithTicks_0008014c(int ticks)\n\n{\n  uint32_t result;\n  \n  if (noHyperCall == 0) {\n    result = aflCall(1,ticks,0);\n    return result;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0008014c": "afl_call_with_ticks_0008014c",
                "uVar1": "result"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "FUNC_00080164",
            "code": "\n/* DWARF original prototype: void  begin(Modbus * this, long u32speed) */\n\nvoid __thiscall Modbus::FUNC_00080164(Modbus *this,long u32speed)\n\n{\n  int iVar1;\n  \n  this->port = &Serial.super_HardwareSerial;\n  (**(code **)(Serial._0_4_ + 0x18))(&Serial);\n  if (1 < this->u8txenpin) {\n    pinMode((uint)this->u8txenpin,1);\n    digitalWrite((uint)this->u8txenpin,0);\n  }\n  do {\n    iVar1 = (**(code **)(*(int *)this->port + 0xc))();\n  } while (-1 < iVar1);\n  this->u8BufferSize = '\\0';\n  this->u8lastRec = '\\0';\n  this->u16errCnt = 0;\n  this->u16OutCnt = 0;\n  this->u16InCnt = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "FUNC_00080164"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "pinMode",
                "digitalWrite"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000801b0": {
            "entrypoint": "0x000801b0",
            "current_name": "get_rx_buffer_000801b0",
            "code": "\n/* DWARF original prototype: int8_t  getRxBuffer_000801b0(Modbus * modbus) */\n\nint8_t __modbuscall Modbus::getRxBuffer_000801b0(Modbus *modbus)\n\n{\n  bool bufferOverflow;\n  uchar receivedByte;\n  uint8_t bufferSize;\n  int readResult;\n  byte currentBufferSize;\n  \n  if (1 < modbus->u8txenpin) {\n    digitalWrite((uint)modbus->u8txenpin,0);\n  }\n  bufferOverflow = false;\n  modbus->u8BufferSize = '\\0';\n  if (modbus->u8serno < 4) {\n    while (readResult = (**(code **)(*(int *)modbus->port + 8))(), readResult != 0) {\n      currentBufferSize = modbus->u8BufferSize;\n      receivedByte = (**(code **)(*(int *)modbus->port + 0xc))();\n      bufferSize = modbus->u8BufferSize;\n      modbus->au8Buffer[currentBufferSize] = receivedByte;\n      currentBufferSize = bufferSize + 1;\n      modbus->u8BufferSize = currentBufferSize;\n      if (0x3f < currentBufferSize) {\n        bufferOverflow = true;\n      }\n    }\n  }\n  modbus->u16InCnt = modbus->u16InCnt + 1;\n  if (bufferOverflow) {\n    bufferSize = 0xfd;\n    modbus->u16errCnt = modbus->u16errCnt + 1;\n  }\n  else {\n    bufferSize = modbus->u8BufferSize;\n  }\n  return bufferSize;\n}\n\n",
            "renaming": {
                "this": "modbus",
                "bVar1": "bufferOverflow",
                "uVar2": "receivedByte",
                "uVar3": "bufferSize",
                "iVar4": "readResult",
                "bVar5": "currentBufferSize",
                "FUN_000801b0": "get_rx_buffer_000801b0"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008021c": {
            "entrypoint": "0x0008021c",
            "current_name": "calculate_crc_0008021c",
            "code": "\n/* DWARF original prototype: uint16_t  calcCRC(Modbus * this, uint8_t u8length) */\n\nuint16_t __thiscall Modbus::calculateCRC_0008021c(Modbus *this,uint8_t u8length)\n\n{\n  Modbus *pMVar1;\n  uint uVar2;\n  char cVar3;\n  uint uVar4;\n  uint flag;\n  \n  uVar2 = 0xffff;\n  for (pMVar1 = this; ((int)pMVar1 - (int)this & 0xffU) < (uint)u8length;\n      pMVar1 = (Modbus *)((int)&pMVar1->port + 1)) {\n    uVar2 = uVar2 ^ pMVar1->au8Buffer[0];\n    cVar3 = '\\b';\n    do {\n      uVar4 = uVar2 & 1;\n      uVar2 = uVar2 >> 1;\n      if (uVar4 != 0) {\n        uVar2 = uVar2 ^ 0xa001;\n      }\n      cVar3 = cVar3 + -1;\n    } while (cVar3 != '\\0');\n  }\n  return (ushort)(uVar2 << 8) | (ushort)(uVar2 >> 8);\n}\n\n",
            "renaming": {
                "FUN_0008021c": "calculate_crc_0008021c"
            },
            "calling": [
                "sendTxBuffer"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080258": {
            "entrypoint": "0x00080258",
            "current_name": "send_tx_buffer_00080258",
            "code": "\n/* DWARF original prototype: void  sendTxBuffer_00080258(Modbus * modbus) */\n\nvoid __modbuscall Modbus::sendTxBuffer_00080258(Modbus *modbus)\n\n{\n  byte bufferSize;\n  uint16_t crcValue;\n  uint16_t crc16;\n  uint32_t currentTime;\n  int status;\n  \n  bufferSize = modbus->bufferSize;\n  crcValue = calcCRC(modbus,bufferSize);\n  modbus->buffer[bufferSize] = (uchar)(crcValue >> 8);\n  modbus->buffer[bufferSize + 1 & 0xff] = (uchar)crcValue;\n  modbus->bufferSize = bufferSize + 2;\n  if (1 < modbus->txEnablePin) {\n    digitalWrite((uint)modbus->txEnablePin,1);\n  }\n  if (modbus->serialNumber < 4) {\n    (**(code **)(*(int *)modbus->serialPort + 4))(modbus->serialPort,modbus->buffer,modbus->bufferSize);\n  }\n  if (1 < modbus->txEnablePin) {\n    digitalWrite((uint)modbus->txEnablePin,0);\n  }\n  if (modbus->serialNumber < 4) {\n    do {\n      status = (**(code **)(*(int *)modbus->serialPort + 0xc))();\n    } while (-1 < status);\n  }\n  modbus->bufferSize = '\\0';\n  currentTime = millis();\n  modbus->timeoutMillis = currentTime + modbus->timeout;\n  modbus->outputCount = modbus->outputCount + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080258": "send_tx_buffer_00080258",
                "this": "modbus",
                "u8length": "bufferSize",
                "uVar1": "crcValue",
                "u16crc": "crc16",
                "uVar2": "currentTime",
                "iVar3": "status",
                "u8txenpin": "txEnablePin",
                "u8serno": "serialNumber",
                "u8BufferSize": "bufferSize",
                "au8Buffer": "buffer",
                "port": "serialPort",
                "u16timeOut": "timeout",
                "u32timeOut": "timeoutMillis",
                "u16OutCnt": "outputCount"
            },
            "calling": [
                "query"
            ],
            "called": [
                "millis",
                "digitalWrite",
                "calcCRC"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000802da": {
            "entrypoint": "0x000802da",
            "current_name": "process_modbus_request_000802da",
            "code": "\n/* DWARF original prototype: int8_t  query(ModbusProtocol * modbusProtocol, modbus_t modbusTelegram) */\n\nint8_t __modbusProtocolcall ModbusProtocol::processModbusRequest_000802da(ModbusProtocol *modbusProtocol,modbus_t modbusTelegram)\n\n{\n  uchar highByte1;\n  uint lowByte;\n  uint8_t numberOfBytes;\n  byte byteVar;\n  ushort highByte;\n  ushort *pointerVar4;\n  uint8_t var5;\n  ushort var6;\n  ushort *registerData;\n  uint var7;\n  ushort *pointerVar8;\n  uchar localVar1;\n  uchar localVar2;\n  uchar highByte2;\n  \n  localVar1 = (uchar)lowByte;\n  localVar2 = (uchar)(lowByte >> 8);\n  var7 = (uint)highByte;\n  if (modbusProtocol->u8id != '\\0') {\n    return -2;\n  }\n  if (modbusProtocol->u8state != '\\0') {\n    return -1;\n  }\n  if (0xf6 < ((lowByte & 0xff) - 1 & 0xff)) {\n    return -3;\n  }\n  modbusProtocol->au8Buffer[0] = localVar1;\n  modbusProtocol->au8Buffer[1] = localVar2;\n  modbusProtocol->au16regs = registerData;\n  modbusProtocol->au8Buffer[2] = (uchar)(lowByte >> 0x18);\n  modbusProtocol->au8Buffer[3] = (uchar)(lowByte >> 0x10);\n  highByte1 = (uchar)highByte;\n  highByte2 = (uchar)(highByte >> 8);\n  switch(localVar2) {\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n    modbusProtocol->au8Buffer[4] = highByte2;\n    break;\n  case '\\x05':\n    var6 = *registerData;\n    if (var6 != 0) {\n      var6 = 1;\n    }\n    modbusProtocol->au8Buffer[4] = -(char)var6;\n    var7 = 0;\n    break;\n  case '\\x06':\n    modbusProtocol->au8Buffer[4] = (uchar)(*registerData >> 8);\n    var7 = (uint)*registerData;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case '\\x0f':\n    byteVar = (byte)(highByte >> 3) & 0xfe;\n    if ((highByte & 0xf) != 0) {\n      byteVar = byteVar + 1;\n    }\n    modbusProtocol->au8Buffer[5] = highByte1;\n    modbusProtocol->au8Buffer[4] = highByte2;\n    modbusProtocol->au8Buffer[6] = byteVar;\n    var5 = '\\a';\n    goto LAB_0008034a;\n  case '\\x10':\n    modbusProtocol->au8Buffer[4] = highByte2;\n    modbusProtocol->au8Buffer[5] = highByte1;\n    pointerVar4 = registerData + -1;\n    modbusProtocol->au8Buffer[6] = highByte1 * '\\x02';\n    modbusProtocol->u8BufferSize = '\\a';\n    pointerVar8 = pointerVar4 + var7;\n    while (pointerVar4 != pointerVar8) {\n      byteVar = modbusProtocol->u8BufferSize;\n      modbusProtocol->au8Buffer[byteVar] = (uchar)(pointerVar4[1] >> 8);\n      var7 = byteVar + 1 & 0xff;\n      modbusProtocol->u8BufferSize = (uint8_t)var7;\n      pointerVar4 = pointerVar4 + 1;\n      modbusProtocol->au8Buffer[var7] = (uchar)*pointerVar4;\n      modbusProtocol->u8BufferSize = byteVar + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  modbusProtocol->au8Buffer[5] = (uchar)var7;\n  var5 = '\\x06';\nLAB_0008034a:\n  modbusProtocol->u8BufferSize = var5;\nswitchD_0008031e_caseD_7:\n  sendTxBuffer(modbusProtocol);\n  modbusProtocol->u8state = '\\x01';\n  return '\\0';\n}\n\n",
            "renaming": {
                "FUN_000802da": "process_modbus_request_000802da",
                "Modbus": "ModbusProtocol",
                "this": "modbusProtocol",
                "telegram": "modbusTelegram",
                "in_r1": "lowByte",
                "in_r2": "highByte",
                "in_r3": "registerData",
                "uVar1": "highByte1",
                "u8bytesno": "numberOfBytes",
                "bVar3": "byteVar",
                "uVar5": "var5",
                "uVar6": "var6",
                "puVar4": "pointerVar4",
                "uVar7": "var7",
                "puVar8": "pointerVar8",
                "local_1c": "localVar1",
                "local_1b": "localVar2",
                "uVar2": "highByte2"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "sendTxBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803d4": {
            "entrypoint": "0x000803d4",
            "current_name": "validate_modbus_answer_000803d4",
            "code": "\n/* DWARF orcountergcounternal prototype: ucounternt8_t  valcounterdateAnswer(Modbus * modbusInstance) */\n\nucounternt8_t __modbusInstancecall Modbus::validateModbusAnswer_000803d4(Modbus *modbusInstance)\n\n{\n  ucounternt8_t counter;\n  counternt index;\n  \n  counterf ((counternt)((ucounternt)modbusInstance->buffer[1] << 0x18) < 0) {\n    modbusInstance->errorCount = modbusInstance->errorCount + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    counterf (\"\\x01\\x02\\x03\\x04\\x05\\x06\\x0f\\x10\"[index] == modbusInstance->buffer[1]) {\n      return '\\0';\n    }\n    index = index + 1;\n  } whcounterle (index != 8);\n  modbusInstance->errorCount = modbusInstance->errorCount + 1;\n  return '\\x01';\n}\n\n",
            "renaming": {
                "FUN_000803d4": "validate_modbus_answer_000803d4",
                "this": "modbusInstance",
                "i": "counter",
                "iVar1": "index",
                "u16errCnt": "errorCount",
                "au8Buffer": "buffer"
            },
            "calling": [
                "poll"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080410": {
            "entrypoint": "0x00080410",
            "current_name": "extract_registers_from_buffer_00080410",
            "code": "\n/* DWARF original prototype: void  get_FC3(modbusDevice * this) */\n\nvoid __thiscall modbusDevice::extractRegistersFromBuffer_00080410(modbusDevice *this)\n\n{\n  uint16_t registerValue;\n  uint index;\n  byte counter;\n  uint convertedIndex;\n  uint16_t *registerArray;\n  \n  counter = 0;\n  while( true ) {\n    convertedIndex = (uint)counter;\n    counter = counter + 1;\n    index = convertedIndex * 2 + 3 & 0xff;\n    if (this->au8Buffer[2] >> 1 <= convertedIndex) break;\n    registerArray = this->au16regs;\n    registerValue = makeWord(this->au8Buffer[index],this->au8Buffer[index + 1]);\n    registerArray[convertedIndex] = registerValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080410": "extract_registers_from_buffer_00080410",
                "Modbus": "modbusDevice",
                "uVar1": "registerValue",
                "uVar2": "index",
                "bVar3": "counter",
                "uVar4": "convertedIndex",
                "puVar5": "registerArray"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "makeWord"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008043e": {
            "entrypoint": "0x0008043e",
            "current_name": "poll_modbus_0008043e",
            "code": "\n/* DWARF original prototype: int8_t  poll(Modbus * modbus_obj) */\n\nint __modbus_objcall Modbus::poll_modbus_0008043e(Modbus *modbus_obj,pollfd *poll_fds,nfds_t num_fds,int timeout)\n\n{\n  byte byte_var;\n  uint8_t byte_var2;\n  uint8_t u8_exception;\n  uint32_t millis_value;\n  uint8_t u8_current;\n  uint unaff_r6;\n  \n  if (modbus_obj->u8_serno < 4) {\n    byte_var = (**(code **)(*(int *)modbus_obj->modbus_obj.port + 8))();\n    unaff_r6 = (uint)byte_var;\n  }\n  millis_value = millis();\n  if (modbus_obj->modbus_obj.timeout < millis_value) {\n    modbus_obj->modbus_obj.last_error = 0xff;\n    modbus_obj->modbus_obj.state = '\\0';\n    modbus_obj->modbus_obj.err_count = modbus_obj->modbus_obj.err_count + 1;\n  }\n  else if (7 < unaff_r6) {\n    get_rx_buffer(modbus_obj);\n    byte_var2 = validate_answer(modbus_obj);\n    if (byte_var2 == '\\0') {\n      if (modbus_obj->buffer[1] - 3 < 2) {\n        get_FC3(modbus_obj);\n      }\n      modbus_obj->modbus_obj.state = '\\0';\n      byte_var2 = modbus_obj->buffer_size;\n    }\n    else {\n      modbus_obj->modbus_obj.state = '\\0';\n    }\n    goto LAB_000804a2;\n  }\n  byte_var2 = '\\0';\nLAB_000804a2:\n  return (int)(char)byte_var2;\n}\n\n",
            "renaming": {
                "FUN_0008043e": "poll_modbus_0008043e",
                "__fds": "poll_fds",
                "__nfds": "num_fds",
                "__timeout": "timeout",
                "bVar1": "byte_var",
                "uVar2": "byte_var2",
                "u8exception": "u8_exception",
                "uVar3": "millis_value",
                "u8current": "u8_current",
                "u8serno": "u8_serno",
                "this": "modbus_obj",
                "port": "modbus_obj.port",
                "u32timeOut": "modbus_obj.timeout",
                "u8lastError": "modbus_obj.last_error",
                "u8state": "modbus_obj.state",
                "u16errCnt": "modbus_obj.err_count",
                "getRxBuffer": "get_rx_buffer",
                "validateAnswer": "validate_answer",
                "au8Buffer": "buffer",
                "u8BufferSize": "buffer_size"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "getRxBuffer",
                "get_FC3",
                "validateAnswer",
                "millis"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000804a8": {
            "entrypoint": "0x000804a8",
            "current_name": "initialize_modbus_000804a8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeModbus_000804a8(void)\n\n{\n  uint32_t currentTime;\n  \n  pinMode(1,0);\n  pinMode(6,1);\n  pinMode(0,1);\n  pinMode(1,1);\n  digitalWrite(0,0);\n  digitalWrite(1,0);\n  modbusTelegram[1].registerAddress = 0x13;\n  modbusTelegram[1].numCoils = 10;\n  modbusTelegram[1].registerArray = au16data + 0x13;\n  modbusTelegram[0].functionCode = '\\x03';\n  modbusTelegram[2].functionCode = '\\x03';\n  modbusTelegram[2].registerAddress = 0x14;\n  modbusTelegram[3].numCoils = 3;\n  modbusTelegram[0].numCoils = 0x10;\n  modbusTelegram[0].registerArray = au16data;\n  modbusTelegram[1].functionCode = '\\x10';\n  modbusTelegram[2].numCoils = 0xc;\n  modbusTelegram[3].functionCode = '\\x10';\n  modbusTelegram[4].numCoils = 8;\n  modbusTelegram[3].registerAddress = 0x1c;\n  modbusTelegram[3].registerArray = au16data + 0x1c;\n  modbusTelegram[4].slaveID = '\\x02';\n  modbusTelegram[4].functionCode = '\\x02';\n  modbusTelegram[4].registerArray = data8024;\n  modbusTelegram[5].slaveID = '\\x02';\n  modbusTelegram[0].slaveID = '\\x01';\n  modbusTelegram[1].slaveID = '\\x01';\n  modbusTelegram[2].slaveID = '\\x01';\n  modbusTelegram[3].slaveID = '\\x01';\n  modbusTelegram[5].registerAddress = 1;\n  modbusTelegram[5].numCoils = 1;\n  modbusTelegram[0].registerAddress = 0;\n  modbusTelegram[2].registerArray = au16data + 0x14;\n  modbusTelegram[4].registerAddress = 0;\n  modbusTelegram[5].functionCode = '\\x05';\n  modbusTelegram[5].registerArray = data8024 + 1;\n  Modbus::begin(&modbusMaster,0x4b00);\n  modbusMaster.timeout = 2000;\n  waitTime = millis();\n  currentTime = millis();\n  timerPID1 = currentTime + 1000;\n  currentTime = millis();\n  dutyHigh1 = currentTime + 1000;\n  currentTime = millis();\n  dutyLow1 = currentTime + 1000;\n  currentTime = millis();\n  clock = currentTime + 1000;\n  state = '\\0';\n  startForkserver(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000804a8": "initialize_modbus_000804a8",
                "uVar1": "currentTime",
                "telegram": "modbusTelegram",
                "u16RegAdd": "registerAddress",
                "u16CoilsNo": "numCoils",
                "au16reg": "registerArray",
                "u8fct": "functionCode",
                "u8id": "slaveID",
                "master": "modbusMaster",
                "u16timeOut": "timeout",
                "u32wait": "waitTime",
                "tiempopid1": "timerPID1",
                "dutyalto1": "dutyHigh1",
                "dutybajo1": "dutyLow1",
                "reloj": "clock",
                "u8state": "state"
            },
            "calling": [
                "main"
            ],
            "called": [
                "pinMode",
                "millis",
                "startForkserver",
                "digitalWrite",
                "begin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805d0": {
            "entrypoint": "0x000805d0",
            "current_name": "process_modbus_data_000805d0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid processModbusData_000805d0(void)\n\n{\n  modbus_t currentTelegram;\n  modbus_t queryTelegram;\n  modbus_t queryTelegram;\n  modbus_t queryTelegram;\n  uint32_t currentTime;\n  undefined4 tempVar1;\n  float tempVar2;\n  float tempVar3;\n  float tempVar4;\n  int iVar6;\n  pollfd *pollfdArray;\n  nfds_t nfds;\n  int *SJynVariableSTRMYL;\n  uint timeout;\n  undefined4 parameter1;\n  undefined4 parameter2;\n  float *tempVariable1;\n  undefined4 parameter3;\n  ulong *XLGGynVariableYRQF;\n  float *tempVariable2;\n  \n  timeout = (uint)currentState;\n  switch(timeout) {\n  case 0:\n    currentTime = millis();\n    if (waitTime < currentTime) goto LAB_000806ca;\n    break;\n  case 1:\n    Modbus::poll(&master,pollfdArray,nfds,timeout);\n    if (master.currentState == '\\0') {\n      currentTelegram._4_4_ = parameter2;\n      currentTelegram.u8id = (char)parameter1;\n      currentTelegram.u8fct = (char)((uint)parameter1 >> 8);\n      currentTelegram.u16RegAdd = (short)((uint)parameter1 >> 0x10);\n      currentTelegram.au16reg = (uint16_t *)parameter3;\n      Modbus::query(&master,currentTelegram);\n      currentState = currentState + '\\x01';\n      waitTime = millis();\n      temperature1 = (int)data[1];\n      temperature2 = (int)data[2];\n      kpVariable1 = (float)__floatunsisf(data[6]);\n      kiVariable1 = (float)__floatsisf(data[7] / 10);\n      kdVariable1 = (float)__floatunsisf(data[8]);\n      dutyCycle2 = (int)data[12];\n      dutyCycle1 = (int)data[9];\n      minutes = (int)data[14];\n      seconds = (int)data[15];\n    }\n    break;\n  case 2:\n  case 4:\n  case 6:\n  case 8:\n    Modbus::poll(&master,pollfdArray,nfds,timeout);\n    if (master.currentState == '\\0') {\n      currentState = currentState + '\\x01';\n      waitTime = millis();\n    }\n    break;\n  case 3:\n    Modbus::poll(&master,pollfdArray,nfds,timeout);\n    if (master.currentState == '\\0') {\n      queryTelegram._4_4_ = parameter2;\n      queryTelegram.u8id = (char)parameter1;\n      queryTelegram.u8fct = (char)((uint)parameter1 >> 8);\n      queryTelegram.u16RegAdd = (short)((uint)parameter1 >> 0x10);\n      queryTelegram.au16reg = (uint16_t *)parameter3;\n      Modbus::query(&master,queryTelegram);\n      currentState = currentState + '\\x01';\n      waitTime = millis();\n      waitTime = (int)data[30];\n      state = (int)data[29];\n    }\n    break;\n  case 5:\n    Modbus::poll(&master,pollfdArray,nfds,timeout);\n    if (master.currentState == '\\0') {\nLAB_000806c4:\n      queryTelegram._4_4_ = parameter2;\n      queryTelegram.u8id = (char)parameter1;\n      queryTelegram.u8fct = (char)((uint)parameter1 >> 8);\n      queryTelegram.u16RegAdd = (short)((uint)parameter1 >> 0x10);\n      queryTelegram.au16reg = (uint16_t *)parameter3;\n      Modbus::query(&master,queryTelegram);\n      goto LAB_000806ca;\n    }\n    break;\n  case 7:\n    Modbus::poll(&master,pollfdArray,nfds,timeout);\n    if ((terminateCycle == 1) && (master.currentState == '\\0')) {\n      data[29] = 0;\n      terminateCycle = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    currentState = currentState + '\\x01';\n    break;\n  case 9:\n    Modbus::poll(&master,pollfdArray,nfds,timeout);\n    if (master.currentState == '\\0') {\n      queryTelegram._4_4_ = parameter2;\n      queryTelegram.u8id = (char)parameter1;\n      queryTelegram.u8fct = (char)((uint)parameter1 >> 8);\n      queryTelegram.u16RegAdd = (short)((uint)parameter1 >> 0x10);\n      queryTelegram.au16reg = (uint16_t *)parameter3;\n      Modbus::query(&master,queryTelegram);\n      waitTime = millis();\n    }\n    currentState = '\\0';\n  }\n  mmt = minutes - mmResult;\n  if (mmt < 0) {\n    mmt = mmt + 0x3c;\n  }\n  sst = seconds - ssResult;\n  if (sst < 0) {\n    mmt = mmt + -1;\n    sst = sst + 0x3c;\n  }\n  data[27] = (ushort)mmt;\n  data[28] = (ushort)sst;\n  if ((mmt == 0) && (sst == 0)) {\n    terminateCycle = 1;\n    mmResult = sst;\n    ssResult = sst;\n  }\n  if (previousMinutes == minutes) {\n    previousSeconds = 1 - seconds;\n    if (1 < (uint)seconds) {\n      previousSeconds = 0;\n    }\n    if (previousSeconds != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    previousSeconds = seconds;\n    mmResult = 0;\n    ssResult = 0;\n    waitingTime = 0;\n    previousMinutes = minutes;\n  }\n  if (state == 0) {\n    mmResult = state;\n    ssResult = state;\n    SJynVariableSTRMYL = &waitingTime;\nLAB_000808f2:\n    *SJynVariableSTRMYL = ssResult;\n  }\n  else {\n    if (state != 1) goto LAB_000808f4;\n    if ((waitingTime < waitTime) && (currentTime = millis(), clock < currentTime)) {\n      waitingTime = waitingTime + 1;\n      XLGGynVariableYRQF = &clock;\n      currentTime = millis();\n      *XLGGynVariableYRQF = currentTime + 1000;\n    }\n    if (waitingTime < waitTime) goto LAB_000808f4;\n    waitingTime = waitTime + 1;\n    if (mmResult < minutes) {\n      currentTime = millis();\n      if (clock < currentTime) {\n        ssResult = ssResult + 1;\n        currentTime = millis();\n        clock = currentTime + 1000;\n      }\n    }\n    else {\n      if (mmResult != minutes) goto LAB_000808f4;\n      if (seconds < ssResult) {\n        SJynVariableSTRMYL = &mmResult;\n        ssResult = 0;\n        goto LAB_000808f2;\n      }\n      currentTime = millis();\n      if (clock < currentTime) {\n        ssResult = ssResult + 1;\n        currentTime = millis();\n        clock = currentTime + 1000;\n      }\n    }\n    if (0x3b < ssResult) {\n      ssResult = 0;\n      mmResult = mmResult + 1;\n    }\n  }\nLAB_000808f4:\n  currentTime = millis();\n  if (pid1Time < currentTime) {\n    tempVar1 = __floatsisf(temperature1);\n    tempVar2 = (float)__aeabi_fsub(tempVar1,temperatura1);\n    tempVariable1 = &epVariable1;\n    e1 = tempVar2;\n    tempVar4 = epVariable1;\n    tempVar1 = __addsf3(tempVar2,epVariable1);\n    tempVar1 = __aeabi_fmul(tempVar1,kiVariable1);\n    tempVar3 = (float)__addsf3(tempVar1,kipVariable1);\n    kiVariable1 = tempVar3;\n    tempVar1 = __aeabi_fsub(tempVar2,tempVar4);\n    tempVar1 = __aeabi_fmul(tempVar1,kdVariable1);\n    tempVariable2 = &kdpVariable1;\n    tempVar4 = (float)__aeabi_fsub(tempVar1,kdpVariable1);\n    kdVariable1 = tempVar4;\n    tempVar1 = __aeabi_fmul(tempVar2,kpVariable1);\n    tempVar1 = __addsf3(tempVar1,tempVar3);\n    __addsf3(tempVar1,tempVar4);\n    pid1 = __aeabi_f2iz();\n    ynVariable = (float)__floatsisf();\n    *tempVariable1 = tempVar2;\n    increment = 0;\n    kipVariable1 = tempVar3;\n    *tempVariable2 = tempVar4;\n    currentTime = millis();\n    pid1Time = currentTime + dutyCycle1;\n  }\n  tempVar4 = (float)__floatsisf(dutyCycle1);\n  iVar6 = __aeabi_fcmpge(ynVariable,tempVar4);\n  if (iVar6 != 0) {\n    ynVariable = tempVar4;\n  }\n  iVar6 = __aeabi_fcmple(ynVariable,0);\n  if (iVar6 != 0) {\n    ynVariable = 0.0;\n  }\n  data[21] = __fixunssfsi(ynVariable);\n  increment = increment + 1;\n  input1 = data8024[0] & 1 ^ 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805d0": "process_modbus_data_000805d0",
                "telegram": "currentTelegram",
                "telegram_00": "queryTelegram",
                "telegram_01": "queryTelegram",
                "telegram_02": "queryTelegram",
                "uVar1": "currentTime",
                "uVar2": "tempVar1",
                "fVar3": "tempVar2",
                "fVar4": "tempVar3",
                "fVar5": "tempVar4",
                "in_r1": "pollfdArray",
                "in_r2": "nfds",
                "piVar7": "waitVariable",
                "__timeout": "timeout",
                "in_stack_ffffffc8": "parameter1",
                "in_stack_ffffffcc": "parameter2",
                "pfVar8": "tempVariable1",
                "in_stack_ffffffd0": "parameter3",
                "puVar9": "timeVariable",
                "pfVar10": "tempVariable2",
                "u8state": "currentState",
                "u32wait": "waitTime",
                "tempe_z1": "temperature1",
                "tempe_z2": "temperature2",
                "kpa1": "kpVariable1",
                "kia1": "kiVariable1",
                "kda1": "kdVariable1",
                "duty2": "dutyCycle2",
                "duty1": "dutyCycle1",
                "minutos": "minutes",
                "segundos": "seconds",
                "tiempo_espera": "waitTime",
                "estado": "state",
                "terminar_ciclo": "terminateCycle",
                "au16data": "data",
                "mmres": "mmResult",
                "ssres": "ssResult",
                "minutosp": "previousMinutes",
                "segundosp": "previousSeconds",
                "espera_plancha": "waitingTime",
                "reloj": "clock",
                "tiempopid1": "pid1Time",
                "ep1": "epVariable1",
                "kip1": "kipVariable1",
                "kdp1": "kdpVariable1",
                "incre": "increment",
                "YN": "ynVariable",
                "in1": "input1"
            },
            "calling": [
                "main"
            ],
            "called": [
                "__floatunsisf",
                "__aeabi_fmul",
                "__aeabi_fcmple",
                "__addsf3",
                "__floatsisf",
                "query",
                "__aeabi_fsub",
                "__aeabi_fcmpge",
                "poll",
                "millis",
                "__fixunssfsi",
                "__aeabi_f2iz"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a68": {
            "entrypoint": "0x00080a68",
            "current_name": "initialize_master_device_00080a68",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeMasterDevice_00080a68(void)\n\n{\n  String::String(&emptyString,\"\");\n  __aeabi_atexit(&emptyString,0x815ff,&__dso_handle);\n  deviceInfo.u8id = '\\0';\n  deviceInfo.u8serno = '\\0';\n  deviceInfo.u8txenpin = '\\x06';\n  deviceInfo.u16timeOut = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a68": "initialize_master_device_00080a68",
                "RxString": "emptyString",
                "master": "deviceInfo"
            },
            "calling": [],
            "called": [
                "__aeabi_atexit",
                "String"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "FUNC_00080aa8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aac": {
            "entrypoint": "0x00080aac",
            "current_name": "handle_uart_irq_00080aac",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleUartIrq_00080aac(void)\n\n{\n  UARTClass::IrqHandler(&uartInstance);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aac": "handle_uart_irq_00080aac",
                "Serial": "uartInstance"
            },
            "calling": [],
            "called": [
                "IrqHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ab8": {
            "entrypoint": "0x00080ab8",
            "current_name": "FUNC_00080ab8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aba": {
            "entrypoint": "0x00080aba",
            "current_name": "FUNC_00080aba",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080abc": {
            "entrypoint": "0x00080abc",
            "current_name": "FUNC_00080abc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ac0": {
            "entrypoint": "0x00080ac0",
            "current_name": "handle_serial_data_00080ac0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleSerialData_00080ac0(void)\n\n{\n  processUARTInterrupt(&serial);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ac0": "handle_serial_data_00080ac0",
                "Serial1.super_UARTClass": "serial",
                "UARTClass::IrqHandler": "processUARTInterrupt"
            },
            "calling": [],
            "called": [
                "IrqHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080acc": {
            "entrypoint": "0x00080acc",
            "current_name": "handle_serial_interrupt_00080acc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleSerialInterrupt_00080acc(void)\n\n{\n  handleInterrupt(&Serial2.super_UARTClass);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080acc": "handle_serial_interrupt_00080acc",
                "UARTClass::IrqHandler": "handleInterrupt"
            },
            "calling": [],
            "called": [
                "IrqHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ad8": {
            "entrypoint": "0x00080ad8",
            "current_name": "handle_serial3_interrupt_00080ad8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleSerial3Interrupt_00080ad8(void)\n\n{\n  UARTClass::IrqHandler(&ptr_serial3_superUARTClass);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ad8": "handle_serial3_interrupt_00080ad8",
                "Serial3.super_UARTClass": "ptr_serial3_superUARTClass"
            },
            "calling": [],
            "called": [
                "IrqHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ae4": {
            "entrypoint": "0x00080ae4",
            "current_name": "initialize_system_00080ae4",
            "code": "\n\n\nint initializeSystem_00080ae4(EVP_PKEY_CTX *context)\n\n{\n  int returnValue;\n  uint32_t pinIndex;\n  uint32_t nextPinIndex;\n  \n  initializeSystem_00080ae4Core();\n  _DAT_e000e014 = systemClock / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  initializeLibcArray();\n  pinIndex = 0;\n  do {\n    nextPinIndex = pinIndex + 1;\n    setDigitalOutput(pinIndex,0);\n    pinIndex = nextPinIndex;\n  } while (nextPinIndex != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  configurePIO(&DAT_400e0e00,1,0x300,0);\n  setDigitalOutput(0,1);\n  configurePIO(&DAT_400e0e00,1,0xc00,0);\n  configurePIO(&DAT_400e0e00,1,0x3000,0);\n  configurePIO(&DAT_400e1400,2,0x30,0);\n  configurePIO(&DAT_400e1000,1,0xc00,0);\n  configurePIO(&DAT_400e0e00,1,3,0);\n  configurePIO(&DAT_400e1000,1,0xc000,0);\n  enablePeripheralClock(0x25);\n  initializeADC(0x400c0000,systemClock,20000000,0xc);\n  configureADCTiming(0x400c0000,0,0x300000,1);\n  configureADCTrigger(0x400c0000,0,0);\n  disableADCInterrupt(0x400c0000,0xffffffff);\n  returnValue = disableAllADCChannels(0x400c0000);\n  initializeAnalogOutput();\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00080ae4": "initialize_system_00080ae4",
                "ctx": "context",
                "ulPin": "pinIndex",
                "uVar2": "nextPinIndex",
                "SystemInit": "initializeSystemCore",
                "SystemCoreClock": "systemClock",
                "__libc_init_array": "initializeLibcArray",
                "digitalWrite": "setDigitalOutput",
                "PIO_Configure": "configurePIO",
                "pmc_enable_periph_clk": "enablePeripheralClock",
                "adc_init": "initializeADC",
                "adc_configure_timing": "configureADCTiming",
                "adc_configure_trigger": "configureADCTrigger",
                "adc_disable_interrupt": "disableADCInterrupt",
                "adc_disable_all_channel": "disableAllADCChannels",
                "analogOutputInit": "initializeAnalogOutput",
                "iVar1": "returnValue"
            },
            "calling": [
                "main"
            ],
            "called": [
                "PIO_Configure",
                "SystemInit",
                "adc_configure_trigger",
                "adc_disable_interrupt",
                "analogOutputInit",
                "adc_configure_timing",
                "digitalWrite",
                "__libc_init_array",
                "pmc_enable_periph_clk",
                "adc_disable_all_channel",
                "adc_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "entrypoint": "0x00080c0c",
            "current_name": "initialize_serial_communication_00080c0c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeSerialCommunication_00080c0c(void)\n\n{\n  RingBuffer::RingBuffer(&receiveBuffer1);\n  RingBuffer::RingBuffer(&transmitBuffer1);\n  UARTClass::UARTClass(&USART_0,(UART_0 *)0x400e0800,UART0_Interrupt,8,&receiveBuffer1,&transmitBuffer1);\n  RingBuffer::RingBuffer(&receiveBuffer2);\n  RingBuffer::RingBuffer(&receiveBuffer3);\n  RingBuffer::RingBuffer(&receiveBuffer4);\n  RingBuffer::RingBuffer(&transmitBuffer2);\n  RingBuffer::RingBuffer(&transmitBuffer3);\n  RingBuffer::RingBuffer(&transmitBuffer4);\n  USARTClass::USARTClass(&USART_1,(USART_1 *)0x40098000,USART0_Interrupt,0x11,&receiveBuffer2,&transmitBuffer2);\n  USARTClass::USARTClass(&USART_2,(USART_1 *)0x4009c000,USART1_Interrupt,0x12,&receiveBuffer3,&transmitBuffer3);\n  USARTClass::USARTClass(&USART_3,(USART_1 *)0x400a4000,USART3_Interrupt,0x14,&receiveBuffer4,&transmitBuffer4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080c0c": "initialize_serial_communication_00080c0c",
                "Serial": "USART_0",
                "Uart": "UART_0",
                "UART_IRQn": "UART0_Interrupt",
                "rx_buffer1": "receiveBuffer1",
                "tx_buffer1": "transmitBuffer1",
                "rx_buffer2": "receiveBuffer2",
                "rx_buffer3": "receiveBuffer3",
                "rx_buffer4": "receiveBuffer4",
                "tx_buffer2": "transmitBuffer2",
                "tx_buffer3": "transmitBuffer3",
                "tx_buffer4": "transmitBuffer4",
                "Serial1": "USART_1",
                "Usart": "USART_1",
                "USART0_IRQn": "USART0_Interrupt",
                "Serial2": "USART_2",
                "USART1_IRQn": "USART1_Interrupt",
                "Serial3": "USART_3",
                "USART3_IRQn": "USART3_Interrupt"
            },
            "calling": [],
            "called": [
                "UARTClass",
                "RingBuffer",
                "USARTClass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "entrypoint": "0x00080ce0",
            "current_name": "process_serial_events_00080ce0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid processSerialEvents_00080ce0(void)\n\n{\n  int availableCount;\n  \n  availableCount = SerialInterface::available(&SerialInterface);\n  if (availableCount != 0) {\n    processSerialEvent();\n  }\n  availableCount = SerialInterface::available(&Serial1Interface);\n  if (availableCount != 0) {\n    processSerialEvent1();\n  }\n  availableCount = SerialInterface::available(&Serial2Interface);\n  if (availableCount != 0) {\n    processSerialEvent2();\n  }\n  availableCount = SerialInterface::available(&Serial3Interface);\n  if (availableCount != 0) {\n    processSerialEvent3();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ce0": "process_serial_events_00080ce0",
                "iVar1": "availableCount",
                "UARTClass": "SerialInterface",
                "&Serial": "&SerialInterface",
                "&Serial1.super_UARTClass": "&Serial1Interface",
                "&Serial2.super_UARTClass": "&Serial2Interface",
                "&Serial3.super_UARTClass": "&Serial3Interface",
                "serialEvent": "processSerialEvent",
                "serialEvent1": "processSerialEvent1",
                "serialEvent2": "processSerialEvent2",
                "serialEvent3": "processSerialEvent3"
            },
            "calling": [
                "main"
            ],
            "called": [
                "serialEvent2",
                "serialEvent3",
                "serialEvent1",
                "serialEvent",
                "available"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d24": {
            "entrypoint": "0x00080d24",
            "current_name": "update_memory_00080d24",
            "code": "\nvoid updateMemory_00080d24(int memoryAddress,undefined4 value,int condition)\n\n{\n  if (condition != 0) {\n    *(undefined4 *)(memoryAddress + 100) = value;\n    return;\n  }\n  *(undefined4 *)(memoryAddress + 0x60) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d24": "update_memory_00080d24",
                "param_1": "memoryAddress",
                "param_2": "value",
                "param_3": "condition"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "entrypoint": "0x00080d2e",
            "current_name": "update_memory_value_00080d2e",
            "code": "\nvoid updateMemoryValue_00080d2e(int baseAddress,undefined4 flag,uint value)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(baseAddress + 0x44) = value;\n  switch(flag) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~value;\n    break;\n  case 2:\n    updatedValue = *(uint *)(baseAddress + 0x70) | value;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(baseAddress + 0x70) = updatedValue;\nswitchD_00080d34_caseD_6:\n  *(uint *)(baseAddress + 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d2e": "update_memory_value_00080d2e",
                "param_1": "baseAddress",
                "param_2": "flag",
                "param_3": "value",
                "uVar1": "updatedValue"
            },
            "calling": [
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d54": {
            "entrypoint": "0x00080d54",
            "current_name": "update_parameters_00080d54",
            "code": "\nvoid updateParameters_00080d54(undefined4 *parameterArray,undefined4 newValue,uint flags)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(flags << 0x1f) < 0;\n  parameterArray[0x11] = newValue;\n  if (isNegative) {\n    parameterArray[0x19] = newValue;\n  }\n  if (!isNegative) {\n    parameterArray[0x18] = newValue;\n  }\n  isNegative = (flags & 10) != 0;\n  if (isNegative) {\n    parameterArray[8] = newValue;\n  }\n  if (!isNegative) {\n    parameterArray[9] = newValue;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    parameterArray[0x20] = newValue;\n  }\n  parameterArray[5] = newValue;\n  *parameterArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d54": "update_parameters_00080d54",
                "param_1": "parameterArray",
                "param_2": "newValue",
                "param_3": "flags",
                "bVar1": "isNegative"
            },
            "calling": [
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "entrypoint": "0x00080d7a",
            "current_name": "set_values_in_array_00080d7a",
            "code": "\nvoid setValuesInArray_00080d7a(undefined4 *array,undefined4 value,int condition1,int condition2,int condition3)\n\n{\n  array[0x11] = value;\n  if (condition3 == 0) {\n    array[0x18] = value;\n  }\n  else {\n    array[0x19] = value;\n  }\n  if (condition2 == 0) {\n    array[0x15] = value;\n  }\n  else {\n    array[0x14] = value;\n  }\n  if (condition1 == 0) {\n    array[0xd] = value;\n  }\n  else {\n    array[0xc] = value;\n  }\n  array[4] = value;\n  *array = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d7a": "set_values_in_array_00080d7a",
                "param_1": "array",
                "param_2": "value",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3"
            },
            "calling": [
                "PIO_Configure",
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080da0": {
            "entrypoint": "0x00080da0",
            "current_name": "configure_pio_00080da0",
            "code": "\nundefined4 configurePIO_00080da0(int pioBaseAddress,int operationCode,undefined4 peripheral,uint flags)\n\n{\n  bool isNegative;\n  \n  switch(operationCode) {\n  case 1:\n  case 2:\n    PIO_SetPeripheral(pioBaseAddress,operationCode,peripheral);\n    isNegative = (int)(flags << 0x1f) < 0;\n    *(undefined4 *)(pioBaseAddress + 0x44) = peripheral;\n    if (isNegative) {\n      *(undefined4 *)(pioBaseAddress + 100) = peripheral;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(pioBaseAddress + 0x60) = peripheral;\n    }\n    break;\n  case 3:\n    PIO_SetInput(pioBaseAddress,peripheral,flags,0x80d55,pioBaseAddress);\n    break;\n  case 4:\n  case 5:\n    PIO_SetOutput(pioBaseAddress,peripheral,operationCode == 5,(flags << 0x1d) >> 0x1f,flags & 1,operationCode,peripheral\n                 );\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080da0": "configure_pio_00080da0",
                "param_1": "pioBaseAddress",
                "param_2": "operationCode",
                "param_3": "peripheral",
                "param_4": "flags",
                "bVar1": "isNegative"
            },
            "calling": [
                "pinMode",
                "init"
            ],
            "called": [
                "PIO_SetOutput",
                "PIO_SetInput",
                "PIO_SetPeripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e04": {
            "entrypoint": "0x00080e04",
            "current_name": "check_intersection_00080e04",
            "code": "\nuint checkIntersection_00080e04(int pointer1,uint value2)\n\n{\n  uint result;\n  \n  result = *(uint *)(pointer1 + 8) & value2;\n  if (result != 0) {\n    if ((value2 & *(uint *)(pointer1 + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080e04": "check_intersection_00080e04",
                "param_1": "pointer1",
                "param_2": "value2",
                "uVar1": "result"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e18": {
            "entrypoint": "0x00080e18",
            "current_name": "check_and_set_bit_00080e18",
            "code": "\n\n\nundefined4 checkAndSetBit_00080e18(uint value)\n\n{\n  uint bitMask;\n  \n  if (value < 0x2d) {\n    if (value < 0x20) {\n      bitMask = 1 << (value & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (value - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e18": "check_and_set_bit_00080e18",
                "param_1": "value",
                "uVar1": "bitMask"
            },
            "calling": [
                "pinMode",
                "init",
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e5c": {
            "entrypoint": "0x00080e5c",
            "current_name": "check_and_set_bit_00080e5c",
            "code": "\n\n\nundefined4 checkAndSetBit_00080e5c(uint input)\n\n{\n  uint bitMask;\n  uint bitCheck;\n  \n  if (input < 0x2d) {\n    if (input < 0x20) {\n      bitMask = 1 << (input & 0xff);\n      bitCheck = _DAT_400e0618 & bitMask;\n      if (bitCheck == bitMask) {\n        _DAT_400e0614 = bitCheck;\n      }\n    }\n    else {\n      bitMask = 1 << (input - 0x20 & 0xff);\n      bitCheck = _DAT_400e0708 & bitMask;\n      if (bitCheck == bitMask) {\n        _DAT_400e0704 = bitCheck;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e5c": "check_and_set_bit_00080e5c",
                "param_1": "input",
                "uVar1": "bitMask",
                "uVar2": "bitCheck"
            },
            "calling": [
                "pinMode",
                "end"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "entrypoint": "0x00080e9c",
            "current_name": "initialize_system_00080e9c",
            "code": "\n\n\nvoid initializeSystem_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  systemClock = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e9c": "initialize_system_00080e9c",
                "SystemCoreClock": "systemClock"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f24": {
            "entrypoint": "0x00080f24",
            "current_name": "copy_memory_and_initialize_00080f24",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid copyMemoryAndInitialize_00080f24(void)\n\n{\n  int index;\n  undefined4 *pointer;\n  \n  for (index = 0; sourceAddress + index < targetAddress; index = index + 4) {\n    *(undefined4 *)(sourceAddress + index) = *(undefined4 *)(sourceData + index);\n  }\n  for (pointer = targetAddress; pointer < targetData; pointer = pointer + 1) {\n    *pointer = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  main();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080f24": "copy_memory_and_initialize_00080f24",
                "iVar1": "index",
                "puVar2": "pointer",
                "banzai": "sourceAddress",
                "&completed_7857": "targetAddress",
                "&_etext": "sourceData",
                "&_ebss": "targetData"
            },
            "calling": [],
            "called": [
                "banzai",
                "main"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "entrypoint": "0x00080f9c",
            "current_name": "calculate_configuration_value_00080f9c",
            "code": "\nundefined4 calculateConfigurationValue_00080f9c(undefined4 *configValue,uint inputValue,int multiplier,int threshold)\n\n{\n  uint quotient;\n  uint index;\n  uint thresholdValues [16];\n  \n  thresholdValues[0] = 0;\n  thresholdValues[1] = 8;\n  thresholdValues[2] = 0x10;\n  thresholdValues[3] = 0x18;\n  thresholdValues[4] = 0x40;\n  thresholdValues[5] = 0x50;\n  thresholdValues[6] = 0x60;\n  thresholdValues[7] = 0x70;\n  thresholdValues[8] = 0x200;\n  thresholdValues[9] = 0x240;\n  thresholdValues[10] = 0x280;\n  thresholdValues[11] = 0x2c0;\n  thresholdValues[12] = 0x300;\n  thresholdValues[13] = 0x340;\n  thresholdValues[14] = 0x380;\n  thresholdValues[15] = 0x3c0;\n  *configValue = 1;\n  configValue[1] = 0;\n  configValue[0x48] = 0x202;\n  configValue[0x41] = 0;\n  configValue[0x45] = 0;\n  quotient = inputValue / (uint)(multiplier * 2);\n  if (inputValue == multiplier * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(threshold * (int)(((ulonglong)inputValue / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        thresholdValues[index]) {\n      configValue[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | configValue[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080f9c": "calculate_configuration_value_00080f9c",
                "param_1": "configValue",
                "param_2": "inputValue",
                "param_3": "multiplier",
                "param_4": "threshold",
                "local_58": "thresholdValues",
                "uVar1": "quotient",
                "uVar2": "index"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081034": {
            "entrypoint": "0x00081034",
            "current_name": "update_config_00081034",
            "code": "\nvoid updateConfig_00081034(int configPtr,uint value,uint flag)\n\n{\n  *(uint *)(configPtr + 4) = value | *(uint *)(configPtr + 4) | (flag & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081034": "update_config_00081034",
                "param_1": "configPtr",
                "param_2": "value",
                "param_3": "flag"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081042": {
            "entrypoint": "0x00081042",
            "current_name": "set_flags_00081042",
            "code": "\nvoid set_flags_00081042(int data_ptr,uint input_value1,uint input_value2,uint input_value3)\n\n{\n  *(uint *)(data_ptr + 4) =\n       input_value2 | *(uint *)(data_ptr + 4) | (input_value1 & 0xf) << 0x18 | (input_value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081042": "set_flags_00081042",
                "param_1": "data_ptr",
                "param_2": "input_value1",
                "param_3": "input_value2",
                "param_4": "input_value3"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008105c": {
            "entrypoint": "0x0008105c",
            "current_name": "set_bit_at_position_0008105c",
            "code": "\nvoid setBitAtPosition_0008105c(int baseAddress,uint bitPosition)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008105c": "set_bit_at_position_0008105c",
                "param_1": "baseAddress",
                "param_2": "bitPosition"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081066": {
            "entrypoint": "0x00081066",
            "current_name": "initialize_value_00081066",
            "code": "\nvoid initializeValue_00081066(int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081066": "initialize_value_00081066",
                "param_1": "memoryAddress"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008106e": {
            "entrypoint": "0x0008106e",
            "current_name": "update_param_value_0008106e",
            "code": "\nvoid updateParamValue_0008106e(int paramBaseAddress,undefined4 newValue)\n\n{\n  *(undefined4 *)(paramBaseAddress + 0x28) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008106e": "update_param_value_0008106e",
                "param_1": "paramBaseAddress",
                "param_2": "newValue"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081074": {
            "entrypoint": "0x00081074",
            "current_name": "execute_isr_00081074",
            "code": "\nvoid execute_isr_00081074(void)\n\n{\n  if (isr_function != (code *)0x0) {\n    (*isr_function)();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081074": "execute_isr_00081074",
                "gpf_isr": "isr_function"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081084": {
            "entrypoint": "0x00081084",
            "current_name": "check_interrupts_00081084",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid checkInterrupts_00081084(void)\n\n{\n  uint8_t leading_zeros;\n  uint32_t interruptStatus;\n  uint leadingZeroes;\n  \n  for (interruptStatus = _DAT_400e0e4c; (uint)LZCOUNT(interruptStatus) < 0x20; interruptStatus = interruptStatus & ~(1 << leadingZeroes)) {\n    leadingZeroes = 0x1fU - LZCOUNT(interruptStatus) & 0xff;\n    if (interruptCallbacks[leadingZeroes] != (interruptCB)0x0) {\n      (*interruptCallbacks[leadingZeroes])();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081084": "check_interrupts_00081084",
                "isr": "interruptStatus",
                "uVar1": "leadingZeroes",
                "callbacksPioA": "interruptCallbacks"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810bc": {
            "entrypoint": "0x000810bc",
            "current_name": "process_interrupts_000810bc",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid processInterrupts_000810bc(void)\n\n{\n  uint8_t leadingZeros;\n  uint32_t interruptStatus;\n  uint shiftAmount;\n  \n  for (interruptStatus = _DAT_400e104c; (uint)LZCOUNT(interruptStatus) < 0x20; interruptStatus = interruptStatus & ~(1 << shiftAmount)) {\n    shiftAmount = 0x1fU - LZCOUNT(interruptStatus) & 0xff;\n    if (callbacksPioB[shiftAmount] != (interruptCB)0x0) {\n      (*callbacksPioB[shiftAmount])();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810bc": "process_interrupts_000810bc",
                "isr": "interruptStatus",
                "leading_zeros": "leadingZeros",
                "uVar1": "shiftAmount"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810f4": {
            "entrypoint": "0x000810f4",
            "current_name": "process_interrupts_000810f4",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid processInterrupts_000810f4(void)\n\n{\n  uint8_t numLeadingZeros;\n  uint32_t interruptStatusRegister;\n  uint shiftAmount;\n  \n  for (interruptStatusRegister = _DAT_400e124c; (uint)LZCOUNT(interruptStatusRegister) < 0x20; interruptStatusRegister = interruptStatusRegister & ~(1 << shiftAmount)) {\n    shiftAmount = 0x1fU - LZCOUNT(interruptStatusRegister) & 0xff;\n    if (callbacksPioC[shiftAmount] != (interruptCB)0x0) {\n      (*callbacksPioC[shiftAmount])();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810f4": "process_interrupts_000810f4",
                "leading_zeros": "numLeadingZeros",
                "isr": "interruptStatusRegister",
                "uVar1": "shiftAmount"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008112c": {
            "entrypoint": "0x0008112c",
            "current_name": "process_isr_0008112c",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid process_ISR_0008112c(void)\n\n{\n  uint8_t numLeadingZeros;\n  uint32_t interruptStatus;\n  uint shiftAmount;\n  \n  for (interruptStatus = _DAT_400e144c; (uint)LZCOUNT(interruptStatus) < 0x20; interruptStatus = interruptStatus & ~(1 << shiftAmount)) {\n    shiftAmount = 0x1fU - LZCOUNT(interruptStatus) & 0xff;\n    if (callbacksPioD[shiftAmount] != (interruptCB)0x0) {\n      (*callbacksPioD[shiftAmount])();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008112c": "process_isr_0008112c",
                "isr": "interruptStatus",
                "leading_zeros": "numLeadingZeros",
                "uVar1": "shiftAmount"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081164": {
            "entrypoint": "0x00081164",
            "current_name": "infinite_loop_00081164",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_00081164(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00081164": "infinite_loop_00081164"
            },
            "calling": [
                "__halt"
            ],
            "called": [
                "__halt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081166": {
            "entrypoint": "0x00081166",
            "current_name": "infinite_loop_00081166",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_00081166(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00081166": "infinite_loop_00081166"
            },
            "calling": [],
            "called": [
                "__halt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008116a": {
            "entrypoint": "0x0008116a",
            "current_name": "infinite_loop_0008116a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_0008116a(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0008116a": "infinite_loop_0008116a"
            },
            "calling": [],
            "called": [
                "__halt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008116e": {
            "entrypoint": "0x0008116e",
            "current_name": "reset_and_increment_time_tick_0008116e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid resetAndIncrementTimeTick_0008116e(void)\n\n{\n  int isValid;\n  \n  isValid = checkValidity();\n  if (isValid == 0) {\n    resetTick();\n    incrementTimeTick();\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008116e": "reset_and_increment_time_tick_0008116e",
                "iVar1": "isValid",
                "__false": "checkValidity",
                "tickReset": "resetTick",
                "TimeTick_Increment": "incrementTimeTick"
            },
            "calling": [],
            "called": [
                "TimeTick_Increment",
                "__false",
                "tickReset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081184": {
            "entrypoint": "0x00081184",
            "current_name": "get_default_value_00081184",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint get_default_value_00081184(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081184": "get_default_value_00081184"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081188": {
            "entrypoint": "0x00081188",
            "current_name": "infinite_loop_00081188",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_00081188(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00081188": "infinite_loop_00081188"
            },
            "calling": [
                "__halt",
                "SVC_Handler",
                "PendSV_Handler"
            ],
            "called": [
                "__halt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008118c": {
            "entrypoint": "0x0008118c",
            "current_name": "allocate_memory_block_0008118c",
            "code": "\nvoid * allocate_memory_block_0008118c(intptr_t size)\n\n{\n  uchar *memory_block;\n  uchar *previous_heap;\n  \n  if (_sbrk::heap == (uchar *)0x0) {\n    _sbrk::heap = &_ebss;\n  }\n  memory_block = _sbrk::heap;\n  _sbrk::heap = _sbrk::heap + size;\n  return memory_block;\n}\n\n",
            "renaming": {
                "FUN_0008118c": "allocate_memory_block_0008118c",
                "__delta": "size",
                "puVar1": "memory_block",
                "prev_heap": "previous_heap"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811a8": {
            "entrypoint": "0x000811a8",
            "current_name": "copy_string_000811a8",
            "code": "\nint copyString_000811a8(char *source,char *destination)\n\n{\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_000811a8": "copy_string_000811a8",
                "__from": "source",
                "__to": "destination"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ae": {
            "entrypoint": "0x000811ae",
            "current_name": "check_file_status_000811ae",
            "code": "\nint checkFileStatus_000811ae(int fileDescriptor)\n\n{\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_000811ae": "check_file_status_000811ae",
                "__fd": "fileDescriptor"
            },
            "calling": [
                "_close_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b4": {
            "entrypoint": "0x000811b4",
            "current_name": "set_file_device_flags_000811b4",
            "code": "\nint setFileDeviceFlags_000811b4(int fileDescriptor,stat *fileStatBuffer)\n\n{\n  *(undefined4 *)((int)&fileStatBuffer->st_dev + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811b4": "set_file_device_flags_000811b4",
                "__fd": "fileDescriptor",
                "__buf": "fileStatBuffer"
            },
            "calling": [
                "_fstat_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811be": {
            "entrypoint": "0x000811be",
            "current_name": "check_file_descriptor_validity_000811be",
            "code": "\nint checkFileDescriptorValidity_000811be(int fileDescriptor)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000811be": "check_file_descriptor_validity_000811be",
                "__fd": "fileDescriptor"
            },
            "calling": [
                "_isatty_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c2": {
            "entrypoint": "0x000811c2",
            "current_name": "get_seek_offset_000811c2",
            "code": "\n__off_t getSeekOffset_000811c2(int fileDescriptor,__off_t offset,int origin)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c2": "get_seek_offset_000811c2",
                "__fd": "fileDescriptor",
                "__offset": "offset",
                "__whence": "origin"
            },
            "calling": [
                "_lseek_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c6": {
            "entrypoint": "0x000811c6",
            "current_name": "check_file_000811c6",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint check_file_000811c6(int file_descriptor,char *buffer_ptr,int buffer_len)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c6": "check_file_000811c6",
                "file_UNUSED": "file_descriptor",
                "ptr_UNUSED": "buffer_ptr",
                "len_UNUSED": "buffer_len"
            },
            "calling": [
                "_read_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811cc": {
            "entrypoint": "0x000811cc",
            "current_name": "copy_bytes_to_data_000811cc",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nint copyBytesToData_000811cc(int file,char *source,int length)\n\n{\n  int i;\n  \n  for (i = 0; i < length; i = i + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)(byte)source[i];\n  }\n  return length & ~(length >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_000811cc": "copy_bytes_to_data_000811cc",
                "file_UNUSED": "file",
                "ptr": "source",
                "len": "length",
                "iVar1": "i"
            },
            "calling": [
                "_write_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811f0": {
            "entrypoint": "0x000811f0",
            "current_name": "exit_with_status_000811f0",
            "code": "\nvoid exitWithStatus_000811f0(int status)\n\n{\n  iprintf(\"Exiting with status %d.\\n\",status);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000811f0": "exit_with_status_000811f0",
                "__status": "status"
            },
            "calling": [],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081200": {
            "entrypoint": "0x00081200",
            "current_name": "FUNC_00081200",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_00081200(int pid_UNUSED,int sig_UNUSED)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081200": "FUNC_00081200"
            },
            "calling": [
                "_kill_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081202": {
            "entrypoint": "0x00081202",
            "current_name": "get_process_id_00081202",
            "code": "\n\n\nprocess_id get_process_id_00081202(void)\n\n{\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_00081202": "get_process_id_00081202",
                "__pid_t": "process_id"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081208": {
            "entrypoint": "0x00081208",
            "current_name": "get_tick_count_00081208",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getTickCount_00081208(void)\n\n{\n  return tickCount;\n}\n\n",
            "renaming": {
                "FUN_00081208": "get_tick_count_00081208",
                "_dwTickCount": "tickCount"
            },
            "calling": [
                "sendTxBuffer",
                "setup",
                "poll",
                "loop"
            ],
            "called": [
                "GetTickCount"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008120c": {
            "entrypoint": "0x0008120c",
            "current_name": "FUNC_0008120c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0008120c(uint32_t ms)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008120e": {
            "entrypoint": "0x0008120e",
            "current_name": "FUNC_0008120e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0008120e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120e": "FUNC_0008120e"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081210": {
            "entrypoint": "0x00081210",
            "current_name": "configure_pin_00081210",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configurePin_00081210(uint32_t pinNumber,uint32_t pinMode)\n\n{\n  undefined4 adcMode;\n  byte pinStatusLower;\n  byte pinStatus;\n  Pio_conflict *pinPort;\n  \n  if (g_APinDescription[pinNumber].pinNumberType != PIO_NOT_A_PIN) {\n    if ((g_pinStatus[pinNumber] & 0xf) == 4) {\n      adc_disable_channel(0x400c0000,g_APinDescription[pinNumber].ulADCChannelNumber);\n    }\n    pinStatus = g_pinStatus[pinNumber];\n    pinStatusLower = pinStatus & 0xf;\n    if ((pinStatusLower < 3) && (pinStatus != 0)) {\n      if (pinStatusLower == 2) {\n        if (pinMode == 0) {\n          return;\n        }\n      }\n      else if (pinStatusLower == 1) {\n        if (pinMode == 2) {\n          return;\n        }\n      }\n      else if (pinStatusLower == 3) {\n        if (pinMode == 1) {\n          return;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (pinMode != 1) {\nLAB_0008126c:\n      if (pinMode == 0) {\n        pmc_enable_periph_clk(g_APinDescription[pinNumber].ulPeripheralId);\n        PIO_Configure(g_APinDescription[pinNumber].pPort,3,g_APinDescription[pinNumber].pinNumber,0);\n        pinStatus = g_pinStatus[pinNumber] & 0xf0 | 2;\n      }\n      else {\n        if (pinMode != 2) {\n          return;\n        }\n        pmc_enable_periph_clk(g_APinDescription[pinNumber].ulPeripheralId);\n        PIO_Configure(g_APinDescription[pinNumber].pPort,3,g_APinDescription[pinNumber].pinNumber,1);\n        pinStatus = g_pinStatus[pinNumber] & 0xf0 | 1;\n      }\n      g_pinStatus[pinNumber] = pinStatus;\n      return;\n    }\n    pinPort = g_APinDescription[pinNumber].pPort;\n    if (pinStatus >> 4 == 0) {\n      adcMode = 4;\n    }\n    else {\n      adcMode = 5;\n    }\n    PIO_Configure(pinPort,adcMode,g_APinDescription[pinNumber].pinNumber,\n                  g_APinDescription[pinNumber].pinNumberConfiguration);\n    g_pinStatus[pinNumber] = g_pinStatus[pinNumber] & 0xf0 | 3;\n    if (pinPort->PIO_OSR == 0xffffffff) {\n      pmc_disable_periph_clk(g_APinDescription[pinNumber].ulPeripheralId);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081210": "configure_pin_00081210",
                "ulPin": "pinNumber",
                "ulMode": "pinMode",
                "uVar1": "adcMode",
                "bVar2": "pinStatusLower",
                "bVar3": "pinStatus",
                "pPVar4": "pinPort"
            },
            "calling": [
                "setup",
                "begin",
                "digitalWrite"
            ],
            "called": [
                "PIO_Configure",
                "pmc_disable_periph_clk",
                "adc_disable_channel",
                "pmc_enable_periph_clk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081318": {
            "entrypoint": "0x00081318",
            "current_name": "set_pin_status_00081318",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setPinStatus_00081318(uint32_t pinNumber,uint32_t pinValue)\n\n{\n  int outputStatus;\n  uint32_t pin;\n  Pio_conflict *pinConflict;\n  uint32_t updatedPinValue;\n  \n  if (g_APinDescription[pinNumber].pinNumberType != PIO_NOT_A_PIN) {\n    updatedPinValue = pinValue;\n    if ((g_pinStatus[pinNumber] & 0xf) == 5) {\n      pinMode(pinNumber,1);\n    }\n    g_pinStatus[pinNumber] = g_pinStatus[pinNumber] & 0xf | (byte)(pinValue << 4);\n    pinConflict = g_APinDescription[pinNumber].pPort;\n    pin = g_APinDescription[pinNumber].pinNumber;\n    outputStatus = PIO_GetOutputDataStatus(pinConflict,pin);\n    if (outputStatus == 0) {\n      PIO_PullUp(pinConflict,pin,pinValue);\n      return;\n    }\n    PIO_SetOutput(pinConflict,pin,pinValue,0,1,updatedPinValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081318": "set_pin_status_00081318",
                "ulPin": "pinNumber",
                "ulVal": "pinValue",
                "iVar1": "outputStatus",
                "uVar2": "pin",
                "uVar4": "updatedPinValue",
                "pPVar3": "pinConflict"
            },
            "calling": [
                "getRxBuffer",
                "sendTxBuffer",
                "setup",
                "init",
                "begin"
            ],
            "called": [
                "pinMode",
                "PIO_SetOutput",
                "PIO_PullUp",
                "PIO_GetOutputDataStatus"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081388": {
            "entrypoint": "0x00081388",
            "current_name": "decrement_and_check_ticks_00081388",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid decrementAndCheckTicks_00081388(void)\n\n{\n  if ((ticks != -1) && (ticks = ticks + -1, ticks == 0)) {\n    performBanzai();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081388": "decrement_and_check_ticks_00081388",
                "banzai": "performBanzai"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [
                "banzai"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813a8": {
            "entrypoint": "0x000813a8",
            "current_name": "initialize_ring_buffer_000813a8",
            "code": "\n/* DWARF original prototype: RingBuffer *  RingBuffer(RingBuffer * ringBuffer) */\n\nRingBuffer * __ringBuffercall RingBuffer::initializeRingBuffer_000813a8(RingBuffer *ringBuffer)\n\n{\n  initializeMemory(ringBuffer,0,0x80);\n  ringBuffer->headIndex = 0;\n  ringBuffer->tailIndex = 0;\n  return ringBuffer;\n}\n\n",
            "renaming": {
                "this": "ringBuffer",
                "memset": "initializeMemory",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "FUN_000813a8": "initialize_ring_buffer_000813a8"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813c2": {
            "entrypoint": "0x000813c2",
            "current_name": "store_char_000813c2",
            "code": "\n/* DWARF orheadgheadnal prototype: voheadd  store_char_000813c2(RheadngBuffer * ring_buffer, uheadnt8_t c) */\n\nvoheadd __ring_buffercall RheadngBuffer::store_char_000813c2(RheadngBuffer *ring_buffer,uheadnt8_t c)\n\n{\n  headnt head;\n  uheadnt next_head;\n  \n  head = ring_buffer->head_index;\n  next_head = head + 1U & 0x7f;\n  headf (next_head != ring_buffer->tail_index) {\n    ring_buffer->buffer[ring_buffer->head_index] = c;\n    ring_buffer->head_index = next_head;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813c2": "store_char_000813c2",
                "this": "ring_buffer",
                "i": "head",
                "uVar1": "next_head",
                "_iHead": "head_index",
                "_iTail": "tail_index",
                "_aucBuffer": "buffer"
            },
            "calling": [
                "IrqHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e0": {
            "entrypoint": "0x000813e0",
            "current_name": "is_uart_active_000813e0",
            "code": "\n/* DWARF original name: operator bool\n   DWARF original prototype: bool  operator_bool(UARTClass * uartInstance) */\n\nbool __uartInstancecall UARTClass::isUARTActive_000813e0(UARTClass *uartInstance)\n\n{\n  return true;\n}\n\n",
            "renaming": {
                "FUN_000813e0": "is_uart_active_000813e0",
                "this": "uartInstance"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "get_available_data_000813e4",
            "code": "\n/* DWARF original prototype: int  available(UARTClass * uartObject) */\n\nint __uartObjectcall UARTClass::getAvailableData_000813e4(UARTClass *uartObject)\n\n{\n  return uartObject->_rx_buffer->_iHead - uartObject->_rx_buffer->_iTail & 0x7f;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "get_available_data_000813e4",
                "this": "uartObject"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813f6": {
            "entrypoint": "0x000813f6",
            "current_name": "get_peek_value_000813f6",
            "code": "\n/* DWARF original prototype: int  peek(UARTClass * uartInstance) */\n\nint __uartInstancecall UARTClass::getPeekValue_000813f6(UARTClass *uartInstance)\n\n{\n  uint peekValue;\n  RingBuffer *rxBuffer;\n  \n  rxBuffer = uartInstance->_rx_buffer;\n  if (rxBuffer->_iHead == rxBuffer->_iTail) {\n    peekValue = 0xffffffff;\n  }\n  else {\n    peekValue = (uint)rxBuffer->_aucBuffer[rxBuffer->_iTail];\n  }\n  return peekValue;\n}\n\n",
            "renaming": {
                "FUN_000813f6": "get_peek_value_000813f6",
                "this": "uartInstance",
                "pRVar2": "rxBuffer",
                "uVar1": "peekValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081412": {
            "entrypoint": "0x00081412",
            "current_name": "read_uart_buffer_00081412",
            "code": "\n/* DWARF original prototype: int  read(UARTClass * this) */\n\nssize_t __thiscall UARTClass::readUARTBuffer_00081412(UARTClass *this,int fileDescriptor,void *buffer,size_t numBytes)\n\n{\n  byte readByte;\n  uint8_t currentByte;\n  RingBuffer *ringBuffer;\n  \n  ringBuffer = this->_rx_buffer;\n  if (ringBuffer->_iHead != ringBuffer->_iTail) {\n    readByte = ringBuffer->_acurrentByteBuffer[ringBuffer->_iTail];\n    ringBuffer->_iTail = ringBuffer->_iTail + 1U & 0x7f;\n    return (uint)readByte;\n  }\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_00081412": "read_uart_buffer_00081412",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__nbytes": "numBytes",
                "uc": "currentByte",
                "pRVar2": "ringBuffer",
                "bVar1": "readByte"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008143c": {
            "entrypoint": "0x0008143c",
            "current_name": "wait_until_transmission_complete_0008143c",
            "code": "\n/* DWARF original prototype: void  flush(UARTClass * uartInstance) */\n\nvoid __uartInstancecall UARTClass::waitUntilTransmissionComplete_0008143c(UARTClass *uartInstance)\n\n{\n  do {\n  } while (uartInstance->transmitBuffer->headIndex != uartInstance->transmitBuffer->tailIndex);\n  do {\n  } while (-1 < (int)(uartInstance->uartPeripheral->UART_SR << 0x16));\n  return;\n}\n\n",
            "renaming": {
                "this": "uartInstance",
                "_tx_buffer": "transmitBuffer",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "_pUart": "uartPeripheral",
                "FUN_0008143c": "wait_until_transmission_complete_0008143c"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081454": {
            "entrypoint": "0x00081454",
            "current_name": "write_byte_to_uart_00081454",
            "code": "\n/* DWARF original prototype: size_t  write(UARTClass * uart_instance, uint8_t uc_data) */\n\nssize_t UARTClass UARTClass::write_byte_to_UART_00081454(UARTClass *uart_instance,int data_byte,void *buffer,size_t buffer_size)\n\n{\n  RingBuffer *ring_buffer;\n  uint next_index;\n  \n  ring_buffer = uart_instance->_tx_buffer;\n  if (((int)(uart_instance->_pUart->UART_SR << 0x1e) < 0) && (ring_buffer->_iTail == ring_buffer->_iHead)) {\n    uart_instance->_pUart->UART_THR = data_byte;\n  }\n  else {\n    next_index = ring_buffer->_iHead + 1U & 0x8000007f;\n    if ((int)next_index < 0) {\n      next_index = (next_index - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (ring_buffer->_iTail == next_index);\n    ring_buffer->_aucBuffer[ring_buffer->_iHead] = (uchar)data_byte;\n    uart_instance->_tx_buffer->_iHead = next_index;\n    uart_instance->_pUart->UART_IER = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081454": "write_byte_to_uart_00081454",
                "__thiscall": "UARTClass",
                "this": "uart_instance",
                "__fd": "data_byte",
                "__buf": "buffer",
                "__n": "buffer_size",
                "pRVar1": "ring_buffer",
                "uVar2": "next_index"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814a8": {
            "entrypoint": "0x000814a8",
            "current_name": "end_uart_000814a8",
            "code": "\n/* DWARF original prototype: void  end(UARTClass * uart) */\n\nvoid __uartcall UARTClass::endUART_000814a8(UARTClass *uart)\n\n{\n  uart->rxBuffer->inputHead = uart->rxBuffer->inputTail;\n  (**(code **)(*(int *)uart + 0x14))();\n  *(int *)((((uint)(int)uart->irq >> 5) + 0x20) * 4 + -0x1fff1f00) =\n       1 << (uint)(byte)(uart->irq & 0x1f);\n  pmc_disable_periph_clk(uart->id);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000814a8": "end_uart_000814a8",
                "this": "uart",
                "_rx_buffer": "rxBuffer",
                "_iHead": "inputHead",
                "_iTail": "inputTail",
                "_dwIrq": "irq",
                "_dwId": "id"
            },
            "calling": [],
            "called": [
                "pmc_disable_periph_clk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814e4": {
            "entrypoint": "0x000814e4",
            "current_name": "initialize_uart_000814e4",
            "code": "\n/* DWARF original prototype: UARTClass *  UARTClass(UARTClass * uartObject, Uart * uart, IRQn_Type irqType,\n   uint32_t deviceId, RingBuffer * rxBuffer, RingBuffer * txBuffer) */\n\nUARTClass * __uartObjectcall\nUARTClass::initializeUART_000814e4(UARTClass *uartObject,Uart *uart,IRQn_Type irqType,uint32_t deviceId,RingBuffer *rxBuffer,\n          RingBuffer *txBuffer)\n\n{\n  *(undefined4 *)&uartObject->field_0x4 = 0;\n  *(undefined4 *)&uartObject->field_0x8 = 1000;\n  uartObject->uartPointer = uart;\n  *(undefined ***)uartObject = &PTR_write_1_000857a8;\n  uartObject->irq = irqType;\n  uartObject->receiveBuffer = rxBuffer;\n  uartObject->id = deviceId;\n  uartObject->transmitBuffer = txBuffer;\n  return uartObject;\n}\n\n",
            "renaming": {
                "this": "uartObject",
                "pUart": "uart",
                "dwIrq": "irqType",
                "dwId": "deviceId",
                "pRx_buffer": "rxBuffer",
                "pTx_buffer": "txBuffer",
                "_pUart": "uartPointer",
                "_dwIrq": "irq",
                "_rx_buffer": "receiveBuffer",
                "_dwId": "id",
                "_tx_buffer": "transmitBuffer",
                "FUN_000814e4": "initialize_uart_000814e4"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription",
                "USARTClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081508": {
            "entrypoint": "0x00081508",
            "current_name": "initialize_uart_00081508",
            "code": "\n/* DWARF original prototype: void  init(UARTClass * uartInstance, uint32_t dwBaudRate, uint32_t modeReg) */\n\nint __uartInstancecall UARTClass::initializeUART_00081508(UARTClass *uartInstance,EVP_PKEY_CTX *evpPkeyContext)\n\n{\n  uint uVar1;\n  RingBuffer *pRVar2;\n  RwReg in_r2;\n  Uart *pUVar3;\n  \n  enablePeripheralClock(uartInstance->_peripheralId);\n  pUVar3 = uartInstance->uartPointer;\n  pUVar3->ptcrRegister = 0x202;\n  pUVar3->crRegister = 0xac;\n  pUVar3->mrRegister = in_r2;\n  pUVar3->baudRateGeneratorRegister = systemCoreClock / (uint)evpPkeyContext >> 4;\n  pUVar3->idrRegister = 0xffffffff;\n  pUVar3->ierRegister = 0x61;\n  uVar1 = (uint)(int)uartInstance->irqNumber >> 5;\n  *(int *)(uVar1 * 4 + -0x1fff1f00) = 1 << (uint)(byte)(uartInstance->irqNumber & 0x1f);\n  pRVar2 = uartInstance->receiveBuffer;\n  pRVar2->tailIndex = 0;\n  pRVar2->headIndex = 0;\n  pRVar2 = uartInstance->transmitBuffer;\n  pRVar2->tailIndex = 0;\n  pRVar2->headIndex = 0;\n  pUVar3->crRegister = 0x50;\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_00081508": "initialize_uart_00081508",
                "this": "uartInstance",
                "ctx": "evpPkeyContext",
                "dwId": "peripheralId",
                "_pUart": "uartPointer",
                "_dwIrq": "irqNumber",
                "_rx_buffer": "receiveBuffer",
                "_tx_buffer": "transmitBuffer",
                "pmc_enable_periph_clk": "enablePeripheralClock",
                "UART_PTCR": "ptcrRegister",
                "UART_CR": "crRegister",
                "UART_MR": "mrRegister",
                "UART_BRGR": "baudRateGeneratorRegister",
                "SystemCoreClock": "systemCoreClock",
                "UART_IDR": "idrRegister",
                "UART_IER": "ierRegister",
                "_iTail": "tailIndex",
                "_iHead": "headIndex"
            },
            "calling": [
                "begin",
                "begin"
            ],
            "called": [
                "pmc_enable_periph_clk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081578": {
            "entrypoint": "0x00081578",
            "current_name": "initialize_uart_device_00081578",
            "code": "\n/* DWARF original prototype: void  begin(UARTClass * uartDevice, uint32_t baudRate) */\n\nvoid __uartDevicecall UARTClass::initializeUARTDevice_00081578(UARTClass *uartDevice,uint32_t baudRate)\n\n{\n  init(uartDevice,(EVP_PKEY_CTX *)baudRate);\n  return;\n}\n\n",
            "renaming": {
                "this": "uartDevice",
                "dwBaudRate": "baudRate",
                "FUN_00081578": "initialize_uart_device_00081578"
            },
            "calling": [],
            "called": [
                "init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081580": {
            "entrypoint": "0x00081580",
            "current_name": "handle_uart_interrupt_00081580",
            "code": "\n/* DWARF original prototype: void  IrqHandler(UARTClass * uart_instance) */\n\nvoid __uart_instancecall UARTClass::handle_UART_interrupt_00081580(UARTClass *uart_instance)\n\n{\n  RingBuffer *tx_buffer;\n  uint32_t uart_status;\n  RoReg uart_SR;\n  \n  uart_SR = uart_instance->_pUart->UART_SR;\n  if ((int)(uart_SR << 0x1f) < 0) {\n    RingBuffer::store_char(uart_instance->_rx_buffer,(uint8_t)uart_instance->_pUart->UART_RHR);\n  }\n  if ((int)(uart_SR << 0x1e) < 0) {\n    tx_buffer = uart_instance->_tx_buffer;\n    if (tx_buffer->_iTail != tx_buffer->_iHead) {\n      uart_instance->_pUart->UART_THR = (uint)tx_buffer->_aucBuffer[tx_buffer->_iTail];\n      tx_buffer->_iTail = tx_buffer->_iTail + 1U & 0x7f;\n      return;\n    }\n    uart_instance->_pUart->UART_IDR = 2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081580": "handle_uart_interrupt_00081580",
                "this": "uart_instance",
                "pRVar1": "tx_buffer",
                "status": "uart_status",
                "RVar2": "uart_SR"
            },
            "calling": [
                "USART1_Handler",
                "UART_Handler",
                "USART3_Handler",
                "USART0_Handler"
            ],
            "called": [
                "store_char"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815ca": {
            "entrypoint": "0x000815ca",
            "current_name": "initialize_uart_000815ca",
            "code": "\n/* DWARF original prototype: void  begin(USARTClass * USARTObject, uint32_t baudRate) */\n\nvoid __USARTObjectcall USARTClass::initializeUART_000815ca(USARTClass *USARTObject,uint32_t baudRate)\n\n{\n  UARTClass::init(&USARTObject->super_UARTClass,(EVP_PKEY_CTX *)baudRate);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000815ca": "initialize_uart_000815ca",
                "this": "USARTObject",
                "dwBaudRate": "baudRate"
            },
            "calling": [],
            "called": [
                "init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815d4": {
            "entrypoint": "0x000815d4",
            "current_name": "initialize_usart_class_000815d4",
            "code": "\n/* DWARF original prototype: USARTClass *  USARTClass(USARTClass * usartClassInstance, usartInstance * pusartInstance, IRQn_Type\n   interruptNumber, uint32_t identificationNumber, rxBuffer * rxRingBuffer, rxBuffer * txRingBuffer) */\n\nUSARTClass * __usartClassInstancecall\nUSARTClass::initializeUSARTClass_000815d4(USARTClass *usartClassInstance,usartInstance *pusartInstance,IRQn_Type interruptNumber,uint32_t identificationNumber,rxBuffer *rxRingBuffer,\n          rxBuffer *txRingBuffer)\n\n{\n  uartClassInstance::uartClassInstance(&usartClassInstance->super_uartClassInstance,(uartInstance *)pusartInstance,interruptNumber,identificationNumber,rxRingBuffer,txRingBuffer);\n  *(undefined ***)&usartClassInstance->super_uartClassInstance = &PTR_write_1_000857d8;\n  usartClassInstance->_pusartInstance = pusartInstance;\n  return usartClassInstance;\n}\n\n",
            "renaming": {
                "this": "usartClassInstance",
                "Usart": "usartInstance",
                "dwIrq": "interruptNumber",
                "dwId": "identificationNumber",
                "RingBuffer": "rxBuffer",
                "pRx_buffer": "rxRingBuffer",
                "pTx_buffer": "txRingBuffer",
                "UARTClass": "uartClassInstance",
                "Uart": "uartInstance",
                "FUN_000815d4": "initialize_usart_class_000815d4"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [
                "UARTClass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815f8": {
            "entrypoint": "0x000815f8",
            "current_name": "concatenate_bytes_000815f8",
            "code": "\n/* WARNING: Unknown calow_bytelow_byteing convention */\n\nuint16_t concatenate_bytes_000815f8(uint8_t high_byte,uint8_t low_byte)\n\n{\n  return CONCAT11(high_byte,low_byte);\n}\n\n",
            "renaming": {
                "FUN_000815f8": "concatenate_bytes_000815f8",
                "h": "high_byte",
                "l": "low_byte"
            },
            "calling": [
                "get_FC3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815fe": {
            "entrypoint": "0x000815fe",
            "current_name": "destroy_string_000815fe",
            "code": "\n/* DWARF original prototype: void *  ~String(String * str, int charge) */\n\nvoid * __strcall String::destroyString_000815fe(String *str,int charge)\n\n{\n  free(str->buffer);\n  return str;\n}\n\n",
            "renaming": {
                "this": "str",
                "__in_chrg": "charge",
                "FUN_000815fe": "destroy_string_000815fe"
            },
            "calling": [],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008160c": {
            "entrypoint": "0x0008160c",
            "current_name": "reset_string_0008160c",
            "code": "\n/* DWARF original prototype: void  invalidate(String * str) */\n\nvoid __strcall String::resetString_0008160c(String *str)\n\n{\n  if (str->buffer != (char *)0x0) {\n    deallocate(str->buffer);\n  }\n  str->buffer = (char *)0x0;\n  str->len = 0;\n  str->capacity = 0;\n  return;\n}\n\n",
            "renaming": {
                "this": "str",
                "free": "deallocate",
                "FUN_0008160c": "reset_string_0008160c"
            },
            "calling": [
                "copy"
            ],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081622": {
            "entrypoint": "0x00081622",
            "current_name": "resize_buffer_00081622",
            "code": "\n/* DWARF original prototype: uchar  changeBuffer(String * strObj, uint newSize) */\n\nuchar __strObjcall String::resizeBuffer_00081622(String *strObj,uint newSize)\n\n{\n  char *newBuffer;\n  char *newbuffer;\n  \n  newBuffer = (char *)realloc(strObj->buffer,newSize + 1);\n  if (newBuffer != (char *)0x0) {\n    strObj->buffer = newBuffer;\n    strObj->capacity = newSize;\n    newBuffer = (char *)0x1;\n  }\n  return (uchar)newBuffer;\n}\n\n",
            "renaming": {
                "FUN_00081622": "resize_buffer_00081622",
                "this": "strObj",
                "maxStrLen": "newSize",
                "pcVar1": "newBuffer"
            },
            "calling": [
                "reserve"
            ],
            "called": [
                "realloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008163a": {
            "entrypoint": "0x0008163a",
            "current_name": "reserve_memory_0008163a",
            "code": "\n/* DWARF original prototype: uchar  reserve(String * str, uint newSize) */\n\nuchar __strcall String::reserveMemory_0008163a(String *str,uint newSize)\n\n{\n  uchar success;\n  \n  if ((str->buffer == (char *)0x0) || (str->capacity < newSize)) {\n    success = resizeBuffer(str,newSize);\n    if (success == '\\0') {\n      return '\\0';\n    }\n    if (str->len == 0) {\n      *str->buffer = '\\0';\n    }\n  }\n  return '\\x01';\n}\n\n",
            "renaming": {
                "this": "str",
                "size": "newSize",
                "uVar1": "success",
                "changeBuffer": "resizeBuffer",
                "FUN_0008163a": "reserve_memory_0008163a"
            },
            "calling": [
                "copy"
            ],
            "called": [
                "changeBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008165c": {
            "entrypoint": "0x0008165c",
            "current_name": "copy_0008165c",
            "code": "\n/* DWARF original prototype: String *  copy_0008165c(String * string, char * cstr, uint length) */\n\nint __stringcall String::copy_0008165c(String *string,EVP_PKEY_CTX *source,EVP_PKEY_CTX *source_length)\n\n{\n  uchar reserved;\n  \n  reserved = reserve(string,(uint)source_length);\n  if (reserved == '\\0') {\n    invalidate(string);\n  }\n  else {\n    string->len = (uint)source_length;\n    strcpy(string->buffer,(char *)source);\n  }\n  return (int)string;\n}\n\n",
            "renaming": {
                "this": "string",
                "src": "source_length",
                "dst": "source",
                "uVar1": "reserved",
                "FUN_0008165c": "copy_0008165c"
            },
            "calling": [
                "String"
            ],
            "called": [
                "reserve",
                "invalidate",
                "strcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081682": {
            "entrypoint": "0x00081682",
            "current_name": "initialize_string_00081682",
            "code": "\n/* DWARF original prototype: String *  String(String * str, char * inputString) */\n\nString * __strcall String::initializeString_00081682(String *str,char *inputString)\n\n{\n  EVP_PKEY_CTX *stringLength;\n  \n  str->buffer = (char *)0x0;\n  str->capacity = 0;\n  str->len = 0;\n  if (inputString != (char *)0x0) {\n    stringLength = (EVP_PKEY_CTX *)strlen(inputString);\n    copy(str,(EVP_PKEY_CTX *)inputString,stringLength);\n  }\n  return str;\n}\n\n",
            "renaming": {
                "this": "str",
                "cstr": "inputString",
                "src": "stringLength",
                "FUN_00081682": "initialize_string_00081682"
            },
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "called": [
                "strlen",
                "copy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816a6": {
            "entrypoint": "0x000816a6",
            "current_name": "FUNC_000816a6",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000816a8": {
            "entrypoint": "0x000816a8",
            "current_name": "run_application_000816a8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint runApplication_000816a8(void)\n\n{\n  EVP_PKEY_CTX *context;\n  \n  setDefaultWatchdog();\n  initialize(context);\n  initializeVariant();\n  pause(1);\n  setupHardware();\n  do {\n    executeLoop();\n    processSerialEvent();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816a8": "run_application_000816a8",
                "in_r0": "context",
                "_watchdogDefaultSetup": "setDefaultWatchdog",
                "init": "initialize",
                "initVariant": "initializeVariant",
                "delay": "pause",
                "setup": "setupHardware",
                "loop": "executeLoop",
                "serialEventRun": "processSerialEvent"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "initVariant",
                "_watchdogDefaultSetup",
                "serialEventRun",
                "setup",
                "loop",
                "init",
                "delay"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d4": {
            "entrypoint": "0x000816d4",
            "current_name": "disable_watchdog_000816d4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid disable_watchdog_000816d4(void)\n\n{\n  disable_watchdog_000816d4_timer(0x400e1a50);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816d4": "disable_watchdog_000816d4",
                "WDT_Disable": "disable_watchdog_timer"
            },
            "calling": [
                "main"
            ],
            "called": [
                "WDT_Disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816e0": {
            "entrypoint": "0x000816e0",
            "current_name": "write_data_000816e0",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x000816f6 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: size_t  write(Print * this, uint8_t * buffer, size_t size) */\n\nssize_t Print Print::writeData_000816e0(Print *this,int fileDescriptor,void *buffer,size_t size)\n\n{\n  Print *printObject;\n  void *currentBuffer;\n  \n  currentBuffer = (void *)0x0;\n  printObject = this;\n  while ((currentBuffer != buffer &&\n         (printObject = (Print *)(**this->vptr_Print)(printObject,(uint)*(byte *)(fileDescriptor + (int)currentBuffer)),\n         printObject != (Print *)0x0))) {\n    currentBuffer = (void *)((int)currentBuffer + 1);\n  }\n  return (ssize_t)currentBuffer;\n}\n\n",
            "renaming": {
                "FUN_000816e0": "write_data_000816e0",
                "__thiscall": "Print",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__n": "size",
                "pvVar2": "currentBuffer",
                "pPVar1": "printObject",
                "_vptr_Print": "vptr_Print"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081704": {
            "entrypoint": "0x00081704",
            "current_name": "increment_tick_count_00081704",
            "code": "\nvoid incrementTickCount_00081704(void)\n\n{\n  currentTickCount = currentTickCount + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081704": "increment_tick_count_00081704",
                "_dwTickCount": "currentTickCount"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081714": {
            "entrypoint": "0x00081714",
            "current_name": "get_tick_count_00081714",
            "code": "\nundefined4 getTickCount_00081714(void)\n\n{\n  return tickCounter;\n}\n\n",
            "renaming": {
                "FUN_00081714": "get_tick_count_00081714",
                "_dwTickCount": "tickCounter"
            },
            "calling": [
                "millis"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081720": {
            "entrypoint": "0x00081720",
            "current_name": "set_default_value_00081720",
            "code": "\nvoid setDefaultValue_00081720(int obj_address)\n\n{\n  *(undefined4 *)(obj_address + 4) = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081720": "set_default_value_00081720",
                "param_1": "obj_address"
            },
            "calling": [
                "_watchdogDefaultSetup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081728": {
            "entrypoint": "0x00081728",
            "current_name": "convert_to_absolute_value_00081728",
            "code": "\nvoid convertToAbsoluteValue_00081728(uint inputValue)\n\n{\n  __addsf3(inputValue ^ 0x80000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081728": "convert_to_absolute_value_00081728",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "__addsf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081730": {
            "entrypoint": "0x00081730",
            "current_name": "calculate_new_float_00081730",
            "code": "\nuint calculateNewFloat_00081730(uint inputFloat,uint mask,undefined4 unused,uint result)\n\n{\n  int shift;\n  int shift2;\n  uint inputFloatXoredMask;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint difference;\n  bool isZero;\n  \n  inputFloatXoredMask = mask ^ 0x80000000;\n  temp2 = inputFloat << 1;\n  isZero = temp2 == 0;\n  if (!isZero) {\n    result = mask << 1;\n    isZero = result == 0;\n  }\n  if (!isZero) {\n    isZero = temp2 == result;\n  }\n  shift = (int)temp2 >> 0x18;\n  if (!isZero) {\n    isZero = shift == -1;\n  }\n  if (!isZero) {\n    isZero = (int)result >> 0x18 == -1;\n  }\n  if (isZero) {\n    shift2 = (int)(mask << 1) >> 0x18;\n    if (shift == -1 || shift2 == -1) {\n      temp2 = inputFloatXoredMask;\n      if (shift == -1) {\n        temp2 = inputFloat;\n      }\n      if (shift != -1 || shift2 != -1) {\n        inputFloatXoredMask = temp2;\n      }\n      isZero = (temp2 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (inputFloatXoredMask & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = temp2 == inputFloatXoredMask;\n      }\n      if (!isZero) {\n        temp2 = temp2 | 0x400000;\n      }\n      return temp2;\n    }\n    if (((inputFloat ^ inputFloatXoredMask) & 0x7fffffff) != 0) {\n      if (temp2 == 0) {\n        inputFloat = inputFloatXoredMask;\n      }\n      return inputFloat;\n    }\n    if (inputFloat != inputFloatXoredMask) {\n      return 0;\n    }\n    if ((temp2 & 0xff000000) == 0) {\n      inputFloatXoredMask = inputFloat << 1;\n      if ((inputFloat & 0x80000000) != 0) {\n        inputFloatXoredMask = inputFloatXoredMask | 0x80000000;\n      }\n      return inputFloatXoredMask;\n    }\n    if (temp2 < 0xfe000000) {\n      return inputFloat + 0x800000;\n    }\n    inputFloat = inputFloat & 0x80000000;\nLAB_0008186a:\n    return inputFloat | 0x7f800000;\n  }\n  temp2 = temp2 >> 0x18;\n  result = result >> 0x18;\n  difference = result - temp2;\n  isZero = difference != 0;\n  temp3 = temp2;\n  if (isZero && temp2 <= result) {\n    temp3 = temp2 + difference;\n  }\n  if (isZero && temp2 <= result) {\n    inputFloatXoredMask = inputFloatXoredMask ^ inputFloat;\n  }\n  if (isZero && temp2 <= result) {\n    inputFloat = inputFloat ^ inputFloatXoredMask;\n  }\n  if (isZero && temp2 <= result) {\n    inputFloatXoredMask = inputFloatXoredMask ^ inputFloat;\n  }\n  if (result < temp2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return inputFloat;\n  }\n  temp2 = inputFloat & 0xffffff | 0x800000;\n  if ((inputFloat & 0x80000000) != 0) {\n    temp2 = -temp2;\n  }\n  temp1 = inputFloatXoredMask & 0xffffff | 0x800000;\n  if ((inputFloatXoredMask & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  if (temp3 == difference) {\n    temp1 = temp1 ^ 0x800000;\n    if (temp3 == 0) {\n      temp2 = temp2 ^ 0x800000;\n      temp3 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp2 = temp2 + ((int)temp1 >> (difference & 0xff));\n  temp1 = temp1 << (0x20 - difference & 0xff);\n  inputFloat = temp2 & 0x80000000;\n  if ((int)temp2 < 0) {\n    isZero = temp1 != 0;\n    temp1 = -temp1;\n    temp2 = -temp2 - (uint)isZero;\n  }\n  if (temp2 < 0x800000) {\n    inputFloatXoredMask = temp1 & 0x80000000;\n    temp1 = temp1 << 1;\n    temp2 = temp2 * 2 + (uint)(inputFloatXoredMask != 0);\n    inputFloatXoredMask = temp3 - 2;\n    if ((temp2 & 0x800000) == 0) {\n      difference = leadingZeroCount(temp2) - 8;\n      temp2 = temp2 << (difference & 0xff);\n      if ((int)inputFloatXoredMask < (int)difference) {\n        temp2 = temp2 >> (-(inputFloatXoredMask - difference) & 0xff);\n      }\n      else {\n        temp2 = temp2 + (inputFloatXoredMask - difference) * 0x800000;\n      }\n      return temp2 | inputFloat;\n    }\n  }\n  else {\n    inputFloatXoredMask = temp3 - 1;\n    if (0xffffff < temp2) {\n      inputFloatXoredMask = temp2 & 1;\n      temp2 = temp2 >> 1;\n      temp1 = (uint)(inputFloatXoredMask != 0) << 0x1f | temp1 >> 1;\n      inputFloatXoredMask = temp3;\n      if (0xfd < temp3) goto LAB_0008186a;\n    }\n  }\n  temp2 = temp2 + inputFloatXoredMask * 0x800000 + (uint)(0x7fffffff < temp1);\n  if (temp1 == 0x80000000) {\n    temp2 = temp2 & 0xfffffffe;\n  }\n  return temp2 | inputFloat;\n}\n\n",
            "renaming": {
                "FUN_00081730": "calculate_new_float_00081730",
                "param_1": "inputFloat",
                "param_2": "mask",
                "param_3": "unused",
                "param_4": "result",
                "iVar1": "shift",
                "iVar2": "shift2",
                "uVar3": "inputFloatXoredMask",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "temp3",
                "uVar7": "difference",
                "bVar8": "isZero",
                "LZCOUNT": "leadingZeroCount"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "calculate_floating_point_00081734",
            "code": "\nuint calculateFloatingPoint_00081734(uint value1,uint value2,undefined4 flag,uint temp)\n\n{\n  int sign1;\n  int sign2;\n  uint mant1;\n  uint mant2;\n  uint shift;\n  uint difference;\n  bool isEqual;\n  \n  mant2 = value1 << 1;\n  isEqual = mant2 == 0;\n  if (!isEqual) {\n    temp = value2 << 1;\n    isEqual = temp == 0;\n  }\n  if (!isEqual) {\n    isEqual = mant2 == temp;\n  }\n  sign1 = (int)mant2 >> 0x18;\n  if (!isEqual) {\n    isEqual = sign1 == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)temp >> 0x18 == -1;\n  }\n  if (isEqual) {\n    sign2 = (int)(value2 << 1) >> 0x18;\n    if (sign1 == -1 || sign2 == -1) {\n      mant2 = value2;\n      if (sign1 == -1) {\n        mant2 = value1;\n      }\n      if (sign1 != -1 || sign2 != -1) {\n        value2 = mant2;\n      }\n      isEqual = (mant2 & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (value2 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = mant2 == value2;\n      }\n      if (!isEqual) {\n        mant2 = mant2 | 0x400000;\n      }\n      return mant2;\n    }\n    if (((value1 ^ value2) & 0x7fffffff) != 0) {\n      if (mant2 == 0) {\n        value1 = value2;\n      }\n      return value1;\n    }\n    if (value1 != value2) {\n      return 0;\n    }\n    if ((mant2 & 0xff000000) == 0) {\n      mant2 = value1 << 1;\n      if ((value1 & 0x80000000) != 0) {\n        mant2 = mant2 | 0x80000000;\n      }\n      return mant2;\n    }\n    if (mant2 < 0xfe000000) {\n      return value1 + 0x800000;\n    }\n    value1 = value1 & 0x80000000;\nLAB_0008186a:\n    return value1 | 0x7f800000;\n  }\n  mant2 = mant2 >> 0x18;\n  temp = temp >> 0x18;\n  difference = temp - mant2;\n  isEqual = difference != 0;\n  shift = mant2;\n  if (isEqual && mant2 <= temp) {\n    shift = mant2 + difference;\n  }\n  if (isEqual && mant2 <= temp) {\n    value2 = value2 ^ value1;\n  }\n  if (isEqual && mant2 <= temp) {\n    value1 = value1 ^ value2;\n  }\n  if (isEqual && mant2 <= temp) {\n    value2 = value2 ^ value1;\n  }\n  if (temp < mant2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return value1;\n  }\n  mant2 = value1 & 0xffffff | 0x800000;\n  if ((value1 & 0x80000000) != 0) {\n    mant2 = -mant2;\n  }\n  mant1 = value2 & 0xffffff | 0x800000;\n  if ((value2 & 0x80000000) != 0) {\n    mant1 = -mant1;\n  }\n  if (shift == difference) {\n    mant1 = mant1 ^ 0x800000;\n    if (shift == 0) {\n      mant2 = mant2 ^ 0x800000;\n      shift = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  mant2 = mant2 + ((int)mant1 >> (difference & 0xff));\n  mant1 = mant1 << (0x20 - difference & 0xff);\n  value1 = mant2 & 0x80000000;\n  if ((int)mant2 < 0) {\n    isEqual = mant1 != 0;\n    mant1 = -mant1;\n    mant2 = -mant2 - (uint)isEqual;\n  }\n  if (mant2 < 0x800000) {\n    difference = mant1 & 0x80000000;\n    mant1 = mant1 << 1;\n    mant2 = mant2 * 2 + (uint)(difference != 0);\n    difference = shift - 2;\n    if ((mant2 & 0x800000) == 0) {\n      shift = LZCOUNT(mant2) - 8;\n      mant2 = mant2 << (shift & 0xff);\n      if ((int)difference < (int)shift) {\n        mant2 = mant2 >> (-(difference - shift) & 0xff);\n      }\n      else {\n        mant2 = mant2 + (difference - shift) * 0x800000;\n      }\n      return mant2 | value1;\n    }\n  }\n  else {\n    difference = shift - 1;\n    if (0xffffff < mant2) {\n      difference = mant2 & 1;\n      mant2 = mant2 >> 1;\n      mant1 = (uint)(difference != 0) << 0x1f | mant1 >> 1;\n      difference = shift;\n      if (0xfd < shift) goto LAB_0008186a;\n    }\n  }\n  mant2 = mant2 + difference * 0x800000 + (uint)(0x7fffffff < mant1);\n  if (mant1 == 0x80000000) {\n    mant2 = mant2 & 0xfffffffe;\n  }\n  return mant2 | value1;\n}\n\n",
            "renaming": {
                "FUN_00081734": "calculate_floating_point_00081734",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "flag",
                "param_4": "temp",
                "iVar1": "sign1",
                "iVar2": "sign2",
                "uVar3": "mant1",
                "uVar4": "mant2",
                "uVar5": "shift",
                "uVar6": "difference",
                "bVar7": "isEqual"
            },
            "calling": [
                "loop",
                "__aeabi_frsub"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081894": {
            "entrypoint": "0x00081894",
            "current_name": "count_leading_zeros_00081894",
            "code": "\nuint countLeadingZeros_00081894(uint num)\n\n{\n  uint result;\n  uint shifted;\n  int constant;\n  uint mask;\n  \n  if (num == 0) {\n    return 0;\n  }\n  result = LZCOUNT(num);\n  shifted = result - 8;\n  constant = shifted * -0x800000 + 0x4a800000;\n  if (7 < result) {\n    mask = 0 << (shifted & 0xff);\n    result = constant + (num << (shifted & 0xff)) +\n            (0U >> (0x20 - shifted & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  shifted = num << result + 0x18;\n  result = constant + ((num >> (0x20 - (result + 0x18) & 0xff)) - ((int)shifted >> 0x1f));\n  if ((shifted & 0x7fffffff) == 0) {\n    result = result & ~(shifted >> 0x1f);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081894": "count_leading_zeros_00081894",
                "param_1": "num",
                "uVar1": "result",
                "uVar2": "shifted",
                "iVar3": "constant",
                "uVar4": "mask"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008189c": {
            "entrypoint": "0x0008189c",
            "current_name": "decode_unsigned_integer_0008189c",
            "code": "\nuint decode_unsigned_integer_0008189c(uint input_value)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input_value & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input_value = -input_value;\n  }\n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeros = LZCOUNT(input_value);\n  shift_amount = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_bit = result + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = input_value << leading_zeros + 0x18;\n  sign_bit = result + ((input_value >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "renaming": {
                "FUN_0008189c": "decode_unsigned_integer_0008189c",
                "param_1": "input_value",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit",
                "iVar4": "result"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000818b8": {
            "entrypoint": "0x000818b8",
            "current_name": "calculate_result_000818b8",
            "code": "\nuint calculateResult_000818b8(uint input1,uint input2)\n\n{\n  uint result;\n  uint temp;\n  uint shiftedBits;\n  uint shiftAmount;\n  int constant;\n  \n  if ((input1 | input2) == 0) {\n    return input1;\n  }\n  result = input1;\n  temp = input2;\n  if (input2 == 0) {\n    result = 0;\n    temp = input1;\n  }\n  constant = 0x5b000000;\n  if (input2 == 0) {\n    constant = 0x4b000000;\n  }\n  shiftedBits = LZCOUNT(temp);\n  shiftAmount = shiftedBits - 8;\n  constant = constant + -0x800000 + shiftAmount * -0x800000;\n  if (shiftedBits < 8) {\n    shiftAmount = temp << shiftedBits + 0x18;\n    temp = constant + ((temp >> (0x20 - (shiftedBits + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n    if ((result | shiftAmount << 1) == 0) {\n      temp = temp & ~(shiftAmount >> 0x1f);\n    }\n    return temp;\n  }\n  shiftedBits = result << (shiftAmount & 0xff);\n  temp = constant + (temp << (shiftAmount & 0xff)) +\n          (result >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < shiftedBits);\n  if (shiftedBits == 0x80000000) {\n    temp = temp & 0xfffffffe;\n  }\n  return temp;\n}\n\n",
            "renaming": {
                "FUN_000818b8": "calculate_result_000818b8",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "temp",
                "uVar3": "shiftedBits",
                "uVar4": "shiftAmount",
                "iVar5": "constant"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000818c8": {
            "entrypoint": "0x000818c8",
            "current_name": "calculate_result_000818c8",
            "code": "\nuint calculateResult_000818c8(uint input1,uint input2)\n\n{\n  uint result1;\n  uint result2;\n  uint shiftCount;\n  uint shiftedValue;\n  uint flag;\n  int adjustedValue;\n  bool isInput1Nonzero;\n  \n  if ((input1 | input2) == 0) {\n    return input1;\n  }\n  flag = input2 & 0x80000000;\n  if ((int)flag < 0) {\n    isInput1Nonzero = input1 != 0;\n    input1 = -input1;\n    input2 = -input2 - (uint)isInput1Nonzero;\n  }\n  result2 = input1;\n  result1 = input2;\n  if (input2 == 0) {\n    result2 = 0;\n    result1 = input1;\n  }\n  flag = flag | 0x5b000000;\n  if (input2 == 0) {\n    flag = flag + 0xf0000000;\n  }\n  shiftCount = LZCOUNT(result1);\n  shiftedValue = shiftCount - 8;\n  adjustedValue = (flag - 0x800000) + shiftedValue * -0x800000;\n  if (shiftCount < 8) {\n    shiftedValue = result1 << shiftCount + 0x18;\n    flag = adjustedValue + ((result1 >> (0x20 - (shiftCount + 0x18) & 0xff)) - ((int)shiftedValue >> 0x1f));\n    if ((result2 | shiftedValue << 1) == 0) {\n      flag = flag & ~(shiftedValue >> 0x1f);\n    }\n    return flag;\n  }\n  shiftCount = result2 << (shiftedValue & 0xff);\n  flag = adjustedValue + (result1 << (shiftedValue & 0xff)) +\n          (result2 >> (0x20 - shiftedValue & 0xff)) + (uint)(0x7fffffff < shiftCount);\n  if (shiftCount == 0x80000000) {\n    flag = flag & 0xfffffffe;\n  }\n  return flag;\n}\n\n",
            "renaming": {
                "FUN_000818c8": "calculate_result_000818c8",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "shiftCount",
                "uVar4": "shiftedValue",
                "uVar5": "flag",
                "iVar6": "adjustedValue",
                "bVar7": "isInput1Nonzero"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081944": {
            "entrypoint": "0x00081944",
            "current_name": "calculate_floating_point_00081944",
            "code": "\nuint calculateFloatingPoint_00081944(uint value1,uint value2,undefined4 constant,uint shiftAmount)\n\n{\n  longlong tempVar1;\n  uint result;\n  uint shiftedValue1;\n  int sum;\n  int difference;\n  uint product;\n  int iterationCount;\n  uint maskedResult;\n  bool isConditionTrue;\n  bool isBorrow;\n  \n  shiftedValue1 = value1 >> 0x17 & 0xff;\n  isConditionTrue = shiftedValue1 == 0;\n  if (!isConditionTrue) {\n    shiftAmount = value2 >> 0x17 & 0xff;\n    isConditionTrue = shiftAmount == 0;\n  }\n  if (!isConditionTrue) {\n    isConditionTrue = shiftedValue1 == 0xff;\n  }\n  if (!isConditionTrue) {\n    isConditionTrue = shiftAmount == 0xff;\n  }\n  if (isConditionTrue) {\n    shiftAmount = value2 >> 0x17 & 0xff;\n    if (shiftedValue1 == 0xff || shiftAmount == 0xff) {\n      isConditionTrue = value1 == 0 || value1 == 0x80000000;\n      result = value2;\n      if (value1 != 0 && value1 != 0x80000000) {\n        isConditionTrue = value2 == 0;\n        result = value1;\n      }\n      if (!isConditionTrue) {\n        isConditionTrue = value2 == 0x80000000;\n      }\n      maskedResult = result;\n      if (((isConditionTrue) || ((shiftedValue1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((shiftAmount == 0xff && (maskedResult = value2, (value2 & 0x7fffff) != 0)))) {\n        return maskedResult | 0x7fc00000;\n      }\n      result = result ^ value2;\n      goto LAB_00081a94;\n    }\n    isConditionTrue = (value1 & 0x7fffffff) == 0;\n    if (!isConditionTrue) {\n      isConditionTrue = (value2 & 0x7fffffff) == 0;\n    }\n    if (isConditionTrue) {\n      return (value1 ^ value2) & 0x80000000;\n    }\n    isConditionTrue = shiftedValue1 == 0;\n    result = value1 & 0x80000000;\n    while( true ) {\n      if (isConditionTrue) {\n        value1 = value1 << 1;\n        isConditionTrue = (value1 & 0x800000) == 0;\n      }\n      if (!isConditionTrue) break;\n      shiftedValue1 = shiftedValue1 - 1;\n    }\n    value1 = value1 | result;\n    isConditionTrue = shiftAmount == 0;\n    result = value2 & 0x80000000;\n    while( true ) {\n      if (isConditionTrue) {\n        value2 = value2 << 1;\n        isConditionTrue = (value2 & 0x800000) == 0;\n      }\n      if (!isConditionTrue) break;\n      shiftAmount = shiftAmount - 1;\n    }\n    value2 = value2 | result;\n  }\n  sum = shiftedValue1 + shiftAmount;\n  maskedResult = value1 ^ value2;\n  shiftedValue1 = value1 << 9;\n  isConditionTrue = shiftedValue1 == 0;\n  if (!isConditionTrue) {\n    value2 = value2 << 9;\n    isConditionTrue = value2 == 0;\n  }\n  if (isConditionTrue) {\n    if (shiftedValue1 == 0) {\n      value2 = value2 << 9;\n    }\n    result = maskedResult & 0x80000000 | value1 & 0x7fffff | value2 >> 9;\n    isBorrow = signedBorrow(sum,0x7f);\n    difference = sum + -0x7f;\n    isConditionTrue = difference == 0;\n    iterationCount = difference;\n    if (!isConditionTrue && 0x7e < sum) {\n      isBorrow = signedBorrow(0xff,difference);\n      iterationCount = 0xff - difference;\n      isConditionTrue = difference == 0xff;\n    }\n    if (!isConditionTrue && iterationCount < 0 == isBorrow) {\n      result = result | difference * 0x800000;\n    }\n    if (!isConditionTrue && iterationCount < 0 == isBorrow) {\n      return result;\n    }\n    result = result | 0x800000;\n    product = 0;\n    isBorrow = signedBorrow(difference,1);\n    maskedResult = sum - 0x80;\n    isConditionTrue = maskedResult == 0;\n    shiftedValue1 = maskedResult;\n  }\n  else {\n    tempVar1 = (ulonglong)(shiftedValue1 >> 5 | 0x8000000) * (ulonglong)(value2 >> 5 | 0x8000000);\n    product = (uint)tempVar1;\n    result = (uint)((ulonglong)tempVar1 >> 0x20);\n    isConditionTrue = result < 0x800000;\n    if (isConditionTrue) {\n      result = result << 1;\n    }\n    if (isConditionTrue) {\n      result = result | product >> 0x1f;\n      product = product << 1;\n    }\n    result = maskedResult & 0x80000000 | result;\n    maskedResult = (sum + -0x7f) - (uint)isConditionTrue;\n    isBorrow = signedBorrow(maskedResult,0xfd);\n    isConditionTrue = maskedResult == 0xfd;\n    shiftedValue1 = maskedResult - 0xfd;\n    if (maskedResult < 0xfe) {\n      result = result + maskedResult * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isConditionTrue || (int)shiftedValue1 < 0 != isBorrow) {\n    isConditionTrue = (int)(maskedResult + 0x19) < 0;\n    if (maskedResult == 0xffffffe7 || isConditionTrue != signedCarry(maskedResult,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (maskedResult != 0xffffffe7 && isConditionTrue == signedCarry(maskedResult,0x19)) {\n      shiftedValue1 = (result << 1) >> (-maskedResult & 0xff);\n      maskedResult = result << (maskedResult + 0x20 & 0xff);\n      shiftedValue1 = ((uint)((result & 0x80000000) != 0) << 0x1f | shiftedValue1 >> 1) + (uint)((byte)shiftedValue1 & 1);\n      if ((product | maskedResult << 1) == 0) {\n        shiftedValue1 = shiftedValue1 & ~(maskedResult >> 0x1f);\n      }\n      return shiftedValue1;\n    }\n    return result;\n  }\nLAB_00081a94:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081944": "calculate_floating_point_00081944",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "constant",
                "param_4": "shiftAmount",
                "lVar1": "tempVar1",
                "uVar2": "result",
                "uVar3": "shiftedValue1",
                "iVar4": "sum",
                "iVar5": "difference",
                "iVar7": "iterationCount",
                "uVar6": "product",
                "uVar8": "maskedResult",
                "bVar9": "isConditionTrue",
                "bVar10": "isBorrow",
                "SBORROW4": "signedBorrow",
                "SCARRY4": "signedCarry"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081aac": {
            "entrypoint": "0x00081aac",
            "current_name": "float_conversion_00081aac",
            "code": "\nuint floatConversion_00081aac(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  uint dividend;\n  uint divisor;\n  int diff;\n  uint bitMask;\n  int sum;\n  uint result;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  divisor = input1 >> 0x17 & 0xff;\n  condition1 = divisor == 0;\n  if (!condition1) {\n    input4 = input2 >> 0x17 & 0xff;\n    condition1 = input4 == 0;\n  }\n  if (!condition1) {\n    condition1 = divisor == 0xff;\n  }\n  if (!condition1) {\n    condition1 = input4 == 0xff;\n  }\n  if (condition1) {\n    input4 = input2 >> 0x17 & 0xff;\n    result = input1;\n    if (divisor == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (result = input2, input4 == 0xff)) {\nLAB_00081aa2:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (input4 == 0xff) {\n        result = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_00081a58:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_00081aa2;\n      }\n      condition1 = (input1 & 0x7fffffff) == 0;\n      if (!condition1) {\n        condition1 = (input2 & 0x7fffffff) == 0;\n      }\n      if (!condition1) {\n        condition1 = divisor == 0;\n        result = input1 & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            input1 = input1 << 1;\n            condition1 = (input1 & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          divisor = divisor - 1;\n        }\n        input1 = input1 | result;\n        condition1 = input4 == 0;\n        result = input2 & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            input2 = input2 << 1;\n            condition1 = (input2 & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          input4 = input4 - 1;\n        }\n        input2 = input2 | result;\n        goto LAB_00081ac4;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_00081a58;\n        goto LAB_00081aa2;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_00081ac4:\n    diff = divisor - input4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      condition3 = SCARRY4(diff,0x7f);\n      sum = diff + 0x7f;\n      condition1 = sum < 0;\n      condition2 = sum == 0;\n      if (!condition2 && condition1 == condition3) {\n        condition3 = SBORROW4(0xff,sum);\n        condition1 = 0xff - sum < 0;\n        condition2 = sum == 0xff;\n      }\n      if (!condition2 && condition1 == condition3) {\n        input1 = input1 | sum * 0x800000;\n      }\n      if (!condition2 && condition1 == condition3) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      divisor = 0;\n      condition2 = SBORROW4(sum,1);\n      bitMask = diff + 0x7e;\n      condition1 = bitMask == 0;\n      result = bitMask;\n    }\n    else {\n      dividend = (input2 << 9) >> 4 | 0x10000000;\n      divisor = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      condition1 = dividend <= divisor;\n      if (!condition1) {\n        divisor = divisor << 1;\n      }\n      bitMask = diff + 0x7d + (uint)condition1;\n      result = 0x800000;\n      do {\n        if (dividend <= divisor) {\n          divisor = divisor - dividend;\n          input1 = input1 | result;\n        }\n        condition1 = dividend >> 1 <= divisor;\n        if (condition1) {\n          divisor = divisor - (dividend >> 1);\n        }\n        if (condition1) {\n          input1 = input1 | result >> 1;\n        }\n        condition1 = dividend >> 2 <= divisor;\n        if (condition1) {\n          divisor = divisor - (dividend >> 2);\n        }\n        if (condition1) {\n          input1 = input1 | result >> 2;\n        }\n        condition1 = dividend >> 3 <= divisor;\n        if (condition1) {\n          divisor = divisor - (dividend >> 3);\n        }\n        if (condition1) {\n          input1 = input1 | result >> 3;\n        }\n        divisor = divisor * 0x10;\n        condition1 = divisor == 0;\n        if (!condition1) {\n          result = result >> 4;\n          condition1 = result == 0;\n        }\n      } while (!condition1);\n      condition2 = SBORROW4(bitMask,0xfd);\n      condition1 = bitMask == 0xfd;\n      result = bitMask - 0xfd;\n      if (bitMask < 0xfe) {\n        input1 = input1 + bitMask * 0x800000 + (uint)(dividend <= divisor);\n        if (divisor - dividend == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (condition1 || (int)result < 0 != condition2) {\n      condition1 = (int)(bitMask + 0x19) < 0;\n      if (bitMask == 0xffffffe7 || condition1 != SCARRY4(bitMask,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (bitMask == 0xffffffe7 || condition1 != SCARRY4(bitMask,0x19)) {\n        return input1;\n      }\n      result = (input1 << 1) >> (-bitMask & 0xff);\n      bitMask = input1 << (bitMask + 0x20 & 0xff);\n      result = ((uint)((input1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((divisor | bitMask << 1) == 0) {\n        result = result & ~(bitMask >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081aac": "float_conversion_00081aac",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "dividend",
                "uVar2": "divisor",
                "iVar3": "diff",
                "uVar4": "bitMask",
                "iVar5": "sum",
                "uVar6": "result",
                "bVar7": "condition1",
                "bVar8": "condition2",
                "bVar9": "condition3"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081be4": {
            "entrypoint": "0x00081be4",
            "current_name": "multiply_and_compare_00081be4",
            "code": "\nuint multiply_and_compare_00081be4(uint result,uint result)\n\n{\n  bool is_negative;\n  uint input_1_times_2;\n  uint input_2_times_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  input_1_times_2 = result * 2;\n  input_2_times_2 = result * 2;\n  if (((int)input_1_times_2 >> 0x18 == -1 || (int)input_2_times_2 >> 0x18 == -1) &&\n     ((((int)input_1_times_2 >> 0x18 == -1 && ((result & 0x7fffff) != 0)) ||\n      (((int)input_2_times_2 >> 0x18 == -1 && ((result & 0x7fffff) != 0)))))) {\n    return 0xffffffff;\n  }\n  combined_inputs = input_1_times_2 | result & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = result ^ result;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    result = input_1_times_2 + result * -2;\n    is_zero = result == 0;\n  }\n  if ((is_negative && input_2_times_2 <= input_1_times_2) && !is_zero) {\n    result = (int)result >> 0x1f;\n  }\n  if (!is_negative || input_2_times_2 > input_1_times_2) {\n    result = ~((int)result >> 0x1f);\n  }\n  if (!is_zero) {\n    result = result | 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081be4": "multiply_and_compare_00081be4",
                "param_1": "result",
                "param_2": "result",
                "uVar2": "input_1_times_2",
                "uVar3": "input_2_times_2",
                "uVar4": "combined_inputs",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081bec": {
            "entrypoint": "0x00081bec",
            "current_name": "check_and_modify_params_00081bec",
            "code": "\nuint checkAndModifyParams_00081bec(uint inputParam1,uint inputParam2)\n\n{\n  bool isNegative;\n  uint doubledParam1;\n  uint doubledParam2;\n  uint combinedParams;\n  bool isZero;\n  \n  doubledParam1 = inputParam1 * 2;\n  doubledParam2 = inputParam2 * 2;\n  if (((int)doubledParam1 >> 0x18 == -1 || (int)doubledParam2 >> 0x18 == -1) &&\n     ((((int)doubledParam1 >> 0x18 == -1 && ((inputParam1 & 0x7fffff) != 0)) ||\n      (((int)doubledParam2 >> 0x18 == -1 && ((inputParam2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combinedParams = doubledParam1 | inputParam2 & 0x7fffffff;\n  isZero = combinedParams == 0;\n  if (!isZero) {\n    combinedParams = inputParam1 ^ inputParam2;\n    isZero = combinedParams == 0;\n  }\n  isNegative = -1 < (int)combinedParams;\n  if (isNegative) {\n    inputParam1 = doubledParam1 + inputParam2 * -2;\n    isZero = inputParam1 == 0;\n  }\n  if ((isNegative && doubledParam2 <= doubledParam1) && !isZero) {\n    inputParam1 = (int)inputParam2 >> 0x1f;\n  }\n  if (!isNegative || doubledParam2 > doubledParam1) {\n    inputParam1 = ~((int)inputParam2 >> 0x1f);\n  }\n  if (!isZero) {\n    inputParam1 = inputParam1 | 1;\n  }\n  return inputParam1;\n}\n\n",
            "renaming": {
                "FUN_00081bec": "check_and_modify_params_00081bec",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "uVar2": "doubledParam1",
                "uVar3": "doubledParam2",
                "uVar4": "combinedParams",
                "bVar1": "isNegative",
                "bVar5": "isZero"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "entrypoint": "0x00081bf4",
            "current_name": "validate_inputs_00081bf4",
            "code": "\nuint validate_inputs_00081bf4(uint input_1,uint input_2)\n\n{\n  bool is_difference_negative;\n  uint double_input_1;\n  uint double_input_2;\n  uint combined_input;\n  bool is_result_zero;\n  \n  double_input_1 = input_1 * 2;\n  double_input_2 = input_2 * 2;\n  if (((int)double_input_1 >> 0x18 == -1 || (int)double_input_2 >> 0x18 == -1) &&\n     ((((int)double_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)double_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_input = double_input_1 | input_2 & 0x7fffffff;\n  is_result_zero = combined_input == 0;\n  if (!is_result_zero) {\n    combined_input = input_1 ^ input_2;\n    is_result_zero = combined_input == 0;\n  }\n  is_difference_negative = -1 < (int)combined_input;\n  if (is_difference_negative) {\n    input_1 = double_input_1 + input_2 * -2;\n    is_result_zero = input_1 == 0;\n  }\n  if ((is_difference_negative && double_input_2 <= double_input_1) && !is_result_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_difference_negative || double_input_2 > double_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_result_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_00081bf4": "validate_inputs_00081bf4",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "double_input_1",
                "uVar3": "double_input_2",
                "uVar4": "combined_input",
                "bVar1": "is_difference_negative",
                "bVar5": "is_result_zero"
            },
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c54": {
            "entrypoint": "0x00081c54",
            "current_name": "compare_floats_00081c54",
            "code": "\nvoid compareFloats_00081c54(undefined4 float1,undefined4 float2)\n\n{\n  __aeabi_cfcmpeq(float2,float1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081c54": "compare_floats_00081c54",
                "param_1": "float1",
                "param_2": "float2"
            },
            "calling": [
                "__aeabi_fcmpgt",
                "__aeabi_fcmpge"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "entrypoint": "0x00081c5c",
            "current_name": "concatenate_parameters_00081c5c",
            "code": "\nundefined8 concatenateParameters_00081c5c(undefined4 firstParameter,undefined4 secondParameter)\n\n{\n  __cmpsf2();\n  return CONCAT44(secondParameter,firstParameter);\n}\n\n",
            "renaming": {
                "FUN_00081c5c": "concatenate_parameters_00081c5c",
                "param_1": "firstParameter",
                "param_2": "secondParameter"
            },
            "calling": [
                "__aeabi_fcmpeq",
                "__aeabi_cfrcmple",
                "__aeabi_fcmple",
                "__aeabi_fcmplt"
            ],
            "called": [
                "__cmpsf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c6c": {
            "entrypoint": "0x00081c6c",
            "current_name": "check_if_not_zero_00081c6c",
            "code": "\nbool check_if_not_zero_00081c6c(void)\n\n{\n  char input_character;\n  \n  __aeabi_cfcmpeq();\n  return input_character != '\\0';\n}\n\n",
            "renaming": {
                "FUN_00081c6c": "check_if_not_zero_00081c6c",
                "in_ZR": "input_character"
            },
            "calling": [],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c80": {
            "entrypoint": "0x00081c80",
            "current_name": "is_cy_zero_00081c80",
            "code": "\nbool is_cy_zero_00081c80(void)\n\n{\n  char cy_value;\n  \n  __aeabi_cfcmpeq();\n  return cy_value == '\\0';\n}\n\n",
            "renaming": {
                "FUN_00081c80": "is_cy_zero_00081c80",
                "in_CY": "cy_value"
            },
            "calling": [],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c94": {
            "entrypoint": "0x00081c94",
            "current_name": "check_cf_compare_eq_00081c94",
            "code": "\nbool check_CF_COMPARE_EQ_00081c94(void)\n\n{\n  undefined zeroFlag;\n  undefined carryFlag;\n  \n  __aeabi_cfcmpeq();\n  return !(bool)carryFlag || (bool)zeroFlag;\n}\n\n",
            "renaming": {
                "FUN_00081c94": "check_cf_compare_eq_00081c94",
                "in_ZR": "zeroFlag",
                "in_CY": "carryFlag"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "entrypoint": "0x00081ca8",
            "current_name": "check_zero_or_negative_00081ca8",
            "code": "\nbool checkZeroOrNegative_00081ca8(void)\n\n{\n  undefined isZero;\n  undefined isNegative;\n  \n  __aeabi_cfrcmple();\n  return !(bool)isNegative || (bool)isZero;\n}\n\n",
            "renaming": {
                "FUN_00081ca8": "check_zero_or_negative_00081ca8",
                "in_ZR": "isZero",
                "in_CY": "isNegative"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081cbc": {
            "entrypoint": "0x00081cbc",
            "current_name": "is_null_character_present_00081cbc",
            "code": "\nbool is_null_character_present_00081cbc(void)\n\n{\n  char input_char;\n  \n  __aeabi_cfrcmple();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_00081cbc": "is_null_character_present_00081cbc",
                "in_CY": "input_char"
            },
            "calling": [],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "entrypoint": "0x00081cd0",
            "current_name": "extract_integer_from_binary_00081cd0",
            "code": "\nuint extractIntegerFromBinary_00081cd0(uint inputValue)\n\n{\n  uint shiftedValue;\n  uint difference;\n  \n  if (inputValue << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedValue = (inputValue << 1) >> 0x18;\n  difference = 0x9e - shiftedValue;\n  if (shiftedValue < 0x9f && difference != 0) {\n    shiftedValue = (inputValue << 8 | 0x80000000) >> (difference & 0xff);\n    if ((inputValue & 0x80000000) != 0) {\n      shiftedValue = -shiftedValue;\n    }\n    return shiftedValue;\n  }\n  if ((difference == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputValue = inputValue & 0x80000000;\n  if (inputValue == 0) {\n    inputValue = 0x7fffffff;\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_00081cd0": "extract_integer_from_binary_00081cd0",
                "param_1": "inputValue",
                "uVar1": "shiftedValue",
                "uVar2": "difference"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "entrypoint": "0x00081d1c",
            "current_name": "validate_input_00081d1c",
            "code": "\nuint validateInput_00081d1c(uint inputValue)\n\n{\n  uint shiftedValue;\n  \n  if (((inputValue & 0x80000000) != 0) || (inputValue << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shiftedValue = 0x9e - ((inputValue << 1) >> 0x18);\n  if (-1 < (int)shiftedValue) {\n    return (inputValue << 8 | 0x80000000) >> (shiftedValue & 0xff);\n  }\n  if ((shiftedValue == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081d1c": "validate_input_00081d1c",
                "param_1": "inputValue",
                "uVar1": "shiftedValue"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "entrypoint": "0x00081d5c",
            "current_name": "register_at_exit_function_00081d5c",
            "code": "\nvoid registerAtExitFunction_00081d5c(undefined4 exitFunction,undefined4 dsoHandle)\n\n{\n  __cxa_atexit(dsoHandle,exitFunction);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d5c": "register_at_exit_function_00081d5c",
                "param_1": "exitFunction",
                "param_2": "dsoHandle"
            },
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "called": [
                "__cxa_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d68": {
            "entrypoint": "0x00081d68",
            "current_name": "register_exit_procedure_00081d68",
            "code": "\nvoid registerExitProcedure_00081d68(undefined4 procType,undefined4 param1,undefined4 param2)\n\n{\n  __register_exitproc(2,procType,param1,param2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d68": "register_exit_procedure_00081d68",
                "param_1": "procType",
                "param_2": "param1",
                "param_3": "param2"
            },
            "calling": [
                "__aeabi_atexit"
            ],
            "called": [
                "__register_exitproc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "entrypoint": "0x00081d7c",
            "current_name": "initialize_and_execute_code_pointers_00081d7c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid initializeAndExecuteCodePointers_00081d7c(void)\n\n{\n  int iterationCount;\n  code **codePointers;\n  \n  _init();\n  codePointers = (code **)0x85860;\n  iterationCount = 0;\n  do {\n    iterationCount = iterationCount + 1;\n    codePointers = codePointers + 1;\n    (**codePointers)();\n  } while (iterationCount != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d7c": "initialize_and_execute_code_pointers_00081d7c",
                "ppcVar2": "codePointers",
                "iVar1": "iterationCount"
            },
            "calling": [
                "init"
            ],
            "called": [
                "register_fini",
                "_init",
                "frame_dummy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081dcc": {
            "entrypoint": "0x00081dcc",
            "current_name": "print_formatted_value_00081dcc",
            "code": "\nvoid printFormattedValue_00081dcc(undefined4 formatString,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined4 formattedValue1;\n  undefined4 formattedValue2;\n  undefined4 formattedValue3;\n  \n  formattedValue1 = value1;\n  formattedValue2 = value2;\n  formattedValue3 = value3;\n  _vfiprintf_r(_impure_ptr,*(undefined4 *)(_impure_ptr + 8),formatString,&formattedValue1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081dcc": "print_formatted_value_00081dcc",
                "param_1": "formatString",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "uStack_c": "formattedValue1",
                "uStack_8": "formattedValue2",
                "uStack_4": "formattedValue3"
            },
            "calling": [
                "_exit"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081df4": {
            "entrypoint": "0x00081df4",
            "current_name": "allocate_memory_00081df4",
            "code": "\nvoid * allocate_memory_00081df4(size_t size)\n\n{\n  void *allocated_memory;\n  \n  allocated_memory = (void *)_malloc_r(_impure_ptr,size);\n  return allocated_memory;\n}\n\n",
            "renaming": {
                "FUN_00081df4": "allocate_memory_00081df4",
                "__size": "size",
                "pvVar1": "allocated_memory"
            },
            "calling": [
                "__register_exitproc"
            ],
            "called": [
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e04": {
            "entrypoint": "0x00081e04",
            "current_name": "release_memory_00081e04",
            "code": "\nvoid releaseMemory_00081e04(void *memoryBlock)\n\n{\n  releaseMemory_00081e04_r(impurePtr,memoryBlock);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e04": "release_memory_00081e04",
                "__ptr": "memoryBlock",
                "_free_r": "releaseMemory_r",
                "_impure_ptr": "impurePtr"
            },
            "calling": [
                "~String",
                "invalidate"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e14": {
            "entrypoint": "0x00081e14",
            "current_name": "allocate_memory_00081e14",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_00081e14(undefined4 *mem_lock,uint size)\n\n{\n  undefined1 *ptr1;\n  int val1;\n  uint val2;\n  uint val3;\n  int val4;\n  uint val5;\n  uint val6;\n  uint val7;\n  undefined4 *ptr2;\n  undefined1 *ptr3;\n  undefined1 *ptr4;\n  undefined1 *ptr5;\n  uint adjusted_size;\n  undefined4 *ptr6;\n  undefined4 *ptr7;\n  undefined1 *ptr8;\n  \n  if (size + 0xb < 0x17) {\n    adjusted_size = 0x10;\n    if (0x10 < size) goto LAB_00081e7a;\n  }\n  else {\n    adjusted_size = size + 0xb & 0xfffffff8;\n    if (((int)adjusted_size < 0) || (adjusted_size < size)) {\nLAB_00081e7a:\n      *mem_lock = 0xc;\n      return (int *)0x0;\n    }\n  }\n  __malloc_lock(mem_lock);\n  ptr6 = DAT_20070474;\n  if (adjusted_size < 0x1f8) {\n    ptr5 = *(undefined1 **)((int)&DAT_20070470 + adjusted_size);\n    if ((ptr5 != &__malloc_av_ + adjusted_size) ||\n       (ptr4 = ptr5 + 8, ptr5 = *(undefined1 **)(ptr5 + 0x14), ptr4 != ptr5)) {\n      val7 = *(uint *)(ptr5 + 4);\n      val4 = *(int *)(ptr5 + 0xc);\n      adjusted_size = *(uint *)(ptr5 + (val7 & 0xfffffffc) + 4);\n      val1 = *(int *)(ptr5 + 8);\n      *(int *)(val1 + 0xc) = val4;\n      *(int *)(val4 + 8) = val1;\n      *(uint *)(ptr5 + (val7 & 0xfffffffc) + 4) = adjusted_size | 1;\n      __malloc_unlock(mem_lock);\n      return (int *)(ptr5 + 8);\n    }\n    val7 = (adjusted_size >> 3) + 2;\n  }\n  else {\n    val7 = adjusted_size >> 9;\n    if (val7 == 0) {\n      val4 = 0x7e;\n      val1 = 0x3f;\n    }\n    else if (val7 < 5) {\n      val1 = (adjusted_size >> 6) + 0x38;\n      val4 = val1 * 2;\n    }\n    else if (val7 < 0x15) {\n      val1 = val7 + 0x5b;\n      val4 = val1 * 2;\n    }\n    else if (val7 < 0x55) {\n      val1 = (adjusted_size >> 0xc) + 0x6e;\n      val4 = val1 * 2;\n    }\n    else if (val7 < 0x155) {\n      val1 = (adjusted_size >> 0xf) + 0x77;\n      val4 = val1 * 2;\n    }\n    else if (val7 < 0x555) {\n      val1 = (adjusted_size >> 0x12) + 0x7c;\n      val4 = val1 * 2;\n    }\n    else {\n      val4 = 0xfc;\n      val1 = 0x7e;\n    }\n    for (ptr5 = (undefined1 *)(&DAT_20070470)[val4]; &__malloc_av_ + val4 * 4 != ptr5;\n        ptr5 = *(undefined1 **)(ptr5 + 0xc)) {\n      val7 = *(uint *)(ptr5 + 4) & 0xfffffffc;\n      if (0xf < (int)(val7 - adjusted_size)) {\n        val1 = val1 + -1;\n        break;\n      }\n      if (-1 < (int)(val7 - adjusted_size)) {\n        adjusted_size = *(uint *)(ptr5 + val7 + 4);\n        val4 = *(int *)(ptr5 + 0xc);\n        val1 = *(int *)(ptr5 + 8);\n        *(int *)(val1 + 0xc) = val4;\n        *(int *)(val4 + 8) = val1;\n        *(uint *)(ptr5 + val7 + 4) = adjusted_size | 1;\n        __malloc_unlock(mem_lock);\n        return (int *)(ptr5 + 8);\n      }\n    }\n    val7 = val1 + 1;\n  }\n  val2 = DAT_20070468;\n  if ((undefined1 **)DAT_20070474 != &DAT_2007046c) {\n    val2 = DAT_20070474[1];\n    val3 = val2 & 0xfffffffc;\n    val5 = val3 - adjusted_size;\n    if (0xf < (int)val5) {\n      ptr7 = (undefined4 *)(adjusted_size + (int)DAT_20070474);\n      DAT_20070474[1] = adjusted_size | 1;\n      DAT_20070474 = ptr7;\n      DAT_20070478 = ptr7;\n      ptr7[3] = &DAT_2007046c;\n      ptr7[2] = &DAT_2007046c;\n      ptr7[1] = val5 | 1;\n      *(uint *)((int)ptr7 + val5) = val5;\n      __malloc_unlock(mem_lock);\n      return ptr6 + 2;\n    }\n    DAT_20070478 = &DAT_2007046c;\n    DAT_20070474 = &DAT_2007046c;\n    if (-1 < (int)val5) {\n      *(uint *)((int)ptr6 + val3 + 4) = *(uint *)((int)ptr6 + val3 + 4) | 1;\n      __malloc_unlock(mem_lock);\n      return ptr6 + 2;\n    }\n    if (val3 < 0x200) {\n      val3 = val2 & 0xfffffff8;\n      val1 = *(int *)((int)&DAT_2007046c + val3);\n      val2 = 1 << ((int)(val2 >> 3) >> 2 & 0xffU) | DAT_20070468;\n      ptr6[2] = val1;\n      ptr6[3] = &__malloc_av_ + val3;\n      DAT_20070468 = val2;\n      *(undefined4 **)((int)&DAT_2007046c + val3) = ptr6;\n      *(undefined4 **)(val1 + 0xc) = ptr6;\n    }\n    else {\n      val5 = val2 >> 9;\n      if (val5 < 5) {\n        val4 = (val2 >> 6) + 0x38;\n        val1 = val4 * 2;\n      }\n      else if (val5 < 0x15) {\n        val4 = val5 + 0x5b;\n        val1 = val4 * 2;\n      }\n      else if (val5 < 0x55) {\n        val4 = (val2 >> 0xc) + 0x6e;\n        val1 = val4 * 2;\n      }\n      else if (val5 < 0x155) {\n        val4 = (val2 >> 0xf) + 0x77;\n        val1 = val4 * 2;\n      }\n      else if (val5 < 0x555) {\n        val4 = (val2 >> 0x12) + 0x7c;\n        val1 = val4 * 2;\n      }\n      else {\n        val1 = 0xfc;\n        val4 = 0x7e;\n      }\n      ptr5 = (&DAT_2007046c)[val1];\n      if (ptr5 == &__malloc_av_ + val1 * 4) {\n        DAT_20070468 = DAT_20070468 | 1 << (val4 >> 2 & 0xffU);\n        ptr4 = ptr5;\n      }\n      else {\n        do {\n          ptr4 = ptr5;\n          if ((*(uint *)(ptr5 + 4) & 0xfffffffc) <= val3) break;\n          ptr5 = *(undefined1 **)(ptr5 + 8);\n          ptr4 = ptr5;\n        } while (&__malloc_av_ + val1 * 4 != ptr5);\n        ptr5 = *(undefined1 **)(ptr4 + 0xc);\n      }\n      val2 = DAT_20070468;\n      ptr6[3] = ptr5;\n      ptr6[2] = ptr4;\n      *(undefined4 **)(ptr5 + 8) = ptr6;\n      *(undefined4 **)(ptr4 + 0xc) = ptr6;\n    }\n  }\n  ptr5 = DAT_2007046c;\n  val3 = 1 << ((int)val7 >> 2 & 0xffU);\n  if (val3 <= val2) {\n    if ((val2 & val3) == 0) {\n      val7 = val7 & 0xfffffffc;\n      do {\n        val3 = val3 << 1;\n        val7 = val7 + 4;\n      } while ((val2 & val3) == 0);\n    }\n    do {\n      ptr7 = (undefined4 *)(&__malloc_av_ + val7 * 8);\n      ptr6 = ptr7;\n      val2 = val7;\n      do {\n        for (ptr2 = (undefined4 *)ptr6[3]; ptr6 != ptr2; ptr2 = (undefined4 *)ptr2[3])\n        {\n          val5 = ptr2[1] & 0xfffffffc;\n          val6 = val5 - adjusted_size;\n          if (0xf < (int)val6) {\n            val4 = ptr2[2];\n            val1 = ptr2[3];\n            ptr6 = (undefined4 *)(adjusted_size + (int)ptr2);\n            ptr2[1] = adjusted_size | 1;\n            *(int *)(val4 + 0xc) = val1;\n            *(int *)(val1 + 8) = val4;\n            DAT_20070474 = ptr6;\n            DAT_20070478 = ptr6;\n            ptr6[3] = &DAT_2007046c;\n            ptr6[2] = &DAT_2007046c;\n            ptr6[1] = val6 | 1;\n            *(uint *)((int)ptr6 + val6) = val6;\n            __malloc_unlock(mem_lock);\n            return ptr2 + 2;\n          }\n          if (-1 < (int)val6) {\n            val1 = ptr2[2];\n            val4 = ptr2[3];\n            *(uint *)((int)ptr2 + val5 + 4) = *(uint *)((int)ptr2 + val5 + 4) | 1;\n            *(int *)(val1 + 0xc) = val4;\n            *(int *)(val4 + 8) = val1;\n            __malloc_unlock(mem_lock);\n            return ptr2 + 2;\n          }\n        }\n        val2 = val2 + 1;\n        ptr6 = ptr6 + 2;\n      } while ((val2 & 3) != 0);\n      do {\n        val5 = val7 & 3;\n        ptr6 = ptr7 + -2;\n        val7 = val7 - 1;\n        if (val5 == 0) {\n          DAT_20070468 = DAT_20070468 & ~val3;\n          break;\n        }\n        ptr7 = (undefined4 *)*ptr7;\n      } while (ptr7 == ptr6);\n      val3 = val3 * 2;\n      if ((DAT_20070468 <= val3 && val3 - DAT_20070468 != 0) || (val7 = val2, val3 == 0))\n      break;\n      for (; (DAT_20070468 & val3) == 0; val3 = val3 << 1) {\n        val7 = val7 + 4;\n      }\n    } while( true );\n  }\n  val7 = *(uint *)(DAT_2007046c + 4) & 0xfffffffc;\n  if ((adjusted_size <= val7) && (val2 = val7 - adjusted_size, ptr4 = DAT_2007046c, 0xf < (int)val2))\n  goto LAB_0008211e;\n  ptr8 = DAT_2007046c + val7;\n  if (__malloc_sbrk_base == (undefined1 *)0xffffffff) {\n    val2 = adjusted_size + __malloc_top_pad + 0x10;\n  }\n  else {\n    val2 = adjusted_size + __malloc_top_pad + 0x100f & 0xfffff000;\n  }\n  ptr4 = (undefined1 *)_sbrk_r(mem_lock,val2);\n  if ((ptr4 == (undefined1 *)0xffffffff) || ((ptr4 < ptr8 && (ptr5 != &__malloc_av_))))\n  {\n    val7 = *(uint *)(DAT_2007046c + 4) & 0xfffffffc;\n    ptr4 = DAT_2007046c;\n  }\n  else {\n    ptr3 = __malloc_current_mallinfo + val2;\n    __malloc_current_mallinfo = ptr3;\n    if ((ptr8 == ptr4) && (((uint)ptr8 & 0xfff) == 0)) {\n      *(uint *)(DAT_2007046c + 4) = val2 + val7 | 1;\n    }\n    else {\n      ptr1 = ptr4;\n      if (__malloc_sbrk_base != (undefined1 *)0xffffffff) {\n        ptr1 = __malloc_sbrk_base;\n        __malloc_current_mallinfo = ptr3 + ((int)ptr4 - (int)ptr8);\n      }\n      __malloc_sbrk_base = ptr1;\n      val3 = (uint)ptr4 & 7;\n      if (val3 == 0) {\n        val1 = 0x1000;\n      }\n      else {\n        ptr4 = ptr4 + (8 - val3);\n        val1 = 0x1008 - val3;\n      }\n      val1 = val1 - ((uint)(ptr4 + val2) & 0xfff);\n      val4 = _sbrk_r(mem_lock,val1);\n      if (val4 == -1) {\n        val2 = 1;\n        val1 = 0;\n      }\n      else {\n        val2 = (val4 - (int)ptr4) + val1 | 1;\n      }\n      ptr3 = __malloc_current_mallinfo + val1;\n      DAT_2007046c = ptr4;\n      __malloc_current_mallinfo = ptr3;\n      *(uint *)(ptr4 + 4) = val2;\n      if (ptr5 != &__malloc_av_) {\n        if (val7 < 0x10) {\n          *(undefined4 *)(ptr4 + 4) = 1;\n          val7 = 0;\n          goto LAB_00082108;\n        }\n        val7 = val7 - 0xc & 0xfffffff8;\n        *(uint *)(ptr5 + 4) = val7 | *(uint *)(ptr5 + 4) & 1;\n        *(undefined4 *)(ptr5 + val7 + 4) = 5;\n        *(undefined4 *)(ptr5 + val7 + 8) = 5;\n        if (0xf < val7) {\n          _free_r(mem_lock,ptr5 + 8);\n          ptr3 = __malloc_current_mallinfo;\n        }\n      }\n    }\n    if (__malloc_max_sbrked_mem < ptr3) {\n      __malloc_max_sbrked_mem = ptr3;\n    }\n    if (__malloc_max_total_mem < ptr3) {\n      __malloc_max_total_mem = ptr3;\n    }\n    val7 = *(uint *)(DAT_2007046c + 4) & 0xfffffffc;\n    ptr4 = DAT_2007046c;\n  }\nLAB_00082108:\n  val2 = val7 - adjusted_size;\n  if ((val7 < adjusted_size) || ((int)val2 < 0x10)) {\n    __malloc_unlock(mem_lock);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  DAT_2007046c = ptr4 + adjusted_size;\n  *(uint *)(ptr4 + 4) = adjusted_size | 1;\n  *(uint *)(DAT_2007046c + 4) = val2 | 1;\n  __malloc_unlock(mem_lock);\n  return (int *)(ptr4 + 8);\n}\n\n",
            "renaming": {
                "FUN_00081e14": "allocate_memory_00081e14",
                "param_1": "mem_lock",
                "param_2": "size",
                "puVar1": "ptr1",
                "iVar2": "val1",
                "uVar3": "val2",
                "uVar4": "val3",
                "iVar5": "val4",
                "uVar6": "val5",
                "uVar7": "val6",
                "uVar8": "val7",
                "puVar9": "ptr2",
                "puVar10": "ptr3",
                "puVar11": "ptr4",
                "puVar12": "ptr5",
                "uVar13": "adjusted_size",
                "puVar14": "ptr6",
                "puVar15": "ptr7",
                "puVar16": "ptr8"
            },
            "calling": [
                "malloc",
                "__sfvwrite_r",
                "_realloc_r",
                "__smakebuf_r"
            ],
            "called": [
                "__malloc_unlock",
                "_sbrk_r",
                "__malloc_lock",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008234c": {
            "entrypoint": "0x0008234c",
            "current_name": "memcpy_0008234c",
            "code": "\nvoid * memcpy_0008234c(void *destination,void *source,size_t length)\n\n{\n  undefined *destPtr;\n  undefined4 *destAlignedPtr;\n  undefined4 *destAlignedPtrTemp;\n  undefined *srcPtr;\n  undefined4 *srcAlignedPtr;\n  undefined *srcPtrTemp;\n  uint remainingSize;\n  uint alignment;\n  bool isRemaining;\n  \n  destAlignedPtrTemp = (undefined4 *)destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (length < 8) {\n      alignment = length - 4;\n      destPtr = (undefined *)destination;\n      if (3 < length) {\n        do {\n          srcPtrTemp = (undefined *)source;\n          srcPtr = destPtr;\n          isRemaining = alignment != 0;\n          alignment = alignment - 1;\n          *srcPtr = *srcPtrTemp;\n          destPtr = srcPtr + 1;\n          source = srcPtrTemp + 1;\n        } while (isRemaining);\n        srcPtr[1] = srcPtrTemp[1];\n        srcPtr[2] = srcPtrTemp[2];\n        srcPtr[3] = srcPtrTemp[3];\n        return destination;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      alignment = 4 - ((uint)destination & 3);\n      length = length - alignment;\n      destAlignedPtr = (undefined4 *)destination;\n      srcAlignedPtr = (undefined4 *)source;\n                    /* WARNING: Load size is inaccurate */\n      if (((uint)destination & 1) != 0) {\n        srcAlignedPtr = (undefined4 *)((int)source + 1);\n        destAlignedPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *source;\n      }\n      destAlignedPtrTemp = destAlignedPtr;\n      source = srcAlignedPtr;\n      if ((alignment & 2) != 0) {\n        source = (void *)((int)srcAlignedPtr + 2);\n        destAlignedPtrTemp = (undefined4 *)((int)destAlignedPtr + 2);\n        *(undefined2 *)destAlignedPtr = *(undefined2 *)srcAlignedPtr;\n      }\n    }\n  }\n  while (0x3f < length) {\n                    /* WARNING: Load size is inaccurate */\n    *destAlignedPtrTemp = *source;\n    destAlignedPtrTemp[1] = *(undefined4 *)((int)source + 4);\n    destAlignedPtrTemp[2] = *(undefined4 *)((int)source + 8);\n    destAlignedPtrTemp[3] = *(undefined4 *)((int)source + 0xc);\n    destAlignedPtrTemp[4] = *(undefined4 *)((int)source + 0x10);\n    destAlignedPtrTemp[5] = *(undefined4 *)((int)source + 0x14);\n    destAlignedPtrTemp[6] = *(undefined4 *)((int)source + 0x18);\n    destAlignedPtrTemp[7] = *(undefined4 *)((int)source + 0x1c);\n    destAlignedPtrTemp[8] = *(undefined4 *)((int)source + 0x20);\n    destAlignedPtrTemp[9] = *(undefined4 *)((int)source + 0x24);\n    destAlignedPtrTemp[10] = *(undefined4 *)((int)source + 0x28);\n    destAlignedPtrTemp[0xb] = *(undefined4 *)((int)source + 0x2c);\n    destAlignedPtrTemp[0xc] = *(undefined4 *)((int)source + 0x30);\n    destAlignedPtrTemp[0xd] = *(undefined4 *)((int)source + 0x34);\n    destAlignedPtrTemp[0xe] = *(undefined4 *)((int)source + 0x38);\n    destAlignedPtrTemp[0xf] = *(undefined4 *)((int)source + 0x3c);\n    destAlignedPtrTemp = destAlignedPtrTemp + 0x10;\n    source = (undefined4 *)((int)source + 0x40);\n    length = length - 0x40;\n  }\n  remainingSize = length - 0x10;\n  if (0xffffffcf < length - 0x40) {\n    do {\n                    /* WARNING: Load size is inaccurate */\n      *destAlignedPtrTemp = *source;\n      destAlignedPtrTemp[1] = *(undefined4 *)((int)source + 4);\n      destAlignedPtrTemp[2] = *(undefined4 *)((int)source + 8);\n      destAlignedPtrTemp[3] = *(undefined4 *)((int)source + 0xc);\n      destAlignedPtrTemp = destAlignedPtrTemp + 4;\n      source = (void *)((int)source + 0x10);\n      isRemaining = 0xf < remainingSize;\n      remainingSize = remainingSize - 0x10;\n    } while (isRemaining);\n  }\n  alignment = remainingSize + 0xc;\n  srcAlignedPtr = destAlignedPtrTemp;\n  destAlignedPtr = (undefined4 *)source;\n  if (0xfffffff3 < remainingSize) {\n    do {\n      source = destAlignedPtr + 1;\n      *srcAlignedPtr = *destAlignedPtr;\n      isRemaining = 3 < alignment;\n      alignment = alignment - 4;\n      destAlignedPtrTemp = srcAlignedPtr + 1;\n      srcAlignedPtr = srcAlignedPtr + 1;\n      destAlignedPtr = (undefined4 *)source;\n    } while (isRemaining);\n  }\nLAB_000823d0:\n  if (alignment + 4 != 0) {\n    destAlignedPtr = destAlignedPtrTemp;\n    srcAlignedPtr = (undefined4 *)source;\n                    /* WARNING: Load size is inaccurate */\n    if ((alignment & 1) != 0) {\n      srcAlignedPtr = (undefined4 *)((int)source + 1);\n      destAlignedPtr = (undefined4 *)((int)destAlignedPtrTemp + 1);\n      *(undefined *)destAlignedPtrTemp = *source;\n    }\n    if ((alignment + 4 & 2) != 0) {\n      *(undefined2 *)destAlignedPtr = *(undefined2 *)srcAlignedPtr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_0008234c": "memcpy_0008234c",
                "__dest": "destination",
                "__src": "source",
                "__n": "length",
                "puVar1": "destPtr",
                "puVar2": "destAlignedPtr",
                "puVar3": "destAlignedPtrTemp",
                "puVar4": "srcPtr",
                "puVar5": "srcAlignedPtr",
                "puVar6": "srcPtrTemp",
                "uVar7": "remainingSize",
                "uVar8": "alignment",
                "bVar9": "isRemaining"
            },
            "calling": [
                "__sfvwrite_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082438": {
            "entrypoint": "0x00082438",
            "current_name": "copy_memory_backward_00082438",
            "code": "\nvoid * copy_memory_backward_00082438(void *destination,void *source,size_t length)\n\n{\n  int i;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *tmp_dest_ptr;\n  undefined *tmp_src_ptr;\n  uint remaining_length;\n  undefined *tmp_end_ptr;\n  uint remaining_copy_length;\n  \n  if ((source < destination) && (tmp_src_ptr = (undefined *)((int)source + length), destination < tmp_src_ptr)) {\n    tmp_end_ptr = (undefined *)((int)destination + length);\n    i = length - 1;\n    if (length != 0) {\n      do {\n        tmp_src_ptr = tmp_src_ptr + -1;\n        i = i + -1;\n        tmp_end_ptr = tmp_end_ptr + -1;\n        *tmp_end_ptr = *tmp_src_ptr;\n      } while (i != -1);\n    }\n    return destination;\n  }\n  dest_ptr = (undefined4 *)destination;\n  if (length < 0x10) {\n    if (length == 0) {\n      return destination;\n    }\n  }\n  else if ((((uint)destination | (uint)source) & 3) == 0) {\n    src_ptr = (undefined4 *)source;\n    do {\n      tmp_dest_ptr = dest_ptr + 4;\n      *dest_ptr = *src_ptr;\n      dest_ptr[1] = src_ptr[1];\n      dest_ptr[2] = src_ptr[2];\n      dest_ptr[3] = src_ptr[3];\n      dest_ptr = tmp_dest_ptr;\n      src_ptr = src_ptr + 4;\n    } while (tmp_dest_ptr != (undefined4 *)((int)destination + (length - 0x10 & 0xfffffff0) + 0x10));\n    remaining_copy_length = length & 0xf;\n    i = ((length - 0x10 >> 4) + 1) * 0x10;\n    source = (void *)((int)source + i);\n    dest_ptr = (undefined4 *)(i + (int)destination);\n    remaining_length = remaining_copy_length;\n    src_ptr = dest_ptr;\n    tmp_dest_ptr = (undefined4 *)source;\n    if (3 < remaining_copy_length) {\n      do {\n        remaining_length = remaining_length - 4;\n        *src_ptr = *tmp_dest_ptr;\n        src_ptr = src_ptr + 1;\n        tmp_dest_ptr = tmp_dest_ptr + 1;\n      } while (3 < remaining_length);\n      i = (remaining_copy_length - 4 & 0xfffffffc) + 4;\n      dest_ptr = (undefined4 *)((int)dest_ptr + i);\n      source = (void *)((int)source + i);\n      remaining_copy_length = length & 3;\n    }\n    length = remaining_copy_length;\n    if (length == 0) {\n      return destination;\n    }\n  }\n  src_ptr = dest_ptr;\n  do {\n                    /* WARNING: Load size is inaccurate */\n    tmp_dest_ptr = (undefined4 *)((int)src_ptr + 1);\n    *(undefined *)src_ptr = *source;\n    source = (undefined4 *)((int)source + 1);\n    src_ptr = tmp_dest_ptr;\n  } while (tmp_dest_ptr != (undefined4 *)(length + (int)dest_ptr));\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00082438": "copy_memory_backward_00082438",
                "__dest": "destination",
                "__src": "source",
                "__n": "length",
                "iVar1": "i",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "tmp_dest_ptr",
                "puVar5": "tmp_src_ptr",
                "uVar6": "remaining_length",
                "puVar7": "tmp_end_ptr",
                "uVar8": "remaining_copy_length"
            },
            "calling": [
                "__sfvwrite_r",
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082504": {
            "entrypoint": "0x00082504",
            "current_name": "memset_00082504",
            "code": "\nvoid * memset_00082504(void *buffer,int character,size_t size)\n\n{\n  uint *buffer_ptr;\n  uint *current_ptr;\n  uint *next_ptr;\n  uint pattern;\n  uint remaining_size;\n  bool is_end_of_data;\n  \n  current_ptr = (uint *)buffer;\n  if (((uint)buffer & 3) != 0) {\n    is_end_of_data = size == 0;\n    buffer_ptr = (uint *)buffer;\n    size = size - 1;\n    if (is_end_of_data) {\n      return buffer;\n    }\n    while( true ) {\n      current_ptr = (uint *)((int)buffer_ptr + 1);\n      *(char *)buffer_ptr = (char)character;\n      if (((uint)current_ptr & 3) == 0) break;\n      is_end_of_data = size == 0;\n      buffer_ptr = current_ptr;\n      size = size - 1;\n      if (is_end_of_data) {\n        return buffer;\n      }\n    }\n  }\n  if (3 < size) {\n    pattern = character & 0xffU | (character & 0xffU) << 8;\n    pattern = pattern | pattern << 0x10;\n    remaining_size = size;\n    buffer_ptr = current_ptr;\n    if (0xf < size) {\n      remaining_size = size - 0x10;\n      do {\n        *buffer_ptr = pattern;\n        buffer_ptr[1] = pattern;\n        buffer_ptr[2] = pattern;\n        buffer_ptr[3] = pattern;\n        buffer_ptr = buffer_ptr + 4;\n      } while (buffer_ptr != (uint *)((int)current_ptr + (remaining_size & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      current_ptr = current_ptr + ((remaining_size >> 4) + 1) * 4;\n      remaining_size = size;\n      buffer_ptr = current_ptr;\n      if (size < 4) goto LAB_00082580;\n    }\n    do {\n      size = size - 4;\n      *current_ptr = pattern;\n      current_ptr = current_ptr + 1;\n    } while (3 < size);\n    current_ptr = (uint *)((int)buffer_ptr + (remaining_size - 4 & 0xfffffffc) + 4);\n    size = remaining_size & 3;\n  }\nLAB_00082580:\n  if (size != 0) {\n    buffer_ptr = current_ptr;\n    do {\n      next_ptr = (uint *)((int)buffer_ptr + 1);\n      *(char *)buffer_ptr = (char)character;\n      buffer_ptr = next_ptr;\n    } while (next_ptr != (uint *)(size + (int)current_ptr));\n  }\n  return buffer;\n}\n\n",
            "renaming": {
                "FUN_00082504": "memset_00082504",
                "__s": "buffer",
                "__c": "character",
                "__n": "size",
                "puVar1": "buffer_ptr",
                "puVar2": "current_ptr",
                "puVar3": "next_ptr",
                "uVar4": "pattern",
                "uVar5": "remaining_size",
                "bVar6": "is_end_of_data"
            },
            "calling": [
                "RingBuffer",
                "__sinit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082598": {
            "entrypoint": "0x00082598",
            "current_name": "FUNC_00082598",
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "calling": [
                "_malloc_r",
                "_realloc_r",
                "_malloc_trim_r",
                "_free_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008259c": {
            "entrypoint": "0x0008259c",
            "current_name": "FUNC_0008259c",
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "calling": [
                "_malloc_r",
                "_realloc_r",
                "_malloc_trim_r",
                "_free_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000825a0": {
            "entrypoint": "0x000825a0",
            "current_name": "realloc_memory_000825a0",
            "code": "\nvoid * reallocMemory_000825a0(void *inputPointer,size_t newSize)\n\n{\n  void *reallocatedPointer;\n  \n  reallocatedPointer = (void *)_realloc_r(_impure_ptr,inputPointer,newSize);\n  return reallocatedPointer;\n}\n\n",
            "renaming": {
                "FUN_000825a0": "realloc_memory_000825a0",
                "__ptr": "inputPointer",
                "__size": "newSize",
                "pvVar1": "reallocatedPointer"
            },
            "calling": [
                "changeBuffer"
            ],
            "called": [
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825b0": {
            "entrypoint": "0x000825b0",
            "current_name": "allocate_memory_000825b0",
            "code": "\nint * allocate_memory_000825b0(undefined4 *lock,int *current_block,uint size)\n\n{\n  int current_header;\n  int *allocated_block;\n  uint realloc_size;\n  size_t copy_size;\n  uint block_size;\n  int next_header;\n  int *new_block;\n  uint remaining_size;\n  uint aligned_size;\n  int *new_allocated_block;\n  \n  if (current_block == (int *)0x0) {\n    allocated_block = (int *)_malloc_r(lock,size);\n    return allocated_block;\n  }\n  __malloc_lock();\n  block_size = current_block[-1];\n  remaining_size = block_size & 0xfffffffc;\n  allocated_block = current_block + -2;\n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_0008267c;\n  }\n  if (aligned_size < size) {\nLAB_0008267c:\n    *lock = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)remaining_size < (int)aligned_size) {\n    current_header = (int)allocated_block + remaining_size;\n    if (DAT_2007046c == current_header) {\n      realloc_size = *(uint *)(DAT_2007046c + 4) & 0xfffffffc;\n      current_header = DAT_2007046c;\n      if ((int)(aligned_size + 0x10) <= (int)(realloc_size + remaining_size)) {\n        DAT_2007046c = (int)allocated_block + aligned_size;\n        *(uint *)(DAT_2007046c + 4) = (realloc_size + remaining_size) - aligned_size | 1;\n        current_block[-1] = aligned_size | current_block[-1] & 1U;\n        __malloc_unlock(lock);\n        return current_block;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(current_header + 4) & 0xfffffffe) + current_header + 4) & 1) == 0) {\n      realloc_size = *(uint *)(current_header + 4) & 0xfffffffc;\n      if ((int)aligned_size <= (int)(realloc_size + remaining_size)) {\n        next_header = *(int *)(current_header + 0xc);\n        current_header = *(int *)(current_header + 8);\n        *(int *)(current_header + 0xc) = next_header;\n        *(int *)(next_header + 8) = current_header;\n        remaining_size = realloc_size + remaining_size;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      realloc_size = 0;\n      current_header = 0;\n    }\n    if (-1 < (int)(block_size << 0x1f)) {\n      new_allocated_block = (int *)((int)allocated_block - current_block[-2]);\n      block_size = (new_allocated_block[1] & 0xfffffffcU) + remaining_size;\n      if (current_header != 0) {\n        if (current_header == DAT_2007046c) {\n          if ((int)(aligned_size + 0x10) <= (int)(realloc_size + block_size)) {\n            allocated_block = new_allocated_block + 2;\n            current_header = *allocated_block;\n            next_header = new_allocated_block[3];\n            copy_size = remaining_size - 4;\n            *(int *)(current_header + 0xc) = next_header;\n            *(int *)(next_header + 8) = current_header;\n            if (copy_size < 0x25) {\n              new_block = allocated_block;\n              if (0x13 < copy_size) {\n                new_allocated_block[2] = *current_block;\n                new_allocated_block[3] = current_block[1];\n                if (copy_size < 0x1c) {\n                  current_block = current_block + 2;\n                  new_block = new_allocated_block + 4;\n                }\n                else {\n                  new_allocated_block[4] = current_block[2];\n                  new_allocated_block[5] = current_block[3];\n                  if (copy_size == 0x24) {\n                    new_allocated_block[6] = current_block[4];\n                    new_block = current_block + 5;\n                    current_block = current_block + 6;\n                    new_allocated_block[7] = *new_block;\n                    new_block = new_allocated_block + 8;\n                  }\n                  else {\n                    current_block = current_block + 4;\n                    new_block = new_allocated_block + 6;\n                  }\n                }\n              }\n              *new_block = *current_block;\n              new_block[1] = current_block[1];\n              new_block[2] = current_block[2];\n            }\n            else {\n              memmove(allocated_block,current_block,copy_size);\n            }\n            DAT_2007046c = (int)new_allocated_block + aligned_size;\n            *(uint *)(DAT_2007046c + 4) = (realloc_size + block_size) - aligned_size | 1;\n            new_allocated_block[1] = aligned_size | new_allocated_block[1] & 1U;\n            __malloc_unlock(lock);\n            return allocated_block;\n          }\n        }\n        else {\n          realloc_size = realloc_size + block_size;\n          if ((int)aligned_size <= (int)realloc_size) {\n            next_header = *(int *)(current_header + 0xc);\n            current_header = *(int *)(current_header + 8);\n            *(int *)(current_header + 0xc) = next_header;\n            *(int *)(next_header + 8) = current_header;\n            new_block = new_allocated_block + 2;\n            current_header = *new_block;\n            next_header = new_allocated_block[3];\n            copy_size = remaining_size - 4;\n            *(int *)(current_header + 0xc) = next_header;\n            *(int *)(next_header + 8) = current_header;\n            remaining_size = realloc_size;\n            if (copy_size < 0x25) {\n              allocated_block = new_block;\n              if (0x13 < copy_size) {\n                new_allocated_block[2] = *current_block;\n                new_allocated_block[3] = current_block[1];\n                if (copy_size < 0x1c) {\n                  current_block = current_block + 2;\n                  allocated_block = new_allocated_block + 4;\n                }\n                else {\n                  new_allocated_block[4] = current_block[2];\n                  new_allocated_block[5] = current_block[3];\n                  if (copy_size == 0x24) {\n                    new_allocated_block[6] = current_block[4];\n                    allocated_block = current_block + 5;\n                    current_block = current_block + 6;\n                    new_allocated_block[7] = *allocated_block;\n                    allocated_block = new_allocated_block + 8;\n                  }\n                  else {\n                    current_block = current_block + 4;\n                    allocated_block = new_allocated_block + 6;\n                  }\n                }\n              }\n              *allocated_block = *current_block;\n              allocated_block[1] = current_block[1];\n              allocated_block[2] = current_block[2];\n              block_size = new_allocated_block[1];\n              allocated_block = new_allocated_block;\n              current_block = new_block;\n            }\n            else {\n              memmove(new_block,current_block,copy_size);\n              block_size = new_allocated_block[1];\n              allocated_block = new_allocated_block;\n              current_block = new_block;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)aligned_size <= (int)block_size) {\n        new_block = new_allocated_block + 2;\n        current_header = *new_block;\n        next_header = new_allocated_block[3];\n        copy_size = remaining_size - 4;\n        *(int *)(current_header + 0xc) = next_header;\n        *(int *)(next_header + 8) = current_header;\n        remaining_size = block_size;\n        if (copy_size < 0x25) {\n          allocated_block = new_block;\n          if (0x13 < copy_size) {\n            new_allocated_block[2] = *current_block;\n            new_allocated_block[3] = current_block[1];\n            if (copy_size < 0x1c) {\n              current_block = current_block + 2;\n              allocated_block = new_allocated_block + 4;\n            }\n            else {\n              new_allocated_block[4] = current_block[2];\n              new_allocated_block[5] = current_block[3];\n              if (copy_size == 0x24) {\n                new_allocated_block[6] = current_block[4];\n                allocated_block = current_block + 5;\n                current_block = current_block + 6;\n                new_allocated_block[7] = *allocated_block;\n                allocated_block = new_allocated_block + 8;\n              }\n              else {\n                current_block = current_block + 4;\n                allocated_block = new_allocated_block + 6;\n              }\n            }\n          }\n          *allocated_block = *current_block;\n          allocated_block[1] = current_block[1];\n          allocated_block[2] = current_block[2];\n          block_size = new_allocated_block[1];\n          allocated_block = new_allocated_block;\n          current_block = new_block;\n        }\n        else {\n          memmove(new_block,current_block,copy_size);\n          block_size = new_allocated_block[1];\n          allocated_block = new_allocated_block;\n          current_block = new_block;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    new_allocated_block = (int *)_malloc_r(lock,size);\n    if (new_allocated_block == (int *)0x0) goto LAB_000826a4;\n    block_size = current_block[-1];\n    if (new_allocated_block + -2 != (int *)((block_size & 0xfffffffe) + (int)allocated_block)) {\n      copy_size = remaining_size - 4;\n      if (copy_size < 0x25) {\n        allocated_block = current_block;\n        new_block = new_allocated_block;\n        if (0x13 < copy_size) {\n          *new_allocated_block = *current_block;\n          new_allocated_block[1] = current_block[1];\n          if (copy_size < 0x1c) {\n            allocated_block = current_block + 2;\n            new_block = new_allocated_block + 2;\n          }\n          else {\n            new_allocated_block[2] = current_block[2];\n            new_allocated_block[3] = current_block[3];\n            if (copy_size == 0x24) {\n              new_allocated_block[4] = current_block[4];\n              new_allocated_block[5] = current_block[5];\n              allocated_block = current_block + 6;\n              new_block = new_allocated_block + 6;\n            }\n            else {\n              allocated_block = current_block + 4;\n              new_block = new_allocated_block + 4;\n            }\n          }\n        }\n        *new_block = *allocated_block;\n        new_block[1] = allocated_block[1];\n        new_block[2] = allocated_block[2];\n      }\n      else {\n        memmove(new_allocated_block,current_block,copy_size);\n      }\n      _free_r(lock,current_block);\n      goto LAB_000826a4;\n    }\n    remaining_size = remaining_size + (new_allocated_block[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  realloc_size = remaining_size - aligned_size;\n  new_allocated_block = current_block;\n  if (realloc_size < 0x10) {\n    allocated_block[1] = block_size & 1 | remaining_size;\n    *(uint *)((int)allocated_block + remaining_size + 4) = *(uint *)((int)allocated_block + remaining_size + 4) | 1;\n  }\n  else {\n    allocated_block[1] = block_size & 1 | aligned_size;\n    *(uint *)((int)allocated_block + aligned_size + 4) = realloc_size | 1;\n    *(uint *)((int)allocated_block + realloc_size + aligned_size + 4) = *(uint *)((int)allocated_block + realloc_size + aligned_size + 4) | 1;\n    _free_r(lock,(int)allocated_block + aligned_size + 8);\n  }\nLAB_000826a4:\n  __malloc_unlock(lock);\n  return new_allocated_block;\n}\n\n",
            "renaming": {
                "FUN_000825b0": "allocate_memory_000825b0",
                "param_1": "lock",
                "param_2": "current_block",
                "param_3": "size",
                "iVar1": "current_header",
                "piVar2": "allocated_block",
                "uVar3": "realloc_size",
                "sVar4": "copy_size",
                "uVar5": "block_size",
                "iVar6": "next_header",
                "piVar7": "new_block",
                "uVar8": "remaining_size",
                "uVar9": "aligned_size",
                "piVar10": "new_allocated_block"
            },
            "calling": [
                "__sfvwrite_r",
                "realloc"
            ],
            "called": [
                "__malloc_unlock",
                "__malloc_lock",
                "_malloc_r",
                "_free_r",
                "memmove"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082970": {
            "entrypoint": "0x00082970",
            "current_name": "allocate_memory_00082970",
            "code": "\nvoid allocateMemory_00082970(int *errorCode,intptr_t size)\n\n{\n  void *memoryPointer;\n  \n  errno = 0;\n  memoryPointer = _sbrk(size);\n  if ((memoryPointer == (void *)0xffffffff) && (errno != 0)) {\n    *errorCode = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082970": "allocate_memory_00082970",
                "param_1": "errorCode",
                "param_2": "size",
                "pvVar1": "memoryPointer"
            },
            "calling": [
                "_malloc_r",
                "_malloc_trim_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082994": {
            "entrypoint": "0x00082994",
            "current_name": "copy_string_00082994",
            "code": "\nchar * copyString_00082994(char *destination,char *source)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *tempPointer1;\n  uint *tempPointer2;\n  uint currentWord;\n  uint currentWordTemp;\n  uint *outputPointer;\n  uint *outputPointerTemp;\n  char *outputChar;\n  bool bVar10;\n  \n  outputChar = destination;\n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      currentChar = *source;\n      *outputChar = currentChar;\n      source = source + 1;\n      outputChar = outputChar + 1;\n    } while (currentChar != '\\0');\n    return destination;\n  }\n  outputPointerTemp = (uint *)destination;\n  if (((uint)source & 3) != 0) {\n    tempPointer2 = (uint *)source;\n    if (((uint)source & 1) != 0) {\n      tempPointer2 = (uint *)(source + 1);\n      currentChar = *source;\n      outputPointerTemp = (uint *)(destination + 1);\n      *destination = currentChar;\n      if (currentChar == '\\0') {\n        return destination;\n      }\n    }\n    source = (char *)tempPointer2;\n    if (((uint)tempPointer2 & 2) != 0) {\n      source = (char *)((int)tempPointer2 + 2);\n      currentShort = *(ushort *)tempPointer2;\n      bVar10 = (currentShort & 0xff) == 0;\n      if (bVar10) {\n        *(char *)outputPointerTemp = (char)currentShort;\n      }\n      else {\n        *(ushort *)outputPointerTemp = currentShort;\n        bVar10 = (currentShort & 0xff00) == 0;\n        outputPointerTemp = (uint *)((int)outputPointerTemp + 2);\n      }\n      if (bVar10) {\n        return destination;\n      }\n    }\n  }\n  currentWord = *(uint *)source;\n  tempPointer2 = (uint *)((int)source + 4);\n  outputPointer = outputPointerTemp;\n  if (((uint)source & 4) != 0) {\n    if ((currentWord + 0xfefefeff & ~currentWord & 0x80808080) != 0) goto LAB_000829f8;\n    outputPointer = outputPointerTemp + 1;\n    *outputPointerTemp = currentWord;\n    tempPointer2 = (uint *)((int)source + 8);\n    currentWord = *(uint *)((int)source + 4);\n  }\n  while( true ) {\n    tempPointer1 = tempPointer2 + 1;\n    currentWordTemp = *tempPointer2;\n    outputPointerTemp = outputPointer;\n    if ((currentWord + 0xfefefeff & ~currentWord & 0x80808080) != 0) break;\n    outputPointerTemp = outputPointer + 1;\n    *outputPointer = currentWord;\n    currentWord = currentWordTemp;\n    if ((currentWordTemp + 0xfefefeff & ~currentWordTemp & 0x80808080) != 0) break;\n    tempPointer2 = tempPointer2 + 2;\n    currentWord = *tempPointer1;\n    outputPointer = outputPointer + 2;\n    *outputPointerTemp = currentWordTemp;\n  }\nLAB_000829f8:\n  do {\n    *(char *)outputPointerTemp = (char)currentWord;\n    currentWordTemp = currentWord & 0xff;\n    currentWord = currentWord >> 8 | currentWord << 0x18;\n    outputPointerTemp = (uint *)((int)outputPointerTemp + 1);\n  } while (currentWordTemp != 0);\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "__dest": "destination",
                "__src": "source",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "tempPointer1",
                "puVar4": "tempPointer2",
                "uVar5": "currentWord",
                "uVar6": "currentWordTemp",
                "puVar7": "outputPointer",
                "puVar8": "outputPointerTemp",
                "pcVar9": "outputChar"
            },
            "calling": [
                "copy"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082a50": {
            "entrypoint": "0x00082a50",
            "current_name": "count_bytes_set_00082a50",
            "code": "\nsize_t count_bytes_set_00082a50(char *input_string)\n\n{\n  size_t padding_bits;\n  uint *aligned_input;\n  uint current_word;\n  bool is_byte_zero;\n  \n  aligned_input = (uint *)((uint)input_string & 0xfffffffc);\n  padding_bits = -((uint)input_string & 3);\n  current_word = *aligned_input;\n  if (((uint)input_string & 3) != 0) {\n    current_word = current_word | 0xffffffffU >> ((padding_bits + 4 & 0x1f) << 3);\n  }\n  while (aligned_input = aligned_input + 1, (current_word + 0xfefefeff & ~current_word & 0x80808080) == 0) {\n    padding_bits = padding_bits + 4;\n    current_word = *aligned_input;\n  }\n  is_byte_zero = (current_word & 0xff) == 0;\n  if (!is_byte_zero) {\n    padding_bits = padding_bits + 1;\n    is_byte_zero = (current_word & 0xff00) == 0;\n  }\n  if (!is_byte_zero) {\n    padding_bits = padding_bits + 1;\n    is_byte_zero = (current_word & 0xff0000) == 0;\n  }\n  if (!is_byte_zero) {\n    padding_bits = padding_bits + 1;\n  }\n  return padding_bits;\n}\n\n",
            "renaming": {
                "FUN_00082a50": "count_bytes_set_00082a50",
                "__s": "input_string",
                "sVar1": "padding_bits",
                "puVar2": "aligned_input",
                "uVar3": "current_word",
                "bVar4": "is_byte_zero"
            },
            "calling": [
                "String",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082ab0": {
            "entrypoint": "0x00082ab0",
            "current_name": "kill_process_00082ab0",
            "code": "\nint kill_process_00082ab0(process_id_t process_id,int signal)\n\n{\n  int result;\n  \n  result = _kill_r(_impure_ptr,process_id,signal);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082ab0": "kill_process_00082ab0",
                "__pid": "process_id",
                "__sig": "signal",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "_kill_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "entrypoint": "0x00082ac0",
            "current_name": "write_to_file_00082ac0",
            "code": "\nint writeToFile_00082ac0(undefined4 stream,int fileDescriptor,int **data)\n\n{\n  int *currentPointer;\n  int result;\n  int *remainingData;\n  uint iterationCount;\n  undefined4 *currentElement;\n  uint elementSize;\n  uint elementCount;\n  \n  if (-1 < *(int *)(fileDescriptor + 100) << 0x12) {\n    result = __sfvwrite_r();\n    data[2] = (int *)0x0;\n    data[1] = (int *)0x0;\n    return result;\n  }\n  remainingData = data[2];\n  currentPointer = *data;\n  while (remainingData != (int *)0x0) {\n    elementSize = currentPointer[1];\n    elementCount = elementSize >> 2;\n    if (elementCount != 0) {\n      currentElement = (undefined4 *)(*currentPointer + -4);\n      iterationCount = 0;\n      do {\n        currentElement = currentElement + 1;\n        result = _fputwc_r(stream,*currentElement,fileDescriptor);\n        iterationCount = iterationCount + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (elementCount != iterationCount);\n      remainingData = data[2];\n    }\n    remainingData = (int *)((int)remainingData - (elementSize & 0xfffffffc));\n    data[2] = remainingData;\n    currentPointer = currentPointer + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  data[2] = (int *)0x0;\n  data[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082ac0": "write_to_file_00082ac0",
                "param_1": "stream",
                "param_2": "fileDescriptor",
                "param_3": "data",
                "piVar1": "currentPointer",
                "iVar2": "result",
                "piVar3": "remainingData",
                "uVar4": "iterationCount",
                "puVar5": "currentElement",
                "uVar6": "elementSize",
                "uVar7": "elementCount"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "_fputwc_r",
                "__sfvwrite_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082b38": {
            "entrypoint": "0x00082b38",
            "current_name": "format_string_00082b38",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint formatString_00082b38(int buffer,int format,int *******args,int **argPtr)\n\n{\n  bool hasPlusFlag;\n  bool isLeftJustified;\n  bool hasSharpFlag;\n  char specifier;\n  bool hasZeroFlag;\n  void *pointer;\n  int ********formatData;\n  int *width;\n  int result;\n  char lengthModifier;\n  int *******currentChar;\n  uint digit;\n  int **pcurrentArg;\n  uint flags;\n  uint currentCharValue;\n  int i;\n  int ********ptmpFormatData;\n  int numFormatData;\n  int *******remainingFormatData;\n  int *tmpArg;\n  int *******nextChar;\n  uint base;\n  int *piVar23;\n  int *******pppppppiVar24;\n  undefined4 tmpResult;\n  int ********output;\n  bool hasLongModifier;\n  longlong combinedArg;\n  int *******maxLength;\n  int *******remainingLength;\n  int **argPtrCopy;\n  int totalLength;\n  char *stringPtr;\n  char plusFlag;\n  undefined zeroFlag;\n  undefined widthFlag;\n  int ********formatDataCopy;\n  int numFormatDataCopy;\n  int *******tmpFormatDataCopy;\n  undefined specifierFormat;\n  char specifierFormatCopy;\n  undefined zeroChar;\n  undefined formatDataBuffer [4];\n  int *******tmpLengthBuffer [16];\n  \n  if ((buffer != 0) && (*(int *)(buffer + 0x38) == 0)) {\n    outputinit();\n  }\n  flags = (uint)*(ushort *)(format + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(format + 0xc) << 0x12)) {\n    flags = flags | 0x2000;\n    *(short *)(format + 0xc) = (short)flags;\n    *(uint *)(format + 100) = *(uint *)(format + 100) & 0xffffdfff;\n  }\n  if (((int)(flags << 0x1c) < 0) && (*(int *)(format + 0x10) != 0)) {\n    if ((flags & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    result = outputwsetup_r(buffer,format);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(format + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(format + 0xe)) {\n    result = outputbprintf(buffer,format,args,argPtr);\n    return result;\n  }\nLAB_00082b8a:\n  stringPtr = (char *)0x0;\n  tmpFormatDataCopy = (int *******)0x0;\n  numFormatDataCopy = 0;\n  totalLength = 0;\n  formatData = (int ********)formatDataBuffer;\n  argPtrCopy = argPtr;\n  formatDataCopy = (int ********)formatDataBuffer;\nLAB_00082b9e:\n  currentChar = args;\n  if ((*(char *)args != '\\0') && (*(char *)args != '%')) {\n    do {\n      currentChar = (int *******)((int)currentChar + 1);\n      if (*(char *)currentChar == '\\0') break;\n    } while (*(char *)currentChar != '%');\n    nextChar = (int *******)((int)currentChar - (int)args);\n    if (nextChar != (int *******)0x0) {\n      numFormatDataCopy = numFormatDataCopy + 1;\n      tmpFormatDataCopy = (int *******)((int)tmpFormatDataCopy + (int)nextChar);\n      *formatData = args;\n      formatData[1] = nextChar;\n      if (numFormatDataCopy < 8) {\n        formatData = formatData + 2;\n      }\n      else {\n        if (tmpFormatDataCopy == (int *******)0x0) {\n          totalLength = totalLength + (int)nextChar;\n          numFormatDataCopy = 0;\n          formatData = (int ********)formatDataBuffer;\n          goto LAB_00082bee;\n        }\n        result = outputprint_r_part_0(buffer,format,&formatDataCopy);\n        formatData = (int ********)formatDataBuffer;\n        if (result != 0) goto LAB_000833de;\n      }\n      totalLength = totalLength + (int)nextChar;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)currentChar != '\\0') {\n    plusFlag = '\\0';\n    currentCharValue = (uint)*(byte *)((int)currentChar + 1);\n    flags = 0;\n    hasZeroFlag = false;\n    isLeftJustified = false;\n    hasPlusFlag = false;\n    hasSharpFlag = false;\n    hasLongModifier = false;\n    nextChar = (int *******)0x0;\n    remainingLength = (int *******)0xffffffff;\n    args = (int *******)((int)currentChar + 1);\nLAB_00082c12:\n    args = (int *******)((int)args + 1);\nLAB_00082c16:\n    switch(currentCharValue) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (currentCharValue != 0) {\n        maxLength = (int *******)0x1;\n        remainingLength = (int *******)0x1;\n        output = (int ********)&specifierFormat;\n        specifierFormat = (char)currentCharValue;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      hasSharpFlag = true;\n      currentCharValue = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x2a:\n      nextChar = (int *******)*argPtrCopy;\n      argPtrCopy = argPtrCopy + 1;\n      if ((int)nextChar < 0) {\n        nextChar = (int *******)-(int)nextChar;\n        goto switchD_00082c20_caseD_2d;\n      }\n      currentCharValue = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x2b:\n      currentCharValue = (uint)*(byte *)args;\n      plusFlag = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      flags = flags | 4;\n      currentCharValue = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x2e:\n      currentCharValue = (uint)*(byte *)args;\n      currentChar = (int *******)((int)args + 1);\n      if (currentCharValue == 0x2a) {\n        currentCharValue = (uint)*(byte *)((int)args + 1);\n        remainingLength = (int *******)*argPtrCopy;\n        argPtrCopy = argPtrCopy + 1;\n        args = currentChar;\n        if ((int)remainingLength < 0) {\n          remainingLength = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      digit = currentCharValue - 0x30;\n      if (digit < 10) {\n        base = 0;\n        do {\n          args = (int *******)((int)currentChar + 1);\n          currentCharValue = (uint)*(byte *)currentChar;\n          base = digit + base * 10;\n          digit = currentCharValue - 0x30;\n          currentChar = args;\n        } while (digit < 10);\n        remainingLength = (int *******)(base | (int)base >> 0x1f);\n      }\n      else {\n        remainingLength = (int *******)0x0;\n        args = currentChar;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      flags = flags | 0x80;\n      currentCharValue = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      isLeftJustified = true;\n      if (hasPlusFlag == false) goto LAB_00083028;\nLAB_00082e98:\n      argPtrCopy = (int **)((int)argPtrCopy + 7U & 0xfffffff8);\n      tmpArg = *argPtrCopy;\n      piVar23 = argPtrCopy[1];\n      argPtrCopy = argPtrCopy + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      isLeftJustified = true;\n      if (hasPlusFlag != false) goto LAB_00082d42;\nLAB_00082f2a:\n      result = (uint)isLeftJustified << 4;\n      i = (uint)hasPlusFlag << 5;\n      if ((isLeftJustified == 0) && (i = (uint)hasLongModifier << 6, hasLongModifier != 0)) {\n        tmpArg = (int *)(uint)*(ushort *)argPtrCopy;\n        argPtrCopy = argPtrCopy + 1;\n        piVar23 = (int *)0x0;\n      }\n      else {\n        result = i;\n        tmpArg = *argPtrCopy;\n        argPtrCopy = argPtrCopy + 1;\n        piVar23 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      isLeftJustified = true;\n      if (hasPlusFlag != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((isLeftJustified) || (hasLongModifier == false)) {\n        result = 1;\n        tmpArg = *argPtrCopy;\n        argPtrCopy = argPtrCopy + 1;\n        piVar23 = (int *)0x0;\n      }\n      else {\n        piVar23 = (int *)0x0;\n        tmpArg = (int *)(uint)*(ushort *)argPtrCopy;\n        argPtrCopy = argPtrCopy + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      stringPtr = \"0123456789ABCDEF\";\n      if (hasPlusFlag == false) goto LAB_00083196;\nLAB_00082fb6:\n      pcurrentArg = (int **)((int)argPtrCopy + 7U & 0xfffffff8);\n      argPtrCopy = pcurrentArg + 2;\n      tmpArg = *pcurrentArg;\n      piVar23 = pcurrentArg[1];\n      goto LAB_00082fca;\n    case 99:\n      tmpArg = *argPtrCopy;\n      argPtrCopy = argPtrCopy + 1;\n      maxLength = (int *******)0x1;\n      specifierFormat = SUB41(tmpArg,0);\n      remainingLength = (int *******)0x1;\n      output = (int ********)&specifierFormat;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (hasPlusFlag != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((isLeftJustified == false) && (hasLongModifier != false)) {\n        tmpArg = (int *)(int)*(short *)argPtrCopy;\n        argPtrCopy = argPtrCopy + 1;\n        piVar23 = (int *)((int)tmpArg >> 0x1f);\n      }\n      else {\n        tmpArg = *argPtrCopy;\n        argPtrCopy = argPtrCopy + 1;\n        piVar23 = (int *)((int)tmpArg >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar23 < 0) {\n        hasLongModifier = tmpArg != (int *)0x0;\n        tmpArg = (int *)-(int)tmpArg;\n        piVar23 = (int *)(-(int)piVar23 - (uint)hasLongModifier);\n        plusFlag = '-';\n        specifier = '-';\n        result = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)remainingLength) {\n        flags = flags & 0xffffff7f;\n      }\n      hasZeroFlag = false;\n      currentCharValue = (uint)tmpArg | (uint)piVar23;\n      result = 1;\n      specifier = plusFlag;\n      goto joined_r0x00082d78;\n    case 0x68:\n      hasLongModifier = true;\n      currentCharValue = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x6c:\n      currentCharValue = (uint)*(byte *)args;\n      if (currentCharValue == 0x6c) {\n        hasPlusFlag = true;\n        currentCharValue = (uint)*(byte *)((int)args + 1);\n        args = (int *******)((int)args + 1);\n      }\n      else {\n        isLeftJustified = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (hasPlusFlag == false) {\n        if (isLeftJustified == false) {\n          if (hasLongModifier) {\n            tmpArg = *argPtrCopy;\n            argPtrCopy = argPtrCopy + 1;\n            *(short *)tmpArg = (short)totalLength;\n          }\n          else {\n            tmpArg = *argPtrCopy;\n            argPtrCopy = argPtrCopy + 1;\n            *tmpArg = totalLength;\n          }\n        }\n        else {\n          tmpArg = *argPtrCopy;\n          argPtrCopy = argPtrCopy + 1;\n          *tmpArg = totalLength;\n        }\n      }\n      else {\n        tmpArg = *argPtrCopy;\n        argPtrCopy = argPtrCopy + 1;\n        *tmpArg = totalLength;\n        tmpArg[1] = totalLength >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (hasPlusFlag == false) goto LAB_00082f2a;\nLAB_00082d42:\n      pcurrentArg = (int **)((int)argPtrCopy + 7U & 0xfffffff8);\n      argPtrCopy = pcurrentArg + 2;\n      tmpArg = *pcurrentArg;\n      piVar23 = pcurrentArg[1];\n      result = 0;\n      break;\n    case 0x70:\n      tmpArg = *argPtrCopy;\n      argPtrCopy = argPtrCopy + 1;\n      widthFlag = 0x78;\n      hasZeroFlag = true;\n      piVar23 = (int *)0x0;\n      zeroFlag = 0x30;\n      stringPtr = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      hasPlusFlag = true;\n      currentCharValue = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x73:\n      output = (int ********)*argPtrCopy;\n      plusFlag = '\\0';\n      argPtrCopy = argPtrCopy + 1;\n      if (output != (int ********)0x0) {\n        if ((int)remainingLength < 0) {\n          remainingLength = (int *******)strlen((char *)output);\n          currentChar = (int *******)0x0;\n          specifier = plusFlag;\n        }\n        else {\n          pointer = memchr(output,0,(size_t)remainingLength);\n          specifier = plusFlag;\n          if (pointer == (void *)0x0) {\n            currentChar = (int *******)0x0;\n          }\n          else {\n            remainingFormatData = (int *******)((int)pointer - (int)output);\n            if ((int)remainingLength <= (int)(int *******)((int)pointer - (int)output)) {\n              remainingFormatData = remainingLength;\n            }\n            currentChar = (int *******)0x0;\n            remainingLength = remainingFormatData;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < remainingLength) {\n        remainingLength = (int *******)0x6;\n      }\n      maxLength = (int *******)((uint)remainingLength & ~((int)remainingLength >> 0x1f));\n      output = (int ********)&UNK_00085840;\nLAB_00083012:\n      plusFlag = '\\0';\n      currentChar = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!hasPlusFlag) goto LAB_00082f7c;\nLAB_00082e62:\n      pcurrentArg = (int **)((int)argPtrCopy + 7U & 0xfffffff8);\n      argPtrCopy = pcurrentArg + 2;\n      tmpArg = *pcurrentArg;\n      piVar23 = pcurrentArg[1];\n      result = 1;\n      break;\n    case 0x78:\n      stringPtr = \"0123456789abcdef\";\n      if (hasPlusFlag != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((isLeftJustified == false) && (hasLongModifier != false)) {\n        piVar23 = (int *)0x0;\n        tmpArg = (int *)(uint)*(ushort *)argPtrCopy;\n        argPtrCopy = argPtrCopy + 1;\n      }\n      else {\n        tmpArg = *argPtrCopy;\n        argPtrCopy = argPtrCopy + 1;\n        piVar23 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((hasSharpFlag) && (((uint)tmpArg | (uint)piVar23) != 0)) {\n        hasZeroFlag = true;\n        zeroFlag = 0x30;\n        result = 2;\n        widthFlag = (char)currentCharValue;\n      }\n      else {\n        result = 2;\n      }\n    }\n    plusFlag = '\\0';\n    specifier = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)remainingLength) {\n      flags = flags & 0xffffff7f;\n    }\n    currentCharValue = (uint)tmpArg | (uint)piVar23;\njoined_r0x00082d78:\n    combinedArg = CONCAT44(piVar23,tmpArg);\n    currentChar = remainingLength;\n    if ((currentCharValue == 0) && (remainingLength == (int *******)0x0)) {\n      output = (int ********)formatDataBuffer;\n      if ((result != 0) || (!hasSharpFlag)) goto LAB_00082da0;\n      output = (int ********)(&specifierFormatCopy + 1);\n      zeroChar = '0';\n      goto LAB_00082d9a;\n    }\n    if (result == 1) {\n      if (piVar23 != (int *)0x0 || (int *)0x9 < tmpArg) {\n        ptmpFormatData = (int ********)(&specifierFormatCopy + 1);\n        do {\n          output = ptmpFormatData;\n          tmpResult = (undefined4)((ulonglong)combinedArg >> 0x20);\n          lengthModifier = '\\n';\n          __aeabi_uldivmod((int)combinedArg,tmpResult,10,0);\n          *(char *)output = lengthModifier + '0';\n          combinedArg = __aeabi_uldivmod((int)combinedArg,tmpResult,10,0);\n          ptmpFormatData = (int ********)((int)output + -1);\n        } while (combinedArg != 0);\n        remainingLength = (int *******)((int)formatDataBuffer - (int)output);\n        goto LAB_00082da0;\n      }\n      zeroChar = (char)tmpArg + '0';\n      output = (int ********)(&specifierFormatCopy + 1);\n      goto LAB_0008351e;\n    }\n    ptmpFormatData = (int ********)(&specifierFormatCopy + 1);\n    if (result != 2) goto LAB_0008337e;\n    do {\n      output = ptmpFormatData;\n      currentCharValue = (uint)tmpArg & 0xf;\n      tmpArg = (int *)((uint)tmpArg >> 4 | (int)piVar23 << 0x1c);\n      piVar23 = (int *)((uint)piVar23 >> 4);\n      *(char *)output = stringPtr[currentCharValue];\n      ptmpFormatData = (int ********)((int)output + -1);\n    } while (((uint)tmpArg | (uint)piVar23) != 0);\n    remainingLength = (int *******)((int)formatDataBuffer - (int)output);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (tmpFormatDataCopy != (int *******)0x0) {\n    outputprint_r_part_0(buffer,format,&formatDataCopy);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(format + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return totalLength;\nLAB_0008337e:\n  do {\n    output = ptmpFormatData;\n    width = (int *)((uint)tmpArg >> 3 | (int)piVar23 << 0x1d);\n    piVar23 = (int *)((uint)piVar23 >> 3);\n    result = ((uint)tmpArg & 7) + 0x30;\n    *(char *)output = (char)result;\n    ptmpFormatData = (int ********)((int)output + -1);\n    tmpArg = width;\n  } while (((uint)width | (uint)piVar23) != 0);\n  if (hasSharpFlag) {\n    if (result == 0x30) {\nLAB_00082d9a:\n      remainingLength = (int *******)((int)formatDataBuffer - (int)output);\n    }\n    else {\n      *(undefined *)((int)output + -1) = 0x30;\n      output = ptmpFormatData;\n      remainingLength = (int *******)((int)formatDataBuffer - (int)ptmpFormatData);\n    }\n  }\n  else {\nLAB_0008351e:\n    remainingLength = (int *******)((int)formatDataBuffer - (int)output);\n  }\nLAB_00082da0:\n  maxLength = remainingLength;\n  if ((int)remainingLength < (int)currentChar) {\n    maxLength = currentChar;\n  }\n  if (specifier != '\\0') {\n    maxLength = (int *******)((int)maxLength + 1);\n  }\nLAB_00082dba:\n  if (hasZeroFlag) {\n    maxLength = (int *******)((int)maxLength + 2);\n  }\n  if ((flags == 0) &&\n     (remainingFormatData = (int *******)((int)nextChar - (int)maxLength), 0 < (int)remainingFormatData)) {\n    if ((int)remainingFormatData < 0x11) {\n      numFormatDataCopy = numFormatDataCopy + 1;\n    }\n    else {\n      do {\n        pppppppiVar24 = remainingFormatData;\n        result = numFormatDataCopy + 1;\n        tmpFormatDataCopy = tmpFormatDataCopy + 4;\n        *formatData = (int *******)0x85808;\n        formatData[1] = (int *******)0x10;\n        if (result < 8) {\n          i = numFormatDataCopy + 2;\n          formatData = formatData + 2;\n          numFormatDataCopy = result;\n        }\n        else if (tmpFormatDataCopy == (int *******)0x0) {\n          i = 1;\n          formatData = (int ********)formatDataBuffer;\n          numFormatDataCopy = 0;\n        }\n        else {\n          numFormatDataCopy = result;\n          result = outputprint_r_part_0(buffer,format,&formatDataCopy);\n          if (result != 0) goto LAB_000833de;\n          i = numFormatDataCopy + 1;\n          formatData = (int ********)formatDataBuffer;\n        }\n        remainingFormatData = pppppppiVar24 + -4;\n      } while (0x10 < (int)remainingFormatData);\n      remainingFormatData = pppppppiVar24 + -4;\n      numFormatDataCopy = i;\n    }\n    tmpFormatDataCopy = (int *******)((int)tmpFormatDataCopy + (int)remainingFormatData);\n    *formatData = (int *******)0x85808;\n    formatData[1] = remainingFormatData;\n    if (numFormatDataCopy < 8) {\n      result = numFormatDataCopy + 1;\n      formatData = formatData + 2;\n    }\n    else if (tmpFormatDataCopy == (int *******)0x0) {\n      result = 1;\n      numFormatDataCopy = 0;\n      formatData = (int ********)formatDataBuffer;\n    }\n    else {\n      result = outputprint_r_part_0(buffer,format,&formatDataCopy);\n      if (result != 0) goto LAB_000833de;\n      result = numFormatDataCopy + 1;\n      formatData = (int ********)formatDataBuffer;\n    }\n  }\n  else {\n    result = numFormatDataCopy + 1;\n  }\n  i = result;\n  if (plusFlag != '\\0') {\n    tmpFormatDataCopy = (int *******)((int)tmpFormatDataCopy + 1);\n    i = 1;\n    *formatData = (int *******)&plusFlag;\n    formatData[1] = (int *******)0x1;\n    numFormatDataCopy = result;\n    if (result < 8) {\n      i = result + 1;\n      formatData = formatData + 2;\n    }\n    else if (tmpFormatDataCopy == (int *******)0x0) {\n      numFormatDataCopy = 0;\n      formatData = (int ********)formatDataBuffer;\n    }\n    else {\n      result = outputprint_r_part_0(buffer,format,&formatDataCopy);\n      if (result != 0) goto LAB_000833de;\n      i = numFormatDataCopy + 1;\n      formatData = (int ********)formatDataBuffer;\n    }\n  }\n  result = i;\n  numFormatData = numFormatDataCopy;\n  if (hasZeroFlag) {\n    tmpFormatDataCopy = (int *******)((int)tmpFormatDataCopy + 2);\n    *formatData = (int *******)&zeroFlag;\n    formatData[1] = (int *******)0x2;\n    if (i < 8) {\n      result = i + 1;\n      numFormatData = i;\n      formatData = formatData + 2;\n    }\n    else if (tmpFormatDataCopy == (int *******)0x0) {\n      result = 1;\n      numFormatData = 0;\n      formatData = (int ********)formatDataBuffer;\n    }\n    else {\n      numFormatDataCopy = i;\n      result = outputprint_r_part_0(buffer,format,&formatDataCopy);\n      if (result != 0) goto LAB_000833de;\n      result = numFormatDataCopy + 1;\n      numFormatData = numFormatDataCopy;\n      formatData = (int ********)formatDataBuffer;\n    }\n  }\n  numFormatDataCopy = numFormatData;\n  if ((flags == 0x80) &&\n     (remainingFormatData = (int *******)((int)nextChar - (int)maxLength), 0 < (int)remainingFormatData)) {\n    if (0x10 < (int)remainingFormatData) {\n      do {\n        while( true ) {\n          pppppppiVar24 = remainingFormatData;\n          numFormatDataCopy = numFormatData + 1;\n          tmpFormatDataCopy = tmpFormatDataCopy + 4;\n          *formatData = (int *******)&zeroes_6718;\n          formatData[1] = (int *******)0x10;\n          if (7 < numFormatDataCopy) break;\n          result = numFormatData + 2;\n          formatData = formatData + 2;\nLAB_0008348e:\n          numFormatData = numFormatDataCopy;\n          remainingFormatData = pppppppiVar24 + -4;\n          if ((int)(pppppppiVar24 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (tmpFormatDataCopy != (int *******)0x0) {\n          result = outputprint_r_part_0(buffer,format,&formatDataCopy);\n          if (result == 0) {\n            result = numFormatDataCopy + 1;\n            formatData = (int ********)formatDataBuffer;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        numFormatData = 0;\n        remainingFormatData = pppppppiVar24 + -4;\n        formatData = (int ********)formatDataBuffer;\n      } while (0x10 < (int)(pppppppiVar24 + -4));\nLAB_000834b4:\n      remainingFormatData = pppppppiVar24 + -4;\n    }\n    tmpFormatDataCopy = (int *******)((int)tmpFormatDataCopy + (int)remainingFormatData);\n    *formatData = (int *******)&zeroes_6718;\n    formatData[1] = remainingFormatData;\n    numFormatDataCopy = result;\n    if (result < 8) {\n      result = result + 1;\n      formatData = formatData + 2;\n    }\n    else if (tmpFormatDataCopy == (int *******)0x0) {\n      result = 1;\n      numFormatDataCopy = 0;\n      formatData = (int ********)formatDataBuffer;\n    }\n    else {\n      result = outputprint_r_part_0(buffer,format,&formatDataCopy);\n      if (result != 0) goto LAB_000833de;\n      result = numFormatDataCopy + 1;\n      formatData = (int ********)formatDataBuffer;\n    }\n  }\n  currentChar = (int *******)((int)currentChar - (int)remainingLength);\n  ptmpFormatData = (int ********)formatDataBuffer;\n  if ((int)currentChar < 1) {\nLAB_000832c6:\n    tmpFormatDataCopy = (int *******)((int)tmpFormatDataCopy + (int)remainingLength);\n    *formatData = (int *******)output;\n    formatData[1] = remainingLength;\n    remainingLength = tmpFormatDataCopy;\n    numFormatDataCopy = result;\n    if (result < 8) goto LAB_0008345a;\n    if (tmpFormatDataCopy == (int *******)0x0) {\n      numFormatDataCopy = 0;\n    }\n    else {\n      result = outputprint_r_part_0(buffer,format,&formatDataCopy);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    i = numFormatDataCopy;\n    if (0x10 < (int)currentChar) {\n      do {\n        while( true ) {\n          remainingFormatData = currentChar;\n          numFormatDataCopy = i + 1;\n          tmpFormatDataCopy = tmpFormatDataCopy + 4;\n          *formatData = (int *******)&zeroes_6718;\n          formatData[1] = (int *******)0x10;\n          if (7 < numFormatDataCopy) break;\n          result = i + 2;\n          formatData = formatData + 2;\nLAB_00083282:\n          i = numFormatDataCopy;\n          currentChar = remainingFormatData + -4;\n          if ((int)(remainingFormatData + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (tmpFormatDataCopy != (int *******)0x0) {\n          result = outputprint_r_part_0(buffer,format,&formatDataCopy);\n          if (result == 0) {\n            result = numFormatDataCopy + 1;\n            formatData = (int ********)formatDataBuffer;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        formatData = (int ********)formatDataBuffer;\n        i = 0;\n        currentChar = remainingFormatData + -4;\n      } while (0x10 < (int)(remainingFormatData + -4));\nLAB_000832aa:\n      currentChar = remainingFormatData + -4;\n    }\n    tmpFormatDataCopy = (int *******)((int)tmpFormatDataCopy + (int)currentChar);\n    *formatData = (int *******)&zeroes_6718;\n    formatData[1] = currentChar;\n    if (result < 8) {\n      result = result + 1;\n      formatData = formatData + 2;\n      goto LAB_000832c6;\n    }\n    if (tmpFormatDataCopy != (int *******)0x0) {\n      numFormatDataCopy = result;\n      result = outputprint_r_part_0(buffer,format,&formatDataCopy);\n      if (result != 0) goto LAB_000833de;\n      result = numFormatDataCopy + 1;\n      formatData = (int ********)formatDataBuffer;\n      goto LAB_000832c6;\n    }\n    tmpLengthBuffer[0] = remainingLength;\n    numFormatDataCopy = 1;\n    formatData = (int ********)formatDataBuffer;\n    formatDataBuffer = (undefined  [4])output;\nLAB_0008345a:\n    ptmpFormatData = formatData + 2;\n    tmpFormatDataCopy = remainingLength;\n  }\n  if (((flags & 4) != 0) &&\n     (currentChar = (int *******)((int)nextChar - (int)maxLength), 0 < (int)currentChar)) {\n    result = numFormatDataCopy;\n    if ((int)currentChar < 0x11) {\n      i = numFormatDataCopy + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          numFormatDataCopy = result + 1;\n          tmpFormatDataCopy = tmpFormatDataCopy + 4;\n          *ptmpFormatData = (int *******)0x85808;\n          ptmpFormatData[1] = (int *******)0x10;\n          if (7 < numFormatDataCopy) break;\n          i = result + 2;\n          ptmpFormatData = ptmpFormatData + 2;\nLAB_00083316:\n          currentChar = currentChar + -4;\n          result = numFormatDataCopy;\n          if ((int)currentChar < 0x11) goto LAB_0008333e;\n        }\n        if (tmpFormatDataCopy != (int *******)0x0) {\n          result = outputprint_r_part_0(buffer,format,&formatDataCopy);\n          if (result == 0) {\n            i = numFormatDataCopy + 1;\n            ptmpFormatData = (int ********)formatDataBuffer;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        currentChar = currentChar + -4;\n        i = 1;\n        result = 0;\n        ptmpFormatData = (int ********)formatDataBuffer;\n      } while (0x10 < (int)currentChar);\n    }\nLAB_0008333e:\n    tmpFormatDataCopy = (int *******)((int)tmpFormatDataCopy + (int)currentChar);\n    *ptmpFormatData = (int *******)0x85808;\n    ptmpFormatData[1] = currentChar;\n    numFormatDataCopy = i;\n    if (7 < i) {\n      if (tmpFormatDataCopy == (int *******)0x0) {\n        if ((int)maxLength < (int)nextChar) {\n          maxLength = nextChar;\n        }\n        totalLength = totalLength + (int)maxLength;\n        goto LAB_00083422;\n      }\n      result = outputprint_r_part_0(buffer,format,&formatDataCopy);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)maxLength < (int)nextChar) {\n    maxLength = nextChar;\n  }\n  totalLength = totalLength + (int)maxLength;\n  if ((tmpFormatDataCopy != (int *******)0x0) &&\n     (result = outputprint_r_part_0(buffer,format,&formatDataCopy), result != 0)) goto LAB_000833de;\nLAB_00083422:\n  numFormatDataCopy = 0;\n  formatData = (int ********)formatDataBuffer;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  digit = currentCharValue - 0x30;\n  nextChar = (int *******)0x0;\n  currentChar = args;\n  do {\n    args = (int *******)((int)currentChar + 1);\n    currentCharValue = (uint)*(byte *)currentChar;\n    nextChar = (int *******)(digit + (int)nextChar * 10);\n    digit = currentCharValue - 0x30;\n    currentChar = args;\n  } while (digit < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  currentCharValue = (uint)*(byte *)args;\n  if (plusFlag == '\\0') {\n    plusFlag = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "renaming": {
                "FUN_00082b38": "format_string_00082b38",
                "param_1": "buffer",
                "param_2": "format",
                "param_3": "args",
                "param_4": "argPtr",
                "bVar1": "hasPlusFlag",
                "bVar2": "isLeftJustified",
                "bVar3": "hasSharpFlag",
                "cVar4": "specifier",
                "bVar5": "hasZeroFlag",
                "pvVar6": "pointer",
                "ppppppppiVar7": "formatData",
                "piVar8": "width",
                "iVar9": "result",
                "cVar10": "lengthModifier",
                "pppppppiVar11": "currentChar",
                "uVar12": "digit",
                "piVar13": "currentArg",
                "uVar14": "flags",
                "uVar15": "currentCharValue",
                "uVar22": "base",
                "iVar16": "i",
                "pppppppiVar17": "tmpFormatData",
                "iVar18": "numFormatData",
                "pppppppiVar19": "remainingFormatData",
                "piVar20": "tmpArg",
                "pppppppiVar21": "nextChar",
                "uVar25": "tmpResult",
                "__s": "output",
                "bVar26": "hasLongModifier",
                "lVar27": "combinedArg",
                "local_dc": "maxLength",
                "local_d4": "remainingLength",
                "local_c8": "argPtrCopy",
                "local_c4": "totalLength",
                "local_c0": "stringPtr",
                "local_a1": "plusFlag",
                "local_a0": "zeroFlag",
                "local_9f": "widthFlag",
                "local_9c": "formatDataCopy",
                "local_98": "numFormatDataCopy",
                "local_94": "tmpFormatDataCopy",
                "local_90": "specifierFormat",
                "cStack_6a": "specifierFormatCopy",
                "local_69": "zeroChar",
                "local_68": "formatDataBuffer",
                "local_64": "tmpLengthBuffer"
            },
            "calling": [
                "__sbprintf",
                "iprintf"
            ],
            "called": [
                "memchr",
                "__sbprintf",
                "__swsetup_r",
                "__sprint_r.part.0",
                "strlen",
                "__sinit",
                "__aeabi_uldivmod"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008378c": {
            "entrypoint": "0x0008378c",
            "current_name": "print_formatted_output_0008378c",
            "code": "\nint print_formatted_output_0008378c(undefined4 output_stream,int data_ptr)\n\n{\n  int result;\n  int flush_result;\n  undefined *string_buffers [2];\n  undefined4 buffer1_size;\n  ushort flag;\n  undefined2 value;\n  undefined *buffer;\n  undefined4 buffer2_size;\n  undefined4 unused;\n  undefined4 param;\n  undefined4 buffer3_size;\n  undefined4 param_ptr;\n  undefined buffer_data [1024];\n  \n  param_ptr = *(undefined4 *)(data_ptr + 100);\n  param = *(undefined4 *)(data_ptr + 0x1c);\n  value = *(undefined2 *)(data_ptr + 0xe);\n  buffer3_size = *(undefined4 *)(data_ptr + 0x24);\n  string_buffers[0] = buffer_data;\n  flag = *(ushort *)(data_ptr + 0xc) & 0xfffd;\n  buffer1_size = 0x400;\n  buffer2_size = 0x400;\n  unused = 0;\n  buffer = string_buffers[0];\n  result = _vfiprintf_r(output_stream,string_buffers);\n  if ((-1 < result) && (flush_result = _fflush_r(output_stream,string_buffers), flush_result != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)flag << 0x19) < 0) {\n    *(ushort *)(data_ptr + 0xc) = *(ushort *)(data_ptr + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008378c": "print_formatted_output_0008378c",
                "param_1": "output_stream",
                "param_2": "data_ptr",
                "iVar1": "result",
                "iVar2": "flush_result",
                "local_488": "string_buffers",
                "local_480": "buffer1_size",
                "local_47c": "flag",
                "local_47a": "value",
                "local_478": "buffer",
                "local_474": "buffer2_size",
                "local_470": "unused",
                "local_46c": "param",
                "local_464": "buffer3_size",
                "local_424": "param_ptr",
                "auStack_420": "buffer_data"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "_vfiprintf_r",
                "_fflush_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083808": {
            "entrypoint": "0x00083808",
            "current_name": "validate_and_initialize_00083808",
            "code": "\nundefined4 validateAndInitialize_00083808(undefined4 *result,int *data)\n\n{\n  int value1;\n  int value2;\n  uint temp1;\n  ushort temp2;\n  \n  if ((_impure_ptr != 0) && (*(int *)(_impure_ptr + 0x38) == 0)) {\n    __sinit();\n  }\n  temp2 = *(ushort *)(data + 3);\n  temp1 = (uint)temp2;\n  if ((int)(temp1 << 0x1c) < 0) {\n    value2 = data[4];\n  }\n  else {\n    if (-1 < (int)(temp1 << 0x1b)) {\n      *result = 9;\n      *(ushort *)(data + 3) = temp2 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(temp1 << 0x1d) < 0) {\n      if ((int *)data[0xc] != (int *)0x0) {\n        if ((int *)data[0xc] != data + 0x10) {\n          _free_r(result);\n          temp2 = *(ushort *)(data + 3);\n        }\n        data[0xc] = 0;\n      }\n      value2 = data[4];\n      temp2 = temp2 & 0xffdb;\n      *data = value2;\n      data[1] = 0;\n    }\n    else {\n      value2 = data[4];\n    }\n    *(ushort *)(data + 3) = temp2 | 8;\n    temp1 = (uint)(temp2 | 8);\n  }\n  if ((value2 == 0) && ((temp1 & 0x280) != 0x200)) {\n    __smakebuf_r(result,data);\n    temp1 = (uint)*(ushort *)(data + 3);\n    value2 = data[4];\n  }\n  if ((temp1 & 1) == 0) {\n    value1 = 0;\n    if (-1 < (int)(temp1 << 0x1e)) {\n      value1 = data[5];\n    }\n    data[2] = value1;\n  }\n  else {\n    data[6] = -data[5];\n    data[2] = 0;\n  }\n  if ((value2 == 0) && ((int)((uint)*(ushort *)(data + 3) << 0x18) < 0)) {\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083808": "validate_and_initialize_00083808",
                "param_1": "result",
                "param_2": "data",
                "iVar1": "value1",
                "iVar2": "value2",
                "uVar3": "temp1",
                "uVar4": "temp2"
            },
            "calling": [
                "__swbuf_r",
                "__sfvwrite_r",
                "_vfiprintf_r"
            ],
            "called": [
                "_free_r",
                "__sinit",
                "__smakebuf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000838cc": {
            "entrypoint": "0x000838cc",
            "current_name": "update_value_000838cc",
            "code": "\nundefined4 updateValue_000838cc(int valueType,undefined4 newValue,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 *dataPtr;\n  uint index;\n  uint bitMask;\n  \n  if (DAT_20070180 == (undefined4 *)0x0) {\n    DAT_20070180 = (undefined4 *)&DAT_20070184;\n  }\n  index = DAT_20070180[1];\n  dataPtr = DAT_20070180;\n  if (0x1f < (int)index) {\n    dataPtr = (undefined4 *)malloc(400);\n    if (dataPtr == (undefined4 *)0x0) {\n      return 0xffffffff;\n    }\n    *dataPtr = DAT_20070180;\n    dataPtr[1] = 0;\n    index = 0;\n    DAT_20070180 = dataPtr;\n    dataPtr[0x62] = 0;\n    dataPtr[99] = 0;\n  }\n  if (valueType != 0) {\n    bitMask = 1 << (index & 0xff);\n    dataPtr[index + 0x22] = value1;\n    dataPtr[0x62] = dataPtr[0x62] | bitMask;\n    dataPtr[index + 0x42] = value2;\n    if (valueType == 2) {\n      dataPtr[99] = bitMask | dataPtr[99];\n    }\n  }\n  dataPtr[1] = index + 1;\n  dataPtr[index + 2] = newValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000838cc": "update_value_000838cc",
                "param_1": "valueType",
                "param_2": "newValue",
                "param_3": "value1",
                "param_4": "value2",
                "puVar1": "dataPtr",
                "uVar2": "index",
                "uVar3": "bitMask"
            },
            "calling": [
                "atexit",
                "__cxa_atexit"
            ],
            "called": [
                "malloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083974": {
            "entrypoint": "0x00083974",
            "current_name": "FUNC_00083974",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083978) */\n\nvoid FUNC_00083974(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083974": "FUNC_00083974"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "atexit"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083988": {
            "entrypoint": "0x00083988",
            "current_name": "register_exit_procedure_00083988",
            "code": "\nint registerExitProcedure_00083988(functionPointer *functionPointer)\n\n{\n  int exitProcRegisterStatus;\n  \n  exitProcRegisterStatus = __register_exitproc(0,functionPointer,0,0);\n  return exitProcRegisterStatus;\n}\n\n",
            "renaming": {
                "FUN_00083988": "register_exit_procedure_00083988",
                "__func": "functionPointer",
                "iVar1": "exitProcRegisterStatus"
            },
            "calling": [
                "register_fini"
            ],
            "called": [
                "__register_exitproc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083994": {
            "entrypoint": "0x00083994",
            "current_name": "process_data_00083994",
            "code": "\nundefined4 process_data_00083994(int *input_data,int *output_data)\n\n{\n  int *temp_1;\n  int temp_2;\n  ushort flags;\n  uint flags2;\n  int temp_3;\n  code *callback_fn;\n  int temp_4;\n  \n  flags = *(ushort *)(output_data + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    temp_4 = output_data[4];\n    if (temp_4 == 0) {\n      return 0;\n    }\n    temp_2 = *output_data;\n    if ((flags & 3) == 0) {\n      temp_3 = output_data[5];\n    }\n    else {\n      temp_3 = 0;\n    }\n    *output_data = temp_4;\n    temp_2 = temp_2 - temp_4;\n    output_data[2] = temp_3;\n    do {\n      if (temp_2 < 1) {\n        return 0;\n      }\n      temp_3 = (*(code *)output_data[9])(input_data,output_data[7],temp_4,temp_2);\n      temp_2 = temp_2 - temp_3;\n      temp_4 = temp_4 + temp_3;\n    } while (0 < temp_3);\nLAB_00083a54:\n    *(ushort *)(output_data + 3) = *(ushort *)(output_data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(output_data + 3) = flags | 0x800;\n  if ((output_data[1] < 1) && (output_data[0xf] < 1)) {\n    return 0;\n  }\n  callback_fn = (code *)output_data[10];\n  if (callback_fn == (code *)0x0) {\n    return 0;\n  }\n  flags2 = (uint)(flags | 0x800);\n  temp_4 = *input_data;\n  *input_data = 0;\n  if ((flags & 0x1000) == 0) {\n    temp_2 = (*callback_fn)(input_data,output_data[7],flags2 & 0x1000,1);\n    if ((temp_2 == -1) && (temp_3 = *input_data, temp_3 != 0)) {\n      if ((temp_3 == 0x1d) || (temp_3 == 0x16)) {\n        *input_data = temp_4;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    flags2 = (uint)*(ushort *)(output_data + 3);\n    callback_fn = (code *)output_data[10];\n  }\n  else {\n    temp_2 = output_data[0x14];\n  }\n  if (((int)(flags2 << 0x1d) < 0) && (temp_2 = temp_2 - output_data[1], output_data[0xc] != 0)) {\n    temp_2 = temp_2 - output_data[0xf];\n  }\n  temp_2 = (*callback_fn)(input_data,output_data[7],temp_2,0);\n  if (temp_2 == -1) {\n    temp_3 = *input_data;\n    if (temp_3 != 0) {\n      if ((temp_3 != 0x1d) && (temp_3 != 0x16)) {\n        *(ushort *)(output_data + 3) = *(ushort *)(output_data + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(output_data + 3) = *(ushort *)(output_data + 3) & 0xf7ff;\n      *output_data = output_data[4];\n      output_data[1] = 0;\n      goto LAB_00083a00;\n    }\n    flags = *(ushort *)(output_data + 3) & 0xf7ff;\n    output_data[1] = 0;\n    *(ushort *)(output_data + 3) = flags;\n    *output_data = output_data[4];\n  }\n  else {\n    flags = *(ushort *)(output_data + 3) & 0xf7ff;\n    *output_data = output_data[4];\n    *(ushort *)(output_data + 3) = flags;\n    output_data[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    output_data[0x14] = temp_2;\n  }\nLAB_00083a00:\n  temp_1 = (int *)output_data[0xc];\n  *input_data = temp_4;\n  if (temp_1 == (int *)0x0) {\n    return 0;\n  }\n  if (temp_1 != output_data + 0x10) {\n    _free_r(input_data);\n  }\n  output_data[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083994": "process_data_00083994",
                "param_1": "input_data",
                "param_2": "output_data",
                "piVar1": "temp_1",
                "iVar2": "temp_2",
                "uVar3": "flags",
                "uVar4": "flags2",
                "iVar5": "temp_3",
                "pcVar6": "callback_fn",
                "iVar7": "temp_4"
            },
            "calling": [
                "_fflush_r"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083adc": {
            "entrypoint": "0x00083adc",
            "current_name": "initialize_and_flush_00083adc",
            "code": "\nvoid initializeAndFlush_00083adc(int parameter1,int parameter2)\n\n{\n  if ((parameter1 != 0) && (*(int *)(parameter1 + 0x38) == 0)) {\n    __sinit();\n  }\n  if (*(short *)(parameter2 + 0xc) == 0) {\n    return;\n  }\n  __sflush_r(parameter1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083adc": "initialize_and_flush_00083adc",
                "param_1": "parameter1",
                "param_2": "parameter2"
            },
            "calling": [
                "__swbuf_r",
                "__sbprintf",
                "__sfvwrite_r",
                "_fclose_r"
            ],
            "called": [
                "__sflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b08": {
            "entrypoint": "0x00083b08",
            "current_name": "walk_directories_00083b08",
            "code": "\nvoid walk_directories_00083b08(undefined4 directory_path)\n\n{\n  file_walk(directory_path,0x846a5);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b08": "walk_directories_00083b08",
                "param_1": "directory_path",
                "_fwalk": "file_walk"
            },
            "calling": [],
            "called": [
                "_fwalk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b14": {
            "entrypoint": "0x00083b14",
            "current_name": "initialize_data_structures_00083b14",
            "code": "\nvoid initializeDataStructures_00083b14(int dataStructureAddress)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if (*(int *)(dataStructureAddress + 0x38) == 0) {\n    ptr1 = *(undefined4 **)(dataStructureAddress + 4);\n    *(undefined4 *)(dataStructureAddress + 0x3c) = 0x83b09;\n    *(undefined4 *)(dataStructureAddress + 0x2e4) = 3;\n    *(int *)(dataStructureAddress + 0x2e8) = dataStructureAddress + 0x2ec;\n    *(undefined4 *)(dataStructureAddress + 0x2e0) = 0;\n    *(undefined2 *)(ptr1 + 3) = 4;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    memset(ptr1 + 0x17,0,8);\n    ptr2 = *(undefined4 **)(dataStructureAddress + 8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84441;\n    ptr1[9] = 0x84465;\n    ptr1[10] = 0x8449d;\n    ptr1[0xb] = 0x844bd;\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\n    *(undefined2 *)(ptr2 + 3) = 9;\n    *ptr2 = 0;\n    ptr2[1] = 0;\n    ptr2[2] = 0;\n    ptr2[0x19] = 0;\n    ptr2[4] = 0;\n    ptr2[5] = 0;\n    ptr2[6] = 0;\n    memset(ptr2 + 0x17,0,8);\n    ptr1 = *(undefined4 **)(dataStructureAddress + 0xc);\n    ptr2[7] = ptr2;\n    ptr2[8] = 0x84441;\n    ptr2[9] = 0x84465;\n    ptr2[10] = 0x8449d;\n    ptr2[0xb] = 0x844bd;\n    *(undefined2 *)(ptr1 + 3) = 0x12;\n    *(undefined2 *)((int)ptr1 + 0xe) = 2;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    memset(ptr1 + 0x17,0,8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84441;\n    ptr1[9] = 0x84465;\n    ptr1[10] = 0x8449d;\n    ptr1[0xb] = 0x844bd;\n    *(undefined4 *)(dataStructureAddress + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "dataStructureAddress",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "calling": [
                "__swbuf_r",
                "__swsetup_r",
                "_vfiprintf_r",
                "_fflush_r",
                "_fclose_r"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083c08": {
            "entrypoint": "0x00083c08",
            "current_name": "FUNC_00083c08",
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "calling": [
                "_fclose_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c0c": {
            "entrypoint": "0x00083c0c",
            "current_name": "FUNC_00083c0c",
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "calling": [
                "_fclose_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c10": {
            "entrypoint": "0x00083c10",
            "current_name": "execute_fini_functions_00083c10",
            "code": "\nvoid execute_fini_functions_00083c10(void)\n\n{\n  int count;\n  code **function_pointer;\n  \n  count = 1;\n  function_pointer = (code **)&array_end_pointer;\n  do {\n    count = count + -1;\n    function_pointer = function_pointer + -1;\n    (**function_pointer)();\n  } while (count != 0);\n  _fini();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c10": "execute_fini_functions_00083c10",
                "iVar1": "count",
                "ppcVar2": "function_pointer",
                "__fini_array_end": "array_end_pointer"
            },
            "calling": [],
            "called": [
                "_fini",
                "__do_global_dtors_aux"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083c40": {
            "entrypoint": "0x00083c40",
            "current_name": "convert_character_to_bytes_00083c40",
            "code": "\nuint convertCharacterToBytes_00083c40(undefined4 locale,uint inputChar,byte **outputBytes)\n\n{\n  int maxBytes;\n  uint result;\n  uint convertedChar;\n  byte *bytePtr;\n  uint iteration;\n  byte inputByte;\n  byte byteArray [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(outputBytes + 3) << 0x12)) {\n    *(ushort *)(outputBytes + 3) = *(ushort *)(outputBytes + 3) | 0x2000;\n    outputBytes[0x19] = (byte *)((uint)outputBytes[0x19] | 0x2000);\n  }\n  maxBytes = __locale_mb_cur_max();\n  if ((maxBytes == 1) && (inputChar - 1 < 0xff)) {\n    convertedChar = inputChar & 0xff;\n    inputByte = (byte)convertedChar;\n    result = 1;\n  }\n  else {\n    result = _wcrtomb_r(locale,&inputByte,inputChar,outputBytes + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(outputBytes + 3) = *(ushort *)(outputBytes + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return inputChar;\n    }\n    convertedChar = (uint)inputByte;\n  }\n  iteration = 0;\n  do {\n    bytePtr = outputBytes[2] + -1;\n    outputBytes[2] = bytePtr;\n    if ((int)bytePtr < 0) {\n      if ((int)outputBytes[6] <= (int)bytePtr) {\n        **outputBytes = (byte)convertedChar;\n        bytePtr = *outputBytes;\n        convertedChar = (uint)*bytePtr;\n        if (convertedChar != 10) goto LAB_00083c90;\n      }\n      maxBytes = __swbuf_r(locale,convertedChar,outputBytes);\n      if (maxBytes == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **outputBytes = (byte)convertedChar;\n      bytePtr = *outputBytes;\nLAB_00083c90:\n      *outputBytes = bytePtr + 1;\n    }\n    if (result <= iteration + 1) {\n      return inputChar;\n    }\n    convertedChar = (uint)byteArray[iteration];\n    iteration = iteration + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00083c40": "convert_character_to_bytes_00083c40",
                "param_1": "locale",
                "param_2": "inputChar",
                "param_3": "outputBytes",
                "iVar1": "maxBytes",
                "uVar2": "result",
                "uVar3": "convertedChar",
                "pbVar4": "bytePtr",
                "uVar5": "iteration",
                "local_1c": "inputByte",
                "abStack_1b": "byteArray"
            },
            "calling": [
                "__sprint_r.part.0"
            ],
            "called": [
                "__swbuf_r",
                "__locale_mb_cur_max",
                "_wcrtomb_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d00": {
            "entrypoint": "0x00083d00",
            "current_name": "allocate_memory_00083d00",
            "code": "\nundefined4 allocate_memory_00083d00(undefined4 lock,int size)\n\n{\n  int result;\n  uint heap_size;\n  int block_size;\n  \n  __malloc_lock();\n  heap_size = *(uint *)(DAT_2007046c + 4) & 0xfffffffc;\n  block_size = ((heap_size - size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < block_size) {\n    result = _sbrk_r(lock,0);\n    if (result == DAT_2007046c + heap_size) {\n      result = _sbrk_r(lock,-block_size);\n      if (result != -1) {\n        __malloc_current_mallinfo = __malloc_current_mallinfo - block_size;\n        *(uint *)(DAT_2007046c + 4) = heap_size - block_size | 1;\n        __malloc_unlock(lock);\n        return 1;\n      }\n      block_size = _sbrk_r(lock,0);\n      if (0xf < block_size - DAT_2007046c) {\n        __malloc_current_mallinfo = block_size - __malloc_sbrk_base;\n        *(uint *)(DAT_2007046c + 4) = block_size - DAT_2007046c | 1;\n      }\n    }\n  }\n  __malloc_unlock(lock);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083d00": "allocate_memory_00083d00",
                "param_1": "lock",
                "param_2": "size",
                "iVar1": "result",
                "uVar2": "heap_size",
                "iVar3": "block_size"
            },
            "calling": [
                "_free_r"
            ],
            "called": [
                "_sbrk_r",
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "entrypoint": "0x00083d9c",
            "current_name": "deallocate_memory_block_00083d9c",
            "code": "\nvoid deallocateMemoryBlock_00083d9c(undefined4 param_1,int memoryBlock)\n\n{\n  undefined4 *nextBlockPtr;\n  bool isCurrentBlockHead;\n  uint currentBlockSize;\n  int prevBlockPtr;\n  int currentBlockPtr;\n  undefined1 *searchBlockPtr;\n  uint mergedBlockSize;\n  undefined1 *insertBlockPtr;\n  int currentBlockStart;\n  uint newBlockSize;\n  \n  if (memoryBlock == 0) {\n    return;\n  }\n  __malloc_lock();\n  currentBlockSize = *(uint *)(memoryBlock + -4);\n  currentBlockStart = memoryBlock + -8;\n  mergedBlockSize = currentBlockSize & 0xfffffffe;\n  currentBlockPtr = currentBlockStart + mergedBlockSize;\n  newBlockSize = *(uint *)(currentBlockPtr + 4) & 0xfffffffc;\n  if (DAT_2007046c == currentBlockPtr) {\n    newBlockSize = newBlockSize + mergedBlockSize;\n    if (-1 < (int)(currentBlockSize << 0x1f)) {\n      currentBlockStart = currentBlockStart - *(int *)(memoryBlock + -8);\n      prevBlockPtr = *(int *)(currentBlockStart + 0xc);\n      currentBlockPtr = *(int *)(currentBlockStart + 8);\n      newBlockSize = newBlockSize + *(int *)(memoryBlock + -8);\n      *(int *)(currentBlockPtr + 0xc) = prevBlockPtr;\n      *(int *)(prevBlockPtr + 8) = currentBlockPtr;\n    }\n    currentBlockSize = __malloc_trim_threshold;\n    *(uint *)(currentBlockStart + 4) = newBlockSize | 1;\n    DAT_2007046c = currentBlockStart;\n    if (currentBlockSize <= newBlockSize) {\n      _malloc_trim_r(param_1,__malloc_top_pad);\n    }\n  }\n  else {\n    *(uint *)(currentBlockPtr + 4) = newBlockSize;\n    if ((currentBlockSize & 1) == 0) {\n      currentBlockStart = currentBlockStart - *(int *)(memoryBlock + -8);\n      nextBlockPtr = *(undefined4 **)(currentBlockStart + 8);\n      mergedBlockSize = mergedBlockSize + *(int *)(memoryBlock + -8);\n      if (nextBlockPtr == &DAT_2007046c) {\n        isCurrentBlockHead = true;\n      }\n      else {\n        prevBlockPtr = *(int *)(currentBlockStart + 0xc);\n        nextBlockPtr[3] = prevBlockPtr;\n        *(undefined4 **)(prevBlockPtr + 8) = nextBlockPtr;\n        isCurrentBlockHead = false;\n      }\n    }\n    else {\n      isCurrentBlockHead = false;\n    }\n    if (-1 < *(int *)(currentBlockPtr + newBlockSize + 4) << 0x1f) {\n      mergedBlockSize = mergedBlockSize + newBlockSize;\n      nextBlockPtr = *(undefined4 **)(currentBlockPtr + 8);\n      if ((!isCurrentBlockHead) && (nextBlockPtr == &DAT_2007046c)) {\n        DAT_20070474 = currentBlockStart;\n        DAT_20070478 = currentBlockStart;\n        *(int **)(currentBlockStart + 0xc) = &DAT_2007046c;\n        *(int **)(currentBlockStart + 8) = &DAT_2007046c;\n        *(uint *)(currentBlockStart + 4) = mergedBlockSize | 1;\n        *(uint *)(currentBlockStart + mergedBlockSize) = mergedBlockSize;\n        goto LAB_00083e30;\n      }\n      currentBlockPtr = *(int *)(currentBlockPtr + 0xc);\n      nextBlockPtr[3] = currentBlockPtr;\n      *(undefined4 **)(currentBlockPtr + 8) = nextBlockPtr;\n    }\n    *(uint *)(currentBlockStart + 4) = mergedBlockSize | 1;\n    *(uint *)(currentBlockStart + mergedBlockSize) = mergedBlockSize;\n    if (!isCurrentBlockHead) {\n      if (mergedBlockSize < 0x200) {\n        currentBlockSize = mergedBlockSize & 0xfffffff8;\n        currentBlockPtr = *(int *)((int)&DAT_2007046c + currentBlockSize);\n        DAT_20070468 = DAT_20070468 | 1 << ((int)(mergedBlockSize >> 3) >> 2 & 0xffU);\n        *(int *)(currentBlockStart + 8) = currentBlockPtr;\n        *(undefined1 **)(currentBlockStart + 0xc) = &__malloc_av_ + currentBlockSize;\n        *(int *)((int)&DAT_2007046c + currentBlockSize) = currentBlockStart;\n        *(int *)(currentBlockPtr + 0xc) = currentBlockStart;\n        __malloc_unlock(param_1);\n        return;\n      }\n      currentBlockSize = mergedBlockSize >> 9;\n      if (currentBlockSize < 5) {\n        currentBlockPtr = (mergedBlockSize >> 6) + 0x38;\n        prevBlockPtr = currentBlockPtr * 2;\n      }\n      else if (currentBlockSize < 0x15) {\n        currentBlockPtr = currentBlockSize + 0x5b;\n        prevBlockPtr = currentBlockPtr * 2;\n      }\n      else if (currentBlockSize < 0x55) {\n        currentBlockPtr = (mergedBlockSize >> 0xc) + 0x6e;\n        prevBlockPtr = currentBlockPtr * 2;\n      }\n      else if (currentBlockSize < 0x155) {\n        currentBlockPtr = (mergedBlockSize >> 0xf) + 0x77;\n        prevBlockPtr = currentBlockPtr * 2;\n      }\n      else if (currentBlockSize < 0x555) {\n        currentBlockPtr = (mergedBlockSize >> 0x12) + 0x7c;\n        prevBlockPtr = currentBlockPtr * 2;\n      }\n      else {\n        prevBlockPtr = 0xfc;\n        currentBlockPtr = 0x7e;\n      }\n      searchBlockPtr = (undefined1 *)(&DAT_2007046c)[prevBlockPtr];\n      if (searchBlockPtr == &__malloc_av_ + prevBlockPtr * 4) {\n        DAT_20070468 = DAT_20070468 | 1 << (currentBlockPtr >> 2 & 0xffU);\n        insertBlockPtr = searchBlockPtr;\n      }\n      else {\n        do {\n          if ((*(uint *)(searchBlockPtr + 4) & 0xfffffffc) <= mergedBlockSize) break;\n          searchBlockPtr = *(undefined1 **)(searchBlockPtr + 8);\n        } while (&__malloc_av_ + prevBlockPtr * 4 != searchBlockPtr);\n        insertBlockPtr = *(undefined1 **)(searchBlockPtr + 0xc);\n      }\n      *(undefined1 **)(currentBlockStart + 0xc) = insertBlockPtr;\n      *(undefined1 **)(currentBlockStart + 8) = searchBlockPtr;\n      *(int *)(insertBlockPtr + 8) = currentBlockStart;\n      *(int *)(searchBlockPtr + 0xc) = currentBlockStart;\n    }\n  }\nLAB_00083e30:\n  __malloc_unlock(param_1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083d9c": "deallocate_memory_block_00083d9c",
                "param_2": "memoryBlock",
                "puVar1": "nextBlockPtr",
                "bVar2": "isCurrentBlockHead",
                "uVar3": "currentBlockSize",
                "iVar4": "prevBlockPtr",
                "iVar5": "currentBlockPtr",
                "puVar6": "searchBlockPtr",
                "uVar7": "mergedBlockSize",
                "puVar8": "insertBlockPtr",
                "iVar9": "currentBlockStart",
                "uVar10": "newBlockSize"
            },
            "calling": [
                "__swsetup_r",
                "__sfvwrite_r",
                "_malloc_r",
                "_realloc_r",
                "__sflush_r",
                "_fclose_r",
                "free"
            ],
            "called": [
                "__malloc_unlock",
                "__malloc_lock",
                "_malloc_trim_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083f34": {
            "entrypoint": "0x00083f34",
            "current_name": "process_data_00083f34",
            "code": "\nundefined4 processData_00083f34(undefined4 *status,void **buffer,undefined4 *params)\n\n{\n  void **ptr1;\n  int result;\n  void *temp1;\n  void *temp2;\n  void *temp3;\n  void *temp4;\n  ushort flag;\n  uint value;\n  int count;\n  void **ptr2;\n  void *source;\n  void *temp5;\n  void *temp6;\n  size_t temp7;\n  void *localVar;\n  \n  if (params[2] != 0) {\n    flag = *(ushort *)(buffer + 3);\n    value = (uint)flag;\n    if (((int)(value << 0x1c) < 0) && (buffer[4] != (void *)0x0)) {\n      ptr2 = (void **)*params;\n    }\n    else {\n      result = __swsetup_r(status,buffer);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(buffer + 3);\n      value = (uint)flag;\n      ptr2 = (void **)*params;\n    }\n    if ((flag & 2) == 0) {\n      temp3 = (void *)(value & 2);\n      temp5 = temp3;\n      source = temp3;\n      localVar = temp3;\n      if ((value & 1) == 0) {\n        temp3 = (void *)0x0;\n        temp5 = (void *)0x0;\n        while( true ) {\n          while (temp3 == (void *)0x0) {\n            temp5 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            temp3 = *ptr1;\n          }\n          source = buffer[2];\n          if ((int)(value << 0x16) < 0) {\n            if (temp3 < source) {\n              temp1 = *buffer;\n              source = temp3;\n            }\n            else if ((value & 0x480) == 0) {\n              temp1 = *buffer;\n            }\n            else {\n              temp7 = (int)*buffer - (int)buffer[4];\n              source = (void *)(temp7 + 1 + (int)temp3);\n              temp1 = (void *)(((int)buffer[5] * 3) / 2);\n              if (source <= temp1) {\n                source = temp1;\n              }\n              if ((int)(value << 0x15) < 0) {\n                temp2 = (void *)_malloc_r(status,source);\n                if (temp2 == (void *)0x0) {\n                  *status = 0xc;\n                  flag = *(ushort *)(buffer + 3);\n                  goto LAB_00084030;\n                }\n                memcpy(temp2,buffer[4],temp7);\n                *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                temp2 = (void *)_realloc_r(status);\n                if (temp2 == (void *)0x0) {\n                  _free_r(status,buffer[4]);\n                  flag = *(ushort *)(buffer + 3) & 0xff7f;\n                  *status = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              temp1 = (void *)((int)temp2 + temp7);\n              buffer[4] = temp2;\n              buffer[5] = source;\n              *buffer = temp1;\n              buffer[2] = (void *)((int)source - temp7);\n              source = temp3;\n            }\n            memmove(temp1,temp5,(size_t)source);\n            buffer[2] = (void *)((int)buffer[2] - (int)source);\n            *buffer = (void *)((int)*buffer + (int)source);\n            source = temp3;\n          }\n          else if ((buffer[4] < *buffer) || (temp1 = buffer[5], temp3 < temp1)) {\n            if (temp3 < source) {\n              source = temp3;\n            }\n            memmove(*buffer,temp5,(size_t)source);\n            temp1 = buffer[2];\n            buffer[2] = (void *)((int)temp1 - (int)source);\n            *buffer = (void *)((int)*buffer + (int)source);\n            if (((void *)((int)temp1 - (int)source) == (void *)0x0) &&\n               (result = _fflush_r(status,buffer), result != 0)) goto LAB_0008402e;\n          }\n          else {\n            source = (void *)0x7fffffff;\n            if (temp3 < (void *)0x7fffffff) {\n              source = temp3;\n            }\n            source = (void *)(*(code *)buffer[9])\n                                        (status,buffer[7],temp5,\n                                         ((uint)source / (uint)temp1) * (int)temp1);\n            if ((int)source < 1) goto LAB_0008402e;\n          }\n          result = params[2];\n          temp5 = (void *)((int)temp5 + (int)source);\n          temp3 = (void *)((int)temp3 - (int)source);\n          params[2] = result - (int)source;\n          if (result - (int)source == 0) break;\n          value = (uint)*(ushort *)(buffer + 3);\n        }\n      }\n      else {\n        do {\n          while (temp3 == (void *)0x0) {\n            source = *ptr2;\n            temp3 = ptr2[1];\n            localVar = (void *)0x0;\n            ptr2 = ptr2 + 2;\n          }\n          if (localVar == (void *)0x0) {\n            temp5 = memchr(source,10,(size_t)temp3);\n            if (temp5 == (void *)0x0) {\n              temp5 = (void *)((int)temp3 + 1);\n              localVar = (void *)0x1;\n            }\n            else {\n              temp5 = (void *)((int)temp5 + (1 - (int)source));\n              localVar = (void *)0x1;\n            }\n          }\n          temp2 = *buffer;\n          temp1 = temp5;\n          if (temp3 <= temp5) {\n            temp1 = temp3;\n          }\n          temp4 = buffer[5];\n          if ((buffer[4] < temp2) &&\n             (temp6 = (void *)((int)buffer[2] + (int)temp4), (int)temp6 < (int)temp1)) {\n            memmove(temp2,source,(size_t)temp6);\n            *buffer = (void *)((int)*buffer + (int)temp6);\n            result = _fflush_r(status,buffer);\n            if (result != 0) goto LAB_0008402e;\n          }\n          else if ((int)temp1 < (int)temp4) {\n            memmove(temp2,source,(size_t)temp1);\n            buffer[2] = (void *)((int)buffer[2] - (int)temp1);\n            *buffer = (void *)((int)temp1 + (int)*buffer);\n            temp6 = temp1;\n          }\n          else {\n            temp6 = (void *)(*(code *)buffer[9])(status,buffer[7],source,temp4);\n            if ((int)temp6 < 1) goto LAB_0008402e;\n          }\n          temp5 = (void *)((int)temp5 - (int)temp6);\n          if (temp5 == (void *)0x0) {\n            result = _fflush_r(status,buffer);\n            if (result != 0) goto LAB_0008402e;\n            localVar = (void *)0x0;\n          }\n          result = params[2];\n          source = (void *)((int)source + (int)temp6);\n          temp3 = (void *)((int)temp3 - (int)temp6);\n          params[2] = result - (int)temp6;\n        } while (result - (int)temp6 != 0);\n      }\n    }\n    else {\n      temp5 = (void *)0x0;\n      temp3 = (void *)0x0;\n      do {\n        while( true ) {\n          source = temp3;\n          if ((void *)0x7ffffbff < temp3) {\n            source = (void *)0x7ffffc00;\n          }\n          if (temp3 != (void *)0x0) break;\n          temp5 = *ptr2;\n          temp3 = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)buffer[9])(status,buffer[7],temp5,source);\n        if (result < 1) {\nLAB_0008402e:\n          flag = *(ushort *)(buffer + 3);\nLAB_00084030:\n          *(ushort *)(buffer + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        count = params[2];\n        temp5 = (void *)((int)temp5 + result);\n        temp3 = (void *)((int)temp3 - result);\n        params[2] = count - result;\n      } while (count - result != 0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083f34": "process_data_00083f34",
                "param_1": "status",
                "param_2": "buffer",
                "param_3": "params",
                "ppvVar1": "ptr1",
                "iVar2": "result",
                "pvVar3": "temp1",
                "pvVar4": "temp2",
                "pvVar5": "temp3",
                "pvVar6": "temp4",
                "uVar7": "flag",
                "uVar8": "value",
                "iVar9": "count",
                "ppvVar10": "ptr2",
                "pvVar11": "source",
                "pvVar12": "temp5",
                "__n": "temp6",
                "__n_00": "temp7",
                "local_2c": "localVar"
            },
            "calling": [
                "__sprint_r.part.0"
            ],
            "called": [
                "memchr",
                "__swsetup_r",
                "_malloc_r",
                "_realloc_r",
                "_free_r",
                "memcpy",
                "_fflush_r",
                "memmove"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084248": {
            "entrypoint": "0x00084248",
            "current_name": "process_data_00084248",
            "code": "\nuint processData_00084248(int baseAddress,code *functionPointer)\n\n{\n  uint result;\n  int currentPtr;\n  int count;\n  uint finalResult;\n  int *listPtr;\n  \n  listPtr = (int *)(baseAddress + 0x2e0);\n  if (listPtr != (int *)0x0) {\n    finalResult = 0;\n    do {\n      currentPtr = listPtr[2];\n      count = listPtr[1] + -1;\n      if (-1 < count) {\n        do {\n          count = count + -1;\n          if ((1 < *(ushort *)(currentPtr + 0xc)) && (*(short *)(currentPtr + 0xe) != -1)) {\n            result = (*functionPointer)(currentPtr);\n            finalResult = finalResult | result;\n          }\n          currentPtr = currentPtr + 0x68;\n        } while (count != -1);\n      }\n      listPtr = (int *)*listPtr;\n    } while (listPtr != (int *)0x0);\n    return finalResult;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00084248": "process_data_00084248",
                "param_1": "baseAddress",
                "param_2": "functionPointer",
                "uVar1": "result",
                "iVar2": "currentPtr",
                "iVar3": "count",
                "uVar4": "finalResult",
                "piVar5": "listPtr"
            },
            "calling": [
                "_cleanup_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084290": {
            "entrypoint": "0x00084290",
            "current_name": "get_charset_00084290",
            "code": "\nchar * getCharset_00084290(void)\n\n{\n  return charset;\n}\n\n",
            "renaming": {
                "FUN_00084290": "get_charset_00084290",
                "lc_ctype_charset": "charset"
            },
            "calling": [
                "_wcrtomb_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084298": {
            "entrypoint": "0x00084298",
            "current_name": "get_max_mb_cur_00084298",
            "code": "\nundefined4 get_max_mb_cur_00084298(void)\n\n{\n  return max_mb_cur;\n}\n\n",
            "renaming": {
                "FUN_00084298": "get_max_mb_cur_00084298",
                "__mb_cur_max": "max_mb_cur"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "extract_file_info_000842a4",
            "code": "\nvoid extractFileInfo_000842a4(int fileDescriptor,int *fileInfo)\n\n{\n  ushort fileInfoFlags;\n  int fileStatResult;\n  int mallocResult;\n  uint fileInfoFlagsUint;\n  bool isRegularFile;\n  undefined statBuffer [4];\n  uint fileMode;\n  \n  fileInfoFlags = *(ushort *)(fileInfo + 3);\n  fileInfoFlagsUint = (uint)fileInfoFlags;\n  if ((int)(fileInfoFlagsUint << 0x1e) < 0) {\n    *fileInfo = (int)fileInfo + 0x43;\n    fileInfo[4] = (int)fileInfo + 0x43;\n    fileInfo[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)fileInfo + 0xe)) {\n    fileStatResult = _fstat_r(fileDescriptor,(int)*(short *)((int)fileInfo + 0xe),statBuffer);\n    if (-1 < fileStatResult) {\n      isRegularFile = (fileMode & 0xf000) == 0x2000;\n      if (((fileMode & 0xf000) == 0x8000) && (fileInfo[10] == 0x8449d)) {\n        fileStatResult = 0x400;\n        *(ushort *)(fileInfo + 3) = *(ushort *)(fileInfo + 3) | 0x400;\n        fileInfo[0x13] = 0x400;\n      }\n      else {\n        fileStatResult = 0x400;\n        *(ushort *)(fileInfo + 3) = *(ushort *)(fileInfo + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    fileInfoFlags = *(ushort *)(fileInfo + 3);\n    fileInfoFlagsUint = (uint)fileInfoFlags;\n  }\n  *(ushort *)(fileInfo + 3) = fileInfoFlags | 0x800;\n  if ((fileInfoFlagsUint & 0x80) == 0) {\n    fileStatResult = 0x400;\n  }\n  else {\n    fileStatResult = 0x40;\n  }\n  isRegularFile = false;\nLAB_00084300:\n  mallocResult = _malloc_r(fileDescriptor,fileStatResult);\n  fileInfoFlags = *(ushort *)(fileInfo + 3);\n  if (mallocResult == 0) {\n    if (-1 < (int)((uint)fileInfoFlags << 0x16)) {\n      *(ushort *)(fileInfo + 3) = fileInfoFlags | 2;\n      *fileInfo = (int)fileInfo + 0x43;\n      fileInfo[4] = (int)fileInfo + 0x43;\n      fileInfo[5] = 1;\n    }\n  }\n  else {\n    *(undefined4 *)(fileDescriptor + 0x3c) = 0x83b09;\n    *(ushort *)(fileInfo + 3) = fileInfoFlags | 0x80;\n    *fileInfo = mallocResult;\n    fileInfo[4] = mallocResult;\n    fileInfo[5] = fileStatResult;\n    if ((isRegularFile) && (fileStatResult = _isatty_r(fileDescriptor,(int)*(short *)((int)fileInfo + 0xe)), fileStatResult != 0)) {\n      *(ushort *)(fileInfo + 3) = *(ushort *)(fileInfo + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "extract_file_info_000842a4",
                "param_1": "fileDescriptor",
                "param_2": "fileInfo",
                "uVar1": "fileInfoFlags",
                "iVar2": "fileStatResult",
                "iVar3": "mallocResult",
                "uVar4": "fileInfoFlagsUint",
                "bVar5": "isRegularFile",
                "auStack_54": "statBuffer",
                "local_50": "fileMode"
            },
            "calling": [
                "__swsetup_r"
            ],
            "called": [
                "_isatty_r",
                "_malloc_r",
                "_fstat_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084384": {
            "entrypoint": "0x00084384",
            "current_name": "find_first_occurrence_00084384",
            "code": "\nvoid * find_first_occurrence_00084384(void *buffer,int character,size_t length)\n\n{\n  uint character_mask;\n  uint temp;\n  int index;\n  uint *ptr;\n  uint character_repeat;\n  bool is_last_character;\n  \n  character_mask = character & 0xff;\n  if (((uint)buffer & 3) == 0) {\nLAB_000843b4:\n    if (3 < length) {\n      character_repeat = character_mask | character_mask << 8;\n      ptr = (uint *)buffer;\n      do {\n        temp = *ptr ^ (character_repeat | character_repeat << 0x10);\n        buffer = ptr;\n        if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) break;\n        length = length - 4;\n        buffer = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      buffer = (uint *)0x0;\n    }\n    else {\n                    /* WARNING: Load size is inaccurate */\n      if (*buffer != character_mask) {\n        index = 0;\n        do {\n          buffer = (void *)((int)buffer + 1);\n          is_last_character = index == length - 1;\n          index = index + 1;\n          if (is_last_character) goto LAB_000843dc;\n                    /* WARNING: Load size is inaccurate */\n        } while (*buffer != character_mask);\n      }\n    }\n  }\n  else if (length == 0) {\nLAB_000843dc:\n    buffer = (uint *)0x0;\n  }\n  else {\n                    /* WARNING: Load size is inaccurate */\n    if (*buffer != character_mask) {\n      ptr = (uint *)((int)buffer + 1);\n      length = length - 1;\n      do {\n        buffer = ptr;\n        if (((uint)buffer & 3) == 0) goto LAB_000843b4;\n        if (length == 0) goto LAB_000843dc;\n                    /* WARNING: Load size is inaccurate */\n        ptr = (uint *)((int)buffer + 1);\n        length = length - 1;\n      } while (*buffer != character_mask);\n    }\n  }\n  return buffer;\n}\n\n",
            "renaming": {
                "FUN_00084384": "find_first_occurrence_00084384",
                "__s": "buffer",
                "__c": "character",
                "__n": "length",
                "uVar1": "character_mask",
                "uVar2": "temp",
                "iVar3": "index",
                "puVar4": "ptr",
                "uVar5": "character_repeat",
                "bVar6": "is_last_character"
            },
            "calling": [
                "__sfvwrite_r",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084418": {
            "entrypoint": "0x00084418",
            "current_name": "kill_process_00084418",
            "code": "\nvoid kill_process_00084418(int *error_code_ptr,int pid,int signal)\n\n{\n  last_error = 0;\n  _kill(pid,signal);\n  if ((pid == -1) && (last_error != 0)) {\n    *error_code_ptr = last_error;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084418": "kill_process_00084418",
                "param_1": "error_code_ptr",
                "param_2": "pid",
                "param_3": "signal",
                "errno": "last_error"
            },
            "calling": [
                "kill"
            ],
            "called": [
                "_kill"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084440": {
            "entrypoint": "0x00084440",
            "current_name": "update_total_00084440",
            "code": "\nvoid updateTotal_00084440(undefined4 fileStream,int structAddress)\n\n{\n  int bytesRead;\n  \n  bytesRead = _read_r(fileStream,(int)*(short *)(structAddress + 0xe));\n  if (-1 < bytesRead) {\n    *(int *)(structAddress + 0x50) = *(int *)(structAddress + 0x50) + bytesRead;\n    return;\n  }\n  *(ushort *)(structAddress + 0xc) = *(ushort *)(structAddress + 0xc) & 0xefff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084440": "update_total_00084440",
                "param_1": "fileStream",
                "param_2": "structAddress",
                "iVar1": "bytesRead"
            },
            "calling": [],
            "called": [
                "_read_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084464": {
            "entrypoint": "0x00084464",
            "current_name": "modify_and_write_data_00084464",
            "code": "\nvoid modifyAndWriteData_00084464(undefined4 fileDescriptor,int dataPointer,undefined4 bufferPointer,undefined4 numBytes)\n\n{\n  ushort dataValue;\n  \n  dataValue = *(ushort *)(dataPointer + 0xc);\n  if ((int)((uint)dataValue << 0x17) < 0) {\n    _lseek_r(fileDescriptor,(int)*(short *)(dataPointer + 0xe),0,2);\n    dataValue = *(ushort *)(dataPointer + 0xc);\n  }\n  *(ushort *)(dataPointer + 0xc) = dataValue & 0xefff;\n  _write_r(fileDescriptor,(int)*(short *)(dataPointer + 0xe),bufferPointer,numBytes);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084464": "modify_and_write_data_00084464",
                "param_1": "fileDescriptor",
                "param_2": "dataPointer",
                "param_3": "bufferPointer",
                "param_4": "numBytes",
                "uVar1": "dataValue"
            },
            "calling": [],
            "called": [
                "_write_r",
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008449c": {
            "entrypoint": "0x0008449c",
            "current_name": "update_file_flags_0008449c",
            "code": "\nvoid updateFileFlags_0008449c(undefined4 fileDescriptor,int structAddress)\n\n{\n  int seekResult;\n  ushort updatedFlags;\n  \n  seekResult = _lseek_r(fileDescriptor,(int)*(short *)(structAddress + 0xe));\n  if (seekResult == -1) {\n    updatedFlags = *(ushort *)(structAddress + 0xc) & 0xefff;\n  }\n  else {\n    updatedFlags = *(ushort *)(structAddress + 0xc) | 0x1000;\n  }\n  if (seekResult != -1) {\n    *(int *)(structAddress + 0x50) = seekResult;\n  }\n  *(ushort *)(structAddress + 0xc) = updatedFlags;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008449c": "update_file_flags_0008449c",
                "param_1": "fileDescriptor",
                "param_2": "structAddress",
                "iVar1": "seekResult",
                "uVar2": "updatedFlags"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844bc": {
            "entrypoint": "0x000844bc",
            "current_name": "close_file_descriptor_000844bc",
            "code": "\nvoid closeFileDescriptor_000844bc(undefined4 fileDescriptor,int pointerToStructure)\n\n{\n  _close_r(fileDescriptor,(int)*(short *)(pointerToStructure + 0xe));\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844bc": "close_file_descriptor_000844bc",
                "param_1": "fileDescriptor",
                "param_2": "pointerToStructure"
            },
            "calling": [],
            "called": [
                "_close_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844c4": {
            "entrypoint": "0x000844c4",
            "current_name": "process_input_000844c4",
            "code": "\nuint processInput_000844c4(int input_check,uint character,undefined4 *output_buffer,undefined4 buffer_size)\n\n{\n  ushort flag;\n  uint flag_value;\n  undefined *output_ptr;\n  int index;\n  \n  if ((input_check != 0) && (*(int *)(input_check + 0x38) == 0)) {\n    __sinit();\n  }\n  flag = *(ushort *)(output_buffer + 3);\n  flag_value = (uint)flag;\n  output_buffer[2] = output_buffer[6];\n  if ((-1 < (int)(flag_value << 0x1c)) || (index = output_buffer[4], index == 0)) {\n    index = __swsetup_r(input_check,output_buffer,flag,flag_value,buffer_size);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    flag = *(ushort *)(output_buffer + 3);\n    index = output_buffer[4];\n    flag_value = (uint)flag;\n  }\n  character = character & 0xff;\n  if ((int)(flag_value << 0x12) < 0) {\n    output_ptr = (undefined *)*output_buffer;\n    index = (int)output_ptr - index;\n    if (index < (int)output_buffer[5]) {\nLAB_000844f6:\n      index = index + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    output_buffer[0x19] = output_buffer[0x19] & 0xffffdfff;\n    output_ptr = (undefined *)*output_buffer;\n    *(ushort *)(output_buffer + 3) = flag | 0x2000;\n    index = (int)output_ptr - index;\n    if (index < (int)output_buffer[5]) goto LAB_000844f6;\n  }\n  index = _fflush_r(input_check,output_buffer);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  output_ptr = (undefined *)*output_buffer;\n  index = 1;\nLAB_000844f8:\n  output_buffer[2] = output_buffer[2] + -1;\n  *output_buffer = output_ptr + 1;\n  *output_ptr = (char)character;\n  if (((output_buffer[5] == index) ||\n      (((int)((uint)*(ushort *)(output_buffer + 3) << 0x1f) < 0 && (character == 10)))) &&\n     (index = _fflush_r(input_check,output_buffer), index != 0)) {\n    return 0xffffffff;\n  }\n  return character;\n}\n\n",
            "renaming": {
                "FUN_000844c4": "process_input_000844c4",
                "param_1": "input_check",
                "param_2": "character",
                "param_3": "output_buffer",
                "param_4": "buffer_size",
                "uVar1": "flag",
                "uVar2": "flag_value",
                "puVar3": "output_ptr",
                "iVar4": "index"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [
                "__swsetup_r",
                "_fflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008456c": {
            "entrypoint": "0x0008456c",
            "current_name": "convert_string_to_locale_encoding_0008456c",
            "code": "\nvoid convertStringToLocaleEncoding_0008456c(undefined4 *destinationString,int sourceStringLength,undefined4 sourceString,undefined4 *conversionError)\n\n{\n  code *wideCharToMultiByte;\n  undefined4 localeCharset;\n  int conversionResult;\n  undefined conversionBuffer [12];\n  \n  wideCharToMultiByte = __wctomb;\n  if (sourceStringLength == 0) {\n    localeCharset = __locale_charset();\n    conversionResult = (*wideCharToMultiByte)(destinationString,conversionBuffer,0,localeCharset,conversionError);\n  }\n  else {\n    localeCharset = __locale_charset();\n    conversionResult = (*wideCharToMultiByte)(destinationString,sourceStringLength,sourceString,localeCharset,conversionError);\n  }\n  if (conversionResult == -1) {\n    *conversionError = 0;\n    *destinationString = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008456c": "convert_string_to_locale_encoding_0008456c",
                "param_1": "destinationString",
                "param_2": "sourceStringLength",
                "param_3": "sourceString",
                "param_4": "conversionError",
                "pcVar1": "wideCharToMultiByte",
                "uVar2": "localeCharset",
                "iVar3": "conversionResult",
                "auStack_24": "conversionBuffer"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [
                "__locale_charset",
                "__ascii_wctomb"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "process_data_000845bc",
            "code": "\nundefined4 process_data_000845bc(undefined4 *output_ptr,undefined *input_ptr,uint data_size)\n\n{\n  if (input_ptr == (undefined *)0x0) {\n    return 0;\n  }\n  if (data_size < 0x100) {\n    *input_ptr = (char)data_size;\n    return 1;\n  }\n  *output_ptr = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "process_data_000845bc",
                "param_1": "output_ptr",
                "param_2": "input_ptr",
                "param_3": "data_size"
            },
            "calling": [
                "_wcrtomb_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845d8": {
            "entrypoint": "0x000845d8",
            "current_name": "write_to_stream_000845d8",
            "code": "\nvoid writeToStream_000845d8(int *error,int fileDescriptor,char *buffer,int count)\n\n{\n  int writeResult;\n  \n  errno = 0;\n  writeResult = _write(fileDescriptor,buffer,count);\n  if ((writeResult == -1) && (errno != 0)) {\n    *error = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000845d8": "write_to_stream_000845d8",
                "param_1": "error",
                "param_2": "fileDescriptor",
                "param_3": "buffer",
                "param_4": "count",
                "iVar1": "writeResult"
            },
            "calling": [
                "__swrite"
            ],
            "called": [
                "_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084600": {
            "entrypoint": "0x00084600",
            "current_name": "close_file_and_handle_errors_00084600",
            "code": "\nvoid closeFileAndHandleErrors_00084600(int *errorPointer,int fileDescriptor)\n\n{\n  int closeResult;\n  \n  errno = 0;\n  closeResult = _close(fileDescriptor);\n  if ((closeResult == -1) && (errno != 0)) {\n    *errorPointer = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084600": "close_file_and_handle_errors_00084600",
                "param_1": "errorPointer",
                "param_2": "fileDescriptor",
                "iVar1": "closeResult"
            },
            "calling": [
                "__sclose"
            ],
            "called": [
                "_close"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084624": {
            "entrypoint": "0x00084624",
            "current_name": "flush_and_free_resources_00084624",
            "code": "\nundefined4 flushAndFreeResources_00084624(int stream,int buffer)\n\n{\n  undefined4 result;\n  int returnValue;\n  \n  if (buffer != 0) {\n    if ((stream != 0) && (*(int *)(stream + 0x38) == 0)) {\n      __sinit();\n    }\n    if (*(short *)(buffer + 0xc) != 0) {\n      result = _fflush_r(stream,buffer);\n      if ((*(code **)(buffer + 0x2c) != (code *)0x0) &&\n         (returnValue = (**(code **)(buffer + 0x2c))(stream,*(undefined4 *)(buffer + 0x1c)), returnValue < 0)\n         ) {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(buffer + 0xc) << 0x18) < 0) {\n        _free_r(stream,*(undefined4 *)(buffer + 0x10));\n      }\n      if (*(int *)(buffer + 0x30) != 0) {\n        if (*(int *)(buffer + 0x30) != buffer + 0x40) {\n          _free_r(stream);\n        }\n        *(undefined4 *)(buffer + 0x30) = 0;\n      }\n      if (*(int *)(buffer + 0x44) != 0) {\n        _free_r(stream);\n        *(undefined4 *)(buffer + 0x44) = 0;\n      }\n      __sfp_lock_acquire();\n      *(undefined2 *)(buffer + 0xc) = 0;\n      __sfp_lock_release();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00084624": "flush_and_free_resources_00084624",
                "param_1": "stream",
                "param_2": "buffer",
                "uVar1": "result",
                "iVar2": "returnValue"
            },
            "calling": [
                "fclose"
            ],
            "called": [
                "__sfp_lock_release",
                "_free_r",
                "__sfp_lock_acquire",
                "_fflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846a4": {
            "entrypoint": "0x000846a4",
            "current_name": "close_file_000846a4",
            "code": "\nint closeFile_000846a4(FILE *file)\n\n{\n  int result;\n  \n  result = _fclose_r(_impure_ptr,file);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000846a4": "close_file_000846a4",
                "__stream": "file",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "_fclose_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846b4": {
            "entrypoint": "0x000846b4",
            "current_name": "get_file_status_000846b4",
            "code": "\nvoid get_file_status_000846b4(int *error_code,int file_descriptor,stat *status)\n\n{\n  int result;\n  \n  errno = 0;\n  result = _fstat(file_descriptor,status);\n  if ((result == -1) && (errno != 0)) {\n    *error_code = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846b4": "get_file_status_000846b4",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "status",
                "iVar1": "result"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846dc": {
            "entrypoint": "0x000846dc",
            "current_name": "check_if_terminal_000846dc",
            "code": "\nvoid checkIfTerminal_000846dc(int *errorNumber,int fileDescriptor)\n\n{\n  int result;\n  \n  errno = 0;\n  result = _isatty(fileDescriptor);\n  if ((result == -1) && (errno != 0)) {\n    *errorNumber = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846dc": "check_if_terminal_000846dc",
                "param_1": "errorNumber",
                "param_2": "fileDescriptor",
                "iVar1": "result"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_isatty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084700": {
            "entrypoint": "0x00084700",
            "current_name": "seek_and_store_errno_00084700",
            "code": "\nvoid seek_and_store_errno_00084700(int *error_ptr,int file_descriptor,__off_t offset,int whence)\n\n{\n  __off_t result;\n  \n  errno = 0;\n  result = _lseek(file_descriptor,offset,whence);\n  if ((result == -1) && (errno != 0)) {\n    *error_ptr = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084700": "seek_and_store_errno_00084700",
                "param_1": "error_ptr",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "_Var1": "result"
            },
            "calling": [
                "__swrite",
                "__sseek"
            ],
            "called": [
                "_lseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084728": {
            "entrypoint": "0x00084728",
            "current_name": "read_and_store_data_00084728",
            "code": "\nvoid readAndStoreData_00084728(int *errorCode,int fileDescriptor,char *buffer,int size)\n\n{\n  int readResult;\n  \n  errno = 0;\n  readResult = _read(fileDescriptor,buffer,size);\n  if ((readResult == -1) && (errno != 0)) {\n    *errorCode = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084728": "read_and_store_data_00084728",
                "param_1": "errorCode",
                "param_2": "fileDescriptor",
                "param_3": "buffer",
                "param_4": "size",
                "iVar1": "readResult"
            },
            "calling": [
                "__sread"
            ],
            "called": [
                "_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084750": {
            "entrypoint": "0x00084750",
            "current_name": "handle_division_00084750",
            "code": "\nvoid handleDivision_00084750(int dividend,int divisor,int quotient,int remainder)\n\n{\n  if ((remainder == 0) && (quotient == 0)) {\n    if (divisor != 0 || dividend != 0) {\n      dividend = -1;\n    }\n    __aeabi_idiv0(dividend);\n    return;\n  }\n  __gnu_uldivmod_helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084750": "handle_division_00084750",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__gnu_uldivmod_helper",
                "__aeabi_idiv0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008477c": {
            "entrypoint": "0x0008477c",
            "current_name": "calculate_difference_0008477c",
            "code": "\nvoid calculateDifference_0008477c(uint inputValue,int secondValue,undefined4 lowerHalf,undefined4 upperHalf,int *resultArray)\n\n{\n  uint resultValue;\n  longlong combinedProduct;\n  \n  combinedProduct = __divdi3();\n  combinedProduct = combinedProduct * CONCAT44(upperHalf,lowerHalf);\n  resultValue = (uint)combinedProduct;\n  *resultArray = inputValue - resultValue;\n  resultArray[1] = (secondValue - (int)((ulonglong)combinedProduct >> 0x20)) - (uint)(inputValue < resultValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "inputValue",
                "param_2": "secondValue",
                "param_3": "lowerHalf",
                "param_4": "upperHalf",
                "param_5": "resultArray",
                "uVar1": "resultValue",
                "lVar2": "combinedProduct"
            },
            "calling": [],
            "called": [
                "__divdi3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847ac": {
            "entrypoint": "0x000847ac",
            "current_name": "subtract_and_store_000847ac",
            "code": "\nvoid subtractAndStore_000847ac(uint subtractFrom,int subtractValue,undefined4 concatPart1,undefined4 concatPart2,int *outputArray)\n\n{\n  uint result;\n  longlong multiplyResult;\n  \n  multiplyResult = __udivdi3();\n  multiplyResult = multiplyResult * CONCAT44(concatPart2,concatPart1);\n  result = (uint)multiplyResult;\n  *outputArray = subtractFrom - result;\n  outputArray[1] = (subtractValue - (int)((ulonglong)multiplyResult >> 0x20)) - (uint)(subtractFrom < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847ac": "subtract_and_store_000847ac",
                "param_1": "subtractFrom",
                "param_2": "subtractValue",
                "param_3": "concatPart1",
                "param_4": "concatPart2",
                "param_5": "outputArray",
                "uVar1": "result",
                "lVar2": "multiplyResult"
            },
            "calling": [
                "__aeabi_uldivmod"
            ],
            "called": [
                "__udivdi3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847dc": {
            "entrypoint": "0x000847dc",
            "current_name": "FUNC_000847dc",
            "code": "\nvoid FUNC_000847dc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847dc": "FUNC_000847dc"
            },
            "calling": [
                "__aeabi_uldivmod"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000847e0": {
            "entrypoint": "0x000847e0",
            "current_name": "divide_with_overflow_000847e0",
            "code": "\nundefined8 divideWithOverflow_000847e0(uint dividend,uint dividend_high,uint divisor,uint divisor_high)\n\n{\n  longlong temp_result;\n  uint quotient;\n  uint quotient_high;\n  uint remainder;\n  uint temp;\n  int shift_count;\n  uint temp1;\n  uint temp2;\n  uint is_dividend_negative;\n  uint divisor_sign;\n  uint temp_result2;\n  uint shifted_divisor;\n  bool carry_flag;\n  \n  if ((int)dividend_high < 0) {\n    carry_flag = dividend != 0;\n    dividend = -dividend;\n    dividend_high = -dividend_high - (uint)carry_flag;\n    is_dividend_negative = 0xffffffff;\n  }\n  else {\n    is_dividend_negative = 0;\n  }\n  if ((int)divisor_high < 0) {\n    is_dividend_negative = ~is_dividend_negative;\n    carry_flag = divisor != 0;\n    divisor = -divisor;\n    divisor_high = -divisor_high - (uint)carry_flag;\n  }\n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift_count = LZCOUNT(divisor);\n      if (shift_count != 0) {\n        quotient_high = dividend >> (0x20U - shift_count & 0xff);\n        divisor = divisor << shift_count;\n        dividend = dividend << shift_count;\n        dividend_high = dividend_high << shift_count | quotient_high;\n      }\n      quotient = divisor >> 0x10;\n      remainder = dividend_high / quotient;\n      temp1 = (divisor & 0xffff) * remainder;\n      divisor_sign = dividend >> 0x10 | (dividend_high - quotient * remainder) * 0x10000;\n      quotient_high = remainder;\n      if (divisor_sign <= temp1 && temp1 - divisor_sign != 0) {\n        carry_flag = CARRY4(divisor_sign,divisor);\n        divisor_sign = divisor_sign + divisor;\n        quotient_high = remainder - 1;\n        if ((carry_flag == false) && (divisor_sign <= temp1 && temp1 - divisor_sign != 0)) {\n          quotient_high = remainder - 2;\n          divisor_sign = divisor_sign + divisor;\n        }\n      }\n      temp2 = (divisor_sign - temp1) / quotient;\n      remainder = (divisor & 0xffff) * temp2;\n      temp1 = dividend & 0xffff | ((divisor_sign - temp1) - quotient * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp1 <= remainder && remainder - temp1 != 0) {\n        quotient = temp2 - 1;\n        if ((CARRY4(temp1,divisor) == false) &&\n           (temp1 + divisor <= remainder && remainder - (temp1 + divisor) != 0)) {\n          quotient = temp2 - 2;\n        }\n      }\n      quotient = quotient | quotient_high << 0x10;\n      quotient_high = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_count = LZCOUNT(divisor);\n      if (shift_count == 0) {\n        dividend_high = dividend_high - divisor;\n        remainder = divisor >> 0x10;\n        shifted_divisor = divisor & 0xffff;\n        quotient_high = 1;\n      }\n      else {\n        divisor = divisor << shift_count;\n        quotient_high = dividend_high >> (0x20U - shift_count & 0xff);\n        remainder = divisor >> 0x10;\n        divisor_sign = quotient_high / remainder;\n        shifted_divisor = divisor & 0xffff;\n        temp1 = shifted_divisor * divisor_sign;\n        temp2 = dividend >> (0x20U - shift_count & 0xff) | dividend_high << shift_count;\n        quotient_high = temp2 >> 0x10 | (quotient_high - remainder * divisor_sign) * 0x10000;\n        dividend = dividend << shift_count;\n        quotient = divisor_sign;\n        if (quotient_high <= temp1 && temp1 - quotient_high != 0) {\n          carry_flag = CARRY4(quotient_high,divisor);\n          quotient_high = quotient_high + divisor;\n          quotient = divisor_sign - 1;\n          if ((carry_flag == false) && (quotient_high <= temp1 && temp1 - quotient_high != 0)) {\n            quotient = divisor_sign - 2;\n            quotient_high = quotient_high + divisor;\n          }\n        }\n        temp = (quotient_high - temp1) / remainder;\n        divisor_sign = shifted_divisor * temp;\n        dividend_high = temp2 & 0xffff | ((quotient_high - temp1) - remainder * temp) * 0x10000;\n        quotient_high = temp;\n        if (dividend_high <= divisor_sign && divisor_sign - dividend_high != 0) {\n          carry_flag = CARRY4(dividend_high,divisor);\n          dividend_high = dividend_high + divisor;\n          quotient_high = temp - 1;\n          if ((carry_flag == false) && (dividend_high <= divisor_sign && divisor_sign - dividend_high != 0)) {\n            quotient_high = temp - 2;\n            dividend_high = dividend_high + divisor;\n          }\n        }\n        dividend_high = dividend_high - divisor_sign;\n        quotient_high = quotient_high | quotient << 0x10;\n      }\n      quotient = dividend_high / remainder;\n      divisor_sign = shifted_divisor * quotient;\n      temp2 = dividend >> 0x10 | (dividend_high - remainder * quotient) * 0x10000;\n      temp1 = quotient;\n      if (temp2 <= divisor_sign && divisor_sign - temp2 != 0) {\n        carry_flag = CARRY4(temp2,divisor);\n        temp2 = temp2 + divisor;\n        temp1 = quotient - 1;\n        if ((carry_flag == false) && (temp2 <= divisor_sign && divisor_sign - temp2 != 0)) {\n          temp1 = quotient - 2;\n          temp2 = temp2 + divisor;\n        }\n      }\n      temp = (temp2 - divisor_sign) / remainder;\n      shifted_divisor = shifted_divisor * temp;\n      remainder = dividend & 0xffff | ((temp2 - divisor_sign) - remainder * temp) * 0x10000;\n      quotient = temp;\n      if (remainder <= shifted_divisor && shifted_divisor - remainder != 0) {\n        quotient = temp - 1;\n        if ((CARRY4(remainder,divisor) == false) &&\n           (remainder + divisor <= shifted_divisor && shifted_divisor - (remainder + divisor) != 0)) {\n          quotient = temp - 2;\n        }\n      }\n      quotient = quotient | temp1 << 0x10;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    quotient_high = 0;\n    quotient = 0;\n  }\n  else {\n    shift_count = LZCOUNT(divisor_high);\n    if (shift_count == 0) {\n      if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n        quotient_high = 0;\n        quotient = 1;\n      }\n      else {\n        quotient = 0;\n        quotient_high = 0;\n      }\n    }\n    else {\n      quotient_high = 0x20 - shift_count;\n      remainder = dividend_high >> (quotient_high & 0xff);\n      shifted_divisor = divisor >> (quotient_high & 0xff) | divisor_high << shift_count;\n      divisor_sign = shifted_divisor >> 0x10;\n      quotient = remainder / divisor_sign;\n      temp2 = (shifted_divisor & 0xffff) * quotient;\n      temp1 = dividend_high << shift_count | dividend >> (quotient_high & 0xff);\n      remainder = temp1 >> 0x10 | (remainder - divisor_sign * quotient) * 0x10000;\n      quotient_high = quotient;\n      if (remainder <= temp2 && temp2 - remainder != 0) {\n        carry_flag = CARRY4(remainder,shifted_divisor);\n        remainder = remainder + shifted_divisor;\n        quotient_high = quotient - 1;\n        if ((carry_flag == false) && (remainder <= temp2 && temp2 - remainder != 0)) {\n          quotient_high = quotient - 2;\n          remainder = remainder + shifted_divisor;\n        }\n      }\n      temp = (remainder - temp2) / divisor_sign;\n      temp_result2 = (shifted_divisor & 0xffff) * temp;\n      remainder = temp1 & 0xffff | ((remainder - temp2) - divisor_sign * temp) * 0x10000;\n      quotient = temp;\n      if (remainder <= temp_result2 && temp_result2 - remainder != 0) {\n        carry_flag = CARRY4(remainder,shifted_divisor);\n        remainder = remainder + shifted_divisor;\n        quotient = temp - 1;\n        if ((carry_flag == false) && (remainder <= temp_result2 && temp_result2 - remainder != 0)) {\n          quotient = temp - 2;\n          remainder = remainder + shifted_divisor;\n        }\n      }\n      quotient = quotient | quotient_high << 0x10;\n      temp_result = (ulonglong)quotient * (ulonglong)(divisor << shift_count);\n      temp1 = (uint)((ulonglong)temp_result >> 0x20);\n      quotient_high = 0;\n      if ((remainder - temp_result2 < temp1) ||\n         ((remainder - temp_result2 == temp1 && (dividend << shift_count < (uint)temp_result)))) {\n        quotient = quotient - 1;\n        quotient_high = 0;\n      }\n    }\n  }\n  if (is_dividend_negative != 0) {\n    carry_flag = quotient != 0;\n    quotient = -quotient;\n    quotient_high = -quotient_high - (uint)carry_flag;\n  }\n  return CONCAT44(quotient_high,quotient);\n}\n\n",
            "renaming": {
                "FUN_000847e0": "divide_with_overflow_000847e0",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "lVar1": "temp_result",
                "uVar2": "quotient",
                "uVar3": "quotient_high",
                "uVar4": "remainder",
                "uVar5": "temp",
                "iVar6": "shift_count",
                "uVar7": "temp1",
                "uVar8": "temp2",
                "uVar9": "is_dividend_negative",
                "uVar10": "divisor_sign",
                "uVar11": "temp_result2",
                "uVar12": "shifted_divisor",
                "bVar13": "carry_flag"
            },
            "calling": [
                "__gnu_ldivmod_helper"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084a80": {
            "entrypoint": "0x00084a80",
            "current_name": "divide_and_round_00084a80",
            "code": "\nulonglong divideAndRound_00084a80(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong tempLong;\n  uint tempHigh;\n  uint tempDivisor;\n  uint tempDividend;\n  uint tempProduct;\n  uint tempRemainder;\n  uint tempQuotient;\n  uint temp1;\n  uint temp2;\n  int tempCount;\n  bool isCarry;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      tempCount = LZCOUNT(quotient);\n      if (tempCount == 0) {\n        divisor = divisor - quotient;\n        tempDivisor = quotient >> 0x10;\n        tempProduct = quotient & 0xffff;\n        tempHigh = 1;\n      }\n      else {\n        quotient = quotient << tempCount;\n        temp1 = divisor >> (0x20U - tempCount & 0xff);\n        tempDivisor = quotient >> 0x10;\n        temp2 = temp1 / tempDivisor;\n        tempProduct = quotient & 0xffff;\n        tempHigh = tempProduct * temp2;\n        tempRemainder = dividend >> (0x20U - tempCount & 0xff) | divisor << tempCount;\n        tempDividend = tempRemainder >> 0x10 | (temp1 - tempDivisor * temp2) * 0x10000;\n        dividend = dividend << tempCount;\n        temp1 = temp2;\n        if (tempDividend <= tempHigh && tempHigh - tempDividend != 0) {\n          isCarry = CARRY4(tempDividend,quotient);\n          tempDividend = tempDividend + quotient;\n          temp1 = temp2 - 1;\n          if ((isCarry == false) && (tempDividend <= tempHigh && tempHigh - tempDividend != 0)) {\n            temp1 = temp2 - 2;\n            tempDividend = tempDividend + quotient;\n          }\n        }\n        tempQuotient = (tempDividend - tempHigh) / tempDivisor;\n        temp2 = tempProduct * tempQuotient;\n        divisor = tempRemainder & 0xffff | ((tempDividend - tempHigh) - tempDivisor * tempQuotient) * 0x10000;\n        tempHigh = tempQuotient;\n        if (divisor <= temp2 && temp2 - divisor != 0) {\n          isCarry = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          tempHigh = tempQuotient - 1;\n          if ((isCarry == false) && (divisor <= temp2 && temp2 - divisor != 0)) {\n            tempHigh = tempQuotient - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - temp2;\n        tempHigh = tempHigh | temp1 << 0x10;\n      }\n      temp2 = divisor / tempDivisor;\n      tempDividend = tempProduct * temp2;\n      tempRemainder = dividend >> 0x10 | (divisor - tempDivisor * temp2) * 0x10000;\n      temp1 = temp2;\n      if (tempRemainder <= tempDividend && tempDividend - tempRemainder != 0) {\n        isCarry = CARRY4(tempRemainder,quotient);\n        tempRemainder = tempRemainder + quotient;\n        temp1 = temp2 - 1;\n        if ((isCarry == false) && (tempRemainder <= tempDividend && tempDividend - tempRemainder != 0)) {\n          temp1 = temp2 - 2;\n          tempRemainder = tempRemainder + quotient;\n        }\n      }\n      temp2 = (tempRemainder - tempDividend) / tempDivisor;\n      tempProduct = tempProduct * temp2;\n      tempRemainder = dividend & 0xffff | ((tempRemainder - tempDividend) - tempDivisor * temp2) * 0x10000;\n      tempDivisor = temp2;\n      if (tempRemainder <= tempProduct && tempProduct - tempRemainder != 0) {\n        tempDivisor = temp2 - 1;\n        if ((CARRY4(tempRemainder,quotient) == false) &&\n           (tempRemainder + quotient <= tempProduct && tempProduct - (tempRemainder + quotient) != 0)) {\n          tempDivisor = temp2 - 2;\n        }\n      }\n      return CONCAT44(tempHigh,tempDivisor | temp1 << 0x10);\n    }\n    tempCount = LZCOUNT(quotient);\n    if (tempCount != 0) {\n      temp1 = dividend >> (0x20U - tempCount & 0xff);\n      quotient = quotient << tempCount;\n      dividend = dividend << tempCount;\n      divisor = temp1 | divisor << tempCount;\n    }\n    tempHigh = quotient >> 0x10;\n    tempDivisor = divisor / tempHigh;\n    tempProduct = (quotient & 0xffff) * tempDivisor;\n    temp2 = dividend >> 0x10 | (divisor - tempHigh * tempDivisor) * 0x10000;\n    temp1 = tempDivisor;\n    if (temp2 <= tempProduct && tempProduct - temp2 != 0) {\n      isCarry = CARRY4(temp2,quotient);\n      temp2 = temp2 + quotient;\n      temp1 = tempDivisor - 1;\n      if ((isCarry == false) && (temp2 <= tempProduct && tempProduct - temp2 != 0)) {\n        temp1 = tempDivisor - 2;\n        temp2 = temp2 + quotient;\n      }\n    }\n    tempRemainder = (temp2 - tempProduct) / tempHigh;\n    tempDivisor = (quotient & 0xffff) * tempRemainder;\n    tempProduct = dividend & 0xffff | ((temp2 - tempProduct) - tempHigh * tempRemainder) * 0x10000;\n    tempHigh = tempRemainder;\n    if (tempProduct <= tempDivisor && tempDivisor - tempProduct != 0) {\n      tempHigh = tempRemainder - 1;\n      if ((CARRY4(tempProduct,quotient) == false) &&\n         (tempProduct + quotient <= tempDivisor && tempDivisor - (tempProduct + quotient) != 0)) {\n        tempHigh = tempRemainder - 2;\n      }\n    }\n    tempHigh = tempHigh | temp1 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    tempCount = LZCOUNT(remainder);\n    if (tempCount == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      tempHigh = 0;\n    }\n    else {\n      tempHigh = 0x20 - tempCount;\n      temp1 = divisor >> (tempHigh & 0xff);\n      tempDivisor = remainder << tempCount | quotient >> (tempHigh & 0xff);\n      tempProduct = tempDivisor >> 0x10;\n      tempDividend = temp1 / tempProduct;\n      temp2 = (tempDivisor & 0xffff) * tempDividend;\n      tempRemainder = dividend >> (tempHigh & 0xff) | divisor << tempCount;\n      tempHigh = tempRemainder >> 0x10 | (temp1 - tempProduct * tempDividend) * 0x10000;\n      temp1 = tempDividend;\n      if (tempHigh <= temp2 && temp2 - tempHigh != 0) {\n        isCarry = CARRY4(tempHigh,tempDivisor);\n        tempHigh = tempHigh + tempDivisor;\n        temp1 = tempDividend - 1;\n        if ((isCarry == false) && (tempHigh <= temp2 && temp2 - tempHigh != 0)) {\n          temp1 = tempDividend - 2;\n          tempHigh = tempHigh + tempDivisor;\n        }\n      }\n      tempDividend = (tempHigh - temp2) / tempProduct;\n      tempQuotient = (tempDivisor & 0xffff) * tempDividend;\n      tempProduct = tempRemainder & 0xffff | ((tempHigh - temp2) - tempProduct * tempDividend) * 0x10000;\n      tempHigh = tempDividend;\n      if (tempProduct <= tempQuotient && tempQuotient - tempProduct != 0) {\n        isCarry = CARRY4(tempProduct,tempDivisor);\n        tempProduct = tempProduct + tempDivisor;\n        tempHigh = tempDividend - 1;\n        if ((isCarry == false) && (tempProduct <= tempQuotient && tempQuotient - tempProduct != 0)) {\n          tempHigh = tempDividend - 2;\n          tempProduct = tempProduct + tempDivisor;\n        }\n      }\n      tempHigh = tempHigh | temp1 << 0x10;\n      tempLong = (ulonglong)tempHigh * (ulonglong)(quotient << tempCount);\n      temp1 = (uint)((ulonglong)tempLong >> 0x20);\n      if ((tempProduct - tempQuotient < temp1) || ((tempProduct - tempQuotient == temp1 && (dividend << tempCount < (uint)tempLong)))\n         ) {\n        tempHigh = tempHigh - 1;\n      }\n    }\n  }\n  return (ulonglong)tempHigh;\n}\n\n",
            "renaming": {
                "FUN_00084a80": "divide_and_round_00084a80",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "tempLong",
                "uVar2": "tempHigh",
                "uVar3": "tempDivisor",
                "uVar4": "tempDividend",
                "uVar5": "tempProduct",
                "uVar6": "tempRemainder",
                "uVar7": "tempQuotient",
                "uVar8": "temp1",
                "uVar9": "temp2",
                "bVar11": "isCarry",
                "iVar10": "tempCount"
            },
            "calling": [
                "__gnu_uldivmod_helper"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085858": {
            "entrypoint": "0x00085858",
            "current_name": "FUNC_00085858",
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00085874": {
            "entrypoint": "0x00085874",
            "current_name": "FUNC_00085874",
            "code": "\nvoid FUNC_00085874(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085874": "FUNC_00085874"
            },
            "calling": [
                "__libc_fini_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_20070000": {
            "entrypoint": "0x20070000",
            "current_name": "disable_irq_interrupts_20070000",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid disable_irq_interrupts_20070000(void)\n\n{\n  disableIRQinterrupts();\n  do {\n  } while (-1 < *(int *)(DAT_2007001c + 8) << 0x1f);\n  *(undefined4 *)(DAT_2007001c + 4) = DAT_20070020;\n  do {\n  } while (-1 < *(int *)(DAT_2007001c + 8) << 0x1f);\n  *DAT_20070028 = DAT_20070024;\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_20070000": "disable_irq_interrupts_20070000"
            },
            "calling": [
                "tickReset",
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 114994,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080148",
            "FUN_0008014c",
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_0008021c",
            "FUN_00080258",
            "FUN_000802da",
            "FUN_000803d4",
            "FUN_00080410",
            "FUN_0008043e",
            "FUN_000804a8",
            "FUN_000805d0",
            "FUN_00080a68",
            "FUN_00080aac",
            "FUN_00080ac0",
            "FUN_00080acc",
            "FUN_00080ad8",
            "FUN_00080ae4",
            "FUN_00080c0c",
            "FUN_00080ce0",
            "FUN_00080d24",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080da0",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e5c",
            "FUN_00080e9c",
            "FUN_00080f24",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081074",
            "FUN_00081084",
            "FUN_000810bc",
            "FUN_000810f4",
            "FUN_0008112c",
            "FUN_00081164",
            "FUN_00081166",
            "FUN_0008116a",
            "FUN_0008116e",
            "FUN_00081184",
            "FUN_00081188",
            "FUN_0008118c",
            "FUN_000811a8",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "FUN_000811f0",
            "FUN_00081202",
            "FUN_00081208",
            "FUN_00081210",
            "FUN_00081318",
            "FUN_00081388",
            "FUN_000813a8",
            "FUN_000813c2",
            "FUN_000813e0",
            "FUN_000813e4",
            "FUN_000813f6",
            "FUN_00081412",
            "FUN_0008143c",
            "FUN_00081454",
            "FUN_000814a8",
            "FUN_000814e4",
            "FUN_00081508",
            "FUN_00081578",
            "FUN_00081580",
            "FUN_000815ca",
            "FUN_000815d4",
            "FUN_000815f8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081622",
            "FUN_0008163a",
            "FUN_0008165c",
            "FUN_00081682",
            "FUN_000816a8",
            "FUN_000816d4",
            "FUN_000816e0",
            "FUN_00081704",
            "FUN_00081714",
            "FUN_00081720",
            "FUN_00081728",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_000818b8",
            "FUN_000818c8",
            "FUN_00081944",
            "FUN_00081aac",
            "FUN_00081be4",
            "FUN_00081bec",
            "FUN_00081bf4",
            "FUN_00081c54",
            "FUN_00081c5c",
            "FUN_00081c6c",
            "FUN_00081c80",
            "FUN_00081c94",
            "FUN_00081ca8",
            "FUN_00081cbc",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d68",
            "FUN_00081d7c",
            "FUN_00081dcc",
            "FUN_00081df4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_000825a0",
            "FUN_000825b0",
            "FUN_00082970",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00082ab0",
            "FUN_00082ac0",
            "FUN_00082b38",
            "FUN_0008378c",
            "FUN_00083808",
            "FUN_000838cc",
            "FUN_00083988",
            "FUN_00083994",
            "FUN_00083adc",
            "FUN_00083b08",
            "FUN_00083b14",
            "FUN_00083c10",
            "FUN_00083c40",
            "FUN_00083d00",
            "FUN_00083d9c",
            "FUN_00083f34",
            "FUN_00084248",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_000842a4",
            "FUN_00084384",
            "FUN_00084418",
            "FUN_00084440",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_000844bc",
            "FUN_000844c4",
            "FUN_0008456c",
            "FUN_000845bc",
            "FUN_000845d8",
            "FUN_00084600",
            "FUN_00084624",
            "FUN_000846a4",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_00084750",
            "FUN_0008477c",
            "FUN_000847ac",
            "FUN_000847e0",
            "FUN_00084a80",
            "FUN_20070000"
        ]
    ],
    "locked_functions": []
}